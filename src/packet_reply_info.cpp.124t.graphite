
;; Function std::stack<PacketReplyInfo*>::~stack() (_ZNSt5stackIP15PacketReplyInfoSt5dequeIS1_SaIS1_EEED2Ev, funcdef_no=1719, decl_uid=30957, cgraph_uid=526, symbol_order=555)


Pass statistics:
----------------

std::stack<PacketReplyInfo*>::~stack() (struct stackD.28738 * const thisD.30958)
{
  struct PacketReplyInfoD.28726 * * * __nstartD.32780;
  struct PacketReplyInfoD.28726 * * * _7;
  struct PacketReplyInfoD.28726 * * * _8;
  struct PacketReplyInfoD.28726 * * * _9;
  struct PacketReplyInfoD.28726 * * _12;
  struct PacketReplyInfoD.28726 * * * pretmp_18;
  struct PacketReplyInfoD.28726 * * * prephitmp_19;

;;   basic block 2, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#71ptD.0 => &this_1(D)->cD.29731
  # DEBUG thisD.32033 => D#71ptD.0
  # DEBUG D#62ptD.0 => &D#71ptD.0->D.29688
  # DEBUG thisD.32022 => D#62ptD.0
  # DEBUG thisD.32019 => D#71ptD.0
  # DEBUG D#2ptD.0 => &D#71ptD.0->D.29688._M_implD.29139._M_finishD.29144
  # DEBUG thisD.32021 => NULL
  # DEBUG __xD.32020 => D#2ptD.0
  # DEBUG D#70ptD.0 => MEM[(const struct iteratorD.29026 &)D#71ptD.0 + 48]._M_curD.29038
  # DEBUG D.32028 => D#70ptD.0
  # DEBUG D#69ptD.0 => MEM[(const struct iteratorD.29026 &)D#71ptD.0 + 48]._M_firstD.29039
  # DEBUG D.32029 => D#69ptD.0
  # DEBUG D#68ptD.0 => MEM[(const struct iteratorD.29026 &)D#71ptD.0 + 48]._M_lastD.29040
  # DEBUG D.32030 => D#68ptD.0
  # DEBUG D#67ptD.0 => MEM[(const struct iteratorD.29026 &)D#71ptD.0 + 48]._M_nodeD.29041
  # DEBUG D.32031 => D#67ptD.0
  # DEBUG thisD.32016 => D#71ptD.0
  # DEBUG D#3ptD.0 => &D#71ptD.0->D.29688._M_implD.29139._M_startD.29143
  # DEBUG thisD.32018 => NULL
  # DEBUG __xD.32017 => D#3ptD.0
  # DEBUG D#66ptD.0 => MEM[(const struct iteratorD.29026 &)D#71ptD.0 + 16]._M_curD.29038
  # DEBUG D.32024 => D#66ptD.0
  # DEBUG D#65ptD.0 => MEM[(const struct iteratorD.29026 &)D#71ptD.0 + 16]._M_firstD.29039
  # DEBUG D.32025 => D#65ptD.0
  # DEBUG D#64ptD.0 => MEM[(const struct iteratorD.29026 &)D#71ptD.0 + 16]._M_lastD.29040
  # DEBUG D.32026 => D#64ptD.0
  # DEBUG D#63ptD.0 => MEM[(const struct iteratorD.29026 &)D#71ptD.0 + 16]._M_nodeD.29041
  # DEBUG D.32027 => D#63ptD.0
  # DEBUG D#4ptD.0 => D#71ptD.0
  # DEBUG thisD.32015 => D#4ptD.0
  # DEBUG __firstD.32014 => D#5ptD.0
  # DEBUG __lastD.32013 => D#6ptD.0
  # DEBUG D.32012 => D#7ptD.0
  # DEBUG D#115ptD.0 => &MEM[(struct dequeD.28737 *)this_1(D)].D.29688
  # DEBUG thisD.32774 => D#115ptD.0
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _7 = MEM[(struct _Deque_baseD.28773 *)this_1(D)]._M_implD.29139._M_mapD.29141;
  if (_7 != 0B)
    goto <bb 3>;
  else
    goto <bb 9>;
;;    succ:       3 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _8 = MEM[(struct _Deque_baseD.28773 *)this_1(D)]._M_implD.29139._M_finishD.29144._M_nodeD.29041;
  # PT = nonlocal escaped 
  _9 = _8 + 8;
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __nstart_10 = MEM[(struct _Deque_baseD.28773 *)this_1(D)]._M_implD.29139._M_startD.29143._M_nodeD.29041;
  # DEBUG D#53ptD.0 => D#115ptD.0
  # DEBUG __nstartD.32780 => __nstart_10
  # DEBUG __nfinishD.32779 => _9
  # DEBUG thisD.32778 => D#53ptD.0
  # DEBUG __nD.32781 => __nstart_10
  if (_9 <= __nstart_10)
    goto <bb 8>;
  else
    goto <bb 4>;
;;    succ:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_25 = PHI <.MEM_2(D)(4), .MEM_16(6)>
  # PT = nonlocal escaped 
  # __nstart_22 = PHI <__nstart_10(4), __nstart_13(6)>
  # DEBUG __nD.32781 => __nstart_22
  # VUSE <.MEM_25>
  # PT = nonlocal escaped 
  _12 = *__nstart_22;
  # DEBUG thisD.32783 => D#51ptD.0
  # DEBUG __pD.32782 => _12
  # DEBUG __sizeD.31861 => 8
  # DEBUG D#44ptD.0 => &D#52ptD.0->_M_implD.29139
  # DEBUG D#42ptD.0 => D#44ptD.0
  # DEBUG __pD.32787 => _12
  # DEBUG __aD.32785 => D#42ptD.0
  # DEBUG __nD.32786 => D#43ptD.0
  # DEBUG D#41ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#42ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG __pD.32790 => _12
  # DEBUG thisD.32788 => D#38ptD.0
  # DEBUG D.32789 => D#39ptD.0
  # .MEM_16 = VDEF <.MEM_25>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_12);
  # PT = nonlocal escaped 
  __nstart_13 = __nstart_22 + 8;
  # DEBUG __nD.32781 => __nstart_13
  # DEBUG __nD.32781 => __nstart_13
  if (_9 <= __nstart_13)
    goto <bb 7>;
  else
    goto <bb 6>;
;;    succ:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_16>
  pretmp_18 = MEM[(struct _Deque_baseD.28773 *)this_1(D)]._M_implD.29139._M_mapD.29141;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_23 = PHI <.MEM_16(7), .MEM_2(D)(3)>
  # PT = nonlocal escaped 
  # prephitmp_19 = PHI <pretmp_18(7), _7(3)>
  # DEBUG D#60ptD.0 => D#115ptD.0->_M_implD.29139._M_map_sizeD.29142
  # DEBUG D#116ptD.0 => MEM[(struct _Deque_baseD.28773 *)this_1(D)]._M_implD.29139._M_mapD.29141
  # DEBUG D#58ptD.0 => D#115ptD.0
  # DEBUG D#59ptD.0 => D#60ptD.0
  # DEBUG __pD.32793 => D#116ptD.0
  # DEBUG thisD.32791 => D#58ptD.0
  # DEBUG __nD.32792 => D#59ptD.0
  # DEBUG D#57ptD.0 => D#59ptD.0
  # DEBUG D#56ptD.0 => D#58ptD.0
  # DEBUG D#55ptD.0 => D#56ptD.0
  # DEBUG thisD.31965 => D#55ptD.0
  # DEBUG D#54ptD.0 => D#55ptD.0
  # DEBUG thisD.31953 => D#54ptD.0
  # DEBUG thisD.31945 => NULL
  # DEBUG D.31946 => NULL
  # DEBUG thisD.31943 => NULL
  # DEBUG D#36ptD.0 => &__map_allocD.32794
  # DEBUG D#37ptD.0 => D#57ptD.0
  # DEBUG __pD.32797 => D#116ptD.0
  # DEBUG __aD.32795 => D#36ptD.0
  # DEBUG __nD.32796 => D#37ptD.0
  # DEBUG D#35ptD.0 => D#37ptD.0
  # DEBUG D#34ptD.0 => D#36ptD.0
  # DEBUG D#32ptD.0 => D#34ptD.0
  # DEBUG D#33ptD.0 => D#35ptD.0
  # DEBUG __pD.32800 => D#116ptD.0
  # DEBUG thisD.32798 => D#32ptD.0
  # DEBUG D.32799 => D#33ptD.0
  # .MEM_17 = VDEF <.MEM_23>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (prephitmp_19);
  # DEBUG thisD.31979 => &__map_allocD.32794
  # DEBUG thisD.31958 => &__map_allocD.32794
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 8, next block 1, flags: (NEW, REACHABLE)
;;    pred:       2 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_15 = PHI <.MEM_2(D)(2), .MEM_17(8)>
  # DEBUG D#61ptD.0 => &D#115ptD.0->_M_implD.29139
  # DEBUG thisD.32775 => D#61ptD.0
  # DEBUG thisD.32776 => D#61ptD.0
  # DEBUG thisD.32777 => D#61ptD.0
  # .MEM_4 = VDEF <.MEM_15>
  MEM[(struct  &)this_1(D)] ={v} {CLOBBER};
  # VUSE <.MEM_4>
  return;
;;    succ:       EXIT [100.0%] 

}


Creating dr for MEM[(struct _Deque_base *)this_1(D)]._M_impl._M_map
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_1(D)]
	Access function 0: 0
	Access function 1: 0
Creating dr for MEM[(struct _Deque_base *)this_1(D)]._M_impl._M_finish._M_node
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 72
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_1(D)]
	Access function 0: 192
	Access function 1: 384
	Access function 2: 0
Creating dr for MEM[(struct _Deque_base *)this_1(D)]._M_impl._M_start._M_node
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_1(D)]
	Access function 0: 192
	Access function 1: 128
	Access function 2: 0
Creating dr for *__nstart_22
analyze_innermost: success.
	base_address: __nstart_10
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_10
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_22
analyze_innermost: success.
	base_address: __nstart_10
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_10
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_22
analyze_innermost: success.
	base_address: __nstart_10
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_10
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_22
analyze_innermost: success.
	base_address: __nstart_10
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_10
	Access function 0: {0B, +, 8}_1
Analyzing # of iterations of loop 1
  exit condition [__nstart_10 + 8, + , 8](no_overflow) < _8 + 8
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) _8 - (unsigned long) __nstart_10) + 7) / 8, bounded by 2305843009213693951
Analyzing # of iterations of loop 1
  exit condition [__nstart_10 + 8, + , 8](no_overflow) < _8 + 8
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) _8 - (unsigned long) __nstart_10) + 7) / 8, bounded by 2305843009213693951
Creating dr for *__nstart_22
analyze_innermost: success.
	base_address: __nstart_10
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_10
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_22
analyze_innermost: success.
	base_address: __nstart_10
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_10
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_22
analyze_innermost: success.
	base_address: __nstart_10
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_10
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_22
analyze_innermost: success.
	base_address: __nstart_10
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_10
	Access function 0: {0B, +, 8}_1
Analyzing # of iterations of loop 1
  exit condition [__nstart_10 + 8, + , 8](no_overflow) < _8 + 8
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) _8 - (unsigned long) __nstart_10) + 7) / 8, bounded by 2305843009213693951
Creating dr for MEM[(struct _Deque_base *)this_1(D)]._M_impl._M_map
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_1(D)]
	Access function 0: 0
	Access function 1: 0

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:11, LOOPS:1, CONDITIONS:3, STMTS:106)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_9 })
  {
    <bb 2>:
    # DEBUG D#71 => &this_1(D)->c
    # DEBUG this => D#71
    # DEBUG D#62 => &D#71->D.29688
    # DEBUG this => D#62
    # DEBUG this => D#71
    # DEBUG D#2 => &D#71->D.29688._M_impl._M_finish
    # DEBUG this => NULL
    # DEBUG __x => D#2
    # DEBUG D#70 => MEM[(const struct iterator &)D#71 + 48]._M_cur
    # DEBUG D.32028 => D#70
    # DEBUG D#69 => MEM[(const struct iterator &)D#71 + 48]._M_first
    # DEBUG D.32029 => D#69
    # DEBUG D#68 => MEM[(const struct iterator &)D#71 + 48]._M_last
    # DEBUG D.32030 => D#68
    # DEBUG D#67 => MEM[(const struct iterator &)D#71 + 48]._M_node
    # DEBUG D.32031 => D#67
    # DEBUG this => D#71
    # DEBUG D#3 => &D#71->D.29688._M_impl._M_start
    # DEBUG this => NULL
    # DEBUG __x => D#3
    # DEBUG D#66 => MEM[(const struct iterator &)D#71 + 16]._M_cur
    # DEBUG D.32024 => D#66
    # DEBUG D#65 => MEM[(const struct iterator &)D#71 + 16]._M_first
    # DEBUG D.32025 => D#65
    # DEBUG D#64 => MEM[(const struct iterator &)D#71 + 16]._M_last
    # DEBUG D.32026 => D#64
    # DEBUG D#63 => MEM[(const struct iterator &)D#71 + 16]._M_node
    # DEBUG D.32027 => D#63
    # DEBUG D#4 => D#71
    # DEBUG this => D#4
    # DEBUG __first => D#5
    # DEBUG __last => D#6
    # DEBUG D.32012 => D#7
    # DEBUG D#115 => &MEM[(struct deque *)this_1(D)].D.29688
    # DEBUG this => D#115
    # VUSE <.MEM_2(D)>
    _7 = MEM[(struct _Deque_base *)this_1(D)]._M_impl._M_map;
    if (_7 != 0B)
      goto <bb 3>;
    else
      goto <bb 9>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_8 bb_4 })
  {
    <bb 3>:
    # VUSE <.MEM_2(D)>
    _8 = MEM[(struct _Deque_base *)this_1(D)]._M_impl._M_finish._M_node;
    _9 = _8 + 8;
    # VUSE <.MEM_2(D)>
    __nstart_10 = MEM[(struct _Deque_base *)this_1(D)]._M_impl._M_start._M_node;
    # DEBUG D#53 => D#115
    # DEBUG __nstart => __nstart_10
    # DEBUG __nfinish => _9
    # DEBUG this => D#53
    # DEBUG __n => __nstart_10
    if (_9 <= __nstart_10)
      goto <bb 8>;
    else
      goto <bb 4>;

  }
  bb_4 (preds = {bb_3 }, succs = {bb_5 })
  {
    <bb 4>:

  }
  bb_7 (preds = {bb_5 }, succs = {bb_10 })
  {
    <bb 7>:

  }
  bb_10 (preds = {bb_7 }, succs = {bb_8 })
  {
    <bb 10>:
    # VUSE <.MEM_16>
    pretmp_18 = MEM[(struct _Deque_base *)this_1(D)]._M_impl._M_map;

  }
  bb_8 (preds = {bb_10 bb_3 }, succs = {bb_9 })
  {
    <bb 8>:
    # .MEM_23 = PHI <.MEM_16(10), .MEM_2(D)(3)>
    # prephitmp_19 = PHI <pretmp_18(10), _7(3)>
    # DEBUG D#60 => D#115->_M_impl._M_map_size
    # DEBUG D#116 => MEM[(struct _Deque_base *)this_1(D)]._M_impl._M_map
    # DEBUG D#58 => D#115
    # DEBUG D#59 => D#60
    # DEBUG __p => D#116
    # DEBUG this => D#58
    # DEBUG __n => D#59
    # DEBUG D#57 => D#59
    # DEBUG D#56 => D#58
    # DEBUG D#55 => D#56
    # DEBUG this => D#55
    # DEBUG D#54 => D#55
    # DEBUG this => D#54
    # DEBUG this => NULL
    # DEBUG D.31946 => NULL
    # DEBUG this => NULL
    # DEBUG D#36 => &__map_alloc
    # DEBUG D#37 => D#57
    # DEBUG __p => D#116
    # DEBUG __a => D#36
    # DEBUG __n => D#37
    # DEBUG D#35 => D#37
    # DEBUG D#34 => D#36
    # DEBUG D#32 => D#34
    # DEBUG D#33 => D#35
    # DEBUG __p => D#116
    # DEBUG this => D#32
    # DEBUG D.32799 => D#33
    # .MEM_17 = VDEF <.MEM_23>
    operator delete (prephitmp_19);
    # DEBUG this => &__map_alloc
    # DEBUG this => &__map_alloc

  }
  bb_9 (preds = {bb_2 bb_8 }, succs = {bb_1 })
  {
    <bb 9>:
    # .MEM_15 = PHI <.MEM_2(D)(2), .MEM_17(8)>
    # DEBUG D#61 => &D#115->_M_impl
    # DEBUG this => D#61
    # DEBUG this => D#61
    # DEBUG this => D#61
    # .MEM_4 = VDEF <.MEM_15>
    MEM[(struct  &)this_1(D)] ={v} {CLOBBER};
    # VUSE <.MEM_4>
    return;

  }
  loop_1 (header = 5, latch = 6, niter = (((unsigned long) _8 - (unsigned long) __nstart_10) + 7) / 8, upper_bound = 2305843009213693951)
  {
    bb_5 (preds = {bb_4 bb_6 }, succs = {bb_7 bb_6 })
    {
      <bb 5>:
      # .MEM_25 = PHI <.MEM_2(D)(4), .MEM_16(6)>
      # __nstart_22 = PHI <__nstart_10(4), __nstart_13(6)>
      # DEBUG __n => __nstart_22
      # VUSE <.MEM_25>
      _12 = *__nstart_22;
      # DEBUG this => D#51
      # DEBUG __p => _12
      # DEBUG __size => 8
      # DEBUG D#44 => &D#52->_M_impl
      # DEBUG D#42 => D#44
      # DEBUG __p => _12
      # DEBUG __a => D#42
      # DEBUG __n => D#43
      # DEBUG D#41 => D#43
      # DEBUG D#40 => D#42
      # DEBUG D#38 => D#40
      # DEBUG D#39 => D#41
      # DEBUG __p => _12
      # DEBUG this => D#38
      # DEBUG D.32789 => D#39
      # .MEM_16 = VDEF <.MEM_25>
      operator delete (_12);
      __nstart_13 = __nstart_22 + 8;
      # DEBUG __n => __nstart_13
      # DEBUG __n => __nstart_13
      if (_9 <= __nstart_13)
        goto <bb 7>;
      else
        goto <bb 6>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_5 })
    {
      <bb 6>:
      goto <bb 5>;

    }
  }
}

Pass statistics:
----------------

std::stack<PacketReplyInfo*>::~stack() (struct stackD.28738 * const thisD.30958)
{
  struct PacketReplyInfoD.28726 * * * __nstartD.32780;
  struct PacketReplyInfoD.28726 * * * _7;
  struct PacketReplyInfoD.28726 * * * _8;
  struct PacketReplyInfoD.28726 * * * _9;
  struct PacketReplyInfoD.28726 * * _12;
  struct PacketReplyInfoD.28726 * * * pretmp_18;
  struct PacketReplyInfoD.28726 * * * prephitmp_19;

;;   basic block 2, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#71ptD.0 => &this_1(D)->cD.29731
  # DEBUG thisD.32033 => D#71ptD.0
  # DEBUG D#62ptD.0 => &D#71ptD.0->D.29688
  # DEBUG thisD.32022 => D#62ptD.0
  # DEBUG thisD.32019 => D#71ptD.0
  # DEBUG D#2ptD.0 => &D#71ptD.0->D.29688._M_implD.29139._M_finishD.29144
  # DEBUG thisD.32021 => NULL
  # DEBUG __xD.32020 => D#2ptD.0
  # DEBUG D#70ptD.0 => MEM[(const struct iteratorD.29026 &)D#71ptD.0 + 48]._M_curD.29038
  # DEBUG D.32028 => D#70ptD.0
  # DEBUG D#69ptD.0 => MEM[(const struct iteratorD.29026 &)D#71ptD.0 + 48]._M_firstD.29039
  # DEBUG D.32029 => D#69ptD.0
  # DEBUG D#68ptD.0 => MEM[(const struct iteratorD.29026 &)D#71ptD.0 + 48]._M_lastD.29040
  # DEBUG D.32030 => D#68ptD.0
  # DEBUG D#67ptD.0 => MEM[(const struct iteratorD.29026 &)D#71ptD.0 + 48]._M_nodeD.29041
  # DEBUG D.32031 => D#67ptD.0
  # DEBUG thisD.32016 => D#71ptD.0
  # DEBUG D#3ptD.0 => &D#71ptD.0->D.29688._M_implD.29139._M_startD.29143
  # DEBUG thisD.32018 => NULL
  # DEBUG __xD.32017 => D#3ptD.0
  # DEBUG D#66ptD.0 => MEM[(const struct iteratorD.29026 &)D#71ptD.0 + 16]._M_curD.29038
  # DEBUG D.32024 => D#66ptD.0
  # DEBUG D#65ptD.0 => MEM[(const struct iteratorD.29026 &)D#71ptD.0 + 16]._M_firstD.29039
  # DEBUG D.32025 => D#65ptD.0
  # DEBUG D#64ptD.0 => MEM[(const struct iteratorD.29026 &)D#71ptD.0 + 16]._M_lastD.29040
  # DEBUG D.32026 => D#64ptD.0
  # DEBUG D#63ptD.0 => MEM[(const struct iteratorD.29026 &)D#71ptD.0 + 16]._M_nodeD.29041
  # DEBUG D.32027 => D#63ptD.0
  # DEBUG D#4ptD.0 => D#71ptD.0
  # DEBUG thisD.32015 => D#4ptD.0
  # DEBUG __firstD.32014 => D#5ptD.0
  # DEBUG __lastD.32013 => D#6ptD.0
  # DEBUG D.32012 => D#7ptD.0
  # DEBUG D#115ptD.0 => &MEM[(struct dequeD.28737 *)this_1(D)].D.29688
  # DEBUG thisD.32774 => D#115ptD.0
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _7 = MEM[(struct _Deque_baseD.28773 *)this_1(D)]._M_implD.29139._M_mapD.29141;
  if (_7 != 0B)
    goto <bb 3>;
  else
    goto <bb 9>;
;;    succ:       3 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _8 = MEM[(struct _Deque_baseD.28773 *)this_1(D)]._M_implD.29139._M_finishD.29144._M_nodeD.29041;
  # PT = nonlocal escaped 
  _9 = _8 + 8;
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __nstart_10 = MEM[(struct _Deque_baseD.28773 *)this_1(D)]._M_implD.29139._M_startD.29143._M_nodeD.29041;
  # DEBUG D#53ptD.0 => D#115ptD.0
  # DEBUG __nstartD.32780 => __nstart_10
  # DEBUG __nfinishD.32779 => _9
  # DEBUG thisD.32778 => D#53ptD.0
  # DEBUG __nD.32781 => __nstart_10
  if (_9 <= __nstart_10)
    goto <bb 8>;
  else
    goto <bb 4>;
;;    succ:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_25 = PHI <.MEM_2(D)(4), .MEM_16(6)>
  # PT = nonlocal escaped 
  # __nstart_22 = PHI <__nstart_10(4), __nstart_13(6)>
  # DEBUG __nD.32781 => __nstart_22
  # VUSE <.MEM_25>
  # PT = nonlocal escaped 
  _12 = *__nstart_22;
  # DEBUG thisD.32783 => D#51ptD.0
  # DEBUG __pD.32782 => _12
  # DEBUG __sizeD.31861 => 8
  # DEBUG D#44ptD.0 => &D#52ptD.0->_M_implD.29139
  # DEBUG D#42ptD.0 => D#44ptD.0
  # DEBUG __pD.32787 => _12
  # DEBUG __aD.32785 => D#42ptD.0
  # DEBUG __nD.32786 => D#43ptD.0
  # DEBUG D#41ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#42ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG __pD.32790 => _12
  # DEBUG thisD.32788 => D#38ptD.0
  # DEBUG D.32789 => D#39ptD.0
  # .MEM_16 = VDEF <.MEM_25>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_12);
  # PT = nonlocal escaped 
  __nstart_13 = __nstart_22 + 8;
  # DEBUG __nD.32781 => __nstart_13
  # DEBUG __nD.32781 => __nstart_13
  if (_9 <= __nstart_13)
    goto <bb 7>;
  else
    goto <bb 6>;
;;    succ:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 6, next block 10, flags: (NEW)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       10 [100.0%]  (FALLTHRU)

;;   basic block 10, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 7, next block 8, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_16>
  pretmp_18 = MEM[(struct _Deque_baseD.28773 *)this_1(D)]._M_implD.29139._M_mapD.29141;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 10, next block 9, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_23 = PHI <.MEM_16(10), .MEM_2(D)(3)>
  # PT = nonlocal escaped 
  # prephitmp_19 = PHI <pretmp_18(10), _7(3)>
  # DEBUG D#60ptD.0 => D#115ptD.0->_M_implD.29139._M_map_sizeD.29142
  # DEBUG D#116ptD.0 => MEM[(struct _Deque_baseD.28773 *)this_1(D)]._M_implD.29139._M_mapD.29141
  # DEBUG D#58ptD.0 => D#115ptD.0
  # DEBUG D#59ptD.0 => D#60ptD.0
  # DEBUG __pD.32793 => D#116ptD.0
  # DEBUG thisD.32791 => D#58ptD.0
  # DEBUG __nD.32792 => D#59ptD.0
  # DEBUG D#57ptD.0 => D#59ptD.0
  # DEBUG D#56ptD.0 => D#58ptD.0
  # DEBUG D#55ptD.0 => D#56ptD.0
  # DEBUG thisD.31965 => D#55ptD.0
  # DEBUG D#54ptD.0 => D#55ptD.0
  # DEBUG thisD.31953 => D#54ptD.0
  # DEBUG thisD.31945 => NULL
  # DEBUG D.31946 => NULL
  # DEBUG thisD.31943 => NULL
  # DEBUG D#36ptD.0 => &__map_allocD.32794
  # DEBUG D#37ptD.0 => D#57ptD.0
  # DEBUG __pD.32797 => D#116ptD.0
  # DEBUG __aD.32795 => D#36ptD.0
  # DEBUG __nD.32796 => D#37ptD.0
  # DEBUG D#35ptD.0 => D#37ptD.0
  # DEBUG D#34ptD.0 => D#36ptD.0
  # DEBUG D#32ptD.0 => D#34ptD.0
  # DEBUG D#33ptD.0 => D#35ptD.0
  # DEBUG __pD.32800 => D#116ptD.0
  # DEBUG thisD.32798 => D#32ptD.0
  # DEBUG D.32799 => D#33ptD.0
  # .MEM_17 = VDEF <.MEM_23>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (prephitmp_19);
  # DEBUG thisD.31979 => &__map_allocD.32794
  # DEBUG thisD.31958 => &__map_allocD.32794
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 8, next block 1, flags: (NEW, REACHABLE)
;;    pred:       2 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_15 = PHI <.MEM_2(D)(2), .MEM_17(8)>
  # DEBUG D#61ptD.0 => &D#115ptD.0->_M_implD.29139
  # DEBUG thisD.32775 => D#61ptD.0
  # DEBUG thisD.32776 => D#61ptD.0
  # DEBUG thisD.32777 => D#61ptD.0
  # .MEM_4 = VDEF <.MEM_15>
  MEM[(struct  &)this_1(D)] ={v} {CLOBBER};
  # VUSE <.MEM_4>
  return;
;;    succ:       EXIT [100.0%] 

}



;; Function static void PacketReplyInfo::FreeAll() (_ZN15PacketReplyInfo7FreeAllEv, funcdef_no=1512, decl_uid=28735, cgraph_uid=320, symbol_order=323)


Pass statistics:
----------------

static void PacketReplyInfo::FreeAll() ()
{
  struct PacketReplyInfoD.28726 * * __tmp$_M_curD.31911;
  struct PacketReplyInfoD.28726 * * const _4;
  struct PacketReplyInfoD.28726 * _6;
  struct PacketReplyInfoD.28726 * * _8;
  struct PacketReplyInfoD.28726 * * * _9;
  struct PacketReplyInfoD.28726 * * _10;
  struct PacketReplyInfoD.28726 * * _17;
  struct PacketReplyInfoD.28726 * * * _18;
  struct PacketReplyInfoD.28726 * * * _19;
  struct PacketReplyInfoD.28726 * * _20;
  struct PacketReplyInfoD.28726 * * _21;
  struct PacketReplyInfoD.28726 * * _22;
  struct PacketReplyInfoD.28726 * * pretmp_31;
  struct PacketReplyInfoD.28726 * * prephitmp_35;
  struct PacketReplyInfoD.28726 * * pretmp_36;
  struct PacketReplyInfoD.28726 * * prephitmp_37;
  struct PacketReplyInfoD.28726 * * const prephitmp_38;
  struct PacketReplyInfoD.28726 * * const pretmp_39;
  struct PacketReplyInfoD.28726 * * const prephitmp_40;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  pretmp_39 = MEM[(struct PacketReplyInfoD.28726 * * *)&_ZN15PacketReplyInfo4_allED.28739 + 48B];
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 3, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_28 = PHI <.MEM_26(11), .MEM_27(10)>
  # prephitmp_38 = PHI <_22(11), _17(10)>
;;    succ:       4 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 10000, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
;;                2 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_28(3), .MEM_3(D)(2)>
  # PT = nonlocal escaped 
  # prephitmp_40 = PHI <prephitmp_38(3), pretmp_39(2)>
  # DEBUG thisD.31896 => &_ZN15PacketReplyInfo4_allED.28739
  # DEBUG D#12ptD.0 => &_ZN15PacketReplyInfo4_allED.28739.cD.29731
  # DEBUG thisD.31897 => D#12ptD.0
  # DEBUG D#10ptD.0 => &D#12ptD.0->D.29688._M_implD.29139._M_startD.29143
  # DEBUG D#11ptD.0 => &D#12ptD.0->D.29688._M_implD.29139._M_finishD.29144
  # DEBUG D#120ptD.0 => MEM[(struct PacketReplyInfoD.28726 * * *)&_ZN15PacketReplyInfo4_allED.28739 + 48B]
  # DEBUG D#8ptD.0 => D#11ptD.0
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _4 = MEM[(struct PacketReplyInfoD.28726 * * *)&_ZN15PacketReplyInfo4_allED.28739 + 16B];
  # DEBUG D#9ptD.0 => D#10ptD.0
  # DEBUG __xD.31898 => D#8ptD.0
  # DEBUG __yD.31899 => D#9ptD.0
  if (_4 != prephitmp_40)
    goto <bb 5>;
  else
    goto <bb 12>;
;;    succ:       5 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.31901 => &_ZN15PacketReplyInfo4_allED.28739
  # DEBUG D#29ptD.0 => &_ZN15PacketReplyInfo4_allED.28739.cD.29731
  # DEBUG thisD.31902 => D#29ptD.0
  # DEBUG thisD.31904 => D#29ptD.0
  # DEBUG D#2ptD.0 => &D#29ptD.0->D.29688._M_implD.29139._M_finishD.29144
  # DEBUG thisD.31906 => &__tmpD.31903
  # DEBUG __xD.31905 => D#2ptD.0
  # DEBUG __tmp$_M_curD.31911 => D#120ptD.0
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _8 = MEM[(const struct iteratorD.29026 &)&_ZN15PacketReplyInfo4_allED.28739 + 48]._M_firstD.29039;
  # DEBUG __tmp$_M_firstD.31783 => _8
  # DEBUG D#28ptD.0 => MEM[(const struct iteratorD.29026 &)D#29ptD.0 + 48]._M_lastD.29040
  # DEBUG __tmp$_M_lastD.31784 => D#28ptD.0
  # DEBUG D#121ptD.0 => MEM[(const struct iteratorD.29026 &)&_ZN15PacketReplyInfo4_allED.28739 + 48]._M_nodeD.29041
  # DEBUG __tmp$_M_nodeD.31785 => D#121ptD.0
  # DEBUG thisD.31907 => &__tmpD.31903
  if (_8 == prephitmp_40)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 1365, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _9 = MEM[(const struct iteratorD.29026 &)&_ZN15PacketReplyInfo4_allED.28739 + 48]._M_nodeD.29041;
  # DEBUG D#27ptD.0 => D#121ptD.0 + 18446744073709551608
  # DEBUG thisD.31909 => &__tmpD.31903
  # DEBUG __new_nodeD.31908 => D#27ptD.0
  # DEBUG __tmp$_M_nodeD.31785 => D#27ptD.0
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _10 = MEM[(struct PacketReplyInfoD.28726 * * *)_9 + -8B];
  # DEBUG __tmp$_M_firstD.31783 => _10
  # DEBUG __sizeD.31764 => 8
  # PT = nonlocal escaped 
  __tmp$_M_cur_11 = _10 + 512;
  # DEBUG __tmp$_M_lastD.31784 => __tmp$_M_cur_11
  # DEBUG __tmp$_M_curD.31911 => __tmp$_M_cur_11
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       5 [85.0%]  (FALSE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __tmp$_M_cur_12 = PHI <prephitmp_40(5), __tmp$_M_cur_11(6)>
  # DEBUG __tmp$_M_curD.31911 => __tmp$_M_cur_12
  # DEBUG __tmp$_M_curD.31911 => __tmp$_M_cur_12 + 18446744073709551608
  # DEBUG D#13ptD.0 => &__tmpD.31903
  # DEBUG thisD.31773 => D#13ptD.0
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _6 = MEM[(struct PacketReplyInfoD.28726 * &)__tmp$_M_cur_12 + 18446744073709551608];
  if (_6 != 0B)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 6355, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.31912 => _6
  # .MEM_13 = VDEF <.MEM_1>
  MEM[(struct  &)_6] ={v} {CLOBBER};
  # .MEM_7 = VDEF <.MEM_13>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_6);
  # VUSE <.MEM_7>
  pretmp_31 = MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688._M_implD.29139._M_finishD.29144._M_curD.29038;
  # VUSE <.MEM_7>
  pretmp_36 = MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688._M_implD.29139._M_finishD.29144._M_firstD.29039;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       7 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2 = PHI <.MEM_1(7), .MEM_7(8)>
  # PT = nonlocal escaped 
  # prephitmp_35 = PHI <prephitmp_40(7), pretmp_31(8)>
  # PT = nonlocal escaped 
  # prephitmp_37 = PHI <_8(7), pretmp_36(8)>
  # DEBUG thisD.31913 => &_ZN15PacketReplyInfo4_allED.28739
  # DEBUG thisD.32934 => &_ZN15PacketReplyInfo4_allED.28739.cD.29731
  # DEBUG D#119ptD.0 => MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688._M_implD.29139._M_finishD.29144._M_curD.29038
  if (prephitmp_35 != prephitmp_37)
    goto <bb 10>;
  else
    goto <bb 11>;
;;    succ:       10 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 8178, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  _17 = prephitmp_35 + 18446744073709551608;
  # .MEM_27 = VDEF <.MEM_2>
  MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688._M_implD.29139._M_finishD.29144._M_curD.29038 = _17;
  # DEBUG D#50ptD.0 => MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688._M_implD.29139._M_finishD.29144._M_curD.29038
  # DEBUG D#49ptD.0 => &MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688._M_implD.29139
  # DEBUG D#23ptD.0 => D#49ptD.0
  # DEBUG D#24ptD.0 => D#50ptD.0
  # DEBUG __aD.31881 => D#23ptD.0
  # DEBUG __pD.31880 => D#24ptD.0
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 922, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       9 [10.1%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.32935 => &_ZN15PacketReplyInfo4_allED.28739.cD.29731
  # DEBUG D#48ptD.0 => &MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688
  # DEBUG thisD.32937 => D#48ptD.0
  # DEBUG __pD.32936 => D#119ptD.0
  # DEBUG __sizeD.31861 => 8
  # DEBUG D#44ptD.0 => &D#48ptD.0->_M_implD.29139
  # DEBUG D#42ptD.0 => D#44ptD.0
  # DEBUG __pD.32941 => D#119ptD.0
  # DEBUG __aD.32939 => D#42ptD.0
  # DEBUG __nD.32940 => D#43ptD.0
  # DEBUG D#41ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#42ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG __pD.32944 => D#119ptD.0
  # DEBUG thisD.32942 => D#38ptD.0
  # DEBUG D.32943 => D#39ptD.0
  # .MEM_14 = VDEF <.MEM_2>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (prephitmp_35);
  # VUSE <.MEM_14>
  # PT = nonlocal escaped 
  _18 = MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688._M_implD.29139._M_finishD.29144._M_nodeD.29041;
  # PT = nonlocal escaped 
  _19 = _18 + 18446744073709551608;
  # DEBUG D#47ptD.0 => &MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688._M_implD.29139._M_finishD.29144
  # DEBUG thisD.32946 => D#47ptD.0
  # DEBUG __new_nodeD.32945 => _19
  # .MEM_23 = VDEF <.MEM_14>
  MEM[(struct _Deque_iteratorD.29006 *)&_ZN15PacketReplyInfo4_allED.28739 + 48B]._M_nodeD.29041 = _19;
  # VUSE <.MEM_23>
  # PT = nonlocal escaped 
  _20 = MEM[(struct PacketReplyInfoD.28726 * * *)_18 + -8B];
  # .MEM_24 = VDEF <.MEM_23>
  MEM[(struct _Deque_iteratorD.29006 *)&_ZN15PacketReplyInfo4_allED.28739 + 48B]._M_firstD.29039 = _20;
  # DEBUG __sizeD.31764 => 8
  # PT = nonlocal escaped 
  _21 = _20 + 512;
  # .MEM_25 = VDEF <.MEM_24>
  MEM[(struct _Deque_iteratorD.29006 *)&_ZN15PacketReplyInfo4_allED.28739 + 48B]._M_lastD.29040 = _21;
  # PT = nonlocal escaped 
  _22 = &MEM[(voidD.45 *)_20 + 504B];
  # .MEM_26 = VDEF <.MEM_25>
  MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688._M_implD.29139._M_finishD.29144._M_curD.29038 = _22;
  # DEBUG D#46ptD.0 => MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688._M_implD.29139._M_finishD.29144._M_curD.29038
  # DEBUG D#45ptD.0 => &MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688
  # DEBUG thisD.31866 => D#45ptD.0
  # DEBUG D#24ptD.0 => D#46ptD.0
  # DEBUG __aD.31865 => D#23ptD.0
  # DEBUG __pD.31864 => D#24ptD.0
  # DEBUG D#22ptD.0 => D#24ptD.0
  # DEBUG D#21ptD.0 => D#23ptD.0
  # DEBUG D#19ptD.0 => D#21ptD.0
  # DEBUG D#20ptD.0 => D#22ptD.0
  # DEBUG thisD.31748 => D#19ptD.0
  # DEBUG __pD.31747 => D#20ptD.0
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 11, next block 1, flags: (NEW, REACHABLE)
;;    pred:       4 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1>
  return;
;;    succ:       EXIT [100.0%] 

}


Creating dr for MEM[(struct PacketReplyInfo * * *)&_all + 48B]
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: MEM[(struct PacketReplyInfo * * *)&_all + 48B]
Creating dr for MEM[(struct PacketReplyInfo * * *)&_all + 16B]
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct PacketReplyInfo * * *)&_all + 16B]
Creating dr for MEM[(struct PacketReplyInfo * * *)&_all + 16B]
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct PacketReplyInfo * * *)&_all + 16B]
Creating dr for MEM[(struct PacketReplyInfo * * *)&_all + 16B]
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct PacketReplyInfo * * *)&_all + 16B]
Creating dr for MEM[(struct PacketReplyInfo * * *)&_all + 16B]
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct PacketReplyInfo * * *)&_all + 16B]
Creating dr for MEM[(const struct iterator &)&_all + 48]._M_first
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(const struct iterator &)&_all + 48]
	Access function 0: 64
Creating dr for MEM[(const struct iterator &)&_all + 48]._M_first
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(const struct iterator &)&_all + 48]
	Access function 0: 64
Creating dr for MEM[(const struct iterator &)&_all + 48]._M_node
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 72
	step: 0
	aligned to: 256
	base_object: MEM[(const struct iterator &)&_all + 48]
	Access function 0: 192
Creating dr for MEM[(const struct iterator &)&_all + 48]._M_node
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 72
	step: 0
	aligned to: 256
	base_object: MEM[(const struct iterator &)&_all + 48]
	Access function 0: 192
Creating dr for MEM[(struct PacketReplyInfo * * *)_9 + -8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * * *)_9 + -8B]
Creating dr for MEM[(struct PacketReplyInfo * * *)_9 + -8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * * *)_9 + -8B]
Creating dr for MEM[(struct PacketReplyInfo * &)__tmp$_M_cur_12 + 18446744073709551608]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * &)__tmp$_M_cur_12 + 18446744073709551608]
Creating dr for MEM[(struct PacketReplyInfo * &)__tmp$_M_cur_12 + 18446744073709551608]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * &)__tmp$_M_cur_12 + 18446744073709551608]
Creating dr for MEM[(struct deque *)&_all].D.29688._M_impl._M_finish._M_cur
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: MEM[(struct deque *)&_all]
	Access function 0: 0
	Access function 1: 384
	Access function 2: 0
	Access function 3: 0
Creating dr for MEM[(struct deque *)&_all].D.29688._M_impl._M_finish._M_cur
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: MEM[(struct deque *)&_all]
	Access function 0: 0
	Access function 1: 384
	Access function 2: 0
	Access function 3: 0
Creating dr for MEM[(struct PacketReplyInfo * * *)&_all + 16B]
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct PacketReplyInfo * * *)&_all + 16B]
Creating dr for MEM[(struct PacketReplyInfo * * *)&_all + 16B]
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct PacketReplyInfo * * *)&_all + 16B]
Creating dr for MEM[(struct PacketReplyInfo * * *)&_all + 16B]
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct PacketReplyInfo * * *)&_all + 16B]
Creating dr for MEM[(struct PacketReplyInfo * * *)&_all + 16B]
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct PacketReplyInfo * * *)&_all + 16B]
Creating dr for MEM[(const struct iterator &)&_all + 48]._M_first
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(const struct iterator &)&_all + 48]
	Access function 0: 64
Creating dr for MEM[(const struct iterator &)&_all + 48]._M_first
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(const struct iterator &)&_all + 48]
	Access function 0: 64
Creating dr for MEM[(const struct iterator &)&_all + 48]._M_node
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 72
	step: 0
	aligned to: 256
	base_object: MEM[(const struct iterator &)&_all + 48]
	Access function 0: 192
Creating dr for MEM[(const struct iterator &)&_all + 48]._M_node
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 72
	step: 0
	aligned to: 256
	base_object: MEM[(const struct iterator &)&_all + 48]
	Access function 0: 192
Creating dr for MEM[(struct PacketReplyInfo * * *)_9 + -8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * * *)_9 + -8B]
Creating dr for MEM[(struct PacketReplyInfo * * *)_9 + -8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * * *)_9 + -8B]
Creating dr for MEM[(struct PacketReplyInfo * &)__tmp$_M_cur_12 + 18446744073709551608]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * &)__tmp$_M_cur_12 + 18446744073709551608]
Creating dr for MEM[(struct PacketReplyInfo * &)__tmp$_M_cur_12 + 18446744073709551608]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * &)__tmp$_M_cur_12 + 18446744073709551608]
Creating dr for MEM[(struct deque *)&_all].D.29688._M_impl._M_finish._M_cur
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: MEM[(struct deque *)&_all]
	Access function 0: 0
	Access function 1: 384
	Access function 2: 0
	Access function 3: 0
Creating dr for MEM[(struct deque *)&_all].D.29688._M_impl._M_finish._M_cur
analyze_innermost: success.
	base_address: &_all
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: MEM[(struct deque *)&_all]
	Access function 0: 0
	Access function 1: 384
	Access function 2: 0
	Access function 3: 0

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:11)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:8)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:15, LOOPS:1, CONDITIONS:4, STMTS:107)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_4 })
  {
    <bb 2>:
    # VUSE <.MEM_3(D)>
    pretmp_39 = MEM[(struct PacketReplyInfo * * *)&_all + 48B];
    goto <bb 4>;

  }
  bb_12 (preds = {bb_4 }, succs = {bb_13 })
  {
    <bb 12>:

  }
  bb_13 (preds = {bb_12 }, succs = {bb_1 })
  {
    <bb 13>:
    # VUSE <.MEM_1>
    return;

  }
  loop_1 (header = 4, latch = 14, niter = )
  {
    bb_3 (preds = {bb_11 bb_10 }, succs = {bb_14 })
    {
      <bb 3>:
      # .MEM_28 = PHI <.MEM_26(11), .MEM_27(10)>
      # prephitmp_38 = PHI <_22(11), _17(10)>

    }
    bb_14 (preds = {bb_3 }, succs = {bb_4 })
    {
      <bb 14>:

    }
    bb_4 (preds = {bb_14 bb_2 }, succs = {bb_5 bb_12 })
    {
      <bb 4>:
      # .MEM_1 = PHI <.MEM_28(14), .MEM_3(D)(2)>
      # prephitmp_40 = PHI <prephitmp_38(14), pretmp_39(2)>
      # DEBUG this => &_all
      # DEBUG D#12 => &_all.c
      # DEBUG this => D#12
      # DEBUG D#10 => &D#12->D.29688._M_impl._M_start
      # DEBUG D#11 => &D#12->D.29688._M_impl._M_finish
      # DEBUG D#120 => MEM[(struct PacketReplyInfo * * *)&_all + 48B]
      # DEBUG D#8 => D#11
      # VUSE <.MEM_1>
      _4 = MEM[(struct PacketReplyInfo * * *)&_all + 16B];
      # DEBUG D#9 => D#10
      # DEBUG __x => D#8
      # DEBUG __y => D#9
      if (_4 != prephitmp_40)
        goto <bb 5>;
      else
        goto <bb 12>;

    }
    bb_5 (preds = {bb_4 }, succs = {bb_6 bb_7 })
    {
      <bb 5>:
      # DEBUG this => &_all
      # DEBUG D#29 => &_all.c
      # DEBUG this => D#29
      # DEBUG this => D#29
      # DEBUG D#2 => &D#29->D.29688._M_impl._M_finish
      # DEBUG this => &__tmp
      # DEBUG __x => D#2
      # DEBUG __tmp$_M_cur => D#120
      # VUSE <.MEM_1>
      _8 = MEM[(const struct iterator &)&_all + 48]._M_first;
      # DEBUG __tmp$_M_first => _8
      # DEBUG D#28 => MEM[(const struct iterator &)D#29 + 48]._M_last
      # DEBUG __tmp$_M_last => D#28
      # DEBUG D#121 => MEM[(const struct iterator &)&_all + 48]._M_node
      # DEBUG __tmp$_M_node => D#121
      # DEBUG this => &__tmp
      if (_8 == prephitmp_40)
        goto <bb 6>;
      else
        goto <bb 7>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_7 })
    {
      <bb 6>:
      # VUSE <.MEM_1>
      _9 = MEM[(const struct iterator &)&_all + 48]._M_node;
      # DEBUG D#27 => D#121 + 18446744073709551608
      # DEBUG this => &__tmp
      # DEBUG __new_node => D#27
      # DEBUG __tmp$_M_node => D#27
      # VUSE <.MEM_1>
      _10 = MEM[(struct PacketReplyInfo * * *)_9 + -8B];
      # DEBUG __tmp$_M_first => _10
      # DEBUG __size => 8
      __tmp$_M_cur_11 = _10 + 512;
      # DEBUG __tmp$_M_last => __tmp$_M_cur_11
      # DEBUG __tmp$_M_cur => __tmp$_M_cur_11

    }
    bb_7 (preds = {bb_5 bb_6 }, succs = {bb_8 bb_9 })
    {
      <bb 7>:
      # __tmp$_M_cur_12 = PHI <prephitmp_40(5), __tmp$_M_cur_11(6)>
      # DEBUG __tmp$_M_cur => __tmp$_M_cur_12
      # DEBUG __tmp$_M_cur => __tmp$_M_cur_12 + 18446744073709551608
      # DEBUG D#13 => &__tmp
      # DEBUG this => D#13
      # VUSE <.MEM_1>
      _6 = MEM[(struct PacketReplyInfo * &)__tmp$_M_cur_12 + 18446744073709551608];
      if (_6 != 0B)
        goto <bb 8>;
      else
        goto <bb 9>;

    }
    bb_8 (preds = {bb_7 }, succs = {bb_9 })
    {
      <bb 8>:
      # DEBUG this => _6
      # .MEM_13 = VDEF <.MEM_1>
      MEM[(struct  &)_6] ={v} {CLOBBER};
      # .MEM_7 = VDEF <.MEM_13>
      operator delete (_6);
      # VUSE <.MEM_7>
      pretmp_31 = MEM[(struct deque *)&_all].D.29688._M_impl._M_finish._M_cur;
      # VUSE <.MEM_7>
      pretmp_36 = MEM[(struct deque *)&_all].D.29688._M_impl._M_finish._M_first;

    }
    bb_9 (preds = {bb_7 bb_8 }, succs = {bb_10 bb_11 })
    {
      <bb 9>:
      # .MEM_2 = PHI <.MEM_1(7), .MEM_7(8)>
      # prephitmp_35 = PHI <prephitmp_40(7), pretmp_31(8)>
      # prephitmp_37 = PHI <_8(7), pretmp_36(8)>
      # DEBUG this => &_all
      # DEBUG this => &_all.c
      # DEBUG D#119 => MEM[(struct deque *)&_all].D.29688._M_impl._M_finish._M_cur
      if (prephitmp_35 != prephitmp_37)
        goto <bb 10>;
      else
        goto <bb 11>;

    }
    bb_10 (preds = {bb_9 }, succs = {bb_3 })
    {
      <bb 10>:
      _17 = prephitmp_35 + 18446744073709551608;
      # .MEM_27 = VDEF <.MEM_2>
      MEM[(struct deque *)&_all].D.29688._M_impl._M_finish._M_cur = _17;
      # DEBUG D#50 => MEM[(struct deque *)&_all].D.29688._M_impl._M_finish._M_cur
      # DEBUG D#49 => &MEM[(struct deque *)&_all].D.29688._M_impl
      # DEBUG D#23 => D#49
      # DEBUG D#24 => D#50
      # DEBUG __a => D#23
      # DEBUG __p => D#24
      goto <bb 3>;

    }
    bb_11 (preds = {bb_9 }, succs = {bb_3 })
    {
      <bb 11>:
      # DEBUG this => &_all.c
      # DEBUG D#48 => &MEM[(struct deque *)&_all].D.29688
      # DEBUG this => D#48
      # DEBUG __p => D#119
      # DEBUG __size => 8
      # DEBUG D#44 => &D#48->_M_impl
      # DEBUG D#42 => D#44
      # DEBUG __p => D#119
      # DEBUG __a => D#42
      # DEBUG __n => D#43
      # DEBUG D#41 => D#43
      # DEBUG D#40 => D#42
      # DEBUG D#38 => D#40
      # DEBUG D#39 => D#41
      # DEBUG __p => D#119
      # DEBUG this => D#38
      # DEBUG D.32943 => D#39
      # .MEM_14 = VDEF <.MEM_2>
      operator delete (prephitmp_35);
      # VUSE <.MEM_14>
      _18 = MEM[(struct deque *)&_all].D.29688._M_impl._M_finish._M_node;
      _19 = _18 + 18446744073709551608;
      # DEBUG D#47 => &MEM[(struct deque *)&_all].D.29688._M_impl._M_finish
      # DEBUG this => D#47
      # DEBUG __new_node => _19
      # .MEM_23 = VDEF <.MEM_14>
      MEM[(struct _Deque_iterator *)&_all + 48B]._M_node = _19;
      # VUSE <.MEM_23>
      _20 = MEM[(struct PacketReplyInfo * * *)_18 + -8B];
      # .MEM_24 = VDEF <.MEM_23>
      MEM[(struct _Deque_iterator *)&_all + 48B]._M_first = _20;
      # DEBUG __size => 8
      _21 = _20 + 512;
      # .MEM_25 = VDEF <.MEM_24>
      MEM[(struct _Deque_iterator *)&_all + 48B]._M_last = _21;
      _22 = &MEM[(void *)_20 + 504B];
      # .MEM_26 = VDEF <.MEM_25>
      MEM[(struct deque *)&_all].D.29688._M_impl._M_finish._M_cur = _22;
      # DEBUG D#46 => MEM[(struct deque *)&_all].D.29688._M_impl._M_finish._M_cur
      # DEBUG D#45 => &MEM[(struct deque *)&_all].D.29688
      # DEBUG this => D#45
      # DEBUG D#24 => D#46
      # DEBUG __a => D#23
      # DEBUG __p => D#24
      # DEBUG D#22 => D#24
      # DEBUG D#21 => D#23
      # DEBUG D#19 => D#21
      # DEBUG D#20 => D#22
      # DEBUG this => D#19
      # DEBUG __p => D#20
      goto <bb 3>;

    }
  }
}

Pass statistics:
----------------

static void PacketReplyInfo::FreeAll() ()
{
  struct PacketReplyInfoD.28726 * * __tmp$_M_curD.31911;
  struct PacketReplyInfoD.28726 * * const _4;
  struct PacketReplyInfoD.28726 * _6;
  struct PacketReplyInfoD.28726 * * _8;
  struct PacketReplyInfoD.28726 * * * _9;
  struct PacketReplyInfoD.28726 * * _10;
  struct PacketReplyInfoD.28726 * * _17;
  struct PacketReplyInfoD.28726 * * * _18;
  struct PacketReplyInfoD.28726 * * * _19;
  struct PacketReplyInfoD.28726 * * _20;
  struct PacketReplyInfoD.28726 * * _21;
  struct PacketReplyInfoD.28726 * * _22;
  struct PacketReplyInfoD.28726 * * pretmp_31;
  struct PacketReplyInfoD.28726 * * prephitmp_35;
  struct PacketReplyInfoD.28726 * * pretmp_36;
  struct PacketReplyInfoD.28726 * * prephitmp_37;
  struct PacketReplyInfoD.28726 * * const prephitmp_38;
  struct PacketReplyInfoD.28726 * * const pretmp_39;
  struct PacketReplyInfoD.28726 * * const prephitmp_40;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  pretmp_39 = MEM[(struct PacketReplyInfoD.28726 * * *)&_ZN15PacketReplyInfo4_allED.28739 + 48B];
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 3, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 2, next block 14, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_28 = PHI <.MEM_26(11), .MEM_27(10)>
  # prephitmp_38 = PHI <_22(11), _17(10)>
;;    succ:       14 [100.0%]  (FALLTHRU)

;;   basic block 14, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 3, next block 4, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU)
;;    succ:       4 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 10000, maybe hot
;;    prev block 14, next block 5, flags: (NEW)
;;    pred:       14 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
;;                2 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_28(14), .MEM_3(D)(2)>
  # PT = nonlocal escaped 
  # prephitmp_40 = PHI <prephitmp_38(14), pretmp_39(2)>
  # DEBUG thisD.31896 => &_ZN15PacketReplyInfo4_allED.28739
  # DEBUG D#12ptD.0 => &_ZN15PacketReplyInfo4_allED.28739.cD.29731
  # DEBUG thisD.31897 => D#12ptD.0
  # DEBUG D#10ptD.0 => &D#12ptD.0->D.29688._M_implD.29139._M_startD.29143
  # DEBUG D#11ptD.0 => &D#12ptD.0->D.29688._M_implD.29139._M_finishD.29144
  # DEBUG D#120ptD.0 => MEM[(struct PacketReplyInfoD.28726 * * *)&_ZN15PacketReplyInfo4_allED.28739 + 48B]
  # DEBUG D#8ptD.0 => D#11ptD.0
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _4 = MEM[(struct PacketReplyInfoD.28726 * * *)&_ZN15PacketReplyInfo4_allED.28739 + 16B];
  # DEBUG D#9ptD.0 => D#10ptD.0
  # DEBUG __xD.31898 => D#8ptD.0
  # DEBUG __yD.31899 => D#9ptD.0
  if (_4 != prephitmp_40)
    goto <bb 5>;
  else
    goto <bb 12>;
;;    succ:       5 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.31901 => &_ZN15PacketReplyInfo4_allED.28739
  # DEBUG D#29ptD.0 => &_ZN15PacketReplyInfo4_allED.28739.cD.29731
  # DEBUG thisD.31902 => D#29ptD.0
  # DEBUG thisD.31904 => D#29ptD.0
  # DEBUG D#2ptD.0 => &D#29ptD.0->D.29688._M_implD.29139._M_finishD.29144
  # DEBUG thisD.31906 => &__tmpD.31903
  # DEBUG __xD.31905 => D#2ptD.0
  # DEBUG __tmp$_M_curD.31911 => D#120ptD.0
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _8 = MEM[(const struct iteratorD.29026 &)&_ZN15PacketReplyInfo4_allED.28739 + 48]._M_firstD.29039;
  # DEBUG __tmp$_M_firstD.31783 => _8
  # DEBUG D#28ptD.0 => MEM[(const struct iteratorD.29026 &)D#29ptD.0 + 48]._M_lastD.29040
  # DEBUG __tmp$_M_lastD.31784 => D#28ptD.0
  # DEBUG D#121ptD.0 => MEM[(const struct iteratorD.29026 &)&_ZN15PacketReplyInfo4_allED.28739 + 48]._M_nodeD.29041
  # DEBUG __tmp$_M_nodeD.31785 => D#121ptD.0
  # DEBUG thisD.31907 => &__tmpD.31903
  if (_8 == prephitmp_40)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 1365, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _9 = MEM[(const struct iteratorD.29026 &)&_ZN15PacketReplyInfo4_allED.28739 + 48]._M_nodeD.29041;
  # DEBUG D#27ptD.0 => D#121ptD.0 + 18446744073709551608
  # DEBUG thisD.31909 => &__tmpD.31903
  # DEBUG __new_nodeD.31908 => D#27ptD.0
  # DEBUG __tmp$_M_nodeD.31785 => D#27ptD.0
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _10 = MEM[(struct PacketReplyInfoD.28726 * * *)_9 + -8B];
  # DEBUG __tmp$_M_firstD.31783 => _10
  # DEBUG __sizeD.31764 => 8
  # PT = nonlocal escaped 
  __tmp$_M_cur_11 = _10 + 512;
  # DEBUG __tmp$_M_lastD.31784 => __tmp$_M_cur_11
  # DEBUG __tmp$_M_curD.31911 => __tmp$_M_cur_11
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       5 [85.0%]  (FALSE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __tmp$_M_cur_12 = PHI <prephitmp_40(5), __tmp$_M_cur_11(6)>
  # DEBUG __tmp$_M_curD.31911 => __tmp$_M_cur_12
  # DEBUG __tmp$_M_curD.31911 => __tmp$_M_cur_12 + 18446744073709551608
  # DEBUG D#13ptD.0 => &__tmpD.31903
  # DEBUG thisD.31773 => D#13ptD.0
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _6 = MEM[(struct PacketReplyInfoD.28726 * &)__tmp$_M_cur_12 + 18446744073709551608];
  if (_6 != 0B)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 6355, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.31912 => _6
  # .MEM_13 = VDEF <.MEM_1>
  MEM[(struct  &)_6] ={v} {CLOBBER};
  # .MEM_7 = VDEF <.MEM_13>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_6);
  # VUSE <.MEM_7>
  pretmp_31 = MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688._M_implD.29139._M_finishD.29144._M_curD.29038;
  # VUSE <.MEM_7>
  pretmp_36 = MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688._M_implD.29139._M_finishD.29144._M_firstD.29039;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       7 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2 = PHI <.MEM_1(7), .MEM_7(8)>
  # PT = nonlocal escaped 
  # prephitmp_35 = PHI <prephitmp_40(7), pretmp_31(8)>
  # PT = nonlocal escaped 
  # prephitmp_37 = PHI <_8(7), pretmp_36(8)>
  # DEBUG thisD.31913 => &_ZN15PacketReplyInfo4_allED.28739
  # DEBUG thisD.32934 => &_ZN15PacketReplyInfo4_allED.28739.cD.29731
  # DEBUG D#119ptD.0 => MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688._M_implD.29139._M_finishD.29144._M_curD.29038
  if (prephitmp_35 != prephitmp_37)
    goto <bb 10>;
  else
    goto <bb 11>;
;;    succ:       10 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 8178, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  _17 = prephitmp_35 + 18446744073709551608;
  # .MEM_27 = VDEF <.MEM_2>
  MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688._M_implD.29139._M_finishD.29144._M_curD.29038 = _17;
  # DEBUG D#50ptD.0 => MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688._M_implD.29139._M_finishD.29144._M_curD.29038
  # DEBUG D#49ptD.0 => &MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688._M_implD.29139
  # DEBUG D#23ptD.0 => D#49ptD.0
  # DEBUG D#24ptD.0 => D#50ptD.0
  # DEBUG __aD.31881 => D#23ptD.0
  # DEBUG __pD.31880 => D#24ptD.0
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 922, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       9 [10.1%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.32935 => &_ZN15PacketReplyInfo4_allED.28739.cD.29731
  # DEBUG D#48ptD.0 => &MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688
  # DEBUG thisD.32937 => D#48ptD.0
  # DEBUG __pD.32936 => D#119ptD.0
  # DEBUG __sizeD.31861 => 8
  # DEBUG D#44ptD.0 => &D#48ptD.0->_M_implD.29139
  # DEBUG D#42ptD.0 => D#44ptD.0
  # DEBUG __pD.32941 => D#119ptD.0
  # DEBUG __aD.32939 => D#42ptD.0
  # DEBUG __nD.32940 => D#43ptD.0
  # DEBUG D#41ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#42ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG __pD.32944 => D#119ptD.0
  # DEBUG thisD.32942 => D#38ptD.0
  # DEBUG D.32943 => D#39ptD.0
  # .MEM_14 = VDEF <.MEM_2>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (prephitmp_35);
  # VUSE <.MEM_14>
  # PT = nonlocal escaped 
  _18 = MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688._M_implD.29139._M_finishD.29144._M_nodeD.29041;
  # PT = nonlocal escaped 
  _19 = _18 + 18446744073709551608;
  # DEBUG D#47ptD.0 => &MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688._M_implD.29139._M_finishD.29144
  # DEBUG thisD.32946 => D#47ptD.0
  # DEBUG __new_nodeD.32945 => _19
  # .MEM_23 = VDEF <.MEM_14>
  MEM[(struct _Deque_iteratorD.29006 *)&_ZN15PacketReplyInfo4_allED.28739 + 48B]._M_nodeD.29041 = _19;
  # VUSE <.MEM_23>
  # PT = nonlocal escaped 
  _20 = MEM[(struct PacketReplyInfoD.28726 * * *)_18 + -8B];
  # .MEM_24 = VDEF <.MEM_23>
  MEM[(struct _Deque_iteratorD.29006 *)&_ZN15PacketReplyInfo4_allED.28739 + 48B]._M_firstD.29039 = _20;
  # DEBUG __sizeD.31764 => 8
  # PT = nonlocal escaped 
  _21 = _20 + 512;
  # .MEM_25 = VDEF <.MEM_24>
  MEM[(struct _Deque_iteratorD.29006 *)&_ZN15PacketReplyInfo4_allED.28739 + 48B]._M_lastD.29040 = _21;
  # PT = nonlocal escaped 
  _22 = &MEM[(voidD.45 *)_20 + 504B];
  # .MEM_26 = VDEF <.MEM_25>
  MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688._M_implD.29139._M_finishD.29144._M_curD.29038 = _22;
  # DEBUG D#46ptD.0 => MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688._M_implD.29139._M_finishD.29144._M_curD.29038
  # DEBUG D#45ptD.0 => &MEM[(struct dequeD.28737 *)&_ZN15PacketReplyInfo4_allED.28739].D.29688
  # DEBUG thisD.31866 => D#45ptD.0
  # DEBUG D#24ptD.0 => D#46ptD.0
  # DEBUG __aD.31865 => D#23ptD.0
  # DEBUG __pD.31864 => D#24ptD.0
  # DEBUG D#22ptD.0 => D#24ptD.0
  # DEBUG D#21ptD.0 => D#23ptD.0
  # DEBUG D#19ptD.0 => D#21ptD.0
  # DEBUG D#20ptD.0 => D#22ptD.0
  # DEBUG thisD.31748 => D#19ptD.0
  # DEBUG __pD.31747 => D#20ptD.0
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       4 [9.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       13 [100.0%]  (FALLTHRU)

;;   basic block 13, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 12, next block 1, flags: (NEW)
;;    pred:       12 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_1>
  return;
;;    succ:       EXIT [100.0%] 

}



;; Function std::_Deque_base<_Tp, _Alloc>::~_Deque_base() [with _Tp = PacketReplyInfo*; _Alloc = std::allocator<PacketReplyInfo*>] (_ZNSt11_Deque_baseIP15PacketReplyInfoSaIS1_EED2Ev, funcdef_no=1544, decl_uid=29194, cgraph_uid=352, symbol_order=355)


Pass statistics:
----------------

std::_Deque_base<_Tp, _Alloc>::~_Deque_base() [with _Tp = PacketReplyInfo*; _Alloc = std::allocator<PacketReplyInfo*>] (struct _Deque_baseD.28773 * const thisD.29195)
{
  struct PacketReplyInfoD.28726 * * * __nstartD.31995;
  struct PacketReplyInfoD.28726 * * * _4;
  struct PacketReplyInfoD.28726 * * * _5;
  struct PacketReplyInfoD.28726 * * * _6;
  struct PacketReplyInfoD.28726 * * _13;
  struct PacketReplyInfoD.28726 * * * pretmp_16;
  struct PacketReplyInfoD.28726 * * * prephitmp_17;

;;   basic block 2, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _4 = this_3(D)->_M_implD.29139._M_mapD.29141;
  if (_4 != 0B)
    goto <bb 3>;
  else
    goto <bb 9>;
;;    succ:       3 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _5 = this_3(D)->_M_implD.29139._M_finishD.29144._M_nodeD.29041;
  # PT = nonlocal escaped 
  _6 = _5 + 8;
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __nstart_7 = this_3(D)->_M_implD.29139._M_startD.29143._M_nodeD.29041;
  # DEBUG D#53ptD.0 => this_3(D)
  # DEBUG __nstartD.31995 => __nstart_7
  # DEBUG __nfinishD.31996 => _6
  # DEBUG thisD.31997 => D#53ptD.0
  # DEBUG __nD.31998 => __nstart_7
  if (_6 <= __nstart_7)
    goto <bb 8>;
  else
    goto <bb 4>;
;;    succ:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __nstart_20 = PHI <__nstart_7(4), __nstart_14(6)>
  # .MEM_19 = PHI <.MEM_2(D)(4), .MEM_8(6)>
  # DEBUG __nD.31998 => __nstart_20
  # VUSE <.MEM_19>
  # PT = nonlocal escaped 
  _13 = *__nstart_20;
  # DEBUG thisD.32000 => D#51ptD.0
  # DEBUG __pD.31999 => _13
  # DEBUG __sizeD.31861 => 8
  # DEBUG D#44ptD.0 => &D#52ptD.0->_M_implD.29139
  # DEBUG D#42ptD.0 => D#44ptD.0
  # DEBUG __pD.32004 => _13
  # DEBUG __aD.32002 => D#42ptD.0
  # DEBUG __nD.32003 => D#43ptD.0
  # DEBUG D#41ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#42ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG __pD.32007 => _13
  # DEBUG thisD.32005 => D#38ptD.0
  # DEBUG D.32006 => D#39ptD.0
  # .MEM_8 = VDEF <.MEM_19>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_13);
  # PT = nonlocal escaped 
  __nstart_14 = __nstart_20 + 8;
  # DEBUG __nD.31998 => __nstart_14
  # DEBUG __nD.31998 => __nstart_14
  if (_6 <= __nstart_14)
    goto <bb 7>;
  else
    goto <bb 6>;
;;    succ:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8>
  pretmp_16 = this_3(D)->_M_implD.29139._M_mapD.29141;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_23 = PHI <.MEM_8(7), .MEM_2(D)(3)>
  # PT = nonlocal escaped 
  # prephitmp_17 = PHI <pretmp_16(7), _4(3)>
  # DEBUG D#60ptD.0 => this_3(D)->_M_implD.29139._M_map_sizeD.29142
  # DEBUG D#123ptD.0 => this_3(D)->_M_implD.29139._M_mapD.29141
  # DEBUG D#58ptD.0 => this_3(D)
  # DEBUG D#59ptD.0 => D#60ptD.0
  # DEBUG __pD.31985 => D#123ptD.0
  # DEBUG thisD.31987 => D#58ptD.0
  # DEBUG __nD.31986 => D#59ptD.0
  # DEBUG D#57ptD.0 => D#59ptD.0
  # DEBUG D#56ptD.0 => D#58ptD.0
  # DEBUG D#55ptD.0 => D#56ptD.0
  # DEBUG thisD.31965 => D#55ptD.0
  # DEBUG D#54ptD.0 => D#55ptD.0
  # DEBUG thisD.31953 => D#54ptD.0
  # DEBUG thisD.31945 => NULL
  # DEBUG D.31946 => NULL
  # DEBUG thisD.31943 => NULL
  # DEBUG D#36ptD.0 => &__map_allocD.31988
  # DEBUG D#37ptD.0 => D#57ptD.0
  # DEBUG __pD.31991 => D#123ptD.0
  # DEBUG __aD.31989 => D#36ptD.0
  # DEBUG __nD.31990 => D#37ptD.0
  # DEBUG D#35ptD.0 => D#37ptD.0
  # DEBUG D#34ptD.0 => D#36ptD.0
  # DEBUG D#32ptD.0 => D#34ptD.0
  # DEBUG D#33ptD.0 => D#35ptD.0
  # DEBUG __pD.31994 => D#123ptD.0
  # DEBUG thisD.31992 => D#32ptD.0
  # DEBUG D.31993 => D#33ptD.0
  # .MEM_15 = VDEF <.MEM_23>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (prephitmp_17);
  # DEBUG thisD.31979 => &__map_allocD.31988
  # DEBUG thisD.31958 => &__map_allocD.31988
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 8, next block 1, flags: (NEW, REACHABLE)
;;    pred:       2 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_2(D)(2), .MEM_15(8)>
  # DEBUG D#61ptD.0 => &this_3(D)->_M_implD.29139
  # DEBUG thisD.32008 => D#61ptD.0
  # DEBUG thisD.32009 => D#61ptD.0
  # DEBUG thisD.32010 => D#61ptD.0
  # .MEM_12 = VDEF <.MEM_1>
  MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
  # VUSE <.MEM_12>
  return;
;;    succ:       EXIT [100.0%] 

}


Creating dr for this_3(D)->_M_impl._M_map
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *this_3(D)
	Access function 0: 0
	Access function 1: 0
Creating dr for this_3(D)->_M_impl._M_finish._M_node
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 72
	step: 0
	aligned to: 256
	base_object: *this_3(D)
	Access function 0: 192
	Access function 1: 384
	Access function 2: 0
Creating dr for this_3(D)->_M_impl._M_start._M_node
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: *this_3(D)
	Access function 0: 192
	Access function 1: 128
	Access function 2: 0
Creating dr for *__nstart_20
analyze_innermost: success.
	base_address: __nstart_7
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_7
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_20
analyze_innermost: success.
	base_address: __nstart_7
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_7
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_20
analyze_innermost: success.
	base_address: __nstart_7
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_7
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_20
analyze_innermost: success.
	base_address: __nstart_7
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_7
	Access function 0: {0B, +, 8}_1
Analyzing # of iterations of loop 1
  exit condition [__nstart_7 + 8, + , 8](no_overflow) < _5 + 8
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) _5 - (unsigned long) __nstart_7) + 7) / 8, bounded by 2305843009213693951
Analyzing # of iterations of loop 1
  exit condition [__nstart_7 + 8, + , 8](no_overflow) < _5 + 8
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) _5 - (unsigned long) __nstart_7) + 7) / 8, bounded by 2305843009213693951
Creating dr for *__nstart_20
analyze_innermost: success.
	base_address: __nstart_7
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_7
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_20
analyze_innermost: success.
	base_address: __nstart_7
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_7
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_20
analyze_innermost: success.
	base_address: __nstart_7
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_7
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_20
analyze_innermost: success.
	base_address: __nstart_7
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_7
	Access function 0: {0B, +, 8}_1
Analyzing # of iterations of loop 1
  exit condition [__nstart_7 + 8, + , 8](no_overflow) < _5 + 8
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) _5 - (unsigned long) __nstart_7) + 7) / 8, bounded by 2305843009213693951
Creating dr for this_3(D)->_M_impl._M_map
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *this_3(D)
	Access function 0: 0
	Access function 1: 0

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:11, LOOPS:1, CONDITIONS:3, STMTS:71)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_9 })
  {
    <bb 2>:
    # VUSE <.MEM_2(D)>
    _4 = this_3(D)->_M_impl._M_map;
    if (_4 != 0B)
      goto <bb 3>;
    else
      goto <bb 9>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_8 bb_4 })
  {
    <bb 3>:
    # VUSE <.MEM_2(D)>
    _5 = this_3(D)->_M_impl._M_finish._M_node;
    _6 = _5 + 8;
    # VUSE <.MEM_2(D)>
    __nstart_7 = this_3(D)->_M_impl._M_start._M_node;
    # DEBUG D#53 => this_3(D)
    # DEBUG __nstart => __nstart_7
    # DEBUG __nfinish => _6
    # DEBUG this => D#53
    # DEBUG __n => __nstart_7
    if (_6 <= __nstart_7)
      goto <bb 8>;
    else
      goto <bb 4>;

  }
  bb_4 (preds = {bb_3 }, succs = {bb_5 })
  {
    <bb 4>:

  }
  bb_7 (preds = {bb_5 }, succs = {bb_10 })
  {
    <bb 7>:

  }
  bb_10 (preds = {bb_7 }, succs = {bb_8 })
  {
    <bb 10>:
    # VUSE <.MEM_8>
    pretmp_16 = this_3(D)->_M_impl._M_map;

  }
  bb_8 (preds = {bb_10 bb_3 }, succs = {bb_9 })
  {
    <bb 8>:
    # .MEM_23 = PHI <.MEM_8(10), .MEM_2(D)(3)>
    # prephitmp_17 = PHI <pretmp_16(10), _4(3)>
    # DEBUG D#60 => this_3(D)->_M_impl._M_map_size
    # DEBUG D#123 => this_3(D)->_M_impl._M_map
    # DEBUG D#58 => this_3(D)
    # DEBUG D#59 => D#60
    # DEBUG __p => D#123
    # DEBUG this => D#58
    # DEBUG __n => D#59
    # DEBUG D#57 => D#59
    # DEBUG D#56 => D#58
    # DEBUG D#55 => D#56
    # DEBUG this => D#55
    # DEBUG D#54 => D#55
    # DEBUG this => D#54
    # DEBUG this => NULL
    # DEBUG D.31946 => NULL
    # DEBUG this => NULL
    # DEBUG D#36 => &__map_alloc
    # DEBUG D#37 => D#57
    # DEBUG __p => D#123
    # DEBUG __a => D#36
    # DEBUG __n => D#37
    # DEBUG D#35 => D#37
    # DEBUG D#34 => D#36
    # DEBUG D#32 => D#34
    # DEBUG D#33 => D#35
    # DEBUG __p => D#123
    # DEBUG this => D#32
    # DEBUG D.31993 => D#33
    # .MEM_15 = VDEF <.MEM_23>
    operator delete (prephitmp_17);
    # DEBUG this => &__map_alloc
    # DEBUG this => &__map_alloc

  }
  bb_9 (preds = {bb_2 bb_8 }, succs = {bb_1 })
  {
    <bb 9>:
    # .MEM_1 = PHI <.MEM_2(D)(2), .MEM_15(8)>
    # DEBUG D#61 => &this_3(D)->_M_impl
    # DEBUG this => D#61
    # DEBUG this => D#61
    # DEBUG this => D#61
    # .MEM_12 = VDEF <.MEM_1>
    MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
    # VUSE <.MEM_12>
    return;

  }
  loop_1 (header = 5, latch = 6, niter = (((unsigned long) _5 - (unsigned long) __nstart_7) + 7) / 8, upper_bound = 2305843009213693951)
  {
    bb_5 (preds = {bb_4 bb_6 }, succs = {bb_7 bb_6 })
    {
      <bb 5>:
      # __nstart_20 = PHI <__nstart_7(4), __nstart_14(6)>
      # .MEM_19 = PHI <.MEM_2(D)(4), .MEM_8(6)>
      # DEBUG __n => __nstart_20
      # VUSE <.MEM_19>
      _13 = *__nstart_20;
      # DEBUG this => D#51
      # DEBUG __p => _13
      # DEBUG __size => 8
      # DEBUG D#44 => &D#52->_M_impl
      # DEBUG D#42 => D#44
      # DEBUG __p => _13
      # DEBUG __a => D#42
      # DEBUG __n => D#43
      # DEBUG D#41 => D#43
      # DEBUG D#40 => D#42
      # DEBUG D#38 => D#40
      # DEBUG D#39 => D#41
      # DEBUG __p => _13
      # DEBUG this => D#38
      # DEBUG D.32006 => D#39
      # .MEM_8 = VDEF <.MEM_19>
      operator delete (_13);
      __nstart_14 = __nstart_20 + 8;
      # DEBUG __n => __nstart_14
      # DEBUG __n => __nstart_14
      if (_6 <= __nstart_14)
        goto <bb 7>;
      else
        goto <bb 6>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_5 })
    {
      <bb 6>:
      goto <bb 5>;

    }
  }
}

Pass statistics:
----------------

std::_Deque_base<_Tp, _Alloc>::~_Deque_base() [with _Tp = PacketReplyInfo*; _Alloc = std::allocator<PacketReplyInfo*>] (struct _Deque_baseD.28773 * const thisD.29195)
{
  struct PacketReplyInfoD.28726 * * * __nstartD.31995;
  struct PacketReplyInfoD.28726 * * * _4;
  struct PacketReplyInfoD.28726 * * * _5;
  struct PacketReplyInfoD.28726 * * * _6;
  struct PacketReplyInfoD.28726 * * _13;
  struct PacketReplyInfoD.28726 * * * pretmp_16;
  struct PacketReplyInfoD.28726 * * * prephitmp_17;

;;   basic block 2, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _4 = this_3(D)->_M_implD.29139._M_mapD.29141;
  if (_4 != 0B)
    goto <bb 3>;
  else
    goto <bb 9>;
;;    succ:       3 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _5 = this_3(D)->_M_implD.29139._M_finishD.29144._M_nodeD.29041;
  # PT = nonlocal escaped 
  _6 = _5 + 8;
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __nstart_7 = this_3(D)->_M_implD.29139._M_startD.29143._M_nodeD.29041;
  # DEBUG D#53ptD.0 => this_3(D)
  # DEBUG __nstartD.31995 => __nstart_7
  # DEBUG __nfinishD.31996 => _6
  # DEBUG thisD.31997 => D#53ptD.0
  # DEBUG __nD.31998 => __nstart_7
  if (_6 <= __nstart_7)
    goto <bb 8>;
  else
    goto <bb 4>;
;;    succ:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __nstart_20 = PHI <__nstart_7(4), __nstart_14(6)>
  # .MEM_19 = PHI <.MEM_2(D)(4), .MEM_8(6)>
  # DEBUG __nD.31998 => __nstart_20
  # VUSE <.MEM_19>
  # PT = nonlocal escaped 
  _13 = *__nstart_20;
  # DEBUG thisD.32000 => D#51ptD.0
  # DEBUG __pD.31999 => _13
  # DEBUG __sizeD.31861 => 8
  # DEBUG D#44ptD.0 => &D#52ptD.0->_M_implD.29139
  # DEBUG D#42ptD.0 => D#44ptD.0
  # DEBUG __pD.32004 => _13
  # DEBUG __aD.32002 => D#42ptD.0
  # DEBUG __nD.32003 => D#43ptD.0
  # DEBUG D#41ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#42ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG __pD.32007 => _13
  # DEBUG thisD.32005 => D#38ptD.0
  # DEBUG D.32006 => D#39ptD.0
  # .MEM_8 = VDEF <.MEM_19>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_13);
  # PT = nonlocal escaped 
  __nstart_14 = __nstart_20 + 8;
  # DEBUG __nD.31998 => __nstart_14
  # DEBUG __nD.31998 => __nstart_14
  if (_6 <= __nstart_14)
    goto <bb 7>;
  else
    goto <bb 6>;
;;    succ:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 6, next block 10, flags: (NEW)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       10 [100.0%]  (FALLTHRU)

;;   basic block 10, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 7, next block 8, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_8>
  pretmp_16 = this_3(D)->_M_implD.29139._M_mapD.29141;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 10, next block 9, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_23 = PHI <.MEM_8(10), .MEM_2(D)(3)>
  # PT = nonlocal escaped 
  # prephitmp_17 = PHI <pretmp_16(10), _4(3)>
  # DEBUG D#60ptD.0 => this_3(D)->_M_implD.29139._M_map_sizeD.29142
  # DEBUG D#123ptD.0 => this_3(D)->_M_implD.29139._M_mapD.29141
  # DEBUG D#58ptD.0 => this_3(D)
  # DEBUG D#59ptD.0 => D#60ptD.0
  # DEBUG __pD.31985 => D#123ptD.0
  # DEBUG thisD.31987 => D#58ptD.0
  # DEBUG __nD.31986 => D#59ptD.0
  # DEBUG D#57ptD.0 => D#59ptD.0
  # DEBUG D#56ptD.0 => D#58ptD.0
  # DEBUG D#55ptD.0 => D#56ptD.0
  # DEBUG thisD.31965 => D#55ptD.0
  # DEBUG D#54ptD.0 => D#55ptD.0
  # DEBUG thisD.31953 => D#54ptD.0
  # DEBUG thisD.31945 => NULL
  # DEBUG D.31946 => NULL
  # DEBUG thisD.31943 => NULL
  # DEBUG D#36ptD.0 => &__map_allocD.31988
  # DEBUG D#37ptD.0 => D#57ptD.0
  # DEBUG __pD.31991 => D#123ptD.0
  # DEBUG __aD.31989 => D#36ptD.0
  # DEBUG __nD.31990 => D#37ptD.0
  # DEBUG D#35ptD.0 => D#37ptD.0
  # DEBUG D#34ptD.0 => D#36ptD.0
  # DEBUG D#32ptD.0 => D#34ptD.0
  # DEBUG D#33ptD.0 => D#35ptD.0
  # DEBUG __pD.31994 => D#123ptD.0
  # DEBUG thisD.31992 => D#32ptD.0
  # DEBUG D.31993 => D#33ptD.0
  # .MEM_15 = VDEF <.MEM_23>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (prephitmp_17);
  # DEBUG thisD.31979 => &__map_allocD.31988
  # DEBUG thisD.31958 => &__map_allocD.31988
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 8, next block 1, flags: (NEW, REACHABLE)
;;    pred:       2 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_2(D)(2), .MEM_15(8)>
  # DEBUG D#61ptD.0 => &this_3(D)->_M_implD.29139
  # DEBUG thisD.32008 => D#61ptD.0
  # DEBUG thisD.32009 => D#61ptD.0
  # DEBUG thisD.32010 => D#61ptD.0
  # .MEM_12 = VDEF <.MEM_1>
  MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
  # VUSE <.MEM_12>
  return;
;;    succ:       EXIT [100.0%] 

}



;; Function void std::_Deque_base<_Tp, _Alloc>::_M_initialize_map(std::size_t) [with _Tp = PacketReplyInfo*; _Alloc = std::allocator<PacketReplyInfo*>; std::size_t = long unsigned int] (_ZNSt11_Deque_baseIP15PacketReplyInfoSaIS1_EE17_M_initialize_mapEm, funcdef_no=1572, decl_uid=29126, cgraph_uid=380, symbol_order=383)


Pass statistics:
----------------

void std::_Deque_base<_Tp, _Alloc>::_M_initialize_map(std::size_t) [with _Tp = PacketReplyInfo*; _Alloc = std::allocator<PacketReplyInfo*>; std::size_t = long unsigned int] (struct _Deque_baseD.28773 * const thisD.29127, size_tD.2818 __num_elementsD.29128)
Eh tree:
   5 must_not_throw
   4 cleanup land:{2,<L2>}
   3 try land:{1,<L0>} catch:{}
     8 must_not_throw
     7 cleanup land:{4,<L5>}
     6 try land:{3,<L3>} catch:{}
{
  struct PacketReplyInfoD.28726 * * * __nstartD.32964;
  struct PacketReplyInfoD.28726 * * * __nfinishD.30114;
  struct PacketReplyInfoD.28726 * * * __nstartD.30113;
  const size_tD.2818 __num_nodesD.30110;
  const long unsigned intD.14 D.30111;
  const long unsigned intD.14 D.30112;
  long unsigned intD.14 _3;
  struct PacketReplyInfoD.28726 * * * _8;
  long unsigned intD.14 _15;
  long unsigned intD.14 _16;
  long unsigned intD.14 _17;
  long unsigned intD.14 _18;
  long unsigned intD.14 _20;
  struct PacketReplyInfoD.28726 * * * _23;
  struct PacketReplyInfoD.28726 * * _24;
  long unsigned intD.14 _26;
  long unsigned intD.14 _27;
  long unsigned intD.14 _28;
  struct PacketReplyInfoD.28726 * * _29;
  voidD.45 * _31;
  struct PacketReplyInfoD.28726 * * * _33;
  struct PacketReplyInfoD.28726 * * _40;
  struct PacketReplyInfoD.28726 * * _41;
  struct PacketReplyInfoD.28726 * * _42;
  struct PacketReplyInfoD.28726 * * _52;
  voidD.45 * _54;
  struct PacketReplyInfoD.28726 * * _56;
  long unsigned intD.14 _65;

;;   basic block 2, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __sizeD.32235 => 8
  # RANGE [0, 288230376151711743] NONZERO 288230376151711743
  _3 = __num_elements_2(D) >> 6;
  # RANGE [1, 288230376151711744] NONZERO 576460752303423487
  __num_nodes_4 = _3 + 1;
  # DEBUG __num_nodesD.30110 => __num_nodes_4
  # RANGE [3, 288230376151711746] NONZERO 576460752303423487
  _5 = _3 + 3;
  # DEBUG __aD.32232 => &D.30111
  # DEBUG __bD.32233 => &D.30112
  # RANGE [8, 288230376151711746] NONZERO 576460752303423487
  _65 = MAX_EXPR <_5, 8>;
  # .MEM_11 = VDEF <.MEM_1(D)>
  this_10(D)->_M_implD.29139._M_map_sizeD.29142 = _65;
  # DEBUG D#81ptD.0 => this_10(D)
  # DEBUG __nD.32223 => D#125ptD.0
  # DEBUG thisD.32224 => D#81ptD.0
  # DEBUG D#80ptD.0 => D#81ptD.0
  # DEBUG D#55ptD.0 => D#80ptD.0
  # DEBUG thisD.32085 => D#55ptD.0
  # DEBUG D#54ptD.0 => D#55ptD.0
  # DEBUG thisD.31953 => D#54ptD.0
  # DEBUG thisD.31945 => NULL
  # DEBUG D.31946 => NULL
  # DEBUG thisD.31943 => NULL
  # DEBUG D#79ptD.0 => &__map_allocD.32225
  # DEBUG __nD.32227 => D#125ptD.0
  # DEBUG __aD.32226 => D#79ptD.0
  # DEBUG D#78ptD.0 => D#79ptD.0
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG D#77ptD.0 => 0B
  # DEBUG __nD.32230 => D#125ptD.0
  # DEBUG thisD.32228 => D#76ptD.0
  # DEBUG D.32229 => D#77ptD.0
  # DEBUG D#75ptD.0 => D#76ptD.0
  # DEBUG D#74ptD.0 => D#75ptD.0
  # DEBUG thisD.32050 => D#74ptD.0
  # RANGE [64, 2305843009213693968] NONZERO 4611686018427387896
  _26 = _65 * 8;
  # .MEM_34 = VDEF <.MEM_11>
  # PT = { D.32994 } (escaped heap)
  # USE = nonlocal null { D.32994 D.32995 } (escaped heap)
  # CLB = nonlocal null { D.32994 D.32995 } (escaped heap)
  _8 = _ZnwmD.2764 (_26);
  # DEBUG thisD.32098 => &__map_allocD.32225
  # DEBUG thisD.32087 => &__map_allocD.32225
  # .MEM_14 = VDEF <.MEM_34>
  this_10(D)->_M_implD.29139._M_mapD.29141 = _8;
  # VUSE <.MEM_14>
  _15 = this_10(D)->_M_implD.29139._M_map_sizeD.29142;
  # RANGE [0, 18446744073709551615]
  _16 = _15 - __num_nodes_4;
  # RANGE [0, 9223372036854775807] NONZERO 9223372036854775807
  _17 = _16 >> 1;
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _18 = _17 * 8;
  # PT = { D.32994 } (escaped heap)
  __nstart_19 = _8 + _18;
  # DEBUG __nstartD.30113 => __nstart_19
  # RANGE [8, 2305843009213693952] NONZERO 4611686018427387896
  _20 = __num_nodes_4 * 8;
  # PT = { D.32994 } (escaped heap)
  __nfinish_21 = __nstart_19 + _20;
  # DEBUG __nfinishD.30114 => __nfinish_21
  # DEBUG D#93ptD.0 => this_10(D)
  # DEBUG __nstartD.32964 => __nstart_19
  # DEBUG __nfinishD.32965 => __nfinish_21
  # DEBUG thisD.32966 => D#93ptD.0
  # DEBUG __curD.32967 => __nstart_19
  if (__nstart_19 >= __nfinish_21)
    goto <bb 14>;
  else
    goto <bb 3>;
;;    succ:       14 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 430, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 9550, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_71 = PHI <.MEM_14(3), .MEM_60(6)>
  # PT = { D.32994 } (escaped heap)
  # __nstart_75 = PHI <__nstart_19(3), __nstart_53(6)>
  # DEBUG __curD.32967 => __nstart_75
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.32981 => D#90ptD.0
  # DEBUG D#89ptD.0 => D#90ptD.0
  # DEBUG __sizeD.32158 => 8
  # DEBUG D#88ptD.0 => &D#89ptD.0->_M_implD.29139
  # DEBUG D#87ptD.0 => D#88ptD.0
  # DEBUG __nD.32984 => NULL
  # DEBUG __aD.32983 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#87ptD.0
  # DEBUG D#84ptD.0 => D#86ptD.0
  # DEBUG D#85ptD.0 => 0B
  # DEBUG __nD.32987 => NULL
  # DEBUG thisD.32985 => D#84ptD.0
  # DEBUG D.32986 => D#85ptD.0
  # DEBUG D#83ptD.0 => D#84ptD.0
  # DEBUG D#82ptD.0 => D#83ptD.0
  # DEBUG thisD.32115 => D#82ptD.0
  [LP 3] # .MEM_59 = VDEF <.MEM_71>
  # PT = { D.32995 } (escaped heap)
  # USE = nonlocal null { D.32994 D.32995 } (escaped heap)
  # CLB = nonlocal null { D.32994 D.32995 } (escaped heap)
  _52 = _ZnwmD.2764 (512);
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 (EH,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9550, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_60 = VDEF <.MEM_59>
  *__nstart_75 = _52;
  # PT = { D.32994 } (escaped heap)
  __nstart_53 = __nstart_75 + 8;
  # DEBUG __curD.32967 => __nstart_53
  # DEBUG __curD.32967 => __nstart_53
  if (__nfinish_21 <= __nstart_53)
    goto <bb 14>;
  else
    goto <bb 6>;
;;    succ:       14 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 9120, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       4 (EH,EXECUTABLE)
  # PT = { D.32994 } (escaped heap)
  # __nstart_13 = PHI <__nstart_75(4)>
<L3>: [LP 3]
  # VUSE <.MEM_59>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _54 = __builtin_eh_pointerD.2738 (6);
  # .MEM_61 = VDEF <.MEM_59>
  # USE = nonlocal null { D.32994 D.32995 } (escaped heap)
  # CLB = nonlocal null { D.32994 D.32995 } (escaped heap)
  __cxa_begin_catchD.15339 (_54);
  # DEBUG D#53ptD.0 => D#92ptD.0
  # DEBUG __nstartD.32970 => __nstart_19
  # DEBUG __nfinishD.32969 => __nstart_13
  # DEBUG thisD.32968 => D#53ptD.0
  # DEBUG __nD.32971 => __nstart_19
  if (__nstart_19 >= __nstart_13)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_55 = PHI <.MEM_61(7), .MEM_74(11)>
  [LP 4] # .MEM_63 = VDEF <.MEM_55>
  # USE = nonlocal null { D.32994 D.32995 } (escaped heap)
  # CLB = nonlocal null { D.32994 D.32995 } (escaped heap)
  __cxa_rethrowD.30115 ();
;;    succ:       13 (EH,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       7 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = { D.32994 } (escaped heap)
  # __nstart_72 = PHI <__nstart_19(9), __nstart_57(12)>
  # .MEM_73 = PHI <.MEM_61(9), .MEM_62(12)>
  # DEBUG __nD.32971 => __nstart_72
  # VUSE <.MEM_73>
  # PT = nonlocal escaped { D.32995 } (escaped heap)
  _56 = *__nstart_72;
  # DEBUG thisD.32973 => D#51ptD.0
  # DEBUG __pD.32972 => _56
  # DEBUG __sizeD.31861 => 8
  # DEBUG D#44ptD.0 => &D#52ptD.0->_M_implD.29139
  # DEBUG D#42ptD.0 => D#44ptD.0
  # DEBUG __pD.32977 => _56
  # DEBUG __aD.32975 => D#42ptD.0
  # DEBUG __nD.32976 => D#43ptD.0
  # DEBUG D#41ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#42ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG __pD.32980 => _56
  # DEBUG thisD.32978 => D#38ptD.0
  # DEBUG D.32979 => D#39ptD.0
  # .MEM_62 = VDEF <.MEM_73>
  # USE = nonlocal null { D.32994 D.32995 } (escaped heap)
  # CLB = nonlocal null { D.32994 D.32995 } (escaped heap)
  _ZdlPvD.2766 (_56);
  # PT = { D.32994 } (escaped heap)
  __nstart_57 = __nstart_72 + 8;
  # DEBUG __nD.32971 => __nstart_57
  # DEBUG __nD.32971 => __nstart_57
  if (__nstart_57 >= __nstart_13)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_74 = PHI <.MEM_62(10)>
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       10 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       8 (EH,EXECUTABLE)
<L5>: [LP 4]
  [MNT 8] # .MEM_64 = VDEF <.MEM_63>
  # USE = nonlocal null { D.32994 D.32995 } (escaped heap)
  # CLB = nonlocal null { D.32994 D.32995 } (escaped heap)
  __cxa_end_catchD.15338 ();
  [LP 1] resx 7
;;    succ:       15 (EH,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       2 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_58 = PHI <.MEM_14(2), .MEM_60(5)>
  # DEBUG D#96ptD.0 => &this_10(D)->_M_implD.29139._M_startD.29143
  # DEBUG thisD.32241 => D#96ptD.0
  # DEBUG __new_nodeD.32242 => __nstart_19
  # .MEM_43 = VDEF <.MEM_58>
  MEM[(struct _Deque_iteratorD.29006 *)this_10(D) + 16B]._M_nodeD.29041 = __nstart_19;
  # VUSE <.MEM_43>
  # PT = nonlocal escaped { D.32995 } (escaped heap)
  _24 = *__nstart_19;
  # .MEM_44 = VDEF <.MEM_43>
  MEM[(struct _Deque_iteratorD.29006 *)this_10(D) + 16B]._M_firstD.29039 = _24;
  # DEBUG __sizeD.31764 => 8
  # PT = nonlocal escaped { D.32995 } (escaped heap)
  _42 = _24 + 512;
  # .MEM_45 = VDEF <.MEM_44>
  MEM[(struct _Deque_iteratorD.29006 *)this_10(D) + 16B]._M_lastD.29040 = _42;
  # PT = { D.32994 } (escaped heap)
  _23 = __nfinish_21 + 18446744073709551608;
  # DEBUG D#95ptD.0 => &this_10(D)->_M_implD.29139._M_finishD.29144
  # DEBUG thisD.32239 => D#95ptD.0
  # DEBUG __new_nodeD.32240 => _23
  # .MEM_46 = VDEF <.MEM_45>
  MEM[(struct _Deque_iteratorD.29006 *)this_10(D) + 48B]._M_nodeD.29041 = _23;
  # VUSE <.MEM_46>
  # PT = nonlocal escaped { D.32995 } (escaped heap)
  _40 = MEM[(struct PacketReplyInfoD.28726 * * *)__nfinish_21 + -8B];
  # .MEM_47 = VDEF <.MEM_46>
  MEM[(struct _Deque_iteratorD.29006 *)this_10(D) + 48B]._M_firstD.29039 = _40;
  # DEBUG __sizeD.31764 => 8
  # PT = nonlocal escaped { D.32995 } (escaped heap)
  _41 = _40 + 512;
  # .MEM_48 = VDEF <.MEM_47>
  MEM[(struct _Deque_iteratorD.29006 *)this_10(D) + 48B]._M_lastD.29040 = _41;
  # .MEM_25 = VDEF <.MEM_48>
  this_10(D)->_M_implD.29139._M_startD.29143._M_curD.29038 = _24;
  # DEBUG __sizeD.32237 => 8
  # RANGE [0, 63] NONZERO 63
  _27 = __num_elements_2(D) & 63;
  # RANGE [0, 504] NONZERO 504
  _28 = _27 * 8;
  # PT = nonlocal escaped { D.32995 } (escaped heap)
  _29 = _40 + _28;
  # .MEM_30 = VDEF <.MEM_25>
  this_10(D)->_M_implD.29139._M_finishD.29144._M_curD.29038 = _29;
  # VUSE <.MEM_30>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       13 (EH,EXECUTABLE)
<L0>: [LP 1]
  # VUSE <.MEM_64>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _31 = __builtin_eh_pointerD.2738 (3);
  # .MEM_32 = VDEF <.MEM_64>
  # USE = nonlocal null { D.32994 D.32995 } (escaped heap)
  # CLB = nonlocal null { D.32994 D.32995 } (escaped heap)
  __cxa_begin_catchD.15339 (_31);
  # DEBUG D#94ptD.0 => this_10(D)->_M_implD.29139._M_map_sizeD.29142
  # VUSE <.MEM_32>
  # PT = nonlocal escaped 
  _33 = this_10(D)->_M_implD.29139._M_mapD.29141;
  # DEBUG D#58ptD.0 => this_10(D)
  # DEBUG D#59ptD.0 => D#94ptD.0
  # DEBUG __pD.32243 => _33
  # DEBUG thisD.32245 => D#58ptD.0
  # DEBUG __nD.32244 => D#59ptD.0
  # DEBUG D#57ptD.0 => D#59ptD.0
  # DEBUG D#56ptD.0 => D#58ptD.0
  # DEBUG D#55ptD.0 => D#56ptD.0
  # DEBUG thisD.31965 => D#55ptD.0
  # DEBUG D#54ptD.0 => D#55ptD.0
  # DEBUG thisD.31953 => D#54ptD.0
  # DEBUG thisD.31945 => NULL
  # DEBUG D.31946 => NULL
  # DEBUG thisD.31943 => NULL
  # DEBUG D#36ptD.0 => &__map_allocD.32246
  # DEBUG D#37ptD.0 => D#57ptD.0
  # DEBUG __pD.32249 => _33
  # DEBUG __aD.32247 => D#36ptD.0
  # DEBUG __nD.32248 => D#37ptD.0
  # DEBUG D#35ptD.0 => D#37ptD.0
  # DEBUG D#34ptD.0 => D#36ptD.0
  # DEBUG D#32ptD.0 => D#34ptD.0
  # DEBUG D#33ptD.0 => D#35ptD.0
  # DEBUG __pD.32252 => _33
  # DEBUG thisD.32250 => D#32ptD.0
  # DEBUG D.32251 => D#33ptD.0
  # .MEM_49 = VDEF <.MEM_32>
  # USE = nonlocal null { D.32994 D.32995 } (escaped heap)
  # CLB = nonlocal null { D.32994 D.32995 } (escaped heap)
  _ZdlPvD.2766 (_33);
  # DEBUG thisD.31979 => &__map_allocD.32246
  # DEBUG thisD.31958 => &__map_allocD.32246
  # .MEM_35 = VDEF <.MEM_49>
  this_10(D)->_M_implD.29139._M_mapD.29141 = 0B;
  # .MEM_36 = VDEF <.MEM_35>
  this_10(D)->_M_implD.29139._M_map_sizeD.29142 = 0;
  [LP 2] # .MEM_37 = VDEF <.MEM_36>
  # USE = nonlocal null { D.32994 D.32995 } (escaped heap)
  # CLB = nonlocal null { D.32994 D.32995 } (escaped heap)
  __cxa_rethrowD.30115 ();
;;    succ:       16 (EH,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 15, next block 1, flags: (NEW, REACHABLE)
;;    pred:       15 (EH,EXECUTABLE)
<L2>: [LP 2]
  [MNT 5] # .MEM_38 = VDEF <.MEM_37>
  # USE = nonlocal null { D.32994 D.32995 } (escaped heap)
  # CLB = nonlocal null { D.32994 D.32995 } (escaped heap)
  __cxa_end_catchD.15338 ();
  resx 4
;;    succ:      

}


Creating dr for this_10(D)->_M_impl._M_map_size
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *this_10(D)
	Access function 0: 64
	Access function 1: 0
Creating dr for *__nstart_75
analyze_innermost: success.
	base_address: _8 + _17 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *_8 + _17 * 8
	Access function 0: {0B, +, 8}_2
Creating dr for *__nstart_75
analyze_innermost: success.
	base_address: _8 + _17 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *_8 + _17 * 8
	Access function 0: {0B, +, 8}_2
Creating dr for *__nstart_72
analyze_innermost: success.
	base_address: _8 + _17 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *_8 + _17 * 8
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_72
analyze_innermost: success.
	base_address: _8 + _17 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *_8 + _17 * 8
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_72
analyze_innermost: success.
	base_address: _8 + _17 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *_8 + _17 * 8
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_72
analyze_innermost: success.
	base_address: _8 + _17 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *_8 + _17 * 8
	Access function 0: {0B, +, 8}_1
Analyzing # of iterations of loop 1
  exit condition [__nstart_19 + 8, + , 8](no_overflow) < __nstart_13
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) __nstart_13 - (unsigned long) (__nstart_19 + 8)) + 7) / 8, bounded by 2305843009213693951
Analyzing # of iterations of loop 1
  exit condition [__nstart_19 + 8, + , 8](no_overflow) < __nstart_13
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) __nstart_13 - (unsigned long) (__nstart_19 + 8)) + 7) / 8, bounded by 2305843009213693951
Creating dr for *__nstart_72
analyze_innermost: success.
	base_address: _8 + _17 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *_8 + _17 * 8
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_72
analyze_innermost: success.
	base_address: _8 + _17 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *_8 + _17 * 8
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_72
analyze_innermost: success.
	base_address: _8 + _17 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *_8 + _17 * 8
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_72
analyze_innermost: success.
	base_address: _8 + _17 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *_8 + _17 * 8
	Access function 0: {0B, +, 8}_1
Analyzing # of iterations of loop 1
  exit condition [__nstart_19 + 8, + , 8](no_overflow) < __nstart_13
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) __nstart_13 - (unsigned long) (__nstart_19 + 8)) + 7) / 8, bounded by 2305843009213693951
Creating dr for MEM[(struct _Deque_iterator *)this_10(D) + 16B]._M_node
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_10(D) + 16B]
	Access function 0: 192
Creating dr for *__nstart_19
analyze_innermost: success.
	base_address: _8 + _17 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *__nstart_19
Creating dr for MEM[(struct _Deque_iterator *)this_10(D) + 16B]._M_first
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_10(D) + 16B]
	Access function 0: 64
Creating dr for MEM[(struct _Deque_iterator *)this_10(D) + 16B]._M_last
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_10(D) + 16B]
	Access function 0: 128
Creating dr for MEM[(struct _Deque_iterator *)this_10(D) + 48B]._M_node
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 72
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_10(D) + 48B]
	Access function 0: 192
Creating dr for MEM[(struct PacketReplyInfo * * *)__nfinish_21 + -8B]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:397, generic-match.c:4039
Applying pattern match.pd:697, generic-match.c:1350
Applying pattern match.pd:625, generic-match.c:1309
success.
Applying pattern match.pd:715, generic-match.c:1389
Applying pattern match.pd:397, generic-match.c:4039
Applying pattern match.pd:715, generic-match.c:1389
	base_address: _8 + (_3 + _17) * 8
	offset from base address: 0
	constant offset from base address: 0(OVF)
	step: 0
	aligned to: 256
	base_object: MEM[(struct PacketReplyInfo * * *)__nfinish_21 + -8B]
Creating dr for MEM[(struct _Deque_iterator *)this_10(D) + 48B]._M_first
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_10(D) + 48B]
	Access function 0: 64
Creating dr for MEM[(struct _Deque_iterator *)this_10(D) + 48B]._M_last
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 64
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_10(D) + 48B]
	Access function 0: 128
Creating dr for this_10(D)->_M_impl._M_start._M_cur
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: *this_10(D)
	Access function 0: 0
	Access function 1: 128
	Access function 2: 0
Creating dr for this_10(D)->_M_impl._M_finish._M_cur
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: *this_10(D)
	Access function 0: 0
	Access function 1: 384
	Access function 2: 0

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:26)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:19, LOOPS:2, CONDITIONS:5, STMTS:177)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_14 bb_3 })
  {
    <bb 2>:
    # DEBUG __size => 8
    _3 = __num_elements_2(D) >> 6;
    __num_nodes_4 = _3 + 1;
    # DEBUG __num_nodes => __num_nodes_4
    _5 = _3 + 3;
    # DEBUG __a => &D.30111
    # DEBUG __b => &D.30112
    _65 = MAX_EXPR <_5, 8>;
    # .MEM_11 = VDEF <.MEM_1(D)>
    this_10(D)->_M_impl._M_map_size = _65;
    # DEBUG D#81 => this_10(D)
    # DEBUG __n => D#125
    # DEBUG this => D#81
    # DEBUG D#80 => D#81
    # DEBUG D#55 => D#80
    # DEBUG this => D#55
    # DEBUG D#54 => D#55
    # DEBUG this => D#54
    # DEBUG this => NULL
    # DEBUG D.31946 => NULL
    # DEBUG this => NULL
    # DEBUG D#79 => &__map_alloc
    # DEBUG __n => D#125
    # DEBUG __a => D#79
    # DEBUG D#78 => D#79
    # DEBUG D#76 => D#78
    # DEBUG D#77 => 0B
    # DEBUG __n => D#125
    # DEBUG this => D#76
    # DEBUG D.32229 => D#77
    # DEBUG D#75 => D#76
    # DEBUG D#74 => D#75
    # DEBUG this => D#74
    _26 = _65 * 8;
    # .MEM_34 = VDEF <.MEM_11>
    _8 = operator new (_26);
    # DEBUG this => &__map_alloc
    # DEBUG this => &__map_alloc
    # .MEM_14 = VDEF <.MEM_34>
    this_10(D)->_M_impl._M_map = _8;
    # VUSE <.MEM_14>
    _15 = this_10(D)->_M_impl._M_map_size;
    _16 = _15 - __num_nodes_4;
    _17 = _16 >> 1;
    _18 = _17 * 8;
    __nstart_19 = _8 + _18;
    # DEBUG __nstart => __nstart_19
    _20 = __num_nodes_4 * 8;
    __nfinish_21 = __nstart_19 + _20;
    # DEBUG __nfinish => __nfinish_21
    # DEBUG D#93 => this_10(D)
    # DEBUG __nstart => __nstart_19
    # DEBUG __nfinish => __nfinish_21
    # DEBUG this => D#93
    # DEBUG __cur => __nstart_19
    if (__nstart_19 >= __nfinish_21)
      goto <bb 14>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 })
  {
    <bb 3>:

  }
  bb_7 (preds = {bb_4 }, succs = {bb_8 bb_9 })
  {
    # __nstart_13 = PHI <__nstart_75(4)>
  <L3>:
    # VUSE <.MEM_59>
    _54 = __builtin_eh_pointer (6);
    # .MEM_61 = VDEF <.MEM_59>
    __cxa_begin_catch (_54);
    # DEBUG D#53 => D#92
    # DEBUG __nstart => __nstart_19
    # DEBUG __nfinish => __nstart_13
    # DEBUG this => D#53
    # DEBUG __n => __nstart_19
    if (__nstart_19 >= __nstart_13)
      goto <bb 8>;
    else
      goto <bb 9>;

  }
  bb_8 (preds = {bb_7 bb_17 }, succs = {bb_13 })
  {
    <bb 8>:
    # .MEM_55 = PHI <.MEM_61(7), .MEM_74(17)>
    # .MEM_63 = VDEF <.MEM_55>
    __cxa_rethrow ();

  }
  bb_9 (preds = {bb_7 }, succs = {bb_10 })
  {
    <bb 9>:

  }
  bb_11 (preds = {bb_10 }, succs = {bb_17 })
  {
    <bb 11>:
    # .MEM_74 = PHI <.MEM_62(10)>

  }
  bb_17 (preds = {bb_11 }, succs = {bb_8 })
  {
    <bb 17>:
    goto <bb 8>;

  }
  bb_13 (preds = {bb_8 }, succs = {bb_15 })
  {
  <L5>:
    # .MEM_64 = VDEF <.MEM_63>
    __cxa_end_catch ();
    resx 7

  }
  bb_14 (preds = {bb_2 bb_5 }, succs = {bb_18 })
  {
    <bb 14>:
    # .MEM_58 = PHI <.MEM_14(2), .MEM_60(5)>

  }
  bb_18 (preds = {bb_14 }, succs = {bb_1 })
  {
    <bb 18>:
    # DEBUG D#96 => &this_10(D)->_M_impl._M_start
    # DEBUG this => D#96
    # DEBUG __new_node => __nstart_19
    # .MEM_43 = VDEF <.MEM_58>
    MEM[(struct _Deque_iterator *)this_10(D) + 16B]._M_node = __nstart_19;
    # VUSE <.MEM_43>
    _24 = *__nstart_19;
    # .MEM_44 = VDEF <.MEM_43>
    MEM[(struct _Deque_iterator *)this_10(D) + 16B]._M_first = _24;
    # DEBUG __size => 8
    _42 = _24 + 512;
    # .MEM_45 = VDEF <.MEM_44>
    MEM[(struct _Deque_iterator *)this_10(D) + 16B]._M_last = _42;
    _23 = __nfinish_21 + 18446744073709551608;
    # DEBUG D#95 => &this_10(D)->_M_impl._M_finish
    # DEBUG this => D#95
    # DEBUG __new_node => _23
    # .MEM_46 = VDEF <.MEM_45>
    MEM[(struct _Deque_iterator *)this_10(D) + 48B]._M_node = _23;
    # VUSE <.MEM_46>
    _40 = MEM[(struct PacketReplyInfo * * *)__nfinish_21 + -8B];
    # .MEM_47 = VDEF <.MEM_46>
    MEM[(struct _Deque_iterator *)this_10(D) + 48B]._M_first = _40;
    # DEBUG __size => 8
    _41 = _40 + 512;
    # .MEM_48 = VDEF <.MEM_47>
    MEM[(struct _Deque_iterator *)this_10(D) + 48B]._M_last = _41;
    # .MEM_25 = VDEF <.MEM_48>
    this_10(D)->_M_impl._M_start._M_cur = _24;
    # DEBUG __size => 8
    _27 = __num_elements_2(D) & 63;
    _28 = _27 * 8;
    _29 = _40 + _28;
    # .MEM_30 = VDEF <.MEM_25>
    this_10(D)->_M_impl._M_finish._M_cur = _29;
    # VUSE <.MEM_30>
    return;

  }
  bb_15 (preds = {bb_13 }, succs = {bb_16 })
  {
  <L0>:
    # VUSE <.MEM_64>
    _31 = __builtin_eh_pointer (3);
    # .MEM_32 = VDEF <.MEM_64>
    __cxa_begin_catch (_31);
    # DEBUG D#94 => this_10(D)->_M_impl._M_map_size
    # VUSE <.MEM_32>
    _33 = this_10(D)->_M_impl._M_map;
    # DEBUG D#58 => this_10(D)
    # DEBUG D#59 => D#94
    # DEBUG __p => _33
    # DEBUG this => D#58
    # DEBUG __n => D#59
    # DEBUG D#57 => D#59
    # DEBUG D#56 => D#58
    # DEBUG D#55 => D#56
    # DEBUG this => D#55
    # DEBUG D#54 => D#55
    # DEBUG this => D#54
    # DEBUG this => NULL
    # DEBUG D.31946 => NULL
    # DEBUG this => NULL
    # DEBUG D#36 => &__map_alloc
    # DEBUG D#37 => D#57
    # DEBUG __p => _33
    # DEBUG __a => D#36
    # DEBUG __n => D#37
    # DEBUG D#35 => D#37
    # DEBUG D#34 => D#36
    # DEBUG D#32 => D#34
    # DEBUG D#33 => D#35
    # DEBUG __p => _33
    # DEBUG this => D#32
    # DEBUG D.32251 => D#33
    # .MEM_49 = VDEF <.MEM_32>
    operator delete (_33);
    # DEBUG this => &__map_alloc
    # DEBUG this => &__map_alloc
    # .MEM_35 = VDEF <.MEM_49>
    this_10(D)->_M_impl._M_map = 0B;
    # .MEM_36 = VDEF <.MEM_35>
    this_10(D)->_M_impl._M_map_size = 0;
    # .MEM_37 = VDEF <.MEM_36>
    __cxa_rethrow ();

  }
  bb_16 (preds = {bb_15 }, succs = {})
  {
  <L2>:
    # .MEM_38 = VDEF <.MEM_37>
    __cxa_end_catch ();
    resx 4

  }
  loop_1 (header = 10, latch = 12, niter = (((unsigned long) __nstart_13 - (unsigned long) (__nstart_19 + 8)) + 7) / 8, upper_bound = 2305843009213693951)
  {
    bb_10 (preds = {bb_9 bb_12 }, succs = {bb_11 bb_12 })
    {
      <bb 10>:
      # __nstart_72 = PHI <__nstart_19(9), __nstart_57(12)>
      # .MEM_73 = PHI <.MEM_61(9), .MEM_62(12)>
      # DEBUG __n => __nstart_72
      # VUSE <.MEM_73>
      _56 = *__nstart_72;
      # DEBUG this => D#51
      # DEBUG __p => _56
      # DEBUG __size => 8
      # DEBUG D#44 => &D#52->_M_impl
      # DEBUG D#42 => D#44
      # DEBUG __p => _56
      # DEBUG __a => D#42
      # DEBUG __n => D#43
      # DEBUG D#41 => D#43
      # DEBUG D#40 => D#42
      # DEBUG D#38 => D#40
      # DEBUG D#39 => D#41
      # DEBUG __p => _56
      # DEBUG this => D#38
      # DEBUG D.32979 => D#39
      # .MEM_62 = VDEF <.MEM_73>
      operator delete (_56);
      __nstart_57 = __nstart_72 + 8;
      # DEBUG __n => __nstart_57
      # DEBUG __n => __nstart_57
      if (__nstart_57 >= __nstart_13)
        goto <bb 11>;
      else
        goto <bb 12>;

    }
    bb_12 (preds = {bb_10 }, succs = {bb_10 })
    {
      <bb 12>:
      goto <bb 10>;

    }
  }
  loop_2 (header = 4, latch = 6, niter = , upper_bound = 2305843009213693951)
  {
    bb_4 (preds = {bb_3 bb_6 }, succs = {bb_5 bb_7 })
    {
      <bb 4>:
      # .MEM_71 = PHI <.MEM_14(3), .MEM_60(6)>
      # __nstart_75 = PHI <__nstart_19(3), __nstart_53(6)>
      # DEBUG __cur => __nstart_75
      # DEBUG D#90 => D#91
      # DEBUG this => D#90
      # DEBUG D#89 => D#90
      # DEBUG __size => 8
      # DEBUG D#88 => &D#89->_M_impl
      # DEBUG D#87 => D#88
      # DEBUG __n => NULL
      # DEBUG __a => D#87
      # DEBUG D#86 => D#87
      # DEBUG D#84 => D#86
      # DEBUG D#85 => 0B
      # DEBUG __n => NULL
      # DEBUG this => D#84
      # DEBUG D.32986 => D#85
      # DEBUG D#83 => D#84
      # DEBUG D#82 => D#83
      # DEBUG this => D#82
      # .MEM_59 = VDEF <.MEM_71>
      _52 = operator new (512);

    }
    bb_5 (preds = {bb_4 }, succs = {bb_14 bb_6 })
    {
      <bb 5>:
      # .MEM_60 = VDEF <.MEM_59>
      *__nstart_75 = _52;
      __nstart_53 = __nstart_75 + 8;
      # DEBUG __cur => __nstart_53
      # DEBUG __cur => __nstart_53
      if (__nfinish_21 <= __nstart_53)
        goto <bb 14>;
      else
        goto <bb 6>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_4 })
    {
      <bb 6>:
      goto <bb 4>;

    }
  }
}

Pass statistics:
----------------

void std::_Deque_base<_Tp, _Alloc>::_M_initialize_map(std::size_t) [with _Tp = PacketReplyInfo*; _Alloc = std::allocator<PacketReplyInfo*>; std::size_t = long unsigned int] (struct _Deque_baseD.28773 * const thisD.29127, size_tD.2818 __num_elementsD.29128)
Eh tree:
   5 must_not_throw
   4 cleanup land:{2,<L2>}
   3 try land:{1,<L0>} catch:{}
     8 must_not_throw
     7 cleanup land:{4,<L5>}
     6 try land:{3,<L3>} catch:{}
{
  struct PacketReplyInfoD.28726 * * * __nstartD.32964;
  struct PacketReplyInfoD.28726 * * * __nfinishD.30114;
  struct PacketReplyInfoD.28726 * * * __nstartD.30113;
  const size_tD.2818 __num_nodesD.30110;
  const long unsigned intD.14 D.30111;
  const long unsigned intD.14 D.30112;
  long unsigned intD.14 _3;
  struct PacketReplyInfoD.28726 * * * _8;
  long unsigned intD.14 _15;
  long unsigned intD.14 _16;
  long unsigned intD.14 _17;
  long unsigned intD.14 _18;
  long unsigned intD.14 _20;
  struct PacketReplyInfoD.28726 * * * _23;
  struct PacketReplyInfoD.28726 * * _24;
  long unsigned intD.14 _26;
  long unsigned intD.14 _27;
  long unsigned intD.14 _28;
  struct PacketReplyInfoD.28726 * * _29;
  voidD.45 * _31;
  struct PacketReplyInfoD.28726 * * * _33;
  struct PacketReplyInfoD.28726 * * _40;
  struct PacketReplyInfoD.28726 * * _41;
  struct PacketReplyInfoD.28726 * * _42;
  struct PacketReplyInfoD.28726 * * _52;
  voidD.45 * _54;
  struct PacketReplyInfoD.28726 * * _56;
  long unsigned intD.14 _65;

;;   basic block 2, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __sizeD.32235 => 8
  # RANGE [0, 288230376151711743] NONZERO 288230376151711743
  _3 = __num_elements_2(D) >> 6;
  # RANGE [1, 288230376151711744] NONZERO 576460752303423487
  __num_nodes_4 = _3 + 1;
  # DEBUG __num_nodesD.30110 => __num_nodes_4
  # RANGE [3, 288230376151711746] NONZERO 576460752303423487
  _5 = _3 + 3;
  # DEBUG __aD.32232 => &D.30111
  # DEBUG __bD.32233 => &D.30112
  # RANGE [8, 288230376151711746] NONZERO 576460752303423487
  _65 = MAX_EXPR <_5, 8>;
  # .MEM_11 = VDEF <.MEM_1(D)>
  this_10(D)->_M_implD.29139._M_map_sizeD.29142 = _65;
  # DEBUG D#81ptD.0 => this_10(D)
  # DEBUG __nD.32223 => D#125ptD.0
  # DEBUG thisD.32224 => D#81ptD.0
  # DEBUG D#80ptD.0 => D#81ptD.0
  # DEBUG D#55ptD.0 => D#80ptD.0
  # DEBUG thisD.32085 => D#55ptD.0
  # DEBUG D#54ptD.0 => D#55ptD.0
  # DEBUG thisD.31953 => D#54ptD.0
  # DEBUG thisD.31945 => NULL
  # DEBUG D.31946 => NULL
  # DEBUG thisD.31943 => NULL
  # DEBUG D#79ptD.0 => &__map_allocD.32225
  # DEBUG __nD.32227 => D#125ptD.0
  # DEBUG __aD.32226 => D#79ptD.0
  # DEBUG D#78ptD.0 => D#79ptD.0
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG D#77ptD.0 => 0B
  # DEBUG __nD.32230 => D#125ptD.0
  # DEBUG thisD.32228 => D#76ptD.0
  # DEBUG D.32229 => D#77ptD.0
  # DEBUG D#75ptD.0 => D#76ptD.0
  # DEBUG D#74ptD.0 => D#75ptD.0
  # DEBUG thisD.32050 => D#74ptD.0
  # RANGE [64, 2305843009213693968] NONZERO 4611686018427387896
  _26 = _65 * 8;
  # .MEM_34 = VDEF <.MEM_11>
  # PT = { D.32994 } (escaped heap)
  # USE = nonlocal null { D.32994 D.32995 } (escaped heap)
  # CLB = nonlocal null { D.32994 D.32995 } (escaped heap)
  _8 = _ZnwmD.2764 (_26);
  # DEBUG thisD.32098 => &__map_allocD.32225
  # DEBUG thisD.32087 => &__map_allocD.32225
  # .MEM_14 = VDEF <.MEM_34>
  this_10(D)->_M_implD.29139._M_mapD.29141 = _8;
  # VUSE <.MEM_14>
  _15 = this_10(D)->_M_implD.29139._M_map_sizeD.29142;
  # RANGE [0, 18446744073709551615]
  _16 = _15 - __num_nodes_4;
  # RANGE [0, 9223372036854775807] NONZERO 9223372036854775807
  _17 = _16 >> 1;
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _18 = _17 * 8;
  # PT = { D.32994 } (escaped heap)
  __nstart_19 = _8 + _18;
  # DEBUG __nstartD.30113 => __nstart_19
  # RANGE [8, 2305843009213693952] NONZERO 4611686018427387896
  _20 = __num_nodes_4 * 8;
  # PT = { D.32994 } (escaped heap)
  __nfinish_21 = __nstart_19 + _20;
  # DEBUG __nfinishD.30114 => __nfinish_21
  # DEBUG D#93ptD.0 => this_10(D)
  # DEBUG __nstartD.32964 => __nstart_19
  # DEBUG __nfinishD.32965 => __nfinish_21
  # DEBUG thisD.32966 => D#93ptD.0
  # DEBUG __curD.32967 => __nstart_19
  if (__nstart_19 >= __nfinish_21)
    goto <bb 14>;
  else
    goto <bb 3>;
;;    succ:       14 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 430, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 9550, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_71 = PHI <.MEM_14(3), .MEM_60(6)>
  # PT = { D.32994 } (escaped heap)
  # __nstart_75 = PHI <__nstart_19(3), __nstart_53(6)>
  # DEBUG __curD.32967 => __nstart_75
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG thisD.32981 => D#90ptD.0
  # DEBUG D#89ptD.0 => D#90ptD.0
  # DEBUG __sizeD.32158 => 8
  # DEBUG D#88ptD.0 => &D#89ptD.0->_M_implD.29139
  # DEBUG D#87ptD.0 => D#88ptD.0
  # DEBUG __nD.32984 => NULL
  # DEBUG __aD.32983 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#87ptD.0
  # DEBUG D#84ptD.0 => D#86ptD.0
  # DEBUG D#85ptD.0 => 0B
  # DEBUG __nD.32987 => NULL
  # DEBUG thisD.32985 => D#84ptD.0
  # DEBUG D.32986 => D#85ptD.0
  # DEBUG D#83ptD.0 => D#84ptD.0
  # DEBUG D#82ptD.0 => D#83ptD.0
  # DEBUG thisD.32115 => D#82ptD.0
  [LP 3] # .MEM_59 = VDEF <.MEM_71>
  # PT = { D.32995 } (escaped heap)
  # USE = nonlocal null { D.32994 D.32995 } (escaped heap)
  # CLB = nonlocal null { D.32994 D.32995 } (escaped heap)
  _52 = _ZnwmD.2764 (512);
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 (EH,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9550, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_60 = VDEF <.MEM_59>
  *__nstart_75 = _52;
  # PT = { D.32994 } (escaped heap)
  __nstart_53 = __nstart_75 + 8;
  # DEBUG __curD.32967 => __nstart_53
  # DEBUG __curD.32967 => __nstart_53
  if (__nfinish_21 <= __nstart_53)
    goto <bb 14>;
  else
    goto <bb 6>;
;;    succ:       14 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 9120, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       4 (EH,EXECUTABLE)
  # PT = { D.32994 } (escaped heap)
  # __nstart_13 = PHI <__nstart_75(4)>
<L3>: [LP 3]
  # VUSE <.MEM_59>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _54 = __builtin_eh_pointerD.2738 (6);
  # .MEM_61 = VDEF <.MEM_59>
  # USE = nonlocal null { D.32994 D.32995 } (escaped heap)
  # CLB = nonlocal null { D.32994 D.32995 } (escaped heap)
  __cxa_begin_catchD.15339 (_54);
  # DEBUG D#53ptD.0 => D#92ptD.0
  # DEBUG __nstartD.32970 => __nstart_19
  # DEBUG __nfinishD.32969 => __nstart_13
  # DEBUG thisD.32968 => D#53ptD.0
  # DEBUG __nD.32971 => __nstart_19
  if (__nstart_19 >= __nstart_13)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_55 = PHI <.MEM_61(7), .MEM_74(17)>
  [LP 4] # .MEM_63 = VDEF <.MEM_55>
  # USE = nonlocal null { D.32994 D.32995 } (escaped heap)
  # CLB = nonlocal null { D.32994 D.32995 } (escaped heap)
  __cxa_rethrowD.30115 ();
;;    succ:       13 (EH,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       7 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = { D.32994 } (escaped heap)
  # __nstart_72 = PHI <__nstart_19(9), __nstart_57(12)>
  # .MEM_73 = PHI <.MEM_61(9), .MEM_62(12)>
  # DEBUG __nD.32971 => __nstart_72
  # VUSE <.MEM_73>
  # PT = nonlocal escaped { D.32995 } (escaped heap)
  _56 = *__nstart_72;
  # DEBUG thisD.32973 => D#51ptD.0
  # DEBUG __pD.32972 => _56
  # DEBUG __sizeD.31861 => 8
  # DEBUG D#44ptD.0 => &D#52ptD.0->_M_implD.29139
  # DEBUG D#42ptD.0 => D#44ptD.0
  # DEBUG __pD.32977 => _56
  # DEBUG __aD.32975 => D#42ptD.0
  # DEBUG __nD.32976 => D#43ptD.0
  # DEBUG D#41ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#42ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG __pD.32980 => _56
  # DEBUG thisD.32978 => D#38ptD.0
  # DEBUG D.32979 => D#39ptD.0
  # .MEM_62 = VDEF <.MEM_73>
  # USE = nonlocal null { D.32994 D.32995 } (escaped heap)
  # CLB = nonlocal null { D.32994 D.32995 } (escaped heap)
  _ZdlPvD.2766 (_56);
  # PT = { D.32994 } (escaped heap)
  __nstart_57 = __nstart_72 + 8;
  # DEBUG __nD.32971 => __nstart_57
  # DEBUG __nD.32971 => __nstart_57
  if (__nstart_57 >= __nstart_13)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 10, next block 17, flags: (NEW)
;;    pred:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_74 = PHI <.MEM_62(10)>
;;    succ:       17 [100.0%]  (FALLTHRU)

;;   basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 11, next block 12, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 17, next block 13, flags: (NEW)
;;    pred:       10 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       8 (EH,EXECUTABLE)
<L5>: [LP 4]
  [MNT 8] # .MEM_64 = VDEF <.MEM_63>
  # USE = nonlocal null { D.32994 D.32995 } (escaped heap)
  # CLB = nonlocal null { D.32994 D.32995 } (escaped heap)
  __cxa_end_catchD.15338 ();
  [LP 1] resx 7
;;    succ:       15 (EH,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 13, next block 18, flags: (NEW, REACHABLE)
;;    pred:       2 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_58 = PHI <.MEM_14(2), .MEM_60(5)>
;;    succ:       18 [100.0%]  (FALLTHRU)

;;   basic block 18, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 14, next block 15, flags: (NEW)
;;    pred:       14 [100.0%]  (FALLTHRU)
  # DEBUG D#96ptD.0 => &this_10(D)->_M_implD.29139._M_startD.29143
  # DEBUG thisD.32241 => D#96ptD.0
  # DEBUG __new_nodeD.32242 => __nstart_19
  # .MEM_43 = VDEF <.MEM_58>
  MEM[(struct _Deque_iteratorD.29006 *)this_10(D) + 16B]._M_nodeD.29041 = __nstart_19;
  # VUSE <.MEM_43>
  # PT = nonlocal escaped { D.32995 } (escaped heap)
  _24 = *__nstart_19;
  # .MEM_44 = VDEF <.MEM_43>
  MEM[(struct _Deque_iteratorD.29006 *)this_10(D) + 16B]._M_firstD.29039 = _24;
  # DEBUG __sizeD.31764 => 8
  # PT = nonlocal escaped { D.32995 } (escaped heap)
  _42 = _24 + 512;
  # .MEM_45 = VDEF <.MEM_44>
  MEM[(struct _Deque_iteratorD.29006 *)this_10(D) + 16B]._M_lastD.29040 = _42;
  # PT = { D.32994 } (escaped heap)
  _23 = __nfinish_21 + 18446744073709551608;
  # DEBUG D#95ptD.0 => &this_10(D)->_M_implD.29139._M_finishD.29144
  # DEBUG thisD.32239 => D#95ptD.0
  # DEBUG __new_nodeD.32240 => _23
  # .MEM_46 = VDEF <.MEM_45>
  MEM[(struct _Deque_iteratorD.29006 *)this_10(D) + 48B]._M_nodeD.29041 = _23;
  # VUSE <.MEM_46>
  # PT = nonlocal escaped { D.32995 } (escaped heap)
  _40 = MEM[(struct PacketReplyInfoD.28726 * * *)__nfinish_21 + -8B];
  # .MEM_47 = VDEF <.MEM_46>
  MEM[(struct _Deque_iteratorD.29006 *)this_10(D) + 48B]._M_firstD.29039 = _40;
  # DEBUG __sizeD.31764 => 8
  # PT = nonlocal escaped { D.32995 } (escaped heap)
  _41 = _40 + 512;
  # .MEM_48 = VDEF <.MEM_47>
  MEM[(struct _Deque_iteratorD.29006 *)this_10(D) + 48B]._M_lastD.29040 = _41;
  # .MEM_25 = VDEF <.MEM_48>
  this_10(D)->_M_implD.29139._M_startD.29143._M_curD.29038 = _24;
  # DEBUG __sizeD.32237 => 8
  # RANGE [0, 63] NONZERO 63
  _27 = __num_elements_2(D) & 63;
  # RANGE [0, 504] NONZERO 504
  _28 = _27 * 8;
  # PT = nonlocal escaped { D.32995 } (escaped heap)
  _29 = _40 + _28;
  # .MEM_30 = VDEF <.MEM_25>
  this_10(D)->_M_implD.29139._M_finishD.29144._M_curD.29038 = _29;
  # VUSE <.MEM_30>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 18, next block 16, flags: (NEW, REACHABLE)
;;    pred:       13 (EH,EXECUTABLE)
<L0>: [LP 1]
  # VUSE <.MEM_64>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _31 = __builtin_eh_pointerD.2738 (3);
  # .MEM_32 = VDEF <.MEM_64>
  # USE = nonlocal null { D.32994 D.32995 } (escaped heap)
  # CLB = nonlocal null { D.32994 D.32995 } (escaped heap)
  __cxa_begin_catchD.15339 (_31);
  # DEBUG D#94ptD.0 => this_10(D)->_M_implD.29139._M_map_sizeD.29142
  # VUSE <.MEM_32>
  # PT = nonlocal escaped 
  _33 = this_10(D)->_M_implD.29139._M_mapD.29141;
  # DEBUG D#58ptD.0 => this_10(D)
  # DEBUG D#59ptD.0 => D#94ptD.0
  # DEBUG __pD.32243 => _33
  # DEBUG thisD.32245 => D#58ptD.0
  # DEBUG __nD.32244 => D#59ptD.0
  # DEBUG D#57ptD.0 => D#59ptD.0
  # DEBUG D#56ptD.0 => D#58ptD.0
  # DEBUG D#55ptD.0 => D#56ptD.0
  # DEBUG thisD.31965 => D#55ptD.0
  # DEBUG D#54ptD.0 => D#55ptD.0
  # DEBUG thisD.31953 => D#54ptD.0
  # DEBUG thisD.31945 => NULL
  # DEBUG D.31946 => NULL
  # DEBUG thisD.31943 => NULL
  # DEBUG D#36ptD.0 => &__map_allocD.32246
  # DEBUG D#37ptD.0 => D#57ptD.0
  # DEBUG __pD.32249 => _33
  # DEBUG __aD.32247 => D#36ptD.0
  # DEBUG __nD.32248 => D#37ptD.0
  # DEBUG D#35ptD.0 => D#37ptD.0
  # DEBUG D#34ptD.0 => D#36ptD.0
  # DEBUG D#32ptD.0 => D#34ptD.0
  # DEBUG D#33ptD.0 => D#35ptD.0
  # DEBUG __pD.32252 => _33
  # DEBUG thisD.32250 => D#32ptD.0
  # DEBUG D.32251 => D#33ptD.0
  # .MEM_49 = VDEF <.MEM_32>
  # USE = nonlocal null { D.32994 D.32995 } (escaped heap)
  # CLB = nonlocal null { D.32994 D.32995 } (escaped heap)
  _ZdlPvD.2766 (_33);
  # DEBUG thisD.31979 => &__map_allocD.32246
  # DEBUG thisD.31958 => &__map_allocD.32246
  # .MEM_35 = VDEF <.MEM_49>
  this_10(D)->_M_implD.29139._M_mapD.29141 = 0B;
  # .MEM_36 = VDEF <.MEM_35>
  this_10(D)->_M_implD.29139._M_map_sizeD.29142 = 0;
  [LP 2] # .MEM_37 = VDEF <.MEM_36>
  # USE = nonlocal null { D.32994 D.32995 } (escaped heap)
  # CLB = nonlocal null { D.32994 D.32995 } (escaped heap)
  __cxa_rethrowD.30115 ();
;;    succ:       16 (EH,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 15, next block 1, flags: (NEW, REACHABLE)
;;    pred:       15 (EH,EXECUTABLE)
<L2>: [LP 2]
  [MNT 5] # .MEM_38 = VDEF <.MEM_37>
  # USE = nonlocal null { D.32994 D.32995 } (escaped heap)
  # CLB = nonlocal null { D.32994 D.32995 } (escaped heap)
  __cxa_end_catchD.15338 ();
  resx 4
;;    succ:      

}



;; Function std::deque<_Tp, _Alloc>::deque(const std::deque<_Tp, _Alloc>&) [with _Tp = PacketReplyInfo*; _Alloc = std::allocator<PacketReplyInfo*>] (_ZNSt5dequeIP15PacketReplyInfoSaIS1_EEC2ERKS3_, funcdef_no=1554, decl_uid=29659, cgraph_uid=362, symbol_order=365)


Pass statistics:
----------------

std::deque<_Tp, _Alloc>::deque(const std::deque<_Tp, _Alloc>&) [with _Tp = PacketReplyInfo*; _Alloc = std::allocator<PacketReplyInfo*>] (struct dequeD.28737 * const thisD.29660, const struct dequeD.28737 & __xD.29661)
{
  struct PacketReplyInfoD.28726 * * * __first$_M_nodeD.33112;
  struct PacketReplyInfoD.28726 * * __first$_M_lastD.33111;
  struct PacketReplyInfoD.28726 * * const __firstD.33109;
  struct PacketReplyInfoD.28726 * * * SR.222D.33108;
  struct PacketReplyInfoD.28726 * * SR.221D.33107;
  struct PacketReplyInfoD.28726 * * SR.220D.33106;
  struct PacketReplyInfoD.28726 * * * __first$24D.33105;
  struct PacketReplyInfoD.28726 * * __first$16D.33104;
  struct PacketReplyInfoD.28726 * * __first$8D.33103;
  struct PacketReplyInfoD.28726 * * __firstD.33102;
  _DistanceD.30924 __nD.33088;
  struct _Deque_iteratorD.29008 __firstD.33082;
  struct _Deque_iteratorD.29008 __lastD.33083;
  struct _Deque_iteratorD.29008 __lastD.33063;
  struct _Deque_iteratorD.29008 __firstD.33064;
  struct _Deque_iteratorD.29006 D.33081;
  struct PacketReplyInfoD.28726 * * __itD.33080;
  struct PacketReplyInfoD.28726 * * __it$8D.33079;
  struct PacketReplyInfoD.28726 * * __it$16D.33078;
  struct PacketReplyInfoD.28726 * * * __it$24D.33076;
  struct PacketReplyInfoD.28726 * * __itD.33075;
  struct PacketReplyInfoD.28726 * * __it$8D.33074;
  struct PacketReplyInfoD.28726 * * __it$16D.33073;
  struct PacketReplyInfoD.28726 * * * __it$24D.33071;
  struct _Deque_iteratorD.29008 __firstD.33057;
  struct _Deque_iteratorD.29008 __lastD.33058;
  struct _Deque_iteratorD.29006 D.33056;
  struct _Deque_iteratorD.29008 D.33055;
  struct _Deque_iteratorD.29008 D.33054;
  struct PacketReplyInfoD.28726 * * __itD.33053;
  struct PacketReplyInfoD.28726 * * __it$8D.33052;
  struct PacketReplyInfoD.28726 * * __it$16D.33051;
  struct PacketReplyInfoD.28726 * * * __it$24D.33050;
  struct PacketReplyInfoD.28726 * * __itD.33049;
  struct PacketReplyInfoD.28726 * * __it$8D.33048;
  struct PacketReplyInfoD.28726 * * __it$16D.33047;
  struct PacketReplyInfoD.28726 * * * __it$24D.33046;
  struct _Deque_iteratorD.29008 __firstD.33037;
  struct _Deque_iteratorD.29008 __lastD.33038;
  struct _Deque_iteratorD.29008 __lastD.33032;
  struct _Deque_iteratorD.29008 __firstD.33033;
  struct _Deque_iteratorD.29006 D.33036;
  struct _Deque_iteratorD.29008 __firstD.33023;
  struct _Deque_iteratorD.29008 __lastD.33024;
  struct _Deque_iteratorD.29006 D.33022;
  struct _Deque_iteratorD.29006 D.33021;
  struct _Deque_iteratorD.29008 __firstD.33015;
  struct _Deque_iteratorD.29008 __lastD.33016;
  struct _Deque_iteratorD.29008 D.31339;
  struct _Deque_iteratorD.29008 D.31338;
  struct _Deque_iteratorD.29006 D.30067;
  struct _Deque_baseD.28773 * _7;
  struct PacketReplyInfoD.28726 * * _9;
  struct PacketReplyInfoD.28726 * * _10;
  struct PacketReplyInfoD.28726 * * _13;
  struct PacketReplyInfoD.28726 * * * _15;
  struct PacketReplyInfoD.28726 * * _17;
  struct PacketReplyInfoD.28726 * * * _18;
  struct PacketReplyInfoD.28726 * * * _19;
  long intD.12 _20;
  struct PacketReplyInfoD.28726 * * * _21;
  long intD.12 _22;
  long intD.12 _23;
  long intD.12 _24;
  long intD.12 _25;
  long intD.12 _26;
  struct PacketReplyInfoD.28726 * * _27;
  long intD.12 _28;
  struct PacketReplyInfoD.28726 * * _29;
  long intD.12 _30;
  long intD.12 _31;
  long intD.12 _32;
  long intD.12 _33;
  struct PacketReplyInfoD.28726 * * _34;
  long intD.12 _35;
  struct PacketReplyInfoD.28726 * * _36;
  long intD.12 _37;
  long intD.12 _38;
  long intD.12 _39;
  difference_typeD.29036 _40;
  size_typeD.29215 _41;
  long intD.12 _97;
  long intD.12 _99;
  long intD.12 _100;
  long intD.12 _101;
  long intD.12 _102;
  long intD.12 _103;
  long intD.12 _105;
  long intD.12 _107;
  long intD.12 _108;
  long intD.12 _109;
  long intD.12 _110;
  long intD.12 _112;
  long intD.12 _114;
  long intD.12 _115;
  long intD.12 _116;
  struct PacketReplyInfoD.28726 * _121;
  struct PacketReplyInfoD.28726 * * _126;
  struct PacketReplyInfoD.28726 * * * _138;
  struct PacketReplyInfoD.28726 * * _139;
  struct PacketReplyInfoD.28726 * * _140;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.32705 => __x_2(D)
  # DEBUG D#30ptD.0 => &__x_2(D)->D.29688._M_implD.29139._M_startD.29143
  # DEBUG D#31ptD.0 => &__x_2(D)->D.29688._M_implD.29139._M_finishD.29144
  # DEBUG __xD.32707 => D#31ptD.0
  # DEBUG __yD.32706 => D#30ptD.0
  # DEBUG __sizeD.31764 => 8
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _19 = MEM[(const struct _Deque_iteratorD.29006 &)__x_2(D) + 48]._M_nodeD.29041;
  _20 = (long intD.12) _19;
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _21 = MEM[(const struct _Deque_iteratorD.29006 &)__x_2(D) + 16]._M_nodeD.29041;
  _22 = (long intD.12) _21;
  _23 = _20 - _22;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _24 = _23 /[ex] 8;
  # RANGE [-1152921504606846977, 1152921504606846974]
  _25 = _24 + -1;
  # RANGE [-9223372036854775808, 9223372036854775807] NONZERO 18446744073709551552
  _26 = _25 * 64;
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _27 = MEM[(const struct _Deque_iteratorD.29006 &)__x_2(D) + 48]._M_curD.29038;
  _28 = (long intD.12) _27;
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _29 = MEM[(const struct _Deque_iteratorD.29006 &)__x_2(D) + 48]._M_firstD.29039;
  _30 = (long intD.12) _29;
  _31 = _28 - _30;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _32 = _31 /[ex] 8;
  _33 = _26 + _32;
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _34 = MEM[(const struct _Deque_iteratorD.29006 &)__x_2(D) + 16]._M_lastD.29040;
  _35 = (long intD.12) _34;
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _36 = MEM[(const struct _Deque_iteratorD.29006 &)__x_2(D) + 16]._M_curD.29038;
  _37 = (long intD.12) _36;
  _38 = _35 - _37;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _39 = _38 /[ex] 8;
  _40 = _33 + _39;
  # RANGE [0, 18446744073709551615]
  _41 = (size_typeD.29215) _40;
  # DEBUG D#112ptD.0 => &__x_2(D)->D.29688
  # DEBUG thisD.32703 => D#112ptD.0
  # DEBUG __aD.32701 => NULL
  # PT = nonlocal 
  _7 = &this_6(D)->D.29688;
  # DEBUG thisD.32693 => _7
  # DEBUG __aD.32694 => NULL
  # DEBUG __num_elementsD.32695 => _41
  # DEBUG D#100ptD.0 => &_7->_M_implD.29139
  # DEBUG thisD.32698 => D#100ptD.0
  # DEBUG __aD.32697 => NULL
  # DEBUG thisD.32041 => D#100ptD.0
  # DEBUG __aD.32042 => NULL
  # DEBUG thisD.32036 => D#100ptD.0
  # DEBUG D.32037 => NULL
  # .MEM_42 = VDEF <.MEM_1(D)>
  MEM[(struct _Deque_implD.29107 *)this_6(D)]._M_mapD.29141 = 0B;
  # .MEM_43 = VDEF <.MEM_42>
  MEM[(struct _Deque_implD.29107 *)this_6(D)]._M_map_sizeD.29142 = 0;
  # DEBUG D#73ptD.0 => &D#100ptD.0->_M_startD.29143
  # DEBUG thisD.32699 => D#73ptD.0
  # .MEM_44 = VDEF <.MEM_43>
  MEM[(struct _Deque_iteratorD.29006 *)this_6(D) + 16B]._M_curD.29038 = 0B;
  # .MEM_45 = VDEF <.MEM_44>
  MEM[(struct _Deque_iteratorD.29006 *)this_6(D) + 16B]._M_firstD.29039 = 0B;
  # .MEM_46 = VDEF <.MEM_45>
  MEM[(struct _Deque_iteratorD.29006 *)this_6(D) + 16B]._M_lastD.29040 = 0B;
  # .MEM_47 = VDEF <.MEM_46>
  MEM[(struct _Deque_iteratorD.29006 *)this_6(D) + 16B]._M_nodeD.29041 = 0B;
  # DEBUG D#72ptD.0 => &D#100ptD.0->_M_finishD.29144
  # DEBUG thisD.32700 => D#72ptD.0
  # .MEM_48 = VDEF <.MEM_47>
  MEM[(struct _Deque_iteratorD.29006 *)this_6(D) + 48B]._M_curD.29038 = 0B;
  # .MEM_49 = VDEF <.MEM_48>
  MEM[(struct _Deque_iteratorD.29006 *)this_6(D) + 48B]._M_firstD.29039 = 0B;
  # .MEM_50 = VDEF <.MEM_49>
  MEM[(struct _Deque_iteratorD.29006 *)this_6(D) + 48B]._M_lastD.29040 = 0B;
  # .MEM_51 = VDEF <.MEM_50>
  MEM[(struct _Deque_iteratorD.29006 *)this_6(D) + 48B]._M_nodeD.29041 = 0B;
  # .MEM_52 = VDEF <.MEM_51>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZNSt11_Deque_baseIP15PacketReplyInfoSaIS1_EE17_M_initialize_mapEmD.29126 (_7, _41);
  # DEBUG D#113ptD.0 => &this_6(D)->D.29688
  # DEBUG thisD.32691 => D#113ptD.0
  # DEBUG D#114ptD.0 => &this_6(D)->D.29688._M_implD.29139._M_startD.29143
  # DEBUG thisD.32689 => &D.30067
  # DEBUG __xD.32690 => D#114ptD.0
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _9 = MEM[(const struct iteratorD.29026 &)this_6(D) + 16]._M_curD.29038;
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _17 = MEM[(const struct iteratorD.29026 &)this_6(D) + 16]._M_lastD.29040;
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _18 = MEM[(const struct iteratorD.29026 &)this_6(D) + 16]._M_nodeD.29041;
  # DEBUG thisD.32686 => __x_2(D)
  # DEBUG D#14ptD.0 => &__x_2(D)->D.29688._M_implD.29139._M_finishD.29144
  # DEBUG thisD.32688 => &D.31338
  # DEBUG __xD.32687 => D#14ptD.0
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _10 = MEM[(const struct iteratorD.29960 &)__x_2(D) + 48]._M_curD.29038;
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _13 = MEM[(const struct iteratorD.29960 &)__x_2(D) + 48]._M_firstD.29039;
  # DEBUG D#126ptD.0 => MEM[(const struct iteratorD.29960 &)__x_2(D) + 48]._M_lastD.29040
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _15 = MEM[(const struct iteratorD.29960 &)__x_2(D) + 48]._M_nodeD.29041;
  # DEBUG thisD.32683 => __x_2(D)
  # DEBUG D#15ptD.0 => &__x_2(D)->D.29688._M_implD.29139._M_startD.29143
  # DEBUG thisD.32685 => &D.31339
  # DEBUG __xD.32684 => D#15ptD.0
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  __first_8 = MEM[(const struct iteratorD.29960 &)__x_2(D) + 16]._M_curD.29038;
  # DEBUG D#127ptD.0 => MEM[(const struct iteratorD.29960 &)__x_2(D) + 16]._M_firstD.29039
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  __first$_M_last_4 = MEM[(const struct iteratorD.29960 &)__x_2(D) + 16]._M_lastD.29040;
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  __first$_M_node_3 = MEM[(const struct iteratorD.29960 &)__x_2(D) + 16]._M_nodeD.29041;
  # DEBUG __resultD.33017 => &D.30067
  # DEBUG D.33018 => D#111ptD.0
  # DEBUG thisD.33020 => &D.33022
  # DEBUG __xD.33019 => &D.30067
  # DEBUG __resultD.33025 => &D.33022
  # DEBUG __assignableD.33028 => 1
  # DEBUG thisD.33030 => NULL
  # DEBUG __xD.33029 => &D.33022
  # DEBUG __resultD.33031 => NULL
  # DEBUG thisD.33035 => &D.33036
  # DEBUG __xD.33034 => NULL
  # DEBUG __resultD.33039 => &D.33036
  # DEBUG thisD.33041 => &D.33056
  # DEBUG __xD.33040 => &D.33036
  # DEBUG __itD.33049 => _10
  # DEBUG __it$8D.33048 => _13
  # DEBUG __it$16D.33047 => D#126ptD.0
  # DEBUG __it$24D.33046 => _15
  # DEBUG __it$_M_curD.32636 => _10
  # DEBUG __it$_M_firstD.32635 => _13
  # DEBUG __it$_M_lastD.32634 => D#126ptD.0
  # DEBUG __it$_M_nodeD.32633 => _15
  # DEBUG __itD.33053 => __first_8
  # DEBUG __it$8D.33052 => D#127ptD.0
  # DEBUG __it$16D.33051 => __first$_M_last_4
  # DEBUG __it$24D.33050 => __first$_M_node_3
  # DEBUG __it$_M_curD.32630 => __first_8
  # DEBUG __it$_M_firstD.32629 => D#127ptD.0
  # DEBUG __it$_M_lastD.32628 => __first$_M_last_4
  # DEBUG __it$_M_nodeD.32627 => __first$_M_node_3
  # DEBUG __resultD.33059 => &D.33056
  # DEBUG thisD.33061 => NULL
  # DEBUG __xD.33060 => &D.33056
  # DEBUG __itD.32591 => NULL
  # DEBUG thisD.32593 => NULL
  # DEBUG __xD.32592 => NULL
  # DEBUG __itD.32594 => NULL
  # DEBUG thisD.32596 => NULL
  # DEBUG __xD.32595 => NULL
  # DEBUG __itD.33075 => _10
  # DEBUG __it$8D.33074 => _13
  # DEBUG __it$16D.33073 => D#126ptD.0
  # DEBUG __it$24D.33071 => _15
  # DEBUG __it$_M_curD.32590 => _10
  # DEBUG __it$_M_firstD.32589 => _13
  # DEBUG __it$_M_lastD.32588 => D#126ptD.0
  # DEBUG __it$_M_nodeD.32587 => _15
  # DEBUG __itD.33080 => __first_8
  # DEBUG __it$8D.33079 => D#127ptD.0
  # DEBUG __it$16D.33078 => __first$_M_last_4
  # DEBUG __it$24D.33076 => __first$_M_node_3
  # DEBUG __it$_M_curD.32584 => __first_8
  # DEBUG __it$_M_firstD.32583 => D#127ptD.0
  # DEBUG __it$_M_lastD.32582 => __first$_M_last_4
  # DEBUG __it$_M_nodeD.32581 => __first$_M_node_3
  # DEBUG __firstD.33102 => __first_8
  # DEBUG __first$8D.33103 => D#127ptD.0
  # DEBUG __first$16D.33104 => __first$_M_last_4
  # DEBUG __first$24D.33105 => __first$_M_node_3
  # DEBUG __resultD.33062 => NULL
  # DEBUG __simpleD.33068 => 0
  # DEBUG thisD.33070 => &D.33081
  # DEBUG __xD.33069 => NULL
  # DEBUG __firstD.33109 => __first_8
  # DEBUG __first$_M_firstD.33110 => D#127ptD.0
  # DEBUG __first$_M_lastD.33111 => __first$_M_last_4
  # DEBUG __first$_M_nodeD.33112 => __first$_M_node_3
  # DEBUG __resultD.33084 => &D.33081
  # DEBUG __xD.33092 => &__lastD.33083
  # DEBUG __yD.33091 => &__firstD.33082
  # DEBUG __sizeD.32532 => 8
  _97 = (long intD.12) _15;
  _99 = (long intD.12) __first$_M_node_3;
  _100 = _97 - _99;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _101 = _100 /[ex] 8;
  # RANGE [-1152921504606846977, 1152921504606846974]
  _102 = _101 + -1;
  # RANGE [-9223372036854775808, 9223372036854775807] NONZERO 18446744073709551552
  _103 = _102 * 64;
  _105 = (long intD.12) _10;
  _107 = (long intD.12) _13;
  _108 = _105 - _107;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _109 = _108 /[ex] 8;
  _110 = _103 + _109;
  _112 = (long intD.12) __first$_M_last_4;
  _114 = (long intD.12) __first_8;
  _115 = _112 - _114;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _116 = _115 /[ex] 8;
  __n_117 = _110 + _116;
  # DEBUG __nD.33088 => __n_117
  # DEBUG __nD.33088 => __n_117
  if (__n_117 <= 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_5 = PHI <.MEM_52(2), .MEM_56(10)>
  # DEBUG thisD.33087 => &D.33021
  # DEBUG __xD.33086 => &D.33081
  # .MEM_203 = VDEF <.MEM_5>
  D.33081 ={v} {CLOBBER};
  # .MEM_204 = VDEF <.MEM_203>
  D.33056 ={v} {CLOBBER};
  # .MEM_205 = VDEF <.MEM_204>
  D.33036 ={v} {CLOBBER};
  # .MEM_206 = VDEF <.MEM_205>
  D.33022 ={v} {CLOBBER};
  # .MEM_12 = VDEF <.MEM_206>
  D.30067 ={v} {CLOBBER};
  # VUSE <.MEM_12>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # __n_54 = PHI <__n_117(4), __n_128(11)>
  # .MEM_55 = PHI <.MEM_52(4), .MEM_188(11)>
  # PT = nonlocal escaped 
  # SR.220_198 = PHI <_9(4), SR.220_197(11)>
  # PT = nonlocal escaped 
  # SR.221_195 = PHI <_17(4), SR.221_194(11)>
  # PT = nonlocal escaped 
  # SR.222_193 = PHI <_18(4), SR.222_192(11)>
  # PT = nonlocal escaped 
  # __first_190 = PHI <__first_8(4), __first_189(11)>
  # PT = nonlocal escaped 
  # __first$_M_last_186 = PHI <__first$_M_last_4(4), __first$_M_last_185(11)>
  # PT = nonlocal escaped 
  # __first$_M_node_184 = PHI <__first$_M_node_3(4), __first$_M_node_182(11)>
  # DEBUG __first$_M_nodeD.33112 => __first$_M_node_184
  # DEBUG __first$_M_lastD.33111 => __first$_M_last_186
  # DEBUG __firstD.33109 => __first_190
  # DEBUG __nD.33088 => __n_54
  # DEBUG D#13ptD.0 => &D.33081
  # DEBUG thisD.32559 => D#13ptD.0
  # DEBUG D#110ptD.0 => &__firstD.33082
  # DEBUG thisD.32556 => D#110ptD.0
  # VUSE <.MEM_55>
  # PT = nonlocal escaped 
  _121 = MEM[(struct PacketReplyInfoD.28726 * const &)__first_190];
  # .MEM_188 = VDEF <.MEM_55>
  *SR.220_198 = _121;
  # DEBUG thisD.33089 => &__firstD.33082
  # PT = nonlocal escaped 
  __first_123 = __first_190 + 8;
  # DEBUG __firstD.33109 => __first_123
  if (__first_123 == __first$_M_last_186)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [6.7%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [93.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 612, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [6.7%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.33093 => &__firstD.33082
  # PT = nonlocal escaped 
  __first$_M_node_134 = __first$_M_node_184 + 8;
  # DEBUG thisD.33095 => &__firstD.33082
  # DEBUG __new_nodeD.33094 => __first$_M_node_134
  # DEBUG __first$_M_nodeD.33112 => __first$_M_node_134
  # VUSE <.MEM_188>
  # PT = nonlocal escaped 
  __first_135 = MEM[(struct PacketReplyInfoD.28726 * * *)__first$_M_node_184 + 8B];
  # DEBUG __sizeD.32532 => 8
  # PT = nonlocal escaped 
  __first$_M_last_136 = __first_135 + 512;
  # DEBUG __first$_M_lastD.33111 => __first$_M_last_136
  # DEBUG __firstD.33109 => __first_135
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       5 [93.3%]  (FALSE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_189 = PHI <__first_123(5), __first_135(6)>
  # PT = nonlocal escaped 
  # __first$_M_last_185 = PHI <__first$_M_last_186(5), __first$_M_last_136(6)>
  # PT = nonlocal escaped 
  # __first$_M_node_182 = PHI <__first$_M_node_184(5), __first$_M_node_134(6)>
  # DEBUG __first$_M_nodeD.33112 => __first$_M_node_182
  # DEBUG __first$_M_lastD.33111 => __first$_M_last_185
  # DEBUG __firstD.33109 => __first_189
  # DEBUG thisD.33090 => &D.33081
  # PT = nonlocal escaped 
  _126 = SR.220_198 + 8;
  if (_126 == SR.221_195)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [6.7%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [93.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 612, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [6.7%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.33097 => &D.33081
  # PT = nonlocal escaped 
  _138 = SR.222_193 + 8;
  # DEBUG thisD.33099 => &D.33081
  # DEBUG __new_nodeD.33098 => _138
  # VUSE <.MEM_188>
  # PT = nonlocal escaped 
  _139 = MEM[(struct PacketReplyInfoD.28726 * * *)SR.222_193 + 8B];
  # DEBUG __sizeD.31764 => 8
  # PT = nonlocal escaped 
  _140 = _139 + 512;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       7 [93.3%]  (FALSE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # SR.220_197 = PHI <_126(7), _139(8)>
  # PT = nonlocal escaped 
  # SR.221_194 = PHI <SR.221_195(7), _140(8)>
  # PT = nonlocal escaped 
  # SR.222_192 = PHI <SR.222_193(7), _138(8)>
  # RANGE [0, 9223372036854775806] NONZERO 9223372036854775807
  __n_128 = __n_54 + -1;
  # DEBUG __nD.33088 => __n_128
  # DEBUG __nD.33088 => __n_128
  if (__n_128 <= 0)
    goto <bb 10>;
  else
    goto <bb 11>;
;;    succ:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_56 = PHI <.MEM_188(9)>
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 10, next block 1, flags: (NEW)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

}


Creating dr for MEM[(const struct _Deque_iterator &)__x_2(D) + 48]._M_node
analyze_innermost: success.
	base_address: __x_2(D)
	offset from base address: 0
	constant offset from base address: 72
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)__x_2(D) + 48]
	Access function 0: 192
Creating dr for MEM[(const struct _Deque_iterator &)__x_2(D) + 16]._M_node
analyze_innermost: success.
	base_address: __x_2(D)
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)__x_2(D) + 16]
	Access function 0: 192
Creating dr for MEM[(const struct _Deque_iterator &)__x_2(D) + 48]._M_cur
analyze_innermost: success.
	base_address: __x_2(D)
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)__x_2(D) + 48]
	Access function 0: 0
Creating dr for MEM[(const struct _Deque_iterator &)__x_2(D) + 48]._M_first
analyze_innermost: success.
	base_address: __x_2(D)
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)__x_2(D) + 48]
	Access function 0: 64
Creating dr for MEM[(const struct _Deque_iterator &)__x_2(D) + 16]._M_last
analyze_innermost: success.
	base_address: __x_2(D)
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)__x_2(D) + 16]
	Access function 0: 128
Creating dr for MEM[(const struct _Deque_iterator &)__x_2(D) + 16]._M_cur
analyze_innermost: success.
	base_address: __x_2(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)__x_2(D) + 16]
	Access function 0: 0
Creating dr for MEM[(struct _Deque_impl *)this_6(D)]._M_map
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_impl *)this_6(D)]
	Access function 0: 0
Creating dr for MEM[(struct _Deque_impl *)this_6(D)]._M_map_size
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_impl *)this_6(D)]
	Access function 0: 64
Creating dr for MEM[(struct _Deque_iterator *)this_6(D) + 16B]._M_cur
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_6(D) + 16B]
	Access function 0: 0
Creating dr for MEM[(struct _Deque_iterator *)this_6(D) + 16B]._M_first
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_6(D) + 16B]
	Access function 0: 64
Creating dr for MEM[(struct _Deque_iterator *)this_6(D) + 16B]._M_last
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_6(D) + 16B]
	Access function 0: 128
Creating dr for MEM[(struct _Deque_iterator *)this_6(D) + 16B]._M_node
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_6(D) + 16B]
	Access function 0: 192
Creating dr for MEM[(struct _Deque_iterator *)this_6(D) + 48B]._M_cur
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_6(D) + 48B]
	Access function 0: 0
Creating dr for MEM[(struct _Deque_iterator *)this_6(D) + 48B]._M_first
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_6(D) + 48B]
	Access function 0: 64
Creating dr for MEM[(struct _Deque_iterator *)this_6(D) + 48B]._M_last
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 64
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_6(D) + 48B]
	Access function 0: 128
Creating dr for MEM[(struct _Deque_iterator *)this_6(D) + 48B]._M_node
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 72
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_6(D) + 48B]
	Access function 0: 192
Creating dr for MEM[(struct PacketReplyInfo * const &)__first_190]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * const &)__first_190]
Creating dr for MEM[(struct PacketReplyInfo * const &)__first_190]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * const &)__first_190]
Creating dr for *SR.220_198
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *SR.220_198
Creating dr for *SR.220_198
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *SR.220_198
Creating dr for MEM[(struct PacketReplyInfo * const &)__first_190]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * const &)__first_190]
Creating dr for MEM[(struct PacketReplyInfo * const &)__first_190]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * const &)__first_190]
Creating dr for *SR.220_198
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *SR.220_198
Creating dr for *SR.220_198
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *SR.220_198
Creating dr for MEM[(struct PacketReplyInfo * * *)__first$_M_node_184 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * * *)__first$_M_node_184 + 8B]
Creating dr for MEM[(struct PacketReplyInfo * * *)__first$_M_node_184 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * * *)__first$_M_node_184 + 8B]
Creating dr for MEM[(struct PacketReplyInfo * * *)SR.222_193 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * * *)SR.222_193 + 8B]
Creating dr for MEM[(struct PacketReplyInfo * * *)SR.222_193 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * * *)SR.222_193 + 8B]
Analyzing # of iterations of loop 1
  exit condition 0 < [__n_117 + -1, + , -1](no_overflow)
  bounds on difference of bases: 0 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations (unsigned long) (__n_117 + -1), bounded by 9223372036854775806
Analyzing # of iterations of loop 1
  exit condition 0 < [__n_117 + -1, + , -1](no_overflow)
  bounds on difference of bases: 0 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations (unsigned long) (__n_117 + -1), bounded by 9223372036854775806
Creating dr for MEM[(struct PacketReplyInfo * const &)__first_190]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * const &)__first_190]
Creating dr for MEM[(struct PacketReplyInfo * const &)__first_190]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * const &)__first_190]
Creating dr for *SR.220_198
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *SR.220_198
Creating dr for *SR.220_198
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *SR.220_198
Creating dr for MEM[(struct PacketReplyInfo * const &)__first_190]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * const &)__first_190]
Creating dr for MEM[(struct PacketReplyInfo * const &)__first_190]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * const &)__first_190]
Creating dr for *SR.220_198
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *SR.220_198
Creating dr for *SR.220_198
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *SR.220_198
Creating dr for MEM[(struct PacketReplyInfo * * *)__first$_M_node_184 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * * *)__first$_M_node_184 + 8B]
Creating dr for MEM[(struct PacketReplyInfo * * *)__first$_M_node_184 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * * *)__first$_M_node_184 + 8B]
Creating dr for MEM[(struct PacketReplyInfo * * *)SR.222_193 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * * *)SR.222_193 + 8B]
Creating dr for MEM[(struct PacketReplyInfo * * *)SR.222_193 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct PacketReplyInfo * * *)SR.222_193 + 8B]
Analyzing # of iterations of loop 1
  exit condition 0 < [__n_117 + -1, + , -1](no_overflow)
  bounds on difference of bases: 0 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations (unsigned long) (__n_117 + -1), bounded by 9223372036854775806

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:10)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:7)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:13, LOOPS:1, CONDITIONS:4, STMTS:221)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # DEBUG this => __x_2(D)
    # DEBUG D#30 => &__x_2(D)->D.29688._M_impl._M_start
    # DEBUG D#31 => &__x_2(D)->D.29688._M_impl._M_finish
    # DEBUG __x => D#31
    # DEBUG __y => D#30
    # DEBUG __size => 8
    # VUSE <.MEM_1(D)>
    _19 = MEM[(const struct _Deque_iterator &)__x_2(D) + 48]._M_node;
    _20 = (long int) _19;
    # VUSE <.MEM_1(D)>
    _21 = MEM[(const struct _Deque_iterator &)__x_2(D) + 16]._M_node;
    _22 = (long int) _21;
    _23 = _20 - _22;
    _24 = _23 /[ex] 8;
    _25 = _24 + -1;
    _26 = _25 * 64;
    # VUSE <.MEM_1(D)>
    _27 = MEM[(const struct _Deque_iterator &)__x_2(D) + 48]._M_cur;
    _28 = (long int) _27;
    # VUSE <.MEM_1(D)>
    _29 = MEM[(const struct _Deque_iterator &)__x_2(D) + 48]._M_first;
    _30 = (long int) _29;
    _31 = _28 - _30;
    _32 = _31 /[ex] 8;
    _33 = _26 + _32;
    # VUSE <.MEM_1(D)>
    _34 = MEM[(const struct _Deque_iterator &)__x_2(D) + 16]._M_last;
    _35 = (long int) _34;
    # VUSE <.MEM_1(D)>
    _36 = MEM[(const struct _Deque_iterator &)__x_2(D) + 16]._M_cur;
    _37 = (long int) _36;
    _38 = _35 - _37;
    _39 = _38 /[ex] 8;
    _40 = _33 + _39;
    _41 = (size_type) _40;
    # DEBUG D#112 => &__x_2(D)->D.29688
    # DEBUG this => D#112
    # DEBUG __a => NULL
    _7 = &this_6(D)->D.29688;
    # DEBUG this => _7
    # DEBUG __a => NULL
    # DEBUG __num_elements => _41
    # DEBUG D#100 => &_7->_M_impl
    # DEBUG this => D#100
    # DEBUG __a => NULL
    # DEBUG this => D#100
    # DEBUG __a => NULL
    # DEBUG this => D#100
    # DEBUG D.32037 => NULL
    # .MEM_42 = VDEF <.MEM_1(D)>
    MEM[(struct _Deque_impl *)this_6(D)]._M_map = 0B;
    # .MEM_43 = VDEF <.MEM_42>
    MEM[(struct _Deque_impl *)this_6(D)]._M_map_size = 0;
    # DEBUG D#73 => &D#100->_M_start
    # DEBUG this => D#73
    # .MEM_44 = VDEF <.MEM_43>
    MEM[(struct _Deque_iterator *)this_6(D) + 16B]._M_cur = 0B;
    # .MEM_45 = VDEF <.MEM_44>
    MEM[(struct _Deque_iterator *)this_6(D) + 16B]._M_first = 0B;
    # .MEM_46 = VDEF <.MEM_45>
    MEM[(struct _Deque_iterator *)this_6(D) + 16B]._M_last = 0B;
    # .MEM_47 = VDEF <.MEM_46>
    MEM[(struct _Deque_iterator *)this_6(D) + 16B]._M_node = 0B;
    # DEBUG D#72 => &D#100->_M_finish
    # DEBUG this => D#72
    # .MEM_48 = VDEF <.MEM_47>
    MEM[(struct _Deque_iterator *)this_6(D) + 48B]._M_cur = 0B;
    # .MEM_49 = VDEF <.MEM_48>
    MEM[(struct _Deque_iterator *)this_6(D) + 48B]._M_first = 0B;
    # .MEM_50 = VDEF <.MEM_49>
    MEM[(struct _Deque_iterator *)this_6(D) + 48B]._M_last = 0B;
    # .MEM_51 = VDEF <.MEM_50>
    MEM[(struct _Deque_iterator *)this_6(D) + 48B]._M_node = 0B;
    # .MEM_52 = VDEF <.MEM_51>
    std::_Deque_base<PacketReplyInfo*, std::allocator<PacketReplyInfo*> >::_M_initialize_map (_7, _41);
    # DEBUG D#113 => &this_6(D)->D.29688
    # DEBUG this => D#113
    # DEBUG D#114 => &this_6(D)->D.29688._M_impl._M_start
    # DEBUG this => &D.30067
    # DEBUG __x => D#114
    # VUSE <.MEM_52>
    _9 = MEM[(const struct iterator &)this_6(D) + 16]._M_cur;
    # VUSE <.MEM_52>
    _17 = MEM[(const struct iterator &)this_6(D) + 16]._M_last;
    # VUSE <.MEM_52>
    _18 = MEM[(const struct iterator &)this_6(D) + 16]._M_node;
    # DEBUG this => __x_2(D)
    # DEBUG D#14 => &__x_2(D)->D.29688._M_impl._M_finish
    # DEBUG this => &D.31338
    # DEBUG __x => D#14
    # VUSE <.MEM_52>
    _10 = MEM[(const struct iterator &)__x_2(D) + 48]._M_cur;
    # VUSE <.MEM_52>
    _13 = MEM[(const struct iterator &)__x_2(D) + 48]._M_first;
    # DEBUG D#126 => MEM[(const struct iterator &)__x_2(D) + 48]._M_last
    # VUSE <.MEM_52>
    _15 = MEM[(const struct iterator &)__x_2(D) + 48]._M_node;
    # DEBUG this => __x_2(D)
    # DEBUG D#15 => &__x_2(D)->D.29688._M_impl._M_start
    # DEBUG this => &D.31339
    # DEBUG __x => D#15
    # VUSE <.MEM_52>
    __first_8 = MEM[(const struct iterator &)__x_2(D) + 16]._M_cur;
    # DEBUG D#127 => MEM[(const struct iterator &)__x_2(D) + 16]._M_first
    # VUSE <.MEM_52>
    __first$_M_last_4 = MEM[(const struct iterator &)__x_2(D) + 16]._M_last;
    # VUSE <.MEM_52>
    __first$_M_node_3 = MEM[(const struct iterator &)__x_2(D) + 16]._M_node;
    # DEBUG __result => &D.30067
    # DEBUG D.33018 => D#111
    # DEBUG this => &D.33022
    # DEBUG __x => &D.30067
    # DEBUG __result => &D.33022
    # DEBUG __assignable => 1
    # DEBUG this => NULL
    # DEBUG __x => &D.33022
    # DEBUG __result => NULL
    # DEBUG this => &D.33036
    # DEBUG __x => NULL
    # DEBUG __result => &D.33036
    # DEBUG this => &D.33056
    # DEBUG __x => &D.33036
    # DEBUG __it => _10
    # DEBUG __it$8 => _13
    # DEBUG __it$16 => D#126
    # DEBUG __it$24 => _15
    # DEBUG __it$_M_cur => _10
    # DEBUG __it$_M_first => _13
    # DEBUG __it$_M_last => D#126
    # DEBUG __it$_M_node => _15
    # DEBUG __it => __first_8
    # DEBUG __it$8 => D#127
    # DEBUG __it$16 => __first$_M_last_4
    # DEBUG __it$24 => __first$_M_node_3
    # DEBUG __it$_M_cur => __first_8
    # DEBUG __it$_M_first => D#127
    # DEBUG __it$_M_last => __first$_M_last_4
    # DEBUG __it$_M_node => __first$_M_node_3
    # DEBUG __result => &D.33056
    # DEBUG this => NULL
    # DEBUG __x => &D.33056
    # DEBUG __it => NULL
    # DEBUG this => NULL
    # DEBUG __x => NULL
    # DEBUG __it => NULL
    # DEBUG this => NULL
    # DEBUG __x => NULL
    # DEBUG __it => _10
    # DEBUG __it$8 => _13
    # DEBUG __it$16 => D#126
    # DEBUG __it$24 => _15
    # DEBUG __it$_M_cur => _10
    # DEBUG __it$_M_first => _13
    # DEBUG __it$_M_last => D#126
    # DEBUG __it$_M_node => _15
    # DEBUG __it => __first_8
    # DEBUG __it$8 => D#127
    # DEBUG __it$16 => __first$_M_last_4
    # DEBUG __it$24 => __first$_M_node_3
    # DEBUG __it$_M_cur => __first_8
    # DEBUG __it$_M_first => D#127
    # DEBUG __it$_M_last => __first$_M_last_4
    # DEBUG __it$_M_node => __first$_M_node_3
    # DEBUG __first => __first_8
    # DEBUG __first$8 => D#127
    # DEBUG __first$16 => __first$_M_last_4
    # DEBUG __first$24 => __first$_M_node_3
    # DEBUG __result => NULL
    # DEBUG __simple => 0
    # DEBUG this => &D.33081
    # DEBUG __x => NULL
    # DEBUG __first => __first_8
    # DEBUG __first$_M_first => D#127
    # DEBUG __first$_M_last => __first$_M_last_4
    # DEBUG __first$_M_node => __first$_M_node_3
    # DEBUG __result => &D.33081
    # DEBUG __x => &__last
    # DEBUG __y => &__first
    # DEBUG __size => 8
    _97 = (long int) _15;
    _99 = (long int) __first$_M_node_3;
    _100 = _97 - _99;
    _101 = _100 /[ex] 8;
    _102 = _101 + -1;
    _103 = _102 * 64;
    _105 = (long int) _10;
    _107 = (long int) _13;
    _108 = _105 - _107;
    _109 = _108 /[ex] 8;
    _110 = _103 + _109;
    _112 = (long int) __first$_M_last_4;
    _114 = (long int) __first_8;
    _115 = _112 - _114;
    _116 = _115 /[ex] 8;
    __n_117 = _110 + _116;
    # DEBUG __n => __n_117
    # DEBUG __n => __n_117
    if (__n_117 <= 0)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 bb_12 }, succs = {bb_1 })
  {
    <bb 3>:
    # .MEM_5 = PHI <.MEM_52(2), .MEM_56(12)>
    # DEBUG this => &D.33021
    # DEBUG __x => &D.33081
    # .MEM_203 = VDEF <.MEM_5>
    D.33081 ={v} {CLOBBER};
    # .MEM_204 = VDEF <.MEM_203>
    D.33056 ={v} {CLOBBER};
    # .MEM_205 = VDEF <.MEM_204>
    D.33036 ={v} {CLOBBER};
    # .MEM_206 = VDEF <.MEM_205>
    D.33022 ={v} {CLOBBER};
    # .MEM_12 = VDEF <.MEM_206>
    D.30067 ={v} {CLOBBER};
    # VUSE <.MEM_12>
    return;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 })
  {
    <bb 4>:

  }
  bb_10 (preds = {bb_9 }, succs = {bb_12 })
  {
    <bb 10>:
    # .MEM_56 = PHI <.MEM_188(9)>

  }
  bb_12 (preds = {bb_10 }, succs = {bb_3 })
  {
    <bb 12>:
    goto <bb 3>;

  }
  loop_1 (header = 5, latch = 11, niter = (unsigned long) (__n_117 + -1), upper_bound = 9223372036854775806)
  {
    bb_5 (preds = {bb_4 bb_11 }, succs = {bb_6 bb_7 })
    {
      <bb 5>:
      # __n_54 = PHI <__n_117(4), __n_128(11)>
      # .MEM_55 = PHI <.MEM_52(4), .MEM_188(11)>
      # SR.220_198 = PHI <_9(4), SR.220_197(11)>
      # SR.221_195 = PHI <_17(4), SR.221_194(11)>
      # SR.222_193 = PHI <_18(4), SR.222_192(11)>
      # __first_190 = PHI <__first_8(4), __first_189(11)>
      # __first$_M_last_186 = PHI <__first$_M_last_4(4), __first$_M_last_185(11)>
      # __first$_M_node_184 = PHI <__first$_M_node_3(4), __first$_M_node_182(11)>
      # DEBUG __first$_M_node => __first$_M_node_184
      # DEBUG __first$_M_last => __first$_M_last_186
      # DEBUG __first => __first_190
      # DEBUG __n => __n_54
      # DEBUG D#13 => &D.33081
      # DEBUG this => D#13
      # DEBUG D#110 => &__first
      # DEBUG this => D#110
      # VUSE <.MEM_55>
      _121 = MEM[(struct PacketReplyInfo * const &)__first_190];
      # .MEM_188 = VDEF <.MEM_55>
      *SR.220_198 = _121;
      # DEBUG this => &__first
      __first_123 = __first_190 + 8;
      # DEBUG __first => __first_123
      if (__first_123 == __first$_M_last_186)
        goto <bb 6>;
      else
        goto <bb 7>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_7 })
    {
      <bb 6>:
      # DEBUG this => &__first
      __first$_M_node_134 = __first$_M_node_184 + 8;
      # DEBUG this => &__first
      # DEBUG __new_node => __first$_M_node_134
      # DEBUG __first$_M_node => __first$_M_node_134
      # VUSE <.MEM_188>
      __first_135 = MEM[(struct PacketReplyInfo * * *)__first$_M_node_184 + 8B];
      # DEBUG __size => 8
      __first$_M_last_136 = __first_135 + 512;
      # DEBUG __first$_M_last => __first$_M_last_136
      # DEBUG __first => __first_135

    }
    bb_7 (preds = {bb_5 bb_6 }, succs = {bb_8 bb_9 })
    {
      <bb 7>:
      # __first_189 = PHI <__first_123(5), __first_135(6)>
      # __first$_M_last_185 = PHI <__first$_M_last_186(5), __first$_M_last_136(6)>
      # __first$_M_node_182 = PHI <__first$_M_node_184(5), __first$_M_node_134(6)>
      # DEBUG __first$_M_node => __first$_M_node_182
      # DEBUG __first$_M_last => __first$_M_last_185
      # DEBUG __first => __first_189
      # DEBUG this => &D.33081
      _126 = SR.220_198 + 8;
      if (_126 == SR.221_195)
        goto <bb 8>;
      else
        goto <bb 9>;

    }
    bb_8 (preds = {bb_7 }, succs = {bb_9 })
    {
      <bb 8>:
      # DEBUG this => &D.33081
      _138 = SR.222_193 + 8;
      # DEBUG this => &D.33081
      # DEBUG __new_node => _138
      # VUSE <.MEM_188>
      _139 = MEM[(struct PacketReplyInfo * * *)SR.222_193 + 8B];
      # DEBUG __size => 8
      _140 = _139 + 512;

    }
    bb_9 (preds = {bb_7 bb_8 }, succs = {bb_10 bb_11 })
    {
      <bb 9>:
      # SR.220_197 = PHI <_126(7), _139(8)>
      # SR.221_194 = PHI <SR.221_195(7), _140(8)>
      # SR.222_192 = PHI <SR.222_193(7), _138(8)>
      __n_128 = __n_54 + -1;
      # DEBUG __n => __n_128
      # DEBUG __n => __n_128
      if (__n_128 <= 0)
        goto <bb 10>;
      else
        goto <bb 11>;

    }
    bb_11 (preds = {bb_9 }, succs = {bb_5 })
    {
      <bb 11>:
      goto <bb 5>;

    }
  }
}

Pass statistics:
----------------

std::deque<_Tp, _Alloc>::deque(const std::deque<_Tp, _Alloc>&) [with _Tp = PacketReplyInfo*; _Alloc = std::allocator<PacketReplyInfo*>] (struct dequeD.28737 * const thisD.29660, const struct dequeD.28737 & __xD.29661)
{
  struct PacketReplyInfoD.28726 * * * __first$_M_nodeD.33112;
  struct PacketReplyInfoD.28726 * * __first$_M_lastD.33111;
  struct PacketReplyInfoD.28726 * * const __firstD.33109;
  struct PacketReplyInfoD.28726 * * * SR.222D.33108;
  struct PacketReplyInfoD.28726 * * SR.221D.33107;
  struct PacketReplyInfoD.28726 * * SR.220D.33106;
  struct PacketReplyInfoD.28726 * * * __first$24D.33105;
  struct PacketReplyInfoD.28726 * * __first$16D.33104;
  struct PacketReplyInfoD.28726 * * __first$8D.33103;
  struct PacketReplyInfoD.28726 * * __firstD.33102;
  _DistanceD.30924 __nD.33088;
  struct _Deque_iteratorD.29008 __firstD.33082;
  struct _Deque_iteratorD.29008 __lastD.33083;
  struct _Deque_iteratorD.29008 __lastD.33063;
  struct _Deque_iteratorD.29008 __firstD.33064;
  struct _Deque_iteratorD.29006 D.33081;
  struct PacketReplyInfoD.28726 * * __itD.33080;
  struct PacketReplyInfoD.28726 * * __it$8D.33079;
  struct PacketReplyInfoD.28726 * * __it$16D.33078;
  struct PacketReplyInfoD.28726 * * * __it$24D.33076;
  struct PacketReplyInfoD.28726 * * __itD.33075;
  struct PacketReplyInfoD.28726 * * __it$8D.33074;
  struct PacketReplyInfoD.28726 * * __it$16D.33073;
  struct PacketReplyInfoD.28726 * * * __it$24D.33071;
  struct _Deque_iteratorD.29008 __firstD.33057;
  struct _Deque_iteratorD.29008 __lastD.33058;
  struct _Deque_iteratorD.29006 D.33056;
  struct _Deque_iteratorD.29008 D.33055;
  struct _Deque_iteratorD.29008 D.33054;
  struct PacketReplyInfoD.28726 * * __itD.33053;
  struct PacketReplyInfoD.28726 * * __it$8D.33052;
  struct PacketReplyInfoD.28726 * * __it$16D.33051;
  struct PacketReplyInfoD.28726 * * * __it$24D.33050;
  struct PacketReplyInfoD.28726 * * __itD.33049;
  struct PacketReplyInfoD.28726 * * __it$8D.33048;
  struct PacketReplyInfoD.28726 * * __it$16D.33047;
  struct PacketReplyInfoD.28726 * * * __it$24D.33046;
  struct _Deque_iteratorD.29008 __firstD.33037;
  struct _Deque_iteratorD.29008 __lastD.33038;
  struct _Deque_iteratorD.29008 __lastD.33032;
  struct _Deque_iteratorD.29008 __firstD.33033;
  struct _Deque_iteratorD.29006 D.33036;
  struct _Deque_iteratorD.29008 __firstD.33023;
  struct _Deque_iteratorD.29008 __lastD.33024;
  struct _Deque_iteratorD.29006 D.33022;
  struct _Deque_iteratorD.29006 D.33021;
  struct _Deque_iteratorD.29008 __firstD.33015;
  struct _Deque_iteratorD.29008 __lastD.33016;
  struct _Deque_iteratorD.29008 D.31339;
  struct _Deque_iteratorD.29008 D.31338;
  struct _Deque_iteratorD.29006 D.30067;
  struct _Deque_baseD.28773 * _7;
  struct PacketReplyInfoD.28726 * * _9;
  struct PacketReplyInfoD.28726 * * _10;
  struct PacketReplyInfoD.28726 * * _13;
  struct PacketReplyInfoD.28726 * * * _15;
  struct PacketReplyInfoD.28726 * * _17;
  struct PacketReplyInfoD.28726 * * * _18;
  struct PacketReplyInfoD.28726 * * * _19;
  long intD.12 _20;
  struct PacketReplyInfoD.28726 * * * _21;
  long intD.12 _22;
  long intD.12 _23;
  long intD.12 _24;
  long intD.12 _25;
  long intD.12 _26;
  struct PacketReplyInfoD.28726 * * _27;
  long intD.12 _28;
  struct PacketReplyInfoD.28726 * * _29;
  long intD.12 _30;
  long intD.12 _31;
  long intD.12 _32;
  long intD.12 _33;
  struct PacketReplyInfoD.28726 * * _34;
  long intD.12 _35;
  struct PacketReplyInfoD.28726 * * _36;
  long intD.12 _37;
  long intD.12 _38;
  long intD.12 _39;
  difference_typeD.29036 _40;
  size_typeD.29215 _41;
  long intD.12 _97;
  long intD.12 _99;
  long intD.12 _100;
  long intD.12 _101;
  long intD.12 _102;
  long intD.12 _103;
  long intD.12 _105;
  long intD.12 _107;
  long intD.12 _108;
  long intD.12 _109;
  long intD.12 _110;
  long intD.12 _112;
  long intD.12 _114;
  long intD.12 _115;
  long intD.12 _116;
  struct PacketReplyInfoD.28726 * _121;
  struct PacketReplyInfoD.28726 * * _126;
  struct PacketReplyInfoD.28726 * * * _138;
  struct PacketReplyInfoD.28726 * * _139;
  struct PacketReplyInfoD.28726 * * _140;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.32705 => __x_2(D)
  # DEBUG D#30ptD.0 => &__x_2(D)->D.29688._M_implD.29139._M_startD.29143
  # DEBUG D#31ptD.0 => &__x_2(D)->D.29688._M_implD.29139._M_finishD.29144
  # DEBUG __xD.32707 => D#31ptD.0
  # DEBUG __yD.32706 => D#30ptD.0
  # DEBUG __sizeD.31764 => 8
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _19 = MEM[(const struct _Deque_iteratorD.29006 &)__x_2(D) + 48]._M_nodeD.29041;
  _20 = (long intD.12) _19;
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _21 = MEM[(const struct _Deque_iteratorD.29006 &)__x_2(D) + 16]._M_nodeD.29041;
  _22 = (long intD.12) _21;
  _23 = _20 - _22;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _24 = _23 /[ex] 8;
  # RANGE [-1152921504606846977, 1152921504606846974]
  _25 = _24 + -1;
  # RANGE [-9223372036854775808, 9223372036854775807] NONZERO 18446744073709551552
  _26 = _25 * 64;
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _27 = MEM[(const struct _Deque_iteratorD.29006 &)__x_2(D) + 48]._M_curD.29038;
  _28 = (long intD.12) _27;
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _29 = MEM[(const struct _Deque_iteratorD.29006 &)__x_2(D) + 48]._M_firstD.29039;
  _30 = (long intD.12) _29;
  _31 = _28 - _30;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _32 = _31 /[ex] 8;
  _33 = _26 + _32;
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _34 = MEM[(const struct _Deque_iteratorD.29006 &)__x_2(D) + 16]._M_lastD.29040;
  _35 = (long intD.12) _34;
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _36 = MEM[(const struct _Deque_iteratorD.29006 &)__x_2(D) + 16]._M_curD.29038;
  _37 = (long intD.12) _36;
  _38 = _35 - _37;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _39 = _38 /[ex] 8;
  _40 = _33 + _39;
  # RANGE [0, 18446744073709551615]
  _41 = (size_typeD.29215) _40;
  # DEBUG D#112ptD.0 => &__x_2(D)->D.29688
  # DEBUG thisD.32703 => D#112ptD.0
  # DEBUG __aD.32701 => NULL
  # PT = nonlocal 
  _7 = &this_6(D)->D.29688;
  # DEBUG thisD.32693 => _7
  # DEBUG __aD.32694 => NULL
  # DEBUG __num_elementsD.32695 => _41
  # DEBUG D#100ptD.0 => &_7->_M_implD.29139
  # DEBUG thisD.32698 => D#100ptD.0
  # DEBUG __aD.32697 => NULL
  # DEBUG thisD.32041 => D#100ptD.0
  # DEBUG __aD.32042 => NULL
  # DEBUG thisD.32036 => D#100ptD.0
  # DEBUG D.32037 => NULL
  # .MEM_42 = VDEF <.MEM_1(D)>
  MEM[(struct _Deque_implD.29107 *)this_6(D)]._M_mapD.29141 = 0B;
  # .MEM_43 = VDEF <.MEM_42>
  MEM[(struct _Deque_implD.29107 *)this_6(D)]._M_map_sizeD.29142 = 0;
  # DEBUG D#73ptD.0 => &D#100ptD.0->_M_startD.29143
  # DEBUG thisD.32699 => D#73ptD.0
  # .MEM_44 = VDEF <.MEM_43>
  MEM[(struct _Deque_iteratorD.29006 *)this_6(D) + 16B]._M_curD.29038 = 0B;
  # .MEM_45 = VDEF <.MEM_44>
  MEM[(struct _Deque_iteratorD.29006 *)this_6(D) + 16B]._M_firstD.29039 = 0B;
  # .MEM_46 = VDEF <.MEM_45>
  MEM[(struct _Deque_iteratorD.29006 *)this_6(D) + 16B]._M_lastD.29040 = 0B;
  # .MEM_47 = VDEF <.MEM_46>
  MEM[(struct _Deque_iteratorD.29006 *)this_6(D) + 16B]._M_nodeD.29041 = 0B;
  # DEBUG D#72ptD.0 => &D#100ptD.0->_M_finishD.29144
  # DEBUG thisD.32700 => D#72ptD.0
  # .MEM_48 = VDEF <.MEM_47>
  MEM[(struct _Deque_iteratorD.29006 *)this_6(D) + 48B]._M_curD.29038 = 0B;
  # .MEM_49 = VDEF <.MEM_48>
  MEM[(struct _Deque_iteratorD.29006 *)this_6(D) + 48B]._M_firstD.29039 = 0B;
  # .MEM_50 = VDEF <.MEM_49>
  MEM[(struct _Deque_iteratorD.29006 *)this_6(D) + 48B]._M_lastD.29040 = 0B;
  # .MEM_51 = VDEF <.MEM_50>
  MEM[(struct _Deque_iteratorD.29006 *)this_6(D) + 48B]._M_nodeD.29041 = 0B;
  # .MEM_52 = VDEF <.MEM_51>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZNSt11_Deque_baseIP15PacketReplyInfoSaIS1_EE17_M_initialize_mapEmD.29126 (_7, _41);
  # DEBUG D#113ptD.0 => &this_6(D)->D.29688
  # DEBUG thisD.32691 => D#113ptD.0
  # DEBUG D#114ptD.0 => &this_6(D)->D.29688._M_implD.29139._M_startD.29143
  # DEBUG thisD.32689 => &D.30067
  # DEBUG __xD.32690 => D#114ptD.0
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _9 = MEM[(const struct iteratorD.29026 &)this_6(D) + 16]._M_curD.29038;
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _17 = MEM[(const struct iteratorD.29026 &)this_6(D) + 16]._M_lastD.29040;
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _18 = MEM[(const struct iteratorD.29026 &)this_6(D) + 16]._M_nodeD.29041;
  # DEBUG thisD.32686 => __x_2(D)
  # DEBUG D#14ptD.0 => &__x_2(D)->D.29688._M_implD.29139._M_finishD.29144
  # DEBUG thisD.32688 => &D.31338
  # DEBUG __xD.32687 => D#14ptD.0
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _10 = MEM[(const struct iteratorD.29960 &)__x_2(D) + 48]._M_curD.29038;
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _13 = MEM[(const struct iteratorD.29960 &)__x_2(D) + 48]._M_firstD.29039;
  # DEBUG D#126ptD.0 => MEM[(const struct iteratorD.29960 &)__x_2(D) + 48]._M_lastD.29040
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  _15 = MEM[(const struct iteratorD.29960 &)__x_2(D) + 48]._M_nodeD.29041;
  # DEBUG thisD.32683 => __x_2(D)
  # DEBUG D#15ptD.0 => &__x_2(D)->D.29688._M_implD.29139._M_startD.29143
  # DEBUG thisD.32685 => &D.31339
  # DEBUG __xD.32684 => D#15ptD.0
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  __first_8 = MEM[(const struct iteratorD.29960 &)__x_2(D) + 16]._M_curD.29038;
  # DEBUG D#127ptD.0 => MEM[(const struct iteratorD.29960 &)__x_2(D) + 16]._M_firstD.29039
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  __first$_M_last_4 = MEM[(const struct iteratorD.29960 &)__x_2(D) + 16]._M_lastD.29040;
  # VUSE <.MEM_52>
  # PT = nonlocal escaped 
  __first$_M_node_3 = MEM[(const struct iteratorD.29960 &)__x_2(D) + 16]._M_nodeD.29041;
  # DEBUG __resultD.33017 => &D.30067
  # DEBUG D.33018 => D#111ptD.0
  # DEBUG thisD.33020 => &D.33022
  # DEBUG __xD.33019 => &D.30067
  # DEBUG __resultD.33025 => &D.33022
  # DEBUG __assignableD.33028 => 1
  # DEBUG thisD.33030 => NULL
  # DEBUG __xD.33029 => &D.33022
  # DEBUG __resultD.33031 => NULL
  # DEBUG thisD.33035 => &D.33036
  # DEBUG __xD.33034 => NULL
  # DEBUG __resultD.33039 => &D.33036
  # DEBUG thisD.33041 => &D.33056
  # DEBUG __xD.33040 => &D.33036
  # DEBUG __itD.33049 => _10
  # DEBUG __it$8D.33048 => _13
  # DEBUG __it$16D.33047 => D#126ptD.0
  # DEBUG __it$24D.33046 => _15
  # DEBUG __it$_M_curD.32636 => _10
  # DEBUG __it$_M_firstD.32635 => _13
  # DEBUG __it$_M_lastD.32634 => D#126ptD.0
  # DEBUG __it$_M_nodeD.32633 => _15
  # DEBUG __itD.33053 => __first_8
  # DEBUG __it$8D.33052 => D#127ptD.0
  # DEBUG __it$16D.33051 => __first$_M_last_4
  # DEBUG __it$24D.33050 => __first$_M_node_3
  # DEBUG __it$_M_curD.32630 => __first_8
  # DEBUG __it$_M_firstD.32629 => D#127ptD.0
  # DEBUG __it$_M_lastD.32628 => __first$_M_last_4
  # DEBUG __it$_M_nodeD.32627 => __first$_M_node_3
  # DEBUG __resultD.33059 => &D.33056
  # DEBUG thisD.33061 => NULL
  # DEBUG __xD.33060 => &D.33056
  # DEBUG __itD.32591 => NULL
  # DEBUG thisD.32593 => NULL
  # DEBUG __xD.32592 => NULL
  # DEBUG __itD.32594 => NULL
  # DEBUG thisD.32596 => NULL
  # DEBUG __xD.32595 => NULL
  # DEBUG __itD.33075 => _10
  # DEBUG __it$8D.33074 => _13
  # DEBUG __it$16D.33073 => D#126ptD.0
  # DEBUG __it$24D.33071 => _15
  # DEBUG __it$_M_curD.32590 => _10
  # DEBUG __it$_M_firstD.32589 => _13
  # DEBUG __it$_M_lastD.32588 => D#126ptD.0
  # DEBUG __it$_M_nodeD.32587 => _15
  # DEBUG __itD.33080 => __first_8
  # DEBUG __it$8D.33079 => D#127ptD.0
  # DEBUG __it$16D.33078 => __first$_M_last_4
  # DEBUG __it$24D.33076 => __first$_M_node_3
  # DEBUG __it$_M_curD.32584 => __first_8
  # DEBUG __it$_M_firstD.32583 => D#127ptD.0
  # DEBUG __it$_M_lastD.32582 => __first$_M_last_4
  # DEBUG __it$_M_nodeD.32581 => __first$_M_node_3
  # DEBUG __firstD.33102 => __first_8
  # DEBUG __first$8D.33103 => D#127ptD.0
  # DEBUG __first$16D.33104 => __first$_M_last_4
  # DEBUG __first$24D.33105 => __first$_M_node_3
  # DEBUG __resultD.33062 => NULL
  # DEBUG __simpleD.33068 => 0
  # DEBUG thisD.33070 => &D.33081
  # DEBUG __xD.33069 => NULL
  # DEBUG __firstD.33109 => __first_8
  # DEBUG __first$_M_firstD.33110 => D#127ptD.0
  # DEBUG __first$_M_lastD.33111 => __first$_M_last_4
  # DEBUG __first$_M_nodeD.33112 => __first$_M_node_3
  # DEBUG __resultD.33084 => &D.33081
  # DEBUG __xD.33092 => &__lastD.33083
  # DEBUG __yD.33091 => &__firstD.33082
  # DEBUG __sizeD.32532 => 8
  _97 = (long intD.12) _15;
  _99 = (long intD.12) __first$_M_node_3;
  _100 = _97 - _99;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _101 = _100 /[ex] 8;
  # RANGE [-1152921504606846977, 1152921504606846974]
  _102 = _101 + -1;
  # RANGE [-9223372036854775808, 9223372036854775807] NONZERO 18446744073709551552
  _103 = _102 * 64;
  _105 = (long intD.12) _10;
  _107 = (long intD.12) _13;
  _108 = _105 - _107;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _109 = _108 /[ex] 8;
  _110 = _103 + _109;
  _112 = (long intD.12) __first$_M_last_4;
  _114 = (long intD.12) __first_8;
  _115 = _112 - _114;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _116 = _115 /[ex] 8;
  __n_117 = _110 + _116;
  # DEBUG __nD.33088 => __n_117
  # DEBUG __nD.33088 => __n_117
  if (__n_117 <= 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_5 = PHI <.MEM_52(2), .MEM_56(12)>
  # DEBUG thisD.33087 => &D.33021
  # DEBUG __xD.33086 => &D.33081
  # .MEM_203 = VDEF <.MEM_5>
  D.33081 ={v} {CLOBBER};
  # .MEM_204 = VDEF <.MEM_203>
  D.33056 ={v} {CLOBBER};
  # .MEM_205 = VDEF <.MEM_204>
  D.33036 ={v} {CLOBBER};
  # .MEM_206 = VDEF <.MEM_205>
  D.33022 ={v} {CLOBBER};
  # .MEM_12 = VDEF <.MEM_206>
  D.30067 ={v} {CLOBBER};
  # VUSE <.MEM_12>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # __n_54 = PHI <__n_117(4), __n_128(11)>
  # .MEM_55 = PHI <.MEM_52(4), .MEM_188(11)>
  # PT = nonlocal escaped 
  # SR.220_198 = PHI <_9(4), SR.220_197(11)>
  # PT = nonlocal escaped 
  # SR.221_195 = PHI <_17(4), SR.221_194(11)>
  # PT = nonlocal escaped 
  # SR.222_193 = PHI <_18(4), SR.222_192(11)>
  # PT = nonlocal escaped 
  # __first_190 = PHI <__first_8(4), __first_189(11)>
  # PT = nonlocal escaped 
  # __first$_M_last_186 = PHI <__first$_M_last_4(4), __first$_M_last_185(11)>
  # PT = nonlocal escaped 
  # __first$_M_node_184 = PHI <__first$_M_node_3(4), __first$_M_node_182(11)>
  # DEBUG __first$_M_nodeD.33112 => __first$_M_node_184
  # DEBUG __first$_M_lastD.33111 => __first$_M_last_186
  # DEBUG __firstD.33109 => __first_190
  # DEBUG __nD.33088 => __n_54
  # DEBUG D#13ptD.0 => &D.33081
  # DEBUG thisD.32559 => D#13ptD.0
  # DEBUG D#110ptD.0 => &__firstD.33082
  # DEBUG thisD.32556 => D#110ptD.0
  # VUSE <.MEM_55>
  # PT = nonlocal escaped 
  _121 = MEM[(struct PacketReplyInfoD.28726 * const &)__first_190];
  # .MEM_188 = VDEF <.MEM_55>
  *SR.220_198 = _121;
  # DEBUG thisD.33089 => &__firstD.33082
  # PT = nonlocal escaped 
  __first_123 = __first_190 + 8;
  # DEBUG __firstD.33109 => __first_123
  if (__first_123 == __first$_M_last_186)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [6.7%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [93.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 612, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [6.7%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.33093 => &__firstD.33082
  # PT = nonlocal escaped 
  __first$_M_node_134 = __first$_M_node_184 + 8;
  # DEBUG thisD.33095 => &__firstD.33082
  # DEBUG __new_nodeD.33094 => __first$_M_node_134
  # DEBUG __first$_M_nodeD.33112 => __first$_M_node_134
  # VUSE <.MEM_188>
  # PT = nonlocal escaped 
  __first_135 = MEM[(struct PacketReplyInfoD.28726 * * *)__first$_M_node_184 + 8B];
  # DEBUG __sizeD.32532 => 8
  # PT = nonlocal escaped 
  __first$_M_last_136 = __first_135 + 512;
  # DEBUG __first$_M_lastD.33111 => __first$_M_last_136
  # DEBUG __firstD.33109 => __first_135
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       5 [93.3%]  (FALSE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_189 = PHI <__first_123(5), __first_135(6)>
  # PT = nonlocal escaped 
  # __first$_M_last_185 = PHI <__first$_M_last_186(5), __first$_M_last_136(6)>
  # PT = nonlocal escaped 
  # __first$_M_node_182 = PHI <__first$_M_node_184(5), __first$_M_node_134(6)>
  # DEBUG __first$_M_nodeD.33112 => __first$_M_node_182
  # DEBUG __first$_M_lastD.33111 => __first$_M_last_185
  # DEBUG __firstD.33109 => __first_189
  # DEBUG thisD.33090 => &D.33081
  # PT = nonlocal escaped 
  _126 = SR.220_198 + 8;
  if (_126 == SR.221_195)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [6.7%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [93.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 612, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [6.7%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.33097 => &D.33081
  # PT = nonlocal escaped 
  _138 = SR.222_193 + 8;
  # DEBUG thisD.33099 => &D.33081
  # DEBUG __new_nodeD.33098 => _138
  # VUSE <.MEM_188>
  # PT = nonlocal escaped 
  _139 = MEM[(struct PacketReplyInfoD.28726 * * *)SR.222_193 + 8B];
  # DEBUG __sizeD.31764 => 8
  # PT = nonlocal escaped 
  _140 = _139 + 512;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       7 [93.3%]  (FALSE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # SR.220_197 = PHI <_126(7), _139(8)>
  # PT = nonlocal escaped 
  # SR.221_194 = PHI <SR.221_195(7), _140(8)>
  # PT = nonlocal escaped 
  # SR.222_192 = PHI <SR.222_193(7), _138(8)>
  # RANGE [0, 9223372036854775806] NONZERO 9223372036854775807
  __n_128 = __n_54 + -1;
  # DEBUG __nD.33088 => __n_128
  # DEBUG __nD.33088 => __n_128
  if (__n_128 <= 0)
    goto <bb 10>;
  else
    goto <bb 11>;
;;    succ:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 9, next block 12, flags: (NEW)
;;    pred:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_56 = PHI <.MEM_188(9)>
;;    succ:       12 [100.0%]  (FALLTHRU)

;;   basic block 12, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 10, next block 11, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU)
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 12, next block 1, flags: (NEW)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

}


