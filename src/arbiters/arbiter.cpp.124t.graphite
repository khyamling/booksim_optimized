
;; Function virtual void Arbiter::Clear() (_ZN7Arbiter5ClearEv, funcdef_no=1519, decl_uid=27608, cgraph_uid=523, symbol_order=524)


Pass statistics:
----------------

virtual void Arbiter::Clear() (struct ArbiterD.26830 * const thisD.30925)
{
  intD.9 iD.30927;
  intD.9 _6;
  long unsigned intD.14 _8;
  long unsigned intD.14 _15;
  struct N7Arbiter7entry_tED.26837 & _16;
  struct N7Arbiter7entry_tED.26837 * pretmp_18;
  intD.9 _19;

;;   basic block 2, loop depth 0, count 0, freq 1113, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_4(D)>
  _6 = this_5(D)->_num_reqsD.27589;
  if (_6 > 0)
    goto <bb 3>;
  else
    goto <bb 8>;
;;    succ:       3 [80.9%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [19.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [80.9%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG iD.30927 => 0
  # VUSE <.MEM_4(D)>
  _19 = this_5(D)->_sizeD.27585;
  if (_19 <= 0)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_24 = PHI <.MEM_4(D)(3), .MEM_10(6)>
  # .MEM_12 = VDEF <.MEM_24>
  this_5(D)->_num_reqsD.27589 = 0;
  # .MEM_13 = VDEF <.MEM_12>
  this_5(D)->_selectedD.27586 = -1;
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       3 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  pretmp_18 = MEM[(struct N7Arbiter7entry_tED.26837 * *)this_5(D) + 96B];
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # i_20 = PHI <0(5), i_11(7)>
  # .MEM_21 = PHI <.MEM_4(D)(5), .MEM_10(7)>
  # DEBUG iD.30927 => i_20
  # RANGE [0, 18446744073709551615]
  _8 = (long unsigned intD.14) i_20;
  # DEBUG D#28ptD.0 => &this_5(D)->_requestD.27584
  # DEBUG D#7ptD.0 => D#28ptD.0
  # DEBUG __nD.33093 => _8
  # DEBUG thisD.33094 => D#7ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _15 = _8 * 12;
  # PT = nonlocal escaped 
  _16 = pretmp_18 + _15;
  # .MEM_10 = VDEF <.MEM_21>
  _16->validD.26834 = 0;
  i_11 = i_20 + 1;
  # DEBUG iD.30927 => i_11
  # DEBUG iD.30927 => i_11
  if (i_11 >= _19)
    goto <bb 4>;
  else
    goto <bb 7>;
;;    succ:       4 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 1113, maybe hot
;;    prev block 7, next block 1, flags: (NEW, REACHABLE)
;;    pred:       2 [19.1%]  (FALSE_VALUE,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_3 = PHI <.MEM_4(D)(2), .MEM_13(4)>
  # VUSE <.MEM_3>
  return;
;;    succ:       EXIT [100.0%] 

}



Updating SSA:
Registering new PHI nodes in block #6
Updating SSA information for statement _16->valid = 0;
Registering new PHI nodes in block #7
Registering new PHI nodes in block #9

DFA Statistics for virtual void Arbiter::Clear()

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             20        160b
DEF operands                              7         56b
VUSE operands                             7         56b
VDEF operands                             3         24b
PHI nodes                                 5        520b
PHI arguments                             9        432b
---------------------------------------------------------
Total memory used by DFA/SSA data                 1248b
---------------------------------------------------------

Average number of arguments per PHI node: 1.8 (max: 2)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_22 -> { .MEM_10 }
Incremental SSA update started at block: 6
Number of blocks in CFG: 10
Number of blocks to update: 3 ( 30%)
Affected blocks: 6 7 9


Creating dr for this_5(D)->_num_reqs
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 136
	step: 0
	aligned to: 256
	base_object: *this_5(D)
	Access function 0: 1088
Creating dr for this_5(D)->_size
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 120
	step: 0
	aligned to: 256
	base_object: *this_5(D)
	Access function 0: 960
Creating dr for MEM[(struct entry_t * *)this_5(D) + 96B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(struct entry_t * *)this_5(D) + 96B]
Creating dr for _16->valid
analyze_innermost: success.
	base_address: pretmp_18
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: *pretmp_18
	Access function 0: 0
	Access function 1: {0B, +, 12}_1
Creating dr for _16->valid
analyze_innermost: success.
	base_address: pretmp_18
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: *pretmp_18
	Access function 0: 0
	Access function 1: {0B, +, 12}_1
Creating dr for _16->valid
analyze_innermost: success.
	base_address: pretmp_18
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: *pretmp_18
	Access function 0: 0
	Access function 1: {0B, +, 12}_1
Creating dr for _16->valid
analyze_innermost: success.
	base_address: pretmp_18
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: *pretmp_18
	Access function 0: 0
	Access function 1: {0B, +, 12}_1
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < _19
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) _19 + 4294967295, bounded by 2147483646
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < _19
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) _19 + 4294967295, bounded by 2147483646
Creating dr for this_5(D)->_num_reqs
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 136
	step: 0
	aligned to: 256
	base_object: *this_5(D)
	Access function 0: 1088
Creating dr for this_5(D)->_selected
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 124
	step: 0
	aligned to: 256
	base_object: *this_5(D)
	Access function 0: 992

Before limit_scops SCoP statistics (BBS:8, LOOPS:1, CONDITIONS:3, STMTS:22)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 1

SCoP statistics (BBS:3, LOOPS:1, CONDITIONS:1, STMTS:13)

SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Global statistics (BBS:10, LOOPS:1, CONDITIONS:3, STMTS:22)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
Creating dr for _16->valid
analyze_innermost: success.
	base_address: pretmp_18
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: *pretmp_18
	Access function 0: 0
	Access function 1: {0B, +, 12}_1

ISL AST generated by ISL: 
for (int c1 = 0; c1 < P_19; c1 += 1)
  S_6(c1);


Removing basic block 15
basic block 15, loop depth 0
 pred:      
goto <bb 13>;
 succ:       13



Updating SSA:
Registering new PHI nodes in block #3
Registering new PHI nodes in block #5
Registering new PHI nodes in block #12
Registering new PHI nodes in block #14
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Registering new PHI nodes in block #9
Registering new PHI nodes in block #13
Registering new PHI nodes in block #11
Registering new PHI nodes in block #10
Registering new PHI nodes in block #4

DFA Statistics for virtual void Arbiter::Clear()

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             20        160b
DEF operands                              7         56b
VUSE operands                             7         56b
VDEF operands                             3         24b
PHI nodes                                 6        624b
PHI arguments                            11        528b
---------------------------------------------------------
Total memory used by DFA/SSA data                 1448b
---------------------------------------------------------

Average number of arguments per PHI node: 1.8 (max: 2)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_7 -> { .MEM_22 }
Incremental SSA update started at block: 3
Number of blocks in CFG: 16
Number of blocks to update: 5 ( 31%)
Affected blocks: 4 9 10 13 14


Applying pattern match.pd:491, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223

Updating SSA:
creating PHI node in block #17 for .MEM
creating PHI node in block #20 for .MEM
Registering new PHI nodes in block #0
Registering new PHI nodes in block #2
Updating SSA information for statement _6 = this_5(D)->_num_reqs;
Registering new PHI nodes in block #3
Updating SSA information for statement _19 = this_5(D)->_size;
Registering new PHI nodes in block #5
Updating SSA information for statement pretmp_18 = MEM[(struct entry_t * *)this_5(D) + 96B];
Registering new PHI nodes in block #12
Registering new PHI nodes in block #16
Registering new PHI nodes in block #22
Registering new PHI nodes in block #20
Registering new PHI nodes in block #25
Updating SSA information for statement _27->valid = 0;
Registering new PHI nodes in block #23
Registering new PHI nodes in block #21
Registering new PHI nodes in block #24
Registering new PHI nodes in block #18
Registering new PHI nodes in block #19
Registering new PHI nodes in block #17
Registering new PHI nodes in block #14
Registering new PHI nodes in block #6
Updating SSA information for statement _16->valid = 0;
Registering new PHI nodes in block #7
Registering new PHI nodes in block #9
Registering new PHI nodes in block #13
Registering new PHI nodes in block #11
Registering new PHI nodes in block #10
Registering new PHI nodes in block #4
Updating SSA information for statement this_5(D)->_num_reqs = 0;
Updating SSA information for statement this_5(D)->_selected = -1;
Registering new PHI nodes in block #8
Updating SSA information for statement return;

DFA Statistics for virtual void Arbiter::Clear()

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             32        256b
DEF operands                             14        112b
VUSE operands                             8         64b
VDEF operands                             4         32b
PHI nodes                                 9        936b
PHI arguments                            17        816b
---------------------------------------------------------
Total memory used by DFA/SSA data                 2216b
---------------------------------------------------------

Average number of arguments per PHI node: 1.9 (max: 2)


Hash table statistics:
    var_infos:   size 61, 1 elements, 0.000000 collision/search ratio


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_14 -> { .MEM_10 }

Symbols to be put in SSA form
{ D.32821 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 26
Number of blocks to update: 24 ( 92%)
Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 16 17 18 19 20 21 22 23 24 25



1 loops carried no dependency.
Merging blocks 5 and 12
Removing basic block 10
basic block 10, loop depth 0
 pred:      
goto <bb 4>;
 succ:       4


Removing basic block 11
basic block 11, loop depth 0
 pred:      
goto <bb 4>;
 succ:       4


Removing basic block 14
basic block 14, loop depth 0
 pred:      
 succ:       13


Removing basic block 18
basic block 18, loop depth 0
 pred:      
 succ:       17


Removing basic block 19
basic block 19, loop depth 0
 pred:      
goto <bb 17>;
 succ:       17


Merging blocks 20 and 25
Removing basic block 24
basic block 24, loop depth 0
 pred:      
 succ:       17


Removing basic block 9
basic block 9, loop depth 0
 pred:       6
goto <bb 13>;
 succ:       13


Removing basic block 7
basic block 7, loop depth 1
 pred:       6
goto <bb 6>;
 succ:       6


Removing basic block 6
basic block 6, loop depth 1
 pred:       5
# i_20 = PHI <0(5)>
# DEBUG i => i_20
_8 = (long unsigned int) i_20;
# DEBUG D#28 => &this_5(D)->_request
# DEBUG D#7 => D#28
# DEBUG __n => _8
# DEBUG this => D#7
_15 = _8 * 12;
_16 = pretmp_18 + _15;
_16->valid = 0;
i_11 = i_20 + 1;
# DEBUG i => i_11
# DEBUG i => i_11
if (i_11 >= _19)
 succ:      


Merging blocks 5 and 16
Merging blocks 17 and 13
Merging blocks 20 and 23
fix_loop_structure: removing loop 1
Analyzing # of iterations of loop 2
  exit condition [0, + , 1](no_overflow) < (signed long) _19 + -1
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if _19 <= 0
    # of iterations (unsigned long) ((signed long) _19 + -1), bounded by 9223372036854775806
Analyzing # of iterations of loop 2
  exit condition [0, + , 1](no_overflow) < (signed long) _19 + -1
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if _19 <= 0
    # of iterations (unsigned long) ((signed long) _19 + -1), bounded by 9223372036854775806
Analyzing # of iterations of loop 2
  exit condition [0, + , 1](no_overflow) < (signed long) _19 + -1
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if _19 <= 0
    # of iterations (unsigned long) ((signed long) _19 + -1), bounded by 9223372036854775806
Statement (exit)if (graphite_IV.182_2 < _17)
 is executed at most (unsigned long) ((signed long) _19 + -1) (bounded by 9223372036854775806) + 1 times in loop 2.
Induction variable (struct entry_t *) pretmp_18 + 12 * iteration does not wrap in statement _27 = pretmp_18 + _26;
 in loop 2.
Statement _27 = pretmp_18 + _26;
 is executed at most 1537228672809129300 (bounded by 1537228672809129300) + 1 times in loop 2.
Induction variable (signed long) 1 + 1 * iteration does not wrap in statement graphite_IV.182_9 = graphite_IV.182_2 + 1;
 in loop 2.
Statement graphite_IV.182_9 = graphite_IV.182_2 + 1;
 is executed at most 9223372036854775806 (bounded by 9223372036854775806) + 1 times in loop 2.
Reducing loop iteration estimate by 1; undefined statement must be executed at the last iteration.
Predictions for bb 2
  DS theory heuristics: 80.9%
  first match heuristics (ignored): 73.0%
  combined heuristics: 80.9%
  opcode values positive (on trees) heuristics: 73.0%
  early return (on trees) heuristics: 61.0%
Predictions for bb 3
  DS theory heuristics: 19.1%
  first match heuristics (ignored): 27.0%
  combined heuristics: 19.1%
  early return (on trees) heuristics: 39.0%
  opcode values positive (on trees) heuristics: 27.0%
1 edges in bb 4 predicted to even probabilities
Predictions for bb 5
  no prediction heuristics: 50.0%
  combined heuristics: 50.0%
1 edges in bb 6 predicted to even probabilities
Predictions for bb 7
  DS theory heuristics (ignored): 91.0%
  first match heuristics: 91.0%
  combined heuristics: 91.0%
  loop exit heuristics: 91.0%
1 edges in bb 8 predicted to even probabilities
1 edges in bb 9 predicted to even probabilities
1 edges in bb 10 predicted to even probabilities
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_10 })
  {
    <bb 2>:
    # VUSE <.MEM_4(D)>
    _6 = this_5(D)->_num_reqs;
    if (_6 > 0)
      goto <bb 3>;
    else
      goto <bb 10>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 bb_5 })
  {
    <bb 3>:
    # DEBUG i => 0
    # VUSE <.MEM_4(D)>
    _19 = this_5(D)->_size;
    if (_19 <= 0)
      goto <bb 4>;
    else
      goto <bb 5>;

  }
  bb_4 (preds = {bb_3 bb_9 }, succs = {bb_10 })
  {
    <bb 4>:
    # .MEM_24 = PHI <.MEM_4(D)(3), .MEM_28(9)>
    # .MEM_12 = VDEF <.MEM_24>
    this_5(D)->_num_reqs = 0;
    # .MEM_13 = VDEF <.MEM_12>
    this_5(D)->_selected = -1;
    goto <bb 10>;

  }
  bb_5 (preds = {bb_3 }, succs = {bb_6 bb_9 })
  {
    <bb 5>:
    # VUSE <.MEM_4(D)>
    pretmp_18 = MEM[(struct entry_t * *)this_5(D) + 96B];
    _1 = _19 > 0;
    if (_1 != 0)
      goto <bb 6>;
    else
      goto <bb 9>;

  }
  bb_6 (preds = {bb_5 }, succs = {bb_7 })
  {
    <bb 6>:
    _23 = (signed long) _19;
    _17 = _23 + -1;

  }
  bb_9 (preds = {bb_7 bb_5 }, succs = {bb_4 })
  {
    <bb 9>:
    # .MEM_28 = PHI <.MEM_14(7), .MEM_4(D)(5)>
    goto <bb 4>;

  }
  bb_10 (preds = {bb_2 bb_4 }, succs = {bb_1 })
  {
    <bb 10>:
    # .MEM_3 = PHI <.MEM_4(D)(2), .MEM_13(4)>
    # VUSE <.MEM_3>
    return;

  }
  loop_2 (header = 7, latch = 8, niter = (unsigned long) ((signed long) _19 + -1), upper_bound = 1537228672809129300)
  {
    bb_7 (preds = {bb_6 bb_8 }, succs = {bb_8 bb_9 })
    {
      <bb 7>:
      # graphite_IV.182_2 = PHI <0(6), graphite_IV.182_9(8)>
      # .MEM_29 = PHI <.MEM_4(D)(6), .MEM_14(8)>
      # DEBUG i => NULL
      # DEBUG D#28 => NULL
      # DEBUG D#7 => NULL
      # DEBUG __n => NULL
      # DEBUG this => NULL
      _25 = (sizetype) graphite_IV.182_2;
      _26 = _25 * 12;
      _27 = pretmp_18 + _26;
      # .MEM_14 = VDEF <.MEM_29>
      _27->valid = 0;
      # DEBUG i => NULL
      # DEBUG i => NULL
      graphite_IV.182_9 = graphite_IV.182_2 + 1;
      if (graphite_IV.182_2 < _17)
        goto <bb 8>;
      else
        goto <bb 9>;

    }
    bb_8 (preds = {bb_7 }, succs = {bb_7 })
    {
      <bb 8>:
      goto <bb 7>;

    }
  }
}

Pass statistics:
----------------

virtual void Arbiter::Clear() (struct ArbiterD.26830 * const thisD.30925)
{
  signed long graphite_IV.182D.34647;
  intD.9 iD.30927;
  boolD.2757 _1;
  intD.9 _6;
  signed long _17;
  struct N7Arbiter7entry_tED.26837 * pretmp_18;
  intD.9 _19;
  signed long _23;
  sizetype _25;
  sizetype _26;
  struct N7Arbiter7entry_tED.26837 * _27;

;;   basic block 2, loop depth 0, count 0, freq 2752, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_4(D)>
  _6 = this_5(D)->_num_reqsD.27589;
  if (_6 > 0)
    goto <bb 3>;
  else
    goto <bb 10>;
;;    succ:       3 [80.9%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [19.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 2226, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [80.9%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG iD.30927 => 0
  # VUSE <.MEM_4(D)>
  _19 = this_5(D)->_sizeD.27585;
  if (_19 <= 0)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4 [19.1%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [80.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 2226, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [19.1%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU)
  # .MEM_24 = PHI <.MEM_4(D)(3), .MEM_28(9)>
  # .MEM_12 = VDEF <.MEM_24>
  this_5(D)->_num_reqsD.27589 = 0;
  # .MEM_13 = VDEF <.MEM_12>
  this_5(D)->_selectedD.27586 = -1;
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 1800, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       3 [80.9%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  pretmp_18 = MEM[(struct N7Arbiter7entry_tED.26837 * *)this_5(D) + 96B];
  _1 = _19 > 0;
  if (_1 != 0)
    goto <bb 6>;
  else
    goto <bb 9>;
;;    succ:       6 [50.0%]  (TRUE_VALUE)
;;                9 [50.0%]  (FALSE_VALUE)

;;   basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [50.0%]  (TRUE_VALUE)
  _23 = (signed long) _19;
  _17 = _23 + -1;
;;    succ:       7 [100.0%]  (FALLTHRU)

;;   basic block 7, loop depth 1, count 0, freq 10000, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [100.0%]  (FALLTHRU)
;;                8 [100.0%]  (FALLTHRU,DFS_BACK)
  # graphite_IV.182_2 = PHI <0(6), graphite_IV.182_9(8)>
  # .MEM_29 = PHI <.MEM_4(D)(6), .MEM_14(8)>
  # DEBUG iD.30927 => NULL
  # DEBUG D#28ptD.0 => NULL
  # DEBUG D#7ptD.0 => NULL
  # DEBUG __nD.33093 => NULL
  # DEBUG thisD.33094 => NULL
  _25 = (sizetype) graphite_IV.182_2;
  _26 = _25 * 12;
  _27 = pretmp_18 + _26;
  # .MEM_14 = VDEF <.MEM_29>
  _27->validD.26834 = 0;
  # DEBUG iD.30927 => NULL
  # DEBUG iD.30927 => NULL
  graphite_IV.182_9 = graphite_IV.182_2 + 1;
  if (graphite_IV.182_2 < _17)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [91.0%]  (TRUE_VALUE)
;;                9 [9.0%]  (FALSE_VALUE,LOOP_EXIT)

;;   basic block 8, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [91.0%]  (TRUE_VALUE)
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,DFS_BACK)

;;   basic block 9, loop depth 0, count 0, freq 1800, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       7 [9.0%]  (FALSE_VALUE,LOOP_EXIT)
;;                5 [50.0%]  (FALSE_VALUE)
  # .MEM_28 = PHI <.MEM_14(7), .MEM_4(D)(5)>
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU)

;;   basic block 10, loop depth 0, count 0, freq 2752, maybe hot
;;    prev block 9, next block 1, flags: (NEW, REACHABLE)
;;    pred:       2 [19.1%]  (FALSE_VALUE,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_3 = PHI <.MEM_4(D)(2), .MEM_13(4)>
  # VUSE <.MEM_3>
  return;
;;    succ:       EXIT [100.0%] 

}



;; Function void std::vector<_Tp, _Alloc>::_M_fill_insert(std::vector<_Tp, _Alloc>::iterator, std::vector<_Tp, _Alloc>::size_type, const value_type&) [with _Tp = Arbiter::entry_t; _Alloc = std::allocator<Arbiter::entry_t>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<Arbiter::entry_t*, std::vector<Arbiter::entry_t> >; typename std::_Vector_base<_Tp, _Alloc>::pointer = Arbiter::entry_t*; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::value_type = Arbiter::entry_t] (_ZNSt6vectorIN7Arbiter7entry_tESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEmRKS1_, funcdef_no=1610, decl_uid=27505, cgraph_uid=614, symbol_order=615)


Pass statistics:
----------------

void std::vector<_Tp, _Alloc>::_M_fill_insert(std::vector<_Tp, _Alloc>::iterator, std::vector<_Tp, _Alloc>::size_type, const value_type&) [with _Tp = Arbiter::entry_t; _Alloc = std::allocator<Arbiter::entry_t>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<Arbiter::entry_t*, std::vector<Arbiter::entry_t> >; typename std::_Vector_base<_Tp, _Alloc>::pointer = Arbiter::entry_t*; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::value_type = Arbiter::entry_t] (struct vectorD.26839 * const thisD.27506, struct iteratorD.27150 __positionD.27507, size_typeD.27158 __nD.27508, const struct value_typeD.27145 & __xD.27509)
{
  const long unsigned intD.14 D.34992;
  const size_typeD.27158 __lenD.34986;
  size_typeD.27158 D.34991;
  size_typeD.27158 __nD.34984;
  struct N7Arbiter7entry_tED.26837 * D.34982;
  const ptrdiff_tD.2819 _NumD.34972;
  struct N7Arbiter7entry_tED.26837 * D.34973;
  intD.9 __x_copy$priD.34580;
  intD.9 __x_copy$idD.34579;
  unsigned char __x_copyD.34578;
  struct N7Arbiter7entry_tED.26837 * const __positionD.34577;
  struct N7Arbiter7entry_tED.26837 * __firstD.34547;
  const ptrdiff_tD.2819 _NumD.34541;
  const ptrdiff_tD.2819 _NumD.34502;
  struct N7Arbiter7entry_tED.26837 * __firstD.34432;
  long unsigned intD.14 __nD.34433;
  struct N7Arbiter7entry_tED.26837 * __firstD.34385;
  const ptrdiff_tD.2819 _NumD.34381;
  struct N7Arbiter7entry_tED.26837 * __firstD.34336;
  struct N7Arbiter7entry_tED.26837 * __new_finishD.31511;
  const size_typeD.27158 __elems_afterD.31475;
  struct N7Arbiter7entry_tED.26837 * _5;
  long intD.12 _6;
  long intD.12 _8;
  long intD.12 _9;
  long intD.12 _10;
  long unsigned intD.14 _11;
  struct N7Arbiter7entry_tED.26837 * const _17;
  long unsigned intD.14 _19;
  difference_typeD.31145 _22;
  long intD.12 _23;
  long unsigned intD.14 _25;
  long intD.12 _27;
  struct N7Arbiter7entry_tED.26837 * pretmp_29;
  long unsigned intD.14 _39;
  sizetype _40;
  struct N7Arbiter7entry_tED.26837 * _41;
  struct N7Arbiter7entry_tED.26837 * _44;
  long unsigned intD.14 _46;
  struct N7Arbiter7entry_tED.26837 * _49;
  long intD.12 _50;
  long intD.12 __first.6_52;
  struct N7Arbiter7entry_tED.26837 * _60;
  long unsigned intD.14 _64;
  long intD.12 _72;
  long unsigned intD.14 _74;
  struct N7Arbiter7entry_tED.26837 * _76;
  long unsigned intD.14 _80;
  long unsigned intD.14 _83;
  long unsigned intD.14 pretmp_88;
  long unsigned intD.14 pretmp_111;
  long unsigned intD.14 prephitmp_112;
  long intD.12 _113;
  long unsigned intD.14 _115;
  sizetype _116;
  struct N7Arbiter7entry_tED.26837 * _117;
  struct N7Arbiter7entry_tED.26837 * _121;
  struct N7Arbiter7entry_tED.26837 * iftmp.11_122;
  boolD.2757 _123;
  long intD.12 _125;
  long intD.12 _126;
  long intD.12 _127;
  long unsigned intD.14 _129;
  long intD.12 prephitmp_130;
  long unsigned intD.14 _142;
  long intD.12 prephitmp_146;
  long intD.12 pretmp_147;
  boolD.2757 _150;
  long intD.12 _151;
  long intD.12 _152;
  long intD.12 pretmp_153;
  long intD.12 pretmp_155;
  struct N7Arbiter7entry_tED.26837 * prephitmp_156;
  struct N7Arbiter7entry_tED.26837 * pretmp_157;
  struct N7Arbiter7entry_tED.26837 * prephitmp_158;
  struct N7Arbiter7entry_tED.26837 * pretmp_159;
  long intD.12 _160;
  long intD.12 _161;
  boolD.2757 _162;
  long intD.12 _163;
  long intD.12 _166;
  long intD.12 _167;
  long intD.12 _168;
  long unsigned intD.14 _170;
  long unsigned intD.14 prephitmp_172;
  long unsigned intD.14 pretmp_173;
  long unsigned intD.14 prephitmp_174;
  struct N7Arbiter7entry_tED.26837 * pretmp_175;
  struct N7Arbiter7entry_tED.26837 * prephitmp_176;
  long unsigned intD.14 pretmp_177;
  long unsigned intD.14 prephitmp_178;
  struct N7Arbiter7entry_tED.26837 * pretmp_182;
  struct N7Arbiter7entry_tED.26837 * prephitmp_183;

;;   basic block 2, loop depth 0, count 0, freq 4156, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#189ptD.0 => MEM[(struct __normal_iteratorD.27151 *)&__positionD.27507]
  # DEBUG __positionD.34577 => D#189ptD.0
  if (__n_2(D) != 0)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 3421, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_181 = PHI <.MEM_3(D)(2), .MEM_12(10), .MEM_13(13), .MEM_61(23), .MEM_164(26)>
  goto <bb 45>;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 2535, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal 
  __position_16 = MEM[(struct __normal_iteratorD.27151 *)&__positionD.27507];
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _5 = this_4(D)->D.27582._M_implD.27073._M_end_of_storageD.27077;
  _6 = (long intD.12) _5;
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  __first_7 = this_4(D)->D.27582._M_implD.27073._M_finishD.27076;
  _8 = (long intD.12) __first_7;
  _9 = _6 - _8;
  # RANGE [-768614336404564650, 768614336404564650]
  _10 = _9 /[ex] 12;
  # RANGE ~[768614336404564651, 17678129737304986965]
  _11 = (long unsigned intD.14) _10;
  if (__n_2(D) <= _11)
    goto <bb 5>;
  else
    goto <bb 28>;
;;    succ:       5 [71.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [29.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 1800, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [71.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  __x_copy_110 = MEM[(const struct N7Arbiter7entry_tED.26837 &)__x_21(D)];
  # DEBUG __x_copyD.34578 => __x_copy_110
  # VUSE <.MEM_3(D)>
  __x_copy$id_107 = MEM[(const struct N7Arbiter7entry_tED.26837 &)__x_21(D) + 4];
  # DEBUG __x_copy$idD.34579 => __x_copy$id_107
  # VUSE <.MEM_3(D)>
  __x_copy$pri_105 = MEM[(const struct N7Arbiter7entry_tED.26837 &)__x_21(D) + 8];
  # DEBUG __x_copy$priD.34580 => __x_copy$pri_105
  # DEBUG thisD.34331 => this_4(D)
  # DEBUG D#30ptD.0 => &this_4(D)->D.27582._M_implD.27073._M_finishD.27076
  # DEBUG thisD.34333 => NULL
  # DEBUG __iD.34332 => D#30ptD.0
  # DEBUG __lhsD.34328 => &D.31476
  # DEBUG __rhsD.34329 => &__positionD.27507
  # DEBUG thisD.33205 => &D.31476
  # DEBUG thisD.33203 => &__positionD.27507
  _27 = (long intD.12) __position_16;
  _23 = _8 - _27;
  # RANGE [-768614336404564650, 768614336404564650]
  _22 = _23 /[ex] 12;
  # RANGE ~[768614336404564651, 17678129737304986965]
  __elems_after_36 = (const size_typeD.27158) _22;
  # DEBUG __elems_afterD.31475 => __elems_after_36
  # DEBUG __old_finishD.31483 => __first_7
  if (__n_2(D) < __elems_after_36)
    goto <bb 6>;
  else
    goto <bb 15>;
;;    succ:       6 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#146ptD.0 => &this_4(D)->D.27582
  # DEBUG thisD.34383 => D#146ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _39 = __n_2(D) * 12;
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _40 = -_39;
  # PT = nonlocal escaped 
  _41 = __first_7 + _40;
  # DEBUG __firstD.34348 => _41
  # DEBUG __lastD.34349 => __first_7
  # DEBUG __resultD.34350 => __first_7
  # DEBUG __allocD.34351 => D#139ptD.0
  # DEBUG D#138ptD.0 => D#139ptD.0
  # DEBUG D#137ptD.0 => D#138ptD.0
  # DEBUG __firstD.34355 => _41
  # DEBUG __lastD.34354 => __first_7
  # DEBUG __resultD.34353 => __first_7
  # DEBUG D.34352 => D#137ptD.0
  # DEBUG __firstD.34358 => _41
  # DEBUG __lastD.34357 => __first_7
  # DEBUG __resultD.34356 => __first_7
  # DEBUG __assignableD.34361 => 1
  # DEBUG __firstD.34364 => _41
  # DEBUG __lastD.34363 => __first_7
  # DEBUG __resultD.34362 => __first_7
  # DEBUG __firstD.34367 => _41
  # DEBUG __lastD.34366 => __first_7
  # DEBUG __resultD.34365 => __first_7
  # DEBUG __itD.34079 => __first_7
  # DEBUG __itD.33529 => __first_7
  # DEBUG __itD.34077 => _41
  # DEBUG __itD.33529 => _41
  # DEBUG __firstD.34370 => _41
  # DEBUG __lastD.34369 => __first_7
  # DEBUG __resultD.34368 => __first_7
  # DEBUG __itD.34059 => __first_7
  # DEBUG __itD.33532 => __first_7
  # DEBUG __itD.34057 => __first_7
  # DEBUG __itD.33532 => __first_7
  # DEBUG __itD.34055 => _41
  # DEBUG __itD.33532 => _41
  # DEBUG __firstD.34373 => _41
  # DEBUG __lastD.34372 => __first_7
  # DEBUG __resultD.34371 => __first_7
  # DEBUG __simpleD.34377 => 1
  # DEBUG __firstD.34380 => _41
  # DEBUG __lastD.34379 => __first_7
  # DEBUG __resultD.34378 => __first_7
  __first.6_52 = (long intD.12) _41;
  _50 = _8 - __first.6_52;
  # RANGE [-768614336404564650, 768614336404564650]
  _Num_48 = _50 /[ex] 12;
  # DEBUG _NumD.34381 => _Num_48
  if (_Num_48 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 261, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _46 = (long unsigned intD.14) _50;
  # .MEM_104 = VDEF <.MEM_3(D)>
  # USE = nonlocal null { D.34995 } (escaped heap)
  # CLB = nonlocal null { D.34995 } (escaped heap)
  memmoveD.995 (__first_7, _41, _46);
  # VUSE <.MEM_104>
  pretmp_182 = this_4(D)->D.27582._M_implD.27073._M_finishD.27076;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_14 = PHI <.MEM_3(D)(6), .MEM_104(7)>
  # PT = nonlocal escaped 
  # prephitmp_183 = PHI <__first_7(6), pretmp_182(7)>
  # PT = nonlocal escaped 
  _44 = prephitmp_183 + _39;
  # .MEM_45 = VDEF <.MEM_14>
  this_4(D)->D.27582._M_implD.27073._M_finishD.27076 = _44;
  # DEBUG thisD.34346 => &__positionD.27507
  # DEBUG __firstD.34956 => D#189ptD.0
  # DEBUG __lastD.34957 => _41
  # DEBUG __resultD.34958 => __first_7
  # DEBUG __itD.33588 => _41
  # DEBUG __itD.33529 => _41
  # DEBUG __itD.33586 => D#189ptD.0
  # DEBUG __itD.33529 => D#189ptD.0
  # DEBUG __firstD.34961 => D#189ptD.0
  # DEBUG __lastD.34960 => _41
  # DEBUG __resultD.34959 => __first_7
  # DEBUG __itD.33568 => __first_7
  # DEBUG __itD.33532 => __first_7
  # DEBUG __itD.33566 => _41
  # DEBUG __itD.33532 => _41
  # DEBUG __itD.33564 => D#189ptD.0
  # DEBUG __itD.33532 => D#189ptD.0
  # DEBUG __firstD.34964 => D#189ptD.0
  # DEBUG __lastD.34963 => _41
  # DEBUG __resultD.34962 => __first_7
  # DEBUG __simpleD.34968 => 1
  # DEBUG __firstD.34971 => D#189ptD.0
  # DEBUG __lastD.34970 => _41
  # DEBUG __resultD.34969 => __first_7
  _113 = __first.6_52 - _27;
  # RANGE [-768614336404564650, 768614336404564650]
  _Num_114 = _113 /[ex] 12;
  # DEBUG _NumD.34972 => _Num_114
  if (_Num_114 != 0)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _115 = (long unsigned intD.14) _113;
  # RANGE [0, 18446744073709551615]
  _116 = -_115;
  # PT = nonlocal escaped 
  _117 = __first_7 + _116;
  # .MEM_144 = VDEF <.MEM_45>
  # USE = nonlocal null { D.34995 } (escaped heap)
  # CLB = nonlocal null { D.34995 } (escaped heap)
  memmoveD.995 (_117, __position_16, _115);
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_12 = PHI <.MEM_45(8), .MEM_144(9)>
  # DEBUG thisD.34344 => &__positionD.27507
  # PT = nonlocal 
  _49 = __position_16 + _39;
  # DEBUG thisD.34342 => &__positionD.27507
  # DEBUG __firstD.34336 => D#189ptD.0
  # DEBUG __lastD.34337 => _49
  # DEBUG __valueD.34338 => &__x_copyD.31473
  # DEBUG __firstD.34341 => D#189ptD.0
  if (__position_16 == _49)
    goto <bb 3>;
  else
    goto <bb 11>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  # __position_118 = PHI <__position_16(11), __position_15(14)>
  # .MEM_89 = PHI <.MEM_12(11), .MEM_58(14)>
  # DEBUG __firstD.34341 => __position_118
  # .MEM_66 = VDEF <.MEM_89>
  MEM[(struct N7Arbiter7entry_tED.26837 *)__position_118] = __x_copy_110;
  # .MEM_108 = VDEF <.MEM_66>
  MEM[(struct N7Arbiter7entry_tED.26837 *)__position_118 + 4B] = __x_copy$id_107;
  # .MEM_58 = VDEF <.MEM_108>
  MEM[(struct N7Arbiter7entry_tED.26837 *)__position_118 + 8B] = __x_copy$pri_105;
  # PT = nonlocal 
  __position_15 = __position_118 + 12;
  # DEBUG __firstD.34341 => __position_15
  # DEBUG __firstD.34341 => __position_15
  if (__position_15 == _49)
    goto <bb 13>;
  else
    goto <bb 14>;
;;    succ:       13 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_13 = PHI <.MEM_58(12)>
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       5 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#147ptD.0 => &this_4(D)->D.27582
  # DEBUG thisD.34452 => D#147ptD.0
  # RANGE [0, 18446744073709551615]
  __n_54 = __n_2(D) - __elems_after_36;
  # DEBUG __firstD.34432 => __first_7
  # DEBUG __nD.34433 => __n_54
  # DEBUG __xD.34434 => &__x_copyD.31473
  # DEBUG __niterD.34450 => __n_54
  # DEBUG __firstD.34449 => __first_7
  if (__n_54 == 0)
    goto <bb 20>;
  else
    goto <bb 16>;
;;    succ:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __n_120 = PHI <__n_54(16), __n_69(19)>
  # PT = nonlocal escaped 
  # __first_82 = PHI <__first_7(16), __first_70(19)>
  # .MEM_87 = PHI <.MEM_3(D)(16), .MEM_106(19)>
  # DEBUG __niterD.34450 => __n_120
  # DEBUG __firstD.34449 => __first_82
  # .MEM_57 = VDEF <.MEM_87>
  MEM[(struct N7Arbiter7entry_tED.26837 *)__first_82] = __x_copy_110;
  # .MEM_55 = VDEF <.MEM_57>
  MEM[(struct N7Arbiter7entry_tED.26837 *)__first_82 + 4B] = __x_copy$id_107;
  # .MEM_106 = VDEF <.MEM_55>
  MEM[(struct N7Arbiter7entry_tED.26837 *)__first_82 + 8B] = __x_copy$pri_105;
  # RANGE [0, 18446744073709551614]
  __n_69 = __n_120 + 18446744073709551615;
  # DEBUG __niterD.34450 => __n_69
  # PT = nonlocal escaped 
  __first_70 = __first_82 + 12;
  # DEBUG __firstD.34449 => __first_70
  # DEBUG __niterD.34450 => __n_69
  # DEBUG __firstD.34449 => __first_70
  if (__n_69 == 0)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 17, next block 19, flags: (NEW)
;;    pred:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  _170 = __n_54 * 12;
  # PT = nonlocal escaped 
  __first_137 = __first_7 + _170;
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       18 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_134 = PHI <__first_137(18), __first_7(15)>
  # .MEM_90 = PHI <.MEM_106(18), .MEM_3(D)(15)>
  # .MEM_56 = VDEF <.MEM_90>
  this_4(D)->D.27582._M_implD.27073._M_finishD.27076 = __first_134;
  # DEBUG D#148ptD.0 => &this_4(D)->D.27582
  # DEBUG thisD.34430 => D#148ptD.0
  # DEBUG thisD.34428 => &__positionD.27507
  # DEBUG __firstD.34393 => D#189ptD.0
  # DEBUG __lastD.34394 => __first_7
  # DEBUG __resultD.34395 => __first_134
  # DEBUG __allocD.34396 => D#139ptD.0
  # DEBUG D#138ptD.0 => D#139ptD.0
  # DEBUG D#137ptD.0 => D#138ptD.0
  # DEBUG __firstD.34400 => D#189ptD.0
  # DEBUG __lastD.34399 => __first_7
  # DEBUG __resultD.34398 => __first_134
  # DEBUG D.34397 => D#137ptD.0
  # DEBUG __firstD.34403 => D#189ptD.0
  # DEBUG __lastD.34402 => __first_7
  # DEBUG __resultD.34401 => __first_134
  # DEBUG __assignableD.34406 => 1
  # DEBUG __firstD.34409 => D#189ptD.0
  # DEBUG __lastD.34408 => __first_7
  # DEBUG __resultD.34407 => __first_134
  # DEBUG __firstD.34412 => D#189ptD.0
  # DEBUG __lastD.34411 => __first_7
  # DEBUG __resultD.34410 => __first_134
  # DEBUG __itD.34079 => __first_7
  # DEBUG __itD.33529 => __first_7
  # DEBUG __itD.34077 => D#189ptD.0
  # DEBUG __itD.33529 => D#189ptD.0
  # DEBUG __firstD.34415 => D#189ptD.0
  # DEBUG __lastD.34414 => __first_7
  # DEBUG __resultD.34413 => __first_134
  # DEBUG __itD.34059 => __first_134
  # DEBUG __itD.33532 => __first_134
  # DEBUG __itD.34057 => __first_7
  # DEBUG __itD.33532 => __first_7
  # DEBUG __itD.34055 => D#189ptD.0
  # DEBUG __itD.33532 => D#189ptD.0
  # DEBUG __firstD.34418 => D#189ptD.0
  # DEBUG __lastD.34417 => __first_7
  # DEBUG __resultD.34416 => __first_134
  # DEBUG __simpleD.34422 => 1
  # DEBUG __firstD.34425 => D#189ptD.0
  # DEBUG __lastD.34424 => __first_7
  # DEBUG __resultD.34423 => __first_134
  # DEBUG _NumD.34426 => _22
  if (_22 != 0)
    goto <bb 22>;
  else
    goto <bb 21>;
;;    succ:       22 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 639, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_177 = (long unsigned intD.14) _23;
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 261, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       20 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _64 = (long unsigned intD.14) _23;
  # .MEM_109 = VDEF <.MEM_56>
  # USE = nonlocal null { D.34995 } (escaped heap)
  # CLB = nonlocal null { D.34995 } (escaped heap)
  memmoveD.995 (__first_134, __position_16, _64);
  # VUSE <.MEM_109>
  pretmp_175 = this_4(D)->D.27582._M_implD.27073._M_finishD.27076;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       21 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_93 = PHI <.MEM_56(21), .MEM_109(22)>
  # PT = nonlocal escaped 
  # prephitmp_176 = PHI <__first_134(21), pretmp_175(22)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_178 = PHI <pretmp_177(21), _64(22)>
  # PT = nonlocal escaped 
  _60 = prephitmp_176 + prephitmp_178;
  # .MEM_61 = VDEF <.MEM_93>
  this_4(D)->D.27582._M_implD.27073._M_finishD.27076 = _60;
  # DEBUG thisD.34391 => &__positionD.27507
  # DEBUG __firstD.34385 => D#189ptD.0
  # DEBUG __lastD.34386 => __first_7
  # DEBUG __valueD.34387 => &__x_copyD.31473
  # DEBUG __firstD.34390 => D#189ptD.0
  if (__first_7 == __position_16)
    goto <bb 3>;
  else
    goto <bb 24>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 23, next block 25, flags: (NEW)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 24, next block 26, flags: (NEW)
;;    pred:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                27 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  # __position_119 = PHI <__position_16(24), __position_63(27)>
  # .MEM_145 = PHI <.MEM_61(24), .MEM_42(27)>
  # DEBUG __firstD.34390 => __position_119
  # .MEM_53 = VDEF <.MEM_145>
  MEM[(struct N7Arbiter7entry_tED.26837 *)__position_119] = __x_copy_110;
  # .MEM_51 = VDEF <.MEM_53>
  MEM[(struct N7Arbiter7entry_tED.26837 *)__position_119 + 4B] = __x_copy$id_107;
  # .MEM_42 = VDEF <.MEM_51>
  MEM[(struct N7Arbiter7entry_tED.26837 *)__position_119 + 8B] = __x_copy$pri_105;
  # PT = nonlocal 
  __position_63 = __position_119 + 12;
  # DEBUG __firstD.34390 => __position_63
  # DEBUG __firstD.34390 => __position_63
  if (__first_7 == __position_63)
    goto <bb 26>;
  else
    goto <bb 27>;
;;    succ:       26 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_164 = PHI <.MEM_42(25)>
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 26, next block 28, flags: (NEW)
;;    pred:       25 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       4 [29.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.34983 => this_4(D)
  # DEBUG __nD.34984 => __n_2(D)
  # DEBUG __nD.34984 => __n_2(D)
  # DEBUG __sD.34985 => "vector::_M_fill_insert"
  # DEBUG D#121ptD.0 => this_4(D)
  # DEBUG thisD.33624 => D#121ptD.0
  # DEBUG D#120ptD.0 => D#121ptD.0
  # DEBUG D#119ptD.0 => &D#120ptD.0->D.27582
  # DEBUG thisD.33614 => D#119ptD.0
  # DEBUG __aD.33606 => D#118ptD.0
  # DEBUG D#117ptD.0 => D#118ptD.0
  # DEBUG D#116ptD.0 => D#117ptD.0
  # DEBUG thisD.33597 => D#116ptD.0
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _17 = MEM[(struct N7Arbiter7entry_tED.26837 * *)this_4(D)];
  # DEBUG D#29ptD.0 => this_4(D)
  # DEBUG D#29ptD.0 => this_4(D)
  # DEBUG thisD.34989 => D#29ptD.0
  # DEBUG thisD.34990 => D#29ptD.0
  _125 = (long intD.12) _17;
  _126 = _8 - _125;
  # RANGE [-768614336404564650, 768614336404564650]
  _127 = _126 /[ex] 12;
  # RANGE ~[768614336404564651, 17678129737304986965]
  _128 = (const long unsigned intD.14) _127;
  # RANGE [768614336404564651, 2305843009213693951] NONZERO 2305843009213693951
  _129 = 1537228672809129301 - _128;
  if (__n_2(D) > _129)
    goto <bb 29>;
  else
    goto <bb 30>;
;;    succ:       29 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 0
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       28 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_143 = VDEF <.MEM_3(D)>
  # USE = nonlocal null { D.34995 } (escaped heap)
  # CLB = nonlocal null { D.34995 } (escaped heap)
  _ZSt20__throw_length_errorPKcD.2834 ("vector::_M_fill_insert");
;;    succ:      

;;   basic block 30, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       28 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#29ptD.0 => this_4(D)
  # DEBUG D#29ptD.0 => this_4(D)
  # DEBUG thisD.33642 => D#29ptD.0
  # DEBUG thisD.33641 => D#29ptD.0
  # DEBUG D#29ptD.0 => this_4(D)
  # DEBUG D#29ptD.0 => this_4(D)
  # DEBUG thisD.33637 => D#29ptD.0
  # DEBUG thisD.33636 => D#29ptD.0
  # DEBUG __aD.34988 => &D.34992
  # DEBUG __bD.34987 => &__nD.34984
  _83 = MAX_EXPR <__n_2(D), _128>;
  # RANGE [0, 18446744073709551615]
  __len_133 = _83 + _128;
  # DEBUG __lenD.34986 => __len_133
  # DEBUG D#29ptD.0 => this_4(D)
  # DEBUG D#29ptD.0 => this_4(D)
  # DEBUG thisD.33629 => D#29ptD.0
  # DEBUG thisD.33628 => D#29ptD.0
  # DEBUG D#121ptD.0 => this_4(D)
  # DEBUG thisD.33644 => D#121ptD.0
  # DEBUG D#120ptD.0 => D#121ptD.0
  # DEBUG D#119ptD.0 => &D#120ptD.0->D.27582
  # DEBUG thisD.33614 => D#119ptD.0
  # DEBUG __aD.33606 => D#118ptD.0
  # DEBUG D#117ptD.0 => D#118ptD.0
  # DEBUG D#116ptD.0 => D#117ptD.0
  # DEBUG thisD.33597 => D#116ptD.0
  _162 = __len_133 > 1537228672809129301;
  _150 = _128 > __len_133;
  _123 = _150 | _162;
  if (_123 != 0)
    goto <bb 46>;
  else
    goto <bb 47>;
;;    succ:       46 [67.0%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [33.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 8, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       47 [9.4%]  (TRUE_VALUE,EXECUTABLE)
  pretmp_173 = __len_133 * 12;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 661, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       46 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,EXECUTABLE)
  # _166 = PHI <_152(46), _161(31)>
  # _167 = PHI <_151(46), _160(31)>
  # RANGE [12, 18446744073709551612] NONZERO 18446744073709551612
  # prephitmp_174 = PHI <18446744073709551612(46), pretmp_173(31)>
  # DEBUG __lenD.31507 => NULL
  # DEBUG thisD.34572 => this_4(D)
  # DEBUG D#52ptD.0 => &this_4(D)->D.27582._M_implD.27073._M_startD.27075
  # DEBUG thisD.34574 => NULL
  # DEBUG __iD.34573 => D#52ptD.0
  # DEBUG __lhsD.34569 => &__positionD.27507
  # DEBUG __rhsD.34570 => &D.31509
  # DEBUG thisD.33205 => &__positionD.27507
  # DEBUG thisD.33203 => &D.31509
  # DEBUG D#162ptD.0 => _167 /[ex] 12
  # DEBUG __elems_beforeD.31508 => (const size_typeD.27158) D#162ptD.0
  # DEBUG D#161ptD.0 => &this_4(D)->D.27582
  # DEBUG D#129ptD.0 => D#161ptD.0
  # DEBUG __nD.34974 => NULL
  # DEBUG thisD.34975 => D#129ptD.0
  # DEBUG D#128ptD.0 => D#129ptD.0
  # DEBUG D#127ptD.0 => &D#128ptD.0->_M_implD.27073
  # DEBUG D#126ptD.0 => D#127ptD.0
  # DEBUG __nD.34978 => NULL
  # DEBUG __aD.34977 => D#126ptD.0
  # DEBUG D#125ptD.0 => D#126ptD.0
  # DEBUG D#123ptD.0 => D#125ptD.0
  # DEBUG D#124ptD.0 => 0B
  # DEBUG __nD.34981 => NULL
  # DEBUG thisD.34979 => D#123ptD.0
  # DEBUG D.34980 => D#124ptD.0
  # DEBUG D#122ptD.0 => D#123ptD.0
  # DEBUG D#116ptD.0 => D#122ptD.0
  # DEBUG thisD.33649 => D#116ptD.0
  # .MEM_140 = VDEF <.MEM_3(D)>
  # PT = { D.34995 } (escaped heap)
  # USE = nonlocal null { D.34995 } (escaped heap)
  # CLB = nonlocal null { D.34995 } (escaped heap)
  _121 = _ZnwmD.2764 (prephitmp_174);
  # VUSE <.MEM_140>
  pretmp_29 = this_4(D)->D.27582._M_implD.27073._M_startD.27075;
  # VUSE <.MEM_140>
  pretmp_157 = this_4(D)->D.27582._M_implD.27073._M_finishD.27076;
  pretmp_159 = _121 + prephitmp_174;
  pretmp_155 = (long intD.12) pretmp_157;
  pretmp_153 = (long intD.12) pretmp_29;
  pretmp_147 = _166 - pretmp_153;
;;    succ:       33 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       47 [90.6%]  (FALSE_VALUE,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.34995 } (escaped heap)
  # iftmp.11_122 = PHI <0B(47), _121(32)>
  # .MEM_135 = PHI <.MEM_3(D)(47), .MEM_140(32)>
  # _168 = PHI <_161(47), _166(32)>
  # _163 = PHI <_160(47), _167(32)>
  # PT = nonlocal escaped 
  # prephitmp_156 = PHI <_17(47), pretmp_29(32)>
  # PT = null { D.34995 } (escaped heap)
  # prephitmp_158 = PHI <0B(47), pretmp_159(32)>
  # prephitmp_130 = PHI <_8(47), pretmp_155(32)>
  # prephitmp_146 = PHI <_160(47), pretmp_147(32)>
  # DEBUG __new_startD.31510 => NULL
  # DEBUG __new_finishD.31511 => NULL
  # DEBUG D#142ptD.0 => &this_4(D)->D.27582
  # DEBUG thisD.34567 => D#142ptD.0
  # RANGE [0, 18446744073709551615]
  _19 = (long unsigned intD.14) _163;
  # PT = null { D.34995 } (escaped heap)
  __first_20 = iftmp.11_122 + _19;
  # DEBUG __firstD.34547 => __first_20
  # DEBUG __nD.34548 => __n_2(D)
  # DEBUG __xD.34549 => __x_21(D)
  # DEBUG __niterD.34565 => __n_2(D)
  # DEBUG __firstD.34564 => __first_20
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 1, count 0, freq 7428, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       35 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 2305843009213693951] NONZERO 2305843009213693951
  # __n_141 = PHI <__n_85(35), __n_2(D)(33)>
  # PT = null { D.34995 } (escaped heap)
  # __first_165 = PHI <__first_86(35), __first_20(33)>
  # .MEM_139 = PHI <.MEM_99(35), .MEM_135(33)>
  # DEBUG __niterD.34565 => __n_141
  # DEBUG __firstD.34564 => __first_165
  # .MEM_99 = VDEF <.MEM_139>
  *__first_165 = MEM[(const struct N7Arbiter7entry_tED.26837 &)__x_21(D)];
  # RANGE [0, 2305843009213693950] NONZERO 2305843009213693951
  __n_85 = __n_141 + 18446744073709551615;
  # DEBUG __niterD.34565 => __n_85
  # PT = null { D.34995 } (escaped heap)
  __first_86 = __first_165 + 12;
  # DEBUG __firstD.34564 => __first_86
  # DEBUG __niterD.34565 => __n_85
  # DEBUG __firstD.34564 => __first_86
  if (__n_85 == 0)
    goto <bb 36>;
  else
    goto <bb 35>;
;;    succ:       36 [9.9%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [90.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 35, loop depth 1, count 0, freq 6693, maybe hot
;;    prev block 34, next block 36, flags: (NEW)
;;    pred:       34 [90.1%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 34>;
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       34 [9.9%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __new_finishD.31511 => 0B
  # DEBUG D#143ptD.0 => &this_4(D)->D.27582
  # DEBUG thisD.34545 => D#143ptD.0
  # DEBUG thisD.34543 => &__positionD.27507
  # DEBUG D#188ptD.0 => this_4(D)->D.27582._M_implD.27073._M_startD.27075
  # DEBUG __firstD.34508 => D#188ptD.0
  # DEBUG __lastD.34509 => D#189ptD.0
  # DEBUG __resultD.34510 => NULL
  # DEBUG __allocD.34511 => D#141ptD.0
  # DEBUG D#140ptD.0 => D#141ptD.0
  # DEBUG D#137ptD.0 => D#140ptD.0
  # DEBUG __firstD.34515 => D#188ptD.0
  # DEBUG __lastD.34514 => D#189ptD.0
  # DEBUG __resultD.34513 => NULL
  # DEBUG D.34512 => D#137ptD.0
  # DEBUG __firstD.34518 => D#188ptD.0
  # DEBUG __lastD.34517 => D#189ptD.0
  # DEBUG __resultD.34516 => NULL
  # DEBUG __assignableD.34521 => 1
  # DEBUG __firstD.34524 => D#188ptD.0
  # DEBUG __lastD.34523 => D#189ptD.0
  # DEBUG __resultD.34522 => NULL
  # DEBUG __firstD.34527 => D#188ptD.0
  # DEBUG __lastD.34526 => D#189ptD.0
  # DEBUG __resultD.34525 => NULL
  # DEBUG __itD.34079 => D#189ptD.0
  # DEBUG __itD.33529 => D#189ptD.0
  # DEBUG __itD.34077 => D#188ptD.0
  # DEBUG __itD.33529 => D#188ptD.0
  # DEBUG __firstD.34530 => D#188ptD.0
  # DEBUG __lastD.34529 => D#189ptD.0
  # DEBUG __resultD.34528 => NULL
  # DEBUG __itD.34059 => NULL
  # DEBUG __itD.33532 => NULL
  # DEBUG __itD.34057 => D#189ptD.0
  # DEBUG __itD.33532 => D#189ptD.0
  # DEBUG __itD.34055 => D#188ptD.0
  # DEBUG __itD.33532 => D#188ptD.0
  # DEBUG __firstD.34533 => D#188ptD.0
  # DEBUG __lastD.34532 => D#189ptD.0
  # DEBUG __resultD.34531 => NULL
  # DEBUG __simpleD.34537 => 1
  # DEBUG __firstD.34540 => D#188ptD.0
  # DEBUG __lastD.34539 => D#189ptD.0
  # DEBUG __resultD.34538 => NULL
  # DEBUG D#187ptD.0 => (long intD.12) D#188ptD.0
  # DEBUG D#186ptD.0 => _168 - D#187ptD.0
  # RANGE [-768614336404564650, 768614336404564650]
  _Num_79 = prephitmp_146 /[ex] 12;
  # DEBUG _NumD.34541 => _Num_79
  if (_Num_79 != 0)
    goto <bb 38>;
  else
    goto <bb 37>;
;;    succ:       38 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 522, maybe hot
;;    prev block 36, next block 38, flags: (NEW)
;;    pred:       36 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_88 = (long unsigned intD.14) prephitmp_146;
  goto <bb 39>;
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 213, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       36 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _80 = (long unsigned intD.14) prephitmp_146;
  # .MEM_100 = VDEF <.MEM_99>
  # USE = nonlocal null { D.34995 } (escaped heap)
  # CLB = nonlocal null { D.34995 } (escaped heap)
  memmoveD.995 (iftmp.11_122, prephitmp_156, _80);
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       37 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_96 = PHI <.MEM_99(37), .MEM_100(38)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_112 = PHI <pretmp_88(37), _80(38)>
  # DEBUG D#185ptD.0 => (long unsigned intD.14) D#186ptD.0
  # DEBUG __new_finishD.31511 => iftmp.11_122 + D#185ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _25 = __n_2(D) * 12;
  # RANGE [0, 18446744073709551615]
  _142 = _25 + prephitmp_112;
  # PT = null { D.34995 } (escaped heap)
  __new_finish_26 = iftmp.11_122 + _142;
  # DEBUG __new_finishD.31511 => __new_finish_26
  # DEBUG D#144ptD.0 => &this_4(D)->D.27582
  # DEBUG thisD.34506 => D#144ptD.0
  # DEBUG D#184ptD.0 => this_4(D)->D.27582._M_implD.27073._M_finishD.27076
  # DEBUG thisD.34504 => &__positionD.27507
  # DEBUG __firstD.34469 => D#189ptD.0
  # DEBUG __lastD.34470 => D#184ptD.0
  # DEBUG __resultD.34471 => __new_finish_26
  # DEBUG __allocD.34472 => D#141ptD.0
  # DEBUG D#140ptD.0 => D#141ptD.0
  # DEBUG D#137ptD.0 => D#140ptD.0
  # DEBUG __firstD.34476 => D#189ptD.0
  # DEBUG __lastD.34475 => D#184ptD.0
  # DEBUG __resultD.34474 => __new_finish_26
  # DEBUG D.34473 => D#137ptD.0
  # DEBUG __firstD.34479 => D#189ptD.0
  # DEBUG __lastD.34478 => D#184ptD.0
  # DEBUG __resultD.34477 => __new_finish_26
  # DEBUG __assignableD.34482 => 1
  # DEBUG __firstD.34485 => D#189ptD.0
  # DEBUG __lastD.34484 => D#184ptD.0
  # DEBUG __resultD.34483 => __new_finish_26
  # DEBUG __firstD.34488 => D#189ptD.0
  # DEBUG __lastD.34487 => D#184ptD.0
  # DEBUG __resultD.34486 => __new_finish_26
  # DEBUG __itD.34079 => D#184ptD.0
  # DEBUG __itD.33529 => D#184ptD.0
  # DEBUG __itD.34077 => D#189ptD.0
  # DEBUG __itD.33529 => D#189ptD.0
  # DEBUG __firstD.34491 => D#189ptD.0
  # DEBUG __lastD.34490 => D#184ptD.0
  # DEBUG __resultD.34489 => __new_finish_26
  # DEBUG __itD.34059 => __new_finish_26
  # DEBUG __itD.33532 => __new_finish_26
  # DEBUG __itD.34057 => D#184ptD.0
  # DEBUG __itD.33532 => D#184ptD.0
  # DEBUG __itD.34055 => D#189ptD.0
  # DEBUG __itD.33532 => D#189ptD.0
  # DEBUG __firstD.34494 => D#189ptD.0
  # DEBUG __lastD.34493 => D#184ptD.0
  # DEBUG __resultD.34492 => __new_finish_26
  # DEBUG __simpleD.34498 => 1
  # DEBUG __firstD.34501 => D#189ptD.0
  # DEBUG __lastD.34500 => D#184ptD.0
  # DEBUG __resultD.34499 => __new_finish_26
  _72 = prephitmp_130 - _168;
  # RANGE [-768614336404564650, 768614336404564650]
  _Num_73 = _72 /[ex] 12;
  # DEBUG _NumD.34502 => _Num_73
  if (_Num_73 != 0)
    goto <bb 41>;
  else
    goto <bb 40>;
;;    succ:       41 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 0, count 0, freq 522, maybe hot
;;    prev block 39, next block 41, flags: (NEW)
;;    pred:       39 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_111 = (long unsigned intD.14) _72;
  goto <bb 42>;
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 41, loop depth 0, count 0, freq 213, maybe hot
;;    prev block 40, next block 42, flags: (NEW, REACHABLE)
;;    pred:       39 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _74 = (long unsigned intD.14) _72;
  # .MEM_101 = VDEF <.MEM_96>
  # USE = nonlocal null { D.34995 } (escaped heap)
  # CLB = nonlocal null { D.34995 } (escaped heap)
  memcpyD.992 (__new_finish_26, __position_16, _74);
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       40 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_97 = PHI <.MEM_96(40), .MEM_101(41)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_172 = PHI <pretmp_111(40), _74(41)>
  # PT = null { D.34995 } (escaped heap)
  _76 = __new_finish_26 + prephitmp_172;
  # DEBUG __new_finishD.31511 => _76
  # DEBUG D#145ptD.0 => &this_4(D)->D.27582
  # DEBUG thisD.34467 => D#145ptD.0
  # DEBUG D#160ptD.0 => this_4(D)->D.27582._M_implD.27073._M_finishD.27076
  # DEBUG D#159ptD.0 => this_4(D)->D.27582._M_implD.27073._M_startD.27075
  # DEBUG __firstD.34464 => D#159ptD.0
  # DEBUG __lastD.34465 => D#160ptD.0
  # DEBUG D.34466 => NULL
  # DEBUG D#46ptD.0 => D#159ptD.0
  # DEBUG D#47ptD.0 => D#160ptD.0
  # DEBUG __firstD.33184 => D#46ptD.0
  # DEBUG __lastD.33183 => D#47ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#44ptD.0 => D#46ptD.0
  # DEBUG D#42ptD.0 => D#44ptD.0
  # DEBUG D#43ptD.0 => D#45ptD.0
  # DEBUG D.33173 => D#42ptD.0
  # DEBUG D.33172 => D#43ptD.0
  # DEBUG D#158ptD.0 => this_4(D)->D.27582._M_implD.27073._M_end_of_storageD.27077
  # DEBUG D#157ptD.0 => (long intD.12) D#158ptD.0
  # DEBUG D#156ptD.0 => (long intD.12) D#188ptD.0
  # DEBUG D#155ptD.0 => D#157ptD.0 - D#156ptD.0
  # DEBUG D#154ptD.0 => D#155ptD.0 /[ex] 12
  # DEBUG D#153ptD.0 => (long unsigned intD.14) D#154ptD.0
  # DEBUG D#152ptD.0 => &this_4(D)->D.27582
  # DEBUG thisD.34454 => D#152ptD.0
  # DEBUG __pD.34455 => D#188ptD.0
  # DEBUG __nD.34456 => D#153ptD.0
  if (prephitmp_156 != 0B)
    goto <bb 43>;
  else
    goto <bb 44>;
;;    succ:       43 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 43, loop depth 0, count 0, freq 513, maybe hot
;;    prev block 42, next block 44, flags: (NEW, REACHABLE)
;;    pred:       42 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#104ptD.0 => &D#152ptD.0->_M_implD.27073
  # DEBUG D#102ptD.0 => D#104ptD.0
  # DEBUG D#103ptD.0 => D#153ptD.0
  # DEBUG __pD.34460 => D#188ptD.0
  # DEBUG __aD.34458 => D#102ptD.0
  # DEBUG __nD.34459 => D#103ptD.0
  # DEBUG D#101ptD.0 => D#103ptD.0
  # DEBUG D#100ptD.0 => D#102ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#101ptD.0
  # DEBUG __pD.34463 => D#188ptD.0
  # DEBUG thisD.34461 => D#98ptD.0
  # DEBUG D.34462 => D#99ptD.0
  # .MEM_102 = VDEF <.MEM_97>
  # USE = nonlocal null { D.34995 } (escaped heap)
  # CLB = nonlocal null { D.34995 } (escaped heap)
  _ZdlPvD.2766 (prephitmp_156);
;;    succ:       44 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 44, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 43, next block 45, flags: (NEW, REACHABLE)
;;    pred:       43 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                42 [30.2%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_98 = PHI <.MEM_102(43), .MEM_97(42)>
  # .MEM_30 = VDEF <.MEM_98>
  this_4(D)->D.27582._M_implD.27073._M_startD.27075 = iftmp.11_122;
  # .MEM_31 = VDEF <.MEM_30>
  this_4(D)->D.27582._M_implD.27073._M_finishD.27076 = _76;
  # .MEM_34 = VDEF <.MEM_31>
  this_4(D)->D.27582._M_implD.27073._M_end_of_storageD.27077 = prephitmp_158;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 45, loop depth 0, count 0, freq 4156, maybe hot
;;    prev block 44, next block 46, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                44 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_181(3), .MEM_34(44)>
  # VUSE <.MEM_1>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 46, loop depth 0, count 0, freq 654, maybe hot
;;   Invalid sum of incoming frequencies 492, should be 654
;;    prev block 45, next block 47, flags: (NEW, REACHABLE)
;;    pred:       30 [67.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __lenD.31507 => NULL
  # DEBUG thisD.34572 => this_4(D)
  # DEBUG D#52ptD.0 => &this_4(D)->D.27582._M_implD.27073._M_startD.27075
  # DEBUG thisD.34574 => NULL
  # DEBUG __iD.34573 => D#52ptD.0
  # DEBUG __lhsD.34569 => &__positionD.27507
  # DEBUG __rhsD.34570 => &D.31509
  # DEBUG thisD.33205 => &__positionD.27507
  _152 = (long intD.12) __position_16;
  # DEBUG thisD.33203 => &D.31509
  _151 = _152 - _125;
  # DEBUG D#162ptD.0 => _151 /[ex] 12
  # DEBUG __elems_beforeD.31508 => (const size_typeD.27158) D#162ptD.0
  # DEBUG D#161ptD.0 => &this_4(D)->D.27582
  # DEBUG D#129ptD.0 => D#161ptD.0
  # DEBUG __nD.34974 => NULL
  # DEBUG thisD.34975 => D#129ptD.0
  # DEBUG D#128ptD.0 => D#129ptD.0
  goto <bb 32>;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 47, loop depth 0, count 0, freq 80, maybe hot
;;   Invalid sum of incoming frequencies 243, should be 80
;;    prev block 46, next block 1, flags: (NEW, REACHABLE)
;;    pred:       30 [33.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __lenD.31507 => NULL
  # DEBUG thisD.34572 => this_4(D)
  # DEBUG D#52ptD.0 => &this_4(D)->D.27582._M_implD.27073._M_startD.27075
  # DEBUG thisD.34574 => NULL
  # DEBUG __iD.34573 => D#52ptD.0
  # DEBUG __lhsD.34569 => &__positionD.27507
  # DEBUG __rhsD.34570 => &D.31509
  # DEBUG thisD.33205 => &__positionD.27507
  _161 = (long intD.12) __position_16;
  # DEBUG thisD.33203 => &D.31509
  _160 = _161 - _125;
  # DEBUG D#162ptD.0 => _160 /[ex] 12
  # DEBUG __elems_beforeD.31508 => (const size_typeD.27158) D#162ptD.0
  # DEBUG D#161ptD.0 => &this_4(D)->D.27582
  # DEBUG D#129ptD.0 => D#161ptD.0
  # DEBUG __nD.34974 => NULL
  # DEBUG thisD.34975 => D#129ptD.0
  # DEBUG D#128ptD.0 => D#129ptD.0
  if (__len_133 != 0)
    goto <bb 31>;
  else
    goto <bb 33>;
;;    succ:       31 [9.4%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [90.6%]  (FALSE_VALUE,EXECUTABLE)

}


Creating dr for MEM[(struct __normal_iterator *)&__position]
analyze_innermost: success.
	base_address: &__position
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct __normal_iterator *)&__position]
Creating dr for this_4(D)->D.27582._M_impl._M_end_of_storage
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 128
	Access function 1: 0
	Access function 2: 0
Creating dr for this_4(D)->D.27582._M_impl._M_finish
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 64
	Access function 1: 0
	Access function 2: 0
Creating dr for MEM[(const struct entry_t &)__x_21(D)]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const struct entry_t &)__x_21(D)]
Creating dr for MEM[(const struct entry_t &)__x_21(D) + 4]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: MEM[(const struct entry_t &)__x_21(D) + 4]
Creating dr for MEM[(const struct entry_t &)__x_21(D) + 8]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(const struct entry_t &)__x_21(D) + 8]
Creating dr for this_4(D)->D.27582._M_impl._M_finish
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 64
	Access function 1: 0
	Access function 2: 0
Creating dr for MEM[(struct entry_t *)__position_118]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {0B, +, 12}_1
Creating dr for MEM[(struct entry_t *)__position_118]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {0B, +, 12}_1
Creating dr for MEM[(struct entry_t *)__position_118 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {4B, +, 12}_1
Creating dr for MEM[(struct entry_t *)__position_118 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {4B, +, 12}_1
Creating dr for MEM[(struct entry_t *)__position_118 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {8B, +, 12}_1
Creating dr for MEM[(struct entry_t *)__position_118 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {8B, +, 12}_1
Creating dr for MEM[(struct entry_t *)__position_118]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {0B, +, 12}_1
Creating dr for MEM[(struct entry_t *)__position_118]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {0B, +, 12}_1
Creating dr for MEM[(struct entry_t *)__position_118 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {4B, +, 12}_1
Creating dr for MEM[(struct entry_t *)__position_118 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {4B, +, 12}_1
Creating dr for MEM[(struct entry_t *)__position_118 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {8B, +, 12}_1
Creating dr for MEM[(struct entry_t *)__position_118 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {8B, +, 12}_1
Analyzing # of iterations of loop 1
  exit condition [__position_16 + 12, + , 12](no_overflow) != _49
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551603
  result:
    # of iterations (((unsigned long) _49 - (unsigned long) (__position_16 + 12)) /[ex] 4) * 3074457345618258603 & 4611686018427387903, bounded by 1537228672809129300
Analyzing # of iterations of loop 1
  exit condition [__position_16 + 12, + , 12](no_overflow) != _49
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551603
  result:
    # of iterations (((unsigned long) _49 - (unsigned long) (__position_16 + 12)) /[ex] 4) * 3074457345618258603 & 4611686018427387903, bounded by 1537228672809129300
Creating dr for MEM[(struct entry_t *)__position_118]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {0B, +, 12}_1
Creating dr for MEM[(struct entry_t *)__position_118]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {0B, +, 12}_1
Creating dr for MEM[(struct entry_t *)__position_118 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {4B, +, 12}_1
Creating dr for MEM[(struct entry_t *)__position_118 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {4B, +, 12}_1
Creating dr for MEM[(struct entry_t *)__position_118 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {8B, +, 12}_1
Creating dr for MEM[(struct entry_t *)__position_118 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {8B, +, 12}_1
Creating dr for MEM[(struct entry_t *)__position_118]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {0B, +, 12}_1
Creating dr for MEM[(struct entry_t *)__position_118]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {0B, +, 12}_1
Creating dr for MEM[(struct entry_t *)__position_118 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {4B, +, 12}_1
Creating dr for MEM[(struct entry_t *)__position_118 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {4B, +, 12}_1
Creating dr for MEM[(struct entry_t *)__position_118 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {8B, +, 12}_1
Creating dr for MEM[(struct entry_t *)__position_118 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {8B, +, 12}_1
Analyzing # of iterations of loop 1
  exit condition [__position_16 + 12, + , 12](no_overflow) != _49
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551603
  result:
    # of iterations (((unsigned long) _49 - (unsigned long) (__position_16 + 12)) /[ex] 4) * 3074457345618258603 & 4611686018427387903, bounded by 1537228672809129300
Applying pattern match.pd:725, generic-match.c:1428
Creating dr for MEM[(struct entry_t *)__first_82]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {0B, +, 12}_3
Creating dr for MEM[(struct entry_t *)__first_82]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {0B, +, 12}_3
Creating dr for MEM[(struct entry_t *)__first_82 + 4B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {4B, +, 12}_3
Creating dr for MEM[(struct entry_t *)__first_82 + 4B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {4B, +, 12}_3
Creating dr for MEM[(struct entry_t *)__first_82 + 8B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {8B, +, 12}_3
Creating dr for MEM[(struct entry_t *)__first_82 + 8B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {8B, +, 12}_3
Creating dr for MEM[(struct entry_t *)__first_82]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {0B, +, 12}_3
Creating dr for MEM[(struct entry_t *)__first_82]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {0B, +, 12}_3
Creating dr for MEM[(struct entry_t *)__first_82 + 4B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {4B, +, 12}_3
Creating dr for MEM[(struct entry_t *)__first_82 + 4B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {4B, +, 12}_3
Creating dr for MEM[(struct entry_t *)__first_82 + 8B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {8B, +, 12}_3
Creating dr for MEM[(struct entry_t *)__first_82 + 8B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {8B, +, 12}_3
Analyzing # of iterations of loop 3
  exit condition [__n_54 + 18446744073709551615, + , 18446744073709551615] != 0
  bounds on difference of bases: -18446744073709551615 ... 0
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations __n_54 + 18446744073709551615, bounded by 0x0ffffffffffffffff
Creating dr for MEM[(struct entry_t *)__first_82]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {0B, +, 12}_3
Creating dr for MEM[(struct entry_t *)__first_82]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {0B, +, 12}_3
Creating dr for MEM[(struct entry_t *)__first_82 + 4B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {4B, +, 12}_3
Creating dr for MEM[(struct entry_t *)__first_82 + 4B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {4B, +, 12}_3
Creating dr for MEM[(struct entry_t *)__first_82 + 8B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {8B, +, 12}_3
Creating dr for MEM[(struct entry_t *)__first_82 + 8B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {8B, +, 12}_3
Creating dr for MEM[(struct entry_t *)__first_82]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {0B, +, 12}_3
Creating dr for MEM[(struct entry_t *)__first_82]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {0B, +, 12}_3
Creating dr for MEM[(struct entry_t *)__first_82 + 4B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {4B, +, 12}_3
Creating dr for MEM[(struct entry_t *)__first_82 + 4B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {4B, +, 12}_3
Creating dr for MEM[(struct entry_t *)__first_82 + 8B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {8B, +, 12}_3
Creating dr for MEM[(struct entry_t *)__first_82 + 8B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__first_7]
	Access function 0: {8B, +, 12}_3
Analyzing # of iterations of loop 3
  exit condition [__n_54 + 18446744073709551615, + , 18446744073709551615] != 0
  bounds on difference of bases: -18446744073709551615 ... 0
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations __n_54 + 18446744073709551615, bounded by 0x0ffffffffffffffff
Creating dr for this_4(D)->D.27582._M_impl._M_finish
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 64
	Access function 1: 0
	Access function 2: 0
Creating dr for this_4(D)->D.27582._M_impl._M_finish
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 64
	Access function 1: 0
	Access function 2: 0
Creating dr for MEM[(struct entry_t *)__position_119]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {0B, +, 12}_2
Creating dr for MEM[(struct entry_t *)__position_119]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {0B, +, 12}_2
Creating dr for MEM[(struct entry_t *)__position_119 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {4B, +, 12}_2
Creating dr for MEM[(struct entry_t *)__position_119 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {4B, +, 12}_2
Creating dr for MEM[(struct entry_t *)__position_119 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {8B, +, 12}_2
Creating dr for MEM[(struct entry_t *)__position_119 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {8B, +, 12}_2
Creating dr for MEM[(struct entry_t *)__position_119]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {0B, +, 12}_2
Creating dr for MEM[(struct entry_t *)__position_119]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {0B, +, 12}_2
Creating dr for MEM[(struct entry_t *)__position_119 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {4B, +, 12}_2
Creating dr for MEM[(struct entry_t *)__position_119 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {4B, +, 12}_2
Creating dr for MEM[(struct entry_t *)__position_119 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {8B, +, 12}_2
Creating dr for MEM[(struct entry_t *)__position_119 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {8B, +, 12}_2
Analyzing # of iterations of loop 2
  exit condition [__position_16 + 12, + , 12](no_overflow) != __first_7
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551603
  result:
    # of iterations (((unsigned long) __first_7 - (unsigned long) (__position_16 + 12)) /[ex] 4) * 3074457345618258603 & 4611686018427387903, bounded by 1537228672809129300
Analyzing # of iterations of loop 2
  exit condition [__position_16 + 12, + , 12](no_overflow) != __first_7
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551603
  result:
    # of iterations (((unsigned long) __first_7 - (unsigned long) (__position_16 + 12)) /[ex] 4) * 3074457345618258603 & 4611686018427387903, bounded by 1537228672809129300
Creating dr for MEM[(struct entry_t *)__position_119]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {0B, +, 12}_2
Creating dr for MEM[(struct entry_t *)__position_119]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {0B, +, 12}_2
Creating dr for MEM[(struct entry_t *)__position_119 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {4B, +, 12}_2
Creating dr for MEM[(struct entry_t *)__position_119 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {4B, +, 12}_2
Creating dr for MEM[(struct entry_t *)__position_119 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {8B, +, 12}_2
Creating dr for MEM[(struct entry_t *)__position_119 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {8B, +, 12}_2
Creating dr for MEM[(struct entry_t *)__position_119]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {0B, +, 12}_2
Creating dr for MEM[(struct entry_t *)__position_119]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {0B, +, 12}_2
Creating dr for MEM[(struct entry_t *)__position_119 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {4B, +, 12}_2
Creating dr for MEM[(struct entry_t *)__position_119 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {4B, +, 12}_2
Creating dr for MEM[(struct entry_t *)__position_119 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {8B, +, 12}_2
Creating dr for MEM[(struct entry_t *)__position_119 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 12
	aligned to: 256
	base_object: MEM[(struct entry_t *)__position_16]
	Access function 0: {8B, +, 12}_2
Analyzing # of iterations of loop 2
  exit condition [__position_16 + 12, + , 12](no_overflow) != __first_7
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551603
  result:
    # of iterations (((unsigned long) __first_7 - (unsigned long) (__position_16 + 12)) /[ex] 4) * 3074457345618258603 & 4611686018427387903, bounded by 1537228672809129300
Creating dr for MEM[(struct entry_t * *)this_4(D)]
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct entry_t * *)this_4(D)]
Applying pattern match.pd:725, generic-match.c:1428
Applying pattern match.pd:725, generic-match.c:1428
Creating dr for MEM[(const struct entry_t &)__x_21(D)]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const struct entry_t &)__x_21(D)]
Creating dr for *__first_165
analyze_innermost: success.
	base_address: iftmp.11_122 + (long unsigned int) _163
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: *iftmp.11_122 + (long unsigned int) _163
	Access function 0: {0B, +, 12}_4
Creating dr for MEM[(const struct entry_t &)__x_21(D)]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const struct entry_t &)__x_21(D)]
Creating dr for *__first_165
analyze_innermost: success.
	base_address: iftmp.11_122 + (long unsigned int) _163
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: *iftmp.11_122 + (long unsigned int) _163
	Access function 0: {0B, +, 12}_4
Creating dr for MEM[(const struct entry_t &)__x_21(D)]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const struct entry_t &)__x_21(D)]
Creating dr for *__first_165
analyze_innermost: success.
	base_address: iftmp.11_122 + (long unsigned int) _163
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: *iftmp.11_122 + (long unsigned int) _163
	Access function 0: {0B, +, 12}_4
Creating dr for MEM[(const struct entry_t &)__x_21(D)]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const struct entry_t &)__x_21(D)]
Creating dr for *__first_165
analyze_innermost: success.
	base_address: iftmp.11_122 + (long unsigned int) _163
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: *iftmp.11_122 + (long unsigned int) _163
	Access function 0: {0B, +, 12}_4
Analyzing # of iterations of loop 4
  exit condition [__n_2(D) + 18446744073709551615, + , 18446744073709551615] != 0
  bounds on difference of bases: -18446744073709551615 ... 0
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations __n_2(D) + 18446744073709551615, bounded by 0x0ffffffffffffffff
Creating dr for MEM[(const struct entry_t &)__x_21(D)]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const struct entry_t &)__x_21(D)]
Creating dr for *__first_165
analyze_innermost: success.
	base_address: iftmp.11_122 + (long unsigned int) _163
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: *iftmp.11_122 + (long unsigned int) _163
	Access function 0: {0B, +, 12}_4
Creating dr for MEM[(const struct entry_t &)__x_21(D)]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const struct entry_t &)__x_21(D)]
Creating dr for *__first_165
analyze_innermost: success.
	base_address: iftmp.11_122 + (long unsigned int) _163
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: *iftmp.11_122 + (long unsigned int) _163
	Access function 0: {0B, +, 12}_4
Creating dr for MEM[(const struct entry_t &)__x_21(D)]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const struct entry_t &)__x_21(D)]
Creating dr for *__first_165
analyze_innermost: success.
	base_address: iftmp.11_122 + (long unsigned int) _163
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: *iftmp.11_122 + (long unsigned int) _163
	Access function 0: {0B, +, 12}_4
Creating dr for MEM[(const struct entry_t &)__x_21(D)]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const struct entry_t &)__x_21(D)]
Creating dr for *__first_165
analyze_innermost: success.
	base_address: iftmp.11_122 + (long unsigned int) _163
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: *iftmp.11_122 + (long unsigned int) _163
	Access function 0: {0B, +, 12}_4
Analyzing # of iterations of loop 4
  exit condition [__n_2(D) + 18446744073709551615, + , 18446744073709551615] != 0
  bounds on difference of bases: -18446744073709551615 ... 0
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations __n_2(D) + 18446744073709551615, bounded by 0x0ffffffffffffffff
Creating dr for this_4(D)->D.27582._M_impl._M_start
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 0
	Access function 1: 0
	Access function 2: 0
Creating dr for this_4(D)->D.27582._M_impl._M_finish
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 64
	Access function 1: 0
	Access function 2: 0
Creating dr for this_4(D)->D.27582._M_impl._M_end_of_storage
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 128
	Access function 1: 0
	Access function 2: 0

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:18)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:11)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:56, LOOPS:4, CONDITIONS:19, STMTS:533)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_4 bb_3 })
  {
    <bb 2>:
    # DEBUG D#189 => MEM[(struct __normal_iterator *)&__position]
    # DEBUG __position => D#189
    if (__n_2(D) != 0)
      goto <bb 4>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 bb_10 bb_48 bb_23 bb_49 }, succs = {bb_55 })
  {
    <bb 3>:
    # .MEM_181 = PHI <.MEM_3(D)(2), .MEM_12(10), .MEM_13(48), .MEM_61(23), .MEM_164(49)>

  }
  bb_55 (preds = {bb_3 }, succs = {bb_45 })
  {
    <bb 55>:
    goto <bb 45>;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 bb_28 })
  {
    <bb 4>:
    # VUSE <.MEM_3(D)>
    __position_16 = MEM[(struct __normal_iterator *)&__position];
    # VUSE <.MEM_3(D)>
    _5 = this_4(D)->D.27582._M_impl._M_end_of_storage;
    _6 = (long int) _5;
    # VUSE <.MEM_3(D)>
    __first_7 = this_4(D)->D.27582._M_impl._M_finish;
    _8 = (long int) __first_7;
    _9 = _6 - _8;
    _10 = _9 /[ex] 12;
    _11 = (long unsigned int) _10;
    if (__n_2(D) <= _11)
      goto <bb 5>;
    else
      goto <bb 28>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_6 bb_15 })
  {
    <bb 5>:
    # VUSE <.MEM_3(D)>
    __x_copy_110 = MEM[(const struct entry_t &)__x_21(D)];
    # DEBUG __x_copy => __x_copy_110
    # VUSE <.MEM_3(D)>
    __x_copy$id_107 = MEM[(const struct entry_t &)__x_21(D) + 4];
    # DEBUG __x_copy$id => __x_copy$id_107
    # VUSE <.MEM_3(D)>
    __x_copy$pri_105 = MEM[(const struct entry_t &)__x_21(D) + 8];
    # DEBUG __x_copy$pri => __x_copy$pri_105
    # DEBUG this => this_4(D)
    # DEBUG D#30 => &this_4(D)->D.27582._M_impl._M_finish
    # DEBUG this => NULL
    # DEBUG __i => D#30
    # DEBUG __lhs => &D.31476
    # DEBUG __rhs => &__position
    # DEBUG this => &D.31476
    # DEBUG this => &__position
    _27 = (long int) __position_16;
    _23 = _8 - _27;
    _22 = _23 /[ex] 12;
    __elems_after_36 = (const size_type) _22;
    # DEBUG __elems_after => __elems_after_36
    # DEBUG __old_finish => __first_7
    if (__n_2(D) < __elems_after_36)
      goto <bb 6>;
    else
      goto <bb 15>;

  }
  bb_6 (preds = {bb_5 }, succs = {bb_7 bb_8 })
  {
    <bb 6>:
    # DEBUG D#146 => &this_4(D)->D.27582
    # DEBUG this => D#146
    _39 = __n_2(D) * 12;
    _40 = -_39;
    _41 = __first_7 + _40;
    # DEBUG __first => _41
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    # DEBUG __alloc => D#139
    # DEBUG D#138 => D#139
    # DEBUG D#137 => D#138
    # DEBUG __first => _41
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    # DEBUG D.34352 => D#137
    # DEBUG __first => _41
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    # DEBUG __assignable => 1
    # DEBUG __first => _41
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    # DEBUG __first => _41
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => _41
    # DEBUG __it => _41
    # DEBUG __first => _41
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => _41
    # DEBUG __it => _41
    # DEBUG __first => _41
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    # DEBUG __simple => 1
    # DEBUG __first => _41
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    __first.6_52 = (long int) _41;
    _50 = _8 - __first.6_52;
    _Num_48 = _50 /[ex] 12;
    # DEBUG _Num => _Num_48
    if (_Num_48 != 0)
      goto <bb 7>;
    else
      goto <bb 8>;

  }
  bb_7 (preds = {bb_6 }, succs = {bb_8 })
  {
    <bb 7>:
    _46 = (long unsigned int) _50;
    # .MEM_104 = VDEF <.MEM_3(D)>
    __builtin_memmove (__first_7, _41, _46);
    # VUSE <.MEM_104>
    pretmp_182 = this_4(D)->D.27582._M_impl._M_finish;

  }
  bb_8 (preds = {bb_6 bb_7 }, succs = {bb_9 bb_10 })
  {
    <bb 8>:
    # .MEM_14 = PHI <.MEM_3(D)(6), .MEM_104(7)>
    # prephitmp_183 = PHI <__first_7(6), pretmp_182(7)>
    _44 = prephitmp_183 + _39;
    # .MEM_45 = VDEF <.MEM_14>
    this_4(D)->D.27582._M_impl._M_finish = _44;
    # DEBUG this => &__position
    # DEBUG __first => D#189
    # DEBUG __last => _41
    # DEBUG __result => __first_7
    # DEBUG __it => _41
    # DEBUG __it => _41
    # DEBUG __it => D#189
    # DEBUG __it => D#189
    # DEBUG __first => D#189
    # DEBUG __last => _41
    # DEBUG __result => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => _41
    # DEBUG __it => _41
    # DEBUG __it => D#189
    # DEBUG __it => D#189
    # DEBUG __first => D#189
    # DEBUG __last => _41
    # DEBUG __result => __first_7
    # DEBUG __simple => 1
    # DEBUG __first => D#189
    # DEBUG __last => _41
    # DEBUG __result => __first_7
    _113 = __first.6_52 - _27;
    _Num_114 = _113 /[ex] 12;
    # DEBUG _Num => _Num_114
    if (_Num_114 != 0)
      goto <bb 9>;
    else
      goto <bb 10>;

  }
  bb_9 (preds = {bb_8 }, succs = {bb_10 })
  {
    <bb 9>:
    _115 = (long unsigned int) _113;
    _116 = -_115;
    _117 = __first_7 + _116;
    # .MEM_144 = VDEF <.MEM_45>
    __builtin_memmove (_117, __position_16, _115);

  }
  bb_10 (preds = {bb_8 bb_9 }, succs = {bb_3 bb_11 })
  {
    <bb 10>:
    # .MEM_12 = PHI <.MEM_45(8), .MEM_144(9)>
    # DEBUG this => &__position
    _49 = __position_16 + _39;
    # DEBUG this => &__position
    # DEBUG __first => D#189
    # DEBUG __last => _49
    # DEBUG __value => &__x_copy
    # DEBUG __first => D#189
    if (__position_16 == _49)
      goto <bb 3>;
    else
      goto <bb 11>;

  }
  bb_11 (preds = {bb_10 }, succs = {bb_12 })
  {
    <bb 11>:

  }
  bb_13 (preds = {bb_12 }, succs = {bb_48 })
  {
    <bb 13>:
    # .MEM_13 = PHI <.MEM_58(12)>

  }
  bb_48 (preds = {bb_13 }, succs = {bb_3 })
  {
    <bb 48>:
    goto <bb 3>;

  }
  bb_15 (preds = {bb_5 }, succs = {bb_20 bb_16 })
  {
    <bb 15>:
    # DEBUG D#147 => &this_4(D)->D.27582
    # DEBUG this => D#147
    __n_54 = __n_2(D) - __elems_after_36;
    # DEBUG __first => __first_7
    # DEBUG __n => __n_54
    # DEBUG __x => &__x_copy
    # DEBUG __niter => __n_54
    # DEBUG __first => __first_7
    if (__n_54 == 0)
      goto <bb 20>;
    else
      goto <bb 16>;

  }
  bb_16 (preds = {bb_15 }, succs = {bb_17 })
  {
    <bb 16>:

  }
  bb_18 (preds = {bb_17 }, succs = {bb_50 })
  {
    <bb 18>:

  }
  bb_50 (preds = {bb_18 }, succs = {bb_20 })
  {
    <bb 50>:
    _170 = __n_54 * 12;
    __first_137 = __first_7 + _170;
    goto <bb 20>;

  }
  bb_20 (preds = {bb_50 bb_15 }, succs = {bb_22 bb_21 })
  {
    <bb 20>:
    # __first_134 = PHI <__first_137(50), __first_7(15)>
    # .MEM_90 = PHI <.MEM_106(50), .MEM_3(D)(15)>
    # .MEM_56 = VDEF <.MEM_90>
    this_4(D)->D.27582._M_impl._M_finish = __first_134;
    # DEBUG D#148 => &this_4(D)->D.27582
    # DEBUG this => D#148
    # DEBUG this => &__position
    # DEBUG __first => D#189
    # DEBUG __last => __first_7
    # DEBUG __result => __first_134
    # DEBUG __alloc => D#139
    # DEBUG D#138 => D#139
    # DEBUG D#137 => D#138
    # DEBUG __first => D#189
    # DEBUG __last => __first_7
    # DEBUG __result => __first_134
    # DEBUG D.34397 => D#137
    # DEBUG __first => D#189
    # DEBUG __last => __first_7
    # DEBUG __result => __first_134
    # DEBUG __assignable => 1
    # DEBUG __first => D#189
    # DEBUG __last => __first_7
    # DEBUG __result => __first_134
    # DEBUG __first => D#189
    # DEBUG __last => __first_7
    # DEBUG __result => __first_134
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => D#189
    # DEBUG __it => D#189
    # DEBUG __first => D#189
    # DEBUG __last => __first_7
    # DEBUG __result => __first_134
    # DEBUG __it => __first_134
    # DEBUG __it => __first_134
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => D#189
    # DEBUG __it => D#189
    # DEBUG __first => D#189
    # DEBUG __last => __first_7
    # DEBUG __result => __first_134
    # DEBUG __simple => 1
    # DEBUG __first => D#189
    # DEBUG __last => __first_7
    # DEBUG __result => __first_134
    # DEBUG _Num => _22
    if (_22 != 0)
      goto <bb 22>;
    else
      goto <bb 21>;

  }
  bb_21 (preds = {bb_20 }, succs = {bb_23 })
  {
    <bb 21>:
    pretmp_177 = (long unsigned int) _23;
    goto <bb 23>;

  }
  bb_22 (preds = {bb_20 }, succs = {bb_23 })
  {
    <bb 22>:
    _64 = (long unsigned int) _23;
    # .MEM_109 = VDEF <.MEM_56>
    __builtin_memmove (__first_134, __position_16, _64);
    # VUSE <.MEM_109>
    pretmp_175 = this_4(D)->D.27582._M_impl._M_finish;

  }
  bb_23 (preds = {bb_21 bb_22 }, succs = {bb_3 bb_24 })
  {
    <bb 23>:
    # .MEM_93 = PHI <.MEM_56(21), .MEM_109(22)>
    # prephitmp_176 = PHI <__first_134(21), pretmp_175(22)>
    # prephitmp_178 = PHI <pretmp_177(21), _64(22)>
    _60 = prephitmp_176 + prephitmp_178;
    # .MEM_61 = VDEF <.MEM_93>
    this_4(D)->D.27582._M_impl._M_finish = _60;
    # DEBUG this => &__position
    # DEBUG __first => D#189
    # DEBUG __last => __first_7
    # DEBUG __value => &__x_copy
    # DEBUG __first => D#189
    if (__first_7 == __position_16)
      goto <bb 3>;
    else
      goto <bb 24>;

  }
  bb_24 (preds = {bb_23 }, succs = {bb_25 })
  {
    <bb 24>:

  }
  bb_26 (preds = {bb_25 }, succs = {bb_49 })
  {
    <bb 26>:
    # .MEM_164 = PHI <.MEM_42(25)>

  }
  bb_49 (preds = {bb_26 }, succs = {bb_3 })
  {
    <bb 49>:
    goto <bb 3>;

  }
  bb_28 (preds = {bb_4 }, succs = {bb_29 bb_30 })
  {
    <bb 28>:
    # DEBUG this => this_4(D)
    # DEBUG __n => __n_2(D)
    # DEBUG __n => __n_2(D)
    # DEBUG __s => "vector::_M_fill_insert"
    # DEBUG D#121 => this_4(D)
    # DEBUG this => D#121
    # DEBUG D#120 => D#121
    # DEBUG D#119 => &D#120->D.27582
    # DEBUG this => D#119
    # DEBUG __a => D#118
    # DEBUG D#117 => D#118
    # DEBUG D#116 => D#117
    # DEBUG this => D#116
    # VUSE <.MEM_3(D)>
    _17 = MEM[(struct entry_t * *)this_4(D)];
    # DEBUG D#29 => this_4(D)
    # DEBUG D#29 => this_4(D)
    # DEBUG this => D#29
    # DEBUG this => D#29
    _125 = (long int) _17;
    _126 = _8 - _125;
    _127 = _126 /[ex] 12;
    _128 = (const long unsigned int) _127;
    _129 = 1537228672809129301 - _128;
    if (__n_2(D) > _129)
      goto <bb 29>;
    else
      goto <bb 30>;

  }
  bb_29 (preds = {bb_28 }, succs = {})
  {
    <bb 29>:
    # .MEM_143 = VDEF <.MEM_3(D)>
    std::__throw_length_error ("vector::_M_fill_insert");

  }
  bb_30 (preds = {bb_28 }, succs = {bb_46 bb_47 })
  {
    <bb 30>:
    # DEBUG D#29 => this_4(D)
    # DEBUG D#29 => this_4(D)
    # DEBUG this => D#29
    # DEBUG this => D#29
    # DEBUG D#29 => this_4(D)
    # DEBUG D#29 => this_4(D)
    # DEBUG this => D#29
    # DEBUG this => D#29
    # DEBUG __a => &D.34992
    # DEBUG __b => &__n
    _83 = MAX_EXPR <__n_2(D), _128>;
    __len_133 = _83 + _128;
    # DEBUG __len => __len_133
    # DEBUG D#29 => this_4(D)
    # DEBUG D#29 => this_4(D)
    # DEBUG this => D#29
    # DEBUG this => D#29
    # DEBUG D#121 => this_4(D)
    # DEBUG this => D#121
    # DEBUG D#120 => D#121
    # DEBUG D#119 => &D#120->D.27582
    # DEBUG this => D#119
    # DEBUG __a => D#118
    # DEBUG D#117 => D#118
    # DEBUG D#116 => D#117
    # DEBUG this => D#116
    _162 = __len_133 > 1537228672809129301;
    _150 = _128 > __len_133;
    _123 = _150 | _162;
    if (_123 != 0)
      goto <bb 46>;
    else
      goto <bb 47>;

  }
  bb_31 (preds = {bb_47 }, succs = {bb_32 })
  {
    <bb 31>:
    pretmp_173 = __len_133 * 12;

  }
  bb_32 (preds = {bb_46 bb_31 }, succs = {bb_33 })
  {
    <bb 32>:
    # _166 = PHI <_152(46), _161(31)>
    # _167 = PHI <_151(46), _160(31)>
    # prephitmp_174 = PHI <18446744073709551612(46), pretmp_173(31)>
    # DEBUG __len => NULL
    # DEBUG this => this_4(D)
    # DEBUG D#52 => &this_4(D)->D.27582._M_impl._M_start
    # DEBUG this => NULL
    # DEBUG __i => D#52
    # DEBUG __lhs => &__position
    # DEBUG __rhs => &D.31509
    # DEBUG this => &__position
    # DEBUG this => &D.31509
    # DEBUG D#162 => _167 /[ex] 12
    # DEBUG __elems_before => (const size_type) D#162
    # DEBUG D#161 => &this_4(D)->D.27582
    # DEBUG D#129 => D#161
    # DEBUG __n => NULL
    # DEBUG this => D#129
    # DEBUG D#128 => D#129
    # DEBUG D#127 => &D#128->_M_impl
    # DEBUG D#126 => D#127
    # DEBUG __n => NULL
    # DEBUG __a => D#126
    # DEBUG D#125 => D#126
    # DEBUG D#123 => D#125
    # DEBUG D#124 => 0B
    # DEBUG __n => NULL
    # DEBUG this => D#123
    # DEBUG D.34980 => D#124
    # DEBUG D#122 => D#123
    # DEBUG D#116 => D#122
    # DEBUG this => D#116
    # .MEM_140 = VDEF <.MEM_3(D)>
    _121 = operator new (prephitmp_174);
    # VUSE <.MEM_140>
    pretmp_29 = this_4(D)->D.27582._M_impl._M_start;
    # VUSE <.MEM_140>
    pretmp_157 = this_4(D)->D.27582._M_impl._M_finish;
    pretmp_159 = _121 + prephitmp_174;
    pretmp_155 = (long int) pretmp_157;
    pretmp_153 = (long int) pretmp_29;
    pretmp_147 = _166 - pretmp_153;

  }
  bb_33 (preds = {bb_47 bb_32 }, succs = {bb_52 })
  {
    <bb 33>:
    # iftmp.11_122 = PHI <0B(47), _121(32)>
    # .MEM_135 = PHI <.MEM_3(D)(47), .MEM_140(32)>
    # _168 = PHI <_161(47), _166(32)>
    # _163 = PHI <_160(47), _167(32)>
    # prephitmp_156 = PHI <_17(47), pretmp_29(32)>
    # prephitmp_158 = PHI <0B(47), pretmp_159(32)>
    # prephitmp_130 = PHI <_8(47), pretmp_155(32)>
    # prephitmp_146 = PHI <_160(47), pretmp_147(32)>

  }
  bb_52 (preds = {bb_33 }, succs = {bb_34 })
  {
    <bb 52>:
    # DEBUG __new_start => NULL
    # DEBUG __new_finish => NULL
    # DEBUG D#142 => &this_4(D)->D.27582
    # DEBUG this => D#142
    _19 = (long unsigned int) _163;
    __first_20 = iftmp.11_122 + _19;
    # DEBUG __first => __first_20
    # DEBUG __n => __n_2(D)
    # DEBUG __x => __x_21(D)
    # DEBUG __niter => __n_2(D)
    # DEBUG __first => __first_20

  }
  bb_36 (preds = {bb_34 }, succs = {bb_51 })
  {
    <bb 36>:

  }
  bb_51 (preds = {bb_36 }, succs = {bb_38 bb_37 })
  {
    <bb 51>:
    # DEBUG __new_finish => 0B
    # DEBUG D#143 => &this_4(D)->D.27582
    # DEBUG this => D#143
    # DEBUG this => &__position
    # DEBUG D#188 => this_4(D)->D.27582._M_impl._M_start
    # DEBUG __first => D#188
    # DEBUG __last => D#189
    # DEBUG __result => NULL
    # DEBUG __alloc => D#141
    # DEBUG D#140 => D#141
    # DEBUG D#137 => D#140
    # DEBUG __first => D#188
    # DEBUG __last => D#189
    # DEBUG __result => NULL
    # DEBUG D.34512 => D#137
    # DEBUG __first => D#188
    # DEBUG __last => D#189
    # DEBUG __result => NULL
    # DEBUG __assignable => 1
    # DEBUG __first => D#188
    # DEBUG __last => D#189
    # DEBUG __result => NULL
    # DEBUG __first => D#188
    # DEBUG __last => D#189
    # DEBUG __result => NULL
    # DEBUG __it => D#189
    # DEBUG __it => D#189
    # DEBUG __it => D#188
    # DEBUG __it => D#188
    # DEBUG __first => D#188
    # DEBUG __last => D#189
    # DEBUG __result => NULL
    # DEBUG __it => NULL
    # DEBUG __it => NULL
    # DEBUG __it => D#189
    # DEBUG __it => D#189
    # DEBUG __it => D#188
    # DEBUG __it => D#188
    # DEBUG __first => D#188
    # DEBUG __last => D#189
    # DEBUG __result => NULL
    # DEBUG __simple => 1
    # DEBUG __first => D#188
    # DEBUG __last => D#189
    # DEBUG __result => NULL
    # DEBUG D#187 => (long int) D#188
    # DEBUG D#186 => _168 - D#187
    _Num_79 = prephitmp_146 /[ex] 12;
    # DEBUG _Num => _Num_79
    if (_Num_79 != 0)
      goto <bb 38>;
    else
      goto <bb 37>;

  }
  bb_37 (preds = {bb_51 }, succs = {bb_39 })
  {
    <bb 37>:
    pretmp_88 = (long unsigned int) prephitmp_146;
    goto <bb 39>;

  }
  bb_38 (preds = {bb_51 }, succs = {bb_39 })
  {
    <bb 38>:
    _80 = (long unsigned int) prephitmp_146;
    # .MEM_100 = VDEF <.MEM_99>
    __builtin_memmove (iftmp.11_122, prephitmp_156, _80);

  }
  bb_39 (preds = {bb_37 bb_38 }, succs = {bb_41 bb_40 })
  {
    <bb 39>:
    # .MEM_96 = PHI <.MEM_99(37), .MEM_100(38)>
    # prephitmp_112 = PHI <pretmp_88(37), _80(38)>
    # DEBUG D#185 => (long unsigned int) D#186
    # DEBUG __new_finish => iftmp.11_122 + D#185
    _25 = __n_2(D) * 12;
    _142 = _25 + prephitmp_112;
    __new_finish_26 = iftmp.11_122 + _142;
    # DEBUG __new_finish => __new_finish_26
    # DEBUG D#144 => &this_4(D)->D.27582
    # DEBUG this => D#144
    # DEBUG D#184 => this_4(D)->D.27582._M_impl._M_finish
    # DEBUG this => &__position
    # DEBUG __first => D#189
    # DEBUG __last => D#184
    # DEBUG __result => __new_finish_26
    # DEBUG __alloc => D#141
    # DEBUG D#140 => D#141
    # DEBUG D#137 => D#140
    # DEBUG __first => D#189
    # DEBUG __last => D#184
    # DEBUG __result => __new_finish_26
    # DEBUG D.34473 => D#137
    # DEBUG __first => D#189
    # DEBUG __last => D#184
    # DEBUG __result => __new_finish_26
    # DEBUG __assignable => 1
    # DEBUG __first => D#189
    # DEBUG __last => D#184
    # DEBUG __result => __new_finish_26
    # DEBUG __first => D#189
    # DEBUG __last => D#184
    # DEBUG __result => __new_finish_26
    # DEBUG __it => D#184
    # DEBUG __it => D#184
    # DEBUG __it => D#189
    # DEBUG __it => D#189
    # DEBUG __first => D#189
    # DEBUG __last => D#184
    # DEBUG __result => __new_finish_26
    # DEBUG __it => __new_finish_26
    # DEBUG __it => __new_finish_26
    # DEBUG __it => D#184
    # DEBUG __it => D#184
    # DEBUG __it => D#189
    # DEBUG __it => D#189
    # DEBUG __first => D#189
    # DEBUG __last => D#184
    # DEBUG __result => __new_finish_26
    # DEBUG __simple => 1
    # DEBUG __first => D#189
    # DEBUG __last => D#184
    # DEBUG __result => __new_finish_26
    _72 = prephitmp_130 - _168;
    _Num_73 = _72 /[ex] 12;
    # DEBUG _Num => _Num_73
    if (_Num_73 != 0)
      goto <bb 41>;
    else
      goto <bb 40>;

  }
  bb_40 (preds = {bb_39 }, succs = {bb_42 })
  {
    <bb 40>:
    pretmp_111 = (long unsigned int) _72;
    goto <bb 42>;

  }
  bb_41 (preds = {bb_39 }, succs = {bb_42 })
  {
    <bb 41>:
    _74 = (long unsigned int) _72;
    # .MEM_101 = VDEF <.MEM_96>
    __builtin_memcpy (__new_finish_26, __position_16, _74);

  }
  bb_42 (preds = {bb_40 bb_41 }, succs = {bb_43 bb_44 })
  {
    <bb 42>:
    # .MEM_97 = PHI <.MEM_96(40), .MEM_101(41)>
    # prephitmp_172 = PHI <pretmp_111(40), _74(41)>
    _76 = __new_finish_26 + prephitmp_172;
    # DEBUG __new_finish => _76
    # DEBUG D#145 => &this_4(D)->D.27582
    # DEBUG this => D#145
    # DEBUG D#160 => this_4(D)->D.27582._M_impl._M_finish
    # DEBUG D#159 => this_4(D)->D.27582._M_impl._M_start
    # DEBUG __first => D#159
    # DEBUG __last => D#160
    # DEBUG D.34466 => NULL
    # DEBUG D#46 => D#159
    # DEBUG D#47 => D#160
    # DEBUG __first => D#46
    # DEBUG __last => D#47
    # DEBUG D#45 => D#47
    # DEBUG D#44 => D#46
    # DEBUG D#42 => D#44
    # DEBUG D#43 => D#45
    # DEBUG D.33173 => D#42
    # DEBUG D.33172 => D#43
    # DEBUG D#158 => this_4(D)->D.27582._M_impl._M_end_of_storage
    # DEBUG D#157 => (long int) D#158
    # DEBUG D#156 => (long int) D#188
    # DEBUG D#155 => D#157 - D#156
    # DEBUG D#154 => D#155 /[ex] 12
    # DEBUG D#153 => (long unsigned int) D#154
    # DEBUG D#152 => &this_4(D)->D.27582
    # DEBUG this => D#152
    # DEBUG __p => D#188
    # DEBUG __n => D#153
    if (prephitmp_156 != 0B)
      goto <bb 43>;
    else
      goto <bb 44>;

  }
  bb_43 (preds = {bb_42 }, succs = {bb_44 })
  {
    <bb 43>:
    # DEBUG D#104 => &D#152->_M_impl
    # DEBUG D#102 => D#104
    # DEBUG D#103 => D#153
    # DEBUG __p => D#188
    # DEBUG __a => D#102
    # DEBUG __n => D#103
    # DEBUG D#101 => D#103
    # DEBUG D#100 => D#102
    # DEBUG D#98 => D#100
    # DEBUG D#99 => D#101
    # DEBUG __p => D#188
    # DEBUG this => D#98
    # DEBUG D.34462 => D#99
    # .MEM_102 = VDEF <.MEM_97>
    operator delete (prephitmp_156);

  }
  bb_44 (preds = {bb_43 bb_42 }, succs = {bb_53 })
  {
    <bb 44>:
    # .MEM_98 = PHI <.MEM_102(43), .MEM_97(42)>

  }
  bb_53 (preds = {bb_44 }, succs = {bb_45 })
  {
    <bb 53>:
    # .MEM_30 = VDEF <.MEM_98>
    this_4(D)->D.27582._M_impl._M_start = iftmp.11_122;
    # .MEM_31 = VDEF <.MEM_30>
    this_4(D)->D.27582._M_impl._M_finish = _76;
    # .MEM_34 = VDEF <.MEM_31>
    this_4(D)->D.27582._M_impl._M_end_of_storage = prephitmp_158;

  }
  bb_45 (preds = {bb_55 bb_53 }, succs = {bb_54 })
  {
    <bb 45>:
    # .MEM_1 = PHI <.MEM_181(55), .MEM_34(53)>

  }
  bb_54 (preds = {bb_45 }, succs = {bb_1 })
  {
    <bb 54>:
    # VUSE <.MEM_1>
    return;

  }
  bb_46 (preds = {bb_30 }, succs = {bb_32 })
  {
    <bb 46>:
    # DEBUG __len => NULL
    # DEBUG this => this_4(D)
    # DEBUG D#52 => &this_4(D)->D.27582._M_impl._M_start
    # DEBUG this => NULL
    # DEBUG __i => D#52
    # DEBUG __lhs => &__position
    # DEBUG __rhs => &D.31509
    # DEBUG this => &__position
    _152 = (long int) __position_16;
    # DEBUG this => &D.31509
    _151 = _152 - _125;
    # DEBUG D#162 => _151 /[ex] 12
    # DEBUG __elems_before => (const size_type) D#162
    # DEBUG D#161 => &this_4(D)->D.27582
    # DEBUG D#129 => D#161
    # DEBUG __n => NULL
    # DEBUG this => D#129
    # DEBUG D#128 => D#129
    goto <bb 32>;

  }
  bb_47 (preds = {bb_30 }, succs = {bb_31 bb_33 })
  {
    <bb 47>:
    # DEBUG __len => NULL
    # DEBUG this => this_4(D)
    # DEBUG D#52 => &this_4(D)->D.27582._M_impl._M_start
    # DEBUG this => NULL
    # DEBUG __i => D#52
    # DEBUG __lhs => &__position
    # DEBUG __rhs => &D.31509
    # DEBUG this => &__position
    _161 = (long int) __position_16;
    # DEBUG this => &D.31509
    _160 = _161 - _125;
    # DEBUG D#162 => _160 /[ex] 12
    # DEBUG __elems_before => (const size_type) D#162
    # DEBUG D#161 => &this_4(D)->D.27582
    # DEBUG D#129 => D#161
    # DEBUG __n => NULL
    # DEBUG this => D#129
    # DEBUG D#128 => D#129
    if (__len_133 != 0)
      goto <bb 31>;
    else
      goto <bb 33>;

  }
  loop_1 (header = 12, latch = 14, niter = (((unsigned long) _49 - (unsigned long) (__position_16 + 12)) /[ex] 4) * 3074457345618258603 & 4611686018427387903, upper_bound = 1537228672809129300)
  {
    bb_12 (preds = {bb_11 bb_14 }, succs = {bb_13 bb_14 })
    {
      <bb 12>:
      # __position_118 = PHI <__position_16(11), __position_15(14)>
      # .MEM_89 = PHI <.MEM_12(11), .MEM_58(14)>
      # DEBUG __first => __position_118
      # .MEM_66 = VDEF <.MEM_89>
      MEM[(struct entry_t *)__position_118] = __x_copy_110;
      # .MEM_108 = VDEF <.MEM_66>
      MEM[(struct entry_t *)__position_118 + 4B] = __x_copy$id_107;
      # .MEM_58 = VDEF <.MEM_108>
      MEM[(struct entry_t *)__position_118 + 8B] = __x_copy$pri_105;
      __position_15 = __position_118 + 12;
      # DEBUG __first => __position_15
      # DEBUG __first => __position_15
      if (__position_15 == _49)
        goto <bb 13>;
      else
        goto <bb 14>;

    }
    bb_14 (preds = {bb_12 }, succs = {bb_12 })
    {
      <bb 14>:
      goto <bb 12>;

    }
  }
  loop_2 (header = 25, latch = 27, niter = (((unsigned long) __first_7 - (unsigned long) (__position_16 + 12)) /[ex] 4) * 3074457345618258603 & 4611686018427387903, upper_bound = 1537228672809129300)
  {
    bb_25 (preds = {bb_24 bb_27 }, succs = {bb_26 bb_27 })
    {
      <bb 25>:
      # __position_119 = PHI <__position_16(24), __position_63(27)>
      # .MEM_145 = PHI <.MEM_61(24), .MEM_42(27)>
      # DEBUG __first => __position_119
      # .MEM_53 = VDEF <.MEM_145>
      MEM[(struct entry_t *)__position_119] = __x_copy_110;
      # .MEM_51 = VDEF <.MEM_53>
      MEM[(struct entry_t *)__position_119 + 4B] = __x_copy$id_107;
      # .MEM_42 = VDEF <.MEM_51>
      MEM[(struct entry_t *)__position_119 + 8B] = __x_copy$pri_105;
      __position_63 = __position_119 + 12;
      # DEBUG __first => __position_63
      # DEBUG __first => __position_63
      if (__first_7 == __position_63)
        goto <bb 26>;
      else
        goto <bb 27>;

    }
    bb_27 (preds = {bb_25 }, succs = {bb_25 })
    {
      <bb 27>:
      goto <bb 25>;

    }
  }
  loop_3 (header = 17, latch = 19, niter = , upper_bound = 0x0ffffffffffffffff)
  {
    bb_17 (preds = {bb_16 bb_19 }, succs = {bb_18 bb_19 })
    {
      <bb 17>:
      # __n_120 = PHI <__n_54(16), __n_69(19)>
      # __first_82 = PHI <__first_7(16), __first_70(19)>
      # .MEM_87 = PHI <.MEM_3(D)(16), .MEM_106(19)>
      # DEBUG __niter => __n_120
      # DEBUG __first => __first_82
      # .MEM_57 = VDEF <.MEM_87>
      MEM[(struct entry_t *)__first_82] = __x_copy_110;
      # .MEM_55 = VDEF <.MEM_57>
      MEM[(struct entry_t *)__first_82 + 4B] = __x_copy$id_107;
      # .MEM_106 = VDEF <.MEM_55>
      MEM[(struct entry_t *)__first_82 + 8B] = __x_copy$pri_105;
      __n_69 = __n_120 + 18446744073709551615;
      # DEBUG __niter => __n_69
      __first_70 = __first_82 + 12;
      # DEBUG __first => __first_70
      # DEBUG __niter => __n_69
      # DEBUG __first => __first_70
      if (__n_69 == 0)
        goto <bb 18>;
      else
        goto <bb 19>;

    }
    bb_19 (preds = {bb_17 }, succs = {bb_17 })
    {
      <bb 19>:
      goto <bb 17>;

    }
  }
  loop_4 (header = 34, latch = 35, niter = , upper_bound = 0x0ffffffffffffffff)
  {
    bb_34 (preds = {bb_35 bb_52 }, succs = {bb_36 bb_35 })
    {
      <bb 34>:
      # __n_141 = PHI <__n_85(35), __n_2(D)(52)>
      # __first_165 = PHI <__first_86(35), __first_20(52)>
      # .MEM_139 = PHI <.MEM_99(35), .MEM_135(52)>
      # DEBUG __niter => __n_141
      # DEBUG __first => __first_165
      # .MEM_99 = VDEF <.MEM_139>
      *__first_165 = MEM[(const struct entry_t &)__x_21(D)];
      __n_85 = __n_141 + 18446744073709551615;
      # DEBUG __niter => __n_85
      __first_86 = __first_165 + 12;
      # DEBUG __first => __first_86
      # DEBUG __niter => __n_85
      # DEBUG __first => __first_86
      if (__n_85 == 0)
        goto <bb 36>;
      else
        goto <bb 35>;

    }
    bb_35 (preds = {bb_34 }, succs = {bb_34 })
    {
      <bb 35>:
      goto <bb 34>;

    }
  }
}

Pass statistics:
----------------

void std::vector<_Tp, _Alloc>::_M_fill_insert(std::vector<_Tp, _Alloc>::iterator, std::vector<_Tp, _Alloc>::size_type, const value_type&) [with _Tp = Arbiter::entry_t; _Alloc = std::allocator<Arbiter::entry_t>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<Arbiter::entry_t*, std::vector<Arbiter::entry_t> >; typename std::_Vector_base<_Tp, _Alloc>::pointer = Arbiter::entry_t*; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::value_type = Arbiter::entry_t] (struct vectorD.26839 * const thisD.27506, struct iteratorD.27150 __positionD.27507, size_typeD.27158 __nD.27508, const struct value_typeD.27145 & __xD.27509)
{
  const long unsigned intD.14 D.34992;
  const size_typeD.27158 __lenD.34986;
  size_typeD.27158 D.34991;
  size_typeD.27158 __nD.34984;
  struct N7Arbiter7entry_tED.26837 * D.34982;
  const ptrdiff_tD.2819 _NumD.34972;
  struct N7Arbiter7entry_tED.26837 * D.34973;
  intD.9 __x_copy$priD.34580;
  intD.9 __x_copy$idD.34579;
  unsigned char __x_copyD.34578;
  struct N7Arbiter7entry_tED.26837 * const __positionD.34577;
  struct N7Arbiter7entry_tED.26837 * __firstD.34547;
  const ptrdiff_tD.2819 _NumD.34541;
  const ptrdiff_tD.2819 _NumD.34502;
  struct N7Arbiter7entry_tED.26837 * __firstD.34432;
  long unsigned intD.14 __nD.34433;
  struct N7Arbiter7entry_tED.26837 * __firstD.34385;
  const ptrdiff_tD.2819 _NumD.34381;
  struct N7Arbiter7entry_tED.26837 * __firstD.34336;
  struct N7Arbiter7entry_tED.26837 * __new_finishD.31511;
  const size_typeD.27158 __elems_afterD.31475;
  struct N7Arbiter7entry_tED.26837 * _5;
  long intD.12 _6;
  long intD.12 _8;
  long intD.12 _9;
  long intD.12 _10;
  long unsigned intD.14 _11;
  struct N7Arbiter7entry_tED.26837 * const _17;
  long unsigned intD.14 _19;
  difference_typeD.31145 _22;
  long intD.12 _23;
  long unsigned intD.14 _25;
  long intD.12 _27;
  struct N7Arbiter7entry_tED.26837 * pretmp_29;
  long unsigned intD.14 _39;
  sizetype _40;
  struct N7Arbiter7entry_tED.26837 * _41;
  struct N7Arbiter7entry_tED.26837 * _44;
  long unsigned intD.14 _46;
  struct N7Arbiter7entry_tED.26837 * _49;
  long intD.12 _50;
  long intD.12 __first.6_52;
  struct N7Arbiter7entry_tED.26837 * _60;
  long unsigned intD.14 _64;
  long intD.12 _72;
  long unsigned intD.14 _74;
  struct N7Arbiter7entry_tED.26837 * _76;
  long unsigned intD.14 _80;
  long unsigned intD.14 _83;
  long unsigned intD.14 pretmp_88;
  long unsigned intD.14 pretmp_111;
  long unsigned intD.14 prephitmp_112;
  long intD.12 _113;
  long unsigned intD.14 _115;
  sizetype _116;
  struct N7Arbiter7entry_tED.26837 * _117;
  struct N7Arbiter7entry_tED.26837 * _121;
  struct N7Arbiter7entry_tED.26837 * iftmp.11_122;
  boolD.2757 _123;
  long intD.12 _125;
  long intD.12 _126;
  long intD.12 _127;
  long unsigned intD.14 _129;
  long intD.12 prephitmp_130;
  long unsigned intD.14 _142;
  long intD.12 prephitmp_146;
  long intD.12 pretmp_147;
  boolD.2757 _150;
  long intD.12 _151;
  long intD.12 _152;
  long intD.12 pretmp_153;
  long intD.12 pretmp_155;
  struct N7Arbiter7entry_tED.26837 * prephitmp_156;
  struct N7Arbiter7entry_tED.26837 * pretmp_157;
  struct N7Arbiter7entry_tED.26837 * prephitmp_158;
  struct N7Arbiter7entry_tED.26837 * pretmp_159;
  long intD.12 _160;
  long intD.12 _161;
  boolD.2757 _162;
  long intD.12 _163;
  long intD.12 _166;
  long intD.12 _167;
  long intD.12 _168;
  long unsigned intD.14 _170;
  long unsigned intD.14 prephitmp_172;
  long unsigned intD.14 pretmp_173;
  long unsigned intD.14 prephitmp_174;
  struct N7Arbiter7entry_tED.26837 * pretmp_175;
  struct N7Arbiter7entry_tED.26837 * prephitmp_176;
  long unsigned intD.14 pretmp_177;
  long unsigned intD.14 prephitmp_178;
  struct N7Arbiter7entry_tED.26837 * pretmp_182;
  struct N7Arbiter7entry_tED.26837 * prephitmp_183;

;;   basic block 2, loop depth 0, count 0, freq 4156, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#189ptD.0 => MEM[(struct __normal_iteratorD.27151 *)&__positionD.27507]
  # DEBUG __positionD.34577 => D#189ptD.0
  if (__n_2(D) != 0)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 3421, maybe hot
;;    prev block 2, next block 55, flags: (NEW)
;;    pred:       2 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                48 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                49 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_181 = PHI <.MEM_3(D)(2), .MEM_12(10), .MEM_13(48), .MEM_61(23), .MEM_164(49)>
;;    succ:       55 [100.0%]  (FALLTHRU)

;;   basic block 55, loop depth 0, count 0, freq 3421, maybe hot
;;    prev block 3, next block 4, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU)
  goto <bb 45>;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 2535, maybe hot
;;    prev block 55, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal 
  __position_16 = MEM[(struct __normal_iteratorD.27151 *)&__positionD.27507];
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _5 = this_4(D)->D.27582._M_implD.27073._M_end_of_storageD.27077;
  _6 = (long intD.12) _5;
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  __first_7 = this_4(D)->D.27582._M_implD.27073._M_finishD.27076;
  _8 = (long intD.12) __first_7;
  _9 = _6 - _8;
  # RANGE [-768614336404564650, 768614336404564650]
  _10 = _9 /[ex] 12;
  # RANGE ~[768614336404564651, 17678129737304986965]
  _11 = (long unsigned intD.14) _10;
  if (__n_2(D) <= _11)
    goto <bb 5>;
  else
    goto <bb 28>;
;;    succ:       5 [71.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [29.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 1800, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [71.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  __x_copy_110 = MEM[(const struct N7Arbiter7entry_tED.26837 &)__x_21(D)];
  # DEBUG __x_copyD.34578 => __x_copy_110
  # VUSE <.MEM_3(D)>
  __x_copy$id_107 = MEM[(const struct N7Arbiter7entry_tED.26837 &)__x_21(D) + 4];
  # DEBUG __x_copy$idD.34579 => __x_copy$id_107
  # VUSE <.MEM_3(D)>
  __x_copy$pri_105 = MEM[(const struct N7Arbiter7entry_tED.26837 &)__x_21(D) + 8];
  # DEBUG __x_copy$priD.34580 => __x_copy$pri_105
  # DEBUG thisD.34331 => this_4(D)
  # DEBUG D#30ptD.0 => &this_4(D)->D.27582._M_implD.27073._M_finishD.27076
  # DEBUG thisD.34333 => NULL
  # DEBUG __iD.34332 => D#30ptD.0
  # DEBUG __lhsD.34328 => &D.31476
  # DEBUG __rhsD.34329 => &__positionD.27507
  # DEBUG thisD.33205 => &D.31476
  # DEBUG thisD.33203 => &__positionD.27507
  _27 = (long intD.12) __position_16;
  _23 = _8 - _27;
  # RANGE [-768614336404564650, 768614336404564650]
  _22 = _23 /[ex] 12;
  # RANGE ~[768614336404564651, 17678129737304986965]
  __elems_after_36 = (const size_typeD.27158) _22;
  # DEBUG __elems_afterD.31475 => __elems_after_36
  # DEBUG __old_finishD.31483 => __first_7
  if (__n_2(D) < __elems_after_36)
    goto <bb 6>;
  else
    goto <bb 15>;
;;    succ:       6 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#146ptD.0 => &this_4(D)->D.27582
  # DEBUG thisD.34383 => D#146ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _39 = __n_2(D) * 12;
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _40 = -_39;
  # PT = nonlocal escaped 
  _41 = __first_7 + _40;
  # DEBUG __firstD.34348 => _41
  # DEBUG __lastD.34349 => __first_7
  # DEBUG __resultD.34350 => __first_7
  # DEBUG __allocD.34351 => D#139ptD.0
  # DEBUG D#138ptD.0 => D#139ptD.0
  # DEBUG D#137ptD.0 => D#138ptD.0
  # DEBUG __firstD.34355 => _41
  # DEBUG __lastD.34354 => __first_7
  # DEBUG __resultD.34353 => __first_7
  # DEBUG D.34352 => D#137ptD.0
  # DEBUG __firstD.34358 => _41
  # DEBUG __lastD.34357 => __first_7
  # DEBUG __resultD.34356 => __first_7
  # DEBUG __assignableD.34361 => 1
  # DEBUG __firstD.34364 => _41
  # DEBUG __lastD.34363 => __first_7
  # DEBUG __resultD.34362 => __first_7
  # DEBUG __firstD.34367 => _41
  # DEBUG __lastD.34366 => __first_7
  # DEBUG __resultD.34365 => __first_7
  # DEBUG __itD.34079 => __first_7
  # DEBUG __itD.33529 => __first_7
  # DEBUG __itD.34077 => _41
  # DEBUG __itD.33529 => _41
  # DEBUG __firstD.34370 => _41
  # DEBUG __lastD.34369 => __first_7
  # DEBUG __resultD.34368 => __first_7
  # DEBUG __itD.34059 => __first_7
  # DEBUG __itD.33532 => __first_7
  # DEBUG __itD.34057 => __first_7
  # DEBUG __itD.33532 => __first_7
  # DEBUG __itD.34055 => _41
  # DEBUG __itD.33532 => _41
  # DEBUG __firstD.34373 => _41
  # DEBUG __lastD.34372 => __first_7
  # DEBUG __resultD.34371 => __first_7
  # DEBUG __simpleD.34377 => 1
  # DEBUG __firstD.34380 => _41
  # DEBUG __lastD.34379 => __first_7
  # DEBUG __resultD.34378 => __first_7
  __first.6_52 = (long intD.12) _41;
  _50 = _8 - __first.6_52;
  # RANGE [-768614336404564650, 768614336404564650]
  _Num_48 = _50 /[ex] 12;
  # DEBUG _NumD.34381 => _Num_48
  if (_Num_48 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 261, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _46 = (long unsigned intD.14) _50;
  # .MEM_104 = VDEF <.MEM_3(D)>
  # USE = nonlocal null { D.34995 } (escaped heap)
  # CLB = nonlocal null { D.34995 } (escaped heap)
  memmoveD.995 (__first_7, _41, _46);
  # VUSE <.MEM_104>
  pretmp_182 = this_4(D)->D.27582._M_implD.27073._M_finishD.27076;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_14 = PHI <.MEM_3(D)(6), .MEM_104(7)>
  # PT = nonlocal escaped 
  # prephitmp_183 = PHI <__first_7(6), pretmp_182(7)>
  # PT = nonlocal escaped 
  _44 = prephitmp_183 + _39;
  # .MEM_45 = VDEF <.MEM_14>
  this_4(D)->D.27582._M_implD.27073._M_finishD.27076 = _44;
  # DEBUG thisD.34346 => &__positionD.27507
  # DEBUG __firstD.34956 => D#189ptD.0
  # DEBUG __lastD.34957 => _41
  # DEBUG __resultD.34958 => __first_7
  # DEBUG __itD.33588 => _41
  # DEBUG __itD.33529 => _41
  # DEBUG __itD.33586 => D#189ptD.0
  # DEBUG __itD.33529 => D#189ptD.0
  # DEBUG __firstD.34961 => D#189ptD.0
  # DEBUG __lastD.34960 => _41
  # DEBUG __resultD.34959 => __first_7
  # DEBUG __itD.33568 => __first_7
  # DEBUG __itD.33532 => __first_7
  # DEBUG __itD.33566 => _41
  # DEBUG __itD.33532 => _41
  # DEBUG __itD.33564 => D#189ptD.0
  # DEBUG __itD.33532 => D#189ptD.0
  # DEBUG __firstD.34964 => D#189ptD.0
  # DEBUG __lastD.34963 => _41
  # DEBUG __resultD.34962 => __first_7
  # DEBUG __simpleD.34968 => 1
  # DEBUG __firstD.34971 => D#189ptD.0
  # DEBUG __lastD.34970 => _41
  # DEBUG __resultD.34969 => __first_7
  _113 = __first.6_52 - _27;
  # RANGE [-768614336404564650, 768614336404564650]
  _Num_114 = _113 /[ex] 12;
  # DEBUG _NumD.34972 => _Num_114
  if (_Num_114 != 0)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _115 = (long unsigned intD.14) _113;
  # RANGE [0, 18446744073709551615]
  _116 = -_115;
  # PT = nonlocal escaped 
  _117 = __first_7 + _116;
  # .MEM_144 = VDEF <.MEM_45>
  # USE = nonlocal null { D.34995 } (escaped heap)
  # CLB = nonlocal null { D.34995 } (escaped heap)
  memmoveD.995 (_117, __position_16, _115);
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_12 = PHI <.MEM_45(8), .MEM_144(9)>
  # DEBUG thisD.34344 => &__positionD.27507
  # PT = nonlocal 
  _49 = __position_16 + _39;
  # DEBUG thisD.34342 => &__positionD.27507
  # DEBUG __firstD.34336 => D#189ptD.0
  # DEBUG __lastD.34337 => _49
  # DEBUG __valueD.34338 => &__x_copyD.31473
  # DEBUG __firstD.34341 => D#189ptD.0
  if (__position_16 == _49)
    goto <bb 3>;
  else
    goto <bb 11>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  # __position_118 = PHI <__position_16(11), __position_15(14)>
  # .MEM_89 = PHI <.MEM_12(11), .MEM_58(14)>
  # DEBUG __firstD.34341 => __position_118
  # .MEM_66 = VDEF <.MEM_89>
  MEM[(struct N7Arbiter7entry_tED.26837 *)__position_118] = __x_copy_110;
  # .MEM_108 = VDEF <.MEM_66>
  MEM[(struct N7Arbiter7entry_tED.26837 *)__position_118 + 4B] = __x_copy$id_107;
  # .MEM_58 = VDEF <.MEM_108>
  MEM[(struct N7Arbiter7entry_tED.26837 *)__position_118 + 8B] = __x_copy$pri_105;
  # PT = nonlocal 
  __position_15 = __position_118 + 12;
  # DEBUG __firstD.34341 => __position_15
  # DEBUG __firstD.34341 => __position_15
  if (__position_15 == _49)
    goto <bb 13>;
  else
    goto <bb 14>;
;;    succ:       13 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 12, next block 48, flags: (NEW)
;;    pred:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_13 = PHI <.MEM_58(12)>
;;    succ:       48 [100.0%]  (FALLTHRU)

;;   basic block 48, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 13, next block 14, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU)
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 48, next block 15, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       5 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#147ptD.0 => &this_4(D)->D.27582
  # DEBUG thisD.34452 => D#147ptD.0
  # RANGE [0, 18446744073709551615]
  __n_54 = __n_2(D) - __elems_after_36;
  # DEBUG __firstD.34432 => __first_7
  # DEBUG __nD.34433 => __n_54
  # DEBUG __xD.34434 => &__x_copyD.31473
  # DEBUG __niterD.34450 => __n_54
  # DEBUG __firstD.34449 => __first_7
  if (__n_54 == 0)
    goto <bb 20>;
  else
    goto <bb 16>;
;;    succ:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __n_120 = PHI <__n_54(16), __n_69(19)>
  # PT = nonlocal escaped 
  # __first_82 = PHI <__first_7(16), __first_70(19)>
  # .MEM_87 = PHI <.MEM_3(D)(16), .MEM_106(19)>
  # DEBUG __niterD.34450 => __n_120
  # DEBUG __firstD.34449 => __first_82
  # .MEM_57 = VDEF <.MEM_87>
  MEM[(struct N7Arbiter7entry_tED.26837 *)__first_82] = __x_copy_110;
  # .MEM_55 = VDEF <.MEM_57>
  MEM[(struct N7Arbiter7entry_tED.26837 *)__first_82 + 4B] = __x_copy$id_107;
  # .MEM_106 = VDEF <.MEM_55>
  MEM[(struct N7Arbiter7entry_tED.26837 *)__first_82 + 8B] = __x_copy$pri_105;
  # RANGE [0, 18446744073709551614]
  __n_69 = __n_120 + 18446744073709551615;
  # DEBUG __niterD.34450 => __n_69
  # PT = nonlocal escaped 
  __first_70 = __first_82 + 12;
  # DEBUG __firstD.34449 => __first_70
  # DEBUG __niterD.34450 => __n_69
  # DEBUG __firstD.34449 => __first_70
  if (__n_69 == 0)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 17, next block 50, flags: (NEW)
;;    pred:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       50 [100.0%]  (FALLTHRU)

;;   basic block 50, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 18, next block 19, flags: (NEW)
;;    pred:       18 [100.0%]  (FALLTHRU)
  _170 = __n_54 * 12;
  # PT = nonlocal escaped 
  __first_137 = __first_7 + _170;
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 50, next block 20, flags: (NEW)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       50 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_134 = PHI <__first_137(50), __first_7(15)>
  # .MEM_90 = PHI <.MEM_106(50), .MEM_3(D)(15)>
  # .MEM_56 = VDEF <.MEM_90>
  this_4(D)->D.27582._M_implD.27073._M_finishD.27076 = __first_134;
  # DEBUG D#148ptD.0 => &this_4(D)->D.27582
  # DEBUG thisD.34430 => D#148ptD.0
  # DEBUG thisD.34428 => &__positionD.27507
  # DEBUG __firstD.34393 => D#189ptD.0
  # DEBUG __lastD.34394 => __first_7
  # DEBUG __resultD.34395 => __first_134
  # DEBUG __allocD.34396 => D#139ptD.0
  # DEBUG D#138ptD.0 => D#139ptD.0
  # DEBUG D#137ptD.0 => D#138ptD.0
  # DEBUG __firstD.34400 => D#189ptD.0
  # DEBUG __lastD.34399 => __first_7
  # DEBUG __resultD.34398 => __first_134
  # DEBUG D.34397 => D#137ptD.0
  # DEBUG __firstD.34403 => D#189ptD.0
  # DEBUG __lastD.34402 => __first_7
  # DEBUG __resultD.34401 => __first_134
  # DEBUG __assignableD.34406 => 1
  # DEBUG __firstD.34409 => D#189ptD.0
  # DEBUG __lastD.34408 => __first_7
  # DEBUG __resultD.34407 => __first_134
  # DEBUG __firstD.34412 => D#189ptD.0
  # DEBUG __lastD.34411 => __first_7
  # DEBUG __resultD.34410 => __first_134
  # DEBUG __itD.34079 => __first_7
  # DEBUG __itD.33529 => __first_7
  # DEBUG __itD.34077 => D#189ptD.0
  # DEBUG __itD.33529 => D#189ptD.0
  # DEBUG __firstD.34415 => D#189ptD.0
  # DEBUG __lastD.34414 => __first_7
  # DEBUG __resultD.34413 => __first_134
  # DEBUG __itD.34059 => __first_134
  # DEBUG __itD.33532 => __first_134
  # DEBUG __itD.34057 => __first_7
  # DEBUG __itD.33532 => __first_7
  # DEBUG __itD.34055 => D#189ptD.0
  # DEBUG __itD.33532 => D#189ptD.0
  # DEBUG __firstD.34418 => D#189ptD.0
  # DEBUG __lastD.34417 => __first_7
  # DEBUG __resultD.34416 => __first_134
  # DEBUG __simpleD.34422 => 1
  # DEBUG __firstD.34425 => D#189ptD.0
  # DEBUG __lastD.34424 => __first_7
  # DEBUG __resultD.34423 => __first_134
  # DEBUG _NumD.34426 => _22
  if (_22 != 0)
    goto <bb 22>;
  else
    goto <bb 21>;
;;    succ:       22 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 639, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_177 = (long unsigned intD.14) _23;
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 261, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       20 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _64 = (long unsigned intD.14) _23;
  # .MEM_109 = VDEF <.MEM_56>
  # USE = nonlocal null { D.34995 } (escaped heap)
  # CLB = nonlocal null { D.34995 } (escaped heap)
  memmoveD.995 (__first_134, __position_16, _64);
  # VUSE <.MEM_109>
  pretmp_175 = this_4(D)->D.27582._M_implD.27073._M_finishD.27076;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       21 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_93 = PHI <.MEM_56(21), .MEM_109(22)>
  # PT = nonlocal escaped 
  # prephitmp_176 = PHI <__first_134(21), pretmp_175(22)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_178 = PHI <pretmp_177(21), _64(22)>
  # PT = nonlocal escaped 
  _60 = prephitmp_176 + prephitmp_178;
  # .MEM_61 = VDEF <.MEM_93>
  this_4(D)->D.27582._M_implD.27073._M_finishD.27076 = _60;
  # DEBUG thisD.34391 => &__positionD.27507
  # DEBUG __firstD.34385 => D#189ptD.0
  # DEBUG __lastD.34386 => __first_7
  # DEBUG __valueD.34387 => &__x_copyD.31473
  # DEBUG __firstD.34390 => D#189ptD.0
  if (__first_7 == __position_16)
    goto <bb 3>;
  else
    goto <bb 24>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 23, next block 25, flags: (NEW)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 24, next block 26, flags: (NEW)
;;    pred:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                27 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  # __position_119 = PHI <__position_16(24), __position_63(27)>
  # .MEM_145 = PHI <.MEM_61(24), .MEM_42(27)>
  # DEBUG __firstD.34390 => __position_119
  # .MEM_53 = VDEF <.MEM_145>
  MEM[(struct N7Arbiter7entry_tED.26837 *)__position_119] = __x_copy_110;
  # .MEM_51 = VDEF <.MEM_53>
  MEM[(struct N7Arbiter7entry_tED.26837 *)__position_119 + 4B] = __x_copy$id_107;
  # .MEM_42 = VDEF <.MEM_51>
  MEM[(struct N7Arbiter7entry_tED.26837 *)__position_119 + 8B] = __x_copy$pri_105;
  # PT = nonlocal 
  __position_63 = __position_119 + 12;
  # DEBUG __firstD.34390 => __position_63
  # DEBUG __firstD.34390 => __position_63
  if (__first_7 == __position_63)
    goto <bb 26>;
  else
    goto <bb 27>;
;;    succ:       26 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 25, next block 49, flags: (NEW)
;;    pred:       25 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_164 = PHI <.MEM_42(25)>
;;    succ:       49 [100.0%]  (FALLTHRU)

;;   basic block 49, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 26, next block 27, flags: (NEW)
;;    pred:       26 [100.0%]  (FALLTHRU)
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 49, next block 28, flags: (NEW)
;;    pred:       25 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       4 [29.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.34983 => this_4(D)
  # DEBUG __nD.34984 => __n_2(D)
  # DEBUG __nD.34984 => __n_2(D)
  # DEBUG __sD.34985 => "vector::_M_fill_insert"
  # DEBUG D#121ptD.0 => this_4(D)
  # DEBUG thisD.33624 => D#121ptD.0
  # DEBUG D#120ptD.0 => D#121ptD.0
  # DEBUG D#119ptD.0 => &D#120ptD.0->D.27582
  # DEBUG thisD.33614 => D#119ptD.0
  # DEBUG __aD.33606 => D#118ptD.0
  # DEBUG D#117ptD.0 => D#118ptD.0
  # DEBUG D#116ptD.0 => D#117ptD.0
  # DEBUG thisD.33597 => D#116ptD.0
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _17 = MEM[(struct N7Arbiter7entry_tED.26837 * *)this_4(D)];
  # DEBUG D#29ptD.0 => this_4(D)
  # DEBUG D#29ptD.0 => this_4(D)
  # DEBUG thisD.34989 => D#29ptD.0
  # DEBUG thisD.34990 => D#29ptD.0
  _125 = (long intD.12) _17;
  _126 = _8 - _125;
  # RANGE [-768614336404564650, 768614336404564650]
  _127 = _126 /[ex] 12;
  # RANGE ~[768614336404564651, 17678129737304986965]
  _128 = (const long unsigned intD.14) _127;
  # RANGE [768614336404564651, 2305843009213693951] NONZERO 2305843009213693951
  _129 = 1537228672809129301 - _128;
  if (__n_2(D) > _129)
    goto <bb 29>;
  else
    goto <bb 30>;
;;    succ:       29 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 0
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       28 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_143 = VDEF <.MEM_3(D)>
  # USE = nonlocal null { D.34995 } (escaped heap)
  # CLB = nonlocal null { D.34995 } (escaped heap)
  _ZSt20__throw_length_errorPKcD.2834 ("vector::_M_fill_insert");
;;    succ:      

;;   basic block 30, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       28 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#29ptD.0 => this_4(D)
  # DEBUG D#29ptD.0 => this_4(D)
  # DEBUG thisD.33642 => D#29ptD.0
  # DEBUG thisD.33641 => D#29ptD.0
  # DEBUG D#29ptD.0 => this_4(D)
  # DEBUG D#29ptD.0 => this_4(D)
  # DEBUG thisD.33637 => D#29ptD.0
  # DEBUG thisD.33636 => D#29ptD.0
  # DEBUG __aD.34988 => &D.34992
  # DEBUG __bD.34987 => &__nD.34984
  _83 = MAX_EXPR <__n_2(D), _128>;
  # RANGE [0, 18446744073709551615]
  __len_133 = _83 + _128;
  # DEBUG __lenD.34986 => __len_133
  # DEBUG D#29ptD.0 => this_4(D)
  # DEBUG D#29ptD.0 => this_4(D)
  # DEBUG thisD.33629 => D#29ptD.0
  # DEBUG thisD.33628 => D#29ptD.0
  # DEBUG D#121ptD.0 => this_4(D)
  # DEBUG thisD.33644 => D#121ptD.0
  # DEBUG D#120ptD.0 => D#121ptD.0
  # DEBUG D#119ptD.0 => &D#120ptD.0->D.27582
  # DEBUG thisD.33614 => D#119ptD.0
  # DEBUG __aD.33606 => D#118ptD.0
  # DEBUG D#117ptD.0 => D#118ptD.0
  # DEBUG D#116ptD.0 => D#117ptD.0
  # DEBUG thisD.33597 => D#116ptD.0
  _162 = __len_133 > 1537228672809129301;
  _150 = _128 > __len_133;
  _123 = _150 | _162;
  if (_123 != 0)
    goto <bb 46>;
  else
    goto <bb 47>;
;;    succ:       46 [67.0%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [33.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 8, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       47 [9.4%]  (TRUE_VALUE,EXECUTABLE)
  pretmp_173 = __len_133 * 12;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 661, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       46 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,EXECUTABLE)
  # _166 = PHI <_152(46), _161(31)>
  # _167 = PHI <_151(46), _160(31)>
  # RANGE [12, 18446744073709551612] NONZERO 18446744073709551612
  # prephitmp_174 = PHI <18446744073709551612(46), pretmp_173(31)>
  # DEBUG __lenD.31507 => NULL
  # DEBUG thisD.34572 => this_4(D)
  # DEBUG D#52ptD.0 => &this_4(D)->D.27582._M_implD.27073._M_startD.27075
  # DEBUG thisD.34574 => NULL
  # DEBUG __iD.34573 => D#52ptD.0
  # DEBUG __lhsD.34569 => &__positionD.27507
  # DEBUG __rhsD.34570 => &D.31509
  # DEBUG thisD.33205 => &__positionD.27507
  # DEBUG thisD.33203 => &D.31509
  # DEBUG D#162ptD.0 => _167 /[ex] 12
  # DEBUG __elems_beforeD.31508 => (const size_typeD.27158) D#162ptD.0
  # DEBUG D#161ptD.0 => &this_4(D)->D.27582
  # DEBUG D#129ptD.0 => D#161ptD.0
  # DEBUG __nD.34974 => NULL
  # DEBUG thisD.34975 => D#129ptD.0
  # DEBUG D#128ptD.0 => D#129ptD.0
  # DEBUG D#127ptD.0 => &D#128ptD.0->_M_implD.27073
  # DEBUG D#126ptD.0 => D#127ptD.0
  # DEBUG __nD.34978 => NULL
  # DEBUG __aD.34977 => D#126ptD.0
  # DEBUG D#125ptD.0 => D#126ptD.0
  # DEBUG D#123ptD.0 => D#125ptD.0
  # DEBUG D#124ptD.0 => 0B
  # DEBUG __nD.34981 => NULL
  # DEBUG thisD.34979 => D#123ptD.0
  # DEBUG D.34980 => D#124ptD.0
  # DEBUG D#122ptD.0 => D#123ptD.0
  # DEBUG D#116ptD.0 => D#122ptD.0
  # DEBUG thisD.33649 => D#116ptD.0
  # .MEM_140 = VDEF <.MEM_3(D)>
  # PT = { D.34995 } (escaped heap)
  # USE = nonlocal null { D.34995 } (escaped heap)
  # CLB = nonlocal null { D.34995 } (escaped heap)
  _121 = _ZnwmD.2764 (prephitmp_174);
  # VUSE <.MEM_140>
  pretmp_29 = this_4(D)->D.27582._M_implD.27073._M_startD.27075;
  # VUSE <.MEM_140>
  pretmp_157 = this_4(D)->D.27582._M_implD.27073._M_finishD.27076;
  pretmp_159 = _121 + prephitmp_174;
  pretmp_155 = (long intD.12) pretmp_157;
  pretmp_153 = (long intD.12) pretmp_29;
  pretmp_147 = _166 - pretmp_153;
;;    succ:       33 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 32, next block 52, flags: (NEW, REACHABLE)
;;    pred:       47 [90.6%]  (FALSE_VALUE,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.34995 } (escaped heap)
  # iftmp.11_122 = PHI <0B(47), _121(32)>
  # .MEM_135 = PHI <.MEM_3(D)(47), .MEM_140(32)>
  # _168 = PHI <_161(47), _166(32)>
  # _163 = PHI <_160(47), _167(32)>
  # PT = nonlocal escaped 
  # prephitmp_156 = PHI <_17(47), pretmp_29(32)>
  # PT = null { D.34995 } (escaped heap)
  # prephitmp_158 = PHI <0B(47), pretmp_159(32)>
  # prephitmp_130 = PHI <_8(47), pretmp_155(32)>
  # prephitmp_146 = PHI <_160(47), pretmp_147(32)>
;;    succ:       52 [100.0%]  (FALLTHRU)

;;   basic block 52, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 33, next block 34, flags: (NEW)
;;    pred:       33 [100.0%]  (FALLTHRU)
  # DEBUG __new_startD.31510 => NULL
  # DEBUG __new_finishD.31511 => NULL
  # DEBUG D#142ptD.0 => &this_4(D)->D.27582
  # DEBUG thisD.34567 => D#142ptD.0
  # RANGE [0, 18446744073709551615]
  _19 = (long unsigned intD.14) _163;
  # PT = null { D.34995 } (escaped heap)
  __first_20 = iftmp.11_122 + _19;
  # DEBUG __firstD.34547 => __first_20
  # DEBUG __nD.34548 => __n_2(D)
  # DEBUG __xD.34549 => __x_21(D)
  # DEBUG __niterD.34565 => __n_2(D)
  # DEBUG __firstD.34564 => __first_20
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 1, count 0, freq 7428, maybe hot
;;    prev block 52, next block 35, flags: (NEW, REACHABLE)
;;    pred:       35 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                52 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 2305843009213693951] NONZERO 2305843009213693951
  # __n_141 = PHI <__n_85(35), __n_2(D)(52)>
  # PT = null { D.34995 } (escaped heap)
  # __first_165 = PHI <__first_86(35), __first_20(52)>
  # .MEM_139 = PHI <.MEM_99(35), .MEM_135(52)>
  # DEBUG __niterD.34565 => __n_141
  # DEBUG __firstD.34564 => __first_165
  # .MEM_99 = VDEF <.MEM_139>
  *__first_165 = MEM[(const struct N7Arbiter7entry_tED.26837 &)__x_21(D)];
  # RANGE [0, 2305843009213693950] NONZERO 2305843009213693951
  __n_85 = __n_141 + 18446744073709551615;
  # DEBUG __niterD.34565 => __n_85
  # PT = null { D.34995 } (escaped heap)
  __first_86 = __first_165 + 12;
  # DEBUG __firstD.34564 => __first_86
  # DEBUG __niterD.34565 => __n_85
  # DEBUG __firstD.34564 => __first_86
  if (__n_85 == 0)
    goto <bb 36>;
  else
    goto <bb 35>;
;;    succ:       36 [9.9%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [90.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 35, loop depth 1, count 0, freq 6693, maybe hot
;;    prev block 34, next block 36, flags: (NEW)
;;    pred:       34 [90.1%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 34>;
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 35, next block 51, flags: (NEW, REACHABLE)
;;    pred:       34 [9.9%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       51 [100.0%]  (FALLTHRU)

;;   basic block 51, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 36, next block 37, flags: (NEW)
;;    pred:       36 [100.0%]  (FALLTHRU)
  # DEBUG __new_finishD.31511 => 0B
  # DEBUG D#143ptD.0 => &this_4(D)->D.27582
  # DEBUG thisD.34545 => D#143ptD.0
  # DEBUG thisD.34543 => &__positionD.27507
  # DEBUG D#188ptD.0 => this_4(D)->D.27582._M_implD.27073._M_startD.27075
  # DEBUG __firstD.34508 => D#188ptD.0
  # DEBUG __lastD.34509 => D#189ptD.0
  # DEBUG __resultD.34510 => NULL
  # DEBUG __allocD.34511 => D#141ptD.0
  # DEBUG D#140ptD.0 => D#141ptD.0
  # DEBUG D#137ptD.0 => D#140ptD.0
  # DEBUG __firstD.34515 => D#188ptD.0
  # DEBUG __lastD.34514 => D#189ptD.0
  # DEBUG __resultD.34513 => NULL
  # DEBUG D.34512 => D#137ptD.0
  # DEBUG __firstD.34518 => D#188ptD.0
  # DEBUG __lastD.34517 => D#189ptD.0
  # DEBUG __resultD.34516 => NULL
  # DEBUG __assignableD.34521 => 1
  # DEBUG __firstD.34524 => D#188ptD.0
  # DEBUG __lastD.34523 => D#189ptD.0
  # DEBUG __resultD.34522 => NULL
  # DEBUG __firstD.34527 => D#188ptD.0
  # DEBUG __lastD.34526 => D#189ptD.0
  # DEBUG __resultD.34525 => NULL
  # DEBUG __itD.34079 => D#189ptD.0
  # DEBUG __itD.33529 => D#189ptD.0
  # DEBUG __itD.34077 => D#188ptD.0
  # DEBUG __itD.33529 => D#188ptD.0
  # DEBUG __firstD.34530 => D#188ptD.0
  # DEBUG __lastD.34529 => D#189ptD.0
  # DEBUG __resultD.34528 => NULL
  # DEBUG __itD.34059 => NULL
  # DEBUG __itD.33532 => NULL
  # DEBUG __itD.34057 => D#189ptD.0
  # DEBUG __itD.33532 => D#189ptD.0
  # DEBUG __itD.34055 => D#188ptD.0
  # DEBUG __itD.33532 => D#188ptD.0
  # DEBUG __firstD.34533 => D#188ptD.0
  # DEBUG __lastD.34532 => D#189ptD.0
  # DEBUG __resultD.34531 => NULL
  # DEBUG __simpleD.34537 => 1
  # DEBUG __firstD.34540 => D#188ptD.0
  # DEBUG __lastD.34539 => D#189ptD.0
  # DEBUG __resultD.34538 => NULL
  # DEBUG D#187ptD.0 => (long intD.12) D#188ptD.0
  # DEBUG D#186ptD.0 => _168 - D#187ptD.0
  # RANGE [-768614336404564650, 768614336404564650]
  _Num_79 = prephitmp_146 /[ex] 12;
  # DEBUG _NumD.34541 => _Num_79
  if (_Num_79 != 0)
    goto <bb 38>;
  else
    goto <bb 37>;
;;    succ:       38 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 522, maybe hot
;;    prev block 51, next block 38, flags: (NEW)
;;    pred:       51 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_88 = (long unsigned intD.14) prephitmp_146;
  goto <bb 39>;
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 213, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       51 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _80 = (long unsigned intD.14) prephitmp_146;
  # .MEM_100 = VDEF <.MEM_99>
  # USE = nonlocal null { D.34995 } (escaped heap)
  # CLB = nonlocal null { D.34995 } (escaped heap)
  memmoveD.995 (iftmp.11_122, prephitmp_156, _80);
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       37 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_96 = PHI <.MEM_99(37), .MEM_100(38)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_112 = PHI <pretmp_88(37), _80(38)>
  # DEBUG D#185ptD.0 => (long unsigned intD.14) D#186ptD.0
  # DEBUG __new_finishD.31511 => iftmp.11_122 + D#185ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _25 = __n_2(D) * 12;
  # RANGE [0, 18446744073709551615]
  _142 = _25 + prephitmp_112;
  # PT = null { D.34995 } (escaped heap)
  __new_finish_26 = iftmp.11_122 + _142;
  # DEBUG __new_finishD.31511 => __new_finish_26
  # DEBUG D#144ptD.0 => &this_4(D)->D.27582
  # DEBUG thisD.34506 => D#144ptD.0
  # DEBUG D#184ptD.0 => this_4(D)->D.27582._M_implD.27073._M_finishD.27076
  # DEBUG thisD.34504 => &__positionD.27507
  # DEBUG __firstD.34469 => D#189ptD.0
  # DEBUG __lastD.34470 => D#184ptD.0
  # DEBUG __resultD.34471 => __new_finish_26
  # DEBUG __allocD.34472 => D#141ptD.0
  # DEBUG D#140ptD.0 => D#141ptD.0
  # DEBUG D#137ptD.0 => D#140ptD.0
  # DEBUG __firstD.34476 => D#189ptD.0
  # DEBUG __lastD.34475 => D#184ptD.0
  # DEBUG __resultD.34474 => __new_finish_26
  # DEBUG D.34473 => D#137ptD.0
  # DEBUG __firstD.34479 => D#189ptD.0
  # DEBUG __lastD.34478 => D#184ptD.0
  # DEBUG __resultD.34477 => __new_finish_26
  # DEBUG __assignableD.34482 => 1
  # DEBUG __firstD.34485 => D#189ptD.0
  # DEBUG __lastD.34484 => D#184ptD.0
  # DEBUG __resultD.34483 => __new_finish_26
  # DEBUG __firstD.34488 => D#189ptD.0
  # DEBUG __lastD.34487 => D#184ptD.0
  # DEBUG __resultD.34486 => __new_finish_26
  # DEBUG __itD.34079 => D#184ptD.0
  # DEBUG __itD.33529 => D#184ptD.0
  # DEBUG __itD.34077 => D#189ptD.0
  # DEBUG __itD.33529 => D#189ptD.0
  # DEBUG __firstD.34491 => D#189ptD.0
  # DEBUG __lastD.34490 => D#184ptD.0
  # DEBUG __resultD.34489 => __new_finish_26
  # DEBUG __itD.34059 => __new_finish_26
  # DEBUG __itD.33532 => __new_finish_26
  # DEBUG __itD.34057 => D#184ptD.0
  # DEBUG __itD.33532 => D#184ptD.0
  # DEBUG __itD.34055 => D#189ptD.0
  # DEBUG __itD.33532 => D#189ptD.0
  # DEBUG __firstD.34494 => D#189ptD.0
  # DEBUG __lastD.34493 => D#184ptD.0
  # DEBUG __resultD.34492 => __new_finish_26
  # DEBUG __simpleD.34498 => 1
  # DEBUG __firstD.34501 => D#189ptD.0
  # DEBUG __lastD.34500 => D#184ptD.0
  # DEBUG __resultD.34499 => __new_finish_26
  _72 = prephitmp_130 - _168;
  # RANGE [-768614336404564650, 768614336404564650]
  _Num_73 = _72 /[ex] 12;
  # DEBUG _NumD.34502 => _Num_73
  if (_Num_73 != 0)
    goto <bb 41>;
  else
    goto <bb 40>;
;;    succ:       41 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 0, count 0, freq 522, maybe hot
;;    prev block 39, next block 41, flags: (NEW)
;;    pred:       39 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_111 = (long unsigned intD.14) _72;
  goto <bb 42>;
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 41, loop depth 0, count 0, freq 213, maybe hot
;;    prev block 40, next block 42, flags: (NEW, REACHABLE)
;;    pred:       39 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _74 = (long unsigned intD.14) _72;
  # .MEM_101 = VDEF <.MEM_96>
  # USE = nonlocal null { D.34995 } (escaped heap)
  # CLB = nonlocal null { D.34995 } (escaped heap)
  memcpyD.992 (__new_finish_26, __position_16, _74);
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       40 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_97 = PHI <.MEM_96(40), .MEM_101(41)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_172 = PHI <pretmp_111(40), _74(41)>
  # PT = null { D.34995 } (escaped heap)
  _76 = __new_finish_26 + prephitmp_172;
  # DEBUG __new_finishD.31511 => _76
  # DEBUG D#145ptD.0 => &this_4(D)->D.27582
  # DEBUG thisD.34467 => D#145ptD.0
  # DEBUG D#160ptD.0 => this_4(D)->D.27582._M_implD.27073._M_finishD.27076
  # DEBUG D#159ptD.0 => this_4(D)->D.27582._M_implD.27073._M_startD.27075
  # DEBUG __firstD.34464 => D#159ptD.0
  # DEBUG __lastD.34465 => D#160ptD.0
  # DEBUG D.34466 => NULL
  # DEBUG D#46ptD.0 => D#159ptD.0
  # DEBUG D#47ptD.0 => D#160ptD.0
  # DEBUG __firstD.33184 => D#46ptD.0
  # DEBUG __lastD.33183 => D#47ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#44ptD.0 => D#46ptD.0
  # DEBUG D#42ptD.0 => D#44ptD.0
  # DEBUG D#43ptD.0 => D#45ptD.0
  # DEBUG D.33173 => D#42ptD.0
  # DEBUG D.33172 => D#43ptD.0
  # DEBUG D#158ptD.0 => this_4(D)->D.27582._M_implD.27073._M_end_of_storageD.27077
  # DEBUG D#157ptD.0 => (long intD.12) D#158ptD.0
  # DEBUG D#156ptD.0 => (long intD.12) D#188ptD.0
  # DEBUG D#155ptD.0 => D#157ptD.0 - D#156ptD.0
  # DEBUG D#154ptD.0 => D#155ptD.0 /[ex] 12
  # DEBUG D#153ptD.0 => (long unsigned intD.14) D#154ptD.0
  # DEBUG D#152ptD.0 => &this_4(D)->D.27582
  # DEBUG thisD.34454 => D#152ptD.0
  # DEBUG __pD.34455 => D#188ptD.0
  # DEBUG __nD.34456 => D#153ptD.0
  if (prephitmp_156 != 0B)
    goto <bb 43>;
  else
    goto <bb 44>;
;;    succ:       43 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 43, loop depth 0, count 0, freq 513, maybe hot
;;    prev block 42, next block 44, flags: (NEW, REACHABLE)
;;    pred:       42 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#104ptD.0 => &D#152ptD.0->_M_implD.27073
  # DEBUG D#102ptD.0 => D#104ptD.0
  # DEBUG D#103ptD.0 => D#153ptD.0
  # DEBUG __pD.34460 => D#188ptD.0
  # DEBUG __aD.34458 => D#102ptD.0
  # DEBUG __nD.34459 => D#103ptD.0
  # DEBUG D#101ptD.0 => D#103ptD.0
  # DEBUG D#100ptD.0 => D#102ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#101ptD.0
  # DEBUG __pD.34463 => D#188ptD.0
  # DEBUG thisD.34461 => D#98ptD.0
  # DEBUG D.34462 => D#99ptD.0
  # .MEM_102 = VDEF <.MEM_97>
  # USE = nonlocal null { D.34995 } (escaped heap)
  # CLB = nonlocal null { D.34995 } (escaped heap)
  _ZdlPvD.2766 (prephitmp_156);
;;    succ:       44 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 44, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 43, next block 53, flags: (NEW, REACHABLE)
;;    pred:       43 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                42 [30.2%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_98 = PHI <.MEM_102(43), .MEM_97(42)>
;;    succ:       53 [100.0%]  (FALLTHRU)

;;   basic block 53, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 44, next block 45, flags: (NEW)
;;    pred:       44 [100.0%]  (FALLTHRU)
  # .MEM_30 = VDEF <.MEM_98>
  this_4(D)->D.27582._M_implD.27073._M_startD.27075 = iftmp.11_122;
  # .MEM_31 = VDEF <.MEM_30>
  this_4(D)->D.27582._M_implD.27073._M_finishD.27076 = _76;
  # .MEM_34 = VDEF <.MEM_31>
  this_4(D)->D.27582._M_implD.27073._M_end_of_storageD.27077 = prephitmp_158;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 45, loop depth 0, count 0, freq 4156, maybe hot
;;    prev block 53, next block 54, flags: (NEW, REACHABLE)
;;    pred:       55 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                53 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_181(55), .MEM_34(53)>
;;    succ:       54 [100.0%]  (FALLTHRU)

;;   basic block 54, loop depth 0, count 0, freq 4156, maybe hot
;;    prev block 45, next block 46, flags: (NEW)
;;    pred:       45 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_1>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 46, loop depth 0, count 0, freq 654, maybe hot
;;   Invalid sum of incoming frequencies 492, should be 654
;;    prev block 54, next block 47, flags: (NEW, REACHABLE)
;;    pred:       30 [67.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __lenD.31507 => NULL
  # DEBUG thisD.34572 => this_4(D)
  # DEBUG D#52ptD.0 => &this_4(D)->D.27582._M_implD.27073._M_startD.27075
  # DEBUG thisD.34574 => NULL
  # DEBUG __iD.34573 => D#52ptD.0
  # DEBUG __lhsD.34569 => &__positionD.27507
  # DEBUG __rhsD.34570 => &D.31509
  # DEBUG thisD.33205 => &__positionD.27507
  _152 = (long intD.12) __position_16;
  # DEBUG thisD.33203 => &D.31509
  _151 = _152 - _125;
  # DEBUG D#162ptD.0 => _151 /[ex] 12
  # DEBUG __elems_beforeD.31508 => (const size_typeD.27158) D#162ptD.0
  # DEBUG D#161ptD.0 => &this_4(D)->D.27582
  # DEBUG D#129ptD.0 => D#161ptD.0
  # DEBUG __nD.34974 => NULL
  # DEBUG thisD.34975 => D#129ptD.0
  # DEBUG D#128ptD.0 => D#129ptD.0
  goto <bb 32>;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 47, loop depth 0, count 0, freq 80, maybe hot
;;   Invalid sum of incoming frequencies 243, should be 80
;;    prev block 46, next block 1, flags: (NEW, REACHABLE)
;;    pred:       30 [33.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __lenD.31507 => NULL
  # DEBUG thisD.34572 => this_4(D)
  # DEBUG D#52ptD.0 => &this_4(D)->D.27582._M_implD.27073._M_startD.27075
  # DEBUG thisD.34574 => NULL
  # DEBUG __iD.34573 => D#52ptD.0
  # DEBUG __lhsD.34569 => &__positionD.27507
  # DEBUG __rhsD.34570 => &D.31509
  # DEBUG thisD.33205 => &__positionD.27507
  _161 = (long intD.12) __position_16;
  # DEBUG thisD.33203 => &D.31509
  _160 = _161 - _125;
  # DEBUG D#162ptD.0 => _160 /[ex] 12
  # DEBUG __elems_beforeD.31508 => (const size_typeD.27158) D#162ptD.0
  # DEBUG D#161ptD.0 => &this_4(D)->D.27582
  # DEBUG D#129ptD.0 => D#161ptD.0
  # DEBUG __nD.34974 => NULL
  # DEBUG thisD.34975 => D#129ptD.0
  # DEBUG D#128ptD.0 => D#129ptD.0
  if (__len_133 != 0)
    goto <bb 31>;
  else
    goto <bb 33>;
;;    succ:       31 [9.4%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [90.6%]  (FALSE_VALUE,EXECUTABLE)

}



;; Function Arbiter::Arbiter(Module*, const string&, int) (_ZN7ArbiterC2EP6ModuleRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi, funcdef_no=1515, decl_uid=27634, cgraph_uid=519, symbol_order=520)


Pass statistics:
----------------

Arbiter::Arbiter(Module*, const string&, int) (struct ArbiterD.26830 * const thisD.27635, struct ModuleD.26017 * parentD.27636, const struct stringD.8426 & nameD.27637, intD.9 sizeD.27638)
Eh tree:
   1 cleanup land:{1,<L4>}
     2 cleanup land:{2,<L3>}
{
  intD.9 SR.238D.35104;
  intD.9 SR.237D.35103;
  unsigned char SR.236D.35102;
  struct iteratorD.27150 __positionD.35051;
  struct value_typeD.27145 __xD.35046;
  intD.9 iD.30908;
  struct N7Arbiter7entry_tED.26837 D.32181;
  struct ModuleD.26017 * _4;
  struct N7Arbiter7entry_tED.26837 & _14;
  long unsigned intD.14 _21;
  struct vectorD.26839 * _22;
  struct ModuleD.26017 * * _23;
  long unsigned intD.14 _24;
  long unsigned intD.14 _25;
  struct N7Arbiter7entry_tED.26837 * _31;
  struct N7Arbiter7entry_tED.26837 * pretmp_38;
  charD.10 * const _51;
  const charD.10 * _52;
  charD.10 * const _53;
  const charD.10 * _54;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  _4 = &this_3(D)->D.27639;
  # .MEM_8 = VDEF <.MEM_5(D)>
  # USE = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  # CLB = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  _ZN6ModuleC2EPS_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.26799 (_4, parent_6(D), name_7(D));
  # .MEM_9 = VDEF <.MEM_8>
  this_3(D)->D.27639._vptr.ModuleD.26812 = &MEM[(voidD.45 *)&_ZTV7ArbiterD.27647 + 16B];
  # DEBUG D#165ptD.0 => &this_3(D)->_requestD.27584
  # DEBUG thisD.34619 => D#165ptD.0
  # DEBUG D#97ptD.0 => &D#165ptD.0->D.27582
  # DEBUG thisD.34620 => D#97ptD.0
  # DEBUG D#96ptD.0 => &D#97ptD.0->_M_implD.27073
  # DEBUG thisD.34621 => D#96ptD.0
  # DEBUG thisD.33454 => D#96ptD.0
  # DEBUG thisD.33452 => D#96ptD.0
  # .MEM_32 = VDEF <.MEM_9>
  MEM[(struct _Vector_implD.27050 *)this_3(D) + 96B]._M_startD.27075 = 0B;
  # .MEM_33 = VDEF <.MEM_32>
  MEM[(struct _Vector_implD.27050 *)this_3(D) + 96B]._M_finishD.27076 = 0B;
  # .MEM_34 = VDEF <.MEM_33>
  MEM[(struct _Vector_implD.27050 *)this_3(D) + 96B]._M_end_of_storageD.27077 = 0B;
  # .MEM_12 = VDEF <.MEM_34>
  this_3(D)->_sizeD.27585 = size_11(D);
  # .MEM_13 = VDEF <.MEM_12>
  this_3(D)->_selectedD.27586 = -1;
  # .MEM_15 = VDEF <.MEM_13>
  this_3(D)->_highest_priD.27587 = -2147483648;
  # .MEM_16 = VDEF <.MEM_15>
  this_3(D)->_best_inputD.27588 = -1;
  # .MEM_17 = VDEF <.MEM_16>
  this_3(D)->_num_reqsD.27589 = 0;
  # RANGE ~[2147483648, 18446744071562067967]
  _21 = (long unsigned intD.14) size_11(D);
  # DEBUG D#193ptD.0 => &this_3(D)->_requestD.27584
  # DEBUG thisD.35044 => D#193ptD.0
  # DEBUG __new_sizeD.35045 => _21
  # .MEM_18 = VDEF <.MEM_17>
  MEM[(struct N7Arbiter7entry_tED.26837 *)&__xD.35046] = 0;
  # .MEM_2 = VDEF <.MEM_18>
  MEM[(struct N7Arbiter7entry_tED.26837 *)&__xD.35046 + 4B] = 0;
  # .MEM_1 = VDEF <.MEM_2>
  MEM[(struct N7Arbiter7entry_tED.26837 *)&__xD.35046 + 8B] = 0;
  # DEBUG D#29ptD.0 => D#193ptD.0
  # DEBUG D#29ptD.0 => D#193ptD.0
  # DEBUG thisD.35053 => D#29ptD.0
  # DEBUG thisD.35054 => D#29ptD.0
  if (_21 != 0)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [20.7%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [79.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [79.3%]  (FALSE_VALUE,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_64 = PHI <.MEM_1(2), .MEM_61(4)>
  # DEBUG iD.30908 => 0
  if (size_11(D) <= 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 186, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [20.7%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#29ptD.0 => D#193ptD.0
  # DEBUG D#29ptD.0 => D#193ptD.0
  # DEBUG thisD.34605 => D#29ptD.0
  # DEBUG thisD.34604 => D#29ptD.0
  # DEBUG thisD.34598 => D#193ptD.0
  # DEBUG D#30ptD.0 => &D#193ptD.0->D.27582._M_implD.27073._M_finishD.27076
  # DEBUG thisD.34600 => NULL
  # DEBUG __iD.34599 => D#30ptD.0
  # DEBUG thisD.35052 => D#193ptD.0
  # .MEM_60 = VDEF <.MEM_1>
  MEM[(struct __normal_iteratorD.27151 *)&__positionD.35051] = 0B;
  # DEBUG __nD.35050 => _21
  # DEBUG __xD.35049 => &__xD.35046
  # PT = nonlocal 
  _22 = &this_3(D)->_requestD.27584;
  [LP 2] # .MEM_61 = VDEF <.MEM_60>
  # USE = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  # CLB = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  _ZNSt6vectorIN7Arbiter7entry_tESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEmRKS1_D.27505 (_22, __positionD.35051, _21, &__xD.35046);
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 (EH,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_58 = PHI <.MEM_64(3), .MEM_26(7)>
  # VUSE <.MEM_58>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 6, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       3 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_64>
  # PT = nonlocal escaped 
  pretmp_38 = MEM[(struct N7Arbiter7entry_tED.26837 * *)this_3(D) + 96B];
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # i_44 = PHI <0(6), i_27(8)>
  # .MEM_42 = PHI <.MEM_64(6), .MEM_26(8)>
  # DEBUG iD.30908 => i_44
  # RANGE [0, 18446744073709551615]
  _24 = (long unsigned intD.14) i_44;
  # DEBUG D#163ptD.0 => &this_3(D)->_requestD.27584
  # DEBUG D#7ptD.0 => D#163ptD.0
  # DEBUG __nD.34623 => _24
  # DEBUG thisD.34624 => D#7ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _25 = _24 * 12;
  # PT = nonlocal escaped 
  _14 = pretmp_38 + _25;
  # .MEM_26 = VDEF <.MEM_42>
  _14->validD.26834 = 0;
  i_27 = i_44 + 1;
  # DEBUG iD.30908 => i_27
  # DEBUG iD.30908 => i_27
  if (size_11(D) <= i_27)
    goto <bb 5>;
  else
    goto <bb 8>;
;;    succ:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       4 (EH,EXECUTABLE)
<L3>: [LP 2]
  # DEBUG D#164ptD.0 => &this_3(D)->_requestD.27584
  # DEBUG thisD.34626 => D#164ptD.0
  # DEBUG D#112ptD.0 => &D#164ptD.0->D.27582
  # DEBUG thisD.33523 => D#112ptD.0
  # DEBUG D#115ptD.0 => D#164ptD.0->D.27582._M_implD.27073._M_finishD.27076
  # DEBUG D#114ptD.0 => D#164ptD.0->D.27582._M_implD.27073._M_startD.27075
  # DEBUG __firstD.33520 => D#114ptD.0
  # DEBUG __lastD.33521 => D#115ptD.0
  # DEBUG D.33522 => NULL
  # DEBUG D#46ptD.0 => D#114ptD.0
  # DEBUG D#47ptD.0 => D#115ptD.0
  # DEBUG __firstD.33184 => D#46ptD.0
  # DEBUG __lastD.33183 => D#47ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#44ptD.0 => D#46ptD.0
  # DEBUG D#42ptD.0 => D#44ptD.0
  # DEBUG D#43ptD.0 => D#45ptD.0
  # DEBUG D.33173 => D#42ptD.0
  # DEBUG D.33172 => D#43ptD.0
  # DEBUG D#113ptD.0 => &D#164ptD.0->D.27582
  # DEBUG thisD.34627 => D#113ptD.0
  # DEBUG D#111ptD.0 => D#113ptD.0->_M_implD.27073._M_end_of_storageD.27077
  # DEBUG D#110ptD.0 => (long intD.12) D#111ptD.0
  # VUSE <.MEM_61>
  # PT = nonlocal escaped 
  _31 = MEM[(struct _Vector_baseD.26840 *)this_3(D) + 96B]._M_implD.27073._M_startD.27075;
  # DEBUG D#109ptD.0 => (long intD.12) _31
  # DEBUG D#108ptD.0 => D#110ptD.0 - D#109ptD.0
  # DEBUG D#107ptD.0 => D#108ptD.0 /[ex] 12
  # DEBUG D#106ptD.0 => (long unsigned intD.14) D#107ptD.0
  # DEBUG thisD.34630 => D#113ptD.0
  # DEBUG __pD.34629 => _31
  # DEBUG __nD.34628 => D#106ptD.0
  if (_31 != 0B)
    goto <bb 10>;
  else
    goto <bb 11>;
;;    succ:       10 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#104ptD.0 => &D#113ptD.0->_M_implD.27073
  # DEBUG D#102ptD.0 => D#104ptD.0
  # DEBUG D#103ptD.0 => D#106ptD.0
  # DEBUG __pD.34634 => _31
  # DEBUG __aD.34632 => D#102ptD.0
  # DEBUG __nD.34633 => D#103ptD.0
  # DEBUG D#101ptD.0 => D#103ptD.0
  # DEBUG D#100ptD.0 => D#102ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#101ptD.0
  # DEBUG __pD.34637 => _31
  # DEBUG thisD.34635 => D#98ptD.0
  # DEBUG D.34636 => D#99ptD.0
  # .MEM_35 = VDEF <.MEM_61>
  # USE = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  # CLB = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  _ZdlPvD.2766 (_31);
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       9 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_28 = PHI <.MEM_61(9), .MEM_35(10)>
  # DEBUG D#105ptD.0 => &D#113ptD.0->_M_implD.27073
  # DEBUG thisD.34638 => D#105ptD.0
  # DEBUG thisD.34639 => D#105ptD.0
  # DEBUG thisD.34640 => D#105ptD.0
  # .MEM_40 = VDEF <.MEM_28>
  MEM[(struct  &)this_3(D) + 96] ={v} {CLOBBER};
  [LP 1] resx 2
;;    succ:       12 (EH,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 (EH,EXECUTABLE)
<L4>: [LP 1]
  # DEBUG thisD.35055 => _4
  # .MEM_62 = VDEF <.MEM_40>
  MEM[(struct ModuleD.26017 *)this_3(D)]._vptr.ModuleD.26812 = &MEM[(voidD.45 *)&_ZTV6ModuleD.26817 + 16B];
  # DEBUG D#95ptD.0 => &_4->_childrenD.26767
  # DEBUG thisD.35056 => D#95ptD.0
  # DEBUG D#89ptD.0 => &D#95ptD.0->D.26765
  # DEBUG thisD.33401 => D#89ptD.0
  # DEBUG D#92ptD.0 => D#95ptD.0->D.26765._M_implD.26256._M_finishD.26259
  # DEBUG D#91ptD.0 => D#95ptD.0->D.26765._M_implD.26256._M_startD.26258
  # DEBUG D#39ptD.0 => D#91ptD.0
  # DEBUG D#40ptD.0 => D#92ptD.0
  # DEBUG __firstD.33400 => D#39ptD.0
  # DEBUG __lastD.33399 => D#40ptD.0
  # DEBUG D.33398 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#37ptD.0 => D#39ptD.0
  # DEBUG D#35ptD.0 => D#37ptD.0
  # DEBUG D#36ptD.0 => D#38ptD.0
  # DEBUG __firstD.33146 => D#35ptD.0
  # DEBUG __lastD.33145 => D#36ptD.0
  # DEBUG D#34ptD.0 => D#36ptD.0
  # DEBUG D#33ptD.0 => D#35ptD.0
  # DEBUG D#31ptD.0 => D#33ptD.0
  # DEBUG D#32ptD.0 => D#34ptD.0
  # DEBUG D.33135 => D#31ptD.0
  # DEBUG D.33134 => D#32ptD.0
  # DEBUG D#90ptD.0 => &D#95ptD.0->D.26765
  # DEBUG thisD.35057 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0->_M_implD.26256._M_end_of_storageD.26260
  # DEBUG D#87ptD.0 => (long intD.12) D#88ptD.0
  # VUSE <.MEM_62>
  # PT = nonlocal escaped 
  _23 = MEM[(struct _Vector_baseD.26023 *)this_3(D) + 72B]._M_implD.26256._M_startD.26258;
  # DEBUG D#86ptD.0 => (long intD.12) _23
  # DEBUG D#85ptD.0 => D#87ptD.0 - D#86ptD.0
  # DEBUG D#84ptD.0 => D#85ptD.0 /[ex] 8
  # DEBUG D#81ptD.0 => D#90ptD.0
  # DEBUG D#82ptD.0 => (long unsigned intD.14) D#84ptD.0
  # DEBUG __pD.35060 => _23
  # DEBUG thisD.35058 => D#81ptD.0
  # DEBUG __nD.35059 => D#82ptD.0
  # DEBUG D#80ptD.0 => D#82ptD.0
  # DEBUG D#79ptD.0 => D#81ptD.0
  if (_23 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;
;;    succ:       13 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#78ptD.0 => &D#79ptD.0->_M_implD.26256
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG D#77ptD.0 => D#80ptD.0
  # DEBUG __pD.35064 => _23
  # DEBUG __aD.35062 => D#76ptD.0
  # DEBUG __nD.35063 => D#77ptD.0
  # DEBUG D#75ptD.0 => D#77ptD.0
  # DEBUG D#74ptD.0 => D#76ptD.0
  # DEBUG D#72ptD.0 => D#74ptD.0
  # DEBUG D#73ptD.0 => D#75ptD.0
  # DEBUG __pD.35067 => _23
  # DEBUG thisD.35065 => D#72ptD.0
  # DEBUG D.35066 => D#73ptD.0
  # .MEM_63 = VDEF <.MEM_62>
  # USE = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  # CLB = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  _ZdlPvD.2766 (_23);
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       12 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_55 = PHI <.MEM_62(12), .MEM_63(13)>
  # DEBUG D#83ptD.0 => &D#90ptD.0->_M_implD.26256
  # DEBUG thisD.35068 => D#83ptD.0
  # DEBUG thisD.35069 => D#83ptD.0
  # DEBUG thisD.35070 => D#83ptD.0
  # .MEM_68 = VDEF <.MEM_55>
  MEM[(struct  &)this_3(D) + 72] ={v} {CLOBBER};
  # DEBUG D#94ptD.0 => &_4->_fullnameD.26020
  # DEBUG thisD.35071 => D#94ptD.0
  # DEBUG thisD.35072 => D#94ptD.0
  # DEBUG thisD.35081 => D#94ptD.0
  # VUSE <.MEM_68>
  # PT = nonlocal escaped 
  _51 = MEM[(charD.10 * *)this_3(D) + 40B];
  # DEBUG D#1ptD.0 => D#94ptD.0
  # DEBUG thisD.32952 => D#1ptD.0
  # DEBUG thisD.35082 => D#94ptD.0
  # PT = nonlocal 
  _52 = &MEM[(const struct basic_stringD.8425 *)this_3(D) + 40B].D.13836._M_local_bufD.13838;
  if (_51 != _52)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#70ptD.0 => MEM[(struct basic_stringD.8425 *)D#94ptD.0].D.13836._M_allocated_capacityD.13839
  # DEBUG D#69ptD.0 => D#70ptD.0
  # DEBUG thisD.35074 => D#94ptD.0
  # DEBUG __sizeD.35073 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG D#1ptD.0 => D#94ptD.0
  # DEBUG thisD.33283 => D#1ptD.0
  # DEBUG thisD.33284 => D#94ptD.0
  # DEBUG D#67ptD.0 => &MEM[(struct basic_stringD.8425 *)D#94ptD.0]._M_dataplusD.13816
  # DEBUG D#65ptD.0 => D#67ptD.0
  # DEBUG D#66ptD.0 => D#68ptD.0 + 1
  # DEBUG __pD.35077 => _51
  # DEBUG __aD.35075 => D#65ptD.0
  # DEBUG __nD.35076 => D#66ptD.0
  # DEBUG D#64ptD.0 => D#66ptD.0
  # DEBUG D#63ptD.0 => D#65ptD.0
  # DEBUG D#61ptD.0 => D#63ptD.0
  # DEBUG D#62ptD.0 => D#64ptD.0
  # DEBUG __pD.35080 => _51
  # DEBUG thisD.35078 => D#61ptD.0
  # DEBUG D.35079 => D#62ptD.0
  # .MEM_69 = VDEF <.MEM_68>
  # USE = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  # CLB = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  _ZdlPvD.2766 (_51);
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       14 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_56 = PHI <.MEM_68(14), .MEM_69(15)>
  # DEBUG D#71ptD.0 => &MEM[(struct basic_stringD.8425 *)D#94ptD.0]._M_dataplusD.13816
  # DEBUG thisD.35083 => D#71ptD.0
  # DEBUG thisD.35084 => D#71ptD.0
  # DEBUG thisD.35085 => D#71ptD.0
  # .MEM_73 = VDEF <.MEM_56>
  MEM[(struct  &)this_3(D) + 40] ={v} {CLOBBER};
  # DEBUG D#93ptD.0 => &_4->_nameD.26019
  # DEBUG thisD.35086 => D#93ptD.0
  # DEBUG thisD.35087 => D#93ptD.0
  # DEBUG thisD.35096 => D#93ptD.0
  # VUSE <.MEM_73>
  # PT = nonlocal escaped 
  _53 = MEM[(charD.10 * *)this_3(D) + 8B];
  # DEBUG D#1ptD.0 => D#93ptD.0
  # DEBUG thisD.32952 => D#1ptD.0
  # DEBUG thisD.35097 => D#93ptD.0
  # PT = nonlocal 
  _54 = &MEM[(const struct basic_stringD.8425 *)this_3(D) + 8B].D.13836._M_local_bufD.13838;
  if (_53 != _54)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#70ptD.0 => MEM[(struct basic_stringD.8425 *)D#93ptD.0].D.13836._M_allocated_capacityD.13839
  # DEBUG D#69ptD.0 => D#70ptD.0
  # DEBUG thisD.35089 => D#93ptD.0
  # DEBUG __sizeD.35088 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG D#1ptD.0 => D#93ptD.0
  # DEBUG thisD.33283 => D#1ptD.0
  # DEBUG thisD.33284 => D#93ptD.0
  # DEBUG D#67ptD.0 => &MEM[(struct basic_stringD.8425 *)D#93ptD.0]._M_dataplusD.13816
  # DEBUG D#65ptD.0 => D#67ptD.0
  # DEBUG D#66ptD.0 => D#68ptD.0 + 1
  # DEBUG __pD.35092 => _53
  # DEBUG __aD.35090 => D#65ptD.0
  # DEBUG __nD.35091 => D#66ptD.0
  # DEBUG D#64ptD.0 => D#66ptD.0
  # DEBUG D#63ptD.0 => D#65ptD.0
  # DEBUG D#61ptD.0 => D#63ptD.0
  # DEBUG D#62ptD.0 => D#64ptD.0
  # DEBUG __pD.35095 => _53
  # DEBUG thisD.35093 => D#61ptD.0
  # DEBUG D.35094 => D#62ptD.0
  # .MEM_74 = VDEF <.MEM_73>
  # USE = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  # CLB = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  _ZdlPvD.2766 (_53);
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 17, next block 1, flags: (NEW, REACHABLE)
;;    pred:       16 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_57 = PHI <.MEM_73(16), .MEM_74(17)>
  # DEBUG D#71ptD.0 => &MEM[(struct basic_stringD.8425 *)D#93ptD.0]._M_dataplusD.13816
  # DEBUG thisD.35098 => D#71ptD.0
  # DEBUG thisD.35099 => D#71ptD.0
  # DEBUG thisD.35100 => D#71ptD.0
  # .MEM_79 = VDEF <.MEM_57>
  MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
  resx 1
;;    succ:      

}



Updating SSA:
Registering new PHI nodes in block #7
Updating SSA information for statement _14->valid = 0;
Registering new PHI nodes in block #8
Registering new PHI nodes in block #19

DFA Statistics for Arbiter::Arbiter(Module*, const string&, int)

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             76        608b
DEF operands                             14        112b
VUSE operands                            31        248b
VDEF operands                            25        200b
PHI nodes                                 9        936b
PHI arguments                            17        816b
---------------------------------------------------------
Total memory used by DFA/SSA data                 2920b
---------------------------------------------------------

Average number of arguments per PHI node: 1.9 (max: 2)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_43 -> { .MEM_26 }
Incremental SSA update started at block: 7
Number of blocks in CFG: 20
Number of blocks to update: 3 ( 15%)
Affected blocks: 7 8 19


Creating dr for MEM[(struct __normal_iterator *)&__position]
analyze_innermost: success.
	base_address: &__position
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct __normal_iterator *)&__position]
Creating dr for MEM[(struct _Vector_base *)this_3(D) + 96B]._M_impl._M_start
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Vector_base *)this_3(D) + 96B]
	Access function 0: 0
	Access function 1: 0
Creating dr for MEM[(struct Module *)this_3(D)]._vptr.Module
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct Module *)this_3(D)]
	Access function 0: 0
Creating dr for MEM[(struct _Vector_base *)this_3(D) + 72B]._M_impl._M_start
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 72
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Vector_base *)this_3(D) + 72B]
	Access function 0: 0
	Access function 1: 0
Creating dr for MEM[(struct entry_t * *)this_3(D) + 96B]
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(struct entry_t * *)this_3(D) + 96B]
Creating dr for _14->valid
analyze_innermost: success.
	base_address: pretmp_38
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: *pretmp_38
	Access function 0: 0
	Access function 1: {0B, +, 12}_1
Creating dr for _14->valid
analyze_innermost: success.
	base_address: pretmp_38
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: *pretmp_38
	Access function 0: 0
	Access function 1: {0B, +, 12}_1
Creating dr for _14->valid
analyze_innermost: success.
	base_address: pretmp_38
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: *pretmp_38
	Access function 0: 0
	Access function 1: {0B, +, 12}_1
Creating dr for _14->valid
analyze_innermost: success.
	base_address: pretmp_38
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: *pretmp_38
	Access function 0: 0
	Access function 1: {0B, +, 12}_1
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < size_11(D)
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) size_11(D) + 4294967295, bounded by 2147483646
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < size_11(D)
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) size_11(D) + 4294967295, bounded by 2147483646

Before limit_scops SCoP statistics (BBS:6, LOOPS:1, CONDITIONS:2, STMTS:17)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 1

SCoP statistics (BBS:3, LOOPS:1, CONDITIONS:1, STMTS:13)

SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Global statistics (BBS:21, LOOPS:1, CONDITIONS:8, STMTS:251)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
Creating dr for _14->valid
analyze_innermost: success.
	base_address: pretmp_38
	offset from base address: 0
	constant offset from base address: 0
	step: 12
	aligned to: 256
	base_object: *pretmp_38
	Access function 0: 0
	Access function 1: {0B, +, 12}_1

ISL AST generated by ISL: 
for (int c1 = 0; c1 < size; c1 += 1)
  S_7(c1);


Removing basic block 26
basic block 26, loop depth 0
 pred:      
goto <bb 24>;
 succ:       24



Updating SSA:
Registering new PHI nodes in block #20
Registering new PHI nodes in block #6
Registering new PHI nodes in block #23
Registering new PHI nodes in block #25
Registering new PHI nodes in block #7
Registering new PHI nodes in block #8
Registering new PHI nodes in block #19
Registering new PHI nodes in block #24
Registering new PHI nodes in block #22
Registering new PHI nodes in block #21
Registering new PHI nodes in block #5

DFA Statistics for Arbiter::Arbiter(Module*, const string&, int)

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             76        608b
DEF operands                             14        112b
VUSE operands                            31        248b
VDEF operands                            25        200b
PHI nodes                                10       1040b
PHI arguments                            19        912b
---------------------------------------------------------
Total memory used by DFA/SSA data                 3120b
---------------------------------------------------------

Average number of arguments per PHI node: 1.9 (max: 2)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_49 -> { .MEM_43 }
Incremental SSA update started at block: 20
Number of blocks in CFG: 27
Number of blocks to update: 5 ( 19%)
Affected blocks: 5 19 21 24 25


Applying pattern match.pd:491, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223

Updating SSA:
creating PHI node in block #28 for .MEM
creating PHI node in block #31 for .MEM
Registering new PHI nodes in block #0
Registering new PHI nodes in block #2
Updating SSA information for statement Module::Module (_4, parent_6(D), name_7(D));
Updating SSA information for statement this_3(D)->D.27639._vptr.Module = &MEM[(void *)&_ZTV7Arbiter + 16B];
Updating SSA information for statement MEM[(struct _Vector_impl *)this_3(D) + 96B]._M_start = 0B;
Updating SSA information for statement MEM[(struct _Vector_impl *)this_3(D) + 96B]._M_finish = 0B;
Updating SSA information for statement MEM[(struct _Vector_impl *)this_3(D) + 96B]._M_end_of_storage = 0B;
Updating SSA information for statement this_3(D)->_size = size_11(D);
Updating SSA information for statement this_3(D)->_selected = -1;
Updating SSA information for statement this_3(D)->_highest_pri = -2147483648;
Updating SSA information for statement this_3(D)->_best_input = -1;
Updating SSA information for statement this_3(D)->_num_reqs = 0;
Updating SSA information for statement MEM[(struct entry_t *)&__x] = 0;
Updating SSA information for statement MEM[(struct entry_t *)&__x + 4B] = 0;
Updating SSA information for statement MEM[(struct entry_t *)&__x + 8B] = 0;
Registering new PHI nodes in block #4
Updating SSA information for statement MEM[(struct __normal_iterator *)&__position] = 0B;
Updating SSA information for statement std::vector<Arbiter::entry_t>::_M_fill_insert (_22, __position, _21, &__x);
Registering new PHI nodes in block #9
Updating SSA information for statement _31 = MEM[(struct _Vector_base *)this_3(D) + 96B]._M_impl._M_start;
Registering new PHI nodes in block #10
Updating SSA information for statement operator delete (_31);
Registering new PHI nodes in block #11
Updating SSA information for statement MEM[(struct  &)this_3(D) + 96] ={v} {CLOBBER};
Registering new PHI nodes in block #12
Updating SSA information for statement MEM[(struct Module *)this_3(D)]._vptr.Module = &MEM[(void *)&_ZTV6Module + 16B];
Updating SSA information for statement _23 = MEM[(struct _Vector_base *)this_3(D) + 72B]._M_impl._M_start;
Registering new PHI nodes in block #13
Updating SSA information for statement operator delete (_23);
Registering new PHI nodes in block #14
Updating SSA information for statement MEM[(struct  &)this_3(D) + 72] ={v} {CLOBBER};
Updating SSA information for statement _51 = MEM[(char * *)this_3(D) + 40B];
Registering new PHI nodes in block #15
Updating SSA information for statement operator delete (_51);
Registering new PHI nodes in block #16
Updating SSA information for statement MEM[(struct  &)this_3(D) + 40] ={v} {CLOBBER};
Updating SSA information for statement _53 = MEM[(char * *)this_3(D) + 8B];
Registering new PHI nodes in block #17
Updating SSA information for statement operator delete (_53);
Registering new PHI nodes in block #18
Updating SSA information for statement MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
Registering new PHI nodes in block #3
Registering new PHI nodes in block #20
Registering new PHI nodes in block #6
Updating SSA information for statement pretmp_38 = MEM[(struct entry_t * *)this_3(D) + 96B];
Registering new PHI nodes in block #23
Registering new PHI nodes in block #27
Registering new PHI nodes in block #33
Registering new PHI nodes in block #31
Registering new PHI nodes in block #36
Updating SSA information for statement _67->valid = 0;
Registering new PHI nodes in block #34
Registering new PHI nodes in block #32
Registering new PHI nodes in block #35
Registering new PHI nodes in block #29
Registering new PHI nodes in block #30
Registering new PHI nodes in block #28
Registering new PHI nodes in block #25
Registering new PHI nodes in block #7
Updating SSA information for statement _14->valid = 0;
Registering new PHI nodes in block #8
Registering new PHI nodes in block #19
Registering new PHI nodes in block #24
Registering new PHI nodes in block #22
Registering new PHI nodes in block #21
Registering new PHI nodes in block #5
Updating SSA information for statement return;

DFA Statistics for Arbiter::Arbiter(Module*, const string&, int)

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             88        704b
DEF operands                             21        168b
VUSE operands                            32        256b
VDEF operands                            26        208b
PHI nodes                                13       1352b
PHI arguments                            25       1200b
---------------------------------------------------------
Total memory used by DFA/SSA data                 3888b
---------------------------------------------------------

Average number of arguments per PHI node: 1.9 (max: 2)


Hash table statistics:
    var_infos:   size 61, 1 elements, 0.000000 collision/search ratio


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_30 -> { .MEM_26 }

Symbols to be put in SSA form
{ D.32919 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 37
Number of blocks to update: 35 ( 95%)
Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 27 28 29 30 31 32 33 34 35 36



1 loops carried no dependency.
Merging blocks 3 and 20
Merging blocks 6 and 23
Removing basic block 21
basic block 21, loop depth 0
 pred:      
 succ:       5


Removing basic block 22
basic block 22, loop depth 0
 pred:      
goto <bb 5>;
 succ:       5


Removing basic block 25
basic block 25, loop depth 0
 pred:      
 succ:       24


Removing basic block 29
basic block 29, loop depth 0
 pred:      
 succ:       28


Removing basic block 30
basic block 30, loop depth 0
 pred:      
goto <bb 28>;
 succ:       28


Merging blocks 31 and 36
Removing basic block 35
basic block 35, loop depth 0
 pred:      
 succ:       28


Removing basic block 19
basic block 19, loop depth 0
 pred:       7
goto <bb 24>;
 succ:       24


Removing basic block 8
basic block 8, loop depth 1
 pred:       7
goto <bb 7>;
 succ:       7


Removing basic block 7
basic block 7, loop depth 1
 pred:       6
# i_44 = PHI <0(6)>
# DEBUG i => i_44
_24 = (long unsigned int) i_44;
# DEBUG D#163 => &this_3(D)->_request
# DEBUG D#7 => D#163
# DEBUG __n => _24
# DEBUG this => D#7
_25 = _24 * 12;
_14 = pretmp_38 + _25;
_14->valid = 0;
i_27 = i_44 + 1;
# DEBUG i => i_27
# DEBUG i => i_27
if (size_11(D) <= i_27)
 succ:      


Merging blocks 6 and 27
Merging blocks 28 and 24
Merging blocks 31 and 34
fix_loop_structure: removing loop 1
Analyzing # of iterations of loop 2
  exit condition [0, + , 1](no_overflow) < (signed long) size_11(D) + -1
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if size_11(D) <= 0
    # of iterations (unsigned long) ((signed long) size_11(D) + -1), bounded by 9223372036854775806
Analyzing # of iterations of loop 2
  exit condition [0, + , 1](no_overflow) < (signed long) size_11(D) + -1
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if size_11(D) <= 0
    # of iterations (unsigned long) ((signed long) size_11(D) + -1), bounded by 9223372036854775806
Analyzing # of iterations of loop 2
  exit condition [0, + , 1](no_overflow) < (signed long) size_11(D) + -1
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if size_11(D) <= 0
    # of iterations (unsigned long) ((signed long) size_11(D) + -1), bounded by 9223372036854775806
Statement (exit)if (graphite_IV.240_19 < _36)
 is executed at most (unsigned long) ((signed long) size_11(D) + -1) (bounded by 9223372036854775806) + 1 times in loop 2.
Induction variable (struct entry_t *) pretmp_38 + 12 * iteration does not wrap in statement _67 = pretmp_38 + _66;
 in loop 2.
Statement _67 = pretmp_38 + _66;
 is executed at most 1537228672809129300 (bounded by 1537228672809129300) + 1 times in loop 2.
Induction variable (signed long) 1 + 1 * iteration does not wrap in statement graphite_IV.240_39 = graphite_IV.240_19 + 1;
 in loop 2.
Statement graphite_IV.240_39 = graphite_IV.240_19 + 1;
 is executed at most 9223372036854775806 (bounded by 9223372036854775806) + 1 times in loop 2.
Reducing loop iteration estimate by 1; undefined statement must be executed at the last iteration.
Predictions for bb 2
  DS theory heuristics: 29.0%
  first match heuristics (ignored): 29.0%
  combined heuristics: 29.0%
  call heuristics: 29.0%
Predictions for bb 3
  DS theory heuristics: 19.1%
  first match heuristics (ignored): 27.0%
  combined heuristics: 19.1%
  opcode values positive (on trees) heuristics: 27.0%
  early return (on trees) heuristics: 39.0%
1 edges in bb 4 predicted to even probabilities
1 edges in bb 5 predicted to even probabilities
Predictions for bb 6
  DS theory heuristics: 61.0%
  first match heuristics (ignored): 61.0%
  combined heuristics: 61.0%
  early return (on trees) heuristics: 61.0%
1 edges in bb 7 predicted to even probabilities
Predictions for bb 8
  DS theory heuristics (ignored): 94.0%
  first match heuristics: 91.0%
  combined heuristics: 91.0%
  early return (on trees) heuristics (ignored): 61.0%
  loop exit heuristics: 91.0%
1 edges in bb 9 predicted to even probabilities
1 edges in bb 10 predicted to even probabilities
Predictions for bb 11
  DS theory heuristics: 69.8%
  first match heuristics (ignored): 85.0%
  combined heuristics: 69.8%
  pointer (on trees) heuristics: 85.0%
  call heuristics: 29.0%
1 edges in bb 12 predicted to even probabilities
0 edges in bb 13 predicted to even probabilities
Predictions for bb 14
  DS theory heuristics: 69.8%
  first match heuristics (ignored): 85.0%
  combined heuristics: 69.8%
  pointer (on trees) heuristics: 85.0%
  call heuristics: 29.0%
1 edges in bb 15 predicted to even probabilities
Predictions for bb 16
  DS theory heuristics: 69.8%
  first match heuristics (ignored): 85.0%
  combined heuristics: 69.8%
  pointer (on trees) heuristics: 85.0%
  call heuristics: 29.0%
1 edges in bb 17 predicted to even probabilities
Predictions for bb 18
  DS theory heuristics: 69.8%
  first match heuristics (ignored): 85.0%
  combined heuristics: 69.8%
  pointer (on trees) heuristics: 85.0%
  call heuristics: 29.0%
1 edges in bb 19 predicted to even probabilities
0 edges in bb 20 predicted to even probabilities
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_4 bb_3 })
  {
    <bb 2>:
    _4 = &this_3(D)->D.27639;
    # .MEM_8 = VDEF <.MEM_5(D)>
    Module::Module (_4, parent_6(D), name_7(D));
    # .MEM_9 = VDEF <.MEM_8>
    this_3(D)->D.27639._vptr.Module = &MEM[(void *)&_ZTV7Arbiter + 16B];
    # DEBUG D#165 => &this_3(D)->_request
    # DEBUG this => D#165
    # DEBUG D#97 => &D#165->D.27582
    # DEBUG this => D#97
    # DEBUG D#96 => &D#97->_M_impl
    # DEBUG this => D#96
    # DEBUG this => D#96
    # DEBUG this => D#96
    # .MEM_32 = VDEF <.MEM_9>
    MEM[(struct _Vector_impl *)this_3(D) + 96B]._M_start = 0B;
    # .MEM_33 = VDEF <.MEM_32>
    MEM[(struct _Vector_impl *)this_3(D) + 96B]._M_finish = 0B;
    # .MEM_34 = VDEF <.MEM_33>
    MEM[(struct _Vector_impl *)this_3(D) + 96B]._M_end_of_storage = 0B;
    # .MEM_12 = VDEF <.MEM_34>
    this_3(D)->_size = size_11(D);
    # .MEM_13 = VDEF <.MEM_12>
    this_3(D)->_selected = -1;
    # .MEM_15 = VDEF <.MEM_13>
    this_3(D)->_highest_pri = -2147483648;
    # .MEM_16 = VDEF <.MEM_15>
    this_3(D)->_best_input = -1;
    # .MEM_17 = VDEF <.MEM_16>
    this_3(D)->_num_reqs = 0;
    _21 = (long unsigned int) size_11(D);
    # DEBUG D#193 => &this_3(D)->_request
    # DEBUG this => D#193
    # DEBUG __new_size => _21
    # .MEM_18 = VDEF <.MEM_17>
    MEM[(struct entry_t *)&__x] = 0;
    # .MEM_2 = VDEF <.MEM_18>
    MEM[(struct entry_t *)&__x + 4B] = 0;
    # .MEM_1 = VDEF <.MEM_2>
    MEM[(struct entry_t *)&__x + 8B] = 0;
    # DEBUG D#29 => D#193
    # DEBUG D#29 => D#193
    # DEBUG this => D#29
    # DEBUG this => D#29
    if (_21 != 0)
      goto <bb 4>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 bb_4 }, succs = {bb_5 bb_6 })
  {
    <bb 3>:
    # .MEM_64 = PHI <.MEM_1(2), .MEM_61(4)>
    # DEBUG i => 0
    if (size_11(D) <= 0)
      goto <bb 5>;
    else
      goto <bb 6>;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_3 bb_11 })
  {
    <bb 4>:
    # DEBUG D#29 => D#193
    # DEBUG D#29 => D#193
    # DEBUG this => D#29
    # DEBUG this => D#29
    # DEBUG this => D#193
    # DEBUG D#30 => &D#193->D.27582._M_impl._M_finish
    # DEBUG this => NULL
    # DEBUG __i => D#30
    # DEBUG this => D#193
    # .MEM_60 = VDEF <.MEM_1>
    MEM[(struct __normal_iterator *)&__position] = 0B;
    # DEBUG __n => _21
    # DEBUG __x => &__x
    _22 = &this_3(D)->_request;
    # .MEM_61 = VDEF <.MEM_60>
    std::vector<Arbiter::entry_t>::_M_fill_insert (_22, __position, _21, &__x);
    goto <bb 3>;

  }
  bb_5 (preds = {bb_3 bb_10 }, succs = {bb_1 })
  {
    <bb 5>:
    # .MEM_58 = PHI <.MEM_64(3), .MEM_70(10)>
    # VUSE <.MEM_58>
    return;

  }
  bb_6 (preds = {bb_3 }, succs = {bb_7 bb_10 })
  {
    <bb 6>:
    # VUSE <.MEM_64>
    pretmp_38 = MEM[(struct entry_t * *)this_3(D) + 96B];
    _20 = size_11(D) > 0;
    if (_20 != 0)
      goto <bb 7>;
    else
      goto <bb 10>;

  }
  bb_7 (preds = {bb_6 }, succs = {bb_8 })
  {
    <bb 7>:
    _37 = (signed long) size_11(D);
    _36 = _37 + -1;

  }
  bb_10 (preds = {bb_8 bb_6 }, succs = {bb_5 })
  {
    <bb 10>:
    # .MEM_70 = PHI <.MEM_30(8), .MEM_64(6)>
    goto <bb 5>;

  }
  bb_11 (preds = {bb_4 }, succs = {bb_12 bb_13 })
  {
  <L3>:
    # DEBUG D#164 => &this_3(D)->_request
    # DEBUG this => D#164
    # DEBUG D#112 => &D#164->D.27582
    # DEBUG this => D#112
    # DEBUG D#115 => D#164->D.27582._M_impl._M_finish
    # DEBUG D#114 => D#164->D.27582._M_impl._M_start
    # DEBUG __first => D#114
    # DEBUG __last => D#115
    # DEBUG D.33522 => NULL
    # DEBUG D#46 => D#114
    # DEBUG D#47 => D#115
    # DEBUG __first => D#46
    # DEBUG __last => D#47
    # DEBUG D#45 => D#47
    # DEBUG D#44 => D#46
    # DEBUG D#42 => D#44
    # DEBUG D#43 => D#45
    # DEBUG D.33173 => D#42
    # DEBUG D.33172 => D#43
    # DEBUG D#113 => &D#164->D.27582
    # DEBUG this => D#113
    # DEBUG D#111 => D#113->_M_impl._M_end_of_storage
    # DEBUG D#110 => (long int) D#111
    # VUSE <.MEM_61>
    _31 = MEM[(struct _Vector_base *)this_3(D) + 96B]._M_impl._M_start;
    # DEBUG D#109 => (long int) _31
    # DEBUG D#108 => D#110 - D#109
    # DEBUG D#107 => D#108 /[ex] 12
    # DEBUG D#106 => (long unsigned int) D#107
    # DEBUG this => D#113
    # DEBUG __p => _31
    # DEBUG __n => D#106
    if (_31 != 0B)
      goto <bb 12>;
    else
      goto <bb 13>;

  }
  bb_12 (preds = {bb_11 }, succs = {bb_13 })
  {
    <bb 12>:
    # DEBUG D#104 => &D#113->_M_impl
    # DEBUG D#102 => D#104
    # DEBUG D#103 => D#106
    # DEBUG __p => _31
    # DEBUG __a => D#102
    # DEBUG __n => D#103
    # DEBUG D#101 => D#103
    # DEBUG D#100 => D#102
    # DEBUG D#98 => D#100
    # DEBUG D#99 => D#101
    # DEBUG __p => _31
    # DEBUG this => D#98
    # DEBUG D.34636 => D#99
    # .MEM_35 = VDEF <.MEM_61>
    operator delete (_31);

  }
  bb_13 (preds = {bb_11 bb_12 }, succs = {bb_14 })
  {
    <bb 13>:
    # .MEM_28 = PHI <.MEM_61(11), .MEM_35(12)>
    # DEBUG D#105 => &D#113->_M_impl
    # DEBUG this => D#105
    # DEBUG this => D#105
    # DEBUG this => D#105
    # .MEM_40 = VDEF <.MEM_28>
    MEM[(struct  &)this_3(D) + 96] ={v} {CLOBBER};
    resx 2

  }
  bb_14 (preds = {bb_13 }, succs = {bb_15 bb_16 })
  {
  <L4>:
    # DEBUG this => _4
    # .MEM_62 = VDEF <.MEM_40>
    MEM[(struct Module *)this_3(D)]._vptr.Module = &MEM[(void *)&_ZTV6Module + 16B];
    # DEBUG D#95 => &_4->_children
    # DEBUG this => D#95
    # DEBUG D#89 => &D#95->D.26765
    # DEBUG this => D#89
    # DEBUG D#92 => D#95->D.26765._M_impl._M_finish
    # DEBUG D#91 => D#95->D.26765._M_impl._M_start
    # DEBUG D#39 => D#91
    # DEBUG D#40 => D#92
    # DEBUG __first => D#39
    # DEBUG __last => D#40
    # DEBUG D.33398 => D#41
    # DEBUG D#38 => D#40
    # DEBUG D#37 => D#39
    # DEBUG D#35 => D#37
    # DEBUG D#36 => D#38
    # DEBUG __first => D#35
    # DEBUG __last => D#36
    # DEBUG D#34 => D#36
    # DEBUG D#33 => D#35
    # DEBUG D#31 => D#33
    # DEBUG D#32 => D#34
    # DEBUG D.33135 => D#31
    # DEBUG D.33134 => D#32
    # DEBUG D#90 => &D#95->D.26765
    # DEBUG this => D#90
    # DEBUG D#88 => D#90->_M_impl._M_end_of_storage
    # DEBUG D#87 => (long int) D#88
    # VUSE <.MEM_62>
    _23 = MEM[(struct _Vector_base *)this_3(D) + 72B]._M_impl._M_start;
    # DEBUG D#86 => (long int) _23
    # DEBUG D#85 => D#87 - D#86
    # DEBUG D#84 => D#85 /[ex] 8
    # DEBUG D#81 => D#90
    # DEBUG D#82 => (long unsigned int) D#84
    # DEBUG __p => _23
    # DEBUG this => D#81
    # DEBUG __n => D#82
    # DEBUG D#80 => D#82
    # DEBUG D#79 => D#81
    if (_23 != 0B)
      goto <bb 15>;
    else
      goto <bb 16>;

  }
  bb_15 (preds = {bb_14 }, succs = {bb_16 })
  {
    <bb 15>:
    # DEBUG D#78 => &D#79->_M_impl
    # DEBUG D#76 => D#78
    # DEBUG D#77 => D#80
    # DEBUG __p => _23
    # DEBUG __a => D#76
    # DEBUG __n => D#77
    # DEBUG D#75 => D#77
    # DEBUG D#74 => D#76
    # DEBUG D#72 => D#74
    # DEBUG D#73 => D#75
    # DEBUG __p => _23
    # DEBUG this => D#72
    # DEBUG D.35066 => D#73
    # .MEM_63 = VDEF <.MEM_62>
    operator delete (_23);

  }
  bb_16 (preds = {bb_14 bb_15 }, succs = {bb_17 bb_18 })
  {
    <bb 16>:
    # .MEM_55 = PHI <.MEM_62(14), .MEM_63(15)>
    # DEBUG D#83 => &D#90->_M_impl
    # DEBUG this => D#83
    # DEBUG this => D#83
    # DEBUG this => D#83
    # .MEM_68 = VDEF <.MEM_55>
    MEM[(struct  &)this_3(D) + 72] ={v} {CLOBBER};
    # DEBUG D#94 => &_4->_fullname
    # DEBUG this => D#94
    # DEBUG this => D#94
    # DEBUG this => D#94
    # VUSE <.MEM_68>
    _51 = MEM[(char * *)this_3(D) + 40B];
    # DEBUG D#1 => D#94
    # DEBUG this => D#1
    # DEBUG this => D#94
    _52 = &MEM[(const struct basic_string *)this_3(D) + 40B].D.13836._M_local_buf;
    if (_51 != _52)
      goto <bb 17>;
    else
      goto <bb 18>;

  }
  bb_17 (preds = {bb_16 }, succs = {bb_18 })
  {
    <bb 17>:
    # DEBUG D#70 => MEM[(struct basic_string *)D#94].D.13836._M_allocated_capacity
    # DEBUG D#69 => D#70
    # DEBUG this => D#94
    # DEBUG __size => D#69
    # DEBUG D#68 => D#69
    # DEBUG D#1 => D#94
    # DEBUG this => D#1
    # DEBUG this => D#94
    # DEBUG D#67 => &MEM[(struct basic_string *)D#94]._M_dataplus
    # DEBUG D#65 => D#67
    # DEBUG D#66 => D#68 + 1
    # DEBUG __p => _51
    # DEBUG __a => D#65
    # DEBUG __n => D#66
    # DEBUG D#64 => D#66
    # DEBUG D#63 => D#65
    # DEBUG D#61 => D#63
    # DEBUG D#62 => D#64
    # DEBUG __p => _51
    # DEBUG this => D#61
    # DEBUG D.35079 => D#62
    # .MEM_69 = VDEF <.MEM_68>
    operator delete (_51);

  }
  bb_18 (preds = {bb_16 bb_17 }, succs = {bb_19 bb_20 })
  {
    <bb 18>:
    # .MEM_56 = PHI <.MEM_68(16), .MEM_69(17)>
    # DEBUG D#71 => &MEM[(struct basic_string *)D#94]._M_dataplus
    # DEBUG this => D#71
    # DEBUG this => D#71
    # DEBUG this => D#71
    # .MEM_73 = VDEF <.MEM_56>
    MEM[(struct  &)this_3(D) + 40] ={v} {CLOBBER};
    # DEBUG D#93 => &_4->_name
    # DEBUG this => D#93
    # DEBUG this => D#93
    # DEBUG this => D#93
    # VUSE <.MEM_73>
    _53 = MEM[(char * *)this_3(D) + 8B];
    # DEBUG D#1 => D#93
    # DEBUG this => D#1
    # DEBUG this => D#93
    _54 = &MEM[(const struct basic_string *)this_3(D) + 8B].D.13836._M_local_buf;
    if (_53 != _54)
      goto <bb 19>;
    else
      goto <bb 20>;

  }
  bb_19 (preds = {bb_18 }, succs = {bb_20 })
  {
    <bb 19>:
    # DEBUG D#70 => MEM[(struct basic_string *)D#93].D.13836._M_allocated_capacity
    # DEBUG D#69 => D#70
    # DEBUG this => D#93
    # DEBUG __size => D#69
    # DEBUG D#68 => D#69
    # DEBUG D#1 => D#93
    # DEBUG this => D#1
    # DEBUG this => D#93
    # DEBUG D#67 => &MEM[(struct basic_string *)D#93]._M_dataplus
    # DEBUG D#65 => D#67
    # DEBUG D#66 => D#68 + 1
    # DEBUG __p => _53
    # DEBUG __a => D#65
    # DEBUG __n => D#66
    # DEBUG D#64 => D#66
    # DEBUG D#63 => D#65
    # DEBUG D#61 => D#63
    # DEBUG D#62 => D#64
    # DEBUG __p => _53
    # DEBUG this => D#61
    # DEBUG D.35094 => D#62
    # .MEM_74 = VDEF <.MEM_73>
    operator delete (_53);

  }
  bb_20 (preds = {bb_18 bb_19 }, succs = {})
  {
    <bb 20>:
    # .MEM_57 = PHI <.MEM_73(18), .MEM_74(19)>
    # DEBUG D#71 => &MEM[(struct basic_string *)D#93]._M_dataplus
    # DEBUG this => D#71
    # DEBUG this => D#71
    # DEBUG this => D#71
    # .MEM_79 = VDEF <.MEM_57>
    MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
    resx 1

  }
  loop_2 (header = 8, latch = 9, niter = (unsigned long) ((signed long) size_11(D) + -1), upper_bound = 1537228672809129300)
  {
    bb_8 (preds = {bb_7 bb_9 }, succs = {bb_9 bb_10 })
    {
      <bb 8>:
      # graphite_IV.240_19 = PHI <0(7), graphite_IV.240_39(9)>
      # .MEM_71 = PHI <.MEM_64(7), .MEM_30(9)>
      # DEBUG i => NULL
      # DEBUG D#163 => NULL
      # DEBUG D#7 => NULL
      # DEBUG __n => NULL
      # DEBUG this => NULL
      _65 = (sizetype) graphite_IV.240_19;
      _66 = _65 * 12;
      _67 = pretmp_38 + _66;
      # .MEM_30 = VDEF <.MEM_71>
      _67->valid = 0;
      # DEBUG i => NULL
      # DEBUG i => NULL
      graphite_IV.240_39 = graphite_IV.240_19 + 1;
      if (graphite_IV.240_19 < _36)
        goto <bb 9>;
      else
        goto <bb 10>;

    }
    bb_9 (preds = {bb_8 }, succs = {bb_8 })
    {
      <bb 9>:
      goto <bb 8>;

    }
  }
}

Pass statistics:
----------------

Arbiter::Arbiter(Module*, const string&, int) (struct ArbiterD.26830 * const thisD.27635, struct ModuleD.26017 * parentD.27636, const struct stringD.8426 & nameD.27637, intD.9 sizeD.27638)
Eh tree:
   1 cleanup land:{1,<L4>}
     2 cleanup land:{2,<L3>}
{
  signed long graphite_IV.240D.35106;
  intD.9 SR.238D.35104;
  intD.9 SR.237D.35103;
  unsigned char SR.236D.35102;
  struct iteratorD.27150 __positionD.35051;
  struct value_typeD.27145 __xD.35046;
  intD.9 iD.30908;
  struct N7Arbiter7entry_tED.26837 D.32181;
  struct ModuleD.26017 * _4;
  boolD.2757 _20;
  long unsigned intD.14 _21;
  struct vectorD.26839 * _22;
  struct ModuleD.26017 * * _23;
  struct N7Arbiter7entry_tED.26837 * _31;
  signed long _36;
  signed long _37;
  struct N7Arbiter7entry_tED.26837 * pretmp_38;
  charD.10 * const _51;
  const charD.10 * _52;
  charD.10 * const _53;
  const charD.10 * _54;
  sizetype _65;
  sizetype _66;
  struct N7Arbiter7entry_tED.26837 * _67;

;;   basic block 2, loop depth 0, count 0, freq 1824, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  _4 = &this_3(D)->D.27639;
  # .MEM_8 = VDEF <.MEM_5(D)>
  # USE = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  # CLB = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  _ZN6ModuleC2EPS_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.26799 (_4, parent_6(D), name_7(D));
  # .MEM_9 = VDEF <.MEM_8>
  this_3(D)->D.27639._vptr.ModuleD.26812 = &MEM[(voidD.45 *)&_ZTV7ArbiterD.27647 + 16B];
  # DEBUG D#165ptD.0 => &this_3(D)->_requestD.27584
  # DEBUG thisD.34619 => D#165ptD.0
  # DEBUG D#97ptD.0 => &D#165ptD.0->D.27582
  # DEBUG thisD.34620 => D#97ptD.0
  # DEBUG D#96ptD.0 => &D#97ptD.0->_M_implD.27073
  # DEBUG thisD.34621 => D#96ptD.0
  # DEBUG thisD.33454 => D#96ptD.0
  # DEBUG thisD.33452 => D#96ptD.0
  # .MEM_32 = VDEF <.MEM_9>
  MEM[(struct _Vector_implD.27050 *)this_3(D) + 96B]._M_startD.27075 = 0B;
  # .MEM_33 = VDEF <.MEM_32>
  MEM[(struct _Vector_implD.27050 *)this_3(D) + 96B]._M_finishD.27076 = 0B;
  # .MEM_34 = VDEF <.MEM_33>
  MEM[(struct _Vector_implD.27050 *)this_3(D) + 96B]._M_end_of_storageD.27077 = 0B;
  # .MEM_12 = VDEF <.MEM_34>
  this_3(D)->_sizeD.27585 = size_11(D);
  # .MEM_13 = VDEF <.MEM_12>
  this_3(D)->_selectedD.27586 = -1;
  # .MEM_15 = VDEF <.MEM_13>
  this_3(D)->_highest_priD.27587 = -2147483648;
  # .MEM_16 = VDEF <.MEM_15>
  this_3(D)->_best_inputD.27588 = -1;
  # .MEM_17 = VDEF <.MEM_16>
  this_3(D)->_num_reqsD.27589 = 0;
  # RANGE ~[2147483648, 18446744071562067967]
  _21 = (long unsigned intD.14) size_11(D);
  # DEBUG D#193ptD.0 => &this_3(D)->_requestD.27584
  # DEBUG thisD.35044 => D#193ptD.0
  # DEBUG __new_sizeD.35045 => _21
  # .MEM_18 = VDEF <.MEM_17>
  MEM[(struct N7Arbiter7entry_tED.26837 *)&__xD.35046] = 0;
  # .MEM_2 = VDEF <.MEM_18>
  MEM[(struct N7Arbiter7entry_tED.26837 *)&__xD.35046 + 4B] = 0;
  # .MEM_1 = VDEF <.MEM_2>
  MEM[(struct N7Arbiter7entry_tED.26837 *)&__xD.35046 + 8B] = 0;
  # DEBUG D#29ptD.0 => D#193ptD.0
  # DEBUG D#29ptD.0 => D#193ptD.0
  # DEBUG thisD.35053 => D#29ptD.0
  # DEBUG thisD.35054 => D#29ptD.0
  if (_21 != 0)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 1824, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_64 = PHI <.MEM_1(2), .MEM_61(4)>
  # DEBUG iD.30908 => 0
  if (size_11(D) <= 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [19.1%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [80.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 529, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#29ptD.0 => D#193ptD.0
  # DEBUG D#29ptD.0 => D#193ptD.0
  # DEBUG thisD.34605 => D#29ptD.0
  # DEBUG thisD.34604 => D#29ptD.0
  # DEBUG thisD.34598 => D#193ptD.0
  # DEBUG D#30ptD.0 => &D#193ptD.0->D.27582._M_implD.27073._M_finishD.27076
  # DEBUG thisD.34600 => NULL
  # DEBUG __iD.34599 => D#30ptD.0
  # DEBUG thisD.35052 => D#193ptD.0
  # .MEM_60 = VDEF <.MEM_1>
  MEM[(struct __normal_iteratorD.27151 *)&__positionD.35051] = 0B;
  # DEBUG __nD.35050 => _21
  # DEBUG __xD.35049 => &__xD.35046
  # PT = nonlocal 
  _22 = &this_3(D)->_requestD.27584;
  [LP 2] # .MEM_61 = VDEF <.MEM_60>
  # USE = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  # CLB = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  _ZNSt6vectorIN7Arbiter7entry_tESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEmRKS1_D.27505 (_22, __positionD.35051, _21, &__xD.35046);
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 (EH,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 1824, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       3 [19.1%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU)
  # .MEM_58 = PHI <.MEM_64(3), .MEM_70(10)>
  # VUSE <.MEM_58>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 6, loop depth 0, count 0, freq 1475, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       3 [80.9%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_64>
  # PT = nonlocal escaped 
  pretmp_38 = MEM[(struct N7Arbiter7entry_tED.26837 * *)this_3(D) + 96B];
  _20 = size_11(D) > 0;
  if (_20 != 0)
    goto <bb 7>;
  else
    goto <bb 10>;
;;    succ:       7 [61.0%]  (TRUE_VALUE)
;;                10 [39.0%]  (FALSE_VALUE)

;;   basic block 7, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [61.0%]  (TRUE_VALUE)
  _37 = (signed long) size_11(D);
  _36 = _37 + -1;
;;    succ:       8 [100.0%]  (FALLTHRU)

;;   basic block 8, loop depth 1, count 0, freq 10000, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU)
;;                9 [100.0%]  (FALLTHRU,DFS_BACK)
  # graphite_IV.240_19 = PHI <0(7), graphite_IV.240_39(9)>
  # .MEM_71 = PHI <.MEM_64(7), .MEM_30(9)>
  # DEBUG iD.30908 => NULL
  # DEBUG D#163ptD.0 => NULL
  # DEBUG D#7ptD.0 => NULL
  # DEBUG __nD.34623 => NULL
  # DEBUG thisD.34624 => NULL
  _65 = (sizetype) graphite_IV.240_19;
  _66 = _65 * 12;
  _67 = pretmp_38 + _66;
  # .MEM_30 = VDEF <.MEM_71>
  _67->validD.26834 = 0;
  # DEBUG iD.30908 => NULL
  # DEBUG iD.30908 => NULL
  graphite_IV.240_39 = graphite_IV.240_19 + 1;
  if (graphite_IV.240_19 < _36)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [91.0%]  (TRUE_VALUE)
;;                10 [9.0%]  (FALSE_VALUE,LOOP_EXIT)

;;   basic block 9, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [91.0%]  (TRUE_VALUE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,DFS_BACK)

;;   basic block 10, loop depth 0, count 0, freq 1475, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       8 [9.0%]  (FALSE_VALUE,LOOP_EXIT)
;;                6 [39.0%]  (FALSE_VALUE)
  # .MEM_70 = PHI <.MEM_30(8), .MEM_64(6)>
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU)

;;   basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       4 (EH,EXECUTABLE)
<L3>: [LP 2]
  # DEBUG D#164ptD.0 => &this_3(D)->_requestD.27584
  # DEBUG thisD.34626 => D#164ptD.0
  # DEBUG D#112ptD.0 => &D#164ptD.0->D.27582
  # DEBUG thisD.33523 => D#112ptD.0
  # DEBUG D#115ptD.0 => D#164ptD.0->D.27582._M_implD.27073._M_finishD.27076
  # DEBUG D#114ptD.0 => D#164ptD.0->D.27582._M_implD.27073._M_startD.27075
  # DEBUG __firstD.33520 => D#114ptD.0
  # DEBUG __lastD.33521 => D#115ptD.0
  # DEBUG D.33522 => NULL
  # DEBUG D#46ptD.0 => D#114ptD.0
  # DEBUG D#47ptD.0 => D#115ptD.0
  # DEBUG __firstD.33184 => D#46ptD.0
  # DEBUG __lastD.33183 => D#47ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#44ptD.0 => D#46ptD.0
  # DEBUG D#42ptD.0 => D#44ptD.0
  # DEBUG D#43ptD.0 => D#45ptD.0
  # DEBUG D.33173 => D#42ptD.0
  # DEBUG D.33172 => D#43ptD.0
  # DEBUG D#113ptD.0 => &D#164ptD.0->D.27582
  # DEBUG thisD.34627 => D#113ptD.0
  # DEBUG D#111ptD.0 => D#113ptD.0->_M_implD.27073._M_end_of_storageD.27077
  # DEBUG D#110ptD.0 => (long intD.12) D#111ptD.0
  # VUSE <.MEM_61>
  # PT = nonlocal escaped 
  _31 = MEM[(struct _Vector_baseD.26840 *)this_3(D) + 96B]._M_implD.27073._M_startD.27075;
  # DEBUG D#109ptD.0 => (long intD.12) _31
  # DEBUG D#108ptD.0 => D#110ptD.0 - D#109ptD.0
  # DEBUG D#107ptD.0 => D#108ptD.0 /[ex] 12
  # DEBUG D#106ptD.0 => (long unsigned intD.14) D#107ptD.0
  # DEBUG thisD.34630 => D#113ptD.0
  # DEBUG __pD.34629 => _31
  # DEBUG __nD.34628 => D#106ptD.0
  if (_31 != 0B)
    goto <bb 12>;
  else
    goto <bb 13>;
;;    succ:       12 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#104ptD.0 => &D#113ptD.0->_M_implD.27073
  # DEBUG D#102ptD.0 => D#104ptD.0
  # DEBUG D#103ptD.0 => D#106ptD.0
  # DEBUG __pD.34634 => _31
  # DEBUG __aD.34632 => D#102ptD.0
  # DEBUG __nD.34633 => D#103ptD.0
  # DEBUG D#101ptD.0 => D#103ptD.0
  # DEBUG D#100ptD.0 => D#102ptD.0
  # DEBUG D#98ptD.0 => D#100ptD.0
  # DEBUG D#99ptD.0 => D#101ptD.0
  # DEBUG __pD.34637 => _31
  # DEBUG thisD.34635 => D#98ptD.0
  # DEBUG D.34636 => D#99ptD.0
  # .MEM_35 = VDEF <.MEM_61>
  # USE = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  # CLB = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  _ZdlPvD.2766 (_31);
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       11 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_28 = PHI <.MEM_61(11), .MEM_35(12)>
  # DEBUG D#105ptD.0 => &D#113ptD.0->_M_implD.27073
  # DEBUG thisD.34638 => D#105ptD.0
  # DEBUG thisD.34639 => D#105ptD.0
  # DEBUG thisD.34640 => D#105ptD.0
  # .MEM_40 = VDEF <.MEM_28>
  MEM[(struct  &)this_3(D) + 96] ={v} {CLOBBER};
  [LP 1] resx 2
;;    succ:       14 (EH,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 (EH,EXECUTABLE)
<L4>: [LP 1]
  # DEBUG thisD.35055 => _4
  # .MEM_62 = VDEF <.MEM_40>
  MEM[(struct ModuleD.26017 *)this_3(D)]._vptr.ModuleD.26812 = &MEM[(voidD.45 *)&_ZTV6ModuleD.26817 + 16B];
  # DEBUG D#95ptD.0 => &_4->_childrenD.26767
  # DEBUG thisD.35056 => D#95ptD.0
  # DEBUG D#89ptD.0 => &D#95ptD.0->D.26765
  # DEBUG thisD.33401 => D#89ptD.0
  # DEBUG D#92ptD.0 => D#95ptD.0->D.26765._M_implD.26256._M_finishD.26259
  # DEBUG D#91ptD.0 => D#95ptD.0->D.26765._M_implD.26256._M_startD.26258
  # DEBUG D#39ptD.0 => D#91ptD.0
  # DEBUG D#40ptD.0 => D#92ptD.0
  # DEBUG __firstD.33400 => D#39ptD.0
  # DEBUG __lastD.33399 => D#40ptD.0
  # DEBUG D.33398 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#37ptD.0 => D#39ptD.0
  # DEBUG D#35ptD.0 => D#37ptD.0
  # DEBUG D#36ptD.0 => D#38ptD.0
  # DEBUG __firstD.33146 => D#35ptD.0
  # DEBUG __lastD.33145 => D#36ptD.0
  # DEBUG D#34ptD.0 => D#36ptD.0
  # DEBUG D#33ptD.0 => D#35ptD.0
  # DEBUG D#31ptD.0 => D#33ptD.0
  # DEBUG D#32ptD.0 => D#34ptD.0
  # DEBUG D.33135 => D#31ptD.0
  # DEBUG D.33134 => D#32ptD.0
  # DEBUG D#90ptD.0 => &D#95ptD.0->D.26765
  # DEBUG thisD.35057 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0->_M_implD.26256._M_end_of_storageD.26260
  # DEBUG D#87ptD.0 => (long intD.12) D#88ptD.0
  # VUSE <.MEM_62>
  # PT = nonlocal escaped 
  _23 = MEM[(struct _Vector_baseD.26023 *)this_3(D) + 72B]._M_implD.26256._M_startD.26258;
  # DEBUG D#86ptD.0 => (long intD.12) _23
  # DEBUG D#85ptD.0 => D#87ptD.0 - D#86ptD.0
  # DEBUG D#84ptD.0 => D#85ptD.0 /[ex] 8
  # DEBUG D#81ptD.0 => D#90ptD.0
  # DEBUG D#82ptD.0 => (long unsigned intD.14) D#84ptD.0
  # DEBUG __pD.35060 => _23
  # DEBUG thisD.35058 => D#81ptD.0
  # DEBUG __nD.35059 => D#82ptD.0
  # DEBUG D#80ptD.0 => D#82ptD.0
  # DEBUG D#79ptD.0 => D#81ptD.0
  if (_23 != 0B)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#78ptD.0 => &D#79ptD.0->_M_implD.26256
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG D#77ptD.0 => D#80ptD.0
  # DEBUG __pD.35064 => _23
  # DEBUG __aD.35062 => D#76ptD.0
  # DEBUG __nD.35063 => D#77ptD.0
  # DEBUG D#75ptD.0 => D#77ptD.0
  # DEBUG D#74ptD.0 => D#76ptD.0
  # DEBUG D#72ptD.0 => D#74ptD.0
  # DEBUG D#73ptD.0 => D#75ptD.0
  # DEBUG __pD.35067 => _23
  # DEBUG thisD.35065 => D#72ptD.0
  # DEBUG D.35066 => D#73ptD.0
  # .MEM_63 = VDEF <.MEM_62>
  # USE = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  # CLB = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  _ZdlPvD.2766 (_23);
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       14 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_55 = PHI <.MEM_62(14), .MEM_63(15)>
  # DEBUG D#83ptD.0 => &D#90ptD.0->_M_implD.26256
  # DEBUG thisD.35068 => D#83ptD.0
  # DEBUG thisD.35069 => D#83ptD.0
  # DEBUG thisD.35070 => D#83ptD.0
  # .MEM_68 = VDEF <.MEM_55>
  MEM[(struct  &)this_3(D) + 72] ={v} {CLOBBER};
  # DEBUG D#94ptD.0 => &_4->_fullnameD.26020
  # DEBUG thisD.35071 => D#94ptD.0
  # DEBUG thisD.35072 => D#94ptD.0
  # DEBUG thisD.35081 => D#94ptD.0
  # VUSE <.MEM_68>
  # PT = nonlocal escaped 
  _51 = MEM[(charD.10 * *)this_3(D) + 40B];
  # DEBUG D#1ptD.0 => D#94ptD.0
  # DEBUG thisD.32952 => D#1ptD.0
  # DEBUG thisD.35082 => D#94ptD.0
  # PT = nonlocal 
  _52 = &MEM[(const struct basic_stringD.8425 *)this_3(D) + 40B].D.13836._M_local_bufD.13838;
  if (_51 != _52)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#70ptD.0 => MEM[(struct basic_stringD.8425 *)D#94ptD.0].D.13836._M_allocated_capacityD.13839
  # DEBUG D#69ptD.0 => D#70ptD.0
  # DEBUG thisD.35074 => D#94ptD.0
  # DEBUG __sizeD.35073 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG D#1ptD.0 => D#94ptD.0
  # DEBUG thisD.33283 => D#1ptD.0
  # DEBUG thisD.33284 => D#94ptD.0
  # DEBUG D#67ptD.0 => &MEM[(struct basic_stringD.8425 *)D#94ptD.0]._M_dataplusD.13816
  # DEBUG D#65ptD.0 => D#67ptD.0
  # DEBUG D#66ptD.0 => D#68ptD.0 + 1
  # DEBUG __pD.35077 => _51
  # DEBUG __aD.35075 => D#65ptD.0
  # DEBUG __nD.35076 => D#66ptD.0
  # DEBUG D#64ptD.0 => D#66ptD.0
  # DEBUG D#63ptD.0 => D#65ptD.0
  # DEBUG D#61ptD.0 => D#63ptD.0
  # DEBUG D#62ptD.0 => D#64ptD.0
  # DEBUG __pD.35080 => _51
  # DEBUG thisD.35078 => D#61ptD.0
  # DEBUG D.35079 => D#62ptD.0
  # .MEM_69 = VDEF <.MEM_68>
  # USE = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  # CLB = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  _ZdlPvD.2766 (_51);
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       16 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_56 = PHI <.MEM_68(16), .MEM_69(17)>
  # DEBUG D#71ptD.0 => &MEM[(struct basic_stringD.8425 *)D#94ptD.0]._M_dataplusD.13816
  # DEBUG thisD.35083 => D#71ptD.0
  # DEBUG thisD.35084 => D#71ptD.0
  # DEBUG thisD.35085 => D#71ptD.0
  # .MEM_73 = VDEF <.MEM_56>
  MEM[(struct  &)this_3(D) + 40] ={v} {CLOBBER};
  # DEBUG D#93ptD.0 => &_4->_nameD.26019
  # DEBUG thisD.35086 => D#93ptD.0
  # DEBUG thisD.35087 => D#93ptD.0
  # DEBUG thisD.35096 => D#93ptD.0
  # VUSE <.MEM_73>
  # PT = nonlocal escaped 
  _53 = MEM[(charD.10 * *)this_3(D) + 8B];
  # DEBUG D#1ptD.0 => D#93ptD.0
  # DEBUG thisD.32952 => D#1ptD.0
  # DEBUG thisD.35097 => D#93ptD.0
  # PT = nonlocal 
  _54 = &MEM[(const struct basic_stringD.8425 *)this_3(D) + 8B].D.13836._M_local_bufD.13838;
  if (_53 != _54)
    goto <bb 19>;
  else
    goto <bb 20>;
;;    succ:       19 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#70ptD.0 => MEM[(struct basic_stringD.8425 *)D#93ptD.0].D.13836._M_allocated_capacityD.13839
  # DEBUG D#69ptD.0 => D#70ptD.0
  # DEBUG thisD.35089 => D#93ptD.0
  # DEBUG __sizeD.35088 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG D#1ptD.0 => D#93ptD.0
  # DEBUG thisD.33283 => D#1ptD.0
  # DEBUG thisD.33284 => D#93ptD.0
  # DEBUG D#67ptD.0 => &MEM[(struct basic_stringD.8425 *)D#93ptD.0]._M_dataplusD.13816
  # DEBUG D#65ptD.0 => D#67ptD.0
  # DEBUG D#66ptD.0 => D#68ptD.0 + 1
  # DEBUG __pD.35092 => _53
  # DEBUG __aD.35090 => D#65ptD.0
  # DEBUG __nD.35091 => D#66ptD.0
  # DEBUG D#64ptD.0 => D#66ptD.0
  # DEBUG D#63ptD.0 => D#65ptD.0
  # DEBUG D#61ptD.0 => D#63ptD.0
  # DEBUG D#62ptD.0 => D#64ptD.0
  # DEBUG __pD.35095 => _53
  # DEBUG thisD.35093 => D#61ptD.0
  # DEBUG D.35094 => D#62ptD.0
  # .MEM_74 = VDEF <.MEM_73>
  # USE = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  # CLB = nonlocal null { D.26817 D.27647 D.35046 } (nonlocal, escaped)
  _ZdlPvD.2766 (_53);
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 19, next block 1, flags: (NEW, REACHABLE)
;;    pred:       18 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_57 = PHI <.MEM_73(18), .MEM_74(19)>
  # DEBUG D#71ptD.0 => &MEM[(struct basic_stringD.8425 *)D#93ptD.0]._M_dataplusD.13816
  # DEBUG thisD.35098 => D#71ptD.0
  # DEBUG thisD.35099 => D#71ptD.0
  # DEBUG thisD.35100 => D#71ptD.0
  # .MEM_79 = VDEF <.MEM_57>
  MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
  resx 1
;;    succ:      

}



;; Function <built-in> (virtual_void_Arbiter__Clear__._loopfn.0, funcdef_no=1745, decl_uid=34654, cgraph_uid=367, symbol_order=1421)


Pass statistics:
----------------


Pass statistics:
----------------

<built-in> (voidD.45 * .paral_data_paramD.34656)
{
  signed long graphite_IV.183D.34663;
  signed long tt.188D.34662;
  signed long q.187D.34661;
  struct  * .paral_data_load.186D.34660;
  struct N7Arbiter7entry_tED.26837 * pretmp_4;
  unsigned long _5;
  intD.9 _6;
  signed long _7;
  intD.9 _8;
  signed long _9;
  signed long _10;
  signed long _17;
  signed long _18;
  signed long _19;
  signed long ivtmp_21;
  signed long ivtmp_22;
  sizetype _25;
  sizetype _26;
  struct N7Arbiter7entry_tED.26837 * _27;

;;   basic block 2, loop depth 0, count 0, freq 720, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_31(D)>
  # PT = nonlocal escaped 
  pretmp_4 = MEM[(struct  *).paral_data_param_1(D)].pretmpD.34650;
  # VUSE <.MEM_31(D)>
  _5 = MEM[(struct  *).paral_data_param_1(D)].D.34651;
  _6 = omp_get_num_threadsD.1718 ();
  # RANGE [-2147483648, 2147483647]
  _7 = (signed long) _6;
  _8 = omp_get_thread_numD.1717 ();
  # RANGE [-2147483648, 2147483647]
  _9 = (signed long) _8;
  _10 = (signed long) _5;
  q.187_11 = _10 / _7;
  tt.188_12 = _10 % _7;
  if (_9 < tt.188_12)
    goto <bb 9>;
  else
    goto <bb 3>;
;;    succ:       9 [25.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [75.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 720, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [75.0%]  (FALSE_VALUE,EXECUTABLE)
  # q.187_13 = PHI <q.187_14(9), q.187_11(2)>
  # tt.188_15 = PHI <0(9), tt.188_12(2)>
  _17 = _9 * q.187_13;
  _18 = tt.188_15 + _17;
  _19 = q.187_13 + _18;
  if (_18 >= _19)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       5 [100.0%]  (FALSE_VALUE,EXECUTABLE)
;;                4 (TRUE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 (TRUE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_38 = PHI <.MEM_31(D)(3), .MEM_30(7)>
  # VUSE <.MEM_38>
  return;
;;    succ:       EXIT

;;   basic block 5, loop depth 0, count 0, freq 720, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       3 [100.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8000, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # ivtmp_21 = PHI <_18(5), ivtmp_22(8)>
  # .MEM_29 = PHI <.MEM_31(D)(5), .MEM_32(8)>
  # RANGE [0, 18446744073709551615]
  _25 = (sizetype) ivtmp_21;
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _26 = _25 * 12;
  # PT = nonlocal escaped 
  _27 = pretmp_4 + _26;
  # .MEM_32 = VDEF <.MEM_29>
  _27->validD.26834 = 0;
  ivtmp_22 = ivtmp_21 + 1;
  if (_19 > ivtmp_22)
    goto <bb 8>;
  else
    goto <bb 7>;
;;    succ:       8 [100.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 (FALSE_VALUE,EXECUTABLE)
  # .MEM_30 = PHI <.MEM_32(6)>
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 8000, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       6 [100.0%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 720, maybe hot
;;    prev block 8, next block 1, flags: (NEW, REACHABLE)
;;    pred:       2 [25.0%]  (TRUE_VALUE,EXECUTABLE)
  q.187_14 = q.187_11 + 1;
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

}



;; Function <built-in> (Arbiter__Arbiter_Module___const_string___int_._loopfn.1, funcdef_no=1746, decl_uid=35113, cgraph_uid=583, symbol_order=1425)


Pass statistics:
----------------


Pass statistics:
----------------

<built-in> (voidD.45 * .paral_data_paramD.35115)
{
  signed long graphite_IV.241D.35122;
  signed long tt.246D.35121;
  signed long q.245D.35120;
  struct  * .paral_data_load.244D.35119;
  unsigned long _4;
  struct N7Arbiter7entry_tED.26837 * pretmp_5;
  intD.9 _6;
  signed long _7;
  intD.9 _8;
  signed long _9;
  signed long _10;
  signed long _17;
  signed long _18;
  signed long _19;
  signed long ivtmp_21;
  signed long ivtmp_22;
  sizetype _25;
  sizetype _26;
  struct N7Arbiter7entry_tED.26837 * _27;

;;   basic block 2, loop depth 0, count 0, freq 720, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_31(D)>
  _4 = MEM[(struct  *).paral_data_param_1(D)].D.35109;
  # VUSE <.MEM_31(D)>
  # PT = nonlocal escaped 
  pretmp_5 = MEM[(struct  *).paral_data_param_1(D)].pretmpD.35110;
  _6 = omp_get_num_threadsD.1718 ();
  # RANGE [-2147483648, 2147483647]
  _7 = (signed long) _6;
  _8 = omp_get_thread_numD.1717 ();
  # RANGE [-2147483648, 2147483647]
  _9 = (signed long) _8;
  _10 = (signed long) _4;
  q.245_11 = _10 / _7;
  tt.246_12 = _10 % _7;
  if (_9 < tt.246_12)
    goto <bb 9>;
  else
    goto <bb 3>;
;;    succ:       9 [25.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [75.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 720, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [75.0%]  (FALSE_VALUE,EXECUTABLE)
  # q.245_13 = PHI <q.245_14(9), q.245_11(2)>
  # tt.246_15 = PHI <0(9), tt.246_12(2)>
  _17 = _9 * q.245_13;
  _18 = tt.246_15 + _17;
  _19 = q.245_13 + _18;
  if (_18 >= _19)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       5 [100.0%]  (FALSE_VALUE,EXECUTABLE)
;;                4 (TRUE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 (TRUE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_38 = PHI <.MEM_31(D)(3), .MEM_30(7)>
  # VUSE <.MEM_38>
  return;
;;    succ:       EXIT

;;   basic block 5, loop depth 0, count 0, freq 720, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       3 [100.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8000, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # ivtmp_21 = PHI <_18(5), ivtmp_22(8)>
  # .MEM_29 = PHI <.MEM_31(D)(5), .MEM_32(8)>
  # RANGE [0, 18446744073709551615]
  _25 = (sizetype) ivtmp_21;
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _26 = _25 * 12;
  # PT = nonlocal escaped 
  _27 = pretmp_5 + _26;
  # .MEM_32 = VDEF <.MEM_29>
  _27->validD.26834 = 0;
  ivtmp_22 = ivtmp_21 + 1;
  if (_19 > ivtmp_22)
    goto <bb 8>;
  else
    goto <bb 7>;
;;    succ:       8 [100.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 (FALSE_VALUE,EXECUTABLE)
  # .MEM_30 = PHI <.MEM_32(6)>
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 8000, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       6 [100.0%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 720, maybe hot
;;    prev block 8, next block 1, flags: (NEW, REACHABLE)
;;    pred:       2 [25.0%]  (TRUE_VALUE,EXECUTABLE)
  q.245_14 = q.245_11 + 1;
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

}


