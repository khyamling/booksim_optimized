
;; Function virtual PriorityArbiter::~PriorityArbiter() (_ZN15PriorityArbiterD0Ev, funcdef_no=1876, decl_uid=34708, cgraph_uid=548, symbol_order=550)


Pass statistics:
----------------

virtual PriorityArbiter::~PriorityArbiter() (struct PriorityArbiterD.33914 * const thisD.34709)
{
  struct _NodeD.35143 * __tmpD.36598;
  struct ModuleD.26963 * * _3;
  charD.10 * const _10;
  const charD.10 * _11;
  charD.10 * const _12;
  const charD.10 * _13;
  struct _List_node_baseD.14413 * _48;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.36592 => this_2(D)
  # .MEM_18 = VDEF <.MEM_1(D)>
  this_2(D)->D.34729._vptr.ModuleD.27758 = &MEM[(voidD.45 *)&_ZTV15PriorityArbiterD.34735 + 16B];
  # DEBUG D#79ptD.0 => &this_2(D)->_requestsD.34671
  # DEBUG thisD.36593 => D#79ptD.0
  # DEBUG D#78ptD.0 => &D#79ptD.0->D.34669
  # DEBUG thisD.36594 => D#78ptD.0
  # DEBUG thisD.36595 => D#78ptD.0
  # VUSE <.MEM_18>
  # PT = nonlocal escaped 
  __tmp_5 = MEM[(struct _List_baseD.33925 *)this_2(D) + 104B]._M_implD.34096._M_nodeD.34247.D.14630._M_nextD.14415;
  # DEBUG __curD.36597 => __tmp_5
  # DEBUG __curD.36597 => __tmp_5
  # PT = nonlocal 
  _48 = &MEM[(struct _List_baseD.33925 *)this_2(D) + 104B]._M_implD.34096._M_nodeD.34247.D.14630;
  if (__tmp_5 == _48)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_6 = PHI <.MEM_18(2), .MEM_19(5)>
  # DEBUG D#77ptD.0 => &D#78ptD.0->_M_implD.34096
  # DEBUG thisD.36604 => D#77ptD.0
  # DEBUG thisD.36605 => D#77ptD.0
  # DEBUG thisD.36606 => D#77ptD.0
  # .MEM_24 = VDEF <.MEM_6>
  MEM[(struct  &)this_2(D) + 104] ={v} {CLOBBER};
  # DEBUG D#118ptD.0 => &this_2(D)->D.34729
  # DEBUG thisD.36607 => D#118ptD.0
  # .MEM_25 = VDEF <.MEM_24>
  MEM[(struct ModuleD.26963 *)this_2(D)]._vptr.ModuleD.27758 = &MEM[(voidD.45 *)&_ZTV6ModuleD.27763 + 16B];
  # DEBUG D#70ptD.0 => &D#118ptD.0->_childrenD.27713
  # DEBUG thisD.36608 => D#70ptD.0
  # DEBUG D#64ptD.0 => &D#70ptD.0->D.27711
  # DEBUG thisD.36178 => D#64ptD.0
  # DEBUG D#67ptD.0 => D#70ptD.0->D.27711._M_implD.27202._M_finishD.27205
  # DEBUG D#66ptD.0 => D#70ptD.0->D.27711._M_implD.27202._M_startD.27204
  # DEBUG D#30ptD.0 => D#66ptD.0
  # DEBUG D#31ptD.0 => D#67ptD.0
  # DEBUG __firstD.36177 => D#30ptD.0
  # DEBUG __lastD.36176 => D#31ptD.0
  # DEBUG D.36175 => D#32ptD.0
  # DEBUG D#29ptD.0 => D#31ptD.0
  # DEBUG D#28ptD.0 => D#30ptD.0
  # DEBUG D#26ptD.0 => D#28ptD.0
  # DEBUG D#27ptD.0 => D#29ptD.0
  # DEBUG __firstD.35991 => D#26ptD.0
  # DEBUG __lastD.35990 => D#27ptD.0
  # DEBUG D#25ptD.0 => D#27ptD.0
  # DEBUG D#24ptD.0 => D#26ptD.0
  # DEBUG D#22ptD.0 => D#24ptD.0
  # DEBUG D#23ptD.0 => D#25ptD.0
  # DEBUG D.35980 => D#22ptD.0
  # DEBUG D.35979 => D#23ptD.0
  # DEBUG D#65ptD.0 => &D#70ptD.0->D.27711
  # DEBUG thisD.36609 => D#65ptD.0
  # DEBUG D#63ptD.0 => D#65ptD.0->_M_implD.27202._M_end_of_storageD.27206
  # DEBUG D#62ptD.0 => (long intD.12) D#63ptD.0
  # VUSE <.MEM_25>
  # PT = nonlocal escaped 
  _3 = MEM[(struct _Vector_baseD.26969 *)this_2(D) + 72B]._M_implD.27202._M_startD.27204;
  # DEBUG D#61ptD.0 => (long intD.12) _3
  # DEBUG D#60ptD.0 => D#62ptD.0 - D#61ptD.0
  # DEBUG D#59ptD.0 => D#60ptD.0 /[ex] 8
  # DEBUG D#56ptD.0 => D#65ptD.0
  # DEBUG D#57ptD.0 => (long unsigned intD.14) D#59ptD.0
  # DEBUG __pD.36612 => _3
  # DEBUG thisD.36610 => D#56ptD.0
  # DEBUG __nD.36611 => D#57ptD.0
  # DEBUG D#55ptD.0 => D#57ptD.0
  # DEBUG D#54ptD.0 => D#56ptD.0
  if (_3 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __tmp_45 = PHI <__tmp_5(4), __tmp_8(6)>
  # .MEM_46 = PHI <.MEM_18(4), .MEM_19(6)>
  # DEBUG __curD.36597 => __tmp_45
  # DEBUG __tmpD.36598 => __tmp_45
  # VUSE <.MEM_46>
  # PT = nonlocal escaped 
  __tmp_8 = __tmp_45->D.35073._M_nextD.14415;
  # DEBUG __curD.36597 => __tmp_8
  # DEBUG D#76ptD.0 => &__tmp_45->_M_dataD.35072
  # DEBUG __rD.36272 => D#76ptD.0
  # DEBUG D#75ptD.0 => D#78ptD.0
  # DEBUG thisD.36271 => D#75ptD.0
  # DEBUG D#74ptD.0 => D#75ptD.0
  # DEBUG thisD.36258 => D#74ptD.0
  # DEBUG thisD.36250 => NULL
  # DEBUG D.36251 => NULL
  # DEBUG thisD.36248 => NULL
  # DEBUG thisD.36270 => D#17ptD.0
  # DEBUG __pD.36269 => D#18ptD.0
  # DEBUG thisD.36282 => NULL
  # DEBUG thisD.36268 => NULL
  # DEBUG thisD.36600 => D#78ptD.0
  # DEBUG __pD.36599 => __tmp_45
  # DEBUG D#35ptD.0 => &D#78ptD.0->_M_implD.34096
  # DEBUG D#33ptD.0 => D#35ptD.0
  # DEBUG D#34ptD.0 => 1
  # DEBUG __pD.36603 => __tmp_45
  # DEBUG thisD.36601 => D#33ptD.0
  # DEBUG D.36602 => D#34ptD.0
  # .MEM_19 = VDEF <.MEM_46>
  # USE = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  # CLB = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  _ZdlPvD.2766 (__tmp_45);
  # DEBUG __curD.36597 => __tmp_8
  if (__tmp_8 == _48)
    goto <bb 3>;
  else
    goto <bb 6>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       3 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#53ptD.0 => &D#54ptD.0->_M_implD.27202
  # DEBUG D#51ptD.0 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#55ptD.0
  # DEBUG __pD.36616 => _3
  # DEBUG __aD.36614 => D#51ptD.0
  # DEBUG __nD.36615 => D#52ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG __pD.36619 => _3
  # DEBUG thisD.36617 => D#47ptD.0
  # DEBUG D.36618 => D#48ptD.0
  # .MEM_26 = VDEF <.MEM_25>
  # USE = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  # CLB = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  _ZdlPvD.2766 (_3);
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       3 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_15 = PHI <.MEM_25(3), .MEM_26(7)>
  # DEBUG D#58ptD.0 => &D#65ptD.0->_M_implD.27202
  # DEBUG thisD.36620 => D#58ptD.0
  # DEBUG thisD.36621 => D#58ptD.0
  # DEBUG thisD.36622 => D#58ptD.0
  # .MEM_31 = VDEF <.MEM_15>
  MEM[(struct  &)this_2(D) + 72] ={v} {CLOBBER};
  # DEBUG D#69ptD.0 => &D#118ptD.0->_fullnameD.26966
  # DEBUG thisD.36623 => D#69ptD.0
  # DEBUG thisD.36624 => D#69ptD.0
  # DEBUG thisD.36633 => D#69ptD.0
  # VUSE <.MEM_31>
  # PT = nonlocal escaped 
  _10 = MEM[(charD.10 * *)this_2(D) + 40B];
  # DEBUG D#1ptD.0 => D#69ptD.0
  # DEBUG thisD.35792 => D#1ptD.0
  # DEBUG thisD.36634 => D#69ptD.0
  # PT = nonlocal 
  _11 = &MEM[(const struct basic_stringD.2844 *)this_2(D) + 40B].D.11539._M_local_bufD.11541;
  if (_10 != _11)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#45ptD.0 => MEM[(struct basic_stringD.2844 *)D#69ptD.0].D.11539._M_allocated_capacityD.11542
  # DEBUG D#44ptD.0 => D#45ptD.0
  # DEBUG thisD.36626 => D#69ptD.0
  # DEBUG __sizeD.36625 => D#44ptD.0
  # DEBUG D#43ptD.0 => D#44ptD.0
  # DEBUG D#1ptD.0 => D#69ptD.0
  # DEBUG thisD.36060 => D#1ptD.0
  # DEBUG thisD.36061 => D#69ptD.0
  # DEBUG D#42ptD.0 => &MEM[(struct basic_stringD.2844 *)D#69ptD.0]._M_dataplusD.11519
  # DEBUG D#40ptD.0 => D#42ptD.0
  # DEBUG D#41ptD.0 => D#43ptD.0 + 1
  # DEBUG __pD.36629 => _10
  # DEBUG __aD.36627 => D#40ptD.0
  # DEBUG __nD.36628 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#36ptD.0 => D#38ptD.0
  # DEBUG D#37ptD.0 => D#39ptD.0
  # DEBUG __pD.36632 => _10
  # DEBUG thisD.36630 => D#36ptD.0
  # DEBUG D.36631 => D#37ptD.0
  # .MEM_32 = VDEF <.MEM_31>
  # USE = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  # CLB = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  _ZdlPvD.2766 (_10);
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_16 = PHI <.MEM_31(8), .MEM_32(9)>
  # DEBUG D#46ptD.0 => &MEM[(struct basic_stringD.2844 *)D#69ptD.0]._M_dataplusD.11519
  # DEBUG thisD.36635 => D#46ptD.0
  # DEBUG thisD.36636 => D#46ptD.0
  # DEBUG thisD.36637 => D#46ptD.0
  # .MEM_36 = VDEF <.MEM_16>
  MEM[(struct  &)this_2(D) + 40] ={v} {CLOBBER};
  # DEBUG D#68ptD.0 => &D#118ptD.0->_nameD.26965
  # DEBUG thisD.36638 => D#68ptD.0
  # DEBUG thisD.36639 => D#68ptD.0
  # DEBUG thisD.36648 => D#68ptD.0
  # VUSE <.MEM_36>
  # PT = nonlocal escaped 
  _12 = MEM[(charD.10 * *)this_2(D) + 8B];
  # DEBUG D#1ptD.0 => D#68ptD.0
  # DEBUG thisD.35792 => D#1ptD.0
  # DEBUG thisD.36649 => D#68ptD.0
  # PT = nonlocal 
  _13 = &MEM[(const struct basic_stringD.2844 *)this_2(D) + 8B].D.11539._M_local_bufD.11541;
  if (_12 != _13)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 705, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#45ptD.0 => MEM[(struct basic_stringD.2844 *)D#68ptD.0].D.11539._M_allocated_capacityD.11542
  # DEBUG D#44ptD.0 => D#45ptD.0
  # DEBUG thisD.36641 => D#68ptD.0
  # DEBUG __sizeD.36640 => D#44ptD.0
  # DEBUG D#43ptD.0 => D#44ptD.0
  # DEBUG D#1ptD.0 => D#68ptD.0
  # DEBUG thisD.36060 => D#1ptD.0
  # DEBUG thisD.36061 => D#68ptD.0
  # DEBUG D#42ptD.0 => &MEM[(struct basic_stringD.2844 *)D#68ptD.0]._M_dataplusD.11519
  # DEBUG D#40ptD.0 => D#42ptD.0
  # DEBUG D#41ptD.0 => D#43ptD.0 + 1
  # DEBUG __pD.36644 => _12
  # DEBUG __aD.36642 => D#40ptD.0
  # DEBUG __nD.36643 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#36ptD.0 => D#38ptD.0
  # DEBUG D#37ptD.0 => D#39ptD.0
  # DEBUG __pD.36647 => _12
  # DEBUG thisD.36645 => D#36ptD.0
  # DEBUG D.36646 => D#37ptD.0
  # .MEM_37 = VDEF <.MEM_36>
  # USE = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  # CLB = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  _ZdlPvD.2766 (_12);
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 11, next block 1, flags: (NEW, REACHABLE)
;;    pred:       10 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_17 = PHI <.MEM_36(10), .MEM_37(11)>
  # DEBUG D#46ptD.0 => &MEM[(struct basic_stringD.2844 *)D#68ptD.0]._M_dataplusD.11519
  # DEBUG thisD.36650 => D#46ptD.0
  # DEBUG thisD.36651 => D#46ptD.0
  # DEBUG thisD.36652 => D#46ptD.0
  # .MEM_43 = VDEF <.MEM_17>
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  # .MEM_4 = VDEF <.MEM_43>
  # USE = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  # CLB = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  _ZdlPvD.2766 (this_2(D));
  # VUSE <.MEM_4>
  return;
;;    succ:       EXIT [100.0%] 

}



Updating SSA:
Registering new PHI nodes in block #5
Updating SSA information for statement operator delete (__tmp_45);
Registering new PHI nodes in block #6
Registering new PHI nodes in block #13

DFA Statistics for virtual PriorityArbiter::~PriorityArbiter()

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             48        384b
DEF operands                              8         64b
VUSE operands                            17        136b
VDEF operands                            11         88b
PHI nodes                                 7        728b
PHI arguments                            13        624b
---------------------------------------------------------
Total memory used by DFA/SSA data                 2024b
---------------------------------------------------------

Average number of arguments per PHI node: 1.9 (max: 2)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_47 -> { .MEM_19 }
Incremental SSA update started at block: 5
Number of blocks in CFG: 14
Number of blocks to update: 3 ( 21%)
Affected blocks: 5 6 13


Creating dr for this_2(D)->D.34729._vptr.Module
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *this_2(D)
	Access function 0: 0
	Access function 1: 0
Creating dr for MEM[(struct _List_base *)this_2(D) + 104B]._M_impl._M_node.D.14630._M_next
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 104
	step: 0
	aligned to: 256
	base_object: MEM[(struct _List_base *)this_2(D) + 104B]
	Access function 0: 0
	Access function 1: 0
	Access function 2: 0
	Access function 3: 0
Creating dr for __tmp_45->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_45
	Access function 0: 0
	Access function 1: 0
Creating dr for __tmp_45->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_45
	Access function 0: 0
	Access function 1: 0
Creating dr for __tmp_45->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_45
	Access function 0: 0
	Access function 1: 0
Creating dr for __tmp_45->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_45
	Access function 0: 0
	Access function 1: 0
Creating dr for __tmp_45->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_45
	Access function 0: 0
	Access function 1: 0
Creating dr for __tmp_45->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_45
	Access function 0: 0
	Access function 1: 0
Creating dr for __tmp_45->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_45
	Access function 0: 0
	Access function 1: 0
Creating dr for __tmp_45->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_45
	Access function 0: 0
	Access function 1: 0

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:14, LOOPS:1, CONDITIONS:5, STMTS:182)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # DEBUG this => this_2(D)
    # .MEM_18 = VDEF <.MEM_1(D)>
    this_2(D)->D.34729._vptr.Module = &MEM[(void *)&_ZTV15PriorityArbiter + 16B];
    # DEBUG D#79 => &this_2(D)->_requests
    # DEBUG this => D#79
    # DEBUG D#78 => &D#79->D.34669
    # DEBUG this => D#78
    # DEBUG this => D#78
    # VUSE <.MEM_18>
    __tmp_5 = MEM[(struct _List_base *)this_2(D) + 104B]._M_impl._M_node.D.14630._M_next;
    # DEBUG __cur => __tmp_5
    # DEBUG __cur => __tmp_5
    _48 = &MEM[(struct _List_base *)this_2(D) + 104B]._M_impl._M_node.D.14630;
    if (__tmp_5 == _48)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 bb_13 }, succs = {bb_7 bb_8 })
  {
    <bb 3>:
    # .MEM_6 = PHI <.MEM_18(2), .MEM_47(13)>
    # DEBUG D#77 => &D#78->_M_impl
    # DEBUG this => D#77
    # DEBUG this => D#77
    # DEBUG this => D#77
    # .MEM_24 = VDEF <.MEM_6>
    MEM[(struct  &)this_2(D) + 104] ={v} {CLOBBER};
    # DEBUG D#118 => &this_2(D)->D.34729
    # DEBUG this => D#118
    # .MEM_25 = VDEF <.MEM_24>
    MEM[(struct Module *)this_2(D)]._vptr.Module = &MEM[(void *)&_ZTV6Module + 16B];
    # DEBUG D#70 => &D#118->_children
    # DEBUG this => D#70
    # DEBUG D#64 => &D#70->D.27711
    # DEBUG this => D#64
    # DEBUG D#67 => D#70->D.27711._M_impl._M_finish
    # DEBUG D#66 => D#70->D.27711._M_impl._M_start
    # DEBUG D#30 => D#66
    # DEBUG D#31 => D#67
    # DEBUG __first => D#30
    # DEBUG __last => D#31
    # DEBUG D.36175 => D#32
    # DEBUG D#29 => D#31
    # DEBUG D#28 => D#30
    # DEBUG D#26 => D#28
    # DEBUG D#27 => D#29
    # DEBUG __first => D#26
    # DEBUG __last => D#27
    # DEBUG D#25 => D#27
    # DEBUG D#24 => D#26
    # DEBUG D#22 => D#24
    # DEBUG D#23 => D#25
    # DEBUG D.35980 => D#22
    # DEBUG D.35979 => D#23
    # DEBUG D#65 => &D#70->D.27711
    # DEBUG this => D#65
    # DEBUG D#63 => D#65->_M_impl._M_end_of_storage
    # DEBUG D#62 => (long int) D#63
    # VUSE <.MEM_25>
    _3 = MEM[(struct _Vector_base *)this_2(D) + 72B]._M_impl._M_start;
    # DEBUG D#61 => (long int) _3
    # DEBUG D#60 => D#62 - D#61
    # DEBUG D#59 => D#60 /[ex] 8
    # DEBUG D#56 => D#65
    # DEBUG D#57 => (long unsigned int) D#59
    # DEBUG __p => _3
    # DEBUG this => D#56
    # DEBUG __n => D#57
    # DEBUG D#55 => D#57
    # DEBUG D#54 => D#56
    if (_3 != 0B)
      goto <bb 7>;
    else
      goto <bb 8>;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 })
  {
    <bb 4>:

  }
  bb_13 (preds = {bb_5 }, succs = {bb_3 })
  {
    <bb 13>:
    # .MEM_47 = PHI <.MEM_19(5)>
    goto <bb 3>;

  }
  bb_7 (preds = {bb_3 }, succs = {bb_8 })
  {
    <bb 7>:
    # DEBUG D#53 => &D#54->_M_impl
    # DEBUG D#51 => D#53
    # DEBUG D#52 => D#55
    # DEBUG __p => _3
    # DEBUG __a => D#51
    # DEBUG __n => D#52
    # DEBUG D#50 => D#52
    # DEBUG D#49 => D#51
    # DEBUG D#47 => D#49
    # DEBUG D#48 => D#50
    # DEBUG __p => _3
    # DEBUG this => D#47
    # DEBUG D.36618 => D#48
    # .MEM_26 = VDEF <.MEM_25>
    operator delete (_3);

  }
  bb_8 (preds = {bb_3 bb_7 }, succs = {bb_9 bb_10 })
  {
    <bb 8>:
    # .MEM_15 = PHI <.MEM_25(3), .MEM_26(7)>
    # DEBUG D#58 => &D#65->_M_impl
    # DEBUG this => D#58
    # DEBUG this => D#58
    # DEBUG this => D#58
    # .MEM_31 = VDEF <.MEM_15>
    MEM[(struct  &)this_2(D) + 72] ={v} {CLOBBER};
    # DEBUG D#69 => &D#118->_fullname
    # DEBUG this => D#69
    # DEBUG this => D#69
    # DEBUG this => D#69
    # VUSE <.MEM_31>
    _10 = MEM[(char * *)this_2(D) + 40B];
    # DEBUG D#1 => D#69
    # DEBUG this => D#1
    # DEBUG this => D#69
    _11 = &MEM[(const struct basic_string *)this_2(D) + 40B].D.11539._M_local_buf;
    if (_10 != _11)
      goto <bb 9>;
    else
      goto <bb 10>;

  }
  bb_9 (preds = {bb_8 }, succs = {bb_10 })
  {
    <bb 9>:
    # DEBUG D#45 => MEM[(struct basic_string *)D#69].D.11539._M_allocated_capacity
    # DEBUG D#44 => D#45
    # DEBUG this => D#69
    # DEBUG __size => D#44
    # DEBUG D#43 => D#44
    # DEBUG D#1 => D#69
    # DEBUG this => D#1
    # DEBUG this => D#69
    # DEBUG D#42 => &MEM[(struct basic_string *)D#69]._M_dataplus
    # DEBUG D#40 => D#42
    # DEBUG D#41 => D#43 + 1
    # DEBUG __p => _10
    # DEBUG __a => D#40
    # DEBUG __n => D#41
    # DEBUG D#39 => D#41
    # DEBUG D#38 => D#40
    # DEBUG D#36 => D#38
    # DEBUG D#37 => D#39
    # DEBUG __p => _10
    # DEBUG this => D#36
    # DEBUG D.36631 => D#37
    # .MEM_32 = VDEF <.MEM_31>
    operator delete (_10);

  }
  bb_10 (preds = {bb_8 bb_9 }, succs = {bb_11 bb_12 })
  {
    <bb 10>:
    # .MEM_16 = PHI <.MEM_31(8), .MEM_32(9)>
    # DEBUG D#46 => &MEM[(struct basic_string *)D#69]._M_dataplus
    # DEBUG this => D#46
    # DEBUG this => D#46
    # DEBUG this => D#46
    # .MEM_36 = VDEF <.MEM_16>
    MEM[(struct  &)this_2(D) + 40] ={v} {CLOBBER};
    # DEBUG D#68 => &D#118->_name
    # DEBUG this => D#68
    # DEBUG this => D#68
    # DEBUG this => D#68
    # VUSE <.MEM_36>
    _12 = MEM[(char * *)this_2(D) + 8B];
    # DEBUG D#1 => D#68
    # DEBUG this => D#1
    # DEBUG this => D#68
    _13 = &MEM[(const struct basic_string *)this_2(D) + 8B].D.11539._M_local_buf;
    if (_12 != _13)
      goto <bb 11>;
    else
      goto <bb 12>;

  }
  bb_11 (preds = {bb_10 }, succs = {bb_12 })
  {
    <bb 11>:
    # DEBUG D#45 => MEM[(struct basic_string *)D#68].D.11539._M_allocated_capacity
    # DEBUG D#44 => D#45
    # DEBUG this => D#68
    # DEBUG __size => D#44
    # DEBUG D#43 => D#44
    # DEBUG D#1 => D#68
    # DEBUG this => D#1
    # DEBUG this => D#68
    # DEBUG D#42 => &MEM[(struct basic_string *)D#68]._M_dataplus
    # DEBUG D#40 => D#42
    # DEBUG D#41 => D#43 + 1
    # DEBUG __p => _12
    # DEBUG __a => D#40
    # DEBUG __n => D#41
    # DEBUG D#39 => D#41
    # DEBUG D#38 => D#40
    # DEBUG D#36 => D#38
    # DEBUG D#37 => D#39
    # DEBUG __p => _12
    # DEBUG this => D#36
    # DEBUG D.36646 => D#37
    # .MEM_37 = VDEF <.MEM_36>
    operator delete (_12);

  }
  bb_12 (preds = {bb_10 bb_11 }, succs = {bb_1 })
  {
    <bb 12>:
    # .MEM_17 = PHI <.MEM_36(10), .MEM_37(11)>
    # DEBUG D#46 => &MEM[(struct basic_string *)D#68]._M_dataplus
    # DEBUG this => D#46
    # DEBUG this => D#46
    # DEBUG this => D#46
    # .MEM_43 = VDEF <.MEM_17>
    MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
    # .MEM_4 = VDEF <.MEM_43>
    operator delete (this_2(D));
    # VUSE <.MEM_4>
    return;

  }
  loop_1 (header = 5, latch = 6, niter = )
  {
    bb_5 (preds = {bb_4 bb_6 }, succs = {bb_13 bb_6 })
    {
      <bb 5>:
      # __tmp_45 = PHI <__tmp_5(4), __tmp_8(6)>
      # .MEM_46 = PHI <.MEM_18(4), .MEM_19(6)>
      # DEBUG __cur => __tmp_45
      # DEBUG __tmp => __tmp_45
      # VUSE <.MEM_46>
      __tmp_8 = __tmp_45->D.35073._M_next;
      # DEBUG __cur => __tmp_8
      # DEBUG D#76 => &__tmp_45->_M_data
      # DEBUG __r => D#76
      # DEBUG D#75 => D#78
      # DEBUG this => D#75
      # DEBUG D#74 => D#75
      # DEBUG this => D#74
      # DEBUG this => NULL
      # DEBUG D.36251 => NULL
      # DEBUG this => NULL
      # DEBUG this => D#17
      # DEBUG __p => D#18
      # DEBUG this => NULL
      # DEBUG this => NULL
      # DEBUG this => D#78
      # DEBUG __p => __tmp_45
      # DEBUG D#35 => &D#78->_M_impl
      # DEBUG D#33 => D#35
      # DEBUG D#34 => 1
      # DEBUG __p => __tmp_45
      # DEBUG this => D#33
      # DEBUG D.36602 => D#34
      # .MEM_19 = VDEF <.MEM_46>
      operator delete (__tmp_45);
      # DEBUG __cur => __tmp_8
      if (__tmp_8 == _48)
        goto <bb 13>;
      else
        goto <bb 6>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_5 })
    {
      <bb 6>:
      goto <bb 5>;

    }
  }
}

Pass statistics:
----------------

virtual PriorityArbiter::~PriorityArbiter() (struct PriorityArbiterD.33914 * const thisD.34709)
{
  struct _NodeD.35143 * __tmpD.36598;
  struct ModuleD.26963 * * _3;
  charD.10 * const _10;
  const charD.10 * _11;
  charD.10 * const _12;
  const charD.10 * _13;
  struct _List_node_baseD.14413 * _48;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.36592 => this_2(D)
  # .MEM_18 = VDEF <.MEM_1(D)>
  this_2(D)->D.34729._vptr.ModuleD.27758 = &MEM[(voidD.45 *)&_ZTV15PriorityArbiterD.34735 + 16B];
  # DEBUG D#79ptD.0 => &this_2(D)->_requestsD.34671
  # DEBUG thisD.36593 => D#79ptD.0
  # DEBUG D#78ptD.0 => &D#79ptD.0->D.34669
  # DEBUG thisD.36594 => D#78ptD.0
  # DEBUG thisD.36595 => D#78ptD.0
  # VUSE <.MEM_18>
  # PT = nonlocal escaped 
  __tmp_5 = MEM[(struct _List_baseD.33925 *)this_2(D) + 104B]._M_implD.34096._M_nodeD.34247.D.14630._M_nextD.14415;
  # DEBUG __curD.36597 => __tmp_5
  # DEBUG __curD.36597 => __tmp_5
  # PT = nonlocal 
  _48 = &MEM[(struct _List_baseD.33925 *)this_2(D) + 104B]._M_implD.34096._M_nodeD.34247.D.14630;
  if (__tmp_5 == _48)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU)
  # .MEM_6 = PHI <.MEM_18(2), .MEM_47(13)>
  # DEBUG D#77ptD.0 => &D#78ptD.0->_M_implD.34096
  # DEBUG thisD.36604 => D#77ptD.0
  # DEBUG thisD.36605 => D#77ptD.0
  # DEBUG thisD.36606 => D#77ptD.0
  # .MEM_24 = VDEF <.MEM_6>
  MEM[(struct  &)this_2(D) + 104] ={v} {CLOBBER};
  # DEBUG D#118ptD.0 => &this_2(D)->D.34729
  # DEBUG thisD.36607 => D#118ptD.0
  # .MEM_25 = VDEF <.MEM_24>
  MEM[(struct ModuleD.26963 *)this_2(D)]._vptr.ModuleD.27758 = &MEM[(voidD.45 *)&_ZTV6ModuleD.27763 + 16B];
  # DEBUG D#70ptD.0 => &D#118ptD.0->_childrenD.27713
  # DEBUG thisD.36608 => D#70ptD.0
  # DEBUG D#64ptD.0 => &D#70ptD.0->D.27711
  # DEBUG thisD.36178 => D#64ptD.0
  # DEBUG D#67ptD.0 => D#70ptD.0->D.27711._M_implD.27202._M_finishD.27205
  # DEBUG D#66ptD.0 => D#70ptD.0->D.27711._M_implD.27202._M_startD.27204
  # DEBUG D#30ptD.0 => D#66ptD.0
  # DEBUG D#31ptD.0 => D#67ptD.0
  # DEBUG __firstD.36177 => D#30ptD.0
  # DEBUG __lastD.36176 => D#31ptD.0
  # DEBUG D.36175 => D#32ptD.0
  # DEBUG D#29ptD.0 => D#31ptD.0
  # DEBUG D#28ptD.0 => D#30ptD.0
  # DEBUG D#26ptD.0 => D#28ptD.0
  # DEBUG D#27ptD.0 => D#29ptD.0
  # DEBUG __firstD.35991 => D#26ptD.0
  # DEBUG __lastD.35990 => D#27ptD.0
  # DEBUG D#25ptD.0 => D#27ptD.0
  # DEBUG D#24ptD.0 => D#26ptD.0
  # DEBUG D#22ptD.0 => D#24ptD.0
  # DEBUG D#23ptD.0 => D#25ptD.0
  # DEBUG D.35980 => D#22ptD.0
  # DEBUG D.35979 => D#23ptD.0
  # DEBUG D#65ptD.0 => &D#70ptD.0->D.27711
  # DEBUG thisD.36609 => D#65ptD.0
  # DEBUG D#63ptD.0 => D#65ptD.0->_M_implD.27202._M_end_of_storageD.27206
  # DEBUG D#62ptD.0 => (long intD.12) D#63ptD.0
  # VUSE <.MEM_25>
  # PT = nonlocal escaped 
  _3 = MEM[(struct _Vector_baseD.26969 *)this_2(D) + 72B]._M_implD.27202._M_startD.27204;
  # DEBUG D#61ptD.0 => (long intD.12) _3
  # DEBUG D#60ptD.0 => D#62ptD.0 - D#61ptD.0
  # DEBUG D#59ptD.0 => D#60ptD.0 /[ex] 8
  # DEBUG D#56ptD.0 => D#65ptD.0
  # DEBUG D#57ptD.0 => (long unsigned intD.14) D#59ptD.0
  # DEBUG __pD.36612 => _3
  # DEBUG thisD.36610 => D#56ptD.0
  # DEBUG __nD.36611 => D#57ptD.0
  # DEBUG D#55ptD.0 => D#57ptD.0
  # DEBUG D#54ptD.0 => D#56ptD.0
  if (_3 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 13, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __tmp_45 = PHI <__tmp_5(4), __tmp_8(6)>
  # .MEM_46 = PHI <.MEM_18(4), .MEM_19(6)>
  # DEBUG __curD.36597 => __tmp_45
  # DEBUG __tmpD.36598 => __tmp_45
  # VUSE <.MEM_46>
  # PT = nonlocal escaped 
  __tmp_8 = __tmp_45->D.35073._M_nextD.14415;
  # DEBUG __curD.36597 => __tmp_8
  # DEBUG D#76ptD.0 => &__tmp_45->_M_dataD.35072
  # DEBUG __rD.36272 => D#76ptD.0
  # DEBUG D#75ptD.0 => D#78ptD.0
  # DEBUG thisD.36271 => D#75ptD.0
  # DEBUG D#74ptD.0 => D#75ptD.0
  # DEBUG thisD.36258 => D#74ptD.0
  # DEBUG thisD.36250 => NULL
  # DEBUG D.36251 => NULL
  # DEBUG thisD.36248 => NULL
  # DEBUG thisD.36270 => D#17ptD.0
  # DEBUG __pD.36269 => D#18ptD.0
  # DEBUG thisD.36282 => NULL
  # DEBUG thisD.36268 => NULL
  # DEBUG thisD.36600 => D#78ptD.0
  # DEBUG __pD.36599 => __tmp_45
  # DEBUG D#35ptD.0 => &D#78ptD.0->_M_implD.34096
  # DEBUG D#33ptD.0 => D#35ptD.0
  # DEBUG D#34ptD.0 => 1
  # DEBUG __pD.36603 => __tmp_45
  # DEBUG thisD.36601 => D#33ptD.0
  # DEBUG D.36602 => D#34ptD.0
  # .MEM_19 = VDEF <.MEM_46>
  # USE = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  # CLB = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  _ZdlPvD.2766 (__tmp_45);
  # DEBUG __curD.36597 => __tmp_8
  if (__tmp_8 == _48)
    goto <bb 13>;
  else
    goto <bb 6>;
;;    succ:       13 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 5, next block 6, flags: (NEW)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_47 = PHI <.MEM_19(5)>
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU)

;;   basic block 6, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 13, next block 7, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       3 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#53ptD.0 => &D#54ptD.0->_M_implD.27202
  # DEBUG D#51ptD.0 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#55ptD.0
  # DEBUG __pD.36616 => _3
  # DEBUG __aD.36614 => D#51ptD.0
  # DEBUG __nD.36615 => D#52ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG __pD.36619 => _3
  # DEBUG thisD.36617 => D#47ptD.0
  # DEBUG D.36618 => D#48ptD.0
  # .MEM_26 = VDEF <.MEM_25>
  # USE = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  # CLB = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  _ZdlPvD.2766 (_3);
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       3 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_15 = PHI <.MEM_25(3), .MEM_26(7)>
  # DEBUG D#58ptD.0 => &D#65ptD.0->_M_implD.27202
  # DEBUG thisD.36620 => D#58ptD.0
  # DEBUG thisD.36621 => D#58ptD.0
  # DEBUG thisD.36622 => D#58ptD.0
  # .MEM_31 = VDEF <.MEM_15>
  MEM[(struct  &)this_2(D) + 72] ={v} {CLOBBER};
  # DEBUG D#69ptD.0 => &D#118ptD.0->_fullnameD.26966
  # DEBUG thisD.36623 => D#69ptD.0
  # DEBUG thisD.36624 => D#69ptD.0
  # DEBUG thisD.36633 => D#69ptD.0
  # VUSE <.MEM_31>
  # PT = nonlocal escaped 
  _10 = MEM[(charD.10 * *)this_2(D) + 40B];
  # DEBUG D#1ptD.0 => D#69ptD.0
  # DEBUG thisD.35792 => D#1ptD.0
  # DEBUG thisD.36634 => D#69ptD.0
  # PT = nonlocal 
  _11 = &MEM[(const struct basic_stringD.2844 *)this_2(D) + 40B].D.11539._M_local_bufD.11541;
  if (_10 != _11)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#45ptD.0 => MEM[(struct basic_stringD.2844 *)D#69ptD.0].D.11539._M_allocated_capacityD.11542
  # DEBUG D#44ptD.0 => D#45ptD.0
  # DEBUG thisD.36626 => D#69ptD.0
  # DEBUG __sizeD.36625 => D#44ptD.0
  # DEBUG D#43ptD.0 => D#44ptD.0
  # DEBUG D#1ptD.0 => D#69ptD.0
  # DEBUG thisD.36060 => D#1ptD.0
  # DEBUG thisD.36061 => D#69ptD.0
  # DEBUG D#42ptD.0 => &MEM[(struct basic_stringD.2844 *)D#69ptD.0]._M_dataplusD.11519
  # DEBUG D#40ptD.0 => D#42ptD.0
  # DEBUG D#41ptD.0 => D#43ptD.0 + 1
  # DEBUG __pD.36629 => _10
  # DEBUG __aD.36627 => D#40ptD.0
  # DEBUG __nD.36628 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#36ptD.0 => D#38ptD.0
  # DEBUG D#37ptD.0 => D#39ptD.0
  # DEBUG __pD.36632 => _10
  # DEBUG thisD.36630 => D#36ptD.0
  # DEBUG D.36631 => D#37ptD.0
  # .MEM_32 = VDEF <.MEM_31>
  # USE = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  # CLB = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  _ZdlPvD.2766 (_10);
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_16 = PHI <.MEM_31(8), .MEM_32(9)>
  # DEBUG D#46ptD.0 => &MEM[(struct basic_stringD.2844 *)D#69ptD.0]._M_dataplusD.11519
  # DEBUG thisD.36635 => D#46ptD.0
  # DEBUG thisD.36636 => D#46ptD.0
  # DEBUG thisD.36637 => D#46ptD.0
  # .MEM_36 = VDEF <.MEM_16>
  MEM[(struct  &)this_2(D) + 40] ={v} {CLOBBER};
  # DEBUG D#68ptD.0 => &D#118ptD.0->_nameD.26965
  # DEBUG thisD.36638 => D#68ptD.0
  # DEBUG thisD.36639 => D#68ptD.0
  # DEBUG thisD.36648 => D#68ptD.0
  # VUSE <.MEM_36>
  # PT = nonlocal escaped 
  _12 = MEM[(charD.10 * *)this_2(D) + 8B];
  # DEBUG D#1ptD.0 => D#68ptD.0
  # DEBUG thisD.35792 => D#1ptD.0
  # DEBUG thisD.36649 => D#68ptD.0
  # PT = nonlocal 
  _13 = &MEM[(const struct basic_stringD.2844 *)this_2(D) + 8B].D.11539._M_local_bufD.11541;
  if (_12 != _13)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 705, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#45ptD.0 => MEM[(struct basic_stringD.2844 *)D#68ptD.0].D.11539._M_allocated_capacityD.11542
  # DEBUG D#44ptD.0 => D#45ptD.0
  # DEBUG thisD.36641 => D#68ptD.0
  # DEBUG __sizeD.36640 => D#44ptD.0
  # DEBUG D#43ptD.0 => D#44ptD.0
  # DEBUG D#1ptD.0 => D#68ptD.0
  # DEBUG thisD.36060 => D#1ptD.0
  # DEBUG thisD.36061 => D#68ptD.0
  # DEBUG D#42ptD.0 => &MEM[(struct basic_stringD.2844 *)D#68ptD.0]._M_dataplusD.11519
  # DEBUG D#40ptD.0 => D#42ptD.0
  # DEBUG D#41ptD.0 => D#43ptD.0 + 1
  # DEBUG __pD.36644 => _12
  # DEBUG __aD.36642 => D#40ptD.0
  # DEBUG __nD.36643 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#36ptD.0 => D#38ptD.0
  # DEBUG D#37ptD.0 => D#39ptD.0
  # DEBUG __pD.36647 => _12
  # DEBUG thisD.36645 => D#36ptD.0
  # DEBUG D.36646 => D#37ptD.0
  # .MEM_37 = VDEF <.MEM_36>
  # USE = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  # CLB = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  _ZdlPvD.2766 (_12);
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 11, next block 1, flags: (NEW, REACHABLE)
;;    pred:       10 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_17 = PHI <.MEM_36(10), .MEM_37(11)>
  # DEBUG D#46ptD.0 => &MEM[(struct basic_stringD.2844 *)D#68ptD.0]._M_dataplusD.11519
  # DEBUG thisD.36650 => D#46ptD.0
  # DEBUG thisD.36651 => D#46ptD.0
  # DEBUG thisD.36652 => D#46ptD.0
  # .MEM_43 = VDEF <.MEM_17>
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  # .MEM_4 = VDEF <.MEM_43>
  # USE = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  # CLB = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  _ZdlPvD.2766 (this_2(D));
  # VUSE <.MEM_4>
  return;
;;    succ:       EXIT [100.0%] 

}



;; Function PriorityArbiter::~PriorityArbiter() (_ZN15PriorityArbiterD2Ev, funcdef_no=1874, decl_uid=34714, cgraph_uid=546, symbol_order=548)


Pass statistics:
----------------

PriorityArbiter::~PriorityArbiter() (struct PriorityArbiterD.33914 * const thisD.34715)
{
  struct _NodeD.35143 * __tmpD.36308;
  struct ModuleD.26963 * * _18;
  charD.10 * const _19;
  const charD.10 * _20;
  charD.10 * const _21;
  const charD.10 * _22;
  struct _List_node_baseD.14413 * _47;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_3 = VDEF <.MEM_1(D)>
  this_2(D)->D.34729._vptr.ModuleD.27758 = &MEM[(voidD.45 *)&_ZTV15PriorityArbiterD.34735 + 16B];
  # DEBUG D#79ptD.0 => &this_2(D)->_requestsD.34671
  # DEBUG thisD.36303 => D#79ptD.0
  # DEBUG D#78ptD.0 => &D#79ptD.0->D.34669
  # DEBUG thisD.36304 => D#78ptD.0
  # DEBUG thisD.36305 => D#78ptD.0
  # VUSE <.MEM_3>
  # PT = nonlocal escaped 
  __tmp_8 = MEM[(struct _List_baseD.33925 *)this_2(D) + 104B]._M_implD.34096._M_nodeD.34247.D.14630._M_nextD.14415;
  # DEBUG __curD.36307 => __tmp_8
  # DEBUG __curD.36307 => __tmp_8
  # PT = nonlocal 
  _47 = &MEM[(struct _List_baseD.33925 *)this_2(D) + 104B]._M_implD.34096._M_nodeD.34247.D.14630;
  if (__tmp_8 == _47)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_9 = PHI <.MEM_3(2), .MEM_12(5)>
  # DEBUG D#77ptD.0 => &D#78ptD.0->_M_implD.34096
  # DEBUG thisD.36314 => D#77ptD.0
  # DEBUG thisD.36315 => D#77ptD.0
  # DEBUG thisD.36316 => D#77ptD.0
  # .MEM_17 = VDEF <.MEM_9>
  MEM[(struct  &)this_2(D) + 104] ={v} {CLOBBER};
  # DEBUG D#119ptD.0 => &this_2(D)->D.34729
  # DEBUG thisD.36659 => D#119ptD.0
  # .MEM_25 = VDEF <.MEM_17>
  MEM[(struct ModuleD.26963 *)this_2(D)]._vptr.ModuleD.27758 = &MEM[(voidD.45 *)&_ZTV6ModuleD.27763 + 16B];
  # DEBUG D#70ptD.0 => &D#119ptD.0->_childrenD.27713
  # DEBUG thisD.36660 => D#70ptD.0
  # DEBUG D#64ptD.0 => &D#70ptD.0->D.27711
  # DEBUG thisD.36178 => D#64ptD.0
  # DEBUG D#67ptD.0 => D#70ptD.0->D.27711._M_implD.27202._M_finishD.27205
  # DEBUG D#66ptD.0 => D#70ptD.0->D.27711._M_implD.27202._M_startD.27204
  # DEBUG D#30ptD.0 => D#66ptD.0
  # DEBUG D#31ptD.0 => D#67ptD.0
  # DEBUG __firstD.36177 => D#30ptD.0
  # DEBUG __lastD.36176 => D#31ptD.0
  # DEBUG D.36175 => D#32ptD.0
  # DEBUG D#29ptD.0 => D#31ptD.0
  # DEBUG D#28ptD.0 => D#30ptD.0
  # DEBUG D#26ptD.0 => D#28ptD.0
  # DEBUG D#27ptD.0 => D#29ptD.0
  # DEBUG __firstD.35991 => D#26ptD.0
  # DEBUG __lastD.35990 => D#27ptD.0
  # DEBUG D#25ptD.0 => D#27ptD.0
  # DEBUG D#24ptD.0 => D#26ptD.0
  # DEBUG D#22ptD.0 => D#24ptD.0
  # DEBUG D#23ptD.0 => D#25ptD.0
  # DEBUG D.35980 => D#22ptD.0
  # DEBUG D.35979 => D#23ptD.0
  # DEBUG D#65ptD.0 => &D#70ptD.0->D.27711
  # DEBUG thisD.36661 => D#65ptD.0
  # DEBUG D#63ptD.0 => D#65ptD.0->_M_implD.27202._M_end_of_storageD.27206
  # DEBUG D#62ptD.0 => (long intD.12) D#63ptD.0
  # VUSE <.MEM_25>
  # PT = nonlocal escaped 
  _18 = MEM[(struct _Vector_baseD.26969 *)this_2(D) + 72B]._M_implD.27202._M_startD.27204;
  # DEBUG D#61ptD.0 => (long intD.12) _18
  # DEBUG D#60ptD.0 => D#62ptD.0 - D#61ptD.0
  # DEBUG D#59ptD.0 => D#60ptD.0 /[ex] 8
  # DEBUG D#56ptD.0 => D#65ptD.0
  # DEBUG D#57ptD.0 => (long unsigned intD.14) D#59ptD.0
  # DEBUG __pD.36664 => _18
  # DEBUG thisD.36662 => D#56ptD.0
  # DEBUG __nD.36663 => D#57ptD.0
  # DEBUG D#55ptD.0 => D#57ptD.0
  # DEBUG D#54ptD.0 => D#56ptD.0
  if (_18 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_46 = PHI <.MEM_3(4), .MEM_12(6)>
  # PT = nonlocal escaped 
  # __tmp_45 = PHI <__tmp_8(4), __tmp_11(6)>
  # DEBUG __curD.36307 => __tmp_45
  # DEBUG __tmpD.36308 => __tmp_45
  # VUSE <.MEM_46>
  # PT = nonlocal escaped 
  __tmp_11 = __tmp_45->D.35073._M_nextD.14415;
  # DEBUG __curD.36307 => __tmp_11
  # DEBUG D#76ptD.0 => &__tmp_45->_M_dataD.35072
  # DEBUG __rD.36272 => D#76ptD.0
  # DEBUG D#75ptD.0 => D#78ptD.0
  # DEBUG thisD.36271 => D#75ptD.0
  # DEBUG D#74ptD.0 => D#75ptD.0
  # DEBUG thisD.36258 => D#74ptD.0
  # DEBUG thisD.36250 => NULL
  # DEBUG D.36251 => NULL
  # DEBUG thisD.36248 => NULL
  # DEBUG thisD.36270 => D#17ptD.0
  # DEBUG __pD.36269 => D#18ptD.0
  # DEBUG thisD.36282 => NULL
  # DEBUG thisD.36268 => NULL
  # DEBUG thisD.36310 => D#78ptD.0
  # DEBUG __pD.36309 => __tmp_45
  # DEBUG D#35ptD.0 => &D#78ptD.0->_M_implD.34096
  # DEBUG D#33ptD.0 => D#35ptD.0
  # DEBUG D#34ptD.0 => 1
  # DEBUG __pD.36313 => __tmp_45
  # DEBUG thisD.36311 => D#33ptD.0
  # DEBUG D.36312 => D#34ptD.0
  # .MEM_12 = VDEF <.MEM_46>
  # USE = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  # CLB = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  _ZdlPvD.2766 (__tmp_45);
  # DEBUG __curD.36307 => __tmp_11
  if (__tmp_11 == _47)
    goto <bb 3>;
  else
    goto <bb 6>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       3 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#53ptD.0 => &D#54ptD.0->_M_implD.27202
  # DEBUG D#51ptD.0 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#55ptD.0
  # DEBUG __pD.36668 => _18
  # DEBUG __aD.36666 => D#51ptD.0
  # DEBUG __nD.36667 => D#52ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG __pD.36671 => _18
  # DEBUG thisD.36669 => D#47ptD.0
  # DEBUG D.36670 => D#48ptD.0
  # .MEM_26 = VDEF <.MEM_25>
  # USE = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  # CLB = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  _ZdlPvD.2766 (_18);
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       3 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_6 = PHI <.MEM_25(3), .MEM_26(7)>
  # DEBUG D#58ptD.0 => &D#65ptD.0->_M_implD.27202
  # DEBUG thisD.36672 => D#58ptD.0
  # DEBUG thisD.36673 => D#58ptD.0
  # DEBUG thisD.36674 => D#58ptD.0
  # .MEM_31 = VDEF <.MEM_6>
  MEM[(struct  &)this_2(D) + 72] ={v} {CLOBBER};
  # DEBUG D#69ptD.0 => &D#119ptD.0->_fullnameD.26966
  # DEBUG thisD.36675 => D#69ptD.0
  # DEBUG thisD.36676 => D#69ptD.0
  # DEBUG thisD.36685 => D#69ptD.0
  # VUSE <.MEM_31>
  # PT = nonlocal escaped 
  _19 = MEM[(charD.10 * *)this_2(D) + 40B];
  # DEBUG D#1ptD.0 => D#69ptD.0
  # DEBUG thisD.35792 => D#1ptD.0
  # DEBUG thisD.36686 => D#69ptD.0
  # PT = nonlocal 
  _20 = &MEM[(const struct basic_stringD.2844 *)this_2(D) + 40B].D.11539._M_local_bufD.11541;
  if (_19 != _20)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#45ptD.0 => MEM[(struct basic_stringD.2844 *)D#69ptD.0].D.11539._M_allocated_capacityD.11542
  # DEBUG D#44ptD.0 => D#45ptD.0
  # DEBUG thisD.36678 => D#69ptD.0
  # DEBUG __sizeD.36677 => D#44ptD.0
  # DEBUG D#43ptD.0 => D#44ptD.0
  # DEBUG D#1ptD.0 => D#69ptD.0
  # DEBUG thisD.36060 => D#1ptD.0
  # DEBUG thisD.36061 => D#69ptD.0
  # DEBUG D#42ptD.0 => &MEM[(struct basic_stringD.2844 *)D#69ptD.0]._M_dataplusD.11519
  # DEBUG D#40ptD.0 => D#42ptD.0
  # DEBUG D#41ptD.0 => D#43ptD.0 + 1
  # DEBUG __pD.36681 => _19
  # DEBUG __aD.36679 => D#40ptD.0
  # DEBUG __nD.36680 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#36ptD.0 => D#38ptD.0
  # DEBUG D#37ptD.0 => D#39ptD.0
  # DEBUG __pD.36684 => _19
  # DEBUG thisD.36682 => D#36ptD.0
  # DEBUG D.36683 => D#37ptD.0
  # .MEM_32 = VDEF <.MEM_31>
  # USE = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  # CLB = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  _ZdlPvD.2766 (_19);
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_23 = PHI <.MEM_31(8), .MEM_32(9)>
  # DEBUG D#46ptD.0 => &MEM[(struct basic_stringD.2844 *)D#69ptD.0]._M_dataplusD.11519
  # DEBUG thisD.36687 => D#46ptD.0
  # DEBUG thisD.36688 => D#46ptD.0
  # DEBUG thisD.36689 => D#46ptD.0
  # .MEM_36 = VDEF <.MEM_23>
  MEM[(struct  &)this_2(D) + 40] ={v} {CLOBBER};
  # DEBUG D#68ptD.0 => &D#119ptD.0->_nameD.26965
  # DEBUG thisD.36690 => D#68ptD.0
  # DEBUG thisD.36691 => D#68ptD.0
  # DEBUG thisD.36700 => D#68ptD.0
  # VUSE <.MEM_36>
  # PT = nonlocal escaped 
  _21 = MEM[(charD.10 * *)this_2(D) + 8B];
  # DEBUG D#1ptD.0 => D#68ptD.0
  # DEBUG thisD.35792 => D#1ptD.0
  # DEBUG thisD.36701 => D#68ptD.0
  # PT = nonlocal 
  _22 = &MEM[(const struct basic_stringD.2844 *)this_2(D) + 8B].D.11539._M_local_bufD.11541;
  if (_21 != _22)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 705, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#45ptD.0 => MEM[(struct basic_stringD.2844 *)D#68ptD.0].D.11539._M_allocated_capacityD.11542
  # DEBUG D#44ptD.0 => D#45ptD.0
  # DEBUG thisD.36693 => D#68ptD.0
  # DEBUG __sizeD.36692 => D#44ptD.0
  # DEBUG D#43ptD.0 => D#44ptD.0
  # DEBUG D#1ptD.0 => D#68ptD.0
  # DEBUG thisD.36060 => D#1ptD.0
  # DEBUG thisD.36061 => D#68ptD.0
  # DEBUG D#42ptD.0 => &MEM[(struct basic_stringD.2844 *)D#68ptD.0]._M_dataplusD.11519
  # DEBUG D#40ptD.0 => D#42ptD.0
  # DEBUG D#41ptD.0 => D#43ptD.0 + 1
  # DEBUG __pD.36696 => _21
  # DEBUG __aD.36694 => D#40ptD.0
  # DEBUG __nD.36695 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#36ptD.0 => D#38ptD.0
  # DEBUG D#37ptD.0 => D#39ptD.0
  # DEBUG __pD.36699 => _21
  # DEBUG thisD.36697 => D#36ptD.0
  # DEBUG D.36698 => D#37ptD.0
  # .MEM_37 = VDEF <.MEM_36>
  # USE = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  # CLB = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  _ZdlPvD.2766 (_21);
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 11, next block 1, flags: (NEW, REACHABLE)
;;    pred:       10 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_24 = PHI <.MEM_36(10), .MEM_37(11)>
  # DEBUG D#46ptD.0 => &MEM[(struct basic_stringD.2844 *)D#68ptD.0]._M_dataplusD.11519
  # DEBUG thisD.36702 => D#46ptD.0
  # DEBUG thisD.36703 => D#46ptD.0
  # DEBUG thisD.36704 => D#46ptD.0
  # .MEM_7 = VDEF <.MEM_24>
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  # VUSE <.MEM_7>
  return;
;;    succ:       EXIT [100.0%] 

}



Updating SSA:
Registering new PHI nodes in block #5
Updating SSA information for statement operator delete (__tmp_45);
Registering new PHI nodes in block #6
Registering new PHI nodes in block #13

DFA Statistics for PriorityArbiter::~PriorityArbiter()

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             46        368b
DEF operands                              8         64b
VUSE operands                            16        128b
VDEF operands                            10         80b
PHI nodes                                 7        728b
PHI arguments                            13        624b
---------------------------------------------------------
Total memory used by DFA/SSA data                 1992b
---------------------------------------------------------

Average number of arguments per PHI node: 1.9 (max: 2)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_44 -> { .MEM_12 }
Incremental SSA update started at block: 5
Number of blocks in CFG: 14
Number of blocks to update: 3 ( 21%)
Affected blocks: 5 6 13


Creating dr for this_2(D)->D.34729._vptr.Module
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *this_2(D)
	Access function 0: 0
	Access function 1: 0
Creating dr for MEM[(struct _List_base *)this_2(D) + 104B]._M_impl._M_node.D.14630._M_next
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 104
	step: 0
	aligned to: 256
	base_object: MEM[(struct _List_base *)this_2(D) + 104B]
	Access function 0: 0
	Access function 1: 0
	Access function 2: 0
	Access function 3: 0
Creating dr for __tmp_45->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_45
	Access function 0: 0
	Access function 1: 0
Creating dr for __tmp_45->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_45
	Access function 0: 0
	Access function 1: 0
Creating dr for __tmp_45->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_45
	Access function 0: 0
	Access function 1: 0
Creating dr for __tmp_45->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_45
	Access function 0: 0
	Access function 1: 0
Creating dr for __tmp_45->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_45
	Access function 0: 0
	Access function 1: 0
Creating dr for __tmp_45->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_45
	Access function 0: 0
	Access function 1: 0
Creating dr for __tmp_45->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_45
	Access function 0: 0
	Access function 1: 0
Creating dr for __tmp_45->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_45
	Access function 0: 0
	Access function 1: 0

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:14, LOOPS:1, CONDITIONS:5, STMTS:180)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # .MEM_3 = VDEF <.MEM_1(D)>
    this_2(D)->D.34729._vptr.Module = &MEM[(void *)&_ZTV15PriorityArbiter + 16B];
    # DEBUG D#79 => &this_2(D)->_requests
    # DEBUG this => D#79
    # DEBUG D#78 => &D#79->D.34669
    # DEBUG this => D#78
    # DEBUG this => D#78
    # VUSE <.MEM_3>
    __tmp_8 = MEM[(struct _List_base *)this_2(D) + 104B]._M_impl._M_node.D.14630._M_next;
    # DEBUG __cur => __tmp_8
    # DEBUG __cur => __tmp_8
    _47 = &MEM[(struct _List_base *)this_2(D) + 104B]._M_impl._M_node.D.14630;
    if (__tmp_8 == _47)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 bb_13 }, succs = {bb_7 bb_8 })
  {
    <bb 3>:
    # .MEM_9 = PHI <.MEM_3(2), .MEM_44(13)>
    # DEBUG D#77 => &D#78->_M_impl
    # DEBUG this => D#77
    # DEBUG this => D#77
    # DEBUG this => D#77
    # .MEM_17 = VDEF <.MEM_9>
    MEM[(struct  &)this_2(D) + 104] ={v} {CLOBBER};
    # DEBUG D#119 => &this_2(D)->D.34729
    # DEBUG this => D#119
    # .MEM_25 = VDEF <.MEM_17>
    MEM[(struct Module *)this_2(D)]._vptr.Module = &MEM[(void *)&_ZTV6Module + 16B];
    # DEBUG D#70 => &D#119->_children
    # DEBUG this => D#70
    # DEBUG D#64 => &D#70->D.27711
    # DEBUG this => D#64
    # DEBUG D#67 => D#70->D.27711._M_impl._M_finish
    # DEBUG D#66 => D#70->D.27711._M_impl._M_start
    # DEBUG D#30 => D#66
    # DEBUG D#31 => D#67
    # DEBUG __first => D#30
    # DEBUG __last => D#31
    # DEBUG D.36175 => D#32
    # DEBUG D#29 => D#31
    # DEBUG D#28 => D#30
    # DEBUG D#26 => D#28
    # DEBUG D#27 => D#29
    # DEBUG __first => D#26
    # DEBUG __last => D#27
    # DEBUG D#25 => D#27
    # DEBUG D#24 => D#26
    # DEBUG D#22 => D#24
    # DEBUG D#23 => D#25
    # DEBUG D.35980 => D#22
    # DEBUG D.35979 => D#23
    # DEBUG D#65 => &D#70->D.27711
    # DEBUG this => D#65
    # DEBUG D#63 => D#65->_M_impl._M_end_of_storage
    # DEBUG D#62 => (long int) D#63
    # VUSE <.MEM_25>
    _18 = MEM[(struct _Vector_base *)this_2(D) + 72B]._M_impl._M_start;
    # DEBUG D#61 => (long int) _18
    # DEBUG D#60 => D#62 - D#61
    # DEBUG D#59 => D#60 /[ex] 8
    # DEBUG D#56 => D#65
    # DEBUG D#57 => (long unsigned int) D#59
    # DEBUG __p => _18
    # DEBUG this => D#56
    # DEBUG __n => D#57
    # DEBUG D#55 => D#57
    # DEBUG D#54 => D#56
    if (_18 != 0B)
      goto <bb 7>;
    else
      goto <bb 8>;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 })
  {
    <bb 4>:

  }
  bb_13 (preds = {bb_5 }, succs = {bb_3 })
  {
    <bb 13>:
    # .MEM_44 = PHI <.MEM_12(5)>
    goto <bb 3>;

  }
  bb_7 (preds = {bb_3 }, succs = {bb_8 })
  {
    <bb 7>:
    # DEBUG D#53 => &D#54->_M_impl
    # DEBUG D#51 => D#53
    # DEBUG D#52 => D#55
    # DEBUG __p => _18
    # DEBUG __a => D#51
    # DEBUG __n => D#52
    # DEBUG D#50 => D#52
    # DEBUG D#49 => D#51
    # DEBUG D#47 => D#49
    # DEBUG D#48 => D#50
    # DEBUG __p => _18
    # DEBUG this => D#47
    # DEBUG D.36670 => D#48
    # .MEM_26 = VDEF <.MEM_25>
    operator delete (_18);

  }
  bb_8 (preds = {bb_3 bb_7 }, succs = {bb_9 bb_10 })
  {
    <bb 8>:
    # .MEM_6 = PHI <.MEM_25(3), .MEM_26(7)>
    # DEBUG D#58 => &D#65->_M_impl
    # DEBUG this => D#58
    # DEBUG this => D#58
    # DEBUG this => D#58
    # .MEM_31 = VDEF <.MEM_6>
    MEM[(struct  &)this_2(D) + 72] ={v} {CLOBBER};
    # DEBUG D#69 => &D#119->_fullname
    # DEBUG this => D#69
    # DEBUG this => D#69
    # DEBUG this => D#69
    # VUSE <.MEM_31>
    _19 = MEM[(char * *)this_2(D) + 40B];
    # DEBUG D#1 => D#69
    # DEBUG this => D#1
    # DEBUG this => D#69
    _20 = &MEM[(const struct basic_string *)this_2(D) + 40B].D.11539._M_local_buf;
    if (_19 != _20)
      goto <bb 9>;
    else
      goto <bb 10>;

  }
  bb_9 (preds = {bb_8 }, succs = {bb_10 })
  {
    <bb 9>:
    # DEBUG D#45 => MEM[(struct basic_string *)D#69].D.11539._M_allocated_capacity
    # DEBUG D#44 => D#45
    # DEBUG this => D#69
    # DEBUG __size => D#44
    # DEBUG D#43 => D#44
    # DEBUG D#1 => D#69
    # DEBUG this => D#1
    # DEBUG this => D#69
    # DEBUG D#42 => &MEM[(struct basic_string *)D#69]._M_dataplus
    # DEBUG D#40 => D#42
    # DEBUG D#41 => D#43 + 1
    # DEBUG __p => _19
    # DEBUG __a => D#40
    # DEBUG __n => D#41
    # DEBUG D#39 => D#41
    # DEBUG D#38 => D#40
    # DEBUG D#36 => D#38
    # DEBUG D#37 => D#39
    # DEBUG __p => _19
    # DEBUG this => D#36
    # DEBUG D.36683 => D#37
    # .MEM_32 = VDEF <.MEM_31>
    operator delete (_19);

  }
  bb_10 (preds = {bb_8 bb_9 }, succs = {bb_11 bb_12 })
  {
    <bb 10>:
    # .MEM_23 = PHI <.MEM_31(8), .MEM_32(9)>
    # DEBUG D#46 => &MEM[(struct basic_string *)D#69]._M_dataplus
    # DEBUG this => D#46
    # DEBUG this => D#46
    # DEBUG this => D#46
    # .MEM_36 = VDEF <.MEM_23>
    MEM[(struct  &)this_2(D) + 40] ={v} {CLOBBER};
    # DEBUG D#68 => &D#119->_name
    # DEBUG this => D#68
    # DEBUG this => D#68
    # DEBUG this => D#68
    # VUSE <.MEM_36>
    _21 = MEM[(char * *)this_2(D) + 8B];
    # DEBUG D#1 => D#68
    # DEBUG this => D#1
    # DEBUG this => D#68
    _22 = &MEM[(const struct basic_string *)this_2(D) + 8B].D.11539._M_local_buf;
    if (_21 != _22)
      goto <bb 11>;
    else
      goto <bb 12>;

  }
  bb_11 (preds = {bb_10 }, succs = {bb_12 })
  {
    <bb 11>:
    # DEBUG D#45 => MEM[(struct basic_string *)D#68].D.11539._M_allocated_capacity
    # DEBUG D#44 => D#45
    # DEBUG this => D#68
    # DEBUG __size => D#44
    # DEBUG D#43 => D#44
    # DEBUG D#1 => D#68
    # DEBUG this => D#1
    # DEBUG this => D#68
    # DEBUG D#42 => &MEM[(struct basic_string *)D#68]._M_dataplus
    # DEBUG D#40 => D#42
    # DEBUG D#41 => D#43 + 1
    # DEBUG __p => _21
    # DEBUG __a => D#40
    # DEBUG __n => D#41
    # DEBUG D#39 => D#41
    # DEBUG D#38 => D#40
    # DEBUG D#36 => D#38
    # DEBUG D#37 => D#39
    # DEBUG __p => _21
    # DEBUG this => D#36
    # DEBUG D.36698 => D#37
    # .MEM_37 = VDEF <.MEM_36>
    operator delete (_21);

  }
  bb_12 (preds = {bb_10 bb_11 }, succs = {bb_1 })
  {
    <bb 12>:
    # .MEM_24 = PHI <.MEM_36(10), .MEM_37(11)>
    # DEBUG D#46 => &MEM[(struct basic_string *)D#68]._M_dataplus
    # DEBUG this => D#46
    # DEBUG this => D#46
    # DEBUG this => D#46
    # .MEM_7 = VDEF <.MEM_24>
    MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
    # VUSE <.MEM_7>
    return;

  }
  loop_1 (header = 5, latch = 6, niter = )
  {
    bb_5 (preds = {bb_4 bb_6 }, succs = {bb_13 bb_6 })
    {
      <bb 5>:
      # .MEM_46 = PHI <.MEM_3(4), .MEM_12(6)>
      # __tmp_45 = PHI <__tmp_8(4), __tmp_11(6)>
      # DEBUG __cur => __tmp_45
      # DEBUG __tmp => __tmp_45
      # VUSE <.MEM_46>
      __tmp_11 = __tmp_45->D.35073._M_next;
      # DEBUG __cur => __tmp_11
      # DEBUG D#76 => &__tmp_45->_M_data
      # DEBUG __r => D#76
      # DEBUG D#75 => D#78
      # DEBUG this => D#75
      # DEBUG D#74 => D#75
      # DEBUG this => D#74
      # DEBUG this => NULL
      # DEBUG D.36251 => NULL
      # DEBUG this => NULL
      # DEBUG this => D#17
      # DEBUG __p => D#18
      # DEBUG this => NULL
      # DEBUG this => NULL
      # DEBUG this => D#78
      # DEBUG __p => __tmp_45
      # DEBUG D#35 => &D#78->_M_impl
      # DEBUG D#33 => D#35
      # DEBUG D#34 => 1
      # DEBUG __p => __tmp_45
      # DEBUG this => D#33
      # DEBUG D.36312 => D#34
      # .MEM_12 = VDEF <.MEM_46>
      operator delete (__tmp_45);
      # DEBUG __cur => __tmp_11
      if (__tmp_11 == _47)
        goto <bb 13>;
      else
        goto <bb 6>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_5 })
    {
      <bb 6>:
      goto <bb 5>;

    }
  }
}

Pass statistics:
----------------

PriorityArbiter::~PriorityArbiter() (struct PriorityArbiterD.33914 * const thisD.34715)
{
  struct _NodeD.35143 * __tmpD.36308;
  struct ModuleD.26963 * * _18;
  charD.10 * const _19;
  const charD.10 * _20;
  charD.10 * const _21;
  const charD.10 * _22;
  struct _List_node_baseD.14413 * _47;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_3 = VDEF <.MEM_1(D)>
  this_2(D)->D.34729._vptr.ModuleD.27758 = &MEM[(voidD.45 *)&_ZTV15PriorityArbiterD.34735 + 16B];
  # DEBUG D#79ptD.0 => &this_2(D)->_requestsD.34671
  # DEBUG thisD.36303 => D#79ptD.0
  # DEBUG D#78ptD.0 => &D#79ptD.0->D.34669
  # DEBUG thisD.36304 => D#78ptD.0
  # DEBUG thisD.36305 => D#78ptD.0
  # VUSE <.MEM_3>
  # PT = nonlocal escaped 
  __tmp_8 = MEM[(struct _List_baseD.33925 *)this_2(D) + 104B]._M_implD.34096._M_nodeD.34247.D.14630._M_nextD.14415;
  # DEBUG __curD.36307 => __tmp_8
  # DEBUG __curD.36307 => __tmp_8
  # PT = nonlocal 
  _47 = &MEM[(struct _List_baseD.33925 *)this_2(D) + 104B]._M_implD.34096._M_nodeD.34247.D.14630;
  if (__tmp_8 == _47)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU)
  # .MEM_9 = PHI <.MEM_3(2), .MEM_44(13)>
  # DEBUG D#77ptD.0 => &D#78ptD.0->_M_implD.34096
  # DEBUG thisD.36314 => D#77ptD.0
  # DEBUG thisD.36315 => D#77ptD.0
  # DEBUG thisD.36316 => D#77ptD.0
  # .MEM_17 = VDEF <.MEM_9>
  MEM[(struct  &)this_2(D) + 104] ={v} {CLOBBER};
  # DEBUG D#119ptD.0 => &this_2(D)->D.34729
  # DEBUG thisD.36659 => D#119ptD.0
  # .MEM_25 = VDEF <.MEM_17>
  MEM[(struct ModuleD.26963 *)this_2(D)]._vptr.ModuleD.27758 = &MEM[(voidD.45 *)&_ZTV6ModuleD.27763 + 16B];
  # DEBUG D#70ptD.0 => &D#119ptD.0->_childrenD.27713
  # DEBUG thisD.36660 => D#70ptD.0
  # DEBUG D#64ptD.0 => &D#70ptD.0->D.27711
  # DEBUG thisD.36178 => D#64ptD.0
  # DEBUG D#67ptD.0 => D#70ptD.0->D.27711._M_implD.27202._M_finishD.27205
  # DEBUG D#66ptD.0 => D#70ptD.0->D.27711._M_implD.27202._M_startD.27204
  # DEBUG D#30ptD.0 => D#66ptD.0
  # DEBUG D#31ptD.0 => D#67ptD.0
  # DEBUG __firstD.36177 => D#30ptD.0
  # DEBUG __lastD.36176 => D#31ptD.0
  # DEBUG D.36175 => D#32ptD.0
  # DEBUG D#29ptD.0 => D#31ptD.0
  # DEBUG D#28ptD.0 => D#30ptD.0
  # DEBUG D#26ptD.0 => D#28ptD.0
  # DEBUG D#27ptD.0 => D#29ptD.0
  # DEBUG __firstD.35991 => D#26ptD.0
  # DEBUG __lastD.35990 => D#27ptD.0
  # DEBUG D#25ptD.0 => D#27ptD.0
  # DEBUG D#24ptD.0 => D#26ptD.0
  # DEBUG D#22ptD.0 => D#24ptD.0
  # DEBUG D#23ptD.0 => D#25ptD.0
  # DEBUG D.35980 => D#22ptD.0
  # DEBUG D.35979 => D#23ptD.0
  # DEBUG D#65ptD.0 => &D#70ptD.0->D.27711
  # DEBUG thisD.36661 => D#65ptD.0
  # DEBUG D#63ptD.0 => D#65ptD.0->_M_implD.27202._M_end_of_storageD.27206
  # DEBUG D#62ptD.0 => (long intD.12) D#63ptD.0
  # VUSE <.MEM_25>
  # PT = nonlocal escaped 
  _18 = MEM[(struct _Vector_baseD.26969 *)this_2(D) + 72B]._M_implD.27202._M_startD.27204;
  # DEBUG D#61ptD.0 => (long intD.12) _18
  # DEBUG D#60ptD.0 => D#62ptD.0 - D#61ptD.0
  # DEBUG D#59ptD.0 => D#60ptD.0 /[ex] 8
  # DEBUG D#56ptD.0 => D#65ptD.0
  # DEBUG D#57ptD.0 => (long unsigned intD.14) D#59ptD.0
  # DEBUG __pD.36664 => _18
  # DEBUG thisD.36662 => D#56ptD.0
  # DEBUG __nD.36663 => D#57ptD.0
  # DEBUG D#55ptD.0 => D#57ptD.0
  # DEBUG D#54ptD.0 => D#56ptD.0
  if (_18 != 0B)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 13, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_46 = PHI <.MEM_3(4), .MEM_12(6)>
  # PT = nonlocal escaped 
  # __tmp_45 = PHI <__tmp_8(4), __tmp_11(6)>
  # DEBUG __curD.36307 => __tmp_45
  # DEBUG __tmpD.36308 => __tmp_45
  # VUSE <.MEM_46>
  # PT = nonlocal escaped 
  __tmp_11 = __tmp_45->D.35073._M_nextD.14415;
  # DEBUG __curD.36307 => __tmp_11
  # DEBUG D#76ptD.0 => &__tmp_45->_M_dataD.35072
  # DEBUG __rD.36272 => D#76ptD.0
  # DEBUG D#75ptD.0 => D#78ptD.0
  # DEBUG thisD.36271 => D#75ptD.0
  # DEBUG D#74ptD.0 => D#75ptD.0
  # DEBUG thisD.36258 => D#74ptD.0
  # DEBUG thisD.36250 => NULL
  # DEBUG D.36251 => NULL
  # DEBUG thisD.36248 => NULL
  # DEBUG thisD.36270 => D#17ptD.0
  # DEBUG __pD.36269 => D#18ptD.0
  # DEBUG thisD.36282 => NULL
  # DEBUG thisD.36268 => NULL
  # DEBUG thisD.36310 => D#78ptD.0
  # DEBUG __pD.36309 => __tmp_45
  # DEBUG D#35ptD.0 => &D#78ptD.0->_M_implD.34096
  # DEBUG D#33ptD.0 => D#35ptD.0
  # DEBUG D#34ptD.0 => 1
  # DEBUG __pD.36313 => __tmp_45
  # DEBUG thisD.36311 => D#33ptD.0
  # DEBUG D.36312 => D#34ptD.0
  # .MEM_12 = VDEF <.MEM_46>
  # USE = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  # CLB = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  _ZdlPvD.2766 (__tmp_45);
  # DEBUG __curD.36307 => __tmp_11
  if (__tmp_11 == _47)
    goto <bb 13>;
  else
    goto <bb 6>;
;;    succ:       13 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 5, next block 6, flags: (NEW)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_44 = PHI <.MEM_12(5)>
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU)

;;   basic block 6, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 13, next block 7, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       3 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#53ptD.0 => &D#54ptD.0->_M_implD.27202
  # DEBUG D#51ptD.0 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#55ptD.0
  # DEBUG __pD.36668 => _18
  # DEBUG __aD.36666 => D#51ptD.0
  # DEBUG __nD.36667 => D#52ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG __pD.36671 => _18
  # DEBUG thisD.36669 => D#47ptD.0
  # DEBUG D.36670 => D#48ptD.0
  # .MEM_26 = VDEF <.MEM_25>
  # USE = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  # CLB = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  _ZdlPvD.2766 (_18);
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       3 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_6 = PHI <.MEM_25(3), .MEM_26(7)>
  # DEBUG D#58ptD.0 => &D#65ptD.0->_M_implD.27202
  # DEBUG thisD.36672 => D#58ptD.0
  # DEBUG thisD.36673 => D#58ptD.0
  # DEBUG thisD.36674 => D#58ptD.0
  # .MEM_31 = VDEF <.MEM_6>
  MEM[(struct  &)this_2(D) + 72] ={v} {CLOBBER};
  # DEBUG D#69ptD.0 => &D#119ptD.0->_fullnameD.26966
  # DEBUG thisD.36675 => D#69ptD.0
  # DEBUG thisD.36676 => D#69ptD.0
  # DEBUG thisD.36685 => D#69ptD.0
  # VUSE <.MEM_31>
  # PT = nonlocal escaped 
  _19 = MEM[(charD.10 * *)this_2(D) + 40B];
  # DEBUG D#1ptD.0 => D#69ptD.0
  # DEBUG thisD.35792 => D#1ptD.0
  # DEBUG thisD.36686 => D#69ptD.0
  # PT = nonlocal 
  _20 = &MEM[(const struct basic_stringD.2844 *)this_2(D) + 40B].D.11539._M_local_bufD.11541;
  if (_19 != _20)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#45ptD.0 => MEM[(struct basic_stringD.2844 *)D#69ptD.0].D.11539._M_allocated_capacityD.11542
  # DEBUG D#44ptD.0 => D#45ptD.0
  # DEBUG thisD.36678 => D#69ptD.0
  # DEBUG __sizeD.36677 => D#44ptD.0
  # DEBUG D#43ptD.0 => D#44ptD.0
  # DEBUG D#1ptD.0 => D#69ptD.0
  # DEBUG thisD.36060 => D#1ptD.0
  # DEBUG thisD.36061 => D#69ptD.0
  # DEBUG D#42ptD.0 => &MEM[(struct basic_stringD.2844 *)D#69ptD.0]._M_dataplusD.11519
  # DEBUG D#40ptD.0 => D#42ptD.0
  # DEBUG D#41ptD.0 => D#43ptD.0 + 1
  # DEBUG __pD.36681 => _19
  # DEBUG __aD.36679 => D#40ptD.0
  # DEBUG __nD.36680 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#36ptD.0 => D#38ptD.0
  # DEBUG D#37ptD.0 => D#39ptD.0
  # DEBUG __pD.36684 => _19
  # DEBUG thisD.36682 => D#36ptD.0
  # DEBUG D.36683 => D#37ptD.0
  # .MEM_32 = VDEF <.MEM_31>
  # USE = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  # CLB = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  _ZdlPvD.2766 (_19);
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_23 = PHI <.MEM_31(8), .MEM_32(9)>
  # DEBUG D#46ptD.0 => &MEM[(struct basic_stringD.2844 *)D#69ptD.0]._M_dataplusD.11519
  # DEBUG thisD.36687 => D#46ptD.0
  # DEBUG thisD.36688 => D#46ptD.0
  # DEBUG thisD.36689 => D#46ptD.0
  # .MEM_36 = VDEF <.MEM_23>
  MEM[(struct  &)this_2(D) + 40] ={v} {CLOBBER};
  # DEBUG D#68ptD.0 => &D#119ptD.0->_nameD.26965
  # DEBUG thisD.36690 => D#68ptD.0
  # DEBUG thisD.36691 => D#68ptD.0
  # DEBUG thisD.36700 => D#68ptD.0
  # VUSE <.MEM_36>
  # PT = nonlocal escaped 
  _21 = MEM[(charD.10 * *)this_2(D) + 8B];
  # DEBUG D#1ptD.0 => D#68ptD.0
  # DEBUG thisD.35792 => D#1ptD.0
  # DEBUG thisD.36701 => D#68ptD.0
  # PT = nonlocal 
  _22 = &MEM[(const struct basic_stringD.2844 *)this_2(D) + 8B].D.11539._M_local_bufD.11541;
  if (_21 != _22)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 705, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#45ptD.0 => MEM[(struct basic_stringD.2844 *)D#68ptD.0].D.11539._M_allocated_capacityD.11542
  # DEBUG D#44ptD.0 => D#45ptD.0
  # DEBUG thisD.36693 => D#68ptD.0
  # DEBUG __sizeD.36692 => D#44ptD.0
  # DEBUG D#43ptD.0 => D#44ptD.0
  # DEBUG D#1ptD.0 => D#68ptD.0
  # DEBUG thisD.36060 => D#1ptD.0
  # DEBUG thisD.36061 => D#68ptD.0
  # DEBUG D#42ptD.0 => &MEM[(struct basic_stringD.2844 *)D#68ptD.0]._M_dataplusD.11519
  # DEBUG D#40ptD.0 => D#42ptD.0
  # DEBUG D#41ptD.0 => D#43ptD.0 + 1
  # DEBUG __pD.36696 => _21
  # DEBUG __aD.36694 => D#40ptD.0
  # DEBUG __nD.36695 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG D#36ptD.0 => D#38ptD.0
  # DEBUG D#37ptD.0 => D#39ptD.0
  # DEBUG __pD.36699 => _21
  # DEBUG thisD.36697 => D#36ptD.0
  # DEBUG D.36698 => D#37ptD.0
  # .MEM_37 = VDEF <.MEM_36>
  # USE = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  # CLB = nonlocal { D.27763 D.34735 } (nonlocal, escaped)
  _ZdlPvD.2766 (_21);
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 11, next block 1, flags: (NEW, REACHABLE)
;;    pred:       10 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_24 = PHI <.MEM_36(10), .MEM_37(11)>
  # DEBUG D#46ptD.0 => &MEM[(struct basic_stringD.2844 *)D#68ptD.0]._M_dataplusD.11519
  # DEBUG thisD.36702 => D#46ptD.0
  # DEBUG thisD.36703 => D#46ptD.0
  # DEBUG thisD.36704 => D#46ptD.0
  # .MEM_7 = VDEF <.MEM_24>
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  # VUSE <.MEM_7>
  return;
;;    succ:       EXIT [100.0%] 

}



;; Function void PriorityArbiter::Clear() (_ZN15PriorityArbiter5ClearEv, funcdef_no=1743, decl_uid=34679, cgraph_uid=415, symbol_order=416)


Pass statistics:
----------------

void PriorityArbiter::Clear() (struct PriorityArbiterD.33914 * const thisD.34772)
{
  struct _NodeD.35143 * __tmpD.36337;
  struct _List_node_baseD.14413 * _15;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#82ptD.0 => &this_1(D)->_requestsD.34671
  # DEBUG thisD.36333 => D#82ptD.0
  # DEBUG D#80ptD.0 => &D#82ptD.0->D.34669
  # DEBUG thisD.36334 => D#80ptD.0
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __tmp_4 = MEM[(struct _List_baseD.33925 *)this_1(D) + 104B]._M_implD.34096._M_nodeD.34247.D.14630._M_nextD.14415;
  # DEBUG __curD.36336 => __tmp_4
  # DEBUG __curD.36336 => __tmp_4
  # PT = nonlocal 
  _15 = &MEM[(struct _List_baseD.33925 *)this_1(D) + 104B]._M_implD.34096._M_nodeD.34247.D.14630;
  if (__tmp_4 == _15)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_5 = PHI <.MEM_2(D)(2), .MEM_8(5)>
  # DEBUG D#81ptD.0 => &D#82ptD.0->D.34669
  # DEBUG thisD.36343 => D#81ptD.0
  # .MEM_9 = VDEF <.MEM_5>
  MEM[(struct _List_baseD.33925 *)this_1(D) + 104B]._M_implD.34096._M_nodeD.34247.D.14630._M_nextD.14415 = _15;
  # .MEM_10 = VDEF <.MEM_9>
  MEM[(struct _List_baseD.33925 *)this_1(D) + 104B]._M_implD.34096._M_nodeD.34247.D.14630._M_prevD.14416 = _15;
  # DEBUG D#19ptD.0 => D#81ptD.0
  # DEBUG __nD.36345 => 0
  # DEBUG thisD.36344 => D#19ptD.0
  # .MEM_11 = VDEF <.MEM_10>
  MEM[(long unsigned intD.14 *)this_1(D) + 120B] = 0;
  # VUSE <.MEM_11>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_16 = PHI <.MEM_2(D)(4), .MEM_8(6)>
  # PT = nonlocal escaped 
  # __tmp_18 = PHI <__tmp_4(4), __tmp_7(6)>
  # DEBUG __curD.36336 => __tmp_18
  # DEBUG __tmpD.36337 => __tmp_18
  # VUSE <.MEM_16>
  # PT = nonlocal escaped 
  __tmp_7 = __tmp_18->D.35073._M_nextD.14415;
  # DEBUG __curD.36336 => __tmp_7
  # DEBUG D#76ptD.0 => &__tmp_18->_M_dataD.35072
  # DEBUG __rD.36272 => D#76ptD.0
  # DEBUG D#75ptD.0 => D#80ptD.0
  # DEBUG thisD.36271 => D#75ptD.0
  # DEBUG D#74ptD.0 => D#75ptD.0
  # DEBUG thisD.36258 => D#74ptD.0
  # DEBUG thisD.36250 => NULL
  # DEBUG D.36251 => NULL
  # DEBUG thisD.36248 => NULL
  # DEBUG thisD.36270 => D#17ptD.0
  # DEBUG __pD.36269 => D#18ptD.0
  # DEBUG thisD.36326 => NULL
  # DEBUG thisD.36268 => NULL
  # DEBUG thisD.36339 => D#80ptD.0
  # DEBUG __pD.36338 => __tmp_18
  # DEBUG D#35ptD.0 => &D#80ptD.0->_M_implD.34096
  # DEBUG D#33ptD.0 => D#35ptD.0
  # DEBUG D#34ptD.0 => 1
  # DEBUG __pD.36342 => __tmp_18
  # DEBUG thisD.36340 => D#33ptD.0
  # DEBUG D.36341 => D#34ptD.0
  # .MEM_8 = VDEF <.MEM_16>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZdlPvD.2766 (__tmp_18);
  # DEBUG __curD.36336 => __tmp_7
  if (__tmp_7 == _15)
    goto <bb 3>;
  else
    goto <bb 6>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 5, next block 1, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

}



Updating SSA:
Registering new PHI nodes in block #5
Updating SSA information for statement operator delete (__tmp_18);
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7

DFA Statistics for void PriorityArbiter::Clear()

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             23        184b
DEF operands                              3         24b
VUSE operands                             7         56b
VDEF operands                             4         32b
PHI nodes                                 4        416b
PHI arguments                             7        336b
---------------------------------------------------------
Total memory used by DFA/SSA data                 1048b
---------------------------------------------------------

Average number of arguments per PHI node: 1.8 (max: 2)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_13 -> { .MEM_8 }
Incremental SSA update started at block: 5
Number of blocks in CFG: 8
Number of blocks to update: 3 ( 38%)
Affected blocks: 5 6 7


Creating dr for MEM[(struct _List_base *)this_1(D) + 104B]._M_impl._M_node.D.14630._M_next
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 104
	step: 0
	aligned to: 256
	base_object: MEM[(struct _List_base *)this_1(D) + 104B]
	Access function 0: 0
	Access function 1: 0
	Access function 2: 0
	Access function 3: 0
Creating dr for __tmp_18->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_18
	Access function 0: 0
	Access function 1: 0
Creating dr for __tmp_18->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_18
	Access function 0: 0
	Access function 1: 0
Creating dr for __tmp_18->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_18
	Access function 0: 0
	Access function 1: 0
Creating dr for __tmp_18->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_18
	Access function 0: 0
	Access function 1: 0
Creating dr for __tmp_18->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_18
	Access function 0: 0
	Access function 1: 0
Creating dr for __tmp_18->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_18
	Access function 0: 0
	Access function 1: 0
Creating dr for __tmp_18->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_18
	Access function 0: 0
	Access function 1: 0
Creating dr for __tmp_18->D.35073._M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__tmp_18
	Access function 0: 0
	Access function 1: 0
Creating dr for MEM[(struct _List_base *)this_1(D) + 104B]._M_impl._M_node.D.14630._M_next
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 104
	step: 0
	aligned to: 256
	base_object: MEM[(struct _List_base *)this_1(D) + 104B]
	Access function 0: 0
	Access function 1: 0
	Access function 2: 0
	Access function 3: 0
Creating dr for MEM[(struct _List_base *)this_1(D) + 104B]._M_impl._M_node.D.14630._M_prev
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 112
	step: 0
	aligned to: 256
	base_object: MEM[(struct _List_base *)this_1(D) + 104B]
	Access function 0: 64
	Access function 1: 0
	Access function 2: 0
	Access function 3: 0
Creating dr for MEM[(long unsigned int *)this_1(D) + 120B]
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 120
	step: 0
	aligned to: 256
	base_object: MEM[(long unsigned int *)this_1(D) + 120B]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:9)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:9, LOOPS:1, CONDITIONS:2, STMTS:46)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # DEBUG D#82 => &this_1(D)->_requests
    # DEBUG this => D#82
    # DEBUG D#80 => &D#82->D.34669
    # DEBUG this => D#80
    # VUSE <.MEM_2(D)>
    __tmp_4 = MEM[(struct _List_base *)this_1(D) + 104B]._M_impl._M_node.D.14630._M_next;
    # DEBUG __cur => __tmp_4
    # DEBUG __cur => __tmp_4
    _15 = &MEM[(struct _List_base *)this_1(D) + 104B]._M_impl._M_node.D.14630;
    if (__tmp_4 == _15)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 bb_7 }, succs = {bb_8 })
  {
    <bb 3>:
    # .MEM_5 = PHI <.MEM_2(D)(2), .MEM_13(7)>

  }
  bb_8 (preds = {bb_3 }, succs = {bb_1 })
  {
    <bb 8>:
    # DEBUG D#81 => &D#82->D.34669
    # DEBUG this => D#81
    # .MEM_9 = VDEF <.MEM_5>
    MEM[(struct _List_base *)this_1(D) + 104B]._M_impl._M_node.D.14630._M_next = _15;
    # .MEM_10 = VDEF <.MEM_9>
    MEM[(struct _List_base *)this_1(D) + 104B]._M_impl._M_node.D.14630._M_prev = _15;
    # DEBUG D#19 => D#81
    # DEBUG __n => 0
    # DEBUG this => D#19
    # .MEM_11 = VDEF <.MEM_10>
    MEM[(long unsigned int *)this_1(D) + 120B] = 0;
    # VUSE <.MEM_11>
    return;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 })
  {
    <bb 4>:

  }
  bb_7 (preds = {bb_5 }, succs = {bb_3 })
  {
    <bb 7>:
    # .MEM_13 = PHI <.MEM_8(5)>
    goto <bb 3>;

  }
  loop_1 (header = 5, latch = 6, niter = )
  {
    bb_5 (preds = {bb_4 bb_6 }, succs = {bb_7 bb_6 })
    {
      <bb 5>:
      # .MEM_16 = PHI <.MEM_2(D)(4), .MEM_8(6)>
      # __tmp_18 = PHI <__tmp_4(4), __tmp_7(6)>
      # DEBUG __cur => __tmp_18
      # DEBUG __tmp => __tmp_18
      # VUSE <.MEM_16>
      __tmp_7 = __tmp_18->D.35073._M_next;
      # DEBUG __cur => __tmp_7
      # DEBUG D#76 => &__tmp_18->_M_data
      # DEBUG __r => D#76
      # DEBUG D#75 => D#80
      # DEBUG this => D#75
      # DEBUG D#74 => D#75
      # DEBUG this => D#74
      # DEBUG this => NULL
      # DEBUG D.36251 => NULL
      # DEBUG this => NULL
      # DEBUG this => D#17
      # DEBUG __p => D#18
      # DEBUG this => NULL
      # DEBUG this => NULL
      # DEBUG this => D#80
      # DEBUG __p => __tmp_18
      # DEBUG D#35 => &D#80->_M_impl
      # DEBUG D#33 => D#35
      # DEBUG D#34 => 1
      # DEBUG __p => __tmp_18
      # DEBUG this => D#33
      # DEBUG D.36341 => D#34
      # .MEM_8 = VDEF <.MEM_16>
      operator delete (__tmp_18);
      # DEBUG __cur => __tmp_7
      if (__tmp_7 == _15)
        goto <bb 7>;
      else
        goto <bb 6>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_5 })
    {
      <bb 6>:
      goto <bb 5>;

    }
  }
}

Pass statistics:
----------------

void PriorityArbiter::Clear() (struct PriorityArbiterD.33914 * const thisD.34772)
{
  struct _NodeD.35143 * __tmpD.36337;
  struct _List_node_baseD.14413 * _15;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#82ptD.0 => &this_1(D)->_requestsD.34671
  # DEBUG thisD.36333 => D#82ptD.0
  # DEBUG D#80ptD.0 => &D#82ptD.0->D.34669
  # DEBUG thisD.36334 => D#80ptD.0
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __tmp_4 = MEM[(struct _List_baseD.33925 *)this_1(D) + 104B]._M_implD.34096._M_nodeD.34247.D.14630._M_nextD.14415;
  # DEBUG __curD.36336 => __tmp_4
  # DEBUG __curD.36336 => __tmp_4
  # PT = nonlocal 
  _15 = &MEM[(struct _List_baseD.33925 *)this_1(D) + 104B]._M_implD.34096._M_nodeD.34247.D.14630;
  if (__tmp_4 == _15)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 8, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU)
  # .MEM_5 = PHI <.MEM_2(D)(2), .MEM_13(7)>
;;    succ:       8 [100.0%]  (FALLTHRU)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 3, next block 4, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU)
  # DEBUG D#81ptD.0 => &D#82ptD.0->D.34669
  # DEBUG thisD.36343 => D#81ptD.0
  # .MEM_9 = VDEF <.MEM_5>
  MEM[(struct _List_baseD.33925 *)this_1(D) + 104B]._M_implD.34096._M_nodeD.34247.D.14630._M_nextD.14415 = _15;
  # .MEM_10 = VDEF <.MEM_9>
  MEM[(struct _List_baseD.33925 *)this_1(D) + 104B]._M_implD.34096._M_nodeD.34247.D.14630._M_prevD.14416 = _15;
  # DEBUG D#19ptD.0 => D#81ptD.0
  # DEBUG __nD.36345 => 0
  # DEBUG thisD.36344 => D#19ptD.0
  # .MEM_11 = VDEF <.MEM_10>
  MEM[(long unsigned intD.14 *)this_1(D) + 120B] = 0;
  # VUSE <.MEM_11>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 8, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 7, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_16 = PHI <.MEM_2(D)(4), .MEM_8(6)>
  # PT = nonlocal escaped 
  # __tmp_18 = PHI <__tmp_4(4), __tmp_7(6)>
  # DEBUG __curD.36336 => __tmp_18
  # DEBUG __tmpD.36337 => __tmp_18
  # VUSE <.MEM_16>
  # PT = nonlocal escaped 
  __tmp_7 = __tmp_18->D.35073._M_nextD.14415;
  # DEBUG __curD.36336 => __tmp_7
  # DEBUG D#76ptD.0 => &__tmp_18->_M_dataD.35072
  # DEBUG __rD.36272 => D#76ptD.0
  # DEBUG D#75ptD.0 => D#80ptD.0
  # DEBUG thisD.36271 => D#75ptD.0
  # DEBUG D#74ptD.0 => D#75ptD.0
  # DEBUG thisD.36258 => D#74ptD.0
  # DEBUG thisD.36250 => NULL
  # DEBUG D.36251 => NULL
  # DEBUG thisD.36248 => NULL
  # DEBUG thisD.36270 => D#17ptD.0
  # DEBUG __pD.36269 => D#18ptD.0
  # DEBUG thisD.36326 => NULL
  # DEBUG thisD.36268 => NULL
  # DEBUG thisD.36339 => D#80ptD.0
  # DEBUG __pD.36338 => __tmp_18
  # DEBUG D#35ptD.0 => &D#80ptD.0->_M_implD.34096
  # DEBUG D#33ptD.0 => D#35ptD.0
  # DEBUG D#34ptD.0 => 1
  # DEBUG __pD.36342 => __tmp_18
  # DEBUG thisD.36340 => D#33ptD.0
  # DEBUG D.36341 => D#34ptD.0
  # .MEM_8 = VDEF <.MEM_16>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZdlPvD.2766 (__tmp_18);
  # DEBUG __curD.36336 => __tmp_7
  if (__tmp_7 == _15)
    goto <bb 7>;
  else
    goto <bb 6>;
;;    succ:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 5, next block 6, flags: (NEW)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_13 = PHI <.MEM_8(5)>
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU)

;;   basic block 6, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 7, next block 1, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

}



;; Function void PriorityArbiter::AddRequest(int, int, int) (_ZN15PriorityArbiter10AddRequestEiii, funcdef_no=1744, decl_uid=34684, cgraph_uid=416, symbol_order=417)


Pass statistics:
----------------

void PriorityArbiter::AddRequest(int, int, int) (struct PriorityArbiterD.33914 * const thisD.34778, intD.9 inD.34774, intD.9 labelD.34775, intD.9 priD.34776)
{
  intD.9 r$priD.36743;
  intD.9 r$labelD.36742;
  intD.9 r$inD.36741;
  struct iteratorD.34334 D.36738;
  struct _List_node_baseD.14413 * SR.142D.36737;
  struct iteratorD.34334 __positionD.36719;
  struct _List_node_baseD.14413 * insert_point$_M_nodeD.36576;
  boolD.2757 addD.34844;
  boolD.2757 delD.34843;
  struct iteratorD.34334 insert_pointD.34781;
  struct sRequestD.33918 rD.34780;
  struct iteratorD.34334 D.34847;
  struct _List_node_baseD.14413 * _1;
  intD.9 _2;
  intD.9 prephitmp_4;
  intD.9 _16;
  intD.9 _19;
  intD.9 _26;
  struct _List_nodeD.33928 * _33;
  struct _List_node_baseD.14413 * _36;
  long unsigned intD.14 _37;
  long unsigned intD.14 _38;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.36535 => &insert_pointD.34781
  # DEBUG insert_point$_M_nodeD.36576 => 0B
  # DEBUG r$inD.36741 => in_9(D)
  # DEBUG r$labelD.36742 => label_11(D)
  # DEBUG r$priD.36743 => pri_13(D)
  # DEBUG D#108ptD.0 => &this_15(D)->_requestsD.34671
  # VUSE <.MEM_8(D)>
  # PT = nonlocal escaped 
  insert_point$_M_node_24 = MEM[(struct _List_node_baseD.14413 * *)this_15(D) + 104B];
  # DEBUG D#3ptD.0 => D#108ptD.0
  # DEBUG thisD.36532 => D#3ptD.0
  # DEBUG thisD.35820 => NULL
  # DEBUG __xD.35819 => insert_point$_M_node_24
  # DEBUG insert_point$_M_nodeD.36576 => insert_point$_M_node_24
  # DEBUG insert_point$_M_nodeD.36576 => insert_point$_M_node_24
  # DEBUG D#109ptD.0 => &this_15(D)->_requestsD.34671
  # DEBUG thisD.36539 => D#109ptD.0
  # PT = nonlocal 
  _1 = &MEM[(struct listD.33924 *)this_15(D) + 104B].D.34669._M_implD.34096._M_nodeD.34247.D.14630;
  # DEBUG thisD.36541 => NULL
  # DEBUG __xD.36540 => _1
  # DEBUG thisD.36536 => &insert_pointD.34781
  # DEBUG __xD.36537 => &D.34842
  if (_1 != insert_point$_M_node_24)
    goto <bb 3>;
  else
    goto <bb 17>;
;;    succ:       3 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.36544 => &insert_pointD.34781
  # DEBUG D#110ptD.0 => &MEM[(struct _NodeD.34784 *)insert_point$_M_node_24]._M_dataD.35072
  # DEBUG __rD.35832 => D#110ptD.0
  # VUSE <.MEM_8(D)>
  _2 = MEM[(struct sRequestD.33918 *)insert_point$_M_node_24 + 16B].inD.33920;
  if (_2 < in_9(D))
    goto <bb 12>;
  else
    goto <bb 16>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 7732, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       13 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.36544 => &insert_pointD.34781
  # DEBUG D#110ptD.0 => &MEM[(struct _NodeD.34784 *)insert_point$_M_node_25]._M_dataD.35072
  # DEBUG __rD.35832 => D#110ptD.0
  # VUSE <.MEM_8(D)>
  _16 = MEM[(struct sRequestD.33918 *)insert_point$_M_node_25 + 16B].inD.33920;
  if (in_9(D) > _16)
    goto <bb 6>;
  else
    goto <bb 5>;
;;    succ:       6 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 3866, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # _26 = PHI <_16(4)>
  # PT = nonlocal escaped 
  # insert_point$_M_node_27 = PHI <insert_point$_M_node_25(4)>
  goto <bb 16>;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 3866, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       4 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 675, maybe hot
;;   Invalid sum of incoming frequencies 4787, should be 675
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       17 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 1]
  # del_21 = PHI <0(17), 1(15), 0(16)>
  # PT = nonlocal escaped 
  # insert_point$_M_node_53 = PHI <insert_point$_M_node_35(17), insert_point$_M_node_45(15), insert_point$_M_node_45(16)>
  # DEBUG addD.34844 => NULL
  # DEBUG delD.34843 => del_21
  # DEBUG D#121ptD.0 => &this_15(D)->_requestsD.34671
  # DEBUG thisD.36718 => D#121ptD.0
  # DEBUG __xD.36720 => &rD.34780
  # DEBUG D#106ptD.0 => D#121ptD.0
  # DEBUG __xD.36723 => &rD.34780
  # DEBUG thisD.36722 => D#106ptD.0
  # DEBUG D#105ptD.0 => D#106ptD.0
  # DEBUG D#104ptD.0 => D#106ptD.0
  # DEBUG D#103ptD.0 => &D#104ptD.0->D.34669
  # DEBUG D#101ptD.0 => D#103ptD.0
  # DEBUG thisD.36725 => D#101ptD.0
  # DEBUG D#100ptD.0 => D#101ptD.0
  # DEBUG D#99ptD.0 => &D#100ptD.0->_M_implD.34096
  # DEBUG D#97ptD.0 => D#99ptD.0
  # DEBUG D#98ptD.0 => 0B
  # DEBUG __nD.36728 => 1
  # DEBUG thisD.36726 => D#97ptD.0
  # DEBUG D.36727 => D#98ptD.0
  # DEBUG D#96ptD.0 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG thisD.36445 => D#95ptD.0
  # .MEM_40 = VDEF <.MEM_8(D)>
  # PT = { D.36744 } (escaped heap)
  # USE = nonlocal { D.36744 } (escaped heap)
  # CLB = nonlocal { D.36744 } (escaped heap)
  _33 = _ZnwmD.2764 (32);
  # DEBUG __pD.36724 => _33
  # DEBUG D#120ptD.0 => &MEM[(struct _NodeD.34345 *)_33]._M_dataD.35072
  # DEBUG __rD.36479 => D#120ptD.0
  # DEBUG D#102ptD.0 => &D#105ptD.0->D.34669
  # DEBUG D#75ptD.0 => D#102ptD.0
  # DEBUG thisD.36478 => D#75ptD.0
  # DEBUG D#74ptD.0 => D#75ptD.0
  # DEBUG thisD.36258 => D#74ptD.0
  # DEBUG thisD.36250 => NULL
  # DEBUG D.36251 => NULL
  # DEBUG thisD.36248 => NULL
  # DEBUG __pD.36731 => NULL
  # DEBUG __valD.36730 => &rD.34780
  # DEBUG thisD.36729 => D#20ptD.0
  # DEBUG D#2ptD.0 => 12
  # DEBUG __pD.35945 => NULL
  # DEBUG D.35946 => D#2ptD.0
  # .MEM_12 = VDEF <.MEM_40>
  MEM[(struct sRequestD.33918 *)_33 + 16B] = in_9(D);
  # .MEM_10 = VDEF <.MEM_12>
  MEM[(struct sRequestD.33918 *)_33 + 20B] = label_11(D);
  # .MEM_22 = VDEF <.MEM_10>
  MEM[(struct sRequestD.33918 *)_33 + 24B] = pri_13(D);
  # DEBUG thisD.36500 => NULL
  # DEBUG thisD.36474 => NULL
  # DEBUG __tmpD.36721 => _33
  # DEBUG thisD.36732 => &__positionD.36719
  # PT = { D.36744 } (escaped heap)
  _36 = &MEM[(struct _NodeD.34345 *)_33].D.35073;
  # .MEM_42 = VDEF <.MEM_22>
  # USE = nonlocal { D.36744 } (escaped heap)
  # CLB = nonlocal { D.36744 } (escaped heap)
  _ZNSt8__detail15_List_node_base7_M_hookEPS0_D.14427 (_36, insert_point$_M_node_53);
  # DEBUG D#107ptD.0 => &D#121ptD.0->D.34669
  # DEBUG D#16ptD.0 => D#107ptD.0
  # DEBUG __nD.36734 => 1
  # DEBUG thisD.36733 => D#16ptD.0
  # VUSE <.MEM_42>
  _37 = MEM[(long unsigned intD.14 *)this_15(D) + 120B];
  # DEBUG thisD.36736 => NULL
  # DEBUG __xD.36735 => _33
  if (del_21 != 0)
    goto <bb 10>;
  else
    goto <bb 8>;
;;    succ:       10 [52.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [48.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 324, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [48.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _38 = _37 + 1;
  # .MEM_43 = VDEF <.MEM_42>
  MEM[(long unsigned intD.14 *)this_15(D) + 120B] = _38;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 549, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_34 = PHI <.MEM_43(8), .MEM_8(D)(15)>
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       7 [52.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#117ptD.0 => &this_15(D)->_requestsD.34671
  # DEBUG thisD.36560 => D#117ptD.0
  # DEBUG __position$_M_nodeD.36586 => insert_point$_M_node_53
  # DEBUG D#116ptD.0 => insert_point$_M_node_53->_M_nextD.14415
  # DEBUG thisD.36564 => &__retD.36562
  # DEBUG __xD.36563 => D#116ptD.0
  # DEBUG __ret$_M_nodeD.36380 => D#116ptD.0
  # DEBUG thisD.36376 => &__positionD.36561
  # DEBUG thisD.36566 => D#117ptD.0
  # DEBUG __positionD.36382 => insert_point$_M_node_53
  # DEBUG __position$_M_nodeD.36375 => insert_point$_M_node_53
  # DEBUG D#83ptD.0 => &D#117ptD.0->D.34669
  # DEBUG D#21ptD.0 => D#83ptD.0
  # DEBUG __nD.36569 => 1
  # DEBUG thisD.36568 => D#21ptD.0
  # .MEM_30 = VDEF <.MEM_42>
  MEM[(long unsigned intD.14 *)this_15(D) + 120B] = _37;
  # .MEM_31 = VDEF <.MEM_30>
  # USE = nonlocal { D.36744 } (escaped heap)
  # CLB = nonlocal { D.36744 } (escaped heap)
  _ZNSt8__detail15_List_node_base9_M_unhookEvD.14429 (insert_point$_M_node_53);
  # DEBUG __nD.36567 => insert_point$_M_node_53
  # DEBUG D#84ptD.0 => &MEM[(struct _NodeD.34345 *)insert_point$_M_node_53]._M_dataD.35072
  # DEBUG __rD.36357 => D#84ptD.0
  # DEBUG D#86ptD.0 => &D#117ptD.0->D.34669
  # DEBUG D#75ptD.0 => D#86ptD.0
  # DEBUG thisD.36356 => D#75ptD.0
  # DEBUG D#74ptD.0 => D#75ptD.0
  # DEBUG thisD.36258 => D#74ptD.0
  # DEBUG thisD.36250 => NULL
  # DEBUG D.36251 => NULL
  # DEBUG thisD.36248 => NULL
  # DEBUG thisD.36355 => D#17ptD.0
  # DEBUG __pD.36354 => D#18ptD.0
  # DEBUG thisD.36369 => NULL
  # DEBUG thisD.36353 => NULL
  # DEBUG D#85ptD.0 => &D#117ptD.0->D.34669
  # DEBUG thisD.36571 => D#85ptD.0
  # DEBUG __pD.36570 => insert_point$_M_node_53
  # DEBUG D#35ptD.0 => &D#85ptD.0->_M_implD.34096
  # DEBUG D#33ptD.0 => D#35ptD.0
  # DEBUG D#34ptD.0 => 1
  # DEBUG __pD.36574 => insert_point$_M_node_53
  # DEBUG thisD.36572 => D#33ptD.0
  # DEBUG D.36573 => D#34ptD.0
  # .MEM_32 = VDEF <.MEM_31>
  # USE = nonlocal { D.36744 } (escaped heap)
  # CLB = nonlocal { D.36744 } (escaped heap)
  _ZdlPvD.2766 (insert_point$_M_node_53);
  # DEBUG D#87ptD.0 => {CLOBBER}
  # DEBUG __ret$_M_nodeD.36380 => D#87ptD.0
  # DEBUG D.36579 => D#116ptD.0
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_7 = PHI <.MEM_34(9), .MEM_32(10)>
  # DEBUG D#122ptD.0 => {CLOBBER}
  # DEBUG r$inD.36741 => D#122ptD.0
  # DEBUG D#123ptD.0 => {CLOBBER}
  # DEBUG r$labelD.36742 => D#123ptD.0
  # DEBUG D#124ptD.0 => {CLOBBER}
  # DEBUG r$priD.36743 => D#124ptD.0
  # DEBUG D#115ptD.0 => {CLOBBER}
  # DEBUG insert_point$_M_nodeD.36576 => D#115ptD.0
  # VUSE <.MEM_7>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 12, loop depth 0, count 0, freq 383, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 9100, maybe hot
;;   Invalid sum of incoming frequencies 4249, should be 9100
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       12 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # insert_point$_M_node_57 = PHI <insert_point$_M_node_24(12), insert_point$_M_node_25(6)>
  # DEBUG insert_point$_M_nodeD.36576 => insert_point$_M_node_57
  # DEBUG D#109ptD.0 => &this_15(D)->_requestsD.34671
  # DEBUG thisD.36539 => D#109ptD.0
  # DEBUG thisD.36541 => NULL
  # DEBUG __xD.36540 => _1
  # DEBUG thisD.36536 => &insert_pointD.34781
  # DEBUG __xD.36537 => &D.34842
  # DEBUG thisD.36544 => &insert_pointD.34781
  # DEBUG D#110ptD.0 => &MEM[(struct _NodeD.34784 *)insert_point$_M_node_57]._M_dataD.35072
  # DEBUG __rD.35832 => D#110ptD.0
  # DEBUG thisD.36546 => &insert_pointD.34781
  # VUSE <.MEM_8(D)>
  # PT = nonlocal escaped 
  insert_point$_M_node_25 = insert_point$_M_node_57->_M_nextD.14415;
  # DEBUG insert_point$_M_nodeD.36576 => insert_point$_M_node_25
  # DEBUG insert_point$_M_nodeD.36576 => insert_point$_M_node_25
  # DEBUG D#109ptD.0 => &this_15(D)->_requestsD.34671
  # DEBUG thisD.36539 => D#109ptD.0
  # DEBUG thisD.36541 => NULL
  # DEBUG __xD.36540 => _1
  # DEBUG thisD.36536 => &insert_pointD.34781
  # DEBUG __xD.36537 => &D.34842
  if (_1 != insert_point$_M_node_25)
    goto <bb 4>;
  else
    goto <bb 14>;
;;    succ:       4 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 1368, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # insert_point$_M_node_23 = PHI <insert_point$_M_node_25(13)>
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 450, maybe hot
;;   Invalid sum of incoming frequencies 1190, should be 450
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       16 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.36558 => &insert_pointD.34781
  # DEBUG D#113ptD.0 => &MEM[(struct _NodeD.34784 *)insert_point$_M_node_45]._M_dataD.35072
  # DEBUG __rD.35832 => D#113ptD.0
  # VUSE <.MEM_8(D)>
  _19 = MEM[(struct sRequestD.33918 *)insert_point$_M_node_45 + 16B].priD.33922;
  if (pri_13(D) > _19)
    goto <bb 7>;
  else
    goto <bb 9>;
;;    succ:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 4249, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       3 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # insert_point$_M_node_45 = PHI <insert_point$_M_node_24(3), insert_point$_M_node_27(5)>
  # prephitmp_4 = PHI <_2(3), _26(5)>
  # DEBUG delD.34843 => 0
  # DEBUG addD.34844 => 1
  # DEBUG D#111ptD.0 => &this_15(D)->_requestsD.34671
  # DEBUG thisD.36551 => D#111ptD.0
  # DEBUG thisD.36553 => NULL
  # DEBUG __xD.36552 => _1
  # DEBUG thisD.36548 => &insert_pointD.34781
  # DEBUG __xD.36549 => &D.34845
  # DEBUG delD.34843 => 0
  # DEBUG addD.34844 => 1
  # DEBUG D#111ptD.0 => &this_15(D)->_requestsD.34671
  # DEBUG thisD.36551 => D#111ptD.0
  # DEBUG thisD.36553 => NULL
  # DEBUG __xD.36552 => _1
  # DEBUG thisD.36548 => &insert_pointD.34781
  # DEBUG __xD.36549 => &D.34845
  # DEBUG thisD.36556 => &insert_pointD.34781
  # DEBUG D#112ptD.0 => &MEM[(struct _NodeD.34784 *)insert_point$_M_node_45]._M_dataD.35072
  # DEBUG __rD.35832 => D#112ptD.0
  if (prephitmp_4 == in_9(D))
    goto <bb 15>;
  else
    goto <bb 7>;
;;    succ:       15 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 1503, maybe hot
;;    prev block 16, next block 1, flags: (NEW, REACHABLE)
;;    pred:       2 [15.0%]  (FALSE_VALUE,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # insert_point$_M_node_35 = PHI <insert_point$_M_node_24(2), insert_point$_M_node_23(14)>
  # DEBUG delD.34843 => 0
  # DEBUG addD.34844 => 1
  # DEBUG D#111ptD.0 => &this_15(D)->_requestsD.34671
  # DEBUG thisD.36551 => D#111ptD.0
  # DEBUG thisD.36553 => NULL
  # DEBUG __xD.36552 => NULL
  # DEBUG thisD.36548 => &insert_pointD.34781
  # DEBUG __xD.36549 => &D.34845
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

}


Creating dr for MEM[(struct _List_node_base * *)this_15(D) + 104B]
analyze_innermost: success.
	base_address: this_15(D)
	offset from base address: 0
	constant offset from base address: 104
	step: 0
	aligned to: 256
	base_object: MEM[(struct _List_node_base * *)this_15(D) + 104B]
Creating dr for MEM[(struct sRequest *)insert_point$_M_node_24 + 16B].in
analyze_innermost: success.
	base_address: insert_point$_M_node_24
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest *)insert_point$_M_node_24 + 16B]
	Access function 0: 0
Creating dr for insert_point$_M_node_57->_M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *insert_point$_M_node_57
	Access function 0: 0
Creating dr for insert_point$_M_node_57->_M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *insert_point$_M_node_57
	Access function 0: 0
Creating dr for insert_point$_M_node_57->_M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *insert_point$_M_node_57
	Access function 0: 0
Creating dr for insert_point$_M_node_57->_M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *insert_point$_M_node_57
	Access function 0: 0
Creating dr for MEM[(struct sRequest *)insert_point$_M_node_25 + 16B].in
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest *)insert_point$_M_node_25 + 16B]
	Access function 0: 0
Creating dr for MEM[(struct sRequest *)insert_point$_M_node_25 + 16B].in
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest *)insert_point$_M_node_25 + 16B]
	Access function 0: 0
Creating dr for MEM[(struct sRequest *)insert_point$_M_node_45 + 16B].pri
analyze_innermost: success.
	base_address: insert_point$_M_node_45
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest *)insert_point$_M_node_45 + 16B]
	Access function 0: 64
Creating dr for MEM[(long unsigned int *)this_15(D) + 120B]
analyze_innermost: success.
	base_address: this_15(D)
	offset from base address: 0
	constant offset from base address: 120
	step: 0
	aligned to: 256
	base_object: MEM[(long unsigned int *)this_15(D) + 120B]
Creating dr for MEM[(long unsigned int *)this_15(D) + 120B]
analyze_innermost: success.
	base_address: this_15(D)
	offset from base address: 0
	constant offset from base address: 120
	step: 0
	aligned to: 256
	base_object: MEM[(long unsigned int *)this_15(D) + 120B]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:8)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:9)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:21, LOOPS:1, CONDITIONS:7, STMTS:199)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_17 })
  {
    <bb 2>:
    # DEBUG this => &insert_point
    # DEBUG insert_point$_M_node => 0B
    # DEBUG r$in => in_9(D)
    # DEBUG r$label => label_11(D)
    # DEBUG r$pri => pri_13(D)
    # DEBUG D#108 => &this_15(D)->_requests
    # VUSE <.MEM_8(D)>
    insert_point$_M_node_24 = MEM[(struct _List_node_base * *)this_15(D) + 104B];
    # DEBUG D#3 => D#108
    # DEBUG this => D#3
    # DEBUG this => NULL
    # DEBUG __x => insert_point$_M_node_24
    # DEBUG insert_point$_M_node => insert_point$_M_node_24
    # DEBUG insert_point$_M_node => insert_point$_M_node_24
    # DEBUG D#109 => &this_15(D)->_requests
    # DEBUG this => D#109
    _1 = &MEM[(struct list *)this_15(D) + 104B].D.34669._M_impl._M_node.D.14630;
    # DEBUG this => NULL
    # DEBUG __x => _1
    # DEBUG this => &insert_point
    # DEBUG __x => &D.34842
    if (_1 != insert_point$_M_node_24)
      goto <bb 3>;
    else
      goto <bb 17>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_12 bb_16 })
  {
    <bb 3>:
    # DEBUG this => &insert_point
    # DEBUG D#110 => &MEM[(struct _Node *)insert_point$_M_node_24]._M_data
    # DEBUG __r => D#110
    # VUSE <.MEM_8(D)>
    _2 = MEM[(struct sRequest *)insert_point$_M_node_24 + 16B].in;
    if (_2 < in_9(D))
      goto <bb 12>;
    else
      goto <bb 16>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_16 })
  {
    <bb 5>:
    # _26 = PHI <_16(4)>
    # insert_point$_M_node_27 = PHI <insert_point$_M_node_25(4)>
    goto <bb 16>;

  }
  bb_7 (preds = {bb_18 bb_15 bb_16 }, succs = {bb_10 bb_8 })
  {
    <bb 7>:
    # del_21 = PHI <0(18), 1(15), 0(16)>
    # insert_point$_M_node_53 = PHI <insert_point$_M_node_35(18), insert_point$_M_node_45(15), insert_point$_M_node_45(16)>
    # DEBUG add => NULL
    # DEBUG del => del_21
    # DEBUG D#121 => &this_15(D)->_requests
    # DEBUG this => D#121
    # DEBUG __x => &r
    # DEBUG D#106 => D#121
    # DEBUG __x => &r
    # DEBUG this => D#106
    # DEBUG D#105 => D#106
    # DEBUG D#104 => D#106
    # DEBUG D#103 => &D#104->D.34669
    # DEBUG D#101 => D#103
    # DEBUG this => D#101
    # DEBUG D#100 => D#101
    # DEBUG D#99 => &D#100->_M_impl
    # DEBUG D#97 => D#99
    # DEBUG D#98 => 0B
    # DEBUG __n => 1
    # DEBUG this => D#97
    # DEBUG D.36727 => D#98
    # DEBUG D#96 => D#97
    # DEBUG D#95 => D#96
    # DEBUG this => D#95
    # .MEM_40 = VDEF <.MEM_8(D)>
    _33 = operator new (32);
    # DEBUG __p => _33
    # DEBUG D#120 => &MEM[(struct _Node *)_33]._M_data
    # DEBUG __r => D#120
    # DEBUG D#102 => &D#105->D.34669
    # DEBUG D#75 => D#102
    # DEBUG this => D#75
    # DEBUG D#74 => D#75
    # DEBUG this => D#74
    # DEBUG this => NULL
    # DEBUG D.36251 => NULL
    # DEBUG this => NULL
    # DEBUG __p => NULL
    # DEBUG __val => &r
    # DEBUG this => D#20
    # DEBUG D#2 => 12
    # DEBUG __p => NULL
    # DEBUG D.35946 => D#2
    # .MEM_12 = VDEF <.MEM_40>
    MEM[(struct sRequest *)_33 + 16B] = in_9(D);
    # .MEM_10 = VDEF <.MEM_12>
    MEM[(struct sRequest *)_33 + 20B] = label_11(D);
    # .MEM_22 = VDEF <.MEM_10>
    MEM[(struct sRequest *)_33 + 24B] = pri_13(D);
    # DEBUG this => NULL
    # DEBUG this => NULL
    # DEBUG __tmp => _33
    # DEBUG this => &__position
    _36 = &MEM[(struct _Node *)_33].D.35073;
    # .MEM_42 = VDEF <.MEM_22>
    std::__detail::_List_node_base::_M_hook (_36, insert_point$_M_node_53);
    # DEBUG D#107 => &D#121->D.34669
    # DEBUG D#16 => D#107
    # DEBUG __n => 1
    # DEBUG this => D#16
    # VUSE <.MEM_42>
    _37 = MEM[(long unsigned int *)this_15(D) + 120B];
    # DEBUG this => NULL
    # DEBUG __x => _33
    if (del_21 != 0)
      goto <bb 10>;
    else
      goto <bb 8>;

  }
  bb_8 (preds = {bb_7 }, succs = {bb_9 })
  {
    <bb 8>:
    _38 = _37 + 1;
    # .MEM_43 = VDEF <.MEM_42>
    MEM[(long unsigned int *)this_15(D) + 120B] = _38;

  }
  bb_9 (preds = {bb_8 bb_15 }, succs = {bb_20 })
  {
    <bb 9>:
    # .MEM_34 = PHI <.MEM_43(8), .MEM_8(D)(15)>

  }
  bb_20 (preds = {bb_9 }, succs = {bb_11 })
  {
    <bb 20>:
    goto <bb 11>;

  }
  bb_10 (preds = {bb_7 }, succs = {bb_11 })
  {
    <bb 10>:
    # DEBUG D#117 => &this_15(D)->_requests
    # DEBUG this => D#117
    # DEBUG __position$_M_node => insert_point$_M_node_53
    # DEBUG D#116 => insert_point$_M_node_53->_M_next
    # DEBUG this => &__ret
    # DEBUG __x => D#116
    # DEBUG __ret$_M_node => D#116
    # DEBUG this => &__position
    # DEBUG this => D#117
    # DEBUG __position => insert_point$_M_node_53
    # DEBUG __position$_M_node => insert_point$_M_node_53
    # DEBUG D#83 => &D#117->D.34669
    # DEBUG D#21 => D#83
    # DEBUG __n => 1
    # DEBUG this => D#21
    # .MEM_30 = VDEF <.MEM_42>
    MEM[(long unsigned int *)this_15(D) + 120B] = _37;
    # .MEM_31 = VDEF <.MEM_30>
    std::__detail::_List_node_base::_M_unhook (insert_point$_M_node_53);
    # DEBUG __n => insert_point$_M_node_53
    # DEBUG D#84 => &MEM[(struct _Node *)insert_point$_M_node_53]._M_data
    # DEBUG __r => D#84
    # DEBUG D#86 => &D#117->D.34669
    # DEBUG D#75 => D#86
    # DEBUG this => D#75
    # DEBUG D#74 => D#75
    # DEBUG this => D#74
    # DEBUG this => NULL
    # DEBUG D.36251 => NULL
    # DEBUG this => NULL
    # DEBUG this => D#17
    # DEBUG __p => D#18
    # DEBUG this => NULL
    # DEBUG this => NULL
    # DEBUG D#85 => &D#117->D.34669
    # DEBUG this => D#85
    # DEBUG __p => insert_point$_M_node_53
    # DEBUG D#35 => &D#85->_M_impl
    # DEBUG D#33 => D#35
    # DEBUG D#34 => 1
    # DEBUG __p => insert_point$_M_node_53
    # DEBUG this => D#33
    # DEBUG D.36573 => D#34
    # .MEM_32 = VDEF <.MEM_31>
    operator delete (insert_point$_M_node_53);
    # DEBUG D#87 => {CLOBBER}
    # DEBUG __ret$_M_node => D#87
    # DEBUG D.36579 => D#116

  }
  bb_11 (preds = {bb_20 bb_10 }, succs = {bb_19 })
  {
    <bb 11>:
    # .MEM_7 = PHI <.MEM_34(20), .MEM_32(10)>

  }
  bb_19 (preds = {bb_11 }, succs = {bb_1 })
  {
    <bb 19>:
    # DEBUG D#122 => {CLOBBER}
    # DEBUG r$in => D#122
    # DEBUG D#123 => {CLOBBER}
    # DEBUG r$label => D#123
    # DEBUG D#124 => {CLOBBER}
    # DEBUG r$pri => D#124
    # DEBUG D#115 => {CLOBBER}
    # DEBUG insert_point$_M_node => D#115
    # VUSE <.MEM_7>
    return;

  }
  bb_12 (preds = {bb_3 }, succs = {bb_13 })
  {
    <bb 12>:

  }
  bb_14 (preds = {bb_13 }, succs = {bb_17 })
  {
    <bb 14>:
    # insert_point$_M_node_23 = PHI <insert_point$_M_node_25(13)>
    goto <bb 17>;

  }
  bb_15 (preds = {bb_16 }, succs = {bb_7 bb_9 })
  {
    <bb 15>:
    # DEBUG this => &insert_point
    # DEBUG D#113 => &MEM[(struct _Node *)insert_point$_M_node_45]._M_data
    # DEBUG __r => D#113
    # VUSE <.MEM_8(D)>
    _19 = MEM[(struct sRequest *)insert_point$_M_node_45 + 16B].pri;
    if (pri_13(D) > _19)
      goto <bb 7>;
    else
      goto <bb 9>;

  }
  bb_16 (preds = {bb_3 bb_5 }, succs = {bb_15 bb_7 })
  {
    <bb 16>:
    # insert_point$_M_node_45 = PHI <insert_point$_M_node_24(3), insert_point$_M_node_27(5)>
    # prephitmp_4 = PHI <_2(3), _26(5)>
    # DEBUG del => 0
    # DEBUG add => 1
    # DEBUG D#111 => &this_15(D)->_requests
    # DEBUG this => D#111
    # DEBUG this => NULL
    # DEBUG __x => _1
    # DEBUG this => &insert_point
    # DEBUG __x => &D.34845
    # DEBUG del => 0
    # DEBUG add => 1
    # DEBUG D#111 => &this_15(D)->_requests
    # DEBUG this => D#111
    # DEBUG this => NULL
    # DEBUG __x => _1
    # DEBUG this => &insert_point
    # DEBUG __x => &D.34845
    # DEBUG this => &insert_point
    # DEBUG D#112 => &MEM[(struct _Node *)insert_point$_M_node_45]._M_data
    # DEBUG __r => D#112
    if (prephitmp_4 == in_9(D))
      goto <bb 15>;
    else
      goto <bb 7>;

  }
  bb_17 (preds = {bb_2 bb_14 }, succs = {bb_18 })
  {
    <bb 17>:
    # insert_point$_M_node_35 = PHI <insert_point$_M_node_24(2), insert_point$_M_node_23(14)>

  }
  bb_18 (preds = {bb_17 }, succs = {bb_7 })
  {
    <bb 18>:
    # DEBUG del => 0
    # DEBUG add => 1
    # DEBUG D#111 => &this_15(D)->_requests
    # DEBUG this => D#111
    # DEBUG this => NULL
    # DEBUG __x => NULL
    # DEBUG this => &insert_point
    # DEBUG __x => &D.34845
    goto <bb 7>;

  }
  loop_1 (header = 13, latch = 6, niter = )
  {
    bb_4 (preds = {bb_13 }, succs = {bb_6 bb_5 })
    {
      <bb 4>:
      # DEBUG this => &insert_point
      # DEBUG D#110 => &MEM[(struct _Node *)insert_point$_M_node_25]._M_data
      # DEBUG __r => D#110
      # VUSE <.MEM_8(D)>
      _16 = MEM[(struct sRequest *)insert_point$_M_node_25 + 16B].in;
      if (in_9(D) > _16)
        goto <bb 6>;
      else
        goto <bb 5>;

    }
    bb_6 (preds = {bb_4 }, succs = {bb_13 })
    {
      <bb 6>:
      goto <bb 13>;

    }
    bb_13 (preds = {bb_12 bb_6 }, succs = {bb_4 bb_14 })
    {
      <bb 13>:
      # insert_point$_M_node_57 = PHI <insert_point$_M_node_24(12), insert_point$_M_node_25(6)>
      # DEBUG insert_point$_M_node => insert_point$_M_node_57
      # DEBUG D#109 => &this_15(D)->_requests
      # DEBUG this => D#109
      # DEBUG this => NULL
      # DEBUG __x => _1
      # DEBUG this => &insert_point
      # DEBUG __x => &D.34842
      # DEBUG this => &insert_point
      # DEBUG D#110 => &MEM[(struct _Node *)insert_point$_M_node_57]._M_data
      # DEBUG __r => D#110
      # DEBUG this => &insert_point
      # VUSE <.MEM_8(D)>
      insert_point$_M_node_25 = insert_point$_M_node_57->_M_next;
      # DEBUG insert_point$_M_node => insert_point$_M_node_25
      # DEBUG insert_point$_M_node => insert_point$_M_node_25
      # DEBUG D#109 => &this_15(D)->_requests
      # DEBUG this => D#109
      # DEBUG this => NULL
      # DEBUG __x => _1
      # DEBUG this => &insert_point
      # DEBUG __x => &D.34842
      if (_1 != insert_point$_M_node_25)
        goto <bb 4>;
      else
        goto <bb 14>;

    }
  }
}

Pass statistics:
----------------

void PriorityArbiter::AddRequest(int, int, int) (struct PriorityArbiterD.33914 * const thisD.34778, intD.9 inD.34774, intD.9 labelD.34775, intD.9 priD.34776)
{
  intD.9 r$priD.36743;
  intD.9 r$labelD.36742;
  intD.9 r$inD.36741;
  struct iteratorD.34334 D.36738;
  struct _List_node_baseD.14413 * SR.142D.36737;
  struct iteratorD.34334 __positionD.36719;
  struct _List_node_baseD.14413 * insert_point$_M_nodeD.36576;
  boolD.2757 addD.34844;
  boolD.2757 delD.34843;
  struct iteratorD.34334 insert_pointD.34781;
  struct sRequestD.33918 rD.34780;
  struct iteratorD.34334 D.34847;
  struct _List_node_baseD.14413 * _1;
  intD.9 _2;
  intD.9 prephitmp_4;
  intD.9 _16;
  intD.9 _19;
  intD.9 _26;
  struct _List_nodeD.33928 * _33;
  struct _List_node_baseD.14413 * _36;
  long unsigned intD.14 _37;
  long unsigned intD.14 _38;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.36535 => &insert_pointD.34781
  # DEBUG insert_point$_M_nodeD.36576 => 0B
  # DEBUG r$inD.36741 => in_9(D)
  # DEBUG r$labelD.36742 => label_11(D)
  # DEBUG r$priD.36743 => pri_13(D)
  # DEBUG D#108ptD.0 => &this_15(D)->_requestsD.34671
  # VUSE <.MEM_8(D)>
  # PT = nonlocal escaped 
  insert_point$_M_node_24 = MEM[(struct _List_node_baseD.14413 * *)this_15(D) + 104B];
  # DEBUG D#3ptD.0 => D#108ptD.0
  # DEBUG thisD.36532 => D#3ptD.0
  # DEBUG thisD.35820 => NULL
  # DEBUG __xD.35819 => insert_point$_M_node_24
  # DEBUG insert_point$_M_nodeD.36576 => insert_point$_M_node_24
  # DEBUG insert_point$_M_nodeD.36576 => insert_point$_M_node_24
  # DEBUG D#109ptD.0 => &this_15(D)->_requestsD.34671
  # DEBUG thisD.36539 => D#109ptD.0
  # PT = nonlocal 
  _1 = &MEM[(struct listD.33924 *)this_15(D) + 104B].D.34669._M_implD.34096._M_nodeD.34247.D.14630;
  # DEBUG thisD.36541 => NULL
  # DEBUG __xD.36540 => _1
  # DEBUG thisD.36536 => &insert_pointD.34781
  # DEBUG __xD.36537 => &D.34842
  if (_1 != insert_point$_M_node_24)
    goto <bb 3>;
  else
    goto <bb 17>;
;;    succ:       3 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.36544 => &insert_pointD.34781
  # DEBUG D#110ptD.0 => &MEM[(struct _NodeD.34784 *)insert_point$_M_node_24]._M_dataD.35072
  # DEBUG __rD.35832 => D#110ptD.0
  # VUSE <.MEM_8(D)>
  _2 = MEM[(struct sRequestD.33918 *)insert_point$_M_node_24 + 16B].inD.33920;
  if (_2 < in_9(D))
    goto <bb 12>;
  else
    goto <bb 16>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 7732, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       13 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.36544 => &insert_pointD.34781
  # DEBUG D#110ptD.0 => &MEM[(struct _NodeD.34784 *)insert_point$_M_node_25]._M_dataD.35072
  # DEBUG __rD.35832 => D#110ptD.0
  # VUSE <.MEM_8(D)>
  _16 = MEM[(struct sRequestD.33918 *)insert_point$_M_node_25 + 16B].inD.33920;
  if (in_9(D) > _16)
    goto <bb 6>;
  else
    goto <bb 5>;
;;    succ:       6 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 3866, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # _26 = PHI <_16(4)>
  # PT = nonlocal escaped 
  # insert_point$_M_node_27 = PHI <insert_point$_M_node_25(4)>
  goto <bb 16>;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 3866, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       4 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 675, maybe hot
;;   Invalid sum of incoming frequencies 4787, should be 675
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       18 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 1]
  # del_21 = PHI <0(18), 1(15), 0(16)>
  # PT = nonlocal escaped 
  # insert_point$_M_node_53 = PHI <insert_point$_M_node_35(18), insert_point$_M_node_45(15), insert_point$_M_node_45(16)>
  # DEBUG addD.34844 => NULL
  # DEBUG delD.34843 => del_21
  # DEBUG D#121ptD.0 => &this_15(D)->_requestsD.34671
  # DEBUG thisD.36718 => D#121ptD.0
  # DEBUG __xD.36720 => &rD.34780
  # DEBUG D#106ptD.0 => D#121ptD.0
  # DEBUG __xD.36723 => &rD.34780
  # DEBUG thisD.36722 => D#106ptD.0
  # DEBUG D#105ptD.0 => D#106ptD.0
  # DEBUG D#104ptD.0 => D#106ptD.0
  # DEBUG D#103ptD.0 => &D#104ptD.0->D.34669
  # DEBUG D#101ptD.0 => D#103ptD.0
  # DEBUG thisD.36725 => D#101ptD.0
  # DEBUG D#100ptD.0 => D#101ptD.0
  # DEBUG D#99ptD.0 => &D#100ptD.0->_M_implD.34096
  # DEBUG D#97ptD.0 => D#99ptD.0
  # DEBUG D#98ptD.0 => 0B
  # DEBUG __nD.36728 => 1
  # DEBUG thisD.36726 => D#97ptD.0
  # DEBUG D.36727 => D#98ptD.0
  # DEBUG D#96ptD.0 => D#97ptD.0
  # DEBUG D#95ptD.0 => D#96ptD.0
  # DEBUG thisD.36445 => D#95ptD.0
  # .MEM_40 = VDEF <.MEM_8(D)>
  # PT = { D.36744 } (escaped heap)
  # USE = nonlocal { D.36744 } (escaped heap)
  # CLB = nonlocal { D.36744 } (escaped heap)
  _33 = _ZnwmD.2764 (32);
  # DEBUG __pD.36724 => _33
  # DEBUG D#120ptD.0 => &MEM[(struct _NodeD.34345 *)_33]._M_dataD.35072
  # DEBUG __rD.36479 => D#120ptD.0
  # DEBUG D#102ptD.0 => &D#105ptD.0->D.34669
  # DEBUG D#75ptD.0 => D#102ptD.0
  # DEBUG thisD.36478 => D#75ptD.0
  # DEBUG D#74ptD.0 => D#75ptD.0
  # DEBUG thisD.36258 => D#74ptD.0
  # DEBUG thisD.36250 => NULL
  # DEBUG D.36251 => NULL
  # DEBUG thisD.36248 => NULL
  # DEBUG __pD.36731 => NULL
  # DEBUG __valD.36730 => &rD.34780
  # DEBUG thisD.36729 => D#20ptD.0
  # DEBUG D#2ptD.0 => 12
  # DEBUG __pD.35945 => NULL
  # DEBUG D.35946 => D#2ptD.0
  # .MEM_12 = VDEF <.MEM_40>
  MEM[(struct sRequestD.33918 *)_33 + 16B] = in_9(D);
  # .MEM_10 = VDEF <.MEM_12>
  MEM[(struct sRequestD.33918 *)_33 + 20B] = label_11(D);
  # .MEM_22 = VDEF <.MEM_10>
  MEM[(struct sRequestD.33918 *)_33 + 24B] = pri_13(D);
  # DEBUG thisD.36500 => NULL
  # DEBUG thisD.36474 => NULL
  # DEBUG __tmpD.36721 => _33
  # DEBUG thisD.36732 => &__positionD.36719
  # PT = { D.36744 } (escaped heap)
  _36 = &MEM[(struct _NodeD.34345 *)_33].D.35073;
  # .MEM_42 = VDEF <.MEM_22>
  # USE = nonlocal { D.36744 } (escaped heap)
  # CLB = nonlocal { D.36744 } (escaped heap)
  _ZNSt8__detail15_List_node_base7_M_hookEPS0_D.14427 (_36, insert_point$_M_node_53);
  # DEBUG D#107ptD.0 => &D#121ptD.0->D.34669
  # DEBUG D#16ptD.0 => D#107ptD.0
  # DEBUG __nD.36734 => 1
  # DEBUG thisD.36733 => D#16ptD.0
  # VUSE <.MEM_42>
  _37 = MEM[(long unsigned intD.14 *)this_15(D) + 120B];
  # DEBUG thisD.36736 => NULL
  # DEBUG __xD.36735 => _33
  if (del_21 != 0)
    goto <bb 10>;
  else
    goto <bb 8>;
;;    succ:       10 [52.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [48.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 324, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [48.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _38 = _37 + 1;
  # .MEM_43 = VDEF <.MEM_42>
  MEM[(long unsigned intD.14 *)this_15(D) + 120B] = _38;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 549, maybe hot
;;    prev block 8, next block 20, flags: (NEW)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_34 = PHI <.MEM_43(8), .MEM_8(D)(15)>
;;    succ:       20 [100.0%]  (FALLTHRU)

;;   basic block 20, loop depth 0, count 0, freq 549, maybe hot
;;    prev block 9, next block 10, flags: (NEW)
;;    pred:       9 [100.0%]  (FALLTHRU)
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 20, next block 11, flags: (NEW, REACHABLE)
;;    pred:       7 [52.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#117ptD.0 => &this_15(D)->_requestsD.34671
  # DEBUG thisD.36560 => D#117ptD.0
  # DEBUG __position$_M_nodeD.36586 => insert_point$_M_node_53
  # DEBUG D#116ptD.0 => insert_point$_M_node_53->_M_nextD.14415
  # DEBUG thisD.36564 => &__retD.36562
  # DEBUG __xD.36563 => D#116ptD.0
  # DEBUG __ret$_M_nodeD.36380 => D#116ptD.0
  # DEBUG thisD.36376 => &__positionD.36561
  # DEBUG thisD.36566 => D#117ptD.0
  # DEBUG __positionD.36382 => insert_point$_M_node_53
  # DEBUG __position$_M_nodeD.36375 => insert_point$_M_node_53
  # DEBUG D#83ptD.0 => &D#117ptD.0->D.34669
  # DEBUG D#21ptD.0 => D#83ptD.0
  # DEBUG __nD.36569 => 1
  # DEBUG thisD.36568 => D#21ptD.0
  # .MEM_30 = VDEF <.MEM_42>
  MEM[(long unsigned intD.14 *)this_15(D) + 120B] = _37;
  # .MEM_31 = VDEF <.MEM_30>
  # USE = nonlocal { D.36744 } (escaped heap)
  # CLB = nonlocal { D.36744 } (escaped heap)
  _ZNSt8__detail15_List_node_base9_M_unhookEvD.14429 (insert_point$_M_node_53);
  # DEBUG __nD.36567 => insert_point$_M_node_53
  # DEBUG D#84ptD.0 => &MEM[(struct _NodeD.34345 *)insert_point$_M_node_53]._M_dataD.35072
  # DEBUG __rD.36357 => D#84ptD.0
  # DEBUG D#86ptD.0 => &D#117ptD.0->D.34669
  # DEBUG D#75ptD.0 => D#86ptD.0
  # DEBUG thisD.36356 => D#75ptD.0
  # DEBUG D#74ptD.0 => D#75ptD.0
  # DEBUG thisD.36258 => D#74ptD.0
  # DEBUG thisD.36250 => NULL
  # DEBUG D.36251 => NULL
  # DEBUG thisD.36248 => NULL
  # DEBUG thisD.36355 => D#17ptD.0
  # DEBUG __pD.36354 => D#18ptD.0
  # DEBUG thisD.36369 => NULL
  # DEBUG thisD.36353 => NULL
  # DEBUG D#85ptD.0 => &D#117ptD.0->D.34669
  # DEBUG thisD.36571 => D#85ptD.0
  # DEBUG __pD.36570 => insert_point$_M_node_53
  # DEBUG D#35ptD.0 => &D#85ptD.0->_M_implD.34096
  # DEBUG D#33ptD.0 => D#35ptD.0
  # DEBUG D#34ptD.0 => 1
  # DEBUG __pD.36574 => insert_point$_M_node_53
  # DEBUG thisD.36572 => D#33ptD.0
  # DEBUG D.36573 => D#34ptD.0
  # .MEM_32 = VDEF <.MEM_31>
  # USE = nonlocal { D.36744 } (escaped heap)
  # CLB = nonlocal { D.36744 } (escaped heap)
  _ZdlPvD.2766 (insert_point$_M_node_53);
  # DEBUG D#87ptD.0 => {CLOBBER}
  # DEBUG __ret$_M_nodeD.36380 => D#87ptD.0
  # DEBUG D.36579 => D#116ptD.0
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 10, next block 19, flags: (NEW, REACHABLE)
;;    pred:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_7 = PHI <.MEM_34(20), .MEM_32(10)>
;;    succ:       19 [100.0%]  (FALLTHRU)

;;   basic block 19, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 11, next block 12, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU)
  # DEBUG D#122ptD.0 => {CLOBBER}
  # DEBUG r$inD.36741 => D#122ptD.0
  # DEBUG D#123ptD.0 => {CLOBBER}
  # DEBUG r$labelD.36742 => D#123ptD.0
  # DEBUG D#124ptD.0 => {CLOBBER}
  # DEBUG r$priD.36743 => D#124ptD.0
  # DEBUG D#115ptD.0 => {CLOBBER}
  # DEBUG insert_point$_M_nodeD.36576 => D#115ptD.0
  # VUSE <.MEM_7>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 12, loop depth 0, count 0, freq 383, maybe hot
;;    prev block 19, next block 13, flags: (NEW, REACHABLE)
;;    pred:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 9100, maybe hot
;;   Invalid sum of incoming frequencies 4249, should be 9100
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       12 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # insert_point$_M_node_57 = PHI <insert_point$_M_node_24(12), insert_point$_M_node_25(6)>
  # DEBUG insert_point$_M_nodeD.36576 => insert_point$_M_node_57
  # DEBUG D#109ptD.0 => &this_15(D)->_requestsD.34671
  # DEBUG thisD.36539 => D#109ptD.0
  # DEBUG thisD.36541 => NULL
  # DEBUG __xD.36540 => _1
  # DEBUG thisD.36536 => &insert_pointD.34781
  # DEBUG __xD.36537 => &D.34842
  # DEBUG thisD.36544 => &insert_pointD.34781
  # DEBUG D#110ptD.0 => &MEM[(struct _NodeD.34784 *)insert_point$_M_node_57]._M_dataD.35072
  # DEBUG __rD.35832 => D#110ptD.0
  # DEBUG thisD.36546 => &insert_pointD.34781
  # VUSE <.MEM_8(D)>
  # PT = nonlocal escaped 
  insert_point$_M_node_25 = insert_point$_M_node_57->_M_nextD.14415;
  # DEBUG insert_point$_M_nodeD.36576 => insert_point$_M_node_25
  # DEBUG insert_point$_M_nodeD.36576 => insert_point$_M_node_25
  # DEBUG D#109ptD.0 => &this_15(D)->_requestsD.34671
  # DEBUG thisD.36539 => D#109ptD.0
  # DEBUG thisD.36541 => NULL
  # DEBUG __xD.36540 => _1
  # DEBUG thisD.36536 => &insert_pointD.34781
  # DEBUG __xD.36537 => &D.34842
  if (_1 != insert_point$_M_node_25)
    goto <bb 4>;
  else
    goto <bb 14>;
;;    succ:       4 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 1368, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # insert_point$_M_node_23 = PHI <insert_point$_M_node_25(13)>
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 450, maybe hot
;;   Invalid sum of incoming frequencies 1190, should be 450
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       16 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.36558 => &insert_pointD.34781
  # DEBUG D#113ptD.0 => &MEM[(struct _NodeD.34784 *)insert_point$_M_node_45]._M_dataD.35072
  # DEBUG __rD.35832 => D#113ptD.0
  # VUSE <.MEM_8(D)>
  _19 = MEM[(struct sRequestD.33918 *)insert_point$_M_node_45 + 16B].priD.33922;
  if (pri_13(D) > _19)
    goto <bb 7>;
  else
    goto <bb 9>;
;;    succ:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 4249, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       3 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # insert_point$_M_node_45 = PHI <insert_point$_M_node_24(3), insert_point$_M_node_27(5)>
  # prephitmp_4 = PHI <_2(3), _26(5)>
  # DEBUG delD.34843 => 0
  # DEBUG addD.34844 => 1
  # DEBUG D#111ptD.0 => &this_15(D)->_requestsD.34671
  # DEBUG thisD.36551 => D#111ptD.0
  # DEBUG thisD.36553 => NULL
  # DEBUG __xD.36552 => _1
  # DEBUG thisD.36548 => &insert_pointD.34781
  # DEBUG __xD.36549 => &D.34845
  # DEBUG delD.34843 => 0
  # DEBUG addD.34844 => 1
  # DEBUG D#111ptD.0 => &this_15(D)->_requestsD.34671
  # DEBUG thisD.36551 => D#111ptD.0
  # DEBUG thisD.36553 => NULL
  # DEBUG __xD.36552 => _1
  # DEBUG thisD.36548 => &insert_pointD.34781
  # DEBUG __xD.36549 => &D.34845
  # DEBUG thisD.36556 => &insert_pointD.34781
  # DEBUG D#112ptD.0 => &MEM[(struct _NodeD.34784 *)insert_point$_M_node_45]._M_dataD.35072
  # DEBUG __rD.35832 => D#112ptD.0
  if (prephitmp_4 == in_9(D))
    goto <bb 15>;
  else
    goto <bb 7>;
;;    succ:       15 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 1503, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       2 [15.0%]  (FALSE_VALUE,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # insert_point$_M_node_35 = PHI <insert_point$_M_node_24(2), insert_point$_M_node_23(14)>
;;    succ:       18 [100.0%]  (FALLTHRU)

;;   basic block 18, loop depth 0, count 0, freq 1503, maybe hot
;;    prev block 17, next block 1, flags: (NEW)
;;    pred:       17 [100.0%]  (FALLTHRU)
  # DEBUG delD.34843 => 0
  # DEBUG addD.34844 => 1
  # DEBUG D#111ptD.0 => &this_15(D)->_requestsD.34671
  # DEBUG thisD.36551 => D#111ptD.0
  # DEBUG thisD.36553 => NULL
  # DEBUG __xD.36552 => NULL
  # DEBUG thisD.36548 => &insert_pointD.34781
  # DEBUG __xD.36549 => &D.34845
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

}



;; Function void PriorityArbiter::RemoveRequest(int, int) (_ZN15PriorityArbiter13RemoveRequestEii, funcdef_no=1745, decl_uid=34688, cgraph_uid=417, symbol_order=418)


Pass statistics:
----------------

void PriorityArbiter::RemoveRequest(int, int) (struct PriorityArbiterD.33914 * const thisD.34855, intD.9 inD.34852, intD.9 labelD.34853)
{
  struct _List_node_baseD.14413 * erase_point$_M_nodeD.36426;
  static const charD.10 _ZZN15PriorityArbiter13RemoveRequestEiiE19__PRETTY_FUNCTION__D.34861[46] = "void PriorityArbiter::RemoveRequest(int, int)";
  struct _List_node_baseD.14413 * _1;
  intD.9 _6;
  long unsigned intD.14 _13;
  long unsigned intD.14 _14;
  intD.9 _19;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.36389 => &erase_pointD.34857
  # DEBUG erase_point$_M_nodeD.36426 => 0B
  # DEBUG D#88ptD.0 => &this_4(D)->_requestsD.34671
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  erase_point$_M_node_11 = MEM[(struct _List_node_baseD.14413 * *)this_4(D) + 104B];
  # DEBUG D#3ptD.0 => D#88ptD.0
  # DEBUG thisD.36386 => D#3ptD.0
  # DEBUG thisD.35820 => NULL
  # DEBUG __xD.35819 => erase_point$_M_node_11
  # DEBUG erase_point$_M_nodeD.36426 => erase_point$_M_node_11
  # DEBUG erase_point$_M_nodeD.36426 => erase_point$_M_node_11
  # DEBUG D#89ptD.0 => &this_4(D)->_requestsD.34671
  # DEBUG thisD.36393 => D#89ptD.0
  # PT = nonlocal 
  _1 = &MEM[(struct listD.33924 *)this_4(D) + 104B].D.34669._M_implD.34096._M_nodeD.34247.D.14630;
  # DEBUG thisD.36395 => NULL
  # DEBUG __xD.36394 => _1
  # DEBUG thisD.36390 => &erase_pointD.34857
  # DEBUG __xD.36391 => &D.34859
  if (_1 != erase_point$_M_node_11)
    goto <bb 3>;
  else
    goto <bb 9>;
;;    succ:       3 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.36398 => &erase_pointD.34857
  # DEBUG D#90ptD.0 => &MEM[(struct _NodeD.34784 *)erase_point$_M_node_11]._M_dataD.35072
  # DEBUG __rD.35832 => D#90ptD.0
  # VUSE <.MEM_3(D)>
  _19 = MEM[(struct sRequestD.33918 *)erase_point$_M_node_11 + 16B].inD.33920;
  if (in_7(D) > _19)
    goto <bb 4>;
  else
    goto <bb 10>;
;;    succ:       4 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 383, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 7732, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       8 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.36398 => &erase_pointD.34857
  # DEBUG D#90ptD.0 => &MEM[(struct _NodeD.34784 *)erase_point$_M_node_12]._M_dataD.35072
  # DEBUG __rD.35832 => D#90ptD.0
  # VUSE <.MEM_3(D)>
  _6 = MEM[(struct sRequestD.33918 *)erase_point$_M_node_12 + 16B].inD.33920;
  if (_6 < in_7(D))
    goto <bb 7>;
  else
    goto <bb 6>;
;;    succ:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 3866, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # erase_point$_M_node_27 = PHI <erase_point$_M_node_12(5)>
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 3866, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       5 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 9100, maybe hot
;;   Invalid sum of incoming frequencies 4249, should be 9100
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # erase_point$_M_node_25 = PHI <erase_point$_M_node_11(4), erase_point$_M_node_12(7)>
  # DEBUG erase_point$_M_nodeD.36426 => erase_point$_M_node_25
  # DEBUG D#89ptD.0 => &this_4(D)->_requestsD.34671
  # DEBUG thisD.36393 => D#89ptD.0
  # DEBUG thisD.36395 => NULL
  # DEBUG __xD.36394 => _1
  # DEBUG thisD.36390 => &erase_pointD.34857
  # DEBUG __xD.36391 => &D.34859
  # DEBUG thisD.36398 => &erase_pointD.34857
  # DEBUG D#90ptD.0 => &MEM[(struct _NodeD.34784 *)erase_point$_M_node_25]._M_dataD.35072
  # DEBUG __rD.35832 => D#90ptD.0
  # DEBUG thisD.36400 => &erase_pointD.34857
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  erase_point$_M_node_12 = erase_point$_M_node_25->_M_nextD.14415;
  # DEBUG erase_point$_M_nodeD.36426 => erase_point$_M_node_12
  # DEBUG erase_point$_M_nodeD.36426 => erase_point$_M_node_12
  # DEBUG D#89ptD.0 => &this_4(D)->_requestsD.34671
  # DEBUG thisD.36393 => D#89ptD.0
  # DEBUG thisD.36395 => NULL
  # DEBUG __xD.36394 => _1
  # DEBUG thisD.36390 => &erase_pointD.34857
  # DEBUG __xD.36391 => &D.34859
  if (_1 != erase_point$_M_node_12)
    goto <bb 5>;
  else
    goto <bb 9>;
;;    succ:       5 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 1503, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [15.0%]  (FALSE_VALUE,EXECUTABLE)
;;                2 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#91ptD.0 => &this_4(D)->_requestsD.34671
  # DEBUG thisD.36405 => D#91ptD.0
  # DEBUG thisD.36407 => NULL
  # DEBUG __xD.36406 => NULL
  # DEBUG thisD.36402 => &erase_pointD.34857
  # DEBUG __xD.36403 => &D.34860
  # DEBUG D#91ptD.0 => &this_4(D)->_requestsD.34671
  # DEBUG thisD.36405 => D#91ptD.0
  # DEBUG thisD.36407 => NULL
  # DEBUG __xD.36406 => NULL
  # DEBUG thisD.36402 => &erase_pointD.34857
  # DEBUG __xD.36403 => &D.34860
  # .MEM_10 = VDEF <.MEM_3(D)>
  # USE = nonlocal { D.34861 } (nonlocal, escaped)
  # CLB = nonlocal { D.34861 } (nonlocal, escaped)
  __assert_failD.14402 ("erase_point != _requests.end( )", "arbiters/prio_arb.cpp", 95, &_ZZN15PriorityArbiter13RemoveRequestEiiE19__PRETTY_FUNCTION__D.34861);
;;    succ:      

;;   basic block 10, loop depth 0, count 0, freq 4249, maybe hot
;;    prev block 9, next block 1, flags: (NEW, REACHABLE)
;;    pred:       3 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # erase_point$_M_node_29 = PHI <erase_point$_M_node_11(3), erase_point$_M_node_27(6)>
  # DEBUG D#91ptD.0 => &this_4(D)->_requestsD.34671
  # DEBUG thisD.36405 => D#91ptD.0
  # DEBUG thisD.36407 => NULL
  # DEBUG __xD.36406 => _1
  # DEBUG thisD.36402 => &erase_pointD.34857
  # DEBUG __xD.36403 => &D.34860
  # DEBUG D#91ptD.0 => &this_4(D)->_requestsD.34671
  # DEBUG thisD.36405 => D#91ptD.0
  # DEBUG thisD.36407 => NULL
  # DEBUG __xD.36406 => _1
  # DEBUG thisD.36402 => &erase_pointD.34857
  # DEBUG __xD.36403 => &D.34860
  # DEBUG D#94ptD.0 => &this_4(D)->_requestsD.34671
  # DEBUG thisD.36410 => D#94ptD.0
  # DEBUG __position$_M_nodeD.36436 => erase_point$_M_node_29
  # DEBUG D#93ptD.0 => erase_point$_M_node_29->_M_nextD.14415
  # DEBUG thisD.36414 => &__retD.36412
  # DEBUG __xD.36413 => D#93ptD.0
  # DEBUG __ret$_M_nodeD.36380 => D#93ptD.0
  # DEBUG thisD.36376 => &__positionD.36411
  # DEBUG thisD.36416 => D#94ptD.0
  # DEBUG __positionD.36382 => erase_point$_M_node_29
  # DEBUG __position$_M_nodeD.36375 => erase_point$_M_node_29
  # DEBUG D#83ptD.0 => &D#94ptD.0->D.34669
  # DEBUG D#21ptD.0 => D#83ptD.0
  # DEBUG __nD.36419 => 1
  # DEBUG thisD.36418 => D#21ptD.0
  # VUSE <.MEM_3(D)>
  _13 = MEM[(long unsigned intD.14 *)this_4(D) + 120B];
  # RANGE [0, 18446744073709551615]
  _14 = _13 + 18446744073709551615;
  # .MEM_15 = VDEF <.MEM_3(D)>
  MEM[(long unsigned intD.14 *)this_4(D) + 120B] = _14;
  # .MEM_16 = VDEF <.MEM_15>
  # USE = nonlocal { D.34861 } (nonlocal, escaped)
  # CLB = nonlocal { D.34861 } (nonlocal, escaped)
  _ZNSt8__detail15_List_node_base9_M_unhookEvD.14429 (erase_point$_M_node_29);
  # DEBUG __nD.36417 => erase_point$_M_node_29
  # DEBUG D#84ptD.0 => &MEM[(struct _NodeD.34345 *)erase_point$_M_node_29]._M_dataD.35072
  # DEBUG __rD.36357 => D#84ptD.0
  # DEBUG D#86ptD.0 => &D#94ptD.0->D.34669
  # DEBUG D#75ptD.0 => D#86ptD.0
  # DEBUG thisD.36356 => D#75ptD.0
  # DEBUG D#74ptD.0 => D#75ptD.0
  # DEBUG thisD.36258 => D#74ptD.0
  # DEBUG thisD.36250 => NULL
  # DEBUG D.36251 => NULL
  # DEBUG thisD.36248 => NULL
  # DEBUG thisD.36355 => D#17ptD.0
  # DEBUG __pD.36354 => D#18ptD.0
  # DEBUG thisD.36369 => NULL
  # DEBUG thisD.36353 => NULL
  # DEBUG D#85ptD.0 => &D#94ptD.0->D.34669
  # DEBUG thisD.36421 => D#85ptD.0
  # DEBUG __pD.36420 => erase_point$_M_node_29
  # DEBUG D#35ptD.0 => &D#85ptD.0->_M_implD.34096
  # DEBUG D#33ptD.0 => D#35ptD.0
  # DEBUG D#34ptD.0 => 1
  # DEBUG __pD.36424 => erase_point$_M_node_29
  # DEBUG thisD.36422 => D#33ptD.0
  # DEBUG D.36423 => D#34ptD.0
  # .MEM_17 = VDEF <.MEM_16>
  # USE = nonlocal { D.34861 } (nonlocal, escaped)
  # CLB = nonlocal { D.34861 } (nonlocal, escaped)
  _ZdlPvD.2766 (erase_point$_M_node_29);
  # DEBUG D#87ptD.0 => {CLOBBER}
  # DEBUG __ret$_M_nodeD.36380 => D#87ptD.0
  # DEBUG D.36429 => D#93ptD.0
  # DEBUG D#92ptD.0 => {CLOBBER}
  # DEBUG erase_point$_M_nodeD.36426 => D#92ptD.0
  # VUSE <.MEM_17>
  return;
;;    succ:       EXIT [100.0%] 

}


Creating dr for MEM[(struct _List_node_base * *)this_4(D) + 104B]
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 104
	step: 0
	aligned to: 256
	base_object: MEM[(struct _List_node_base * *)this_4(D) + 104B]
Creating dr for MEM[(struct sRequest *)erase_point$_M_node_11 + 16B].in
analyze_innermost: success.
	base_address: erase_point$_M_node_11
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest *)erase_point$_M_node_11 + 16B]
	Access function 0: 0
Creating dr for erase_point$_M_node_25->_M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *erase_point$_M_node_25
	Access function 0: 0
Creating dr for erase_point$_M_node_25->_M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *erase_point$_M_node_25
	Access function 0: 0
Creating dr for erase_point$_M_node_25->_M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *erase_point$_M_node_25
	Access function 0: 0
Creating dr for erase_point$_M_node_25->_M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *erase_point$_M_node_25
	Access function 0: 0
Creating dr for MEM[(struct sRequest *)erase_point$_M_node_12 + 16B].in
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest *)erase_point$_M_node_12 + 16B]
	Access function 0: 0
Creating dr for MEM[(struct sRequest *)erase_point$_M_node_12 + 16B].in
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest *)erase_point$_M_node_12 + 16B]
	Access function 0: 0
Creating dr for MEM[(long unsigned int *)this_4(D) + 120B]
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 120
	step: 0
	aligned to: 256
	base_object: MEM[(long unsigned int *)this_4(D) + 120B]
Creating dr for MEM[(long unsigned int *)this_4(D) + 120B]
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 120
	step: 0
	aligned to: 256
	base_object: MEM[(long unsigned int *)this_4(D) + 120B]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:11, LOOPS:1, CONDITIONS:4, STMTS:124)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_9 })
  {
    <bb 2>:
    # DEBUG this => &erase_point
    # DEBUG erase_point$_M_node => 0B
    # DEBUG D#88 => &this_4(D)->_requests
    # VUSE <.MEM_3(D)>
    erase_point$_M_node_11 = MEM[(struct _List_node_base * *)this_4(D) + 104B];
    # DEBUG D#3 => D#88
    # DEBUG this => D#3
    # DEBUG this => NULL
    # DEBUG __x => erase_point$_M_node_11
    # DEBUG erase_point$_M_node => erase_point$_M_node_11
    # DEBUG erase_point$_M_node => erase_point$_M_node_11
    # DEBUG D#89 => &this_4(D)->_requests
    # DEBUG this => D#89
    _1 = &MEM[(struct list *)this_4(D) + 104B].D.34669._M_impl._M_node.D.14630;
    # DEBUG this => NULL
    # DEBUG __x => _1
    # DEBUG this => &erase_point
    # DEBUG __x => &D.34859
    if (_1 != erase_point$_M_node_11)
      goto <bb 3>;
    else
      goto <bb 9>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 bb_10 })
  {
    <bb 3>:
    # DEBUG this => &erase_point
    # DEBUG D#90 => &MEM[(struct _Node *)erase_point$_M_node_11]._M_data
    # DEBUG __r => D#90
    # VUSE <.MEM_3(D)>
    _19 = MEM[(struct sRequest *)erase_point$_M_node_11 + 16B].in;
    if (in_7(D) > _19)
      goto <bb 4>;
    else
      goto <bb 10>;

  }
  bb_4 (preds = {bb_3 }, succs = {bb_8 })
  {
    <bb 4>:
    goto <bb 8>;

  }
  bb_6 (preds = {bb_5 }, succs = {bb_10 })
  {
    <bb 6>:
    # erase_point$_M_node_27 = PHI <erase_point$_M_node_12(5)>
    goto <bb 10>;

  }
  bb_9 (preds = {bb_8 bb_2 }, succs = {})
  {
    <bb 9>:
    # DEBUG D#91 => &this_4(D)->_requests
    # DEBUG this => D#91
    # DEBUG this => NULL
    # DEBUG __x => NULL
    # DEBUG this => &erase_point
    # DEBUG __x => &D.34860
    # DEBUG D#91 => &this_4(D)->_requests
    # DEBUG this => D#91
    # DEBUG this => NULL
    # DEBUG __x => NULL
    # DEBUG this => &erase_point
    # DEBUG __x => &D.34860
    # .MEM_10 = VDEF <.MEM_3(D)>
    __assert_fail ("erase_point != _requests.end( )", "arbiters/prio_arb.cpp", 95, &__PRETTY_FUNCTION__);

  }
  bb_10 (preds = {bb_3 bb_6 }, succs = {bb_1 })
  {
    <bb 10>:
    # erase_point$_M_node_29 = PHI <erase_point$_M_node_11(3), erase_point$_M_node_27(6)>
    # DEBUG D#91 => &this_4(D)->_requests
    # DEBUG this => D#91
    # DEBUG this => NULL
    # DEBUG __x => _1
    # DEBUG this => &erase_point
    # DEBUG __x => &D.34860
    # DEBUG D#91 => &this_4(D)->_requests
    # DEBUG this => D#91
    # DEBUG this => NULL
    # DEBUG __x => _1
    # DEBUG this => &erase_point
    # DEBUG __x => &D.34860
    # DEBUG D#94 => &this_4(D)->_requests
    # DEBUG this => D#94
    # DEBUG __position$_M_node => erase_point$_M_node_29
    # DEBUG D#93 => erase_point$_M_node_29->_M_next
    # DEBUG this => &__ret
    # DEBUG __x => D#93
    # DEBUG __ret$_M_node => D#93
    # DEBUG this => &__position
    # DEBUG this => D#94
    # DEBUG __position => erase_point$_M_node_29
    # DEBUG __position$_M_node => erase_point$_M_node_29
    # DEBUG D#83 => &D#94->D.34669
    # DEBUG D#21 => D#83
    # DEBUG __n => 1
    # DEBUG this => D#21
    # VUSE <.MEM_3(D)>
    _13 = MEM[(long unsigned int *)this_4(D) + 120B];
    _14 = _13 + 18446744073709551615;
    # .MEM_15 = VDEF <.MEM_3(D)>
    MEM[(long unsigned int *)this_4(D) + 120B] = _14;
    # .MEM_16 = VDEF <.MEM_15>
    std::__detail::_List_node_base::_M_unhook (erase_point$_M_node_29);
    # DEBUG __n => erase_point$_M_node_29
    # DEBUG D#84 => &MEM[(struct _Node *)erase_point$_M_node_29]._M_data
    # DEBUG __r => D#84
    # DEBUG D#86 => &D#94->D.34669
    # DEBUG D#75 => D#86
    # DEBUG this => D#75
    # DEBUG D#74 => D#75
    # DEBUG this => D#74
    # DEBUG this => NULL
    # DEBUG D.36251 => NULL
    # DEBUG this => NULL
    # DEBUG this => D#17
    # DEBUG __p => D#18
    # DEBUG this => NULL
    # DEBUG this => NULL
    # DEBUG D#85 => &D#94->D.34669
    # DEBUG this => D#85
    # DEBUG __p => erase_point$_M_node_29
    # DEBUG D#35 => &D#85->_M_impl
    # DEBUG D#33 => D#35
    # DEBUG D#34 => 1
    # DEBUG __p => erase_point$_M_node_29
    # DEBUG this => D#33
    # DEBUG D.36423 => D#34
    # .MEM_17 = VDEF <.MEM_16>
    operator delete (erase_point$_M_node_29);
    # DEBUG D#87 => {CLOBBER}
    # DEBUG __ret$_M_node => D#87
    # DEBUG D.36429 => D#93
    # DEBUG D#92 => {CLOBBER}
    # DEBUG erase_point$_M_node => D#92
    # VUSE <.MEM_17>
    return;

  }
  loop_1 (header = 8, latch = 7, niter = )
  {
    bb_5 (preds = {bb_8 }, succs = {bb_7 bb_6 })
    {
      <bb 5>:
      # DEBUG this => &erase_point
      # DEBUG D#90 => &MEM[(struct _Node *)erase_point$_M_node_12]._M_data
      # DEBUG __r => D#90
      # VUSE <.MEM_3(D)>
      _6 = MEM[(struct sRequest *)erase_point$_M_node_12 + 16B].in;
      if (_6 < in_7(D))
        goto <bb 7>;
      else
        goto <bb 6>;

    }
    bb_7 (preds = {bb_5 }, succs = {bb_8 })
    {
      <bb 7>:

    }
    bb_8 (preds = {bb_4 bb_7 }, succs = {bb_5 bb_9 })
    {
      <bb 8>:
      # erase_point$_M_node_25 = PHI <erase_point$_M_node_11(4), erase_point$_M_node_12(7)>
      # DEBUG erase_point$_M_node => erase_point$_M_node_25
      # DEBUG D#89 => &this_4(D)->_requests
      # DEBUG this => D#89
      # DEBUG this => NULL
      # DEBUG __x => _1
      # DEBUG this => &erase_point
      # DEBUG __x => &D.34859
      # DEBUG this => &erase_point
      # DEBUG D#90 => &MEM[(struct _Node *)erase_point$_M_node_25]._M_data
      # DEBUG __r => D#90
      # DEBUG this => &erase_point
      # VUSE <.MEM_3(D)>
      erase_point$_M_node_12 = erase_point$_M_node_25->_M_next;
      # DEBUG erase_point$_M_node => erase_point$_M_node_12
      # DEBUG erase_point$_M_node => erase_point$_M_node_12
      # DEBUG D#89 => &this_4(D)->_requests
      # DEBUG this => D#89
      # DEBUG this => NULL
      # DEBUG __x => _1
      # DEBUG this => &erase_point
      # DEBUG __x => &D.34859
      if (_1 != erase_point$_M_node_12)
        goto <bb 5>;
      else
        goto <bb 9>;

    }
  }
}

Pass statistics:
----------------

void PriorityArbiter::RemoveRequest(int, int) (struct PriorityArbiterD.33914 * const thisD.34855, intD.9 inD.34852, intD.9 labelD.34853)
{
  struct _List_node_baseD.14413 * erase_point$_M_nodeD.36426;
  static const charD.10 _ZZN15PriorityArbiter13RemoveRequestEiiE19__PRETTY_FUNCTION__D.34861[46] = "void PriorityArbiter::RemoveRequest(int, int)";
  struct _List_node_baseD.14413 * _1;
  intD.9 _6;
  long unsigned intD.14 _13;
  long unsigned intD.14 _14;
  intD.9 _19;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.36389 => &erase_pointD.34857
  # DEBUG erase_point$_M_nodeD.36426 => 0B
  # DEBUG D#88ptD.0 => &this_4(D)->_requestsD.34671
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  erase_point$_M_node_11 = MEM[(struct _List_node_baseD.14413 * *)this_4(D) + 104B];
  # DEBUG D#3ptD.0 => D#88ptD.0
  # DEBUG thisD.36386 => D#3ptD.0
  # DEBUG thisD.35820 => NULL
  # DEBUG __xD.35819 => erase_point$_M_node_11
  # DEBUG erase_point$_M_nodeD.36426 => erase_point$_M_node_11
  # DEBUG erase_point$_M_nodeD.36426 => erase_point$_M_node_11
  # DEBUG D#89ptD.0 => &this_4(D)->_requestsD.34671
  # DEBUG thisD.36393 => D#89ptD.0
  # PT = nonlocal 
  _1 = &MEM[(struct listD.33924 *)this_4(D) + 104B].D.34669._M_implD.34096._M_nodeD.34247.D.14630;
  # DEBUG thisD.36395 => NULL
  # DEBUG __xD.36394 => _1
  # DEBUG thisD.36390 => &erase_pointD.34857
  # DEBUG __xD.36391 => &D.34859
  if (_1 != erase_point$_M_node_11)
    goto <bb 3>;
  else
    goto <bb 9>;
;;    succ:       3 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.36398 => &erase_pointD.34857
  # DEBUG D#90ptD.0 => &MEM[(struct _NodeD.34784 *)erase_point$_M_node_11]._M_dataD.35072
  # DEBUG __rD.35832 => D#90ptD.0
  # VUSE <.MEM_3(D)>
  _19 = MEM[(struct sRequestD.33918 *)erase_point$_M_node_11 + 16B].inD.33920;
  if (in_7(D) > _19)
    goto <bb 4>;
  else
    goto <bb 10>;
;;    succ:       4 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 383, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 7732, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       8 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.36398 => &erase_pointD.34857
  # DEBUG D#90ptD.0 => &MEM[(struct _NodeD.34784 *)erase_point$_M_node_12]._M_dataD.35072
  # DEBUG __rD.35832 => D#90ptD.0
  # VUSE <.MEM_3(D)>
  _6 = MEM[(struct sRequestD.33918 *)erase_point$_M_node_12 + 16B].inD.33920;
  if (_6 < in_7(D))
    goto <bb 7>;
  else
    goto <bb 6>;
;;    succ:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 3866, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # erase_point$_M_node_27 = PHI <erase_point$_M_node_12(5)>
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 3866, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       5 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 9100, maybe hot
;;   Invalid sum of incoming frequencies 4249, should be 9100
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # erase_point$_M_node_25 = PHI <erase_point$_M_node_11(4), erase_point$_M_node_12(7)>
  # DEBUG erase_point$_M_nodeD.36426 => erase_point$_M_node_25
  # DEBUG D#89ptD.0 => &this_4(D)->_requestsD.34671
  # DEBUG thisD.36393 => D#89ptD.0
  # DEBUG thisD.36395 => NULL
  # DEBUG __xD.36394 => _1
  # DEBUG thisD.36390 => &erase_pointD.34857
  # DEBUG __xD.36391 => &D.34859
  # DEBUG thisD.36398 => &erase_pointD.34857
  # DEBUG D#90ptD.0 => &MEM[(struct _NodeD.34784 *)erase_point$_M_node_25]._M_dataD.35072
  # DEBUG __rD.35832 => D#90ptD.0
  # DEBUG thisD.36400 => &erase_pointD.34857
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  erase_point$_M_node_12 = erase_point$_M_node_25->_M_nextD.14415;
  # DEBUG erase_point$_M_nodeD.36426 => erase_point$_M_node_12
  # DEBUG erase_point$_M_nodeD.36426 => erase_point$_M_node_12
  # DEBUG D#89ptD.0 => &this_4(D)->_requestsD.34671
  # DEBUG thisD.36393 => D#89ptD.0
  # DEBUG thisD.36395 => NULL
  # DEBUG __xD.36394 => _1
  # DEBUG thisD.36390 => &erase_pointD.34857
  # DEBUG __xD.36391 => &D.34859
  if (_1 != erase_point$_M_node_12)
    goto <bb 5>;
  else
    goto <bb 9>;
;;    succ:       5 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 1503, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [15.0%]  (FALSE_VALUE,EXECUTABLE)
;;                2 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#91ptD.0 => &this_4(D)->_requestsD.34671
  # DEBUG thisD.36405 => D#91ptD.0
  # DEBUG thisD.36407 => NULL
  # DEBUG __xD.36406 => NULL
  # DEBUG thisD.36402 => &erase_pointD.34857
  # DEBUG __xD.36403 => &D.34860
  # DEBUG D#91ptD.0 => &this_4(D)->_requestsD.34671
  # DEBUG thisD.36405 => D#91ptD.0
  # DEBUG thisD.36407 => NULL
  # DEBUG __xD.36406 => NULL
  # DEBUG thisD.36402 => &erase_pointD.34857
  # DEBUG __xD.36403 => &D.34860
  # .MEM_10 = VDEF <.MEM_3(D)>
  # USE = nonlocal { D.34861 } (nonlocal, escaped)
  # CLB = nonlocal { D.34861 } (nonlocal, escaped)
  __assert_failD.14402 ("erase_point != _requests.end( )", "arbiters/prio_arb.cpp", 95, &_ZZN15PriorityArbiter13RemoveRequestEiiE19__PRETTY_FUNCTION__D.34861);
;;    succ:      

;;   basic block 10, loop depth 0, count 0, freq 4249, maybe hot
;;    prev block 9, next block 1, flags: (NEW, REACHABLE)
;;    pred:       3 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # erase_point$_M_node_29 = PHI <erase_point$_M_node_11(3), erase_point$_M_node_27(6)>
  # DEBUG D#91ptD.0 => &this_4(D)->_requestsD.34671
  # DEBUG thisD.36405 => D#91ptD.0
  # DEBUG thisD.36407 => NULL
  # DEBUG __xD.36406 => _1
  # DEBUG thisD.36402 => &erase_pointD.34857
  # DEBUG __xD.36403 => &D.34860
  # DEBUG D#91ptD.0 => &this_4(D)->_requestsD.34671
  # DEBUG thisD.36405 => D#91ptD.0
  # DEBUG thisD.36407 => NULL
  # DEBUG __xD.36406 => _1
  # DEBUG thisD.36402 => &erase_pointD.34857
  # DEBUG __xD.36403 => &D.34860
  # DEBUG D#94ptD.0 => &this_4(D)->_requestsD.34671
  # DEBUG thisD.36410 => D#94ptD.0
  # DEBUG __position$_M_nodeD.36436 => erase_point$_M_node_29
  # DEBUG D#93ptD.0 => erase_point$_M_node_29->_M_nextD.14415
  # DEBUG thisD.36414 => &__retD.36412
  # DEBUG __xD.36413 => D#93ptD.0
  # DEBUG __ret$_M_nodeD.36380 => D#93ptD.0
  # DEBUG thisD.36376 => &__positionD.36411
  # DEBUG thisD.36416 => D#94ptD.0
  # DEBUG __positionD.36382 => erase_point$_M_node_29
  # DEBUG __position$_M_nodeD.36375 => erase_point$_M_node_29
  # DEBUG D#83ptD.0 => &D#94ptD.0->D.34669
  # DEBUG D#21ptD.0 => D#83ptD.0
  # DEBUG __nD.36419 => 1
  # DEBUG thisD.36418 => D#21ptD.0
  # VUSE <.MEM_3(D)>
  _13 = MEM[(long unsigned intD.14 *)this_4(D) + 120B];
  # RANGE [0, 18446744073709551615]
  _14 = _13 + 18446744073709551615;
  # .MEM_15 = VDEF <.MEM_3(D)>
  MEM[(long unsigned intD.14 *)this_4(D) + 120B] = _14;
  # .MEM_16 = VDEF <.MEM_15>
  # USE = nonlocal { D.34861 } (nonlocal, escaped)
  # CLB = nonlocal { D.34861 } (nonlocal, escaped)
  _ZNSt8__detail15_List_node_base9_M_unhookEvD.14429 (erase_point$_M_node_29);
  # DEBUG __nD.36417 => erase_point$_M_node_29
  # DEBUG D#84ptD.0 => &MEM[(struct _NodeD.34345 *)erase_point$_M_node_29]._M_dataD.35072
  # DEBUG __rD.36357 => D#84ptD.0
  # DEBUG D#86ptD.0 => &D#94ptD.0->D.34669
  # DEBUG D#75ptD.0 => D#86ptD.0
  # DEBUG thisD.36356 => D#75ptD.0
  # DEBUG D#74ptD.0 => D#75ptD.0
  # DEBUG thisD.36258 => D#74ptD.0
  # DEBUG thisD.36250 => NULL
  # DEBUG D.36251 => NULL
  # DEBUG thisD.36248 => NULL
  # DEBUG thisD.36355 => D#17ptD.0
  # DEBUG __pD.36354 => D#18ptD.0
  # DEBUG thisD.36369 => NULL
  # DEBUG thisD.36353 => NULL
  # DEBUG D#85ptD.0 => &D#94ptD.0->D.34669
  # DEBUG thisD.36421 => D#85ptD.0
  # DEBUG __pD.36420 => erase_point$_M_node_29
  # DEBUG D#35ptD.0 => &D#85ptD.0->_M_implD.34096
  # DEBUG D#33ptD.0 => D#35ptD.0
  # DEBUG D#34ptD.0 => 1
  # DEBUG __pD.36424 => erase_point$_M_node_29
  # DEBUG thisD.36422 => D#33ptD.0
  # DEBUG D.36423 => D#34ptD.0
  # .MEM_17 = VDEF <.MEM_16>
  # USE = nonlocal { D.34861 } (nonlocal, escaped)
  # CLB = nonlocal { D.34861 } (nonlocal, escaped)
  _ZdlPvD.2766 (erase_point$_M_node_29);
  # DEBUG D#87ptD.0 => {CLOBBER}
  # DEBUG __ret$_M_nodeD.36380 => D#87ptD.0
  # DEBUG D.36429 => D#93ptD.0
  # DEBUG D#92ptD.0 => {CLOBBER}
  # DEBUG erase_point$_M_nodeD.36426 => D#92ptD.0
  # VUSE <.MEM_17>
  return;
;;    succ:       EXIT [100.0%] 

}



;; Function void PriorityArbiter::Arbitrate() (_ZN15PriorityArbiter9ArbitrateEv, funcdef_no=1747, decl_uid=34692, cgraph_uid=419, symbol_order=420)


Pass statistics:
----------------

void PriorityArbiter::Arbitrate() (struct PriorityArbiterD.33914 * const thisD.34870)
{
  struct _List_node_baseD.14413 * p$_M_nodeD.35886;
  boolD.2757 wrappedD.34875;
  intD.9 max_priD.34874;
  intD.9 max_indexD.34873;
  struct _List_node_baseD.14413 * _19;
  intD.9 _20;
  intD.9 _23;
  intD.9 _28;
  intD.9 _29;
  intD.9 _30;
  boolD.2757 _33;
  boolD.2757 _41;
  boolD.2757 _42;
  intD.9 pretmp_46;

;;   basic block 2, loop depth 0, count 0, freq 605, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.35847 => &pD.34872
  # DEBUG p$_M_nodeD.35886 => 0B
  # DEBUG D#4ptD.0 => &this_18(D)->_requestsD.34671
  # DEBUG thisD.35842 => D#4ptD.0
  # PT = nonlocal 
  _19 = &MEM[(struct listD.33924 *)this_18(D) + 104B].D.34669._M_implD.34096._M_nodeD.34247.D.14630;
  # DEBUG thisD.35844 => NULL
  # DEBUG __xD.35843 => _19
  # DEBUG D#5ptD.0 => &this_18(D)->_requestsD.34671
  # VUSE <.MEM_17(D)>
  # PT = nonlocal escaped 
  p$_M_node_34 = MEM[(struct _List_node_baseD.14413 * *)this_18(D) + 104B];
  # DEBUG D#3ptD.0 => D#5ptD.0
  # DEBUG thisD.35839 => D#3ptD.0
  # DEBUG thisD.35820 => NULL
  # DEBUG __xD.35819 => p$_M_node_34
  # DEBUG thisD.35835 => &D.34876
  # DEBUG __xD.35836 => &D.34877
  if (_19 != p$_M_node_34)
    goto <bb 3>;
  else
    goto <bb 14>;
;;    succ:       3 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 514, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_17(D)>
  pretmp_46 = this_18(D)->_rr_ptrD.33916;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 4857, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                18 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # p$_M_node_14 = PHI <p$_M_node_34(3), p$_M_node_35(18)>
  # DEBUG p$_M_nodeD.35886 => p$_M_node_14
  # DEBUG D#7ptD.0 => &this_18(D)->_requestsD.34671
  # DEBUG thisD.35855 => D#7ptD.0
  # DEBUG thisD.35857 => NULL
  # DEBUG __xD.35856 => _19
  # DEBUG thisD.35852 => &pD.34872
  # DEBUG __xD.35853 => &D.34879
  # DEBUG thisD.35860 => &pD.34872
  # DEBUG D#8ptD.0 => &MEM[(struct _NodeD.34784 *)p$_M_node_14]._M_dataD.35072
  # DEBUG __rD.35832 => D#8ptD.0
  # VUSE <.MEM_17(D)>
  _20 = MEM[(struct sRequestD.33918 *)p$_M_node_14 + 16B].inD.33920;
  if (_20 < pretmp_46)
    goto <bb 16>;
  else
    goto <bb 19>;
;;    succ:       16 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 10000, maybe hot
;;   Invalid sum of incoming frequencies 12774, should be 10000
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # max_index_1 = PHI <-1(20), max_index_2(10)>
  # max_pri_3 = PHI <0(20), max_pri_4(10)>
  # RANGE [0, 1]
  # wrapped_5 = PHI <0(20), wrapped_6(10)>
  # PT = nonlocal escaped 
  # p$_M_node_40 = PHI <p$_M_node_13(20), p$_M_node_36(10)>
  # DEBUG p$_M_nodeD.35886 => p$_M_node_40
  # DEBUG wrappedD.34875 => wrapped_5
  # DEBUG max_priD.34874 => max_pri_3
  # DEBUG max_indexD.34873 => max_index_1
  if (wrapped_5 != 0)
    goto <bb 6>;
  else
    goto <bb 21>;
;;    succ:       21 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                6 [50.0%]  (TRUE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 5000, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.35864 => &pD.34872
  # DEBUG D#14ptD.0 => &MEM[(struct _NodeD.34784 *)p$_M_node_40]._M_dataD.35072
  # DEBUG __rD.35832 => D#14ptD.0
  # VUSE <.MEM_17(D)>
  _23 = MEM[(struct sRequestD.33918 *)p$_M_node_40 + 16B].inD.33920;
  if (_23 < pretmp_46)
    goto <bb 23>;
  else
    goto <bb 11>;
;;    succ:       23 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 1367, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       21 [27.4%]  (TRUE_VALUE,EXECUTABLE)
  if (wrapped_5 != 0)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 (TRUE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 (TRUE_VALUE,EXECUTABLE)
  # max_index_62 = PHI <max_index_1(7)>
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 9486, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       21 [72.6%]  (FALSE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALSE_VALUE,EXECUTABLE)
;;                23 [98.6%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 1]
  # wrapped_6 = PHI <wrapped_5(21), 1(7), wrapped_5(23)>
  # PT = nonlocal escaped 
  # p$_M_node_39 = PHI <p$_M_node_40(21), p$_M_node_34(7), p$_M_node_40(23)>
  # DEBUG p$_M_nodeD.35886 => p$_M_node_39
  # DEBUG wrappedD.34875 => wrapped_6
  # DEBUG thisD.35878 => &pD.34872
  # DEBUG D#11ptD.0 => &MEM[(struct _NodeD.34784 *)p$_M_node_39]._M_dataD.35072
  # DEBUG __rD.35832 => D#11ptD.0
  # VUSE <.MEM_17(D)>
  max_pri_25 = MEM[(struct sRequestD.33918 *)p$_M_node_39 + 16B].priD.33922;
  # RANGE [0, 1]
  _41 = max_index_1 == -1;
  _42 = max_pri_3 < max_pri_25;
  _33 = _41 | _42;
  if (_33 != 0)
    goto <bb 22>;
  else
    goto <bb 10>;
;;    succ:       22 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 9486, maybe hot
;;   Invalid sum of incoming frequencies 12901, should be 9486
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [72.0%]  (FALSE_VALUE,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
  # max_index_2 = PHI <max_index_1(9), max_index_26(22)>
  # max_pri_4 = PHI <max_pri_3(9), max_pri_25(22)>
  # DEBUG max_priD.34874 => max_pri_4
  # DEBUG max_indexD.34873 => max_index_2
  # DEBUG thisD.35884 => &pD.34872
  # VUSE <.MEM_17(D)>
  # PT = nonlocal escaped 
  p$_M_node_36 = p$_M_node_39->_M_nextD.14415;
  # DEBUG p$_M_nodeD.35886 => p$_M_node_36
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       6 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # max_index_66 = PHI <max_index_1(6)>
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 514, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                24 [100.0%]  (FALLTHRU,EXECUTABLE)
  # max_index_43 = PHI <max_index_62(8), max_index_66(11), max_index_56(24)>
  # .MEM_27 = VDEF <.MEM_17(D)>
  this_18(D)->_matchD.34672 = max_index_43;
  if (max_index_43 != -1)
    goto <bb 13>;
  else
    goto <bb 15>;
;;    succ:       13 [72.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [28.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 370, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [72.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [-2147483647, 2147483647]
  _28 = max_index_43 + 1;
  # VUSE <.MEM_27>
  _29 = this_18(D)->_inputsD.33917;
  _30 = _28 % _29;
  # .MEM_31 = VDEF <.MEM_27>
  this_18(D)->_rr_ptrD.33916 = _30;
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 91, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       2 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_32 = VDEF <.MEM_17(D)>
  this_18(D)->_matchD.34672 = -1;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 605, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [28.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_16 = PHI <.MEM_31(13), .MEM_32(14), .MEM_27(12)>
  # DEBUG D#15ptD.0 => {CLOBBER}
  # DEBUG p$_M_nodeD.35886 => D#15ptD.0
  # VUSE <.MEM_16>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 16, loop depth 1, count 0, freq 5202, maybe hot
;;   Invalid sum of incoming frequencies 2429, should be 5202
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       4 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.35862 => &pD.34872
  # VUSE <.MEM_17(D)>
  # PT = nonlocal escaped 
  p$_M_node_35 = p$_M_node_14->_M_nextD.14415;
  # DEBUG p$_M_nodeD.35886 => p$_M_node_35
  # DEBUG p$_M_nodeD.35886 => p$_M_node_35
  # DEBUG D#7ptD.0 => &this_18(D)->_requestsD.34671
  # DEBUG thisD.35855 => D#7ptD.0
  # DEBUG thisD.35857 => NULL
  # DEBUG __xD.35856 => _19
  # DEBUG thisD.35852 => &pD.34872
  # DEBUG __xD.35853 => &D.34879
  if (_19 != p$_M_node_35)
    goto <bb 18>;
  else
    goto <bb 17>;
;;    succ:       18 [83.5%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [16.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 859, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [16.5%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # p$_M_node_44 = PHI <p$_M_node_35(16)>
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 1, count 0, freq 4343, maybe hot
;;    prev block 17, next block 19, flags: (NEW)
;;    pred:       16 [83.5%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 2429, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       4 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # p$_M_node_45 = PHI <p$_M_node_14(4)>
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 3288, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       17 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # p$_M_node_13 = PHI <p$_M_node_44(17), p$_M_node_45(19)>
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 1, count 0, freq 5000, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       5 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#9ptD.0 => &this_18(D)->_requestsD.34671
  # DEBUG thisD.35869 => D#9ptD.0
  # DEBUG thisD.35871 => NULL
  # DEBUG __xD.35870 => _19
  # DEBUG thisD.35866 => &pD.34872
  # DEBUG __xD.35867 => &D.34880
  if (_19 == p$_M_node_40)
    goto <bb 7>;
  else
    goto <bb 9>;
;;    succ:       7 [27.4%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [72.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 6071, maybe hot
;;   Invalid sum of incoming frequencies 2656, should be 6071
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       9 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.35882 => &pD.34872
  # DEBUG D#12ptD.0 => &MEM[(struct _NodeD.34784 *)p$_M_node_39]._M_dataD.35072
  # DEBUG __rD.35832 => D#12ptD.0
  # DEBUG max_priD.34874 => max_pri_25
  # DEBUG thisD.35880 => &pD.34872
  # DEBUG D#13ptD.0 => &MEM[(struct _NodeD.34784 *)p$_M_node_39]._M_dataD.35072
  # DEBUG __rD.35832 => D#13ptD.0
  # VUSE <.MEM_17(D)>
  max_index_26 = MEM[(struct sRequestD.33918 *)p$_M_node_39 + 16B].inD.33920;
  # DEBUG max_indexD.34873 => max_index_26
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       6 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#9ptD.0 => &this_18(D)->_requestsD.34671
  # DEBUG thisD.35869 => D#9ptD.0
  # DEBUG thisD.35871 => NULL
  # DEBUG __xD.35870 => _19
  # DEBUG thisD.35866 => &pD.34872
  # DEBUG __xD.35867 => &D.34880
  if (_19 == p$_M_node_40)
    goto <bb 24>;
  else
    goto <bb 9>;
;;    succ:       24 [1.4%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [98.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 65, maybe hot
;;    prev block 23, next block 1, flags: (NEW)
;;    pred:       23 [1.4%]  (TRUE_VALUE,EXECUTABLE)
  # max_index_56 = PHI <max_index_1(23)>
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

}


Creating dr for MEM[(struct _List_node_base * *)this_18(D) + 104B]
analyze_innermost: success.
	base_address: this_18(D)
	offset from base address: 0
	constant offset from base address: 104
	step: 0
	aligned to: 256
	base_object: MEM[(struct _List_node_base * *)this_18(D) + 104B]
Creating dr for this_18(D)->_rr_ptr
analyze_innermost: success.
	base_address: this_18(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: *this_18(D)
	Access function 0: 768
Creating dr for MEM[(struct sRequest *)p$_M_node_14 + 16B].in
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest *)p$_M_node_14 + 16B]
	Access function 0: 0
Creating dr for MEM[(struct sRequest *)p$_M_node_14 + 16B].in
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest *)p$_M_node_14 + 16B]
	Access function 0: 0
Creating dr for MEM[(struct sRequest *)p$_M_node_14 + 16B].in
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest *)p$_M_node_14 + 16B]
	Access function 0: 0
Creating dr for MEM[(struct sRequest *)p$_M_node_14 + 16B].in
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest *)p$_M_node_14 + 16B]
	Access function 0: 0
Creating dr for p$_M_node_14->_M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *p$_M_node_14
	Access function 0: 0
Creating dr for p$_M_node_14->_M_next
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *p$_M_node_14
	Access function 0: 0
Creating dr for this_18(D)->_match
analyze_innermost: success.
	base_address: this_18(D)
	offset from base address: 0
	constant offset from base address: 128
	step: 0
	aligned to: 256
	base_object: *this_18(D)
	Access function 0: 1024

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:26, LOOPS:2, CONDITIONS:10, STMTS:99)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_14 })
  {
    <bb 2>:
    # DEBUG this => &p
    # DEBUG p$_M_node => 0B
    # DEBUG D#4 => &this_18(D)->_requests
    # DEBUG this => D#4
    _19 = &MEM[(struct list *)this_18(D) + 104B].D.34669._M_impl._M_node.D.14630;
    # DEBUG this => NULL
    # DEBUG __x => _19
    # DEBUG D#5 => &this_18(D)->_requests
    # VUSE <.MEM_17(D)>
    p$_M_node_34 = MEM[(struct _List_node_base * *)this_18(D) + 104B];
    # DEBUG D#3 => D#5
    # DEBUG this => D#3
    # DEBUG this => NULL
    # DEBUG __x => p$_M_node_34
    # DEBUG this => &D.34876
    # DEBUG __x => &D.34877
    if (_19 != p$_M_node_34)
      goto <bb 3>;
    else
      goto <bb 14>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 })
  {
    <bb 3>:
    # VUSE <.MEM_17(D)>
    pretmp_46 = this_18(D)->_rr_ptr;

  }
  bb_8 (preds = {bb_7 }, succs = {bb_12 })
  {
    <bb 8>:
    # max_index_62 = PHI <max_index_1(7)>
    goto <bb 12>;

  }
  bb_11 (preds = {bb_6 }, succs = {bb_12 })
  {
    <bb 11>:
    # max_index_66 = PHI <max_index_1(6)>

  }
  bb_12 (preds = {bb_8 bb_11 bb_24 }, succs = {bb_13 bb_15 })
  {
    <bb 12>:
    # max_index_43 = PHI <max_index_62(8), max_index_66(11), max_index_56(24)>
    # .MEM_27 = VDEF <.MEM_17(D)>
    this_18(D)->_match = max_index_43;
    if (max_index_43 != -1)
      goto <bb 13>;
    else
      goto <bb 15>;

  }
  bb_13 (preds = {bb_12 }, succs = {bb_15 })
  {
    <bb 13>:
    _28 = max_index_43 + 1;
    # VUSE <.MEM_27>
    _29 = this_18(D)->_inputs;
    _30 = _28 % _29;
    # .MEM_31 = VDEF <.MEM_27>
    this_18(D)->_rr_ptr = _30;
    goto <bb 15>;

  }
  bb_14 (preds = {bb_2 }, succs = {bb_15 })
  {
    <bb 14>:
    # .MEM_32 = VDEF <.MEM_17(D)>
    this_18(D)->_match = -1;

  }
  bb_15 (preds = {bb_13 bb_14 bb_12 }, succs = {bb_25 })
  {
    <bb 15>:
    # .MEM_16 = PHI <.MEM_31(13), .MEM_32(14), .MEM_27(12)>

  }
  bb_25 (preds = {bb_15 }, succs = {bb_1 })
  {
    <bb 25>:
    # DEBUG D#15 => {CLOBBER}
    # DEBUG p$_M_node => D#15
    # VUSE <.MEM_16>
    return;

  }
  bb_17 (preds = {bb_16 }, succs = {bb_20 })
  {
    <bb 17>:
    # p$_M_node_44 = PHI <p$_M_node_35(16)>
    goto <bb 20>;

  }
  bb_19 (preds = {bb_4 }, succs = {bb_20 })
  {
    <bb 19>:
    # p$_M_node_45 = PHI <p$_M_node_14(4)>

  }
  bb_20 (preds = {bb_17 bb_19 }, succs = {bb_5 })
  {
    <bb 20>:
    # p$_M_node_13 = PHI <p$_M_node_44(17), p$_M_node_45(19)>
    goto <bb 5>;

  }
  bb_24 (preds = {bb_23 }, succs = {bb_12 })
  {
    <bb 24>:
    # max_index_56 = PHI <max_index_1(23)>
    goto <bb 12>;

  }
  loop_2 (header = 5, latch = 10, niter = )
  {
    bb_5 (preds = {bb_20 bb_10 }, succs = {bb_21 bb_6 })
    {
      <bb 5>:
      # max_index_1 = PHI <-1(20), max_index_2(10)>
      # max_pri_3 = PHI <0(20), max_pri_4(10)>
      # wrapped_5 = PHI <0(20), wrapped_6(10)>
      # p$_M_node_40 = PHI <p$_M_node_13(20), p$_M_node_36(10)>
      # DEBUG p$_M_node => p$_M_node_40
      # DEBUG wrapped => wrapped_5
      # DEBUG max_pri => max_pri_3
      # DEBUG max_index => max_index_1
      if (wrapped_5 != 0)
        goto <bb 6>;
      else
        goto <bb 21>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_23 bb_11 })
    {
      <bb 6>:
      # DEBUG this => &p
      # DEBUG D#14 => &MEM[(struct _Node *)p$_M_node_40]._M_data
      # DEBUG __r => D#14
      # VUSE <.MEM_17(D)>
      _23 = MEM[(struct sRequest *)p$_M_node_40 + 16B].in;
      if (_23 < pretmp_46)
        goto <bb 23>;
      else
        goto <bb 11>;

    }
    bb_7 (preds = {bb_21 }, succs = {bb_8 bb_9 })
    {
      <bb 7>:
      if (wrapped_5 != 0)
        goto <bb 8>;
      else
        goto <bb 9>;

    }
    bb_9 (preds = {bb_21 bb_7 bb_23 }, succs = {bb_22 bb_10 })
    {
      <bb 9>:
      # wrapped_6 = PHI <wrapped_5(21), 1(7), wrapped_5(23)>
      # p$_M_node_39 = PHI <p$_M_node_40(21), p$_M_node_34(7), p$_M_node_40(23)>
      # DEBUG p$_M_node => p$_M_node_39
      # DEBUG wrapped => wrapped_6
      # DEBUG this => &p
      # DEBUG D#11 => &MEM[(struct _Node *)p$_M_node_39]._M_data
      # DEBUG __r => D#11
      # VUSE <.MEM_17(D)>
      max_pri_25 = MEM[(struct sRequest *)p$_M_node_39 + 16B].pri;
      _41 = max_index_1 == -1;
      _42 = max_pri_3 < max_pri_25;
      _33 = _41 | _42;
      if (_33 != 0)
        goto <bb 22>;
      else
        goto <bb 10>;

    }
    bb_10 (preds = {bb_9 bb_22 }, succs = {bb_5 })
    {
      <bb 10>:
      # max_index_2 = PHI <max_index_1(9), max_index_26(22)>
      # max_pri_4 = PHI <max_pri_3(9), max_pri_25(22)>
      # DEBUG max_pri => max_pri_4
      # DEBUG max_index => max_index_2
      # DEBUG this => &p
      # VUSE <.MEM_17(D)>
      p$_M_node_36 = p$_M_node_39->_M_next;
      # DEBUG p$_M_node => p$_M_node_36
      goto <bb 5>;

    }
    bb_21 (preds = {bb_5 }, succs = {bb_7 bb_9 })
    {
      <bb 21>:
      # DEBUG D#9 => &this_18(D)->_requests
      # DEBUG this => D#9
      # DEBUG this => NULL
      # DEBUG __x => _19
      # DEBUG this => &p
      # DEBUG __x => &D.34880
      if (_19 == p$_M_node_40)
        goto <bb 7>;
      else
        goto <bb 9>;

    }
    bb_22 (preds = {bb_9 }, succs = {bb_10 })
    {
      <bb 22>:
      # DEBUG this => &p
      # DEBUG D#12 => &MEM[(struct _Node *)p$_M_node_39]._M_data
      # DEBUG __r => D#12
      # DEBUG max_pri => max_pri_25
      # DEBUG this => &p
      # DEBUG D#13 => &MEM[(struct _Node *)p$_M_node_39]._M_data
      # DEBUG __r => D#13
      # VUSE <.MEM_17(D)>
      max_index_26 = MEM[(struct sRequest *)p$_M_node_39 + 16B].in;
      # DEBUG max_index => max_index_26
      goto <bb 10>;

    }
    bb_23 (preds = {bb_6 }, succs = {bb_24 bb_9 })
    {
      <bb 23>:
      # DEBUG D#9 => &this_18(D)->_requests
      # DEBUG this => D#9
      # DEBUG this => NULL
      # DEBUG __x => _19
      # DEBUG this => &p
      # DEBUG __x => &D.34880
      if (_19 == p$_M_node_40)
        goto <bb 24>;
      else
        goto <bb 9>;

    }
  }
  loop_1 (header = 4, latch = 18, niter = )
  {
    bb_4 (preds = {bb_3 bb_18 }, succs = {bb_16 bb_19 })
    {
      <bb 4>:
      # p$_M_node_14 = PHI <p$_M_node_34(3), p$_M_node_35(18)>
      # DEBUG p$_M_node => p$_M_node_14
      # DEBUG D#7 => &this_18(D)->_requests
      # DEBUG this => D#7
      # DEBUG this => NULL
      # DEBUG __x => _19
      # DEBUG this => &p
      # DEBUG __x => &D.34879
      # DEBUG this => &p
      # DEBUG D#8 => &MEM[(struct _Node *)p$_M_node_14]._M_data
      # DEBUG __r => D#8
      # VUSE <.MEM_17(D)>
      _20 = MEM[(struct sRequest *)p$_M_node_14 + 16B].in;
      if (_20 < pretmp_46)
        goto <bb 16>;
      else
        goto <bb 19>;

    }
    bb_16 (preds = {bb_4 }, succs = {bb_18 bb_17 })
    {
      <bb 16>:
      # DEBUG this => &p
      # VUSE <.MEM_17(D)>
      p$_M_node_35 = p$_M_node_14->_M_next;
      # DEBUG p$_M_node => p$_M_node_35
      # DEBUG p$_M_node => p$_M_node_35
      # DEBUG D#7 => &this_18(D)->_requests
      # DEBUG this => D#7
      # DEBUG this => NULL
      # DEBUG __x => _19
      # DEBUG this => &p
      # DEBUG __x => &D.34879
      if (_19 != p$_M_node_35)
        goto <bb 18>;
      else
        goto <bb 17>;

    }
    bb_18 (preds = {bb_16 }, succs = {bb_4 })
    {
      <bb 18>:
      goto <bb 4>;

    }
  }
}

Pass statistics:
----------------

void PriorityArbiter::Arbitrate() (struct PriorityArbiterD.33914 * const thisD.34870)
{
  struct _List_node_baseD.14413 * p$_M_nodeD.35886;
  boolD.2757 wrappedD.34875;
  intD.9 max_priD.34874;
  intD.9 max_indexD.34873;
  struct _List_node_baseD.14413 * _19;
  intD.9 _20;
  intD.9 _23;
  intD.9 _28;
  intD.9 _29;
  intD.9 _30;
  boolD.2757 _33;
  boolD.2757 _41;
  boolD.2757 _42;
  intD.9 pretmp_46;

;;   basic block 2, loop depth 0, count 0, freq 605, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.35847 => &pD.34872
  # DEBUG p$_M_nodeD.35886 => 0B
  # DEBUG D#4ptD.0 => &this_18(D)->_requestsD.34671
  # DEBUG thisD.35842 => D#4ptD.0
  # PT = nonlocal 
  _19 = &MEM[(struct listD.33924 *)this_18(D) + 104B].D.34669._M_implD.34096._M_nodeD.34247.D.14630;
  # DEBUG thisD.35844 => NULL
  # DEBUG __xD.35843 => _19
  # DEBUG D#5ptD.0 => &this_18(D)->_requestsD.34671
  # VUSE <.MEM_17(D)>
  # PT = nonlocal escaped 
  p$_M_node_34 = MEM[(struct _List_node_baseD.14413 * *)this_18(D) + 104B];
  # DEBUG D#3ptD.0 => D#5ptD.0
  # DEBUG thisD.35839 => D#3ptD.0
  # DEBUG thisD.35820 => NULL
  # DEBUG __xD.35819 => p$_M_node_34
  # DEBUG thisD.35835 => &D.34876
  # DEBUG __xD.35836 => &D.34877
  if (_19 != p$_M_node_34)
    goto <bb 3>;
  else
    goto <bb 14>;
;;    succ:       3 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 514, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_17(D)>
  pretmp_46 = this_18(D)->_rr_ptrD.33916;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 4857, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                18 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # p$_M_node_14 = PHI <p$_M_node_34(3), p$_M_node_35(18)>
  # DEBUG p$_M_nodeD.35886 => p$_M_node_14
  # DEBUG D#7ptD.0 => &this_18(D)->_requestsD.34671
  # DEBUG thisD.35855 => D#7ptD.0
  # DEBUG thisD.35857 => NULL
  # DEBUG __xD.35856 => _19
  # DEBUG thisD.35852 => &pD.34872
  # DEBUG __xD.35853 => &D.34879
  # DEBUG thisD.35860 => &pD.34872
  # DEBUG D#8ptD.0 => &MEM[(struct _NodeD.34784 *)p$_M_node_14]._M_dataD.35072
  # DEBUG __rD.35832 => D#8ptD.0
  # VUSE <.MEM_17(D)>
  _20 = MEM[(struct sRequestD.33918 *)p$_M_node_14 + 16B].inD.33920;
  if (_20 < pretmp_46)
    goto <bb 16>;
  else
    goto <bb 19>;
;;    succ:       16 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 10000, maybe hot
;;   Invalid sum of incoming frequencies 12774, should be 10000
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # max_index_1 = PHI <-1(20), max_index_2(10)>
  # max_pri_3 = PHI <0(20), max_pri_4(10)>
  # RANGE [0, 1]
  # wrapped_5 = PHI <0(20), wrapped_6(10)>
  # PT = nonlocal escaped 
  # p$_M_node_40 = PHI <p$_M_node_13(20), p$_M_node_36(10)>
  # DEBUG p$_M_nodeD.35886 => p$_M_node_40
  # DEBUG wrappedD.34875 => wrapped_5
  # DEBUG max_priD.34874 => max_pri_3
  # DEBUG max_indexD.34873 => max_index_1
  if (wrapped_5 != 0)
    goto <bb 6>;
  else
    goto <bb 21>;
;;    succ:       21 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                6 [50.0%]  (TRUE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 5000, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.35864 => &pD.34872
  # DEBUG D#14ptD.0 => &MEM[(struct _NodeD.34784 *)p$_M_node_40]._M_dataD.35072
  # DEBUG __rD.35832 => D#14ptD.0
  # VUSE <.MEM_17(D)>
  _23 = MEM[(struct sRequestD.33918 *)p$_M_node_40 + 16B].inD.33920;
  if (_23 < pretmp_46)
    goto <bb 23>;
  else
    goto <bb 11>;
;;    succ:       23 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 1367, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       21 [27.4%]  (TRUE_VALUE,EXECUTABLE)
  if (wrapped_5 != 0)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 (TRUE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 (TRUE_VALUE,EXECUTABLE)
  # max_index_62 = PHI <max_index_1(7)>
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 9486, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       21 [72.6%]  (FALSE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALSE_VALUE,EXECUTABLE)
;;                23 [98.6%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 1]
  # wrapped_6 = PHI <wrapped_5(21), 1(7), wrapped_5(23)>
  # PT = nonlocal escaped 
  # p$_M_node_39 = PHI <p$_M_node_40(21), p$_M_node_34(7), p$_M_node_40(23)>
  # DEBUG p$_M_nodeD.35886 => p$_M_node_39
  # DEBUG wrappedD.34875 => wrapped_6
  # DEBUG thisD.35878 => &pD.34872
  # DEBUG D#11ptD.0 => &MEM[(struct _NodeD.34784 *)p$_M_node_39]._M_dataD.35072
  # DEBUG __rD.35832 => D#11ptD.0
  # VUSE <.MEM_17(D)>
  max_pri_25 = MEM[(struct sRequestD.33918 *)p$_M_node_39 + 16B].priD.33922;
  # RANGE [0, 1]
  _41 = max_index_1 == -1;
  _42 = max_pri_3 < max_pri_25;
  _33 = _41 | _42;
  if (_33 != 0)
    goto <bb 22>;
  else
    goto <bb 10>;
;;    succ:       22 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 9486, maybe hot
;;   Invalid sum of incoming frequencies 12901, should be 9486
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [72.0%]  (FALSE_VALUE,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
  # max_index_2 = PHI <max_index_1(9), max_index_26(22)>
  # max_pri_4 = PHI <max_pri_3(9), max_pri_25(22)>
  # DEBUG max_priD.34874 => max_pri_4
  # DEBUG max_indexD.34873 => max_index_2
  # DEBUG thisD.35884 => &pD.34872
  # VUSE <.MEM_17(D)>
  # PT = nonlocal escaped 
  p$_M_node_36 = p$_M_node_39->_M_nextD.14415;
  # DEBUG p$_M_nodeD.35886 => p$_M_node_36
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       6 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # max_index_66 = PHI <max_index_1(6)>
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 514, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                24 [100.0%]  (FALLTHRU,EXECUTABLE)
  # max_index_43 = PHI <max_index_62(8), max_index_66(11), max_index_56(24)>
  # .MEM_27 = VDEF <.MEM_17(D)>
  this_18(D)->_matchD.34672 = max_index_43;
  if (max_index_43 != -1)
    goto <bb 13>;
  else
    goto <bb 15>;
;;    succ:       13 [72.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [28.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 370, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [72.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [-2147483647, 2147483647]
  _28 = max_index_43 + 1;
  # VUSE <.MEM_27>
  _29 = this_18(D)->_inputsD.33917;
  _30 = _28 % _29;
  # .MEM_31 = VDEF <.MEM_27>
  this_18(D)->_rr_ptrD.33916 = _30;
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 91, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       2 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_32 = VDEF <.MEM_17(D)>
  this_18(D)->_matchD.34672 = -1;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 605, maybe hot
;;    prev block 14, next block 25, flags: (NEW, REACHABLE)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [28.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_16 = PHI <.MEM_31(13), .MEM_32(14), .MEM_27(12)>
;;    succ:       25 [100.0%]  (FALLTHRU)

;;   basic block 25, loop depth 0, count 0, freq 605, maybe hot
;;    prev block 15, next block 16, flags: (NEW)
;;    pred:       15 [100.0%]  (FALLTHRU)
  # DEBUG D#15ptD.0 => {CLOBBER}
  # DEBUG p$_M_nodeD.35886 => D#15ptD.0
  # VUSE <.MEM_16>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 16, loop depth 1, count 0, freq 5202, maybe hot
;;   Invalid sum of incoming frequencies 2429, should be 5202
;;    prev block 25, next block 17, flags: (NEW, REACHABLE)
;;    pred:       4 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.35862 => &pD.34872
  # VUSE <.MEM_17(D)>
  # PT = nonlocal escaped 
  p$_M_node_35 = p$_M_node_14->_M_nextD.14415;
  # DEBUG p$_M_nodeD.35886 => p$_M_node_35
  # DEBUG p$_M_nodeD.35886 => p$_M_node_35
  # DEBUG D#7ptD.0 => &this_18(D)->_requestsD.34671
  # DEBUG thisD.35855 => D#7ptD.0
  # DEBUG thisD.35857 => NULL
  # DEBUG __xD.35856 => _19
  # DEBUG thisD.35852 => &pD.34872
  # DEBUG __xD.35853 => &D.34879
  if (_19 != p$_M_node_35)
    goto <bb 18>;
  else
    goto <bb 17>;
;;    succ:       18 [83.5%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [16.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 859, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [16.5%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # p$_M_node_44 = PHI <p$_M_node_35(16)>
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 1, count 0, freq 4343, maybe hot
;;    prev block 17, next block 19, flags: (NEW)
;;    pred:       16 [83.5%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 2429, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       4 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # p$_M_node_45 = PHI <p$_M_node_14(4)>
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 3288, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       17 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # p$_M_node_13 = PHI <p$_M_node_44(17), p$_M_node_45(19)>
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 1, count 0, freq 5000, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       5 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#9ptD.0 => &this_18(D)->_requestsD.34671
  # DEBUG thisD.35869 => D#9ptD.0
  # DEBUG thisD.35871 => NULL
  # DEBUG __xD.35870 => _19
  # DEBUG thisD.35866 => &pD.34872
  # DEBUG __xD.35867 => &D.34880
  if (_19 == p$_M_node_40)
    goto <bb 7>;
  else
    goto <bb 9>;
;;    succ:       7 [27.4%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [72.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 6071, maybe hot
;;   Invalid sum of incoming frequencies 2656, should be 6071
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       9 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.35882 => &pD.34872
  # DEBUG D#12ptD.0 => &MEM[(struct _NodeD.34784 *)p$_M_node_39]._M_dataD.35072
  # DEBUG __rD.35832 => D#12ptD.0
  # DEBUG max_priD.34874 => max_pri_25
  # DEBUG thisD.35880 => &pD.34872
  # DEBUG D#13ptD.0 => &MEM[(struct _NodeD.34784 *)p$_M_node_39]._M_dataD.35072
  # DEBUG __rD.35832 => D#13ptD.0
  # VUSE <.MEM_17(D)>
  max_index_26 = MEM[(struct sRequestD.33918 *)p$_M_node_39 + 16B].inD.33920;
  # DEBUG max_indexD.34873 => max_index_26
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       6 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#9ptD.0 => &this_18(D)->_requestsD.34671
  # DEBUG thisD.35869 => D#9ptD.0
  # DEBUG thisD.35871 => NULL
  # DEBUG __xD.35870 => _19
  # DEBUG thisD.35866 => &pD.34872
  # DEBUG __xD.35867 => &D.34880
  if (_19 == p$_M_node_40)
    goto <bb 24>;
  else
    goto <bb 9>;
;;    succ:       24 [1.4%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [98.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 65, maybe hot
;;    prev block 23, next block 1, flags: (NEW)
;;    pred:       23 [1.4%]  (TRUE_VALUE,EXECUTABLE)
  # max_index_56 = PHI <max_index_1(23)>
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

}


