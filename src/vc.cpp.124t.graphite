
;; Function VC::VC(const Configuration&, int, Module*, const string&) (_ZN2VCC2ERK13ConfigurationiP6ModuleRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, funcdef_no=2140, decl_uid=44962, cgraph_uid=598, symbol_order=600)


Pass statistics:
----------------

VC::VC(const Configuration&, int, Module*, const string&) (struct VCD.43951 * const thisD.44963, const struct ConfigurationD.38092 & configD.44964, intD.9 outputsD.44965, struct ModuleD.32543 * parentD.44966, const struct stringD.3647 & nameD.44967)
Eh tree:
   1 cleanup land:{18,<L34>},{17,<L33>},{1,<L45>}
     28 try land:{14,<L27>} catch:{}
       31 must_not_throw
       30 cleanup land:{16,<L32>}
       29 try land:{15,<L30>} catch:{}
     27 cleanup land:{13,<L29>}
     26 must_not_throw
     2 cleanup land:{26,<L42>},{25,<L41>},{19,<L35>},{4,<L44>},{12,}
       17 cleanup land:{24,<L40>},{23,<L39>},{22,<L38>},{21,<L37>},{20,<L36>},{9,<L43>}
         19 cleanup land:{11,<L21>}
       11 cleanup land:{7,<L18>}
       5 cleanup land:{3,<L15>}
{
  struct FlitD.32424 * * * __nstartD.51467;
  size_typeD.12304 __dnewD.51435;
  size_typeD.12304 __dnewD.51390;
  size_typeD.12304 __dnewD.51345;
  struct FlitD.32424 * * * __nstartD.51299;
  const long unsigned intD.14 D.51295;
  const long unsigned intD.14 D.51294;
  const size_tD.2818 __num_nodesD.51267;
  struct FlitD.32424 * * * __nstartD.51268;
  struct FlitD.32424 * * * __nfinishD.51269;
  struct stringD.3647 priorityD.45053;
  const struct stringD.3647 D.45061;
  const struct stringD.3647 D.45059;
  const struct stringD.3647 D.45054;
  struct OutputSetD.31333 * iftmp.0_1;
  struct ModuleD.32543 * _8;
  intD.9 _25;
  boolD.2757 _26;
  struct _Rb_tree_node_baseD.29379 * _28;
  charD.10 * const _30;
  voidD.45 * _33;
  intD.9 _39;
  intD.9 _43;
  charD.10 * const _45;
  intD.9 _47;
  intD.9 _49;
  charD.10 * const _51;
  intD.9 _57;
  charD.10 * const _59;
  charD.10 * const _61;
  charD.10 * const _64;
  charD.10 * const _66;
  charD.10 * const _68;
  struct FlitD.32424 * * * prephitmp_117;
  boolD.2757 pretmp_119;
  boolD.2757 prephitmp_120;
  struct ModuleD.32543 * * _136;
  struct FlitD.32424 * * _142;
  struct FlitD.32424 * * * _144;
  long unsigned intD.14 _145;
  long unsigned intD.14 _146;
  long unsigned intD.14 _147;
  long unsigned intD.14 _148;
  struct FlitD.32424 * * _153;
  voidD.45 * _160;
  struct FlitD.32424 * * * _161;
  voidD.45 * _164;
  charD.10 * _209;
  long unsigned intD.14 __dnew.42_210;
  struct FlitD.32424 * * * pretmp_211;
  long unsigned intD.14 __dnew.42_213;
  charD.10 * const _214;
  charD.10 * _215;
  struct FlitD.32424 * * * _216;
  struct FlitD.32424 * * * _217;
  struct FlitD.32424 * * * _218;
  struct FlitD.32424 * * _221;
  charD.10 * const _224;
  const charD.10 * _225;
  charD.10 * const _226;
  const charD.10 * _227;

;;   basic block 2, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  _8 = &this_7(D)->D.44977;
  # .MEM_12 = VDEF <.MEM_9(D)>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZN6ModuleC2EPS_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.33325 (_8, parent_10(D), name_11(D));
  # .MEM_13 = VDEF <.MEM_12>
  this_7(D)->D.44977._vptr.ModuleD.33338 = &MEM[(voidD.45 *)&_ZTV2VCD.44992 + 16B];
  # DEBUG D#242ptD.0 => &this_7(D)->_bufferD.44881
  # DEBUG thisD.50762 => D#242ptD.0
  # DEBUG D#254ptD.0 => &MEM[(struct dequeD.32466 *)this_7(D) + 96B].D.44879
  # DEBUG thisD.50763 => D#254ptD.0
  # DEBUG D#240ptD.0 => &D#254ptD.0->_M_implD.44330
  # DEBUG thisD.50764 => D#240ptD.0
  # DEBUG thisD.49612 => D#240ptD.0
  # DEBUG thisD.49608 => D#240ptD.0
  # .MEM_79 = VDEF <.MEM_13>
  MEM[(struct _Deque_implD.44298 *)this_7(D) + 96B]._M_mapD.44332 = 0B;
  # DEBUG D#127ptD.0 => &D#240ptD.0->_M_startD.44334
  # DEBUG thisD.50765 => D#127ptD.0
  # .MEM_81 = VDEF <.MEM_79>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 112B]._M_curD.44229 = 0B;
  # .MEM_82 = VDEF <.MEM_81>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 112B]._M_firstD.44230 = 0B;
  # .MEM_83 = VDEF <.MEM_82>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 112B]._M_lastD.44231 = 0B;
  # .MEM_84 = VDEF <.MEM_83>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 112B]._M_nodeD.44232 = 0B;
  # DEBUG D#126ptD.0 => &D#240ptD.0->_M_finishD.44335
  # DEBUG thisD.50766 => D#126ptD.0
  # .MEM_85 = VDEF <.MEM_84>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 144B]._M_curD.44229 = 0B;
  # .MEM_86 = VDEF <.MEM_85>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 144B]._M_firstD.44230 = 0B;
  # .MEM_87 = VDEF <.MEM_86>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 144B]._M_lastD.44231 = 0B;
  # .MEM_88 = VDEF <.MEM_87>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 144B]._M_nodeD.44232 = 0B;
  # DEBUG thisD.51265 => D#254ptD.0
  # DEBUG __num_elementsD.51266 => 0
  # DEBUG __sizeD.50729 => 8
  # DEBUG __num_nodesD.51267 => 1
  # DEBUG __aD.51285 => &D.51294
  # DEBUG __bD.51284 => &D.51295
  # .MEM_233 = VDEF <.MEM_88>
  MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_map_sizeD.44333 = 8;
  # DEBUG D#235ptD.0 => D#254ptD.0
  # DEBUG __nD.51287 => 8
  # DEBUG thisD.51286 => D#235ptD.0
  # DEBUG D#234ptD.0 => D#235ptD.0
  # DEBUG D#163ptD.0 => D#234ptD.0
  # DEBUG thisD.50693 => D#163ptD.0
  # DEBUG D#162ptD.0 => D#163ptD.0
  # DEBUG thisD.49850 => D#162ptD.0
  # DEBUG thisD.49842 => NULL
  # DEBUG D.49843 => NULL
  # DEBUG thisD.49840 => NULL
  # DEBUG D#233ptD.0 => &__map_allocD.51288
  # DEBUG __nD.51290 => 8
  # DEBUG __aD.51289 => D#233ptD.0
  # DEBUG D#232ptD.0 => D#233ptD.0
  # DEBUG D#230ptD.0 => D#232ptD.0
  # DEBUG D#231ptD.0 => 0B
  # DEBUG __nD.51293 => 8
  # DEBUG thisD.51291 => D#230ptD.0
  # DEBUG D.51292 => D#231ptD.0
  # DEBUG D#229ptD.0 => D#230ptD.0
  # DEBUG D#228ptD.0 => D#229ptD.0
  # DEBUG thisD.50658 => D#228ptD.0
  [LP 17] # .MEM_236 = VDEF <.MEM_233>
  # PT = { D.51551 } (escaped heap)
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _144 = _ZnwmD.2764 (64);
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                69 (EH,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.50706 => &__map_allocD.51288
  # DEBUG thisD.50695 => &__map_allocD.51288
  # .MEM_237 = VDEF <.MEM_236>
  MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_mapD.44332 = _144;
  # VUSE <.MEM_237>
  _145 = MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_map_sizeD.44333;
  # RANGE [0, 18446744073709551615]
  _146 = _145 + 18446744073709551615;
  # RANGE [0, 9223372036854775807] NONZERO 9223372036854775807
  _147 = _146 >> 1;
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _148 = _147 * 8;
  # PT = { D.51551 } (escaped heap)
  __nstart_149 = _144 + _148;
  # DEBUG __nstartD.51268 => __nstart_149
  # DEBUG D#252ptD.0 => __nstart_149 + 8
  # DEBUG __nfinishD.51269 => D#252ptD.0
  # DEBUG D#213ptD.0 => D#254ptD.0
  # DEBUG __nstartD.51299 => __nstart_149
  # DEBUG __nfinishD.51300 => D#252ptD.0
  # DEBUG thisD.51301 => D#213ptD.0
  # DEBUG __curD.51302 => __nstart_149
  # DEBUG D#210ptD.0 => D#211ptD.0
  # DEBUG thisD.51316 => D#210ptD.0
  # DEBUG D#209ptD.0 => D#210ptD.0
  # DEBUG __sizeD.50485 => 8
  # DEBUG D#208ptD.0 => &D#209ptD.0->_M_implD.44330
  # DEBUG D#207ptD.0 => D#208ptD.0
  # DEBUG __nD.51319 => NULL
  # DEBUG __aD.51318 => D#207ptD.0
  # DEBUG D#206ptD.0 => D#207ptD.0
  # DEBUG D#204ptD.0 => D#206ptD.0
  # DEBUG D#205ptD.0 => 0B
  # DEBUG __nD.51322 => NULL
  # DEBUG thisD.51320 => D#204ptD.0
  # DEBUG D.51321 => D#205ptD.0
  # DEBUG D#203ptD.0 => D#204ptD.0
  # DEBUG D#202ptD.0 => D#203ptD.0
  # DEBUG thisD.50442 => D#202ptD.0
  [LP 15] # .MEM_234 = VDEF <.MEM_237>
  # PT = { D.51552 } (escaped heap)
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _142 = _ZnwmD.2764 (512);
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 (EH,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_159 = VDEF <.MEM_234>
  *__nstart_149 = _142;
  # DEBUG D#253ptD.0 => __nstart_149 + 8
  # DEBUG __curD.51302 => D#253ptD.0
  # DEBUG __curD.51302 => D#253ptD.0
  # DEBUG D#238ptD.0 => &D#254ptD.0->_M_implD.44330._M_startD.44334
  # DEBUG thisD.51281 => D#238ptD.0
  # DEBUG __new_nodeD.51280 => __nstart_149
  # .MEM_250 = VDEF <.MEM_159>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 112B]._M_nodeD.44232 = __nstart_149;
  # .MEM_251 = VDEF <.MEM_250>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 112B]._M_firstD.44230 = _142;
  # DEBUG __sizeD.49022 => 8
  # PT = { D.51552 } (escaped heap)
  _153 = _142 + 512;
  # .MEM_252 = VDEF <.MEM_251>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 112B]._M_lastD.44231 = _153;
  # DEBUG D#237ptD.0 => &D#254ptD.0->_M_implD.44330._M_finishD.44335
  # DEBUG thisD.51283 => D#237ptD.0
  # DEBUG __new_nodeD.51282 => __nstart_149
  # .MEM_253 = VDEF <.MEM_252>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 144B]._M_nodeD.44232 = __nstart_149;
  # .MEM_254 = VDEF <.MEM_253>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 144B]._M_firstD.44230 = _142;
  # DEBUG __sizeD.49022 => 8
  # .MEM_255 = VDEF <.MEM_254>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 144B]._M_lastD.44231 = _153;
  # .MEM_256 = VDEF <.MEM_255>
  MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_startD.44334._M_curD.44229 = _142;
  # DEBUG __sizeD.50731 => 8
  # .MEM_257 = VDEF <.MEM_256>
  MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_finishD.44335._M_curD.44229 = _142;
  # .MEM_14 = VDEF <.MEM_257>
  this_7(D)->_stateD.44882 = 0;
  # .MEM_15 = VDEF <.MEM_14>
  this_7(D)->_out_portD.44884 = -1;
  # .MEM_16 = VDEF <.MEM_15>
  this_7(D)->_out_vcD.44885 = -1;
  # .MEM_17 = VDEF <.MEM_16>
  this_7(D)->_priD.44893 = 0;
  # .MEM_18 = VDEF <.MEM_17>
  this_7(D)->_watchedD.44895 = 0;
  # .MEM_19 = VDEF <.MEM_18>
  this_7(D)->_expected_pidD.44896 = -1;
  # .MEM_20 = VDEF <.MEM_19>
  this_7(D)->_last_idD.44897 = -1;
  # .MEM_21 = VDEF <.MEM_20>
  this_7(D)->_last_pidD.44898 = -1;
  # DEBUG D#27ptD.0 => &D.45055
  # DEBUG thisD.50767 => D#27ptD.0
  # DEBUG D#26ptD.0 => D#27ptD.0
  # DEBUG thisD.48915 => D#26ptD.0
  # DEBUG D#186ptD.0 => &D.45055
  # DEBUG thisD.51326 => &D.45054
  # DEBUG __sD.51327 => "routing_delay"
  # DEBUG __aD.51328 => D#186ptD.0
  # DEBUG D#185ptD.0 => D#186ptD.0
  # DEBUG thisD.51338 => &D.45054
  # DEBUG D#183ptD.0 => &D.45054._M_dataplusD.12321
  # DEBUG D#72ptD.0 => D#185ptD.0
  # DEBUG thisD.51341 => D#183ptD.0
  # DEBUG __datD.51340 => &D.45054.D.12341._M_local_bufD.12343
  # DEBUG __aD.51339 => D#72ptD.0
  # DEBUG D#71ptD.0 => D#72ptD.0
  # DEBUG D#69ptD.0 => D#183ptD.0
  # DEBUG D#70ptD.0 => D#71ptD.0
  # DEBUG thisD.49205 => D#69ptD.0
  # DEBUG __aD.49206 => D#70ptD.0
  # DEBUG D#68ptD.0 => D#70ptD.0
  # DEBUG D#67ptD.0 => D#69ptD.0
  # DEBUG thisD.49187 => D#67ptD.0
  # DEBUG D.49188 => D#68ptD.0
  # .MEM_258 = VDEF <.MEM_21>
  MEM[(struct _Alloc_hiderD.12320 *)&D.45054]._M_pD.12327 = &D.45054.D.12341._M_local_bufD.12343;
  # DEBUG __sD.51337 => "routing_delay"
  # DEBUG thisD.51331 => &D.45054
  # DEBUG __begD.51330 => "routing_delay"
  # DEBUG __endD.51329 => &MEM[(voidD.45 *)"routing_delay" + 13B]
  # DEBUG thisD.51335 => &D.45054
  # DEBUG __begD.51334 => "routing_delay"
  # DEBUG __endD.51333 => &MEM[(voidD.45 *)"routing_delay" + 13B]
  # DEBUG thisD.51342 => &D.45054
  # DEBUG __begD.51343 => "routing_delay"
  # DEBUG __endD.51344 => &MEM[(voidD.45 *)"routing_delay" + 13B]
  # DEBUG __ptrD.50223 => "routing_delay"
  # DEBUG __firstD.51368 => "routing_delay"
  # DEBUG __lastD.51367 => &MEM[(voidD.45 *)"routing_delay" + 13B]
  # DEBUG D#189ptD.0 => &__firstD.51368
  # DEBUG D.50152 => D#189ptD.0
  # DEBUG __firstD.51370 => "routing_delay"
  # DEBUG __lastD.51369 => &MEM[(voidD.45 *)"routing_delay" + 13B]
  # DEBUG __dnewD.51345 => 13
  # DEBUG D#1ptD.0 => &D.45054
  # DEBUG thisD.50197 => D#1ptD.0
  # DEBUG __pD.51348 => &D.45054.D.12341._M_local_bufD.12343
  # DEBUG __k1D.51347 => "routing_delay"
  # DEBUG __k2D.51346 => &MEM[(voidD.45 *)"routing_delay" + 13B]
  # DEBUG __dD.51351 => &D.45054.D.12341._M_local_bufD.12343
  # DEBUG __sD.51350 => "routing_delay"
  # DEBUG __nD.51349 => 13
  # DEBUG __s1D.51354 => &D.45054.D.12341._M_local_bufD.12343
  # DEBUG __s2D.51353 => "routing_delay"
  # DEBUG __nD.51352 => 13
  # .MEM_264 = VDEF <.MEM_258>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  memcpyD.992 (&D.45054.D.12341._M_local_bufD.12343, "routing_delay", 13);
  # DEBUG thisD.51358 => &D.45054
  # DEBUG __nD.51357 => 13
  # DEBUG D#9ptD.0 => &D.45054
  # DEBUG __lengthD.51360 => 13
  # DEBUG thisD.51359 => D#9ptD.0
  # .MEM_265 = VDEF <.MEM_264>
  MEM[(size_typeD.12304 *)&D.45054 + 8B] = 13;
  # DEBUG D#1ptD.0 => &D.45054
  # DEBUG thisD.48775 => D#1ptD.0
  # DEBUG __c1D.51362 => &MEM[(voidD.45 *)&D.45054 + 29B]
  # DEBUG __c2D.51361 => D#10ptD.0
  # .MEM_266 = VDEF <.MEM_265>
  MEM[(char_typeD.7431 &)&D.45054 + 29] = 0;
  # DEBUG D#255ptD.0 => {CLOBBER}
  # DEBUG __dnewD.51345 => D#255ptD.0
  [LP 3] # .MEM_24 = VDEF <.MEM_266>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _25 = _ZNK13Configuration6GetIntERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.41332 (config_23(D), &D.45054);
  goto <bb 10>;
;;    succ:       42 (EH,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       3 (EH,EXECUTABLE)
<L30>: [LP 15]
  # VUSE <.MEM_234>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _164 = __builtin_eh_pointerD.2738 (29);
  # .MEM_240 = VDEF <.MEM_234>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  __cxa_begin_catchD.14316 (_164);
  # DEBUG D#147ptD.0 => D#212ptD.0
  # DEBUG __nstartD.51305 => __nstart_149
  # DEBUG __nfinishD.51304 => __nstart_149
  # DEBUG thisD.51303 => D#147ptD.0
  # DEBUG __nD.51306 => __nstart_149
  [LP 16] # .MEM_242 = VDEF <.MEM_240>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  __cxa_rethrowD.45922 ();
;;    succ:       6 (EH,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 (EH,EXECUTABLE)
<L32>: [LP 16]
  [MNT 31] # .MEM_243 = VDEF <.MEM_242>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  __cxa_end_catchD.14315 ();
  [LP 14] resx 30
;;    succ:       7 (EH,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 (EH,EXECUTABLE)
<L27>: [LP 14]
  # VUSE <.MEM_243>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _160 = __builtin_eh_pointerD.2738 (28);
  # .MEM_244 = VDEF <.MEM_243>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  __cxa_begin_catchD.14316 (_160);
  # DEBUG D#236ptD.0 => D#254ptD.0->_M_implD.44330._M_map_sizeD.44333
  # VUSE <.MEM_244>
  # PT = nonlocal escaped 
  _161 = MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_mapD.44332;
  # DEBUG D#166ptD.0 => D#254ptD.0
  # DEBUG D#167ptD.0 => D#236ptD.0
  # DEBUG __pD.51272 => _161
  # DEBUG thisD.51270 => D#166ptD.0
  # DEBUG __nD.51271 => D#167ptD.0
  # DEBUG D#165ptD.0 => D#167ptD.0
  # DEBUG D#164ptD.0 => D#166ptD.0
  # DEBUG D#163ptD.0 => D#164ptD.0
  # DEBUG thisD.49862 => D#163ptD.0
  # DEBUG D#162ptD.0 => D#163ptD.0
  # DEBUG thisD.49850 => D#162ptD.0
  # DEBUG thisD.49842 => NULL
  # DEBUG D.49843 => NULL
  # DEBUG thisD.49840 => NULL
  # DEBUG D#132ptD.0 => &__map_allocD.51273
  # DEBUG D#133ptD.0 => D#165ptD.0
  # DEBUG __pD.51276 => _161
  # DEBUG __aD.51274 => D#132ptD.0
  # DEBUG __nD.51275 => D#133ptD.0
  # DEBUG D#131ptD.0 => D#133ptD.0
  # DEBUG D#130ptD.0 => D#132ptD.0
  # DEBUG D#128ptD.0 => D#130ptD.0
  # DEBUG D#129ptD.0 => D#131ptD.0
  # DEBUG __pD.51279 => _161
  # DEBUG thisD.51277 => D#128ptD.0
  # DEBUG D.51278 => D#129ptD.0
  # .MEM_245 = VDEF <.MEM_244>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_161);
  # DEBUG thisD.49876 => &__map_allocD.51273
  # DEBUG thisD.49855 => &__map_allocD.51273
  # .MEM_246 = VDEF <.MEM_245>
  MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_mapD.44332 = 0B;
  # .MEM_247 = VDEF <.MEM_246>
  MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_map_sizeD.44333 = 0;
  [LP 13] # .MEM_248 = VDEF <.MEM_247>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  __cxa_rethrowD.45922 ();
;;    succ:       8 (EH,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 (EH,EXECUTABLE)
<L29>: [LP 13]
  [MNT 26] # .MEM_249 = VDEF <.MEM_248>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  __cxa_end_catchD.14315 ();
  [LP 18] resx 27
;;    succ:       9 (EH,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 (EH,EXECUTABLE)
<L34>: [LP 18]
  goto <bb 70> (<L26>);
;;    succ:       70 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 1]
  _26 = _25 == 0;
  # .MEM_27 = VDEF <.MEM_24>
  this_7(D)->_lookahead_routingD.44899 = _26;
  # DEBUG thisD.50770 => &D.45054
  # DEBUG thisD.50771 => &D.45054
  # DEBUG thisD.50780 => &D.45054
  # VUSE <.MEM_27>
  # PT = nonlocal escaped { D.45054 } (escaped)
  _30 = MEM[(charD.10 * *)&D.45054];
  # DEBUG D#1ptD.0 => &D.45054
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.50781 => &D.45054
  if (&D.45054.D.12341._M_local_bufD.12343 != _30)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 314, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => D.45054.D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.50773 => &D.45054
  # DEBUG __sizeD.50772 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => &D.45054
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => &D.45054
  # DEBUG D#91ptD.0 => &D.45054._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.50776 => _30
  # DEBUG __aD.50774 => D#89ptD.0
  # DEBUG __nD.50775 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.50779 => _30
  # DEBUG thisD.50777 => D#85ptD.0
  # DEBUG D.50778 => D#86ptD.0
  # .MEM_90 = VDEF <.MEM_27>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_30);
  # VUSE <.MEM_90>
  pretmp_119 = this_7(D)->_lookahead_routingD.44899;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       10 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_70 = PHI <.MEM_27(10), .MEM_90(11)>
  # prephitmp_120 = PHI <_26(10), pretmp_119(11)>
  # DEBUG D#95ptD.0 => &D.45054._M_dataplusD.12321
  # DEBUG thisD.50782 => D#95ptD.0
  # DEBUG thisD.50783 => D#95ptD.0
  # DEBUG thisD.50784 => D#95ptD.0
  # .MEM_29 = VDEF <.MEM_70>
  D.45054 ={v} {CLOBBER};
  # DEBUG thisD.50768 => &D.45055
  # DEBUG thisD.50769 => &D.45055
  if (prephitmp_120 != 0)
    goto <bb 15>;
  else
    goto <bb 13>;
;;    succ:       15 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 225, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  [LP 19] # .MEM_32 = VDEF <.MEM_29>
  # PT = { D.51553 } (escaped heap)
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _33 = _ZnwmD.2764 (48);
;;    succ:       59 (EH,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 225, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_34 = VDEF <.MEM_32>
  MEM[(struct OutputSetD.31333 *)_33]._outputsD.32418._M_tD.31591._M_implD.31669._M_headerD.31835._M_colorD.29383 = 0;
  # .MEM_35 = VDEF <.MEM_34>
  MEM[(struct OutputSetD.31333 *)_33]._outputsD.32418._M_tD.31591._M_implD.31669._M_headerD.31835._M_parentD.29384 = 0B;
  # .MEM_38 = VDEF <.MEM_35>
  MEM[(struct OutputSetD.31333 *)_33]._outputsD.32418._M_tD.31591._M_implD.31669._M_node_countD.31836 = 0;
  # DEBUG thisD.50785 => _33
  # DEBUG D#136ptD.0 => &MEM[(struct OutputSetD.31333 *)_33]._outputsD.32418
  # DEBUG thisD.50786 => D#136ptD.0
  # DEBUG D#135ptD.0 => &D#136ptD.0->_M_tD.31591
  # DEBUG thisD.50787 => D#135ptD.0
  # DEBUG D#134ptD.0 => &MEM[(struct _Rb_treeD.31590 *)D#135ptD.0]._M_implD.31669
  # DEBUG thisD.50788 => D#134ptD.0
  # DEBUG thisD.49647 => D#134ptD.0
  # DEBUG thisD.49644 => D#134ptD.0
  # DEBUG thisD.50789 => D#134ptD.0
  # PT = { D.51553 } (escaped heap)
  _28 = &MEM[(struct _Rb_tree_implD.31681 *)_33]._M_headerD.31835;
  # .MEM_95 = VDEF <.MEM_38>
  MEM[(struct _Rb_tree_implD.31681 *)_33]._M_headerD.31835._M_leftD.29385 = _28;
  # .MEM_96 = VDEF <.MEM_95>
  MEM[(struct _Rb_tree_implD.31681 *)_33]._M_headerD.31835._M_rightD.29386 = _28;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.51553 } (escaped heap)
  # iftmp.0_1 = PHI <0B(12), _33(14)>
  # .MEM_2 = PHI <.MEM_29(12), .MEM_96(14)>
  # .MEM_40 = VDEF <.MEM_2>
  this_7(D)->_route_setD.44883 = iftmp.0_1;
  # DEBUG D#27ptD.0 => &D.45060
  # DEBUG thisD.50790 => D#27ptD.0
  # DEBUG D#26ptD.0 => D#27ptD.0
  # DEBUG thisD.48915 => D#26ptD.0
  # DEBUG D#186ptD.0 => &D.45060
  # DEBUG thisD.51371 => &D.45059
  # DEBUG __sD.51372 => "priority"
  # DEBUG __aD.51373 => D#186ptD.0
  # DEBUG D#185ptD.0 => D#186ptD.0
  # DEBUG thisD.51383 => &D.45059
  # DEBUG D#183ptD.0 => &D.45059._M_dataplusD.12321
  # DEBUG D#72ptD.0 => D#185ptD.0
  # DEBUG thisD.51386 => D#183ptD.0
  # DEBUG __datD.51385 => &D.45059.D.12341._M_local_bufD.12343
  # DEBUG __aD.51384 => D#72ptD.0
  # DEBUG D#71ptD.0 => D#72ptD.0
  # DEBUG D#69ptD.0 => D#183ptD.0
  # DEBUG D#70ptD.0 => D#71ptD.0
  # DEBUG thisD.49205 => D#69ptD.0
  # DEBUG __aD.49206 => D#70ptD.0
  # DEBUG D#68ptD.0 => D#70ptD.0
  # DEBUG D#67ptD.0 => D#69ptD.0
  # DEBUG thisD.49187 => D#67ptD.0
  # DEBUG D.49188 => D#68ptD.0
  # .MEM_268 = VDEF <.MEM_40>
  MEM[(struct _Alloc_hiderD.12320 *)&D.45059]._M_pD.12327 = &D.45059.D.12341._M_local_bufD.12343;
  # DEBUG __sD.51382 => "priority"
  # DEBUG thisD.51376 => &D.45059
  # DEBUG __begD.51375 => "priority"
  # DEBUG __endD.51374 => &MEM[(voidD.45 *)"priority" + 8B]
  # DEBUG thisD.51380 => &D.45059
  # DEBUG __begD.51379 => "priority"
  # DEBUG __endD.51378 => &MEM[(voidD.45 *)"priority" + 8B]
  # DEBUG thisD.51387 => &D.45059
  # DEBUG __begD.51388 => "priority"
  # DEBUG __endD.51389 => &MEM[(voidD.45 *)"priority" + 8B]
  # DEBUG __ptrD.50223 => "priority"
  # DEBUG __firstD.51413 => "priority"
  # DEBUG __lastD.51412 => &MEM[(voidD.45 *)"priority" + 8B]
  # DEBUG D#189ptD.0 => &__firstD.51413
  # DEBUG D.50152 => D#189ptD.0
  # DEBUG __firstD.51415 => "priority"
  # DEBUG __lastD.51414 => &MEM[(voidD.45 *)"priority" + 8B]
  # DEBUG __dnewD.51390 => 8
  # DEBUG D#1ptD.0 => &D.45059
  # DEBUG thisD.50197 => D#1ptD.0
  # DEBUG __pD.51393 => &D.45059.D.12341._M_local_bufD.12343
  # DEBUG __k1D.51392 => "priority"
  # DEBUG __k2D.51391 => &MEM[(voidD.45 *)"priority" + 8B]
  # DEBUG __dD.51396 => &D.45059.D.12341._M_local_bufD.12343
  # DEBUG __sD.51395 => "priority"
  # DEBUG __nD.51394 => 8
  # DEBUG __s1D.51399 => &D.45059.D.12341._M_local_bufD.12343
  # DEBUG __s2D.51398 => "priority"
  # DEBUG __nD.51397 => 8
  # .MEM_274 = VDEF <.MEM_268>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  memcpyD.992 (&D.45059.D.12341._M_local_bufD.12343, "priority", 8);
  # DEBUG thisD.51403 => &D.45059
  # DEBUG __nD.51402 => 8
  # DEBUG D#9ptD.0 => &D.45059
  # DEBUG __lengthD.51405 => 8
  # DEBUG thisD.51404 => D#9ptD.0
  # .MEM_275 = VDEF <.MEM_274>
  MEM[(size_typeD.12304 *)&D.45059 + 8B] = 8;
  # DEBUG D#1ptD.0 => &D.45059
  # DEBUG thisD.48775 => D#1ptD.0
  # DEBUG __c1D.51407 => &MEM[(voidD.45 *)&D.45059 + 24B]
  # DEBUG __c2D.51406 => D#10ptD.0
  # .MEM_276 = VDEF <.MEM_275>
  MEM[(char_typeD.7431 &)&D.45059 + 24] = 0;
  # DEBUG D#256ptD.0 => {CLOBBER}
  # DEBUG __dnewD.51390 => D#256ptD.0
  [LP 7] # .MEM_42 = VDEF <.MEM_276>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  priorityD.45053 = _ZNK13Configuration6GetStrERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.41329 (config_23(D), &D.45059); [return slot optimization]
;;    succ:       46 (EH,EXECUTABLE)
;;                16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       15 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.50796 => &D.45059
  # DEBUG thisD.50797 => &D.45059
  # DEBUG thisD.50806 => &D.45059
  # VUSE <.MEM_42>
  # PT = nonlocal escaped { D.45059 } (escaped)
  _45 = MEM[(charD.10 * *)&D.45059];
  # DEBUG D#1ptD.0 => &D.45059
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.50807 => &D.45059
  if (&D.45059.D.12341._M_local_bufD.12343 != _45)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 314, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => D.45059.D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.50799 => &D.45059
  # DEBUG __sizeD.50798 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => &D.45059
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => &D.45059
  # DEBUG D#91ptD.0 => &D.45059._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.50802 => _45
  # DEBUG __aD.50800 => D#89ptD.0
  # DEBUG __nD.50801 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.50805 => _45
  # DEBUG thisD.50803 => D#85ptD.0
  # DEBUG D.50804 => D#86ptD.0
  # .MEM_97 = VDEF <.MEM_42>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_45);
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       16 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_72 = PHI <.MEM_42(16), .MEM_97(17)>
  # DEBUG D#95ptD.0 => &D.45059._M_dataplusD.12321
  # DEBUG thisD.50808 => D#95ptD.0
  # DEBUG thisD.50809 => D#95ptD.0
  # DEBUG thisD.50810 => D#95ptD.0
  # .MEM_44 = VDEF <.MEM_72>
  D.45059 ={v} {CLOBBER};
  # DEBUG thisD.50794 => &D.45060
  # DEBUG thisD.50795 => &D.45060
  # DEBUG __lhsD.50791 => &priorityD.45053
  # DEBUG __rhsD.50792 => "local_age"
  [LP 20] # .MEM_102 = VDEF <.MEM_44>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _39 = _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKcD.13041 (&priorityD.45053, "local_age");
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                54 (EH,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [100.0%]  (FALLTHRU,EXECUTABLE)
  if (_39 == 0)
    goto <bb 20>;
  else
    goto <bb 21>;
;;    succ:       20 [71.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [29.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 319, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       19 [71.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_46 = VDEF <.MEM_102>
  this_7(D)->_pri_typeD.44892 = 0;
  goto <bb 34>;
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 130, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       19 [29.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __lhsD.50811 => &priorityD.45053
  # DEBUG __rhsD.50812 => "queue_length"
  [LP 21] # .MEM_103 = VDEF <.MEM_102>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _43 = _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKcD.13041 (&priorityD.45053, "queue_length");
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                22 (EH,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 21, next block 23, flags: (NEW)
;;    pred:       21 (EH,EXECUTABLE)
<L37>: [LP 21]
  goto <bb 55> (<L23>);
;;    succ:       55 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 130, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       21 [100.0%]  (FALLTHRU,EXECUTABLE)
  if (_43 == 0)
    goto <bb 24>;
  else
    goto <bb 25>;
;;    succ:       24 [71.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [29.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 93, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [71.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_48 = VDEF <.MEM_103>
  this_7(D)->_pri_typeD.44892 = 1;
  goto <bb 34>;
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 38, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       23 [29.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __lhsD.50814 => &priorityD.45053
  # DEBUG __rhsD.50815 => "hop_count"
  [LP 22] # .MEM_104 = VDEF <.MEM_103>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _47 = _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKcD.13041 (&priorityD.45053, "hop_count");
  goto <bb 27>;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                26 (EH,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 (EH,EXECUTABLE)
<L38>: [LP 22]
  goto <bb 55> (<L23>);
;;    succ:       55 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 38, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
  if (_47 == 0)
    goto <bb 28>;
  else
    goto <bb 29>;
;;    succ:       28 [71.0%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [29.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 27, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       27 [71.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_50 = VDEF <.MEM_104>
  this_7(D)->_pri_typeD.44892 = 2;
  goto <bb 34>;
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 11, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       27 [29.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __lhsD.50817 => &priorityD.45053
  # DEBUG __rhsD.50818 => "none"
  [LP 23] # .MEM_105 = VDEF <.MEM_104>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _49 = _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKcD.13041 (&priorityD.45053, "none");
  goto <bb 31>;
;;    succ:       31 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                30 (EH,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 29, next block 31, flags: (NEW)
;;    pred:       29 (EH,EXECUTABLE)
<L39>: [LP 23]
  goto <bb 55> (<L23>);
;;    succ:       55 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 11, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       29 [100.0%]  (FALLTHRU,EXECUTABLE)
  if (_49 == 0)
    goto <bb 32>;
  else
    goto <bb 33>;
;;    succ:       32 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 5, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       31 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_52 = VDEF <.MEM_105>
  this_7(D)->_pri_typeD.44892 = 3;
  goto <bb 34>;
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 5, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       31 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_53 = VDEF <.MEM_105>
  this_7(D)->_pri_typeD.44892 = 4;
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                28 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_3 = PHI <.MEM_46(20), .MEM_48(24), .MEM_50(28), .MEM_52(32), .MEM_53(33)>
  # DEBUG D#27ptD.0 => &D.45062
  # DEBUG thisD.50820 => D#27ptD.0
  # DEBUG D#26ptD.0 => D#27ptD.0
  # DEBUG thisD.48915 => D#26ptD.0
  # DEBUG D#186ptD.0 => &D.45062
  # DEBUG thisD.51416 => &D.45061
  # DEBUG __sD.51417 => "vc_priority_donation"
  # DEBUG __aD.51418 => D#186ptD.0
  # DEBUG D#185ptD.0 => D#186ptD.0
  # DEBUG thisD.51428 => &D.45061
  # DEBUG D#183ptD.0 => &D.45061._M_dataplusD.12321
  # DEBUG D#72ptD.0 => D#185ptD.0
  # DEBUG thisD.51431 => D#183ptD.0
  # DEBUG __datD.51430 => &D.45061.D.12341._M_local_bufD.12343
  # DEBUG __aD.51429 => D#72ptD.0
  # DEBUG D#71ptD.0 => D#72ptD.0
  # DEBUG D#69ptD.0 => D#183ptD.0
  # DEBUG D#70ptD.0 => D#71ptD.0
  # DEBUG thisD.49205 => D#69ptD.0
  # DEBUG __aD.49206 => D#70ptD.0
  # DEBUG D#68ptD.0 => D#70ptD.0
  # DEBUG D#67ptD.0 => D#69ptD.0
  # DEBUG thisD.49187 => D#67ptD.0
  # DEBUG D.49188 => D#68ptD.0
  # .MEM_278 = VDEF <.MEM_3>
  MEM[(struct _Alloc_hiderD.12320 *)&D.45061]._M_pD.12327 = &D.45061.D.12341._M_local_bufD.12343;
  # DEBUG __sD.51427 => "vc_priority_donation"
  # DEBUG thisD.51421 => &D.45061
  # DEBUG __begD.51420 => "vc_priority_donation"
  # DEBUG __endD.51419 => &MEM[(voidD.45 *)"vc_priority_donation" + 20B]
  # DEBUG thisD.51425 => &D.45061
  # DEBUG __begD.51424 => "vc_priority_donation"
  # DEBUG __endD.51423 => &MEM[(voidD.45 *)"vc_priority_donation" + 20B]
  # DEBUG thisD.51432 => &D.45061
  # DEBUG __begD.51433 => "vc_priority_donation"
  # DEBUG __endD.51434 => &MEM[(voidD.45 *)"vc_priority_donation" + 20B]
  # DEBUG __ptrD.50223 => "vc_priority_donation"
  # DEBUG __firstD.51458 => "vc_priority_donation"
  # DEBUG __lastD.51457 => &MEM[(voidD.45 *)"vc_priority_donation" + 20B]
  # DEBUG D#189ptD.0 => &__firstD.51458
  # DEBUG D.50152 => D#189ptD.0
  # DEBUG __firstD.51460 => "vc_priority_donation"
  # DEBUG __lastD.51459 => &MEM[(voidD.45 *)"vc_priority_donation" + 20B]
  # .MEM_279 = VDEF <.MEM_278>
  __dnewD.51435 = 20;
  [LP 24] # .MEM_280 = VDEF <.MEM_279>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _209 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.12365 (&D.45061, &__dnewD.51435, 0);
  goto <bb 36>;
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 (EH,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 34, next block 36, flags: (NEW)
;;    pred:       34 (EH,EXECUTABLE)
<L40>: [LP 24]
  goto <bb 55> (<L23>);
;;    succ:       55 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       34 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#7ptD.0 => &D.45061
  # DEBUG __pD.51454 => _209
  # DEBUG thisD.51453 => D#7ptD.0
  # .MEM_281 = VDEF <.MEM_280>
  MEM[(charD.10 * *)&D.45061] = _209;
  # VUSE <.MEM_281>
  __dnew.42_210 = __dnewD.51435;
  # DEBUG D#8ptD.0 => &D.45061
  # DEBUG __capacityD.51456 => __dnew.42_210
  # DEBUG thisD.51455 => D#8ptD.0
  # .MEM_282 = VDEF <.MEM_281>
  MEM[(size_typeD.12304 *)&D.45061 + 16B] = __dnew.42_210;
  # DEBUG D#1ptD.0 => &D.45061
  # DEBUG thisD.50197 => D#1ptD.0
  # DEBUG __pD.51438 => _209
  # DEBUG __k1D.51437 => "vc_priority_donation"
  # DEBUG __k2D.51436 => &MEM[(voidD.45 *)"vc_priority_donation" + 20B]
  # DEBUG __dD.51441 => _209
  # DEBUG __sD.51440 => "vc_priority_donation"
  # DEBUG __nD.51439 => 20
  # DEBUG __s1D.51444 => _209
  # DEBUG __s2D.51443 => "vc_priority_donation"
  # DEBUG __nD.51442 => 20
  # .MEM_284 = VDEF <.MEM_282>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  memcpyD.992 (_209, "vc_priority_donation", 20);
  # VUSE <.MEM_284>
  __dnew.42_213 = __dnewD.51435;
  # DEBUG thisD.51448 => &D.45061
  # DEBUG __nD.51447 => __dnew.42_213
  # DEBUG D#9ptD.0 => &D.45061
  # DEBUG __lengthD.51450 => __dnew.42_213
  # DEBUG thisD.51449 => D#9ptD.0
  # .MEM_285 = VDEF <.MEM_284>
  MEM[(size_typeD.12304 *)&D.45061 + 8B] = __dnew.42_213;
  # VUSE <.MEM_285>
  # PT = nonlocal escaped null { D.45061 } (escaped)
  _214 = MEM[(charD.10 * *)&D.45061];
  # DEBUG D#1ptD.0 => &D.45061
  # DEBUG thisD.48775 => D#1ptD.0
  # PT = nonlocal escaped null { D.45061 } (escaped)
  _215 = _214 + __dnew.42_213;
  # DEBUG __c1D.51452 => _215
  # DEBUG __c2D.51451 => D#10ptD.0
  # .MEM_286 = VDEF <.MEM_285>
  MEM[(char_typeD.7431 &)_215] = 0;
  # .MEM_287 = VDEF <.MEM_286>
  __dnewD.51435 ={v} {CLOBBER};
  [LP 11] # .MEM_56 = VDEF <.MEM_287>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _57 = _ZNK13Configuration6GetIntERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.41332 (config_23(D), &D.45061);
;;    succ:       50 (EH,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       36 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_58 = VDEF <.MEM_56>
  this_7(D)->_priority_donationD.44894 = _57;
  # DEBUG thisD.50838 => &D.45061
  # DEBUG thisD.50839 => &D.45061
  # DEBUG thisD.50848 => &D.45061
  # VUSE <.MEM_58>
  # PT = nonlocal escaped null { D.45061 } (escaped)
  _61 = MEM[(charD.10 * *)&D.45061];
  # DEBUG D#1ptD.0 => &D.45061
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.50849 => &D.45061
  if (&D.45061.D.12341._M_local_bufD.12343 != _61)
    goto <bb 38>;
  else
    goto <bb 39>;
;;    succ:       38 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 314, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       37 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => D.45061.D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.50841 => &D.45061
  # DEBUG __sizeD.50840 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => &D.45061
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => &D.45061
  # DEBUG D#91ptD.0 => &D.45061._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.50844 => _61
  # DEBUG __aD.50842 => D#89ptD.0
  # DEBUG __nD.50843 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.50847 => _61
  # DEBUG thisD.50845 => D#85ptD.0
  # DEBUG D.50846 => D#86ptD.0
  # .MEM_106 = VDEF <.MEM_58>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_61);
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       37 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_73 = PHI <.MEM_58(37), .MEM_106(38)>
  # DEBUG D#95ptD.0 => &D.45061._M_dataplusD.12321
  # DEBUG thisD.50850 => D#95ptD.0
  # DEBUG thisD.50851 => D#95ptD.0
  # DEBUG thisD.50852 => D#95ptD.0
  # .MEM_60 = VDEF <.MEM_73>
  D.45061 ={v} {CLOBBER};
  # DEBUG thisD.50836 => &D.45062
  # DEBUG thisD.50837 => &D.45062
  # DEBUG thisD.50821 => &priorityD.45053
  # DEBUG thisD.50822 => &priorityD.45053
  # DEBUG thisD.50831 => &priorityD.45053
  # VUSE <.MEM_60>
  # PT = nonlocal escaped 
  _51 = MEM[(charD.10 * *)&priorityD.45053];
  # DEBUG D#1ptD.0 => &priorityD.45053
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.50832 => &priorityD.45053
  if (&priorityD.45053.D.12341._M_local_bufD.12343 != _51)
    goto <bb 40>;
  else
    goto <bb 41>;
;;    succ:       40 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                41 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 0, count 0, freq 353, maybe hot
;;    prev block 39, next block 41, flags: (NEW, REACHABLE)
;;    pred:       39 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => priorityD.45053.D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.50824 => &priorityD.45053
  # DEBUG __sizeD.50823 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => &priorityD.45053
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => &priorityD.45053
  # DEBUG D#91ptD.0 => &priorityD.45053._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.50827 => _51
  # DEBUG __aD.50825 => D#89ptD.0
  # DEBUG __nD.50826 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.50830 => _51
  # DEBUG thisD.50828 => D#85ptD.0
  # DEBUG D.50829 => D#86ptD.0
  # .MEM_111 = VDEF <.MEM_60>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_51);
;;    succ:       41 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 41, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 40, next block 42, flags: (NEW, REACHABLE)
;;    pred:       39 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                40 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_74 = PHI <.MEM_60(39), .MEM_111(40)>
  # DEBUG D#95ptD.0 => &priorityD.45053._M_dataplusD.12321
  # DEBUG thisD.50833 => D#95ptD.0
  # DEBUG thisD.50834 => D#95ptD.0
  # DEBUG thisD.50835 => D#95ptD.0
  # .MEM_62 = VDEF <.MEM_74>
  priorityD.45053 ={v} {CLOBBER};
  # VUSE <.MEM_62>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       4 (EH,EXECUTABLE)
<L15>: [LP 3]
  # DEBUG thisD.50853 => &D.45054
  # DEBUG thisD.50854 => &D.45054
  # DEBUG thisD.50863 => &D.45054
  # VUSE <.MEM_24>
  # PT = nonlocal escaped { D.45054 } (escaped)
  _59 = MEM[(charD.10 * *)&D.45054];
  # DEBUG D#1ptD.0 => &D.45054
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.50864 => &D.45054
  if (&D.45054.D.12341._M_local_bufD.12343 != _59)
    goto <bb 43>;
  else
    goto <bb 44>;
;;    succ:       43 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 42, next block 44, flags: (NEW, REACHABLE)
;;    pred:       42 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => D.45054.D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.50856 => &D.45054
  # DEBUG __sizeD.50855 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => &D.45054
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => &D.45054
  # DEBUG D#91ptD.0 => &D.45054._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.50859 => _59
  # DEBUG __aD.50857 => D#89ptD.0
  # DEBUG __nD.50858 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.50862 => _59
  # DEBUG thisD.50860 => D#85ptD.0
  # DEBUG D.50861 => D#86ptD.0
  # .MEM_131 = VDEF <.MEM_24>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_59);
;;    succ:       44 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 43, next block 45, flags: (NEW, REACHABLE)
;;    pred:       42 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                43 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_75 = PHI <.MEM_24(42), .MEM_131(43)>
  # DEBUG D#95ptD.0 => &D.45054._M_dataplusD.12321
  # DEBUG thisD.50865 => D#95ptD.0
  # DEBUG thisD.50866 => D#95ptD.0
  # DEBUG thisD.50867 => D#95ptD.0
  # .MEM_67 = VDEF <.MEM_75>
  D.45054 ={v} {CLOBBER};
  [LP 25] resx 5
;;    succ:       45 (EH,EXECUTABLE)

;;   basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 44, next block 46, flags: (NEW)
;;    pred:       44 (EH,EXECUTABLE)
<L41>: [LP 25]
  goto <bb 60> (<L24>);
;;    succ:       60 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 45, next block 47, flags: (NEW, REACHABLE)
;;    pred:       15 (EH,EXECUTABLE)
<L18>: [LP 7]
  # DEBUG thisD.50870 => &D.45059
  # DEBUG thisD.50871 => &D.45059
  # DEBUG thisD.50880 => &D.45059
  # VUSE <.MEM_42>
  # PT = nonlocal escaped { D.45059 } (escaped)
  _68 = MEM[(charD.10 * *)&D.45059];
  # DEBUG D#1ptD.0 => &D.45059
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.50881 => &D.45059
  if (&D.45059.D.12341._M_local_bufD.12343 != _68)
    goto <bb 47>;
  else
    goto <bb 48>;
;;    succ:       47 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                48 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 46, next block 48, flags: (NEW, REACHABLE)
;;    pred:       46 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => D.45059.D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.50873 => &D.45059
  # DEBUG __sizeD.50872 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => &D.45059
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => &D.45059
  # DEBUG D#91ptD.0 => &D.45059._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.50876 => _68
  # DEBUG __aD.50874 => D#89ptD.0
  # DEBUG __nD.50875 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.50879 => _68
  # DEBUG thisD.50877 => D#85ptD.0
  # DEBUG D.50878 => D#86ptD.0
  # .MEM_126 = VDEF <.MEM_42>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_68);
;;    succ:       48 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 47, next block 49, flags: (NEW, REACHABLE)
;;    pred:       46 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                47 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_76 = PHI <.MEM_42(46), .MEM_126(47)>
  # DEBUG D#95ptD.0 => &D.45059._M_dataplusD.12321
  # DEBUG thisD.50882 => D#95ptD.0
  # DEBUG thisD.50883 => D#95ptD.0
  # DEBUG thisD.50884 => D#95ptD.0
  # .MEM_65 = VDEF <.MEM_76>
  D.45059 ={v} {CLOBBER};
  [LP 26] resx 11
;;    succ:       49 (EH,EXECUTABLE)

;;   basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 48, next block 50, flags: (NEW)
;;    pred:       48 (EH,EXECUTABLE)
<L42>: [LP 26]
  goto <bb 60> (<L24>);
;;    succ:       60 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 49, next block 51, flags: (NEW, REACHABLE)
;;    pred:       36 (EH,EXECUTABLE)
<L21>: [LP 11]
  # DEBUG thisD.50887 => &D.45061
  # DEBUG thisD.50888 => &D.45061
  # DEBUG thisD.50897 => &D.45061
  # VUSE <.MEM_56>
  # PT = nonlocal escaped null { D.45061 } (escaped)
  _66 = MEM[(charD.10 * *)&D.45061];
  # DEBUG D#1ptD.0 => &D.45061
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.50898 => &D.45061
  if (&D.45061.D.12341._M_local_bufD.12343 != _66)
    goto <bb 51>;
  else
    goto <bb 52>;
;;    succ:       51 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                52 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 50, next block 52, flags: (NEW, REACHABLE)
;;    pred:       50 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => D.45061.D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.50890 => &D.45061
  # DEBUG __sizeD.50889 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => &D.45061
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => &D.45061
  # DEBUG D#91ptD.0 => &D.45061._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.50893 => _66
  # DEBUG __aD.50891 => D#89ptD.0
  # DEBUG __nD.50892 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.50896 => _66
  # DEBUG thisD.50894 => D#85ptD.0
  # DEBUG D.50895 => D#86ptD.0
  # .MEM_116 = VDEF <.MEM_56>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_66);
;;    succ:       52 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 51, next block 53, flags: (NEW, REACHABLE)
;;    pred:       50 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                51 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_77 = PHI <.MEM_56(50), .MEM_116(51)>
  # DEBUG D#95ptD.0 => &D.45061._M_dataplusD.12321
  # DEBUG thisD.50899 => D#95ptD.0
  # DEBUG thisD.50900 => D#95ptD.0
  # DEBUG thisD.50901 => D#95ptD.0
  # .MEM_63 = VDEF <.MEM_77>
  D.45061 ={v} {CLOBBER};
  [LP 9] resx 19
;;    succ:       53 (EH,EXECUTABLE)

;;   basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 52, next block 54, flags: (NEW)
;;    pred:       52 (EH,EXECUTABLE)
<L43>: [LP 9]
  goto <bb 55> (<L23>);
;;    succ:       55 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 53, next block 55, flags: (NEW)
;;    pred:       18 (EH,EXECUTABLE)
<L36>: [LP 20]
;;    succ:       55 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 54, next block 56, flags: (NEW, REACHABLE)
;;    pred:       54 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                53 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_4 = PHI <.MEM_102(54), .MEM_103(22), .MEM_104(26), .MEM_105(30), .MEM_63(53), .MEM_280(35)>
<L23>:
  # DEBUG thisD.50904 => &priorityD.45053
  # DEBUG thisD.50905 => &priorityD.45053
  # DEBUG thisD.50914 => &priorityD.45053
  # VUSE <.MEM_4>
  # PT = nonlocal escaped 
  _64 = MEM[(charD.10 * *)&priorityD.45053];
  # DEBUG D#1ptD.0 => &priorityD.45053
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.50915 => &priorityD.45053
  if (&priorityD.45053.D.12341._M_local_bufD.12343 != _64)
    goto <bb 56>;
  else
    goto <bb 57>;
;;    succ:       56 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                57 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 56, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 55, next block 57, flags: (NEW, REACHABLE)
;;    pred:       55 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => priorityD.45053.D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.50907 => &priorityD.45053
  # DEBUG __sizeD.50906 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => &priorityD.45053
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => &priorityD.45053
  # DEBUG D#91ptD.0 => &priorityD.45053._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.50910 => _64
  # DEBUG __aD.50908 => D#89ptD.0
  # DEBUG __nD.50909 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.50913 => _64
  # DEBUG thisD.50911 => D#85ptD.0
  # DEBUG D.50912 => D#86ptD.0
  # .MEM_121 = VDEF <.MEM_4>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_64);
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 57, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 56, next block 58, flags: (NEW, REACHABLE)
;;    pred:       55 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                56 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_78 = PHI <.MEM_4(55), .MEM_121(56)>
  # DEBUG D#95ptD.0 => &priorityD.45053._M_dataplusD.12321
  # DEBUG thisD.50916 => D#95ptD.0
  # DEBUG thisD.50917 => D#95ptD.0
  # DEBUG thisD.50918 => D#95ptD.0
  [LP 4] resx 17
;;    succ:       58 (EH,EXECUTABLE)

;;   basic block 58, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 57, next block 59, flags: (NEW)
;;    pred:       57 (EH,EXECUTABLE)
<L44>: [LP 4]
  goto <bb 60> (<L24>);
;;    succ:       60 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 59, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 58, next block 60, flags: (NEW)
;;    pred:       13 (EH,EXECUTABLE)
<L35>: [LP 19]
;;    succ:       60 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 60, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 59, next block 61, flags: (NEW, REACHABLE)
;;    pred:       59 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                58 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                45 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                49 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_5 = PHI <.MEM_32(59), .MEM_78(58), .MEM_67(45), .MEM_65(49)>
<L24>:
  # .MEM_69 = VDEF <.MEM_5>
  priorityD.45053 ={v} {CLOBBER};
  # DEBUG D#241ptD.0 => &this_7(D)->_bufferD.44881
  # DEBUG thisD.50919 => D#241ptD.0
  # DEBUG D#170ptD.0 => &D#241ptD.0->D.44879
  # DEBUG thisD.49919 => D#170ptD.0
  # DEBUG thisD.49916 => D#241ptD.0
  # DEBUG D#20ptD.0 => &D#241ptD.0->D.44879._M_implD.44330._M_finishD.44335
  # DEBUG thisD.49918 => NULL
  # DEBUG __xD.49917 => D#20ptD.0
  # DEBUG D#178ptD.0 => MEM[(const struct iteratorD.44217 &)D#241ptD.0 + 48]._M_curD.44229
  # DEBUG D.49925 => D#178ptD.0
  # DEBUG D#177ptD.0 => MEM[(const struct iteratorD.44217 &)D#241ptD.0 + 48]._M_firstD.44230
  # DEBUG D.49926 => D#177ptD.0
  # DEBUG D#176ptD.0 => MEM[(const struct iteratorD.44217 &)D#241ptD.0 + 48]._M_lastD.44231
  # DEBUG D.49927 => D#176ptD.0
  # DEBUG D#175ptD.0 => MEM[(const struct iteratorD.44217 &)D#241ptD.0 + 48]._M_nodeD.44232
  # DEBUG D.49928 => D#175ptD.0
  # DEBUG thisD.49913 => D#241ptD.0
  # DEBUG D#21ptD.0 => &D#241ptD.0->D.44879._M_implD.44330._M_startD.44334
  # DEBUG thisD.49915 => NULL
  # DEBUG __xD.49914 => D#21ptD.0
  # DEBUG D#174ptD.0 => MEM[(const struct iteratorD.44217 &)D#241ptD.0 + 16]._M_curD.44229
  # DEBUG D.49921 => D#174ptD.0
  # DEBUG D#173ptD.0 => MEM[(const struct iteratorD.44217 &)D#241ptD.0 + 16]._M_firstD.44230
  # DEBUG D.49922 => D#173ptD.0
  # DEBUG D#172ptD.0 => MEM[(const struct iteratorD.44217 &)D#241ptD.0 + 16]._M_lastD.44231
  # DEBUG D.49923 => D#172ptD.0
  # DEBUG D#171ptD.0 => MEM[(const struct iteratorD.44217 &)D#241ptD.0 + 16]._M_nodeD.44232
  # DEBUG D.49924 => D#171ptD.0
  # DEBUG D#22ptD.0 => D#241ptD.0
  # DEBUG thisD.49912 => D#22ptD.0
  # DEBUG __firstD.49911 => D#23ptD.0
  # DEBUG __lastD.49910 => D#24ptD.0
  # DEBUG D.49909 => D#25ptD.0
  # DEBUG thisD.51461 => D#254ptD.0
  # VUSE <.MEM_69>
  # PT = nonlocal escaped 
  _216 = MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_mapD.44332;
  if (_216 != 0B)
    goto <bb 61>;
  else
    goto <bb 67>;
;;    succ:       61 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                67 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 61, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 60, next block 62, flags: (NEW, REACHABLE)
;;    pred:       60 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_69>
  # PT = nonlocal escaped 
  _217 = MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_finishD.44335._M_nodeD.44232;
  # PT = nonlocal escaped 
  _218 = _217 + 8;
  # VUSE <.MEM_69>
  # PT = nonlocal escaped 
  __nstart_219 = MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_startD.44334._M_nodeD.44232;
  # DEBUG D#147ptD.0 => D#254ptD.0
  # DEBUG __nstartD.51467 => __nstart_219
  # DEBUG __nfinishD.51466 => _218
  # DEBUG thisD.51465 => D#147ptD.0
  # DEBUG __nD.51468 => __nstart_219
  if (_218 <= __nstart_219)
    goto <bb 66>;
  else
    goto <bb 62>;
;;    succ:       66 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                62 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 62, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 61, next block 63, flags: (NEW)
;;    pred:       61 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       63 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 63, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 62, next block 64, flags: (NEW)
;;    pred:       62 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                64 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_54 = PHI <.MEM_69(62), .MEM_288(64)>
  # PT = nonlocal escaped 
  # __nstart_154 = PHI <__nstart_219(62), __nstart_222(64)>
  # DEBUG __nD.51468 => __nstart_154
  # VUSE <.MEM_54>
  # PT = nonlocal escaped 
  _221 = *__nstart_154;
  # DEBUG D#145ptD.0 => D#146ptD.0
  # DEBUG __pD.51470 => _221
  # DEBUG thisD.51469 => D#145ptD.0
  # DEBUG D#144ptD.0 => D#145ptD.0
  # DEBUG __sizeD.49700 => 8
  # DEBUG D#143ptD.0 => &D#144ptD.0->_M_implD.44330
  # DEBUG D#141ptD.0 => D#143ptD.0
  # DEBUG __pD.51474 => _221
  # DEBUG __aD.51472 => D#141ptD.0
  # DEBUG __nD.51473 => D#142ptD.0
  # DEBUG D#140ptD.0 => D#142ptD.0
  # DEBUG D#139ptD.0 => D#141ptD.0
  # DEBUG D#137ptD.0 => D#139ptD.0
  # DEBUG D#138ptD.0 => D#140ptD.0
  # DEBUG __pD.51477 => _221
  # DEBUG thisD.51475 => D#137ptD.0
  # DEBUG D.51476 => D#138ptD.0
  # .MEM_288 = VDEF <.MEM_54>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_221);
  # PT = nonlocal escaped 
  __nstart_222 = __nstart_154 + 8;
  # DEBUG __nD.51468 => __nstart_222
  # DEBUG __nD.51468 => __nstart_222
  if (_218 <= __nstart_222)
    goto <bb 65>;
  else
    goto <bb 64>;
;;    succ:       65 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                64 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 64, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 63, next block 65, flags: (NEW)
;;    pred:       63 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 63>;
;;    succ:       63 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 65, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 64, next block 66, flags: (NEW)
;;    pred:       63 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_288>
  pretmp_211 = MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_mapD.44332;
;;    succ:       66 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 66, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 65, next block 67, flags: (NEW, REACHABLE)
;;    pred:       65 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                61 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_138 = PHI <.MEM_288(65), .MEM_69(61)>
  # PT = nonlocal escaped 
  # prephitmp_117 = PHI <pretmp_211(65), _216(61)>
  # DEBUG D#168ptD.0 => D#254ptD.0->_M_implD.44330._M_map_sizeD.44333
  # DEBUG D#257ptD.0 => MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_mapD.44332
  # DEBUG D#166ptD.0 => D#254ptD.0
  # DEBUG D#167ptD.0 => D#168ptD.0
  # DEBUG __pD.51480 => D#257ptD.0
  # DEBUG thisD.51478 => D#166ptD.0
  # DEBUG __nD.51479 => D#167ptD.0
  # DEBUG D#165ptD.0 => D#167ptD.0
  # DEBUG D#164ptD.0 => D#166ptD.0
  # DEBUG D#163ptD.0 => D#164ptD.0
  # DEBUG thisD.49862 => D#163ptD.0
  # DEBUG D#162ptD.0 => D#163ptD.0
  # DEBUG thisD.49850 => D#162ptD.0
  # DEBUG thisD.49842 => NULL
  # DEBUG D.49843 => NULL
  # DEBUG thisD.49840 => NULL
  # DEBUG D#132ptD.0 => &__map_allocD.51481
  # DEBUG D#133ptD.0 => D#165ptD.0
  # DEBUG __pD.51484 => D#257ptD.0
  # DEBUG __aD.51482 => D#132ptD.0
  # DEBUG __nD.51483 => D#133ptD.0
  # DEBUG D#131ptD.0 => D#133ptD.0
  # DEBUG D#130ptD.0 => D#132ptD.0
  # DEBUG D#128ptD.0 => D#130ptD.0
  # DEBUG D#129ptD.0 => D#131ptD.0
  # DEBUG __pD.51487 => D#257ptD.0
  # DEBUG thisD.51485 => D#128ptD.0
  # DEBUG D.51486 => D#129ptD.0
  # .MEM_289 = VDEF <.MEM_138>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (prephitmp_117);
  # DEBUG thisD.49876 => &__map_allocD.51481
  # DEBUG thisD.49855 => &__map_allocD.51481
;;    succ:       67 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 67, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 66, next block 68, flags: (NEW, REACHABLE)
;;    pred:       60 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                66 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_71 = PHI <.MEM_69(60), .MEM_289(66)>
  # DEBUG D#169ptD.0 => &D#254ptD.0->_M_implD.44330
  # DEBUG thisD.51462 => D#169ptD.0
  # DEBUG thisD.51463 => D#169ptD.0
  # DEBUG thisD.51464 => D#169ptD.0
  # .MEM_137 = VDEF <.MEM_71>
  MEM[(struct  &)this_7(D) + 96] ={v} {CLOBBER};
  [LP 1] resx 2
;;    succ:       68 (EH,EXECUTABLE)

;;   basic block 68, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 67, next block 69, flags: (NEW)
;;    pred:       67 (EH,EXECUTABLE)
<L45>: [LP 1]
  goto <bb 70> (<L26>);
;;    succ:       70 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 69, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 68, next block 70, flags: (NEW)
;;    pred:       2 (EH,EXECUTABLE)
<L33>: [LP 17]
;;    succ:       70 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 70, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 69, next block 71, flags: (NEW, REACHABLE)
;;    pred:       9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                68 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                69 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_6 = PHI <.MEM_249(9), .MEM_137(68), .MEM_236(69)>
<L26>:
  # DEBUG thisD.51488 => _8
  # .MEM_295 = VDEF <.MEM_6>
  MEM[(struct ModuleD.32543 *)this_7(D)]._vptr.ModuleD.33338 = &MEM[(voidD.45 *)&_ZTV6ModuleD.33343 + 16B];
  # DEBUG D#125ptD.0 => &_8->_childrenD.33293
  # DEBUG thisD.51489 => D#125ptD.0
  # DEBUG D#119ptD.0 => &D#125ptD.0->D.33291
  # DEBUG thisD.49557 => D#119ptD.0
  # DEBUG D#122ptD.0 => D#125ptD.0->D.33291._M_implD.32782._M_finishD.32785
  # DEBUG D#121ptD.0 => D#125ptD.0->D.33291._M_implD.32782._M_startD.32784
  # DEBUG D#64ptD.0 => D#121ptD.0
  # DEBUG D#65ptD.0 => D#122ptD.0
  # DEBUG __firstD.49556 => D#64ptD.0
  # DEBUG __lastD.49555 => D#65ptD.0
  # DEBUG D.49554 => D#66ptD.0
  # DEBUG D#63ptD.0 => D#65ptD.0
  # DEBUG D#62ptD.0 => D#64ptD.0
  # DEBUG D#60ptD.0 => D#62ptD.0
  # DEBUG D#61ptD.0 => D#63ptD.0
  # DEBUG __firstD.49166 => D#60ptD.0
  # DEBUG __lastD.49165 => D#61ptD.0
  # DEBUG D#59ptD.0 => D#61ptD.0
  # DEBUG D#58ptD.0 => D#60ptD.0
  # DEBUG D#56ptD.0 => D#58ptD.0
  # DEBUG D#57ptD.0 => D#59ptD.0
  # DEBUG D.49155 => D#56ptD.0
  # DEBUG D.49154 => D#57ptD.0
  # DEBUG D#120ptD.0 => &D#125ptD.0->D.33291
  # DEBUG thisD.51490 => D#120ptD.0
  # DEBUG D#118ptD.0 => D#120ptD.0->_M_implD.32782._M_end_of_storageD.32786
  # DEBUG D#117ptD.0 => (long intD.12) D#118ptD.0
  # VUSE <.MEM_295>
  # PT = nonlocal escaped 
  _136 = MEM[(struct _Vector_baseD.32549 *)this_7(D) + 72B]._M_implD.32782._M_startD.32784;
  # DEBUG D#116ptD.0 => (long intD.12) _136
  # DEBUG D#115ptD.0 => D#117ptD.0 - D#116ptD.0
  # DEBUG D#114ptD.0 => D#115ptD.0 /[ex] 8
  # DEBUG D#111ptD.0 => D#120ptD.0
  # DEBUG D#112ptD.0 => (long unsigned intD.14) D#114ptD.0
  # DEBUG __pD.51493 => _136
  # DEBUG thisD.51491 => D#111ptD.0
  # DEBUG __nD.51492 => D#112ptD.0
  # DEBUG D#110ptD.0 => D#112ptD.0
  # DEBUG D#109ptD.0 => D#111ptD.0
  if (_136 != 0B)
    goto <bb 71>;
  else
    goto <bb 72>;
;;    succ:       71 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                72 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 71, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 70, next block 72, flags: (NEW, REACHABLE)
;;    pred:       70 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#108ptD.0 => &D#109ptD.0->_M_implD.32782
  # DEBUG D#106ptD.0 => D#108ptD.0
  # DEBUG D#107ptD.0 => D#110ptD.0
  # DEBUG __pD.51497 => _136
  # DEBUG __aD.51495 => D#106ptD.0
  # DEBUG __nD.51496 => D#107ptD.0
  # DEBUG D#105ptD.0 => D#107ptD.0
  # DEBUG D#104ptD.0 => D#106ptD.0
  # DEBUG D#102ptD.0 => D#104ptD.0
  # DEBUG D#103ptD.0 => D#105ptD.0
  # DEBUG __pD.51500 => _136
  # DEBUG thisD.51498 => D#102ptD.0
  # DEBUG D.51499 => D#103ptD.0
  # .MEM_296 = VDEF <.MEM_295>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_136);
;;    succ:       72 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 72, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 71, next block 73, flags: (NEW, REACHABLE)
;;    pred:       70 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                71 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_228 = PHI <.MEM_295(70), .MEM_296(71)>
  # DEBUG D#113ptD.0 => &D#120ptD.0->_M_implD.32782
  # DEBUG thisD.51501 => D#113ptD.0
  # DEBUG thisD.51502 => D#113ptD.0
  # DEBUG thisD.51503 => D#113ptD.0
  # .MEM_301 = VDEF <.MEM_228>
  MEM[(struct  &)this_7(D) + 72] ={v} {CLOBBER};
  # DEBUG D#124ptD.0 => &_8->_fullnameD.32546
  # DEBUG thisD.51504 => D#124ptD.0
  # DEBUG thisD.51505 => D#124ptD.0
  # DEBUG thisD.51514 => D#124ptD.0
  # VUSE <.MEM_301>
  # PT = nonlocal escaped 
  _224 = MEM[(charD.10 * *)this_7(D) + 40B];
  # DEBUG D#1ptD.0 => D#124ptD.0
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.51515 => D#124ptD.0
  # PT = nonlocal 
  _225 = &MEM[(const struct basic_stringD.3646 *)this_7(D) + 40B].D.12341._M_local_bufD.12343;
  if (_224 != _225)
    goto <bb 73>;
  else
    goto <bb 74>;
;;    succ:       73 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                74 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 73, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 72, next block 74, flags: (NEW, REACHABLE)
;;    pred:       72 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => MEM[(struct basic_stringD.3646 *)D#124ptD.0].D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.51507 => D#124ptD.0
  # DEBUG __sizeD.51506 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => D#124ptD.0
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => D#124ptD.0
  # DEBUG D#91ptD.0 => &MEM[(struct basic_stringD.3646 *)D#124ptD.0]._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.51510 => _224
  # DEBUG __aD.51508 => D#89ptD.0
  # DEBUG __nD.51509 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.51513 => _224
  # DEBUG thisD.51511 => D#85ptD.0
  # DEBUG D.51512 => D#86ptD.0
  # .MEM_302 = VDEF <.MEM_301>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_224);
;;    succ:       74 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 74, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 73, next block 75, flags: (NEW, REACHABLE)
;;    pred:       72 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                73 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_229 = PHI <.MEM_301(72), .MEM_302(73)>
  # DEBUG D#95ptD.0 => &MEM[(struct basic_stringD.3646 *)D#124ptD.0]._M_dataplusD.12321
  # DEBUG thisD.51516 => D#95ptD.0
  # DEBUG thisD.51517 => D#95ptD.0
  # DEBUG thisD.51518 => D#95ptD.0
  # .MEM_306 = VDEF <.MEM_229>
  MEM[(struct  &)this_7(D) + 40] ={v} {CLOBBER};
  # DEBUG D#123ptD.0 => &_8->_nameD.32545
  # DEBUG thisD.51519 => D#123ptD.0
  # DEBUG thisD.51520 => D#123ptD.0
  # DEBUG thisD.51529 => D#123ptD.0
  # VUSE <.MEM_306>
  # PT = nonlocal escaped 
  _226 = MEM[(charD.10 * *)this_7(D) + 8B];
  # DEBUG D#1ptD.0 => D#123ptD.0
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.51530 => D#123ptD.0
  # PT = nonlocal 
  _227 = &MEM[(const struct basic_stringD.3646 *)this_7(D) + 8B].D.12341._M_local_bufD.12343;
  if (_226 != _227)
    goto <bb 75>;
  else
    goto <bb 76>;
;;    succ:       75 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                76 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 75, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 74, next block 76, flags: (NEW, REACHABLE)
;;    pred:       74 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => MEM[(struct basic_stringD.3646 *)D#123ptD.0].D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.51522 => D#123ptD.0
  # DEBUG __sizeD.51521 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => D#123ptD.0
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => D#123ptD.0
  # DEBUG D#91ptD.0 => &MEM[(struct basic_stringD.3646 *)D#123ptD.0]._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.51525 => _226
  # DEBUG __aD.51523 => D#89ptD.0
  # DEBUG __nD.51524 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.51528 => _226
  # DEBUG thisD.51526 => D#85ptD.0
  # DEBUG D.51527 => D#86ptD.0
  # .MEM_307 = VDEF <.MEM_306>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_226);
;;    succ:       76 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 76, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 75, next block 1, flags: (NEW, REACHABLE)
;;    pred:       74 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                75 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_230 = PHI <.MEM_306(74), .MEM_307(75)>
  # DEBUG D#95ptD.0 => &MEM[(struct basic_stringD.3646 *)D#123ptD.0]._M_dataplusD.12321
  # DEBUG thisD.51531 => D#95ptD.0
  # DEBUG thisD.51532 => D#95ptD.0
  # DEBUG thisD.51533 => D#95ptD.0
  # .MEM_312 = VDEF <.MEM_230>
  MEM[(struct  &)this_7(D)] ={v} {CLOBBER};
  resx 1
;;    succ:      

}


Creating dr for MEM[(struct _Deque_base *)this_7(D) + 96B]._M_impl._M_map
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_7(D) + 96B]
	Access function 0: 0
	Access function 1: 0
Creating dr for MEM[(struct _Deque_base *)this_7(D) + 96B]._M_impl._M_map_size
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 104
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_7(D) + 96B]
	Access function 0: 64
	Access function 1: 0
Creating dr for *__nstart_149
analyze_innermost: success.
	base_address: _144 + _147 * 8
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *__nstart_149
Creating dr for MEM[(struct _Deque_iterator *)this_7(D) + 112B]._M_node
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 136
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_7(D) + 112B]
	Access function 0: 192
Creating dr for MEM[(struct _Deque_iterator *)this_7(D) + 112B]._M_first
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 120
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_7(D) + 112B]
	Access function 0: 64
Creating dr for MEM[(struct _Deque_iterator *)this_7(D) + 112B]._M_last
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 128
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_7(D) + 112B]
	Access function 0: 128
Creating dr for MEM[(struct _Deque_iterator *)this_7(D) + 144B]._M_node
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 168
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_7(D) + 144B]
	Access function 0: 192
Creating dr for MEM[(struct _Deque_iterator *)this_7(D) + 144B]._M_first
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 152
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_7(D) + 144B]
	Access function 0: 64
Creating dr for MEM[(struct _Deque_iterator *)this_7(D) + 144B]._M_last
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 160
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_iterator *)this_7(D) + 144B]
	Access function 0: 128
Creating dr for MEM[(struct _Deque_base *)this_7(D) + 96B]._M_impl._M_start._M_cur
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 112
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_7(D) + 96B]
	Access function 0: 0
	Access function 1: 128
	Access function 2: 0
Creating dr for MEM[(struct _Deque_base *)this_7(D) + 96B]._M_impl._M_finish._M_cur
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 144
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_7(D) + 96B]
	Access function 0: 0
	Access function 1: 384
	Access function 2: 0
Creating dr for this_7(D)->_state
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 176
	step: 0
	aligned to: 256
	base_object: *this_7(D)
	Access function 0: 1408
Creating dr for this_7(D)->_out_port
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 192
	step: 0
	aligned to: 256
	base_object: *this_7(D)
	Access function 0: 1536
Creating dr for this_7(D)->_out_vc
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 196
	step: 0
	aligned to: 256
	base_object: *this_7(D)
	Access function 0: 1568
Creating dr for this_7(D)->_pri
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 204
	step: 0
	aligned to: 256
	base_object: *this_7(D)
	Access function 0: 1632
Creating dr for this_7(D)->_watched
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 212
	step: 0
	aligned to: 256
	base_object: *this_7(D)
	Access function 0: 1696
Creating dr for this_7(D)->_expected_pid
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 216
	step: 0
	aligned to: 256
	base_object: *this_7(D)
	Access function 0: 1728
Creating dr for this_7(D)->_last_id
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 220
	step: 0
	aligned to: 256
	base_object: *this_7(D)
	Access function 0: 1760
Creating dr for this_7(D)->_last_pid
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 224
	step: 0
	aligned to: 256
	base_object: *this_7(D)
	Access function 0: 1792
Creating dr for MEM[(struct _Alloc_hider *)&D.45054]._M_p
analyze_innermost: success.
	base_address: &D.45054
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Alloc_hider *)&D.45054]
	Access function 0: 0
Creating dr for MEM[(char * *)&D.45054]
analyze_innermost: success.
	base_address: &D.45054
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(char * *)&D.45054]
Creating dr for this_7(D)->_lookahead_routing
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 228
	step: 0
	aligned to: 256
	base_object: *this_7(D)
	Access function 0: 1824
Creating dr for MEM[(char * *)&D.45054]
analyze_innermost: success.
	base_address: &D.45054
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(char * *)&D.45054]
Creating dr for MEM[(struct OutputSet *)_33]._outputs._M_t._M_impl._M_header._M_color
analyze_innermost: success.
	base_address: _33
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct OutputSet *)_33]
	Access function 0: 0
	Access function 1: 64
	Access function 2: 0
	Access function 3: 0
	Access function 4: 0
Creating dr for MEM[(struct OutputSet *)_33]._outputs._M_t._M_impl._M_header._M_parent
analyze_innermost: success.
	base_address: _33
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct OutputSet *)_33]
	Access function 0: 64
	Access function 1: 64
	Access function 2: 0
	Access function 3: 0
	Access function 4: 0
Creating dr for MEM[(struct OutputSet *)_33]._outputs._M_t._M_impl._M_node_count
analyze_innermost: success.
	base_address: _33
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(struct OutputSet *)_33]
	Access function 0: 320
	Access function 1: 0
	Access function 2: 0
	Access function 3: 0
Creating dr for MEM[(struct _Rb_tree_impl *)_33]._M_header._M_left
analyze_innermost: success.
	base_address: _33
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_impl *)_33]
	Access function 0: 128
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_33]._M_header._M_right
analyze_innermost: success.
	base_address: _33
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_impl *)_33]
	Access function 0: 192
	Access function 1: 64
Creating dr for this_7(D)->_route_set
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 184
	step: 0
	aligned to: 256
	base_object: *this_7(D)
	Access function 0: 1472
Creating dr for MEM[(struct _Alloc_hider *)&D.45059]._M_p
analyze_innermost: success.
	base_address: &D.45059
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Alloc_hider *)&D.45059]
	Access function 0: 0
Creating dr for MEM[(char * *)&D.45059]
analyze_innermost: success.
	base_address: &D.45059
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(char * *)&D.45059]
Creating dr for MEM[(char * *)&D.45059]
analyze_innermost: success.
	base_address: &D.45059
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(char * *)&D.45059]
Creating dr for this_7(D)->_pri_type
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 200
	step: 0
	aligned to: 256
	base_object: *this_7(D)
	Access function 0: 1600
Creating dr for this_7(D)->_pri_type
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 200
	step: 0
	aligned to: 256
	base_object: *this_7(D)
	Access function 0: 1600
Creating dr for this_7(D)->_pri_type
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 200
	step: 0
	aligned to: 256
	base_object: *this_7(D)
	Access function 0: 1600
Creating dr for this_7(D)->_pri_type
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 200
	step: 0
	aligned to: 256
	base_object: *this_7(D)
	Access function 0: 1600
Creating dr for this_7(D)->_pri_type
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 200
	step: 0
	aligned to: 256
	base_object: *this_7(D)
	Access function 0: 1600
Creating dr for MEM[(struct _Alloc_hider *)&D.45061]._M_p
analyze_innermost: success.
	base_address: &D.45061
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Alloc_hider *)&D.45061]
	Access function 0: 0
Creating dr for __dnew
analyze_innermost: success.
	base_address: &__dnew
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(long unsigned int *)&__dnew]
Creating dr for MEM[(char * *)&D.45061]
analyze_innermost: success.
	base_address: &D.45061
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(char * *)&D.45061]
Creating dr for __dnew
analyze_innermost: success.
	base_address: &__dnew
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(long unsigned int *)&__dnew]
Creating dr for MEM[(size_type *)&D.45061 + 16B]
analyze_innermost: success.
	base_address: &D.45061
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(size_type *)&D.45061 + 16B]
Creating dr for MEM[(char * *)&D.45061]
analyze_innermost: success.
	base_address: &D.45061
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(char * *)&D.45061]
Creating dr for this_7(D)->_priority_donation
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 208
	step: 0
	aligned to: 256
	base_object: *this_7(D)
	Access function 0: 1664
Creating dr for MEM[(char * *)&D.45061]
analyze_innermost: success.
	base_address: &D.45061
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(char * *)&D.45061]
Creating dr for MEM[(char * *)&priority]
analyze_innermost: success.
	base_address: &priority
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(char * *)&priority]
Creating dr for MEM[(struct _Deque_base *)this_7(D) + 96B]._M_impl._M_finish._M_node
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 168
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_7(D) + 96B]
	Access function 0: 192
	Access function 1: 384
	Access function 2: 0
Creating dr for MEM[(struct _Deque_base *)this_7(D) + 96B]._M_impl._M_start._M_node
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 136
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_7(D) + 96B]
	Access function 0: 192
	Access function 1: 128
	Access function 2: 0
Creating dr for *__nstart_154
analyze_innermost: success.
	base_address: __nstart_219
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_219
	Access function 0: {0B, +, 8}_3
Creating dr for *__nstart_154
analyze_innermost: success.
	base_address: __nstart_219
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_219
	Access function 0: {0B, +, 8}_3
Creating dr for *__nstart_154
analyze_innermost: success.
	base_address: __nstart_219
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_219
	Access function 0: {0B, +, 8}_3
Creating dr for *__nstart_154
analyze_innermost: success.
	base_address: __nstart_219
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_219
	Access function 0: {0B, +, 8}_3
Analyzing # of iterations of loop 3
  exit condition [__nstart_219 + 8, + , 8](no_overflow) < _217 + 8
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) _217 - (unsigned long) __nstart_219) + 7) / 8, bounded by 2305843009213693951
Analyzing # of iterations of loop 3
  exit condition [__nstart_219 + 8, + , 8](no_overflow) < _217 + 8
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) _217 - (unsigned long) __nstart_219) + 7) / 8, bounded by 2305843009213693951
Creating dr for *__nstart_154
analyze_innermost: success.
	base_address: __nstart_219
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_219
	Access function 0: {0B, +, 8}_3
Creating dr for *__nstart_154
analyze_innermost: success.
	base_address: __nstart_219
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_219
	Access function 0: {0B, +, 8}_3
Creating dr for *__nstart_154
analyze_innermost: success.
	base_address: __nstart_219
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_219
	Access function 0: {0B, +, 8}_3
Creating dr for *__nstart_154
analyze_innermost: success.
	base_address: __nstart_219
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_219
	Access function 0: {0B, +, 8}_3
Analyzing # of iterations of loop 3
  exit condition [__nstart_219 + 8, + , 8](no_overflow) < _217 + 8
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) _217 - (unsigned long) __nstart_219) + 7) / 8, bounded by 2305843009213693951
Creating dr for MEM[(struct _Deque_base *)this_7(D) + 96B]._M_impl._M_map
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_7(D) + 96B]
	Access function 0: 0
	Access function 1: 0
Creating dr for MEM[(struct Module *)this_7(D)]._vptr.Module
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct Module *)this_7(D)]
	Access function 0: 0
Creating dr for MEM[(struct _Vector_base *)this_7(D) + 72B]._M_impl._M_start
analyze_innermost: success.
	base_address: this_7(D)
	offset from base address: 0
	constant offset from base address: 72
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Vector_base *)this_7(D) + 72B]
	Access function 0: 0
	Access function 1: 0

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:16)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:4, LOOPS:0, CONDITIONS:1, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:79, LOOPS:1, CONDITIONS:30, STMTS:986)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_69 })
  {
    <bb 2>:
    _8 = &this_7(D)->D.44977;
    # .MEM_12 = VDEF <.MEM_9(D)>
    Module::Module (_8, parent_10(D), name_11(D));
    # .MEM_13 = VDEF <.MEM_12>
    this_7(D)->D.44977._vptr.Module = &MEM[(void *)&_ZTV2VC + 16B];
    # DEBUG D#242 => &this_7(D)->_buffer
    # DEBUG this => D#242
    # DEBUG D#254 => &MEM[(struct deque *)this_7(D) + 96B].D.44879
    # DEBUG this => D#254
    # DEBUG D#240 => &D#254->_M_impl
    # DEBUG this => D#240
    # DEBUG this => D#240
    # DEBUG this => D#240
    # .MEM_79 = VDEF <.MEM_13>
    MEM[(struct _Deque_impl *)this_7(D) + 96B]._M_map = 0B;
    # DEBUG D#127 => &D#240->_M_start
    # DEBUG this => D#127
    # .MEM_81 = VDEF <.MEM_79>
    MEM[(struct _Deque_iterator *)this_7(D) + 112B]._M_cur = 0B;
    # .MEM_82 = VDEF <.MEM_81>
    MEM[(struct _Deque_iterator *)this_7(D) + 112B]._M_first = 0B;
    # .MEM_83 = VDEF <.MEM_82>
    MEM[(struct _Deque_iterator *)this_7(D) + 112B]._M_last = 0B;
    # .MEM_84 = VDEF <.MEM_83>
    MEM[(struct _Deque_iterator *)this_7(D) + 112B]._M_node = 0B;
    # DEBUG D#126 => &D#240->_M_finish
    # DEBUG this => D#126
    # .MEM_85 = VDEF <.MEM_84>
    MEM[(struct _Deque_iterator *)this_7(D) + 144B]._M_cur = 0B;
    # .MEM_86 = VDEF <.MEM_85>
    MEM[(struct _Deque_iterator *)this_7(D) + 144B]._M_first = 0B;
    # .MEM_87 = VDEF <.MEM_86>
    MEM[(struct _Deque_iterator *)this_7(D) + 144B]._M_last = 0B;
    # .MEM_88 = VDEF <.MEM_87>
    MEM[(struct _Deque_iterator *)this_7(D) + 144B]._M_node = 0B;
    # DEBUG this => D#254
    # DEBUG __num_elements => 0
    # DEBUG __size => 8
    # DEBUG __num_nodes => 1
    # DEBUG __a => &D.51294
    # DEBUG __b => &D.51295
    # .MEM_233 = VDEF <.MEM_88>
    MEM[(struct _Deque_base *)this_7(D) + 96B]._M_impl._M_map_size = 8;
    # DEBUG D#235 => D#254
    # DEBUG __n => 8
    # DEBUG this => D#235
    # DEBUG D#234 => D#235
    # DEBUG D#163 => D#234
    # DEBUG this => D#163
    # DEBUG D#162 => D#163
    # DEBUG this => D#162
    # DEBUG this => NULL
    # DEBUG D.49843 => NULL
    # DEBUG this => NULL
    # DEBUG D#233 => &__map_alloc
    # DEBUG __n => 8
    # DEBUG __a => D#233
    # DEBUG D#232 => D#233
    # DEBUG D#230 => D#232
    # DEBUG D#231 => 0B
    # DEBUG __n => 8
    # DEBUG this => D#230
    # DEBUG D.51292 => D#231
    # DEBUG D#229 => D#230
    # DEBUG D#228 => D#229
    # DEBUG this => D#228
    # .MEM_236 = VDEF <.MEM_233>
    _144 = operator new (64);

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 bb_5 })
  {
    <bb 3>:
    # DEBUG this => &__map_alloc
    # DEBUG this => &__map_alloc
    # .MEM_237 = VDEF <.MEM_236>
    MEM[(struct _Deque_base *)this_7(D) + 96B]._M_impl._M_map = _144;
    # VUSE <.MEM_237>
    _145 = MEM[(struct _Deque_base *)this_7(D) + 96B]._M_impl._M_map_size;
    _146 = _145 + 18446744073709551615;
    _147 = _146 >> 1;
    _148 = _147 * 8;
    __nstart_149 = _144 + _148;
    # DEBUG __nstart => __nstart_149
    # DEBUG D#252 => __nstart_149 + 8
    # DEBUG __nfinish => D#252
    # DEBUG D#213 => D#254
    # DEBUG __nstart => __nstart_149
    # DEBUG __nfinish => D#252
    # DEBUG this => D#213
    # DEBUG __cur => __nstart_149
    # DEBUG D#210 => D#211
    # DEBUG this => D#210
    # DEBUG D#209 => D#210
    # DEBUG __size => 8
    # DEBUG D#208 => &D#209->_M_impl
    # DEBUG D#207 => D#208
    # DEBUG __n => NULL
    # DEBUG __a => D#207
    # DEBUG D#206 => D#207
    # DEBUG D#204 => D#206
    # DEBUG D#205 => 0B
    # DEBUG __n => NULL
    # DEBUG this => D#204
    # DEBUG D.51321 => D#205
    # DEBUG D#203 => D#204
    # DEBUG D#202 => D#203
    # DEBUG this => D#202
    # .MEM_234 = VDEF <.MEM_237>
    _142 = operator new (512);

  }
  bb_4 (preds = {bb_3 }, succs = {bb_42 bb_10 })
  {
    <bb 4>:
    # .MEM_159 = VDEF <.MEM_234>
    *__nstart_149 = _142;
    # DEBUG D#253 => __nstart_149 + 8
    # DEBUG __cur => D#253
    # DEBUG __cur => D#253
    # DEBUG D#238 => &D#254->_M_impl._M_start
    # DEBUG this => D#238
    # DEBUG __new_node => __nstart_149
    # .MEM_250 = VDEF <.MEM_159>
    MEM[(struct _Deque_iterator *)this_7(D) + 112B]._M_node = __nstart_149;
    # .MEM_251 = VDEF <.MEM_250>
    MEM[(struct _Deque_iterator *)this_7(D) + 112B]._M_first = _142;
    # DEBUG __size => 8
    _153 = _142 + 512;
    # .MEM_252 = VDEF <.MEM_251>
    MEM[(struct _Deque_iterator *)this_7(D) + 112B]._M_last = _153;
    # DEBUG D#237 => &D#254->_M_impl._M_finish
    # DEBUG this => D#237
    # DEBUG __new_node => __nstart_149
    # .MEM_253 = VDEF <.MEM_252>
    MEM[(struct _Deque_iterator *)this_7(D) + 144B]._M_node = __nstart_149;
    # .MEM_254 = VDEF <.MEM_253>
    MEM[(struct _Deque_iterator *)this_7(D) + 144B]._M_first = _142;
    # DEBUG __size => 8
    # .MEM_255 = VDEF <.MEM_254>
    MEM[(struct _Deque_iterator *)this_7(D) + 144B]._M_last = _153;
    # .MEM_256 = VDEF <.MEM_255>
    MEM[(struct _Deque_base *)this_7(D) + 96B]._M_impl._M_start._M_cur = _142;
    # DEBUG __size => 8
    # .MEM_257 = VDEF <.MEM_256>
    MEM[(struct _Deque_base *)this_7(D) + 96B]._M_impl._M_finish._M_cur = _142;
    # .MEM_14 = VDEF <.MEM_257>
    this_7(D)->_state = 0;
    # .MEM_15 = VDEF <.MEM_14>
    this_7(D)->_out_port = -1;
    # .MEM_16 = VDEF <.MEM_15>
    this_7(D)->_out_vc = -1;
    # .MEM_17 = VDEF <.MEM_16>
    this_7(D)->_pri = 0;
    # .MEM_18 = VDEF <.MEM_17>
    this_7(D)->_watched = 0;
    # .MEM_19 = VDEF <.MEM_18>
    this_7(D)->_expected_pid = -1;
    # .MEM_20 = VDEF <.MEM_19>
    this_7(D)->_last_id = -1;
    # .MEM_21 = VDEF <.MEM_20>
    this_7(D)->_last_pid = -1;
    # DEBUG D#27 => &D.45055
    # DEBUG this => D#27
    # DEBUG D#26 => D#27
    # DEBUG this => D#26
    # DEBUG D#186 => &D.45055
    # DEBUG this => &D.45054
    # DEBUG __s => "routing_delay"
    # DEBUG __a => D#186
    # DEBUG D#185 => D#186
    # DEBUG this => &D.45054
    # DEBUG D#183 => &D.45054._M_dataplus
    # DEBUG D#72 => D#185
    # DEBUG this => D#183
    # DEBUG __dat => &D.45054.D.12341._M_local_buf
    # DEBUG __a => D#72
    # DEBUG D#71 => D#72
    # DEBUG D#69 => D#183
    # DEBUG D#70 => D#71
    # DEBUG this => D#69
    # DEBUG __a => D#70
    # DEBUG D#68 => D#70
    # DEBUG D#67 => D#69
    # DEBUG this => D#67
    # DEBUG D.49188 => D#68
    # .MEM_258 = VDEF <.MEM_21>
    MEM[(struct _Alloc_hider *)&D.45054]._M_p = &D.45054.D.12341._M_local_buf;
    # DEBUG __s => "routing_delay"
    # DEBUG this => &D.45054
    # DEBUG __beg => "routing_delay"
    # DEBUG __end => &MEM[(void *)"routing_delay" + 13B]
    # DEBUG this => &D.45054
    # DEBUG __beg => "routing_delay"
    # DEBUG __end => &MEM[(void *)"routing_delay" + 13B]
    # DEBUG this => &D.45054
    # DEBUG __beg => "routing_delay"
    # DEBUG __end => &MEM[(void *)"routing_delay" + 13B]
    # DEBUG __ptr => "routing_delay"
    # DEBUG __first => "routing_delay"
    # DEBUG __last => &MEM[(void *)"routing_delay" + 13B]
    # DEBUG D#189 => &__first
    # DEBUG D.50152 => D#189
    # DEBUG __first => "routing_delay"
    # DEBUG __last => &MEM[(void *)"routing_delay" + 13B]
    # DEBUG __dnew => 13
    # DEBUG D#1 => &D.45054
    # DEBUG this => D#1
    # DEBUG __p => &D.45054.D.12341._M_local_buf
    # DEBUG __k1 => "routing_delay"
    # DEBUG __k2 => &MEM[(void *)"routing_delay" + 13B]
    # DEBUG __d => &D.45054.D.12341._M_local_buf
    # DEBUG __s => "routing_delay"
    # DEBUG __n => 13
    # DEBUG __s1 => &D.45054.D.12341._M_local_buf
    # DEBUG __s2 => "routing_delay"
    # DEBUG __n => 13
    # .MEM_264 = VDEF <.MEM_258>
    __builtin_memcpy (&D.45054.D.12341._M_local_buf, "routing_delay", 13);
    # DEBUG this => &D.45054
    # DEBUG __n => 13
    # DEBUG D#9 => &D.45054
    # DEBUG __length => 13
    # DEBUG this => D#9
    # .MEM_265 = VDEF <.MEM_264>
    MEM[(size_type *)&D.45054 + 8B] = 13;
    # DEBUG D#1 => &D.45054
    # DEBUG this => D#1
    # DEBUG __c1 => &MEM[(void *)&D.45054 + 29B]
    # DEBUG __c2 => D#10
    # .MEM_266 = VDEF <.MEM_265>
    MEM[(char_type &)&D.45054 + 29] = 0;
    # DEBUG D#255 => {CLOBBER}
    # DEBUG __dnew => D#255
    # .MEM_24 = VDEF <.MEM_266>
    _25 = Configuration::GetInt (config_23(D), &D.45054);
    goto <bb 10>;

  }
  bb_5 (preds = {bb_3 }, succs = {bb_6 })
  {
  <L30>:
    # VUSE <.MEM_234>
    _164 = __builtin_eh_pointer (29);
    # .MEM_240 = VDEF <.MEM_234>
    __cxa_begin_catch (_164);
    # DEBUG D#147 => D#212
    # DEBUG __nstart => __nstart_149
    # DEBUG __nfinish => __nstart_149
    # DEBUG this => D#147
    # DEBUG __n => __nstart_149
    # .MEM_242 = VDEF <.MEM_240>
    __cxa_rethrow ();

  }
  bb_6 (preds = {bb_5 }, succs = {bb_7 })
  {
  <L32>:
    # .MEM_243 = VDEF <.MEM_242>
    __cxa_end_catch ();
    resx 30

  }
  bb_7 (preds = {bb_6 }, succs = {bb_8 })
  {
  <L27>:
    # VUSE <.MEM_243>
    _160 = __builtin_eh_pointer (28);
    # .MEM_244 = VDEF <.MEM_243>
    __cxa_begin_catch (_160);
    # DEBUG D#236 => D#254->_M_impl._M_map_size
    # VUSE <.MEM_244>
    _161 = MEM[(struct _Deque_base *)this_7(D) + 96B]._M_impl._M_map;
    # DEBUG D#166 => D#254
    # DEBUG D#167 => D#236
    # DEBUG __p => _161
    # DEBUG this => D#166
    # DEBUG __n => D#167
    # DEBUG D#165 => D#167
    # DEBUG D#164 => D#166
    # DEBUG D#163 => D#164
    # DEBUG this => D#163
    # DEBUG D#162 => D#163
    # DEBUG this => D#162
    # DEBUG this => NULL
    # DEBUG D.49843 => NULL
    # DEBUG this => NULL
    # DEBUG D#132 => &__map_alloc
    # DEBUG D#133 => D#165
    # DEBUG __p => _161
    # DEBUG __a => D#132
    # DEBUG __n => D#133
    # DEBUG D#131 => D#133
    # DEBUG D#130 => D#132
    # DEBUG D#128 => D#130
    # DEBUG D#129 => D#131
    # DEBUG __p => _161
    # DEBUG this => D#128
    # DEBUG D.51278 => D#129
    # .MEM_245 = VDEF <.MEM_244>
    operator delete (_161);
    # DEBUG this => &__map_alloc
    # DEBUG this => &__map_alloc
    # .MEM_246 = VDEF <.MEM_245>
    MEM[(struct _Deque_base *)this_7(D) + 96B]._M_impl._M_map = 0B;
    # .MEM_247 = VDEF <.MEM_246>
    MEM[(struct _Deque_base *)this_7(D) + 96B]._M_impl._M_map_size = 0;
    # .MEM_248 = VDEF <.MEM_247>
    __cxa_rethrow ();

  }
  bb_8 (preds = {bb_7 }, succs = {bb_9 })
  {
  <L29>:
    # .MEM_249 = VDEF <.MEM_248>
    __cxa_end_catch ();
    resx 27

  }
  bb_9 (preds = {bb_8 }, succs = {bb_70 })
  {
  <L34>:
    goto <bb 70> (<L26>);

  }
  bb_10 (preds = {bb_4 }, succs = {bb_11 bb_12 })
  {
    <bb 10>:
    _26 = _25 == 0;
    # .MEM_27 = VDEF <.MEM_24>
    this_7(D)->_lookahead_routing = _26;
    # DEBUG this => &D.45054
    # DEBUG this => &D.45054
    # DEBUG this => &D.45054
    # VUSE <.MEM_27>
    _30 = MEM[(char * *)&D.45054];
    # DEBUG D#1 => &D.45054
    # DEBUG this => D#1
    # DEBUG this => &D.45054
    if (&D.45054.D.12341._M_local_buf != _30)
      goto <bb 11>;
    else
      goto <bb 12>;

  }
  bb_11 (preds = {bb_10 }, succs = {bb_12 })
  {
    <bb 11>:
    # DEBUG D#94 => D.45054.D.12341._M_allocated_capacity
    # DEBUG D#93 => D#94
    # DEBUG this => &D.45054
    # DEBUG __size => D#93
    # DEBUG D#92 => D#93
    # DEBUG D#1 => &D.45054
    # DEBUG this => D#1
    # DEBUG this => &D.45054
    # DEBUG D#91 => &D.45054._M_dataplus
    # DEBUG D#89 => D#91
    # DEBUG D#90 => D#92 + 1
    # DEBUG __p => _30
    # DEBUG __a => D#89
    # DEBUG __n => D#90
    # DEBUG D#88 => D#90
    # DEBUG D#87 => D#89
    # DEBUG D#85 => D#87
    # DEBUG D#86 => D#88
    # DEBUG __p => _30
    # DEBUG this => D#85
    # DEBUG D.50778 => D#86
    # .MEM_90 = VDEF <.MEM_27>
    operator delete (_30);
    # VUSE <.MEM_90>
    pretmp_119 = this_7(D)->_lookahead_routing;

  }
  bb_12 (preds = {bb_10 bb_11 }, succs = {bb_15 bb_13 })
  {
    <bb 12>:
    # .MEM_70 = PHI <.MEM_27(10), .MEM_90(11)>
    # prephitmp_120 = PHI <_26(10), pretmp_119(11)>
    # DEBUG D#95 => &D.45054._M_dataplus
    # DEBUG this => D#95
    # DEBUG this => D#95
    # DEBUG this => D#95
    # .MEM_29 = VDEF <.MEM_70>
    D.45054 ={v} {CLOBBER};
    # DEBUG this => &D.45055
    # DEBUG this => &D.45055
    if (prephitmp_120 != 0)
      goto <bb 15>;
    else
      goto <bb 13>;

  }
  bb_13 (preds = {bb_12 }, succs = {bb_59 bb_14 })
  {
    <bb 13>:
    # .MEM_32 = VDEF <.MEM_29>
    _33 = operator new (48);

  }
  bb_14 (preds = {bb_13 }, succs = {bb_15 })
  {
    <bb 14>:
    # .MEM_34 = VDEF <.MEM_32>
    MEM[(struct OutputSet *)_33]._outputs._M_t._M_impl._M_header._M_color = 0;
    # .MEM_35 = VDEF <.MEM_34>
    MEM[(struct OutputSet *)_33]._outputs._M_t._M_impl._M_header._M_parent = 0B;
    # .MEM_38 = VDEF <.MEM_35>
    MEM[(struct OutputSet *)_33]._outputs._M_t._M_impl._M_node_count = 0;
    # DEBUG this => _33
    # DEBUG D#136 => &MEM[(struct OutputSet *)_33]._outputs
    # DEBUG this => D#136
    # DEBUG D#135 => &D#136->_M_t
    # DEBUG this => D#135
    # DEBUG D#134 => &MEM[(struct _Rb_tree *)D#135]._M_impl
    # DEBUG this => D#134
    # DEBUG this => D#134
    # DEBUG this => D#134
    # DEBUG this => D#134
    _28 = &MEM[(struct _Rb_tree_impl *)_33]._M_header;
    # .MEM_95 = VDEF <.MEM_38>
    MEM[(struct _Rb_tree_impl *)_33]._M_header._M_left = _28;
    # .MEM_96 = VDEF <.MEM_95>
    MEM[(struct _Rb_tree_impl *)_33]._M_header._M_right = _28;

  }
  bb_15 (preds = {bb_12 bb_14 }, succs = {bb_46 bb_16 })
  {
    <bb 15>:
    # iftmp.0_1 = PHI <0B(12), _33(14)>
    # .MEM_2 = PHI <.MEM_29(12), .MEM_96(14)>
    # .MEM_40 = VDEF <.MEM_2>
    this_7(D)->_route_set = iftmp.0_1;
    # DEBUG D#27 => &D.45060
    # DEBUG this => D#27
    # DEBUG D#26 => D#27
    # DEBUG this => D#26
    # DEBUG D#186 => &D.45060
    # DEBUG this => &D.45059
    # DEBUG __s => "priority"
    # DEBUG __a => D#186
    # DEBUG D#185 => D#186
    # DEBUG this => &D.45059
    # DEBUG D#183 => &D.45059._M_dataplus
    # DEBUG D#72 => D#185
    # DEBUG this => D#183
    # DEBUG __dat => &D.45059.D.12341._M_local_buf
    # DEBUG __a => D#72
    # DEBUG D#71 => D#72
    # DEBUG D#69 => D#183
    # DEBUG D#70 => D#71
    # DEBUG this => D#69
    # DEBUG __a => D#70
    # DEBUG D#68 => D#70
    # DEBUG D#67 => D#69
    # DEBUG this => D#67
    # DEBUG D.49188 => D#68
    # .MEM_268 = VDEF <.MEM_40>
    MEM[(struct _Alloc_hider *)&D.45059]._M_p = &D.45059.D.12341._M_local_buf;
    # DEBUG __s => "priority"
    # DEBUG this => &D.45059
    # DEBUG __beg => "priority"
    # DEBUG __end => &MEM[(void *)"priority" + 8B]
    # DEBUG this => &D.45059
    # DEBUG __beg => "priority"
    # DEBUG __end => &MEM[(void *)"priority" + 8B]
    # DEBUG this => &D.45059
    # DEBUG __beg => "priority"
    # DEBUG __end => &MEM[(void *)"priority" + 8B]
    # DEBUG __ptr => "priority"
    # DEBUG __first => "priority"
    # DEBUG __last => &MEM[(void *)"priority" + 8B]
    # DEBUG D#189 => &__first
    # DEBUG D.50152 => D#189
    # DEBUG __first => "priority"
    # DEBUG __last => &MEM[(void *)"priority" + 8B]
    # DEBUG __dnew => 8
    # DEBUG D#1 => &D.45059
    # DEBUG this => D#1
    # DEBUG __p => &D.45059.D.12341._M_local_buf
    # DEBUG __k1 => "priority"
    # DEBUG __k2 => &MEM[(void *)"priority" + 8B]
    # DEBUG __d => &D.45059.D.12341._M_local_buf
    # DEBUG __s => "priority"
    # DEBUG __n => 8
    # DEBUG __s1 => &D.45059.D.12341._M_local_buf
    # DEBUG __s2 => "priority"
    # DEBUG __n => 8
    # .MEM_274 = VDEF <.MEM_268>
    __builtin_memcpy (&D.45059.D.12341._M_local_buf, "priority", 8);
    # DEBUG this => &D.45059
    # DEBUG __n => 8
    # DEBUG D#9 => &D.45059
    # DEBUG __length => 8
    # DEBUG this => D#9
    # .MEM_275 = VDEF <.MEM_274>
    MEM[(size_type *)&D.45059 + 8B] = 8;
    # DEBUG D#1 => &D.45059
    # DEBUG this => D#1
    # DEBUG __c1 => &MEM[(void *)&D.45059 + 24B]
    # DEBUG __c2 => D#10
    # .MEM_276 = VDEF <.MEM_275>
    MEM[(char_type &)&D.45059 + 24] = 0;
    # DEBUG D#256 => {CLOBBER}
    # DEBUG __dnew => D#256
    # .MEM_42 = VDEF <.MEM_276>
    priority = Configuration::GetStr (config_23(D), &D.45059); [return slot optimization]

  }
  bb_16 (preds = {bb_15 }, succs = {bb_17 bb_18 })
  {
    <bb 16>:
    # DEBUG this => &D.45059
    # DEBUG this => &D.45059
    # DEBUG this => &D.45059
    # VUSE <.MEM_42>
    _45 = MEM[(char * *)&D.45059];
    # DEBUG D#1 => &D.45059
    # DEBUG this => D#1
    # DEBUG this => &D.45059
    if (&D.45059.D.12341._M_local_buf != _45)
      goto <bb 17>;
    else
      goto <bb 18>;

  }
  bb_17 (preds = {bb_16 }, succs = {bb_18 })
  {
    <bb 17>:
    # DEBUG D#94 => D.45059.D.12341._M_allocated_capacity
    # DEBUG D#93 => D#94
    # DEBUG this => &D.45059
    # DEBUG __size => D#93
    # DEBUG D#92 => D#93
    # DEBUG D#1 => &D.45059
    # DEBUG this => D#1
    # DEBUG this => &D.45059
    # DEBUG D#91 => &D.45059._M_dataplus
    # DEBUG D#89 => D#91
    # DEBUG D#90 => D#92 + 1
    # DEBUG __p => _45
    # DEBUG __a => D#89
    # DEBUG __n => D#90
    # DEBUG D#88 => D#90
    # DEBUG D#87 => D#89
    # DEBUG D#85 => D#87
    # DEBUG D#86 => D#88
    # DEBUG __p => _45
    # DEBUG this => D#85
    # DEBUG D.50804 => D#86
    # .MEM_97 = VDEF <.MEM_42>
    operator delete (_45);

  }
  bb_18 (preds = {bb_16 bb_17 }, succs = {bb_19 bb_54 })
  {
    <bb 18>:
    # .MEM_72 = PHI <.MEM_42(16), .MEM_97(17)>
    # DEBUG D#95 => &D.45059._M_dataplus
    # DEBUG this => D#95
    # DEBUG this => D#95
    # DEBUG this => D#95
    # .MEM_44 = VDEF <.MEM_72>
    D.45059 ={v} {CLOBBER};
    # DEBUG this => &D.45060
    # DEBUG this => &D.45060
    # DEBUG __lhs => &priority
    # DEBUG __rhs => "local_age"
    # .MEM_102 = VDEF <.MEM_44>
    _39 = std::__cxx11::basic_string<char>::compare (&priority, "local_age");

  }
  bb_19 (preds = {bb_18 }, succs = {bb_20 bb_21 })
  {
    <bb 19>:
    if (_39 == 0)
      goto <bb 20>;
    else
      goto <bb 21>;

  }
  bb_20 (preds = {bb_19 }, succs = {bb_78 })
  {
    <bb 20>:
    # .MEM_46 = VDEF <.MEM_102>
    this_7(D)->_pri_type = 0;
    goto <bb 78>;

  }
  bb_21 (preds = {bb_19 }, succs = {bb_23 bb_22 })
  {
    <bb 21>:
    # DEBUG __lhs => &priority
    # DEBUG __rhs => "queue_length"
    # .MEM_103 = VDEF <.MEM_102>
    _43 = std::__cxx11::basic_string<char>::compare (&priority, "queue_length");
    goto <bb 23>;

  }
  bb_22 (preds = {bb_21 }, succs = {bb_55 })
  {
  <L37>:
    goto <bb 55> (<L23>);

  }
  bb_23 (preds = {bb_21 }, succs = {bb_24 bb_25 })
  {
    <bb 23>:
    if (_43 == 0)
      goto <bb 24>;
    else
      goto <bb 25>;

  }
  bb_24 (preds = {bb_23 }, succs = {bb_78 })
  {
    <bb 24>:
    # .MEM_48 = VDEF <.MEM_103>
    this_7(D)->_pri_type = 1;
    goto <bb 78>;

  }
  bb_25 (preds = {bb_23 }, succs = {bb_27 bb_26 })
  {
    <bb 25>:
    # DEBUG __lhs => &priority
    # DEBUG __rhs => "hop_count"
    # .MEM_104 = VDEF <.MEM_103>
    _47 = std::__cxx11::basic_string<char>::compare (&priority, "hop_count");
    goto <bb 27>;

  }
  bb_26 (preds = {bb_25 }, succs = {bb_55 })
  {
  <L38>:
    goto <bb 55> (<L23>);

  }
  bb_27 (preds = {bb_25 }, succs = {bb_28 bb_29 })
  {
    <bb 27>:
    if (_47 == 0)
      goto <bb 28>;
    else
      goto <bb 29>;

  }
  bb_28 (preds = {bb_27 }, succs = {bb_78 })
  {
    <bb 28>:
    # .MEM_50 = VDEF <.MEM_104>
    this_7(D)->_pri_type = 2;
    goto <bb 78>;

  }
  bb_29 (preds = {bb_27 }, succs = {bb_31 bb_30 })
  {
    <bb 29>:
    # DEBUG __lhs => &priority
    # DEBUG __rhs => "none"
    # .MEM_105 = VDEF <.MEM_104>
    _49 = std::__cxx11::basic_string<char>::compare (&priority, "none");
    goto <bb 31>;

  }
  bb_30 (preds = {bb_29 }, succs = {bb_55 })
  {
  <L39>:
    goto <bb 55> (<L23>);

  }
  bb_31 (preds = {bb_29 }, succs = {bb_32 bb_33 })
  {
    <bb 31>:
    if (_49 == 0)
      goto <bb 32>;
    else
      goto <bb 33>;

  }
  bb_32 (preds = {bb_31 }, succs = {bb_34 })
  {
    <bb 32>:
    # .MEM_52 = VDEF <.MEM_105>
    this_7(D)->_pri_type = 3;
    goto <bb 34>;

  }
  bb_33 (preds = {bb_31 }, succs = {bb_34 })
  {
    <bb 33>:
    # .MEM_53 = VDEF <.MEM_105>
    this_7(D)->_pri_type = 4;

  }
  bb_34 (preds = {bb_33 bb_32 }, succs = {bb_78 })
  {
    <bb 34>:
    # .MEM_277 = PHI <.MEM_53(33), .MEM_52(32)>

  }
  bb_78 (preds = {bb_34 bb_20 bb_24 bb_28 }, succs = {bb_36 bb_35 })
  {
    <bb 78>:
    # .MEM_3 = PHI <.MEM_277(34), .MEM_46(20), .MEM_48(24), .MEM_50(28)>
    # DEBUG D#27 => &D.45062
    # DEBUG this => D#27
    # DEBUG D#26 => D#27
    # DEBUG this => D#26
    # DEBUG D#186 => &D.45062
    # DEBUG this => &D.45061
    # DEBUG __s => "vc_priority_donation"
    # DEBUG __a => D#186
    # DEBUG D#185 => D#186
    # DEBUG this => &D.45061
    # DEBUG D#183 => &D.45061._M_dataplus
    # DEBUG D#72 => D#185
    # DEBUG this => D#183
    # DEBUG __dat => &D.45061.D.12341._M_local_buf
    # DEBUG __a => D#72
    # DEBUG D#71 => D#72
    # DEBUG D#69 => D#183
    # DEBUG D#70 => D#71
    # DEBUG this => D#69
    # DEBUG __a => D#70
    # DEBUG D#68 => D#70
    # DEBUG D#67 => D#69
    # DEBUG this => D#67
    # DEBUG D.49188 => D#68
    # .MEM_278 = VDEF <.MEM_3>
    MEM[(struct _Alloc_hider *)&D.45061]._M_p = &D.45061.D.12341._M_local_buf;
    # DEBUG __s => "vc_priority_donation"
    # DEBUG this => &D.45061
    # DEBUG __beg => "vc_priority_donation"
    # DEBUG __end => &MEM[(void *)"vc_priority_donation" + 20B]
    # DEBUG this => &D.45061
    # DEBUG __beg => "vc_priority_donation"
    # DEBUG __end => &MEM[(void *)"vc_priority_donation" + 20B]
    # DEBUG this => &D.45061
    # DEBUG __beg => "vc_priority_donation"
    # DEBUG __end => &MEM[(void *)"vc_priority_donation" + 20B]
    # DEBUG __ptr => "vc_priority_donation"
    # DEBUG __first => "vc_priority_donation"
    # DEBUG __last => &MEM[(void *)"vc_priority_donation" + 20B]
    # DEBUG D#189 => &__first
    # DEBUG D.50152 => D#189
    # DEBUG __first => "vc_priority_donation"
    # DEBUG __last => &MEM[(void *)"vc_priority_donation" + 20B]
    # .MEM_279 = VDEF <.MEM_278>
    __dnew = 20;
    # .MEM_280 = VDEF <.MEM_279>
    _209 = std::__cxx11::basic_string<char>::_M_create (&D.45061, &__dnew, 0);
    goto <bb 36>;

  }
  bb_35 (preds = {bb_78 }, succs = {bb_55 })
  {
  <L40>:
    goto <bb 55> (<L23>);

  }
  bb_36 (preds = {bb_78 }, succs = {bb_50 bb_37 })
  {
    <bb 36>:
    # DEBUG D#7 => &D.45061
    # DEBUG __p => _209
    # DEBUG this => D#7
    # .MEM_281 = VDEF <.MEM_280>
    MEM[(char * *)&D.45061] = _209;
    # VUSE <.MEM_281>
    __dnew.42_210 = __dnew;
    # DEBUG D#8 => &D.45061
    # DEBUG __capacity => __dnew.42_210
    # DEBUG this => D#8
    # .MEM_282 = VDEF <.MEM_281>
    MEM[(size_type *)&D.45061 + 16B] = __dnew.42_210;
    # DEBUG D#1 => &D.45061
    # DEBUG this => D#1
    # DEBUG __p => _209
    # DEBUG __k1 => "vc_priority_donation"
    # DEBUG __k2 => &MEM[(void *)"vc_priority_donation" + 20B]
    # DEBUG __d => _209
    # DEBUG __s => "vc_priority_donation"
    # DEBUG __n => 20
    # DEBUG __s1 => _209
    # DEBUG __s2 => "vc_priority_donation"
    # DEBUG __n => 20
    # .MEM_284 = VDEF <.MEM_282>
    __builtin_memcpy (_209, "vc_priority_donation", 20);
    # VUSE <.MEM_284>
    __dnew.42_213 = __dnew;
    # DEBUG this => &D.45061
    # DEBUG __n => __dnew.42_213
    # DEBUG D#9 => &D.45061
    # DEBUG __length => __dnew.42_213
    # DEBUG this => D#9
    # .MEM_285 = VDEF <.MEM_284>
    MEM[(size_type *)&D.45061 + 8B] = __dnew.42_213;
    # VUSE <.MEM_285>
    _214 = MEM[(char * *)&D.45061];
    # DEBUG D#1 => &D.45061
    # DEBUG this => D#1
    _215 = _214 + __dnew.42_213;
    # DEBUG __c1 => _215
    # DEBUG __c2 => D#10
    # .MEM_286 = VDEF <.MEM_285>
    MEM[(char_type &)_215] = 0;
    # .MEM_287 = VDEF <.MEM_286>
    __dnew ={v} {CLOBBER};
    # .MEM_56 = VDEF <.MEM_287>
    _57 = Configuration::GetInt (config_23(D), &D.45061);

  }
  bb_37 (preds = {bb_36 }, succs = {bb_38 bb_39 })
  {
    <bb 37>:
    # .MEM_58 = VDEF <.MEM_56>
    this_7(D)->_priority_donation = _57;
    # DEBUG this => &D.45061
    # DEBUG this => &D.45061
    # DEBUG this => &D.45061
    # VUSE <.MEM_58>
    _61 = MEM[(char * *)&D.45061];
    # DEBUG D#1 => &D.45061
    # DEBUG this => D#1
    # DEBUG this => &D.45061
    if (&D.45061.D.12341._M_local_buf != _61)
      goto <bb 38>;
    else
      goto <bb 39>;

  }
  bb_38 (preds = {bb_37 }, succs = {bb_39 })
  {
    <bb 38>:
    # DEBUG D#94 => D.45061.D.12341._M_allocated_capacity
    # DEBUG D#93 => D#94
    # DEBUG this => &D.45061
    # DEBUG __size => D#93
    # DEBUG D#92 => D#93
    # DEBUG D#1 => &D.45061
    # DEBUG this => D#1
    # DEBUG this => &D.45061
    # DEBUG D#91 => &D.45061._M_dataplus
    # DEBUG D#89 => D#91
    # DEBUG D#90 => D#92 + 1
    # DEBUG __p => _61
    # DEBUG __a => D#89
    # DEBUG __n => D#90
    # DEBUG D#88 => D#90
    # DEBUG D#87 => D#89
    # DEBUG D#85 => D#87
    # DEBUG D#86 => D#88
    # DEBUG __p => _61
    # DEBUG this => D#85
    # DEBUG D.50846 => D#86
    # .MEM_106 = VDEF <.MEM_58>
    operator delete (_61);

  }
  bb_39 (preds = {bb_37 bb_38 }, succs = {bb_40 bb_41 })
  {
    <bb 39>:
    # .MEM_73 = PHI <.MEM_58(37), .MEM_106(38)>
    # DEBUG D#95 => &D.45061._M_dataplus
    # DEBUG this => D#95
    # DEBUG this => D#95
    # DEBUG this => D#95
    # .MEM_60 = VDEF <.MEM_73>
    D.45061 ={v} {CLOBBER};
    # DEBUG this => &D.45062
    # DEBUG this => &D.45062
    # DEBUG this => &priority
    # DEBUG this => &priority
    # DEBUG this => &priority
    # VUSE <.MEM_60>
    _51 = MEM[(char * *)&priority];
    # DEBUG D#1 => &priority
    # DEBUG this => D#1
    # DEBUG this => &priority
    if (&priority.D.12341._M_local_buf != _51)
      goto <bb 40>;
    else
      goto <bb 41>;

  }
  bb_40 (preds = {bb_39 }, succs = {bb_41 })
  {
    <bb 40>:
    # DEBUG D#94 => priority.D.12341._M_allocated_capacity
    # DEBUG D#93 => D#94
    # DEBUG this => &priority
    # DEBUG __size => D#93
    # DEBUG D#92 => D#93
    # DEBUG D#1 => &priority
    # DEBUG this => D#1
    # DEBUG this => &priority
    # DEBUG D#91 => &priority._M_dataplus
    # DEBUG D#89 => D#91
    # DEBUG D#90 => D#92 + 1
    # DEBUG __p => _51
    # DEBUG __a => D#89
    # DEBUG __n => D#90
    # DEBUG D#88 => D#90
    # DEBUG D#87 => D#89
    # DEBUG D#85 => D#87
    # DEBUG D#86 => D#88
    # DEBUG __p => _51
    # DEBUG this => D#85
    # DEBUG D.50829 => D#86
    # .MEM_111 = VDEF <.MEM_60>
    operator delete (_51);

  }
  bb_41 (preds = {bb_39 bb_40 }, succs = {bb_1 })
  {
    <bb 41>:
    # .MEM_74 = PHI <.MEM_60(39), .MEM_111(40)>
    # DEBUG D#95 => &priority._M_dataplus
    # DEBUG this => D#95
    # DEBUG this => D#95
    # DEBUG this => D#95
    # .MEM_62 = VDEF <.MEM_74>
    priority ={v} {CLOBBER};
    # VUSE <.MEM_62>
    return;

  }
  bb_42 (preds = {bb_4 }, succs = {bb_43 bb_44 })
  {
  <L15>:
    # DEBUG this => &D.45054
    # DEBUG this => &D.45054
    # DEBUG this => &D.45054
    # VUSE <.MEM_24>
    _59 = MEM[(char * *)&D.45054];
    # DEBUG D#1 => &D.45054
    # DEBUG this => D#1
    # DEBUG this => &D.45054
    if (&D.45054.D.12341._M_local_buf != _59)
      goto <bb 43>;
    else
      goto <bb 44>;

  }
  bb_43 (preds = {bb_42 }, succs = {bb_44 })
  {
    <bb 43>:
    # DEBUG D#94 => D.45054.D.12341._M_allocated_capacity
    # DEBUG D#93 => D#94
    # DEBUG this => &D.45054
    # DEBUG __size => D#93
    # DEBUG D#92 => D#93
    # DEBUG D#1 => &D.45054
    # DEBUG this => D#1
    # DEBUG this => &D.45054
    # DEBUG D#91 => &D.45054._M_dataplus
    # DEBUG D#89 => D#91
    # DEBUG D#90 => D#92 + 1
    # DEBUG __p => _59
    # DEBUG __a => D#89
    # DEBUG __n => D#90
    # DEBUG D#88 => D#90
    # DEBUG D#87 => D#89
    # DEBUG D#85 => D#87
    # DEBUG D#86 => D#88
    # DEBUG __p => _59
    # DEBUG this => D#85
    # DEBUG D.50861 => D#86
    # .MEM_131 = VDEF <.MEM_24>
    operator delete (_59);

  }
  bb_44 (preds = {bb_42 bb_43 }, succs = {bb_45 })
  {
    <bb 44>:
    # .MEM_75 = PHI <.MEM_24(42), .MEM_131(43)>
    # DEBUG D#95 => &D.45054._M_dataplus
    # DEBUG this => D#95
    # DEBUG this => D#95
    # DEBUG this => D#95
    # .MEM_67 = VDEF <.MEM_75>
    D.45054 ={v} {CLOBBER};
    resx 5

  }
  bb_45 (preds = {bb_44 }, succs = {bb_60 })
  {
  <L41>:
    goto <bb 60> (<L24>);

  }
  bb_46 (preds = {bb_15 }, succs = {bb_47 bb_48 })
  {
  <L18>:
    # DEBUG this => &D.45059
    # DEBUG this => &D.45059
    # DEBUG this => &D.45059
    # VUSE <.MEM_42>
    _68 = MEM[(char * *)&D.45059];
    # DEBUG D#1 => &D.45059
    # DEBUG this => D#1
    # DEBUG this => &D.45059
    if (&D.45059.D.12341._M_local_buf != _68)
      goto <bb 47>;
    else
      goto <bb 48>;

  }
  bb_47 (preds = {bb_46 }, succs = {bb_48 })
  {
    <bb 47>:
    # DEBUG D#94 => D.45059.D.12341._M_allocated_capacity
    # DEBUG D#93 => D#94
    # DEBUG this => &D.45059
    # DEBUG __size => D#93
    # DEBUG D#92 => D#93
    # DEBUG D#1 => &D.45059
    # DEBUG this => D#1
    # DEBUG this => &D.45059
    # DEBUG D#91 => &D.45059._M_dataplus
    # DEBUG D#89 => D#91
    # DEBUG D#90 => D#92 + 1
    # DEBUG __p => _68
    # DEBUG __a => D#89
    # DEBUG __n => D#90
    # DEBUG D#88 => D#90
    # DEBUG D#87 => D#89
    # DEBUG D#85 => D#87
    # DEBUG D#86 => D#88
    # DEBUG __p => _68
    # DEBUG this => D#85
    # DEBUG D.50878 => D#86
    # .MEM_126 = VDEF <.MEM_42>
    operator delete (_68);

  }
  bb_48 (preds = {bb_46 bb_47 }, succs = {bb_49 })
  {
    <bb 48>:
    # .MEM_76 = PHI <.MEM_42(46), .MEM_126(47)>
    # DEBUG D#95 => &D.45059._M_dataplus
    # DEBUG this => D#95
    # DEBUG this => D#95
    # DEBUG this => D#95
    # .MEM_65 = VDEF <.MEM_76>
    D.45059 ={v} {CLOBBER};
    resx 11

  }
  bb_49 (preds = {bb_48 }, succs = {bb_60 })
  {
  <L42>:
    goto <bb 60> (<L24>);

  }
  bb_50 (preds = {bb_36 }, succs = {bb_51 bb_52 })
  {
  <L21>:
    # DEBUG this => &D.45061
    # DEBUG this => &D.45061
    # DEBUG this => &D.45061
    # VUSE <.MEM_56>
    _66 = MEM[(char * *)&D.45061];
    # DEBUG D#1 => &D.45061
    # DEBUG this => D#1
    # DEBUG this => &D.45061
    if (&D.45061.D.12341._M_local_buf != _66)
      goto <bb 51>;
    else
      goto <bb 52>;

  }
  bb_51 (preds = {bb_50 }, succs = {bb_52 })
  {
    <bb 51>:
    # DEBUG D#94 => D.45061.D.12341._M_allocated_capacity
    # DEBUG D#93 => D#94
    # DEBUG this => &D.45061
    # DEBUG __size => D#93
    # DEBUG D#92 => D#93
    # DEBUG D#1 => &D.45061
    # DEBUG this => D#1
    # DEBUG this => &D.45061
    # DEBUG D#91 => &D.45061._M_dataplus
    # DEBUG D#89 => D#91
    # DEBUG D#90 => D#92 + 1
    # DEBUG __p => _66
    # DEBUG __a => D#89
    # DEBUG __n => D#90
    # DEBUG D#88 => D#90
    # DEBUG D#87 => D#89
    # DEBUG D#85 => D#87
    # DEBUG D#86 => D#88
    # DEBUG __p => _66
    # DEBUG this => D#85
    # DEBUG D.50895 => D#86
    # .MEM_116 = VDEF <.MEM_56>
    operator delete (_66);

  }
  bb_52 (preds = {bb_50 bb_51 }, succs = {bb_53 })
  {
    <bb 52>:
    # .MEM_77 = PHI <.MEM_56(50), .MEM_116(51)>
    # DEBUG D#95 => &D.45061._M_dataplus
    # DEBUG this => D#95
    # DEBUG this => D#95
    # DEBUG this => D#95
    # .MEM_63 = VDEF <.MEM_77>
    D.45061 ={v} {CLOBBER};
    resx 19

  }
  bb_53 (preds = {bb_52 }, succs = {bb_55 })
  {
  <L43>:
    goto <bb 55> (<L23>);

  }
  bb_54 (preds = {bb_18 }, succs = {bb_55 })
  {
  <L36>:

  }
  bb_55 (preds = {bb_54 bb_22 bb_26 bb_30 bb_53 bb_35 }, succs = {bb_56 bb_57 })
  {
    # .MEM_4 = PHI <.MEM_102(54), .MEM_103(22), .MEM_104(26), .MEM_105(30), .MEM_63(53), .MEM_280(35)>
  <L23>:
    # DEBUG this => &priority
    # DEBUG this => &priority
    # DEBUG this => &priority
    # VUSE <.MEM_4>
    _64 = MEM[(char * *)&priority];
    # DEBUG D#1 => &priority
    # DEBUG this => D#1
    # DEBUG this => &priority
    if (&priority.D.12341._M_local_buf != _64)
      goto <bb 56>;
    else
      goto <bb 57>;

  }
  bb_56 (preds = {bb_55 }, succs = {bb_57 })
  {
    <bb 56>:
    # DEBUG D#94 => priority.D.12341._M_allocated_capacity
    # DEBUG D#93 => D#94
    # DEBUG this => &priority
    # DEBUG __size => D#93
    # DEBUG D#92 => D#93
    # DEBUG D#1 => &priority
    # DEBUG this => D#1
    # DEBUG this => &priority
    # DEBUG D#91 => &priority._M_dataplus
    # DEBUG D#89 => D#91
    # DEBUG D#90 => D#92 + 1
    # DEBUG __p => _64
    # DEBUG __a => D#89
    # DEBUG __n => D#90
    # DEBUG D#88 => D#90
    # DEBUG D#87 => D#89
    # DEBUG D#85 => D#87
    # DEBUG D#86 => D#88
    # DEBUG __p => _64
    # DEBUG this => D#85
    # DEBUG D.50912 => D#86
    # .MEM_121 = VDEF <.MEM_4>
    operator delete (_64);

  }
  bb_57 (preds = {bb_55 bb_56 }, succs = {bb_58 })
  {
    <bb 57>:
    # .MEM_78 = PHI <.MEM_4(55), .MEM_121(56)>
    # DEBUG D#95 => &priority._M_dataplus
    # DEBUG this => D#95
    # DEBUG this => D#95
    # DEBUG this => D#95
    resx 17

  }
  bb_58 (preds = {bb_57 }, succs = {bb_60 })
  {
  <L44>:
    goto <bb 60> (<L24>);

  }
  bb_59 (preds = {bb_13 }, succs = {bb_60 })
  {
  <L35>:

  }
  bb_60 (preds = {bb_59 bb_58 bb_45 bb_49 }, succs = {bb_61 bb_67 })
  {
    # .MEM_5 = PHI <.MEM_32(59), .MEM_78(58), .MEM_67(45), .MEM_65(49)>
  <L24>:
    # .MEM_69 = VDEF <.MEM_5>
    priority ={v} {CLOBBER};
    # DEBUG D#241 => &this_7(D)->_buffer
    # DEBUG this => D#241
    # DEBUG D#170 => &D#241->D.44879
    # DEBUG this => D#170
    # DEBUG this => D#241
    # DEBUG D#20 => &D#241->D.44879._M_impl._M_finish
    # DEBUG this => NULL
    # DEBUG __x => D#20
    # DEBUG D#178 => MEM[(const struct iterator &)D#241 + 48]._M_cur
    # DEBUG D.49925 => D#178
    # DEBUG D#177 => MEM[(const struct iterator &)D#241 + 48]._M_first
    # DEBUG D.49926 => D#177
    # DEBUG D#176 => MEM[(const struct iterator &)D#241 + 48]._M_last
    # DEBUG D.49927 => D#176
    # DEBUG D#175 => MEM[(const struct iterator &)D#241 + 48]._M_node
    # DEBUG D.49928 => D#175
    # DEBUG this => D#241
    # DEBUG D#21 => &D#241->D.44879._M_impl._M_start
    # DEBUG this => NULL
    # DEBUG __x => D#21
    # DEBUG D#174 => MEM[(const struct iterator &)D#241 + 16]._M_cur
    # DEBUG D.49921 => D#174
    # DEBUG D#173 => MEM[(const struct iterator &)D#241 + 16]._M_first
    # DEBUG D.49922 => D#173
    # DEBUG D#172 => MEM[(const struct iterator &)D#241 + 16]._M_last
    # DEBUG D.49923 => D#172
    # DEBUG D#171 => MEM[(const struct iterator &)D#241 + 16]._M_node
    # DEBUG D.49924 => D#171
    # DEBUG D#22 => D#241
    # DEBUG this => D#22
    # DEBUG __first => D#23
    # DEBUG __last => D#24
    # DEBUG D.49909 => D#25
    # DEBUG this => D#254
    # VUSE <.MEM_69>
    _216 = MEM[(struct _Deque_base *)this_7(D) + 96B]._M_impl._M_map;
    if (_216 != 0B)
      goto <bb 61>;
    else
      goto <bb 67>;

  }
  bb_61 (preds = {bb_60 }, succs = {bb_66 bb_62 })
  {
    <bb 61>:
    # VUSE <.MEM_69>
    _217 = MEM[(struct _Deque_base *)this_7(D) + 96B]._M_impl._M_finish._M_node;
    _218 = _217 + 8;
    # VUSE <.MEM_69>
    __nstart_219 = MEM[(struct _Deque_base *)this_7(D) + 96B]._M_impl._M_start._M_node;
    # DEBUG D#147 => D#254
    # DEBUG __nstart => __nstart_219
    # DEBUG __nfinish => _218
    # DEBUG this => D#147
    # DEBUG __n => __nstart_219
    if (_218 <= __nstart_219)
      goto <bb 66>;
    else
      goto <bb 62>;

  }
  bb_62 (preds = {bb_61 }, succs = {bb_63 })
  {
    <bb 62>:

  }
  bb_65 (preds = {bb_63 }, succs = {bb_77 })
  {
    <bb 65>:

  }
  bb_77 (preds = {bb_65 }, succs = {bb_66 })
  {
    <bb 77>:
    # VUSE <.MEM_288>
    pretmp_211 = MEM[(struct _Deque_base *)this_7(D) + 96B]._M_impl._M_map;

  }
  bb_66 (preds = {bb_77 bb_61 }, succs = {bb_67 })
  {
    <bb 66>:
    # .MEM_138 = PHI <.MEM_288(77), .MEM_69(61)>
    # prephitmp_117 = PHI <pretmp_211(77), _216(61)>
    # DEBUG D#168 => D#254->_M_impl._M_map_size
    # DEBUG D#257 => MEM[(struct _Deque_base *)this_7(D) + 96B]._M_impl._M_map
    # DEBUG D#166 => D#254
    # DEBUG D#167 => D#168
    # DEBUG __p => D#257
    # DEBUG this => D#166
    # DEBUG __n => D#167
    # DEBUG D#165 => D#167
    # DEBUG D#164 => D#166
    # DEBUG D#163 => D#164
    # DEBUG this => D#163
    # DEBUG D#162 => D#163
    # DEBUG this => D#162
    # DEBUG this => NULL
    # DEBUG D.49843 => NULL
    # DEBUG this => NULL
    # DEBUG D#132 => &__map_alloc
    # DEBUG D#133 => D#165
    # DEBUG __p => D#257
    # DEBUG __a => D#132
    # DEBUG __n => D#133
    # DEBUG D#131 => D#133
    # DEBUG D#130 => D#132
    # DEBUG D#128 => D#130
    # DEBUG D#129 => D#131
    # DEBUG __p => D#257
    # DEBUG this => D#128
    # DEBUG D.51486 => D#129
    # .MEM_289 = VDEF <.MEM_138>
    operator delete (prephitmp_117);
    # DEBUG this => &__map_alloc
    # DEBUG this => &__map_alloc

  }
  bb_67 (preds = {bb_60 bb_66 }, succs = {bb_68 })
  {
    <bb 67>:
    # .MEM_71 = PHI <.MEM_69(60), .MEM_289(66)>
    # DEBUG D#169 => &D#254->_M_impl
    # DEBUG this => D#169
    # DEBUG this => D#169
    # DEBUG this => D#169
    # .MEM_137 = VDEF <.MEM_71>
    MEM[(struct  &)this_7(D) + 96] ={v} {CLOBBER};
    resx 2

  }
  bb_68 (preds = {bb_67 }, succs = {bb_70 })
  {
  <L45>:
    goto <bb 70> (<L26>);

  }
  bb_69 (preds = {bb_2 }, succs = {bb_70 })
  {
  <L33>:

  }
  bb_70 (preds = {bb_9 bb_68 bb_69 }, succs = {bb_71 bb_72 })
  {
    # .MEM_6 = PHI <.MEM_249(9), .MEM_137(68), .MEM_236(69)>
  <L26>:
    # DEBUG this => _8
    # .MEM_295 = VDEF <.MEM_6>
    MEM[(struct Module *)this_7(D)]._vptr.Module = &MEM[(void *)&_ZTV6Module + 16B];
    # DEBUG D#125 => &_8->_children
    # DEBUG this => D#125
    # DEBUG D#119 => &D#125->D.33291
    # DEBUG this => D#119
    # DEBUG D#122 => D#125->D.33291._M_impl._M_finish
    # DEBUG D#121 => D#125->D.33291._M_impl._M_start
    # DEBUG D#64 => D#121
    # DEBUG D#65 => D#122
    # DEBUG __first => D#64
    # DEBUG __last => D#65
    # DEBUG D.49554 => D#66
    # DEBUG D#63 => D#65
    # DEBUG D#62 => D#64
    # DEBUG D#60 => D#62
    # DEBUG D#61 => D#63
    # DEBUG __first => D#60
    # DEBUG __last => D#61
    # DEBUG D#59 => D#61
    # DEBUG D#58 => D#60
    # DEBUG D#56 => D#58
    # DEBUG D#57 => D#59
    # DEBUG D.49155 => D#56
    # DEBUG D.49154 => D#57
    # DEBUG D#120 => &D#125->D.33291
    # DEBUG this => D#120
    # DEBUG D#118 => D#120->_M_impl._M_end_of_storage
    # DEBUG D#117 => (long int) D#118
    # VUSE <.MEM_295>
    _136 = MEM[(struct _Vector_base *)this_7(D) + 72B]._M_impl._M_start;
    # DEBUG D#116 => (long int) _136
    # DEBUG D#115 => D#117 - D#116
    # DEBUG D#114 => D#115 /[ex] 8
    # DEBUG D#111 => D#120
    # DEBUG D#112 => (long unsigned int) D#114
    # DEBUG __p => _136
    # DEBUG this => D#111
    # DEBUG __n => D#112
    # DEBUG D#110 => D#112
    # DEBUG D#109 => D#111
    if (_136 != 0B)
      goto <bb 71>;
    else
      goto <bb 72>;

  }
  bb_71 (preds = {bb_70 }, succs = {bb_72 })
  {
    <bb 71>:
    # DEBUG D#108 => &D#109->_M_impl
    # DEBUG D#106 => D#108
    # DEBUG D#107 => D#110
    # DEBUG __p => _136
    # DEBUG __a => D#106
    # DEBUG __n => D#107
    # DEBUG D#105 => D#107
    # DEBUG D#104 => D#106
    # DEBUG D#102 => D#104
    # DEBUG D#103 => D#105
    # DEBUG __p => _136
    # DEBUG this => D#102
    # DEBUG D.51499 => D#103
    # .MEM_296 = VDEF <.MEM_295>
    operator delete (_136);

  }
  bb_72 (preds = {bb_70 bb_71 }, succs = {bb_73 bb_74 })
  {
    <bb 72>:
    # .MEM_228 = PHI <.MEM_295(70), .MEM_296(71)>
    # DEBUG D#113 => &D#120->_M_impl
    # DEBUG this => D#113
    # DEBUG this => D#113
    # DEBUG this => D#113
    # .MEM_301 = VDEF <.MEM_228>
    MEM[(struct  &)this_7(D) + 72] ={v} {CLOBBER};
    # DEBUG D#124 => &_8->_fullname
    # DEBUG this => D#124
    # DEBUG this => D#124
    # DEBUG this => D#124
    # VUSE <.MEM_301>
    _224 = MEM[(char * *)this_7(D) + 40B];
    # DEBUG D#1 => D#124
    # DEBUG this => D#1
    # DEBUG this => D#124
    _225 = &MEM[(const struct basic_string *)this_7(D) + 40B].D.12341._M_local_buf;
    if (_224 != _225)
      goto <bb 73>;
    else
      goto <bb 74>;

  }
  bb_73 (preds = {bb_72 }, succs = {bb_74 })
  {
    <bb 73>:
    # DEBUG D#94 => MEM[(struct basic_string *)D#124].D.12341._M_allocated_capacity
    # DEBUG D#93 => D#94
    # DEBUG this => D#124
    # DEBUG __size => D#93
    # DEBUG D#92 => D#93
    # DEBUG D#1 => D#124
    # DEBUG this => D#1
    # DEBUG this => D#124
    # DEBUG D#91 => &MEM[(struct basic_string *)D#124]._M_dataplus
    # DEBUG D#89 => D#91
    # DEBUG D#90 => D#92 + 1
    # DEBUG __p => _224
    # DEBUG __a => D#89
    # DEBUG __n => D#90
    # DEBUG D#88 => D#90
    # DEBUG D#87 => D#89
    # DEBUG D#85 => D#87
    # DEBUG D#86 => D#88
    # DEBUG __p => _224
    # DEBUG this => D#85
    # DEBUG D.51512 => D#86
    # .MEM_302 = VDEF <.MEM_301>
    operator delete (_224);

  }
  bb_74 (preds = {bb_72 bb_73 }, succs = {bb_75 bb_76 })
  {
    <bb 74>:
    # .MEM_229 = PHI <.MEM_301(72), .MEM_302(73)>
    # DEBUG D#95 => &MEM[(struct basic_string *)D#124]._M_dataplus
    # DEBUG this => D#95
    # DEBUG this => D#95
    # DEBUG this => D#95
    # .MEM_306 = VDEF <.MEM_229>
    MEM[(struct  &)this_7(D) + 40] ={v} {CLOBBER};
    # DEBUG D#123 => &_8->_name
    # DEBUG this => D#123
    # DEBUG this => D#123
    # DEBUG this => D#123
    # VUSE <.MEM_306>
    _226 = MEM[(char * *)this_7(D) + 8B];
    # DEBUG D#1 => D#123
    # DEBUG this => D#1
    # DEBUG this => D#123
    _227 = &MEM[(const struct basic_string *)this_7(D) + 8B].D.12341._M_local_buf;
    if (_226 != _227)
      goto <bb 75>;
    else
      goto <bb 76>;

  }
  bb_75 (preds = {bb_74 }, succs = {bb_76 })
  {
    <bb 75>:
    # DEBUG D#94 => MEM[(struct basic_string *)D#123].D.12341._M_allocated_capacity
    # DEBUG D#93 => D#94
    # DEBUG this => D#123
    # DEBUG __size => D#93
    # DEBUG D#92 => D#93
    # DEBUG D#1 => D#123
    # DEBUG this => D#1
    # DEBUG this => D#123
    # DEBUG D#91 => &MEM[(struct basic_string *)D#123]._M_dataplus
    # DEBUG D#89 => D#91
    # DEBUG D#90 => D#92 + 1
    # DEBUG __p => _226
    # DEBUG __a => D#89
    # DEBUG __n => D#90
    # DEBUG D#88 => D#90
    # DEBUG D#87 => D#89
    # DEBUG D#85 => D#87
    # DEBUG D#86 => D#88
    # DEBUG __p => _226
    # DEBUG this => D#85
    # DEBUG D.51527 => D#86
    # .MEM_307 = VDEF <.MEM_306>
    operator delete (_226);

  }
  bb_76 (preds = {bb_74 bb_75 }, succs = {})
  {
    <bb 76>:
    # .MEM_230 = PHI <.MEM_306(74), .MEM_307(75)>
    # DEBUG D#95 => &MEM[(struct basic_string *)D#123]._M_dataplus
    # DEBUG this => D#95
    # DEBUG this => D#95
    # DEBUG this => D#95
    # .MEM_312 = VDEF <.MEM_230>
    MEM[(struct  &)this_7(D)] ={v} {CLOBBER};
    resx 1

  }
  loop_3 (header = 63, latch = 64, niter = (((unsigned long) _217 - (unsigned long) __nstart_219) + 7) / 8, upper_bound = 2305843009213693951)
  {
    bb_63 (preds = {bb_62 bb_64 }, succs = {bb_65 bb_64 })
    {
      <bb 63>:
      # .MEM_54 = PHI <.MEM_69(62), .MEM_288(64)>
      # __nstart_154 = PHI <__nstart_219(62), __nstart_222(64)>
      # DEBUG __n => __nstart_154
      # VUSE <.MEM_54>
      _221 = *__nstart_154;
      # DEBUG D#145 => D#146
      # DEBUG __p => _221
      # DEBUG this => D#145
      # DEBUG D#144 => D#145
      # DEBUG __size => 8
      # DEBUG D#143 => &D#144->_M_impl
      # DEBUG D#141 => D#143
      # DEBUG __p => _221
      # DEBUG __a => D#141
      # DEBUG __n => D#142
      # DEBUG D#140 => D#142
      # DEBUG D#139 => D#141
      # DEBUG D#137 => D#139
      # DEBUG D#138 => D#140
      # DEBUG __p => _221
      # DEBUG this => D#137
      # DEBUG D.51476 => D#138
      # .MEM_288 = VDEF <.MEM_54>
      operator delete (_221);
      __nstart_222 = __nstart_154 + 8;
      # DEBUG __n => __nstart_222
      # DEBUG __n => __nstart_222
      if (_218 <= __nstart_222)
        goto <bb 65>;
      else
        goto <bb 64>;

    }
    bb_64 (preds = {bb_63 }, succs = {bb_63 })
    {
      <bb 64>:
      goto <bb 63>;

    }
  }
}

Pass statistics:
----------------

VC::VC(const Configuration&, int, Module*, const string&) (struct VCD.43951 * const thisD.44963, const struct ConfigurationD.38092 & configD.44964, intD.9 outputsD.44965, struct ModuleD.32543 * parentD.44966, const struct stringD.3647 & nameD.44967)
Eh tree:
   1 cleanup land:{18,<L34>},{17,<L33>},{1,<L45>}
     28 try land:{14,<L27>} catch:{}
       31 must_not_throw
       30 cleanup land:{16,<L32>}
       29 try land:{15,<L30>} catch:{}
     27 cleanup land:{13,<L29>}
     26 must_not_throw
     2 cleanup land:{26,<L42>},{25,<L41>},{19,<L35>},{4,<L44>},{12,}
       17 cleanup land:{24,<L40>},{23,<L39>},{22,<L38>},{21,<L37>},{20,<L36>},{9,<L43>}
         19 cleanup land:{11,<L21>}
       11 cleanup land:{7,<L18>}
       5 cleanup land:{3,<L15>}
{
  struct FlitD.32424 * * * __nstartD.51467;
  size_typeD.12304 __dnewD.51435;
  size_typeD.12304 __dnewD.51390;
  size_typeD.12304 __dnewD.51345;
  struct FlitD.32424 * * * __nstartD.51299;
  const long unsigned intD.14 D.51295;
  const long unsigned intD.14 D.51294;
  const size_tD.2818 __num_nodesD.51267;
  struct FlitD.32424 * * * __nstartD.51268;
  struct FlitD.32424 * * * __nfinishD.51269;
  struct stringD.3647 priorityD.45053;
  const struct stringD.3647 D.45061;
  const struct stringD.3647 D.45059;
  const struct stringD.3647 D.45054;
  struct OutputSetD.31333 * iftmp.0_1;
  struct ModuleD.32543 * _8;
  intD.9 _25;
  boolD.2757 _26;
  struct _Rb_tree_node_baseD.29379 * _28;
  charD.10 * const _30;
  voidD.45 * _33;
  intD.9 _39;
  intD.9 _43;
  charD.10 * const _45;
  intD.9 _47;
  intD.9 _49;
  charD.10 * const _51;
  intD.9 _57;
  charD.10 * const _59;
  charD.10 * const _61;
  charD.10 * const _64;
  charD.10 * const _66;
  charD.10 * const _68;
  struct FlitD.32424 * * * prephitmp_117;
  boolD.2757 pretmp_119;
  boolD.2757 prephitmp_120;
  struct ModuleD.32543 * * _136;
  struct FlitD.32424 * * _142;
  struct FlitD.32424 * * * _144;
  long unsigned intD.14 _145;
  long unsigned intD.14 _146;
  long unsigned intD.14 _147;
  long unsigned intD.14 _148;
  struct FlitD.32424 * * _153;
  voidD.45 * _160;
  struct FlitD.32424 * * * _161;
  voidD.45 * _164;
  charD.10 * _209;
  long unsigned intD.14 __dnew.42_210;
  struct FlitD.32424 * * * pretmp_211;
  long unsigned intD.14 __dnew.42_213;
  charD.10 * const _214;
  charD.10 * _215;
  struct FlitD.32424 * * * _216;
  struct FlitD.32424 * * * _217;
  struct FlitD.32424 * * * _218;
  struct FlitD.32424 * * _221;
  charD.10 * const _224;
  const charD.10 * _225;
  charD.10 * const _226;
  const charD.10 * _227;

;;   basic block 2, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  _8 = &this_7(D)->D.44977;
  # .MEM_12 = VDEF <.MEM_9(D)>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZN6ModuleC2EPS_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.33325 (_8, parent_10(D), name_11(D));
  # .MEM_13 = VDEF <.MEM_12>
  this_7(D)->D.44977._vptr.ModuleD.33338 = &MEM[(voidD.45 *)&_ZTV2VCD.44992 + 16B];
  # DEBUG D#242ptD.0 => &this_7(D)->_bufferD.44881
  # DEBUG thisD.50762 => D#242ptD.0
  # DEBUG D#254ptD.0 => &MEM[(struct dequeD.32466 *)this_7(D) + 96B].D.44879
  # DEBUG thisD.50763 => D#254ptD.0
  # DEBUG D#240ptD.0 => &D#254ptD.0->_M_implD.44330
  # DEBUG thisD.50764 => D#240ptD.0
  # DEBUG thisD.49612 => D#240ptD.0
  # DEBUG thisD.49608 => D#240ptD.0
  # .MEM_79 = VDEF <.MEM_13>
  MEM[(struct _Deque_implD.44298 *)this_7(D) + 96B]._M_mapD.44332 = 0B;
  # DEBUG D#127ptD.0 => &D#240ptD.0->_M_startD.44334
  # DEBUG thisD.50765 => D#127ptD.0
  # .MEM_81 = VDEF <.MEM_79>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 112B]._M_curD.44229 = 0B;
  # .MEM_82 = VDEF <.MEM_81>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 112B]._M_firstD.44230 = 0B;
  # .MEM_83 = VDEF <.MEM_82>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 112B]._M_lastD.44231 = 0B;
  # .MEM_84 = VDEF <.MEM_83>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 112B]._M_nodeD.44232 = 0B;
  # DEBUG D#126ptD.0 => &D#240ptD.0->_M_finishD.44335
  # DEBUG thisD.50766 => D#126ptD.0
  # .MEM_85 = VDEF <.MEM_84>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 144B]._M_curD.44229 = 0B;
  # .MEM_86 = VDEF <.MEM_85>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 144B]._M_firstD.44230 = 0B;
  # .MEM_87 = VDEF <.MEM_86>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 144B]._M_lastD.44231 = 0B;
  # .MEM_88 = VDEF <.MEM_87>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 144B]._M_nodeD.44232 = 0B;
  # DEBUG thisD.51265 => D#254ptD.0
  # DEBUG __num_elementsD.51266 => 0
  # DEBUG __sizeD.50729 => 8
  # DEBUG __num_nodesD.51267 => 1
  # DEBUG __aD.51285 => &D.51294
  # DEBUG __bD.51284 => &D.51295
  # .MEM_233 = VDEF <.MEM_88>
  MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_map_sizeD.44333 = 8;
  # DEBUG D#235ptD.0 => D#254ptD.0
  # DEBUG __nD.51287 => 8
  # DEBUG thisD.51286 => D#235ptD.0
  # DEBUG D#234ptD.0 => D#235ptD.0
  # DEBUG D#163ptD.0 => D#234ptD.0
  # DEBUG thisD.50693 => D#163ptD.0
  # DEBUG D#162ptD.0 => D#163ptD.0
  # DEBUG thisD.49850 => D#162ptD.0
  # DEBUG thisD.49842 => NULL
  # DEBUG D.49843 => NULL
  # DEBUG thisD.49840 => NULL
  # DEBUG D#233ptD.0 => &__map_allocD.51288
  # DEBUG __nD.51290 => 8
  # DEBUG __aD.51289 => D#233ptD.0
  # DEBUG D#232ptD.0 => D#233ptD.0
  # DEBUG D#230ptD.0 => D#232ptD.0
  # DEBUG D#231ptD.0 => 0B
  # DEBUG __nD.51293 => 8
  # DEBUG thisD.51291 => D#230ptD.0
  # DEBUG D.51292 => D#231ptD.0
  # DEBUG D#229ptD.0 => D#230ptD.0
  # DEBUG D#228ptD.0 => D#229ptD.0
  # DEBUG thisD.50658 => D#228ptD.0
  [LP 17] # .MEM_236 = VDEF <.MEM_233>
  # PT = { D.51551 } (escaped heap)
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _144 = _ZnwmD.2764 (64);
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                69 (EH,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.50706 => &__map_allocD.51288
  # DEBUG thisD.50695 => &__map_allocD.51288
  # .MEM_237 = VDEF <.MEM_236>
  MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_mapD.44332 = _144;
  # VUSE <.MEM_237>
  _145 = MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_map_sizeD.44333;
  # RANGE [0, 18446744073709551615]
  _146 = _145 + 18446744073709551615;
  # RANGE [0, 9223372036854775807] NONZERO 9223372036854775807
  _147 = _146 >> 1;
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _148 = _147 * 8;
  # PT = { D.51551 } (escaped heap)
  __nstart_149 = _144 + _148;
  # DEBUG __nstartD.51268 => __nstart_149
  # DEBUG D#252ptD.0 => __nstart_149 + 8
  # DEBUG __nfinishD.51269 => D#252ptD.0
  # DEBUG D#213ptD.0 => D#254ptD.0
  # DEBUG __nstartD.51299 => __nstart_149
  # DEBUG __nfinishD.51300 => D#252ptD.0
  # DEBUG thisD.51301 => D#213ptD.0
  # DEBUG __curD.51302 => __nstart_149
  # DEBUG D#210ptD.0 => D#211ptD.0
  # DEBUG thisD.51316 => D#210ptD.0
  # DEBUG D#209ptD.0 => D#210ptD.0
  # DEBUG __sizeD.50485 => 8
  # DEBUG D#208ptD.0 => &D#209ptD.0->_M_implD.44330
  # DEBUG D#207ptD.0 => D#208ptD.0
  # DEBUG __nD.51319 => NULL
  # DEBUG __aD.51318 => D#207ptD.0
  # DEBUG D#206ptD.0 => D#207ptD.0
  # DEBUG D#204ptD.0 => D#206ptD.0
  # DEBUG D#205ptD.0 => 0B
  # DEBUG __nD.51322 => NULL
  # DEBUG thisD.51320 => D#204ptD.0
  # DEBUG D.51321 => D#205ptD.0
  # DEBUG D#203ptD.0 => D#204ptD.0
  # DEBUG D#202ptD.0 => D#203ptD.0
  # DEBUG thisD.50442 => D#202ptD.0
  [LP 15] # .MEM_234 = VDEF <.MEM_237>
  # PT = { D.51552 } (escaped heap)
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _142 = _ZnwmD.2764 (512);
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 (EH,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_159 = VDEF <.MEM_234>
  *__nstart_149 = _142;
  # DEBUG D#253ptD.0 => __nstart_149 + 8
  # DEBUG __curD.51302 => D#253ptD.0
  # DEBUG __curD.51302 => D#253ptD.0
  # DEBUG D#238ptD.0 => &D#254ptD.0->_M_implD.44330._M_startD.44334
  # DEBUG thisD.51281 => D#238ptD.0
  # DEBUG __new_nodeD.51280 => __nstart_149
  # .MEM_250 = VDEF <.MEM_159>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 112B]._M_nodeD.44232 = __nstart_149;
  # .MEM_251 = VDEF <.MEM_250>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 112B]._M_firstD.44230 = _142;
  # DEBUG __sizeD.49022 => 8
  # PT = { D.51552 } (escaped heap)
  _153 = _142 + 512;
  # .MEM_252 = VDEF <.MEM_251>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 112B]._M_lastD.44231 = _153;
  # DEBUG D#237ptD.0 => &D#254ptD.0->_M_implD.44330._M_finishD.44335
  # DEBUG thisD.51283 => D#237ptD.0
  # DEBUG __new_nodeD.51282 => __nstart_149
  # .MEM_253 = VDEF <.MEM_252>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 144B]._M_nodeD.44232 = __nstart_149;
  # .MEM_254 = VDEF <.MEM_253>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 144B]._M_firstD.44230 = _142;
  # DEBUG __sizeD.49022 => 8
  # .MEM_255 = VDEF <.MEM_254>
  MEM[(struct _Deque_iteratorD.44197 *)this_7(D) + 144B]._M_lastD.44231 = _153;
  # .MEM_256 = VDEF <.MEM_255>
  MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_startD.44334._M_curD.44229 = _142;
  # DEBUG __sizeD.50731 => 8
  # .MEM_257 = VDEF <.MEM_256>
  MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_finishD.44335._M_curD.44229 = _142;
  # .MEM_14 = VDEF <.MEM_257>
  this_7(D)->_stateD.44882 = 0;
  # .MEM_15 = VDEF <.MEM_14>
  this_7(D)->_out_portD.44884 = -1;
  # .MEM_16 = VDEF <.MEM_15>
  this_7(D)->_out_vcD.44885 = -1;
  # .MEM_17 = VDEF <.MEM_16>
  this_7(D)->_priD.44893 = 0;
  # .MEM_18 = VDEF <.MEM_17>
  this_7(D)->_watchedD.44895 = 0;
  # .MEM_19 = VDEF <.MEM_18>
  this_7(D)->_expected_pidD.44896 = -1;
  # .MEM_20 = VDEF <.MEM_19>
  this_7(D)->_last_idD.44897 = -1;
  # .MEM_21 = VDEF <.MEM_20>
  this_7(D)->_last_pidD.44898 = -1;
  # DEBUG D#27ptD.0 => &D.45055
  # DEBUG thisD.50767 => D#27ptD.0
  # DEBUG D#26ptD.0 => D#27ptD.0
  # DEBUG thisD.48915 => D#26ptD.0
  # DEBUG D#186ptD.0 => &D.45055
  # DEBUG thisD.51326 => &D.45054
  # DEBUG __sD.51327 => "routing_delay"
  # DEBUG __aD.51328 => D#186ptD.0
  # DEBUG D#185ptD.0 => D#186ptD.0
  # DEBUG thisD.51338 => &D.45054
  # DEBUG D#183ptD.0 => &D.45054._M_dataplusD.12321
  # DEBUG D#72ptD.0 => D#185ptD.0
  # DEBUG thisD.51341 => D#183ptD.0
  # DEBUG __datD.51340 => &D.45054.D.12341._M_local_bufD.12343
  # DEBUG __aD.51339 => D#72ptD.0
  # DEBUG D#71ptD.0 => D#72ptD.0
  # DEBUG D#69ptD.0 => D#183ptD.0
  # DEBUG D#70ptD.0 => D#71ptD.0
  # DEBUG thisD.49205 => D#69ptD.0
  # DEBUG __aD.49206 => D#70ptD.0
  # DEBUG D#68ptD.0 => D#70ptD.0
  # DEBUG D#67ptD.0 => D#69ptD.0
  # DEBUG thisD.49187 => D#67ptD.0
  # DEBUG D.49188 => D#68ptD.0
  # .MEM_258 = VDEF <.MEM_21>
  MEM[(struct _Alloc_hiderD.12320 *)&D.45054]._M_pD.12327 = &D.45054.D.12341._M_local_bufD.12343;
  # DEBUG __sD.51337 => "routing_delay"
  # DEBUG thisD.51331 => &D.45054
  # DEBUG __begD.51330 => "routing_delay"
  # DEBUG __endD.51329 => &MEM[(voidD.45 *)"routing_delay" + 13B]
  # DEBUG thisD.51335 => &D.45054
  # DEBUG __begD.51334 => "routing_delay"
  # DEBUG __endD.51333 => &MEM[(voidD.45 *)"routing_delay" + 13B]
  # DEBUG thisD.51342 => &D.45054
  # DEBUG __begD.51343 => "routing_delay"
  # DEBUG __endD.51344 => &MEM[(voidD.45 *)"routing_delay" + 13B]
  # DEBUG __ptrD.50223 => "routing_delay"
  # DEBUG __firstD.51368 => "routing_delay"
  # DEBUG __lastD.51367 => &MEM[(voidD.45 *)"routing_delay" + 13B]
  # DEBUG D#189ptD.0 => &__firstD.51368
  # DEBUG D.50152 => D#189ptD.0
  # DEBUG __firstD.51370 => "routing_delay"
  # DEBUG __lastD.51369 => &MEM[(voidD.45 *)"routing_delay" + 13B]
  # DEBUG __dnewD.51345 => 13
  # DEBUG D#1ptD.0 => &D.45054
  # DEBUG thisD.50197 => D#1ptD.0
  # DEBUG __pD.51348 => &D.45054.D.12341._M_local_bufD.12343
  # DEBUG __k1D.51347 => "routing_delay"
  # DEBUG __k2D.51346 => &MEM[(voidD.45 *)"routing_delay" + 13B]
  # DEBUG __dD.51351 => &D.45054.D.12341._M_local_bufD.12343
  # DEBUG __sD.51350 => "routing_delay"
  # DEBUG __nD.51349 => 13
  # DEBUG __s1D.51354 => &D.45054.D.12341._M_local_bufD.12343
  # DEBUG __s2D.51353 => "routing_delay"
  # DEBUG __nD.51352 => 13
  # .MEM_264 = VDEF <.MEM_258>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  memcpyD.992 (&D.45054.D.12341._M_local_bufD.12343, "routing_delay", 13);
  # DEBUG thisD.51358 => &D.45054
  # DEBUG __nD.51357 => 13
  # DEBUG D#9ptD.0 => &D.45054
  # DEBUG __lengthD.51360 => 13
  # DEBUG thisD.51359 => D#9ptD.0
  # .MEM_265 = VDEF <.MEM_264>
  MEM[(size_typeD.12304 *)&D.45054 + 8B] = 13;
  # DEBUG D#1ptD.0 => &D.45054
  # DEBUG thisD.48775 => D#1ptD.0
  # DEBUG __c1D.51362 => &MEM[(voidD.45 *)&D.45054 + 29B]
  # DEBUG __c2D.51361 => D#10ptD.0
  # .MEM_266 = VDEF <.MEM_265>
  MEM[(char_typeD.7431 &)&D.45054 + 29] = 0;
  # DEBUG D#255ptD.0 => {CLOBBER}
  # DEBUG __dnewD.51345 => D#255ptD.0
  [LP 3] # .MEM_24 = VDEF <.MEM_266>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _25 = _ZNK13Configuration6GetIntERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.41332 (config_23(D), &D.45054);
  goto <bb 10>;
;;    succ:       42 (EH,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       3 (EH,EXECUTABLE)
<L30>: [LP 15]
  # VUSE <.MEM_234>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _164 = __builtin_eh_pointerD.2738 (29);
  # .MEM_240 = VDEF <.MEM_234>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  __cxa_begin_catchD.14316 (_164);
  # DEBUG D#147ptD.0 => D#212ptD.0
  # DEBUG __nstartD.51305 => __nstart_149
  # DEBUG __nfinishD.51304 => __nstart_149
  # DEBUG thisD.51303 => D#147ptD.0
  # DEBUG __nD.51306 => __nstart_149
  [LP 16] # .MEM_242 = VDEF <.MEM_240>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  __cxa_rethrowD.45922 ();
;;    succ:       6 (EH,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 (EH,EXECUTABLE)
<L32>: [LP 16]
  [MNT 31] # .MEM_243 = VDEF <.MEM_242>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  __cxa_end_catchD.14315 ();
  [LP 14] resx 30
;;    succ:       7 (EH,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 (EH,EXECUTABLE)
<L27>: [LP 14]
  # VUSE <.MEM_243>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _160 = __builtin_eh_pointerD.2738 (28);
  # .MEM_244 = VDEF <.MEM_243>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  __cxa_begin_catchD.14316 (_160);
  # DEBUG D#236ptD.0 => D#254ptD.0->_M_implD.44330._M_map_sizeD.44333
  # VUSE <.MEM_244>
  # PT = nonlocal escaped 
  _161 = MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_mapD.44332;
  # DEBUG D#166ptD.0 => D#254ptD.0
  # DEBUG D#167ptD.0 => D#236ptD.0
  # DEBUG __pD.51272 => _161
  # DEBUG thisD.51270 => D#166ptD.0
  # DEBUG __nD.51271 => D#167ptD.0
  # DEBUG D#165ptD.0 => D#167ptD.0
  # DEBUG D#164ptD.0 => D#166ptD.0
  # DEBUG D#163ptD.0 => D#164ptD.0
  # DEBUG thisD.49862 => D#163ptD.0
  # DEBUG D#162ptD.0 => D#163ptD.0
  # DEBUG thisD.49850 => D#162ptD.0
  # DEBUG thisD.49842 => NULL
  # DEBUG D.49843 => NULL
  # DEBUG thisD.49840 => NULL
  # DEBUG D#132ptD.0 => &__map_allocD.51273
  # DEBUG D#133ptD.0 => D#165ptD.0
  # DEBUG __pD.51276 => _161
  # DEBUG __aD.51274 => D#132ptD.0
  # DEBUG __nD.51275 => D#133ptD.0
  # DEBUG D#131ptD.0 => D#133ptD.0
  # DEBUG D#130ptD.0 => D#132ptD.0
  # DEBUG D#128ptD.0 => D#130ptD.0
  # DEBUG D#129ptD.0 => D#131ptD.0
  # DEBUG __pD.51279 => _161
  # DEBUG thisD.51277 => D#128ptD.0
  # DEBUG D.51278 => D#129ptD.0
  # .MEM_245 = VDEF <.MEM_244>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_161);
  # DEBUG thisD.49876 => &__map_allocD.51273
  # DEBUG thisD.49855 => &__map_allocD.51273
  # .MEM_246 = VDEF <.MEM_245>
  MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_mapD.44332 = 0B;
  # .MEM_247 = VDEF <.MEM_246>
  MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_map_sizeD.44333 = 0;
  [LP 13] # .MEM_248 = VDEF <.MEM_247>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  __cxa_rethrowD.45922 ();
;;    succ:       8 (EH,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 (EH,EXECUTABLE)
<L29>: [LP 13]
  [MNT 26] # .MEM_249 = VDEF <.MEM_248>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  __cxa_end_catchD.14315 ();
  [LP 18] resx 27
;;    succ:       9 (EH,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 (EH,EXECUTABLE)
<L34>: [LP 18]
  goto <bb 70> (<L26>);
;;    succ:       70 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 1]
  _26 = _25 == 0;
  # .MEM_27 = VDEF <.MEM_24>
  this_7(D)->_lookahead_routingD.44899 = _26;
  # DEBUG thisD.50770 => &D.45054
  # DEBUG thisD.50771 => &D.45054
  # DEBUG thisD.50780 => &D.45054
  # VUSE <.MEM_27>
  # PT = nonlocal escaped { D.45054 } (escaped)
  _30 = MEM[(charD.10 * *)&D.45054];
  # DEBUG D#1ptD.0 => &D.45054
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.50781 => &D.45054
  if (&D.45054.D.12341._M_local_bufD.12343 != _30)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 314, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => D.45054.D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.50773 => &D.45054
  # DEBUG __sizeD.50772 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => &D.45054
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => &D.45054
  # DEBUG D#91ptD.0 => &D.45054._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.50776 => _30
  # DEBUG __aD.50774 => D#89ptD.0
  # DEBUG __nD.50775 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.50779 => _30
  # DEBUG thisD.50777 => D#85ptD.0
  # DEBUG D.50778 => D#86ptD.0
  # .MEM_90 = VDEF <.MEM_27>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_30);
  # VUSE <.MEM_90>
  pretmp_119 = this_7(D)->_lookahead_routingD.44899;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       10 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_70 = PHI <.MEM_27(10), .MEM_90(11)>
  # prephitmp_120 = PHI <_26(10), pretmp_119(11)>
  # DEBUG D#95ptD.0 => &D.45054._M_dataplusD.12321
  # DEBUG thisD.50782 => D#95ptD.0
  # DEBUG thisD.50783 => D#95ptD.0
  # DEBUG thisD.50784 => D#95ptD.0
  # .MEM_29 = VDEF <.MEM_70>
  D.45054 ={v} {CLOBBER};
  # DEBUG thisD.50768 => &D.45055
  # DEBUG thisD.50769 => &D.45055
  if (prephitmp_120 != 0)
    goto <bb 15>;
  else
    goto <bb 13>;
;;    succ:       15 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 225, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  [LP 19] # .MEM_32 = VDEF <.MEM_29>
  # PT = { D.51553 } (escaped heap)
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _33 = _ZnwmD.2764 (48);
;;    succ:       59 (EH,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 225, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_34 = VDEF <.MEM_32>
  MEM[(struct OutputSetD.31333 *)_33]._outputsD.32418._M_tD.31591._M_implD.31669._M_headerD.31835._M_colorD.29383 = 0;
  # .MEM_35 = VDEF <.MEM_34>
  MEM[(struct OutputSetD.31333 *)_33]._outputsD.32418._M_tD.31591._M_implD.31669._M_headerD.31835._M_parentD.29384 = 0B;
  # .MEM_38 = VDEF <.MEM_35>
  MEM[(struct OutputSetD.31333 *)_33]._outputsD.32418._M_tD.31591._M_implD.31669._M_node_countD.31836 = 0;
  # DEBUG thisD.50785 => _33
  # DEBUG D#136ptD.0 => &MEM[(struct OutputSetD.31333 *)_33]._outputsD.32418
  # DEBUG thisD.50786 => D#136ptD.0
  # DEBUG D#135ptD.0 => &D#136ptD.0->_M_tD.31591
  # DEBUG thisD.50787 => D#135ptD.0
  # DEBUG D#134ptD.0 => &MEM[(struct _Rb_treeD.31590 *)D#135ptD.0]._M_implD.31669
  # DEBUG thisD.50788 => D#134ptD.0
  # DEBUG thisD.49647 => D#134ptD.0
  # DEBUG thisD.49644 => D#134ptD.0
  # DEBUG thisD.50789 => D#134ptD.0
  # PT = { D.51553 } (escaped heap)
  _28 = &MEM[(struct _Rb_tree_implD.31681 *)_33]._M_headerD.31835;
  # .MEM_95 = VDEF <.MEM_38>
  MEM[(struct _Rb_tree_implD.31681 *)_33]._M_headerD.31835._M_leftD.29385 = _28;
  # .MEM_96 = VDEF <.MEM_95>
  MEM[(struct _Rb_tree_implD.31681 *)_33]._M_headerD.31835._M_rightD.29386 = _28;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.51553 } (escaped heap)
  # iftmp.0_1 = PHI <0B(12), _33(14)>
  # .MEM_2 = PHI <.MEM_29(12), .MEM_96(14)>
  # .MEM_40 = VDEF <.MEM_2>
  this_7(D)->_route_setD.44883 = iftmp.0_1;
  # DEBUG D#27ptD.0 => &D.45060
  # DEBUG thisD.50790 => D#27ptD.0
  # DEBUG D#26ptD.0 => D#27ptD.0
  # DEBUG thisD.48915 => D#26ptD.0
  # DEBUG D#186ptD.0 => &D.45060
  # DEBUG thisD.51371 => &D.45059
  # DEBUG __sD.51372 => "priority"
  # DEBUG __aD.51373 => D#186ptD.0
  # DEBUG D#185ptD.0 => D#186ptD.0
  # DEBUG thisD.51383 => &D.45059
  # DEBUG D#183ptD.0 => &D.45059._M_dataplusD.12321
  # DEBUG D#72ptD.0 => D#185ptD.0
  # DEBUG thisD.51386 => D#183ptD.0
  # DEBUG __datD.51385 => &D.45059.D.12341._M_local_bufD.12343
  # DEBUG __aD.51384 => D#72ptD.0
  # DEBUG D#71ptD.0 => D#72ptD.0
  # DEBUG D#69ptD.0 => D#183ptD.0
  # DEBUG D#70ptD.0 => D#71ptD.0
  # DEBUG thisD.49205 => D#69ptD.0
  # DEBUG __aD.49206 => D#70ptD.0
  # DEBUG D#68ptD.0 => D#70ptD.0
  # DEBUG D#67ptD.0 => D#69ptD.0
  # DEBUG thisD.49187 => D#67ptD.0
  # DEBUG D.49188 => D#68ptD.0
  # .MEM_268 = VDEF <.MEM_40>
  MEM[(struct _Alloc_hiderD.12320 *)&D.45059]._M_pD.12327 = &D.45059.D.12341._M_local_bufD.12343;
  # DEBUG __sD.51382 => "priority"
  # DEBUG thisD.51376 => &D.45059
  # DEBUG __begD.51375 => "priority"
  # DEBUG __endD.51374 => &MEM[(voidD.45 *)"priority" + 8B]
  # DEBUG thisD.51380 => &D.45059
  # DEBUG __begD.51379 => "priority"
  # DEBUG __endD.51378 => &MEM[(voidD.45 *)"priority" + 8B]
  # DEBUG thisD.51387 => &D.45059
  # DEBUG __begD.51388 => "priority"
  # DEBUG __endD.51389 => &MEM[(voidD.45 *)"priority" + 8B]
  # DEBUG __ptrD.50223 => "priority"
  # DEBUG __firstD.51413 => "priority"
  # DEBUG __lastD.51412 => &MEM[(voidD.45 *)"priority" + 8B]
  # DEBUG D#189ptD.0 => &__firstD.51413
  # DEBUG D.50152 => D#189ptD.0
  # DEBUG __firstD.51415 => "priority"
  # DEBUG __lastD.51414 => &MEM[(voidD.45 *)"priority" + 8B]
  # DEBUG __dnewD.51390 => 8
  # DEBUG D#1ptD.0 => &D.45059
  # DEBUG thisD.50197 => D#1ptD.0
  # DEBUG __pD.51393 => &D.45059.D.12341._M_local_bufD.12343
  # DEBUG __k1D.51392 => "priority"
  # DEBUG __k2D.51391 => &MEM[(voidD.45 *)"priority" + 8B]
  # DEBUG __dD.51396 => &D.45059.D.12341._M_local_bufD.12343
  # DEBUG __sD.51395 => "priority"
  # DEBUG __nD.51394 => 8
  # DEBUG __s1D.51399 => &D.45059.D.12341._M_local_bufD.12343
  # DEBUG __s2D.51398 => "priority"
  # DEBUG __nD.51397 => 8
  # .MEM_274 = VDEF <.MEM_268>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  memcpyD.992 (&D.45059.D.12341._M_local_bufD.12343, "priority", 8);
  # DEBUG thisD.51403 => &D.45059
  # DEBUG __nD.51402 => 8
  # DEBUG D#9ptD.0 => &D.45059
  # DEBUG __lengthD.51405 => 8
  # DEBUG thisD.51404 => D#9ptD.0
  # .MEM_275 = VDEF <.MEM_274>
  MEM[(size_typeD.12304 *)&D.45059 + 8B] = 8;
  # DEBUG D#1ptD.0 => &D.45059
  # DEBUG thisD.48775 => D#1ptD.0
  # DEBUG __c1D.51407 => &MEM[(voidD.45 *)&D.45059 + 24B]
  # DEBUG __c2D.51406 => D#10ptD.0
  # .MEM_276 = VDEF <.MEM_275>
  MEM[(char_typeD.7431 &)&D.45059 + 24] = 0;
  # DEBUG D#256ptD.0 => {CLOBBER}
  # DEBUG __dnewD.51390 => D#256ptD.0
  [LP 7] # .MEM_42 = VDEF <.MEM_276>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  priorityD.45053 = _ZNK13Configuration6GetStrERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.41329 (config_23(D), &D.45059); [return slot optimization]
;;    succ:       46 (EH,EXECUTABLE)
;;                16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       15 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.50796 => &D.45059
  # DEBUG thisD.50797 => &D.45059
  # DEBUG thisD.50806 => &D.45059
  # VUSE <.MEM_42>
  # PT = nonlocal escaped { D.45059 } (escaped)
  _45 = MEM[(charD.10 * *)&D.45059];
  # DEBUG D#1ptD.0 => &D.45059
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.50807 => &D.45059
  if (&D.45059.D.12341._M_local_bufD.12343 != _45)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 314, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => D.45059.D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.50799 => &D.45059
  # DEBUG __sizeD.50798 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => &D.45059
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => &D.45059
  # DEBUG D#91ptD.0 => &D.45059._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.50802 => _45
  # DEBUG __aD.50800 => D#89ptD.0
  # DEBUG __nD.50801 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.50805 => _45
  # DEBUG thisD.50803 => D#85ptD.0
  # DEBUG D.50804 => D#86ptD.0
  # .MEM_97 = VDEF <.MEM_42>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_45);
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       16 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_72 = PHI <.MEM_42(16), .MEM_97(17)>
  # DEBUG D#95ptD.0 => &D.45059._M_dataplusD.12321
  # DEBUG thisD.50808 => D#95ptD.0
  # DEBUG thisD.50809 => D#95ptD.0
  # DEBUG thisD.50810 => D#95ptD.0
  # .MEM_44 = VDEF <.MEM_72>
  D.45059 ={v} {CLOBBER};
  # DEBUG thisD.50794 => &D.45060
  # DEBUG thisD.50795 => &D.45060
  # DEBUG __lhsD.50791 => &priorityD.45053
  # DEBUG __rhsD.50792 => "local_age"
  [LP 20] # .MEM_102 = VDEF <.MEM_44>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _39 = _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKcD.13041 (&priorityD.45053, "local_age");
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                54 (EH,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [100.0%]  (FALLTHRU,EXECUTABLE)
  if (_39 == 0)
    goto <bb 20>;
  else
    goto <bb 21>;
;;    succ:       20 [71.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [29.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 319, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       19 [71.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_46 = VDEF <.MEM_102>
  this_7(D)->_pri_typeD.44892 = 0;
  goto <bb 78>;
;;    succ:       78 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 130, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       19 [29.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __lhsD.50811 => &priorityD.45053
  # DEBUG __rhsD.50812 => "queue_length"
  [LP 21] # .MEM_103 = VDEF <.MEM_102>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _43 = _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKcD.13041 (&priorityD.45053, "queue_length");
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                22 (EH,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 21, next block 23, flags: (NEW)
;;    pred:       21 (EH,EXECUTABLE)
<L37>: [LP 21]
  goto <bb 55> (<L23>);
;;    succ:       55 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 130, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       21 [100.0%]  (FALLTHRU,EXECUTABLE)
  if (_43 == 0)
    goto <bb 24>;
  else
    goto <bb 25>;
;;    succ:       24 [71.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [29.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 93, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [71.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_48 = VDEF <.MEM_103>
  this_7(D)->_pri_typeD.44892 = 1;
  goto <bb 78>;
;;    succ:       78 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 38, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       23 [29.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __lhsD.50814 => &priorityD.45053
  # DEBUG __rhsD.50815 => "hop_count"
  [LP 22] # .MEM_104 = VDEF <.MEM_103>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _47 = _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKcD.13041 (&priorityD.45053, "hop_count");
  goto <bb 27>;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                26 (EH,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 (EH,EXECUTABLE)
<L38>: [LP 22]
  goto <bb 55> (<L23>);
;;    succ:       55 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 38, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
  if (_47 == 0)
    goto <bb 28>;
  else
    goto <bb 29>;
;;    succ:       28 [71.0%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [29.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 27, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       27 [71.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_50 = VDEF <.MEM_104>
  this_7(D)->_pri_typeD.44892 = 2;
  goto <bb 78>;
;;    succ:       78 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 11, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       27 [29.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __lhsD.50817 => &priorityD.45053
  # DEBUG __rhsD.50818 => "none"
  [LP 23] # .MEM_105 = VDEF <.MEM_104>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _49 = _ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKcD.13041 (&priorityD.45053, "none");
  goto <bb 31>;
;;    succ:       31 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                30 (EH,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 29, next block 31, flags: (NEW)
;;    pred:       29 (EH,EXECUTABLE)
<L39>: [LP 23]
  goto <bb 55> (<L23>);
;;    succ:       55 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 11, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       29 [100.0%]  (FALLTHRU,EXECUTABLE)
  if (_49 == 0)
    goto <bb 32>;
  else
    goto <bb 33>;
;;    succ:       32 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 5, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       31 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_52 = VDEF <.MEM_105>
  this_7(D)->_pri_typeD.44892 = 3;
  goto <bb 34>;
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 5, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       31 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_53 = VDEF <.MEM_105>
  this_7(D)->_pri_typeD.44892 = 4;
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 10, maybe hot
;;    prev block 33, next block 78, flags: (NEW, REACHABLE)
;;    pred:       33 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_277 = PHI <.MEM_53(33), .MEM_52(32)>
;;    succ:       78 [100.0%]  (FALLTHRU)

;;   basic block 78, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 34, next block 35, flags: (NEW)
;;    pred:       34 [100.0%]  (FALLTHRU)
;;                20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                28 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_3 = PHI <.MEM_277(34), .MEM_46(20), .MEM_48(24), .MEM_50(28)>
  # DEBUG D#27ptD.0 => &D.45062
  # DEBUG thisD.50820 => D#27ptD.0
  # DEBUG D#26ptD.0 => D#27ptD.0
  # DEBUG thisD.48915 => D#26ptD.0
  # DEBUG D#186ptD.0 => &D.45062
  # DEBUG thisD.51416 => &D.45061
  # DEBUG __sD.51417 => "vc_priority_donation"
  # DEBUG __aD.51418 => D#186ptD.0
  # DEBUG D#185ptD.0 => D#186ptD.0
  # DEBUG thisD.51428 => &D.45061
  # DEBUG D#183ptD.0 => &D.45061._M_dataplusD.12321
  # DEBUG D#72ptD.0 => D#185ptD.0
  # DEBUG thisD.51431 => D#183ptD.0
  # DEBUG __datD.51430 => &D.45061.D.12341._M_local_bufD.12343
  # DEBUG __aD.51429 => D#72ptD.0
  # DEBUG D#71ptD.0 => D#72ptD.0
  # DEBUG D#69ptD.0 => D#183ptD.0
  # DEBUG D#70ptD.0 => D#71ptD.0
  # DEBUG thisD.49205 => D#69ptD.0
  # DEBUG __aD.49206 => D#70ptD.0
  # DEBUG D#68ptD.0 => D#70ptD.0
  # DEBUG D#67ptD.0 => D#69ptD.0
  # DEBUG thisD.49187 => D#67ptD.0
  # DEBUG D.49188 => D#68ptD.0
  # .MEM_278 = VDEF <.MEM_3>
  MEM[(struct _Alloc_hiderD.12320 *)&D.45061]._M_pD.12327 = &D.45061.D.12341._M_local_bufD.12343;
  # DEBUG __sD.51427 => "vc_priority_donation"
  # DEBUG thisD.51421 => &D.45061
  # DEBUG __begD.51420 => "vc_priority_donation"
  # DEBUG __endD.51419 => &MEM[(voidD.45 *)"vc_priority_donation" + 20B]
  # DEBUG thisD.51425 => &D.45061
  # DEBUG __begD.51424 => "vc_priority_donation"
  # DEBUG __endD.51423 => &MEM[(voidD.45 *)"vc_priority_donation" + 20B]
  # DEBUG thisD.51432 => &D.45061
  # DEBUG __begD.51433 => "vc_priority_donation"
  # DEBUG __endD.51434 => &MEM[(voidD.45 *)"vc_priority_donation" + 20B]
  # DEBUG __ptrD.50223 => "vc_priority_donation"
  # DEBUG __firstD.51458 => "vc_priority_donation"
  # DEBUG __lastD.51457 => &MEM[(voidD.45 *)"vc_priority_donation" + 20B]
  # DEBUG D#189ptD.0 => &__firstD.51458
  # DEBUG D.50152 => D#189ptD.0
  # DEBUG __firstD.51460 => "vc_priority_donation"
  # DEBUG __lastD.51459 => &MEM[(voidD.45 *)"vc_priority_donation" + 20B]
  # .MEM_279 = VDEF <.MEM_278>
  __dnewD.51435 = 20;
  [LP 24] # .MEM_280 = VDEF <.MEM_279>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _209 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.12365 (&D.45061, &__dnewD.51435, 0);
  goto <bb 36>;
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 (EH,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 78, next block 36, flags: (NEW)
;;    pred:       78 (EH,EXECUTABLE)
<L40>: [LP 24]
  goto <bb 55> (<L23>);
;;    succ:       55 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       78 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#7ptD.0 => &D.45061
  # DEBUG __pD.51454 => _209
  # DEBUG thisD.51453 => D#7ptD.0
  # .MEM_281 = VDEF <.MEM_280>
  MEM[(charD.10 * *)&D.45061] = _209;
  # VUSE <.MEM_281>
  __dnew.42_210 = __dnewD.51435;
  # DEBUG D#8ptD.0 => &D.45061
  # DEBUG __capacityD.51456 => __dnew.42_210
  # DEBUG thisD.51455 => D#8ptD.0
  # .MEM_282 = VDEF <.MEM_281>
  MEM[(size_typeD.12304 *)&D.45061 + 16B] = __dnew.42_210;
  # DEBUG D#1ptD.0 => &D.45061
  # DEBUG thisD.50197 => D#1ptD.0
  # DEBUG __pD.51438 => _209
  # DEBUG __k1D.51437 => "vc_priority_donation"
  # DEBUG __k2D.51436 => &MEM[(voidD.45 *)"vc_priority_donation" + 20B]
  # DEBUG __dD.51441 => _209
  # DEBUG __sD.51440 => "vc_priority_donation"
  # DEBUG __nD.51439 => 20
  # DEBUG __s1D.51444 => _209
  # DEBUG __s2D.51443 => "vc_priority_donation"
  # DEBUG __nD.51442 => 20
  # .MEM_284 = VDEF <.MEM_282>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  memcpyD.992 (_209, "vc_priority_donation", 20);
  # VUSE <.MEM_284>
  __dnew.42_213 = __dnewD.51435;
  # DEBUG thisD.51448 => &D.45061
  # DEBUG __nD.51447 => __dnew.42_213
  # DEBUG D#9ptD.0 => &D.45061
  # DEBUG __lengthD.51450 => __dnew.42_213
  # DEBUG thisD.51449 => D#9ptD.0
  # .MEM_285 = VDEF <.MEM_284>
  MEM[(size_typeD.12304 *)&D.45061 + 8B] = __dnew.42_213;
  # VUSE <.MEM_285>
  # PT = nonlocal escaped null { D.45061 } (escaped)
  _214 = MEM[(charD.10 * *)&D.45061];
  # DEBUG D#1ptD.0 => &D.45061
  # DEBUG thisD.48775 => D#1ptD.0
  # PT = nonlocal escaped null { D.45061 } (escaped)
  _215 = _214 + __dnew.42_213;
  # DEBUG __c1D.51452 => _215
  # DEBUG __c2D.51451 => D#10ptD.0
  # .MEM_286 = VDEF <.MEM_285>
  MEM[(char_typeD.7431 &)_215] = 0;
  # .MEM_287 = VDEF <.MEM_286>
  __dnewD.51435 ={v} {CLOBBER};
  [LP 11] # .MEM_56 = VDEF <.MEM_287>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _57 = _ZNK13Configuration6GetIntERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.41332 (config_23(D), &D.45061);
;;    succ:       50 (EH,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       36 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_58 = VDEF <.MEM_56>
  this_7(D)->_priority_donationD.44894 = _57;
  # DEBUG thisD.50838 => &D.45061
  # DEBUG thisD.50839 => &D.45061
  # DEBUG thisD.50848 => &D.45061
  # VUSE <.MEM_58>
  # PT = nonlocal escaped null { D.45061 } (escaped)
  _61 = MEM[(charD.10 * *)&D.45061];
  # DEBUG D#1ptD.0 => &D.45061
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.50849 => &D.45061
  if (&D.45061.D.12341._M_local_bufD.12343 != _61)
    goto <bb 38>;
  else
    goto <bb 39>;
;;    succ:       38 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 314, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       37 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => D.45061.D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.50841 => &D.45061
  # DEBUG __sizeD.50840 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => &D.45061
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => &D.45061
  # DEBUG D#91ptD.0 => &D.45061._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.50844 => _61
  # DEBUG __aD.50842 => D#89ptD.0
  # DEBUG __nD.50843 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.50847 => _61
  # DEBUG thisD.50845 => D#85ptD.0
  # DEBUG D.50846 => D#86ptD.0
  # .MEM_106 = VDEF <.MEM_58>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_61);
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       37 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_73 = PHI <.MEM_58(37), .MEM_106(38)>
  # DEBUG D#95ptD.0 => &D.45061._M_dataplusD.12321
  # DEBUG thisD.50850 => D#95ptD.0
  # DEBUG thisD.50851 => D#95ptD.0
  # DEBUG thisD.50852 => D#95ptD.0
  # .MEM_60 = VDEF <.MEM_73>
  D.45061 ={v} {CLOBBER};
  # DEBUG thisD.50836 => &D.45062
  # DEBUG thisD.50837 => &D.45062
  # DEBUG thisD.50821 => &priorityD.45053
  # DEBUG thisD.50822 => &priorityD.45053
  # DEBUG thisD.50831 => &priorityD.45053
  # VUSE <.MEM_60>
  # PT = nonlocal escaped 
  _51 = MEM[(charD.10 * *)&priorityD.45053];
  # DEBUG D#1ptD.0 => &priorityD.45053
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.50832 => &priorityD.45053
  if (&priorityD.45053.D.12341._M_local_bufD.12343 != _51)
    goto <bb 40>;
  else
    goto <bb 41>;
;;    succ:       40 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                41 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 0, count 0, freq 353, maybe hot
;;    prev block 39, next block 41, flags: (NEW, REACHABLE)
;;    pred:       39 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => priorityD.45053.D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.50824 => &priorityD.45053
  # DEBUG __sizeD.50823 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => &priorityD.45053
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => &priorityD.45053
  # DEBUG D#91ptD.0 => &priorityD.45053._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.50827 => _51
  # DEBUG __aD.50825 => D#89ptD.0
  # DEBUG __nD.50826 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.50830 => _51
  # DEBUG thisD.50828 => D#85ptD.0
  # DEBUG D.50829 => D#86ptD.0
  # .MEM_111 = VDEF <.MEM_60>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_51);
;;    succ:       41 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 41, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 40, next block 42, flags: (NEW, REACHABLE)
;;    pred:       39 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                40 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_74 = PHI <.MEM_60(39), .MEM_111(40)>
  # DEBUG D#95ptD.0 => &priorityD.45053._M_dataplusD.12321
  # DEBUG thisD.50833 => D#95ptD.0
  # DEBUG thisD.50834 => D#95ptD.0
  # DEBUG thisD.50835 => D#95ptD.0
  # .MEM_62 = VDEF <.MEM_74>
  priorityD.45053 ={v} {CLOBBER};
  # VUSE <.MEM_62>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       4 (EH,EXECUTABLE)
<L15>: [LP 3]
  # DEBUG thisD.50853 => &D.45054
  # DEBUG thisD.50854 => &D.45054
  # DEBUG thisD.50863 => &D.45054
  # VUSE <.MEM_24>
  # PT = nonlocal escaped { D.45054 } (escaped)
  _59 = MEM[(charD.10 * *)&D.45054];
  # DEBUG D#1ptD.0 => &D.45054
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.50864 => &D.45054
  if (&D.45054.D.12341._M_local_bufD.12343 != _59)
    goto <bb 43>;
  else
    goto <bb 44>;
;;    succ:       43 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 42, next block 44, flags: (NEW, REACHABLE)
;;    pred:       42 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => D.45054.D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.50856 => &D.45054
  # DEBUG __sizeD.50855 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => &D.45054
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => &D.45054
  # DEBUG D#91ptD.0 => &D.45054._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.50859 => _59
  # DEBUG __aD.50857 => D#89ptD.0
  # DEBUG __nD.50858 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.50862 => _59
  # DEBUG thisD.50860 => D#85ptD.0
  # DEBUG D.50861 => D#86ptD.0
  # .MEM_131 = VDEF <.MEM_24>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_59);
;;    succ:       44 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 44, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 43, next block 45, flags: (NEW, REACHABLE)
;;    pred:       42 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                43 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_75 = PHI <.MEM_24(42), .MEM_131(43)>
  # DEBUG D#95ptD.0 => &D.45054._M_dataplusD.12321
  # DEBUG thisD.50865 => D#95ptD.0
  # DEBUG thisD.50866 => D#95ptD.0
  # DEBUG thisD.50867 => D#95ptD.0
  # .MEM_67 = VDEF <.MEM_75>
  D.45054 ={v} {CLOBBER};
  [LP 25] resx 5
;;    succ:       45 (EH,EXECUTABLE)

;;   basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 44, next block 46, flags: (NEW)
;;    pred:       44 (EH,EXECUTABLE)
<L41>: [LP 25]
  goto <bb 60> (<L24>);
;;    succ:       60 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 46, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 45, next block 47, flags: (NEW, REACHABLE)
;;    pred:       15 (EH,EXECUTABLE)
<L18>: [LP 7]
  # DEBUG thisD.50870 => &D.45059
  # DEBUG thisD.50871 => &D.45059
  # DEBUG thisD.50880 => &D.45059
  # VUSE <.MEM_42>
  # PT = nonlocal escaped { D.45059 } (escaped)
  _68 = MEM[(charD.10 * *)&D.45059];
  # DEBUG D#1ptD.0 => &D.45059
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.50881 => &D.45059
  if (&D.45059.D.12341._M_local_bufD.12343 != _68)
    goto <bb 47>;
  else
    goto <bb 48>;
;;    succ:       47 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                48 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 47, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 46, next block 48, flags: (NEW, REACHABLE)
;;    pred:       46 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => D.45059.D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.50873 => &D.45059
  # DEBUG __sizeD.50872 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => &D.45059
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => &D.45059
  # DEBUG D#91ptD.0 => &D.45059._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.50876 => _68
  # DEBUG __aD.50874 => D#89ptD.0
  # DEBUG __nD.50875 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.50879 => _68
  # DEBUG thisD.50877 => D#85ptD.0
  # DEBUG D.50878 => D#86ptD.0
  # .MEM_126 = VDEF <.MEM_42>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_68);
;;    succ:       48 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 47, next block 49, flags: (NEW, REACHABLE)
;;    pred:       46 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                47 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_76 = PHI <.MEM_42(46), .MEM_126(47)>
  # DEBUG D#95ptD.0 => &D.45059._M_dataplusD.12321
  # DEBUG thisD.50882 => D#95ptD.0
  # DEBUG thisD.50883 => D#95ptD.0
  # DEBUG thisD.50884 => D#95ptD.0
  # .MEM_65 = VDEF <.MEM_76>
  D.45059 ={v} {CLOBBER};
  [LP 26] resx 11
;;    succ:       49 (EH,EXECUTABLE)

;;   basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 48, next block 50, flags: (NEW)
;;    pred:       48 (EH,EXECUTABLE)
<L42>: [LP 26]
  goto <bb 60> (<L24>);
;;    succ:       60 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 49, next block 51, flags: (NEW, REACHABLE)
;;    pred:       36 (EH,EXECUTABLE)
<L21>: [LP 11]
  # DEBUG thisD.50887 => &D.45061
  # DEBUG thisD.50888 => &D.45061
  # DEBUG thisD.50897 => &D.45061
  # VUSE <.MEM_56>
  # PT = nonlocal escaped null { D.45061 } (escaped)
  _66 = MEM[(charD.10 * *)&D.45061];
  # DEBUG D#1ptD.0 => &D.45061
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.50898 => &D.45061
  if (&D.45061.D.12341._M_local_bufD.12343 != _66)
    goto <bb 51>;
  else
    goto <bb 52>;
;;    succ:       51 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                52 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 51, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 50, next block 52, flags: (NEW, REACHABLE)
;;    pred:       50 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => D.45061.D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.50890 => &D.45061
  # DEBUG __sizeD.50889 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => &D.45061
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => &D.45061
  # DEBUG D#91ptD.0 => &D.45061._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.50893 => _66
  # DEBUG __aD.50891 => D#89ptD.0
  # DEBUG __nD.50892 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.50896 => _66
  # DEBUG thisD.50894 => D#85ptD.0
  # DEBUG D.50895 => D#86ptD.0
  # .MEM_116 = VDEF <.MEM_56>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_66);
;;    succ:       52 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 51, next block 53, flags: (NEW, REACHABLE)
;;    pred:       50 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                51 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_77 = PHI <.MEM_56(50), .MEM_116(51)>
  # DEBUG D#95ptD.0 => &D.45061._M_dataplusD.12321
  # DEBUG thisD.50899 => D#95ptD.0
  # DEBUG thisD.50900 => D#95ptD.0
  # DEBUG thisD.50901 => D#95ptD.0
  # .MEM_63 = VDEF <.MEM_77>
  D.45061 ={v} {CLOBBER};
  [LP 9] resx 19
;;    succ:       53 (EH,EXECUTABLE)

;;   basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 52, next block 54, flags: (NEW)
;;    pred:       52 (EH,EXECUTABLE)
<L43>: [LP 9]
  goto <bb 55> (<L23>);
;;    succ:       55 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 53, next block 55, flags: (NEW)
;;    pred:       18 (EH,EXECUTABLE)
<L36>: [LP 20]
;;    succ:       55 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 54, next block 56, flags: (NEW, REACHABLE)
;;    pred:       54 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                53 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_4 = PHI <.MEM_102(54), .MEM_103(22), .MEM_104(26), .MEM_105(30), .MEM_63(53), .MEM_280(35)>
<L23>:
  # DEBUG thisD.50904 => &priorityD.45053
  # DEBUG thisD.50905 => &priorityD.45053
  # DEBUG thisD.50914 => &priorityD.45053
  # VUSE <.MEM_4>
  # PT = nonlocal escaped 
  _64 = MEM[(charD.10 * *)&priorityD.45053];
  # DEBUG D#1ptD.0 => &priorityD.45053
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.50915 => &priorityD.45053
  if (&priorityD.45053.D.12341._M_local_bufD.12343 != _64)
    goto <bb 56>;
  else
    goto <bb 57>;
;;    succ:       56 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                57 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 56, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 55, next block 57, flags: (NEW, REACHABLE)
;;    pred:       55 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => priorityD.45053.D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.50907 => &priorityD.45053
  # DEBUG __sizeD.50906 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => &priorityD.45053
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => &priorityD.45053
  # DEBUG D#91ptD.0 => &priorityD.45053._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.50910 => _64
  # DEBUG __aD.50908 => D#89ptD.0
  # DEBUG __nD.50909 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.50913 => _64
  # DEBUG thisD.50911 => D#85ptD.0
  # DEBUG D.50912 => D#86ptD.0
  # .MEM_121 = VDEF <.MEM_4>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_64);
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 57, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 56, next block 58, flags: (NEW, REACHABLE)
;;    pred:       55 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                56 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_78 = PHI <.MEM_4(55), .MEM_121(56)>
  # DEBUG D#95ptD.0 => &priorityD.45053._M_dataplusD.12321
  # DEBUG thisD.50916 => D#95ptD.0
  # DEBUG thisD.50917 => D#95ptD.0
  # DEBUG thisD.50918 => D#95ptD.0
  [LP 4] resx 17
;;    succ:       58 (EH,EXECUTABLE)

;;   basic block 58, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 57, next block 59, flags: (NEW)
;;    pred:       57 (EH,EXECUTABLE)
<L44>: [LP 4]
  goto <bb 60> (<L24>);
;;    succ:       60 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 59, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 58, next block 60, flags: (NEW)
;;    pred:       13 (EH,EXECUTABLE)
<L35>: [LP 19]
;;    succ:       60 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 60, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 59, next block 61, flags: (NEW, REACHABLE)
;;    pred:       59 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                58 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                45 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                49 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_5 = PHI <.MEM_32(59), .MEM_78(58), .MEM_67(45), .MEM_65(49)>
<L24>:
  # .MEM_69 = VDEF <.MEM_5>
  priorityD.45053 ={v} {CLOBBER};
  # DEBUG D#241ptD.0 => &this_7(D)->_bufferD.44881
  # DEBUG thisD.50919 => D#241ptD.0
  # DEBUG D#170ptD.0 => &D#241ptD.0->D.44879
  # DEBUG thisD.49919 => D#170ptD.0
  # DEBUG thisD.49916 => D#241ptD.0
  # DEBUG D#20ptD.0 => &D#241ptD.0->D.44879._M_implD.44330._M_finishD.44335
  # DEBUG thisD.49918 => NULL
  # DEBUG __xD.49917 => D#20ptD.0
  # DEBUG D#178ptD.0 => MEM[(const struct iteratorD.44217 &)D#241ptD.0 + 48]._M_curD.44229
  # DEBUG D.49925 => D#178ptD.0
  # DEBUG D#177ptD.0 => MEM[(const struct iteratorD.44217 &)D#241ptD.0 + 48]._M_firstD.44230
  # DEBUG D.49926 => D#177ptD.0
  # DEBUG D#176ptD.0 => MEM[(const struct iteratorD.44217 &)D#241ptD.0 + 48]._M_lastD.44231
  # DEBUG D.49927 => D#176ptD.0
  # DEBUG D#175ptD.0 => MEM[(const struct iteratorD.44217 &)D#241ptD.0 + 48]._M_nodeD.44232
  # DEBUG D.49928 => D#175ptD.0
  # DEBUG thisD.49913 => D#241ptD.0
  # DEBUG D#21ptD.0 => &D#241ptD.0->D.44879._M_implD.44330._M_startD.44334
  # DEBUG thisD.49915 => NULL
  # DEBUG __xD.49914 => D#21ptD.0
  # DEBUG D#174ptD.0 => MEM[(const struct iteratorD.44217 &)D#241ptD.0 + 16]._M_curD.44229
  # DEBUG D.49921 => D#174ptD.0
  # DEBUG D#173ptD.0 => MEM[(const struct iteratorD.44217 &)D#241ptD.0 + 16]._M_firstD.44230
  # DEBUG D.49922 => D#173ptD.0
  # DEBUG D#172ptD.0 => MEM[(const struct iteratorD.44217 &)D#241ptD.0 + 16]._M_lastD.44231
  # DEBUG D.49923 => D#172ptD.0
  # DEBUG D#171ptD.0 => MEM[(const struct iteratorD.44217 &)D#241ptD.0 + 16]._M_nodeD.44232
  # DEBUG D.49924 => D#171ptD.0
  # DEBUG D#22ptD.0 => D#241ptD.0
  # DEBUG thisD.49912 => D#22ptD.0
  # DEBUG __firstD.49911 => D#23ptD.0
  # DEBUG __lastD.49910 => D#24ptD.0
  # DEBUG D.49909 => D#25ptD.0
  # DEBUG thisD.51461 => D#254ptD.0
  # VUSE <.MEM_69>
  # PT = nonlocal escaped 
  _216 = MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_mapD.44332;
  if (_216 != 0B)
    goto <bb 61>;
  else
    goto <bb 67>;
;;    succ:       61 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                67 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 61, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 60, next block 62, flags: (NEW, REACHABLE)
;;    pred:       60 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_69>
  # PT = nonlocal escaped 
  _217 = MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_finishD.44335._M_nodeD.44232;
  # PT = nonlocal escaped 
  _218 = _217 + 8;
  # VUSE <.MEM_69>
  # PT = nonlocal escaped 
  __nstart_219 = MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_startD.44334._M_nodeD.44232;
  # DEBUG D#147ptD.0 => D#254ptD.0
  # DEBUG __nstartD.51467 => __nstart_219
  # DEBUG __nfinishD.51466 => _218
  # DEBUG thisD.51465 => D#147ptD.0
  # DEBUG __nD.51468 => __nstart_219
  if (_218 <= __nstart_219)
    goto <bb 66>;
  else
    goto <bb 62>;
;;    succ:       66 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                62 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 62, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 61, next block 63, flags: (NEW)
;;    pred:       61 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       63 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 63, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 62, next block 64, flags: (NEW)
;;    pred:       62 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                64 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_54 = PHI <.MEM_69(62), .MEM_288(64)>
  # PT = nonlocal escaped 
  # __nstart_154 = PHI <__nstart_219(62), __nstart_222(64)>
  # DEBUG __nD.51468 => __nstart_154
  # VUSE <.MEM_54>
  # PT = nonlocal escaped 
  _221 = *__nstart_154;
  # DEBUG D#145ptD.0 => D#146ptD.0
  # DEBUG __pD.51470 => _221
  # DEBUG thisD.51469 => D#145ptD.0
  # DEBUG D#144ptD.0 => D#145ptD.0
  # DEBUG __sizeD.49700 => 8
  # DEBUG D#143ptD.0 => &D#144ptD.0->_M_implD.44330
  # DEBUG D#141ptD.0 => D#143ptD.0
  # DEBUG __pD.51474 => _221
  # DEBUG __aD.51472 => D#141ptD.0
  # DEBUG __nD.51473 => D#142ptD.0
  # DEBUG D#140ptD.0 => D#142ptD.0
  # DEBUG D#139ptD.0 => D#141ptD.0
  # DEBUG D#137ptD.0 => D#139ptD.0
  # DEBUG D#138ptD.0 => D#140ptD.0
  # DEBUG __pD.51477 => _221
  # DEBUG thisD.51475 => D#137ptD.0
  # DEBUG D.51476 => D#138ptD.0
  # .MEM_288 = VDEF <.MEM_54>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_221);
  # PT = nonlocal escaped 
  __nstart_222 = __nstart_154 + 8;
  # DEBUG __nD.51468 => __nstart_222
  # DEBUG __nD.51468 => __nstart_222
  if (_218 <= __nstart_222)
    goto <bb 65>;
  else
    goto <bb 64>;
;;    succ:       65 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                64 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 64, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 63, next block 65, flags: (NEW)
;;    pred:       63 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 63>;
;;    succ:       63 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 65, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 64, next block 77, flags: (NEW)
;;    pred:       63 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       77 [100.0%]  (FALLTHRU)

;;   basic block 77, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 65, next block 66, flags: (NEW)
;;    pred:       65 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_288>
  pretmp_211 = MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_mapD.44332;
;;    succ:       66 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 66, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 77, next block 67, flags: (NEW, REACHABLE)
;;    pred:       77 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                61 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_138 = PHI <.MEM_288(77), .MEM_69(61)>
  # PT = nonlocal escaped 
  # prephitmp_117 = PHI <pretmp_211(77), _216(61)>
  # DEBUG D#168ptD.0 => D#254ptD.0->_M_implD.44330._M_map_sizeD.44333
  # DEBUG D#257ptD.0 => MEM[(struct _Deque_baseD.43964 *)this_7(D) + 96B]._M_implD.44330._M_mapD.44332
  # DEBUG D#166ptD.0 => D#254ptD.0
  # DEBUG D#167ptD.0 => D#168ptD.0
  # DEBUG __pD.51480 => D#257ptD.0
  # DEBUG thisD.51478 => D#166ptD.0
  # DEBUG __nD.51479 => D#167ptD.0
  # DEBUG D#165ptD.0 => D#167ptD.0
  # DEBUG D#164ptD.0 => D#166ptD.0
  # DEBUG D#163ptD.0 => D#164ptD.0
  # DEBUG thisD.49862 => D#163ptD.0
  # DEBUG D#162ptD.0 => D#163ptD.0
  # DEBUG thisD.49850 => D#162ptD.0
  # DEBUG thisD.49842 => NULL
  # DEBUG D.49843 => NULL
  # DEBUG thisD.49840 => NULL
  # DEBUG D#132ptD.0 => &__map_allocD.51481
  # DEBUG D#133ptD.0 => D#165ptD.0
  # DEBUG __pD.51484 => D#257ptD.0
  # DEBUG __aD.51482 => D#132ptD.0
  # DEBUG __nD.51483 => D#133ptD.0
  # DEBUG D#131ptD.0 => D#133ptD.0
  # DEBUG D#130ptD.0 => D#132ptD.0
  # DEBUG D#128ptD.0 => D#130ptD.0
  # DEBUG D#129ptD.0 => D#131ptD.0
  # DEBUG __pD.51487 => D#257ptD.0
  # DEBUG thisD.51485 => D#128ptD.0
  # DEBUG D.51486 => D#129ptD.0
  # .MEM_289 = VDEF <.MEM_138>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (prephitmp_117);
  # DEBUG thisD.49876 => &__map_allocD.51481
  # DEBUG thisD.49855 => &__map_allocD.51481
;;    succ:       67 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 67, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 66, next block 68, flags: (NEW, REACHABLE)
;;    pred:       60 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                66 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_71 = PHI <.MEM_69(60), .MEM_289(66)>
  # DEBUG D#169ptD.0 => &D#254ptD.0->_M_implD.44330
  # DEBUG thisD.51462 => D#169ptD.0
  # DEBUG thisD.51463 => D#169ptD.0
  # DEBUG thisD.51464 => D#169ptD.0
  # .MEM_137 = VDEF <.MEM_71>
  MEM[(struct  &)this_7(D) + 96] ={v} {CLOBBER};
  [LP 1] resx 2
;;    succ:       68 (EH,EXECUTABLE)

;;   basic block 68, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 67, next block 69, flags: (NEW)
;;    pred:       67 (EH,EXECUTABLE)
<L45>: [LP 1]
  goto <bb 70> (<L26>);
;;    succ:       70 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 69, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 68, next block 70, flags: (NEW)
;;    pred:       2 (EH,EXECUTABLE)
<L33>: [LP 17]
;;    succ:       70 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 70, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 69, next block 71, flags: (NEW, REACHABLE)
;;    pred:       9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                68 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                69 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_6 = PHI <.MEM_249(9), .MEM_137(68), .MEM_236(69)>
<L26>:
  # DEBUG thisD.51488 => _8
  # .MEM_295 = VDEF <.MEM_6>
  MEM[(struct ModuleD.32543 *)this_7(D)]._vptr.ModuleD.33338 = &MEM[(voidD.45 *)&_ZTV6ModuleD.33343 + 16B];
  # DEBUG D#125ptD.0 => &_8->_childrenD.33293
  # DEBUG thisD.51489 => D#125ptD.0
  # DEBUG D#119ptD.0 => &D#125ptD.0->D.33291
  # DEBUG thisD.49557 => D#119ptD.0
  # DEBUG D#122ptD.0 => D#125ptD.0->D.33291._M_implD.32782._M_finishD.32785
  # DEBUG D#121ptD.0 => D#125ptD.0->D.33291._M_implD.32782._M_startD.32784
  # DEBUG D#64ptD.0 => D#121ptD.0
  # DEBUG D#65ptD.0 => D#122ptD.0
  # DEBUG __firstD.49556 => D#64ptD.0
  # DEBUG __lastD.49555 => D#65ptD.0
  # DEBUG D.49554 => D#66ptD.0
  # DEBUG D#63ptD.0 => D#65ptD.0
  # DEBUG D#62ptD.0 => D#64ptD.0
  # DEBUG D#60ptD.0 => D#62ptD.0
  # DEBUG D#61ptD.0 => D#63ptD.0
  # DEBUG __firstD.49166 => D#60ptD.0
  # DEBUG __lastD.49165 => D#61ptD.0
  # DEBUG D#59ptD.0 => D#61ptD.0
  # DEBUG D#58ptD.0 => D#60ptD.0
  # DEBUG D#56ptD.0 => D#58ptD.0
  # DEBUG D#57ptD.0 => D#59ptD.0
  # DEBUG D.49155 => D#56ptD.0
  # DEBUG D.49154 => D#57ptD.0
  # DEBUG D#120ptD.0 => &D#125ptD.0->D.33291
  # DEBUG thisD.51490 => D#120ptD.0
  # DEBUG D#118ptD.0 => D#120ptD.0->_M_implD.32782._M_end_of_storageD.32786
  # DEBUG D#117ptD.0 => (long intD.12) D#118ptD.0
  # VUSE <.MEM_295>
  # PT = nonlocal escaped 
  _136 = MEM[(struct _Vector_baseD.32549 *)this_7(D) + 72B]._M_implD.32782._M_startD.32784;
  # DEBUG D#116ptD.0 => (long intD.12) _136
  # DEBUG D#115ptD.0 => D#117ptD.0 - D#116ptD.0
  # DEBUG D#114ptD.0 => D#115ptD.0 /[ex] 8
  # DEBUG D#111ptD.0 => D#120ptD.0
  # DEBUG D#112ptD.0 => (long unsigned intD.14) D#114ptD.0
  # DEBUG __pD.51493 => _136
  # DEBUG thisD.51491 => D#111ptD.0
  # DEBUG __nD.51492 => D#112ptD.0
  # DEBUG D#110ptD.0 => D#112ptD.0
  # DEBUG D#109ptD.0 => D#111ptD.0
  if (_136 != 0B)
    goto <bb 71>;
  else
    goto <bb 72>;
;;    succ:       71 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                72 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 71, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 70, next block 72, flags: (NEW, REACHABLE)
;;    pred:       70 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#108ptD.0 => &D#109ptD.0->_M_implD.32782
  # DEBUG D#106ptD.0 => D#108ptD.0
  # DEBUG D#107ptD.0 => D#110ptD.0
  # DEBUG __pD.51497 => _136
  # DEBUG __aD.51495 => D#106ptD.0
  # DEBUG __nD.51496 => D#107ptD.0
  # DEBUG D#105ptD.0 => D#107ptD.0
  # DEBUG D#104ptD.0 => D#106ptD.0
  # DEBUG D#102ptD.0 => D#104ptD.0
  # DEBUG D#103ptD.0 => D#105ptD.0
  # DEBUG __pD.51500 => _136
  # DEBUG thisD.51498 => D#102ptD.0
  # DEBUG D.51499 => D#103ptD.0
  # .MEM_296 = VDEF <.MEM_295>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_136);
;;    succ:       72 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 72, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 71, next block 73, flags: (NEW, REACHABLE)
;;    pred:       70 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                71 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_228 = PHI <.MEM_295(70), .MEM_296(71)>
  # DEBUG D#113ptD.0 => &D#120ptD.0->_M_implD.32782
  # DEBUG thisD.51501 => D#113ptD.0
  # DEBUG thisD.51502 => D#113ptD.0
  # DEBUG thisD.51503 => D#113ptD.0
  # .MEM_301 = VDEF <.MEM_228>
  MEM[(struct  &)this_7(D) + 72] ={v} {CLOBBER};
  # DEBUG D#124ptD.0 => &_8->_fullnameD.32546
  # DEBUG thisD.51504 => D#124ptD.0
  # DEBUG thisD.51505 => D#124ptD.0
  # DEBUG thisD.51514 => D#124ptD.0
  # VUSE <.MEM_301>
  # PT = nonlocal escaped 
  _224 = MEM[(charD.10 * *)this_7(D) + 40B];
  # DEBUG D#1ptD.0 => D#124ptD.0
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.51515 => D#124ptD.0
  # PT = nonlocal 
  _225 = &MEM[(const struct basic_stringD.3646 *)this_7(D) + 40B].D.12341._M_local_bufD.12343;
  if (_224 != _225)
    goto <bb 73>;
  else
    goto <bb 74>;
;;    succ:       73 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                74 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 73, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 72, next block 74, flags: (NEW, REACHABLE)
;;    pred:       72 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => MEM[(struct basic_stringD.3646 *)D#124ptD.0].D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.51507 => D#124ptD.0
  # DEBUG __sizeD.51506 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => D#124ptD.0
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => D#124ptD.0
  # DEBUG D#91ptD.0 => &MEM[(struct basic_stringD.3646 *)D#124ptD.0]._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.51510 => _224
  # DEBUG __aD.51508 => D#89ptD.0
  # DEBUG __nD.51509 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.51513 => _224
  # DEBUG thisD.51511 => D#85ptD.0
  # DEBUG D.51512 => D#86ptD.0
  # .MEM_302 = VDEF <.MEM_301>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_224);
;;    succ:       74 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 74, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 73, next block 75, flags: (NEW, REACHABLE)
;;    pred:       72 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                73 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_229 = PHI <.MEM_301(72), .MEM_302(73)>
  # DEBUG D#95ptD.0 => &MEM[(struct basic_stringD.3646 *)D#124ptD.0]._M_dataplusD.12321
  # DEBUG thisD.51516 => D#95ptD.0
  # DEBUG thisD.51517 => D#95ptD.0
  # DEBUG thisD.51518 => D#95ptD.0
  # .MEM_306 = VDEF <.MEM_229>
  MEM[(struct  &)this_7(D) + 40] ={v} {CLOBBER};
  # DEBUG D#123ptD.0 => &_8->_nameD.32545
  # DEBUG thisD.51519 => D#123ptD.0
  # DEBUG thisD.51520 => D#123ptD.0
  # DEBUG thisD.51529 => D#123ptD.0
  # VUSE <.MEM_306>
  # PT = nonlocal escaped 
  _226 = MEM[(charD.10 * *)this_7(D) + 8B];
  # DEBUG D#1ptD.0 => D#123ptD.0
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.51530 => D#123ptD.0
  # PT = nonlocal 
  _227 = &MEM[(const struct basic_stringD.3646 *)this_7(D) + 8B].D.12341._M_local_bufD.12343;
  if (_226 != _227)
    goto <bb 75>;
  else
    goto <bb 76>;
;;    succ:       75 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                76 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 75, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 74, next block 76, flags: (NEW, REACHABLE)
;;    pred:       74 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => MEM[(struct basic_stringD.3646 *)D#123ptD.0].D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.51522 => D#123ptD.0
  # DEBUG __sizeD.51521 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => D#123ptD.0
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => D#123ptD.0
  # DEBUG D#91ptD.0 => &MEM[(struct basic_stringD.3646 *)D#123ptD.0]._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.51525 => _226
  # DEBUG __aD.51523 => D#89ptD.0
  # DEBUG __nD.51524 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.51528 => _226
  # DEBUG thisD.51526 => D#85ptD.0
  # DEBUG D.51527 => D#86ptD.0
  # .MEM_307 = VDEF <.MEM_306>
  # USE = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  # CLB = nonlocal null { D.33343 D.44992 D.45053 D.45054 D.45059 D.45061 D.51435 D.51551 D.51552 D.51553 } (nonlocal, escaped)
  _ZdlPvD.2766 (_226);
;;    succ:       76 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 76, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 75, next block 1, flags: (NEW, REACHABLE)
;;    pred:       74 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                75 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_230 = PHI <.MEM_306(74), .MEM_307(75)>
  # DEBUG D#95ptD.0 => &MEM[(struct basic_stringD.3646 *)D#123ptD.0]._M_dataplusD.12321
  # DEBUG thisD.51531 => D#95ptD.0
  # DEBUG thisD.51532 => D#95ptD.0
  # DEBUG thisD.51533 => D#95ptD.0
  # .MEM_312 = VDEF <.MEM_230>
  MEM[(struct  &)this_7(D)] ={v} {CLOBBER};
  resx 1
;;    succ:      

}



;; Function Flit* VC::RemoveFlit() (_ZN2VC10RemoveFlitEv, funcdef_no=2147, decl_uid=44914, cgraph_uid=605, symbol_order=607)


Pass statistics:
----------------

Flit* VC::RemoveFlit() (struct VCD.43951 * const thisD.45141)
Eh tree:
   2 cleanup land:{2,<L4>}
{
  struct FlitD.32424 * * __tmp$_M_curD.51734;
  size_typeD.12304 __dnewD.51707;
  char_typeD.17540 D.51687;
  charD.10 __cD.51686;
  char_typeD.17540 D.51684;
  charD.10 __cD.51683;
  char_typeD.20619 D.51681;
  struct basic_ostreamD.4635 & D.51675;
  char_typeD.17540 D.51672;
  charD.10 __cD.51671;
  char_typeD.17540 D.51669;
  charD.10 __cD.51668;
  char_typeD.20619 D.51666;
  struct basic_ostreamD.4635 & D.51660;
  const difference_typeD.44227 __offsetD.51653;
  struct _SelfD.44228 & D.51657;
  struct _SelfD.44228 __tmpD.51646;
  struct FlitD.32424 * fD.51604;
  size_tD.3655 iD.51634;
  struct _SelfD.44228 D.51643;
  struct FlitD.32424 * fD.45143;
  const struct stringD.3647 D.45146;
  struct FlitD.32424 * * const _5;
  long intD.12 _7;
  intD.9 _8;
  intD.9 _10;
  struct FlitD.32424 * * const _13;
  struct ModuleD.32543 * _15;
  charD.10 * const _17;
  charD.10 * const _19;
  struct FlitD.32424 * * _23;
  struct FlitD.32424 * * _24;
  struct FlitD.32424 * * _25;
  struct FlitD.32424 * * _39;
  struct FlitD.32424 * * * _40;
  struct FlitD.32424 * * * _41;
  struct FlitD.32424 * * _42;
  struct FlitD.32424 * * _43;
  ePrioTypeD.44886 _45;
  struct FlitD.32424 * * * _46;
  long intD.12 _47;
  struct FlitD.32424 * * * _48;
  long intD.12 _49;
  long intD.12 _50;
  long intD.12 _51;
  long intD.12 _52;
  long intD.12 _53;
  long intD.12 _54;
  struct FlitD.32424 * * _55;
  long intD.12 _56;
  long intD.12 _57;
  long intD.12 _58;
  long intD.12 _59;
  long intD.12 _61;
  long intD.12 _62;
  long intD.12 _63;
  long intD.12 _64;
  difference_typeD.44227 _65;
  intD.9 _66;
  intD.9 _68;
  struct FlitD.32424 * * const pretmp_89;
  struct FlitD.32424 * * const prephitmp_90;
  struct FlitD.32424 * * const prephitmp_91;
  struct FlitD.32424 * * const prephitmp_92;
  long intD.12 __n.70_93;
  intD.9 _97;
  boolD.2757 _101;
  boolD.2757 _102;
  intD.9 _103;
  intD.9 _104;
  intD.9 _105;
  struct ostreamD.4636 * gWatchOut.69_106;
  struct basic_ostreamD.4635 & _107;
  const size_typeD.12304 _108;
  long intD.12 _109;
  charD.10 * const _110;
  struct basic_ostreamD.4635 & _111;
  struct basic_ostreamD.4635 & _112;
  struct basic_ostreamD.4635 & _113;
  boolD.2757 _115;
  intD.9 _116;
  intD.9 _117;
  intD.9 _118;
  struct ostreamD.4636 * gWatchOut.69_119;
  struct basic_ostreamD.4635 & _120;
  const size_typeD.12304 _121;
  long intD.12 _122;
  charD.10 * const _123;
  struct basic_ostreamD.4635 & _124;
  struct basic_ostreamD.4635 & _125;
  struct basic_ostreamD.4635 & _126;
  intD.9 _127;
  long intD.12 pretmp_128;
  struct FlitD.32424 * * _137;
  long intD.12 _138;
  intD.9 pretmp_141;
  long intD.12 _146;
  intD.9 pretmp_147;
  long unsigned intD.14 _148;
  long intD.12 iftmp.74_150;
  long unsigned intD.14 _152;
  long unsigned intD.14 _153;
  long intD.12 _154;
  long intD.12 iftmp.74_155;
  long intD.12 iftmp.74_157;
  long unsigned intD.14 __node_offset.76_158;
  long unsigned intD.14 _159;
  struct FlitD.32424 * * * _160;
  struct FlitD.32424 * * _161;
  long intD.12 _162;
  long intD.12 _163;
  long intD.12 _164;
  long unsigned intD.14 _165;
  long unsigned intD.14 _166;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _168;
  long intD.12 _169;
  sizetype _170;
  struct basic_iosD.4629 * _171;
  struct basic_ostreamD.4635 & _174;
  long intD.12 _175;
  const struct __ctype_typeD.20624 * _176;
  charD.10 _177;
  struct FlitD.32424 * * const pretmp_178;
  char_typeD.17540 _180;
  long intD.12 _181;
  unsigned long _182;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _185;
  intD.9 (*__vtbl_ptr_typeD.2760) () _186;
  voidD.45 * PROF_190;
  char_typeD.17540 _192;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _195;
  long intD.12 _196;
  sizetype _197;
  struct basic_iosD.4629 * _198;
  struct basic_ostreamD.4635 & _201;
  struct FlitD.32424 * * * _202;
  const struct __ctype_typeD.20624 * _203;
  charD.10 _204;
  char_typeD.17540 _207;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _212;
  intD.9 (*__vtbl_ptr_typeD.2760) () _213;
  voidD.45 * PROF_217;
  char_typeD.17540 _219;
  struct FlitD.32424 * * * _228;
  long intD.12 pretmp_229;
  long intD.12 pretmp_230;
  charD.10 * _231;
  long unsigned intD.14 __dnew.42_232;
  long unsigned intD.14 __dnew.42_235;
  charD.10 * const _236;
  charD.10 * _237;
  intD.9 prephitmp_238;
  size_typeD.44406 _241;
  difference_typeD.44227 _242;
  long intD.12 _249;
  long intD.12 _250;
  long intD.12 _251;
  long intD.12 _252;
  long intD.12 _254;
  long intD.12 _259;
  long intD.12 _260;
  long intD.12 _261;
  long intD.12 _262;
  intD.9 prephitmp_318;
  intD.9 pretmp_319;
  intD.9 pretmp_320;
  intD.9 prephitmp_321;
  intD.9 pretmp_322;
  intD.9 prephitmp_323;

;;   basic block 2, loop depth 0, count 0, freq 6295, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG fD.45143 => 0B
  # DEBUG D#187ptD.0 => &this_3(D)->_bufferD.44881
  # DEBUG thisD.50089 => D#187ptD.0
  # DEBUG D#17ptD.0 => &MEM[(const struct dequeD.32466 *)D#187ptD.0].D.44879._M_implD.44330._M_startD.44334
  # DEBUG D#18ptD.0 => &MEM[(const struct dequeD.32466 *)D#187ptD.0].D.44879._M_implD.44330._M_finishD.44335
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  _13 = MEM[(struct FlitD.32424 * * *)this_3(D) + 144B];
  # DEBUG D#15ptD.0 => D#18ptD.0
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  _5 = MEM[(struct FlitD.32424 * * *)this_3(D) + 112B];
  # DEBUG D#16ptD.0 => D#17ptD.0
  # DEBUG __xD.50090 => D#15ptD.0
  # DEBUG __yD.50091 => D#16ptD.0
  if (_5 != _13)
    goto <bb 3>;
  else
    goto <bb 40>;
;;    succ:       3 [99.2%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [0.8%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 6246, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [99.2%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#188ptD.0 => &this_3(D)->_bufferD.44881
  # DEBUG thisD.50094 => D#188ptD.0
  # DEBUG thisD.50095 => D#188ptD.0
  # DEBUG D#21ptD.0 => &D#188ptD.0->D.44879._M_implD.44330._M_startD.44334
  # DEBUG thisD.50097 => NULL
  # DEBUG __xD.50096 => D#21ptD.0
  # DEBUG D#31ptD.0 => MEM[(const struct iteratorD.44217 &)D#188ptD.0 + 16]._M_firstD.44230
  # DEBUG D.48942 => D#31ptD.0
  # DEBUG D#30ptD.0 => MEM[(const struct iteratorD.44217 &)D#188ptD.0 + 16]._M_lastD.44231
  # DEBUG D.48943 => D#30ptD.0
  # DEBUG D#29ptD.0 => MEM[(const struct iteratorD.44217 &)D#188ptD.0 + 16]._M_nodeD.44232
  # DEBUG D.48944 => D#29ptD.0
  # DEBUG thisD.48936 => D#28ptD.0
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  f_6 = *_5;
  # DEBUG fD.45143 => f_6
  # DEBUG D#261ptD.0 => &this_3(D)->_bufferD.44881
  # DEBUG thisD.50093 => D#261ptD.0
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  _23 = MEM[(struct dequeD.32466 *)this_3(D) + 96B].D.44879._M_implD.44330._M_startD.44334._M_lastD.44231;
  # PT = nonlocal escaped 
  _24 = _23 + 18446744073709551608;
  if (_5 != _24)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4 [93.3%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [6.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 5826, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [93.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#153ptD.0 => D#261ptD.0->D.44879._M_implD.44330._M_startD.44334._M_curD.44229
  # DEBUG D#152ptD.0 => &D#261ptD.0->D.44879._M_implD.44330
  # DEBUG D#54ptD.0 => D#152ptD.0
  # DEBUG D#55ptD.0 => D#153ptD.0
  # DEBUG __aD.49754 => D#54ptD.0
  # DEBUG __pD.49753 => D#55ptD.0
  # DEBUG D#53ptD.0 => D#55ptD.0
  # DEBUG D#52ptD.0 => D#54ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0
  # DEBUG D#51ptD.0 => D#53ptD.0
  # DEBUG thisD.49121 => D#50ptD.0
  # DEBUG __pD.49120 => D#51ptD.0
  # PT = nonlocal escaped 
  _25 = _5 + 8;
  # .MEM_28 = VDEF <.MEM_4(D)>
  MEM[(struct dequeD.32466 *)this_3(D) + 96B].D.44879._M_implD.44330._M_startD.44334._M_curD.44229 = _25;
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 420, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       3 [6.7%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.51587 => D#261ptD.0
  # DEBUG thisD.51588 => D#261ptD.0
  # DEBUG D#151ptD.0 => D#261ptD.0->D.44879._M_implD.44330._M_startD.44334._M_curD.44229
  # DEBUG D#148ptD.0 => &D#261ptD.0->D.44879
  # DEBUG thisD.49750 => D#148ptD.0
  # DEBUG D#55ptD.0 => D#151ptD.0
  # DEBUG __aD.49749 => D#54ptD.0
  # DEBUG __pD.49748 => D#55ptD.0
  # DEBUG D#53ptD.0 => D#55ptD.0
  # DEBUG D#52ptD.0 => D#54ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0
  # DEBUG D#51ptD.0 => D#53ptD.0
  # DEBUG thisD.49121 => D#50ptD.0
  # DEBUG __pD.49120 => D#51ptD.0
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  _39 = MEM[(struct dequeD.32466 *)this_3(D) + 96B].D.44879._M_implD.44330._M_startD.44334._M_firstD.44230;
  # DEBUG D#150ptD.0 => &D#261ptD.0->D.44879
  # DEBUG D#145ptD.0 => D#150ptD.0
  # DEBUG __pD.51590 => _39
  # DEBUG thisD.51589 => D#145ptD.0
  # DEBUG D#144ptD.0 => D#145ptD.0
  # DEBUG __sizeD.49700 => 8
  # DEBUG D#143ptD.0 => &D#144ptD.0->_M_implD.44330
  # DEBUG D#141ptD.0 => D#143ptD.0
  # DEBUG __pD.51594 => _39
  # DEBUG __aD.51592 => D#141ptD.0
  # DEBUG __nD.51593 => D#142ptD.0
  # DEBUG D#140ptD.0 => D#142ptD.0
  # DEBUG D#139ptD.0 => D#141ptD.0
  # DEBUG D#137ptD.0 => D#139ptD.0
  # DEBUG D#138ptD.0 => D#140ptD.0
  # DEBUG __pD.51597 => _39
  # DEBUG thisD.51595 => D#137ptD.0
  # DEBUG D.51596 => D#138ptD.0
  # .MEM_243 = VDEF <.MEM_4(D)>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZdlPvD.2766 (_39);
  # VUSE <.MEM_243>
  # PT = nonlocal escaped 
  _40 = MEM[(struct dequeD.32466 *)this_3(D) + 96B].D.44879._M_implD.44330._M_startD.44334._M_nodeD.44232;
  # PT = nonlocal escaped 
  _41 = _40 + 8;
  # DEBUG D#149ptD.0 => &D#261ptD.0->D.44879._M_implD.44330._M_startD.44334
  # DEBUG thisD.51599 => D#149ptD.0
  # DEBUG __new_nodeD.51598 => _41
  # .MEM_244 = VDEF <.MEM_243>
  MEM[(struct _Deque_iteratorD.44197 *)this_3(D) + 112B]._M_nodeD.44232 = _41;
  # VUSE <.MEM_244>
  # PT = nonlocal escaped 
  _42 = MEM[(struct FlitD.32424 * * *)_40 + 8B];
  # .MEM_245 = VDEF <.MEM_244>
  MEM[(struct _Deque_iteratorD.44197 *)this_3(D) + 112B]._M_firstD.44230 = _42;
  # DEBUG __sizeD.49022 => 8
  # PT = nonlocal escaped 
  _43 = _42 + 512;
  # .MEM_246 = VDEF <.MEM_245>
  MEM[(struct _Deque_iteratorD.44197 *)this_3(D) + 112B]._M_lastD.44231 = _43;
  # .MEM_247 = VDEF <.MEM_246>
  MEM[(struct dequeD.32466 *)this_3(D) + 96B].D.44879._M_implD.44330._M_startD.44334._M_curD.44229 = _42;
  # VUSE <.MEM_247>
  pretmp_89 = MEM[(struct FlitD.32424 * * *)this_3(D) + 144B];
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 6246, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_22 = PHI <.MEM_247(5), .MEM_28(4)>
  # PT = nonlocal escaped 
  # prephitmp_90 = PHI <pretmp_89(5), _13(4)>
  # PT = nonlocal escaped 
  # prephitmp_91 = PHI <_42(5), _25(4)>
  # PT = nonlocal escaped 
  # prephitmp_92 = PHI <_43(5), _23(4)>
  # VUSE <.MEM_22>
  _8 = f_6->idD.32441;
  # .MEM_9 = VDEF <.MEM_22>
  this_3(D)->_last_idD.44897 = _8;
  # VUSE <.MEM_9>
  _10 = f_6->pidD.32442;
  # .MEM_11 = VDEF <.MEM_9>
  this_3(D)->_last_pidD.44898 = _10;
  # DEBUG thisD.51600 => this_3(D)
  # DEBUG D#76ptD.0 => &this_3(D)->_bufferD.44881
  # DEBUG thisD.49261 => D#76ptD.0
  # DEBUG D#17ptD.0 => &MEM[(const struct dequeD.32466 *)D#76ptD.0].D.44879._M_implD.44330._M_startD.44334
  # DEBUG D#18ptD.0 => &MEM[(const struct dequeD.32466 *)D#76ptD.0].D.44879._M_implD.44330._M_finishD.44335
  # DEBUG D#15ptD.0 => D#18ptD.0
  # DEBUG D#16ptD.0 => D#17ptD.0
  # DEBUG __xD.49262 => D#15ptD.0
  # DEBUG __yD.49263 => D#16ptD.0
  if (prephitmp_90 == prephitmp_91)
    goto <bb 44>;
  else
    goto <bb 7>;
;;    succ:       44 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 5612, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11>
  _45 = this_3(D)->_pri_typeD.44892;
  if (_45 == 1)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [19.9%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [80.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 1117, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [19.9%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#77ptD.0 => &this_3(D)->_bufferD.44881
  # DEBUG thisD.51601 => D#77ptD.0
  # DEBUG D#41ptD.0 => &MEM[(const struct dequeD.32466 *)D#77ptD.0].D.44879._M_implD.44330._M_startD.44334
  # DEBUG D#42ptD.0 => &MEM[(const struct dequeD.32466 *)D#77ptD.0].D.44879._M_implD.44330._M_finishD.44335
  # DEBUG __xD.51603 => D#42ptD.0
  # DEBUG __yD.51602 => D#41ptD.0
  # DEBUG __sizeD.49022 => 8
  # VUSE <.MEM_11>
  # PT = nonlocal escaped 
  _46 = MEM[(const struct _Deque_iteratorD.44197 &)this_3(D) + 144]._M_nodeD.44232;
  _47 = (long intD.12) _46;
  # VUSE <.MEM_11>
  # PT = nonlocal escaped 
  _48 = MEM[(const struct _Deque_iteratorD.44197 &)this_3(D) + 112]._M_nodeD.44232;
  _49 = (long intD.12) _48;
  _50 = _47 - _49;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _51 = _50 /[ex] 8;
  # RANGE [-1152921504606846977, 1152921504606846974]
  _52 = _51 + -1;
  # RANGE [-9223372036854775808, 9223372036854775807] NONZERO 18446744073709551552
  _53 = _52 * 64;
  _54 = (long intD.12) prephitmp_90;
  # VUSE <.MEM_11>
  # PT = nonlocal escaped 
  _55 = MEM[(const struct _Deque_iteratorD.44197 &)this_3(D) + 144]._M_firstD.44230;
  _56 = (long intD.12) _55;
  _57 = _54 - _56;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _58 = _57 /[ex] 8;
  _59 = _53 + _58;
  _61 = (long intD.12) prephitmp_92;
  _62 = (long intD.12) prephitmp_91;
  _63 = _61 - _62;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _64 = _63 /[ex] 8;
  _65 = _59 + _64;
  _66 = (intD.9) _65;
  # .MEM_248 = VDEF <.MEM_11>
  this_3(D)->_priD.44893 = _66;
  goto <bb 44>;
;;    succ:       44 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 4495, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       7 [80.1%]  (FALSE_VALUE,EXECUTABLE)
  if (_45 != 3)
    goto <bb 10>;
  else
    goto <bb 44>;
;;    succ:       10 [80.1%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [19.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 3600, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [80.1%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#78ptD.0 => &this_3(D)->_bufferD.44881
  # DEBUG thisD.49269 => D#78ptD.0
  # DEBUG thisD.49270 => D#78ptD.0
  # DEBUG D#21ptD.0 => &D#78ptD.0->D.44879._M_implD.44330._M_startD.44334
  # DEBUG thisD.49272 => NULL
  # DEBUG __xD.49271 => D#21ptD.0
  # DEBUG D#31ptD.0 => MEM[(const struct iteratorD.44217 &)D#78ptD.0 + 16]._M_firstD.44230
  # DEBUG D.48942 => D#31ptD.0
  # DEBUG D#30ptD.0 => MEM[(const struct iteratorD.44217 &)D#78ptD.0 + 16]._M_lastD.44231
  # DEBUG D.48943 => D#30ptD.0
  # DEBUG D#29ptD.0 => MEM[(const struct iteratorD.44217 &)D#78ptD.0 + 16]._M_nodeD.44232
  # DEBUG D.48944 => D#29ptD.0
  # DEBUG thisD.48936 => D#28ptD.0
  # VUSE <.MEM_11>
  # PT = nonlocal escaped 
  f_67 = *prephitmp_91;
  # DEBUG fD.51604 => f_67
  if (_45 != 0)
    goto <bb 11>;
  else
    goto <bb 32>;
;;    succ:       11 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 1800, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11>
  _68 = this_3(D)->_priority_donationD.44894;
  if (_68 != 0)
    goto <bb 12>;
  else
    goto <bb 32>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG iD.51634 => 1
  # DEBUG dfD.51619 => f_67
  # DEBUG D#80ptD.0 => &this_3(D)->_bufferD.44881
  # DEBUG thisD.51635 => D#80ptD.0
  # DEBUG D#41ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_startD.44334
  # DEBUG D#42ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_finishD.44335
  # DEBUG __xD.51637 => D#42ptD.0
  # DEBUG __yD.51636 => D#41ptD.0
  # DEBUG __sizeD.49022 => 8
  # VUSE <.MEM_11>
  # PT = nonlocal escaped 
  _228 = MEM[(const struct _Deque_iteratorD.44197 &)this_3(D) + 144]._M_nodeD.44232;
  _7 = (long intD.12) _228;
  # VUSE <.MEM_11>
  # PT = nonlocal escaped 
  _202 = MEM[(const struct _Deque_iteratorD.44197 &)this_3(D) + 112]._M_nodeD.44232;
  _249 = (long intD.12) _202;
  _250 = _7 - _249;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _251 = _250 /[ex] 8;
  # RANGE [-1152921504606846977, 1152921504606846974]
  _252 = _251 + -1;
  # RANGE [-9223372036854775808, 9223372036854775807] NONZERO 18446744073709551552
  _259 = _252 * 64;
  _260 = (long intD.12) prephitmp_90;
  # VUSE <.MEM_11>
  # PT = nonlocal escaped 
  _137 = MEM[(const struct _Deque_iteratorD.44197 &)this_3(D) + 144]._M_firstD.44230;
  _261 = (long intD.12) _137;
  _138 = _260 - _261;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _262 = _138 /[ex] 8;
  _254 = _259 + _262;
  _162 = (long intD.12) prephitmp_92;
  _175 = (long intD.12) prephitmp_91;
  _146 = _162 - _175;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _181 = _146 /[ex] 8;
  _242 = _181 + _254;
  # RANGE [0, 18446744073709551615]
  _241 = (size_typeD.44406) _242;
  if (_241 > 1)
    goto <bb 13>;
  else
    goto <bb 32>;
;;    succ:       13 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       12 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11>
  # PT = nonlocal escaped 
  pretmp_178 = MEM[(const struct iteratorD.44217 &)this_3(D) + 112]._M_firstD.44230;
  pretmp_128 = (long intD.12) pretmp_178;
  pretmp_229 = _175 - pretmp_128;
  pretmp_230 = pretmp_229 /[ex] 8;
  # VUSE <.MEM_11>
  pretmp_322 = f_67->priD.32446;
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                21 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_301 = PHI <.MEM_11(13), .MEM_264(21)>
  # RANGE [1, 18446744073709551615]
  # i_184 = PHI <1(13), i_100(21)>
  # PT = nonlocal escaped 
  # f_187 = PHI <f_67(13), f_130(21)>
  # prephitmp_323 = PHI <pretmp_322(13), prephitmp_318(21)>
  # DEBUG iD.51634 => i_184
  # DEBUG dfD.51619 => f_187
  # DEBUG D#80ptD.0 => &this_3(D)->_bufferD.44881
  # DEBUG thisD.51635 => D#80ptD.0
  # DEBUG D#41ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_startD.44334
  # DEBUG D#42ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_finishD.44335
  # DEBUG __xD.51637 => D#42ptD.0
  # DEBUG __yD.51636 => D#41ptD.0
  # DEBUG __sizeD.49022 => 8
  # DEBUG D#79ptD.0 => &this_3(D)->_bufferD.44881
  # DEBUG thisD.51640 => D#79ptD.0
  # DEBUG __nD.51639 => i_184
  # RANGE ~[-1, 0]
  __n.70_93 = (long intD.12) i_184;
  # DEBUG D#260ptD.0 => &MEM[(struct dequeD.32466 *)this_3(D) + 96B].D.44879._M_implD.44330._M_startD.44334
  # DEBUG thisD.51642 => D#260ptD.0
  # DEBUG __nD.51641 => __n.70_93
  # DEBUG thisD.51644 => D#260ptD.0
  # DEBUG __nD.51645 => __n.70_93
  # DEBUG thisD.51648 => &__tmpD.51646
  # DEBUG __xD.51647 => D#260ptD.0
  # DEBUG thisD.51651 => &__tmpD.51646
  # DEBUG __nD.51652 => __n.70_93
  __offset_145 = __n.70_93 + pretmp_230;
  # DEBUG __offsetD.51653 => __offset_145
  # DEBUG __sizeD.49022 => 8
  _182 = (unsigned long) __offset_145;
  if (_182 <= 63)
    goto <bb 48>;
  else
    goto <bb 49>;
;;    succ:       48 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                49 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 1, count 0, freq 4052, maybe hot
;;   Invalid sum of incoming frequencies 4218, should be 4052
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       49 [73.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __sizeD.49022 => 8
  # RANGE [0, 144115188075855871] NONZERO 144115188075855871
  iftmp.74_150 = __offset_145 >> 6;
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 1, count 0, freq 1499, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       49 [27.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE ~[9223372036854775808, 18446744073709551614]
  _152 = ~_182;
  # DEBUG __sizeD.49022 => 8
  # RANGE [0, 288230376151711743] NONZERO 288230376151711743
  _153 = _152 >> 6;
  # RANGE [0, 288230376151711743] NONZERO 288230376151711743
  _154 = (long intD.12) _153;
  # RANGE [-288230376151711744, -1]
  iftmp.74_155 = ~_154;
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 5551, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       15 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                16 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [-288230376151711744, 144115188075855871]
  # iftmp.74_157 = PHI <iftmp.74_150(15), iftmp.74_155(16)>
  # DEBUG __node_offsetD.51654 => iftmp.74_157
  # RANGE ~[144115188075855872, 18158513697557839871]
  __node_offset.76_158 = (long unsigned intD.14) iftmp.74_157;
  # RANGE [0, 18446744073709551608] NONZERO 18446744073709551608
  _159 = __node_offset.76_158 * 8;
  # PT = nonlocal escaped 
  _160 = _202 + _159;
  # DEBUG thisD.51656 => &__tmpD.51646
  # DEBUG __new_nodeD.51655 => _160
  # VUSE <.MEM_301>
  # PT = nonlocal escaped 
  _161 = *_160;
  # DEBUG __sizeD.49022 => 8
  # DEBUG __sizeD.49022 => 8
  # RANGE [-9223372036854775808, 9223372036854775744] NONZERO 18446744073709551552
  _163 = iftmp.74_157 * 64;
  _164 = __offset_145 - _163;
  # RANGE [0, 18446744073709551615]
  _165 = (long unsigned intD.14) _164;
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _166 = _165 * 8;
  # PT = nonlocal escaped 
  __tmp$_M_cur_167 = _161 + _166;
  # DEBUG __tmp$_M_curD.51734 => __tmp$_M_cur_167
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       48 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __tmp$_M_cur_253 = PHI <__tmp$_M_cur_149(48), __tmp$_M_cur_167(17)>
  # DEBUG __tmp$_M_curD.51734 => __tmp$_M_cur_253
  # DEBUG thisD.51650 => &D.51643
  # DEBUG __xD.51649 => NULL
  # .MEM_263 = VDEF <.MEM_301>
  __tmpD.51646 ={v} {CLOBBER};
  # DEBUG D#28ptD.0 => &D.51643
  # DEBUG thisD.49253 => D#28ptD.0
  # .MEM_264 = VDEF <.MEM_263>
  D.51643 ={v} {CLOBBER};
  # VUSE <.MEM_264>
  # PT = nonlocal escaped 
  f_96 = *__tmp$_M_cur_253;
  # DEBUG bfD.51638 => f_96
  # VUSE <.MEM_264>
  _97 = f_96->priD.32446;
  if (_97 > prephitmp_323)
    goto <bb 19>;
  else
    goto <bb 20>;
;;    succ:       19 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       18 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       18 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # f_130 = PHI <f_187(18), f_96(19)>
  # prephitmp_318 = PHI <prephitmp_323(18), _97(19)>
  # DEBUG dfD.51619 => f_130
  # RANGE [2, 18446744073709551615]
  i_100 = i_184 + 1;
  # DEBUG iD.51634 => i_100
  # DEBUG iD.51634 => i_100
  # DEBUG dfD.51619 => f_130
  # DEBUG D#80ptD.0 => &this_3(D)->_bufferD.44881
  # DEBUG thisD.51635 => D#80ptD.0
  # DEBUG D#41ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_startD.44334
  # DEBUG D#42ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_finishD.44335
  # DEBUG __xD.51637 => D#42ptD.0
  # DEBUG __yD.51636 => D#41ptD.0
  # DEBUG __sizeD.49022 => 8
  if (i_100 < _241)
    goto <bb 21>;
  else
    goto <bb 22>;
;;    succ:       21 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       20 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # f_316 = PHI <f_130(20)>
  if (f_67 != f_316)
    goto <bb 23>;
  else
    goto <bb 32>;
;;    succ:       23 [93.4%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [6.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       22 [93.4%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_264>
  _101 = f_316->watchD.32448;
  if (_101 != 0)
    goto <bb 25>;
  else
    goto <bb 24>;
;;    succ:       25 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 543, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_264>
  _102 = f_67->watchD.32448;
  if (_102 != 0)
    goto <bb 25>;
  else
    goto <bb 39>;
;;    succ:       25 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 493, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       24 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_264>
  _103 = f_67->idD.32441;
  # VUSE <.MEM_264>
  _104 = f_316->idD.32441;
  # DEBUG D#81ptD.0 => &this_3(D)->D.44977
  # DEBUG thisD.49310 => D#81ptD.0
  # .MEM_265 = VDEF <.MEM_264>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _105 = _Z10GetSimTimevD.26752 ();
  # VUSE <.MEM_265>
  # PT = nonlocal escaped 
  gWatchOut.69_106 = gWatchOutD.26762;
  # .MEM_266 = VDEF <.MEM_265>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _107 = _ZNSolsEiD.21315 (gWatchOut.69_106, _105);
  # DEBUG __outD.51621 => _107
  # DEBUG __sD.51620 => " | "
  # DEBUG __sD.49308 => " | "
  # .MEM_267 = VDEF <.MEM_266>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_107, " | ", 3);
  # DEBUG __osD.51623 => _107
  # DEBUG __strD.51622 => NULL
  # VUSE <.MEM_267>
  _108 = MEM[(long unsigned intD.14 *)this_3(D) + 48B];
  # DEBUG thisD.48751 => D#2ptD.0
  _109 = (long intD.12) _108;
  # DEBUG thisD.48748 => NULL
  # VUSE <.MEM_267>
  # PT = nonlocal escaped 
  _110 = MEM[(charD.10 * *)this_3(D) + 40B];
  # DEBUG thisD.48667 => D#1ptD.0
  # .MEM_268 = VDEF <.MEM_267>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _111 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_107, _110, _109);
  # DEBUG __outD.51625 => _111
  # DEBUG __sD.51624 => " | "
  # DEBUG __sD.49301 => " | "
  # .MEM_269 = VDEF <.MEM_268>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_111, " | ", 3);
  # DEBUG __outD.51627 => _111
  # DEBUG __sD.51626 => "Flit "
  # DEBUG __sD.49297 => "Flit "
  # .MEM_270 = VDEF <.MEM_269>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_111, "Flit ", 5);
  # .MEM_271 = VDEF <.MEM_270>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _112 = _ZNSolsEiD.21315 (_111, _104);
  # DEBUG __outD.51629 => _112
  # DEBUG __sD.51628 => " donates priority to flit "
  # DEBUG __sD.49293 => " donates priority to flit "
  # .MEM_272 = VDEF <.MEM_271>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_112, " donates priority to flit ", 26);
  # .MEM_273 = VDEF <.MEM_272>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _113 = _ZNSolsEiD.21315 (_112, _103);
  # DEBUG __outD.51631 => _113
  # DEBUG __sD.51630 => "."
  # DEBUG __sD.49289 => "."
  # .MEM_274 = VDEF <.MEM_273>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_113, ".", 1);
  # DEBUG thisD.51633 => _113
  # DEBUG __pfD.51632 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.21447
  # DEBUG __osD.51658 => _113
  # VUSE <.MEM_274>
  # PT = nonlocal escaped null { D.45146 D.51707 } (escaped)
  _168 = _113->_vptr.basic_ostreamD.21407;
  # VUSE <.MEM_274>
  _169 = MEM[(long intD.12 *)_168 + -24B];
  # RANGE [0, 18446744073709551615]
  _170 = (sizetype) _169;
  # PT = nonlocal escaped 
  _171 = _113 + _170;
  # DEBUG thisD.51661 => _171
  # DEBUG __cD.51662 => 10
  # VUSE <.MEM_274>
  # PT = nonlocal escaped 
  _176 = MEM[(const struct basic_iosD.4629 *)_171]._M_ctypeD.20631;
  # DEBUG __fD.51663 => _176
  if (_176 == 0B)
    goto <bb 26>;
  else
    goto <bb 27>;
;;    succ:       26 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 0
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       25 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_317 = PHI <.MEM_274(25), .MEM_293(33)>
  # .MEM_283 = VDEF <.MEM_317>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZSt16__throw_bad_castvD.4760 ();
;;    succ:      

;;   basic block 27, loop depth 0, count 0, freq 493, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       25 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.51665 => _176
  # DEBUG __cD.51664 => 10
  # VUSE <.MEM_274>
  _177 = MEM[(const struct ctypeD.7865 *)_176]._M_widen_okD.17546;
  if (_177 != 0)
    goto <bb 28>;
  else
    goto <bb 29>;
;;    succ:       28 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 301, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       27 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_274>
  _180 = MEM[(const struct ctypeD.7865 *)_176]._M_widenD.17547[10];
  pretmp_319 = (intD.9) _180;
  goto <bb 31>;
;;    succ:       31 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 192, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       27 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.51667 => _176
  # DEBUG __cD.51668 => 10
  # .MEM_275 = VDEF <.MEM_274>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.17654 (_176);
  # VUSE <.MEM_275>
  # PT = nonlocal escaped 
  _185 = MEM[(const struct ctypeD.7865 *)_176].D.17687._vptr.facetD.14305;
  # VUSE <.MEM_275>
  # PT = nonlocal escaped 
  _186 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_185 + 48B];
  # PT = anything 
  PROF_190 = [obj_type_ref] OBJ_TYPE_REF(_186;(const struct ctypeD.7865)_176->6);
  if (PROF_190 == _ZNKSt5ctypeIcE8do_widenEcD.17635)
    goto <bb 31>;
  else
    goto <bb 30>;
;;    succ:       31 [83.3%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [16.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 32, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [16.7%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_276 = VDEF <.MEM_275>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _192 = OBJ_TYPE_REF(_186;(const struct ctypeD.7865)_176->6) (_176, 10);
  pretmp_320 = (intD.9) _192;
;;    succ:       31 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 493, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       28 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                29 [83.3%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_216 = PHI <.MEM_274(28), .MEM_275(29), .MEM_276(30)>
  # RANGE [-128, 127]
  # prephitmp_321 = PHI <pretmp_319(28), 10(29), pretmp_320(30)>
  # .MEM_280 = VDEF <.MEM_216>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _174 = _ZNSo3putEcD.21342 (_113, prephitmp_321);
  # DEBUG __osD.51659 => _174
  # .MEM_281 = VDEF <.MEM_280>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZNSo5flushEvD.21353 (_174);
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 3328, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       10 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                22 [6.6%]  (FALSE_VALUE,EXECUTABLE)
;;                12 [9.0%]  (FALSE_VALUE,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # f_114 = PHI <f_67(10), f_67(11), f_316(22), f_67(12), f_316(31)>
  # .MEM_189 = PHI <.MEM_11(10), .MEM_11(11), .MEM_264(22), .MEM_11(12), .MEM_281(31)>
  # DEBUG fD.51604 => f_114
  # VUSE <.MEM_189>
  _115 = f_114->watchD.32448;
  if (_115 != 0)
    goto <bb 33>;
  else
    goto <bb 39>;
;;    succ:       33 [31.4%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [68.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 1044, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       32 [31.4%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_189>
  _116 = f_114->priD.32446;
  # VUSE <.MEM_189>
  _117 = f_114->idD.32441;
  # DEBUG D#82ptD.0 => &this_3(D)->D.44977
  # DEBUG thisD.49338 => D#82ptD.0
  # .MEM_284 = VDEF <.MEM_189>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _118 = _Z10GetSimTimevD.26752 ();
  # VUSE <.MEM_284>
  # PT = nonlocal escaped 
  gWatchOut.69_119 = gWatchOutD.26762;
  # .MEM_285 = VDEF <.MEM_284>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _120 = _ZNSolsEiD.21315 (gWatchOut.69_119, _118);
  # DEBUG __outD.51606 => _120
  # DEBUG __sD.51605 => " | "
  # DEBUG __sD.49336 => " | "
  # .MEM_286 = VDEF <.MEM_285>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_120, " | ", 3);
  # DEBUG __osD.51608 => _120
  # DEBUG __strD.51607 => NULL
  # VUSE <.MEM_286>
  _121 = MEM[(long unsigned intD.14 *)this_3(D) + 48B];
  # DEBUG thisD.48751 => D#2ptD.0
  _122 = (long intD.12) _121;
  # DEBUG thisD.48748 => NULL
  # VUSE <.MEM_286>
  # PT = nonlocal escaped 
  _123 = MEM[(charD.10 * *)this_3(D) + 40B];
  # DEBUG thisD.48667 => D#1ptD.0
  # .MEM_287 = VDEF <.MEM_286>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _124 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_120, _123, _122);
  # DEBUG __outD.51610 => _124
  # DEBUG __sD.51609 => " | "
  # DEBUG __sD.49329 => " | "
  # .MEM_288 = VDEF <.MEM_287>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_124, " | ", 3);
  # DEBUG __outD.51612 => _124
  # DEBUG __sD.51611 => "Flit "
  # DEBUG __sD.49325 => "Flit "
  # .MEM_289 = VDEF <.MEM_288>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_124, "Flit ", 5);
  # .MEM_290 = VDEF <.MEM_289>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _125 = _ZNSolsEiD.21315 (_124, _117);
  # DEBUG __outD.51614 => _125
  # DEBUG __sD.51613 => " sets priority to "
  # DEBUG __sD.49321 => " sets priority to "
  # .MEM_291 = VDEF <.MEM_290>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_125, " sets priority to ", 18);
  # .MEM_292 = VDEF <.MEM_291>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _126 = _ZNSolsEiD.21315 (_125, _116);
  # DEBUG __outD.51616 => _126
  # DEBUG __sD.51615 => "."
  # DEBUG __sD.49317 => "."
  # .MEM_293 = VDEF <.MEM_292>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_126, ".", 1);
  # DEBUG thisD.51618 => _126
  # DEBUG __pfD.51617 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.21447
  # DEBUG __osD.51673 => _126
  # VUSE <.MEM_293>
  # PT = nonlocal escaped null { D.45146 D.51707 } (escaped)
  _195 = _126->_vptr.basic_ostreamD.21407;
  # VUSE <.MEM_293>
  _196 = MEM[(long intD.12 *)_195 + -24B];
  # RANGE [0, 18446744073709551615]
  _197 = (sizetype) _196;
  # PT = nonlocal escaped 
  _198 = _126 + _197;
  # DEBUG thisD.51676 => _198
  # DEBUG __cD.51677 => 10
  # VUSE <.MEM_293>
  # PT = nonlocal escaped 
  _203 = MEM[(const struct basic_iosD.4629 *)_198]._M_ctypeD.20631;
  # DEBUG __fD.51678 => _203
  if (_203 == 0B)
    goto <bb 26>;
  else
    goto <bb 34>;
;;    succ:       26 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 1044, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       33 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.51680 => _203
  # DEBUG __cD.51679 => 10
  # VUSE <.MEM_293>
  _204 = MEM[(const struct ctypeD.7865 *)_203]._M_widen_okD.17546;
  if (_204 != 0)
    goto <bb 35>;
  else
    goto <bb 36>;
;;    succ:       35 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 637, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       34 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_293>
  _207 = MEM[(const struct ctypeD.7865 *)_203]._M_widenD.17547[10];
  pretmp_141 = (intD.9) _207;
  goto <bb 38>;
;;    succ:       38 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 407, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       34 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.51682 => _203
  # DEBUG __cD.51683 => 10
  # .MEM_294 = VDEF <.MEM_293>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.17654 (_203);
  # VUSE <.MEM_294>
  # PT = nonlocal escaped 
  _212 = MEM[(const struct ctypeD.7865 *)_203].D.17687._vptr.facetD.14305;
  # VUSE <.MEM_294>
  # PT = nonlocal escaped 
  _213 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_212 + 48B];
  # PT = anything 
  PROF_217 = [obj_type_ref] OBJ_TYPE_REF(_213;(const struct ctypeD.7865)_203->6);
  if (PROF_217 == _ZNKSt5ctypeIcE8do_widenEcD.17635)
    goto <bb 38>;
  else
    goto <bb 37>;
;;    succ:       38 [82.5%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [17.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 71, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       36 [17.5%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_295 = VDEF <.MEM_294>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _219 = OBJ_TYPE_REF(_213;(const struct ctypeD.7865)_203->6) (_203, 10);
  pretmp_147 = (intD.9) _219;
;;    succ:       38 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 1044, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       35 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                36 [82.5%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_239 = PHI <.MEM_293(35), .MEM_294(36), .MEM_295(37)>
  # RANGE [-128, 127]
  # prephitmp_238 = PHI <pretmp_141(35), 10(36), pretmp_147(37)>
  # .MEM_299 = VDEF <.MEM_239>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _201 = _ZNSo3putEcD.21342 (_126, prephitmp_238);
  # DEBUG __osD.51674 => _201
  # .MEM_300 = VDEF <.MEM_299>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZNSo5flushEvD.21353 (_201);
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 3599, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       32 [68.6%]  (FALSE_VALUE,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                24 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_240 = PHI <.MEM_189(32), .MEM_300(38), .MEM_264(24)>
  # PT = nonlocal escaped 
  # f_258 = PHI <f_114(32), f_114(38), f_316(24)>
  # VUSE <.MEM_240>
  _127 = f_258->priD.32446;
  # .MEM_303 = VDEF <.MEM_240>
  this_3(D)->_priD.44893 = _127;
  goto <bb 44>;
;;    succ:       44 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 40, loop depth 0, count 0, freq 50, maybe hot
;;    prev block 39, next block 41, flags: (NEW, REACHABLE)
;;    pred:       2 [0.8%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#27ptD.0 => &D.45145
  # DEBUG thisD.50099 => D#27ptD.0
  # DEBUG D#26ptD.0 => D#27ptD.0
  # DEBUG thisD.48915 => D#26ptD.0
  # DEBUG D#186ptD.0 => &D.45145
  # DEBUG thisD.51688 => &D.45146
  # DEBUG __sD.51689 => "Trying to remove flit from empty buffer."
  # DEBUG __aD.51690 => D#186ptD.0
  # DEBUG D#185ptD.0 => D#186ptD.0
  # DEBUG thisD.51700 => &D.45146
  # DEBUG D#183ptD.0 => &D.45146._M_dataplusD.12321
  # DEBUG D#72ptD.0 => D#185ptD.0
  # DEBUG thisD.51703 => D#183ptD.0
  # DEBUG __datD.51702 => &D.45146.D.12341._M_local_bufD.12343
  # DEBUG __aD.51701 => D#72ptD.0
  # DEBUG D#71ptD.0 => D#72ptD.0
  # DEBUG D#69ptD.0 => D#183ptD.0
  # DEBUG D#70ptD.0 => D#71ptD.0
  # DEBUG thisD.49205 => D#69ptD.0
  # DEBUG __aD.49206 => D#70ptD.0
  # DEBUG D#68ptD.0 => D#70ptD.0
  # DEBUG D#67ptD.0 => D#69ptD.0
  # DEBUG thisD.49187 => D#67ptD.0
  # DEBUG D.49188 => D#68ptD.0
  # .MEM_304 = VDEF <.MEM_4(D)>
  MEM[(struct _Alloc_hiderD.12320 *)&D.45146]._M_pD.12327 = &D.45146.D.12341._M_local_bufD.12343;
  # DEBUG __sD.51699 => "Trying to remove flit from empty buffer."
  # DEBUG thisD.51693 => &D.45146
  # DEBUG __begD.51692 => "Trying to remove flit from empty buffer."
  # DEBUG __endD.51691 => &MEM[(voidD.45 *)"Trying to remove flit from empty buffer." + 40B]
  # DEBUG thisD.51697 => &D.45146
  # DEBUG __begD.51696 => "Trying to remove flit from empty buffer."
  # DEBUG __endD.51695 => &MEM[(voidD.45 *)"Trying to remove flit from empty buffer." + 40B]
  # DEBUG thisD.51704 => &D.45146
  # DEBUG __begD.51705 => "Trying to remove flit from empty buffer."
  # DEBUG __endD.51706 => &MEM[(voidD.45 *)"Trying to remove flit from empty buffer." + 40B]
  # DEBUG __ptrD.50223 => "Trying to remove flit from empty buffer."
  # DEBUG __firstD.51730 => "Trying to remove flit from empty buffer."
  # DEBUG __lastD.51729 => &MEM[(voidD.45 *)"Trying to remove flit from empty buffer." + 40B]
  # DEBUG D#189ptD.0 => &__firstD.51730
  # DEBUG D.50152 => D#189ptD.0
  # DEBUG __firstD.51732 => "Trying to remove flit from empty buffer."
  # DEBUG __lastD.51731 => &MEM[(voidD.45 *)"Trying to remove flit from empty buffer." + 40B]
  # .MEM_305 = VDEF <.MEM_304>
  __dnewD.51707 = 40;
  # .MEM_306 = VDEF <.MEM_305>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _231 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.12365 (&D.45146, &__dnewD.51707, 0);
  # DEBUG D#7ptD.0 => &D.45146
  # DEBUG __pD.51726 => _231
  # DEBUG thisD.51725 => D#7ptD.0
  # .MEM_307 = VDEF <.MEM_306>
  MEM[(charD.10 * *)&D.45146] = _231;
  # VUSE <.MEM_307>
  __dnew.42_232 = __dnewD.51707;
  # DEBUG D#8ptD.0 => &D.45146
  # DEBUG __capacityD.51728 => __dnew.42_232
  # DEBUG thisD.51727 => D#8ptD.0
  # .MEM_308 = VDEF <.MEM_307>
  MEM[(size_typeD.12304 *)&D.45146 + 16B] = __dnew.42_232;
  # DEBUG D#1ptD.0 => &D.45146
  # DEBUG thisD.50197 => D#1ptD.0
  # DEBUG __pD.51710 => _231
  # DEBUG __k1D.51709 => "Trying to remove flit from empty buffer."
  # DEBUG __k2D.51708 => &MEM[(voidD.45 *)"Trying to remove flit from empty buffer." + 40B]
  # DEBUG __dD.51713 => _231
  # DEBUG __sD.51712 => "Trying to remove flit from empty buffer."
  # DEBUG __nD.51711 => 40
  # DEBUG __s1D.51716 => _231
  # DEBUG __s2D.51715 => "Trying to remove flit from empty buffer."
  # DEBUG __nD.51714 => 40
  # .MEM_310 = VDEF <.MEM_308>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  memcpyD.992 (_231, "Trying to remove flit from empty buffer.", 40);
  # VUSE <.MEM_310>
  __dnew.42_235 = __dnewD.51707;
  # DEBUG thisD.51720 => &D.45146
  # DEBUG __nD.51719 => __dnew.42_235
  # DEBUG D#9ptD.0 => &D.45146
  # DEBUG __lengthD.51722 => __dnew.42_235
  # DEBUG thisD.51721 => D#9ptD.0
  # .MEM_311 = VDEF <.MEM_310>
  MEM[(size_typeD.12304 *)&D.45146 + 8B] = __dnew.42_235;
  # VUSE <.MEM_311>
  # PT = nonlocal escaped null { D.45146 } (escaped)
  _236 = MEM[(charD.10 * *)&D.45146];
  # DEBUG D#1ptD.0 => &D.45146
  # DEBUG thisD.48775 => D#1ptD.0
  # PT = nonlocal escaped null { D.45146 } (escaped)
  _237 = _236 + __dnew.42_235;
  # DEBUG __c1D.51724 => _237
  # DEBUG __c2D.51723 => D#10ptD.0
  # .MEM_312 = VDEF <.MEM_311>
  MEM[(char_typeD.7431 &)_237] = 0;
  # .MEM_313 = VDEF <.MEM_312>
  __dnewD.51707 ={v} {CLOBBER};
  # PT = nonlocal 
  _15 = &this_3(D)->D.44977;
  [LP 2] # .MEM_16 = VDEF <.MEM_313>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZNK6Module5ErrorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.33313 (_15, &D.45146);
;;    succ:       45 (EH,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 41, loop depth 0, count 0, freq 50, maybe hot
;;    prev block 40, next block 42, flags: (NEW, REACHABLE)
;;    pred:       40 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.50102 => &D.45146
  # DEBUG thisD.50103 => &D.45146
  # DEBUG thisD.50112 => &D.45146
  # VUSE <.MEM_16>
  # PT = nonlocal escaped null { D.45146 } (escaped)
  _19 = MEM[(charD.10 * *)&D.45146];
  # DEBUG D#1ptD.0 => &D.45146
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.50113 => &D.45146
  if (&D.45146.D.12341._M_local_bufD.12343 != _19)
    goto <bb 42>;
  else
    goto <bb 43>;
;;    succ:       42 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                43 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 35, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       41 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => D.45146.D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.50105 => &D.45146
  # DEBUG __sizeD.50104 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => &D.45146
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => &D.45146
  # DEBUG D#91ptD.0 => &D.45146._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.50108 => _19
  # DEBUG __aD.50106 => D#89ptD.0
  # DEBUG __nD.50107 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.50111 => _19
  # DEBUG thisD.50109 => D#85ptD.0
  # DEBUG D.50110 => D#86ptD.0
  # .MEM_29 = VDEF <.MEM_16>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZdlPvD.2766 (_19);
;;    succ:       43 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 43, loop depth 0, count 0, freq 50, maybe hot
;;    prev block 42, next block 44, flags: (NEW, REACHABLE)
;;    pred:       41 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                42 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_20 = PHI <.MEM_16(41), .MEM_29(42)>
  # DEBUG D#95ptD.0 => &D.45146._M_dataplusD.12321
  # DEBUG thisD.50114 => D#95ptD.0
  # DEBUG thisD.50115 => D#95ptD.0
  # DEBUG thisD.50116 => D#95ptD.0
  # .MEM_18 = VDEF <.MEM_20>
  D.45146 ={v} {CLOBBER};
  # DEBUG thisD.50100 => &D.45145
  # DEBUG thisD.50101 => &D.45145
;;    succ:       44 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 44, loop depth 0, count 0, freq 6295, maybe hot
;;    prev block 43, next block 45, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                43 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [19.9%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped null 
  # f_1 = PHI <f_6(8), 0B(43), f_6(6), f_6(39), f_6(9)>
  # .MEM_2 = PHI <.MEM_248(8), .MEM_18(43), .MEM_11(6), .MEM_303(39), .MEM_11(9)>
  # DEBUG fD.45143 => f_1
  # VUSE <.MEM_2>
  return f_1;
;;    succ:       EXIT [100.0%] 

;;   basic block 45, loop depth 0, count 0, freq 0
;;    prev block 44, next block 46, flags: (NEW, REACHABLE)
;;    pred:       40 (EH,EXECUTABLE)
<L4>: [LP 2]
  # DEBUG thisD.50117 => &D.45146
  # DEBUG thisD.50118 => &D.45146
  # DEBUG thisD.50127 => &D.45146
  # VUSE <.MEM_16>
  # PT = nonlocal escaped null { D.45146 } (escaped)
  _17 = MEM[(charD.10 * *)&D.45146];
  # DEBUG D#1ptD.0 => &D.45146
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.50128 => &D.45146
  if (&D.45146.D.12341._M_local_bufD.12343 != _17)
    goto <bb 46>;
  else
    goto <bb 47>;
;;    succ:       46 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 46, loop depth 0, count 0, freq 0
;;    prev block 45, next block 47, flags: (NEW, REACHABLE)
;;    pred:       45 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => D.45146.D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.50120 => &D.45146
  # DEBUG __sizeD.50119 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => &D.45146
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => &D.45146
  # DEBUG D#91ptD.0 => &D.45146._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.50123 => _17
  # DEBUG __aD.50121 => D#89ptD.0
  # DEBUG __nD.50122 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.50126 => _17
  # DEBUG thisD.50124 => D#85ptD.0
  # DEBUG D.50125 => D#86ptD.0
  # .MEM_34 = VDEF <.MEM_16>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZdlPvD.2766 (_17);
;;    succ:       47 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 47, loop depth 0, count 0, freq 0
;;    prev block 46, next block 48, flags: (NEW, REACHABLE)
;;    pred:       45 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                46 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_26 = PHI <.MEM_16(45), .MEM_34(46)>
  # DEBUG D#95ptD.0 => &D.45146._M_dataplusD.12321
  # DEBUG thisD.50129 => D#95ptD.0
  # DEBUG thisD.50130 => D#95ptD.0
  # DEBUG thisD.50131 => D#95ptD.0
  # .MEM_21 = VDEF <.MEM_26>
  D.45146 ={v} {CLOBBER};
  resx 2
;;    succ:      

;;   basic block 48, loop depth 1, count 0, freq 3549, maybe hot
;;   Invalid sum of incoming frequencies 4550, should be 3549
;;    prev block 47, next block 49, flags: (NEW, REACHABLE)
;;    pred:       14 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _148 = i_184 * 8;
  # PT = nonlocal escaped 
  __tmp$_M_cur_149 = prephitmp_91 + _148;
  # DEBUG __tmp$_M_curD.51734 => __tmp$_M_cur_149
  goto <bb 18>;
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 49, loop depth 1, count 0, freq 5778, maybe hot
;;   Invalid sum of incoming frequencies 4550, should be 5778
;;    prev block 48, next block 1, flags: (NEW, REACHABLE)
;;    pred:       14 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__offset_145 > 0)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [27.0%]  (FALSE_VALUE,EXECUTABLE)

}


Creating dr for MEM[(struct Flit * * *)this_3(D) + 144B]
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 144
	step: 0
	aligned to: 256
	base_object: MEM[(struct Flit * * *)this_3(D) + 144B]
Creating dr for MEM[(struct Flit * * *)this_3(D) + 112B]
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 112
	step: 0
	aligned to: 256
	base_object: MEM[(struct Flit * * *)this_3(D) + 112B]
Creating dr for *_5
analyze_innermost: success.
	base_address: _5
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *_5
Creating dr for MEM[(struct deque *)this_3(D) + 96B].D.44879._M_impl._M_start._M_last
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 128
	step: 0
	aligned to: 256
	base_object: MEM[(struct deque *)this_3(D) + 96B]
	Access function 0: 128
	Access function 1: 128
	Access function 2: 0
	Access function 3: 0
Creating dr for MEM[(struct deque *)this_3(D) + 96B].D.44879._M_impl._M_start._M_cur
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 112
	step: 0
	aligned to: 256
	base_object: MEM[(struct deque *)this_3(D) + 96B]
	Access function 0: 0
	Access function 1: 128
	Access function 2: 0
	Access function 3: 0
Creating dr for MEM[(struct deque *)this_3(D) + 96B].D.44879._M_impl._M_start._M_first
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 120
	step: 0
	aligned to: 256
	base_object: MEM[(struct deque *)this_3(D) + 96B]
	Access function 0: 64
	Access function 1: 128
	Access function 2: 0
	Access function 3: 0
Creating dr for f_6->id
analyze_innermost: success.
	base_address: f_6
	offset from base address: 0
	constant offset from base address: 28
	step: 0
	aligned to: 256
	base_object: *f_6
	Access function 0: 224
Creating dr for this_3(D)->_last_id
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 220
	step: 0
	aligned to: 256
	base_object: *this_3(D)
	Access function 0: 1760
Creating dr for f_6->pid
analyze_innermost: success.
	base_address: f_6
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: *f_6
	Access function 0: 256
Creating dr for this_3(D)->_last_pid
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 224
	step: 0
	aligned to: 256
	base_object: *this_3(D)
	Access function 0: 1792
Creating dr for this_3(D)->_pri_type
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 200
	step: 0
	aligned to: 256
	base_object: *this_3(D)
	Access function 0: 1600
Creating dr for MEM[(const struct _Deque_iterator &)this_3(D) + 144]._M_node
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 168
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)this_3(D) + 144]
	Access function 0: 192
Creating dr for MEM[(const struct _Deque_iterator &)this_3(D) + 112]._M_node
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 136
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)this_3(D) + 112]
	Access function 0: 192
Creating dr for MEM[(const struct _Deque_iterator &)this_3(D) + 144]._M_first
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 152
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)this_3(D) + 144]
	Access function 0: 64
Creating dr for this_3(D)->_pri
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 204
	step: 0
	aligned to: 256
	base_object: *this_3(D)
	Access function 0: 1632
Creating dr for *prephitmp_91
analyze_innermost: success.
	base_address: prephitmp_91
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *prephitmp_91
Creating dr for this_3(D)->_priority_donation
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 208
	step: 0
	aligned to: 256
	base_object: *this_3(D)
	Access function 0: 1664
Creating dr for MEM[(const struct _Deque_iterator &)this_3(D) + 144]._M_node
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 168
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)this_3(D) + 144]
	Access function 0: 192
Creating dr for MEM[(const struct _Deque_iterator &)this_3(D) + 112]._M_node
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 136
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)this_3(D) + 112]
	Access function 0: 192
Creating dr for MEM[(const struct _Deque_iterator &)this_3(D) + 144]._M_first
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 152
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)this_3(D) + 144]
	Access function 0: 64
Creating dr for MEM[(const struct iterator &)this_3(D) + 112]._M_first
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 120
	step: 0
	aligned to: 256
	base_object: MEM[(const struct iterator &)this_3(D) + 112]
	Access function 0: 64
Creating dr for f_67->pri
analyze_innermost: success.
	base_address: f_67
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: *f_67
	Access function 0: 384
Creating dr for *_160
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_160
Creating dr for *_160
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_160
Analyzing # of iterations of loop 1
  exit condition [2, + , 1] < (size_type) _242
  bounds on difference of bases: 0 ... 18446744073709551613
Applying pattern match.pd:725, generic-match.c:1428
  result:
    # of iterations (size_t) _242 + 18446744073709551614, bounded by 0x0fffffffffffffffd
Creating dr for *_160
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_160
Creating dr for *_160
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_160
Analyzing # of iterations of loop 1
  exit condition [2, + , 1] < (size_type) _242
  bounds on difference of bases: 0 ... 18446744073709551613
Applying pattern match.pd:725, generic-match.c:1428
  result:
    # of iterations (size_t) _242 + 18446744073709551614, bounded by 0x0fffffffffffffffd
Creating dr for f_316->watch
analyze_innermost: success.
	base_address: f_316
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: *f_316
	Access function 0: 448
Creating dr for f_67->watch
analyze_innermost: success.
	base_address: f_67
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: *f_67
	Access function 0: 448
Creating dr for f_67->id
analyze_innermost: success.
	base_address: f_67
	offset from base address: 0
	constant offset from base address: 28
	step: 0
	aligned to: 256
	base_object: *f_67
	Access function 0: 224
Creating dr for f_316->id
analyze_innermost: success.
	base_address: f_316
	offset from base address: 0
	constant offset from base address: 28
	step: 0
	aligned to: 256
	base_object: *f_316
	Access function 0: 224
Creating dr for MEM[(const struct ctype *)_176]._M_widen_ok
analyze_innermost: success.
	base_address: _176
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(const struct ctype *)_176]
	Access function 0: 448
Creating dr for MEM[(const struct ctype *)_176]._M_widen[10]
analyze_innermost: success.
	base_address: _176
	offset from base address: 0
	constant offset from base address: 67
	step: 0
	aligned to: 256
	base_object: MEM[(const struct ctype *)_176]
	Access function 0: 10
	Access function 1: 456
Creating dr for f_258->pri
analyze_innermost: success.
	base_address: f_258
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: *f_258
	Access function 0: 384
Creating dr for this_3(D)->_pri
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 204
	step: 0
	aligned to: 256
	base_object: *this_3(D)
	Access function 0: 1632
Creating dr for f_114->watch
analyze_innermost: success.
	base_address: f_114
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: *f_114
	Access function 0: 448
Creating dr for f_114->pri
analyze_innermost: success.
	base_address: f_114
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: *f_114
	Access function 0: 384
Creating dr for f_114->id
analyze_innermost: success.
	base_address: f_114
	offset from base address: 0
	constant offset from base address: 28
	step: 0
	aligned to: 256
	base_object: *f_114
	Access function 0: 224
Creating dr for MEM[(const struct ctype *)_203]._M_widen_ok
analyze_innermost: success.
	base_address: _203
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(const struct ctype *)_203]
	Access function 0: 448
Creating dr for MEM[(const struct ctype *)_203]._M_widen[10]
analyze_innermost: success.
	base_address: _203
	offset from base address: 0
	constant offset from base address: 67
	step: 0
	aligned to: 256
	base_object: MEM[(const struct ctype *)_203]
	Access function 0: 10
	Access function 1: 456
Creating dr for MEM[(struct _Alloc_hider *)&D.45146]._M_p
analyze_innermost: success.
	base_address: &D.45146
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Alloc_hider *)&D.45146]
	Access function 0: 0
Creating dr for __dnew
analyze_innermost: success.
	base_address: &__dnew
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(long unsigned int *)&__dnew]
Creating dr for MEM[(char * *)&D.45146]
analyze_innermost: success.
	base_address: &D.45146
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(char * *)&D.45146]
Creating dr for MEM[(char * *)&D.45146]
analyze_innermost: success.
	base_address: &D.45146
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(char * *)&D.45146]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:14)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:28)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:15)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:54, LOOPS:1, CONDITIONS:25, STMTS:573)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_40 })
  {
    <bb 2>:
    # DEBUG f => 0B
    # DEBUG D#187 => &this_3(D)->_buffer
    # DEBUG this => D#187
    # DEBUG D#17 => &MEM[(const struct deque *)D#187].D.44879._M_impl._M_start
    # DEBUG D#18 => &MEM[(const struct deque *)D#187].D.44879._M_impl._M_finish
    # VUSE <.MEM_4(D)>
    _13 = MEM[(struct Flit * * *)this_3(D) + 144B];
    # DEBUG D#15 => D#18
    # VUSE <.MEM_4(D)>
    _5 = MEM[(struct Flit * * *)this_3(D) + 112B];
    # DEBUG D#16 => D#17
    # DEBUG __x => D#15
    # DEBUG __y => D#16
    if (_5 != _13)
      goto <bb 3>;
    else
      goto <bb 40>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 bb_5 })
  {
    <bb 3>:
    # DEBUG D#188 => &this_3(D)->_buffer
    # DEBUG this => D#188
    # DEBUG this => D#188
    # DEBUG D#21 => &D#188->D.44879._M_impl._M_start
    # DEBUG this => NULL
    # DEBUG __x => D#21
    # DEBUG D#31 => MEM[(const struct iterator &)D#188 + 16]._M_first
    # DEBUG D.48942 => D#31
    # DEBUG D#30 => MEM[(const struct iterator &)D#188 + 16]._M_last
    # DEBUG D.48943 => D#30
    # DEBUG D#29 => MEM[(const struct iterator &)D#188 + 16]._M_node
    # DEBUG D.48944 => D#29
    # DEBUG this => D#28
    # VUSE <.MEM_4(D)>
    f_6 = *_5;
    # DEBUG f => f_6
    # DEBUG D#261 => &this_3(D)->_buffer
    # DEBUG this => D#261
    # VUSE <.MEM_4(D)>
    _23 = MEM[(struct deque *)this_3(D) + 96B].D.44879._M_impl._M_start._M_last;
    _24 = _23 + 18446744073709551608;
    if (_5 != _24)
      goto <bb 4>;
    else
      goto <bb 5>;

  }
  bb_4 (preds = {bb_3 }, succs = {bb_6 })
  {
    <bb 4>:
    # DEBUG D#153 => D#261->D.44879._M_impl._M_start._M_cur
    # DEBUG D#152 => &D#261->D.44879._M_impl
    # DEBUG D#54 => D#152
    # DEBUG D#55 => D#153
    # DEBUG __a => D#54
    # DEBUG __p => D#55
    # DEBUG D#53 => D#55
    # DEBUG D#52 => D#54
    # DEBUG D#50 => D#52
    # DEBUG D#51 => D#53
    # DEBUG this => D#50
    # DEBUG __p => D#51
    _25 = _5 + 8;
    # .MEM_28 = VDEF <.MEM_4(D)>
    MEM[(struct deque *)this_3(D) + 96B].D.44879._M_impl._M_start._M_cur = _25;
    goto <bb 6>;

  }
  bb_5 (preds = {bb_3 }, succs = {bb_6 })
  {
    <bb 5>:
    # DEBUG this => D#261
    # DEBUG this => D#261
    # DEBUG D#151 => D#261->D.44879._M_impl._M_start._M_cur
    # DEBUG D#148 => &D#261->D.44879
    # DEBUG this => D#148
    # DEBUG D#55 => D#151
    # DEBUG __a => D#54
    # DEBUG __p => D#55
    # DEBUG D#53 => D#55
    # DEBUG D#52 => D#54
    # DEBUG D#50 => D#52
    # DEBUG D#51 => D#53
    # DEBUG this => D#50
    # DEBUG __p => D#51
    # VUSE <.MEM_4(D)>
    _39 = MEM[(struct deque *)this_3(D) + 96B].D.44879._M_impl._M_start._M_first;
    # DEBUG D#150 => &D#261->D.44879
    # DEBUG D#145 => D#150
    # DEBUG __p => _39
    # DEBUG this => D#145
    # DEBUG D#144 => D#145
    # DEBUG __size => 8
    # DEBUG D#143 => &D#144->_M_impl
    # DEBUG D#141 => D#143
    # DEBUG __p => _39
    # DEBUG __a => D#141
    # DEBUG __n => D#142
    # DEBUG D#140 => D#142
    # DEBUG D#139 => D#141
    # DEBUG D#137 => D#139
    # DEBUG D#138 => D#140
    # DEBUG __p => _39
    # DEBUG this => D#137
    # DEBUG D.51596 => D#138
    # .MEM_243 = VDEF <.MEM_4(D)>
    operator delete (_39);
    # VUSE <.MEM_243>
    _40 = MEM[(struct deque *)this_3(D) + 96B].D.44879._M_impl._M_start._M_node;
    _41 = _40 + 8;
    # DEBUG D#149 => &D#261->D.44879._M_impl._M_start
    # DEBUG this => D#149
    # DEBUG __new_node => _41
    # .MEM_244 = VDEF <.MEM_243>
    MEM[(struct _Deque_iterator *)this_3(D) + 112B]._M_node = _41;
    # VUSE <.MEM_244>
    _42 = MEM[(struct Flit * * *)_40 + 8B];
    # .MEM_245 = VDEF <.MEM_244>
    MEM[(struct _Deque_iterator *)this_3(D) + 112B]._M_first = _42;
    # DEBUG __size => 8
    _43 = _42 + 512;
    # .MEM_246 = VDEF <.MEM_245>
    MEM[(struct _Deque_iterator *)this_3(D) + 112B]._M_last = _43;
    # .MEM_247 = VDEF <.MEM_246>
    MEM[(struct deque *)this_3(D) + 96B].D.44879._M_impl._M_start._M_cur = _42;
    # VUSE <.MEM_247>
    pretmp_89 = MEM[(struct Flit * * *)this_3(D) + 144B];

  }
  bb_6 (preds = {bb_5 bb_4 }, succs = {bb_44 bb_7 })
  {
    <bb 6>:
    # .MEM_22 = PHI <.MEM_247(5), .MEM_28(4)>
    # prephitmp_90 = PHI <pretmp_89(5), _13(4)>
    # prephitmp_91 = PHI <_42(5), _25(4)>
    # prephitmp_92 = PHI <_43(5), _23(4)>
    # VUSE <.MEM_22>
    _8 = f_6->id;
    # .MEM_9 = VDEF <.MEM_22>
    this_3(D)->_last_id = _8;
    # VUSE <.MEM_9>
    _10 = f_6->pid;
    # .MEM_11 = VDEF <.MEM_9>
    this_3(D)->_last_pid = _10;
    # DEBUG this => this_3(D)
    # DEBUG D#76 => &this_3(D)->_buffer
    # DEBUG this => D#76
    # DEBUG D#17 => &MEM[(const struct deque *)D#76].D.44879._M_impl._M_start
    # DEBUG D#18 => &MEM[(const struct deque *)D#76].D.44879._M_impl._M_finish
    # DEBUG D#15 => D#18
    # DEBUG D#16 => D#17
    # DEBUG __x => D#15
    # DEBUG __y => D#16
    if (prephitmp_90 == prephitmp_91)
      goto <bb 44>;
    else
      goto <bb 7>;

  }
  bb_7 (preds = {bb_6 }, succs = {bb_8 bb_9 })
  {
    <bb 7>:
    # VUSE <.MEM_11>
    _45 = this_3(D)->_pri_type;
    if (_45 == 1)
      goto <bb 8>;
    else
      goto <bb 9>;

  }
  bb_8 (preds = {bb_7 }, succs = {bb_44 })
  {
    <bb 8>:
    # DEBUG D#77 => &this_3(D)->_buffer
    # DEBUG this => D#77
    # DEBUG D#41 => &MEM[(const struct deque *)D#77].D.44879._M_impl._M_start
    # DEBUG D#42 => &MEM[(const struct deque *)D#77].D.44879._M_impl._M_finish
    # DEBUG __x => D#42
    # DEBUG __y => D#41
    # DEBUG __size => 8
    # VUSE <.MEM_11>
    _46 = MEM[(const struct _Deque_iterator &)this_3(D) + 144]._M_node;
    _47 = (long int) _46;
    # VUSE <.MEM_11>
    _48 = MEM[(const struct _Deque_iterator &)this_3(D) + 112]._M_node;
    _49 = (long int) _48;
    _50 = _47 - _49;
    _51 = _50 /[ex] 8;
    _52 = _51 + -1;
    _53 = _52 * 64;
    _54 = (long int) prephitmp_90;
    # VUSE <.MEM_11>
    _55 = MEM[(const struct _Deque_iterator &)this_3(D) + 144]._M_first;
    _56 = (long int) _55;
    _57 = _54 - _56;
    _58 = _57 /[ex] 8;
    _59 = _53 + _58;
    _61 = (long int) prephitmp_92;
    _62 = (long int) prephitmp_91;
    _63 = _61 - _62;
    _64 = _63 /[ex] 8;
    _65 = _59 + _64;
    _66 = (int) _65;
    # .MEM_248 = VDEF <.MEM_11>
    this_3(D)->_pri = _66;
    goto <bb 44>;

  }
  bb_9 (preds = {bb_7 }, succs = {bb_10 bb_44 })
  {
    <bb 9>:
    if (_45 != 3)
      goto <bb 10>;
    else
      goto <bb 44>;

  }
  bb_10 (preds = {bb_9 }, succs = {bb_11 bb_32 })
  {
    <bb 10>:
    # DEBUG D#78 => &this_3(D)->_buffer
    # DEBUG this => D#78
    # DEBUG this => D#78
    # DEBUG D#21 => &D#78->D.44879._M_impl._M_start
    # DEBUG this => NULL
    # DEBUG __x => D#21
    # DEBUG D#31 => MEM[(const struct iterator &)D#78 + 16]._M_first
    # DEBUG D.48942 => D#31
    # DEBUG D#30 => MEM[(const struct iterator &)D#78 + 16]._M_last
    # DEBUG D.48943 => D#30
    # DEBUG D#29 => MEM[(const struct iterator &)D#78 + 16]._M_node
    # DEBUG D.48944 => D#29
    # DEBUG this => D#28
    # VUSE <.MEM_11>
    f_67 = *prephitmp_91;
    # DEBUG f => f_67
    if (_45 != 0)
      goto <bb 11>;
    else
      goto <bb 32>;

  }
  bb_11 (preds = {bb_10 }, succs = {bb_12 bb_32 })
  {
    <bb 11>:
    # VUSE <.MEM_11>
    _68 = this_3(D)->_priority_donation;
    if (_68 != 0)
      goto <bb 12>;
    else
      goto <bb 32>;

  }
  bb_12 (preds = {bb_11 }, succs = {bb_13 bb_32 })
  {
    <bb 12>:
    # DEBUG i => 1
    # DEBUG df => f_67
    # DEBUG D#80 => &this_3(D)->_buffer
    # DEBUG this => D#80
    # DEBUG D#41 => &MEM[(const struct deque *)D#80].D.44879._M_impl._M_start
    # DEBUG D#42 => &MEM[(const struct deque *)D#80].D.44879._M_impl._M_finish
    # DEBUG __x => D#42
    # DEBUG __y => D#41
    # DEBUG __size => 8
    # VUSE <.MEM_11>
    _228 = MEM[(const struct _Deque_iterator &)this_3(D) + 144]._M_node;
    _7 = (long int) _228;
    # VUSE <.MEM_11>
    _202 = MEM[(const struct _Deque_iterator &)this_3(D) + 112]._M_node;
    _249 = (long int) _202;
    _250 = _7 - _249;
    _251 = _250 /[ex] 8;
    _252 = _251 + -1;
    _259 = _252 * 64;
    _260 = (long int) prephitmp_90;
    # VUSE <.MEM_11>
    _137 = MEM[(const struct _Deque_iterator &)this_3(D) + 144]._M_first;
    _261 = (long int) _137;
    _138 = _260 - _261;
    _262 = _138 /[ex] 8;
    _254 = _259 + _262;
    _162 = (long int) prephitmp_92;
    _175 = (long int) prephitmp_91;
    _146 = _162 - _175;
    _181 = _146 /[ex] 8;
    _242 = _181 + _254;
    _241 = (size_type) _242;
    if (_241 > 1)
      goto <bb 13>;
    else
      goto <bb 32>;

  }
  bb_13 (preds = {bb_12 }, succs = {bb_14 })
  {
    <bb 13>:
    # VUSE <.MEM_11>
    pretmp_178 = MEM[(const struct iterator &)this_3(D) + 112]._M_first;
    pretmp_128 = (long int) pretmp_178;
    pretmp_229 = _175 - pretmp_128;
    pretmp_230 = pretmp_229 /[ex] 8;
    # VUSE <.MEM_11>
    pretmp_322 = f_67->pri;

  }
  bb_22 (preds = {bb_20 }, succs = {bb_50 })
  {
    <bb 22>:
    # f_316 = PHI <f_130(20)>

  }
  bb_50 (preds = {bb_22 }, succs = {bb_23 bb_32 })
  {
    <bb 50>:
    if (f_67 != f_316)
      goto <bb 23>;
    else
      goto <bb 32>;

  }
  bb_23 (preds = {bb_50 }, succs = {bb_25 bb_24 })
  {
    <bb 23>:
    # VUSE <.MEM_264>
    _101 = f_316->watch;
    if (_101 != 0)
      goto <bb 25>;
    else
      goto <bb 24>;

  }
  bb_24 (preds = {bb_23 }, succs = {bb_25 bb_39 })
  {
    <bb 24>:
    # VUSE <.MEM_264>
    _102 = f_67->watch;
    if (_102 != 0)
      goto <bb 25>;
    else
      goto <bb 39>;

  }
  bb_25 (preds = {bb_24 bb_23 }, succs = {bb_26 bb_27 })
  {
    <bb 25>:
    # VUSE <.MEM_264>
    _103 = f_67->id;
    # VUSE <.MEM_264>
    _104 = f_316->id;
    # DEBUG D#81 => &this_3(D)->D.44977
    # DEBUG this => D#81
    # .MEM_265 = VDEF <.MEM_264>
    _105 = GetSimTime ();
    # VUSE <.MEM_265>
    gWatchOut.69_106 = gWatchOut;
    # .MEM_266 = VDEF <.MEM_265>
    _107 = std::basic_ostream<char>::operator<< (gWatchOut.69_106, _105);
    # DEBUG __out => _107
    # DEBUG __s => " | "
    # DEBUG __s => " | "
    # .MEM_267 = VDEF <.MEM_266>
    std::__ostream_insert<char, std::char_traits<char> > (_107, " | ", 3);
    # DEBUG __os => _107
    # DEBUG __str => NULL
    # VUSE <.MEM_267>
    _108 = MEM[(long unsigned int *)this_3(D) + 48B];
    # DEBUG this => D#2
    _109 = (long int) _108;
    # DEBUG this => NULL
    # VUSE <.MEM_267>
    _110 = MEM[(char * *)this_3(D) + 40B];
    # DEBUG this => D#1
    # .MEM_268 = VDEF <.MEM_267>
    _111 = std::__ostream_insert<char, std::char_traits<char> > (_107, _110, _109);
    # DEBUG __out => _111
    # DEBUG __s => " | "
    # DEBUG __s => " | "
    # .MEM_269 = VDEF <.MEM_268>
    std::__ostream_insert<char, std::char_traits<char> > (_111, " | ", 3);
    # DEBUG __out => _111
    # DEBUG __s => "Flit "
    # DEBUG __s => "Flit "
    # .MEM_270 = VDEF <.MEM_269>
    std::__ostream_insert<char, std::char_traits<char> > (_111, "Flit ", 5);
    # .MEM_271 = VDEF <.MEM_270>
    _112 = std::basic_ostream<char>::operator<< (_111, _104);
    # DEBUG __out => _112
    # DEBUG __s => " donates priority to flit "
    # DEBUG __s => " donates priority to flit "
    # .MEM_272 = VDEF <.MEM_271>
    std::__ostream_insert<char, std::char_traits<char> > (_112, " donates priority to flit ", 26);
    # .MEM_273 = VDEF <.MEM_272>
    _113 = std::basic_ostream<char>::operator<< (_112, _103);
    # DEBUG __out => _113
    # DEBUG __s => "."
    # DEBUG __s => "."
    # .MEM_274 = VDEF <.MEM_273>
    std::__ostream_insert<char, std::char_traits<char> > (_113, ".", 1);
    # DEBUG this => _113
    # DEBUG __pf => endl
    # DEBUG __os => _113
    # VUSE <.MEM_274>
    _168 = _113->_vptr.basic_ostream;
    # VUSE <.MEM_274>
    _169 = MEM[(long int *)_168 + -24B];
    _170 = (sizetype) _169;
    _171 = _113 + _170;
    # DEBUG this => _171
    # DEBUG __c => 10
    # VUSE <.MEM_274>
    _176 = MEM[(const struct basic_ios *)_171]._M_ctype;
    # DEBUG __f => _176
    if (_176 == 0B)
      goto <bb 26>;
    else
      goto <bb 27>;

  }
  bb_26 (preds = {bb_25 bb_33 }, succs = {})
  {
    <bb 26>:
    # .MEM_317 = PHI <.MEM_274(25), .MEM_293(33)>
    # .MEM_283 = VDEF <.MEM_317>
    std::__throw_bad_cast ();

  }
  bb_27 (preds = {bb_25 }, succs = {bb_28 bb_29 })
  {
    <bb 27>:
    # DEBUG this => _176
    # DEBUG __c => 10
    # VUSE <.MEM_274>
    _177 = MEM[(const struct ctype *)_176]._M_widen_ok;
    if (_177 != 0)
      goto <bb 28>;
    else
      goto <bb 29>;

  }
  bb_28 (preds = {bb_27 }, succs = {bb_31 })
  {
    <bb 28>:
    # VUSE <.MEM_274>
    _180 = MEM[(const struct ctype *)_176]._M_widen[10];
    pretmp_319 = (int) _180;
    goto <bb 31>;

  }
  bb_29 (preds = {bb_27 }, succs = {bb_31 bb_30 })
  {
    <bb 29>:
    # DEBUG this => _176
    # DEBUG __c => 10
    # .MEM_275 = VDEF <.MEM_274>
    std::ctype<char>::_M_widen_init (_176);
    # VUSE <.MEM_275>
    _185 = MEM[(const struct ctype *)_176].D.17687._vptr.facet;
    # VUSE <.MEM_275>
    _186 = MEM[(int (*__vtbl_ptr_type) () *)_185 + 48B];
    PROF_190 = [obj_type_ref] OBJ_TYPE_REF(_186;(const struct ctype)_176->6);
    if (PROF_190 == do_widen)
      goto <bb 31>;
    else
      goto <bb 30>;

  }
  bb_30 (preds = {bb_29 }, succs = {bb_31 })
  {
    <bb 30>:
    # .MEM_276 = VDEF <.MEM_275>
    _192 = OBJ_TYPE_REF(_186;(const struct ctype)_176->6) (_176, 10);
    pretmp_320 = (int) _192;

  }
  bb_31 (preds = {bb_28 bb_29 bb_30 }, succs = {bb_32 })
  {
    <bb 31>:
    # .MEM_216 = PHI <.MEM_274(28), .MEM_275(29), .MEM_276(30)>
    # prephitmp_321 = PHI <pretmp_319(28), 10(29), pretmp_320(30)>
    # .MEM_280 = VDEF <.MEM_216>
    _174 = std::basic_ostream<char>::put (_113, prephitmp_321);
    # DEBUG __os => _174
    # .MEM_281 = VDEF <.MEM_280>
    std::basic_ostream<char>::flush (_174);

  }
  bb_32 (preds = {bb_10 bb_11 bb_50 bb_12 bb_31 }, succs = {bb_33 bb_39 })
  {
    <bb 32>:
    # f_114 = PHI <f_67(10), f_67(11), f_316(50), f_67(12), f_316(31)>
    # .MEM_189 = PHI <.MEM_11(10), .MEM_11(11), .MEM_264(50), .MEM_11(12), .MEM_281(31)>
    # DEBUG f => f_114
    # VUSE <.MEM_189>
    _115 = f_114->watch;
    if (_115 != 0)
      goto <bb 33>;
    else
      goto <bb 39>;

  }
  bb_33 (preds = {bb_32 }, succs = {bb_26 bb_34 })
  {
    <bb 33>:
    # VUSE <.MEM_189>
    _116 = f_114->pri;
    # VUSE <.MEM_189>
    _117 = f_114->id;
    # DEBUG D#82 => &this_3(D)->D.44977
    # DEBUG this => D#82
    # .MEM_284 = VDEF <.MEM_189>
    _118 = GetSimTime ();
    # VUSE <.MEM_284>
    gWatchOut.69_119 = gWatchOut;
    # .MEM_285 = VDEF <.MEM_284>
    _120 = std::basic_ostream<char>::operator<< (gWatchOut.69_119, _118);
    # DEBUG __out => _120
    # DEBUG __s => " | "
    # DEBUG __s => " | "
    # .MEM_286 = VDEF <.MEM_285>
    std::__ostream_insert<char, std::char_traits<char> > (_120, " | ", 3);
    # DEBUG __os => _120
    # DEBUG __str => NULL
    # VUSE <.MEM_286>
    _121 = MEM[(long unsigned int *)this_3(D) + 48B];
    # DEBUG this => D#2
    _122 = (long int) _121;
    # DEBUG this => NULL
    # VUSE <.MEM_286>
    _123 = MEM[(char * *)this_3(D) + 40B];
    # DEBUG this => D#1
    # .MEM_287 = VDEF <.MEM_286>
    _124 = std::__ostream_insert<char, std::char_traits<char> > (_120, _123, _122);
    # DEBUG __out => _124
    # DEBUG __s => " | "
    # DEBUG __s => " | "
    # .MEM_288 = VDEF <.MEM_287>
    std::__ostream_insert<char, std::char_traits<char> > (_124, " | ", 3);
    # DEBUG __out => _124
    # DEBUG __s => "Flit "
    # DEBUG __s => "Flit "
    # .MEM_289 = VDEF <.MEM_288>
    std::__ostream_insert<char, std::char_traits<char> > (_124, "Flit ", 5);
    # .MEM_290 = VDEF <.MEM_289>
    _125 = std::basic_ostream<char>::operator<< (_124, _117);
    # DEBUG __out => _125
    # DEBUG __s => " sets priority to "
    # DEBUG __s => " sets priority to "
    # .MEM_291 = VDEF <.MEM_290>
    std::__ostream_insert<char, std::char_traits<char> > (_125, " sets priority to ", 18);
    # .MEM_292 = VDEF <.MEM_291>
    _126 = std::basic_ostream<char>::operator<< (_125, _116);
    # DEBUG __out => _126
    # DEBUG __s => "."
    # DEBUG __s => "."
    # .MEM_293 = VDEF <.MEM_292>
    std::__ostream_insert<char, std::char_traits<char> > (_126, ".", 1);
    # DEBUG this => _126
    # DEBUG __pf => endl
    # DEBUG __os => _126
    # VUSE <.MEM_293>
    _195 = _126->_vptr.basic_ostream;
    # VUSE <.MEM_293>
    _196 = MEM[(long int *)_195 + -24B];
    _197 = (sizetype) _196;
    _198 = _126 + _197;
    # DEBUG this => _198
    # DEBUG __c => 10
    # VUSE <.MEM_293>
    _203 = MEM[(const struct basic_ios *)_198]._M_ctype;
    # DEBUG __f => _203
    if (_203 == 0B)
      goto <bb 26>;
    else
      goto <bb 34>;

  }
  bb_34 (preds = {bb_33 }, succs = {bb_35 bb_36 })
  {
    <bb 34>:
    # DEBUG this => _203
    # DEBUG __c => 10
    # VUSE <.MEM_293>
    _204 = MEM[(const struct ctype *)_203]._M_widen_ok;
    if (_204 != 0)
      goto <bb 35>;
    else
      goto <bb 36>;

  }
  bb_35 (preds = {bb_34 }, succs = {bb_38 })
  {
    <bb 35>:
    # VUSE <.MEM_293>
    _207 = MEM[(const struct ctype *)_203]._M_widen[10];
    pretmp_141 = (int) _207;
    goto <bb 38>;

  }
  bb_36 (preds = {bb_34 }, succs = {bb_38 bb_37 })
  {
    <bb 36>:
    # DEBUG this => _203
    # DEBUG __c => 10
    # .MEM_294 = VDEF <.MEM_293>
    std::ctype<char>::_M_widen_init (_203);
    # VUSE <.MEM_294>
    _212 = MEM[(const struct ctype *)_203].D.17687._vptr.facet;
    # VUSE <.MEM_294>
    _213 = MEM[(int (*__vtbl_ptr_type) () *)_212 + 48B];
    PROF_217 = [obj_type_ref] OBJ_TYPE_REF(_213;(const struct ctype)_203->6);
    if (PROF_217 == do_widen)
      goto <bb 38>;
    else
      goto <bb 37>;

  }
  bb_37 (preds = {bb_36 }, succs = {bb_38 })
  {
    <bb 37>:
    # .MEM_295 = VDEF <.MEM_294>
    _219 = OBJ_TYPE_REF(_213;(const struct ctype)_203->6) (_203, 10);
    pretmp_147 = (int) _219;

  }
  bb_38 (preds = {bb_35 bb_36 bb_37 }, succs = {bb_39 })
  {
    <bb 38>:
    # .MEM_239 = PHI <.MEM_293(35), .MEM_294(36), .MEM_295(37)>
    # prephitmp_238 = PHI <pretmp_141(35), 10(36), pretmp_147(37)>
    # .MEM_299 = VDEF <.MEM_239>
    _201 = std::basic_ostream<char>::put (_126, prephitmp_238);
    # DEBUG __os => _201
    # .MEM_300 = VDEF <.MEM_299>
    std::basic_ostream<char>::flush (_201);

  }
  bb_39 (preds = {bb_32 bb_38 bb_24 }, succs = {bb_52 })
  {
    <bb 39>:
    # .MEM_240 = PHI <.MEM_189(32), .MEM_300(38), .MEM_264(24)>
    # f_258 = PHI <f_114(32), f_114(38), f_316(24)>

  }
  bb_52 (preds = {bb_39 }, succs = {bb_44 })
  {
    <bb 52>:
    # VUSE <.MEM_240>
    _127 = f_258->pri;
    # .MEM_303 = VDEF <.MEM_240>
    this_3(D)->_pri = _127;
    goto <bb 44>;

  }
  bb_40 (preds = {bb_2 }, succs = {bb_45 bb_41 })
  {
    <bb 40>:
    # DEBUG D#27 => &D.45145
    # DEBUG this => D#27
    # DEBUG D#26 => D#27
    # DEBUG this => D#26
    # DEBUG D#186 => &D.45145
    # DEBUG this => &D.45146
    # DEBUG __s => "Trying to remove flit from empty buffer."
    # DEBUG __a => D#186
    # DEBUG D#185 => D#186
    # DEBUG this => &D.45146
    # DEBUG D#183 => &D.45146._M_dataplus
    # DEBUG D#72 => D#185
    # DEBUG this => D#183
    # DEBUG __dat => &D.45146.D.12341._M_local_buf
    # DEBUG __a => D#72
    # DEBUG D#71 => D#72
    # DEBUG D#69 => D#183
    # DEBUG D#70 => D#71
    # DEBUG this => D#69
    # DEBUG __a => D#70
    # DEBUG D#68 => D#70
    # DEBUG D#67 => D#69
    # DEBUG this => D#67
    # DEBUG D.49188 => D#68
    # .MEM_304 = VDEF <.MEM_4(D)>
    MEM[(struct _Alloc_hider *)&D.45146]._M_p = &D.45146.D.12341._M_local_buf;
    # DEBUG __s => "Trying to remove flit from empty buffer."
    # DEBUG this => &D.45146
    # DEBUG __beg => "Trying to remove flit from empty buffer."
    # DEBUG __end => &MEM[(void *)"Trying to remove flit from empty buffer." + 40B]
    # DEBUG this => &D.45146
    # DEBUG __beg => "Trying to remove flit from empty buffer."
    # DEBUG __end => &MEM[(void *)"Trying to remove flit from empty buffer." + 40B]
    # DEBUG this => &D.45146
    # DEBUG __beg => "Trying to remove flit from empty buffer."
    # DEBUG __end => &MEM[(void *)"Trying to remove flit from empty buffer." + 40B]
    # DEBUG __ptr => "Trying to remove flit from empty buffer."
    # DEBUG __first => "Trying to remove flit from empty buffer."
    # DEBUG __last => &MEM[(void *)"Trying to remove flit from empty buffer." + 40B]
    # DEBUG D#189 => &__first
    # DEBUG D.50152 => D#189
    # DEBUG __first => "Trying to remove flit from empty buffer."
    # DEBUG __last => &MEM[(void *)"Trying to remove flit from empty buffer." + 40B]
    # .MEM_305 = VDEF <.MEM_304>
    __dnew = 40;
    # .MEM_306 = VDEF <.MEM_305>
    _231 = std::__cxx11::basic_string<char>::_M_create (&D.45146, &__dnew, 0);
    # DEBUG D#7 => &D.45146
    # DEBUG __p => _231
    # DEBUG this => D#7
    # .MEM_307 = VDEF <.MEM_306>
    MEM[(char * *)&D.45146] = _231;
    # VUSE <.MEM_307>
    __dnew.42_232 = __dnew;
    # DEBUG D#8 => &D.45146
    # DEBUG __capacity => __dnew.42_232
    # DEBUG this => D#8
    # .MEM_308 = VDEF <.MEM_307>
    MEM[(size_type *)&D.45146 + 16B] = __dnew.42_232;
    # DEBUG D#1 => &D.45146
    # DEBUG this => D#1
    # DEBUG __p => _231
    # DEBUG __k1 => "Trying to remove flit from empty buffer."
    # DEBUG __k2 => &MEM[(void *)"Trying to remove flit from empty buffer." + 40B]
    # DEBUG __d => _231
    # DEBUG __s => "Trying to remove flit from empty buffer."
    # DEBUG __n => 40
    # DEBUG __s1 => _231
    # DEBUG __s2 => "Trying to remove flit from empty buffer."
    # DEBUG __n => 40
    # .MEM_310 = VDEF <.MEM_308>
    __builtin_memcpy (_231, "Trying to remove flit from empty buffer.", 40);
    # VUSE <.MEM_310>
    __dnew.42_235 = __dnew;
    # DEBUG this => &D.45146
    # DEBUG __n => __dnew.42_235
    # DEBUG D#9 => &D.45146
    # DEBUG __length => __dnew.42_235
    # DEBUG this => D#9
    # .MEM_311 = VDEF <.MEM_310>
    MEM[(size_type *)&D.45146 + 8B] = __dnew.42_235;
    # VUSE <.MEM_311>
    _236 = MEM[(char * *)&D.45146];
    # DEBUG D#1 => &D.45146
    # DEBUG this => D#1
    _237 = _236 + __dnew.42_235;
    # DEBUG __c1 => _237
    # DEBUG __c2 => D#10
    # .MEM_312 = VDEF <.MEM_311>
    MEM[(char_type &)_237] = 0;
    # .MEM_313 = VDEF <.MEM_312>
    __dnew ={v} {CLOBBER};
    _15 = &this_3(D)->D.44977;
    # .MEM_16 = VDEF <.MEM_313>
    Module::Error (_15, &D.45146);

  }
  bb_41 (preds = {bb_40 }, succs = {bb_42 bb_43 })
  {
    <bb 41>:
    # DEBUG this => &D.45146
    # DEBUG this => &D.45146
    # DEBUG this => &D.45146
    # VUSE <.MEM_16>
    _19 = MEM[(char * *)&D.45146];
    # DEBUG D#1 => &D.45146
    # DEBUG this => D#1
    # DEBUG this => &D.45146
    if (&D.45146.D.12341._M_local_buf != _19)
      goto <bb 42>;
    else
      goto <bb 43>;

  }
  bb_42 (preds = {bb_41 }, succs = {bb_43 })
  {
    <bb 42>:
    # DEBUG D#94 => D.45146.D.12341._M_allocated_capacity
    # DEBUG D#93 => D#94
    # DEBUG this => &D.45146
    # DEBUG __size => D#93
    # DEBUG D#92 => D#93
    # DEBUG D#1 => &D.45146
    # DEBUG this => D#1
    # DEBUG this => &D.45146
    # DEBUG D#91 => &D.45146._M_dataplus
    # DEBUG D#89 => D#91
    # DEBUG D#90 => D#92 + 1
    # DEBUG __p => _19
    # DEBUG __a => D#89
    # DEBUG __n => D#90
    # DEBUG D#88 => D#90
    # DEBUG D#87 => D#89
    # DEBUG D#85 => D#87
    # DEBUG D#86 => D#88
    # DEBUG __p => _19
    # DEBUG this => D#85
    # DEBUG D.50110 => D#86
    # .MEM_29 = VDEF <.MEM_16>
    operator delete (_19);

  }
  bb_43 (preds = {bb_41 bb_42 }, succs = {bb_44 })
  {
    <bb 43>:
    # .MEM_20 = PHI <.MEM_16(41), .MEM_29(42)>
    # DEBUG D#95 => &D.45146._M_dataplus
    # DEBUG this => D#95
    # DEBUG this => D#95
    # DEBUG this => D#95
    # .MEM_18 = VDEF <.MEM_20>
    D.45146 ={v} {CLOBBER};
    # DEBUG this => &D.45145
    # DEBUG this => &D.45145

  }
  bb_44 (preds = {bb_8 bb_43 bb_6 bb_52 bb_9 }, succs = {bb_53 })
  {
    <bb 44>:
    # f_1 = PHI <f_6(8), 0B(43), f_6(6), f_6(52), f_6(9)>
    # .MEM_2 = PHI <.MEM_248(8), .MEM_18(43), .MEM_11(6), .MEM_303(52), .MEM_11(9)>

  }
  bb_53 (preds = {bb_44 }, succs = {bb_1 })
  {
    <bb 53>:
    # DEBUG f => f_1
    # VUSE <.MEM_2>
    return f_1;

  }
  bb_45 (preds = {bb_40 }, succs = {bb_46 bb_47 })
  {
  <L4>:
    # DEBUG this => &D.45146
    # DEBUG this => &D.45146
    # DEBUG this => &D.45146
    # VUSE <.MEM_16>
    _17 = MEM[(char * *)&D.45146];
    # DEBUG D#1 => &D.45146
    # DEBUG this => D#1
    # DEBUG this => &D.45146
    if (&D.45146.D.12341._M_local_buf != _17)
      goto <bb 46>;
    else
      goto <bb 47>;

  }
  bb_46 (preds = {bb_45 }, succs = {bb_47 })
  {
    <bb 46>:
    # DEBUG D#94 => D.45146.D.12341._M_allocated_capacity
    # DEBUG D#93 => D#94
    # DEBUG this => &D.45146
    # DEBUG __size => D#93
    # DEBUG D#92 => D#93
    # DEBUG D#1 => &D.45146
    # DEBUG this => D#1
    # DEBUG this => &D.45146
    # DEBUG D#91 => &D.45146._M_dataplus
    # DEBUG D#89 => D#91
    # DEBUG D#90 => D#92 + 1
    # DEBUG __p => _17
    # DEBUG __a => D#89
    # DEBUG __n => D#90
    # DEBUG D#88 => D#90
    # DEBUG D#87 => D#89
    # DEBUG D#85 => D#87
    # DEBUG D#86 => D#88
    # DEBUG __p => _17
    # DEBUG this => D#85
    # DEBUG D.50125 => D#86
    # .MEM_34 = VDEF <.MEM_16>
    operator delete (_17);

  }
  bb_47 (preds = {bb_45 bb_46 }, succs = {})
  {
    <bb 47>:
    # .MEM_26 = PHI <.MEM_16(45), .MEM_34(46)>
    # DEBUG D#95 => &D.45146._M_dataplus
    # DEBUG this => D#95
    # DEBUG this => D#95
    # DEBUG this => D#95
    # .MEM_21 = VDEF <.MEM_26>
    D.45146 ={v} {CLOBBER};
    resx 2

  }
  loop_1 (header = 14, latch = 21, niter = , upper_bound = 0x0fffffffffffffffd)
  {
    bb_14 (preds = {bb_13 bb_21 }, succs = {bb_48 bb_49 })
    {
      <bb 14>:
      # .MEM_301 = PHI <.MEM_11(13), .MEM_264(21)>
      # i_184 = PHI <1(13), i_100(21)>
      # f_187 = PHI <f_67(13), f_130(21)>
      # prephitmp_323 = PHI <pretmp_322(13), prephitmp_318(21)>
      # DEBUG i => i_184
      # DEBUG df => f_187
      # DEBUG D#80 => &this_3(D)->_buffer
      # DEBUG this => D#80
      # DEBUG D#41 => &MEM[(const struct deque *)D#80].D.44879._M_impl._M_start
      # DEBUG D#42 => &MEM[(const struct deque *)D#80].D.44879._M_impl._M_finish
      # DEBUG __x => D#42
      # DEBUG __y => D#41
      # DEBUG __size => 8
      # DEBUG D#79 => &this_3(D)->_buffer
      # DEBUG this => D#79
      # DEBUG __n => i_184
      __n.70_93 = (long int) i_184;
      # DEBUG D#260 => &MEM[(struct deque *)this_3(D) + 96B].D.44879._M_impl._M_start
      # DEBUG this => D#260
      # DEBUG __n => __n.70_93
      # DEBUG this => D#260
      # DEBUG __n => __n.70_93
      # DEBUG this => &__tmp
      # DEBUG __x => D#260
      # DEBUG this => &__tmp
      # DEBUG __n => __n.70_93
      __offset_145 = __n.70_93 + pretmp_230;
      # DEBUG __offset => __offset_145
      # DEBUG __size => 8
      _182 = (unsigned long) __offset_145;
      if (_182 <= 63)
        goto <bb 48>;
      else
        goto <bb 49>;

    }
    bb_15 (preds = {bb_49 }, succs = {bb_17 })
    {
      <bb 15>:
      # DEBUG __size => 8
      iftmp.74_150 = __offset_145 >> 6;
      goto <bb 17>;

    }
    bb_16 (preds = {bb_49 }, succs = {bb_17 })
    {
      <bb 16>:
      _152 = ~_182;
      # DEBUG __size => 8
      _153 = _152 >> 6;
      _154 = (long int) _153;
      iftmp.74_155 = ~_154;

    }
    bb_17 (preds = {bb_15 bb_16 }, succs = {bb_51 })
    {
      <bb 17>:
      # iftmp.74_157 = PHI <iftmp.74_150(15), iftmp.74_155(16)>

    }
    bb_51 (preds = {bb_17 }, succs = {bb_18 })
    {
      <bb 51>:
      # DEBUG __node_offset => iftmp.74_157
      __node_offset.76_158 = (long unsigned int) iftmp.74_157;
      _159 = __node_offset.76_158 * 8;
      _160 = _202 + _159;
      # DEBUG this => &__tmp
      # DEBUG __new_node => _160
      # VUSE <.MEM_301>
      _161 = *_160;
      # DEBUG __size => 8
      # DEBUG __size => 8
      _163 = iftmp.74_157 * 64;
      _164 = __offset_145 - _163;
      _165 = (long unsigned int) _164;
      _166 = _165 * 8;
      __tmp$_M_cur_167 = _161 + _166;
      # DEBUG __tmp$_M_cur => __tmp$_M_cur_167

    }
    bb_18 (preds = {bb_48 bb_51 }, succs = {bb_19 bb_20 })
    {
      <bb 18>:
      # __tmp$_M_cur_253 = PHI <__tmp$_M_cur_149(48), __tmp$_M_cur_167(51)>
      # DEBUG __tmp$_M_cur => __tmp$_M_cur_253
      # DEBUG this => &D.51643
      # DEBUG __x => NULL
      # .MEM_263 = VDEF <.MEM_301>
      __tmp ={v} {CLOBBER};
      # DEBUG D#28 => &D.51643
      # DEBUG this => D#28
      # .MEM_264 = VDEF <.MEM_263>
      D.51643 ={v} {CLOBBER};
      # VUSE <.MEM_264>
      f_96 = *__tmp$_M_cur_253;
      # DEBUG bf => f_96
      # VUSE <.MEM_264>
      _97 = f_96->pri;
      if (_97 > prephitmp_323)
        goto <bb 19>;
      else
        goto <bb 20>;

    }
    bb_19 (preds = {bb_18 }, succs = {bb_20 })
    {
      <bb 19>:

    }
    bb_20 (preds = {bb_18 bb_19 }, succs = {bb_21 bb_22 })
    {
      <bb 20>:
      # f_130 = PHI <f_187(18), f_96(19)>
      # prephitmp_318 = PHI <prephitmp_323(18), _97(19)>
      # DEBUG df => f_130
      i_100 = i_184 + 1;
      # DEBUG i => i_100
      # DEBUG i => i_100
      # DEBUG df => f_130
      # DEBUG D#80 => &this_3(D)->_buffer
      # DEBUG this => D#80
      # DEBUG D#41 => &MEM[(const struct deque *)D#80].D.44879._M_impl._M_start
      # DEBUG D#42 => &MEM[(const struct deque *)D#80].D.44879._M_impl._M_finish
      # DEBUG __x => D#42
      # DEBUG __y => D#41
      # DEBUG __size => 8
      if (i_100 < _241)
        goto <bb 21>;
      else
        goto <bb 22>;

    }
    bb_21 (preds = {bb_20 }, succs = {bb_14 })
    {
      <bb 21>:
      goto <bb 14>;

    }
    bb_48 (preds = {bb_14 }, succs = {bb_18 })
    {
      <bb 48>:
      _148 = i_184 * 8;
      __tmp$_M_cur_149 = prephitmp_91 + _148;
      # DEBUG __tmp$_M_cur => __tmp$_M_cur_149
      goto <bb 18>;

    }
    bb_49 (preds = {bb_14 }, succs = {bb_15 bb_16 })
    {
      <bb 49>:
      if (__offset_145 > 0)
        goto <bb 15>;
      else
        goto <bb 16>;

    }
  }
}

Pass statistics:
----------------

Flit* VC::RemoveFlit() (struct VCD.43951 * const thisD.45141)
Eh tree:
   2 cleanup land:{2,<L4>}
{
  struct FlitD.32424 * * __tmp$_M_curD.51734;
  size_typeD.12304 __dnewD.51707;
  char_typeD.17540 D.51687;
  charD.10 __cD.51686;
  char_typeD.17540 D.51684;
  charD.10 __cD.51683;
  char_typeD.20619 D.51681;
  struct basic_ostreamD.4635 & D.51675;
  char_typeD.17540 D.51672;
  charD.10 __cD.51671;
  char_typeD.17540 D.51669;
  charD.10 __cD.51668;
  char_typeD.20619 D.51666;
  struct basic_ostreamD.4635 & D.51660;
  const difference_typeD.44227 __offsetD.51653;
  struct _SelfD.44228 & D.51657;
  struct _SelfD.44228 __tmpD.51646;
  struct FlitD.32424 * fD.51604;
  size_tD.3655 iD.51634;
  struct _SelfD.44228 D.51643;
  struct FlitD.32424 * fD.45143;
  const struct stringD.3647 D.45146;
  struct FlitD.32424 * * const _5;
  long intD.12 _7;
  intD.9 _8;
  intD.9 _10;
  struct FlitD.32424 * * const _13;
  struct ModuleD.32543 * _15;
  charD.10 * const _17;
  charD.10 * const _19;
  struct FlitD.32424 * * _23;
  struct FlitD.32424 * * _24;
  struct FlitD.32424 * * _25;
  struct FlitD.32424 * * _39;
  struct FlitD.32424 * * * _40;
  struct FlitD.32424 * * * _41;
  struct FlitD.32424 * * _42;
  struct FlitD.32424 * * _43;
  ePrioTypeD.44886 _45;
  struct FlitD.32424 * * * _46;
  long intD.12 _47;
  struct FlitD.32424 * * * _48;
  long intD.12 _49;
  long intD.12 _50;
  long intD.12 _51;
  long intD.12 _52;
  long intD.12 _53;
  long intD.12 _54;
  struct FlitD.32424 * * _55;
  long intD.12 _56;
  long intD.12 _57;
  long intD.12 _58;
  long intD.12 _59;
  long intD.12 _61;
  long intD.12 _62;
  long intD.12 _63;
  long intD.12 _64;
  difference_typeD.44227 _65;
  intD.9 _66;
  intD.9 _68;
  struct FlitD.32424 * * const pretmp_89;
  struct FlitD.32424 * * const prephitmp_90;
  struct FlitD.32424 * * const prephitmp_91;
  struct FlitD.32424 * * const prephitmp_92;
  long intD.12 __n.70_93;
  intD.9 _97;
  boolD.2757 _101;
  boolD.2757 _102;
  intD.9 _103;
  intD.9 _104;
  intD.9 _105;
  struct ostreamD.4636 * gWatchOut.69_106;
  struct basic_ostreamD.4635 & _107;
  const size_typeD.12304 _108;
  long intD.12 _109;
  charD.10 * const _110;
  struct basic_ostreamD.4635 & _111;
  struct basic_ostreamD.4635 & _112;
  struct basic_ostreamD.4635 & _113;
  boolD.2757 _115;
  intD.9 _116;
  intD.9 _117;
  intD.9 _118;
  struct ostreamD.4636 * gWatchOut.69_119;
  struct basic_ostreamD.4635 & _120;
  const size_typeD.12304 _121;
  long intD.12 _122;
  charD.10 * const _123;
  struct basic_ostreamD.4635 & _124;
  struct basic_ostreamD.4635 & _125;
  struct basic_ostreamD.4635 & _126;
  intD.9 _127;
  long intD.12 pretmp_128;
  struct FlitD.32424 * * _137;
  long intD.12 _138;
  intD.9 pretmp_141;
  long intD.12 _146;
  intD.9 pretmp_147;
  long unsigned intD.14 _148;
  long intD.12 iftmp.74_150;
  long unsigned intD.14 _152;
  long unsigned intD.14 _153;
  long intD.12 _154;
  long intD.12 iftmp.74_155;
  long intD.12 iftmp.74_157;
  long unsigned intD.14 __node_offset.76_158;
  long unsigned intD.14 _159;
  struct FlitD.32424 * * * _160;
  struct FlitD.32424 * * _161;
  long intD.12 _162;
  long intD.12 _163;
  long intD.12 _164;
  long unsigned intD.14 _165;
  long unsigned intD.14 _166;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _168;
  long intD.12 _169;
  sizetype _170;
  struct basic_iosD.4629 * _171;
  struct basic_ostreamD.4635 & _174;
  long intD.12 _175;
  const struct __ctype_typeD.20624 * _176;
  charD.10 _177;
  struct FlitD.32424 * * const pretmp_178;
  char_typeD.17540 _180;
  long intD.12 _181;
  unsigned long _182;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _185;
  intD.9 (*__vtbl_ptr_typeD.2760) () _186;
  voidD.45 * PROF_190;
  char_typeD.17540 _192;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _195;
  long intD.12 _196;
  sizetype _197;
  struct basic_iosD.4629 * _198;
  struct basic_ostreamD.4635 & _201;
  struct FlitD.32424 * * * _202;
  const struct __ctype_typeD.20624 * _203;
  charD.10 _204;
  char_typeD.17540 _207;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _212;
  intD.9 (*__vtbl_ptr_typeD.2760) () _213;
  voidD.45 * PROF_217;
  char_typeD.17540 _219;
  struct FlitD.32424 * * * _228;
  long intD.12 pretmp_229;
  long intD.12 pretmp_230;
  charD.10 * _231;
  long unsigned intD.14 __dnew.42_232;
  long unsigned intD.14 __dnew.42_235;
  charD.10 * const _236;
  charD.10 * _237;
  intD.9 prephitmp_238;
  size_typeD.44406 _241;
  difference_typeD.44227 _242;
  long intD.12 _249;
  long intD.12 _250;
  long intD.12 _251;
  long intD.12 _252;
  long intD.12 _254;
  long intD.12 _259;
  long intD.12 _260;
  long intD.12 _261;
  long intD.12 _262;
  intD.9 prephitmp_318;
  intD.9 pretmp_319;
  intD.9 pretmp_320;
  intD.9 prephitmp_321;
  intD.9 pretmp_322;
  intD.9 prephitmp_323;

;;   basic block 2, loop depth 0, count 0, freq 6295, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG fD.45143 => 0B
  # DEBUG D#187ptD.0 => &this_3(D)->_bufferD.44881
  # DEBUG thisD.50089 => D#187ptD.0
  # DEBUG D#17ptD.0 => &MEM[(const struct dequeD.32466 *)D#187ptD.0].D.44879._M_implD.44330._M_startD.44334
  # DEBUG D#18ptD.0 => &MEM[(const struct dequeD.32466 *)D#187ptD.0].D.44879._M_implD.44330._M_finishD.44335
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  _13 = MEM[(struct FlitD.32424 * * *)this_3(D) + 144B];
  # DEBUG D#15ptD.0 => D#18ptD.0
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  _5 = MEM[(struct FlitD.32424 * * *)this_3(D) + 112B];
  # DEBUG D#16ptD.0 => D#17ptD.0
  # DEBUG __xD.50090 => D#15ptD.0
  # DEBUG __yD.50091 => D#16ptD.0
  if (_5 != _13)
    goto <bb 3>;
  else
    goto <bb 40>;
;;    succ:       3 [99.2%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [0.8%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 6246, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [99.2%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#188ptD.0 => &this_3(D)->_bufferD.44881
  # DEBUG thisD.50094 => D#188ptD.0
  # DEBUG thisD.50095 => D#188ptD.0
  # DEBUG D#21ptD.0 => &D#188ptD.0->D.44879._M_implD.44330._M_startD.44334
  # DEBUG thisD.50097 => NULL
  # DEBUG __xD.50096 => D#21ptD.0
  # DEBUG D#31ptD.0 => MEM[(const struct iteratorD.44217 &)D#188ptD.0 + 16]._M_firstD.44230
  # DEBUG D.48942 => D#31ptD.0
  # DEBUG D#30ptD.0 => MEM[(const struct iteratorD.44217 &)D#188ptD.0 + 16]._M_lastD.44231
  # DEBUG D.48943 => D#30ptD.0
  # DEBUG D#29ptD.0 => MEM[(const struct iteratorD.44217 &)D#188ptD.0 + 16]._M_nodeD.44232
  # DEBUG D.48944 => D#29ptD.0
  # DEBUG thisD.48936 => D#28ptD.0
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  f_6 = *_5;
  # DEBUG fD.45143 => f_6
  # DEBUG D#261ptD.0 => &this_3(D)->_bufferD.44881
  # DEBUG thisD.50093 => D#261ptD.0
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  _23 = MEM[(struct dequeD.32466 *)this_3(D) + 96B].D.44879._M_implD.44330._M_startD.44334._M_lastD.44231;
  # PT = nonlocal escaped 
  _24 = _23 + 18446744073709551608;
  if (_5 != _24)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4 [93.3%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [6.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 5826, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [93.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#153ptD.0 => D#261ptD.0->D.44879._M_implD.44330._M_startD.44334._M_curD.44229
  # DEBUG D#152ptD.0 => &D#261ptD.0->D.44879._M_implD.44330
  # DEBUG D#54ptD.0 => D#152ptD.0
  # DEBUG D#55ptD.0 => D#153ptD.0
  # DEBUG __aD.49754 => D#54ptD.0
  # DEBUG __pD.49753 => D#55ptD.0
  # DEBUG D#53ptD.0 => D#55ptD.0
  # DEBUG D#52ptD.0 => D#54ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0
  # DEBUG D#51ptD.0 => D#53ptD.0
  # DEBUG thisD.49121 => D#50ptD.0
  # DEBUG __pD.49120 => D#51ptD.0
  # PT = nonlocal escaped 
  _25 = _5 + 8;
  # .MEM_28 = VDEF <.MEM_4(D)>
  MEM[(struct dequeD.32466 *)this_3(D) + 96B].D.44879._M_implD.44330._M_startD.44334._M_curD.44229 = _25;
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 420, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       3 [6.7%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.51587 => D#261ptD.0
  # DEBUG thisD.51588 => D#261ptD.0
  # DEBUG D#151ptD.0 => D#261ptD.0->D.44879._M_implD.44330._M_startD.44334._M_curD.44229
  # DEBUG D#148ptD.0 => &D#261ptD.0->D.44879
  # DEBUG thisD.49750 => D#148ptD.0
  # DEBUG D#55ptD.0 => D#151ptD.0
  # DEBUG __aD.49749 => D#54ptD.0
  # DEBUG __pD.49748 => D#55ptD.0
  # DEBUG D#53ptD.0 => D#55ptD.0
  # DEBUG D#52ptD.0 => D#54ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0
  # DEBUG D#51ptD.0 => D#53ptD.0
  # DEBUG thisD.49121 => D#50ptD.0
  # DEBUG __pD.49120 => D#51ptD.0
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  _39 = MEM[(struct dequeD.32466 *)this_3(D) + 96B].D.44879._M_implD.44330._M_startD.44334._M_firstD.44230;
  # DEBUG D#150ptD.0 => &D#261ptD.0->D.44879
  # DEBUG D#145ptD.0 => D#150ptD.0
  # DEBUG __pD.51590 => _39
  # DEBUG thisD.51589 => D#145ptD.0
  # DEBUG D#144ptD.0 => D#145ptD.0
  # DEBUG __sizeD.49700 => 8
  # DEBUG D#143ptD.0 => &D#144ptD.0->_M_implD.44330
  # DEBUG D#141ptD.0 => D#143ptD.0
  # DEBUG __pD.51594 => _39
  # DEBUG __aD.51592 => D#141ptD.0
  # DEBUG __nD.51593 => D#142ptD.0
  # DEBUG D#140ptD.0 => D#142ptD.0
  # DEBUG D#139ptD.0 => D#141ptD.0
  # DEBUG D#137ptD.0 => D#139ptD.0
  # DEBUG D#138ptD.0 => D#140ptD.0
  # DEBUG __pD.51597 => _39
  # DEBUG thisD.51595 => D#137ptD.0
  # DEBUG D.51596 => D#138ptD.0
  # .MEM_243 = VDEF <.MEM_4(D)>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZdlPvD.2766 (_39);
  # VUSE <.MEM_243>
  # PT = nonlocal escaped 
  _40 = MEM[(struct dequeD.32466 *)this_3(D) + 96B].D.44879._M_implD.44330._M_startD.44334._M_nodeD.44232;
  # PT = nonlocal escaped 
  _41 = _40 + 8;
  # DEBUG D#149ptD.0 => &D#261ptD.0->D.44879._M_implD.44330._M_startD.44334
  # DEBUG thisD.51599 => D#149ptD.0
  # DEBUG __new_nodeD.51598 => _41
  # .MEM_244 = VDEF <.MEM_243>
  MEM[(struct _Deque_iteratorD.44197 *)this_3(D) + 112B]._M_nodeD.44232 = _41;
  # VUSE <.MEM_244>
  # PT = nonlocal escaped 
  _42 = MEM[(struct FlitD.32424 * * *)_40 + 8B];
  # .MEM_245 = VDEF <.MEM_244>
  MEM[(struct _Deque_iteratorD.44197 *)this_3(D) + 112B]._M_firstD.44230 = _42;
  # DEBUG __sizeD.49022 => 8
  # PT = nonlocal escaped 
  _43 = _42 + 512;
  # .MEM_246 = VDEF <.MEM_245>
  MEM[(struct _Deque_iteratorD.44197 *)this_3(D) + 112B]._M_lastD.44231 = _43;
  # .MEM_247 = VDEF <.MEM_246>
  MEM[(struct dequeD.32466 *)this_3(D) + 96B].D.44879._M_implD.44330._M_startD.44334._M_curD.44229 = _42;
  # VUSE <.MEM_247>
  pretmp_89 = MEM[(struct FlitD.32424 * * *)this_3(D) + 144B];
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 6246, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_22 = PHI <.MEM_247(5), .MEM_28(4)>
  # PT = nonlocal escaped 
  # prephitmp_90 = PHI <pretmp_89(5), _13(4)>
  # PT = nonlocal escaped 
  # prephitmp_91 = PHI <_42(5), _25(4)>
  # PT = nonlocal escaped 
  # prephitmp_92 = PHI <_43(5), _23(4)>
  # VUSE <.MEM_22>
  _8 = f_6->idD.32441;
  # .MEM_9 = VDEF <.MEM_22>
  this_3(D)->_last_idD.44897 = _8;
  # VUSE <.MEM_9>
  _10 = f_6->pidD.32442;
  # .MEM_11 = VDEF <.MEM_9>
  this_3(D)->_last_pidD.44898 = _10;
  # DEBUG thisD.51600 => this_3(D)
  # DEBUG D#76ptD.0 => &this_3(D)->_bufferD.44881
  # DEBUG thisD.49261 => D#76ptD.0
  # DEBUG D#17ptD.0 => &MEM[(const struct dequeD.32466 *)D#76ptD.0].D.44879._M_implD.44330._M_startD.44334
  # DEBUG D#18ptD.0 => &MEM[(const struct dequeD.32466 *)D#76ptD.0].D.44879._M_implD.44330._M_finishD.44335
  # DEBUG D#15ptD.0 => D#18ptD.0
  # DEBUG D#16ptD.0 => D#17ptD.0
  # DEBUG __xD.49262 => D#15ptD.0
  # DEBUG __yD.49263 => D#16ptD.0
  if (prephitmp_90 == prephitmp_91)
    goto <bb 44>;
  else
    goto <bb 7>;
;;    succ:       44 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 5612, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11>
  _45 = this_3(D)->_pri_typeD.44892;
  if (_45 == 1)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [19.9%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [80.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 1117, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [19.9%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#77ptD.0 => &this_3(D)->_bufferD.44881
  # DEBUG thisD.51601 => D#77ptD.0
  # DEBUG D#41ptD.0 => &MEM[(const struct dequeD.32466 *)D#77ptD.0].D.44879._M_implD.44330._M_startD.44334
  # DEBUG D#42ptD.0 => &MEM[(const struct dequeD.32466 *)D#77ptD.0].D.44879._M_implD.44330._M_finishD.44335
  # DEBUG __xD.51603 => D#42ptD.0
  # DEBUG __yD.51602 => D#41ptD.0
  # DEBUG __sizeD.49022 => 8
  # VUSE <.MEM_11>
  # PT = nonlocal escaped 
  _46 = MEM[(const struct _Deque_iteratorD.44197 &)this_3(D) + 144]._M_nodeD.44232;
  _47 = (long intD.12) _46;
  # VUSE <.MEM_11>
  # PT = nonlocal escaped 
  _48 = MEM[(const struct _Deque_iteratorD.44197 &)this_3(D) + 112]._M_nodeD.44232;
  _49 = (long intD.12) _48;
  _50 = _47 - _49;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _51 = _50 /[ex] 8;
  # RANGE [-1152921504606846977, 1152921504606846974]
  _52 = _51 + -1;
  # RANGE [-9223372036854775808, 9223372036854775807] NONZERO 18446744073709551552
  _53 = _52 * 64;
  _54 = (long intD.12) prephitmp_90;
  # VUSE <.MEM_11>
  # PT = nonlocal escaped 
  _55 = MEM[(const struct _Deque_iteratorD.44197 &)this_3(D) + 144]._M_firstD.44230;
  _56 = (long intD.12) _55;
  _57 = _54 - _56;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _58 = _57 /[ex] 8;
  _59 = _53 + _58;
  _61 = (long intD.12) prephitmp_92;
  _62 = (long intD.12) prephitmp_91;
  _63 = _61 - _62;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _64 = _63 /[ex] 8;
  _65 = _59 + _64;
  _66 = (intD.9) _65;
  # .MEM_248 = VDEF <.MEM_11>
  this_3(D)->_priD.44893 = _66;
  goto <bb 44>;
;;    succ:       44 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 4495, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       7 [80.1%]  (FALSE_VALUE,EXECUTABLE)
  if (_45 != 3)
    goto <bb 10>;
  else
    goto <bb 44>;
;;    succ:       10 [80.1%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [19.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 3600, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [80.1%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#78ptD.0 => &this_3(D)->_bufferD.44881
  # DEBUG thisD.49269 => D#78ptD.0
  # DEBUG thisD.49270 => D#78ptD.0
  # DEBUG D#21ptD.0 => &D#78ptD.0->D.44879._M_implD.44330._M_startD.44334
  # DEBUG thisD.49272 => NULL
  # DEBUG __xD.49271 => D#21ptD.0
  # DEBUG D#31ptD.0 => MEM[(const struct iteratorD.44217 &)D#78ptD.0 + 16]._M_firstD.44230
  # DEBUG D.48942 => D#31ptD.0
  # DEBUG D#30ptD.0 => MEM[(const struct iteratorD.44217 &)D#78ptD.0 + 16]._M_lastD.44231
  # DEBUG D.48943 => D#30ptD.0
  # DEBUG D#29ptD.0 => MEM[(const struct iteratorD.44217 &)D#78ptD.0 + 16]._M_nodeD.44232
  # DEBUG D.48944 => D#29ptD.0
  # DEBUG thisD.48936 => D#28ptD.0
  # VUSE <.MEM_11>
  # PT = nonlocal escaped 
  f_67 = *prephitmp_91;
  # DEBUG fD.51604 => f_67
  if (_45 != 0)
    goto <bb 11>;
  else
    goto <bb 32>;
;;    succ:       11 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 1800, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11>
  _68 = this_3(D)->_priority_donationD.44894;
  if (_68 != 0)
    goto <bb 12>;
  else
    goto <bb 32>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG iD.51634 => 1
  # DEBUG dfD.51619 => f_67
  # DEBUG D#80ptD.0 => &this_3(D)->_bufferD.44881
  # DEBUG thisD.51635 => D#80ptD.0
  # DEBUG D#41ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_startD.44334
  # DEBUG D#42ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_finishD.44335
  # DEBUG __xD.51637 => D#42ptD.0
  # DEBUG __yD.51636 => D#41ptD.0
  # DEBUG __sizeD.49022 => 8
  # VUSE <.MEM_11>
  # PT = nonlocal escaped 
  _228 = MEM[(const struct _Deque_iteratorD.44197 &)this_3(D) + 144]._M_nodeD.44232;
  _7 = (long intD.12) _228;
  # VUSE <.MEM_11>
  # PT = nonlocal escaped 
  _202 = MEM[(const struct _Deque_iteratorD.44197 &)this_3(D) + 112]._M_nodeD.44232;
  _249 = (long intD.12) _202;
  _250 = _7 - _249;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _251 = _250 /[ex] 8;
  # RANGE [-1152921504606846977, 1152921504606846974]
  _252 = _251 + -1;
  # RANGE [-9223372036854775808, 9223372036854775807] NONZERO 18446744073709551552
  _259 = _252 * 64;
  _260 = (long intD.12) prephitmp_90;
  # VUSE <.MEM_11>
  # PT = nonlocal escaped 
  _137 = MEM[(const struct _Deque_iteratorD.44197 &)this_3(D) + 144]._M_firstD.44230;
  _261 = (long intD.12) _137;
  _138 = _260 - _261;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _262 = _138 /[ex] 8;
  _254 = _259 + _262;
  _162 = (long intD.12) prephitmp_92;
  _175 = (long intD.12) prephitmp_91;
  _146 = _162 - _175;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _181 = _146 /[ex] 8;
  _242 = _181 + _254;
  # RANGE [0, 18446744073709551615]
  _241 = (size_typeD.44406) _242;
  if (_241 > 1)
    goto <bb 13>;
  else
    goto <bb 32>;
;;    succ:       13 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       12 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11>
  # PT = nonlocal escaped 
  pretmp_178 = MEM[(const struct iteratorD.44217 &)this_3(D) + 112]._M_firstD.44230;
  pretmp_128 = (long intD.12) pretmp_178;
  pretmp_229 = _175 - pretmp_128;
  pretmp_230 = pretmp_229 /[ex] 8;
  # VUSE <.MEM_11>
  pretmp_322 = f_67->priD.32446;
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                21 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_301 = PHI <.MEM_11(13), .MEM_264(21)>
  # RANGE [1, 18446744073709551615]
  # i_184 = PHI <1(13), i_100(21)>
  # PT = nonlocal escaped 
  # f_187 = PHI <f_67(13), f_130(21)>
  # prephitmp_323 = PHI <pretmp_322(13), prephitmp_318(21)>
  # DEBUG iD.51634 => i_184
  # DEBUG dfD.51619 => f_187
  # DEBUG D#80ptD.0 => &this_3(D)->_bufferD.44881
  # DEBUG thisD.51635 => D#80ptD.0
  # DEBUG D#41ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_startD.44334
  # DEBUG D#42ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_finishD.44335
  # DEBUG __xD.51637 => D#42ptD.0
  # DEBUG __yD.51636 => D#41ptD.0
  # DEBUG __sizeD.49022 => 8
  # DEBUG D#79ptD.0 => &this_3(D)->_bufferD.44881
  # DEBUG thisD.51640 => D#79ptD.0
  # DEBUG __nD.51639 => i_184
  # RANGE ~[-1, 0]
  __n.70_93 = (long intD.12) i_184;
  # DEBUG D#260ptD.0 => &MEM[(struct dequeD.32466 *)this_3(D) + 96B].D.44879._M_implD.44330._M_startD.44334
  # DEBUG thisD.51642 => D#260ptD.0
  # DEBUG __nD.51641 => __n.70_93
  # DEBUG thisD.51644 => D#260ptD.0
  # DEBUG __nD.51645 => __n.70_93
  # DEBUG thisD.51648 => &__tmpD.51646
  # DEBUG __xD.51647 => D#260ptD.0
  # DEBUG thisD.51651 => &__tmpD.51646
  # DEBUG __nD.51652 => __n.70_93
  __offset_145 = __n.70_93 + pretmp_230;
  # DEBUG __offsetD.51653 => __offset_145
  # DEBUG __sizeD.49022 => 8
  _182 = (unsigned long) __offset_145;
  if (_182 <= 63)
    goto <bb 48>;
  else
    goto <bb 49>;
;;    succ:       48 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                49 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 1, count 0, freq 4052, maybe hot
;;   Invalid sum of incoming frequencies 4218, should be 4052
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       49 [73.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __sizeD.49022 => 8
  # RANGE [0, 144115188075855871] NONZERO 144115188075855871
  iftmp.74_150 = __offset_145 >> 6;
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 1, count 0, freq 1499, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       49 [27.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE ~[9223372036854775808, 18446744073709551614]
  _152 = ~_182;
  # DEBUG __sizeD.49022 => 8
  # RANGE [0, 288230376151711743] NONZERO 288230376151711743
  _153 = _152 >> 6;
  # RANGE [0, 288230376151711743] NONZERO 288230376151711743
  _154 = (long intD.12) _153;
  # RANGE [-288230376151711744, -1]
  iftmp.74_155 = ~_154;
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 5551, maybe hot
;;    prev block 16, next block 51, flags: (NEW, REACHABLE)
;;    pred:       15 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                16 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [-288230376151711744, 144115188075855871]
  # iftmp.74_157 = PHI <iftmp.74_150(15), iftmp.74_155(16)>
;;    succ:       51 [100.0%]  (FALLTHRU)

;;   basic block 51, loop depth 1, count 0, freq 5551, maybe hot
;;    prev block 17, next block 18, flags: (NEW)
;;    pred:       17 [100.0%]  (FALLTHRU)
  # DEBUG __node_offsetD.51654 => iftmp.74_157
  # RANGE ~[144115188075855872, 18158513697557839871]
  __node_offset.76_158 = (long unsigned intD.14) iftmp.74_157;
  # RANGE [0, 18446744073709551608] NONZERO 18446744073709551608
  _159 = __node_offset.76_158 * 8;
  # PT = nonlocal escaped 
  _160 = _202 + _159;
  # DEBUG thisD.51656 => &__tmpD.51646
  # DEBUG __new_nodeD.51655 => _160
  # VUSE <.MEM_301>
  # PT = nonlocal escaped 
  _161 = *_160;
  # DEBUG __sizeD.49022 => 8
  # DEBUG __sizeD.49022 => 8
  # RANGE [-9223372036854775808, 9223372036854775744] NONZERO 18446744073709551552
  _163 = iftmp.74_157 * 64;
  _164 = __offset_145 - _163;
  # RANGE [0, 18446744073709551615]
  _165 = (long unsigned intD.14) _164;
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _166 = _165 * 8;
  # PT = nonlocal escaped 
  __tmp$_M_cur_167 = _161 + _166;
  # DEBUG __tmp$_M_curD.51734 => __tmp$_M_cur_167
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 51, next block 19, flags: (NEW, REACHABLE)
;;    pred:       48 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                51 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __tmp$_M_cur_253 = PHI <__tmp$_M_cur_149(48), __tmp$_M_cur_167(51)>
  # DEBUG __tmp$_M_curD.51734 => __tmp$_M_cur_253
  # DEBUG thisD.51650 => &D.51643
  # DEBUG __xD.51649 => NULL
  # .MEM_263 = VDEF <.MEM_301>
  __tmpD.51646 ={v} {CLOBBER};
  # DEBUG D#28ptD.0 => &D.51643
  # DEBUG thisD.49253 => D#28ptD.0
  # .MEM_264 = VDEF <.MEM_263>
  D.51643 ={v} {CLOBBER};
  # VUSE <.MEM_264>
  # PT = nonlocal escaped 
  f_96 = *__tmp$_M_cur_253;
  # DEBUG bfD.51638 => f_96
  # VUSE <.MEM_264>
  _97 = f_96->priD.32446;
  if (_97 > prephitmp_323)
    goto <bb 19>;
  else
    goto <bb 20>;
;;    succ:       19 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       18 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       18 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # f_130 = PHI <f_187(18), f_96(19)>
  # prephitmp_318 = PHI <prephitmp_323(18), _97(19)>
  # DEBUG dfD.51619 => f_130
  # RANGE [2, 18446744073709551615]
  i_100 = i_184 + 1;
  # DEBUG iD.51634 => i_100
  # DEBUG iD.51634 => i_100
  # DEBUG dfD.51619 => f_130
  # DEBUG D#80ptD.0 => &this_3(D)->_bufferD.44881
  # DEBUG thisD.51635 => D#80ptD.0
  # DEBUG D#41ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_startD.44334
  # DEBUG D#42ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_finishD.44335
  # DEBUG __xD.51637 => D#42ptD.0
  # DEBUG __yD.51636 => D#41ptD.0
  # DEBUG __sizeD.49022 => 8
  if (i_100 < _241)
    goto <bb 21>;
  else
    goto <bb 22>;
;;    succ:       21 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 21, next block 50, flags: (NEW, REACHABLE)
;;    pred:       20 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # f_316 = PHI <f_130(20)>
;;    succ:       50 [100.0%]  (FALLTHRU)

;;   basic block 50, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 22, next block 23, flags: (NEW)
;;    pred:       22 [100.0%]  (FALLTHRU)
  if (f_67 != f_316)
    goto <bb 23>;
  else
    goto <bb 32>;
;;    succ:       23 [93.4%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [6.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 50, next block 24, flags: (NEW, REACHABLE)
;;    pred:       50 [93.4%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_264>
  _101 = f_316->watchD.32448;
  if (_101 != 0)
    goto <bb 25>;
  else
    goto <bb 24>;
;;    succ:       25 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 543, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_264>
  _102 = f_67->watchD.32448;
  if (_102 != 0)
    goto <bb 25>;
  else
    goto <bb 39>;
;;    succ:       25 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 493, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       24 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_264>
  _103 = f_67->idD.32441;
  # VUSE <.MEM_264>
  _104 = f_316->idD.32441;
  # DEBUG D#81ptD.0 => &this_3(D)->D.44977
  # DEBUG thisD.49310 => D#81ptD.0
  # .MEM_265 = VDEF <.MEM_264>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _105 = _Z10GetSimTimevD.26752 ();
  # VUSE <.MEM_265>
  # PT = nonlocal escaped 
  gWatchOut.69_106 = gWatchOutD.26762;
  # .MEM_266 = VDEF <.MEM_265>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _107 = _ZNSolsEiD.21315 (gWatchOut.69_106, _105);
  # DEBUG __outD.51621 => _107
  # DEBUG __sD.51620 => " | "
  # DEBUG __sD.49308 => " | "
  # .MEM_267 = VDEF <.MEM_266>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_107, " | ", 3);
  # DEBUG __osD.51623 => _107
  # DEBUG __strD.51622 => NULL
  # VUSE <.MEM_267>
  _108 = MEM[(long unsigned intD.14 *)this_3(D) + 48B];
  # DEBUG thisD.48751 => D#2ptD.0
  _109 = (long intD.12) _108;
  # DEBUG thisD.48748 => NULL
  # VUSE <.MEM_267>
  # PT = nonlocal escaped 
  _110 = MEM[(charD.10 * *)this_3(D) + 40B];
  # DEBUG thisD.48667 => D#1ptD.0
  # .MEM_268 = VDEF <.MEM_267>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _111 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_107, _110, _109);
  # DEBUG __outD.51625 => _111
  # DEBUG __sD.51624 => " | "
  # DEBUG __sD.49301 => " | "
  # .MEM_269 = VDEF <.MEM_268>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_111, " | ", 3);
  # DEBUG __outD.51627 => _111
  # DEBUG __sD.51626 => "Flit "
  # DEBUG __sD.49297 => "Flit "
  # .MEM_270 = VDEF <.MEM_269>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_111, "Flit ", 5);
  # .MEM_271 = VDEF <.MEM_270>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _112 = _ZNSolsEiD.21315 (_111, _104);
  # DEBUG __outD.51629 => _112
  # DEBUG __sD.51628 => " donates priority to flit "
  # DEBUG __sD.49293 => " donates priority to flit "
  # .MEM_272 = VDEF <.MEM_271>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_112, " donates priority to flit ", 26);
  # .MEM_273 = VDEF <.MEM_272>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _113 = _ZNSolsEiD.21315 (_112, _103);
  # DEBUG __outD.51631 => _113
  # DEBUG __sD.51630 => "."
  # DEBUG __sD.49289 => "."
  # .MEM_274 = VDEF <.MEM_273>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_113, ".", 1);
  # DEBUG thisD.51633 => _113
  # DEBUG __pfD.51632 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.21447
  # DEBUG __osD.51658 => _113
  # VUSE <.MEM_274>
  # PT = nonlocal escaped null { D.45146 D.51707 } (escaped)
  _168 = _113->_vptr.basic_ostreamD.21407;
  # VUSE <.MEM_274>
  _169 = MEM[(long intD.12 *)_168 + -24B];
  # RANGE [0, 18446744073709551615]
  _170 = (sizetype) _169;
  # PT = nonlocal escaped 
  _171 = _113 + _170;
  # DEBUG thisD.51661 => _171
  # DEBUG __cD.51662 => 10
  # VUSE <.MEM_274>
  # PT = nonlocal escaped 
  _176 = MEM[(const struct basic_iosD.4629 *)_171]._M_ctypeD.20631;
  # DEBUG __fD.51663 => _176
  if (_176 == 0B)
    goto <bb 26>;
  else
    goto <bb 27>;
;;    succ:       26 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 0
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       25 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_317 = PHI <.MEM_274(25), .MEM_293(33)>
  # .MEM_283 = VDEF <.MEM_317>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZSt16__throw_bad_castvD.4760 ();
;;    succ:      

;;   basic block 27, loop depth 0, count 0, freq 493, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       25 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.51665 => _176
  # DEBUG __cD.51664 => 10
  # VUSE <.MEM_274>
  _177 = MEM[(const struct ctypeD.7865 *)_176]._M_widen_okD.17546;
  if (_177 != 0)
    goto <bb 28>;
  else
    goto <bb 29>;
;;    succ:       28 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 301, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       27 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_274>
  _180 = MEM[(const struct ctypeD.7865 *)_176]._M_widenD.17547[10];
  pretmp_319 = (intD.9) _180;
  goto <bb 31>;
;;    succ:       31 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 192, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       27 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.51667 => _176
  # DEBUG __cD.51668 => 10
  # .MEM_275 = VDEF <.MEM_274>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.17654 (_176);
  # VUSE <.MEM_275>
  # PT = nonlocal escaped 
  _185 = MEM[(const struct ctypeD.7865 *)_176].D.17687._vptr.facetD.14305;
  # VUSE <.MEM_275>
  # PT = nonlocal escaped 
  _186 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_185 + 48B];
  # PT = anything 
  PROF_190 = [obj_type_ref] OBJ_TYPE_REF(_186;(const struct ctypeD.7865)_176->6);
  if (PROF_190 == _ZNKSt5ctypeIcE8do_widenEcD.17635)
    goto <bb 31>;
  else
    goto <bb 30>;
;;    succ:       31 [83.3%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [16.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 32, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [16.7%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_276 = VDEF <.MEM_275>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _192 = OBJ_TYPE_REF(_186;(const struct ctypeD.7865)_176->6) (_176, 10);
  pretmp_320 = (intD.9) _192;
;;    succ:       31 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 493, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       28 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                29 [83.3%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_216 = PHI <.MEM_274(28), .MEM_275(29), .MEM_276(30)>
  # RANGE [-128, 127]
  # prephitmp_321 = PHI <pretmp_319(28), 10(29), pretmp_320(30)>
  # .MEM_280 = VDEF <.MEM_216>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _174 = _ZNSo3putEcD.21342 (_113, prephitmp_321);
  # DEBUG __osD.51659 => _174
  # .MEM_281 = VDEF <.MEM_280>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZNSo5flushEvD.21353 (_174);
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 3328, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       10 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                50 [6.6%]  (FALSE_VALUE,EXECUTABLE)
;;                12 [9.0%]  (FALSE_VALUE,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # f_114 = PHI <f_67(10), f_67(11), f_316(50), f_67(12), f_316(31)>
  # .MEM_189 = PHI <.MEM_11(10), .MEM_11(11), .MEM_264(50), .MEM_11(12), .MEM_281(31)>
  # DEBUG fD.51604 => f_114
  # VUSE <.MEM_189>
  _115 = f_114->watchD.32448;
  if (_115 != 0)
    goto <bb 33>;
  else
    goto <bb 39>;
;;    succ:       33 [31.4%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [68.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 1044, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       32 [31.4%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_189>
  _116 = f_114->priD.32446;
  # VUSE <.MEM_189>
  _117 = f_114->idD.32441;
  # DEBUG D#82ptD.0 => &this_3(D)->D.44977
  # DEBUG thisD.49338 => D#82ptD.0
  # .MEM_284 = VDEF <.MEM_189>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _118 = _Z10GetSimTimevD.26752 ();
  # VUSE <.MEM_284>
  # PT = nonlocal escaped 
  gWatchOut.69_119 = gWatchOutD.26762;
  # .MEM_285 = VDEF <.MEM_284>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _120 = _ZNSolsEiD.21315 (gWatchOut.69_119, _118);
  # DEBUG __outD.51606 => _120
  # DEBUG __sD.51605 => " | "
  # DEBUG __sD.49336 => " | "
  # .MEM_286 = VDEF <.MEM_285>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_120, " | ", 3);
  # DEBUG __osD.51608 => _120
  # DEBUG __strD.51607 => NULL
  # VUSE <.MEM_286>
  _121 = MEM[(long unsigned intD.14 *)this_3(D) + 48B];
  # DEBUG thisD.48751 => D#2ptD.0
  _122 = (long intD.12) _121;
  # DEBUG thisD.48748 => NULL
  # VUSE <.MEM_286>
  # PT = nonlocal escaped 
  _123 = MEM[(charD.10 * *)this_3(D) + 40B];
  # DEBUG thisD.48667 => D#1ptD.0
  # .MEM_287 = VDEF <.MEM_286>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _124 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_120, _123, _122);
  # DEBUG __outD.51610 => _124
  # DEBUG __sD.51609 => " | "
  # DEBUG __sD.49329 => " | "
  # .MEM_288 = VDEF <.MEM_287>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_124, " | ", 3);
  # DEBUG __outD.51612 => _124
  # DEBUG __sD.51611 => "Flit "
  # DEBUG __sD.49325 => "Flit "
  # .MEM_289 = VDEF <.MEM_288>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_124, "Flit ", 5);
  # .MEM_290 = VDEF <.MEM_289>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _125 = _ZNSolsEiD.21315 (_124, _117);
  # DEBUG __outD.51614 => _125
  # DEBUG __sD.51613 => " sets priority to "
  # DEBUG __sD.49321 => " sets priority to "
  # .MEM_291 = VDEF <.MEM_290>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_125, " sets priority to ", 18);
  # .MEM_292 = VDEF <.MEM_291>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _126 = _ZNSolsEiD.21315 (_125, _116);
  # DEBUG __outD.51616 => _126
  # DEBUG __sD.51615 => "."
  # DEBUG __sD.49317 => "."
  # .MEM_293 = VDEF <.MEM_292>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_126, ".", 1);
  # DEBUG thisD.51618 => _126
  # DEBUG __pfD.51617 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.21447
  # DEBUG __osD.51673 => _126
  # VUSE <.MEM_293>
  # PT = nonlocal escaped null { D.45146 D.51707 } (escaped)
  _195 = _126->_vptr.basic_ostreamD.21407;
  # VUSE <.MEM_293>
  _196 = MEM[(long intD.12 *)_195 + -24B];
  # RANGE [0, 18446744073709551615]
  _197 = (sizetype) _196;
  # PT = nonlocal escaped 
  _198 = _126 + _197;
  # DEBUG thisD.51676 => _198
  # DEBUG __cD.51677 => 10
  # VUSE <.MEM_293>
  # PT = nonlocal escaped 
  _203 = MEM[(const struct basic_iosD.4629 *)_198]._M_ctypeD.20631;
  # DEBUG __fD.51678 => _203
  if (_203 == 0B)
    goto <bb 26>;
  else
    goto <bb 34>;
;;    succ:       26 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 1044, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       33 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.51680 => _203
  # DEBUG __cD.51679 => 10
  # VUSE <.MEM_293>
  _204 = MEM[(const struct ctypeD.7865 *)_203]._M_widen_okD.17546;
  if (_204 != 0)
    goto <bb 35>;
  else
    goto <bb 36>;
;;    succ:       35 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 637, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       34 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_293>
  _207 = MEM[(const struct ctypeD.7865 *)_203]._M_widenD.17547[10];
  pretmp_141 = (intD.9) _207;
  goto <bb 38>;
;;    succ:       38 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 407, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       34 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.51682 => _203
  # DEBUG __cD.51683 => 10
  # .MEM_294 = VDEF <.MEM_293>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.17654 (_203);
  # VUSE <.MEM_294>
  # PT = nonlocal escaped 
  _212 = MEM[(const struct ctypeD.7865 *)_203].D.17687._vptr.facetD.14305;
  # VUSE <.MEM_294>
  # PT = nonlocal escaped 
  _213 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_212 + 48B];
  # PT = anything 
  PROF_217 = [obj_type_ref] OBJ_TYPE_REF(_213;(const struct ctypeD.7865)_203->6);
  if (PROF_217 == _ZNKSt5ctypeIcE8do_widenEcD.17635)
    goto <bb 38>;
  else
    goto <bb 37>;
;;    succ:       38 [82.5%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [17.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 71, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       36 [17.5%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_295 = VDEF <.MEM_294>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _219 = OBJ_TYPE_REF(_213;(const struct ctypeD.7865)_203->6) (_203, 10);
  pretmp_147 = (intD.9) _219;
;;    succ:       38 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 1044, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       35 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                36 [82.5%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_239 = PHI <.MEM_293(35), .MEM_294(36), .MEM_295(37)>
  # RANGE [-128, 127]
  # prephitmp_238 = PHI <pretmp_141(35), 10(36), pretmp_147(37)>
  # .MEM_299 = VDEF <.MEM_239>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _201 = _ZNSo3putEcD.21342 (_126, prephitmp_238);
  # DEBUG __osD.51674 => _201
  # .MEM_300 = VDEF <.MEM_299>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZNSo5flushEvD.21353 (_201);
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 3599, maybe hot
;;    prev block 38, next block 52, flags: (NEW, REACHABLE)
;;    pred:       32 [68.6%]  (FALSE_VALUE,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                24 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_240 = PHI <.MEM_189(32), .MEM_300(38), .MEM_264(24)>
  # PT = nonlocal escaped 
  # f_258 = PHI <f_114(32), f_114(38), f_316(24)>
;;    succ:       52 [100.0%]  (FALLTHRU)

;;   basic block 52, loop depth 0, count 0, freq 3599, maybe hot
;;    prev block 39, next block 40, flags: (NEW)
;;    pred:       39 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_240>
  _127 = f_258->priD.32446;
  # .MEM_303 = VDEF <.MEM_240>
  this_3(D)->_priD.44893 = _127;
  goto <bb 44>;
;;    succ:       44 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 40, loop depth 0, count 0, freq 50, maybe hot
;;    prev block 52, next block 41, flags: (NEW, REACHABLE)
;;    pred:       2 [0.8%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#27ptD.0 => &D.45145
  # DEBUG thisD.50099 => D#27ptD.0
  # DEBUG D#26ptD.0 => D#27ptD.0
  # DEBUG thisD.48915 => D#26ptD.0
  # DEBUG D#186ptD.0 => &D.45145
  # DEBUG thisD.51688 => &D.45146
  # DEBUG __sD.51689 => "Trying to remove flit from empty buffer."
  # DEBUG __aD.51690 => D#186ptD.0
  # DEBUG D#185ptD.0 => D#186ptD.0
  # DEBUG thisD.51700 => &D.45146
  # DEBUG D#183ptD.0 => &D.45146._M_dataplusD.12321
  # DEBUG D#72ptD.0 => D#185ptD.0
  # DEBUG thisD.51703 => D#183ptD.0
  # DEBUG __datD.51702 => &D.45146.D.12341._M_local_bufD.12343
  # DEBUG __aD.51701 => D#72ptD.0
  # DEBUG D#71ptD.0 => D#72ptD.0
  # DEBUG D#69ptD.0 => D#183ptD.0
  # DEBUG D#70ptD.0 => D#71ptD.0
  # DEBUG thisD.49205 => D#69ptD.0
  # DEBUG __aD.49206 => D#70ptD.0
  # DEBUG D#68ptD.0 => D#70ptD.0
  # DEBUG D#67ptD.0 => D#69ptD.0
  # DEBUG thisD.49187 => D#67ptD.0
  # DEBUG D.49188 => D#68ptD.0
  # .MEM_304 = VDEF <.MEM_4(D)>
  MEM[(struct _Alloc_hiderD.12320 *)&D.45146]._M_pD.12327 = &D.45146.D.12341._M_local_bufD.12343;
  # DEBUG __sD.51699 => "Trying to remove flit from empty buffer."
  # DEBUG thisD.51693 => &D.45146
  # DEBUG __begD.51692 => "Trying to remove flit from empty buffer."
  # DEBUG __endD.51691 => &MEM[(voidD.45 *)"Trying to remove flit from empty buffer." + 40B]
  # DEBUG thisD.51697 => &D.45146
  # DEBUG __begD.51696 => "Trying to remove flit from empty buffer."
  # DEBUG __endD.51695 => &MEM[(voidD.45 *)"Trying to remove flit from empty buffer." + 40B]
  # DEBUG thisD.51704 => &D.45146
  # DEBUG __begD.51705 => "Trying to remove flit from empty buffer."
  # DEBUG __endD.51706 => &MEM[(voidD.45 *)"Trying to remove flit from empty buffer." + 40B]
  # DEBUG __ptrD.50223 => "Trying to remove flit from empty buffer."
  # DEBUG __firstD.51730 => "Trying to remove flit from empty buffer."
  # DEBUG __lastD.51729 => &MEM[(voidD.45 *)"Trying to remove flit from empty buffer." + 40B]
  # DEBUG D#189ptD.0 => &__firstD.51730
  # DEBUG D.50152 => D#189ptD.0
  # DEBUG __firstD.51732 => "Trying to remove flit from empty buffer."
  # DEBUG __lastD.51731 => &MEM[(voidD.45 *)"Trying to remove flit from empty buffer." + 40B]
  # .MEM_305 = VDEF <.MEM_304>
  __dnewD.51707 = 40;
  # .MEM_306 = VDEF <.MEM_305>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _231 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.12365 (&D.45146, &__dnewD.51707, 0);
  # DEBUG D#7ptD.0 => &D.45146
  # DEBUG __pD.51726 => _231
  # DEBUG thisD.51725 => D#7ptD.0
  # .MEM_307 = VDEF <.MEM_306>
  MEM[(charD.10 * *)&D.45146] = _231;
  # VUSE <.MEM_307>
  __dnew.42_232 = __dnewD.51707;
  # DEBUG D#8ptD.0 => &D.45146
  # DEBUG __capacityD.51728 => __dnew.42_232
  # DEBUG thisD.51727 => D#8ptD.0
  # .MEM_308 = VDEF <.MEM_307>
  MEM[(size_typeD.12304 *)&D.45146 + 16B] = __dnew.42_232;
  # DEBUG D#1ptD.0 => &D.45146
  # DEBUG thisD.50197 => D#1ptD.0
  # DEBUG __pD.51710 => _231
  # DEBUG __k1D.51709 => "Trying to remove flit from empty buffer."
  # DEBUG __k2D.51708 => &MEM[(voidD.45 *)"Trying to remove flit from empty buffer." + 40B]
  # DEBUG __dD.51713 => _231
  # DEBUG __sD.51712 => "Trying to remove flit from empty buffer."
  # DEBUG __nD.51711 => 40
  # DEBUG __s1D.51716 => _231
  # DEBUG __s2D.51715 => "Trying to remove flit from empty buffer."
  # DEBUG __nD.51714 => 40
  # .MEM_310 = VDEF <.MEM_308>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  memcpyD.992 (_231, "Trying to remove flit from empty buffer.", 40);
  # VUSE <.MEM_310>
  __dnew.42_235 = __dnewD.51707;
  # DEBUG thisD.51720 => &D.45146
  # DEBUG __nD.51719 => __dnew.42_235
  # DEBUG D#9ptD.0 => &D.45146
  # DEBUG __lengthD.51722 => __dnew.42_235
  # DEBUG thisD.51721 => D#9ptD.0
  # .MEM_311 = VDEF <.MEM_310>
  MEM[(size_typeD.12304 *)&D.45146 + 8B] = __dnew.42_235;
  # VUSE <.MEM_311>
  # PT = nonlocal escaped null { D.45146 } (escaped)
  _236 = MEM[(charD.10 * *)&D.45146];
  # DEBUG D#1ptD.0 => &D.45146
  # DEBUG thisD.48775 => D#1ptD.0
  # PT = nonlocal escaped null { D.45146 } (escaped)
  _237 = _236 + __dnew.42_235;
  # DEBUG __c1D.51724 => _237
  # DEBUG __c2D.51723 => D#10ptD.0
  # .MEM_312 = VDEF <.MEM_311>
  MEM[(char_typeD.7431 &)_237] = 0;
  # .MEM_313 = VDEF <.MEM_312>
  __dnewD.51707 ={v} {CLOBBER};
  # PT = nonlocal 
  _15 = &this_3(D)->D.44977;
  [LP 2] # .MEM_16 = VDEF <.MEM_313>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZNK6Module5ErrorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.33313 (_15, &D.45146);
;;    succ:       45 (EH,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 41, loop depth 0, count 0, freq 50, maybe hot
;;    prev block 40, next block 42, flags: (NEW, REACHABLE)
;;    pred:       40 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.50102 => &D.45146
  # DEBUG thisD.50103 => &D.45146
  # DEBUG thisD.50112 => &D.45146
  # VUSE <.MEM_16>
  # PT = nonlocal escaped null { D.45146 } (escaped)
  _19 = MEM[(charD.10 * *)&D.45146];
  # DEBUG D#1ptD.0 => &D.45146
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.50113 => &D.45146
  if (&D.45146.D.12341._M_local_bufD.12343 != _19)
    goto <bb 42>;
  else
    goto <bb 43>;
;;    succ:       42 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                43 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 35, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       41 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => D.45146.D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.50105 => &D.45146
  # DEBUG __sizeD.50104 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => &D.45146
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => &D.45146
  # DEBUG D#91ptD.0 => &D.45146._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.50108 => _19
  # DEBUG __aD.50106 => D#89ptD.0
  # DEBUG __nD.50107 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.50111 => _19
  # DEBUG thisD.50109 => D#85ptD.0
  # DEBUG D.50110 => D#86ptD.0
  # .MEM_29 = VDEF <.MEM_16>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZdlPvD.2766 (_19);
;;    succ:       43 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 43, loop depth 0, count 0, freq 50, maybe hot
;;    prev block 42, next block 44, flags: (NEW, REACHABLE)
;;    pred:       41 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                42 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_20 = PHI <.MEM_16(41), .MEM_29(42)>
  # DEBUG D#95ptD.0 => &D.45146._M_dataplusD.12321
  # DEBUG thisD.50114 => D#95ptD.0
  # DEBUG thisD.50115 => D#95ptD.0
  # DEBUG thisD.50116 => D#95ptD.0
  # .MEM_18 = VDEF <.MEM_20>
  D.45146 ={v} {CLOBBER};
  # DEBUG thisD.50100 => &D.45145
  # DEBUG thisD.50101 => &D.45145
;;    succ:       44 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 44, loop depth 0, count 0, freq 6295, maybe hot
;;    prev block 43, next block 53, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                43 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                52 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [19.9%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped null 
  # f_1 = PHI <f_6(8), 0B(43), f_6(6), f_6(52), f_6(9)>
  # .MEM_2 = PHI <.MEM_248(8), .MEM_18(43), .MEM_11(6), .MEM_303(52), .MEM_11(9)>
;;    succ:       53 [100.0%]  (FALLTHRU)

;;   basic block 53, loop depth 0, count 0, freq 6295, maybe hot
;;    prev block 44, next block 45, flags: (NEW)
;;    pred:       44 [100.0%]  (FALLTHRU)
  # DEBUG fD.45143 => f_1
  # VUSE <.MEM_2>
  return f_1;
;;    succ:       EXIT [100.0%] 

;;   basic block 45, loop depth 0, count 0, freq 0
;;    prev block 53, next block 46, flags: (NEW, REACHABLE)
;;    pred:       40 (EH,EXECUTABLE)
<L4>: [LP 2]
  # DEBUG thisD.50117 => &D.45146
  # DEBUG thisD.50118 => &D.45146
  # DEBUG thisD.50127 => &D.45146
  # VUSE <.MEM_16>
  # PT = nonlocal escaped null { D.45146 } (escaped)
  _17 = MEM[(charD.10 * *)&D.45146];
  # DEBUG D#1ptD.0 => &D.45146
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.50128 => &D.45146
  if (&D.45146.D.12341._M_local_bufD.12343 != _17)
    goto <bb 46>;
  else
    goto <bb 47>;
;;    succ:       46 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 46, loop depth 0, count 0, freq 0
;;    prev block 45, next block 47, flags: (NEW, REACHABLE)
;;    pred:       45 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => D.45146.D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.50120 => &D.45146
  # DEBUG __sizeD.50119 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => &D.45146
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => &D.45146
  # DEBUG D#91ptD.0 => &D.45146._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.50123 => _17
  # DEBUG __aD.50121 => D#89ptD.0
  # DEBUG __nD.50122 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.50126 => _17
  # DEBUG thisD.50124 => D#85ptD.0
  # DEBUG D.50125 => D#86ptD.0
  # .MEM_34 = VDEF <.MEM_16>
  # USE = nonlocal null { D.45146 D.51707 } (escaped)
  # CLB = nonlocal null { D.45146 D.51707 } (escaped)
  _ZdlPvD.2766 (_17);
;;    succ:       47 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 47, loop depth 0, count 0, freq 0
;;    prev block 46, next block 48, flags: (NEW, REACHABLE)
;;    pred:       45 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                46 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_26 = PHI <.MEM_16(45), .MEM_34(46)>
  # DEBUG D#95ptD.0 => &D.45146._M_dataplusD.12321
  # DEBUG thisD.50129 => D#95ptD.0
  # DEBUG thisD.50130 => D#95ptD.0
  # DEBUG thisD.50131 => D#95ptD.0
  # .MEM_21 = VDEF <.MEM_26>
  D.45146 ={v} {CLOBBER};
  resx 2
;;    succ:      

;;   basic block 48, loop depth 1, count 0, freq 3549, maybe hot
;;   Invalid sum of incoming frequencies 4550, should be 3549
;;    prev block 47, next block 49, flags: (NEW, REACHABLE)
;;    pred:       14 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _148 = i_184 * 8;
  # PT = nonlocal escaped 
  __tmp$_M_cur_149 = prephitmp_91 + _148;
  # DEBUG __tmp$_M_curD.51734 => __tmp$_M_cur_149
  goto <bb 18>;
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 49, loop depth 1, count 0, freq 5778, maybe hot
;;   Invalid sum of incoming frequencies 4550, should be 5778
;;    prev block 48, next block 1, flags: (NEW, REACHABLE)
;;    pred:       14 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__offset_145 > 0)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [27.0%]  (FALSE_VALUE,EXECUTABLE)

}



;; Function void VC::UpdatePriority() (_ZN2VC14UpdatePriorityEv, funcdef_no=2152, decl_uid=44936, cgraph_uid=610, symbol_order=612)


Pass statistics:
----------------

void VC::UpdatePriority() (struct VCD.43951 * const thisD.45165)
{
  struct FlitD.32424 * * __tmp$_M_curD.51894;
  char_typeD.17540 D.51892;
  charD.10 __cD.51891;
  char_typeD.17540 D.51889;
  charD.10 __cD.51888;
  char_typeD.20619 D.51886;
  struct basic_ostreamD.4635 & D.51880;
  char_typeD.17540 D.51877;
  charD.10 __cD.51876;
  char_typeD.17540 D.51874;
  charD.10 __cD.51873;
  char_typeD.20619 D.51871;
  struct basic_ostreamD.4635 & D.51865;
  const difference_typeD.44227 __offsetD.51858;
  struct _SelfD.44228 & D.51862;
  struct _SelfD.44228 __tmpD.51851;
  struct _SelfD.44228 D.49283;
  size_tD.3655 iD.45169;
  struct FlitD.32424 * fD.45167;
  struct FlitD.32424 * * * _12;
  ePrioTypeD.44886 _13;
  long intD.12 _14;
  intD.9 _15;
  struct FlitD.32424 * * * _17;
  intD.9 _19;
  intD.9 _21;
  boolD.2757 _24;
  boolD.2757 _25;
  intD.9 _26;
  intD.9 _27;
  struct FlitD.32424 * * const _28;
  intD.9 _30;
  struct ostreamD.4636 * gWatchOut.69_31;
  struct basic_ostreamD.4635 & _33;
  const size_typeD.12304 _34;
  struct basic_ostreamD.4635 & _36;
  struct basic_ostreamD.4635 & _38;
  boolD.2757 _39;
  intD.9 _40;
  intD.9 _41;
  struct FlitD.32424 * * const _42;
  intD.9 _44;
  struct ostreamD.4636 * gWatchOut.69_45;
  struct basic_ostreamD.4635 & _47;
  const size_typeD.12304 _48;
  struct basic_ostreamD.4635 & _50;
  struct basic_ostreamD.4635 & _52;
  long intD.12 _55;
  long intD.12 _56;
  long intD.12 _57;
  long intD.12 _58;
  long intD.12 _59;
  long intD.12 _61;
  struct FlitD.32424 * * _62;
  long intD.12 _63;
  long intD.12 _64;
  long intD.12 _65;
  long intD.12 _66;
  struct FlitD.32424 * * _67;
  long intD.12 _68;
  long intD.12 _69;
  long intD.12 _70;
  long intD.12 _71;
  difference_typeD.44227 _72;
  intD.9 pretmp_94;
  intD.9 pretmp_95;
  long intD.12 __n.70_96;
  long intD.12 pretmp_97;
  struct FlitD.32424 * * const pretmp_98;
  long intD.12 _99;
  charD.10 * const _100;
  struct basic_ostreamD.4635 & _101;
  long intD.12 _102;
  charD.10 * const _103;
  struct basic_ostreamD.4635 & _104;
  const struct __ctype_typeD.20624 * _113;
  const struct __ctype_typeD.20624 * _120;
  long intD.12 _127;
  long intD.12 _128;
  long intD.12 _129;
  difference_typeD.44227 _131;
  long intD.12 _136;
  size_typeD.44406 _137;
  long unsigned intD.14 _138;
  long intD.12 iftmp.74_140;
  long unsigned intD.14 _142;
  long unsigned intD.14 _143;
  long intD.12 _144;
  long intD.12 iftmp.74_145;
  long intD.12 iftmp.74_147;
  long unsigned intD.14 __node_offset.76_148;
  long unsigned intD.14 _149;
  struct FlitD.32424 * * * _150;
  struct FlitD.32424 * * _151;
  long intD.12 _152;
  long intD.12 _153;
  long intD.12 _154;
  long unsigned intD.14 _155;
  long unsigned intD.14 _156;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _158;
  long intD.12 _159;
  sizetype _160;
  struct basic_iosD.4629 * _161;
  long intD.12 _162;
  struct basic_ostreamD.4635 & _164;
  struct FlitD.32424 * * _165;
  charD.10 _166;
  char_typeD.17540 _169;
  unsigned long _171;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _174;
  intD.9 (*__vtbl_ptr_typeD.2760) () _175;
  voidD.45 * PROF_179;
  char_typeD.17540 _181;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _184;
  long intD.12 _185;
  sizetype _186;
  struct basic_iosD.4629 * _187;
  struct basic_ostreamD.4635 & _190;
  charD.10 _192;
  char_typeD.17540 _195;
  long intD.12 _197;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _200;
  intD.9 (*__vtbl_ptr_typeD.2760) () _201;
  long intD.12 _203;
  long intD.12 pretmp_204;
  voidD.45 * PROF_205;
  char_typeD.17540 _207;
  intD.9 pretmp_208;
  intD.9 prephitmp_209;
  struct FlitD.32424 * * * _213;
  long intD.12 _214;
  struct FlitD.32424 * * * _215;
  long intD.12 _216;
  long intD.12 _218;
  long intD.12 _219;
  long intD.12 _220;
  long intD.12 _223;
  long intD.12 _224;
  struct FlitD.32424 * * _226;
  intD.9 prephitmp_231;
  intD.9 prephitmp_235;
  intD.9 prephitmp_239;
  long intD.12 pretmp_244;
  intD.9 pretmp_246;
  intD.9 prephitmp_247;
  intD.9 pretmp_248;
  intD.9 pretmp_249;
  intD.9 prephitmp_250;
  intD.9 pretmp_251;
  intD.9 prephitmp_252;

;;   basic block 2, loop depth 0, count 0, freq 6246, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#76ptD.0 => &this_10(D)->_bufferD.44881
  # DEBUG thisD.49261 => D#76ptD.0
  # DEBUG D#17ptD.0 => &MEM[(const struct dequeD.32466 *)D#76ptD.0].D.44879._M_implD.44330._M_startD.44334
  # DEBUG D#18ptD.0 => &MEM[(const struct dequeD.32466 *)D#76ptD.0].D.44879._M_implD.44330._M_finishD.44335
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  _42 = MEM[(struct FlitD.32424 * * *)this_10(D) + 144B];
  # DEBUG D#15ptD.0 => D#18ptD.0
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  _28 = MEM[(struct FlitD.32424 * * *)this_10(D) + 112B];
  # DEBUG D#16ptD.0 => D#17ptD.0
  # DEBUG __xD.49262 => D#15ptD.0
  # DEBUG __yD.49263 => D#16ptD.0
  if (_28 == _42)
    goto <bb 37>;
  else
    goto <bb 3>;
;;    succ:       37 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 5612, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  _13 = this_10(D)->_pri_typeD.44892;
  if (_13 == 1)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4 [19.9%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [80.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 1117, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [19.9%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#77ptD.0 => &this_10(D)->_bufferD.44881
  # DEBUG thisD.49265 => D#77ptD.0
  # DEBUG D#41ptD.0 => &MEM[(const struct dequeD.32466 *)D#77ptD.0].D.44879._M_implD.44330._M_startD.44334
  # DEBUG D#42ptD.0 => &MEM[(const struct dequeD.32466 *)D#77ptD.0].D.44879._M_implD.44330._M_finishD.44335
  # DEBUG __xD.49267 => D#42ptD.0
  # DEBUG __yD.49266 => D#41ptD.0
  # DEBUG __sizeD.49022 => 8
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  _17 = MEM[(const struct _Deque_iteratorD.44197 &)this_10(D) + 144]._M_nodeD.44232;
  _14 = (long intD.12) _17;
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  _12 = MEM[(const struct _Deque_iteratorD.44197 &)this_10(D) + 112]._M_nodeD.44232;
  _55 = (long intD.12) _12;
  _56 = _14 - _55;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _57 = _56 /[ex] 8;
  # RANGE [-1152921504606846977, 1152921504606846974]
  _58 = _57 + -1;
  # RANGE [-9223372036854775808, 9223372036854775807] NONZERO 18446744073709551552
  _59 = _58 * 64;
  _61 = (long intD.12) _42;
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  _62 = MEM[(const struct _Deque_iteratorD.44197 &)this_10(D) + 144]._M_firstD.44230;
  _63 = (long intD.12) _62;
  _64 = _61 - _63;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _65 = _64 /[ex] 8;
  _66 = _59 + _65;
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  _67 = MEM[(const struct _Deque_iteratorD.44197 &)this_10(D) + 112]._M_lastD.44231;
  _68 = (long intD.12) _67;
  _69 = (long intD.12) _28;
  _70 = _68 - _69;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _71 = _70 /[ex] 8;
  _72 = _66 + _71;
  _15 = (intD.9) _72;
  # .MEM_16 = VDEF <.MEM_11(D)>
  this_10(D)->_priD.44893 = _15;
  goto <bb 37>;
;;    succ:       37 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 4495, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       3 [80.1%]  (FALSE_VALUE,EXECUTABLE)
  if (_13 != 3)
    goto <bb 6>;
  else
    goto <bb 37>;
;;    succ:       6 [80.1%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [19.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 3600, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [80.1%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#78ptD.0 => &this_10(D)->_bufferD.44881
  # DEBUG thisD.49269 => D#78ptD.0
  # DEBUG thisD.49270 => D#78ptD.0
  # DEBUG D#21ptD.0 => &D#78ptD.0->D.44879._M_implD.44330._M_startD.44334
  # DEBUG thisD.49272 => NULL
  # DEBUG __xD.49271 => D#21ptD.0
  # DEBUG D#31ptD.0 => MEM[(const struct iteratorD.44217 &)D#78ptD.0 + 16]._M_firstD.44230
  # DEBUG D.48942 => D#31ptD.0
  # DEBUG D#30ptD.0 => MEM[(const struct iteratorD.44217 &)D#78ptD.0 + 16]._M_lastD.44231
  # DEBUG D.48943 => D#30ptD.0
  # DEBUG D#29ptD.0 => MEM[(const struct iteratorD.44217 &)D#78ptD.0 + 16]._M_nodeD.44232
  # DEBUG D.48944 => D#29ptD.0
  # DEBUG thisD.48936 => D#28ptD.0
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  f_18 = *_28;
  # DEBUG fD.45167 => f_18
  if (_13 != 0)
    goto <bb 7>;
  else
    goto <bb 28>;
;;    succ:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 1800, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  _19 = this_10(D)->_priority_donationD.44894;
  if (_19 != 0)
    goto <bb 8>;
  else
    goto <bb 28>;
;;    succ:       8 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG iD.45169 => 1
  # DEBUG dfD.45168 => f_18
  # DEBUG D#80ptD.0 => &this_10(D)->_bufferD.44881
  # DEBUG thisD.49274 => D#80ptD.0
  # DEBUG D#41ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_startD.44334
  # DEBUG D#42ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_finishD.44335
  # DEBUG __xD.49276 => D#42ptD.0
  # DEBUG __yD.49275 => D#41ptD.0
  # DEBUG __sizeD.49022 => 8
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  _213 = MEM[(const struct _Deque_iteratorD.44197 &)this_10(D) + 144]._M_nodeD.44232;
  _214 = (long intD.12) _213;
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  _215 = MEM[(const struct _Deque_iteratorD.44197 &)this_10(D) + 112]._M_nodeD.44232;
  _216 = (long intD.12) _215;
  _223 = _214 - _216;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _127 = _223 /[ex] 8;
  # RANGE [-1152921504606846977, 1152921504606846974]
  _224 = _127 + -1;
  # RANGE [-9223372036854775808, 9223372036854775807] NONZERO 18446744073709551552
  _128 = _224 * 64;
  _129 = (long intD.12) _42;
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  _226 = MEM[(const struct _Deque_iteratorD.44197 &)this_10(D) + 144]._M_firstD.44230;
  _218 = (long intD.12) _226;
  _219 = _129 - _218;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _152 = _219 /[ex] 8;
  _220 = _128 + _152;
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  _165 = MEM[(const struct _Deque_iteratorD.44197 &)this_10(D) + 112]._M_lastD.44231;
  _136 = (long intD.12) _165;
  _203 = (long intD.12) _28;
  _197 = _136 - _203;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _162 = _197 /[ex] 8;
  _131 = _162 + _220;
  # RANGE [0, 18446744073709551615]
  _137 = (size_typeD.44406) _131;
  if (_137 > 1)
    goto <bb 9>;
  else
    goto <bb 28>;
;;    succ:       9 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  pretmp_98 = MEM[(const struct iteratorD.44217 &)this_10(D) + 112]._M_firstD.44230;
  pretmp_204 = (long intD.12) pretmp_98;
  pretmp_244 = _203 - pretmp_204;
  pretmp_97 = pretmp_244 /[ex] 8;
  # VUSE <.MEM_11(D)>
  pretmp_251 = f_18->priD.32446;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # f_168 = PHI <f_18(9), f_3(17)>
  # RANGE [1, 18446744073709551615]
  # i_146 = PHI <1(9), i_23(17)>
  # .MEM_173 = PHI <.MEM_11(D)(9), .MEM_106(17)>
  # prephitmp_252 = PHI <pretmp_251(9), prephitmp_239(17)>
  # DEBUG iD.45169 => i_146
  # DEBUG dfD.45168 => f_168
  # DEBUG D#80ptD.0 => &this_10(D)->_bufferD.44881
  # DEBUG thisD.49274 => D#80ptD.0
  # DEBUG D#41ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_startD.44334
  # DEBUG D#42ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_finishD.44335
  # DEBUG __xD.49276 => D#42ptD.0
  # DEBUG __yD.49275 => D#41ptD.0
  # DEBUG __sizeD.49022 => 8
  # DEBUG D#79ptD.0 => &this_10(D)->_bufferD.44881
  # DEBUG thisD.49278 => D#79ptD.0
  # DEBUG __nD.49279 => i_146
  # RANGE ~[-1, 0]
  __n.70_96 = (long intD.12) i_146;
  # DEBUG D#262ptD.0 => &MEM[(struct dequeD.32466 *)this_10(D) + 96B].D.44879._M_implD.44330._M_startD.44334
  # DEBUG thisD.49281 => D#262ptD.0
  # DEBUG __nD.49280 => __n.70_96
  # DEBUG thisD.51849 => D#262ptD.0
  # DEBUG __nD.51850 => __n.70_96
  # DEBUG thisD.51853 => &__tmpD.51851
  # DEBUG __xD.51852 => D#262ptD.0
  # DEBUG thisD.51856 => &__tmpD.51851
  # DEBUG __nD.51857 => __n.70_96
  __offset_135 = __n.70_96 + pretmp_97;
  # DEBUG __offsetD.51858 => __offset_135
  # DEBUG __sizeD.49022 => 8
  _171 = (unsigned long) __offset_135;
  if (_171 <= 63)
    goto <bb 38>;
  else
    goto <bb 39>;
;;    succ:       38 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 4052, maybe hot
;;   Invalid sum of incoming frequencies 4218, should be 4052
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       39 [73.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __sizeD.49022 => 8
  # RANGE [0, 144115188075855871] NONZERO 144115188075855871
  iftmp.74_140 = __offset_135 >> 6;
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 1499, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       39 [27.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE ~[9223372036854775808, 18446744073709551614]
  _142 = ~_171;
  # DEBUG __sizeD.49022 => 8
  # RANGE [0, 288230376151711743] NONZERO 288230376151711743
  _143 = _142 >> 6;
  # RANGE [0, 288230376151711743] NONZERO 288230376151711743
  _144 = (long intD.12) _143;
  # RANGE [-288230376151711744, -1]
  iftmp.74_145 = ~_144;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 5551, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [-288230376151711744, 144115188075855871]
  # iftmp.74_147 = PHI <iftmp.74_140(11), iftmp.74_145(12)>
  # DEBUG __node_offsetD.51859 => iftmp.74_147
  # RANGE ~[144115188075855872, 18158513697557839871]
  __node_offset.76_148 = (long unsigned intD.14) iftmp.74_147;
  # RANGE [0, 18446744073709551608] NONZERO 18446744073709551608
  _149 = __node_offset.76_148 * 8;
  # PT = nonlocal escaped 
  _150 = _215 + _149;
  # DEBUG thisD.51861 => &__tmpD.51851
  # DEBUG __new_nodeD.51860 => _150
  # VUSE <.MEM_173>
  # PT = nonlocal escaped 
  _151 = *_150;
  # DEBUG __sizeD.49022 => 8
  # DEBUG __sizeD.49022 => 8
  # RANGE [-9223372036854775808, 9223372036854775744] NONZERO 18446744073709551552
  _153 = iftmp.74_147 * 64;
  _154 = __offset_135 - _153;
  # RANGE [0, 18446744073709551615]
  _155 = (long unsigned intD.14) _154;
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _156 = _155 * 8;
  # PT = nonlocal escaped 
  __tmp$_M_cur_157 = _151 + _156;
  # DEBUG __tmp$_M_curD.51894 => __tmp$_M_cur_157
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       38 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __tmp$_M_cur_217 = PHI <__tmp$_M_cur_139(38), __tmp$_M_cur_157(13)>
  # DEBUG __tmp$_M_curD.51894 => __tmp$_M_cur_217
  # DEBUG thisD.51855 => &D.49283
  # DEBUG __xD.51854 => NULL
  # .MEM_227 = VDEF <.MEM_173>
  __tmpD.51851 ={v} {CLOBBER};
  # DEBUG D#28ptD.0 => &D.49283
  # DEBUG thisD.49253 => D#28ptD.0
  # .MEM_106 = VDEF <.MEM_227>
  D.49283 ={v} {CLOBBER};
  # VUSE <.MEM_106>
  # PT = nonlocal escaped 
  f_20 = *__tmp$_M_cur_217;
  # DEBUG bfD.45170 => f_20
  # VUSE <.MEM_106>
  _21 = f_20->priD.32446;
  if (_21 > prephitmp_252)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 14, next block 16, flags: (NEW)
;;    pred:       14 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       14 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # f_3 = PHI <f_168(14), f_20(15)>
  # prephitmp_209 = PHI <prephitmp_252(14), _21(15)>
  # prephitmp_239 = PHI <prephitmp_252(14), _21(15)>
  # DEBUG dfD.45168 => f_3
  # RANGE [2, 18446744073709551615]
  i_23 = i_146 + 1;
  # DEBUG iD.45169 => i_23
  # DEBUG iD.45169 => i_23
  # DEBUG dfD.45168 => f_3
  # DEBUG D#80ptD.0 => &this_10(D)->_bufferD.44881
  # DEBUG thisD.49274 => D#80ptD.0
  # DEBUG D#41ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_startD.44334
  # DEBUG D#42ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_finishD.44335
  # DEBUG __xD.49276 => D#42ptD.0
  # DEBUG __yD.49275 => D#41ptD.0
  # DEBUG __sizeD.49022 => 8
  if (i_23 < _137)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       16 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # f_240 = PHI <f_3(16)>
  # prephitmp_235 = PHI <prephitmp_209(16)>
  if (f_240 != f_18)
    goto <bb 19>;
  else
    goto <bb 28>;
;;    succ:       19 [93.4%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [6.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [93.4%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_106>
  _24 = f_240->watchD.32448;
  if (_24 != 0)
    goto <bb 21>;
  else
    goto <bb 20>;
;;    succ:       21 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 543, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       19 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_106>
  _25 = f_18->watchD.32448;
  if (_25 != 0)
    goto <bb 21>;
  else
    goto <bb 36>;
;;    succ:       21 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 493, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_106>
  _26 = f_18->idD.32441;
  # VUSE <.MEM_106>
  _27 = f_240->idD.32441;
  # DEBUG D#81ptD.0 => &this_10(D)->D.44977
  # DEBUG thisD.49310 => D#81ptD.0
  # .MEM_29 = VDEF <.MEM_106>
  # USE = nonlocal 
  # CLB = nonlocal 
  _30 = _Z10GetSimTimevD.26752 ();
  # VUSE <.MEM_29>
  # PT = nonlocal escaped 
  gWatchOut.69_31 = gWatchOutD.26762;
  # .MEM_32 = VDEF <.MEM_29>
  # PT = nonlocal escaped 
  # USE = nonlocal 
  # CLB = nonlocal 
  _33 = _ZNSolsEiD.21315 (gWatchOut.69_31, _30);
  # DEBUG __outD.49306 => _33
  # DEBUG __sD.49307 => " | "
  # DEBUG __sD.49308 => " | "
  # .MEM_107 = VDEF <.MEM_32>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_33, " | ", 3);
  # DEBUG __osD.49303 => _33
  # DEBUG __strD.49304 => NULL
  # VUSE <.MEM_107>
  _34 = MEM[(long unsigned intD.14 *)this_10(D) + 48B];
  # DEBUG thisD.48751 => D#2ptD.0
  _99 = (long intD.12) _34;
  # DEBUG thisD.48748 => NULL
  # VUSE <.MEM_107>
  # PT = nonlocal escaped 
  _100 = MEM[(charD.10 * *)this_10(D) + 40B];
  # DEBUG thisD.48667 => D#1ptD.0
  # .MEM_108 = VDEF <.MEM_107>
  # PT = nonlocal escaped 
  # USE = nonlocal 
  # CLB = nonlocal 
  _101 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_33, _100, _99);
  # DEBUG __outD.49299 => _101
  # DEBUG __sD.49300 => " | "
  # DEBUG __sD.49301 => " | "
  # .MEM_109 = VDEF <.MEM_108>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_101, " | ", 3);
  # DEBUG __outD.49295 => _101
  # DEBUG __sD.49296 => "Flit "
  # DEBUG __sD.49297 => "Flit "
  # .MEM_110 = VDEF <.MEM_109>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_101, "Flit ", 5);
  # .MEM_35 = VDEF <.MEM_110>
  # PT = nonlocal escaped 
  # USE = nonlocal 
  # CLB = nonlocal 
  _36 = _ZNSolsEiD.21315 (_101, _27);
  # DEBUG __outD.49291 => _36
  # DEBUG __sD.49292 => " donates priority to flit "
  # DEBUG __sD.49293 => " donates priority to flit "
  # .MEM_111 = VDEF <.MEM_35>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_36, " donates priority to flit ", 26);
  # .MEM_37 = VDEF <.MEM_111>
  # PT = nonlocal escaped 
  # USE = nonlocal 
  # CLB = nonlocal 
  _38 = _ZNSolsEiD.21315 (_36, _26);
  # DEBUG __outD.49287 => _38
  # DEBUG __sD.49288 => "."
  # DEBUG __sD.49289 => "."
  # .MEM_112 = VDEF <.MEM_37>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_38, ".", 1);
  # DEBUG thisD.49284 => _38
  # DEBUG __pfD.49285 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.21447
  # DEBUG __osD.51863 => _38
  # VUSE <.MEM_112>
  # PT = nonlocal escaped 
  _158 = _38->_vptr.basic_ostreamD.21407;
  # VUSE <.MEM_112>
  _159 = MEM[(long intD.12 *)_158 + -24B];
  # RANGE [0, 18446744073709551615]
  _160 = (sizetype) _159;
  # PT = nonlocal escaped 
  _161 = _38 + _160;
  # DEBUG thisD.51866 => _161
  # DEBUG __cD.51867 => 10
  # VUSE <.MEM_112>
  # PT = nonlocal escaped 
  _113 = MEM[(const struct basic_iosD.4629 *)_161]._M_ctypeD.20631;
  # DEBUG __fD.51868 => _113
  if (_113 == 0B)
    goto <bb 22>;
  else
    goto <bb 23>;
;;    succ:       22 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 0
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       21 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_241 = PHI <.MEM_112(21), .MEM_119(30)>
  # .MEM_236 = VDEF <.MEM_241>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZSt16__throw_bad_castvD.4760 ();
;;    succ:      

;;   basic block 23, loop depth 0, count 0, freq 493, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       21 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.51870 => _113
  # DEBUG __cD.51869 => 10
  # VUSE <.MEM_112>
  _166 = MEM[(const struct ctypeD.7865 *)_113]._M_widen_okD.17546;
  if (_166 != 0)
    goto <bb 24>;
  else
    goto <bb 25>;
;;    succ:       24 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 301, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_112>
  _169 = MEM[(const struct ctypeD.7865 *)_113]._M_widenD.17547[10];
  pretmp_208 = (intD.9) _169;
  goto <bb 27>;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 192, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       23 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.51872 => _113
  # DEBUG __cD.51873 => 10
  # .MEM_228 = VDEF <.MEM_112>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNKSt5ctypeIcE13_M_widen_initEvD.17654 (_113);
  # VUSE <.MEM_228>
  # PT = nonlocal escaped 
  _174 = MEM[(const struct ctypeD.7865 *)_113].D.17687._vptr.facetD.14305;
  # VUSE <.MEM_228>
  # PT = nonlocal escaped 
  _175 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_174 + 48B];
  # PT = anything 
  PROF_179 = [obj_type_ref] OBJ_TYPE_REF(_175;(const struct ctypeD.7865)_113->6);
  if (PROF_179 == _ZNKSt5ctypeIcE8do_widenEcD.17635)
    goto <bb 27>;
  else
    goto <bb 26>;
;;    succ:       27 [79.7%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [20.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 39, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       25 [20.3%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_229 = VDEF <.MEM_228>
  # USE = nonlocal 
  # CLB = nonlocal 
  _181 = OBJ_TYPE_REF(_175;(const struct ctypeD.7865)_113->6) (_113, 10);
  pretmp_246 = (intD.9) _181;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 493, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                25 [79.7%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_210 = PHI <.MEM_112(24), .MEM_228(25), .MEM_229(26)>
  # RANGE [-128, 127]
  # prephitmp_247 = PHI <pretmp_208(24), 10(25), pretmp_246(26)>
  # .MEM_233 = VDEF <.MEM_210>
  # PT = nonlocal escaped 
  # USE = nonlocal 
  # CLB = nonlocal 
  _164 = _ZNSo3putEcD.21342 (_38, prephitmp_247);
  # DEBUG __osD.51864 => _164
  # .MEM_234 = VDEF <.MEM_233>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNSo5flushEvD.21353 (_164);
;;    succ:       28 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 3328, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                7 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                8 [9.0%]  (FALSE_VALUE,EXECUTABLE)
;;                18 [6.6%]  (FALSE_VALUE,EXECUTABLE)
;;                27 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # f_1 = PHI <f_18(6), f_18(7), f_18(8), f_18(18), f_240(27)>
  # .MEM_7 = PHI <.MEM_11(D)(6), .MEM_11(D)(7), .MEM_11(D)(8), .MEM_106(18), .MEM_234(27)>
  # DEBUG fD.45167 => f_1
  # VUSE <.MEM_7>
  _39 = f_1->watchD.32448;
  if (_39 != 0)
    goto <bb 30>;
  else
    goto <bb 29>;
;;    succ:       30 [31.4%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [68.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 2284, maybe hot
;;    prev block 28, next block 30, flags: (NEW)
;;    pred:       28 [68.6%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7>
  pretmp_248 = f_1->priD.32446;
  goto <bb 36>;
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 1044, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       28 [31.4%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7>
  _40 = f_1->priD.32446;
  # VUSE <.MEM_7>
  _41 = f_1->idD.32441;
  # DEBUG D#82ptD.0 => &this_10(D)->D.44977
  # DEBUG thisD.49338 => D#82ptD.0
  # .MEM_43 = VDEF <.MEM_7>
  # USE = nonlocal 
  # CLB = nonlocal 
  _44 = _Z10GetSimTimevD.26752 ();
  # VUSE <.MEM_43>
  # PT = nonlocal escaped 
  gWatchOut.69_45 = gWatchOutD.26762;
  # .MEM_46 = VDEF <.MEM_43>
  # PT = nonlocal escaped 
  # USE = nonlocal 
  # CLB = nonlocal 
  _47 = _ZNSolsEiD.21315 (gWatchOut.69_45, _44);
  # DEBUG __outD.49334 => _47
  # DEBUG __sD.49335 => " | "
  # DEBUG __sD.49336 => " | "
  # .MEM_114 = VDEF <.MEM_46>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_47, " | ", 3);
  # DEBUG __osD.49331 => _47
  # DEBUG __strD.49332 => NULL
  # VUSE <.MEM_114>
  _48 = MEM[(long unsigned intD.14 *)this_10(D) + 48B];
  # DEBUG thisD.48751 => D#2ptD.0
  _102 = (long intD.12) _48;
  # DEBUG thisD.48748 => NULL
  # VUSE <.MEM_114>
  # PT = nonlocal escaped 
  _103 = MEM[(charD.10 * *)this_10(D) + 40B];
  # DEBUG thisD.48667 => D#1ptD.0
  # .MEM_115 = VDEF <.MEM_114>
  # PT = nonlocal escaped 
  # USE = nonlocal 
  # CLB = nonlocal 
  _104 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_47, _103, _102);
  # DEBUG __outD.49327 => _104
  # DEBUG __sD.49328 => " | "
  # DEBUG __sD.49329 => " | "
  # .MEM_116 = VDEF <.MEM_115>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_104, " | ", 3);
  # DEBUG __outD.49323 => _104
  # DEBUG __sD.49324 => "Flit "
  # DEBUG __sD.49325 => "Flit "
  # .MEM_117 = VDEF <.MEM_116>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_104, "Flit ", 5);
  # .MEM_49 = VDEF <.MEM_117>
  # PT = nonlocal escaped 
  # USE = nonlocal 
  # CLB = nonlocal 
  _50 = _ZNSolsEiD.21315 (_104, _41);
  # DEBUG __outD.49319 => _50
  # DEBUG __sD.49320 => " sets priority to "
  # DEBUG __sD.49321 => " sets priority to "
  # .MEM_118 = VDEF <.MEM_49>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_50, " sets priority to ", 18);
  # .MEM_51 = VDEF <.MEM_118>
  # PT = nonlocal escaped 
  # USE = nonlocal 
  # CLB = nonlocal 
  _52 = _ZNSolsEiD.21315 (_50, _40);
  # DEBUG __outD.49315 => _52
  # DEBUG __sD.49316 => "."
  # DEBUG __sD.49317 => "."
  # .MEM_119 = VDEF <.MEM_51>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_52, ".", 1);
  # DEBUG thisD.49312 => _52
  # DEBUG __pfD.49313 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.21447
  # DEBUG __osD.51878 => _52
  # VUSE <.MEM_119>
  # PT = nonlocal escaped 
  _184 = _52->_vptr.basic_ostreamD.21407;
  # VUSE <.MEM_119>
  _185 = MEM[(long intD.12 *)_184 + -24B];
  # RANGE [0, 18446744073709551615]
  _186 = (sizetype) _185;
  # PT = nonlocal escaped 
  _187 = _52 + _186;
  # DEBUG thisD.51881 => _187
  # DEBUG __cD.51882 => 10
  # VUSE <.MEM_119>
  # PT = nonlocal escaped 
  _120 = MEM[(const struct basic_iosD.4629 *)_187]._M_ctypeD.20631;
  # DEBUG __fD.51883 => _120
  if (_120 == 0B)
    goto <bb 22>;
  else
    goto <bb 31>;
;;    succ:       22 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 1044, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       30 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.51885 => _120
  # DEBUG __cD.51884 => 10
  # VUSE <.MEM_119>
  _192 = MEM[(const struct ctypeD.7865 *)_120]._M_widen_okD.17546;
  if (_192 != 0)
    goto <bb 32>;
  else
    goto <bb 33>;
;;    succ:       32 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 637, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       31 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_119>
  _195 = MEM[(const struct ctypeD.7865 *)_120]._M_widenD.17547[10];
  pretmp_94 = (intD.9) _195;
  goto <bb 35>;
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 407, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       31 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.51887 => _120
  # DEBUG __cD.51888 => 10
  # .MEM_237 = VDEF <.MEM_119>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNKSt5ctypeIcE13_M_widen_initEvD.17654 (_120);
  # VUSE <.MEM_237>
  # PT = nonlocal escaped 
  _200 = MEM[(const struct ctypeD.7865 *)_120].D.17687._vptr.facetD.14305;
  # VUSE <.MEM_237>
  # PT = nonlocal escaped 
  _201 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_200 + 48B];
  # PT = anything 
  PROF_205 = [obj_type_ref] OBJ_TYPE_REF(_201;(const struct ctypeD.7865)_120->6);
  if (PROF_205 == _ZNKSt5ctypeIcE8do_widenEcD.17635)
    goto <bb 35>;
  else
    goto <bb 34>;
;;    succ:       35 [81.1%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [18.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 77, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       33 [18.9%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_238 = VDEF <.MEM_237>
  # USE = nonlocal 
  # CLB = nonlocal 
  _207 = OBJ_TYPE_REF(_201;(const struct ctypeD.7865)_120->6) (_120, 10);
  pretmp_95 = (intD.9) _207;
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 1044, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       32 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [81.1%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_212 = PHI <.MEM_119(32), .MEM_237(33), .MEM_238(34)>
  # RANGE [-128, 127]
  # prephitmp_231 = PHI <pretmp_94(32), 10(33), pretmp_95(34)>
  # .MEM_242 = VDEF <.MEM_212>
  # PT = nonlocal escaped 
  # USE = nonlocal 
  # CLB = nonlocal 
  _190 = _ZNSo3putEcD.21342 (_52, prephitmp_231);
  # DEBUG __osD.51879 => _190
  # .MEM_243 = VDEF <.MEM_242>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNSo5flushEvD.21353 (_190);
  # VUSE <.MEM_243>
  pretmp_249 = f_1->priD.32446;
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 3599, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       29 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                20 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_8 = PHI <.MEM_7(29), .MEM_243(35), .MEM_106(20)>
  # prephitmp_250 = PHI <pretmp_248(29), pretmp_249(35), prephitmp_235(20)>
  # .MEM_54 = VDEF <.MEM_8>
  this_10(D)->_priD.44893 = prephitmp_250;
;;    succ:       37 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 6245, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       5 [19.9%]  (FALSE_VALUE,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                36 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [10.1%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_9 = PHI <.MEM_11(D)(5), .MEM_16(4), .MEM_54(36), .MEM_11(D)(2)>
  # VUSE <.MEM_9>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 38, loop depth 1, count 0, freq 3549, maybe hot
;;   Invalid sum of incoming frequencies 4550, should be 3549
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       10 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _138 = i_146 * 8;
  # PT = nonlocal escaped 
  __tmp$_M_cur_139 = _28 + _138;
  # DEBUG __tmp$_M_curD.51894 => __tmp$_M_cur_139
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 1, count 0, freq 5778, maybe hot
;;   Invalid sum of incoming frequencies 4550, should be 5778
;;    prev block 38, next block 1, flags: (NEW, REACHABLE)
;;    pred:       10 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__offset_135 > 0)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [27.0%]  (FALSE_VALUE,EXECUTABLE)

}


Creating dr for MEM[(struct Flit * * *)this_10(D) + 144B]
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 144
	step: 0
	aligned to: 256
	base_object: MEM[(struct Flit * * *)this_10(D) + 144B]
Creating dr for MEM[(struct Flit * * *)this_10(D) + 112B]
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 112
	step: 0
	aligned to: 256
	base_object: MEM[(struct Flit * * *)this_10(D) + 112B]
Creating dr for this_10(D)->_pri_type
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 200
	step: 0
	aligned to: 256
	base_object: *this_10(D)
	Access function 0: 1600
Creating dr for MEM[(const struct _Deque_iterator &)this_10(D) + 144]._M_node
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 168
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)this_10(D) + 144]
	Access function 0: 192
Creating dr for MEM[(const struct _Deque_iterator &)this_10(D) + 112]._M_node
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 136
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)this_10(D) + 112]
	Access function 0: 192
Creating dr for MEM[(const struct _Deque_iterator &)this_10(D) + 144]._M_first
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 152
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)this_10(D) + 144]
	Access function 0: 64
Creating dr for MEM[(const struct _Deque_iterator &)this_10(D) + 112]._M_last
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 128
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)this_10(D) + 112]
	Access function 0: 128
Creating dr for this_10(D)->_pri
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 204
	step: 0
	aligned to: 256
	base_object: *this_10(D)
	Access function 0: 1632
Creating dr for *_28
analyze_innermost: success.
	base_address: _28
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *_28
Creating dr for this_10(D)->_priority_donation
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 208
	step: 0
	aligned to: 256
	base_object: *this_10(D)
	Access function 0: 1664
Creating dr for MEM[(const struct _Deque_iterator &)this_10(D) + 144]._M_node
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 168
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)this_10(D) + 144]
	Access function 0: 192
Creating dr for MEM[(const struct _Deque_iterator &)this_10(D) + 112]._M_node
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 136
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)this_10(D) + 112]
	Access function 0: 192
Creating dr for MEM[(const struct _Deque_iterator &)this_10(D) + 144]._M_first
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 152
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)this_10(D) + 144]
	Access function 0: 64
Creating dr for MEM[(const struct _Deque_iterator &)this_10(D) + 112]._M_last
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 128
	step: 0
	aligned to: 256
	base_object: MEM[(const struct _Deque_iterator &)this_10(D) + 112]
	Access function 0: 128
Creating dr for MEM[(const struct iterator &)this_10(D) + 112]._M_first
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 120
	step: 0
	aligned to: 256
	base_object: MEM[(const struct iterator &)this_10(D) + 112]
	Access function 0: 64
Creating dr for f_18->pri
analyze_innermost: success.
	base_address: f_18
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: *f_18
	Access function 0: 384
Creating dr for *_150
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_150
Creating dr for *_150
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_150
Analyzing # of iterations of loop 1
  exit condition [2, + , 1] < (size_type) _131
  bounds on difference of bases: 0 ... 18446744073709551613
Applying pattern match.pd:725, generic-match.c:1428
  result:
    # of iterations (size_t) _131 + 18446744073709551614, bounded by 0x0fffffffffffffffd
Creating dr for *_150
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_150
Creating dr for *_150
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_150
Analyzing # of iterations of loop 1
  exit condition [2, + , 1] < (size_type) _131
  bounds on difference of bases: 0 ... 18446744073709551613
Applying pattern match.pd:725, generic-match.c:1428
  result:
    # of iterations (size_t) _131 + 18446744073709551614, bounded by 0x0fffffffffffffffd
Creating dr for f_240->watch
analyze_innermost: success.
	base_address: f_240
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: *f_240
	Access function 0: 448
Creating dr for f_18->watch
analyze_innermost: success.
	base_address: f_18
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: *f_18
	Access function 0: 448
Creating dr for f_18->id
analyze_innermost: success.
	base_address: f_18
	offset from base address: 0
	constant offset from base address: 28
	step: 0
	aligned to: 256
	base_object: *f_18
	Access function 0: 224
Creating dr for f_240->id
analyze_innermost: success.
	base_address: f_240
	offset from base address: 0
	constant offset from base address: 28
	step: 0
	aligned to: 256
	base_object: *f_240
	Access function 0: 224
Creating dr for MEM[(const struct ctype *)_113]._M_widen_ok
analyze_innermost: success.
	base_address: _113
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(const struct ctype *)_113]
	Access function 0: 448
Creating dr for MEM[(const struct ctype *)_113]._M_widen[10]
analyze_innermost: success.
	base_address: _113
	offset from base address: 0
	constant offset from base address: 67
	step: 0
	aligned to: 256
	base_object: MEM[(const struct ctype *)_113]
	Access function 0: 10
	Access function 1: 456
Creating dr for this_10(D)->_pri
analyze_innermost: success.
	base_address: this_10(D)
	offset from base address: 0
	constant offset from base address: 204
	step: 0
	aligned to: 256
	base_object: *this_10(D)
	Access function 0: 1632
Creating dr for f_1->watch
analyze_innermost: success.
	base_address: f_1
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: *f_1
	Access function 0: 448
Creating dr for f_1->pri
analyze_innermost: success.
	base_address: f_1
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: *f_1
	Access function 0: 384
Creating dr for f_1->id
analyze_innermost: success.
	base_address: f_1
	offset from base address: 0
	constant offset from base address: 28
	step: 0
	aligned to: 256
	base_object: *f_1
	Access function 0: 224
Creating dr for MEM[(const struct ctype *)_120]._M_widen_ok
analyze_innermost: success.
	base_address: _120
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(const struct ctype *)_120]
	Access function 0: 448
Creating dr for MEM[(const struct ctype *)_120]._M_widen[10]
analyze_innermost: success.
	base_address: _120
	offset from base address: 0
	constant offset from base address: 67
	step: 0
	aligned to: 256
	base_object: MEM[(const struct ctype *)_120]
	Access function 0: 10
	Access function 1: 456
Creating dr for f_1->pri
analyze_innermost: success.
	base_address: f_1
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: *f_1
	Access function 0: 384

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:29)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:15)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:44, LOOPS:1, CONDITIONS:20, STMTS:323)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_37 bb_3 })
  {
    <bb 2>:
    # DEBUG D#76 => &this_10(D)->_buffer
    # DEBUG this => D#76
    # DEBUG D#17 => &MEM[(const struct deque *)D#76].D.44879._M_impl._M_start
    # DEBUG D#18 => &MEM[(const struct deque *)D#76].D.44879._M_impl._M_finish
    # VUSE <.MEM_11(D)>
    _42 = MEM[(struct Flit * * *)this_10(D) + 144B];
    # DEBUG D#15 => D#18
    # VUSE <.MEM_11(D)>
    _28 = MEM[(struct Flit * * *)this_10(D) + 112B];
    # DEBUG D#16 => D#17
    # DEBUG __x => D#15
    # DEBUG __y => D#16
    if (_28 == _42)
      goto <bb 37>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 bb_5 })
  {
    <bb 3>:
    # VUSE <.MEM_11(D)>
    _13 = this_10(D)->_pri_type;
    if (_13 == 1)
      goto <bb 4>;
    else
      goto <bb 5>;

  }
  bb_4 (preds = {bb_3 }, succs = {bb_37 })
  {
    <bb 4>:
    # DEBUG D#77 => &this_10(D)->_buffer
    # DEBUG this => D#77
    # DEBUG D#41 => &MEM[(const struct deque *)D#77].D.44879._M_impl._M_start
    # DEBUG D#42 => &MEM[(const struct deque *)D#77].D.44879._M_impl._M_finish
    # DEBUG __x => D#42
    # DEBUG __y => D#41
    # DEBUG __size => 8
    # VUSE <.MEM_11(D)>
    _17 = MEM[(const struct _Deque_iterator &)this_10(D) + 144]._M_node;
    _14 = (long int) _17;
    # VUSE <.MEM_11(D)>
    _12 = MEM[(const struct _Deque_iterator &)this_10(D) + 112]._M_node;
    _55 = (long int) _12;
    _56 = _14 - _55;
    _57 = _56 /[ex] 8;
    _58 = _57 + -1;
    _59 = _58 * 64;
    _61 = (long int) _42;
    # VUSE <.MEM_11(D)>
    _62 = MEM[(const struct _Deque_iterator &)this_10(D) + 144]._M_first;
    _63 = (long int) _62;
    _64 = _61 - _63;
    _65 = _64 /[ex] 8;
    _66 = _59 + _65;
    # VUSE <.MEM_11(D)>
    _67 = MEM[(const struct _Deque_iterator &)this_10(D) + 112]._M_last;
    _68 = (long int) _67;
    _69 = (long int) _28;
    _70 = _68 - _69;
    _71 = _70 /[ex] 8;
    _72 = _66 + _71;
    _15 = (int) _72;
    # .MEM_16 = VDEF <.MEM_11(D)>
    this_10(D)->_pri = _15;
    goto <bb 37>;

  }
  bb_5 (preds = {bb_3 }, succs = {bb_6 bb_37 })
  {
    <bb 5>:
    if (_13 != 3)
      goto <bb 6>;
    else
      goto <bb 37>;

  }
  bb_6 (preds = {bb_5 }, succs = {bb_7 bb_28 })
  {
    <bb 6>:
    # DEBUG D#78 => &this_10(D)->_buffer
    # DEBUG this => D#78
    # DEBUG this => D#78
    # DEBUG D#21 => &D#78->D.44879._M_impl._M_start
    # DEBUG this => NULL
    # DEBUG __x => D#21
    # DEBUG D#31 => MEM[(const struct iterator &)D#78 + 16]._M_first
    # DEBUG D.48942 => D#31
    # DEBUG D#30 => MEM[(const struct iterator &)D#78 + 16]._M_last
    # DEBUG D.48943 => D#30
    # DEBUG D#29 => MEM[(const struct iterator &)D#78 + 16]._M_node
    # DEBUG D.48944 => D#29
    # DEBUG this => D#28
    # VUSE <.MEM_11(D)>
    f_18 = *_28;
    # DEBUG f => f_18
    if (_13 != 0)
      goto <bb 7>;
    else
      goto <bb 28>;

  }
  bb_7 (preds = {bb_6 }, succs = {bb_8 bb_28 })
  {
    <bb 7>:
    # VUSE <.MEM_11(D)>
    _19 = this_10(D)->_priority_donation;
    if (_19 != 0)
      goto <bb 8>;
    else
      goto <bb 28>;

  }
  bb_8 (preds = {bb_7 }, succs = {bb_9 bb_28 })
  {
    <bb 8>:
    # DEBUG i => 1
    # DEBUG df => f_18
    # DEBUG D#80 => &this_10(D)->_buffer
    # DEBUG this => D#80
    # DEBUG D#41 => &MEM[(const struct deque *)D#80].D.44879._M_impl._M_start
    # DEBUG D#42 => &MEM[(const struct deque *)D#80].D.44879._M_impl._M_finish
    # DEBUG __x => D#42
    # DEBUG __y => D#41
    # DEBUG __size => 8
    # VUSE <.MEM_11(D)>
    _213 = MEM[(const struct _Deque_iterator &)this_10(D) + 144]._M_node;
    _214 = (long int) _213;
    # VUSE <.MEM_11(D)>
    _215 = MEM[(const struct _Deque_iterator &)this_10(D) + 112]._M_node;
    _216 = (long int) _215;
    _223 = _214 - _216;
    _127 = _223 /[ex] 8;
    _224 = _127 + -1;
    _128 = _224 * 64;
    _129 = (long int) _42;
    # VUSE <.MEM_11(D)>
    _226 = MEM[(const struct _Deque_iterator &)this_10(D) + 144]._M_first;
    _218 = (long int) _226;
    _219 = _129 - _218;
    _152 = _219 /[ex] 8;
    _220 = _128 + _152;
    # VUSE <.MEM_11(D)>
    _165 = MEM[(const struct _Deque_iterator &)this_10(D) + 112]._M_last;
    _136 = (long int) _165;
    _203 = (long int) _28;
    _197 = _136 - _203;
    _162 = _197 /[ex] 8;
    _131 = _162 + _220;
    _137 = (size_type) _131;
    if (_137 > 1)
      goto <bb 9>;
    else
      goto <bb 28>;

  }
  bb_9 (preds = {bb_8 }, succs = {bb_10 })
  {
    <bb 9>:
    # VUSE <.MEM_11(D)>
    pretmp_98 = MEM[(const struct iterator &)this_10(D) + 112]._M_first;
    pretmp_204 = (long int) pretmp_98;
    pretmp_244 = _203 - pretmp_204;
    pretmp_97 = pretmp_244 /[ex] 8;
    # VUSE <.MEM_11(D)>
    pretmp_251 = f_18->pri;

  }
  bb_18 (preds = {bb_16 }, succs = {bb_40 })
  {
    <bb 18>:
    # f_240 = PHI <f_3(16)>
    # prephitmp_235 = PHI <prephitmp_209(16)>

  }
  bb_40 (preds = {bb_18 }, succs = {bb_19 bb_28 })
  {
    <bb 40>:
    if (f_240 != f_18)
      goto <bb 19>;
    else
      goto <bb 28>;

  }
  bb_19 (preds = {bb_40 }, succs = {bb_21 bb_20 })
  {
    <bb 19>:
    # VUSE <.MEM_106>
    _24 = f_240->watch;
    if (_24 != 0)
      goto <bb 21>;
    else
      goto <bb 20>;

  }
  bb_20 (preds = {bb_19 }, succs = {bb_21 bb_36 })
  {
    <bb 20>:
    # VUSE <.MEM_106>
    _25 = f_18->watch;
    if (_25 != 0)
      goto <bb 21>;
    else
      goto <bb 36>;

  }
  bb_21 (preds = {bb_20 bb_19 }, succs = {bb_22 bb_23 })
  {
    <bb 21>:
    # VUSE <.MEM_106>
    _26 = f_18->id;
    # VUSE <.MEM_106>
    _27 = f_240->id;
    # DEBUG D#81 => &this_10(D)->D.44977
    # DEBUG this => D#81
    # .MEM_29 = VDEF <.MEM_106>
    _30 = GetSimTime ();
    # VUSE <.MEM_29>
    gWatchOut.69_31 = gWatchOut;
    # .MEM_32 = VDEF <.MEM_29>
    _33 = std::basic_ostream<char>::operator<< (gWatchOut.69_31, _30);
    # DEBUG __out => _33
    # DEBUG __s => " | "
    # DEBUG __s => " | "
    # .MEM_107 = VDEF <.MEM_32>
    std::__ostream_insert<char, std::char_traits<char> > (_33, " | ", 3);
    # DEBUG __os => _33
    # DEBUG __str => NULL
    # VUSE <.MEM_107>
    _34 = MEM[(long unsigned int *)this_10(D) + 48B];
    # DEBUG this => D#2
    _99 = (long int) _34;
    # DEBUG this => NULL
    # VUSE <.MEM_107>
    _100 = MEM[(char * *)this_10(D) + 40B];
    # DEBUG this => D#1
    # .MEM_108 = VDEF <.MEM_107>
    _101 = std::__ostream_insert<char, std::char_traits<char> > (_33, _100, _99);
    # DEBUG __out => _101
    # DEBUG __s => " | "
    # DEBUG __s => " | "
    # .MEM_109 = VDEF <.MEM_108>
    std::__ostream_insert<char, std::char_traits<char> > (_101, " | ", 3);
    # DEBUG __out => _101
    # DEBUG __s => "Flit "
    # DEBUG __s => "Flit "
    # .MEM_110 = VDEF <.MEM_109>
    std::__ostream_insert<char, std::char_traits<char> > (_101, "Flit ", 5);
    # .MEM_35 = VDEF <.MEM_110>
    _36 = std::basic_ostream<char>::operator<< (_101, _27);
    # DEBUG __out => _36
    # DEBUG __s => " donates priority to flit "
    # DEBUG __s => " donates priority to flit "
    # .MEM_111 = VDEF <.MEM_35>
    std::__ostream_insert<char, std::char_traits<char> > (_36, " donates priority to flit ", 26);
    # .MEM_37 = VDEF <.MEM_111>
    _38 = std::basic_ostream<char>::operator<< (_36, _26);
    # DEBUG __out => _38
    # DEBUG __s => "."
    # DEBUG __s => "."
    # .MEM_112 = VDEF <.MEM_37>
    std::__ostream_insert<char, std::char_traits<char> > (_38, ".", 1);
    # DEBUG this => _38
    # DEBUG __pf => endl
    # DEBUG __os => _38
    # VUSE <.MEM_112>
    _158 = _38->_vptr.basic_ostream;
    # VUSE <.MEM_112>
    _159 = MEM[(long int *)_158 + -24B];
    _160 = (sizetype) _159;
    _161 = _38 + _160;
    # DEBUG this => _161
    # DEBUG __c => 10
    # VUSE <.MEM_112>
    _113 = MEM[(const struct basic_ios *)_161]._M_ctype;
    # DEBUG __f => _113
    if (_113 == 0B)
      goto <bb 22>;
    else
      goto <bb 23>;

  }
  bb_22 (preds = {bb_21 bb_30 }, succs = {})
  {
    <bb 22>:
    # .MEM_241 = PHI <.MEM_112(21), .MEM_119(30)>
    # .MEM_236 = VDEF <.MEM_241>
    std::__throw_bad_cast ();

  }
  bb_23 (preds = {bb_21 }, succs = {bb_24 bb_25 })
  {
    <bb 23>:
    # DEBUG this => _113
    # DEBUG __c => 10
    # VUSE <.MEM_112>
    _166 = MEM[(const struct ctype *)_113]._M_widen_ok;
    if (_166 != 0)
      goto <bb 24>;
    else
      goto <bb 25>;

  }
  bb_24 (preds = {bb_23 }, succs = {bb_27 })
  {
    <bb 24>:
    # VUSE <.MEM_112>
    _169 = MEM[(const struct ctype *)_113]._M_widen[10];
    pretmp_208 = (int) _169;
    goto <bb 27>;

  }
  bb_25 (preds = {bb_23 }, succs = {bb_27 bb_26 })
  {
    <bb 25>:
    # DEBUG this => _113
    # DEBUG __c => 10
    # .MEM_228 = VDEF <.MEM_112>
    std::ctype<char>::_M_widen_init (_113);
    # VUSE <.MEM_228>
    _174 = MEM[(const struct ctype *)_113].D.17687._vptr.facet;
    # VUSE <.MEM_228>
    _175 = MEM[(int (*__vtbl_ptr_type) () *)_174 + 48B];
    PROF_179 = [obj_type_ref] OBJ_TYPE_REF(_175;(const struct ctype)_113->6);
    if (PROF_179 == do_widen)
      goto <bb 27>;
    else
      goto <bb 26>;

  }
  bb_26 (preds = {bb_25 }, succs = {bb_27 })
  {
    <bb 26>:
    # .MEM_229 = VDEF <.MEM_228>
    _181 = OBJ_TYPE_REF(_175;(const struct ctype)_113->6) (_113, 10);
    pretmp_246 = (int) _181;

  }
  bb_27 (preds = {bb_24 bb_25 bb_26 }, succs = {bb_28 })
  {
    <bb 27>:
    # .MEM_210 = PHI <.MEM_112(24), .MEM_228(25), .MEM_229(26)>
    # prephitmp_247 = PHI <pretmp_208(24), 10(25), pretmp_246(26)>
    # .MEM_233 = VDEF <.MEM_210>
    _164 = std::basic_ostream<char>::put (_38, prephitmp_247);
    # DEBUG __os => _164
    # .MEM_234 = VDEF <.MEM_233>
    std::basic_ostream<char>::flush (_164);

  }
  bb_28 (preds = {bb_6 bb_7 bb_8 bb_40 bb_27 }, succs = {bb_30 bb_29 })
  {
    <bb 28>:
    # f_1 = PHI <f_18(6), f_18(7), f_18(8), f_18(40), f_240(27)>
    # .MEM_7 = PHI <.MEM_11(D)(6), .MEM_11(D)(7), .MEM_11(D)(8), .MEM_106(40), .MEM_234(27)>
    # DEBUG f => f_1
    # VUSE <.MEM_7>
    _39 = f_1->watch;
    if (_39 != 0)
      goto <bb 30>;
    else
      goto <bb 29>;

  }
  bb_29 (preds = {bb_28 }, succs = {bb_36 })
  {
    <bb 29>:
    # VUSE <.MEM_7>
    pretmp_248 = f_1->pri;
    goto <bb 36>;

  }
  bb_30 (preds = {bb_28 }, succs = {bb_22 bb_31 })
  {
    <bb 30>:
    # VUSE <.MEM_7>
    _40 = f_1->pri;
    # VUSE <.MEM_7>
    _41 = f_1->id;
    # DEBUG D#82 => &this_10(D)->D.44977
    # DEBUG this => D#82
    # .MEM_43 = VDEF <.MEM_7>
    _44 = GetSimTime ();
    # VUSE <.MEM_43>
    gWatchOut.69_45 = gWatchOut;
    # .MEM_46 = VDEF <.MEM_43>
    _47 = std::basic_ostream<char>::operator<< (gWatchOut.69_45, _44);
    # DEBUG __out => _47
    # DEBUG __s => " | "
    # DEBUG __s => " | "
    # .MEM_114 = VDEF <.MEM_46>
    std::__ostream_insert<char, std::char_traits<char> > (_47, " | ", 3);
    # DEBUG __os => _47
    # DEBUG __str => NULL
    # VUSE <.MEM_114>
    _48 = MEM[(long unsigned int *)this_10(D) + 48B];
    # DEBUG this => D#2
    _102 = (long int) _48;
    # DEBUG this => NULL
    # VUSE <.MEM_114>
    _103 = MEM[(char * *)this_10(D) + 40B];
    # DEBUG this => D#1
    # .MEM_115 = VDEF <.MEM_114>
    _104 = std::__ostream_insert<char, std::char_traits<char> > (_47, _103, _102);
    # DEBUG __out => _104
    # DEBUG __s => " | "
    # DEBUG __s => " | "
    # .MEM_116 = VDEF <.MEM_115>
    std::__ostream_insert<char, std::char_traits<char> > (_104, " | ", 3);
    # DEBUG __out => _104
    # DEBUG __s => "Flit "
    # DEBUG __s => "Flit "
    # .MEM_117 = VDEF <.MEM_116>
    std::__ostream_insert<char, std::char_traits<char> > (_104, "Flit ", 5);
    # .MEM_49 = VDEF <.MEM_117>
    _50 = std::basic_ostream<char>::operator<< (_104, _41);
    # DEBUG __out => _50
    # DEBUG __s => " sets priority to "
    # DEBUG __s => " sets priority to "
    # .MEM_118 = VDEF <.MEM_49>
    std::__ostream_insert<char, std::char_traits<char> > (_50, " sets priority to ", 18);
    # .MEM_51 = VDEF <.MEM_118>
    _52 = std::basic_ostream<char>::operator<< (_50, _40);
    # DEBUG __out => _52
    # DEBUG __s => "."
    # DEBUG __s => "."
    # .MEM_119 = VDEF <.MEM_51>
    std::__ostream_insert<char, std::char_traits<char> > (_52, ".", 1);
    # DEBUG this => _52
    # DEBUG __pf => endl
    # DEBUG __os => _52
    # VUSE <.MEM_119>
    _184 = _52->_vptr.basic_ostream;
    # VUSE <.MEM_119>
    _185 = MEM[(long int *)_184 + -24B];
    _186 = (sizetype) _185;
    _187 = _52 + _186;
    # DEBUG this => _187
    # DEBUG __c => 10
    # VUSE <.MEM_119>
    _120 = MEM[(const struct basic_ios *)_187]._M_ctype;
    # DEBUG __f => _120
    if (_120 == 0B)
      goto <bb 22>;
    else
      goto <bb 31>;

  }
  bb_31 (preds = {bb_30 }, succs = {bb_32 bb_33 })
  {
    <bb 31>:
    # DEBUG this => _120
    # DEBUG __c => 10
    # VUSE <.MEM_119>
    _192 = MEM[(const struct ctype *)_120]._M_widen_ok;
    if (_192 != 0)
      goto <bb 32>;
    else
      goto <bb 33>;

  }
  bb_32 (preds = {bb_31 }, succs = {bb_35 })
  {
    <bb 32>:
    # VUSE <.MEM_119>
    _195 = MEM[(const struct ctype *)_120]._M_widen[10];
    pretmp_94 = (int) _195;
    goto <bb 35>;

  }
  bb_33 (preds = {bb_31 }, succs = {bb_35 bb_34 })
  {
    <bb 33>:
    # DEBUG this => _120
    # DEBUG __c => 10
    # .MEM_237 = VDEF <.MEM_119>
    std::ctype<char>::_M_widen_init (_120);
    # VUSE <.MEM_237>
    _200 = MEM[(const struct ctype *)_120].D.17687._vptr.facet;
    # VUSE <.MEM_237>
    _201 = MEM[(int (*__vtbl_ptr_type) () *)_200 + 48B];
    PROF_205 = [obj_type_ref] OBJ_TYPE_REF(_201;(const struct ctype)_120->6);
    if (PROF_205 == do_widen)
      goto <bb 35>;
    else
      goto <bb 34>;

  }
  bb_34 (preds = {bb_33 }, succs = {bb_35 })
  {
    <bb 34>:
    # .MEM_238 = VDEF <.MEM_237>
    _207 = OBJ_TYPE_REF(_201;(const struct ctype)_120->6) (_120, 10);
    pretmp_95 = (int) _207;

  }
  bb_35 (preds = {bb_32 bb_33 bb_34 }, succs = {bb_36 })
  {
    <bb 35>:
    # .MEM_212 = PHI <.MEM_119(32), .MEM_237(33), .MEM_238(34)>
    # prephitmp_231 = PHI <pretmp_94(32), 10(33), pretmp_95(34)>
    # .MEM_242 = VDEF <.MEM_212>
    _190 = std::basic_ostream<char>::put (_52, prephitmp_231);
    # DEBUG __os => _190
    # .MEM_243 = VDEF <.MEM_242>
    std::basic_ostream<char>::flush (_190);
    # VUSE <.MEM_243>
    pretmp_249 = f_1->pri;

  }
  bb_36 (preds = {bb_29 bb_35 bb_20 }, succs = {bb_42 })
  {
    <bb 36>:
    # .MEM_8 = PHI <.MEM_7(29), .MEM_243(35), .MEM_106(20)>
    # prephitmp_250 = PHI <pretmp_248(29), pretmp_249(35), prephitmp_235(20)>

  }
  bb_42 (preds = {bb_36 }, succs = {bb_37 })
  {
    <bb 42>:
    # .MEM_54 = VDEF <.MEM_8>
    this_10(D)->_pri = prephitmp_250;

  }
  bb_37 (preds = {bb_5 bb_4 bb_42 bb_2 }, succs = {bb_43 })
  {
    <bb 37>:
    # .MEM_9 = PHI <.MEM_11(D)(5), .MEM_16(4), .MEM_54(42), .MEM_11(D)(2)>

  }
  bb_43 (preds = {bb_37 }, succs = {bb_1 })
  {
    <bb 43>:
    # VUSE <.MEM_9>
    return;

  }
  loop_1 (header = 10, latch = 17, niter = , upper_bound = 0x0fffffffffffffffd)
  {
    bb_10 (preds = {bb_9 bb_17 }, succs = {bb_38 bb_39 })
    {
      <bb 10>:
      # f_168 = PHI <f_18(9), f_3(17)>
      # i_146 = PHI <1(9), i_23(17)>
      # .MEM_173 = PHI <.MEM_11(D)(9), .MEM_106(17)>
      # prephitmp_252 = PHI <pretmp_251(9), prephitmp_239(17)>
      # DEBUG i => i_146
      # DEBUG df => f_168
      # DEBUG D#80 => &this_10(D)->_buffer
      # DEBUG this => D#80
      # DEBUG D#41 => &MEM[(const struct deque *)D#80].D.44879._M_impl._M_start
      # DEBUG D#42 => &MEM[(const struct deque *)D#80].D.44879._M_impl._M_finish
      # DEBUG __x => D#42
      # DEBUG __y => D#41
      # DEBUG __size => 8
      # DEBUG D#79 => &this_10(D)->_buffer
      # DEBUG this => D#79
      # DEBUG __n => i_146
      __n.70_96 = (long int) i_146;
      # DEBUG D#262 => &MEM[(struct deque *)this_10(D) + 96B].D.44879._M_impl._M_start
      # DEBUG this => D#262
      # DEBUG __n => __n.70_96
      # DEBUG this => D#262
      # DEBUG __n => __n.70_96
      # DEBUG this => &__tmp
      # DEBUG __x => D#262
      # DEBUG this => &__tmp
      # DEBUG __n => __n.70_96
      __offset_135 = __n.70_96 + pretmp_97;
      # DEBUG __offset => __offset_135
      # DEBUG __size => 8
      _171 = (unsigned long) __offset_135;
      if (_171 <= 63)
        goto <bb 38>;
      else
        goto <bb 39>;

    }
    bb_11 (preds = {bb_39 }, succs = {bb_13 })
    {
      <bb 11>:
      # DEBUG __size => 8
      iftmp.74_140 = __offset_135 >> 6;
      goto <bb 13>;

    }
    bb_12 (preds = {bb_39 }, succs = {bb_13 })
    {
      <bb 12>:
      _142 = ~_171;
      # DEBUG __size => 8
      _143 = _142 >> 6;
      _144 = (long int) _143;
      iftmp.74_145 = ~_144;

    }
    bb_13 (preds = {bb_11 bb_12 }, succs = {bb_41 })
    {
      <bb 13>:
      # iftmp.74_147 = PHI <iftmp.74_140(11), iftmp.74_145(12)>

    }
    bb_41 (preds = {bb_13 }, succs = {bb_14 })
    {
      <bb 41>:
      # DEBUG __node_offset => iftmp.74_147
      __node_offset.76_148 = (long unsigned int) iftmp.74_147;
      _149 = __node_offset.76_148 * 8;
      _150 = _215 + _149;
      # DEBUG this => &__tmp
      # DEBUG __new_node => _150
      # VUSE <.MEM_173>
      _151 = *_150;
      # DEBUG __size => 8
      # DEBUG __size => 8
      _153 = iftmp.74_147 * 64;
      _154 = __offset_135 - _153;
      _155 = (long unsigned int) _154;
      _156 = _155 * 8;
      __tmp$_M_cur_157 = _151 + _156;
      # DEBUG __tmp$_M_cur => __tmp$_M_cur_157

    }
    bb_14 (preds = {bb_38 bb_41 }, succs = {bb_15 bb_16 })
    {
      <bb 14>:
      # __tmp$_M_cur_217 = PHI <__tmp$_M_cur_139(38), __tmp$_M_cur_157(41)>
      # DEBUG __tmp$_M_cur => __tmp$_M_cur_217
      # DEBUG this => &D.49283
      # DEBUG __x => NULL
      # .MEM_227 = VDEF <.MEM_173>
      __tmp ={v} {CLOBBER};
      # DEBUG D#28 => &D.49283
      # DEBUG this => D#28
      # .MEM_106 = VDEF <.MEM_227>
      D.49283 ={v} {CLOBBER};
      # VUSE <.MEM_106>
      f_20 = *__tmp$_M_cur_217;
      # DEBUG bf => f_20
      # VUSE <.MEM_106>
      _21 = f_20->pri;
      if (_21 > prephitmp_252)
        goto <bb 15>;
      else
        goto <bb 16>;

    }
    bb_15 (preds = {bb_14 }, succs = {bb_16 })
    {
      <bb 15>:

    }
    bb_16 (preds = {bb_14 bb_15 }, succs = {bb_17 bb_18 })
    {
      <bb 16>:
      # f_3 = PHI <f_168(14), f_20(15)>
      # prephitmp_209 = PHI <prephitmp_252(14), _21(15)>
      # prephitmp_239 = PHI <prephitmp_252(14), _21(15)>
      # DEBUG df => f_3
      i_23 = i_146 + 1;
      # DEBUG i => i_23
      # DEBUG i => i_23
      # DEBUG df => f_3
      # DEBUG D#80 => &this_10(D)->_buffer
      # DEBUG this => D#80
      # DEBUG D#41 => &MEM[(const struct deque *)D#80].D.44879._M_impl._M_start
      # DEBUG D#42 => &MEM[(const struct deque *)D#80].D.44879._M_impl._M_finish
      # DEBUG __x => D#42
      # DEBUG __y => D#41
      # DEBUG __size => 8
      if (i_23 < _137)
        goto <bb 17>;
      else
        goto <bb 18>;

    }
    bb_17 (preds = {bb_16 }, succs = {bb_10 })
    {
      <bb 17>:
      goto <bb 10>;

    }
    bb_38 (preds = {bb_10 }, succs = {bb_14 })
    {
      <bb 38>:
      _138 = i_146 * 8;
      __tmp$_M_cur_139 = _28 + _138;
      # DEBUG __tmp$_M_cur => __tmp$_M_cur_139
      goto <bb 14>;

    }
    bb_39 (preds = {bb_10 }, succs = {bb_11 bb_12 })
    {
      <bb 39>:
      if (__offset_135 > 0)
        goto <bb 11>;
      else
        goto <bb 12>;

    }
  }
}

Pass statistics:
----------------

void VC::UpdatePriority() (struct VCD.43951 * const thisD.45165)
{
  struct FlitD.32424 * * __tmp$_M_curD.51894;
  char_typeD.17540 D.51892;
  charD.10 __cD.51891;
  char_typeD.17540 D.51889;
  charD.10 __cD.51888;
  char_typeD.20619 D.51886;
  struct basic_ostreamD.4635 & D.51880;
  char_typeD.17540 D.51877;
  charD.10 __cD.51876;
  char_typeD.17540 D.51874;
  charD.10 __cD.51873;
  char_typeD.20619 D.51871;
  struct basic_ostreamD.4635 & D.51865;
  const difference_typeD.44227 __offsetD.51858;
  struct _SelfD.44228 & D.51862;
  struct _SelfD.44228 __tmpD.51851;
  struct _SelfD.44228 D.49283;
  size_tD.3655 iD.45169;
  struct FlitD.32424 * fD.45167;
  struct FlitD.32424 * * * _12;
  ePrioTypeD.44886 _13;
  long intD.12 _14;
  intD.9 _15;
  struct FlitD.32424 * * * _17;
  intD.9 _19;
  intD.9 _21;
  boolD.2757 _24;
  boolD.2757 _25;
  intD.9 _26;
  intD.9 _27;
  struct FlitD.32424 * * const _28;
  intD.9 _30;
  struct ostreamD.4636 * gWatchOut.69_31;
  struct basic_ostreamD.4635 & _33;
  const size_typeD.12304 _34;
  struct basic_ostreamD.4635 & _36;
  struct basic_ostreamD.4635 & _38;
  boolD.2757 _39;
  intD.9 _40;
  intD.9 _41;
  struct FlitD.32424 * * const _42;
  intD.9 _44;
  struct ostreamD.4636 * gWatchOut.69_45;
  struct basic_ostreamD.4635 & _47;
  const size_typeD.12304 _48;
  struct basic_ostreamD.4635 & _50;
  struct basic_ostreamD.4635 & _52;
  long intD.12 _55;
  long intD.12 _56;
  long intD.12 _57;
  long intD.12 _58;
  long intD.12 _59;
  long intD.12 _61;
  struct FlitD.32424 * * _62;
  long intD.12 _63;
  long intD.12 _64;
  long intD.12 _65;
  long intD.12 _66;
  struct FlitD.32424 * * _67;
  long intD.12 _68;
  long intD.12 _69;
  long intD.12 _70;
  long intD.12 _71;
  difference_typeD.44227 _72;
  intD.9 pretmp_94;
  intD.9 pretmp_95;
  long intD.12 __n.70_96;
  long intD.12 pretmp_97;
  struct FlitD.32424 * * const pretmp_98;
  long intD.12 _99;
  charD.10 * const _100;
  struct basic_ostreamD.4635 & _101;
  long intD.12 _102;
  charD.10 * const _103;
  struct basic_ostreamD.4635 & _104;
  const struct __ctype_typeD.20624 * _113;
  const struct __ctype_typeD.20624 * _120;
  long intD.12 _127;
  long intD.12 _128;
  long intD.12 _129;
  difference_typeD.44227 _131;
  long intD.12 _136;
  size_typeD.44406 _137;
  long unsigned intD.14 _138;
  long intD.12 iftmp.74_140;
  long unsigned intD.14 _142;
  long unsigned intD.14 _143;
  long intD.12 _144;
  long intD.12 iftmp.74_145;
  long intD.12 iftmp.74_147;
  long unsigned intD.14 __node_offset.76_148;
  long unsigned intD.14 _149;
  struct FlitD.32424 * * * _150;
  struct FlitD.32424 * * _151;
  long intD.12 _152;
  long intD.12 _153;
  long intD.12 _154;
  long unsigned intD.14 _155;
  long unsigned intD.14 _156;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _158;
  long intD.12 _159;
  sizetype _160;
  struct basic_iosD.4629 * _161;
  long intD.12 _162;
  struct basic_ostreamD.4635 & _164;
  struct FlitD.32424 * * _165;
  charD.10 _166;
  char_typeD.17540 _169;
  unsigned long _171;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _174;
  intD.9 (*__vtbl_ptr_typeD.2760) () _175;
  voidD.45 * PROF_179;
  char_typeD.17540 _181;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _184;
  long intD.12 _185;
  sizetype _186;
  struct basic_iosD.4629 * _187;
  struct basic_ostreamD.4635 & _190;
  charD.10 _192;
  char_typeD.17540 _195;
  long intD.12 _197;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _200;
  intD.9 (*__vtbl_ptr_typeD.2760) () _201;
  long intD.12 _203;
  long intD.12 pretmp_204;
  voidD.45 * PROF_205;
  char_typeD.17540 _207;
  intD.9 pretmp_208;
  intD.9 prephitmp_209;
  struct FlitD.32424 * * * _213;
  long intD.12 _214;
  struct FlitD.32424 * * * _215;
  long intD.12 _216;
  long intD.12 _218;
  long intD.12 _219;
  long intD.12 _220;
  long intD.12 _223;
  long intD.12 _224;
  struct FlitD.32424 * * _226;
  intD.9 prephitmp_231;
  intD.9 prephitmp_235;
  intD.9 prephitmp_239;
  long intD.12 pretmp_244;
  intD.9 pretmp_246;
  intD.9 prephitmp_247;
  intD.9 pretmp_248;
  intD.9 pretmp_249;
  intD.9 prephitmp_250;
  intD.9 pretmp_251;
  intD.9 prephitmp_252;

;;   basic block 2, loop depth 0, count 0, freq 6246, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#76ptD.0 => &this_10(D)->_bufferD.44881
  # DEBUG thisD.49261 => D#76ptD.0
  # DEBUG D#17ptD.0 => &MEM[(const struct dequeD.32466 *)D#76ptD.0].D.44879._M_implD.44330._M_startD.44334
  # DEBUG D#18ptD.0 => &MEM[(const struct dequeD.32466 *)D#76ptD.0].D.44879._M_implD.44330._M_finishD.44335
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  _42 = MEM[(struct FlitD.32424 * * *)this_10(D) + 144B];
  # DEBUG D#15ptD.0 => D#18ptD.0
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  _28 = MEM[(struct FlitD.32424 * * *)this_10(D) + 112B];
  # DEBUG D#16ptD.0 => D#17ptD.0
  # DEBUG __xD.49262 => D#15ptD.0
  # DEBUG __yD.49263 => D#16ptD.0
  if (_28 == _42)
    goto <bb 37>;
  else
    goto <bb 3>;
;;    succ:       37 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 5612, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  _13 = this_10(D)->_pri_typeD.44892;
  if (_13 == 1)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4 [19.9%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [80.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 1117, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [19.9%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#77ptD.0 => &this_10(D)->_bufferD.44881
  # DEBUG thisD.49265 => D#77ptD.0
  # DEBUG D#41ptD.0 => &MEM[(const struct dequeD.32466 *)D#77ptD.0].D.44879._M_implD.44330._M_startD.44334
  # DEBUG D#42ptD.0 => &MEM[(const struct dequeD.32466 *)D#77ptD.0].D.44879._M_implD.44330._M_finishD.44335
  # DEBUG __xD.49267 => D#42ptD.0
  # DEBUG __yD.49266 => D#41ptD.0
  # DEBUG __sizeD.49022 => 8
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  _17 = MEM[(const struct _Deque_iteratorD.44197 &)this_10(D) + 144]._M_nodeD.44232;
  _14 = (long intD.12) _17;
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  _12 = MEM[(const struct _Deque_iteratorD.44197 &)this_10(D) + 112]._M_nodeD.44232;
  _55 = (long intD.12) _12;
  _56 = _14 - _55;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _57 = _56 /[ex] 8;
  # RANGE [-1152921504606846977, 1152921504606846974]
  _58 = _57 + -1;
  # RANGE [-9223372036854775808, 9223372036854775807] NONZERO 18446744073709551552
  _59 = _58 * 64;
  _61 = (long intD.12) _42;
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  _62 = MEM[(const struct _Deque_iteratorD.44197 &)this_10(D) + 144]._M_firstD.44230;
  _63 = (long intD.12) _62;
  _64 = _61 - _63;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _65 = _64 /[ex] 8;
  _66 = _59 + _65;
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  _67 = MEM[(const struct _Deque_iteratorD.44197 &)this_10(D) + 112]._M_lastD.44231;
  _68 = (long intD.12) _67;
  _69 = (long intD.12) _28;
  _70 = _68 - _69;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _71 = _70 /[ex] 8;
  _72 = _66 + _71;
  _15 = (intD.9) _72;
  # .MEM_16 = VDEF <.MEM_11(D)>
  this_10(D)->_priD.44893 = _15;
  goto <bb 37>;
;;    succ:       37 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 4495, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       3 [80.1%]  (FALSE_VALUE,EXECUTABLE)
  if (_13 != 3)
    goto <bb 6>;
  else
    goto <bb 37>;
;;    succ:       6 [80.1%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [19.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 3600, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [80.1%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#78ptD.0 => &this_10(D)->_bufferD.44881
  # DEBUG thisD.49269 => D#78ptD.0
  # DEBUG thisD.49270 => D#78ptD.0
  # DEBUG D#21ptD.0 => &D#78ptD.0->D.44879._M_implD.44330._M_startD.44334
  # DEBUG thisD.49272 => NULL
  # DEBUG __xD.49271 => D#21ptD.0
  # DEBUG D#31ptD.0 => MEM[(const struct iteratorD.44217 &)D#78ptD.0 + 16]._M_firstD.44230
  # DEBUG D.48942 => D#31ptD.0
  # DEBUG D#30ptD.0 => MEM[(const struct iteratorD.44217 &)D#78ptD.0 + 16]._M_lastD.44231
  # DEBUG D.48943 => D#30ptD.0
  # DEBUG D#29ptD.0 => MEM[(const struct iteratorD.44217 &)D#78ptD.0 + 16]._M_nodeD.44232
  # DEBUG D.48944 => D#29ptD.0
  # DEBUG thisD.48936 => D#28ptD.0
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  f_18 = *_28;
  # DEBUG fD.45167 => f_18
  if (_13 != 0)
    goto <bb 7>;
  else
    goto <bb 28>;
;;    succ:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 1800, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  _19 = this_10(D)->_priority_donationD.44894;
  if (_19 != 0)
    goto <bb 8>;
  else
    goto <bb 28>;
;;    succ:       8 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG iD.45169 => 1
  # DEBUG dfD.45168 => f_18
  # DEBUG D#80ptD.0 => &this_10(D)->_bufferD.44881
  # DEBUG thisD.49274 => D#80ptD.0
  # DEBUG D#41ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_startD.44334
  # DEBUG D#42ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_finishD.44335
  # DEBUG __xD.49276 => D#42ptD.0
  # DEBUG __yD.49275 => D#41ptD.0
  # DEBUG __sizeD.49022 => 8
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  _213 = MEM[(const struct _Deque_iteratorD.44197 &)this_10(D) + 144]._M_nodeD.44232;
  _214 = (long intD.12) _213;
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  _215 = MEM[(const struct _Deque_iteratorD.44197 &)this_10(D) + 112]._M_nodeD.44232;
  _216 = (long intD.12) _215;
  _223 = _214 - _216;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _127 = _223 /[ex] 8;
  # RANGE [-1152921504606846977, 1152921504606846974]
  _224 = _127 + -1;
  # RANGE [-9223372036854775808, 9223372036854775807] NONZERO 18446744073709551552
  _128 = _224 * 64;
  _129 = (long intD.12) _42;
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  _226 = MEM[(const struct _Deque_iteratorD.44197 &)this_10(D) + 144]._M_firstD.44230;
  _218 = (long intD.12) _226;
  _219 = _129 - _218;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _152 = _219 /[ex] 8;
  _220 = _128 + _152;
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  _165 = MEM[(const struct _Deque_iteratorD.44197 &)this_10(D) + 112]._M_lastD.44231;
  _136 = (long intD.12) _165;
  _203 = (long intD.12) _28;
  _197 = _136 - _203;
  # RANGE [-1152921504606846976, 1152921504606846975]
  _162 = _197 /[ex] 8;
  _131 = _162 + _220;
  # RANGE [0, 18446744073709551615]
  _137 = (size_typeD.44406) _131;
  if (_137 > 1)
    goto <bb 9>;
  else
    goto <bb 28>;
;;    succ:       9 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  # PT = nonlocal escaped 
  pretmp_98 = MEM[(const struct iteratorD.44217 &)this_10(D) + 112]._M_firstD.44230;
  pretmp_204 = (long intD.12) pretmp_98;
  pretmp_244 = _203 - pretmp_204;
  pretmp_97 = pretmp_244 /[ex] 8;
  # VUSE <.MEM_11(D)>
  pretmp_251 = f_18->priD.32446;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # f_168 = PHI <f_18(9), f_3(17)>
  # RANGE [1, 18446744073709551615]
  # i_146 = PHI <1(9), i_23(17)>
  # .MEM_173 = PHI <.MEM_11(D)(9), .MEM_106(17)>
  # prephitmp_252 = PHI <pretmp_251(9), prephitmp_239(17)>
  # DEBUG iD.45169 => i_146
  # DEBUG dfD.45168 => f_168
  # DEBUG D#80ptD.0 => &this_10(D)->_bufferD.44881
  # DEBUG thisD.49274 => D#80ptD.0
  # DEBUG D#41ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_startD.44334
  # DEBUG D#42ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_finishD.44335
  # DEBUG __xD.49276 => D#42ptD.0
  # DEBUG __yD.49275 => D#41ptD.0
  # DEBUG __sizeD.49022 => 8
  # DEBUG D#79ptD.0 => &this_10(D)->_bufferD.44881
  # DEBUG thisD.49278 => D#79ptD.0
  # DEBUG __nD.49279 => i_146
  # RANGE ~[-1, 0]
  __n.70_96 = (long intD.12) i_146;
  # DEBUG D#262ptD.0 => &MEM[(struct dequeD.32466 *)this_10(D) + 96B].D.44879._M_implD.44330._M_startD.44334
  # DEBUG thisD.49281 => D#262ptD.0
  # DEBUG __nD.49280 => __n.70_96
  # DEBUG thisD.51849 => D#262ptD.0
  # DEBUG __nD.51850 => __n.70_96
  # DEBUG thisD.51853 => &__tmpD.51851
  # DEBUG __xD.51852 => D#262ptD.0
  # DEBUG thisD.51856 => &__tmpD.51851
  # DEBUG __nD.51857 => __n.70_96
  __offset_135 = __n.70_96 + pretmp_97;
  # DEBUG __offsetD.51858 => __offset_135
  # DEBUG __sizeD.49022 => 8
  _171 = (unsigned long) __offset_135;
  if (_171 <= 63)
    goto <bb 38>;
  else
    goto <bb 39>;
;;    succ:       38 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 4052, maybe hot
;;   Invalid sum of incoming frequencies 4218, should be 4052
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       39 [73.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __sizeD.49022 => 8
  # RANGE [0, 144115188075855871] NONZERO 144115188075855871
  iftmp.74_140 = __offset_135 >> 6;
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 1499, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       39 [27.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE ~[9223372036854775808, 18446744073709551614]
  _142 = ~_171;
  # DEBUG __sizeD.49022 => 8
  # RANGE [0, 288230376151711743] NONZERO 288230376151711743
  _143 = _142 >> 6;
  # RANGE [0, 288230376151711743] NONZERO 288230376151711743
  _144 = (long intD.12) _143;
  # RANGE [-288230376151711744, -1]
  iftmp.74_145 = ~_144;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 5551, maybe hot
;;    prev block 12, next block 41, flags: (NEW, REACHABLE)
;;    pred:       11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [-288230376151711744, 144115188075855871]
  # iftmp.74_147 = PHI <iftmp.74_140(11), iftmp.74_145(12)>
;;    succ:       41 [100.0%]  (FALLTHRU)

;;   basic block 41, loop depth 1, count 0, freq 5551, maybe hot
;;    prev block 13, next block 14, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU)
  # DEBUG __node_offsetD.51859 => iftmp.74_147
  # RANGE ~[144115188075855872, 18158513697557839871]
  __node_offset.76_148 = (long unsigned intD.14) iftmp.74_147;
  # RANGE [0, 18446744073709551608] NONZERO 18446744073709551608
  _149 = __node_offset.76_148 * 8;
  # PT = nonlocal escaped 
  _150 = _215 + _149;
  # DEBUG thisD.51861 => &__tmpD.51851
  # DEBUG __new_nodeD.51860 => _150
  # VUSE <.MEM_173>
  # PT = nonlocal escaped 
  _151 = *_150;
  # DEBUG __sizeD.49022 => 8
  # DEBUG __sizeD.49022 => 8
  # RANGE [-9223372036854775808, 9223372036854775744] NONZERO 18446744073709551552
  _153 = iftmp.74_147 * 64;
  _154 = __offset_135 - _153;
  # RANGE [0, 18446744073709551615]
  _155 = (long unsigned intD.14) _154;
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _156 = _155 * 8;
  # PT = nonlocal escaped 
  __tmp$_M_cur_157 = _151 + _156;
  # DEBUG __tmp$_M_curD.51894 => __tmp$_M_cur_157
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 41, next block 15, flags: (NEW, REACHABLE)
;;    pred:       38 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __tmp$_M_cur_217 = PHI <__tmp$_M_cur_139(38), __tmp$_M_cur_157(41)>
  # DEBUG __tmp$_M_curD.51894 => __tmp$_M_cur_217
  # DEBUG thisD.51855 => &D.49283
  # DEBUG __xD.51854 => NULL
  # .MEM_227 = VDEF <.MEM_173>
  __tmpD.51851 ={v} {CLOBBER};
  # DEBUG D#28ptD.0 => &D.49283
  # DEBUG thisD.49253 => D#28ptD.0
  # .MEM_106 = VDEF <.MEM_227>
  D.49283 ={v} {CLOBBER};
  # VUSE <.MEM_106>
  # PT = nonlocal escaped 
  f_20 = *__tmp$_M_cur_217;
  # DEBUG bfD.45170 => f_20
  # VUSE <.MEM_106>
  _21 = f_20->priD.32446;
  if (_21 > prephitmp_252)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 14, next block 16, flags: (NEW)
;;    pred:       14 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       14 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # f_3 = PHI <f_168(14), f_20(15)>
  # prephitmp_209 = PHI <prephitmp_252(14), _21(15)>
  # prephitmp_239 = PHI <prephitmp_252(14), _21(15)>
  # DEBUG dfD.45168 => f_3
  # RANGE [2, 18446744073709551615]
  i_23 = i_146 + 1;
  # DEBUG iD.45169 => i_23
  # DEBUG iD.45169 => i_23
  # DEBUG dfD.45168 => f_3
  # DEBUG D#80ptD.0 => &this_10(D)->_bufferD.44881
  # DEBUG thisD.49274 => D#80ptD.0
  # DEBUG D#41ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_startD.44334
  # DEBUG D#42ptD.0 => &MEM[(const struct dequeD.32466 *)D#80ptD.0].D.44879._M_implD.44330._M_finishD.44335
  # DEBUG __xD.49276 => D#42ptD.0
  # DEBUG __yD.49275 => D#41ptD.0
  # DEBUG __sizeD.49022 => 8
  if (i_23 < _137)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 17, next block 40, flags: (NEW, REACHABLE)
;;    pred:       16 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # f_240 = PHI <f_3(16)>
  # prephitmp_235 = PHI <prephitmp_209(16)>
;;    succ:       40 [100.0%]  (FALLTHRU)

;;   basic block 40, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 18, next block 19, flags: (NEW)
;;    pred:       18 [100.0%]  (FALLTHRU)
  if (f_240 != f_18)
    goto <bb 19>;
  else
    goto <bb 28>;
;;    succ:       19 [93.4%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [6.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 40, next block 20, flags: (NEW, REACHABLE)
;;    pred:       40 [93.4%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_106>
  _24 = f_240->watchD.32448;
  if (_24 != 0)
    goto <bb 21>;
  else
    goto <bb 20>;
;;    succ:       21 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 543, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       19 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_106>
  _25 = f_18->watchD.32448;
  if (_25 != 0)
    goto <bb 21>;
  else
    goto <bb 36>;
;;    succ:       21 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 493, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_106>
  _26 = f_18->idD.32441;
  # VUSE <.MEM_106>
  _27 = f_240->idD.32441;
  # DEBUG D#81ptD.0 => &this_10(D)->D.44977
  # DEBUG thisD.49310 => D#81ptD.0
  # .MEM_29 = VDEF <.MEM_106>
  # USE = nonlocal 
  # CLB = nonlocal 
  _30 = _Z10GetSimTimevD.26752 ();
  # VUSE <.MEM_29>
  # PT = nonlocal escaped 
  gWatchOut.69_31 = gWatchOutD.26762;
  # .MEM_32 = VDEF <.MEM_29>
  # PT = nonlocal escaped 
  # USE = nonlocal 
  # CLB = nonlocal 
  _33 = _ZNSolsEiD.21315 (gWatchOut.69_31, _30);
  # DEBUG __outD.49306 => _33
  # DEBUG __sD.49307 => " | "
  # DEBUG __sD.49308 => " | "
  # .MEM_107 = VDEF <.MEM_32>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_33, " | ", 3);
  # DEBUG __osD.49303 => _33
  # DEBUG __strD.49304 => NULL
  # VUSE <.MEM_107>
  _34 = MEM[(long unsigned intD.14 *)this_10(D) + 48B];
  # DEBUG thisD.48751 => D#2ptD.0
  _99 = (long intD.12) _34;
  # DEBUG thisD.48748 => NULL
  # VUSE <.MEM_107>
  # PT = nonlocal escaped 
  _100 = MEM[(charD.10 * *)this_10(D) + 40B];
  # DEBUG thisD.48667 => D#1ptD.0
  # .MEM_108 = VDEF <.MEM_107>
  # PT = nonlocal escaped 
  # USE = nonlocal 
  # CLB = nonlocal 
  _101 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_33, _100, _99);
  # DEBUG __outD.49299 => _101
  # DEBUG __sD.49300 => " | "
  # DEBUG __sD.49301 => " | "
  # .MEM_109 = VDEF <.MEM_108>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_101, " | ", 3);
  # DEBUG __outD.49295 => _101
  # DEBUG __sD.49296 => "Flit "
  # DEBUG __sD.49297 => "Flit "
  # .MEM_110 = VDEF <.MEM_109>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_101, "Flit ", 5);
  # .MEM_35 = VDEF <.MEM_110>
  # PT = nonlocal escaped 
  # USE = nonlocal 
  # CLB = nonlocal 
  _36 = _ZNSolsEiD.21315 (_101, _27);
  # DEBUG __outD.49291 => _36
  # DEBUG __sD.49292 => " donates priority to flit "
  # DEBUG __sD.49293 => " donates priority to flit "
  # .MEM_111 = VDEF <.MEM_35>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_36, " donates priority to flit ", 26);
  # .MEM_37 = VDEF <.MEM_111>
  # PT = nonlocal escaped 
  # USE = nonlocal 
  # CLB = nonlocal 
  _38 = _ZNSolsEiD.21315 (_36, _26);
  # DEBUG __outD.49287 => _38
  # DEBUG __sD.49288 => "."
  # DEBUG __sD.49289 => "."
  # .MEM_112 = VDEF <.MEM_37>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_38, ".", 1);
  # DEBUG thisD.49284 => _38
  # DEBUG __pfD.49285 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.21447
  # DEBUG __osD.51863 => _38
  # VUSE <.MEM_112>
  # PT = nonlocal escaped 
  _158 = _38->_vptr.basic_ostreamD.21407;
  # VUSE <.MEM_112>
  _159 = MEM[(long intD.12 *)_158 + -24B];
  # RANGE [0, 18446744073709551615]
  _160 = (sizetype) _159;
  # PT = nonlocal escaped 
  _161 = _38 + _160;
  # DEBUG thisD.51866 => _161
  # DEBUG __cD.51867 => 10
  # VUSE <.MEM_112>
  # PT = nonlocal escaped 
  _113 = MEM[(const struct basic_iosD.4629 *)_161]._M_ctypeD.20631;
  # DEBUG __fD.51868 => _113
  if (_113 == 0B)
    goto <bb 22>;
  else
    goto <bb 23>;
;;    succ:       22 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 0
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       21 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_241 = PHI <.MEM_112(21), .MEM_119(30)>
  # .MEM_236 = VDEF <.MEM_241>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZSt16__throw_bad_castvD.4760 ();
;;    succ:      

;;   basic block 23, loop depth 0, count 0, freq 493, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       21 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.51870 => _113
  # DEBUG __cD.51869 => 10
  # VUSE <.MEM_112>
  _166 = MEM[(const struct ctypeD.7865 *)_113]._M_widen_okD.17546;
  if (_166 != 0)
    goto <bb 24>;
  else
    goto <bb 25>;
;;    succ:       24 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 301, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_112>
  _169 = MEM[(const struct ctypeD.7865 *)_113]._M_widenD.17547[10];
  pretmp_208 = (intD.9) _169;
  goto <bb 27>;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 192, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       23 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.51872 => _113
  # DEBUG __cD.51873 => 10
  # .MEM_228 = VDEF <.MEM_112>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNKSt5ctypeIcE13_M_widen_initEvD.17654 (_113);
  # VUSE <.MEM_228>
  # PT = nonlocal escaped 
  _174 = MEM[(const struct ctypeD.7865 *)_113].D.17687._vptr.facetD.14305;
  # VUSE <.MEM_228>
  # PT = nonlocal escaped 
  _175 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_174 + 48B];
  # PT = anything 
  PROF_179 = [obj_type_ref] OBJ_TYPE_REF(_175;(const struct ctypeD.7865)_113->6);
  if (PROF_179 == _ZNKSt5ctypeIcE8do_widenEcD.17635)
    goto <bb 27>;
  else
    goto <bb 26>;
;;    succ:       27 [79.7%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [20.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 39, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       25 [20.3%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_229 = VDEF <.MEM_228>
  # USE = nonlocal 
  # CLB = nonlocal 
  _181 = OBJ_TYPE_REF(_175;(const struct ctypeD.7865)_113->6) (_113, 10);
  pretmp_246 = (intD.9) _181;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 493, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                25 [79.7%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_210 = PHI <.MEM_112(24), .MEM_228(25), .MEM_229(26)>
  # RANGE [-128, 127]
  # prephitmp_247 = PHI <pretmp_208(24), 10(25), pretmp_246(26)>
  # .MEM_233 = VDEF <.MEM_210>
  # PT = nonlocal escaped 
  # USE = nonlocal 
  # CLB = nonlocal 
  _164 = _ZNSo3putEcD.21342 (_38, prephitmp_247);
  # DEBUG __osD.51864 => _164
  # .MEM_234 = VDEF <.MEM_233>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNSo5flushEvD.21353 (_164);
;;    succ:       28 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 3328, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                7 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                8 [9.0%]  (FALSE_VALUE,EXECUTABLE)
;;                40 [6.6%]  (FALSE_VALUE,EXECUTABLE)
;;                27 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # f_1 = PHI <f_18(6), f_18(7), f_18(8), f_18(40), f_240(27)>
  # .MEM_7 = PHI <.MEM_11(D)(6), .MEM_11(D)(7), .MEM_11(D)(8), .MEM_106(40), .MEM_234(27)>
  # DEBUG fD.45167 => f_1
  # VUSE <.MEM_7>
  _39 = f_1->watchD.32448;
  if (_39 != 0)
    goto <bb 30>;
  else
    goto <bb 29>;
;;    succ:       30 [31.4%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [68.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 2284, maybe hot
;;    prev block 28, next block 30, flags: (NEW)
;;    pred:       28 [68.6%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7>
  pretmp_248 = f_1->priD.32446;
  goto <bb 36>;
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 1044, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       28 [31.4%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7>
  _40 = f_1->priD.32446;
  # VUSE <.MEM_7>
  _41 = f_1->idD.32441;
  # DEBUG D#82ptD.0 => &this_10(D)->D.44977
  # DEBUG thisD.49338 => D#82ptD.0
  # .MEM_43 = VDEF <.MEM_7>
  # USE = nonlocal 
  # CLB = nonlocal 
  _44 = _Z10GetSimTimevD.26752 ();
  # VUSE <.MEM_43>
  # PT = nonlocal escaped 
  gWatchOut.69_45 = gWatchOutD.26762;
  # .MEM_46 = VDEF <.MEM_43>
  # PT = nonlocal escaped 
  # USE = nonlocal 
  # CLB = nonlocal 
  _47 = _ZNSolsEiD.21315 (gWatchOut.69_45, _44);
  # DEBUG __outD.49334 => _47
  # DEBUG __sD.49335 => " | "
  # DEBUG __sD.49336 => " | "
  # .MEM_114 = VDEF <.MEM_46>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_47, " | ", 3);
  # DEBUG __osD.49331 => _47
  # DEBUG __strD.49332 => NULL
  # VUSE <.MEM_114>
  _48 = MEM[(long unsigned intD.14 *)this_10(D) + 48B];
  # DEBUG thisD.48751 => D#2ptD.0
  _102 = (long intD.12) _48;
  # DEBUG thisD.48748 => NULL
  # VUSE <.MEM_114>
  # PT = nonlocal escaped 
  _103 = MEM[(charD.10 * *)this_10(D) + 40B];
  # DEBUG thisD.48667 => D#1ptD.0
  # .MEM_115 = VDEF <.MEM_114>
  # PT = nonlocal escaped 
  # USE = nonlocal 
  # CLB = nonlocal 
  _104 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_47, _103, _102);
  # DEBUG __outD.49327 => _104
  # DEBUG __sD.49328 => " | "
  # DEBUG __sD.49329 => " | "
  # .MEM_116 = VDEF <.MEM_115>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_104, " | ", 3);
  # DEBUG __outD.49323 => _104
  # DEBUG __sD.49324 => "Flit "
  # DEBUG __sD.49325 => "Flit "
  # .MEM_117 = VDEF <.MEM_116>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_104, "Flit ", 5);
  # .MEM_49 = VDEF <.MEM_117>
  # PT = nonlocal escaped 
  # USE = nonlocal 
  # CLB = nonlocal 
  _50 = _ZNSolsEiD.21315 (_104, _41);
  # DEBUG __outD.49319 => _50
  # DEBUG __sD.49320 => " sets priority to "
  # DEBUG __sD.49321 => " sets priority to "
  # .MEM_118 = VDEF <.MEM_49>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_50, " sets priority to ", 18);
  # .MEM_51 = VDEF <.MEM_118>
  # PT = nonlocal escaped 
  # USE = nonlocal 
  # CLB = nonlocal 
  _52 = _ZNSolsEiD.21315 (_50, _40);
  # DEBUG __outD.49315 => _52
  # DEBUG __sD.49316 => "."
  # DEBUG __sD.49317 => "."
  # .MEM_119 = VDEF <.MEM_51>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.9602 (_52, ".", 1);
  # DEBUG thisD.49312 => _52
  # DEBUG __pfD.49313 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.21447
  # DEBUG __osD.51878 => _52
  # VUSE <.MEM_119>
  # PT = nonlocal escaped 
  _184 = _52->_vptr.basic_ostreamD.21407;
  # VUSE <.MEM_119>
  _185 = MEM[(long intD.12 *)_184 + -24B];
  # RANGE [0, 18446744073709551615]
  _186 = (sizetype) _185;
  # PT = nonlocal escaped 
  _187 = _52 + _186;
  # DEBUG thisD.51881 => _187
  # DEBUG __cD.51882 => 10
  # VUSE <.MEM_119>
  # PT = nonlocal escaped 
  _120 = MEM[(const struct basic_iosD.4629 *)_187]._M_ctypeD.20631;
  # DEBUG __fD.51883 => _120
  if (_120 == 0B)
    goto <bb 22>;
  else
    goto <bb 31>;
;;    succ:       22 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 1044, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       30 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.51885 => _120
  # DEBUG __cD.51884 => 10
  # VUSE <.MEM_119>
  _192 = MEM[(const struct ctypeD.7865 *)_120]._M_widen_okD.17546;
  if (_192 != 0)
    goto <bb 32>;
  else
    goto <bb 33>;
;;    succ:       32 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 637, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       31 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_119>
  _195 = MEM[(const struct ctypeD.7865 *)_120]._M_widenD.17547[10];
  pretmp_94 = (intD.9) _195;
  goto <bb 35>;
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 407, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       31 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.51887 => _120
  # DEBUG __cD.51888 => 10
  # .MEM_237 = VDEF <.MEM_119>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNKSt5ctypeIcE13_M_widen_initEvD.17654 (_120);
  # VUSE <.MEM_237>
  # PT = nonlocal escaped 
  _200 = MEM[(const struct ctypeD.7865 *)_120].D.17687._vptr.facetD.14305;
  # VUSE <.MEM_237>
  # PT = nonlocal escaped 
  _201 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_200 + 48B];
  # PT = anything 
  PROF_205 = [obj_type_ref] OBJ_TYPE_REF(_201;(const struct ctypeD.7865)_120->6);
  if (PROF_205 == _ZNKSt5ctypeIcE8do_widenEcD.17635)
    goto <bb 35>;
  else
    goto <bb 34>;
;;    succ:       35 [81.1%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [18.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 77, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       33 [18.9%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_238 = VDEF <.MEM_237>
  # USE = nonlocal 
  # CLB = nonlocal 
  _207 = OBJ_TYPE_REF(_201;(const struct ctypeD.7865)_120->6) (_120, 10);
  pretmp_95 = (intD.9) _207;
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 1044, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       32 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [81.1%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_212 = PHI <.MEM_119(32), .MEM_237(33), .MEM_238(34)>
  # RANGE [-128, 127]
  # prephitmp_231 = PHI <pretmp_94(32), 10(33), pretmp_95(34)>
  # .MEM_242 = VDEF <.MEM_212>
  # PT = nonlocal escaped 
  # USE = nonlocal 
  # CLB = nonlocal 
  _190 = _ZNSo3putEcD.21342 (_52, prephitmp_231);
  # DEBUG __osD.51879 => _190
  # .MEM_243 = VDEF <.MEM_242>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNSo5flushEvD.21353 (_190);
  # VUSE <.MEM_243>
  pretmp_249 = f_1->priD.32446;
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 3599, maybe hot
;;    prev block 35, next block 42, flags: (NEW, REACHABLE)
;;    pred:       29 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                20 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_8 = PHI <.MEM_7(29), .MEM_243(35), .MEM_106(20)>
  # prephitmp_250 = PHI <pretmp_248(29), pretmp_249(35), prephitmp_235(20)>
;;    succ:       42 [100.0%]  (FALLTHRU)

;;   basic block 42, loop depth 0, count 0, freq 3599, maybe hot
;;    prev block 36, next block 37, flags: (NEW)
;;    pred:       36 [100.0%]  (FALLTHRU)
  # .MEM_54 = VDEF <.MEM_8>
  this_10(D)->_priD.44893 = prephitmp_250;
;;    succ:       37 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 6245, maybe hot
;;    prev block 42, next block 43, flags: (NEW, REACHABLE)
;;    pred:       5 [19.9%]  (FALSE_VALUE,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                42 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [10.1%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_9 = PHI <.MEM_11(D)(5), .MEM_16(4), .MEM_54(42), .MEM_11(D)(2)>
;;    succ:       43 [100.0%]  (FALLTHRU)

;;   basic block 43, loop depth 0, count 0, freq 6245, maybe hot
;;    prev block 37, next block 38, flags: (NEW)
;;    pred:       37 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_9>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 38, loop depth 1, count 0, freq 3549, maybe hot
;;   Invalid sum of incoming frequencies 4550, should be 3549
;;    prev block 43, next block 39, flags: (NEW, REACHABLE)
;;    pred:       10 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _138 = i_146 * 8;
  # PT = nonlocal escaped 
  __tmp$_M_cur_139 = _28 + _138;
  # DEBUG __tmp$_M_curD.51894 => __tmp$_M_cur_139
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 1, count 0, freq 5778, maybe hot
;;   Invalid sum of incoming frequencies 4550, should be 5778
;;    prev block 38, next block 1, flags: (NEW, REACHABLE)
;;    pred:       10 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__offset_135 > 0)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [27.0%]  (FALSE_VALUE,EXECUTABLE)

}



;; Function void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = OutputSet::sSetElement; _Val = OutputSet::sSetElement; _KeyOfValue = std::_Identity<OutputSet::sSetElement>; _Compare = std::less<OutputSet::sSetElement>; _Alloc = std::allocator<OutputSet::sSetElement>; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<OutputSet::sSetElement>*] (_ZNSt8_Rb_treeIN9OutputSet11sSetElementES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_E, funcdef_no=2231, decl_uid=31962, cgraph_uid=689, symbol_order=691)


Pass statistics:
----------------

void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = OutputSet::sSetElement; _Val = OutputSet::sSetElement; _KeyOfValue = std::_Identity<OutputSet::sSetElement>; _Compare = std::less<OutputSet::sSetElement>; _Alloc = std::allocator<OutputSet::sSetElement>; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<OutputSet::sSetElement>*] (struct _Rb_treeD.31590 * const thisD.31963, struct _Rb_tree_nodeD.31594 * __xD.31964)
{
  struct _Rb_tree_nodeD.31594 * __xD.52043;
  struct _Rb_tree_nodeD.31594 * __xD.52030;
  struct _Rb_tree_nodeD.31594 * __xD.52017;
  struct _Rb_tree_nodeD.31594 * __xD.52004;
  struct _Rb_tree_nodeD.31594 * __xD.51991;
  struct _Rb_tree_nodeD.31594 * __xD.51978;
  struct _Rb_tree_nodeD.31594 * __xD.51965;
  struct _Rb_tree_nodeD.31594 * __xD.51952;
  struct _Rb_tree_node_baseD.29379 * _39;

;;   basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __xD.31964 => __x_3(D)
  if (__x_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_38 = PHI <.MEM_4(D)(2), .MEM_10(6)>
  # VUSE <.MEM_38>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_68 = PHI <__x_3(D)(4), __x_9(38)>
  # .MEM_69 = PHI <.MEM_4(D)(4), .MEM_10(38)>
  # DEBUG __xD.31964 => __x_68
  # VUSE <.MEM_69>
  # PT = nonlocal escaped 
  __x_8 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_68 + 24B];
  # DEBUG D#32ptD.0 => __x_68
  # DEBUG __xD.50622 => D#32ptD.0
  # DEBUG thisD.51951 => this_6(D)
  # DEBUG __xD.51952 => __x_8
  # DEBUG __xD.51952 => __x_8
  if (__x_8 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_34 = PHI <.MEM_69(5), .MEM_50(9)>
  # VUSE <.MEM_34>
  # PT = nonlocal escaped 
  __x_9 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_68 + 16B];
  # DEBUG D#33ptD.0 => __x_68
  # DEBUG __xD.50619 => D#33ptD.0
  # DEBUG __yD.45631 => NULL
  # DEBUG D#224ptD.0 => this_6(D)
  # DEBUG __pD.50608 => __x_68
  # DEBUG thisD.50609 => D#224ptD.0
  # DEBUG D#223ptD.0 => D#224ptD.0
  # DEBUG D#222ptD.0 => D#224ptD.0
  # DEBUG D#220ptD.0 => D#222ptD.0
  # DEBUG D#221ptD.0 => __x_68
  # DEBUG thisD.50592 => D#220ptD.0
  # DEBUG __pD.50591 => D#221ptD.0
  # DEBUG D#219ptD.0 => D#220ptD.0
  # DEBUG D#218ptD.0 => D#221ptD.0
  # DEBUG D#217ptD.0 => D#221ptD.0
  # DEBUG thisD.50577 => D#217ptD.0
  # DEBUG D#216ptD.0 => &D#218ptD.0->_M_value_fieldD.45623
  # DEBUG __rD.49789 => D#216ptD.0
  # DEBUG D#215ptD.0 => D#219ptD.0
  # DEBUG thisD.50569 => D#215ptD.0
  # DEBUG D#214ptD.0 => D#215ptD.0
  # DEBUG thisD.50561 => D#214ptD.0
  # DEBUG thisD.50553 => NULL
  # DEBUG D.50554 => NULL
  # DEBUG thisD.50551 => NULL
  # DEBUG D#84ptD.0 => D#216ptD.0
  # DEBUG thisD.50568 => D#83ptD.0
  # DEBUG __pD.50567 => D#84ptD.0
  # DEBUG thisD.50578 => NULL
  # DEBUG thisD.50566 => NULL
  # DEBUG D#161ptD.0 => D#223ptD.0
  # DEBUG __pD.50611 => __x_68
  # DEBUG thisD.50610 => D#161ptD.0
  # DEBUG D#160ptD.0 => D#161ptD.0
  # DEBUG thisD.49829 => D#160ptD.0
  # DEBUG D#159ptD.0 => 1
  # DEBUG __pD.50614 => __x_68
  # DEBUG __aD.50612 => D#158ptD.0
  # DEBUG __nD.50613 => D#159ptD.0
  # DEBUG D#157ptD.0 => D#159ptD.0
  # DEBUG D#156ptD.0 => D#158ptD.0
  # DEBUG D#154ptD.0 => D#156ptD.0
  # DEBUG D#155ptD.0 => D#157ptD.0
  # DEBUG __pD.50617 => __x_68
  # DEBUG thisD.50615 => D#154ptD.0
  # DEBUG D.50616 => D#155ptD.0
  # .MEM_10 = VDEF <.MEM_34>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_68);
  # DEBUG __xD.31964 => __x_9
  # DEBUG __xD.31964 => __x_9
  if (__x_9 == 0B)
    goto <bb 3>;
  else
    goto <bb 38>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_72 = PHI <__x_8(7), __x_13(37)>
  # .MEM_93 = PHI <.MEM_69(7), .MEM_50(37)>
  # DEBUG __xD.51952 => __x_72
  # VUSE <.MEM_93>
  # PT = nonlocal escaped 
  __x_12 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_72 + 24B];
  # DEBUG D#32ptD.0 => __x_72
  # DEBUG __xD.50622 => D#32ptD.0
  # DEBUG thisD.51964 => this_6(D)
  # DEBUG __xD.51965 => __x_12
  # DEBUG __xD.51965 => __x_12
  if (__x_12 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_30 = PHI <.MEM_93(8), .MEM_49(12)>
  # VUSE <.MEM_30>
  # PT = nonlocal escaped 
  __x_13 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_72 + 16B];
  # DEBUG D#33ptD.0 => __x_72
  # DEBUG __xD.50619 => D#33ptD.0
  # DEBUG __yD.51953 => NULL
  # DEBUG D#224ptD.0 => this_6(D)
  # DEBUG __pD.51955 => __x_72
  # DEBUG thisD.51954 => D#224ptD.0
  # DEBUG D#223ptD.0 => D#224ptD.0
  # DEBUG D#222ptD.0 => D#224ptD.0
  # DEBUG D#220ptD.0 => D#222ptD.0
  # DEBUG D#221ptD.0 => __x_72
  # DEBUG thisD.50592 => D#220ptD.0
  # DEBUG __pD.50591 => D#221ptD.0
  # DEBUG D#219ptD.0 => D#220ptD.0
  # DEBUG D#218ptD.0 => D#221ptD.0
  # DEBUG D#217ptD.0 => D#221ptD.0
  # DEBUG thisD.50577 => D#217ptD.0
  # DEBUG D#216ptD.0 => &D#218ptD.0->_M_value_fieldD.45623
  # DEBUG __rD.49789 => D#216ptD.0
  # DEBUG D#215ptD.0 => D#219ptD.0
  # DEBUG thisD.50569 => D#215ptD.0
  # DEBUG D#214ptD.0 => D#215ptD.0
  # DEBUG thisD.50561 => D#214ptD.0
  # DEBUG thisD.50553 => NULL
  # DEBUG D.50554 => NULL
  # DEBUG thisD.50551 => NULL
  # DEBUG D#84ptD.0 => D#216ptD.0
  # DEBUG thisD.50568 => D#83ptD.0
  # DEBUG __pD.50567 => D#84ptD.0
  # DEBUG thisD.50578 => NULL
  # DEBUG thisD.50566 => NULL
  # DEBUG D#161ptD.0 => D#223ptD.0
  # DEBUG __pD.51957 => __x_72
  # DEBUG thisD.51956 => D#161ptD.0
  # DEBUG D#160ptD.0 => D#161ptD.0
  # DEBUG thisD.49829 => D#160ptD.0
  # DEBUG D#159ptD.0 => 1
  # DEBUG __pD.51960 => __x_72
  # DEBUG __aD.51958 => D#158ptD.0
  # DEBUG __nD.51959 => D#159ptD.0
  # DEBUG D#157ptD.0 => D#159ptD.0
  # DEBUG D#156ptD.0 => D#158ptD.0
  # DEBUG D#154ptD.0 => D#156ptD.0
  # DEBUG D#155ptD.0 => D#157ptD.0
  # DEBUG __pD.51963 => __x_72
  # DEBUG thisD.51961 => D#154ptD.0
  # DEBUG D.51962 => D#155ptD.0
  # .MEM_50 = VDEF <.MEM_30>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_72);
  # DEBUG __xD.51952 => __x_13
  # DEBUG __xD.51952 => __x_13
  if (__x_13 == 0B)
    goto <bb 6>;
  else
    goto <bb 37>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                36 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_71 = PHI <__x_12(10), __x_16(36)>
  # .MEM_90 = PHI <.MEM_93(10), .MEM_49(36)>
  # DEBUG __xD.51965 => __x_71
  # VUSE <.MEM_90>
  # PT = nonlocal escaped 
  __x_15 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_71 + 24B];
  # DEBUG D#32ptD.0 => __x_71
  # DEBUG __xD.50622 => D#32ptD.0
  # DEBUG thisD.51977 => this_6(D)
  # DEBUG __xD.51978 => __x_15
  # DEBUG __xD.51978 => __x_15
  if (__x_15 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;
;;    succ:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_26 = PHI <.MEM_90(11), .MEM_48(15)>
  # VUSE <.MEM_26>
  # PT = nonlocal escaped 
  __x_16 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_71 + 16B];
  # DEBUG D#33ptD.0 => __x_71
  # DEBUG __xD.50619 => D#33ptD.0
  # DEBUG __yD.51966 => NULL
  # DEBUG D#224ptD.0 => this_6(D)
  # DEBUG __pD.51968 => __x_71
  # DEBUG thisD.51967 => D#224ptD.0
  # DEBUG D#223ptD.0 => D#224ptD.0
  # DEBUG D#222ptD.0 => D#224ptD.0
  # DEBUG D#220ptD.0 => D#222ptD.0
  # DEBUG D#221ptD.0 => __x_71
  # DEBUG thisD.50592 => D#220ptD.0
  # DEBUG __pD.50591 => D#221ptD.0
  # DEBUG D#219ptD.0 => D#220ptD.0
  # DEBUG D#218ptD.0 => D#221ptD.0
  # DEBUG D#217ptD.0 => D#221ptD.0
  # DEBUG thisD.50577 => D#217ptD.0
  # DEBUG D#216ptD.0 => &D#218ptD.0->_M_value_fieldD.45623
  # DEBUG __rD.49789 => D#216ptD.0
  # DEBUG D#215ptD.0 => D#219ptD.0
  # DEBUG thisD.50569 => D#215ptD.0
  # DEBUG D#214ptD.0 => D#215ptD.0
  # DEBUG thisD.50561 => D#214ptD.0
  # DEBUG thisD.50553 => NULL
  # DEBUG D.50554 => NULL
  # DEBUG thisD.50551 => NULL
  # DEBUG D#84ptD.0 => D#216ptD.0
  # DEBUG thisD.50568 => D#83ptD.0
  # DEBUG __pD.50567 => D#84ptD.0
  # DEBUG thisD.50578 => NULL
  # DEBUG thisD.50566 => NULL
  # DEBUG D#161ptD.0 => D#223ptD.0
  # DEBUG __pD.51970 => __x_71
  # DEBUG thisD.51969 => D#161ptD.0
  # DEBUG D#160ptD.0 => D#161ptD.0
  # DEBUG thisD.49829 => D#160ptD.0
  # DEBUG D#159ptD.0 => 1
  # DEBUG __pD.51973 => __x_71
  # DEBUG __aD.51971 => D#158ptD.0
  # DEBUG __nD.51972 => D#159ptD.0
  # DEBUG D#157ptD.0 => D#159ptD.0
  # DEBUG D#156ptD.0 => D#158ptD.0
  # DEBUG D#154ptD.0 => D#156ptD.0
  # DEBUG D#155ptD.0 => D#157ptD.0
  # DEBUG __pD.51976 => __x_71
  # DEBUG thisD.51974 => D#154ptD.0
  # DEBUG D.51975 => D#155ptD.0
  # .MEM_49 = VDEF <.MEM_26>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_71);
  # DEBUG __xD.51965 => __x_16
  # DEBUG __xD.51965 => __x_16
  if (__x_16 == 0B)
    goto <bb 9>;
  else
    goto <bb 36>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       11 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_77 = PHI <__x_15(13), __x_20(35)>
  # .MEM_87 = PHI <.MEM_90(13), .MEM_48(35)>
  # DEBUG __xD.51978 => __x_77
  # VUSE <.MEM_87>
  # PT = nonlocal escaped 
  __x_19 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_77 + 24B];
  # DEBUG D#32ptD.0 => __x_77
  # DEBUG __xD.50622 => D#32ptD.0
  # DEBUG thisD.51990 => this_6(D)
  # DEBUG __xD.51991 => __x_19
  # DEBUG __xD.51991 => __x_19
  if (__x_19 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_25 = PHI <.MEM_87(14), .MEM_47(18)>
  # VUSE <.MEM_25>
  # PT = nonlocal escaped 
  __x_20 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_77 + 16B];
  # DEBUG D#33ptD.0 => __x_77
  # DEBUG __xD.50619 => D#33ptD.0
  # DEBUG __yD.51979 => NULL
  # DEBUG D#224ptD.0 => this_6(D)
  # DEBUG __pD.51981 => __x_77
  # DEBUG thisD.51980 => D#224ptD.0
  # DEBUG D#223ptD.0 => D#224ptD.0
  # DEBUG D#222ptD.0 => D#224ptD.0
  # DEBUG D#220ptD.0 => D#222ptD.0
  # DEBUG D#221ptD.0 => __x_77
  # DEBUG thisD.50592 => D#220ptD.0
  # DEBUG __pD.50591 => D#221ptD.0
  # DEBUG D#219ptD.0 => D#220ptD.0
  # DEBUG D#218ptD.0 => D#221ptD.0
  # DEBUG D#217ptD.0 => D#221ptD.0
  # DEBUG thisD.50577 => D#217ptD.0
  # DEBUG D#216ptD.0 => &D#218ptD.0->_M_value_fieldD.45623
  # DEBUG __rD.49789 => D#216ptD.0
  # DEBUG D#215ptD.0 => D#219ptD.0
  # DEBUG thisD.50569 => D#215ptD.0
  # DEBUG D#214ptD.0 => D#215ptD.0
  # DEBUG thisD.50561 => D#214ptD.0
  # DEBUG thisD.50553 => NULL
  # DEBUG D.50554 => NULL
  # DEBUG thisD.50551 => NULL
  # DEBUG D#84ptD.0 => D#216ptD.0
  # DEBUG thisD.50568 => D#83ptD.0
  # DEBUG __pD.50567 => D#84ptD.0
  # DEBUG thisD.50578 => NULL
  # DEBUG thisD.50566 => NULL
  # DEBUG D#161ptD.0 => D#223ptD.0
  # DEBUG __pD.51983 => __x_77
  # DEBUG thisD.51982 => D#161ptD.0
  # DEBUG D#160ptD.0 => D#161ptD.0
  # DEBUG thisD.49829 => D#160ptD.0
  # DEBUG D#159ptD.0 => 1
  # DEBUG __pD.51986 => __x_77
  # DEBUG __aD.51984 => D#158ptD.0
  # DEBUG __nD.51985 => D#159ptD.0
  # DEBUG D#157ptD.0 => D#159ptD.0
  # DEBUG D#156ptD.0 => D#158ptD.0
  # DEBUG D#154ptD.0 => D#156ptD.0
  # DEBUG D#155ptD.0 => D#157ptD.0
  # DEBUG __pD.51989 => __x_77
  # DEBUG thisD.51987 => D#154ptD.0
  # DEBUG D.51988 => D#155ptD.0
  # .MEM_48 = VDEF <.MEM_25>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_77);
  # DEBUG __xD.51978 => __x_20
  # DEBUG __xD.51978 => __x_20
  if (__x_20 == 0B)
    goto <bb 12>;
  else
    goto <bb 35>;
;;    succ:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       14 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                34 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_80 = PHI <__x_19(16), __x_24(34)>
  # .MEM_84 = PHI <.MEM_87(16), .MEM_47(34)>
  # DEBUG __xD.51991 => __x_80
  # VUSE <.MEM_84>
  # PT = nonlocal escaped 
  __x_23 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_80 + 24B];
  # DEBUG D#32ptD.0 => __x_80
  # DEBUG __xD.50622 => D#32ptD.0
  # DEBUG thisD.52003 => this_6(D)
  # DEBUG __xD.52004 => __x_23
  # DEBUG __xD.52004 => __x_23
  if (__x_23 == 0B)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_21 = PHI <.MEM_84(17), .MEM_46(21)>
  # VUSE <.MEM_21>
  # PT = nonlocal escaped 
  __x_24 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_80 + 16B];
  # DEBUG D#33ptD.0 => __x_80
  # DEBUG __xD.50619 => D#33ptD.0
  # DEBUG __yD.51992 => NULL
  # DEBUG D#224ptD.0 => this_6(D)
  # DEBUG __pD.51994 => __x_80
  # DEBUG thisD.51993 => D#224ptD.0
  # DEBUG D#223ptD.0 => D#224ptD.0
  # DEBUG D#222ptD.0 => D#224ptD.0
  # DEBUG D#220ptD.0 => D#222ptD.0
  # DEBUG D#221ptD.0 => __x_80
  # DEBUG thisD.50592 => D#220ptD.0
  # DEBUG __pD.50591 => D#221ptD.0
  # DEBUG D#219ptD.0 => D#220ptD.0
  # DEBUG D#218ptD.0 => D#221ptD.0
  # DEBUG D#217ptD.0 => D#221ptD.0
  # DEBUG thisD.50577 => D#217ptD.0
  # DEBUG D#216ptD.0 => &D#218ptD.0->_M_value_fieldD.45623
  # DEBUG __rD.49789 => D#216ptD.0
  # DEBUG D#215ptD.0 => D#219ptD.0
  # DEBUG thisD.50569 => D#215ptD.0
  # DEBUG D#214ptD.0 => D#215ptD.0
  # DEBUG thisD.50561 => D#214ptD.0
  # DEBUG thisD.50553 => NULL
  # DEBUG D.50554 => NULL
  # DEBUG thisD.50551 => NULL
  # DEBUG D#84ptD.0 => D#216ptD.0
  # DEBUG thisD.50568 => D#83ptD.0
  # DEBUG __pD.50567 => D#84ptD.0
  # DEBUG thisD.50578 => NULL
  # DEBUG thisD.50566 => NULL
  # DEBUG D#161ptD.0 => D#223ptD.0
  # DEBUG __pD.51996 => __x_80
  # DEBUG thisD.51995 => D#161ptD.0
  # DEBUG D#160ptD.0 => D#161ptD.0
  # DEBUG thisD.49829 => D#160ptD.0
  # DEBUG D#159ptD.0 => 1
  # DEBUG __pD.51999 => __x_80
  # DEBUG __aD.51997 => D#158ptD.0
  # DEBUG __nD.51998 => D#159ptD.0
  # DEBUG D#157ptD.0 => D#159ptD.0
  # DEBUG D#156ptD.0 => D#158ptD.0
  # DEBUG D#154ptD.0 => D#156ptD.0
  # DEBUG D#155ptD.0 => D#157ptD.0
  # DEBUG __pD.52002 => __x_80
  # DEBUG thisD.52000 => D#154ptD.0
  # DEBUG D.52001 => D#155ptD.0
  # .MEM_47 = VDEF <.MEM_21>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_80);
  # DEBUG __xD.51991 => __x_24
  # DEBUG __xD.51991 => __x_24
  if (__x_24 == 0B)
    goto <bb 15>;
  else
    goto <bb 34>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 6, count 0, freq 9, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_81 = PHI <.MEM_84(19), .MEM_46(33)>
  # PT = nonlocal escaped 
  # __x_83 = PHI <__x_23(19), __x_28(33)>
  # DEBUG __xD.52004 => __x_83
  # VUSE <.MEM_81>
  # PT = nonlocal escaped 
  __x_27 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_83 + 24B];
  # DEBUG D#32ptD.0 => __x_83
  # DEBUG __xD.50622 => D#32ptD.0
  # DEBUG thisD.52016 => this_6(D)
  # DEBUG __xD.52017 => __x_27
  # DEBUG __xD.52017 => __x_27
  if (__x_27 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 6, count 0, freq 9, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_17 = PHI <.MEM_81(20), .MEM_45(24)>
  # VUSE <.MEM_17>
  # PT = nonlocal escaped 
  __x_28 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_83 + 16B];
  # DEBUG D#33ptD.0 => __x_83
  # DEBUG __xD.50619 => D#33ptD.0
  # DEBUG __yD.52005 => NULL
  # DEBUG D#224ptD.0 => this_6(D)
  # DEBUG __pD.52007 => __x_83
  # DEBUG thisD.52006 => D#224ptD.0
  # DEBUG D#223ptD.0 => D#224ptD.0
  # DEBUG D#222ptD.0 => D#224ptD.0
  # DEBUG D#220ptD.0 => D#222ptD.0
  # DEBUG D#221ptD.0 => __x_83
  # DEBUG thisD.50592 => D#220ptD.0
  # DEBUG __pD.50591 => D#221ptD.0
  # DEBUG D#219ptD.0 => D#220ptD.0
  # DEBUG D#218ptD.0 => D#221ptD.0
  # DEBUG D#217ptD.0 => D#221ptD.0
  # DEBUG thisD.50577 => D#217ptD.0
  # DEBUG D#216ptD.0 => &D#218ptD.0->_M_value_fieldD.45623
  # DEBUG __rD.49789 => D#216ptD.0
  # DEBUG D#215ptD.0 => D#219ptD.0
  # DEBUG thisD.50569 => D#215ptD.0
  # DEBUG D#214ptD.0 => D#215ptD.0
  # DEBUG thisD.50561 => D#214ptD.0
  # DEBUG thisD.50553 => NULL
  # DEBUG D.50554 => NULL
  # DEBUG thisD.50551 => NULL
  # DEBUG D#84ptD.0 => D#216ptD.0
  # DEBUG thisD.50568 => D#83ptD.0
  # DEBUG __pD.50567 => D#84ptD.0
  # DEBUG thisD.50578 => NULL
  # DEBUG thisD.50566 => NULL
  # DEBUG D#161ptD.0 => D#223ptD.0
  # DEBUG __pD.52009 => __x_83
  # DEBUG thisD.52008 => D#161ptD.0
  # DEBUG D#160ptD.0 => D#161ptD.0
  # DEBUG thisD.49829 => D#160ptD.0
  # DEBUG D#159ptD.0 => 1
  # DEBUG __pD.52012 => __x_83
  # DEBUG __aD.52010 => D#158ptD.0
  # DEBUG __nD.52011 => D#159ptD.0
  # DEBUG D#157ptD.0 => D#159ptD.0
  # DEBUG D#156ptD.0 => D#158ptD.0
  # DEBUG D#154ptD.0 => D#156ptD.0
  # DEBUG D#155ptD.0 => D#157ptD.0
  # DEBUG __pD.52015 => __x_83
  # DEBUG thisD.52013 => D#154ptD.0
  # DEBUG D.52014 => D#155ptD.0
  # .MEM_46 = VDEF <.MEM_17>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_83);
  # DEBUG __xD.52004 => __x_28
  # DEBUG __xD.52004 => __x_28
  if (__x_28 == 0B)
    goto <bb 18>;
  else
    goto <bb 33>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 21, next block 23, flags: (NEW)
;;    pred:       20 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 7, count 0, freq 89, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_78 = PHI <.MEM_81(22), .MEM_45(32)>
  # PT = nonlocal escaped 
  # __x_86 = PHI <__x_27(22), __x_32(32)>
  # DEBUG __xD.52017 => __x_86
  # VUSE <.MEM_78>
  # PT = nonlocal escaped 
  __x_31 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_86 + 24B];
  # DEBUG D#32ptD.0 => __x_86
  # DEBUG __xD.50622 => D#32ptD.0
  # DEBUG thisD.52029 => this_6(D)
  # DEBUG __xD.52030 => __x_31
  # DEBUG __xD.52030 => __x_31
  if (__x_31 == 0B)
    goto <bb 24>;
  else
    goto <bb 25>;
;;    succ:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 7, count 0, freq 89, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_14 = PHI <.MEM_78(23), .MEM_44(27)>
  # VUSE <.MEM_14>
  # PT = nonlocal escaped 
  __x_32 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_86 + 16B];
  # DEBUG D#33ptD.0 => __x_86
  # DEBUG __xD.50619 => D#33ptD.0
  # DEBUG __yD.52018 => NULL
  # DEBUG D#224ptD.0 => this_6(D)
  # DEBUG __pD.52020 => __x_86
  # DEBUG thisD.52019 => D#224ptD.0
  # DEBUG D#223ptD.0 => D#224ptD.0
  # DEBUG D#222ptD.0 => D#224ptD.0
  # DEBUG D#220ptD.0 => D#222ptD.0
  # DEBUG D#221ptD.0 => __x_86
  # DEBUG thisD.50592 => D#220ptD.0
  # DEBUG __pD.50591 => D#221ptD.0
  # DEBUG D#219ptD.0 => D#220ptD.0
  # DEBUG D#218ptD.0 => D#221ptD.0
  # DEBUG D#217ptD.0 => D#221ptD.0
  # DEBUG thisD.50577 => D#217ptD.0
  # DEBUG D#216ptD.0 => &D#218ptD.0->_M_value_fieldD.45623
  # DEBUG __rD.49789 => D#216ptD.0
  # DEBUG D#215ptD.0 => D#219ptD.0
  # DEBUG thisD.50569 => D#215ptD.0
  # DEBUG D#214ptD.0 => D#215ptD.0
  # DEBUG thisD.50561 => D#214ptD.0
  # DEBUG thisD.50553 => NULL
  # DEBUG D.50554 => NULL
  # DEBUG thisD.50551 => NULL
  # DEBUG D#84ptD.0 => D#216ptD.0
  # DEBUG thisD.50568 => D#83ptD.0
  # DEBUG __pD.50567 => D#84ptD.0
  # DEBUG thisD.50578 => NULL
  # DEBUG thisD.50566 => NULL
  # DEBUG D#161ptD.0 => D#223ptD.0
  # DEBUG __pD.52022 => __x_86
  # DEBUG thisD.52021 => D#161ptD.0
  # DEBUG D#160ptD.0 => D#161ptD.0
  # DEBUG thisD.49829 => D#160ptD.0
  # DEBUG D#159ptD.0 => 1
  # DEBUG __pD.52025 => __x_86
  # DEBUG __aD.52023 => D#158ptD.0
  # DEBUG __nD.52024 => D#159ptD.0
  # DEBUG D#157ptD.0 => D#159ptD.0
  # DEBUG D#156ptD.0 => D#158ptD.0
  # DEBUG D#154ptD.0 => D#156ptD.0
  # DEBUG D#155ptD.0 => D#157ptD.0
  # DEBUG __pD.52028 => __x_86
  # DEBUG thisD.52026 => D#154ptD.0
  # DEBUG D.52027 => D#155ptD.0
  # .MEM_45 = VDEF <.MEM_14>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_86);
  # DEBUG __xD.52017 => __x_32
  # DEBUG __xD.52017 => __x_32
  if (__x_32 == 0B)
    goto <bb 21>;
  else
    goto <bb 32>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 24, next block 26, flags: (NEW)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 8, count 0, freq 900, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_75 = PHI <.MEM_78(25), .MEM_44(31)>
  # PT = nonlocal escaped 
  # __x_89 = PHI <__x_31(25), __x_36(31)>
  # DEBUG __xD.52030 => __x_89
  # VUSE <.MEM_75>
  # PT = nonlocal escaped 
  __x_35 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_89 + 24B];
  # DEBUG D#32ptD.0 => __x_89
  # DEBUG __xD.50622 => D#32ptD.0
  # DEBUG thisD.52042 => this_6(D)
  # DEBUG __xD.52043 => __x_35
  # DEBUG __xD.52043 => __x_35
  if (__x_35 == 0B)
    goto <bb 27>;
  else
    goto <bb 28>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 8, count 0, freq 900, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       26 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_22 = PHI <.MEM_75(26), .MEM_43(29)>
  # VUSE <.MEM_22>
  # PT = nonlocal escaped 
  __x_36 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_89 + 16B];
  # DEBUG D#33ptD.0 => __x_89
  # DEBUG __xD.50619 => D#33ptD.0
  # DEBUG __yD.52031 => NULL
  # DEBUG D#224ptD.0 => this_6(D)
  # DEBUG __pD.52033 => __x_89
  # DEBUG thisD.52032 => D#224ptD.0
  # DEBUG D#223ptD.0 => D#224ptD.0
  # DEBUG D#222ptD.0 => D#224ptD.0
  # DEBUG D#220ptD.0 => D#222ptD.0
  # DEBUG D#221ptD.0 => __x_89
  # DEBUG thisD.50592 => D#220ptD.0
  # DEBUG __pD.50591 => D#221ptD.0
  # DEBUG D#219ptD.0 => D#220ptD.0
  # DEBUG D#218ptD.0 => D#221ptD.0
  # DEBUG D#217ptD.0 => D#221ptD.0
  # DEBUG thisD.50577 => D#217ptD.0
  # DEBUG D#216ptD.0 => &D#218ptD.0->_M_value_fieldD.45623
  # DEBUG __rD.49789 => D#216ptD.0
  # DEBUG D#215ptD.0 => D#219ptD.0
  # DEBUG thisD.50569 => D#215ptD.0
  # DEBUG D#214ptD.0 => D#215ptD.0
  # DEBUG thisD.50561 => D#214ptD.0
  # DEBUG thisD.50553 => NULL
  # DEBUG D.50554 => NULL
  # DEBUG thisD.50551 => NULL
  # DEBUG D#84ptD.0 => D#216ptD.0
  # DEBUG thisD.50568 => D#83ptD.0
  # DEBUG __pD.50567 => D#84ptD.0
  # DEBUG thisD.50578 => NULL
  # DEBUG thisD.50566 => NULL
  # DEBUG D#161ptD.0 => D#223ptD.0
  # DEBUG __pD.52035 => __x_89
  # DEBUG thisD.52034 => D#161ptD.0
  # DEBUG D#160ptD.0 => D#161ptD.0
  # DEBUG thisD.49829 => D#160ptD.0
  # DEBUG D#159ptD.0 => 1
  # DEBUG __pD.52038 => __x_89
  # DEBUG __aD.52036 => D#158ptD.0
  # DEBUG __nD.52037 => D#159ptD.0
  # DEBUG D#157ptD.0 => D#159ptD.0
  # DEBUG D#156ptD.0 => D#158ptD.0
  # DEBUG D#154ptD.0 => D#156ptD.0
  # DEBUG D#155ptD.0 => D#157ptD.0
  # DEBUG __pD.52041 => __x_89
  # DEBUG thisD.52039 => D#154ptD.0
  # DEBUG D.52040 => D#155ptD.0
  # .MEM_44 = VDEF <.MEM_22>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_89);
  # DEBUG __xD.52030 => __x_36
  # DEBUG __xD.52030 => __x_36
  if (__x_36 == 0B)
    goto <bb 24>;
  else
    goto <bb 31>;
;;    succ:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 27, next block 29, flags: (NEW)
;;    pred:       26 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 9, count 0, freq 9100, maybe hot
;;    prev block 28, next block 30, flags: (NEW)
;;    pred:       28 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_73 = PHI <.MEM_75(28), .MEM_43(30)>
  # PT = nonlocal escaped 
  # __x_92 = PHI <__x_35(28), __x_40(30)>
  # DEBUG __xD.52043 => __x_92
  # VUSE <.MEM_73>
  # PT = nonlocal escaped 
  _39 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_92 + 24B];
  # DEBUG D#32ptD.0 => __x_92
  # DEBUG __xD.50622 => D#32ptD.0
  # .MEM_42 = VDEF <.MEM_73>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNSt8_Rb_treeIN9OutputSet11sSetElementES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_ED.31962 (this_6(D), _39);
  # VUSE <.MEM_42>
  # PT = nonlocal escaped 
  __x_40 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_92 + 16B];
  # DEBUG D#33ptD.0 => __x_92
  # DEBUG __xD.50619 => D#33ptD.0
  # DEBUG __yD.52044 => NULL
  # DEBUG D#224ptD.0 => this_6(D)
  # DEBUG __pD.52046 => __x_92
  # DEBUG thisD.52045 => D#224ptD.0
  # DEBUG D#223ptD.0 => D#224ptD.0
  # DEBUG D#222ptD.0 => D#224ptD.0
  # DEBUG D#220ptD.0 => D#222ptD.0
  # DEBUG D#221ptD.0 => __x_92
  # DEBUG thisD.50592 => D#220ptD.0
  # DEBUG __pD.50591 => D#221ptD.0
  # DEBUG D#219ptD.0 => D#220ptD.0
  # DEBUG D#218ptD.0 => D#221ptD.0
  # DEBUG D#217ptD.0 => D#221ptD.0
  # DEBUG thisD.50577 => D#217ptD.0
  # DEBUG D#216ptD.0 => &D#218ptD.0->_M_value_fieldD.45623
  # DEBUG __rD.49789 => D#216ptD.0
  # DEBUG D#215ptD.0 => D#219ptD.0
  # DEBUG thisD.50569 => D#215ptD.0
  # DEBUG D#214ptD.0 => D#215ptD.0
  # DEBUG thisD.50561 => D#214ptD.0
  # DEBUG thisD.50553 => NULL
  # DEBUG D.50554 => NULL
  # DEBUG thisD.50551 => NULL
  # DEBUG D#84ptD.0 => D#216ptD.0
  # DEBUG thisD.50568 => D#83ptD.0
  # DEBUG __pD.50567 => D#84ptD.0
  # DEBUG thisD.50578 => NULL
  # DEBUG thisD.50566 => NULL
  # DEBUG D#161ptD.0 => D#223ptD.0
  # DEBUG __pD.52048 => __x_92
  # DEBUG thisD.52047 => D#161ptD.0
  # DEBUG D#160ptD.0 => D#161ptD.0
  # DEBUG thisD.49829 => D#160ptD.0
  # DEBUG D#159ptD.0 => 1
  # DEBUG __pD.52051 => __x_92
  # DEBUG __aD.52049 => D#158ptD.0
  # DEBUG __nD.52050 => D#159ptD.0
  # DEBUG D#157ptD.0 => D#159ptD.0
  # DEBUG D#156ptD.0 => D#158ptD.0
  # DEBUG D#154ptD.0 => D#156ptD.0
  # DEBUG D#155ptD.0 => D#157ptD.0
  # DEBUG __pD.52054 => __x_92
  # DEBUG thisD.52052 => D#154ptD.0
  # DEBUG D.52053 => D#155ptD.0
  # .MEM_43 = VDEF <.MEM_42>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_92);
  # DEBUG __xD.52043 => __x_40
  # DEBUG __xD.52043 => __x_40
  if (__x_40 == 0B)
    goto <bb 27>;
  else
    goto <bb 30>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 9, count 0, freq 8281, maybe hot
;;    prev block 29, next block 31, flags: (NEW)
;;    pred:       29 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 31, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       27 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 32, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 31, next block 33, flags: (NEW)
;;    pred:       24 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 33, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 32, next block 34, flags: (NEW)
;;    pred:       21 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 34, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 33, next block 35, flags: (NEW)
;;    pred:       18 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 35, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 34, next block 36, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 36, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 35, next block 37, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 37, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 36, next block 38, flags: (NEW)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 38, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 37, next block 1, flags: (NEW)
;;    pred:       6 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

}



Updating SSA:
Registering new PHI nodes in block #5
Registering new PHI nodes in block #7
Registering new PHI nodes in block #8
Registering new PHI nodes in block #10
Registering new PHI nodes in block #11
Registering new PHI nodes in block #13
Registering new PHI nodes in block #14
Registering new PHI nodes in block #16
Registering new PHI nodes in block #17
Registering new PHI nodes in block #19
Registering new PHI nodes in block #20
Registering new PHI nodes in block #22
Registering new PHI nodes in block #23
Registering new PHI nodes in block #25
Registering new PHI nodes in block #26
Registering new PHI nodes in block #28
Registering new PHI nodes in block #29
Updating SSA information for statement operator delete (__x_92);
Registering new PHI nodes in block #30
Registering new PHI nodes in block #47
Registering new PHI nodes in block #27
Updating SSA information for statement operator delete (__x_89);
Registering new PHI nodes in block #31
Registering new PHI nodes in block #46
Registering new PHI nodes in block #24
Updating SSA information for statement operator delete (__x_86);
Registering new PHI nodes in block #32
Registering new PHI nodes in block #45
Registering new PHI nodes in block #21
Updating SSA information for statement operator delete (__x_83);
Registering new PHI nodes in block #33
Registering new PHI nodes in block #44
Registering new PHI nodes in block #18
Updating SSA information for statement operator delete (__x_80);
Registering new PHI nodes in block #34
Registering new PHI nodes in block #43
Registering new PHI nodes in block #15
Updating SSA information for statement operator delete (__x_77);
Registering new PHI nodes in block #35
Registering new PHI nodes in block #42
Registering new PHI nodes in block #12
Updating SSA information for statement operator delete (__x_71);
Registering new PHI nodes in block #36
Registering new PHI nodes in block #41
Registering new PHI nodes in block #9
Updating SSA information for statement operator delete (__x_72);
Registering new PHI nodes in block #37
Registering new PHI nodes in block #40
Registering new PHI nodes in block #6
Updating SSA information for statement operator delete (__x_68);
Registering new PHI nodes in block #38
Registering new PHI nodes in block #39

DFA Statistics for void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = OutputSet::sSetElement; _Val = OutputSet::sSetElement; _KeyOfValue = std::_Identity<OutputSet::sSetElement>; _Compare = std::less<OutputSet::sSetElement>; _Alloc = std::allocator<OutputSet::sSetElement>; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<OutputSet::sSetElement>*]

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                            171       1368b
DEF operands                             18        144b
VUSE operands                            29        232b
VDEF operands                            10         80b
PHI nodes                                36       3744b
PHI arguments                            63       3024b
---------------------------------------------------------
Total memory used by DFA/SSA data                 8592b
---------------------------------------------------------

Average number of arguments per PHI node: 1.8 (max: 2)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_70 -> { .MEM_10 }
.MEM_74 -> { .MEM_43 }
.MEM_76 -> { .MEM_44 }
.MEM_79 -> { .MEM_45 }
.MEM_82 -> { .MEM_46 }
.MEM_85 -> { .MEM_47 }
.MEM_88 -> { .MEM_48 }
.MEM_91 -> { .MEM_49 }
.MEM_94 -> { .MEM_50 }
Incremental SSA update started at block: 5
Number of blocks in CFG: 48
Number of blocks to update: 35 ( 73%)
Affected blocks: 5 6 8 9 11 12 14 15 17 18 20 21 23 24 26 27 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47


Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:49, LOOPS:9, CONDITIONS:18, STMTS:531)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # DEBUG __x => __x_3(D)
    if (__x_3(D) == 0B)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 bb_39 }, succs = {bb_48 })
  {
    <bb 3>:
    # .MEM_38 = PHI <.MEM_4(D)(2), .MEM_70(39)>

  }
  bb_48 (preds = {bb_3 }, succs = {bb_1 })
  {
    <bb 48>:
    # VUSE <.MEM_38>
    return;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 })
  {
    <bb 4>:

  }
  bb_39 (preds = {bb_6 }, succs = {bb_3 })
  {
    <bb 39>:
    # .MEM_70 = PHI <.MEM_10(6)>
    goto <bb 3>;

  }
  loop_1 (header = 5, latch = 38, niter = )
  {
    bb_5 (preds = {bb_4 bb_38 }, succs = {bb_6 bb_7 })
    {
      <bb 5>:
      # __x_68 = PHI <__x_3(D)(4), __x_9(38)>
      # .MEM_69 = PHI <.MEM_4(D)(4), .MEM_10(38)>
      # DEBUG __x => __x_68
      # VUSE <.MEM_69>
      __x_8 = MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B];
      # DEBUG D#32 => __x_68
      # DEBUG __x => D#32
      # DEBUG this => this_6(D)
      # DEBUG __x => __x_8
      # DEBUG __x => __x_8
      if (__x_8 == 0B)
        goto <bb 6>;
      else
        goto <bb 7>;

    }
    bb_6 (preds = {bb_5 bb_40 }, succs = {bb_39 bb_38 })
    {
      <bb 6>:
      # .MEM_34 = PHI <.MEM_69(5), .MEM_94(40)>
      # VUSE <.MEM_34>
      __x_9 = MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B];
      # DEBUG D#33 => __x_68
      # DEBUG __x => D#33
      # DEBUG __y => NULL
      # DEBUG D#224 => this_6(D)
      # DEBUG __p => __x_68
      # DEBUG this => D#224
      # DEBUG D#223 => D#224
      # DEBUG D#222 => D#224
      # DEBUG D#220 => D#222
      # DEBUG D#221 => __x_68
      # DEBUG this => D#220
      # DEBUG __p => D#221
      # DEBUG D#219 => D#220
      # DEBUG D#218 => D#221
      # DEBUG D#217 => D#221
      # DEBUG this => D#217
      # DEBUG D#216 => &D#218->_M_value_field
      # DEBUG __r => D#216
      # DEBUG D#215 => D#219
      # DEBUG this => D#215
      # DEBUG D#214 => D#215
      # DEBUG this => D#214
      # DEBUG this => NULL
      # DEBUG D.50554 => NULL
      # DEBUG this => NULL
      # DEBUG D#84 => D#216
      # DEBUG this => D#83
      # DEBUG __p => D#84
      # DEBUG this => NULL
      # DEBUG this => NULL
      # DEBUG D#161 => D#223
      # DEBUG __p => __x_68
      # DEBUG this => D#161
      # DEBUG D#160 => D#161
      # DEBUG this => D#160
      # DEBUG D#159 => 1
      # DEBUG __p => __x_68
      # DEBUG __a => D#158
      # DEBUG __n => D#159
      # DEBUG D#157 => D#159
      # DEBUG D#156 => D#158
      # DEBUG D#154 => D#156
      # DEBUG D#155 => D#157
      # DEBUG __p => __x_68
      # DEBUG this => D#154
      # DEBUG D.50616 => D#155
      # .MEM_10 = VDEF <.MEM_34>
      operator delete (__x_68);
      # DEBUG __x => __x_9
      # DEBUG __x => __x_9
      if (__x_9 == 0B)
        goto <bb 39>;
      else
        goto <bb 38>;

    }
    bb_7 (preds = {bb_5 }, succs = {bb_8 })
    {
      <bb 7>:

    }
    bb_40 (preds = {bb_9 }, succs = {bb_6 })
    {
      <bb 40>:
      # .MEM_94 = PHI <.MEM_50(9)>
      goto <bb 6>;

    }
    bb_38 (preds = {bb_6 }, succs = {bb_5 })
    {
      <bb 38>:
      goto <bb 5>;

    }
    loop_2 (header = 8, latch = 37, niter = )
    {
      bb_8 (preds = {bb_7 bb_37 }, succs = {bb_9 bb_10 })
      {
        <bb 8>:
        # __x_72 = PHI <__x_8(7), __x_13(37)>
        # .MEM_93 = PHI <.MEM_69(7), .MEM_50(37)>
        # DEBUG __x => __x_72
        # VUSE <.MEM_93>
        __x_12 = MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B];
        # DEBUG D#32 => __x_72
        # DEBUG __x => D#32
        # DEBUG this => this_6(D)
        # DEBUG __x => __x_12
        # DEBUG __x => __x_12
        if (__x_12 == 0B)
          goto <bb 9>;
        else
          goto <bb 10>;

      }
      bb_9 (preds = {bb_8 bb_41 }, succs = {bb_40 bb_37 })
      {
        <bb 9>:
        # .MEM_30 = PHI <.MEM_93(8), .MEM_91(41)>
        # VUSE <.MEM_30>
        __x_13 = MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B];
        # DEBUG D#33 => __x_72
        # DEBUG __x => D#33
        # DEBUG __y => NULL
        # DEBUG D#224 => this_6(D)
        # DEBUG __p => __x_72
        # DEBUG this => D#224
        # DEBUG D#223 => D#224
        # DEBUG D#222 => D#224
        # DEBUG D#220 => D#222
        # DEBUG D#221 => __x_72
        # DEBUG this => D#220
        # DEBUG __p => D#221
        # DEBUG D#219 => D#220
        # DEBUG D#218 => D#221
        # DEBUG D#217 => D#221
        # DEBUG this => D#217
        # DEBUG D#216 => &D#218->_M_value_field
        # DEBUG __r => D#216
        # DEBUG D#215 => D#219
        # DEBUG this => D#215
        # DEBUG D#214 => D#215
        # DEBUG this => D#214
        # DEBUG this => NULL
        # DEBUG D.50554 => NULL
        # DEBUG this => NULL
        # DEBUG D#84 => D#216
        # DEBUG this => D#83
        # DEBUG __p => D#84
        # DEBUG this => NULL
        # DEBUG this => NULL
        # DEBUG D#161 => D#223
        # DEBUG __p => __x_72
        # DEBUG this => D#161
        # DEBUG D#160 => D#161
        # DEBUG this => D#160
        # DEBUG D#159 => 1
        # DEBUG __p => __x_72
        # DEBUG __a => D#158
        # DEBUG __n => D#159
        # DEBUG D#157 => D#159
        # DEBUG D#156 => D#158
        # DEBUG D#154 => D#156
        # DEBUG D#155 => D#157
        # DEBUG __p => __x_72
        # DEBUG this => D#154
        # DEBUG D.51962 => D#155
        # .MEM_50 = VDEF <.MEM_30>
        operator delete (__x_72);
        # DEBUG __x => __x_13
        # DEBUG __x => __x_13
        if (__x_13 == 0B)
          goto <bb 40>;
        else
          goto <bb 37>;

      }
      bb_10 (preds = {bb_8 }, succs = {bb_11 })
      {
        <bb 10>:

      }
      bb_41 (preds = {bb_12 }, succs = {bb_9 })
      {
        <bb 41>:
        # .MEM_91 = PHI <.MEM_49(12)>
        goto <bb 9>;

      }
      bb_37 (preds = {bb_9 }, succs = {bb_8 })
      {
        <bb 37>:
        goto <bb 8>;

      }
      loop_3 (header = 11, latch = 36, niter = )
      {
        bb_11 (preds = {bb_10 bb_36 }, succs = {bb_12 bb_13 })
        {
          <bb 11>:
          # __x_71 = PHI <__x_12(10), __x_16(36)>
          # .MEM_90 = PHI <.MEM_93(10), .MEM_49(36)>
          # DEBUG __x => __x_71
          # VUSE <.MEM_90>
          __x_15 = MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B];
          # DEBUG D#32 => __x_71
          # DEBUG __x => D#32
          # DEBUG this => this_6(D)
          # DEBUG __x => __x_15
          # DEBUG __x => __x_15
          if (__x_15 == 0B)
            goto <bb 12>;
          else
            goto <bb 13>;

        }
        bb_12 (preds = {bb_11 bb_42 }, succs = {bb_41 bb_36 })
        {
          <bb 12>:
          # .MEM_26 = PHI <.MEM_90(11), .MEM_88(42)>
          # VUSE <.MEM_26>
          __x_16 = MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B];
          # DEBUG D#33 => __x_71
          # DEBUG __x => D#33
          # DEBUG __y => NULL
          # DEBUG D#224 => this_6(D)
          # DEBUG __p => __x_71
          # DEBUG this => D#224
          # DEBUG D#223 => D#224
          # DEBUG D#222 => D#224
          # DEBUG D#220 => D#222
          # DEBUG D#221 => __x_71
          # DEBUG this => D#220
          # DEBUG __p => D#221
          # DEBUG D#219 => D#220
          # DEBUG D#218 => D#221
          # DEBUG D#217 => D#221
          # DEBUG this => D#217
          # DEBUG D#216 => &D#218->_M_value_field
          # DEBUG __r => D#216
          # DEBUG D#215 => D#219
          # DEBUG this => D#215
          # DEBUG D#214 => D#215
          # DEBUG this => D#214
          # DEBUG this => NULL
          # DEBUG D.50554 => NULL
          # DEBUG this => NULL
          # DEBUG D#84 => D#216
          # DEBUG this => D#83
          # DEBUG __p => D#84
          # DEBUG this => NULL
          # DEBUG this => NULL
          # DEBUG D#161 => D#223
          # DEBUG __p => __x_71
          # DEBUG this => D#161
          # DEBUG D#160 => D#161
          # DEBUG this => D#160
          # DEBUG D#159 => 1
          # DEBUG __p => __x_71
          # DEBUG __a => D#158
          # DEBUG __n => D#159
          # DEBUG D#157 => D#159
          # DEBUG D#156 => D#158
          # DEBUG D#154 => D#156
          # DEBUG D#155 => D#157
          # DEBUG __p => __x_71
          # DEBUG this => D#154
          # DEBUG D.51975 => D#155
          # .MEM_49 = VDEF <.MEM_26>
          operator delete (__x_71);
          # DEBUG __x => __x_16
          # DEBUG __x => __x_16
          if (__x_16 == 0B)
            goto <bb 41>;
          else
            goto <bb 36>;

        }
        bb_13 (preds = {bb_11 }, succs = {bb_14 })
        {
          <bb 13>:

        }
        bb_42 (preds = {bb_15 }, succs = {bb_12 })
        {
          <bb 42>:
          # .MEM_88 = PHI <.MEM_48(15)>
          goto <bb 12>;

        }
        bb_36 (preds = {bb_12 }, succs = {bb_11 })
        {
          <bb 36>:
          goto <bb 11>;

        }
        loop_4 (header = 14, latch = 35, niter = )
        {
          bb_14 (preds = {bb_13 bb_35 }, succs = {bb_15 bb_16 })
          {
            <bb 14>:
            # __x_77 = PHI <__x_15(13), __x_20(35)>
            # .MEM_87 = PHI <.MEM_90(13), .MEM_48(35)>
            # DEBUG __x => __x_77
            # VUSE <.MEM_87>
            __x_19 = MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B];
            # DEBUG D#32 => __x_77
            # DEBUG __x => D#32
            # DEBUG this => this_6(D)
            # DEBUG __x => __x_19
            # DEBUG __x => __x_19
            if (__x_19 == 0B)
              goto <bb 15>;
            else
              goto <bb 16>;

          }
          bb_15 (preds = {bb_14 bb_43 }, succs = {bb_42 bb_35 })
          {
            <bb 15>:
            # .MEM_25 = PHI <.MEM_87(14), .MEM_85(43)>
            # VUSE <.MEM_25>
            __x_20 = MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B];
            # DEBUG D#33 => __x_77
            # DEBUG __x => D#33
            # DEBUG __y => NULL
            # DEBUG D#224 => this_6(D)
            # DEBUG __p => __x_77
            # DEBUG this => D#224
            # DEBUG D#223 => D#224
            # DEBUG D#222 => D#224
            # DEBUG D#220 => D#222
            # DEBUG D#221 => __x_77
            # DEBUG this => D#220
            # DEBUG __p => D#221
            # DEBUG D#219 => D#220
            # DEBUG D#218 => D#221
            # DEBUG D#217 => D#221
            # DEBUG this => D#217
            # DEBUG D#216 => &D#218->_M_value_field
            # DEBUG __r => D#216
            # DEBUG D#215 => D#219
            # DEBUG this => D#215
            # DEBUG D#214 => D#215
            # DEBUG this => D#214
            # DEBUG this => NULL
            # DEBUG D.50554 => NULL
            # DEBUG this => NULL
            # DEBUG D#84 => D#216
            # DEBUG this => D#83
            # DEBUG __p => D#84
            # DEBUG this => NULL
            # DEBUG this => NULL
            # DEBUG D#161 => D#223
            # DEBUG __p => __x_77
            # DEBUG this => D#161
            # DEBUG D#160 => D#161
            # DEBUG this => D#160
            # DEBUG D#159 => 1
            # DEBUG __p => __x_77
            # DEBUG __a => D#158
            # DEBUG __n => D#159
            # DEBUG D#157 => D#159
            # DEBUG D#156 => D#158
            # DEBUG D#154 => D#156
            # DEBUG D#155 => D#157
            # DEBUG __p => __x_77
            # DEBUG this => D#154
            # DEBUG D.51988 => D#155
            # .MEM_48 = VDEF <.MEM_25>
            operator delete (__x_77);
            # DEBUG __x => __x_20
            # DEBUG __x => __x_20
            if (__x_20 == 0B)
              goto <bb 42>;
            else
              goto <bb 35>;

          }
          bb_16 (preds = {bb_14 }, succs = {bb_17 })
          {
            <bb 16>:

          }
          bb_43 (preds = {bb_18 }, succs = {bb_15 })
          {
            <bb 43>:
            # .MEM_85 = PHI <.MEM_47(18)>
            goto <bb 15>;

          }
          bb_35 (preds = {bb_15 }, succs = {bb_14 })
          {
            <bb 35>:
            goto <bb 14>;

          }
          loop_5 (header = 17, latch = 34, niter = )
          {
            bb_17 (preds = {bb_16 bb_34 }, succs = {bb_18 bb_19 })
            {
              <bb 17>:
              # __x_80 = PHI <__x_19(16), __x_24(34)>
              # .MEM_84 = PHI <.MEM_87(16), .MEM_47(34)>
              # DEBUG __x => __x_80
              # VUSE <.MEM_84>
              __x_23 = MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B];
              # DEBUG D#32 => __x_80
              # DEBUG __x => D#32
              # DEBUG this => this_6(D)
              # DEBUG __x => __x_23
              # DEBUG __x => __x_23
              if (__x_23 == 0B)
                goto <bb 18>;
              else
                goto <bb 19>;

            }
            bb_18 (preds = {bb_17 bb_44 }, succs = {bb_43 bb_34 })
            {
              <bb 18>:
              # .MEM_21 = PHI <.MEM_84(17), .MEM_82(44)>
              # VUSE <.MEM_21>
              __x_24 = MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B];
              # DEBUG D#33 => __x_80
              # DEBUG __x => D#33
              # DEBUG __y => NULL
              # DEBUG D#224 => this_6(D)
              # DEBUG __p => __x_80
              # DEBUG this => D#224
              # DEBUG D#223 => D#224
              # DEBUG D#222 => D#224
              # DEBUG D#220 => D#222
              # DEBUG D#221 => __x_80
              # DEBUG this => D#220
              # DEBUG __p => D#221
              # DEBUG D#219 => D#220
              # DEBUG D#218 => D#221
              # DEBUG D#217 => D#221
              # DEBUG this => D#217
              # DEBUG D#216 => &D#218->_M_value_field
              # DEBUG __r => D#216
              # DEBUG D#215 => D#219
              # DEBUG this => D#215
              # DEBUG D#214 => D#215
              # DEBUG this => D#214
              # DEBUG this => NULL
              # DEBUG D.50554 => NULL
              # DEBUG this => NULL
              # DEBUG D#84 => D#216
              # DEBUG this => D#83
              # DEBUG __p => D#84
              # DEBUG this => NULL
              # DEBUG this => NULL
              # DEBUG D#161 => D#223
              # DEBUG __p => __x_80
              # DEBUG this => D#161
              # DEBUG D#160 => D#161
              # DEBUG this => D#160
              # DEBUG D#159 => 1
              # DEBUG __p => __x_80
              # DEBUG __a => D#158
              # DEBUG __n => D#159
              # DEBUG D#157 => D#159
              # DEBUG D#156 => D#158
              # DEBUG D#154 => D#156
              # DEBUG D#155 => D#157
              # DEBUG __p => __x_80
              # DEBUG this => D#154
              # DEBUG D.52001 => D#155
              # .MEM_47 = VDEF <.MEM_21>
              operator delete (__x_80);
              # DEBUG __x => __x_24
              # DEBUG __x => __x_24
              if (__x_24 == 0B)
                goto <bb 43>;
              else
                goto <bb 34>;

            }
            bb_19 (preds = {bb_17 }, succs = {bb_20 })
            {
              <bb 19>:

            }
            bb_44 (preds = {bb_21 }, succs = {bb_18 })
            {
              <bb 44>:
              # .MEM_82 = PHI <.MEM_46(21)>
              goto <bb 18>;

            }
            bb_34 (preds = {bb_18 }, succs = {bb_17 })
            {
              <bb 34>:
              goto <bb 17>;

            }
            loop_6 (header = 20, latch = 33, niter = )
            {
              bb_20 (preds = {bb_19 bb_33 }, succs = {bb_21 bb_22 })
              {
                <bb 20>:
                # .MEM_81 = PHI <.MEM_84(19), .MEM_46(33)>
                # __x_83 = PHI <__x_23(19), __x_28(33)>
                # DEBUG __x => __x_83
                # VUSE <.MEM_81>
                __x_27 = MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B];
                # DEBUG D#32 => __x_83
                # DEBUG __x => D#32
                # DEBUG this => this_6(D)
                # DEBUG __x => __x_27
                # DEBUG __x => __x_27
                if (__x_27 == 0B)
                  goto <bb 21>;
                else
                  goto <bb 22>;

              }
              bb_21 (preds = {bb_20 bb_45 }, succs = {bb_44 bb_33 })
              {
                <bb 21>:
                # .MEM_17 = PHI <.MEM_81(20), .MEM_79(45)>
                # VUSE <.MEM_17>
                __x_28 = MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B];
                # DEBUG D#33 => __x_83
                # DEBUG __x => D#33
                # DEBUG __y => NULL
                # DEBUG D#224 => this_6(D)
                # DEBUG __p => __x_83
                # DEBUG this => D#224
                # DEBUG D#223 => D#224
                # DEBUG D#222 => D#224
                # DEBUG D#220 => D#222
                # DEBUG D#221 => __x_83
                # DEBUG this => D#220
                # DEBUG __p => D#221
                # DEBUG D#219 => D#220
                # DEBUG D#218 => D#221
                # DEBUG D#217 => D#221
                # DEBUG this => D#217
                # DEBUG D#216 => &D#218->_M_value_field
                # DEBUG __r => D#216
                # DEBUG D#215 => D#219
                # DEBUG this => D#215
                # DEBUG D#214 => D#215
                # DEBUG this => D#214
                # DEBUG this => NULL
                # DEBUG D.50554 => NULL
                # DEBUG this => NULL
                # DEBUG D#84 => D#216
                # DEBUG this => D#83
                # DEBUG __p => D#84
                # DEBUG this => NULL
                # DEBUG this => NULL
                # DEBUG D#161 => D#223
                # DEBUG __p => __x_83
                # DEBUG this => D#161
                # DEBUG D#160 => D#161
                # DEBUG this => D#160
                # DEBUG D#159 => 1
                # DEBUG __p => __x_83
                # DEBUG __a => D#158
                # DEBUG __n => D#159
                # DEBUG D#157 => D#159
                # DEBUG D#156 => D#158
                # DEBUG D#154 => D#156
                # DEBUG D#155 => D#157
                # DEBUG __p => __x_83
                # DEBUG this => D#154
                # DEBUG D.52014 => D#155
                # .MEM_46 = VDEF <.MEM_17>
                operator delete (__x_83);
                # DEBUG __x => __x_28
                # DEBUG __x => __x_28
                if (__x_28 == 0B)
                  goto <bb 44>;
                else
                  goto <bb 33>;

              }
              bb_22 (preds = {bb_20 }, succs = {bb_23 })
              {
                <bb 22>:

              }
              bb_45 (preds = {bb_24 }, succs = {bb_21 })
              {
                <bb 45>:
                # .MEM_79 = PHI <.MEM_45(24)>
                goto <bb 21>;

              }
              bb_33 (preds = {bb_21 }, succs = {bb_20 })
              {
                <bb 33>:
                goto <bb 20>;

              }
              loop_7 (header = 23, latch = 32, niter = )
              {
                bb_23 (preds = {bb_22 bb_32 }, succs = {bb_24 bb_25 })
                {
                  <bb 23>:
                  # .MEM_78 = PHI <.MEM_81(22), .MEM_45(32)>
                  # __x_86 = PHI <__x_27(22), __x_32(32)>
                  # DEBUG __x => __x_86
                  # VUSE <.MEM_78>
                  __x_31 = MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B];
                  # DEBUG D#32 => __x_86
                  # DEBUG __x => D#32
                  # DEBUG this => this_6(D)
                  # DEBUG __x => __x_31
                  # DEBUG __x => __x_31
                  if (__x_31 == 0B)
                    goto <bb 24>;
                  else
                    goto <bb 25>;

                }
                bb_24 (preds = {bb_23 bb_46 }, succs = {bb_45 bb_32 })
                {
                  <bb 24>:
                  # .MEM_14 = PHI <.MEM_78(23), .MEM_76(46)>
                  # VUSE <.MEM_14>
                  __x_32 = MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B];
                  # DEBUG D#33 => __x_86
                  # DEBUG __x => D#33
                  # DEBUG __y => NULL
                  # DEBUG D#224 => this_6(D)
                  # DEBUG __p => __x_86
                  # DEBUG this => D#224
                  # DEBUG D#223 => D#224
                  # DEBUG D#222 => D#224
                  # DEBUG D#220 => D#222
                  # DEBUG D#221 => __x_86
                  # DEBUG this => D#220
                  # DEBUG __p => D#221
                  # DEBUG D#219 => D#220
                  # DEBUG D#218 => D#221
                  # DEBUG D#217 => D#221
                  # DEBUG this => D#217
                  # DEBUG D#216 => &D#218->_M_value_field
                  # DEBUG __r => D#216
                  # DEBUG D#215 => D#219
                  # DEBUG this => D#215
                  # DEBUG D#214 => D#215
                  # DEBUG this => D#214
                  # DEBUG this => NULL
                  # DEBUG D.50554 => NULL
                  # DEBUG this => NULL
                  # DEBUG D#84 => D#216
                  # DEBUG this => D#83
                  # DEBUG __p => D#84
                  # DEBUG this => NULL
                  # DEBUG this => NULL
                  # DEBUG D#161 => D#223
                  # DEBUG __p => __x_86
                  # DEBUG this => D#161
                  # DEBUG D#160 => D#161
                  # DEBUG this => D#160
                  # DEBUG D#159 => 1
                  # DEBUG __p => __x_86
                  # DEBUG __a => D#158
                  # DEBUG __n => D#159
                  # DEBUG D#157 => D#159
                  # DEBUG D#156 => D#158
                  # DEBUG D#154 => D#156
                  # DEBUG D#155 => D#157
                  # DEBUG __p => __x_86
                  # DEBUG this => D#154
                  # DEBUG D.52027 => D#155
                  # .MEM_45 = VDEF <.MEM_14>
                  operator delete (__x_86);
                  # DEBUG __x => __x_32
                  # DEBUG __x => __x_32
                  if (__x_32 == 0B)
                    goto <bb 45>;
                  else
                    goto <bb 32>;

                }
                bb_25 (preds = {bb_23 }, succs = {bb_26 })
                {
                  <bb 25>:

                }
                bb_46 (preds = {bb_27 }, succs = {bb_24 })
                {
                  <bb 46>:
                  # .MEM_76 = PHI <.MEM_44(27)>
                  goto <bb 24>;

                }
                bb_32 (preds = {bb_24 }, succs = {bb_23 })
                {
                  <bb 32>:
                  goto <bb 23>;

                }
                loop_8 (header = 26, latch = 31, niter = )
                {
                  bb_26 (preds = {bb_25 bb_31 }, succs = {bb_27 bb_28 })
                  {
                    <bb 26>:
                    # .MEM_75 = PHI <.MEM_78(25), .MEM_44(31)>
                    # __x_89 = PHI <__x_31(25), __x_36(31)>
                    # DEBUG __x => __x_89
                    # VUSE <.MEM_75>
                    __x_35 = MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B];
                    # DEBUG D#32 => __x_89
                    # DEBUG __x => D#32
                    # DEBUG this => this_6(D)
                    # DEBUG __x => __x_35
                    # DEBUG __x => __x_35
                    if (__x_35 == 0B)
                      goto <bb 27>;
                    else
                      goto <bb 28>;

                  }
                  bb_27 (preds = {bb_26 bb_47 }, succs = {bb_46 bb_31 })
                  {
                    <bb 27>:
                    # .MEM_22 = PHI <.MEM_75(26), .MEM_74(47)>
                    # VUSE <.MEM_22>
                    __x_36 = MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B];
                    # DEBUG D#33 => __x_89
                    # DEBUG __x => D#33
                    # DEBUG __y => NULL
                    # DEBUG D#224 => this_6(D)
                    # DEBUG __p => __x_89
                    # DEBUG this => D#224
                    # DEBUG D#223 => D#224
                    # DEBUG D#222 => D#224
                    # DEBUG D#220 => D#222
                    # DEBUG D#221 => __x_89
                    # DEBUG this => D#220
                    # DEBUG __p => D#221
                    # DEBUG D#219 => D#220
                    # DEBUG D#218 => D#221
                    # DEBUG D#217 => D#221
                    # DEBUG this => D#217
                    # DEBUG D#216 => &D#218->_M_value_field
                    # DEBUG __r => D#216
                    # DEBUG D#215 => D#219
                    # DEBUG this => D#215
                    # DEBUG D#214 => D#215
                    # DEBUG this => D#214
                    # DEBUG this => NULL
                    # DEBUG D.50554 => NULL
                    # DEBUG this => NULL
                    # DEBUG D#84 => D#216
                    # DEBUG this => D#83
                    # DEBUG __p => D#84
                    # DEBUG this => NULL
                    # DEBUG this => NULL
                    # DEBUG D#161 => D#223
                    # DEBUG __p => __x_89
                    # DEBUG this => D#161
                    # DEBUG D#160 => D#161
                    # DEBUG this => D#160
                    # DEBUG D#159 => 1
                    # DEBUG __p => __x_89
                    # DEBUG __a => D#158
                    # DEBUG __n => D#159
                    # DEBUG D#157 => D#159
                    # DEBUG D#156 => D#158
                    # DEBUG D#154 => D#156
                    # DEBUG D#155 => D#157
                    # DEBUG __p => __x_89
                    # DEBUG this => D#154
                    # DEBUG D.52040 => D#155
                    # .MEM_44 = VDEF <.MEM_22>
                    operator delete (__x_89);
                    # DEBUG __x => __x_36
                    # DEBUG __x => __x_36
                    if (__x_36 == 0B)
                      goto <bb 46>;
                    else
                      goto <bb 31>;

                  }
                  bb_28 (preds = {bb_26 }, succs = {bb_29 })
                  {
                    <bb 28>:

                  }
                  bb_47 (preds = {bb_29 }, succs = {bb_27 })
                  {
                    <bb 47>:
                    # .MEM_74 = PHI <.MEM_43(29)>
                    goto <bb 27>;

                  }
                  bb_31 (preds = {bb_27 }, succs = {bb_26 })
                  {
                    <bb 31>:
                    goto <bb 26>;

                  }
                  loop_9 (header = 29, latch = 30, niter = )
                  {
                    bb_29 (preds = {bb_28 bb_30 }, succs = {bb_47 bb_30 })
                    {
                      <bb 29>:
                      # .MEM_73 = PHI <.MEM_75(28), .MEM_43(30)>
                      # __x_92 = PHI <__x_35(28), __x_40(30)>
                      # DEBUG __x => __x_92
                      # VUSE <.MEM_73>
                      _39 = MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B];
                      # DEBUG D#32 => __x_92
                      # DEBUG __x => D#32
                      # .MEM_42 = VDEF <.MEM_73>
                      std::_Rb_tree<OutputSet::sSetElement, OutputSet::sSetElement, std::_Identity<OutputSet::sSetElement>, std::less<OutputSet::sSetElement>, std::allocator<OutputSet::sSetElement> >::_M_erase (this_6(D), _39);
                      # VUSE <.MEM_42>
                      __x_40 = MEM[(struct _Rb_tree_node_base * *)__x_92 + 16B];
                      # DEBUG D#33 => __x_92
                      # DEBUG __x => D#33
                      # DEBUG __y => NULL
                      # DEBUG D#224 => this_6(D)
                      # DEBUG __p => __x_92
                      # DEBUG this => D#224
                      # DEBUG D#223 => D#224
                      # DEBUG D#222 => D#224
                      # DEBUG D#220 => D#222
                      # DEBUG D#221 => __x_92
                      # DEBUG this => D#220
                      # DEBUG __p => D#221
                      # DEBUG D#219 => D#220
                      # DEBUG D#218 => D#221
                      # DEBUG D#217 => D#221
                      # DEBUG this => D#217
                      # DEBUG D#216 => &D#218->_M_value_field
                      # DEBUG __r => D#216
                      # DEBUG D#215 => D#219
                      # DEBUG this => D#215
                      # DEBUG D#214 => D#215
                      # DEBUG this => D#214
                      # DEBUG this => NULL
                      # DEBUG D.50554 => NULL
                      # DEBUG this => NULL
                      # DEBUG D#84 => D#216
                      # DEBUG this => D#83
                      # DEBUG __p => D#84
                      # DEBUG this => NULL
                      # DEBUG this => NULL
                      # DEBUG D#161 => D#223
                      # DEBUG __p => __x_92
                      # DEBUG this => D#161
                      # DEBUG D#160 => D#161
                      # DEBUG this => D#160
                      # DEBUG D#159 => 1
                      # DEBUG __p => __x_92
                      # DEBUG __a => D#158
                      # DEBUG __n => D#159
                      # DEBUG D#157 => D#159
                      # DEBUG D#156 => D#158
                      # DEBUG D#154 => D#156
                      # DEBUG D#155 => D#157
                      # DEBUG __p => __x_92
                      # DEBUG this => D#154
                      # DEBUG D.52053 => D#155
                      # .MEM_43 = VDEF <.MEM_42>
                      operator delete (__x_92);
                      # DEBUG __x => __x_40
                      # DEBUG __x => __x_40
                      if (__x_40 == 0B)
                        goto <bb 47>;
                      else
                        goto <bb 30>;

                    }
                    bb_30 (preds = {bb_29 }, succs = {bb_29 })
                    {
                      <bb 30>:
                      goto <bb 29>;

                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

Pass statistics:
----------------

void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = OutputSet::sSetElement; _Val = OutputSet::sSetElement; _KeyOfValue = std::_Identity<OutputSet::sSetElement>; _Compare = std::less<OutputSet::sSetElement>; _Alloc = std::allocator<OutputSet::sSetElement>; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<OutputSet::sSetElement>*] (struct _Rb_treeD.31590 * const thisD.31963, struct _Rb_tree_nodeD.31594 * __xD.31964)
{
  struct _Rb_tree_nodeD.31594 * __xD.52043;
  struct _Rb_tree_nodeD.31594 * __xD.52030;
  struct _Rb_tree_nodeD.31594 * __xD.52017;
  struct _Rb_tree_nodeD.31594 * __xD.52004;
  struct _Rb_tree_nodeD.31594 * __xD.51991;
  struct _Rb_tree_nodeD.31594 * __xD.51978;
  struct _Rb_tree_nodeD.31594 * __xD.51965;
  struct _Rb_tree_nodeD.31594 * __xD.51952;
  struct _Rb_tree_node_baseD.29379 * _39;

;;   basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __xD.31964 => __x_3(D)
  if (__x_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 2, next block 48, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [100.0%]  (FALLTHRU)
  # .MEM_38 = PHI <.MEM_4(D)(2), .MEM_70(39)>
;;    succ:       48 [100.0%]  (FALLTHRU)

;;   basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 3, next block 4, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_38>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 48, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_68 = PHI <__x_3(D)(4), __x_9(38)>
  # .MEM_69 = PHI <.MEM_4(D)(4), .MEM_10(38)>
  # DEBUG __xD.31964 => __x_68
  # VUSE <.MEM_69>
  # PT = nonlocal escaped 
  __x_8 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_68 + 24B];
  # DEBUG D#32ptD.0 => __x_68
  # DEBUG __xD.50622 => D#32ptD.0
  # DEBUG thisD.51951 => this_6(D)
  # DEBUG __xD.51952 => __x_8
  # DEBUG __xD.51952 => __x_8
  if (__x_8 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 5, next block 39, flags: (NEW, REACHABLE)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [100.0%]  (FALLTHRU)
  # .MEM_34 = PHI <.MEM_69(5), .MEM_94(40)>
  # VUSE <.MEM_34>
  # PT = nonlocal escaped 
  __x_9 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_68 + 16B];
  # DEBUG D#33ptD.0 => __x_68
  # DEBUG __xD.50619 => D#33ptD.0
  # DEBUG __yD.45631 => NULL
  # DEBUG D#224ptD.0 => this_6(D)
  # DEBUG __pD.50608 => __x_68
  # DEBUG thisD.50609 => D#224ptD.0
  # DEBUG D#223ptD.0 => D#224ptD.0
  # DEBUG D#222ptD.0 => D#224ptD.0
  # DEBUG D#220ptD.0 => D#222ptD.0
  # DEBUG D#221ptD.0 => __x_68
  # DEBUG thisD.50592 => D#220ptD.0
  # DEBUG __pD.50591 => D#221ptD.0
  # DEBUG D#219ptD.0 => D#220ptD.0
  # DEBUG D#218ptD.0 => D#221ptD.0
  # DEBUG D#217ptD.0 => D#221ptD.0
  # DEBUG thisD.50577 => D#217ptD.0
  # DEBUG D#216ptD.0 => &D#218ptD.0->_M_value_fieldD.45623
  # DEBUG __rD.49789 => D#216ptD.0
  # DEBUG D#215ptD.0 => D#219ptD.0
  # DEBUG thisD.50569 => D#215ptD.0
  # DEBUG D#214ptD.0 => D#215ptD.0
  # DEBUG thisD.50561 => D#214ptD.0
  # DEBUG thisD.50553 => NULL
  # DEBUG D.50554 => NULL
  # DEBUG thisD.50551 => NULL
  # DEBUG D#84ptD.0 => D#216ptD.0
  # DEBUG thisD.50568 => D#83ptD.0
  # DEBUG __pD.50567 => D#84ptD.0
  # DEBUG thisD.50578 => NULL
  # DEBUG thisD.50566 => NULL
  # DEBUG D#161ptD.0 => D#223ptD.0
  # DEBUG __pD.50611 => __x_68
  # DEBUG thisD.50610 => D#161ptD.0
  # DEBUG D#160ptD.0 => D#161ptD.0
  # DEBUG thisD.49829 => D#160ptD.0
  # DEBUG D#159ptD.0 => 1
  # DEBUG __pD.50614 => __x_68
  # DEBUG __aD.50612 => D#158ptD.0
  # DEBUG __nD.50613 => D#159ptD.0
  # DEBUG D#157ptD.0 => D#159ptD.0
  # DEBUG D#156ptD.0 => D#158ptD.0
  # DEBUG D#154ptD.0 => D#156ptD.0
  # DEBUG D#155ptD.0 => D#157ptD.0
  # DEBUG __pD.50617 => __x_68
  # DEBUG thisD.50615 => D#154ptD.0
  # DEBUG D.50616 => D#155ptD.0
  # .MEM_10 = VDEF <.MEM_34>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_68);
  # DEBUG __xD.31964 => __x_9
  # DEBUG __xD.31964 => __x_9
  if (__x_9 == 0B)
    goto <bb 39>;
  else
    goto <bb 38>;
;;    succ:       39 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 6, next block 7, flags: (NEW)
;;    pred:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_70 = PHI <.MEM_10(6)>
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU)

;;   basic block 7, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 39, next block 8, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_72 = PHI <__x_8(7), __x_13(37)>
  # .MEM_93 = PHI <.MEM_69(7), .MEM_50(37)>
  # DEBUG __xD.51952 => __x_72
  # VUSE <.MEM_93>
  # PT = nonlocal escaped 
  __x_12 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_72 + 24B];
  # DEBUG D#32ptD.0 => __x_72
  # DEBUG __xD.50622 => D#32ptD.0
  # DEBUG thisD.51964 => this_6(D)
  # DEBUG __xD.51965 => __x_12
  # DEBUG __xD.51965 => __x_12
  if (__x_12 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 8, next block 40, flags: (NEW, REACHABLE)
;;    pred:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU)
  # .MEM_30 = PHI <.MEM_93(8), .MEM_91(41)>
  # VUSE <.MEM_30>
  # PT = nonlocal escaped 
  __x_13 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_72 + 16B];
  # DEBUG D#33ptD.0 => __x_72
  # DEBUG __xD.50619 => D#33ptD.0
  # DEBUG __yD.51953 => NULL
  # DEBUG D#224ptD.0 => this_6(D)
  # DEBUG __pD.51955 => __x_72
  # DEBUG thisD.51954 => D#224ptD.0
  # DEBUG D#223ptD.0 => D#224ptD.0
  # DEBUG D#222ptD.0 => D#224ptD.0
  # DEBUG D#220ptD.0 => D#222ptD.0
  # DEBUG D#221ptD.0 => __x_72
  # DEBUG thisD.50592 => D#220ptD.0
  # DEBUG __pD.50591 => D#221ptD.0
  # DEBUG D#219ptD.0 => D#220ptD.0
  # DEBUG D#218ptD.0 => D#221ptD.0
  # DEBUG D#217ptD.0 => D#221ptD.0
  # DEBUG thisD.50577 => D#217ptD.0
  # DEBUG D#216ptD.0 => &D#218ptD.0->_M_value_fieldD.45623
  # DEBUG __rD.49789 => D#216ptD.0
  # DEBUG D#215ptD.0 => D#219ptD.0
  # DEBUG thisD.50569 => D#215ptD.0
  # DEBUG D#214ptD.0 => D#215ptD.0
  # DEBUG thisD.50561 => D#214ptD.0
  # DEBUG thisD.50553 => NULL
  # DEBUG D.50554 => NULL
  # DEBUG thisD.50551 => NULL
  # DEBUG D#84ptD.0 => D#216ptD.0
  # DEBUG thisD.50568 => D#83ptD.0
  # DEBUG __pD.50567 => D#84ptD.0
  # DEBUG thisD.50578 => NULL
  # DEBUG thisD.50566 => NULL
  # DEBUG D#161ptD.0 => D#223ptD.0
  # DEBUG __pD.51957 => __x_72
  # DEBUG thisD.51956 => D#161ptD.0
  # DEBUG D#160ptD.0 => D#161ptD.0
  # DEBUG thisD.49829 => D#160ptD.0
  # DEBUG D#159ptD.0 => 1
  # DEBUG __pD.51960 => __x_72
  # DEBUG __aD.51958 => D#158ptD.0
  # DEBUG __nD.51959 => D#159ptD.0
  # DEBUG D#157ptD.0 => D#159ptD.0
  # DEBUG D#156ptD.0 => D#158ptD.0
  # DEBUG D#154ptD.0 => D#156ptD.0
  # DEBUG D#155ptD.0 => D#157ptD.0
  # DEBUG __pD.51963 => __x_72
  # DEBUG thisD.51961 => D#154ptD.0
  # DEBUG D.51962 => D#155ptD.0
  # .MEM_50 = VDEF <.MEM_30>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_72);
  # DEBUG __xD.51952 => __x_13
  # DEBUG __xD.51952 => __x_13
  if (__x_13 == 0B)
    goto <bb 40>;
  else
    goto <bb 37>;
;;    succ:       40 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 9, next block 10, flags: (NEW)
;;    pred:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_94 = PHI <.MEM_50(9)>
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU)

;;   basic block 10, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 40, next block 11, flags: (NEW)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                36 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_71 = PHI <__x_12(10), __x_16(36)>
  # .MEM_90 = PHI <.MEM_93(10), .MEM_49(36)>
  # DEBUG __xD.51965 => __x_71
  # VUSE <.MEM_90>
  # PT = nonlocal escaped 
  __x_15 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_71 + 24B];
  # DEBUG D#32ptD.0 => __x_71
  # DEBUG __xD.50622 => D#32ptD.0
  # DEBUG thisD.51977 => this_6(D)
  # DEBUG __xD.51978 => __x_15
  # DEBUG __xD.51978 => __x_15
  if (__x_15 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;
;;    succ:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 11, next block 41, flags: (NEW, REACHABLE)
;;    pred:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                42 [100.0%]  (FALLTHRU)
  # .MEM_26 = PHI <.MEM_90(11), .MEM_88(42)>
  # VUSE <.MEM_26>
  # PT = nonlocal escaped 
  __x_16 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_71 + 16B];
  # DEBUG D#33ptD.0 => __x_71
  # DEBUG __xD.50619 => D#33ptD.0
  # DEBUG __yD.51966 => NULL
  # DEBUG D#224ptD.0 => this_6(D)
  # DEBUG __pD.51968 => __x_71
  # DEBUG thisD.51967 => D#224ptD.0
  # DEBUG D#223ptD.0 => D#224ptD.0
  # DEBUG D#222ptD.0 => D#224ptD.0
  # DEBUG D#220ptD.0 => D#222ptD.0
  # DEBUG D#221ptD.0 => __x_71
  # DEBUG thisD.50592 => D#220ptD.0
  # DEBUG __pD.50591 => D#221ptD.0
  # DEBUG D#219ptD.0 => D#220ptD.0
  # DEBUG D#218ptD.0 => D#221ptD.0
  # DEBUG D#217ptD.0 => D#221ptD.0
  # DEBUG thisD.50577 => D#217ptD.0
  # DEBUG D#216ptD.0 => &D#218ptD.0->_M_value_fieldD.45623
  # DEBUG __rD.49789 => D#216ptD.0
  # DEBUG D#215ptD.0 => D#219ptD.0
  # DEBUG thisD.50569 => D#215ptD.0
  # DEBUG D#214ptD.0 => D#215ptD.0
  # DEBUG thisD.50561 => D#214ptD.0
  # DEBUG thisD.50553 => NULL
  # DEBUG D.50554 => NULL
  # DEBUG thisD.50551 => NULL
  # DEBUG D#84ptD.0 => D#216ptD.0
  # DEBUG thisD.50568 => D#83ptD.0
  # DEBUG __pD.50567 => D#84ptD.0
  # DEBUG thisD.50578 => NULL
  # DEBUG thisD.50566 => NULL
  # DEBUG D#161ptD.0 => D#223ptD.0
  # DEBUG __pD.51970 => __x_71
  # DEBUG thisD.51969 => D#161ptD.0
  # DEBUG D#160ptD.0 => D#161ptD.0
  # DEBUG thisD.49829 => D#160ptD.0
  # DEBUG D#159ptD.0 => 1
  # DEBUG __pD.51973 => __x_71
  # DEBUG __aD.51971 => D#158ptD.0
  # DEBUG __nD.51972 => D#159ptD.0
  # DEBUG D#157ptD.0 => D#159ptD.0
  # DEBUG D#156ptD.0 => D#158ptD.0
  # DEBUG D#154ptD.0 => D#156ptD.0
  # DEBUG D#155ptD.0 => D#157ptD.0
  # DEBUG __pD.51976 => __x_71
  # DEBUG thisD.51974 => D#154ptD.0
  # DEBUG D.51975 => D#155ptD.0
  # .MEM_49 = VDEF <.MEM_26>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_71);
  # DEBUG __xD.51965 => __x_16
  # DEBUG __xD.51965 => __x_16
  if (__x_16 == 0B)
    goto <bb 41>;
  else
    goto <bb 36>;
;;    succ:       41 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 41, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 12, next block 13, flags: (NEW)
;;    pred:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_91 = PHI <.MEM_49(12)>
  goto <bb 9>;
;;    succ:       9 [100.0%]  (FALLTHRU)

;;   basic block 13, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 41, next block 14, flags: (NEW)
;;    pred:       11 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_77 = PHI <__x_15(13), __x_20(35)>
  # .MEM_87 = PHI <.MEM_90(13), .MEM_48(35)>
  # DEBUG __xD.51978 => __x_77
  # VUSE <.MEM_87>
  # PT = nonlocal escaped 
  __x_19 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_77 + 24B];
  # DEBUG D#32ptD.0 => __x_77
  # DEBUG __xD.50622 => D#32ptD.0
  # DEBUG thisD.51990 => this_6(D)
  # DEBUG __xD.51991 => __x_19
  # DEBUG __xD.51991 => __x_19
  if (__x_19 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 14, next block 42, flags: (NEW, REACHABLE)
;;    pred:       14 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                43 [100.0%]  (FALLTHRU)
  # .MEM_25 = PHI <.MEM_87(14), .MEM_85(43)>
  # VUSE <.MEM_25>
  # PT = nonlocal escaped 
  __x_20 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_77 + 16B];
  # DEBUG D#33ptD.0 => __x_77
  # DEBUG __xD.50619 => D#33ptD.0
  # DEBUG __yD.51979 => NULL
  # DEBUG D#224ptD.0 => this_6(D)
  # DEBUG __pD.51981 => __x_77
  # DEBUG thisD.51980 => D#224ptD.0
  # DEBUG D#223ptD.0 => D#224ptD.0
  # DEBUG D#222ptD.0 => D#224ptD.0
  # DEBUG D#220ptD.0 => D#222ptD.0
  # DEBUG D#221ptD.0 => __x_77
  # DEBUG thisD.50592 => D#220ptD.0
  # DEBUG __pD.50591 => D#221ptD.0
  # DEBUG D#219ptD.0 => D#220ptD.0
  # DEBUG D#218ptD.0 => D#221ptD.0
  # DEBUG D#217ptD.0 => D#221ptD.0
  # DEBUG thisD.50577 => D#217ptD.0
  # DEBUG D#216ptD.0 => &D#218ptD.0->_M_value_fieldD.45623
  # DEBUG __rD.49789 => D#216ptD.0
  # DEBUG D#215ptD.0 => D#219ptD.0
  # DEBUG thisD.50569 => D#215ptD.0
  # DEBUG D#214ptD.0 => D#215ptD.0
  # DEBUG thisD.50561 => D#214ptD.0
  # DEBUG thisD.50553 => NULL
  # DEBUG D.50554 => NULL
  # DEBUG thisD.50551 => NULL
  # DEBUG D#84ptD.0 => D#216ptD.0
  # DEBUG thisD.50568 => D#83ptD.0
  # DEBUG __pD.50567 => D#84ptD.0
  # DEBUG thisD.50578 => NULL
  # DEBUG thisD.50566 => NULL
  # DEBUG D#161ptD.0 => D#223ptD.0
  # DEBUG __pD.51983 => __x_77
  # DEBUG thisD.51982 => D#161ptD.0
  # DEBUG D#160ptD.0 => D#161ptD.0
  # DEBUG thisD.49829 => D#160ptD.0
  # DEBUG D#159ptD.0 => 1
  # DEBUG __pD.51986 => __x_77
  # DEBUG __aD.51984 => D#158ptD.0
  # DEBUG __nD.51985 => D#159ptD.0
  # DEBUG D#157ptD.0 => D#159ptD.0
  # DEBUG D#156ptD.0 => D#158ptD.0
  # DEBUG D#154ptD.0 => D#156ptD.0
  # DEBUG D#155ptD.0 => D#157ptD.0
  # DEBUG __pD.51989 => __x_77
  # DEBUG thisD.51987 => D#154ptD.0
  # DEBUG D.51988 => D#155ptD.0
  # .MEM_48 = VDEF <.MEM_25>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_77);
  # DEBUG __xD.51978 => __x_20
  # DEBUG __xD.51978 => __x_20
  if (__x_20 == 0B)
    goto <bb 42>;
  else
    goto <bb 35>;
;;    succ:       42 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 42, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 15, next block 16, flags: (NEW)
;;    pred:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_88 = PHI <.MEM_48(15)>
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU)

;;   basic block 16, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 42, next block 17, flags: (NEW)
;;    pred:       14 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                34 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_80 = PHI <__x_19(16), __x_24(34)>
  # .MEM_84 = PHI <.MEM_87(16), .MEM_47(34)>
  # DEBUG __xD.51991 => __x_80
  # VUSE <.MEM_84>
  # PT = nonlocal escaped 
  __x_23 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_80 + 24B];
  # DEBUG D#32ptD.0 => __x_80
  # DEBUG __xD.50622 => D#32ptD.0
  # DEBUG thisD.52003 => this_6(D)
  # DEBUG __xD.52004 => __x_23
  # DEBUG __xD.52004 => __x_23
  if (__x_23 == 0B)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 17, next block 43, flags: (NEW, REACHABLE)
;;    pred:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [100.0%]  (FALLTHRU)
  # .MEM_21 = PHI <.MEM_84(17), .MEM_82(44)>
  # VUSE <.MEM_21>
  # PT = nonlocal escaped 
  __x_24 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_80 + 16B];
  # DEBUG D#33ptD.0 => __x_80
  # DEBUG __xD.50619 => D#33ptD.0
  # DEBUG __yD.51992 => NULL
  # DEBUG D#224ptD.0 => this_6(D)
  # DEBUG __pD.51994 => __x_80
  # DEBUG thisD.51993 => D#224ptD.0
  # DEBUG D#223ptD.0 => D#224ptD.0
  # DEBUG D#222ptD.0 => D#224ptD.0
  # DEBUG D#220ptD.0 => D#222ptD.0
  # DEBUG D#221ptD.0 => __x_80
  # DEBUG thisD.50592 => D#220ptD.0
  # DEBUG __pD.50591 => D#221ptD.0
  # DEBUG D#219ptD.0 => D#220ptD.0
  # DEBUG D#218ptD.0 => D#221ptD.0
  # DEBUG D#217ptD.0 => D#221ptD.0
  # DEBUG thisD.50577 => D#217ptD.0
  # DEBUG D#216ptD.0 => &D#218ptD.0->_M_value_fieldD.45623
  # DEBUG __rD.49789 => D#216ptD.0
  # DEBUG D#215ptD.0 => D#219ptD.0
  # DEBUG thisD.50569 => D#215ptD.0
  # DEBUG D#214ptD.0 => D#215ptD.0
  # DEBUG thisD.50561 => D#214ptD.0
  # DEBUG thisD.50553 => NULL
  # DEBUG D.50554 => NULL
  # DEBUG thisD.50551 => NULL
  # DEBUG D#84ptD.0 => D#216ptD.0
  # DEBUG thisD.50568 => D#83ptD.0
  # DEBUG __pD.50567 => D#84ptD.0
  # DEBUG thisD.50578 => NULL
  # DEBUG thisD.50566 => NULL
  # DEBUG D#161ptD.0 => D#223ptD.0
  # DEBUG __pD.51996 => __x_80
  # DEBUG thisD.51995 => D#161ptD.0
  # DEBUG D#160ptD.0 => D#161ptD.0
  # DEBUG thisD.49829 => D#160ptD.0
  # DEBUG D#159ptD.0 => 1
  # DEBUG __pD.51999 => __x_80
  # DEBUG __aD.51997 => D#158ptD.0
  # DEBUG __nD.51998 => D#159ptD.0
  # DEBUG D#157ptD.0 => D#159ptD.0
  # DEBUG D#156ptD.0 => D#158ptD.0
  # DEBUG D#154ptD.0 => D#156ptD.0
  # DEBUG D#155ptD.0 => D#157ptD.0
  # DEBUG __pD.52002 => __x_80
  # DEBUG thisD.52000 => D#154ptD.0
  # DEBUG D.52001 => D#155ptD.0
  # .MEM_47 = VDEF <.MEM_21>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_80);
  # DEBUG __xD.51991 => __x_24
  # DEBUG __xD.51991 => __x_24
  if (__x_24 == 0B)
    goto <bb 43>;
  else
    goto <bb 34>;
;;    succ:       43 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 43, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 18, next block 19, flags: (NEW)
;;    pred:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_85 = PHI <.MEM_47(18)>
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU)

;;   basic block 19, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 43, next block 20, flags: (NEW)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 6, count 0, freq 9, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_81 = PHI <.MEM_84(19), .MEM_46(33)>
  # PT = nonlocal escaped 
  # __x_83 = PHI <__x_23(19), __x_28(33)>
  # DEBUG __xD.52004 => __x_83
  # VUSE <.MEM_81>
  # PT = nonlocal escaped 
  __x_27 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_83 + 24B];
  # DEBUG D#32ptD.0 => __x_83
  # DEBUG __xD.50622 => D#32ptD.0
  # DEBUG thisD.52016 => this_6(D)
  # DEBUG __xD.52017 => __x_27
  # DEBUG __xD.52017 => __x_27
  if (__x_27 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 6, count 0, freq 9, maybe hot
;;    prev block 20, next block 44, flags: (NEW, REACHABLE)
;;    pred:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                45 [100.0%]  (FALLTHRU)
  # .MEM_17 = PHI <.MEM_81(20), .MEM_79(45)>
  # VUSE <.MEM_17>
  # PT = nonlocal escaped 
  __x_28 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_83 + 16B];
  # DEBUG D#33ptD.0 => __x_83
  # DEBUG __xD.50619 => D#33ptD.0
  # DEBUG __yD.52005 => NULL
  # DEBUG D#224ptD.0 => this_6(D)
  # DEBUG __pD.52007 => __x_83
  # DEBUG thisD.52006 => D#224ptD.0
  # DEBUG D#223ptD.0 => D#224ptD.0
  # DEBUG D#222ptD.0 => D#224ptD.0
  # DEBUG D#220ptD.0 => D#222ptD.0
  # DEBUG D#221ptD.0 => __x_83
  # DEBUG thisD.50592 => D#220ptD.0
  # DEBUG __pD.50591 => D#221ptD.0
  # DEBUG D#219ptD.0 => D#220ptD.0
  # DEBUG D#218ptD.0 => D#221ptD.0
  # DEBUG D#217ptD.0 => D#221ptD.0
  # DEBUG thisD.50577 => D#217ptD.0
  # DEBUG D#216ptD.0 => &D#218ptD.0->_M_value_fieldD.45623
  # DEBUG __rD.49789 => D#216ptD.0
  # DEBUG D#215ptD.0 => D#219ptD.0
  # DEBUG thisD.50569 => D#215ptD.0
  # DEBUG D#214ptD.0 => D#215ptD.0
  # DEBUG thisD.50561 => D#214ptD.0
  # DEBUG thisD.50553 => NULL
  # DEBUG D.50554 => NULL
  # DEBUG thisD.50551 => NULL
  # DEBUG D#84ptD.0 => D#216ptD.0
  # DEBUG thisD.50568 => D#83ptD.0
  # DEBUG __pD.50567 => D#84ptD.0
  # DEBUG thisD.50578 => NULL
  # DEBUG thisD.50566 => NULL
  # DEBUG D#161ptD.0 => D#223ptD.0
  # DEBUG __pD.52009 => __x_83
  # DEBUG thisD.52008 => D#161ptD.0
  # DEBUG D#160ptD.0 => D#161ptD.0
  # DEBUG thisD.49829 => D#160ptD.0
  # DEBUG D#159ptD.0 => 1
  # DEBUG __pD.52012 => __x_83
  # DEBUG __aD.52010 => D#158ptD.0
  # DEBUG __nD.52011 => D#159ptD.0
  # DEBUG D#157ptD.0 => D#159ptD.0
  # DEBUG D#156ptD.0 => D#158ptD.0
  # DEBUG D#154ptD.0 => D#156ptD.0
  # DEBUG D#155ptD.0 => D#157ptD.0
  # DEBUG __pD.52015 => __x_83
  # DEBUG thisD.52013 => D#154ptD.0
  # DEBUG D.52014 => D#155ptD.0
  # .MEM_46 = VDEF <.MEM_17>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_83);
  # DEBUG __xD.52004 => __x_28
  # DEBUG __xD.52004 => __x_28
  if (__x_28 == 0B)
    goto <bb 44>;
  else
    goto <bb 33>;
;;    succ:       44 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 44, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 21, next block 22, flags: (NEW)
;;    pred:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_82 = PHI <.MEM_46(21)>
  goto <bb 18>;
;;    succ:       18 [100.0%]  (FALLTHRU)

;;   basic block 22, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 44, next block 23, flags: (NEW)
;;    pred:       20 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 7, count 0, freq 89, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_78 = PHI <.MEM_81(22), .MEM_45(32)>
  # PT = nonlocal escaped 
  # __x_86 = PHI <__x_27(22), __x_32(32)>
  # DEBUG __xD.52017 => __x_86
  # VUSE <.MEM_78>
  # PT = nonlocal escaped 
  __x_31 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_86 + 24B];
  # DEBUG D#32ptD.0 => __x_86
  # DEBUG __xD.50622 => D#32ptD.0
  # DEBUG thisD.52029 => this_6(D)
  # DEBUG __xD.52030 => __x_31
  # DEBUG __xD.52030 => __x_31
  if (__x_31 == 0B)
    goto <bb 24>;
  else
    goto <bb 25>;
;;    succ:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 7, count 0, freq 89, maybe hot
;;    prev block 23, next block 45, flags: (NEW, REACHABLE)
;;    pred:       23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                46 [100.0%]  (FALLTHRU)
  # .MEM_14 = PHI <.MEM_78(23), .MEM_76(46)>
  # VUSE <.MEM_14>
  # PT = nonlocal escaped 
  __x_32 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_86 + 16B];
  # DEBUG D#33ptD.0 => __x_86
  # DEBUG __xD.50619 => D#33ptD.0
  # DEBUG __yD.52018 => NULL
  # DEBUG D#224ptD.0 => this_6(D)
  # DEBUG __pD.52020 => __x_86
  # DEBUG thisD.52019 => D#224ptD.0
  # DEBUG D#223ptD.0 => D#224ptD.0
  # DEBUG D#222ptD.0 => D#224ptD.0
  # DEBUG D#220ptD.0 => D#222ptD.0
  # DEBUG D#221ptD.0 => __x_86
  # DEBUG thisD.50592 => D#220ptD.0
  # DEBUG __pD.50591 => D#221ptD.0
  # DEBUG D#219ptD.0 => D#220ptD.0
  # DEBUG D#218ptD.0 => D#221ptD.0
  # DEBUG D#217ptD.0 => D#221ptD.0
  # DEBUG thisD.50577 => D#217ptD.0
  # DEBUG D#216ptD.0 => &D#218ptD.0->_M_value_fieldD.45623
  # DEBUG __rD.49789 => D#216ptD.0
  # DEBUG D#215ptD.0 => D#219ptD.0
  # DEBUG thisD.50569 => D#215ptD.0
  # DEBUG D#214ptD.0 => D#215ptD.0
  # DEBUG thisD.50561 => D#214ptD.0
  # DEBUG thisD.50553 => NULL
  # DEBUG D.50554 => NULL
  # DEBUG thisD.50551 => NULL
  # DEBUG D#84ptD.0 => D#216ptD.0
  # DEBUG thisD.50568 => D#83ptD.0
  # DEBUG __pD.50567 => D#84ptD.0
  # DEBUG thisD.50578 => NULL
  # DEBUG thisD.50566 => NULL
  # DEBUG D#161ptD.0 => D#223ptD.0
  # DEBUG __pD.52022 => __x_86
  # DEBUG thisD.52021 => D#161ptD.0
  # DEBUG D#160ptD.0 => D#161ptD.0
  # DEBUG thisD.49829 => D#160ptD.0
  # DEBUG D#159ptD.0 => 1
  # DEBUG __pD.52025 => __x_86
  # DEBUG __aD.52023 => D#158ptD.0
  # DEBUG __nD.52024 => D#159ptD.0
  # DEBUG D#157ptD.0 => D#159ptD.0
  # DEBUG D#156ptD.0 => D#158ptD.0
  # DEBUG D#154ptD.0 => D#156ptD.0
  # DEBUG D#155ptD.0 => D#157ptD.0
  # DEBUG __pD.52028 => __x_86
  # DEBUG thisD.52026 => D#154ptD.0
  # DEBUG D.52027 => D#155ptD.0
  # .MEM_45 = VDEF <.MEM_14>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_86);
  # DEBUG __xD.52017 => __x_32
  # DEBUG __xD.52017 => __x_32
  if (__x_32 == 0B)
    goto <bb 45>;
  else
    goto <bb 32>;
;;    succ:       45 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 45, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 24, next block 25, flags: (NEW)
;;    pred:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_79 = PHI <.MEM_45(24)>
  goto <bb 21>;
;;    succ:       21 [100.0%]  (FALLTHRU)

;;   basic block 25, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 45, next block 26, flags: (NEW)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 8, count 0, freq 900, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_75 = PHI <.MEM_78(25), .MEM_44(31)>
  # PT = nonlocal escaped 
  # __x_89 = PHI <__x_31(25), __x_36(31)>
  # DEBUG __xD.52030 => __x_89
  # VUSE <.MEM_75>
  # PT = nonlocal escaped 
  __x_35 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_89 + 24B];
  # DEBUG D#32ptD.0 => __x_89
  # DEBUG __xD.50622 => D#32ptD.0
  # DEBUG thisD.52042 => this_6(D)
  # DEBUG __xD.52043 => __x_35
  # DEBUG __xD.52043 => __x_35
  if (__x_35 == 0B)
    goto <bb 27>;
  else
    goto <bb 28>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 8, count 0, freq 900, maybe hot
;;    prev block 26, next block 46, flags: (NEW, REACHABLE)
;;    pred:       26 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [100.0%]  (FALLTHRU)
  # .MEM_22 = PHI <.MEM_75(26), .MEM_74(47)>
  # VUSE <.MEM_22>
  # PT = nonlocal escaped 
  __x_36 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_89 + 16B];
  # DEBUG D#33ptD.0 => __x_89
  # DEBUG __xD.50619 => D#33ptD.0
  # DEBUG __yD.52031 => NULL
  # DEBUG D#224ptD.0 => this_6(D)
  # DEBUG __pD.52033 => __x_89
  # DEBUG thisD.52032 => D#224ptD.0
  # DEBUG D#223ptD.0 => D#224ptD.0
  # DEBUG D#222ptD.0 => D#224ptD.0
  # DEBUG D#220ptD.0 => D#222ptD.0
  # DEBUG D#221ptD.0 => __x_89
  # DEBUG thisD.50592 => D#220ptD.0
  # DEBUG __pD.50591 => D#221ptD.0
  # DEBUG D#219ptD.0 => D#220ptD.0
  # DEBUG D#218ptD.0 => D#221ptD.0
  # DEBUG D#217ptD.0 => D#221ptD.0
  # DEBUG thisD.50577 => D#217ptD.0
  # DEBUG D#216ptD.0 => &D#218ptD.0->_M_value_fieldD.45623
  # DEBUG __rD.49789 => D#216ptD.0
  # DEBUG D#215ptD.0 => D#219ptD.0
  # DEBUG thisD.50569 => D#215ptD.0
  # DEBUG D#214ptD.0 => D#215ptD.0
  # DEBUG thisD.50561 => D#214ptD.0
  # DEBUG thisD.50553 => NULL
  # DEBUG D.50554 => NULL
  # DEBUG thisD.50551 => NULL
  # DEBUG D#84ptD.0 => D#216ptD.0
  # DEBUG thisD.50568 => D#83ptD.0
  # DEBUG __pD.50567 => D#84ptD.0
  # DEBUG thisD.50578 => NULL
  # DEBUG thisD.50566 => NULL
  # DEBUG D#161ptD.0 => D#223ptD.0
  # DEBUG __pD.52035 => __x_89
  # DEBUG thisD.52034 => D#161ptD.0
  # DEBUG D#160ptD.0 => D#161ptD.0
  # DEBUG thisD.49829 => D#160ptD.0
  # DEBUG D#159ptD.0 => 1
  # DEBUG __pD.52038 => __x_89
  # DEBUG __aD.52036 => D#158ptD.0
  # DEBUG __nD.52037 => D#159ptD.0
  # DEBUG D#157ptD.0 => D#159ptD.0
  # DEBUG D#156ptD.0 => D#158ptD.0
  # DEBUG D#154ptD.0 => D#156ptD.0
  # DEBUG D#155ptD.0 => D#157ptD.0
  # DEBUG __pD.52041 => __x_89
  # DEBUG thisD.52039 => D#154ptD.0
  # DEBUG D.52040 => D#155ptD.0
  # .MEM_44 = VDEF <.MEM_22>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_89);
  # DEBUG __xD.52030 => __x_36
  # DEBUG __xD.52030 => __x_36
  if (__x_36 == 0B)
    goto <bb 46>;
  else
    goto <bb 31>;
;;    succ:       46 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 46, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 27, next block 28, flags: (NEW)
;;    pred:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_76 = PHI <.MEM_44(27)>
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU)

;;   basic block 28, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 46, next block 29, flags: (NEW)
;;    pred:       26 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 9, count 0, freq 9100, maybe hot
;;    prev block 28, next block 47, flags: (NEW)
;;    pred:       28 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_73 = PHI <.MEM_75(28), .MEM_43(30)>
  # PT = nonlocal escaped 
  # __x_92 = PHI <__x_35(28), __x_40(30)>
  # DEBUG __xD.52043 => __x_92
  # VUSE <.MEM_73>
  # PT = nonlocal escaped 
  _39 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_92 + 24B];
  # DEBUG D#32ptD.0 => __x_92
  # DEBUG __xD.50622 => D#32ptD.0
  # .MEM_42 = VDEF <.MEM_73>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNSt8_Rb_treeIN9OutputSet11sSetElementES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_ED.31962 (this_6(D), _39);
  # VUSE <.MEM_42>
  # PT = nonlocal escaped 
  __x_40 = MEM[(struct _Rb_tree_node_baseD.29379 * *)__x_92 + 16B];
  # DEBUG D#33ptD.0 => __x_92
  # DEBUG __xD.50619 => D#33ptD.0
  # DEBUG __yD.52044 => NULL
  # DEBUG D#224ptD.0 => this_6(D)
  # DEBUG __pD.52046 => __x_92
  # DEBUG thisD.52045 => D#224ptD.0
  # DEBUG D#223ptD.0 => D#224ptD.0
  # DEBUG D#222ptD.0 => D#224ptD.0
  # DEBUG D#220ptD.0 => D#222ptD.0
  # DEBUG D#221ptD.0 => __x_92
  # DEBUG thisD.50592 => D#220ptD.0
  # DEBUG __pD.50591 => D#221ptD.0
  # DEBUG D#219ptD.0 => D#220ptD.0
  # DEBUG D#218ptD.0 => D#221ptD.0
  # DEBUG D#217ptD.0 => D#221ptD.0
  # DEBUG thisD.50577 => D#217ptD.0
  # DEBUG D#216ptD.0 => &D#218ptD.0->_M_value_fieldD.45623
  # DEBUG __rD.49789 => D#216ptD.0
  # DEBUG D#215ptD.0 => D#219ptD.0
  # DEBUG thisD.50569 => D#215ptD.0
  # DEBUG D#214ptD.0 => D#215ptD.0
  # DEBUG thisD.50561 => D#214ptD.0
  # DEBUG thisD.50553 => NULL
  # DEBUG D.50554 => NULL
  # DEBUG thisD.50551 => NULL
  # DEBUG D#84ptD.0 => D#216ptD.0
  # DEBUG thisD.50568 => D#83ptD.0
  # DEBUG __pD.50567 => D#84ptD.0
  # DEBUG thisD.50578 => NULL
  # DEBUG thisD.50566 => NULL
  # DEBUG D#161ptD.0 => D#223ptD.0
  # DEBUG __pD.52048 => __x_92
  # DEBUG thisD.52047 => D#161ptD.0
  # DEBUG D#160ptD.0 => D#161ptD.0
  # DEBUG thisD.49829 => D#160ptD.0
  # DEBUG D#159ptD.0 => 1
  # DEBUG __pD.52051 => __x_92
  # DEBUG __aD.52049 => D#158ptD.0
  # DEBUG __nD.52050 => D#159ptD.0
  # DEBUG D#157ptD.0 => D#159ptD.0
  # DEBUG D#156ptD.0 => D#158ptD.0
  # DEBUG D#154ptD.0 => D#156ptD.0
  # DEBUG D#155ptD.0 => D#157ptD.0
  # DEBUG __pD.52054 => __x_92
  # DEBUG thisD.52052 => D#154ptD.0
  # DEBUG D.52053 => D#155ptD.0
  # .MEM_43 = VDEF <.MEM_42>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_92);
  # DEBUG __xD.52043 => __x_40
  # DEBUG __xD.52043 => __x_40
  if (__x_40 == 0B)
    goto <bb 47>;
  else
    goto <bb 30>;
;;    succ:       47 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 47, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 29, next block 30, flags: (NEW)
;;    pred:       29 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_74 = PHI <.MEM_43(29)>
  goto <bb 27>;
;;    succ:       27 [100.0%]  (FALLTHRU)

;;   basic block 30, loop depth 9, count 0, freq 8281, maybe hot
;;    prev block 47, next block 31, flags: (NEW)
;;    pred:       29 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 31, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       27 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 32, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 31, next block 33, flags: (NEW)
;;    pred:       24 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 33, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 32, next block 34, flags: (NEW)
;;    pred:       21 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 34, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 33, next block 35, flags: (NEW)
;;    pred:       18 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 35, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 34, next block 36, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 36, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 35, next block 37, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 37, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 36, next block 38, flags: (NEW)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 38, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 37, next block 1, flags: (NEW)
;;    pred:       6 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

}



;; Function VC::~VC() (_ZN2VCD2Ev, funcdef_no=2143, decl_uid=44974, cgraph_uid=601, symbol_order=603)


Pass statistics:
----------------

VC::~VC() (struct VCD.43951 * const thisD.44975)
{
  struct FlitD.32424 * * * __nstartD.52122;
  boolD.2757 _5;
  struct OutputSetD.31333 * _6;
  struct FlitD.32424 * * * _11;
  struct _Rep_typeD.31588 * _13;
  struct _Rb_tree_node_baseD.29379 * _14;
  struct FlitD.32424 * * * pretmp_17;
  struct FlitD.32424 * * * prephitmp_18;
  struct ModuleD.32543 * * _23;
  charD.10 * const _24;
  const charD.10 * _25;
  charD.10 * const _26;
  const charD.10 * _27;
  struct FlitD.32424 * * * _28;
  struct FlitD.32424 * * * _29;
  struct FlitD.32424 * * _32;

;;   basic block 2, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_4 = VDEF <.MEM_2(D)>
  this_3(D)->D.44977._vptr.ModuleD.33338 = &MEM[(voidD.45 *)&_ZTV2VCD.44992 + 16B];
  # VUSE <.MEM_4>
  _5 = this_3(D)->_lookahead_routingD.44899;
  if (_5 != 0)
    goto <bb 5>;
  else
    goto <bb 3>;
;;    succ:       3 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                5 [39.0%]  (TRUE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 611, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_4>
  # PT = nonlocal escaped 
  _6 = this_3(D)->_route_setD.44883;
  if (_6 != 0B)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 479, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.50643 => _6
  # DEBUG D#226ptD.0 => &_6->_outputsD.32418
  # DEBUG thisD.50644 => D#226ptD.0
  # PT = nonlocal escaped 
  _13 = &MEM[(struct setD.31362 *)_6]._M_tD.31591;
  # DEBUG thisD.50645 => _13
  # VUSE <.MEM_4>
  # PT = nonlocal escaped 
  _14 = MEM[(struct _Rb_tree_node_baseD.29379 * *)_6 + 16B];
  # DEBUG D#14ptD.0 => _13
  # DEBUG thisD.50629 => D#14ptD.0
  # .MEM_9 = VDEF <.MEM_4>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIN9OutputSet11sSetElementES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_ED.31962 (_13, _14);
  # DEBUG D#225ptD.0 => &MEM[(struct _Rb_treeD.31590 *)_13]._M_implD.31669
  # DEBUG thisD.50646 => D#225ptD.0
  # DEBUG thisD.50647 => D#225ptD.0
  # DEBUG thisD.50648 => D#225ptD.0
  # .MEM_20 = VDEF <.MEM_9>
  MEM[(struct  &)_6] ={v} {CLOBBER};
  # .MEM_8 = VDEF <.MEM_20>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (_6);
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       3 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_4(3), .MEM_8(4), .MEM_4(2)>
  # DEBUG D#227ptD.0 => &this_3(D)->_bufferD.44881
  # DEBUG thisD.50649 => D#227ptD.0
  # DEBUG D#170ptD.0 => &D#227ptD.0->D.44879
  # DEBUG thisD.49919 => D#170ptD.0
  # DEBUG thisD.49916 => D#227ptD.0
  # DEBUG D#20ptD.0 => &D#227ptD.0->D.44879._M_implD.44330._M_finishD.44335
  # DEBUG thisD.49918 => NULL
  # DEBUG __xD.49917 => D#20ptD.0
  # DEBUG D#178ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 48]._M_curD.44229
  # DEBUG D.49925 => D#178ptD.0
  # DEBUG D#177ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 48]._M_firstD.44230
  # DEBUG D.49926 => D#177ptD.0
  # DEBUG D#176ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 48]._M_lastD.44231
  # DEBUG D.49927 => D#176ptD.0
  # DEBUG D#175ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 48]._M_nodeD.44232
  # DEBUG D.49928 => D#175ptD.0
  # DEBUG thisD.49913 => D#227ptD.0
  # DEBUG D#21ptD.0 => &D#227ptD.0->D.44879._M_implD.44330._M_startD.44334
  # DEBUG thisD.49915 => NULL
  # DEBUG __xD.49914 => D#21ptD.0
  # DEBUG D#174ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 16]._M_curD.44229
  # DEBUG D.49921 => D#174ptD.0
  # DEBUG D#173ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 16]._M_firstD.44230
  # DEBUG D.49922 => D#173ptD.0
  # DEBUG D#172ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 16]._M_lastD.44231
  # DEBUG D.49923 => D#172ptD.0
  # DEBUG D#171ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 16]._M_nodeD.44232
  # DEBUG D.49924 => D#171ptD.0
  # DEBUG D#22ptD.0 => D#227ptD.0
  # DEBUG thisD.49912 => D#22ptD.0
  # DEBUG __firstD.49911 => D#23ptD.0
  # DEBUG __lastD.49910 => D#24ptD.0
  # DEBUG D.49909 => D#25ptD.0
  # DEBUG D#264ptD.0 => &MEM[(struct dequeD.32466 *)this_3(D) + 96B].D.44879
  # DEBUG thisD.52116 => D#264ptD.0
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _11 = MEM[(struct _Deque_baseD.43964 *)this_3(D) + 96B]._M_implD.44330._M_mapD.44332;
  if (_11 != 0B)
    goto <bb 6>;
  else
    goto <bb 12>;
;;    succ:       6 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _28 = MEM[(struct _Deque_baseD.43964 *)this_3(D) + 96B]._M_implD.44330._M_finishD.44335._M_nodeD.44232;
  # PT = nonlocal escaped 
  _29 = _28 + 8;
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  __nstart_30 = MEM[(struct _Deque_baseD.43964 *)this_3(D) + 96B]._M_implD.44330._M_startD.44334._M_nodeD.44232;
  # DEBUG D#147ptD.0 => D#264ptD.0
  # DEBUG __nstartD.52122 => __nstart_30
  # DEBUG __nfinishD.52121 => _29
  # DEBUG thisD.52120 => D#147ptD.0
  # DEBUG __nD.52123 => __nstart_30
  if (_29 <= __nstart_30)
    goto <bb 11>;
  else
    goto <bb 7>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_69 = PHI <.MEM_1(7), .MEM_39(9)>
  # PT = nonlocal escaped 
  # __nstart_67 = PHI <__nstart_30(7), __nstart_33(9)>
  # DEBUG __nD.52123 => __nstart_67
  # VUSE <.MEM_69>
  # PT = nonlocal escaped 
  _32 = *__nstart_67;
  # DEBUG D#145ptD.0 => D#146ptD.0
  # DEBUG __pD.52125 => _32
  # DEBUG thisD.52124 => D#145ptD.0
  # DEBUG D#144ptD.0 => D#145ptD.0
  # DEBUG __sizeD.49700 => 8
  # DEBUG D#143ptD.0 => &D#144ptD.0->_M_implD.44330
  # DEBUG D#141ptD.0 => D#143ptD.0
  # DEBUG __pD.52129 => _32
  # DEBUG __aD.52127 => D#141ptD.0
  # DEBUG __nD.52128 => D#142ptD.0
  # DEBUG D#140ptD.0 => D#142ptD.0
  # DEBUG D#139ptD.0 => D#141ptD.0
  # DEBUG D#137ptD.0 => D#139ptD.0
  # DEBUG D#138ptD.0 => D#140ptD.0
  # DEBUG __pD.52132 => _32
  # DEBUG thisD.52130 => D#137ptD.0
  # DEBUG D.52131 => D#138ptD.0
  # .MEM_39 = VDEF <.MEM_69>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (_32);
  # PT = nonlocal escaped 
  __nstart_33 = __nstart_67 + 8;
  # DEBUG __nD.52123 => __nstart_33
  # DEBUG __nD.52123 => __nstart_33
  if (_29 <= __nstart_33)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_39>
  pretmp_17 = MEM[(struct _Deque_baseD.43964 *)this_3(D) + 96B]._M_implD.44330._M_mapD.44332;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_68 = PHI <.MEM_39(10), .MEM_1(6)>
  # PT = nonlocal escaped 
  # prephitmp_18 = PHI <pretmp_17(10), _11(6)>
  # DEBUG D#168ptD.0 => D#264ptD.0->_M_implD.44330._M_map_sizeD.44333
  # DEBUG D#265ptD.0 => MEM[(struct _Deque_baseD.43964 *)this_3(D) + 96B]._M_implD.44330._M_mapD.44332
  # DEBUG D#166ptD.0 => D#264ptD.0
  # DEBUG D#167ptD.0 => D#168ptD.0
  # DEBUG __pD.52135 => D#265ptD.0
  # DEBUG thisD.52133 => D#166ptD.0
  # DEBUG __nD.52134 => D#167ptD.0
  # DEBUG D#165ptD.0 => D#167ptD.0
  # DEBUG D#164ptD.0 => D#166ptD.0
  # DEBUG D#163ptD.0 => D#164ptD.0
  # DEBUG thisD.49862 => D#163ptD.0
  # DEBUG D#162ptD.0 => D#163ptD.0
  # DEBUG thisD.49850 => D#162ptD.0
  # DEBUG thisD.49842 => NULL
  # DEBUG D.49843 => NULL
  # DEBUG thisD.49840 => NULL
  # DEBUG D#132ptD.0 => &__map_allocD.52136
  # DEBUG D#133ptD.0 => D#165ptD.0
  # DEBUG __pD.52139 => D#265ptD.0
  # DEBUG __aD.52137 => D#132ptD.0
  # DEBUG __nD.52138 => D#133ptD.0
  # DEBUG D#131ptD.0 => D#133ptD.0
  # DEBUG D#130ptD.0 => D#132ptD.0
  # DEBUG D#128ptD.0 => D#130ptD.0
  # DEBUG D#129ptD.0 => D#131ptD.0
  # DEBUG __pD.52142 => D#265ptD.0
  # DEBUG thisD.52140 => D#128ptD.0
  # DEBUG D.52141 => D#129ptD.0
  # .MEM_40 = VDEF <.MEM_68>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (prephitmp_18);
  # DEBUG thisD.49876 => &__map_allocD.52136
  # DEBUG thisD.49855 => &__map_allocD.52136
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       5 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_35 = PHI <.MEM_1(5), .MEM_40(11)>
  # DEBUG D#169ptD.0 => &D#264ptD.0->_M_implD.44330
  # DEBUG thisD.52117 => D#169ptD.0
  # DEBUG thisD.52118 => D#169ptD.0
  # DEBUG thisD.52119 => D#169ptD.0
  # .MEM_22 = VDEF <.MEM_35>
  MEM[(struct  &)this_3(D) + 96] ={v} {CLOBBER};
  # DEBUG D#263ptD.0 => &this_3(D)->D.44977
  # DEBUG thisD.52070 => D#263ptD.0
  # .MEM_45 = VDEF <.MEM_22>
  MEM[(struct ModuleD.32543 *)this_3(D)]._vptr.ModuleD.33338 = &MEM[(voidD.45 *)&_ZTV6ModuleD.33343 + 16B];
  # DEBUG D#125ptD.0 => &D#263ptD.0->_childrenD.33293
  # DEBUG thisD.52071 => D#125ptD.0
  # DEBUG D#119ptD.0 => &D#125ptD.0->D.33291
  # DEBUG thisD.49557 => D#119ptD.0
  # DEBUG D#122ptD.0 => D#125ptD.0->D.33291._M_implD.32782._M_finishD.32785
  # DEBUG D#121ptD.0 => D#125ptD.0->D.33291._M_implD.32782._M_startD.32784
  # DEBUG D#64ptD.0 => D#121ptD.0
  # DEBUG D#65ptD.0 => D#122ptD.0
  # DEBUG __firstD.49556 => D#64ptD.0
  # DEBUG __lastD.49555 => D#65ptD.0
  # DEBUG D.49554 => D#66ptD.0
  # DEBUG D#63ptD.0 => D#65ptD.0
  # DEBUG D#62ptD.0 => D#64ptD.0
  # DEBUG D#60ptD.0 => D#62ptD.0
  # DEBUG D#61ptD.0 => D#63ptD.0
  # DEBUG __firstD.49166 => D#60ptD.0
  # DEBUG __lastD.49165 => D#61ptD.0
  # DEBUG D#59ptD.0 => D#61ptD.0
  # DEBUG D#58ptD.0 => D#60ptD.0
  # DEBUG D#56ptD.0 => D#58ptD.0
  # DEBUG D#57ptD.0 => D#59ptD.0
  # DEBUG D.49155 => D#56ptD.0
  # DEBUG D.49154 => D#57ptD.0
  # DEBUG D#120ptD.0 => &D#125ptD.0->D.33291
  # DEBUG thisD.52072 => D#120ptD.0
  # DEBUG D#118ptD.0 => D#120ptD.0->_M_implD.32782._M_end_of_storageD.32786
  # DEBUG D#117ptD.0 => (long intD.12) D#118ptD.0
  # VUSE <.MEM_45>
  # PT = nonlocal escaped 
  _23 = MEM[(struct _Vector_baseD.32549 *)this_3(D) + 72B]._M_implD.32782._M_startD.32784;
  # DEBUG D#116ptD.0 => (long intD.12) _23
  # DEBUG D#115ptD.0 => D#117ptD.0 - D#116ptD.0
  # DEBUG D#114ptD.0 => D#115ptD.0 /[ex] 8
  # DEBUG D#111ptD.0 => D#120ptD.0
  # DEBUG D#112ptD.0 => (long unsigned intD.14) D#114ptD.0
  # DEBUG __pD.52075 => _23
  # DEBUG thisD.52073 => D#111ptD.0
  # DEBUG __nD.52074 => D#112ptD.0
  # DEBUG D#110ptD.0 => D#112ptD.0
  # DEBUG D#109ptD.0 => D#111ptD.0
  if (_23 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;
;;    succ:       13 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 699, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#108ptD.0 => &D#109ptD.0->_M_implD.32782
  # DEBUG D#106ptD.0 => D#108ptD.0
  # DEBUG D#107ptD.0 => D#110ptD.0
  # DEBUG __pD.52079 => _23
  # DEBUG __aD.52077 => D#106ptD.0
  # DEBUG __nD.52078 => D#107ptD.0
  # DEBUG D#105ptD.0 => D#107ptD.0
  # DEBUG D#104ptD.0 => D#106ptD.0
  # DEBUG D#102ptD.0 => D#104ptD.0
  # DEBUG D#103ptD.0 => D#105ptD.0
  # DEBUG __pD.52082 => _23
  # DEBUG thisD.52080 => D#102ptD.0
  # DEBUG D.52081 => D#103ptD.0
  # .MEM_46 = VDEF <.MEM_45>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (_23);
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       12 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_36 = PHI <.MEM_45(12), .MEM_46(13)>
  # DEBUG D#113ptD.0 => &D#120ptD.0->_M_implD.32782
  # DEBUG thisD.52083 => D#113ptD.0
  # DEBUG thisD.52084 => D#113ptD.0
  # DEBUG thisD.52085 => D#113ptD.0
  # .MEM_51 = VDEF <.MEM_36>
  MEM[(struct  &)this_3(D) + 72] ={v} {CLOBBER};
  # DEBUG D#124ptD.0 => &D#263ptD.0->_fullnameD.32546
  # DEBUG thisD.52086 => D#124ptD.0
  # DEBUG thisD.52087 => D#124ptD.0
  # DEBUG thisD.52096 => D#124ptD.0
  # VUSE <.MEM_51>
  # PT = nonlocal escaped 
  _24 = MEM[(charD.10 * *)this_3(D) + 40B];
  # DEBUG D#1ptD.0 => D#124ptD.0
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.52097 => D#124ptD.0
  # PT = nonlocal 
  _25 = &MEM[(const struct basic_stringD.3646 *)this_3(D) + 40B].D.12341._M_local_bufD.12343;
  if (_24 != _25)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 699, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => MEM[(struct basic_stringD.3646 *)D#124ptD.0].D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.52089 => D#124ptD.0
  # DEBUG __sizeD.52088 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => D#124ptD.0
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => D#124ptD.0
  # DEBUG D#91ptD.0 => &MEM[(struct basic_stringD.3646 *)D#124ptD.0]._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.52092 => _24
  # DEBUG __aD.52090 => D#89ptD.0
  # DEBUG __nD.52091 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.52095 => _24
  # DEBUG thisD.52093 => D#85ptD.0
  # DEBUG D.52094 => D#86ptD.0
  # .MEM_52 = VDEF <.MEM_51>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (_24);
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       14 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_37 = PHI <.MEM_51(14), .MEM_52(15)>
  # DEBUG D#95ptD.0 => &MEM[(struct basic_stringD.3646 *)D#124ptD.0]._M_dataplusD.12321
  # DEBUG thisD.52098 => D#95ptD.0
  # DEBUG thisD.52099 => D#95ptD.0
  # DEBUG thisD.52100 => D#95ptD.0
  # .MEM_56 = VDEF <.MEM_37>
  MEM[(struct  &)this_3(D) + 40] ={v} {CLOBBER};
  # DEBUG D#123ptD.0 => &D#263ptD.0->_nameD.32545
  # DEBUG thisD.52101 => D#123ptD.0
  # DEBUG thisD.52102 => D#123ptD.0
  # DEBUG thisD.52111 => D#123ptD.0
  # VUSE <.MEM_56>
  # PT = nonlocal escaped 
  _26 = MEM[(charD.10 * *)this_3(D) + 8B];
  # DEBUG D#1ptD.0 => D#123ptD.0
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.52112 => D#123ptD.0
  # PT = nonlocal 
  _27 = &MEM[(const struct basic_stringD.3646 *)this_3(D) + 8B].D.12341._M_local_bufD.12343;
  if (_26 != _27)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 785, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => MEM[(struct basic_stringD.3646 *)D#123ptD.0].D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.52104 => D#123ptD.0
  # DEBUG __sizeD.52103 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => D#123ptD.0
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => D#123ptD.0
  # DEBUG D#91ptD.0 => &MEM[(struct basic_stringD.3646 *)D#123ptD.0]._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.52107 => _26
  # DEBUG __aD.52105 => D#89ptD.0
  # DEBUG __nD.52106 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.52110 => _26
  # DEBUG thisD.52108 => D#85ptD.0
  # DEBUG D.52109 => D#86ptD.0
  # .MEM_57 = VDEF <.MEM_56>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (_26);
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 17, next block 1, flags: (NEW, REACHABLE)
;;    pred:       16 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_38 = PHI <.MEM_56(16), .MEM_57(17)>
  # DEBUG D#95ptD.0 => &MEM[(struct basic_stringD.3646 *)D#123ptD.0]._M_dataplusD.12321
  # DEBUG thisD.52113 => D#95ptD.0
  # DEBUG thisD.52114 => D#95ptD.0
  # DEBUG thisD.52115 => D#95ptD.0
  # .MEM_12 = VDEF <.MEM_38>
  MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
  # VUSE <.MEM_12>
  return;
;;    succ:       EXIT [100.0%] 

}


Creating dr for this_3(D)->D.44977._vptr.Module
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *this_3(D)
	Access function 0: 0
	Access function 1: 0
Creating dr for this_3(D)->_lookahead_routing
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 228
	step: 0
	aligned to: 256
	base_object: *this_3(D)
	Access function 0: 1824
Creating dr for this_3(D)->_route_set
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 184
	step: 0
	aligned to: 256
	base_object: *this_3(D)
	Access function 0: 1472
Creating dr for MEM[(struct _Rb_tree_node_base * *)_6 + 16B]
analyze_innermost: success.
	base_address: _6
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)_6 + 16B]
Creating dr for MEM[(struct _Deque_base *)this_3(D) + 96B]._M_impl._M_map
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_3(D) + 96B]
	Access function 0: 0
	Access function 1: 0
Creating dr for MEM[(struct _Deque_base *)this_3(D) + 96B]._M_impl._M_finish._M_node
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 168
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_3(D) + 96B]
	Access function 0: 192
	Access function 1: 384
	Access function 2: 0
Creating dr for MEM[(struct _Deque_base *)this_3(D) + 96B]._M_impl._M_start._M_node
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 136
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_3(D) + 96B]
	Access function 0: 192
	Access function 1: 128
	Access function 2: 0
Creating dr for *__nstart_67
analyze_innermost: success.
	base_address: __nstart_30
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_30
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_67
analyze_innermost: success.
	base_address: __nstart_30
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_30
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_67
analyze_innermost: success.
	base_address: __nstart_30
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_30
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_67
analyze_innermost: success.
	base_address: __nstart_30
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_30
	Access function 0: {0B, +, 8}_1
Analyzing # of iterations of loop 1
  exit condition [__nstart_30 + 8, + , 8](no_overflow) < _28 + 8
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) _28 - (unsigned long) __nstart_30) + 7) / 8, bounded by 2305843009213693951
Analyzing # of iterations of loop 1
  exit condition [__nstart_30 + 8, + , 8](no_overflow) < _28 + 8
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) _28 - (unsigned long) __nstart_30) + 7) / 8, bounded by 2305843009213693951
Creating dr for *__nstart_67
analyze_innermost: success.
	base_address: __nstart_30
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_30
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_67
analyze_innermost: success.
	base_address: __nstart_30
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_30
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_67
analyze_innermost: success.
	base_address: __nstart_30
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_30
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_67
analyze_innermost: success.
	base_address: __nstart_30
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_30
	Access function 0: {0B, +, 8}_1
Analyzing # of iterations of loop 1
  exit condition [__nstart_30 + 8, + , 8](no_overflow) < _28 + 8
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) _28 - (unsigned long) __nstart_30) + 7) / 8, bounded by 2305843009213693951
Creating dr for MEM[(struct _Deque_base *)this_3(D) + 96B]._M_impl._M_map
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_3(D) + 96B]
	Access function 0: 0
	Access function 1: 0

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:20, LOOPS:1, CONDITIONS:8, STMTS:263)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_5 })
  {
    <bb 2>:
    # .MEM_4 = VDEF <.MEM_2(D)>
    this_3(D)->D.44977._vptr.Module = &MEM[(void *)&_ZTV2VC + 16B];
    # VUSE <.MEM_4>
    _5 = this_3(D)->_lookahead_routing;
    if (_5 != 0)
      goto <bb 5>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 bb_5 })
  {
    <bb 3>:
    # VUSE <.MEM_4>
    _6 = this_3(D)->_route_set;
    if (_6 != 0B)
      goto <bb 4>;
    else
      goto <bb 5>;

  }
  bb_4 (preds = {bb_3 }, succs = {bb_5 })
  {
    <bb 4>:
    # DEBUG this => _6
    # DEBUG D#226 => &_6->_outputs
    # DEBUG this => D#226
    _13 = &MEM[(struct set *)_6]._M_t;
    # DEBUG this => _13
    # VUSE <.MEM_4>
    _14 = MEM[(struct _Rb_tree_node_base * *)_6 + 16B];
    # DEBUG D#14 => _13
    # DEBUG this => D#14
    # .MEM_9 = VDEF <.MEM_4>
    std::_Rb_tree<OutputSet::sSetElement, OutputSet::sSetElement, std::_Identity<OutputSet::sSetElement>, std::less<OutputSet::sSetElement>, std::allocator<OutputSet::sSetElement> >::_M_erase (_13, _14);
    # DEBUG D#225 => &MEM[(struct _Rb_tree *)_13]._M_impl
    # DEBUG this => D#225
    # DEBUG this => D#225
    # DEBUG this => D#225
    # .MEM_20 = VDEF <.MEM_9>
    MEM[(struct  &)_6] ={v} {CLOBBER};
    # .MEM_8 = VDEF <.MEM_20>
    operator delete (_6);

  }
  bb_5 (preds = {bb_3 bb_4 bb_2 }, succs = {bb_6 bb_12 })
  {
    <bb 5>:
    # .MEM_1 = PHI <.MEM_4(3), .MEM_8(4), .MEM_4(2)>
    # DEBUG D#227 => &this_3(D)->_buffer
    # DEBUG this => D#227
    # DEBUG D#170 => &D#227->D.44879
    # DEBUG this => D#170
    # DEBUG this => D#227
    # DEBUG D#20 => &D#227->D.44879._M_impl._M_finish
    # DEBUG this => NULL
    # DEBUG __x => D#20
    # DEBUG D#178 => MEM[(const struct iterator &)D#227 + 48]._M_cur
    # DEBUG D.49925 => D#178
    # DEBUG D#177 => MEM[(const struct iterator &)D#227 + 48]._M_first
    # DEBUG D.49926 => D#177
    # DEBUG D#176 => MEM[(const struct iterator &)D#227 + 48]._M_last
    # DEBUG D.49927 => D#176
    # DEBUG D#175 => MEM[(const struct iterator &)D#227 + 48]._M_node
    # DEBUG D.49928 => D#175
    # DEBUG this => D#227
    # DEBUG D#21 => &D#227->D.44879._M_impl._M_start
    # DEBUG this => NULL
    # DEBUG __x => D#21
    # DEBUG D#174 => MEM[(const struct iterator &)D#227 + 16]._M_cur
    # DEBUG D.49921 => D#174
    # DEBUG D#173 => MEM[(const struct iterator &)D#227 + 16]._M_first
    # DEBUG D.49922 => D#173
    # DEBUG D#172 => MEM[(const struct iterator &)D#227 + 16]._M_last
    # DEBUG D.49923 => D#172
    # DEBUG D#171 => MEM[(const struct iterator &)D#227 + 16]._M_node
    # DEBUG D.49924 => D#171
    # DEBUG D#22 => D#227
    # DEBUG this => D#22
    # DEBUG __first => D#23
    # DEBUG __last => D#24
    # DEBUG D.49909 => D#25
    # DEBUG D#264 => &MEM[(struct deque *)this_3(D) + 96B].D.44879
    # DEBUG this => D#264
    # VUSE <.MEM_1>
    _11 = MEM[(struct _Deque_base *)this_3(D) + 96B]._M_impl._M_map;
    if (_11 != 0B)
      goto <bb 6>;
    else
      goto <bb 12>;

  }
  bb_6 (preds = {bb_5 }, succs = {bb_11 bb_7 })
  {
    <bb 6>:
    # VUSE <.MEM_1>
    _28 = MEM[(struct _Deque_base *)this_3(D) + 96B]._M_impl._M_finish._M_node;
    _29 = _28 + 8;
    # VUSE <.MEM_1>
    __nstart_30 = MEM[(struct _Deque_base *)this_3(D) + 96B]._M_impl._M_start._M_node;
    # DEBUG D#147 => D#264
    # DEBUG __nstart => __nstart_30
    # DEBUG __nfinish => _29
    # DEBUG this => D#147
    # DEBUG __n => __nstart_30
    if (_29 <= __nstart_30)
      goto <bb 11>;
    else
      goto <bb 7>;

  }
  bb_7 (preds = {bb_6 }, succs = {bb_8 })
  {
    <bb 7>:

  }
  bb_10 (preds = {bb_8 }, succs = {bb_19 })
  {
    <bb 10>:

  }
  bb_19 (preds = {bb_10 }, succs = {bb_11 })
  {
    <bb 19>:
    # VUSE <.MEM_39>
    pretmp_17 = MEM[(struct _Deque_base *)this_3(D) + 96B]._M_impl._M_map;

  }
  bb_11 (preds = {bb_19 bb_6 }, succs = {bb_12 })
  {
    <bb 11>:
    # .MEM_68 = PHI <.MEM_39(19), .MEM_1(6)>
    # prephitmp_18 = PHI <pretmp_17(19), _11(6)>
    # DEBUG D#168 => D#264->_M_impl._M_map_size
    # DEBUG D#265 => MEM[(struct _Deque_base *)this_3(D) + 96B]._M_impl._M_map
    # DEBUG D#166 => D#264
    # DEBUG D#167 => D#168
    # DEBUG __p => D#265
    # DEBUG this => D#166
    # DEBUG __n => D#167
    # DEBUG D#165 => D#167
    # DEBUG D#164 => D#166
    # DEBUG D#163 => D#164
    # DEBUG this => D#163
    # DEBUG D#162 => D#163
    # DEBUG this => D#162
    # DEBUG this => NULL
    # DEBUG D.49843 => NULL
    # DEBUG this => NULL
    # DEBUG D#132 => &__map_alloc
    # DEBUG D#133 => D#165
    # DEBUG __p => D#265
    # DEBUG __a => D#132
    # DEBUG __n => D#133
    # DEBUG D#131 => D#133
    # DEBUG D#130 => D#132
    # DEBUG D#128 => D#130
    # DEBUG D#129 => D#131
    # DEBUG __p => D#265
    # DEBUG this => D#128
    # DEBUG D.52141 => D#129
    # .MEM_40 = VDEF <.MEM_68>
    operator delete (prephitmp_18);
    # DEBUG this => &__map_alloc
    # DEBUG this => &__map_alloc

  }
  bb_12 (preds = {bb_5 bb_11 }, succs = {bb_13 bb_14 })
  {
    <bb 12>:
    # .MEM_35 = PHI <.MEM_1(5), .MEM_40(11)>
    # DEBUG D#169 => &D#264->_M_impl
    # DEBUG this => D#169
    # DEBUG this => D#169
    # DEBUG this => D#169
    # .MEM_22 = VDEF <.MEM_35>
    MEM[(struct  &)this_3(D) + 96] ={v} {CLOBBER};
    # DEBUG D#263 => &this_3(D)->D.44977
    # DEBUG this => D#263
    # .MEM_45 = VDEF <.MEM_22>
    MEM[(struct Module *)this_3(D)]._vptr.Module = &MEM[(void *)&_ZTV6Module + 16B];
    # DEBUG D#125 => &D#263->_children
    # DEBUG this => D#125
    # DEBUG D#119 => &D#125->D.33291
    # DEBUG this => D#119
    # DEBUG D#122 => D#125->D.33291._M_impl._M_finish
    # DEBUG D#121 => D#125->D.33291._M_impl._M_start
    # DEBUG D#64 => D#121
    # DEBUG D#65 => D#122
    # DEBUG __first => D#64
    # DEBUG __last => D#65
    # DEBUG D.49554 => D#66
    # DEBUG D#63 => D#65
    # DEBUG D#62 => D#64
    # DEBUG D#60 => D#62
    # DEBUG D#61 => D#63
    # DEBUG __first => D#60
    # DEBUG __last => D#61
    # DEBUG D#59 => D#61
    # DEBUG D#58 => D#60
    # DEBUG D#56 => D#58
    # DEBUG D#57 => D#59
    # DEBUG D.49155 => D#56
    # DEBUG D.49154 => D#57
    # DEBUG D#120 => &D#125->D.33291
    # DEBUG this => D#120
    # DEBUG D#118 => D#120->_M_impl._M_end_of_storage
    # DEBUG D#117 => (long int) D#118
    # VUSE <.MEM_45>
    _23 = MEM[(struct _Vector_base *)this_3(D) + 72B]._M_impl._M_start;
    # DEBUG D#116 => (long int) _23
    # DEBUG D#115 => D#117 - D#116
    # DEBUG D#114 => D#115 /[ex] 8
    # DEBUG D#111 => D#120
    # DEBUG D#112 => (long unsigned int) D#114
    # DEBUG __p => _23
    # DEBUG this => D#111
    # DEBUG __n => D#112
    # DEBUG D#110 => D#112
    # DEBUG D#109 => D#111
    if (_23 != 0B)
      goto <bb 13>;
    else
      goto <bb 14>;

  }
  bb_13 (preds = {bb_12 }, succs = {bb_14 })
  {
    <bb 13>:
    # DEBUG D#108 => &D#109->_M_impl
    # DEBUG D#106 => D#108
    # DEBUG D#107 => D#110
    # DEBUG __p => _23
    # DEBUG __a => D#106
    # DEBUG __n => D#107
    # DEBUG D#105 => D#107
    # DEBUG D#104 => D#106
    # DEBUG D#102 => D#104
    # DEBUG D#103 => D#105
    # DEBUG __p => _23
    # DEBUG this => D#102
    # DEBUG D.52081 => D#103
    # .MEM_46 = VDEF <.MEM_45>
    operator delete (_23);

  }
  bb_14 (preds = {bb_12 bb_13 }, succs = {bb_15 bb_16 })
  {
    <bb 14>:
    # .MEM_36 = PHI <.MEM_45(12), .MEM_46(13)>
    # DEBUG D#113 => &D#120->_M_impl
    # DEBUG this => D#113
    # DEBUG this => D#113
    # DEBUG this => D#113
    # .MEM_51 = VDEF <.MEM_36>
    MEM[(struct  &)this_3(D) + 72] ={v} {CLOBBER};
    # DEBUG D#124 => &D#263->_fullname
    # DEBUG this => D#124
    # DEBUG this => D#124
    # DEBUG this => D#124
    # VUSE <.MEM_51>
    _24 = MEM[(char * *)this_3(D) + 40B];
    # DEBUG D#1 => D#124
    # DEBUG this => D#1
    # DEBUG this => D#124
    _25 = &MEM[(const struct basic_string *)this_3(D) + 40B].D.12341._M_local_buf;
    if (_24 != _25)
      goto <bb 15>;
    else
      goto <bb 16>;

  }
  bb_15 (preds = {bb_14 }, succs = {bb_16 })
  {
    <bb 15>:
    # DEBUG D#94 => MEM[(struct basic_string *)D#124].D.12341._M_allocated_capacity
    # DEBUG D#93 => D#94
    # DEBUG this => D#124
    # DEBUG __size => D#93
    # DEBUG D#92 => D#93
    # DEBUG D#1 => D#124
    # DEBUG this => D#1
    # DEBUG this => D#124
    # DEBUG D#91 => &MEM[(struct basic_string *)D#124]._M_dataplus
    # DEBUG D#89 => D#91
    # DEBUG D#90 => D#92 + 1
    # DEBUG __p => _24
    # DEBUG __a => D#89
    # DEBUG __n => D#90
    # DEBUG D#88 => D#90
    # DEBUG D#87 => D#89
    # DEBUG D#85 => D#87
    # DEBUG D#86 => D#88
    # DEBUG __p => _24
    # DEBUG this => D#85
    # DEBUG D.52094 => D#86
    # .MEM_52 = VDEF <.MEM_51>
    operator delete (_24);

  }
  bb_16 (preds = {bb_14 bb_15 }, succs = {bb_17 bb_18 })
  {
    <bb 16>:
    # .MEM_37 = PHI <.MEM_51(14), .MEM_52(15)>
    # DEBUG D#95 => &MEM[(struct basic_string *)D#124]._M_dataplus
    # DEBUG this => D#95
    # DEBUG this => D#95
    # DEBUG this => D#95
    # .MEM_56 = VDEF <.MEM_37>
    MEM[(struct  &)this_3(D) + 40] ={v} {CLOBBER};
    # DEBUG D#123 => &D#263->_name
    # DEBUG this => D#123
    # DEBUG this => D#123
    # DEBUG this => D#123
    # VUSE <.MEM_56>
    _26 = MEM[(char * *)this_3(D) + 8B];
    # DEBUG D#1 => D#123
    # DEBUG this => D#1
    # DEBUG this => D#123
    _27 = &MEM[(const struct basic_string *)this_3(D) + 8B].D.12341._M_local_buf;
    if (_26 != _27)
      goto <bb 17>;
    else
      goto <bb 18>;

  }
  bb_17 (preds = {bb_16 }, succs = {bb_18 })
  {
    <bb 17>:
    # DEBUG D#94 => MEM[(struct basic_string *)D#123].D.12341._M_allocated_capacity
    # DEBUG D#93 => D#94
    # DEBUG this => D#123
    # DEBUG __size => D#93
    # DEBUG D#92 => D#93
    # DEBUG D#1 => D#123
    # DEBUG this => D#1
    # DEBUG this => D#123
    # DEBUG D#91 => &MEM[(struct basic_string *)D#123]._M_dataplus
    # DEBUG D#89 => D#91
    # DEBUG D#90 => D#92 + 1
    # DEBUG __p => _26
    # DEBUG __a => D#89
    # DEBUG __n => D#90
    # DEBUG D#88 => D#90
    # DEBUG D#87 => D#89
    # DEBUG D#85 => D#87
    # DEBUG D#86 => D#88
    # DEBUG __p => _26
    # DEBUG this => D#85
    # DEBUG D.52109 => D#86
    # .MEM_57 = VDEF <.MEM_56>
    operator delete (_26);

  }
  bb_18 (preds = {bb_16 bb_17 }, succs = {bb_1 })
  {
    <bb 18>:
    # .MEM_38 = PHI <.MEM_56(16), .MEM_57(17)>
    # DEBUG D#95 => &MEM[(struct basic_string *)D#123]._M_dataplus
    # DEBUG this => D#95
    # DEBUG this => D#95
    # DEBUG this => D#95
    # .MEM_12 = VDEF <.MEM_38>
    MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
    # VUSE <.MEM_12>
    return;

  }
  loop_1 (header = 8, latch = 9, niter = (((unsigned long) _28 - (unsigned long) __nstart_30) + 7) / 8, upper_bound = 2305843009213693951)
  {
    bb_8 (preds = {bb_7 bb_9 }, succs = {bb_10 bb_9 })
    {
      <bb 8>:
      # .MEM_69 = PHI <.MEM_1(7), .MEM_39(9)>
      # __nstart_67 = PHI <__nstart_30(7), __nstart_33(9)>
      # DEBUG __n => __nstart_67
      # VUSE <.MEM_69>
      _32 = *__nstart_67;
      # DEBUG D#145 => D#146
      # DEBUG __p => _32
      # DEBUG this => D#145
      # DEBUG D#144 => D#145
      # DEBUG __size => 8
      # DEBUG D#143 => &D#144->_M_impl
      # DEBUG D#141 => D#143
      # DEBUG __p => _32
      # DEBUG __a => D#141
      # DEBUG __n => D#142
      # DEBUG D#140 => D#142
      # DEBUG D#139 => D#141
      # DEBUG D#137 => D#139
      # DEBUG D#138 => D#140
      # DEBUG __p => _32
      # DEBUG this => D#137
      # DEBUG D.52131 => D#138
      # .MEM_39 = VDEF <.MEM_69>
      operator delete (_32);
      __nstart_33 = __nstart_67 + 8;
      # DEBUG __n => __nstart_33
      # DEBUG __n => __nstart_33
      if (_29 <= __nstart_33)
        goto <bb 10>;
      else
        goto <bb 9>;

    }
    bb_9 (preds = {bb_8 }, succs = {bb_8 })
    {
      <bb 9>:
      goto <bb 8>;

    }
  }
}

Pass statistics:
----------------

VC::~VC() (struct VCD.43951 * const thisD.44975)
{
  struct FlitD.32424 * * * __nstartD.52122;
  boolD.2757 _5;
  struct OutputSetD.31333 * _6;
  struct FlitD.32424 * * * _11;
  struct _Rep_typeD.31588 * _13;
  struct _Rb_tree_node_baseD.29379 * _14;
  struct FlitD.32424 * * * pretmp_17;
  struct FlitD.32424 * * * prephitmp_18;
  struct ModuleD.32543 * * _23;
  charD.10 * const _24;
  const charD.10 * _25;
  charD.10 * const _26;
  const charD.10 * _27;
  struct FlitD.32424 * * * _28;
  struct FlitD.32424 * * * _29;
  struct FlitD.32424 * * _32;

;;   basic block 2, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_4 = VDEF <.MEM_2(D)>
  this_3(D)->D.44977._vptr.ModuleD.33338 = &MEM[(voidD.45 *)&_ZTV2VCD.44992 + 16B];
  # VUSE <.MEM_4>
  _5 = this_3(D)->_lookahead_routingD.44899;
  if (_5 != 0)
    goto <bb 5>;
  else
    goto <bb 3>;
;;    succ:       3 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                5 [39.0%]  (TRUE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 611, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_4>
  # PT = nonlocal escaped 
  _6 = this_3(D)->_route_setD.44883;
  if (_6 != 0B)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 479, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.50643 => _6
  # DEBUG D#226ptD.0 => &_6->_outputsD.32418
  # DEBUG thisD.50644 => D#226ptD.0
  # PT = nonlocal escaped 
  _13 = &MEM[(struct setD.31362 *)_6]._M_tD.31591;
  # DEBUG thisD.50645 => _13
  # VUSE <.MEM_4>
  # PT = nonlocal escaped 
  _14 = MEM[(struct _Rb_tree_node_baseD.29379 * *)_6 + 16B];
  # DEBUG D#14ptD.0 => _13
  # DEBUG thisD.50629 => D#14ptD.0
  # .MEM_9 = VDEF <.MEM_4>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIN9OutputSet11sSetElementES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_ED.31962 (_13, _14);
  # DEBUG D#225ptD.0 => &MEM[(struct _Rb_treeD.31590 *)_13]._M_implD.31669
  # DEBUG thisD.50646 => D#225ptD.0
  # DEBUG thisD.50647 => D#225ptD.0
  # DEBUG thisD.50648 => D#225ptD.0
  # .MEM_20 = VDEF <.MEM_9>
  MEM[(struct  &)_6] ={v} {CLOBBER};
  # .MEM_8 = VDEF <.MEM_20>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (_6);
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       3 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_4(3), .MEM_8(4), .MEM_4(2)>
  # DEBUG D#227ptD.0 => &this_3(D)->_bufferD.44881
  # DEBUG thisD.50649 => D#227ptD.0
  # DEBUG D#170ptD.0 => &D#227ptD.0->D.44879
  # DEBUG thisD.49919 => D#170ptD.0
  # DEBUG thisD.49916 => D#227ptD.0
  # DEBUG D#20ptD.0 => &D#227ptD.0->D.44879._M_implD.44330._M_finishD.44335
  # DEBUG thisD.49918 => NULL
  # DEBUG __xD.49917 => D#20ptD.0
  # DEBUG D#178ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 48]._M_curD.44229
  # DEBUG D.49925 => D#178ptD.0
  # DEBUG D#177ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 48]._M_firstD.44230
  # DEBUG D.49926 => D#177ptD.0
  # DEBUG D#176ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 48]._M_lastD.44231
  # DEBUG D.49927 => D#176ptD.0
  # DEBUG D#175ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 48]._M_nodeD.44232
  # DEBUG D.49928 => D#175ptD.0
  # DEBUG thisD.49913 => D#227ptD.0
  # DEBUG D#21ptD.0 => &D#227ptD.0->D.44879._M_implD.44330._M_startD.44334
  # DEBUG thisD.49915 => NULL
  # DEBUG __xD.49914 => D#21ptD.0
  # DEBUG D#174ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 16]._M_curD.44229
  # DEBUG D.49921 => D#174ptD.0
  # DEBUG D#173ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 16]._M_firstD.44230
  # DEBUG D.49922 => D#173ptD.0
  # DEBUG D#172ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 16]._M_lastD.44231
  # DEBUG D.49923 => D#172ptD.0
  # DEBUG D#171ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 16]._M_nodeD.44232
  # DEBUG D.49924 => D#171ptD.0
  # DEBUG D#22ptD.0 => D#227ptD.0
  # DEBUG thisD.49912 => D#22ptD.0
  # DEBUG __firstD.49911 => D#23ptD.0
  # DEBUG __lastD.49910 => D#24ptD.0
  # DEBUG D.49909 => D#25ptD.0
  # DEBUG D#264ptD.0 => &MEM[(struct dequeD.32466 *)this_3(D) + 96B].D.44879
  # DEBUG thisD.52116 => D#264ptD.0
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _11 = MEM[(struct _Deque_baseD.43964 *)this_3(D) + 96B]._M_implD.44330._M_mapD.44332;
  if (_11 != 0B)
    goto <bb 6>;
  else
    goto <bb 12>;
;;    succ:       6 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _28 = MEM[(struct _Deque_baseD.43964 *)this_3(D) + 96B]._M_implD.44330._M_finishD.44335._M_nodeD.44232;
  # PT = nonlocal escaped 
  _29 = _28 + 8;
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  __nstart_30 = MEM[(struct _Deque_baseD.43964 *)this_3(D) + 96B]._M_implD.44330._M_startD.44334._M_nodeD.44232;
  # DEBUG D#147ptD.0 => D#264ptD.0
  # DEBUG __nstartD.52122 => __nstart_30
  # DEBUG __nfinishD.52121 => _29
  # DEBUG thisD.52120 => D#147ptD.0
  # DEBUG __nD.52123 => __nstart_30
  if (_29 <= __nstart_30)
    goto <bb 11>;
  else
    goto <bb 7>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_69 = PHI <.MEM_1(7), .MEM_39(9)>
  # PT = nonlocal escaped 
  # __nstart_67 = PHI <__nstart_30(7), __nstart_33(9)>
  # DEBUG __nD.52123 => __nstart_67
  # VUSE <.MEM_69>
  # PT = nonlocal escaped 
  _32 = *__nstart_67;
  # DEBUG D#145ptD.0 => D#146ptD.0
  # DEBUG __pD.52125 => _32
  # DEBUG thisD.52124 => D#145ptD.0
  # DEBUG D#144ptD.0 => D#145ptD.0
  # DEBUG __sizeD.49700 => 8
  # DEBUG D#143ptD.0 => &D#144ptD.0->_M_implD.44330
  # DEBUG D#141ptD.0 => D#143ptD.0
  # DEBUG __pD.52129 => _32
  # DEBUG __aD.52127 => D#141ptD.0
  # DEBUG __nD.52128 => D#142ptD.0
  # DEBUG D#140ptD.0 => D#142ptD.0
  # DEBUG D#139ptD.0 => D#141ptD.0
  # DEBUG D#137ptD.0 => D#139ptD.0
  # DEBUG D#138ptD.0 => D#140ptD.0
  # DEBUG __pD.52132 => _32
  # DEBUG thisD.52130 => D#137ptD.0
  # DEBUG D.52131 => D#138ptD.0
  # .MEM_39 = VDEF <.MEM_69>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (_32);
  # PT = nonlocal escaped 
  __nstart_33 = __nstart_67 + 8;
  # DEBUG __nD.52123 => __nstart_33
  # DEBUG __nD.52123 => __nstart_33
  if (_29 <= __nstart_33)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 9, next block 19, flags: (NEW)
;;    pred:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       19 [100.0%]  (FALLTHRU)

;;   basic block 19, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 10, next block 11, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_39>
  pretmp_17 = MEM[(struct _Deque_baseD.43964 *)this_3(D) + 96B]._M_implD.44330._M_mapD.44332;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 19, next block 12, flags: (NEW, REACHABLE)
;;    pred:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_68 = PHI <.MEM_39(19), .MEM_1(6)>
  # PT = nonlocal escaped 
  # prephitmp_18 = PHI <pretmp_17(19), _11(6)>
  # DEBUG D#168ptD.0 => D#264ptD.0->_M_implD.44330._M_map_sizeD.44333
  # DEBUG D#265ptD.0 => MEM[(struct _Deque_baseD.43964 *)this_3(D) + 96B]._M_implD.44330._M_mapD.44332
  # DEBUG D#166ptD.0 => D#264ptD.0
  # DEBUG D#167ptD.0 => D#168ptD.0
  # DEBUG __pD.52135 => D#265ptD.0
  # DEBUG thisD.52133 => D#166ptD.0
  # DEBUG __nD.52134 => D#167ptD.0
  # DEBUG D#165ptD.0 => D#167ptD.0
  # DEBUG D#164ptD.0 => D#166ptD.0
  # DEBUG D#163ptD.0 => D#164ptD.0
  # DEBUG thisD.49862 => D#163ptD.0
  # DEBUG D#162ptD.0 => D#163ptD.0
  # DEBUG thisD.49850 => D#162ptD.0
  # DEBUG thisD.49842 => NULL
  # DEBUG D.49843 => NULL
  # DEBUG thisD.49840 => NULL
  # DEBUG D#132ptD.0 => &__map_allocD.52136
  # DEBUG D#133ptD.0 => D#165ptD.0
  # DEBUG __pD.52139 => D#265ptD.0
  # DEBUG __aD.52137 => D#132ptD.0
  # DEBUG __nD.52138 => D#133ptD.0
  # DEBUG D#131ptD.0 => D#133ptD.0
  # DEBUG D#130ptD.0 => D#132ptD.0
  # DEBUG D#128ptD.0 => D#130ptD.0
  # DEBUG D#129ptD.0 => D#131ptD.0
  # DEBUG __pD.52142 => D#265ptD.0
  # DEBUG thisD.52140 => D#128ptD.0
  # DEBUG D.52141 => D#129ptD.0
  # .MEM_40 = VDEF <.MEM_68>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (prephitmp_18);
  # DEBUG thisD.49876 => &__map_allocD.52136
  # DEBUG thisD.49855 => &__map_allocD.52136
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       5 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_35 = PHI <.MEM_1(5), .MEM_40(11)>
  # DEBUG D#169ptD.0 => &D#264ptD.0->_M_implD.44330
  # DEBUG thisD.52117 => D#169ptD.0
  # DEBUG thisD.52118 => D#169ptD.0
  # DEBUG thisD.52119 => D#169ptD.0
  # .MEM_22 = VDEF <.MEM_35>
  MEM[(struct  &)this_3(D) + 96] ={v} {CLOBBER};
  # DEBUG D#263ptD.0 => &this_3(D)->D.44977
  # DEBUG thisD.52070 => D#263ptD.0
  # .MEM_45 = VDEF <.MEM_22>
  MEM[(struct ModuleD.32543 *)this_3(D)]._vptr.ModuleD.33338 = &MEM[(voidD.45 *)&_ZTV6ModuleD.33343 + 16B];
  # DEBUG D#125ptD.0 => &D#263ptD.0->_childrenD.33293
  # DEBUG thisD.52071 => D#125ptD.0
  # DEBUG D#119ptD.0 => &D#125ptD.0->D.33291
  # DEBUG thisD.49557 => D#119ptD.0
  # DEBUG D#122ptD.0 => D#125ptD.0->D.33291._M_implD.32782._M_finishD.32785
  # DEBUG D#121ptD.0 => D#125ptD.0->D.33291._M_implD.32782._M_startD.32784
  # DEBUG D#64ptD.0 => D#121ptD.0
  # DEBUG D#65ptD.0 => D#122ptD.0
  # DEBUG __firstD.49556 => D#64ptD.0
  # DEBUG __lastD.49555 => D#65ptD.0
  # DEBUG D.49554 => D#66ptD.0
  # DEBUG D#63ptD.0 => D#65ptD.0
  # DEBUG D#62ptD.0 => D#64ptD.0
  # DEBUG D#60ptD.0 => D#62ptD.0
  # DEBUG D#61ptD.0 => D#63ptD.0
  # DEBUG __firstD.49166 => D#60ptD.0
  # DEBUG __lastD.49165 => D#61ptD.0
  # DEBUG D#59ptD.0 => D#61ptD.0
  # DEBUG D#58ptD.0 => D#60ptD.0
  # DEBUG D#56ptD.0 => D#58ptD.0
  # DEBUG D#57ptD.0 => D#59ptD.0
  # DEBUG D.49155 => D#56ptD.0
  # DEBUG D.49154 => D#57ptD.0
  # DEBUG D#120ptD.0 => &D#125ptD.0->D.33291
  # DEBUG thisD.52072 => D#120ptD.0
  # DEBUG D#118ptD.0 => D#120ptD.0->_M_implD.32782._M_end_of_storageD.32786
  # DEBUG D#117ptD.0 => (long intD.12) D#118ptD.0
  # VUSE <.MEM_45>
  # PT = nonlocal escaped 
  _23 = MEM[(struct _Vector_baseD.32549 *)this_3(D) + 72B]._M_implD.32782._M_startD.32784;
  # DEBUG D#116ptD.0 => (long intD.12) _23
  # DEBUG D#115ptD.0 => D#117ptD.0 - D#116ptD.0
  # DEBUG D#114ptD.0 => D#115ptD.0 /[ex] 8
  # DEBUG D#111ptD.0 => D#120ptD.0
  # DEBUG D#112ptD.0 => (long unsigned intD.14) D#114ptD.0
  # DEBUG __pD.52075 => _23
  # DEBUG thisD.52073 => D#111ptD.0
  # DEBUG __nD.52074 => D#112ptD.0
  # DEBUG D#110ptD.0 => D#112ptD.0
  # DEBUG D#109ptD.0 => D#111ptD.0
  if (_23 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;
;;    succ:       13 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 699, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#108ptD.0 => &D#109ptD.0->_M_implD.32782
  # DEBUG D#106ptD.0 => D#108ptD.0
  # DEBUG D#107ptD.0 => D#110ptD.0
  # DEBUG __pD.52079 => _23
  # DEBUG __aD.52077 => D#106ptD.0
  # DEBUG __nD.52078 => D#107ptD.0
  # DEBUG D#105ptD.0 => D#107ptD.0
  # DEBUG D#104ptD.0 => D#106ptD.0
  # DEBUG D#102ptD.0 => D#104ptD.0
  # DEBUG D#103ptD.0 => D#105ptD.0
  # DEBUG __pD.52082 => _23
  # DEBUG thisD.52080 => D#102ptD.0
  # DEBUG D.52081 => D#103ptD.0
  # .MEM_46 = VDEF <.MEM_45>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (_23);
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       12 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_36 = PHI <.MEM_45(12), .MEM_46(13)>
  # DEBUG D#113ptD.0 => &D#120ptD.0->_M_implD.32782
  # DEBUG thisD.52083 => D#113ptD.0
  # DEBUG thisD.52084 => D#113ptD.0
  # DEBUG thisD.52085 => D#113ptD.0
  # .MEM_51 = VDEF <.MEM_36>
  MEM[(struct  &)this_3(D) + 72] ={v} {CLOBBER};
  # DEBUG D#124ptD.0 => &D#263ptD.0->_fullnameD.32546
  # DEBUG thisD.52086 => D#124ptD.0
  # DEBUG thisD.52087 => D#124ptD.0
  # DEBUG thisD.52096 => D#124ptD.0
  # VUSE <.MEM_51>
  # PT = nonlocal escaped 
  _24 = MEM[(charD.10 * *)this_3(D) + 40B];
  # DEBUG D#1ptD.0 => D#124ptD.0
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.52097 => D#124ptD.0
  # PT = nonlocal 
  _25 = &MEM[(const struct basic_stringD.3646 *)this_3(D) + 40B].D.12341._M_local_bufD.12343;
  if (_24 != _25)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 699, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => MEM[(struct basic_stringD.3646 *)D#124ptD.0].D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.52089 => D#124ptD.0
  # DEBUG __sizeD.52088 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => D#124ptD.0
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => D#124ptD.0
  # DEBUG D#91ptD.0 => &MEM[(struct basic_stringD.3646 *)D#124ptD.0]._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.52092 => _24
  # DEBUG __aD.52090 => D#89ptD.0
  # DEBUG __nD.52091 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.52095 => _24
  # DEBUG thisD.52093 => D#85ptD.0
  # DEBUG D.52094 => D#86ptD.0
  # .MEM_52 = VDEF <.MEM_51>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (_24);
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       14 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_37 = PHI <.MEM_51(14), .MEM_52(15)>
  # DEBUG D#95ptD.0 => &MEM[(struct basic_stringD.3646 *)D#124ptD.0]._M_dataplusD.12321
  # DEBUG thisD.52098 => D#95ptD.0
  # DEBUG thisD.52099 => D#95ptD.0
  # DEBUG thisD.52100 => D#95ptD.0
  # .MEM_56 = VDEF <.MEM_37>
  MEM[(struct  &)this_3(D) + 40] ={v} {CLOBBER};
  # DEBUG D#123ptD.0 => &D#263ptD.0->_nameD.32545
  # DEBUG thisD.52101 => D#123ptD.0
  # DEBUG thisD.52102 => D#123ptD.0
  # DEBUG thisD.52111 => D#123ptD.0
  # VUSE <.MEM_56>
  # PT = nonlocal escaped 
  _26 = MEM[(charD.10 * *)this_3(D) + 8B];
  # DEBUG D#1ptD.0 => D#123ptD.0
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.52112 => D#123ptD.0
  # PT = nonlocal 
  _27 = &MEM[(const struct basic_stringD.3646 *)this_3(D) + 8B].D.12341._M_local_bufD.12343;
  if (_26 != _27)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 785, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => MEM[(struct basic_stringD.3646 *)D#123ptD.0].D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.52104 => D#123ptD.0
  # DEBUG __sizeD.52103 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => D#123ptD.0
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => D#123ptD.0
  # DEBUG D#91ptD.0 => &MEM[(struct basic_stringD.3646 *)D#123ptD.0]._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.52107 => _26
  # DEBUG __aD.52105 => D#89ptD.0
  # DEBUG __nD.52106 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.52110 => _26
  # DEBUG thisD.52108 => D#85ptD.0
  # DEBUG D.52109 => D#86ptD.0
  # .MEM_57 = VDEF <.MEM_56>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (_26);
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 17, next block 1, flags: (NEW, REACHABLE)
;;    pred:       16 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_38 = PHI <.MEM_56(16), .MEM_57(17)>
  # DEBUG D#95ptD.0 => &MEM[(struct basic_stringD.3646 *)D#123ptD.0]._M_dataplusD.12321
  # DEBUG thisD.52113 => D#95ptD.0
  # DEBUG thisD.52114 => D#95ptD.0
  # DEBUG thisD.52115 => D#95ptD.0
  # .MEM_12 = VDEF <.MEM_38>
  MEM[(struct  &)this_3(D)] ={v} {CLOBBER};
  # VUSE <.MEM_12>
  return;
;;    succ:       EXIT [100.0%] 

}



;; Function virtual VC::~VC() (_ZN2VCD0Ev, funcdef_no=2145, decl_uid=44968, cgraph_uid=603, symbol_order=605)


Pass statistics:
----------------

virtual VC::~VC() (struct VCD.43951 * const thisD.44969)
{
  struct FlitD.32424 * * * __nstartD.52220;
  struct ModuleD.32543 * * _3;
  boolD.2757 _5;
  struct OutputSetD.31333 * _6;
  struct _Rep_typeD.31588 * _7;
  struct _Rb_tree_node_baseD.29379 * _8;
  charD.10 * const _11;
  const charD.10 * _12;
  charD.10 * const _13;
  const charD.10 * _14;
  struct FlitD.32424 * * * _15;
  struct FlitD.32424 * * * _16;
  struct FlitD.32424 * * * _17;
  struct FlitD.32424 * * _20;
  struct FlitD.32424 * * * pretmp_33;
  struct FlitD.32424 * * * prephitmp_34;

;;   basic block 2, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.52160 => this_2(D)
  # .MEM_29 = VDEF <.MEM_1(D)>
  this_2(D)->D.44977._vptr.ModuleD.33338 = &MEM[(voidD.45 *)&_ZTV2VCD.44992 + 16B];
  # VUSE <.MEM_29>
  _5 = this_2(D)->_lookahead_routingD.44899;
  if (_5 != 0)
    goto <bb 5>;
  else
    goto <bb 3>;
;;    succ:       3 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                5 [39.0%]  (TRUE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 611, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_29>
  # PT = nonlocal escaped 
  _6 = this_2(D)->_route_setD.44883;
  if (_6 != 0B)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 479, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.52162 => _6
  # DEBUG D#226ptD.0 => &_6->_outputsD.32418
  # DEBUG thisD.52163 => D#226ptD.0
  # PT = nonlocal escaped 
  _7 = &MEM[(struct setD.31362 *)_6]._M_tD.31591;
  # DEBUG thisD.52164 => _7
  # VUSE <.MEM_29>
  # PT = nonlocal escaped 
  _8 = MEM[(struct _Rb_tree_node_baseD.29379 * *)_6 + 16B];
  # DEBUG D#14ptD.0 => _7
  # DEBUG thisD.50629 => D#14ptD.0
  # .MEM_30 = VDEF <.MEM_29>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIN9OutputSet11sSetElementES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_ED.31962 (_7, _8);
  # DEBUG D#225ptD.0 => &MEM[(struct _Rb_treeD.31590 *)_7]._M_implD.31669
  # DEBUG thisD.52165 => D#225ptD.0
  # DEBUG thisD.52166 => D#225ptD.0
  # DEBUG thisD.52167 => D#225ptD.0
  # .MEM_36 = VDEF <.MEM_30>
  MEM[(struct  &)_6] ={v} {CLOBBER};
  # .MEM_37 = VDEF <.MEM_36>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (_6);
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       3 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_23 = PHI <.MEM_29(3), .MEM_37(4), .MEM_29(2)>
  # DEBUG D#227ptD.0 => &this_2(D)->_bufferD.44881
  # DEBUG thisD.52161 => D#227ptD.0
  # DEBUG D#170ptD.0 => &D#227ptD.0->D.44879
  # DEBUG thisD.49919 => D#170ptD.0
  # DEBUG thisD.49916 => D#227ptD.0
  # DEBUG D#20ptD.0 => &D#227ptD.0->D.44879._M_implD.44330._M_finishD.44335
  # DEBUG thisD.49918 => NULL
  # DEBUG __xD.49917 => D#20ptD.0
  # DEBUG D#178ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 48]._M_curD.44229
  # DEBUG D.49925 => D#178ptD.0
  # DEBUG D#177ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 48]._M_firstD.44230
  # DEBUG D.49926 => D#177ptD.0
  # DEBUG D#176ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 48]._M_lastD.44231
  # DEBUG D.49927 => D#176ptD.0
  # DEBUG D#175ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 48]._M_nodeD.44232
  # DEBUG D.49928 => D#175ptD.0
  # DEBUG thisD.49913 => D#227ptD.0
  # DEBUG D#21ptD.0 => &D#227ptD.0->D.44879._M_implD.44330._M_startD.44334
  # DEBUG thisD.49915 => NULL
  # DEBUG __xD.49914 => D#21ptD.0
  # DEBUG D#174ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 16]._M_curD.44229
  # DEBUG D.49921 => D#174ptD.0
  # DEBUG D#173ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 16]._M_firstD.44230
  # DEBUG D.49922 => D#173ptD.0
  # DEBUG D#172ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 16]._M_lastD.44231
  # DEBUG D.49923 => D#172ptD.0
  # DEBUG D#171ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 16]._M_nodeD.44232
  # DEBUG D.49924 => D#171ptD.0
  # DEBUG D#22ptD.0 => D#227ptD.0
  # DEBUG thisD.49912 => D#22ptD.0
  # DEBUG __firstD.49911 => D#23ptD.0
  # DEBUG __lastD.49910 => D#24ptD.0
  # DEBUG D.49909 => D#25ptD.0
  # DEBUG D#268ptD.0 => &MEM[(struct dequeD.32466 *)this_2(D) + 96B].D.44879
  # DEBUG thisD.52214 => D#268ptD.0
  # VUSE <.MEM_23>
  # PT = nonlocal escaped 
  _15 = MEM[(struct _Deque_baseD.43964 *)this_2(D) + 96B]._M_implD.44330._M_mapD.44332;
  if (_15 != 0B)
    goto <bb 6>;
  else
    goto <bb 12>;
;;    succ:       6 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_23>
  # PT = nonlocal escaped 
  _16 = MEM[(struct _Deque_baseD.43964 *)this_2(D) + 96B]._M_implD.44330._M_finishD.44335._M_nodeD.44232;
  # PT = nonlocal escaped 
  _17 = _16 + 8;
  # VUSE <.MEM_23>
  # PT = nonlocal escaped 
  __nstart_18 = MEM[(struct _Deque_baseD.43964 *)this_2(D) + 96B]._M_implD.44330._M_startD.44334._M_nodeD.44232;
  # DEBUG D#147ptD.0 => D#268ptD.0
  # DEBUG __nstartD.52220 => __nstart_18
  # DEBUG __nfinishD.52219 => _17
  # DEBUG thisD.52218 => D#147ptD.0
  # DEBUG __nD.52221 => __nstart_18
  if (_17 <= __nstart_18)
    goto <bb 11>;
  else
    goto <bb 7>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __nstart_70 = PHI <__nstart_18(7), __nstart_21(9)>
  # .MEM_69 = PHI <.MEM_23(7), .MEM_38(9)>
  # DEBUG __nD.52221 => __nstart_70
  # VUSE <.MEM_69>
  # PT = nonlocal escaped 
  _20 = *__nstart_70;
  # DEBUG D#145ptD.0 => D#146ptD.0
  # DEBUG __pD.52223 => _20
  # DEBUG thisD.52222 => D#145ptD.0
  # DEBUG D#144ptD.0 => D#145ptD.0
  # DEBUG __sizeD.49700 => 8
  # DEBUG D#143ptD.0 => &D#144ptD.0->_M_implD.44330
  # DEBUG D#141ptD.0 => D#143ptD.0
  # DEBUG __pD.52227 => _20
  # DEBUG __aD.52225 => D#141ptD.0
  # DEBUG __nD.52226 => D#142ptD.0
  # DEBUG D#140ptD.0 => D#142ptD.0
  # DEBUG D#139ptD.0 => D#141ptD.0
  # DEBUG D#137ptD.0 => D#139ptD.0
  # DEBUG D#138ptD.0 => D#140ptD.0
  # DEBUG __pD.52230 => _20
  # DEBUG thisD.52228 => D#137ptD.0
  # DEBUG D.52229 => D#138ptD.0
  # .MEM_38 = VDEF <.MEM_69>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (_20);
  # PT = nonlocal escaped 
  __nstart_21 = __nstart_70 + 8;
  # DEBUG __nD.52221 => __nstart_21
  # DEBUG __nD.52221 => __nstart_21
  if (_17 <= __nstart_21)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_38>
  pretmp_33 = MEM[(struct _Deque_baseD.43964 *)this_2(D) + 96B]._M_implD.44330._M_mapD.44332;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_67 = PHI <.MEM_38(10), .MEM_23(6)>
  # PT = nonlocal escaped 
  # prephitmp_34 = PHI <pretmp_33(10), _15(6)>
  # DEBUG D#168ptD.0 => D#268ptD.0->_M_implD.44330._M_map_sizeD.44333
  # DEBUG D#269ptD.0 => MEM[(struct _Deque_baseD.43964 *)this_2(D) + 96B]._M_implD.44330._M_mapD.44332
  # DEBUG D#166ptD.0 => D#268ptD.0
  # DEBUG D#167ptD.0 => D#168ptD.0
  # DEBUG __pD.52233 => D#269ptD.0
  # DEBUG thisD.52231 => D#166ptD.0
  # DEBUG __nD.52232 => D#167ptD.0
  # DEBUG D#165ptD.0 => D#167ptD.0
  # DEBUG D#164ptD.0 => D#166ptD.0
  # DEBUG D#163ptD.0 => D#164ptD.0
  # DEBUG thisD.49862 => D#163ptD.0
  # DEBUG D#162ptD.0 => D#163ptD.0
  # DEBUG thisD.49850 => D#162ptD.0
  # DEBUG thisD.49842 => NULL
  # DEBUG D.49843 => NULL
  # DEBUG thisD.49840 => NULL
  # DEBUG D#132ptD.0 => &__map_allocD.52234
  # DEBUG D#133ptD.0 => D#165ptD.0
  # DEBUG __pD.52237 => D#269ptD.0
  # DEBUG __aD.52235 => D#132ptD.0
  # DEBUG __nD.52236 => D#133ptD.0
  # DEBUG D#131ptD.0 => D#133ptD.0
  # DEBUG D#130ptD.0 => D#132ptD.0
  # DEBUG D#128ptD.0 => D#130ptD.0
  # DEBUG D#129ptD.0 => D#131ptD.0
  # DEBUG __pD.52240 => D#269ptD.0
  # DEBUG thisD.52238 => D#128ptD.0
  # DEBUG D.52239 => D#129ptD.0
  # .MEM_39 = VDEF <.MEM_67>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (prephitmp_34);
  # DEBUG thisD.49876 => &__map_allocD.52234
  # DEBUG thisD.49855 => &__map_allocD.52234
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       5 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_25 = PHI <.MEM_23(5), .MEM_39(11)>
  # DEBUG D#169ptD.0 => &D#268ptD.0->_M_implD.44330
  # DEBUG thisD.52215 => D#169ptD.0
  # DEBUG thisD.52216 => D#169ptD.0
  # DEBUG thisD.52217 => D#169ptD.0
  # .MEM_44 = VDEF <.MEM_25>
  MEM[(struct  &)this_2(D) + 96] ={v} {CLOBBER};
  # DEBUG D#267ptD.0 => &this_2(D)->D.44977
  # DEBUG thisD.52168 => D#267ptD.0
  # .MEM_45 = VDEF <.MEM_44>
  MEM[(struct ModuleD.32543 *)this_2(D)]._vptr.ModuleD.33338 = &MEM[(voidD.45 *)&_ZTV6ModuleD.33343 + 16B];
  # DEBUG D#125ptD.0 => &D#267ptD.0->_childrenD.33293
  # DEBUG thisD.52169 => D#125ptD.0
  # DEBUG D#119ptD.0 => &D#125ptD.0->D.33291
  # DEBUG thisD.49557 => D#119ptD.0
  # DEBUG D#122ptD.0 => D#125ptD.0->D.33291._M_implD.32782._M_finishD.32785
  # DEBUG D#121ptD.0 => D#125ptD.0->D.33291._M_implD.32782._M_startD.32784
  # DEBUG D#64ptD.0 => D#121ptD.0
  # DEBUG D#65ptD.0 => D#122ptD.0
  # DEBUG __firstD.49556 => D#64ptD.0
  # DEBUG __lastD.49555 => D#65ptD.0
  # DEBUG D.49554 => D#66ptD.0
  # DEBUG D#63ptD.0 => D#65ptD.0
  # DEBUG D#62ptD.0 => D#64ptD.0
  # DEBUG D#60ptD.0 => D#62ptD.0
  # DEBUG D#61ptD.0 => D#63ptD.0
  # DEBUG __firstD.49166 => D#60ptD.0
  # DEBUG __lastD.49165 => D#61ptD.0
  # DEBUG D#59ptD.0 => D#61ptD.0
  # DEBUG D#58ptD.0 => D#60ptD.0
  # DEBUG D#56ptD.0 => D#58ptD.0
  # DEBUG D#57ptD.0 => D#59ptD.0
  # DEBUG D.49155 => D#56ptD.0
  # DEBUG D.49154 => D#57ptD.0
  # DEBUG D#120ptD.0 => &D#125ptD.0->D.33291
  # DEBUG thisD.52170 => D#120ptD.0
  # DEBUG D#118ptD.0 => D#120ptD.0->_M_implD.32782._M_end_of_storageD.32786
  # DEBUG D#117ptD.0 => (long intD.12) D#118ptD.0
  # VUSE <.MEM_45>
  # PT = nonlocal escaped 
  _3 = MEM[(struct _Vector_baseD.32549 *)this_2(D) + 72B]._M_implD.32782._M_startD.32784;
  # DEBUG D#116ptD.0 => (long intD.12) _3
  # DEBUG D#115ptD.0 => D#117ptD.0 - D#116ptD.0
  # DEBUG D#114ptD.0 => D#115ptD.0 /[ex] 8
  # DEBUG D#111ptD.0 => D#120ptD.0
  # DEBUG D#112ptD.0 => (long unsigned intD.14) D#114ptD.0
  # DEBUG __pD.52173 => _3
  # DEBUG thisD.52171 => D#111ptD.0
  # DEBUG __nD.52172 => D#112ptD.0
  # DEBUG D#110ptD.0 => D#112ptD.0
  # DEBUG D#109ptD.0 => D#111ptD.0
  if (_3 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;
;;    succ:       13 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 699, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#108ptD.0 => &D#109ptD.0->_M_implD.32782
  # DEBUG D#106ptD.0 => D#108ptD.0
  # DEBUG D#107ptD.0 => D#110ptD.0
  # DEBUG __pD.52177 => _3
  # DEBUG __aD.52175 => D#106ptD.0
  # DEBUG __nD.52176 => D#107ptD.0
  # DEBUG D#105ptD.0 => D#107ptD.0
  # DEBUG D#104ptD.0 => D#106ptD.0
  # DEBUG D#102ptD.0 => D#104ptD.0
  # DEBUG D#103ptD.0 => D#105ptD.0
  # DEBUG __pD.52180 => _3
  # DEBUG thisD.52178 => D#102ptD.0
  # DEBUG D.52179 => D#103ptD.0
  # .MEM_46 = VDEF <.MEM_45>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (_3);
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       12 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_26 = PHI <.MEM_45(12), .MEM_46(13)>
  # DEBUG D#113ptD.0 => &D#120ptD.0->_M_implD.32782
  # DEBUG thisD.52181 => D#113ptD.0
  # DEBUG thisD.52182 => D#113ptD.0
  # DEBUG thisD.52183 => D#113ptD.0
  # .MEM_51 = VDEF <.MEM_26>
  MEM[(struct  &)this_2(D) + 72] ={v} {CLOBBER};
  # DEBUG D#124ptD.0 => &D#267ptD.0->_fullnameD.32546
  # DEBUG thisD.52184 => D#124ptD.0
  # DEBUG thisD.52185 => D#124ptD.0
  # DEBUG thisD.52194 => D#124ptD.0
  # VUSE <.MEM_51>
  # PT = nonlocal escaped 
  _11 = MEM[(charD.10 * *)this_2(D) + 40B];
  # DEBUG D#1ptD.0 => D#124ptD.0
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.52195 => D#124ptD.0
  # PT = nonlocal 
  _12 = &MEM[(const struct basic_stringD.3646 *)this_2(D) + 40B].D.12341._M_local_bufD.12343;
  if (_11 != _12)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 699, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => MEM[(struct basic_stringD.3646 *)D#124ptD.0].D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.52187 => D#124ptD.0
  # DEBUG __sizeD.52186 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => D#124ptD.0
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => D#124ptD.0
  # DEBUG D#91ptD.0 => &MEM[(struct basic_stringD.3646 *)D#124ptD.0]._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.52190 => _11
  # DEBUG __aD.52188 => D#89ptD.0
  # DEBUG __nD.52189 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.52193 => _11
  # DEBUG thisD.52191 => D#85ptD.0
  # DEBUG D.52192 => D#86ptD.0
  # .MEM_52 = VDEF <.MEM_51>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (_11);
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       14 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_27 = PHI <.MEM_51(14), .MEM_52(15)>
  # DEBUG D#95ptD.0 => &MEM[(struct basic_stringD.3646 *)D#124ptD.0]._M_dataplusD.12321
  # DEBUG thisD.52196 => D#95ptD.0
  # DEBUG thisD.52197 => D#95ptD.0
  # DEBUG thisD.52198 => D#95ptD.0
  # .MEM_56 = VDEF <.MEM_27>
  MEM[(struct  &)this_2(D) + 40] ={v} {CLOBBER};
  # DEBUG D#123ptD.0 => &D#267ptD.0->_nameD.32545
  # DEBUG thisD.52199 => D#123ptD.0
  # DEBUG thisD.52200 => D#123ptD.0
  # DEBUG thisD.52209 => D#123ptD.0
  # VUSE <.MEM_56>
  # PT = nonlocal escaped 
  _13 = MEM[(charD.10 * *)this_2(D) + 8B];
  # DEBUG D#1ptD.0 => D#123ptD.0
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.52210 => D#123ptD.0
  # PT = nonlocal 
  _14 = &MEM[(const struct basic_stringD.3646 *)this_2(D) + 8B].D.12341._M_local_bufD.12343;
  if (_13 != _14)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 785, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => MEM[(struct basic_stringD.3646 *)D#123ptD.0].D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.52202 => D#123ptD.0
  # DEBUG __sizeD.52201 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => D#123ptD.0
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => D#123ptD.0
  # DEBUG D#91ptD.0 => &MEM[(struct basic_stringD.3646 *)D#123ptD.0]._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.52205 => _13
  # DEBUG __aD.52203 => D#89ptD.0
  # DEBUG __nD.52204 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.52208 => _13
  # DEBUG thisD.52206 => D#85ptD.0
  # DEBUG D.52207 => D#86ptD.0
  # .MEM_57 = VDEF <.MEM_56>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (_13);
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 17, next block 1, flags: (NEW, REACHABLE)
;;    pred:       16 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_28 = PHI <.MEM_56(16), .MEM_57(17)>
  # DEBUG D#95ptD.0 => &MEM[(struct basic_stringD.3646 *)D#123ptD.0]._M_dataplusD.12321
  # DEBUG thisD.52211 => D#95ptD.0
  # DEBUG thisD.52212 => D#95ptD.0
  # DEBUG thisD.52213 => D#95ptD.0
  # .MEM_63 = VDEF <.MEM_28>
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  # .MEM_4 = VDEF <.MEM_63>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (this_2(D));
  # VUSE <.MEM_4>
  return;
;;    succ:       EXIT [100.0%] 

}


Creating dr for this_2(D)->D.44977._vptr.Module
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *this_2(D)
	Access function 0: 0
	Access function 1: 0
Creating dr for this_2(D)->_lookahead_routing
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 228
	step: 0
	aligned to: 256
	base_object: *this_2(D)
	Access function 0: 1824
Creating dr for this_2(D)->_route_set
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 184
	step: 0
	aligned to: 256
	base_object: *this_2(D)
	Access function 0: 1472
Creating dr for MEM[(struct _Rb_tree_node_base * *)_6 + 16B]
analyze_innermost: success.
	base_address: _6
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)_6 + 16B]
Creating dr for MEM[(struct _Deque_base *)this_2(D) + 96B]._M_impl._M_map
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_2(D) + 96B]
	Access function 0: 0
	Access function 1: 0
Creating dr for MEM[(struct _Deque_base *)this_2(D) + 96B]._M_impl._M_finish._M_node
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 168
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_2(D) + 96B]
	Access function 0: 192
	Access function 1: 384
	Access function 2: 0
Creating dr for MEM[(struct _Deque_base *)this_2(D) + 96B]._M_impl._M_start._M_node
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 136
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_2(D) + 96B]
	Access function 0: 192
	Access function 1: 128
	Access function 2: 0
Creating dr for *__nstart_70
analyze_innermost: success.
	base_address: __nstart_18
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_18
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_70
analyze_innermost: success.
	base_address: __nstart_18
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_18
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_70
analyze_innermost: success.
	base_address: __nstart_18
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_18
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_70
analyze_innermost: success.
	base_address: __nstart_18
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_18
	Access function 0: {0B, +, 8}_1
Analyzing # of iterations of loop 1
  exit condition [__nstart_18 + 8, + , 8](no_overflow) < _16 + 8
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) _16 - (unsigned long) __nstart_18) + 7) / 8, bounded by 2305843009213693951
Analyzing # of iterations of loop 1
  exit condition [__nstart_18 + 8, + , 8](no_overflow) < _16 + 8
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) _16 - (unsigned long) __nstart_18) + 7) / 8, bounded by 2305843009213693951
Creating dr for *__nstart_70
analyze_innermost: success.
	base_address: __nstart_18
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_18
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_70
analyze_innermost: success.
	base_address: __nstart_18
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_18
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_70
analyze_innermost: success.
	base_address: __nstart_18
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_18
	Access function 0: {0B, +, 8}_1
Creating dr for *__nstart_70
analyze_innermost: success.
	base_address: __nstart_18
	offset from base address: 0
	constant offset from base address: 0
	step: 8
	aligned to: 256
	base_object: *__nstart_18
	Access function 0: {0B, +, 8}_1
Analyzing # of iterations of loop 1
  exit condition [__nstart_18 + 8, + , 8](no_overflow) < _16 + 8
  bounds on difference of bases: -7 ... 18446744073709551607
Applying pattern match.pd:49, generic-match.c:3223
Applying pattern match.pd:129, generic-match.c:7247
  result:
    # of iterations (((unsigned long) _16 - (unsigned long) __nstart_18) + 7) / 8, bounded by 2305843009213693951
Creating dr for MEM[(struct _Deque_base *)this_2(D) + 96B]._M_impl._M_map
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Deque_base *)this_2(D) + 96B]
	Access function 0: 0
	Access function 1: 0

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:20, LOOPS:1, CONDITIONS:8, STMTS:265)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_5 })
  {
    <bb 2>:
    # DEBUG this => this_2(D)
    # .MEM_29 = VDEF <.MEM_1(D)>
    this_2(D)->D.44977._vptr.Module = &MEM[(void *)&_ZTV2VC + 16B];
    # VUSE <.MEM_29>
    _5 = this_2(D)->_lookahead_routing;
    if (_5 != 0)
      goto <bb 5>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 bb_5 })
  {
    <bb 3>:
    # VUSE <.MEM_29>
    _6 = this_2(D)->_route_set;
    if (_6 != 0B)
      goto <bb 4>;
    else
      goto <bb 5>;

  }
  bb_4 (preds = {bb_3 }, succs = {bb_5 })
  {
    <bb 4>:
    # DEBUG this => _6
    # DEBUG D#226 => &_6->_outputs
    # DEBUG this => D#226
    _7 = &MEM[(struct set *)_6]._M_t;
    # DEBUG this => _7
    # VUSE <.MEM_29>
    _8 = MEM[(struct _Rb_tree_node_base * *)_6 + 16B];
    # DEBUG D#14 => _7
    # DEBUG this => D#14
    # .MEM_30 = VDEF <.MEM_29>
    std::_Rb_tree<OutputSet::sSetElement, OutputSet::sSetElement, std::_Identity<OutputSet::sSetElement>, std::less<OutputSet::sSetElement>, std::allocator<OutputSet::sSetElement> >::_M_erase (_7, _8);
    # DEBUG D#225 => &MEM[(struct _Rb_tree *)_7]._M_impl
    # DEBUG this => D#225
    # DEBUG this => D#225
    # DEBUG this => D#225
    # .MEM_36 = VDEF <.MEM_30>
    MEM[(struct  &)_6] ={v} {CLOBBER};
    # .MEM_37 = VDEF <.MEM_36>
    operator delete (_6);

  }
  bb_5 (preds = {bb_3 bb_4 bb_2 }, succs = {bb_6 bb_12 })
  {
    <bb 5>:
    # .MEM_23 = PHI <.MEM_29(3), .MEM_37(4), .MEM_29(2)>
    # DEBUG D#227 => &this_2(D)->_buffer
    # DEBUG this => D#227
    # DEBUG D#170 => &D#227->D.44879
    # DEBUG this => D#170
    # DEBUG this => D#227
    # DEBUG D#20 => &D#227->D.44879._M_impl._M_finish
    # DEBUG this => NULL
    # DEBUG __x => D#20
    # DEBUG D#178 => MEM[(const struct iterator &)D#227 + 48]._M_cur
    # DEBUG D.49925 => D#178
    # DEBUG D#177 => MEM[(const struct iterator &)D#227 + 48]._M_first
    # DEBUG D.49926 => D#177
    # DEBUG D#176 => MEM[(const struct iterator &)D#227 + 48]._M_last
    # DEBUG D.49927 => D#176
    # DEBUG D#175 => MEM[(const struct iterator &)D#227 + 48]._M_node
    # DEBUG D.49928 => D#175
    # DEBUG this => D#227
    # DEBUG D#21 => &D#227->D.44879._M_impl._M_start
    # DEBUG this => NULL
    # DEBUG __x => D#21
    # DEBUG D#174 => MEM[(const struct iterator &)D#227 + 16]._M_cur
    # DEBUG D.49921 => D#174
    # DEBUG D#173 => MEM[(const struct iterator &)D#227 + 16]._M_first
    # DEBUG D.49922 => D#173
    # DEBUG D#172 => MEM[(const struct iterator &)D#227 + 16]._M_last
    # DEBUG D.49923 => D#172
    # DEBUG D#171 => MEM[(const struct iterator &)D#227 + 16]._M_node
    # DEBUG D.49924 => D#171
    # DEBUG D#22 => D#227
    # DEBUG this => D#22
    # DEBUG __first => D#23
    # DEBUG __last => D#24
    # DEBUG D.49909 => D#25
    # DEBUG D#268 => &MEM[(struct deque *)this_2(D) + 96B].D.44879
    # DEBUG this => D#268
    # VUSE <.MEM_23>
    _15 = MEM[(struct _Deque_base *)this_2(D) + 96B]._M_impl._M_map;
    if (_15 != 0B)
      goto <bb 6>;
    else
      goto <bb 12>;

  }
  bb_6 (preds = {bb_5 }, succs = {bb_11 bb_7 })
  {
    <bb 6>:
    # VUSE <.MEM_23>
    _16 = MEM[(struct _Deque_base *)this_2(D) + 96B]._M_impl._M_finish._M_node;
    _17 = _16 + 8;
    # VUSE <.MEM_23>
    __nstart_18 = MEM[(struct _Deque_base *)this_2(D) + 96B]._M_impl._M_start._M_node;
    # DEBUG D#147 => D#268
    # DEBUG __nstart => __nstart_18
    # DEBUG __nfinish => _17
    # DEBUG this => D#147
    # DEBUG __n => __nstart_18
    if (_17 <= __nstart_18)
      goto <bb 11>;
    else
      goto <bb 7>;

  }
  bb_7 (preds = {bb_6 }, succs = {bb_8 })
  {
    <bb 7>:

  }
  bb_10 (preds = {bb_8 }, succs = {bb_19 })
  {
    <bb 10>:

  }
  bb_19 (preds = {bb_10 }, succs = {bb_11 })
  {
    <bb 19>:
    # VUSE <.MEM_38>
    pretmp_33 = MEM[(struct _Deque_base *)this_2(D) + 96B]._M_impl._M_map;

  }
  bb_11 (preds = {bb_19 bb_6 }, succs = {bb_12 })
  {
    <bb 11>:
    # .MEM_67 = PHI <.MEM_38(19), .MEM_23(6)>
    # prephitmp_34 = PHI <pretmp_33(19), _15(6)>
    # DEBUG D#168 => D#268->_M_impl._M_map_size
    # DEBUG D#269 => MEM[(struct _Deque_base *)this_2(D) + 96B]._M_impl._M_map
    # DEBUG D#166 => D#268
    # DEBUG D#167 => D#168
    # DEBUG __p => D#269
    # DEBUG this => D#166
    # DEBUG __n => D#167
    # DEBUG D#165 => D#167
    # DEBUG D#164 => D#166
    # DEBUG D#163 => D#164
    # DEBUG this => D#163
    # DEBUG D#162 => D#163
    # DEBUG this => D#162
    # DEBUG this => NULL
    # DEBUG D.49843 => NULL
    # DEBUG this => NULL
    # DEBUG D#132 => &__map_alloc
    # DEBUG D#133 => D#165
    # DEBUG __p => D#269
    # DEBUG __a => D#132
    # DEBUG __n => D#133
    # DEBUG D#131 => D#133
    # DEBUG D#130 => D#132
    # DEBUG D#128 => D#130
    # DEBUG D#129 => D#131
    # DEBUG __p => D#269
    # DEBUG this => D#128
    # DEBUG D.52239 => D#129
    # .MEM_39 = VDEF <.MEM_67>
    operator delete (prephitmp_34);
    # DEBUG this => &__map_alloc
    # DEBUG this => &__map_alloc

  }
  bb_12 (preds = {bb_5 bb_11 }, succs = {bb_13 bb_14 })
  {
    <bb 12>:
    # .MEM_25 = PHI <.MEM_23(5), .MEM_39(11)>
    # DEBUG D#169 => &D#268->_M_impl
    # DEBUG this => D#169
    # DEBUG this => D#169
    # DEBUG this => D#169
    # .MEM_44 = VDEF <.MEM_25>
    MEM[(struct  &)this_2(D) + 96] ={v} {CLOBBER};
    # DEBUG D#267 => &this_2(D)->D.44977
    # DEBUG this => D#267
    # .MEM_45 = VDEF <.MEM_44>
    MEM[(struct Module *)this_2(D)]._vptr.Module = &MEM[(void *)&_ZTV6Module + 16B];
    # DEBUG D#125 => &D#267->_children
    # DEBUG this => D#125
    # DEBUG D#119 => &D#125->D.33291
    # DEBUG this => D#119
    # DEBUG D#122 => D#125->D.33291._M_impl._M_finish
    # DEBUG D#121 => D#125->D.33291._M_impl._M_start
    # DEBUG D#64 => D#121
    # DEBUG D#65 => D#122
    # DEBUG __first => D#64
    # DEBUG __last => D#65
    # DEBUG D.49554 => D#66
    # DEBUG D#63 => D#65
    # DEBUG D#62 => D#64
    # DEBUG D#60 => D#62
    # DEBUG D#61 => D#63
    # DEBUG __first => D#60
    # DEBUG __last => D#61
    # DEBUG D#59 => D#61
    # DEBUG D#58 => D#60
    # DEBUG D#56 => D#58
    # DEBUG D#57 => D#59
    # DEBUG D.49155 => D#56
    # DEBUG D.49154 => D#57
    # DEBUG D#120 => &D#125->D.33291
    # DEBUG this => D#120
    # DEBUG D#118 => D#120->_M_impl._M_end_of_storage
    # DEBUG D#117 => (long int) D#118
    # VUSE <.MEM_45>
    _3 = MEM[(struct _Vector_base *)this_2(D) + 72B]._M_impl._M_start;
    # DEBUG D#116 => (long int) _3
    # DEBUG D#115 => D#117 - D#116
    # DEBUG D#114 => D#115 /[ex] 8
    # DEBUG D#111 => D#120
    # DEBUG D#112 => (long unsigned int) D#114
    # DEBUG __p => _3
    # DEBUG this => D#111
    # DEBUG __n => D#112
    # DEBUG D#110 => D#112
    # DEBUG D#109 => D#111
    if (_3 != 0B)
      goto <bb 13>;
    else
      goto <bb 14>;

  }
  bb_13 (preds = {bb_12 }, succs = {bb_14 })
  {
    <bb 13>:
    # DEBUG D#108 => &D#109->_M_impl
    # DEBUG D#106 => D#108
    # DEBUG D#107 => D#110
    # DEBUG __p => _3
    # DEBUG __a => D#106
    # DEBUG __n => D#107
    # DEBUG D#105 => D#107
    # DEBUG D#104 => D#106
    # DEBUG D#102 => D#104
    # DEBUG D#103 => D#105
    # DEBUG __p => _3
    # DEBUG this => D#102
    # DEBUG D.52179 => D#103
    # .MEM_46 = VDEF <.MEM_45>
    operator delete (_3);

  }
  bb_14 (preds = {bb_12 bb_13 }, succs = {bb_15 bb_16 })
  {
    <bb 14>:
    # .MEM_26 = PHI <.MEM_45(12), .MEM_46(13)>
    # DEBUG D#113 => &D#120->_M_impl
    # DEBUG this => D#113
    # DEBUG this => D#113
    # DEBUG this => D#113
    # .MEM_51 = VDEF <.MEM_26>
    MEM[(struct  &)this_2(D) + 72] ={v} {CLOBBER};
    # DEBUG D#124 => &D#267->_fullname
    # DEBUG this => D#124
    # DEBUG this => D#124
    # DEBUG this => D#124
    # VUSE <.MEM_51>
    _11 = MEM[(char * *)this_2(D) + 40B];
    # DEBUG D#1 => D#124
    # DEBUG this => D#1
    # DEBUG this => D#124
    _12 = &MEM[(const struct basic_string *)this_2(D) + 40B].D.12341._M_local_buf;
    if (_11 != _12)
      goto <bb 15>;
    else
      goto <bb 16>;

  }
  bb_15 (preds = {bb_14 }, succs = {bb_16 })
  {
    <bb 15>:
    # DEBUG D#94 => MEM[(struct basic_string *)D#124].D.12341._M_allocated_capacity
    # DEBUG D#93 => D#94
    # DEBUG this => D#124
    # DEBUG __size => D#93
    # DEBUG D#92 => D#93
    # DEBUG D#1 => D#124
    # DEBUG this => D#1
    # DEBUG this => D#124
    # DEBUG D#91 => &MEM[(struct basic_string *)D#124]._M_dataplus
    # DEBUG D#89 => D#91
    # DEBUG D#90 => D#92 + 1
    # DEBUG __p => _11
    # DEBUG __a => D#89
    # DEBUG __n => D#90
    # DEBUG D#88 => D#90
    # DEBUG D#87 => D#89
    # DEBUG D#85 => D#87
    # DEBUG D#86 => D#88
    # DEBUG __p => _11
    # DEBUG this => D#85
    # DEBUG D.52192 => D#86
    # .MEM_52 = VDEF <.MEM_51>
    operator delete (_11);

  }
  bb_16 (preds = {bb_14 bb_15 }, succs = {bb_17 bb_18 })
  {
    <bb 16>:
    # .MEM_27 = PHI <.MEM_51(14), .MEM_52(15)>
    # DEBUG D#95 => &MEM[(struct basic_string *)D#124]._M_dataplus
    # DEBUG this => D#95
    # DEBUG this => D#95
    # DEBUG this => D#95
    # .MEM_56 = VDEF <.MEM_27>
    MEM[(struct  &)this_2(D) + 40] ={v} {CLOBBER};
    # DEBUG D#123 => &D#267->_name
    # DEBUG this => D#123
    # DEBUG this => D#123
    # DEBUG this => D#123
    # VUSE <.MEM_56>
    _13 = MEM[(char * *)this_2(D) + 8B];
    # DEBUG D#1 => D#123
    # DEBUG this => D#1
    # DEBUG this => D#123
    _14 = &MEM[(const struct basic_string *)this_2(D) + 8B].D.12341._M_local_buf;
    if (_13 != _14)
      goto <bb 17>;
    else
      goto <bb 18>;

  }
  bb_17 (preds = {bb_16 }, succs = {bb_18 })
  {
    <bb 17>:
    # DEBUG D#94 => MEM[(struct basic_string *)D#123].D.12341._M_allocated_capacity
    # DEBUG D#93 => D#94
    # DEBUG this => D#123
    # DEBUG __size => D#93
    # DEBUG D#92 => D#93
    # DEBUG D#1 => D#123
    # DEBUG this => D#1
    # DEBUG this => D#123
    # DEBUG D#91 => &MEM[(struct basic_string *)D#123]._M_dataplus
    # DEBUG D#89 => D#91
    # DEBUG D#90 => D#92 + 1
    # DEBUG __p => _13
    # DEBUG __a => D#89
    # DEBUG __n => D#90
    # DEBUG D#88 => D#90
    # DEBUG D#87 => D#89
    # DEBUG D#85 => D#87
    # DEBUG D#86 => D#88
    # DEBUG __p => _13
    # DEBUG this => D#85
    # DEBUG D.52207 => D#86
    # .MEM_57 = VDEF <.MEM_56>
    operator delete (_13);

  }
  bb_18 (preds = {bb_16 bb_17 }, succs = {bb_1 })
  {
    <bb 18>:
    # .MEM_28 = PHI <.MEM_56(16), .MEM_57(17)>
    # DEBUG D#95 => &MEM[(struct basic_string *)D#123]._M_dataplus
    # DEBUG this => D#95
    # DEBUG this => D#95
    # DEBUG this => D#95
    # .MEM_63 = VDEF <.MEM_28>
    MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
    # .MEM_4 = VDEF <.MEM_63>
    operator delete (this_2(D));
    # VUSE <.MEM_4>
    return;

  }
  loop_1 (header = 8, latch = 9, niter = (((unsigned long) _16 - (unsigned long) __nstart_18) + 7) / 8, upper_bound = 2305843009213693951)
  {
    bb_8 (preds = {bb_7 bb_9 }, succs = {bb_10 bb_9 })
    {
      <bb 8>:
      # __nstart_70 = PHI <__nstart_18(7), __nstart_21(9)>
      # .MEM_69 = PHI <.MEM_23(7), .MEM_38(9)>
      # DEBUG __n => __nstart_70
      # VUSE <.MEM_69>
      _20 = *__nstart_70;
      # DEBUG D#145 => D#146
      # DEBUG __p => _20
      # DEBUG this => D#145
      # DEBUG D#144 => D#145
      # DEBUG __size => 8
      # DEBUG D#143 => &D#144->_M_impl
      # DEBUG D#141 => D#143
      # DEBUG __p => _20
      # DEBUG __a => D#141
      # DEBUG __n => D#142
      # DEBUG D#140 => D#142
      # DEBUG D#139 => D#141
      # DEBUG D#137 => D#139
      # DEBUG D#138 => D#140
      # DEBUG __p => _20
      # DEBUG this => D#137
      # DEBUG D.52229 => D#138
      # .MEM_38 = VDEF <.MEM_69>
      operator delete (_20);
      __nstart_21 = __nstart_70 + 8;
      # DEBUG __n => __nstart_21
      # DEBUG __n => __nstart_21
      if (_17 <= __nstart_21)
        goto <bb 10>;
      else
        goto <bb 9>;

    }
    bb_9 (preds = {bb_8 }, succs = {bb_8 })
    {
      <bb 9>:
      goto <bb 8>;

    }
  }
}

Pass statistics:
----------------

virtual VC::~VC() (struct VCD.43951 * const thisD.44969)
{
  struct FlitD.32424 * * * __nstartD.52220;
  struct ModuleD.32543 * * _3;
  boolD.2757 _5;
  struct OutputSetD.31333 * _6;
  struct _Rep_typeD.31588 * _7;
  struct _Rb_tree_node_baseD.29379 * _8;
  charD.10 * const _11;
  const charD.10 * _12;
  charD.10 * const _13;
  const charD.10 * _14;
  struct FlitD.32424 * * * _15;
  struct FlitD.32424 * * * _16;
  struct FlitD.32424 * * * _17;
  struct FlitD.32424 * * _20;
  struct FlitD.32424 * * * pretmp_33;
  struct FlitD.32424 * * * prephitmp_34;

;;   basic block 2, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.52160 => this_2(D)
  # .MEM_29 = VDEF <.MEM_1(D)>
  this_2(D)->D.44977._vptr.ModuleD.33338 = &MEM[(voidD.45 *)&_ZTV2VCD.44992 + 16B];
  # VUSE <.MEM_29>
  _5 = this_2(D)->_lookahead_routingD.44899;
  if (_5 != 0)
    goto <bb 5>;
  else
    goto <bb 3>;
;;    succ:       3 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                5 [39.0%]  (TRUE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 611, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_29>
  # PT = nonlocal escaped 
  _6 = this_2(D)->_route_setD.44883;
  if (_6 != 0B)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 479, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.52162 => _6
  # DEBUG D#226ptD.0 => &_6->_outputsD.32418
  # DEBUG thisD.52163 => D#226ptD.0
  # PT = nonlocal escaped 
  _7 = &MEM[(struct setD.31362 *)_6]._M_tD.31591;
  # DEBUG thisD.52164 => _7
  # VUSE <.MEM_29>
  # PT = nonlocal escaped 
  _8 = MEM[(struct _Rb_tree_node_baseD.29379 * *)_6 + 16B];
  # DEBUG D#14ptD.0 => _7
  # DEBUG thisD.50629 => D#14ptD.0
  # .MEM_30 = VDEF <.MEM_29>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIN9OutputSet11sSetElementES1_St9_IdentityIS1_ESt4lessIS1_ESaIS1_EE8_M_eraseEPSt13_Rb_tree_nodeIS1_ED.31962 (_7, _8);
  # DEBUG D#225ptD.0 => &MEM[(struct _Rb_treeD.31590 *)_7]._M_implD.31669
  # DEBUG thisD.52165 => D#225ptD.0
  # DEBUG thisD.52166 => D#225ptD.0
  # DEBUG thisD.52167 => D#225ptD.0
  # .MEM_36 = VDEF <.MEM_30>
  MEM[(struct  &)_6] ={v} {CLOBBER};
  # .MEM_37 = VDEF <.MEM_36>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (_6);
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       3 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_23 = PHI <.MEM_29(3), .MEM_37(4), .MEM_29(2)>
  # DEBUG D#227ptD.0 => &this_2(D)->_bufferD.44881
  # DEBUG thisD.52161 => D#227ptD.0
  # DEBUG D#170ptD.0 => &D#227ptD.0->D.44879
  # DEBUG thisD.49919 => D#170ptD.0
  # DEBUG thisD.49916 => D#227ptD.0
  # DEBUG D#20ptD.0 => &D#227ptD.0->D.44879._M_implD.44330._M_finishD.44335
  # DEBUG thisD.49918 => NULL
  # DEBUG __xD.49917 => D#20ptD.0
  # DEBUG D#178ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 48]._M_curD.44229
  # DEBUG D.49925 => D#178ptD.0
  # DEBUG D#177ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 48]._M_firstD.44230
  # DEBUG D.49926 => D#177ptD.0
  # DEBUG D#176ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 48]._M_lastD.44231
  # DEBUG D.49927 => D#176ptD.0
  # DEBUG D#175ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 48]._M_nodeD.44232
  # DEBUG D.49928 => D#175ptD.0
  # DEBUG thisD.49913 => D#227ptD.0
  # DEBUG D#21ptD.0 => &D#227ptD.0->D.44879._M_implD.44330._M_startD.44334
  # DEBUG thisD.49915 => NULL
  # DEBUG __xD.49914 => D#21ptD.0
  # DEBUG D#174ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 16]._M_curD.44229
  # DEBUG D.49921 => D#174ptD.0
  # DEBUG D#173ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 16]._M_firstD.44230
  # DEBUG D.49922 => D#173ptD.0
  # DEBUG D#172ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 16]._M_lastD.44231
  # DEBUG D.49923 => D#172ptD.0
  # DEBUG D#171ptD.0 => MEM[(const struct iteratorD.44217 &)D#227ptD.0 + 16]._M_nodeD.44232
  # DEBUG D.49924 => D#171ptD.0
  # DEBUG D#22ptD.0 => D#227ptD.0
  # DEBUG thisD.49912 => D#22ptD.0
  # DEBUG __firstD.49911 => D#23ptD.0
  # DEBUG __lastD.49910 => D#24ptD.0
  # DEBUG D.49909 => D#25ptD.0
  # DEBUG D#268ptD.0 => &MEM[(struct dequeD.32466 *)this_2(D) + 96B].D.44879
  # DEBUG thisD.52214 => D#268ptD.0
  # VUSE <.MEM_23>
  # PT = nonlocal escaped 
  _15 = MEM[(struct _Deque_baseD.43964 *)this_2(D) + 96B]._M_implD.44330._M_mapD.44332;
  if (_15 != 0B)
    goto <bb 6>;
  else
    goto <bb 12>;
;;    succ:       6 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_23>
  # PT = nonlocal escaped 
  _16 = MEM[(struct _Deque_baseD.43964 *)this_2(D) + 96B]._M_implD.44330._M_finishD.44335._M_nodeD.44232;
  # PT = nonlocal escaped 
  _17 = _16 + 8;
  # VUSE <.MEM_23>
  # PT = nonlocal escaped 
  __nstart_18 = MEM[(struct _Deque_baseD.43964 *)this_2(D) + 96B]._M_implD.44330._M_startD.44334._M_nodeD.44232;
  # DEBUG D#147ptD.0 => D#268ptD.0
  # DEBUG __nstartD.52220 => __nstart_18
  # DEBUG __nfinishD.52219 => _17
  # DEBUG thisD.52218 => D#147ptD.0
  # DEBUG __nD.52221 => __nstart_18
  if (_17 <= __nstart_18)
    goto <bb 11>;
  else
    goto <bb 7>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __nstart_70 = PHI <__nstart_18(7), __nstart_21(9)>
  # .MEM_69 = PHI <.MEM_23(7), .MEM_38(9)>
  # DEBUG __nD.52221 => __nstart_70
  # VUSE <.MEM_69>
  # PT = nonlocal escaped 
  _20 = *__nstart_70;
  # DEBUG D#145ptD.0 => D#146ptD.0
  # DEBUG __pD.52223 => _20
  # DEBUG thisD.52222 => D#145ptD.0
  # DEBUG D#144ptD.0 => D#145ptD.0
  # DEBUG __sizeD.49700 => 8
  # DEBUG D#143ptD.0 => &D#144ptD.0->_M_implD.44330
  # DEBUG D#141ptD.0 => D#143ptD.0
  # DEBUG __pD.52227 => _20
  # DEBUG __aD.52225 => D#141ptD.0
  # DEBUG __nD.52226 => D#142ptD.0
  # DEBUG D#140ptD.0 => D#142ptD.0
  # DEBUG D#139ptD.0 => D#141ptD.0
  # DEBUG D#137ptD.0 => D#139ptD.0
  # DEBUG D#138ptD.0 => D#140ptD.0
  # DEBUG __pD.52230 => _20
  # DEBUG thisD.52228 => D#137ptD.0
  # DEBUG D.52229 => D#138ptD.0
  # .MEM_38 = VDEF <.MEM_69>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (_20);
  # PT = nonlocal escaped 
  __nstart_21 = __nstart_70 + 8;
  # DEBUG __nD.52221 => __nstart_21
  # DEBUG __nD.52221 => __nstart_21
  if (_17 <= __nstart_21)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 9, next block 19, flags: (NEW)
;;    pred:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       19 [100.0%]  (FALLTHRU)

;;   basic block 19, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 10, next block 11, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_38>
  pretmp_33 = MEM[(struct _Deque_baseD.43964 *)this_2(D) + 96B]._M_implD.44330._M_mapD.44332;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 19, next block 12, flags: (NEW, REACHABLE)
;;    pred:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_67 = PHI <.MEM_38(19), .MEM_23(6)>
  # PT = nonlocal escaped 
  # prephitmp_34 = PHI <pretmp_33(19), _15(6)>
  # DEBUG D#168ptD.0 => D#268ptD.0->_M_implD.44330._M_map_sizeD.44333
  # DEBUG D#269ptD.0 => MEM[(struct _Deque_baseD.43964 *)this_2(D) + 96B]._M_implD.44330._M_mapD.44332
  # DEBUG D#166ptD.0 => D#268ptD.0
  # DEBUG D#167ptD.0 => D#168ptD.0
  # DEBUG __pD.52233 => D#269ptD.0
  # DEBUG thisD.52231 => D#166ptD.0
  # DEBUG __nD.52232 => D#167ptD.0
  # DEBUG D#165ptD.0 => D#167ptD.0
  # DEBUG D#164ptD.0 => D#166ptD.0
  # DEBUG D#163ptD.0 => D#164ptD.0
  # DEBUG thisD.49862 => D#163ptD.0
  # DEBUG D#162ptD.0 => D#163ptD.0
  # DEBUG thisD.49850 => D#162ptD.0
  # DEBUG thisD.49842 => NULL
  # DEBUG D.49843 => NULL
  # DEBUG thisD.49840 => NULL
  # DEBUG D#132ptD.0 => &__map_allocD.52234
  # DEBUG D#133ptD.0 => D#165ptD.0
  # DEBUG __pD.52237 => D#269ptD.0
  # DEBUG __aD.52235 => D#132ptD.0
  # DEBUG __nD.52236 => D#133ptD.0
  # DEBUG D#131ptD.0 => D#133ptD.0
  # DEBUG D#130ptD.0 => D#132ptD.0
  # DEBUG D#128ptD.0 => D#130ptD.0
  # DEBUG D#129ptD.0 => D#131ptD.0
  # DEBUG __pD.52240 => D#269ptD.0
  # DEBUG thisD.52238 => D#128ptD.0
  # DEBUG D.52239 => D#129ptD.0
  # .MEM_39 = VDEF <.MEM_67>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (prephitmp_34);
  # DEBUG thisD.49876 => &__map_allocD.52234
  # DEBUG thisD.49855 => &__map_allocD.52234
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       5 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_25 = PHI <.MEM_23(5), .MEM_39(11)>
  # DEBUG D#169ptD.0 => &D#268ptD.0->_M_implD.44330
  # DEBUG thisD.52215 => D#169ptD.0
  # DEBUG thisD.52216 => D#169ptD.0
  # DEBUG thisD.52217 => D#169ptD.0
  # .MEM_44 = VDEF <.MEM_25>
  MEM[(struct  &)this_2(D) + 96] ={v} {CLOBBER};
  # DEBUG D#267ptD.0 => &this_2(D)->D.44977
  # DEBUG thisD.52168 => D#267ptD.0
  # .MEM_45 = VDEF <.MEM_44>
  MEM[(struct ModuleD.32543 *)this_2(D)]._vptr.ModuleD.33338 = &MEM[(voidD.45 *)&_ZTV6ModuleD.33343 + 16B];
  # DEBUG D#125ptD.0 => &D#267ptD.0->_childrenD.33293
  # DEBUG thisD.52169 => D#125ptD.0
  # DEBUG D#119ptD.0 => &D#125ptD.0->D.33291
  # DEBUG thisD.49557 => D#119ptD.0
  # DEBUG D#122ptD.0 => D#125ptD.0->D.33291._M_implD.32782._M_finishD.32785
  # DEBUG D#121ptD.0 => D#125ptD.0->D.33291._M_implD.32782._M_startD.32784
  # DEBUG D#64ptD.0 => D#121ptD.0
  # DEBUG D#65ptD.0 => D#122ptD.0
  # DEBUG __firstD.49556 => D#64ptD.0
  # DEBUG __lastD.49555 => D#65ptD.0
  # DEBUG D.49554 => D#66ptD.0
  # DEBUG D#63ptD.0 => D#65ptD.0
  # DEBUG D#62ptD.0 => D#64ptD.0
  # DEBUG D#60ptD.0 => D#62ptD.0
  # DEBUG D#61ptD.0 => D#63ptD.0
  # DEBUG __firstD.49166 => D#60ptD.0
  # DEBUG __lastD.49165 => D#61ptD.0
  # DEBUG D#59ptD.0 => D#61ptD.0
  # DEBUG D#58ptD.0 => D#60ptD.0
  # DEBUG D#56ptD.0 => D#58ptD.0
  # DEBUG D#57ptD.0 => D#59ptD.0
  # DEBUG D.49155 => D#56ptD.0
  # DEBUG D.49154 => D#57ptD.0
  # DEBUG D#120ptD.0 => &D#125ptD.0->D.33291
  # DEBUG thisD.52170 => D#120ptD.0
  # DEBUG D#118ptD.0 => D#120ptD.0->_M_implD.32782._M_end_of_storageD.32786
  # DEBUG D#117ptD.0 => (long intD.12) D#118ptD.0
  # VUSE <.MEM_45>
  # PT = nonlocal escaped 
  _3 = MEM[(struct _Vector_baseD.32549 *)this_2(D) + 72B]._M_implD.32782._M_startD.32784;
  # DEBUG D#116ptD.0 => (long intD.12) _3
  # DEBUG D#115ptD.0 => D#117ptD.0 - D#116ptD.0
  # DEBUG D#114ptD.0 => D#115ptD.0 /[ex] 8
  # DEBUG D#111ptD.0 => D#120ptD.0
  # DEBUG D#112ptD.0 => (long unsigned intD.14) D#114ptD.0
  # DEBUG __pD.52173 => _3
  # DEBUG thisD.52171 => D#111ptD.0
  # DEBUG __nD.52172 => D#112ptD.0
  # DEBUG D#110ptD.0 => D#112ptD.0
  # DEBUG D#109ptD.0 => D#111ptD.0
  if (_3 != 0B)
    goto <bb 13>;
  else
    goto <bb 14>;
;;    succ:       13 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 699, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#108ptD.0 => &D#109ptD.0->_M_implD.32782
  # DEBUG D#106ptD.0 => D#108ptD.0
  # DEBUG D#107ptD.0 => D#110ptD.0
  # DEBUG __pD.52177 => _3
  # DEBUG __aD.52175 => D#106ptD.0
  # DEBUG __nD.52176 => D#107ptD.0
  # DEBUG D#105ptD.0 => D#107ptD.0
  # DEBUG D#104ptD.0 => D#106ptD.0
  # DEBUG D#102ptD.0 => D#104ptD.0
  # DEBUG D#103ptD.0 => D#105ptD.0
  # DEBUG __pD.52180 => _3
  # DEBUG thisD.52178 => D#102ptD.0
  # DEBUG D.52179 => D#103ptD.0
  # .MEM_46 = VDEF <.MEM_45>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (_3);
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       12 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_26 = PHI <.MEM_45(12), .MEM_46(13)>
  # DEBUG D#113ptD.0 => &D#120ptD.0->_M_implD.32782
  # DEBUG thisD.52181 => D#113ptD.0
  # DEBUG thisD.52182 => D#113ptD.0
  # DEBUG thisD.52183 => D#113ptD.0
  # .MEM_51 = VDEF <.MEM_26>
  MEM[(struct  &)this_2(D) + 72] ={v} {CLOBBER};
  # DEBUG D#124ptD.0 => &D#267ptD.0->_fullnameD.32546
  # DEBUG thisD.52184 => D#124ptD.0
  # DEBUG thisD.52185 => D#124ptD.0
  # DEBUG thisD.52194 => D#124ptD.0
  # VUSE <.MEM_51>
  # PT = nonlocal escaped 
  _11 = MEM[(charD.10 * *)this_2(D) + 40B];
  # DEBUG D#1ptD.0 => D#124ptD.0
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.52195 => D#124ptD.0
  # PT = nonlocal 
  _12 = &MEM[(const struct basic_stringD.3646 *)this_2(D) + 40B].D.12341._M_local_bufD.12343;
  if (_11 != _12)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 699, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => MEM[(struct basic_stringD.3646 *)D#124ptD.0].D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.52187 => D#124ptD.0
  # DEBUG __sizeD.52186 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => D#124ptD.0
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => D#124ptD.0
  # DEBUG D#91ptD.0 => &MEM[(struct basic_stringD.3646 *)D#124ptD.0]._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.52190 => _11
  # DEBUG __aD.52188 => D#89ptD.0
  # DEBUG __nD.52189 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.52193 => _11
  # DEBUG thisD.52191 => D#85ptD.0
  # DEBUG D.52192 => D#86ptD.0
  # .MEM_52 = VDEF <.MEM_51>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (_11);
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       14 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_27 = PHI <.MEM_51(14), .MEM_52(15)>
  # DEBUG D#95ptD.0 => &MEM[(struct basic_stringD.3646 *)D#124ptD.0]._M_dataplusD.12321
  # DEBUG thisD.52196 => D#95ptD.0
  # DEBUG thisD.52197 => D#95ptD.0
  # DEBUG thisD.52198 => D#95ptD.0
  # .MEM_56 = VDEF <.MEM_27>
  MEM[(struct  &)this_2(D) + 40] ={v} {CLOBBER};
  # DEBUG D#123ptD.0 => &D#267ptD.0->_nameD.32545
  # DEBUG thisD.52199 => D#123ptD.0
  # DEBUG thisD.52200 => D#123ptD.0
  # DEBUG thisD.52209 => D#123ptD.0
  # VUSE <.MEM_56>
  # PT = nonlocal escaped 
  _13 = MEM[(charD.10 * *)this_2(D) + 8B];
  # DEBUG D#1ptD.0 => D#123ptD.0
  # DEBUG thisD.48709 => D#1ptD.0
  # DEBUG thisD.52210 => D#123ptD.0
  # PT = nonlocal 
  _14 = &MEM[(const struct basic_stringD.3646 *)this_2(D) + 8B].D.12341._M_local_bufD.12343;
  if (_13 != _14)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 785, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#94ptD.0 => MEM[(struct basic_stringD.3646 *)D#123ptD.0].D.12341._M_allocated_capacityD.12344
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.52202 => D#123ptD.0
  # DEBUG __sizeD.52201 => D#93ptD.0
  # DEBUG D#92ptD.0 => D#93ptD.0
  # DEBUG D#1ptD.0 => D#123ptD.0
  # DEBUG thisD.49390 => D#1ptD.0
  # DEBUG thisD.49391 => D#123ptD.0
  # DEBUG D#91ptD.0 => &MEM[(struct basic_stringD.3646 *)D#123ptD.0]._M_dataplusD.12321
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#92ptD.0 + 1
  # DEBUG __pD.52205 => _13
  # DEBUG __aD.52203 => D#89ptD.0
  # DEBUG __nD.52204 => D#90ptD.0
  # DEBUG D#88ptD.0 => D#90ptD.0
  # DEBUG D#87ptD.0 => D#89ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG D#86ptD.0 => D#88ptD.0
  # DEBUG __pD.52208 => _13
  # DEBUG thisD.52206 => D#85ptD.0
  # DEBUG D.52207 => D#86ptD.0
  # .MEM_57 = VDEF <.MEM_56>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (_13);
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 1002, maybe hot
;;    prev block 17, next block 1, flags: (NEW, REACHABLE)
;;    pred:       16 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_28 = PHI <.MEM_56(16), .MEM_57(17)>
  # DEBUG D#95ptD.0 => &MEM[(struct basic_stringD.3646 *)D#123ptD.0]._M_dataplusD.12321
  # DEBUG thisD.52211 => D#95ptD.0
  # DEBUG thisD.52212 => D#95ptD.0
  # DEBUG thisD.52213 => D#95ptD.0
  # .MEM_63 = VDEF <.MEM_28>
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  # .MEM_4 = VDEF <.MEM_63>
  # USE = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  # CLB = nonlocal { D.33343 D.44992 } (nonlocal, escaped)
  _ZdlPvD.2766 (this_2(D));
  # VUSE <.MEM_4>
  return;
;;    succ:       EXIT [100.0%] 

}


