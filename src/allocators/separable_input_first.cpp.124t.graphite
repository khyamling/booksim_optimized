
;; Function std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*> std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_get_insert_hint_unique_pos(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator, const key_type&) [with _Key = int; _Val = std::pair<const int, Allocator::sRequest>; _KeyOfValue = std::_Select1st<std::pair<const int, Allocator::sRequest> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, Allocator::sRequest> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator = std::_Rb_tree_const_iterator<std::pair<const int, Allocator::sRequest> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::key_type = int] (_ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_, funcdef_no=1812, decl_uid=39290, cgraph_uid=515, symbol_order=516)


Pass statistics:
----------------

std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*> std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_get_insert_hint_unique_pos(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator, const key_type&) [with _Key = int; _Val = std::pair<const int, Allocator::sRequest>; _KeyOfValue = std::_Select1st<std::pair<const int, Allocator::sRequest> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, Allocator::sRequest> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator = std::_Rb_tree_const_iterator<std::pair<const int, Allocator::sRequest> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::key_type = int] (struct _Rb_treeD.38972 * const thisD.39291, struct const_iteratorD.39278 __positionD.39292, const key_typeD.38998 & __kD.39293)
{
  struct _Rb_tree_node_baseD.6878 * SR.214D.42331;
  struct _Rb_tree_node_baseD.6878 * SR.213D.42330;
  struct _Rb_tree_node_baseD.6878 * SR.212D.42329;
  struct _Rb_tree_node_baseD.6878 * SR.211D.42328;
  struct _Rb_tree_node_baseD.6878 * SR.210D.42327;
  struct _Rb_tree_node_baseD.6878 * SR.209D.42326;
  struct pairD.7331 D.42324;
  boolD.2757 __compD.42303;
  struct _Rb_tree_node_baseD.6878 * const __j$_M_nodeD.42321;
  struct pairD.7331 D.42297;
  boolD.2757 __compD.42276;
  struct _Rb_tree_node_baseD.6878 * const __j$_M_nodeD.42294;
  struct pairD.7331 D.42270;
  boolD.2757 __compD.42249;
  struct _Rb_tree_node_baseD.6878 * const __j$_M_nodeD.42267;
  struct pairD.7331 D.40911;
  struct _Rb_tree_node_baseD.6878 * _5;
  struct _Rb_tree_node_baseD.6878 * _7;
  struct _Rb_tree_node_baseD.6878 * _9;
  const intD.9 pretmp_10;
  struct _Rb_tree_node_baseD.6878 * _13;
  struct _Rb_tree_node_baseD.6878 * _17;
  const struct _Rb_tree_node_baseD.6878 * _20;
  const intD.9 _26;
  const intD.9 _27;
  const intD.9 _28;
  const intD.9 _29;
  const intD.9 _30;
  const intD.9 _31;
  struct _Rb_tree_node_baseD.6878 * _32;
  struct _Rb_tree_node_baseD.6878 * _33;
  const size_typeD.39004 _34;
  struct _Rb_tree_node_baseD.6878 * _35;
  struct _Rb_tree_node_baseD.6878 * _36;
  struct _Rb_tree_node_baseD.6878 * _42;
  struct _Rb_tree_node_baseD.6878 * const _43;
  const intD.9 _45;
  const intD.9 _46;
  const intD.9 _47;
  struct _Rb_tree_node_baseD.6878 * _48;
  struct _Rb_tree_node_baseD.6878 * _49;
  struct _Rb_tree_node_baseD.6878 * _51;
  const intD.9 _56;
  struct _Rb_tree_node_baseD.6878 * const _57;
  const intD.9 _63;
  const intD.9 pretmp_64;
  struct _Rb_tree_node_baseD.6878 * _65;
  struct _Rb_tree_node_baseD.6878 * _66;
  struct _Rb_tree_node_baseD.6878 * const _68;
  const intD.9 _80;
  const intD.9 prephitmp_81;
  struct _Rb_tree_node_baseD.6878 * _82;
  struct _Rb_tree_node_baseD.6878 * _83;
  struct _Rb_tree_node_baseD.6878 * _85;
  const intD.9 prephitmp_97;
  const intD.9 pretmp_98;
  const intD.9 prephitmp_106;
  const intD.9 pretmp_108;
  const intD.9 prephitmp_109;
  const intD.9 pretmp_110;

;;   basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.41616 => &__positionD.39292
  # VUSE <.MEM_3(D)>
  # PT = nonlocal 
  _20 = __positionD.39292._M_nodeD.39859;
  # DEBUG thisD.41618 => NULL
  # DEBUG __xD.41617 => _20
  # DEBUG __posD.41722 => _20
  # DEBUG thisD.41614 => this_4(D)
  # PT = nonlocal 
  __j$_M_node_21 = &this_4(D)->_M_implD.39050._M_headerD.39205;
  if (_20 == __j$_M_node_21)
    goto <bb 3>;
  else
    goto <bb 16>;
;;    succ:       3 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 1500, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  _34 = MEM[(long unsigned intD.14 *)this_4(D) + 40B];
  # DEBUG D#28ptD.0 => this_4(D)
  # DEBUG thisD.41622 => D#28ptD.0
  if (_34 != 0)
    goto <bb 4>;
  else
    goto <bb 59>;
;;    succ:       4 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                59 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 750, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.41634 => this_4(D)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _5 = MEM[(struct _Rb_tree_node_baseD.6878 * &)this_4(D) + 32];
  # DEBUG __xD.41630 => _5
  # DEBUG __xD.41548 => _5
  # DEBUG thisD.41549 => _5
  # DEBUG D#29ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)_5]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#29ptD.0
  # DEBUG __xD.41632 => D#29ptD.0
  # DEBUG thisD.41631 => D#21ptD.0
  # DEBUG D#35ptD.0 => &MEM[(const struct pairD.36083 &)_5 + 32].firstD.39938
  # DEBUG D#45ptD.0 => &this_4(D)->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#45ptD.0
  # VUSE <.MEM_3(D)>
  _26 = MEM[(const intD.9 &)_5 + 32];
  # DEBUG D#6ptD.0 => D#35ptD.0
  # VUSE <.MEM_3(D)>
  _27 = MEM[(const intD.9 &)__k_6(D)];
  # DEBUG D#7ptD.0 => __k_6(D)
  # DEBUG thisD.41628 => D#5ptD.0
  # DEBUG __xD.41627 => D#6ptD.0
  # DEBUG __yD.41626 => D#7ptD.0
  if (_26 < _27)
    goto <bb 58>;
  else
    goto <bb 59>;
;;    succ:       58 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                59 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 4398, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # _57 = PHI <_48(8), _49(9)>
  # DEBUG __compD.42249 => D#112ptD.0 < _46
  # DEBUG __yD.42248 => __j$_M_node_77
  # DEBUG __xD.42247 => _57
  if (_57 == 0B)
    goto <bb 10>;
  else
    goto <bb 6>;
;;    succ:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 4002, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 4398, maybe hot
;;   Invalid sum of incoming frequencies 5027, should be 4398
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       60 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_77 = PHI <_42(60), _57(6)>
  # DEBUG __compD.42249 => 1
  # DEBUG __xD.42247 => __j$_M_node_77
  # DEBUG __yD.42248 => __j$_M_node_77
  # DEBUG __xD.41563 => __j$_M_node_77
  # DEBUG __xD.41455 => __j$_M_node_77
  # DEBUG thisD.41456 => __j$_M_node_77
  # DEBUG D#22ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)__j$_M_node_77]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#22ptD.0
  # DEBUG __xD.41565 => D#22ptD.0
  # DEBUG thisD.41564 => D#21ptD.0
  # DEBUG D#30ptD.0 => &MEM[(const struct pairD.36083 &)__j$_M_node_77 + 32].firstD.39938
  # DEBUG D#34ptD.0 => &this_4(D)->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#34ptD.0
  # DEBUG D#112ptD.0 => MEM[(const intD.9 &)__k_6(D)]
  # DEBUG D#6ptD.0 => __k_6(D)
  # VUSE <.MEM_3(D)>
  _46 = MEM[(const intD.9 &)__j$_M_node_77 + 32];
  # DEBUG D#7ptD.0 => D#30ptD.0
  # DEBUG thisD.42263 => D#5ptD.0
  # DEBUG __xD.42264 => D#6ptD.0
  # DEBUG __yD.42265 => D#7ptD.0
  # DEBUG __compD.42249 => NULL
  if (_46 > pretmp_108)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 2199, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _48 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__j$_M_node_77 + 16B];
  # DEBUG D#19ptD.0 => __j$_M_node_77
  # DEBUG __xD.41568 => D#19ptD.0
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 2199, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       7 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _49 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__j$_M_node_77 + 24B];
  # DEBUG D#20ptD.0 => __j$_M_node_77
  # DEBUG __xD.41571 => D#20ptD.0
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 334, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # _47 = PHI <_46(5)>
  # PT = nonlocal escaped 
  # __j$_M_node_55 = PHI <__j$_M_node_77(5)>
  # DEBUG thisD.42262 => &__jD.42250
  # DEBUG __xD.42261 => __j$_M_node_55
  # DEBUG __j$_M_nodeD.42267 => __j$_M_node_55
  if (_47 > pretmp_108)
    goto <bb 11>;
  else
    goto <bb 13>;
;;    succ:       11 [34.8%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [65.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 218, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [34.8%]  (TRUE_VALUE,EXECUTABLE)
;;                59 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_133 = PHI <__j$_M_node_55(10), _20(59)>
  # DEBUG thisD.42262 => &__jD.42250
  # DEBUG __xD.42261 => __j$_M_node_133
  # DEBUG __j$_M_nodeD.42267 => __j$_M_node_133
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _51 = MEM[(struct _Rb_tree_node_baseD.6878 * *)this_4(D) + 24B];
  # DEBUG D#11ptD.0 => this_4(D)
  # DEBUG thisD.41579 => D#11ptD.0
  # DEBUG thisD.41364 => NULL
  # DEBUG __xD.41363 => _51
  # DEBUG thisD.41575 => &__jD.42250
  # DEBUG __xD.41576 => NULL
  if (_51 == __j$_M_node_133)
    goto <bb 15>;
  else
    goto <bb 12>;
;;    succ:       15 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 195, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.42257 => &__jD.42250
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  __j$_M_node_53 = _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_baseD.6927 (__j$_M_node_133);
  # DEBUG __j$_M_nodeD.42267 => __j$_M_node_53
  # VUSE <.MEM_3(D)>
  pretmp_110 = MEM[(const intD.9 &)__k_6(D)];
  # VUSE <.MEM_3(D)>
  pretmp_98 = MEM[(const intD.9 &)__j$_M_node_53 + 32];
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 413, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       10 [65.2%]  (FALSE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_54 = PHI <__j$_M_node_55(10), __j$_M_node_53(12)>
  # PT = nonlocal escaped 
  # __j$_M_node_139 = PHI <__j$_M_node_55(10), __j$_M_node_133(12)>
  # prephitmp_109 = PHI <pretmp_108(10), pretmp_110(12)>
  # prephitmp_97 = PHI <_47(10), pretmp_98(12)>
  # DEBUG __j$_M_nodeD.42267 => __j$_M_node_54
  # DEBUG __xD.41593 => __j$_M_node_54
  # DEBUG __xD.41548 => __j$_M_node_54
  # DEBUG thisD.41549 => __j$_M_node_54
  # DEBUG D#29ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)__j$_M_node_54]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#29ptD.0
  # DEBUG __xD.41595 => D#29ptD.0
  # DEBUG thisD.41594 => D#21ptD.0
  # DEBUG D#31ptD.0 => &MEM[(const struct pairD.36083 &)__j$_M_node_54 + 32].firstD.39938
  # DEBUG D#33ptD.0 => &this_4(D)->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#33ptD.0
  # DEBUG D#6ptD.0 => D#31ptD.0
  # DEBUG D#7ptD.0 => __k_6(D)
  # DEBUG thisD.41591 => D#5ptD.0
  # DEBUG __xD.41590 => D#6ptD.0
  # DEBUG __yD.41589 => D#7ptD.0
  if (prephitmp_97 < prephitmp_109)
    goto <bb 15>;
  else
    goto <bb 14>;
;;    succ:       15 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 252, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 435, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       11 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped null 
  # SR.209_116 = PHI <0B(11), 0B(13), __j$_M_node_54(14)>
  # PT = nonlocal escaped null 
  # SR.210_115 = PHI <_51(11), __j$_M_node_139(13), 0B(14)>
  # DEBUG D#32ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.42267 => D#32ptD.0
  # .MEM_104 = VDEF <.MEM_3(D)>
  MEM[(struct pairD.7331 *)&D.40911] = SR.209_116;
  # .MEM_103 = VDEF <.MEM_104>
  MEM[(struct pairD.7331 *)&D.40911 + 8B] = SR.210_115;
  goto <bb 57>;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 8500, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       2 [85.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.41647 => _20
  # DEBUG __xD.41548 => _20
  # DEBUG thisD.41549 => _20
  # DEBUG D#29ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)_20]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#29ptD.0
  # DEBUG __xD.41649 => D#29ptD.0
  # DEBUG thisD.41648 => D#21ptD.0
  # DEBUG D#36ptD.0 => &MEM[(const struct pairD.36083 &)_20 + 32].firstD.39938
  # DEBUG D#47ptD.0 => &this_4(D)->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#47ptD.0
  # VUSE <.MEM_3(D)>
  _28 = MEM[(const intD.9 &)__k_6(D)];
  # DEBUG D#6ptD.0 => __k_6(D)
  # VUSE <.MEM_3(D)>
  _29 = MEM[(const intD.9 &)_20 + 32];
  # DEBUG D#7ptD.0 => D#36ptD.0
  # DEBUG thisD.41645 => D#5ptD.0
  # DEBUG __xD.41644 => D#6ptD.0
  # DEBUG __yD.41643 => D#7ptD.0
  if (_28 < _29)
    goto <bb 17>;
  else
    goto <bb 36>;
;;    succ:       17 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 4250, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __beforeD.41725 => _20
  # DEBUG thisD.41651 => this_4(D)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _9 = MEM[(struct _Rb_tree_node_baseD.6878 * &)this_4(D) + 24];
  if (_9 == _20)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 431, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [10.1%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.41658 => this_4(D)
  # DEBUG thisD.41656 => this_4(D)
  # DEBUG thisD.41653 => &D.40437
  # DEBUG __aD.41654 => NULL
  # DEBUG __bD.41655 => NULL
  # .MEM_41 = VDEF <.MEM_3(D)>
  MEM[(struct pairD.7331 *)&D.40911] = _9;
  # .MEM_40 = VDEF <.MEM_41>
  MEM[(struct pairD.7331 *)&D.40911 + 8B] = _9;
  goto <bb 57>;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 3819, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       17 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.41670 => &__beforeD.40435
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _35 = _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_baseD.6927 (_20);
  # DEBUG __beforeD.41725 => _35
  # DEBUG __xD.41666 => _35
  # DEBUG __xD.41548 => _35
  # DEBUG thisD.41549 => _35
  # DEBUG D#29ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)_35]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#29ptD.0
  # DEBUG __xD.41668 => D#29ptD.0
  # DEBUG thisD.41667 => D#21ptD.0
  # DEBUG D#37ptD.0 => &MEM[(const struct pairD.36083 &)_35 + 32].firstD.39938
  # DEBUG D#44ptD.0 => &this_4(D)->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#44ptD.0
  # VUSE <.MEM_3(D)>
  _30 = MEM[(const intD.9 &)_35 + 32];
  # DEBUG D#6ptD.0 => D#37ptD.0
  # DEBUG D#7ptD.0 => __k_6(D)
  # DEBUG thisD.41664 => D#5ptD.0
  # DEBUG __xD.41663 => D#6ptD.0
  # DEBUG __yD.41662 => D#7ptD.0
  if (_28 > _30)
    goto <bb 20>;
  else
    goto <bb 23>;
;;    succ:       20 [79.3%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [20.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 3028, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       19 [79.3%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _32 = MEM[(struct _Rb_tree_node_baseD.6878 * *)_35 + 24B];
  # DEBUG D#20ptD.0 => _35
  # DEBUG __xD.41673 => D#20ptD.0
  if (_32 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;
;;    succ:       21 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 454, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.41675 => &D.40439
  # DEBUG __aD.41676 => &D.40438
  # DEBUG __bD.41677 => &__beforeD.40435._M_nodeD.39911
  # .MEM_15 = VDEF <.MEM_3(D)>
  MEM[(struct pairD.7331 *)&D.40911] = 0B;
  # .MEM_14 = VDEF <.MEM_15>
  MEM[(struct pairD.7331 *)&D.40911 + 8B] = _35;
  goto <bb 57>;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 2574, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       20 [85.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.41678 => &D.40440
  # DEBUG __aD.41679 => &__posD.40429._M_nodeD.39911
  # DEBUG __bD.41680 => &__posD.40429._M_nodeD.39911
  # .MEM_12 = VDEF <.MEM_3(D)>
  MEM[(struct pairD.7331 *)&D.40911] = _20;
  # .MEM_11 = VDEF <.MEM_12>
  MEM[(struct pairD.7331 *)&D.40911 + 8B] = _20;
  goto <bb 57>;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 791, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       19 [20.7%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.42271 => this_4(D)
  # DEBUG __kD.42272 => __k_6(D)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _7 = MEM[(struct _Rb_tree_node_baseD.6878 * *)this_4(D) + 16B];
  # DEBUG D#18ptD.0 => this_4(D)
  # DEBUG thisD.41555 => D#18ptD.0
  # DEBUG __xD.42274 => NULL
  # DEBUG thisD.42293 => this_4(D)
  # DEBUG __yD.42275 => NULL
  # DEBUG __compD.42276 => 1
  # DEBUG __compD.42276 => 1
  # DEBUG __yD.42275 => __j$_M_node_21
  # DEBUG __xD.42274 => _7
  if (_7 == 0B)
    goto <bb 31>;
  else
    goto <bb 26>;
;;    succ:       31 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 1, count 0, freq 7998, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       28 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                29 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # _43 = PHI <_65(28), _66(29)>
  # DEBUG __compD.42276 => _28 < _63
  # DEBUG __yD.42275 => __j$_M_node_157
  # DEBUG __xD.42274 => _43
  if (_43 == 0B)
    goto <bb 30>;
  else
    goto <bb 25>;
;;    succ:       30 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 7278, maybe hot
;;    prev block 24, next block 26, flags: (NEW)
;;    pred:       24 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 27>;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 720, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 1, count 0, freq 7997, maybe hot
;;    prev block 26, next block 28, flags: (NEW)
;;    pred:       26 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                25 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_157 = PHI <_7(26), _43(25)>
  # DEBUG __compD.42276 => 1
  # DEBUG __xD.42274 => __j$_M_node_157
  # DEBUG __yD.42275 => __j$_M_node_157
  # DEBUG __xD.41563 => __j$_M_node_157
  # DEBUG __xD.41455 => __j$_M_node_157
  # DEBUG thisD.41456 => __j$_M_node_157
  # DEBUG D#22ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)__j$_M_node_157]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#22ptD.0
  # DEBUG __xD.41565 => D#22ptD.0
  # DEBUG thisD.41564 => D#21ptD.0
  # DEBUG D#30ptD.0 => &MEM[(const struct pairD.36083 &)__j$_M_node_157 + 32].firstD.39938
  # DEBUG D#34ptD.0 => &this_4(D)->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#34ptD.0
  # DEBUG D#6ptD.0 => __k_6(D)
  # VUSE <.MEM_3(D)>
  _63 = MEM[(const intD.9 &)__j$_M_node_157 + 32];
  # DEBUG D#7ptD.0 => D#30ptD.0
  # DEBUG thisD.42290 => D#5ptD.0
  # DEBUG __xD.42291 => D#6ptD.0
  # DEBUG __yD.42292 => D#7ptD.0
  # DEBUG __compD.42276 => NULL
  if (_28 < _63)
    goto <bb 28>;
  else
    goto <bb 29>;
;;    succ:       28 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 1, count 0, freq 3999, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       27 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _65 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__j$_M_node_157 + 16B];
  # DEBUG D#19ptD.0 => __j$_M_node_157
  # DEBUG __xD.41568 => D#19ptD.0
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 1, count 0, freq 3999, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       27 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _66 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__j$_M_node_157 + 24B];
  # DEBUG D#20ptD.0 => __j$_M_node_157
  # DEBUG __xD.41571 => D#20ptD.0
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 720, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # _45 = PHI <_63(24)>
  # PT = nonlocal escaped 
  # __j$_M_node_72 = PHI <__j$_M_node_157(24)>
  # DEBUG thisD.42289 => &__jD.42277
  # DEBUG __xD.42288 => __j$_M_node_72
  # DEBUG __j$_M_nodeD.42294 => __j$_M_node_72
  if (_28 < _45)
    goto <bb 31>;
  else
    goto <bb 33>;
;;    succ:       31 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [55.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 395, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       30 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_153 = PHI <__j$_M_node_72(30), __j$_M_node_21(23)>
  # DEBUG thisD.42289 => &__jD.42277
  # DEBUG __xD.42288 => __j$_M_node_153
  # DEBUG __j$_M_nodeD.42294 => __j$_M_node_153
  # DEBUG D#11ptD.0 => this_4(D)
  # DEBUG thisD.41579 => D#11ptD.0
  # DEBUG thisD.41364 => NULL
  # DEBUG __xD.41363 => _9
  # DEBUG thisD.41575 => &__jD.42277
  # DEBUG __xD.41576 => NULL
  if (_9 == __j$_M_node_153)
    goto <bb 35>;
  else
    goto <bb 32>;
;;    succ:       35 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 355, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       31 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.42284 => &__jD.42277
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  __j$_M_node_70 = _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_baseD.6927 (__j$_M_node_153);
  # DEBUG __j$_M_nodeD.42294 => __j$_M_node_70
  # VUSE <.MEM_3(D)>
  pretmp_10 = MEM[(const intD.9 &)__j$_M_node_70 + 32];
;;    succ:       33 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 751, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       30 [55.0%]  (FALSE_VALUE,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_71 = PHI <__j$_M_node_72(30), __j$_M_node_70(32)>
  # PT = nonlocal escaped 
  # __j$_M_node_152 = PHI <__j$_M_node_72(30), __j$_M_node_153(32)>
  # prephitmp_106 = PHI <_45(30), pretmp_10(32)>
  # DEBUG __j$_M_nodeD.42294 => __j$_M_node_71
  # DEBUG __xD.41593 => __j$_M_node_71
  # DEBUG __xD.41548 => __j$_M_node_71
  # DEBUG thisD.41549 => __j$_M_node_71
  # DEBUG D#29ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)__j$_M_node_71]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#29ptD.0
  # DEBUG __xD.41595 => D#29ptD.0
  # DEBUG thisD.41594 => D#21ptD.0
  # DEBUG D#31ptD.0 => &MEM[(const struct pairD.36083 &)__j$_M_node_71 + 32].firstD.39938
  # DEBUG D#33ptD.0 => &this_4(D)->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#33ptD.0
  # DEBUG D#6ptD.0 => D#31ptD.0
  # DEBUG D#7ptD.0 => __k_6(D)
  # DEBUG thisD.41591 => D#5ptD.0
  # DEBUG __xD.41590 => D#6ptD.0
  # DEBUG __yD.41589 => D#7ptD.0
  if (_28 > prephitmp_106)
    goto <bb 35>;
  else
    goto <bb 34>;
;;    succ:       35 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 458, maybe hot
;;    prev block 33, next block 35, flags: (NEW)
;;    pred:       33 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 791, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       31 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped null 
  # SR.211_114 = PHI <0B(31), 0B(33), __j$_M_node_71(34)>
  # PT = nonlocal escaped null 
  # SR.212_113 = PHI <_9(31), __j$_M_node_152(33), 0B(34)>
  # DEBUG D#32ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.42294 => D#32ptD.0
  # .MEM_96 = VDEF <.MEM_3(D)>
  MEM[(struct pairD.7331 *)&D.40911] = SR.211_114;
  # .MEM_90 = VDEF <.MEM_96>
  MEM[(struct pairD.7331 *)&D.40911 + 8B] = SR.212_113;
  goto <bb 57>;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 4250, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       16 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.41687 => _20
  # DEBUG __xD.41548 => _20
  # DEBUG thisD.41549 => _20
  # DEBUG D#29ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)_20]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#29ptD.0
  # DEBUG __xD.41689 => D#29ptD.0
  # DEBUG thisD.41688 => D#21ptD.0
  # DEBUG D#38ptD.0 => &MEM[(const struct pairD.36083 &)_20 + 32].firstD.39938
  # DEBUG D#46ptD.0 => &this_4(D)->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#46ptD.0
  # DEBUG D#6ptD.0 => D#38ptD.0
  # DEBUG D#7ptD.0 => __k_6(D)
  # DEBUG thisD.41685 => D#5ptD.0
  # DEBUG __xD.41684 => D#6ptD.0
  # DEBUG __yD.41683 => D#7ptD.0
  if (_28 > _29)
    goto <bb 37>;
  else
    goto <bb 56>;
;;    succ:       37 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                56 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 2125, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       36 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __afterD.41732 => _20
  # DEBUG thisD.41691 => this_4(D)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _17 = MEM[(struct _Rb_tree_node_baseD.6878 * &)this_4(D) + 32];
  if (_17 == _20)
    goto <bb 38>;
  else
    goto <bb 39>;
;;    succ:       38 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 215, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       37 [10.1%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.41696 => this_4(D)
  # DEBUG thisD.41693 => &D.40445
  # DEBUG __aD.41694 => &D.40444
  # DEBUG __bD.41695 => NULL
  # .MEM_38 = VDEF <.MEM_3(D)>
  MEM[(struct pairD.7331 *)&D.40911] = 0B;
  # .MEM_8 = VDEF <.MEM_38>
  MEM[(struct pairD.7331 *)&D.40911 + 8B] = _17;
  goto <bb 57>;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 1910, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       37 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.41708 => &__afterD.40442
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _36 = _ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_baseD.6923 (_20);
  # DEBUG __afterD.41732 => _36
  # DEBUG __xD.41704 => _36
  # DEBUG __xD.41548 => _36
  # DEBUG thisD.41549 => _36
  # DEBUG D#29ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)_36]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#29ptD.0
  # DEBUG __xD.41706 => D#29ptD.0
  # DEBUG thisD.41705 => D#21ptD.0
  # DEBUG D#39ptD.0 => &MEM[(const struct pairD.36083 &)_36 + 32].firstD.39938
  # DEBUG D#43ptD.0 => &this_4(D)->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#43ptD.0
  # DEBUG D#6ptD.0 => __k_6(D)
  # VUSE <.MEM_3(D)>
  _31 = MEM[(const intD.9 &)_36 + 32];
  # DEBUG D#7ptD.0 => D#39ptD.0
  # DEBUG thisD.41702 => D#5ptD.0
  # DEBUG __xD.41701 => D#6ptD.0
  # DEBUG __yD.41700 => D#7ptD.0
  if (_28 < _31)
    goto <bb 40>;
  else
    goto <bb 43>;
;;    succ:       40 [79.3%]  (TRUE_VALUE,EXECUTABLE)
;;                43 [20.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 0, count 0, freq 1514, maybe hot
;;    prev block 39, next block 41, flags: (NEW, REACHABLE)
;;    pred:       39 [79.3%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _33 = MEM[(struct _Rb_tree_node_baseD.6878 * *)_20 + 24B];
  # DEBUG D#20ptD.0 => _20
  # DEBUG __xD.41711 => D#20ptD.0
  if (_33 == 0B)
    goto <bb 41>;
  else
    goto <bb 42>;
;;    succ:       41 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                42 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 41, loop depth 0, count 0, freq 227, maybe hot
;;    prev block 40, next block 42, flags: (NEW, REACHABLE)
;;    pred:       40 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.41713 => &D.40447
  # DEBUG __aD.41714 => &D.40446
  # DEBUG __bD.41715 => &__posD.40429._M_nodeD.39911
  # .MEM_37 = VDEF <.MEM_3(D)>
  MEM[(struct pairD.7331 *)&D.40911] = 0B;
  # .MEM_25 = VDEF <.MEM_37>
  MEM[(struct pairD.7331 *)&D.40911 + 8B] = _20;
  goto <bb 57>;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 1287, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       40 [85.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.41716 => &D.40448
  # DEBUG __aD.41717 => &__afterD.40442._M_nodeD.39911
  # DEBUG __bD.41718 => &__afterD.40442._M_nodeD.39911
  # .MEM_18 = VDEF <.MEM_3(D)>
  MEM[(struct pairD.7331 *)&D.40911] = _36;
  # .MEM_19 = VDEF <.MEM_18>
  MEM[(struct pairD.7331 *)&D.40911 + 8B] = _36;
  goto <bb 57>;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 43, loop depth 0, count 0, freq 395, maybe hot
;;    prev block 42, next block 44, flags: (NEW, REACHABLE)
;;    pred:       39 [20.7%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.42298 => this_4(D)
  # DEBUG __kD.42299 => __k_6(D)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _13 = MEM[(struct _Rb_tree_node_baseD.6878 * *)this_4(D) + 16B];
  # DEBUG D#18ptD.0 => this_4(D)
  # DEBUG thisD.41555 => D#18ptD.0
  # DEBUG __xD.42301 => NULL
  # DEBUG thisD.42320 => this_4(D)
  # DEBUG __yD.42302 => NULL
  # DEBUG __compD.42303 => 1
  # DEBUG __compD.42303 => 1
  # DEBUG __yD.42302 => __j$_M_node_21
  # DEBUG __xD.42301 => _13
  if (_13 == 0B)
    goto <bb 51>;
  else
    goto <bb 46>;
;;    succ:       51 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                46 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 44, loop depth 1, count 0, freq 3999, maybe hot
;;    prev block 43, next block 45, flags: (NEW, REACHABLE)
;;    pred:       48 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                49 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # _68 = PHI <_82(48), _83(49)>
  # DEBUG __compD.42303 => _28 < _80
  # DEBUG __yD.42302 => __j$_M_node_59
  # DEBUG __xD.42301 => _68
  if (_68 == 0B)
    goto <bb 50>;
  else
    goto <bb 45>;
;;    succ:       50 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                45 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 45, loop depth 1, count 0, freq 3639, maybe hot
;;    prev block 44, next block 46, flags: (NEW)
;;    pred:       44 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 47>;
;;    succ:       47 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 46, loop depth 0, count 0, freq 359, maybe hot
;;    prev block 45, next block 47, flags: (NEW, REACHABLE)
;;    pred:       43 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       47 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 47, loop depth 1, count 0, freq 3999, maybe hot
;;    prev block 46, next block 48, flags: (NEW)
;;    pred:       46 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                45 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_59 = PHI <_13(46), _68(45)>
  # DEBUG __compD.42303 => 1
  # DEBUG __xD.42301 => __j$_M_node_59
  # DEBUG __yD.42302 => __j$_M_node_59
  # DEBUG __xD.41563 => __j$_M_node_59
  # DEBUG __xD.41455 => __j$_M_node_59
  # DEBUG thisD.41456 => __j$_M_node_59
  # DEBUG D#22ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)__j$_M_node_59]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#22ptD.0
  # DEBUG __xD.41565 => D#22ptD.0
  # DEBUG thisD.41564 => D#21ptD.0
  # DEBUG D#30ptD.0 => &MEM[(const struct pairD.36083 &)__j$_M_node_59 + 32].firstD.39938
  # DEBUG D#34ptD.0 => &this_4(D)->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#34ptD.0
  # DEBUG D#6ptD.0 => __k_6(D)
  # VUSE <.MEM_3(D)>
  _80 = MEM[(const intD.9 &)__j$_M_node_59 + 32];
  # DEBUG D#7ptD.0 => D#30ptD.0
  # DEBUG thisD.42317 => D#5ptD.0
  # DEBUG __xD.42318 => D#6ptD.0
  # DEBUG __yD.42319 => D#7ptD.0
  # DEBUG __compD.42303 => NULL
  if (_28 < _80)
    goto <bb 48>;
  else
    goto <bb 49>;
;;    succ:       48 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                49 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 48, loop depth 1, count 0, freq 1999, maybe hot
;;    prev block 47, next block 49, flags: (NEW, REACHABLE)
;;    pred:       47 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _82 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__j$_M_node_59 + 16B];
  # DEBUG D#19ptD.0 => __j$_M_node_59
  # DEBUG __xD.41568 => D#19ptD.0
  goto <bb 44>;
;;    succ:       44 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 49, loop depth 1, count 0, freq 1999, maybe hot
;;    prev block 48, next block 50, flags: (NEW, REACHABLE)
;;    pred:       47 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _83 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__j$_M_node_59 + 24B];
  # DEBUG D#20ptD.0 => __j$_M_node_59
  # DEBUG __xD.41571 => D#20ptD.0
  goto <bb 44>;
;;    succ:       44 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 50, loop depth 0, count 0, freq 359, maybe hot
;;    prev block 49, next block 51, flags: (NEW, REACHABLE)
;;    pred:       44 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_107 = PHI <__j$_M_node_59(44)>
  # _56 = PHI <_80(44)>
  # DEBUG thisD.42316 => &__jD.42304
  # DEBUG __xD.42315 => __j$_M_node_107
  # DEBUG __j$_M_nodeD.42321 => __j$_M_node_107
  if (_28 < _56)
    goto <bb 51>;
  else
    goto <bb 53>;
;;    succ:       51 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                53 [55.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 51, loop depth 0, count 0, freq 198, maybe hot
;;    prev block 50, next block 52, flags: (NEW, REACHABLE)
;;    pred:       50 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                43 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_156 = PHI <__j$_M_node_107(50), __j$_M_node_21(43)>
  # DEBUG thisD.42316 => &__jD.42304
  # DEBUG __xD.42315 => __j$_M_node_156
  # DEBUG __j$_M_nodeD.42321 => __j$_M_node_156
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _85 = MEM[(struct _Rb_tree_node_baseD.6878 * *)this_4(D) + 24B];
  # DEBUG D#11ptD.0 => this_4(D)
  # DEBUG thisD.41579 => D#11ptD.0
  # DEBUG thisD.41364 => NULL
  # DEBUG __xD.41363 => _85
  # DEBUG thisD.41575 => &__jD.42304
  # DEBUG __xD.41576 => NULL
  if (_85 == __j$_M_node_156)
    goto <bb 55>;
  else
    goto <bb 52>;
;;    succ:       55 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                52 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 52, loop depth 0, count 0, freq 178, maybe hot
;;    prev block 51, next block 53, flags: (NEW, REACHABLE)
;;    pred:       51 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.42311 => &__jD.42304
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  __j$_M_node_87 = _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_baseD.6927 (__j$_M_node_156);
  # DEBUG __j$_M_nodeD.42321 => __j$_M_node_87
  # VUSE <.MEM_3(D)>
  pretmp_64 = MEM[(const intD.9 &)__j$_M_node_87 + 32];
;;    succ:       53 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 53, loop depth 0, count 0, freq 375, maybe hot
;;    prev block 52, next block 54, flags: (NEW, REACHABLE)
;;    pred:       50 [55.0%]  (FALSE_VALUE,EXECUTABLE)
;;                52 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_88 = PHI <__j$_M_node_107(50), __j$_M_node_87(52)>
  # PT = nonlocal escaped 
  # __j$_M_node_154 = PHI <__j$_M_node_107(50), __j$_M_node_156(52)>
  # prephitmp_81 = PHI <_56(50), pretmp_64(52)>
  # DEBUG __j$_M_nodeD.42321 => __j$_M_node_88
  # DEBUG __xD.41593 => __j$_M_node_88
  # DEBUG __xD.41548 => __j$_M_node_88
  # DEBUG thisD.41549 => __j$_M_node_88
  # DEBUG D#29ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)__j$_M_node_88]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#29ptD.0
  # DEBUG __xD.41595 => D#29ptD.0
  # DEBUG thisD.41594 => D#21ptD.0
  # DEBUG D#31ptD.0 => &MEM[(const struct pairD.36083 &)__j$_M_node_88 + 32].firstD.39938
  # DEBUG D#33ptD.0 => &this_4(D)->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#33ptD.0
  # DEBUG D#6ptD.0 => D#31ptD.0
  # DEBUG D#7ptD.0 => __k_6(D)
  # DEBUG thisD.41591 => D#5ptD.0
  # DEBUG __xD.41590 => D#6ptD.0
  # DEBUG __yD.41589 => D#7ptD.0
  if (_28 > prephitmp_81)
    goto <bb 55>;
  else
    goto <bb 54>;
;;    succ:       55 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                54 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 54, loop depth 0, count 0, freq 229, maybe hot
;;    prev block 53, next block 55, flags: (NEW)
;;    pred:       53 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       55 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 55, loop depth 0, count 0, freq 395, maybe hot
;;    prev block 54, next block 56, flags: (NEW, REACHABLE)
;;    pred:       51 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                53 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                54 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped null 
  # SR.213_112 = PHI <0B(51), 0B(53), __j$_M_node_88(54)>
  # PT = nonlocal escaped null 
  # SR.214_111 = PHI <_85(51), __j$_M_node_154(53), 0B(54)>
  # DEBUG D#32ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.42321 => D#32ptD.0
  # .MEM_76 = VDEF <.MEM_3(D)>
  MEM[(struct pairD.7331 *)&D.40911] = SR.213_112;
  # .MEM_75 = VDEF <.MEM_76>
  MEM[(struct pairD.7331 *)&D.40911 + 8B] = SR.214_111;
  goto <bb 57>;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 56, loop depth 0, count 0, freq 2125, maybe hot
;;    prev block 55, next block 57, flags: (NEW, REACHABLE)
;;    pred:       36 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.41719 => &D.40451
  # DEBUG __aD.41720 => &__posD.40429._M_nodeD.39911
  # DEBUG __bD.41721 => &D.40450
  # .MEM_39 = VDEF <.MEM_3(D)>
  MEM[(struct pairD.7331 *)&D.40911] = _20;
  # .MEM_16 = VDEF <.MEM_39>
  MEM[(struct pairD.7331 *)&D.40911 + 8B] = 0B;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 57, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 56, next block 58, flags: (NEW, REACHABLE)
;;    pred:       58 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                21 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                56 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                55 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                42 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                18 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2 = PHI <.MEM_22(58), .MEM_103(15), .MEM_14(21), .MEM_25(41), .MEM_16(56), .MEM_8(38), .MEM_75(55), .MEM_19(42), .MEM_40(18), .MEM_90(35), .MEM_11(22)>
  # DEBUG D#42ptD.0 => {CLOBBER}
  # DEBUG __posD.41722 => D#42ptD.0
  # VUSE <.MEM_2>
  return D.40911;
;;    succ:       EXIT [100.0%] 

;;   basic block 58, loop depth 0, count 0, freq 1065, maybe hot
;;   Invalid sum of incoming frequencies 375, should be 1065
;;    prev block 57, next block 59, flags: (NEW, REACHABLE)
;;    pred:       4 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.41639 => this_4(D)
  # DEBUG thisD.41636 => &D.40433
  # DEBUG __aD.41637 => &D.40432
  # DEBUG __bD.41638 => NULL
  # .MEM_24 = VDEF <.MEM_3(D)>
  MEM[(struct pairD.7331 *)&D.40911] = 0B;
  # .MEM_22 = VDEF <.MEM_24>
  MEM[(struct pairD.7331 *)&D.40911 + 8B] = _5;
  goto <bb 57>;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 59, loop depth 0, count 0, freq 1126, maybe hot
;;    prev block 58, next block 60, flags: (NEW, REACHABLE)
;;    pred:       4 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                3 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.42244 => this_4(D)
  # DEBUG __kD.42245 => __k_6(D)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _42 = MEM[(struct _Rb_tree_node_baseD.6878 * *)this_4(D) + 16B];
  # DEBUG D#18ptD.0 => this_4(D)
  # DEBUG thisD.41555 => D#18ptD.0
  # DEBUG __xD.42247 => NULL
  # DEBUG thisD.42266 => this_4(D)
  # DEBUG __yD.42248 => NULL
  # DEBUG __compD.42249 => 1
  # DEBUG __compD.42249 => 1
  # DEBUG __yD.42248 => _20
  # DEBUG __xD.42247 => _42
  if (_42 == 0B)
    goto <bb 11>;
  else
    goto <bb 60>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                60 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 60, loop depth 0, count 0, freq 1025, maybe hot
;;    prev block 59, next block 1, flags: (NEW)
;;    pred:       59 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  pretmp_108 = MEM[(const intD.9 &)__k_6(D)];
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

}


Creating dr for __position._M_node
analyze_innermost: success.
	base_address: &__position
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_const_iterator *)&__position]
	Access function 0: 0
Creating dr for MEM[(long unsigned int *)this_4(D) + 40B]
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(long unsigned int *)this_4(D) + 40B]
Creating dr for MEM[(struct _Rb_tree_node_base * &)this_4(D) + 32]
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * &)this_4(D) + 32]
Creating dr for MEM[(const int &)_5 + 32]
analyze_innermost: success.
	base_address: _5
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)_5 + 32]
Creating dr for MEM[(const int &)__k_6(D)]
analyze_innermost: success.
	base_address: __k_6(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__k_6(D)]
Creating dr for MEM[(struct pair *)&D.40911]
analyze_innermost: success.
	base_address: &D.40911
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.40911]
Creating dr for MEM[(struct pair *)&D.40911 + 8B]
analyze_innermost: success.
	base_address: &D.40911
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.40911 + 8B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)this_4(D) + 16B]
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_4(D) + 16B]
Creating dr for MEM[(const int &)__k_6(D)]
analyze_innermost: success.
	base_address: __k_6(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__k_6(D)]
Creating dr for MEM[(const int &)__j$_M_node_77 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_77 + 32]
Creating dr for MEM[(const int &)__j$_M_node_77 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_77 + 32]
Creating dr for MEM[(const int &)__j$_M_node_77 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_77 + 32]
Creating dr for MEM[(const int &)__j$_M_node_77 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_77 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_77 + 24B]
Creating dr for MEM[(const int &)__j$_M_node_77 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_77 + 32]
Creating dr for MEM[(const int &)__j$_M_node_77 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_77 + 32]
Creating dr for MEM[(const int &)__j$_M_node_77 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_77 + 32]
Creating dr for MEM[(const int &)__j$_M_node_77 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_77 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_77 + 24B]
Creating dr for MEM[(struct pair *)&D.40911]
analyze_innermost: success.
	base_address: &D.40911
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.40911]
Creating dr for MEM[(struct pair *)&D.40911 + 8B]
analyze_innermost: success.
	base_address: &D.40911
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.40911 + 8B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)this_4(D) + 24B]
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_4(D) + 24B]
Creating dr for MEM[(const int &)__k_6(D)]
analyze_innermost: success.
	base_address: __k_6(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__k_6(D)]
Creating dr for MEM[(const int &)__j$_M_node_53 + 32]
analyze_innermost: success.
	base_address: __j$_M_node_53
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__j$_M_node_53 + 32]
Creating dr for MEM[(const int &)__k_6(D)]
analyze_innermost: success.
	base_address: __k_6(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__k_6(D)]
Creating dr for MEM[(const int &)_20 + 32]
analyze_innermost: success.
	base_address: _20
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)_20 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * &)this_4(D) + 24]
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * &)this_4(D) + 24]
Creating dr for MEM[(struct pair *)&D.40911]
analyze_innermost: success.
	base_address: &D.40911
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.40911]
Creating dr for MEM[(struct pair *)&D.40911 + 8B]
analyze_innermost: success.
	base_address: &D.40911
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.40911 + 8B]
Creating dr for MEM[(const int &)_35 + 32]
analyze_innermost: success.
	base_address: _35
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)_35 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_35 + 24B]
analyze_innermost: success.
	base_address: _35
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)_35 + 24B]
Creating dr for MEM[(struct pair *)&D.40911]
analyze_innermost: success.
	base_address: &D.40911
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.40911]
Creating dr for MEM[(struct pair *)&D.40911 + 8B]
analyze_innermost: success.
	base_address: &D.40911
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.40911 + 8B]
Creating dr for MEM[(struct pair *)&D.40911]
analyze_innermost: success.
	base_address: &D.40911
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.40911]
Creating dr for MEM[(struct pair *)&D.40911 + 8B]
analyze_innermost: success.
	base_address: &D.40911
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.40911 + 8B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)this_4(D) + 16B]
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_4(D) + 16B]
Creating dr for MEM[(const int &)__j$_M_node_157 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_157 + 32]
Creating dr for MEM[(const int &)__j$_M_node_157 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_157 + 32]
Creating dr for MEM[(const int &)__j$_M_node_157 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_157 + 32]
Creating dr for MEM[(const int &)__j$_M_node_157 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_157 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_157 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_157 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_157 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_157 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_157 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_157 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_157 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_157 + 24B]
Creating dr for MEM[(const int &)__j$_M_node_157 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_157 + 32]
Creating dr for MEM[(const int &)__j$_M_node_157 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_157 + 32]
Creating dr for MEM[(const int &)__j$_M_node_157 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_157 + 32]
Creating dr for MEM[(const int &)__j$_M_node_157 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_157 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_157 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_157 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_157 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_157 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_157 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_157 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_157 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_157 + 24B]
Creating dr for MEM[(struct pair *)&D.40911]
analyze_innermost: success.
	base_address: &D.40911
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.40911]
Creating dr for MEM[(struct pair *)&D.40911 + 8B]
analyze_innermost: success.
	base_address: &D.40911
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.40911 + 8B]
Creating dr for MEM[(const int &)__j$_M_node_70 + 32]
analyze_innermost: success.
	base_address: __j$_M_node_70
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__j$_M_node_70 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * &)this_4(D) + 32]
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * &)this_4(D) + 32]
Creating dr for MEM[(struct pair *)&D.40911]
analyze_innermost: success.
	base_address: &D.40911
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.40911]
Creating dr for MEM[(struct pair *)&D.40911 + 8B]
analyze_innermost: success.
	base_address: &D.40911
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.40911 + 8B]
Creating dr for MEM[(const int &)_36 + 32]
analyze_innermost: success.
	base_address: _36
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)_36 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_20 + 24B]
analyze_innermost: success.
	base_address: _20
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)_20 + 24B]
Creating dr for MEM[(struct pair *)&D.40911]
analyze_innermost: success.
	base_address: &D.40911
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.40911]
Creating dr for MEM[(struct pair *)&D.40911 + 8B]
analyze_innermost: success.
	base_address: &D.40911
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.40911 + 8B]
Creating dr for MEM[(struct pair *)&D.40911]
analyze_innermost: success.
	base_address: &D.40911
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.40911]
Creating dr for MEM[(struct pair *)&D.40911 + 8B]
analyze_innermost: success.
	base_address: &D.40911
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.40911 + 8B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)this_4(D) + 16B]
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_4(D) + 16B]
Creating dr for MEM[(const int &)__j$_M_node_59 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_59 + 32]
Creating dr for MEM[(const int &)__j$_M_node_59 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_59 + 32]
Creating dr for MEM[(const int &)__j$_M_node_59 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_59 + 32]
Creating dr for MEM[(const int &)__j$_M_node_59 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_59 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 24B]
Creating dr for MEM[(const int &)__j$_M_node_59 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_59 + 32]
Creating dr for MEM[(const int &)__j$_M_node_59 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_59 + 32]
Creating dr for MEM[(const int &)__j$_M_node_59 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_59 + 32]
Creating dr for MEM[(const int &)__j$_M_node_59 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_59 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 24B]
Creating dr for MEM[(struct pair *)&D.40911]
analyze_innermost: success.
	base_address: &D.40911
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.40911]
Creating dr for MEM[(struct pair *)&D.40911 + 8B]
analyze_innermost: success.
	base_address: &D.40911
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.40911 + 8B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)this_4(D) + 24B]
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_4(D) + 24B]
Creating dr for MEM[(const int &)__j$_M_node_87 + 32]
analyze_innermost: success.
	base_address: __j$_M_node_87
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__j$_M_node_87 + 32]
Creating dr for MEM[(struct pair *)&D.40911]
analyze_innermost: success.
	base_address: &D.40911
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.40911]
Creating dr for MEM[(struct pair *)&D.40911 + 8B]
analyze_innermost: success.
	base_address: &D.40911
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.40911 + 8B]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:6)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:3, LOOPS:0, CONDITIONS:1, STMTS:17)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:7)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:3, LOOPS:0, CONDITIONS:1, STMTS:17)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:6)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:3, LOOPS:0, CONDITIONS:1, STMTS:17)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:74, LOOPS:3, CONDITIONS:29, STMTS:423)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_16 })
  {
    <bb 2>:
    # DEBUG this => &__position
    # VUSE <.MEM_3(D)>
    _20 = __position._M_node;
    # DEBUG this => NULL
    # DEBUG __x => _20
    # DEBUG __pos => _20
    # DEBUG this => this_4(D)
    __j$_M_node_21 = &this_4(D)->_M_impl._M_header;
    if (_20 == __j$_M_node_21)
      goto <bb 3>;
    else
      goto <bb 16>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 bb_59 })
  {
    <bb 3>:
    # VUSE <.MEM_3(D)>
    _34 = MEM[(long unsigned int *)this_4(D) + 40B];
    # DEBUG D#28 => this_4(D)
    # DEBUG this => D#28
    if (_34 != 0)
      goto <bb 4>;
    else
      goto <bb 59>;

  }
  bb_4 (preds = {bb_3 }, succs = {bb_58 bb_59 })
  {
    <bb 4>:
    # DEBUG this => this_4(D)
    # VUSE <.MEM_3(D)>
    _5 = MEM[(struct _Rb_tree_node_base * &)this_4(D) + 32];
    # DEBUG __x => _5
    # DEBUG __x => _5
    # DEBUG this => _5
    # DEBUG D#29 => &MEM[(const struct _Rb_tree_node *)_5]._M_value_field
    # DEBUG __r => D#29
    # DEBUG __x => D#29
    # DEBUG this => D#21
    # DEBUG D#35 => &MEM[(const struct pair &)_5 + 32].first
    # DEBUG D#45 => &this_4(D)->_M_impl._M_key_compare
    # DEBUG D#5 => D#45
    # VUSE <.MEM_3(D)>
    _26 = MEM[(const int &)_5 + 32];
    # DEBUG D#6 => D#35
    # VUSE <.MEM_3(D)>
    _27 = MEM[(const int &)__k_6(D)];
    # DEBUG D#7 => __k_6(D)
    # DEBUG this => D#5
    # DEBUG __x => D#6
    # DEBUG __y => D#7
    if (_26 < _27)
      goto <bb 58>;
    else
      goto <bb 59>;

  }
  bb_10 (preds = {bb_5 }, succs = {bb_61 })
  {
    <bb 10>:
    # _47 = PHI <_46(5)>
    # __j$_M_node_55 = PHI <__j$_M_node_77(5)>

  }
  bb_61 (preds = {bb_10 }, succs = {bb_11 bb_13 })
  {
    <bb 61>:
    # DEBUG this => &__j
    # DEBUG __x => __j$_M_node_55
    # DEBUG __j$_M_node => __j$_M_node_55
    if (_47 > pretmp_108)
      goto <bb 11>;
    else
      goto <bb 13>;

  }
  bb_11 (preds = {bb_61 bb_59 }, succs = {bb_71 bb_12 })
  {
    <bb 11>:
    # __j$_M_node_133 = PHI <__j$_M_node_55(61), _20(59)>
    # DEBUG this => &__j
    # DEBUG __x => __j$_M_node_133
    # DEBUG __j$_M_node => __j$_M_node_133
    # VUSE <.MEM_3(D)>
    _51 = MEM[(struct _Rb_tree_node_base * *)this_4(D) + 24B];
    # DEBUG D#11 => this_4(D)
    # DEBUG this => D#11
    # DEBUG this => NULL
    # DEBUG __x => _51
    # DEBUG this => &__j
    # DEBUG __x => NULL
    if (_51 == __j$_M_node_133)
      goto <bb 71>;
    else
      goto <bb 12>;

  }
  bb_12 (preds = {bb_11 }, succs = {bb_13 })
  {
    <bb 12>:
    # DEBUG this => &__j
    # VUSE <.MEM_3(D)>
    __j$_M_node_53 = std::_Rb_tree_decrement (__j$_M_node_133);
    # DEBUG __j$_M_node => __j$_M_node_53
    # VUSE <.MEM_3(D)>
    pretmp_110 = MEM[(const int &)__k_6(D)];
    # VUSE <.MEM_3(D)>
    pretmp_98 = MEM[(const int &)__j$_M_node_53 + 32];

  }
  bb_13 (preds = {bb_61 bb_12 }, succs = {bb_65 })
  {
    <bb 13>:
    # __j$_M_node_54 = PHI <__j$_M_node_55(61), __j$_M_node_53(12)>
    # __j$_M_node_139 = PHI <__j$_M_node_55(61), __j$_M_node_133(12)>
    # prephitmp_109 = PHI <pretmp_108(61), pretmp_110(12)>
    # prephitmp_97 = PHI <_47(61), pretmp_98(12)>

  }
  bb_65 (preds = {bb_13 }, succs = {bb_15 bb_14 })
  {
    <bb 65>:
    # DEBUG __j$_M_node => __j$_M_node_54
    # DEBUG __x => __j$_M_node_54
    # DEBUG __x => __j$_M_node_54
    # DEBUG this => __j$_M_node_54
    # DEBUG D#29 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_54]._M_value_field
    # DEBUG __r => D#29
    # DEBUG __x => D#29
    # DEBUG this => D#21
    # DEBUG D#31 => &MEM[(const struct pair &)__j$_M_node_54 + 32].first
    # DEBUG D#33 => &this_4(D)->_M_impl._M_key_compare
    # DEBUG D#5 => D#33
    # DEBUG D#6 => D#31
    # DEBUG D#7 => __k_6(D)
    # DEBUG this => D#5
    # DEBUG __x => D#6
    # DEBUG __y => D#7
    if (prephitmp_97 < prephitmp_109)
      goto <bb 15>;
    else
      goto <bb 14>;

  }
  bb_14 (preds = {bb_65 }, succs = {bb_15 })
  {
    <bb 14>:

  }
  bb_15 (preds = {bb_14 bb_65 }, succs = {bb_71 })
  {
    <bb 15>:
    # SR.209_105 = PHI <__j$_M_node_54(14), 0B(65)>
    # SR.210_100 = PHI <0B(14), __j$_M_node_139(65)>

  }
  bb_71 (preds = {bb_15 bb_11 }, succs = {bb_64 })
  {
    <bb 71>:
    # SR.209_116 = PHI <SR.209_105(15), 0B(11)>
    # SR.210_115 = PHI <SR.210_100(15), _51(11)>

  }
  bb_64 (preds = {bb_71 }, succs = {bb_57 })
  {
    <bb 64>:
    # DEBUG D#32 => {CLOBBER}
    # DEBUG __j$_M_node => D#32
    # .MEM_104 = VDEF <.MEM_3(D)>
    MEM[(struct pair *)&D.40911] = SR.209_116;
    # .MEM_103 = VDEF <.MEM_104>
    MEM[(struct pair *)&D.40911 + 8B] = SR.210_115;
    goto <bb 57>;

  }
  bb_16 (preds = {bb_2 }, succs = {bb_17 bb_36 })
  {
    <bb 16>:
    # DEBUG __x => _20
    # DEBUG __x => _20
    # DEBUG this => _20
    # DEBUG D#29 => &MEM[(const struct _Rb_tree_node *)_20]._M_value_field
    # DEBUG __r => D#29
    # DEBUG __x => D#29
    # DEBUG this => D#21
    # DEBUG D#36 => &MEM[(const struct pair &)_20 + 32].first
    # DEBUG D#47 => &this_4(D)->_M_impl._M_key_compare
    # DEBUG D#5 => D#47
    # VUSE <.MEM_3(D)>
    _28 = MEM[(const int &)__k_6(D)];
    # DEBUG D#6 => __k_6(D)
    # VUSE <.MEM_3(D)>
    _29 = MEM[(const int &)_20 + 32];
    # DEBUG D#7 => D#36
    # DEBUG this => D#5
    # DEBUG __x => D#6
    # DEBUG __y => D#7
    if (_28 < _29)
      goto <bb 17>;
    else
      goto <bb 36>;

  }
  bb_17 (preds = {bb_16 }, succs = {bb_18 bb_19 })
  {
    <bb 17>:
    # DEBUG __before => _20
    # DEBUG this => this_4(D)
    # VUSE <.MEM_3(D)>
    _9 = MEM[(struct _Rb_tree_node_base * &)this_4(D) + 24];
    if (_9 == _20)
      goto <bb 18>;
    else
      goto <bb 19>;

  }
  bb_18 (preds = {bb_17 }, succs = {bb_57 })
  {
    <bb 18>:
    # DEBUG this => this_4(D)
    # DEBUG this => this_4(D)
    # DEBUG this => &D.40437
    # DEBUG __a => NULL
    # DEBUG __b => NULL
    # .MEM_41 = VDEF <.MEM_3(D)>
    MEM[(struct pair *)&D.40911] = _9;
    # .MEM_40 = VDEF <.MEM_41>
    MEM[(struct pair *)&D.40911 + 8B] = _9;
    goto <bb 57>;

  }
  bb_19 (preds = {bb_17 }, succs = {bb_20 bb_23 })
  {
    <bb 19>:
    # DEBUG this => &__before
    # VUSE <.MEM_3(D)>
    _35 = std::_Rb_tree_decrement (_20);
    # DEBUG __before => _35
    # DEBUG __x => _35
    # DEBUG __x => _35
    # DEBUG this => _35
    # DEBUG D#29 => &MEM[(const struct _Rb_tree_node *)_35]._M_value_field
    # DEBUG __r => D#29
    # DEBUG __x => D#29
    # DEBUG this => D#21
    # DEBUG D#37 => &MEM[(const struct pair &)_35 + 32].first
    # DEBUG D#44 => &this_4(D)->_M_impl._M_key_compare
    # DEBUG D#5 => D#44
    # VUSE <.MEM_3(D)>
    _30 = MEM[(const int &)_35 + 32];
    # DEBUG D#6 => D#37
    # DEBUG D#7 => __k_6(D)
    # DEBUG this => D#5
    # DEBUG __x => D#6
    # DEBUG __y => D#7
    if (_28 > _30)
      goto <bb 20>;
    else
      goto <bb 23>;

  }
  bb_20 (preds = {bb_19 }, succs = {bb_21 bb_22 })
  {
    <bb 20>:
    # VUSE <.MEM_3(D)>
    _32 = MEM[(struct _Rb_tree_node_base * *)_35 + 24B];
    # DEBUG D#20 => _35
    # DEBUG __x => D#20
    if (_32 == 0B)
      goto <bb 21>;
    else
      goto <bb 22>;

  }
  bb_21 (preds = {bb_20 }, succs = {bb_57 })
  {
    <bb 21>:
    # DEBUG this => &D.40439
    # DEBUG __a => &D.40438
    # DEBUG __b => &__before._M_node
    # .MEM_15 = VDEF <.MEM_3(D)>
    MEM[(struct pair *)&D.40911] = 0B;
    # .MEM_14 = VDEF <.MEM_15>
    MEM[(struct pair *)&D.40911 + 8B] = _35;
    goto <bb 57>;

  }
  bb_22 (preds = {bb_20 }, succs = {bb_57 })
  {
    <bb 22>:
    # DEBUG this => &D.40440
    # DEBUG __a => &__pos._M_node
    # DEBUG __b => &__pos._M_node
    # .MEM_12 = VDEF <.MEM_3(D)>
    MEM[(struct pair *)&D.40911] = _20;
    # .MEM_11 = VDEF <.MEM_12>
    MEM[(struct pair *)&D.40911 + 8B] = _20;
    goto <bb 57>;

  }
  bb_23 (preds = {bb_19 }, succs = {bb_31 bb_26 })
  {
    <bb 23>:
    # DEBUG this => this_4(D)
    # DEBUG __k => __k_6(D)
    # VUSE <.MEM_3(D)>
    _7 = MEM[(struct _Rb_tree_node_base * *)this_4(D) + 16B];
    # DEBUG D#18 => this_4(D)
    # DEBUG this => D#18
    # DEBUG __x => NULL
    # DEBUG this => this_4(D)
    # DEBUG __y => NULL
    # DEBUG __comp => 1
    # DEBUG __comp => 1
    # DEBUG __y => __j$_M_node_21
    # DEBUG __x => _7
    if (_7 == 0B)
      goto <bb 31>;
    else
      goto <bb 26>;

  }
  bb_26 (preds = {bb_23 }, succs = {bb_27 })
  {
    <bb 26>:

  }
  bb_30 (preds = {bb_24 }, succs = {bb_62 })
  {
    <bb 30>:
    # _45 = PHI <_63(24)>
    # __j$_M_node_72 = PHI <__j$_M_node_157(24)>

  }
  bb_62 (preds = {bb_30 }, succs = {bb_31 bb_33 })
  {
    <bb 62>:
    # DEBUG this => &__j
    # DEBUG __x => __j$_M_node_72
    # DEBUG __j$_M_node => __j$_M_node_72
    if (_28 < _45)
      goto <bb 31>;
    else
      goto <bb 33>;

  }
  bb_31 (preds = {bb_62 bb_23 }, succs = {bb_72 bb_32 })
  {
    <bb 31>:
    # __j$_M_node_153 = PHI <__j$_M_node_72(62), __j$_M_node_21(23)>
    # DEBUG this => &__j
    # DEBUG __x => __j$_M_node_153
    # DEBUG __j$_M_node => __j$_M_node_153
    # DEBUG D#11 => this_4(D)
    # DEBUG this => D#11
    # DEBUG this => NULL
    # DEBUG __x => _9
    # DEBUG this => &__j
    # DEBUG __x => NULL
    if (_9 == __j$_M_node_153)
      goto <bb 72>;
    else
      goto <bb 32>;

  }
  bb_32 (preds = {bb_31 }, succs = {bb_33 })
  {
    <bb 32>:
    # DEBUG this => &__j
    # VUSE <.MEM_3(D)>
    __j$_M_node_70 = std::_Rb_tree_decrement (__j$_M_node_153);
    # DEBUG __j$_M_node => __j$_M_node_70
    # VUSE <.MEM_3(D)>
    pretmp_10 = MEM[(const int &)__j$_M_node_70 + 32];

  }
  bb_33 (preds = {bb_62 bb_32 }, succs = {bb_67 })
  {
    <bb 33>:
    # __j$_M_node_71 = PHI <__j$_M_node_72(62), __j$_M_node_70(32)>
    # __j$_M_node_152 = PHI <__j$_M_node_72(62), __j$_M_node_153(32)>
    # prephitmp_106 = PHI <_45(62), pretmp_10(32)>

  }
  bb_67 (preds = {bb_33 }, succs = {bb_35 bb_34 })
  {
    <bb 67>:
    # DEBUG __j$_M_node => __j$_M_node_71
    # DEBUG __x => __j$_M_node_71
    # DEBUG __x => __j$_M_node_71
    # DEBUG this => __j$_M_node_71
    # DEBUG D#29 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_71]._M_value_field
    # DEBUG __r => D#29
    # DEBUG __x => D#29
    # DEBUG this => D#21
    # DEBUG D#31 => &MEM[(const struct pair &)__j$_M_node_71 + 32].first
    # DEBUG D#33 => &this_4(D)->_M_impl._M_key_compare
    # DEBUG D#5 => D#33
    # DEBUG D#6 => D#31
    # DEBUG D#7 => __k_6(D)
    # DEBUG this => D#5
    # DEBUG __x => D#6
    # DEBUG __y => D#7
    if (_28 > prephitmp_106)
      goto <bb 35>;
    else
      goto <bb 34>;

  }
  bb_34 (preds = {bb_67 }, succs = {bb_35 })
  {
    <bb 34>:

  }
  bb_35 (preds = {bb_34 bb_67 }, succs = {bb_72 })
  {
    <bb 35>:
    # SR.211_89 = PHI <__j$_M_node_71(34), 0B(67)>
    # SR.212_99 = PHI <0B(34), __j$_M_node_152(67)>

  }
  bb_72 (preds = {bb_35 bb_31 }, succs = {bb_66 })
  {
    <bb 72>:
    # SR.211_114 = PHI <SR.211_89(35), 0B(31)>
    # SR.212_113 = PHI <SR.212_99(35), _9(31)>

  }
  bb_66 (preds = {bb_72 }, succs = {bb_57 })
  {
    <bb 66>:
    # DEBUG D#32 => {CLOBBER}
    # DEBUG __j$_M_node => D#32
    # .MEM_96 = VDEF <.MEM_3(D)>
    MEM[(struct pair *)&D.40911] = SR.211_114;
    # .MEM_90 = VDEF <.MEM_96>
    MEM[(struct pair *)&D.40911 + 8B] = SR.212_113;
    goto <bb 57>;

  }
  bb_36 (preds = {bb_16 }, succs = {bb_37 bb_56 })
  {
    <bb 36>:
    # DEBUG __x => _20
    # DEBUG __x => _20
    # DEBUG this => _20
    # DEBUG D#29 => &MEM[(const struct _Rb_tree_node *)_20]._M_value_field
    # DEBUG __r => D#29
    # DEBUG __x => D#29
    # DEBUG this => D#21
    # DEBUG D#38 => &MEM[(const struct pair &)_20 + 32].first
    # DEBUG D#46 => &this_4(D)->_M_impl._M_key_compare
    # DEBUG D#5 => D#46
    # DEBUG D#6 => D#38
    # DEBUG D#7 => __k_6(D)
    # DEBUG this => D#5
    # DEBUG __x => D#6
    # DEBUG __y => D#7
    if (_28 > _29)
      goto <bb 37>;
    else
      goto <bb 56>;

  }
  bb_37 (preds = {bb_36 }, succs = {bb_38 bb_39 })
  {
    <bb 37>:
    # DEBUG __after => _20
    # DEBUG this => this_4(D)
    # VUSE <.MEM_3(D)>
    _17 = MEM[(struct _Rb_tree_node_base * &)this_4(D) + 32];
    if (_17 == _20)
      goto <bb 38>;
    else
      goto <bb 39>;

  }
  bb_38 (preds = {bb_37 }, succs = {bb_57 })
  {
    <bb 38>:
    # DEBUG this => this_4(D)
    # DEBUG this => &D.40445
    # DEBUG __a => &D.40444
    # DEBUG __b => NULL
    # .MEM_38 = VDEF <.MEM_3(D)>
    MEM[(struct pair *)&D.40911] = 0B;
    # .MEM_8 = VDEF <.MEM_38>
    MEM[(struct pair *)&D.40911 + 8B] = _17;
    goto <bb 57>;

  }
  bb_39 (preds = {bb_37 }, succs = {bb_40 bb_43 })
  {
    <bb 39>:
    # DEBUG this => &__after
    # VUSE <.MEM_3(D)>
    _36 = std::_Rb_tree_increment (_20);
    # DEBUG __after => _36
    # DEBUG __x => _36
    # DEBUG __x => _36
    # DEBUG this => _36
    # DEBUG D#29 => &MEM[(const struct _Rb_tree_node *)_36]._M_value_field
    # DEBUG __r => D#29
    # DEBUG __x => D#29
    # DEBUG this => D#21
    # DEBUG D#39 => &MEM[(const struct pair &)_36 + 32].first
    # DEBUG D#43 => &this_4(D)->_M_impl._M_key_compare
    # DEBUG D#5 => D#43
    # DEBUG D#6 => __k_6(D)
    # VUSE <.MEM_3(D)>
    _31 = MEM[(const int &)_36 + 32];
    # DEBUG D#7 => D#39
    # DEBUG this => D#5
    # DEBUG __x => D#6
    # DEBUG __y => D#7
    if (_28 < _31)
      goto <bb 40>;
    else
      goto <bb 43>;

  }
  bb_40 (preds = {bb_39 }, succs = {bb_41 bb_42 })
  {
    <bb 40>:
    # VUSE <.MEM_3(D)>
    _33 = MEM[(struct _Rb_tree_node_base * *)_20 + 24B];
    # DEBUG D#20 => _20
    # DEBUG __x => D#20
    if (_33 == 0B)
      goto <bb 41>;
    else
      goto <bb 42>;

  }
  bb_41 (preds = {bb_40 }, succs = {bb_57 })
  {
    <bb 41>:
    # DEBUG this => &D.40447
    # DEBUG __a => &D.40446
    # DEBUG __b => &__pos._M_node
    # .MEM_37 = VDEF <.MEM_3(D)>
    MEM[(struct pair *)&D.40911] = 0B;
    # .MEM_25 = VDEF <.MEM_37>
    MEM[(struct pair *)&D.40911 + 8B] = _20;
    goto <bb 57>;

  }
  bb_42 (preds = {bb_40 }, succs = {bb_57 })
  {
    <bb 42>:
    # DEBUG this => &D.40448
    # DEBUG __a => &__after._M_node
    # DEBUG __b => &__after._M_node
    # .MEM_18 = VDEF <.MEM_3(D)>
    MEM[(struct pair *)&D.40911] = _36;
    # .MEM_19 = VDEF <.MEM_18>
    MEM[(struct pair *)&D.40911 + 8B] = _36;
    goto <bb 57>;

  }
  bb_43 (preds = {bb_39 }, succs = {bb_51 bb_46 })
  {
    <bb 43>:
    # DEBUG this => this_4(D)
    # DEBUG __k => __k_6(D)
    # VUSE <.MEM_3(D)>
    _13 = MEM[(struct _Rb_tree_node_base * *)this_4(D) + 16B];
    # DEBUG D#18 => this_4(D)
    # DEBUG this => D#18
    # DEBUG __x => NULL
    # DEBUG this => this_4(D)
    # DEBUG __y => NULL
    # DEBUG __comp => 1
    # DEBUG __comp => 1
    # DEBUG __y => __j$_M_node_21
    # DEBUG __x => _13
    if (_13 == 0B)
      goto <bb 51>;
    else
      goto <bb 46>;

  }
  bb_46 (preds = {bb_43 }, succs = {bb_47 })
  {
    <bb 46>:

  }
  bb_50 (preds = {bb_44 }, succs = {bb_63 })
  {
    <bb 50>:
    # __j$_M_node_107 = PHI <__j$_M_node_59(44)>
    # _56 = PHI <_80(44)>

  }
  bb_63 (preds = {bb_50 }, succs = {bb_51 bb_53 })
  {
    <bb 63>:
    # DEBUG this => &__j
    # DEBUG __x => __j$_M_node_107
    # DEBUG __j$_M_node => __j$_M_node_107
    if (_28 < _56)
      goto <bb 51>;
    else
      goto <bb 53>;

  }
  bb_51 (preds = {bb_63 bb_43 }, succs = {bb_73 bb_52 })
  {
    <bb 51>:
    # __j$_M_node_156 = PHI <__j$_M_node_107(63), __j$_M_node_21(43)>
    # DEBUG this => &__j
    # DEBUG __x => __j$_M_node_156
    # DEBUG __j$_M_node => __j$_M_node_156
    # VUSE <.MEM_3(D)>
    _85 = MEM[(struct _Rb_tree_node_base * *)this_4(D) + 24B];
    # DEBUG D#11 => this_4(D)
    # DEBUG this => D#11
    # DEBUG this => NULL
    # DEBUG __x => _85
    # DEBUG this => &__j
    # DEBUG __x => NULL
    if (_85 == __j$_M_node_156)
      goto <bb 73>;
    else
      goto <bb 52>;

  }
  bb_52 (preds = {bb_51 }, succs = {bb_53 })
  {
    <bb 52>:
    # DEBUG this => &__j
    # VUSE <.MEM_3(D)>
    __j$_M_node_87 = std::_Rb_tree_decrement (__j$_M_node_156);
    # DEBUG __j$_M_node => __j$_M_node_87
    # VUSE <.MEM_3(D)>
    pretmp_64 = MEM[(const int &)__j$_M_node_87 + 32];

  }
  bb_53 (preds = {bb_63 bb_52 }, succs = {bb_69 })
  {
    <bb 53>:
    # __j$_M_node_88 = PHI <__j$_M_node_107(63), __j$_M_node_87(52)>
    # __j$_M_node_154 = PHI <__j$_M_node_107(63), __j$_M_node_156(52)>
    # prephitmp_81 = PHI <_56(63), pretmp_64(52)>

  }
  bb_69 (preds = {bb_53 }, succs = {bb_55 bb_54 })
  {
    <bb 69>:
    # DEBUG __j$_M_node => __j$_M_node_88
    # DEBUG __x => __j$_M_node_88
    # DEBUG __x => __j$_M_node_88
    # DEBUG this => __j$_M_node_88
    # DEBUG D#29 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_88]._M_value_field
    # DEBUG __r => D#29
    # DEBUG __x => D#29
    # DEBUG this => D#21
    # DEBUG D#31 => &MEM[(const struct pair &)__j$_M_node_88 + 32].first
    # DEBUG D#33 => &this_4(D)->_M_impl._M_key_compare
    # DEBUG D#5 => D#33
    # DEBUG D#6 => D#31
    # DEBUG D#7 => __k_6(D)
    # DEBUG this => D#5
    # DEBUG __x => D#6
    # DEBUG __y => D#7
    if (_28 > prephitmp_81)
      goto <bb 55>;
    else
      goto <bb 54>;

  }
  bb_54 (preds = {bb_69 }, succs = {bb_55 })
  {
    <bb 54>:

  }
  bb_55 (preds = {bb_54 bb_69 }, succs = {bb_73 })
  {
    <bb 55>:
    # SR.213_102 = PHI <__j$_M_node_88(54), 0B(69)>
    # SR.214_101 = PHI <0B(54), __j$_M_node_154(69)>

  }
  bb_73 (preds = {bb_55 bb_51 }, succs = {bb_68 })
  {
    <bb 73>:
    # SR.213_112 = PHI <SR.213_102(55), 0B(51)>
    # SR.214_111 = PHI <SR.214_101(55), _85(51)>

  }
  bb_68 (preds = {bb_73 }, succs = {bb_57 })
  {
    <bb 68>:
    # DEBUG D#32 => {CLOBBER}
    # DEBUG __j$_M_node => D#32
    # .MEM_76 = VDEF <.MEM_3(D)>
    MEM[(struct pair *)&D.40911] = SR.213_112;
    # .MEM_75 = VDEF <.MEM_76>
    MEM[(struct pair *)&D.40911 + 8B] = SR.214_111;
    goto <bb 57>;

  }
  bb_56 (preds = {bb_36 }, succs = {bb_57 })
  {
    <bb 56>:
    # DEBUG this => &D.40451
    # DEBUG __a => &__pos._M_node
    # DEBUG __b => &D.40450
    # .MEM_39 = VDEF <.MEM_3(D)>
    MEM[(struct pair *)&D.40911] = _20;
    # .MEM_16 = VDEF <.MEM_39>
    MEM[(struct pair *)&D.40911 + 8B] = 0B;

  }
  bb_57 (preds = {bb_58 bb_64 bb_21 bb_41 bb_56 bb_38 bb_68 bb_42 bb_18 bb_66 bb_22 }, succs = {bb_70 })
  {
    <bb 57>:
    # .MEM_2 = PHI <.MEM_22(58), .MEM_103(64), .MEM_14(21), .MEM_25(41), .MEM_16(56), .MEM_8(38), .MEM_75(68), .MEM_19(42), .MEM_40(18), .MEM_90(66), .MEM_11(22)>

  }
  bb_70 (preds = {bb_57 }, succs = {bb_1 })
  {
    <bb 70>:
    # DEBUG D#42 => {CLOBBER}
    # DEBUG __pos => D#42
    # VUSE <.MEM_2>
    return D.40911;

  }
  bb_58 (preds = {bb_4 }, succs = {bb_57 })
  {
    <bb 58>:
    # DEBUG this => this_4(D)
    # DEBUG this => &D.40433
    # DEBUG __a => &D.40432
    # DEBUG __b => NULL
    # .MEM_24 = VDEF <.MEM_3(D)>
    MEM[(struct pair *)&D.40911] = 0B;
    # .MEM_22 = VDEF <.MEM_24>
    MEM[(struct pair *)&D.40911 + 8B] = _5;
    goto <bb 57>;

  }
  bb_59 (preds = {bb_4 bb_3 }, succs = {bb_11 bb_60 })
  {
    <bb 59>:
    # DEBUG this => this_4(D)
    # DEBUG __k => __k_6(D)
    # VUSE <.MEM_3(D)>
    _42 = MEM[(struct _Rb_tree_node_base * *)this_4(D) + 16B];
    # DEBUG D#18 => this_4(D)
    # DEBUG this => D#18
    # DEBUG __x => NULL
    # DEBUG this => this_4(D)
    # DEBUG __y => NULL
    # DEBUG __comp => 1
    # DEBUG __comp => 1
    # DEBUG __y => _20
    # DEBUG __x => _42
    if (_42 == 0B)
      goto <bb 11>;
    else
      goto <bb 60>;

  }
  bb_60 (preds = {bb_59 }, succs = {bb_7 })
  {
    <bb 60>:
    # VUSE <.MEM_3(D)>
    pretmp_108 = MEM[(const int &)__k_6(D)];
    goto <bb 7>;

  }
  loop_1 (header = 7, latch = 6, niter = )
  {
    bb_5 (preds = {bb_8 bb_9 }, succs = {bb_10 bb_6 })
    {
      <bb 5>:
      # _57 = PHI <_48(8), _49(9)>
      # DEBUG __comp => D#112 < _46
      # DEBUG __y => __j$_M_node_77
      # DEBUG __x => _57
      if (_57 == 0B)
        goto <bb 10>;
      else
        goto <bb 6>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_7 })
    {
      <bb 6>:

    }
    bb_7 (preds = {bb_60 bb_6 }, succs = {bb_8 bb_9 })
    {
      <bb 7>:
      # __j$_M_node_77 = PHI <_42(60), _57(6)>
      # DEBUG __comp => 1
      # DEBUG __x => __j$_M_node_77
      # DEBUG __y => __j$_M_node_77
      # DEBUG __x => __j$_M_node_77
      # DEBUG __x => __j$_M_node_77
      # DEBUG this => __j$_M_node_77
      # DEBUG D#22 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_77]._M_value_field
      # DEBUG __r => D#22
      # DEBUG __x => D#22
      # DEBUG this => D#21
      # DEBUG D#30 => &MEM[(const struct pair &)__j$_M_node_77 + 32].first
      # DEBUG D#34 => &this_4(D)->_M_impl._M_key_compare
      # DEBUG D#5 => D#34
      # DEBUG D#112 => MEM[(const int &)__k_6(D)]
      # DEBUG D#6 => __k_6(D)
      # VUSE <.MEM_3(D)>
      _46 = MEM[(const int &)__j$_M_node_77 + 32];
      # DEBUG D#7 => D#30
      # DEBUG this => D#5
      # DEBUG __x => D#6
      # DEBUG __y => D#7
      # DEBUG __comp => NULL
      if (_46 > pretmp_108)
        goto <bb 8>;
      else
        goto <bb 9>;

    }
    bb_8 (preds = {bb_7 }, succs = {bb_5 })
    {
      <bb 8>:
      # VUSE <.MEM_3(D)>
      _48 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_77 + 16B];
      # DEBUG D#19 => __j$_M_node_77
      # DEBUG __x => D#19
      goto <bb 5>;

    }
    bb_9 (preds = {bb_7 }, succs = {bb_5 })
    {
      <bb 9>:
      # VUSE <.MEM_3(D)>
      _49 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_77 + 24B];
      # DEBUG D#20 => __j$_M_node_77
      # DEBUG __x => D#20
      goto <bb 5>;

    }
  }
  loop_2 (header = 27, latch = 25, niter = )
  {
    bb_24 (preds = {bb_28 bb_29 }, succs = {bb_30 bb_25 })
    {
      <bb 24>:
      # _43 = PHI <_65(28), _66(29)>
      # DEBUG __comp => _28 < _63
      # DEBUG __y => __j$_M_node_157
      # DEBUG __x => _43
      if (_43 == 0B)
        goto <bb 30>;
      else
        goto <bb 25>;

    }
    bb_25 (preds = {bb_24 }, succs = {bb_27 })
    {
      <bb 25>:
      goto <bb 27>;

    }
    bb_27 (preds = {bb_26 bb_25 }, succs = {bb_28 bb_29 })
    {
      <bb 27>:
      # __j$_M_node_157 = PHI <_7(26), _43(25)>
      # DEBUG __comp => 1
      # DEBUG __x => __j$_M_node_157
      # DEBUG __y => __j$_M_node_157
      # DEBUG __x => __j$_M_node_157
      # DEBUG __x => __j$_M_node_157
      # DEBUG this => __j$_M_node_157
      # DEBUG D#22 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_157]._M_value_field
      # DEBUG __r => D#22
      # DEBUG __x => D#22
      # DEBUG this => D#21
      # DEBUG D#30 => &MEM[(const struct pair &)__j$_M_node_157 + 32].first
      # DEBUG D#34 => &this_4(D)->_M_impl._M_key_compare
      # DEBUG D#5 => D#34
      # DEBUG D#6 => __k_6(D)
      # VUSE <.MEM_3(D)>
      _63 = MEM[(const int &)__j$_M_node_157 + 32];
      # DEBUG D#7 => D#30
      # DEBUG this => D#5
      # DEBUG __x => D#6
      # DEBUG __y => D#7
      # DEBUG __comp => NULL
      if (_28 < _63)
        goto <bb 28>;
      else
        goto <bb 29>;

    }
    bb_28 (preds = {bb_27 }, succs = {bb_24 })
    {
      <bb 28>:
      # VUSE <.MEM_3(D)>
      _65 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_157 + 16B];
      # DEBUG D#19 => __j$_M_node_157
      # DEBUG __x => D#19
      goto <bb 24>;

    }
    bb_29 (preds = {bb_27 }, succs = {bb_24 })
    {
      <bb 29>:
      # VUSE <.MEM_3(D)>
      _66 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_157 + 24B];
      # DEBUG D#20 => __j$_M_node_157
      # DEBUG __x => D#20
      goto <bb 24>;

    }
  }
  loop_3 (header = 47, latch = 45, niter = )
  {
    bb_44 (preds = {bb_48 bb_49 }, succs = {bb_50 bb_45 })
    {
      <bb 44>:
      # _68 = PHI <_82(48), _83(49)>
      # DEBUG __comp => _28 < _80
      # DEBUG __y => __j$_M_node_59
      # DEBUG __x => _68
      if (_68 == 0B)
        goto <bb 50>;
      else
        goto <bb 45>;

    }
    bb_45 (preds = {bb_44 }, succs = {bb_47 })
    {
      <bb 45>:
      goto <bb 47>;

    }
    bb_47 (preds = {bb_46 bb_45 }, succs = {bb_48 bb_49 })
    {
      <bb 47>:
      # __j$_M_node_59 = PHI <_13(46), _68(45)>
      # DEBUG __comp => 1
      # DEBUG __x => __j$_M_node_59
      # DEBUG __y => __j$_M_node_59
      # DEBUG __x => __j$_M_node_59
      # DEBUG __x => __j$_M_node_59
      # DEBUG this => __j$_M_node_59
      # DEBUG D#22 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_59]._M_value_field
      # DEBUG __r => D#22
      # DEBUG __x => D#22
      # DEBUG this => D#21
      # DEBUG D#30 => &MEM[(const struct pair &)__j$_M_node_59 + 32].first
      # DEBUG D#34 => &this_4(D)->_M_impl._M_key_compare
      # DEBUG D#5 => D#34
      # DEBUG D#6 => __k_6(D)
      # VUSE <.MEM_3(D)>
      _80 = MEM[(const int &)__j$_M_node_59 + 32];
      # DEBUG D#7 => D#30
      # DEBUG this => D#5
      # DEBUG __x => D#6
      # DEBUG __y => D#7
      # DEBUG __comp => NULL
      if (_28 < _80)
        goto <bb 48>;
      else
        goto <bb 49>;

    }
    bb_48 (preds = {bb_47 }, succs = {bb_44 })
    {
      <bb 48>:
      # VUSE <.MEM_3(D)>
      _82 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 16B];
      # DEBUG D#19 => __j$_M_node_59
      # DEBUG __x => D#19
      goto <bb 44>;

    }
    bb_49 (preds = {bb_47 }, succs = {bb_44 })
    {
      <bb 49>:
      # VUSE <.MEM_3(D)>
      _83 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 24B];
      # DEBUG D#20 => __j$_M_node_59
      # DEBUG __x => D#20
      goto <bb 44>;

    }
  }
}

Pass statistics:
----------------

std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*> std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_get_insert_hint_unique_pos(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator, const key_type&) [with _Key = int; _Val = std::pair<const int, Allocator::sRequest>; _KeyOfValue = std::_Select1st<std::pair<const int, Allocator::sRequest> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, Allocator::sRequest> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator = std::_Rb_tree_const_iterator<std::pair<const int, Allocator::sRequest> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::key_type = int] (struct _Rb_treeD.38972 * const thisD.39291, struct const_iteratorD.39278 __positionD.39292, const key_typeD.38998 & __kD.39293)
{
  struct _Rb_tree_node_baseD.6878 * SR.214D.42331;
  struct _Rb_tree_node_baseD.6878 * SR.213D.42330;
  struct _Rb_tree_node_baseD.6878 * SR.212D.42329;
  struct _Rb_tree_node_baseD.6878 * SR.211D.42328;
  struct _Rb_tree_node_baseD.6878 * SR.210D.42327;
  struct _Rb_tree_node_baseD.6878 * SR.209D.42326;
  struct pairD.7331 D.42324;
  boolD.2757 __compD.42303;
  struct _Rb_tree_node_baseD.6878 * const __j$_M_nodeD.42321;
  struct pairD.7331 D.42297;
  boolD.2757 __compD.42276;
  struct _Rb_tree_node_baseD.6878 * const __j$_M_nodeD.42294;
  struct pairD.7331 D.42270;
  boolD.2757 __compD.42249;
  struct _Rb_tree_node_baseD.6878 * const __j$_M_nodeD.42267;
  struct pairD.7331 D.40911;
  struct _Rb_tree_node_baseD.6878 * _5;
  struct _Rb_tree_node_baseD.6878 * _7;
  struct _Rb_tree_node_baseD.6878 * _9;
  const intD.9 pretmp_10;
  struct _Rb_tree_node_baseD.6878 * _13;
  struct _Rb_tree_node_baseD.6878 * _17;
  const struct _Rb_tree_node_baseD.6878 * _20;
  const intD.9 _26;
  const intD.9 _27;
  const intD.9 _28;
  const intD.9 _29;
  const intD.9 _30;
  const intD.9 _31;
  struct _Rb_tree_node_baseD.6878 * _32;
  struct _Rb_tree_node_baseD.6878 * _33;
  const size_typeD.39004 _34;
  struct _Rb_tree_node_baseD.6878 * _35;
  struct _Rb_tree_node_baseD.6878 * _36;
  struct _Rb_tree_node_baseD.6878 * _42;
  struct _Rb_tree_node_baseD.6878 * const _43;
  const intD.9 _45;
  const intD.9 _46;
  const intD.9 _47;
  struct _Rb_tree_node_baseD.6878 * _48;
  struct _Rb_tree_node_baseD.6878 * _49;
  struct _Rb_tree_node_baseD.6878 * _51;
  const intD.9 _56;
  struct _Rb_tree_node_baseD.6878 * const _57;
  const intD.9 _63;
  const intD.9 pretmp_64;
  struct _Rb_tree_node_baseD.6878 * _65;
  struct _Rb_tree_node_baseD.6878 * _66;
  struct _Rb_tree_node_baseD.6878 * const _68;
  const intD.9 _80;
  const intD.9 prephitmp_81;
  struct _Rb_tree_node_baseD.6878 * _82;
  struct _Rb_tree_node_baseD.6878 * _83;
  struct _Rb_tree_node_baseD.6878 * _85;
  const intD.9 prephitmp_97;
  const intD.9 pretmp_98;
  const intD.9 prephitmp_106;
  const intD.9 pretmp_108;
  const intD.9 prephitmp_109;
  const intD.9 pretmp_110;

;;   basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.41616 => &__positionD.39292
  # VUSE <.MEM_3(D)>
  # PT = nonlocal 
  _20 = __positionD.39292._M_nodeD.39859;
  # DEBUG thisD.41618 => NULL
  # DEBUG __xD.41617 => _20
  # DEBUG __posD.41722 => _20
  # DEBUG thisD.41614 => this_4(D)
  # PT = nonlocal 
  __j$_M_node_21 = &this_4(D)->_M_implD.39050._M_headerD.39205;
  if (_20 == __j$_M_node_21)
    goto <bb 3>;
  else
    goto <bb 16>;
;;    succ:       3 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 1500, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  _34 = MEM[(long unsigned intD.14 *)this_4(D) + 40B];
  # DEBUG D#28ptD.0 => this_4(D)
  # DEBUG thisD.41622 => D#28ptD.0
  if (_34 != 0)
    goto <bb 4>;
  else
    goto <bb 59>;
;;    succ:       4 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                59 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 750, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.41634 => this_4(D)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _5 = MEM[(struct _Rb_tree_node_baseD.6878 * &)this_4(D) + 32];
  # DEBUG __xD.41630 => _5
  # DEBUG __xD.41548 => _5
  # DEBUG thisD.41549 => _5
  # DEBUG D#29ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)_5]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#29ptD.0
  # DEBUG __xD.41632 => D#29ptD.0
  # DEBUG thisD.41631 => D#21ptD.0
  # DEBUG D#35ptD.0 => &MEM[(const struct pairD.36083 &)_5 + 32].firstD.39938
  # DEBUG D#45ptD.0 => &this_4(D)->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#45ptD.0
  # VUSE <.MEM_3(D)>
  _26 = MEM[(const intD.9 &)_5 + 32];
  # DEBUG D#6ptD.0 => D#35ptD.0
  # VUSE <.MEM_3(D)>
  _27 = MEM[(const intD.9 &)__k_6(D)];
  # DEBUG D#7ptD.0 => __k_6(D)
  # DEBUG thisD.41628 => D#5ptD.0
  # DEBUG __xD.41627 => D#6ptD.0
  # DEBUG __yD.41626 => D#7ptD.0
  if (_26 < _27)
    goto <bb 58>;
  else
    goto <bb 59>;
;;    succ:       58 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                59 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 4398, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # _57 = PHI <_48(8), _49(9)>
  # DEBUG __compD.42249 => D#112ptD.0 < _46
  # DEBUG __yD.42248 => __j$_M_node_77
  # DEBUG __xD.42247 => _57
  if (_57 == 0B)
    goto <bb 10>;
  else
    goto <bb 6>;
;;    succ:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 4002, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 4398, maybe hot
;;   Invalid sum of incoming frequencies 5027, should be 4398
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       60 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_77 = PHI <_42(60), _57(6)>
  # DEBUG __compD.42249 => 1
  # DEBUG __xD.42247 => __j$_M_node_77
  # DEBUG __yD.42248 => __j$_M_node_77
  # DEBUG __xD.41563 => __j$_M_node_77
  # DEBUG __xD.41455 => __j$_M_node_77
  # DEBUG thisD.41456 => __j$_M_node_77
  # DEBUG D#22ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)__j$_M_node_77]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#22ptD.0
  # DEBUG __xD.41565 => D#22ptD.0
  # DEBUG thisD.41564 => D#21ptD.0
  # DEBUG D#30ptD.0 => &MEM[(const struct pairD.36083 &)__j$_M_node_77 + 32].firstD.39938
  # DEBUG D#34ptD.0 => &this_4(D)->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#34ptD.0
  # DEBUG D#112ptD.0 => MEM[(const intD.9 &)__k_6(D)]
  # DEBUG D#6ptD.0 => __k_6(D)
  # VUSE <.MEM_3(D)>
  _46 = MEM[(const intD.9 &)__j$_M_node_77 + 32];
  # DEBUG D#7ptD.0 => D#30ptD.0
  # DEBUG thisD.42263 => D#5ptD.0
  # DEBUG __xD.42264 => D#6ptD.0
  # DEBUG __yD.42265 => D#7ptD.0
  # DEBUG __compD.42249 => NULL
  if (_46 > pretmp_108)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 2199, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _48 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__j$_M_node_77 + 16B];
  # DEBUG D#19ptD.0 => __j$_M_node_77
  # DEBUG __xD.41568 => D#19ptD.0
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 2199, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       7 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _49 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__j$_M_node_77 + 24B];
  # DEBUG D#20ptD.0 => __j$_M_node_77
  # DEBUG __xD.41571 => D#20ptD.0
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 334, maybe hot
;;    prev block 9, next block 61, flags: (NEW, REACHABLE)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # _47 = PHI <_46(5)>
  # PT = nonlocal escaped 
  # __j$_M_node_55 = PHI <__j$_M_node_77(5)>
;;    succ:       61 [100.0%]  (FALLTHRU)

;;   basic block 61, loop depth 0, count 0, freq 334, maybe hot
;;    prev block 10, next block 11, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU)
  # DEBUG thisD.42262 => &__jD.42250
  # DEBUG __xD.42261 => __j$_M_node_55
  # DEBUG __j$_M_nodeD.42267 => __j$_M_node_55
  if (_47 > pretmp_108)
    goto <bb 11>;
  else
    goto <bb 13>;
;;    succ:       11 [34.8%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [65.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 218, maybe hot
;;    prev block 61, next block 12, flags: (NEW, REACHABLE)
;;    pred:       61 [34.8%]  (TRUE_VALUE,EXECUTABLE)
;;                59 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_133 = PHI <__j$_M_node_55(61), _20(59)>
  # DEBUG thisD.42262 => &__jD.42250
  # DEBUG __xD.42261 => __j$_M_node_133
  # DEBUG __j$_M_nodeD.42267 => __j$_M_node_133
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _51 = MEM[(struct _Rb_tree_node_baseD.6878 * *)this_4(D) + 24B];
  # DEBUG D#11ptD.0 => this_4(D)
  # DEBUG thisD.41579 => D#11ptD.0
  # DEBUG thisD.41364 => NULL
  # DEBUG __xD.41363 => _51
  # DEBUG thisD.41575 => &__jD.42250
  # DEBUG __xD.41576 => NULL
  if (_51 == __j$_M_node_133)
    goto <bb 71>;
  else
    goto <bb 12>;
;;    succ:       71 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 195, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.42257 => &__jD.42250
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  __j$_M_node_53 = _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_baseD.6927 (__j$_M_node_133);
  # DEBUG __j$_M_nodeD.42267 => __j$_M_node_53
  # VUSE <.MEM_3(D)>
  pretmp_110 = MEM[(const intD.9 &)__k_6(D)];
  # VUSE <.MEM_3(D)>
  pretmp_98 = MEM[(const intD.9 &)__j$_M_node_53 + 32];
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 413, maybe hot
;;    prev block 12, next block 65, flags: (NEW, REACHABLE)
;;    pred:       61 [65.2%]  (FALSE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_54 = PHI <__j$_M_node_55(61), __j$_M_node_53(12)>
  # PT = nonlocal escaped 
  # __j$_M_node_139 = PHI <__j$_M_node_55(61), __j$_M_node_133(12)>
  # prephitmp_109 = PHI <pretmp_108(61), pretmp_110(12)>
  # prephitmp_97 = PHI <_47(61), pretmp_98(12)>
;;    succ:       65 [100.0%]  (FALLTHRU)

;;   basic block 65, loop depth 0, count 0, freq 413, maybe hot
;;    prev block 13, next block 14, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU)
  # DEBUG __j$_M_nodeD.42267 => __j$_M_node_54
  # DEBUG __xD.41593 => __j$_M_node_54
  # DEBUG __xD.41548 => __j$_M_node_54
  # DEBUG thisD.41549 => __j$_M_node_54
  # DEBUG D#29ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)__j$_M_node_54]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#29ptD.0
  # DEBUG __xD.41595 => D#29ptD.0
  # DEBUG thisD.41594 => D#21ptD.0
  # DEBUG D#31ptD.0 => &MEM[(const struct pairD.36083 &)__j$_M_node_54 + 32].firstD.39938
  # DEBUG D#33ptD.0 => &this_4(D)->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#33ptD.0
  # DEBUG D#6ptD.0 => D#31ptD.0
  # DEBUG D#7ptD.0 => __k_6(D)
  # DEBUG thisD.41591 => D#5ptD.0
  # DEBUG __xD.41590 => D#6ptD.0
  # DEBUG __yD.41589 => D#7ptD.0
  if (prephitmp_97 < prephitmp_109)
    goto <bb 15>;
  else
    goto <bb 14>;
;;    succ:       15 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 252, maybe hot
;;    prev block 65, next block 15, flags: (NEW)
;;    pred:       65 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 413, maybe hot
;;    prev block 14, next block 71, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                65 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # SR.209_105 = PHI <__j$_M_node_54(14), 0B(65)>
  # SR.210_100 = PHI <0B(14), __j$_M_node_139(65)>
;;    succ:       71 [100.0%]  (FALLTHRU)

;;   basic block 71, loop depth 0, count 0, freq 435, maybe hot
;;    prev block 15, next block 64, flags: (NEW)
;;    pred:       15 [100.0%]  (FALLTHRU)
;;                11 [10.1%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped null 
  # SR.209_116 = PHI <SR.209_105(15), 0B(11)>
  # PT = nonlocal escaped null 
  # SR.210_115 = PHI <SR.210_100(15), _51(11)>
;;    succ:       64 [100.0%]  (FALLTHRU)

;;   basic block 64, loop depth 0, count 0, freq 435, maybe hot
;;    prev block 71, next block 16, flags: (NEW)
;;    pred:       71 [100.0%]  (FALLTHRU)
  # DEBUG D#32ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.42267 => D#32ptD.0
  # .MEM_104 = VDEF <.MEM_3(D)>
  MEM[(struct pairD.7331 *)&D.40911] = SR.209_116;
  # .MEM_103 = VDEF <.MEM_104>
  MEM[(struct pairD.7331 *)&D.40911 + 8B] = SR.210_115;
  goto <bb 57>;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 8500, maybe hot
;;    prev block 64, next block 17, flags: (NEW, REACHABLE)
;;    pred:       2 [85.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.41647 => _20
  # DEBUG __xD.41548 => _20
  # DEBUG thisD.41549 => _20
  # DEBUG D#29ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)_20]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#29ptD.0
  # DEBUG __xD.41649 => D#29ptD.0
  # DEBUG thisD.41648 => D#21ptD.0
  # DEBUG D#36ptD.0 => &MEM[(const struct pairD.36083 &)_20 + 32].firstD.39938
  # DEBUG D#47ptD.0 => &this_4(D)->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#47ptD.0
  # VUSE <.MEM_3(D)>
  _28 = MEM[(const intD.9 &)__k_6(D)];
  # DEBUG D#6ptD.0 => __k_6(D)
  # VUSE <.MEM_3(D)>
  _29 = MEM[(const intD.9 &)_20 + 32];
  # DEBUG D#7ptD.0 => D#36ptD.0
  # DEBUG thisD.41645 => D#5ptD.0
  # DEBUG __xD.41644 => D#6ptD.0
  # DEBUG __yD.41643 => D#7ptD.0
  if (_28 < _29)
    goto <bb 17>;
  else
    goto <bb 36>;
;;    succ:       17 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 4250, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __beforeD.41725 => _20
  # DEBUG thisD.41651 => this_4(D)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _9 = MEM[(struct _Rb_tree_node_baseD.6878 * &)this_4(D) + 24];
  if (_9 == _20)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 431, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [10.1%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.41658 => this_4(D)
  # DEBUG thisD.41656 => this_4(D)
  # DEBUG thisD.41653 => &D.40437
  # DEBUG __aD.41654 => NULL
  # DEBUG __bD.41655 => NULL
  # .MEM_41 = VDEF <.MEM_3(D)>
  MEM[(struct pairD.7331 *)&D.40911] = _9;
  # .MEM_40 = VDEF <.MEM_41>
  MEM[(struct pairD.7331 *)&D.40911 + 8B] = _9;
  goto <bb 57>;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 3819, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       17 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.41670 => &__beforeD.40435
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _35 = _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_baseD.6927 (_20);
  # DEBUG __beforeD.41725 => _35
  # DEBUG __xD.41666 => _35
  # DEBUG __xD.41548 => _35
  # DEBUG thisD.41549 => _35
  # DEBUG D#29ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)_35]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#29ptD.0
  # DEBUG __xD.41668 => D#29ptD.0
  # DEBUG thisD.41667 => D#21ptD.0
  # DEBUG D#37ptD.0 => &MEM[(const struct pairD.36083 &)_35 + 32].firstD.39938
  # DEBUG D#44ptD.0 => &this_4(D)->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#44ptD.0
  # VUSE <.MEM_3(D)>
  _30 = MEM[(const intD.9 &)_35 + 32];
  # DEBUG D#6ptD.0 => D#37ptD.0
  # DEBUG D#7ptD.0 => __k_6(D)
  # DEBUG thisD.41664 => D#5ptD.0
  # DEBUG __xD.41663 => D#6ptD.0
  # DEBUG __yD.41662 => D#7ptD.0
  if (_28 > _30)
    goto <bb 20>;
  else
    goto <bb 23>;
;;    succ:       20 [79.3%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [20.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 3028, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       19 [79.3%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _32 = MEM[(struct _Rb_tree_node_baseD.6878 * *)_35 + 24B];
  # DEBUG D#20ptD.0 => _35
  # DEBUG __xD.41673 => D#20ptD.0
  if (_32 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;
;;    succ:       21 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 454, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.41675 => &D.40439
  # DEBUG __aD.41676 => &D.40438
  # DEBUG __bD.41677 => &__beforeD.40435._M_nodeD.39911
  # .MEM_15 = VDEF <.MEM_3(D)>
  MEM[(struct pairD.7331 *)&D.40911] = 0B;
  # .MEM_14 = VDEF <.MEM_15>
  MEM[(struct pairD.7331 *)&D.40911 + 8B] = _35;
  goto <bb 57>;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 2574, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       20 [85.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.41678 => &D.40440
  # DEBUG __aD.41679 => &__posD.40429._M_nodeD.39911
  # DEBUG __bD.41680 => &__posD.40429._M_nodeD.39911
  # .MEM_12 = VDEF <.MEM_3(D)>
  MEM[(struct pairD.7331 *)&D.40911] = _20;
  # .MEM_11 = VDEF <.MEM_12>
  MEM[(struct pairD.7331 *)&D.40911 + 8B] = _20;
  goto <bb 57>;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 791, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       19 [20.7%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.42271 => this_4(D)
  # DEBUG __kD.42272 => __k_6(D)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _7 = MEM[(struct _Rb_tree_node_baseD.6878 * *)this_4(D) + 16B];
  # DEBUG D#18ptD.0 => this_4(D)
  # DEBUG thisD.41555 => D#18ptD.0
  # DEBUG __xD.42274 => NULL
  # DEBUG thisD.42293 => this_4(D)
  # DEBUG __yD.42275 => NULL
  # DEBUG __compD.42276 => 1
  # DEBUG __compD.42276 => 1
  # DEBUG __yD.42275 => __j$_M_node_21
  # DEBUG __xD.42274 => _7
  if (_7 == 0B)
    goto <bb 31>;
  else
    goto <bb 26>;
;;    succ:       31 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 1, count 0, freq 7998, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       28 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                29 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # _43 = PHI <_65(28), _66(29)>
  # DEBUG __compD.42276 => _28 < _63
  # DEBUG __yD.42275 => __j$_M_node_157
  # DEBUG __xD.42274 => _43
  if (_43 == 0B)
    goto <bb 30>;
  else
    goto <bb 25>;
;;    succ:       30 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 7278, maybe hot
;;    prev block 24, next block 26, flags: (NEW)
;;    pred:       24 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 27>;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 720, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 1, count 0, freq 7997, maybe hot
;;    prev block 26, next block 28, flags: (NEW)
;;    pred:       26 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                25 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_157 = PHI <_7(26), _43(25)>
  # DEBUG __compD.42276 => 1
  # DEBUG __xD.42274 => __j$_M_node_157
  # DEBUG __yD.42275 => __j$_M_node_157
  # DEBUG __xD.41563 => __j$_M_node_157
  # DEBUG __xD.41455 => __j$_M_node_157
  # DEBUG thisD.41456 => __j$_M_node_157
  # DEBUG D#22ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)__j$_M_node_157]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#22ptD.0
  # DEBUG __xD.41565 => D#22ptD.0
  # DEBUG thisD.41564 => D#21ptD.0
  # DEBUG D#30ptD.0 => &MEM[(const struct pairD.36083 &)__j$_M_node_157 + 32].firstD.39938
  # DEBUG D#34ptD.0 => &this_4(D)->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#34ptD.0
  # DEBUG D#6ptD.0 => __k_6(D)
  # VUSE <.MEM_3(D)>
  _63 = MEM[(const intD.9 &)__j$_M_node_157 + 32];
  # DEBUG D#7ptD.0 => D#30ptD.0
  # DEBUG thisD.42290 => D#5ptD.0
  # DEBUG __xD.42291 => D#6ptD.0
  # DEBUG __yD.42292 => D#7ptD.0
  # DEBUG __compD.42276 => NULL
  if (_28 < _63)
    goto <bb 28>;
  else
    goto <bb 29>;
;;    succ:       28 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 1, count 0, freq 3999, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       27 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _65 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__j$_M_node_157 + 16B];
  # DEBUG D#19ptD.0 => __j$_M_node_157
  # DEBUG __xD.41568 => D#19ptD.0
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 1, count 0, freq 3999, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       27 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _66 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__j$_M_node_157 + 24B];
  # DEBUG D#20ptD.0 => __j$_M_node_157
  # DEBUG __xD.41571 => D#20ptD.0
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 720, maybe hot
;;    prev block 29, next block 62, flags: (NEW, REACHABLE)
;;    pred:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # _45 = PHI <_63(24)>
  # PT = nonlocal escaped 
  # __j$_M_node_72 = PHI <__j$_M_node_157(24)>
;;    succ:       62 [100.0%]  (FALLTHRU)

;;   basic block 62, loop depth 0, count 0, freq 720, maybe hot
;;    prev block 30, next block 31, flags: (NEW)
;;    pred:       30 [100.0%]  (FALLTHRU)
  # DEBUG thisD.42289 => &__jD.42277
  # DEBUG __xD.42288 => __j$_M_node_72
  # DEBUG __j$_M_nodeD.42294 => __j$_M_node_72
  if (_28 < _45)
    goto <bb 31>;
  else
    goto <bb 33>;
;;    succ:       31 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [55.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 395, maybe hot
;;    prev block 62, next block 32, flags: (NEW, REACHABLE)
;;    pred:       62 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_153 = PHI <__j$_M_node_72(62), __j$_M_node_21(23)>
  # DEBUG thisD.42289 => &__jD.42277
  # DEBUG __xD.42288 => __j$_M_node_153
  # DEBUG __j$_M_nodeD.42294 => __j$_M_node_153
  # DEBUG D#11ptD.0 => this_4(D)
  # DEBUG thisD.41579 => D#11ptD.0
  # DEBUG thisD.41364 => NULL
  # DEBUG __xD.41363 => _9
  # DEBUG thisD.41575 => &__jD.42277
  # DEBUG __xD.41576 => NULL
  if (_9 == __j$_M_node_153)
    goto <bb 72>;
  else
    goto <bb 32>;
;;    succ:       72 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 355, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       31 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.42284 => &__jD.42277
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  __j$_M_node_70 = _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_baseD.6927 (__j$_M_node_153);
  # DEBUG __j$_M_nodeD.42294 => __j$_M_node_70
  # VUSE <.MEM_3(D)>
  pretmp_10 = MEM[(const intD.9 &)__j$_M_node_70 + 32];
;;    succ:       33 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 751, maybe hot
;;    prev block 32, next block 67, flags: (NEW, REACHABLE)
;;    pred:       62 [55.0%]  (FALSE_VALUE,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_71 = PHI <__j$_M_node_72(62), __j$_M_node_70(32)>
  # PT = nonlocal escaped 
  # __j$_M_node_152 = PHI <__j$_M_node_72(62), __j$_M_node_153(32)>
  # prephitmp_106 = PHI <_45(62), pretmp_10(32)>
;;    succ:       67 [100.0%]  (FALLTHRU)

;;   basic block 67, loop depth 0, count 0, freq 751, maybe hot
;;    prev block 33, next block 34, flags: (NEW)
;;    pred:       33 [100.0%]  (FALLTHRU)
  # DEBUG __j$_M_nodeD.42294 => __j$_M_node_71
  # DEBUG __xD.41593 => __j$_M_node_71
  # DEBUG __xD.41548 => __j$_M_node_71
  # DEBUG thisD.41549 => __j$_M_node_71
  # DEBUG D#29ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)__j$_M_node_71]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#29ptD.0
  # DEBUG __xD.41595 => D#29ptD.0
  # DEBUG thisD.41594 => D#21ptD.0
  # DEBUG D#31ptD.0 => &MEM[(const struct pairD.36083 &)__j$_M_node_71 + 32].firstD.39938
  # DEBUG D#33ptD.0 => &this_4(D)->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#33ptD.0
  # DEBUG D#6ptD.0 => D#31ptD.0
  # DEBUG D#7ptD.0 => __k_6(D)
  # DEBUG thisD.41591 => D#5ptD.0
  # DEBUG __xD.41590 => D#6ptD.0
  # DEBUG __yD.41589 => D#7ptD.0
  if (_28 > prephitmp_106)
    goto <bb 35>;
  else
    goto <bb 34>;
;;    succ:       35 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 458, maybe hot
;;    prev block 67, next block 35, flags: (NEW)
;;    pred:       67 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 751, maybe hot
;;    prev block 34, next block 72, flags: (NEW, REACHABLE)
;;    pred:       34 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                67 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # SR.211_89 = PHI <__j$_M_node_71(34), 0B(67)>
  # SR.212_99 = PHI <0B(34), __j$_M_node_152(67)>
;;    succ:       72 [100.0%]  (FALLTHRU)

;;   basic block 72, loop depth 0, count 0, freq 791, maybe hot
;;    prev block 35, next block 66, flags: (NEW)
;;    pred:       35 [100.0%]  (FALLTHRU)
;;                31 [10.1%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped null 
  # SR.211_114 = PHI <SR.211_89(35), 0B(31)>
  # PT = nonlocal escaped null 
  # SR.212_113 = PHI <SR.212_99(35), _9(31)>
;;    succ:       66 [100.0%]  (FALLTHRU)

;;   basic block 66, loop depth 0, count 0, freq 791, maybe hot
;;    prev block 72, next block 36, flags: (NEW)
;;    pred:       72 [100.0%]  (FALLTHRU)
  # DEBUG D#32ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.42294 => D#32ptD.0
  # .MEM_96 = VDEF <.MEM_3(D)>
  MEM[(struct pairD.7331 *)&D.40911] = SR.211_114;
  # .MEM_90 = VDEF <.MEM_96>
  MEM[(struct pairD.7331 *)&D.40911 + 8B] = SR.212_113;
  goto <bb 57>;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 4250, maybe hot
;;    prev block 66, next block 37, flags: (NEW, REACHABLE)
;;    pred:       16 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.41687 => _20
  # DEBUG __xD.41548 => _20
  # DEBUG thisD.41549 => _20
  # DEBUG D#29ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)_20]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#29ptD.0
  # DEBUG __xD.41689 => D#29ptD.0
  # DEBUG thisD.41688 => D#21ptD.0
  # DEBUG D#38ptD.0 => &MEM[(const struct pairD.36083 &)_20 + 32].firstD.39938
  # DEBUG D#46ptD.0 => &this_4(D)->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#46ptD.0
  # DEBUG D#6ptD.0 => D#38ptD.0
  # DEBUG D#7ptD.0 => __k_6(D)
  # DEBUG thisD.41685 => D#5ptD.0
  # DEBUG __xD.41684 => D#6ptD.0
  # DEBUG __yD.41683 => D#7ptD.0
  if (_28 > _29)
    goto <bb 37>;
  else
    goto <bb 56>;
;;    succ:       37 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                56 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 2125, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       36 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __afterD.41732 => _20
  # DEBUG thisD.41691 => this_4(D)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _17 = MEM[(struct _Rb_tree_node_baseD.6878 * &)this_4(D) + 32];
  if (_17 == _20)
    goto <bb 38>;
  else
    goto <bb 39>;
;;    succ:       38 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 215, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       37 [10.1%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.41696 => this_4(D)
  # DEBUG thisD.41693 => &D.40445
  # DEBUG __aD.41694 => &D.40444
  # DEBUG __bD.41695 => NULL
  # .MEM_38 = VDEF <.MEM_3(D)>
  MEM[(struct pairD.7331 *)&D.40911] = 0B;
  # .MEM_8 = VDEF <.MEM_38>
  MEM[(struct pairD.7331 *)&D.40911 + 8B] = _17;
  goto <bb 57>;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 1910, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       37 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.41708 => &__afterD.40442
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _36 = _ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_baseD.6923 (_20);
  # DEBUG __afterD.41732 => _36
  # DEBUG __xD.41704 => _36
  # DEBUG __xD.41548 => _36
  # DEBUG thisD.41549 => _36
  # DEBUG D#29ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)_36]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#29ptD.0
  # DEBUG __xD.41706 => D#29ptD.0
  # DEBUG thisD.41705 => D#21ptD.0
  # DEBUG D#39ptD.0 => &MEM[(const struct pairD.36083 &)_36 + 32].firstD.39938
  # DEBUG D#43ptD.0 => &this_4(D)->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#43ptD.0
  # DEBUG D#6ptD.0 => __k_6(D)
  # VUSE <.MEM_3(D)>
  _31 = MEM[(const intD.9 &)_36 + 32];
  # DEBUG D#7ptD.0 => D#39ptD.0
  # DEBUG thisD.41702 => D#5ptD.0
  # DEBUG __xD.41701 => D#6ptD.0
  # DEBUG __yD.41700 => D#7ptD.0
  if (_28 < _31)
    goto <bb 40>;
  else
    goto <bb 43>;
;;    succ:       40 [79.3%]  (TRUE_VALUE,EXECUTABLE)
;;                43 [20.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 0, count 0, freq 1514, maybe hot
;;    prev block 39, next block 41, flags: (NEW, REACHABLE)
;;    pred:       39 [79.3%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _33 = MEM[(struct _Rb_tree_node_baseD.6878 * *)_20 + 24B];
  # DEBUG D#20ptD.0 => _20
  # DEBUG __xD.41711 => D#20ptD.0
  if (_33 == 0B)
    goto <bb 41>;
  else
    goto <bb 42>;
;;    succ:       41 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                42 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 41, loop depth 0, count 0, freq 227, maybe hot
;;    prev block 40, next block 42, flags: (NEW, REACHABLE)
;;    pred:       40 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.41713 => &D.40447
  # DEBUG __aD.41714 => &D.40446
  # DEBUG __bD.41715 => &__posD.40429._M_nodeD.39911
  # .MEM_37 = VDEF <.MEM_3(D)>
  MEM[(struct pairD.7331 *)&D.40911] = 0B;
  # .MEM_25 = VDEF <.MEM_37>
  MEM[(struct pairD.7331 *)&D.40911 + 8B] = _20;
  goto <bb 57>;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 1287, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       40 [85.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.41716 => &D.40448
  # DEBUG __aD.41717 => &__afterD.40442._M_nodeD.39911
  # DEBUG __bD.41718 => &__afterD.40442._M_nodeD.39911
  # .MEM_18 = VDEF <.MEM_3(D)>
  MEM[(struct pairD.7331 *)&D.40911] = _36;
  # .MEM_19 = VDEF <.MEM_18>
  MEM[(struct pairD.7331 *)&D.40911 + 8B] = _36;
  goto <bb 57>;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 43, loop depth 0, count 0, freq 395, maybe hot
;;    prev block 42, next block 44, flags: (NEW, REACHABLE)
;;    pred:       39 [20.7%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.42298 => this_4(D)
  # DEBUG __kD.42299 => __k_6(D)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _13 = MEM[(struct _Rb_tree_node_baseD.6878 * *)this_4(D) + 16B];
  # DEBUG D#18ptD.0 => this_4(D)
  # DEBUG thisD.41555 => D#18ptD.0
  # DEBUG __xD.42301 => NULL
  # DEBUG thisD.42320 => this_4(D)
  # DEBUG __yD.42302 => NULL
  # DEBUG __compD.42303 => 1
  # DEBUG __compD.42303 => 1
  # DEBUG __yD.42302 => __j$_M_node_21
  # DEBUG __xD.42301 => _13
  if (_13 == 0B)
    goto <bb 51>;
  else
    goto <bb 46>;
;;    succ:       51 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                46 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 44, loop depth 1, count 0, freq 3999, maybe hot
;;    prev block 43, next block 45, flags: (NEW, REACHABLE)
;;    pred:       48 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                49 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # _68 = PHI <_82(48), _83(49)>
  # DEBUG __compD.42303 => _28 < _80
  # DEBUG __yD.42302 => __j$_M_node_59
  # DEBUG __xD.42301 => _68
  if (_68 == 0B)
    goto <bb 50>;
  else
    goto <bb 45>;
;;    succ:       50 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                45 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 45, loop depth 1, count 0, freq 3639, maybe hot
;;    prev block 44, next block 46, flags: (NEW)
;;    pred:       44 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 47>;
;;    succ:       47 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 46, loop depth 0, count 0, freq 359, maybe hot
;;    prev block 45, next block 47, flags: (NEW, REACHABLE)
;;    pred:       43 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       47 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 47, loop depth 1, count 0, freq 3999, maybe hot
;;    prev block 46, next block 48, flags: (NEW)
;;    pred:       46 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                45 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_59 = PHI <_13(46), _68(45)>
  # DEBUG __compD.42303 => 1
  # DEBUG __xD.42301 => __j$_M_node_59
  # DEBUG __yD.42302 => __j$_M_node_59
  # DEBUG __xD.41563 => __j$_M_node_59
  # DEBUG __xD.41455 => __j$_M_node_59
  # DEBUG thisD.41456 => __j$_M_node_59
  # DEBUG D#22ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)__j$_M_node_59]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#22ptD.0
  # DEBUG __xD.41565 => D#22ptD.0
  # DEBUG thisD.41564 => D#21ptD.0
  # DEBUG D#30ptD.0 => &MEM[(const struct pairD.36083 &)__j$_M_node_59 + 32].firstD.39938
  # DEBUG D#34ptD.0 => &this_4(D)->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#34ptD.0
  # DEBUG D#6ptD.0 => __k_6(D)
  # VUSE <.MEM_3(D)>
  _80 = MEM[(const intD.9 &)__j$_M_node_59 + 32];
  # DEBUG D#7ptD.0 => D#30ptD.0
  # DEBUG thisD.42317 => D#5ptD.0
  # DEBUG __xD.42318 => D#6ptD.0
  # DEBUG __yD.42319 => D#7ptD.0
  # DEBUG __compD.42303 => NULL
  if (_28 < _80)
    goto <bb 48>;
  else
    goto <bb 49>;
;;    succ:       48 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                49 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 48, loop depth 1, count 0, freq 1999, maybe hot
;;    prev block 47, next block 49, flags: (NEW, REACHABLE)
;;    pred:       47 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _82 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__j$_M_node_59 + 16B];
  # DEBUG D#19ptD.0 => __j$_M_node_59
  # DEBUG __xD.41568 => D#19ptD.0
  goto <bb 44>;
;;    succ:       44 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 49, loop depth 1, count 0, freq 1999, maybe hot
;;    prev block 48, next block 50, flags: (NEW, REACHABLE)
;;    pred:       47 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _83 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__j$_M_node_59 + 24B];
  # DEBUG D#20ptD.0 => __j$_M_node_59
  # DEBUG __xD.41571 => D#20ptD.0
  goto <bb 44>;
;;    succ:       44 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 50, loop depth 0, count 0, freq 359, maybe hot
;;    prev block 49, next block 63, flags: (NEW, REACHABLE)
;;    pred:       44 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_107 = PHI <__j$_M_node_59(44)>
  # _56 = PHI <_80(44)>
;;    succ:       63 [100.0%]  (FALLTHRU)

;;   basic block 63, loop depth 0, count 0, freq 359, maybe hot
;;    prev block 50, next block 51, flags: (NEW)
;;    pred:       50 [100.0%]  (FALLTHRU)
  # DEBUG thisD.42316 => &__jD.42304
  # DEBUG __xD.42315 => __j$_M_node_107
  # DEBUG __j$_M_nodeD.42321 => __j$_M_node_107
  if (_28 < _56)
    goto <bb 51>;
  else
    goto <bb 53>;
;;    succ:       51 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                53 [55.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 51, loop depth 0, count 0, freq 198, maybe hot
;;    prev block 63, next block 52, flags: (NEW, REACHABLE)
;;    pred:       63 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                43 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_156 = PHI <__j$_M_node_107(63), __j$_M_node_21(43)>
  # DEBUG thisD.42316 => &__jD.42304
  # DEBUG __xD.42315 => __j$_M_node_156
  # DEBUG __j$_M_nodeD.42321 => __j$_M_node_156
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _85 = MEM[(struct _Rb_tree_node_baseD.6878 * *)this_4(D) + 24B];
  # DEBUG D#11ptD.0 => this_4(D)
  # DEBUG thisD.41579 => D#11ptD.0
  # DEBUG thisD.41364 => NULL
  # DEBUG __xD.41363 => _85
  # DEBUG thisD.41575 => &__jD.42304
  # DEBUG __xD.41576 => NULL
  if (_85 == __j$_M_node_156)
    goto <bb 73>;
  else
    goto <bb 52>;
;;    succ:       73 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                52 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 52, loop depth 0, count 0, freq 178, maybe hot
;;    prev block 51, next block 53, flags: (NEW, REACHABLE)
;;    pred:       51 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.42311 => &__jD.42304
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  __j$_M_node_87 = _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_baseD.6927 (__j$_M_node_156);
  # DEBUG __j$_M_nodeD.42321 => __j$_M_node_87
  # VUSE <.MEM_3(D)>
  pretmp_64 = MEM[(const intD.9 &)__j$_M_node_87 + 32];
;;    succ:       53 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 53, loop depth 0, count 0, freq 375, maybe hot
;;    prev block 52, next block 69, flags: (NEW, REACHABLE)
;;    pred:       63 [55.0%]  (FALSE_VALUE,EXECUTABLE)
;;                52 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_88 = PHI <__j$_M_node_107(63), __j$_M_node_87(52)>
  # PT = nonlocal escaped 
  # __j$_M_node_154 = PHI <__j$_M_node_107(63), __j$_M_node_156(52)>
  # prephitmp_81 = PHI <_56(63), pretmp_64(52)>
;;    succ:       69 [100.0%]  (FALLTHRU)

;;   basic block 69, loop depth 0, count 0, freq 375, maybe hot
;;    prev block 53, next block 54, flags: (NEW)
;;    pred:       53 [100.0%]  (FALLTHRU)
  # DEBUG __j$_M_nodeD.42321 => __j$_M_node_88
  # DEBUG __xD.41593 => __j$_M_node_88
  # DEBUG __xD.41548 => __j$_M_node_88
  # DEBUG thisD.41549 => __j$_M_node_88
  # DEBUG D#29ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)__j$_M_node_88]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#29ptD.0
  # DEBUG __xD.41595 => D#29ptD.0
  # DEBUG thisD.41594 => D#21ptD.0
  # DEBUG D#31ptD.0 => &MEM[(const struct pairD.36083 &)__j$_M_node_88 + 32].firstD.39938
  # DEBUG D#33ptD.0 => &this_4(D)->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#33ptD.0
  # DEBUG D#6ptD.0 => D#31ptD.0
  # DEBUG D#7ptD.0 => __k_6(D)
  # DEBUG thisD.41591 => D#5ptD.0
  # DEBUG __xD.41590 => D#6ptD.0
  # DEBUG __yD.41589 => D#7ptD.0
  if (_28 > prephitmp_81)
    goto <bb 55>;
  else
    goto <bb 54>;
;;    succ:       55 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                54 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 54, loop depth 0, count 0, freq 229, maybe hot
;;    prev block 69, next block 55, flags: (NEW)
;;    pred:       69 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       55 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 55, loop depth 0, count 0, freq 375, maybe hot
;;    prev block 54, next block 73, flags: (NEW, REACHABLE)
;;    pred:       54 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                69 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # SR.213_102 = PHI <__j$_M_node_88(54), 0B(69)>
  # SR.214_101 = PHI <0B(54), __j$_M_node_154(69)>
;;    succ:       73 [100.0%]  (FALLTHRU)

;;   basic block 73, loop depth 0, count 0, freq 395, maybe hot
;;    prev block 55, next block 68, flags: (NEW)
;;    pred:       55 [100.0%]  (FALLTHRU)
;;                51 [10.1%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped null 
  # SR.213_112 = PHI <SR.213_102(55), 0B(51)>
  # PT = nonlocal escaped null 
  # SR.214_111 = PHI <SR.214_101(55), _85(51)>
;;    succ:       68 [100.0%]  (FALLTHRU)

;;   basic block 68, loop depth 0, count 0, freq 395, maybe hot
;;    prev block 73, next block 56, flags: (NEW)
;;    pred:       73 [100.0%]  (FALLTHRU)
  # DEBUG D#32ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.42321 => D#32ptD.0
  # .MEM_76 = VDEF <.MEM_3(D)>
  MEM[(struct pairD.7331 *)&D.40911] = SR.213_112;
  # .MEM_75 = VDEF <.MEM_76>
  MEM[(struct pairD.7331 *)&D.40911 + 8B] = SR.214_111;
  goto <bb 57>;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 56, loop depth 0, count 0, freq 2125, maybe hot
;;    prev block 68, next block 57, flags: (NEW, REACHABLE)
;;    pred:       36 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.41719 => &D.40451
  # DEBUG __aD.41720 => &__posD.40429._M_nodeD.39911
  # DEBUG __bD.41721 => &D.40450
  # .MEM_39 = VDEF <.MEM_3(D)>
  MEM[(struct pairD.7331 *)&D.40911] = _20;
  # .MEM_16 = VDEF <.MEM_39>
  MEM[(struct pairD.7331 *)&D.40911 + 8B] = 0B;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 57, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 56, next block 70, flags: (NEW, REACHABLE)
;;    pred:       58 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                64 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                21 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                56 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                68 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                42 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                18 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                66 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2 = PHI <.MEM_22(58), .MEM_103(64), .MEM_14(21), .MEM_25(41), .MEM_16(56), .MEM_8(38), .MEM_75(68), .MEM_19(42), .MEM_40(18), .MEM_90(66), .MEM_11(22)>
;;    succ:       70 [100.0%]  (FALLTHRU)

;;   basic block 70, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 57, next block 58, flags: (NEW)
;;    pred:       57 [100.0%]  (FALLTHRU)
  # DEBUG D#42ptD.0 => {CLOBBER}
  # DEBUG __posD.41722 => D#42ptD.0
  # VUSE <.MEM_2>
  return D.40911;
;;    succ:       EXIT [100.0%] 

;;   basic block 58, loop depth 0, count 0, freq 1065, maybe hot
;;   Invalid sum of incoming frequencies 375, should be 1065
;;    prev block 70, next block 59, flags: (NEW, REACHABLE)
;;    pred:       4 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.41639 => this_4(D)
  # DEBUG thisD.41636 => &D.40433
  # DEBUG __aD.41637 => &D.40432
  # DEBUG __bD.41638 => NULL
  # .MEM_24 = VDEF <.MEM_3(D)>
  MEM[(struct pairD.7331 *)&D.40911] = 0B;
  # .MEM_22 = VDEF <.MEM_24>
  MEM[(struct pairD.7331 *)&D.40911 + 8B] = _5;
  goto <bb 57>;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 59, loop depth 0, count 0, freq 1126, maybe hot
;;    prev block 58, next block 60, flags: (NEW, REACHABLE)
;;    pred:       4 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                3 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.42244 => this_4(D)
  # DEBUG __kD.42245 => __k_6(D)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _42 = MEM[(struct _Rb_tree_node_baseD.6878 * *)this_4(D) + 16B];
  # DEBUG D#18ptD.0 => this_4(D)
  # DEBUG thisD.41555 => D#18ptD.0
  # DEBUG __xD.42247 => NULL
  # DEBUG thisD.42266 => this_4(D)
  # DEBUG __yD.42248 => NULL
  # DEBUG __compD.42249 => 1
  # DEBUG __compD.42249 => 1
  # DEBUG __yD.42248 => _20
  # DEBUG __xD.42247 => _42
  if (_42 == 0B)
    goto <bb 11>;
  else
    goto <bb 60>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                60 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 60, loop depth 0, count 0, freq 1025, maybe hot
;;    prev block 59, next block 1, flags: (NEW)
;;    pred:       59 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  pretmp_108 = MEM[(const intD.9 &)__k_6(D)];
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

}



;; Function virtual void SeparableInputFirstAllocator::Allocate() (_ZN28SeparableInputFirstAllocator8AllocateEv, funcdef_no=1710, decl_uid=37720, cgraph_uid=413, symbol_order=414)


Pass statistics:
----------------

virtual void SeparableInputFirstAllocator::Allocate() (struct SeparableInputFirstAllocatorD.37711 * const thisD.38627)
{
  struct _Rb_tree_node_baseD.6878 * SR.220D.42408;
  struct _Rb_tree_node_baseD.6878 * SR.219D.42407;
  struct _Rb_tree_node_baseD.6878 * SR.218D.42406;
  const struct _Rb_tree_node_baseD.6878 * __posD.42405;
  struct _Rb_tree_nodeD.38976 * D.42402;
  boolD.2757 __insert_leftD.42380;
  struct iteratorD.39276 D.42385;
  struct iteratorD.39276 D.42374;
  struct pairD.7331 __resD.42369;
  struct _Rb_tree_node_baseD.6878 * __res$firstD.42373;
  struct _Rb_tree_node_baseD.6878 * __res$secondD.42372;
  struct const_iteratorD.39278 __positionD.42366;
  struct value_typeD.38758 D.42364;
  struct _Rb_tree_nodeD.38976 * __yD.42358;
  struct iteratorD.39276 D.42363;
  struct const_iteratorD.39278 __posD.42348;
  struct _Rb_tree_node_baseD.6878 * const __i$_M_nodeD.42362;
  struct _Rb_tree_node_baseD.6878 * SR.179D.42361;
  struct mapped_typeD.38757 & D.42360;
  const struct _Rb_tree_node_baseD.6878 * const req_iter$_M_nodeD.42201;
  const struct _Rb_tree_node_baseD.6878 * const port_iter$_M_nodeD.42199;
  intD.9 labelD.39990;
  static const charD.10 _ZZN28SeparableInputFirstAllocator8AllocateEvE19__PRETTY_FUNCTION__D.39992[54] = "virtual void SeparableInputFirstAllocator::Allocate()";
  intD.9 _7;
  long unsigned intD.14 _8;
  struct ArbiterD.36919 * & _9;
  intD.9 _11;
  long unsigned intD.14 _12;
  long unsigned intD.14 _13;
  struct _Rb_tree_node_baseD.6878 * _14;
  struct mapD.36085 & _15;
  long unsigned intD.14 _16;
  struct ArbiterD.36919 * _17;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _18;
  intD.9 (*__vtbl_ptr_typeD.2760) () _19;
  intD.9 _20;
  intD.9 _21;
  intD.9 _22;
  struct ArbiterD.36919 * _25;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _26;
  intD.9 (*__vtbl_ptr_typeD.2760) () _27;
  const intD.9 _29;
  long unsigned intD.14 _30;
  intD.9 _33;
  intD.9 _35;
  intD.9 label.2_36;
  struct ArbiterD.36919 * _37;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _38;
  intD.9 (*__vtbl_ptr_typeD.2760) () _39;
  intD.9 _40;
  intD.9 _49;
  long unsigned intD.14 _50;
  struct ArbiterD.36919 * _51;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _52;
  intD.9 (*__vtbl_ptr_typeD.2760) () _53;
  const intD.9 _55;
  long unsigned intD.14 _56;
  struct mapD.36085 & _57;
  intD.9 _58;
  intD.9 _59;
  long unsigned intD.14 _60;
  long unsigned intD.14 _61;
  intD.9 _62;
  intD.9 _65;
  long unsigned intD.14 _66;
  struct ArbiterD.36919 * _68;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _69;
  intD.9 (*__vtbl_ptr_typeD.2760) () _70;
  intD.9 _72;
  long unsigned intD.14 _73;
  struct ArbiterD.36919 * _75;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _76;
  intD.9 (*__vtbl_ptr_typeD.2760) () _77;
  struct mapD.36085 * _82;
  struct mapD.36085 * _83;
  struct mapD.36085 * _84;
  struct ArbiterD.36919 * * _85;
  struct ArbiterD.36919 * * _86;
  struct ArbiterD.36919 * * _87;
  struct ArbiterD.36919 * * _88;
  struct ArbiterD.36919 * * _89;
  struct ArbiterD.36919 * * _90;
  intD.9 * _91;
  intD.9 * _92;
  long unsigned intD.14 _94;
  struct ArbiterD.36919 * & _95;
  long unsigned intD.14 _96;
  struct mapD.36085 & _97;
  long unsigned intD.14 _98;
  struct ArbiterD.36919 * & _99;
  long unsigned intD.14 _102;
  struct ArbiterD.36919 * & _103;
  long unsigned intD.14 _104;
  intD.9 & _105;
  long unsigned intD.14 _106;
  intD.9 & _107;
  long unsigned intD.14 _108;
  struct ArbiterD.36919 * & _109;
  long unsigned intD.14 _110;
  intD.9 & _111;
  long unsigned intD.14 _112;
  struct ArbiterD.36919 * & _113;
  const intD.9 _119;
  const intD.9 _125;
  struct _Rep_typeD.38970 * _128;
  boolD.2757 _136;
  const intD.9 _137;
  const intD.9 _138;
  boolD.2757 _140;
  long unsigned intD.14 _143;
  long unsigned intD.14 _144;
  struct _Rb_tree_nodeD.38976 * _145;
  const struct _Rb_tree_node_baseD.6878 * _147;
  const struct _Rb_tree_node_baseD.6878 * _172;
  boolD.2757 _174;
  struct _Rb_tree_node_baseD.6878 * _185;
  long unsigned intD.14 _187;
  long unsigned intD.14 _196;
  long unsigned intD.14 _232;
  const intD.9 pretmp_240;
  const intD.9 prephitmp_241;
  intD.9 pretmp_242;
  intD.9 prephitmp_243;
  const intD.9 pretmp_244;
  const intD.9 prephitmp_245;
  const intD.9 pretmp_246;

;;   basic block 2, loop depth 0, count 0, freq 22, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#88ptD.0 => &this_5(D)->D.37748.D.37705._in_occD.36081
  # DEBUG thisD.42098 => D#88ptD.0
  # DEBUG D#9ptD.0 => &MEM[(const struct setD.35243 *)D#88ptD.0]._M_tD.35255
  # VUSE <.MEM_6(D)>
  # PT = nonlocal escaped 
  port_iter$_M_node_74 = MEM[(struct _Rb_tree_node_baseD.6878 * *)this_5(D) + 184B];
  # DEBUG D#8ptD.0 => D#9ptD.0
  # DEBUG thisD.41334 => D#8ptD.0
  # DEBUG thisD.41326 => NULL
  # DEBUG __xD.41325 => port_iter$_M_node_74
  # DEBUG port_iter$_M_nodeD.42199 => port_iter$_M_node_74
  # DEBUG port_iter$_M_nodeD.42199 => port_iter$_M_node_74
  # DEBUG D#97ptD.0 => &this_5(D)->D.37748.D.37705._in_occD.36081
  # DEBUG thisD.42104 => D#97ptD.0
  # DEBUG D#10ptD.0 => &MEM[(const struct setD.35243 *)D#97ptD.0]._M_tD.35255
  # DEBUG thisD.42105 => D#10ptD.0
  # PT = nonlocal 
  _172 = &MEM[(const struct _Rb_treeD.35254 *)this_5(D) + 160B]._M_implD.35332._M_headerD.35498;
  # DEBUG thisD.41344 => NULL
  # DEBUG __xD.41343 => _172
  # DEBUG thisD.42101 => &port_iterD.38629
  # DEBUG __xD.42102 => &D.38753
  if (port_iter$_M_node_74 != _172)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [97.8%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [2.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 21, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [2.2%]  (FALSE_VALUE,EXECUTABLE)
;;                28 [2.2%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_239 = PHI <.MEM_6(D)(2), .MEM_43(28)>
  # DEBUG D#98ptD.0 => &this_5(D)->D.37748.D.37705._out_occD.36082
  # DEBUG thisD.42156 => D#98ptD.0
  # DEBUG D#9ptD.0 => &MEM[(const struct setD.35243 *)D#98ptD.0]._M_tD.35255
  # VUSE <.MEM_239>
  # PT = nonlocal escaped 
  port_iter$_M_node_42 = MEM[(struct _Rb_tree_node_baseD.6878 * *)this_5(D) + 232B];
  # DEBUG D#8ptD.0 => D#9ptD.0
  # DEBUG thisD.41334 => D#8ptD.0
  # DEBUG thisD.41326 => NULL
  # DEBUG __xD.41325 => port_iter$_M_node_42
  # DEBUG port_iter$_M_nodeD.42199 => port_iter$_M_node_42
  # DEBUG port_iter$_M_nodeD.42199 => port_iter$_M_node_42
  # DEBUG D#107ptD.0 => &this_5(D)->D.37748.D.37705._out_occD.36082
  # DEBUG thisD.42162 => D#107ptD.0
  # DEBUG D#10ptD.0 => &MEM[(const struct setD.35243 *)D#107ptD.0]._M_tD.35255
  # DEBUG thisD.42163 => D#10ptD.0
  # PT = nonlocal 
  _147 = &MEM[(const struct _Rb_treeD.35254 *)this_5(D) + 208B]._M_implD.35332._M_headerD.35498;
  # DEBUG thisD.41344 => NULL
  # DEBUG __xD.41343 => _147
  # DEBUG thisD.42159 => &port_iterD.38629
  # DEBUG __xD.42160 => &D.39998
  if (port_iter$_M_node_42 != _147)
    goto <bb 31>;
  else
    goto <bb 30>;
;;    succ:       31 [97.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [3.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 22, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [97.8%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                29 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_192 = PHI <.MEM_6(D)(4), .MEM_43(29)>
  # PT = nonlocal escaped 
  # port_iter$_M_node_189 = PHI <port_iter$_M_node_74(4), port_iter$_M_node_100(29)>
  # DEBUG port_iter$_M_nodeD.42199 => port_iter$_M_node_189
  # DEBUG D#97ptD.0 => &this_5(D)->D.37748.D.37705._in_occD.36081
  # DEBUG thisD.42104 => D#97ptD.0
  # DEBUG D#10ptD.0 => &MEM[(const struct setD.35243 *)D#97ptD.0]._M_tD.35255
  # DEBUG thisD.42105 => D#10ptD.0
  # DEBUG thisD.41344 => NULL
  # DEBUG __xD.41343 => _172
  # DEBUG thisD.42101 => &port_iterD.38629
  # DEBUG __xD.42102 => &D.38753
  # DEBUG thisD.42117 => &port_iterD.38629
  # DEBUG thisD.42118 => port_iter$_M_node_189
  # DEBUG D#115ptD.0 => &MEM[(const struct _Rb_tree_nodeD.35258 *)port_iter$_M_node_189]._M_value_fieldD.40110
  # DEBUG __rD.41349 => D#115ptD.0
  # DEBUG inputD.38754 => D#115ptD.0
  # VUSE <.MEM_192>
  _7 = MEM[(const intD.9 &)port_iter$_M_node_189 + 32];
  # RANGE ~[2147483648, 18446744071562067967]
  _8 = (long unsigned intD.14) _7;
  # DEBUG D#89ptD.0 => &this_5(D)->D.37748.D.37705._in_reqD.36832
  # VUSE <.MEM_192>
  # PT = nonlocal escaped 
  _82 = MEM[(struct mapD.36085 * *)this_5(D) + 256B];
  # DEBUG D#2ptD.0 => D#89ptD.0
  # DEBUG __nD.42114 => _8
  # DEBUG thisD.42115 => D#2ptD.0
  # RANGE [0, 18446744073709551568] NONZERO 18446744073709551600
  _61 = _8 * 48;
  # PT = nonlocal escaped 
  _57 = _82 + _61;
  # DEBUG thisD.42110 => NULL
  # VUSE <.MEM_192>
  # PT = nonlocal escaped 
  req_iter$_M_node_10 = MEM[(struct _Rb_tree_node_baseD.6878 * *)_57 + 24B];
  # DEBUG D#11ptD.0 => D#12ptD.0
  # DEBUG thisD.41372 => D#11ptD.0
  # DEBUG thisD.41364 => NULL
  # DEBUG __xD.41363 => req_iter$_M_node_10
  # DEBUG thisD.42108 => &req_iterD.39818
  # DEBUG __itD.42109 => &D.39923
  # DEBUG req_iter$_M_nodeD.42201 => req_iter$_M_node_10
  # DEBUG req_iter$_M_nodeD.42201 => req_iter$_M_node_10
  # DEBUG D#93ptD.0 => &this_5(D)->D.37748.D.37705._in_reqD.36832
  # DEBUG D#2ptD.0 => D#93ptD.0
  # DEBUG __nD.42130 => _8
  # DEBUG thisD.42131 => D#2ptD.0
  # DEBUG thisD.42125 => NULL
  # DEBUG thisD.42126 => D#13ptD.0
  # PT = nonlocal escaped 
  _185 = &MEM[(struct _Rb_treeD.38972 *)_57]._M_implD.39050._M_headerD.39205;
  # DEBUG thisD.41382 => NULL
  # DEBUG __xD.41381 => _185
  # DEBUG thisD.42123 => &D.39988
  # DEBUG __itD.42124 => &D.39934
  # DEBUG thisD.42120 => &req_iterD.39818
  # DEBUG __xD.42121 => &D.39988
  if (req_iter$_M_node_10 != _185)
    goto <bb 6>;
  else
    goto <bb 10>;
;;    succ:       6 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_191 = PHI <.MEM_192(6), .MEM_23(9)>
  # RANGE ~[2147483648, 18446744071562067967]
  # _196 = PHI <_8(6), _12(9)>
  # PT = nonlocal escaped 
  # req_iter$_M_node_186 = PHI <req_iter$_M_node_10(6), req_iter$_M_node_93(9)>
  # DEBUG req_iter$_M_nodeD.42201 => req_iter$_M_node_186
  # DEBUG D#93ptD.0 => &this_5(D)->D.37748.D.37705._in_reqD.36832
  # DEBUG D#2ptD.0 => D#93ptD.0
  # DEBUG __nD.42130 => _196
  # DEBUG thisD.42131 => D#2ptD.0
  # DEBUG thisD.42125 => NULL
  # DEBUG thisD.42126 => D#13ptD.0
  # DEBUG thisD.41382 => NULL
  # DEBUG __xD.41381 => _185
  # DEBUG thisD.42123 => &D.39988
  # DEBUG __itD.42124 => &D.39934
  # DEBUG thisD.42120 => &req_iterD.39818
  # DEBUG __xD.42121 => &D.39988
  # DEBUG thisD.42137 => &req_iterD.39818
  # DEBUG thisD.42138 => req_iter$_M_node_186
  # DEBUG D#90ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)req_iter$_M_node_186]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#90ptD.0
  # DEBUG D#91ptD.0 => &MEM[(const struct pairD.36083 *)req_iter$_M_node_186 + 32B].secondD.39939
  # DEBUG reqD.39989 => D#91ptD.0
  # DEBUG D#92ptD.0 => &this_5(D)->D.37748._input_arbD.37668
  # VUSE <.MEM_191>
  # PT = nonlocal escaped 
  _85 = MEM[(struct ArbiterD.36919 * * *)this_5(D) + 304B];
  # DEBUG D#3ptD.0 => D#92ptD.0
  # DEBUG __nD.42134 => _196
  # DEBUG thisD.42135 => D#3ptD.0
  # RANGE [0, 18446744073709551608] NONZERO 18446744073709551608
  _13 = _196 * 8;
  # PT = nonlocal escaped 
  _9 = _85 + _13;
  # VUSE <.MEM_191>
  # PT = nonlocal escaped 
  _17 = *_9;
  # VUSE <.MEM_191>
  # PT = nonlocal escaped 
  _18 = _17->D.38560._vptr.ModuleD.29483;
  # VUSE <.MEM_191>
  # PT = nonlocal escaped 
  _19 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_18 + 32B];
  # VUSE <.MEM_191>
  _20 = MEM[(const struct sRequestD.34315 &)req_iter$_M_node_186 + 36].in_priD.34319;
  # VUSE <.MEM_191>
  _21 = MEM[(const struct sRequestD.34315 &)req_iter$_M_node_186 + 36].labelD.34318;
  # VUSE <.MEM_191>
  _22 = MEM[(const struct sRequestD.34315 &)req_iter$_M_node_186 + 36].portD.34317;
  # .MEM_23 = VDEF <.MEM_191>
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  OBJ_TYPE_REF(_19;(struct ArbiterD.36919)_17->4) (_17, _22, _21, _20);
  # DEBUG thisD.42140 => &req_iterD.39818
  # VUSE <.MEM_23>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  req_iter$_M_node_93 = _ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_baseD.6925 (req_iter$_M_node_186);
  # DEBUG req_iter$_M_nodeD.42201 => req_iter$_M_node_93
  # DEBUG req_iter$_M_nodeD.42201 => req_iter$_M_node_93
  # VUSE <.MEM_23>
  _11 = MEM[(const intD.9 &)port_iter$_M_node_189 + 32];
  # RANGE ~[2147483648, 18446744071562067967]
  _12 = (long unsigned intD.14) _11;
  # DEBUG D#93ptD.0 => &this_5(D)->D.37748.D.37705._in_reqD.36832
  # VUSE <.MEM_23>
  # PT = nonlocal escaped 
  _83 = MEM[(struct mapD.36085 * *)this_5(D) + 256B];
  # DEBUG D#2ptD.0 => D#93ptD.0
  # DEBUG __nD.42130 => _12
  # DEBUG thisD.42131 => D#2ptD.0
  # RANGE [0, 18446744073709551568] NONZERO 18446744073709551600
  _16 = _12 * 48;
  # PT = nonlocal escaped 
  _15 = _83 + _16;
  # DEBUG thisD.42125 => NULL
  # DEBUG thisD.42126 => D#13ptD.0
  # PT = nonlocal escaped 
  _14 = &MEM[(struct _Rb_treeD.38972 *)_15]._M_implD.39050._M_headerD.39205;
  # DEBUG thisD.41382 => NULL
  # DEBUG __xD.41381 => _14
  # DEBUG thisD.42123 => &D.39988
  # DEBUG __itD.42124 => &D.39934
  # DEBUG thisD.42120 => &req_iterD.39818
  # DEBUG __xD.42121 => &D.39988
  if (_14 != req_iter$_M_node_93)
    goto <bb 9>;
  else
    goto <bb 8>;
;;    succ:       9 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE ~[2147483648, 18446744071562067967]
  # _232 = PHI <_12(7)>
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 2, count 0, freq 8281, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       7 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_179 = PHI <.MEM_23(8), .MEM_192(5)>
  # RANGE ~[2147483648, 18446744071562067967]
  # _187 = PHI <_232(8), _8(5)>
  # .MEM_24 = VDEF <.MEM_179>
  labelD.39990 = -1;
  # DEBUG D#94ptD.0 => &this_5(D)->D.37748._input_arbD.37668
  # VUSE <.MEM_24>
  # PT = nonlocal escaped 
  _86 = MEM[(struct ArbiterD.36919 * * *)this_5(D) + 304B];
  # DEBUG D#3ptD.0 => D#94ptD.0
  # DEBUG __nD.42143 => _187
  # DEBUG thisD.42144 => D#3ptD.0
  # RANGE [0, 18446744073709551608] NONZERO 18446744073709551608
  _94 = _187 * 8;
  # PT = nonlocal escaped 
  _95 = _86 + _94;
  # VUSE <.MEM_24>
  # PT = nonlocal escaped 
  _25 = *_95;
  # VUSE <.MEM_24>
  # PT = nonlocal escaped 
  _26 = _25->D.38560._vptr.ModuleD.29483;
  # VUSE <.MEM_24>
  # PT = nonlocal escaped 
  _27 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_26 + 48B];
  # .MEM_28 = VDEF <.MEM_24>
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  _29 = OBJ_TYPE_REF(_27;(struct ArbiterD.36919)_25->6) (_25, &labelD.39990, 0B);
  # DEBUG outputD.39991 => _29
  if (_29 < 0)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_45 = VDEF <.MEM_28>
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  __assert_failD.19370 ("output > -1", "allocators/separable_input_first.cpp", 73, &_ZZN28SeparableInputFirstAllocator8AllocateEvE19__PRETTY_FUNCTION__D.39992);
;;    succ:      

;;   basic block 12, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  _30 = (long unsigned intD.14) _29;
  # DEBUG D#95ptD.0 => &this_5(D)->D.37748.D.37705._out_reqD.36833
  # VUSE <.MEM_28>
  # PT = nonlocal escaped 
  _84 = MEM[(struct mapD.36085 * *)this_5(D) + 280B];
  # DEBUG D#2ptD.0 => D#95ptD.0
  # DEBUG __nD.42147 => _30
  # DEBUG thisD.42148 => D#2ptD.0
  # RANGE [0, 103079215056] NONZERO 137438953456
  _96 = _30 * 48;
  # PT = nonlocal escaped 
  _97 = _84 + _96;
  # DEBUG thisD.42338 => _97
  # DEBUG __kD.42339 => D#115ptD.0
  # DEBUG thisD.42352 => _97
  # DEBUG __xD.42351 => D#115ptD.0
  # DEBUG D#27ptD.0 => &_97->_M_tD.38973
  # DEBUG thisD.42354 => D#27ptD.0
  # DEBUG __kD.42353 => D#115ptD.0
  # DEBUG thisD.42355 => D#27ptD.0
  # PT = nonlocal escaped 
  __pos_116 = &MEM[(struct _Rb_treeD.38972 *)_97]._M_implD.39050._M_headerD.39205;
  # VUSE <.MEM_28>
  # PT = nonlocal escaped 
  __pos_117 = MEM[(struct _Rb_tree_node_baseD.6878 * *)_97 + 16B];
  # DEBUG D#18ptD.0 => D#27ptD.0
  # DEBUG thisD.41510 => D#18ptD.0
  # DEBUG D#26ptD.0 => D#27ptD.0
  # DEBUG __xD.42359 => NULL
  # DEBUG __yD.42358 => NULL
  # DEBUG __kD.42357 => D#115ptD.0
  # DEBUG __yD.42358 => __pos_116
  # DEBUG __xD.42359 => __pos_117
  if (__pos_117 == 0B)
    goto <bb 39>;
  else
    goto <bb 13>;
;;    succ:       39 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_28>
  pretmp_246 = MEM[(const intD.9 &)port_iter$_M_node_189 + 32];
  goto <bb 16>;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 2, count 0, freq 9096, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       17 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                18 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __pos_133 = PHI <__pos_121(17), __pos_122(18)>
  # PT = nonlocal escaped 
  # __pos_132 = PHI <__pos_188(17), __pos_182(18)>
  # DEBUG __yD.42358 => __pos_132
  # DEBUG __xD.42359 => __pos_133
  if (__pos_133 == 0B)
    goto <bb 19>;
  else
    goto <bb 15>;
;;    succ:       19 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 2, count 0, freq 8277, maybe hot
;;    prev block 14, next block 16, flags: (NEW)
;;    pred:       14 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 2, count 0, freq 9096, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __pos_188 = PHI <__pos_117(13), __pos_133(15)>
  # PT = nonlocal escaped 
  # __pos_182 = PHI <__pos_116(13), __pos_132(15)>
  # DEBUG __yD.42358 => __pos_182
  # DEBUG __xD.42359 => __pos_188
  # DEBUG __xD.41489 => __pos_188
  # DEBUG __xD.41455 => __pos_188
  # DEBUG thisD.41456 => __pos_188
  # DEBUG D#22ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)__pos_188]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#22ptD.0
  # DEBUG __xD.41491 => D#22ptD.0
  # DEBUG thisD.41490 => D#21ptD.0
  # DEBUG D#23ptD.0 => &MEM[(const struct pairD.36083 &)__pos_188 + 32].firstD.39938
  # DEBUG D#24ptD.0 => &D#25ptD.0->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#24ptD.0
  # VUSE <.MEM_28>
  _119 = MEM[(const intD.9 &)__pos_188 + 32];
  # DEBUG D#6ptD.0 => D#23ptD.0
  # DEBUG D#7ptD.0 => D#115ptD.0
  # DEBUG thisD.41492 => D#5ptD.0
  # DEBUG __xD.41493 => D#6ptD.0
  # DEBUG __yD.41494 => D#7ptD.0
  if (_119 >= pretmp_246)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 2, count 0, freq 4548, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.42358 => __pos_188
  # VUSE <.MEM_28>
  # PT = nonlocal escaped 
  __pos_121 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__pos_188 + 16B];
  # DEBUG D#19ptD.0 => __pos_188
  # DEBUG __xD.41488 => D#19ptD.0
  # DEBUG __xD.42359 => NULL
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 2, count 0, freq 4548, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       16 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_28>
  # PT = nonlocal escaped 
  __pos_122 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__pos_188 + 24B];
  # DEBUG D#20ptD.0 => __pos_188
  # DEBUG __xD.41487 => D#20ptD.0
  # DEBUG __xD.42359 => NULL
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       14 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __pos_231 = PHI <__pos_132(14)>
  # DEBUG thisD.41486 => NULL
  # DEBUG __xD.41485 => __pos_231
  # DEBUG __i$_M_nodeD.42362 => __pos_231
  # DEBUG thisD.42039 => _97
  # DEBUG D#13ptD.0 => &_97->_M_tD.38973
  # DEBUG thisD.42040 => D#13ptD.0
  # DEBUG thisD.41382 => NULL
  # DEBUG __xD.41381 => __pos_116
  # DEBUG thisD.42036 => &__iD.42340
  # DEBUG __xD.42037 => NULL
  if (__pos_116 == __pos_231)
    goto <bb 40>;
  else
    goto <bb 20>;
;;    succ:       40 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 1, count 0, freq 765, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       19 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.42063 => &__iD.42340
  # DEBUG thisD.42064 => __pos_231
  # DEBUG D#83ptD.0 => &MEM[(struct _Rb_tree_nodeD.38976 *)__pos_231]._M_value_fieldD.40139
  # DEBUG __rD.41421 => D#83ptD.0
  # DEBUG D#84ptD.0 => &MEM[(struct pairD.36083 &)__pos_231 + 32].firstD.39938
  # DEBUG D#17ptD.0 => _97
  # DEBUG thisD.42060 => D#17ptD.0
  # DEBUG D#16ptD.0 => D#17ptD.0
  # DEBUG D#15ptD.0 => &D#16ptD.0->_M_tD.38973
  # DEBUG D#14ptD.0 => D#15ptD.0
  # DEBUG thisD.41400 => D#14ptD.0
  # DEBUG D#6ptD.0 => D#115ptD.0
  # VUSE <.MEM_28>
  _125 = MEM[(const intD.9 &)__pos_231 + 32];
  # DEBUG D#7ptD.0 => D#84ptD.0
  # DEBUG thisD.42058 => D#5ptD.0
  # DEBUG __xD.42057 => D#6ptD.0
  # DEBUG __yD.42056 => D#7ptD.0
  if (_125 > pretmp_246)
    goto <bb 40>;
  else
    goto <bb 25>;
;;    succ:       40 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 1, count 0, freq 45, maybe hot
;;   Invalid sum of incoming frequencies 309, should be 45
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       40 [59.7%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#76ptD.0 => D#81ptD.0
  # DEBUG thisD.42375 => _128
  # DEBUG __xD.42376 => __res$first_134
  # DEBUG __pD.42377 => __res$second_135
  # DEBUG __vD.42378 => &D.42364
  # DEBUG __node_genD.42379 => D#76ptD.0
  # DEBUG D#75ptD.0 => D#76ptD.0
  # DEBUG thisD.42384 => _128
  # RANGE [0, 1]
  _136 = __pos_116 == __res$second_135;
  # RANGE [0, 1]
  _140 = __res$first_134 != 0B;
  # RANGE [0, 1]
  _174 = _136 | _140;
  if (_174 != 0)
    goto <bb 23>;
  else
    goto <bb 22>;
;;    succ:       23 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 41, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       21 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.41971 => __res$second_135
  # DEBUG __xD.41548 => __res$second_135
  # DEBUG thisD.41549 => __res$second_135
  # DEBUG D#29ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)__res$second_135]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#29ptD.0
  # DEBUG __xD.41973 => D#29ptD.0
  # DEBUG thisD.41972 => D#21ptD.0
  # DEBUG D#73ptD.0 => &MEM[(const struct pairD.36083 &)__res$second_135 + 32].firstD.39938
  # DEBUG __xD.41975 => &D.42364
  # DEBUG thisD.41974 => D#21ptD.0
  # DEBUG D#74ptD.0 => &MEM[(struct _Rb_treeD.38972 *)_128]._M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#74ptD.0
  # VUSE <.MEM_157>
  _137 = MEM[(const intD.9 &)&D.42364];
  # VUSE <.MEM_157>
  _138 = MEM[(const intD.9 &)__res$second_135 + 32];
  # DEBUG D#7ptD.0 => D#73ptD.0
  # DEBUG thisD.41976 => D#5ptD.0
  # DEBUG __xD.41977 => D#6ptD.0
  # DEBUG __yD.41978 => D#7ptD.0
  __insert_left_175 = _137 < _138;
  pretmp_242 = (intD.9) __insert_left_175;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 209, maybe hot
;;   Invalid sum of incoming frequencies 46, should be 209
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                21 [10.1%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1] NONZERO 1
  # prephitmp_243 = PHI <pretmp_242(22), 1(21)>
  # DEBUG __insert_leftD.42380 => NULL
  # DEBUG D#72ptD.0 => D#75ptD.0
  # DEBUG __argD.42383 => &D.42364
  # DEBUG thisD.42382 => D#72ptD.0
  # DEBUG D#71ptD.0 => D#72ptD.0
  # DEBUG D#70ptD.0 => D#71ptD.0->_M_tD.40332
  # DEBUG D#69ptD.0 => D#70ptD.0
  # DEBUG __xD.42386 => &D.42364
  # DEBUG thisD.42387 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG D#67ptD.0 => D#69ptD.0
  # DEBUG D#56ptD.0 => D#67ptD.0
  # DEBUG thisD.42389 => D#56ptD.0
  # DEBUG D#55ptD.0 => D#56ptD.0
  # DEBUG thisD.41809 => D#55ptD.0
  # DEBUG __nD.42391 => 1
  # DEBUG __aD.42390 => D#54ptD.0
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG D#51ptD.0 => D#53ptD.0
  # DEBUG D#52ptD.0 => 0B
  # DEBUG __nD.42394 => 1
  # DEBUG thisD.42392 => D#51ptD.0
  # DEBUG D.42393 => D#52ptD.0
  # DEBUG D#50ptD.0 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#50ptD.0
  # DEBUG thisD.41767 => D#49ptD.0
  # .MEM_158 = VDEF <.MEM_157>
  # PT = { D.42409 } (escaped heap)
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  _145 = _ZnwmD.2764 (56);
  # DEBUG __tmpD.42388 => _145
  # DEBUG D#66ptD.0 => D#68ptD.0
  # DEBUG __nodeD.42397 => _145
  # DEBUG __xD.42396 => &D.42364
  # DEBUG thisD.42395 => D#66ptD.0
  # DEBUG D#65ptD.0 => D#66ptD.0
  # DEBUG thisD.42398 => _145
  # DEBUG D#116ptD.0 => &_145->_M_value_fieldD.40139
  # DEBUG __rD.41421 => D#116ptD.0
  # DEBUG D#58ptD.0 => D#65ptD.0
  # DEBUG thisD.41872 => D#58ptD.0
  # DEBUG D#57ptD.0 => D#58ptD.0
  # DEBUG thisD.41830 => D#57ptD.0
  # DEBUG thisD.41822 => NULL
  # DEBUG D.41823 => NULL
  # DEBUG thisD.41820 => NULL
  # DEBUG __pD.42401 => D#116ptD.0
  # DEBUG __valD.42400 => &D.42364
  # DEBUG thisD.42399 => D#48ptD.0
  # DEBUG D#1ptD.0 => 20
  # DEBUG __pD.41745 => D#116ptD.0
  # DEBUG D.41746 => D#1ptD.0
  # .MEM_159 = VDEF <.MEM_158>
  MEM[(struct pairD.36083 *)_145 + 32B] = D.42364;
  # DEBUG thisD.41885 => NULL
  # DEBUG thisD.41868 => NULL
  # DEBUG __zD.42381 => NULL
  # .MEM_161 = VDEF <.MEM_159>
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  _ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_D.7104 (prephitmp_243, _145, __res$second_135, __pos_116);
  # VUSE <.MEM_161>
  _143 = MEM[(struct _Rb_treeD.38972 *)_97]._M_implD.39050._M_node_countD.39206;
  # RANGE [0, 18446744073709551615]
  _144 = _143 + 1;
  # .MEM_162 = VDEF <.MEM_161>
  MEM[(struct _Rb_treeD.38972 *)_97]._M_implD.39050._M_node_countD.39206 = _144;
  # DEBUG thisD.41970 => NULL
  # DEBUG __xD.41969 => NULL
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 1, count 0, freq 351, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                40 [40.3%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_148 = PHI <.MEM_162(23), .MEM_157(40)>
  # PT = nonlocal escaped { D.42409 } (escaped heap)
  # SR.219_155 = PHI <_145(23), __res$first_134(40)>
  # DEBUG D#79ptD.0 => {CLOBBER}
  # DEBUG __res$firstD.42373 => D#79ptD.0
  # DEBUG D#80ptD.0 => {CLOBBER}
  # DEBUG __res$secondD.42372 => D#80ptD.0
  # DEBUG __i$_M_nodeD.42362 => SR.219_155
  # .MEM_167 = VDEF <.MEM_148>
  D.42364 ={v} {CLOBBER};
  # VUSE <.MEM_167>
  pretmp_244 = MEM[(const intD.9 &)port_iter$_M_node_189 + 32];
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 900, maybe hot
;;   Invalid sum of incoming frequencies 734, should be 900
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       20 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                24 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped { D.42409 } (escaped heap)
  # __pos_130 = PHI <__pos_231(20), SR.219_155(24)>
  # .MEM_149 = PHI <.MEM_28(20), .MEM_167(24)>
  # prephitmp_245 = PHI <pretmp_246(20), pretmp_244(24)>
  # DEBUG __i$_M_nodeD.42362 => __pos_130
  # DEBUG thisD.42081 => &__iD.42340
  # DEBUG thisD.42082 => __pos_130
  # DEBUG D#85ptD.0 => &MEM[(struct _Rb_tree_nodeD.38976 *)__pos_130]._M_value_fieldD.40139
  # DEBUG __rD.41421 => D#85ptD.0
  # DEBUG D#87ptD.0 => {CLOBBER}
  # DEBUG __i$_M_nodeD.42362 => D#87ptD.0
  # DEBUG reqD.39993 => NULL
  # VUSE <.MEM_149>
  _33 = MEM[(const struct sRequestD.34315 &)__pos_130 + 36].portD.34317;
  if (_33 != prephitmp_245)
    goto <bb 27>;
  else
    goto <bb 26>;
;;    succ:       27 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 1, count 0, freq 899, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       25 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_149>
  _35 = MEM[(const struct sRequestD.34315 &)__pos_130 + 36].labelD.34318;
  # VUSE <.MEM_149>
  label.2_36 = labelD.39990;
  if (_35 != label.2_36)
    goto <bb 27>;
  else
    goto <bb 28>;
;;    succ:       27 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       26 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_44 = VDEF <.MEM_149>
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  __assert_failD.19370 ("(req.port == input) && (req.label == label)", "allocators/separable_input_first.cpp", 76, &_ZZN28SeparableInputFirstAllocator8AllocateEvE19__PRETTY_FUNCTION__D.39992);
;;    succ:      

;;   basic block 28, loop depth 1, count 0, freq 899, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       26 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#96ptD.0 => &this_5(D)->D.37748._output_arbD.37669
  # VUSE <.MEM_149>
  # PT = nonlocal escaped 
  _87 = MEM[(struct ArbiterD.36919 * * *)this_5(D) + 328B];
  # DEBUG D#3ptD.0 => D#96ptD.0
  # DEBUG __nD.42151 => _30
  # DEBUG thisD.42152 => D#3ptD.0
  # RANGE [0, 17179869176] NONZERO 17179869176
  _98 = _30 * 8;
  # PT = nonlocal escaped 
  _99 = _87 + _98;
  # VUSE <.MEM_149>
  # PT = nonlocal escaped 
  _37 = *_99;
  # VUSE <.MEM_149>
  # PT = nonlocal escaped 
  _38 = _37->D.38560._vptr.ModuleD.29483;
  # VUSE <.MEM_149>
  # PT = nonlocal escaped 
  _39 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_38 + 32B];
  # VUSE <.MEM_149>
  _40 = MEM[(const struct sRequestD.34315 &)__pos_130 + 36].out_priD.34320;
  # .MEM_41 = VDEF <.MEM_149>
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  OBJ_TYPE_REF(_39;(struct ArbiterD.36919)_37->4) (_37, _33, _35, _40);
  # DEBUG thisD.42154 => &port_iterD.38629
  # VUSE <.MEM_41>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  port_iter$_M_node_100 = _ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_baseD.6925 (port_iter$_M_node_189);
  # DEBUG port_iter$_M_nodeD.42199 => port_iter$_M_node_100
  # DEBUG D#108ptD.0 => {CLOBBER}
  # DEBUG req_iter$_M_nodeD.42201 => D#108ptD.0
  # .MEM_43 = VDEF <.MEM_41>
  labelD.39990 ={v} {CLOBBER};
  # DEBUG port_iter$_M_nodeD.42199 => port_iter$_M_node_100
  # DEBUG D#97ptD.0 => &this_5(D)->D.37748.D.37705._in_occD.36081
  # DEBUG thisD.42104 => D#97ptD.0
  # DEBUG D#10ptD.0 => &MEM[(const struct setD.35243 *)D#97ptD.0]._M_tD.35255
  # DEBUG thisD.42105 => D#10ptD.0
  # DEBUG thisD.41344 => NULL
  # DEBUG __xD.41343 => _172
  # DEBUG thisD.42101 => &port_iterD.38629
  # DEBUG __xD.42102 => &D.38753
  if (port_iter$_M_node_100 != _172)
    goto <bb 29>;
  else
    goto <bb 3>;
;;    succ:       29 [97.8%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [2.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 1, count 0, freq 879, maybe hot
;;    prev block 28, next block 30, flags: (NEW)
;;    pred:       28 [97.8%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 21, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       3 [3.0%]  (FALSE_VALUE,EXECUTABLE)
;;                37 [3.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_238 = PHI <.MEM_239(3), .MEM_4(37)>
  # DEBUG D#110ptD.0 => {CLOBBER}
  # DEBUG port_iter$_M_nodeD.42199 => D#110ptD.0
  # VUSE <.MEM_238>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 31, loop depth 0, count 0, freq 20, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       3 [97.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 1, count 0, freq 657, maybe hot
;;    prev block 31, next block 33, flags: (NEW)
;;    pred:       31 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_194 = PHI <.MEM_239(31), .MEM_4(38)>
  # PT = nonlocal escaped 
  # port_iter$_M_node_195 = PHI <port_iter$_M_node_42(31), port_iter$_M_node_114(38)>
  # DEBUG port_iter$_M_nodeD.42199 => port_iter$_M_node_195
  # DEBUG D#107ptD.0 => &this_5(D)->D.37748.D.37705._out_occD.36082
  # DEBUG thisD.42162 => D#107ptD.0
  # DEBUG D#10ptD.0 => &MEM[(const struct setD.35243 *)D#107ptD.0]._M_tD.35255
  # DEBUG thisD.42163 => D#10ptD.0
  # DEBUG thisD.41344 => NULL
  # DEBUG __xD.41343 => _147
  # DEBUG thisD.42159 => &port_iterD.38629
  # DEBUG __xD.42160 => &D.39998
  # DEBUG thisD.42170 => &port_iterD.38629
  # DEBUG thisD.42171 => port_iter$_M_node_195
  # DEBUG D#99ptD.0 => &MEM[(const struct _Rb_tree_nodeD.35258 *)port_iter$_M_node_195]._M_value_fieldD.40110
  # DEBUG __rD.41349 => D#99ptD.0
  # DEBUG outputD.39999 => D#99ptD.0
  # VUSE <.MEM_194>
  _49 = MEM[(const intD.9 &)port_iter$_M_node_195 + 32];
  # RANGE ~[2147483648, 18446744071562067967]
  _50 = (long unsigned intD.14) _49;
  # DEBUG D#100ptD.0 => &this_5(D)->D.37748._output_arbD.37669
  # VUSE <.MEM_194>
  # PT = nonlocal escaped 
  _88 = MEM[(struct ArbiterD.36919 * * *)this_5(D) + 328B];
  # DEBUG D#3ptD.0 => D#100ptD.0
  # DEBUG __nD.42167 => _50
  # DEBUG thisD.42168 => D#3ptD.0
  # RANGE [0, 18446744073709551608] NONZERO 18446744073709551608
  _102 = _50 * 8;
  # PT = nonlocal escaped 
  _103 = _88 + _102;
  # VUSE <.MEM_194>
  # PT = nonlocal escaped 
  _51 = *_103;
  # VUSE <.MEM_194>
  # PT = nonlocal escaped 
  _52 = _51->D.38560._vptr.ModuleD.29483;
  # VUSE <.MEM_194>
  # PT = nonlocal escaped 
  _53 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_52 + 48B];
  # .MEM_54 = VDEF <.MEM_194>
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  _55 = OBJ_TYPE_REF(_53;(struct ArbiterD.36919)_51->6) (_51, 0B, 0B);
  # DEBUG inputD.40000 => _55
  if (_55 >= 0)
    goto <bb 33>;
  else
    goto <bb 37>;
;;    succ:       33 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [27.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 33, loop depth 1, count 0, freq 480, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       32 [73.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  _56 = (long unsigned intD.14) _55;
  # DEBUG D#101ptD.0 => &this_5(D)->D.37748.D.37705.D.36911._inmatchD.34313
  # VUSE <.MEM_54>
  # PT = nonlocal escaped 
  _91 = MEM[(intD.9 * *)this_5(D) + 112B];
  # DEBUG D#4ptD.0 => D#101ptD.0
  # DEBUG __nD.42174 => _56
  # DEBUG thisD.42175 => D#4ptD.0
  # RANGE [0, 8589934588] NONZERO 8589934588
  _104 = _56 * 4;
  # PT = nonlocal escaped 
  _105 = _91 + _104;
  # VUSE <.MEM_54>
  _58 = *_105;
  if (_58 != -1)
    goto <bb 35>;
  else
    goto <bb 34>;
;;    succ:       35 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 1, count 0, freq 480, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       33 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_54>
  _59 = MEM[(const intD.9 &)port_iter$_M_node_195 + 32];
  # RANGE ~[2147483648, 18446744071562067967]
  _60 = (long unsigned intD.14) _59;
  # DEBUG D#102ptD.0 => &this_5(D)->D.37748.D.37705.D.36911._outmatchD.34314
  # VUSE <.MEM_54>
  # PT = nonlocal escaped 
  _92 = MEM[(intD.9 * *)this_5(D) + 136B];
  # DEBUG D#4ptD.0 => D#102ptD.0
  # DEBUG __nD.42178 => _60
  # DEBUG thisD.42179 => D#4ptD.0
  # RANGE [0, 18446744073709551612] NONZERO 18446744073709551612
  _106 = _60 * 4;
  # PT = nonlocal escaped 
  _107 = _92 + _106;
  # VUSE <.MEM_54>
  _62 = *_107;
  if (_62 != -1)
    goto <bb 35>;
  else
    goto <bb 36>;
;;    succ:       35 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       34 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_79 = VDEF <.MEM_54>
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  __assert_failD.19370 ("(_inmatch[input] == -1) && (_outmatch[output] == -1)", "allocators/separable_input_first.cpp", 93, &_ZZN28SeparableInputFirstAllocator8AllocateEvE19__PRETTY_FUNCTION__D.39992);
;;    succ:      

;;   basic block 36, loop depth 1, count 0, freq 480, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       34 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#103ptD.0 => &this_5(D)->D.37748.D.37705.D.36911._inmatchD.34313
  # DEBUG D#4ptD.0 => D#103ptD.0
  # DEBUG __nD.42190 => _56
  # DEBUG thisD.42191 => D#4ptD.0
  # .MEM_64 = VDEF <.MEM_54>
  *_105 = _59;
  # VUSE <.MEM_64>
  _65 = MEM[(const intD.9 &)port_iter$_M_node_195 + 32];
  # RANGE ~[2147483648, 18446744071562067967]
  _66 = (long unsigned intD.14) _65;
  # DEBUG D#104ptD.0 => &this_5(D)->D.37748.D.37705.D.36911._outmatchD.34314
  # DEBUG D#4ptD.0 => D#104ptD.0
  # DEBUG __nD.42186 => _66
  # DEBUG thisD.42187 => D#4ptD.0
  # RANGE [0, 18446744073709551612] NONZERO 18446744073709551612
  _110 = _66 * 4;
  # PT = nonlocal escaped 
  _111 = _92 + _110;
  # .MEM_67 = VDEF <.MEM_64>
  *_111 = _55;
  # DEBUG D#105ptD.0 => &this_5(D)->D.37748._input_arbD.37668
  # VUSE <.MEM_67>
  # PT = nonlocal escaped 
  _89 = MEM[(struct ArbiterD.36919 * * *)this_5(D) + 304B];
  # DEBUG D#3ptD.0 => D#105ptD.0
  # DEBUG __nD.42182 => _56
  # DEBUG thisD.42183 => D#3ptD.0
  # RANGE [0, 17179869176] NONZERO 17179869176
  _108 = _56 * 8;
  # PT = nonlocal escaped 
  _109 = _89 + _108;
  # VUSE <.MEM_67>
  # PT = nonlocal escaped 
  _68 = *_109;
  # VUSE <.MEM_67>
  # PT = nonlocal escaped 
  _69 = _68->D.38560._vptr.ModuleD.29483;
  # VUSE <.MEM_67>
  # PT = nonlocal escaped 
  _70 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_69 + 40B];
  # .MEM_71 = VDEF <.MEM_67>
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  OBJ_TYPE_REF(_70;(struct ArbiterD.36919)_68->5) (_68);
  # VUSE <.MEM_71>
  _72 = MEM[(const intD.9 &)port_iter$_M_node_195 + 32];
  # RANGE ~[2147483648, 18446744071562067967]
  _73 = (long unsigned intD.14) _72;
  # DEBUG D#106ptD.0 => &this_5(D)->D.37748._output_arbD.37669
  # VUSE <.MEM_71>
  # PT = nonlocal escaped 
  _90 = MEM[(struct ArbiterD.36919 * * *)this_5(D) + 328B];
  # DEBUG D#3ptD.0 => D#106ptD.0
  # DEBUG __nD.42194 => _73
  # DEBUG thisD.42195 => D#3ptD.0
  # RANGE [0, 18446744073709551608] NONZERO 18446744073709551608
  _112 = _73 * 8;
  # PT = nonlocal escaped 
  _113 = _90 + _112;
  # VUSE <.MEM_71>
  # PT = nonlocal escaped 
  _75 = *_113;
  # VUSE <.MEM_71>
  # PT = nonlocal escaped 
  _76 = _75->D.38560._vptr.ModuleD.29483;
  # VUSE <.MEM_71>
  # PT = nonlocal escaped 
  _77 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_76 + 40B];
  # .MEM_78 = VDEF <.MEM_71>
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  OBJ_TYPE_REF(_77;(struct ArbiterD.36919)_75->5) (_75);
;;    succ:       37 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 37, loop depth 1, count 0, freq 657, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       32 [27.0%]  (FALSE_VALUE,EXECUTABLE)
;;                36 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_4 = PHI <.MEM_54(32), .MEM_78(36)>
  # DEBUG thisD.42197 => &port_iterD.38629
  # VUSE <.MEM_4>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  port_iter$_M_node_114 = _ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_baseD.6925 (port_iter$_M_node_195);
  # DEBUG port_iter$_M_nodeD.42199 => port_iter$_M_node_114
  # DEBUG port_iter$_M_nodeD.42199 => port_iter$_M_node_114
  # DEBUG D#107ptD.0 => &this_5(D)->D.37748.D.37705._out_occD.36082
  # DEBUG thisD.42162 => D#107ptD.0
  # DEBUG D#10ptD.0 => &MEM[(const struct setD.35243 *)D#107ptD.0]._M_tD.35255
  # DEBUG thisD.42163 => D#10ptD.0
  # DEBUG thisD.41344 => NULL
  # DEBUG __xD.41343 => _147
  # DEBUG thisD.42159 => &port_iterD.38629
  # DEBUG __xD.42160 => &D.39998
  if (port_iter$_M_node_114 != _147)
    goto <bb 38>;
  else
    goto <bb 30>;
;;    succ:       38 [97.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [3.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 38, loop depth 1, count 0, freq 637, maybe hot
;;    prev block 37, next block 39, flags: (NEW)
;;    pred:       37 [97.0%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 32>;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 1, count 0, freq 81, maybe hot
;;    prev block 38, next block 40, flags: (NEW)
;;    pred:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_28>
  pretmp_240 = MEM[(const intD.9 &)port_iter$_M_node_189 + 32];
;;    succ:       40 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 40, loop depth 1, count 0, freq 517, maybe hot
;;    prev block 39, next block 1, flags: (NEW, REACHABLE)
;;    pred:       20 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __pos_2 = PHI <__pos_231(20), __pos_231(19), __pos_116(39)>
  # prephitmp_241 = PHI <pretmp_246(20), pretmp_246(19), pretmp_240(39)>
  # DEBUG thisD.42343 => &D.42364
  # DEBUG __aD.42342 => D#115ptD.0
  # DEBUG __bD.42341 => NULL
  # .MEM_150 = VDEF <.MEM_28>
  D.42364.firstD.39938 = prephitmp_241;
  # .MEM_151 = VDEF <.MEM_150>
  MEM[(struct pairD.36083 *)&D.42364 + 4B] = 0;
  # .MEM_152 = VDEF <.MEM_151>
  MEM[(struct pairD.36083 *)&D.42364 + 8B] = 0;
  # .MEM_153 = VDEF <.MEM_152>
  MEM[(struct pairD.36083 *)&D.42364 + 12B] = 0;
  # .MEM_154 = VDEF <.MEM_153>
  MEM[(struct pairD.36083 *)&D.42364 + 16B] = 0;
  # DEBUG thisD.42346 => _97
  # DEBUG __position$_M_nodeD.42094 => __pos_2
  # DEBUG __xD.42344 => &D.42364
  # DEBUG thisD.42070 => NULL
  # DEBUG __itD.42069 => &__positionD.42345
  # PT = nonlocal escaped 
  _128 = &_97->_M_tD.38973;
  # DEBUG thisD.42349 => _128
  # DEBUG __posD.42405 => __pos_2
  # DEBUG __xD.42347 => &D.42364
  # DEBUG thisD.42030 => &__anD.42350
  # DEBUG __tD.42029 => _128
  # DEBUG __an$_M_tD.42023 => _128
  # DEBUG D#82ptD.0 => &__anD.42350
  # DEBUG thisD.42365 => _128
  # .MEM_156 = VDEF <.MEM_154>
  MEM[(struct _Rb_tree_const_iteratorD.39279 *)&__positionD.42366] = __pos_2;
  # DEBUG __vD.42367 => &D.42364
  # DEBUG __node_genD.42368 => D#82ptD.0
  # DEBUG D#81ptD.0 => D#82ptD.0
  # DEBUG __xD.42371 => &D.42364
  # DEBUG thisD.42370 => D#21ptD.0
  # .MEM_157 = VDEF <.MEM_156>
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  __resD.42369 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_D.39290 (_128, __positionD.42366, &D.42364.firstD.39938);
  # VUSE <.MEM_157>
  # PT = nonlocal escaped 
  __res$first_134 = MEM[(struct pairD.7331 *)&__resD.42369];
  # DEBUG __res$firstD.42373 => __res$first_134
  # VUSE <.MEM_157>
  # PT = nonlocal escaped 
  __res$second_135 = MEM[(struct pairD.7331 *)&__resD.42369 + 8B];
  # DEBUG __res$secondD.42372 => __res$second_135
  if (__res$second_135 != 0B)
    goto <bb 21>;
  else
    goto <bb 24>;
;;    succ:       21 [59.7%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [40.3%]  (FALSE_VALUE,EXECUTABLE)

}


Creating dr for MEM[(struct _Rb_tree_node_base * *)this_5(D) + 184B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 184
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_5(D) + 184B]
Creating dr for MEM[(const int &)port_iter$_M_node_189 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)port_iter$_M_node_189 + 32]
Creating dr for MEM[(const int &)port_iter$_M_node_189 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)port_iter$_M_node_189 + 32]
Creating dr for MEM[(struct map * *)this_5(D) + 256B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_5(D) + 256B]
Creating dr for MEM[(struct map * *)this_5(D) + 256B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_5(D) + 256B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_57 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_57 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_57 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_57 + 24B]
Creating dr for MEM[(const int &)port_iter$_M_node_189 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)port_iter$_M_node_189 + 32]
Creating dr for MEM[(const int &)port_iter$_M_node_189 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)port_iter$_M_node_189 + 32]
Creating dr for MEM[(struct map * *)this_5(D) + 256B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_5(D) + 256B]
Creating dr for MEM[(struct map * *)this_5(D) + 256B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_5(D) + 256B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_57 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_57 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_57 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_57 + 24B]
Creating dr for MEM[(struct Arbiter * * *)this_5(D) + 304B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 304
	step: 0
	aligned to: 256
	base_object: MEM[(struct Arbiter * * *)this_5(D) + 304B]
Creating dr for MEM[(struct Arbiter * * *)this_5(D) + 304B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 304
	step: 0
	aligned to: 256
	base_object: MEM[(struct Arbiter * * *)this_5(D) + 304B]
Creating dr for MEM[(struct Arbiter * * *)this_5(D) + 304B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 304
	step: 0
	aligned to: 256
	base_object: MEM[(struct Arbiter * * *)this_5(D) + 304B]
Creating dr for *_9
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_9
Creating dr for *_9
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_9
Creating dr for *_9
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_9
Creating dr for _17->D.38560._vptr.Module
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_17
	Access function 0: 0
	Access function 1: 0
Creating dr for _17->D.38560._vptr.Module
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_17
	Access function 0: 0
	Access function 1: 0
Creating dr for _17->D.38560._vptr.Module
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_17
	Access function 0: 0
	Access function 1: 0
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 64
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 64
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 64
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 32
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 32
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 32
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 0
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 0
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 0
Creating dr for MEM[(struct Arbiter * * *)this_5(D) + 304B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 304
	step: 0
	aligned to: 256
	base_object: MEM[(struct Arbiter * * *)this_5(D) + 304B]
Creating dr for MEM[(struct Arbiter * * *)this_5(D) + 304B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 304
	step: 0
	aligned to: 256
	base_object: MEM[(struct Arbiter * * *)this_5(D) + 304B]
Creating dr for MEM[(struct Arbiter * * *)this_5(D) + 304B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 304
	step: 0
	aligned to: 256
	base_object: MEM[(struct Arbiter * * *)this_5(D) + 304B]
Creating dr for *_9
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_9
Creating dr for *_9
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_9
Creating dr for *_9
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_9
Creating dr for _17->D.38560._vptr.Module
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_17
	Access function 0: 0
	Access function 1: 0
Creating dr for _17->D.38560._vptr.Module
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_17
	Access function 0: 0
	Access function 1: 0
Creating dr for _17->D.38560._vptr.Module
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_17
	Access function 0: 0
	Access function 1: 0
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 64
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 64
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 64
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 32
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 32
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 32
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 0
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 0
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 0
Creating dr for MEM[(struct Arbiter * * *)this_5(D) + 304B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 304
	step: 0
	aligned to: 256
	base_object: MEM[(struct Arbiter * * *)this_5(D) + 304B]
Creating dr for MEM[(struct Arbiter * * *)this_5(D) + 304B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 304
	step: 0
	aligned to: 256
	base_object: MEM[(struct Arbiter * * *)this_5(D) + 304B]
Creating dr for MEM[(struct Arbiter * * *)this_5(D) + 304B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 304
	step: 0
	aligned to: 256
	base_object: MEM[(struct Arbiter * * *)this_5(D) + 304B]
Creating dr for *_9
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_9
Creating dr for *_9
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_9
Creating dr for *_9
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_9
Creating dr for _17->D.38560._vptr.Module
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_17
	Access function 0: 0
	Access function 1: 0
Creating dr for _17->D.38560._vptr.Module
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_17
	Access function 0: 0
	Access function 1: 0
Creating dr for _17->D.38560._vptr.Module
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_17
	Access function 0: 0
	Access function 1: 0
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 64
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 64
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 64
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 32
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 32
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 32
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 0
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 0
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 0
Creating dr for MEM[(struct Arbiter * * *)this_5(D) + 304B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 304
	step: 0
	aligned to: 256
	base_object: MEM[(struct Arbiter * * *)this_5(D) + 304B]
Creating dr for MEM[(struct Arbiter * * *)this_5(D) + 304B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 304
	step: 0
	aligned to: 256
	base_object: MEM[(struct Arbiter * * *)this_5(D) + 304B]
Creating dr for MEM[(struct Arbiter * * *)this_5(D) + 304B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 304
	step: 0
	aligned to: 256
	base_object: MEM[(struct Arbiter * * *)this_5(D) + 304B]
Creating dr for *_9
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_9
Creating dr for *_9
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_9
Creating dr for *_9
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_9
Creating dr for _17->D.38560._vptr.Module
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_17
	Access function 0: 0
	Access function 1: 0
Creating dr for _17->D.38560._vptr.Module
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_17
	Access function 0: 0
	Access function 1: 0
Creating dr for _17->D.38560._vptr.Module
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_17
	Access function 0: 0
	Access function 1: 0
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 64
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 64
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 64
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 32
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 32
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 32
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 0
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 0
Creating dr for MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)req_iter$_M_node_186 + 36]
	Access function 0: 0
Creating dr for label
analyze_innermost: success.
	base_address: &label
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: label
Creating dr for label
analyze_innermost: success.
	base_address: &label
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: label
Creating dr for MEM[(struct Arbiter * * *)this_5(D) + 304B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 304
	step: 0
	aligned to: 256
	base_object: MEM[(struct Arbiter * * *)this_5(D) + 304B]
Creating dr for MEM[(struct Arbiter * * *)this_5(D) + 304B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 304
	step: 0
	aligned to: 256
	base_object: MEM[(struct Arbiter * * *)this_5(D) + 304B]
Creating dr for *_95
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_95
Creating dr for *_95
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_95
Creating dr for _25->D.38560._vptr.Module
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_25
	Access function 0: 0
	Access function 1: 0
Creating dr for _25->D.38560._vptr.Module
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_25
	Access function 0: 0
	Access function 1: 0
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_26 + 48B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_26 + 48B]
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_26 + 48B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_26 + 48B]
Creating dr for MEM[(struct map * *)this_5(D) + 280B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 280
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_5(D) + 280B]
Creating dr for MEM[(struct map * *)this_5(D) + 280B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 280
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_5(D) + 280B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_97 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_97 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_97 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_97 + 16B]
Creating dr for MEM[(const int &)port_iter$_M_node_189 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)port_iter$_M_node_189 + 32]
Creating dr for MEM[(const int &)port_iter$_M_node_189 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)port_iter$_M_node_189 + 32]
Creating dr for MEM[(const int &)port_iter$_M_node_189 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)port_iter$_M_node_189 + 32]
Creating dr for MEM[(const int &)port_iter$_M_node_189 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)port_iter$_M_node_189 + 32]
Creating dr for MEM[(const int &)__pos_188 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__pos_188 + 32]
Creating dr for MEM[(const int &)__pos_188 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__pos_188 + 32]
Creating dr for MEM[(const int &)__pos_188 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__pos_188 + 32]
Creating dr for MEM[(const int &)__pos_188 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__pos_188 + 32]
Creating dr for MEM[(const int &)__pos_188 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__pos_188 + 32]
Creating dr for MEM[(const int &)__pos_188 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__pos_188 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__pos_188 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__pos_188 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__pos_188 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__pos_188 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__pos_188 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__pos_188 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__pos_188 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__pos_188 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__pos_188 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__pos_188 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__pos_188 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__pos_188 + 24B]
Creating dr for MEM[(const int &)__pos_188 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__pos_188 + 32]
Creating dr for MEM[(const int &)__pos_188 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__pos_188 + 32]
Creating dr for MEM[(const int &)__pos_188 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__pos_188 + 32]
Creating dr for MEM[(const int &)__pos_188 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__pos_188 + 32]
Creating dr for MEM[(const int &)__pos_188 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__pos_188 + 32]
Creating dr for MEM[(const int &)__pos_188 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__pos_188 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__pos_188 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__pos_188 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__pos_188 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__pos_188 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__pos_188 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__pos_188 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__pos_188 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__pos_188 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__pos_188 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__pos_188 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__pos_188 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__pos_188 + 24B]
Creating dr for MEM[(const int &)__pos_231 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__pos_231 + 32]
Creating dr for MEM[(const int &)__pos_231 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__pos_231 + 32]
Creating dr for D.42364.first
analyze_innermost: success.
	base_address: &D.42364
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.42364]
	Access function 0: 0
Creating dr for D.42364.first
analyze_innermost: success.
	base_address: &D.42364
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.42364]
	Access function 0: 0
Creating dr for MEM[(struct pair *)&D.42364 + 4B]
analyze_innermost: success.
	base_address: &D.42364
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.42364 + 4B]
Creating dr for MEM[(struct pair *)&D.42364 + 4B]
analyze_innermost: success.
	base_address: &D.42364
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.42364 + 4B]
Creating dr for MEM[(struct pair *)&D.42364 + 8B]
analyze_innermost: success.
	base_address: &D.42364
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.42364 + 8B]
Creating dr for MEM[(struct pair *)&D.42364 + 8B]
analyze_innermost: success.
	base_address: &D.42364
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.42364 + 8B]
Creating dr for MEM[(struct pair *)&D.42364 + 12B]
analyze_innermost: success.
	base_address: &D.42364
	offset from base address: 0
	constant offset from base address: 12
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.42364 + 12B]
Creating dr for MEM[(struct pair *)&D.42364 + 12B]
analyze_innermost: success.
	base_address: &D.42364
	offset from base address: 0
	constant offset from base address: 12
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.42364 + 12B]
Creating dr for MEM[(struct pair *)&D.42364 + 16B]
analyze_innermost: success.
	base_address: &D.42364
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.42364 + 16B]
Creating dr for MEM[(struct pair *)&D.42364 + 16B]
analyze_innermost: success.
	base_address: &D.42364
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.42364 + 16B]
Creating dr for MEM[(struct _Rb_tree_const_iterator *)&__position]
analyze_innermost: success.
	base_address: &__position
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_const_iterator *)&__position]
Creating dr for MEM[(struct _Rb_tree_const_iterator *)&__position]
analyze_innermost: success.
	base_address: &__position
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_const_iterator *)&__position]
Creating dr for MEM[(const int &)&D.42364]
analyze_innermost: success.
	base_address: &D.42364
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)&D.42364]
Creating dr for MEM[(const int &)&D.42364]
analyze_innermost: success.
	base_address: &D.42364
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)&D.42364]
Creating dr for MEM[(const int &)__res$second_135 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__res$second_135 + 32]
Creating dr for MEM[(const int &)__res$second_135 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__res$second_135 + 32]
Creating dr for MEM[(const struct sRequest &)__pos_130 + 36].port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)__pos_130 + 36]
	Access function 0: 0
Creating dr for MEM[(const struct sRequest &)__pos_130 + 36].port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)__pos_130 + 36]
	Access function 0: 0
Creating dr for MEM[(const struct sRequest &)__pos_130 + 36].label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)__pos_130 + 36]
	Access function 0: 32
Creating dr for MEM[(const struct sRequest &)__pos_130 + 36].label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)__pos_130 + 36]
	Access function 0: 32
Creating dr for label
analyze_innermost: success.
	base_address: &label
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: label
Creating dr for label
analyze_innermost: success.
	base_address: &label
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: label
Creating dr for MEM[(struct Arbiter * * *)this_5(D) + 328B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 328
	step: 0
	aligned to: 256
	base_object: MEM[(struct Arbiter * * *)this_5(D) + 328B]
Creating dr for MEM[(struct Arbiter * * *)this_5(D) + 328B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 328
	step: 0
	aligned to: 256
	base_object: MEM[(struct Arbiter * * *)this_5(D) + 328B]
Creating dr for *_99
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_99
Creating dr for *_99
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_99
Creating dr for _37->D.38560._vptr.Module
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_37
	Access function 0: 0
	Access function 1: 0
Creating dr for _37->D.38560._vptr.Module
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_37
	Access function 0: 0
	Access function 1: 0
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_38 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_38 + 32B]
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_38 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_38 + 32B]
Creating dr for MEM[(const struct sRequest &)__pos_130 + 36].out_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)__pos_130 + 36]
	Access function 0: 96
Creating dr for MEM[(const struct sRequest &)__pos_130 + 36].out_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct sRequest &)__pos_130 + 36]
	Access function 0: 96
Creating dr for MEM[(struct _Rb_tree_node_base * *)this_5(D) + 232B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 232
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_5(D) + 232B]
Creating dr for MEM[(const int &)port_iter$_M_node_195 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)port_iter$_M_node_195 + 32]
Creating dr for MEM[(const int &)port_iter$_M_node_195 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)port_iter$_M_node_195 + 32]
Creating dr for MEM[(struct Arbiter * * *)this_5(D) + 328B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 328
	step: 0
	aligned to: 256
	base_object: MEM[(struct Arbiter * * *)this_5(D) + 328B]
Creating dr for MEM[(struct Arbiter * * *)this_5(D) + 328B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 328
	step: 0
	aligned to: 256
	base_object: MEM[(struct Arbiter * * *)this_5(D) + 328B]
Creating dr for *_103
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_103
Creating dr for *_103
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_103
Creating dr for _51->D.38560._vptr.Module
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_51
	Access function 0: 0
	Access function 1: 0
Creating dr for _51->D.38560._vptr.Module
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_51
	Access function 0: 0
	Access function 1: 0
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_52 + 48B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_52 + 48B]
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_52 + 48B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_52 + 48B]
Creating dr for MEM[(const int &)port_iter$_M_node_195 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)port_iter$_M_node_195 + 32]
Creating dr for MEM[(const int &)port_iter$_M_node_195 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)port_iter$_M_node_195 + 32]
Creating dr for MEM[(struct Arbiter * * *)this_5(D) + 328B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 328
	step: 0
	aligned to: 256
	base_object: MEM[(struct Arbiter * * *)this_5(D) + 328B]
Creating dr for MEM[(struct Arbiter * * *)this_5(D) + 328B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 328
	step: 0
	aligned to: 256
	base_object: MEM[(struct Arbiter * * *)this_5(D) + 328B]
Creating dr for *_103
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_103
Creating dr for *_103
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_103
Creating dr for _51->D.38560._vptr.Module
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_51
	Access function 0: 0
	Access function 1: 0
Creating dr for _51->D.38560._vptr.Module
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_51
	Access function 0: 0
	Access function 1: 0
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_52 + 48B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_52 + 48B]
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_52 + 48B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_52 + 48B]
Creating dr for MEM[(int * *)this_5(D) + 112B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 112
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_5(D) + 112B]
Creating dr for MEM[(int * *)this_5(D) + 112B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 112
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_5(D) + 112B]
Creating dr for *_105
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_105
Creating dr for *_105
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_105
Creating dr for MEM[(const int &)port_iter$_M_node_195 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)port_iter$_M_node_195 + 32]
Creating dr for MEM[(const int &)port_iter$_M_node_195 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)port_iter$_M_node_195 + 32]
Creating dr for MEM[(int * *)this_5(D) + 136B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 136
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_5(D) + 136B]
Creating dr for MEM[(int * *)this_5(D) + 136B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 136
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_5(D) + 136B]
Creating dr for *_107
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_107
Creating dr for *_107
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_107
Creating dr for *_105
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_105
Creating dr for *_105
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_105
Creating dr for MEM[(const int &)port_iter$_M_node_195 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)port_iter$_M_node_195 + 32]
Creating dr for MEM[(const int &)port_iter$_M_node_195 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)port_iter$_M_node_195 + 32]
Creating dr for *_111
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_111
Creating dr for *_111
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_111
Creating dr for MEM[(struct Arbiter * * *)this_5(D) + 304B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 304
	step: 0
	aligned to: 256
	base_object: MEM[(struct Arbiter * * *)this_5(D) + 304B]
Creating dr for MEM[(struct Arbiter * * *)this_5(D) + 304B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 304
	step: 0
	aligned to: 256
	base_object: MEM[(struct Arbiter * * *)this_5(D) + 304B]
Creating dr for *_109
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_109
Creating dr for *_109
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_109
Creating dr for _68->D.38560._vptr.Module
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_68
	Access function 0: 0
	Access function 1: 0
Creating dr for _68->D.38560._vptr.Module
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_68
	Access function 0: 0
	Access function 1: 0
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_69 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_69 + 40B]
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_69 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_69 + 40B]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:20)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:44, LOOPS:4, CONDITIONS:19, STMTS:526)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_4 bb_3 })
  {
    <bb 2>:
    # DEBUG D#88 => &this_5(D)->D.37748.D.37705._in_occ
    # DEBUG this => D#88
    # DEBUG D#9 => &MEM[(const struct set *)D#88]._M_t
    # VUSE <.MEM_6(D)>
    port_iter$_M_node_74 = MEM[(struct _Rb_tree_node_base * *)this_5(D) + 184B];
    # DEBUG D#8 => D#9
    # DEBUG this => D#8
    # DEBUG this => NULL
    # DEBUG __x => port_iter$_M_node_74
    # DEBUG port_iter$_M_node => port_iter$_M_node_74
    # DEBUG port_iter$_M_node => port_iter$_M_node_74
    # DEBUG D#97 => &this_5(D)->D.37748.D.37705._in_occ
    # DEBUG this => D#97
    # DEBUG D#10 => &MEM[(const struct set *)D#97]._M_t
    # DEBUG this => D#10
    _172 = &MEM[(const struct _Rb_tree *)this_5(D) + 160B]._M_impl._M_header;
    # DEBUG this => NULL
    # DEBUG __x => _172
    # DEBUG this => &port_iter
    # DEBUG __x => &D.38753
    if (port_iter$_M_node_74 != _172)
      goto <bb 4>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 bb_28 }, succs = {bb_31 bb_30 })
  {
    <bb 3>:
    # .MEM_239 = PHI <.MEM_6(D)(2), .MEM_43(28)>
    # DEBUG D#98 => &this_5(D)->D.37748.D.37705._out_occ
    # DEBUG this => D#98
    # DEBUG D#9 => &MEM[(const struct set *)D#98]._M_t
    # VUSE <.MEM_239>
    port_iter$_M_node_42 = MEM[(struct _Rb_tree_node_base * *)this_5(D) + 232B];
    # DEBUG D#8 => D#9
    # DEBUG this => D#8
    # DEBUG this => NULL
    # DEBUG __x => port_iter$_M_node_42
    # DEBUG port_iter$_M_node => port_iter$_M_node_42
    # DEBUG port_iter$_M_node => port_iter$_M_node_42
    # DEBUG D#107 => &this_5(D)->D.37748.D.37705._out_occ
    # DEBUG this => D#107
    # DEBUG D#10 => &MEM[(const struct set *)D#107]._M_t
    # DEBUG this => D#10
    _147 = &MEM[(const struct _Rb_tree *)this_5(D) + 208B]._M_impl._M_header;
    # DEBUG this => NULL
    # DEBUG __x => _147
    # DEBUG this => &port_iter
    # DEBUG __x => &D.39998
    if (port_iter$_M_node_42 != _147)
      goto <bb 31>;
    else
      goto <bb 30>;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 })
  {
    <bb 4>:

  }
  bb_11 (preds = {bb_10 }, succs = {})
  {
    <bb 11>:
    # .MEM_45 = VDEF <.MEM_28>
    __assert_fail ("output > -1", "allocators/separable_input_first.cpp", 73, &__PRETTY_FUNCTION__);

  }
  bb_27 (preds = {bb_26 bb_25 }, succs = {})
  {
    <bb 27>:
    # .MEM_44 = VDEF <.MEM_149>
    __assert_fail ("(req.port == input) && (req.label == label)", "allocators/separable_input_first.cpp", 76, &__PRETTY_FUNCTION__);

  }
  bb_30 (preds = {bb_3 bb_37 }, succs = {bb_43 })
  {
    <bb 30>:
    # .MEM_238 = PHI <.MEM_239(3), .MEM_4(37)>

  }
  bb_43 (preds = {bb_30 }, succs = {bb_1 })
  {
    <bb 43>:
    # DEBUG D#110 => {CLOBBER}
    # DEBUG port_iter$_M_node => D#110
    # VUSE <.MEM_238>
    return;

  }
  bb_31 (preds = {bb_3 }, succs = {bb_32 })
  {
    <bb 31>:

  }
  bb_35 (preds = {bb_34 bb_33 }, succs = {})
  {
    <bb 35>:
    # .MEM_79 = VDEF <.MEM_54>
    __assert_fail ("(_inmatch[input] == -1) && (_outmatch[output] == -1)", "allocators/separable_input_first.cpp", 93, &__PRETTY_FUNCTION__);

  }
  loop_2 (header = 32, latch = 38, niter = )
  {
    bb_32 (preds = {bb_31 bb_38 }, succs = {bb_33 bb_37 })
    {
      <bb 32>:
      # .MEM_194 = PHI <.MEM_239(31), .MEM_4(38)>
      # port_iter$_M_node_195 = PHI <port_iter$_M_node_42(31), port_iter$_M_node_114(38)>
      # DEBUG port_iter$_M_node => port_iter$_M_node_195
      # DEBUG D#107 => &this_5(D)->D.37748.D.37705._out_occ
      # DEBUG this => D#107
      # DEBUG D#10 => &MEM[(const struct set *)D#107]._M_t
      # DEBUG this => D#10
      # DEBUG this => NULL
      # DEBUG __x => _147
      # DEBUG this => &port_iter
      # DEBUG __x => &D.39998
      # DEBUG this => &port_iter
      # DEBUG this => port_iter$_M_node_195
      # DEBUG D#99 => &MEM[(const struct _Rb_tree_node *)port_iter$_M_node_195]._M_value_field
      # DEBUG __r => D#99
      # DEBUG output => D#99
      # VUSE <.MEM_194>
      _49 = MEM[(const int &)port_iter$_M_node_195 + 32];
      _50 = (long unsigned int) _49;
      # DEBUG D#100 => &this_5(D)->D.37748._output_arb
      # VUSE <.MEM_194>
      _88 = MEM[(struct Arbiter * * *)this_5(D) + 328B];
      # DEBUG D#3 => D#100
      # DEBUG __n => _50
      # DEBUG this => D#3
      _102 = _50 * 8;
      _103 = _88 + _102;
      # VUSE <.MEM_194>
      _51 = *_103;
      # VUSE <.MEM_194>
      _52 = _51->D.38560._vptr.Module;
      # VUSE <.MEM_194>
      _53 = MEM[(int (*__vtbl_ptr_type) () *)_52 + 48B];
      # .MEM_54 = VDEF <.MEM_194>
      _55 = OBJ_TYPE_REF(_53;(struct Arbiter)_51->6) (_51, 0B, 0B);
      # DEBUG input => _55
      if (_55 >= 0)
        goto <bb 33>;
      else
        goto <bb 37>;

    }
    bb_33 (preds = {bb_32 }, succs = {bb_35 bb_34 })
    {
      <bb 33>:
      _56 = (long unsigned int) _55;
      # DEBUG D#101 => &this_5(D)->D.37748.D.37705.D.36911._inmatch
      # VUSE <.MEM_54>
      _91 = MEM[(int * *)this_5(D) + 112B];
      # DEBUG D#4 => D#101
      # DEBUG __n => _56
      # DEBUG this => D#4
      _104 = _56 * 4;
      _105 = _91 + _104;
      # VUSE <.MEM_54>
      _58 = *_105;
      if (_58 != -1)
        goto <bb 35>;
      else
        goto <bb 34>;

    }
    bb_34 (preds = {bb_33 }, succs = {bb_35 bb_36 })
    {
      <bb 34>:
      # VUSE <.MEM_54>
      _59 = MEM[(const int &)port_iter$_M_node_195 + 32];
      _60 = (long unsigned int) _59;
      # DEBUG D#102 => &this_5(D)->D.37748.D.37705.D.36911._outmatch
      # VUSE <.MEM_54>
      _92 = MEM[(int * *)this_5(D) + 136B];
      # DEBUG D#4 => D#102
      # DEBUG __n => _60
      # DEBUG this => D#4
      _106 = _60 * 4;
      _107 = _92 + _106;
      # VUSE <.MEM_54>
      _62 = *_107;
      if (_62 != -1)
        goto <bb 35>;
      else
        goto <bb 36>;

    }
    bb_36 (preds = {bb_34 }, succs = {bb_37 })
    {
      <bb 36>:
      # DEBUG D#103 => &this_5(D)->D.37748.D.37705.D.36911._inmatch
      # DEBUG D#4 => D#103
      # DEBUG __n => _56
      # DEBUG this => D#4
      # .MEM_64 = VDEF <.MEM_54>
      *_105 = _59;
      # VUSE <.MEM_64>
      _65 = MEM[(const int &)port_iter$_M_node_195 + 32];
      _66 = (long unsigned int) _65;
      # DEBUG D#104 => &this_5(D)->D.37748.D.37705.D.36911._outmatch
      # DEBUG D#4 => D#104
      # DEBUG __n => _66
      # DEBUG this => D#4
      _110 = _66 * 4;
      _111 = _92 + _110;
      # .MEM_67 = VDEF <.MEM_64>
      *_111 = _55;
      # DEBUG D#105 => &this_5(D)->D.37748._input_arb
      # VUSE <.MEM_67>
      _89 = MEM[(struct Arbiter * * *)this_5(D) + 304B];
      # DEBUG D#3 => D#105
      # DEBUG __n => _56
      # DEBUG this => D#3
      _108 = _56 * 8;
      _109 = _89 + _108;
      # VUSE <.MEM_67>
      _68 = *_109;
      # VUSE <.MEM_67>
      _69 = _68->D.38560._vptr.Module;
      # VUSE <.MEM_67>
      _70 = MEM[(int (*__vtbl_ptr_type) () *)_69 + 40B];
      # .MEM_71 = VDEF <.MEM_67>
      OBJ_TYPE_REF(_70;(struct Arbiter)_68->5) (_68);
      # VUSE <.MEM_71>
      _72 = MEM[(const int &)port_iter$_M_node_195 + 32];
      _73 = (long unsigned int) _72;
      # DEBUG D#106 => &this_5(D)->D.37748._output_arb
      # VUSE <.MEM_71>
      _90 = MEM[(struct Arbiter * * *)this_5(D) + 328B];
      # DEBUG D#3 => D#106
      # DEBUG __n => _73
      # DEBUG this => D#3
      _112 = _73 * 8;
      _113 = _90 + _112;
      # VUSE <.MEM_71>
      _75 = *_113;
      # VUSE <.MEM_71>
      _76 = _75->D.38560._vptr.Module;
      # VUSE <.MEM_71>
      _77 = MEM[(int (*__vtbl_ptr_type) () *)_76 + 40B];
      # .MEM_78 = VDEF <.MEM_71>
      OBJ_TYPE_REF(_77;(struct Arbiter)_75->5) (_75);

    }
    bb_37 (preds = {bb_32 bb_36 }, succs = {bb_38 bb_30 })
    {
      <bb 37>:
      # .MEM_4 = PHI <.MEM_54(32), .MEM_78(36)>
      # DEBUG this => &port_iter
      # VUSE <.MEM_4>
      port_iter$_M_node_114 = std::_Rb_tree_increment (port_iter$_M_node_195);
      # DEBUG port_iter$_M_node => port_iter$_M_node_114
      # DEBUG port_iter$_M_node => port_iter$_M_node_114
      # DEBUG D#107 => &this_5(D)->D.37748.D.37705._out_occ
      # DEBUG this => D#107
      # DEBUG D#10 => &MEM[(const struct set *)D#107]._M_t
      # DEBUG this => D#10
      # DEBUG this => NULL
      # DEBUG __x => _147
      # DEBUG this => &port_iter
      # DEBUG __x => &D.39998
      if (port_iter$_M_node_114 != _147)
        goto <bb 38>;
      else
        goto <bb 30>;

    }
    bb_38 (preds = {bb_37 }, succs = {bb_32 })
    {
      <bb 38>:
      goto <bb 32>;

    }
  }
  loop_1 (header = 5, latch = 29, niter = )
  {
    bb_5 (preds = {bb_4 bb_29 }, succs = {bb_6 bb_10 })
    {
      <bb 5>:
      # .MEM_192 = PHI <.MEM_6(D)(4), .MEM_43(29)>
      # port_iter$_M_node_189 = PHI <port_iter$_M_node_74(4), port_iter$_M_node_100(29)>
      # DEBUG port_iter$_M_node => port_iter$_M_node_189
      # DEBUG D#97 => &this_5(D)->D.37748.D.37705._in_occ
      # DEBUG this => D#97
      # DEBUG D#10 => &MEM[(const struct set *)D#97]._M_t
      # DEBUG this => D#10
      # DEBUG this => NULL
      # DEBUG __x => _172
      # DEBUG this => &port_iter
      # DEBUG __x => &D.38753
      # DEBUG this => &port_iter
      # DEBUG this => port_iter$_M_node_189
      # DEBUG D#115 => &MEM[(const struct _Rb_tree_node *)port_iter$_M_node_189]._M_value_field
      # DEBUG __r => D#115
      # DEBUG input => D#115
      # VUSE <.MEM_192>
      _7 = MEM[(const int &)port_iter$_M_node_189 + 32];
      _8 = (long unsigned int) _7;
      # DEBUG D#89 => &this_5(D)->D.37748.D.37705._in_req
      # VUSE <.MEM_192>
      _82 = MEM[(struct map * *)this_5(D) + 256B];
      # DEBUG D#2 => D#89
      # DEBUG __n => _8
      # DEBUG this => D#2
      _61 = _8 * 48;
      _57 = _82 + _61;
      # DEBUG this => NULL
      # VUSE <.MEM_192>
      req_iter$_M_node_10 = MEM[(struct _Rb_tree_node_base * *)_57 + 24B];
      # DEBUG D#11 => D#12
      # DEBUG this => D#11
      # DEBUG this => NULL
      # DEBUG __x => req_iter$_M_node_10
      # DEBUG this => &req_iter
      # DEBUG __it => &D.39923
      # DEBUG req_iter$_M_node => req_iter$_M_node_10
      # DEBUG req_iter$_M_node => req_iter$_M_node_10
      # DEBUG D#93 => &this_5(D)->D.37748.D.37705._in_req
      # DEBUG D#2 => D#93
      # DEBUG __n => _8
      # DEBUG this => D#2
      # DEBUG this => NULL
      # DEBUG this => D#13
      _185 = &MEM[(struct _Rb_tree *)_57]._M_impl._M_header;
      # DEBUG this => NULL
      # DEBUG __x => _185
      # DEBUG this => &D.39988
      # DEBUG __it => &D.39934
      # DEBUG this => &req_iter
      # DEBUG __x => &D.39988
      if (req_iter$_M_node_10 != _185)
        goto <bb 6>;
      else
        goto <bb 10>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_7 })
    {
      <bb 6>:

    }
    bb_8 (preds = {bb_7 }, succs = {bb_42 })
    {
      <bb 8>:
      # _232 = PHI <_12(7)>

    }
    bb_42 (preds = {bb_8 }, succs = {bb_10 })
    {
      <bb 42>:
      goto <bb 10>;

    }
    bb_10 (preds = {bb_42 bb_5 }, succs = {bb_11 bb_12 })
    {
      <bb 10>:
      # .MEM_179 = PHI <.MEM_23(42), .MEM_192(5)>
      # _187 = PHI <_232(42), _8(5)>
      # .MEM_24 = VDEF <.MEM_179>
      label = -1;
      # DEBUG D#94 => &this_5(D)->D.37748._input_arb
      # VUSE <.MEM_24>
      _86 = MEM[(struct Arbiter * * *)this_5(D) + 304B];
      # DEBUG D#3 => D#94
      # DEBUG __n => _187
      # DEBUG this => D#3
      _94 = _187 * 8;
      _95 = _86 + _94;
      # VUSE <.MEM_24>
      _25 = *_95;
      # VUSE <.MEM_24>
      _26 = _25->D.38560._vptr.Module;
      # VUSE <.MEM_24>
      _27 = MEM[(int (*__vtbl_ptr_type) () *)_26 + 48B];
      # .MEM_28 = VDEF <.MEM_24>
      _29 = OBJ_TYPE_REF(_27;(struct Arbiter)_25->6) (_25, &label, 0B);
      # DEBUG output => _29
      if (_29 < 0)
        goto <bb 11>;
      else
        goto <bb 12>;

    }
    bb_12 (preds = {bb_10 }, succs = {bb_39 bb_13 })
    {
      <bb 12>:
      _30 = (long unsigned int) _29;
      # DEBUG D#95 => &this_5(D)->D.37748.D.37705._out_req
      # VUSE <.MEM_28>
      _84 = MEM[(struct map * *)this_5(D) + 280B];
      # DEBUG D#2 => D#95
      # DEBUG __n => _30
      # DEBUG this => D#2
      _96 = _30 * 48;
      _97 = _84 + _96;
      # DEBUG this => _97
      # DEBUG __k => D#115
      # DEBUG this => _97
      # DEBUG __x => D#115
      # DEBUG D#27 => &_97->_M_t
      # DEBUG this => D#27
      # DEBUG __k => D#115
      # DEBUG this => D#27
      __pos_116 = &MEM[(struct _Rb_tree *)_97]._M_impl._M_header;
      # VUSE <.MEM_28>
      __pos_117 = MEM[(struct _Rb_tree_node_base * *)_97 + 16B];
      # DEBUG D#18 => D#27
      # DEBUG this => D#18
      # DEBUG D#26 => D#27
      # DEBUG __x => NULL
      # DEBUG __y => NULL
      # DEBUG __k => D#115
      # DEBUG __y => __pos_116
      # DEBUG __x => __pos_117
      if (__pos_117 == 0B)
        goto <bb 39>;
      else
        goto <bb 13>;

    }
    bb_13 (preds = {bb_12 }, succs = {bb_16 })
    {
      <bb 13>:
      # VUSE <.MEM_28>
      pretmp_246 = MEM[(const int &)port_iter$_M_node_189 + 32];
      goto <bb 16>;

    }
    bb_19 (preds = {bb_14 }, succs = {bb_41 })
    {
      <bb 19>:
      # __pos_231 = PHI <__pos_132(14)>

    }
    bb_41 (preds = {bb_19 }, succs = {bb_40 bb_20 })
    {
      <bb 41>:
      # DEBUG this => NULL
      # DEBUG __x => __pos_231
      # DEBUG __i$_M_node => __pos_231
      # DEBUG this => _97
      # DEBUG D#13 => &_97->_M_t
      # DEBUG this => D#13
      # DEBUG this => NULL
      # DEBUG __x => __pos_116
      # DEBUG this => &__i
      # DEBUG __x => NULL
      if (__pos_116 == __pos_231)
        goto <bb 40>;
      else
        goto <bb 20>;

    }
    bb_20 (preds = {bb_41 }, succs = {bb_40 bb_25 })
    {
      <bb 20>:
      # DEBUG this => &__i
      # DEBUG this => __pos_231
      # DEBUG D#83 => &MEM[(struct _Rb_tree_node *)__pos_231]._M_value_field
      # DEBUG __r => D#83
      # DEBUG D#84 => &MEM[(struct pair &)__pos_231 + 32].first
      # DEBUG D#17 => _97
      # DEBUG this => D#17
      # DEBUG D#16 => D#17
      # DEBUG D#15 => &D#16->_M_t
      # DEBUG D#14 => D#15
      # DEBUG this => D#14
      # DEBUG D#6 => D#115
      # VUSE <.MEM_28>
      _125 = MEM[(const int &)__pos_231 + 32];
      # DEBUG D#7 => D#84
      # DEBUG this => D#5
      # DEBUG __x => D#6
      # DEBUG __y => D#7
      if (_125 > pretmp_246)
        goto <bb 40>;
      else
        goto <bb 25>;

    }
    bb_21 (preds = {bb_40 }, succs = {bb_23 bb_22 })
    {
      <bb 21>:
      # DEBUG D#76 => D#81
      # DEBUG this => _128
      # DEBUG __x => __res$first_134
      # DEBUG __p => __res$second_135
      # DEBUG __v => &D.42364
      # DEBUG __node_gen => D#76
      # DEBUG D#75 => D#76
      # DEBUG this => _128
      _136 = __pos_116 == __res$second_135;
      _140 = __res$first_134 != 0B;
      _174 = _136 | _140;
      if (_174 != 0)
        goto <bb 23>;
      else
        goto <bb 22>;

    }
    bb_22 (preds = {bb_21 }, succs = {bb_23 })
    {
      <bb 22>:
      # DEBUG __x => __res$second_135
      # DEBUG __x => __res$second_135
      # DEBUG this => __res$second_135
      # DEBUG D#29 => &MEM[(const struct _Rb_tree_node *)__res$second_135]._M_value_field
      # DEBUG __r => D#29
      # DEBUG __x => D#29
      # DEBUG this => D#21
      # DEBUG D#73 => &MEM[(const struct pair &)__res$second_135 + 32].first
      # DEBUG __x => &D.42364
      # DEBUG this => D#21
      # DEBUG D#74 => &MEM[(struct _Rb_tree *)_128]._M_impl._M_key_compare
      # DEBUG D#5 => D#74
      # VUSE <.MEM_157>
      _137 = MEM[(const int &)&D.42364];
      # VUSE <.MEM_157>
      _138 = MEM[(const int &)__res$second_135 + 32];
      # DEBUG D#7 => D#73
      # DEBUG this => D#5
      # DEBUG __x => D#6
      # DEBUG __y => D#7
      __insert_left_175 = _137 < _138;
      pretmp_242 = (int) __insert_left_175;

    }
    bb_23 (preds = {bb_22 bb_21 }, succs = {bb_24 })
    {
      <bb 23>:
      # prephitmp_243 = PHI <pretmp_242(22), 1(21)>
      # DEBUG __insert_left => NULL
      # DEBUG D#72 => D#75
      # DEBUG __arg => &D.42364
      # DEBUG this => D#72
      # DEBUG D#71 => D#72
      # DEBUG D#70 => D#71->_M_t
      # DEBUG D#69 => D#70
      # DEBUG __x => &D.42364
      # DEBUG this => D#69
      # DEBUG D#68 => D#69
      # DEBUG D#67 => D#69
      # DEBUG D#56 => D#67
      # DEBUG this => D#56
      # DEBUG D#55 => D#56
      # DEBUG this => D#55
      # DEBUG __n => 1
      # DEBUG __a => D#54
      # DEBUG D#53 => D#54
      # DEBUG D#51 => D#53
      # DEBUG D#52 => 0B
      # DEBUG __n => 1
      # DEBUG this => D#51
      # DEBUG D.42393 => D#52
      # DEBUG D#50 => D#51
      # DEBUG D#49 => D#50
      # DEBUG this => D#49
      # .MEM_158 = VDEF <.MEM_157>
      _145 = operator new (56);
      # DEBUG __tmp => _145
      # DEBUG D#66 => D#68
      # DEBUG __node => _145
      # DEBUG __x => &D.42364
      # DEBUG this => D#66
      # DEBUG D#65 => D#66
      # DEBUG this => _145
      # DEBUG D#116 => &_145->_M_value_field
      # DEBUG __r => D#116
      # DEBUG D#58 => D#65
      # DEBUG this => D#58
      # DEBUG D#57 => D#58
      # DEBUG this => D#57
      # DEBUG this => NULL
      # DEBUG D.41823 => NULL
      # DEBUG this => NULL
      # DEBUG __p => D#116
      # DEBUG __val => &D.42364
      # DEBUG this => D#48
      # DEBUG D#1 => 20
      # DEBUG __p => D#116
      # DEBUG D.41746 => D#1
      # .MEM_159 = VDEF <.MEM_158>
      MEM[(struct pair *)_145 + 32B] = D.42364;
      # DEBUG this => NULL
      # DEBUG this => NULL
      # DEBUG __z => NULL
      # .MEM_161 = VDEF <.MEM_159>
      std::_Rb_tree_insert_and_rebalance (prephitmp_243, _145, __res$second_135, __pos_116);
      # VUSE <.MEM_161>
      _143 = MEM[(struct _Rb_tree *)_97]._M_impl._M_node_count;
      _144 = _143 + 1;
      # .MEM_162 = VDEF <.MEM_161>
      MEM[(struct _Rb_tree *)_97]._M_impl._M_node_count = _144;
      # DEBUG this => NULL
      # DEBUG __x => NULL

    }
    bb_24 (preds = {bb_23 bb_40 }, succs = {bb_25 })
    {
      <bb 24>:
      # .MEM_148 = PHI <.MEM_162(23), .MEM_157(40)>
      # SR.219_155 = PHI <_145(23), __res$first_134(40)>
      # DEBUG D#79 => {CLOBBER}
      # DEBUG __res$first => D#79
      # DEBUG D#80 => {CLOBBER}
      # DEBUG __res$second => D#80
      # DEBUG __i$_M_node => SR.219_155
      # .MEM_167 = VDEF <.MEM_148>
      D.42364 ={v} {CLOBBER};
      # VUSE <.MEM_167>
      pretmp_244 = MEM[(const int &)port_iter$_M_node_189 + 32];

    }
    bb_25 (preds = {bb_20 bb_24 }, succs = {bb_27 bb_26 })
    {
      <bb 25>:
      # __pos_130 = PHI <__pos_231(20), SR.219_155(24)>
      # .MEM_149 = PHI <.MEM_28(20), .MEM_167(24)>
      # prephitmp_245 = PHI <pretmp_246(20), pretmp_244(24)>
      # DEBUG __i$_M_node => __pos_130
      # DEBUG this => &__i
      # DEBUG this => __pos_130
      # DEBUG D#85 => &MEM[(struct _Rb_tree_node *)__pos_130]._M_value_field
      # DEBUG __r => D#85
      # DEBUG D#87 => {CLOBBER}
      # DEBUG __i$_M_node => D#87
      # DEBUG req => NULL
      # VUSE <.MEM_149>
      _33 = MEM[(const struct sRequest &)__pos_130 + 36].port;
      if (_33 != prephitmp_245)
        goto <bb 27>;
      else
        goto <bb 26>;

    }
    bb_26 (preds = {bb_25 }, succs = {bb_27 bb_28 })
    {
      <bb 26>:
      # VUSE <.MEM_149>
      _35 = MEM[(const struct sRequest &)__pos_130 + 36].label;
      # VUSE <.MEM_149>
      label.2_36 = label;
      if (_35 != label.2_36)
        goto <bb 27>;
      else
        goto <bb 28>;

    }
    bb_28 (preds = {bb_26 }, succs = {bb_29 bb_3 })
    {
      <bb 28>:
      # DEBUG D#96 => &this_5(D)->D.37748._output_arb
      # VUSE <.MEM_149>
      _87 = MEM[(struct Arbiter * * *)this_5(D) + 328B];
      # DEBUG D#3 => D#96
      # DEBUG __n => _30
      # DEBUG this => D#3
      _98 = _30 * 8;
      _99 = _87 + _98;
      # VUSE <.MEM_149>
      _37 = *_99;
      # VUSE <.MEM_149>
      _38 = _37->D.38560._vptr.Module;
      # VUSE <.MEM_149>
      _39 = MEM[(int (*__vtbl_ptr_type) () *)_38 + 32B];
      # VUSE <.MEM_149>
      _40 = MEM[(const struct sRequest &)__pos_130 + 36].out_pri;
      # .MEM_41 = VDEF <.MEM_149>
      OBJ_TYPE_REF(_39;(struct Arbiter)_37->4) (_37, _33, _35, _40);
      # DEBUG this => &port_iter
      # VUSE <.MEM_41>
      port_iter$_M_node_100 = std::_Rb_tree_increment (port_iter$_M_node_189);
      # DEBUG port_iter$_M_node => port_iter$_M_node_100
      # DEBUG D#108 => {CLOBBER}
      # DEBUG req_iter$_M_node => D#108
      # .MEM_43 = VDEF <.MEM_41>
      label ={v} {CLOBBER};
      # DEBUG port_iter$_M_node => port_iter$_M_node_100
      # DEBUG D#97 => &this_5(D)->D.37748.D.37705._in_occ
      # DEBUG this => D#97
      # DEBUG D#10 => &MEM[(const struct set *)D#97]._M_t
      # DEBUG this => D#10
      # DEBUG this => NULL
      # DEBUG __x => _172
      # DEBUG this => &port_iter
      # DEBUG __x => &D.38753
      if (port_iter$_M_node_100 != _172)
        goto <bb 29>;
      else
        goto <bb 3>;

    }
    bb_29 (preds = {bb_28 }, succs = {bb_5 })
    {
      <bb 29>:
      goto <bb 5>;

    }
    bb_39 (preds = {bb_12 }, succs = {bb_40 })
    {
      <bb 39>:
      # VUSE <.MEM_28>
      pretmp_240 = MEM[(const int &)port_iter$_M_node_189 + 32];

    }
    bb_40 (preds = {bb_20 bb_41 bb_39 }, succs = {bb_21 bb_24 })
    {
      <bb 40>:
      # __pos_2 = PHI <__pos_231(20), __pos_231(41), __pos_116(39)>
      # prephitmp_241 = PHI <pretmp_246(20), pretmp_246(41), pretmp_240(39)>
      # DEBUG this => &D.42364
      # DEBUG __a => D#115
      # DEBUG __b => NULL
      # .MEM_150 = VDEF <.MEM_28>
      D.42364.first = prephitmp_241;
      # .MEM_151 = VDEF <.MEM_150>
      MEM[(struct pair *)&D.42364 + 4B] = 0;
      # .MEM_152 = VDEF <.MEM_151>
      MEM[(struct pair *)&D.42364 + 8B] = 0;
      # .MEM_153 = VDEF <.MEM_152>
      MEM[(struct pair *)&D.42364 + 12B] = 0;
      # .MEM_154 = VDEF <.MEM_153>
      MEM[(struct pair *)&D.42364 + 16B] = 0;
      # DEBUG this => _97
      # DEBUG __position$_M_node => __pos_2
      # DEBUG __x => &D.42364
      # DEBUG this => NULL
      # DEBUG __it => &__position
      _128 = &_97->_M_t;
      # DEBUG this => _128
      # DEBUG __pos => __pos_2
      # DEBUG __x => &D.42364
      # DEBUG this => &__an
      # DEBUG __t => _128
      # DEBUG __an$_M_t => _128
      # DEBUG D#82 => &__an
      # DEBUG this => _128
      # .MEM_156 = VDEF <.MEM_154>
      MEM[(struct _Rb_tree_const_iterator *)&__position] = __pos_2;
      # DEBUG __v => &D.42364
      # DEBUG __node_gen => D#82
      # DEBUG D#81 => D#82
      # DEBUG __x => &D.42364
      # DEBUG this => D#21
      # .MEM_157 = VDEF <.MEM_156>
      __res = std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_M_get_insert_hint_unique_pos (_128, __position, &D.42364.first);
      # VUSE <.MEM_157>
      __res$first_134 = MEM[(struct pair *)&__res];
      # DEBUG __res$first => __res$first_134
      # VUSE <.MEM_157>
      __res$second_135 = MEM[(struct pair *)&__res + 8B];
      # DEBUG __res$second => __res$second_135
      if (__res$second_135 != 0B)
        goto <bb 21>;
      else
        goto <bb 24>;

    }
    loop_4 (header = 16, latch = 15, niter = )
    {
      bb_14 (preds = {bb_17 bb_18 }, succs = {bb_19 bb_15 })
      {
        <bb 14>:
        # __pos_133 = PHI <__pos_121(17), __pos_122(18)>
        # __pos_132 = PHI <__pos_188(17), __pos_182(18)>
        # DEBUG __y => __pos_132
        # DEBUG __x => __pos_133
        if (__pos_133 == 0B)
          goto <bb 19>;
        else
          goto <bb 15>;

      }
      bb_15 (preds = {bb_14 }, succs = {bb_16 })
      {
        <bb 15>:

      }
      bb_16 (preds = {bb_13 bb_15 }, succs = {bb_17 bb_18 })
      {
        <bb 16>:
        # __pos_188 = PHI <__pos_117(13), __pos_133(15)>
        # __pos_182 = PHI <__pos_116(13), __pos_132(15)>
        # DEBUG __y => __pos_182
        # DEBUG __x => __pos_188
        # DEBUG __x => __pos_188
        # DEBUG __x => __pos_188
        # DEBUG this => __pos_188
        # DEBUG D#22 => &MEM[(const struct _Rb_tree_node *)__pos_188]._M_value_field
        # DEBUG __r => D#22
        # DEBUG __x => D#22
        # DEBUG this => D#21
        # DEBUG D#23 => &MEM[(const struct pair &)__pos_188 + 32].first
        # DEBUG D#24 => &D#25->_M_impl._M_key_compare
        # DEBUG D#5 => D#24
        # VUSE <.MEM_28>
        _119 = MEM[(const int &)__pos_188 + 32];
        # DEBUG D#6 => D#23
        # DEBUG D#7 => D#115
        # DEBUG this => D#5
        # DEBUG __x => D#6
        # DEBUG __y => D#7
        if (_119 >= pretmp_246)
          goto <bb 17>;
        else
          goto <bb 18>;

      }
      bb_17 (preds = {bb_16 }, succs = {bb_14 })
      {
        <bb 17>:
        # DEBUG __y => __pos_188
        # VUSE <.MEM_28>
        __pos_121 = MEM[(struct _Rb_tree_node_base * *)__pos_188 + 16B];
        # DEBUG D#19 => __pos_188
        # DEBUG __x => D#19
        # DEBUG __x => NULL
        goto <bb 14>;

      }
      bb_18 (preds = {bb_16 }, succs = {bb_14 })
      {
        <bb 18>:
        # VUSE <.MEM_28>
        __pos_122 = MEM[(struct _Rb_tree_node_base * *)__pos_188 + 24B];
        # DEBUG D#20 => __pos_188
        # DEBUG __x => D#20
        # DEBUG __x => NULL
        goto <bb 14>;

      }
    }
    loop_3 (header = 7, latch = 9, niter = )
    {
      bb_7 (preds = {bb_6 bb_9 }, succs = {bb_9 bb_8 })
      {
        <bb 7>:
        # .MEM_191 = PHI <.MEM_192(6), .MEM_23(9)>
        # _196 = PHI <_8(6), _12(9)>
        # req_iter$_M_node_186 = PHI <req_iter$_M_node_10(6), req_iter$_M_node_93(9)>
        # DEBUG req_iter$_M_node => req_iter$_M_node_186
        # DEBUG D#93 => &this_5(D)->D.37748.D.37705._in_req
        # DEBUG D#2 => D#93
        # DEBUG __n => _196
        # DEBUG this => D#2
        # DEBUG this => NULL
        # DEBUG this => D#13
        # DEBUG this => NULL
        # DEBUG __x => _185
        # DEBUG this => &D.39988
        # DEBUG __it => &D.39934
        # DEBUG this => &req_iter
        # DEBUG __x => &D.39988
        # DEBUG this => &req_iter
        # DEBUG this => req_iter$_M_node_186
        # DEBUG D#90 => &MEM[(const struct _Rb_tree_node *)req_iter$_M_node_186]._M_value_field
        # DEBUG __r => D#90
        # DEBUG D#91 => &MEM[(const struct pair *)req_iter$_M_node_186 + 32B].second
        # DEBUG req => D#91
        # DEBUG D#92 => &this_5(D)->D.37748._input_arb
        # VUSE <.MEM_191>
        _85 = MEM[(struct Arbiter * * *)this_5(D) + 304B];
        # DEBUG D#3 => D#92
        # DEBUG __n => _196
        # DEBUG this => D#3
        _13 = _196 * 8;
        _9 = _85 + _13;
        # VUSE <.MEM_191>
        _17 = *_9;
        # VUSE <.MEM_191>
        _18 = _17->D.38560._vptr.Module;
        # VUSE <.MEM_191>
        _19 = MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B];
        # VUSE <.MEM_191>
        _20 = MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].in_pri;
        # VUSE <.MEM_191>
        _21 = MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].label;
        # VUSE <.MEM_191>
        _22 = MEM[(const struct sRequest &)req_iter$_M_node_186 + 36].port;
        # .MEM_23 = VDEF <.MEM_191>
        OBJ_TYPE_REF(_19;(struct Arbiter)_17->4) (_17, _22, _21, _20);
        # DEBUG this => &req_iter
        # VUSE <.MEM_23>
        req_iter$_M_node_93 = std::_Rb_tree_increment (req_iter$_M_node_186);
        # DEBUG req_iter$_M_node => req_iter$_M_node_93
        # DEBUG req_iter$_M_node => req_iter$_M_node_93
        # VUSE <.MEM_23>
        _11 = MEM[(const int &)port_iter$_M_node_189 + 32];
        _12 = (long unsigned int) _11;
        # DEBUG D#93 => &this_5(D)->D.37748.D.37705._in_req
        # VUSE <.MEM_23>
        _83 = MEM[(struct map * *)this_5(D) + 256B];
        # DEBUG D#2 => D#93
        # DEBUG __n => _12
        # DEBUG this => D#2
        _16 = _12 * 48;
        _15 = _83 + _16;
        # DEBUG this => NULL
        # DEBUG this => D#13
        _14 = &MEM[(struct _Rb_tree *)_15]._M_impl._M_header;
        # DEBUG this => NULL
        # DEBUG __x => _14
        # DEBUG this => &D.39988
        # DEBUG __it => &D.39934
        # DEBUG this => &req_iter
        # DEBUG __x => &D.39988
        if (_14 != req_iter$_M_node_93)
          goto <bb 9>;
        else
          goto <bb 8>;

      }
      bb_9 (preds = {bb_7 }, succs = {bb_7 })
      {
        <bb 9>:
        goto <bb 7>;

      }
    }
  }
}

Pass statistics:
----------------

virtual void SeparableInputFirstAllocator::Allocate() (struct SeparableInputFirstAllocatorD.37711 * const thisD.38627)
{
  struct _Rb_tree_node_baseD.6878 * SR.220D.42408;
  struct _Rb_tree_node_baseD.6878 * SR.219D.42407;
  struct _Rb_tree_node_baseD.6878 * SR.218D.42406;
  const struct _Rb_tree_node_baseD.6878 * __posD.42405;
  struct _Rb_tree_nodeD.38976 * D.42402;
  boolD.2757 __insert_leftD.42380;
  struct iteratorD.39276 D.42385;
  struct iteratorD.39276 D.42374;
  struct pairD.7331 __resD.42369;
  struct _Rb_tree_node_baseD.6878 * __res$firstD.42373;
  struct _Rb_tree_node_baseD.6878 * __res$secondD.42372;
  struct const_iteratorD.39278 __positionD.42366;
  struct value_typeD.38758 D.42364;
  struct _Rb_tree_nodeD.38976 * __yD.42358;
  struct iteratorD.39276 D.42363;
  struct const_iteratorD.39278 __posD.42348;
  struct _Rb_tree_node_baseD.6878 * const __i$_M_nodeD.42362;
  struct _Rb_tree_node_baseD.6878 * SR.179D.42361;
  struct mapped_typeD.38757 & D.42360;
  const struct _Rb_tree_node_baseD.6878 * const req_iter$_M_nodeD.42201;
  const struct _Rb_tree_node_baseD.6878 * const port_iter$_M_nodeD.42199;
  intD.9 labelD.39990;
  static const charD.10 _ZZN28SeparableInputFirstAllocator8AllocateEvE19__PRETTY_FUNCTION__D.39992[54] = "virtual void SeparableInputFirstAllocator::Allocate()";
  intD.9 _7;
  long unsigned intD.14 _8;
  struct ArbiterD.36919 * & _9;
  intD.9 _11;
  long unsigned intD.14 _12;
  long unsigned intD.14 _13;
  struct _Rb_tree_node_baseD.6878 * _14;
  struct mapD.36085 & _15;
  long unsigned intD.14 _16;
  struct ArbiterD.36919 * _17;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _18;
  intD.9 (*__vtbl_ptr_typeD.2760) () _19;
  intD.9 _20;
  intD.9 _21;
  intD.9 _22;
  struct ArbiterD.36919 * _25;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _26;
  intD.9 (*__vtbl_ptr_typeD.2760) () _27;
  const intD.9 _29;
  long unsigned intD.14 _30;
  intD.9 _33;
  intD.9 _35;
  intD.9 label.2_36;
  struct ArbiterD.36919 * _37;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _38;
  intD.9 (*__vtbl_ptr_typeD.2760) () _39;
  intD.9 _40;
  intD.9 _49;
  long unsigned intD.14 _50;
  struct ArbiterD.36919 * _51;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _52;
  intD.9 (*__vtbl_ptr_typeD.2760) () _53;
  const intD.9 _55;
  long unsigned intD.14 _56;
  struct mapD.36085 & _57;
  intD.9 _58;
  intD.9 _59;
  long unsigned intD.14 _60;
  long unsigned intD.14 _61;
  intD.9 _62;
  intD.9 _65;
  long unsigned intD.14 _66;
  struct ArbiterD.36919 * _68;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _69;
  intD.9 (*__vtbl_ptr_typeD.2760) () _70;
  intD.9 _72;
  long unsigned intD.14 _73;
  struct ArbiterD.36919 * _75;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _76;
  intD.9 (*__vtbl_ptr_typeD.2760) () _77;
  struct mapD.36085 * _82;
  struct mapD.36085 * _83;
  struct mapD.36085 * _84;
  struct ArbiterD.36919 * * _85;
  struct ArbiterD.36919 * * _86;
  struct ArbiterD.36919 * * _87;
  struct ArbiterD.36919 * * _88;
  struct ArbiterD.36919 * * _89;
  struct ArbiterD.36919 * * _90;
  intD.9 * _91;
  intD.9 * _92;
  long unsigned intD.14 _94;
  struct ArbiterD.36919 * & _95;
  long unsigned intD.14 _96;
  struct mapD.36085 & _97;
  long unsigned intD.14 _98;
  struct ArbiterD.36919 * & _99;
  long unsigned intD.14 _102;
  struct ArbiterD.36919 * & _103;
  long unsigned intD.14 _104;
  intD.9 & _105;
  long unsigned intD.14 _106;
  intD.9 & _107;
  long unsigned intD.14 _108;
  struct ArbiterD.36919 * & _109;
  long unsigned intD.14 _110;
  intD.9 & _111;
  long unsigned intD.14 _112;
  struct ArbiterD.36919 * & _113;
  const intD.9 _119;
  const intD.9 _125;
  struct _Rep_typeD.38970 * _128;
  boolD.2757 _136;
  const intD.9 _137;
  const intD.9 _138;
  boolD.2757 _140;
  long unsigned intD.14 _143;
  long unsigned intD.14 _144;
  struct _Rb_tree_nodeD.38976 * _145;
  const struct _Rb_tree_node_baseD.6878 * _147;
  const struct _Rb_tree_node_baseD.6878 * _172;
  boolD.2757 _174;
  struct _Rb_tree_node_baseD.6878 * _185;
  long unsigned intD.14 _187;
  long unsigned intD.14 _196;
  long unsigned intD.14 _232;
  const intD.9 pretmp_240;
  const intD.9 prephitmp_241;
  intD.9 pretmp_242;
  intD.9 prephitmp_243;
  const intD.9 pretmp_244;
  const intD.9 prephitmp_245;
  const intD.9 pretmp_246;

;;   basic block 2, loop depth 0, count 0, freq 22, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#88ptD.0 => &this_5(D)->D.37748.D.37705._in_occD.36081
  # DEBUG thisD.42098 => D#88ptD.0
  # DEBUG D#9ptD.0 => &MEM[(const struct setD.35243 *)D#88ptD.0]._M_tD.35255
  # VUSE <.MEM_6(D)>
  # PT = nonlocal escaped 
  port_iter$_M_node_74 = MEM[(struct _Rb_tree_node_baseD.6878 * *)this_5(D) + 184B];
  # DEBUG D#8ptD.0 => D#9ptD.0
  # DEBUG thisD.41334 => D#8ptD.0
  # DEBUG thisD.41326 => NULL
  # DEBUG __xD.41325 => port_iter$_M_node_74
  # DEBUG port_iter$_M_nodeD.42199 => port_iter$_M_node_74
  # DEBUG port_iter$_M_nodeD.42199 => port_iter$_M_node_74
  # DEBUG D#97ptD.0 => &this_5(D)->D.37748.D.37705._in_occD.36081
  # DEBUG thisD.42104 => D#97ptD.0
  # DEBUG D#10ptD.0 => &MEM[(const struct setD.35243 *)D#97ptD.0]._M_tD.35255
  # DEBUG thisD.42105 => D#10ptD.0
  # PT = nonlocal 
  _172 = &MEM[(const struct _Rb_treeD.35254 *)this_5(D) + 160B]._M_implD.35332._M_headerD.35498;
  # DEBUG thisD.41344 => NULL
  # DEBUG __xD.41343 => _172
  # DEBUG thisD.42101 => &port_iterD.38629
  # DEBUG __xD.42102 => &D.38753
  if (port_iter$_M_node_74 != _172)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [97.8%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [2.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 21, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [2.2%]  (FALSE_VALUE,EXECUTABLE)
;;                28 [2.2%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_239 = PHI <.MEM_6(D)(2), .MEM_43(28)>
  # DEBUG D#98ptD.0 => &this_5(D)->D.37748.D.37705._out_occD.36082
  # DEBUG thisD.42156 => D#98ptD.0
  # DEBUG D#9ptD.0 => &MEM[(const struct setD.35243 *)D#98ptD.0]._M_tD.35255
  # VUSE <.MEM_239>
  # PT = nonlocal escaped 
  port_iter$_M_node_42 = MEM[(struct _Rb_tree_node_baseD.6878 * *)this_5(D) + 232B];
  # DEBUG D#8ptD.0 => D#9ptD.0
  # DEBUG thisD.41334 => D#8ptD.0
  # DEBUG thisD.41326 => NULL
  # DEBUG __xD.41325 => port_iter$_M_node_42
  # DEBUG port_iter$_M_nodeD.42199 => port_iter$_M_node_42
  # DEBUG port_iter$_M_nodeD.42199 => port_iter$_M_node_42
  # DEBUG D#107ptD.0 => &this_5(D)->D.37748.D.37705._out_occD.36082
  # DEBUG thisD.42162 => D#107ptD.0
  # DEBUG D#10ptD.0 => &MEM[(const struct setD.35243 *)D#107ptD.0]._M_tD.35255
  # DEBUG thisD.42163 => D#10ptD.0
  # PT = nonlocal 
  _147 = &MEM[(const struct _Rb_treeD.35254 *)this_5(D) + 208B]._M_implD.35332._M_headerD.35498;
  # DEBUG thisD.41344 => NULL
  # DEBUG __xD.41343 => _147
  # DEBUG thisD.42159 => &port_iterD.38629
  # DEBUG __xD.42160 => &D.39998
  if (port_iter$_M_node_42 != _147)
    goto <bb 31>;
  else
    goto <bb 30>;
;;    succ:       31 [97.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [3.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 22, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [97.8%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                29 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_192 = PHI <.MEM_6(D)(4), .MEM_43(29)>
  # PT = nonlocal escaped 
  # port_iter$_M_node_189 = PHI <port_iter$_M_node_74(4), port_iter$_M_node_100(29)>
  # DEBUG port_iter$_M_nodeD.42199 => port_iter$_M_node_189
  # DEBUG D#97ptD.0 => &this_5(D)->D.37748.D.37705._in_occD.36081
  # DEBUG thisD.42104 => D#97ptD.0
  # DEBUG D#10ptD.0 => &MEM[(const struct setD.35243 *)D#97ptD.0]._M_tD.35255
  # DEBUG thisD.42105 => D#10ptD.0
  # DEBUG thisD.41344 => NULL
  # DEBUG __xD.41343 => _172
  # DEBUG thisD.42101 => &port_iterD.38629
  # DEBUG __xD.42102 => &D.38753
  # DEBUG thisD.42117 => &port_iterD.38629
  # DEBUG thisD.42118 => port_iter$_M_node_189
  # DEBUG D#115ptD.0 => &MEM[(const struct _Rb_tree_nodeD.35258 *)port_iter$_M_node_189]._M_value_fieldD.40110
  # DEBUG __rD.41349 => D#115ptD.0
  # DEBUG inputD.38754 => D#115ptD.0
  # VUSE <.MEM_192>
  _7 = MEM[(const intD.9 &)port_iter$_M_node_189 + 32];
  # RANGE ~[2147483648, 18446744071562067967]
  _8 = (long unsigned intD.14) _7;
  # DEBUG D#89ptD.0 => &this_5(D)->D.37748.D.37705._in_reqD.36832
  # VUSE <.MEM_192>
  # PT = nonlocal escaped 
  _82 = MEM[(struct mapD.36085 * *)this_5(D) + 256B];
  # DEBUG D#2ptD.0 => D#89ptD.0
  # DEBUG __nD.42114 => _8
  # DEBUG thisD.42115 => D#2ptD.0
  # RANGE [0, 18446744073709551568] NONZERO 18446744073709551600
  _61 = _8 * 48;
  # PT = nonlocal escaped 
  _57 = _82 + _61;
  # DEBUG thisD.42110 => NULL
  # VUSE <.MEM_192>
  # PT = nonlocal escaped 
  req_iter$_M_node_10 = MEM[(struct _Rb_tree_node_baseD.6878 * *)_57 + 24B];
  # DEBUG D#11ptD.0 => D#12ptD.0
  # DEBUG thisD.41372 => D#11ptD.0
  # DEBUG thisD.41364 => NULL
  # DEBUG __xD.41363 => req_iter$_M_node_10
  # DEBUG thisD.42108 => &req_iterD.39818
  # DEBUG __itD.42109 => &D.39923
  # DEBUG req_iter$_M_nodeD.42201 => req_iter$_M_node_10
  # DEBUG req_iter$_M_nodeD.42201 => req_iter$_M_node_10
  # DEBUG D#93ptD.0 => &this_5(D)->D.37748.D.37705._in_reqD.36832
  # DEBUG D#2ptD.0 => D#93ptD.0
  # DEBUG __nD.42130 => _8
  # DEBUG thisD.42131 => D#2ptD.0
  # DEBUG thisD.42125 => NULL
  # DEBUG thisD.42126 => D#13ptD.0
  # PT = nonlocal escaped 
  _185 = &MEM[(struct _Rb_treeD.38972 *)_57]._M_implD.39050._M_headerD.39205;
  # DEBUG thisD.41382 => NULL
  # DEBUG __xD.41381 => _185
  # DEBUG thisD.42123 => &D.39988
  # DEBUG __itD.42124 => &D.39934
  # DEBUG thisD.42120 => &req_iterD.39818
  # DEBUG __xD.42121 => &D.39988
  if (req_iter$_M_node_10 != _185)
    goto <bb 6>;
  else
    goto <bb 10>;
;;    succ:       6 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_191 = PHI <.MEM_192(6), .MEM_23(9)>
  # RANGE ~[2147483648, 18446744071562067967]
  # _196 = PHI <_8(6), _12(9)>
  # PT = nonlocal escaped 
  # req_iter$_M_node_186 = PHI <req_iter$_M_node_10(6), req_iter$_M_node_93(9)>
  # DEBUG req_iter$_M_nodeD.42201 => req_iter$_M_node_186
  # DEBUG D#93ptD.0 => &this_5(D)->D.37748.D.37705._in_reqD.36832
  # DEBUG D#2ptD.0 => D#93ptD.0
  # DEBUG __nD.42130 => _196
  # DEBUG thisD.42131 => D#2ptD.0
  # DEBUG thisD.42125 => NULL
  # DEBUG thisD.42126 => D#13ptD.0
  # DEBUG thisD.41382 => NULL
  # DEBUG __xD.41381 => _185
  # DEBUG thisD.42123 => &D.39988
  # DEBUG __itD.42124 => &D.39934
  # DEBUG thisD.42120 => &req_iterD.39818
  # DEBUG __xD.42121 => &D.39988
  # DEBUG thisD.42137 => &req_iterD.39818
  # DEBUG thisD.42138 => req_iter$_M_node_186
  # DEBUG D#90ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)req_iter$_M_node_186]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#90ptD.0
  # DEBUG D#91ptD.0 => &MEM[(const struct pairD.36083 *)req_iter$_M_node_186 + 32B].secondD.39939
  # DEBUG reqD.39989 => D#91ptD.0
  # DEBUG D#92ptD.0 => &this_5(D)->D.37748._input_arbD.37668
  # VUSE <.MEM_191>
  # PT = nonlocal escaped 
  _85 = MEM[(struct ArbiterD.36919 * * *)this_5(D) + 304B];
  # DEBUG D#3ptD.0 => D#92ptD.0
  # DEBUG __nD.42134 => _196
  # DEBUG thisD.42135 => D#3ptD.0
  # RANGE [0, 18446744073709551608] NONZERO 18446744073709551608
  _13 = _196 * 8;
  # PT = nonlocal escaped 
  _9 = _85 + _13;
  # VUSE <.MEM_191>
  # PT = nonlocal escaped 
  _17 = *_9;
  # VUSE <.MEM_191>
  # PT = nonlocal escaped 
  _18 = _17->D.38560._vptr.ModuleD.29483;
  # VUSE <.MEM_191>
  # PT = nonlocal escaped 
  _19 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_18 + 32B];
  # VUSE <.MEM_191>
  _20 = MEM[(const struct sRequestD.34315 &)req_iter$_M_node_186 + 36].in_priD.34319;
  # VUSE <.MEM_191>
  _21 = MEM[(const struct sRequestD.34315 &)req_iter$_M_node_186 + 36].labelD.34318;
  # VUSE <.MEM_191>
  _22 = MEM[(const struct sRequestD.34315 &)req_iter$_M_node_186 + 36].portD.34317;
  # .MEM_23 = VDEF <.MEM_191>
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  OBJ_TYPE_REF(_19;(struct ArbiterD.36919)_17->4) (_17, _22, _21, _20);
  # DEBUG thisD.42140 => &req_iterD.39818
  # VUSE <.MEM_23>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  req_iter$_M_node_93 = _ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_baseD.6925 (req_iter$_M_node_186);
  # DEBUG req_iter$_M_nodeD.42201 => req_iter$_M_node_93
  # DEBUG req_iter$_M_nodeD.42201 => req_iter$_M_node_93
  # VUSE <.MEM_23>
  _11 = MEM[(const intD.9 &)port_iter$_M_node_189 + 32];
  # RANGE ~[2147483648, 18446744071562067967]
  _12 = (long unsigned intD.14) _11;
  # DEBUG D#93ptD.0 => &this_5(D)->D.37748.D.37705._in_reqD.36832
  # VUSE <.MEM_23>
  # PT = nonlocal escaped 
  _83 = MEM[(struct mapD.36085 * *)this_5(D) + 256B];
  # DEBUG D#2ptD.0 => D#93ptD.0
  # DEBUG __nD.42130 => _12
  # DEBUG thisD.42131 => D#2ptD.0
  # RANGE [0, 18446744073709551568] NONZERO 18446744073709551600
  _16 = _12 * 48;
  # PT = nonlocal escaped 
  _15 = _83 + _16;
  # DEBUG thisD.42125 => NULL
  # DEBUG thisD.42126 => D#13ptD.0
  # PT = nonlocal escaped 
  _14 = &MEM[(struct _Rb_treeD.38972 *)_15]._M_implD.39050._M_headerD.39205;
  # DEBUG thisD.41382 => NULL
  # DEBUG __xD.41381 => _14
  # DEBUG thisD.42123 => &D.39988
  # DEBUG __itD.42124 => &D.39934
  # DEBUG thisD.42120 => &req_iterD.39818
  # DEBUG __xD.42121 => &D.39988
  if (_14 != req_iter$_M_node_93)
    goto <bb 9>;
  else
    goto <bb 8>;
;;    succ:       9 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 7, next block 42, flags: (NEW)
;;    pred:       7 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE ~[2147483648, 18446744071562067967]
  # _232 = PHI <_12(7)>
;;    succ:       42 [100.0%]  (FALLTHRU)

;;   basic block 42, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 8, next block 9, flags: (NEW)
;;    pred:       8 [100.0%]  (FALLTHRU)
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 2, count 0, freq 8281, maybe hot
;;    prev block 42, next block 10, flags: (NEW)
;;    pred:       7 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       42 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_179 = PHI <.MEM_23(42), .MEM_192(5)>
  # RANGE ~[2147483648, 18446744071562067967]
  # _187 = PHI <_232(42), _8(5)>
  # .MEM_24 = VDEF <.MEM_179>
  labelD.39990 = -1;
  # DEBUG D#94ptD.0 => &this_5(D)->D.37748._input_arbD.37668
  # VUSE <.MEM_24>
  # PT = nonlocal escaped 
  _86 = MEM[(struct ArbiterD.36919 * * *)this_5(D) + 304B];
  # DEBUG D#3ptD.0 => D#94ptD.0
  # DEBUG __nD.42143 => _187
  # DEBUG thisD.42144 => D#3ptD.0
  # RANGE [0, 18446744073709551608] NONZERO 18446744073709551608
  _94 = _187 * 8;
  # PT = nonlocal escaped 
  _95 = _86 + _94;
  # VUSE <.MEM_24>
  # PT = nonlocal escaped 
  _25 = *_95;
  # VUSE <.MEM_24>
  # PT = nonlocal escaped 
  _26 = _25->D.38560._vptr.ModuleD.29483;
  # VUSE <.MEM_24>
  # PT = nonlocal escaped 
  _27 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_26 + 48B];
  # .MEM_28 = VDEF <.MEM_24>
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  _29 = OBJ_TYPE_REF(_27;(struct ArbiterD.36919)_25->6) (_25, &labelD.39990, 0B);
  # DEBUG outputD.39991 => _29
  if (_29 < 0)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_45 = VDEF <.MEM_28>
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  __assert_failD.19370 ("output > -1", "allocators/separable_input_first.cpp", 73, &_ZZN28SeparableInputFirstAllocator8AllocateEvE19__PRETTY_FUNCTION__D.39992);
;;    succ:      

;;   basic block 12, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  _30 = (long unsigned intD.14) _29;
  # DEBUG D#95ptD.0 => &this_5(D)->D.37748.D.37705._out_reqD.36833
  # VUSE <.MEM_28>
  # PT = nonlocal escaped 
  _84 = MEM[(struct mapD.36085 * *)this_5(D) + 280B];
  # DEBUG D#2ptD.0 => D#95ptD.0
  # DEBUG __nD.42147 => _30
  # DEBUG thisD.42148 => D#2ptD.0
  # RANGE [0, 103079215056] NONZERO 137438953456
  _96 = _30 * 48;
  # PT = nonlocal escaped 
  _97 = _84 + _96;
  # DEBUG thisD.42338 => _97
  # DEBUG __kD.42339 => D#115ptD.0
  # DEBUG thisD.42352 => _97
  # DEBUG __xD.42351 => D#115ptD.0
  # DEBUG D#27ptD.0 => &_97->_M_tD.38973
  # DEBUG thisD.42354 => D#27ptD.0
  # DEBUG __kD.42353 => D#115ptD.0
  # DEBUG thisD.42355 => D#27ptD.0
  # PT = nonlocal escaped 
  __pos_116 = &MEM[(struct _Rb_treeD.38972 *)_97]._M_implD.39050._M_headerD.39205;
  # VUSE <.MEM_28>
  # PT = nonlocal escaped 
  __pos_117 = MEM[(struct _Rb_tree_node_baseD.6878 * *)_97 + 16B];
  # DEBUG D#18ptD.0 => D#27ptD.0
  # DEBUG thisD.41510 => D#18ptD.0
  # DEBUG D#26ptD.0 => D#27ptD.0
  # DEBUG __xD.42359 => NULL
  # DEBUG __yD.42358 => NULL
  # DEBUG __kD.42357 => D#115ptD.0
  # DEBUG __yD.42358 => __pos_116
  # DEBUG __xD.42359 => __pos_117
  if (__pos_117 == 0B)
    goto <bb 39>;
  else
    goto <bb 13>;
;;    succ:       39 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_28>
  pretmp_246 = MEM[(const intD.9 &)port_iter$_M_node_189 + 32];
  goto <bb 16>;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 2, count 0, freq 9096, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       17 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                18 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __pos_133 = PHI <__pos_121(17), __pos_122(18)>
  # PT = nonlocal escaped 
  # __pos_132 = PHI <__pos_188(17), __pos_182(18)>
  # DEBUG __yD.42358 => __pos_132
  # DEBUG __xD.42359 => __pos_133
  if (__pos_133 == 0B)
    goto <bb 19>;
  else
    goto <bb 15>;
;;    succ:       19 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 2, count 0, freq 8277, maybe hot
;;    prev block 14, next block 16, flags: (NEW)
;;    pred:       14 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 2, count 0, freq 9096, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __pos_188 = PHI <__pos_117(13), __pos_133(15)>
  # PT = nonlocal escaped 
  # __pos_182 = PHI <__pos_116(13), __pos_132(15)>
  # DEBUG __yD.42358 => __pos_182
  # DEBUG __xD.42359 => __pos_188
  # DEBUG __xD.41489 => __pos_188
  # DEBUG __xD.41455 => __pos_188
  # DEBUG thisD.41456 => __pos_188
  # DEBUG D#22ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)__pos_188]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#22ptD.0
  # DEBUG __xD.41491 => D#22ptD.0
  # DEBUG thisD.41490 => D#21ptD.0
  # DEBUG D#23ptD.0 => &MEM[(const struct pairD.36083 &)__pos_188 + 32].firstD.39938
  # DEBUG D#24ptD.0 => &D#25ptD.0->_M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#24ptD.0
  # VUSE <.MEM_28>
  _119 = MEM[(const intD.9 &)__pos_188 + 32];
  # DEBUG D#6ptD.0 => D#23ptD.0
  # DEBUG D#7ptD.0 => D#115ptD.0
  # DEBUG thisD.41492 => D#5ptD.0
  # DEBUG __xD.41493 => D#6ptD.0
  # DEBUG __yD.41494 => D#7ptD.0
  if (_119 >= pretmp_246)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 2, count 0, freq 4548, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.42358 => __pos_188
  # VUSE <.MEM_28>
  # PT = nonlocal escaped 
  __pos_121 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__pos_188 + 16B];
  # DEBUG D#19ptD.0 => __pos_188
  # DEBUG __xD.41488 => D#19ptD.0
  # DEBUG __xD.42359 => NULL
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 2, count 0, freq 4548, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       16 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_28>
  # PT = nonlocal escaped 
  __pos_122 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__pos_188 + 24B];
  # DEBUG D#20ptD.0 => __pos_188
  # DEBUG __xD.41487 => D#20ptD.0
  # DEBUG __xD.42359 => NULL
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 18, next block 41, flags: (NEW, REACHABLE)
;;    pred:       14 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __pos_231 = PHI <__pos_132(14)>
;;    succ:       41 [100.0%]  (FALLTHRU)

;;   basic block 41, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 19, next block 20, flags: (NEW)
;;    pred:       19 [100.0%]  (FALLTHRU)
  # DEBUG thisD.41486 => NULL
  # DEBUG __xD.41485 => __pos_231
  # DEBUG __i$_M_nodeD.42362 => __pos_231
  # DEBUG thisD.42039 => _97
  # DEBUG D#13ptD.0 => &_97->_M_tD.38973
  # DEBUG thisD.42040 => D#13ptD.0
  # DEBUG thisD.41382 => NULL
  # DEBUG __xD.41381 => __pos_116
  # DEBUG thisD.42036 => &__iD.42340
  # DEBUG __xD.42037 => NULL
  if (__pos_116 == __pos_231)
    goto <bb 40>;
  else
    goto <bb 20>;
;;    succ:       40 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 1, count 0, freq 765, maybe hot
;;    prev block 41, next block 21, flags: (NEW, REACHABLE)
;;    pred:       41 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.42063 => &__iD.42340
  # DEBUG thisD.42064 => __pos_231
  # DEBUG D#83ptD.0 => &MEM[(struct _Rb_tree_nodeD.38976 *)__pos_231]._M_value_fieldD.40139
  # DEBUG __rD.41421 => D#83ptD.0
  # DEBUG D#84ptD.0 => &MEM[(struct pairD.36083 &)__pos_231 + 32].firstD.39938
  # DEBUG D#17ptD.0 => _97
  # DEBUG thisD.42060 => D#17ptD.0
  # DEBUG D#16ptD.0 => D#17ptD.0
  # DEBUG D#15ptD.0 => &D#16ptD.0->_M_tD.38973
  # DEBUG D#14ptD.0 => D#15ptD.0
  # DEBUG thisD.41400 => D#14ptD.0
  # DEBUG D#6ptD.0 => D#115ptD.0
  # VUSE <.MEM_28>
  _125 = MEM[(const intD.9 &)__pos_231 + 32];
  # DEBUG D#7ptD.0 => D#84ptD.0
  # DEBUG thisD.42058 => D#5ptD.0
  # DEBUG __xD.42057 => D#6ptD.0
  # DEBUG __yD.42056 => D#7ptD.0
  if (_125 > pretmp_246)
    goto <bb 40>;
  else
    goto <bb 25>;
;;    succ:       40 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 1, count 0, freq 45, maybe hot
;;   Invalid sum of incoming frequencies 309, should be 45
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       40 [59.7%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#76ptD.0 => D#81ptD.0
  # DEBUG thisD.42375 => _128
  # DEBUG __xD.42376 => __res$first_134
  # DEBUG __pD.42377 => __res$second_135
  # DEBUG __vD.42378 => &D.42364
  # DEBUG __node_genD.42379 => D#76ptD.0
  # DEBUG D#75ptD.0 => D#76ptD.0
  # DEBUG thisD.42384 => _128
  # RANGE [0, 1]
  _136 = __pos_116 == __res$second_135;
  # RANGE [0, 1]
  _140 = __res$first_134 != 0B;
  # RANGE [0, 1]
  _174 = _136 | _140;
  if (_174 != 0)
    goto <bb 23>;
  else
    goto <bb 22>;
;;    succ:       23 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 41, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       21 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.41971 => __res$second_135
  # DEBUG __xD.41548 => __res$second_135
  # DEBUG thisD.41549 => __res$second_135
  # DEBUG D#29ptD.0 => &MEM[(const struct _Rb_tree_nodeD.38976 *)__res$second_135]._M_value_fieldD.40139
  # DEBUG __rD.41387 => D#29ptD.0
  # DEBUG __xD.41973 => D#29ptD.0
  # DEBUG thisD.41972 => D#21ptD.0
  # DEBUG D#73ptD.0 => &MEM[(const struct pairD.36083 &)__res$second_135 + 32].firstD.39938
  # DEBUG __xD.41975 => &D.42364
  # DEBUG thisD.41974 => D#21ptD.0
  # DEBUG D#74ptD.0 => &MEM[(struct _Rb_treeD.38972 *)_128]._M_implD.39050._M_key_compareD.39204
  # DEBUG D#5ptD.0 => D#74ptD.0
  # VUSE <.MEM_157>
  _137 = MEM[(const intD.9 &)&D.42364];
  # VUSE <.MEM_157>
  _138 = MEM[(const intD.9 &)__res$second_135 + 32];
  # DEBUG D#7ptD.0 => D#73ptD.0
  # DEBUG thisD.41976 => D#5ptD.0
  # DEBUG __xD.41977 => D#6ptD.0
  # DEBUG __yD.41978 => D#7ptD.0
  __insert_left_175 = _137 < _138;
  pretmp_242 = (intD.9) __insert_left_175;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 209, maybe hot
;;   Invalid sum of incoming frequencies 46, should be 209
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                21 [10.1%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1] NONZERO 1
  # prephitmp_243 = PHI <pretmp_242(22), 1(21)>
  # DEBUG __insert_leftD.42380 => NULL
  # DEBUG D#72ptD.0 => D#75ptD.0
  # DEBUG __argD.42383 => &D.42364
  # DEBUG thisD.42382 => D#72ptD.0
  # DEBUG D#71ptD.0 => D#72ptD.0
  # DEBUG D#70ptD.0 => D#71ptD.0->_M_tD.40332
  # DEBUG D#69ptD.0 => D#70ptD.0
  # DEBUG __xD.42386 => &D.42364
  # DEBUG thisD.42387 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG D#67ptD.0 => D#69ptD.0
  # DEBUG D#56ptD.0 => D#67ptD.0
  # DEBUG thisD.42389 => D#56ptD.0
  # DEBUG D#55ptD.0 => D#56ptD.0
  # DEBUG thisD.41809 => D#55ptD.0
  # DEBUG __nD.42391 => 1
  # DEBUG __aD.42390 => D#54ptD.0
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG D#51ptD.0 => D#53ptD.0
  # DEBUG D#52ptD.0 => 0B
  # DEBUG __nD.42394 => 1
  # DEBUG thisD.42392 => D#51ptD.0
  # DEBUG D.42393 => D#52ptD.0
  # DEBUG D#50ptD.0 => D#51ptD.0
  # DEBUG D#49ptD.0 => D#50ptD.0
  # DEBUG thisD.41767 => D#49ptD.0
  # .MEM_158 = VDEF <.MEM_157>
  # PT = { D.42409 } (escaped heap)
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  _145 = _ZnwmD.2764 (56);
  # DEBUG __tmpD.42388 => _145
  # DEBUG D#66ptD.0 => D#68ptD.0
  # DEBUG __nodeD.42397 => _145
  # DEBUG __xD.42396 => &D.42364
  # DEBUG thisD.42395 => D#66ptD.0
  # DEBUG D#65ptD.0 => D#66ptD.0
  # DEBUG thisD.42398 => _145
  # DEBUG D#116ptD.0 => &_145->_M_value_fieldD.40139
  # DEBUG __rD.41421 => D#116ptD.0
  # DEBUG D#58ptD.0 => D#65ptD.0
  # DEBUG thisD.41872 => D#58ptD.0
  # DEBUG D#57ptD.0 => D#58ptD.0
  # DEBUG thisD.41830 => D#57ptD.0
  # DEBUG thisD.41822 => NULL
  # DEBUG D.41823 => NULL
  # DEBUG thisD.41820 => NULL
  # DEBUG __pD.42401 => D#116ptD.0
  # DEBUG __valD.42400 => &D.42364
  # DEBUG thisD.42399 => D#48ptD.0
  # DEBUG D#1ptD.0 => 20
  # DEBUG __pD.41745 => D#116ptD.0
  # DEBUG D.41746 => D#1ptD.0
  # .MEM_159 = VDEF <.MEM_158>
  MEM[(struct pairD.36083 *)_145 + 32B] = D.42364;
  # DEBUG thisD.41885 => NULL
  # DEBUG thisD.41868 => NULL
  # DEBUG __zD.42381 => NULL
  # .MEM_161 = VDEF <.MEM_159>
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  _ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_D.7104 (prephitmp_243, _145, __res$second_135, __pos_116);
  # VUSE <.MEM_161>
  _143 = MEM[(struct _Rb_treeD.38972 *)_97]._M_implD.39050._M_node_countD.39206;
  # RANGE [0, 18446744073709551615]
  _144 = _143 + 1;
  # .MEM_162 = VDEF <.MEM_161>
  MEM[(struct _Rb_treeD.38972 *)_97]._M_implD.39050._M_node_countD.39206 = _144;
  # DEBUG thisD.41970 => NULL
  # DEBUG __xD.41969 => NULL
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 1, count 0, freq 351, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                40 [40.3%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_148 = PHI <.MEM_162(23), .MEM_157(40)>
  # PT = nonlocal escaped { D.42409 } (escaped heap)
  # SR.219_155 = PHI <_145(23), __res$first_134(40)>
  # DEBUG D#79ptD.0 => {CLOBBER}
  # DEBUG __res$firstD.42373 => D#79ptD.0
  # DEBUG D#80ptD.0 => {CLOBBER}
  # DEBUG __res$secondD.42372 => D#80ptD.0
  # DEBUG __i$_M_nodeD.42362 => SR.219_155
  # .MEM_167 = VDEF <.MEM_148>
  D.42364 ={v} {CLOBBER};
  # VUSE <.MEM_167>
  pretmp_244 = MEM[(const intD.9 &)port_iter$_M_node_189 + 32];
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 900, maybe hot
;;   Invalid sum of incoming frequencies 734, should be 900
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       20 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                24 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped { D.42409 } (escaped heap)
  # __pos_130 = PHI <__pos_231(20), SR.219_155(24)>
  # .MEM_149 = PHI <.MEM_28(20), .MEM_167(24)>
  # prephitmp_245 = PHI <pretmp_246(20), pretmp_244(24)>
  # DEBUG __i$_M_nodeD.42362 => __pos_130
  # DEBUG thisD.42081 => &__iD.42340
  # DEBUG thisD.42082 => __pos_130
  # DEBUG D#85ptD.0 => &MEM[(struct _Rb_tree_nodeD.38976 *)__pos_130]._M_value_fieldD.40139
  # DEBUG __rD.41421 => D#85ptD.0
  # DEBUG D#87ptD.0 => {CLOBBER}
  # DEBUG __i$_M_nodeD.42362 => D#87ptD.0
  # DEBUG reqD.39993 => NULL
  # VUSE <.MEM_149>
  _33 = MEM[(const struct sRequestD.34315 &)__pos_130 + 36].portD.34317;
  if (_33 != prephitmp_245)
    goto <bb 27>;
  else
    goto <bb 26>;
;;    succ:       27 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 1, count 0, freq 899, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       25 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_149>
  _35 = MEM[(const struct sRequestD.34315 &)__pos_130 + 36].labelD.34318;
  # VUSE <.MEM_149>
  label.2_36 = labelD.39990;
  if (_35 != label.2_36)
    goto <bb 27>;
  else
    goto <bb 28>;
;;    succ:       27 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       26 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_44 = VDEF <.MEM_149>
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  __assert_failD.19370 ("(req.port == input) && (req.label == label)", "allocators/separable_input_first.cpp", 76, &_ZZN28SeparableInputFirstAllocator8AllocateEvE19__PRETTY_FUNCTION__D.39992);
;;    succ:      

;;   basic block 28, loop depth 1, count 0, freq 899, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       26 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#96ptD.0 => &this_5(D)->D.37748._output_arbD.37669
  # VUSE <.MEM_149>
  # PT = nonlocal escaped 
  _87 = MEM[(struct ArbiterD.36919 * * *)this_5(D) + 328B];
  # DEBUG D#3ptD.0 => D#96ptD.0
  # DEBUG __nD.42151 => _30
  # DEBUG thisD.42152 => D#3ptD.0
  # RANGE [0, 17179869176] NONZERO 17179869176
  _98 = _30 * 8;
  # PT = nonlocal escaped 
  _99 = _87 + _98;
  # VUSE <.MEM_149>
  # PT = nonlocal escaped 
  _37 = *_99;
  # VUSE <.MEM_149>
  # PT = nonlocal escaped 
  _38 = _37->D.38560._vptr.ModuleD.29483;
  # VUSE <.MEM_149>
  # PT = nonlocal escaped 
  _39 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_38 + 32B];
  # VUSE <.MEM_149>
  _40 = MEM[(const struct sRequestD.34315 &)__pos_130 + 36].out_priD.34320;
  # .MEM_41 = VDEF <.MEM_149>
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  OBJ_TYPE_REF(_39;(struct ArbiterD.36919)_37->4) (_37, _33, _35, _40);
  # DEBUG thisD.42154 => &port_iterD.38629
  # VUSE <.MEM_41>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  port_iter$_M_node_100 = _ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_baseD.6925 (port_iter$_M_node_189);
  # DEBUG port_iter$_M_nodeD.42199 => port_iter$_M_node_100
  # DEBUG D#108ptD.0 => {CLOBBER}
  # DEBUG req_iter$_M_nodeD.42201 => D#108ptD.0
  # .MEM_43 = VDEF <.MEM_41>
  labelD.39990 ={v} {CLOBBER};
  # DEBUG port_iter$_M_nodeD.42199 => port_iter$_M_node_100
  # DEBUG D#97ptD.0 => &this_5(D)->D.37748.D.37705._in_occD.36081
  # DEBUG thisD.42104 => D#97ptD.0
  # DEBUG D#10ptD.0 => &MEM[(const struct setD.35243 *)D#97ptD.0]._M_tD.35255
  # DEBUG thisD.42105 => D#10ptD.0
  # DEBUG thisD.41344 => NULL
  # DEBUG __xD.41343 => _172
  # DEBUG thisD.42101 => &port_iterD.38629
  # DEBUG __xD.42102 => &D.38753
  if (port_iter$_M_node_100 != _172)
    goto <bb 29>;
  else
    goto <bb 3>;
;;    succ:       29 [97.8%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [2.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 1, count 0, freq 879, maybe hot
;;    prev block 28, next block 30, flags: (NEW)
;;    pred:       28 [97.8%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 21, maybe hot
;;    prev block 29, next block 43, flags: (NEW, REACHABLE)
;;    pred:       3 [3.0%]  (FALSE_VALUE,EXECUTABLE)
;;                37 [3.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_238 = PHI <.MEM_239(3), .MEM_4(37)>
;;    succ:       43 [100.0%]  (FALLTHRU)

;;   basic block 43, loop depth 0, count 0, freq 21, maybe hot
;;    prev block 30, next block 31, flags: (NEW)
;;    pred:       30 [100.0%]  (FALLTHRU)
  # DEBUG D#110ptD.0 => {CLOBBER}
  # DEBUG port_iter$_M_nodeD.42199 => D#110ptD.0
  # VUSE <.MEM_238>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 31, loop depth 0, count 0, freq 20, maybe hot
;;    prev block 43, next block 32, flags: (NEW, REACHABLE)
;;    pred:       3 [97.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 1, count 0, freq 657, maybe hot
;;    prev block 31, next block 33, flags: (NEW)
;;    pred:       31 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_194 = PHI <.MEM_239(31), .MEM_4(38)>
  # PT = nonlocal escaped 
  # port_iter$_M_node_195 = PHI <port_iter$_M_node_42(31), port_iter$_M_node_114(38)>
  # DEBUG port_iter$_M_nodeD.42199 => port_iter$_M_node_195
  # DEBUG D#107ptD.0 => &this_5(D)->D.37748.D.37705._out_occD.36082
  # DEBUG thisD.42162 => D#107ptD.0
  # DEBUG D#10ptD.0 => &MEM[(const struct setD.35243 *)D#107ptD.0]._M_tD.35255
  # DEBUG thisD.42163 => D#10ptD.0
  # DEBUG thisD.41344 => NULL
  # DEBUG __xD.41343 => _147
  # DEBUG thisD.42159 => &port_iterD.38629
  # DEBUG __xD.42160 => &D.39998
  # DEBUG thisD.42170 => &port_iterD.38629
  # DEBUG thisD.42171 => port_iter$_M_node_195
  # DEBUG D#99ptD.0 => &MEM[(const struct _Rb_tree_nodeD.35258 *)port_iter$_M_node_195]._M_value_fieldD.40110
  # DEBUG __rD.41349 => D#99ptD.0
  # DEBUG outputD.39999 => D#99ptD.0
  # VUSE <.MEM_194>
  _49 = MEM[(const intD.9 &)port_iter$_M_node_195 + 32];
  # RANGE ~[2147483648, 18446744071562067967]
  _50 = (long unsigned intD.14) _49;
  # DEBUG D#100ptD.0 => &this_5(D)->D.37748._output_arbD.37669
  # VUSE <.MEM_194>
  # PT = nonlocal escaped 
  _88 = MEM[(struct ArbiterD.36919 * * *)this_5(D) + 328B];
  # DEBUG D#3ptD.0 => D#100ptD.0
  # DEBUG __nD.42167 => _50
  # DEBUG thisD.42168 => D#3ptD.0
  # RANGE [0, 18446744073709551608] NONZERO 18446744073709551608
  _102 = _50 * 8;
  # PT = nonlocal escaped 
  _103 = _88 + _102;
  # VUSE <.MEM_194>
  # PT = nonlocal escaped 
  _51 = *_103;
  # VUSE <.MEM_194>
  # PT = nonlocal escaped 
  _52 = _51->D.38560._vptr.ModuleD.29483;
  # VUSE <.MEM_194>
  # PT = nonlocal escaped 
  _53 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_52 + 48B];
  # .MEM_54 = VDEF <.MEM_194>
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  _55 = OBJ_TYPE_REF(_53;(struct ArbiterD.36919)_51->6) (_51, 0B, 0B);
  # DEBUG inputD.40000 => _55
  if (_55 >= 0)
    goto <bb 33>;
  else
    goto <bb 37>;
;;    succ:       33 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [27.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 33, loop depth 1, count 0, freq 480, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       32 [73.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  _56 = (long unsigned intD.14) _55;
  # DEBUG D#101ptD.0 => &this_5(D)->D.37748.D.37705.D.36911._inmatchD.34313
  # VUSE <.MEM_54>
  # PT = nonlocal escaped 
  _91 = MEM[(intD.9 * *)this_5(D) + 112B];
  # DEBUG D#4ptD.0 => D#101ptD.0
  # DEBUG __nD.42174 => _56
  # DEBUG thisD.42175 => D#4ptD.0
  # RANGE [0, 8589934588] NONZERO 8589934588
  _104 = _56 * 4;
  # PT = nonlocal escaped 
  _105 = _91 + _104;
  # VUSE <.MEM_54>
  _58 = *_105;
  if (_58 != -1)
    goto <bb 35>;
  else
    goto <bb 34>;
;;    succ:       35 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 1, count 0, freq 480, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       33 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_54>
  _59 = MEM[(const intD.9 &)port_iter$_M_node_195 + 32];
  # RANGE ~[2147483648, 18446744071562067967]
  _60 = (long unsigned intD.14) _59;
  # DEBUG D#102ptD.0 => &this_5(D)->D.37748.D.37705.D.36911._outmatchD.34314
  # VUSE <.MEM_54>
  # PT = nonlocal escaped 
  _92 = MEM[(intD.9 * *)this_5(D) + 136B];
  # DEBUG D#4ptD.0 => D#102ptD.0
  # DEBUG __nD.42178 => _60
  # DEBUG thisD.42179 => D#4ptD.0
  # RANGE [0, 18446744073709551612] NONZERO 18446744073709551612
  _106 = _60 * 4;
  # PT = nonlocal escaped 
  _107 = _92 + _106;
  # VUSE <.MEM_54>
  _62 = *_107;
  if (_62 != -1)
    goto <bb 35>;
  else
    goto <bb 36>;
;;    succ:       35 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       34 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_79 = VDEF <.MEM_54>
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  __assert_failD.19370 ("(_inmatch[input] == -1) && (_outmatch[output] == -1)", "allocators/separable_input_first.cpp", 93, &_ZZN28SeparableInputFirstAllocator8AllocateEvE19__PRETTY_FUNCTION__D.39992);
;;    succ:      

;;   basic block 36, loop depth 1, count 0, freq 480, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       34 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#103ptD.0 => &this_5(D)->D.37748.D.37705.D.36911._inmatchD.34313
  # DEBUG D#4ptD.0 => D#103ptD.0
  # DEBUG __nD.42190 => _56
  # DEBUG thisD.42191 => D#4ptD.0
  # .MEM_64 = VDEF <.MEM_54>
  *_105 = _59;
  # VUSE <.MEM_64>
  _65 = MEM[(const intD.9 &)port_iter$_M_node_195 + 32];
  # RANGE ~[2147483648, 18446744071562067967]
  _66 = (long unsigned intD.14) _65;
  # DEBUG D#104ptD.0 => &this_5(D)->D.37748.D.37705.D.36911._outmatchD.34314
  # DEBUG D#4ptD.0 => D#104ptD.0
  # DEBUG __nD.42186 => _66
  # DEBUG thisD.42187 => D#4ptD.0
  # RANGE [0, 18446744073709551612] NONZERO 18446744073709551612
  _110 = _66 * 4;
  # PT = nonlocal escaped 
  _111 = _92 + _110;
  # .MEM_67 = VDEF <.MEM_64>
  *_111 = _55;
  # DEBUG D#105ptD.0 => &this_5(D)->D.37748._input_arbD.37668
  # VUSE <.MEM_67>
  # PT = nonlocal escaped 
  _89 = MEM[(struct ArbiterD.36919 * * *)this_5(D) + 304B];
  # DEBUG D#3ptD.0 => D#105ptD.0
  # DEBUG __nD.42182 => _56
  # DEBUG thisD.42183 => D#3ptD.0
  # RANGE [0, 17179869176] NONZERO 17179869176
  _108 = _56 * 8;
  # PT = nonlocal escaped 
  _109 = _89 + _108;
  # VUSE <.MEM_67>
  # PT = nonlocal escaped 
  _68 = *_109;
  # VUSE <.MEM_67>
  # PT = nonlocal escaped 
  _69 = _68->D.38560._vptr.ModuleD.29483;
  # VUSE <.MEM_67>
  # PT = nonlocal escaped 
  _70 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_69 + 40B];
  # .MEM_71 = VDEF <.MEM_67>
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  OBJ_TYPE_REF(_70;(struct ArbiterD.36919)_68->5) (_68);
  # VUSE <.MEM_71>
  _72 = MEM[(const intD.9 &)port_iter$_M_node_195 + 32];
  # RANGE ~[2147483648, 18446744071562067967]
  _73 = (long unsigned intD.14) _72;
  # DEBUG D#106ptD.0 => &this_5(D)->D.37748._output_arbD.37669
  # VUSE <.MEM_71>
  # PT = nonlocal escaped 
  _90 = MEM[(struct ArbiterD.36919 * * *)this_5(D) + 328B];
  # DEBUG D#3ptD.0 => D#106ptD.0
  # DEBUG __nD.42194 => _73
  # DEBUG thisD.42195 => D#3ptD.0
  # RANGE [0, 18446744073709551608] NONZERO 18446744073709551608
  _112 = _73 * 8;
  # PT = nonlocal escaped 
  _113 = _90 + _112;
  # VUSE <.MEM_71>
  # PT = nonlocal escaped 
  _75 = *_113;
  # VUSE <.MEM_71>
  # PT = nonlocal escaped 
  _76 = _75->D.38560._vptr.ModuleD.29483;
  # VUSE <.MEM_71>
  # PT = nonlocal escaped 
  _77 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_76 + 40B];
  # .MEM_78 = VDEF <.MEM_71>
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  OBJ_TYPE_REF(_77;(struct ArbiterD.36919)_75->5) (_75);
;;    succ:       37 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 37, loop depth 1, count 0, freq 657, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       32 [27.0%]  (FALSE_VALUE,EXECUTABLE)
;;                36 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_4 = PHI <.MEM_54(32), .MEM_78(36)>
  # DEBUG thisD.42197 => &port_iterD.38629
  # VUSE <.MEM_4>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  port_iter$_M_node_114 = _ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_baseD.6925 (port_iter$_M_node_195);
  # DEBUG port_iter$_M_nodeD.42199 => port_iter$_M_node_114
  # DEBUG port_iter$_M_nodeD.42199 => port_iter$_M_node_114
  # DEBUG D#107ptD.0 => &this_5(D)->D.37748.D.37705._out_occD.36082
  # DEBUG thisD.42162 => D#107ptD.0
  # DEBUG D#10ptD.0 => &MEM[(const struct setD.35243 *)D#107ptD.0]._M_tD.35255
  # DEBUG thisD.42163 => D#10ptD.0
  # DEBUG thisD.41344 => NULL
  # DEBUG __xD.41343 => _147
  # DEBUG thisD.42159 => &port_iterD.38629
  # DEBUG __xD.42160 => &D.39998
  if (port_iter$_M_node_114 != _147)
    goto <bb 38>;
  else
    goto <bb 30>;
;;    succ:       38 [97.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [3.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 38, loop depth 1, count 0, freq 637, maybe hot
;;    prev block 37, next block 39, flags: (NEW)
;;    pred:       37 [97.0%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 32>;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 1, count 0, freq 81, maybe hot
;;    prev block 38, next block 40, flags: (NEW)
;;    pred:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_28>
  pretmp_240 = MEM[(const intD.9 &)port_iter$_M_node_189 + 32];
;;    succ:       40 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 40, loop depth 1, count 0, freq 517, maybe hot
;;    prev block 39, next block 1, flags: (NEW, REACHABLE)
;;    pred:       20 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                41 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __pos_2 = PHI <__pos_231(20), __pos_231(41), __pos_116(39)>
  # prephitmp_241 = PHI <pretmp_246(20), pretmp_246(41), pretmp_240(39)>
  # DEBUG thisD.42343 => &D.42364
  # DEBUG __aD.42342 => D#115ptD.0
  # DEBUG __bD.42341 => NULL
  # .MEM_150 = VDEF <.MEM_28>
  D.42364.firstD.39938 = prephitmp_241;
  # .MEM_151 = VDEF <.MEM_150>
  MEM[(struct pairD.36083 *)&D.42364 + 4B] = 0;
  # .MEM_152 = VDEF <.MEM_151>
  MEM[(struct pairD.36083 *)&D.42364 + 8B] = 0;
  # .MEM_153 = VDEF <.MEM_152>
  MEM[(struct pairD.36083 *)&D.42364 + 12B] = 0;
  # .MEM_154 = VDEF <.MEM_153>
  MEM[(struct pairD.36083 *)&D.42364 + 16B] = 0;
  # DEBUG thisD.42346 => _97
  # DEBUG __position$_M_nodeD.42094 => __pos_2
  # DEBUG __xD.42344 => &D.42364
  # DEBUG thisD.42070 => NULL
  # DEBUG __itD.42069 => &__positionD.42345
  # PT = nonlocal escaped 
  _128 = &_97->_M_tD.38973;
  # DEBUG thisD.42349 => _128
  # DEBUG __posD.42405 => __pos_2
  # DEBUG __xD.42347 => &D.42364
  # DEBUG thisD.42030 => &__anD.42350
  # DEBUG __tD.42029 => _128
  # DEBUG __an$_M_tD.42023 => _128
  # DEBUG D#82ptD.0 => &__anD.42350
  # DEBUG thisD.42365 => _128
  # .MEM_156 = VDEF <.MEM_154>
  MEM[(struct _Rb_tree_const_iteratorD.39279 *)&__positionD.42366] = __pos_2;
  # DEBUG __vD.42367 => &D.42364
  # DEBUG __node_genD.42368 => D#82ptD.0
  # DEBUG D#81ptD.0 => D#82ptD.0
  # DEBUG __xD.42371 => &D.42364
  # DEBUG thisD.42370 => D#21ptD.0
  # .MEM_157 = VDEF <.MEM_156>
  # USE = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  # CLB = nonlocal null { D.39990 D.39992 D.42364 D.42409 } (nonlocal, escaped heap)
  __resD.42369 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_D.39290 (_128, __positionD.42366, &D.42364.firstD.39938);
  # VUSE <.MEM_157>
  # PT = nonlocal escaped 
  __res$first_134 = MEM[(struct pairD.7331 *)&__resD.42369];
  # DEBUG __res$firstD.42373 => __res$first_134
  # VUSE <.MEM_157>
  # PT = nonlocal escaped 
  __res$second_135 = MEM[(struct pairD.7331 *)&__resD.42369 + 8B];
  # DEBUG __res$secondD.42372 => __res$second_135
  if (__res$second_135 != 0B)
    goto <bb 21>;
  else
    goto <bb 24>;
;;    succ:       21 [59.7%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [40.3%]  (FALSE_VALUE,EXECUTABLE)

}


