
;; Function virtual bool DenseAllocator::InputHasRequests(int) const (_ZNK14DenseAllocator16InputHasRequestsEi, funcdef_no=1759, decl_uid=36263, cgraph_uid=429, symbol_order=430)


Pass statistics:
----------------

virtual bool DenseAllocator::InputHasRequests(int) const (const struct DenseAllocatorD.35479 * const thisD.41122, intD.9 inD.41120)
{
  intD.9 outD.41124;
  boolD.2757 _2;
  long unsigned intD.14 _7;
  long unsigned intD.14 _10;
  intD.9 _11;
  const struct sRequestD.35378 & _15;
  intD.9 _20;
  long unsigned intD.14 _22;
  struct vectorD.35482 * const _23;
  long unsigned intD.14 _24;
  const struct vectorD.35482 & _25;
  struct sRequestD.35378 * const _26;
  intD.9 _29;

;;   basic block 2, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG outD.41124 => 0
  # DEBUG outD.41124 => 0
  # VUSE <.MEM_4(D)>
  _20 = this_5(D)->D.36298._outputsD.34630;
  if (_20 <= 0)
    goto <bb 8>;
  else
    goto <bb 3>;
;;    succ:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 840, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE ~[2147483648, 18446744071562067967]
  _22 = (long unsigned intD.14) in_8(D);
  # DEBUG D#81ptD.0 => &this_5(D)->_requestD.36229
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  _23 = MEM[(struct vectorD.35482 * *)this_5(D) + 160B];
  # DEBUG D#63ptD.0 => D#81ptD.0
  # DEBUG __nD.52525 => _22
  # DEBUG thisD.52526 => D#63ptD.0
  # RANGE [0, 18446744073709551592] NONZERO 18446744073709551608
  _24 = _22 * 24;
  # PT = nonlocal escaped 
  _25 = _23 + _24;
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  _26 = MEM[(struct sRequestD.35378 * *)_25];
  # DEBUG __nD.52521 => 0
  # DEBUG thisD.52522 => D#64ptD.0
  # VUSE <.MEM_4(D)>
  _29 = MEM[(const struct sRequestD.35378 &)_26].labelD.35381;
  if (_29 >= 0)
    goto <bb 8>;
  else
    goto <bb 4>;
;;    succ:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 802, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 8710, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       7 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _7 = (long unsigned intD.14) out_12;
  # DEBUG D#81ptD.0 => &this_5(D)->_requestD.36229
  # DEBUG D#63ptD.0 => D#81ptD.0
  # DEBUG __nD.52525 => _22
  # DEBUG thisD.52526 => D#63ptD.0
  # DEBUG __nD.52521 => _7
  # DEBUG thisD.52522 => D#64ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _10 = _7 * 16;
  # PT = nonlocal escaped 
  _15 = _26 + _10;
  # VUSE <.MEM_4(D)>
  _11 = _15->labelD.35381;
  if (_11 >= 0)
    goto <bb 8>;
  else
    goto <bb 6>;
;;    succ:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8318, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       7 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9120, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # out_30 = PHI <0(4), out_12(6)>
  # DEBUG outD.41124 => out_30
  # DEBUG D#81ptD.0 => &this_5(D)->_requestD.36229
  # DEBUG D#63ptD.0 => D#81ptD.0
  # DEBUG __nD.52525 => _22
  # DEBUG thisD.52526 => D#63ptD.0
  # DEBUG __nD.52521 => 0
  # DEBUG thisD.52522 => D#64ptD.0
  out_12 = out_30 + 1;
  # DEBUG outD.41124 => out_12
  # DEBUG outD.41124 => out_12
  if (out_12 >= _20)
    goto <bb 8>;
  else
    goto <bb 5>;
;;    succ:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 7, next block 1, flags: (NEW, REACHABLE)
;;    pred:       7 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                2 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1]
  # _2 = PHI <0(7), 1(5), 0(2), 1(3)>
  # VUSE <.MEM_4(D)>
  return _2;
;;    succ:       EXIT [100.0%] 

}


Creating dr for this_5(D)->D.36298._outputs
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 100
	step: 0
	aligned to: 256
	base_object: *this_5(D)
	Access function 0: 800
	Access function 1: 0
Creating dr for MEM[(struct vector * *)this_5(D) + 160B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 160
	step: 0
	aligned to: 256
	base_object: MEM[(struct vector * *)this_5(D) + 160B]
Creating dr for MEM[(struct sRequest * *)_25]
analyze_innermost: success.
	base_address: _23 + (long unsigned int) in_8(D) * 24
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest * *)_25]
Creating dr for MEM[(const struct sRequest &)_26].label
analyze_innermost: success.
	base_address: _26
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: MEM[(const struct sRequest &)_26]
	Access function 0: 32
Creating dr for _15->label
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: _26
	offset from base address: 0
	constant offset from base address: 20
	step: 16
	aligned to: 256
	base_object: MEM[(const struct sRequest &)_26]
	Access function 0: 32
	Access function 1: {16, +, 16}_1
Creating dr for _15->label
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: _26
	offset from base address: 0
	constant offset from base address: 20
	step: 16
	aligned to: 256
	base_object: MEM[(const struct sRequest &)_26]
	Access function 0: 32
	Access function 1: {16, +, 16}_1

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:10, LOOPS:1, CONDITIONS:4, STMTS:40)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_8 bb_3 })
  {
    <bb 2>:
    # DEBUG out => 0
    # DEBUG out => 0
    # VUSE <.MEM_4(D)>
    _20 = this_5(D)->D.36298._outputs;
    if (_20 <= 0)
      goto <bb 8>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_8 bb_4 })
  {
    <bb 3>:
    _22 = (long unsigned int) in_8(D);
    # DEBUG D#81 => &this_5(D)->_request
    # VUSE <.MEM_4(D)>
    _23 = MEM[(struct vector * *)this_5(D) + 160B];
    # DEBUG D#63 => D#81
    # DEBUG __n => _22
    # DEBUG this => D#63
    _24 = _22 * 24;
    _25 = _23 + _24;
    # VUSE <.MEM_4(D)>
    _26 = MEM[(struct sRequest * *)_25];
    # DEBUG __n => 0
    # DEBUG this => D#64
    # VUSE <.MEM_4(D)>
    _29 = MEM[(const struct sRequest &)_26].label;
    if (_29 >= 0)
      goto <bb 8>;
    else
      goto <bb 4>;

  }
  bb_4 (preds = {bb_3 }, succs = {bb_7 })
  {
    <bb 4>:
    goto <bb 7>;

  }
  bb_8 (preds = {bb_7 bb_5 bb_2 bb_3 }, succs = {bb_9 })
  {
    <bb 8>:
    # _2 = PHI <0(7), 1(5), 0(2), 1(3)>

  }
  bb_9 (preds = {bb_8 }, succs = {bb_1 })
  {
    <bb 9>:
    # VUSE <.MEM_4(D)>
    return _2;

  }
  loop_1 (header = 7, latch = 6, niter = , upper_bound = 2147483646)
  {
    bb_5 (preds = {bb_7 }, succs = {bb_8 bb_6 })
    {
      <bb 5>:
      _7 = (long unsigned int) out_12;
      # DEBUG D#81 => &this_5(D)->_request
      # DEBUG D#63 => D#81
      # DEBUG __n => _22
      # DEBUG this => D#63
      # DEBUG __n => _7
      # DEBUG this => D#64
      _10 = _7 * 16;
      _15 = _26 + _10;
      # VUSE <.MEM_4(D)>
      _11 = _15->label;
      if (_11 >= 0)
        goto <bb 8>;
      else
        goto <bb 6>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_7 })
    {
      <bb 6>:

    }
    bb_7 (preds = {bb_4 bb_6 }, succs = {bb_8 bb_5 })
    {
      <bb 7>:
      # out_30 = PHI <0(4), out_12(6)>
      # DEBUG out => out_30
      # DEBUG D#81 => &this_5(D)->_request
      # DEBUG D#63 => D#81
      # DEBUG __n => _22
      # DEBUG this => D#63
      # DEBUG __n => 0
      # DEBUG this => D#64
      out_12 = out_30 + 1;
      # DEBUG out => out_12
      # DEBUG out => out_12
      if (out_12 >= _20)
        goto <bb 8>;
      else
        goto <bb 5>;

    }
  }
}

Pass statistics:
----------------

virtual bool DenseAllocator::InputHasRequests(int) const (const struct DenseAllocatorD.35479 * const thisD.41122, intD.9 inD.41120)
{
  intD.9 outD.41124;
  boolD.2757 _2;
  long unsigned intD.14 _7;
  long unsigned intD.14 _10;
  intD.9 _11;
  const struct sRequestD.35378 & _15;
  intD.9 _20;
  long unsigned intD.14 _22;
  struct vectorD.35482 * const _23;
  long unsigned intD.14 _24;
  const struct vectorD.35482 & _25;
  struct sRequestD.35378 * const _26;
  intD.9 _29;

;;   basic block 2, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG outD.41124 => 0
  # DEBUG outD.41124 => 0
  # VUSE <.MEM_4(D)>
  _20 = this_5(D)->D.36298._outputsD.34630;
  if (_20 <= 0)
    goto <bb 8>;
  else
    goto <bb 3>;
;;    succ:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 840, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE ~[2147483648, 18446744071562067967]
  _22 = (long unsigned intD.14) in_8(D);
  # DEBUG D#81ptD.0 => &this_5(D)->_requestD.36229
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  _23 = MEM[(struct vectorD.35482 * *)this_5(D) + 160B];
  # DEBUG D#63ptD.0 => D#81ptD.0
  # DEBUG __nD.52525 => _22
  # DEBUG thisD.52526 => D#63ptD.0
  # RANGE [0, 18446744073709551592] NONZERO 18446744073709551608
  _24 = _22 * 24;
  # PT = nonlocal escaped 
  _25 = _23 + _24;
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  _26 = MEM[(struct sRequestD.35378 * *)_25];
  # DEBUG __nD.52521 => 0
  # DEBUG thisD.52522 => D#64ptD.0
  # VUSE <.MEM_4(D)>
  _29 = MEM[(const struct sRequestD.35378 &)_26].labelD.35381;
  if (_29 >= 0)
    goto <bb 8>;
  else
    goto <bb 4>;
;;    succ:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 802, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 8710, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       7 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _7 = (long unsigned intD.14) out_12;
  # DEBUG D#81ptD.0 => &this_5(D)->_requestD.36229
  # DEBUG D#63ptD.0 => D#81ptD.0
  # DEBUG __nD.52525 => _22
  # DEBUG thisD.52526 => D#63ptD.0
  # DEBUG __nD.52521 => _7
  # DEBUG thisD.52522 => D#64ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _10 = _7 * 16;
  # PT = nonlocal escaped 
  _15 = _26 + _10;
  # VUSE <.MEM_4(D)>
  _11 = _15->labelD.35381;
  if (_11 >= 0)
    goto <bb 8>;
  else
    goto <bb 6>;
;;    succ:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8318, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       7 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9120, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # out_30 = PHI <0(4), out_12(6)>
  # DEBUG outD.41124 => out_30
  # DEBUG D#81ptD.0 => &this_5(D)->_requestD.36229
  # DEBUG D#63ptD.0 => D#81ptD.0
  # DEBUG __nD.52525 => _22
  # DEBUG thisD.52526 => D#63ptD.0
  # DEBUG __nD.52521 => 0
  # DEBUG thisD.52522 => D#64ptD.0
  out_12 = out_30 + 1;
  # DEBUG outD.41124 => out_12
  # DEBUG outD.41124 => out_12
  if (out_12 >= _20)
    goto <bb 8>;
  else
    goto <bb 5>;
;;    succ:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                2 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1]
  # _2 = PHI <0(7), 1(5), 0(2), 1(3)>
;;    succ:       9 [100.0%]  (FALLTHRU)

;;   basic block 9, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 8, next block 1, flags: (NEW)
;;    pred:       8 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_4(D)>
  return _2;
;;    succ:       EXIT [100.0%] 

}



;; Function virtual bool DenseAllocator::OutputHasRequests(int) const (_ZNK14DenseAllocator17OutputHasRequestsEi, funcdef_no=1760, decl_uid=36260, cgraph_uid=430, symbol_order=431)


Pass statistics:
----------------

virtual bool DenseAllocator::OutputHasRequests(int) const (const struct DenseAllocatorD.35479 * const thisD.41129, intD.9 outD.41127)
{
  intD.9 inD.41131;
  boolD.2757 _2;
  long unsigned intD.14 _9;
  intD.9 _11;
  struct sRequestD.35378 * const _14;
  const struct sRequestD.35378 & _15;
  long unsigned intD.14 _16;
  const struct vectorD.35482 & _17;
  intD.9 _20;
  long unsigned intD.14 _21;
  struct vectorD.35482 * const _23;
  struct sRequestD.35378 * const _26;
  long unsigned intD.14 _27;
  const struct sRequestD.35378 & _28;
  intD.9 _29;

;;   basic block 2, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG inD.41131 => 0
  # DEBUG inD.41131 => 0
  # VUSE <.MEM_4(D)>
  _20 = this_5(D)->D.36298._inputsD.34629;
  if (_20 <= 0)
    goto <bb 8>;
  else
    goto <bb 3>;
;;    succ:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 840, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE ~[2147483648, 18446744071562067967]
  _21 = (long unsigned intD.14) out_7(D);
  # DEBUG D#82ptD.0 => &this_5(D)->_requestD.36229
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  _23 = MEM[(struct vectorD.35482 * *)this_5(D) + 160B];
  # DEBUG D#63ptD.0 => D#82ptD.0
  # DEBUG __nD.52534 => 0
  # DEBUG thisD.52535 => D#63ptD.0
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  _26 = MEM[(struct sRequestD.35378 * *)_23];
  # DEBUG __nD.52530 => _21
  # DEBUG thisD.52531 => D#64ptD.0
  # RANGE [0, 18446744073709551600] NONZERO 18446744073709551600
  _27 = _21 * 16;
  # PT = nonlocal escaped 
  _28 = _26 + _27;
  # VUSE <.MEM_4(D)>
  _29 = _28->labelD.35381;
  if (_29 >= 0)
    goto <bb 8>;
  else
    goto <bb 4>;
;;    succ:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 802, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 8710, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       7 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _9 = (long unsigned intD.14) in_12;
  # DEBUG D#82ptD.0 => &this_5(D)->_requestD.36229
  # DEBUG D#63ptD.0 => D#82ptD.0
  # DEBUG __nD.52534 => _9
  # DEBUG thisD.52535 => D#63ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _16 = _9 * 24;
  # PT = nonlocal escaped 
  _17 = _23 + _16;
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  _14 = MEM[(struct sRequestD.35378 * *)_17];
  # DEBUG __nD.52530 => _21
  # DEBUG thisD.52531 => D#64ptD.0
  # PT = nonlocal escaped 
  _15 = _14 + _27;
  # VUSE <.MEM_4(D)>
  _11 = _15->labelD.35381;
  if (_11 >= 0)
    goto <bb 8>;
  else
    goto <bb 6>;
;;    succ:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8318, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       7 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9120, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # in_30 = PHI <0(4), in_12(6)>
  # DEBUG inD.41131 => in_30
  # DEBUG D#82ptD.0 => &this_5(D)->_requestD.36229
  # DEBUG D#63ptD.0 => D#82ptD.0
  # DEBUG __nD.52534 => 0
  # DEBUG thisD.52535 => D#63ptD.0
  # DEBUG __nD.52530 => _21
  # DEBUG thisD.52531 => D#64ptD.0
  in_12 = in_30 + 1;
  # DEBUG inD.41131 => in_12
  # DEBUG inD.41131 => in_12
  if (in_12 >= _20)
    goto <bb 8>;
  else
    goto <bb 5>;
;;    succ:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 7, next block 1, flags: (NEW, REACHABLE)
;;    pred:       7 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                2 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1]
  # _2 = PHI <0(7), 1(5), 0(2), 1(3)>
  # VUSE <.MEM_4(D)>
  return _2;
;;    succ:       EXIT [100.0%] 

}


Creating dr for this_5(D)->D.36298._inputs
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: *this_5(D)
	Access function 0: 768
	Access function 1: 0
Creating dr for MEM[(struct vector * *)this_5(D) + 160B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 160
	step: 0
	aligned to: 256
	base_object: MEM[(struct vector * *)this_5(D) + 160B]
Creating dr for MEM[(struct sRequest * *)_23]
analyze_innermost: success.
	base_address: _23
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest * *)_23]
Creating dr for _28->label
analyze_innermost: success.
	base_address: _26 + (long unsigned int) out_7(D) * 16
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: *_28
	Access function 0: 32
Creating dr for MEM[(struct sRequest * *)_17]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: _23
	offset from base address: 0
	constant offset from base address: 24
	step: 24
	aligned to: 256
	base_object: MEM[(struct sRequest * *)_23]
	Access function 0: {24, +, 24}_1
Creating dr for MEM[(struct sRequest * *)_17]
analyze_innermost: Applying pattern match.pd:49, generic-match.c:4015
success.
Applying pattern match.pd:49, generic-match.c:4015
	base_address: _23
	offset from base address: 0
	constant offset from base address: 24
	step: 24
	aligned to: 256
	base_object: MEM[(struct sRequest * *)_23]
	Access function 0: {24, +, 24}_1
Creating dr for _15->label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_15
	Access function 0: 32
Creating dr for _15->label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_15
	Access function 0: 32

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:10, LOOPS:1, CONDITIONS:4, STMTS:42)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_8 bb_3 })
  {
    <bb 2>:
    # DEBUG in => 0
    # DEBUG in => 0
    # VUSE <.MEM_4(D)>
    _20 = this_5(D)->D.36298._inputs;
    if (_20 <= 0)
      goto <bb 8>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_8 bb_4 })
  {
    <bb 3>:
    _21 = (long unsigned int) out_7(D);
    # DEBUG D#82 => &this_5(D)->_request
    # VUSE <.MEM_4(D)>
    _23 = MEM[(struct vector * *)this_5(D) + 160B];
    # DEBUG D#63 => D#82
    # DEBUG __n => 0
    # DEBUG this => D#63
    # VUSE <.MEM_4(D)>
    _26 = MEM[(struct sRequest * *)_23];
    # DEBUG __n => _21
    # DEBUG this => D#64
    _27 = _21 * 16;
    _28 = _26 + _27;
    # VUSE <.MEM_4(D)>
    _29 = _28->label;
    if (_29 >= 0)
      goto <bb 8>;
    else
      goto <bb 4>;

  }
  bb_4 (preds = {bb_3 }, succs = {bb_7 })
  {
    <bb 4>:
    goto <bb 7>;

  }
  bb_8 (preds = {bb_7 bb_5 bb_2 bb_3 }, succs = {bb_9 })
  {
    <bb 8>:
    # _2 = PHI <0(7), 1(5), 0(2), 1(3)>

  }
  bb_9 (preds = {bb_8 }, succs = {bb_1 })
  {
    <bb 9>:
    # VUSE <.MEM_4(D)>
    return _2;

  }
  loop_1 (header = 7, latch = 6, niter = , upper_bound = 2147483646)
  {
    bb_5 (preds = {bb_7 }, succs = {bb_8 bb_6 })
    {
      <bb 5>:
      _9 = (long unsigned int) in_12;
      # DEBUG D#82 => &this_5(D)->_request
      # DEBUG D#63 => D#82
      # DEBUG __n => _9
      # DEBUG this => D#63
      _16 = _9 * 24;
      _17 = _23 + _16;
      # VUSE <.MEM_4(D)>
      _14 = MEM[(struct sRequest * *)_17];
      # DEBUG __n => _21
      # DEBUG this => D#64
      _15 = _14 + _27;
      # VUSE <.MEM_4(D)>
      _11 = _15->label;
      if (_11 >= 0)
        goto <bb 8>;
      else
        goto <bb 6>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_7 })
    {
      <bb 6>:

    }
    bb_7 (preds = {bb_4 bb_6 }, succs = {bb_8 bb_5 })
    {
      <bb 7>:
      # in_30 = PHI <0(4), in_12(6)>
      # DEBUG in => in_30
      # DEBUG D#82 => &this_5(D)->_request
      # DEBUG D#63 => D#82
      # DEBUG __n => 0
      # DEBUG this => D#63
      # DEBUG __n => _21
      # DEBUG this => D#64
      in_12 = in_30 + 1;
      # DEBUG in => in_12
      # DEBUG in => in_12
      if (in_12 >= _20)
        goto <bb 8>;
      else
        goto <bb 5>;

    }
  }
}

Pass statistics:
----------------

virtual bool DenseAllocator::OutputHasRequests(int) const (const struct DenseAllocatorD.35479 * const thisD.41129, intD.9 outD.41127)
{
  intD.9 inD.41131;
  boolD.2757 _2;
  long unsigned intD.14 _9;
  intD.9 _11;
  struct sRequestD.35378 * const _14;
  const struct sRequestD.35378 & _15;
  long unsigned intD.14 _16;
  const struct vectorD.35482 & _17;
  intD.9 _20;
  long unsigned intD.14 _21;
  struct vectorD.35482 * const _23;
  struct sRequestD.35378 * const _26;
  long unsigned intD.14 _27;
  const struct sRequestD.35378 & _28;
  intD.9 _29;

;;   basic block 2, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG inD.41131 => 0
  # DEBUG inD.41131 => 0
  # VUSE <.MEM_4(D)>
  _20 = this_5(D)->D.36298._inputsD.34629;
  if (_20 <= 0)
    goto <bb 8>;
  else
    goto <bb 3>;
;;    succ:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 840, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE ~[2147483648, 18446744071562067967]
  _21 = (long unsigned intD.14) out_7(D);
  # DEBUG D#82ptD.0 => &this_5(D)->_requestD.36229
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  _23 = MEM[(struct vectorD.35482 * *)this_5(D) + 160B];
  # DEBUG D#63ptD.0 => D#82ptD.0
  # DEBUG __nD.52534 => 0
  # DEBUG thisD.52535 => D#63ptD.0
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  _26 = MEM[(struct sRequestD.35378 * *)_23];
  # DEBUG __nD.52530 => _21
  # DEBUG thisD.52531 => D#64ptD.0
  # RANGE [0, 18446744073709551600] NONZERO 18446744073709551600
  _27 = _21 * 16;
  # PT = nonlocal escaped 
  _28 = _26 + _27;
  # VUSE <.MEM_4(D)>
  _29 = _28->labelD.35381;
  if (_29 >= 0)
    goto <bb 8>;
  else
    goto <bb 4>;
;;    succ:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 802, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 8710, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       7 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _9 = (long unsigned intD.14) in_12;
  # DEBUG D#82ptD.0 => &this_5(D)->_requestD.36229
  # DEBUG D#63ptD.0 => D#82ptD.0
  # DEBUG __nD.52534 => _9
  # DEBUG thisD.52535 => D#63ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _16 = _9 * 24;
  # PT = nonlocal escaped 
  _17 = _23 + _16;
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  _14 = MEM[(struct sRequestD.35378 * *)_17];
  # DEBUG __nD.52530 => _21
  # DEBUG thisD.52531 => D#64ptD.0
  # PT = nonlocal escaped 
  _15 = _14 + _27;
  # VUSE <.MEM_4(D)>
  _11 = _15->labelD.35381;
  if (_11 >= 0)
    goto <bb 8>;
  else
    goto <bb 6>;
;;    succ:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8318, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       7 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9120, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # in_30 = PHI <0(4), in_12(6)>
  # DEBUG inD.41131 => in_30
  # DEBUG D#82ptD.0 => &this_5(D)->_requestD.36229
  # DEBUG D#63ptD.0 => D#82ptD.0
  # DEBUG __nD.52534 => 0
  # DEBUG thisD.52535 => D#63ptD.0
  # DEBUG __nD.52530 => _21
  # DEBUG thisD.52531 => D#64ptD.0
  in_12 = in_30 + 1;
  # DEBUG inD.41131 => in_12
  # DEBUG inD.41131 => in_12
  if (in_12 >= _20)
    goto <bb 8>;
  else
    goto <bb 5>;
;;    succ:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                2 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1]
  # _2 = PHI <0(7), 1(5), 0(2), 1(3)>
;;    succ:       9 [100.0%]  (FALLTHRU)

;;   basic block 9, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 8, next block 1, flags: (NEW)
;;    pred:       8 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_4(D)>
  return _2;
;;    succ:       EXIT [100.0%] 

}



;; Function virtual int DenseAllocator::NumInputRequests(int) const (_ZNK14DenseAllocator16NumInputRequestsEi, funcdef_no=1761, decl_uid=36269, cgraph_uid=431, symbol_order=432)


Pass statistics:
----------------

virtual int DenseAllocator::NumInputRequests(int) const (const struct DenseAllocatorD.35479 * const thisD.41136, intD.9 inD.41134)
{
  intD.9 outD.41139;
  intD.9 resultD.41138;
  long unsigned intD.14 pretmp_4;
  long unsigned intD.14 _8;
  long unsigned intD.14 _11;
  intD.9 _12;
  const struct sRequestD.35378 & _17;
  struct vectorD.35482 * const pretmp_20;
  intD.9 _23;
  long unsigned intD.14 pretmp_30;
  const struct vectorD.35482 & pretmp_31;
  struct sRequestD.35378 * const pretmp_32;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG resultD.41138 => 0
  # DEBUG outD.41139 => 0
  # DEBUG outD.41139 => 0
  # DEBUG resultD.41138 => 0
  # VUSE <.MEM_5(D)>
  _23 = this_6(D)->D.36298._outputsD.34630;
  if (_23 <= 0)
    goto <bb 9>;
  else
    goto <bb 3>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_4 = (long unsigned intD.14) in_9(D);
  # VUSE <.MEM_5(D)>
  # PT = nonlocal escaped 
  pretmp_20 = MEM[(struct vectorD.35482 * *)this_6(D) + 160B];
  pretmp_30 = pretmp_4 * 24;
  # PT = nonlocal escaped 
  pretmp_31 = pretmp_20 + pretmp_30;
  # VUSE <.MEM_5(D)>
  # PT = nonlocal escaped 
  pretmp_32 = MEM[(struct sRequestD.35378 * *)pretmp_31];
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  # result_24 = PHI <0(3), result_2(8)>
  # out_26 = PHI <0(3), out_14(8)>
  # DEBUG outD.41139 => out_26
  # DEBUG resultD.41138 => result_24
  # RANGE [0, 18446744073709551615]
  _8 = (long unsigned intD.14) out_26;
  # DEBUG D#83ptD.0 => &this_6(D)->_requestD.36229
  # DEBUG D#63ptD.0 => D#83ptD.0
  # DEBUG __nD.52543 => (long unsigned intD.14) in_9(D)
  # DEBUG thisD.52544 => D#63ptD.0
  # DEBUG __nD.52539 => _8
  # DEBUG thisD.52540 => D#64ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _11 = _8 * 16;
  # PT = nonlocal escaped 
  _17 = pretmp_32 + _11;
  # VUSE <.MEM_5(D)>
  _12 = _17->labelD.35381;
  if (_12 >= 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [27.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 6643, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [73.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [1, 2147483647] NONZERO 2147483647
  result_13 = result_24 + 1;
  # DEBUG resultD.41138 => result_13
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [27.0%]  (FALSE_VALUE,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  # result_2 = PHI <result_24(4), result_13(5)>
  # DEBUG resultD.41138 => result_2
  out_14 = out_26 + 1;
  # DEBUG outD.41139 => out_14
  # DEBUG outD.41139 => out_14
  # DEBUG resultD.41138 => result_2
  if (out_14 >= _23)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  # result_28 = PHI <result_2(6)>
  goto <bb 9>;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       6 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 8, next block 1, flags: (NEW, REACHABLE)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  # result_25 = PHI <result_28(7), 0(2)>
  # VUSE <.MEM_5(D)>
  return result_25;
;;    succ:       EXIT [100.0%] 

}


Creating dr for this_6(D)->D.36298._outputs
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 100
	step: 0
	aligned to: 256
	base_object: *this_6(D)
	Access function 0: 800
	Access function 1: 0
Creating dr for MEM[(struct vector * *)this_6(D) + 160B]
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 160
	step: 0
	aligned to: 256
	base_object: MEM[(struct vector * *)this_6(D) + 160B]
Creating dr for MEM[(struct sRequest * *)pretmp_31]
analyze_innermost: success.
	base_address: pretmp_20 + (long unsigned int) in_9(D) * 24
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest * *)pretmp_31]
Creating dr for _17->label
analyze_innermost: success.
	base_address: pretmp_32
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(const struct sRequest &)pretmp_32]
	Access function 0: 32
	Access function 1: {0B, +, 16}_1
Creating dr for _17->label
analyze_innermost: success.
	base_address: pretmp_32
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(const struct sRequest &)pretmp_32]
	Access function 0: 32
	Access function 1: {0B, +, 16}_1
Creating dr for _17->label
analyze_innermost: success.
	base_address: pretmp_32
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(const struct sRequest &)pretmp_32]
	Access function 0: 32
	Access function 1: {0B, +, 16}_1
Creating dr for _17->label
analyze_innermost: success.
	base_address: pretmp_32
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(const struct sRequest &)pretmp_32]
	Access function 0: 32
	Access function 1: {0B, +, 16}_1
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < _23
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) _23 + 4294967295, bounded by 2147483646
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < _23
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) _23 + 4294967295, bounded by 2147483646
Creating dr for _17->label
analyze_innermost: success.
	base_address: pretmp_32
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(const struct sRequest &)pretmp_32]
	Access function 0: 32
	Access function 1: {0B, +, 16}_1
Creating dr for _17->label
analyze_innermost: success.
	base_address: pretmp_32
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(const struct sRequest &)pretmp_32]
	Access function 0: 32
	Access function 1: {0B, +, 16}_1
Creating dr for _17->label
analyze_innermost: success.
	base_address: pretmp_32
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(const struct sRequest &)pretmp_32]
	Access function 0: 32
	Access function 1: {0B, +, 16}_1
Creating dr for _17->label
analyze_innermost: success.
	base_address: pretmp_32
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(const struct sRequest &)pretmp_32]
	Access function 0: 32
	Access function 1: {0B, +, 16}_1
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < _23
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) _23 + 4294967295, bounded by 2147483646

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:12, LOOPS:1, CONDITIONS:3, STMTS:33)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_9 bb_3 })
  {
    <bb 2>:
    # DEBUG result => 0
    # DEBUG out => 0
    # DEBUG out => 0
    # DEBUG result => 0
    # VUSE <.MEM_5(D)>
    _23 = this_6(D)->D.36298._outputs;
    if (_23 <= 0)
      goto <bb 9>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 })
  {
    <bb 3>:
    pretmp_4 = (long unsigned int) in_9(D);
    # VUSE <.MEM_5(D)>
    pretmp_20 = MEM[(struct vector * *)this_6(D) + 160B];
    pretmp_30 = pretmp_4 * 24;
    pretmp_31 = pretmp_20 + pretmp_30;
    # VUSE <.MEM_5(D)>
    pretmp_32 = MEM[(struct sRequest * *)pretmp_31];

  }
  bb_7 (preds = {bb_6 }, succs = {bb_10 })
  {
    <bb 7>:
    # result_28 = PHI <result_2(6)>

  }
  bb_10 (preds = {bb_7 }, succs = {bb_9 })
  {
    <bb 10>:
    goto <bb 9>;

  }
  bb_9 (preds = {bb_10 bb_2 }, succs = {bb_11 })
  {
    <bb 9>:
    # result_25 = PHI <result_28(10), 0(2)>

  }
  bb_11 (preds = {bb_9 }, succs = {bb_1 })
  {
    <bb 11>:
    # VUSE <.MEM_5(D)>
    return result_25;

  }
  loop_1 (header = 4, latch = 8, niter = (unsigned int) _23 + 4294967295, upper_bound = 2147483646)
  {
    bb_4 (preds = {bb_3 bb_8 }, succs = {bb_5 bb_6 })
    {
      <bb 4>:
      # result_24 = PHI <0(3), result_2(8)>
      # out_26 = PHI <0(3), out_14(8)>
      # DEBUG out => out_26
      # DEBUG result => result_24
      _8 = (long unsigned int) out_26;
      # DEBUG D#83 => &this_6(D)->_request
      # DEBUG D#63 => D#83
      # DEBUG __n => (long unsigned int) in_9(D)
      # DEBUG this => D#63
      # DEBUG __n => _8
      # DEBUG this => D#64
      _11 = _8 * 16;
      _17 = pretmp_32 + _11;
      # VUSE <.MEM_5(D)>
      _12 = _17->label;
      if (_12 >= 0)
        goto <bb 5>;
      else
        goto <bb 6>;

    }
    bb_5 (preds = {bb_4 }, succs = {bb_6 })
    {
      <bb 5>:
      result_13 = result_24 + 1;
      # DEBUG result => result_13

    }
    bb_6 (preds = {bb_4 bb_5 }, succs = {bb_7 bb_8 })
    {
      <bb 6>:
      # result_2 = PHI <result_24(4), result_13(5)>
      # DEBUG result => result_2
      out_14 = out_26 + 1;
      # DEBUG out => out_14
      # DEBUG out => out_14
      # DEBUG result => result_2
      if (out_14 >= _23)
        goto <bb 7>;
      else
        goto <bb 8>;

    }
    bb_8 (preds = {bb_6 }, succs = {bb_4 })
    {
      <bb 8>:
      goto <bb 4>;

    }
  }
}

Pass statistics:
----------------

virtual int DenseAllocator::NumInputRequests(int) const (const struct DenseAllocatorD.35479 * const thisD.41136, intD.9 inD.41134)
{
  intD.9 outD.41139;
  intD.9 resultD.41138;
  long unsigned intD.14 pretmp_4;
  long unsigned intD.14 _8;
  long unsigned intD.14 _11;
  intD.9 _12;
  const struct sRequestD.35378 & _17;
  struct vectorD.35482 * const pretmp_20;
  intD.9 _23;
  long unsigned intD.14 pretmp_30;
  const struct vectorD.35482 & pretmp_31;
  struct sRequestD.35378 * const pretmp_32;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG resultD.41138 => 0
  # DEBUG outD.41139 => 0
  # DEBUG outD.41139 => 0
  # DEBUG resultD.41138 => 0
  # VUSE <.MEM_5(D)>
  _23 = this_6(D)->D.36298._outputsD.34630;
  if (_23 <= 0)
    goto <bb 9>;
  else
    goto <bb 3>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_4 = (long unsigned intD.14) in_9(D);
  # VUSE <.MEM_5(D)>
  # PT = nonlocal escaped 
  pretmp_20 = MEM[(struct vectorD.35482 * *)this_6(D) + 160B];
  pretmp_30 = pretmp_4 * 24;
  # PT = nonlocal escaped 
  pretmp_31 = pretmp_20 + pretmp_30;
  # VUSE <.MEM_5(D)>
  # PT = nonlocal escaped 
  pretmp_32 = MEM[(struct sRequestD.35378 * *)pretmp_31];
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  # result_24 = PHI <0(3), result_2(8)>
  # out_26 = PHI <0(3), out_14(8)>
  # DEBUG outD.41139 => out_26
  # DEBUG resultD.41138 => result_24
  # RANGE [0, 18446744073709551615]
  _8 = (long unsigned intD.14) out_26;
  # DEBUG D#83ptD.0 => &this_6(D)->_requestD.36229
  # DEBUG D#63ptD.0 => D#83ptD.0
  # DEBUG __nD.52543 => (long unsigned intD.14) in_9(D)
  # DEBUG thisD.52544 => D#63ptD.0
  # DEBUG __nD.52539 => _8
  # DEBUG thisD.52540 => D#64ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _11 = _8 * 16;
  # PT = nonlocal escaped 
  _17 = pretmp_32 + _11;
  # VUSE <.MEM_5(D)>
  _12 = _17->labelD.35381;
  if (_12 >= 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [27.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 6643, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [73.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [1, 2147483647] NONZERO 2147483647
  result_13 = result_24 + 1;
  # DEBUG resultD.41138 => result_13
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [27.0%]  (FALSE_VALUE,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  # result_2 = PHI <result_24(4), result_13(5)>
  # DEBUG resultD.41138 => result_2
  out_14 = out_26 + 1;
  # DEBUG outD.41139 => out_14
  # DEBUG outD.41139 => out_14
  # DEBUG resultD.41138 => result_2
  if (out_14 >= _23)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 6, next block 10, flags: (NEW)
;;    pred:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  # result_28 = PHI <result_2(6)>
;;    succ:       10 [100.0%]  (FALLTHRU)

;;   basic block 10, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 7, next block 8, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU)
  goto <bb 9>;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 10, next block 9, flags: (NEW)
;;    pred:       6 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 8, next block 11, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  # result_25 = PHI <result_28(10), 0(2)>
;;    succ:       11 [100.0%]  (FALLTHRU)

;;   basic block 11, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 9, next block 1, flags: (NEW)
;;    pred:       9 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_5(D)>
  return result_25;
;;    succ:       EXIT [100.0%] 

}



;; Function virtual int DenseAllocator::NumOutputRequests(int) const (_ZNK14DenseAllocator17NumOutputRequestsEi, funcdef_no=1762, decl_uid=36266, cgraph_uid=432, symbol_order=433)


Pass statistics:
----------------

virtual int DenseAllocator::NumOutputRequests(int) const (const struct DenseAllocatorD.35479 * const thisD.41144, intD.9 outD.41142)
{
  intD.9 inD.41147;
  intD.9 resultD.41146;
  long unsigned intD.14 _10;
  intD.9 _12;
  struct sRequestD.35378 * const _16;
  const struct sRequestD.35378 & _17;
  long unsigned intD.14 _18;
  const struct vectorD.35482 & _19;
  long unsigned intD.14 pretmp_20;
  intD.9 _23;
  long unsigned intD.14 pretmp_30;
  struct vectorD.35482 * const pretmp_32;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG resultD.41146 => 0
  # DEBUG inD.41147 => 0
  # DEBUG inD.41147 => 0
  # DEBUG resultD.41146 => 0
  # VUSE <.MEM_5(D)>
  _23 = this_6(D)->D.36298._inputsD.34629;
  if (_23 <= 0)
    goto <bb 9>;
  else
    goto <bb 3>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_20 = (long unsigned intD.14) out_8(D);
  pretmp_30 = pretmp_20 * 16;
  # VUSE <.MEM_5(D)>
  # PT = nonlocal escaped 
  pretmp_32 = MEM[(struct vectorD.35482 * *)this_6(D) + 160B];
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  # result_24 = PHI <0(3), result_2(8)>
  # in_26 = PHI <0(3), in_14(8)>
  # DEBUG inD.41147 => in_26
  # DEBUG resultD.41146 => result_24
  # RANGE [0, 18446744073709551615]
  _10 = (long unsigned intD.14) in_26;
  # DEBUG D#84ptD.0 => &this_6(D)->_requestD.36229
  # DEBUG D#63ptD.0 => D#84ptD.0
  # DEBUG __nD.52552 => _10
  # DEBUG thisD.52553 => D#63ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _18 = _10 * 24;
  # PT = nonlocal escaped 
  _19 = pretmp_32 + _18;
  # VUSE <.MEM_5(D)>
  # PT = nonlocal escaped 
  _16 = MEM[(struct sRequestD.35378 * *)_19];
  # DEBUG __nD.52548 => (long unsigned intD.14) out_8(D)
  # DEBUG thisD.52549 => D#64ptD.0
  # PT = nonlocal escaped 
  _17 = _16 + pretmp_30;
  # VUSE <.MEM_5(D)>
  _12 = _17->labelD.35381;
  if (_12 >= 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [27.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 6643, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [73.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [1, 2147483647] NONZERO 2147483647
  result_13 = result_24 + 1;
  # DEBUG resultD.41146 => result_13
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [27.0%]  (FALSE_VALUE,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  # result_2 = PHI <result_24(4), result_13(5)>
  # DEBUG resultD.41146 => result_2
  in_14 = in_26 + 1;
  # DEBUG inD.41147 => in_14
  # DEBUG inD.41147 => in_14
  # DEBUG resultD.41146 => result_2
  if (in_14 >= _23)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  # result_28 = PHI <result_2(6)>
  goto <bb 9>;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       6 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 8, next block 1, flags: (NEW, REACHABLE)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  # result_25 = PHI <result_28(7), 0(2)>
  # VUSE <.MEM_5(D)>
  return result_25;
;;    succ:       EXIT [100.0%] 

}


Creating dr for this_6(D)->D.36298._inputs
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: *this_6(D)
	Access function 0: 768
	Access function 1: 0
Creating dr for MEM[(struct vector * *)this_6(D) + 160B]
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 160
	step: 0
	aligned to: 256
	base_object: MEM[(struct vector * *)this_6(D) + 160B]
Creating dr for MEM[(struct sRequest * *)_19]
analyze_innermost: success.
	base_address: pretmp_32
	offset from base address: 0
	constant offset from base address: 0
	step: 24
	aligned to: 256
	base_object: MEM[(struct sRequest * *)pretmp_32]
	Access function 0: {0B, +, 24}_1
Creating dr for MEM[(struct sRequest * *)_19]
analyze_innermost: success.
	base_address: pretmp_32
	offset from base address: 0
	constant offset from base address: 0
	step: 24
	aligned to: 256
	base_object: MEM[(struct sRequest * *)pretmp_32]
	Access function 0: {0B, +, 24}_1
Creating dr for _17->label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_17
	Access function 0: 32
Creating dr for _17->label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_17
	Access function 0: 32
Creating dr for MEM[(struct sRequest * *)_19]
analyze_innermost: success.
	base_address: pretmp_32
	offset from base address: 0
	constant offset from base address: 0
	step: 24
	aligned to: 256
	base_object: MEM[(struct sRequest * *)pretmp_32]
	Access function 0: {0B, +, 24}_1
Creating dr for MEM[(struct sRequest * *)_19]
analyze_innermost: success.
	base_address: pretmp_32
	offset from base address: 0
	constant offset from base address: 0
	step: 24
	aligned to: 256
	base_object: MEM[(struct sRequest * *)pretmp_32]
	Access function 0: {0B, +, 24}_1
Creating dr for _17->label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_17
	Access function 0: 32
Creating dr for _17->label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_17
	Access function 0: 32
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < _23
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) _23 + 4294967295, bounded by 2147483646
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < _23
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) _23 + 4294967295, bounded by 2147483646
Creating dr for MEM[(struct sRequest * *)_19]
analyze_innermost: success.
	base_address: pretmp_32
	offset from base address: 0
	constant offset from base address: 0
	step: 24
	aligned to: 256
	base_object: MEM[(struct sRequest * *)pretmp_32]
	Access function 0: {0B, +, 24}_1
Creating dr for MEM[(struct sRequest * *)_19]
analyze_innermost: success.
	base_address: pretmp_32
	offset from base address: 0
	constant offset from base address: 0
	step: 24
	aligned to: 256
	base_object: MEM[(struct sRequest * *)pretmp_32]
	Access function 0: {0B, +, 24}_1
Creating dr for _17->label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_17
	Access function 0: 32
Creating dr for _17->label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_17
	Access function 0: 32
Creating dr for MEM[(struct sRequest * *)_19]
analyze_innermost: success.
	base_address: pretmp_32
	offset from base address: 0
	constant offset from base address: 0
	step: 24
	aligned to: 256
	base_object: MEM[(struct sRequest * *)pretmp_32]
	Access function 0: {0B, +, 24}_1
Creating dr for MEM[(struct sRequest * *)_19]
analyze_innermost: success.
	base_address: pretmp_32
	offset from base address: 0
	constant offset from base address: 0
	step: 24
	aligned to: 256
	base_object: MEM[(struct sRequest * *)pretmp_32]
	Access function 0: {0B, +, 24}_1
Creating dr for _17->label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_17
	Access function 0: 32
Creating dr for _17->label
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_17
	Access function 0: 32
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < _23
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) _23 + 4294967295, bounded by 2147483646

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:12, LOOPS:1, CONDITIONS:3, STMTS:33)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_9 bb_3 })
  {
    <bb 2>:
    # DEBUG result => 0
    # DEBUG in => 0
    # DEBUG in => 0
    # DEBUG result => 0
    # VUSE <.MEM_5(D)>
    _23 = this_6(D)->D.36298._inputs;
    if (_23 <= 0)
      goto <bb 9>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 })
  {
    <bb 3>:
    pretmp_20 = (long unsigned int) out_8(D);
    pretmp_30 = pretmp_20 * 16;
    # VUSE <.MEM_5(D)>
    pretmp_32 = MEM[(struct vector * *)this_6(D) + 160B];

  }
  bb_7 (preds = {bb_6 }, succs = {bb_10 })
  {
    <bb 7>:
    # result_28 = PHI <result_2(6)>

  }
  bb_10 (preds = {bb_7 }, succs = {bb_9 })
  {
    <bb 10>:
    goto <bb 9>;

  }
  bb_9 (preds = {bb_10 bb_2 }, succs = {bb_11 })
  {
    <bb 9>:
    # result_25 = PHI <result_28(10), 0(2)>

  }
  bb_11 (preds = {bb_9 }, succs = {bb_1 })
  {
    <bb 11>:
    # VUSE <.MEM_5(D)>
    return result_25;

  }
  loop_1 (header = 4, latch = 8, niter = (unsigned int) _23 + 4294967295, upper_bound = 2147483646)
  {
    bb_4 (preds = {bb_3 bb_8 }, succs = {bb_5 bb_6 })
    {
      <bb 4>:
      # result_24 = PHI <0(3), result_2(8)>
      # in_26 = PHI <0(3), in_14(8)>
      # DEBUG in => in_26
      # DEBUG result => result_24
      _10 = (long unsigned int) in_26;
      # DEBUG D#84 => &this_6(D)->_request
      # DEBUG D#63 => D#84
      # DEBUG __n => _10
      # DEBUG this => D#63
      _18 = _10 * 24;
      _19 = pretmp_32 + _18;
      # VUSE <.MEM_5(D)>
      _16 = MEM[(struct sRequest * *)_19];
      # DEBUG __n => (long unsigned int) out_8(D)
      # DEBUG this => D#64
      _17 = _16 + pretmp_30;
      # VUSE <.MEM_5(D)>
      _12 = _17->label;
      if (_12 >= 0)
        goto <bb 5>;
      else
        goto <bb 6>;

    }
    bb_5 (preds = {bb_4 }, succs = {bb_6 })
    {
      <bb 5>:
      result_13 = result_24 + 1;
      # DEBUG result => result_13

    }
    bb_6 (preds = {bb_4 bb_5 }, succs = {bb_7 bb_8 })
    {
      <bb 6>:
      # result_2 = PHI <result_24(4), result_13(5)>
      # DEBUG result => result_2
      in_14 = in_26 + 1;
      # DEBUG in => in_14
      # DEBUG in => in_14
      # DEBUG result => result_2
      if (in_14 >= _23)
        goto <bb 7>;
      else
        goto <bb 8>;

    }
    bb_8 (preds = {bb_6 }, succs = {bb_4 })
    {
      <bb 8>:
      goto <bb 4>;

    }
  }
}

Pass statistics:
----------------

virtual int DenseAllocator::NumOutputRequests(int) const (const struct DenseAllocatorD.35479 * const thisD.41144, intD.9 outD.41142)
{
  intD.9 inD.41147;
  intD.9 resultD.41146;
  long unsigned intD.14 _10;
  intD.9 _12;
  struct sRequestD.35378 * const _16;
  const struct sRequestD.35378 & _17;
  long unsigned intD.14 _18;
  const struct vectorD.35482 & _19;
  long unsigned intD.14 pretmp_20;
  intD.9 _23;
  long unsigned intD.14 pretmp_30;
  struct vectorD.35482 * const pretmp_32;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG resultD.41146 => 0
  # DEBUG inD.41147 => 0
  # DEBUG inD.41147 => 0
  # DEBUG resultD.41146 => 0
  # VUSE <.MEM_5(D)>
  _23 = this_6(D)->D.36298._inputsD.34629;
  if (_23 <= 0)
    goto <bb 9>;
  else
    goto <bb 3>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_20 = (long unsigned intD.14) out_8(D);
  pretmp_30 = pretmp_20 * 16;
  # VUSE <.MEM_5(D)>
  # PT = nonlocal escaped 
  pretmp_32 = MEM[(struct vectorD.35482 * *)this_6(D) + 160B];
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  # result_24 = PHI <0(3), result_2(8)>
  # in_26 = PHI <0(3), in_14(8)>
  # DEBUG inD.41147 => in_26
  # DEBUG resultD.41146 => result_24
  # RANGE [0, 18446744073709551615]
  _10 = (long unsigned intD.14) in_26;
  # DEBUG D#84ptD.0 => &this_6(D)->_requestD.36229
  # DEBUG D#63ptD.0 => D#84ptD.0
  # DEBUG __nD.52552 => _10
  # DEBUG thisD.52553 => D#63ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _18 = _10 * 24;
  # PT = nonlocal escaped 
  _19 = pretmp_32 + _18;
  # VUSE <.MEM_5(D)>
  # PT = nonlocal escaped 
  _16 = MEM[(struct sRequestD.35378 * *)_19];
  # DEBUG __nD.52548 => (long unsigned intD.14) out_8(D)
  # DEBUG thisD.52549 => D#64ptD.0
  # PT = nonlocal escaped 
  _17 = _16 + pretmp_30;
  # VUSE <.MEM_5(D)>
  _12 = _17->labelD.35381;
  if (_12 >= 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [27.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 6643, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [73.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [1, 2147483647] NONZERO 2147483647
  result_13 = result_24 + 1;
  # DEBUG resultD.41146 => result_13
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [27.0%]  (FALSE_VALUE,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  # result_2 = PHI <result_24(4), result_13(5)>
  # DEBUG resultD.41146 => result_2
  in_14 = in_26 + 1;
  # DEBUG inD.41147 => in_14
  # DEBUG inD.41147 => in_14
  # DEBUG resultD.41146 => result_2
  if (in_14 >= _23)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 6, next block 10, flags: (NEW)
;;    pred:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  # result_28 = PHI <result_2(6)>
;;    succ:       10 [100.0%]  (FALLTHRU)

;;   basic block 10, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 7, next block 8, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU)
  goto <bb 9>;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 10, next block 9, flags: (NEW)
;;    pred:       6 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 8, next block 11, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  # result_25 = PHI <result_28(10), 0(2)>
;;    succ:       11 [100.0%]  (FALLTHRU)

;;   basic block 11, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 9, next block 1, flags: (NEW)
;;    pred:       9 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_5(D)>
  return result_25;
;;    succ:       EXIT [100.0%] 

}



;; Function virtual bool SparseAllocator::InputHasRequests(int) const (_ZNK15SparseAllocator16InputHasRequestsEi, funcdef_no=1778, decl_uid=37930, cgraph_uid=448, symbol_order=449)


Pass statistics:
----------------

virtual bool SparseAllocator::InputHasRequests(int) const (const struct SparseAllocatorD.36303 * const thisD.42674, intD.9 inD.42672)
{
  const struct _Rb_tree_nodeD.36321 * __yD.55768;
  const intD.9 _7;
  const intD.9 _11;
  size_typeD.36909 _19;
  boolD.2757 pretmp_23;
  boolD.2757 _24;
  boolD.2757 prephitmp_26;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#452ptD.0 => &this_1(D)->_in_occD.37144
  # DEBUG thisD.55760 => D#452ptD.0
  # DEBUG __xD.55761 => &inD.42672
  # DEBUG D#450ptD.0 => &D#452ptD.0->_M_tD.36318
  # DEBUG thisD.55762 => D#450ptD.0
  # PT = nonlocal 
  __y_3 = &MEM[(const struct _Rb_treeD.36317 *)this_1(D) + 160B]._M_implD.36395._M_headerD.36561;
  # DEBUG thisD.55750 => NULL
  # DEBUG __xD.55749 => __y_3
  # DEBUG D#451ptD.0 => &D#452ptD.0->_M_tD.36318
  # DEBUG thisD.55764 => D#451ptD.0
  # DEBUG __kD.55763 => &inD.42672
  # DEBUG thisD.55741 => D#451ptD.0
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_5 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_1(D) + 176B];
  # DEBUG D#134ptD.0 => D#451ptD.0
  # DEBUG thisD.55709 => D#134ptD.0
  # DEBUG D#441ptD.0 => D#451ptD.0
  # DEBUG __xD.55769 => NULL
  # DEBUG __yD.55768 => NULL
  # DEBUG __kD.55767 => &inD.42672
  # DEBUG __yD.55768 => __y_3
  # DEBUG __xD.55769 => __y_5
  if (__y_5 == 0B)
    goto <bb 11>;
  else
    goto <bb 5>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_14 = PHI <__y_9(8), __y_8(7)>
  # PT = nonlocal escaped 
  # __y_15 = PHI <__y_20(8), __y_21(7)>
  # DEBUG __yD.55768 => __y_15
  # DEBUG __xD.55769 => __y_14
  if (__y_14 == 0B)
    goto <bb 9>;
  else
    goto <bb 4>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_21 = PHI <__y_5(5), __y_14(4)>
  # PT = nonlocal escaped 
  # __y_20 = PHI <__y_3(5), __y_15(4)>
  # DEBUG __yD.55768 => __y_20
  # DEBUG __xD.55769 => __y_21
  # DEBUG __xD.55607 => __y_21
  # DEBUG __xD.55608 => __y_21
  # DEBUG thisD.55609 => __y_21
  # DEBUG D#438ptD.0 => &__y_21->_M_value_fieldD.44464
  # DEBUG __rD.55383 => D#438ptD.0
  # DEBUG __xD.55389 => D#438ptD.0
  # DEBUG thisD.55390 => D#127ptD.0
  # DEBUG D#439ptD.0 => &D#440ptD.0->_M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#439ptD.0
  # VUSE <.MEM_2(D)>
  _7 = MEM[(const intD.9 &)__y_21 + 32];
  # DEBUG D#96ptD.0 => D#438ptD.0
  # DEBUG D#97ptD.0 => &inD.42672
  # DEBUG thisD.55610 => D#95ptD.0
  # DEBUG __xD.55611 => D#96ptD.0
  # DEBUG __yD.55612 => D#97ptD.0
  if (_7 >= in_16(D))
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.55768 => __y_21
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_8 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_21 + 16B];
  # DEBUG D#177ptD.0 => __y_21
  # DEBUG __xD.55606 => D#177ptD.0
  # DEBUG __xD.55769 => NULL
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_9 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_21 + 24B];
  # DEBUG D#178ptD.0 => __y_21
  # DEBUG __xD.55605 => D#178ptD.0
  # DEBUG __xD.55769 => NULL
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_29 = PHI <__y_15(3)>
  # DEBUG thisD.55604 => NULL
  # DEBUG __xD.55603 => __y_29
  # DEBUG __j$_M_nodeD.55727 => __y_29
  # DEBUG thisD.55697 => D#451ptD.0
  # DEBUG thisD.55699 => NULL
  # DEBUG __xD.55698 => __y_3
  # DEBUG thisD.55694 => &__jD.55765
  # DEBUG __xD.55695 => NULL
  if (__y_3 == __y_29)
    goto <bb 11>;
  else
    goto <bb 10>;
;;    succ:       11 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.55719 => __y_29
  # DEBUG __xD.55720 => __y_29
  # DEBUG thisD.55721 => __y_29
  # DEBUG D#447ptD.0 => &__y_29->_M_value_fieldD.44464
  # DEBUG __rD.55383 => D#447ptD.0
  # DEBUG __xD.55625 => D#447ptD.0
  # DEBUG thisD.55626 => D#127ptD.0
  # DEBUG D#449ptD.0 => &MEM[(const struct _Rb_treeD.36317 *)D#451ptD.0]._M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#449ptD.0
  # DEBUG D#96ptD.0 => &inD.42672
  # VUSE <.MEM_2(D)>
  _11 = MEM[(const intD.9 &)__y_29 + 32];
  # DEBUG D#97ptD.0 => D#447ptD.0
  # DEBUG thisD.55717 => D#95ptD.0
  # DEBUG __xD.55716 => D#96ptD.0
  # DEBUG __yD.55715 => D#97ptD.0
  # DEBUG D#448ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.55727 => D#448ptD.0
  # DEBUG thisD.55735 => NULL
  # DEBUG __xD.55736 => NULL
  _24 = _11 <= in_16(D);
  _19 = (size_typeD.36909) _24;
  pretmp_23 = (boolD.2757) _19;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 10, next block 1, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1]
  # prephitmp_26 = PHI <pretmp_23(10), 0(9), 0(2)>
  # VUSE <.MEM_2(D)>
  return prephitmp_26;
;;    succ:       EXIT [100.0%] 

}


Creating dr for MEM[(struct _Rb_tree_node_base * *)this_1(D) + 176B]
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 176
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_1(D) + 176B]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
Applying pattern match.pd:397, generic-match.c:4039
Creating dr for MEM[(const int &)__y_29 + 32]
analyze_innermost: success.
	base_address: __y_29
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__y_29 + 32]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:22)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:14, LOOPS:1, CONDITIONS:4, STMTS:84)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_11 bb_5 })
  {
    <bb 2>:
    # DEBUG D#452 => &this_1(D)->_in_occ
    # DEBUG this => D#452
    # DEBUG __x => &in
    # DEBUG D#450 => &D#452->_M_t
    # DEBUG this => D#450
    __y_3 = &MEM[(const struct _Rb_tree *)this_1(D) + 160B]._M_impl._M_header;
    # DEBUG this => NULL
    # DEBUG __x => __y_3
    # DEBUG D#451 => &D#452->_M_t
    # DEBUG this => D#451
    # DEBUG __k => &in
    # DEBUG this => D#451
    # VUSE <.MEM_2(D)>
    __y_5 = MEM[(struct _Rb_tree_node_base * *)this_1(D) + 176B];
    # DEBUG D#134 => D#451
    # DEBUG this => D#134
    # DEBUG D#441 => D#451
    # DEBUG __x => NULL
    # DEBUG __y => NULL
    # DEBUG __k => &in
    # DEBUG __y => __y_3
    # DEBUG __x => __y_5
    if (__y_5 == 0B)
      goto <bb 11>;
    else
      goto <bb 5>;

  }
  bb_5 (preds = {bb_2 }, succs = {bb_6 })
  {
    <bb 5>:

  }
  bb_9 (preds = {bb_3 }, succs = {bb_12 })
  {
    <bb 9>:
    # __y_29 = PHI <__y_15(3)>

  }
  bb_12 (preds = {bb_9 }, succs = {bb_11 bb_10 })
  {
    <bb 12>:
    # DEBUG this => NULL
    # DEBUG __x => __y_29
    # DEBUG __j$_M_node => __y_29
    # DEBUG this => D#451
    # DEBUG this => NULL
    # DEBUG __x => __y_3
    # DEBUG this => &__j
    # DEBUG __x => NULL
    if (__y_3 == __y_29)
      goto <bb 11>;
    else
      goto <bb 10>;

  }
  bb_10 (preds = {bb_12 }, succs = {bb_11 })
  {
    <bb 10>:
    # DEBUG __x => __y_29
    # DEBUG __x => __y_29
    # DEBUG this => __y_29
    # DEBUG D#447 => &__y_29->_M_value_field
    # DEBUG __r => D#447
    # DEBUG __x => D#447
    # DEBUG this => D#127
    # DEBUG D#449 => &MEM[(const struct _Rb_tree *)D#451]._M_impl._M_key_compare
    # DEBUG D#95 => D#449
    # DEBUG D#96 => &in
    # VUSE <.MEM_2(D)>
    _11 = MEM[(const int &)__y_29 + 32];
    # DEBUG D#97 => D#447
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    # DEBUG D#448 => {CLOBBER}
    # DEBUG __j$_M_node => D#448
    # DEBUG this => NULL
    # DEBUG __x => NULL
    _24 = _11 <= in_16(D);
    _19 = (size_type) _24;
    pretmp_23 = (bool) _19;

  }
  bb_11 (preds = {bb_10 bb_12 bb_2 }, succs = {bb_13 })
  {
    <bb 11>:
    # prephitmp_26 = PHI <pretmp_23(10), 0(12), 0(2)>

  }
  bb_13 (preds = {bb_11 }, succs = {bb_1 })
  {
    <bb 13>:
    # VUSE <.MEM_2(D)>
    return prephitmp_26;

  }
  loop_1 (header = 6, latch = 4, niter = )
  {
    bb_3 (preds = {bb_8 bb_7 }, succs = {bb_9 bb_4 })
    {
      <bb 3>:
      # __y_14 = PHI <__y_9(8), __y_8(7)>
      # __y_15 = PHI <__y_20(8), __y_21(7)>
      # DEBUG __y => __y_15
      # DEBUG __x => __y_14
      if (__y_14 == 0B)
        goto <bb 9>;
      else
        goto <bb 4>;

    }
    bb_4 (preds = {bb_3 }, succs = {bb_6 })
    {
      <bb 4>:
      goto <bb 6>;

    }
    bb_6 (preds = {bb_5 bb_4 }, succs = {bb_7 bb_8 })
    {
      <bb 6>:
      # __y_21 = PHI <__y_5(5), __y_14(4)>
      # __y_20 = PHI <__y_3(5), __y_15(4)>
      # DEBUG __y => __y_20
      # DEBUG __x => __y_21
      # DEBUG __x => __y_21
      # DEBUG __x => __y_21
      # DEBUG this => __y_21
      # DEBUG D#438 => &__y_21->_M_value_field
      # DEBUG __r => D#438
      # DEBUG __x => D#438
      # DEBUG this => D#127
      # DEBUG D#439 => &D#440->_M_impl._M_key_compare
      # DEBUG D#95 => D#439
      # VUSE <.MEM_2(D)>
      _7 = MEM[(const int &)__y_21 + 32];
      # DEBUG D#96 => D#438
      # DEBUG D#97 => &in
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      if (_7 >= in_16(D))
        goto <bb 7>;
      else
        goto <bb 8>;

    }
    bb_7 (preds = {bb_6 }, succs = {bb_3 })
    {
      <bb 7>:
      # DEBUG __y => __y_21
      # VUSE <.MEM_2(D)>
      __y_8 = MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B];
      # DEBUG D#177 => __y_21
      # DEBUG __x => D#177
      # DEBUG __x => NULL
      goto <bb 3>;

    }
    bb_8 (preds = {bb_6 }, succs = {bb_3 })
    {
      <bb 8>:
      # VUSE <.MEM_2(D)>
      __y_9 = MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B];
      # DEBUG D#178 => __y_21
      # DEBUG __x => D#178
      # DEBUG __x => NULL
      goto <bb 3>;

    }
  }
}

Pass statistics:
----------------

virtual bool SparseAllocator::InputHasRequests(int) const (const struct SparseAllocatorD.36303 * const thisD.42674, intD.9 inD.42672)
{
  const struct _Rb_tree_nodeD.36321 * __yD.55768;
  const intD.9 _7;
  const intD.9 _11;
  size_typeD.36909 _19;
  boolD.2757 pretmp_23;
  boolD.2757 _24;
  boolD.2757 prephitmp_26;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#452ptD.0 => &this_1(D)->_in_occD.37144
  # DEBUG thisD.55760 => D#452ptD.0
  # DEBUG __xD.55761 => &inD.42672
  # DEBUG D#450ptD.0 => &D#452ptD.0->_M_tD.36318
  # DEBUG thisD.55762 => D#450ptD.0
  # PT = nonlocal 
  __y_3 = &MEM[(const struct _Rb_treeD.36317 *)this_1(D) + 160B]._M_implD.36395._M_headerD.36561;
  # DEBUG thisD.55750 => NULL
  # DEBUG __xD.55749 => __y_3
  # DEBUG D#451ptD.0 => &D#452ptD.0->_M_tD.36318
  # DEBUG thisD.55764 => D#451ptD.0
  # DEBUG __kD.55763 => &inD.42672
  # DEBUG thisD.55741 => D#451ptD.0
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_5 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_1(D) + 176B];
  # DEBUG D#134ptD.0 => D#451ptD.0
  # DEBUG thisD.55709 => D#134ptD.0
  # DEBUG D#441ptD.0 => D#451ptD.0
  # DEBUG __xD.55769 => NULL
  # DEBUG __yD.55768 => NULL
  # DEBUG __kD.55767 => &inD.42672
  # DEBUG __yD.55768 => __y_3
  # DEBUG __xD.55769 => __y_5
  if (__y_5 == 0B)
    goto <bb 11>;
  else
    goto <bb 5>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_14 = PHI <__y_9(8), __y_8(7)>
  # PT = nonlocal escaped 
  # __y_15 = PHI <__y_20(8), __y_21(7)>
  # DEBUG __yD.55768 => __y_15
  # DEBUG __xD.55769 => __y_14
  if (__y_14 == 0B)
    goto <bb 9>;
  else
    goto <bb 4>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_21 = PHI <__y_5(5), __y_14(4)>
  # PT = nonlocal escaped 
  # __y_20 = PHI <__y_3(5), __y_15(4)>
  # DEBUG __yD.55768 => __y_20
  # DEBUG __xD.55769 => __y_21
  # DEBUG __xD.55607 => __y_21
  # DEBUG __xD.55608 => __y_21
  # DEBUG thisD.55609 => __y_21
  # DEBUG D#438ptD.0 => &__y_21->_M_value_fieldD.44464
  # DEBUG __rD.55383 => D#438ptD.0
  # DEBUG __xD.55389 => D#438ptD.0
  # DEBUG thisD.55390 => D#127ptD.0
  # DEBUG D#439ptD.0 => &D#440ptD.0->_M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#439ptD.0
  # VUSE <.MEM_2(D)>
  _7 = MEM[(const intD.9 &)__y_21 + 32];
  # DEBUG D#96ptD.0 => D#438ptD.0
  # DEBUG D#97ptD.0 => &inD.42672
  # DEBUG thisD.55610 => D#95ptD.0
  # DEBUG __xD.55611 => D#96ptD.0
  # DEBUG __yD.55612 => D#97ptD.0
  if (_7 >= in_16(D))
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.55768 => __y_21
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_8 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_21 + 16B];
  # DEBUG D#177ptD.0 => __y_21
  # DEBUG __xD.55606 => D#177ptD.0
  # DEBUG __xD.55769 => NULL
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_9 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_21 + 24B];
  # DEBUG D#178ptD.0 => __y_21
  # DEBUG __xD.55605 => D#178ptD.0
  # DEBUG __xD.55769 => NULL
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 8, next block 12, flags: (NEW, REACHABLE)
;;    pred:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_29 = PHI <__y_15(3)>
;;    succ:       12 [100.0%]  (FALLTHRU)

;;   basic block 12, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 9, next block 10, flags: (NEW)
;;    pred:       9 [100.0%]  (FALLTHRU)
  # DEBUG thisD.55604 => NULL
  # DEBUG __xD.55603 => __y_29
  # DEBUG __j$_M_nodeD.55727 => __y_29
  # DEBUG thisD.55697 => D#451ptD.0
  # DEBUG thisD.55699 => NULL
  # DEBUG __xD.55698 => __y_3
  # DEBUG thisD.55694 => &__jD.55765
  # DEBUG __xD.55695 => NULL
  if (__y_3 == __y_29)
    goto <bb 11>;
  else
    goto <bb 10>;
;;    succ:       11 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 12, next block 11, flags: (NEW, REACHABLE)
;;    pred:       12 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.55719 => __y_29
  # DEBUG __xD.55720 => __y_29
  # DEBUG thisD.55721 => __y_29
  # DEBUG D#447ptD.0 => &__y_29->_M_value_fieldD.44464
  # DEBUG __rD.55383 => D#447ptD.0
  # DEBUG __xD.55625 => D#447ptD.0
  # DEBUG thisD.55626 => D#127ptD.0
  # DEBUG D#449ptD.0 => &MEM[(const struct _Rb_treeD.36317 *)D#451ptD.0]._M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#449ptD.0
  # DEBUG D#96ptD.0 => &inD.42672
  # VUSE <.MEM_2(D)>
  _11 = MEM[(const intD.9 &)__y_29 + 32];
  # DEBUG D#97ptD.0 => D#447ptD.0
  # DEBUG thisD.55717 => D#95ptD.0
  # DEBUG __xD.55716 => D#96ptD.0
  # DEBUG __yD.55715 => D#97ptD.0
  # DEBUG D#448ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.55727 => D#448ptD.0
  # DEBUG thisD.55735 => NULL
  # DEBUG __xD.55736 => NULL
  _24 = _11 <= in_16(D);
  _19 = (size_typeD.36909) _24;
  pretmp_23 = (boolD.2757) _19;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 10, next block 13, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1]
  # prephitmp_26 = PHI <pretmp_23(10), 0(12), 0(2)>
;;    succ:       13 [100.0%]  (FALLTHRU)

;;   basic block 13, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 11, next block 1, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_2(D)>
  return prephitmp_26;
;;    succ:       EXIT [100.0%] 

}



;; Function virtual bool SparseAllocator::OutputHasRequests(int) const (_ZNK15SparseAllocator17OutputHasRequestsEi, funcdef_no=1779, decl_uid=37927, cgraph_uid=449, symbol_order=450)


Pass statistics:
----------------

virtual bool SparseAllocator::OutputHasRequests(int) const (const struct SparseAllocatorD.36303 * const thisD.42678, intD.9 outD.42676)
{
  const struct _Rb_tree_nodeD.36321 * __yD.55781;
  const intD.9 _7;
  const intD.9 _11;
  size_typeD.36909 _19;
  boolD.2757 pretmp_23;
  boolD.2757 _24;
  boolD.2757 prephitmp_26;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#453ptD.0 => &this_1(D)->_out_occD.37145
  # DEBUG thisD.55773 => D#453ptD.0
  # DEBUG __xD.55774 => &outD.42676
  # DEBUG D#450ptD.0 => &D#453ptD.0->_M_tD.36318
  # DEBUG thisD.55775 => D#450ptD.0
  # PT = nonlocal 
  __y_3 = &MEM[(const struct _Rb_treeD.36317 *)this_1(D) + 208B]._M_implD.36395._M_headerD.36561;
  # DEBUG thisD.55750 => NULL
  # DEBUG __xD.55749 => __y_3
  # DEBUG D#451ptD.0 => &D#453ptD.0->_M_tD.36318
  # DEBUG thisD.55777 => D#451ptD.0
  # DEBUG __kD.55776 => &outD.42676
  # DEBUG thisD.55741 => D#451ptD.0
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_5 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_1(D) + 224B];
  # DEBUG D#134ptD.0 => D#451ptD.0
  # DEBUG thisD.55709 => D#134ptD.0
  # DEBUG D#441ptD.0 => D#451ptD.0
  # DEBUG __xD.55782 => NULL
  # DEBUG __yD.55781 => NULL
  # DEBUG __kD.55780 => &outD.42676
  # DEBUG __yD.55781 => __y_3
  # DEBUG __xD.55782 => __y_5
  if (__y_5 == 0B)
    goto <bb 11>;
  else
    goto <bb 5>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_14 = PHI <__y_9(8), __y_8(7)>
  # PT = nonlocal escaped 
  # __y_15 = PHI <__y_20(8), __y_21(7)>
  # DEBUG __yD.55781 => __y_15
  # DEBUG __xD.55782 => __y_14
  if (__y_14 == 0B)
    goto <bb 9>;
  else
    goto <bb 4>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_21 = PHI <__y_5(5), __y_14(4)>
  # PT = nonlocal escaped 
  # __y_20 = PHI <__y_3(5), __y_15(4)>
  # DEBUG __yD.55781 => __y_20
  # DEBUG __xD.55782 => __y_21
  # DEBUG __xD.55607 => __y_21
  # DEBUG __xD.55608 => __y_21
  # DEBUG thisD.55609 => __y_21
  # DEBUG D#438ptD.0 => &__y_21->_M_value_fieldD.44464
  # DEBUG __rD.55383 => D#438ptD.0
  # DEBUG __xD.55389 => D#438ptD.0
  # DEBUG thisD.55390 => D#127ptD.0
  # DEBUG D#439ptD.0 => &D#440ptD.0->_M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#439ptD.0
  # VUSE <.MEM_2(D)>
  _7 = MEM[(const intD.9 &)__y_21 + 32];
  # DEBUG D#96ptD.0 => D#438ptD.0
  # DEBUG D#97ptD.0 => &outD.42676
  # DEBUG thisD.55610 => D#95ptD.0
  # DEBUG __xD.55611 => D#96ptD.0
  # DEBUG __yD.55612 => D#97ptD.0
  if (_7 >= out_16(D))
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.55781 => __y_21
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_8 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_21 + 16B];
  # DEBUG D#177ptD.0 => __y_21
  # DEBUG __xD.55606 => D#177ptD.0
  # DEBUG __xD.55782 => NULL
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_9 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_21 + 24B];
  # DEBUG D#178ptD.0 => __y_21
  # DEBUG __xD.55605 => D#178ptD.0
  # DEBUG __xD.55782 => NULL
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_29 = PHI <__y_15(3)>
  # DEBUG thisD.55604 => NULL
  # DEBUG __xD.55603 => __y_29
  # DEBUG __j$_M_nodeD.55727 => __y_29
  # DEBUG thisD.55697 => D#451ptD.0
  # DEBUG thisD.55699 => NULL
  # DEBUG __xD.55698 => __y_3
  # DEBUG thisD.55694 => &__jD.55778
  # DEBUG __xD.55695 => NULL
  if (__y_3 == __y_29)
    goto <bb 11>;
  else
    goto <bb 10>;
;;    succ:       11 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.55719 => __y_29
  # DEBUG __xD.55720 => __y_29
  # DEBUG thisD.55721 => __y_29
  # DEBUG D#447ptD.0 => &__y_29->_M_value_fieldD.44464
  # DEBUG __rD.55383 => D#447ptD.0
  # DEBUG __xD.55625 => D#447ptD.0
  # DEBUG thisD.55626 => D#127ptD.0
  # DEBUG D#449ptD.0 => &MEM[(const struct _Rb_treeD.36317 *)D#451ptD.0]._M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#449ptD.0
  # DEBUG D#96ptD.0 => &outD.42676
  # VUSE <.MEM_2(D)>
  _11 = MEM[(const intD.9 &)__y_29 + 32];
  # DEBUG D#97ptD.0 => D#447ptD.0
  # DEBUG thisD.55717 => D#95ptD.0
  # DEBUG __xD.55716 => D#96ptD.0
  # DEBUG __yD.55715 => D#97ptD.0
  # DEBUG D#448ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.55727 => D#448ptD.0
  # DEBUG thisD.55735 => NULL
  # DEBUG __xD.55736 => NULL
  _24 = _11 <= out_16(D);
  _19 = (size_typeD.36909) _24;
  pretmp_23 = (boolD.2757) _19;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 10, next block 1, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1]
  # prephitmp_26 = PHI <pretmp_23(10), 0(9), 0(2)>
  # VUSE <.MEM_2(D)>
  return prephitmp_26;
;;    succ:       EXIT [100.0%] 

}


Creating dr for MEM[(struct _Rb_tree_node_base * *)this_1(D) + 224B]
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 224
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_1(D) + 224B]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
Applying pattern match.pd:397, generic-match.c:4039
Creating dr for MEM[(const int &)__y_29 + 32]
analyze_innermost: success.
	base_address: __y_29
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__y_29 + 32]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:22)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:14, LOOPS:1, CONDITIONS:4, STMTS:84)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_11 bb_5 })
  {
    <bb 2>:
    # DEBUG D#453 => &this_1(D)->_out_occ
    # DEBUG this => D#453
    # DEBUG __x => &out
    # DEBUG D#450 => &D#453->_M_t
    # DEBUG this => D#450
    __y_3 = &MEM[(const struct _Rb_tree *)this_1(D) + 208B]._M_impl._M_header;
    # DEBUG this => NULL
    # DEBUG __x => __y_3
    # DEBUG D#451 => &D#453->_M_t
    # DEBUG this => D#451
    # DEBUG __k => &out
    # DEBUG this => D#451
    # VUSE <.MEM_2(D)>
    __y_5 = MEM[(struct _Rb_tree_node_base * *)this_1(D) + 224B];
    # DEBUG D#134 => D#451
    # DEBUG this => D#134
    # DEBUG D#441 => D#451
    # DEBUG __x => NULL
    # DEBUG __y => NULL
    # DEBUG __k => &out
    # DEBUG __y => __y_3
    # DEBUG __x => __y_5
    if (__y_5 == 0B)
      goto <bb 11>;
    else
      goto <bb 5>;

  }
  bb_5 (preds = {bb_2 }, succs = {bb_6 })
  {
    <bb 5>:

  }
  bb_9 (preds = {bb_3 }, succs = {bb_12 })
  {
    <bb 9>:
    # __y_29 = PHI <__y_15(3)>

  }
  bb_12 (preds = {bb_9 }, succs = {bb_11 bb_10 })
  {
    <bb 12>:
    # DEBUG this => NULL
    # DEBUG __x => __y_29
    # DEBUG __j$_M_node => __y_29
    # DEBUG this => D#451
    # DEBUG this => NULL
    # DEBUG __x => __y_3
    # DEBUG this => &__j
    # DEBUG __x => NULL
    if (__y_3 == __y_29)
      goto <bb 11>;
    else
      goto <bb 10>;

  }
  bb_10 (preds = {bb_12 }, succs = {bb_11 })
  {
    <bb 10>:
    # DEBUG __x => __y_29
    # DEBUG __x => __y_29
    # DEBUG this => __y_29
    # DEBUG D#447 => &__y_29->_M_value_field
    # DEBUG __r => D#447
    # DEBUG __x => D#447
    # DEBUG this => D#127
    # DEBUG D#449 => &MEM[(const struct _Rb_tree *)D#451]._M_impl._M_key_compare
    # DEBUG D#95 => D#449
    # DEBUG D#96 => &out
    # VUSE <.MEM_2(D)>
    _11 = MEM[(const int &)__y_29 + 32];
    # DEBUG D#97 => D#447
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    # DEBUG D#448 => {CLOBBER}
    # DEBUG __j$_M_node => D#448
    # DEBUG this => NULL
    # DEBUG __x => NULL
    _24 = _11 <= out_16(D);
    _19 = (size_type) _24;
    pretmp_23 = (bool) _19;

  }
  bb_11 (preds = {bb_10 bb_12 bb_2 }, succs = {bb_13 })
  {
    <bb 11>:
    # prephitmp_26 = PHI <pretmp_23(10), 0(12), 0(2)>

  }
  bb_13 (preds = {bb_11 }, succs = {bb_1 })
  {
    <bb 13>:
    # VUSE <.MEM_2(D)>
    return prephitmp_26;

  }
  loop_1 (header = 6, latch = 4, niter = )
  {
    bb_3 (preds = {bb_8 bb_7 }, succs = {bb_9 bb_4 })
    {
      <bb 3>:
      # __y_14 = PHI <__y_9(8), __y_8(7)>
      # __y_15 = PHI <__y_20(8), __y_21(7)>
      # DEBUG __y => __y_15
      # DEBUG __x => __y_14
      if (__y_14 == 0B)
        goto <bb 9>;
      else
        goto <bb 4>;

    }
    bb_4 (preds = {bb_3 }, succs = {bb_6 })
    {
      <bb 4>:
      goto <bb 6>;

    }
    bb_6 (preds = {bb_5 bb_4 }, succs = {bb_7 bb_8 })
    {
      <bb 6>:
      # __y_21 = PHI <__y_5(5), __y_14(4)>
      # __y_20 = PHI <__y_3(5), __y_15(4)>
      # DEBUG __y => __y_20
      # DEBUG __x => __y_21
      # DEBUG __x => __y_21
      # DEBUG __x => __y_21
      # DEBUG this => __y_21
      # DEBUG D#438 => &__y_21->_M_value_field
      # DEBUG __r => D#438
      # DEBUG __x => D#438
      # DEBUG this => D#127
      # DEBUG D#439 => &D#440->_M_impl._M_key_compare
      # DEBUG D#95 => D#439
      # VUSE <.MEM_2(D)>
      _7 = MEM[(const int &)__y_21 + 32];
      # DEBUG D#96 => D#438
      # DEBUG D#97 => &out
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      if (_7 >= out_16(D))
        goto <bb 7>;
      else
        goto <bb 8>;

    }
    bb_7 (preds = {bb_6 }, succs = {bb_3 })
    {
      <bb 7>:
      # DEBUG __y => __y_21
      # VUSE <.MEM_2(D)>
      __y_8 = MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B];
      # DEBUG D#177 => __y_21
      # DEBUG __x => D#177
      # DEBUG __x => NULL
      goto <bb 3>;

    }
    bb_8 (preds = {bb_6 }, succs = {bb_3 })
    {
      <bb 8>:
      # VUSE <.MEM_2(D)>
      __y_9 = MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B];
      # DEBUG D#178 => __y_21
      # DEBUG __x => D#178
      # DEBUG __x => NULL
      goto <bb 3>;

    }
  }
}

Pass statistics:
----------------

virtual bool SparseAllocator::OutputHasRequests(int) const (const struct SparseAllocatorD.36303 * const thisD.42678, intD.9 outD.42676)
{
  const struct _Rb_tree_nodeD.36321 * __yD.55781;
  const intD.9 _7;
  const intD.9 _11;
  size_typeD.36909 _19;
  boolD.2757 pretmp_23;
  boolD.2757 _24;
  boolD.2757 prephitmp_26;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#453ptD.0 => &this_1(D)->_out_occD.37145
  # DEBUG thisD.55773 => D#453ptD.0
  # DEBUG __xD.55774 => &outD.42676
  # DEBUG D#450ptD.0 => &D#453ptD.0->_M_tD.36318
  # DEBUG thisD.55775 => D#450ptD.0
  # PT = nonlocal 
  __y_3 = &MEM[(const struct _Rb_treeD.36317 *)this_1(D) + 208B]._M_implD.36395._M_headerD.36561;
  # DEBUG thisD.55750 => NULL
  # DEBUG __xD.55749 => __y_3
  # DEBUG D#451ptD.0 => &D#453ptD.0->_M_tD.36318
  # DEBUG thisD.55777 => D#451ptD.0
  # DEBUG __kD.55776 => &outD.42676
  # DEBUG thisD.55741 => D#451ptD.0
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_5 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_1(D) + 224B];
  # DEBUG D#134ptD.0 => D#451ptD.0
  # DEBUG thisD.55709 => D#134ptD.0
  # DEBUG D#441ptD.0 => D#451ptD.0
  # DEBUG __xD.55782 => NULL
  # DEBUG __yD.55781 => NULL
  # DEBUG __kD.55780 => &outD.42676
  # DEBUG __yD.55781 => __y_3
  # DEBUG __xD.55782 => __y_5
  if (__y_5 == 0B)
    goto <bb 11>;
  else
    goto <bb 5>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_14 = PHI <__y_9(8), __y_8(7)>
  # PT = nonlocal escaped 
  # __y_15 = PHI <__y_20(8), __y_21(7)>
  # DEBUG __yD.55781 => __y_15
  # DEBUG __xD.55782 => __y_14
  if (__y_14 == 0B)
    goto <bb 9>;
  else
    goto <bb 4>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_21 = PHI <__y_5(5), __y_14(4)>
  # PT = nonlocal escaped 
  # __y_20 = PHI <__y_3(5), __y_15(4)>
  # DEBUG __yD.55781 => __y_20
  # DEBUG __xD.55782 => __y_21
  # DEBUG __xD.55607 => __y_21
  # DEBUG __xD.55608 => __y_21
  # DEBUG thisD.55609 => __y_21
  # DEBUG D#438ptD.0 => &__y_21->_M_value_fieldD.44464
  # DEBUG __rD.55383 => D#438ptD.0
  # DEBUG __xD.55389 => D#438ptD.0
  # DEBUG thisD.55390 => D#127ptD.0
  # DEBUG D#439ptD.0 => &D#440ptD.0->_M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#439ptD.0
  # VUSE <.MEM_2(D)>
  _7 = MEM[(const intD.9 &)__y_21 + 32];
  # DEBUG D#96ptD.0 => D#438ptD.0
  # DEBUG D#97ptD.0 => &outD.42676
  # DEBUG thisD.55610 => D#95ptD.0
  # DEBUG __xD.55611 => D#96ptD.0
  # DEBUG __yD.55612 => D#97ptD.0
  if (_7 >= out_16(D))
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.55781 => __y_21
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_8 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_21 + 16B];
  # DEBUG D#177ptD.0 => __y_21
  # DEBUG __xD.55606 => D#177ptD.0
  # DEBUG __xD.55782 => NULL
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_9 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_21 + 24B];
  # DEBUG D#178ptD.0 => __y_21
  # DEBUG __xD.55605 => D#178ptD.0
  # DEBUG __xD.55782 => NULL
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 8, next block 12, flags: (NEW, REACHABLE)
;;    pred:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_29 = PHI <__y_15(3)>
;;    succ:       12 [100.0%]  (FALLTHRU)

;;   basic block 12, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 9, next block 10, flags: (NEW)
;;    pred:       9 [100.0%]  (FALLTHRU)
  # DEBUG thisD.55604 => NULL
  # DEBUG __xD.55603 => __y_29
  # DEBUG __j$_M_nodeD.55727 => __y_29
  # DEBUG thisD.55697 => D#451ptD.0
  # DEBUG thisD.55699 => NULL
  # DEBUG __xD.55698 => __y_3
  # DEBUG thisD.55694 => &__jD.55778
  # DEBUG __xD.55695 => NULL
  if (__y_3 == __y_29)
    goto <bb 11>;
  else
    goto <bb 10>;
;;    succ:       11 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 12, next block 11, flags: (NEW, REACHABLE)
;;    pred:       12 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.55719 => __y_29
  # DEBUG __xD.55720 => __y_29
  # DEBUG thisD.55721 => __y_29
  # DEBUG D#447ptD.0 => &__y_29->_M_value_fieldD.44464
  # DEBUG __rD.55383 => D#447ptD.0
  # DEBUG __xD.55625 => D#447ptD.0
  # DEBUG thisD.55626 => D#127ptD.0
  # DEBUG D#449ptD.0 => &MEM[(const struct _Rb_treeD.36317 *)D#451ptD.0]._M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#449ptD.0
  # DEBUG D#96ptD.0 => &outD.42676
  # VUSE <.MEM_2(D)>
  _11 = MEM[(const intD.9 &)__y_29 + 32];
  # DEBUG D#97ptD.0 => D#447ptD.0
  # DEBUG thisD.55717 => D#95ptD.0
  # DEBUG __xD.55716 => D#96ptD.0
  # DEBUG __yD.55715 => D#97ptD.0
  # DEBUG D#448ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.55727 => D#448ptD.0
  # DEBUG thisD.55735 => NULL
  # DEBUG __xD.55736 => NULL
  _24 = _11 <= out_16(D);
  _19 = (size_typeD.36909) _24;
  pretmp_23 = (boolD.2757) _19;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 10, next block 13, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1]
  # prephitmp_26 = PHI <pretmp_23(10), 0(12), 0(2)>
;;    succ:       13 [100.0%]  (FALLTHRU)

;;   basic block 13, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 11, next block 1, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_2(D)>
  return prephitmp_26;
;;    succ:       EXIT [100.0%] 

}



;; Function virtual int SparseAllocator::NumInputRequests(int) const (_ZNK15SparseAllocator16NumInputRequestsEi, funcdef_no=1780, decl_uid=37936, cgraph_uid=450, symbol_order=451)


Pass statistics:
----------------

virtual int SparseAllocator::NumInputRequests(int) const (const struct SparseAllocatorD.36303 * const thisD.42682, intD.9 inD.42680)
{
  const struct _Rb_tree_nodeD.36321 * __yD.55794;
  const intD.9 _7;
  const intD.9 _11;
  size_typeD.36909 _19;
  intD.9 pretmp_23;
  boolD.2757 _24;
  intD.9 prephitmp_26;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#454ptD.0 => &this_1(D)->_in_occD.37144
  # DEBUG thisD.55786 => D#454ptD.0
  # DEBUG __xD.55787 => &inD.42680
  # DEBUG D#450ptD.0 => &D#454ptD.0->_M_tD.36318
  # DEBUG thisD.55788 => D#450ptD.0
  # PT = nonlocal 
  __y_3 = &MEM[(const struct _Rb_treeD.36317 *)this_1(D) + 160B]._M_implD.36395._M_headerD.36561;
  # DEBUG thisD.55750 => NULL
  # DEBUG __xD.55749 => __y_3
  # DEBUG D#451ptD.0 => &D#454ptD.0->_M_tD.36318
  # DEBUG thisD.55790 => D#451ptD.0
  # DEBUG __kD.55789 => &inD.42680
  # DEBUG thisD.55741 => D#451ptD.0
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_5 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_1(D) + 176B];
  # DEBUG D#134ptD.0 => D#451ptD.0
  # DEBUG thisD.55709 => D#134ptD.0
  # DEBUG D#441ptD.0 => D#451ptD.0
  # DEBUG __xD.55795 => NULL
  # DEBUG __yD.55794 => NULL
  # DEBUG __kD.55793 => &inD.42680
  # DEBUG __yD.55794 => __y_3
  # DEBUG __xD.55795 => __y_5
  if (__y_5 == 0B)
    goto <bb 11>;
  else
    goto <bb 5>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_14 = PHI <__y_9(8), __y_8(7)>
  # PT = nonlocal escaped 
  # __y_15 = PHI <__y_20(8), __y_21(7)>
  # DEBUG __yD.55794 => __y_15
  # DEBUG __xD.55795 => __y_14
  if (__y_14 == 0B)
    goto <bb 9>;
  else
    goto <bb 4>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_21 = PHI <__y_5(5), __y_14(4)>
  # PT = nonlocal escaped 
  # __y_20 = PHI <__y_3(5), __y_15(4)>
  # DEBUG __yD.55794 => __y_20
  # DEBUG __xD.55795 => __y_21
  # DEBUG __xD.55607 => __y_21
  # DEBUG __xD.55608 => __y_21
  # DEBUG thisD.55609 => __y_21
  # DEBUG D#438ptD.0 => &__y_21->_M_value_fieldD.44464
  # DEBUG __rD.55383 => D#438ptD.0
  # DEBUG __xD.55389 => D#438ptD.0
  # DEBUG thisD.55390 => D#127ptD.0
  # DEBUG D#439ptD.0 => &D#440ptD.0->_M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#439ptD.0
  # VUSE <.MEM_2(D)>
  _7 = MEM[(const intD.9 &)__y_21 + 32];
  # DEBUG D#96ptD.0 => D#438ptD.0
  # DEBUG D#97ptD.0 => &inD.42680
  # DEBUG thisD.55610 => D#95ptD.0
  # DEBUG __xD.55611 => D#96ptD.0
  # DEBUG __yD.55612 => D#97ptD.0
  if (_7 >= in_16(D))
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.55794 => __y_21
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_8 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_21 + 16B];
  # DEBUG D#177ptD.0 => __y_21
  # DEBUG __xD.55606 => D#177ptD.0
  # DEBUG __xD.55795 => NULL
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_9 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_21 + 24B];
  # DEBUG D#178ptD.0 => __y_21
  # DEBUG __xD.55605 => D#178ptD.0
  # DEBUG __xD.55795 => NULL
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_29 = PHI <__y_15(3)>
  # DEBUG thisD.55604 => NULL
  # DEBUG __xD.55603 => __y_29
  # DEBUG __j$_M_nodeD.55727 => __y_29
  # DEBUG thisD.55697 => D#451ptD.0
  # DEBUG thisD.55699 => NULL
  # DEBUG __xD.55698 => __y_3
  # DEBUG thisD.55694 => &__jD.55791
  # DEBUG __xD.55695 => NULL
  if (__y_3 == __y_29)
    goto <bb 11>;
  else
    goto <bb 10>;
;;    succ:       11 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.55719 => __y_29
  # DEBUG __xD.55720 => __y_29
  # DEBUG thisD.55721 => __y_29
  # DEBUG D#447ptD.0 => &__y_29->_M_value_fieldD.44464
  # DEBUG __rD.55383 => D#447ptD.0
  # DEBUG __xD.55625 => D#447ptD.0
  # DEBUG thisD.55626 => D#127ptD.0
  # DEBUG D#449ptD.0 => &MEM[(const struct _Rb_treeD.36317 *)D#451ptD.0]._M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#449ptD.0
  # DEBUG D#96ptD.0 => &inD.42680
  # VUSE <.MEM_2(D)>
  _11 = MEM[(const intD.9 &)__y_29 + 32];
  # DEBUG D#97ptD.0 => D#447ptD.0
  # DEBUG thisD.55717 => D#95ptD.0
  # DEBUG __xD.55716 => D#96ptD.0
  # DEBUG __yD.55715 => D#97ptD.0
  # DEBUG D#448ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.55727 => D#448ptD.0
  # DEBUG thisD.55735 => NULL
  # DEBUG __xD.55736 => NULL
  _24 = _11 <= in_16(D);
  _19 = (size_typeD.36909) _24;
  pretmp_23 = (intD.9) _19;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 10, next block 1, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1] NONZERO 1
  # prephitmp_26 = PHI <pretmp_23(10), 0(9), 0(2)>
  # VUSE <.MEM_2(D)>
  return prephitmp_26;
;;    succ:       EXIT [100.0%] 

}


Creating dr for MEM[(struct _Rb_tree_node_base * *)this_1(D) + 176B]
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 176
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_1(D) + 176B]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
Applying pattern match.pd:397, generic-match.c:4039
Creating dr for MEM[(const int &)__y_29 + 32]
analyze_innermost: success.
	base_address: __y_29
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__y_29 + 32]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:22)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:14, LOOPS:1, CONDITIONS:4, STMTS:84)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_11 bb_5 })
  {
    <bb 2>:
    # DEBUG D#454 => &this_1(D)->_in_occ
    # DEBUG this => D#454
    # DEBUG __x => &in
    # DEBUG D#450 => &D#454->_M_t
    # DEBUG this => D#450
    __y_3 = &MEM[(const struct _Rb_tree *)this_1(D) + 160B]._M_impl._M_header;
    # DEBUG this => NULL
    # DEBUG __x => __y_3
    # DEBUG D#451 => &D#454->_M_t
    # DEBUG this => D#451
    # DEBUG __k => &in
    # DEBUG this => D#451
    # VUSE <.MEM_2(D)>
    __y_5 = MEM[(struct _Rb_tree_node_base * *)this_1(D) + 176B];
    # DEBUG D#134 => D#451
    # DEBUG this => D#134
    # DEBUG D#441 => D#451
    # DEBUG __x => NULL
    # DEBUG __y => NULL
    # DEBUG __k => &in
    # DEBUG __y => __y_3
    # DEBUG __x => __y_5
    if (__y_5 == 0B)
      goto <bb 11>;
    else
      goto <bb 5>;

  }
  bb_5 (preds = {bb_2 }, succs = {bb_6 })
  {
    <bb 5>:

  }
  bb_9 (preds = {bb_3 }, succs = {bb_12 })
  {
    <bb 9>:
    # __y_29 = PHI <__y_15(3)>

  }
  bb_12 (preds = {bb_9 }, succs = {bb_11 bb_10 })
  {
    <bb 12>:
    # DEBUG this => NULL
    # DEBUG __x => __y_29
    # DEBUG __j$_M_node => __y_29
    # DEBUG this => D#451
    # DEBUG this => NULL
    # DEBUG __x => __y_3
    # DEBUG this => &__j
    # DEBUG __x => NULL
    if (__y_3 == __y_29)
      goto <bb 11>;
    else
      goto <bb 10>;

  }
  bb_10 (preds = {bb_12 }, succs = {bb_11 })
  {
    <bb 10>:
    # DEBUG __x => __y_29
    # DEBUG __x => __y_29
    # DEBUG this => __y_29
    # DEBUG D#447 => &__y_29->_M_value_field
    # DEBUG __r => D#447
    # DEBUG __x => D#447
    # DEBUG this => D#127
    # DEBUG D#449 => &MEM[(const struct _Rb_tree *)D#451]._M_impl._M_key_compare
    # DEBUG D#95 => D#449
    # DEBUG D#96 => &in
    # VUSE <.MEM_2(D)>
    _11 = MEM[(const int &)__y_29 + 32];
    # DEBUG D#97 => D#447
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    # DEBUG D#448 => {CLOBBER}
    # DEBUG __j$_M_node => D#448
    # DEBUG this => NULL
    # DEBUG __x => NULL
    _24 = _11 <= in_16(D);
    _19 = (size_type) _24;
    pretmp_23 = (int) _19;

  }
  bb_11 (preds = {bb_10 bb_12 bb_2 }, succs = {bb_13 })
  {
    <bb 11>:
    # prephitmp_26 = PHI <pretmp_23(10), 0(12), 0(2)>

  }
  bb_13 (preds = {bb_11 }, succs = {bb_1 })
  {
    <bb 13>:
    # VUSE <.MEM_2(D)>
    return prephitmp_26;

  }
  loop_1 (header = 6, latch = 4, niter = )
  {
    bb_3 (preds = {bb_8 bb_7 }, succs = {bb_9 bb_4 })
    {
      <bb 3>:
      # __y_14 = PHI <__y_9(8), __y_8(7)>
      # __y_15 = PHI <__y_20(8), __y_21(7)>
      # DEBUG __y => __y_15
      # DEBUG __x => __y_14
      if (__y_14 == 0B)
        goto <bb 9>;
      else
        goto <bb 4>;

    }
    bb_4 (preds = {bb_3 }, succs = {bb_6 })
    {
      <bb 4>:
      goto <bb 6>;

    }
    bb_6 (preds = {bb_5 bb_4 }, succs = {bb_7 bb_8 })
    {
      <bb 6>:
      # __y_21 = PHI <__y_5(5), __y_14(4)>
      # __y_20 = PHI <__y_3(5), __y_15(4)>
      # DEBUG __y => __y_20
      # DEBUG __x => __y_21
      # DEBUG __x => __y_21
      # DEBUG __x => __y_21
      # DEBUG this => __y_21
      # DEBUG D#438 => &__y_21->_M_value_field
      # DEBUG __r => D#438
      # DEBUG __x => D#438
      # DEBUG this => D#127
      # DEBUG D#439 => &D#440->_M_impl._M_key_compare
      # DEBUG D#95 => D#439
      # VUSE <.MEM_2(D)>
      _7 = MEM[(const int &)__y_21 + 32];
      # DEBUG D#96 => D#438
      # DEBUG D#97 => &in
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      if (_7 >= in_16(D))
        goto <bb 7>;
      else
        goto <bb 8>;

    }
    bb_7 (preds = {bb_6 }, succs = {bb_3 })
    {
      <bb 7>:
      # DEBUG __y => __y_21
      # VUSE <.MEM_2(D)>
      __y_8 = MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B];
      # DEBUG D#177 => __y_21
      # DEBUG __x => D#177
      # DEBUG __x => NULL
      goto <bb 3>;

    }
    bb_8 (preds = {bb_6 }, succs = {bb_3 })
    {
      <bb 8>:
      # VUSE <.MEM_2(D)>
      __y_9 = MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B];
      # DEBUG D#178 => __y_21
      # DEBUG __x => D#178
      # DEBUG __x => NULL
      goto <bb 3>;

    }
  }
}

Pass statistics:
----------------

virtual int SparseAllocator::NumInputRequests(int) const (const struct SparseAllocatorD.36303 * const thisD.42682, intD.9 inD.42680)
{
  const struct _Rb_tree_nodeD.36321 * __yD.55794;
  const intD.9 _7;
  const intD.9 _11;
  size_typeD.36909 _19;
  intD.9 pretmp_23;
  boolD.2757 _24;
  intD.9 prephitmp_26;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#454ptD.0 => &this_1(D)->_in_occD.37144
  # DEBUG thisD.55786 => D#454ptD.0
  # DEBUG __xD.55787 => &inD.42680
  # DEBUG D#450ptD.0 => &D#454ptD.0->_M_tD.36318
  # DEBUG thisD.55788 => D#450ptD.0
  # PT = nonlocal 
  __y_3 = &MEM[(const struct _Rb_treeD.36317 *)this_1(D) + 160B]._M_implD.36395._M_headerD.36561;
  # DEBUG thisD.55750 => NULL
  # DEBUG __xD.55749 => __y_3
  # DEBUG D#451ptD.0 => &D#454ptD.0->_M_tD.36318
  # DEBUG thisD.55790 => D#451ptD.0
  # DEBUG __kD.55789 => &inD.42680
  # DEBUG thisD.55741 => D#451ptD.0
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_5 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_1(D) + 176B];
  # DEBUG D#134ptD.0 => D#451ptD.0
  # DEBUG thisD.55709 => D#134ptD.0
  # DEBUG D#441ptD.0 => D#451ptD.0
  # DEBUG __xD.55795 => NULL
  # DEBUG __yD.55794 => NULL
  # DEBUG __kD.55793 => &inD.42680
  # DEBUG __yD.55794 => __y_3
  # DEBUG __xD.55795 => __y_5
  if (__y_5 == 0B)
    goto <bb 11>;
  else
    goto <bb 5>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_14 = PHI <__y_9(8), __y_8(7)>
  # PT = nonlocal escaped 
  # __y_15 = PHI <__y_20(8), __y_21(7)>
  # DEBUG __yD.55794 => __y_15
  # DEBUG __xD.55795 => __y_14
  if (__y_14 == 0B)
    goto <bb 9>;
  else
    goto <bb 4>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_21 = PHI <__y_5(5), __y_14(4)>
  # PT = nonlocal escaped 
  # __y_20 = PHI <__y_3(5), __y_15(4)>
  # DEBUG __yD.55794 => __y_20
  # DEBUG __xD.55795 => __y_21
  # DEBUG __xD.55607 => __y_21
  # DEBUG __xD.55608 => __y_21
  # DEBUG thisD.55609 => __y_21
  # DEBUG D#438ptD.0 => &__y_21->_M_value_fieldD.44464
  # DEBUG __rD.55383 => D#438ptD.0
  # DEBUG __xD.55389 => D#438ptD.0
  # DEBUG thisD.55390 => D#127ptD.0
  # DEBUG D#439ptD.0 => &D#440ptD.0->_M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#439ptD.0
  # VUSE <.MEM_2(D)>
  _7 = MEM[(const intD.9 &)__y_21 + 32];
  # DEBUG D#96ptD.0 => D#438ptD.0
  # DEBUG D#97ptD.0 => &inD.42680
  # DEBUG thisD.55610 => D#95ptD.0
  # DEBUG __xD.55611 => D#96ptD.0
  # DEBUG __yD.55612 => D#97ptD.0
  if (_7 >= in_16(D))
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.55794 => __y_21
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_8 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_21 + 16B];
  # DEBUG D#177ptD.0 => __y_21
  # DEBUG __xD.55606 => D#177ptD.0
  # DEBUG __xD.55795 => NULL
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_9 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_21 + 24B];
  # DEBUG D#178ptD.0 => __y_21
  # DEBUG __xD.55605 => D#178ptD.0
  # DEBUG __xD.55795 => NULL
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 8, next block 12, flags: (NEW, REACHABLE)
;;    pred:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_29 = PHI <__y_15(3)>
;;    succ:       12 [100.0%]  (FALLTHRU)

;;   basic block 12, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 9, next block 10, flags: (NEW)
;;    pred:       9 [100.0%]  (FALLTHRU)
  # DEBUG thisD.55604 => NULL
  # DEBUG __xD.55603 => __y_29
  # DEBUG __j$_M_nodeD.55727 => __y_29
  # DEBUG thisD.55697 => D#451ptD.0
  # DEBUG thisD.55699 => NULL
  # DEBUG __xD.55698 => __y_3
  # DEBUG thisD.55694 => &__jD.55791
  # DEBUG __xD.55695 => NULL
  if (__y_3 == __y_29)
    goto <bb 11>;
  else
    goto <bb 10>;
;;    succ:       11 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 12, next block 11, flags: (NEW, REACHABLE)
;;    pred:       12 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.55719 => __y_29
  # DEBUG __xD.55720 => __y_29
  # DEBUG thisD.55721 => __y_29
  # DEBUG D#447ptD.0 => &__y_29->_M_value_fieldD.44464
  # DEBUG __rD.55383 => D#447ptD.0
  # DEBUG __xD.55625 => D#447ptD.0
  # DEBUG thisD.55626 => D#127ptD.0
  # DEBUG D#449ptD.0 => &MEM[(const struct _Rb_treeD.36317 *)D#451ptD.0]._M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#449ptD.0
  # DEBUG D#96ptD.0 => &inD.42680
  # VUSE <.MEM_2(D)>
  _11 = MEM[(const intD.9 &)__y_29 + 32];
  # DEBUG D#97ptD.0 => D#447ptD.0
  # DEBUG thisD.55717 => D#95ptD.0
  # DEBUG __xD.55716 => D#96ptD.0
  # DEBUG __yD.55715 => D#97ptD.0
  # DEBUG D#448ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.55727 => D#448ptD.0
  # DEBUG thisD.55735 => NULL
  # DEBUG __xD.55736 => NULL
  _24 = _11 <= in_16(D);
  _19 = (size_typeD.36909) _24;
  pretmp_23 = (intD.9) _19;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 10, next block 13, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1] NONZERO 1
  # prephitmp_26 = PHI <pretmp_23(10), 0(12), 0(2)>
;;    succ:       13 [100.0%]  (FALLTHRU)

;;   basic block 13, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 11, next block 1, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_2(D)>
  return prephitmp_26;
;;    succ:       EXIT [100.0%] 

}



;; Function virtual int SparseAllocator::NumOutputRequests(int) const (_ZNK15SparseAllocator17NumOutputRequestsEi, funcdef_no=1781, decl_uid=37933, cgraph_uid=451, symbol_order=452)


Pass statistics:
----------------

virtual int SparseAllocator::NumOutputRequests(int) const (const struct SparseAllocatorD.36303 * const thisD.42686, intD.9 outD.42684)
{
  const struct _Rb_tree_nodeD.36321 * __yD.55807;
  const intD.9 _7;
  const intD.9 _11;
  size_typeD.36909 _19;
  intD.9 pretmp_23;
  boolD.2757 _24;
  intD.9 prephitmp_26;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#455ptD.0 => &this_1(D)->_out_occD.37145
  # DEBUG thisD.55799 => D#455ptD.0
  # DEBUG __xD.55800 => &outD.42684
  # DEBUG D#450ptD.0 => &D#455ptD.0->_M_tD.36318
  # DEBUG thisD.55801 => D#450ptD.0
  # PT = nonlocal 
  __y_3 = &MEM[(const struct _Rb_treeD.36317 *)this_1(D) + 208B]._M_implD.36395._M_headerD.36561;
  # DEBUG thisD.55750 => NULL
  # DEBUG __xD.55749 => __y_3
  # DEBUG D#451ptD.0 => &D#455ptD.0->_M_tD.36318
  # DEBUG thisD.55803 => D#451ptD.0
  # DEBUG __kD.55802 => &outD.42684
  # DEBUG thisD.55741 => D#451ptD.0
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_5 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_1(D) + 224B];
  # DEBUG D#134ptD.0 => D#451ptD.0
  # DEBUG thisD.55709 => D#134ptD.0
  # DEBUG D#441ptD.0 => D#451ptD.0
  # DEBUG __xD.55808 => NULL
  # DEBUG __yD.55807 => NULL
  # DEBUG __kD.55806 => &outD.42684
  # DEBUG __yD.55807 => __y_3
  # DEBUG __xD.55808 => __y_5
  if (__y_5 == 0B)
    goto <bb 11>;
  else
    goto <bb 5>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_14 = PHI <__y_9(8), __y_8(7)>
  # PT = nonlocal escaped 
  # __y_15 = PHI <__y_20(8), __y_21(7)>
  # DEBUG __yD.55807 => __y_15
  # DEBUG __xD.55808 => __y_14
  if (__y_14 == 0B)
    goto <bb 9>;
  else
    goto <bb 4>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_21 = PHI <__y_5(5), __y_14(4)>
  # PT = nonlocal escaped 
  # __y_20 = PHI <__y_3(5), __y_15(4)>
  # DEBUG __yD.55807 => __y_20
  # DEBUG __xD.55808 => __y_21
  # DEBUG __xD.55607 => __y_21
  # DEBUG __xD.55608 => __y_21
  # DEBUG thisD.55609 => __y_21
  # DEBUG D#438ptD.0 => &__y_21->_M_value_fieldD.44464
  # DEBUG __rD.55383 => D#438ptD.0
  # DEBUG __xD.55389 => D#438ptD.0
  # DEBUG thisD.55390 => D#127ptD.0
  # DEBUG D#439ptD.0 => &D#440ptD.0->_M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#439ptD.0
  # VUSE <.MEM_2(D)>
  _7 = MEM[(const intD.9 &)__y_21 + 32];
  # DEBUG D#96ptD.0 => D#438ptD.0
  # DEBUG D#97ptD.0 => &outD.42684
  # DEBUG thisD.55610 => D#95ptD.0
  # DEBUG __xD.55611 => D#96ptD.0
  # DEBUG __yD.55612 => D#97ptD.0
  if (_7 >= out_16(D))
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.55807 => __y_21
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_8 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_21 + 16B];
  # DEBUG D#177ptD.0 => __y_21
  # DEBUG __xD.55606 => D#177ptD.0
  # DEBUG __xD.55808 => NULL
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_9 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_21 + 24B];
  # DEBUG D#178ptD.0 => __y_21
  # DEBUG __xD.55605 => D#178ptD.0
  # DEBUG __xD.55808 => NULL
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_29 = PHI <__y_15(3)>
  # DEBUG thisD.55604 => NULL
  # DEBUG __xD.55603 => __y_29
  # DEBUG __j$_M_nodeD.55727 => __y_29
  # DEBUG thisD.55697 => D#451ptD.0
  # DEBUG thisD.55699 => NULL
  # DEBUG __xD.55698 => __y_3
  # DEBUG thisD.55694 => &__jD.55804
  # DEBUG __xD.55695 => NULL
  if (__y_3 == __y_29)
    goto <bb 11>;
  else
    goto <bb 10>;
;;    succ:       11 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.55719 => __y_29
  # DEBUG __xD.55720 => __y_29
  # DEBUG thisD.55721 => __y_29
  # DEBUG D#447ptD.0 => &__y_29->_M_value_fieldD.44464
  # DEBUG __rD.55383 => D#447ptD.0
  # DEBUG __xD.55625 => D#447ptD.0
  # DEBUG thisD.55626 => D#127ptD.0
  # DEBUG D#449ptD.0 => &MEM[(const struct _Rb_treeD.36317 *)D#451ptD.0]._M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#449ptD.0
  # DEBUG D#96ptD.0 => &outD.42684
  # VUSE <.MEM_2(D)>
  _11 = MEM[(const intD.9 &)__y_29 + 32];
  # DEBUG D#97ptD.0 => D#447ptD.0
  # DEBUG thisD.55717 => D#95ptD.0
  # DEBUG __xD.55716 => D#96ptD.0
  # DEBUG __yD.55715 => D#97ptD.0
  # DEBUG D#448ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.55727 => D#448ptD.0
  # DEBUG thisD.55735 => NULL
  # DEBUG __xD.55736 => NULL
  _24 = _11 <= out_16(D);
  _19 = (size_typeD.36909) _24;
  pretmp_23 = (intD.9) _19;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 10, next block 1, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1] NONZERO 1
  # prephitmp_26 = PHI <pretmp_23(10), 0(9), 0(2)>
  # VUSE <.MEM_2(D)>
  return prephitmp_26;
;;    succ:       EXIT [100.0%] 

}


Creating dr for MEM[(struct _Rb_tree_node_base * *)this_1(D) + 224B]
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 224
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_1(D) + 224B]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(const int &)__y_21 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_21 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B]
Applying pattern match.pd:397, generic-match.c:4039
Creating dr for MEM[(const int &)__y_29 + 32]
analyze_innermost: success.
	base_address: __y_29
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__y_29 + 32]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:22)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:14, LOOPS:1, CONDITIONS:4, STMTS:84)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_11 bb_5 })
  {
    <bb 2>:
    # DEBUG D#455 => &this_1(D)->_out_occ
    # DEBUG this => D#455
    # DEBUG __x => &out
    # DEBUG D#450 => &D#455->_M_t
    # DEBUG this => D#450
    __y_3 = &MEM[(const struct _Rb_tree *)this_1(D) + 208B]._M_impl._M_header;
    # DEBUG this => NULL
    # DEBUG __x => __y_3
    # DEBUG D#451 => &D#455->_M_t
    # DEBUG this => D#451
    # DEBUG __k => &out
    # DEBUG this => D#451
    # VUSE <.MEM_2(D)>
    __y_5 = MEM[(struct _Rb_tree_node_base * *)this_1(D) + 224B];
    # DEBUG D#134 => D#451
    # DEBUG this => D#134
    # DEBUG D#441 => D#451
    # DEBUG __x => NULL
    # DEBUG __y => NULL
    # DEBUG __k => &out
    # DEBUG __y => __y_3
    # DEBUG __x => __y_5
    if (__y_5 == 0B)
      goto <bb 11>;
    else
      goto <bb 5>;

  }
  bb_5 (preds = {bb_2 }, succs = {bb_6 })
  {
    <bb 5>:

  }
  bb_9 (preds = {bb_3 }, succs = {bb_12 })
  {
    <bb 9>:
    # __y_29 = PHI <__y_15(3)>

  }
  bb_12 (preds = {bb_9 }, succs = {bb_11 bb_10 })
  {
    <bb 12>:
    # DEBUG this => NULL
    # DEBUG __x => __y_29
    # DEBUG __j$_M_node => __y_29
    # DEBUG this => D#451
    # DEBUG this => NULL
    # DEBUG __x => __y_3
    # DEBUG this => &__j
    # DEBUG __x => NULL
    if (__y_3 == __y_29)
      goto <bb 11>;
    else
      goto <bb 10>;

  }
  bb_10 (preds = {bb_12 }, succs = {bb_11 })
  {
    <bb 10>:
    # DEBUG __x => __y_29
    # DEBUG __x => __y_29
    # DEBUG this => __y_29
    # DEBUG D#447 => &__y_29->_M_value_field
    # DEBUG __r => D#447
    # DEBUG __x => D#447
    # DEBUG this => D#127
    # DEBUG D#449 => &MEM[(const struct _Rb_tree *)D#451]._M_impl._M_key_compare
    # DEBUG D#95 => D#449
    # DEBUG D#96 => &out
    # VUSE <.MEM_2(D)>
    _11 = MEM[(const int &)__y_29 + 32];
    # DEBUG D#97 => D#447
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    # DEBUG D#448 => {CLOBBER}
    # DEBUG __j$_M_node => D#448
    # DEBUG this => NULL
    # DEBUG __x => NULL
    _24 = _11 <= out_16(D);
    _19 = (size_type) _24;
    pretmp_23 = (int) _19;

  }
  bb_11 (preds = {bb_10 bb_12 bb_2 }, succs = {bb_13 })
  {
    <bb 11>:
    # prephitmp_26 = PHI <pretmp_23(10), 0(12), 0(2)>

  }
  bb_13 (preds = {bb_11 }, succs = {bb_1 })
  {
    <bb 13>:
    # VUSE <.MEM_2(D)>
    return prephitmp_26;

  }
  loop_1 (header = 6, latch = 4, niter = )
  {
    bb_3 (preds = {bb_8 bb_7 }, succs = {bb_9 bb_4 })
    {
      <bb 3>:
      # __y_14 = PHI <__y_9(8), __y_8(7)>
      # __y_15 = PHI <__y_20(8), __y_21(7)>
      # DEBUG __y => __y_15
      # DEBUG __x => __y_14
      if (__y_14 == 0B)
        goto <bb 9>;
      else
        goto <bb 4>;

    }
    bb_4 (preds = {bb_3 }, succs = {bb_6 })
    {
      <bb 4>:
      goto <bb 6>;

    }
    bb_6 (preds = {bb_5 bb_4 }, succs = {bb_7 bb_8 })
    {
      <bb 6>:
      # __y_21 = PHI <__y_5(5), __y_14(4)>
      # __y_20 = PHI <__y_3(5), __y_15(4)>
      # DEBUG __y => __y_20
      # DEBUG __x => __y_21
      # DEBUG __x => __y_21
      # DEBUG __x => __y_21
      # DEBUG this => __y_21
      # DEBUG D#438 => &__y_21->_M_value_field
      # DEBUG __r => D#438
      # DEBUG __x => D#438
      # DEBUG this => D#127
      # DEBUG D#439 => &D#440->_M_impl._M_key_compare
      # DEBUG D#95 => D#439
      # VUSE <.MEM_2(D)>
      _7 = MEM[(const int &)__y_21 + 32];
      # DEBUG D#96 => D#438
      # DEBUG D#97 => &out
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      if (_7 >= out_16(D))
        goto <bb 7>;
      else
        goto <bb 8>;

    }
    bb_7 (preds = {bb_6 }, succs = {bb_3 })
    {
      <bb 7>:
      # DEBUG __y => __y_21
      # VUSE <.MEM_2(D)>
      __y_8 = MEM[(struct _Rb_tree_node_base * *)__y_21 + 16B];
      # DEBUG D#177 => __y_21
      # DEBUG __x => D#177
      # DEBUG __x => NULL
      goto <bb 3>;

    }
    bb_8 (preds = {bb_6 }, succs = {bb_3 })
    {
      <bb 8>:
      # VUSE <.MEM_2(D)>
      __y_9 = MEM[(struct _Rb_tree_node_base * *)__y_21 + 24B];
      # DEBUG D#178 => __y_21
      # DEBUG __x => D#178
      # DEBUG __x => NULL
      goto <bb 3>;

    }
  }
}

Pass statistics:
----------------

virtual int SparseAllocator::NumOutputRequests(int) const (const struct SparseAllocatorD.36303 * const thisD.42686, intD.9 outD.42684)
{
  const struct _Rb_tree_nodeD.36321 * __yD.55807;
  const intD.9 _7;
  const intD.9 _11;
  size_typeD.36909 _19;
  intD.9 pretmp_23;
  boolD.2757 _24;
  intD.9 prephitmp_26;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#455ptD.0 => &this_1(D)->_out_occD.37145
  # DEBUG thisD.55799 => D#455ptD.0
  # DEBUG __xD.55800 => &outD.42684
  # DEBUG D#450ptD.0 => &D#455ptD.0->_M_tD.36318
  # DEBUG thisD.55801 => D#450ptD.0
  # PT = nonlocal 
  __y_3 = &MEM[(const struct _Rb_treeD.36317 *)this_1(D) + 208B]._M_implD.36395._M_headerD.36561;
  # DEBUG thisD.55750 => NULL
  # DEBUG __xD.55749 => __y_3
  # DEBUG D#451ptD.0 => &D#455ptD.0->_M_tD.36318
  # DEBUG thisD.55803 => D#451ptD.0
  # DEBUG __kD.55802 => &outD.42684
  # DEBUG thisD.55741 => D#451ptD.0
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_5 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_1(D) + 224B];
  # DEBUG D#134ptD.0 => D#451ptD.0
  # DEBUG thisD.55709 => D#134ptD.0
  # DEBUG D#441ptD.0 => D#451ptD.0
  # DEBUG __xD.55808 => NULL
  # DEBUG __yD.55807 => NULL
  # DEBUG __kD.55806 => &outD.42684
  # DEBUG __yD.55807 => __y_3
  # DEBUG __xD.55808 => __y_5
  if (__y_5 == 0B)
    goto <bb 11>;
  else
    goto <bb 5>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_14 = PHI <__y_9(8), __y_8(7)>
  # PT = nonlocal escaped 
  # __y_15 = PHI <__y_20(8), __y_21(7)>
  # DEBUG __yD.55807 => __y_15
  # DEBUG __xD.55808 => __y_14
  if (__y_14 == 0B)
    goto <bb 9>;
  else
    goto <bb 4>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_21 = PHI <__y_5(5), __y_14(4)>
  # PT = nonlocal escaped 
  # __y_20 = PHI <__y_3(5), __y_15(4)>
  # DEBUG __yD.55807 => __y_20
  # DEBUG __xD.55808 => __y_21
  # DEBUG __xD.55607 => __y_21
  # DEBUG __xD.55608 => __y_21
  # DEBUG thisD.55609 => __y_21
  # DEBUG D#438ptD.0 => &__y_21->_M_value_fieldD.44464
  # DEBUG __rD.55383 => D#438ptD.0
  # DEBUG __xD.55389 => D#438ptD.0
  # DEBUG thisD.55390 => D#127ptD.0
  # DEBUG D#439ptD.0 => &D#440ptD.0->_M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#439ptD.0
  # VUSE <.MEM_2(D)>
  _7 = MEM[(const intD.9 &)__y_21 + 32];
  # DEBUG D#96ptD.0 => D#438ptD.0
  # DEBUG D#97ptD.0 => &outD.42684
  # DEBUG thisD.55610 => D#95ptD.0
  # DEBUG __xD.55611 => D#96ptD.0
  # DEBUG __yD.55612 => D#97ptD.0
  if (_7 >= out_16(D))
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.55807 => __y_21
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_8 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_21 + 16B];
  # DEBUG D#177ptD.0 => __y_21
  # DEBUG __xD.55606 => D#177ptD.0
  # DEBUG __xD.55808 => NULL
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_9 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_21 + 24B];
  # DEBUG D#178ptD.0 => __y_21
  # DEBUG __xD.55605 => D#178ptD.0
  # DEBUG __xD.55808 => NULL
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 8, next block 12, flags: (NEW, REACHABLE)
;;    pred:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_29 = PHI <__y_15(3)>
;;    succ:       12 [100.0%]  (FALLTHRU)

;;   basic block 12, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 9, next block 10, flags: (NEW)
;;    pred:       9 [100.0%]  (FALLTHRU)
  # DEBUG thisD.55604 => NULL
  # DEBUG __xD.55603 => __y_29
  # DEBUG __j$_M_nodeD.55727 => __y_29
  # DEBUG thisD.55697 => D#451ptD.0
  # DEBUG thisD.55699 => NULL
  # DEBUG __xD.55698 => __y_3
  # DEBUG thisD.55694 => &__jD.55804
  # DEBUG __xD.55695 => NULL
  if (__y_3 == __y_29)
    goto <bb 11>;
  else
    goto <bb 10>;
;;    succ:       11 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 12, next block 11, flags: (NEW, REACHABLE)
;;    pred:       12 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.55719 => __y_29
  # DEBUG __xD.55720 => __y_29
  # DEBUG thisD.55721 => __y_29
  # DEBUG D#447ptD.0 => &__y_29->_M_value_fieldD.44464
  # DEBUG __rD.55383 => D#447ptD.0
  # DEBUG __xD.55625 => D#447ptD.0
  # DEBUG thisD.55626 => D#127ptD.0
  # DEBUG D#449ptD.0 => &MEM[(const struct _Rb_treeD.36317 *)D#451ptD.0]._M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#449ptD.0
  # DEBUG D#96ptD.0 => &outD.42684
  # VUSE <.MEM_2(D)>
  _11 = MEM[(const intD.9 &)__y_29 + 32];
  # DEBUG D#97ptD.0 => D#447ptD.0
  # DEBUG thisD.55717 => D#95ptD.0
  # DEBUG __xD.55716 => D#96ptD.0
  # DEBUG __yD.55715 => D#97ptD.0
  # DEBUG D#448ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.55727 => D#448ptD.0
  # DEBUG thisD.55735 => NULL
  # DEBUG __xD.55736 => NULL
  _24 = _11 <= out_16(D);
  _19 = (size_typeD.36909) _24;
  pretmp_23 = (intD.9) _19;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 10, next block 13, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1] NONZERO 1
  # prephitmp_26 = PHI <pretmp_23(10), 0(12), 0(2)>
;;    succ:       13 [100.0%]  (FALLTHRU)

;;   basic block 13, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 11, next block 1, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_2(D)>
  return prephitmp_26;
;;    succ:       EXIT [100.0%] 

}



;; Function virtual bool SparseAllocator::ReadRequest(Allocator::sRequest&, int, int) const (_ZNK15SparseAllocator11ReadRequestERN9Allocator8sRequestEii, funcdef_no=1775, decl_uid=37912, cgraph_uid=445, symbol_order=446)


Pass statistics:
----------------

virtual bool SparseAllocator::ReadRequest(Allocator::sRequest&, int, int) const (const struct SparseAllocatorD.36303 * const thisD.42351, struct sRequestD.35378 & reqD.42347, intD.9 inD.42348, intD.9 outD.42349)
{
  const struct _Rb_tree_nodeD.41466 * __yD.54329;
  static const charD.10 _ZZNK15SparseAllocator11ReadRequestERN9Allocator8sRequestEiiE19__PRETTY_FUNCTION__D.42354[80] = "virtual bool SparseAllocator::ReadRequest(Allocator::sRequest&, int, int) const";
  boolD.2757 foundD.42353;
  intD.9 _6;
  intD.9 _7;
  long unsigned intD.14 _8;
  struct mapD.37148 * const _13;
  const intD.9 _17;
  const intD.9 _21;
  long unsigned intD.14 _25;
  const struct mapD.37148 & _26;

;;   basic block 2, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  if (in_3(D) < 0)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_4(D)>
  _6 = this_5(D)->D.37974._inputsD.34629;
  if (in_3(D) >= _6)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                2 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_12 = VDEF <.MEM_4(D)>
  # USE = nonlocal null { D.42354 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42354 } (nonlocal, escaped)
  __assert_failD.14402 ("( in >= 0 ) && ( in < _inputs )", "allocators/allocator.cpp", 303, &_ZZNK15SparseAllocator11ReadRequestERN9Allocator8sRequestEiiE19__PRETTY_FUNCTION__D.42354);
;;    succ:      

;;   basic block 5, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  if (out_27(D) < 0)
    goto <bb 7>;
  else
    goto <bb 6>;
;;    succ:       7 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_4(D)>
  _7 = this_5(D)->D.37974._outputsD.34630;
  if (_7 <= out_27(D))
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_11 = VDEF <.MEM_4(D)>
  # USE = nonlocal null { D.42354 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42354 } (nonlocal, escaped)
  __assert_failD.14402 ("( out >= 0 ) && ( out < _outputs )", "allocators/allocator.cpp", 304, &_ZZNK15SparseAllocator11ReadRequestERN9Allocator8sRequestEiiE19__PRETTY_FUNCTION__D.42354);
;;    succ:      

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _8 = (long unsigned intD.14) in_3(D);
  # DEBUG D#340ptD.0 => &this_5(D)->_in_reqD.37895
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  _13 = MEM[(struct mapD.37148 * *)this_5(D) + 256B];
  # DEBUG D#86ptD.0 => D#340ptD.0
  # DEBUG __nD.54335 => _8
  # DEBUG thisD.54336 => D#86ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _25 = _8 * 48;
  # PT = nonlocal escaped 
  _26 = _13 + _25;
  # DEBUG thisD.54321 => NULL
  # DEBUG __xD.54322 => &outD.42349
  # DEBUG thisD.54324 => D#339ptD.0
  # DEBUG __kD.54323 => &outD.42349
  # DEBUG thisD.54326 => D#339ptD.0
  # PT = nonlocal escaped 
  __y_14 = &MEM[(const struct _Rb_treeD.41462 *)_26]._M_implD.41540._M_headerD.41695;
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  __y_15 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_26 + 16B];
  # DEBUG D#110ptD.0 => D#339ptD.0
  # DEBUG thisD.54273 => D#110ptD.0
  # DEBUG D#335ptD.0 => D#339ptD.0
  # DEBUG __xD.54330 => NULL
  # DEBUG __yD.54329 => NULL
  # DEBUG __kD.54328 => &outD.42349
  # DEBUG __yD.54329 => __y_14
  # DEBUG __xD.54330 => __y_15
  if (__y_15 == 0B)
    goto <bb 18>;
  else
    goto <bb 9>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_23 = PHI <__y_19(14), __y_18(13)>
  # PT = nonlocal escaped 
  # __y_24 = PHI <__y_40(14), __y_33(13)>
  # DEBUG __yD.54329 => __y_24
  # DEBUG __xD.54330 => __y_23
  if (__y_23 == 0B)
    goto <bb 15>;
  else
    goto <bb 11>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       12 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_33 = PHI <__y_15(9), __y_23(11)>
  # PT = nonlocal escaped 
  # __y_40 = PHI <__y_14(9), __y_24(11)>
  # DEBUG __yD.54329 => __y_40
  # DEBUG __xD.54330 => __y_33
  # DEBUG __xD.54243 => __y_33
  # DEBUG __xD.54209 => __y_33
  # DEBUG thisD.54210 => __y_33
  # DEBUG D#331ptD.0 => &__y_33->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54245 => D#331ptD.0
  # DEBUG thisD.54244 => D#173ptD.0
  # DEBUG D#332ptD.0 => &MEM[(const struct pairD.37146 &)__y_33 + 32].firstD.42483
  # DEBUG D#333ptD.0 => &D#334ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#333ptD.0
  # VUSE <.MEM_4(D)>
  _17 = MEM[(const intD.9 &)__y_33 + 32];
  # DEBUG D#96ptD.0 => D#332ptD.0
  # DEBUG D#97ptD.0 => &outD.42349
  # DEBUG thisD.54246 => D#95ptD.0
  # DEBUG __xD.54247 => D#96ptD.0
  # DEBUG __yD.54248 => D#97ptD.0
  if (_17 >= out_27(D))
    goto <bb 13>;
  else
    goto <bb 14>;
;;    succ:       13 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.54329 => __y_33
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  __y_18 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_33 + 16B];
  # DEBUG D#171ptD.0 => __y_33
  # DEBUG __xD.54242 => D#171ptD.0
  # DEBUG __xD.54330 => NULL
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       12 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  __y_19 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_33 + 24B];
  # DEBUG D#172ptD.0 => __y_33
  # DEBUG __xD.54241 => D#172ptD.0
  # DEBUG __xD.54330 => NULL
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_22 = PHI <__y_24(10)>
  # DEBUG thisD.54240 => NULL
  # DEBUG __xD.54239 => __y_22
  # DEBUG __j$_M_nodeD.54291 => __y_22
  # DEBUG thisD.54261 => D#339ptD.0
  # DEBUG thisD.54263 => NULL
  # DEBUG __xD.54262 => __y_14
  # DEBUG thisD.54258 => &__jD.54325
  # DEBUG __xD.54259 => NULL
  if (__y_14 == __y_22)
    goto <bb 18>;
  else
    goto <bb 16>;
;;    succ:       18 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       15 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.54283 => __y_22
  # DEBUG __xD.53214 => __y_22
  # DEBUG thisD.53215 => __y_22
  # DEBUG D#174ptD.0 => &__y_22->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.54285 => D#174ptD.0
  # DEBUG thisD.54284 => D#173ptD.0
  # DEBUG D#336ptD.0 => &MEM[(const struct pairD.37146 &)__y_22 + 32].firstD.42483
  # DEBUG D#338ptD.0 => &MEM[(const struct _Rb_treeD.41462 *)D#339ptD.0]._M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#338ptD.0
  # DEBUG D#96ptD.0 => &outD.42349
  # VUSE <.MEM_4(D)>
  _21 = MEM[(const intD.9 &)__y_22 + 32];
  # DEBUG D#97ptD.0 => D#336ptD.0
  # DEBUG thisD.54281 => D#95ptD.0
  # DEBUG __xD.54280 => D#96ptD.0
  # DEBUG __yD.54279 => D#97ptD.0
  # DEBUG D#337ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.54291 => D#337ptD.0
  # DEBUG match$_M_nodeD.54341 => __y_22
  # DEBUG D#341ptD.0 => &this_5(D)->_in_reqD.37895
  # DEBUG D#86ptD.0 => D#341ptD.0
  # DEBUG __nD.54318 => _8
  # DEBUG thisD.54319 => D#86ptD.0
  # DEBUG thisD.54313 => NULL
  # DEBUG thisD.54314 => D#112ptD.0
  # DEBUG thisD.52815 => NULL
  # DEBUG __xD.52814 => __y_14
  # DEBUG thisD.54310 => &matchD.42355
  # DEBUG __xD.54311 => &D.42479
  if (_21 <= out_27(D))
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [100.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 809, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [100.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.54338 => &matchD.42355
  # DEBUG thisD.54339 => __y_22
  # DEBUG D#342ptD.0 => &__y_22->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#342ptD.0
  # .MEM_10 = VDEF <.MEM_4(D)>
  *req_9(D) = MEM[(const struct pairD.37146 *)__y_22 + 32B].secondD.42484;
  # DEBUG foundD.42353 => 1
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 17, next block 1, flags: (NEW, REACHABLE)
;;    pred:       17 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 1]
  # found_1 = PHI <1(17), 0(15), 0(8), 0(16)>
  # .MEM_2 = PHI <.MEM_10(17), .MEM_4(D)(15), .MEM_4(D)(8), .MEM_4(D)(16)>
  # DEBUG foundD.42353 => found_1
  # DEBUG D#343ptD.0 => {CLOBBER}
  # DEBUG match$_M_nodeD.54341 => D#343ptD.0
  # VUSE <.MEM_2>
  return found_1;
;;    succ:       EXIT [100.0%] 

}


Creating dr for this_5(D)->D.37974._inputs
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: *this_5(D)
	Access function 0: 768
	Access function 1: 0
Creating dr for this_5(D)->D.37974._outputs
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 100
	step: 0
	aligned to: 256
	base_object: *this_5(D)
	Access function 0: 800
	Access function 1: 0
Creating dr for MEM[(struct map * *)this_5(D) + 256B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_5(D) + 256B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_26 + 16B]
analyze_innermost: success.
	base_address: _13 + (long unsigned int) in_3(D) * 48
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)_26 + 16B]
Creating dr for MEM[(const int &)__y_33 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_33 + 32]
Creating dr for MEM[(const int &)__y_33 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_33 + 32]
Creating dr for MEM[(const int &)__y_33 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_33 + 32]
Creating dr for MEM[(const int &)__y_33 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_33 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_33 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_33 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_33 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_33 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_33 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_33 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_33 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_33 + 24B]
Creating dr for MEM[(const int &)__y_33 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_33 + 32]
Creating dr for MEM[(const int &)__y_33 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_33 + 32]
Creating dr for MEM[(const int &)__y_33 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_33 + 32]
Creating dr for MEM[(const int &)__y_33 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_33 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_33 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_33 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_33 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_33 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_33 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_33 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_33 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_33 + 24B]
Applying pattern match.pd:750, generic-match.c:1467
Applying pattern match.pd:397, generic-match.c:4039
Creating dr for MEM[(const int &)__y_22 + 32]
analyze_innermost: success.
	base_address: __y_22
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__y_22 + 32]
Creating dr for MEM[(const struct pair *)__y_22 + 32B].second
analyze_innermost: success.
	base_address: __y_22
	offset from base address: 0
	constant offset from base address: 36
	step: 0
	aligned to: 256
	base_object: MEM[(const struct pair *)__y_22 + 32B]
	Access function 0: 32
Creating dr for *req_9(D)
analyze_innermost: success.
	base_address: req_9(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *req_9(D)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:3, LOOPS:0, CONDITIONS:1, STMTS:36)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:22, LOOPS:1, CONDITIONS:9, STMTS:112)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_4 bb_3 })
  {
    <bb 2>:
    if (in_3(D) < 0)
      goto <bb 4>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 bb_5 })
  {
    <bb 3>:
    # VUSE <.MEM_4(D)>
    _6 = this_5(D)->D.37974._inputs;
    if (in_3(D) >= _6)
      goto <bb 4>;
    else
      goto <bb 5>;

  }
  bb_4 (preds = {bb_3 bb_2 }, succs = {})
  {
    <bb 4>:
    # .MEM_12 = VDEF <.MEM_4(D)>
    __assert_fail ("( in >= 0 ) && ( in < _inputs )", "allocators/allocator.cpp", 303, &__PRETTY_FUNCTION__);

  }
  bb_5 (preds = {bb_3 }, succs = {bb_7 bb_6 })
  {
    <bb 5>:
    if (out_27(D) < 0)
      goto <bb 7>;
    else
      goto <bb 6>;

  }
  bb_6 (preds = {bb_5 }, succs = {bb_7 bb_8 })
  {
    <bb 6>:
    # VUSE <.MEM_4(D)>
    _7 = this_5(D)->D.37974._outputs;
    if (_7 <= out_27(D))
      goto <bb 7>;
    else
      goto <bb 8>;

  }
  bb_7 (preds = {bb_6 bb_5 }, succs = {})
  {
    <bb 7>:
    # .MEM_11 = VDEF <.MEM_4(D)>
    __assert_fail ("( out >= 0 ) && ( out < _outputs )", "allocators/allocator.cpp", 304, &__PRETTY_FUNCTION__);

  }
  bb_8 (preds = {bb_6 }, succs = {bb_21 bb_9 })
  {
    <bb 8>:
    _8 = (long unsigned int) in_3(D);
    # DEBUG D#340 => &this_5(D)->_in_req
    # VUSE <.MEM_4(D)>
    _13 = MEM[(struct map * *)this_5(D) + 256B];
    # DEBUG D#86 => D#340
    # DEBUG __n => _8
    # DEBUG this => D#86
    _25 = _8 * 48;
    _26 = _13 + _25;
    # DEBUG this => NULL
    # DEBUG __x => &out
    # DEBUG this => D#339
    # DEBUG __k => &out
    # DEBUG this => D#339
    __y_14 = &MEM[(const struct _Rb_tree *)_26]._M_impl._M_header;
    # VUSE <.MEM_4(D)>
    __y_15 = MEM[(struct _Rb_tree_node_base * *)_26 + 16B];
    # DEBUG D#110 => D#339
    # DEBUG this => D#110
    # DEBUG D#335 => D#339
    # DEBUG __x => NULL
    # DEBUG __y => NULL
    # DEBUG __k => &out
    # DEBUG __y => __y_14
    # DEBUG __x => __y_15
    if (__y_15 == 0B)
      goto <bb 21>;
    else
      goto <bb 9>;

  }
  bb_9 (preds = {bb_8 }, succs = {bb_12 })
  {
    <bb 9>:
    goto <bb 12>;

  }
  bb_15 (preds = {bb_10 }, succs = {bb_19 })
  {
    <bb 15>:
    # __y_22 = PHI <__y_24(10)>

  }
  bb_19 (preds = {bb_15 }, succs = {bb_21 bb_16 })
  {
    <bb 19>:
    # DEBUG this => NULL
    # DEBUG __x => __y_22
    # DEBUG __j$_M_node => __y_22
    # DEBUG this => D#339
    # DEBUG this => NULL
    # DEBUG __x => __y_14
    # DEBUG this => &__j
    # DEBUG __x => NULL
    if (__y_14 == __y_22)
      goto <bb 21>;
    else
      goto <bb 16>;

  }
  bb_16 (preds = {bb_19 }, succs = {bb_17 bb_18 })
  {
    <bb 16>:
    # DEBUG __x => __y_22
    # DEBUG __x => __y_22
    # DEBUG this => __y_22
    # DEBUG D#174 => &__y_22->_M_value_field
    # DEBUG __r => D#174
    # DEBUG __x => D#174
    # DEBUG this => D#173
    # DEBUG D#336 => &MEM[(const struct pair &)__y_22 + 32].first
    # DEBUG D#338 => &MEM[(const struct _Rb_tree *)D#339]._M_impl._M_key_compare
    # DEBUG D#95 => D#338
    # DEBUG D#96 => &out
    # VUSE <.MEM_4(D)>
    _21 = MEM[(const int &)__y_22 + 32];
    # DEBUG D#97 => D#336
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    # DEBUG D#337 => {CLOBBER}
    # DEBUG __j$_M_node => D#337
    # DEBUG match$_M_node => __y_22
    # DEBUG D#341 => &this_5(D)->_in_req
    # DEBUG D#86 => D#341
    # DEBUG __n => _8
    # DEBUG this => D#86
    # DEBUG this => NULL
    # DEBUG this => D#112
    # DEBUG this => NULL
    # DEBUG __x => __y_14
    # DEBUG this => &match
    # DEBUG __x => &D.42479
    if (_21 <= out_27(D))
      goto <bb 17>;
    else
      goto <bb 18>;

  }
  bb_17 (preds = {bb_16 }, succs = {bb_18 })
  {
    <bb 17>:
    # DEBUG this => &match
    # DEBUG this => __y_22
    # DEBUG D#342 => &__y_22->_M_value_field
    # DEBUG __r => D#342
    # .MEM_10 = VDEF <.MEM_4(D)>
    *req_9(D) = MEM[(const struct pair *)__y_22 + 32B].second;
    # DEBUG found => 1

  }
  bb_18 (preds = {bb_17 bb_16 }, succs = {bb_21 })
  {
    <bb 18>:
    # found_28 = PHI <1(17), 0(16)>
    # .MEM_36 = PHI <.MEM_10(17), .MEM_4(D)(16)>

  }
  bb_21 (preds = {bb_18 bb_19 bb_8 }, succs = {bb_20 })
  {
    <bb 21>:
    # found_1 = PHI <found_28(18), 0(19), 0(8)>
    # .MEM_2 = PHI <.MEM_36(18), .MEM_4(D)(19), .MEM_4(D)(8)>

  }
  bb_20 (preds = {bb_21 }, succs = {bb_1 })
  {
    <bb 20>:
    # DEBUG found => found_1
    # DEBUG D#343 => {CLOBBER}
    # DEBUG match$_M_node => D#343
    # VUSE <.MEM_2>
    return found_1;

  }
  loop_1 (header = 12, latch = 11, niter = )
  {
    bb_10 (preds = {bb_14 bb_13 }, succs = {bb_15 bb_11 })
    {
      <bb 10>:
      # __y_23 = PHI <__y_19(14), __y_18(13)>
      # __y_24 = PHI <__y_40(14), __y_33(13)>
      # DEBUG __y => __y_24
      # DEBUG __x => __y_23
      if (__y_23 == 0B)
        goto <bb 15>;
      else
        goto <bb 11>;

    }
    bb_11 (preds = {bb_10 }, succs = {bb_12 })
    {
      <bb 11>:

    }
    bb_12 (preds = {bb_9 bb_11 }, succs = {bb_13 bb_14 })
    {
      <bb 12>:
      # __y_33 = PHI <__y_15(9), __y_23(11)>
      # __y_40 = PHI <__y_14(9), __y_24(11)>
      # DEBUG __y => __y_40
      # DEBUG __x => __y_33
      # DEBUG __x => __y_33
      # DEBUG __x => __y_33
      # DEBUG this => __y_33
      # DEBUG D#331 => &__y_33->_M_value_field
      # DEBUG __r => D#331
      # DEBUG __x => D#331
      # DEBUG this => D#173
      # DEBUG D#332 => &MEM[(const struct pair &)__y_33 + 32].first
      # DEBUG D#333 => &D#334->_M_impl._M_key_compare
      # DEBUG D#95 => D#333
      # VUSE <.MEM_4(D)>
      _17 = MEM[(const int &)__y_33 + 32];
      # DEBUG D#96 => D#332
      # DEBUG D#97 => &out
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      if (_17 >= out_27(D))
        goto <bb 13>;
      else
        goto <bb 14>;

    }
    bb_13 (preds = {bb_12 }, succs = {bb_10 })
    {
      <bb 13>:
      # DEBUG __y => __y_33
      # VUSE <.MEM_4(D)>
      __y_18 = MEM[(struct _Rb_tree_node_base * *)__y_33 + 16B];
      # DEBUG D#171 => __y_33
      # DEBUG __x => D#171
      # DEBUG __x => NULL
      goto <bb 10>;

    }
    bb_14 (preds = {bb_12 }, succs = {bb_10 })
    {
      <bb 14>:
      # VUSE <.MEM_4(D)>
      __y_19 = MEM[(struct _Rb_tree_node_base * *)__y_33 + 24B];
      # DEBUG D#172 => __y_33
      # DEBUG __x => D#172
      # DEBUG __x => NULL
      goto <bb 10>;

    }
  }
}

Pass statistics:
----------------

virtual bool SparseAllocator::ReadRequest(Allocator::sRequest&, int, int) const (const struct SparseAllocatorD.36303 * const thisD.42351, struct sRequestD.35378 & reqD.42347, intD.9 inD.42348, intD.9 outD.42349)
{
  const struct _Rb_tree_nodeD.41466 * __yD.54329;
  static const charD.10 _ZZNK15SparseAllocator11ReadRequestERN9Allocator8sRequestEiiE19__PRETTY_FUNCTION__D.42354[80] = "virtual bool SparseAllocator::ReadRequest(Allocator::sRequest&, int, int) const";
  boolD.2757 foundD.42353;
  intD.9 _6;
  intD.9 _7;
  long unsigned intD.14 _8;
  struct mapD.37148 * const _13;
  const intD.9 _17;
  const intD.9 _21;
  long unsigned intD.14 _25;
  const struct mapD.37148 & _26;

;;   basic block 2, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  if (in_3(D) < 0)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_4(D)>
  _6 = this_5(D)->D.37974._inputsD.34629;
  if (in_3(D) >= _6)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                2 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_12 = VDEF <.MEM_4(D)>
  # USE = nonlocal null { D.42354 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42354 } (nonlocal, escaped)
  __assert_failD.14402 ("( in >= 0 ) && ( in < _inputs )", "allocators/allocator.cpp", 303, &_ZZNK15SparseAllocator11ReadRequestERN9Allocator8sRequestEiiE19__PRETTY_FUNCTION__D.42354);
;;    succ:      

;;   basic block 5, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  if (out_27(D) < 0)
    goto <bb 7>;
  else
    goto <bb 6>;
;;    succ:       7 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_4(D)>
  _7 = this_5(D)->D.37974._outputsD.34630;
  if (_7 <= out_27(D))
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_11 = VDEF <.MEM_4(D)>
  # USE = nonlocal null { D.42354 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42354 } (nonlocal, escaped)
  __assert_failD.14402 ("( out >= 0 ) && ( out < _outputs )", "allocators/allocator.cpp", 304, &_ZZNK15SparseAllocator11ReadRequestERN9Allocator8sRequestEiiE19__PRETTY_FUNCTION__D.42354);
;;    succ:      

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _8 = (long unsigned intD.14) in_3(D);
  # DEBUG D#340ptD.0 => &this_5(D)->_in_reqD.37895
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  _13 = MEM[(struct mapD.37148 * *)this_5(D) + 256B];
  # DEBUG D#86ptD.0 => D#340ptD.0
  # DEBUG __nD.54335 => _8
  # DEBUG thisD.54336 => D#86ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _25 = _8 * 48;
  # PT = nonlocal escaped 
  _26 = _13 + _25;
  # DEBUG thisD.54321 => NULL
  # DEBUG __xD.54322 => &outD.42349
  # DEBUG thisD.54324 => D#339ptD.0
  # DEBUG __kD.54323 => &outD.42349
  # DEBUG thisD.54326 => D#339ptD.0
  # PT = nonlocal escaped 
  __y_14 = &MEM[(const struct _Rb_treeD.41462 *)_26]._M_implD.41540._M_headerD.41695;
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  __y_15 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_26 + 16B];
  # DEBUG D#110ptD.0 => D#339ptD.0
  # DEBUG thisD.54273 => D#110ptD.0
  # DEBUG D#335ptD.0 => D#339ptD.0
  # DEBUG __xD.54330 => NULL
  # DEBUG __yD.54329 => NULL
  # DEBUG __kD.54328 => &outD.42349
  # DEBUG __yD.54329 => __y_14
  # DEBUG __xD.54330 => __y_15
  if (__y_15 == 0B)
    goto <bb 21>;
  else
    goto <bb 9>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_23 = PHI <__y_19(14), __y_18(13)>
  # PT = nonlocal escaped 
  # __y_24 = PHI <__y_40(14), __y_33(13)>
  # DEBUG __yD.54329 => __y_24
  # DEBUG __xD.54330 => __y_23
  if (__y_23 == 0B)
    goto <bb 15>;
  else
    goto <bb 11>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       12 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_33 = PHI <__y_15(9), __y_23(11)>
  # PT = nonlocal escaped 
  # __y_40 = PHI <__y_14(9), __y_24(11)>
  # DEBUG __yD.54329 => __y_40
  # DEBUG __xD.54330 => __y_33
  # DEBUG __xD.54243 => __y_33
  # DEBUG __xD.54209 => __y_33
  # DEBUG thisD.54210 => __y_33
  # DEBUG D#331ptD.0 => &__y_33->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54245 => D#331ptD.0
  # DEBUG thisD.54244 => D#173ptD.0
  # DEBUG D#332ptD.0 => &MEM[(const struct pairD.37146 &)__y_33 + 32].firstD.42483
  # DEBUG D#333ptD.0 => &D#334ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#333ptD.0
  # VUSE <.MEM_4(D)>
  _17 = MEM[(const intD.9 &)__y_33 + 32];
  # DEBUG D#96ptD.0 => D#332ptD.0
  # DEBUG D#97ptD.0 => &outD.42349
  # DEBUG thisD.54246 => D#95ptD.0
  # DEBUG __xD.54247 => D#96ptD.0
  # DEBUG __yD.54248 => D#97ptD.0
  if (_17 >= out_27(D))
    goto <bb 13>;
  else
    goto <bb 14>;
;;    succ:       13 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.54329 => __y_33
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  __y_18 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_33 + 16B];
  # DEBUG D#171ptD.0 => __y_33
  # DEBUG __xD.54242 => D#171ptD.0
  # DEBUG __xD.54330 => NULL
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       12 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_4(D)>
  # PT = nonlocal escaped 
  __y_19 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_33 + 24B];
  # DEBUG D#172ptD.0 => __y_33
  # DEBUG __xD.54241 => D#172ptD.0
  # DEBUG __xD.54330 => NULL
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 14, next block 19, flags: (NEW, REACHABLE)
;;    pred:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_22 = PHI <__y_24(10)>
;;    succ:       19 [100.0%]  (FALLTHRU)

;;   basic block 19, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 15, next block 16, flags: (NEW)
;;    pred:       15 [100.0%]  (FALLTHRU)
  # DEBUG thisD.54240 => NULL
  # DEBUG __xD.54239 => __y_22
  # DEBUG __j$_M_nodeD.54291 => __y_22
  # DEBUG thisD.54261 => D#339ptD.0
  # DEBUG thisD.54263 => NULL
  # DEBUG __xD.54262 => __y_14
  # DEBUG thisD.54258 => &__jD.54325
  # DEBUG __xD.54259 => NULL
  if (__y_14 == __y_22)
    goto <bb 21>;
  else
    goto <bb 16>;
;;    succ:       21 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 19, next block 17, flags: (NEW, REACHABLE)
;;    pred:       19 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.54283 => __y_22
  # DEBUG __xD.53214 => __y_22
  # DEBUG thisD.53215 => __y_22
  # DEBUG D#174ptD.0 => &__y_22->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.54285 => D#174ptD.0
  # DEBUG thisD.54284 => D#173ptD.0
  # DEBUG D#336ptD.0 => &MEM[(const struct pairD.37146 &)__y_22 + 32].firstD.42483
  # DEBUG D#338ptD.0 => &MEM[(const struct _Rb_treeD.41462 *)D#339ptD.0]._M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#338ptD.0
  # DEBUG D#96ptD.0 => &outD.42349
  # VUSE <.MEM_4(D)>
  _21 = MEM[(const intD.9 &)__y_22 + 32];
  # DEBUG D#97ptD.0 => D#336ptD.0
  # DEBUG thisD.54281 => D#95ptD.0
  # DEBUG __xD.54280 => D#96ptD.0
  # DEBUG __yD.54279 => D#97ptD.0
  # DEBUG D#337ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.54291 => D#337ptD.0
  # DEBUG match$_M_nodeD.54341 => __y_22
  # DEBUG D#341ptD.0 => &this_5(D)->_in_reqD.37895
  # DEBUG D#86ptD.0 => D#341ptD.0
  # DEBUG __nD.54318 => _8
  # DEBUG thisD.54319 => D#86ptD.0
  # DEBUG thisD.54313 => NULL
  # DEBUG thisD.54314 => D#112ptD.0
  # DEBUG thisD.52815 => NULL
  # DEBUG __xD.52814 => __y_14
  # DEBUG thisD.54310 => &matchD.42355
  # DEBUG __xD.54311 => &D.42479
  if (_21 <= out_27(D))
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [100.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 809, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [100.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.54338 => &matchD.42355
  # DEBUG thisD.54339 => __y_22
  # DEBUG D#342ptD.0 => &__y_22->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#342ptD.0
  # .MEM_10 = VDEF <.MEM_4(D)>
  *req_9(D) = MEM[(const struct pairD.37146 *)__y_22 + 32B].secondD.42484;
  # DEBUG foundD.42353 => 1
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 809, maybe hot
;;    prev block 17, next block 21, flags: (NEW, REACHABLE)
;;    pred:       17 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                16 (FALSE_VALUE,EXECUTABLE)
  # found_28 = PHI <1(17), 0(16)>
  # .MEM_36 = PHI <.MEM_10(17), .MEM_4(D)(16)>
;;    succ:       21 [100.0%]  (FALLTHRU)

;;   basic block 21, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       18 [100.0%]  (FALLTHRU)
;;                19 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1]
  # found_1 = PHI <found_28(18), 0(19), 0(8)>
  # .MEM_2 = PHI <.MEM_36(18), .MEM_4(D)(19), .MEM_4(D)(8)>
;;    succ:       20 [100.0%]  (FALLTHRU)

;;   basic block 20, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 21, next block 1, flags: (NEW)
;;    pred:       21 [100.0%]  (FALLTHRU)
  # DEBUG foundD.42353 => found_1
  # DEBUG D#343ptD.0 => {CLOBBER}
  # DEBUG match$_M_nodeD.54341 => D#343ptD.0
  # VUSE <.MEM_2>
  return found_1;
;;    succ:       EXIT [100.0%] 

}



;; Function virtual void SparseAllocator::PrintRequests(std::ostream*) const (_ZNK15SparseAllocator13PrintRequestsEPSo, funcdef_no=1782, decl_uid=37939, cgraph_uid=452, symbol_order=453)


Pass statistics:
----------------

virtual void SparseAllocator::PrintRequests(std::ostream*) const (const struct SparseAllocatorD.36303 * const thisD.42690, struct ostreamD.7362 * osD.42688)
{
  char_typeD.17868 D.62613;
  charD.10 __cD.62612;
  char_typeD.17868 D.62610;
  charD.10 __cD.62609;
  char_typeD.20947 D.62607;
  struct basic_ostreamD.7361 & D.62601;
  struct basic_ostreamD.7361 & D.62598;
  struct basic_ostreamD.7361 & D.62594;
  struct basic_ostreamD.7361 & D.62590;
  struct basic_ostreamD.7361 & D.62586;
  struct basic_ostreamD.7361 & D.62582;
  struct basic_ostreamD.7361 & D.62578;
  struct basic_ostreamD.7361 & D.62574;
  struct basic_ostreamD.7361 & D.62570;
  struct basic_ostreamD.7361 & D.62566;
  const struct _Rb_tree_node_baseD.24800 * const iter$_M_nodeD.52928;
  intD.9 outputD.42699;
  intD.9 inputD.42693;
  intD.9 pretmp_2;
  intD.9 pretmp_4;
  const size_typeD.41494 _11;
  long unsigned intD.14 _16;
  const struct mapD.37148 & _17;
  struct basic_ostreamD.7361 & _19;
  const struct _Rb_tree_node_baseD.24800 * _21;
  intD.9 _22;
  intD.9 _23;
  struct basic_ostreamD.7361 & _25;
  struct basic_ostreamD.7361 & _27;
  const size_typeD.41494 _29;
  long unsigned intD.14 _34;
  const struct mapD.37148 & _35;
  struct basic_ostreamD.7361 & _37;
  const intD.9 prephitmp_38;
  const struct mapD.37148 & _41;
  long unsigned intD.14 _42;
  intD.9 _44;
  intD.9 _45;
  struct basic_ostreamD.7361 & _47;
  struct basic_ostreamD.7361 & _49;
  const intD.9 pretmp_50;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _51;
  intD.9 prephitmp_54;
  struct mapD.37148 * const _55;
  struct mapD.37148 * const _56;
  struct mapD.37148 * const _57;
  struct mapD.37148 * const _58;
  struct mapD.37148 * const _59;
  struct mapD.37148 * const _60;
  long unsigned intD.14 _62;
  const struct mapD.37148 & _63;
  const struct mapD.37148 & _65;
  const struct _Rb_tree_node_baseD.24800 * _66;
  const struct mapD.37148 & _67;
  const struct __ctype_typeD.20952 * _72;
  const intD.9 prephitmp_82;
  long intD.12 _83;
  sizetype _84;
  struct basic_iosD.7355 * _85;
  const struct _Rb_tree_node_baseD.24800 * _86;
  struct basic_ostreamD.7361 & _88;
  charD.10 _90;
  const intD.9 pretmp_91;
  const intD.9 prephitmp_92;
  char_typeD.17868 _93;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _98;
  intD.9 (*__vtbl_ptr_typeD.2760) () _99;
  const intD.9 prephitmp_101;
  intD.9 _102;
  voidD.45 * PROF_103;
  char_typeD.17868 _105;
  intD.9 _116;
  const struct _Rb_tree_node_baseD.24800 * _126;

;;   basic block 2, loop depth 0, count 0, freq 307, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.52846 => &iterD.42692
  # DEBUG iter$_M_nodeD.52928 => 0B
  if (os_12(D) == 0B)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 261, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [85.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 307, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal { D.23717 } (nonlocal, escaped)
  # os_1 = PHI <os_12(D)(3), &_ZSt4coutD.23717(2)>
  # DEBUG osD.42688 => os_1
  # DEBUG __outD.62563 => os_1
  # DEBUG __sD.62564 => "Input requests = [ "
  # DEBUG __sD.62565 => "Input requests = [ "
  # .MEM_109 = VDEF <.MEM_10(D)>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (os_1, "Input requests = [ ", 19);
  # DEBUG inputD.42693 => 0
  # VUSE <.MEM_109>
  _116 = this_14(D)->D.37974._inputsD.34629;
  if (_116 <= 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 307, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_131 = PHI <.MEM_109(4), .MEM_6(13)>
  # DEBUG __outD.62579 => os_1
  # DEBUG __sD.62580 => "], output requests = [ "
  # DEBUG __sD.62581 => "], output requests = [ "
  # .MEM_117 = VDEF <.MEM_131>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (os_1, "], output requests = [ ", 23);
  # DEBUG outputD.42699 => 0
  # VUSE <.MEM_117>
  _102 = this_14(D)->D.37974._outputsD.34630;
  if (_102 <= 0)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 279, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       4 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 3103, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # input_134 = PHI <0(6), input_31(14)>
  # .MEM_74 = PHI <.MEM_109(6), .MEM_6(14)>
  # prephitmp_38 = PHI <_116(6), prephitmp_92(14)>
  # DEBUG inputD.42693 => input_134
  # RANGE [0, 18446744073709551615]
  _16 = (long unsigned intD.14) input_134;
  # DEBUG D#115ptD.0 => &this_14(D)->_in_reqD.37895
  # VUSE <.MEM_74>
  # PT = nonlocal escaped 
  _55 = MEM[(struct mapD.37148 * *)this_14(D) + 256B];
  # DEBUG D#86ptD.0 => D#115ptD.0
  # DEBUG __nD.52851 => _16
  # DEBUG thisD.52852 => D#86ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _42 = _16 * 48;
  # PT = nonlocal escaped 
  _41 = _55 + _42;
  # DEBUG thisD.52847 => NULL
  # VUSE <.MEM_74>
  _11 = MEM[(long unsigned intD.14 *)_41 + 40B];
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.52848 => D#93ptD.0
  if (_11 != 0)
    goto <bb 8>;
  else
    goto <bb 13>;
;;    succ:       8 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_18 = VDEF <.MEM_74>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _19 = _ZNSolsEiD.21643 (os_1, input_134);
  # DEBUG __outD.62567 => _19
  # DEBUG __sD.62568 => " -> [ "
  # DEBUG __sD.62569 => " -> [ "
  # .MEM_111 = VDEF <.MEM_18>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_19, " -> [ ", 6);
  # DEBUG D#116ptD.0 => &this_14(D)->_in_reqD.37895
  # VUSE <.MEM_111>
  # PT = nonlocal escaped 
  _56 = MEM[(struct mapD.37148 * *)this_14(D) + 256B];
  # DEBUG D#86ptD.0 => D#116ptD.0
  # DEBUG __nD.52858 => _16
  # DEBUG thisD.52859 => D#86ptD.0
  # PT = nonlocal escaped 
  _35 = _56 + _42;
  # DEBUG thisD.52854 => NULL
  # VUSE <.MEM_111>
  # PT = nonlocal escaped 
  iter$_M_node_40 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_35 + 24B];
  # DEBUG D#113ptD.0 => D#114ptD.0
  # DEBUG thisD.52835 => D#113ptD.0
  # DEBUG thisD.52827 => NULL
  # DEBUG __xD.52826 => iter$_M_node_40
  # DEBUG iter$_M_nodeD.52928 => iter$_M_node_40
  # DEBUG iter$_M_nodeD.52928 => iter$_M_node_40
  # DEBUG D#119ptD.0 => &this_14(D)->_in_reqD.37895
  # DEBUG D#86ptD.0 => D#119ptD.0
  # DEBUG __nD.52869 => _16
  # DEBUG thisD.52870 => D#86ptD.0
  # DEBUG thisD.52864 => NULL
  # DEBUG thisD.52865 => D#112ptD.0
  # PT = nonlocal escaped 
  _86 = &MEM[(const struct _Rb_treeD.41462 *)_35]._M_implD.41540._M_headerD.41695;
  # DEBUG thisD.52815 => NULL
  # DEBUG __xD.52814 => _86
  # DEBUG thisD.52861 => &iterD.42692
  # DEBUG __xD.52862 => &D.42698
  if (iter$_M_node_40 != _86)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [9.0%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_130 = PHI <.MEM_111(8), .MEM_113(11)>
  # DEBUG __outD.62575 => os_1
  # DEBUG __sD.62576 => "]  "
  # DEBUG __sD.62577 => "]  "
  # .MEM_115 = VDEF <.MEM_130>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (os_1, "]  ", 3);
  # VUSE <.MEM_115>
  pretmp_91 = this_14(D)->D.37974._inputsD.34629;
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       8 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_75 = PHI <.MEM_111(10), .MEM_113(12)>
  # PT = nonlocal escaped 
  # iter$_M_node_39 = PHI <iter$_M_node_40(10), iter$_M_node_61(12)>
  # DEBUG iter$_M_nodeD.52928 => iter$_M_node_39
  # DEBUG D#119ptD.0 => &this_14(D)->_in_reqD.37895
  # DEBUG D#86ptD.0 => D#119ptD.0
  # DEBUG __nD.52869 => _16
  # DEBUG thisD.52870 => D#86ptD.0
  # DEBUG thisD.52864 => NULL
  # DEBUG thisD.52865 => D#112ptD.0
  # DEBUG thisD.52815 => NULL
  # DEBUG __xD.52814 => _86
  # DEBUG thisD.52861 => &iterD.42692
  # DEBUG __xD.52862 => &D.42698
  # DEBUG thisD.52875 => &iterD.42692
  # DEBUG thisD.52876 => iter$_M_node_39
  # DEBUG D#117ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)iter$_M_node_39]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#117ptD.0
  # VUSE <.MEM_75>
  _22 = MEM[(const struct pairD.37146 *)iter$_M_node_39 + 32B].secondD.42484.in_priD.35382;
  # DEBUG thisD.52872 => &iterD.42692
  # DEBUG thisD.52873 => iter$_M_node_39
  # DEBUG D#118ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)iter$_M_node_39]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#118ptD.0
  # VUSE <.MEM_75>
  _23 = MEM[(const struct pairD.37146 *)iter$_M_node_39 + 32B].secondD.42484.portD.35380;
  # .MEM_24 = VDEF <.MEM_75>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _25 = _ZNSolsEiD.21643 (os_1, _23);
  # DEBUG __outD.52878 => _25
  # DEBUG __sD.52879 => "@"
  # DEBUG __sD.52880 => "@"
  # .MEM_69 = VDEF <.MEM_24>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_25, "@", 1);
  # .MEM_26 = VDEF <.MEM_69>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _27 = _ZNSolsEiD.21643 (_25, _22);
  # DEBUG __outD.62571 => _27
  # DEBUG __sD.62572 => " "
  # DEBUG __sD.62573 => " "
  # .MEM_113 = VDEF <.MEM_26>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_27, " ", 1);
  # DEBUG thisD.52882 => &iterD.42692
  # VUSE <.MEM_113>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  iter$_M_node_61 = _ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_baseD.24847 (iter$_M_node_39);
  # DEBUG iter$_M_nodeD.52928 => iter$_M_node_61
  # DEBUG iter$_M_nodeD.52928 => iter$_M_node_61
  # DEBUG D#119ptD.0 => &this_14(D)->_in_reqD.37895
  # VUSE <.MEM_113>
  # PT = nonlocal escaped 
  _57 = MEM[(struct mapD.37148 * *)this_14(D) + 256B];
  # DEBUG D#86ptD.0 => D#119ptD.0
  # DEBUG __nD.52869 => _16
  # DEBUG thisD.52870 => D#86ptD.0
  # PT = nonlocal escaped 
  _17 = _57 + _42;
  # DEBUG thisD.52864 => NULL
  # DEBUG thisD.52865 => D#112ptD.0
  # PT = nonlocal escaped 
  _21 = &MEM[(const struct _Rb_treeD.41462 *)_17]._M_implD.41540._M_headerD.41695;
  # DEBUG thisD.52815 => NULL
  # DEBUG __xD.52814 => _21
  # DEBUG thisD.52861 => &iterD.42692
  # DEBUG __xD.52862 => &D.42698
  if (_21 != iter$_M_node_61)
    goto <bb 12>;
  else
    goto <bb 9>;
;;    succ:       12 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 2, count 0, freq 8281, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       11 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 3103, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       7 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_6 = PHI <.MEM_74(7), .MEM_115(9)>
  # prephitmp_92 = PHI <prephitmp_38(7), pretmp_91(9)>
  input_31 = input_134 + 1;
  # DEBUG inputD.42693 => input_31
  # DEBUG inputD.42693 => input_31
  if (input_31 >= prephitmp_92)
    goto <bb 5>;
  else
    goto <bb 14>;
;;    succ:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 2824, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 307, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_124 = PHI <.MEM_117(5), .MEM_9(23)>
  # DEBUG __outD.52921 => os_1
  # DEBUG __sD.52922 => "]."
  # DEBUG __sD.52923 => "]."
  # .MEM_71 = VDEF <.MEM_124>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (os_1, "].", 2);
  # DEBUG thisD.52925 => os_1
  # DEBUG __pfD.52926 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.21775
  # DEBUG __osD.62599 => os_1
  # VUSE <.MEM_71>
  # PT = nonlocal escaped 
  _51 = MEM[(struct basic_ostreamD.7361 *)os_1]._vptr.basic_ostreamD.21735;
  # VUSE <.MEM_71>
  _83 = MEM[(long intD.12 *)_51 + -24B];
  # RANGE [0, 18446744073709551615]
  _84 = (sizetype) _83;
  # PT = nonlocal { D.23717 } (nonlocal, escaped)
  _85 = os_1 + _84;
  # DEBUG thisD.62602 => _85
  # DEBUG __cD.62603 => 10
  # VUSE <.MEM_71>
  # PT = nonlocal escaped 
  _72 = MEM[(const struct basic_iosD.7355 *)_85]._M_ctypeD.20959;
  # DEBUG __fD.62604 => _72
  if (_72 == 0B)
    goto <bb 25>;
  else
    goto <bb 26>;
;;    succ:       25 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 279, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 3103, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                24 [100.0%]  (FALLTHRU,EXECUTABLE)
  # output_73 = PHI <0(16), output_52(24)>
  # .MEM_76 = PHI <.MEM_117(16), .MEM_9(24)>
  # prephitmp_101 = PHI <_102(16), prephitmp_82(24)>
  # DEBUG outputD.42699 => output_73
  # RANGE [0, 18446744073709551615]
  _34 = (long unsigned intD.14) output_73;
  # DEBUG D#120ptD.0 => &this_14(D)->_out_reqD.37896
  # VUSE <.MEM_76>
  # PT = nonlocal escaped 
  _58 = MEM[(struct mapD.37148 * *)this_14(D) + 280B];
  # DEBUG D#86ptD.0 => D#120ptD.0
  # DEBUG __nD.52888 => _34
  # DEBUG thisD.52889 => D#86ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _62 = _34 * 48;
  # PT = nonlocal escaped 
  _63 = _58 + _62;
  # DEBUG thisD.52884 => NULL
  # VUSE <.MEM_76>
  _29 = MEM[(long unsigned intD.14 *)_63 + 40B];
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.52885 => D#93ptD.0
  if (_29 != 0)
    goto <bb 18>;
  else
    goto <bb 23>;
;;    succ:       18 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_36 = VDEF <.MEM_76>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _37 = _ZNSolsEiD.21643 (os_1, output_73);
  # DEBUG __outD.62587 => _37
  # DEBUG __sD.62588 => " -> "
  # DEBUG __sD.62589 => " -> "
  # .MEM_119 = VDEF <.MEM_36>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_37, " -> ", 4);
  # DEBUG __outD.62583 => os_1
  # DEBUG __sD.62584 => "[ "
  # DEBUG __sD.62585 => "[ "
  # .MEM_121 = VDEF <.MEM_119>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (os_1, "[ ", 2);
  # DEBUG D#121ptD.0 => &this_14(D)->_out_reqD.37896
  # VUSE <.MEM_121>
  # PT = nonlocal escaped 
  _59 = MEM[(struct mapD.37148 * *)this_14(D) + 280B];
  # DEBUG D#86ptD.0 => D#121ptD.0
  # DEBUG __nD.52895 => _34
  # DEBUG thisD.52896 => D#86ptD.0
  # PT = nonlocal escaped 
  _65 = _59 + _62;
  # DEBUG thisD.52891 => NULL
  # VUSE <.MEM_121>
  # PT = nonlocal escaped 
  iter$_M_node_64 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_65 + 24B];
  # DEBUG D#113ptD.0 => D#114ptD.0
  # DEBUG thisD.52835 => D#113ptD.0
  # DEBUG thisD.52827 => NULL
  # DEBUG __xD.52826 => iter$_M_node_64
  # DEBUG iter$_M_nodeD.52928 => iter$_M_node_64
  # DEBUG iter$_M_nodeD.52928 => iter$_M_node_64
  # DEBUG D#124ptD.0 => &this_14(D)->_out_reqD.37896
  # DEBUG D#86ptD.0 => D#124ptD.0
  # DEBUG __nD.52906 => _34
  # DEBUG thisD.52907 => D#86ptD.0
  # DEBUG thisD.52901 => NULL
  # DEBUG thisD.52902 => D#112ptD.0
  # PT = nonlocal escaped 
  _126 = &MEM[(const struct _Rb_treeD.41462 *)_65]._M_implD.41540._M_headerD.41695;
  # DEBUG thisD.52815 => NULL
  # DEBUG __xD.52814 => _126
  # DEBUG thisD.52898 => &iterD.42692
  # DEBUG __xD.52899 => &D.42701
  if (iter$_M_node_64 != _126)
    goto <bb 20>;
  else
    goto <bb 19>;
;;    succ:       20 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [9.0%]  (FALSE_VALUE,EXECUTABLE)
;;                21 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_122 = PHI <.MEM_121(18), .MEM_123(21)>
  # DEBUG __outD.62595 => os_1
  # DEBUG __sD.62596 => "]  "
  # DEBUG __sD.62597 => "]  "
  # .MEM_125 = VDEF <.MEM_122>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (os_1, "]  ", 3);
  # VUSE <.MEM_125>
  pretmp_50 = this_14(D)->D.37974._outputsD.34630;
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       18 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_77 = PHI <.MEM_121(20), .MEM_123(22)>
  # PT = nonlocal escaped 
  # iter$_M_node_78 = PHI <iter$_M_node_64(20), iter$_M_node_68(22)>
  # DEBUG iter$_M_nodeD.52928 => iter$_M_node_78
  # DEBUG D#124ptD.0 => &this_14(D)->_out_reqD.37896
  # DEBUG D#86ptD.0 => D#124ptD.0
  # DEBUG __nD.52906 => _34
  # DEBUG thisD.52907 => D#86ptD.0
  # DEBUG thisD.52901 => NULL
  # DEBUG thisD.52902 => D#112ptD.0
  # DEBUG thisD.52815 => NULL
  # DEBUG __xD.52814 => _126
  # DEBUG thisD.52898 => &iterD.42692
  # DEBUG __xD.52899 => &D.42701
  # DEBUG thisD.52912 => &iterD.42692
  # DEBUG thisD.52913 => iter$_M_node_78
  # DEBUG D#122ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)iter$_M_node_78]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#122ptD.0
  # VUSE <.MEM_77>
  _44 = MEM[(const struct pairD.37146 *)iter$_M_node_78 + 32B].secondD.42484.out_priD.35383;
  # DEBUG thisD.52909 => &iterD.42692
  # DEBUG thisD.52910 => iter$_M_node_78
  # DEBUG D#123ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)iter$_M_node_78]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#123ptD.0
  # VUSE <.MEM_77>
  _45 = MEM[(const struct pairD.37146 *)iter$_M_node_78 + 32B].secondD.42484.portD.35380;
  # .MEM_46 = VDEF <.MEM_77>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _47 = _ZNSolsEiD.21643 (os_1, _45);
  # DEBUG __outD.52915 => _47
  # DEBUG __sD.52916 => "@"
  # DEBUG __sD.52917 => "@"
  # .MEM_70 = VDEF <.MEM_46>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_47, "@", 1);
  # .MEM_48 = VDEF <.MEM_70>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _49 = _ZNSolsEiD.21643 (_47, _44);
  # DEBUG __outD.62591 => _49
  # DEBUG __sD.62592 => " "
  # DEBUG __sD.62593 => " "
  # .MEM_123 = VDEF <.MEM_48>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_49, " ", 1);
  # DEBUG thisD.52919 => &iterD.42692
  # VUSE <.MEM_123>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  iter$_M_node_68 = _ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_baseD.24847 (iter$_M_node_78);
  # DEBUG iter$_M_nodeD.52928 => iter$_M_node_68
  # DEBUG iter$_M_nodeD.52928 => iter$_M_node_68
  # DEBUG D#124ptD.0 => &this_14(D)->_out_reqD.37896
  # VUSE <.MEM_123>
  # PT = nonlocal escaped 
  _60 = MEM[(struct mapD.37148 * *)this_14(D) + 280B];
  # DEBUG D#86ptD.0 => D#124ptD.0
  # DEBUG __nD.52906 => _34
  # DEBUG thisD.52907 => D#86ptD.0
  # PT = nonlocal escaped 
  _67 = _60 + _62;
  # DEBUG thisD.52901 => NULL
  # DEBUG thisD.52902 => D#112ptD.0
  # PT = nonlocal escaped 
  _66 = &MEM[(const struct _Rb_treeD.41462 *)_67]._M_implD.41540._M_headerD.41695;
  # DEBUG thisD.52815 => NULL
  # DEBUG __xD.52814 => _66
  # DEBUG thisD.52898 => &iterD.42692
  # DEBUG __xD.52899 => &D.42701
  if (_66 != iter$_M_node_68)
    goto <bb 22>;
  else
    goto <bb 19>;
;;    succ:       22 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 2, count 0, freq 8281, maybe hot
;;    prev block 21, next block 23, flags: (NEW)
;;    pred:       21 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 21>;
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 3103, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       17 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_9 = PHI <.MEM_76(17), .MEM_125(19)>
  # prephitmp_82 = PHI <prephitmp_101(17), pretmp_50(19)>
  output_52 = output_73 + 1;
  # DEBUG outputD.42699 => output_52
  # DEBUG outputD.42699 => output_52
  if (output_52 >= prephitmp_82)
    goto <bb 15>;
  else
    goto <bb 24>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 1, count 0, freq 2824, maybe hot
;;    prev block 23, next block 25, flags: (NEW)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       15 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_135 = VDEF <.MEM_71>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__throw_bad_castvD.2851 ();
;;    succ:      

;;   basic block 26, loop depth 0, count 0, freq 307, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       15 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62606 => _72
  # DEBUG __cD.62605 => 10
  # VUSE <.MEM_71>
  _90 = MEM[(const struct ctypeD.7662 *)_72]._M_widen_okD.17874;
  if (_90 != 0)
    goto <bb 27>;
  else
    goto <bb 28>;
;;    succ:       27 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 187, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       26 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_71>
  _93 = MEM[(const struct ctypeD.7662 *)_72]._M_widenD.17875[10];
  pretmp_4 = (intD.9) _93;
  goto <bb 30>;
;;    succ:       30 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 120, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       26 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62608 => _72
  # DEBUG __cD.62609 => 10
  # .MEM_127 = VDEF <.MEM_71>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.17982 (_72);
  # VUSE <.MEM_127>
  # PT = nonlocal escaped 
  _98 = MEM[(const struct ctypeD.7662 *)_72].D.18015._vptr.facetD.14633;
  # VUSE <.MEM_127>
  # PT = nonlocal escaped 
  _99 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_98 + 48B];
  # PT = anything 
  PROF_103 = [obj_type_ref] OBJ_TYPE_REF(_99;(const struct ctypeD.7662)_72->6);
  if (PROF_103 == _ZNKSt5ctypeIcE8do_widenEcD.17963)
    goto <bb 30>;
  else
    goto <bb 29>;
;;    succ:       30 [80.2%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [19.8%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 24, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       28 [19.8%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_128 = VDEF <.MEM_127>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _105 = OBJ_TYPE_REF(_99;(const struct ctypeD.7662)_72->6) (_72, 10);
  pretmp_2 = (intD.9) _105;
;;    succ:       30 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 307, maybe hot
;;    prev block 29, next block 1, flags: (NEW, REACHABLE)
;;    pred:       27 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                28 [80.2%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_108 = PHI <.MEM_71(27), .MEM_127(28), .MEM_128(29)>
  # RANGE [-128, 127]
  # prephitmp_54 = PHI <pretmp_4(27), 10(28), pretmp_2(29)>
  # .MEM_132 = VDEF <.MEM_108>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _88 = _ZNSo3putEcD.21670 (os_1, prephitmp_54);
  # DEBUG __osD.62600 => _88
  # .MEM_133 = VDEF <.MEM_132>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZNSo5flushEvD.21681 (_88);
  # DEBUG D#125ptD.0 => {CLOBBER}
  # DEBUG iter$_M_nodeD.52928 => D#125ptD.0
  # VUSE <.MEM_133>
  return;
;;    succ:       EXIT [100.0%] 

}



Updating SSA:
Registering new PHI nodes in block #4
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Registering new PHI nodes in block #8
Registering new PHI nodes in block #10
Registering new PHI nodes in block #11
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_27, " ", 1);
Updating SSA information for statement iter$_M_node_61 = std::_Rb_tree_increment (iter$_M_node_39);
Updating SSA information for statement _57 = MEM[(struct map * *)this_14(D) + 256B];
Registering new PHI nodes in block #12
Registering new PHI nodes in block #34
Registering new PHI nodes in block #9
Registering new PHI nodes in block #13
Registering new PHI nodes in block #14
Registering new PHI nodes in block #33
Registering new PHI nodes in block #5
Registering new PHI nodes in block #16
Registering new PHI nodes in block #17
Registering new PHI nodes in block #18
Registering new PHI nodes in block #20
Registering new PHI nodes in block #21
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_49, " ", 1);
Updating SSA information for statement iter$_M_node_68 = std::_Rb_tree_increment (iter$_M_node_78);
Updating SSA information for statement _60 = MEM[(struct map * *)this_14(D) + 280B];
Registering new PHI nodes in block #22
Registering new PHI nodes in block #32
Registering new PHI nodes in block #19
Registering new PHI nodes in block #23
Registering new PHI nodes in block #24
Registering new PHI nodes in block #31
Registering new PHI nodes in block #15
Registering new PHI nodes in block #26
Registering new PHI nodes in block #27
Registering new PHI nodes in block #28
Registering new PHI nodes in block #29
Registering new PHI nodes in block #30
Registering new PHI nodes in block #25

DFA Statistics for virtual void SparseAllocator::PrintRequests(std::ostream*) const

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                            179       1432b
DEF operands                             56        448b
VUSE operands                            51        408b
VDEF operands                            23        184b
PHI nodes                                25       2600b
PHI arguments                            48       2304b
---------------------------------------------------------
Total memory used by DFA/SSA data                 7376b
---------------------------------------------------------

Average number of arguments per PHI node: 1.9 (max: 3)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_13 -> { .MEM_123 }
.MEM_28 -> { .MEM_6 }
.MEM_89 -> { .MEM_113 }
.MEM_96 -> { .MEM_9 }
Incremental SSA update started at block: 4
Number of blocks in CFG: 35
Number of blocks to update: 14 ( 40%)
Affected blocks: 7 11 12 13 14 17 21 22 23 24 31 32 33 34


Creating dr for MEM[(struct map * *)this_14(D) + 256B]
analyze_innermost: success.
	base_address: this_14(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_14(D) + 256B]
Creating dr for MEM[(struct map * *)this_14(D) + 256B]
analyze_innermost: success.
	base_address: this_14(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_14(D) + 256B]
Creating dr for MEM[(long unsigned int *)_41 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_41 + 40B]
Creating dr for MEM[(long unsigned int *)_41 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_41 + 40B]
Creating dr for MEM[(struct map * *)this_14(D) + 256B]
analyze_innermost: success.
	base_address: this_14(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_14(D) + 256B]
Creating dr for MEM[(struct map * *)this_14(D) + 256B]
analyze_innermost: success.
	base_address: this_14(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_14(D) + 256B]
Creating dr for MEM[(long unsigned int *)_41 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_41 + 40B]
Creating dr for MEM[(long unsigned int *)_41 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_41 + 40B]
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 64
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 64
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 64
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 64
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 64
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 64
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(struct map * *)this_14(D) + 256B]
analyze_innermost: success.
	base_address: this_14(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_14(D) + 256B]
Creating dr for MEM[(struct map * *)this_14(D) + 256B]
analyze_innermost: success.
	base_address: this_14(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_14(D) + 256B]
Creating dr for MEM[(long unsigned int *)_41 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_41 + 40B]
Creating dr for MEM[(long unsigned int *)_41 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_41 + 40B]
Creating dr for MEM[(struct map * *)this_14(D) + 256B]
analyze_innermost: success.
	base_address: this_14(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_14(D) + 256B]
Creating dr for MEM[(struct map * *)this_14(D) + 256B]
analyze_innermost: success.
	base_address: this_14(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_14(D) + 256B]
Creating dr for MEM[(long unsigned int *)_41 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_41 + 40B]
Creating dr for MEM[(long unsigned int *)_41 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_41 + 40B]
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 64
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 64
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 64
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 64
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 64
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 64
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 64
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 64
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 64
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 64
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 64
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.in_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 64
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_39 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_39 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(struct map * *)this_14(D) + 280B]
analyze_innermost: success.
	base_address: this_14(D)
	offset from base address: 0
	constant offset from base address: 280
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_14(D) + 280B]
Creating dr for MEM[(struct map * *)this_14(D) + 280B]
analyze_innermost: success.
	base_address: this_14(D)
	offset from base address: 0
	constant offset from base address: 280
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_14(D) + 280B]
Creating dr for MEM[(long unsigned int *)_63 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_63 + 40B]
Creating dr for MEM[(long unsigned int *)_63 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_63 + 40B]
Creating dr for MEM[(struct map * *)this_14(D) + 280B]
analyze_innermost: success.
	base_address: this_14(D)
	offset from base address: 0
	constant offset from base address: 280
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_14(D) + 280B]
Creating dr for MEM[(struct map * *)this_14(D) + 280B]
analyze_innermost: success.
	base_address: this_14(D)
	offset from base address: 0
	constant offset from base address: 280
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_14(D) + 280B]
Creating dr for MEM[(long unsigned int *)_63 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_63 + 40B]
Creating dr for MEM[(long unsigned int *)_63 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_63 + 40B]
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.out_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 96
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.out_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 96
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.out_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 96
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.out_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 96
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.out_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 96
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.out_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 96
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(struct map * *)this_14(D) + 280B]
analyze_innermost: success.
	base_address: this_14(D)
	offset from base address: 0
	constant offset from base address: 280
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_14(D) + 280B]
Creating dr for MEM[(struct map * *)this_14(D) + 280B]
analyze_innermost: success.
	base_address: this_14(D)
	offset from base address: 0
	constant offset from base address: 280
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_14(D) + 280B]
Creating dr for MEM[(long unsigned int *)_63 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_63 + 40B]
Creating dr for MEM[(long unsigned int *)_63 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_63 + 40B]
Creating dr for MEM[(struct map * *)this_14(D) + 280B]
analyze_innermost: success.
	base_address: this_14(D)
	offset from base address: 0
	constant offset from base address: 280
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_14(D) + 280B]
Creating dr for MEM[(struct map * *)this_14(D) + 280B]
analyze_innermost: success.
	base_address: this_14(D)
	offset from base address: 0
	constant offset from base address: 280
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_14(D) + 280B]
Creating dr for MEM[(long unsigned int *)_63 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_63 + 40B]
Creating dr for MEM[(long unsigned int *)_63 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_63 + 40B]
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.out_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 96
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.out_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 96
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.out_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 96
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.out_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 96
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.out_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 96
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.out_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 96
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.out_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 96
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.out_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 96
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.out_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 96
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.out_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 96
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.out_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 96
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.out_pri
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 96
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct pair *)iter$_M_node_78 + 32B].second.port
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair *)iter$_M_node_78 + 32B]
	Access function 0: 0
	Access function 1: 32
Creating dr for MEM[(const struct ctype *)_72]._M_widen_ok
analyze_innermost: success.
	base_address: _72
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(const struct ctype *)_72]
	Access function 0: 448
Creating dr for MEM[(const struct ctype *)_72]._M_widen[10]
analyze_innermost: success.
	base_address: _72
	offset from base address: 0
	constant offset from base address: 67
	step: 0
	aligned to: 256
	base_object: MEM[(const struct ctype *)_72]
	Access function 0: 10
	Access function 1: 456

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:35, LOOPS:4, CONDITIONS:14, STMTS:266)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_4 bb_3 })
  {
    <bb 2>:
    # DEBUG this => &iter
    # DEBUG iter$_M_node => 0B
    if (os_12(D) == 0B)
      goto <bb 4>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 })
  {
    <bb 3>:

  }
  bb_4 (preds = {bb_3 bb_2 }, succs = {bb_5 bb_6 })
  {
    <bb 4>:
    # os_1 = PHI <os_12(D)(3), &cout(2)>
    # DEBUG os => os_1
    # DEBUG __out => os_1
    # DEBUG __s => "Input requests = [ "
    # DEBUG __s => "Input requests = [ "
    # .MEM_109 = VDEF <.MEM_10(D)>
    std::__ostream_insert<char, std::char_traits<char> > (os_1, "Input requests = [ ", 19);
    # DEBUG input => 0
    # VUSE <.MEM_109>
    _116 = this_14(D)->D.37974._inputs;
    if (_116 <= 0)
      goto <bb 5>;
    else
      goto <bb 6>;

  }
  bb_5 (preds = {bb_4 bb_33 }, succs = {bb_15 bb_16 })
  {
    <bb 5>:
    # .MEM_131 = PHI <.MEM_109(4), .MEM_28(33)>
    # DEBUG __out => os_1
    # DEBUG __s => "], output requests = [ "
    # DEBUG __s => "], output requests = [ "
    # .MEM_117 = VDEF <.MEM_131>
    std::__ostream_insert<char, std::char_traits<char> > (os_1, "], output requests = [ ", 23);
    # DEBUG output => 0
    # VUSE <.MEM_117>
    _102 = this_14(D)->D.37974._outputs;
    if (_102 <= 0)
      goto <bb 15>;
    else
      goto <bb 16>;

  }
  bb_6 (preds = {bb_4 }, succs = {bb_7 })
  {
    <bb 6>:

  }
  bb_33 (preds = {bb_13 }, succs = {bb_5 })
  {
    <bb 33>:
    # .MEM_28 = PHI <.MEM_6(13)>
    goto <bb 5>;

  }
  bb_31 (preds = {bb_23 }, succs = {bb_15 })
  {
    <bb 31>:
    # .MEM_96 = PHI <.MEM_9(23)>

  }
  bb_15 (preds = {bb_5 bb_31 }, succs = {bb_25 bb_26 })
  {
    <bb 15>:
    # .MEM_124 = PHI <.MEM_117(5), .MEM_96(31)>
    # DEBUG __out => os_1
    # DEBUG __s => "]."
    # DEBUG __s => "]."
    # .MEM_71 = VDEF <.MEM_124>
    std::__ostream_insert<char, std::char_traits<char> > (os_1, "].", 2);
    # DEBUG this => os_1
    # DEBUG __pf => endl
    # DEBUG __os => os_1
    # VUSE <.MEM_71>
    _51 = MEM[(struct basic_ostream *)os_1]._vptr.basic_ostream;
    # VUSE <.MEM_71>
    _83 = MEM[(long int *)_51 + -24B];
    _84 = (sizetype) _83;
    _85 = os_1 + _84;
    # DEBUG this => _85
    # DEBUG __c => 10
    # VUSE <.MEM_71>
    _72 = MEM[(const struct basic_ios *)_85]._M_ctype;
    # DEBUG __f => _72
    if (_72 == 0B)
      goto <bb 25>;
    else
      goto <bb 26>;

  }
  bb_16 (preds = {bb_5 }, succs = {bb_17 })
  {
    <bb 16>:

  }
  bb_25 (preds = {bb_15 }, succs = {})
  {
    <bb 25>:
    # .MEM_135 = VDEF <.MEM_71>
    std::__throw_bad_cast ();

  }
  bb_26 (preds = {bb_15 }, succs = {bb_27 bb_28 })
  {
    <bb 26>:
    # DEBUG this => _72
    # DEBUG __c => 10
    # VUSE <.MEM_71>
    _90 = MEM[(const struct ctype *)_72]._M_widen_ok;
    if (_90 != 0)
      goto <bb 27>;
    else
      goto <bb 28>;

  }
  bb_27 (preds = {bb_26 }, succs = {bb_30 })
  {
    <bb 27>:
    # VUSE <.MEM_71>
    _93 = MEM[(const struct ctype *)_72]._M_widen[10];
    pretmp_4 = (int) _93;
    goto <bb 30>;

  }
  bb_28 (preds = {bb_26 }, succs = {bb_30 bb_29 })
  {
    <bb 28>:
    # DEBUG this => _72
    # DEBUG __c => 10
    # .MEM_127 = VDEF <.MEM_71>
    std::ctype<char>::_M_widen_init (_72);
    # VUSE <.MEM_127>
    _98 = MEM[(const struct ctype *)_72].D.18015._vptr.facet;
    # VUSE <.MEM_127>
    _99 = MEM[(int (*__vtbl_ptr_type) () *)_98 + 48B];
    PROF_103 = [obj_type_ref] OBJ_TYPE_REF(_99;(const struct ctype)_72->6);
    if (PROF_103 == do_widen)
      goto <bb 30>;
    else
      goto <bb 29>;

  }
  bb_29 (preds = {bb_28 }, succs = {bb_30 })
  {
    <bb 29>:
    # .MEM_128 = VDEF <.MEM_127>
    _105 = OBJ_TYPE_REF(_99;(const struct ctype)_72->6) (_72, 10);
    pretmp_2 = (int) _105;

  }
  bb_30 (preds = {bb_27 bb_28 bb_29 }, succs = {bb_1 })
  {
    <bb 30>:
    # .MEM_108 = PHI <.MEM_71(27), .MEM_127(28), .MEM_128(29)>
    # prephitmp_54 = PHI <pretmp_4(27), 10(28), pretmp_2(29)>
    # .MEM_132 = VDEF <.MEM_108>
    _88 = std::basic_ostream<char>::put (os_1, prephitmp_54);
    # DEBUG __os => _88
    # .MEM_133 = VDEF <.MEM_132>
    std::basic_ostream<char>::flush (_88);
    # DEBUG D#125 => {CLOBBER}
    # DEBUG iter$_M_node => D#125
    # VUSE <.MEM_133>
    return;

  }
  loop_3 (header = 17, latch = 24, niter = , upper_bound = 2147483647)
  {
    bb_17 (preds = {bb_16 bb_24 }, succs = {bb_18 bb_23 })
    {
      <bb 17>:
      # output_73 = PHI <0(16), output_52(24)>
      # .MEM_76 = PHI <.MEM_117(16), .MEM_9(24)>
      # prephitmp_101 = PHI <_102(16), prephitmp_82(24)>
      # DEBUG output => output_73
      _34 = (long unsigned int) output_73;
      # DEBUG D#120 => &this_14(D)->_out_req
      # VUSE <.MEM_76>
      _58 = MEM[(struct map * *)this_14(D) + 280B];
      # DEBUG D#86 => D#120
      # DEBUG __n => _34
      # DEBUG this => D#86
      _62 = _34 * 48;
      _63 = _58 + _62;
      # DEBUG this => NULL
      # VUSE <.MEM_76>
      _29 = MEM[(long unsigned int *)_63 + 40B];
      # DEBUG D#93 => D#94
      # DEBUG this => D#93
      if (_29 != 0)
        goto <bb 18>;
      else
        goto <bb 23>;

    }
    bb_18 (preds = {bb_17 }, succs = {bb_20 bb_19 })
    {
      <bb 18>:
      # .MEM_36 = VDEF <.MEM_76>
      _37 = std::basic_ostream<char>::operator<< (os_1, output_73);
      # DEBUG __out => _37
      # DEBUG __s => " -> "
      # DEBUG __s => " -> "
      # .MEM_119 = VDEF <.MEM_36>
      std::__ostream_insert<char, std::char_traits<char> > (_37, " -> ", 4);
      # DEBUG __out => os_1
      # DEBUG __s => "[ "
      # DEBUG __s => "[ "
      # .MEM_121 = VDEF <.MEM_119>
      std::__ostream_insert<char, std::char_traits<char> > (os_1, "[ ", 2);
      # DEBUG D#121 => &this_14(D)->_out_req
      # VUSE <.MEM_121>
      _59 = MEM[(struct map * *)this_14(D) + 280B];
      # DEBUG D#86 => D#121
      # DEBUG __n => _34
      # DEBUG this => D#86
      _65 = _59 + _62;
      # DEBUG this => NULL
      # VUSE <.MEM_121>
      iter$_M_node_64 = MEM[(struct _Rb_tree_node_base * *)_65 + 24B];
      # DEBUG D#113 => D#114
      # DEBUG this => D#113
      # DEBUG this => NULL
      # DEBUG __x => iter$_M_node_64
      # DEBUG iter$_M_node => iter$_M_node_64
      # DEBUG iter$_M_node => iter$_M_node_64
      # DEBUG D#124 => &this_14(D)->_out_req
      # DEBUG D#86 => D#124
      # DEBUG __n => _34
      # DEBUG this => D#86
      # DEBUG this => NULL
      # DEBUG this => D#112
      _126 = &MEM[(const struct _Rb_tree *)_65]._M_impl._M_header;
      # DEBUG this => NULL
      # DEBUG __x => _126
      # DEBUG this => &iter
      # DEBUG __x => &D.42701
      if (iter$_M_node_64 != _126)
        goto <bb 20>;
      else
        goto <bb 19>;

    }
    bb_19 (preds = {bb_18 bb_32 }, succs = {bb_23 })
    {
      <bb 19>:
      # .MEM_122 = PHI <.MEM_121(18), .MEM_13(32)>
      # DEBUG __out => os_1
      # DEBUG __s => "]  "
      # DEBUG __s => "]  "
      # .MEM_125 = VDEF <.MEM_122>
      std::__ostream_insert<char, std::char_traits<char> > (os_1, "]  ", 3);
      # VUSE <.MEM_125>
      pretmp_50 = this_14(D)->D.37974._outputs;
      goto <bb 23>;

    }
    bb_20 (preds = {bb_18 }, succs = {bb_21 })
    {
      <bb 20>:

    }
    bb_32 (preds = {bb_21 }, succs = {bb_19 })
    {
      <bb 32>:
      # .MEM_13 = PHI <.MEM_123(21)>
      goto <bb 19>;

    }
    bb_23 (preds = {bb_17 bb_19 }, succs = {bb_31 bb_24 })
    {
      <bb 23>:
      # .MEM_9 = PHI <.MEM_76(17), .MEM_125(19)>
      # prephitmp_82 = PHI <prephitmp_101(17), pretmp_50(19)>
      output_52 = output_73 + 1;
      # DEBUG output => output_52
      # DEBUG output => output_52
      if (output_52 >= prephitmp_82)
        goto <bb 31>;
      else
        goto <bb 24>;

    }
    bb_24 (preds = {bb_23 }, succs = {bb_17 })
    {
      <bb 24>:
      goto <bb 17>;

    }
    loop_4 (header = 21, latch = 22, niter = )
    {
      bb_21 (preds = {bb_20 bb_22 }, succs = {bb_22 bb_32 })
      {
        <bb 21>:
        # .MEM_77 = PHI <.MEM_121(20), .MEM_123(22)>
        # iter$_M_node_78 = PHI <iter$_M_node_64(20), iter$_M_node_68(22)>
        # DEBUG iter$_M_node => iter$_M_node_78
        # DEBUG D#124 => &this_14(D)->_out_req
        # DEBUG D#86 => D#124
        # DEBUG __n => _34
        # DEBUG this => D#86
        # DEBUG this => NULL
        # DEBUG this => D#112
        # DEBUG this => NULL
        # DEBUG __x => _126
        # DEBUG this => &iter
        # DEBUG __x => &D.42701
        # DEBUG this => &iter
        # DEBUG this => iter$_M_node_78
        # DEBUG D#122 => &MEM[(const struct _Rb_tree_node *)iter$_M_node_78]._M_value_field
        # DEBUG __r => D#122
        # VUSE <.MEM_77>
        _44 = MEM[(const struct pair *)iter$_M_node_78 + 32B].second.out_pri;
        # DEBUG this => &iter
        # DEBUG this => iter$_M_node_78
        # DEBUG D#123 => &MEM[(const struct _Rb_tree_node *)iter$_M_node_78]._M_value_field
        # DEBUG __r => D#123
        # VUSE <.MEM_77>
        _45 = MEM[(const struct pair *)iter$_M_node_78 + 32B].second.port;
        # .MEM_46 = VDEF <.MEM_77>
        _47 = std::basic_ostream<char>::operator<< (os_1, _45);
        # DEBUG __out => _47
        # DEBUG __s => "@"
        # DEBUG __s => "@"
        # .MEM_70 = VDEF <.MEM_46>
        std::__ostream_insert<char, std::char_traits<char> > (_47, "@", 1);
        # .MEM_48 = VDEF <.MEM_70>
        _49 = std::basic_ostream<char>::operator<< (_47, _44);
        # DEBUG __out => _49
        # DEBUG __s => " "
        # DEBUG __s => " "
        # .MEM_123 = VDEF <.MEM_48>
        std::__ostream_insert<char, std::char_traits<char> > (_49, " ", 1);
        # DEBUG this => &iter
        # VUSE <.MEM_123>
        iter$_M_node_68 = std::_Rb_tree_increment (iter$_M_node_78);
        # DEBUG iter$_M_node => iter$_M_node_68
        # DEBUG iter$_M_node => iter$_M_node_68
        # DEBUG D#124 => &this_14(D)->_out_req
        # VUSE <.MEM_123>
        _60 = MEM[(struct map * *)this_14(D) + 280B];
        # DEBUG D#86 => D#124
        # DEBUG __n => _34
        # DEBUG this => D#86
        _67 = _60 + _62;
        # DEBUG this => NULL
        # DEBUG this => D#112
        _66 = &MEM[(const struct _Rb_tree *)_67]._M_impl._M_header;
        # DEBUG this => NULL
        # DEBUG __x => _66
        # DEBUG this => &iter
        # DEBUG __x => &D.42701
        if (_66 != iter$_M_node_68)
          goto <bb 22>;
        else
          goto <bb 32>;

      }
      bb_22 (preds = {bb_21 }, succs = {bb_21 })
      {
        <bb 22>:
        goto <bb 21>;

      }
    }
  }
  loop_1 (header = 7, latch = 14, niter = , upper_bound = 2147483647)
  {
    bb_7 (preds = {bb_6 bb_14 }, succs = {bb_8 bb_13 })
    {
      <bb 7>:
      # input_134 = PHI <0(6), input_31(14)>
      # .MEM_74 = PHI <.MEM_109(6), .MEM_6(14)>
      # prephitmp_38 = PHI <_116(6), prephitmp_92(14)>
      # DEBUG input => input_134
      _16 = (long unsigned int) input_134;
      # DEBUG D#115 => &this_14(D)->_in_req
      # VUSE <.MEM_74>
      _55 = MEM[(struct map * *)this_14(D) + 256B];
      # DEBUG D#86 => D#115
      # DEBUG __n => _16
      # DEBUG this => D#86
      _42 = _16 * 48;
      _41 = _55 + _42;
      # DEBUG this => NULL
      # VUSE <.MEM_74>
      _11 = MEM[(long unsigned int *)_41 + 40B];
      # DEBUG D#93 => D#94
      # DEBUG this => D#93
      if (_11 != 0)
        goto <bb 8>;
      else
        goto <bb 13>;

    }
    bb_8 (preds = {bb_7 }, succs = {bb_10 bb_9 })
    {
      <bb 8>:
      # .MEM_18 = VDEF <.MEM_74>
      _19 = std::basic_ostream<char>::operator<< (os_1, input_134);
      # DEBUG __out => _19
      # DEBUG __s => " -> [ "
      # DEBUG __s => " -> [ "
      # .MEM_111 = VDEF <.MEM_18>
      std::__ostream_insert<char, std::char_traits<char> > (_19, " -> [ ", 6);
      # DEBUG D#116 => &this_14(D)->_in_req
      # VUSE <.MEM_111>
      _56 = MEM[(struct map * *)this_14(D) + 256B];
      # DEBUG D#86 => D#116
      # DEBUG __n => _16
      # DEBUG this => D#86
      _35 = _56 + _42;
      # DEBUG this => NULL
      # VUSE <.MEM_111>
      iter$_M_node_40 = MEM[(struct _Rb_tree_node_base * *)_35 + 24B];
      # DEBUG D#113 => D#114
      # DEBUG this => D#113
      # DEBUG this => NULL
      # DEBUG __x => iter$_M_node_40
      # DEBUG iter$_M_node => iter$_M_node_40
      # DEBUG iter$_M_node => iter$_M_node_40
      # DEBUG D#119 => &this_14(D)->_in_req
      # DEBUG D#86 => D#119
      # DEBUG __n => _16
      # DEBUG this => D#86
      # DEBUG this => NULL
      # DEBUG this => D#112
      _86 = &MEM[(const struct _Rb_tree *)_35]._M_impl._M_header;
      # DEBUG this => NULL
      # DEBUG __x => _86
      # DEBUG this => &iter
      # DEBUG __x => &D.42698
      if (iter$_M_node_40 != _86)
        goto <bb 10>;
      else
        goto <bb 9>;

    }
    bb_9 (preds = {bb_8 bb_34 }, succs = {bb_13 })
    {
      <bb 9>:
      # .MEM_130 = PHI <.MEM_111(8), .MEM_89(34)>
      # DEBUG __out => os_1
      # DEBUG __s => "]  "
      # DEBUG __s => "]  "
      # .MEM_115 = VDEF <.MEM_130>
      std::__ostream_insert<char, std::char_traits<char> > (os_1, "]  ", 3);
      # VUSE <.MEM_115>
      pretmp_91 = this_14(D)->D.37974._inputs;
      goto <bb 13>;

    }
    bb_10 (preds = {bb_8 }, succs = {bb_11 })
    {
      <bb 10>:

    }
    bb_34 (preds = {bb_11 }, succs = {bb_9 })
    {
      <bb 34>:
      # .MEM_89 = PHI <.MEM_113(11)>
      goto <bb 9>;

    }
    bb_13 (preds = {bb_7 bb_9 }, succs = {bb_33 bb_14 })
    {
      <bb 13>:
      # .MEM_6 = PHI <.MEM_74(7), .MEM_115(9)>
      # prephitmp_92 = PHI <prephitmp_38(7), pretmp_91(9)>
      input_31 = input_134 + 1;
      # DEBUG input => input_31
      # DEBUG input => input_31
      if (input_31 >= prephitmp_92)
        goto <bb 33>;
      else
        goto <bb 14>;

    }
    bb_14 (preds = {bb_13 }, succs = {bb_7 })
    {
      <bb 14>:
      goto <bb 7>;

    }
    loop_2 (header = 11, latch = 12, niter = )
    {
      bb_11 (preds = {bb_10 bb_12 }, succs = {bb_12 bb_34 })
      {
        <bb 11>:
        # .MEM_75 = PHI <.MEM_111(10), .MEM_113(12)>
        # iter$_M_node_39 = PHI <iter$_M_node_40(10), iter$_M_node_61(12)>
        # DEBUG iter$_M_node => iter$_M_node_39
        # DEBUG D#119 => &this_14(D)->_in_req
        # DEBUG D#86 => D#119
        # DEBUG __n => _16
        # DEBUG this => D#86
        # DEBUG this => NULL
        # DEBUG this => D#112
        # DEBUG this => NULL
        # DEBUG __x => _86
        # DEBUG this => &iter
        # DEBUG __x => &D.42698
        # DEBUG this => &iter
        # DEBUG this => iter$_M_node_39
        # DEBUG D#117 => &MEM[(const struct _Rb_tree_node *)iter$_M_node_39]._M_value_field
        # DEBUG __r => D#117
        # VUSE <.MEM_75>
        _22 = MEM[(const struct pair *)iter$_M_node_39 + 32B].second.in_pri;
        # DEBUG this => &iter
        # DEBUG this => iter$_M_node_39
        # DEBUG D#118 => &MEM[(const struct _Rb_tree_node *)iter$_M_node_39]._M_value_field
        # DEBUG __r => D#118
        # VUSE <.MEM_75>
        _23 = MEM[(const struct pair *)iter$_M_node_39 + 32B].second.port;
        # .MEM_24 = VDEF <.MEM_75>
        _25 = std::basic_ostream<char>::operator<< (os_1, _23);
        # DEBUG __out => _25
        # DEBUG __s => "@"
        # DEBUG __s => "@"
        # .MEM_69 = VDEF <.MEM_24>
        std::__ostream_insert<char, std::char_traits<char> > (_25, "@", 1);
        # .MEM_26 = VDEF <.MEM_69>
        _27 = std::basic_ostream<char>::operator<< (_25, _22);
        # DEBUG __out => _27
        # DEBUG __s => " "
        # DEBUG __s => " "
        # .MEM_113 = VDEF <.MEM_26>
        std::__ostream_insert<char, std::char_traits<char> > (_27, " ", 1);
        # DEBUG this => &iter
        # VUSE <.MEM_113>
        iter$_M_node_61 = std::_Rb_tree_increment (iter$_M_node_39);
        # DEBUG iter$_M_node => iter$_M_node_61
        # DEBUG iter$_M_node => iter$_M_node_61
        # DEBUG D#119 => &this_14(D)->_in_req
        # VUSE <.MEM_113>
        _57 = MEM[(struct map * *)this_14(D) + 256B];
        # DEBUG D#86 => D#119
        # DEBUG __n => _16
        # DEBUG this => D#86
        _17 = _57 + _42;
        # DEBUG this => NULL
        # DEBUG this => D#112
        _21 = &MEM[(const struct _Rb_tree *)_17]._M_impl._M_header;
        # DEBUG this => NULL
        # DEBUG __x => _21
        # DEBUG this => &iter
        # DEBUG __x => &D.42698
        if (_21 != iter$_M_node_61)
          goto <bb 12>;
        else
          goto <bb 34>;

      }
      bb_12 (preds = {bb_11 }, succs = {bb_11 })
      {
        <bb 12>:
        goto <bb 11>;

      }
    }
  }
}

Pass statistics:
----------------

virtual void SparseAllocator::PrintRequests(std::ostream*) const (const struct SparseAllocatorD.36303 * const thisD.42690, struct ostreamD.7362 * osD.42688)
{
  char_typeD.17868 D.62613;
  charD.10 __cD.62612;
  char_typeD.17868 D.62610;
  charD.10 __cD.62609;
  char_typeD.20947 D.62607;
  struct basic_ostreamD.7361 & D.62601;
  struct basic_ostreamD.7361 & D.62598;
  struct basic_ostreamD.7361 & D.62594;
  struct basic_ostreamD.7361 & D.62590;
  struct basic_ostreamD.7361 & D.62586;
  struct basic_ostreamD.7361 & D.62582;
  struct basic_ostreamD.7361 & D.62578;
  struct basic_ostreamD.7361 & D.62574;
  struct basic_ostreamD.7361 & D.62570;
  struct basic_ostreamD.7361 & D.62566;
  const struct _Rb_tree_node_baseD.24800 * const iter$_M_nodeD.52928;
  intD.9 outputD.42699;
  intD.9 inputD.42693;
  intD.9 pretmp_2;
  intD.9 pretmp_4;
  const size_typeD.41494 _11;
  long unsigned intD.14 _16;
  const struct mapD.37148 & _17;
  struct basic_ostreamD.7361 & _19;
  const struct _Rb_tree_node_baseD.24800 * _21;
  intD.9 _22;
  intD.9 _23;
  struct basic_ostreamD.7361 & _25;
  struct basic_ostreamD.7361 & _27;
  const size_typeD.41494 _29;
  long unsigned intD.14 _34;
  const struct mapD.37148 & _35;
  struct basic_ostreamD.7361 & _37;
  const intD.9 prephitmp_38;
  const struct mapD.37148 & _41;
  long unsigned intD.14 _42;
  intD.9 _44;
  intD.9 _45;
  struct basic_ostreamD.7361 & _47;
  struct basic_ostreamD.7361 & _49;
  const intD.9 pretmp_50;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _51;
  intD.9 prephitmp_54;
  struct mapD.37148 * const _55;
  struct mapD.37148 * const _56;
  struct mapD.37148 * const _57;
  struct mapD.37148 * const _58;
  struct mapD.37148 * const _59;
  struct mapD.37148 * const _60;
  long unsigned intD.14 _62;
  const struct mapD.37148 & _63;
  const struct mapD.37148 & _65;
  const struct _Rb_tree_node_baseD.24800 * _66;
  const struct mapD.37148 & _67;
  const struct __ctype_typeD.20952 * _72;
  const intD.9 prephitmp_82;
  long intD.12 _83;
  sizetype _84;
  struct basic_iosD.7355 * _85;
  const struct _Rb_tree_node_baseD.24800 * _86;
  struct basic_ostreamD.7361 & _88;
  charD.10 _90;
  const intD.9 pretmp_91;
  const intD.9 prephitmp_92;
  char_typeD.17868 _93;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _98;
  intD.9 (*__vtbl_ptr_typeD.2760) () _99;
  const intD.9 prephitmp_101;
  intD.9 _102;
  voidD.45 * PROF_103;
  char_typeD.17868 _105;
  intD.9 _116;
  const struct _Rb_tree_node_baseD.24800 * _126;

;;   basic block 2, loop depth 0, count 0, freq 307, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.52846 => &iterD.42692
  # DEBUG iter$_M_nodeD.52928 => 0B
  if (os_12(D) == 0B)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 261, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [85.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 307, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal { D.23717 } (nonlocal, escaped)
  # os_1 = PHI <os_12(D)(3), &_ZSt4coutD.23717(2)>
  # DEBUG osD.42688 => os_1
  # DEBUG __outD.62563 => os_1
  # DEBUG __sD.62564 => "Input requests = [ "
  # DEBUG __sD.62565 => "Input requests = [ "
  # .MEM_109 = VDEF <.MEM_10(D)>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (os_1, "Input requests = [ ", 19);
  # DEBUG inputD.42693 => 0
  # VUSE <.MEM_109>
  _116 = this_14(D)->D.37974._inputsD.34629;
  if (_116 <= 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 307, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU)
  # .MEM_131 = PHI <.MEM_109(4), .MEM_28(33)>
  # DEBUG __outD.62579 => os_1
  # DEBUG __sD.62580 => "], output requests = [ "
  # DEBUG __sD.62581 => "], output requests = [ "
  # .MEM_117 = VDEF <.MEM_131>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (os_1, "], output requests = [ ", 23);
  # DEBUG outputD.42699 => 0
  # VUSE <.MEM_117>
  _102 = this_14(D)->D.37974._outputsD.34630;
  if (_102 <= 0)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 279, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       4 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 3103, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # input_134 = PHI <0(6), input_31(14)>
  # .MEM_74 = PHI <.MEM_109(6), .MEM_6(14)>
  # prephitmp_38 = PHI <_116(6), prephitmp_92(14)>
  # DEBUG inputD.42693 => input_134
  # RANGE [0, 18446744073709551615]
  _16 = (long unsigned intD.14) input_134;
  # DEBUG D#115ptD.0 => &this_14(D)->_in_reqD.37895
  # VUSE <.MEM_74>
  # PT = nonlocal escaped 
  _55 = MEM[(struct mapD.37148 * *)this_14(D) + 256B];
  # DEBUG D#86ptD.0 => D#115ptD.0
  # DEBUG __nD.52851 => _16
  # DEBUG thisD.52852 => D#86ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _42 = _16 * 48;
  # PT = nonlocal escaped 
  _41 = _55 + _42;
  # DEBUG thisD.52847 => NULL
  # VUSE <.MEM_74>
  _11 = MEM[(long unsigned intD.14 *)_41 + 40B];
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.52848 => D#93ptD.0
  if (_11 != 0)
    goto <bb 8>;
  else
    goto <bb 13>;
;;    succ:       8 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_18 = VDEF <.MEM_74>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _19 = _ZNSolsEiD.21643 (os_1, input_134);
  # DEBUG __outD.62567 => _19
  # DEBUG __sD.62568 => " -> [ "
  # DEBUG __sD.62569 => " -> [ "
  # .MEM_111 = VDEF <.MEM_18>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_19, " -> [ ", 6);
  # DEBUG D#116ptD.0 => &this_14(D)->_in_reqD.37895
  # VUSE <.MEM_111>
  # PT = nonlocal escaped 
  _56 = MEM[(struct mapD.37148 * *)this_14(D) + 256B];
  # DEBUG D#86ptD.0 => D#116ptD.0
  # DEBUG __nD.52858 => _16
  # DEBUG thisD.52859 => D#86ptD.0
  # PT = nonlocal escaped 
  _35 = _56 + _42;
  # DEBUG thisD.52854 => NULL
  # VUSE <.MEM_111>
  # PT = nonlocal escaped 
  iter$_M_node_40 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_35 + 24B];
  # DEBUG D#113ptD.0 => D#114ptD.0
  # DEBUG thisD.52835 => D#113ptD.0
  # DEBUG thisD.52827 => NULL
  # DEBUG __xD.52826 => iter$_M_node_40
  # DEBUG iter$_M_nodeD.52928 => iter$_M_node_40
  # DEBUG iter$_M_nodeD.52928 => iter$_M_node_40
  # DEBUG D#119ptD.0 => &this_14(D)->_in_reqD.37895
  # DEBUG D#86ptD.0 => D#119ptD.0
  # DEBUG __nD.52869 => _16
  # DEBUG thisD.52870 => D#86ptD.0
  # DEBUG thisD.52864 => NULL
  # DEBUG thisD.52865 => D#112ptD.0
  # PT = nonlocal escaped 
  _86 = &MEM[(const struct _Rb_treeD.41462 *)_35]._M_implD.41540._M_headerD.41695;
  # DEBUG thisD.52815 => NULL
  # DEBUG __xD.52814 => _86
  # DEBUG thisD.52861 => &iterD.42692
  # DEBUG __xD.52862 => &D.42698
  if (iter$_M_node_40 != _86)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [9.0%]  (FALSE_VALUE,EXECUTABLE)
;;                34 [100.0%]  (FALLTHRU)
  # .MEM_130 = PHI <.MEM_111(8), .MEM_89(34)>
  # DEBUG __outD.62575 => os_1
  # DEBUG __sD.62576 => "]  "
  # DEBUG __sD.62577 => "]  "
  # .MEM_115 = VDEF <.MEM_130>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (os_1, "]  ", 3);
  # VUSE <.MEM_115>
  pretmp_91 = this_14(D)->D.37974._inputsD.34629;
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       8 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 10, next block 34, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_75 = PHI <.MEM_111(10), .MEM_113(12)>
  # PT = nonlocal escaped 
  # iter$_M_node_39 = PHI <iter$_M_node_40(10), iter$_M_node_61(12)>
  # DEBUG iter$_M_nodeD.52928 => iter$_M_node_39
  # DEBUG D#119ptD.0 => &this_14(D)->_in_reqD.37895
  # DEBUG D#86ptD.0 => D#119ptD.0
  # DEBUG __nD.52869 => _16
  # DEBUG thisD.52870 => D#86ptD.0
  # DEBUG thisD.52864 => NULL
  # DEBUG thisD.52865 => D#112ptD.0
  # DEBUG thisD.52815 => NULL
  # DEBUG __xD.52814 => _86
  # DEBUG thisD.52861 => &iterD.42692
  # DEBUG __xD.52862 => &D.42698
  # DEBUG thisD.52875 => &iterD.42692
  # DEBUG thisD.52876 => iter$_M_node_39
  # DEBUG D#117ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)iter$_M_node_39]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#117ptD.0
  # VUSE <.MEM_75>
  _22 = MEM[(const struct pairD.37146 *)iter$_M_node_39 + 32B].secondD.42484.in_priD.35382;
  # DEBUG thisD.52872 => &iterD.42692
  # DEBUG thisD.52873 => iter$_M_node_39
  # DEBUG D#118ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)iter$_M_node_39]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#118ptD.0
  # VUSE <.MEM_75>
  _23 = MEM[(const struct pairD.37146 *)iter$_M_node_39 + 32B].secondD.42484.portD.35380;
  # .MEM_24 = VDEF <.MEM_75>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _25 = _ZNSolsEiD.21643 (os_1, _23);
  # DEBUG __outD.52878 => _25
  # DEBUG __sD.52879 => "@"
  # DEBUG __sD.52880 => "@"
  # .MEM_69 = VDEF <.MEM_24>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_25, "@", 1);
  # .MEM_26 = VDEF <.MEM_69>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _27 = _ZNSolsEiD.21643 (_25, _22);
  # DEBUG __outD.62571 => _27
  # DEBUG __sD.62572 => " "
  # DEBUG __sD.62573 => " "
  # .MEM_113 = VDEF <.MEM_26>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_27, " ", 1);
  # DEBUG thisD.52882 => &iterD.42692
  # VUSE <.MEM_113>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  iter$_M_node_61 = _ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_baseD.24847 (iter$_M_node_39);
  # DEBUG iter$_M_nodeD.52928 => iter$_M_node_61
  # DEBUG iter$_M_nodeD.52928 => iter$_M_node_61
  # DEBUG D#119ptD.0 => &this_14(D)->_in_reqD.37895
  # VUSE <.MEM_113>
  # PT = nonlocal escaped 
  _57 = MEM[(struct mapD.37148 * *)this_14(D) + 256B];
  # DEBUG D#86ptD.0 => D#119ptD.0
  # DEBUG __nD.52869 => _16
  # DEBUG thisD.52870 => D#86ptD.0
  # PT = nonlocal escaped 
  _17 = _57 + _42;
  # DEBUG thisD.52864 => NULL
  # DEBUG thisD.52865 => D#112ptD.0
  # PT = nonlocal escaped 
  _21 = &MEM[(const struct _Rb_treeD.41462 *)_17]._M_implD.41540._M_headerD.41695;
  # DEBUG thisD.52815 => NULL
  # DEBUG __xD.52814 => _21
  # DEBUG thisD.52861 => &iterD.42692
  # DEBUG __xD.52862 => &D.42698
  if (_21 != iter$_M_node_61)
    goto <bb 12>;
  else
    goto <bb 34>;
;;    succ:       12 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 11, next block 12, flags: (NEW)
;;    pred:       11 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_89 = PHI <.MEM_113(11)>
  goto <bb 9>;
;;    succ:       9 [100.0%]  (FALLTHRU)

;;   basic block 12, loop depth 2, count 0, freq 8281, maybe hot
;;    prev block 34, next block 13, flags: (NEW)
;;    pred:       11 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 3103, maybe hot
;;    prev block 12, next block 33, flags: (NEW, REACHABLE)
;;    pred:       7 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_6 = PHI <.MEM_74(7), .MEM_115(9)>
  # prephitmp_92 = PHI <prephitmp_38(7), pretmp_91(9)>
  input_31 = input_134 + 1;
  # DEBUG inputD.42693 => input_31
  # DEBUG inputD.42693 => input_31
  if (input_31 >= prephitmp_92)
    goto <bb 33>;
  else
    goto <bb 14>;
;;    succ:       33 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 279, maybe hot
;;    prev block 13, next block 14, flags: (NEW)
;;    pred:       13 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_28 = PHI <.MEM_6(13)>
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU)

;;   basic block 14, loop depth 1, count 0, freq 2824, maybe hot
;;    prev block 33, next block 31, flags: (NEW)
;;    pred:       13 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 279, maybe hot
;;    prev block 14, next block 15, flags: (NEW)
;;    pred:       23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_96 = PHI <.MEM_9(23)>
;;    succ:       15 [100.0%]  (FALLTHRU)

;;   basic block 15, loop depth 0, count 0, freq 307, maybe hot
;;    prev block 31, next block 16, flags: (NEW, REACHABLE)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU)
  # .MEM_124 = PHI <.MEM_117(5), .MEM_96(31)>
  # DEBUG __outD.52921 => os_1
  # DEBUG __sD.52922 => "]."
  # DEBUG __sD.52923 => "]."
  # .MEM_71 = VDEF <.MEM_124>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (os_1, "].", 2);
  # DEBUG thisD.52925 => os_1
  # DEBUG __pfD.52926 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.21775
  # DEBUG __osD.62599 => os_1
  # VUSE <.MEM_71>
  # PT = nonlocal escaped 
  _51 = MEM[(struct basic_ostreamD.7361 *)os_1]._vptr.basic_ostreamD.21735;
  # VUSE <.MEM_71>
  _83 = MEM[(long intD.12 *)_51 + -24B];
  # RANGE [0, 18446744073709551615]
  _84 = (sizetype) _83;
  # PT = nonlocal { D.23717 } (nonlocal, escaped)
  _85 = os_1 + _84;
  # DEBUG thisD.62602 => _85
  # DEBUG __cD.62603 => 10
  # VUSE <.MEM_71>
  # PT = nonlocal escaped 
  _72 = MEM[(const struct basic_iosD.7355 *)_85]._M_ctypeD.20959;
  # DEBUG __fD.62604 => _72
  if (_72 == 0B)
    goto <bb 25>;
  else
    goto <bb 26>;
;;    succ:       25 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 279, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 3103, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                24 [100.0%]  (FALLTHRU,EXECUTABLE)
  # output_73 = PHI <0(16), output_52(24)>
  # .MEM_76 = PHI <.MEM_117(16), .MEM_9(24)>
  # prephitmp_101 = PHI <_102(16), prephitmp_82(24)>
  # DEBUG outputD.42699 => output_73
  # RANGE [0, 18446744073709551615]
  _34 = (long unsigned intD.14) output_73;
  # DEBUG D#120ptD.0 => &this_14(D)->_out_reqD.37896
  # VUSE <.MEM_76>
  # PT = nonlocal escaped 
  _58 = MEM[(struct mapD.37148 * *)this_14(D) + 280B];
  # DEBUG D#86ptD.0 => D#120ptD.0
  # DEBUG __nD.52888 => _34
  # DEBUG thisD.52889 => D#86ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _62 = _34 * 48;
  # PT = nonlocal escaped 
  _63 = _58 + _62;
  # DEBUG thisD.52884 => NULL
  # VUSE <.MEM_76>
  _29 = MEM[(long unsigned intD.14 *)_63 + 40B];
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.52885 => D#93ptD.0
  if (_29 != 0)
    goto <bb 18>;
  else
    goto <bb 23>;
;;    succ:       18 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_36 = VDEF <.MEM_76>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _37 = _ZNSolsEiD.21643 (os_1, output_73);
  # DEBUG __outD.62587 => _37
  # DEBUG __sD.62588 => " -> "
  # DEBUG __sD.62589 => " -> "
  # .MEM_119 = VDEF <.MEM_36>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_37, " -> ", 4);
  # DEBUG __outD.62583 => os_1
  # DEBUG __sD.62584 => "[ "
  # DEBUG __sD.62585 => "[ "
  # .MEM_121 = VDEF <.MEM_119>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (os_1, "[ ", 2);
  # DEBUG D#121ptD.0 => &this_14(D)->_out_reqD.37896
  # VUSE <.MEM_121>
  # PT = nonlocal escaped 
  _59 = MEM[(struct mapD.37148 * *)this_14(D) + 280B];
  # DEBUG D#86ptD.0 => D#121ptD.0
  # DEBUG __nD.52895 => _34
  # DEBUG thisD.52896 => D#86ptD.0
  # PT = nonlocal escaped 
  _65 = _59 + _62;
  # DEBUG thisD.52891 => NULL
  # VUSE <.MEM_121>
  # PT = nonlocal escaped 
  iter$_M_node_64 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_65 + 24B];
  # DEBUG D#113ptD.0 => D#114ptD.0
  # DEBUG thisD.52835 => D#113ptD.0
  # DEBUG thisD.52827 => NULL
  # DEBUG __xD.52826 => iter$_M_node_64
  # DEBUG iter$_M_nodeD.52928 => iter$_M_node_64
  # DEBUG iter$_M_nodeD.52928 => iter$_M_node_64
  # DEBUG D#124ptD.0 => &this_14(D)->_out_reqD.37896
  # DEBUG D#86ptD.0 => D#124ptD.0
  # DEBUG __nD.52906 => _34
  # DEBUG thisD.52907 => D#86ptD.0
  # DEBUG thisD.52901 => NULL
  # DEBUG thisD.52902 => D#112ptD.0
  # PT = nonlocal escaped 
  _126 = &MEM[(const struct _Rb_treeD.41462 *)_65]._M_implD.41540._M_headerD.41695;
  # DEBUG thisD.52815 => NULL
  # DEBUG __xD.52814 => _126
  # DEBUG thisD.52898 => &iterD.42692
  # DEBUG __xD.52899 => &D.42701
  if (iter$_M_node_64 != _126)
    goto <bb 20>;
  else
    goto <bb 19>;
;;    succ:       20 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [9.0%]  (FALSE_VALUE,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU)
  # .MEM_122 = PHI <.MEM_121(18), .MEM_13(32)>
  # DEBUG __outD.62595 => os_1
  # DEBUG __sD.62596 => "]  "
  # DEBUG __sD.62597 => "]  "
  # .MEM_125 = VDEF <.MEM_122>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (os_1, "]  ", 3);
  # VUSE <.MEM_125>
  pretmp_50 = this_14(D)->D.37974._outputsD.34630;
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       18 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 20, next block 32, flags: (NEW)
;;    pred:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_77 = PHI <.MEM_121(20), .MEM_123(22)>
  # PT = nonlocal escaped 
  # iter$_M_node_78 = PHI <iter$_M_node_64(20), iter$_M_node_68(22)>
  # DEBUG iter$_M_nodeD.52928 => iter$_M_node_78
  # DEBUG D#124ptD.0 => &this_14(D)->_out_reqD.37896
  # DEBUG D#86ptD.0 => D#124ptD.0
  # DEBUG __nD.52906 => _34
  # DEBUG thisD.52907 => D#86ptD.0
  # DEBUG thisD.52901 => NULL
  # DEBUG thisD.52902 => D#112ptD.0
  # DEBUG thisD.52815 => NULL
  # DEBUG __xD.52814 => _126
  # DEBUG thisD.52898 => &iterD.42692
  # DEBUG __xD.52899 => &D.42701
  # DEBUG thisD.52912 => &iterD.42692
  # DEBUG thisD.52913 => iter$_M_node_78
  # DEBUG D#122ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)iter$_M_node_78]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#122ptD.0
  # VUSE <.MEM_77>
  _44 = MEM[(const struct pairD.37146 *)iter$_M_node_78 + 32B].secondD.42484.out_priD.35383;
  # DEBUG thisD.52909 => &iterD.42692
  # DEBUG thisD.52910 => iter$_M_node_78
  # DEBUG D#123ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)iter$_M_node_78]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#123ptD.0
  # VUSE <.MEM_77>
  _45 = MEM[(const struct pairD.37146 *)iter$_M_node_78 + 32B].secondD.42484.portD.35380;
  # .MEM_46 = VDEF <.MEM_77>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _47 = _ZNSolsEiD.21643 (os_1, _45);
  # DEBUG __outD.52915 => _47
  # DEBUG __sD.52916 => "@"
  # DEBUG __sD.52917 => "@"
  # .MEM_70 = VDEF <.MEM_46>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_47, "@", 1);
  # .MEM_48 = VDEF <.MEM_70>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _49 = _ZNSolsEiD.21643 (_47, _44);
  # DEBUG __outD.62591 => _49
  # DEBUG __sD.62592 => " "
  # DEBUG __sD.62593 => " "
  # .MEM_123 = VDEF <.MEM_48>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_49, " ", 1);
  # DEBUG thisD.52919 => &iterD.42692
  # VUSE <.MEM_123>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  iter$_M_node_68 = _ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_baseD.24847 (iter$_M_node_78);
  # DEBUG iter$_M_nodeD.52928 => iter$_M_node_68
  # DEBUG iter$_M_nodeD.52928 => iter$_M_node_68
  # DEBUG D#124ptD.0 => &this_14(D)->_out_reqD.37896
  # VUSE <.MEM_123>
  # PT = nonlocal escaped 
  _60 = MEM[(struct mapD.37148 * *)this_14(D) + 280B];
  # DEBUG D#86ptD.0 => D#124ptD.0
  # DEBUG __nD.52906 => _34
  # DEBUG thisD.52907 => D#86ptD.0
  # PT = nonlocal escaped 
  _67 = _60 + _62;
  # DEBUG thisD.52901 => NULL
  # DEBUG thisD.52902 => D#112ptD.0
  # PT = nonlocal escaped 
  _66 = &MEM[(const struct _Rb_treeD.41462 *)_67]._M_implD.41540._M_headerD.41695;
  # DEBUG thisD.52815 => NULL
  # DEBUG __xD.52814 => _66
  # DEBUG thisD.52898 => &iterD.42692
  # DEBUG __xD.52899 => &D.42701
  if (_66 != iter$_M_node_68)
    goto <bb 22>;
  else
    goto <bb 32>;
;;    succ:       22 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 32, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 21, next block 22, flags: (NEW)
;;    pred:       21 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_13 = PHI <.MEM_123(21)>
  goto <bb 19>;
;;    succ:       19 [100.0%]  (FALLTHRU)

;;   basic block 22, loop depth 2, count 0, freq 8281, maybe hot
;;    prev block 32, next block 23, flags: (NEW)
;;    pred:       21 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 21>;
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 3103, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       17 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_9 = PHI <.MEM_76(17), .MEM_125(19)>
  # prephitmp_82 = PHI <prephitmp_101(17), pretmp_50(19)>
  output_52 = output_73 + 1;
  # DEBUG outputD.42699 => output_52
  # DEBUG outputD.42699 => output_52
  if (output_52 >= prephitmp_82)
    goto <bb 31>;
  else
    goto <bb 24>;
;;    succ:       31 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 1, count 0, freq 2824, maybe hot
;;    prev block 23, next block 25, flags: (NEW)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       15 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_135 = VDEF <.MEM_71>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__throw_bad_castvD.2851 ();
;;    succ:      

;;   basic block 26, loop depth 0, count 0, freq 307, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       15 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62606 => _72
  # DEBUG __cD.62605 => 10
  # VUSE <.MEM_71>
  _90 = MEM[(const struct ctypeD.7662 *)_72]._M_widen_okD.17874;
  if (_90 != 0)
    goto <bb 27>;
  else
    goto <bb 28>;
;;    succ:       27 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 187, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       26 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_71>
  _93 = MEM[(const struct ctypeD.7662 *)_72]._M_widenD.17875[10];
  pretmp_4 = (intD.9) _93;
  goto <bb 30>;
;;    succ:       30 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 120, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       26 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62608 => _72
  # DEBUG __cD.62609 => 10
  # .MEM_127 = VDEF <.MEM_71>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.17982 (_72);
  # VUSE <.MEM_127>
  # PT = nonlocal escaped 
  _98 = MEM[(const struct ctypeD.7662 *)_72].D.18015._vptr.facetD.14633;
  # VUSE <.MEM_127>
  # PT = nonlocal escaped 
  _99 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_98 + 48B];
  # PT = anything 
  PROF_103 = [obj_type_ref] OBJ_TYPE_REF(_99;(const struct ctypeD.7662)_72->6);
  if (PROF_103 == _ZNKSt5ctypeIcE8do_widenEcD.17963)
    goto <bb 30>;
  else
    goto <bb 29>;
;;    succ:       30 [80.2%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [19.8%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 24, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       28 [19.8%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_128 = VDEF <.MEM_127>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _105 = OBJ_TYPE_REF(_99;(const struct ctypeD.7662)_72->6) (_72, 10);
  pretmp_2 = (intD.9) _105;
;;    succ:       30 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 307, maybe hot
;;    prev block 29, next block 1, flags: (NEW, REACHABLE)
;;    pred:       27 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                28 [80.2%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_108 = PHI <.MEM_71(27), .MEM_127(28), .MEM_128(29)>
  # RANGE [-128, 127]
  # prephitmp_54 = PHI <pretmp_4(27), 10(28), pretmp_2(29)>
  # .MEM_132 = VDEF <.MEM_108>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _88 = _ZNSo3putEcD.21670 (os_1, prephitmp_54);
  # DEBUG __osD.62600 => _88
  # .MEM_133 = VDEF <.MEM_132>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZNSo5flushEvD.21681 (_88);
  # DEBUG D#125ptD.0 => {CLOBBER}
  # DEBUG iter$_M_nodeD.52928 => D#125ptD.0
  # VUSE <.MEM_133>
  return;
;;    succ:       EXIT [100.0%] 

}



;; Function virtual int SparseAllocator::ReadRequest(int, int) const (_ZNK15SparseAllocator11ReadRequestEii, funcdef_no=1774, decl_uid=37907, cgraph_uid=444, symbol_order=445)


Pass statistics:
----------------

virtual int SparseAllocator::ReadRequest(int, int) const (const struct SparseAllocatorD.36303 * const thisD.42344, intD.9 inD.42341, intD.9 outD.42342)
{
  const struct _Rb_tree_nodeD.41466 * __yD.62711;
  boolD.2757 foundD.62699;
  boolD.2757 D.62713;
  struct sRequestD.35378 rD.42346;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _4;
  intD.9 (*__vtbl_ptr_typeD.2760) () _5;
  boolD.2757 _9;
  voidD.45 * PROF_13;
  boolD.2757 _15;
  intD.9 _17;
  intD.9 _18;
  long unsigned intD.14 _19;
  struct mapD.37148 * const _20;
  long unsigned intD.14 _21;
  const struct mapD.37148 & _22;
  const intD.9 _26;
  const intD.9 _30;
  intD.9 pretmp_35;
  intD.9 pretmp_48;
  intD.9 prephitmp_50;

;;   basic block 2, loop depth 0, count 0, freq 1127, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _4 = this_3(D)->D.37974.D.35470._vptr.ModuleD.30546;
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _5 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_4 + 40B];
  # PT = anything 
  PROF_13 = [obj_type_ref] OBJ_TYPE_REF(_5;(const struct SparseAllocatorD.36303)this_3(D)->5);
  if (PROF_13 == _ZNK15SparseAllocator11ReadRequestERN9Allocator8sRequestEiiD.37912)
    goto <bb 3>;
  else
    goto <bb 20>;
;;    succ:       3 [80.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [20.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [80.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.62695 => this_3(D)
  # DEBUG reqD.62696 => &rD.42346
  # DEBUG inD.62697 => in_6(D)
  # DEBUG outD.62698 => out_7(D)
  if (in_6(D) < 0)
    goto <bb 5>;
  else
    goto <bb 4>;
;;    succ:       5 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  _17 = this_3(D)->D.37974._inputsD.34629;
  if (in_6(D) >= _17)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_41 = VDEF <.MEM_2(D)>
  # USE = nonlocal { D.42346 D.42354 } (nonlocal, escaped)
  # CLB = nonlocal { D.42346 D.42354 } (nonlocal, escaped)
  __assert_failD.14402 ("( in >= 0 ) && ( in < _inputs )", "allocators/allocator.cpp", 303, &_ZZNK15SparseAllocator11ReadRequestERN9Allocator8sRequestEiiE19__PRETTY_FUNCTION__D.42354);
;;    succ:      

;;   basic block 6, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  if (out_7(D) < 0)
    goto <bb 8>;
  else
    goto <bb 7>;
;;    succ:       8 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  _18 = this_3(D)->D.37974._outputsD.34630;
  if (out_7(D) >= _18)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_40 = VDEF <.MEM_2(D)>
  # USE = nonlocal { D.42346 D.42354 } (nonlocal, escaped)
  # CLB = nonlocal { D.42346 D.42354 } (nonlocal, escaped)
  __assert_failD.14402 ("( out >= 0 ) && ( out < _outputs )", "allocators/allocator.cpp", 304, &_ZZNK15SparseAllocator11ReadRequestERN9Allocator8sRequestEiiE19__PRETTY_FUNCTION__D.42354);
;;    succ:      

;;   basic block 9, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       7 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _19 = (long unsigned intD.14) in_6(D);
  # DEBUG D#340ptD.0 => &this_3(D)->_in_reqD.37895
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _20 = MEM[(struct mapD.37148 * *)this_3(D) + 256B];
  # DEBUG D#86ptD.0 => D#340ptD.0
  # DEBUG __nD.62702 => _19
  # DEBUG thisD.62701 => D#86ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _21 = _19 * 48;
  # PT = nonlocal escaped 
  _22 = _20 + _21;
  # DEBUG thisD.62704 => NULL
  # DEBUG __xD.62703 => &outD.62698
  # DEBUG thisD.62706 => D#339ptD.0
  # DEBUG __kD.62705 => &outD.62698
  # DEBUG thisD.62708 => D#339ptD.0
  # PT = nonlocal escaped 
  __y_23 = &MEM[(const struct _Rb_treeD.41462 *)_22]._M_implD.41540._M_headerD.41695;
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_24 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_22 + 16B];
  # DEBUG D#110ptD.0 => D#339ptD.0
  # DEBUG thisD.54273 => D#110ptD.0
  # DEBUG D#335ptD.0 => D#339ptD.0
  # DEBUG __xD.62712 => NULL
  # DEBUG __yD.62711 => NULL
  # DEBUG __kD.62710 => &outD.62698
  # DEBUG __yD.62711 => __y_23
  # DEBUG __xD.62712 => __y_24
  if (__y_24 == 0B)
    goto <bb 21>;
  else
    goto <bb 12>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_34 = PHI <__y_27(14), __y_28(15)>
  # PT = nonlocal escaped 
  # __y_33 = PHI <__y_49(14), __y_44(15)>
  # DEBUG __yD.62711 => __y_33
  # DEBUG __xD.62712 => __y_34
  if (__y_34 == 0B)
    goto <bb 16>;
  else
    goto <bb 11>;
;;    succ:       16 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       12 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_49 = PHI <__y_24(12), __y_34(11)>
  # PT = nonlocal escaped 
  # __y_44 = PHI <__y_23(12), __y_33(11)>
  # DEBUG __yD.62711 => __y_44
  # DEBUG __xD.62712 => __y_49
  # DEBUG __xD.54243 => __y_49
  # DEBUG __xD.54209 => __y_49
  # DEBUG thisD.54210 => __y_49
  # DEBUG D#331ptD.0 => &__y_49->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54245 => D#331ptD.0
  # DEBUG thisD.54244 => D#173ptD.0
  # DEBUG D#332ptD.0 => &MEM[(const struct pairD.37146 &)__y_49 + 32].firstD.42483
  # DEBUG D#333ptD.0 => &D#334ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#333ptD.0
  # VUSE <.MEM_2(D)>
  _26 = MEM[(const intD.9 &)__y_49 + 32];
  # DEBUG D#96ptD.0 => D#332ptD.0
  # DEBUG D#97ptD.0 => &outD.62698
  # DEBUG thisD.54246 => D#95ptD.0
  # DEBUG __xD.54247 => D#96ptD.0
  # DEBUG __yD.54248 => D#97ptD.0
  if (out_7(D) <= _26)
    goto <bb 14>;
  else
    goto <bb 15>;
;;    succ:       14 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.62711 => __y_49
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_27 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_49 + 16B];
  # DEBUG D#171ptD.0 => __y_49
  # DEBUG __xD.54242 => D#171ptD.0
  # DEBUG __xD.62712 => NULL
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       13 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_28 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_49 + 24B];
  # DEBUG D#172ptD.0 => __y_49
  # DEBUG __xD.54241 => D#172ptD.0
  # DEBUG __xD.62712 => NULL
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_29 = PHI <__y_33(10)>
  # DEBUG thisD.54240 => NULL
  # DEBUG __xD.54239 => __y_29
  # DEBUG __j$_M_nodeD.54291 => __y_29
  # DEBUG thisD.54261 => D#339ptD.0
  # DEBUG thisD.54263 => NULL
  # DEBUG __xD.54262 => __y_23
  # DEBUG thisD.54258 => &__jD.62707
  # DEBUG __xD.54259 => NULL
  if (__y_23 == __y_29)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 686, maybe hot
;;   Invalid sum of incoming frequencies 437, should be 686
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_11 = PHI <.MEM_2(D)(16), .MEM_2(D)(18), .MEM_36(21)>
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       16 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.54283 => __y_29
  # DEBUG __xD.53214 => __y_29
  # DEBUG thisD.53215 => __y_29
  # DEBUG D#174ptD.0 => &__y_29->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.54285 => D#174ptD.0
  # DEBUG thisD.54284 => D#173ptD.0
  # DEBUG D#336ptD.0 => &MEM[(const struct pairD.37146 &)__y_29 + 32].firstD.42483
  # DEBUG D#338ptD.0 => &MEM[(const struct _Rb_treeD.41462 *)D#339ptD.0]._M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#338ptD.0
  # DEBUG D#96ptD.0 => &outD.62698
  # VUSE <.MEM_2(D)>
  _30 = MEM[(const intD.9 &)__y_29 + 32];
  # DEBUG D#97ptD.0 => D#336ptD.0
  # DEBUG thisD.54281 => D#95ptD.0
  # DEBUG __xD.54280 => D#96ptD.0
  # DEBUG __yD.54279 => D#97ptD.0
  if (out_7(D) < _30)
    goto <bb 17>;
  else
    goto <bb 19>;
;;    succ:       17 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 809, maybe hot
;;   Invalid sum of incoming frequencies 383, should be 809
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#337ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.54291 => D#337ptD.0
  # DEBUG match$_M_nodeD.54341 => __y_29
  # DEBUG D#341ptD.0 => &this_3(D)->_in_reqD.37895
  # DEBUG D#86ptD.0 => D#341ptD.0
  # DEBUG __nD.54318 => _19
  # DEBUG thisD.54319 => D#86ptD.0
  # DEBUG thisD.54313 => NULL
  # DEBUG thisD.54314 => D#112ptD.0
  # DEBUG thisD.52815 => NULL
  # DEBUG __xD.52814 => __y_23
  # DEBUG thisD.54310 => &matchD.62700
  # DEBUG __xD.54311 => NULL
  # DEBUG thisD.54338 => &matchD.62700
  # DEBUG thisD.54339 => __y_29
  # DEBUG D#342ptD.0 => &__y_29->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#342ptD.0
  # .MEM_38 = VDEF <.MEM_2(D)>
  rD.42346 = MEM[(const struct pairD.37146 *)__y_29 + 32B].secondD.42484;
  # DEBUG foundD.62699 => 1
  # VUSE <.MEM_38>
  pretmp_35 = rD.42346.labelD.35381;
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 225, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       2 [20.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_37 = VDEF <.MEM_2(D)>
  # USE = nonlocal { D.42346 D.42354 } (nonlocal, escaped)
  # CLB = nonlocal { D.42346 D.42354 } (nonlocal, escaped)
  _15 = OBJ_TYPE_REF(_5;(const struct SparseAllocatorD.36303)this_3(D)->5) (this_3(D), &rD.42346, in_6(D), out_7(D));
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 0
;;   Invalid sum of incoming frequencies 306, should be 0
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # _9 = PHI <_15(20), 0(9)>
  # .MEM_36 = PHI <.MEM_37(20), .MEM_2(D)(9)>
  if (_9 != 0)
    goto <bb 22>;
  else
    goto <bb 17>;
;;    succ:       17 [100.0%]  (FALSE_VALUE,EXECUTABLE)
;;                22 (TRUE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 0
;;    prev block 21, next block 23, flags: (NEW)
;;    pred:       21 (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_36>
  pretmp_48 = rD.42346.labelD.35381;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 1125, maybe hot
;;   Invalid sum of incoming frequencies 1495, should be 1125
;;    prev block 22, next block 1, flags: (NEW, REACHABLE)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_36(22), .MEM_11(17), .MEM_38(19)>
  # prephitmp_50 = PHI <pretmp_48(22), -1(17), pretmp_35(19)>
  # .MEM_12 = VDEF <.MEM_1>
  rD.42346 ={v} {CLOBBER};
  # VUSE <.MEM_12>
  return prephitmp_50;
;;    succ:       EXIT [100.0%] 

}


Creating dr for this_3(D)->D.37974.D.35470._vptr.Module
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *this_3(D)
	Access function 0: 0
	Access function 1: 0
	Access function 2: 0
Creating dr for MEM[(int (*__vtbl_ptr_type) () *)_4 + 40B]
analyze_innermost: success.
	base_address: _4
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(int (*__vtbl_ptr_type) () *)_4 + 40B]
Creating dr for this_3(D)->D.37974._inputs
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: *this_3(D)
	Access function 0: 768
	Access function 1: 0
Creating dr for this_3(D)->D.37974._outputs
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 100
	step: 0
	aligned to: 256
	base_object: *this_3(D)
	Access function 0: 800
	Access function 1: 0
Creating dr for MEM[(struct map * *)this_3(D) + 256B]
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_3(D) + 256B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_22 + 16B]
analyze_innermost: success.
	base_address: _20 + (long unsigned int) in_6(D) * 48
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)_22 + 16B]
Creating dr for MEM[(const int &)__y_49 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_49 + 32]
Creating dr for MEM[(const int &)__y_49 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_49 + 32]
Creating dr for MEM[(const int &)__y_49 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_49 + 32]
Creating dr for MEM[(const int &)__y_49 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_49 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_49 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_49 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_49 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_49 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_49 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_49 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_49 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_49 + 24B]
Creating dr for MEM[(const int &)__y_49 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_49 + 32]
Creating dr for MEM[(const int &)__y_49 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_49 + 32]
Creating dr for MEM[(const int &)__y_49 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_49 + 32]
Creating dr for MEM[(const int &)__y_49 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_49 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_49 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_49 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_49 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_49 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_49 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_49 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_49 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_49 + 24B]
Applying pattern match.pd:750, generic-match.c:1467
Applying pattern match.pd:397, generic-match.c:4039
Creating dr for MEM[(const int &)__y_29 + 32]
analyze_innermost: success.
	base_address: __y_29
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__y_29 + 32]
Creating dr for MEM[(const struct pair *)__y_29 + 32B].second
analyze_innermost: success.
	base_address: __y_29
	offset from base address: 0
	constant offset from base address: 36
	step: 0
	aligned to: 256
	base_object: MEM[(const struct pair *)__y_29 + 32B]
	Access function 0: 32
Creating dr for r
analyze_innermost: success.
	base_address: &r
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: r
Creating dr for r.label
analyze_innermost: success.
	base_address: &r
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: r
	Access function 0: 32
Creating dr for r.label
analyze_innermost: success.
	base_address: &r
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: r
	Access function 0: 32

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:20)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:26, LOOPS:1, CONDITIONS:11, STMTS:122)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_20 })
  {
    <bb 2>:
    # VUSE <.MEM_2(D)>
    _4 = this_3(D)->D.37974.D.35470._vptr.Module;
    # VUSE <.MEM_2(D)>
    _5 = MEM[(int (*__vtbl_ptr_type) () *)_4 + 40B];
    PROF_13 = [obj_type_ref] OBJ_TYPE_REF(_5;(const struct SparseAllocator)this_3(D)->5);
    if (PROF_13 == ReadRequest)
      goto <bb 3>;
    else
      goto <bb 20>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_5 bb_4 })
  {
    <bb 3>:
    # DEBUG this => this_3(D)
    # DEBUG req => &r
    # DEBUG in => in_6(D)
    # DEBUG out => out_7(D)
    if (in_6(D) < 0)
      goto <bb 5>;
    else
      goto <bb 4>;

  }
  bb_4 (preds = {bb_3 }, succs = {bb_5 bb_6 })
  {
    <bb 4>:
    # VUSE <.MEM_2(D)>
    _17 = this_3(D)->D.37974._inputs;
    if (in_6(D) >= _17)
      goto <bb 5>;
    else
      goto <bb 6>;

  }
  bb_5 (preds = {bb_4 bb_3 }, succs = {})
  {
    <bb 5>:
    # .MEM_41 = VDEF <.MEM_2(D)>
    __assert_fail ("( in >= 0 ) && ( in < _inputs )", "allocators/allocator.cpp", 303, &__PRETTY_FUNCTION__);

  }
  bb_6 (preds = {bb_4 }, succs = {bb_8 bb_7 })
  {
    <bb 6>:
    if (out_7(D) < 0)
      goto <bb 8>;
    else
      goto <bb 7>;

  }
  bb_7 (preds = {bb_6 }, succs = {bb_8 bb_9 })
  {
    <bb 7>:
    # VUSE <.MEM_2(D)>
    _18 = this_3(D)->D.37974._outputs;
    if (out_7(D) >= _18)
      goto <bb 8>;
    else
      goto <bb 9>;

  }
  bb_8 (preds = {bb_7 bb_6 }, succs = {})
  {
    <bb 8>:
    # .MEM_40 = VDEF <.MEM_2(D)>
    __assert_fail ("( out >= 0 ) && ( out < _outputs )", "allocators/allocator.cpp", 304, &__PRETTY_FUNCTION__);

  }
  bb_9 (preds = {bb_7 }, succs = {bb_21 bb_12 })
  {
    <bb 9>:
    _19 = (long unsigned int) in_6(D);
    # DEBUG D#340 => &this_3(D)->_in_req
    # VUSE <.MEM_2(D)>
    _20 = MEM[(struct map * *)this_3(D) + 256B];
    # DEBUG D#86 => D#340
    # DEBUG __n => _19
    # DEBUG this => D#86
    _21 = _19 * 48;
    _22 = _20 + _21;
    # DEBUG this => NULL
    # DEBUG __x => &out
    # DEBUG this => D#339
    # DEBUG __k => &out
    # DEBUG this => D#339
    __y_23 = &MEM[(const struct _Rb_tree *)_22]._M_impl._M_header;
    # VUSE <.MEM_2(D)>
    __y_24 = MEM[(struct _Rb_tree_node_base * *)_22 + 16B];
    # DEBUG D#110 => D#339
    # DEBUG this => D#110
    # DEBUG D#335 => D#339
    # DEBUG __x => NULL
    # DEBUG __y => NULL
    # DEBUG __k => &out
    # DEBUG __y => __y_23
    # DEBUG __x => __y_24
    if (__y_24 == 0B)
      goto <bb 21>;
    else
      goto <bb 12>;

  }
  bb_12 (preds = {bb_9 }, succs = {bb_13 })
  {
    <bb 12>:

  }
  bb_16 (preds = {bb_10 }, succs = {bb_24 })
  {
    <bb 16>:
    # __y_29 = PHI <__y_33(10)>

  }
  bb_24 (preds = {bb_16 }, succs = {bb_17 bb_18 })
  {
    <bb 24>:
    # DEBUG this => NULL
    # DEBUG __x => __y_29
    # DEBUG __j$_M_node => __y_29
    # DEBUG this => D#339
    # DEBUG this => NULL
    # DEBUG __x => __y_23
    # DEBUG this => &__j
    # DEBUG __x => NULL
    if (__y_23 == __y_29)
      goto <bb 17>;
    else
      goto <bb 18>;

  }
  bb_17 (preds = {bb_24 bb_18 bb_21 }, succs = {bb_25 })
  {
    <bb 17>:
    # .MEM_11 = PHI <.MEM_2(D)(24), .MEM_2(D)(18), .MEM_36(21)>

  }
  bb_25 (preds = {bb_17 }, succs = {bb_23 })
  {
    <bb 25>:
    goto <bb 23>;

  }
  bb_18 (preds = {bb_24 }, succs = {bb_17 bb_19 })
  {
    <bb 18>:
    # DEBUG __x => __y_29
    # DEBUG __x => __y_29
    # DEBUG this => __y_29
    # DEBUG D#174 => &__y_29->_M_value_field
    # DEBUG __r => D#174
    # DEBUG __x => D#174
    # DEBUG this => D#173
    # DEBUG D#336 => &MEM[(const struct pair &)__y_29 + 32].first
    # DEBUG D#338 => &MEM[(const struct _Rb_tree *)D#339]._M_impl._M_key_compare
    # DEBUG D#95 => D#338
    # DEBUG D#96 => &out
    # VUSE <.MEM_2(D)>
    _30 = MEM[(const int &)__y_29 + 32];
    # DEBUG D#97 => D#336
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    if (out_7(D) < _30)
      goto <bb 17>;
    else
      goto <bb 19>;

  }
  bb_19 (preds = {bb_18 }, succs = {bb_23 })
  {
    <bb 19>:
    # DEBUG D#337 => {CLOBBER}
    # DEBUG __j$_M_node => D#337
    # DEBUG match$_M_node => __y_29
    # DEBUG D#341 => &this_3(D)->_in_req
    # DEBUG D#86 => D#341
    # DEBUG __n => _19
    # DEBUG this => D#86
    # DEBUG this => NULL
    # DEBUG this => D#112
    # DEBUG this => NULL
    # DEBUG __x => __y_23
    # DEBUG this => &match
    # DEBUG __x => NULL
    # DEBUG this => &match
    # DEBUG this => __y_29
    # DEBUG D#342 => &__y_29->_M_value_field
    # DEBUG __r => D#342
    # .MEM_38 = VDEF <.MEM_2(D)>
    r = MEM[(const struct pair *)__y_29 + 32B].second;
    # DEBUG found => 1
    # VUSE <.MEM_38>
    pretmp_35 = r.label;
    goto <bb 23>;

  }
  bb_20 (preds = {bb_2 }, succs = {bb_21 })
  {
    <bb 20>:
    # .MEM_37 = VDEF <.MEM_2(D)>
    _15 = OBJ_TYPE_REF(_5;(const struct SparseAllocator)this_3(D)->5) (this_3(D), &r, in_6(D), out_7(D));

  }
  bb_21 (preds = {bb_20 bb_9 }, succs = {bb_17 bb_22 })
  {
    <bb 21>:
    # _9 = PHI <_15(20), 0(9)>
    # .MEM_36 = PHI <.MEM_37(20), .MEM_2(D)(9)>
    if (_9 != 0)
      goto <bb 22>;
    else
      goto <bb 17>;

  }
  bb_22 (preds = {bb_21 }, succs = {bb_23 })
  {
    <bb 22>:
    # VUSE <.MEM_36>
    pretmp_48 = r.label;

  }
  bb_23 (preds = {bb_22 bb_25 bb_19 }, succs = {bb_1 })
  {
    <bb 23>:
    # .MEM_1 = PHI <.MEM_36(22), .MEM_11(25), .MEM_38(19)>
    # prephitmp_50 = PHI <pretmp_48(22), -1(25), pretmp_35(19)>
    # .MEM_12 = VDEF <.MEM_1>
    r ={v} {CLOBBER};
    # VUSE <.MEM_12>
    return prephitmp_50;

  }
  loop_1 (header = 13, latch = 11, niter = )
  {
    bb_10 (preds = {bb_14 bb_15 }, succs = {bb_16 bb_11 })
    {
      <bb 10>:
      # __y_34 = PHI <__y_27(14), __y_28(15)>
      # __y_33 = PHI <__y_49(14), __y_44(15)>
      # DEBUG __y => __y_33
      # DEBUG __x => __y_34
      if (__y_34 == 0B)
        goto <bb 16>;
      else
        goto <bb 11>;

    }
    bb_11 (preds = {bb_10 }, succs = {bb_13 })
    {
      <bb 11>:
      goto <bb 13>;

    }
    bb_13 (preds = {bb_12 bb_11 }, succs = {bb_14 bb_15 })
    {
      <bb 13>:
      # __y_49 = PHI <__y_24(12), __y_34(11)>
      # __y_44 = PHI <__y_23(12), __y_33(11)>
      # DEBUG __y => __y_44
      # DEBUG __x => __y_49
      # DEBUG __x => __y_49
      # DEBUG __x => __y_49
      # DEBUG this => __y_49
      # DEBUG D#331 => &__y_49->_M_value_field
      # DEBUG __r => D#331
      # DEBUG __x => D#331
      # DEBUG this => D#173
      # DEBUG D#332 => &MEM[(const struct pair &)__y_49 + 32].first
      # DEBUG D#333 => &D#334->_M_impl._M_key_compare
      # DEBUG D#95 => D#333
      # VUSE <.MEM_2(D)>
      _26 = MEM[(const int &)__y_49 + 32];
      # DEBUG D#96 => D#332
      # DEBUG D#97 => &out
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      if (out_7(D) <= _26)
        goto <bb 14>;
      else
        goto <bb 15>;

    }
    bb_14 (preds = {bb_13 }, succs = {bb_10 })
    {
      <bb 14>:
      # DEBUG __y => __y_49
      # VUSE <.MEM_2(D)>
      __y_27 = MEM[(struct _Rb_tree_node_base * *)__y_49 + 16B];
      # DEBUG D#171 => __y_49
      # DEBUG __x => D#171
      # DEBUG __x => NULL
      goto <bb 10>;

    }
    bb_15 (preds = {bb_13 }, succs = {bb_10 })
    {
      <bb 15>:
      # VUSE <.MEM_2(D)>
      __y_28 = MEM[(struct _Rb_tree_node_base * *)__y_49 + 24B];
      # DEBUG D#172 => __y_49
      # DEBUG __x => D#172
      # DEBUG __x => NULL
      goto <bb 10>;

    }
  }
}

Pass statistics:
----------------

virtual int SparseAllocator::ReadRequest(int, int) const (const struct SparseAllocatorD.36303 * const thisD.42344, intD.9 inD.42341, intD.9 outD.42342)
{
  const struct _Rb_tree_nodeD.41466 * __yD.62711;
  boolD.2757 foundD.62699;
  boolD.2757 D.62713;
  struct sRequestD.35378 rD.42346;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _4;
  intD.9 (*__vtbl_ptr_typeD.2760) () _5;
  boolD.2757 _9;
  voidD.45 * PROF_13;
  boolD.2757 _15;
  intD.9 _17;
  intD.9 _18;
  long unsigned intD.14 _19;
  struct mapD.37148 * const _20;
  long unsigned intD.14 _21;
  const struct mapD.37148 & _22;
  const intD.9 _26;
  const intD.9 _30;
  intD.9 pretmp_35;
  intD.9 pretmp_48;
  intD.9 prephitmp_50;

;;   basic block 2, loop depth 0, count 0, freq 1127, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _4 = this_3(D)->D.37974.D.35470._vptr.ModuleD.30546;
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _5 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_4 + 40B];
  # PT = anything 
  PROF_13 = [obj_type_ref] OBJ_TYPE_REF(_5;(const struct SparseAllocatorD.36303)this_3(D)->5);
  if (PROF_13 == _ZNK15SparseAllocator11ReadRequestERN9Allocator8sRequestEiiD.37912)
    goto <bb 3>;
  else
    goto <bb 20>;
;;    succ:       3 [80.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [20.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [80.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.62695 => this_3(D)
  # DEBUG reqD.62696 => &rD.42346
  # DEBUG inD.62697 => in_6(D)
  # DEBUG outD.62698 => out_7(D)
  if (in_6(D) < 0)
    goto <bb 5>;
  else
    goto <bb 4>;
;;    succ:       5 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  _17 = this_3(D)->D.37974._inputsD.34629;
  if (in_6(D) >= _17)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_41 = VDEF <.MEM_2(D)>
  # USE = nonlocal { D.42346 D.42354 } (nonlocal, escaped)
  # CLB = nonlocal { D.42346 D.42354 } (nonlocal, escaped)
  __assert_failD.14402 ("( in >= 0 ) && ( in < _inputs )", "allocators/allocator.cpp", 303, &_ZZNK15SparseAllocator11ReadRequestERN9Allocator8sRequestEiiE19__PRETTY_FUNCTION__D.42354);
;;    succ:      

;;   basic block 6, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  if (out_7(D) < 0)
    goto <bb 8>;
  else
    goto <bb 7>;
;;    succ:       8 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  _18 = this_3(D)->D.37974._outputsD.34630;
  if (out_7(D) >= _18)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_40 = VDEF <.MEM_2(D)>
  # USE = nonlocal { D.42346 D.42354 } (nonlocal, escaped)
  # CLB = nonlocal { D.42346 D.42354 } (nonlocal, escaped)
  __assert_failD.14402 ("( out >= 0 ) && ( out < _outputs )", "allocators/allocator.cpp", 304, &_ZZNK15SparseAllocator11ReadRequestERN9Allocator8sRequestEiiE19__PRETTY_FUNCTION__D.42354);
;;    succ:      

;;   basic block 9, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       7 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _19 = (long unsigned intD.14) in_6(D);
  # DEBUG D#340ptD.0 => &this_3(D)->_in_reqD.37895
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _20 = MEM[(struct mapD.37148 * *)this_3(D) + 256B];
  # DEBUG D#86ptD.0 => D#340ptD.0
  # DEBUG __nD.62702 => _19
  # DEBUG thisD.62701 => D#86ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _21 = _19 * 48;
  # PT = nonlocal escaped 
  _22 = _20 + _21;
  # DEBUG thisD.62704 => NULL
  # DEBUG __xD.62703 => &outD.62698
  # DEBUG thisD.62706 => D#339ptD.0
  # DEBUG __kD.62705 => &outD.62698
  # DEBUG thisD.62708 => D#339ptD.0
  # PT = nonlocal escaped 
  __y_23 = &MEM[(const struct _Rb_treeD.41462 *)_22]._M_implD.41540._M_headerD.41695;
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_24 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_22 + 16B];
  # DEBUG D#110ptD.0 => D#339ptD.0
  # DEBUG thisD.54273 => D#110ptD.0
  # DEBUG D#335ptD.0 => D#339ptD.0
  # DEBUG __xD.62712 => NULL
  # DEBUG __yD.62711 => NULL
  # DEBUG __kD.62710 => &outD.62698
  # DEBUG __yD.62711 => __y_23
  # DEBUG __xD.62712 => __y_24
  if (__y_24 == 0B)
    goto <bb 21>;
  else
    goto <bb 12>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_34 = PHI <__y_27(14), __y_28(15)>
  # PT = nonlocal escaped 
  # __y_33 = PHI <__y_49(14), __y_44(15)>
  # DEBUG __yD.62711 => __y_33
  # DEBUG __xD.62712 => __y_34
  if (__y_34 == 0B)
    goto <bb 16>;
  else
    goto <bb 11>;
;;    succ:       16 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       12 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_49 = PHI <__y_24(12), __y_34(11)>
  # PT = nonlocal escaped 
  # __y_44 = PHI <__y_23(12), __y_33(11)>
  # DEBUG __yD.62711 => __y_44
  # DEBUG __xD.62712 => __y_49
  # DEBUG __xD.54243 => __y_49
  # DEBUG __xD.54209 => __y_49
  # DEBUG thisD.54210 => __y_49
  # DEBUG D#331ptD.0 => &__y_49->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54245 => D#331ptD.0
  # DEBUG thisD.54244 => D#173ptD.0
  # DEBUG D#332ptD.0 => &MEM[(const struct pairD.37146 &)__y_49 + 32].firstD.42483
  # DEBUG D#333ptD.0 => &D#334ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#333ptD.0
  # VUSE <.MEM_2(D)>
  _26 = MEM[(const intD.9 &)__y_49 + 32];
  # DEBUG D#96ptD.0 => D#332ptD.0
  # DEBUG D#97ptD.0 => &outD.62698
  # DEBUG thisD.54246 => D#95ptD.0
  # DEBUG __xD.54247 => D#96ptD.0
  # DEBUG __yD.54248 => D#97ptD.0
  if (out_7(D) <= _26)
    goto <bb 14>;
  else
    goto <bb 15>;
;;    succ:       14 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.62711 => __y_49
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_27 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_49 + 16B];
  # DEBUG D#171ptD.0 => __y_49
  # DEBUG __xD.54242 => D#171ptD.0
  # DEBUG __xD.62712 => NULL
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       13 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __y_28 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_49 + 24B];
  # DEBUG D#172ptD.0 => __y_49
  # DEBUG __xD.54241 => D#172ptD.0
  # DEBUG __xD.62712 => NULL
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 15, next block 24, flags: (NEW, REACHABLE)
;;    pred:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_29 = PHI <__y_33(10)>
;;    succ:       24 [100.0%]  (FALLTHRU)

;;   basic block 24, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 16, next block 17, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU)
  # DEBUG thisD.54240 => NULL
  # DEBUG __xD.54239 => __y_29
  # DEBUG __j$_M_nodeD.54291 => __y_29
  # DEBUG thisD.54261 => D#339ptD.0
  # DEBUG thisD.54263 => NULL
  # DEBUG __xD.54262 => __y_23
  # DEBUG thisD.54258 => &__jD.62707
  # DEBUG __xD.54259 => NULL
  if (__y_23 == __y_29)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 686, maybe hot
;;   Invalid sum of incoming frequencies 437, should be 686
;;    prev block 24, next block 25, flags: (NEW, REACHABLE)
;;    pred:       24 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_11 = PHI <.MEM_2(D)(24), .MEM_2(D)(18), .MEM_36(21)>
;;    succ:       25 [100.0%]  (FALLTHRU)

;;   basic block 25, loop depth 0, count 0, freq 686, maybe hot
;;    prev block 17, next block 18, flags: (NEW)
;;    pred:       17 [100.0%]  (FALLTHRU)
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 25, next block 19, flags: (NEW, REACHABLE)
;;    pred:       24 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.54283 => __y_29
  # DEBUG __xD.53214 => __y_29
  # DEBUG thisD.53215 => __y_29
  # DEBUG D#174ptD.0 => &__y_29->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.54285 => D#174ptD.0
  # DEBUG thisD.54284 => D#173ptD.0
  # DEBUG D#336ptD.0 => &MEM[(const struct pairD.37146 &)__y_29 + 32].firstD.42483
  # DEBUG D#338ptD.0 => &MEM[(const struct _Rb_treeD.41462 *)D#339ptD.0]._M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#338ptD.0
  # DEBUG D#96ptD.0 => &outD.62698
  # VUSE <.MEM_2(D)>
  _30 = MEM[(const intD.9 &)__y_29 + 32];
  # DEBUG D#97ptD.0 => D#336ptD.0
  # DEBUG thisD.54281 => D#95ptD.0
  # DEBUG __xD.54280 => D#96ptD.0
  # DEBUG __yD.54279 => D#97ptD.0
  if (out_7(D) < _30)
    goto <bb 17>;
  else
    goto <bb 19>;
;;    succ:       17 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 809, maybe hot
;;   Invalid sum of incoming frequencies 383, should be 809
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#337ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.54291 => D#337ptD.0
  # DEBUG match$_M_nodeD.54341 => __y_29
  # DEBUG D#341ptD.0 => &this_3(D)->_in_reqD.37895
  # DEBUG D#86ptD.0 => D#341ptD.0
  # DEBUG __nD.54318 => _19
  # DEBUG thisD.54319 => D#86ptD.0
  # DEBUG thisD.54313 => NULL
  # DEBUG thisD.54314 => D#112ptD.0
  # DEBUG thisD.52815 => NULL
  # DEBUG __xD.52814 => __y_23
  # DEBUG thisD.54310 => &matchD.62700
  # DEBUG __xD.54311 => NULL
  # DEBUG thisD.54338 => &matchD.62700
  # DEBUG thisD.54339 => __y_29
  # DEBUG D#342ptD.0 => &__y_29->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#342ptD.0
  # .MEM_38 = VDEF <.MEM_2(D)>
  rD.42346 = MEM[(const struct pairD.37146 *)__y_29 + 32B].secondD.42484;
  # DEBUG foundD.62699 => 1
  # VUSE <.MEM_38>
  pretmp_35 = rD.42346.labelD.35381;
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 225, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       2 [20.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_37 = VDEF <.MEM_2(D)>
  # USE = nonlocal { D.42346 D.42354 } (nonlocal, escaped)
  # CLB = nonlocal { D.42346 D.42354 } (nonlocal, escaped)
  _15 = OBJ_TYPE_REF(_5;(const struct SparseAllocatorD.36303)this_3(D)->5) (this_3(D), &rD.42346, in_6(D), out_7(D));
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 0
;;   Invalid sum of incoming frequencies 306, should be 0
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # _9 = PHI <_15(20), 0(9)>
  # .MEM_36 = PHI <.MEM_37(20), .MEM_2(D)(9)>
  if (_9 != 0)
    goto <bb 22>;
  else
    goto <bb 17>;
;;    succ:       17 [100.0%]  (FALSE_VALUE,EXECUTABLE)
;;                22 (TRUE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 0
;;    prev block 21, next block 23, flags: (NEW)
;;    pred:       21 (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_36>
  pretmp_48 = rD.42346.labelD.35381;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 1125, maybe hot
;;   Invalid sum of incoming frequencies 1495, should be 1125
;;    prev block 22, next block 1, flags: (NEW, REACHABLE)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_36(22), .MEM_11(25), .MEM_38(19)>
  # prephitmp_50 = PHI <pretmp_48(22), -1(25), pretmp_35(19)>
  # .MEM_12 = VDEF <.MEM_1>
  rD.42346 ={v} {CLOBBER};
  # VUSE <.MEM_12>
  return prephitmp_50;
;;    succ:       EXIT [100.0%] 

}



;; Function std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_insert_unique_(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator, const _Val&, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_Alloc_node; _Key = int; _Val = std::pair<const int, Allocator::sRequest>; _KeyOfValue = std::_Select1st<std::pair<const int, Allocator::sRequest> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, Allocator::sRequest> >] (_ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE17_M_insert_unique_INSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_ERKS4_RT_.isra.197.constprop.200, funcdef_no=2846, decl_uid=62239, cgraph_uid=40, symbol_order=2498)


Pass statistics:
----------------

std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_insert_unique_(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator, const _Val&, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_Alloc_node; _Key = int; _Val = std::pair<const int, Allocator::sRequest>; _KeyOfValue = std::_Select1st<std::pair<const int, Allocator::sRequest> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, Allocator::sRequest> >] (struct _Rb_treeD.41462 * const thisD.62285, struct const_iteratorD.41768 __positionD.62286, const struct pairD.37146 & __vD.62287)
{
  struct _Rb_tree_node_baseD.24800 * SR.1336D.62945;
  struct _Rb_tree_node_baseD.24800 * SR.1335D.62944;
  struct _Rb_tree_node_baseD.24800 * SR.1334D.62943;
  struct _Rb_tree_node_baseD.24800 * SR.1333D.62942;
  struct _Rb_tree_node_baseD.24800 * SR.1332D.62941;
  struct _Rb_tree_node_baseD.24800 * SR.1331D.62940;
  struct _Rb_tree_node_baseD.24800 * SR.1330D.62939;
  struct _Rb_tree_node_baseD.24800 * SR.1329D.62938;
  struct _Rb_tree_node_baseD.24800 * SR.1328D.62937;
  const struct _Rb_tree_node_baseD.24800 * const __position$_M_nodeD.62936;
  struct _Rb_tree_node_baseD.24800 * __res$8D.62935;
  struct _Rb_tree_node_baseD.24800 * __resD.62934;
  struct _Rb_tree_nodeD.41466 * D.62931;
  boolD.2757 __insert_leftD.62909;
  struct iteratorD.41766 D.62914;
  struct pairD.25253 D.62903;
  boolD.2757 __compD.62882;
  struct _Rb_tree_node_baseD.24800 * const __j$_M_nodeD.62900;
  struct pairD.25253 D.62876;
  boolD.2757 __compD.62855;
  struct _Rb_tree_node_baseD.24800 * const __j$_M_nodeD.62873;
  struct pairD.25253 D.62849;
  boolD.2757 __compD.62828;
  struct _Rb_tree_node_baseD.24800 * const __j$_M_nodeD.62846;
  struct pairD.25253 D.62822;
  struct const_iteratorD.41768 __positionD.62788;
  struct _Rb_tree_node_baseD.24800 * __res$secondD.62294;
  struct _Rb_tree_node_baseD.24800 * __res$firstD.62293;
  struct pairD.25253 __resD.62289;
  struct iteratorD.41766 D.62292;
  const intD.9 pretmp_4;
  const intD.9 prephitmp_5;
  struct _Rb_tree_node_baseD.24800 * _8;
  struct _Rb_tree_nodeD.41466 * _9;
  const intD.9 pretmp_11;
  const size_typeD.41494 _13;
  struct _Rb_tree_node_baseD.24800 * _14;
  const intD.9 _15;
  const intD.9 _16;
  const intD.9 pretmp_18;
  const intD.9 _19;
  const intD.9 _20;
  struct _Rb_tree_node_baseD.24800 * _21;
  struct _Rb_tree_node_baseD.24800 * _22;
  const intD.9 _23;
  struct _Rb_tree_node_baseD.24800 * _24;
  struct _Rb_tree_node_baseD.24800 * _25;
  struct _Rb_tree_node_baseD.24800 * _26;
  const intD.9 _27;
  struct _Rb_tree_node_baseD.24800 * _28;
  struct _Rb_tree_node_baseD.24800 * const _29;
  const intD.9 _32;
  struct _Rb_tree_node_baseD.24800 * _34;
  struct _Rb_tree_node_baseD.24800 * _35;
  struct _Rb_tree_node_baseD.24800 * _37;
  struct _Rb_tree_node_baseD.24800 * const _43;
  struct _Rb_tree_node_baseD.24800 * _46;
  const intD.9 prephitmp_48;
  const intD.9 _50;
  struct _Rb_tree_node_baseD.24800 * _52;
  struct _Rb_tree_node_baseD.24800 * _53;
  const intD.9 _54;
  struct _Rb_tree_node_baseD.24800 * const _55;
  boolD.2757 _61;
  const intD.9 pretmp_62;
  const intD.9 _63;
  struct _Rb_tree_node_baseD.24800 * _64;
  const intD.9 _68;
  const intD.9 _69;
  struct _Rb_tree_node_baseD.24800 * _70;
  struct _Rb_tree_node_baseD.24800 * _71;
  struct _Rb_tree_node_baseD.24800 * _73;
  boolD.2757 _78;
  boolD.2757 _79;
  long unsigned intD.14 _89;
  long unsigned intD.14 _90;
  const intD.9 prephitmp_95;
  const intD.9 prephitmp_105;
  const intD.9 prephitmp_119;
  const intD.9 pretmp_121;
  const intD.9 pretmp_128;
  const intD.9 prephitmp_129;
  const intD.9 pretmp_161;
  intD.9 pretmp_168;
  intD.9 prephitmp_169;

;;   basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __node_genD.62288 s=> __node_genD.61485
  # DEBUG D#751ptD.0 s=> __node_genD.61485
  # DEBUG __xD.62291 => __v_1(D)
  # DEBUG thisD.62290 => D#173ptD.0
  # DEBUG D#875ptD.0 => &__v_1(D)->firstD.42483
  # DEBUG thisD.62787 => this_3(D)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal 
  __position$_M_node_130 = MEM[(struct _Rb_tree_const_iteratorD.41769 *)&__positionD.62286];
  # DEBUG __position$_M_nodeD.62936 => __position$_M_node_130
  # DEBUG __kD.62789 => D#875ptD.0
  # DEBUG thisD.62792 => &__positionD.62788
  # DEBUG thisD.55144 => NULL
  # DEBUG __xD.55143 => __position$_M_node_130
  # DEBUG __posD.55248 => __position$_M_node_130
  # DEBUG thisD.62796 => this_3(D)
  # PT = nonlocal 
  __j$_M_node_12 = &this_3(D)->_M_implD.41540._M_headerD.41695;
  if (__j$_M_node_12 == __position$_M_node_130)
    goto <bb 3>;
  else
    goto <bb 16>;
;;    succ:       3 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 1500, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  _13 = MEM[(long unsigned intD.14 *)this_3(D) + 40B];
  # DEBUG D#132ptD.0 => this_3(D)
  # DEBUG thisD.55148 => D#132ptD.0
  if (_13 != 0)
    goto <bb 4>;
  else
    goto <bb 59>;
;;    succ:       4 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                59 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 750, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.55160 => this_3(D)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _14 = MEM[(struct _Rb_tree_node_baseD.24800 * &)this_3(D) + 32];
  # DEBUG __xD.55156 => _14
  # DEBUG __xD.53214 => _14
  # DEBUG thisD.53215 => _14
  # DEBUG D#174ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)_14]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.55158 => D#174ptD.0
  # DEBUG thisD.55157 => D#173ptD.0
  # DEBUG D#413ptD.0 => &MEM[(const struct pairD.37146 &)_14 + 32].firstD.42483
  # DEBUG D#423ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#423ptD.0
  # VUSE <.MEM_7(D)>
  _15 = MEM[(const intD.9 &)_14 + 32];
  # DEBUG D#96ptD.0 => D#413ptD.0
  # VUSE <.MEM_7(D)>
  _16 = MEM[(const intD.9 &)__v_1(D)];
  # DEBUG D#97ptD.0 => D#875ptD.0
  # DEBUG thisD.55154 => D#95ptD.0
  # DEBUG __xD.55153 => D#96ptD.0
  # DEBUG __yD.55152 => D#97ptD.0
  if (_15 < _16)
    goto <bb 52>;
  else
    goto <bb 59>;
;;    succ:       52 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                59 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 4398, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # _43 = PHI <_34(8), _35(9)>
  # DEBUG __compD.62828 => D#877ptD.0 < _32
  # DEBUG __yD.62827 => __j$_M_node_143
  # DEBUG __xD.62826 => _43
  if (_43 == 0B)
    goto <bb 10>;
  else
    goto <bb 6>;
;;    succ:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 4002, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 4398, maybe hot
;;   Invalid sum of incoming frequencies 5027, should be 4398
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       60 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_143 = PHI <_8(60), _43(6)>
  # DEBUG __compD.62828 => 1
  # DEBUG __xD.62826 => __j$_M_node_143
  # DEBUG __yD.62827 => __j$_M_node_143
  # DEBUG __xD.55088 => __j$_M_node_143
  # DEBUG __xD.54209 => __j$_M_node_143
  # DEBUG thisD.54210 => __j$_M_node_143
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__j$_M_node_143]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.55090 => D#331ptD.0
  # DEBUG thisD.55089 => D#173ptD.0
  # DEBUG D#408ptD.0 => &MEM[(const struct pairD.37146 &)__j$_M_node_143 + 32].firstD.42483
  # DEBUG D#412ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#412ptD.0
  # DEBUG D#877ptD.0 => MEM[(const intD.9 &)__v_1(D)]
  # DEBUG D#96ptD.0 => D#875ptD.0
  # VUSE <.MEM_7(D)>
  _32 = MEM[(const intD.9 &)__j$_M_node_143 + 32];
  # DEBUG D#97ptD.0 => D#408ptD.0
  # DEBUG thisD.62842 => D#95ptD.0
  # DEBUG __xD.62843 => D#96ptD.0
  # DEBUG __yD.62844 => D#97ptD.0
  # DEBUG __compD.62828 => NULL
  if (_32 > pretmp_121)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 2199, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _34 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__j$_M_node_143 + 16B];
  # DEBUG D#108ptD.0 => __j$_M_node_143
  # DEBUG __xD.55093 => D#108ptD.0
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 2199, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       7 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _35 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__j$_M_node_143 + 24B];
  # DEBUG D#107ptD.0 => __j$_M_node_143
  # DEBUG __xD.55096 => D#107ptD.0
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 334, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # _69 = PHI <_32(5)>
  # PT = nonlocal escaped 
  # __j$_M_node_33 = PHI <__j$_M_node_143(5)>
  # DEBUG thisD.62841 => &__jD.62829
  # DEBUG __xD.62840 => __j$_M_node_33
  # DEBUG __j$_M_nodeD.62846 => __j$_M_node_33
  if (_69 > pretmp_121)
    goto <bb 11>;
  else
    goto <bb 13>;
;;    succ:       11 [34.8%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [65.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 218, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [34.8%]  (TRUE_VALUE,EXECUTABLE)
;;                59 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_179 = PHI <__j$_M_node_33(10), __j$_M_node_12(59)>
  # DEBUG thisD.62841 => &__jD.62829
  # DEBUG __xD.62840 => __j$_M_node_179
  # DEBUG __j$_M_nodeD.62846 => __j$_M_node_179
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _37 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_3(D) + 24B];
  # DEBUG D#359ptD.0 => this_3(D)
  # DEBUG thisD.55104 => D#359ptD.0
  # DEBUG thisD.54565 => NULL
  # DEBUG __xD.54564 => _37
  # DEBUG thisD.55100 => &__jD.62829
  # DEBUG __xD.55101 => NULL
  if (_37 == __j$_M_node_179)
    goto <bb 15>;
  else
    goto <bb 12>;
;;    succ:       15 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 195, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62836 => &__jD.62829
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  __j$_M_node_39 = _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_baseD.24849 (__j$_M_node_179);
  # DEBUG __j$_M_nodeD.62846 => __j$_M_node_39
  # VUSE <.MEM_7(D)>
  pretmp_18 = MEM[(const intD.9 &)__v_1(D)];
  # VUSE <.MEM_7(D)>
  pretmp_128 = MEM[(const intD.9 &)__j$_M_node_39 + 32];
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 413, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       10 [65.2%]  (FALSE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_40 = PHI <__j$_M_node_33(10), __j$_M_node_39(12)>
  # PT = nonlocal escaped 
  # __j$_M_node_178 = PHI <__j$_M_node_33(10), __j$_M_node_179(12)>
  # prephitmp_129 = PHI <pretmp_121(10), pretmp_18(12)>
  # prephitmp_105 = PHI <_69(10), pretmp_128(12)>
  # DEBUG __j$_M_nodeD.62846 => __j$_M_node_40
  # DEBUG __xD.55118 => __j$_M_node_40
  # DEBUG __xD.53214 => __j$_M_node_40
  # DEBUG thisD.53215 => __j$_M_node_40
  # DEBUG D#174ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__j$_M_node_40]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.55120 => D#174ptD.0
  # DEBUG thisD.55119 => D#173ptD.0
  # DEBUG D#409ptD.0 => &MEM[(const struct pairD.37146 &)__j$_M_node_40 + 32].firstD.42483
  # DEBUG D#411ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#411ptD.0
  # DEBUG D#96ptD.0 => D#409ptD.0
  # DEBUG D#97ptD.0 => D#875ptD.0
  # DEBUG thisD.55116 => D#95ptD.0
  # DEBUG __xD.55115 => D#96ptD.0
  # DEBUG __yD.55114 => D#97ptD.0
  if (prephitmp_105 < prephitmp_129)
    goto <bb 15>;
  else
    goto <bb 14>;
;;    succ:       15 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 252, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 435, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       11 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped null 
  # SR.1330_141 = PHI <0B(11), 0B(13), __j$_M_node_40(14)>
  # PT = nonlocal escaped null 
  # SR.1331_135 = PHI <_37(11), __j$_M_node_178(13), 0B(14)>
  # DEBUG D#410ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.62846 => D#410ptD.0
  goto <bb 52>;
;;    succ:       52 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 8500, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       2 [85.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.55173 => __position$_M_node_130
  # DEBUG __xD.53214 => __position$_M_node_130
  # DEBUG thisD.53215 => __position$_M_node_130
  # DEBUG D#174ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__position$_M_node_130]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.55175 => D#174ptD.0
  # DEBUG thisD.55174 => D#173ptD.0
  # DEBUG D#414ptD.0 => &MEM[(const struct pairD.37146 &)__position$_M_node_130 + 32].firstD.42483
  # DEBUG D#425ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#425ptD.0
  # VUSE <.MEM_7(D)>
  _19 = MEM[(const intD.9 &)__v_1(D)];
  # DEBUG D#96ptD.0 => D#875ptD.0
  # VUSE <.MEM_7(D)>
  _20 = MEM[(const intD.9 &)__position$_M_node_130 + 32];
  # DEBUG D#97ptD.0 => D#414ptD.0
  # DEBUG thisD.55171 => D#95ptD.0
  # DEBUG __xD.55170 => D#96ptD.0
  # DEBUG __yD.55169 => D#97ptD.0
  if (_19 < _20)
    goto <bb 17>;
  else
    goto <bb 34>;
;;    succ:       17 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 4250, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __beforeD.55251 => __position$_M_node_130
  # DEBUG thisD.55177 => this_3(D)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _21 = MEM[(struct _Rb_tree_node_baseD.24800 * &)this_3(D) + 24];
  if (_21 == __position$_M_node_130)
    goto <bb 52>;
  else
    goto <bb 18>;
;;    succ:       52 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 3819, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62804 => &__beforeD.62797
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _22 = _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_baseD.24849 (__position$_M_node_130);
  # DEBUG __beforeD.55251 => _22
  # DEBUG __xD.55192 => _22
  # DEBUG __xD.53214 => _22
  # DEBUG thisD.53215 => _22
  # DEBUG D#174ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)_22]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.55194 => D#174ptD.0
  # DEBUG thisD.55193 => D#173ptD.0
  # DEBUG D#415ptD.0 => &MEM[(const struct pairD.37146 &)_22 + 32].firstD.42483
  # DEBUG D#422ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#422ptD.0
  # VUSE <.MEM_7(D)>
  _23 = MEM[(const intD.9 &)_22 + 32];
  # DEBUG D#96ptD.0 => D#415ptD.0
  # DEBUG D#97ptD.0 => D#875ptD.0
  # DEBUG thisD.55190 => D#95ptD.0
  # DEBUG __xD.55189 => D#96ptD.0
  # DEBUG __yD.55188 => D#97ptD.0
  if (_19 > _23)
    goto <bb 19>;
  else
    goto <bb 21>;
;;    succ:       19 [79.3%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [20.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 3028, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [79.3%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _24 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_22 + 24B];
  # DEBUG D#107ptD.0 => _22
  # DEBUG __xD.55199 => D#107ptD.0
  if (_24 == 0B)
    goto <bb 52>;
  else
    goto <bb 20>;
;;    succ:       52 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 2574, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       19 [85.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 52>;
;;    succ:       52 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 791, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       18 [20.7%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62850 => this_3(D)
  # DEBUG __kD.62851 => D#875ptD.0
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _46 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_3(D) + 16B];
  # DEBUG D#91ptD.0 => this_3(D)
  # DEBUG thisD.55080 => D#91ptD.0
  # DEBUG __xD.62853 => NULL
  # DEBUG thisD.62872 => this_3(D)
  # DEBUG __yD.62854 => NULL
  # DEBUG __compD.62855 => 1
  # DEBUG __compD.62855 => 1
  # DEBUG __yD.62854 => __j$_M_node_12
  # DEBUG __xD.62853 => _46
  if (_46 == 0B)
    goto <bb 29>;
  else
    goto <bb 24>;
;;    succ:       29 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 7998, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       26 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                27 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # _29 = PHI <_52(26), _53(27)>
  # DEBUG __compD.62855 => _19 < _50
  # DEBUG __yD.62854 => __j$_M_node_67
  # DEBUG __xD.62853 => _29
  if (_29 == 0B)
    goto <bb 28>;
  else
    goto <bb 23>;
;;    succ:       28 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 7278, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 720, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       21 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 7997, maybe hot
;;    prev block 24, next block 26, flags: (NEW)
;;    pred:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_67 = PHI <_46(24), _29(23)>
  # DEBUG __compD.62855 => 1
  # DEBUG __xD.62853 => __j$_M_node_67
  # DEBUG __yD.62854 => __j$_M_node_67
  # DEBUG __xD.55088 => __j$_M_node_67
  # DEBUG __xD.54209 => __j$_M_node_67
  # DEBUG thisD.54210 => __j$_M_node_67
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__j$_M_node_67]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.55090 => D#331ptD.0
  # DEBUG thisD.55089 => D#173ptD.0
  # DEBUG D#408ptD.0 => &MEM[(const struct pairD.37146 &)__j$_M_node_67 + 32].firstD.42483
  # DEBUG D#412ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#412ptD.0
  # DEBUG D#96ptD.0 => D#875ptD.0
  # VUSE <.MEM_7(D)>
  _50 = MEM[(const intD.9 &)__j$_M_node_67 + 32];
  # DEBUG D#97ptD.0 => D#408ptD.0
  # DEBUG thisD.62869 => D#95ptD.0
  # DEBUG __xD.62870 => D#96ptD.0
  # DEBUG __yD.62871 => D#97ptD.0
  # DEBUG __compD.62855 => NULL
  if (_19 < _50)
    goto <bb 26>;
  else
    goto <bb 27>;
;;    succ:       26 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 1, count 0, freq 3999, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       25 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _52 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__j$_M_node_67 + 16B];
  # DEBUG D#108ptD.0 => __j$_M_node_67
  # DEBUG __xD.55093 => D#108ptD.0
  goto <bb 22>;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 1, count 0, freq 3999, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       25 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _53 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__j$_M_node_67 + 24B];
  # DEBUG D#107ptD.0 => __j$_M_node_67
  # DEBUG __xD.55096 => D#107ptD.0
  goto <bb 22>;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 720, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       22 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # _63 = PHI <_50(22)>
  # PT = nonlocal escaped 
  # __j$_M_node_56 = PHI <__j$_M_node_67(22)>
  # DEBUG thisD.62868 => &__jD.62856
  # DEBUG __xD.62867 => __j$_M_node_56
  # DEBUG __j$_M_nodeD.62873 => __j$_M_node_56
  if (_19 < _63)
    goto <bb 29>;
  else
    goto <bb 31>;
;;    succ:       29 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [55.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 395, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       28 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_176 = PHI <__j$_M_node_56(28), __j$_M_node_12(21)>
  # DEBUG thisD.62868 => &__jD.62856
  # DEBUG __xD.62867 => __j$_M_node_176
  # DEBUG __j$_M_nodeD.62873 => __j$_M_node_176
  # DEBUG D#359ptD.0 => this_3(D)
  # DEBUG thisD.55104 => D#359ptD.0
  # DEBUG thisD.54565 => NULL
  # DEBUG __xD.54564 => _21
  # DEBUG thisD.55100 => &__jD.62856
  # DEBUG __xD.55101 => NULL
  if (_21 == __j$_M_node_176)
    goto <bb 33>;
  else
    goto <bb 30>;
;;    succ:       33 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 355, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62863 => &__jD.62856
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  __j$_M_node_57 = _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_baseD.24849 (__j$_M_node_176);
  # DEBUG __j$_M_nodeD.62873 => __j$_M_node_57
  # VUSE <.MEM_7(D)>
  pretmp_62 = MEM[(const intD.9 &)__j$_M_node_57 + 32];
;;    succ:       31 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 751, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       28 [55.0%]  (FALSE_VALUE,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_58 = PHI <__j$_M_node_56(28), __j$_M_node_57(30)>
  # PT = nonlocal escaped 
  # __j$_M_node_180 = PHI <__j$_M_node_56(28), __j$_M_node_176(30)>
  # prephitmp_119 = PHI <_63(28), pretmp_62(30)>
  # DEBUG __j$_M_nodeD.62873 => __j$_M_node_58
  # DEBUG __xD.55118 => __j$_M_node_58
  # DEBUG __xD.53214 => __j$_M_node_58
  # DEBUG thisD.53215 => __j$_M_node_58
  # DEBUG D#174ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__j$_M_node_58]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.55120 => D#174ptD.0
  # DEBUG thisD.55119 => D#173ptD.0
  # DEBUG D#409ptD.0 => &MEM[(const struct pairD.37146 &)__j$_M_node_58 + 32].firstD.42483
  # DEBUG D#411ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#411ptD.0
  # DEBUG D#96ptD.0 => D#409ptD.0
  # DEBUG D#97ptD.0 => D#875ptD.0
  # DEBUG thisD.55116 => D#95ptD.0
  # DEBUG __xD.55115 => D#96ptD.0
  # DEBUG __yD.55114 => D#97ptD.0
  if (_19 > prephitmp_119)
    goto <bb 33>;
  else
    goto <bb 32>;
;;    succ:       33 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 458, maybe hot
;;    prev block 31, next block 33, flags: (NEW)
;;    pred:       31 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       33 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 791, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       29 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped null 
  # SR.1332_134 = PHI <0B(29), 0B(31), __j$_M_node_58(32)>
  # PT = nonlocal escaped null 
  # SR.1333_133 = PHI <_21(29), __j$_M_node_180(31), 0B(32)>
  # DEBUG D#410ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.62873 => D#410ptD.0
  goto <bb 52>;
;;    succ:       52 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 4250, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       16 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.55213 => __position$_M_node_130
  # DEBUG __xD.53214 => __position$_M_node_130
  # DEBUG thisD.53215 => __position$_M_node_130
  # DEBUG D#174ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__position$_M_node_130]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.55215 => D#174ptD.0
  # DEBUG thisD.55214 => D#173ptD.0
  # DEBUG D#416ptD.0 => &MEM[(const struct pairD.37146 &)__position$_M_node_130 + 32].firstD.42483
  # DEBUG D#424ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#424ptD.0
  # DEBUG D#96ptD.0 => D#416ptD.0
  # DEBUG D#97ptD.0 => D#875ptD.0
  # DEBUG thisD.55211 => D#95ptD.0
  # DEBUG __xD.55210 => D#96ptD.0
  # DEBUG __yD.55209 => D#97ptD.0
  if (_19 > _20)
    goto <bb 35>;
  else
    goto <bb 57>;
;;    succ:       35 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                57 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 2125, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       34 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __afterD.55258 => __position$_M_node_130
  # DEBUG thisD.55217 => this_3(D)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _25 = MEM[(struct _Rb_tree_node_baseD.24800 * &)this_3(D) + 32];
  if (_25 == __position$_M_node_130)
    goto <bb 52>;
  else
    goto <bb 36>;
;;    succ:       52 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 1910, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       35 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62818 => &__afterD.62811
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _26 = _ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_baseD.24845 (__position$_M_node_130);
  # DEBUG __afterD.55258 => _26
  # DEBUG __xD.55230 => _26
  # DEBUG __xD.53214 => _26
  # DEBUG thisD.53215 => _26
  # DEBUG D#174ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)_26]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.55232 => D#174ptD.0
  # DEBUG thisD.55231 => D#173ptD.0
  # DEBUG D#417ptD.0 => &MEM[(const struct pairD.37146 &)_26 + 32].firstD.42483
  # DEBUG D#421ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#421ptD.0
  # DEBUG D#96ptD.0 => D#875ptD.0
  # VUSE <.MEM_7(D)>
  _27 = MEM[(const intD.9 &)_26 + 32];
  # DEBUG D#97ptD.0 => D#417ptD.0
  # DEBUG thisD.55228 => D#95ptD.0
  # DEBUG __xD.55227 => D#96ptD.0
  # DEBUG __yD.55226 => D#97ptD.0
  if (_19 < _27)
    goto <bb 37>;
  else
    goto <bb 39>;
;;    succ:       37 [79.3%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [20.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 1514, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       36 [79.3%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _28 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__position$_M_node_130 + 24B];
  # DEBUG D#107ptD.0 => __position$_M_node_130
  # DEBUG __xD.55237 => D#107ptD.0
  if (_28 == 0B)
    goto <bb 38>;
  else
    goto <bb 52>;
;;    succ:       38 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                52 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 227, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       37 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.62817 => NULL
  # DEBUG __aD.62816 => NULL
  # DEBUG __bD.62815 => &__posD.62790._M_nodeD.42458
  # DEBUG D#420ptD.0 => {CLOBBER}
  # DEBUG __posD.55248 => D#420ptD.0
  # DEBUG __resD.62934 => 0B
  # DEBUG __res$8D.62935 => __position$_M_node_130
  # DEBUG __res$firstD.62293 => 0B
  # DEBUG __res$secondD.62294 => __position$_M_node_130
  if (__position$_M_node_130 != 0B)
    goto <bb 55>;
  else
    goto <bb 57>;
;;    succ:       55 [75.7%]  (TRUE_VALUE,EXECUTABLE)
;;                57 [24.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 395, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       36 [20.7%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62877 => this_3(D)
  # DEBUG __kD.62878 => D#875ptD.0
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _64 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_3(D) + 16B];
  # DEBUG D#91ptD.0 => this_3(D)
  # DEBUG thisD.55080 => D#91ptD.0
  # DEBUG __xD.62880 => NULL
  # DEBUG thisD.62899 => this_3(D)
  # DEBUG __yD.62881 => NULL
  # DEBUG __compD.62882 => 1
  # DEBUG __compD.62882 => 1
  # DEBUG __yD.62881 => __j$_M_node_12
  # DEBUG __xD.62880 => _64
  if (_64 == 0B)
    goto <bb 47>;
  else
    goto <bb 42>;
;;    succ:       47 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                42 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 1, count 0, freq 3999, maybe hot
;;    prev block 39, next block 41, flags: (NEW, REACHABLE)
;;    pred:       44 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                45 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # _55 = PHI <_70(44), _71(45)>
  # DEBUG __compD.62882 => _19 < _68
  # DEBUG __yD.62881 => __j$_M_node_96
  # DEBUG __xD.62880 => _55
  if (_55 == 0B)
    goto <bb 46>;
  else
    goto <bb 41>;
;;    succ:       46 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                41 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 41, loop depth 1, count 0, freq 3639, maybe hot
;;    prev block 40, next block 42, flags: (NEW)
;;    pred:       40 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 43>;
;;    succ:       43 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 359, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       39 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       43 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 43, loop depth 1, count 0, freq 3999, maybe hot
;;    prev block 42, next block 44, flags: (NEW)
;;    pred:       42 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_96 = PHI <_64(42), _55(41)>
  # DEBUG __compD.62882 => 1
  # DEBUG __xD.62880 => __j$_M_node_96
  # DEBUG __yD.62881 => __j$_M_node_96
  # DEBUG __xD.55088 => __j$_M_node_96
  # DEBUG __xD.54209 => __j$_M_node_96
  # DEBUG thisD.54210 => __j$_M_node_96
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__j$_M_node_96]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.55090 => D#331ptD.0
  # DEBUG thisD.55089 => D#173ptD.0
  # DEBUG D#408ptD.0 => &MEM[(const struct pairD.37146 &)__j$_M_node_96 + 32].firstD.42483
  # DEBUG D#412ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#412ptD.0
  # DEBUG D#96ptD.0 => D#875ptD.0
  # VUSE <.MEM_7(D)>
  _68 = MEM[(const intD.9 &)__j$_M_node_96 + 32];
  # DEBUG D#97ptD.0 => D#408ptD.0
  # DEBUG thisD.62896 => D#95ptD.0
  # DEBUG __xD.62897 => D#96ptD.0
  # DEBUG __yD.62898 => D#97ptD.0
  # DEBUG __compD.62882 => NULL
  if (_19 < _68)
    goto <bb 44>;
  else
    goto <bb 45>;
;;    succ:       44 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                45 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 44, loop depth 1, count 0, freq 1999, maybe hot
;;    prev block 43, next block 45, flags: (NEW, REACHABLE)
;;    pred:       43 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _70 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__j$_M_node_96 + 16B];
  # DEBUG D#108ptD.0 => __j$_M_node_96
  # DEBUG __xD.55093 => D#108ptD.0
  goto <bb 40>;
;;    succ:       40 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 45, loop depth 1, count 0, freq 1999, maybe hot
;;    prev block 44, next block 46, flags: (NEW, REACHABLE)
;;    pred:       43 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _71 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__j$_M_node_96 + 24B];
  # DEBUG D#107ptD.0 => __j$_M_node_96
  # DEBUG __xD.55096 => D#107ptD.0
  goto <bb 40>;
;;    succ:       40 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 46, loop depth 0, count 0, freq 359, maybe hot
;;    prev block 45, next block 47, flags: (NEW, REACHABLE)
;;    pred:       40 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # _54 = PHI <_68(40)>
  # PT = nonlocal escaped 
  # __j$_M_node_51 = PHI <__j$_M_node_96(40)>
  # DEBUG thisD.62895 => &__jD.62883
  # DEBUG __xD.62894 => __j$_M_node_51
  # DEBUG __j$_M_nodeD.62900 => __j$_M_node_51
  if (_19 < _54)
    goto <bb 47>;
  else
    goto <bb 49>;
;;    succ:       47 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                49 [55.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 47, loop depth 0, count 0, freq 198, maybe hot
;;    prev block 46, next block 48, flags: (NEW, REACHABLE)
;;    pred:       46 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_164 = PHI <__j$_M_node_51(46), __j$_M_node_12(39)>
  # DEBUG thisD.62895 => &__jD.62883
  # DEBUG __xD.62894 => __j$_M_node_164
  # DEBUG __j$_M_nodeD.62900 => __j$_M_node_164
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _73 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_3(D) + 24B];
  # DEBUG D#359ptD.0 => this_3(D)
  # DEBUG thisD.55104 => D#359ptD.0
  # DEBUG thisD.54565 => NULL
  # DEBUG __xD.54564 => _73
  # DEBUG thisD.55100 => &__jD.62883
  # DEBUG __xD.55101 => NULL
  if (_73 == __j$_M_node_164)
    goto <bb 51>;
  else
    goto <bb 48>;
;;    succ:       51 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                48 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 48, loop depth 0, count 0, freq 178, maybe hot
;;    prev block 47, next block 49, flags: (NEW, REACHABLE)
;;    pred:       47 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62890 => &__jD.62883
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  __j$_M_node_75 = _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_baseD.24849 (__j$_M_node_164);
  # DEBUG __j$_M_nodeD.62900 => __j$_M_node_75
  # VUSE <.MEM_7(D)>
  pretmp_4 = MEM[(const intD.9 &)__j$_M_node_75 + 32];
;;    succ:       49 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 49, loop depth 0, count 0, freq 375, maybe hot
;;    prev block 48, next block 50, flags: (NEW, REACHABLE)
;;    pred:       46 [55.0%]  (FALSE_VALUE,EXECUTABLE)
;;                48 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_76 = PHI <__j$_M_node_51(46), __j$_M_node_75(48)>
  # PT = nonlocal escaped 
  # __j$_M_node_154 = PHI <__j$_M_node_51(46), __j$_M_node_164(48)>
  # prephitmp_5 = PHI <_54(46), pretmp_4(48)>
  # DEBUG __j$_M_nodeD.62900 => __j$_M_node_76
  # DEBUG __xD.55118 => __j$_M_node_76
  # DEBUG __xD.53214 => __j$_M_node_76
  # DEBUG thisD.53215 => __j$_M_node_76
  # DEBUG D#174ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__j$_M_node_76]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.55120 => D#174ptD.0
  # DEBUG thisD.55119 => D#173ptD.0
  # DEBUG D#409ptD.0 => &MEM[(const struct pairD.37146 &)__j$_M_node_76 + 32].firstD.42483
  # DEBUG D#411ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#411ptD.0
  # DEBUG D#96ptD.0 => D#409ptD.0
  # DEBUG D#97ptD.0 => D#875ptD.0
  # DEBUG thisD.55116 => D#95ptD.0
  # DEBUG __xD.55115 => D#96ptD.0
  # DEBUG __yD.55114 => D#97ptD.0
  if (prephitmp_5 < _19)
    goto <bb 51>;
  else
    goto <bb 50>;
;;    succ:       51 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                50 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 50, loop depth 0, count 0, freq 229, maybe hot
;;    prev block 49, next block 51, flags: (NEW)
;;    pred:       49 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       51 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 51, loop depth 0, count 0, freq 395, maybe hot
;;    prev block 50, next block 52, flags: (NEW, REACHABLE)
;;    pred:       47 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                49 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                50 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped null 
  # SR.1334_132 = PHI <0B(47), 0B(49), __j$_M_node_76(50)>
  # PT = nonlocal escaped null 
  # SR.1335_131 = PHI <_73(47), __j$_M_node_154(49), 0B(50)>
  # DEBUG D#410ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.62900 => D#410ptD.0
;;    succ:       52 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 52, loop depth 0, count 0, freq 7648, maybe hot
;;   Invalid sum of incoming frequencies 6957, should be 7648
;;    prev block 51, next block 53, flags: (NEW, REACHABLE)
;;    pred:       4 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                17 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                51 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                37 [85.0%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped null 
  # __res_99 = PHI <0B(4), SR.1330_141(15), _21(17), 0B(19), __position$_M_node_130(20), SR.1332_134(33), 0B(35), SR.1334_132(51), _26(37)>
  # PT = nonlocal escaped null 
  # __res$8_98 = PHI <_14(4), SR.1331_135(15), _21(17), _22(19), __position$_M_node_130(20), SR.1333_133(33), _25(35), SR.1335_131(51), _26(37)>
  # DEBUG D#420ptD.0 => {CLOBBER}
  # DEBUG __posD.55248 => D#420ptD.0
  # DEBUG __resD.62934 => __res_99
  # DEBUG __res$8D.62935 => __res$8_98
  # DEBUG __res$firstD.62293 => __res_99
  # DEBUG __res$secondD.62294 => __res$8_98
  if (__res$8_98 != 0B)
    goto <bb 53>;
  else
    goto <bb 57>;
;;    succ:       53 [75.8%]  (TRUE_VALUE,EXECUTABLE)
;;                57 [24.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 53, loop depth 0, count 0, freq 1119, maybe hot
;;   Invalid sum of incoming frequencies 5796, should be 1119
;;    prev block 52, next block 54, flags: (NEW, REACHABLE)
;;    pred:       52 [75.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#746ptD.0 => D#751ptD.0
  # DEBUG thisD.62904 => this_3(D)
  # DEBUG __xD.62905 => __res_99
  # DEBUG __pD.62906 => __res$8_98
  # DEBUG __vD.62907 => __v_1(D)
  # DEBUG __node_genD.62908 => D#746ptD.0
  # DEBUG D#745ptD.0 => D#746ptD.0
  # DEBUG thisD.62913 => this_3(D)
  _61 = __j$_M_node_12 == __res$8_98;
  # RANGE [0, 1]
  _79 = __res_99 != 0B;
  _78 = _61 | _79;
  if (_78 != 0)
    goto <bb 56>;
  else
    goto <bb 54>;
;;    succ:       56 [11.7%]  (TRUE_VALUE,EXECUTABLE)
;;                54 [88.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 54, loop depth 0, count 0, freq 988, maybe hot
;;    prev block 53, next block 55, flags: (NEW)
;;    pred:       53 [88.3%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  pretmp_161 = MEM[(const intD.9 &)__v_1(D)];
  # VUSE <.MEM_7(D)>
  pretmp_11 = MEM[(const intD.9 &)__res$8_98 + 32];
;;    succ:       55 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 55, loop depth 0, count 0, freq 1160, maybe hot
;;    prev block 54, next block 56, flags: (NEW, REACHABLE)
;;    pred:       54 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                38 [75.7%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped null 
  # __res$8_153 = PHI <__res$8_98(54), __position$_M_node_130(38)>
  # prephitmp_95 = PHI <pretmp_161(54), _19(38)>
  # prephitmp_48 = PHI <pretmp_11(54), _20(38)>
  # DEBUG D#746ptD.0 => D#751ptD.0
  # DEBUG thisD.62904 => this_3(D)
  # DEBUG __xD.62905 => NULL
  # DEBUG __pD.62906 => __res$8_153
  # DEBUG __vD.62907 => __v_1(D)
  # DEBUG __node_genD.62908 => D#746ptD.0
  # DEBUG D#745ptD.0 => D#746ptD.0
  # DEBUG thisD.62913 => this_3(D)
  # DEBUG __xD.61451 => __res$8_153
  # DEBUG __xD.53214 => __res$8_153
  # DEBUG thisD.53215 => __res$8_153
  # DEBUG D#174ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__res$8_153]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.61453 => D#174ptD.0
  # DEBUG thisD.61452 => D#173ptD.0
  # DEBUG D#743ptD.0 => &MEM[(const struct pairD.37146 &)__res$8_153 + 32].firstD.42483
  # DEBUG __xD.61455 => __v_1(D)
  # DEBUG thisD.61454 => D#173ptD.0
  # DEBUG D#744ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#744ptD.0
  # DEBUG D#97ptD.0 => D#743ptD.0
  # DEBUG thisD.61456 => D#95ptD.0
  # DEBUG __xD.61457 => D#96ptD.0
  # DEBUG __yD.61458 => D#97ptD.0
  __insert_left_82 = prephitmp_48 > prephitmp_95;
  pretmp_168 = (intD.9) __insert_left_82;
;;    succ:       56 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 56, loop depth 0, count 0, freq 5968, maybe hot
;;   Invalid sum of incoming frequencies 1291, should be 5968
;;    prev block 55, next block 57, flags: (NEW, REACHABLE)
;;    pred:       55 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                53 [11.7%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped null 
  # __res$8_167 = PHI <__res$8_153(55), __res$8_98(53)>
  # RANGE [0, 1] NONZERO 1
  # prephitmp_169 = PHI <pretmp_168(55), 1(53)>
  # DEBUG __insert_leftD.62909 => NULL
  # DEBUG D#730ptD.0 => D#745ptD.0
  # DEBUG __argD.62912 => __v_1(D)
  # DEBUG thisD.62911 => D#730ptD.0
  # DEBUG D#729ptD.0 => D#730ptD.0
  # DEBUG D#728ptD.0 => D#729ptD.0->_M_tD.45275
  # DEBUG D#727ptD.0 => D#728ptD.0
  # DEBUG __xD.62915 => __v_1(D)
  # DEBUG thisD.62916 => D#727ptD.0
  # DEBUG D#726ptD.0 => D#727ptD.0
  # DEBUG D#725ptD.0 => D#727ptD.0
  # DEBUG D#724ptD.0 => D#725ptD.0
  # DEBUG thisD.62918 => D#724ptD.0
  # DEBUG D#723ptD.0 => D#724ptD.0
  # DEBUG thisD.61114 => D#723ptD.0
  # DEBUG __nD.62920 => 1
  # DEBUG __aD.62919 => D#722ptD.0
  # DEBUG D#721ptD.0 => D#722ptD.0
  # DEBUG D#719ptD.0 => D#721ptD.0
  # DEBUG D#720ptD.0 => 0B
  # DEBUG __nD.62923 => 1
  # DEBUG thisD.62921 => D#719ptD.0
  # DEBUG D.62922 => D#720ptD.0
  # DEBUG D#718ptD.0 => D#719ptD.0
  # DEBUG D#717ptD.0 => D#718ptD.0
  # DEBUG thisD.61072 => D#717ptD.0
  # .MEM_136 = VDEF <.MEM_7(D)>
  # PT = { D.62946 } (escaped heap)
  # USE = nonlocal null { D.62946 } (escaped heap)
  # CLB = nonlocal null { D.62946 } (escaped heap)
  _9 = _ZnwmD.2764 (56);
  # DEBUG __tmpD.62917 => _9
  # DEBUG D#632ptD.0 => D#726ptD.0
  # DEBUG __nodeD.62926 => _9
  # DEBUG __xD.62925 => __v_1(D)
  # DEBUG thisD.62924 => D#632ptD.0
  # DEBUG D#631ptD.0 => D#632ptD.0
  # DEBUG thisD.62927 => _9
  # DEBUG D#876ptD.0 => &_9->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#876ptD.0
  # DEBUG D#538ptD.0 => D#631ptD.0
  # DEBUG thisD.59488 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG __pD.62930 => D#876ptD.0
  # DEBUG __valD.62929 => __v_1(D)
  # DEBUG thisD.62928 => D#630ptD.0
  # DEBUG D#24ptD.0 => 20
  # DEBUG __pD.59471 => D#876ptD.0
  # DEBUG D.59472 => D#24ptD.0
  # .MEM_137 = VDEF <.MEM_136>
  MEM[(struct pairD.37146 *)_9 + 32B] = *__v_1(D);
  # DEBUG thisD.59501 => NULL
  # DEBUG thisD.59484 => NULL
  # DEBUG __zD.62910 => NULL
  # .MEM_139 = VDEF <.MEM_137>
  # USE = nonlocal null { D.62946 } (escaped heap)
  # CLB = nonlocal null { D.62946 } (escaped heap)
  _ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_D.25026 (prephitmp_169, _9, __res$8_167, __j$_M_node_12);
  # VUSE <.MEM_139>
  _89 = this_3(D)->_M_implD.41540._M_node_countD.41696;
  # RANGE [0, 18446744073709551615]
  _90 = _89 + 1;
  # .MEM_140 = VDEF <.MEM_139>
  this_3(D)->_M_implD.41540._M_node_countD.41696 = _90;
  # DEBUG thisD.61450 => NULL
  # DEBUG __xD.61449 => NULL
  # .MEM_142 = VDEF <.MEM_140>
  MEM[(struct _Rb_tree_iteratorD.41767 *)&D.62292] = _9;
  goto <bb 58>;
;;    succ:       58 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 57, loop depth 0, count 0, freq 4032, maybe hot
;;    prev block 56, next block 58, flags: (NEW, REACHABLE)
;;    pred:       52 [24.2%]  (FALSE_VALUE,EXECUTABLE)
;;                34 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                38 [24.3%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped null 
  # __res_147 = PHI <__res_99(52), __position$_M_node_130(34), 0B(38)>
  # DEBUG D#420ptD.0 => {CLOBBER}
  # DEBUG __posD.55248 => D#420ptD.0
  # DEBUG __resD.62934 => __res_147
  # DEBUG __res$8D.62935 => NULL
  # DEBUG __res$firstD.62293 => __res_147
  # DEBUG __res$secondD.62294 => NULL
  # DEBUG thisD.61488 => NULL
  # DEBUG __xD.61487 => __res_147
  # .MEM_10 = VDEF <.MEM_7(D)>
  MEM[(struct _Rb_tree_iteratorD.41767 *)&D.62292] = __res_147;
;;    succ:       58 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 58, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 57, next block 59, flags: (NEW, REACHABLE)
;;    pred:       56 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                57 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_6 = PHI <.MEM_142(56), .MEM_10(57)>
  # DEBUG D#749ptD.0 => {CLOBBER}
  # DEBUG __res$firstD.62293 => D#749ptD.0
  # DEBUG D#750ptD.0 => {CLOBBER}
  # DEBUG __res$secondD.62294 => D#750ptD.0
  # VUSE <.MEM_6>
  return D.62292;
;;    succ:       EXIT [100.0%] 

;;   basic block 59, loop depth 0, count 0, freq 1126, maybe hot
;;    prev block 58, next block 60, flags: (NEW, REACHABLE)
;;    pred:       4 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                3 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62823 => this_3(D)
  # DEBUG __kD.62824 => D#875ptD.0
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _8 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_3(D) + 16B];
  # DEBUG D#91ptD.0 => this_3(D)
  # DEBUG thisD.55080 => D#91ptD.0
  # DEBUG __xD.62826 => NULL
  # DEBUG thisD.62845 => this_3(D)
  # DEBUG __yD.62827 => NULL
  # DEBUG __compD.62828 => 1
  # DEBUG __compD.62828 => 1
  # DEBUG __yD.62827 => __j$_M_node_12
  # DEBUG __xD.62826 => _8
  if (_8 == 0B)
    goto <bb 11>;
  else
    goto <bb 60>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                60 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 60, loop depth 0, count 0, freq 1025, maybe hot
;;    prev block 59, next block 1, flags: (NEW)
;;    pred:       59 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  pretmp_121 = MEM[(const intD.9 &)__v_1(D)];
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

}


Creating dr for MEM[(struct _Rb_tree_const_iterator *)&__position]
analyze_innermost: success.
	base_address: &__position
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_const_iterator *)&__position]
Creating dr for MEM[(long unsigned int *)this_3(D) + 40B]
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(long unsigned int *)this_3(D) + 40B]
Creating dr for MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32]
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32]
Creating dr for MEM[(const int &)_14 + 32]
analyze_innermost: success.
	base_address: _14
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)_14 + 32]
Creating dr for MEM[(const int &)__v_1(D)]
analyze_innermost: success.
	base_address: __v_1(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__v_1(D)]
Creating dr for MEM[(struct _Rb_tree_node_base * *)this_3(D) + 16B]
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_3(D) + 16B]
Creating dr for MEM[(const int &)__v_1(D)]
analyze_innermost: success.
	base_address: __v_1(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__v_1(D)]
Creating dr for MEM[(const int &)__j$_M_node_143 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_143 + 32]
Creating dr for MEM[(const int &)__j$_M_node_143 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_143 + 32]
Creating dr for MEM[(const int &)__j$_M_node_143 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_143 + 32]
Creating dr for MEM[(const int &)__j$_M_node_143 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_143 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_143 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_143 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_143 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_143 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_143 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_143 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_143 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_143 + 24B]
Creating dr for MEM[(const int &)__j$_M_node_143 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_143 + 32]
Creating dr for MEM[(const int &)__j$_M_node_143 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_143 + 32]
Creating dr for MEM[(const int &)__j$_M_node_143 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_143 + 32]
Creating dr for MEM[(const int &)__j$_M_node_143 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_143 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_143 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_143 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_143 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_143 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_143 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_143 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_143 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_143 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)this_3(D) + 24B]
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_3(D) + 24B]
Creating dr for MEM[(const int &)__v_1(D)]
analyze_innermost: success.
	base_address: __v_1(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__v_1(D)]
Creating dr for MEM[(const int &)__j$_M_node_39 + 32]
analyze_innermost: success.
	base_address: __j$_M_node_39
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__j$_M_node_39 + 32]
Creating dr for MEM[(const int &)__v_1(D)]
analyze_innermost: success.
	base_address: __v_1(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__v_1(D)]
Creating dr for MEM[(const int &)__position$_M_node_130 + 32]
analyze_innermost: success.
	base_address: __position$_M_node_130
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__position$_M_node_130 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * &)this_3(D) + 24]
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * &)this_3(D) + 24]
Creating dr for MEM[(const int &)_22 + 32]
analyze_innermost: success.
	base_address: _22
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)_22 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_22 + 24B]
analyze_innermost: success.
	base_address: _22
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)_22 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)this_3(D) + 16B]
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_3(D) + 16B]
Creating dr for MEM[(const int &)__j$_M_node_67 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_67 + 32]
Creating dr for MEM[(const int &)__j$_M_node_67 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_67 + 32]
Creating dr for MEM[(const int &)__j$_M_node_67 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_67 + 32]
Creating dr for MEM[(const int &)__j$_M_node_67 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_67 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_67 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_67 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_67 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_67 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_67 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_67 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_67 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_67 + 24B]
Creating dr for MEM[(const int &)__j$_M_node_67 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_67 + 32]
Creating dr for MEM[(const int &)__j$_M_node_67 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_67 + 32]
Creating dr for MEM[(const int &)__j$_M_node_67 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_67 + 32]
Creating dr for MEM[(const int &)__j$_M_node_67 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_67 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_67 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_67 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_67 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_67 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_67 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_67 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_67 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_67 + 24B]
Creating dr for MEM[(const int &)__j$_M_node_57 + 32]
analyze_innermost: success.
	base_address: __j$_M_node_57
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__j$_M_node_57 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32]
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32]
Creating dr for MEM[(const int &)_26 + 32]
analyze_innermost: success.
	base_address: _26
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)_26 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__position$_M_node_130 + 24B]
analyze_innermost: success.
	base_address: __position$_M_node_130
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)__position$_M_node_130 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)this_3(D) + 16B]
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_3(D) + 16B]
Creating dr for MEM[(const int &)__j$_M_node_96 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_96 + 32]
Creating dr for MEM[(const int &)__j$_M_node_96 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_96 + 32]
Creating dr for MEM[(const int &)__j$_M_node_96 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_96 + 32]
Creating dr for MEM[(const int &)__j$_M_node_96 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_96 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_96 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_96 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_96 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_96 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_96 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_96 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_96 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_96 + 24B]
Creating dr for MEM[(const int &)__j$_M_node_96 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_96 + 32]
Creating dr for MEM[(const int &)__j$_M_node_96 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_96 + 32]
Creating dr for MEM[(const int &)__j$_M_node_96 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_96 + 32]
Creating dr for MEM[(const int &)__j$_M_node_96 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_96 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_96 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_96 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_96 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_96 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_96 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_96 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_96 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_96 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)this_3(D) + 24B]
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_3(D) + 24B]
Creating dr for MEM[(const int &)__j$_M_node_75 + 32]
analyze_innermost: success.
	base_address: __j$_M_node_75
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__j$_M_node_75 + 32]
Creating dr for MEM[(struct _Rb_tree_iterator *)&D.62292]
analyze_innermost: success.
	base_address: &D.62292
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_iterator *)&D.62292]
Creating dr for MEM[(const int &)__v_1(D)]
analyze_innermost: success.
	base_address: __v_1(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__v_1(D)]
Creating dr for MEM[(const int &)__res$8_98 + 32]
analyze_innermost: success.
	base_address: __res$8_98
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__res$8_98 + 32]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:3, LOOPS:0, CONDITIONS:1, STMTS:17)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:3, LOOPS:0, CONDITIONS:1, STMTS:17)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:3, LOOPS:0, CONDITIONS:1, STMTS:17)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:9)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:26)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:76, LOOPS:3, CONDITIONS:32, STMTS:509)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_16 })
  {
    <bb 2>:
    # DEBUG __node_gen s=> __node_gen
    # DEBUG D#751 s=> __node_gen
    # DEBUG __x => __v_1(D)
    # DEBUG this => D#173
    # DEBUG D#875 => &__v_1(D)->first
    # DEBUG this => this_3(D)
    # VUSE <.MEM_7(D)>
    __position$_M_node_130 = MEM[(struct _Rb_tree_const_iterator *)&__position];
    # DEBUG __position$_M_node => __position$_M_node_130
    # DEBUG __k => D#875
    # DEBUG this => &__position
    # DEBUG this => NULL
    # DEBUG __x => __position$_M_node_130
    # DEBUG __pos => __position$_M_node_130
    # DEBUG this => this_3(D)
    __j$_M_node_12 = &this_3(D)->_M_impl._M_header;
    if (__j$_M_node_12 == __position$_M_node_130)
      goto <bb 3>;
    else
      goto <bb 16>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 bb_59 })
  {
    <bb 3>:
    # VUSE <.MEM_7(D)>
    _13 = MEM[(long unsigned int *)this_3(D) + 40B];
    # DEBUG D#132 => this_3(D)
    # DEBUG this => D#132
    if (_13 != 0)
      goto <bb 4>;
    else
      goto <bb 59>;

  }
  bb_4 (preds = {bb_3 }, succs = {bb_52 bb_59 })
  {
    <bb 4>:
    # DEBUG this => this_3(D)
    # VUSE <.MEM_7(D)>
    _14 = MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32];
    # DEBUG __x => _14
    # DEBUG __x => _14
    # DEBUG this => _14
    # DEBUG D#174 => &MEM[(const struct _Rb_tree_node *)_14]._M_value_field
    # DEBUG __r => D#174
    # DEBUG __x => D#174
    # DEBUG this => D#173
    # DEBUG D#413 => &MEM[(const struct pair &)_14 + 32].first
    # DEBUG D#423 => &this_3(D)->_M_impl._M_key_compare
    # DEBUG D#95 => D#423
    # VUSE <.MEM_7(D)>
    _15 = MEM[(const int &)_14 + 32];
    # DEBUG D#96 => D#413
    # VUSE <.MEM_7(D)>
    _16 = MEM[(const int &)__v_1(D)];
    # DEBUG D#97 => D#875
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    if (_15 < _16)
      goto <bb 52>;
    else
      goto <bb 59>;

  }
  bb_10 (preds = {bb_5 }, succs = {bb_61 })
  {
    <bb 10>:
    # _69 = PHI <_32(5)>
    # __j$_M_node_33 = PHI <__j$_M_node_143(5)>

  }
  bb_61 (preds = {bb_10 }, succs = {bb_11 bb_13 })
  {
    <bb 61>:
    # DEBUG this => &__j
    # DEBUG __x => __j$_M_node_33
    # DEBUG __j$_M_node => __j$_M_node_33
    if (_69 > pretmp_121)
      goto <bb 11>;
    else
      goto <bb 13>;

  }
  bb_11 (preds = {bb_61 bb_59 }, succs = {bb_73 bb_12 })
  {
    <bb 11>:
    # __j$_M_node_179 = PHI <__j$_M_node_33(61), __j$_M_node_12(59)>
    # DEBUG this => &__j
    # DEBUG __x => __j$_M_node_179
    # DEBUG __j$_M_node => __j$_M_node_179
    # VUSE <.MEM_7(D)>
    _37 = MEM[(struct _Rb_tree_node_base * *)this_3(D) + 24B];
    # DEBUG D#359 => this_3(D)
    # DEBUG this => D#359
    # DEBUG this => NULL
    # DEBUG __x => _37
    # DEBUG this => &__j
    # DEBUG __x => NULL
    if (_37 == __j$_M_node_179)
      goto <bb 73>;
    else
      goto <bb 12>;

  }
  bb_12 (preds = {bb_11 }, succs = {bb_13 })
  {
    <bb 12>:
    # DEBUG this => &__j
    # VUSE <.MEM_7(D)>
    __j$_M_node_39 = std::_Rb_tree_decrement (__j$_M_node_179);
    # DEBUG __j$_M_node => __j$_M_node_39
    # VUSE <.MEM_7(D)>
    pretmp_18 = MEM[(const int &)__v_1(D)];
    # VUSE <.MEM_7(D)>
    pretmp_128 = MEM[(const int &)__j$_M_node_39 + 32];

  }
  bb_13 (preds = {bb_61 bb_12 }, succs = {bb_65 })
  {
    <bb 13>:
    # __j$_M_node_40 = PHI <__j$_M_node_33(61), __j$_M_node_39(12)>
    # __j$_M_node_178 = PHI <__j$_M_node_33(61), __j$_M_node_179(12)>
    # prephitmp_129 = PHI <pretmp_121(61), pretmp_18(12)>
    # prephitmp_105 = PHI <_69(61), pretmp_128(12)>

  }
  bb_65 (preds = {bb_13 }, succs = {bb_15 bb_14 })
  {
    <bb 65>:
    # DEBUG __j$_M_node => __j$_M_node_40
    # DEBUG __x => __j$_M_node_40
    # DEBUG __x => __j$_M_node_40
    # DEBUG this => __j$_M_node_40
    # DEBUG D#174 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_40]._M_value_field
    # DEBUG __r => D#174
    # DEBUG __x => D#174
    # DEBUG this => D#173
    # DEBUG D#409 => &MEM[(const struct pair &)__j$_M_node_40 + 32].first
    # DEBUG D#411 => &this_3(D)->_M_impl._M_key_compare
    # DEBUG D#95 => D#411
    # DEBUG D#96 => D#409
    # DEBUG D#97 => D#875
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    if (prephitmp_105 < prephitmp_129)
      goto <bb 15>;
    else
      goto <bb 14>;

  }
  bb_14 (preds = {bb_65 }, succs = {bb_15 })
  {
    <bb 14>:

  }
  bb_15 (preds = {bb_14 bb_65 }, succs = {bb_73 })
  {
    <bb 15>:
    # SR.1330_87 = PHI <__j$_M_node_40(14), 0B(65)>
    # SR.1331_118 = PHI <0B(14), __j$_M_node_178(65)>

  }
  bb_73 (preds = {bb_15 bb_11 }, succs = {bb_64 })
  {
    <bb 73>:
    # SR.1330_141 = PHI <SR.1330_87(15), 0B(11)>
    # SR.1331_135 = PHI <SR.1331_118(15), _37(11)>

  }
  bb_64 (preds = {bb_73 }, succs = {bb_52 })
  {
    <bb 64>:
    # DEBUG D#410 => {CLOBBER}
    # DEBUG __j$_M_node => D#410
    goto <bb 52>;

  }
  bb_16 (preds = {bb_2 }, succs = {bb_17 bb_34 })
  {
    <bb 16>:
    # DEBUG __x => __position$_M_node_130
    # DEBUG __x => __position$_M_node_130
    # DEBUG this => __position$_M_node_130
    # DEBUG D#174 => &MEM[(const struct _Rb_tree_node *)__position$_M_node_130]._M_value_field
    # DEBUG __r => D#174
    # DEBUG __x => D#174
    # DEBUG this => D#173
    # DEBUG D#414 => &MEM[(const struct pair &)__position$_M_node_130 + 32].first
    # DEBUG D#425 => &this_3(D)->_M_impl._M_key_compare
    # DEBUG D#95 => D#425
    # VUSE <.MEM_7(D)>
    _19 = MEM[(const int &)__v_1(D)];
    # DEBUG D#96 => D#875
    # VUSE <.MEM_7(D)>
    _20 = MEM[(const int &)__position$_M_node_130 + 32];
    # DEBUG D#97 => D#414
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    if (_19 < _20)
      goto <bb 17>;
    else
      goto <bb 34>;

  }
  bb_17 (preds = {bb_16 }, succs = {bb_52 bb_18 })
  {
    <bb 17>:
    # DEBUG __before => __position$_M_node_130
    # DEBUG this => this_3(D)
    # VUSE <.MEM_7(D)>
    _21 = MEM[(struct _Rb_tree_node_base * &)this_3(D) + 24];
    if (_21 == __position$_M_node_130)
      goto <bb 52>;
    else
      goto <bb 18>;

  }
  bb_18 (preds = {bb_17 }, succs = {bb_19 bb_21 })
  {
    <bb 18>:
    # DEBUG this => &__before
    # VUSE <.MEM_7(D)>
    _22 = std::_Rb_tree_decrement (__position$_M_node_130);
    # DEBUG __before => _22
    # DEBUG __x => _22
    # DEBUG __x => _22
    # DEBUG this => _22
    # DEBUG D#174 => &MEM[(const struct _Rb_tree_node *)_22]._M_value_field
    # DEBUG __r => D#174
    # DEBUG __x => D#174
    # DEBUG this => D#173
    # DEBUG D#415 => &MEM[(const struct pair &)_22 + 32].first
    # DEBUG D#422 => &this_3(D)->_M_impl._M_key_compare
    # DEBUG D#95 => D#422
    # VUSE <.MEM_7(D)>
    _23 = MEM[(const int &)_22 + 32];
    # DEBUG D#96 => D#415
    # DEBUG D#97 => D#875
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    if (_19 > _23)
      goto <bb 19>;
    else
      goto <bb 21>;

  }
  bb_19 (preds = {bb_18 }, succs = {bb_52 bb_20 })
  {
    <bb 19>:
    # VUSE <.MEM_7(D)>
    _24 = MEM[(struct _Rb_tree_node_base * *)_22 + 24B];
    # DEBUG D#107 => _22
    # DEBUG __x => D#107
    if (_24 == 0B)
      goto <bb 52>;
    else
      goto <bb 20>;

  }
  bb_20 (preds = {bb_19 }, succs = {bb_52 })
  {
    <bb 20>:
    goto <bb 52>;

  }
  bb_21 (preds = {bb_18 }, succs = {bb_29 bb_24 })
  {
    <bb 21>:
    # DEBUG this => this_3(D)
    # DEBUG __k => D#875
    # VUSE <.MEM_7(D)>
    _46 = MEM[(struct _Rb_tree_node_base * *)this_3(D) + 16B];
    # DEBUG D#91 => this_3(D)
    # DEBUG this => D#91
    # DEBUG __x => NULL
    # DEBUG this => this_3(D)
    # DEBUG __y => NULL
    # DEBUG __comp => 1
    # DEBUG __comp => 1
    # DEBUG __y => __j$_M_node_12
    # DEBUG __x => _46
    if (_46 == 0B)
      goto <bb 29>;
    else
      goto <bb 24>;

  }
  bb_24 (preds = {bb_21 }, succs = {bb_25 })
  {
    <bb 24>:

  }
  bb_28 (preds = {bb_22 }, succs = {bb_62 })
  {
    <bb 28>:
    # _63 = PHI <_50(22)>
    # __j$_M_node_56 = PHI <__j$_M_node_67(22)>

  }
  bb_62 (preds = {bb_28 }, succs = {bb_29 bb_31 })
  {
    <bb 62>:
    # DEBUG this => &__j
    # DEBUG __x => __j$_M_node_56
    # DEBUG __j$_M_node => __j$_M_node_56
    if (_19 < _63)
      goto <bb 29>;
    else
      goto <bb 31>;

  }
  bb_29 (preds = {bb_62 bb_21 }, succs = {bb_74 bb_30 })
  {
    <bb 29>:
    # __j$_M_node_176 = PHI <__j$_M_node_56(62), __j$_M_node_12(21)>
    # DEBUG this => &__j
    # DEBUG __x => __j$_M_node_176
    # DEBUG __j$_M_node => __j$_M_node_176
    # DEBUG D#359 => this_3(D)
    # DEBUG this => D#359
    # DEBUG this => NULL
    # DEBUG __x => _21
    # DEBUG this => &__j
    # DEBUG __x => NULL
    if (_21 == __j$_M_node_176)
      goto <bb 74>;
    else
      goto <bb 30>;

  }
  bb_30 (preds = {bb_29 }, succs = {bb_31 })
  {
    <bb 30>:
    # DEBUG this => &__j
    # VUSE <.MEM_7(D)>
    __j$_M_node_57 = std::_Rb_tree_decrement (__j$_M_node_176);
    # DEBUG __j$_M_node => __j$_M_node_57
    # VUSE <.MEM_7(D)>
    pretmp_62 = MEM[(const int &)__j$_M_node_57 + 32];

  }
  bb_31 (preds = {bb_62 bb_30 }, succs = {bb_67 })
  {
    <bb 31>:
    # __j$_M_node_58 = PHI <__j$_M_node_56(62), __j$_M_node_57(30)>
    # __j$_M_node_180 = PHI <__j$_M_node_56(62), __j$_M_node_176(30)>
    # prephitmp_119 = PHI <_63(62), pretmp_62(30)>

  }
  bb_67 (preds = {bb_31 }, succs = {bb_33 bb_32 })
  {
    <bb 67>:
    # DEBUG __j$_M_node => __j$_M_node_58
    # DEBUG __x => __j$_M_node_58
    # DEBUG __x => __j$_M_node_58
    # DEBUG this => __j$_M_node_58
    # DEBUG D#174 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_58]._M_value_field
    # DEBUG __r => D#174
    # DEBUG __x => D#174
    # DEBUG this => D#173
    # DEBUG D#409 => &MEM[(const struct pair &)__j$_M_node_58 + 32].first
    # DEBUG D#411 => &this_3(D)->_M_impl._M_key_compare
    # DEBUG D#95 => D#411
    # DEBUG D#96 => D#409
    # DEBUG D#97 => D#875
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    if (_19 > prephitmp_119)
      goto <bb 33>;
    else
      goto <bb 32>;

  }
  bb_32 (preds = {bb_67 }, succs = {bb_33 })
  {
    <bb 32>:

  }
  bb_33 (preds = {bb_32 bb_67 }, succs = {bb_74 })
  {
    <bb 33>:
    # SR.1332_104 = PHI <__j$_M_node_58(32), 0B(67)>
    # SR.1333_120 = PHI <0B(32), __j$_M_node_180(67)>

  }
  bb_74 (preds = {bb_33 bb_29 }, succs = {bb_66 })
  {
    <bb 74>:
    # SR.1332_134 = PHI <SR.1332_104(33), 0B(29)>
    # SR.1333_133 = PHI <SR.1333_120(33), _21(29)>

  }
  bb_66 (preds = {bb_74 }, succs = {bb_52 })
  {
    <bb 66>:
    # DEBUG D#410 => {CLOBBER}
    # DEBUG __j$_M_node => D#410
    goto <bb 52>;

  }
  bb_34 (preds = {bb_16 }, succs = {bb_35 bb_57 })
  {
    <bb 34>:
    # DEBUG __x => __position$_M_node_130
    # DEBUG __x => __position$_M_node_130
    # DEBUG this => __position$_M_node_130
    # DEBUG D#174 => &MEM[(const struct _Rb_tree_node *)__position$_M_node_130]._M_value_field
    # DEBUG __r => D#174
    # DEBUG __x => D#174
    # DEBUG this => D#173
    # DEBUG D#416 => &MEM[(const struct pair &)__position$_M_node_130 + 32].first
    # DEBUG D#424 => &this_3(D)->_M_impl._M_key_compare
    # DEBUG D#95 => D#424
    # DEBUG D#96 => D#416
    # DEBUG D#97 => D#875
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    if (_19 > _20)
      goto <bb 35>;
    else
      goto <bb 57>;

  }
  bb_35 (preds = {bb_34 }, succs = {bb_52 bb_36 })
  {
    <bb 35>:
    # DEBUG __after => __position$_M_node_130
    # DEBUG this => this_3(D)
    # VUSE <.MEM_7(D)>
    _25 = MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32];
    if (_25 == __position$_M_node_130)
      goto <bb 52>;
    else
      goto <bb 36>;

  }
  bb_36 (preds = {bb_35 }, succs = {bb_37 bb_39 })
  {
    <bb 36>:
    # DEBUG this => &__after
    # VUSE <.MEM_7(D)>
    _26 = std::_Rb_tree_increment (__position$_M_node_130);
    # DEBUG __after => _26
    # DEBUG __x => _26
    # DEBUG __x => _26
    # DEBUG this => _26
    # DEBUG D#174 => &MEM[(const struct _Rb_tree_node *)_26]._M_value_field
    # DEBUG __r => D#174
    # DEBUG __x => D#174
    # DEBUG this => D#173
    # DEBUG D#417 => &MEM[(const struct pair &)_26 + 32].first
    # DEBUG D#421 => &this_3(D)->_M_impl._M_key_compare
    # DEBUG D#95 => D#421
    # DEBUG D#96 => D#875
    # VUSE <.MEM_7(D)>
    _27 = MEM[(const int &)_26 + 32];
    # DEBUG D#97 => D#417
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    if (_19 < _27)
      goto <bb 37>;
    else
      goto <bb 39>;

  }
  bb_37 (preds = {bb_36 }, succs = {bb_38 bb_52 })
  {
    <bb 37>:
    # VUSE <.MEM_7(D)>
    _28 = MEM[(struct _Rb_tree_node_base * *)__position$_M_node_130 + 24B];
    # DEBUG D#107 => __position$_M_node_130
    # DEBUG __x => D#107
    if (_28 == 0B)
      goto <bb 38>;
    else
      goto <bb 52>;

  }
  bb_38 (preds = {bb_37 }, succs = {bb_55 bb_57 })
  {
    <bb 38>:
    # DEBUG this => NULL
    # DEBUG __a => NULL
    # DEBUG __b => &__pos._M_node
    # DEBUG D#420 => {CLOBBER}
    # DEBUG __pos => D#420
    # DEBUG __res => 0B
    # DEBUG __res$8 => __position$_M_node_130
    # DEBUG __res$first => 0B
    # DEBUG __res$second => __position$_M_node_130
    if (__position$_M_node_130 != 0B)
      goto <bb 55>;
    else
      goto <bb 57>;

  }
  bb_39 (preds = {bb_36 }, succs = {bb_47 bb_42 })
  {
    <bb 39>:
    # DEBUG this => this_3(D)
    # DEBUG __k => D#875
    # VUSE <.MEM_7(D)>
    _64 = MEM[(struct _Rb_tree_node_base * *)this_3(D) + 16B];
    # DEBUG D#91 => this_3(D)
    # DEBUG this => D#91
    # DEBUG __x => NULL
    # DEBUG this => this_3(D)
    # DEBUG __y => NULL
    # DEBUG __comp => 1
    # DEBUG __comp => 1
    # DEBUG __y => __j$_M_node_12
    # DEBUG __x => _64
    if (_64 == 0B)
      goto <bb 47>;
    else
      goto <bb 42>;

  }
  bb_42 (preds = {bb_39 }, succs = {bb_43 })
  {
    <bb 42>:

  }
  bb_46 (preds = {bb_40 }, succs = {bb_63 })
  {
    <bb 46>:
    # _54 = PHI <_68(40)>
    # __j$_M_node_51 = PHI <__j$_M_node_96(40)>

  }
  bb_63 (preds = {bb_46 }, succs = {bb_47 bb_49 })
  {
    <bb 63>:
    # DEBUG this => &__j
    # DEBUG __x => __j$_M_node_51
    # DEBUG __j$_M_node => __j$_M_node_51
    if (_19 < _54)
      goto <bb 47>;
    else
      goto <bb 49>;

  }
  bb_47 (preds = {bb_63 bb_39 }, succs = {bb_75 bb_48 })
  {
    <bb 47>:
    # __j$_M_node_164 = PHI <__j$_M_node_51(63), __j$_M_node_12(39)>
    # DEBUG this => &__j
    # DEBUG __x => __j$_M_node_164
    # DEBUG __j$_M_node => __j$_M_node_164
    # VUSE <.MEM_7(D)>
    _73 = MEM[(struct _Rb_tree_node_base * *)this_3(D) + 24B];
    # DEBUG D#359 => this_3(D)
    # DEBUG this => D#359
    # DEBUG this => NULL
    # DEBUG __x => _73
    # DEBUG this => &__j
    # DEBUG __x => NULL
    if (_73 == __j$_M_node_164)
      goto <bb 75>;
    else
      goto <bb 48>;

  }
  bb_48 (preds = {bb_47 }, succs = {bb_49 })
  {
    <bb 48>:
    # DEBUG this => &__j
    # VUSE <.MEM_7(D)>
    __j$_M_node_75 = std::_Rb_tree_decrement (__j$_M_node_164);
    # DEBUG __j$_M_node => __j$_M_node_75
    # VUSE <.MEM_7(D)>
    pretmp_4 = MEM[(const int &)__j$_M_node_75 + 32];

  }
  bb_49 (preds = {bb_63 bb_48 }, succs = {bb_69 })
  {
    <bb 49>:
    # __j$_M_node_76 = PHI <__j$_M_node_51(63), __j$_M_node_75(48)>
    # __j$_M_node_154 = PHI <__j$_M_node_51(63), __j$_M_node_164(48)>
    # prephitmp_5 = PHI <_54(63), pretmp_4(48)>

  }
  bb_69 (preds = {bb_49 }, succs = {bb_51 bb_50 })
  {
    <bb 69>:
    # DEBUG __j$_M_node => __j$_M_node_76
    # DEBUG __x => __j$_M_node_76
    # DEBUG __x => __j$_M_node_76
    # DEBUG this => __j$_M_node_76
    # DEBUG D#174 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_76]._M_value_field
    # DEBUG __r => D#174
    # DEBUG __x => D#174
    # DEBUG this => D#173
    # DEBUG D#409 => &MEM[(const struct pair &)__j$_M_node_76 + 32].first
    # DEBUG D#411 => &this_3(D)->_M_impl._M_key_compare
    # DEBUG D#95 => D#411
    # DEBUG D#96 => D#409
    # DEBUG D#97 => D#875
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    if (prephitmp_5 < _19)
      goto <bb 51>;
    else
      goto <bb 50>;

  }
  bb_50 (preds = {bb_69 }, succs = {bb_51 })
  {
    <bb 50>:

  }
  bb_51 (preds = {bb_50 bb_69 }, succs = {bb_75 })
  {
    <bb 51>:
    # SR.1334_31 = PHI <__j$_M_node_76(50), 0B(69)>
    # SR.1335_41 = PHI <0B(50), __j$_M_node_154(69)>

  }
  bb_75 (preds = {bb_51 bb_47 }, succs = {bb_68 })
  {
    <bb 75>:
    # SR.1334_132 = PHI <SR.1334_31(51), 0B(47)>
    # SR.1335_131 = PHI <SR.1335_41(51), _73(47)>

  }
  bb_68 (preds = {bb_75 }, succs = {bb_52 })
  {
    <bb 68>:
    # DEBUG D#410 => {CLOBBER}
    # DEBUG __j$_M_node => D#410

  }
  bb_52 (preds = {bb_4 bb_64 bb_17 bb_19 bb_20 bb_66 bb_35 bb_68 bb_37 }, succs = {bb_53 bb_57 })
  {
    <bb 52>:
    # __res_99 = PHI <0B(4), SR.1330_141(64), _21(17), 0B(19), __position$_M_node_130(20), SR.1332_134(66), 0B(35), SR.1334_132(68), _26(37)>
    # __res$8_98 = PHI <_14(4), SR.1331_135(64), _21(17), _22(19), __position$_M_node_130(20), SR.1333_133(66), _25(35), SR.1335_131(68), _26(37)>
    # DEBUG D#420 => {CLOBBER}
    # DEBUG __pos => D#420
    # DEBUG __res => __res_99
    # DEBUG __res$8 => __res$8_98
    # DEBUG __res$first => __res_99
    # DEBUG __res$second => __res$8_98
    if (__res$8_98 != 0B)
      goto <bb 53>;
    else
      goto <bb 57>;

  }
  bb_53 (preds = {bb_52 }, succs = {bb_56 bb_54 })
  {
    <bb 53>:
    # DEBUG D#746 => D#751
    # DEBUG this => this_3(D)
    # DEBUG __x => __res_99
    # DEBUG __p => __res$8_98
    # DEBUG __v => __v_1(D)
    # DEBUG __node_gen => D#746
    # DEBUG D#745 => D#746
    # DEBUG this => this_3(D)
    _61 = __j$_M_node_12 == __res$8_98;
    _79 = __res_99 != 0B;
    _78 = _61 | _79;
    if (_78 != 0)
      goto <bb 56>;
    else
      goto <bb 54>;

  }
  bb_54 (preds = {bb_53 }, succs = {bb_55 })
  {
    <bb 54>:
    # VUSE <.MEM_7(D)>
    pretmp_161 = MEM[(const int &)__v_1(D)];
    # VUSE <.MEM_7(D)>
    pretmp_11 = MEM[(const int &)__res$8_98 + 32];

  }
  bb_55 (preds = {bb_54 bb_38 }, succs = {bb_72 })
  {
    <bb 55>:
    # __res$8_153 = PHI <__res$8_98(54), __position$_M_node_130(38)>
    # prephitmp_95 = PHI <pretmp_161(54), _19(38)>
    # prephitmp_48 = PHI <pretmp_11(54), _20(38)>

  }
  bb_72 (preds = {bb_55 }, succs = {bb_56 })
  {
    <bb 72>:
    # DEBUG D#746 => D#751
    # DEBUG this => this_3(D)
    # DEBUG __x => NULL
    # DEBUG __p => __res$8_153
    # DEBUG __v => __v_1(D)
    # DEBUG __node_gen => D#746
    # DEBUG D#745 => D#746
    # DEBUG this => this_3(D)
    # DEBUG __x => __res$8_153
    # DEBUG __x => __res$8_153
    # DEBUG this => __res$8_153
    # DEBUG D#174 => &MEM[(const struct _Rb_tree_node *)__res$8_153]._M_value_field
    # DEBUG __r => D#174
    # DEBUG __x => D#174
    # DEBUG this => D#173
    # DEBUG D#743 => &MEM[(const struct pair &)__res$8_153 + 32].first
    # DEBUG __x => __v_1(D)
    # DEBUG this => D#173
    # DEBUG D#744 => &this_3(D)->_M_impl._M_key_compare
    # DEBUG D#95 => D#744
    # DEBUG D#97 => D#743
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    __insert_left_82 = prephitmp_48 > prephitmp_95;
    pretmp_168 = (int) __insert_left_82;

  }
  bb_56 (preds = {bb_72 bb_53 }, succs = {bb_58 })
  {
    <bb 56>:
    # __res$8_167 = PHI <__res$8_153(72), __res$8_98(53)>
    # prephitmp_169 = PHI <pretmp_168(72), 1(53)>
    # DEBUG __insert_left => NULL
    # DEBUG D#730 => D#745
    # DEBUG __arg => __v_1(D)
    # DEBUG this => D#730
    # DEBUG D#729 => D#730
    # DEBUG D#728 => D#729->_M_t
    # DEBUG D#727 => D#728
    # DEBUG __x => __v_1(D)
    # DEBUG this => D#727
    # DEBUG D#726 => D#727
    # DEBUG D#725 => D#727
    # DEBUG D#724 => D#725
    # DEBUG this => D#724
    # DEBUG D#723 => D#724
    # DEBUG this => D#723
    # DEBUG __n => 1
    # DEBUG __a => D#722
    # DEBUG D#721 => D#722
    # DEBUG D#719 => D#721
    # DEBUG D#720 => 0B
    # DEBUG __n => 1
    # DEBUG this => D#719
    # DEBUG D.62922 => D#720
    # DEBUG D#718 => D#719
    # DEBUG D#717 => D#718
    # DEBUG this => D#717
    # .MEM_136 = VDEF <.MEM_7(D)>
    _9 = operator new (56);
    # DEBUG __tmp => _9
    # DEBUG D#632 => D#726
    # DEBUG __node => _9
    # DEBUG __x => __v_1(D)
    # DEBUG this => D#632
    # DEBUG D#631 => D#632
    # DEBUG this => _9
    # DEBUG D#876 => &_9->_M_value_field
    # DEBUG __r => D#876
    # DEBUG D#538 => D#631
    # DEBUG this => D#538
    # DEBUG D#537 => D#538
    # DEBUG this => D#537
    # DEBUG this => NULL
    # DEBUG D.57746 => NULL
    # DEBUG this => NULL
    # DEBUG __p => D#876
    # DEBUG __val => __v_1(D)
    # DEBUG this => D#630
    # DEBUG D#24 => 20
    # DEBUG __p => D#876
    # DEBUG D.59472 => D#24
    # .MEM_137 = VDEF <.MEM_136>
    MEM[(struct pair *)_9 + 32B] = *__v_1(D);
    # DEBUG this => NULL
    # DEBUG this => NULL
    # DEBUG __z => NULL
    # .MEM_139 = VDEF <.MEM_137>
    std::_Rb_tree_insert_and_rebalance (prephitmp_169, _9, __res$8_167, __j$_M_node_12);
    # VUSE <.MEM_139>
    _89 = this_3(D)->_M_impl._M_node_count;
    _90 = _89 + 1;
    # .MEM_140 = VDEF <.MEM_139>
    this_3(D)->_M_impl._M_node_count = _90;
    # DEBUG this => NULL
    # DEBUG __x => NULL
    # .MEM_142 = VDEF <.MEM_140>
    MEM[(struct _Rb_tree_iterator *)&D.62292] = _9;
    goto <bb 58>;

  }
  bb_57 (preds = {bb_52 bb_34 bb_38 }, succs = {bb_71 })
  {
    <bb 57>:
    # __res_147 = PHI <__res_99(52), __position$_M_node_130(34), 0B(38)>

  }
  bb_71 (preds = {bb_57 }, succs = {bb_58 })
  {
    <bb 71>:
    # DEBUG D#420 => {CLOBBER}
    # DEBUG __pos => D#420
    # DEBUG __res => __res_147
    # DEBUG __res$8 => NULL
    # DEBUG __res$first => __res_147
    # DEBUG __res$second => NULL
    # DEBUG this => NULL
    # DEBUG __x => __res_147
    # .MEM_10 = VDEF <.MEM_7(D)>
    MEM[(struct _Rb_tree_iterator *)&D.62292] = __res_147;

  }
  bb_58 (preds = {bb_56 bb_71 }, succs = {bb_70 })
  {
    <bb 58>:
    # .MEM_6 = PHI <.MEM_142(56), .MEM_10(71)>

  }
  bb_70 (preds = {bb_58 }, succs = {bb_1 })
  {
    <bb 70>:
    # DEBUG D#749 => {CLOBBER}
    # DEBUG __res$first => D#749
    # DEBUG D#750 => {CLOBBER}
    # DEBUG __res$second => D#750
    # VUSE <.MEM_6>
    return D.62292;

  }
  bb_59 (preds = {bb_4 bb_3 }, succs = {bb_11 bb_60 })
  {
    <bb 59>:
    # DEBUG this => this_3(D)
    # DEBUG __k => D#875
    # VUSE <.MEM_7(D)>
    _8 = MEM[(struct _Rb_tree_node_base * *)this_3(D) + 16B];
    # DEBUG D#91 => this_3(D)
    # DEBUG this => D#91
    # DEBUG __x => NULL
    # DEBUG this => this_3(D)
    # DEBUG __y => NULL
    # DEBUG __comp => 1
    # DEBUG __comp => 1
    # DEBUG __y => __j$_M_node_12
    # DEBUG __x => _8
    if (_8 == 0B)
      goto <bb 11>;
    else
      goto <bb 60>;

  }
  bb_60 (preds = {bb_59 }, succs = {bb_7 })
  {
    <bb 60>:
    # VUSE <.MEM_7(D)>
    pretmp_121 = MEM[(const int &)__v_1(D)];
    goto <bb 7>;

  }
  loop_1 (header = 7, latch = 6, niter = )
  {
    bb_5 (preds = {bb_8 bb_9 }, succs = {bb_10 bb_6 })
    {
      <bb 5>:
      # _43 = PHI <_34(8), _35(9)>
      # DEBUG __comp => D#877 < _32
      # DEBUG __y => __j$_M_node_143
      # DEBUG __x => _43
      if (_43 == 0B)
        goto <bb 10>;
      else
        goto <bb 6>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_7 })
    {
      <bb 6>:

    }
    bb_7 (preds = {bb_60 bb_6 }, succs = {bb_8 bb_9 })
    {
      <bb 7>:
      # __j$_M_node_143 = PHI <_8(60), _43(6)>
      # DEBUG __comp => 1
      # DEBUG __x => __j$_M_node_143
      # DEBUG __y => __j$_M_node_143
      # DEBUG __x => __j$_M_node_143
      # DEBUG __x => __j$_M_node_143
      # DEBUG this => __j$_M_node_143
      # DEBUG D#331 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_143]._M_value_field
      # DEBUG __r => D#331
      # DEBUG __x => D#331
      # DEBUG this => D#173
      # DEBUG D#408 => &MEM[(const struct pair &)__j$_M_node_143 + 32].first
      # DEBUG D#412 => &this_3(D)->_M_impl._M_key_compare
      # DEBUG D#95 => D#412
      # DEBUG D#877 => MEM[(const int &)__v_1(D)]
      # DEBUG D#96 => D#875
      # VUSE <.MEM_7(D)>
      _32 = MEM[(const int &)__j$_M_node_143 + 32];
      # DEBUG D#97 => D#408
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      # DEBUG __comp => NULL
      if (_32 > pretmp_121)
        goto <bb 8>;
      else
        goto <bb 9>;

    }
    bb_8 (preds = {bb_7 }, succs = {bb_5 })
    {
      <bb 8>:
      # VUSE <.MEM_7(D)>
      _34 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_143 + 16B];
      # DEBUG D#108 => __j$_M_node_143
      # DEBUG __x => D#108
      goto <bb 5>;

    }
    bb_9 (preds = {bb_7 }, succs = {bb_5 })
    {
      <bb 9>:
      # VUSE <.MEM_7(D)>
      _35 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_143 + 24B];
      # DEBUG D#107 => __j$_M_node_143
      # DEBUG __x => D#107
      goto <bb 5>;

    }
  }
  loop_2 (header = 25, latch = 23, niter = )
  {
    bb_22 (preds = {bb_26 bb_27 }, succs = {bb_28 bb_23 })
    {
      <bb 22>:
      # _29 = PHI <_52(26), _53(27)>
      # DEBUG __comp => _19 < _50
      # DEBUG __y => __j$_M_node_67
      # DEBUG __x => _29
      if (_29 == 0B)
        goto <bb 28>;
      else
        goto <bb 23>;

    }
    bb_23 (preds = {bb_22 }, succs = {bb_25 })
    {
      <bb 23>:
      goto <bb 25>;

    }
    bb_25 (preds = {bb_24 bb_23 }, succs = {bb_26 bb_27 })
    {
      <bb 25>:
      # __j$_M_node_67 = PHI <_46(24), _29(23)>
      # DEBUG __comp => 1
      # DEBUG __x => __j$_M_node_67
      # DEBUG __y => __j$_M_node_67
      # DEBUG __x => __j$_M_node_67
      # DEBUG __x => __j$_M_node_67
      # DEBUG this => __j$_M_node_67
      # DEBUG D#331 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_67]._M_value_field
      # DEBUG __r => D#331
      # DEBUG __x => D#331
      # DEBUG this => D#173
      # DEBUG D#408 => &MEM[(const struct pair &)__j$_M_node_67 + 32].first
      # DEBUG D#412 => &this_3(D)->_M_impl._M_key_compare
      # DEBUG D#95 => D#412
      # DEBUG D#96 => D#875
      # VUSE <.MEM_7(D)>
      _50 = MEM[(const int &)__j$_M_node_67 + 32];
      # DEBUG D#97 => D#408
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      # DEBUG __comp => NULL
      if (_19 < _50)
        goto <bb 26>;
      else
        goto <bb 27>;

    }
    bb_26 (preds = {bb_25 }, succs = {bb_22 })
    {
      <bb 26>:
      # VUSE <.MEM_7(D)>
      _52 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_67 + 16B];
      # DEBUG D#108 => __j$_M_node_67
      # DEBUG __x => D#108
      goto <bb 22>;

    }
    bb_27 (preds = {bb_25 }, succs = {bb_22 })
    {
      <bb 27>:
      # VUSE <.MEM_7(D)>
      _53 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_67 + 24B];
      # DEBUG D#107 => __j$_M_node_67
      # DEBUG __x => D#107
      goto <bb 22>;

    }
  }
  loop_3 (header = 43, latch = 41, niter = )
  {
    bb_40 (preds = {bb_44 bb_45 }, succs = {bb_46 bb_41 })
    {
      <bb 40>:
      # _55 = PHI <_70(44), _71(45)>
      # DEBUG __comp => _19 < _68
      # DEBUG __y => __j$_M_node_96
      # DEBUG __x => _55
      if (_55 == 0B)
        goto <bb 46>;
      else
        goto <bb 41>;

    }
    bb_41 (preds = {bb_40 }, succs = {bb_43 })
    {
      <bb 41>:
      goto <bb 43>;

    }
    bb_43 (preds = {bb_42 bb_41 }, succs = {bb_44 bb_45 })
    {
      <bb 43>:
      # __j$_M_node_96 = PHI <_64(42), _55(41)>
      # DEBUG __comp => 1
      # DEBUG __x => __j$_M_node_96
      # DEBUG __y => __j$_M_node_96
      # DEBUG __x => __j$_M_node_96
      # DEBUG __x => __j$_M_node_96
      # DEBUG this => __j$_M_node_96
      # DEBUG D#331 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_96]._M_value_field
      # DEBUG __r => D#331
      # DEBUG __x => D#331
      # DEBUG this => D#173
      # DEBUG D#408 => &MEM[(const struct pair &)__j$_M_node_96 + 32].first
      # DEBUG D#412 => &this_3(D)->_M_impl._M_key_compare
      # DEBUG D#95 => D#412
      # DEBUG D#96 => D#875
      # VUSE <.MEM_7(D)>
      _68 = MEM[(const int &)__j$_M_node_96 + 32];
      # DEBUG D#97 => D#408
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      # DEBUG __comp => NULL
      if (_19 < _68)
        goto <bb 44>;
      else
        goto <bb 45>;

    }
    bb_44 (preds = {bb_43 }, succs = {bb_40 })
    {
      <bb 44>:
      # VUSE <.MEM_7(D)>
      _70 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_96 + 16B];
      # DEBUG D#108 => __j$_M_node_96
      # DEBUG __x => D#108
      goto <bb 40>;

    }
    bb_45 (preds = {bb_43 }, succs = {bb_40 })
    {
      <bb 45>:
      # VUSE <.MEM_7(D)>
      _71 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_96 + 24B];
      # DEBUG D#107 => __j$_M_node_96
      # DEBUG __x => D#107
      goto <bb 40>;

    }
  }
}

Pass statistics:
----------------

std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_insert_unique_(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator, const _Val&, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_Alloc_node; _Key = int; _Val = std::pair<const int, Allocator::sRequest>; _KeyOfValue = std::_Select1st<std::pair<const int, Allocator::sRequest> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, Allocator::sRequest> >] (struct _Rb_treeD.41462 * const thisD.62285, struct const_iteratorD.41768 __positionD.62286, const struct pairD.37146 & __vD.62287)
{
  struct _Rb_tree_node_baseD.24800 * SR.1336D.62945;
  struct _Rb_tree_node_baseD.24800 * SR.1335D.62944;
  struct _Rb_tree_node_baseD.24800 * SR.1334D.62943;
  struct _Rb_tree_node_baseD.24800 * SR.1333D.62942;
  struct _Rb_tree_node_baseD.24800 * SR.1332D.62941;
  struct _Rb_tree_node_baseD.24800 * SR.1331D.62940;
  struct _Rb_tree_node_baseD.24800 * SR.1330D.62939;
  struct _Rb_tree_node_baseD.24800 * SR.1329D.62938;
  struct _Rb_tree_node_baseD.24800 * SR.1328D.62937;
  const struct _Rb_tree_node_baseD.24800 * const __position$_M_nodeD.62936;
  struct _Rb_tree_node_baseD.24800 * __res$8D.62935;
  struct _Rb_tree_node_baseD.24800 * __resD.62934;
  struct _Rb_tree_nodeD.41466 * D.62931;
  boolD.2757 __insert_leftD.62909;
  struct iteratorD.41766 D.62914;
  struct pairD.25253 D.62903;
  boolD.2757 __compD.62882;
  struct _Rb_tree_node_baseD.24800 * const __j$_M_nodeD.62900;
  struct pairD.25253 D.62876;
  boolD.2757 __compD.62855;
  struct _Rb_tree_node_baseD.24800 * const __j$_M_nodeD.62873;
  struct pairD.25253 D.62849;
  boolD.2757 __compD.62828;
  struct _Rb_tree_node_baseD.24800 * const __j$_M_nodeD.62846;
  struct pairD.25253 D.62822;
  struct const_iteratorD.41768 __positionD.62788;
  struct _Rb_tree_node_baseD.24800 * __res$secondD.62294;
  struct _Rb_tree_node_baseD.24800 * __res$firstD.62293;
  struct pairD.25253 __resD.62289;
  struct iteratorD.41766 D.62292;
  const intD.9 pretmp_4;
  const intD.9 prephitmp_5;
  struct _Rb_tree_node_baseD.24800 * _8;
  struct _Rb_tree_nodeD.41466 * _9;
  const intD.9 pretmp_11;
  const size_typeD.41494 _13;
  struct _Rb_tree_node_baseD.24800 * _14;
  const intD.9 _15;
  const intD.9 _16;
  const intD.9 pretmp_18;
  const intD.9 _19;
  const intD.9 _20;
  struct _Rb_tree_node_baseD.24800 * _21;
  struct _Rb_tree_node_baseD.24800 * _22;
  const intD.9 _23;
  struct _Rb_tree_node_baseD.24800 * _24;
  struct _Rb_tree_node_baseD.24800 * _25;
  struct _Rb_tree_node_baseD.24800 * _26;
  const intD.9 _27;
  struct _Rb_tree_node_baseD.24800 * _28;
  struct _Rb_tree_node_baseD.24800 * const _29;
  const intD.9 _32;
  struct _Rb_tree_node_baseD.24800 * _34;
  struct _Rb_tree_node_baseD.24800 * _35;
  struct _Rb_tree_node_baseD.24800 * _37;
  struct _Rb_tree_node_baseD.24800 * const _43;
  struct _Rb_tree_node_baseD.24800 * _46;
  const intD.9 prephitmp_48;
  const intD.9 _50;
  struct _Rb_tree_node_baseD.24800 * _52;
  struct _Rb_tree_node_baseD.24800 * _53;
  const intD.9 _54;
  struct _Rb_tree_node_baseD.24800 * const _55;
  boolD.2757 _61;
  const intD.9 pretmp_62;
  const intD.9 _63;
  struct _Rb_tree_node_baseD.24800 * _64;
  const intD.9 _68;
  const intD.9 _69;
  struct _Rb_tree_node_baseD.24800 * _70;
  struct _Rb_tree_node_baseD.24800 * _71;
  struct _Rb_tree_node_baseD.24800 * _73;
  boolD.2757 _78;
  boolD.2757 _79;
  long unsigned intD.14 _89;
  long unsigned intD.14 _90;
  const intD.9 prephitmp_95;
  const intD.9 prephitmp_105;
  const intD.9 prephitmp_119;
  const intD.9 pretmp_121;
  const intD.9 pretmp_128;
  const intD.9 prephitmp_129;
  const intD.9 pretmp_161;
  intD.9 pretmp_168;
  intD.9 prephitmp_169;

;;   basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __node_genD.62288 s=> __node_genD.61485
  # DEBUG D#751ptD.0 s=> __node_genD.61485
  # DEBUG __xD.62291 => __v_1(D)
  # DEBUG thisD.62290 => D#173ptD.0
  # DEBUG D#875ptD.0 => &__v_1(D)->firstD.42483
  # DEBUG thisD.62787 => this_3(D)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal 
  __position$_M_node_130 = MEM[(struct _Rb_tree_const_iteratorD.41769 *)&__positionD.62286];
  # DEBUG __position$_M_nodeD.62936 => __position$_M_node_130
  # DEBUG __kD.62789 => D#875ptD.0
  # DEBUG thisD.62792 => &__positionD.62788
  # DEBUG thisD.55144 => NULL
  # DEBUG __xD.55143 => __position$_M_node_130
  # DEBUG __posD.55248 => __position$_M_node_130
  # DEBUG thisD.62796 => this_3(D)
  # PT = nonlocal 
  __j$_M_node_12 = &this_3(D)->_M_implD.41540._M_headerD.41695;
  if (__j$_M_node_12 == __position$_M_node_130)
    goto <bb 3>;
  else
    goto <bb 16>;
;;    succ:       3 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 1500, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  _13 = MEM[(long unsigned intD.14 *)this_3(D) + 40B];
  # DEBUG D#132ptD.0 => this_3(D)
  # DEBUG thisD.55148 => D#132ptD.0
  if (_13 != 0)
    goto <bb 4>;
  else
    goto <bb 59>;
;;    succ:       4 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                59 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 750, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.55160 => this_3(D)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _14 = MEM[(struct _Rb_tree_node_baseD.24800 * &)this_3(D) + 32];
  # DEBUG __xD.55156 => _14
  # DEBUG __xD.53214 => _14
  # DEBUG thisD.53215 => _14
  # DEBUG D#174ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)_14]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.55158 => D#174ptD.0
  # DEBUG thisD.55157 => D#173ptD.0
  # DEBUG D#413ptD.0 => &MEM[(const struct pairD.37146 &)_14 + 32].firstD.42483
  # DEBUG D#423ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#423ptD.0
  # VUSE <.MEM_7(D)>
  _15 = MEM[(const intD.9 &)_14 + 32];
  # DEBUG D#96ptD.0 => D#413ptD.0
  # VUSE <.MEM_7(D)>
  _16 = MEM[(const intD.9 &)__v_1(D)];
  # DEBUG D#97ptD.0 => D#875ptD.0
  # DEBUG thisD.55154 => D#95ptD.0
  # DEBUG __xD.55153 => D#96ptD.0
  # DEBUG __yD.55152 => D#97ptD.0
  if (_15 < _16)
    goto <bb 52>;
  else
    goto <bb 59>;
;;    succ:       52 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                59 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 4398, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # _43 = PHI <_34(8), _35(9)>
  # DEBUG __compD.62828 => D#877ptD.0 < _32
  # DEBUG __yD.62827 => __j$_M_node_143
  # DEBUG __xD.62826 => _43
  if (_43 == 0B)
    goto <bb 10>;
  else
    goto <bb 6>;
;;    succ:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 4002, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 4398, maybe hot
;;   Invalid sum of incoming frequencies 5027, should be 4398
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       60 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_143 = PHI <_8(60), _43(6)>
  # DEBUG __compD.62828 => 1
  # DEBUG __xD.62826 => __j$_M_node_143
  # DEBUG __yD.62827 => __j$_M_node_143
  # DEBUG __xD.55088 => __j$_M_node_143
  # DEBUG __xD.54209 => __j$_M_node_143
  # DEBUG thisD.54210 => __j$_M_node_143
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__j$_M_node_143]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.55090 => D#331ptD.0
  # DEBUG thisD.55089 => D#173ptD.0
  # DEBUG D#408ptD.0 => &MEM[(const struct pairD.37146 &)__j$_M_node_143 + 32].firstD.42483
  # DEBUG D#412ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#412ptD.0
  # DEBUG D#877ptD.0 => MEM[(const intD.9 &)__v_1(D)]
  # DEBUG D#96ptD.0 => D#875ptD.0
  # VUSE <.MEM_7(D)>
  _32 = MEM[(const intD.9 &)__j$_M_node_143 + 32];
  # DEBUG D#97ptD.0 => D#408ptD.0
  # DEBUG thisD.62842 => D#95ptD.0
  # DEBUG __xD.62843 => D#96ptD.0
  # DEBUG __yD.62844 => D#97ptD.0
  # DEBUG __compD.62828 => NULL
  if (_32 > pretmp_121)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 2199, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _34 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__j$_M_node_143 + 16B];
  # DEBUG D#108ptD.0 => __j$_M_node_143
  # DEBUG __xD.55093 => D#108ptD.0
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 2199, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       7 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _35 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__j$_M_node_143 + 24B];
  # DEBUG D#107ptD.0 => __j$_M_node_143
  # DEBUG __xD.55096 => D#107ptD.0
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 334, maybe hot
;;    prev block 9, next block 61, flags: (NEW, REACHABLE)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # _69 = PHI <_32(5)>
  # PT = nonlocal escaped 
  # __j$_M_node_33 = PHI <__j$_M_node_143(5)>
;;    succ:       61 [100.0%]  (FALLTHRU)

;;   basic block 61, loop depth 0, count 0, freq 334, maybe hot
;;    prev block 10, next block 11, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU)
  # DEBUG thisD.62841 => &__jD.62829
  # DEBUG __xD.62840 => __j$_M_node_33
  # DEBUG __j$_M_nodeD.62846 => __j$_M_node_33
  if (_69 > pretmp_121)
    goto <bb 11>;
  else
    goto <bb 13>;
;;    succ:       11 [34.8%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [65.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 218, maybe hot
;;    prev block 61, next block 12, flags: (NEW, REACHABLE)
;;    pred:       61 [34.8%]  (TRUE_VALUE,EXECUTABLE)
;;                59 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_179 = PHI <__j$_M_node_33(61), __j$_M_node_12(59)>
  # DEBUG thisD.62841 => &__jD.62829
  # DEBUG __xD.62840 => __j$_M_node_179
  # DEBUG __j$_M_nodeD.62846 => __j$_M_node_179
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _37 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_3(D) + 24B];
  # DEBUG D#359ptD.0 => this_3(D)
  # DEBUG thisD.55104 => D#359ptD.0
  # DEBUG thisD.54565 => NULL
  # DEBUG __xD.54564 => _37
  # DEBUG thisD.55100 => &__jD.62829
  # DEBUG __xD.55101 => NULL
  if (_37 == __j$_M_node_179)
    goto <bb 73>;
  else
    goto <bb 12>;
;;    succ:       73 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 195, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62836 => &__jD.62829
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  __j$_M_node_39 = _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_baseD.24849 (__j$_M_node_179);
  # DEBUG __j$_M_nodeD.62846 => __j$_M_node_39
  # VUSE <.MEM_7(D)>
  pretmp_18 = MEM[(const intD.9 &)__v_1(D)];
  # VUSE <.MEM_7(D)>
  pretmp_128 = MEM[(const intD.9 &)__j$_M_node_39 + 32];
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 413, maybe hot
;;    prev block 12, next block 65, flags: (NEW, REACHABLE)
;;    pred:       61 [65.2%]  (FALSE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_40 = PHI <__j$_M_node_33(61), __j$_M_node_39(12)>
  # PT = nonlocal escaped 
  # __j$_M_node_178 = PHI <__j$_M_node_33(61), __j$_M_node_179(12)>
  # prephitmp_129 = PHI <pretmp_121(61), pretmp_18(12)>
  # prephitmp_105 = PHI <_69(61), pretmp_128(12)>
;;    succ:       65 [100.0%]  (FALLTHRU)

;;   basic block 65, loop depth 0, count 0, freq 413, maybe hot
;;    prev block 13, next block 14, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU)
  # DEBUG __j$_M_nodeD.62846 => __j$_M_node_40
  # DEBUG __xD.55118 => __j$_M_node_40
  # DEBUG __xD.53214 => __j$_M_node_40
  # DEBUG thisD.53215 => __j$_M_node_40
  # DEBUG D#174ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__j$_M_node_40]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.55120 => D#174ptD.0
  # DEBUG thisD.55119 => D#173ptD.0
  # DEBUG D#409ptD.0 => &MEM[(const struct pairD.37146 &)__j$_M_node_40 + 32].firstD.42483
  # DEBUG D#411ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#411ptD.0
  # DEBUG D#96ptD.0 => D#409ptD.0
  # DEBUG D#97ptD.0 => D#875ptD.0
  # DEBUG thisD.55116 => D#95ptD.0
  # DEBUG __xD.55115 => D#96ptD.0
  # DEBUG __yD.55114 => D#97ptD.0
  if (prephitmp_105 < prephitmp_129)
    goto <bb 15>;
  else
    goto <bb 14>;
;;    succ:       15 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 252, maybe hot
;;    prev block 65, next block 15, flags: (NEW)
;;    pred:       65 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 413, maybe hot
;;    prev block 14, next block 73, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                65 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # SR.1330_87 = PHI <__j$_M_node_40(14), 0B(65)>
  # SR.1331_118 = PHI <0B(14), __j$_M_node_178(65)>
;;    succ:       73 [100.0%]  (FALLTHRU)

;;   basic block 73, loop depth 0, count 0, freq 435, maybe hot
;;    prev block 15, next block 64, flags: (NEW)
;;    pred:       15 [100.0%]  (FALLTHRU)
;;                11 [10.1%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped null 
  # SR.1330_141 = PHI <SR.1330_87(15), 0B(11)>
  # PT = nonlocal escaped null 
  # SR.1331_135 = PHI <SR.1331_118(15), _37(11)>
;;    succ:       64 [100.0%]  (FALLTHRU)

;;   basic block 64, loop depth 0, count 0, freq 435, maybe hot
;;    prev block 73, next block 16, flags: (NEW)
;;    pred:       73 [100.0%]  (FALLTHRU)
  # DEBUG D#410ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.62846 => D#410ptD.0
  goto <bb 52>;
;;    succ:       52 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 8500, maybe hot
;;    prev block 64, next block 17, flags: (NEW, REACHABLE)
;;    pred:       2 [85.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.55173 => __position$_M_node_130
  # DEBUG __xD.53214 => __position$_M_node_130
  # DEBUG thisD.53215 => __position$_M_node_130
  # DEBUG D#174ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__position$_M_node_130]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.55175 => D#174ptD.0
  # DEBUG thisD.55174 => D#173ptD.0
  # DEBUG D#414ptD.0 => &MEM[(const struct pairD.37146 &)__position$_M_node_130 + 32].firstD.42483
  # DEBUG D#425ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#425ptD.0
  # VUSE <.MEM_7(D)>
  _19 = MEM[(const intD.9 &)__v_1(D)];
  # DEBUG D#96ptD.0 => D#875ptD.0
  # VUSE <.MEM_7(D)>
  _20 = MEM[(const intD.9 &)__position$_M_node_130 + 32];
  # DEBUG D#97ptD.0 => D#414ptD.0
  # DEBUG thisD.55171 => D#95ptD.0
  # DEBUG __xD.55170 => D#96ptD.0
  # DEBUG __yD.55169 => D#97ptD.0
  if (_19 < _20)
    goto <bb 17>;
  else
    goto <bb 34>;
;;    succ:       17 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 4250, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __beforeD.55251 => __position$_M_node_130
  # DEBUG thisD.55177 => this_3(D)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _21 = MEM[(struct _Rb_tree_node_baseD.24800 * &)this_3(D) + 24];
  if (_21 == __position$_M_node_130)
    goto <bb 52>;
  else
    goto <bb 18>;
;;    succ:       52 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 3819, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62804 => &__beforeD.62797
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _22 = _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_baseD.24849 (__position$_M_node_130);
  # DEBUG __beforeD.55251 => _22
  # DEBUG __xD.55192 => _22
  # DEBUG __xD.53214 => _22
  # DEBUG thisD.53215 => _22
  # DEBUG D#174ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)_22]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.55194 => D#174ptD.0
  # DEBUG thisD.55193 => D#173ptD.0
  # DEBUG D#415ptD.0 => &MEM[(const struct pairD.37146 &)_22 + 32].firstD.42483
  # DEBUG D#422ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#422ptD.0
  # VUSE <.MEM_7(D)>
  _23 = MEM[(const intD.9 &)_22 + 32];
  # DEBUG D#96ptD.0 => D#415ptD.0
  # DEBUG D#97ptD.0 => D#875ptD.0
  # DEBUG thisD.55190 => D#95ptD.0
  # DEBUG __xD.55189 => D#96ptD.0
  # DEBUG __yD.55188 => D#97ptD.0
  if (_19 > _23)
    goto <bb 19>;
  else
    goto <bb 21>;
;;    succ:       19 [79.3%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [20.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 3028, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [79.3%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _24 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_22 + 24B];
  # DEBUG D#107ptD.0 => _22
  # DEBUG __xD.55199 => D#107ptD.0
  if (_24 == 0B)
    goto <bb 52>;
  else
    goto <bb 20>;
;;    succ:       52 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 2574, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       19 [85.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 52>;
;;    succ:       52 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 791, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       18 [20.7%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62850 => this_3(D)
  # DEBUG __kD.62851 => D#875ptD.0
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _46 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_3(D) + 16B];
  # DEBUG D#91ptD.0 => this_3(D)
  # DEBUG thisD.55080 => D#91ptD.0
  # DEBUG __xD.62853 => NULL
  # DEBUG thisD.62872 => this_3(D)
  # DEBUG __yD.62854 => NULL
  # DEBUG __compD.62855 => 1
  # DEBUG __compD.62855 => 1
  # DEBUG __yD.62854 => __j$_M_node_12
  # DEBUG __xD.62853 => _46
  if (_46 == 0B)
    goto <bb 29>;
  else
    goto <bb 24>;
;;    succ:       29 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 7998, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       26 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                27 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # _29 = PHI <_52(26), _53(27)>
  # DEBUG __compD.62855 => _19 < _50
  # DEBUG __yD.62854 => __j$_M_node_67
  # DEBUG __xD.62853 => _29
  if (_29 == 0B)
    goto <bb 28>;
  else
    goto <bb 23>;
;;    succ:       28 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 7278, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 720, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       21 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 7997, maybe hot
;;    prev block 24, next block 26, flags: (NEW)
;;    pred:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_67 = PHI <_46(24), _29(23)>
  # DEBUG __compD.62855 => 1
  # DEBUG __xD.62853 => __j$_M_node_67
  # DEBUG __yD.62854 => __j$_M_node_67
  # DEBUG __xD.55088 => __j$_M_node_67
  # DEBUG __xD.54209 => __j$_M_node_67
  # DEBUG thisD.54210 => __j$_M_node_67
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__j$_M_node_67]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.55090 => D#331ptD.0
  # DEBUG thisD.55089 => D#173ptD.0
  # DEBUG D#408ptD.0 => &MEM[(const struct pairD.37146 &)__j$_M_node_67 + 32].firstD.42483
  # DEBUG D#412ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#412ptD.0
  # DEBUG D#96ptD.0 => D#875ptD.0
  # VUSE <.MEM_7(D)>
  _50 = MEM[(const intD.9 &)__j$_M_node_67 + 32];
  # DEBUG D#97ptD.0 => D#408ptD.0
  # DEBUG thisD.62869 => D#95ptD.0
  # DEBUG __xD.62870 => D#96ptD.0
  # DEBUG __yD.62871 => D#97ptD.0
  # DEBUG __compD.62855 => NULL
  if (_19 < _50)
    goto <bb 26>;
  else
    goto <bb 27>;
;;    succ:       26 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 1, count 0, freq 3999, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       25 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _52 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__j$_M_node_67 + 16B];
  # DEBUG D#108ptD.0 => __j$_M_node_67
  # DEBUG __xD.55093 => D#108ptD.0
  goto <bb 22>;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 1, count 0, freq 3999, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       25 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _53 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__j$_M_node_67 + 24B];
  # DEBUG D#107ptD.0 => __j$_M_node_67
  # DEBUG __xD.55096 => D#107ptD.0
  goto <bb 22>;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 720, maybe hot
;;    prev block 27, next block 62, flags: (NEW, REACHABLE)
;;    pred:       22 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # _63 = PHI <_50(22)>
  # PT = nonlocal escaped 
  # __j$_M_node_56 = PHI <__j$_M_node_67(22)>
;;    succ:       62 [100.0%]  (FALLTHRU)

;;   basic block 62, loop depth 0, count 0, freq 720, maybe hot
;;    prev block 28, next block 29, flags: (NEW)
;;    pred:       28 [100.0%]  (FALLTHRU)
  # DEBUG thisD.62868 => &__jD.62856
  # DEBUG __xD.62867 => __j$_M_node_56
  # DEBUG __j$_M_nodeD.62873 => __j$_M_node_56
  if (_19 < _63)
    goto <bb 29>;
  else
    goto <bb 31>;
;;    succ:       29 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [55.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 395, maybe hot
;;    prev block 62, next block 30, flags: (NEW, REACHABLE)
;;    pred:       62 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_176 = PHI <__j$_M_node_56(62), __j$_M_node_12(21)>
  # DEBUG thisD.62868 => &__jD.62856
  # DEBUG __xD.62867 => __j$_M_node_176
  # DEBUG __j$_M_nodeD.62873 => __j$_M_node_176
  # DEBUG D#359ptD.0 => this_3(D)
  # DEBUG thisD.55104 => D#359ptD.0
  # DEBUG thisD.54565 => NULL
  # DEBUG __xD.54564 => _21
  # DEBUG thisD.55100 => &__jD.62856
  # DEBUG __xD.55101 => NULL
  if (_21 == __j$_M_node_176)
    goto <bb 74>;
  else
    goto <bb 30>;
;;    succ:       74 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 355, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62863 => &__jD.62856
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  __j$_M_node_57 = _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_baseD.24849 (__j$_M_node_176);
  # DEBUG __j$_M_nodeD.62873 => __j$_M_node_57
  # VUSE <.MEM_7(D)>
  pretmp_62 = MEM[(const intD.9 &)__j$_M_node_57 + 32];
;;    succ:       31 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 751, maybe hot
;;    prev block 30, next block 67, flags: (NEW, REACHABLE)
;;    pred:       62 [55.0%]  (FALSE_VALUE,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_58 = PHI <__j$_M_node_56(62), __j$_M_node_57(30)>
  # PT = nonlocal escaped 
  # __j$_M_node_180 = PHI <__j$_M_node_56(62), __j$_M_node_176(30)>
  # prephitmp_119 = PHI <_63(62), pretmp_62(30)>
;;    succ:       67 [100.0%]  (FALLTHRU)

;;   basic block 67, loop depth 0, count 0, freq 751, maybe hot
;;    prev block 31, next block 32, flags: (NEW)
;;    pred:       31 [100.0%]  (FALLTHRU)
  # DEBUG __j$_M_nodeD.62873 => __j$_M_node_58
  # DEBUG __xD.55118 => __j$_M_node_58
  # DEBUG __xD.53214 => __j$_M_node_58
  # DEBUG thisD.53215 => __j$_M_node_58
  # DEBUG D#174ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__j$_M_node_58]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.55120 => D#174ptD.0
  # DEBUG thisD.55119 => D#173ptD.0
  # DEBUG D#409ptD.0 => &MEM[(const struct pairD.37146 &)__j$_M_node_58 + 32].firstD.42483
  # DEBUG D#411ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#411ptD.0
  # DEBUG D#96ptD.0 => D#409ptD.0
  # DEBUG D#97ptD.0 => D#875ptD.0
  # DEBUG thisD.55116 => D#95ptD.0
  # DEBUG __xD.55115 => D#96ptD.0
  # DEBUG __yD.55114 => D#97ptD.0
  if (_19 > prephitmp_119)
    goto <bb 33>;
  else
    goto <bb 32>;
;;    succ:       33 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 458, maybe hot
;;    prev block 67, next block 33, flags: (NEW)
;;    pred:       67 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       33 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 751, maybe hot
;;    prev block 32, next block 74, flags: (NEW, REACHABLE)
;;    pred:       32 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                67 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # SR.1332_104 = PHI <__j$_M_node_58(32), 0B(67)>
  # SR.1333_120 = PHI <0B(32), __j$_M_node_180(67)>
;;    succ:       74 [100.0%]  (FALLTHRU)

;;   basic block 74, loop depth 0, count 0, freq 791, maybe hot
;;    prev block 33, next block 66, flags: (NEW)
;;    pred:       33 [100.0%]  (FALLTHRU)
;;                29 [10.1%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped null 
  # SR.1332_134 = PHI <SR.1332_104(33), 0B(29)>
  # PT = nonlocal escaped null 
  # SR.1333_133 = PHI <SR.1333_120(33), _21(29)>
;;    succ:       66 [100.0%]  (FALLTHRU)

;;   basic block 66, loop depth 0, count 0, freq 791, maybe hot
;;    prev block 74, next block 34, flags: (NEW)
;;    pred:       74 [100.0%]  (FALLTHRU)
  # DEBUG D#410ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.62873 => D#410ptD.0
  goto <bb 52>;
;;    succ:       52 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 4250, maybe hot
;;    prev block 66, next block 35, flags: (NEW, REACHABLE)
;;    pred:       16 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.55213 => __position$_M_node_130
  # DEBUG __xD.53214 => __position$_M_node_130
  # DEBUG thisD.53215 => __position$_M_node_130
  # DEBUG D#174ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__position$_M_node_130]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.55215 => D#174ptD.0
  # DEBUG thisD.55214 => D#173ptD.0
  # DEBUG D#416ptD.0 => &MEM[(const struct pairD.37146 &)__position$_M_node_130 + 32].firstD.42483
  # DEBUG D#424ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#424ptD.0
  # DEBUG D#96ptD.0 => D#416ptD.0
  # DEBUG D#97ptD.0 => D#875ptD.0
  # DEBUG thisD.55211 => D#95ptD.0
  # DEBUG __xD.55210 => D#96ptD.0
  # DEBUG __yD.55209 => D#97ptD.0
  if (_19 > _20)
    goto <bb 35>;
  else
    goto <bb 57>;
;;    succ:       35 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                57 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 2125, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       34 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __afterD.55258 => __position$_M_node_130
  # DEBUG thisD.55217 => this_3(D)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _25 = MEM[(struct _Rb_tree_node_baseD.24800 * &)this_3(D) + 32];
  if (_25 == __position$_M_node_130)
    goto <bb 52>;
  else
    goto <bb 36>;
;;    succ:       52 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 1910, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       35 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62818 => &__afterD.62811
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _26 = _ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_baseD.24845 (__position$_M_node_130);
  # DEBUG __afterD.55258 => _26
  # DEBUG __xD.55230 => _26
  # DEBUG __xD.53214 => _26
  # DEBUG thisD.53215 => _26
  # DEBUG D#174ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)_26]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.55232 => D#174ptD.0
  # DEBUG thisD.55231 => D#173ptD.0
  # DEBUG D#417ptD.0 => &MEM[(const struct pairD.37146 &)_26 + 32].firstD.42483
  # DEBUG D#421ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#421ptD.0
  # DEBUG D#96ptD.0 => D#875ptD.0
  # VUSE <.MEM_7(D)>
  _27 = MEM[(const intD.9 &)_26 + 32];
  # DEBUG D#97ptD.0 => D#417ptD.0
  # DEBUG thisD.55228 => D#95ptD.0
  # DEBUG __xD.55227 => D#96ptD.0
  # DEBUG __yD.55226 => D#97ptD.0
  if (_19 < _27)
    goto <bb 37>;
  else
    goto <bb 39>;
;;    succ:       37 [79.3%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [20.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 1514, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       36 [79.3%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _28 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__position$_M_node_130 + 24B];
  # DEBUG D#107ptD.0 => __position$_M_node_130
  # DEBUG __xD.55237 => D#107ptD.0
  if (_28 == 0B)
    goto <bb 38>;
  else
    goto <bb 52>;
;;    succ:       38 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                52 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 227, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       37 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.62817 => NULL
  # DEBUG __aD.62816 => NULL
  # DEBUG __bD.62815 => &__posD.62790._M_nodeD.42458
  # DEBUG D#420ptD.0 => {CLOBBER}
  # DEBUG __posD.55248 => D#420ptD.0
  # DEBUG __resD.62934 => 0B
  # DEBUG __res$8D.62935 => __position$_M_node_130
  # DEBUG __res$firstD.62293 => 0B
  # DEBUG __res$secondD.62294 => __position$_M_node_130
  if (__position$_M_node_130 != 0B)
    goto <bb 55>;
  else
    goto <bb 57>;
;;    succ:       55 [75.7%]  (TRUE_VALUE,EXECUTABLE)
;;                57 [24.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 395, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       36 [20.7%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62877 => this_3(D)
  # DEBUG __kD.62878 => D#875ptD.0
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _64 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_3(D) + 16B];
  # DEBUG D#91ptD.0 => this_3(D)
  # DEBUG thisD.55080 => D#91ptD.0
  # DEBUG __xD.62880 => NULL
  # DEBUG thisD.62899 => this_3(D)
  # DEBUG __yD.62881 => NULL
  # DEBUG __compD.62882 => 1
  # DEBUG __compD.62882 => 1
  # DEBUG __yD.62881 => __j$_M_node_12
  # DEBUG __xD.62880 => _64
  if (_64 == 0B)
    goto <bb 47>;
  else
    goto <bb 42>;
;;    succ:       47 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                42 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 1, count 0, freq 3999, maybe hot
;;    prev block 39, next block 41, flags: (NEW, REACHABLE)
;;    pred:       44 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                45 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # _55 = PHI <_70(44), _71(45)>
  # DEBUG __compD.62882 => _19 < _68
  # DEBUG __yD.62881 => __j$_M_node_96
  # DEBUG __xD.62880 => _55
  if (_55 == 0B)
    goto <bb 46>;
  else
    goto <bb 41>;
;;    succ:       46 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                41 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 41, loop depth 1, count 0, freq 3639, maybe hot
;;    prev block 40, next block 42, flags: (NEW)
;;    pred:       40 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 43>;
;;    succ:       43 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 359, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       39 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       43 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 43, loop depth 1, count 0, freq 3999, maybe hot
;;    prev block 42, next block 44, flags: (NEW)
;;    pred:       42 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_96 = PHI <_64(42), _55(41)>
  # DEBUG __compD.62882 => 1
  # DEBUG __xD.62880 => __j$_M_node_96
  # DEBUG __yD.62881 => __j$_M_node_96
  # DEBUG __xD.55088 => __j$_M_node_96
  # DEBUG __xD.54209 => __j$_M_node_96
  # DEBUG thisD.54210 => __j$_M_node_96
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__j$_M_node_96]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.55090 => D#331ptD.0
  # DEBUG thisD.55089 => D#173ptD.0
  # DEBUG D#408ptD.0 => &MEM[(const struct pairD.37146 &)__j$_M_node_96 + 32].firstD.42483
  # DEBUG D#412ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#412ptD.0
  # DEBUG D#96ptD.0 => D#875ptD.0
  # VUSE <.MEM_7(D)>
  _68 = MEM[(const intD.9 &)__j$_M_node_96 + 32];
  # DEBUG D#97ptD.0 => D#408ptD.0
  # DEBUG thisD.62896 => D#95ptD.0
  # DEBUG __xD.62897 => D#96ptD.0
  # DEBUG __yD.62898 => D#97ptD.0
  # DEBUG __compD.62882 => NULL
  if (_19 < _68)
    goto <bb 44>;
  else
    goto <bb 45>;
;;    succ:       44 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                45 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 44, loop depth 1, count 0, freq 1999, maybe hot
;;    prev block 43, next block 45, flags: (NEW, REACHABLE)
;;    pred:       43 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _70 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__j$_M_node_96 + 16B];
  # DEBUG D#108ptD.0 => __j$_M_node_96
  # DEBUG __xD.55093 => D#108ptD.0
  goto <bb 40>;
;;    succ:       40 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 45, loop depth 1, count 0, freq 1999, maybe hot
;;    prev block 44, next block 46, flags: (NEW, REACHABLE)
;;    pred:       43 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _71 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__j$_M_node_96 + 24B];
  # DEBUG D#107ptD.0 => __j$_M_node_96
  # DEBUG __xD.55096 => D#107ptD.0
  goto <bb 40>;
;;    succ:       40 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 46, loop depth 0, count 0, freq 359, maybe hot
;;    prev block 45, next block 63, flags: (NEW, REACHABLE)
;;    pred:       40 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # _54 = PHI <_68(40)>
  # PT = nonlocal escaped 
  # __j$_M_node_51 = PHI <__j$_M_node_96(40)>
;;    succ:       63 [100.0%]  (FALLTHRU)

;;   basic block 63, loop depth 0, count 0, freq 359, maybe hot
;;    prev block 46, next block 47, flags: (NEW)
;;    pred:       46 [100.0%]  (FALLTHRU)
  # DEBUG thisD.62895 => &__jD.62883
  # DEBUG __xD.62894 => __j$_M_node_51
  # DEBUG __j$_M_nodeD.62900 => __j$_M_node_51
  if (_19 < _54)
    goto <bb 47>;
  else
    goto <bb 49>;
;;    succ:       47 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                49 [55.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 47, loop depth 0, count 0, freq 198, maybe hot
;;    prev block 63, next block 48, flags: (NEW, REACHABLE)
;;    pred:       63 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_164 = PHI <__j$_M_node_51(63), __j$_M_node_12(39)>
  # DEBUG thisD.62895 => &__jD.62883
  # DEBUG __xD.62894 => __j$_M_node_164
  # DEBUG __j$_M_nodeD.62900 => __j$_M_node_164
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _73 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_3(D) + 24B];
  # DEBUG D#359ptD.0 => this_3(D)
  # DEBUG thisD.55104 => D#359ptD.0
  # DEBUG thisD.54565 => NULL
  # DEBUG __xD.54564 => _73
  # DEBUG thisD.55100 => &__jD.62883
  # DEBUG __xD.55101 => NULL
  if (_73 == __j$_M_node_164)
    goto <bb 75>;
  else
    goto <bb 48>;
;;    succ:       75 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                48 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 48, loop depth 0, count 0, freq 178, maybe hot
;;    prev block 47, next block 49, flags: (NEW, REACHABLE)
;;    pred:       47 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62890 => &__jD.62883
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  __j$_M_node_75 = _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_baseD.24849 (__j$_M_node_164);
  # DEBUG __j$_M_nodeD.62900 => __j$_M_node_75
  # VUSE <.MEM_7(D)>
  pretmp_4 = MEM[(const intD.9 &)__j$_M_node_75 + 32];
;;    succ:       49 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 49, loop depth 0, count 0, freq 375, maybe hot
;;    prev block 48, next block 69, flags: (NEW, REACHABLE)
;;    pred:       63 [55.0%]  (FALSE_VALUE,EXECUTABLE)
;;                48 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_76 = PHI <__j$_M_node_51(63), __j$_M_node_75(48)>
  # PT = nonlocal escaped 
  # __j$_M_node_154 = PHI <__j$_M_node_51(63), __j$_M_node_164(48)>
  # prephitmp_5 = PHI <_54(63), pretmp_4(48)>
;;    succ:       69 [100.0%]  (FALLTHRU)

;;   basic block 69, loop depth 0, count 0, freq 375, maybe hot
;;    prev block 49, next block 50, flags: (NEW)
;;    pred:       49 [100.0%]  (FALLTHRU)
  # DEBUG __j$_M_nodeD.62900 => __j$_M_node_76
  # DEBUG __xD.55118 => __j$_M_node_76
  # DEBUG __xD.53214 => __j$_M_node_76
  # DEBUG thisD.53215 => __j$_M_node_76
  # DEBUG D#174ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__j$_M_node_76]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.55120 => D#174ptD.0
  # DEBUG thisD.55119 => D#173ptD.0
  # DEBUG D#409ptD.0 => &MEM[(const struct pairD.37146 &)__j$_M_node_76 + 32].firstD.42483
  # DEBUG D#411ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#411ptD.0
  # DEBUG D#96ptD.0 => D#409ptD.0
  # DEBUG D#97ptD.0 => D#875ptD.0
  # DEBUG thisD.55116 => D#95ptD.0
  # DEBUG __xD.55115 => D#96ptD.0
  # DEBUG __yD.55114 => D#97ptD.0
  if (prephitmp_5 < _19)
    goto <bb 51>;
  else
    goto <bb 50>;
;;    succ:       51 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                50 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 50, loop depth 0, count 0, freq 229, maybe hot
;;    prev block 69, next block 51, flags: (NEW)
;;    pred:       69 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       51 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 51, loop depth 0, count 0, freq 375, maybe hot
;;    prev block 50, next block 75, flags: (NEW, REACHABLE)
;;    pred:       50 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                69 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # SR.1334_31 = PHI <__j$_M_node_76(50), 0B(69)>
  # SR.1335_41 = PHI <0B(50), __j$_M_node_154(69)>
;;    succ:       75 [100.0%]  (FALLTHRU)

;;   basic block 75, loop depth 0, count 0, freq 395, maybe hot
;;    prev block 51, next block 68, flags: (NEW)
;;    pred:       51 [100.0%]  (FALLTHRU)
;;                47 [10.1%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped null 
  # SR.1334_132 = PHI <SR.1334_31(51), 0B(47)>
  # PT = nonlocal escaped null 
  # SR.1335_131 = PHI <SR.1335_41(51), _73(47)>
;;    succ:       68 [100.0%]  (FALLTHRU)

;;   basic block 68, loop depth 0, count 0, freq 395, maybe hot
;;    prev block 75, next block 52, flags: (NEW)
;;    pred:       75 [100.0%]  (FALLTHRU)
  # DEBUG D#410ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.62900 => D#410ptD.0
;;    succ:       52 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 52, loop depth 0, count 0, freq 7648, maybe hot
;;   Invalid sum of incoming frequencies 6957, should be 7648
;;    prev block 68, next block 53, flags: (NEW, REACHABLE)
;;    pred:       4 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                64 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                17 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                66 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                68 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                37 [85.0%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped null 
  # __res_99 = PHI <0B(4), SR.1330_141(64), _21(17), 0B(19), __position$_M_node_130(20), SR.1332_134(66), 0B(35), SR.1334_132(68), _26(37)>
  # PT = nonlocal escaped null 
  # __res$8_98 = PHI <_14(4), SR.1331_135(64), _21(17), _22(19), __position$_M_node_130(20), SR.1333_133(66), _25(35), SR.1335_131(68), _26(37)>
  # DEBUG D#420ptD.0 => {CLOBBER}
  # DEBUG __posD.55248 => D#420ptD.0
  # DEBUG __resD.62934 => __res_99
  # DEBUG __res$8D.62935 => __res$8_98
  # DEBUG __res$firstD.62293 => __res_99
  # DEBUG __res$secondD.62294 => __res$8_98
  if (__res$8_98 != 0B)
    goto <bb 53>;
  else
    goto <bb 57>;
;;    succ:       53 [75.8%]  (TRUE_VALUE,EXECUTABLE)
;;                57 [24.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 53, loop depth 0, count 0, freq 1119, maybe hot
;;   Invalid sum of incoming frequencies 5796, should be 1119
;;    prev block 52, next block 54, flags: (NEW, REACHABLE)
;;    pred:       52 [75.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#746ptD.0 => D#751ptD.0
  # DEBUG thisD.62904 => this_3(D)
  # DEBUG __xD.62905 => __res_99
  # DEBUG __pD.62906 => __res$8_98
  # DEBUG __vD.62907 => __v_1(D)
  # DEBUG __node_genD.62908 => D#746ptD.0
  # DEBUG D#745ptD.0 => D#746ptD.0
  # DEBUG thisD.62913 => this_3(D)
  _61 = __j$_M_node_12 == __res$8_98;
  # RANGE [0, 1]
  _79 = __res_99 != 0B;
  _78 = _61 | _79;
  if (_78 != 0)
    goto <bb 56>;
  else
    goto <bb 54>;
;;    succ:       56 [11.7%]  (TRUE_VALUE,EXECUTABLE)
;;                54 [88.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 54, loop depth 0, count 0, freq 988, maybe hot
;;    prev block 53, next block 55, flags: (NEW)
;;    pred:       53 [88.3%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  pretmp_161 = MEM[(const intD.9 &)__v_1(D)];
  # VUSE <.MEM_7(D)>
  pretmp_11 = MEM[(const intD.9 &)__res$8_98 + 32];
;;    succ:       55 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 55, loop depth 0, count 0, freq 1160, maybe hot
;;    prev block 54, next block 72, flags: (NEW, REACHABLE)
;;    pred:       54 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                38 [75.7%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped null 
  # __res$8_153 = PHI <__res$8_98(54), __position$_M_node_130(38)>
  # prephitmp_95 = PHI <pretmp_161(54), _19(38)>
  # prephitmp_48 = PHI <pretmp_11(54), _20(38)>
;;    succ:       72 [100.0%]  (FALLTHRU)

;;   basic block 72, loop depth 0, count 0, freq 1160, maybe hot
;;    prev block 55, next block 56, flags: (NEW)
;;    pred:       55 [100.0%]  (FALLTHRU)
  # DEBUG D#746ptD.0 => D#751ptD.0
  # DEBUG thisD.62904 => this_3(D)
  # DEBUG __xD.62905 => NULL
  # DEBUG __pD.62906 => __res$8_153
  # DEBUG __vD.62907 => __v_1(D)
  # DEBUG __node_genD.62908 => D#746ptD.0
  # DEBUG D#745ptD.0 => D#746ptD.0
  # DEBUG thisD.62913 => this_3(D)
  # DEBUG __xD.61451 => __res$8_153
  # DEBUG __xD.53214 => __res$8_153
  # DEBUG thisD.53215 => __res$8_153
  # DEBUG D#174ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__res$8_153]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.61453 => D#174ptD.0
  # DEBUG thisD.61452 => D#173ptD.0
  # DEBUG D#743ptD.0 => &MEM[(const struct pairD.37146 &)__res$8_153 + 32].firstD.42483
  # DEBUG __xD.61455 => __v_1(D)
  # DEBUG thisD.61454 => D#173ptD.0
  # DEBUG D#744ptD.0 => &this_3(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#744ptD.0
  # DEBUG D#97ptD.0 => D#743ptD.0
  # DEBUG thisD.61456 => D#95ptD.0
  # DEBUG __xD.61457 => D#96ptD.0
  # DEBUG __yD.61458 => D#97ptD.0
  __insert_left_82 = prephitmp_48 > prephitmp_95;
  pretmp_168 = (intD.9) __insert_left_82;
;;    succ:       56 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 56, loop depth 0, count 0, freq 5968, maybe hot
;;   Invalid sum of incoming frequencies 1291, should be 5968
;;    prev block 72, next block 57, flags: (NEW, REACHABLE)
;;    pred:       72 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                53 [11.7%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped null 
  # __res$8_167 = PHI <__res$8_153(72), __res$8_98(53)>
  # RANGE [0, 1] NONZERO 1
  # prephitmp_169 = PHI <pretmp_168(72), 1(53)>
  # DEBUG __insert_leftD.62909 => NULL
  # DEBUG D#730ptD.0 => D#745ptD.0
  # DEBUG __argD.62912 => __v_1(D)
  # DEBUG thisD.62911 => D#730ptD.0
  # DEBUG D#729ptD.0 => D#730ptD.0
  # DEBUG D#728ptD.0 => D#729ptD.0->_M_tD.45275
  # DEBUG D#727ptD.0 => D#728ptD.0
  # DEBUG __xD.62915 => __v_1(D)
  # DEBUG thisD.62916 => D#727ptD.0
  # DEBUG D#726ptD.0 => D#727ptD.0
  # DEBUG D#725ptD.0 => D#727ptD.0
  # DEBUG D#724ptD.0 => D#725ptD.0
  # DEBUG thisD.62918 => D#724ptD.0
  # DEBUG D#723ptD.0 => D#724ptD.0
  # DEBUG thisD.61114 => D#723ptD.0
  # DEBUG __nD.62920 => 1
  # DEBUG __aD.62919 => D#722ptD.0
  # DEBUG D#721ptD.0 => D#722ptD.0
  # DEBUG D#719ptD.0 => D#721ptD.0
  # DEBUG D#720ptD.0 => 0B
  # DEBUG __nD.62923 => 1
  # DEBUG thisD.62921 => D#719ptD.0
  # DEBUG D.62922 => D#720ptD.0
  # DEBUG D#718ptD.0 => D#719ptD.0
  # DEBUG D#717ptD.0 => D#718ptD.0
  # DEBUG thisD.61072 => D#717ptD.0
  # .MEM_136 = VDEF <.MEM_7(D)>
  # PT = { D.62946 } (escaped heap)
  # USE = nonlocal null { D.62946 } (escaped heap)
  # CLB = nonlocal null { D.62946 } (escaped heap)
  _9 = _ZnwmD.2764 (56);
  # DEBUG __tmpD.62917 => _9
  # DEBUG D#632ptD.0 => D#726ptD.0
  # DEBUG __nodeD.62926 => _9
  # DEBUG __xD.62925 => __v_1(D)
  # DEBUG thisD.62924 => D#632ptD.0
  # DEBUG D#631ptD.0 => D#632ptD.0
  # DEBUG thisD.62927 => _9
  # DEBUG D#876ptD.0 => &_9->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#876ptD.0
  # DEBUG D#538ptD.0 => D#631ptD.0
  # DEBUG thisD.59488 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG __pD.62930 => D#876ptD.0
  # DEBUG __valD.62929 => __v_1(D)
  # DEBUG thisD.62928 => D#630ptD.0
  # DEBUG D#24ptD.0 => 20
  # DEBUG __pD.59471 => D#876ptD.0
  # DEBUG D.59472 => D#24ptD.0
  # .MEM_137 = VDEF <.MEM_136>
  MEM[(struct pairD.37146 *)_9 + 32B] = *__v_1(D);
  # DEBUG thisD.59501 => NULL
  # DEBUG thisD.59484 => NULL
  # DEBUG __zD.62910 => NULL
  # .MEM_139 = VDEF <.MEM_137>
  # USE = nonlocal null { D.62946 } (escaped heap)
  # CLB = nonlocal null { D.62946 } (escaped heap)
  _ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_D.25026 (prephitmp_169, _9, __res$8_167, __j$_M_node_12);
  # VUSE <.MEM_139>
  _89 = this_3(D)->_M_implD.41540._M_node_countD.41696;
  # RANGE [0, 18446744073709551615]
  _90 = _89 + 1;
  # .MEM_140 = VDEF <.MEM_139>
  this_3(D)->_M_implD.41540._M_node_countD.41696 = _90;
  # DEBUG thisD.61450 => NULL
  # DEBUG __xD.61449 => NULL
  # .MEM_142 = VDEF <.MEM_140>
  MEM[(struct _Rb_tree_iteratorD.41767 *)&D.62292] = _9;
  goto <bb 58>;
;;    succ:       58 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 57, loop depth 0, count 0, freq 4032, maybe hot
;;    prev block 56, next block 71, flags: (NEW, REACHABLE)
;;    pred:       52 [24.2%]  (FALSE_VALUE,EXECUTABLE)
;;                34 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                38 [24.3%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped null 
  # __res_147 = PHI <__res_99(52), __position$_M_node_130(34), 0B(38)>
;;    succ:       71 [100.0%]  (FALLTHRU)

;;   basic block 71, loop depth 0, count 0, freq 4032, maybe hot
;;    prev block 57, next block 58, flags: (NEW)
;;    pred:       57 [100.0%]  (FALLTHRU)
  # DEBUG D#420ptD.0 => {CLOBBER}
  # DEBUG __posD.55248 => D#420ptD.0
  # DEBUG __resD.62934 => __res_147
  # DEBUG __res$8D.62935 => NULL
  # DEBUG __res$firstD.62293 => __res_147
  # DEBUG __res$secondD.62294 => NULL
  # DEBUG thisD.61488 => NULL
  # DEBUG __xD.61487 => __res_147
  # .MEM_10 = VDEF <.MEM_7(D)>
  MEM[(struct _Rb_tree_iteratorD.41767 *)&D.62292] = __res_147;
;;    succ:       58 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 58, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 71, next block 70, flags: (NEW, REACHABLE)
;;    pred:       56 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                71 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_6 = PHI <.MEM_142(56), .MEM_10(71)>
;;    succ:       70 [100.0%]  (FALLTHRU)

;;   basic block 70, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 58, next block 59, flags: (NEW)
;;    pred:       58 [100.0%]  (FALLTHRU)
  # DEBUG D#749ptD.0 => {CLOBBER}
  # DEBUG __res$firstD.62293 => D#749ptD.0
  # DEBUG D#750ptD.0 => {CLOBBER}
  # DEBUG __res$secondD.62294 => D#750ptD.0
  # VUSE <.MEM_6>
  return D.62292;
;;    succ:       EXIT [100.0%] 

;;   basic block 59, loop depth 0, count 0, freq 1126, maybe hot
;;    prev block 70, next block 60, flags: (NEW, REACHABLE)
;;    pred:       4 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                3 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62823 => this_3(D)
  # DEBUG __kD.62824 => D#875ptD.0
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _8 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_3(D) + 16B];
  # DEBUG D#91ptD.0 => this_3(D)
  # DEBUG thisD.55080 => D#91ptD.0
  # DEBUG __xD.62826 => NULL
  # DEBUG thisD.62845 => this_3(D)
  # DEBUG __yD.62827 => NULL
  # DEBUG __compD.62828 => 1
  # DEBUG __compD.62828 => 1
  # DEBUG __yD.62827 => __j$_M_node_12
  # DEBUG __xD.62826 => _8
  if (_8 == 0B)
    goto <bb 11>;
  else
    goto <bb 60>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                60 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 60, loop depth 0, count 0, freq 1025, maybe hot
;;    prev block 59, next block 1, flags: (NEW)
;;    pred:       59 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  pretmp_121 = MEM[(const intD.9 &)__v_1(D)];
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

}



;; Function void Allocator::PrintGrants(std::ostream*) const (_ZNK9Allocator11PrintGrantsEPSo, funcdef_no=1746, decl_uid=35437, cgraph_uid=416, symbol_order=417)


Pass statistics:
----------------

void Allocator::PrintGrants(std::ostream*) const (const struct AllocatorD.34627 * const thisD.40269, struct ostreamD.7362 * osD.40267)
{
  char_typeD.17868 D.62998;
  charD.10 __cD.62997;
  char_typeD.17868 D.62995;
  charD.10 __cD.62994;
  char_typeD.20947 D.62992;
  struct basic_ostreamD.7361 & D.62986;
  struct basic_ostreamD.7361 & D.62983;
  struct basic_ostreamD.7361 & D.62979;
  struct basic_ostreamD.7361 & D.62975;
  struct basic_ostreamD.7361 & D.62971;
  intD.9 outputD.40272;
  intD.9 inputD.40271;
  long unsigned intD.14 _13;
  intD.9 _14;
  const intD.9 & _15;
  struct basic_ostreamD.7361 & _17;
  struct basic_ostreamD.7361 & _19;
  intD.9 pretmp_20;
  intD.9 prephitmp_22;
  long unsigned intD.14 _24;
  long unsigned intD.14 _25;
  intD.9 _26;
  struct basic_ostreamD.7361 & _28;
  struct basic_ostreamD.7361 & _30;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _31;
  intD.9 * const _33;
  intD.9 * const _34;
  long unsigned intD.14 _35;
  const intD.9 & _36;
  const struct __ctype_typeD.20952 * _40;
  intD.9 pretmp_44;
  long intD.12 _46;
  sizetype _47;
  struct basic_iosD.7355 * _48;
  struct basic_ostreamD.7361 & _51;
  charD.10 _53;
  char_typeD.17868 _56;
  const intD.9 prephitmp_57;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _61;
  intD.9 (*__vtbl_ptr_typeD.2760) () _62;
  intD.9 _65;
  voidD.45 * PROF_66;
  char_typeD.17868 _68;
  const intD.9 prephitmp_82;
  intD.9 _83;
  const intD.9 pretmp_89;
  const intD.9 prephitmp_90;
  const intD.9 pretmp_91;
  const intD.9 prephitmp_92;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  if (os_8(D) == 0B)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [85.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal { D.23717 } (nonlocal, escaped)
  # os_1 = PHI <os_8(D)(3), &_ZSt4coutD.23717(2)>
  # DEBUG osD.40267 => os_1
  # DEBUG __outD.62968 => os_1
  # DEBUG __sD.62969 => "Input grants = [ "
  # DEBUG __sD.62970 => "Input grants = [ "
  # .MEM_72 = VDEF <.MEM_9(D)>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (os_1, "Input grants = [ ", 17);
  # DEBUG inputD.40271 => 0
  # VUSE <.MEM_72>
  _83 = this_11(D)->_inputsD.34629;
  if (_83 <= 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_84 = PHI <.MEM_72(4), .MEM_5(9)>
  # DEBUG __outD.62976 => os_1
  # DEBUG __sD.62977 => "], output grants = [ "
  # DEBUG __sD.62978 => "], output grants = [ "
  # .MEM_76 = VDEF <.MEM_84>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (os_1, "], output grants = [ ", 21);
  # DEBUG outputD.40272 => 0
  # VUSE <.MEM_76>
  _65 = this_11(D)->_outputsD.34630;
  if (_65 <= 0)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       4 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # input_64 = PHI <0(6), input_21(10)>
  # .MEM_75 = PHI <.MEM_72(6), .MEM_5(10)>
  # prephitmp_82 = PHI <_83(6), prephitmp_92(10)>
  # DEBUG inputD.40271 => input_64
  # RANGE [0, 18446744073709551615]
  _13 = (long unsigned intD.14) input_64;
  # DEBUG D#32ptD.0 => &this_11(D)->_inmatchD.35376
  # VUSE <.MEM_75>
  # PT = nonlocal escaped 
  _33 = MEM[(intD.9 * *)this_11(D) + 112B];
  # DEBUG D#29ptD.0 => D#32ptD.0
  # DEBUG __nD.52326 => _13
  # DEBUG thisD.52327 => D#29ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _25 = _13 * 4;
  # PT = nonlocal escaped 
  _15 = _33 + _25;
  # VUSE <.MEM_75>
  _14 = *_15;
  if (_14 >= 0)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [52.5%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [47.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 4776, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [52.5%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#33ptD.0 => &this_11(D)->_inmatchD.35376
  # DEBUG D#29ptD.0 => D#33ptD.0
  # DEBUG __nD.52334 => _13
  # DEBUG thisD.52335 => D#29ptD.0
  # .MEM_16 = VDEF <.MEM_75>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _17 = _ZNSolsEiD.21643 (os_1, input_64);
  # DEBUG __outD.52329 => _17
  # DEBUG __sD.52330 => " -> "
  # DEBUG __sD.52331 => " -> "
  # .MEM_37 = VDEF <.MEM_16>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_17, " -> ", 4);
  # .MEM_18 = VDEF <.MEM_37>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _19 = _ZNSolsEiD.21643 (_17, _14);
  # DEBUG __outD.62972 => _19
  # DEBUG __sD.62973 => "  "
  # DEBUG __sD.62974 => "  "
  # .MEM_74 = VDEF <.MEM_18>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_19, "  ", 2);
  # VUSE <.MEM_74>
  pretmp_91 = this_11(D)->_inputsD.34629;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       7 [47.5%]  (FALSE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_5 = PHI <.MEM_75(7), .MEM_74(8)>
  # prephitmp_92 = PHI <prephitmp_82(7), pretmp_91(8)>
  input_21 = input_64 + 1;
  # DEBUG inputD.40271 => input_21
  # DEBUG inputD.40271 => input_21
  if (input_21 >= prephitmp_92)
    goto <bb 5>;
  else
    goto <bb 10>;
;;    succ:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_73 = PHI <.MEM_76(5), .MEM_7(15)>
  # DEBUG __outD.52352 => os_1
  # DEBUG __sD.52353 => "]."
  # DEBUG __sD.52354 => "]."
  # .MEM_39 = VDEF <.MEM_73>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (os_1, "].", 2);
  # DEBUG thisD.52349 => os_1
  # DEBUG __pfD.52350 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.21775
  # DEBUG __osD.62984 => os_1
  # VUSE <.MEM_39>
  # PT = nonlocal escaped 
  _31 = MEM[(struct basic_ostreamD.7361 *)os_1]._vptr.basic_ostreamD.21735;
  # VUSE <.MEM_39>
  _46 = MEM[(long intD.12 *)_31 + -24B];
  # RANGE [0, 18446744073709551615]
  _47 = (sizetype) _46;
  # PT = nonlocal { D.23717 } (nonlocal, escaped)
  _48 = os_1 + _47;
  # DEBUG thisD.62987 => _48
  # DEBUG __cD.62988 => 10
  # VUSE <.MEM_39>
  # PT = nonlocal escaped 
  _40 = MEM[(const struct basic_iosD.7355 *)_48]._M_ctypeD.20959;
  # DEBUG __fD.62989 => _40
  if (_40 == 0B)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       12 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                16 [100.0%]  (FALLTHRU,EXECUTABLE)
  # output_79 = PHI <0(12), output_32(16)>
  # .MEM_49 = PHI <.MEM_76(12), .MEM_7(16)>
  # prephitmp_57 = PHI <_65(12), prephitmp_90(16)>
  # DEBUG outputD.40272 => output_79
  # RANGE [0, 18446744073709551615]
  _24 = (long unsigned intD.14) output_79;
  # DEBUG D#34ptD.0 => &this_11(D)->_outmatchD.35377
  # VUSE <.MEM_49>
  # PT = nonlocal escaped 
  _34 = MEM[(intD.9 * *)this_11(D) + 136B];
  # DEBUG D#29ptD.0 => D#34ptD.0
  # DEBUG __nD.52338 => _24
  # DEBUG thisD.52339 => D#29ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _35 = _24 * 4;
  # PT = nonlocal escaped 
  _36 = _34 + _35;
  # VUSE <.MEM_49>
  _26 = *_36;
  if (_26 >= 0)
    goto <bb 14>;
  else
    goto <bb 15>;
;;    succ:       14 [52.5%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [47.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 4776, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [52.5%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#35ptD.0 => &this_11(D)->_outmatchD.35377
  # DEBUG D#29ptD.0 => D#35ptD.0
  # DEBUG __nD.52346 => _24
  # DEBUG thisD.52347 => D#29ptD.0
  # .MEM_27 = VDEF <.MEM_49>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _28 = _ZNSolsEiD.21643 (os_1, output_79);
  # DEBUG __outD.52341 => _28
  # DEBUG __sD.52342 => " -> "
  # DEBUG __sD.52343 => " -> "
  # .MEM_38 = VDEF <.MEM_27>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_28, " -> ", 4);
  # .MEM_29 = VDEF <.MEM_38>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _30 = _ZNSolsEiD.21643 (_28, _26);
  # DEBUG __outD.62980 => _30
  # DEBUG __sD.62981 => "  "
  # DEBUG __sD.62982 => "  "
  # .MEM_78 = VDEF <.MEM_29>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_30, "  ", 2);
  # VUSE <.MEM_78>
  pretmp_89 = this_11(D)->_outputsD.34630;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       13 [47.5%]  (FALSE_VALUE,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_7 = PHI <.MEM_49(13), .MEM_78(14)>
  # prephitmp_90 = PHI <prephitmp_57(13), pretmp_89(14)>
  output_32 = output_79 + 1;
  # DEBUG outputD.40272 => output_32
  # DEBUG outputD.40272 => output_32
  if (output_32 >= prephitmp_90)
    goto <bb 11>;
  else
    goto <bb 16>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       11 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_88 = VDEF <.MEM_39>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__throw_bad_castvD.2851 ();
;;    succ:      

;;   basic block 18, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       11 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62991 => _40
  # DEBUG __cD.62990 => 10
  # VUSE <.MEM_39>
  _53 = MEM[(const struct ctypeD.7662 *)_40]._M_widen_okD.17874;
  if (_53 != 0)
    goto <bb 19>;
  else
    goto <bb 20>;
;;    succ:       19 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 549, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_39>
  _56 = MEM[(const struct ctypeD.7662 *)_40]._M_widenD.17875[10];
  pretmp_20 = (intD.9) _56;
  goto <bb 22>;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       18 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62993 => _40
  # DEBUG __cD.62994 => 10
  # .MEM_80 = VDEF <.MEM_39>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.17982 (_40);
  # VUSE <.MEM_80>
  # PT = nonlocal escaped 
  _61 = MEM[(const struct ctypeD.7662 *)_40].D.18015._vptr.facetD.14633;
  # VUSE <.MEM_80>
  # PT = nonlocal escaped 
  _62 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_61 + 48B];
  # PT = anything 
  PROF_66 = [obj_type_ref] OBJ_TYPE_REF(_62;(const struct ctypeD.7662)_40->6);
  if (PROF_66 == _ZNKSt5ctypeIcE8do_widenEcD.17963)
    goto <bb 22>;
  else
    goto <bb 21>;
;;    succ:       22 [80.2%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [19.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 70, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [19.9%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_81 = VDEF <.MEM_80>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _68 = OBJ_TYPE_REF(_62;(const struct ctypeD.7662)_40->6) (_40, 10);
  pretmp_44 = (intD.9) _68;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 21, next block 1, flags: (NEW, REACHABLE)
;;    pred:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                20 [80.2%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_71 = PHI <.MEM_39(19), .MEM_80(20), .MEM_81(21)>
  # RANGE [-128, 127]
  # prephitmp_22 = PHI <pretmp_20(19), 10(20), pretmp_44(21)>
  # .MEM_85 = VDEF <.MEM_71>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _51 = _ZNSo3putEcD.21670 (os_1, prephitmp_22);
  # DEBUG __osD.62985 => _51
  # .MEM_86 = VDEF <.MEM_85>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZNSo5flushEvD.21681 (_51);
  # VUSE <.MEM_86>
  return;
;;    succ:       EXIT [100.0%] 

}



Updating SSA:
Registering new PHI nodes in block #4
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Registering new PHI nodes in block #8
Registering new PHI nodes in block #9
Registering new PHI nodes in block #10
Registering new PHI nodes in block #24
Registering new PHI nodes in block #5
Registering new PHI nodes in block #12
Registering new PHI nodes in block #13
Registering new PHI nodes in block #14
Registering new PHI nodes in block #15
Registering new PHI nodes in block #16
Registering new PHI nodes in block #23
Registering new PHI nodes in block #11
Registering new PHI nodes in block #18
Registering new PHI nodes in block #19
Registering new PHI nodes in block #20
Registering new PHI nodes in block #21
Registering new PHI nodes in block #22
Registering new PHI nodes in block #17

DFA Statistics for void Allocator::PrintGrants(std::ostream*) const

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             95        760b
DEF operands                             34        272b
VUSE operands                            32        256b
VDEF operands                            16        128b
PHI nodes                                17       1768b
PHI arguments                            34       1632b
---------------------------------------------------------
Total memory used by DFA/SSA data                 4816b
---------------------------------------------------------

Average number of arguments per PHI node: 2.0 (max: 3)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_59 -> { .MEM_7 }
.MEM_77 -> { .MEM_5 }
Incremental SSA update started at block: 4
Number of blocks in CFG: 25
Number of blocks to update: 8 ( 32%)
Affected blocks: 7 9 10 13 15 16 23 24


Creating dr for MEM[(int * *)this_11(D) + 112B]
analyze_innermost: success.
	base_address: this_11(D)
	offset from base address: 0
	constant offset from base address: 112
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_11(D) + 112B]
Creating dr for MEM[(int * *)this_11(D) + 112B]
analyze_innermost: success.
	base_address: this_11(D)
	offset from base address: 0
	constant offset from base address: 112
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_11(D) + 112B]
Creating dr for *_15
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_15
Creating dr for *_15
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_15
Creating dr for MEM[(int * *)this_11(D) + 112B]
analyze_innermost: success.
	base_address: this_11(D)
	offset from base address: 0
	constant offset from base address: 112
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_11(D) + 112B]
Creating dr for MEM[(int * *)this_11(D) + 112B]
analyze_innermost: success.
	base_address: this_11(D)
	offset from base address: 0
	constant offset from base address: 112
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_11(D) + 112B]
Creating dr for *_15
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_15
Creating dr for *_15
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_15
Creating dr for MEM[(int * *)this_11(D) + 112B]
analyze_innermost: success.
	base_address: this_11(D)
	offset from base address: 0
	constant offset from base address: 112
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_11(D) + 112B]
Creating dr for MEM[(int * *)this_11(D) + 112B]
analyze_innermost: success.
	base_address: this_11(D)
	offset from base address: 0
	constant offset from base address: 112
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_11(D) + 112B]
Creating dr for *_15
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_15
Creating dr for *_15
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_15
Creating dr for MEM[(int * *)this_11(D) + 112B]
analyze_innermost: success.
	base_address: this_11(D)
	offset from base address: 0
	constant offset from base address: 112
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_11(D) + 112B]
Creating dr for MEM[(int * *)this_11(D) + 112B]
analyze_innermost: success.
	base_address: this_11(D)
	offset from base address: 0
	constant offset from base address: 112
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_11(D) + 112B]
Creating dr for *_15
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_15
Creating dr for *_15
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_15
Creating dr for MEM[(int * *)this_11(D) + 136B]
analyze_innermost: success.
	base_address: this_11(D)
	offset from base address: 0
	constant offset from base address: 136
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_11(D) + 136B]
Creating dr for MEM[(int * *)this_11(D) + 136B]
analyze_innermost: success.
	base_address: this_11(D)
	offset from base address: 0
	constant offset from base address: 136
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_11(D) + 136B]
Creating dr for *_36
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_36
Creating dr for *_36
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_36
Creating dr for MEM[(int * *)this_11(D) + 136B]
analyze_innermost: success.
	base_address: this_11(D)
	offset from base address: 0
	constant offset from base address: 136
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_11(D) + 136B]
Creating dr for MEM[(int * *)this_11(D) + 136B]
analyze_innermost: success.
	base_address: this_11(D)
	offset from base address: 0
	constant offset from base address: 136
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_11(D) + 136B]
Creating dr for *_36
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_36
Creating dr for *_36
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_36
Creating dr for MEM[(int * *)this_11(D) + 136B]
analyze_innermost: success.
	base_address: this_11(D)
	offset from base address: 0
	constant offset from base address: 136
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_11(D) + 136B]
Creating dr for MEM[(int * *)this_11(D) + 136B]
analyze_innermost: success.
	base_address: this_11(D)
	offset from base address: 0
	constant offset from base address: 136
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_11(D) + 136B]
Creating dr for *_36
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_36
Creating dr for *_36
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_36
Creating dr for MEM[(int * *)this_11(D) + 136B]
analyze_innermost: success.
	base_address: this_11(D)
	offset from base address: 0
	constant offset from base address: 136
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_11(D) + 136B]
Creating dr for MEM[(int * *)this_11(D) + 136B]
analyze_innermost: success.
	base_address: this_11(D)
	offset from base address: 0
	constant offset from base address: 136
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_11(D) + 136B]
Creating dr for *_36
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_36
Creating dr for *_36
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_36
Creating dr for MEM[(const struct ctype *)_40]._M_widen_ok
analyze_innermost: success.
	base_address: _40
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(const struct ctype *)_40]
	Access function 0: 448
Creating dr for MEM[(const struct ctype *)_40]._M_widen[10]
analyze_innermost: success.
	base_address: _40
	offset from base address: 0
	constant offset from base address: 67
	step: 0
	aligned to: 256
	base_object: MEM[(const struct ctype *)_40]
	Access function 0: 10
	Access function 1: 456

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:25, LOOPS:2, CONDITIONS:10, STMTS:112)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_4 bb_3 })
  {
    <bb 2>:
    if (os_8(D) == 0B)
      goto <bb 4>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 })
  {
    <bb 3>:

  }
  bb_4 (preds = {bb_3 bb_2 }, succs = {bb_5 bb_6 })
  {
    <bb 4>:
    # os_1 = PHI <os_8(D)(3), &cout(2)>
    # DEBUG os => os_1
    # DEBUG __out => os_1
    # DEBUG __s => "Input grants = [ "
    # DEBUG __s => "Input grants = [ "
    # .MEM_72 = VDEF <.MEM_9(D)>
    std::__ostream_insert<char, std::char_traits<char> > (os_1, "Input grants = [ ", 17);
    # DEBUG input => 0
    # VUSE <.MEM_72>
    _83 = this_11(D)->_inputs;
    if (_83 <= 0)
      goto <bb 5>;
    else
      goto <bb 6>;

  }
  bb_5 (preds = {bb_4 bb_24 }, succs = {bb_11 bb_12 })
  {
    <bb 5>:
    # .MEM_84 = PHI <.MEM_72(4), .MEM_77(24)>
    # DEBUG __out => os_1
    # DEBUG __s => "], output grants = [ "
    # DEBUG __s => "], output grants = [ "
    # .MEM_76 = VDEF <.MEM_84>
    std::__ostream_insert<char, std::char_traits<char> > (os_1, "], output grants = [ ", 21);
    # DEBUG output => 0
    # VUSE <.MEM_76>
    _65 = this_11(D)->_outputs;
    if (_65 <= 0)
      goto <bb 11>;
    else
      goto <bb 12>;

  }
  bb_6 (preds = {bb_4 }, succs = {bb_7 })
  {
    <bb 6>:

  }
  bb_24 (preds = {bb_9 }, succs = {bb_5 })
  {
    <bb 24>:
    # .MEM_77 = PHI <.MEM_5(9)>
    goto <bb 5>;

  }
  bb_23 (preds = {bb_15 }, succs = {bb_11 })
  {
    <bb 23>:
    # .MEM_59 = PHI <.MEM_7(15)>

  }
  bb_11 (preds = {bb_5 bb_23 }, succs = {bb_17 bb_18 })
  {
    <bb 11>:
    # .MEM_73 = PHI <.MEM_76(5), .MEM_59(23)>
    # DEBUG __out => os_1
    # DEBUG __s => "]."
    # DEBUG __s => "]."
    # .MEM_39 = VDEF <.MEM_73>
    std::__ostream_insert<char, std::char_traits<char> > (os_1, "].", 2);
    # DEBUG this => os_1
    # DEBUG __pf => endl
    # DEBUG __os => os_1
    # VUSE <.MEM_39>
    _31 = MEM[(struct basic_ostream *)os_1]._vptr.basic_ostream;
    # VUSE <.MEM_39>
    _46 = MEM[(long int *)_31 + -24B];
    _47 = (sizetype) _46;
    _48 = os_1 + _47;
    # DEBUG this => _48
    # DEBUG __c => 10
    # VUSE <.MEM_39>
    _40 = MEM[(const struct basic_ios *)_48]._M_ctype;
    # DEBUG __f => _40
    if (_40 == 0B)
      goto <bb 17>;
    else
      goto <bb 18>;

  }
  bb_12 (preds = {bb_5 }, succs = {bb_13 })
  {
    <bb 12>:

  }
  bb_17 (preds = {bb_11 }, succs = {})
  {
    <bb 17>:
    # .MEM_88 = VDEF <.MEM_39>
    std::__throw_bad_cast ();

  }
  bb_18 (preds = {bb_11 }, succs = {bb_19 bb_20 })
  {
    <bb 18>:
    # DEBUG this => _40
    # DEBUG __c => 10
    # VUSE <.MEM_39>
    _53 = MEM[(const struct ctype *)_40]._M_widen_ok;
    if (_53 != 0)
      goto <bb 19>;
    else
      goto <bb 20>;

  }
  bb_19 (preds = {bb_18 }, succs = {bb_22 })
  {
    <bb 19>:
    # VUSE <.MEM_39>
    _56 = MEM[(const struct ctype *)_40]._M_widen[10];
    pretmp_20 = (int) _56;
    goto <bb 22>;

  }
  bb_20 (preds = {bb_18 }, succs = {bb_22 bb_21 })
  {
    <bb 20>:
    # DEBUG this => _40
    # DEBUG __c => 10
    # .MEM_80 = VDEF <.MEM_39>
    std::ctype<char>::_M_widen_init (_40);
    # VUSE <.MEM_80>
    _61 = MEM[(const struct ctype *)_40].D.18015._vptr.facet;
    # VUSE <.MEM_80>
    _62 = MEM[(int (*__vtbl_ptr_type) () *)_61 + 48B];
    PROF_66 = [obj_type_ref] OBJ_TYPE_REF(_62;(const struct ctype)_40->6);
    if (PROF_66 == do_widen)
      goto <bb 22>;
    else
      goto <bb 21>;

  }
  bb_21 (preds = {bb_20 }, succs = {bb_22 })
  {
    <bb 21>:
    # .MEM_81 = VDEF <.MEM_80>
    _68 = OBJ_TYPE_REF(_62;(const struct ctype)_40->6) (_40, 10);
    pretmp_44 = (int) _68;

  }
  bb_22 (preds = {bb_19 bb_20 bb_21 }, succs = {bb_1 })
  {
    <bb 22>:
    # .MEM_71 = PHI <.MEM_39(19), .MEM_80(20), .MEM_81(21)>
    # prephitmp_22 = PHI <pretmp_20(19), 10(20), pretmp_44(21)>
    # .MEM_85 = VDEF <.MEM_71>
    _51 = std::basic_ostream<char>::put (os_1, prephitmp_22);
    # DEBUG __os => _51
    # .MEM_86 = VDEF <.MEM_85>
    std::basic_ostream<char>::flush (_51);
    # VUSE <.MEM_86>
    return;

  }
  loop_2 (header = 13, latch = 16, niter = , upper_bound = 2147483647)
  {
    bb_13 (preds = {bb_12 bb_16 }, succs = {bb_14 bb_15 })
    {
      <bb 13>:
      # output_79 = PHI <0(12), output_32(16)>
      # .MEM_49 = PHI <.MEM_76(12), .MEM_7(16)>
      # prephitmp_57 = PHI <_65(12), prephitmp_90(16)>
      # DEBUG output => output_79
      _24 = (long unsigned int) output_79;
      # DEBUG D#34 => &this_11(D)->_outmatch
      # VUSE <.MEM_49>
      _34 = MEM[(int * *)this_11(D) + 136B];
      # DEBUG D#29 => D#34
      # DEBUG __n => _24
      # DEBUG this => D#29
      _35 = _24 * 4;
      _36 = _34 + _35;
      # VUSE <.MEM_49>
      _26 = *_36;
      if (_26 >= 0)
        goto <bb 14>;
      else
        goto <bb 15>;

    }
    bb_14 (preds = {bb_13 }, succs = {bb_15 })
    {
      <bb 14>:
      # DEBUG D#35 => &this_11(D)->_outmatch
      # DEBUG D#29 => D#35
      # DEBUG __n => _24
      # DEBUG this => D#29
      # .MEM_27 = VDEF <.MEM_49>
      _28 = std::basic_ostream<char>::operator<< (os_1, output_79);
      # DEBUG __out => _28
      # DEBUG __s => " -> "
      # DEBUG __s => " -> "
      # .MEM_38 = VDEF <.MEM_27>
      std::__ostream_insert<char, std::char_traits<char> > (_28, " -> ", 4);
      # .MEM_29 = VDEF <.MEM_38>
      _30 = std::basic_ostream<char>::operator<< (_28, _26);
      # DEBUG __out => _30
      # DEBUG __s => "  "
      # DEBUG __s => "  "
      # .MEM_78 = VDEF <.MEM_29>
      std::__ostream_insert<char, std::char_traits<char> > (_30, "  ", 2);
      # VUSE <.MEM_78>
      pretmp_89 = this_11(D)->_outputs;

    }
    bb_15 (preds = {bb_13 bb_14 }, succs = {bb_23 bb_16 })
    {
      <bb 15>:
      # .MEM_7 = PHI <.MEM_49(13), .MEM_78(14)>
      # prephitmp_90 = PHI <prephitmp_57(13), pretmp_89(14)>
      output_32 = output_79 + 1;
      # DEBUG output => output_32
      # DEBUG output => output_32
      if (output_32 >= prephitmp_90)
        goto <bb 23>;
      else
        goto <bb 16>;

    }
    bb_16 (preds = {bb_15 }, succs = {bb_13 })
    {
      <bb 16>:
      goto <bb 13>;

    }
  }
  loop_1 (header = 7, latch = 10, niter = , upper_bound = 2147483647)
  {
    bb_7 (preds = {bb_6 bb_10 }, succs = {bb_8 bb_9 })
    {
      <bb 7>:
      # input_64 = PHI <0(6), input_21(10)>
      # .MEM_75 = PHI <.MEM_72(6), .MEM_5(10)>
      # prephitmp_82 = PHI <_83(6), prephitmp_92(10)>
      # DEBUG input => input_64
      _13 = (long unsigned int) input_64;
      # DEBUG D#32 => &this_11(D)->_inmatch
      # VUSE <.MEM_75>
      _33 = MEM[(int * *)this_11(D) + 112B];
      # DEBUG D#29 => D#32
      # DEBUG __n => _13
      # DEBUG this => D#29
      _25 = _13 * 4;
      _15 = _33 + _25;
      # VUSE <.MEM_75>
      _14 = *_15;
      if (_14 >= 0)
        goto <bb 8>;
      else
        goto <bb 9>;

    }
    bb_8 (preds = {bb_7 }, succs = {bb_9 })
    {
      <bb 8>:
      # DEBUG D#33 => &this_11(D)->_inmatch
      # DEBUG D#29 => D#33
      # DEBUG __n => _13
      # DEBUG this => D#29
      # .MEM_16 = VDEF <.MEM_75>
      _17 = std::basic_ostream<char>::operator<< (os_1, input_64);
      # DEBUG __out => _17
      # DEBUG __s => " -> "
      # DEBUG __s => " -> "
      # .MEM_37 = VDEF <.MEM_16>
      std::__ostream_insert<char, std::char_traits<char> > (_17, " -> ", 4);
      # .MEM_18 = VDEF <.MEM_37>
      _19 = std::basic_ostream<char>::operator<< (_17, _14);
      # DEBUG __out => _19
      # DEBUG __s => "  "
      # DEBUG __s => "  "
      # .MEM_74 = VDEF <.MEM_18>
      std::__ostream_insert<char, std::char_traits<char> > (_19, "  ", 2);
      # VUSE <.MEM_74>
      pretmp_91 = this_11(D)->_inputs;

    }
    bb_9 (preds = {bb_7 bb_8 }, succs = {bb_24 bb_10 })
    {
      <bb 9>:
      # .MEM_5 = PHI <.MEM_75(7), .MEM_74(8)>
      # prephitmp_92 = PHI <prephitmp_82(7), pretmp_91(8)>
      input_21 = input_64 + 1;
      # DEBUG input => input_21
      # DEBUG input => input_21
      if (input_21 >= prephitmp_92)
        goto <bb 24>;
      else
        goto <bb 10>;

    }
    bb_10 (preds = {bb_9 }, succs = {bb_7 })
    {
      <bb 10>:
      goto <bb 7>;

    }
  }
}

Pass statistics:
----------------

void Allocator::PrintGrants(std::ostream*) const (const struct AllocatorD.34627 * const thisD.40269, struct ostreamD.7362 * osD.40267)
{
  char_typeD.17868 D.62998;
  charD.10 __cD.62997;
  char_typeD.17868 D.62995;
  charD.10 __cD.62994;
  char_typeD.20947 D.62992;
  struct basic_ostreamD.7361 & D.62986;
  struct basic_ostreamD.7361 & D.62983;
  struct basic_ostreamD.7361 & D.62979;
  struct basic_ostreamD.7361 & D.62975;
  struct basic_ostreamD.7361 & D.62971;
  intD.9 outputD.40272;
  intD.9 inputD.40271;
  long unsigned intD.14 _13;
  intD.9 _14;
  const intD.9 & _15;
  struct basic_ostreamD.7361 & _17;
  struct basic_ostreamD.7361 & _19;
  intD.9 pretmp_20;
  intD.9 prephitmp_22;
  long unsigned intD.14 _24;
  long unsigned intD.14 _25;
  intD.9 _26;
  struct basic_ostreamD.7361 & _28;
  struct basic_ostreamD.7361 & _30;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _31;
  intD.9 * const _33;
  intD.9 * const _34;
  long unsigned intD.14 _35;
  const intD.9 & _36;
  const struct __ctype_typeD.20952 * _40;
  intD.9 pretmp_44;
  long intD.12 _46;
  sizetype _47;
  struct basic_iosD.7355 * _48;
  struct basic_ostreamD.7361 & _51;
  charD.10 _53;
  char_typeD.17868 _56;
  const intD.9 prephitmp_57;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _61;
  intD.9 (*__vtbl_ptr_typeD.2760) () _62;
  intD.9 _65;
  voidD.45 * PROF_66;
  char_typeD.17868 _68;
  const intD.9 prephitmp_82;
  intD.9 _83;
  const intD.9 pretmp_89;
  const intD.9 prephitmp_90;
  const intD.9 pretmp_91;
  const intD.9 prephitmp_92;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  if (os_8(D) == 0B)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [85.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal { D.23717 } (nonlocal, escaped)
  # os_1 = PHI <os_8(D)(3), &_ZSt4coutD.23717(2)>
  # DEBUG osD.40267 => os_1
  # DEBUG __outD.62968 => os_1
  # DEBUG __sD.62969 => "Input grants = [ "
  # DEBUG __sD.62970 => "Input grants = [ "
  # .MEM_72 = VDEF <.MEM_9(D)>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (os_1, "Input grants = [ ", 17);
  # DEBUG inputD.40271 => 0
  # VUSE <.MEM_72>
  _83 = this_11(D)->_inputsD.34629;
  if (_83 <= 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [100.0%]  (FALLTHRU)
  # .MEM_84 = PHI <.MEM_72(4), .MEM_77(24)>
  # DEBUG __outD.62976 => os_1
  # DEBUG __sD.62977 => "], output grants = [ "
  # DEBUG __sD.62978 => "], output grants = [ "
  # .MEM_76 = VDEF <.MEM_84>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (os_1, "], output grants = [ ", 21);
  # DEBUG outputD.40272 => 0
  # VUSE <.MEM_76>
  _65 = this_11(D)->_outputsD.34630;
  if (_65 <= 0)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       4 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # input_64 = PHI <0(6), input_21(10)>
  # .MEM_75 = PHI <.MEM_72(6), .MEM_5(10)>
  # prephitmp_82 = PHI <_83(6), prephitmp_92(10)>
  # DEBUG inputD.40271 => input_64
  # RANGE [0, 18446744073709551615]
  _13 = (long unsigned intD.14) input_64;
  # DEBUG D#32ptD.0 => &this_11(D)->_inmatchD.35376
  # VUSE <.MEM_75>
  # PT = nonlocal escaped 
  _33 = MEM[(intD.9 * *)this_11(D) + 112B];
  # DEBUG D#29ptD.0 => D#32ptD.0
  # DEBUG __nD.52326 => _13
  # DEBUG thisD.52327 => D#29ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _25 = _13 * 4;
  # PT = nonlocal escaped 
  _15 = _33 + _25;
  # VUSE <.MEM_75>
  _14 = *_15;
  if (_14 >= 0)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [52.5%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [47.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 4776, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [52.5%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#33ptD.0 => &this_11(D)->_inmatchD.35376
  # DEBUG D#29ptD.0 => D#33ptD.0
  # DEBUG __nD.52334 => _13
  # DEBUG thisD.52335 => D#29ptD.0
  # .MEM_16 = VDEF <.MEM_75>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _17 = _ZNSolsEiD.21643 (os_1, input_64);
  # DEBUG __outD.52329 => _17
  # DEBUG __sD.52330 => " -> "
  # DEBUG __sD.52331 => " -> "
  # .MEM_37 = VDEF <.MEM_16>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_17, " -> ", 4);
  # .MEM_18 = VDEF <.MEM_37>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _19 = _ZNSolsEiD.21643 (_17, _14);
  # DEBUG __outD.62972 => _19
  # DEBUG __sD.62973 => "  "
  # DEBUG __sD.62974 => "  "
  # .MEM_74 = VDEF <.MEM_18>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_19, "  ", 2);
  # VUSE <.MEM_74>
  pretmp_91 = this_11(D)->_inputsD.34629;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 8, next block 24, flags: (NEW, REACHABLE)
;;    pred:       7 [47.5%]  (FALSE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_5 = PHI <.MEM_75(7), .MEM_74(8)>
  # prephitmp_92 = PHI <prephitmp_82(7), pretmp_91(8)>
  input_21 = input_64 + 1;
  # DEBUG inputD.40271 => input_21
  # DEBUG inputD.40271 => input_21
  if (input_21 >= prephitmp_92)
    goto <bb 24>;
  else
    goto <bb 10>;
;;    succ:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 9, next block 10, flags: (NEW)
;;    pred:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_77 = PHI <.MEM_5(9)>
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU)

;;   basic block 10, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 24, next block 23, flags: (NEW)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 10, next block 11, flags: (NEW)
;;    pred:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_59 = PHI <.MEM_7(15)>
;;    succ:       11 [100.0%]  (FALLTHRU)

;;   basic block 11, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 23, next block 12, flags: (NEW, REACHABLE)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [100.0%]  (FALLTHRU)
  # .MEM_73 = PHI <.MEM_76(5), .MEM_59(23)>
  # DEBUG __outD.52352 => os_1
  # DEBUG __sD.52353 => "]."
  # DEBUG __sD.52354 => "]."
  # .MEM_39 = VDEF <.MEM_73>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (os_1, "].", 2);
  # DEBUG thisD.52349 => os_1
  # DEBUG __pfD.52350 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.21775
  # DEBUG __osD.62984 => os_1
  # VUSE <.MEM_39>
  # PT = nonlocal escaped 
  _31 = MEM[(struct basic_ostreamD.7361 *)os_1]._vptr.basic_ostreamD.21735;
  # VUSE <.MEM_39>
  _46 = MEM[(long intD.12 *)_31 + -24B];
  # RANGE [0, 18446744073709551615]
  _47 = (sizetype) _46;
  # PT = nonlocal { D.23717 } (nonlocal, escaped)
  _48 = os_1 + _47;
  # DEBUG thisD.62987 => _48
  # DEBUG __cD.62988 => 10
  # VUSE <.MEM_39>
  # PT = nonlocal escaped 
  _40 = MEM[(const struct basic_iosD.7355 *)_48]._M_ctypeD.20959;
  # DEBUG __fD.62989 => _40
  if (_40 == 0B)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       12 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                16 [100.0%]  (FALLTHRU,EXECUTABLE)
  # output_79 = PHI <0(12), output_32(16)>
  # .MEM_49 = PHI <.MEM_76(12), .MEM_7(16)>
  # prephitmp_57 = PHI <_65(12), prephitmp_90(16)>
  # DEBUG outputD.40272 => output_79
  # RANGE [0, 18446744073709551615]
  _24 = (long unsigned intD.14) output_79;
  # DEBUG D#34ptD.0 => &this_11(D)->_outmatchD.35377
  # VUSE <.MEM_49>
  # PT = nonlocal escaped 
  _34 = MEM[(intD.9 * *)this_11(D) + 136B];
  # DEBUG D#29ptD.0 => D#34ptD.0
  # DEBUG __nD.52338 => _24
  # DEBUG thisD.52339 => D#29ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _35 = _24 * 4;
  # PT = nonlocal escaped 
  _36 = _34 + _35;
  # VUSE <.MEM_49>
  _26 = *_36;
  if (_26 >= 0)
    goto <bb 14>;
  else
    goto <bb 15>;
;;    succ:       14 [52.5%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [47.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 4776, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [52.5%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#35ptD.0 => &this_11(D)->_outmatchD.35377
  # DEBUG D#29ptD.0 => D#35ptD.0
  # DEBUG __nD.52346 => _24
  # DEBUG thisD.52347 => D#29ptD.0
  # .MEM_27 = VDEF <.MEM_49>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _28 = _ZNSolsEiD.21643 (os_1, output_79);
  # DEBUG __outD.52341 => _28
  # DEBUG __sD.52342 => " -> "
  # DEBUG __sD.52343 => " -> "
  # .MEM_38 = VDEF <.MEM_27>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_28, " -> ", 4);
  # .MEM_29 = VDEF <.MEM_38>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _30 = _ZNSolsEiD.21643 (_28, _26);
  # DEBUG __outD.62980 => _30
  # DEBUG __sD.62981 => "  "
  # DEBUG __sD.62982 => "  "
  # .MEM_78 = VDEF <.MEM_29>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_30, "  ", 2);
  # VUSE <.MEM_78>
  pretmp_89 = this_11(D)->_outputsD.34630;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       13 [47.5%]  (FALSE_VALUE,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_7 = PHI <.MEM_49(13), .MEM_78(14)>
  # prephitmp_90 = PHI <prephitmp_57(13), pretmp_89(14)>
  output_32 = output_79 + 1;
  # DEBUG outputD.40272 => output_32
  # DEBUG outputD.40272 => output_32
  if (output_32 >= prephitmp_90)
    goto <bb 23>;
  else
    goto <bb 16>;
;;    succ:       23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       11 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_88 = VDEF <.MEM_39>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZSt16__throw_bad_castvD.2851 ();
;;    succ:      

;;   basic block 18, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       11 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62991 => _40
  # DEBUG __cD.62990 => 10
  # VUSE <.MEM_39>
  _53 = MEM[(const struct ctypeD.7662 *)_40]._M_widen_okD.17874;
  if (_53 != 0)
    goto <bb 19>;
  else
    goto <bb 20>;
;;    succ:       19 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 549, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_39>
  _56 = MEM[(const struct ctypeD.7662 *)_40]._M_widenD.17875[10];
  pretmp_20 = (intD.9) _56;
  goto <bb 22>;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       18 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.62993 => _40
  # DEBUG __cD.62994 => 10
  # .MEM_80 = VDEF <.MEM_39>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.17982 (_40);
  # VUSE <.MEM_80>
  # PT = nonlocal escaped 
  _61 = MEM[(const struct ctypeD.7662 *)_40].D.18015._vptr.facetD.14633;
  # VUSE <.MEM_80>
  # PT = nonlocal escaped 
  _62 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_61 + 48B];
  # PT = anything 
  PROF_66 = [obj_type_ref] OBJ_TYPE_REF(_62;(const struct ctypeD.7662)_40->6);
  if (PROF_66 == _ZNKSt5ctypeIcE8do_widenEcD.17963)
    goto <bb 22>;
  else
    goto <bb 21>;
;;    succ:       22 [80.2%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [19.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 70, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [19.9%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_81 = VDEF <.MEM_80>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _68 = OBJ_TYPE_REF(_62;(const struct ctypeD.7662)_40->6) (_40, 10);
  pretmp_44 = (intD.9) _68;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 21, next block 1, flags: (NEW, REACHABLE)
;;    pred:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                20 [80.2%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_71 = PHI <.MEM_39(19), .MEM_80(20), .MEM_81(21)>
  # RANGE [-128, 127]
  # prephitmp_22 = PHI <pretmp_20(19), 10(20), pretmp_44(21)>
  # .MEM_85 = VDEF <.MEM_71>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _51 = _ZNSo3putEcD.21670 (os_1, prephitmp_22);
  # DEBUG __osD.62985 => _51
  # .MEM_86 = VDEF <.MEM_85>
  # USE = nonlocal null { D.23717 } (nonlocal, escaped)
  # CLB = nonlocal null { D.23717 } (nonlocal, escaped)
  _ZNSo5flushEvD.21681 (_51);
  # VUSE <.MEM_86>
  return;
;;    succ:       EXIT [100.0%] 

}



;; Function virtual void DenseAllocator::PrintRequests(std::ostream*) const (_ZNK14DenseAllocator13PrintRequestsEPSo, funcdef_no=1763, decl_uid=36272, cgraph_uid=433, symbol_order=434)


Pass statistics:
----------------


Global statistics (BBS:187, LOOPS:4, CONDITIONS:78, STMTS:1638)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Pass statistics:
----------------

virtual void DenseAllocator::PrintRequests(std::ostream*) const (const struct DenseAllocatorD.35479 * const thisD.41152, struct ostreamD.7362 * osD.41150)
Eh tree:
   23 must_not_throw
   20 cleanup land:{33,<L61>},{13,<L62>}
     21 cleanup land:{14,<L40>}
       22 cleanup land:{15,<L39>}
   16 must_not_throw
   13 cleanup land:{19,<L45>},{7,<L46>}
     14 cleanup land:{8,<L34>}
       15 cleanup land:{9,<L33>}
   11 must_not_throw
   8 cleanup land:{43,<L72>},{37,<L66>},{36,<L65>},{35,<L64>},{34,<L63>},{5,<L78>}
     24 cleanup land:{48,<L81>},{42,<L71>},{41,<L70>},{40,<L69>},{39,<L68>},{38,<L67>},{16,<L82>}
       26 cleanup land:{18,<L42>}
       25 cleanup land:{17,<L43>}
     9 cleanup land:{46,<L75>},{45,<L74>},{44,<L73>},{6,<L76>}
   5 must_not_throw
   2 cleanup land:{29,<L56>},{23,<L50>},{22,<L49>},{21,<L48>},{20,<L47>},{2,<L77>}
     17 cleanup land:{47,<L79>},{28,<L55>},{27,<L54>},{26,<L53>},{25,<L52>},{24,<L51>},{10,<L80>}
       19 cleanup land:{12,<L36>}
       18 cleanup land:{11,<L37>}
     3 cleanup land:{32,<L59>},{31,<L58>},{30,<L57>},{3,<L60>}
{
  char_typeD.17868 D.64146;
  charD.10 __cD.64145;
  char_typeD.17868 D.64143;
  charD.10 __cD.64142;
  char_typeD.20947 D.64140;
  struct basic_ostreamD.7361 & D.64134;
  struct basic_ostreamD.7361 & D.64110;
  size_typeD.11502 __dnewD.64081;
  size_typeD.11502 __dnewD.64052;
  struct __string_typeD.24146 D.64045;
  struct __string_typeD.24146 D.64044;
  struct basic_ostreamD.7361 & D.63909;
  struct basic_ostreamD.7361 & D.63878;
  struct basic_ostreamD.7361 & D.63853;
  size_typeD.11502 __dnewD.63824;
  size_typeD.11502 __dnewD.63795;
  struct __string_typeD.24146 D.63788;
  struct __string_typeD.24146 D.63787;
  struct basic_ostreamD.7361 & D.63652;
  struct basic_ostreamD.7361 & D.63621;
  intD.9 inputD.41211;
  struct ostringstreamD.7370 ssD.41210;
  boolD.2757 printD.41209;
  intD.9 outputD.41208;
  intD.9 outputD.41205;
  struct ostringstreamD.7370 ssD.41156;
  boolD.2757 printD.41155;
  intD.9 inputD.41154;
  struct __string_typeD.24316 D.41213;
  struct __string_typeD.24316 D.41207;
  long unsigned intD.14 pretmp_24;
  intD.9 _26;
  long unsigned intD.14 _29;
  const struct sRequestD.35378 & _31;
  intD.9 _32;
  intD.9 _33;
  struct basic_ostreamD.7361 & _35;
  struct basic_ostreamD.7361 & _37;
  const voidD.45 * prephitmp_38;
  struct basic_ostreamD.7361 & _41;
  const size_typeD.11502 _42;
  charD.10 * const _43;
  const voidD.45 * pretmp_44;
  charD.10 * const _46;
  charD.10 * const _48;
  size_typeD.11502 pretmp_52;
  intD.9 _53;
  const voidD.45 * pretmp_54;
  long unsigned intD.14 _57;
  long unsigned intD.14 _58;
  intD.9 _59;
  intD.9 _60;
  struct basic_ostreamD.7361 & _62;
  struct basic_ostreamD.7361 & _64;
  const voidD.45 * prephitmp_65;
  struct basic_ostreamD.7361 & _68;
  const size_typeD.11502 _69;
  charD.10 * const _70;
  const voidD.45 * pretmp_71;
  charD.10 * const _75;
  charD.10 * const _79;
  struct vectorD.35482 * const _80;
  struct vectorD.35482 * const _81;
  struct sRequestD.35378 * const _82;
  struct sRequestD.35378 * const _83;
  const struct vectorD.35482 & _85;
  long intD.12 _86;
  charD.10 * const _87;
  struct basic_ostreamD.7361 & _88;
  const struct sRequestD.35378 & _90;
  long unsigned intD.14 _91;
  const struct vectorD.35482 & _92;
  long intD.12 _93;
  charD.10 * const _94;
  struct basic_ostreamD.7361 & _95;
  const struct __ctype_typeD.20952 * _128;
  long unsigned intD.14 pretmp_130;
  const voidD.45 * prephitmp_131;
  long intD.12 _133;
  sizetype iftmp.58_134;
  struct basic_iosD.7355 * _135;
  const voidD.45 * pretmp_138;
  const voidD.45 * prephitmp_140;
  boolD.2757 _141;
  intD.9 _143;
  long unsigned intD.14 pretmp_144;
  long intD.12 _145;
  sizetype iftmp.64_146;
  struct basic_iosD.7355 * _147;
  char_typeD.16540 * const _149;
  char_typeD.16540 * const _150;
  char_typeD.16540 * const _151;
  charD.10 * const _152;
  char_typeD.16540 * const _153;
  charD.10 * const _154;
  const voidD.45 * pretmp_155;
  charD.10 * const _156;
  charD.10 * const _157;
  charD.10 * const _158;
  long intD.12 __last.73_159;
  long intD.12 __first.74_160;
  difference_typeD.45534 _161;
  long unsigned intD.14 __dnew.70_162;
  charD.10 * _163;
  long unsigned intD.14 __dnew.71_164;
  const char_typeD.6439 _166;
  charD.10 * _169;
  long intD.12 __last.73_171;
  long intD.12 __first.74_172;
  difference_typeD.45534 _173;
  long unsigned intD.14 __dnew.70_174;
  charD.10 * _175;
  long unsigned intD.14 __dnew.71_176;
  const char_typeD.6439 _178;
  charD.10 * _181;
  charD.10 * const prephitmp_182;
  size_typeD.11502 prephitmp_183;
  const voidD.45 * prephitmp_184;
  long intD.12 _186;
  sizetype iftmp.64_187;
  struct basic_iosD.7355 * _188;
  const intD.9 prephitmp_190;
  charD.10 * const pretmp_194;
  const voidD.45 * pretmp_195;
  long intD.12 _197;
  sizetype iftmp.58_198;
  struct basic_iosD.7355 * _199;
  const voidD.45 * prephitmp_201;
  size_typeD.11502 pretmp_202;
  const voidD.45 * prephitmp_207;
  intD.9 prephitmp_208;
  long intD.12 _209;
  sizetype iftmp.64_210;
  struct basic_iosD.7355 * _211;
  char_typeD.16540 * const _213;
  char_typeD.16540 * const _214;
  char_typeD.16540 * const _215;
  charD.10 * const _216;
  char_typeD.16540 * const _217;
  charD.10 * const _218;
  size_typeD.11502 prephitmp_219;
  charD.10 * const _220;
  charD.10 * const _221;
  charD.10 * const _222;
  long intD.12 __last.73_223;
  long intD.12 __first.74_224;
  difference_typeD.45534 _225;
  long unsigned intD.14 __dnew.70_226;
  charD.10 * _227;
  long unsigned intD.14 __dnew.71_228;
  const char_typeD.6439 _230;
  charD.10 * _233;
  long intD.12 __last.73_235;
  long intD.12 __first.74_236;
  difference_typeD.45534 _237;
  long unsigned intD.14 __dnew.70_238;
  charD.10 * _239;
  long unsigned intD.14 __dnew.71_240;
  const char_typeD.6439 _242;
  charD.10 * _245;
  charD.10 * const pretmp_246;
  charD.10 * const prephitmp_247;
  const voidD.45 * prephitmp_248;
  long intD.12 _250;
  sizetype iftmp.64_251;
  struct basic_iosD.7355 * _252;
  long unsigned intD.14 pretmp_254;
  boolD.2757 _256;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _257;
  long intD.12 _258;
  sizetype _259;
  struct basic_iosD.7355 * _260;
  const voidD.45 * pretmp_261;
  struct basic_ostreamD.7361 & _263;
  charD.10 _265;
  char_typeD.17868 _268;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _273;
  intD.9 (*__vtbl_ptr_typeD.2760) () _274;
  intD.9 _276;
  voidD.45 * PROF_278;
  charD.10 * const _279;
  char_typeD.17868 _280;
  boolD.2757 _282;
  intD.9 _286;
  intD.9 _308;
  intD.9 pretmp_395;
  intD.9 pretmp_424;
  boolD.2757 _454;
  boolD.2757 _508;
  charD.10 * const _538;
  const voidD.45 * pretmp_540;
  charD.10 * const _551;
  charD.10 * const _552;
  boolD.2757 _556;
  const voidD.45 * prephitmp_560;
  const voidD.45 * prephitmp_561;
  const voidD.45 * prephitmp_562;
  const intD.9 prephitmp_563;
  const voidD.45 * prephitmp_564;
  size_typeD.11502 pretmp_567;
  size_typeD.11502 prephitmp_568;
  charD.10 * const pretmp_569;
  charD.10 * const prephitmp_570;
  size_typeD.11502 pretmp_571;
  size_typeD.11502 prephitmp_572;
  charD.10 * const pretmp_573;
  charD.10 * const prephitmp_574;
  const intD.9 pretmp_575;
  const intD.9 prephitmp_576;
  const intD.9 pretmp_577;
  const intD.9 prephitmp_578;

;;   basic block 2, loop depth 0, count 0, freq 4, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  if (os_22(D) == 0B)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 3, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [85.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 4, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal { D.23717 } (nonlocal, escaped)
  # os_1 = PHI <os_22(D)(3), &_ZSt4coutD.23717(2)>
  # DEBUG osD.41150 => os_1
  # DEBUG __outD.63618 => os_1
  # DEBUG __sD.63619 => "Input requests = [ "
  # DEBUG __sD.63620 => "Input requests = [ "
  # .MEM_310 = VDEF <.MEM_23(D)>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (os_1, "Input requests = [ ", 19);
  # DEBUG inputD.41154 => 0
  # VUSE <.MEM_310>
  _286 = this_25(D)->D.36298._inputsD.34629;
  if (_286 <= 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [2.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [98.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 4, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [2.0%]  (TRUE_VALUE,EXECUTABLE)
;;                78 [2.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_566 = PHI <.MEM_310(4), .MEM_49(78)>
  # DEBUG __outD.63875 => os_1
  # DEBUG __sD.63876 => "], output requests = [ "
  # DEBUG __sD.63877 => "], output requests = [ "
  # .MEM_423 = VDEF <.MEM_566>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (os_1, "], output requests = [ ", 23);
  # DEBUG outputD.41208 => 0
  # VUSE <.MEM_423>
  _143 = this_25(D)->D.36298._outputsD.34630;
  if (_143 <= 0)
    goto <bb 80>;
  else
    goto <bb 81>;
;;    succ:       80 [2.0%]  (TRUE_VALUE,EXECUTABLE)
;;                81 [98.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 4, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       4 [98.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_310>
  pretmp_195 = MEM[(const voidD.45 * *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEED.24385 + 8B];
  # VUSE <.MEM_310>
  pretmp_44 = MEM[(const voidD.45 * *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEED.24385 + 16B];
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 200, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                79 [100.0%]  (FALLTHRU,EXECUTABLE)
  # input_264 = PHI <0(6), input_50(79)>
  # .MEM_267 = PHI <.MEM_310(6), .MEM_49(79)>
  # PT = nonlocal escaped 
  # prephitmp_201 = PHI <pretmp_195(6), prephitmp_131(79)>
  # PT = nonlocal escaped 
  # prephitmp_184 = PHI <pretmp_44(6), prephitmp_38(79)>
  # DEBUG inputD.41154 => input_264
  # DEBUG printD.41155 => 0
  # DEBUG thisD.63622 => &ssD.41156
  # DEBUG __modeD.63623 => 16
  # DEBUG D#203ptD.0 => &ssD.41156.D.24379
  # DEBUG thisD.63643 => D#203ptD.0
  # .MEM_312 = VDEF <.MEM_267>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt8ios_baseC2EvD.16016 (&MEM[(struct basic_iosD.7355 *)&ssD.41156 + 112B].D.21051);
  # .MEM_313 = VDEF <.MEM_312>
  MEM[(struct basic_iosD.7355 *)&ssD.41156 + 112B].D.21051._vptr.ios_baseD.16027 = &MEM[(voidD.45 *)&_ZTVSt9basic_iosIcSt11char_traitsIcEED.21060 + 16B];
  # .MEM_314 = VDEF <.MEM_313>
  MEM[(struct basic_iosD.7355 *)&ssD.41156 + 112B]._M_tieD.20955 = 0B;
  # .MEM_315 = VDEF <.MEM_314>
  MEM[(struct basic_iosD.7355 *)&ssD.41156 + 112B]._M_fillD.20956 = 0;
  # .MEM_316 = VDEF <.MEM_315>
  MEM[(struct basic_iosD.7355 *)&ssD.41156 + 112B]._M_fill_initD.20957 = 0;
  # .MEM_317 = VDEF <.MEM_316>
  MEM[(struct basic_iosD.7355 *)&ssD.41156 + 112B]._M_streambufD.20958 = 0B;
  # .MEM_318 = VDEF <.MEM_317>
  MEM[(struct basic_iosD.7355 *)&ssD.41156 + 112B]._M_ctypeD.20959 = 0B;
  # .MEM_319 = VDEF <.MEM_318>
  MEM[(struct basic_iosD.7355 *)&ssD.41156 + 112B]._M_num_putD.20960 = 0B;
  # .MEM_320 = VDEF <.MEM_319>
  MEM[(struct basic_iosD.7355 *)&ssD.41156 + 112B]._M_num_getD.20961 = 0B;
  # DEBUG thisD.63645 => &ssD.41156.D.24376
  # DEBUG __vtt_parmD.63644 => &MEM[(voidD.45 *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEED.24385 + 8B]
  # .MEM_321 = VDEF <.MEM_320>
  MEM[(struct basic_ostreamD.7361 *)&ssD.41156]._vptr.basic_ostreamD.21735 = prephitmp_201;
  # VUSE <.MEM_321>
  _133 = MEM[(long intD.12 *)prephitmp_201 + -24B];
  # RANGE [0, 18446744073709551615]
  iftmp.58_134 = (sizetype) _133;
  # PT = { D.41156 } (escaped)
  _135 = &ssD.41156.D.24376 + iftmp.58_134;
  # .MEM_322 = VDEF <.MEM_321>
  _135->D.21051._vptr.ios_baseD.16027 = prephitmp_184;
  [LP 19] # .MEM_323 = VDEF <.MEM_322>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_ED.21026 (_135, 0B);
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                13 (EH,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 200, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_324 = VDEF <.MEM_323>
  ssD.41156.D.24376._vptr.basic_ostreamD.21735 = &MEM[(voidD.45 *)&_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEED.24380 + 24B];
  # .MEM_325 = VDEF <.MEM_324>
  MEM[(struct basic_iosD.7355 *)&ssD.41156 + 112B].D.21051._vptr.ios_baseD.16027 = &MEM[(voidD.45 *)&_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEED.24380 + 64B];
  # DEBUG __aD.63628 => 16
  # DEBUG __bD.63627 => 16
  # DEBUG D#201ptD.0 => &ssD.41156._M_stringbufD.24319
  # DEBUG thisD.63630 => D#201ptD.0
  # DEBUG __modeD.63629 => NULL
  # DEBUG D#187ptD.0 => &MEM[(struct basic_stringbufD.7365 *)D#201ptD.0].D.24226
  # DEBUG thisD.63631 => D#187ptD.0
  # .MEM_326 = VDEF <.MEM_325>
  MEM[(struct basic_streambufD.7357 *)&ssD.41156 + 8B]._vptr.basic_streambufD.16823 = &MEM[(voidD.45 *)&_ZTVSt15basic_streambufIcSt11char_traitsIcEED.16832 + 16B];
  # .MEM_327 = VDEF <.MEM_326>
  MEM[(struct basic_streambufD.7357 *)&ssD.41156 + 8B]._M_in_begD.16669 = 0B;
  # .MEM_328 = VDEF <.MEM_327>
  MEM[(struct basic_streambufD.7357 *)&ssD.41156 + 8B]._M_in_curD.16670 = 0B;
  # .MEM_329 = VDEF <.MEM_328>
  MEM[(struct basic_streambufD.7357 *)&ssD.41156 + 8B]._M_in_endD.16671 = 0B;
  # .MEM_330 = VDEF <.MEM_329>
  MEM[(struct basic_streambufD.7357 *)&ssD.41156 + 8B]._M_out_begD.16672 = 0B;
  # .MEM_331 = VDEF <.MEM_330>
  MEM[(struct basic_streambufD.7357 *)&ssD.41156 + 8B]._M_out_curD.16673 = 0B;
  # .MEM_332 = VDEF <.MEM_331>
  MEM[(struct basic_streambufD.7357 *)&ssD.41156 + 8B]._M_out_endD.16674 = 0B;
  # .MEM_333 = VDEF <.MEM_332>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt6localeC1EvD.14558 (&MEM[(struct basic_streambufD.7357 *)&ssD.41156 + 8B]._M_buf_localeD.16675);
  # .MEM_334 = VDEF <.MEM_333>
  MEM[(struct basic_stringbufD.7365 *)&ssD.41156 + 8B].D.24226._vptr.basic_streambufD.16823 = &MEM[(voidD.45 *)&_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEED.24230 + 16B];
  # .MEM_335 = VDEF <.MEM_334>
  MEM[(struct basic_stringbufD.7365 *)&ssD.41156 + 8B]._M_modeD.24148 = 16;
  # DEBUG D#186ptD.0 => &MEM[(struct basic_stringbufD.7365 *)D#201ptD.0]._M_stringD.24149
  # DEBUG thisD.63632 => D#186ptD.0
  # DEBUG thisD.53310 => D#99ptD.0
  # DEBUG D#98ptD.0 => D#99ptD.0
  # DEBUG thisD.52663 => D#98ptD.0
  # DEBUG thisD.63633 => D#186ptD.0
  # DEBUG D#185ptD.0 => &MEM[(struct basic_stringD.2844 *)D#186ptD.0]._M_dataplusD.11519
  # DEBUG thisD.63636 => D#185ptD.0
  # DEBUG __datD.63635 => &MEM[(struct basic_stringD.2844 *)&ssD.41156 + 80B].D.11539._M_local_bufD.11541
  # DEBUG __aD.63634 => D#184ptD.0
  # DEBUG D#183ptD.0 => D#184ptD.0
  # DEBUG D#181ptD.0 => D#185ptD.0
  # DEBUG D#182ptD.0 => D#183ptD.0
  # DEBUG thisD.53290 => D#181ptD.0
  # DEBUG __aD.53291 => D#182ptD.0
  # DEBUG D#180ptD.0 => D#182ptD.0
  # DEBUG D#179ptD.0 => D#181ptD.0
  # DEBUG thisD.53272 => D#179ptD.0
  # DEBUG D.53273 => D#180ptD.0
  # .MEM_336 = VDEF <.MEM_335>
  MEM[(struct _Alloc_hiderD.11518 *)&ssD.41156 + 80B]._M_pD.11525 = &MEM[(struct basic_stringD.2844 *)&ssD.41156 + 80B].D.11539._M_local_bufD.11541;
  # DEBUG thisD.53315 => NULL
  # DEBUG thisD.53301 => NULL
  # DEBUG thisD.63638 => D#186ptD.0
  # DEBUG __nD.63637 => 0
  # DEBUG D#8ptD.0 => D#186ptD.0
  # DEBUG __lengthD.63640 => 0
  # DEBUG thisD.63639 => D#8ptD.0
  # .MEM_337 = VDEF <.MEM_336>
  MEM[(size_typeD.11502 *)&ssD.41156 + 88B] = 0;
  # DEBUG D#2ptD.0 => D#186ptD.0
  # DEBUG thisD.52222 => D#2ptD.0
  # DEBUG __c1D.63642 => &MEM[(struct basic_stringD.2844 *)&ssD.41156 + 80B].D.11539._M_local_bufD.11541
  # DEBUG __c2D.63641 => D#23ptD.0
  # .MEM_338 = VDEF <.MEM_337>
  MEM[(char_typeD.6439 &)&ssD.41156 + 96] = 0;
  [LP 9] # .MEM_339 = VDEF <.MEM_338>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_ED.21026 (&MEM[(voidD.45 *)&ssD.41156 + 112B], &ssD.41156._M_stringbufD.24319.D.24226);
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 (EH,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 200, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG outputD.41205 => 0
  # DEBUG printD.41155 => 0
  # VUSE <.MEM_339>
  _276 = this_25(D)->D.36298._outputsD.34630;
  if (_276 <= 0)
    goto <bb 76>;
  else
    goto <bb 15>;
;;    succ:       76 [2.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [98.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 (EH,EXECUTABLE)
  # PT = nonlocal escaped 
  # prephitmp_561 = PHI <prephitmp_184(8)>
  # PT = nonlocal escaped 
  # prephitmp_560 = PHI <prephitmp_201(8)>
<L33>: [LP 9]
  # .MEM_416 = VDEF <.MEM_339>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1EvD.24206 (&ssD.41156._M_stringbufD.24319);
  [LP 8] resx 15
;;    succ:       11 (EH,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 (EH,EXECUTABLE)
<L34>: [LP 8]
  # DEBUG thisD.63626 => &ssD.41156.D.24376
  # DEBUG __vtt_parmD.63625 => &MEM[(voidD.45 *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEED.24385 + 8B]
  # VUSE <.MEM_416>
  _145 = MEM[(long intD.12 *)prephitmp_560 + -24B];
  # RANGE [0, 18446744073709551615]
  iftmp.64_146 = (sizetype) _145;
  # PT = { D.41156 } (escaped)
  _147 = &ssD.41156.D.24376 + iftmp.64_146;
  # .MEM_418 = VDEF <.MEM_416>
  _147->D.21051._vptr.ios_baseD.16027 = prephitmp_561;
  # .MEM_419 = VDEF <.MEM_418>
  MEM[(struct  &)&ssD.41156] ={v} {CLOBBER};
  [LP 7] resx 14
;;    succ:       12 (EH,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       11 (EH,EXECUTABLE)
<L46>: [LP 7]
  goto <bb 14> (<L35>);
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       7 (EH,EXECUTABLE)
<L45>: [LP 19]
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_277 = PHI <.MEM_323(13), .MEM_419(12)>
<L35>:
  # DEBUG D#202ptD.0 => &ssD.41156.D.24379
  # DEBUG thisD.63624 => D#202ptD.0
  # .MEM_420 = VDEF <.MEM_277>
  MEM[(struct basic_iosD.7355 *)&ssD.41156 + 112B].D.21051._vptr.ios_baseD.16027 = &MEM[(voidD.45 *)&_ZTVSt9basic_iosIcSt11char_traitsIcEED.21060 + 16B];
  [MNT 16] # .MEM_421 = VDEF <.MEM_420>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt8ios_baseD2EvD.16024 (&MEM[(struct basic_iosD.7355 *)&ssD.41156 + 112B].D.21051);
  resx 13
;;    succ:      

;;   basic block 15, loop depth 1, count 0, freq 196, maybe hot
;;    prev block 14, next block 16, flags: (NEW)
;;    pred:       9 [98.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_24 = (long unsigned intD.14) input_264;
  pretmp_130 = pretmp_24 * 24;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 2, count 0, freq 9800, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       15 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 1]
  # print_234 = PHI <0(15), print_4(26)>
  # output_114 = PHI <0(15), output_39(26)>
  # .MEM_547 = PHI <.MEM_339(15), .MEM_12(26)>
  # prephitmp_563 = PHI <_276(15), prephitmp_578(26)>
  # DEBUG outputD.41205 => output_114
  # DEBUG printD.41155 => print_234
  # RANGE [0, 18446744073709551615]
  _29 = (long unsigned intD.14) output_114;
  # DEBUG D#479ptD.0 => &this_25(D)->_requestD.36229
  # VUSE <.MEM_547>
  # PT = nonlocal escaped 
  _80 = MEM[(struct vectorD.35482 * *)this_25(D) + 160B];
  # DEBUG D#63ptD.0 => D#479ptD.0
  # DEBUG __nD.56314 => (long unsigned intD.14) input_264
  # DEBUG thisD.56315 => D#63ptD.0
  # PT = nonlocal escaped 
  _85 = _80 + pretmp_130;
  # VUSE <.MEM_547>
  # PT = nonlocal escaped 
  _82 = MEM[(struct sRequestD.35378 * *)_85];
  # DEBUG __nD.56310 => _29
  # DEBUG thisD.56311 => D#64ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _58 = _29 * 16;
  # PT = nonlocal escaped 
  _31 = _82 + _58;
  # DEBUG reqD.41206 => NULL
  # VUSE <.MEM_547>
  _32 = _31->labelD.35381;
  if (_32 >= 0)
    goto <bb 17>;
  else
    goto <bb 25>;
;;    succ:       17 [52.5%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [47.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 2, count 0, freq 5143, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [52.5%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG printD.41155 => 1
  # VUSE <.MEM_547>
  _33 = _31->in_priD.35382;
  [LP 20] # .MEM_34 = VDEF <.MEM_547>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _35 = _ZNSolsEiD.21643 (&ssD.41156.D.24376, output_114);
;;    succ:       166 (EH,EXECUTABLE)
;;                18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 2, count 0, freq 5143, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __outD.56317 => _35
  # DEBUG __sD.56318 => "@"
  # DEBUG __sD.56319 => "@"
  [LP 21] # .MEM_99 = VDEF <.MEM_34>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_35, "@", 1);
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 (EH,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       18 (EH,EXECUTABLE)
<L48>: [LP 21]
  goto <bb 167> (<L28>);
;;    succ:       167 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 2, count 0, freq 5143, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       18 [100.0%]  (FALLTHRU,EXECUTABLE)
  [LP 22] # .MEM_36 = VDEF <.MEM_99>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _37 = _ZNSolsEiD.21643 (_35, _33);
  goto <bb 22>;
;;    succ:       21 (EH,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 (EH,EXECUTABLE)
<L49>: [LP 22]
  goto <bb 167> (<L28>);
;;    succ:       167 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 2, count 0, freq 5143, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __outD.63649 => _37
  # DEBUG __sD.63650 => " "
  # DEBUG __sD.63651 => " "
  [LP 23] # .MEM_340 = VDEF <.MEM_36>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_37, " ", 1);
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 (EH,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 (EH,EXECUTABLE)
<L50>: [LP 23]
  goto <bb 167> (<L28>);
;;    succ:       167 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 2, count 0, freq 5143, maybe hot
;;    prev block 23, next block 25, flags: (NEW)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_340>
  pretmp_577 = this_25(D)->D.36298._outputsD.34630;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 2, count 0, freq 9800, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       16 [47.5%]  (FALSE_VALUE,EXECUTABLE)
;;                24 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 1]
  # print_4 = PHI <print_234(16), 1(24)>
  # .MEM_12 = PHI <.MEM_547(16), .MEM_340(24)>
  # prephitmp_578 = PHI <prephitmp_563(16), pretmp_577(24)>
  # DEBUG printD.41155 => print_4
  output_39 = output_114 + 1;
  # DEBUG outputD.41205 => output_39
  # DEBUG outputD.41205 => output_39
  # DEBUG printD.41155 => print_4
  if (output_39 >= prephitmp_578)
    goto <bb 27>;
  else
    goto <bb 26>;
;;    succ:       27 [2.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [98.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 2, count 0, freq 9604, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 [98.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 16>;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 1, count 0, freq 196, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       25 [2.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1]
  # print_27 = PHI <print_4(25)>
  if (print_27 != 0)
    goto <bb 28>;
  else
    goto <bb 76>;
;;    succ:       28 [51.0%]  (TRUE_VALUE,EXECUTABLE)
;;                76 [49.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 1, count 0, freq 100, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       27 [51.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.56321 => &ssD.41156
  # DEBUG thisD.63653 => &ssD.41156._M_stringbufD.24319
  # DEBUG thisD.63776 => &D.41207
  # DEBUG thisD.56143 => D#99ptD.0
  # DEBUG D#98ptD.0 => D#99ptD.0
  # DEBUG thisD.52663 => D#98ptD.0
  # DEBUG thisD.63777 => &D.41207
  # DEBUG D#185ptD.0 => &D.41207._M_dataplusD.11519
  # DEBUG thisD.63780 => D#185ptD.0
  # DEBUG __datD.63779 => &D.41207.D.11539._M_local_bufD.11541
  # DEBUG __aD.63778 => D#184ptD.0
  # DEBUG D#183ptD.0 => D#184ptD.0
  # DEBUG D#181ptD.0 => D#185ptD.0
  # DEBUG D#182ptD.0 => D#183ptD.0
  # DEBUG thisD.53290 => D#181ptD.0
  # DEBUG __aD.53291 => D#182ptD.0
  # DEBUG D#180ptD.0 => D#182ptD.0
  # DEBUG D#179ptD.0 => D#181ptD.0
  # DEBUG thisD.53272 => D#179ptD.0
  # DEBUG D.53273 => D#180ptD.0
  # .MEM_342 = VDEF <.MEM_12>
  MEM[(struct _Alloc_hiderD.11518 *)&D.41207]._M_pD.11525 = &D.41207.D.11539._M_local_bufD.11541;
  # DEBUG thisD.56148 => NULL
  # DEBUG thisD.53301 => NULL
  # DEBUG thisD.63782 => &D.41207
  # DEBUG __nD.63781 => 0
  # DEBUG D#8ptD.0 => &D.41207
  # DEBUG __lengthD.63784 => 0
  # DEBUG thisD.63783 => D#8ptD.0
  # .MEM_343 = VDEF <.MEM_342>
  MEM[(size_typeD.11502 *)&D.41207 + 8B] = 0;
  # DEBUG D#2ptD.0 => &D.41207
  # DEBUG thisD.52222 => D#2ptD.0
  # DEBUG __c1D.63786 => &D.41207.D.11539._M_local_bufD.11541
  # DEBUG __c2D.63785 => D#23ptD.0
  # .MEM_344 = VDEF <.MEM_343>
  MEM[(char_typeD.6439 &)&D.41207 + 16] = 0;
  # DEBUG D#472ptD.0 => &MEM[(const struct basic_stringbufD.7365 *)&ssD.41156 + 8B].D.24226
  # VUSE <.MEM_344>
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 } (nonlocal, escaped)
  _149 = MEM[(char_typeD.16540 * *)&ssD.41156 + 48B];
  # DEBUG D#5ptD.0 => D#472ptD.0
  # DEBUG thisD.56140 => D#5ptD.0
  if (_149 != 0B)
    goto <bb 29>;
  else
    goto <bb 51>;
;;    succ:       29 [93.3%]  (TRUE_VALUE,EXECUTABLE)
;;                51 [6.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 1, count 0, freq 93, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       28 [93.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#473ptD.0 => &MEM[(const struct basic_stringbufD.7365 *)&ssD.41156 + 8B].D.24226
  # DEBUG D#5ptD.0 => D#473ptD.0
  # DEBUG thisD.56159 => D#5ptD.0
  # DEBUG D#474ptD.0 => &MEM[(const struct basic_stringbufD.7365 *)&ssD.41156 + 8B].D.24226
  # VUSE <.MEM_344>
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 } (nonlocal, escaped)
  _150 = MEM[(char_typeD.16540 * *)&ssD.41156 + 32B];
  # DEBUG D#6ptD.0 => D#474ptD.0
  # DEBUG thisD.56156 => D#6ptD.0
  if (_149 > _150)
    goto <bb 30>;
  else
    goto <bb 40>;
;;    succ:       30 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 1, count 0, freq 47, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.63759 => D#99ptD.0
  # DEBUG D#98ptD.0 => D#99ptD.0
  # DEBUG thisD.52663 => D#98ptD.0
  # DEBUG D#477ptD.0 => &MEM[(const struct basic_stringbufD.7365 *)&ssD.41156 + 8B].D.24226
  # DEBUG D#5ptD.0 => D#477ptD.0
  # DEBUG thisD.56182 => D#5ptD.0
  # DEBUG D#478ptD.0 => &MEM[(const struct basic_stringbufD.7365 *)&ssD.41156 + 8B].D.24226
  # VUSE <.MEM_344>
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 } (nonlocal, escaped)
  _151 = MEM[(char_typeD.16540 * *)&ssD.41156 + 40B];
  # DEBUG D#7ptD.0 => D#478ptD.0
  # DEBUG thisD.56179 => D#7ptD.0
  # DEBUG thisD.63763 => &D.63788
  # DEBUG __begD.63762 => _151
  # DEBUG __endD.63761 => _149
  # DEBUG __aD.63760 => NULL
  # DEBUG thisD.63764 => &D.63788
  # DEBUG D#470ptD.0 => &D.63788._M_dataplusD.11519
  # DEBUG thisD.63767 => D#470ptD.0
  # DEBUG __datD.63766 => &D.63788.D.11539._M_local_bufD.11541
  # DEBUG __aD.63765 => D#184ptD.0
  # DEBUG D#183ptD.0 => D#184ptD.0
  # DEBUG D#181ptD.0 => D#470ptD.0
  # DEBUG D#182ptD.0 => D#183ptD.0
  # DEBUG thisD.53290 => D#181ptD.0
  # DEBUG __aD.53291 => D#182ptD.0
  # DEBUG D#180ptD.0 => D#182ptD.0
  # DEBUG D#179ptD.0 => D#181ptD.0
  # DEBUG thisD.53272 => D#179ptD.0
  # DEBUG D.53273 => D#180ptD.0
  # .MEM_369 = VDEF <.MEM_344>
  MEM[(struct _Alloc_hiderD.11518 *)&D.63788]._M_pD.11525 = &D.63788.D.11539._M_local_bufD.11541;
  # DEBUG thisD.63770 => &D.63788
  # DEBUG __begD.63769 => _151
  # DEBUG __endD.63768 => _149
  # DEBUG thisD.63774 => &D.63788
  # DEBUG __begD.63773 => _151
  # DEBUG __endD.63772 => _149
  # DEBUG thisD.63792 => &D.63788
  # DEBUG __begD.63793 => _151
  # DEBUG __endD.63794 => _149
  # DEBUG __ptrD.56096 => _151
  if (_151 == 0B)
    goto <bb 175>;
  else
    goto <bb 177>;
;;    succ:       175 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                177 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 1, count 0, freq 14, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       177 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  [LP 24] # .MEM_371 = VDEF <.MEM_370>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _163 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.11563 (&D.63788, &__dnewD.63795, 0);
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                61 (EH,EXECUTABLE)

;;   basic block 32, loop depth 1, count 0, freq 14, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       31 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#9ptD.0 => &D.63788
  # DEBUG __pD.63814 => _163
  # DEBUG thisD.63813 => D#9ptD.0
  # .MEM_372 = VDEF <.MEM_371>
  MEM[(charD.10 * *)&D.63788] = _163;
  # VUSE <.MEM_372>
  __dnew.71_164 = __dnewD.63795;
  # DEBUG D#10ptD.0 => &D.63788
  # DEBUG __capacityD.63816 => __dnew.71_164
  # DEBUG thisD.63815 => D#10ptD.0
  # .MEM_373 = VDEF <.MEM_372>
  MEM[(size_typeD.11502 *)&D.63788 + 16B] = __dnew.71_164;
  # DEBUG D#2ptD.0 => &D.63788
  # DEBUG thisD.56070 => D#2ptD.0
  # DEBUG __pD.63798 => _163
  # DEBUG __k1D.63797 => _151
  # DEBUG __k2D.63796 => _149
  # DEBUG __dD.63801 => _163
  # DEBUG __sD.63800 => _151
  # DEBUG __nD.63799 => __dnew.70_162
  goto <bb 35>;
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 1, count 0, freq 33, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       177 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#2ptD.0 => &D.63788
  # DEBUG thisD.56070 => D#2ptD.0
  # DEBUG __pD.63798 => &D.63788.D.11539._M_local_bufD.11541
  # DEBUG __k1D.63797 => _151
  # DEBUG __k2D.63796 => _149
  # DEBUG __dD.63801 => &D.63788.D.11539._M_local_bufD.11541
  # DEBUG __sD.63800 => _151
  # DEBUG __nD.63799 => __dnew.70_162
  if (__dnew.70_162 == 1)
    goto <bb 34>;
  else
    goto <bb 35>;
;;    succ:       34 [53.9%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [46.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 1, count 0, freq 18, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       33 [53.9%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_370>
  _166 = MEM[(const char_typeD.6439 &)_151];
  # DEBUG D#23ptD.0 => _151
  # DEBUG __c1D.63806 => &D.63788.D.11539._M_local_bufD.11541
  # DEBUG __c2D.63805 => D#23ptD.0
  # .MEM_374 = VDEF <.MEM_370>
  MEM[(char_typeD.6439 &)&D.63788 + 16] = _166;
  goto <bb 36>;
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 35, loop depth 1, count 0, freq 29, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       33 [46.1%]  (FALSE_VALUE,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 D.63788 } (nonlocal, escaped)
  # _279 = PHI <&D.63788.D.11539._M_local_bufD.11541(33), _163(32)>
  # .MEM_548 = PHI <.MEM_370(33), .MEM_373(32)>
  # DEBUG D#2ptD.0 => &D.63788
  # DEBUG thisD.56070 => D#2ptD.0
  # DEBUG __pD.63798 => _279
  # DEBUG __k1D.63797 => _151
  # DEBUG __k2D.63796 => _149
  # DEBUG __dD.63801 => _279
  # DEBUG __sD.63800 => _151
  # DEBUG __nD.63799 => __dnew.70_162
  # DEBUG __s1D.63804 => _279
  # DEBUG __s2D.63803 => _151
  # DEBUG __nD.63802 => __dnew.70_162
  # .MEM_375 = VDEF <.MEM_548>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  memcpyD.992 (_279, _151, __dnew.70_162);
  # VUSE <.MEM_375>
  pretmp_571 = __dnewD.63795;
  # VUSE <.MEM_375>
  pretmp_573 = MEM[(charD.10 * *)&D.63788];
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 1, count 0, freq 47, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       34 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_284 = PHI <.MEM_374(34), .MEM_375(35)>
  # prephitmp_572 = PHI <__dnew.70_162(34), pretmp_571(35)>
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 D.63788 } (nonlocal, escaped)
  # prephitmp_574 = PHI <&D.63788.D.11539._M_local_bufD.11541(34), pretmp_573(35)>
  # DEBUG D#897ptD.0 => __dnewD.63795
  # DEBUG thisD.63808 => &D.63788
  # DEBUG __nD.63807 => D#897ptD.0
  # DEBUG D#8ptD.0 => &D.63788
  # DEBUG __lengthD.63810 => D#897ptD.0
  # DEBUG thisD.63809 => D#8ptD.0
  # .MEM_376 = VDEF <.MEM_284>
  MEM[(size_typeD.11502 *)&D.63788 + 8B] = prephitmp_572;
  # DEBUG D#2ptD.0 => &D.63788
  # DEBUG thisD.52222 => D#2ptD.0
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 D.63788 } (nonlocal, escaped)
  _169 = prephitmp_574 + prephitmp_572;
  # DEBUG __c1D.63812 => _169
  # DEBUG __c2D.63811 => D#23ptD.0
  # .MEM_377 = VDEF <.MEM_376>
  MEM[(char_typeD.6439 &)_169] = 0;
  # .MEM_378 = VDEF <.MEM_377>
  __dnewD.63795 ={v} {CLOBBER};
  # DEBUG thisD.63756 => &D.41207
  # DEBUG __strD.63755 => &D.63788
  # DEBUG thisD.63758 => &D.41207
  # DEBUG __strD.63757 => &D.63788
  [LP 12] # .MEM_379 = VDEF <.MEM_378>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_D.11707 (&D.41207, &D.63788);
;;    succ:       37 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                53 (EH,EXECUTABLE)

;;   basic block 37, loop depth 1, count 0, freq 47, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       36 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.63739 => &D.63788
  # DEBUG thisD.63740 => &D.63788
  # DEBUG thisD.63749 => &D.63788
  # VUSE <.MEM_379>
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 D.63788 } (nonlocal, escaped)
  _152 = MEM[(charD.10 * *)&D.63788];
  # DEBUG D#2ptD.0 => &D.63788
  # DEBUG thisD.52147 => D#2ptD.0
  # DEBUG thisD.63750 => &D.63788
  if (&D.63788.D.11539._M_local_bufD.11541 != _152)
    goto <bb 38>;
  else
    goto <bb 39>;
;;    succ:       38 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 38, loop depth 1, count 0, freq 37, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       37 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#197ptD.0 => D.63788.D.11539._M_allocated_capacityD.11542
  # DEBUG D#196ptD.0 => D#197ptD.0
  # DEBUG thisD.63742 => &D.63788
  # DEBUG __sizeD.63741 => D#196ptD.0
  # DEBUG D#195ptD.0 => D#196ptD.0
  # DEBUG D#2ptD.0 => &D.63788
  # DEBUG thisD.53364 => D#2ptD.0
  # DEBUG thisD.53365 => &D.63788
  # DEBUG D#194ptD.0 => &D.63788._M_dataplusD.11519
  # DEBUG D#192ptD.0 => D#194ptD.0
  # DEBUG D#193ptD.0 => D#195ptD.0 + 1
  # DEBUG __pD.63745 => _152
  # DEBUG __aD.63743 => D#192ptD.0
  # DEBUG __nD.63744 => D#193ptD.0
  # DEBUG D#191ptD.0 => D#193ptD.0
  # DEBUG D#190ptD.0 => D#192ptD.0
  # DEBUG D#188ptD.0 => D#190ptD.0
  # DEBUG D#189ptD.0 => D#191ptD.0
  # DEBUG __pD.63748 => _152
  # DEBUG thisD.63746 => D#188ptD.0
  # DEBUG D.63747 => D#189ptD.0
  # .MEM_380 = VDEF <.MEM_379>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZdlPvD.2766 (_152);
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 1, count 0, freq 47, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       37 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_285 = PHI <.MEM_379(37), .MEM_380(38)>
  # DEBUG D#198ptD.0 => &D.63788._M_dataplusD.11519
  # DEBUG thisD.63751 => D#198ptD.0
  # DEBUG thisD.63752 => D#198ptD.0
  # DEBUG thisD.63753 => D#198ptD.0
  # .MEM_385 = VDEF <.MEM_285>
  D.63788 ={v} {CLOBBER};
  # DEBUG thisD.63754 => NULL
  # DEBUG thisD.56191 => NULL
  goto <bb 66>;
;;    succ:       66 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 40, loop depth 1, count 0, freq 47, maybe hot
;;    prev block 39, next block 41, flags: (NEW, REACHABLE)
;;    pred:       29 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.63722 => D#99ptD.0
  # DEBUG D#98ptD.0 => D#99ptD.0
  # DEBUG thisD.52663 => D#98ptD.0
  # DEBUG D#475ptD.0 => &MEM[(const struct basic_stringbufD.7365 *)&ssD.41156 + 8B].D.24226
  # DEBUG D#6ptD.0 => D#475ptD.0
  # DEBUG thisD.56228 => D#6ptD.0
  # DEBUG D#476ptD.0 => &MEM[(const struct basic_stringbufD.7365 *)&ssD.41156 + 8B].D.24226
  # VUSE <.MEM_344>
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 } (nonlocal, escaped)
  _153 = MEM[(char_typeD.16540 * *)&ssD.41156 + 40B];
  # DEBUG D#7ptD.0 => D#476ptD.0
  # DEBUG thisD.56225 => D#7ptD.0
  # DEBUG thisD.63726 => &D.63787
  # DEBUG __begD.63725 => _153
  # DEBUG __endD.63724 => _150
  # DEBUG __aD.63723 => NULL
  # DEBUG thisD.63727 => &D.63787
  # DEBUG D#470ptD.0 => &D.63787._M_dataplusD.11519
  # DEBUG thisD.63730 => D#470ptD.0
  # DEBUG __datD.63729 => &D.63787.D.11539._M_local_bufD.11541
  # DEBUG __aD.63728 => D#184ptD.0
  # DEBUG D#183ptD.0 => D#184ptD.0
  # DEBUG D#181ptD.0 => D#470ptD.0
  # DEBUG D#182ptD.0 => D#183ptD.0
  # DEBUG thisD.53290 => D#181ptD.0
  # DEBUG __aD.53291 => D#182ptD.0
  # DEBUG D#180ptD.0 => D#182ptD.0
  # DEBUG D#179ptD.0 => D#181ptD.0
  # DEBUG thisD.53272 => D#179ptD.0
  # DEBUG D.53273 => D#180ptD.0
  # .MEM_345 = VDEF <.MEM_344>
  MEM[(struct _Alloc_hiderD.11518 *)&D.63787]._M_pD.11525 = &D.63787.D.11539._M_local_bufD.11541;
  # DEBUG thisD.63733 => &D.63787
  # DEBUG __begD.63732 => _153
  # DEBUG __endD.63731 => _150
  # DEBUG thisD.63737 => &D.63787
  # DEBUG __begD.63736 => _153
  # DEBUG __endD.63735 => _150
  # DEBUG thisD.63821 => &D.63787
  # DEBUG __begD.63822 => _153
  # DEBUG __endD.63823 => _150
  # DEBUG __ptrD.56096 => _153
  # RANGE [0, 1]
  _454 = _150 != 0B;
  # RANGE [0, 1]
  _508 = _153 == 0B;
  # RANGE [0, 1]
  _282 = _454 & _508;
  if (_282 != 0)
    goto <bb 179>;
  else
    goto <bb 178>;
;;    succ:       179 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                178 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 41, loop depth 1, count 0, freq 14, maybe hot
;;    prev block 40, next block 42, flags: (NEW, REACHABLE)
;;    pred:       178 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  [LP 25] # .MEM_347 = VDEF <.MEM_346>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _175 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.11563 (&D.63787, &__dnewD.63824, 0);
  goto <bb 43>;
;;    succ:       43 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                42 (EH,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 41, next block 43, flags: (NEW)
;;    pred:       41 (EH,EXECUTABLE)
<L52>: [LP 25]
  goto <bb 62> (<L38>);
;;    succ:       62 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 43, loop depth 1, count 0, freq 14, maybe hot
;;    prev block 42, next block 44, flags: (NEW, REACHABLE)
;;    pred:       41 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#9ptD.0 => &D.63787
  # DEBUG __pD.63843 => _175
  # DEBUG thisD.63842 => D#9ptD.0
  # .MEM_348 = VDEF <.MEM_347>
  MEM[(charD.10 * *)&D.63787] = _175;
  # VUSE <.MEM_348>
  __dnew.71_176 = __dnewD.63824;
  # DEBUG D#10ptD.0 => &D.63787
  # DEBUG __capacityD.63845 => __dnew.71_176
  # DEBUG thisD.63844 => D#10ptD.0
  # .MEM_349 = VDEF <.MEM_348>
  MEM[(size_typeD.11502 *)&D.63787 + 16B] = __dnew.71_176;
  # DEBUG D#2ptD.0 => &D.63787
  # DEBUG thisD.56070 => D#2ptD.0
  # DEBUG __pD.63827 => _175
  # DEBUG __k1D.63826 => _153
  # DEBUG __k2D.63825 => _150
  # DEBUG __dD.63830 => _175
  # DEBUG __sD.63829 => _153
  # DEBUG __nD.63828 => __dnew.70_174
  goto <bb 46>;
;;    succ:       46 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 44, loop depth 1, count 0, freq 33, maybe hot
;;    prev block 43, next block 45, flags: (NEW, REACHABLE)
;;    pred:       178 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#2ptD.0 => &D.63787
  # DEBUG thisD.56070 => D#2ptD.0
  # DEBUG __pD.63827 => &D.63787.D.11539._M_local_bufD.11541
  # DEBUG __k1D.63826 => _153
  # DEBUG __k2D.63825 => _150
  # DEBUG __dD.63830 => &D.63787.D.11539._M_local_bufD.11541
  # DEBUG __sD.63829 => _153
  # DEBUG __nD.63828 => __dnew.70_174
  if (__dnew.70_174 == 1)
    goto <bb 45>;
  else
    goto <bb 46>;
;;    succ:       45 [53.9%]  (TRUE_VALUE,EXECUTABLE)
;;                46 [46.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 45, loop depth 1, count 0, freq 18, maybe hot
;;    prev block 44, next block 46, flags: (NEW, REACHABLE)
;;    pred:       44 [53.9%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_346>
  _178 = MEM[(const char_typeD.6439 &)_153];
  # DEBUG D#23ptD.0 => _153
  # DEBUG __c1D.63835 => &D.63787.D.11539._M_local_bufD.11541
  # DEBUG __c2D.63834 => D#23ptD.0
  # .MEM_350 = VDEF <.MEM_346>
  MEM[(char_typeD.6439 &)&D.63787 + 16] = _178;
  goto <bb 47>;
;;    succ:       47 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 46, loop depth 1, count 0, freq 29, maybe hot
;;    prev block 45, next block 47, flags: (NEW, REACHABLE)
;;    pred:       44 [46.1%]  (FALSE_VALUE,EXECUTABLE)
;;                43 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 D.63787 } (nonlocal, escaped)
  # _551 = PHI <&D.63787.D.11539._M_local_bufD.11541(44), _175(43)>
  # .MEM_557 = PHI <.MEM_346(44), .MEM_349(43)>
  # DEBUG D#2ptD.0 => &D.63787
  # DEBUG thisD.56070 => D#2ptD.0
  # DEBUG __pD.63827 => _551
  # DEBUG __k1D.63826 => _153
  # DEBUG __k2D.63825 => _150
  # DEBUG __dD.63830 => _551
  # DEBUG __sD.63829 => _153
  # DEBUG __nD.63828 => __dnew.70_174
  # DEBUG __s1D.63833 => _551
  # DEBUG __s2D.63832 => _153
  # DEBUG __nD.63831 => __dnew.70_174
  # .MEM_351 = VDEF <.MEM_557>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  memcpyD.992 (_551, _153, __dnew.70_174);
  # VUSE <.MEM_351>
  pretmp_567 = __dnewD.63824;
  # VUSE <.MEM_351>
  pretmp_569 = MEM[(charD.10 * *)&D.63787];
;;    succ:       47 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 47, loop depth 1, count 0, freq 47, maybe hot
;;    prev block 46, next block 48, flags: (NEW, REACHABLE)
;;    pred:       45 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                46 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_287 = PHI <.MEM_350(45), .MEM_351(46)>
  # prephitmp_568 = PHI <__dnew.70_174(45), pretmp_567(46)>
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 D.63787 } (nonlocal, escaped)
  # prephitmp_570 = PHI <&D.63787.D.11539._M_local_bufD.11541(45), pretmp_569(46)>
  # DEBUG D#898ptD.0 => __dnewD.63824
  # DEBUG thisD.63837 => &D.63787
  # DEBUG __nD.63836 => D#898ptD.0
  # DEBUG D#8ptD.0 => &D.63787
  # DEBUG __lengthD.63839 => D#898ptD.0
  # DEBUG thisD.63838 => D#8ptD.0
  # .MEM_352 = VDEF <.MEM_287>
  MEM[(size_typeD.11502 *)&D.63787 + 8B] = prephitmp_568;
  # DEBUG D#2ptD.0 => &D.63787
  # DEBUG thisD.52222 => D#2ptD.0
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 D.63787 } (nonlocal, escaped)
  _181 = prephitmp_570 + prephitmp_568;
  # DEBUG __c1D.63841 => _181
  # DEBUG __c2D.63840 => D#23ptD.0
  # .MEM_353 = VDEF <.MEM_352>
  MEM[(char_typeD.6439 &)_181] = 0;
  # .MEM_354 = VDEF <.MEM_353>
  __dnewD.63824 ={v} {CLOBBER};
  # DEBUG thisD.63719 => &D.41207
  # DEBUG __strD.63718 => &D.63787
  # DEBUG thisD.63721 => &D.41207
  # DEBUG __strD.63720 => &D.63787
  [LP 11] # .MEM_355 = VDEF <.MEM_354>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_D.11707 (&D.41207, &D.63787);
;;    succ:       48 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                57 (EH,EXECUTABLE)

;;   basic block 48, loop depth 1, count 0, freq 47, maybe hot
;;    prev block 47, next block 49, flags: (NEW, REACHABLE)
;;    pred:       47 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.63702 => &D.63787
  # DEBUG thisD.63703 => &D.63787
  # DEBUG thisD.63712 => &D.63787
  # VUSE <.MEM_355>
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 D.63787 } (nonlocal, escaped)
  _154 = MEM[(charD.10 * *)&D.63787];
  # DEBUG D#2ptD.0 => &D.63787
  # DEBUG thisD.52147 => D#2ptD.0
  # DEBUG thisD.63713 => &D.63787
  if (&D.63787.D.11539._M_local_bufD.11541 != _154)
    goto <bb 49>;
  else
    goto <bb 50>;
;;    succ:       49 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                50 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 49, loop depth 1, count 0, freq 37, maybe hot
;;    prev block 48, next block 50, flags: (NEW, REACHABLE)
;;    pred:       48 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#197ptD.0 => D.63787.D.11539._M_allocated_capacityD.11542
  # DEBUG D#196ptD.0 => D#197ptD.0
  # DEBUG thisD.63705 => &D.63787
  # DEBUG __sizeD.63704 => D#196ptD.0
  # DEBUG D#195ptD.0 => D#196ptD.0
  # DEBUG D#2ptD.0 => &D.63787
  # DEBUG thisD.53364 => D#2ptD.0
  # DEBUG thisD.53365 => &D.63787
  # DEBUG D#194ptD.0 => &D.63787._M_dataplusD.11519
  # DEBUG D#192ptD.0 => D#194ptD.0
  # DEBUG D#193ptD.0 => D#195ptD.0 + 1
  # DEBUG __pD.63708 => _154
  # DEBUG __aD.63706 => D#192ptD.0
  # DEBUG __nD.63707 => D#193ptD.0
  # DEBUG D#191ptD.0 => D#193ptD.0
  # DEBUG D#190ptD.0 => D#192ptD.0
  # DEBUG D#188ptD.0 => D#190ptD.0
  # DEBUG D#189ptD.0 => D#191ptD.0
  # DEBUG __pD.63711 => _154
  # DEBUG thisD.63709 => D#188ptD.0
  # DEBUG D.63710 => D#189ptD.0
  # .MEM_356 = VDEF <.MEM_355>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZdlPvD.2766 (_154);
;;    succ:       50 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 50, loop depth 1, count 0, freq 47, maybe hot
;;    prev block 49, next block 51, flags: (NEW, REACHABLE)
;;    pred:       48 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                49 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_288 = PHI <.MEM_355(48), .MEM_356(49)>
  # DEBUG D#198ptD.0 => &D.63787._M_dataplusD.11519
  # DEBUG thisD.63714 => D#198ptD.0
  # DEBUG thisD.63715 => D#198ptD.0
  # DEBUG thisD.63716 => D#198ptD.0
  # .MEM_361 = VDEF <.MEM_288>
  D.63787 ={v} {CLOBBER};
  # DEBUG thisD.63717 => NULL
  # DEBUG thisD.56237 => NULL
  goto <bb 66>;
;;    succ:       66 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 51, loop depth 1, count 0, freq 7, maybe hot
;;    prev block 50, next block 52, flags: (NEW, REACHABLE)
;;    pred:       28 [6.7%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.63699 => &D.41207
  # DEBUG __strD.63698 => &MEM[(const struct basic_stringbufD.7365 *)&ssD.41156 + 8B]._M_stringD.24149
  # DEBUG thisD.63701 => &D.41207
  # DEBUG __strD.63700 => &MEM[(const struct basic_stringbufD.7365 *)&ssD.41156 + 8B]._M_stringD.24149
  [LP 26] # .MEM_393 = VDEF <.MEM_344>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_D.11707 (&D.41207, &MEM[(const struct basic_stringbufD.7365 *)&ssD.41156 + 8B]._M_stringD.24149);
  goto <bb 66>;
;;    succ:       66 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                52 (EH,EXECUTABLE)

;;   basic block 52, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 51, next block 53, flags: (NEW)
;;    pred:       51 (EH,EXECUTABLE)
<L53>: [LP 26]
  goto <bb 62> (<L38>);
;;    succ:       62 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 53, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 52, next block 54, flags: (NEW, REACHABLE)
;;    pred:       36 (EH,EXECUTABLE)
<L36>: [LP 12]
  # DEBUG thisD.63683 => &D.63788
  # DEBUG thisD.63684 => &D.63788
  # DEBUG thisD.63693 => &D.63788
  # VUSE <.MEM_379>
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 D.63788 } (nonlocal, escaped)
  _156 = MEM[(charD.10 * *)&D.63788];
  # DEBUG D#2ptD.0 => &D.63788
  # DEBUG thisD.52147 => D#2ptD.0
  # DEBUG thisD.63694 => &D.63788
  if (&D.63788.D.11539._M_local_bufD.11541 != _156)
    goto <bb 54>;
  else
    goto <bb 55>;
;;    succ:       54 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                55 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 54, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 53, next block 55, flags: (NEW, REACHABLE)
;;    pred:       53 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#197ptD.0 => D.63788.D.11539._M_allocated_capacityD.11542
  # DEBUG D#196ptD.0 => D#197ptD.0
  # DEBUG thisD.63686 => &D.63788
  # DEBUG __sizeD.63685 => D#196ptD.0
  # DEBUG D#195ptD.0 => D#196ptD.0
  # DEBUG D#2ptD.0 => &D.63788
  # DEBUG thisD.53364 => D#2ptD.0
  # DEBUG thisD.53365 => &D.63788
  # DEBUG D#194ptD.0 => &D.63788._M_dataplusD.11519
  # DEBUG D#192ptD.0 => D#194ptD.0
  # DEBUG D#193ptD.0 => D#195ptD.0 + 1
  # DEBUG __pD.63689 => _156
  # DEBUG __aD.63687 => D#192ptD.0
  # DEBUG __nD.63688 => D#193ptD.0
  # DEBUG D#191ptD.0 => D#193ptD.0
  # DEBUG D#190ptD.0 => D#192ptD.0
  # DEBUG D#188ptD.0 => D#190ptD.0
  # DEBUG D#189ptD.0 => D#191ptD.0
  # DEBUG __pD.63692 => _156
  # DEBUG thisD.63690 => D#188ptD.0
  # DEBUG D.63691 => D#189ptD.0
  # .MEM_386 = VDEF <.MEM_379>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZdlPvD.2766 (_156);
;;    succ:       55 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 55, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 54, next block 56, flags: (NEW, REACHABLE)
;;    pred:       53 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                54 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_289 = PHI <.MEM_379(53), .MEM_386(54)>
  # DEBUG D#198ptD.0 => &D.63788._M_dataplusD.11519
  # DEBUG thisD.63695 => D#198ptD.0
  # DEBUG thisD.63696 => D#198ptD.0
  # DEBUG thisD.63697 => D#198ptD.0
  # .MEM_391 = VDEF <.MEM_289>
  D.63788 ={v} {CLOBBER};
  [LP 27] resx 19
;;    succ:       56 (EH,EXECUTABLE)

;;   basic block 56, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 55, next block 57, flags: (NEW)
;;    pred:       55 (EH,EXECUTABLE)
<L54>: [LP 27]
  goto <bb 62> (<L38>);
;;    succ:       62 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 57, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 56, next block 58, flags: (NEW, REACHABLE)
;;    pred:       47 (EH,EXECUTABLE)
<L37>: [LP 11]
  # DEBUG thisD.63667 => &D.63787
  # DEBUG thisD.63668 => &D.63787
  # DEBUG thisD.63677 => &D.63787
  # VUSE <.MEM_355>
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 D.63787 } (nonlocal, escaped)
  _157 = MEM[(charD.10 * *)&D.63787];
  # DEBUG D#2ptD.0 => &D.63787
  # DEBUG thisD.52147 => D#2ptD.0
  # DEBUG thisD.63678 => &D.63787
  if (&D.63787.D.11539._M_local_bufD.11541 != _157)
    goto <bb 58>;
  else
    goto <bb 59>;
;;    succ:       58 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                59 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 58, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 57, next block 59, flags: (NEW, REACHABLE)
;;    pred:       57 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#197ptD.0 => D.63787.D.11539._M_allocated_capacityD.11542
  # DEBUG D#196ptD.0 => D#197ptD.0
  # DEBUG thisD.63670 => &D.63787
  # DEBUG __sizeD.63669 => D#196ptD.0
  # DEBUG D#195ptD.0 => D#196ptD.0
  # DEBUG D#2ptD.0 => &D.63787
  # DEBUG thisD.53364 => D#2ptD.0
  # DEBUG thisD.53365 => &D.63787
  # DEBUG D#194ptD.0 => &D.63787._M_dataplusD.11519
  # DEBUG D#192ptD.0 => D#194ptD.0
  # DEBUG D#193ptD.0 => D#195ptD.0 + 1
  # DEBUG __pD.63673 => _157
  # DEBUG __aD.63671 => D#192ptD.0
  # DEBUG __nD.63672 => D#193ptD.0
  # DEBUG D#191ptD.0 => D#193ptD.0
  # DEBUG D#190ptD.0 => D#192ptD.0
  # DEBUG D#188ptD.0 => D#190ptD.0
  # DEBUG D#189ptD.0 => D#191ptD.0
  # DEBUG __pD.63676 => _157
  # DEBUG thisD.63674 => D#188ptD.0
  # DEBUG D.63675 => D#189ptD.0
  # .MEM_362 = VDEF <.MEM_355>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZdlPvD.2766 (_157);
;;    succ:       59 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 59, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 58, next block 60, flags: (NEW, REACHABLE)
;;    pred:       57 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                58 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_290 = PHI <.MEM_355(57), .MEM_362(58)>
  # DEBUG D#198ptD.0 => &D.63787._M_dataplusD.11519
  # DEBUG thisD.63679 => D#198ptD.0
  # DEBUG thisD.63680 => D#198ptD.0
  # DEBUG thisD.63681 => D#198ptD.0
  # .MEM_367 = VDEF <.MEM_290>
  D.63787 ={v} {CLOBBER};
  [LP 28] resx 18
;;    succ:       60 (EH,EXECUTABLE)

;;   basic block 60, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 59, next block 61, flags: (NEW)
;;    pred:       59 (EH,EXECUTABLE)
<L55>: [LP 28]
  goto <bb 62> (<L38>);
;;    succ:       62 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 61, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 60, next block 62, flags: (NEW)
;;    pred:       31 (EH,EXECUTABLE)
<L51>: [LP 24]
;;    succ:       62 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 62, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 61, next block 63, flags: (NEW, REACHABLE)
;;    pred:       61 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                42 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                52 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                56 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                60 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                176 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                180 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_291 = PHI <.MEM_371(61), .MEM_347(42), .MEM_393(52), .MEM_391(56), .MEM_367(60), .MEM_392(176), .MEM_368(180)>
<L38>:
  # DEBUG thisD.63656 => &D.41207
  # DEBUG thisD.63657 => &D.41207
  # DEBUG thisD.56302 => &D.41207
  # VUSE <.MEM_291>
  # PT = nonlocal escaped { D.41207 } (escaped)
  _158 = MEM[(charD.10 * *)&D.41207];
  # DEBUG D#2ptD.0 => &D.41207
  # DEBUG thisD.52147 => D#2ptD.0
  # DEBUG thisD.56303 => &D.41207
  if (&D.41207.D.11539._M_local_bufD.11541 != _158)
    goto <bb 63>;
  else
    goto <bb 64>;
;;    succ:       63 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                64 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 63, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 62, next block 64, flags: (NEW, REACHABLE)
;;    pred:       62 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#197ptD.0 => D.41207.D.11539._M_allocated_capacityD.11542
  # DEBUG D#196ptD.0 => D#197ptD.0
  # DEBUG thisD.63659 => &D.41207
  # DEBUG __sizeD.63658 => D#196ptD.0
  # DEBUG D#195ptD.0 => D#196ptD.0
  # DEBUG D#2ptD.0 => &D.41207
  # DEBUG thisD.53364 => D#2ptD.0
  # DEBUG thisD.53365 => &D.41207
  # DEBUG D#194ptD.0 => &D.41207._M_dataplusD.11519
  # DEBUG D#192ptD.0 => D#194ptD.0
  # DEBUG D#193ptD.0 => D#195ptD.0 + 1
  # DEBUG __pD.63662 => _158
  # DEBUG __aD.63660 => D#192ptD.0
  # DEBUG __nD.63661 => D#193ptD.0
  # DEBUG D#191ptD.0 => D#193ptD.0
  # DEBUG D#190ptD.0 => D#192ptD.0
  # DEBUG D#188ptD.0 => D#190ptD.0
  # DEBUG D#189ptD.0 => D#191ptD.0
  # DEBUG __pD.63665 => _158
  # DEBUG thisD.63663 => D#188ptD.0
  # DEBUG D.63664 => D#189ptD.0
  # .MEM_396 = VDEF <.MEM_291>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZdlPvD.2766 (_158);
;;    succ:       64 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 64, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 63, next block 65, flags: (NEW, REACHABLE)
;;    pred:       62 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                63 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_292 = PHI <.MEM_291(62), .MEM_396(63)>
  # DEBUG D#198ptD.0 => &D.41207._M_dataplusD.11519
  # DEBUG thisD.56304 => D#198ptD.0
  # DEBUG thisD.56305 => D#198ptD.0
  # DEBUG thisD.56306 => D#198ptD.0
  [LP 29] resx 17
;;    succ:       65 (EH,EXECUTABLE)

;;   basic block 65, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 64, next block 66, flags: (NEW)
;;    pred:       64 (EH,EXECUTABLE)
<L56>: [LP 29]
  goto <bb 167> (<L28>);
;;    succ:       167 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 66, loop depth 1, count 0, freq 100, maybe hot
;;    prev block 65, next block 67, flags: (NEW, REACHABLE)
;;    pred:       50 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                39 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                51 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_293 = PHI <.MEM_361(50), .MEM_385(39), .MEM_393(51)>
  [LP 30] # .MEM_40 = VDEF <.MEM_293>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _41 = _ZNSolsEiD.21643 (os_1, input_264);
;;    succ:       161 (EH,EXECUTABLE)
;;                67 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 67, loop depth 1, count 0, freq 100, maybe hot
;;    prev block 66, next block 68, flags: (NEW, REACHABLE)
;;    pred:       66 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __outD.56322 => _41
  # DEBUG __sD.56323 => " -> [ "
  # DEBUG __sD.56324 => " -> [ "
  [LP 31] # .MEM_101 = VDEF <.MEM_40>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_41, " -> [ ", 6);
  goto <bb 69>;
;;    succ:       69 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                68 (EH,EXECUTABLE)

;;   basic block 68, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 67, next block 69, flags: (NEW)
;;    pred:       67 (EH,EXECUTABLE)
<L58>: [LP 31]
  goto <bb 162> (<L27>);
;;    succ:       162 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 69, loop depth 1, count 0, freq 100, maybe hot
;;    prev block 68, next block 70, flags: (NEW, REACHABLE)
;;    pred:       67 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __osD.56326 => _41
  # DEBUG __strD.56327 => &D.41207
  # VUSE <.MEM_101>
  _42 = MEM[(long unsigned intD.14 *)&D.41207 + 8B];
  # DEBUG D#1ptD.0 => &D.41207
  # DEBUG thisD.52181 => D#1ptD.0
  _86 = (long intD.12) _42;
  # DEBUG thisD.52178 => &D.41207
  # VUSE <.MEM_101>
  # PT = nonlocal escaped { D.41207 } (escaped)
  _87 = MEM[(charD.10 * *)&D.41207];
  # DEBUG D#2ptD.0 => &D.41207
  # DEBUG thisD.52085 => D#2ptD.0
  [LP 32] # .MEM_102 = VDEF <.MEM_101>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _88 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_41, _87, _86);
  goto <bb 71>;
;;    succ:       71 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                70 (EH,EXECUTABLE)

;;   basic block 70, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 69, next block 71, flags: (NEW)
;;    pred:       69 (EH,EXECUTABLE)
<L59>: [LP 32]
  goto <bb 162> (<L27>);
;;    succ:       162 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 71, loop depth 1, count 0, freq 100, maybe hot
;;    prev block 70, next block 72, flags: (NEW, REACHABLE)
;;    pred:       69 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __outD.63850 => _88
  # DEBUG __sD.63851 => "]  "
  # DEBUG __sD.63852 => "]  "
  [LP 3] # .MEM_394 = VDEF <.MEM_102>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_88, "]  ", 3);
  goto <bb 73>;
;;    succ:       73 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                72 (EH,EXECUTABLE)

;;   basic block 72, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 71, next block 73, flags: (NEW)
;;    pred:       71 (EH,EXECUTABLE)
<L60>: [LP 3]
  goto <bb 162> (<L27>);
;;    succ:       162 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 73, loop depth 1, count 0, freq 100, maybe hot
;;    prev block 72, next block 74, flags: (NEW, REACHABLE)
;;    pred:       71 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.56329 => &D.41207
  # DEBUG thisD.56330 => &D.41207
  # DEBUG thisD.56339 => &D.41207
  # VUSE <.MEM_394>
  # PT = nonlocal escaped { D.41207 } (escaped)
  _43 = MEM[(charD.10 * *)&D.41207];
  # DEBUG D#2ptD.0 => &D.41207
  # DEBUG thisD.52147 => D#2ptD.0
  # DEBUG thisD.56340 => &D.41207
  if (&D.41207.D.11539._M_local_bufD.11541 != _43)
    goto <bb 74>;
  else
    goto <bb 75>;
;;    succ:       74 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                75 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 74, loop depth 1, count 0, freq 70, maybe hot
;;    prev block 73, next block 75, flags: (NEW, REACHABLE)
;;    pred:       73 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#197ptD.0 => D.41207.D.11539._M_allocated_capacityD.11542
  # DEBUG D#196ptD.0 => D#197ptD.0
  # DEBUG thisD.56332 => &D.41207
  # DEBUG __sizeD.56331 => D#196ptD.0
  # DEBUG D#195ptD.0 => D#196ptD.0
  # DEBUG D#2ptD.0 => &D.41207
  # DEBUG thisD.53364 => D#2ptD.0
  # DEBUG thisD.53365 => &D.41207
  # DEBUG D#194ptD.0 => &D.41207._M_dataplusD.11519
  # DEBUG D#192ptD.0 => D#194ptD.0
  # DEBUG D#193ptD.0 => D#195ptD.0 + 1
  # DEBUG __pD.56335 => _43
  # DEBUG __aD.56333 => D#192ptD.0
  # DEBUG __nD.56334 => D#193ptD.0
  # DEBUG D#191ptD.0 => D#193ptD.0
  # DEBUG D#190ptD.0 => D#192ptD.0
  # DEBUG D#188ptD.0 => D#190ptD.0
  # DEBUG D#189ptD.0 => D#191ptD.0
  # DEBUG __pD.56338 => _43
  # DEBUG thisD.56336 => D#188ptD.0
  # DEBUG D.56337 => D#189ptD.0
  # .MEM_103 = VDEF <.MEM_394>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZdlPvD.2766 (_43);
;;    succ:       75 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 75, loop depth 1, count 0, freq 100, maybe hot
;;    prev block 74, next block 76, flags: (NEW, REACHABLE)
;;    pred:       73 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                74 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_73 = PHI <.MEM_394(73), .MEM_103(74)>
  # DEBUG D#198ptD.0 => &D.41207._M_dataplusD.11519
  # DEBUG thisD.56341 => D#198ptD.0
  # DEBUG thisD.56342 => D#198ptD.0
  # DEBUG thisD.56343 => D#198ptD.0
  # .MEM_45 = VDEF <.MEM_73>
  D.41207 ={v} {CLOBBER};
  # VUSE <.MEM_45>
  pretmp_540 = MEM[(const voidD.45 * *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEED.24385 + 8B];
  # VUSE <.MEM_45>
  pretmp_155 = MEM[(const voidD.45 * *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEED.24385 + 16B];
;;    succ:       76 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 76, loop depth 1, count 0, freq 200, maybe hot
;;    prev block 75, next block 77, flags: (NEW, REACHABLE)
;;    pred:       27 [49.0%]  (FALSE_VALUE,EXECUTABLE)
;;                75 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [2.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_13 = PHI <.MEM_12(27), .MEM_45(75), .MEM_339(9)>
  # PT = nonlocal escaped 
  # prephitmp_131 = PHI <prephitmp_201(27), pretmp_540(75), prephitmp_201(9)>
  # PT = nonlocal escaped 
  # prephitmp_38 = PHI <prephitmp_184(27), pretmp_155(75), prephitmp_184(9)>
  # DEBUG thisD.63854 => &ssD.41156
  # .MEM_397 = VDEF <.MEM_13>
  ssD.41156.D.24376._vptr.basic_ostreamD.21735 = &MEM[(voidD.45 *)&_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEED.24380 + 24B];
  # .MEM_398 = VDEF <.MEM_397>
  MEM[(struct basic_iosD.7355 *)&ssD.41156 + 112B].D.21051._vptr.ios_baseD.16027 = &MEM[(voidD.45 *)&_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEED.24380 + 64B];
  # DEBUG thisD.63858 => &ssD.41156._M_stringbufD.24319
  # .MEM_399 = VDEF <.MEM_398>
  MEM[(struct basic_stringbufD.7365 *)&ssD.41156 + 8B].D.24226._vptr.basic_streambufD.16823 = &MEM[(voidD.45 *)&_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEED.24230 + 16B];
  # DEBUG D#200ptD.0 => &MEM[(struct basic_stringbufD.7365 *)&ssD.41156 + 8B]._M_stringD.24149
  # DEBUG thisD.63859 => D#200ptD.0
  # DEBUG thisD.63860 => D#200ptD.0
  # DEBUG thisD.63869 => D#200ptD.0
  # VUSE <.MEM_399>
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 } (nonlocal, escaped)
  _48 = MEM[(charD.10 * *)&ssD.41156 + 80B];
  # DEBUG D#2ptD.0 => D#200ptD.0
  # DEBUG thisD.52147 => D#2ptD.0
  # DEBUG thisD.63870 => D#200ptD.0
  if (&MEM[(const struct basic_stringD.2844 *)&ssD.41156 + 80B].D.11539._M_local_bufD.11541 != _48)
    goto <bb 77>;
  else
    goto <bb 78>;
;;    succ:       77 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                78 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 77, loop depth 1, count 0, freq 157, maybe hot
;;    prev block 76, next block 78, flags: (NEW, REACHABLE)
;;    pred:       76 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#197ptD.0 => MEM[(struct basic_stringD.2844 *)D#200ptD.0].D.11539._M_allocated_capacityD.11542
  # DEBUG D#196ptD.0 => D#197ptD.0
  # DEBUG thisD.63862 => D#200ptD.0
  # DEBUG __sizeD.63861 => D#196ptD.0
  # DEBUG D#195ptD.0 => D#196ptD.0
  # DEBUG D#2ptD.0 => D#200ptD.0
  # DEBUG thisD.53364 => D#2ptD.0
  # DEBUG thisD.53365 => D#200ptD.0
  # DEBUG D#194ptD.0 => &MEM[(struct basic_stringD.2844 *)D#200ptD.0]._M_dataplusD.11519
  # DEBUG D#192ptD.0 => D#194ptD.0
  # DEBUG D#193ptD.0 => D#195ptD.0 + 1
  # DEBUG __pD.63865 => _48
  # DEBUG __aD.63863 => D#192ptD.0
  # DEBUG __nD.63864 => D#193ptD.0
  # DEBUG D#191ptD.0 => D#193ptD.0
  # DEBUG D#190ptD.0 => D#192ptD.0
  # DEBUG D#188ptD.0 => D#190ptD.0
  # DEBUG D#189ptD.0 => D#191ptD.0
  # DEBUG __pD.63868 => _48
  # DEBUG thisD.63866 => D#188ptD.0
  # DEBUG D.63867 => D#189ptD.0
  # .MEM_400 = VDEF <.MEM_399>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZdlPvD.2766 (_48);
;;    succ:       78 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 78, loop depth 1, count 0, freq 200, maybe hot
;;    prev block 77, next block 79, flags: (NEW, REACHABLE)
;;    pred:       76 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                77 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_294 = PHI <.MEM_399(76), .MEM_400(77)>
  # DEBUG D#198ptD.0 => &MEM[(struct basic_stringD.2844 *)D#200ptD.0]._M_dataplusD.11519
  # DEBUG thisD.63871 => D#198ptD.0
  # DEBUG thisD.63872 => D#198ptD.0
  # DEBUG thisD.63873 => D#198ptD.0
  # .MEM_404 = VDEF <.MEM_294>
  MEM[(struct  &)&ssD.41156 + 80] ={v} {CLOBBER};
  # DEBUG D#199ptD.0 => &MEM[(struct basic_stringbufD.7365 *)&ssD.41156 + 8B].D.24226
  # DEBUG thisD.63874 => D#199ptD.0
  # .MEM_405 = VDEF <.MEM_404>
  MEM[(struct basic_streambufD.7357 *)&ssD.41156 + 8B]._vptr.basic_streambufD.16823 = &MEM[(voidD.45 *)&_ZTVSt15basic_streambufIcSt11char_traitsIcEED.16832 + 16B];
  # .MEM_406 = VDEF <.MEM_405>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt6localeD1EvD.14562 (&MEM[(struct basic_streambufD.7357 *)&ssD.41156 + 8B]._M_buf_localeD.16675);
  # .MEM_408 = VDEF <.MEM_406>
  MEM[(struct  &)&ssD.41156 + 8] ={v} {CLOBBER};
  # DEBUG thisD.63857 => &ssD.41156.D.24376
  # DEBUG __vtt_parmD.63856 => &MEM[(voidD.45 *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEED.24385 + 8B]
  # VUSE <.MEM_408>
  _186 = MEM[(long intD.12 *)prephitmp_131 + -24B];
  # RANGE [0, 18446744073709551615]
  iftmp.64_187 = (sizetype) _186;
  # PT = { D.41156 } (escaped)
  _188 = &ssD.41156.D.24376 + iftmp.64_187;
  # .MEM_410 = VDEF <.MEM_408>
  _188->D.21051._vptr.ios_baseD.16027 = prephitmp_38;
  # .MEM_411 = VDEF <.MEM_410>
  MEM[(struct  &)&ssD.41156] ={v} {CLOBBER};
  # DEBUG D#204ptD.0 => &ssD.41156.D.24379
  # DEBUG thisD.63855 => D#204ptD.0
  # .MEM_412 = VDEF <.MEM_411>
  MEM[(struct basic_iosD.7355 *)&ssD.41156 + 112B].D.21051._vptr.ios_baseD.16027 = &MEM[(voidD.45 *)&_ZTVSt9basic_iosIcSt11char_traitsIcEED.21060 + 16B];
  # .MEM_413 = VDEF <.MEM_412>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt8ios_baseD2EvD.16024 (&MEM[(struct basic_iosD.7355 *)&ssD.41156 + 112B].D.21051);
  # .MEM_49 = VDEF <.MEM_413>
  ssD.41156 ={v} {CLOBBER};
  input_50 = input_264 + 1;
  # DEBUG inputD.41154 => input_50
  # DEBUG inputD.41154 => input_50
  # VUSE <.MEM_49>
  _26 = this_25(D)->D.36298._inputsD.34629;
  if (_26 <= input_50)
    goto <bb 5>;
  else
    goto <bb 79>;
;;    succ:       5 [2.0%]  (TRUE_VALUE,EXECUTABLE)
;;                79 [98.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 79, loop depth 1, count 0, freq 196, maybe hot
;;    prev block 78, next block 80, flags: (NEW)
;;    pred:       78 [98.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 80, loop depth 0, count 0, freq 4, maybe hot
;;    prev block 79, next block 81, flags: (NEW, REACHABLE)
;;    pred:       5 [2.0%]  (TRUE_VALUE,EXECUTABLE)
;;                153 [2.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_565 = PHI <.MEM_423(5), .MEM_76(153)>
  # DEBUG __outD.56382 => os_1
  # DEBUG __sD.56383 => "]."
  # DEBUG __sD.56384 => "]."
  # .MEM_127 = VDEF <.MEM_565>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (os_1, "].", 2);
  # DEBUG thisD.56379 => os_1
  # DEBUG __pfD.56380 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.21775
  # DEBUG __osD.64132 => os_1
  # VUSE <.MEM_127>
  # PT = nonlocal escaped 
  _257 = MEM[(struct basic_ostreamD.7361 *)os_1]._vptr.basic_ostreamD.21735;
  # VUSE <.MEM_127>
  _258 = MEM[(long intD.12 *)_257 + -24B];
  # RANGE [0, 18446744073709551615]
  _259 = (sizetype) _258;
  # PT = nonlocal { D.23717 } (nonlocal, escaped)
  _260 = os_1 + _259;
  # DEBUG thisD.64135 => _260
  # DEBUG __cD.64136 => 10
  # VUSE <.MEM_127>
  # PT = nonlocal escaped 
  _128 = MEM[(const struct basic_iosD.7355 *)_260]._M_ctypeD.20959;
  # DEBUG __fD.64137 => _128
  if (_128 == 0B)
    goto <bb 155>;
  else
    goto <bb 156>;
;;    succ:       155 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                156 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 81, loop depth 0, count 0, freq 4, maybe hot
;;    prev block 80, next block 82, flags: (NEW)
;;    pred:       5 [98.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_423>
  pretmp_261 = MEM[(const voidD.45 * *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEED.24385 + 8B];
  # VUSE <.MEM_423>
  pretmp_138 = MEM[(const voidD.45 * *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEED.24385 + 16B];
;;    succ:       82 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 82, loop depth 1, count 0, freq 198, maybe hot
;;    prev block 81, next block 83, flags: (NEW, REACHABLE)
;;    pred:       81 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                154 [100.0%]  (FALLTHRU,EXECUTABLE)
  # output_100 = PHI <0(81), output_77(154)>
  # .MEM_275 = PHI <.MEM_423(81), .MEM_76(154)>
  # PT = nonlocal escaped 
  # prephitmp_140 = PHI <pretmp_261(81), prephitmp_207(154)>
  # PT = nonlocal escaped 
  # prephitmp_65 = PHI <pretmp_138(81), prephitmp_248(154)>
  # DEBUG outputD.41208 => output_100
  # DEBUG printD.41209 => 0
  # DEBUG thisD.63879 => &ssD.41210
  # DEBUG __modeD.63880 => 16
  # DEBUG D#203ptD.0 => &ssD.41210.D.24379
  # DEBUG thisD.63900 => D#203ptD.0
  # .MEM_425 = VDEF <.MEM_275>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt8ios_baseC2EvD.16016 (&MEM[(struct basic_iosD.7355 *)&ssD.41210 + 112B].D.21051);
  # .MEM_426 = VDEF <.MEM_425>
  MEM[(struct basic_iosD.7355 *)&ssD.41210 + 112B].D.21051._vptr.ios_baseD.16027 = &MEM[(voidD.45 *)&_ZTVSt9basic_iosIcSt11char_traitsIcEED.21060 + 16B];
  # .MEM_427 = VDEF <.MEM_426>
  MEM[(struct basic_iosD.7355 *)&ssD.41210 + 112B]._M_tieD.20955 = 0B;
  # .MEM_428 = VDEF <.MEM_427>
  MEM[(struct basic_iosD.7355 *)&ssD.41210 + 112B]._M_fillD.20956 = 0;
  # .MEM_429 = VDEF <.MEM_428>
  MEM[(struct basic_iosD.7355 *)&ssD.41210 + 112B]._M_fill_initD.20957 = 0;
  # .MEM_430 = VDEF <.MEM_429>
  MEM[(struct basic_iosD.7355 *)&ssD.41210 + 112B]._M_streambufD.20958 = 0B;
  # .MEM_431 = VDEF <.MEM_430>
  MEM[(struct basic_iosD.7355 *)&ssD.41210 + 112B]._M_ctypeD.20959 = 0B;
  # .MEM_432 = VDEF <.MEM_431>
  MEM[(struct basic_iosD.7355 *)&ssD.41210 + 112B]._M_num_putD.20960 = 0B;
  # .MEM_433 = VDEF <.MEM_432>
  MEM[(struct basic_iosD.7355 *)&ssD.41210 + 112B]._M_num_getD.20961 = 0B;
  # DEBUG thisD.63902 => &ssD.41210.D.24376
  # DEBUG __vtt_parmD.63901 => &MEM[(voidD.45 *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEED.24385 + 8B]
  # .MEM_434 = VDEF <.MEM_433>
  MEM[(struct basic_ostreamD.7361 *)&ssD.41210]._vptr.basic_ostreamD.21735 = prephitmp_140;
  # VUSE <.MEM_434>
  _197 = MEM[(long intD.12 *)prephitmp_140 + -24B];
  # RANGE [0, 18446744073709551615]
  iftmp.58_198 = (sizetype) _197;
  # PT = { D.41210 } (escaped)
  _199 = &ssD.41210.D.24376 + iftmp.58_198;
  # .MEM_435 = VDEF <.MEM_434>
  _199->D.21051._vptr.ios_baseD.16027 = prephitmp_65;
  [LP 33] # .MEM_436 = VDEF <.MEM_435>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_ED.21026 (_199, 0B);
;;    succ:       83 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                88 (EH,EXECUTABLE)

;;   basic block 83, loop depth 1, count 0, freq 198, maybe hot
;;    prev block 82, next block 84, flags: (NEW, REACHABLE)
;;    pred:       82 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_437 = VDEF <.MEM_436>
  ssD.41210.D.24376._vptr.basic_ostreamD.21735 = &MEM[(voidD.45 *)&_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEED.24380 + 24B];
  # .MEM_438 = VDEF <.MEM_437>
  MEM[(struct basic_iosD.7355 *)&ssD.41210 + 112B].D.21051._vptr.ios_baseD.16027 = &MEM[(voidD.45 *)&_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEED.24380 + 64B];
  # DEBUG __aD.63885 => 16
  # DEBUG __bD.63884 => 16
  # DEBUG D#201ptD.0 => &ssD.41210._M_stringbufD.24319
  # DEBUG thisD.63887 => D#201ptD.0
  # DEBUG __modeD.63886 => NULL
  # DEBUG D#187ptD.0 => &MEM[(struct basic_stringbufD.7365 *)D#201ptD.0].D.24226
  # DEBUG thisD.63888 => D#187ptD.0
  # .MEM_439 = VDEF <.MEM_438>
  MEM[(struct basic_streambufD.7357 *)&ssD.41210 + 8B]._vptr.basic_streambufD.16823 = &MEM[(voidD.45 *)&_ZTVSt15basic_streambufIcSt11char_traitsIcEED.16832 + 16B];
  # .MEM_440 = VDEF <.MEM_439>
  MEM[(struct basic_streambufD.7357 *)&ssD.41210 + 8B]._M_in_begD.16669 = 0B;
  # .MEM_441 = VDEF <.MEM_440>
  MEM[(struct basic_streambufD.7357 *)&ssD.41210 + 8B]._M_in_curD.16670 = 0B;
  # .MEM_442 = VDEF <.MEM_441>
  MEM[(struct basic_streambufD.7357 *)&ssD.41210 + 8B]._M_in_endD.16671 = 0B;
  # .MEM_443 = VDEF <.MEM_442>
  MEM[(struct basic_streambufD.7357 *)&ssD.41210 + 8B]._M_out_begD.16672 = 0B;
  # .MEM_444 = VDEF <.MEM_443>
  MEM[(struct basic_streambufD.7357 *)&ssD.41210 + 8B]._M_out_curD.16673 = 0B;
  # .MEM_445 = VDEF <.MEM_444>
  MEM[(struct basic_streambufD.7357 *)&ssD.41210 + 8B]._M_out_endD.16674 = 0B;
  # .MEM_446 = VDEF <.MEM_445>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt6localeC1EvD.14558 (&MEM[(struct basic_streambufD.7357 *)&ssD.41210 + 8B]._M_buf_localeD.16675);
  # .MEM_447 = VDEF <.MEM_446>
  MEM[(struct basic_stringbufD.7365 *)&ssD.41210 + 8B].D.24226._vptr.basic_streambufD.16823 = &MEM[(voidD.45 *)&_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEED.24230 + 16B];
  # .MEM_448 = VDEF <.MEM_447>
  MEM[(struct basic_stringbufD.7365 *)&ssD.41210 + 8B]._M_modeD.24148 = 16;
  # DEBUG D#186ptD.0 => &MEM[(struct basic_stringbufD.7365 *)D#201ptD.0]._M_stringD.24149
  # DEBUG thisD.63889 => D#186ptD.0
  # DEBUG thisD.53310 => D#99ptD.0
  # DEBUG D#98ptD.0 => D#99ptD.0
  # DEBUG thisD.52663 => D#98ptD.0
  # DEBUG thisD.63890 => D#186ptD.0
  # DEBUG D#185ptD.0 => &MEM[(struct basic_stringD.2844 *)D#186ptD.0]._M_dataplusD.11519
  # DEBUG thisD.63893 => D#185ptD.0
  # DEBUG __datD.63892 => &MEM[(struct basic_stringD.2844 *)&ssD.41210 + 80B].D.11539._M_local_bufD.11541
  # DEBUG __aD.63891 => D#184ptD.0
  # DEBUG D#183ptD.0 => D#184ptD.0
  # DEBUG D#181ptD.0 => D#185ptD.0
  # DEBUG D#182ptD.0 => D#183ptD.0
  # DEBUG thisD.53290 => D#181ptD.0
  # DEBUG __aD.53291 => D#182ptD.0
  # DEBUG D#180ptD.0 => D#182ptD.0
  # DEBUG D#179ptD.0 => D#181ptD.0
  # DEBUG thisD.53272 => D#179ptD.0
  # DEBUG D.53273 => D#180ptD.0
  # .MEM_449 = VDEF <.MEM_448>
  MEM[(struct _Alloc_hiderD.11518 *)&ssD.41210 + 80B]._M_pD.11525 = &MEM[(struct basic_stringD.2844 *)&ssD.41210 + 80B].D.11539._M_local_bufD.11541;
  # DEBUG thisD.53315 => NULL
  # DEBUG thisD.53301 => NULL
  # DEBUG thisD.63895 => D#186ptD.0
  # DEBUG __nD.63894 => 0
  # DEBUG D#8ptD.0 => D#186ptD.0
  # DEBUG __lengthD.63897 => 0
  # DEBUG thisD.63896 => D#8ptD.0
  # .MEM_450 = VDEF <.MEM_449>
  MEM[(size_typeD.11502 *)&ssD.41210 + 88B] = 0;
  # DEBUG D#2ptD.0 => D#186ptD.0
  # DEBUG thisD.52222 => D#2ptD.0
  # DEBUG __c1D.63899 => &MEM[(struct basic_stringD.2844 *)&ssD.41210 + 80B].D.11539._M_local_bufD.11541
  # DEBUG __c2D.63898 => D#23ptD.0
  # .MEM_451 = VDEF <.MEM_450>
  MEM[(char_typeD.6439 &)&ssD.41210 + 96] = 0;
  [LP 15] # .MEM_452 = VDEF <.MEM_451>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt9basic_iosIcSt11char_traitsIcEE4initEPSt15basic_streambufIcS1_ED.21026 (&MEM[(voidD.45 *)&ssD.41210 + 112B], &ssD.41210._M_stringbufD.24319.D.24226);
;;    succ:       84 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                85 (EH,EXECUTABLE)

;;   basic block 84, loop depth 1, count 0, freq 198, maybe hot
;;    prev block 83, next block 85, flags: (NEW, REACHABLE)
;;    pred:       83 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG inputD.41211 => 0
  # DEBUG printD.41209 => 0
  # VUSE <.MEM_452>
  _308 = this_25(D)->D.36298._inputsD.34629;
  if (_308 <= 0)
    goto <bb 151>;
  else
    goto <bb 90>;
;;    succ:       151 [2.0%]  (TRUE_VALUE,EXECUTABLE)
;;                90 [98.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 85, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 84, next block 86, flags: (NEW, REACHABLE)
;;    pred:       83 (EH,EXECUTABLE)
  # PT = nonlocal escaped 
  # prephitmp_564 = PHI <prephitmp_65(83)>
  # PT = nonlocal escaped 
  # prephitmp_562 = PHI <prephitmp_140(83)>
<L39>: [LP 15]
  # .MEM_529 = VDEF <.MEM_452>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEED1EvD.24206 (&ssD.41210._M_stringbufD.24319);
  [LP 14] resx 22
;;    succ:       86 (EH,EXECUTABLE)

;;   basic block 86, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 85, next block 87, flags: (NEW, REACHABLE)
;;    pred:       85 (EH,EXECUTABLE)
<L40>: [LP 14]
  # DEBUG thisD.63883 => &ssD.41210.D.24376
  # DEBUG __vtt_parmD.63882 => &MEM[(voidD.45 *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEED.24385 + 8B]
  # VUSE <.MEM_529>
  _209 = MEM[(long intD.12 *)prephitmp_562 + -24B];
  # RANGE [0, 18446744073709551615]
  iftmp.64_210 = (sizetype) _209;
  # PT = { D.41210 } (escaped)
  _211 = &ssD.41210.D.24376 + iftmp.64_210;
  # .MEM_531 = VDEF <.MEM_529>
  _211->D.21051._vptr.ios_baseD.16027 = prephitmp_564;
  # .MEM_532 = VDEF <.MEM_531>
  MEM[(struct  &)&ssD.41210] ={v} {CLOBBER};
  [LP 13] resx 21
;;    succ:       87 (EH,EXECUTABLE)

;;   basic block 87, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 86, next block 88, flags: (NEW)
;;    pred:       86 (EH,EXECUTABLE)
<L62>: [LP 13]
  goto <bb 89> (<L41>);
;;    succ:       89 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 88, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 87, next block 89, flags: (NEW)
;;    pred:       82 (EH,EXECUTABLE)
<L61>: [LP 33]
;;    succ:       89 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 89, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 88, next block 90, flags: (NEW, REACHABLE)
;;    pred:       88 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                87 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_295 = PHI <.MEM_436(88), .MEM_532(87)>
<L41>:
  # DEBUG D#202ptD.0 => &ssD.41210.D.24379
  # DEBUG thisD.63881 => D#202ptD.0
  # .MEM_533 = VDEF <.MEM_295>
  MEM[(struct basic_iosD.7355 *)&ssD.41210 + 112B].D.21051._vptr.ios_baseD.16027 = &MEM[(voidD.45 *)&_ZTVSt9basic_iosIcSt11char_traitsIcEED.21060 + 16B];
  [MNT 23] # .MEM_534 = VDEF <.MEM_533>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt8ios_baseD2EvD.16024 (&MEM[(struct basic_iosD.7355 *)&ssD.41210 + 112B].D.21051);
  resx 20
;;    succ:      

;;   basic block 90, loop depth 1, count 0, freq 194, maybe hot
;;    prev block 89, next block 91, flags: (NEW)
;;    pred:       84 [98.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_254 = (long unsigned intD.14) output_100;
  pretmp_144 = pretmp_254 * 16;
;;    succ:       91 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 91, loop depth 2, count 0, freq 9711, maybe hot
;;    prev block 90, next block 92, flags: (NEW, REACHABLE)
;;    pred:       90 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                101 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 1]
  # print_545 = PHI <0(90), print_8(101)>
  # input_281 = PHI <0(90), input_66(101)>
  # .MEM_543 = PHI <.MEM_452(90), .MEM_16(101)>
  # prephitmp_190 = PHI <_308(90), prephitmp_576(101)>
  # DEBUG inputD.41211 => input_281
  # DEBUG printD.41209 => print_545
  # RANGE [0, 18446744073709551615]
  _57 = (long unsigned intD.14) input_281;
  # DEBUG D#480ptD.0 => &this_25(D)->_requestD.36229
  # VUSE <.MEM_543>
  # PT = nonlocal escaped 
  _81 = MEM[(struct vectorD.35482 * *)this_25(D) + 160B];
  # DEBUG D#63ptD.0 => D#480ptD.0
  # DEBUG __nD.56349 => _57
  # DEBUG thisD.56350 => D#63ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _91 = _57 * 24;
  # PT = nonlocal escaped 
  _92 = _81 + _91;
  # VUSE <.MEM_543>
  # PT = nonlocal escaped 
  _83 = MEM[(struct sRequestD.35378 * *)_92];
  # DEBUG __nD.56345 => (long unsigned intD.14) output_100
  # DEBUG thisD.56346 => D#64ptD.0
  # PT = nonlocal escaped 
  _90 = _83 + pretmp_144;
  # DEBUG reqD.41212 => NULL
  # VUSE <.MEM_543>
  _59 = _90->labelD.35381;
  if (_59 >= 0)
    goto <bb 92>;
  else
    goto <bb 100>;
;;    succ:       92 [52.5%]  (TRUE_VALUE,EXECUTABLE)
;;                100 [47.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 92, loop depth 2, count 0, freq 5096, maybe hot
;;    prev block 91, next block 93, flags: (NEW, REACHABLE)
;;    pred:       91 [52.5%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG printD.41209 => 1
  # VUSE <.MEM_543>
  _60 = _90->out_priD.35383;
  [LP 34] # .MEM_61 = VDEF <.MEM_543>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _62 = _ZNSolsEiD.21643 (&ssD.41210.D.24376, input_281);
;;    succ:       173 (EH,EXECUTABLE)
;;                93 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 93, loop depth 2, count 0, freq 5096, maybe hot
;;    prev block 92, next block 94, flags: (NEW, REACHABLE)
;;    pred:       92 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __outD.56352 => _62
  # DEBUG __sD.56353 => "@"
  # DEBUG __sD.56354 => "@"
  [LP 35] # .MEM_113 = VDEF <.MEM_61>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_62, "@", 1);
  goto <bb 95>;
;;    succ:       95 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                94 (EH,EXECUTABLE)

;;   basic block 94, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 93, next block 95, flags: (NEW)
;;    pred:       93 (EH,EXECUTABLE)
<L64>: [LP 35]
  goto <bb 174> (<L31>);
;;    succ:       174 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 95, loop depth 2, count 0, freq 5096, maybe hot
;;    prev block 94, next block 96, flags: (NEW, REACHABLE)
;;    pred:       93 [100.0%]  (FALLTHRU,EXECUTABLE)
  [LP 36] # .MEM_63 = VDEF <.MEM_113>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _64 = _ZNSolsEiD.21643 (_62, _60);
  goto <bb 97>;
;;    succ:       96 (EH,EXECUTABLE)
;;                97 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 96, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 95, next block 97, flags: (NEW)
;;    pred:       95 (EH,EXECUTABLE)
<L65>: [LP 36]
  goto <bb 174> (<L31>);
;;    succ:       174 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 97, loop depth 2, count 0, freq 5096, maybe hot
;;    prev block 96, next block 98, flags: (NEW, REACHABLE)
;;    pred:       95 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __outD.63906 => _64
  # DEBUG __sD.63907 => " "
  # DEBUG __sD.63908 => " "
  [LP 37] # .MEM_453 = VDEF <.MEM_63>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_64, " ", 1);
  goto <bb 99>;
;;    succ:       99 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                98 (EH,EXECUTABLE)

;;   basic block 98, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 97, next block 99, flags: (NEW)
;;    pred:       97 (EH,EXECUTABLE)
<L66>: [LP 37]
  goto <bb 174> (<L31>);
;;    succ:       174 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 99, loop depth 2, count 0, freq 5096, maybe hot
;;    prev block 98, next block 100, flags: (NEW)
;;    pred:       97 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_453>
  pretmp_575 = this_25(D)->D.36298._inputsD.34629;
;;    succ:       100 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 100, loop depth 2, count 0, freq 9711, maybe hot
;;    prev block 99, next block 101, flags: (NEW, REACHABLE)
;;    pred:       91 [47.5%]  (FALSE_VALUE,EXECUTABLE)
;;                99 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 1]
  # print_8 = PHI <print_545(91), 1(99)>
  # .MEM_16 = PHI <.MEM_543(91), .MEM_453(99)>
  # prephitmp_576 = PHI <prephitmp_190(91), pretmp_575(99)>
  # DEBUG printD.41209 => print_8
  input_66 = input_281 + 1;
  # DEBUG inputD.41211 => input_66
  # DEBUG inputD.41211 => input_66
  # DEBUG printD.41209 => print_8
  if (input_66 >= prephitmp_576)
    goto <bb 102>;
  else
    goto <bb 101>;
;;    succ:       102 [2.0%]  (TRUE_VALUE,EXECUTABLE)
;;                101 [98.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 101, loop depth 2, count 0, freq 9517, maybe hot
;;    prev block 100, next block 102, flags: (NEW)
;;    pred:       100 [98.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 91>;
;;    succ:       91 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 102, loop depth 1, count 0, freq 194, maybe hot
;;    prev block 101, next block 103, flags: (NEW, REACHABLE)
;;    pred:       100 [2.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1]
  # print_546 = PHI <print_8(100)>
  if (print_546 != 0)
    goto <bb 103>;
  else
    goto <bb 151>;
;;    succ:       103 [51.0%]  (TRUE_VALUE,EXECUTABLE)
;;                151 [49.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 103, loop depth 1, count 0, freq 99, maybe hot
;;    prev block 102, next block 104, flags: (NEW, REACHABLE)
;;    pred:       102 [51.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.56356 => &ssD.41210
  # DEBUG thisD.63910 => &ssD.41210._M_stringbufD.24319
  # DEBUG thisD.64033 => &D.41213
  # DEBUG thisD.56143 => D#99ptD.0
  # DEBUG D#98ptD.0 => D#99ptD.0
  # DEBUG thisD.52663 => D#98ptD.0
  # DEBUG thisD.64034 => &D.41213
  # DEBUG D#185ptD.0 => &D.41213._M_dataplusD.11519
  # DEBUG thisD.64037 => D#185ptD.0
  # DEBUG __datD.64036 => &D.41213.D.11539._M_local_bufD.11541
  # DEBUG __aD.64035 => D#184ptD.0
  # DEBUG D#183ptD.0 => D#184ptD.0
  # DEBUG D#181ptD.0 => D#185ptD.0
  # DEBUG D#182ptD.0 => D#183ptD.0
  # DEBUG thisD.53290 => D#181ptD.0
  # DEBUG __aD.53291 => D#182ptD.0
  # DEBUG D#180ptD.0 => D#182ptD.0
  # DEBUG D#179ptD.0 => D#181ptD.0
  # DEBUG thisD.53272 => D#179ptD.0
  # DEBUG D.53273 => D#180ptD.0
  # .MEM_455 = VDEF <.MEM_16>
  MEM[(struct _Alloc_hiderD.11518 *)&D.41213]._M_pD.11525 = &D.41213.D.11539._M_local_bufD.11541;
  # DEBUG thisD.56148 => NULL
  # DEBUG thisD.53301 => NULL
  # DEBUG thisD.64039 => &D.41213
  # DEBUG __nD.64038 => 0
  # DEBUG D#8ptD.0 => &D.41213
  # DEBUG __lengthD.64041 => 0
  # DEBUG thisD.64040 => D#8ptD.0
  # .MEM_456 = VDEF <.MEM_455>
  MEM[(size_typeD.11502 *)&D.41213 + 8B] = 0;
  # DEBUG D#2ptD.0 => &D.41213
  # DEBUG thisD.52222 => D#2ptD.0
  # DEBUG __c1D.64043 => &D.41213.D.11539._M_local_bufD.11541
  # DEBUG __c2D.64042 => D#23ptD.0
  # .MEM_457 = VDEF <.MEM_456>
  MEM[(char_typeD.6439 &)&D.41213 + 16] = 0;
  # DEBUG D#472ptD.0 => &MEM[(const struct basic_stringbufD.7365 *)&ssD.41210 + 8B].D.24226
  # VUSE <.MEM_457>
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 } (nonlocal, escaped)
  _213 = MEM[(char_typeD.16540 * *)&ssD.41210 + 48B];
  # DEBUG D#5ptD.0 => D#472ptD.0
  # DEBUG thisD.56140 => D#5ptD.0
  if (_213 != 0B)
    goto <bb 104>;
  else
    goto <bb 126>;
;;    succ:       104 [93.3%]  (TRUE_VALUE,EXECUTABLE)
;;                126 [6.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 104, loop depth 1, count 0, freq 92, maybe hot
;;    prev block 103, next block 105, flags: (NEW, REACHABLE)
;;    pred:       103 [93.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#473ptD.0 => &MEM[(const struct basic_stringbufD.7365 *)&ssD.41210 + 8B].D.24226
  # DEBUG D#5ptD.0 => D#473ptD.0
  # DEBUG thisD.56159 => D#5ptD.0
  # DEBUG D#474ptD.0 => &MEM[(const struct basic_stringbufD.7365 *)&ssD.41210 + 8B].D.24226
  # VUSE <.MEM_457>
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 } (nonlocal, escaped)
  _214 = MEM[(char_typeD.16540 * *)&ssD.41210 + 32B];
  # DEBUG D#6ptD.0 => D#474ptD.0
  # DEBUG thisD.56156 => D#6ptD.0
  if (_213 > _214)
    goto <bb 105>;
  else
    goto <bb 115>;
;;    succ:       105 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                115 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 105, loop depth 1, count 0, freq 46, maybe hot
;;    prev block 104, next block 106, flags: (NEW, REACHABLE)
;;    pred:       104 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.64016 => D#99ptD.0
  # DEBUG D#98ptD.0 => D#99ptD.0
  # DEBUG thisD.52663 => D#98ptD.0
  # DEBUG D#477ptD.0 => &MEM[(const struct basic_stringbufD.7365 *)&ssD.41210 + 8B].D.24226
  # DEBUG D#5ptD.0 => D#477ptD.0
  # DEBUG thisD.56182 => D#5ptD.0
  # DEBUG D#478ptD.0 => &MEM[(const struct basic_stringbufD.7365 *)&ssD.41210 + 8B].D.24226
  # VUSE <.MEM_457>
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 } (nonlocal, escaped)
  _215 = MEM[(char_typeD.16540 * *)&ssD.41210 + 40B];
  # DEBUG D#7ptD.0 => D#478ptD.0
  # DEBUG thisD.56179 => D#7ptD.0
  # DEBUG thisD.64020 => &D.64045
  # DEBUG __begD.64019 => _215
  # DEBUG __endD.64018 => _213
  # DEBUG __aD.64017 => NULL
  # DEBUG thisD.64021 => &D.64045
  # DEBUG D#470ptD.0 => &D.64045._M_dataplusD.11519
  # DEBUG thisD.64024 => D#470ptD.0
  # DEBUG __datD.64023 => &D.64045.D.11539._M_local_bufD.11541
  # DEBUG __aD.64022 => D#184ptD.0
  # DEBUG D#183ptD.0 => D#184ptD.0
  # DEBUG D#181ptD.0 => D#470ptD.0
  # DEBUG D#182ptD.0 => D#183ptD.0
  # DEBUG thisD.53290 => D#181ptD.0
  # DEBUG __aD.53291 => D#182ptD.0
  # DEBUG D#180ptD.0 => D#182ptD.0
  # DEBUG D#179ptD.0 => D#181ptD.0
  # DEBUG thisD.53272 => D#179ptD.0
  # DEBUG D.53273 => D#180ptD.0
  # .MEM_482 = VDEF <.MEM_457>
  MEM[(struct _Alloc_hiderD.11518 *)&D.64045]._M_pD.11525 = &D.64045.D.11539._M_local_bufD.11541;
  # DEBUG thisD.64027 => &D.64045
  # DEBUG __begD.64026 => _215
  # DEBUG __endD.64025 => _213
  # DEBUG thisD.64031 => &D.64045
  # DEBUG __begD.64030 => _215
  # DEBUG __endD.64029 => _213
  # DEBUG thisD.64049 => &D.64045
  # DEBUG __begD.64050 => _215
  # DEBUG __endD.64051 => _213
  # DEBUG __ptrD.56096 => _215
  if (_215 == 0B)
    goto <bb 181>;
  else
    goto <bb 183>;
;;    succ:       181 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                183 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 106, loop depth 1, count 0, freq 13, maybe hot
;;    prev block 105, next block 107, flags: (NEW, REACHABLE)
;;    pred:       183 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  [LP 38] # .MEM_484 = VDEF <.MEM_483>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _227 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.11563 (&D.64045, &__dnewD.64052, 0);
;;    succ:       107 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                136 (EH,EXECUTABLE)

;;   basic block 107, loop depth 1, count 0, freq 13, maybe hot
;;    prev block 106, next block 108, flags: (NEW, REACHABLE)
;;    pred:       106 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#9ptD.0 => &D.64045
  # DEBUG __pD.64071 => _227
  # DEBUG thisD.64070 => D#9ptD.0
  # .MEM_485 = VDEF <.MEM_484>
  MEM[(charD.10 * *)&D.64045] = _227;
  # VUSE <.MEM_485>
  __dnew.71_228 = __dnewD.64052;
  # DEBUG D#10ptD.0 => &D.64045
  # DEBUG __capacityD.64073 => __dnew.71_228
  # DEBUG thisD.64072 => D#10ptD.0
  # .MEM_486 = VDEF <.MEM_485>
  MEM[(size_typeD.11502 *)&D.64045 + 16B] = __dnew.71_228;
  # DEBUG D#2ptD.0 => &D.64045
  # DEBUG thisD.56070 => D#2ptD.0
  # DEBUG __pD.64055 => _227
  # DEBUG __k1D.64054 => _215
  # DEBUG __k2D.64053 => _213
  # DEBUG __dD.64058 => _227
  # DEBUG __sD.64057 => _215
  # DEBUG __nD.64056 => __dnew.70_226
  goto <bb 110>;
;;    succ:       110 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 108, loop depth 1, count 0, freq 33, maybe hot
;;    prev block 107, next block 109, flags: (NEW, REACHABLE)
;;    pred:       183 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#2ptD.0 => &D.64045
  # DEBUG thisD.56070 => D#2ptD.0
  # DEBUG __pD.64055 => &D.64045.D.11539._M_local_bufD.11541
  # DEBUG __k1D.64054 => _215
  # DEBUG __k2D.64053 => _213
  # DEBUG __dD.64058 => &D.64045.D.11539._M_local_bufD.11541
  # DEBUG __sD.64057 => _215
  # DEBUG __nD.64056 => __dnew.70_226
  if (__dnew.70_226 == 1)
    goto <bb 109>;
  else
    goto <bb 110>;
;;    succ:       109 [52.8%]  (TRUE_VALUE,EXECUTABLE)
;;                110 [47.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 109, loop depth 1, count 0, freq 17, maybe hot
;;    prev block 108, next block 110, flags: (NEW, REACHABLE)
;;    pred:       108 [52.8%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_483>
  _230 = MEM[(const char_typeD.6439 &)_215];
  # DEBUG D#23ptD.0 => _215
  # DEBUG __c1D.64063 => &D.64045.D.11539._M_local_bufD.11541
  # DEBUG __c2D.64062 => D#23ptD.0
  # .MEM_487 = VDEF <.MEM_483>
  MEM[(char_typeD.6439 &)&D.64045 + 16] = _230;
  goto <bb 111>;
;;    succ:       111 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 110, loop depth 1, count 0, freq 29, maybe hot
;;    prev block 109, next block 111, flags: (NEW, REACHABLE)
;;    pred:       108 [47.2%]  (FALSE_VALUE,EXECUTABLE)
;;                107 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 D.64045 } (nonlocal, escaped)
  # _552 = PHI <&D.64045.D.11539._M_local_bufD.11541(108), _227(107)>
  # .MEM_558 = PHI <.MEM_483(108), .MEM_486(107)>
  # DEBUG D#2ptD.0 => &D.64045
  # DEBUG thisD.56070 => D#2ptD.0
  # DEBUG __pD.64055 => _552
  # DEBUG __k1D.64054 => _215
  # DEBUG __k2D.64053 => _213
  # DEBUG __dD.64058 => _552
  # DEBUG __sD.64057 => _215
  # DEBUG __nD.64056 => __dnew.70_226
  # DEBUG __s1D.64061 => _552
  # DEBUG __s2D.64060 => _215
  # DEBUG __nD.64059 => __dnew.70_226
  # .MEM_488 = VDEF <.MEM_558>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  memcpyD.992 (_552, _215, __dnew.70_226);
  # VUSE <.MEM_488>
  pretmp_52 = __dnewD.64052;
  # VUSE <.MEM_488>
  pretmp_194 = MEM[(charD.10 * *)&D.64045];
;;    succ:       111 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 111, loop depth 1, count 0, freq 46, maybe hot
;;    prev block 110, next block 112, flags: (NEW, REACHABLE)
;;    pred:       109 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                110 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_297 = PHI <.MEM_487(109), .MEM_488(110)>
  # prephitmp_183 = PHI <__dnew.70_226(109), pretmp_52(110)>
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 D.64045 } (nonlocal, escaped)
  # prephitmp_182 = PHI <&D.64045.D.11539._M_local_bufD.11541(109), pretmp_194(110)>
  # DEBUG D#895ptD.0 => __dnewD.64052
  # DEBUG thisD.64065 => &D.64045
  # DEBUG __nD.64064 => D#895ptD.0
  # DEBUG D#8ptD.0 => &D.64045
  # DEBUG __lengthD.64067 => D#895ptD.0
  # DEBUG thisD.64066 => D#8ptD.0
  # .MEM_489 = VDEF <.MEM_297>
  MEM[(size_typeD.11502 *)&D.64045 + 8B] = prephitmp_183;
  # DEBUG D#2ptD.0 => &D.64045
  # DEBUG thisD.52222 => D#2ptD.0
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 D.64045 } (nonlocal, escaped)
  _233 = prephitmp_182 + prephitmp_183;
  # DEBUG __c1D.64069 => _233
  # DEBUG __c2D.64068 => D#23ptD.0
  # .MEM_490 = VDEF <.MEM_489>
  MEM[(char_typeD.6439 &)_233] = 0;
  # .MEM_491 = VDEF <.MEM_490>
  __dnewD.64052 ={v} {CLOBBER};
  # DEBUG thisD.64013 => &D.41213
  # DEBUG __strD.64012 => &D.64045
  # DEBUG thisD.64015 => &D.41213
  # DEBUG __strD.64014 => &D.64045
  [LP 18] # .MEM_492 = VDEF <.MEM_491>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_D.11707 (&D.41213, &D.64045);
;;    succ:       112 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                128 (EH,EXECUTABLE)

;;   basic block 112, loop depth 1, count 0, freq 46, maybe hot
;;    prev block 111, next block 113, flags: (NEW, REACHABLE)
;;    pred:       111 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.63996 => &D.64045
  # DEBUG thisD.63997 => &D.64045
  # DEBUG thisD.64006 => &D.64045
  # VUSE <.MEM_492>
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 D.64045 } (nonlocal, escaped)
  _216 = MEM[(charD.10 * *)&D.64045];
  # DEBUG D#2ptD.0 => &D.64045
  # DEBUG thisD.52147 => D#2ptD.0
  # DEBUG thisD.64007 => &D.64045
  if (&D.64045.D.11539._M_local_bufD.11541 != _216)
    goto <bb 113>;
  else
    goto <bb 114>;
;;    succ:       113 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                114 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 113, loop depth 1, count 0, freq 36, maybe hot
;;    prev block 112, next block 114, flags: (NEW, REACHABLE)
;;    pred:       112 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#197ptD.0 => D.64045.D.11539._M_allocated_capacityD.11542
  # DEBUG D#196ptD.0 => D#197ptD.0
  # DEBUG thisD.63999 => &D.64045
  # DEBUG __sizeD.63998 => D#196ptD.0
  # DEBUG D#195ptD.0 => D#196ptD.0
  # DEBUG D#2ptD.0 => &D.64045
  # DEBUG thisD.53364 => D#2ptD.0
  # DEBUG thisD.53365 => &D.64045
  # DEBUG D#194ptD.0 => &D.64045._M_dataplusD.11519
  # DEBUG D#192ptD.0 => D#194ptD.0
  # DEBUG D#193ptD.0 => D#195ptD.0 + 1
  # DEBUG __pD.64002 => _216
  # DEBUG __aD.64000 => D#192ptD.0
  # DEBUG __nD.64001 => D#193ptD.0
  # DEBUG D#191ptD.0 => D#193ptD.0
  # DEBUG D#190ptD.0 => D#192ptD.0
  # DEBUG D#188ptD.0 => D#190ptD.0
  # DEBUG D#189ptD.0 => D#191ptD.0
  # DEBUG __pD.64005 => _216
  # DEBUG thisD.64003 => D#188ptD.0
  # DEBUG D.64004 => D#189ptD.0
  # .MEM_493 = VDEF <.MEM_492>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZdlPvD.2766 (_216);
;;    succ:       114 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 114, loop depth 1, count 0, freq 46, maybe hot
;;    prev block 113, next block 115, flags: (NEW, REACHABLE)
;;    pred:       112 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                113 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_298 = PHI <.MEM_492(112), .MEM_493(113)>
  # DEBUG D#198ptD.0 => &D.64045._M_dataplusD.11519
  # DEBUG thisD.64008 => D#198ptD.0
  # DEBUG thisD.64009 => D#198ptD.0
  # DEBUG thisD.64010 => D#198ptD.0
  # .MEM_498 = VDEF <.MEM_298>
  D.64045 ={v} {CLOBBER};
  # DEBUG thisD.64011 => NULL
  # DEBUG thisD.56191 => NULL
  goto <bb 141>;
;;    succ:       141 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 115, loop depth 1, count 0, freq 46, maybe hot
;;    prev block 114, next block 116, flags: (NEW, REACHABLE)
;;    pred:       104 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.63979 => D#99ptD.0
  # DEBUG D#98ptD.0 => D#99ptD.0
  # DEBUG thisD.52663 => D#98ptD.0
  # DEBUG D#475ptD.0 => &MEM[(const struct basic_stringbufD.7365 *)&ssD.41210 + 8B].D.24226
  # DEBUG D#6ptD.0 => D#475ptD.0
  # DEBUG thisD.56228 => D#6ptD.0
  # DEBUG D#476ptD.0 => &MEM[(const struct basic_stringbufD.7365 *)&ssD.41210 + 8B].D.24226
  # VUSE <.MEM_457>
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 } (nonlocal, escaped)
  _217 = MEM[(char_typeD.16540 * *)&ssD.41210 + 40B];
  # DEBUG D#7ptD.0 => D#476ptD.0
  # DEBUG thisD.56225 => D#7ptD.0
  # DEBUG thisD.63983 => &D.64044
  # DEBUG __begD.63982 => _217
  # DEBUG __endD.63981 => _214
  # DEBUG __aD.63980 => NULL
  # DEBUG thisD.63984 => &D.64044
  # DEBUG D#470ptD.0 => &D.64044._M_dataplusD.11519
  # DEBUG thisD.63987 => D#470ptD.0
  # DEBUG __datD.63986 => &D.64044.D.11539._M_local_bufD.11541
  # DEBUG __aD.63985 => D#184ptD.0
  # DEBUG D#183ptD.0 => D#184ptD.0
  # DEBUG D#181ptD.0 => D#470ptD.0
  # DEBUG D#182ptD.0 => D#183ptD.0
  # DEBUG thisD.53290 => D#181ptD.0
  # DEBUG __aD.53291 => D#182ptD.0
  # DEBUG D#180ptD.0 => D#182ptD.0
  # DEBUG D#179ptD.0 => D#181ptD.0
  # DEBUG thisD.53272 => D#179ptD.0
  # DEBUG D.53273 => D#180ptD.0
  # .MEM_458 = VDEF <.MEM_457>
  MEM[(struct _Alloc_hiderD.11518 *)&D.64044]._M_pD.11525 = &D.64044.D.11539._M_local_bufD.11541;
  # DEBUG thisD.63990 => &D.64044
  # DEBUG __begD.63989 => _217
  # DEBUG __endD.63988 => _214
  # DEBUG thisD.63994 => &D.64044
  # DEBUG __begD.63993 => _217
  # DEBUG __endD.63992 => _214
  # DEBUG thisD.64078 => &D.64044
  # DEBUG __begD.64079 => _217
  # DEBUG __endD.64080 => _214
  # DEBUG __ptrD.56096 => _217
  # RANGE [0, 1]
  _256 = _214 != 0B;
  # RANGE [0, 1]
  _556 = _217 == 0B;
  # RANGE [0, 1]
  _141 = _256 & _556;
  if (_141 != 0)
    goto <bb 184>;
  else
    goto <bb 186>;
;;    succ:       184 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                186 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 116, loop depth 1, count 0, freq 13, maybe hot
;;    prev block 115, next block 117, flags: (NEW, REACHABLE)
;;    pred:       186 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  [LP 39] # .MEM_460 = VDEF <.MEM_459>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _239 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.11563 (&D.64044, &__dnewD.64081, 0);
  goto <bb 118>;
;;    succ:       118 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                117 (EH,EXECUTABLE)

;;   basic block 117, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 116, next block 118, flags: (NEW)
;;    pred:       116 (EH,EXECUTABLE)
<L68>: [LP 39]
  goto <bb 137> (<L44>);
;;    succ:       137 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 118, loop depth 1, count 0, freq 13, maybe hot
;;    prev block 117, next block 119, flags: (NEW, REACHABLE)
;;    pred:       116 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#9ptD.0 => &D.64044
  # DEBUG __pD.64100 => _239
  # DEBUG thisD.64099 => D#9ptD.0
  # .MEM_461 = VDEF <.MEM_460>
  MEM[(charD.10 * *)&D.64044] = _239;
  # VUSE <.MEM_461>
  __dnew.71_240 = __dnewD.64081;
  # DEBUG D#10ptD.0 => &D.64044
  # DEBUG __capacityD.64102 => __dnew.71_240
  # DEBUG thisD.64101 => D#10ptD.0
  # .MEM_462 = VDEF <.MEM_461>
  MEM[(size_typeD.11502 *)&D.64044 + 16B] = __dnew.71_240;
  # DEBUG D#2ptD.0 => &D.64044
  # DEBUG thisD.56070 => D#2ptD.0
  # DEBUG __pD.64084 => _239
  # DEBUG __k1D.64083 => _217
  # DEBUG __k2D.64082 => _214
  # DEBUG __dD.64087 => _239
  # DEBUG __sD.64086 => _217
  # DEBUG __nD.64085 => __dnew.70_238
  goto <bb 121>;
;;    succ:       121 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 119, loop depth 1, count 0, freq 33, maybe hot
;;    prev block 118, next block 120, flags: (NEW, REACHABLE)
;;    pred:       186 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#2ptD.0 => &D.64044
  # DEBUG thisD.56070 => D#2ptD.0
  # DEBUG __pD.64084 => &D.64044.D.11539._M_local_bufD.11541
  # DEBUG __k1D.64083 => _217
  # DEBUG __k2D.64082 => _214
  # DEBUG __dD.64087 => &D.64044.D.11539._M_local_bufD.11541
  # DEBUG __sD.64086 => _217
  # DEBUG __nD.64085 => __dnew.70_238
  if (__dnew.70_238 == 1)
    goto <bb 120>;
  else
    goto <bb 121>;
;;    succ:       120 [52.8%]  (TRUE_VALUE,EXECUTABLE)
;;                121 [47.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 120, loop depth 1, count 0, freq 17, maybe hot
;;    prev block 119, next block 121, flags: (NEW, REACHABLE)
;;    pred:       119 [52.8%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_459>
  _242 = MEM[(const char_typeD.6439 &)_217];
  # DEBUG D#23ptD.0 => _217
  # DEBUG __c1D.64092 => &D.64044.D.11539._M_local_bufD.11541
  # DEBUG __c2D.64091 => D#23ptD.0
  # .MEM_463 = VDEF <.MEM_459>
  MEM[(char_typeD.6439 &)&D.64044 + 16] = _242;
  goto <bb 122>;
;;    succ:       122 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 121, loop depth 1, count 0, freq 29, maybe hot
;;    prev block 120, next block 122, flags: (NEW, REACHABLE)
;;    pred:       119 [47.2%]  (FALSE_VALUE,EXECUTABLE)
;;                118 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 D.64044 } (nonlocal, escaped)
  # _538 = PHI <&D.64044.D.11539._M_local_bufD.11541(119), _239(118)>
  # .MEM_559 = PHI <.MEM_459(119), .MEM_462(118)>
  # DEBUG D#2ptD.0 => &D.64044
  # DEBUG thisD.56070 => D#2ptD.0
  # DEBUG __pD.64084 => _538
  # DEBUG __k1D.64083 => _217
  # DEBUG __k2D.64082 => _214
  # DEBUG __dD.64087 => _538
  # DEBUG __sD.64086 => _217
  # DEBUG __nD.64085 => __dnew.70_238
  # DEBUG __s1D.64090 => _538
  # DEBUG __s2D.64089 => _217
  # DEBUG __nD.64088 => __dnew.70_238
  # .MEM_464 = VDEF <.MEM_559>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  memcpyD.992 (_538, _217, __dnew.70_238);
  # VUSE <.MEM_464>
  pretmp_202 = __dnewD.64081;
  # VUSE <.MEM_464>
  pretmp_246 = MEM[(charD.10 * *)&D.64044];
;;    succ:       122 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 122, loop depth 1, count 0, freq 46, maybe hot
;;    prev block 121, next block 123, flags: (NEW, REACHABLE)
;;    pred:       120 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                121 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_300 = PHI <.MEM_463(120), .MEM_464(121)>
  # prephitmp_219 = PHI <__dnew.70_238(120), pretmp_202(121)>
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 D.64044 } (nonlocal, escaped)
  # prephitmp_247 = PHI <&D.64044.D.11539._M_local_bufD.11541(120), pretmp_246(121)>
  # DEBUG D#896ptD.0 => __dnewD.64081
  # DEBUG thisD.64094 => &D.64044
  # DEBUG __nD.64093 => D#896ptD.0
  # DEBUG D#8ptD.0 => &D.64044
  # DEBUG __lengthD.64096 => D#896ptD.0
  # DEBUG thisD.64095 => D#8ptD.0
  # .MEM_465 = VDEF <.MEM_300>
  MEM[(size_typeD.11502 *)&D.64044 + 8B] = prephitmp_219;
  # DEBUG D#2ptD.0 => &D.64044
  # DEBUG thisD.52222 => D#2ptD.0
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 D.64044 } (nonlocal, escaped)
  _245 = prephitmp_247 + prephitmp_219;
  # DEBUG __c1D.64098 => _245
  # DEBUG __c2D.64097 => D#23ptD.0
  # .MEM_466 = VDEF <.MEM_465>
  MEM[(char_typeD.6439 &)_245] = 0;
  # .MEM_467 = VDEF <.MEM_466>
  __dnewD.64081 ={v} {CLOBBER};
  # DEBUG thisD.63976 => &D.41213
  # DEBUG __strD.63975 => &D.64044
  # DEBUG thisD.63978 => &D.41213
  # DEBUG __strD.63977 => &D.64044
  [LP 17] # .MEM_468 = VDEF <.MEM_467>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_D.11707 (&D.41213, &D.64044);
;;    succ:       123 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                132 (EH,EXECUTABLE)

;;   basic block 123, loop depth 1, count 0, freq 46, maybe hot
;;    prev block 122, next block 124, flags: (NEW, REACHABLE)
;;    pred:       122 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.63959 => &D.64044
  # DEBUG thisD.63960 => &D.64044
  # DEBUG thisD.63969 => &D.64044
  # VUSE <.MEM_468>
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 D.64044 } (nonlocal, escaped)
  _218 = MEM[(charD.10 * *)&D.64044];
  # DEBUG D#2ptD.0 => &D.64044
  # DEBUG thisD.52147 => D#2ptD.0
  # DEBUG thisD.63970 => &D.64044
  if (&D.64044.D.11539._M_local_bufD.11541 != _218)
    goto <bb 124>;
  else
    goto <bb 125>;
;;    succ:       124 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                125 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 124, loop depth 1, count 0, freq 36, maybe hot
;;    prev block 123, next block 125, flags: (NEW, REACHABLE)
;;    pred:       123 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#197ptD.0 => D.64044.D.11539._M_allocated_capacityD.11542
  # DEBUG D#196ptD.0 => D#197ptD.0
  # DEBUG thisD.63962 => &D.64044
  # DEBUG __sizeD.63961 => D#196ptD.0
  # DEBUG D#195ptD.0 => D#196ptD.0
  # DEBUG D#2ptD.0 => &D.64044
  # DEBUG thisD.53364 => D#2ptD.0
  # DEBUG thisD.53365 => &D.64044
  # DEBUG D#194ptD.0 => &D.64044._M_dataplusD.11519
  # DEBUG D#192ptD.0 => D#194ptD.0
  # DEBUG D#193ptD.0 => D#195ptD.0 + 1
  # DEBUG __pD.63965 => _218
  # DEBUG __aD.63963 => D#192ptD.0
  # DEBUG __nD.63964 => D#193ptD.0
  # DEBUG D#191ptD.0 => D#193ptD.0
  # DEBUG D#190ptD.0 => D#192ptD.0
  # DEBUG D#188ptD.0 => D#190ptD.0
  # DEBUG D#189ptD.0 => D#191ptD.0
  # DEBUG __pD.63968 => _218
  # DEBUG thisD.63966 => D#188ptD.0
  # DEBUG D.63967 => D#189ptD.0
  # .MEM_469 = VDEF <.MEM_468>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZdlPvD.2766 (_218);
;;    succ:       125 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 125, loop depth 1, count 0, freq 46, maybe hot
;;    prev block 124, next block 126, flags: (NEW, REACHABLE)
;;    pred:       123 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                124 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_301 = PHI <.MEM_468(123), .MEM_469(124)>
  # DEBUG D#198ptD.0 => &D.64044._M_dataplusD.11519
  # DEBUG thisD.63971 => D#198ptD.0
  # DEBUG thisD.63972 => D#198ptD.0
  # DEBUG thisD.63973 => D#198ptD.0
  # .MEM_474 = VDEF <.MEM_301>
  D.64044 ={v} {CLOBBER};
  # DEBUG thisD.63974 => NULL
  # DEBUG thisD.56237 => NULL
  goto <bb 141>;
;;    succ:       141 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 126, loop depth 1, count 0, freq 7, maybe hot
;;    prev block 125, next block 127, flags: (NEW, REACHABLE)
;;    pred:       103 [6.7%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.63956 => &D.41213
  # DEBUG __strD.63955 => &MEM[(const struct basic_stringbufD.7365 *)&ssD.41210 + 8B]._M_stringD.24149
  # DEBUG thisD.63958 => &D.41213
  # DEBUG __strD.63957 => &MEM[(const struct basic_stringbufD.7365 *)&ssD.41210 + 8B]._M_stringD.24149
  [LP 40] # .MEM_506 = VDEF <.MEM_457>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_D.11707 (&D.41213, &MEM[(const struct basic_stringbufD.7365 *)&ssD.41210 + 8B]._M_stringD.24149);
  goto <bb 141>;
;;    succ:       141 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                127 (EH,EXECUTABLE)

;;   basic block 127, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 126, next block 128, flags: (NEW)
;;    pred:       126 (EH,EXECUTABLE)
<L69>: [LP 40]
  goto <bb 137> (<L44>);
;;    succ:       137 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 128, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 127, next block 129, flags: (NEW, REACHABLE)
;;    pred:       111 (EH,EXECUTABLE)
<L42>: [LP 18]
  # DEBUG thisD.63940 => &D.64045
  # DEBUG thisD.63941 => &D.64045
  # DEBUG thisD.63950 => &D.64045
  # VUSE <.MEM_492>
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 D.64045 } (nonlocal, escaped)
  _220 = MEM[(charD.10 * *)&D.64045];
  # DEBUG D#2ptD.0 => &D.64045
  # DEBUG thisD.52147 => D#2ptD.0
  # DEBUG thisD.63951 => &D.64045
  if (&D.64045.D.11539._M_local_bufD.11541 != _220)
    goto <bb 129>;
  else
    goto <bb 130>;
;;    succ:       129 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                130 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 129, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 128, next block 130, flags: (NEW, REACHABLE)
;;    pred:       128 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#197ptD.0 => D.64045.D.11539._M_allocated_capacityD.11542
  # DEBUG D#196ptD.0 => D#197ptD.0
  # DEBUG thisD.63943 => &D.64045
  # DEBUG __sizeD.63942 => D#196ptD.0
  # DEBUG D#195ptD.0 => D#196ptD.0
  # DEBUG D#2ptD.0 => &D.64045
  # DEBUG thisD.53364 => D#2ptD.0
  # DEBUG thisD.53365 => &D.64045
  # DEBUG D#194ptD.0 => &D.64045._M_dataplusD.11519
  # DEBUG D#192ptD.0 => D#194ptD.0
  # DEBUG D#193ptD.0 => D#195ptD.0 + 1
  # DEBUG __pD.63946 => _220
  # DEBUG __aD.63944 => D#192ptD.0
  # DEBUG __nD.63945 => D#193ptD.0
  # DEBUG D#191ptD.0 => D#193ptD.0
  # DEBUG D#190ptD.0 => D#192ptD.0
  # DEBUG D#188ptD.0 => D#190ptD.0
  # DEBUG D#189ptD.0 => D#191ptD.0
  # DEBUG __pD.63949 => _220
  # DEBUG thisD.63947 => D#188ptD.0
  # DEBUG D.63948 => D#189ptD.0
  # .MEM_499 = VDEF <.MEM_492>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZdlPvD.2766 (_220);
;;    succ:       130 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 130, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 129, next block 131, flags: (NEW, REACHABLE)
;;    pred:       128 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                129 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_302 = PHI <.MEM_492(128), .MEM_499(129)>
  # DEBUG D#198ptD.0 => &D.64045._M_dataplusD.11519
  # DEBUG thisD.63952 => D#198ptD.0
  # DEBUG thisD.63953 => D#198ptD.0
  # DEBUG thisD.63954 => D#198ptD.0
  # .MEM_504 = VDEF <.MEM_302>
  D.64045 ={v} {CLOBBER};
  [LP 41] resx 26
;;    succ:       131 (EH,EXECUTABLE)

;;   basic block 131, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 130, next block 132, flags: (NEW)
;;    pred:       130 (EH,EXECUTABLE)
<L70>: [LP 41]
  goto <bb 137> (<L44>);
;;    succ:       137 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 132, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 131, next block 133, flags: (NEW, REACHABLE)
;;    pred:       122 (EH,EXECUTABLE)
<L43>: [LP 17]
  # DEBUG thisD.63924 => &D.64044
  # DEBUG thisD.63925 => &D.64044
  # DEBUG thisD.63934 => &D.64044
  # VUSE <.MEM_468>
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 D.64044 } (nonlocal, escaped)
  _221 = MEM[(charD.10 * *)&D.64044];
  # DEBUG D#2ptD.0 => &D.64044
  # DEBUG thisD.52147 => D#2ptD.0
  # DEBUG thisD.63935 => &D.64044
  if (&D.64044.D.11539._M_local_bufD.11541 != _221)
    goto <bb 133>;
  else
    goto <bb 134>;
;;    succ:       133 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                134 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 133, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 132, next block 134, flags: (NEW, REACHABLE)
;;    pred:       132 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#197ptD.0 => D.64044.D.11539._M_allocated_capacityD.11542
  # DEBUG D#196ptD.0 => D#197ptD.0
  # DEBUG thisD.63927 => &D.64044
  # DEBUG __sizeD.63926 => D#196ptD.0
  # DEBUG D#195ptD.0 => D#196ptD.0
  # DEBUG D#2ptD.0 => &D.64044
  # DEBUG thisD.53364 => D#2ptD.0
  # DEBUG thisD.53365 => &D.64044
  # DEBUG D#194ptD.0 => &D.64044._M_dataplusD.11519
  # DEBUG D#192ptD.0 => D#194ptD.0
  # DEBUG D#193ptD.0 => D#195ptD.0 + 1
  # DEBUG __pD.63930 => _221
  # DEBUG __aD.63928 => D#192ptD.0
  # DEBUG __nD.63929 => D#193ptD.0
  # DEBUG D#191ptD.0 => D#193ptD.0
  # DEBUG D#190ptD.0 => D#192ptD.0
  # DEBUG D#188ptD.0 => D#190ptD.0
  # DEBUG D#189ptD.0 => D#191ptD.0
  # DEBUG __pD.63933 => _221
  # DEBUG thisD.63931 => D#188ptD.0
  # DEBUG D.63932 => D#189ptD.0
  # .MEM_475 = VDEF <.MEM_468>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZdlPvD.2766 (_221);
;;    succ:       134 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 134, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 133, next block 135, flags: (NEW, REACHABLE)
;;    pred:       132 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                133 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_303 = PHI <.MEM_468(132), .MEM_475(133)>
  # DEBUG D#198ptD.0 => &D.64044._M_dataplusD.11519
  # DEBUG thisD.63936 => D#198ptD.0
  # DEBUG thisD.63937 => D#198ptD.0
  # DEBUG thisD.63938 => D#198ptD.0
  # .MEM_480 = VDEF <.MEM_303>
  D.64044 ={v} {CLOBBER};
  [LP 42] resx 25
;;    succ:       135 (EH,EXECUTABLE)

;;   basic block 135, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 134, next block 136, flags: (NEW)
;;    pred:       134 (EH,EXECUTABLE)
<L71>: [LP 42]
  goto <bb 137> (<L44>);
;;    succ:       137 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 136, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 135, next block 137, flags: (NEW)
;;    pred:       106 (EH,EXECUTABLE)
<L67>: [LP 38]
;;    succ:       137 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 137, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 136, next block 138, flags: (NEW, REACHABLE)
;;    pred:       136 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                117 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                127 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                131 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                135 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                182 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                185 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_304 = PHI <.MEM_484(136), .MEM_460(117), .MEM_506(127), .MEM_504(131), .MEM_480(135), .MEM_505(182), .MEM_481(185)>
<L44>:
  # DEBUG thisD.63913 => &D.41213
  # DEBUG thisD.63914 => &D.41213
  # DEBUG thisD.56302 => &D.41213
  # VUSE <.MEM_304>
  # PT = nonlocal escaped { D.41213 } (escaped)
  _222 = MEM[(charD.10 * *)&D.41213];
  # DEBUG D#2ptD.0 => &D.41213
  # DEBUG thisD.52147 => D#2ptD.0
  # DEBUG thisD.56303 => &D.41213
  if (&D.41213.D.11539._M_local_bufD.11541 != _222)
    goto <bb 138>;
  else
    goto <bb 139>;
;;    succ:       138 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                139 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 138, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 137, next block 139, flags: (NEW, REACHABLE)
;;    pred:       137 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#197ptD.0 => D.41213.D.11539._M_allocated_capacityD.11542
  # DEBUG D#196ptD.0 => D#197ptD.0
  # DEBUG thisD.63916 => &D.41213
  # DEBUG __sizeD.63915 => D#196ptD.0
  # DEBUG D#195ptD.0 => D#196ptD.0
  # DEBUG D#2ptD.0 => &D.41213
  # DEBUG thisD.53364 => D#2ptD.0
  # DEBUG thisD.53365 => &D.41213
  # DEBUG D#194ptD.0 => &D.41213._M_dataplusD.11519
  # DEBUG D#192ptD.0 => D#194ptD.0
  # DEBUG D#193ptD.0 => D#195ptD.0 + 1
  # DEBUG __pD.63919 => _222
  # DEBUG __aD.63917 => D#192ptD.0
  # DEBUG __nD.63918 => D#193ptD.0
  # DEBUG D#191ptD.0 => D#193ptD.0
  # DEBUG D#190ptD.0 => D#192ptD.0
  # DEBUG D#188ptD.0 => D#190ptD.0
  # DEBUG D#189ptD.0 => D#191ptD.0
  # DEBUG __pD.63922 => _222
  # DEBUG thisD.63920 => D#188ptD.0
  # DEBUG D.63921 => D#189ptD.0
  # .MEM_509 = VDEF <.MEM_304>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZdlPvD.2766 (_222);
;;    succ:       139 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 139, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 138, next block 140, flags: (NEW, REACHABLE)
;;    pred:       137 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                138 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_305 = PHI <.MEM_304(137), .MEM_509(138)>
  # DEBUG D#198ptD.0 => &D.41213._M_dataplusD.11519
  # DEBUG thisD.56304 => D#198ptD.0
  # DEBUG thisD.56305 => D#198ptD.0
  # DEBUG thisD.56306 => D#198ptD.0
  [LP 43] resx 24
;;    succ:       140 (EH,EXECUTABLE)

;;   basic block 140, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 139, next block 141, flags: (NEW)
;;    pred:       139 (EH,EXECUTABLE)
<L72>: [LP 43]
  goto <bb 174> (<L31>);
;;    succ:       174 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 141, loop depth 1, count 0, freq 99, maybe hot
;;    prev block 140, next block 142, flags: (NEW, REACHABLE)
;;    pred:       125 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                114 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                126 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_306 = PHI <.MEM_474(125), .MEM_498(114), .MEM_506(126)>
  [LP 44] # .MEM_67 = VDEF <.MEM_306>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _68 = _ZNSolsEiD.21643 (os_1, output_100);
;;    succ:       168 (EH,EXECUTABLE)
;;                142 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 142, loop depth 1, count 0, freq 99, maybe hot
;;    prev block 141, next block 143, flags: (NEW, REACHABLE)
;;    pred:       141 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __outD.56357 => _68
  # DEBUG __sD.56358 => " -> [ "
  # DEBUG __sD.56359 => " -> [ "
  [LP 45] # .MEM_115 = VDEF <.MEM_67>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_68, " -> [ ", 6);
  goto <bb 144>;
;;    succ:       144 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                143 (EH,EXECUTABLE)

;;   basic block 143, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 142, next block 144, flags: (NEW)
;;    pred:       142 (EH,EXECUTABLE)
<L74>: [LP 45]
  goto <bb 169> (<L30>);
;;    succ:       169 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 144, loop depth 1, count 0, freq 99, maybe hot
;;    prev block 143, next block 145, flags: (NEW, REACHABLE)
;;    pred:       142 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __osD.56361 => _68
  # DEBUG __strD.56362 => &D.41213
  # VUSE <.MEM_115>
  _69 = MEM[(long unsigned intD.14 *)&D.41213 + 8B];
  # DEBUG D#1ptD.0 => &D.41213
  # DEBUG thisD.52181 => D#1ptD.0
  _93 = (long intD.12) _69;
  # DEBUG thisD.52178 => &D.41213
  # VUSE <.MEM_115>
  # PT = nonlocal escaped { D.41213 } (escaped)
  _94 = MEM[(charD.10 * *)&D.41213];
  # DEBUG D#2ptD.0 => &D.41213
  # DEBUG thisD.52085 => D#2ptD.0
  [LP 46] # .MEM_116 = VDEF <.MEM_115>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _95 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_68, _94, _93);
  goto <bb 146>;
;;    succ:       146 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                145 (EH,EXECUTABLE)

;;   basic block 145, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 144, next block 146, flags: (NEW)
;;    pred:       144 (EH,EXECUTABLE)
<L75>: [LP 46]
  goto <bb 169> (<L30>);
;;    succ:       169 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 146, loop depth 1, count 0, freq 99, maybe hot
;;    prev block 145, next block 147, flags: (NEW, REACHABLE)
;;    pred:       144 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __outD.64107 => _95
  # DEBUG __sD.64108 => "]  "
  # DEBUG __sD.64109 => "]  "
  [LP 6] # .MEM_507 = VDEF <.MEM_116>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.7824 (_95, "]  ", 3);
  goto <bb 148>;
;;    succ:       148 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                147 (EH,EXECUTABLE)

;;   basic block 147, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 146, next block 148, flags: (NEW)
;;    pred:       146 (EH,EXECUTABLE)
<L76>: [LP 6]
  goto <bb 169> (<L30>);
;;    succ:       169 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 148, loop depth 1, count 0, freq 99, maybe hot
;;    prev block 147, next block 149, flags: (NEW, REACHABLE)
;;    pred:       146 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.56364 => &D.41213
  # DEBUG thisD.56365 => &D.41213
  # DEBUG thisD.56374 => &D.41213
  # VUSE <.MEM_507>
  # PT = nonlocal escaped { D.41213 } (escaped)
  _70 = MEM[(charD.10 * *)&D.41213];
  # DEBUG D#2ptD.0 => &D.41213
  # DEBUG thisD.52147 => D#2ptD.0
  # DEBUG thisD.56375 => &D.41213
  if (&D.41213.D.11539._M_local_bufD.11541 != _70)
    goto <bb 149>;
  else
    goto <bb 150>;
;;    succ:       149 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                150 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 149, loop depth 1, count 0, freq 69, maybe hot
;;    prev block 148, next block 150, flags: (NEW, REACHABLE)
;;    pred:       148 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#197ptD.0 => D.41213.D.11539._M_allocated_capacityD.11542
  # DEBUG D#196ptD.0 => D#197ptD.0
  # DEBUG thisD.56367 => &D.41213
  # DEBUG __sizeD.56366 => D#196ptD.0
  # DEBUG D#195ptD.0 => D#196ptD.0
  # DEBUG D#2ptD.0 => &D.41213
  # DEBUG thisD.53364 => D#2ptD.0
  # DEBUG thisD.53365 => &D.41213
  # DEBUG D#194ptD.0 => &D.41213._M_dataplusD.11519
  # DEBUG D#192ptD.0 => D#194ptD.0
  # DEBUG D#193ptD.0 => D#195ptD.0 + 1
  # DEBUG __pD.56370 => _70
  # DEBUG __aD.56368 => D#192ptD.0
  # DEBUG __nD.56369 => D#193ptD.0
  # DEBUG D#191ptD.0 => D#193ptD.0
  # DEBUG D#190ptD.0 => D#192ptD.0
  # DEBUG D#188ptD.0 => D#190ptD.0
  # DEBUG D#189ptD.0 => D#191ptD.0
  # DEBUG __pD.56373 => _70
  # DEBUG thisD.56371 => D#188ptD.0
  # DEBUG D.56372 => D#189ptD.0
  # .MEM_117 = VDEF <.MEM_507>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZdlPvD.2766 (_70);
;;    succ:       150 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 150, loop depth 1, count 0, freq 99, maybe hot
;;    prev block 149, next block 151, flags: (NEW, REACHABLE)
;;    pred:       148 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                149 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_96 = PHI <.MEM_507(148), .MEM_117(149)>
  # DEBUG D#198ptD.0 => &D.41213._M_dataplusD.11519
  # DEBUG thisD.56376 => D#198ptD.0
  # DEBUG thisD.56377 => D#198ptD.0
  # DEBUG thisD.56378 => D#198ptD.0
  # .MEM_72 = VDEF <.MEM_96>
  D.41213 ={v} {CLOBBER};
  # VUSE <.MEM_72>
  pretmp_54 = MEM[(const voidD.45 * *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEED.24385 + 8B];
  # VUSE <.MEM_72>
  pretmp_71 = MEM[(const voidD.45 * *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEED.24385 + 16B];
;;    succ:       151 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 151, loop depth 1, count 0, freq 198, maybe hot
;;    prev block 150, next block 152, flags: (NEW, REACHABLE)
;;    pred:       102 [49.0%]  (FALSE_VALUE,EXECUTABLE)
;;                150 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                84 [2.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_17 = PHI <.MEM_16(102), .MEM_72(150), .MEM_452(84)>
  # PT = nonlocal escaped 
  # prephitmp_207 = PHI <prephitmp_140(102), pretmp_54(150), prephitmp_140(84)>
  # PT = nonlocal escaped 
  # prephitmp_248 = PHI <prephitmp_65(102), pretmp_71(150), prephitmp_65(84)>
  # DEBUG thisD.64111 => &ssD.41210
  # .MEM_510 = VDEF <.MEM_17>
  ssD.41210.D.24376._vptr.basic_ostreamD.21735 = &MEM[(voidD.45 *)&_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEED.24380 + 24B];
  # .MEM_511 = VDEF <.MEM_510>
  MEM[(struct basic_iosD.7355 *)&ssD.41210 + 112B].D.21051._vptr.ios_baseD.16027 = &MEM[(voidD.45 *)&_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEED.24380 + 64B];
  # DEBUG thisD.64115 => &ssD.41210._M_stringbufD.24319
  # .MEM_512 = VDEF <.MEM_511>
  MEM[(struct basic_stringbufD.7365 *)&ssD.41210 + 8B].D.24226._vptr.basic_streambufD.16823 = &MEM[(voidD.45 *)&_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEED.24230 + 16B];
  # DEBUG D#200ptD.0 => &MEM[(struct basic_stringbufD.7365 *)&ssD.41210 + 8B]._M_stringD.24149
  # DEBUG thisD.64116 => D#200ptD.0
  # DEBUG thisD.64117 => D#200ptD.0
  # DEBUG thisD.64126 => D#200ptD.0
  # VUSE <.MEM_512>
  # PT = nonlocal escaped null { D.16832 D.21060 D.24230 D.24380 D.41156 D.41210 } (nonlocal, escaped)
  _75 = MEM[(charD.10 * *)&ssD.41210 + 80B];
  # DEBUG D#2ptD.0 => D#200ptD.0
  # DEBUG thisD.52147 => D#2ptD.0
  # DEBUG thisD.64127 => D#200ptD.0
  if (&MEM[(const struct basic_stringD.2844 *)&ssD.41210 + 80B].D.11539._M_local_bufD.11541 != _75)
    goto <bb 152>;
  else
    goto <bb 153>;
;;    succ:       152 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                153 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 152, loop depth 1, count 0, freq 155, maybe hot
;;    prev block 151, next block 153, flags: (NEW, REACHABLE)
;;    pred:       151 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#197ptD.0 => MEM[(struct basic_stringD.2844 *)D#200ptD.0].D.11539._M_allocated_capacityD.11542
  # DEBUG D#196ptD.0 => D#197ptD.0
  # DEBUG thisD.64119 => D#200ptD.0
  # DEBUG __sizeD.64118 => D#196ptD.0
  # DEBUG D#195ptD.0 => D#196ptD.0
  # DEBUG D#2ptD.0 => D#200ptD.0
  # DEBUG thisD.53364 => D#2ptD.0
  # DEBUG thisD.53365 => D#200ptD.0
  # DEBUG D#194ptD.0 => &MEM[(struct basic_stringD.2844 *)D#200ptD.0]._M_dataplusD.11519
  # DEBUG D#192ptD.0 => D#194ptD.0
  # DEBUG D#193ptD.0 => D#195ptD.0 + 1
  # DEBUG __pD.64122 => _75
  # DEBUG __aD.64120 => D#192ptD.0
  # DEBUG __nD.64121 => D#193ptD.0
  # DEBUG D#191ptD.0 => D#193ptD.0
  # DEBUG D#190ptD.0 => D#192ptD.0
  # DEBUG D#188ptD.0 => D#190ptD.0
  # DEBUG D#189ptD.0 => D#191ptD.0
  # DEBUG __pD.64125 => _75
  # DEBUG thisD.64123 => D#188ptD.0
  # DEBUG D.64124 => D#189ptD.0
  # .MEM_513 = VDEF <.MEM_512>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZdlPvD.2766 (_75);
;;    succ:       153 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 153, loop depth 1, count 0, freq 198, maybe hot
;;    prev block 152, next block 154, flags: (NEW, REACHABLE)
;;    pred:       151 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                152 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_307 = PHI <.MEM_512(151), .MEM_513(152)>
  # DEBUG D#198ptD.0 => &MEM[(struct basic_stringD.2844 *)D#200ptD.0]._M_dataplusD.11519
  # DEBUG thisD.64128 => D#198ptD.0
  # DEBUG thisD.64129 => D#198ptD.0
  # DEBUG thisD.64130 => D#198ptD.0
  # .MEM_517 = VDEF <.MEM_307>
  MEM[(struct  &)&ssD.41210 + 80] ={v} {CLOBBER};
  # DEBUG D#199ptD.0 => &MEM[(struct basic_stringbufD.7365 *)&ssD.41210 + 8B].D.24226
  # DEBUG thisD.64131 => D#199ptD.0
  # .MEM_518 = VDEF <.MEM_517>
  MEM[(struct basic_streambufD.7357 *)&ssD.41210 + 8B]._vptr.basic_streambufD.16823 = &MEM[(voidD.45 *)&_ZTVSt15basic_streambufIcSt11char_traitsIcEED.16832 + 16B];
  # .MEM_519 = VDEF <.MEM_518>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt6localeD1EvD.14562 (&MEM[(struct basic_streambufD.7357 *)&ssD.41210 + 8B]._M_buf_localeD.16675);
  # .MEM_521 = VDEF <.MEM_519>
  MEM[(struct  &)&ssD.41210 + 8] ={v} {CLOBBER};
  # DEBUG thisD.64114 => &ssD.41210.D.24376
  # DEBUG __vtt_parmD.64113 => &MEM[(voidD.45 *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEED.24385 + 8B]
  # VUSE <.MEM_521>
  _250 = MEM[(long intD.12 *)prephitmp_207 + -24B];
  # RANGE [0, 18446744073709551615]
  iftmp.64_251 = (sizetype) _250;
  # PT = { D.41210 } (escaped)
  _252 = &ssD.41210.D.24376 + iftmp.64_251;
  # .MEM_523 = VDEF <.MEM_521>
  _252->D.21051._vptr.ios_baseD.16027 = prephitmp_248;
  # .MEM_524 = VDEF <.MEM_523>
  MEM[(struct  &)&ssD.41210] ={v} {CLOBBER};
  # DEBUG D#204ptD.0 => &ssD.41210.D.24379
  # DEBUG thisD.64112 => D#204ptD.0
  # .MEM_525 = VDEF <.MEM_524>
  MEM[(struct basic_iosD.7355 *)&ssD.41210 + 112B].D.21051._vptr.ios_baseD.16027 = &MEM[(voidD.45 *)&_ZTVSt9basic_iosIcSt11char_traitsIcEED.21060 + 16B];
  # .MEM_526 = VDEF <.MEM_525>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt8ios_baseD2EvD.16024 (&MEM[(struct basic_iosD.7355 *)&ssD.41210 + 112B].D.21051);
  # .MEM_76 = VDEF <.MEM_526>
  ssD.41210 ={v} {CLOBBER};
  output_77 = output_100 + 1;
  # DEBUG outputD.41208 => output_77
  # DEBUG outputD.41208 => output_77
  # VUSE <.MEM_76>
  _53 = this_25(D)->D.36298._outputsD.34630;
  if (_53 <= output_77)
    goto <bb 80>;
  else
    goto <bb 154>;
;;    succ:       80 [2.0%]  (TRUE_VALUE,EXECUTABLE)
;;                154 [98.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 154, loop depth 1, count 0, freq 194, maybe hot
;;    prev block 153, next block 155, flags: (NEW)
;;    pred:       153 [98.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 82>;
;;    succ:       82 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 155, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 154, next block 156, flags: (NEW, REACHABLE)
;;    pred:       80 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_544 = VDEF <.MEM_127>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZSt16__throw_bad_castvD.2851 ();
;;    succ:      

;;   basic block 156, loop depth 0, count 0, freq 4, maybe hot
;;    prev block 155, next block 157, flags: (NEW, REACHABLE)
;;    pred:       80 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.64139 => _128
  # DEBUG __cD.64138 => 10
  # VUSE <.MEM_127>
  _265 = MEM[(const struct ctypeD.7662 *)_128]._M_widen_okD.17874;
  if (_265 != 0)
    goto <bb 157>;
  else
    goto <bb 158>;
;;    succ:       157 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                158 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 157, loop depth 0, count 0, freq 2, maybe hot
;;    prev block 156, next block 158, flags: (NEW, REACHABLE)
;;    pred:       156 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_127>
  _268 = MEM[(const struct ctypeD.7662 *)_128]._M_widenD.17875[10];
  pretmp_424 = (intD.9) _268;
  goto <bb 160>;
;;    succ:       160 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 158, loop depth 0, count 0, freq 2, maybe hot
;;    prev block 157, next block 159, flags: (NEW, REACHABLE)
;;    pred:       156 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.64141 => _128
  # DEBUG __cD.64142 => 10
  # .MEM_536 = VDEF <.MEM_127>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.17982 (_128);
  # VUSE <.MEM_536>
  # PT = nonlocal escaped 
  _273 = MEM[(const struct ctypeD.7662 *)_128].D.18015._vptr.facetD.14633;
  # VUSE <.MEM_536>
  # PT = nonlocal escaped 
  _274 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_273 + 48B];
  # PT = anything 
  PROF_278 = [obj_type_ref] OBJ_TYPE_REF(_274;(const struct ctypeD.7662)_128->6);
  if (PROF_278 == _ZNKSt5ctypeIcE8do_widenEcD.17963)
    goto <bb 160>;
  else
    goto <bb 159>;
;;    succ:       160 [80.2%]  (TRUE_VALUE,EXECUTABLE)
;;                159 [19.8%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 159, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 158, next block 160, flags: (NEW, REACHABLE)
;;    pred:       158 [19.8%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_537 = VDEF <.MEM_536>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _280 = OBJ_TYPE_REF(_274;(const struct ctypeD.7662)_128->6) (_128, 10);
  pretmp_395 = (intD.9) _280;
;;    succ:       160 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 160, loop depth 0, count 0, freq 4, maybe hot
;;    prev block 159, next block 161, flags: (NEW, REACHABLE)
;;    pred:       157 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                158 [80.2%]  (TRUE_VALUE,EXECUTABLE)
;;                159 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_309 = PHI <.MEM_127(157), .MEM_536(158), .MEM_537(159)>
  # RANGE [-128, 127]
  # prephitmp_208 = PHI <pretmp_424(157), 10(158), pretmp_395(159)>
  # .MEM_541 = VDEF <.MEM_309>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _263 = _ZNSo3putEcD.21670 (os_1, prephitmp_208);
  # DEBUG __osD.64133 => _263
  # .MEM_542 = VDEF <.MEM_541>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSo5flushEvD.21681 (_263);
  # VUSE <.MEM_542>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 161, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 160, next block 162, flags: (NEW)
;;    pred:       66 (EH,EXECUTABLE)
<L57>: [LP 30]
;;    succ:       162 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 162, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 161, next block 163, flags: (NEW, REACHABLE)
;;    pred:       161 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                68 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                70 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                72 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_18 = PHI <.MEM_40(161), .MEM_101(68), .MEM_102(70), .MEM_394(72)>
<L27>:
  # DEBUG thisD.56386 => &D.41207
  # DEBUG thisD.56387 => &D.41207
  # DEBUG thisD.56396 => &D.41207
  # VUSE <.MEM_18>
  # PT = nonlocal escaped { D.41207 } (escaped)
  _79 = MEM[(charD.10 * *)&D.41207];
  # DEBUG D#2ptD.0 => &D.41207
  # DEBUG thisD.52147 => D#2ptD.0
  # DEBUG thisD.56397 => &D.41207
  if (&D.41207.D.11539._M_local_bufD.11541 != _79)
    goto <bb 163>;
  else
    goto <bb 164>;
;;    succ:       163 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                164 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 163, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 162, next block 164, flags: (NEW, REACHABLE)
;;    pred:       162 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#197ptD.0 => D.41207.D.11539._M_allocated_capacityD.11542
  # DEBUG D#196ptD.0 => D#197ptD.0
  # DEBUG thisD.56389 => &D.41207
  # DEBUG __sizeD.56388 => D#196ptD.0
  # DEBUG D#195ptD.0 => D#196ptD.0
  # DEBUG D#2ptD.0 => &D.41207
  # DEBUG thisD.53364 => D#2ptD.0
  # DEBUG thisD.53365 => &D.41207
  # DEBUG D#194ptD.0 => &D.41207._M_dataplusD.11519
  # DEBUG D#192ptD.0 => D#194ptD.0
  # DEBUG D#193ptD.0 => D#195ptD.0 + 1
  # DEBUG __pD.56392 => _79
  # DEBUG __aD.56390 => D#192ptD.0
  # DEBUG __nD.56391 => D#193ptD.0
  # DEBUG D#191ptD.0 => D#193ptD.0
  # DEBUG D#190ptD.0 => D#192ptD.0
  # DEBUG D#188ptD.0 => D#190ptD.0
  # DEBUG D#189ptD.0 => D#191ptD.0
  # DEBUG __pD.56395 => _79
  # DEBUG thisD.56393 => D#188ptD.0
  # DEBUG D.56394 => D#189ptD.0
  # .MEM_108 = VDEF <.MEM_18>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZdlPvD.2766 (_79);
;;    succ:       164 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 164, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 163, next block 165, flags: (NEW, REACHABLE)
;;    pred:       162 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                163 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_97 = PHI <.MEM_18(162), .MEM_108(163)>
  # DEBUG D#198ptD.0 => &D.41207._M_dataplusD.11519
  # DEBUG thisD.56398 => D#198ptD.0
  # DEBUG thisD.56399 => D#198ptD.0
  # DEBUG thisD.56400 => D#198ptD.0
  # .MEM_47 = VDEF <.MEM_97>
  D.41207 ={v} {CLOBBER};
  [LP 2] resx 3
;;    succ:       165 (EH,EXECUTABLE)

;;   basic block 165, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 164, next block 166, flags: (NEW)
;;    pred:       164 (EH,EXECUTABLE)
<L77>: [LP 2]
  goto <bb 167> (<L28>);
;;    succ:       167 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 166, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 165, next block 167, flags: (NEW)
;;    pred:       17 (EH,EXECUTABLE)
<L47>: [LP 20]
;;    succ:       167 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 167, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 166, next block 168, flags: (NEW, REACHABLE)
;;    pred:       166 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                21 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                65 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                165 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_19 = PHI <.MEM_34(166), .MEM_99(19), .MEM_36(21), .MEM_340(23), .MEM_292(65), .MEM_47(165)>
<L28>:
  [MNT 5] # .MEM_51 = VDEF <.MEM_19>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1EvD.24368 (&ssD.41156);
  resx 2
;;    succ:      

;;   basic block 168, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 167, next block 169, flags: (NEW)
;;    pred:       141 (EH,EXECUTABLE)
<L73>: [LP 44]
;;    succ:       169 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 169, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 168, next block 170, flags: (NEW, REACHABLE)
;;    pred:       168 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                143 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                145 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                147 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_20 = PHI <.MEM_67(168), .MEM_115(143), .MEM_116(145), .MEM_507(147)>
<L30>:
  # DEBUG thisD.56401 => &D.41213
  # DEBUG thisD.56402 => &D.41213
  # DEBUG thisD.56411 => &D.41213
  # VUSE <.MEM_20>
  # PT = nonlocal escaped { D.41213 } (escaped)
  _46 = MEM[(charD.10 * *)&D.41213];
  # DEBUG D#2ptD.0 => &D.41213
  # DEBUG thisD.52147 => D#2ptD.0
  # DEBUG thisD.56412 => &D.41213
  if (&D.41213.D.11539._M_local_bufD.11541 != _46)
    goto <bb 170>;
  else
    goto <bb 171>;
;;    succ:       170 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                171 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 170, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 169, next block 171, flags: (NEW, REACHABLE)
;;    pred:       169 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#197ptD.0 => D.41213.D.11539._M_allocated_capacityD.11542
  # DEBUG D#196ptD.0 => D#197ptD.0
  # DEBUG thisD.56404 => &D.41213
  # DEBUG __sizeD.56403 => D#196ptD.0
  # DEBUG D#195ptD.0 => D#196ptD.0
  # DEBUG D#2ptD.0 => &D.41213
  # DEBUG thisD.53364 => D#2ptD.0
  # DEBUG thisD.53365 => &D.41213
  # DEBUG D#194ptD.0 => &D.41213._M_dataplusD.11519
  # DEBUG D#192ptD.0 => D#194ptD.0
  # DEBUG D#193ptD.0 => D#195ptD.0 + 1
  # DEBUG __pD.56407 => _46
  # DEBUG __aD.56405 => D#192ptD.0
  # DEBUG __nD.56406 => D#193ptD.0
  # DEBUG D#191ptD.0 => D#193ptD.0
  # DEBUG D#190ptD.0 => D#192ptD.0
  # DEBUG D#188ptD.0 => D#190ptD.0
  # DEBUG D#189ptD.0 => D#191ptD.0
  # DEBUG __pD.56410 => _46
  # DEBUG thisD.56408 => D#188ptD.0
  # DEBUG D.56409 => D#189ptD.0
  # .MEM_122 = VDEF <.MEM_20>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZdlPvD.2766 (_46);
;;    succ:       171 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 171, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 170, next block 172, flags: (NEW, REACHABLE)
;;    pred:       169 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                170 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_98 = PHI <.MEM_20(169), .MEM_122(170)>
  # DEBUG D#198ptD.0 => &D.41213._M_dataplusD.11519
  # DEBUG thisD.56413 => D#198ptD.0
  # DEBUG thisD.56414 => D#198ptD.0
  # DEBUG thisD.56415 => D#198ptD.0
  # .MEM_74 = VDEF <.MEM_98>
  D.41213 ={v} {CLOBBER};
  [LP 5] resx 9
;;    succ:       172 (EH,EXECUTABLE)

;;   basic block 172, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 171, next block 173, flags: (NEW)
;;    pred:       171 (EH,EXECUTABLE)
<L78>: [LP 5]
  goto <bb 174> (<L31>);
;;    succ:       174 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 173, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 172, next block 174, flags: (NEW)
;;    pred:       92 (EH,EXECUTABLE)
<L63>: [LP 34]
;;    succ:       174 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 174, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 173, next block 175, flags: (NEW, REACHABLE)
;;    pred:       173 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                94 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                96 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                98 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                140 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                172 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_21 = PHI <.MEM_61(173), .MEM_113(94), .MEM_63(96), .MEM_453(98), .MEM_305(140), .MEM_74(172)>
<L31>:
  [MNT 11] # .MEM_78 = VDEF <.MEM_21>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1EvD.24368 (&ssD.41210);
  resx 8
;;    succ:      

;;   basic block 175, loop depth 0, count 0, freq 6, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 174, next block 176, flags: (NEW, REACHABLE)
;;    pred:       30 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  [LP 47] # .MEM_392 = VDEF <.MEM_369>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZSt19__throw_logic_errorPKcD.2854 ("basic_string::_M_construct null not valid");
;;    succ:       176 (EH,EXECUTABLE)

;;   basic block 176, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 175, next block 177, flags: (NEW)
;;    pred:       175 (EH,EXECUTABLE)
<L79>: [LP 47]
  goto <bb 62> (<L38>);
;;    succ:       62 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 177, loop depth 1, count 0, freq 47, maybe hot
;;    prev block 176, next block 178, flags: (NEW, REACHABLE)
;;    pred:       30 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __firstD.63818 => _151
  # DEBUG __lastD.63817 => _149
  # DEBUG D#466ptD.0 => &__firstD.63818
  # DEBUG D.56025 => D#466ptD.0
  # DEBUG __firstD.63820 => _151
  # DEBUG __lastD.63819 => _149
  __last.73_159 = (long intD.12) _149;
  __first.74_160 = (long intD.12) _151;
  _161 = __last.73_159 - __first.74_160;
  # RANGE [0, 18446744073709551615]
  __dnew.70_162 = (long unsigned intD.14) _161;
  # .MEM_370 = VDEF <.MEM_369>
  __dnewD.63795 = __dnew.70_162;
  if (__dnew.70_162 > 15)
    goto <bb 31>;
  else
    goto <bb 33>;
;;    succ:       31 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 178, loop depth 1, count 0, freq 47, maybe hot
;;    prev block 177, next block 179, flags: (NEW, REACHABLE)
;;    pred:       40 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __firstD.63847 => _153
  # DEBUG __lastD.63846 => _150
  # DEBUG D#466ptD.0 => &__firstD.63847
  # DEBUG D.56025 => D#466ptD.0
  # DEBUG __firstD.63849 => _153
  # DEBUG __lastD.63848 => _150
  __last.73_171 = (long intD.12) _150;
  __first.74_172 = (long intD.12) _153;
  _173 = __last.73_171 - __first.74_172;
  # RANGE [0, 18446744073709551615]
  __dnew.70_174 = (long unsigned intD.14) _173;
  # .MEM_346 = VDEF <.MEM_345>
  __dnewD.63824 = __dnew.70_174;
  if (__dnew.70_174 > 15)
    goto <bb 41>;
  else
    goto <bb 44>;
;;    succ:       41 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 179, loop depth 0, count 0, freq 6, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 178, next block 180, flags: (NEW, REACHABLE)
;;    pred:       40 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  [LP 10] # .MEM_368 = VDEF <.MEM_345>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZSt19__throw_logic_errorPKcD.2854 ("basic_string::_M_construct null not valid");
;;    succ:       180 (EH,EXECUTABLE)

;;   basic block 180, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 179, next block 181, flags: (NEW)
;;    pred:       179 (EH,EXECUTABLE)
<L80>: [LP 10]
  goto <bb 62> (<L38>);
;;    succ:       62 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 181, loop depth 0, count 0, freq 6, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 180, next block 182, flags: (NEW, REACHABLE)
;;    pred:       105 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  [LP 48] # .MEM_505 = VDEF <.MEM_482>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZSt19__throw_logic_errorPKcD.2854 ("basic_string::_M_construct null not valid");
;;    succ:       182 (EH,EXECUTABLE)

;;   basic block 182, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 181, next block 183, flags: (NEW)
;;    pred:       181 (EH,EXECUTABLE)
<L81>: [LP 48]
  goto <bb 137> (<L44>);
;;    succ:       137 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 183, loop depth 1, count 0, freq 46, maybe hot
;;    prev block 182, next block 184, flags: (NEW, REACHABLE)
;;    pred:       105 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __firstD.64075 => _215
  # DEBUG __lastD.64074 => _213
  # DEBUG D#466ptD.0 => &__firstD.64075
  # DEBUG D.56025 => D#466ptD.0
  # DEBUG __firstD.64077 => _215
  # DEBUG __lastD.64076 => _213
  __last.73_223 = (long intD.12) _213;
  __first.74_224 = (long intD.12) _215;
  _225 = __last.73_223 - __first.74_224;
  # RANGE [0, 18446744073709551615]
  __dnew.70_226 = (long unsigned intD.14) _225;
  # .MEM_483 = VDEF <.MEM_482>
  __dnewD.64052 = __dnew.70_226;
  if (__dnew.70_226 > 15)
    goto <bb 106>;
  else
    goto <bb 108>;
;;    succ:       106 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                108 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 184, loop depth 0, count 0, freq 6, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 183, next block 185, flags: (NEW, REACHABLE)
;;    pred:       115 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  [LP 16] # .MEM_481 = VDEF <.MEM_458>
  # USE = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  # CLB = nonlocal null { D.16832 D.21060 D.23717 D.24230 D.24380 D.41156 D.41207 D.41210 D.41213 D.63787 D.63788 D.63795 D.63824 D.64044 D.64045 D.64052 D.64081 } (nonlocal, escaped)
  _ZSt19__throw_logic_errorPKcD.2854 ("basic_string::_M_construct null not valid");
;;    succ:       185 (EH,EXECUTABLE)

;;   basic block 185, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 184, next block 186, flags: (NEW)
;;    pred:       184 (EH,EXECUTABLE)
<L82>: [LP 16]
  goto <bb 137> (<L44>);
;;    succ:       137 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 186, loop depth 1, count 0, freq 46, maybe hot
;;    prev block 185, next block 1, flags: (NEW, REACHABLE)
;;    pred:       115 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __firstD.64104 => _217
  # DEBUG __lastD.64103 => _214
  # DEBUG D#466ptD.0 => &__firstD.64104
  # DEBUG D.56025 => D#466ptD.0
  # DEBUG __firstD.64106 => _217
  # DEBUG __lastD.64105 => _214
  __last.73_235 = (long intD.12) _214;
  __first.74_236 = (long intD.12) _217;
  _237 = __last.73_235 - __first.74_236;
  # RANGE [0, 18446744073709551615]
  __dnew.70_238 = (long unsigned intD.14) _237;
  # .MEM_459 = VDEF <.MEM_458>
  __dnewD.64081 = __dnew.70_238;
  if (__dnew.70_238 > 15)
    goto <bb 116>;
  else
    goto <bb 119>;
;;    succ:       116 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                119 [71.0%]  (FALSE_VALUE,EXECUTABLE)

}



;; Function void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = int; _Val = int; _KeyOfValue = std::_Identity<int>; _Compare = std::less<int>; _Alloc = std::allocator<int>; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<int>*] (_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE, funcdef_no=2008, decl_uid=36688, cgraph_uid=678, symbol_order=679)


Pass statistics:
----------------

void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = int; _Val = int; _KeyOfValue = std::_Identity<int>; _Compare = std::less<int>; _Alloc = std::allocator<int>; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<int>*] (struct _Rb_treeD.36317 * const thisD.36689, struct _Rb_tree_nodeD.36321 * __xD.36690)
{
  struct _Rb_tree_nodeD.36321 * __xD.64378;
  struct _Rb_tree_nodeD.36321 * __xD.64365;
  struct _Rb_tree_nodeD.36321 * __xD.64352;
  struct _Rb_tree_nodeD.36321 * __xD.64339;
  struct _Rb_tree_nodeD.36321 * __xD.64326;
  struct _Rb_tree_nodeD.36321 * __xD.64313;
  struct _Rb_tree_nodeD.36321 * __xD.64300;
  struct _Rb_tree_nodeD.36321 * __xD.64287;
  struct _Rb_tree_node_baseD.24800 * _39;

;;   basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __xD.36690 => __x_3(D)
  if (__x_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_38 = PHI <.MEM_4(D)(2), .MEM_10(6)>
  # VUSE <.MEM_38>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_68 = PHI <__x_3(D)(4), __x_9(38)>
  # .MEM_69 = PHI <.MEM_4(D)(4), .MEM_10(38)>
  # DEBUG __xD.36690 => __x_68
  # VUSE <.MEM_69>
  # PT = nonlocal escaped 
  __x_8 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_68 + 24B];
  # DEBUG D#105ptD.0 => __x_68
  # DEBUG __xD.55005 => D#105ptD.0
  # DEBUG thisD.64286 => this_6(D)
  # DEBUG __xD.64287 => __x_8
  # DEBUG __xD.64287 => __x_8
  if (__x_8 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_34 = PHI <.MEM_69(5), .MEM_50(9)>
  # VUSE <.MEM_34>
  # PT = nonlocal escaped 
  __x_9 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_68 + 16B];
  # DEBUG D#106ptD.0 => __x_68
  # DEBUG __xD.55002 => D#106ptD.0
  # DEBUG __yD.44472 => NULL
  # DEBUG D#399ptD.0 => this_6(D)
  # DEBUG __pD.54991 => __x_68
  # DEBUG thisD.54992 => D#399ptD.0
  # DEBUG D#398ptD.0 => D#399ptD.0
  # DEBUG D#397ptD.0 => D#399ptD.0
  # DEBUG D#396ptD.0 => D#399ptD.0
  # DEBUG D#388ptD.0 => D#396ptD.0
  # DEBUG D#389ptD.0 => __x_68
  # DEBUG thisD.54975 => D#388ptD.0
  # DEBUG __pD.54974 => D#389ptD.0
  # DEBUG D#387ptD.0 => D#388ptD.0
  # DEBUG D#386ptD.0 => D#389ptD.0
  # DEBUG D#385ptD.0 => D#389ptD.0
  # DEBUG thisD.54927 => D#385ptD.0
  # DEBUG D#384ptD.0 => &D#386ptD.0->_M_value_fieldD.44464
  # DEBUG __rD.54912 => D#384ptD.0
  # DEBUG D#383ptD.0 => D#387ptD.0
  # DEBUG thisD.54919 => D#383ptD.0
  # DEBUG D#382ptD.0 => D#383ptD.0
  # DEBUG thisD.54907 => D#382ptD.0
  # DEBUG thisD.54899 => NULL
  # DEBUG D.54900 => NULL
  # DEBUG thisD.54897 => NULL
  # DEBUG D#307ptD.0 => D#384ptD.0
  # DEBUG thisD.54918 => D#306ptD.0
  # DEBUG __pD.54917 => D#307ptD.0
  # DEBUG thisD.54928 => NULL
  # DEBUG thisD.54916 => NULL
  # DEBUG thisD.54994 => D#397ptD.0
  # DEBUG __pD.54993 => __x_68
  # DEBUG thisD.54963 => D#398ptD.0
  # DEBUG D#395ptD.0 => 1
  # DEBUG __pD.54997 => __x_68
  # DEBUG __aD.54995 => D#394ptD.0
  # DEBUG __nD.54996 => D#395ptD.0
  # DEBUG D#393ptD.0 => D#395ptD.0
  # DEBUG D#392ptD.0 => D#394ptD.0
  # DEBUG D#390ptD.0 => D#392ptD.0
  # DEBUG D#391ptD.0 => D#393ptD.0
  # DEBUG __pD.55000 => __x_68
  # DEBUG thisD.54998 => D#390ptD.0
  # DEBUG D.54999 => D#391ptD.0
  # .MEM_10 = VDEF <.MEM_34>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_68);
  # DEBUG __xD.36690 => __x_9
  # DEBUG __xD.36690 => __x_9
  if (__x_9 == 0B)
    goto <bb 3>;
  else
    goto <bb 38>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_72 = PHI <__x_8(7), __x_13(37)>
  # .MEM_93 = PHI <.MEM_69(7), .MEM_50(37)>
  # DEBUG __xD.64287 => __x_72
  # VUSE <.MEM_93>
  # PT = nonlocal escaped 
  __x_12 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_72 + 24B];
  # DEBUG D#105ptD.0 => __x_72
  # DEBUG __xD.55005 => D#105ptD.0
  # DEBUG thisD.64299 => this_6(D)
  # DEBUG __xD.64300 => __x_12
  # DEBUG __xD.64300 => __x_12
  if (__x_12 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_30 = PHI <.MEM_93(8), .MEM_49(12)>
  # VUSE <.MEM_30>
  # PT = nonlocal escaped 
  __x_13 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_72 + 16B];
  # DEBUG D#106ptD.0 => __x_72
  # DEBUG __xD.55002 => D#106ptD.0
  # DEBUG __yD.64288 => NULL
  # DEBUG D#399ptD.0 => this_6(D)
  # DEBUG __pD.64290 => __x_72
  # DEBUG thisD.64289 => D#399ptD.0
  # DEBUG D#398ptD.0 => D#399ptD.0
  # DEBUG D#397ptD.0 => D#399ptD.0
  # DEBUG D#396ptD.0 => D#399ptD.0
  # DEBUG D#388ptD.0 => D#396ptD.0
  # DEBUG D#389ptD.0 => __x_72
  # DEBUG thisD.54975 => D#388ptD.0
  # DEBUG __pD.54974 => D#389ptD.0
  # DEBUG D#387ptD.0 => D#388ptD.0
  # DEBUG D#386ptD.0 => D#389ptD.0
  # DEBUG D#385ptD.0 => D#389ptD.0
  # DEBUG thisD.54927 => D#385ptD.0
  # DEBUG D#384ptD.0 => &D#386ptD.0->_M_value_fieldD.44464
  # DEBUG __rD.54912 => D#384ptD.0
  # DEBUG D#383ptD.0 => D#387ptD.0
  # DEBUG thisD.54919 => D#383ptD.0
  # DEBUG D#382ptD.0 => D#383ptD.0
  # DEBUG thisD.54907 => D#382ptD.0
  # DEBUG thisD.54899 => NULL
  # DEBUG D.54900 => NULL
  # DEBUG thisD.54897 => NULL
  # DEBUG D#307ptD.0 => D#384ptD.0
  # DEBUG thisD.54918 => D#306ptD.0
  # DEBUG __pD.54917 => D#307ptD.0
  # DEBUG thisD.54928 => NULL
  # DEBUG thisD.54916 => NULL
  # DEBUG thisD.64292 => D#397ptD.0
  # DEBUG __pD.64291 => __x_72
  # DEBUG thisD.54963 => D#398ptD.0
  # DEBUG D#395ptD.0 => 1
  # DEBUG __pD.64295 => __x_72
  # DEBUG __aD.64293 => D#394ptD.0
  # DEBUG __nD.64294 => D#395ptD.0
  # DEBUG D#393ptD.0 => D#395ptD.0
  # DEBUG D#392ptD.0 => D#394ptD.0
  # DEBUG D#390ptD.0 => D#392ptD.0
  # DEBUG D#391ptD.0 => D#393ptD.0
  # DEBUG __pD.64298 => __x_72
  # DEBUG thisD.64296 => D#390ptD.0
  # DEBUG D.64297 => D#391ptD.0
  # .MEM_50 = VDEF <.MEM_30>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_72);
  # DEBUG __xD.64287 => __x_13
  # DEBUG __xD.64287 => __x_13
  if (__x_13 == 0B)
    goto <bb 6>;
  else
    goto <bb 37>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                36 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_71 = PHI <__x_12(10), __x_16(36)>
  # .MEM_90 = PHI <.MEM_93(10), .MEM_49(36)>
  # DEBUG __xD.64300 => __x_71
  # VUSE <.MEM_90>
  # PT = nonlocal escaped 
  __x_15 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_71 + 24B];
  # DEBUG D#105ptD.0 => __x_71
  # DEBUG __xD.55005 => D#105ptD.0
  # DEBUG thisD.64312 => this_6(D)
  # DEBUG __xD.64313 => __x_15
  # DEBUG __xD.64313 => __x_15
  if (__x_15 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;
;;    succ:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_26 = PHI <.MEM_90(11), .MEM_48(15)>
  # VUSE <.MEM_26>
  # PT = nonlocal escaped 
  __x_16 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_71 + 16B];
  # DEBUG D#106ptD.0 => __x_71
  # DEBUG __xD.55002 => D#106ptD.0
  # DEBUG __yD.64301 => NULL
  # DEBUG D#399ptD.0 => this_6(D)
  # DEBUG __pD.64303 => __x_71
  # DEBUG thisD.64302 => D#399ptD.0
  # DEBUG D#398ptD.0 => D#399ptD.0
  # DEBUG D#397ptD.0 => D#399ptD.0
  # DEBUG D#396ptD.0 => D#399ptD.0
  # DEBUG D#388ptD.0 => D#396ptD.0
  # DEBUG D#389ptD.0 => __x_71
  # DEBUG thisD.54975 => D#388ptD.0
  # DEBUG __pD.54974 => D#389ptD.0
  # DEBUG D#387ptD.0 => D#388ptD.0
  # DEBUG D#386ptD.0 => D#389ptD.0
  # DEBUG D#385ptD.0 => D#389ptD.0
  # DEBUG thisD.54927 => D#385ptD.0
  # DEBUG D#384ptD.0 => &D#386ptD.0->_M_value_fieldD.44464
  # DEBUG __rD.54912 => D#384ptD.0
  # DEBUG D#383ptD.0 => D#387ptD.0
  # DEBUG thisD.54919 => D#383ptD.0
  # DEBUG D#382ptD.0 => D#383ptD.0
  # DEBUG thisD.54907 => D#382ptD.0
  # DEBUG thisD.54899 => NULL
  # DEBUG D.54900 => NULL
  # DEBUG thisD.54897 => NULL
  # DEBUG D#307ptD.0 => D#384ptD.0
  # DEBUG thisD.54918 => D#306ptD.0
  # DEBUG __pD.54917 => D#307ptD.0
  # DEBUG thisD.54928 => NULL
  # DEBUG thisD.54916 => NULL
  # DEBUG thisD.64305 => D#397ptD.0
  # DEBUG __pD.64304 => __x_71
  # DEBUG thisD.54963 => D#398ptD.0
  # DEBUG D#395ptD.0 => 1
  # DEBUG __pD.64308 => __x_71
  # DEBUG __aD.64306 => D#394ptD.0
  # DEBUG __nD.64307 => D#395ptD.0
  # DEBUG D#393ptD.0 => D#395ptD.0
  # DEBUG D#392ptD.0 => D#394ptD.0
  # DEBUG D#390ptD.0 => D#392ptD.0
  # DEBUG D#391ptD.0 => D#393ptD.0
  # DEBUG __pD.64311 => __x_71
  # DEBUG thisD.64309 => D#390ptD.0
  # DEBUG D.64310 => D#391ptD.0
  # .MEM_49 = VDEF <.MEM_26>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_71);
  # DEBUG __xD.64300 => __x_16
  # DEBUG __xD.64300 => __x_16
  if (__x_16 == 0B)
    goto <bb 9>;
  else
    goto <bb 36>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       11 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_77 = PHI <__x_15(13), __x_20(35)>
  # .MEM_87 = PHI <.MEM_90(13), .MEM_48(35)>
  # DEBUG __xD.64313 => __x_77
  # VUSE <.MEM_87>
  # PT = nonlocal escaped 
  __x_19 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_77 + 24B];
  # DEBUG D#105ptD.0 => __x_77
  # DEBUG __xD.55005 => D#105ptD.0
  # DEBUG thisD.64325 => this_6(D)
  # DEBUG __xD.64326 => __x_19
  # DEBUG __xD.64326 => __x_19
  if (__x_19 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_25 = PHI <.MEM_87(14), .MEM_47(18)>
  # VUSE <.MEM_25>
  # PT = nonlocal escaped 
  __x_20 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_77 + 16B];
  # DEBUG D#106ptD.0 => __x_77
  # DEBUG __xD.55002 => D#106ptD.0
  # DEBUG __yD.64314 => NULL
  # DEBUG D#399ptD.0 => this_6(D)
  # DEBUG __pD.64316 => __x_77
  # DEBUG thisD.64315 => D#399ptD.0
  # DEBUG D#398ptD.0 => D#399ptD.0
  # DEBUG D#397ptD.0 => D#399ptD.0
  # DEBUG D#396ptD.0 => D#399ptD.0
  # DEBUG D#388ptD.0 => D#396ptD.0
  # DEBUG D#389ptD.0 => __x_77
  # DEBUG thisD.54975 => D#388ptD.0
  # DEBUG __pD.54974 => D#389ptD.0
  # DEBUG D#387ptD.0 => D#388ptD.0
  # DEBUG D#386ptD.0 => D#389ptD.0
  # DEBUG D#385ptD.0 => D#389ptD.0
  # DEBUG thisD.54927 => D#385ptD.0
  # DEBUG D#384ptD.0 => &D#386ptD.0->_M_value_fieldD.44464
  # DEBUG __rD.54912 => D#384ptD.0
  # DEBUG D#383ptD.0 => D#387ptD.0
  # DEBUG thisD.54919 => D#383ptD.0
  # DEBUG D#382ptD.0 => D#383ptD.0
  # DEBUG thisD.54907 => D#382ptD.0
  # DEBUG thisD.54899 => NULL
  # DEBUG D.54900 => NULL
  # DEBUG thisD.54897 => NULL
  # DEBUG D#307ptD.0 => D#384ptD.0
  # DEBUG thisD.54918 => D#306ptD.0
  # DEBUG __pD.54917 => D#307ptD.0
  # DEBUG thisD.54928 => NULL
  # DEBUG thisD.54916 => NULL
  # DEBUG thisD.64318 => D#397ptD.0
  # DEBUG __pD.64317 => __x_77
  # DEBUG thisD.54963 => D#398ptD.0
  # DEBUG D#395ptD.0 => 1
  # DEBUG __pD.64321 => __x_77
  # DEBUG __aD.64319 => D#394ptD.0
  # DEBUG __nD.64320 => D#395ptD.0
  # DEBUG D#393ptD.0 => D#395ptD.0
  # DEBUG D#392ptD.0 => D#394ptD.0
  # DEBUG D#390ptD.0 => D#392ptD.0
  # DEBUG D#391ptD.0 => D#393ptD.0
  # DEBUG __pD.64324 => __x_77
  # DEBUG thisD.64322 => D#390ptD.0
  # DEBUG D.64323 => D#391ptD.0
  # .MEM_48 = VDEF <.MEM_25>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_77);
  # DEBUG __xD.64313 => __x_20
  # DEBUG __xD.64313 => __x_20
  if (__x_20 == 0B)
    goto <bb 12>;
  else
    goto <bb 35>;
;;    succ:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       14 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                34 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_80 = PHI <__x_19(16), __x_24(34)>
  # .MEM_84 = PHI <.MEM_87(16), .MEM_47(34)>
  # DEBUG __xD.64326 => __x_80
  # VUSE <.MEM_84>
  # PT = nonlocal escaped 
  __x_23 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_80 + 24B];
  # DEBUG D#105ptD.0 => __x_80
  # DEBUG __xD.55005 => D#105ptD.0
  # DEBUG thisD.64338 => this_6(D)
  # DEBUG __xD.64339 => __x_23
  # DEBUG __xD.64339 => __x_23
  if (__x_23 == 0B)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_21 = PHI <.MEM_84(17), .MEM_46(21)>
  # VUSE <.MEM_21>
  # PT = nonlocal escaped 
  __x_24 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_80 + 16B];
  # DEBUG D#106ptD.0 => __x_80
  # DEBUG __xD.55002 => D#106ptD.0
  # DEBUG __yD.64327 => NULL
  # DEBUG D#399ptD.0 => this_6(D)
  # DEBUG __pD.64329 => __x_80
  # DEBUG thisD.64328 => D#399ptD.0
  # DEBUG D#398ptD.0 => D#399ptD.0
  # DEBUG D#397ptD.0 => D#399ptD.0
  # DEBUG D#396ptD.0 => D#399ptD.0
  # DEBUG D#388ptD.0 => D#396ptD.0
  # DEBUG D#389ptD.0 => __x_80
  # DEBUG thisD.54975 => D#388ptD.0
  # DEBUG __pD.54974 => D#389ptD.0
  # DEBUG D#387ptD.0 => D#388ptD.0
  # DEBUG D#386ptD.0 => D#389ptD.0
  # DEBUG D#385ptD.0 => D#389ptD.0
  # DEBUG thisD.54927 => D#385ptD.0
  # DEBUG D#384ptD.0 => &D#386ptD.0->_M_value_fieldD.44464
  # DEBUG __rD.54912 => D#384ptD.0
  # DEBUG D#383ptD.0 => D#387ptD.0
  # DEBUG thisD.54919 => D#383ptD.0
  # DEBUG D#382ptD.0 => D#383ptD.0
  # DEBUG thisD.54907 => D#382ptD.0
  # DEBUG thisD.54899 => NULL
  # DEBUG D.54900 => NULL
  # DEBUG thisD.54897 => NULL
  # DEBUG D#307ptD.0 => D#384ptD.0
  # DEBUG thisD.54918 => D#306ptD.0
  # DEBUG __pD.54917 => D#307ptD.0
  # DEBUG thisD.54928 => NULL
  # DEBUG thisD.54916 => NULL
  # DEBUG thisD.64331 => D#397ptD.0
  # DEBUG __pD.64330 => __x_80
  # DEBUG thisD.54963 => D#398ptD.0
  # DEBUG D#395ptD.0 => 1
  # DEBUG __pD.64334 => __x_80
  # DEBUG __aD.64332 => D#394ptD.0
  # DEBUG __nD.64333 => D#395ptD.0
  # DEBUG D#393ptD.0 => D#395ptD.0
  # DEBUG D#392ptD.0 => D#394ptD.0
  # DEBUG D#390ptD.0 => D#392ptD.0
  # DEBUG D#391ptD.0 => D#393ptD.0
  # DEBUG __pD.64337 => __x_80
  # DEBUG thisD.64335 => D#390ptD.0
  # DEBUG D.64336 => D#391ptD.0
  # .MEM_47 = VDEF <.MEM_21>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_80);
  # DEBUG __xD.64326 => __x_24
  # DEBUG __xD.64326 => __x_24
  if (__x_24 == 0B)
    goto <bb 15>;
  else
    goto <bb 34>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 6, count 0, freq 9, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_81 = PHI <.MEM_84(19), .MEM_46(33)>
  # PT = nonlocal escaped 
  # __x_83 = PHI <__x_23(19), __x_28(33)>
  # DEBUG __xD.64339 => __x_83
  # VUSE <.MEM_81>
  # PT = nonlocal escaped 
  __x_27 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_83 + 24B];
  # DEBUG D#105ptD.0 => __x_83
  # DEBUG __xD.55005 => D#105ptD.0
  # DEBUG thisD.64351 => this_6(D)
  # DEBUG __xD.64352 => __x_27
  # DEBUG __xD.64352 => __x_27
  if (__x_27 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 6, count 0, freq 9, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_17 = PHI <.MEM_81(20), .MEM_45(24)>
  # VUSE <.MEM_17>
  # PT = nonlocal escaped 
  __x_28 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_83 + 16B];
  # DEBUG D#106ptD.0 => __x_83
  # DEBUG __xD.55002 => D#106ptD.0
  # DEBUG __yD.64340 => NULL
  # DEBUG D#399ptD.0 => this_6(D)
  # DEBUG __pD.64342 => __x_83
  # DEBUG thisD.64341 => D#399ptD.0
  # DEBUG D#398ptD.0 => D#399ptD.0
  # DEBUG D#397ptD.0 => D#399ptD.0
  # DEBUG D#396ptD.0 => D#399ptD.0
  # DEBUG D#388ptD.0 => D#396ptD.0
  # DEBUG D#389ptD.0 => __x_83
  # DEBUG thisD.54975 => D#388ptD.0
  # DEBUG __pD.54974 => D#389ptD.0
  # DEBUG D#387ptD.0 => D#388ptD.0
  # DEBUG D#386ptD.0 => D#389ptD.0
  # DEBUG D#385ptD.0 => D#389ptD.0
  # DEBUG thisD.54927 => D#385ptD.0
  # DEBUG D#384ptD.0 => &D#386ptD.0->_M_value_fieldD.44464
  # DEBUG __rD.54912 => D#384ptD.0
  # DEBUG D#383ptD.0 => D#387ptD.0
  # DEBUG thisD.54919 => D#383ptD.0
  # DEBUG D#382ptD.0 => D#383ptD.0
  # DEBUG thisD.54907 => D#382ptD.0
  # DEBUG thisD.54899 => NULL
  # DEBUG D.54900 => NULL
  # DEBUG thisD.54897 => NULL
  # DEBUG D#307ptD.0 => D#384ptD.0
  # DEBUG thisD.54918 => D#306ptD.0
  # DEBUG __pD.54917 => D#307ptD.0
  # DEBUG thisD.54928 => NULL
  # DEBUG thisD.54916 => NULL
  # DEBUG thisD.64344 => D#397ptD.0
  # DEBUG __pD.64343 => __x_83
  # DEBUG thisD.54963 => D#398ptD.0
  # DEBUG D#395ptD.0 => 1
  # DEBUG __pD.64347 => __x_83
  # DEBUG __aD.64345 => D#394ptD.0
  # DEBUG __nD.64346 => D#395ptD.0
  # DEBUG D#393ptD.0 => D#395ptD.0
  # DEBUG D#392ptD.0 => D#394ptD.0
  # DEBUG D#390ptD.0 => D#392ptD.0
  # DEBUG D#391ptD.0 => D#393ptD.0
  # DEBUG __pD.64350 => __x_83
  # DEBUG thisD.64348 => D#390ptD.0
  # DEBUG D.64349 => D#391ptD.0
  # .MEM_46 = VDEF <.MEM_17>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_83);
  # DEBUG __xD.64339 => __x_28
  # DEBUG __xD.64339 => __x_28
  if (__x_28 == 0B)
    goto <bb 18>;
  else
    goto <bb 33>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 21, next block 23, flags: (NEW)
;;    pred:       20 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 7, count 0, freq 89, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_78 = PHI <.MEM_81(22), .MEM_45(32)>
  # PT = nonlocal escaped 
  # __x_86 = PHI <__x_27(22), __x_32(32)>
  # DEBUG __xD.64352 => __x_86
  # VUSE <.MEM_78>
  # PT = nonlocal escaped 
  __x_31 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_86 + 24B];
  # DEBUG D#105ptD.0 => __x_86
  # DEBUG __xD.55005 => D#105ptD.0
  # DEBUG thisD.64364 => this_6(D)
  # DEBUG __xD.64365 => __x_31
  # DEBUG __xD.64365 => __x_31
  if (__x_31 == 0B)
    goto <bb 24>;
  else
    goto <bb 25>;
;;    succ:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 7, count 0, freq 89, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_14 = PHI <.MEM_78(23), .MEM_44(27)>
  # VUSE <.MEM_14>
  # PT = nonlocal escaped 
  __x_32 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_86 + 16B];
  # DEBUG D#106ptD.0 => __x_86
  # DEBUG __xD.55002 => D#106ptD.0
  # DEBUG __yD.64353 => NULL
  # DEBUG D#399ptD.0 => this_6(D)
  # DEBUG __pD.64355 => __x_86
  # DEBUG thisD.64354 => D#399ptD.0
  # DEBUG D#398ptD.0 => D#399ptD.0
  # DEBUG D#397ptD.0 => D#399ptD.0
  # DEBUG D#396ptD.0 => D#399ptD.0
  # DEBUG D#388ptD.0 => D#396ptD.0
  # DEBUG D#389ptD.0 => __x_86
  # DEBUG thisD.54975 => D#388ptD.0
  # DEBUG __pD.54974 => D#389ptD.0
  # DEBUG D#387ptD.0 => D#388ptD.0
  # DEBUG D#386ptD.0 => D#389ptD.0
  # DEBUG D#385ptD.0 => D#389ptD.0
  # DEBUG thisD.54927 => D#385ptD.0
  # DEBUG D#384ptD.0 => &D#386ptD.0->_M_value_fieldD.44464
  # DEBUG __rD.54912 => D#384ptD.0
  # DEBUG D#383ptD.0 => D#387ptD.0
  # DEBUG thisD.54919 => D#383ptD.0
  # DEBUG D#382ptD.0 => D#383ptD.0
  # DEBUG thisD.54907 => D#382ptD.0
  # DEBUG thisD.54899 => NULL
  # DEBUG D.54900 => NULL
  # DEBUG thisD.54897 => NULL
  # DEBUG D#307ptD.0 => D#384ptD.0
  # DEBUG thisD.54918 => D#306ptD.0
  # DEBUG __pD.54917 => D#307ptD.0
  # DEBUG thisD.54928 => NULL
  # DEBUG thisD.54916 => NULL
  # DEBUG thisD.64357 => D#397ptD.0
  # DEBUG __pD.64356 => __x_86
  # DEBUG thisD.54963 => D#398ptD.0
  # DEBUG D#395ptD.0 => 1
  # DEBUG __pD.64360 => __x_86
  # DEBUG __aD.64358 => D#394ptD.0
  # DEBUG __nD.64359 => D#395ptD.0
  # DEBUG D#393ptD.0 => D#395ptD.0
  # DEBUG D#392ptD.0 => D#394ptD.0
  # DEBUG D#390ptD.0 => D#392ptD.0
  # DEBUG D#391ptD.0 => D#393ptD.0
  # DEBUG __pD.64363 => __x_86
  # DEBUG thisD.64361 => D#390ptD.0
  # DEBUG D.64362 => D#391ptD.0
  # .MEM_45 = VDEF <.MEM_14>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_86);
  # DEBUG __xD.64352 => __x_32
  # DEBUG __xD.64352 => __x_32
  if (__x_32 == 0B)
    goto <bb 21>;
  else
    goto <bb 32>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 24, next block 26, flags: (NEW)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 8, count 0, freq 900, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_75 = PHI <.MEM_78(25), .MEM_44(31)>
  # PT = nonlocal escaped 
  # __x_89 = PHI <__x_31(25), __x_36(31)>
  # DEBUG __xD.64365 => __x_89
  # VUSE <.MEM_75>
  # PT = nonlocal escaped 
  __x_35 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_89 + 24B];
  # DEBUG D#105ptD.0 => __x_89
  # DEBUG __xD.55005 => D#105ptD.0
  # DEBUG thisD.64377 => this_6(D)
  # DEBUG __xD.64378 => __x_35
  # DEBUG __xD.64378 => __x_35
  if (__x_35 == 0B)
    goto <bb 27>;
  else
    goto <bb 28>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 8, count 0, freq 900, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       26 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_22 = PHI <.MEM_75(26), .MEM_43(29)>
  # VUSE <.MEM_22>
  # PT = nonlocal escaped 
  __x_36 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_89 + 16B];
  # DEBUG D#106ptD.0 => __x_89
  # DEBUG __xD.55002 => D#106ptD.0
  # DEBUG __yD.64366 => NULL
  # DEBUG D#399ptD.0 => this_6(D)
  # DEBUG __pD.64368 => __x_89
  # DEBUG thisD.64367 => D#399ptD.0
  # DEBUG D#398ptD.0 => D#399ptD.0
  # DEBUG D#397ptD.0 => D#399ptD.0
  # DEBUG D#396ptD.0 => D#399ptD.0
  # DEBUG D#388ptD.0 => D#396ptD.0
  # DEBUG D#389ptD.0 => __x_89
  # DEBUG thisD.54975 => D#388ptD.0
  # DEBUG __pD.54974 => D#389ptD.0
  # DEBUG D#387ptD.0 => D#388ptD.0
  # DEBUG D#386ptD.0 => D#389ptD.0
  # DEBUG D#385ptD.0 => D#389ptD.0
  # DEBUG thisD.54927 => D#385ptD.0
  # DEBUG D#384ptD.0 => &D#386ptD.0->_M_value_fieldD.44464
  # DEBUG __rD.54912 => D#384ptD.0
  # DEBUG D#383ptD.0 => D#387ptD.0
  # DEBUG thisD.54919 => D#383ptD.0
  # DEBUG D#382ptD.0 => D#383ptD.0
  # DEBUG thisD.54907 => D#382ptD.0
  # DEBUG thisD.54899 => NULL
  # DEBUG D.54900 => NULL
  # DEBUG thisD.54897 => NULL
  # DEBUG D#307ptD.0 => D#384ptD.0
  # DEBUG thisD.54918 => D#306ptD.0
  # DEBUG __pD.54917 => D#307ptD.0
  # DEBUG thisD.54928 => NULL
  # DEBUG thisD.54916 => NULL
  # DEBUG thisD.64370 => D#397ptD.0
  # DEBUG __pD.64369 => __x_89
  # DEBUG thisD.54963 => D#398ptD.0
  # DEBUG D#395ptD.0 => 1
  # DEBUG __pD.64373 => __x_89
  # DEBUG __aD.64371 => D#394ptD.0
  # DEBUG __nD.64372 => D#395ptD.0
  # DEBUG D#393ptD.0 => D#395ptD.0
  # DEBUG D#392ptD.0 => D#394ptD.0
  # DEBUG D#390ptD.0 => D#392ptD.0
  # DEBUG D#391ptD.0 => D#393ptD.0
  # DEBUG __pD.64376 => __x_89
  # DEBUG thisD.64374 => D#390ptD.0
  # DEBUG D.64375 => D#391ptD.0
  # .MEM_44 = VDEF <.MEM_22>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_89);
  # DEBUG __xD.64365 => __x_36
  # DEBUG __xD.64365 => __x_36
  if (__x_36 == 0B)
    goto <bb 24>;
  else
    goto <bb 31>;
;;    succ:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 27, next block 29, flags: (NEW)
;;    pred:       26 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 9, count 0, freq 9100, maybe hot
;;    prev block 28, next block 30, flags: (NEW)
;;    pred:       28 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_73 = PHI <.MEM_75(28), .MEM_43(30)>
  # PT = nonlocal escaped 
  # __x_92 = PHI <__x_35(28), __x_40(30)>
  # DEBUG __xD.64378 => __x_92
  # VUSE <.MEM_73>
  # PT = nonlocal escaped 
  _39 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_92 + 24B];
  # DEBUG D#105ptD.0 => __x_92
  # DEBUG __xD.55005 => D#105ptD.0
  # .MEM_42 = VDEF <.MEM_73>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiED.36688 (this_6(D), _39);
  # VUSE <.MEM_42>
  # PT = nonlocal escaped 
  __x_40 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_92 + 16B];
  # DEBUG D#106ptD.0 => __x_92
  # DEBUG __xD.55002 => D#106ptD.0
  # DEBUG __yD.64379 => NULL
  # DEBUG D#399ptD.0 => this_6(D)
  # DEBUG __pD.64381 => __x_92
  # DEBUG thisD.64380 => D#399ptD.0
  # DEBUG D#398ptD.0 => D#399ptD.0
  # DEBUG D#397ptD.0 => D#399ptD.0
  # DEBUG D#396ptD.0 => D#399ptD.0
  # DEBUG D#388ptD.0 => D#396ptD.0
  # DEBUG D#389ptD.0 => __x_92
  # DEBUG thisD.54975 => D#388ptD.0
  # DEBUG __pD.54974 => D#389ptD.0
  # DEBUG D#387ptD.0 => D#388ptD.0
  # DEBUG D#386ptD.0 => D#389ptD.0
  # DEBUG D#385ptD.0 => D#389ptD.0
  # DEBUG thisD.54927 => D#385ptD.0
  # DEBUG D#384ptD.0 => &D#386ptD.0->_M_value_fieldD.44464
  # DEBUG __rD.54912 => D#384ptD.0
  # DEBUG D#383ptD.0 => D#387ptD.0
  # DEBUG thisD.54919 => D#383ptD.0
  # DEBUG D#382ptD.0 => D#383ptD.0
  # DEBUG thisD.54907 => D#382ptD.0
  # DEBUG thisD.54899 => NULL
  # DEBUG D.54900 => NULL
  # DEBUG thisD.54897 => NULL
  # DEBUG D#307ptD.0 => D#384ptD.0
  # DEBUG thisD.54918 => D#306ptD.0
  # DEBUG __pD.54917 => D#307ptD.0
  # DEBUG thisD.54928 => NULL
  # DEBUG thisD.54916 => NULL
  # DEBUG thisD.64383 => D#397ptD.0
  # DEBUG __pD.64382 => __x_92
  # DEBUG thisD.54963 => D#398ptD.0
  # DEBUG D#395ptD.0 => 1
  # DEBUG __pD.64386 => __x_92
  # DEBUG __aD.64384 => D#394ptD.0
  # DEBUG __nD.64385 => D#395ptD.0
  # DEBUG D#393ptD.0 => D#395ptD.0
  # DEBUG D#392ptD.0 => D#394ptD.0
  # DEBUG D#390ptD.0 => D#392ptD.0
  # DEBUG D#391ptD.0 => D#393ptD.0
  # DEBUG __pD.64389 => __x_92
  # DEBUG thisD.64387 => D#390ptD.0
  # DEBUG D.64388 => D#391ptD.0
  # .MEM_43 = VDEF <.MEM_42>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_92);
  # DEBUG __xD.64378 => __x_40
  # DEBUG __xD.64378 => __x_40
  if (__x_40 == 0B)
    goto <bb 27>;
  else
    goto <bb 30>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 9, count 0, freq 8281, maybe hot
;;    prev block 29, next block 31, flags: (NEW)
;;    pred:       29 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 31, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       27 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 32, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 31, next block 33, flags: (NEW)
;;    pred:       24 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 33, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 32, next block 34, flags: (NEW)
;;    pred:       21 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 34, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 33, next block 35, flags: (NEW)
;;    pred:       18 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 35, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 34, next block 36, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 36, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 35, next block 37, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 37, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 36, next block 38, flags: (NEW)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 38, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 37, next block 1, flags: (NEW)
;;    pred:       6 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

}



Updating SSA:
Registering new PHI nodes in block #5
Registering new PHI nodes in block #7
Registering new PHI nodes in block #8
Registering new PHI nodes in block #10
Registering new PHI nodes in block #11
Registering new PHI nodes in block #13
Registering new PHI nodes in block #14
Registering new PHI nodes in block #16
Registering new PHI nodes in block #17
Registering new PHI nodes in block #19
Registering new PHI nodes in block #20
Registering new PHI nodes in block #22
Registering new PHI nodes in block #23
Registering new PHI nodes in block #25
Registering new PHI nodes in block #26
Registering new PHI nodes in block #28
Registering new PHI nodes in block #29
Updating SSA information for statement operator delete (__x_92);
Registering new PHI nodes in block #30
Registering new PHI nodes in block #47
Registering new PHI nodes in block #27
Updating SSA information for statement operator delete (__x_89);
Registering new PHI nodes in block #31
Registering new PHI nodes in block #46
Registering new PHI nodes in block #24
Updating SSA information for statement operator delete (__x_86);
Registering new PHI nodes in block #32
Registering new PHI nodes in block #45
Registering new PHI nodes in block #21
Updating SSA information for statement operator delete (__x_83);
Registering new PHI nodes in block #33
Registering new PHI nodes in block #44
Registering new PHI nodes in block #18
Updating SSA information for statement operator delete (__x_80);
Registering new PHI nodes in block #34
Registering new PHI nodes in block #43
Registering new PHI nodes in block #15
Updating SSA information for statement operator delete (__x_77);
Registering new PHI nodes in block #35
Registering new PHI nodes in block #42
Registering new PHI nodes in block #12
Updating SSA information for statement operator delete (__x_71);
Registering new PHI nodes in block #36
Registering new PHI nodes in block #41
Registering new PHI nodes in block #9
Updating SSA information for statement operator delete (__x_72);
Registering new PHI nodes in block #37
Registering new PHI nodes in block #40
Registering new PHI nodes in block #6
Updating SSA information for statement operator delete (__x_68);
Registering new PHI nodes in block #38
Registering new PHI nodes in block #39

DFA Statistics for void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = int; _Val = int; _KeyOfValue = std::_Identity<int>; _Compare = std::less<int>; _Alloc = std::allocator<int>; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<int>*]

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                            171       1368b
DEF operands                             18        144b
VUSE operands                            29        232b
VDEF operands                            10         80b
PHI nodes                                36       3744b
PHI arguments                            63       3024b
---------------------------------------------------------
Total memory used by DFA/SSA data                 8592b
---------------------------------------------------------

Average number of arguments per PHI node: 1.8 (max: 2)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_70 -> { .MEM_10 }
.MEM_74 -> { .MEM_43 }
.MEM_76 -> { .MEM_44 }
.MEM_79 -> { .MEM_45 }
.MEM_82 -> { .MEM_46 }
.MEM_85 -> { .MEM_47 }
.MEM_88 -> { .MEM_48 }
.MEM_91 -> { .MEM_49 }
.MEM_94 -> { .MEM_50 }
Incremental SSA update started at block: 5
Number of blocks in CFG: 48
Number of blocks to update: 35 ( 73%)
Affected blocks: 5 6 8 9 11 12 14 15 17 18 20 21 23 24 26 27 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47


Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:49, LOOPS:9, CONDITIONS:18, STMTS:522)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # DEBUG __x => __x_3(D)
    if (__x_3(D) == 0B)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 bb_39 }, succs = {bb_48 })
  {
    <bb 3>:
    # .MEM_38 = PHI <.MEM_4(D)(2), .MEM_70(39)>

  }
  bb_48 (preds = {bb_3 }, succs = {bb_1 })
  {
    <bb 48>:
    # VUSE <.MEM_38>
    return;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 })
  {
    <bb 4>:

  }
  bb_39 (preds = {bb_6 }, succs = {bb_3 })
  {
    <bb 39>:
    # .MEM_70 = PHI <.MEM_10(6)>
    goto <bb 3>;

  }
  loop_1 (header = 5, latch = 38, niter = )
  {
    bb_5 (preds = {bb_4 bb_38 }, succs = {bb_6 bb_7 })
    {
      <bb 5>:
      # __x_68 = PHI <__x_3(D)(4), __x_9(38)>
      # .MEM_69 = PHI <.MEM_4(D)(4), .MEM_10(38)>
      # DEBUG __x => __x_68
      # VUSE <.MEM_69>
      __x_8 = MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B];
      # DEBUG D#105 => __x_68
      # DEBUG __x => D#105
      # DEBUG this => this_6(D)
      # DEBUG __x => __x_8
      # DEBUG __x => __x_8
      if (__x_8 == 0B)
        goto <bb 6>;
      else
        goto <bb 7>;

    }
    bb_6 (preds = {bb_5 bb_40 }, succs = {bb_39 bb_38 })
    {
      <bb 6>:
      # .MEM_34 = PHI <.MEM_69(5), .MEM_94(40)>
      # VUSE <.MEM_34>
      __x_9 = MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B];
      # DEBUG D#106 => __x_68
      # DEBUG __x => D#106
      # DEBUG __y => NULL
      # DEBUG D#399 => this_6(D)
      # DEBUG __p => __x_68
      # DEBUG this => D#399
      # DEBUG D#398 => D#399
      # DEBUG D#397 => D#399
      # DEBUG D#396 => D#399
      # DEBUG D#388 => D#396
      # DEBUG D#389 => __x_68
      # DEBUG this => D#388
      # DEBUG __p => D#389
      # DEBUG D#387 => D#388
      # DEBUG D#386 => D#389
      # DEBUG D#385 => D#389
      # DEBUG this => D#385
      # DEBUG D#384 => &D#386->_M_value_field
      # DEBUG __r => D#384
      # DEBUG D#383 => D#387
      # DEBUG this => D#383
      # DEBUG D#382 => D#383
      # DEBUG this => D#382
      # DEBUG this => NULL
      # DEBUG D.54900 => NULL
      # DEBUG this => NULL
      # DEBUG D#307 => D#384
      # DEBUG this => D#306
      # DEBUG __p => D#307
      # DEBUG this => NULL
      # DEBUG this => NULL
      # DEBUG this => D#397
      # DEBUG __p => __x_68
      # DEBUG this => D#398
      # DEBUG D#395 => 1
      # DEBUG __p => __x_68
      # DEBUG __a => D#394
      # DEBUG __n => D#395
      # DEBUG D#393 => D#395
      # DEBUG D#392 => D#394
      # DEBUG D#390 => D#392
      # DEBUG D#391 => D#393
      # DEBUG __p => __x_68
      # DEBUG this => D#390
      # DEBUG D.54999 => D#391
      # .MEM_10 = VDEF <.MEM_34>
      operator delete (__x_68);
      # DEBUG __x => __x_9
      # DEBUG __x => __x_9
      if (__x_9 == 0B)
        goto <bb 39>;
      else
        goto <bb 38>;

    }
    bb_7 (preds = {bb_5 }, succs = {bb_8 })
    {
      <bb 7>:

    }
    bb_40 (preds = {bb_9 }, succs = {bb_6 })
    {
      <bb 40>:
      # .MEM_94 = PHI <.MEM_50(9)>
      goto <bb 6>;

    }
    bb_38 (preds = {bb_6 }, succs = {bb_5 })
    {
      <bb 38>:
      goto <bb 5>;

    }
    loop_2 (header = 8, latch = 37, niter = )
    {
      bb_8 (preds = {bb_7 bb_37 }, succs = {bb_9 bb_10 })
      {
        <bb 8>:
        # __x_72 = PHI <__x_8(7), __x_13(37)>
        # .MEM_93 = PHI <.MEM_69(7), .MEM_50(37)>
        # DEBUG __x => __x_72
        # VUSE <.MEM_93>
        __x_12 = MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B];
        # DEBUG D#105 => __x_72
        # DEBUG __x => D#105
        # DEBUG this => this_6(D)
        # DEBUG __x => __x_12
        # DEBUG __x => __x_12
        if (__x_12 == 0B)
          goto <bb 9>;
        else
          goto <bb 10>;

      }
      bb_9 (preds = {bb_8 bb_41 }, succs = {bb_40 bb_37 })
      {
        <bb 9>:
        # .MEM_30 = PHI <.MEM_93(8), .MEM_91(41)>
        # VUSE <.MEM_30>
        __x_13 = MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B];
        # DEBUG D#106 => __x_72
        # DEBUG __x => D#106
        # DEBUG __y => NULL
        # DEBUG D#399 => this_6(D)
        # DEBUG __p => __x_72
        # DEBUG this => D#399
        # DEBUG D#398 => D#399
        # DEBUG D#397 => D#399
        # DEBUG D#396 => D#399
        # DEBUG D#388 => D#396
        # DEBUG D#389 => __x_72
        # DEBUG this => D#388
        # DEBUG __p => D#389
        # DEBUG D#387 => D#388
        # DEBUG D#386 => D#389
        # DEBUG D#385 => D#389
        # DEBUG this => D#385
        # DEBUG D#384 => &D#386->_M_value_field
        # DEBUG __r => D#384
        # DEBUG D#383 => D#387
        # DEBUG this => D#383
        # DEBUG D#382 => D#383
        # DEBUG this => D#382
        # DEBUG this => NULL
        # DEBUG D.54900 => NULL
        # DEBUG this => NULL
        # DEBUG D#307 => D#384
        # DEBUG this => D#306
        # DEBUG __p => D#307
        # DEBUG this => NULL
        # DEBUG this => NULL
        # DEBUG this => D#397
        # DEBUG __p => __x_72
        # DEBUG this => D#398
        # DEBUG D#395 => 1
        # DEBUG __p => __x_72
        # DEBUG __a => D#394
        # DEBUG __n => D#395
        # DEBUG D#393 => D#395
        # DEBUG D#392 => D#394
        # DEBUG D#390 => D#392
        # DEBUG D#391 => D#393
        # DEBUG __p => __x_72
        # DEBUG this => D#390
        # DEBUG D.64297 => D#391
        # .MEM_50 = VDEF <.MEM_30>
        operator delete (__x_72);
        # DEBUG __x => __x_13
        # DEBUG __x => __x_13
        if (__x_13 == 0B)
          goto <bb 40>;
        else
          goto <bb 37>;

      }
      bb_10 (preds = {bb_8 }, succs = {bb_11 })
      {
        <bb 10>:

      }
      bb_41 (preds = {bb_12 }, succs = {bb_9 })
      {
        <bb 41>:
        # .MEM_91 = PHI <.MEM_49(12)>
        goto <bb 9>;

      }
      bb_37 (preds = {bb_9 }, succs = {bb_8 })
      {
        <bb 37>:
        goto <bb 8>;

      }
      loop_3 (header = 11, latch = 36, niter = )
      {
        bb_11 (preds = {bb_10 bb_36 }, succs = {bb_12 bb_13 })
        {
          <bb 11>:
          # __x_71 = PHI <__x_12(10), __x_16(36)>
          # .MEM_90 = PHI <.MEM_93(10), .MEM_49(36)>
          # DEBUG __x => __x_71
          # VUSE <.MEM_90>
          __x_15 = MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B];
          # DEBUG D#105 => __x_71
          # DEBUG __x => D#105
          # DEBUG this => this_6(D)
          # DEBUG __x => __x_15
          # DEBUG __x => __x_15
          if (__x_15 == 0B)
            goto <bb 12>;
          else
            goto <bb 13>;

        }
        bb_12 (preds = {bb_11 bb_42 }, succs = {bb_41 bb_36 })
        {
          <bb 12>:
          # .MEM_26 = PHI <.MEM_90(11), .MEM_88(42)>
          # VUSE <.MEM_26>
          __x_16 = MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B];
          # DEBUG D#106 => __x_71
          # DEBUG __x => D#106
          # DEBUG __y => NULL
          # DEBUG D#399 => this_6(D)
          # DEBUG __p => __x_71
          # DEBUG this => D#399
          # DEBUG D#398 => D#399
          # DEBUG D#397 => D#399
          # DEBUG D#396 => D#399
          # DEBUG D#388 => D#396
          # DEBUG D#389 => __x_71
          # DEBUG this => D#388
          # DEBUG __p => D#389
          # DEBUG D#387 => D#388
          # DEBUG D#386 => D#389
          # DEBUG D#385 => D#389
          # DEBUG this => D#385
          # DEBUG D#384 => &D#386->_M_value_field
          # DEBUG __r => D#384
          # DEBUG D#383 => D#387
          # DEBUG this => D#383
          # DEBUG D#382 => D#383
          # DEBUG this => D#382
          # DEBUG this => NULL
          # DEBUG D.54900 => NULL
          # DEBUG this => NULL
          # DEBUG D#307 => D#384
          # DEBUG this => D#306
          # DEBUG __p => D#307
          # DEBUG this => NULL
          # DEBUG this => NULL
          # DEBUG this => D#397
          # DEBUG __p => __x_71
          # DEBUG this => D#398
          # DEBUG D#395 => 1
          # DEBUG __p => __x_71
          # DEBUG __a => D#394
          # DEBUG __n => D#395
          # DEBUG D#393 => D#395
          # DEBUG D#392 => D#394
          # DEBUG D#390 => D#392
          # DEBUG D#391 => D#393
          # DEBUG __p => __x_71
          # DEBUG this => D#390
          # DEBUG D.64310 => D#391
          # .MEM_49 = VDEF <.MEM_26>
          operator delete (__x_71);
          # DEBUG __x => __x_16
          # DEBUG __x => __x_16
          if (__x_16 == 0B)
            goto <bb 41>;
          else
            goto <bb 36>;

        }
        bb_13 (preds = {bb_11 }, succs = {bb_14 })
        {
          <bb 13>:

        }
        bb_42 (preds = {bb_15 }, succs = {bb_12 })
        {
          <bb 42>:
          # .MEM_88 = PHI <.MEM_48(15)>
          goto <bb 12>;

        }
        bb_36 (preds = {bb_12 }, succs = {bb_11 })
        {
          <bb 36>:
          goto <bb 11>;

        }
        loop_4 (header = 14, latch = 35, niter = )
        {
          bb_14 (preds = {bb_13 bb_35 }, succs = {bb_15 bb_16 })
          {
            <bb 14>:
            # __x_77 = PHI <__x_15(13), __x_20(35)>
            # .MEM_87 = PHI <.MEM_90(13), .MEM_48(35)>
            # DEBUG __x => __x_77
            # VUSE <.MEM_87>
            __x_19 = MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B];
            # DEBUG D#105 => __x_77
            # DEBUG __x => D#105
            # DEBUG this => this_6(D)
            # DEBUG __x => __x_19
            # DEBUG __x => __x_19
            if (__x_19 == 0B)
              goto <bb 15>;
            else
              goto <bb 16>;

          }
          bb_15 (preds = {bb_14 bb_43 }, succs = {bb_42 bb_35 })
          {
            <bb 15>:
            # .MEM_25 = PHI <.MEM_87(14), .MEM_85(43)>
            # VUSE <.MEM_25>
            __x_20 = MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B];
            # DEBUG D#106 => __x_77
            # DEBUG __x => D#106
            # DEBUG __y => NULL
            # DEBUG D#399 => this_6(D)
            # DEBUG __p => __x_77
            # DEBUG this => D#399
            # DEBUG D#398 => D#399
            # DEBUG D#397 => D#399
            # DEBUG D#396 => D#399
            # DEBUG D#388 => D#396
            # DEBUG D#389 => __x_77
            # DEBUG this => D#388
            # DEBUG __p => D#389
            # DEBUG D#387 => D#388
            # DEBUG D#386 => D#389
            # DEBUG D#385 => D#389
            # DEBUG this => D#385
            # DEBUG D#384 => &D#386->_M_value_field
            # DEBUG __r => D#384
            # DEBUG D#383 => D#387
            # DEBUG this => D#383
            # DEBUG D#382 => D#383
            # DEBUG this => D#382
            # DEBUG this => NULL
            # DEBUG D.54900 => NULL
            # DEBUG this => NULL
            # DEBUG D#307 => D#384
            # DEBUG this => D#306
            # DEBUG __p => D#307
            # DEBUG this => NULL
            # DEBUG this => NULL
            # DEBUG this => D#397
            # DEBUG __p => __x_77
            # DEBUG this => D#398
            # DEBUG D#395 => 1
            # DEBUG __p => __x_77
            # DEBUG __a => D#394
            # DEBUG __n => D#395
            # DEBUG D#393 => D#395
            # DEBUG D#392 => D#394
            # DEBUG D#390 => D#392
            # DEBUG D#391 => D#393
            # DEBUG __p => __x_77
            # DEBUG this => D#390
            # DEBUG D.64323 => D#391
            # .MEM_48 = VDEF <.MEM_25>
            operator delete (__x_77);
            # DEBUG __x => __x_20
            # DEBUG __x => __x_20
            if (__x_20 == 0B)
              goto <bb 42>;
            else
              goto <bb 35>;

          }
          bb_16 (preds = {bb_14 }, succs = {bb_17 })
          {
            <bb 16>:

          }
          bb_43 (preds = {bb_18 }, succs = {bb_15 })
          {
            <bb 43>:
            # .MEM_85 = PHI <.MEM_47(18)>
            goto <bb 15>;

          }
          bb_35 (preds = {bb_15 }, succs = {bb_14 })
          {
            <bb 35>:
            goto <bb 14>;

          }
          loop_5 (header = 17, latch = 34, niter = )
          {
            bb_17 (preds = {bb_16 bb_34 }, succs = {bb_18 bb_19 })
            {
              <bb 17>:
              # __x_80 = PHI <__x_19(16), __x_24(34)>
              # .MEM_84 = PHI <.MEM_87(16), .MEM_47(34)>
              # DEBUG __x => __x_80
              # VUSE <.MEM_84>
              __x_23 = MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B];
              # DEBUG D#105 => __x_80
              # DEBUG __x => D#105
              # DEBUG this => this_6(D)
              # DEBUG __x => __x_23
              # DEBUG __x => __x_23
              if (__x_23 == 0B)
                goto <bb 18>;
              else
                goto <bb 19>;

            }
            bb_18 (preds = {bb_17 bb_44 }, succs = {bb_43 bb_34 })
            {
              <bb 18>:
              # .MEM_21 = PHI <.MEM_84(17), .MEM_82(44)>
              # VUSE <.MEM_21>
              __x_24 = MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B];
              # DEBUG D#106 => __x_80
              # DEBUG __x => D#106
              # DEBUG __y => NULL
              # DEBUG D#399 => this_6(D)
              # DEBUG __p => __x_80
              # DEBUG this => D#399
              # DEBUG D#398 => D#399
              # DEBUG D#397 => D#399
              # DEBUG D#396 => D#399
              # DEBUG D#388 => D#396
              # DEBUG D#389 => __x_80
              # DEBUG this => D#388
              # DEBUG __p => D#389
              # DEBUG D#387 => D#388
              # DEBUG D#386 => D#389
              # DEBUG D#385 => D#389
              # DEBUG this => D#385
              # DEBUG D#384 => &D#386->_M_value_field
              # DEBUG __r => D#384
              # DEBUG D#383 => D#387
              # DEBUG this => D#383
              # DEBUG D#382 => D#383
              # DEBUG this => D#382
              # DEBUG this => NULL
              # DEBUG D.54900 => NULL
              # DEBUG this => NULL
              # DEBUG D#307 => D#384
              # DEBUG this => D#306
              # DEBUG __p => D#307
              # DEBUG this => NULL
              # DEBUG this => NULL
              # DEBUG this => D#397
              # DEBUG __p => __x_80
              # DEBUG this => D#398
              # DEBUG D#395 => 1
              # DEBUG __p => __x_80
              # DEBUG __a => D#394
              # DEBUG __n => D#395
              # DEBUG D#393 => D#395
              # DEBUG D#392 => D#394
              # DEBUG D#390 => D#392
              # DEBUG D#391 => D#393
              # DEBUG __p => __x_80
              # DEBUG this => D#390
              # DEBUG D.64336 => D#391
              # .MEM_47 = VDEF <.MEM_21>
              operator delete (__x_80);
              # DEBUG __x => __x_24
              # DEBUG __x => __x_24
              if (__x_24 == 0B)
                goto <bb 43>;
              else
                goto <bb 34>;

            }
            bb_19 (preds = {bb_17 }, succs = {bb_20 })
            {
              <bb 19>:

            }
            bb_44 (preds = {bb_21 }, succs = {bb_18 })
            {
              <bb 44>:
              # .MEM_82 = PHI <.MEM_46(21)>
              goto <bb 18>;

            }
            bb_34 (preds = {bb_18 }, succs = {bb_17 })
            {
              <bb 34>:
              goto <bb 17>;

            }
            loop_6 (header = 20, latch = 33, niter = )
            {
              bb_20 (preds = {bb_19 bb_33 }, succs = {bb_21 bb_22 })
              {
                <bb 20>:
                # .MEM_81 = PHI <.MEM_84(19), .MEM_46(33)>
                # __x_83 = PHI <__x_23(19), __x_28(33)>
                # DEBUG __x => __x_83
                # VUSE <.MEM_81>
                __x_27 = MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B];
                # DEBUG D#105 => __x_83
                # DEBUG __x => D#105
                # DEBUG this => this_6(D)
                # DEBUG __x => __x_27
                # DEBUG __x => __x_27
                if (__x_27 == 0B)
                  goto <bb 21>;
                else
                  goto <bb 22>;

              }
              bb_21 (preds = {bb_20 bb_45 }, succs = {bb_44 bb_33 })
              {
                <bb 21>:
                # .MEM_17 = PHI <.MEM_81(20), .MEM_79(45)>
                # VUSE <.MEM_17>
                __x_28 = MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B];
                # DEBUG D#106 => __x_83
                # DEBUG __x => D#106
                # DEBUG __y => NULL
                # DEBUG D#399 => this_6(D)
                # DEBUG __p => __x_83
                # DEBUG this => D#399
                # DEBUG D#398 => D#399
                # DEBUG D#397 => D#399
                # DEBUG D#396 => D#399
                # DEBUG D#388 => D#396
                # DEBUG D#389 => __x_83
                # DEBUG this => D#388
                # DEBUG __p => D#389
                # DEBUG D#387 => D#388
                # DEBUG D#386 => D#389
                # DEBUG D#385 => D#389
                # DEBUG this => D#385
                # DEBUG D#384 => &D#386->_M_value_field
                # DEBUG __r => D#384
                # DEBUG D#383 => D#387
                # DEBUG this => D#383
                # DEBUG D#382 => D#383
                # DEBUG this => D#382
                # DEBUG this => NULL
                # DEBUG D.54900 => NULL
                # DEBUG this => NULL
                # DEBUG D#307 => D#384
                # DEBUG this => D#306
                # DEBUG __p => D#307
                # DEBUG this => NULL
                # DEBUG this => NULL
                # DEBUG this => D#397
                # DEBUG __p => __x_83
                # DEBUG this => D#398
                # DEBUG D#395 => 1
                # DEBUG __p => __x_83
                # DEBUG __a => D#394
                # DEBUG __n => D#395
                # DEBUG D#393 => D#395
                # DEBUG D#392 => D#394
                # DEBUG D#390 => D#392
                # DEBUG D#391 => D#393
                # DEBUG __p => __x_83
                # DEBUG this => D#390
                # DEBUG D.64349 => D#391
                # .MEM_46 = VDEF <.MEM_17>
                operator delete (__x_83);
                # DEBUG __x => __x_28
                # DEBUG __x => __x_28
                if (__x_28 == 0B)
                  goto <bb 44>;
                else
                  goto <bb 33>;

              }
              bb_22 (preds = {bb_20 }, succs = {bb_23 })
              {
                <bb 22>:

              }
              bb_45 (preds = {bb_24 }, succs = {bb_21 })
              {
                <bb 45>:
                # .MEM_79 = PHI <.MEM_45(24)>
                goto <bb 21>;

              }
              bb_33 (preds = {bb_21 }, succs = {bb_20 })
              {
                <bb 33>:
                goto <bb 20>;

              }
              loop_7 (header = 23, latch = 32, niter = )
              {
                bb_23 (preds = {bb_22 bb_32 }, succs = {bb_24 bb_25 })
                {
                  <bb 23>:
                  # .MEM_78 = PHI <.MEM_81(22), .MEM_45(32)>
                  # __x_86 = PHI <__x_27(22), __x_32(32)>
                  # DEBUG __x => __x_86
                  # VUSE <.MEM_78>
                  __x_31 = MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B];
                  # DEBUG D#105 => __x_86
                  # DEBUG __x => D#105
                  # DEBUG this => this_6(D)
                  # DEBUG __x => __x_31
                  # DEBUG __x => __x_31
                  if (__x_31 == 0B)
                    goto <bb 24>;
                  else
                    goto <bb 25>;

                }
                bb_24 (preds = {bb_23 bb_46 }, succs = {bb_45 bb_32 })
                {
                  <bb 24>:
                  # .MEM_14 = PHI <.MEM_78(23), .MEM_76(46)>
                  # VUSE <.MEM_14>
                  __x_32 = MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B];
                  # DEBUG D#106 => __x_86
                  # DEBUG __x => D#106
                  # DEBUG __y => NULL
                  # DEBUG D#399 => this_6(D)
                  # DEBUG __p => __x_86
                  # DEBUG this => D#399
                  # DEBUG D#398 => D#399
                  # DEBUG D#397 => D#399
                  # DEBUG D#396 => D#399
                  # DEBUG D#388 => D#396
                  # DEBUG D#389 => __x_86
                  # DEBUG this => D#388
                  # DEBUG __p => D#389
                  # DEBUG D#387 => D#388
                  # DEBUG D#386 => D#389
                  # DEBUG D#385 => D#389
                  # DEBUG this => D#385
                  # DEBUG D#384 => &D#386->_M_value_field
                  # DEBUG __r => D#384
                  # DEBUG D#383 => D#387
                  # DEBUG this => D#383
                  # DEBUG D#382 => D#383
                  # DEBUG this => D#382
                  # DEBUG this => NULL
                  # DEBUG D.54900 => NULL
                  # DEBUG this => NULL
                  # DEBUG D#307 => D#384
                  # DEBUG this => D#306
                  # DEBUG __p => D#307
                  # DEBUG this => NULL
                  # DEBUG this => NULL
                  # DEBUG this => D#397
                  # DEBUG __p => __x_86
                  # DEBUG this => D#398
                  # DEBUG D#395 => 1
                  # DEBUG __p => __x_86
                  # DEBUG __a => D#394
                  # DEBUG __n => D#395
                  # DEBUG D#393 => D#395
                  # DEBUG D#392 => D#394
                  # DEBUG D#390 => D#392
                  # DEBUG D#391 => D#393
                  # DEBUG __p => __x_86
                  # DEBUG this => D#390
                  # DEBUG D.64362 => D#391
                  # .MEM_45 = VDEF <.MEM_14>
                  operator delete (__x_86);
                  # DEBUG __x => __x_32
                  # DEBUG __x => __x_32
                  if (__x_32 == 0B)
                    goto <bb 45>;
                  else
                    goto <bb 32>;

                }
                bb_25 (preds = {bb_23 }, succs = {bb_26 })
                {
                  <bb 25>:

                }
                bb_46 (preds = {bb_27 }, succs = {bb_24 })
                {
                  <bb 46>:
                  # .MEM_76 = PHI <.MEM_44(27)>
                  goto <bb 24>;

                }
                bb_32 (preds = {bb_24 }, succs = {bb_23 })
                {
                  <bb 32>:
                  goto <bb 23>;

                }
                loop_8 (header = 26, latch = 31, niter = )
                {
                  bb_26 (preds = {bb_25 bb_31 }, succs = {bb_27 bb_28 })
                  {
                    <bb 26>:
                    # .MEM_75 = PHI <.MEM_78(25), .MEM_44(31)>
                    # __x_89 = PHI <__x_31(25), __x_36(31)>
                    # DEBUG __x => __x_89
                    # VUSE <.MEM_75>
                    __x_35 = MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B];
                    # DEBUG D#105 => __x_89
                    # DEBUG __x => D#105
                    # DEBUG this => this_6(D)
                    # DEBUG __x => __x_35
                    # DEBUG __x => __x_35
                    if (__x_35 == 0B)
                      goto <bb 27>;
                    else
                      goto <bb 28>;

                  }
                  bb_27 (preds = {bb_26 bb_47 }, succs = {bb_46 bb_31 })
                  {
                    <bb 27>:
                    # .MEM_22 = PHI <.MEM_75(26), .MEM_74(47)>
                    # VUSE <.MEM_22>
                    __x_36 = MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B];
                    # DEBUG D#106 => __x_89
                    # DEBUG __x => D#106
                    # DEBUG __y => NULL
                    # DEBUG D#399 => this_6(D)
                    # DEBUG __p => __x_89
                    # DEBUG this => D#399
                    # DEBUG D#398 => D#399
                    # DEBUG D#397 => D#399
                    # DEBUG D#396 => D#399
                    # DEBUG D#388 => D#396
                    # DEBUG D#389 => __x_89
                    # DEBUG this => D#388
                    # DEBUG __p => D#389
                    # DEBUG D#387 => D#388
                    # DEBUG D#386 => D#389
                    # DEBUG D#385 => D#389
                    # DEBUG this => D#385
                    # DEBUG D#384 => &D#386->_M_value_field
                    # DEBUG __r => D#384
                    # DEBUG D#383 => D#387
                    # DEBUG this => D#383
                    # DEBUG D#382 => D#383
                    # DEBUG this => D#382
                    # DEBUG this => NULL
                    # DEBUG D.54900 => NULL
                    # DEBUG this => NULL
                    # DEBUG D#307 => D#384
                    # DEBUG this => D#306
                    # DEBUG __p => D#307
                    # DEBUG this => NULL
                    # DEBUG this => NULL
                    # DEBUG this => D#397
                    # DEBUG __p => __x_89
                    # DEBUG this => D#398
                    # DEBUG D#395 => 1
                    # DEBUG __p => __x_89
                    # DEBUG __a => D#394
                    # DEBUG __n => D#395
                    # DEBUG D#393 => D#395
                    # DEBUG D#392 => D#394
                    # DEBUG D#390 => D#392
                    # DEBUG D#391 => D#393
                    # DEBUG __p => __x_89
                    # DEBUG this => D#390
                    # DEBUG D.64375 => D#391
                    # .MEM_44 = VDEF <.MEM_22>
                    operator delete (__x_89);
                    # DEBUG __x => __x_36
                    # DEBUG __x => __x_36
                    if (__x_36 == 0B)
                      goto <bb 46>;
                    else
                      goto <bb 31>;

                  }
                  bb_28 (preds = {bb_26 }, succs = {bb_29 })
                  {
                    <bb 28>:

                  }
                  bb_47 (preds = {bb_29 }, succs = {bb_27 })
                  {
                    <bb 47>:
                    # .MEM_74 = PHI <.MEM_43(29)>
                    goto <bb 27>;

                  }
                  bb_31 (preds = {bb_27 }, succs = {bb_26 })
                  {
                    <bb 31>:
                    goto <bb 26>;

                  }
                  loop_9 (header = 29, latch = 30, niter = )
                  {
                    bb_29 (preds = {bb_28 bb_30 }, succs = {bb_47 bb_30 })
                    {
                      <bb 29>:
                      # .MEM_73 = PHI <.MEM_75(28), .MEM_43(30)>
                      # __x_92 = PHI <__x_35(28), __x_40(30)>
                      # DEBUG __x => __x_92
                      # VUSE <.MEM_73>
                      _39 = MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B];
                      # DEBUG D#105 => __x_92
                      # DEBUG __x => D#105
                      # .MEM_42 = VDEF <.MEM_73>
                      std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase (this_6(D), _39);
                      # VUSE <.MEM_42>
                      __x_40 = MEM[(struct _Rb_tree_node_base * *)__x_92 + 16B];
                      # DEBUG D#106 => __x_92
                      # DEBUG __x => D#106
                      # DEBUG __y => NULL
                      # DEBUG D#399 => this_6(D)
                      # DEBUG __p => __x_92
                      # DEBUG this => D#399
                      # DEBUG D#398 => D#399
                      # DEBUG D#397 => D#399
                      # DEBUG D#396 => D#399
                      # DEBUG D#388 => D#396
                      # DEBUG D#389 => __x_92
                      # DEBUG this => D#388
                      # DEBUG __p => D#389
                      # DEBUG D#387 => D#388
                      # DEBUG D#386 => D#389
                      # DEBUG D#385 => D#389
                      # DEBUG this => D#385
                      # DEBUG D#384 => &D#386->_M_value_field
                      # DEBUG __r => D#384
                      # DEBUG D#383 => D#387
                      # DEBUG this => D#383
                      # DEBUG D#382 => D#383
                      # DEBUG this => D#382
                      # DEBUG this => NULL
                      # DEBUG D.54900 => NULL
                      # DEBUG this => NULL
                      # DEBUG D#307 => D#384
                      # DEBUG this => D#306
                      # DEBUG __p => D#307
                      # DEBUG this => NULL
                      # DEBUG this => NULL
                      # DEBUG this => D#397
                      # DEBUG __p => __x_92
                      # DEBUG this => D#398
                      # DEBUG D#395 => 1
                      # DEBUG __p => __x_92
                      # DEBUG __a => D#394
                      # DEBUG __n => D#395
                      # DEBUG D#393 => D#395
                      # DEBUG D#392 => D#394
                      # DEBUG D#390 => D#392
                      # DEBUG D#391 => D#393
                      # DEBUG __p => __x_92
                      # DEBUG this => D#390
                      # DEBUG D.64388 => D#391
                      # .MEM_43 = VDEF <.MEM_42>
                      operator delete (__x_92);
                      # DEBUG __x => __x_40
                      # DEBUG __x => __x_40
                      if (__x_40 == 0B)
                        goto <bb 47>;
                      else
                        goto <bb 30>;

                    }
                    bb_30 (preds = {bb_29 }, succs = {bb_29 })
                    {
                      <bb 30>:
                      goto <bb 29>;

                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

Pass statistics:
----------------

void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = int; _Val = int; _KeyOfValue = std::_Identity<int>; _Compare = std::less<int>; _Alloc = std::allocator<int>; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<int>*] (struct _Rb_treeD.36317 * const thisD.36689, struct _Rb_tree_nodeD.36321 * __xD.36690)
{
  struct _Rb_tree_nodeD.36321 * __xD.64378;
  struct _Rb_tree_nodeD.36321 * __xD.64365;
  struct _Rb_tree_nodeD.36321 * __xD.64352;
  struct _Rb_tree_nodeD.36321 * __xD.64339;
  struct _Rb_tree_nodeD.36321 * __xD.64326;
  struct _Rb_tree_nodeD.36321 * __xD.64313;
  struct _Rb_tree_nodeD.36321 * __xD.64300;
  struct _Rb_tree_nodeD.36321 * __xD.64287;
  struct _Rb_tree_node_baseD.24800 * _39;

;;   basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __xD.36690 => __x_3(D)
  if (__x_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 2, next block 48, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [100.0%]  (FALLTHRU)
  # .MEM_38 = PHI <.MEM_4(D)(2), .MEM_70(39)>
;;    succ:       48 [100.0%]  (FALLTHRU)

;;   basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 3, next block 4, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_38>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 48, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_68 = PHI <__x_3(D)(4), __x_9(38)>
  # .MEM_69 = PHI <.MEM_4(D)(4), .MEM_10(38)>
  # DEBUG __xD.36690 => __x_68
  # VUSE <.MEM_69>
  # PT = nonlocal escaped 
  __x_8 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_68 + 24B];
  # DEBUG D#105ptD.0 => __x_68
  # DEBUG __xD.55005 => D#105ptD.0
  # DEBUG thisD.64286 => this_6(D)
  # DEBUG __xD.64287 => __x_8
  # DEBUG __xD.64287 => __x_8
  if (__x_8 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 5, next block 39, flags: (NEW, REACHABLE)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [100.0%]  (FALLTHRU)
  # .MEM_34 = PHI <.MEM_69(5), .MEM_94(40)>
  # VUSE <.MEM_34>
  # PT = nonlocal escaped 
  __x_9 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_68 + 16B];
  # DEBUG D#106ptD.0 => __x_68
  # DEBUG __xD.55002 => D#106ptD.0
  # DEBUG __yD.44472 => NULL
  # DEBUG D#399ptD.0 => this_6(D)
  # DEBUG __pD.54991 => __x_68
  # DEBUG thisD.54992 => D#399ptD.0
  # DEBUG D#398ptD.0 => D#399ptD.0
  # DEBUG D#397ptD.0 => D#399ptD.0
  # DEBUG D#396ptD.0 => D#399ptD.0
  # DEBUG D#388ptD.0 => D#396ptD.0
  # DEBUG D#389ptD.0 => __x_68
  # DEBUG thisD.54975 => D#388ptD.0
  # DEBUG __pD.54974 => D#389ptD.0
  # DEBUG D#387ptD.0 => D#388ptD.0
  # DEBUG D#386ptD.0 => D#389ptD.0
  # DEBUG D#385ptD.0 => D#389ptD.0
  # DEBUG thisD.54927 => D#385ptD.0
  # DEBUG D#384ptD.0 => &D#386ptD.0->_M_value_fieldD.44464
  # DEBUG __rD.54912 => D#384ptD.0
  # DEBUG D#383ptD.0 => D#387ptD.0
  # DEBUG thisD.54919 => D#383ptD.0
  # DEBUG D#382ptD.0 => D#383ptD.0
  # DEBUG thisD.54907 => D#382ptD.0
  # DEBUG thisD.54899 => NULL
  # DEBUG D.54900 => NULL
  # DEBUG thisD.54897 => NULL
  # DEBUG D#307ptD.0 => D#384ptD.0
  # DEBUG thisD.54918 => D#306ptD.0
  # DEBUG __pD.54917 => D#307ptD.0
  # DEBUG thisD.54928 => NULL
  # DEBUG thisD.54916 => NULL
  # DEBUG thisD.54994 => D#397ptD.0
  # DEBUG __pD.54993 => __x_68
  # DEBUG thisD.54963 => D#398ptD.0
  # DEBUG D#395ptD.0 => 1
  # DEBUG __pD.54997 => __x_68
  # DEBUG __aD.54995 => D#394ptD.0
  # DEBUG __nD.54996 => D#395ptD.0
  # DEBUG D#393ptD.0 => D#395ptD.0
  # DEBUG D#392ptD.0 => D#394ptD.0
  # DEBUG D#390ptD.0 => D#392ptD.0
  # DEBUG D#391ptD.0 => D#393ptD.0
  # DEBUG __pD.55000 => __x_68
  # DEBUG thisD.54998 => D#390ptD.0
  # DEBUG D.54999 => D#391ptD.0
  # .MEM_10 = VDEF <.MEM_34>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_68);
  # DEBUG __xD.36690 => __x_9
  # DEBUG __xD.36690 => __x_9
  if (__x_9 == 0B)
    goto <bb 39>;
  else
    goto <bb 38>;
;;    succ:       39 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 6, next block 7, flags: (NEW)
;;    pred:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_70 = PHI <.MEM_10(6)>
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU)

;;   basic block 7, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 39, next block 8, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_72 = PHI <__x_8(7), __x_13(37)>
  # .MEM_93 = PHI <.MEM_69(7), .MEM_50(37)>
  # DEBUG __xD.64287 => __x_72
  # VUSE <.MEM_93>
  # PT = nonlocal escaped 
  __x_12 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_72 + 24B];
  # DEBUG D#105ptD.0 => __x_72
  # DEBUG __xD.55005 => D#105ptD.0
  # DEBUG thisD.64299 => this_6(D)
  # DEBUG __xD.64300 => __x_12
  # DEBUG __xD.64300 => __x_12
  if (__x_12 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 8, next block 40, flags: (NEW, REACHABLE)
;;    pred:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU)
  # .MEM_30 = PHI <.MEM_93(8), .MEM_91(41)>
  # VUSE <.MEM_30>
  # PT = nonlocal escaped 
  __x_13 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_72 + 16B];
  # DEBUG D#106ptD.0 => __x_72
  # DEBUG __xD.55002 => D#106ptD.0
  # DEBUG __yD.64288 => NULL
  # DEBUG D#399ptD.0 => this_6(D)
  # DEBUG __pD.64290 => __x_72
  # DEBUG thisD.64289 => D#399ptD.0
  # DEBUG D#398ptD.0 => D#399ptD.0
  # DEBUG D#397ptD.0 => D#399ptD.0
  # DEBUG D#396ptD.0 => D#399ptD.0
  # DEBUG D#388ptD.0 => D#396ptD.0
  # DEBUG D#389ptD.0 => __x_72
  # DEBUG thisD.54975 => D#388ptD.0
  # DEBUG __pD.54974 => D#389ptD.0
  # DEBUG D#387ptD.0 => D#388ptD.0
  # DEBUG D#386ptD.0 => D#389ptD.0
  # DEBUG D#385ptD.0 => D#389ptD.0
  # DEBUG thisD.54927 => D#385ptD.0
  # DEBUG D#384ptD.0 => &D#386ptD.0->_M_value_fieldD.44464
  # DEBUG __rD.54912 => D#384ptD.0
  # DEBUG D#383ptD.0 => D#387ptD.0
  # DEBUG thisD.54919 => D#383ptD.0
  # DEBUG D#382ptD.0 => D#383ptD.0
  # DEBUG thisD.54907 => D#382ptD.0
  # DEBUG thisD.54899 => NULL
  # DEBUG D.54900 => NULL
  # DEBUG thisD.54897 => NULL
  # DEBUG D#307ptD.0 => D#384ptD.0
  # DEBUG thisD.54918 => D#306ptD.0
  # DEBUG __pD.54917 => D#307ptD.0
  # DEBUG thisD.54928 => NULL
  # DEBUG thisD.54916 => NULL
  # DEBUG thisD.64292 => D#397ptD.0
  # DEBUG __pD.64291 => __x_72
  # DEBUG thisD.54963 => D#398ptD.0
  # DEBUG D#395ptD.0 => 1
  # DEBUG __pD.64295 => __x_72
  # DEBUG __aD.64293 => D#394ptD.0
  # DEBUG __nD.64294 => D#395ptD.0
  # DEBUG D#393ptD.0 => D#395ptD.0
  # DEBUG D#392ptD.0 => D#394ptD.0
  # DEBUG D#390ptD.0 => D#392ptD.0
  # DEBUG D#391ptD.0 => D#393ptD.0
  # DEBUG __pD.64298 => __x_72
  # DEBUG thisD.64296 => D#390ptD.0
  # DEBUG D.64297 => D#391ptD.0
  # .MEM_50 = VDEF <.MEM_30>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_72);
  # DEBUG __xD.64287 => __x_13
  # DEBUG __xD.64287 => __x_13
  if (__x_13 == 0B)
    goto <bb 40>;
  else
    goto <bb 37>;
;;    succ:       40 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 9, next block 10, flags: (NEW)
;;    pred:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_94 = PHI <.MEM_50(9)>
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU)

;;   basic block 10, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 40, next block 11, flags: (NEW)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                36 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_71 = PHI <__x_12(10), __x_16(36)>
  # .MEM_90 = PHI <.MEM_93(10), .MEM_49(36)>
  # DEBUG __xD.64300 => __x_71
  # VUSE <.MEM_90>
  # PT = nonlocal escaped 
  __x_15 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_71 + 24B];
  # DEBUG D#105ptD.0 => __x_71
  # DEBUG __xD.55005 => D#105ptD.0
  # DEBUG thisD.64312 => this_6(D)
  # DEBUG __xD.64313 => __x_15
  # DEBUG __xD.64313 => __x_15
  if (__x_15 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;
;;    succ:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 11, next block 41, flags: (NEW, REACHABLE)
;;    pred:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                42 [100.0%]  (FALLTHRU)
  # .MEM_26 = PHI <.MEM_90(11), .MEM_88(42)>
  # VUSE <.MEM_26>
  # PT = nonlocal escaped 
  __x_16 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_71 + 16B];
  # DEBUG D#106ptD.0 => __x_71
  # DEBUG __xD.55002 => D#106ptD.0
  # DEBUG __yD.64301 => NULL
  # DEBUG D#399ptD.0 => this_6(D)
  # DEBUG __pD.64303 => __x_71
  # DEBUG thisD.64302 => D#399ptD.0
  # DEBUG D#398ptD.0 => D#399ptD.0
  # DEBUG D#397ptD.0 => D#399ptD.0
  # DEBUG D#396ptD.0 => D#399ptD.0
  # DEBUG D#388ptD.0 => D#396ptD.0
  # DEBUG D#389ptD.0 => __x_71
  # DEBUG thisD.54975 => D#388ptD.0
  # DEBUG __pD.54974 => D#389ptD.0
  # DEBUG D#387ptD.0 => D#388ptD.0
  # DEBUG D#386ptD.0 => D#389ptD.0
  # DEBUG D#385ptD.0 => D#389ptD.0
  # DEBUG thisD.54927 => D#385ptD.0
  # DEBUG D#384ptD.0 => &D#386ptD.0->_M_value_fieldD.44464
  # DEBUG __rD.54912 => D#384ptD.0
  # DEBUG D#383ptD.0 => D#387ptD.0
  # DEBUG thisD.54919 => D#383ptD.0
  # DEBUG D#382ptD.0 => D#383ptD.0
  # DEBUG thisD.54907 => D#382ptD.0
  # DEBUG thisD.54899 => NULL
  # DEBUG D.54900 => NULL
  # DEBUG thisD.54897 => NULL
  # DEBUG D#307ptD.0 => D#384ptD.0
  # DEBUG thisD.54918 => D#306ptD.0
  # DEBUG __pD.54917 => D#307ptD.0
  # DEBUG thisD.54928 => NULL
  # DEBUG thisD.54916 => NULL
  # DEBUG thisD.64305 => D#397ptD.0
  # DEBUG __pD.64304 => __x_71
  # DEBUG thisD.54963 => D#398ptD.0
  # DEBUG D#395ptD.0 => 1
  # DEBUG __pD.64308 => __x_71
  # DEBUG __aD.64306 => D#394ptD.0
  # DEBUG __nD.64307 => D#395ptD.0
  # DEBUG D#393ptD.0 => D#395ptD.0
  # DEBUG D#392ptD.0 => D#394ptD.0
  # DEBUG D#390ptD.0 => D#392ptD.0
  # DEBUG D#391ptD.0 => D#393ptD.0
  # DEBUG __pD.64311 => __x_71
  # DEBUG thisD.64309 => D#390ptD.0
  # DEBUG D.64310 => D#391ptD.0
  # .MEM_49 = VDEF <.MEM_26>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_71);
  # DEBUG __xD.64300 => __x_16
  # DEBUG __xD.64300 => __x_16
  if (__x_16 == 0B)
    goto <bb 41>;
  else
    goto <bb 36>;
;;    succ:       41 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 41, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 12, next block 13, flags: (NEW)
;;    pred:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_91 = PHI <.MEM_49(12)>
  goto <bb 9>;
;;    succ:       9 [100.0%]  (FALLTHRU)

;;   basic block 13, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 41, next block 14, flags: (NEW)
;;    pred:       11 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_77 = PHI <__x_15(13), __x_20(35)>
  # .MEM_87 = PHI <.MEM_90(13), .MEM_48(35)>
  # DEBUG __xD.64313 => __x_77
  # VUSE <.MEM_87>
  # PT = nonlocal escaped 
  __x_19 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_77 + 24B];
  # DEBUG D#105ptD.0 => __x_77
  # DEBUG __xD.55005 => D#105ptD.0
  # DEBUG thisD.64325 => this_6(D)
  # DEBUG __xD.64326 => __x_19
  # DEBUG __xD.64326 => __x_19
  if (__x_19 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 14, next block 42, flags: (NEW, REACHABLE)
;;    pred:       14 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                43 [100.0%]  (FALLTHRU)
  # .MEM_25 = PHI <.MEM_87(14), .MEM_85(43)>
  # VUSE <.MEM_25>
  # PT = nonlocal escaped 
  __x_20 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_77 + 16B];
  # DEBUG D#106ptD.0 => __x_77
  # DEBUG __xD.55002 => D#106ptD.0
  # DEBUG __yD.64314 => NULL
  # DEBUG D#399ptD.0 => this_6(D)
  # DEBUG __pD.64316 => __x_77
  # DEBUG thisD.64315 => D#399ptD.0
  # DEBUG D#398ptD.0 => D#399ptD.0
  # DEBUG D#397ptD.0 => D#399ptD.0
  # DEBUG D#396ptD.0 => D#399ptD.0
  # DEBUG D#388ptD.0 => D#396ptD.0
  # DEBUG D#389ptD.0 => __x_77
  # DEBUG thisD.54975 => D#388ptD.0
  # DEBUG __pD.54974 => D#389ptD.0
  # DEBUG D#387ptD.0 => D#388ptD.0
  # DEBUG D#386ptD.0 => D#389ptD.0
  # DEBUG D#385ptD.0 => D#389ptD.0
  # DEBUG thisD.54927 => D#385ptD.0
  # DEBUG D#384ptD.0 => &D#386ptD.0->_M_value_fieldD.44464
  # DEBUG __rD.54912 => D#384ptD.0
  # DEBUG D#383ptD.0 => D#387ptD.0
  # DEBUG thisD.54919 => D#383ptD.0
  # DEBUG D#382ptD.0 => D#383ptD.0
  # DEBUG thisD.54907 => D#382ptD.0
  # DEBUG thisD.54899 => NULL
  # DEBUG D.54900 => NULL
  # DEBUG thisD.54897 => NULL
  # DEBUG D#307ptD.0 => D#384ptD.0
  # DEBUG thisD.54918 => D#306ptD.0
  # DEBUG __pD.54917 => D#307ptD.0
  # DEBUG thisD.54928 => NULL
  # DEBUG thisD.54916 => NULL
  # DEBUG thisD.64318 => D#397ptD.0
  # DEBUG __pD.64317 => __x_77
  # DEBUG thisD.54963 => D#398ptD.0
  # DEBUG D#395ptD.0 => 1
  # DEBUG __pD.64321 => __x_77
  # DEBUG __aD.64319 => D#394ptD.0
  # DEBUG __nD.64320 => D#395ptD.0
  # DEBUG D#393ptD.0 => D#395ptD.0
  # DEBUG D#392ptD.0 => D#394ptD.0
  # DEBUG D#390ptD.0 => D#392ptD.0
  # DEBUG D#391ptD.0 => D#393ptD.0
  # DEBUG __pD.64324 => __x_77
  # DEBUG thisD.64322 => D#390ptD.0
  # DEBUG D.64323 => D#391ptD.0
  # .MEM_48 = VDEF <.MEM_25>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_77);
  # DEBUG __xD.64313 => __x_20
  # DEBUG __xD.64313 => __x_20
  if (__x_20 == 0B)
    goto <bb 42>;
  else
    goto <bb 35>;
;;    succ:       42 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 42, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 15, next block 16, flags: (NEW)
;;    pred:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_88 = PHI <.MEM_48(15)>
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU)

;;   basic block 16, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 42, next block 17, flags: (NEW)
;;    pred:       14 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                34 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_80 = PHI <__x_19(16), __x_24(34)>
  # .MEM_84 = PHI <.MEM_87(16), .MEM_47(34)>
  # DEBUG __xD.64326 => __x_80
  # VUSE <.MEM_84>
  # PT = nonlocal escaped 
  __x_23 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_80 + 24B];
  # DEBUG D#105ptD.0 => __x_80
  # DEBUG __xD.55005 => D#105ptD.0
  # DEBUG thisD.64338 => this_6(D)
  # DEBUG __xD.64339 => __x_23
  # DEBUG __xD.64339 => __x_23
  if (__x_23 == 0B)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 17, next block 43, flags: (NEW, REACHABLE)
;;    pred:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [100.0%]  (FALLTHRU)
  # .MEM_21 = PHI <.MEM_84(17), .MEM_82(44)>
  # VUSE <.MEM_21>
  # PT = nonlocal escaped 
  __x_24 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_80 + 16B];
  # DEBUG D#106ptD.0 => __x_80
  # DEBUG __xD.55002 => D#106ptD.0
  # DEBUG __yD.64327 => NULL
  # DEBUG D#399ptD.0 => this_6(D)
  # DEBUG __pD.64329 => __x_80
  # DEBUG thisD.64328 => D#399ptD.0
  # DEBUG D#398ptD.0 => D#399ptD.0
  # DEBUG D#397ptD.0 => D#399ptD.0
  # DEBUG D#396ptD.0 => D#399ptD.0
  # DEBUG D#388ptD.0 => D#396ptD.0
  # DEBUG D#389ptD.0 => __x_80
  # DEBUG thisD.54975 => D#388ptD.0
  # DEBUG __pD.54974 => D#389ptD.0
  # DEBUG D#387ptD.0 => D#388ptD.0
  # DEBUG D#386ptD.0 => D#389ptD.0
  # DEBUG D#385ptD.0 => D#389ptD.0
  # DEBUG thisD.54927 => D#385ptD.0
  # DEBUG D#384ptD.0 => &D#386ptD.0->_M_value_fieldD.44464
  # DEBUG __rD.54912 => D#384ptD.0
  # DEBUG D#383ptD.0 => D#387ptD.0
  # DEBUG thisD.54919 => D#383ptD.0
  # DEBUG D#382ptD.0 => D#383ptD.0
  # DEBUG thisD.54907 => D#382ptD.0
  # DEBUG thisD.54899 => NULL
  # DEBUG D.54900 => NULL
  # DEBUG thisD.54897 => NULL
  # DEBUG D#307ptD.0 => D#384ptD.0
  # DEBUG thisD.54918 => D#306ptD.0
  # DEBUG __pD.54917 => D#307ptD.0
  # DEBUG thisD.54928 => NULL
  # DEBUG thisD.54916 => NULL
  # DEBUG thisD.64331 => D#397ptD.0
  # DEBUG __pD.64330 => __x_80
  # DEBUG thisD.54963 => D#398ptD.0
  # DEBUG D#395ptD.0 => 1
  # DEBUG __pD.64334 => __x_80
  # DEBUG __aD.64332 => D#394ptD.0
  # DEBUG __nD.64333 => D#395ptD.0
  # DEBUG D#393ptD.0 => D#395ptD.0
  # DEBUG D#392ptD.0 => D#394ptD.0
  # DEBUG D#390ptD.0 => D#392ptD.0
  # DEBUG D#391ptD.0 => D#393ptD.0
  # DEBUG __pD.64337 => __x_80
  # DEBUG thisD.64335 => D#390ptD.0
  # DEBUG D.64336 => D#391ptD.0
  # .MEM_47 = VDEF <.MEM_21>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_80);
  # DEBUG __xD.64326 => __x_24
  # DEBUG __xD.64326 => __x_24
  if (__x_24 == 0B)
    goto <bb 43>;
  else
    goto <bb 34>;
;;    succ:       43 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 43, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 18, next block 19, flags: (NEW)
;;    pred:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_85 = PHI <.MEM_47(18)>
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU)

;;   basic block 19, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 43, next block 20, flags: (NEW)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 6, count 0, freq 9, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_81 = PHI <.MEM_84(19), .MEM_46(33)>
  # PT = nonlocal escaped 
  # __x_83 = PHI <__x_23(19), __x_28(33)>
  # DEBUG __xD.64339 => __x_83
  # VUSE <.MEM_81>
  # PT = nonlocal escaped 
  __x_27 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_83 + 24B];
  # DEBUG D#105ptD.0 => __x_83
  # DEBUG __xD.55005 => D#105ptD.0
  # DEBUG thisD.64351 => this_6(D)
  # DEBUG __xD.64352 => __x_27
  # DEBUG __xD.64352 => __x_27
  if (__x_27 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 6, count 0, freq 9, maybe hot
;;    prev block 20, next block 44, flags: (NEW, REACHABLE)
;;    pred:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                45 [100.0%]  (FALLTHRU)
  # .MEM_17 = PHI <.MEM_81(20), .MEM_79(45)>
  # VUSE <.MEM_17>
  # PT = nonlocal escaped 
  __x_28 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_83 + 16B];
  # DEBUG D#106ptD.0 => __x_83
  # DEBUG __xD.55002 => D#106ptD.0
  # DEBUG __yD.64340 => NULL
  # DEBUG D#399ptD.0 => this_6(D)
  # DEBUG __pD.64342 => __x_83
  # DEBUG thisD.64341 => D#399ptD.0
  # DEBUG D#398ptD.0 => D#399ptD.0
  # DEBUG D#397ptD.0 => D#399ptD.0
  # DEBUG D#396ptD.0 => D#399ptD.0
  # DEBUG D#388ptD.0 => D#396ptD.0
  # DEBUG D#389ptD.0 => __x_83
  # DEBUG thisD.54975 => D#388ptD.0
  # DEBUG __pD.54974 => D#389ptD.0
  # DEBUG D#387ptD.0 => D#388ptD.0
  # DEBUG D#386ptD.0 => D#389ptD.0
  # DEBUG D#385ptD.0 => D#389ptD.0
  # DEBUG thisD.54927 => D#385ptD.0
  # DEBUG D#384ptD.0 => &D#386ptD.0->_M_value_fieldD.44464
  # DEBUG __rD.54912 => D#384ptD.0
  # DEBUG D#383ptD.0 => D#387ptD.0
  # DEBUG thisD.54919 => D#383ptD.0
  # DEBUG D#382ptD.0 => D#383ptD.0
  # DEBUG thisD.54907 => D#382ptD.0
  # DEBUG thisD.54899 => NULL
  # DEBUG D.54900 => NULL
  # DEBUG thisD.54897 => NULL
  # DEBUG D#307ptD.0 => D#384ptD.0
  # DEBUG thisD.54918 => D#306ptD.0
  # DEBUG __pD.54917 => D#307ptD.0
  # DEBUG thisD.54928 => NULL
  # DEBUG thisD.54916 => NULL
  # DEBUG thisD.64344 => D#397ptD.0
  # DEBUG __pD.64343 => __x_83
  # DEBUG thisD.54963 => D#398ptD.0
  # DEBUG D#395ptD.0 => 1
  # DEBUG __pD.64347 => __x_83
  # DEBUG __aD.64345 => D#394ptD.0
  # DEBUG __nD.64346 => D#395ptD.0
  # DEBUG D#393ptD.0 => D#395ptD.0
  # DEBUG D#392ptD.0 => D#394ptD.0
  # DEBUG D#390ptD.0 => D#392ptD.0
  # DEBUG D#391ptD.0 => D#393ptD.0
  # DEBUG __pD.64350 => __x_83
  # DEBUG thisD.64348 => D#390ptD.0
  # DEBUG D.64349 => D#391ptD.0
  # .MEM_46 = VDEF <.MEM_17>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_83);
  # DEBUG __xD.64339 => __x_28
  # DEBUG __xD.64339 => __x_28
  if (__x_28 == 0B)
    goto <bb 44>;
  else
    goto <bb 33>;
;;    succ:       44 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 44, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 21, next block 22, flags: (NEW)
;;    pred:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_82 = PHI <.MEM_46(21)>
  goto <bb 18>;
;;    succ:       18 [100.0%]  (FALLTHRU)

;;   basic block 22, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 44, next block 23, flags: (NEW)
;;    pred:       20 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 7, count 0, freq 89, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_78 = PHI <.MEM_81(22), .MEM_45(32)>
  # PT = nonlocal escaped 
  # __x_86 = PHI <__x_27(22), __x_32(32)>
  # DEBUG __xD.64352 => __x_86
  # VUSE <.MEM_78>
  # PT = nonlocal escaped 
  __x_31 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_86 + 24B];
  # DEBUG D#105ptD.0 => __x_86
  # DEBUG __xD.55005 => D#105ptD.0
  # DEBUG thisD.64364 => this_6(D)
  # DEBUG __xD.64365 => __x_31
  # DEBUG __xD.64365 => __x_31
  if (__x_31 == 0B)
    goto <bb 24>;
  else
    goto <bb 25>;
;;    succ:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 7, count 0, freq 89, maybe hot
;;    prev block 23, next block 45, flags: (NEW, REACHABLE)
;;    pred:       23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                46 [100.0%]  (FALLTHRU)
  # .MEM_14 = PHI <.MEM_78(23), .MEM_76(46)>
  # VUSE <.MEM_14>
  # PT = nonlocal escaped 
  __x_32 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_86 + 16B];
  # DEBUG D#106ptD.0 => __x_86
  # DEBUG __xD.55002 => D#106ptD.0
  # DEBUG __yD.64353 => NULL
  # DEBUG D#399ptD.0 => this_6(D)
  # DEBUG __pD.64355 => __x_86
  # DEBUG thisD.64354 => D#399ptD.0
  # DEBUG D#398ptD.0 => D#399ptD.0
  # DEBUG D#397ptD.0 => D#399ptD.0
  # DEBUG D#396ptD.0 => D#399ptD.0
  # DEBUG D#388ptD.0 => D#396ptD.0
  # DEBUG D#389ptD.0 => __x_86
  # DEBUG thisD.54975 => D#388ptD.0
  # DEBUG __pD.54974 => D#389ptD.0
  # DEBUG D#387ptD.0 => D#388ptD.0
  # DEBUG D#386ptD.0 => D#389ptD.0
  # DEBUG D#385ptD.0 => D#389ptD.0
  # DEBUG thisD.54927 => D#385ptD.0
  # DEBUG D#384ptD.0 => &D#386ptD.0->_M_value_fieldD.44464
  # DEBUG __rD.54912 => D#384ptD.0
  # DEBUG D#383ptD.0 => D#387ptD.0
  # DEBUG thisD.54919 => D#383ptD.0
  # DEBUG D#382ptD.0 => D#383ptD.0
  # DEBUG thisD.54907 => D#382ptD.0
  # DEBUG thisD.54899 => NULL
  # DEBUG D.54900 => NULL
  # DEBUG thisD.54897 => NULL
  # DEBUG D#307ptD.0 => D#384ptD.0
  # DEBUG thisD.54918 => D#306ptD.0
  # DEBUG __pD.54917 => D#307ptD.0
  # DEBUG thisD.54928 => NULL
  # DEBUG thisD.54916 => NULL
  # DEBUG thisD.64357 => D#397ptD.0
  # DEBUG __pD.64356 => __x_86
  # DEBUG thisD.54963 => D#398ptD.0
  # DEBUG D#395ptD.0 => 1
  # DEBUG __pD.64360 => __x_86
  # DEBUG __aD.64358 => D#394ptD.0
  # DEBUG __nD.64359 => D#395ptD.0
  # DEBUG D#393ptD.0 => D#395ptD.0
  # DEBUG D#392ptD.0 => D#394ptD.0
  # DEBUG D#390ptD.0 => D#392ptD.0
  # DEBUG D#391ptD.0 => D#393ptD.0
  # DEBUG __pD.64363 => __x_86
  # DEBUG thisD.64361 => D#390ptD.0
  # DEBUG D.64362 => D#391ptD.0
  # .MEM_45 = VDEF <.MEM_14>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_86);
  # DEBUG __xD.64352 => __x_32
  # DEBUG __xD.64352 => __x_32
  if (__x_32 == 0B)
    goto <bb 45>;
  else
    goto <bb 32>;
;;    succ:       45 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 45, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 24, next block 25, flags: (NEW)
;;    pred:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_79 = PHI <.MEM_45(24)>
  goto <bb 21>;
;;    succ:       21 [100.0%]  (FALLTHRU)

;;   basic block 25, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 45, next block 26, flags: (NEW)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 8, count 0, freq 900, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_75 = PHI <.MEM_78(25), .MEM_44(31)>
  # PT = nonlocal escaped 
  # __x_89 = PHI <__x_31(25), __x_36(31)>
  # DEBUG __xD.64365 => __x_89
  # VUSE <.MEM_75>
  # PT = nonlocal escaped 
  __x_35 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_89 + 24B];
  # DEBUG D#105ptD.0 => __x_89
  # DEBUG __xD.55005 => D#105ptD.0
  # DEBUG thisD.64377 => this_6(D)
  # DEBUG __xD.64378 => __x_35
  # DEBUG __xD.64378 => __x_35
  if (__x_35 == 0B)
    goto <bb 27>;
  else
    goto <bb 28>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 8, count 0, freq 900, maybe hot
;;    prev block 26, next block 46, flags: (NEW, REACHABLE)
;;    pred:       26 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [100.0%]  (FALLTHRU)
  # .MEM_22 = PHI <.MEM_75(26), .MEM_74(47)>
  # VUSE <.MEM_22>
  # PT = nonlocal escaped 
  __x_36 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_89 + 16B];
  # DEBUG D#106ptD.0 => __x_89
  # DEBUG __xD.55002 => D#106ptD.0
  # DEBUG __yD.64366 => NULL
  # DEBUG D#399ptD.0 => this_6(D)
  # DEBUG __pD.64368 => __x_89
  # DEBUG thisD.64367 => D#399ptD.0
  # DEBUG D#398ptD.0 => D#399ptD.0
  # DEBUG D#397ptD.0 => D#399ptD.0
  # DEBUG D#396ptD.0 => D#399ptD.0
  # DEBUG D#388ptD.0 => D#396ptD.0
  # DEBUG D#389ptD.0 => __x_89
  # DEBUG thisD.54975 => D#388ptD.0
  # DEBUG __pD.54974 => D#389ptD.0
  # DEBUG D#387ptD.0 => D#388ptD.0
  # DEBUG D#386ptD.0 => D#389ptD.0
  # DEBUG D#385ptD.0 => D#389ptD.0
  # DEBUG thisD.54927 => D#385ptD.0
  # DEBUG D#384ptD.0 => &D#386ptD.0->_M_value_fieldD.44464
  # DEBUG __rD.54912 => D#384ptD.0
  # DEBUG D#383ptD.0 => D#387ptD.0
  # DEBUG thisD.54919 => D#383ptD.0
  # DEBUG D#382ptD.0 => D#383ptD.0
  # DEBUG thisD.54907 => D#382ptD.0
  # DEBUG thisD.54899 => NULL
  # DEBUG D.54900 => NULL
  # DEBUG thisD.54897 => NULL
  # DEBUG D#307ptD.0 => D#384ptD.0
  # DEBUG thisD.54918 => D#306ptD.0
  # DEBUG __pD.54917 => D#307ptD.0
  # DEBUG thisD.54928 => NULL
  # DEBUG thisD.54916 => NULL
  # DEBUG thisD.64370 => D#397ptD.0
  # DEBUG __pD.64369 => __x_89
  # DEBUG thisD.54963 => D#398ptD.0
  # DEBUG D#395ptD.0 => 1
  # DEBUG __pD.64373 => __x_89
  # DEBUG __aD.64371 => D#394ptD.0
  # DEBUG __nD.64372 => D#395ptD.0
  # DEBUG D#393ptD.0 => D#395ptD.0
  # DEBUG D#392ptD.0 => D#394ptD.0
  # DEBUG D#390ptD.0 => D#392ptD.0
  # DEBUG D#391ptD.0 => D#393ptD.0
  # DEBUG __pD.64376 => __x_89
  # DEBUG thisD.64374 => D#390ptD.0
  # DEBUG D.64375 => D#391ptD.0
  # .MEM_44 = VDEF <.MEM_22>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_89);
  # DEBUG __xD.64365 => __x_36
  # DEBUG __xD.64365 => __x_36
  if (__x_36 == 0B)
    goto <bb 46>;
  else
    goto <bb 31>;
;;    succ:       46 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 46, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 27, next block 28, flags: (NEW)
;;    pred:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_76 = PHI <.MEM_44(27)>
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU)

;;   basic block 28, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 46, next block 29, flags: (NEW)
;;    pred:       26 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 9, count 0, freq 9100, maybe hot
;;    prev block 28, next block 47, flags: (NEW)
;;    pred:       28 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_73 = PHI <.MEM_75(28), .MEM_43(30)>
  # PT = nonlocal escaped 
  # __x_92 = PHI <__x_35(28), __x_40(30)>
  # DEBUG __xD.64378 => __x_92
  # VUSE <.MEM_73>
  # PT = nonlocal escaped 
  _39 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_92 + 24B];
  # DEBUG D#105ptD.0 => __x_92
  # DEBUG __xD.55005 => D#105ptD.0
  # .MEM_42 = VDEF <.MEM_73>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiED.36688 (this_6(D), _39);
  # VUSE <.MEM_42>
  # PT = nonlocal escaped 
  __x_40 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_92 + 16B];
  # DEBUG D#106ptD.0 => __x_92
  # DEBUG __xD.55002 => D#106ptD.0
  # DEBUG __yD.64379 => NULL
  # DEBUG D#399ptD.0 => this_6(D)
  # DEBUG __pD.64381 => __x_92
  # DEBUG thisD.64380 => D#399ptD.0
  # DEBUG D#398ptD.0 => D#399ptD.0
  # DEBUG D#397ptD.0 => D#399ptD.0
  # DEBUG D#396ptD.0 => D#399ptD.0
  # DEBUG D#388ptD.0 => D#396ptD.0
  # DEBUG D#389ptD.0 => __x_92
  # DEBUG thisD.54975 => D#388ptD.0
  # DEBUG __pD.54974 => D#389ptD.0
  # DEBUG D#387ptD.0 => D#388ptD.0
  # DEBUG D#386ptD.0 => D#389ptD.0
  # DEBUG D#385ptD.0 => D#389ptD.0
  # DEBUG thisD.54927 => D#385ptD.0
  # DEBUG D#384ptD.0 => &D#386ptD.0->_M_value_fieldD.44464
  # DEBUG __rD.54912 => D#384ptD.0
  # DEBUG D#383ptD.0 => D#387ptD.0
  # DEBUG thisD.54919 => D#383ptD.0
  # DEBUG D#382ptD.0 => D#383ptD.0
  # DEBUG thisD.54907 => D#382ptD.0
  # DEBUG thisD.54899 => NULL
  # DEBUG D.54900 => NULL
  # DEBUG thisD.54897 => NULL
  # DEBUG D#307ptD.0 => D#384ptD.0
  # DEBUG thisD.54918 => D#306ptD.0
  # DEBUG __pD.54917 => D#307ptD.0
  # DEBUG thisD.54928 => NULL
  # DEBUG thisD.54916 => NULL
  # DEBUG thisD.64383 => D#397ptD.0
  # DEBUG __pD.64382 => __x_92
  # DEBUG thisD.54963 => D#398ptD.0
  # DEBUG D#395ptD.0 => 1
  # DEBUG __pD.64386 => __x_92
  # DEBUG __aD.64384 => D#394ptD.0
  # DEBUG __nD.64385 => D#395ptD.0
  # DEBUG D#393ptD.0 => D#395ptD.0
  # DEBUG D#392ptD.0 => D#394ptD.0
  # DEBUG D#390ptD.0 => D#392ptD.0
  # DEBUG D#391ptD.0 => D#393ptD.0
  # DEBUG __pD.64389 => __x_92
  # DEBUG thisD.64387 => D#390ptD.0
  # DEBUG D.64388 => D#391ptD.0
  # .MEM_43 = VDEF <.MEM_42>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_92);
  # DEBUG __xD.64378 => __x_40
  # DEBUG __xD.64378 => __x_40
  if (__x_40 == 0B)
    goto <bb 47>;
  else
    goto <bb 30>;
;;    succ:       47 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 47, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 29, next block 30, flags: (NEW)
;;    pred:       29 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_74 = PHI <.MEM_43(29)>
  goto <bb 27>;
;;    succ:       27 [100.0%]  (FALLTHRU)

;;   basic block 30, loop depth 9, count 0, freq 8281, maybe hot
;;    prev block 47, next block 31, flags: (NEW)
;;    pred:       29 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 31, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       27 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 32, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 31, next block 33, flags: (NEW)
;;    pred:       24 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 33, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 32, next block 34, flags: (NEW)
;;    pred:       21 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 34, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 33, next block 35, flags: (NEW)
;;    pred:       18 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 35, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 34, next block 36, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 36, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 35, next block 37, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 37, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 36, next block 38, flags: (NEW)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 38, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 37, next block 1, flags: (NEW)
;;    pred:       6 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

}



;; Function void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = int; _Val = std::pair<const int, Allocator::sRequest>; _KeyOfValue = std::_Select1st<std::pair<const int, Allocator::sRequest> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, Allocator::sRequest> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, Allocator::sRequest> >*] (_ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E, funcdef_no=2027, decl_uid=41822, cgraph_uid=697, symbol_order=698)


Pass statistics:
----------------

void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = int; _Val = std::pair<const int, Allocator::sRequest>; _KeyOfValue = std::_Select1st<std::pair<const int, Allocator::sRequest> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, Allocator::sRequest> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, Allocator::sRequest> >*] (struct _Rb_treeD.41462 * const thisD.41823, struct _Rb_tree_nodeD.41466 * __xD.41824)
{
  struct _Rb_tree_nodeD.41466 * __xD.64501;
  struct _Rb_tree_nodeD.41466 * __xD.64488;
  struct _Rb_tree_nodeD.41466 * __xD.64475;
  struct _Rb_tree_nodeD.41466 * __xD.64462;
  struct _Rb_tree_nodeD.41466 * __xD.64449;
  struct _Rb_tree_nodeD.41466 * __xD.64436;
  struct _Rb_tree_nodeD.41466 * __xD.64423;
  struct _Rb_tree_nodeD.41466 * __xD.64410;
  struct _Rb_tree_node_baseD.24800 * _39;

;;   basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __xD.41824 => __x_3(D)
  if (__x_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_38 = PHI <.MEM_4(D)(2), .MEM_10(6)>
  # VUSE <.MEM_38>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_68 = PHI <__x_3(D)(4), __x_9(38)>
  # .MEM_69 = PHI <.MEM_4(D)(4), .MEM_10(38)>
  # DEBUG __xD.41824 => __x_68
  # VUSE <.MEM_69>
  # PT = nonlocal escaped 
  __x_8 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_68 + 24B];
  # DEBUG D#107ptD.0 => __x_68
  # DEBUG __xD.57814 => D#107ptD.0
  # DEBUG thisD.64409 => this_6(D)
  # DEBUG __xD.64410 => __x_8
  # DEBUG __xD.64410 => __x_8
  if (__x_8 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_34 = PHI <.MEM_69(5), .MEM_50(9)>
  # VUSE <.MEM_34>
  # PT = nonlocal escaped 
  __x_9 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_68 + 16B];
  # DEBUG D#108ptD.0 => __x_68
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.44529 => NULL
  # DEBUG D#548ptD.0 => this_6(D)
  # DEBUG __pD.57800 => __x_68
  # DEBUG thisD.57801 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_68
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.57803 => D#546ptD.0
  # DEBUG __pD.57802 => __x_68
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.57806 => __x_68
  # DEBUG __aD.57804 => D#406ptD.0
  # DEBUG __nD.57805 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.57809 => __x_68
  # DEBUG thisD.57807 => D#402ptD.0
  # DEBUG D.57808 => D#403ptD.0
  # .MEM_10 = VDEF <.MEM_34>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_68);
  # DEBUG __xD.41824 => __x_9
  # DEBUG __xD.41824 => __x_9
  if (__x_9 == 0B)
    goto <bb 3>;
  else
    goto <bb 38>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_72 = PHI <__x_8(7), __x_13(37)>
  # .MEM_93 = PHI <.MEM_69(7), .MEM_50(37)>
  # DEBUG __xD.64410 => __x_72
  # VUSE <.MEM_93>
  # PT = nonlocal escaped 
  __x_12 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_72 + 24B];
  # DEBUG D#107ptD.0 => __x_72
  # DEBUG __xD.57814 => D#107ptD.0
  # DEBUG thisD.64422 => this_6(D)
  # DEBUG __xD.64423 => __x_12
  # DEBUG __xD.64423 => __x_12
  if (__x_12 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_30 = PHI <.MEM_93(8), .MEM_49(12)>
  # VUSE <.MEM_30>
  # PT = nonlocal escaped 
  __x_13 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_72 + 16B];
  # DEBUG D#108ptD.0 => __x_72
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.64411 => NULL
  # DEBUG D#548ptD.0 => this_6(D)
  # DEBUG __pD.64413 => __x_72
  # DEBUG thisD.64412 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_72
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.64415 => D#546ptD.0
  # DEBUG __pD.64414 => __x_72
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.64418 => __x_72
  # DEBUG __aD.64416 => D#406ptD.0
  # DEBUG __nD.64417 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.64421 => __x_72
  # DEBUG thisD.64419 => D#402ptD.0
  # DEBUG D.64420 => D#403ptD.0
  # .MEM_50 = VDEF <.MEM_30>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_72);
  # DEBUG __xD.64410 => __x_13
  # DEBUG __xD.64410 => __x_13
  if (__x_13 == 0B)
    goto <bb 6>;
  else
    goto <bb 37>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                36 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_71 = PHI <__x_12(10), __x_16(36)>
  # .MEM_90 = PHI <.MEM_93(10), .MEM_49(36)>
  # DEBUG __xD.64423 => __x_71
  # VUSE <.MEM_90>
  # PT = nonlocal escaped 
  __x_15 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_71 + 24B];
  # DEBUG D#107ptD.0 => __x_71
  # DEBUG __xD.57814 => D#107ptD.0
  # DEBUG thisD.64435 => this_6(D)
  # DEBUG __xD.64436 => __x_15
  # DEBUG __xD.64436 => __x_15
  if (__x_15 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;
;;    succ:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_26 = PHI <.MEM_90(11), .MEM_48(15)>
  # VUSE <.MEM_26>
  # PT = nonlocal escaped 
  __x_16 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_71 + 16B];
  # DEBUG D#108ptD.0 => __x_71
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.64424 => NULL
  # DEBUG D#548ptD.0 => this_6(D)
  # DEBUG __pD.64426 => __x_71
  # DEBUG thisD.64425 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_71
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.64428 => D#546ptD.0
  # DEBUG __pD.64427 => __x_71
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.64431 => __x_71
  # DEBUG __aD.64429 => D#406ptD.0
  # DEBUG __nD.64430 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.64434 => __x_71
  # DEBUG thisD.64432 => D#402ptD.0
  # DEBUG D.64433 => D#403ptD.0
  # .MEM_49 = VDEF <.MEM_26>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_71);
  # DEBUG __xD.64423 => __x_16
  # DEBUG __xD.64423 => __x_16
  if (__x_16 == 0B)
    goto <bb 9>;
  else
    goto <bb 36>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       11 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_77 = PHI <__x_15(13), __x_20(35)>
  # .MEM_87 = PHI <.MEM_90(13), .MEM_48(35)>
  # DEBUG __xD.64436 => __x_77
  # VUSE <.MEM_87>
  # PT = nonlocal escaped 
  __x_19 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_77 + 24B];
  # DEBUG D#107ptD.0 => __x_77
  # DEBUG __xD.57814 => D#107ptD.0
  # DEBUG thisD.64448 => this_6(D)
  # DEBUG __xD.64449 => __x_19
  # DEBUG __xD.64449 => __x_19
  if (__x_19 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_25 = PHI <.MEM_87(14), .MEM_47(18)>
  # VUSE <.MEM_25>
  # PT = nonlocal escaped 
  __x_20 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_77 + 16B];
  # DEBUG D#108ptD.0 => __x_77
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.64437 => NULL
  # DEBUG D#548ptD.0 => this_6(D)
  # DEBUG __pD.64439 => __x_77
  # DEBUG thisD.64438 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_77
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.64441 => D#546ptD.0
  # DEBUG __pD.64440 => __x_77
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.64444 => __x_77
  # DEBUG __aD.64442 => D#406ptD.0
  # DEBUG __nD.64443 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.64447 => __x_77
  # DEBUG thisD.64445 => D#402ptD.0
  # DEBUG D.64446 => D#403ptD.0
  # .MEM_48 = VDEF <.MEM_25>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_77);
  # DEBUG __xD.64436 => __x_20
  # DEBUG __xD.64436 => __x_20
  if (__x_20 == 0B)
    goto <bb 12>;
  else
    goto <bb 35>;
;;    succ:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       14 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                34 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_80 = PHI <__x_19(16), __x_24(34)>
  # .MEM_84 = PHI <.MEM_87(16), .MEM_47(34)>
  # DEBUG __xD.64449 => __x_80
  # VUSE <.MEM_84>
  # PT = nonlocal escaped 
  __x_23 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_80 + 24B];
  # DEBUG D#107ptD.0 => __x_80
  # DEBUG __xD.57814 => D#107ptD.0
  # DEBUG thisD.64461 => this_6(D)
  # DEBUG __xD.64462 => __x_23
  # DEBUG __xD.64462 => __x_23
  if (__x_23 == 0B)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_21 = PHI <.MEM_84(17), .MEM_46(21)>
  # VUSE <.MEM_21>
  # PT = nonlocal escaped 
  __x_24 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_80 + 16B];
  # DEBUG D#108ptD.0 => __x_80
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.64450 => NULL
  # DEBUG D#548ptD.0 => this_6(D)
  # DEBUG __pD.64452 => __x_80
  # DEBUG thisD.64451 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_80
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.64454 => D#546ptD.0
  # DEBUG __pD.64453 => __x_80
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.64457 => __x_80
  # DEBUG __aD.64455 => D#406ptD.0
  # DEBUG __nD.64456 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.64460 => __x_80
  # DEBUG thisD.64458 => D#402ptD.0
  # DEBUG D.64459 => D#403ptD.0
  # .MEM_47 = VDEF <.MEM_21>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_80);
  # DEBUG __xD.64449 => __x_24
  # DEBUG __xD.64449 => __x_24
  if (__x_24 == 0B)
    goto <bb 15>;
  else
    goto <bb 34>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 6, count 0, freq 9, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_81 = PHI <.MEM_84(19), .MEM_46(33)>
  # PT = nonlocal escaped 
  # __x_83 = PHI <__x_23(19), __x_28(33)>
  # DEBUG __xD.64462 => __x_83
  # VUSE <.MEM_81>
  # PT = nonlocal escaped 
  __x_27 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_83 + 24B];
  # DEBUG D#107ptD.0 => __x_83
  # DEBUG __xD.57814 => D#107ptD.0
  # DEBUG thisD.64474 => this_6(D)
  # DEBUG __xD.64475 => __x_27
  # DEBUG __xD.64475 => __x_27
  if (__x_27 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 6, count 0, freq 9, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_17 = PHI <.MEM_81(20), .MEM_45(24)>
  # VUSE <.MEM_17>
  # PT = nonlocal escaped 
  __x_28 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_83 + 16B];
  # DEBUG D#108ptD.0 => __x_83
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.64463 => NULL
  # DEBUG D#548ptD.0 => this_6(D)
  # DEBUG __pD.64465 => __x_83
  # DEBUG thisD.64464 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_83
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.64467 => D#546ptD.0
  # DEBUG __pD.64466 => __x_83
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.64470 => __x_83
  # DEBUG __aD.64468 => D#406ptD.0
  # DEBUG __nD.64469 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.64473 => __x_83
  # DEBUG thisD.64471 => D#402ptD.0
  # DEBUG D.64472 => D#403ptD.0
  # .MEM_46 = VDEF <.MEM_17>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_83);
  # DEBUG __xD.64462 => __x_28
  # DEBUG __xD.64462 => __x_28
  if (__x_28 == 0B)
    goto <bb 18>;
  else
    goto <bb 33>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 21, next block 23, flags: (NEW)
;;    pred:       20 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 7, count 0, freq 89, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_78 = PHI <.MEM_81(22), .MEM_45(32)>
  # PT = nonlocal escaped 
  # __x_86 = PHI <__x_27(22), __x_32(32)>
  # DEBUG __xD.64475 => __x_86
  # VUSE <.MEM_78>
  # PT = nonlocal escaped 
  __x_31 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_86 + 24B];
  # DEBUG D#107ptD.0 => __x_86
  # DEBUG __xD.57814 => D#107ptD.0
  # DEBUG thisD.64487 => this_6(D)
  # DEBUG __xD.64488 => __x_31
  # DEBUG __xD.64488 => __x_31
  if (__x_31 == 0B)
    goto <bb 24>;
  else
    goto <bb 25>;
;;    succ:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 7, count 0, freq 89, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_14 = PHI <.MEM_78(23), .MEM_44(27)>
  # VUSE <.MEM_14>
  # PT = nonlocal escaped 
  __x_32 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_86 + 16B];
  # DEBUG D#108ptD.0 => __x_86
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.64476 => NULL
  # DEBUG D#548ptD.0 => this_6(D)
  # DEBUG __pD.64478 => __x_86
  # DEBUG thisD.64477 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_86
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.64480 => D#546ptD.0
  # DEBUG __pD.64479 => __x_86
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.64483 => __x_86
  # DEBUG __aD.64481 => D#406ptD.0
  # DEBUG __nD.64482 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.64486 => __x_86
  # DEBUG thisD.64484 => D#402ptD.0
  # DEBUG D.64485 => D#403ptD.0
  # .MEM_45 = VDEF <.MEM_14>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_86);
  # DEBUG __xD.64475 => __x_32
  # DEBUG __xD.64475 => __x_32
  if (__x_32 == 0B)
    goto <bb 21>;
  else
    goto <bb 32>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 24, next block 26, flags: (NEW)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 8, count 0, freq 900, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_75 = PHI <.MEM_78(25), .MEM_44(31)>
  # PT = nonlocal escaped 
  # __x_89 = PHI <__x_31(25), __x_36(31)>
  # DEBUG __xD.64488 => __x_89
  # VUSE <.MEM_75>
  # PT = nonlocal escaped 
  __x_35 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_89 + 24B];
  # DEBUG D#107ptD.0 => __x_89
  # DEBUG __xD.57814 => D#107ptD.0
  # DEBUG thisD.64500 => this_6(D)
  # DEBUG __xD.64501 => __x_35
  # DEBUG __xD.64501 => __x_35
  if (__x_35 == 0B)
    goto <bb 27>;
  else
    goto <bb 28>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 8, count 0, freq 900, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       26 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_22 = PHI <.MEM_75(26), .MEM_43(29)>
  # VUSE <.MEM_22>
  # PT = nonlocal escaped 
  __x_36 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_89 + 16B];
  # DEBUG D#108ptD.0 => __x_89
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.64489 => NULL
  # DEBUG D#548ptD.0 => this_6(D)
  # DEBUG __pD.64491 => __x_89
  # DEBUG thisD.64490 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_89
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.64493 => D#546ptD.0
  # DEBUG __pD.64492 => __x_89
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.64496 => __x_89
  # DEBUG __aD.64494 => D#406ptD.0
  # DEBUG __nD.64495 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.64499 => __x_89
  # DEBUG thisD.64497 => D#402ptD.0
  # DEBUG D.64498 => D#403ptD.0
  # .MEM_44 = VDEF <.MEM_22>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_89);
  # DEBUG __xD.64488 => __x_36
  # DEBUG __xD.64488 => __x_36
  if (__x_36 == 0B)
    goto <bb 24>;
  else
    goto <bb 31>;
;;    succ:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 27, next block 29, flags: (NEW)
;;    pred:       26 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 9, count 0, freq 9100, maybe hot
;;    prev block 28, next block 30, flags: (NEW)
;;    pred:       28 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_73 = PHI <.MEM_75(28), .MEM_43(30)>
  # PT = nonlocal escaped 
  # __x_92 = PHI <__x_35(28), __x_40(30)>
  # DEBUG __xD.64501 => __x_92
  # VUSE <.MEM_73>
  # PT = nonlocal escaped 
  _39 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_92 + 24B];
  # DEBUG D#107ptD.0 => __x_92
  # DEBUG __xD.57814 => D#107ptD.0
  # .MEM_42 = VDEF <.MEM_73>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (this_6(D), _39);
  # VUSE <.MEM_42>
  # PT = nonlocal escaped 
  __x_40 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_92 + 16B];
  # DEBUG D#108ptD.0 => __x_92
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.64502 => NULL
  # DEBUG D#548ptD.0 => this_6(D)
  # DEBUG __pD.64504 => __x_92
  # DEBUG thisD.64503 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_92
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.64506 => D#546ptD.0
  # DEBUG __pD.64505 => __x_92
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.64509 => __x_92
  # DEBUG __aD.64507 => D#406ptD.0
  # DEBUG __nD.64508 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.64512 => __x_92
  # DEBUG thisD.64510 => D#402ptD.0
  # DEBUG D.64511 => D#403ptD.0
  # .MEM_43 = VDEF <.MEM_42>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_92);
  # DEBUG __xD.64501 => __x_40
  # DEBUG __xD.64501 => __x_40
  if (__x_40 == 0B)
    goto <bb 27>;
  else
    goto <bb 30>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 9, count 0, freq 8281, maybe hot
;;    prev block 29, next block 31, flags: (NEW)
;;    pred:       29 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 31, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       27 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 32, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 31, next block 33, flags: (NEW)
;;    pred:       24 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 33, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 32, next block 34, flags: (NEW)
;;    pred:       21 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 34, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 33, next block 35, flags: (NEW)
;;    pred:       18 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 35, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 34, next block 36, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 36, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 35, next block 37, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 37, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 36, next block 38, flags: (NEW)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 38, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 37, next block 1, flags: (NEW)
;;    pred:       6 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

}



Updating SSA:
Registering new PHI nodes in block #5
Registering new PHI nodes in block #7
Registering new PHI nodes in block #8
Registering new PHI nodes in block #10
Registering new PHI nodes in block #11
Registering new PHI nodes in block #13
Registering new PHI nodes in block #14
Registering new PHI nodes in block #16
Registering new PHI nodes in block #17
Registering new PHI nodes in block #19
Registering new PHI nodes in block #20
Registering new PHI nodes in block #22
Registering new PHI nodes in block #23
Registering new PHI nodes in block #25
Registering new PHI nodes in block #26
Registering new PHI nodes in block #28
Registering new PHI nodes in block #29
Updating SSA information for statement operator delete (__x_92);
Registering new PHI nodes in block #30
Registering new PHI nodes in block #47
Registering new PHI nodes in block #27
Updating SSA information for statement operator delete (__x_89);
Registering new PHI nodes in block #31
Registering new PHI nodes in block #46
Registering new PHI nodes in block #24
Updating SSA information for statement operator delete (__x_86);
Registering new PHI nodes in block #32
Registering new PHI nodes in block #45
Registering new PHI nodes in block #21
Updating SSA information for statement operator delete (__x_83);
Registering new PHI nodes in block #33
Registering new PHI nodes in block #44
Registering new PHI nodes in block #18
Updating SSA information for statement operator delete (__x_80);
Registering new PHI nodes in block #34
Registering new PHI nodes in block #43
Registering new PHI nodes in block #15
Updating SSA information for statement operator delete (__x_77);
Registering new PHI nodes in block #35
Registering new PHI nodes in block #42
Registering new PHI nodes in block #12
Updating SSA information for statement operator delete (__x_71);
Registering new PHI nodes in block #36
Registering new PHI nodes in block #41
Registering new PHI nodes in block #9
Updating SSA information for statement operator delete (__x_72);
Registering new PHI nodes in block #37
Registering new PHI nodes in block #40
Registering new PHI nodes in block #6
Updating SSA information for statement operator delete (__x_68);
Registering new PHI nodes in block #38
Registering new PHI nodes in block #39

DFA Statistics for void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = int; _Val = std::pair<const int, Allocator::sRequest>; _KeyOfValue = std::_Select1st<std::pair<const int, Allocator::sRequest> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, Allocator::sRequest> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, Allocator::sRequest> >*]

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                            171       1368b
DEF operands                             18        144b
VUSE operands                            29        232b
VDEF operands                            10         80b
PHI nodes                                36       3744b
PHI arguments                            63       3024b
---------------------------------------------------------
Total memory used by DFA/SSA data                 8592b
---------------------------------------------------------

Average number of arguments per PHI node: 1.8 (max: 2)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_70 -> { .MEM_10 }
.MEM_74 -> { .MEM_43 }
.MEM_76 -> { .MEM_44 }
.MEM_79 -> { .MEM_45 }
.MEM_82 -> { .MEM_46 }
.MEM_85 -> { .MEM_47 }
.MEM_88 -> { .MEM_48 }
.MEM_91 -> { .MEM_49 }
.MEM_94 -> { .MEM_50 }
Incremental SSA update started at block: 5
Number of blocks in CFG: 48
Number of blocks to update: 35 ( 73%)
Affected blocks: 5 6 8 9 11 12 14 15 17 18 20 21 23 24 26 27 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47


Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:49, LOOPS:9, CONDITIONS:18, STMTS:522)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # DEBUG __x => __x_3(D)
    if (__x_3(D) == 0B)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 bb_39 }, succs = {bb_48 })
  {
    <bb 3>:
    # .MEM_38 = PHI <.MEM_4(D)(2), .MEM_70(39)>

  }
  bb_48 (preds = {bb_3 }, succs = {bb_1 })
  {
    <bb 48>:
    # VUSE <.MEM_38>
    return;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 })
  {
    <bb 4>:

  }
  bb_39 (preds = {bb_6 }, succs = {bb_3 })
  {
    <bb 39>:
    # .MEM_70 = PHI <.MEM_10(6)>
    goto <bb 3>;

  }
  loop_1 (header = 5, latch = 38, niter = )
  {
    bb_5 (preds = {bb_4 bb_38 }, succs = {bb_6 bb_7 })
    {
      <bb 5>:
      # __x_68 = PHI <__x_3(D)(4), __x_9(38)>
      # .MEM_69 = PHI <.MEM_4(D)(4), .MEM_10(38)>
      # DEBUG __x => __x_68
      # VUSE <.MEM_69>
      __x_8 = MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B];
      # DEBUG D#107 => __x_68
      # DEBUG __x => D#107
      # DEBUG this => this_6(D)
      # DEBUG __x => __x_8
      # DEBUG __x => __x_8
      if (__x_8 == 0B)
        goto <bb 6>;
      else
        goto <bb 7>;

    }
    bb_6 (preds = {bb_5 bb_40 }, succs = {bb_39 bb_38 })
    {
      <bb 6>:
      # .MEM_34 = PHI <.MEM_69(5), .MEM_94(40)>
      # VUSE <.MEM_34>
      __x_9 = MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B];
      # DEBUG D#108 => __x_68
      # DEBUG __x => D#108
      # DEBUG __y => NULL
      # DEBUG D#548 => this_6(D)
      # DEBUG __p => __x_68
      # DEBUG this => D#548
      # DEBUG D#547 => D#548
      # DEBUG D#546 => D#548
      # DEBUG D#545 => D#548
      # DEBUG D#543 => D#545
      # DEBUG D#544 => __x_68
      # DEBUG this => D#543
      # DEBUG __p => D#544
      # DEBUG D#542 => D#543
      # DEBUG D#541 => D#544
      # DEBUG D#540 => D#544
      # DEBUG this => D#540
      # DEBUG D#539 => &D#541->_M_value_field
      # DEBUG __r => D#539
      # DEBUG D#538 => D#542
      # DEBUG this => D#538
      # DEBUG D#537 => D#538
      # DEBUG this => D#537
      # DEBUG this => NULL
      # DEBUG D.57746 => NULL
      # DEBUG this => NULL
      # DEBUG D#330 => D#539
      # DEBUG this => D#329
      # DEBUG __p => D#330
      # DEBUG this => NULL
      # DEBUG this => NULL
      # DEBUG this => D#546
      # DEBUG __p => __x_68
      # DEBUG this => D#547
      # DEBUG D#407 => 1
      # DEBUG __p => __x_68
      # DEBUG __a => D#406
      # DEBUG __n => D#407
      # DEBUG D#405 => D#407
      # DEBUG D#404 => D#406
      # DEBUG D#402 => D#404
      # DEBUG D#403 => D#405
      # DEBUG __p => __x_68
      # DEBUG this => D#402
      # DEBUG D.57808 => D#403
      # .MEM_10 = VDEF <.MEM_34>
      operator delete (__x_68);
      # DEBUG __x => __x_9
      # DEBUG __x => __x_9
      if (__x_9 == 0B)
        goto <bb 39>;
      else
        goto <bb 38>;

    }
    bb_7 (preds = {bb_5 }, succs = {bb_8 })
    {
      <bb 7>:

    }
    bb_40 (preds = {bb_9 }, succs = {bb_6 })
    {
      <bb 40>:
      # .MEM_94 = PHI <.MEM_50(9)>
      goto <bb 6>;

    }
    bb_38 (preds = {bb_6 }, succs = {bb_5 })
    {
      <bb 38>:
      goto <bb 5>;

    }
    loop_2 (header = 8, latch = 37, niter = )
    {
      bb_8 (preds = {bb_7 bb_37 }, succs = {bb_9 bb_10 })
      {
        <bb 8>:
        # __x_72 = PHI <__x_8(7), __x_13(37)>
        # .MEM_93 = PHI <.MEM_69(7), .MEM_50(37)>
        # DEBUG __x => __x_72
        # VUSE <.MEM_93>
        __x_12 = MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B];
        # DEBUG D#107 => __x_72
        # DEBUG __x => D#107
        # DEBUG this => this_6(D)
        # DEBUG __x => __x_12
        # DEBUG __x => __x_12
        if (__x_12 == 0B)
          goto <bb 9>;
        else
          goto <bb 10>;

      }
      bb_9 (preds = {bb_8 bb_41 }, succs = {bb_40 bb_37 })
      {
        <bb 9>:
        # .MEM_30 = PHI <.MEM_93(8), .MEM_91(41)>
        # VUSE <.MEM_30>
        __x_13 = MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B];
        # DEBUG D#108 => __x_72
        # DEBUG __x => D#108
        # DEBUG __y => NULL
        # DEBUG D#548 => this_6(D)
        # DEBUG __p => __x_72
        # DEBUG this => D#548
        # DEBUG D#547 => D#548
        # DEBUG D#546 => D#548
        # DEBUG D#545 => D#548
        # DEBUG D#543 => D#545
        # DEBUG D#544 => __x_72
        # DEBUG this => D#543
        # DEBUG __p => D#544
        # DEBUG D#542 => D#543
        # DEBUG D#541 => D#544
        # DEBUG D#540 => D#544
        # DEBUG this => D#540
        # DEBUG D#539 => &D#541->_M_value_field
        # DEBUG __r => D#539
        # DEBUG D#538 => D#542
        # DEBUG this => D#538
        # DEBUG D#537 => D#538
        # DEBUG this => D#537
        # DEBUG this => NULL
        # DEBUG D.57746 => NULL
        # DEBUG this => NULL
        # DEBUG D#330 => D#539
        # DEBUG this => D#329
        # DEBUG __p => D#330
        # DEBUG this => NULL
        # DEBUG this => NULL
        # DEBUG this => D#546
        # DEBUG __p => __x_72
        # DEBUG this => D#547
        # DEBUG D#407 => 1
        # DEBUG __p => __x_72
        # DEBUG __a => D#406
        # DEBUG __n => D#407
        # DEBUG D#405 => D#407
        # DEBUG D#404 => D#406
        # DEBUG D#402 => D#404
        # DEBUG D#403 => D#405
        # DEBUG __p => __x_72
        # DEBUG this => D#402
        # DEBUG D.64420 => D#403
        # .MEM_50 = VDEF <.MEM_30>
        operator delete (__x_72);
        # DEBUG __x => __x_13
        # DEBUG __x => __x_13
        if (__x_13 == 0B)
          goto <bb 40>;
        else
          goto <bb 37>;

      }
      bb_10 (preds = {bb_8 }, succs = {bb_11 })
      {
        <bb 10>:

      }
      bb_41 (preds = {bb_12 }, succs = {bb_9 })
      {
        <bb 41>:
        # .MEM_91 = PHI <.MEM_49(12)>
        goto <bb 9>;

      }
      bb_37 (preds = {bb_9 }, succs = {bb_8 })
      {
        <bb 37>:
        goto <bb 8>;

      }
      loop_3 (header = 11, latch = 36, niter = )
      {
        bb_11 (preds = {bb_10 bb_36 }, succs = {bb_12 bb_13 })
        {
          <bb 11>:
          # __x_71 = PHI <__x_12(10), __x_16(36)>
          # .MEM_90 = PHI <.MEM_93(10), .MEM_49(36)>
          # DEBUG __x => __x_71
          # VUSE <.MEM_90>
          __x_15 = MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B];
          # DEBUG D#107 => __x_71
          # DEBUG __x => D#107
          # DEBUG this => this_6(D)
          # DEBUG __x => __x_15
          # DEBUG __x => __x_15
          if (__x_15 == 0B)
            goto <bb 12>;
          else
            goto <bb 13>;

        }
        bb_12 (preds = {bb_11 bb_42 }, succs = {bb_41 bb_36 })
        {
          <bb 12>:
          # .MEM_26 = PHI <.MEM_90(11), .MEM_88(42)>
          # VUSE <.MEM_26>
          __x_16 = MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B];
          # DEBUG D#108 => __x_71
          # DEBUG __x => D#108
          # DEBUG __y => NULL
          # DEBUG D#548 => this_6(D)
          # DEBUG __p => __x_71
          # DEBUG this => D#548
          # DEBUG D#547 => D#548
          # DEBUG D#546 => D#548
          # DEBUG D#545 => D#548
          # DEBUG D#543 => D#545
          # DEBUG D#544 => __x_71
          # DEBUG this => D#543
          # DEBUG __p => D#544
          # DEBUG D#542 => D#543
          # DEBUG D#541 => D#544
          # DEBUG D#540 => D#544
          # DEBUG this => D#540
          # DEBUG D#539 => &D#541->_M_value_field
          # DEBUG __r => D#539
          # DEBUG D#538 => D#542
          # DEBUG this => D#538
          # DEBUG D#537 => D#538
          # DEBUG this => D#537
          # DEBUG this => NULL
          # DEBUG D.57746 => NULL
          # DEBUG this => NULL
          # DEBUG D#330 => D#539
          # DEBUG this => D#329
          # DEBUG __p => D#330
          # DEBUG this => NULL
          # DEBUG this => NULL
          # DEBUG this => D#546
          # DEBUG __p => __x_71
          # DEBUG this => D#547
          # DEBUG D#407 => 1
          # DEBUG __p => __x_71
          # DEBUG __a => D#406
          # DEBUG __n => D#407
          # DEBUG D#405 => D#407
          # DEBUG D#404 => D#406
          # DEBUG D#402 => D#404
          # DEBUG D#403 => D#405
          # DEBUG __p => __x_71
          # DEBUG this => D#402
          # DEBUG D.64433 => D#403
          # .MEM_49 = VDEF <.MEM_26>
          operator delete (__x_71);
          # DEBUG __x => __x_16
          # DEBUG __x => __x_16
          if (__x_16 == 0B)
            goto <bb 41>;
          else
            goto <bb 36>;

        }
        bb_13 (preds = {bb_11 }, succs = {bb_14 })
        {
          <bb 13>:

        }
        bb_42 (preds = {bb_15 }, succs = {bb_12 })
        {
          <bb 42>:
          # .MEM_88 = PHI <.MEM_48(15)>
          goto <bb 12>;

        }
        bb_36 (preds = {bb_12 }, succs = {bb_11 })
        {
          <bb 36>:
          goto <bb 11>;

        }
        loop_4 (header = 14, latch = 35, niter = )
        {
          bb_14 (preds = {bb_13 bb_35 }, succs = {bb_15 bb_16 })
          {
            <bb 14>:
            # __x_77 = PHI <__x_15(13), __x_20(35)>
            # .MEM_87 = PHI <.MEM_90(13), .MEM_48(35)>
            # DEBUG __x => __x_77
            # VUSE <.MEM_87>
            __x_19 = MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B];
            # DEBUG D#107 => __x_77
            # DEBUG __x => D#107
            # DEBUG this => this_6(D)
            # DEBUG __x => __x_19
            # DEBUG __x => __x_19
            if (__x_19 == 0B)
              goto <bb 15>;
            else
              goto <bb 16>;

          }
          bb_15 (preds = {bb_14 bb_43 }, succs = {bb_42 bb_35 })
          {
            <bb 15>:
            # .MEM_25 = PHI <.MEM_87(14), .MEM_85(43)>
            # VUSE <.MEM_25>
            __x_20 = MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B];
            # DEBUG D#108 => __x_77
            # DEBUG __x => D#108
            # DEBUG __y => NULL
            # DEBUG D#548 => this_6(D)
            # DEBUG __p => __x_77
            # DEBUG this => D#548
            # DEBUG D#547 => D#548
            # DEBUG D#546 => D#548
            # DEBUG D#545 => D#548
            # DEBUG D#543 => D#545
            # DEBUG D#544 => __x_77
            # DEBUG this => D#543
            # DEBUG __p => D#544
            # DEBUG D#542 => D#543
            # DEBUG D#541 => D#544
            # DEBUG D#540 => D#544
            # DEBUG this => D#540
            # DEBUG D#539 => &D#541->_M_value_field
            # DEBUG __r => D#539
            # DEBUG D#538 => D#542
            # DEBUG this => D#538
            # DEBUG D#537 => D#538
            # DEBUG this => D#537
            # DEBUG this => NULL
            # DEBUG D.57746 => NULL
            # DEBUG this => NULL
            # DEBUG D#330 => D#539
            # DEBUG this => D#329
            # DEBUG __p => D#330
            # DEBUG this => NULL
            # DEBUG this => NULL
            # DEBUG this => D#546
            # DEBUG __p => __x_77
            # DEBUG this => D#547
            # DEBUG D#407 => 1
            # DEBUG __p => __x_77
            # DEBUG __a => D#406
            # DEBUG __n => D#407
            # DEBUG D#405 => D#407
            # DEBUG D#404 => D#406
            # DEBUG D#402 => D#404
            # DEBUG D#403 => D#405
            # DEBUG __p => __x_77
            # DEBUG this => D#402
            # DEBUG D.64446 => D#403
            # .MEM_48 = VDEF <.MEM_25>
            operator delete (__x_77);
            # DEBUG __x => __x_20
            # DEBUG __x => __x_20
            if (__x_20 == 0B)
              goto <bb 42>;
            else
              goto <bb 35>;

          }
          bb_16 (preds = {bb_14 }, succs = {bb_17 })
          {
            <bb 16>:

          }
          bb_43 (preds = {bb_18 }, succs = {bb_15 })
          {
            <bb 43>:
            # .MEM_85 = PHI <.MEM_47(18)>
            goto <bb 15>;

          }
          bb_35 (preds = {bb_15 }, succs = {bb_14 })
          {
            <bb 35>:
            goto <bb 14>;

          }
          loop_5 (header = 17, latch = 34, niter = )
          {
            bb_17 (preds = {bb_16 bb_34 }, succs = {bb_18 bb_19 })
            {
              <bb 17>:
              # __x_80 = PHI <__x_19(16), __x_24(34)>
              # .MEM_84 = PHI <.MEM_87(16), .MEM_47(34)>
              # DEBUG __x => __x_80
              # VUSE <.MEM_84>
              __x_23 = MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B];
              # DEBUG D#107 => __x_80
              # DEBUG __x => D#107
              # DEBUG this => this_6(D)
              # DEBUG __x => __x_23
              # DEBUG __x => __x_23
              if (__x_23 == 0B)
                goto <bb 18>;
              else
                goto <bb 19>;

            }
            bb_18 (preds = {bb_17 bb_44 }, succs = {bb_43 bb_34 })
            {
              <bb 18>:
              # .MEM_21 = PHI <.MEM_84(17), .MEM_82(44)>
              # VUSE <.MEM_21>
              __x_24 = MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B];
              # DEBUG D#108 => __x_80
              # DEBUG __x => D#108
              # DEBUG __y => NULL
              # DEBUG D#548 => this_6(D)
              # DEBUG __p => __x_80
              # DEBUG this => D#548
              # DEBUG D#547 => D#548
              # DEBUG D#546 => D#548
              # DEBUG D#545 => D#548
              # DEBUG D#543 => D#545
              # DEBUG D#544 => __x_80
              # DEBUG this => D#543
              # DEBUG __p => D#544
              # DEBUG D#542 => D#543
              # DEBUG D#541 => D#544
              # DEBUG D#540 => D#544
              # DEBUG this => D#540
              # DEBUG D#539 => &D#541->_M_value_field
              # DEBUG __r => D#539
              # DEBUG D#538 => D#542
              # DEBUG this => D#538
              # DEBUG D#537 => D#538
              # DEBUG this => D#537
              # DEBUG this => NULL
              # DEBUG D.57746 => NULL
              # DEBUG this => NULL
              # DEBUG D#330 => D#539
              # DEBUG this => D#329
              # DEBUG __p => D#330
              # DEBUG this => NULL
              # DEBUG this => NULL
              # DEBUG this => D#546
              # DEBUG __p => __x_80
              # DEBUG this => D#547
              # DEBUG D#407 => 1
              # DEBUG __p => __x_80
              # DEBUG __a => D#406
              # DEBUG __n => D#407
              # DEBUG D#405 => D#407
              # DEBUG D#404 => D#406
              # DEBUG D#402 => D#404
              # DEBUG D#403 => D#405
              # DEBUG __p => __x_80
              # DEBUG this => D#402
              # DEBUG D.64459 => D#403
              # .MEM_47 = VDEF <.MEM_21>
              operator delete (__x_80);
              # DEBUG __x => __x_24
              # DEBUG __x => __x_24
              if (__x_24 == 0B)
                goto <bb 43>;
              else
                goto <bb 34>;

            }
            bb_19 (preds = {bb_17 }, succs = {bb_20 })
            {
              <bb 19>:

            }
            bb_44 (preds = {bb_21 }, succs = {bb_18 })
            {
              <bb 44>:
              # .MEM_82 = PHI <.MEM_46(21)>
              goto <bb 18>;

            }
            bb_34 (preds = {bb_18 }, succs = {bb_17 })
            {
              <bb 34>:
              goto <bb 17>;

            }
            loop_6 (header = 20, latch = 33, niter = )
            {
              bb_20 (preds = {bb_19 bb_33 }, succs = {bb_21 bb_22 })
              {
                <bb 20>:
                # .MEM_81 = PHI <.MEM_84(19), .MEM_46(33)>
                # __x_83 = PHI <__x_23(19), __x_28(33)>
                # DEBUG __x => __x_83
                # VUSE <.MEM_81>
                __x_27 = MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B];
                # DEBUG D#107 => __x_83
                # DEBUG __x => D#107
                # DEBUG this => this_6(D)
                # DEBUG __x => __x_27
                # DEBUG __x => __x_27
                if (__x_27 == 0B)
                  goto <bb 21>;
                else
                  goto <bb 22>;

              }
              bb_21 (preds = {bb_20 bb_45 }, succs = {bb_44 bb_33 })
              {
                <bb 21>:
                # .MEM_17 = PHI <.MEM_81(20), .MEM_79(45)>
                # VUSE <.MEM_17>
                __x_28 = MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B];
                # DEBUG D#108 => __x_83
                # DEBUG __x => D#108
                # DEBUG __y => NULL
                # DEBUG D#548 => this_6(D)
                # DEBUG __p => __x_83
                # DEBUG this => D#548
                # DEBUG D#547 => D#548
                # DEBUG D#546 => D#548
                # DEBUG D#545 => D#548
                # DEBUG D#543 => D#545
                # DEBUG D#544 => __x_83
                # DEBUG this => D#543
                # DEBUG __p => D#544
                # DEBUG D#542 => D#543
                # DEBUG D#541 => D#544
                # DEBUG D#540 => D#544
                # DEBUG this => D#540
                # DEBUG D#539 => &D#541->_M_value_field
                # DEBUG __r => D#539
                # DEBUG D#538 => D#542
                # DEBUG this => D#538
                # DEBUG D#537 => D#538
                # DEBUG this => D#537
                # DEBUG this => NULL
                # DEBUG D.57746 => NULL
                # DEBUG this => NULL
                # DEBUG D#330 => D#539
                # DEBUG this => D#329
                # DEBUG __p => D#330
                # DEBUG this => NULL
                # DEBUG this => NULL
                # DEBUG this => D#546
                # DEBUG __p => __x_83
                # DEBUG this => D#547
                # DEBUG D#407 => 1
                # DEBUG __p => __x_83
                # DEBUG __a => D#406
                # DEBUG __n => D#407
                # DEBUG D#405 => D#407
                # DEBUG D#404 => D#406
                # DEBUG D#402 => D#404
                # DEBUG D#403 => D#405
                # DEBUG __p => __x_83
                # DEBUG this => D#402
                # DEBUG D.64472 => D#403
                # .MEM_46 = VDEF <.MEM_17>
                operator delete (__x_83);
                # DEBUG __x => __x_28
                # DEBUG __x => __x_28
                if (__x_28 == 0B)
                  goto <bb 44>;
                else
                  goto <bb 33>;

              }
              bb_22 (preds = {bb_20 }, succs = {bb_23 })
              {
                <bb 22>:

              }
              bb_45 (preds = {bb_24 }, succs = {bb_21 })
              {
                <bb 45>:
                # .MEM_79 = PHI <.MEM_45(24)>
                goto <bb 21>;

              }
              bb_33 (preds = {bb_21 }, succs = {bb_20 })
              {
                <bb 33>:
                goto <bb 20>;

              }
              loop_7 (header = 23, latch = 32, niter = )
              {
                bb_23 (preds = {bb_22 bb_32 }, succs = {bb_24 bb_25 })
                {
                  <bb 23>:
                  # .MEM_78 = PHI <.MEM_81(22), .MEM_45(32)>
                  # __x_86 = PHI <__x_27(22), __x_32(32)>
                  # DEBUG __x => __x_86
                  # VUSE <.MEM_78>
                  __x_31 = MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B];
                  # DEBUG D#107 => __x_86
                  # DEBUG __x => D#107
                  # DEBUG this => this_6(D)
                  # DEBUG __x => __x_31
                  # DEBUG __x => __x_31
                  if (__x_31 == 0B)
                    goto <bb 24>;
                  else
                    goto <bb 25>;

                }
                bb_24 (preds = {bb_23 bb_46 }, succs = {bb_45 bb_32 })
                {
                  <bb 24>:
                  # .MEM_14 = PHI <.MEM_78(23), .MEM_76(46)>
                  # VUSE <.MEM_14>
                  __x_32 = MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B];
                  # DEBUG D#108 => __x_86
                  # DEBUG __x => D#108
                  # DEBUG __y => NULL
                  # DEBUG D#548 => this_6(D)
                  # DEBUG __p => __x_86
                  # DEBUG this => D#548
                  # DEBUG D#547 => D#548
                  # DEBUG D#546 => D#548
                  # DEBUG D#545 => D#548
                  # DEBUG D#543 => D#545
                  # DEBUG D#544 => __x_86
                  # DEBUG this => D#543
                  # DEBUG __p => D#544
                  # DEBUG D#542 => D#543
                  # DEBUG D#541 => D#544
                  # DEBUG D#540 => D#544
                  # DEBUG this => D#540
                  # DEBUG D#539 => &D#541->_M_value_field
                  # DEBUG __r => D#539
                  # DEBUG D#538 => D#542
                  # DEBUG this => D#538
                  # DEBUG D#537 => D#538
                  # DEBUG this => D#537
                  # DEBUG this => NULL
                  # DEBUG D.57746 => NULL
                  # DEBUG this => NULL
                  # DEBUG D#330 => D#539
                  # DEBUG this => D#329
                  # DEBUG __p => D#330
                  # DEBUG this => NULL
                  # DEBUG this => NULL
                  # DEBUG this => D#546
                  # DEBUG __p => __x_86
                  # DEBUG this => D#547
                  # DEBUG D#407 => 1
                  # DEBUG __p => __x_86
                  # DEBUG __a => D#406
                  # DEBUG __n => D#407
                  # DEBUG D#405 => D#407
                  # DEBUG D#404 => D#406
                  # DEBUG D#402 => D#404
                  # DEBUG D#403 => D#405
                  # DEBUG __p => __x_86
                  # DEBUG this => D#402
                  # DEBUG D.64485 => D#403
                  # .MEM_45 = VDEF <.MEM_14>
                  operator delete (__x_86);
                  # DEBUG __x => __x_32
                  # DEBUG __x => __x_32
                  if (__x_32 == 0B)
                    goto <bb 45>;
                  else
                    goto <bb 32>;

                }
                bb_25 (preds = {bb_23 }, succs = {bb_26 })
                {
                  <bb 25>:

                }
                bb_46 (preds = {bb_27 }, succs = {bb_24 })
                {
                  <bb 46>:
                  # .MEM_76 = PHI <.MEM_44(27)>
                  goto <bb 24>;

                }
                bb_32 (preds = {bb_24 }, succs = {bb_23 })
                {
                  <bb 32>:
                  goto <bb 23>;

                }
                loop_8 (header = 26, latch = 31, niter = )
                {
                  bb_26 (preds = {bb_25 bb_31 }, succs = {bb_27 bb_28 })
                  {
                    <bb 26>:
                    # .MEM_75 = PHI <.MEM_78(25), .MEM_44(31)>
                    # __x_89 = PHI <__x_31(25), __x_36(31)>
                    # DEBUG __x => __x_89
                    # VUSE <.MEM_75>
                    __x_35 = MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B];
                    # DEBUG D#107 => __x_89
                    # DEBUG __x => D#107
                    # DEBUG this => this_6(D)
                    # DEBUG __x => __x_35
                    # DEBUG __x => __x_35
                    if (__x_35 == 0B)
                      goto <bb 27>;
                    else
                      goto <bb 28>;

                  }
                  bb_27 (preds = {bb_26 bb_47 }, succs = {bb_46 bb_31 })
                  {
                    <bb 27>:
                    # .MEM_22 = PHI <.MEM_75(26), .MEM_74(47)>
                    # VUSE <.MEM_22>
                    __x_36 = MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B];
                    # DEBUG D#108 => __x_89
                    # DEBUG __x => D#108
                    # DEBUG __y => NULL
                    # DEBUG D#548 => this_6(D)
                    # DEBUG __p => __x_89
                    # DEBUG this => D#548
                    # DEBUG D#547 => D#548
                    # DEBUG D#546 => D#548
                    # DEBUG D#545 => D#548
                    # DEBUG D#543 => D#545
                    # DEBUG D#544 => __x_89
                    # DEBUG this => D#543
                    # DEBUG __p => D#544
                    # DEBUG D#542 => D#543
                    # DEBUG D#541 => D#544
                    # DEBUG D#540 => D#544
                    # DEBUG this => D#540
                    # DEBUG D#539 => &D#541->_M_value_field
                    # DEBUG __r => D#539
                    # DEBUG D#538 => D#542
                    # DEBUG this => D#538
                    # DEBUG D#537 => D#538
                    # DEBUG this => D#537
                    # DEBUG this => NULL
                    # DEBUG D.57746 => NULL
                    # DEBUG this => NULL
                    # DEBUG D#330 => D#539
                    # DEBUG this => D#329
                    # DEBUG __p => D#330
                    # DEBUG this => NULL
                    # DEBUG this => NULL
                    # DEBUG this => D#546
                    # DEBUG __p => __x_89
                    # DEBUG this => D#547
                    # DEBUG D#407 => 1
                    # DEBUG __p => __x_89
                    # DEBUG __a => D#406
                    # DEBUG __n => D#407
                    # DEBUG D#405 => D#407
                    # DEBUG D#404 => D#406
                    # DEBUG D#402 => D#404
                    # DEBUG D#403 => D#405
                    # DEBUG __p => __x_89
                    # DEBUG this => D#402
                    # DEBUG D.64498 => D#403
                    # .MEM_44 = VDEF <.MEM_22>
                    operator delete (__x_89);
                    # DEBUG __x => __x_36
                    # DEBUG __x => __x_36
                    if (__x_36 == 0B)
                      goto <bb 46>;
                    else
                      goto <bb 31>;

                  }
                  bb_28 (preds = {bb_26 }, succs = {bb_29 })
                  {
                    <bb 28>:

                  }
                  bb_47 (preds = {bb_29 }, succs = {bb_27 })
                  {
                    <bb 47>:
                    # .MEM_74 = PHI <.MEM_43(29)>
                    goto <bb 27>;

                  }
                  bb_31 (preds = {bb_27 }, succs = {bb_26 })
                  {
                    <bb 31>:
                    goto <bb 26>;

                  }
                  loop_9 (header = 29, latch = 30, niter = )
                  {
                    bb_29 (preds = {bb_28 bb_30 }, succs = {bb_47 bb_30 })
                    {
                      <bb 29>:
                      # .MEM_73 = PHI <.MEM_75(28), .MEM_43(30)>
                      # __x_92 = PHI <__x_35(28), __x_40(30)>
                      # DEBUG __x => __x_92
                      # VUSE <.MEM_73>
                      _39 = MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B];
                      # DEBUG D#107 => __x_92
                      # DEBUG __x => D#107
                      # .MEM_42 = VDEF <.MEM_73>
                      std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_M_erase (this_6(D), _39);
                      # VUSE <.MEM_42>
                      __x_40 = MEM[(struct _Rb_tree_node_base * *)__x_92 + 16B];
                      # DEBUG D#108 => __x_92
                      # DEBUG __x => D#108
                      # DEBUG __y => NULL
                      # DEBUG D#548 => this_6(D)
                      # DEBUG __p => __x_92
                      # DEBUG this => D#548
                      # DEBUG D#547 => D#548
                      # DEBUG D#546 => D#548
                      # DEBUG D#545 => D#548
                      # DEBUG D#543 => D#545
                      # DEBUG D#544 => __x_92
                      # DEBUG this => D#543
                      # DEBUG __p => D#544
                      # DEBUG D#542 => D#543
                      # DEBUG D#541 => D#544
                      # DEBUG D#540 => D#544
                      # DEBUG this => D#540
                      # DEBUG D#539 => &D#541->_M_value_field
                      # DEBUG __r => D#539
                      # DEBUG D#538 => D#542
                      # DEBUG this => D#538
                      # DEBUG D#537 => D#538
                      # DEBUG this => D#537
                      # DEBUG this => NULL
                      # DEBUG D.57746 => NULL
                      # DEBUG this => NULL
                      # DEBUG D#330 => D#539
                      # DEBUG this => D#329
                      # DEBUG __p => D#330
                      # DEBUG this => NULL
                      # DEBUG this => NULL
                      # DEBUG this => D#546
                      # DEBUG __p => __x_92
                      # DEBUG this => D#547
                      # DEBUG D#407 => 1
                      # DEBUG __p => __x_92
                      # DEBUG __a => D#406
                      # DEBUG __n => D#407
                      # DEBUG D#405 => D#407
                      # DEBUG D#404 => D#406
                      # DEBUG D#402 => D#404
                      # DEBUG D#403 => D#405
                      # DEBUG __p => __x_92
                      # DEBUG this => D#402
                      # DEBUG D.64511 => D#403
                      # .MEM_43 = VDEF <.MEM_42>
                      operator delete (__x_92);
                      # DEBUG __x => __x_40
                      # DEBUG __x => __x_40
                      if (__x_40 == 0B)
                        goto <bb 47>;
                      else
                        goto <bb 30>;

                    }
                    bb_30 (preds = {bb_29 }, succs = {bb_29 })
                    {
                      <bb 30>:
                      goto <bb 29>;

                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

Pass statistics:
----------------

void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = int; _Val = std::pair<const int, Allocator::sRequest>; _KeyOfValue = std::_Select1st<std::pair<const int, Allocator::sRequest> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, Allocator::sRequest> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, Allocator::sRequest> >*] (struct _Rb_treeD.41462 * const thisD.41823, struct _Rb_tree_nodeD.41466 * __xD.41824)
{
  struct _Rb_tree_nodeD.41466 * __xD.64501;
  struct _Rb_tree_nodeD.41466 * __xD.64488;
  struct _Rb_tree_nodeD.41466 * __xD.64475;
  struct _Rb_tree_nodeD.41466 * __xD.64462;
  struct _Rb_tree_nodeD.41466 * __xD.64449;
  struct _Rb_tree_nodeD.41466 * __xD.64436;
  struct _Rb_tree_nodeD.41466 * __xD.64423;
  struct _Rb_tree_nodeD.41466 * __xD.64410;
  struct _Rb_tree_node_baseD.24800 * _39;

;;   basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __xD.41824 => __x_3(D)
  if (__x_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 2, next block 48, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [100.0%]  (FALLTHRU)
  # .MEM_38 = PHI <.MEM_4(D)(2), .MEM_70(39)>
;;    succ:       48 [100.0%]  (FALLTHRU)

;;   basic block 48, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 3, next block 4, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_38>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 48, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_68 = PHI <__x_3(D)(4), __x_9(38)>
  # .MEM_69 = PHI <.MEM_4(D)(4), .MEM_10(38)>
  # DEBUG __xD.41824 => __x_68
  # VUSE <.MEM_69>
  # PT = nonlocal escaped 
  __x_8 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_68 + 24B];
  # DEBUG D#107ptD.0 => __x_68
  # DEBUG __xD.57814 => D#107ptD.0
  # DEBUG thisD.64409 => this_6(D)
  # DEBUG __xD.64410 => __x_8
  # DEBUG __xD.64410 => __x_8
  if (__x_8 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 5, next block 39, flags: (NEW, REACHABLE)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [100.0%]  (FALLTHRU)
  # .MEM_34 = PHI <.MEM_69(5), .MEM_94(40)>
  # VUSE <.MEM_34>
  # PT = nonlocal escaped 
  __x_9 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_68 + 16B];
  # DEBUG D#108ptD.0 => __x_68
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.44529 => NULL
  # DEBUG D#548ptD.0 => this_6(D)
  # DEBUG __pD.57800 => __x_68
  # DEBUG thisD.57801 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_68
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.57803 => D#546ptD.0
  # DEBUG __pD.57802 => __x_68
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.57806 => __x_68
  # DEBUG __aD.57804 => D#406ptD.0
  # DEBUG __nD.57805 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.57809 => __x_68
  # DEBUG thisD.57807 => D#402ptD.0
  # DEBUG D.57808 => D#403ptD.0
  # .MEM_10 = VDEF <.MEM_34>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_68);
  # DEBUG __xD.41824 => __x_9
  # DEBUG __xD.41824 => __x_9
  if (__x_9 == 0B)
    goto <bb 39>;
  else
    goto <bb 38>;
;;    succ:       39 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 6, next block 7, flags: (NEW)
;;    pred:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_70 = PHI <.MEM_10(6)>
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU)

;;   basic block 7, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 39, next block 8, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_72 = PHI <__x_8(7), __x_13(37)>
  # .MEM_93 = PHI <.MEM_69(7), .MEM_50(37)>
  # DEBUG __xD.64410 => __x_72
  # VUSE <.MEM_93>
  # PT = nonlocal escaped 
  __x_12 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_72 + 24B];
  # DEBUG D#107ptD.0 => __x_72
  # DEBUG __xD.57814 => D#107ptD.0
  # DEBUG thisD.64422 => this_6(D)
  # DEBUG __xD.64423 => __x_12
  # DEBUG __xD.64423 => __x_12
  if (__x_12 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 8, next block 40, flags: (NEW, REACHABLE)
;;    pred:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU)
  # .MEM_30 = PHI <.MEM_93(8), .MEM_91(41)>
  # VUSE <.MEM_30>
  # PT = nonlocal escaped 
  __x_13 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_72 + 16B];
  # DEBUG D#108ptD.0 => __x_72
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.64411 => NULL
  # DEBUG D#548ptD.0 => this_6(D)
  # DEBUG __pD.64413 => __x_72
  # DEBUG thisD.64412 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_72
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.64415 => D#546ptD.0
  # DEBUG __pD.64414 => __x_72
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.64418 => __x_72
  # DEBUG __aD.64416 => D#406ptD.0
  # DEBUG __nD.64417 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.64421 => __x_72
  # DEBUG thisD.64419 => D#402ptD.0
  # DEBUG D.64420 => D#403ptD.0
  # .MEM_50 = VDEF <.MEM_30>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_72);
  # DEBUG __xD.64410 => __x_13
  # DEBUG __xD.64410 => __x_13
  if (__x_13 == 0B)
    goto <bb 40>;
  else
    goto <bb 37>;
;;    succ:       40 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 9, next block 10, flags: (NEW)
;;    pred:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_94 = PHI <.MEM_50(9)>
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU)

;;   basic block 10, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 40, next block 11, flags: (NEW)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                36 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_71 = PHI <__x_12(10), __x_16(36)>
  # .MEM_90 = PHI <.MEM_93(10), .MEM_49(36)>
  # DEBUG __xD.64423 => __x_71
  # VUSE <.MEM_90>
  # PT = nonlocal escaped 
  __x_15 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_71 + 24B];
  # DEBUG D#107ptD.0 => __x_71
  # DEBUG __xD.57814 => D#107ptD.0
  # DEBUG thisD.64435 => this_6(D)
  # DEBUG __xD.64436 => __x_15
  # DEBUG __xD.64436 => __x_15
  if (__x_15 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;
;;    succ:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 11, next block 41, flags: (NEW, REACHABLE)
;;    pred:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                42 [100.0%]  (FALLTHRU)
  # .MEM_26 = PHI <.MEM_90(11), .MEM_88(42)>
  # VUSE <.MEM_26>
  # PT = nonlocal escaped 
  __x_16 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_71 + 16B];
  # DEBUG D#108ptD.0 => __x_71
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.64424 => NULL
  # DEBUG D#548ptD.0 => this_6(D)
  # DEBUG __pD.64426 => __x_71
  # DEBUG thisD.64425 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_71
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.64428 => D#546ptD.0
  # DEBUG __pD.64427 => __x_71
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.64431 => __x_71
  # DEBUG __aD.64429 => D#406ptD.0
  # DEBUG __nD.64430 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.64434 => __x_71
  # DEBUG thisD.64432 => D#402ptD.0
  # DEBUG D.64433 => D#403ptD.0
  # .MEM_49 = VDEF <.MEM_26>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_71);
  # DEBUG __xD.64423 => __x_16
  # DEBUG __xD.64423 => __x_16
  if (__x_16 == 0B)
    goto <bb 41>;
  else
    goto <bb 36>;
;;    succ:       41 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 41, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 12, next block 13, flags: (NEW)
;;    pred:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_91 = PHI <.MEM_49(12)>
  goto <bb 9>;
;;    succ:       9 [100.0%]  (FALLTHRU)

;;   basic block 13, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 41, next block 14, flags: (NEW)
;;    pred:       11 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_77 = PHI <__x_15(13), __x_20(35)>
  # .MEM_87 = PHI <.MEM_90(13), .MEM_48(35)>
  # DEBUG __xD.64436 => __x_77
  # VUSE <.MEM_87>
  # PT = nonlocal escaped 
  __x_19 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_77 + 24B];
  # DEBUG D#107ptD.0 => __x_77
  # DEBUG __xD.57814 => D#107ptD.0
  # DEBUG thisD.64448 => this_6(D)
  # DEBUG __xD.64449 => __x_19
  # DEBUG __xD.64449 => __x_19
  if (__x_19 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 14, next block 42, flags: (NEW, REACHABLE)
;;    pred:       14 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                43 [100.0%]  (FALLTHRU)
  # .MEM_25 = PHI <.MEM_87(14), .MEM_85(43)>
  # VUSE <.MEM_25>
  # PT = nonlocal escaped 
  __x_20 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_77 + 16B];
  # DEBUG D#108ptD.0 => __x_77
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.64437 => NULL
  # DEBUG D#548ptD.0 => this_6(D)
  # DEBUG __pD.64439 => __x_77
  # DEBUG thisD.64438 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_77
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.64441 => D#546ptD.0
  # DEBUG __pD.64440 => __x_77
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.64444 => __x_77
  # DEBUG __aD.64442 => D#406ptD.0
  # DEBUG __nD.64443 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.64447 => __x_77
  # DEBUG thisD.64445 => D#402ptD.0
  # DEBUG D.64446 => D#403ptD.0
  # .MEM_48 = VDEF <.MEM_25>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_77);
  # DEBUG __xD.64436 => __x_20
  # DEBUG __xD.64436 => __x_20
  if (__x_20 == 0B)
    goto <bb 42>;
  else
    goto <bb 35>;
;;    succ:       42 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 42, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 15, next block 16, flags: (NEW)
;;    pred:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_88 = PHI <.MEM_48(15)>
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU)

;;   basic block 16, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 42, next block 17, flags: (NEW)
;;    pred:       14 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                34 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_80 = PHI <__x_19(16), __x_24(34)>
  # .MEM_84 = PHI <.MEM_87(16), .MEM_47(34)>
  # DEBUG __xD.64449 => __x_80
  # VUSE <.MEM_84>
  # PT = nonlocal escaped 
  __x_23 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_80 + 24B];
  # DEBUG D#107ptD.0 => __x_80
  # DEBUG __xD.57814 => D#107ptD.0
  # DEBUG thisD.64461 => this_6(D)
  # DEBUG __xD.64462 => __x_23
  # DEBUG __xD.64462 => __x_23
  if (__x_23 == 0B)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 17, next block 43, flags: (NEW, REACHABLE)
;;    pred:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [100.0%]  (FALLTHRU)
  # .MEM_21 = PHI <.MEM_84(17), .MEM_82(44)>
  # VUSE <.MEM_21>
  # PT = nonlocal escaped 
  __x_24 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_80 + 16B];
  # DEBUG D#108ptD.0 => __x_80
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.64450 => NULL
  # DEBUG D#548ptD.0 => this_6(D)
  # DEBUG __pD.64452 => __x_80
  # DEBUG thisD.64451 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_80
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.64454 => D#546ptD.0
  # DEBUG __pD.64453 => __x_80
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.64457 => __x_80
  # DEBUG __aD.64455 => D#406ptD.0
  # DEBUG __nD.64456 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.64460 => __x_80
  # DEBUG thisD.64458 => D#402ptD.0
  # DEBUG D.64459 => D#403ptD.0
  # .MEM_47 = VDEF <.MEM_21>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_80);
  # DEBUG __xD.64449 => __x_24
  # DEBUG __xD.64449 => __x_24
  if (__x_24 == 0B)
    goto <bb 43>;
  else
    goto <bb 34>;
;;    succ:       43 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 43, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 18, next block 19, flags: (NEW)
;;    pred:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_85 = PHI <.MEM_47(18)>
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU)

;;   basic block 19, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 43, next block 20, flags: (NEW)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 6, count 0, freq 9, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_81 = PHI <.MEM_84(19), .MEM_46(33)>
  # PT = nonlocal escaped 
  # __x_83 = PHI <__x_23(19), __x_28(33)>
  # DEBUG __xD.64462 => __x_83
  # VUSE <.MEM_81>
  # PT = nonlocal escaped 
  __x_27 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_83 + 24B];
  # DEBUG D#107ptD.0 => __x_83
  # DEBUG __xD.57814 => D#107ptD.0
  # DEBUG thisD.64474 => this_6(D)
  # DEBUG __xD.64475 => __x_27
  # DEBUG __xD.64475 => __x_27
  if (__x_27 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 6, count 0, freq 9, maybe hot
;;    prev block 20, next block 44, flags: (NEW, REACHABLE)
;;    pred:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                45 [100.0%]  (FALLTHRU)
  # .MEM_17 = PHI <.MEM_81(20), .MEM_79(45)>
  # VUSE <.MEM_17>
  # PT = nonlocal escaped 
  __x_28 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_83 + 16B];
  # DEBUG D#108ptD.0 => __x_83
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.64463 => NULL
  # DEBUG D#548ptD.0 => this_6(D)
  # DEBUG __pD.64465 => __x_83
  # DEBUG thisD.64464 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_83
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.64467 => D#546ptD.0
  # DEBUG __pD.64466 => __x_83
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.64470 => __x_83
  # DEBUG __aD.64468 => D#406ptD.0
  # DEBUG __nD.64469 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.64473 => __x_83
  # DEBUG thisD.64471 => D#402ptD.0
  # DEBUG D.64472 => D#403ptD.0
  # .MEM_46 = VDEF <.MEM_17>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_83);
  # DEBUG __xD.64462 => __x_28
  # DEBUG __xD.64462 => __x_28
  if (__x_28 == 0B)
    goto <bb 44>;
  else
    goto <bb 33>;
;;    succ:       44 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 44, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 21, next block 22, flags: (NEW)
;;    pred:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_82 = PHI <.MEM_46(21)>
  goto <bb 18>;
;;    succ:       18 [100.0%]  (FALLTHRU)

;;   basic block 22, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 44, next block 23, flags: (NEW)
;;    pred:       20 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 7, count 0, freq 89, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_78 = PHI <.MEM_81(22), .MEM_45(32)>
  # PT = nonlocal escaped 
  # __x_86 = PHI <__x_27(22), __x_32(32)>
  # DEBUG __xD.64475 => __x_86
  # VUSE <.MEM_78>
  # PT = nonlocal escaped 
  __x_31 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_86 + 24B];
  # DEBUG D#107ptD.0 => __x_86
  # DEBUG __xD.57814 => D#107ptD.0
  # DEBUG thisD.64487 => this_6(D)
  # DEBUG __xD.64488 => __x_31
  # DEBUG __xD.64488 => __x_31
  if (__x_31 == 0B)
    goto <bb 24>;
  else
    goto <bb 25>;
;;    succ:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 7, count 0, freq 89, maybe hot
;;    prev block 23, next block 45, flags: (NEW, REACHABLE)
;;    pred:       23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                46 [100.0%]  (FALLTHRU)
  # .MEM_14 = PHI <.MEM_78(23), .MEM_76(46)>
  # VUSE <.MEM_14>
  # PT = nonlocal escaped 
  __x_32 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_86 + 16B];
  # DEBUG D#108ptD.0 => __x_86
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.64476 => NULL
  # DEBUG D#548ptD.0 => this_6(D)
  # DEBUG __pD.64478 => __x_86
  # DEBUG thisD.64477 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_86
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.64480 => D#546ptD.0
  # DEBUG __pD.64479 => __x_86
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.64483 => __x_86
  # DEBUG __aD.64481 => D#406ptD.0
  # DEBUG __nD.64482 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.64486 => __x_86
  # DEBUG thisD.64484 => D#402ptD.0
  # DEBUG D.64485 => D#403ptD.0
  # .MEM_45 = VDEF <.MEM_14>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_86);
  # DEBUG __xD.64475 => __x_32
  # DEBUG __xD.64475 => __x_32
  if (__x_32 == 0B)
    goto <bb 45>;
  else
    goto <bb 32>;
;;    succ:       45 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 45, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 24, next block 25, flags: (NEW)
;;    pred:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_79 = PHI <.MEM_45(24)>
  goto <bb 21>;
;;    succ:       21 [100.0%]  (FALLTHRU)

;;   basic block 25, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 45, next block 26, flags: (NEW)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 8, count 0, freq 900, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_75 = PHI <.MEM_78(25), .MEM_44(31)>
  # PT = nonlocal escaped 
  # __x_89 = PHI <__x_31(25), __x_36(31)>
  # DEBUG __xD.64488 => __x_89
  # VUSE <.MEM_75>
  # PT = nonlocal escaped 
  __x_35 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_89 + 24B];
  # DEBUG D#107ptD.0 => __x_89
  # DEBUG __xD.57814 => D#107ptD.0
  # DEBUG thisD.64500 => this_6(D)
  # DEBUG __xD.64501 => __x_35
  # DEBUG __xD.64501 => __x_35
  if (__x_35 == 0B)
    goto <bb 27>;
  else
    goto <bb 28>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 8, count 0, freq 900, maybe hot
;;    prev block 26, next block 46, flags: (NEW, REACHABLE)
;;    pred:       26 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [100.0%]  (FALLTHRU)
  # .MEM_22 = PHI <.MEM_75(26), .MEM_74(47)>
  # VUSE <.MEM_22>
  # PT = nonlocal escaped 
  __x_36 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_89 + 16B];
  # DEBUG D#108ptD.0 => __x_89
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.64489 => NULL
  # DEBUG D#548ptD.0 => this_6(D)
  # DEBUG __pD.64491 => __x_89
  # DEBUG thisD.64490 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_89
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.64493 => D#546ptD.0
  # DEBUG __pD.64492 => __x_89
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.64496 => __x_89
  # DEBUG __aD.64494 => D#406ptD.0
  # DEBUG __nD.64495 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.64499 => __x_89
  # DEBUG thisD.64497 => D#402ptD.0
  # DEBUG D.64498 => D#403ptD.0
  # .MEM_44 = VDEF <.MEM_22>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_89);
  # DEBUG __xD.64488 => __x_36
  # DEBUG __xD.64488 => __x_36
  if (__x_36 == 0B)
    goto <bb 46>;
  else
    goto <bb 31>;
;;    succ:       46 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 46, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 27, next block 28, flags: (NEW)
;;    pred:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_76 = PHI <.MEM_44(27)>
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU)

;;   basic block 28, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 46, next block 29, flags: (NEW)
;;    pred:       26 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 9, count 0, freq 9100, maybe hot
;;    prev block 28, next block 47, flags: (NEW)
;;    pred:       28 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_73 = PHI <.MEM_75(28), .MEM_43(30)>
  # PT = nonlocal escaped 
  # __x_92 = PHI <__x_35(28), __x_40(30)>
  # DEBUG __xD.64501 => __x_92
  # VUSE <.MEM_73>
  # PT = nonlocal escaped 
  _39 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_92 + 24B];
  # DEBUG D#107ptD.0 => __x_92
  # DEBUG __xD.57814 => D#107ptD.0
  # .MEM_42 = VDEF <.MEM_73>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (this_6(D), _39);
  # VUSE <.MEM_42>
  # PT = nonlocal escaped 
  __x_40 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_92 + 16B];
  # DEBUG D#108ptD.0 => __x_92
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.64502 => NULL
  # DEBUG D#548ptD.0 => this_6(D)
  # DEBUG __pD.64504 => __x_92
  # DEBUG thisD.64503 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_92
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.64506 => D#546ptD.0
  # DEBUG __pD.64505 => __x_92
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.64509 => __x_92
  # DEBUG __aD.64507 => D#406ptD.0
  # DEBUG __nD.64508 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.64512 => __x_92
  # DEBUG thisD.64510 => D#402ptD.0
  # DEBUG D.64511 => D#403ptD.0
  # .MEM_43 = VDEF <.MEM_42>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_92);
  # DEBUG __xD.64501 => __x_40
  # DEBUG __xD.64501 => __x_40
  if (__x_40 == 0B)
    goto <bb 47>;
  else
    goto <bb 30>;
;;    succ:       47 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 47, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 29, next block 30, flags: (NEW)
;;    pred:       29 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_74 = PHI <.MEM_43(29)>
  goto <bb 27>;
;;    succ:       27 [100.0%]  (FALLTHRU)

;;   basic block 30, loop depth 9, count 0, freq 8281, maybe hot
;;    prev block 47, next block 31, flags: (NEW)
;;    pred:       29 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 31, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       27 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 32, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 31, next block 33, flags: (NEW)
;;    pred:       24 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 33, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 32, next block 34, flags: (NEW)
;;    pred:       21 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 34, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 33, next block 35, flags: (NEW)
;;    pred:       18 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 35, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 34, next block 36, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 36, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 35, next block 37, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 37, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 36, next block 38, flags: (NEW)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 38, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 37, next block 1, flags: (NEW)
;;    pred:       6 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

}



;; Function std::vector<_Tp, _Alloc>::~vector() [with _Tp = std::map<int, Allocator::sRequest>; _Alloc = std::allocator<std::map<int, Allocator::sRequest> >] (_ZNSt6vectorISt3mapIiN9Allocator8sRequestESt4lessIiESaISt4pairIKiS2_EEESaIS9_EED2Ev, funcdef_no=1853, decl_uid=37890, cgraph_uid=523, symbol_order=524)


Pass statistics:
----------------

std::vector<_Tp, _Alloc>::~vector() [with _Tp = std::map<int, Allocator::sRequest>; _Alloc = std::allocator<std::map<int, Allocator::sRequest> >] (struct vectorD.37150 * const thisD.37891)
{
  struct _Rb_tree_nodeD.41466 * __xD.64517;
  struct mapD.37148 * __firstD.57937;
  struct mapD.37148 * _4;
  struct _Rep_typeD.41460 * _8;
  struct mapD.37148 * pretmp_14;
  struct mapD.37148 * prephitmp_15;
  struct _Rb_tree_node_baseD.24800 * _25;

;;   basic block 2, loop depth 0, count 0, freq 89, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#554ptD.0 => &this_1(D)->D.37893
  # DEBUG thisD.57951 => D#554ptD.0
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _4 = this_1(D)->D.37893._M_implD.37384._M_finishD.37387;
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __first_5 = this_1(D)->D.37893._M_implD.37384._M_startD.37386;
  # DEBUG __firstD.57937 => __first_5
  # DEBUG __lastD.57938 => _4
  # DEBUG __firstD.57944 => __first_5
  if (_4 == __first_5)
    goto <bb 11>;
  else
    goto <bb 3>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 81, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_29 = PHI <__first_5(3), __first_10(6)>
  # .MEM_34 = PHI <.MEM_2(D)(3), .MEM_18(6)>
  # DEBUG __firstD.57944 => __first_29
  # DEBUG __rD.57841 => __first_29
  # DEBUG __pointerD.57945 => NULL
  # DEBUG thisD.57946 => NULL
  # PT = nonlocal escaped 
  _8 = &__first_29->_M_tD.41463;
  # DEBUG thisD.57947 => _8
  # VUSE <.MEM_34>
  # PT = nonlocal escaped 
  __x_9 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__first_29 + 16B];
  # DEBUG D#91ptD.0 => _8
  # DEBUG thisD.57821 => D#91ptD.0
  # DEBUG thisD.64516 => _8
  # DEBUG __xD.64517 => __x_9
  # DEBUG __xD.64517 => __x_9
  if (__x_9 == 0B)
    goto <bb 5>;
  else
    goto <bb 7>;
;;    succ:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_16 = PHI <.MEM_34(4), .MEM_28(8)>
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_8]._M_implD.41540
  # DEBUG thisD.57948 => D#549ptD.0
  # DEBUG thisD.57949 => D#549ptD.0
  # DEBUG thisD.57950 => D#549ptD.0
  # .MEM_18 = VDEF <.MEM_16>
  MEM[(struct  &)__first_29] ={v} {CLOBBER};
  # PT = nonlocal escaped 
  __first_10 = __first_29 + 48;
  # DEBUG __firstD.57944 => __first_10
  # DEBUG __firstD.57944 => __first_10
  if (_4 == __first_10)
    goto <bb 10>;
  else
    goto <bb 6>;
;;    succ:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       4 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_36 = PHI <__x_9(7), __x_26(9)>
  # .MEM_37 = PHI <.MEM_34(7), .MEM_28(9)>
  # DEBUG __xD.64517 => __x_36
  # VUSE <.MEM_37>
  # PT = nonlocal escaped 
  _25 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_36 + 24B];
  # DEBUG D#107ptD.0 => __x_36
  # DEBUG __xD.57814 => D#107ptD.0
  # .MEM_13 = VDEF <.MEM_37>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (_8, _25);
  # VUSE <.MEM_13>
  # PT = nonlocal escaped 
  __x_26 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_36 + 16B];
  # DEBUG D#108ptD.0 => __x_36
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.64518 => NULL
  # DEBUG D#548ptD.0 => _8
  # DEBUG __pD.64520 => __x_36
  # DEBUG thisD.64519 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_36
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.64522 => D#546ptD.0
  # DEBUG __pD.64521 => __x_36
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.64525 => __x_36
  # DEBUG __aD.64523 => D#406ptD.0
  # DEBUG __nD.64524 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.64528 => __x_36
  # DEBUG thisD.64526 => D#402ptD.0
  # DEBUG D.64527 => D#403ptD.0
  # .MEM_28 = VDEF <.MEM_13>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_36);
  # DEBUG __xD.64517 => __x_26
  # DEBUG __xD.64517 => __x_26
  if (__x_26 == 0B)
    goto <bb 5>;
  else
    goto <bb 9>;
;;    succ:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 2, count 0, freq 8281, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 81, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_18>
  pretmp_14 = MEM[(struct _Vector_baseD.37151 *)this_1(D)]._M_implD.37384._M_startD.37386;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 89, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_35 = PHI <.MEM_18(10), .MEM_2(D)(2)>
  # PT = nonlocal escaped 
  # prephitmp_15 = PHI <pretmp_14(10), __first_5(2)>
  # DEBUG D#555ptD.0 => &this_1(D)->D.37893
  # DEBUG thisD.57923 => D#555ptD.0
  # DEBUG D#326ptD.0 => D#555ptD.0->_M_implD.37384._M_end_of_storageD.37388
  # DEBUG D#325ptD.0 => (long intD.12) D#326ptD.0
  # DEBUG D#909ptD.0 => MEM[(struct _Vector_baseD.37151 *)this_1(D)]._M_implD.37384._M_startD.37386
  # DEBUG D#324ptD.0 => (long intD.12) D#909ptD.0
  # DEBUG D#323ptD.0 => D#325ptD.0 - D#324ptD.0
  # DEBUG D#322ptD.0 => D#323ptD.0 /[ex] 48
  # DEBUG D#319ptD.0 => D#555ptD.0
  # DEBUG D#320ptD.0 => (long unsigned intD.14) D#322ptD.0
  # DEBUG __pD.57926 => D#909ptD.0
  # DEBUG thisD.57924 => D#319ptD.0
  # DEBUG __nD.57925 => D#320ptD.0
  # DEBUG D#318ptD.0 => D#320ptD.0
  # DEBUG D#317ptD.0 => D#319ptD.0
  if (prephitmp_15 != 0B)
    goto <bb 12>;
  else
    goto <bb 13>;
;;    succ:       12 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 70, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#316ptD.0 => &D#317ptD.0->_M_implD.37384
  # DEBUG D#314ptD.0 => D#316ptD.0
  # DEBUG D#315ptD.0 => D#318ptD.0
  # DEBUG __pD.57930 => D#909ptD.0
  # DEBUG __aD.57928 => D#314ptD.0
  # DEBUG __nD.57929 => D#315ptD.0
  # DEBUG D#313ptD.0 => D#315ptD.0
  # DEBUG D#312ptD.0 => D#314ptD.0
  # DEBUG D#310ptD.0 => D#312ptD.0
  # DEBUG D#311ptD.0 => D#313ptD.0
  # DEBUG __pD.57933 => D#909ptD.0
  # DEBUG thisD.57931 => D#310ptD.0
  # DEBUG D.57932 => D#311ptD.0
  # .MEM_19 = VDEF <.MEM_35>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (prephitmp_15);
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 89, maybe hot
;;    prev block 12, next block 1, flags: (NEW, REACHABLE)
;;    pred:       11 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_12 = PHI <.MEM_35(11), .MEM_19(12)>
  # DEBUG D#321ptD.0 => &D#555ptD.0->_M_implD.37384
  # DEBUG thisD.57934 => D#321ptD.0
  # DEBUG thisD.57935 => D#321ptD.0
  # DEBUG thisD.57936 => D#321ptD.0
  # .MEM_7 = VDEF <.MEM_12>
  MEM[(struct  &)this_1(D)] ={v} {CLOBBER};
  # VUSE <.MEM_7>
  return;
;;    succ:       EXIT [100.0%] 

}



Updating SSA:
Registering new PHI nodes in block #8
Updating SSA information for statement operator delete (__x_36);
Registering new PHI nodes in block #9
Registering new PHI nodes in block #15

DFA Statistics for std::vector<_Tp, _Alloc>::~vector() [with _Tp = std::map<int, Allocator::sRequest>; _Alloc = std::allocator<std::map<int, Allocator::sRequest> >]

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             48        384b
DEF operands                              8         64b
VUSE operands                            12         96b
VDEF operands                             5         40b
PHI nodes                                 9        936b
PHI arguments                            17        816b
---------------------------------------------------------
Total memory used by DFA/SSA data                 2336b
---------------------------------------------------------

Average number of arguments per PHI node: 1.9 (max: 2)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_20 -> { .MEM_28 }
Incremental SSA update started at block: 8
Number of blocks in CFG: 16
Number of blocks to update: 3 ( 19%)
Affected blocks: 8 9 15


Creating dr for this_1(D)->D.37893._M_impl._M_finish
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *this_1(D)
	Access function 0: 64
	Access function 1: 0
	Access function 2: 0
Creating dr for this_1(D)->D.37893._M_impl._M_start
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *this_1(D)
	Access function 0: 0
	Access function 1: 0
	Access function 2: 0
Creating dr for MEM[(struct _Rb_tree_node_base * *)__first_29 + 16B]
analyze_innermost: success.
	base_address: __first_5
	offset from base address: 0
	constant offset from base address: 16
	step: 48
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)__first_5]
	Access function 0: {16B, +, 48}_1
Creating dr for MEM[(struct _Rb_tree_node_base * *)__first_29 + 16B]
analyze_innermost: success.
	base_address: __first_5
	offset from base address: 0
	constant offset from base address: 16
	step: 48
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)__first_5]
	Access function 0: {16B, +, 48}_1
Creating dr for MEM[(struct _Rb_tree_node_base * *)__first_29 + 16B]
analyze_innermost: success.
	base_address: __first_5
	offset from base address: 0
	constant offset from base address: 16
	step: 48
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)__first_5]
	Access function 0: {16B, +, 48}_1
Creating dr for MEM[(struct _Rb_tree_node_base * *)__first_29 + 16B]
analyze_innermost: success.
	base_address: __first_5
	offset from base address: 0
	constant offset from base address: 16
	step: 48
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)__first_5]
	Access function 0: {16B, +, 48}_1
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
Analyzing # of iterations of loop 1
  exit condition [__first_5 + 48, + , 48](no_overflow) != _4
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551567
  result:
    under assumptions ((unsigned long) _4 - (unsigned long) (__first_5 + 48) & 15) == 0
    # of iterations (((unsigned long) _4 - (unsigned long) (__first_5 + 48)) /[ex] 16) * 768614336404564651 & 1152921504606846975, bounded by 384307168202282325
Creating dr for MEM[(struct _Rb_tree_node_base * *)__first_29 + 16B]
analyze_innermost: success.
	base_address: __first_5
	offset from base address: 0
	constant offset from base address: 16
	step: 48
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)__first_5]
	Access function 0: {16B, +, 48}_1
Creating dr for MEM[(struct _Rb_tree_node_base * *)__first_29 + 16B]
analyze_innermost: success.
	base_address: __first_5
	offset from base address: 0
	constant offset from base address: 16
	step: 48
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)__first_5]
	Access function 0: {16B, +, 48}_1
Creating dr for MEM[(struct _Rb_tree_node_base * *)__first_29 + 16B]
analyze_innermost: success.
	base_address: __first_5
	offset from base address: 0
	constant offset from base address: 16
	step: 48
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)__first_5]
	Access function 0: {16B, +, 48}_1
Creating dr for MEM[(struct _Rb_tree_node_base * *)__first_29 + 16B]
analyze_innermost: success.
	base_address: __first_5
	offset from base address: 0
	constant offset from base address: 16
	step: 48
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)__first_5]
	Access function 0: {16B, +, 48}_1
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B]
Analyzing # of iterations of loop 1
  exit condition [__first_5 + 48, + , 48](no_overflow) != _4
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551567
  result:
    under assumptions ((unsigned long) _4 - (unsigned long) (__first_5 + 48) & 15) == 0
    # of iterations (((unsigned long) _4 - (unsigned long) (__first_5 + 48)) /[ex] 16) * 768614336404564651 & 1152921504606846975, bounded by 384307168202282325
Creating dr for MEM[(struct _Vector_base *)this_1(D)]._M_impl._M_start
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Vector_base *)this_1(D)]
	Access function 0: 0
	Access function 1: 0

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:16, LOOPS:2, CONDITIONS:5, STMTS:122)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_11 bb_3 })
  {
    <bb 2>:
    # DEBUG D#554 => &this_1(D)->D.37893
    # DEBUG this => D#554
    # VUSE <.MEM_2(D)>
    _4 = this_1(D)->D.37893._M_impl._M_finish;
    # VUSE <.MEM_2(D)>
    __first_5 = this_1(D)->D.37893._M_impl._M_start;
    # DEBUG __first => __first_5
    # DEBUG __last => _4
    # DEBUG __first => __first_5
    if (_4 == __first_5)
      goto <bb 11>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 })
  {
    <bb 3>:

  }
  bb_10 (preds = {bb_5 }, succs = {bb_14 })
  {
    <bb 10>:

  }
  bb_14 (preds = {bb_10 }, succs = {bb_11 })
  {
    <bb 14>:
    # VUSE <.MEM_18>
    pretmp_14 = MEM[(struct _Vector_base *)this_1(D)]._M_impl._M_start;

  }
  bb_11 (preds = {bb_14 bb_2 }, succs = {bb_12 bb_13 })
  {
    <bb 11>:
    # .MEM_35 = PHI <.MEM_18(14), .MEM_2(D)(2)>
    # prephitmp_15 = PHI <pretmp_14(14), __first_5(2)>
    # DEBUG D#555 => &this_1(D)->D.37893
    # DEBUG this => D#555
    # DEBUG D#326 => D#555->_M_impl._M_end_of_storage
    # DEBUG D#325 => (long int) D#326
    # DEBUG D#909 => MEM[(struct _Vector_base *)this_1(D)]._M_impl._M_start
    # DEBUG D#324 => (long int) D#909
    # DEBUG D#323 => D#325 - D#324
    # DEBUG D#322 => D#323 /[ex] 48
    # DEBUG D#319 => D#555
    # DEBUG D#320 => (long unsigned int) D#322
    # DEBUG __p => D#909
    # DEBUG this => D#319
    # DEBUG __n => D#320
    # DEBUG D#318 => D#320
    # DEBUG D#317 => D#319
    if (prephitmp_15 != 0B)
      goto <bb 12>;
    else
      goto <bb 13>;

  }
  bb_12 (preds = {bb_11 }, succs = {bb_13 })
  {
    <bb 12>:
    # DEBUG D#316 => &D#317->_M_impl
    # DEBUG D#314 => D#316
    # DEBUG D#315 => D#318
    # DEBUG __p => D#909
    # DEBUG __a => D#314
    # DEBUG __n => D#315
    # DEBUG D#313 => D#315
    # DEBUG D#312 => D#314
    # DEBUG D#310 => D#312
    # DEBUG D#311 => D#313
    # DEBUG __p => D#909
    # DEBUG this => D#310
    # DEBUG D.57932 => D#311
    # .MEM_19 = VDEF <.MEM_35>
    operator delete (prephitmp_15);

  }
  bb_13 (preds = {bb_11 bb_12 }, succs = {bb_1 })
  {
    <bb 13>:
    # .MEM_12 = PHI <.MEM_35(11), .MEM_19(12)>
    # DEBUG D#321 => &D#555->_M_impl
    # DEBUG this => D#321
    # DEBUG this => D#321
    # DEBUG this => D#321
    # .MEM_7 = VDEF <.MEM_12>
    MEM[(struct  &)this_1(D)] ={v} {CLOBBER};
    # VUSE <.MEM_7>
    return;

  }
  loop_1 (header = 4, latch = 6, niter = )
  {
    bb_4 (preds = {bb_3 bb_6 }, succs = {bb_5 bb_7 })
    {
      <bb 4>:
      # __first_29 = PHI <__first_5(3), __first_10(6)>
      # .MEM_34 = PHI <.MEM_2(D)(3), .MEM_18(6)>
      # DEBUG __first => __first_29
      # DEBUG __r => __first_29
      # DEBUG __pointer => NULL
      # DEBUG this => NULL
      _8 = &__first_29->_M_t;
      # DEBUG this => _8
      # VUSE <.MEM_34>
      __x_9 = MEM[(struct _Rb_tree_node_base * *)__first_29 + 16B];
      # DEBUG D#91 => _8
      # DEBUG this => D#91
      # DEBUG this => _8
      # DEBUG __x => __x_9
      # DEBUG __x => __x_9
      if (__x_9 == 0B)
        goto <bb 5>;
      else
        goto <bb 7>;

    }
    bb_5 (preds = {bb_4 bb_15 }, succs = {bb_10 bb_6 })
    {
      <bb 5>:
      # .MEM_16 = PHI <.MEM_34(4), .MEM_20(15)>
      # DEBUG D#549 => &MEM[(struct _Rb_tree *)_8]._M_impl
      # DEBUG this => D#549
      # DEBUG this => D#549
      # DEBUG this => D#549
      # .MEM_18 = VDEF <.MEM_16>
      MEM[(struct  &)__first_29] ={v} {CLOBBER};
      __first_10 = __first_29 + 48;
      # DEBUG __first => __first_10
      # DEBUG __first => __first_10
      if (_4 == __first_10)
        goto <bb 10>;
      else
        goto <bb 6>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_4 })
    {
      <bb 6>:
      goto <bb 4>;

    }
    bb_7 (preds = {bb_4 }, succs = {bb_8 })
    {
      <bb 7>:

    }
    bb_15 (preds = {bb_8 }, succs = {bb_5 })
    {
      <bb 15>:
      # .MEM_20 = PHI <.MEM_28(8)>
      goto <bb 5>;

    }
    loop_2 (header = 8, latch = 9, niter = )
    {
      bb_8 (preds = {bb_7 bb_9 }, succs = {bb_15 bb_9 })
      {
        <bb 8>:
        # __x_36 = PHI <__x_9(7), __x_26(9)>
        # .MEM_37 = PHI <.MEM_34(7), .MEM_28(9)>
        # DEBUG __x => __x_36
        # VUSE <.MEM_37>
        _25 = MEM[(struct _Rb_tree_node_base * *)__x_36 + 24B];
        # DEBUG D#107 => __x_36
        # DEBUG __x => D#107
        # .MEM_13 = VDEF <.MEM_37>
        std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_M_erase (_8, _25);
        # VUSE <.MEM_13>
        __x_26 = MEM[(struct _Rb_tree_node_base * *)__x_36 + 16B];
        # DEBUG D#108 => __x_36
        # DEBUG __x => D#108
        # DEBUG __y => NULL
        # DEBUG D#548 => _8
        # DEBUG __p => __x_36
        # DEBUG this => D#548
        # DEBUG D#547 => D#548
        # DEBUG D#546 => D#548
        # DEBUG D#545 => D#548
        # DEBUG D#543 => D#545
        # DEBUG D#544 => __x_36
        # DEBUG this => D#543
        # DEBUG __p => D#544
        # DEBUG D#542 => D#543
        # DEBUG D#541 => D#544
        # DEBUG D#540 => D#544
        # DEBUG this => D#540
        # DEBUG D#539 => &D#541->_M_value_field
        # DEBUG __r => D#539
        # DEBUG D#538 => D#542
        # DEBUG this => D#538
        # DEBUG D#537 => D#538
        # DEBUG this => D#537
        # DEBUG this => NULL
        # DEBUG D.57746 => NULL
        # DEBUG this => NULL
        # DEBUG D#330 => D#539
        # DEBUG this => D#329
        # DEBUG __p => D#330
        # DEBUG this => NULL
        # DEBUG this => NULL
        # DEBUG this => D#546
        # DEBUG __p => __x_36
        # DEBUG this => D#547
        # DEBUG D#407 => 1
        # DEBUG __p => __x_36
        # DEBUG __a => D#406
        # DEBUG __n => D#407
        # DEBUG D#405 => D#407
        # DEBUG D#404 => D#406
        # DEBUG D#402 => D#404
        # DEBUG D#403 => D#405
        # DEBUG __p => __x_36
        # DEBUG this => D#402
        # DEBUG D.64527 => D#403
        # .MEM_28 = VDEF <.MEM_13>
        operator delete (__x_36);
        # DEBUG __x => __x_26
        # DEBUG __x => __x_26
        if (__x_26 == 0B)
          goto <bb 15>;
        else
          goto <bb 9>;

      }
      bb_9 (preds = {bb_8 }, succs = {bb_8 })
      {
        <bb 9>:
        goto <bb 8>;

      }
    }
  }
}

Pass statistics:
----------------

std::vector<_Tp, _Alloc>::~vector() [with _Tp = std::map<int, Allocator::sRequest>; _Alloc = std::allocator<std::map<int, Allocator::sRequest> >] (struct vectorD.37150 * const thisD.37891)
{
  struct _Rb_tree_nodeD.41466 * __xD.64517;
  struct mapD.37148 * __firstD.57937;
  struct mapD.37148 * _4;
  struct _Rep_typeD.41460 * _8;
  struct mapD.37148 * pretmp_14;
  struct mapD.37148 * prephitmp_15;
  struct _Rb_tree_node_baseD.24800 * _25;

;;   basic block 2, loop depth 0, count 0, freq 89, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#554ptD.0 => &this_1(D)->D.37893
  # DEBUG thisD.57951 => D#554ptD.0
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _4 = this_1(D)->D.37893._M_implD.37384._M_finishD.37387;
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  __first_5 = this_1(D)->D.37893._M_implD.37384._M_startD.37386;
  # DEBUG __firstD.57937 => __first_5
  # DEBUG __lastD.57938 => _4
  # DEBUG __firstD.57944 => __first_5
  if (_4 == __first_5)
    goto <bb 11>;
  else
    goto <bb 3>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 81, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_29 = PHI <__first_5(3), __first_10(6)>
  # .MEM_34 = PHI <.MEM_2(D)(3), .MEM_18(6)>
  # DEBUG __firstD.57944 => __first_29
  # DEBUG __rD.57841 => __first_29
  # DEBUG __pointerD.57945 => NULL
  # DEBUG thisD.57946 => NULL
  # PT = nonlocal escaped 
  _8 = &__first_29->_M_tD.41463;
  # DEBUG thisD.57947 => _8
  # VUSE <.MEM_34>
  # PT = nonlocal escaped 
  __x_9 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__first_29 + 16B];
  # DEBUG D#91ptD.0 => _8
  # DEBUG thisD.57821 => D#91ptD.0
  # DEBUG thisD.64516 => _8
  # DEBUG __xD.64517 => __x_9
  # DEBUG __xD.64517 => __x_9
  if (__x_9 == 0B)
    goto <bb 5>;
  else
    goto <bb 7>;
;;    succ:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU)
  # .MEM_16 = PHI <.MEM_34(4), .MEM_20(15)>
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_8]._M_implD.41540
  # DEBUG thisD.57948 => D#549ptD.0
  # DEBUG thisD.57949 => D#549ptD.0
  # DEBUG thisD.57950 => D#549ptD.0
  # .MEM_18 = VDEF <.MEM_16>
  MEM[(struct  &)__first_29] ={v} {CLOBBER};
  # PT = nonlocal escaped 
  __first_10 = __first_29 + 48;
  # DEBUG __firstD.57944 => __first_10
  # DEBUG __firstD.57944 => __first_10
  if (_4 == __first_10)
    goto <bb 10>;
  else
    goto <bb 6>;
;;    succ:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       4 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 7, next block 15, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_36 = PHI <__x_9(7), __x_26(9)>
  # .MEM_37 = PHI <.MEM_34(7), .MEM_28(9)>
  # DEBUG __xD.64517 => __x_36
  # VUSE <.MEM_37>
  # PT = nonlocal escaped 
  _25 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_36 + 24B];
  # DEBUG D#107ptD.0 => __x_36
  # DEBUG __xD.57814 => D#107ptD.0
  # .MEM_13 = VDEF <.MEM_37>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (_8, _25);
  # VUSE <.MEM_13>
  # PT = nonlocal escaped 
  __x_26 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_36 + 16B];
  # DEBUG D#108ptD.0 => __x_36
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.64518 => NULL
  # DEBUG D#548ptD.0 => _8
  # DEBUG __pD.64520 => __x_36
  # DEBUG thisD.64519 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_36
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.64522 => D#546ptD.0
  # DEBUG __pD.64521 => __x_36
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.64525 => __x_36
  # DEBUG __aD.64523 => D#406ptD.0
  # DEBUG __nD.64524 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.64528 => __x_36
  # DEBUG thisD.64526 => D#402ptD.0
  # DEBUG D.64527 => D#403ptD.0
  # .MEM_28 = VDEF <.MEM_13>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_36);
  # DEBUG __xD.64517 => __x_26
  # DEBUG __xD.64517 => __x_26
  if (__x_26 == 0B)
    goto <bb 15>;
  else
    goto <bb 9>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 8, next block 9, flags: (NEW)
;;    pred:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_20 = PHI <.MEM_28(8)>
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU)

;;   basic block 9, loop depth 2, count 0, freq 8281, maybe hot
;;    prev block 15, next block 10, flags: (NEW)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 81, maybe hot
;;    prev block 9, next block 14, flags: (NEW)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       14 [100.0%]  (FALLTHRU)

;;   basic block 14, loop depth 0, count 0, freq 81, maybe hot
;;    prev block 10, next block 11, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_18>
  pretmp_14 = MEM[(struct _Vector_baseD.37151 *)this_1(D)]._M_implD.37384._M_startD.37386;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 89, maybe hot
;;    prev block 14, next block 12, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_35 = PHI <.MEM_18(14), .MEM_2(D)(2)>
  # PT = nonlocal escaped 
  # prephitmp_15 = PHI <pretmp_14(14), __first_5(2)>
  # DEBUG D#555ptD.0 => &this_1(D)->D.37893
  # DEBUG thisD.57923 => D#555ptD.0
  # DEBUG D#326ptD.0 => D#555ptD.0->_M_implD.37384._M_end_of_storageD.37388
  # DEBUG D#325ptD.0 => (long intD.12) D#326ptD.0
  # DEBUG D#909ptD.0 => MEM[(struct _Vector_baseD.37151 *)this_1(D)]._M_implD.37384._M_startD.37386
  # DEBUG D#324ptD.0 => (long intD.12) D#909ptD.0
  # DEBUG D#323ptD.0 => D#325ptD.0 - D#324ptD.0
  # DEBUG D#322ptD.0 => D#323ptD.0 /[ex] 48
  # DEBUG D#319ptD.0 => D#555ptD.0
  # DEBUG D#320ptD.0 => (long unsigned intD.14) D#322ptD.0
  # DEBUG __pD.57926 => D#909ptD.0
  # DEBUG thisD.57924 => D#319ptD.0
  # DEBUG __nD.57925 => D#320ptD.0
  # DEBUG D#318ptD.0 => D#320ptD.0
  # DEBUG D#317ptD.0 => D#319ptD.0
  if (prephitmp_15 != 0B)
    goto <bb 12>;
  else
    goto <bb 13>;
;;    succ:       12 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 70, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#316ptD.0 => &D#317ptD.0->_M_implD.37384
  # DEBUG D#314ptD.0 => D#316ptD.0
  # DEBUG D#315ptD.0 => D#318ptD.0
  # DEBUG __pD.57930 => D#909ptD.0
  # DEBUG __aD.57928 => D#314ptD.0
  # DEBUG __nD.57929 => D#315ptD.0
  # DEBUG D#313ptD.0 => D#315ptD.0
  # DEBUG D#312ptD.0 => D#314ptD.0
  # DEBUG D#310ptD.0 => D#312ptD.0
  # DEBUG D#311ptD.0 => D#313ptD.0
  # DEBUG __pD.57933 => D#909ptD.0
  # DEBUG thisD.57931 => D#310ptD.0
  # DEBUG D.57932 => D#311ptD.0
  # .MEM_19 = VDEF <.MEM_35>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (prephitmp_15);
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 89, maybe hot
;;    prev block 12, next block 1, flags: (NEW, REACHABLE)
;;    pred:       11 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_12 = PHI <.MEM_35(11), .MEM_19(12)>
  # DEBUG D#321ptD.0 => &D#555ptD.0->_M_implD.37384
  # DEBUG thisD.57934 => D#321ptD.0
  # DEBUG thisD.57935 => D#321ptD.0
  # DEBUG thisD.57936 => D#321ptD.0
  # .MEM_7 = VDEF <.MEM_12>
  MEM[(struct  &)this_1(D)] ={v} {CLOBBER};
  # VUSE <.MEM_7>
  return;
;;    succ:       EXIT [100.0%] 

}



;; Function std::pair<std::_Rb_tree_iterator<_Val>, bool> std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_insert_unique(const _Val&) [with _Key = int; _Val = int; _KeyOfValue = std::_Identity<int>; _Compare = std::less<int>; _Alloc = std::allocator<int>] (_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueERKi, funcdef_no=2043, decl_uid=36754, cgraph_uid=713, symbol_order=714)


Pass statistics:
----------------

std::pair<std::_Rb_tree_iterator<_Val>, bool> std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_insert_unique(const _Val&) [with _Key = int; _Val = int; _KeyOfValue = std::_Identity<int>; _Compare = std::less<int>; _Alloc = std::allocator<int>] (struct _Rb_treeD.36317 * const thisD.36755, const intD.9 & __vD.36756)
{
  struct _Rb_tree_node_baseD.24800 * SR.1396D.64598;
  struct _Rb_tree_node_baseD.24800 * SR.1395D.64597;
  struct _Rb_tree_node_baseD.24800 * __res$8D.64596;
  struct _Rb_tree_node_baseD.24800 * __resD.64595;
  boolD.2757 __insert_leftD.64571;
  struct iteratorD.36632 D.64592;
  struct pairD.25253 D.64565;
  boolD.2757 __compD.64544;
  struct _Rb_tree_node_baseD.24800 * const __j$_M_nodeD.64562;
  struct _Rb_tree_node_baseD.24800 * SR.1066D.59747;
  struct _Rb_tree_node_baseD.24800 * __res$secondD.59745;
  struct _Rb_tree_node_baseD.24800 * __res$firstD.59744;
  struct pairD.25253 __resD.44604;
  struct iteratorD.36632 D.44674;
  struct pairD.36753 D.50241;
  const intD.9 pretmp_15;
  struct _Rb_tree_node_baseD.24800 * _18;
  intD.9 prephitmp_20;
  const intD.9 _22;
  struct _Rb_tree_node_baseD.24800 * _24;
  struct _Rb_tree_node_baseD.24800 * _25;
  const intD.9 pretmp_26;
  struct _Rb_tree_node_baseD.24800 * _27;
  struct _Rb_tree_node_baseD.24800 * const _33;
  const intD.9 _36;
  const intD.9 _37;
  struct _Rb_tree_nodeD.36321 * _38;
  intD.9 _40;
  long unsigned intD.14 _44;
  long unsigned intD.14 _45;
  const intD.9 prephitmp_47;
  const intD.9 _48;
  const intD.9 prephitmp_49;
  const intD.9 pretmp_51;
  intD.9 pretmp_72;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#127ptD.0 => &D.44617
  # DEBUG __xD.59731 => __v_3(D)
  # DEBUG thisD.59732 => D#127ptD.0
  # DEBUG thisD.64539 => this_4(D)
  # DEBUG __kD.64540 => __v_3(D)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _18 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_4(D) + 16B];
  # DEBUG D#90ptD.0 => this_4(D)
  # DEBUG thisD.55635 => D#90ptD.0
  # DEBUG __xD.64542 => NULL
  # DEBUG thisD.64561 => this_4(D)
  # PT = nonlocal 
  __j$_M_node_19 = &this_4(D)->_M_implD.36395._M_headerD.36561;
  # DEBUG __yD.64543 => NULL
  # DEBUG __compD.64544 => 1
  # DEBUG __compD.64544 => 1
  # DEBUG __yD.64543 => __j$_M_node_19
  # DEBUG __xD.64542 => _18
  if (_18 == 0B)
    goto <bb 10>;
  else
    goto <bb 3>;
;;    succ:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  pretmp_51 = *__v_3(D);
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # _33 = PHI <_24(7), _25(8)>
  # DEBUG __compD.64544 => D#912ptD.0 < _22
  # DEBUG __yD.64543 => __j$_M_node_59
  # DEBUG __xD.64542 => _33
  if (_33 == 0B)
    goto <bb 9>;
  else
    goto <bb 5>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_59 = PHI <_18(3), _33(5)>
  # DEBUG __compD.64544 => 1
  # DEBUG __xD.64542 => __j$_M_node_59
  # DEBUG __yD.64543 => __j$_M_node_59
  # DEBUG __xD.55643 => __j$_M_node_59
  # DEBUG __xD.55644 => __j$_M_node_59
  # DEBUG thisD.55645 => __j$_M_node_59
  # DEBUG D#442ptD.0 => &MEM[(const struct _Rb_tree_nodeD.36321 *)__j$_M_node_59]._M_value_fieldD.44464
  # DEBUG __rD.55383 => D#442ptD.0
  # DEBUG __xD.55389 => D#442ptD.0
  # DEBUG thisD.55390 => D#127ptD.0
  # DEBUG D#446ptD.0 => &this_4(D)->_M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#446ptD.0
  # DEBUG D#912ptD.0 => *__v_3(D)
  # DEBUG D#96ptD.0 => __v_3(D)
  # VUSE <.MEM_2(D)>
  _22 = MEM[(const intD.9 &)__j$_M_node_59 + 32];
  # DEBUG D#97ptD.0 => D#442ptD.0
  # DEBUG thisD.64558 => D#95ptD.0
  # DEBUG __xD.64559 => D#96ptD.0
  # DEBUG __yD.64560 => D#97ptD.0
  # DEBUG __compD.64544 => NULL
  if (_22 > pretmp_51)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _24 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__j$_M_node_59 + 16B];
  # DEBUG D#106ptD.0 => __j$_M_node_59
  # DEBUG __xD.55648 => D#106ptD.0
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _25 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__j$_M_node_59 + 24B];
  # DEBUG D#105ptD.0 => __j$_M_node_59
  # DEBUG __xD.55651 => D#105ptD.0
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       4 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # _48 = PHI <_22(4)>
  # PT = nonlocal escaped 
  # __j$_M_node_23 = PHI <__j$_M_node_59(4)>
  # DEBUG thisD.64557 => &__jD.64545
  # DEBUG __xD.64556 => __j$_M_node_23
  # DEBUG __j$_M_nodeD.64562 => __j$_M_node_23
  if (_48 > pretmp_51)
    goto <bb 10>;
  else
    goto <bb 12>;
;;    succ:       10 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [55.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_73 = PHI <__j$_M_node_23(9), __j$_M_node_19(2)>
  # DEBUG thisD.64557 => &__jD.64545
  # DEBUG __xD.64556 => __j$_M_node_73
  # DEBUG __j$_M_nodeD.64562 => __j$_M_node_73
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _27 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_4(D) + 24B];
  # DEBUG D#175ptD.0 => this_4(D)
  # DEBUG thisD.55659 => D#175ptD.0
  # DEBUG thisD.53227 => NULL
  # DEBUG __xD.53226 => _27
  # DEBUG thisD.55655 => &__jD.64545
  # DEBUG __xD.55656 => NULL
  if (_27 == __j$_M_node_73)
    goto <bb 13>;
  else
    goto <bb 11>;
;;    succ:       13 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 404, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.64552 => &__jD.64545
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  __j$_M_node_29 = _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_baseD.24849 (__j$_M_node_73);
  # DEBUG __j$_M_nodeD.64562 => __j$_M_node_29
  # VUSE <.MEM_2(D)>
  pretmp_15 = *__v_3(D);
  # VUSE <.MEM_2(D)>
  pretmp_26 = MEM[(const intD.9 &)__j$_M_node_29 + 32];
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 854, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       9 [55.0%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_30 = PHI <__j$_M_node_23(9), __j$_M_node_29(11)>
  # PT = nonlocal escaped 
  # __j$_M_node_63 = PHI <__j$_M_node_23(9), __j$_M_node_73(11)>
  # prephitmp_47 = PHI <pretmp_51(9), pretmp_15(11)>
  # prephitmp_49 = PHI <_48(9), pretmp_26(11)>
  # DEBUG __j$_M_nodeD.64562 => __j$_M_node_30
  # DEBUG __xD.55673 => __j$_M_node_30
  # DEBUG __xD.55674 => __j$_M_node_30
  # DEBUG thisD.55675 => __j$_M_node_30
  # DEBUG D#443ptD.0 => &MEM[(const struct _Rb_tree_nodeD.36321 *)__j$_M_node_30]._M_value_fieldD.44464
  # DEBUG __rD.55383 => D#443ptD.0
  # DEBUG __xD.55625 => D#443ptD.0
  # DEBUG thisD.55626 => D#127ptD.0
  # DEBUG D#445ptD.0 => &this_4(D)->_M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#445ptD.0
  # DEBUG D#96ptD.0 => D#443ptD.0
  # DEBUG D#97ptD.0 => __v_3(D)
  # DEBUG thisD.55671 => D#95ptD.0
  # DEBUG __xD.55670 => D#96ptD.0
  # DEBUG __yD.55669 => D#97ptD.0
  if (prephitmp_47 > prephitmp_49)
    goto <bb 13>;
  else
    goto <bb 17>;
;;    succ:       13 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 379, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       10 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __res$second_52 = PHI <_27(10), __j$_M_node_63(12)>
  # DEBUG D#444ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.64562 => D#444ptD.0
  # DEBUG __resD.64595 => 0B
  # DEBUG __res$8D.64596 => __res$second_52
  # DEBUG __res$firstD.59744 => 0B
  # DEBUG __res$secondD.59745 => __res$second_52
  if (__res$second_52 != 0B)
    goto <bb 14>;
  else
    goto <bb 17>;
;;    succ:       14 [100.0%]  (TRUE_VALUE,EXECUTABLE)
;;                17 (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 81, maybe hot
;;   Invalid sum of incoming frequencies 379, should be 81
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [100.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.59734 => &__anD.44637
  # DEBUG __tD.59735 => this_4(D)
  # DEBUG __an$_M_tD.59746 => this_4(D)
  # DEBUG D#650ptD.0 => &__anD.44637
  # DEBUG thisD.64566 => this_4(D)
  # DEBUG __xD.64567 => 0B
  # DEBUG __pD.64568 => __res$second_52
  # DEBUG __vD.64569 => __v_3(D)
  # DEBUG __node_genD.64570 => D#650ptD.0
  # DEBUG D#649ptD.0 => D#650ptD.0
  # DEBUG thisD.64591 => this_4(D)
  if (__j$_M_node_19 == __res$second_52)
    goto <bb 16>;
  else
    goto <bb 15>;
;;    succ:       16 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 68, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [85.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.59713 => __res$second_52
  # DEBUG __xD.59714 => __res$second_52
  # DEBUG thisD.59715 => __res$second_52
  # DEBUG D#647ptD.0 => &MEM[(const struct _Rb_tree_nodeD.36321 *)__res$second_52]._M_value_fieldD.44464
  # DEBUG __rD.55383 => D#647ptD.0
  # DEBUG __xD.55625 => D#647ptD.0
  # DEBUG thisD.55626 => D#127ptD.0
  # DEBUG __xD.59653 => __v_3(D)
  # DEBUG thisD.59654 => D#127ptD.0
  # DEBUG D#648ptD.0 => &this_4(D)->_M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#648ptD.0
  # VUSE <.MEM_2(D)>
  _36 = *__v_3(D);
  # VUSE <.MEM_2(D)>
  _37 = MEM[(const intD.9 &)__res$second_52 + 32];
  # DEBUG D#97ptD.0 => D#647ptD.0
  # DEBUG thisD.59716 => D#95ptD.0
  # DEBUG __xD.59717 => D#96ptD.0
  # DEBUG __yD.59718 => D#97ptD.0
  __insert_left_35 = _36 < _37;
  pretmp_72 = (intD.9) __insert_left_35;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 537, maybe hot
;;   Invalid sum of incoming frequencies 80, should be 537
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       15 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1] NONZERO 1
  # prephitmp_20 = PHI <pretmp_72(15), 1(14)>
  # DEBUG __insert_leftD.64571 => NULL
  # DEBUG D#646ptD.0 => D#649ptD.0
  # DEBUG __argD.64574 => __v_3(D)
  # DEBUG thisD.64573 => D#646ptD.0
  # DEBUG D#645ptD.0 => D#646ptD.0
  # DEBUG D#644ptD.0 => D#645ptD.0->_M_tD.44651
  # DEBUG D#643ptD.0 => D#644ptD.0
  # DEBUG __xD.64576 => __v_3(D)
  # DEBUG thisD.64575 => D#643ptD.0
  # DEBUG D#642ptD.0 => D#643ptD.0
  # DEBUG D#641ptD.0 => D#643ptD.0
  # DEBUG D#640ptD.0 => D#641ptD.0
  # DEBUG thisD.64578 => D#640ptD.0
  # DEBUG D#639ptD.0 => D#640ptD.0
  # DEBUG thisD.59556 => D#639ptD.0
  # DEBUG __nD.64580 => 1
  # DEBUG __aD.64579 => D#638ptD.0
  # DEBUG D#637ptD.0 => D#638ptD.0
  # DEBUG D#635ptD.0 => D#637ptD.0
  # DEBUG D#636ptD.0 => 0B
  # DEBUG __nD.64583 => 1
  # DEBUG thisD.64581 => D#635ptD.0
  # DEBUG D.64582 => D#636ptD.0
  # DEBUG D#634ptD.0 => D#635ptD.0
  # DEBUG D#633ptD.0 => D#634ptD.0
  # DEBUG thisD.59514 => D#633ptD.0
  # .MEM_54 = VDEF <.MEM_2(D)>
  # PT = { D.64599 } (escaped heap)
  # USE = nonlocal null { D.64599 } (escaped heap)
  # CLB = nonlocal null { D.64599 } (escaped heap)
  _38 = _ZnwmD.2764 (40);
  # DEBUG __tmpD.64577 => _38
  # DEBUG D#579ptD.0 => D#642ptD.0
  # DEBUG __nodeD.64586 => _38
  # DEBUG __xD.64585 => __v_3(D)
  # DEBUG thisD.64584 => D#579ptD.0
  # DEBUG D#578ptD.0 => D#579ptD.0
  # DEBUG thisD.64587 => _38
  # DEBUG D#911ptD.0 => &_38->_M_value_fieldD.44464
  # DEBUG __rD.54912 => D#911ptD.0
  # DEBUG D#383ptD.0 => D#578ptD.0
  # DEBUG thisD.58254 => D#383ptD.0
  # DEBUG D#382ptD.0 => D#383ptD.0
  # DEBUG thisD.54907 => D#382ptD.0
  # DEBUG thisD.54899 => NULL
  # DEBUG D.54900 => NULL
  # DEBUG thisD.54897 => NULL
  # DEBUG __pD.64590 => D#911ptD.0
  # DEBUG __valD.64589 => __v_3(D)
  # DEBUG thisD.64588 => D#577ptD.0
  # DEBUG D#24ptD.0 => 4
  # DEBUG __pD.58237 => D#911ptD.0
  # DEBUG D.58238 => D#24ptD.0
  # VUSE <.MEM_54>
  _40 = *__v_3(D);
  # .MEM_55 = VDEF <.MEM_54>
  MEM[(intD.9 *)_38 + 32B] = _40;
  # DEBUG thisD.58267 => NULL
  # DEBUG thisD.58250 => NULL
  # DEBUG __zD.64572 => _38
  # .MEM_56 = VDEF <.MEM_55>
  # USE = nonlocal null { D.64599 } (escaped heap)
  # CLB = nonlocal null { D.64599 } (escaped heap)
  _ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_D.25026 (prephitmp_20, _38, __res$second_52, __j$_M_node_19);
  # VUSE <.MEM_56>
  _44 = this_4(D)->_M_implD.36395._M_node_countD.36562;
  # RANGE [0, 18446744073709551615]
  _45 = _44 + 1;
  # .MEM_57 = VDEF <.MEM_56>
  this_4(D)->_M_implD.36395._M_node_countD.36562 = _45;
  # DEBUG thisD.59712 => NULL
  # DEBUG __xD.59711 => _38
  # DEBUG thisD.59736 => &D.44676
  # DEBUG __aD.59737 => &D.44674
  # DEBUG __bD.59738 => &D.44675
  # .MEM_13 = VDEF <.MEM_57>
  MEM[(struct pairD.36753 *)&D.50241] = _38;
  # .MEM_17 = VDEF <.MEM_13>
  MEM[(struct pairD.36753 *)&D.50241 + 8B] = 1;
  # .MEM_10 = VDEF <.MEM_17>
  D.44674 ={v} {CLOBBER};
  goto <bb 18>;
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 363, maybe hot
;;   Invalid sum of incoming frequencies 521, should be 363
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       13 (FALSE_VALUE,EXECUTABLE)
;;                12 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped null 
  # __res$first_74 = PHI <0B(13), __j$_M_node_30(12)>
  # DEBUG D#444ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.64562 => D#444ptD.0
  # DEBUG __resD.64595 => __res$first_74
  # DEBUG __res$8D.64596 => NULL
  # DEBUG __res$firstD.59744 => __res$first_74
  # DEBUG __res$secondD.59745 => NULL
  # DEBUG thisD.59742 => &D.44677
  # DEBUG __xD.59743 => __res$first_74
  # DEBUG thisD.59739 => &D.44679
  # DEBUG __aD.59740 => &D.44677
  # DEBUG __bD.59741 => &D.44678
  # .MEM_6 = VDEF <.MEM_2(D)>
  MEM[(struct pairD.36753 *)&D.50241] = __res$first_74;
  # .MEM_12 = VDEF <.MEM_6>
  MEM[(struct pairD.36753 *)&D.50241 + 8B] = 0;
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 17, next block 1, flags: (NEW, REACHABLE)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_10(16), .MEM_12(17)>
  # DEBUG D#653ptD.0 => {CLOBBER}
  # DEBUG __res$firstD.59744 => D#653ptD.0
  # DEBUG D#654ptD.0 => {CLOBBER}
  # DEBUG __res$secondD.59745 => D#654ptD.0
  # VUSE <.MEM_1>
  return D.50241;
;;    succ:       EXIT [100.0%] 

}


Creating dr for MEM[(struct _Rb_tree_node_base * *)this_4(D) + 16B]
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_4(D) + 16B]
Creating dr for *__v_3(D)
analyze_innermost: success.
	base_address: __v_3(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *__v_3(D)
Creating dr for MEM[(const int &)__j$_M_node_59 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_59 + 32]
Creating dr for MEM[(const int &)__j$_M_node_59 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_59 + 32]
Creating dr for MEM[(const int &)__j$_M_node_59 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_59 + 32]
Creating dr for MEM[(const int &)__j$_M_node_59 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_59 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 24B]
Creating dr for MEM[(const int &)__j$_M_node_59 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_59 + 32]
Creating dr for MEM[(const int &)__j$_M_node_59 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_59 + 32]
Creating dr for MEM[(const int &)__j$_M_node_59 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_59 + 32]
Creating dr for MEM[(const int &)__j$_M_node_59 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__j$_M_node_59 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 24B]
Creating dr for MEM[(struct pair *)&D.50241]
analyze_innermost: success.
	base_address: &D.50241
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.50241]
Creating dr for MEM[(struct pair *)&D.50241 + 8B]
analyze_innermost: success.
	base_address: &D.50241
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.50241 + 8B]
Creating dr for *__v_3(D)
analyze_innermost: success.
	base_address: __v_3(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *__v_3(D)
Creating dr for MEM[(const int &)__res$second_52 + 32]
analyze_innermost: success.
	base_address: __res$second_52
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__res$second_52 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)this_4(D) + 24B]
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_4(D) + 24B]
Creating dr for *__v_3(D)
analyze_innermost: success.
	base_address: __v_3(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *__v_3(D)
Creating dr for MEM[(const int &)__j$_M_node_29 + 32]
analyze_innermost: success.
	base_address: __j$_M_node_29
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__j$_M_node_29 + 32]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:13)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:19)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:22, LOOPS:1, CONDITIONS:8, STMTS:207)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_10 bb_3 })
  {
    <bb 2>:
    # DEBUG D#127 => &D.44617
    # DEBUG __x => __v_3(D)
    # DEBUG this => D#127
    # DEBUG this => this_4(D)
    # DEBUG __k => __v_3(D)
    # VUSE <.MEM_2(D)>
    _18 = MEM[(struct _Rb_tree_node_base * *)this_4(D) + 16B];
    # DEBUG D#90 => this_4(D)
    # DEBUG this => D#90
    # DEBUG __x => NULL
    # DEBUG this => this_4(D)
    __j$_M_node_19 = &this_4(D)->_M_impl._M_header;
    # DEBUG __y => NULL
    # DEBUG __comp => 1
    # DEBUG __comp => 1
    # DEBUG __y => __j$_M_node_19
    # DEBUG __x => _18
    if (_18 == 0B)
      goto <bb 10>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_6 })
  {
    <bb 3>:
    # VUSE <.MEM_2(D)>
    pretmp_51 = *__v_3(D);
    goto <bb 6>;

  }
  bb_9 (preds = {bb_4 }, succs = {bb_19 })
  {
    <bb 9>:
    # _48 = PHI <_22(4)>
    # __j$_M_node_23 = PHI <__j$_M_node_59(4)>

  }
  bb_19 (preds = {bb_9 }, succs = {bb_10 bb_12 })
  {
    <bb 19>:
    # DEBUG this => &__j
    # DEBUG __x => __j$_M_node_23
    # DEBUG __j$_M_node => __j$_M_node_23
    if (_48 > pretmp_51)
      goto <bb 10>;
    else
      goto <bb 12>;

  }
  bb_10 (preds = {bb_19 bb_2 }, succs = {bb_13 bb_11 })
  {
    <bb 10>:
    # __j$_M_node_73 = PHI <__j$_M_node_23(19), __j$_M_node_19(2)>
    # DEBUG this => &__j
    # DEBUG __x => __j$_M_node_73
    # DEBUG __j$_M_node => __j$_M_node_73
    # VUSE <.MEM_2(D)>
    _27 = MEM[(struct _Rb_tree_node_base * *)this_4(D) + 24B];
    # DEBUG D#175 => this_4(D)
    # DEBUG this => D#175
    # DEBUG this => NULL
    # DEBUG __x => _27
    # DEBUG this => &__j
    # DEBUG __x => NULL
    if (_27 == __j$_M_node_73)
      goto <bb 13>;
    else
      goto <bb 11>;

  }
  bb_11 (preds = {bb_10 }, succs = {bb_12 })
  {
    <bb 11>:
    # DEBUG this => &__j
    # VUSE <.MEM_2(D)>
    __j$_M_node_29 = std::_Rb_tree_decrement (__j$_M_node_73);
    # DEBUG __j$_M_node => __j$_M_node_29
    # VUSE <.MEM_2(D)>
    pretmp_15 = *__v_3(D);
    # VUSE <.MEM_2(D)>
    pretmp_26 = MEM[(const int &)__j$_M_node_29 + 32];

  }
  bb_12 (preds = {bb_19 bb_11 }, succs = {bb_13 bb_17 })
  {
    <bb 12>:
    # __j$_M_node_30 = PHI <__j$_M_node_23(19), __j$_M_node_29(11)>
    # __j$_M_node_63 = PHI <__j$_M_node_23(19), __j$_M_node_73(11)>
    # prephitmp_47 = PHI <pretmp_51(19), pretmp_15(11)>
    # prephitmp_49 = PHI <_48(19), pretmp_26(11)>
    # DEBUG __j$_M_node => __j$_M_node_30
    # DEBUG __x => __j$_M_node_30
    # DEBUG __x => __j$_M_node_30
    # DEBUG this => __j$_M_node_30
    # DEBUG D#443 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_30]._M_value_field
    # DEBUG __r => D#443
    # DEBUG __x => D#443
    # DEBUG this => D#127
    # DEBUG D#445 => &this_4(D)->_M_impl._M_key_compare
    # DEBUG D#95 => D#445
    # DEBUG D#96 => D#443
    # DEBUG D#97 => __v_3(D)
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    if (prephitmp_47 > prephitmp_49)
      goto <bb 13>;
    else
      goto <bb 17>;

  }
  bb_13 (preds = {bb_10 bb_12 }, succs = {bb_14 bb_17 })
  {
    <bb 13>:
    # __res$second_52 = PHI <_27(10), __j$_M_node_63(12)>
    # DEBUG D#444 => {CLOBBER}
    # DEBUG __j$_M_node => D#444
    # DEBUG __res => 0B
    # DEBUG __res$8 => __res$second_52
    # DEBUG __res$first => 0B
    # DEBUG __res$second => __res$second_52
    if (__res$second_52 != 0B)
      goto <bb 14>;
    else
      goto <bb 17>;

  }
  bb_14 (preds = {bb_13 }, succs = {bb_16 bb_15 })
  {
    <bb 14>:
    # DEBUG this => &__an
    # DEBUG __t => this_4(D)
    # DEBUG __an$_M_t => this_4(D)
    # DEBUG D#650 => &__an
    # DEBUG this => this_4(D)
    # DEBUG __x => 0B
    # DEBUG __p => __res$second_52
    # DEBUG __v => __v_3(D)
    # DEBUG __node_gen => D#650
    # DEBUG D#649 => D#650
    # DEBUG this => this_4(D)
    if (__j$_M_node_19 == __res$second_52)
      goto <bb 16>;
    else
      goto <bb 15>;

  }
  bb_15 (preds = {bb_14 }, succs = {bb_16 })
  {
    <bb 15>:
    # DEBUG __x => __res$second_52
    # DEBUG __x => __res$second_52
    # DEBUG this => __res$second_52
    # DEBUG D#647 => &MEM[(const struct _Rb_tree_node *)__res$second_52]._M_value_field
    # DEBUG __r => D#647
    # DEBUG __x => D#647
    # DEBUG this => D#127
    # DEBUG __x => __v_3(D)
    # DEBUG this => D#127
    # DEBUG D#648 => &this_4(D)->_M_impl._M_key_compare
    # DEBUG D#95 => D#648
    # VUSE <.MEM_2(D)>
    _36 = *__v_3(D);
    # VUSE <.MEM_2(D)>
    _37 = MEM[(const int &)__res$second_52 + 32];
    # DEBUG D#97 => D#647
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    __insert_left_35 = _36 < _37;
    pretmp_72 = (int) __insert_left_35;

  }
  bb_16 (preds = {bb_15 bb_14 }, succs = {bb_18 })
  {
    <bb 16>:
    # prephitmp_20 = PHI <pretmp_72(15), 1(14)>
    # DEBUG __insert_left => NULL
    # DEBUG D#646 => D#649
    # DEBUG __arg => __v_3(D)
    # DEBUG this => D#646
    # DEBUG D#645 => D#646
    # DEBUG D#644 => D#645->_M_t
    # DEBUG D#643 => D#644
    # DEBUG __x => __v_3(D)
    # DEBUG this => D#643
    # DEBUG D#642 => D#643
    # DEBUG D#641 => D#643
    # DEBUG D#640 => D#641
    # DEBUG this => D#640
    # DEBUG D#639 => D#640
    # DEBUG this => D#639
    # DEBUG __n => 1
    # DEBUG __a => D#638
    # DEBUG D#637 => D#638
    # DEBUG D#635 => D#637
    # DEBUG D#636 => 0B
    # DEBUG __n => 1
    # DEBUG this => D#635
    # DEBUG D.64582 => D#636
    # DEBUG D#634 => D#635
    # DEBUG D#633 => D#634
    # DEBUG this => D#633
    # .MEM_54 = VDEF <.MEM_2(D)>
    _38 = operator new (40);
    # DEBUG __tmp => _38
    # DEBUG D#579 => D#642
    # DEBUG __node => _38
    # DEBUG __x => __v_3(D)
    # DEBUG this => D#579
    # DEBUG D#578 => D#579
    # DEBUG this => _38
    # DEBUG D#911 => &_38->_M_value_field
    # DEBUG __r => D#911
    # DEBUG D#383 => D#578
    # DEBUG this => D#383
    # DEBUG D#382 => D#383
    # DEBUG this => D#382
    # DEBUG this => NULL
    # DEBUG D.54900 => NULL
    # DEBUG this => NULL
    # DEBUG __p => D#911
    # DEBUG __val => __v_3(D)
    # DEBUG this => D#577
    # DEBUG D#24 => 4
    # DEBUG __p => D#911
    # DEBUG D.58238 => D#24
    # VUSE <.MEM_54>
    _40 = *__v_3(D);
    # .MEM_55 = VDEF <.MEM_54>
    MEM[(int *)_38 + 32B] = _40;
    # DEBUG this => NULL
    # DEBUG this => NULL
    # DEBUG __z => _38
    # .MEM_56 = VDEF <.MEM_55>
    std::_Rb_tree_insert_and_rebalance (prephitmp_20, _38, __res$second_52, __j$_M_node_19);
    # VUSE <.MEM_56>
    _44 = this_4(D)->_M_impl._M_node_count;
    _45 = _44 + 1;
    # .MEM_57 = VDEF <.MEM_56>
    this_4(D)->_M_impl._M_node_count = _45;
    # DEBUG this => NULL
    # DEBUG __x => _38
    # DEBUG this => &D.44676
    # DEBUG __a => &D.44674
    # DEBUG __b => &D.44675
    # .MEM_13 = VDEF <.MEM_57>
    MEM[(struct pair *)&D.50241] = _38;
    # .MEM_17 = VDEF <.MEM_13>
    MEM[(struct pair *)&D.50241 + 8B] = 1;
    # .MEM_10 = VDEF <.MEM_17>
    D.44674 ={v} {CLOBBER};
    goto <bb 18>;

  }
  bb_17 (preds = {bb_13 bb_12 }, succs = {bb_21 })
  {
    <bb 17>:
    # __res$first_74 = PHI <0B(13), __j$_M_node_30(12)>

  }
  bb_21 (preds = {bb_17 }, succs = {bb_18 })
  {
    <bb 21>:
    # DEBUG D#444 => {CLOBBER}
    # DEBUG __j$_M_node => D#444
    # DEBUG __res => __res$first_74
    # DEBUG __res$8 => NULL
    # DEBUG __res$first => __res$first_74
    # DEBUG __res$second => NULL
    # DEBUG this => &D.44677
    # DEBUG __x => __res$first_74
    # DEBUG this => &D.44679
    # DEBUG __a => &D.44677
    # DEBUG __b => &D.44678
    # .MEM_6 = VDEF <.MEM_2(D)>
    MEM[(struct pair *)&D.50241] = __res$first_74;
    # .MEM_12 = VDEF <.MEM_6>
    MEM[(struct pair *)&D.50241 + 8B] = 0;

  }
  bb_18 (preds = {bb_16 bb_21 }, succs = {bb_20 })
  {
    <bb 18>:
    # .MEM_1 = PHI <.MEM_10(16), .MEM_12(21)>

  }
  bb_20 (preds = {bb_18 }, succs = {bb_1 })
  {
    <bb 20>:
    # DEBUG D#653 => {CLOBBER}
    # DEBUG __res$first => D#653
    # DEBUG D#654 => {CLOBBER}
    # DEBUG __res$second => D#654
    # VUSE <.MEM_1>
    return D.50241;

  }
  loop_1 (header = 6, latch = 5, niter = )
  {
    bb_4 (preds = {bb_7 bb_8 }, succs = {bb_9 bb_5 })
    {
      <bb 4>:
      # _33 = PHI <_24(7), _25(8)>
      # DEBUG __comp => D#912 < _22
      # DEBUG __y => __j$_M_node_59
      # DEBUG __x => _33
      if (_33 == 0B)
        goto <bb 9>;
      else
        goto <bb 5>;

    }
    bb_5 (preds = {bb_4 }, succs = {bb_6 })
    {
      <bb 5>:

    }
    bb_6 (preds = {bb_3 bb_5 }, succs = {bb_7 bb_8 })
    {
      <bb 6>:
      # __j$_M_node_59 = PHI <_18(3), _33(5)>
      # DEBUG __comp => 1
      # DEBUG __x => __j$_M_node_59
      # DEBUG __y => __j$_M_node_59
      # DEBUG __x => __j$_M_node_59
      # DEBUG __x => __j$_M_node_59
      # DEBUG this => __j$_M_node_59
      # DEBUG D#442 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_59]._M_value_field
      # DEBUG __r => D#442
      # DEBUG __x => D#442
      # DEBUG this => D#127
      # DEBUG D#446 => &this_4(D)->_M_impl._M_key_compare
      # DEBUG D#95 => D#446
      # DEBUG D#912 => *__v_3(D)
      # DEBUG D#96 => __v_3(D)
      # VUSE <.MEM_2(D)>
      _22 = MEM[(const int &)__j$_M_node_59 + 32];
      # DEBUG D#97 => D#442
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      # DEBUG __comp => NULL
      if (_22 > pretmp_51)
        goto <bb 7>;
      else
        goto <bb 8>;

    }
    bb_7 (preds = {bb_6 }, succs = {bb_4 })
    {
      <bb 7>:
      # VUSE <.MEM_2(D)>
      _24 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 16B];
      # DEBUG D#106 => __j$_M_node_59
      # DEBUG __x => D#106
      goto <bb 4>;

    }
    bb_8 (preds = {bb_6 }, succs = {bb_4 })
    {
      <bb 8>:
      # VUSE <.MEM_2(D)>
      _25 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_59 + 24B];
      # DEBUG D#105 => __j$_M_node_59
      # DEBUG __x => D#105
      goto <bb 4>;

    }
  }
}

Pass statistics:
----------------

std::pair<std::_Rb_tree_iterator<_Val>, bool> std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_insert_unique(const _Val&) [with _Key = int; _Val = int; _KeyOfValue = std::_Identity<int>; _Compare = std::less<int>; _Alloc = std::allocator<int>] (struct _Rb_treeD.36317 * const thisD.36755, const intD.9 & __vD.36756)
{
  struct _Rb_tree_node_baseD.24800 * SR.1396D.64598;
  struct _Rb_tree_node_baseD.24800 * SR.1395D.64597;
  struct _Rb_tree_node_baseD.24800 * __res$8D.64596;
  struct _Rb_tree_node_baseD.24800 * __resD.64595;
  boolD.2757 __insert_leftD.64571;
  struct iteratorD.36632 D.64592;
  struct pairD.25253 D.64565;
  boolD.2757 __compD.64544;
  struct _Rb_tree_node_baseD.24800 * const __j$_M_nodeD.64562;
  struct _Rb_tree_node_baseD.24800 * SR.1066D.59747;
  struct _Rb_tree_node_baseD.24800 * __res$secondD.59745;
  struct _Rb_tree_node_baseD.24800 * __res$firstD.59744;
  struct pairD.25253 __resD.44604;
  struct iteratorD.36632 D.44674;
  struct pairD.36753 D.50241;
  const intD.9 pretmp_15;
  struct _Rb_tree_node_baseD.24800 * _18;
  intD.9 prephitmp_20;
  const intD.9 _22;
  struct _Rb_tree_node_baseD.24800 * _24;
  struct _Rb_tree_node_baseD.24800 * _25;
  const intD.9 pretmp_26;
  struct _Rb_tree_node_baseD.24800 * _27;
  struct _Rb_tree_node_baseD.24800 * const _33;
  const intD.9 _36;
  const intD.9 _37;
  struct _Rb_tree_nodeD.36321 * _38;
  intD.9 _40;
  long unsigned intD.14 _44;
  long unsigned intD.14 _45;
  const intD.9 prephitmp_47;
  const intD.9 _48;
  const intD.9 prephitmp_49;
  const intD.9 pretmp_51;
  intD.9 pretmp_72;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#127ptD.0 => &D.44617
  # DEBUG __xD.59731 => __v_3(D)
  # DEBUG thisD.59732 => D#127ptD.0
  # DEBUG thisD.64539 => this_4(D)
  # DEBUG __kD.64540 => __v_3(D)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _18 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_4(D) + 16B];
  # DEBUG D#90ptD.0 => this_4(D)
  # DEBUG thisD.55635 => D#90ptD.0
  # DEBUG __xD.64542 => NULL
  # DEBUG thisD.64561 => this_4(D)
  # PT = nonlocal 
  __j$_M_node_19 = &this_4(D)->_M_implD.36395._M_headerD.36561;
  # DEBUG __yD.64543 => NULL
  # DEBUG __compD.64544 => 1
  # DEBUG __compD.64544 => 1
  # DEBUG __yD.64543 => __j$_M_node_19
  # DEBUG __xD.64542 => _18
  if (_18 == 0B)
    goto <bb 10>;
  else
    goto <bb 3>;
;;    succ:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  pretmp_51 = *__v_3(D);
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # _33 = PHI <_24(7), _25(8)>
  # DEBUG __compD.64544 => D#912ptD.0 < _22
  # DEBUG __yD.64543 => __j$_M_node_59
  # DEBUG __xD.64542 => _33
  if (_33 == 0B)
    goto <bb 9>;
  else
    goto <bb 5>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_59 = PHI <_18(3), _33(5)>
  # DEBUG __compD.64544 => 1
  # DEBUG __xD.64542 => __j$_M_node_59
  # DEBUG __yD.64543 => __j$_M_node_59
  # DEBUG __xD.55643 => __j$_M_node_59
  # DEBUG __xD.55644 => __j$_M_node_59
  # DEBUG thisD.55645 => __j$_M_node_59
  # DEBUG D#442ptD.0 => &MEM[(const struct _Rb_tree_nodeD.36321 *)__j$_M_node_59]._M_value_fieldD.44464
  # DEBUG __rD.55383 => D#442ptD.0
  # DEBUG __xD.55389 => D#442ptD.0
  # DEBUG thisD.55390 => D#127ptD.0
  # DEBUG D#446ptD.0 => &this_4(D)->_M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#446ptD.0
  # DEBUG D#912ptD.0 => *__v_3(D)
  # DEBUG D#96ptD.0 => __v_3(D)
  # VUSE <.MEM_2(D)>
  _22 = MEM[(const intD.9 &)__j$_M_node_59 + 32];
  # DEBUG D#97ptD.0 => D#442ptD.0
  # DEBUG thisD.64558 => D#95ptD.0
  # DEBUG __xD.64559 => D#96ptD.0
  # DEBUG __yD.64560 => D#97ptD.0
  # DEBUG __compD.64544 => NULL
  if (_22 > pretmp_51)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _24 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__j$_M_node_59 + 16B];
  # DEBUG D#106ptD.0 => __j$_M_node_59
  # DEBUG __xD.55648 => D#106ptD.0
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _25 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__j$_M_node_59 + 24B];
  # DEBUG D#105ptD.0 => __j$_M_node_59
  # DEBUG __xD.55651 => D#105ptD.0
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 8, next block 19, flags: (NEW, REACHABLE)
;;    pred:       4 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # _48 = PHI <_22(4)>
  # PT = nonlocal escaped 
  # __j$_M_node_23 = PHI <__j$_M_node_59(4)>
;;    succ:       19 [100.0%]  (FALLTHRU)

;;   basic block 19, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 9, next block 10, flags: (NEW)
;;    pred:       9 [100.0%]  (FALLTHRU)
  # DEBUG thisD.64557 => &__jD.64545
  # DEBUG __xD.64556 => __j$_M_node_23
  # DEBUG __j$_M_nodeD.64562 => __j$_M_node_23
  if (_48 > pretmp_51)
    goto <bb 10>;
  else
    goto <bb 12>;
;;    succ:       10 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [55.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 19, next block 11, flags: (NEW, REACHABLE)
;;    pred:       19 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_73 = PHI <__j$_M_node_23(19), __j$_M_node_19(2)>
  # DEBUG thisD.64557 => &__jD.64545
  # DEBUG __xD.64556 => __j$_M_node_73
  # DEBUG __j$_M_nodeD.64562 => __j$_M_node_73
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  _27 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_4(D) + 24B];
  # DEBUG D#175ptD.0 => this_4(D)
  # DEBUG thisD.55659 => D#175ptD.0
  # DEBUG thisD.53227 => NULL
  # DEBUG __xD.53226 => _27
  # DEBUG thisD.55655 => &__jD.64545
  # DEBUG __xD.55656 => NULL
  if (_27 == __j$_M_node_73)
    goto <bb 13>;
  else
    goto <bb 11>;
;;    succ:       13 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 404, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.64552 => &__jD.64545
  # VUSE <.MEM_2(D)>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  __j$_M_node_29 = _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_baseD.24849 (__j$_M_node_73);
  # DEBUG __j$_M_nodeD.64562 => __j$_M_node_29
  # VUSE <.MEM_2(D)>
  pretmp_15 = *__v_3(D);
  # VUSE <.MEM_2(D)>
  pretmp_26 = MEM[(const intD.9 &)__j$_M_node_29 + 32];
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 854, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       19 [55.0%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_30 = PHI <__j$_M_node_23(19), __j$_M_node_29(11)>
  # PT = nonlocal escaped 
  # __j$_M_node_63 = PHI <__j$_M_node_23(19), __j$_M_node_73(11)>
  # prephitmp_47 = PHI <pretmp_51(19), pretmp_15(11)>
  # prephitmp_49 = PHI <_48(19), pretmp_26(11)>
  # DEBUG __j$_M_nodeD.64562 => __j$_M_node_30
  # DEBUG __xD.55673 => __j$_M_node_30
  # DEBUG __xD.55674 => __j$_M_node_30
  # DEBUG thisD.55675 => __j$_M_node_30
  # DEBUG D#443ptD.0 => &MEM[(const struct _Rb_tree_nodeD.36321 *)__j$_M_node_30]._M_value_fieldD.44464
  # DEBUG __rD.55383 => D#443ptD.0
  # DEBUG __xD.55625 => D#443ptD.0
  # DEBUG thisD.55626 => D#127ptD.0
  # DEBUG D#445ptD.0 => &this_4(D)->_M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#445ptD.0
  # DEBUG D#96ptD.0 => D#443ptD.0
  # DEBUG D#97ptD.0 => __v_3(D)
  # DEBUG thisD.55671 => D#95ptD.0
  # DEBUG __xD.55670 => D#96ptD.0
  # DEBUG __yD.55669 => D#97ptD.0
  if (prephitmp_47 > prephitmp_49)
    goto <bb 13>;
  else
    goto <bb 17>;
;;    succ:       13 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 379, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       10 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __res$second_52 = PHI <_27(10), __j$_M_node_63(12)>
  # DEBUG D#444ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.64562 => D#444ptD.0
  # DEBUG __resD.64595 => 0B
  # DEBUG __res$8D.64596 => __res$second_52
  # DEBUG __res$firstD.59744 => 0B
  # DEBUG __res$secondD.59745 => __res$second_52
  if (__res$second_52 != 0B)
    goto <bb 14>;
  else
    goto <bb 17>;
;;    succ:       14 [100.0%]  (TRUE_VALUE,EXECUTABLE)
;;                17 (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 81, maybe hot
;;   Invalid sum of incoming frequencies 379, should be 81
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [100.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.59734 => &__anD.44637
  # DEBUG __tD.59735 => this_4(D)
  # DEBUG __an$_M_tD.59746 => this_4(D)
  # DEBUG D#650ptD.0 => &__anD.44637
  # DEBUG thisD.64566 => this_4(D)
  # DEBUG __xD.64567 => 0B
  # DEBUG __pD.64568 => __res$second_52
  # DEBUG __vD.64569 => __v_3(D)
  # DEBUG __node_genD.64570 => D#650ptD.0
  # DEBUG D#649ptD.0 => D#650ptD.0
  # DEBUG thisD.64591 => this_4(D)
  if (__j$_M_node_19 == __res$second_52)
    goto <bb 16>;
  else
    goto <bb 15>;
;;    succ:       16 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 68, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [85.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.59713 => __res$second_52
  # DEBUG __xD.59714 => __res$second_52
  # DEBUG thisD.59715 => __res$second_52
  # DEBUG D#647ptD.0 => &MEM[(const struct _Rb_tree_nodeD.36321 *)__res$second_52]._M_value_fieldD.44464
  # DEBUG __rD.55383 => D#647ptD.0
  # DEBUG __xD.55625 => D#647ptD.0
  # DEBUG thisD.55626 => D#127ptD.0
  # DEBUG __xD.59653 => __v_3(D)
  # DEBUG thisD.59654 => D#127ptD.0
  # DEBUG D#648ptD.0 => &this_4(D)->_M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#648ptD.0
  # VUSE <.MEM_2(D)>
  _36 = *__v_3(D);
  # VUSE <.MEM_2(D)>
  _37 = MEM[(const intD.9 &)__res$second_52 + 32];
  # DEBUG D#97ptD.0 => D#647ptD.0
  # DEBUG thisD.59716 => D#95ptD.0
  # DEBUG __xD.59717 => D#96ptD.0
  # DEBUG __yD.59718 => D#97ptD.0
  __insert_left_35 = _36 < _37;
  pretmp_72 = (intD.9) __insert_left_35;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 537, maybe hot
;;   Invalid sum of incoming frequencies 80, should be 537
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       15 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1] NONZERO 1
  # prephitmp_20 = PHI <pretmp_72(15), 1(14)>
  # DEBUG __insert_leftD.64571 => NULL
  # DEBUG D#646ptD.0 => D#649ptD.0
  # DEBUG __argD.64574 => __v_3(D)
  # DEBUG thisD.64573 => D#646ptD.0
  # DEBUG D#645ptD.0 => D#646ptD.0
  # DEBUG D#644ptD.0 => D#645ptD.0->_M_tD.44651
  # DEBUG D#643ptD.0 => D#644ptD.0
  # DEBUG __xD.64576 => __v_3(D)
  # DEBUG thisD.64575 => D#643ptD.0
  # DEBUG D#642ptD.0 => D#643ptD.0
  # DEBUG D#641ptD.0 => D#643ptD.0
  # DEBUG D#640ptD.0 => D#641ptD.0
  # DEBUG thisD.64578 => D#640ptD.0
  # DEBUG D#639ptD.0 => D#640ptD.0
  # DEBUG thisD.59556 => D#639ptD.0
  # DEBUG __nD.64580 => 1
  # DEBUG __aD.64579 => D#638ptD.0
  # DEBUG D#637ptD.0 => D#638ptD.0
  # DEBUG D#635ptD.0 => D#637ptD.0
  # DEBUG D#636ptD.0 => 0B
  # DEBUG __nD.64583 => 1
  # DEBUG thisD.64581 => D#635ptD.0
  # DEBUG D.64582 => D#636ptD.0
  # DEBUG D#634ptD.0 => D#635ptD.0
  # DEBUG D#633ptD.0 => D#634ptD.0
  # DEBUG thisD.59514 => D#633ptD.0
  # .MEM_54 = VDEF <.MEM_2(D)>
  # PT = { D.64599 } (escaped heap)
  # USE = nonlocal null { D.64599 } (escaped heap)
  # CLB = nonlocal null { D.64599 } (escaped heap)
  _38 = _ZnwmD.2764 (40);
  # DEBUG __tmpD.64577 => _38
  # DEBUG D#579ptD.0 => D#642ptD.0
  # DEBUG __nodeD.64586 => _38
  # DEBUG __xD.64585 => __v_3(D)
  # DEBUG thisD.64584 => D#579ptD.0
  # DEBUG D#578ptD.0 => D#579ptD.0
  # DEBUG thisD.64587 => _38
  # DEBUG D#911ptD.0 => &_38->_M_value_fieldD.44464
  # DEBUG __rD.54912 => D#911ptD.0
  # DEBUG D#383ptD.0 => D#578ptD.0
  # DEBUG thisD.58254 => D#383ptD.0
  # DEBUG D#382ptD.0 => D#383ptD.0
  # DEBUG thisD.54907 => D#382ptD.0
  # DEBUG thisD.54899 => NULL
  # DEBUG D.54900 => NULL
  # DEBUG thisD.54897 => NULL
  # DEBUG __pD.64590 => D#911ptD.0
  # DEBUG __valD.64589 => __v_3(D)
  # DEBUG thisD.64588 => D#577ptD.0
  # DEBUG D#24ptD.0 => 4
  # DEBUG __pD.58237 => D#911ptD.0
  # DEBUG D.58238 => D#24ptD.0
  # VUSE <.MEM_54>
  _40 = *__v_3(D);
  # .MEM_55 = VDEF <.MEM_54>
  MEM[(intD.9 *)_38 + 32B] = _40;
  # DEBUG thisD.58267 => NULL
  # DEBUG thisD.58250 => NULL
  # DEBUG __zD.64572 => _38
  # .MEM_56 = VDEF <.MEM_55>
  # USE = nonlocal null { D.64599 } (escaped heap)
  # CLB = nonlocal null { D.64599 } (escaped heap)
  _ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_D.25026 (prephitmp_20, _38, __res$second_52, __j$_M_node_19);
  # VUSE <.MEM_56>
  _44 = this_4(D)->_M_implD.36395._M_node_countD.36562;
  # RANGE [0, 18446744073709551615]
  _45 = _44 + 1;
  # .MEM_57 = VDEF <.MEM_56>
  this_4(D)->_M_implD.36395._M_node_countD.36562 = _45;
  # DEBUG thisD.59712 => NULL
  # DEBUG __xD.59711 => _38
  # DEBUG thisD.59736 => &D.44676
  # DEBUG __aD.59737 => &D.44674
  # DEBUG __bD.59738 => &D.44675
  # .MEM_13 = VDEF <.MEM_57>
  MEM[(struct pairD.36753 *)&D.50241] = _38;
  # .MEM_17 = VDEF <.MEM_13>
  MEM[(struct pairD.36753 *)&D.50241 + 8B] = 1;
  # .MEM_10 = VDEF <.MEM_17>
  D.44674 ={v} {CLOBBER};
  goto <bb 18>;
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 363, maybe hot
;;   Invalid sum of incoming frequencies 521, should be 363
;;    prev block 16, next block 21, flags: (NEW, REACHABLE)
;;    pred:       13 (FALSE_VALUE,EXECUTABLE)
;;                12 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped null 
  # __res$first_74 = PHI <0B(13), __j$_M_node_30(12)>
;;    succ:       21 [100.0%]  (FALLTHRU)

;;   basic block 21, loop depth 0, count 0, freq 363, maybe hot
;;    prev block 17, next block 18, flags: (NEW)
;;    pred:       17 [100.0%]  (FALLTHRU)
  # DEBUG D#444ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.64562 => D#444ptD.0
  # DEBUG __resD.64595 => __res$first_74
  # DEBUG __res$8D.64596 => NULL
  # DEBUG __res$firstD.59744 => __res$first_74
  # DEBUG __res$secondD.59745 => NULL
  # DEBUG thisD.59742 => &D.44677
  # DEBUG __xD.59743 => __res$first_74
  # DEBUG thisD.59739 => &D.44679
  # DEBUG __aD.59740 => &D.44677
  # DEBUG __bD.59741 => &D.44678
  # .MEM_6 = VDEF <.MEM_2(D)>
  MEM[(struct pairD.36753 *)&D.50241] = __res$first_74;
  # .MEM_12 = VDEF <.MEM_6>
  MEM[(struct pairD.36753 *)&D.50241 + 8B] = 0;
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 21, next block 20, flags: (NEW, REACHABLE)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                21 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_10(16), .MEM_12(21)>
;;    succ:       20 [100.0%]  (FALLTHRU)

;;   basic block 20, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 18, next block 1, flags: (NEW)
;;    pred:       18 [100.0%]  (FALLTHRU)
  # DEBUG D#653ptD.0 => {CLOBBER}
  # DEBUG __res$firstD.59744 => D#653ptD.0
  # DEBUG D#654ptD.0 => {CLOBBER}
  # DEBUG __res$secondD.59745 => D#654ptD.0
  # VUSE <.MEM_1>
  return D.50241;
;;    succ:       EXIT [100.0%] 

}



;; Function virtual void SparseAllocator::AddRequest(int, int, int, int, int) (_ZN15SparseAllocator10AddRequestEiiiii, funcdef_no=1776, decl_uid=37919, cgraph_uid=446, symbol_order=447)


Pass statistics:
----------------

virtual void SparseAllocator::AddRequest(int, int, int, int, int) (struct SparseAllocatorD.36303 * const thisD.42539, intD.9 inD.42533, intD.9 outD.42534, intD.9 labelD.42535, intD.9 in_priD.42536, intD.9 out_priD.42537)
{
  struct value_typeD.41248 D.64665;
  struct _Rb_tree_nodeD.41466 * __yD.64659;
  struct iteratorD.41766 D.64664;
  struct const_iteratorD.41768 __posD.64649;
  struct _Rb_tree_node_baseD.24800 * const __i$_M_nodeD.64663;
  struct _Rb_tree_node_baseD.24800 * SR.1191D.64662;
  struct mapped_typeD.41247 & D.64661;
  struct value_typeD.41248 D.64638;
  struct _Rb_tree_nodeD.41466 * __yD.64632;
  struct iteratorD.41766 D.64637;
  struct const_iteratorD.41768 __posD.64622;
  struct _Rb_tree_node_baseD.24800 * const __i$_M_nodeD.64636;
  struct _Rb_tree_node_baseD.24800 * SR.1191D.64635;
  struct mapped_typeD.41247 & D.64634;
  struct pairD.36753 __pD.61635;
  struct pairD.36753 __pD.61619;
  const struct _Rb_tree_nodeD.41466 * __yD.61602;
  const struct _Rb_tree_nodeD.41466 * __yD.61586;
  static const charD.10 _ZZN15SparseAllocator10AddRequestEiiiiiE19__PRETTY_FUNCTION__D.42541[66] = "virtual void SparseAllocator::AddRequest(int, int, int, int, int)";
  intD.9 out.102_4;
  intD.9 in.103_5;
  boolD.2757 _12;
  long unsigned intD.14 _13;
  const intD.9 _14;
  long unsigned intD.14 _17;
  size_typeD.42041 _21;
  const size_typeD.41494 _22;
  const intD.9 _25;
  intD.9 in.103_29;
  long unsigned intD.14 _30;
  intD.9 prephitmp_34;
  long unsigned intD.14 _37;
  intD.9 pretmp_41;
  struct mapD.37148 * _44;
  struct mapD.37148 * _45;
  struct mapD.37148 * _47;
  struct mapD.37148 * _48;
  size_typeD.42041 iftmp.106_50;
  long unsigned intD.14 _53;
  struct mapD.37148 & _54;
  const intD.9 _58;
  const intD.9 _62;
  long unsigned intD.14 _67;
  struct mapD.37148 & _68;
  const size_typeD.41494 _69;
  struct _Rep_typeD.36315 * _70;
  struct _Rep_typeD.36315 * _73;
  long unsigned intD.14 _74;
  struct mapD.37148 & _75;
  long unsigned intD.14 _76;
  struct mapD.37148 & _77;
  intD.9 _87;
  intD.9 _88;
  const intD.9 _91;
  intD.9 prephitmp_92;
  const intD.9 _97;
  struct _Rep_typeD.41460 * _100;
  const intD.9 _108;
  struct mapD.37148 * pretmp_109;
  const intD.9 _114;
  intD.9 pretmp_116;
  struct _Rep_typeD.41460 * _117;
  struct mapD.37148 * prephitmp_142;
  intD.9 pretmp_152;
  struct mapD.37148 * pretmp_153;
  long unsigned intD.14 pretmp_154;
  intD.9 prephitmp_156;
  intD.9 pretmp_163;
  intD.9 prephitmp_165;
  long unsigned intD.14 pretmp_166;

;;   basic block 2, loop depth 0, count 0, freq 902, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  out.102_4 = outD.42534;
  # VUSE <.MEM_3(D)>
  in.103_5 = inD.42533;
  # DEBUG D#913ptD.0 => &this_6(D)->D.37974
  # DEBUG thisD.64606 => D#913ptD.0
  # DEBUG inD.64607 => in.103_5
  # DEBUG outD.64608 => out.102_4
  # DEBUG labelD.64609 => label_8(D)
  # DEBUG in_priD.64610 => in_pri_9(D)
  # DEBUG out_priD.64611 => out_pri_10(D)
  # DEBUG D#838ptD.0 s=> out_priD.64611
  # DEBUG D#837ptD.0 s=> in_priD.64610
  if (in.103_5 < 0)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  _87 = MEM[(struct AllocatorD.34627 *)this_6(D)]._inputsD.34629;
  if (in.103_5 >= _87)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                2 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_144 = VDEF <.MEM_3(D)>
  # USE = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  # CLB = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  __assert_failD.14402 ("( in >= 0 ) && ( in < _inputs )", "allocators/allocator.cpp", 71, &_ZZN9Allocator10AddRequestEiiiiiE19__PRETTY_FUNCTION__D.40256);
;;    succ:      

;;   basic block 5, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  if (out.102_4 < 0)
    goto <bb 7>;
  else
    goto <bb 6>;
;;    succ:       7 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  _88 = MEM[(struct AllocatorD.34627 *)this_6(D)]._outputsD.34630;
  if (out.102_4 >= _88)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_143 = VDEF <.MEM_3(D)>
  # USE = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  # CLB = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  __assert_failD.14402 ("( out >= 0 ) && ( out < _outputs )", "allocators/allocator.cpp", 72, &_ZZN9Allocator10AddRequestEiiiiiE19__PRETTY_FUNCTION__D.40256);
;;    succ:      

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  if (label_8(D) < 0)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#11ptD.0 => D#913ptD.0
  # DEBUG D#12ptD.0 => in.103_5
  # DEBUG D#13ptD.0 => out.102_4
  # DEBUG D#14ptD.0 => label_8(D)
  # DEBUG D#15ptD.0 => D#837ptD.0
  # DEBUG D#16ptD.0 => D#838ptD.0
  # VUSE <.MEM_3(D)>
  # USE = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  _ZN9Allocator10AddRequestEiiiii.part.10D.52168 ();
;;    succ:      

;;   basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_124 = VDEF <.MEM_3(D)>
  MEM[(struct AllocatorD.34627 *)this_6(D)]._dirtyD.34631 = 1;
  # RANGE [0, 18446744073709551615]
  _13 = (long unsigned intD.14) in.103_5;
  # DEBUG D#758ptD.0 => &this_6(D)->_in_reqD.37895
  # VUSE <.MEM_124>
  # PT = nonlocal escaped 
  _44 = MEM[(struct mapD.37148 * *)this_6(D) + 256B];
  # DEBUG D#85ptD.0 => D#758ptD.0
  # DEBUG __nD.61591 => _13
  # DEBUG thisD.61592 => D#85ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _53 = _13 * 48;
  # PT = nonlocal escaped 
  _54 = _44 + _53;
  # DEBUG thisD.61578 => NULL
  # DEBUG __xD.61579 => &outD.42534
  # DEBUG thisD.61580 => D#344ptD.0
  # PT = nonlocal escaped 
  __y_39 = &MEM[(const struct _Rb_treeD.41462 *)_54]._M_implD.41540._M_headerD.41695;
  # DEBUG thisD.54363 => NULL
  # DEBUG __xD.54362 => __y_39
  # DEBUG thisD.61582 => D#345ptD.0
  # DEBUG __kD.61581 => &outD.42534
  # DEBUG thisD.54354 => D#345ptD.0
  # VUSE <.MEM_124>
  # PT = nonlocal escaped 
  __y_32 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_54 + 16B];
  # DEBUG D#110ptD.0 => D#345ptD.0
  # DEBUG thisD.54273 => D#110ptD.0
  # DEBUG D#335ptD.0 => D#345ptD.0
  # DEBUG __xD.61587 => NULL
  # DEBUG __yD.61586 => NULL
  # DEBUG __kD.61585 => &outD.42534
  # DEBUG __yD.61586 => __y_39
  # DEBUG __xD.61587 => __y_32
  if (__y_32 == 0B)
    goto <bb 19>;
  else
    goto <bb 13>;
;;    succ:       19 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_105 = PHI <__y_19(16), __y_20(15)>
  # PT = nonlocal escaped 
  # __y_104 = PHI <__y_159(16), __y_7(15)>
  # DEBUG __yD.61586 => __y_104
  # DEBUG __xD.61587 => __y_105
  if (__y_105 == 0B)
    goto <bb 17>;
  else
    goto <bb 12>;
;;    succ:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       11 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       10 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_159 = PHI <__y_39(13), __y_104(12)>
  # PT = nonlocal escaped 
  # __y_7 = PHI <__y_32(13), __y_105(12)>
  # DEBUG __yD.61586 => __y_159
  # DEBUG __xD.61587 => __y_7
  # DEBUG __xD.54243 => __y_7
  # DEBUG __xD.54209 => __y_7
  # DEBUG thisD.54210 => __y_7
  # DEBUG D#331ptD.0 => &__y_7->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54245 => D#331ptD.0
  # DEBUG thisD.54244 => D#173ptD.0
  # DEBUG D#332ptD.0 => &MEM[(const struct pairD.37146 &)__y_7 + 32].firstD.42483
  # DEBUG D#333ptD.0 => &D#334ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#333ptD.0
  # VUSE <.MEM_124>
  _25 = MEM[(const intD.9 &)__y_7 + 32];
  # DEBUG D#96ptD.0 => D#332ptD.0
  # DEBUG D#97ptD.0 => &outD.42534
  # DEBUG thisD.54246 => D#95ptD.0
  # DEBUG __xD.54247 => D#96ptD.0
  # DEBUG __yD.54248 => D#97ptD.0
  if (out.102_4 <= _25)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.61586 => __y_7
  # VUSE <.MEM_124>
  # PT = nonlocal escaped 
  __y_20 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_7 + 16B];
  # DEBUG D#171ptD.0 => __y_7
  # DEBUG __xD.54242 => D#171ptD.0
  # DEBUG __xD.61587 => NULL
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       14 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_124>
  # PT = nonlocal escaped 
  __y_19 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_7 + 24B];
  # DEBUG D#172ptD.0 => __y_7
  # DEBUG __xD.54241 => D#172ptD.0
  # DEBUG __xD.61587 => NULL
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_157 = PHI <__y_104(11)>
  # DEBUG thisD.54240 => NULL
  # DEBUG __xD.54239 => __y_157
  # DEBUG __j$_M_nodeD.54291 => __y_157
  # DEBUG thisD.54261 => D#345ptD.0
  # DEBUG thisD.54263 => NULL
  # DEBUG __xD.54262 => __y_39
  # DEBUG thisD.54258 => &__jD.61583
  # DEBUG __xD.54259 => NULL
  if (__y_39 == __y_157)
    goto <bb 21>;
  else
    goto <bb 18>;
;;    succ:       21 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.54283 => __y_157
  # DEBUG __xD.53214 => __y_157
  # DEBUG thisD.53215 => __y_157
  # DEBUG D#174ptD.0 => &__y_157->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.54285 => D#174ptD.0
  # DEBUG thisD.54284 => D#173ptD.0
  # DEBUG D#336ptD.0 => &MEM[(const struct pairD.37146 &)__y_157 + 32].firstD.42483
  # DEBUG D#338ptD.0 => &MEM[(const struct _Rb_treeD.41462 *)D#345ptD.0]._M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#338ptD.0
  # DEBUG D#96ptD.0 => &outD.42534
  # VUSE <.MEM_124>
  _14 = MEM[(const intD.9 &)__y_157 + 32];
  # DEBUG D#97ptD.0 => D#336ptD.0
  # DEBUG thisD.54281 => D#95ptD.0
  # DEBUG __xD.54280 => D#96ptD.0
  # DEBUG __yD.54279 => D#97ptD.0
  _12 = out.102_4 >= _14;
  _21 = (size_typeD.42041) _12;
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 463, maybe hot
;;   Invalid sum of incoming frequencies 846, should be 463
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1] NONZERO 1
  # iftmp.106_50 = PHI <_21(18), 0(10)>
  if (iftmp.106_50 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;
;;    succ:       20 (TRUE_VALUE,EXECUTABLE)
;;                21 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       19 (TRUE_VALUE,EXECUTABLE)
  # .MEM_43 = VDEF <.MEM_124>
  # USE = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  # CLB = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  __assert_failD.14402 ("_in_req[in].count(out) == 0", "allocators/allocator.cpp", 321, &_ZZN15SparseAllocator10AddRequestEiiiiiE19__PRETTY_FUNCTION__D.42541);
;;    succ:      

;;   basic block 21, loop depth 0, count 0, freq 900, maybe hot
;;   Invalid sum of incoming frequencies 517, should be 900
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       19 [100.0%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [6.6%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _17 = (long unsigned intD.14) out.102_4;
  # DEBUG D#759ptD.0 => &this_6(D)->_out_reqD.37896
  # VUSE <.MEM_124>
  # PT = nonlocal escaped 
  _45 = MEM[(struct mapD.37148 * *)this_6(D) + 280B];
  # DEBUG D#85ptD.0 => D#759ptD.0
  # DEBUG __nD.61607 => _17
  # DEBUG thisD.61608 => D#85ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _67 = _17 * 48;
  # PT = nonlocal escaped 
  _68 = _45 + _67;
  # DEBUG thisD.61594 => NULL
  # DEBUG __xD.61595 => &inD.42533
  # DEBUG thisD.61596 => D#344ptD.0
  # PT = nonlocal escaped 
  __y_55 = &MEM[(const struct _Rb_treeD.41462 *)_68]._M_implD.41540._M_headerD.41695;
  # DEBUG thisD.54363 => NULL
  # DEBUG __xD.54362 => __y_55
  # DEBUG thisD.61598 => D#345ptD.0
  # DEBUG __kD.61597 => &inD.42533
  # DEBUG thisD.54354 => D#345ptD.0
  # VUSE <.MEM_124>
  # PT = nonlocal escaped 
  __y_56 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_68 + 16B];
  # DEBUG D#110ptD.0 => D#345ptD.0
  # DEBUG thisD.54273 => D#110ptD.0
  # DEBUG D#335ptD.0 => D#345ptD.0
  # DEBUG __xD.61603 => NULL
  # DEBUG __yD.61602 => NULL
  # DEBUG __kD.61601 => &inD.42533
  # DEBUG __yD.61602 => __y_55
  # DEBUG __xD.61603 => __y_56
  if (__y_56 == 0B)
    goto <bb 31>;
  else
    goto <bb 24>;
;;    succ:       31 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 9096, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       27 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_122 = PHI <__y_60(27), __y_59(26)>
  # PT = nonlocal escaped 
  # __y_121 = PHI <__y_103(27), __y_120(26)>
  # DEBUG __yD.61602 => __y_121
  # DEBUG __xD.61603 => __y_122
  if (__y_122 == 0B)
    goto <bb 28>;
  else
    goto <bb 23>;
;;    succ:       28 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 8277, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       21 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 9096, maybe hot
;;    prev block 24, next block 26, flags: (NEW)
;;    pred:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_120 = PHI <__y_56(24), __y_122(23)>
  # PT = nonlocal escaped 
  # __y_103 = PHI <__y_55(24), __y_121(23)>
  # DEBUG __yD.61602 => __y_103
  # DEBUG __xD.61603 => __y_120
  # DEBUG __xD.54243 => __y_120
  # DEBUG __xD.54209 => __y_120
  # DEBUG thisD.54210 => __y_120
  # DEBUG D#331ptD.0 => &__y_120->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54245 => D#331ptD.0
  # DEBUG thisD.54244 => D#173ptD.0
  # DEBUG D#332ptD.0 => &MEM[(const struct pairD.37146 &)__y_120 + 32].firstD.42483
  # DEBUG D#333ptD.0 => &D#334ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#333ptD.0
  # VUSE <.MEM_124>
  _58 = MEM[(const intD.9 &)__y_120 + 32];
  # DEBUG D#96ptD.0 => D#332ptD.0
  # DEBUG D#97ptD.0 => &inD.42533
  # DEBUG thisD.54246 => D#95ptD.0
  # DEBUG __xD.54247 => D#96ptD.0
  # DEBUG __yD.54248 => D#97ptD.0
  if (in.103_5 <= _58)
    goto <bb 26>;
  else
    goto <bb 27>;
;;    succ:       26 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 1, count 0, freq 4548, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       25 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.61602 => __y_120
  # VUSE <.MEM_124>
  # PT = nonlocal escaped 
  __y_59 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_120 + 16B];
  # DEBUG D#171ptD.0 => __y_120
  # DEBUG __xD.54242 => D#171ptD.0
  # DEBUG __xD.61603 => NULL
  goto <bb 22>;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 1, count 0, freq 4548, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       25 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_124>
  # PT = nonlocal escaped 
  __y_60 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_120 + 24B];
  # DEBUG D#172ptD.0 => __y_120
  # DEBUG __xD.54241 => D#172ptD.0
  # DEBUG __xD.61603 => NULL
  goto <bb 22>;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       22 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_155 = PHI <__y_121(22)>
  # DEBUG thisD.54240 => NULL
  # DEBUG __xD.54239 => __y_155
  # DEBUG __j$_M_nodeD.54291 => __y_155
  # DEBUG thisD.54261 => D#345ptD.0
  # DEBUG thisD.54263 => NULL
  # DEBUG __xD.54262 => __y_55
  # DEBUG thisD.54258 => &__jD.61599
  # DEBUG __xD.54259 => NULL
  if (__y_55 == __y_155)
    goto <bb 31>;
  else
    goto <bb 29>;
;;    succ:       31 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       28 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.54283 => __y_155
  # DEBUG __xD.53214 => __y_155
  # DEBUG thisD.53215 => __y_155
  # DEBUG D#174ptD.0 => &__y_155->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.54285 => D#174ptD.0
  # DEBUG thisD.54284 => D#173ptD.0
  # DEBUG D#336ptD.0 => &MEM[(const struct pairD.37146 &)__y_155 + 32].firstD.42483
  # DEBUG D#338ptD.0 => &MEM[(const struct _Rb_treeD.41462 *)D#345ptD.0]._M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#338ptD.0
  # DEBUG D#96ptD.0 => &inD.42533
  # VUSE <.MEM_124>
  _62 = MEM[(const intD.9 &)__y_155 + 32];
  # DEBUG D#97ptD.0 => D#336ptD.0
  # DEBUG thisD.54281 => D#95ptD.0
  # DEBUG __xD.54280 => D#96ptD.0
  # DEBUG __yD.54279 => D#97ptD.0
  if (in.103_5 < _62)
    goto <bb 31>;
  else
    goto <bb 30>;
;;    succ:       31 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of incoming frequencies 383, should be 0
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_42 = VDEF <.MEM_124>
  # USE = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  # CLB = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  __assert_failD.14402 ("_out_req[out].count(in) == 0", "allocators/allocator.cpp", 322, &_ZZN15SparseAllocator10AddRequestEiiiiiE19__PRETTY_FUNCTION__D.42541);
;;    succ:      

;;   basic block 31, loop depth 0, count 0, freq 899, maybe hot
;;   Invalid sum of incoming frequencies 518, should be 899
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       28 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#760ptD.0 => &this_6(D)->_in_reqD.37895
  # DEBUG D#85ptD.0 => D#760ptD.0
  # DEBUG __nD.61614 => _13
  # DEBUG thisD.61615 => D#85ptD.0
  # DEBUG thisD.61610 => NULL
  # VUSE <.MEM_124>
  _69 = MEM[(long unsigned intD.14 *)_54 + 40B];
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.61611 => D#93ptD.0
  if (_69 == 0)
    goto <bb 32>;
  else
    goto <bb 33>;
;;    succ:       32 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 261, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       31 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#761ptD.0 => &this_6(D)->_in_occD.37144
  # DEBUG thisD.61617 => D#761ptD.0
  # DEBUG __xD.61618 => &inD.42533
  # PT = nonlocal 
  _70 = &MEM[(struct setD.36306 *)this_6(D) + 160B]._M_tD.36318;
  # .MEM_78 = VDEF <.MEM_124>
  # USE = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  # CLB = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  __pD.61619 = _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueERKiD.36754 (_70, &inD.42533);
  # DEBUG thisD.61621 => NULL
  # DEBUG __itD.61620 => &__pD.61619.firstD.43973
  # DEBUG D#779ptD.0 => MEM[(const struct iteratorD.42550 &)&__pD.61619]._M_nodeD.44008
  # DEBUG thisD.61624 => NULL
  # DEBUG __aD.61623 => NULL
  # DEBUG __bD.61622 => &__pD.61619.secondD.44020
  # DEBUG D#778ptD.0 => MEM[(const boolD.2757 &)&__pD.61619 + 8]
  # DEBUG D#777ptD.0 => VIEW_CONVERT_EXPR<unsigned char>(D#778ptD.0)
  # .MEM_81 = VDEF <.MEM_78>
  __pD.61619 ={v} {CLOBBER};
  # DEBUG D.61650 => D#779ptD.0
  # DEBUG D.61651 => D#777ptD.0
  # VUSE <.MEM_81>
  pretmp_152 = outD.42534;
  pretmp_154 = (long unsigned intD.14) pretmp_152;
  # VUSE <.MEM_81>
  pretmp_153 = MEM[(struct mapD.37148 * *)this_6(D) + 280B];
  pretmp_166 = pretmp_154 * 48;
  pretmp_109 = pretmp_153 + pretmp_166;
;;    succ:       33 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       31 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_124(31), .MEM_81(32)>
  # prephitmp_165 = PHI <out.102_4(31), pretmp_152(32)>
  # PT = nonlocal escaped 
  # prephitmp_142 = PHI <_68(31), pretmp_109(32)>
  # DEBUG D#916ptD.0 => outD.42534
  # DEBUG D#762ptD.0 => &this_6(D)->_out_reqD.37896
  # DEBUG D#85ptD.0 => D#762ptD.0
  # DEBUG __nD.61630 => (long unsigned intD.14) D#916ptD.0
  # DEBUG thisD.61631 => D#85ptD.0
  # DEBUG thisD.61626 => NULL
  # VUSE <.MEM_1>
  _22 = MEM[(long unsigned intD.14 *)prephitmp_142 + 40B];
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.61627 => D#93ptD.0
  if (_22 == 0)
    goto <bb 34>;
  else
    goto <bb 35>;
;;    succ:       34 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       33 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#763ptD.0 => &this_6(D)->_out_occD.37145
  # DEBUG thisD.61633 => D#763ptD.0
  # DEBUG __xD.61634 => &outD.42534
  # PT = nonlocal 
  _73 = &MEM[(struct setD.36306 *)this_6(D) + 208B]._M_tD.36318;
  # .MEM_82 = VDEF <.MEM_1>
  # USE = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  # CLB = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  __pD.61635 = _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueERKiD.36754 (_73, &outD.42534);
  # DEBUG thisD.61637 => NULL
  # DEBUG __itD.61636 => &__pD.61635.firstD.43973
  # DEBUG D#776ptD.0 => MEM[(const struct iteratorD.42550 &)&__pD.61635]._M_nodeD.44008
  # DEBUG thisD.61640 => NULL
  # DEBUG __aD.61639 => NULL
  # DEBUG __bD.61638 => &__pD.61635.secondD.44020
  # DEBUG D#775ptD.0 => MEM[(const boolD.2757 &)&__pD.61635 + 8]
  # DEBUG D#774ptD.0 => VIEW_CONVERT_EXPR<unsigned char>(D#775ptD.0)
  # .MEM_85 = VDEF <.MEM_82>
  __pD.61635 ={v} {CLOBBER};
  # DEBUG D.61652 => D#776ptD.0
  # DEBUG D.61653 => D#774ptD.0
  # VUSE <.MEM_85>
  pretmp_41 = outD.42534;
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       33 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                34 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2 = PHI <.MEM_1(33), .MEM_85(34)>
  # prephitmp_156 = PHI <prephitmp_165(33), pretmp_41(34)>
  # DEBUG D#915ptD.0 => outD.42534
  # DEBUG req$portD.61654 => D#915ptD.0
  # DEBUG req$labelD.61655 => label_8(D)
  # DEBUG req$in_priD.61656 => in_pri_9(D)
  # DEBUG req$out_priD.61657 => out_pri_10(D)
  # VUSE <.MEM_2>
  in.103_29 = inD.42533;
  # RANGE ~[2147483648, 18446744071562067967]
  _30 = (long unsigned intD.14) in.103_29;
  # DEBUG D#764ptD.0 => &this_6(D)->_in_reqD.37895
  # VUSE <.MEM_2>
  # PT = nonlocal escaped 
  _47 = MEM[(struct mapD.37148 * *)this_6(D) + 256B];
  # DEBUG D#85ptD.0 => D#764ptD.0
  # DEBUG __nD.61643 => _30
  # DEBUG thisD.61644 => D#85ptD.0
  # RANGE [0, 18446744073709551568] NONZERO 18446744073709551600
  _74 = _30 * 48;
  # PT = nonlocal escaped 
  _75 = _47 + _74;
  # DEBUG thisD.64639 => _75
  # DEBUG __kD.64640 => &outD.42534
  # DEBUG thisD.64653 => _75
  # DEBUG __xD.64652 => &outD.42534
  # DEBUG D#350ptD.0 => &_75->_M_tD.41463
  # DEBUG thisD.64655 => D#350ptD.0
  # DEBUG __kD.64654 => &outD.42534
  # DEBUG thisD.64656 => D#350ptD.0
  # PT = nonlocal escaped 
  __i$_M_node_40 = &MEM[(struct _Rb_treeD.41462 *)_75]._M_implD.41540._M_headerD.41695;
  # VUSE <.MEM_2>
  # PT = nonlocal escaped 
  __i$_M_node_106 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_75 + 16B];
  # DEBUG D#91ptD.0 => D#350ptD.0
  # DEBUG thisD.54424 => D#91ptD.0
  # DEBUG D#349ptD.0 => D#350ptD.0
  # DEBUG __xD.64660 => NULL
  # DEBUG __yD.64659 => NULL
  # DEBUG __kD.64658 => &outD.42534
  # DEBUG __yD.64659 => __i$_M_node_40
  # DEBUG __xD.64660 => __i$_M_node_106
  if (__i$_M_node_106 == 0B)
    goto <bb 54>;
  else
    goto <bb 38>;
;;    succ:       54 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 36, loop depth 1, count 0, freq 9093, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       40 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_51 = PHI <__i$_M_node_110(40), __i$_M_node_111(41)>
  # PT = nonlocal escaped 
  # __i$_M_node_52 = PHI <__i$_M_node_115(40), __i$_M_node_98(41)>
  # DEBUG __yD.64659 => __i$_M_node_52
  # DEBUG __xD.64660 => __i$_M_node_51
  if (__i$_M_node_51 == 0B)
    goto <bb 42>;
  else
    goto <bb 37>;
;;    succ:       42 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 37, loop depth 1, count 0, freq 8275, maybe hot
;;    prev block 36, next block 38, flags: (NEW)
;;    pred:       36 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 39>;
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       35 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 1, count 0, freq 9093, maybe hot
;;    prev block 38, next block 40, flags: (NEW)
;;    pred:       38 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_115 = PHI <__i$_M_node_106(38), __i$_M_node_51(37)>
  # PT = nonlocal escaped 
  # __i$_M_node_98 = PHI <__i$_M_node_40(38), __i$_M_node_52(37)>
  # DEBUG __yD.64659 => __i$_M_node_98
  # DEBUG __xD.64660 => __i$_M_node_115
  # DEBUG __xD.54403 => __i$_M_node_115
  # DEBUG __xD.54209 => __i$_M_node_115
  # DEBUG thisD.54210 => __i$_M_node_115
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__i$_M_node_115]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54405 => D#331ptD.0
  # DEBUG thisD.54404 => D#173ptD.0
  # DEBUG D#346ptD.0 => &MEM[(const struct pairD.37146 &)__i$_M_node_115 + 32].firstD.42483
  # DEBUG D#347ptD.0 => &D#348ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#347ptD.0
  # VUSE <.MEM_2>
  _108 = MEM[(const intD.9 &)__i$_M_node_115 + 32];
  # DEBUG D#96ptD.0 => D#346ptD.0
  # DEBUG D#97ptD.0 => &outD.42534
  # DEBUG thisD.54406 => D#95ptD.0
  # DEBUG __xD.54407 => D#96ptD.0
  # DEBUG __yD.54408 => D#97ptD.0
  if (_108 >= prephitmp_156)
    goto <bb 40>;
  else
    goto <bb 41>;
;;    succ:       40 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                41 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 1, count 0, freq 4546, maybe hot
;;    prev block 39, next block 41, flags: (NEW, REACHABLE)
;;    pred:       39 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.64659 => __i$_M_node_115
  # VUSE <.MEM_2>
  # PT = nonlocal escaped 
  __i$_M_node_110 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_115 + 16B];
  # DEBUG D#108ptD.0 => __i$_M_node_115
  # DEBUG __xD.54402 => D#108ptD.0
  # DEBUG __xD.64660 => NULL
  goto <bb 36>;
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 41, loop depth 1, count 0, freq 4546, maybe hot
;;    prev block 40, next block 42, flags: (NEW, REACHABLE)
;;    pred:       39 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2>
  # PT = nonlocal escaped 
  __i$_M_node_111 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_115 + 24B];
  # DEBUG D#107ptD.0 => __i$_M_node_115
  # DEBUG __xD.54401 => D#107ptD.0
  # DEBUG __xD.64660 => NULL
  goto <bb 36>;
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       36 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_161 = PHI <__i$_M_node_52(36)>
  # DEBUG thisD.54400 => NULL
  # DEBUG __xD.54399 => __i$_M_node_161
  # DEBUG __i$_M_nodeD.64663 => __i$_M_node_161
  # DEBUG thisD.61519 => _75
  # DEBUG D#176ptD.0 => &_75->_M_tD.41463
  # DEBUG thisD.61520 => D#176ptD.0
  # DEBUG thisD.53244 => NULL
  # DEBUG __xD.53243 => __i$_M_node_40
  # DEBUG thisD.61516 => &__iD.64641
  # DEBUG __xD.61517 => NULL
  if (__i$_M_node_40 == __i$_M_node_161)
    goto <bb 54>;
  else
    goto <bb 43>;
;;    succ:       54 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                43 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 43, loop depth 0, count 0, freq 764, maybe hot
;;    prev block 42, next block 44, flags: (NEW, REACHABLE)
;;    pred:       42 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.61543 => &__iD.64641
  # DEBUG thisD.61544 => __i$_M_node_161
  # DEBUG D#753ptD.0 => &MEM[(struct _Rb_tree_nodeD.41466 *)__i$_M_node_161]._M_value_fieldD.43957
  # DEBUG __rD.53249 => D#753ptD.0
  # DEBUG D#754ptD.0 => &MEM[(struct pairD.37146 &)__i$_M_node_161 + 32].firstD.42483
  # DEBUG D#131ptD.0 => _75
  # DEBUG thisD.61540 => D#131ptD.0
  # DEBUG D#130ptD.0 => D#131ptD.0
  # DEBUG D#129ptD.0 => &D#130ptD.0->_M_tD.41463
  # DEBUG D#128ptD.0 => D#129ptD.0
  # DEBUG thisD.52957 => D#128ptD.0
  # DEBUG D#96ptD.0 => &outD.42534
  # VUSE <.MEM_2>
  _114 = MEM[(const intD.9 &)__i$_M_node_161 + 32];
  # DEBUG D#97ptD.0 => D#754ptD.0
  # DEBUG thisD.61538 => D#95ptD.0
  # DEBUG __xD.61537 => D#96ptD.0
  # DEBUG __yD.61536 => D#97ptD.0
  if (_114 > prephitmp_156)
    goto <bb 54>;
  else
    goto <bb 44>;
;;    succ:       54 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 44, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 43, next block 45, flags: (NEW, REACHABLE)
;;    pred:       43 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                54 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_119 = PHI <__i$_M_node_161(43), __i$_M_node_118(54)>
  # .MEM_33 = PHI <.MEM_2(43), .MEM_132(54)>
  # prephitmp_34 = PHI <in.103_29(43), pretmp_163(54)>
  # prephitmp_92 = PHI <prephitmp_156(43), pretmp_116(54)>
  # DEBUG __i$_M_nodeD.64663 => __i$_M_node_119
  # DEBUG thisD.61561 => &__iD.64641
  # DEBUG thisD.61562 => __i$_M_node_119
  # DEBUG D#755ptD.0 => &MEM[(struct _Rb_tree_nodeD.41466 *)__i$_M_node_119]._M_value_fieldD.43957
  # DEBUG __rD.53249 => D#755ptD.0
  # DEBUG D#757ptD.0 => {CLOBBER}
  # DEBUG __i$_M_nodeD.64663 => D#757ptD.0
  # .MEM_28 = VDEF <.MEM_33>
  MEM[(struct mapped_typeD.41247 *)__i$_M_node_119 + 36B] = prephitmp_156;
  # .MEM_86 = VDEF <.MEM_28>
  MEM[(struct mapped_typeD.41247 *)__i$_M_node_119 + 40B] = label_8(D);
  # .MEM_84 = VDEF <.MEM_86>
  MEM[(struct mapped_typeD.41247 *)__i$_M_node_119 + 44B] = in_pri_9(D);
  # .MEM_83 = VDEF <.MEM_84>
  MEM[(struct mapped_typeD.41247 *)__i$_M_node_119 + 48B] = out_pri_10(D);
  # DEBUG D#914ptD.0 => inD.42533
  # DEBUG req$portD.61654 => D#914ptD.0
  # RANGE ~[2147483648, 18446744071562067967]
  _37 = (long unsigned intD.14) prephitmp_92;
  # DEBUG D#765ptD.0 => &this_6(D)->_out_reqD.37896
  # VUSE <.MEM_83>
  # PT = nonlocal escaped 
  _48 = MEM[(struct mapD.37148 * *)this_6(D) + 280B];
  # DEBUG D#85ptD.0 => D#765ptD.0
  # DEBUG __nD.61647 => _37
  # DEBUG thisD.61648 => D#85ptD.0
  # RANGE [0, 18446744073709551568] NONZERO 18446744073709551600
  _76 = _37 * 48;
  # PT = nonlocal escaped 
  _77 = _48 + _76;
  # DEBUG thisD.64612 => _77
  # DEBUG __kD.64613 => &inD.42533
  # DEBUG thisD.64626 => _77
  # DEBUG __xD.64625 => &inD.42533
  # DEBUG D#350ptD.0 => &_77->_M_tD.41463
  # DEBUG thisD.64628 => D#350ptD.0
  # DEBUG __kD.64627 => &inD.42533
  # DEBUG thisD.64629 => D#350ptD.0
  # PT = nonlocal escaped 
  __i$_M_node_11 = &MEM[(struct _Rb_treeD.41462 *)_77]._M_implD.41540._M_headerD.41695;
  # VUSE <.MEM_83>
  # PT = nonlocal escaped 
  __i$_M_node_89 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_77 + 16B];
  # DEBUG D#91ptD.0 => D#350ptD.0
  # DEBUG thisD.54424 => D#91ptD.0
  # DEBUG D#349ptD.0 => D#350ptD.0
  # DEBUG __xD.64633 => NULL
  # DEBUG __yD.64632 => NULL
  # DEBUG __kD.64631 => &inD.42533
  # DEBUG __yD.64632 => __i$_M_node_11
  # DEBUG __xD.64633 => __i$_M_node_89
  if (__i$_M_node_89 == 0B)
    goto <bb 55>;
  else
    goto <bb 47>;
;;    succ:       55 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 45, loop depth 1, count 0, freq 9093, maybe hot
;;    prev block 44, next block 46, flags: (NEW, REACHABLE)
;;    pred:       49 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                50 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_65 = PHI <__i$_M_node_93(49), __i$_M_node_94(50)>
  # PT = nonlocal escaped 
  # __i$_M_node_66 = PHI <__i$_M_node_170(49), __i$_M_node_160(50)>
  # DEBUG __yD.64632 => __i$_M_node_66
  # DEBUG __xD.64633 => __i$_M_node_65
  if (__i$_M_node_65 == 0B)
    goto <bb 51>;
  else
    goto <bb 46>;
;;    succ:       51 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                46 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 46, loop depth 1, count 0, freq 8275, maybe hot
;;    prev block 45, next block 47, flags: (NEW)
;;    pred:       45 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 48>;
;;    succ:       48 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 47, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 46, next block 48, flags: (NEW, REACHABLE)
;;    pred:       44 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       48 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 48, loop depth 1, count 0, freq 9093, maybe hot
;;    prev block 47, next block 49, flags: (NEW)
;;    pred:       47 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                46 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_170 = PHI <__i$_M_node_89(47), __i$_M_node_65(46)>
  # PT = nonlocal escaped 
  # __i$_M_node_160 = PHI <__i$_M_node_11(47), __i$_M_node_66(46)>
  # DEBUG __yD.64632 => __i$_M_node_160
  # DEBUG __xD.64633 => __i$_M_node_170
  # DEBUG __xD.54403 => __i$_M_node_170
  # DEBUG __xD.54209 => __i$_M_node_170
  # DEBUG thisD.54210 => __i$_M_node_170
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__i$_M_node_170]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54405 => D#331ptD.0
  # DEBUG thisD.54404 => D#173ptD.0
  # DEBUG D#346ptD.0 => &MEM[(const struct pairD.37146 &)__i$_M_node_170 + 32].firstD.42483
  # DEBUG D#347ptD.0 => &D#348ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#347ptD.0
  # VUSE <.MEM_83>
  _91 = MEM[(const intD.9 &)__i$_M_node_170 + 32];
  # DEBUG D#96ptD.0 => D#346ptD.0
  # DEBUG D#97ptD.0 => &inD.42533
  # DEBUG thisD.54406 => D#95ptD.0
  # DEBUG __xD.54407 => D#96ptD.0
  # DEBUG __yD.54408 => D#97ptD.0
  if (prephitmp_34 <= _91)
    goto <bb 49>;
  else
    goto <bb 50>;
;;    succ:       49 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                50 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 49, loop depth 1, count 0, freq 4546, maybe hot
;;    prev block 48, next block 50, flags: (NEW, REACHABLE)
;;    pred:       48 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.64632 => __i$_M_node_170
  # VUSE <.MEM_83>
  # PT = nonlocal escaped 
  __i$_M_node_93 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_170 + 16B];
  # DEBUG D#108ptD.0 => __i$_M_node_170
  # DEBUG __xD.54402 => D#108ptD.0
  # DEBUG __xD.64633 => NULL
  goto <bb 45>;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 50, loop depth 1, count 0, freq 4546, maybe hot
;;    prev block 49, next block 51, flags: (NEW, REACHABLE)
;;    pred:       48 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_83>
  # PT = nonlocal escaped 
  __i$_M_node_94 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_170 + 24B];
  # DEBUG D#107ptD.0 => __i$_M_node_170
  # DEBUG __xD.54401 => D#107ptD.0
  # DEBUG __xD.64633 => NULL
  goto <bb 45>;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 51, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 50, next block 52, flags: (NEW, REACHABLE)
;;    pred:       45 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_158 = PHI <__i$_M_node_66(45)>
  # DEBUG thisD.54400 => NULL
  # DEBUG __xD.54399 => __i$_M_node_158
  # DEBUG __i$_M_nodeD.64636 => __i$_M_node_158
  # DEBUG thisD.61519 => _77
  # DEBUG D#176ptD.0 => &_77->_M_tD.41463
  # DEBUG thisD.61520 => D#176ptD.0
  # DEBUG thisD.53244 => NULL
  # DEBUG __xD.53243 => __i$_M_node_11
  # DEBUG thisD.61516 => &__iD.64614
  # DEBUG __xD.61517 => NULL
  if (__i$_M_node_11 == __i$_M_node_158)
    goto <bb 55>;
  else
    goto <bb 52>;
;;    succ:       55 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                52 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 52, loop depth 0, count 0, freq 764, maybe hot
;;    prev block 51, next block 53, flags: (NEW, REACHABLE)
;;    pred:       51 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.61543 => &__iD.64614
  # DEBUG thisD.61544 => __i$_M_node_158
  # DEBUG D#753ptD.0 => &MEM[(struct _Rb_tree_nodeD.41466 *)__i$_M_node_158]._M_value_fieldD.43957
  # DEBUG __rD.53249 => D#753ptD.0
  # DEBUG D#754ptD.0 => &MEM[(struct pairD.37146 &)__i$_M_node_158 + 32].firstD.42483
  # DEBUG D#131ptD.0 => _77
  # DEBUG thisD.61540 => D#131ptD.0
  # DEBUG D#130ptD.0 => D#131ptD.0
  # DEBUG D#129ptD.0 => &D#130ptD.0->_M_tD.41463
  # DEBUG D#128ptD.0 => D#129ptD.0
  # DEBUG thisD.52957 => D#128ptD.0
  # DEBUG D#96ptD.0 => &inD.42533
  # VUSE <.MEM_83>
  _97 = MEM[(const intD.9 &)__i$_M_node_158 + 32];
  # DEBUG D#97ptD.0 => D#754ptD.0
  # DEBUG thisD.61538 => D#95ptD.0
  # DEBUG __xD.61537 => D#96ptD.0
  # DEBUG __yD.61536 => D#97ptD.0
  if (prephitmp_34 < _97)
    goto <bb 55>;
  else
    goto <bb 53>;
;;    succ:       55 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                53 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 53, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 52, next block 54, flags: (NEW, REACHABLE)
;;    pred:       52 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                55 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_102 = PHI <__i$_M_node_158(52), __i$_M_node_101(55)>
  # .MEM_123 = PHI <.MEM_83(52), .MEM_141(55)>
  # DEBUG __i$_M_nodeD.64636 => __i$_M_node_102
  # DEBUG thisD.61561 => &__iD.64614
  # DEBUG thisD.61562 => __i$_M_node_102
  # DEBUG D#755ptD.0 => &MEM[(struct _Rb_tree_nodeD.41466 *)__i$_M_node_102]._M_value_fieldD.43957
  # DEBUG __rD.53249 => D#755ptD.0
  # DEBUG D#757ptD.0 => {CLOBBER}
  # DEBUG __i$_M_nodeD.64636 => D#757ptD.0
  # .MEM_80 = VDEF <.MEM_123>
  MEM[(struct mapped_typeD.41247 *)__i$_M_node_102 + 36B] = prephitmp_34;
  # .MEM_79 = VDEF <.MEM_80>
  MEM[(struct mapped_typeD.41247 *)__i$_M_node_102 + 40B] = label_8(D);
  # .MEM_38 = VDEF <.MEM_79>
  MEM[(struct mapped_typeD.41247 *)__i$_M_node_102 + 44B] = in_pri_9(D);
  # .MEM_31 = VDEF <.MEM_38>
  MEM[(struct mapped_typeD.41247 *)__i$_M_node_102 + 48B] = out_pri_10(D);
  # DEBUG D#766ptD.0 => {CLOBBER}
  # DEBUG req$portD.61654 => D#766ptD.0
  # DEBUG D#767ptD.0 => {CLOBBER}
  # DEBUG req$labelD.61655 => D#767ptD.0
  # DEBUG D#768ptD.0 => {CLOBBER}
  # DEBUG req$in_priD.61656 => D#768ptD.0
  # DEBUG D#769ptD.0 => {CLOBBER}
  # DEBUG req$out_priD.61657 => D#769ptD.0
  # VUSE <.MEM_31>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 54, loop depth 0, count 0, freq 517, maybe hot
;;    prev block 53, next block 55, flags: (NEW, REACHABLE)
;;    pred:       43 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                42 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_147 = PHI <__i$_M_node_161(43), __i$_M_node_161(42), __i$_M_node_40(35)>
  # DEBUG thisD.64644 => &D.64665
  # DEBUG __aD.64643 => &outD.42534
  # DEBUG __bD.64642 => NULL
  # .MEM_125 = VDEF <.MEM_2>
  D.64665.firstD.42483 = prephitmp_156;
  # .MEM_126 = VDEF <.MEM_125>
  MEM[(struct pairD.37146 *)&D.64665 + 4B] = 0;
  # .MEM_127 = VDEF <.MEM_126>
  MEM[(struct pairD.37146 *)&D.64665 + 8B] = 0;
  # .MEM_128 = VDEF <.MEM_127>
  MEM[(struct pairD.37146 *)&D.64665 + 12B] = 0;
  # .MEM_129 = VDEF <.MEM_128>
  MEM[(struct pairD.37146 *)&D.64665 + 16B] = 0;
  # DEBUG thisD.64647 => _75
  # DEBUG __position$_M_nodeD.61574 => __i$_M_node_147
  # DEBUG __xD.64645 => &D.64665
  # DEBUG thisD.61550 => NULL
  # DEBUG __itD.61549 => &__positionD.64646
  # PT = nonlocal escaped 
  _117 = &_75->_M_tD.41463;
  # DEBUG thisD.64650 => _117
  # .MEM_130 = VDEF <.MEM_129>
  MEM[(struct _Rb_tree_const_iteratorD.41769 *)&__posD.64649] = __i$_M_node_147;
  # DEBUG __xD.64648 => &D.64665
  # DEBUG thisD.61510 => &__anD.64651
  # DEBUG __tD.61509 => _117
  # DEBUG __an$_M_tD.61503 => _117
  # DEBUG D#752ptD.0 => &__anD.64651
  # .MEM_131 = VDEF <.MEM_130>
  # USE = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  # CLB = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  D.64664 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE17_M_insert_unique_INSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_ERKS4_RT_.isra.197.constprop.200D.62239 (_117, __posD.64649, &D.64665);
  # VUSE <.MEM_131>
  # PT = nonlocal escaped 
  __i$_M_node_118 = MEM[(struct _Rb_tree_iteratorD.41767 *)&D.64664];
  # DEBUG __i$_M_nodeD.64663 => __i$_M_node_118
  # .MEM_132 = VDEF <.MEM_131>
  D.64665 ={v} {CLOBBER};
  # VUSE <.MEM_132>
  pretmp_163 = inD.42533;
  # VUSE <.MEM_132>
  pretmp_116 = outD.42534;
  goto <bb 44>;
;;    succ:       44 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 55, loop depth 0, count 0, freq 517, maybe hot
;;    prev block 54, next block 1, flags: (NEW, REACHABLE)
;;    pred:       52 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                51 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_49 = PHI <__i$_M_node_158(52), __i$_M_node_158(51), __i$_M_node_11(44)>
  # DEBUG thisD.64617 => &D.64638
  # DEBUG __aD.64616 => &inD.42533
  # DEBUG __bD.64615 => NULL
  # .MEM_134 = VDEF <.MEM_83>
  D.64638.firstD.42483 = prephitmp_34;
  # .MEM_135 = VDEF <.MEM_134>
  MEM[(struct pairD.37146 *)&D.64638 + 4B] = 0;
  # .MEM_136 = VDEF <.MEM_135>
  MEM[(struct pairD.37146 *)&D.64638 + 8B] = 0;
  # .MEM_137 = VDEF <.MEM_136>
  MEM[(struct pairD.37146 *)&D.64638 + 12B] = 0;
  # .MEM_138 = VDEF <.MEM_137>
  MEM[(struct pairD.37146 *)&D.64638 + 16B] = 0;
  # DEBUG thisD.64620 => _77
  # DEBUG __position$_M_nodeD.61574 => __i$_M_node_49
  # DEBUG __xD.64618 => &D.64638
  # DEBUG thisD.61550 => NULL
  # DEBUG __itD.61549 => &__positionD.64619
  # PT = nonlocal escaped 
  _100 = &_77->_M_tD.41463;
  # DEBUG thisD.64623 => _100
  # .MEM_139 = VDEF <.MEM_138>
  MEM[(struct _Rb_tree_const_iteratorD.41769 *)&__posD.64622] = __i$_M_node_49;
  # DEBUG __xD.64621 => &D.64638
  # DEBUG thisD.61510 => &__anD.64624
  # DEBUG __tD.61509 => _100
  # DEBUG __an$_M_tD.61503 => _100
  # DEBUG D#752ptD.0 => &__anD.64624
  # .MEM_140 = VDEF <.MEM_139>
  # USE = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  # CLB = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  D.64637 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE17_M_insert_unique_INSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_ERKS4_RT_.isra.197.constprop.200D.62239 (_100, __posD.64622, &D.64638);
  # VUSE <.MEM_140>
  # PT = nonlocal escaped 
  __i$_M_node_101 = MEM[(struct _Rb_tree_iteratorD.41767 *)&D.64637];
  # DEBUG __i$_M_nodeD.64636 => __i$_M_node_101
  # .MEM_141 = VDEF <.MEM_140>
  D.64638 ={v} {CLOBBER};
  goto <bb 53>;
;;    succ:       53 [100.0%]  (FALLTHRU,EXECUTABLE)

}


Creating dr for out
analyze_innermost: success.
	base_address: &out
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: out
Creating dr for in
analyze_innermost: success.
	base_address: &in
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: in
Creating dr for MEM[(struct Allocator *)this_6(D)]._inputs
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(struct Allocator *)this_6(D)]
	Access function 0: 768
Creating dr for MEM[(struct Allocator *)this_6(D)]._outputs
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 100
	step: 0
	aligned to: 256
	base_object: MEM[(struct Allocator *)this_6(D)]
	Access function 0: 800
Creating dr for MEM[(struct Allocator *)this_6(D)]._dirty
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 104
	step: 0
	aligned to: 256
	base_object: MEM[(struct Allocator *)this_6(D)]
	Access function 0: 832
Creating dr for MEM[(struct map * *)this_6(D) + 256B]
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_6(D) + 256B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_54 + 16B]
analyze_innermost: success.
	base_address: _44 + (long unsigned int) in.103_5 * 48
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)_54 + 16B]
Creating dr for MEM[(const int &)__y_7 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_7 + 32]
Creating dr for MEM[(const int &)__y_7 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_7 + 32]
Creating dr for MEM[(const int &)__y_7 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_7 + 32]
Creating dr for MEM[(const int &)__y_7 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_7 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_7 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_7 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_7 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_7 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_7 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_7 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_7 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_7 + 24B]
Creating dr for MEM[(const int &)__y_7 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_7 + 32]
Creating dr for MEM[(const int &)__y_7 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_7 + 32]
Creating dr for MEM[(const int &)__y_7 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_7 + 32]
Creating dr for MEM[(const int &)__y_7 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_7 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_7 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_7 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_7 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_7 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_7 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_7 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_7 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_7 + 24B]
Applying pattern match.pd:750, generic-match.c:1467
Applying pattern match.pd:397, generic-match.c:4039
Creating dr for MEM[(const int &)__y_157 + 32]
analyze_innermost: success.
	base_address: __y_157
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__y_157 + 32]
Creating dr for MEM[(struct map * *)this_6(D) + 280B]
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 280
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_6(D) + 280B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_68 + 16B]
analyze_innermost: success.
	base_address: _45 + (long unsigned int) out.102_4 * 48
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)_68 + 16B]
Creating dr for MEM[(const int &)__y_120 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_120 + 32]
Creating dr for MEM[(const int &)__y_120 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_120 + 32]
Creating dr for MEM[(const int &)__y_120 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_120 + 32]
Creating dr for MEM[(const int &)__y_120 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_120 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_120 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_120 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_120 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_120 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_120 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_120 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_120 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_120 + 24B]
Creating dr for MEM[(const int &)__y_120 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_120 + 32]
Creating dr for MEM[(const int &)__y_120 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_120 + 32]
Creating dr for MEM[(const int &)__y_120 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_120 + 32]
Creating dr for MEM[(const int &)__y_120 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__y_120 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_120 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_120 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_120 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_120 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_120 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_120 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__y_120 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__y_120 + 24B]
Applying pattern match.pd:750, generic-match.c:1467
Applying pattern match.pd:397, generic-match.c:4039
Creating dr for MEM[(const int &)__y_155 + 32]
analyze_innermost: success.
	base_address: __y_155
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__y_155 + 32]
Creating dr for MEM[(long unsigned int *)_54 + 40B]
analyze_innermost: success.
	base_address: _44 + (long unsigned int) in.103_5 * 48
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(long unsigned int *)_54 + 40B]
Creating dr for MEM[(long unsigned int *)prephitmp_142 + 40B]
analyze_innermost: success.
	base_address: prephitmp_142
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(long unsigned int *)prephitmp_142 + 40B]
Creating dr for in
analyze_innermost: success.
	base_address: &in
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: in
Creating dr for MEM[(struct map * *)this_6(D) + 256B]
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_6(D) + 256B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_75 + 16B]
analyze_innermost: success.
	base_address: _47 + (long unsigned int) in.103_29 * 48
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)_75 + 16B]
Creating dr for MEM[(const int &)__i$_M_node_115 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_115 + 32]
Creating dr for MEM[(const int &)__i$_M_node_115 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_115 + 32]
Creating dr for MEM[(const int &)__i$_M_node_115 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_115 + 32]
Creating dr for MEM[(const int &)__i$_M_node_115 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_115 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_115 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_115 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_115 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_115 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_115 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_115 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_115 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_115 + 24B]
Creating dr for MEM[(const int &)__i$_M_node_115 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_115 + 32]
Creating dr for MEM[(const int &)__i$_M_node_115 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_115 + 32]
Creating dr for MEM[(const int &)__i$_M_node_115 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_115 + 32]
Creating dr for MEM[(const int &)__i$_M_node_115 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_115 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_115 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_115 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_115 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_115 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_115 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_115 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_115 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_115 + 24B]
Applying pattern match.pd:750, generic-match.c:1467
Applying pattern match.pd:397, generic-match.c:4039
Creating dr for MEM[(const int &)__i$_M_node_161 + 32]
analyze_innermost: success.
	base_address: __i$_M_node_161
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__i$_M_node_161 + 32]
Creating dr for D.64665.first
analyze_innermost: success.
	base_address: &D.64665
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.64665]
	Access function 0: 0
Creating dr for MEM[(struct pair *)&D.64665 + 4B]
analyze_innermost: success.
	base_address: &D.64665
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.64665 + 4B]
Creating dr for MEM[(struct pair *)&D.64665 + 8B]
analyze_innermost: success.
	base_address: &D.64665
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.64665 + 8B]
Creating dr for MEM[(struct pair *)&D.64665 + 12B]
analyze_innermost: success.
	base_address: &D.64665
	offset from base address: 0
	constant offset from base address: 12
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.64665 + 12B]
Creating dr for MEM[(struct pair *)&D.64665 + 16B]
analyze_innermost: success.
	base_address: &D.64665
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.64665 + 16B]
Creating dr for MEM[(struct _Rb_tree_const_iterator *)&__pos]
analyze_innermost: success.
	base_address: &__pos
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_const_iterator *)&__pos]
Creating dr for MEM[(struct mapped_type *)__i$_M_node_119 + 36B]
analyze_innermost: success.
	base_address: __i$_M_node_119
	offset from base address: 0
	constant offset from base address: 36
	step: 0
	aligned to: 256
	base_object: MEM[(struct mapped_type *)__i$_M_node_119 + 36B]
Creating dr for MEM[(struct mapped_type *)__i$_M_node_119 + 40B]
analyze_innermost: success.
	base_address: __i$_M_node_119
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(struct mapped_type *)__i$_M_node_119 + 40B]
Creating dr for MEM[(struct mapped_type *)__i$_M_node_119 + 44B]
analyze_innermost: success.
	base_address: __i$_M_node_119
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: MEM[(struct mapped_type *)__i$_M_node_119 + 44B]
Creating dr for MEM[(struct mapped_type *)__i$_M_node_119 + 48B]
analyze_innermost: success.
	base_address: __i$_M_node_119
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: MEM[(struct mapped_type *)__i$_M_node_119 + 48B]
Creating dr for MEM[(struct map * *)this_6(D) + 280B]
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 280
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_6(D) + 280B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_77 + 16B]
analyze_innermost: success.
	base_address: _48 + (long unsigned int) prephitmp_92 * 48
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)_77 + 16B]
Creating dr for MEM[(const int &)__i$_M_node_170 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_170 + 32]
Creating dr for MEM[(const int &)__i$_M_node_170 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_170 + 32]
Creating dr for MEM[(const int &)__i$_M_node_170 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_170 + 32]
Creating dr for MEM[(const int &)__i$_M_node_170 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_170 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_170 + 24B]
Creating dr for MEM[(const int &)__i$_M_node_170 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_170 + 32]
Creating dr for MEM[(const int &)__i$_M_node_170 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_170 + 32]
Creating dr for MEM[(const int &)__i$_M_node_170 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_170 + 32]
Creating dr for MEM[(const int &)__i$_M_node_170 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_170 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_170 + 24B]
Applying pattern match.pd:750, generic-match.c:1467
Applying pattern match.pd:397, generic-match.c:4039
Creating dr for MEM[(const int &)__i$_M_node_158 + 32]
analyze_innermost: success.
	base_address: __i$_M_node_158
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__i$_M_node_158 + 32]
Creating dr for D.64638.first
analyze_innermost: success.
	base_address: &D.64638
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.64638]
	Access function 0: 0
Creating dr for MEM[(struct pair *)&D.64638 + 4B]
analyze_innermost: success.
	base_address: &D.64638
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.64638 + 4B]
Creating dr for MEM[(struct pair *)&D.64638 + 8B]
analyze_innermost: success.
	base_address: &D.64638
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.64638 + 8B]
Creating dr for MEM[(struct pair *)&D.64638 + 12B]
analyze_innermost: success.
	base_address: &D.64638
	offset from base address: 0
	constant offset from base address: 12
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.64638 + 12B]
Creating dr for MEM[(struct pair *)&D.64638 + 16B]
analyze_innermost: success.
	base_address: &D.64638
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.64638 + 16B]
Creating dr for MEM[(struct _Rb_tree_const_iterator *)&__pos]
analyze_innermost: success.
	base_address: &__pos
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_const_iterator *)&__pos]
Creating dr for MEM[(struct mapped_type *)__i$_M_node_102 + 36B]
analyze_innermost: success.
	base_address: __i$_M_node_102
	offset from base address: 0
	constant offset from base address: 36
	step: 0
	aligned to: 256
	base_object: MEM[(struct mapped_type *)__i$_M_node_102 + 36B]
Creating dr for MEM[(struct mapped_type *)__i$_M_node_102 + 40B]
analyze_innermost: success.
	base_address: __i$_M_node_102
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(struct mapped_type *)__i$_M_node_102 + 40B]
Creating dr for MEM[(struct mapped_type *)__i$_M_node_102 + 44B]
analyze_innermost: success.
	base_address: __i$_M_node_102
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: MEM[(struct mapped_type *)__i$_M_node_102 + 44B]
Creating dr for MEM[(struct mapped_type *)__i$_M_node_102 + 48B]
analyze_innermost: success.
	base_address: __i$_M_node_102
	offset from base address: 0
	constant offset from base address: 48
	step: 0
	aligned to: 256
	base_object: MEM[(struct mapped_type *)__i$_M_node_102 + 48B]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:18)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:20)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:61, LOOPS:4, CONDITIONS:27, STMTS:522)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_4 bb_3 })
  {
    <bb 2>:
    # VUSE <.MEM_3(D)>
    out.102_4 = out;
    # VUSE <.MEM_3(D)>
    in.103_5 = in;
    # DEBUG D#913 => &this_6(D)->D.37974
    # DEBUG this => D#913
    # DEBUG in => in.103_5
    # DEBUG out => out.102_4
    # DEBUG label => label_8(D)
    # DEBUG in_pri => in_pri_9(D)
    # DEBUG out_pri => out_pri_10(D)
    # DEBUG D#838 s=> out_pri
    # DEBUG D#837 s=> in_pri
    if (in.103_5 < 0)
      goto <bb 4>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 bb_5 })
  {
    <bb 3>:
    # VUSE <.MEM_3(D)>
    _87 = MEM[(struct Allocator *)this_6(D)]._inputs;
    if (in.103_5 >= _87)
      goto <bb 4>;
    else
      goto <bb 5>;

  }
  bb_4 (preds = {bb_3 bb_2 }, succs = {})
  {
    <bb 4>:
    # .MEM_144 = VDEF <.MEM_3(D)>
    __assert_fail ("( in >= 0 ) && ( in < _inputs )", "allocators/allocator.cpp", 71, &__PRETTY_FUNCTION__);

  }
  bb_5 (preds = {bb_3 }, succs = {bb_7 bb_6 })
  {
    <bb 5>:
    if (out.102_4 < 0)
      goto <bb 7>;
    else
      goto <bb 6>;

  }
  bb_6 (preds = {bb_5 }, succs = {bb_7 bb_8 })
  {
    <bb 6>:
    # VUSE <.MEM_3(D)>
    _88 = MEM[(struct Allocator *)this_6(D)]._outputs;
    if (out.102_4 >= _88)
      goto <bb 7>;
    else
      goto <bb 8>;

  }
  bb_7 (preds = {bb_6 bb_5 }, succs = {})
  {
    <bb 7>:
    # .MEM_143 = VDEF <.MEM_3(D)>
    __assert_fail ("( out >= 0 ) && ( out < _outputs )", "allocators/allocator.cpp", 72, &__PRETTY_FUNCTION__);

  }
  bb_8 (preds = {bb_6 }, succs = {bb_9 bb_10 })
  {
    <bb 8>:
    if (label_8(D) < 0)
      goto <bb 9>;
    else
      goto <bb 10>;

  }
  bb_9 (preds = {bb_8 }, succs = {})
  {
    <bb 9>:
    # DEBUG D#11 => D#913
    # DEBUG D#12 => in.103_5
    # DEBUG D#13 => out.102_4
    # DEBUG D#14 => label_8(D)
    # DEBUG D#15 => D#837
    # DEBUG D#16 => D#838
    # VUSE <.MEM_3(D)>
    Allocator::_ZN9Allocator10AddRequestEiiiii.part.10 ();

  }
  bb_10 (preds = {bb_8 }, succs = {bb_19 bb_13 })
  {
    <bb 10>:
    # .MEM_124 = VDEF <.MEM_3(D)>
    MEM[(struct Allocator *)this_6(D)]._dirty = 1;
    _13 = (long unsigned int) in.103_5;
    # DEBUG D#758 => &this_6(D)->_in_req
    # VUSE <.MEM_124>
    _44 = MEM[(struct map * *)this_6(D) + 256B];
    # DEBUG D#85 => D#758
    # DEBUG __n => _13
    # DEBUG this => D#85
    _53 = _13 * 48;
    _54 = _44 + _53;
    # DEBUG this => NULL
    # DEBUG __x => &out
    # DEBUG this => D#344
    __y_39 = &MEM[(const struct _Rb_tree *)_54]._M_impl._M_header;
    # DEBUG this => NULL
    # DEBUG __x => __y_39
    # DEBUG this => D#345
    # DEBUG __k => &out
    # DEBUG this => D#345
    # VUSE <.MEM_124>
    __y_32 = MEM[(struct _Rb_tree_node_base * *)_54 + 16B];
    # DEBUG D#110 => D#345
    # DEBUG this => D#110
    # DEBUG D#335 => D#345
    # DEBUG __x => NULL
    # DEBUG __y => NULL
    # DEBUG __k => &out
    # DEBUG __y => __y_39
    # DEBUG __x => __y_32
    if (__y_32 == 0B)
      goto <bb 19>;
    else
      goto <bb 13>;

  }
  bb_13 (preds = {bb_10 }, succs = {bb_14 })
  {
    <bb 13>:

  }
  bb_17 (preds = {bb_11 }, succs = {bb_59 })
  {
    <bb 17>:
    # __y_157 = PHI <__y_104(11)>

  }
  bb_59 (preds = {bb_17 }, succs = {bb_21 bb_18 })
  {
    <bb 59>:
    # DEBUG this => NULL
    # DEBUG __x => __y_157
    # DEBUG __j$_M_node => __y_157
    # DEBUG this => D#345
    # DEBUG this => NULL
    # DEBUG __x => __y_39
    # DEBUG this => &__j
    # DEBUG __x => NULL
    if (__y_39 == __y_157)
      goto <bb 21>;
    else
      goto <bb 18>;

  }
  bb_18 (preds = {bb_59 }, succs = {bb_19 })
  {
    <bb 18>:
    # DEBUG __x => __y_157
    # DEBUG __x => __y_157
    # DEBUG this => __y_157
    # DEBUG D#174 => &__y_157->_M_value_field
    # DEBUG __r => D#174
    # DEBUG __x => D#174
    # DEBUG this => D#173
    # DEBUG D#336 => &MEM[(const struct pair &)__y_157 + 32].first
    # DEBUG D#338 => &MEM[(const struct _Rb_tree *)D#345]._M_impl._M_key_compare
    # DEBUG D#95 => D#338
    # DEBUG D#96 => &out
    # VUSE <.MEM_124>
    _14 = MEM[(const int &)__y_157 + 32];
    # DEBUG D#97 => D#336
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    _12 = out.102_4 >= _14;
    _21 = (size_type) _12;

  }
  bb_19 (preds = {bb_18 bb_10 }, succs = {bb_20 bb_21 })
  {
    <bb 19>:
    # iftmp.106_50 = PHI <_21(18), 0(10)>
    if (iftmp.106_50 != 0)
      goto <bb 20>;
    else
      goto <bb 21>;

  }
  bb_20 (preds = {bb_19 }, succs = {})
  {
    <bb 20>:
    # .MEM_43 = VDEF <.MEM_124>
    __assert_fail ("_in_req[in].count(out) == 0", "allocators/allocator.cpp", 321, &__PRETTY_FUNCTION__);

  }
  bb_21 (preds = {bb_19 bb_59 }, succs = {bb_31 bb_24 })
  {
    <bb 21>:
    _17 = (long unsigned int) out.102_4;
    # DEBUG D#759 => &this_6(D)->_out_req
    # VUSE <.MEM_124>
    _45 = MEM[(struct map * *)this_6(D) + 280B];
    # DEBUG D#85 => D#759
    # DEBUG __n => _17
    # DEBUG this => D#85
    _67 = _17 * 48;
    _68 = _45 + _67;
    # DEBUG this => NULL
    # DEBUG __x => &in
    # DEBUG this => D#344
    __y_55 = &MEM[(const struct _Rb_tree *)_68]._M_impl._M_header;
    # DEBUG this => NULL
    # DEBUG __x => __y_55
    # DEBUG this => D#345
    # DEBUG __k => &in
    # DEBUG this => D#345
    # VUSE <.MEM_124>
    __y_56 = MEM[(struct _Rb_tree_node_base * *)_68 + 16B];
    # DEBUG D#110 => D#345
    # DEBUG this => D#110
    # DEBUG D#335 => D#345
    # DEBUG __x => NULL
    # DEBUG __y => NULL
    # DEBUG __k => &in
    # DEBUG __y => __y_55
    # DEBUG __x => __y_56
    if (__y_56 == 0B)
      goto <bb 31>;
    else
      goto <bb 24>;

  }
  bb_24 (preds = {bb_21 }, succs = {bb_25 })
  {
    <bb 24>:

  }
  bb_28 (preds = {bb_22 }, succs = {bb_58 })
  {
    <bb 28>:
    # __y_155 = PHI <__y_121(22)>

  }
  bb_58 (preds = {bb_28 }, succs = {bb_31 bb_29 })
  {
    <bb 58>:
    # DEBUG this => NULL
    # DEBUG __x => __y_155
    # DEBUG __j$_M_node => __y_155
    # DEBUG this => D#345
    # DEBUG this => NULL
    # DEBUG __x => __y_55
    # DEBUG this => &__j
    # DEBUG __x => NULL
    if (__y_55 == __y_155)
      goto <bb 31>;
    else
      goto <bb 29>;

  }
  bb_29 (preds = {bb_58 }, succs = {bb_31 bb_30 })
  {
    <bb 29>:
    # DEBUG __x => __y_155
    # DEBUG __x => __y_155
    # DEBUG this => __y_155
    # DEBUG D#174 => &__y_155->_M_value_field
    # DEBUG __r => D#174
    # DEBUG __x => D#174
    # DEBUG this => D#173
    # DEBUG D#336 => &MEM[(const struct pair &)__y_155 + 32].first
    # DEBUG D#338 => &MEM[(const struct _Rb_tree *)D#345]._M_impl._M_key_compare
    # DEBUG D#95 => D#338
    # DEBUG D#96 => &in
    # VUSE <.MEM_124>
    _62 = MEM[(const int &)__y_155 + 32];
    # DEBUG D#97 => D#336
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    if (in.103_5 < _62)
      goto <bb 31>;
    else
      goto <bb 30>;

  }
  bb_30 (preds = {bb_29 }, succs = {})
  {
    <bb 30>:
    # .MEM_42 = VDEF <.MEM_124>
    __assert_fail ("_out_req[out].count(in) == 0", "allocators/allocator.cpp", 322, &__PRETTY_FUNCTION__);

  }
  bb_31 (preds = {bb_58 bb_21 bb_29 }, succs = {bb_32 bb_33 })
  {
    <bb 31>:
    # DEBUG D#760 => &this_6(D)->_in_req
    # DEBUG D#85 => D#760
    # DEBUG __n => _13
    # DEBUG this => D#85
    # DEBUG this => NULL
    # VUSE <.MEM_124>
    _69 = MEM[(long unsigned int *)_54 + 40B];
    # DEBUG D#93 => D#94
    # DEBUG this => D#93
    if (_69 == 0)
      goto <bb 32>;
    else
      goto <bb 33>;

  }
  bb_32 (preds = {bb_31 }, succs = {bb_33 })
  {
    <bb 32>:
    # DEBUG D#761 => &this_6(D)->_in_occ
    # DEBUG this => D#761
    # DEBUG __x => &in
    _70 = &MEM[(struct set *)this_6(D) + 160B]._M_t;
    # .MEM_78 = VDEF <.MEM_124>
    __p = std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique (_70, &in);
    # DEBUG this => NULL
    # DEBUG __it => &__p.first
    # DEBUG D#779 => MEM[(const struct iterator &)&__p]._M_node
    # DEBUG this => NULL
    # DEBUG __a => NULL
    # DEBUG __b => &__p.second
    # DEBUG D#778 => MEM[(const bool &)&__p + 8]
    # DEBUG D#777 => VIEW_CONVERT_EXPR<unsigned char>(D#778)
    # .MEM_81 = VDEF <.MEM_78>
    __p ={v} {CLOBBER};
    # DEBUG D.61650 => D#779
    # DEBUG D.61651 => D#777
    # VUSE <.MEM_81>
    pretmp_152 = out;
    pretmp_154 = (long unsigned int) pretmp_152;
    # VUSE <.MEM_81>
    pretmp_153 = MEM[(struct map * *)this_6(D) + 280B];
    pretmp_166 = pretmp_154 * 48;
    pretmp_109 = pretmp_153 + pretmp_166;

  }
  bb_33 (preds = {bb_31 bb_32 }, succs = {bb_34 bb_35 })
  {
    <bb 33>:
    # .MEM_1 = PHI <.MEM_124(31), .MEM_81(32)>
    # prephitmp_165 = PHI <out.102_4(31), pretmp_152(32)>
    # prephitmp_142 = PHI <_68(31), pretmp_109(32)>
    # DEBUG D#916 => out
    # DEBUG D#762 => &this_6(D)->_out_req
    # DEBUG D#85 => D#762
    # DEBUG __n => (long unsigned int) D#916
    # DEBUG this => D#85
    # DEBUG this => NULL
    # VUSE <.MEM_1>
    _22 = MEM[(long unsigned int *)prephitmp_142 + 40B];
    # DEBUG D#93 => D#94
    # DEBUG this => D#93
    if (_22 == 0)
      goto <bb 34>;
    else
      goto <bb 35>;

  }
  bb_34 (preds = {bb_33 }, succs = {bb_35 })
  {
    <bb 34>:
    # DEBUG D#763 => &this_6(D)->_out_occ
    # DEBUG this => D#763
    # DEBUG __x => &out
    _73 = &MEM[(struct set *)this_6(D) + 208B]._M_t;
    # .MEM_82 = VDEF <.MEM_1>
    __p = std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_insert_unique (_73, &out);
    # DEBUG this => NULL
    # DEBUG __it => &__p.first
    # DEBUG D#776 => MEM[(const struct iterator &)&__p]._M_node
    # DEBUG this => NULL
    # DEBUG __a => NULL
    # DEBUG __b => &__p.second
    # DEBUG D#775 => MEM[(const bool &)&__p + 8]
    # DEBUG D#774 => VIEW_CONVERT_EXPR<unsigned char>(D#775)
    # .MEM_85 = VDEF <.MEM_82>
    __p ={v} {CLOBBER};
    # DEBUG D.61652 => D#776
    # DEBUG D.61653 => D#774
    # VUSE <.MEM_85>
    pretmp_41 = out;

  }
  bb_35 (preds = {bb_33 bb_34 }, succs = {bb_54 bb_38 })
  {
    <bb 35>:
    # .MEM_2 = PHI <.MEM_1(33), .MEM_85(34)>
    # prephitmp_156 = PHI <prephitmp_165(33), pretmp_41(34)>
    # DEBUG D#915 => out
    # DEBUG req$port => D#915
    # DEBUG req$label => label_8(D)
    # DEBUG req$in_pri => in_pri_9(D)
    # DEBUG req$out_pri => out_pri_10(D)
    # VUSE <.MEM_2>
    in.103_29 = in;
    _30 = (long unsigned int) in.103_29;
    # DEBUG D#764 => &this_6(D)->_in_req
    # VUSE <.MEM_2>
    _47 = MEM[(struct map * *)this_6(D) + 256B];
    # DEBUG D#85 => D#764
    # DEBUG __n => _30
    # DEBUG this => D#85
    _74 = _30 * 48;
    _75 = _47 + _74;
    # DEBUG this => _75
    # DEBUG __k => &out
    # DEBUG this => _75
    # DEBUG __x => &out
    # DEBUG D#350 => &_75->_M_t
    # DEBUG this => D#350
    # DEBUG __k => &out
    # DEBUG this => D#350
    __i$_M_node_40 = &MEM[(struct _Rb_tree *)_75]._M_impl._M_header;
    # VUSE <.MEM_2>
    __i$_M_node_106 = MEM[(struct _Rb_tree_node_base * *)_75 + 16B];
    # DEBUG D#91 => D#350
    # DEBUG this => D#91
    # DEBUG D#349 => D#350
    # DEBUG __x => NULL
    # DEBUG __y => NULL
    # DEBUG __k => &out
    # DEBUG __y => __i$_M_node_40
    # DEBUG __x => __i$_M_node_106
    if (__i$_M_node_106 == 0B)
      goto <bb 54>;
    else
      goto <bb 38>;

  }
  bb_38 (preds = {bb_35 }, succs = {bb_39 })
  {
    <bb 38>:

  }
  bb_42 (preds = {bb_36 }, succs = {bb_57 })
  {
    <bb 42>:
    # __i$_M_node_161 = PHI <__i$_M_node_52(36)>

  }
  bb_57 (preds = {bb_42 }, succs = {bb_54 bb_43 })
  {
    <bb 57>:
    # DEBUG this => NULL
    # DEBUG __x => __i$_M_node_161
    # DEBUG __i$_M_node => __i$_M_node_161
    # DEBUG this => _75
    # DEBUG D#176 => &_75->_M_t
    # DEBUG this => D#176
    # DEBUG this => NULL
    # DEBUG __x => __i$_M_node_40
    # DEBUG this => &__i
    # DEBUG __x => NULL
    if (__i$_M_node_40 == __i$_M_node_161)
      goto <bb 54>;
    else
      goto <bb 43>;

  }
  bb_43 (preds = {bb_57 }, succs = {bb_54 bb_44 })
  {
    <bb 43>:
    # DEBUG this => &__i
    # DEBUG this => __i$_M_node_161
    # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_161]._M_value_field
    # DEBUG __r => D#753
    # DEBUG D#754 => &MEM[(struct pair &)__i$_M_node_161 + 32].first
    # DEBUG D#131 => _75
    # DEBUG this => D#131
    # DEBUG D#130 => D#131
    # DEBUG D#129 => &D#130->_M_t
    # DEBUG D#128 => D#129
    # DEBUG this => D#128
    # DEBUG D#96 => &out
    # VUSE <.MEM_2>
    _114 = MEM[(const int &)__i$_M_node_161 + 32];
    # DEBUG D#97 => D#754
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    if (_114 > prephitmp_156)
      goto <bb 54>;
    else
      goto <bb 44>;

  }
  bb_44 (preds = {bb_43 bb_54 }, succs = {bb_55 bb_47 })
  {
    <bb 44>:
    # __i$_M_node_119 = PHI <__i$_M_node_161(43), __i$_M_node_118(54)>
    # .MEM_33 = PHI <.MEM_2(43), .MEM_132(54)>
    # prephitmp_34 = PHI <in.103_29(43), pretmp_163(54)>
    # prephitmp_92 = PHI <prephitmp_156(43), pretmp_116(54)>
    # DEBUG __i$_M_node => __i$_M_node_119
    # DEBUG this => &__i
    # DEBUG this => __i$_M_node_119
    # DEBUG D#755 => &MEM[(struct _Rb_tree_node *)__i$_M_node_119]._M_value_field
    # DEBUG __r => D#755
    # DEBUG D#757 => {CLOBBER}
    # DEBUG __i$_M_node => D#757
    # .MEM_28 = VDEF <.MEM_33>
    MEM[(struct mapped_type *)__i$_M_node_119 + 36B] = prephitmp_156;
    # .MEM_86 = VDEF <.MEM_28>
    MEM[(struct mapped_type *)__i$_M_node_119 + 40B] = label_8(D);
    # .MEM_84 = VDEF <.MEM_86>
    MEM[(struct mapped_type *)__i$_M_node_119 + 44B] = in_pri_9(D);
    # .MEM_83 = VDEF <.MEM_84>
    MEM[(struct mapped_type *)__i$_M_node_119 + 48B] = out_pri_10(D);
    # DEBUG D#914 => in
    # DEBUG req$port => D#914
    _37 = (long unsigned int) prephitmp_92;
    # DEBUG D#765 => &this_6(D)->_out_req
    # VUSE <.MEM_83>
    _48 = MEM[(struct map * *)this_6(D) + 280B];
    # DEBUG D#85 => D#765
    # DEBUG __n => _37
    # DEBUG this => D#85
    _76 = _37 * 48;
    _77 = _48 + _76;
    # DEBUG this => _77
    # DEBUG __k => &in
    # DEBUG this => _77
    # DEBUG __x => &in
    # DEBUG D#350 => &_77->_M_t
    # DEBUG this => D#350
    # DEBUG __k => &in
    # DEBUG this => D#350
    __i$_M_node_11 = &MEM[(struct _Rb_tree *)_77]._M_impl._M_header;
    # VUSE <.MEM_83>
    __i$_M_node_89 = MEM[(struct _Rb_tree_node_base * *)_77 + 16B];
    # DEBUG D#91 => D#350
    # DEBUG this => D#91
    # DEBUG D#349 => D#350
    # DEBUG __x => NULL
    # DEBUG __y => NULL
    # DEBUG __k => &in
    # DEBUG __y => __i$_M_node_11
    # DEBUG __x => __i$_M_node_89
    if (__i$_M_node_89 == 0B)
      goto <bb 55>;
    else
      goto <bb 47>;

  }
  bb_47 (preds = {bb_44 }, succs = {bb_48 })
  {
    <bb 47>:

  }
  bb_51 (preds = {bb_45 }, succs = {bb_56 })
  {
    <bb 51>:
    # __i$_M_node_158 = PHI <__i$_M_node_66(45)>

  }
  bb_56 (preds = {bb_51 }, succs = {bb_55 bb_52 })
  {
    <bb 56>:
    # DEBUG this => NULL
    # DEBUG __x => __i$_M_node_158
    # DEBUG __i$_M_node => __i$_M_node_158
    # DEBUG this => _77
    # DEBUG D#176 => &_77->_M_t
    # DEBUG this => D#176
    # DEBUG this => NULL
    # DEBUG __x => __i$_M_node_11
    # DEBUG this => &__i
    # DEBUG __x => NULL
    if (__i$_M_node_11 == __i$_M_node_158)
      goto <bb 55>;
    else
      goto <bb 52>;

  }
  bb_52 (preds = {bb_56 }, succs = {bb_55 bb_53 })
  {
    <bb 52>:
    # DEBUG this => &__i
    # DEBUG this => __i$_M_node_158
    # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_158]._M_value_field
    # DEBUG __r => D#753
    # DEBUG D#754 => &MEM[(struct pair &)__i$_M_node_158 + 32].first
    # DEBUG D#131 => _77
    # DEBUG this => D#131
    # DEBUG D#130 => D#131
    # DEBUG D#129 => &D#130->_M_t
    # DEBUG D#128 => D#129
    # DEBUG this => D#128
    # DEBUG D#96 => &in
    # VUSE <.MEM_83>
    _97 = MEM[(const int &)__i$_M_node_158 + 32];
    # DEBUG D#97 => D#754
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    if (prephitmp_34 < _97)
      goto <bb 55>;
    else
      goto <bb 53>;

  }
  bb_53 (preds = {bb_52 bb_55 }, succs = {bb_60 })
  {
    <bb 53>:
    # __i$_M_node_102 = PHI <__i$_M_node_158(52), __i$_M_node_101(55)>
    # .MEM_123 = PHI <.MEM_83(52), .MEM_141(55)>

  }
  bb_60 (preds = {bb_53 }, succs = {bb_1 })
  {
    <bb 60>:
    # DEBUG __i$_M_node => __i$_M_node_102
    # DEBUG this => &__i
    # DEBUG this => __i$_M_node_102
    # DEBUG D#755 => &MEM[(struct _Rb_tree_node *)__i$_M_node_102]._M_value_field
    # DEBUG __r => D#755
    # DEBUG D#757 => {CLOBBER}
    # DEBUG __i$_M_node => D#757
    # .MEM_80 = VDEF <.MEM_123>
    MEM[(struct mapped_type *)__i$_M_node_102 + 36B] = prephitmp_34;
    # .MEM_79 = VDEF <.MEM_80>
    MEM[(struct mapped_type *)__i$_M_node_102 + 40B] = label_8(D);
    # .MEM_38 = VDEF <.MEM_79>
    MEM[(struct mapped_type *)__i$_M_node_102 + 44B] = in_pri_9(D);
    # .MEM_31 = VDEF <.MEM_38>
    MEM[(struct mapped_type *)__i$_M_node_102 + 48B] = out_pri_10(D);
    # DEBUG D#766 => {CLOBBER}
    # DEBUG req$port => D#766
    # DEBUG D#767 => {CLOBBER}
    # DEBUG req$label => D#767
    # DEBUG D#768 => {CLOBBER}
    # DEBUG req$in_pri => D#768
    # DEBUG D#769 => {CLOBBER}
    # DEBUG req$out_pri => D#769
    # VUSE <.MEM_31>
    return;

  }
  bb_54 (preds = {bb_43 bb_57 bb_35 }, succs = {bb_44 })
  {
    <bb 54>:
    # __i$_M_node_147 = PHI <__i$_M_node_161(43), __i$_M_node_161(57), __i$_M_node_40(35)>
    # DEBUG this => &D.64665
    # DEBUG __a => &out
    # DEBUG __b => NULL
    # .MEM_125 = VDEF <.MEM_2>
    D.64665.first = prephitmp_156;
    # .MEM_126 = VDEF <.MEM_125>
    MEM[(struct pair *)&D.64665 + 4B] = 0;
    # .MEM_127 = VDEF <.MEM_126>
    MEM[(struct pair *)&D.64665 + 8B] = 0;
    # .MEM_128 = VDEF <.MEM_127>
    MEM[(struct pair *)&D.64665 + 12B] = 0;
    # .MEM_129 = VDEF <.MEM_128>
    MEM[(struct pair *)&D.64665 + 16B] = 0;
    # DEBUG this => _75
    # DEBUG __position$_M_node => __i$_M_node_147
    # DEBUG __x => &D.64665
    # DEBUG this => NULL
    # DEBUG __it => &__position
    _117 = &_75->_M_t;
    # DEBUG this => _117
    # .MEM_130 = VDEF <.MEM_129>
    MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_147;
    # DEBUG __x => &D.64665
    # DEBUG this => &__an
    # DEBUG __t => _117
    # DEBUG __an$_M_t => _117
    # DEBUG D#752 => &__an
    # .MEM_131 = VDEF <.MEM_130>
    D.64664 = std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE17_M_insert_unique_INSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_ERKS4_RT_.isra.197.constprop (_117, __pos, &D.64665);
    # VUSE <.MEM_131>
    __i$_M_node_118 = MEM[(struct _Rb_tree_iterator *)&D.64664];
    # DEBUG __i$_M_node => __i$_M_node_118
    # .MEM_132 = VDEF <.MEM_131>
    D.64665 ={v} {CLOBBER};
    # VUSE <.MEM_132>
    pretmp_163 = in;
    # VUSE <.MEM_132>
    pretmp_116 = out;
    goto <bb 44>;

  }
  bb_55 (preds = {bb_52 bb_56 bb_44 }, succs = {bb_53 })
  {
    <bb 55>:
    # __i$_M_node_49 = PHI <__i$_M_node_158(52), __i$_M_node_158(56), __i$_M_node_11(44)>
    # DEBUG this => &D.64638
    # DEBUG __a => &in
    # DEBUG __b => NULL
    # .MEM_134 = VDEF <.MEM_83>
    D.64638.first = prephitmp_34;
    # .MEM_135 = VDEF <.MEM_134>
    MEM[(struct pair *)&D.64638 + 4B] = 0;
    # .MEM_136 = VDEF <.MEM_135>
    MEM[(struct pair *)&D.64638 + 8B] = 0;
    # .MEM_137 = VDEF <.MEM_136>
    MEM[(struct pair *)&D.64638 + 12B] = 0;
    # .MEM_138 = VDEF <.MEM_137>
    MEM[(struct pair *)&D.64638 + 16B] = 0;
    # DEBUG this => _77
    # DEBUG __position$_M_node => __i$_M_node_49
    # DEBUG __x => &D.64638
    # DEBUG this => NULL
    # DEBUG __it => &__position
    _100 = &_77->_M_t;
    # DEBUG this => _100
    # .MEM_139 = VDEF <.MEM_138>
    MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_49;
    # DEBUG __x => &D.64638
    # DEBUG this => &__an
    # DEBUG __t => _100
    # DEBUG __an$_M_t => _100
    # DEBUG D#752 => &__an
    # .MEM_140 = VDEF <.MEM_139>
    D.64637 = std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE17_M_insert_unique_INSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_ERKS4_RT_.isra.197.constprop (_100, __pos, &D.64638);
    # VUSE <.MEM_140>
    __i$_M_node_101 = MEM[(struct _Rb_tree_iterator *)&D.64637];
    # DEBUG __i$_M_node => __i$_M_node_101
    # .MEM_141 = VDEF <.MEM_140>
    D.64638 ={v} {CLOBBER};
    goto <bb 53>;

  }
  loop_3 (header = 48, latch = 46, niter = )
  {
    bb_45 (preds = {bb_49 bb_50 }, succs = {bb_51 bb_46 })
    {
      <bb 45>:
      # __i$_M_node_65 = PHI <__i$_M_node_93(49), __i$_M_node_94(50)>
      # __i$_M_node_66 = PHI <__i$_M_node_170(49), __i$_M_node_160(50)>
      # DEBUG __y => __i$_M_node_66
      # DEBUG __x => __i$_M_node_65
      if (__i$_M_node_65 == 0B)
        goto <bb 51>;
      else
        goto <bb 46>;

    }
    bb_46 (preds = {bb_45 }, succs = {bb_48 })
    {
      <bb 46>:
      goto <bb 48>;

    }
    bb_48 (preds = {bb_47 bb_46 }, succs = {bb_49 bb_50 })
    {
      <bb 48>:
      # __i$_M_node_170 = PHI <__i$_M_node_89(47), __i$_M_node_65(46)>
      # __i$_M_node_160 = PHI <__i$_M_node_11(47), __i$_M_node_66(46)>
      # DEBUG __y => __i$_M_node_160
      # DEBUG __x => __i$_M_node_170
      # DEBUG __x => __i$_M_node_170
      # DEBUG __x => __i$_M_node_170
      # DEBUG this => __i$_M_node_170
      # DEBUG D#331 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_170]._M_value_field
      # DEBUG __r => D#331
      # DEBUG __x => D#331
      # DEBUG this => D#173
      # DEBUG D#346 => &MEM[(const struct pair &)__i$_M_node_170 + 32].first
      # DEBUG D#347 => &D#348->_M_impl._M_key_compare
      # DEBUG D#95 => D#347
      # VUSE <.MEM_83>
      _91 = MEM[(const int &)__i$_M_node_170 + 32];
      # DEBUG D#96 => D#346
      # DEBUG D#97 => &in
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      if (prephitmp_34 <= _91)
        goto <bb 49>;
      else
        goto <bb 50>;

    }
    bb_49 (preds = {bb_48 }, succs = {bb_45 })
    {
      <bb 49>:
      # DEBUG __y => __i$_M_node_170
      # VUSE <.MEM_83>
      __i$_M_node_93 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_170 + 16B];
      # DEBUG D#108 => __i$_M_node_170
      # DEBUG __x => D#108
      # DEBUG __x => NULL
      goto <bb 45>;

    }
    bb_50 (preds = {bb_48 }, succs = {bb_45 })
    {
      <bb 50>:
      # VUSE <.MEM_83>
      __i$_M_node_94 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_170 + 24B];
      # DEBUG D#107 => __i$_M_node_170
      # DEBUG __x => D#107
      # DEBUG __x => NULL
      goto <bb 45>;

    }
  }
  loop_4 (header = 39, latch = 37, niter = )
  {
    bb_36 (preds = {bb_40 bb_41 }, succs = {bb_42 bb_37 })
    {
      <bb 36>:
      # __i$_M_node_51 = PHI <__i$_M_node_110(40), __i$_M_node_111(41)>
      # __i$_M_node_52 = PHI <__i$_M_node_115(40), __i$_M_node_98(41)>
      # DEBUG __y => __i$_M_node_52
      # DEBUG __x => __i$_M_node_51
      if (__i$_M_node_51 == 0B)
        goto <bb 42>;
      else
        goto <bb 37>;

    }
    bb_37 (preds = {bb_36 }, succs = {bb_39 })
    {
      <bb 37>:
      goto <bb 39>;

    }
    bb_39 (preds = {bb_38 bb_37 }, succs = {bb_40 bb_41 })
    {
      <bb 39>:
      # __i$_M_node_115 = PHI <__i$_M_node_106(38), __i$_M_node_51(37)>
      # __i$_M_node_98 = PHI <__i$_M_node_40(38), __i$_M_node_52(37)>
      # DEBUG __y => __i$_M_node_98
      # DEBUG __x => __i$_M_node_115
      # DEBUG __x => __i$_M_node_115
      # DEBUG __x => __i$_M_node_115
      # DEBUG this => __i$_M_node_115
      # DEBUG D#331 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_115]._M_value_field
      # DEBUG __r => D#331
      # DEBUG __x => D#331
      # DEBUG this => D#173
      # DEBUG D#346 => &MEM[(const struct pair &)__i$_M_node_115 + 32].first
      # DEBUG D#347 => &D#348->_M_impl._M_key_compare
      # DEBUG D#95 => D#347
      # VUSE <.MEM_2>
      _108 = MEM[(const int &)__i$_M_node_115 + 32];
      # DEBUG D#96 => D#346
      # DEBUG D#97 => &out
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      if (_108 >= prephitmp_156)
        goto <bb 40>;
      else
        goto <bb 41>;

    }
    bb_40 (preds = {bb_39 }, succs = {bb_36 })
    {
      <bb 40>:
      # DEBUG __y => __i$_M_node_115
      # VUSE <.MEM_2>
      __i$_M_node_110 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_115 + 16B];
      # DEBUG D#108 => __i$_M_node_115
      # DEBUG __x => D#108
      # DEBUG __x => NULL
      goto <bb 36>;

    }
    bb_41 (preds = {bb_39 }, succs = {bb_36 })
    {
      <bb 41>:
      # VUSE <.MEM_2>
      __i$_M_node_111 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_115 + 24B];
      # DEBUG D#107 => __i$_M_node_115
      # DEBUG __x => D#107
      # DEBUG __x => NULL
      goto <bb 36>;

    }
  }
  loop_2 (header = 25, latch = 23, niter = )
  {
    bb_22 (preds = {bb_27 bb_26 }, succs = {bb_28 bb_23 })
    {
      <bb 22>:
      # __y_122 = PHI <__y_60(27), __y_59(26)>
      # __y_121 = PHI <__y_103(27), __y_120(26)>
      # DEBUG __y => __y_121
      # DEBUG __x => __y_122
      if (__y_122 == 0B)
        goto <bb 28>;
      else
        goto <bb 23>;

    }
    bb_23 (preds = {bb_22 }, succs = {bb_25 })
    {
      <bb 23>:
      goto <bb 25>;

    }
    bb_25 (preds = {bb_24 bb_23 }, succs = {bb_26 bb_27 })
    {
      <bb 25>:
      # __y_120 = PHI <__y_56(24), __y_122(23)>
      # __y_103 = PHI <__y_55(24), __y_121(23)>
      # DEBUG __y => __y_103
      # DEBUG __x => __y_120
      # DEBUG __x => __y_120
      # DEBUG __x => __y_120
      # DEBUG this => __y_120
      # DEBUG D#331 => &__y_120->_M_value_field
      # DEBUG __r => D#331
      # DEBUG __x => D#331
      # DEBUG this => D#173
      # DEBUG D#332 => &MEM[(const struct pair &)__y_120 + 32].first
      # DEBUG D#333 => &D#334->_M_impl._M_key_compare
      # DEBUG D#95 => D#333
      # VUSE <.MEM_124>
      _58 = MEM[(const int &)__y_120 + 32];
      # DEBUG D#96 => D#332
      # DEBUG D#97 => &in
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      if (in.103_5 <= _58)
        goto <bb 26>;
      else
        goto <bb 27>;

    }
    bb_26 (preds = {bb_25 }, succs = {bb_22 })
    {
      <bb 26>:
      # DEBUG __y => __y_120
      # VUSE <.MEM_124>
      __y_59 = MEM[(struct _Rb_tree_node_base * *)__y_120 + 16B];
      # DEBUG D#171 => __y_120
      # DEBUG __x => D#171
      # DEBUG __x => NULL
      goto <bb 22>;

    }
    bb_27 (preds = {bb_25 }, succs = {bb_22 })
    {
      <bb 27>:
      # VUSE <.MEM_124>
      __y_60 = MEM[(struct _Rb_tree_node_base * *)__y_120 + 24B];
      # DEBUG D#172 => __y_120
      # DEBUG __x => D#172
      # DEBUG __x => NULL
      goto <bb 22>;

    }
  }
  loop_1 (header = 14, latch = 12, niter = )
  {
    bb_11 (preds = {bb_16 bb_15 }, succs = {bb_17 bb_12 })
    {
      <bb 11>:
      # __y_105 = PHI <__y_19(16), __y_20(15)>
      # __y_104 = PHI <__y_159(16), __y_7(15)>
      # DEBUG __y => __y_104
      # DEBUG __x => __y_105
      if (__y_105 == 0B)
        goto <bb 17>;
      else
        goto <bb 12>;

    }
    bb_12 (preds = {bb_11 }, succs = {bb_14 })
    {
      <bb 12>:
      goto <bb 14>;

    }
    bb_14 (preds = {bb_13 bb_12 }, succs = {bb_15 bb_16 })
    {
      <bb 14>:
      # __y_159 = PHI <__y_39(13), __y_104(12)>
      # __y_7 = PHI <__y_32(13), __y_105(12)>
      # DEBUG __y => __y_159
      # DEBUG __x => __y_7
      # DEBUG __x => __y_7
      # DEBUG __x => __y_7
      # DEBUG this => __y_7
      # DEBUG D#331 => &__y_7->_M_value_field
      # DEBUG __r => D#331
      # DEBUG __x => D#331
      # DEBUG this => D#173
      # DEBUG D#332 => &MEM[(const struct pair &)__y_7 + 32].first
      # DEBUG D#333 => &D#334->_M_impl._M_key_compare
      # DEBUG D#95 => D#333
      # VUSE <.MEM_124>
      _25 = MEM[(const int &)__y_7 + 32];
      # DEBUG D#96 => D#332
      # DEBUG D#97 => &out
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      if (out.102_4 <= _25)
        goto <bb 15>;
      else
        goto <bb 16>;

    }
    bb_15 (preds = {bb_14 }, succs = {bb_11 })
    {
      <bb 15>:
      # DEBUG __y => __y_7
      # VUSE <.MEM_124>
      __y_20 = MEM[(struct _Rb_tree_node_base * *)__y_7 + 16B];
      # DEBUG D#171 => __y_7
      # DEBUG __x => D#171
      # DEBUG __x => NULL
      goto <bb 11>;

    }
    bb_16 (preds = {bb_14 }, succs = {bb_11 })
    {
      <bb 16>:
      # VUSE <.MEM_124>
      __y_19 = MEM[(struct _Rb_tree_node_base * *)__y_7 + 24B];
      # DEBUG D#172 => __y_7
      # DEBUG __x => D#172
      # DEBUG __x => NULL
      goto <bb 11>;

    }
  }
}

Pass statistics:
----------------

virtual void SparseAllocator::AddRequest(int, int, int, int, int) (struct SparseAllocatorD.36303 * const thisD.42539, intD.9 inD.42533, intD.9 outD.42534, intD.9 labelD.42535, intD.9 in_priD.42536, intD.9 out_priD.42537)
{
  struct value_typeD.41248 D.64665;
  struct _Rb_tree_nodeD.41466 * __yD.64659;
  struct iteratorD.41766 D.64664;
  struct const_iteratorD.41768 __posD.64649;
  struct _Rb_tree_node_baseD.24800 * const __i$_M_nodeD.64663;
  struct _Rb_tree_node_baseD.24800 * SR.1191D.64662;
  struct mapped_typeD.41247 & D.64661;
  struct value_typeD.41248 D.64638;
  struct _Rb_tree_nodeD.41466 * __yD.64632;
  struct iteratorD.41766 D.64637;
  struct const_iteratorD.41768 __posD.64622;
  struct _Rb_tree_node_baseD.24800 * const __i$_M_nodeD.64636;
  struct _Rb_tree_node_baseD.24800 * SR.1191D.64635;
  struct mapped_typeD.41247 & D.64634;
  struct pairD.36753 __pD.61635;
  struct pairD.36753 __pD.61619;
  const struct _Rb_tree_nodeD.41466 * __yD.61602;
  const struct _Rb_tree_nodeD.41466 * __yD.61586;
  static const charD.10 _ZZN15SparseAllocator10AddRequestEiiiiiE19__PRETTY_FUNCTION__D.42541[66] = "virtual void SparseAllocator::AddRequest(int, int, int, int, int)";
  intD.9 out.102_4;
  intD.9 in.103_5;
  boolD.2757 _12;
  long unsigned intD.14 _13;
  const intD.9 _14;
  long unsigned intD.14 _17;
  size_typeD.42041 _21;
  const size_typeD.41494 _22;
  const intD.9 _25;
  intD.9 in.103_29;
  long unsigned intD.14 _30;
  intD.9 prephitmp_34;
  long unsigned intD.14 _37;
  intD.9 pretmp_41;
  struct mapD.37148 * _44;
  struct mapD.37148 * _45;
  struct mapD.37148 * _47;
  struct mapD.37148 * _48;
  size_typeD.42041 iftmp.106_50;
  long unsigned intD.14 _53;
  struct mapD.37148 & _54;
  const intD.9 _58;
  const intD.9 _62;
  long unsigned intD.14 _67;
  struct mapD.37148 & _68;
  const size_typeD.41494 _69;
  struct _Rep_typeD.36315 * _70;
  struct _Rep_typeD.36315 * _73;
  long unsigned intD.14 _74;
  struct mapD.37148 & _75;
  long unsigned intD.14 _76;
  struct mapD.37148 & _77;
  intD.9 _87;
  intD.9 _88;
  const intD.9 _91;
  intD.9 prephitmp_92;
  const intD.9 _97;
  struct _Rep_typeD.41460 * _100;
  const intD.9 _108;
  struct mapD.37148 * pretmp_109;
  const intD.9 _114;
  intD.9 pretmp_116;
  struct _Rep_typeD.41460 * _117;
  struct mapD.37148 * prephitmp_142;
  intD.9 pretmp_152;
  struct mapD.37148 * pretmp_153;
  long unsigned intD.14 pretmp_154;
  intD.9 prephitmp_156;
  intD.9 pretmp_163;
  intD.9 prephitmp_165;
  long unsigned intD.14 pretmp_166;

;;   basic block 2, loop depth 0, count 0, freq 902, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  out.102_4 = outD.42534;
  # VUSE <.MEM_3(D)>
  in.103_5 = inD.42533;
  # DEBUG D#913ptD.0 => &this_6(D)->D.37974
  # DEBUG thisD.64606 => D#913ptD.0
  # DEBUG inD.64607 => in.103_5
  # DEBUG outD.64608 => out.102_4
  # DEBUG labelD.64609 => label_8(D)
  # DEBUG in_priD.64610 => in_pri_9(D)
  # DEBUG out_priD.64611 => out_pri_10(D)
  # DEBUG D#838ptD.0 s=> out_priD.64611
  # DEBUG D#837ptD.0 s=> in_priD.64610
  if (in.103_5 < 0)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  _87 = MEM[(struct AllocatorD.34627 *)this_6(D)]._inputsD.34629;
  if (in.103_5 >= _87)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                2 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_144 = VDEF <.MEM_3(D)>
  # USE = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  # CLB = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  __assert_failD.14402 ("( in >= 0 ) && ( in < _inputs )", "allocators/allocator.cpp", 71, &_ZZN9Allocator10AddRequestEiiiiiE19__PRETTY_FUNCTION__D.40256);
;;    succ:      

;;   basic block 5, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  if (out.102_4 < 0)
    goto <bb 7>;
  else
    goto <bb 6>;
;;    succ:       7 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  _88 = MEM[(struct AllocatorD.34627 *)this_6(D)]._outputsD.34630;
  if (out.102_4 >= _88)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_143 = VDEF <.MEM_3(D)>
  # USE = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  # CLB = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  __assert_failD.14402 ("( out >= 0 ) && ( out < _outputs )", "allocators/allocator.cpp", 72, &_ZZN9Allocator10AddRequestEiiiiiE19__PRETTY_FUNCTION__D.40256);
;;    succ:      

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  if (label_8(D) < 0)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#11ptD.0 => D#913ptD.0
  # DEBUG D#12ptD.0 => in.103_5
  # DEBUG D#13ptD.0 => out.102_4
  # DEBUG D#14ptD.0 => label_8(D)
  # DEBUG D#15ptD.0 => D#837ptD.0
  # DEBUG D#16ptD.0 => D#838ptD.0
  # VUSE <.MEM_3(D)>
  # USE = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  _ZN9Allocator10AddRequestEiiiii.part.10D.52168 ();
;;    succ:      

;;   basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_124 = VDEF <.MEM_3(D)>
  MEM[(struct AllocatorD.34627 *)this_6(D)]._dirtyD.34631 = 1;
  # RANGE [0, 18446744073709551615]
  _13 = (long unsigned intD.14) in.103_5;
  # DEBUG D#758ptD.0 => &this_6(D)->_in_reqD.37895
  # VUSE <.MEM_124>
  # PT = nonlocal escaped 
  _44 = MEM[(struct mapD.37148 * *)this_6(D) + 256B];
  # DEBUG D#85ptD.0 => D#758ptD.0
  # DEBUG __nD.61591 => _13
  # DEBUG thisD.61592 => D#85ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _53 = _13 * 48;
  # PT = nonlocal escaped 
  _54 = _44 + _53;
  # DEBUG thisD.61578 => NULL
  # DEBUG __xD.61579 => &outD.42534
  # DEBUG thisD.61580 => D#344ptD.0
  # PT = nonlocal escaped 
  __y_39 = &MEM[(const struct _Rb_treeD.41462 *)_54]._M_implD.41540._M_headerD.41695;
  # DEBUG thisD.54363 => NULL
  # DEBUG __xD.54362 => __y_39
  # DEBUG thisD.61582 => D#345ptD.0
  # DEBUG __kD.61581 => &outD.42534
  # DEBUG thisD.54354 => D#345ptD.0
  # VUSE <.MEM_124>
  # PT = nonlocal escaped 
  __y_32 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_54 + 16B];
  # DEBUG D#110ptD.0 => D#345ptD.0
  # DEBUG thisD.54273 => D#110ptD.0
  # DEBUG D#335ptD.0 => D#345ptD.0
  # DEBUG __xD.61587 => NULL
  # DEBUG __yD.61586 => NULL
  # DEBUG __kD.61585 => &outD.42534
  # DEBUG __yD.61586 => __y_39
  # DEBUG __xD.61587 => __y_32
  if (__y_32 == 0B)
    goto <bb 19>;
  else
    goto <bb 13>;
;;    succ:       19 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_105 = PHI <__y_19(16), __y_20(15)>
  # PT = nonlocal escaped 
  # __y_104 = PHI <__y_159(16), __y_7(15)>
  # DEBUG __yD.61586 => __y_104
  # DEBUG __xD.61587 => __y_105
  if (__y_105 == 0B)
    goto <bb 17>;
  else
    goto <bb 12>;
;;    succ:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       11 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       10 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_159 = PHI <__y_39(13), __y_104(12)>
  # PT = nonlocal escaped 
  # __y_7 = PHI <__y_32(13), __y_105(12)>
  # DEBUG __yD.61586 => __y_159
  # DEBUG __xD.61587 => __y_7
  # DEBUG __xD.54243 => __y_7
  # DEBUG __xD.54209 => __y_7
  # DEBUG thisD.54210 => __y_7
  # DEBUG D#331ptD.0 => &__y_7->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54245 => D#331ptD.0
  # DEBUG thisD.54244 => D#173ptD.0
  # DEBUG D#332ptD.0 => &MEM[(const struct pairD.37146 &)__y_7 + 32].firstD.42483
  # DEBUG D#333ptD.0 => &D#334ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#333ptD.0
  # VUSE <.MEM_124>
  _25 = MEM[(const intD.9 &)__y_7 + 32];
  # DEBUG D#96ptD.0 => D#332ptD.0
  # DEBUG D#97ptD.0 => &outD.42534
  # DEBUG thisD.54246 => D#95ptD.0
  # DEBUG __xD.54247 => D#96ptD.0
  # DEBUG __yD.54248 => D#97ptD.0
  if (out.102_4 <= _25)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.61586 => __y_7
  # VUSE <.MEM_124>
  # PT = nonlocal escaped 
  __y_20 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_7 + 16B];
  # DEBUG D#171ptD.0 => __y_7
  # DEBUG __xD.54242 => D#171ptD.0
  # DEBUG __xD.61587 => NULL
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       14 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_124>
  # PT = nonlocal escaped 
  __y_19 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_7 + 24B];
  # DEBUG D#172ptD.0 => __y_7
  # DEBUG __xD.54241 => D#172ptD.0
  # DEBUG __xD.61587 => NULL
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 16, next block 59, flags: (NEW, REACHABLE)
;;    pred:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_157 = PHI <__y_104(11)>
;;    succ:       59 [100.0%]  (FALLTHRU)

;;   basic block 59, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 17, next block 18, flags: (NEW)
;;    pred:       17 [100.0%]  (FALLTHRU)
  # DEBUG thisD.54240 => NULL
  # DEBUG __xD.54239 => __y_157
  # DEBUG __j$_M_nodeD.54291 => __y_157
  # DEBUG thisD.54261 => D#345ptD.0
  # DEBUG thisD.54263 => NULL
  # DEBUG __xD.54262 => __y_39
  # DEBUG thisD.54258 => &__jD.61583
  # DEBUG __xD.54259 => NULL
  if (__y_39 == __y_157)
    goto <bb 21>;
  else
    goto <bb 18>;
;;    succ:       21 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 59, next block 19, flags: (NEW, REACHABLE)
;;    pred:       59 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.54283 => __y_157
  # DEBUG __xD.53214 => __y_157
  # DEBUG thisD.53215 => __y_157
  # DEBUG D#174ptD.0 => &__y_157->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.54285 => D#174ptD.0
  # DEBUG thisD.54284 => D#173ptD.0
  # DEBUG D#336ptD.0 => &MEM[(const struct pairD.37146 &)__y_157 + 32].firstD.42483
  # DEBUG D#338ptD.0 => &MEM[(const struct _Rb_treeD.41462 *)D#345ptD.0]._M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#338ptD.0
  # DEBUG D#96ptD.0 => &outD.42534
  # VUSE <.MEM_124>
  _14 = MEM[(const intD.9 &)__y_157 + 32];
  # DEBUG D#97ptD.0 => D#336ptD.0
  # DEBUG thisD.54281 => D#95ptD.0
  # DEBUG __xD.54280 => D#96ptD.0
  # DEBUG __yD.54279 => D#97ptD.0
  _12 = out.102_4 >= _14;
  _21 = (size_typeD.42041) _12;
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 463, maybe hot
;;   Invalid sum of incoming frequencies 846, should be 463
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1] NONZERO 1
  # iftmp.106_50 = PHI <_21(18), 0(10)>
  if (iftmp.106_50 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;
;;    succ:       20 (TRUE_VALUE,EXECUTABLE)
;;                21 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       19 (TRUE_VALUE,EXECUTABLE)
  # .MEM_43 = VDEF <.MEM_124>
  # USE = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  # CLB = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  __assert_failD.14402 ("_in_req[in].count(out) == 0", "allocators/allocator.cpp", 321, &_ZZN15SparseAllocator10AddRequestEiiiiiE19__PRETTY_FUNCTION__D.42541);
;;    succ:      

;;   basic block 21, loop depth 0, count 0, freq 900, maybe hot
;;   Invalid sum of incoming frequencies 517, should be 900
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       19 [100.0%]  (FALSE_VALUE,EXECUTABLE)
;;                59 [6.6%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _17 = (long unsigned intD.14) out.102_4;
  # DEBUG D#759ptD.0 => &this_6(D)->_out_reqD.37896
  # VUSE <.MEM_124>
  # PT = nonlocal escaped 
  _45 = MEM[(struct mapD.37148 * *)this_6(D) + 280B];
  # DEBUG D#85ptD.0 => D#759ptD.0
  # DEBUG __nD.61607 => _17
  # DEBUG thisD.61608 => D#85ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _67 = _17 * 48;
  # PT = nonlocal escaped 
  _68 = _45 + _67;
  # DEBUG thisD.61594 => NULL
  # DEBUG __xD.61595 => &inD.42533
  # DEBUG thisD.61596 => D#344ptD.0
  # PT = nonlocal escaped 
  __y_55 = &MEM[(const struct _Rb_treeD.41462 *)_68]._M_implD.41540._M_headerD.41695;
  # DEBUG thisD.54363 => NULL
  # DEBUG __xD.54362 => __y_55
  # DEBUG thisD.61598 => D#345ptD.0
  # DEBUG __kD.61597 => &inD.42533
  # DEBUG thisD.54354 => D#345ptD.0
  # VUSE <.MEM_124>
  # PT = nonlocal escaped 
  __y_56 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_68 + 16B];
  # DEBUG D#110ptD.0 => D#345ptD.0
  # DEBUG thisD.54273 => D#110ptD.0
  # DEBUG D#335ptD.0 => D#345ptD.0
  # DEBUG __xD.61603 => NULL
  # DEBUG __yD.61602 => NULL
  # DEBUG __kD.61601 => &inD.42533
  # DEBUG __yD.61602 => __y_55
  # DEBUG __xD.61603 => __y_56
  if (__y_56 == 0B)
    goto <bb 31>;
  else
    goto <bb 24>;
;;    succ:       31 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 9096, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       27 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_122 = PHI <__y_60(27), __y_59(26)>
  # PT = nonlocal escaped 
  # __y_121 = PHI <__y_103(27), __y_120(26)>
  # DEBUG __yD.61602 => __y_121
  # DEBUG __xD.61603 => __y_122
  if (__y_122 == 0B)
    goto <bb 28>;
  else
    goto <bb 23>;
;;    succ:       28 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 8277, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       21 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 9096, maybe hot
;;    prev block 24, next block 26, flags: (NEW)
;;    pred:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_120 = PHI <__y_56(24), __y_122(23)>
  # PT = nonlocal escaped 
  # __y_103 = PHI <__y_55(24), __y_121(23)>
  # DEBUG __yD.61602 => __y_103
  # DEBUG __xD.61603 => __y_120
  # DEBUG __xD.54243 => __y_120
  # DEBUG __xD.54209 => __y_120
  # DEBUG thisD.54210 => __y_120
  # DEBUG D#331ptD.0 => &__y_120->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54245 => D#331ptD.0
  # DEBUG thisD.54244 => D#173ptD.0
  # DEBUG D#332ptD.0 => &MEM[(const struct pairD.37146 &)__y_120 + 32].firstD.42483
  # DEBUG D#333ptD.0 => &D#334ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#333ptD.0
  # VUSE <.MEM_124>
  _58 = MEM[(const intD.9 &)__y_120 + 32];
  # DEBUG D#96ptD.0 => D#332ptD.0
  # DEBUG D#97ptD.0 => &inD.42533
  # DEBUG thisD.54246 => D#95ptD.0
  # DEBUG __xD.54247 => D#96ptD.0
  # DEBUG __yD.54248 => D#97ptD.0
  if (in.103_5 <= _58)
    goto <bb 26>;
  else
    goto <bb 27>;
;;    succ:       26 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 1, count 0, freq 4548, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       25 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.61602 => __y_120
  # VUSE <.MEM_124>
  # PT = nonlocal escaped 
  __y_59 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_120 + 16B];
  # DEBUG D#171ptD.0 => __y_120
  # DEBUG __xD.54242 => D#171ptD.0
  # DEBUG __xD.61603 => NULL
  goto <bb 22>;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 1, count 0, freq 4548, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       25 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_124>
  # PT = nonlocal escaped 
  __y_60 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__y_120 + 24B];
  # DEBUG D#172ptD.0 => __y_120
  # DEBUG __xD.54241 => D#172ptD.0
  # DEBUG __xD.61603 => NULL
  goto <bb 22>;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 27, next block 58, flags: (NEW, REACHABLE)
;;    pred:       22 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __y_155 = PHI <__y_121(22)>
;;    succ:       58 [100.0%]  (FALLTHRU)

;;   basic block 58, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 28, next block 29, flags: (NEW)
;;    pred:       28 [100.0%]  (FALLTHRU)
  # DEBUG thisD.54240 => NULL
  # DEBUG __xD.54239 => __y_155
  # DEBUG __j$_M_nodeD.54291 => __y_155
  # DEBUG thisD.54261 => D#345ptD.0
  # DEBUG thisD.54263 => NULL
  # DEBUG __xD.54262 => __y_55
  # DEBUG thisD.54258 => &__jD.61599
  # DEBUG __xD.54259 => NULL
  if (__y_55 == __y_155)
    goto <bb 31>;
  else
    goto <bb 29>;
;;    succ:       31 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 58, next block 30, flags: (NEW, REACHABLE)
;;    pred:       58 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.54283 => __y_155
  # DEBUG __xD.53214 => __y_155
  # DEBUG thisD.53215 => __y_155
  # DEBUG D#174ptD.0 => &__y_155->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.54285 => D#174ptD.0
  # DEBUG thisD.54284 => D#173ptD.0
  # DEBUG D#336ptD.0 => &MEM[(const struct pairD.37146 &)__y_155 + 32].firstD.42483
  # DEBUG D#338ptD.0 => &MEM[(const struct _Rb_treeD.41462 *)D#345ptD.0]._M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#338ptD.0
  # DEBUG D#96ptD.0 => &inD.42533
  # VUSE <.MEM_124>
  _62 = MEM[(const intD.9 &)__y_155 + 32];
  # DEBUG D#97ptD.0 => D#336ptD.0
  # DEBUG thisD.54281 => D#95ptD.0
  # DEBUG __xD.54280 => D#96ptD.0
  # DEBUG __yD.54279 => D#97ptD.0
  if (in.103_5 < _62)
    goto <bb 31>;
  else
    goto <bb 30>;
;;    succ:       31 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of incoming frequencies 383, should be 0
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_42 = VDEF <.MEM_124>
  # USE = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  # CLB = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  __assert_failD.14402 ("_out_req[out].count(in) == 0", "allocators/allocator.cpp", 322, &_ZZN15SparseAllocator10AddRequestEiiiiiE19__PRETTY_FUNCTION__D.42541);
;;    succ:      

;;   basic block 31, loop depth 0, count 0, freq 899, maybe hot
;;   Invalid sum of incoming frequencies 518, should be 899
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       58 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#760ptD.0 => &this_6(D)->_in_reqD.37895
  # DEBUG D#85ptD.0 => D#760ptD.0
  # DEBUG __nD.61614 => _13
  # DEBUG thisD.61615 => D#85ptD.0
  # DEBUG thisD.61610 => NULL
  # VUSE <.MEM_124>
  _69 = MEM[(long unsigned intD.14 *)_54 + 40B];
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.61611 => D#93ptD.0
  if (_69 == 0)
    goto <bb 32>;
  else
    goto <bb 33>;
;;    succ:       32 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 261, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       31 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#761ptD.0 => &this_6(D)->_in_occD.37144
  # DEBUG thisD.61617 => D#761ptD.0
  # DEBUG __xD.61618 => &inD.42533
  # PT = nonlocal 
  _70 = &MEM[(struct setD.36306 *)this_6(D) + 160B]._M_tD.36318;
  # .MEM_78 = VDEF <.MEM_124>
  # USE = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  # CLB = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  __pD.61619 = _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueERKiD.36754 (_70, &inD.42533);
  # DEBUG thisD.61621 => NULL
  # DEBUG __itD.61620 => &__pD.61619.firstD.43973
  # DEBUG D#779ptD.0 => MEM[(const struct iteratorD.42550 &)&__pD.61619]._M_nodeD.44008
  # DEBUG thisD.61624 => NULL
  # DEBUG __aD.61623 => NULL
  # DEBUG __bD.61622 => &__pD.61619.secondD.44020
  # DEBUG D#778ptD.0 => MEM[(const boolD.2757 &)&__pD.61619 + 8]
  # DEBUG D#777ptD.0 => VIEW_CONVERT_EXPR<unsigned char>(D#778ptD.0)
  # .MEM_81 = VDEF <.MEM_78>
  __pD.61619 ={v} {CLOBBER};
  # DEBUG D.61650 => D#779ptD.0
  # DEBUG D.61651 => D#777ptD.0
  # VUSE <.MEM_81>
  pretmp_152 = outD.42534;
  pretmp_154 = (long unsigned intD.14) pretmp_152;
  # VUSE <.MEM_81>
  pretmp_153 = MEM[(struct mapD.37148 * *)this_6(D) + 280B];
  pretmp_166 = pretmp_154 * 48;
  pretmp_109 = pretmp_153 + pretmp_166;
;;    succ:       33 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       31 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_124(31), .MEM_81(32)>
  # prephitmp_165 = PHI <out.102_4(31), pretmp_152(32)>
  # PT = nonlocal escaped 
  # prephitmp_142 = PHI <_68(31), pretmp_109(32)>
  # DEBUG D#916ptD.0 => outD.42534
  # DEBUG D#762ptD.0 => &this_6(D)->_out_reqD.37896
  # DEBUG D#85ptD.0 => D#762ptD.0
  # DEBUG __nD.61630 => (long unsigned intD.14) D#916ptD.0
  # DEBUG thisD.61631 => D#85ptD.0
  # DEBUG thisD.61626 => NULL
  # VUSE <.MEM_1>
  _22 = MEM[(long unsigned intD.14 *)prephitmp_142 + 40B];
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.61627 => D#93ptD.0
  if (_22 == 0)
    goto <bb 34>;
  else
    goto <bb 35>;
;;    succ:       34 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       33 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#763ptD.0 => &this_6(D)->_out_occD.37145
  # DEBUG thisD.61633 => D#763ptD.0
  # DEBUG __xD.61634 => &outD.42534
  # PT = nonlocal 
  _73 = &MEM[(struct setD.36306 *)this_6(D) + 208B]._M_tD.36318;
  # .MEM_82 = VDEF <.MEM_1>
  # USE = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  # CLB = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  __pD.61635 = _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE16_M_insert_uniqueERKiD.36754 (_73, &outD.42534);
  # DEBUG thisD.61637 => NULL
  # DEBUG __itD.61636 => &__pD.61635.firstD.43973
  # DEBUG D#776ptD.0 => MEM[(const struct iteratorD.42550 &)&__pD.61635]._M_nodeD.44008
  # DEBUG thisD.61640 => NULL
  # DEBUG __aD.61639 => NULL
  # DEBUG __bD.61638 => &__pD.61635.secondD.44020
  # DEBUG D#775ptD.0 => MEM[(const boolD.2757 &)&__pD.61635 + 8]
  # DEBUG D#774ptD.0 => VIEW_CONVERT_EXPR<unsigned char>(D#775ptD.0)
  # .MEM_85 = VDEF <.MEM_82>
  __pD.61635 ={v} {CLOBBER};
  # DEBUG D.61652 => D#776ptD.0
  # DEBUG D.61653 => D#774ptD.0
  # VUSE <.MEM_85>
  pretmp_41 = outD.42534;
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       33 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                34 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2 = PHI <.MEM_1(33), .MEM_85(34)>
  # prephitmp_156 = PHI <prephitmp_165(33), pretmp_41(34)>
  # DEBUG D#915ptD.0 => outD.42534
  # DEBUG req$portD.61654 => D#915ptD.0
  # DEBUG req$labelD.61655 => label_8(D)
  # DEBUG req$in_priD.61656 => in_pri_9(D)
  # DEBUG req$out_priD.61657 => out_pri_10(D)
  # VUSE <.MEM_2>
  in.103_29 = inD.42533;
  # RANGE ~[2147483648, 18446744071562067967]
  _30 = (long unsigned intD.14) in.103_29;
  # DEBUG D#764ptD.0 => &this_6(D)->_in_reqD.37895
  # VUSE <.MEM_2>
  # PT = nonlocal escaped 
  _47 = MEM[(struct mapD.37148 * *)this_6(D) + 256B];
  # DEBUG D#85ptD.0 => D#764ptD.0
  # DEBUG __nD.61643 => _30
  # DEBUG thisD.61644 => D#85ptD.0
  # RANGE [0, 18446744073709551568] NONZERO 18446744073709551600
  _74 = _30 * 48;
  # PT = nonlocal escaped 
  _75 = _47 + _74;
  # DEBUG thisD.64639 => _75
  # DEBUG __kD.64640 => &outD.42534
  # DEBUG thisD.64653 => _75
  # DEBUG __xD.64652 => &outD.42534
  # DEBUG D#350ptD.0 => &_75->_M_tD.41463
  # DEBUG thisD.64655 => D#350ptD.0
  # DEBUG __kD.64654 => &outD.42534
  # DEBUG thisD.64656 => D#350ptD.0
  # PT = nonlocal escaped 
  __i$_M_node_40 = &MEM[(struct _Rb_treeD.41462 *)_75]._M_implD.41540._M_headerD.41695;
  # VUSE <.MEM_2>
  # PT = nonlocal escaped 
  __i$_M_node_106 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_75 + 16B];
  # DEBUG D#91ptD.0 => D#350ptD.0
  # DEBUG thisD.54424 => D#91ptD.0
  # DEBUG D#349ptD.0 => D#350ptD.0
  # DEBUG __xD.64660 => NULL
  # DEBUG __yD.64659 => NULL
  # DEBUG __kD.64658 => &outD.42534
  # DEBUG __yD.64659 => __i$_M_node_40
  # DEBUG __xD.64660 => __i$_M_node_106
  if (__i$_M_node_106 == 0B)
    goto <bb 54>;
  else
    goto <bb 38>;
;;    succ:       54 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 36, loop depth 1, count 0, freq 9093, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       40 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_51 = PHI <__i$_M_node_110(40), __i$_M_node_111(41)>
  # PT = nonlocal escaped 
  # __i$_M_node_52 = PHI <__i$_M_node_115(40), __i$_M_node_98(41)>
  # DEBUG __yD.64659 => __i$_M_node_52
  # DEBUG __xD.64660 => __i$_M_node_51
  if (__i$_M_node_51 == 0B)
    goto <bb 42>;
  else
    goto <bb 37>;
;;    succ:       42 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 37, loop depth 1, count 0, freq 8275, maybe hot
;;    prev block 36, next block 38, flags: (NEW)
;;    pred:       36 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 39>;
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       35 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 1, count 0, freq 9093, maybe hot
;;    prev block 38, next block 40, flags: (NEW)
;;    pred:       38 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_115 = PHI <__i$_M_node_106(38), __i$_M_node_51(37)>
  # PT = nonlocal escaped 
  # __i$_M_node_98 = PHI <__i$_M_node_40(38), __i$_M_node_52(37)>
  # DEBUG __yD.64659 => __i$_M_node_98
  # DEBUG __xD.64660 => __i$_M_node_115
  # DEBUG __xD.54403 => __i$_M_node_115
  # DEBUG __xD.54209 => __i$_M_node_115
  # DEBUG thisD.54210 => __i$_M_node_115
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__i$_M_node_115]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54405 => D#331ptD.0
  # DEBUG thisD.54404 => D#173ptD.0
  # DEBUG D#346ptD.0 => &MEM[(const struct pairD.37146 &)__i$_M_node_115 + 32].firstD.42483
  # DEBUG D#347ptD.0 => &D#348ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#347ptD.0
  # VUSE <.MEM_2>
  _108 = MEM[(const intD.9 &)__i$_M_node_115 + 32];
  # DEBUG D#96ptD.0 => D#346ptD.0
  # DEBUG D#97ptD.0 => &outD.42534
  # DEBUG thisD.54406 => D#95ptD.0
  # DEBUG __xD.54407 => D#96ptD.0
  # DEBUG __yD.54408 => D#97ptD.0
  if (_108 >= prephitmp_156)
    goto <bb 40>;
  else
    goto <bb 41>;
;;    succ:       40 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                41 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 1, count 0, freq 4546, maybe hot
;;    prev block 39, next block 41, flags: (NEW, REACHABLE)
;;    pred:       39 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.64659 => __i$_M_node_115
  # VUSE <.MEM_2>
  # PT = nonlocal escaped 
  __i$_M_node_110 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_115 + 16B];
  # DEBUG D#108ptD.0 => __i$_M_node_115
  # DEBUG __xD.54402 => D#108ptD.0
  # DEBUG __xD.64660 => NULL
  goto <bb 36>;
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 41, loop depth 1, count 0, freq 4546, maybe hot
;;    prev block 40, next block 42, flags: (NEW, REACHABLE)
;;    pred:       39 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2>
  # PT = nonlocal escaped 
  __i$_M_node_111 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_115 + 24B];
  # DEBUG D#107ptD.0 => __i$_M_node_115
  # DEBUG __xD.54401 => D#107ptD.0
  # DEBUG __xD.64660 => NULL
  goto <bb 36>;
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 41, next block 57, flags: (NEW, REACHABLE)
;;    pred:       36 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_161 = PHI <__i$_M_node_52(36)>
;;    succ:       57 [100.0%]  (FALLTHRU)

;;   basic block 57, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 42, next block 43, flags: (NEW)
;;    pred:       42 [100.0%]  (FALLTHRU)
  # DEBUG thisD.54400 => NULL
  # DEBUG __xD.54399 => __i$_M_node_161
  # DEBUG __i$_M_nodeD.64663 => __i$_M_node_161
  # DEBUG thisD.61519 => _75
  # DEBUG D#176ptD.0 => &_75->_M_tD.41463
  # DEBUG thisD.61520 => D#176ptD.0
  # DEBUG thisD.53244 => NULL
  # DEBUG __xD.53243 => __i$_M_node_40
  # DEBUG thisD.61516 => &__iD.64641
  # DEBUG __xD.61517 => NULL
  if (__i$_M_node_40 == __i$_M_node_161)
    goto <bb 54>;
  else
    goto <bb 43>;
;;    succ:       54 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                43 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 43, loop depth 0, count 0, freq 764, maybe hot
;;    prev block 57, next block 44, flags: (NEW, REACHABLE)
;;    pred:       57 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.61543 => &__iD.64641
  # DEBUG thisD.61544 => __i$_M_node_161
  # DEBUG D#753ptD.0 => &MEM[(struct _Rb_tree_nodeD.41466 *)__i$_M_node_161]._M_value_fieldD.43957
  # DEBUG __rD.53249 => D#753ptD.0
  # DEBUG D#754ptD.0 => &MEM[(struct pairD.37146 &)__i$_M_node_161 + 32].firstD.42483
  # DEBUG D#131ptD.0 => _75
  # DEBUG thisD.61540 => D#131ptD.0
  # DEBUG D#130ptD.0 => D#131ptD.0
  # DEBUG D#129ptD.0 => &D#130ptD.0->_M_tD.41463
  # DEBUG D#128ptD.0 => D#129ptD.0
  # DEBUG thisD.52957 => D#128ptD.0
  # DEBUG D#96ptD.0 => &outD.42534
  # VUSE <.MEM_2>
  _114 = MEM[(const intD.9 &)__i$_M_node_161 + 32];
  # DEBUG D#97ptD.0 => D#754ptD.0
  # DEBUG thisD.61538 => D#95ptD.0
  # DEBUG __xD.61537 => D#96ptD.0
  # DEBUG __yD.61536 => D#97ptD.0
  if (_114 > prephitmp_156)
    goto <bb 54>;
  else
    goto <bb 44>;
;;    succ:       54 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 44, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 43, next block 45, flags: (NEW, REACHABLE)
;;    pred:       43 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                54 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_119 = PHI <__i$_M_node_161(43), __i$_M_node_118(54)>
  # .MEM_33 = PHI <.MEM_2(43), .MEM_132(54)>
  # prephitmp_34 = PHI <in.103_29(43), pretmp_163(54)>
  # prephitmp_92 = PHI <prephitmp_156(43), pretmp_116(54)>
  # DEBUG __i$_M_nodeD.64663 => __i$_M_node_119
  # DEBUG thisD.61561 => &__iD.64641
  # DEBUG thisD.61562 => __i$_M_node_119
  # DEBUG D#755ptD.0 => &MEM[(struct _Rb_tree_nodeD.41466 *)__i$_M_node_119]._M_value_fieldD.43957
  # DEBUG __rD.53249 => D#755ptD.0
  # DEBUG D#757ptD.0 => {CLOBBER}
  # DEBUG __i$_M_nodeD.64663 => D#757ptD.0
  # .MEM_28 = VDEF <.MEM_33>
  MEM[(struct mapped_typeD.41247 *)__i$_M_node_119 + 36B] = prephitmp_156;
  # .MEM_86 = VDEF <.MEM_28>
  MEM[(struct mapped_typeD.41247 *)__i$_M_node_119 + 40B] = label_8(D);
  # .MEM_84 = VDEF <.MEM_86>
  MEM[(struct mapped_typeD.41247 *)__i$_M_node_119 + 44B] = in_pri_9(D);
  # .MEM_83 = VDEF <.MEM_84>
  MEM[(struct mapped_typeD.41247 *)__i$_M_node_119 + 48B] = out_pri_10(D);
  # DEBUG D#914ptD.0 => inD.42533
  # DEBUG req$portD.61654 => D#914ptD.0
  # RANGE ~[2147483648, 18446744071562067967]
  _37 = (long unsigned intD.14) prephitmp_92;
  # DEBUG D#765ptD.0 => &this_6(D)->_out_reqD.37896
  # VUSE <.MEM_83>
  # PT = nonlocal escaped 
  _48 = MEM[(struct mapD.37148 * *)this_6(D) + 280B];
  # DEBUG D#85ptD.0 => D#765ptD.0
  # DEBUG __nD.61647 => _37
  # DEBUG thisD.61648 => D#85ptD.0
  # RANGE [0, 18446744073709551568] NONZERO 18446744073709551600
  _76 = _37 * 48;
  # PT = nonlocal escaped 
  _77 = _48 + _76;
  # DEBUG thisD.64612 => _77
  # DEBUG __kD.64613 => &inD.42533
  # DEBUG thisD.64626 => _77
  # DEBUG __xD.64625 => &inD.42533
  # DEBUG D#350ptD.0 => &_77->_M_tD.41463
  # DEBUG thisD.64628 => D#350ptD.0
  # DEBUG __kD.64627 => &inD.42533
  # DEBUG thisD.64629 => D#350ptD.0
  # PT = nonlocal escaped 
  __i$_M_node_11 = &MEM[(struct _Rb_treeD.41462 *)_77]._M_implD.41540._M_headerD.41695;
  # VUSE <.MEM_83>
  # PT = nonlocal escaped 
  __i$_M_node_89 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_77 + 16B];
  # DEBUG D#91ptD.0 => D#350ptD.0
  # DEBUG thisD.54424 => D#91ptD.0
  # DEBUG D#349ptD.0 => D#350ptD.0
  # DEBUG __xD.64633 => NULL
  # DEBUG __yD.64632 => NULL
  # DEBUG __kD.64631 => &inD.42533
  # DEBUG __yD.64632 => __i$_M_node_11
  # DEBUG __xD.64633 => __i$_M_node_89
  if (__i$_M_node_89 == 0B)
    goto <bb 55>;
  else
    goto <bb 47>;
;;    succ:       55 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 45, loop depth 1, count 0, freq 9093, maybe hot
;;    prev block 44, next block 46, flags: (NEW, REACHABLE)
;;    pred:       49 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                50 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_65 = PHI <__i$_M_node_93(49), __i$_M_node_94(50)>
  # PT = nonlocal escaped 
  # __i$_M_node_66 = PHI <__i$_M_node_170(49), __i$_M_node_160(50)>
  # DEBUG __yD.64632 => __i$_M_node_66
  # DEBUG __xD.64633 => __i$_M_node_65
  if (__i$_M_node_65 == 0B)
    goto <bb 51>;
  else
    goto <bb 46>;
;;    succ:       51 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                46 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 46, loop depth 1, count 0, freq 8275, maybe hot
;;    prev block 45, next block 47, flags: (NEW)
;;    pred:       45 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 48>;
;;    succ:       48 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 47, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 46, next block 48, flags: (NEW, REACHABLE)
;;    pred:       44 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       48 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 48, loop depth 1, count 0, freq 9093, maybe hot
;;    prev block 47, next block 49, flags: (NEW)
;;    pred:       47 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                46 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_170 = PHI <__i$_M_node_89(47), __i$_M_node_65(46)>
  # PT = nonlocal escaped 
  # __i$_M_node_160 = PHI <__i$_M_node_11(47), __i$_M_node_66(46)>
  # DEBUG __yD.64632 => __i$_M_node_160
  # DEBUG __xD.64633 => __i$_M_node_170
  # DEBUG __xD.54403 => __i$_M_node_170
  # DEBUG __xD.54209 => __i$_M_node_170
  # DEBUG thisD.54210 => __i$_M_node_170
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__i$_M_node_170]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54405 => D#331ptD.0
  # DEBUG thisD.54404 => D#173ptD.0
  # DEBUG D#346ptD.0 => &MEM[(const struct pairD.37146 &)__i$_M_node_170 + 32].firstD.42483
  # DEBUG D#347ptD.0 => &D#348ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#347ptD.0
  # VUSE <.MEM_83>
  _91 = MEM[(const intD.9 &)__i$_M_node_170 + 32];
  # DEBUG D#96ptD.0 => D#346ptD.0
  # DEBUG D#97ptD.0 => &inD.42533
  # DEBUG thisD.54406 => D#95ptD.0
  # DEBUG __xD.54407 => D#96ptD.0
  # DEBUG __yD.54408 => D#97ptD.0
  if (prephitmp_34 <= _91)
    goto <bb 49>;
  else
    goto <bb 50>;
;;    succ:       49 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                50 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 49, loop depth 1, count 0, freq 4546, maybe hot
;;    prev block 48, next block 50, flags: (NEW, REACHABLE)
;;    pred:       48 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.64632 => __i$_M_node_170
  # VUSE <.MEM_83>
  # PT = nonlocal escaped 
  __i$_M_node_93 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_170 + 16B];
  # DEBUG D#108ptD.0 => __i$_M_node_170
  # DEBUG __xD.54402 => D#108ptD.0
  # DEBUG __xD.64633 => NULL
  goto <bb 45>;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 50, loop depth 1, count 0, freq 4546, maybe hot
;;    prev block 49, next block 51, flags: (NEW, REACHABLE)
;;    pred:       48 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_83>
  # PT = nonlocal escaped 
  __i$_M_node_94 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_170 + 24B];
  # DEBUG D#107ptD.0 => __i$_M_node_170
  # DEBUG __xD.54401 => D#107ptD.0
  # DEBUG __xD.64633 => NULL
  goto <bb 45>;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 51, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 50, next block 56, flags: (NEW, REACHABLE)
;;    pred:       45 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_158 = PHI <__i$_M_node_66(45)>
;;    succ:       56 [100.0%]  (FALLTHRU)

;;   basic block 56, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 51, next block 52, flags: (NEW)
;;    pred:       51 [100.0%]  (FALLTHRU)
  # DEBUG thisD.54400 => NULL
  # DEBUG __xD.54399 => __i$_M_node_158
  # DEBUG __i$_M_nodeD.64636 => __i$_M_node_158
  # DEBUG thisD.61519 => _77
  # DEBUG D#176ptD.0 => &_77->_M_tD.41463
  # DEBUG thisD.61520 => D#176ptD.0
  # DEBUG thisD.53244 => NULL
  # DEBUG __xD.53243 => __i$_M_node_11
  # DEBUG thisD.61516 => &__iD.64614
  # DEBUG __xD.61517 => NULL
  if (__i$_M_node_11 == __i$_M_node_158)
    goto <bb 55>;
  else
    goto <bb 52>;
;;    succ:       55 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                52 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 52, loop depth 0, count 0, freq 764, maybe hot
;;    prev block 56, next block 53, flags: (NEW, REACHABLE)
;;    pred:       56 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.61543 => &__iD.64614
  # DEBUG thisD.61544 => __i$_M_node_158
  # DEBUG D#753ptD.0 => &MEM[(struct _Rb_tree_nodeD.41466 *)__i$_M_node_158]._M_value_fieldD.43957
  # DEBUG __rD.53249 => D#753ptD.0
  # DEBUG D#754ptD.0 => &MEM[(struct pairD.37146 &)__i$_M_node_158 + 32].firstD.42483
  # DEBUG D#131ptD.0 => _77
  # DEBUG thisD.61540 => D#131ptD.0
  # DEBUG D#130ptD.0 => D#131ptD.0
  # DEBUG D#129ptD.0 => &D#130ptD.0->_M_tD.41463
  # DEBUG D#128ptD.0 => D#129ptD.0
  # DEBUG thisD.52957 => D#128ptD.0
  # DEBUG D#96ptD.0 => &inD.42533
  # VUSE <.MEM_83>
  _97 = MEM[(const intD.9 &)__i$_M_node_158 + 32];
  # DEBUG D#97ptD.0 => D#754ptD.0
  # DEBUG thisD.61538 => D#95ptD.0
  # DEBUG __xD.61537 => D#96ptD.0
  # DEBUG __yD.61536 => D#97ptD.0
  if (prephitmp_34 < _97)
    goto <bb 55>;
  else
    goto <bb 53>;
;;    succ:       55 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                53 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 53, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 52, next block 60, flags: (NEW, REACHABLE)
;;    pred:       52 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                55 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_102 = PHI <__i$_M_node_158(52), __i$_M_node_101(55)>
  # .MEM_123 = PHI <.MEM_83(52), .MEM_141(55)>
;;    succ:       60 [100.0%]  (FALLTHRU)

;;   basic block 60, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 53, next block 54, flags: (NEW)
;;    pred:       53 [100.0%]  (FALLTHRU)
  # DEBUG __i$_M_nodeD.64636 => __i$_M_node_102
  # DEBUG thisD.61561 => &__iD.64614
  # DEBUG thisD.61562 => __i$_M_node_102
  # DEBUG D#755ptD.0 => &MEM[(struct _Rb_tree_nodeD.41466 *)__i$_M_node_102]._M_value_fieldD.43957
  # DEBUG __rD.53249 => D#755ptD.0
  # DEBUG D#757ptD.0 => {CLOBBER}
  # DEBUG __i$_M_nodeD.64636 => D#757ptD.0
  # .MEM_80 = VDEF <.MEM_123>
  MEM[(struct mapped_typeD.41247 *)__i$_M_node_102 + 36B] = prephitmp_34;
  # .MEM_79 = VDEF <.MEM_80>
  MEM[(struct mapped_typeD.41247 *)__i$_M_node_102 + 40B] = label_8(D);
  # .MEM_38 = VDEF <.MEM_79>
  MEM[(struct mapped_typeD.41247 *)__i$_M_node_102 + 44B] = in_pri_9(D);
  # .MEM_31 = VDEF <.MEM_38>
  MEM[(struct mapped_typeD.41247 *)__i$_M_node_102 + 48B] = out_pri_10(D);
  # DEBUG D#766ptD.0 => {CLOBBER}
  # DEBUG req$portD.61654 => D#766ptD.0
  # DEBUG D#767ptD.0 => {CLOBBER}
  # DEBUG req$labelD.61655 => D#767ptD.0
  # DEBUG D#768ptD.0 => {CLOBBER}
  # DEBUG req$in_priD.61656 => D#768ptD.0
  # DEBUG D#769ptD.0 => {CLOBBER}
  # DEBUG req$out_priD.61657 => D#769ptD.0
  # VUSE <.MEM_31>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 54, loop depth 0, count 0, freq 517, maybe hot
;;    prev block 60, next block 55, flags: (NEW, REACHABLE)
;;    pred:       43 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                57 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_147 = PHI <__i$_M_node_161(43), __i$_M_node_161(57), __i$_M_node_40(35)>
  # DEBUG thisD.64644 => &D.64665
  # DEBUG __aD.64643 => &outD.42534
  # DEBUG __bD.64642 => NULL
  # .MEM_125 = VDEF <.MEM_2>
  D.64665.firstD.42483 = prephitmp_156;
  # .MEM_126 = VDEF <.MEM_125>
  MEM[(struct pairD.37146 *)&D.64665 + 4B] = 0;
  # .MEM_127 = VDEF <.MEM_126>
  MEM[(struct pairD.37146 *)&D.64665 + 8B] = 0;
  # .MEM_128 = VDEF <.MEM_127>
  MEM[(struct pairD.37146 *)&D.64665 + 12B] = 0;
  # .MEM_129 = VDEF <.MEM_128>
  MEM[(struct pairD.37146 *)&D.64665 + 16B] = 0;
  # DEBUG thisD.64647 => _75
  # DEBUG __position$_M_nodeD.61574 => __i$_M_node_147
  # DEBUG __xD.64645 => &D.64665
  # DEBUG thisD.61550 => NULL
  # DEBUG __itD.61549 => &__positionD.64646
  # PT = nonlocal escaped 
  _117 = &_75->_M_tD.41463;
  # DEBUG thisD.64650 => _117
  # .MEM_130 = VDEF <.MEM_129>
  MEM[(struct _Rb_tree_const_iteratorD.41769 *)&__posD.64649] = __i$_M_node_147;
  # DEBUG __xD.64648 => &D.64665
  # DEBUG thisD.61510 => &__anD.64651
  # DEBUG __tD.61509 => _117
  # DEBUG __an$_M_tD.61503 => _117
  # DEBUG D#752ptD.0 => &__anD.64651
  # .MEM_131 = VDEF <.MEM_130>
  # USE = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  # CLB = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  D.64664 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE17_M_insert_unique_INSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_ERKS4_RT_.isra.197.constprop.200D.62239 (_117, __posD.64649, &D.64665);
  # VUSE <.MEM_131>
  # PT = nonlocal escaped 
  __i$_M_node_118 = MEM[(struct _Rb_tree_iteratorD.41767 *)&D.64664];
  # DEBUG __i$_M_nodeD.64663 => __i$_M_node_118
  # .MEM_132 = VDEF <.MEM_131>
  D.64665 ={v} {CLOBBER};
  # VUSE <.MEM_132>
  pretmp_163 = inD.42533;
  # VUSE <.MEM_132>
  pretmp_116 = outD.42534;
  goto <bb 44>;
;;    succ:       44 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 55, loop depth 0, count 0, freq 517, maybe hot
;;    prev block 54, next block 1, flags: (NEW, REACHABLE)
;;    pred:       52 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                56 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_49 = PHI <__i$_M_node_158(52), __i$_M_node_158(56), __i$_M_node_11(44)>
  # DEBUG thisD.64617 => &D.64638
  # DEBUG __aD.64616 => &inD.42533
  # DEBUG __bD.64615 => NULL
  # .MEM_134 = VDEF <.MEM_83>
  D.64638.firstD.42483 = prephitmp_34;
  # .MEM_135 = VDEF <.MEM_134>
  MEM[(struct pairD.37146 *)&D.64638 + 4B] = 0;
  # .MEM_136 = VDEF <.MEM_135>
  MEM[(struct pairD.37146 *)&D.64638 + 8B] = 0;
  # .MEM_137 = VDEF <.MEM_136>
  MEM[(struct pairD.37146 *)&D.64638 + 12B] = 0;
  # .MEM_138 = VDEF <.MEM_137>
  MEM[(struct pairD.37146 *)&D.64638 + 16B] = 0;
  # DEBUG thisD.64620 => _77
  # DEBUG __position$_M_nodeD.61574 => __i$_M_node_49
  # DEBUG __xD.64618 => &D.64638
  # DEBUG thisD.61550 => NULL
  # DEBUG __itD.61549 => &__positionD.64619
  # PT = nonlocal escaped 
  _100 = &_77->_M_tD.41463;
  # DEBUG thisD.64623 => _100
  # .MEM_139 = VDEF <.MEM_138>
  MEM[(struct _Rb_tree_const_iteratorD.41769 *)&__posD.64622] = __i$_M_node_49;
  # DEBUG __xD.64621 => &D.64638
  # DEBUG thisD.61510 => &__anD.64624
  # DEBUG __tD.61509 => _100
  # DEBUG __an$_M_tD.61503 => _100
  # DEBUG D#752ptD.0 => &__anD.64624
  # .MEM_140 = VDEF <.MEM_139>
  # USE = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  # CLB = nonlocal null { D.40256 D.42533 D.42534 D.42541 D.64638 D.64665 } (nonlocal, escaped)
  D.64637 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE17_M_insert_unique_INSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_ERKS4_RT_.isra.197.constprop.200D.62239 (_100, __posD.64622, &D.64638);
  # VUSE <.MEM_140>
  # PT = nonlocal escaped 
  __i$_M_node_101 = MEM[(struct _Rb_tree_iteratorD.41767 *)&D.64637];
  # DEBUG __i$_M_nodeD.64636 => __i$_M_node_101
  # .MEM_141 = VDEF <.MEM_140>
  D.64638 ={v} {CLOBBER};
  goto <bb 53>;
;;    succ:       53 [100.0%]  (FALLTHRU,EXECUTABLE)

}



;; Function std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::erase(const _Key&) [with _Key = int; _Val = std::pair<const int, Allocator::sRequest>; _KeyOfValue = std::_Select1st<std::pair<const int, Allocator::sRequest> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, Allocator::sRequest> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type = long unsigned int] (_ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE5eraseERS1_, funcdef_no=2060, decl_uid=41961, cgraph_uid=730, symbol_order=731)


Pass statistics:
----------------

std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::erase(const _Key&) [with _Key = int; _Val = std::pair<const int, Allocator::sRequest>; _KeyOfValue = std::_Select1st<std::pair<const int, Allocator::sRequest> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, Allocator::sRequest> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type = long unsigned int] (struct _Rb_treeD.41462 * const thisD.41962, const intD.9 & __xD.41963)
{
  struct _Rb_tree_node_baseD.24800 * SR.1410D.64792;
  struct _Rb_tree_node_baseD.24800 * SR.1409D.64791;
  struct _Rb_tree_node_baseD.24800 * const __p$8D.64790;
  struct _Rb_tree_node_baseD.24800 * const __pD.64789;
  struct _Rb_tree_nodeD.41466 * __yD.64777;
  struct const_iteratorD.41768 __positionD.64776;
  struct pairD.41999 D.64726;
  struct _Rb_tree_nodeD.41466 * __xD.64703;
  struct const_iteratorD.41768 __positionD.64692;
  const struct _Rb_tree_node_baseD.24800 * const __first$_M_nodeD.64700;
  const struct _Rb_tree_node_baseD.24800 * const __last$_M_nodeD.64699;
  struct const_iteratorD.41768 __firstD.64687;
  struct const_iteratorD.41768 __lastD.64688;
  struct _Rb_tree_node_baseD.24800 * const __last$_M_nodeD.58126;
  struct _Rb_tree_node_baseD.24800 * const __first$_M_nodeD.58125;
  struct const_iteratorD.41768 D.58121;
  struct const_iteratorD.41768 D.58120;
  struct pairD.41999 __pD.44702;
  const size_typeD.41494 _7;
  struct _Rb_tree_node_baseD.24800 * _18;
  boolD.2757 _19;
  const intD.9 _26;
  boolD.2757 prephitmp_32;
  const intD.9 _33;
  const intD.9 _37;
  size_typeD.41494 prephitmp_40;
  const intD.9 pretmp_41;
  long unsigned intD.14 _42;
  boolD.2757 _53;
  long unsigned intD.14 _55;
  long unsigned intD.14 _56;
  size_typeD.41494 pretmp_57;
  boolD.2757 pretmp_65;
  boolD.2757 pretmp_77;
  boolD.2757 prephitmp_96;

;;   basic block 2, loop depth 0, count 0, freq 670, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.64701 => this_2(D)
  # DEBUG __kD.64702 => __x_3(D)
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_13 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_2(D) + 16B];
  # DEBUG D#91ptD.0 => this_2(D)
  # DEBUG thisD.54488 => D#91ptD.0
  # DEBUG __xD.64703 => NULL
  # DEBUG thisD.64712 => this_2(D)
  # PT = nonlocal 
  __p_24 = &this_2(D)->_M_implD.41540._M_headerD.41695;
  # DEBUG __yD.64704 => NULL
  # DEBUG __yD.64704 => __p_24
  # DEBUG __xD.64703 => __p_13
  if (__p_13 == 0B)
    goto <bb 28>;
  else
    goto <bb 3>;
;;    succ:       28 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 640, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1(D)>
  pretmp_41 = *__x_3(D);
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 9340, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_50 = PHI <__p_28(8), __p_29(10)>
  # PT = nonlocal escaped 
  # __p_49 = PHI <__p_80(8), __p_68(10)>
  # DEBUG __yD.64704 => __p_49
  # DEBUG __xD.64703 => __p_50
  if (__p_50 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 420, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_51 = PHI <__p_49(4)>
  pretmp_77 = __p_24 == __p_51;
  goto <bb 28>;
;;    succ:       28 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8920, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       4 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9550, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_68 = PHI <__p_13(3), __p_50(6)>
  # PT = nonlocal escaped 
  # __p_80 = PHI <__p_24(3), __p_49(6)>
  # DEBUG __yD.64704 => __p_80
  # DEBUG __xD.64703 => __p_68
  # DEBUG __xD.54496 => __p_68
  # DEBUG __xD.54209 => __p_68
  # DEBUG thisD.54210 => __p_68
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__p_68]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54498 => D#331ptD.0
  # DEBUG thisD.54497 => D#173ptD.0
  # DEBUG D#355ptD.0 => &MEM[(const struct pairD.37146 &)__p_68 + 32].firstD.42483
  # DEBUG D#358ptD.0 => &this_2(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#358ptD.0
  # VUSE <.MEM_1(D)>
  _26 = MEM[(const intD.9 &)__p_68 + 32];
  # DEBUG D#96ptD.0 => D#355ptD.0
  # DEBUG D#97ptD.0 => __x_3(D)
  # DEBUG thisD.54494 => D#95ptD.0
  # DEBUG __xD.54493 => D#96ptD.0
  # DEBUG __yD.54492 => D#97ptD.0
  if (_26 < pretmp_41)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 4775, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_28 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_68 + 24B];
  # DEBUG D#107ptD.0 => __p_68
  # DEBUG __xD.54501 => D#107ptD.0
  # DEBUG __xD.64703 => NULL
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 4775, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       7 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.54509 => __p_68
  # DEBUG __xD.54209 => __p_68
  # DEBUG thisD.54210 => __p_68
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__p_68]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54511 => D#331ptD.0
  # DEBUG thisD.54510 => D#173ptD.0
  # DEBUG D#356ptD.0 => &MEM[(const struct pairD.37146 &)__p_68 + 32].firstD.42483
  # DEBUG D#357ptD.0 => &this_2(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#357ptD.0
  # DEBUG D#96ptD.0 => __x_3(D)
  # DEBUG D#97ptD.0 => D#356ptD.0
  # DEBUG thisD.54507 => D#95ptD.0
  # DEBUG __xD.54506 => D#96ptD.0
  # DEBUG __yD.54505 => D#97ptD.0
  if (_26 > pretmp_41)
    goto <bb 10>;
  else
    goto <bb 11>;
;;    succ:       10 [95.5%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [4.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 4560, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [95.5%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.64704 => __p_68
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_29 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_68 + 16B];
  # DEBUG D#108ptD.0 => __p_68
  # DEBUG __xD.54514 => D#108ptD.0
  # DEBUG __xD.64703 => NULL
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 215, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       9 [4.5%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_25 = PHI <__p_68(9)>
  # PT = nonlocal escaped 
  # __p_21 = PHI <__p_80(9)>
  # DEBUG __xuD.64713 => __p_25
  # DEBUG __yuD.64714 => __p_21
  # DEBUG __yD.64704 => __p_25
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_30 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_25 + 16B];
  # DEBUG D#108ptD.0 => __p_25
  # DEBUG __xD.54535 => D#108ptD.0
  # DEBUG __xD.64703 => NULL
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_31 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_25 + 24B];
  # DEBUG D#107ptD.0 => __p_25
  # DEBUG __xD.54532 => D#107ptD.0
  # DEBUG __xuD.64713 => NULL
  # DEBUG D#354ptD.0 => this_2(D)
  # DEBUG __xD.64718 => NULL
  # DEBUG __yD.64717 => __p_21
  # DEBUG __kD.64716 => __x_3(D)
  # DEBUG __yD.64717 => __p_21
  # DEBUG __xD.64718 => __p_31
  if (__p_31 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 2173, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       18 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_46 = PHI <__p_34(18), __p_35(19)>
  # PT = nonlocal escaped 
  # __p_45 = PHI <__p_20(18), __p_81(19)>
  # DEBUG __yD.64717 => __p_45
  # DEBUG __xD.64718 => __p_46
  if (__p_46 == 0B)
    goto <bb 13>;
  else
    goto <bb 14>;
;;    succ:       13 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 196, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_58 = PHI <__p_45(12)>
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 1977, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 215, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_86 = PHI <__p_58(13), __p_21(11)>
  # DEBUG __yD.64721 => __p_25
  # DEBUG __xD.64722 => __p_30
  if (__p_30 == 0B)
    goto <bb 27>;
  else
    goto <bb 23>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 196, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       11 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 2173, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_20 = PHI <__p_31(16), __p_46(14)>
  # PT = nonlocal escaped 
  # __p_81 = PHI <__p_21(16), __p_45(14)>
  # DEBUG __yD.64717 => __p_81
  # DEBUG __xD.64718 => __p_20
  # DEBUG __xD.54470 => __p_20
  # DEBUG __xD.54209 => __p_20
  # DEBUG thisD.54210 => __p_20
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__p_20]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54472 => D#331ptD.0
  # DEBUG thisD.54471 => D#173ptD.0
  # DEBUG D#351ptD.0 => &MEM[(const struct pairD.37146 &)__p_20 + 32].firstD.42483
  # DEBUG D#352ptD.0 => &D#353ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#352ptD.0
  # DEBUG D#96ptD.0 => __x_3(D)
  # VUSE <.MEM_1(D)>
  _33 = MEM[(const intD.9 &)__p_20 + 32];
  # DEBUG D#97ptD.0 => D#351ptD.0
  # DEBUG thisD.54473 => D#95ptD.0
  # DEBUG __xD.54474 => D#96ptD.0
  # DEBUG __yD.54475 => D#97ptD.0
  if (_33 > pretmp_41)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 1, count 0, freq 1086, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.64717 => __p_20
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_34 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_20 + 16B];
  # DEBUG D#108ptD.0 => __p_20
  # DEBUG __xD.54469 => D#108ptD.0
  # DEBUG __xD.64718 => NULL
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 1086, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       17 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_35 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_20 + 24B];
  # DEBUG D#107ptD.0 => __p_20
  # DEBUG __xD.54468 => D#107ptD.0
  # DEBUG __xD.64718 => NULL
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 1, count 0, freq 2173, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_44 = PHI <__p_38(25), __p_39(26)>
  # PT = nonlocal escaped 
  # __p_43 = PHI <__p_23(25), __p_48(26)>
  # DEBUG __yD.64721 => __p_43
  # DEBUG __xD.64722 => __p_44
  if (__p_44 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 196, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_60 = PHI <__p_43(20)>
  goto <bb 27>;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 1977, maybe hot
;;    prev block 21, next block 23, flags: (NEW)
;;    pred:       20 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 196, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 1, count 0, freq 2173, maybe hot
;;    prev block 23, next block 25, flags: (NEW)
;;    pred:       23 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_23 = PHI <__p_30(23), __p_44(22)>
  # PT = nonlocal escaped 
  # __p_48 = PHI <__p_25(23), __p_43(22)>
  # DEBUG __yD.64721 => __p_48
  # DEBUG __xD.64722 => __p_23
  # DEBUG __xD.54403 => __p_23
  # DEBUG __xD.54209 => __p_23
  # DEBUG thisD.54210 => __p_23
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__p_23]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54405 => D#331ptD.0
  # DEBUG thisD.54404 => D#173ptD.0
  # DEBUG D#346ptD.0 => &MEM[(const struct pairD.37146 &)__p_23 + 32].firstD.42483
  # DEBUG D#347ptD.0 => &D#348ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#347ptD.0
  # VUSE <.MEM_1(D)>
  _37 = MEM[(const intD.9 &)__p_23 + 32];
  # DEBUG D#96ptD.0 => D#346ptD.0
  # DEBUG D#97ptD.0 => __x_3(D)
  # DEBUG thisD.54406 => D#95ptD.0
  # DEBUG __xD.54407 => D#96ptD.0
  # DEBUG __yD.54408 => D#97ptD.0
  if (_37 >= pretmp_41)
    goto <bb 25>;
  else
    goto <bb 26>;
;;    succ:       25 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 1086, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       24 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.64721 => __p_23
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_38 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_23 + 16B];
  # DEBUG D#108ptD.0 => __p_23
  # DEBUG __xD.54402 => D#108ptD.0
  # DEBUG __xD.64722 => NULL
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 1, count 0, freq 1086, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       24 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_39 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_23 + 24B];
  # DEBUG D#107ptD.0 => __p_23
  # DEBUG __xD.54401 => D#107ptD.0
  # DEBUG __xD.64722 => NULL
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 215, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       21 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_87 = PHI <__p_60(21), __p_25(15)>
  # DEBUG thisD.54400 => NULL
  # DEBUG __xD.54399 => __p_87
  # DEBUG thisD.64725 => NULL
  # DEBUG __aD.64724 => NULL
  # DEBUG __bD.64723 => NULL
  pretmp_65 = __p_24 == __p_86;
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_82 = PHI <__p_51(5), __p_24(2)>
  # prephitmp_32 = PHI <pretmp_77(5), 1(2)>
  # DEBUG thisD.64706 => NULL
  # DEBUG __xD.64705 => __p_82
  # DEBUG thisD.64708 => NULL
  # DEBUG __xD.64707 => __p_82
  # DEBUG thisD.64711 => NULL
  # DEBUG __aD.64710 => NULL
  # DEBUG __bD.64709 => NULL
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 665, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       27 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                28 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_6 = PHI <__p_87(27), __p_82(28)>
  # PT = nonlocal escaped 
  # __p$8_64 = PHI <__p_86(27), __p_82(28)>
  # prephitmp_96 = PHI <pretmp_65(27), prephitmp_32(28)>
  # DEBUG __pD.64789 => __p_6
  # DEBUG __p$8D.64790 => __p$8_64
  # VUSE <.MEM_1(D)>
  _7 = MEM[(long unsigned intD.14 *)this_2(D) + 40B];
  # DEBUG D#132ptD.0 => this_2(D)
  # DEBUG thisD.58123 => D#132ptD.0
  # DEBUG __old_sizeD.44775 => NULL
  # DEBUG thisD.58113 => this_2(D)
  # DEBUG __first$_M_nodeD.58125 => __p_6
  # DEBUG __last$_M_nodeD.58126 => __p$8_64
  # DEBUG thisD.58117 => &D.58121
  # DEBUG __itD.58116 => &__lastD.58115
  # DEBUG thisD.58119 => &D.58120
  # DEBUG __itD.58118 => &__firstD.58114
  # DEBUG thisD.64686 => this_2(D)
  # DEBUG __first$_M_nodeD.64700 => __p_6
  # DEBUG __last$_M_nodeD.64699 => __p$8_64
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _18 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_2(D) + 24B];
  # DEBUG D#359ptD.0 => this_2(D)
  # DEBUG thisD.58016 => D#359ptD.0
  # DEBUG thisD.54565 => NULL
  # DEBUG __xD.54564 => _18
  # DEBUG thisD.64698 => NULL
  # DEBUG __itD.64697 => NULL
  # DEBUG thisD.58010 => &__firstD.64687
  # DEBUG __xD.58011 => NULL
  # DEBUG thisD.64694 => this_2(D)
  # DEBUG thisD.58026 => NULL
  # DEBUG __xD.58025 => __p_24
  # DEBUG thisD.64696 => NULL
  # DEBUG __itD.64695 => NULL
  # DEBUG thisD.58019 => &__lastD.64688
  # DEBUG __xD.58020 => NULL
  _19 = __p_6 == _18;
  _53 = _19 & prephitmp_96;
  if (_53 != 0)
    goto <bb 36>;
  else
    goto <bb 30>;
;;    succ:       36 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 650, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [85.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __first$_M_nodeD.64700 => __p_6
  # DEBUG thisD.58031 => &__firstD.64687
  # DEBUG __xD.58032 => &__lastD.64688
  if (__p_6 != __p$8_64)
    goto <bb 31>;
  else
    goto <bb 35>;
;;    succ:       31 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 592, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       30 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 1, count 0, freq 5330, maybe hot
;;   Invalid sum of incoming frequencies 5442, should be 5330
;;    prev block 31, next block 33, flags: (NEW)
;;    pred:       31 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_67 = PHI <__p_6(31), __p_22(33)>
  # .MEM_83 = PHI <.MEM_1(D)(31), .MEM_71(33)>
  # DEBUG __first$_M_nodeD.64700 => __p_67
  # DEBUG thisD.58031 => &__firstD.64687
  # DEBUG __xD.58032 => &__lastD.64688
  # DEBUG D#361ptD.0 => 0
  # DEBUG thisD.64690 => &__firstD.64687
  # DEBUG D.64689 => D#361ptD.0
  # DEBUG __tmp$_M_nodeD.58040 => __p_67
  # VUSE <.MEM_83>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  __p_22 = _ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_baseD.24847 (__p_67);
  # DEBUG __first$_M_nodeD.64700 => __p_22
  # DEBUG D#360ptD.0 => {CLOBBER}
  # DEBUG __tmp$_M_nodeD.58040 => D#360ptD.0
  # DEBUG thisD.64693 => this_2(D)
  # DEBUG thisD.64775 => this_2(D)
  # .MEM_69 = VDEF <.MEM_83>
  # PT = nonlocal escaped 
  # USE = nonlocal null 
  # CLB = nonlocal null 
  __y_54 = _ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_D.25029 (__p_67, __p_24);
  # DEBUG __yD.64777 => __y_54
  # DEBUG D#548ptD.0 => this_2(D)
  # DEBUG __pD.64779 => __y_54
  # DEBUG thisD.64778 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __y_54
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.64781 => D#546ptD.0
  # DEBUG __pD.64780 => __y_54
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.64784 => __y_54
  # DEBUG __aD.64782 => D#406ptD.0
  # DEBUG __nD.64783 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.64787 => __y_54
  # DEBUG thisD.64785 => D#402ptD.0
  # DEBUG D.64786 => D#403ptD.0
  # .MEM_70 = VDEF <.MEM_69>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZdlPvD.2766 (__y_54);
  # VUSE <.MEM_70>
  _55 = this_2(D)->_M_implD.41540._M_node_countD.41696;
  # RANGE [0, 18446744073709551615]
  _56 = _55 + 18446744073709551615;
  # .MEM_71 = VDEF <.MEM_70>
  this_2(D)->_M_implD.41540._M_node_countD.41696 = _56;
  # DEBUG __first$_M_nodeD.64700 => __p_22
  # DEBUG thisD.58031 => &__firstD.64687
  # DEBUG __xD.58032 => &__lastD.64688
  if (__p_22 != __p$8_64)
    goto <bb 33>;
  else
    goto <bb 34>;
;;    succ:       33 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 33, loop depth 1, count 0, freq 4850, maybe hot
;;    prev block 32, next block 34, flags: (NEW)
;;    pred:       32 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 32>;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 480, maybe hot
;;    prev block 33, next block 35, flags: (NEW)
;;    pred:       32 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  # _42 = PHI <_56(32)>
  pretmp_57 = _7 - _42;
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 665, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       34 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                36 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                30 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_59 = PHI <.MEM_71(34), .MEM_76(36), .MEM_1(D)(30)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_40 = PHI <pretmp_57(34), _7(36), 0(30)>
  # .MEM_14 = VDEF <.MEM_59>
  D.58120 ={v} {CLOBBER};
  # .MEM_15 = VDEF <.MEM_14>
  D.58121 ={v} {CLOBBER};
  # DEBUG D#132ptD.0 => this_2(D)
  # DEBUG thisD.58111 => D#132ptD.0
  # DEBUG D#928ptD.0 => {CLOBBER}
  # DEBUG __pD.64789 => D#928ptD.0
  # DEBUG D#929ptD.0 => {CLOBBER}
  # DEBUG __p$8D.64790 => D#929ptD.0
  # VUSE <.MEM_15>
  return prephitmp_40;
;;    succ:       EXIT [100.0%] 

;;   basic block 36, loop depth 0, count 0, freq 138, maybe hot
;;    prev block 35, next block 1, flags: (NEW, REACHABLE)
;;    pred:       29 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.64727 => this_2(D)
  # DEBUG thisD.64737 => this_2(D)
  # DEBUG D#91ptD.0 => this_2(D)
  # DEBUG thisD.57956 => D#91ptD.0
  # .MEM_72 = VDEF <.MEM_1(D)>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (this_2(D), __p_13);
  # DEBUG D#556ptD.0 => &this_2(D)->_M_implD.41540
  # DEBUG thisD.64738 => D#556ptD.0
  # .MEM_73 = VDEF <.MEM_72>
  MEM[(struct _Rb_tree_implD.41541 *)this_2(D)]._M_headerD.41695._M_parentD.24805 = 0B;
  # .MEM_74 = VDEF <.MEM_73>
  MEM[(struct _Rb_tree_implD.41541 *)this_2(D)]._M_headerD.41695._M_leftD.24806 = __p_24;
  # .MEM_75 = VDEF <.MEM_74>
  MEM[(struct _Rb_tree_implD.41541 *)this_2(D)]._M_headerD.41695._M_rightD.24807 = __p_24;
  # .MEM_76 = VDEF <.MEM_75>
  MEM[(struct _Rb_tree_implD.41541 *)this_2(D)]._M_node_countD.41696 = 0;
  goto <bb 35>;
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

}


Creating dr for MEM[(struct _Rb_tree_node_base * *)this_2(D) + 16B]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_2(D) + 16B]
Creating dr for *__x_3(D)
analyze_innermost: success.
	base_address: __x_3(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *__x_3(D)
Creating dr for MEM[(const int &)__p_68 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_68 + 32]
Creating dr for MEM[(const int &)__p_68 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_68 + 32]
Creating dr for MEM[(const int &)__p_68 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_68 + 32]
Creating dr for MEM[(const int &)__p_68 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_68 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_68 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_68 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_68 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_68 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_25 + 16B]
analyze_innermost: success.
	base_address: __p_25
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_25 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_25 + 24B]
analyze_innermost: success.
	base_address: __p_25
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_25 + 24B]
Creating dr for MEM[(const int &)__p_20 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_20 + 32]
Creating dr for MEM[(const int &)__p_20 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_20 + 32]
Creating dr for MEM[(const int &)__p_20 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_20 + 32]
Creating dr for MEM[(const int &)__p_20 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_20 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_20 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_20 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_20 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_20 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_20 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_20 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_20 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_20 + 24B]
Creating dr for MEM[(const int &)__p_20 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_20 + 32]
Creating dr for MEM[(const int &)__p_20 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_20 + 32]
Creating dr for MEM[(const int &)__p_20 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_20 + 32]
Creating dr for MEM[(const int &)__p_20 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_20 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_20 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_20 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_20 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_20 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_20 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_20 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_20 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_20 + 24B]
Creating dr for MEM[(const int &)__p_23 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_23 + 32]
Creating dr for MEM[(const int &)__p_23 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_23 + 32]
Creating dr for MEM[(const int &)__p_23 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_23 + 32]
Creating dr for MEM[(const int &)__p_23 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_23 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_23 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_23 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_23 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_23 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_23 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_23 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_23 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_23 + 24B]
Creating dr for MEM[(const int &)__p_23 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_23 + 32]
Creating dr for MEM[(const int &)__p_23 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_23 + 32]
Creating dr for MEM[(const int &)__p_23 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_23 + 32]
Creating dr for MEM[(const int &)__p_23 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_23 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_23 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_23 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_23 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_23 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_23 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_23 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_23 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_23 + 24B]
Creating dr for MEM[(long unsigned int *)this_2(D) + 40B]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(long unsigned int *)this_2(D) + 40B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)this_2(D) + 24B]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_2(D) + 24B]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:6)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:7)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:42, LOOPS:4, CONDITIONS:13, STMTS:282)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_28 bb_3 })
  {
    <bb 2>:
    # DEBUG this => this_2(D)
    # DEBUG __k => __x_3(D)
    # VUSE <.MEM_1(D)>
    __p_13 = MEM[(struct _Rb_tree_node_base * *)this_2(D) + 16B];
    # DEBUG D#91 => this_2(D)
    # DEBUG this => D#91
    # DEBUG __x => NULL
    # DEBUG this => this_2(D)
    __p_24 = &this_2(D)->_M_impl._M_header;
    # DEBUG __y => NULL
    # DEBUG __y => __p_24
    # DEBUG __x => __p_13
    if (__p_13 == 0B)
      goto <bb 28>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_7 })
  {
    <bb 3>:
    # VUSE <.MEM_1(D)>
    pretmp_41 = *__x_3(D);
    goto <bb 7>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_28 })
  {
    <bb 5>:
    # __p_51 = PHI <__p_49(4)>
    pretmp_77 = __p_24 == __p_51;
    goto <bb 28>;

  }
  bb_11 (preds = {bb_9 }, succs = {bb_15 bb_16 })
  {
    <bb 11>:
    # __p_25 = PHI <__p_68(9)>
    # __p_21 = PHI <__p_80(9)>
    # DEBUG __xu => __p_25
    # DEBUG __yu => __p_21
    # DEBUG __y => __p_25
    # VUSE <.MEM_1(D)>
    __p_30 = MEM[(struct _Rb_tree_node_base * *)__p_25 + 16B];
    # DEBUG D#108 => __p_25
    # DEBUG __x => D#108
    # DEBUG __x => NULL
    # VUSE <.MEM_1(D)>
    __p_31 = MEM[(struct _Rb_tree_node_base * *)__p_25 + 24B];
    # DEBUG D#107 => __p_25
    # DEBUG __x => D#107
    # DEBUG __xu => NULL
    # DEBUG D#354 => this_2(D)
    # DEBUG __x => NULL
    # DEBUG __y => __p_21
    # DEBUG __k => __x_3(D)
    # DEBUG __y => __p_21
    # DEBUG __x => __p_31
    if (__p_31 == 0B)
      goto <bb 15>;
    else
      goto <bb 16>;

  }
  bb_13 (preds = {bb_12 }, succs = {bb_39 })
  {
    <bb 13>:
    # __p_58 = PHI <__p_45(12)>

  }
  bb_39 (preds = {bb_13 }, succs = {bb_15 })
  {
    <bb 39>:
    goto <bb 15>;

  }
  bb_15 (preds = {bb_39 bb_11 }, succs = {bb_27 bb_23 })
  {
    <bb 15>:
    # __p_86 = PHI <__p_58(39), __p_21(11)>
    # DEBUG __y => __p_25
    # DEBUG __x => __p_30
    if (__p_30 == 0B)
      goto <bb 27>;
    else
      goto <bb 23>;

  }
  bb_16 (preds = {bb_11 }, succs = {bb_17 })
  {
    <bb 16>:

  }
  bb_21 (preds = {bb_20 }, succs = {bb_38 })
  {
    <bb 21>:
    # __p_60 = PHI <__p_43(20)>

  }
  bb_38 (preds = {bb_21 }, succs = {bb_27 })
  {
    <bb 38>:
    goto <bb 27>;

  }
  bb_23 (preds = {bb_15 }, succs = {bb_24 })
  {
    <bb 23>:

  }
  bb_27 (preds = {bb_38 bb_15 }, succs = {bb_40 })
  {
    <bb 27>:
    # __p_87 = PHI <__p_60(38), __p_25(15)>

  }
  bb_40 (preds = {bb_27 }, succs = {bb_29 })
  {
    <bb 40>:
    # DEBUG this => NULL
    # DEBUG __x => __p_87
    # DEBUG this => NULL
    # DEBUG __a => NULL
    # DEBUG __b => NULL
    pretmp_65 = __p_24 == __p_86;
    goto <bb 29>;

  }
  bb_28 (preds = {bb_5 bb_2 }, succs = {bb_41 })
  {
    <bb 28>:
    # __p_82 = PHI <__p_51(5), __p_24(2)>
    # prephitmp_32 = PHI <pretmp_77(5), 1(2)>

  }
  bb_41 (preds = {bb_28 }, succs = {bb_29 })
  {
    <bb 41>:
    # DEBUG this => NULL
    # DEBUG __x => __p_82
    # DEBUG this => NULL
    # DEBUG __x => __p_82
    # DEBUG this => NULL
    # DEBUG __a => NULL
    # DEBUG __b => NULL

  }
  bb_29 (preds = {bb_40 bb_41 }, succs = {bb_36 bb_30 })
  {
    <bb 29>:
    # __p_6 = PHI <__p_87(40), __p_82(41)>
    # __p$8_64 = PHI <__p_86(40), __p_82(41)>
    # prephitmp_96 = PHI <pretmp_65(40), prephitmp_32(41)>
    # DEBUG __p => __p_6
    # DEBUG __p$8 => __p$8_64
    # VUSE <.MEM_1(D)>
    _7 = MEM[(long unsigned int *)this_2(D) + 40B];
    # DEBUG D#132 => this_2(D)
    # DEBUG this => D#132
    # DEBUG __old_size => NULL
    # DEBUG this => this_2(D)
    # DEBUG __first$_M_node => __p_6
    # DEBUG __last$_M_node => __p$8_64
    # DEBUG this => &D.58121
    # DEBUG __it => &__last
    # DEBUG this => &D.58120
    # DEBUG __it => &__first
    # DEBUG this => this_2(D)
    # DEBUG __first$_M_node => __p_6
    # DEBUG __last$_M_node => __p$8_64
    # VUSE <.MEM_1(D)>
    _18 = MEM[(struct _Rb_tree_node_base * *)this_2(D) + 24B];
    # DEBUG D#359 => this_2(D)
    # DEBUG this => D#359
    # DEBUG this => NULL
    # DEBUG __x => _18
    # DEBUG this => NULL
    # DEBUG __it => NULL
    # DEBUG this => &__first
    # DEBUG __x => NULL
    # DEBUG this => this_2(D)
    # DEBUG this => NULL
    # DEBUG __x => __p_24
    # DEBUG this => NULL
    # DEBUG __it => NULL
    # DEBUG this => &__last
    # DEBUG __x => NULL
    _19 = __p_6 == _18;
    _53 = _19 & prephitmp_96;
    if (_53 != 0)
      goto <bb 36>;
    else
      goto <bb 30>;

  }
  bb_30 (preds = {bb_29 }, succs = {bb_31 bb_35 })
  {
    <bb 30>:
    # DEBUG __first$_M_node => __p_6
    # DEBUG this => &__first
    # DEBUG __x => &__last
    if (__p_6 != __p$8_64)
      goto <bb 31>;
    else
      goto <bb 35>;

  }
  bb_31 (preds = {bb_30 }, succs = {bb_32 })
  {
    <bb 31>:

  }
  bb_34 (preds = {bb_32 }, succs = {bb_37 })
  {
    <bb 34>:
    # _42 = PHI <_56(32)>

  }
  bb_37 (preds = {bb_34 }, succs = {bb_35 })
  {
    <bb 37>:
    pretmp_57 = _7 - _42;

  }
  bb_35 (preds = {bb_37 bb_36 bb_30 }, succs = {bb_1 })
  {
    <bb 35>:
    # .MEM_59 = PHI <.MEM_71(37), .MEM_76(36), .MEM_1(D)(30)>
    # prephitmp_40 = PHI <pretmp_57(37), _7(36), 0(30)>
    # .MEM_14 = VDEF <.MEM_59>
    D.58120 ={v} {CLOBBER};
    # .MEM_15 = VDEF <.MEM_14>
    D.58121 ={v} {CLOBBER};
    # DEBUG D#132 => this_2(D)
    # DEBUG this => D#132
    # DEBUG D#928 => {CLOBBER}
    # DEBUG __p => D#928
    # DEBUG D#929 => {CLOBBER}
    # DEBUG __p$8 => D#929
    # VUSE <.MEM_15>
    return prephitmp_40;

  }
  bb_36 (preds = {bb_29 }, succs = {bb_35 })
  {
    <bb 36>:
    # DEBUG this => this_2(D)
    # DEBUG this => this_2(D)
    # DEBUG D#91 => this_2(D)
    # DEBUG this => D#91
    # .MEM_72 = VDEF <.MEM_1(D)>
    std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_M_erase (this_2(D), __p_13);
    # DEBUG D#556 => &this_2(D)->_M_impl
    # DEBUG this => D#556
    # .MEM_73 = VDEF <.MEM_72>
    MEM[(struct _Rb_tree_impl *)this_2(D)]._M_header._M_parent = 0B;
    # .MEM_74 = VDEF <.MEM_73>
    MEM[(struct _Rb_tree_impl *)this_2(D)]._M_header._M_left = __p_24;
    # .MEM_75 = VDEF <.MEM_74>
    MEM[(struct _Rb_tree_impl *)this_2(D)]._M_header._M_right = __p_24;
    # .MEM_76 = VDEF <.MEM_75>
    MEM[(struct _Rb_tree_impl *)this_2(D)]._M_node_count = 0;
    goto <bb 35>;

  }
  loop_1 (header = 32, latch = 33, niter = )
  {
    bb_32 (preds = {bb_31 bb_33 }, succs = {bb_33 bb_34 })
    {
      <bb 32>:
      # __p_67 = PHI <__p_6(31), __p_22(33)>
      # .MEM_83 = PHI <.MEM_1(D)(31), .MEM_71(33)>
      # DEBUG __first$_M_node => __p_67
      # DEBUG this => &__first
      # DEBUG __x => &__last
      # DEBUG D#361 => 0
      # DEBUG this => &__first
      # DEBUG D.64689 => D#361
      # DEBUG __tmp$_M_node => __p_67
      # VUSE <.MEM_83>
      __p_22 = std::_Rb_tree_increment (__p_67);
      # DEBUG __first$_M_node => __p_22
      # DEBUG D#360 => {CLOBBER}
      # DEBUG __tmp$_M_node => D#360
      # DEBUG this => this_2(D)
      # DEBUG this => this_2(D)
      # .MEM_69 = VDEF <.MEM_83>
      __y_54 = std::_Rb_tree_rebalance_for_erase (__p_67, __p_24);
      # DEBUG __y => __y_54
      # DEBUG D#548 => this_2(D)
      # DEBUG __p => __y_54
      # DEBUG this => D#548
      # DEBUG D#547 => D#548
      # DEBUG D#546 => D#548
      # DEBUG D#545 => D#548
      # DEBUG D#543 => D#545
      # DEBUG D#544 => __y_54
      # DEBUG this => D#543
      # DEBUG __p => D#544
      # DEBUG D#542 => D#543
      # DEBUG D#541 => D#544
      # DEBUG D#540 => D#544
      # DEBUG this => D#540
      # DEBUG D#539 => &D#541->_M_value_field
      # DEBUG __r => D#539
      # DEBUG D#538 => D#542
      # DEBUG this => D#538
      # DEBUG D#537 => D#538
      # DEBUG this => D#537
      # DEBUG this => NULL
      # DEBUG D.57746 => NULL
      # DEBUG this => NULL
      # DEBUG D#330 => D#539
      # DEBUG this => D#329
      # DEBUG __p => D#330
      # DEBUG this => NULL
      # DEBUG this => NULL
      # DEBUG this => D#546
      # DEBUG __p => __y_54
      # DEBUG this => D#547
      # DEBUG D#407 => 1
      # DEBUG __p => __y_54
      # DEBUG __a => D#406
      # DEBUG __n => D#407
      # DEBUG D#405 => D#407
      # DEBUG D#404 => D#406
      # DEBUG D#402 => D#404
      # DEBUG D#403 => D#405
      # DEBUG __p => __y_54
      # DEBUG this => D#402
      # DEBUG D.64786 => D#403
      # .MEM_70 = VDEF <.MEM_69>
      operator delete (__y_54);
      # VUSE <.MEM_70>
      _55 = this_2(D)->_M_impl._M_node_count;
      _56 = _55 + 18446744073709551615;
      # .MEM_71 = VDEF <.MEM_70>
      this_2(D)->_M_impl._M_node_count = _56;
      # DEBUG __first$_M_node => __p_22
      # DEBUG this => &__first
      # DEBUG __x => &__last
      if (__p_22 != __p$8_64)
        goto <bb 33>;
      else
        goto <bb 34>;

    }
    bb_33 (preds = {bb_32 }, succs = {bb_32 })
    {
      <bb 33>:
      goto <bb 32>;

    }
  }
  loop_2 (header = 24, latch = 22, niter = )
  {
    bb_20 (preds = {bb_25 bb_26 }, succs = {bb_21 bb_22 })
    {
      <bb 20>:
      # __p_44 = PHI <__p_38(25), __p_39(26)>
      # __p_43 = PHI <__p_23(25), __p_48(26)>
      # DEBUG __y => __p_43
      # DEBUG __x => __p_44
      if (__p_44 == 0B)
        goto <bb 21>;
      else
        goto <bb 22>;

    }
    bb_22 (preds = {bb_20 }, succs = {bb_24 })
    {
      <bb 22>:
      goto <bb 24>;

    }
    bb_24 (preds = {bb_23 bb_22 }, succs = {bb_25 bb_26 })
    {
      <bb 24>:
      # __p_23 = PHI <__p_30(23), __p_44(22)>
      # __p_48 = PHI <__p_25(23), __p_43(22)>
      # DEBUG __y => __p_48
      # DEBUG __x => __p_23
      # DEBUG __x => __p_23
      # DEBUG __x => __p_23
      # DEBUG this => __p_23
      # DEBUG D#331 => &MEM[(const struct _Rb_tree_node *)__p_23]._M_value_field
      # DEBUG __r => D#331
      # DEBUG __x => D#331
      # DEBUG this => D#173
      # DEBUG D#346 => &MEM[(const struct pair &)__p_23 + 32].first
      # DEBUG D#347 => &D#348->_M_impl._M_key_compare
      # DEBUG D#95 => D#347
      # VUSE <.MEM_1(D)>
      _37 = MEM[(const int &)__p_23 + 32];
      # DEBUG D#96 => D#346
      # DEBUG D#97 => __x_3(D)
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      if (_37 >= pretmp_41)
        goto <bb 25>;
      else
        goto <bb 26>;

    }
    bb_25 (preds = {bb_24 }, succs = {bb_20 })
    {
      <bb 25>:
      # DEBUG __y => __p_23
      # VUSE <.MEM_1(D)>
      __p_38 = MEM[(struct _Rb_tree_node_base * *)__p_23 + 16B];
      # DEBUG D#108 => __p_23
      # DEBUG __x => D#108
      # DEBUG __x => NULL
      goto <bb 20>;

    }
    bb_26 (preds = {bb_24 }, succs = {bb_20 })
    {
      <bb 26>:
      # VUSE <.MEM_1(D)>
      __p_39 = MEM[(struct _Rb_tree_node_base * *)__p_23 + 24B];
      # DEBUG D#107 => __p_23
      # DEBUG __x => D#107
      # DEBUG __x => NULL
      goto <bb 20>;

    }
  }
  loop_3 (header = 17, latch = 14, niter = )
  {
    bb_12 (preds = {bb_18 bb_19 }, succs = {bb_13 bb_14 })
    {
      <bb 12>:
      # __p_46 = PHI <__p_34(18), __p_35(19)>
      # __p_45 = PHI <__p_20(18), __p_81(19)>
      # DEBUG __y => __p_45
      # DEBUG __x => __p_46
      if (__p_46 == 0B)
        goto <bb 13>;
      else
        goto <bb 14>;

    }
    bb_14 (preds = {bb_12 }, succs = {bb_17 })
    {
      <bb 14>:
      goto <bb 17>;

    }
    bb_17 (preds = {bb_16 bb_14 }, succs = {bb_18 bb_19 })
    {
      <bb 17>:
      # __p_20 = PHI <__p_31(16), __p_46(14)>
      # __p_81 = PHI <__p_21(16), __p_45(14)>
      # DEBUG __y => __p_81
      # DEBUG __x => __p_20
      # DEBUG __x => __p_20
      # DEBUG __x => __p_20
      # DEBUG this => __p_20
      # DEBUG D#331 => &MEM[(const struct _Rb_tree_node *)__p_20]._M_value_field
      # DEBUG __r => D#331
      # DEBUG __x => D#331
      # DEBUG this => D#173
      # DEBUG D#351 => &MEM[(const struct pair &)__p_20 + 32].first
      # DEBUG D#352 => &D#353->_M_impl._M_key_compare
      # DEBUG D#95 => D#352
      # DEBUG D#96 => __x_3(D)
      # VUSE <.MEM_1(D)>
      _33 = MEM[(const int &)__p_20 + 32];
      # DEBUG D#97 => D#351
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      if (_33 > pretmp_41)
        goto <bb 18>;
      else
        goto <bb 19>;

    }
    bb_18 (preds = {bb_17 }, succs = {bb_12 })
    {
      <bb 18>:
      # DEBUG __y => __p_20
      # VUSE <.MEM_1(D)>
      __p_34 = MEM[(struct _Rb_tree_node_base * *)__p_20 + 16B];
      # DEBUG D#108 => __p_20
      # DEBUG __x => D#108
      # DEBUG __x => NULL
      goto <bb 12>;

    }
    bb_19 (preds = {bb_17 }, succs = {bb_12 })
    {
      <bb 19>:
      # VUSE <.MEM_1(D)>
      __p_35 = MEM[(struct _Rb_tree_node_base * *)__p_20 + 24B];
      # DEBUG D#107 => __p_20
      # DEBUG __x => D#107
      # DEBUG __x => NULL
      goto <bb 12>;

    }
  }
  loop_4 (header = 7, latch = 6, niter = )
  {
    bb_4 (preds = {bb_8 bb_10 }, succs = {bb_5 bb_6 })
    {
      <bb 4>:
      # __p_50 = PHI <__p_28(8), __p_29(10)>
      # __p_49 = PHI <__p_80(8), __p_68(10)>
      # DEBUG __y => __p_49
      # DEBUG __x => __p_50
      if (__p_50 == 0B)
        goto <bb 5>;
      else
        goto <bb 6>;

    }
    bb_6 (preds = {bb_4 }, succs = {bb_7 })
    {
      <bb 6>:

    }
    bb_7 (preds = {bb_3 bb_6 }, succs = {bb_8 bb_9 })
    {
      <bb 7>:
      # __p_68 = PHI <__p_13(3), __p_50(6)>
      # __p_80 = PHI <__p_24(3), __p_49(6)>
      # DEBUG __y => __p_80
      # DEBUG __x => __p_68
      # DEBUG __x => __p_68
      # DEBUG __x => __p_68
      # DEBUG this => __p_68
      # DEBUG D#331 => &MEM[(const struct _Rb_tree_node *)__p_68]._M_value_field
      # DEBUG __r => D#331
      # DEBUG __x => D#331
      # DEBUG this => D#173
      # DEBUG D#355 => &MEM[(const struct pair &)__p_68 + 32].first
      # DEBUG D#358 => &this_2(D)->_M_impl._M_key_compare
      # DEBUG D#95 => D#358
      # VUSE <.MEM_1(D)>
      _26 = MEM[(const int &)__p_68 + 32];
      # DEBUG D#96 => D#355
      # DEBUG D#97 => __x_3(D)
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      if (_26 < pretmp_41)
        goto <bb 8>;
      else
        goto <bb 9>;

    }
    bb_8 (preds = {bb_7 }, succs = {bb_4 })
    {
      <bb 8>:
      # VUSE <.MEM_1(D)>
      __p_28 = MEM[(struct _Rb_tree_node_base * *)__p_68 + 24B];
      # DEBUG D#107 => __p_68
      # DEBUG __x => D#107
      # DEBUG __x => NULL
      goto <bb 4>;

    }
    bb_9 (preds = {bb_7 }, succs = {bb_10 bb_11 })
    {
      <bb 9>:
      # DEBUG __x => __p_68
      # DEBUG __x => __p_68
      # DEBUG this => __p_68
      # DEBUG D#331 => &MEM[(const struct _Rb_tree_node *)__p_68]._M_value_field
      # DEBUG __r => D#331
      # DEBUG __x => D#331
      # DEBUG this => D#173
      # DEBUG D#356 => &MEM[(const struct pair &)__p_68 + 32].first
      # DEBUG D#357 => &this_2(D)->_M_impl._M_key_compare
      # DEBUG D#95 => D#357
      # DEBUG D#96 => __x_3(D)
      # DEBUG D#97 => D#356
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      if (_26 > pretmp_41)
        goto <bb 10>;
      else
        goto <bb 11>;

    }
    bb_10 (preds = {bb_9 }, succs = {bb_4 })
    {
      <bb 10>:
      # DEBUG __y => __p_68
      # VUSE <.MEM_1(D)>
      __p_29 = MEM[(struct _Rb_tree_node_base * *)__p_68 + 16B];
      # DEBUG D#108 => __p_68
      # DEBUG __x => D#108
      # DEBUG __x => NULL
      goto <bb 4>;

    }
  }
}

Pass statistics:
----------------

std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::erase(const _Key&) [with _Key = int; _Val = std::pair<const int, Allocator::sRequest>; _KeyOfValue = std::_Select1st<std::pair<const int, Allocator::sRequest> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, Allocator::sRequest> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type = long unsigned int] (struct _Rb_treeD.41462 * const thisD.41962, const intD.9 & __xD.41963)
{
  struct _Rb_tree_node_baseD.24800 * SR.1410D.64792;
  struct _Rb_tree_node_baseD.24800 * SR.1409D.64791;
  struct _Rb_tree_node_baseD.24800 * const __p$8D.64790;
  struct _Rb_tree_node_baseD.24800 * const __pD.64789;
  struct _Rb_tree_nodeD.41466 * __yD.64777;
  struct const_iteratorD.41768 __positionD.64776;
  struct pairD.41999 D.64726;
  struct _Rb_tree_nodeD.41466 * __xD.64703;
  struct const_iteratorD.41768 __positionD.64692;
  const struct _Rb_tree_node_baseD.24800 * const __first$_M_nodeD.64700;
  const struct _Rb_tree_node_baseD.24800 * const __last$_M_nodeD.64699;
  struct const_iteratorD.41768 __firstD.64687;
  struct const_iteratorD.41768 __lastD.64688;
  struct _Rb_tree_node_baseD.24800 * const __last$_M_nodeD.58126;
  struct _Rb_tree_node_baseD.24800 * const __first$_M_nodeD.58125;
  struct const_iteratorD.41768 D.58121;
  struct const_iteratorD.41768 D.58120;
  struct pairD.41999 __pD.44702;
  const size_typeD.41494 _7;
  struct _Rb_tree_node_baseD.24800 * _18;
  boolD.2757 _19;
  const intD.9 _26;
  boolD.2757 prephitmp_32;
  const intD.9 _33;
  const intD.9 _37;
  size_typeD.41494 prephitmp_40;
  const intD.9 pretmp_41;
  long unsigned intD.14 _42;
  boolD.2757 _53;
  long unsigned intD.14 _55;
  long unsigned intD.14 _56;
  size_typeD.41494 pretmp_57;
  boolD.2757 pretmp_65;
  boolD.2757 pretmp_77;
  boolD.2757 prephitmp_96;

;;   basic block 2, loop depth 0, count 0, freq 670, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.64701 => this_2(D)
  # DEBUG __kD.64702 => __x_3(D)
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_13 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_2(D) + 16B];
  # DEBUG D#91ptD.0 => this_2(D)
  # DEBUG thisD.54488 => D#91ptD.0
  # DEBUG __xD.64703 => NULL
  # DEBUG thisD.64712 => this_2(D)
  # PT = nonlocal 
  __p_24 = &this_2(D)->_M_implD.41540._M_headerD.41695;
  # DEBUG __yD.64704 => NULL
  # DEBUG __yD.64704 => __p_24
  # DEBUG __xD.64703 => __p_13
  if (__p_13 == 0B)
    goto <bb 28>;
  else
    goto <bb 3>;
;;    succ:       28 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 640, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1(D)>
  pretmp_41 = *__x_3(D);
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 9340, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_50 = PHI <__p_28(8), __p_29(10)>
  # PT = nonlocal escaped 
  # __p_49 = PHI <__p_80(8), __p_68(10)>
  # DEBUG __yD.64704 => __p_49
  # DEBUG __xD.64703 => __p_50
  if (__p_50 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 420, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_51 = PHI <__p_49(4)>
  pretmp_77 = __p_24 == __p_51;
  goto <bb 28>;
;;    succ:       28 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8920, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       4 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9550, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_68 = PHI <__p_13(3), __p_50(6)>
  # PT = nonlocal escaped 
  # __p_80 = PHI <__p_24(3), __p_49(6)>
  # DEBUG __yD.64704 => __p_80
  # DEBUG __xD.64703 => __p_68
  # DEBUG __xD.54496 => __p_68
  # DEBUG __xD.54209 => __p_68
  # DEBUG thisD.54210 => __p_68
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__p_68]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54498 => D#331ptD.0
  # DEBUG thisD.54497 => D#173ptD.0
  # DEBUG D#355ptD.0 => &MEM[(const struct pairD.37146 &)__p_68 + 32].firstD.42483
  # DEBUG D#358ptD.0 => &this_2(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#358ptD.0
  # VUSE <.MEM_1(D)>
  _26 = MEM[(const intD.9 &)__p_68 + 32];
  # DEBUG D#96ptD.0 => D#355ptD.0
  # DEBUG D#97ptD.0 => __x_3(D)
  # DEBUG thisD.54494 => D#95ptD.0
  # DEBUG __xD.54493 => D#96ptD.0
  # DEBUG __yD.54492 => D#97ptD.0
  if (_26 < pretmp_41)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 4775, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_28 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_68 + 24B];
  # DEBUG D#107ptD.0 => __p_68
  # DEBUG __xD.54501 => D#107ptD.0
  # DEBUG __xD.64703 => NULL
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 4775, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       7 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.54509 => __p_68
  # DEBUG __xD.54209 => __p_68
  # DEBUG thisD.54210 => __p_68
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__p_68]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54511 => D#331ptD.0
  # DEBUG thisD.54510 => D#173ptD.0
  # DEBUG D#356ptD.0 => &MEM[(const struct pairD.37146 &)__p_68 + 32].firstD.42483
  # DEBUG D#357ptD.0 => &this_2(D)->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#357ptD.0
  # DEBUG D#96ptD.0 => __x_3(D)
  # DEBUG D#97ptD.0 => D#356ptD.0
  # DEBUG thisD.54507 => D#95ptD.0
  # DEBUG __xD.54506 => D#96ptD.0
  # DEBUG __yD.54505 => D#97ptD.0
  if (_26 > pretmp_41)
    goto <bb 10>;
  else
    goto <bb 11>;
;;    succ:       10 [95.5%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [4.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 4560, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [95.5%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.64704 => __p_68
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_29 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_68 + 16B];
  # DEBUG D#108ptD.0 => __p_68
  # DEBUG __xD.54514 => D#108ptD.0
  # DEBUG __xD.64703 => NULL
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 215, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       9 [4.5%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_25 = PHI <__p_68(9)>
  # PT = nonlocal escaped 
  # __p_21 = PHI <__p_80(9)>
  # DEBUG __xuD.64713 => __p_25
  # DEBUG __yuD.64714 => __p_21
  # DEBUG __yD.64704 => __p_25
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_30 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_25 + 16B];
  # DEBUG D#108ptD.0 => __p_25
  # DEBUG __xD.54535 => D#108ptD.0
  # DEBUG __xD.64703 => NULL
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_31 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_25 + 24B];
  # DEBUG D#107ptD.0 => __p_25
  # DEBUG __xD.54532 => D#107ptD.0
  # DEBUG __xuD.64713 => NULL
  # DEBUG D#354ptD.0 => this_2(D)
  # DEBUG __xD.64718 => NULL
  # DEBUG __yD.64717 => __p_21
  # DEBUG __kD.64716 => __x_3(D)
  # DEBUG __yD.64717 => __p_21
  # DEBUG __xD.64718 => __p_31
  if (__p_31 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 2173, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       18 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_46 = PHI <__p_34(18), __p_35(19)>
  # PT = nonlocal escaped 
  # __p_45 = PHI <__p_20(18), __p_81(19)>
  # DEBUG __yD.64717 => __p_45
  # DEBUG __xD.64718 => __p_46
  if (__p_46 == 0B)
    goto <bb 13>;
  else
    goto <bb 14>;
;;    succ:       13 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 196, maybe hot
;;    prev block 12, next block 39, flags: (NEW)
;;    pred:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_58 = PHI <__p_45(12)>
;;    succ:       39 [100.0%]  (FALLTHRU)

;;   basic block 39, loop depth 0, count 0, freq 196, maybe hot
;;    prev block 13, next block 14, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU)
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 1977, maybe hot
;;    prev block 39, next block 15, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 215, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       39 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_86 = PHI <__p_58(39), __p_21(11)>
  # DEBUG __yD.64721 => __p_25
  # DEBUG __xD.64722 => __p_30
  if (__p_30 == 0B)
    goto <bb 27>;
  else
    goto <bb 23>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 196, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       11 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 2173, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_20 = PHI <__p_31(16), __p_46(14)>
  # PT = nonlocal escaped 
  # __p_81 = PHI <__p_21(16), __p_45(14)>
  # DEBUG __yD.64717 => __p_81
  # DEBUG __xD.64718 => __p_20
  # DEBUG __xD.54470 => __p_20
  # DEBUG __xD.54209 => __p_20
  # DEBUG thisD.54210 => __p_20
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__p_20]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54472 => D#331ptD.0
  # DEBUG thisD.54471 => D#173ptD.0
  # DEBUG D#351ptD.0 => &MEM[(const struct pairD.37146 &)__p_20 + 32].firstD.42483
  # DEBUG D#352ptD.0 => &D#353ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#352ptD.0
  # DEBUG D#96ptD.0 => __x_3(D)
  # VUSE <.MEM_1(D)>
  _33 = MEM[(const intD.9 &)__p_20 + 32];
  # DEBUG D#97ptD.0 => D#351ptD.0
  # DEBUG thisD.54473 => D#95ptD.0
  # DEBUG __xD.54474 => D#96ptD.0
  # DEBUG __yD.54475 => D#97ptD.0
  if (_33 > pretmp_41)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 1, count 0, freq 1086, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.64717 => __p_20
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_34 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_20 + 16B];
  # DEBUG D#108ptD.0 => __p_20
  # DEBUG __xD.54469 => D#108ptD.0
  # DEBUG __xD.64718 => NULL
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 1086, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       17 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_35 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_20 + 24B];
  # DEBUG D#107ptD.0 => __p_20
  # DEBUG __xD.54468 => D#107ptD.0
  # DEBUG __xD.64718 => NULL
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 1, count 0, freq 2173, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_44 = PHI <__p_38(25), __p_39(26)>
  # PT = nonlocal escaped 
  # __p_43 = PHI <__p_23(25), __p_48(26)>
  # DEBUG __yD.64721 => __p_43
  # DEBUG __xD.64722 => __p_44
  if (__p_44 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 196, maybe hot
;;    prev block 20, next block 38, flags: (NEW)
;;    pred:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_60 = PHI <__p_43(20)>
;;    succ:       38 [100.0%]  (FALLTHRU)

;;   basic block 38, loop depth 0, count 0, freq 196, maybe hot
;;    prev block 21, next block 22, flags: (NEW)
;;    pred:       21 [100.0%]  (FALLTHRU)
  goto <bb 27>;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 1977, maybe hot
;;    prev block 38, next block 23, flags: (NEW)
;;    pred:       20 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 196, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 1, count 0, freq 2173, maybe hot
;;    prev block 23, next block 25, flags: (NEW)
;;    pred:       23 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_23 = PHI <__p_30(23), __p_44(22)>
  # PT = nonlocal escaped 
  # __p_48 = PHI <__p_25(23), __p_43(22)>
  # DEBUG __yD.64721 => __p_48
  # DEBUG __xD.64722 => __p_23
  # DEBUG __xD.54403 => __p_23
  # DEBUG __xD.54209 => __p_23
  # DEBUG thisD.54210 => __p_23
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__p_23]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54405 => D#331ptD.0
  # DEBUG thisD.54404 => D#173ptD.0
  # DEBUG D#346ptD.0 => &MEM[(const struct pairD.37146 &)__p_23 + 32].firstD.42483
  # DEBUG D#347ptD.0 => &D#348ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#347ptD.0
  # VUSE <.MEM_1(D)>
  _37 = MEM[(const intD.9 &)__p_23 + 32];
  # DEBUG D#96ptD.0 => D#346ptD.0
  # DEBUG D#97ptD.0 => __x_3(D)
  # DEBUG thisD.54406 => D#95ptD.0
  # DEBUG __xD.54407 => D#96ptD.0
  # DEBUG __yD.54408 => D#97ptD.0
  if (_37 >= pretmp_41)
    goto <bb 25>;
  else
    goto <bb 26>;
;;    succ:       25 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 1086, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       24 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.64721 => __p_23
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_38 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_23 + 16B];
  # DEBUG D#108ptD.0 => __p_23
  # DEBUG __xD.54402 => D#108ptD.0
  # DEBUG __xD.64722 => NULL
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 1, count 0, freq 1086, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       24 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_39 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_23 + 24B];
  # DEBUG D#107ptD.0 => __p_23
  # DEBUG __xD.54401 => D#107ptD.0
  # DEBUG __xD.64722 => NULL
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 215, maybe hot
;;    prev block 26, next block 40, flags: (NEW, REACHABLE)
;;    pred:       38 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_87 = PHI <__p_60(38), __p_25(15)>
;;    succ:       40 [100.0%]  (FALLTHRU)

;;   basic block 40, loop depth 0, count 0, freq 215, maybe hot
;;    prev block 27, next block 28, flags: (NEW)
;;    pred:       27 [100.0%]  (FALLTHRU)
  # DEBUG thisD.54400 => NULL
  # DEBUG __xD.54399 => __p_87
  # DEBUG thisD.64725 => NULL
  # DEBUG __aD.64724 => NULL
  # DEBUG __bD.64723 => NULL
  pretmp_65 = __p_24 == __p_86;
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 40, next block 41, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_82 = PHI <__p_51(5), __p_24(2)>
  # prephitmp_32 = PHI <pretmp_77(5), 1(2)>
;;    succ:       41 [100.0%]  (FALLTHRU)

;;   basic block 41, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 28, next block 29, flags: (NEW)
;;    pred:       28 [100.0%]  (FALLTHRU)
  # DEBUG thisD.64706 => NULL
  # DEBUG __xD.64705 => __p_82
  # DEBUG thisD.64708 => NULL
  # DEBUG __xD.64707 => __p_82
  # DEBUG thisD.64711 => NULL
  # DEBUG __aD.64710 => NULL
  # DEBUG __bD.64709 => NULL
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 665, maybe hot
;;    prev block 41, next block 30, flags: (NEW, REACHABLE)
;;    pred:       40 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_6 = PHI <__p_87(40), __p_82(41)>
  # PT = nonlocal escaped 
  # __p$8_64 = PHI <__p_86(40), __p_82(41)>
  # prephitmp_96 = PHI <pretmp_65(40), prephitmp_32(41)>
  # DEBUG __pD.64789 => __p_6
  # DEBUG __p$8D.64790 => __p$8_64
  # VUSE <.MEM_1(D)>
  _7 = MEM[(long unsigned intD.14 *)this_2(D) + 40B];
  # DEBUG D#132ptD.0 => this_2(D)
  # DEBUG thisD.58123 => D#132ptD.0
  # DEBUG __old_sizeD.44775 => NULL
  # DEBUG thisD.58113 => this_2(D)
  # DEBUG __first$_M_nodeD.58125 => __p_6
  # DEBUG __last$_M_nodeD.58126 => __p$8_64
  # DEBUG thisD.58117 => &D.58121
  # DEBUG __itD.58116 => &__lastD.58115
  # DEBUG thisD.58119 => &D.58120
  # DEBUG __itD.58118 => &__firstD.58114
  # DEBUG thisD.64686 => this_2(D)
  # DEBUG __first$_M_nodeD.64700 => __p_6
  # DEBUG __last$_M_nodeD.64699 => __p$8_64
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _18 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_2(D) + 24B];
  # DEBUG D#359ptD.0 => this_2(D)
  # DEBUG thisD.58016 => D#359ptD.0
  # DEBUG thisD.54565 => NULL
  # DEBUG __xD.54564 => _18
  # DEBUG thisD.64698 => NULL
  # DEBUG __itD.64697 => NULL
  # DEBUG thisD.58010 => &__firstD.64687
  # DEBUG __xD.58011 => NULL
  # DEBUG thisD.64694 => this_2(D)
  # DEBUG thisD.58026 => NULL
  # DEBUG __xD.58025 => __p_24
  # DEBUG thisD.64696 => NULL
  # DEBUG __itD.64695 => NULL
  # DEBUG thisD.58019 => &__lastD.64688
  # DEBUG __xD.58020 => NULL
  _19 = __p_6 == _18;
  _53 = _19 & prephitmp_96;
  if (_53 != 0)
    goto <bb 36>;
  else
    goto <bb 30>;
;;    succ:       36 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 650, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [85.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __first$_M_nodeD.64700 => __p_6
  # DEBUG thisD.58031 => &__firstD.64687
  # DEBUG __xD.58032 => &__lastD.64688
  if (__p_6 != __p$8_64)
    goto <bb 31>;
  else
    goto <bb 35>;
;;    succ:       31 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 592, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       30 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 1, count 0, freq 5330, maybe hot
;;   Invalid sum of incoming frequencies 5442, should be 5330
;;    prev block 31, next block 33, flags: (NEW)
;;    pred:       31 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_67 = PHI <__p_6(31), __p_22(33)>
  # .MEM_83 = PHI <.MEM_1(D)(31), .MEM_71(33)>
  # DEBUG __first$_M_nodeD.64700 => __p_67
  # DEBUG thisD.58031 => &__firstD.64687
  # DEBUG __xD.58032 => &__lastD.64688
  # DEBUG D#361ptD.0 => 0
  # DEBUG thisD.64690 => &__firstD.64687
  # DEBUG D.64689 => D#361ptD.0
  # DEBUG __tmp$_M_nodeD.58040 => __p_67
  # VUSE <.MEM_83>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  __p_22 = _ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_baseD.24847 (__p_67);
  # DEBUG __first$_M_nodeD.64700 => __p_22
  # DEBUG D#360ptD.0 => {CLOBBER}
  # DEBUG __tmp$_M_nodeD.58040 => D#360ptD.0
  # DEBUG thisD.64693 => this_2(D)
  # DEBUG thisD.64775 => this_2(D)
  # .MEM_69 = VDEF <.MEM_83>
  # PT = nonlocal escaped 
  # USE = nonlocal null 
  # CLB = nonlocal null 
  __y_54 = _ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_D.25029 (__p_67, __p_24);
  # DEBUG __yD.64777 => __y_54
  # DEBUG D#548ptD.0 => this_2(D)
  # DEBUG __pD.64779 => __y_54
  # DEBUG thisD.64778 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __y_54
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.64781 => D#546ptD.0
  # DEBUG __pD.64780 => __y_54
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.64784 => __y_54
  # DEBUG __aD.64782 => D#406ptD.0
  # DEBUG __nD.64783 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.64787 => __y_54
  # DEBUG thisD.64785 => D#402ptD.0
  # DEBUG D.64786 => D#403ptD.0
  # .MEM_70 = VDEF <.MEM_69>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZdlPvD.2766 (__y_54);
  # VUSE <.MEM_70>
  _55 = this_2(D)->_M_implD.41540._M_node_countD.41696;
  # RANGE [0, 18446744073709551615]
  _56 = _55 + 18446744073709551615;
  # .MEM_71 = VDEF <.MEM_70>
  this_2(D)->_M_implD.41540._M_node_countD.41696 = _56;
  # DEBUG __first$_M_nodeD.64700 => __p_22
  # DEBUG thisD.58031 => &__firstD.64687
  # DEBUG __xD.58032 => &__lastD.64688
  if (__p_22 != __p$8_64)
    goto <bb 33>;
  else
    goto <bb 34>;
;;    succ:       33 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 33, loop depth 1, count 0, freq 4850, maybe hot
;;    prev block 32, next block 34, flags: (NEW)
;;    pred:       32 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 32>;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 480, maybe hot
;;    prev block 33, next block 37, flags: (NEW)
;;    pred:       32 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  # _42 = PHI <_56(32)>
;;    succ:       37 [100.0%]  (FALLTHRU)

;;   basic block 37, loop depth 0, count 0, freq 480, maybe hot
;;    prev block 34, next block 35, flags: (NEW)
;;    pred:       34 [100.0%]  (FALLTHRU)
  pretmp_57 = _7 - _42;
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 665, maybe hot
;;    prev block 37, next block 36, flags: (NEW, REACHABLE)
;;    pred:       37 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                36 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                30 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_59 = PHI <.MEM_71(37), .MEM_76(36), .MEM_1(D)(30)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_40 = PHI <pretmp_57(37), _7(36), 0(30)>
  # .MEM_14 = VDEF <.MEM_59>
  D.58120 ={v} {CLOBBER};
  # .MEM_15 = VDEF <.MEM_14>
  D.58121 ={v} {CLOBBER};
  # DEBUG D#132ptD.0 => this_2(D)
  # DEBUG thisD.58111 => D#132ptD.0
  # DEBUG D#928ptD.0 => {CLOBBER}
  # DEBUG __pD.64789 => D#928ptD.0
  # DEBUG D#929ptD.0 => {CLOBBER}
  # DEBUG __p$8D.64790 => D#929ptD.0
  # VUSE <.MEM_15>
  return prephitmp_40;
;;    succ:       EXIT [100.0%] 

;;   basic block 36, loop depth 0, count 0, freq 138, maybe hot
;;    prev block 35, next block 1, flags: (NEW, REACHABLE)
;;    pred:       29 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.64727 => this_2(D)
  # DEBUG thisD.64737 => this_2(D)
  # DEBUG D#91ptD.0 => this_2(D)
  # DEBUG thisD.57956 => D#91ptD.0
  # .MEM_72 = VDEF <.MEM_1(D)>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (this_2(D), __p_13);
  # DEBUG D#556ptD.0 => &this_2(D)->_M_implD.41540
  # DEBUG thisD.64738 => D#556ptD.0
  # .MEM_73 = VDEF <.MEM_72>
  MEM[(struct _Rb_tree_implD.41541 *)this_2(D)]._M_headerD.41695._M_parentD.24805 = 0B;
  # .MEM_74 = VDEF <.MEM_73>
  MEM[(struct _Rb_tree_implD.41541 *)this_2(D)]._M_headerD.41695._M_leftD.24806 = __p_24;
  # .MEM_75 = VDEF <.MEM_74>
  MEM[(struct _Rb_tree_implD.41541 *)this_2(D)]._M_headerD.41695._M_rightD.24807 = __p_24;
  # .MEM_76 = VDEF <.MEM_75>
  MEM[(struct _Rb_tree_implD.41541 *)this_2(D)]._M_node_countD.41696 = 0;
  goto <bb 35>;
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

}



;; Function std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::erase(const _Key&) [with _Key = int; _Val = int; _KeyOfValue = std::_Identity<int>; _Compare = std::less<int>; _Alloc = std::allocator<int>; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type = long unsigned int] (_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE5eraseERKi, funcdef_no=2061, decl_uid=36827, cgraph_uid=731, symbol_order=732)


Pass statistics:
----------------

std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::erase(const _Key&) [with _Key = int; _Val = int; _KeyOfValue = std::_Identity<int>; _Compare = std::less<int>; _Alloc = std::allocator<int>; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type = long unsigned int] (struct _Rb_treeD.36317 * const thisD.36828, const intD.9 & __xD.36829)
{
  struct _Rb_tree_node_baseD.24800 * SR.1416D.64906;
  struct _Rb_tree_node_baseD.24800 * SR.1415D.64905;
  struct _Rb_tree_node_baseD.24800 * const __p$8D.64904;
  struct _Rb_tree_node_baseD.24800 * const __pD.64903;
  struct _Rb_tree_nodeD.36321 * __yD.64891;
  struct const_iteratorD.36634 __positionD.64890;
  struct pairD.36865 D.64840;
  struct _Rb_tree_nodeD.36321 * __xD.64817;
  struct const_iteratorD.36634 __positionD.64806;
  const struct _Rb_tree_node_baseD.24800 * const __first$_M_nodeD.64814;
  const struct _Rb_tree_node_baseD.24800 * const __last$_M_nodeD.64813;
  struct const_iteratorD.36634 __firstD.64801;
  struct const_iteratorD.36634 __lastD.64802;
  struct _Rb_tree_node_baseD.24800 * const __last$_M_nodeD.55574;
  struct _Rb_tree_node_baseD.24800 * const __first$_M_nodeD.55573;
  struct const_iteratorD.36634 D.55569;
  struct const_iteratorD.36634 D.55568;
  struct pairD.36865 __pD.44779;
  const size_typeD.36349 _7;
  struct _Rb_tree_node_baseD.24800 * _18;
  boolD.2757 _19;
  const intD.9 _26;
  boolD.2757 prephitmp_32;
  const intD.9 _33;
  const intD.9 _37;
  size_typeD.36349 prephitmp_40;
  const intD.9 pretmp_41;
  long unsigned intD.14 _42;
  boolD.2757 _53;
  long unsigned intD.14 _55;
  long unsigned intD.14 _56;
  size_typeD.36349 pretmp_57;
  boolD.2757 pretmp_65;
  boolD.2757 pretmp_77;
  boolD.2757 prephitmp_96;

;;   basic block 2, loop depth 0, count 0, freq 670, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.64815 => this_2(D)
  # DEBUG __kD.64816 => __x_3(D)
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_13 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_2(D) + 16B];
  # DEBUG D#90ptD.0 => this_2(D)
  # DEBUG thisD.55489 => D#90ptD.0
  # DEBUG __xD.64817 => NULL
  # DEBUG thisD.64826 => this_2(D)
  # PT = nonlocal 
  __p_24 = &this_2(D)->_M_implD.36395._M_headerD.36561;
  # DEBUG __yD.64818 => NULL
  # DEBUG __yD.64818 => __p_24
  # DEBUG __xD.64817 => __p_13
  if (__p_13 == 0B)
    goto <bb 28>;
  else
    goto <bb 3>;
;;    succ:       28 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 640, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1(D)>
  pretmp_41 = *__x_3(D);
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 9340, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_50 = PHI <__p_28(8), __p_29(10)>
  # PT = nonlocal escaped 
  # __p_49 = PHI <__p_80(8), __p_68(10)>
  # DEBUG __yD.64818 => __p_49
  # DEBUG __xD.64817 => __p_50
  if (__p_50 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 420, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_51 = PHI <__p_49(4)>
  pretmp_77 = __p_24 == __p_51;
  goto <bb 28>;
;;    succ:       28 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8920, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       4 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9550, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_68 = PHI <__p_13(3), __p_50(6)>
  # PT = nonlocal escaped 
  # __p_80 = PHI <__p_24(3), __p_49(6)>
  # DEBUG __yD.64818 => __p_80
  # DEBUG __xD.64817 => __p_68
  # DEBUG __xD.55497 => __p_68
  # DEBUG __xD.55498 => __p_68
  # DEBUG thisD.55499 => __p_68
  # DEBUG D#434ptD.0 => &MEM[(const struct _Rb_tree_nodeD.36321 *)__p_68]._M_value_fieldD.44464
  # DEBUG __rD.55383 => D#434ptD.0
  # DEBUG __xD.55389 => D#434ptD.0
  # DEBUG thisD.55390 => D#127ptD.0
  # DEBUG D#437ptD.0 => &this_2(D)->_M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#437ptD.0
  # VUSE <.MEM_1(D)>
  _26 = MEM[(const intD.9 &)__p_68 + 32];
  # DEBUG D#96ptD.0 => D#434ptD.0
  # DEBUG D#97ptD.0 => __x_3(D)
  # DEBUG thisD.55495 => D#95ptD.0
  # DEBUG __xD.55494 => D#96ptD.0
  # DEBUG __yD.55493 => D#97ptD.0
  if (_26 < pretmp_41)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 4775, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_28 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_68 + 24B];
  # DEBUG D#105ptD.0 => __p_68
  # DEBUG __xD.55502 => D#105ptD.0
  # DEBUG __xD.64817 => NULL
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 4775, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       7 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.55510 => __p_68
  # DEBUG __xD.55511 => __p_68
  # DEBUG thisD.55512 => __p_68
  # DEBUG D#435ptD.0 => &MEM[(const struct _Rb_tree_nodeD.36321 *)__p_68]._M_value_fieldD.44464
  # DEBUG __rD.55383 => D#435ptD.0
  # DEBUG __xD.55389 => D#435ptD.0
  # DEBUG thisD.55390 => D#127ptD.0
  # DEBUG D#436ptD.0 => &this_2(D)->_M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#436ptD.0
  # DEBUG D#96ptD.0 => __x_3(D)
  # DEBUG D#97ptD.0 => D#435ptD.0
  # DEBUG thisD.55508 => D#95ptD.0
  # DEBUG __xD.55507 => D#96ptD.0
  # DEBUG __yD.55506 => D#97ptD.0
  if (_26 > pretmp_41)
    goto <bb 10>;
  else
    goto <bb 11>;
;;    succ:       10 [95.5%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [4.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 4560, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [95.5%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.64818 => __p_68
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_29 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_68 + 16B];
  # DEBUG D#106ptD.0 => __p_68
  # DEBUG __xD.55515 => D#106ptD.0
  # DEBUG __xD.64817 => NULL
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 215, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       9 [4.5%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_25 = PHI <__p_68(9)>
  # PT = nonlocal escaped 
  # __p_21 = PHI <__p_80(9)>
  # DEBUG __xuD.64827 => __p_25
  # DEBUG __yuD.64828 => __p_21
  # DEBUG __yD.64818 => __p_25
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_30 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_25 + 16B];
  # DEBUG D#106ptD.0 => __p_25
  # DEBUG __xD.55536 => D#106ptD.0
  # DEBUG __xD.64817 => NULL
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_31 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_25 + 24B];
  # DEBUG D#105ptD.0 => __p_25
  # DEBUG __xD.55533 => D#105ptD.0
  # DEBUG __xuD.64827 => NULL
  # DEBUG D#429ptD.0 => this_2(D)
  # DEBUG __xD.64832 => NULL
  # DEBUG __yD.64831 => __p_21
  # DEBUG __kD.64830 => __x_3(D)
  # DEBUG __yD.64831 => __p_21
  # DEBUG __xD.64832 => __p_31
  if (__p_31 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 2173, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       18 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_46 = PHI <__p_34(18), __p_35(19)>
  # PT = nonlocal escaped 
  # __p_45 = PHI <__p_20(18), __p_81(19)>
  # DEBUG __yD.64831 => __p_45
  # DEBUG __xD.64832 => __p_46
  if (__p_46 == 0B)
    goto <bb 13>;
  else
    goto <bb 14>;
;;    succ:       13 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 196, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_58 = PHI <__p_45(12)>
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 1977, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 215, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_86 = PHI <__p_58(13), __p_21(11)>
  # DEBUG __yD.64835 => __p_25
  # DEBUG __xD.64836 => __p_30
  if (__p_30 == 0B)
    goto <bb 27>;
  else
    goto <bb 23>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 196, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       11 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 2173, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_20 = PHI <__p_31(16), __p_46(14)>
  # PT = nonlocal escaped 
  # __p_81 = PHI <__p_21(16), __p_45(14)>
  # DEBUG __yD.64831 => __p_81
  # DEBUG __xD.64832 => __p_20
  # DEBUG __xD.55426 => __p_20
  # DEBUG __xD.55427 => __p_20
  # DEBUG thisD.55428 => __p_20
  # DEBUG D#426ptD.0 => &MEM[(const struct _Rb_tree_nodeD.36321 *)__p_20]._M_value_fieldD.44464
  # DEBUG __rD.55383 => D#426ptD.0
  # DEBUG __xD.55389 => D#426ptD.0
  # DEBUG thisD.55390 => D#127ptD.0
  # DEBUG D#427ptD.0 => &D#428ptD.0->_M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#427ptD.0
  # DEBUG D#96ptD.0 => __x_3(D)
  # VUSE <.MEM_1(D)>
  _33 = MEM[(const intD.9 &)__p_20 + 32];
  # DEBUG D#97ptD.0 => D#426ptD.0
  # DEBUG thisD.55429 => D#95ptD.0
  # DEBUG __xD.55430 => D#96ptD.0
  # DEBUG __yD.55431 => D#97ptD.0
  if (_33 > pretmp_41)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 1, count 0, freq 1086, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.64831 => __p_20
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_34 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_20 + 16B];
  # DEBUG D#106ptD.0 => __p_20
  # DEBUG __xD.55425 => D#106ptD.0
  # DEBUG __xD.64832 => NULL
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 1086, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       17 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_35 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_20 + 24B];
  # DEBUG D#105ptD.0 => __p_20
  # DEBUG __xD.55424 => D#105ptD.0
  # DEBUG __xD.64832 => NULL
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 1, count 0, freq 2173, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_44 = PHI <__p_38(25), __p_39(26)>
  # PT = nonlocal escaped 
  # __p_43 = PHI <__p_23(25), __p_48(26)>
  # DEBUG __yD.64835 => __p_43
  # DEBUG __xD.64836 => __p_44
  if (__p_44 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 196, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_60 = PHI <__p_43(20)>
  goto <bb 27>;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 1977, maybe hot
;;    prev block 21, next block 23, flags: (NEW)
;;    pred:       20 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 196, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 1, count 0, freq 2173, maybe hot
;;    prev block 23, next block 25, flags: (NEW)
;;    pred:       23 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_23 = PHI <__p_30(23), __p_44(22)>
  # PT = nonlocal escaped 
  # __p_48 = PHI <__p_25(23), __p_43(22)>
  # DEBUG __yD.64835 => __p_48
  # DEBUG __xD.64836 => __p_23
  # DEBUG __xD.55471 => __p_23
  # DEBUG __xD.55472 => __p_23
  # DEBUG thisD.55473 => __p_23
  # DEBUG D#430ptD.0 => &MEM[(const struct _Rb_tree_nodeD.36321 *)__p_23]._M_value_fieldD.44464
  # DEBUG __rD.55383 => D#430ptD.0
  # DEBUG __xD.55389 => D#430ptD.0
  # DEBUG thisD.55390 => D#127ptD.0
  # DEBUG D#431ptD.0 => &D#432ptD.0->_M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#431ptD.0
  # VUSE <.MEM_1(D)>
  _37 = MEM[(const intD.9 &)__p_23 + 32];
  # DEBUG D#96ptD.0 => D#430ptD.0
  # DEBUG D#97ptD.0 => __x_3(D)
  # DEBUG thisD.55474 => D#95ptD.0
  # DEBUG __xD.55475 => D#96ptD.0
  # DEBUG __yD.55476 => D#97ptD.0
  if (_37 >= pretmp_41)
    goto <bb 25>;
  else
    goto <bb 26>;
;;    succ:       25 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 1086, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       24 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.64835 => __p_23
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_38 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_23 + 16B];
  # DEBUG D#106ptD.0 => __p_23
  # DEBUG __xD.55470 => D#106ptD.0
  # DEBUG __xD.64836 => NULL
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 1, count 0, freq 1086, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       24 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_39 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_23 + 24B];
  # DEBUG D#105ptD.0 => __p_23
  # DEBUG __xD.55469 => D#105ptD.0
  # DEBUG __xD.64836 => NULL
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 215, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       21 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_87 = PHI <__p_60(21), __p_25(15)>
  # DEBUG thisD.55468 => NULL
  # DEBUG __xD.55467 => __p_87
  # DEBUG thisD.64839 => NULL
  # DEBUG __aD.64838 => NULL
  # DEBUG __bD.64837 => NULL
  pretmp_65 = __p_24 == __p_86;
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_82 = PHI <__p_51(5), __p_24(2)>
  # prephitmp_32 = PHI <pretmp_77(5), 1(2)>
  # DEBUG thisD.64820 => NULL
  # DEBUG __xD.64819 => __p_82
  # DEBUG thisD.64822 => NULL
  # DEBUG __xD.64821 => __p_82
  # DEBUG thisD.64825 => NULL
  # DEBUG __aD.64824 => NULL
  # DEBUG __bD.64823 => NULL
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 665, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       27 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                28 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_6 = PHI <__p_87(27), __p_82(28)>
  # PT = nonlocal escaped 
  # __p$8_64 = PHI <__p_86(27), __p_82(28)>
  # prephitmp_96 = PHI <pretmp_65(27), prephitmp_32(28)>
  # DEBUG __pD.64903 => __p_6
  # DEBUG __p$8D.64904 => __p$8_64
  # VUSE <.MEM_1(D)>
  _7 = MEM[(long unsigned intD.14 *)this_2(D) + 40B];
  # DEBUG D#133ptD.0 => this_2(D)
  # DEBUG thisD.55571 => D#133ptD.0
  # DEBUG __old_sizeD.44852 => NULL
  # DEBUG thisD.55561 => this_2(D)
  # DEBUG __first$_M_nodeD.55573 => __p_6
  # DEBUG __last$_M_nodeD.55574 => __p$8_64
  # DEBUG thisD.55565 => &D.55569
  # DEBUG __itD.55564 => &__lastD.55563
  # DEBUG thisD.55567 => &D.55568
  # DEBUG __itD.55566 => &__firstD.55562
  # DEBUG thisD.64800 => this_2(D)
  # DEBUG __first$_M_nodeD.64814 => __p_6
  # DEBUG __last$_M_nodeD.64813 => __p$8_64
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _18 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_2(D) + 24B];
  # DEBUG D#175ptD.0 => this_2(D)
  # DEBUG thisD.55288 => D#175ptD.0
  # DEBUG thisD.53227 => NULL
  # DEBUG __xD.53226 => _18
  # DEBUG thisD.64812 => NULL
  # DEBUG __itD.64811 => NULL
  # DEBUG thisD.55282 => &__firstD.64801
  # DEBUG __xD.55283 => NULL
  # DEBUG thisD.64808 => this_2(D)
  # DEBUG thisD.55298 => NULL
  # DEBUG __xD.55297 => __p_24
  # DEBUG thisD.64810 => NULL
  # DEBUG __itD.64809 => NULL
  # DEBUG thisD.55291 => &__lastD.64802
  # DEBUG __xD.55292 => NULL
  _19 = __p_6 == _18;
  _53 = _19 & prephitmp_96;
  if (_53 != 0)
    goto <bb 36>;
  else
    goto <bb 30>;
;;    succ:       36 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 650, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [85.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __first$_M_nodeD.64814 => __p_6
  # DEBUG thisD.55303 => &__firstD.64801
  # DEBUG __xD.55304 => &__lastD.64802
  if (__p_6 != __p$8_64)
    goto <bb 31>;
  else
    goto <bb 35>;
;;    succ:       31 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 592, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       30 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 1, count 0, freq 5330, maybe hot
;;   Invalid sum of incoming frequencies 5442, should be 5330
;;    prev block 31, next block 33, flags: (NEW)
;;    pred:       31 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_67 = PHI <__p_6(31), __p_22(33)>
  # .MEM_83 = PHI <.MEM_1(D)(31), .MEM_71(33)>
  # DEBUG __first$_M_nodeD.64814 => __p_67
  # DEBUG thisD.55303 => &__firstD.64801
  # DEBUG __xD.55304 => &__lastD.64802
  # DEBUG D#363ptD.0 => 0
  # DEBUG thisD.64804 => &__firstD.64801
  # DEBUG D.64803 => D#363ptD.0
  # DEBUG __tmp$_M_nodeD.55312 => __p_67
  # VUSE <.MEM_83>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  __p_22 = _ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_baseD.24847 (__p_67);
  # DEBUG __first$_M_nodeD.64814 => __p_22
  # DEBUG D#362ptD.0 => {CLOBBER}
  # DEBUG __tmp$_M_nodeD.55312 => D#362ptD.0
  # DEBUG thisD.64807 => this_2(D)
  # DEBUG thisD.64889 => this_2(D)
  # .MEM_69 = VDEF <.MEM_83>
  # PT = nonlocal escaped 
  # USE = nonlocal null 
  # CLB = nonlocal null 
  __y_54 = _ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_D.25029 (__p_67, __p_24);
  # DEBUG __yD.64891 => __y_54
  # DEBUG D#399ptD.0 => this_2(D)
  # DEBUG __pD.64893 => __y_54
  # DEBUG thisD.64892 => D#399ptD.0
  # DEBUG D#398ptD.0 => D#399ptD.0
  # DEBUG D#397ptD.0 => D#399ptD.0
  # DEBUG D#396ptD.0 => D#399ptD.0
  # DEBUG D#388ptD.0 => D#396ptD.0
  # DEBUG D#389ptD.0 => __y_54
  # DEBUG thisD.54975 => D#388ptD.0
  # DEBUG __pD.54974 => D#389ptD.0
  # DEBUG D#387ptD.0 => D#388ptD.0
  # DEBUG D#386ptD.0 => D#389ptD.0
  # DEBUG D#385ptD.0 => D#389ptD.0
  # DEBUG thisD.54927 => D#385ptD.0
  # DEBUG D#384ptD.0 => &D#386ptD.0->_M_value_fieldD.44464
  # DEBUG __rD.54912 => D#384ptD.0
  # DEBUG D#383ptD.0 => D#387ptD.0
  # DEBUG thisD.54919 => D#383ptD.0
  # DEBUG D#382ptD.0 => D#383ptD.0
  # DEBUG thisD.54907 => D#382ptD.0
  # DEBUG thisD.54899 => NULL
  # DEBUG D.54900 => NULL
  # DEBUG thisD.54897 => NULL
  # DEBUG D#307ptD.0 => D#384ptD.0
  # DEBUG thisD.54918 => D#306ptD.0
  # DEBUG __pD.54917 => D#307ptD.0
  # DEBUG thisD.54928 => NULL
  # DEBUG thisD.54916 => NULL
  # DEBUG thisD.64895 => D#397ptD.0
  # DEBUG __pD.64894 => __y_54
  # DEBUG thisD.54963 => D#398ptD.0
  # DEBUG D#395ptD.0 => 1
  # DEBUG __pD.64898 => __y_54
  # DEBUG __aD.64896 => D#394ptD.0
  # DEBUG __nD.64897 => D#395ptD.0
  # DEBUG D#393ptD.0 => D#395ptD.0
  # DEBUG D#392ptD.0 => D#394ptD.0
  # DEBUG D#390ptD.0 => D#392ptD.0
  # DEBUG D#391ptD.0 => D#393ptD.0
  # DEBUG __pD.64901 => __y_54
  # DEBUG thisD.64899 => D#390ptD.0
  # DEBUG D.64900 => D#391ptD.0
  # .MEM_70 = VDEF <.MEM_69>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZdlPvD.2766 (__y_54);
  # VUSE <.MEM_70>
  _55 = this_2(D)->_M_implD.36395._M_node_countD.36562;
  # RANGE [0, 18446744073709551615]
  _56 = _55 + 18446744073709551615;
  # .MEM_71 = VDEF <.MEM_70>
  this_2(D)->_M_implD.36395._M_node_countD.36562 = _56;
  # DEBUG __first$_M_nodeD.64814 => __p_22
  # DEBUG thisD.55303 => &__firstD.64801
  # DEBUG __xD.55304 => &__lastD.64802
  if (__p_22 != __p$8_64)
    goto <bb 33>;
  else
    goto <bb 34>;
;;    succ:       33 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 33, loop depth 1, count 0, freq 4850, maybe hot
;;    prev block 32, next block 34, flags: (NEW)
;;    pred:       32 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 32>;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 480, maybe hot
;;    prev block 33, next block 35, flags: (NEW)
;;    pred:       32 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  # _42 = PHI <_56(32)>
  pretmp_57 = _7 - _42;
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 665, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       34 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                36 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                30 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_59 = PHI <.MEM_71(34), .MEM_76(36), .MEM_1(D)(30)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_40 = PHI <pretmp_57(34), _7(36), 0(30)>
  # .MEM_14 = VDEF <.MEM_59>
  D.55568 ={v} {CLOBBER};
  # .MEM_15 = VDEF <.MEM_14>
  D.55569 ={v} {CLOBBER};
  # DEBUG D#133ptD.0 => this_2(D)
  # DEBUG thisD.55559 => D#133ptD.0
  # DEBUG D#932ptD.0 => {CLOBBER}
  # DEBUG __pD.64903 => D#932ptD.0
  # DEBUG D#933ptD.0 => {CLOBBER}
  # DEBUG __p$8D.64904 => D#933ptD.0
  # VUSE <.MEM_15>
  return prephitmp_40;
;;    succ:       EXIT [100.0%] 

;;   basic block 36, loop depth 0, count 0, freq 138, maybe hot
;;    prev block 35, next block 1, flags: (NEW, REACHABLE)
;;    pred:       29 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.64841 => this_2(D)
  # DEBUG thisD.64851 => this_2(D)
  # DEBUG D#90ptD.0 => this_2(D)
  # DEBUG thisD.55022 => D#90ptD.0
  # .MEM_72 = VDEF <.MEM_1(D)>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiED.36688 (this_2(D), __p_13);
  # DEBUG D#401ptD.0 => &this_2(D)->_M_implD.36395
  # DEBUG thisD.64852 => D#401ptD.0
  # .MEM_73 = VDEF <.MEM_72>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D)]._M_headerD.36561._M_parentD.24805 = 0B;
  # .MEM_74 = VDEF <.MEM_73>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D)]._M_headerD.36561._M_leftD.24806 = __p_24;
  # .MEM_75 = VDEF <.MEM_74>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D)]._M_headerD.36561._M_rightD.24807 = __p_24;
  # .MEM_76 = VDEF <.MEM_75>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D)]._M_node_countD.36562 = 0;
  goto <bb 35>;
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

}


Creating dr for MEM[(struct _Rb_tree_node_base * *)this_2(D) + 16B]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_2(D) + 16B]
Creating dr for *__x_3(D)
analyze_innermost: success.
	base_address: __x_3(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *__x_3(D)
Creating dr for MEM[(const int &)__p_68 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_68 + 32]
Creating dr for MEM[(const int &)__p_68 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_68 + 32]
Creating dr for MEM[(const int &)__p_68 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_68 + 32]
Creating dr for MEM[(const int &)__p_68 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_68 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_68 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_68 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_68 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_68 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_68 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_68 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_25 + 16B]
analyze_innermost: success.
	base_address: __p_25
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_25 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_25 + 24B]
analyze_innermost: success.
	base_address: __p_25
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_25 + 24B]
Creating dr for MEM[(const int &)__p_20 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_20 + 32]
Creating dr for MEM[(const int &)__p_20 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_20 + 32]
Creating dr for MEM[(const int &)__p_20 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_20 + 32]
Creating dr for MEM[(const int &)__p_20 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_20 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_20 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_20 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_20 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_20 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_20 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_20 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_20 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_20 + 24B]
Creating dr for MEM[(const int &)__p_20 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_20 + 32]
Creating dr for MEM[(const int &)__p_20 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_20 + 32]
Creating dr for MEM[(const int &)__p_20 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_20 + 32]
Creating dr for MEM[(const int &)__p_20 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_20 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_20 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_20 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_20 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_20 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_20 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_20 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_20 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_20 + 24B]
Creating dr for MEM[(const int &)__p_23 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_23 + 32]
Creating dr for MEM[(const int &)__p_23 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_23 + 32]
Creating dr for MEM[(const int &)__p_23 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_23 + 32]
Creating dr for MEM[(const int &)__p_23 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_23 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_23 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_23 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_23 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_23 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_23 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_23 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_23 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_23 + 24B]
Creating dr for MEM[(const int &)__p_23 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_23 + 32]
Creating dr for MEM[(const int &)__p_23 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_23 + 32]
Creating dr for MEM[(const int &)__p_23 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_23 + 32]
Creating dr for MEM[(const int &)__p_23 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__p_23 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_23 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_23 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_23 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_23 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_23 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_23 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__p_23 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__p_23 + 24B]
Creating dr for MEM[(long unsigned int *)this_2(D) + 40B]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(long unsigned int *)this_2(D) + 40B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)this_2(D) + 24B]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_2(D) + 24B]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:6)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:7)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:42, LOOPS:4, CONDITIONS:13, STMTS:278)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_28 bb_3 })
  {
    <bb 2>:
    # DEBUG this => this_2(D)
    # DEBUG __k => __x_3(D)
    # VUSE <.MEM_1(D)>
    __p_13 = MEM[(struct _Rb_tree_node_base * *)this_2(D) + 16B];
    # DEBUG D#90 => this_2(D)
    # DEBUG this => D#90
    # DEBUG __x => NULL
    # DEBUG this => this_2(D)
    __p_24 = &this_2(D)->_M_impl._M_header;
    # DEBUG __y => NULL
    # DEBUG __y => __p_24
    # DEBUG __x => __p_13
    if (__p_13 == 0B)
      goto <bb 28>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_7 })
  {
    <bb 3>:
    # VUSE <.MEM_1(D)>
    pretmp_41 = *__x_3(D);
    goto <bb 7>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_28 })
  {
    <bb 5>:
    # __p_51 = PHI <__p_49(4)>
    pretmp_77 = __p_24 == __p_51;
    goto <bb 28>;

  }
  bb_11 (preds = {bb_9 }, succs = {bb_15 bb_16 })
  {
    <bb 11>:
    # __p_25 = PHI <__p_68(9)>
    # __p_21 = PHI <__p_80(9)>
    # DEBUG __xu => __p_25
    # DEBUG __yu => __p_21
    # DEBUG __y => __p_25
    # VUSE <.MEM_1(D)>
    __p_30 = MEM[(struct _Rb_tree_node_base * *)__p_25 + 16B];
    # DEBUG D#106 => __p_25
    # DEBUG __x => D#106
    # DEBUG __x => NULL
    # VUSE <.MEM_1(D)>
    __p_31 = MEM[(struct _Rb_tree_node_base * *)__p_25 + 24B];
    # DEBUG D#105 => __p_25
    # DEBUG __x => D#105
    # DEBUG __xu => NULL
    # DEBUG D#429 => this_2(D)
    # DEBUG __x => NULL
    # DEBUG __y => __p_21
    # DEBUG __k => __x_3(D)
    # DEBUG __y => __p_21
    # DEBUG __x => __p_31
    if (__p_31 == 0B)
      goto <bb 15>;
    else
      goto <bb 16>;

  }
  bb_13 (preds = {bb_12 }, succs = {bb_39 })
  {
    <bb 13>:
    # __p_58 = PHI <__p_45(12)>

  }
  bb_39 (preds = {bb_13 }, succs = {bb_15 })
  {
    <bb 39>:
    goto <bb 15>;

  }
  bb_15 (preds = {bb_39 bb_11 }, succs = {bb_27 bb_23 })
  {
    <bb 15>:
    # __p_86 = PHI <__p_58(39), __p_21(11)>
    # DEBUG __y => __p_25
    # DEBUG __x => __p_30
    if (__p_30 == 0B)
      goto <bb 27>;
    else
      goto <bb 23>;

  }
  bb_16 (preds = {bb_11 }, succs = {bb_17 })
  {
    <bb 16>:

  }
  bb_21 (preds = {bb_20 }, succs = {bb_38 })
  {
    <bb 21>:
    # __p_60 = PHI <__p_43(20)>

  }
  bb_38 (preds = {bb_21 }, succs = {bb_27 })
  {
    <bb 38>:
    goto <bb 27>;

  }
  bb_23 (preds = {bb_15 }, succs = {bb_24 })
  {
    <bb 23>:

  }
  bb_27 (preds = {bb_38 bb_15 }, succs = {bb_40 })
  {
    <bb 27>:
    # __p_87 = PHI <__p_60(38), __p_25(15)>

  }
  bb_40 (preds = {bb_27 }, succs = {bb_29 })
  {
    <bb 40>:
    # DEBUG this => NULL
    # DEBUG __x => __p_87
    # DEBUG this => NULL
    # DEBUG __a => NULL
    # DEBUG __b => NULL
    pretmp_65 = __p_24 == __p_86;
    goto <bb 29>;

  }
  bb_28 (preds = {bb_5 bb_2 }, succs = {bb_41 })
  {
    <bb 28>:
    # __p_82 = PHI <__p_51(5), __p_24(2)>
    # prephitmp_32 = PHI <pretmp_77(5), 1(2)>

  }
  bb_41 (preds = {bb_28 }, succs = {bb_29 })
  {
    <bb 41>:
    # DEBUG this => NULL
    # DEBUG __x => __p_82
    # DEBUG this => NULL
    # DEBUG __x => __p_82
    # DEBUG this => NULL
    # DEBUG __a => NULL
    # DEBUG __b => NULL

  }
  bb_29 (preds = {bb_40 bb_41 }, succs = {bb_36 bb_30 })
  {
    <bb 29>:
    # __p_6 = PHI <__p_87(40), __p_82(41)>
    # __p$8_64 = PHI <__p_86(40), __p_82(41)>
    # prephitmp_96 = PHI <pretmp_65(40), prephitmp_32(41)>
    # DEBUG __p => __p_6
    # DEBUG __p$8 => __p$8_64
    # VUSE <.MEM_1(D)>
    _7 = MEM[(long unsigned int *)this_2(D) + 40B];
    # DEBUG D#133 => this_2(D)
    # DEBUG this => D#133
    # DEBUG __old_size => NULL
    # DEBUG this => this_2(D)
    # DEBUG __first$_M_node => __p_6
    # DEBUG __last$_M_node => __p$8_64
    # DEBUG this => &D.55569
    # DEBUG __it => &__last
    # DEBUG this => &D.55568
    # DEBUG __it => &__first
    # DEBUG this => this_2(D)
    # DEBUG __first$_M_node => __p_6
    # DEBUG __last$_M_node => __p$8_64
    # VUSE <.MEM_1(D)>
    _18 = MEM[(struct _Rb_tree_node_base * *)this_2(D) + 24B];
    # DEBUG D#175 => this_2(D)
    # DEBUG this => D#175
    # DEBUG this => NULL
    # DEBUG __x => _18
    # DEBUG this => NULL
    # DEBUG __it => NULL
    # DEBUG this => &__first
    # DEBUG __x => NULL
    # DEBUG this => this_2(D)
    # DEBUG this => NULL
    # DEBUG __x => __p_24
    # DEBUG this => NULL
    # DEBUG __it => NULL
    # DEBUG this => &__last
    # DEBUG __x => NULL
    _19 = __p_6 == _18;
    _53 = _19 & prephitmp_96;
    if (_53 != 0)
      goto <bb 36>;
    else
      goto <bb 30>;

  }
  bb_30 (preds = {bb_29 }, succs = {bb_31 bb_35 })
  {
    <bb 30>:
    # DEBUG __first$_M_node => __p_6
    # DEBUG this => &__first
    # DEBUG __x => &__last
    if (__p_6 != __p$8_64)
      goto <bb 31>;
    else
      goto <bb 35>;

  }
  bb_31 (preds = {bb_30 }, succs = {bb_32 })
  {
    <bb 31>:

  }
  bb_34 (preds = {bb_32 }, succs = {bb_37 })
  {
    <bb 34>:
    # _42 = PHI <_56(32)>

  }
  bb_37 (preds = {bb_34 }, succs = {bb_35 })
  {
    <bb 37>:
    pretmp_57 = _7 - _42;

  }
  bb_35 (preds = {bb_37 bb_36 bb_30 }, succs = {bb_1 })
  {
    <bb 35>:
    # .MEM_59 = PHI <.MEM_71(37), .MEM_76(36), .MEM_1(D)(30)>
    # prephitmp_40 = PHI <pretmp_57(37), _7(36), 0(30)>
    # .MEM_14 = VDEF <.MEM_59>
    D.55568 ={v} {CLOBBER};
    # .MEM_15 = VDEF <.MEM_14>
    D.55569 ={v} {CLOBBER};
    # DEBUG D#133 => this_2(D)
    # DEBUG this => D#133
    # DEBUG D#932 => {CLOBBER}
    # DEBUG __p => D#932
    # DEBUG D#933 => {CLOBBER}
    # DEBUG __p$8 => D#933
    # VUSE <.MEM_15>
    return prephitmp_40;

  }
  bb_36 (preds = {bb_29 }, succs = {bb_35 })
  {
    <bb 36>:
    # DEBUG this => this_2(D)
    # DEBUG this => this_2(D)
    # DEBUG D#90 => this_2(D)
    # DEBUG this => D#90
    # .MEM_72 = VDEF <.MEM_1(D)>
    std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase (this_2(D), __p_13);
    # DEBUG D#401 => &this_2(D)->_M_impl
    # DEBUG this => D#401
    # .MEM_73 = VDEF <.MEM_72>
    MEM[(struct _Rb_tree_impl *)this_2(D)]._M_header._M_parent = 0B;
    # .MEM_74 = VDEF <.MEM_73>
    MEM[(struct _Rb_tree_impl *)this_2(D)]._M_header._M_left = __p_24;
    # .MEM_75 = VDEF <.MEM_74>
    MEM[(struct _Rb_tree_impl *)this_2(D)]._M_header._M_right = __p_24;
    # .MEM_76 = VDEF <.MEM_75>
    MEM[(struct _Rb_tree_impl *)this_2(D)]._M_node_count = 0;
    goto <bb 35>;

  }
  loop_1 (header = 32, latch = 33, niter = )
  {
    bb_32 (preds = {bb_31 bb_33 }, succs = {bb_33 bb_34 })
    {
      <bb 32>:
      # __p_67 = PHI <__p_6(31), __p_22(33)>
      # .MEM_83 = PHI <.MEM_1(D)(31), .MEM_71(33)>
      # DEBUG __first$_M_node => __p_67
      # DEBUG this => &__first
      # DEBUG __x => &__last
      # DEBUG D#363 => 0
      # DEBUG this => &__first
      # DEBUG D.64803 => D#363
      # DEBUG __tmp$_M_node => __p_67
      # VUSE <.MEM_83>
      __p_22 = std::_Rb_tree_increment (__p_67);
      # DEBUG __first$_M_node => __p_22
      # DEBUG D#362 => {CLOBBER}
      # DEBUG __tmp$_M_node => D#362
      # DEBUG this => this_2(D)
      # DEBUG this => this_2(D)
      # .MEM_69 = VDEF <.MEM_83>
      __y_54 = std::_Rb_tree_rebalance_for_erase (__p_67, __p_24);
      # DEBUG __y => __y_54
      # DEBUG D#399 => this_2(D)
      # DEBUG __p => __y_54
      # DEBUG this => D#399
      # DEBUG D#398 => D#399
      # DEBUG D#397 => D#399
      # DEBUG D#396 => D#399
      # DEBUG D#388 => D#396
      # DEBUG D#389 => __y_54
      # DEBUG this => D#388
      # DEBUG __p => D#389
      # DEBUG D#387 => D#388
      # DEBUG D#386 => D#389
      # DEBUG D#385 => D#389
      # DEBUG this => D#385
      # DEBUG D#384 => &D#386->_M_value_field
      # DEBUG __r => D#384
      # DEBUG D#383 => D#387
      # DEBUG this => D#383
      # DEBUG D#382 => D#383
      # DEBUG this => D#382
      # DEBUG this => NULL
      # DEBUG D.54900 => NULL
      # DEBUG this => NULL
      # DEBUG D#307 => D#384
      # DEBUG this => D#306
      # DEBUG __p => D#307
      # DEBUG this => NULL
      # DEBUG this => NULL
      # DEBUG this => D#397
      # DEBUG __p => __y_54
      # DEBUG this => D#398
      # DEBUG D#395 => 1
      # DEBUG __p => __y_54
      # DEBUG __a => D#394
      # DEBUG __n => D#395
      # DEBUG D#393 => D#395
      # DEBUG D#392 => D#394
      # DEBUG D#390 => D#392
      # DEBUG D#391 => D#393
      # DEBUG __p => __y_54
      # DEBUG this => D#390
      # DEBUG D.64900 => D#391
      # .MEM_70 = VDEF <.MEM_69>
      operator delete (__y_54);
      # VUSE <.MEM_70>
      _55 = this_2(D)->_M_impl._M_node_count;
      _56 = _55 + 18446744073709551615;
      # .MEM_71 = VDEF <.MEM_70>
      this_2(D)->_M_impl._M_node_count = _56;
      # DEBUG __first$_M_node => __p_22
      # DEBUG this => &__first
      # DEBUG __x => &__last
      if (__p_22 != __p$8_64)
        goto <bb 33>;
      else
        goto <bb 34>;

    }
    bb_33 (preds = {bb_32 }, succs = {bb_32 })
    {
      <bb 33>:
      goto <bb 32>;

    }
  }
  loop_2 (header = 24, latch = 22, niter = )
  {
    bb_20 (preds = {bb_25 bb_26 }, succs = {bb_21 bb_22 })
    {
      <bb 20>:
      # __p_44 = PHI <__p_38(25), __p_39(26)>
      # __p_43 = PHI <__p_23(25), __p_48(26)>
      # DEBUG __y => __p_43
      # DEBUG __x => __p_44
      if (__p_44 == 0B)
        goto <bb 21>;
      else
        goto <bb 22>;

    }
    bb_22 (preds = {bb_20 }, succs = {bb_24 })
    {
      <bb 22>:
      goto <bb 24>;

    }
    bb_24 (preds = {bb_23 bb_22 }, succs = {bb_25 bb_26 })
    {
      <bb 24>:
      # __p_23 = PHI <__p_30(23), __p_44(22)>
      # __p_48 = PHI <__p_25(23), __p_43(22)>
      # DEBUG __y => __p_48
      # DEBUG __x => __p_23
      # DEBUG __x => __p_23
      # DEBUG __x => __p_23
      # DEBUG this => __p_23
      # DEBUG D#430 => &MEM[(const struct _Rb_tree_node *)__p_23]._M_value_field
      # DEBUG __r => D#430
      # DEBUG __x => D#430
      # DEBUG this => D#127
      # DEBUG D#431 => &D#432->_M_impl._M_key_compare
      # DEBUG D#95 => D#431
      # VUSE <.MEM_1(D)>
      _37 = MEM[(const int &)__p_23 + 32];
      # DEBUG D#96 => D#430
      # DEBUG D#97 => __x_3(D)
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      if (_37 >= pretmp_41)
        goto <bb 25>;
      else
        goto <bb 26>;

    }
    bb_25 (preds = {bb_24 }, succs = {bb_20 })
    {
      <bb 25>:
      # DEBUG __y => __p_23
      # VUSE <.MEM_1(D)>
      __p_38 = MEM[(struct _Rb_tree_node_base * *)__p_23 + 16B];
      # DEBUG D#106 => __p_23
      # DEBUG __x => D#106
      # DEBUG __x => NULL
      goto <bb 20>;

    }
    bb_26 (preds = {bb_24 }, succs = {bb_20 })
    {
      <bb 26>:
      # VUSE <.MEM_1(D)>
      __p_39 = MEM[(struct _Rb_tree_node_base * *)__p_23 + 24B];
      # DEBUG D#105 => __p_23
      # DEBUG __x => D#105
      # DEBUG __x => NULL
      goto <bb 20>;

    }
  }
  loop_3 (header = 17, latch = 14, niter = )
  {
    bb_12 (preds = {bb_18 bb_19 }, succs = {bb_13 bb_14 })
    {
      <bb 12>:
      # __p_46 = PHI <__p_34(18), __p_35(19)>
      # __p_45 = PHI <__p_20(18), __p_81(19)>
      # DEBUG __y => __p_45
      # DEBUG __x => __p_46
      if (__p_46 == 0B)
        goto <bb 13>;
      else
        goto <bb 14>;

    }
    bb_14 (preds = {bb_12 }, succs = {bb_17 })
    {
      <bb 14>:
      goto <bb 17>;

    }
    bb_17 (preds = {bb_16 bb_14 }, succs = {bb_18 bb_19 })
    {
      <bb 17>:
      # __p_20 = PHI <__p_31(16), __p_46(14)>
      # __p_81 = PHI <__p_21(16), __p_45(14)>
      # DEBUG __y => __p_81
      # DEBUG __x => __p_20
      # DEBUG __x => __p_20
      # DEBUG __x => __p_20
      # DEBUG this => __p_20
      # DEBUG D#426 => &MEM[(const struct _Rb_tree_node *)__p_20]._M_value_field
      # DEBUG __r => D#426
      # DEBUG __x => D#426
      # DEBUG this => D#127
      # DEBUG D#427 => &D#428->_M_impl._M_key_compare
      # DEBUG D#95 => D#427
      # DEBUG D#96 => __x_3(D)
      # VUSE <.MEM_1(D)>
      _33 = MEM[(const int &)__p_20 + 32];
      # DEBUG D#97 => D#426
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      if (_33 > pretmp_41)
        goto <bb 18>;
      else
        goto <bb 19>;

    }
    bb_18 (preds = {bb_17 }, succs = {bb_12 })
    {
      <bb 18>:
      # DEBUG __y => __p_20
      # VUSE <.MEM_1(D)>
      __p_34 = MEM[(struct _Rb_tree_node_base * *)__p_20 + 16B];
      # DEBUG D#106 => __p_20
      # DEBUG __x => D#106
      # DEBUG __x => NULL
      goto <bb 12>;

    }
    bb_19 (preds = {bb_17 }, succs = {bb_12 })
    {
      <bb 19>:
      # VUSE <.MEM_1(D)>
      __p_35 = MEM[(struct _Rb_tree_node_base * *)__p_20 + 24B];
      # DEBUG D#105 => __p_20
      # DEBUG __x => D#105
      # DEBUG __x => NULL
      goto <bb 12>;

    }
  }
  loop_4 (header = 7, latch = 6, niter = )
  {
    bb_4 (preds = {bb_8 bb_10 }, succs = {bb_5 bb_6 })
    {
      <bb 4>:
      # __p_50 = PHI <__p_28(8), __p_29(10)>
      # __p_49 = PHI <__p_80(8), __p_68(10)>
      # DEBUG __y => __p_49
      # DEBUG __x => __p_50
      if (__p_50 == 0B)
        goto <bb 5>;
      else
        goto <bb 6>;

    }
    bb_6 (preds = {bb_4 }, succs = {bb_7 })
    {
      <bb 6>:

    }
    bb_7 (preds = {bb_3 bb_6 }, succs = {bb_8 bb_9 })
    {
      <bb 7>:
      # __p_68 = PHI <__p_13(3), __p_50(6)>
      # __p_80 = PHI <__p_24(3), __p_49(6)>
      # DEBUG __y => __p_80
      # DEBUG __x => __p_68
      # DEBUG __x => __p_68
      # DEBUG __x => __p_68
      # DEBUG this => __p_68
      # DEBUG D#434 => &MEM[(const struct _Rb_tree_node *)__p_68]._M_value_field
      # DEBUG __r => D#434
      # DEBUG __x => D#434
      # DEBUG this => D#127
      # DEBUG D#437 => &this_2(D)->_M_impl._M_key_compare
      # DEBUG D#95 => D#437
      # VUSE <.MEM_1(D)>
      _26 = MEM[(const int &)__p_68 + 32];
      # DEBUG D#96 => D#434
      # DEBUG D#97 => __x_3(D)
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      if (_26 < pretmp_41)
        goto <bb 8>;
      else
        goto <bb 9>;

    }
    bb_8 (preds = {bb_7 }, succs = {bb_4 })
    {
      <bb 8>:
      # VUSE <.MEM_1(D)>
      __p_28 = MEM[(struct _Rb_tree_node_base * *)__p_68 + 24B];
      # DEBUG D#105 => __p_68
      # DEBUG __x => D#105
      # DEBUG __x => NULL
      goto <bb 4>;

    }
    bb_9 (preds = {bb_7 }, succs = {bb_10 bb_11 })
    {
      <bb 9>:
      # DEBUG __x => __p_68
      # DEBUG __x => __p_68
      # DEBUG this => __p_68
      # DEBUG D#435 => &MEM[(const struct _Rb_tree_node *)__p_68]._M_value_field
      # DEBUG __r => D#435
      # DEBUG __x => D#435
      # DEBUG this => D#127
      # DEBUG D#436 => &this_2(D)->_M_impl._M_key_compare
      # DEBUG D#95 => D#436
      # DEBUG D#96 => __x_3(D)
      # DEBUG D#97 => D#435
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      if (_26 > pretmp_41)
        goto <bb 10>;
      else
        goto <bb 11>;

    }
    bb_10 (preds = {bb_9 }, succs = {bb_4 })
    {
      <bb 10>:
      # DEBUG __y => __p_68
      # VUSE <.MEM_1(D)>
      __p_29 = MEM[(struct _Rb_tree_node_base * *)__p_68 + 16B];
      # DEBUG D#106 => __p_68
      # DEBUG __x => D#106
      # DEBUG __x => NULL
      goto <bb 4>;

    }
  }
}

Pass statistics:
----------------

std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::erase(const _Key&) [with _Key = int; _Val = int; _KeyOfValue = std::_Identity<int>; _Compare = std::less<int>; _Alloc = std::allocator<int>; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type = long unsigned int] (struct _Rb_treeD.36317 * const thisD.36828, const intD.9 & __xD.36829)
{
  struct _Rb_tree_node_baseD.24800 * SR.1416D.64906;
  struct _Rb_tree_node_baseD.24800 * SR.1415D.64905;
  struct _Rb_tree_node_baseD.24800 * const __p$8D.64904;
  struct _Rb_tree_node_baseD.24800 * const __pD.64903;
  struct _Rb_tree_nodeD.36321 * __yD.64891;
  struct const_iteratorD.36634 __positionD.64890;
  struct pairD.36865 D.64840;
  struct _Rb_tree_nodeD.36321 * __xD.64817;
  struct const_iteratorD.36634 __positionD.64806;
  const struct _Rb_tree_node_baseD.24800 * const __first$_M_nodeD.64814;
  const struct _Rb_tree_node_baseD.24800 * const __last$_M_nodeD.64813;
  struct const_iteratorD.36634 __firstD.64801;
  struct const_iteratorD.36634 __lastD.64802;
  struct _Rb_tree_node_baseD.24800 * const __last$_M_nodeD.55574;
  struct _Rb_tree_node_baseD.24800 * const __first$_M_nodeD.55573;
  struct const_iteratorD.36634 D.55569;
  struct const_iteratorD.36634 D.55568;
  struct pairD.36865 __pD.44779;
  const size_typeD.36349 _7;
  struct _Rb_tree_node_baseD.24800 * _18;
  boolD.2757 _19;
  const intD.9 _26;
  boolD.2757 prephitmp_32;
  const intD.9 _33;
  const intD.9 _37;
  size_typeD.36349 prephitmp_40;
  const intD.9 pretmp_41;
  long unsigned intD.14 _42;
  boolD.2757 _53;
  long unsigned intD.14 _55;
  long unsigned intD.14 _56;
  size_typeD.36349 pretmp_57;
  boolD.2757 pretmp_65;
  boolD.2757 pretmp_77;
  boolD.2757 prephitmp_96;

;;   basic block 2, loop depth 0, count 0, freq 670, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.64815 => this_2(D)
  # DEBUG __kD.64816 => __x_3(D)
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_13 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_2(D) + 16B];
  # DEBUG D#90ptD.0 => this_2(D)
  # DEBUG thisD.55489 => D#90ptD.0
  # DEBUG __xD.64817 => NULL
  # DEBUG thisD.64826 => this_2(D)
  # PT = nonlocal 
  __p_24 = &this_2(D)->_M_implD.36395._M_headerD.36561;
  # DEBUG __yD.64818 => NULL
  # DEBUG __yD.64818 => __p_24
  # DEBUG __xD.64817 => __p_13
  if (__p_13 == 0B)
    goto <bb 28>;
  else
    goto <bb 3>;
;;    succ:       28 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 640, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1(D)>
  pretmp_41 = *__x_3(D);
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 9340, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_50 = PHI <__p_28(8), __p_29(10)>
  # PT = nonlocal escaped 
  # __p_49 = PHI <__p_80(8), __p_68(10)>
  # DEBUG __yD.64818 => __p_49
  # DEBUG __xD.64817 => __p_50
  if (__p_50 == 0B)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 420, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_51 = PHI <__p_49(4)>
  pretmp_77 = __p_24 == __p_51;
  goto <bb 28>;
;;    succ:       28 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8920, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       4 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9550, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_68 = PHI <__p_13(3), __p_50(6)>
  # PT = nonlocal escaped 
  # __p_80 = PHI <__p_24(3), __p_49(6)>
  # DEBUG __yD.64818 => __p_80
  # DEBUG __xD.64817 => __p_68
  # DEBUG __xD.55497 => __p_68
  # DEBUG __xD.55498 => __p_68
  # DEBUG thisD.55499 => __p_68
  # DEBUG D#434ptD.0 => &MEM[(const struct _Rb_tree_nodeD.36321 *)__p_68]._M_value_fieldD.44464
  # DEBUG __rD.55383 => D#434ptD.0
  # DEBUG __xD.55389 => D#434ptD.0
  # DEBUG thisD.55390 => D#127ptD.0
  # DEBUG D#437ptD.0 => &this_2(D)->_M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#437ptD.0
  # VUSE <.MEM_1(D)>
  _26 = MEM[(const intD.9 &)__p_68 + 32];
  # DEBUG D#96ptD.0 => D#434ptD.0
  # DEBUG D#97ptD.0 => __x_3(D)
  # DEBUG thisD.55495 => D#95ptD.0
  # DEBUG __xD.55494 => D#96ptD.0
  # DEBUG __yD.55493 => D#97ptD.0
  if (_26 < pretmp_41)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 4775, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_28 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_68 + 24B];
  # DEBUG D#105ptD.0 => __p_68
  # DEBUG __xD.55502 => D#105ptD.0
  # DEBUG __xD.64817 => NULL
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 4775, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       7 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.55510 => __p_68
  # DEBUG __xD.55511 => __p_68
  # DEBUG thisD.55512 => __p_68
  # DEBUG D#435ptD.0 => &MEM[(const struct _Rb_tree_nodeD.36321 *)__p_68]._M_value_fieldD.44464
  # DEBUG __rD.55383 => D#435ptD.0
  # DEBUG __xD.55389 => D#435ptD.0
  # DEBUG thisD.55390 => D#127ptD.0
  # DEBUG D#436ptD.0 => &this_2(D)->_M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#436ptD.0
  # DEBUG D#96ptD.0 => __x_3(D)
  # DEBUG D#97ptD.0 => D#435ptD.0
  # DEBUG thisD.55508 => D#95ptD.0
  # DEBUG __xD.55507 => D#96ptD.0
  # DEBUG __yD.55506 => D#97ptD.0
  if (_26 > pretmp_41)
    goto <bb 10>;
  else
    goto <bb 11>;
;;    succ:       10 [95.5%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [4.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 4560, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [95.5%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.64818 => __p_68
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_29 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_68 + 16B];
  # DEBUG D#106ptD.0 => __p_68
  # DEBUG __xD.55515 => D#106ptD.0
  # DEBUG __xD.64817 => NULL
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 215, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       9 [4.5%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_25 = PHI <__p_68(9)>
  # PT = nonlocal escaped 
  # __p_21 = PHI <__p_80(9)>
  # DEBUG __xuD.64827 => __p_25
  # DEBUG __yuD.64828 => __p_21
  # DEBUG __yD.64818 => __p_25
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_30 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_25 + 16B];
  # DEBUG D#106ptD.0 => __p_25
  # DEBUG __xD.55536 => D#106ptD.0
  # DEBUG __xD.64817 => NULL
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_31 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_25 + 24B];
  # DEBUG D#105ptD.0 => __p_25
  # DEBUG __xD.55533 => D#105ptD.0
  # DEBUG __xuD.64827 => NULL
  # DEBUG D#429ptD.0 => this_2(D)
  # DEBUG __xD.64832 => NULL
  # DEBUG __yD.64831 => __p_21
  # DEBUG __kD.64830 => __x_3(D)
  # DEBUG __yD.64831 => __p_21
  # DEBUG __xD.64832 => __p_31
  if (__p_31 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 2173, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       18 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_46 = PHI <__p_34(18), __p_35(19)>
  # PT = nonlocal escaped 
  # __p_45 = PHI <__p_20(18), __p_81(19)>
  # DEBUG __yD.64831 => __p_45
  # DEBUG __xD.64832 => __p_46
  if (__p_46 == 0B)
    goto <bb 13>;
  else
    goto <bb 14>;
;;    succ:       13 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 196, maybe hot
;;    prev block 12, next block 39, flags: (NEW)
;;    pred:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_58 = PHI <__p_45(12)>
;;    succ:       39 [100.0%]  (FALLTHRU)

;;   basic block 39, loop depth 0, count 0, freq 196, maybe hot
;;    prev block 13, next block 14, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU)
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 1977, maybe hot
;;    prev block 39, next block 15, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 215, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       39 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_86 = PHI <__p_58(39), __p_21(11)>
  # DEBUG __yD.64835 => __p_25
  # DEBUG __xD.64836 => __p_30
  if (__p_30 == 0B)
    goto <bb 27>;
  else
    goto <bb 23>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 196, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       11 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 2173, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_20 = PHI <__p_31(16), __p_46(14)>
  # PT = nonlocal escaped 
  # __p_81 = PHI <__p_21(16), __p_45(14)>
  # DEBUG __yD.64831 => __p_81
  # DEBUG __xD.64832 => __p_20
  # DEBUG __xD.55426 => __p_20
  # DEBUG __xD.55427 => __p_20
  # DEBUG thisD.55428 => __p_20
  # DEBUG D#426ptD.0 => &MEM[(const struct _Rb_tree_nodeD.36321 *)__p_20]._M_value_fieldD.44464
  # DEBUG __rD.55383 => D#426ptD.0
  # DEBUG __xD.55389 => D#426ptD.0
  # DEBUG thisD.55390 => D#127ptD.0
  # DEBUG D#427ptD.0 => &D#428ptD.0->_M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#427ptD.0
  # DEBUG D#96ptD.0 => __x_3(D)
  # VUSE <.MEM_1(D)>
  _33 = MEM[(const intD.9 &)__p_20 + 32];
  # DEBUG D#97ptD.0 => D#426ptD.0
  # DEBUG thisD.55429 => D#95ptD.0
  # DEBUG __xD.55430 => D#96ptD.0
  # DEBUG __yD.55431 => D#97ptD.0
  if (_33 > pretmp_41)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 1, count 0, freq 1086, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.64831 => __p_20
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_34 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_20 + 16B];
  # DEBUG D#106ptD.0 => __p_20
  # DEBUG __xD.55425 => D#106ptD.0
  # DEBUG __xD.64832 => NULL
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 1086, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       17 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_35 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_20 + 24B];
  # DEBUG D#105ptD.0 => __p_20
  # DEBUG __xD.55424 => D#105ptD.0
  # DEBUG __xD.64832 => NULL
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 1, count 0, freq 2173, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_44 = PHI <__p_38(25), __p_39(26)>
  # PT = nonlocal escaped 
  # __p_43 = PHI <__p_23(25), __p_48(26)>
  # DEBUG __yD.64835 => __p_43
  # DEBUG __xD.64836 => __p_44
  if (__p_44 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 196, maybe hot
;;    prev block 20, next block 38, flags: (NEW)
;;    pred:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_60 = PHI <__p_43(20)>
;;    succ:       38 [100.0%]  (FALLTHRU)

;;   basic block 38, loop depth 0, count 0, freq 196, maybe hot
;;    prev block 21, next block 22, flags: (NEW)
;;    pred:       21 [100.0%]  (FALLTHRU)
  goto <bb 27>;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 1977, maybe hot
;;    prev block 38, next block 23, flags: (NEW)
;;    pred:       20 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 196, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 1, count 0, freq 2173, maybe hot
;;    prev block 23, next block 25, flags: (NEW)
;;    pred:       23 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_23 = PHI <__p_30(23), __p_44(22)>
  # PT = nonlocal escaped 
  # __p_48 = PHI <__p_25(23), __p_43(22)>
  # DEBUG __yD.64835 => __p_48
  # DEBUG __xD.64836 => __p_23
  # DEBUG __xD.55471 => __p_23
  # DEBUG __xD.55472 => __p_23
  # DEBUG thisD.55473 => __p_23
  # DEBUG D#430ptD.0 => &MEM[(const struct _Rb_tree_nodeD.36321 *)__p_23]._M_value_fieldD.44464
  # DEBUG __rD.55383 => D#430ptD.0
  # DEBUG __xD.55389 => D#430ptD.0
  # DEBUG thisD.55390 => D#127ptD.0
  # DEBUG D#431ptD.0 => &D#432ptD.0->_M_implD.36395._M_key_compareD.36560
  # DEBUG D#95ptD.0 => D#431ptD.0
  # VUSE <.MEM_1(D)>
  _37 = MEM[(const intD.9 &)__p_23 + 32];
  # DEBUG D#96ptD.0 => D#430ptD.0
  # DEBUG D#97ptD.0 => __x_3(D)
  # DEBUG thisD.55474 => D#95ptD.0
  # DEBUG __xD.55475 => D#96ptD.0
  # DEBUG __yD.55476 => D#97ptD.0
  if (_37 >= pretmp_41)
    goto <bb 25>;
  else
    goto <bb 26>;
;;    succ:       25 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 1086, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       24 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.64835 => __p_23
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_38 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_23 + 16B];
  # DEBUG D#106ptD.0 => __p_23
  # DEBUG __xD.55470 => D#106ptD.0
  # DEBUG __xD.64836 => NULL
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 1, count 0, freq 1086, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       24 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __p_39 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__p_23 + 24B];
  # DEBUG D#105ptD.0 => __p_23
  # DEBUG __xD.55469 => D#105ptD.0
  # DEBUG __xD.64836 => NULL
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 215, maybe hot
;;    prev block 26, next block 40, flags: (NEW, REACHABLE)
;;    pred:       38 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_87 = PHI <__p_60(38), __p_25(15)>
;;    succ:       40 [100.0%]  (FALLTHRU)

;;   basic block 40, loop depth 0, count 0, freq 215, maybe hot
;;    prev block 27, next block 28, flags: (NEW)
;;    pred:       27 [100.0%]  (FALLTHRU)
  # DEBUG thisD.55468 => NULL
  # DEBUG __xD.55467 => __p_87
  # DEBUG thisD.64839 => NULL
  # DEBUG __aD.64838 => NULL
  # DEBUG __bD.64837 => NULL
  pretmp_65 = __p_24 == __p_86;
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 40, next block 41, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_82 = PHI <__p_51(5), __p_24(2)>
  # prephitmp_32 = PHI <pretmp_77(5), 1(2)>
;;    succ:       41 [100.0%]  (FALLTHRU)

;;   basic block 41, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 28, next block 29, flags: (NEW)
;;    pred:       28 [100.0%]  (FALLTHRU)
  # DEBUG thisD.64820 => NULL
  # DEBUG __xD.64819 => __p_82
  # DEBUG thisD.64822 => NULL
  # DEBUG __xD.64821 => __p_82
  # DEBUG thisD.64825 => NULL
  # DEBUG __aD.64824 => NULL
  # DEBUG __bD.64823 => NULL
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 665, maybe hot
;;    prev block 41, next block 30, flags: (NEW, REACHABLE)
;;    pred:       40 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_6 = PHI <__p_87(40), __p_82(41)>
  # PT = nonlocal escaped 
  # __p$8_64 = PHI <__p_86(40), __p_82(41)>
  # prephitmp_96 = PHI <pretmp_65(40), prephitmp_32(41)>
  # DEBUG __pD.64903 => __p_6
  # DEBUG __p$8D.64904 => __p$8_64
  # VUSE <.MEM_1(D)>
  _7 = MEM[(long unsigned intD.14 *)this_2(D) + 40B];
  # DEBUG D#133ptD.0 => this_2(D)
  # DEBUG thisD.55571 => D#133ptD.0
  # DEBUG __old_sizeD.44852 => NULL
  # DEBUG thisD.55561 => this_2(D)
  # DEBUG __first$_M_nodeD.55573 => __p_6
  # DEBUG __last$_M_nodeD.55574 => __p$8_64
  # DEBUG thisD.55565 => &D.55569
  # DEBUG __itD.55564 => &__lastD.55563
  # DEBUG thisD.55567 => &D.55568
  # DEBUG __itD.55566 => &__firstD.55562
  # DEBUG thisD.64800 => this_2(D)
  # DEBUG __first$_M_nodeD.64814 => __p_6
  # DEBUG __last$_M_nodeD.64813 => __p$8_64
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _18 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_2(D) + 24B];
  # DEBUG D#175ptD.0 => this_2(D)
  # DEBUG thisD.55288 => D#175ptD.0
  # DEBUG thisD.53227 => NULL
  # DEBUG __xD.53226 => _18
  # DEBUG thisD.64812 => NULL
  # DEBUG __itD.64811 => NULL
  # DEBUG thisD.55282 => &__firstD.64801
  # DEBUG __xD.55283 => NULL
  # DEBUG thisD.64808 => this_2(D)
  # DEBUG thisD.55298 => NULL
  # DEBUG __xD.55297 => __p_24
  # DEBUG thisD.64810 => NULL
  # DEBUG __itD.64809 => NULL
  # DEBUG thisD.55291 => &__lastD.64802
  # DEBUG __xD.55292 => NULL
  _19 = __p_6 == _18;
  _53 = _19 & prephitmp_96;
  if (_53 != 0)
    goto <bb 36>;
  else
    goto <bb 30>;
;;    succ:       36 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 650, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [85.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __first$_M_nodeD.64814 => __p_6
  # DEBUG thisD.55303 => &__firstD.64801
  # DEBUG __xD.55304 => &__lastD.64802
  if (__p_6 != __p$8_64)
    goto <bb 31>;
  else
    goto <bb 35>;
;;    succ:       31 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 592, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       30 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 1, count 0, freq 5330, maybe hot
;;   Invalid sum of incoming frequencies 5442, should be 5330
;;    prev block 31, next block 33, flags: (NEW)
;;    pred:       31 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __p_67 = PHI <__p_6(31), __p_22(33)>
  # .MEM_83 = PHI <.MEM_1(D)(31), .MEM_71(33)>
  # DEBUG __first$_M_nodeD.64814 => __p_67
  # DEBUG thisD.55303 => &__firstD.64801
  # DEBUG __xD.55304 => &__lastD.64802
  # DEBUG D#363ptD.0 => 0
  # DEBUG thisD.64804 => &__firstD.64801
  # DEBUG D.64803 => D#363ptD.0
  # DEBUG __tmp$_M_nodeD.55312 => __p_67
  # VUSE <.MEM_83>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  __p_22 = _ZSt18_Rb_tree_incrementPKSt18_Rb_tree_node_baseD.24847 (__p_67);
  # DEBUG __first$_M_nodeD.64814 => __p_22
  # DEBUG D#362ptD.0 => {CLOBBER}
  # DEBUG __tmp$_M_nodeD.55312 => D#362ptD.0
  # DEBUG thisD.64807 => this_2(D)
  # DEBUG thisD.64889 => this_2(D)
  # .MEM_69 = VDEF <.MEM_83>
  # PT = nonlocal escaped 
  # USE = nonlocal null 
  # CLB = nonlocal null 
  __y_54 = _ZSt28_Rb_tree_rebalance_for_erasePSt18_Rb_tree_node_baseRS_D.25029 (__p_67, __p_24);
  # DEBUG __yD.64891 => __y_54
  # DEBUG D#399ptD.0 => this_2(D)
  # DEBUG __pD.64893 => __y_54
  # DEBUG thisD.64892 => D#399ptD.0
  # DEBUG D#398ptD.0 => D#399ptD.0
  # DEBUG D#397ptD.0 => D#399ptD.0
  # DEBUG D#396ptD.0 => D#399ptD.0
  # DEBUG D#388ptD.0 => D#396ptD.0
  # DEBUG D#389ptD.0 => __y_54
  # DEBUG thisD.54975 => D#388ptD.0
  # DEBUG __pD.54974 => D#389ptD.0
  # DEBUG D#387ptD.0 => D#388ptD.0
  # DEBUG D#386ptD.0 => D#389ptD.0
  # DEBUG D#385ptD.0 => D#389ptD.0
  # DEBUG thisD.54927 => D#385ptD.0
  # DEBUG D#384ptD.0 => &D#386ptD.0->_M_value_fieldD.44464
  # DEBUG __rD.54912 => D#384ptD.0
  # DEBUG D#383ptD.0 => D#387ptD.0
  # DEBUG thisD.54919 => D#383ptD.0
  # DEBUG D#382ptD.0 => D#383ptD.0
  # DEBUG thisD.54907 => D#382ptD.0
  # DEBUG thisD.54899 => NULL
  # DEBUG D.54900 => NULL
  # DEBUG thisD.54897 => NULL
  # DEBUG D#307ptD.0 => D#384ptD.0
  # DEBUG thisD.54918 => D#306ptD.0
  # DEBUG __pD.54917 => D#307ptD.0
  # DEBUG thisD.54928 => NULL
  # DEBUG thisD.54916 => NULL
  # DEBUG thisD.64895 => D#397ptD.0
  # DEBUG __pD.64894 => __y_54
  # DEBUG thisD.54963 => D#398ptD.0
  # DEBUG D#395ptD.0 => 1
  # DEBUG __pD.64898 => __y_54
  # DEBUG __aD.64896 => D#394ptD.0
  # DEBUG __nD.64897 => D#395ptD.0
  # DEBUG D#393ptD.0 => D#395ptD.0
  # DEBUG D#392ptD.0 => D#394ptD.0
  # DEBUG D#390ptD.0 => D#392ptD.0
  # DEBUG D#391ptD.0 => D#393ptD.0
  # DEBUG __pD.64901 => __y_54
  # DEBUG thisD.64899 => D#390ptD.0
  # DEBUG D.64900 => D#391ptD.0
  # .MEM_70 = VDEF <.MEM_69>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZdlPvD.2766 (__y_54);
  # VUSE <.MEM_70>
  _55 = this_2(D)->_M_implD.36395._M_node_countD.36562;
  # RANGE [0, 18446744073709551615]
  _56 = _55 + 18446744073709551615;
  # .MEM_71 = VDEF <.MEM_70>
  this_2(D)->_M_implD.36395._M_node_countD.36562 = _56;
  # DEBUG __first$_M_nodeD.64814 => __p_22
  # DEBUG thisD.55303 => &__firstD.64801
  # DEBUG __xD.55304 => &__lastD.64802
  if (__p_22 != __p$8_64)
    goto <bb 33>;
  else
    goto <bb 34>;
;;    succ:       33 [91.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [9.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 33, loop depth 1, count 0, freq 4850, maybe hot
;;    prev block 32, next block 34, flags: (NEW)
;;    pred:       32 [91.0%]  (TRUE_VALUE,EXECUTABLE)
  goto <bb 32>;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 480, maybe hot
;;    prev block 33, next block 37, flags: (NEW)
;;    pred:       32 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  # _42 = PHI <_56(32)>
;;    succ:       37 [100.0%]  (FALLTHRU)

;;   basic block 37, loop depth 0, count 0, freq 480, maybe hot
;;    prev block 34, next block 35, flags: (NEW)
;;    pred:       34 [100.0%]  (FALLTHRU)
  pretmp_57 = _7 - _42;
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 665, maybe hot
;;    prev block 37, next block 36, flags: (NEW, REACHABLE)
;;    pred:       37 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                36 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                30 [9.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_59 = PHI <.MEM_71(37), .MEM_76(36), .MEM_1(D)(30)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_40 = PHI <pretmp_57(37), _7(36), 0(30)>
  # .MEM_14 = VDEF <.MEM_59>
  D.55568 ={v} {CLOBBER};
  # .MEM_15 = VDEF <.MEM_14>
  D.55569 ={v} {CLOBBER};
  # DEBUG D#133ptD.0 => this_2(D)
  # DEBUG thisD.55559 => D#133ptD.0
  # DEBUG D#932ptD.0 => {CLOBBER}
  # DEBUG __pD.64903 => D#932ptD.0
  # DEBUG D#933ptD.0 => {CLOBBER}
  # DEBUG __p$8D.64904 => D#933ptD.0
  # VUSE <.MEM_15>
  return prephitmp_40;
;;    succ:       EXIT [100.0%] 

;;   basic block 36, loop depth 0, count 0, freq 138, maybe hot
;;    prev block 35, next block 1, flags: (NEW, REACHABLE)
;;    pred:       29 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.64841 => this_2(D)
  # DEBUG thisD.64851 => this_2(D)
  # DEBUG D#90ptD.0 => this_2(D)
  # DEBUG thisD.55022 => D#90ptD.0
  # .MEM_72 = VDEF <.MEM_1(D)>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiED.36688 (this_2(D), __p_13);
  # DEBUG D#401ptD.0 => &this_2(D)->_M_implD.36395
  # DEBUG thisD.64852 => D#401ptD.0
  # .MEM_73 = VDEF <.MEM_72>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D)]._M_headerD.36561._M_parentD.24805 = 0B;
  # .MEM_74 = VDEF <.MEM_73>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D)]._M_headerD.36561._M_leftD.24806 = __p_24;
  # .MEM_75 = VDEF <.MEM_74>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D)]._M_headerD.36561._M_rightD.24807 = __p_24;
  # .MEM_76 = VDEF <.MEM_75>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D)]._M_node_countD.36562 = 0;
  goto <bb 35>;
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

}



;; Function virtual void SparseAllocator::RemoveRequest(int, int, int) (_ZN15SparseAllocator13RemoveRequestEiii, funcdef_no=1777, decl_uid=37924, cgraph_uid=447, symbol_order=448)


Pass statistics:
----------------

virtual void SparseAllocator::RemoveRequest(int, int, int) (struct SparseAllocatorD.36303 * const thisD.42660, intD.9 inD.42656, intD.9 outD.42657, intD.9 labelD.42658)
{
  struct value_typeD.41248 D.64967;
  struct _Rb_tree_nodeD.41466 * __yD.64961;
  struct iteratorD.41766 D.64966;
  struct const_iteratorD.41768 __posD.64951;
  struct _Rb_tree_node_baseD.24800 * const __i$_M_nodeD.64965;
  struct _Rb_tree_node_baseD.24800 * SR.1191D.64964;
  struct mapped_typeD.41247 & D.64963;
  struct value_typeD.41248 D.64940;
  struct _Rb_tree_nodeD.41466 * __yD.64934;
  struct iteratorD.41766 D.64939;
  struct const_iteratorD.41768 __posD.64924;
  struct _Rb_tree_node_baseD.24800 * const __i$_M_nodeD.64938;
  struct _Rb_tree_node_baseD.24800 * SR.1191D.64937;
  struct mapped_typeD.41247 & D.64936;
  const struct _Rb_tree_nodeD.41466 * __yD.61708;
  const struct _Rb_tree_nodeD.41466 * __yD.61671;
  static const charD.10 _ZZN15SparseAllocator13RemoveRequestEiiiE19__PRETTY_FUNCTION__D.42662[59] = "virtual void SparseAllocator::RemoveRequest(int, int, int)";
  intD.9 in.135_4;
  intD.9 _6;
  intD.9 out.136_7;
  intD.9 _8;
  long unsigned intD.14 _9;
  const intD.9 _12;
  intD.9 pretmp_13;
  intD.9 _15;
  intD.9 in.135_17;
  long unsigned intD.14 _18;
  intD.9 in.135_19;
  long unsigned intD.14 _20;
  intD.9 out.136_24;
  long unsigned intD.14 _25;
  const intD.9 _27;
  intD.9 _30;
  intD.9 out.136_31;
  long unsigned intD.14 _32;
  intD.9 out.136_34;
  long unsigned intD.14 _35;
  struct mapD.37148 * _44;
  struct mapD.37148 * _45;
  struct mapD.37148 * _46;
  struct mapD.37148 * _47;
  struct mapD.37148 * _48;
  struct mapD.37148 * _49;
  long unsigned intD.14 _52;
  struct mapD.37148 & _53;
  const size_typeD.41494 _54;
  long unsigned intD.14 _55;
  struct mapD.37148 & _56;
  struct _Rep_typeD.41460 * _57;
  long unsigned intD.14 _58;
  struct mapD.37148 & _59;
  struct _Rep_typeD.36315 * _60;
  const intD.9 _63;
  const intD.9 _69;
  long unsigned intD.14 _74;
  struct mapD.37148 & _75;
  const size_typeD.41494 _76;
  long unsigned intD.14 _77;
  struct mapD.37148 & _78;
  struct _Rep_typeD.41460 * _79;
  long unsigned intD.14 _80;
  struct mapD.37148 & _81;
  struct _Rep_typeD.36315 * _82;
  const intD.9 _90;
  const intD.9 _96;
  struct _Rep_typeD.41460 * _99;
  const intD.9 _107;
  const intD.9 _113;
  struct _Rep_typeD.41460 * _116;

;;   basic block 2, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  in.135_4 = inD.42656;
  if (in.135_4 < 0)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  _6 = this_5(D)->D.37974._inputsD.34629;
  if (in.135_4 >= _6)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                2 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_43 = VDEF <.MEM_3(D)>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  __assert_failD.14402 ("( in >= 0 ) && ( in < _inputs )", "allocators/allocator.cpp", 350, &_ZZN15SparseAllocator13RemoveRequestEiiiE19__PRETTY_FUNCTION__D.42662);
;;    succ:      

;;   basic block 5, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  out.136_7 = outD.42657;
  if (out.136_7 < 0)
    goto <bb 7>;
  else
    goto <bb 6>;
;;    succ:       7 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  _8 = this_5(D)->D.37974._outputsD.34630;
  if (out.136_7 >= _8)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_42 = VDEF <.MEM_3(D)>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  __assert_failD.14402 ("( out >= 0 ) && ( out < _outputs )", "allocators/allocator.cpp", 351, &_ZZN15SparseAllocator13RemoveRequestEiiiE19__PRETTY_FUNCTION__D.42662);
;;    succ:      

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _9 = (long unsigned intD.14) in.135_4;
  # DEBUG D#780ptD.0 => &this_5(D)->_in_reqD.37895
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _44 = MEM[(struct mapD.37148 * *)this_5(D) + 256B];
  # DEBUG D#85ptD.0 => D#780ptD.0
  # DEBUG __nD.61676 => _9
  # DEBUG thisD.61677 => D#85ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _52 = _9 * 48;
  # PT = nonlocal escaped 
  _53 = _44 + _52;
  # DEBUG thisD.61663 => NULL
  # DEBUG __xD.61664 => &outD.42657
  # DEBUG thisD.61665 => D#344ptD.0
  # PT = nonlocal escaped 
  __i$_M_node_37 = &MEM[(const struct _Rb_treeD.41462 *)_53]._M_implD.41540._M_headerD.41695;
  # DEBUG thisD.54363 => NULL
  # DEBUG __xD.54362 => __i$_M_node_37
  # DEBUG thisD.61667 => D#345ptD.0
  # DEBUG __kD.61666 => &outD.42657
  # DEBUG thisD.54354 => D#345ptD.0
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  __i$_M_node_36 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_53 + 16B];
  # DEBUG D#110ptD.0 => D#345ptD.0
  # DEBUG thisD.54273 => D#110ptD.0
  # DEBUG D#335ptD.0 => D#345ptD.0
  # DEBUG __xD.61672 => NULL
  # DEBUG __yD.61671 => NULL
  # DEBUG __kD.61670 => &outD.42657
  # DEBUG __yD.61671 => __i$_M_node_37
  # DEBUG __xD.61672 => __i$_M_node_36
  if (__i$_M_node_36 == 0B)
    goto <bb 53>;
  else
    goto <bb 11>;
;;    succ:       53 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_121 = PHI <__i$_M_node_22(14), __i$_M_node_26(13)>
  # PT = nonlocal escaped 
  # __i$_M_node_120 = PHI <__i$_M_node_173(14), __i$_M_node_97(13)>
  # DEBUG __yD.61671 => __i$_M_node_120
  # DEBUG __xD.61672 => __i$_M_node_121
  if (__i$_M_node_121 == 0B)
    goto <bb 15>;
  else
    goto <bb 10>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_173 = PHI <__i$_M_node_37(11), __i$_M_node_120(10)>
  # PT = nonlocal escaped 
  # __i$_M_node_97 = PHI <__i$_M_node_36(11), __i$_M_node_121(10)>
  # DEBUG __yD.61671 => __i$_M_node_173
  # DEBUG __xD.61672 => __i$_M_node_97
  # DEBUG __xD.54243 => __i$_M_node_97
  # DEBUG __xD.54209 => __i$_M_node_97
  # DEBUG thisD.54210 => __i$_M_node_97
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__i$_M_node_97]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54245 => D#331ptD.0
  # DEBUG thisD.54244 => D#173ptD.0
  # DEBUG D#332ptD.0 => &MEM[(const struct pairD.37146 &)__i$_M_node_97 + 32].firstD.42483
  # DEBUG D#333ptD.0 => &D#334ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#333ptD.0
  # VUSE <.MEM_3(D)>
  _27 = MEM[(const intD.9 &)__i$_M_node_97 + 32];
  # DEBUG D#96ptD.0 => D#332ptD.0
  # DEBUG D#97ptD.0 => &outD.42657
  # DEBUG thisD.54246 => D#95ptD.0
  # DEBUG __xD.54247 => D#96ptD.0
  # DEBUG __yD.54248 => D#97ptD.0
  if (out.136_7 <= _27)
    goto <bb 13>;
  else
    goto <bb 14>;
;;    succ:       13 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.61671 => __i$_M_node_97
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  __i$_M_node_26 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_97 + 16B];
  # DEBUG D#171ptD.0 => __i$_M_node_97
  # DEBUG __xD.54242 => D#171ptD.0
  # DEBUG __xD.61672 => NULL
  goto <bb 9>;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       12 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  __i$_M_node_22 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_97 + 24B];
  # DEBUG D#172ptD.0 => __i$_M_node_97
  # DEBUG __xD.54241 => D#172ptD.0
  # DEBUG __xD.61672 => NULL
  goto <bb 9>;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_111 = PHI <__i$_M_node_120(9)>
  # DEBUG thisD.54240 => NULL
  # DEBUG __xD.54239 => __i$_M_node_111
  # DEBUG __j$_M_nodeD.54291 => __i$_M_node_111
  # DEBUG thisD.54261 => D#345ptD.0
  # DEBUG thisD.54263 => NULL
  # DEBUG __xD.54262 => __i$_M_node_37
  # DEBUG thisD.54258 => &__jD.61668
  # DEBUG __xD.54259 => NULL
  if (__i$_M_node_37 == __i$_M_node_111)
    goto <bb 53>;
  else
    goto <bb 16>;
;;    succ:       53 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       15 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.54283 => __i$_M_node_111
  # DEBUG __xD.53214 => __i$_M_node_111
  # DEBUG thisD.53215 => __i$_M_node_111
  # DEBUG D#174ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__i$_M_node_111]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.54285 => D#174ptD.0
  # DEBUG thisD.54284 => D#173ptD.0
  # DEBUG D#336ptD.0 => &MEM[(const struct pairD.37146 &)__i$_M_node_111 + 32].firstD.42483
  # DEBUG D#338ptD.0 => &MEM[(const struct _Rb_treeD.41462 *)D#345ptD.0]._M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#338ptD.0
  # DEBUG D#96ptD.0 => &outD.42657
  # VUSE <.MEM_3(D)>
  _12 = MEM[(const intD.9 &)__i$_M_node_111 + 32];
  # DEBUG D#97ptD.0 => D#336ptD.0
  # DEBUG thisD.54281 => D#95ptD.0
  # DEBUG __xD.54280 => D#96ptD.0
  # DEBUG __yD.54279 => D#97ptD.0
  # DEBUG D#337ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.54291 => D#337ptD.0
  # DEBUG thisD.54348 => NULL
  # DEBUG __xD.54349 => NULL
  if (out.136_7 < _12)
    goto <bb 53>;
  else
    goto <bb 17>;
;;    succ:       53 (TRUE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 770, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __yD.64934 => __i$_M_node_37
  # DEBUG __xD.64935 => __i$_M_node_36
  if (__i$_M_node_36 == 0B)
    goto <bb 54>;
  else
    goto <bb 20>;
;;    succ:       54 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 1, count 0, freq 9226, maybe hot
;;   Invalid sum of incoming frequencies 9096, should be 9226
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_50 = PHI <__i$_M_node_92(22), __i$_M_node_93(23)>
  # PT = nonlocal escaped 
  # __i$_M_node_51 = PHI <__i$_M_node_88(22), __i$_M_node_87(23)>
  # DEBUG __yD.64934 => __i$_M_node_51
  # DEBUG __xD.64935 => __i$_M_node_50
  if (__i$_M_node_50 == 0B)
    goto <bb 24>;
  else
    goto <bb 19>;
;;    succ:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 8396, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       18 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 21>;
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 701, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 1, count 0, freq 9096, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_88 = PHI <__i$_M_node_36(20), __i$_M_node_50(19)>
  # PT = nonlocal escaped 
  # __i$_M_node_87 = PHI <__i$_M_node_37(20), __i$_M_node_51(19)>
  # DEBUG __yD.64934 => __i$_M_node_87
  # DEBUG __xD.64935 => __i$_M_node_88
  # DEBUG __xD.54403 => __i$_M_node_88
  # DEBUG __xD.54209 => __i$_M_node_88
  # DEBUG thisD.54210 => __i$_M_node_88
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__i$_M_node_88]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54405 => D#331ptD.0
  # DEBUG thisD.54404 => D#173ptD.0
  # DEBUG D#346ptD.0 => &MEM[(const struct pairD.37146 &)__i$_M_node_88 + 32].firstD.42483
  # DEBUG D#347ptD.0 => &D#348ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#347ptD.0
  # VUSE <.MEM_3(D)>
  _90 = MEM[(const intD.9 &)__i$_M_node_88 + 32];
  # DEBUG D#96ptD.0 => D#346ptD.0
  # DEBUG D#97ptD.0 => &outD.42657
  # DEBUG thisD.54406 => D#95ptD.0
  # DEBUG __xD.54407 => D#96ptD.0
  # DEBUG __yD.54408 => D#97ptD.0
  if (out.136_7 <= _90)
    goto <bb 22>;
  else
    goto <bb 23>;
;;    succ:       22 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 4548, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       21 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.64934 => __i$_M_node_88
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  __i$_M_node_92 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_88 + 16B];
  # DEBUG D#108ptD.0 => __i$_M_node_88
  # DEBUG __xD.54402 => D#108ptD.0
  # DEBUG __xD.64935 => NULL
  goto <bb 18>;
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 4548, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       21 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  __i$_M_node_93 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_88 + 24B];
  # DEBUG D#107ptD.0 => __i$_M_node_88
  # DEBUG __xD.54401 => D#107ptD.0
  # DEBUG __xD.64935 => NULL
  goto <bb 18>;
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 831, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_119 = PHI <__i$_M_node_51(18)>
  # DEBUG thisD.54400 => NULL
  # DEBUG __xD.54399 => __i$_M_node_119
  # DEBUG __i$_M_nodeD.64938 => __i$_M_node_119
  # DEBUG thisD.61519 => _53
  # DEBUG D#176ptD.0 => &_53->_M_tD.41463
  # DEBUG thisD.61520 => D#176ptD.0
  # DEBUG thisD.53244 => NULL
  # DEBUG __xD.53243 => __i$_M_node_37
  # DEBUG thisD.61516 => &__iD.64916
  # DEBUG __xD.61517 => NULL
  if (__i$_M_node_37 == __i$_M_node_119)
    goto <bb 54>;
  else
    goto <bb 25>;
;;    succ:       54 [7.9%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [92.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       24 [92.1%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.61543 => &__iD.64916
  # DEBUG thisD.61544 => __i$_M_node_119
  # DEBUG D#753ptD.0 => &MEM[(struct _Rb_tree_nodeD.41466 *)__i$_M_node_119]._M_value_fieldD.43957
  # DEBUG __rD.53249 => D#753ptD.0
  # DEBUG D#754ptD.0 => &MEM[(struct pairD.37146 &)__i$_M_node_119 + 32].firstD.42483
  # DEBUG D#131ptD.0 => _53
  # DEBUG thisD.61540 => D#131ptD.0
  # DEBUG D#130ptD.0 => D#131ptD.0
  # DEBUG D#129ptD.0 => &D#130ptD.0->_M_tD.41463
  # DEBUG D#128ptD.0 => D#129ptD.0
  # DEBUG thisD.52957 => D#128ptD.0
  # DEBUG D#96ptD.0 => &outD.42657
  # VUSE <.MEM_3(D)>
  _96 = MEM[(const intD.9 &)__i$_M_node_119 + 32];
  # DEBUG D#97ptD.0 => D#754ptD.0
  # DEBUG thisD.61538 => D#95ptD.0
  # DEBUG __xD.61537 => D#96ptD.0
  # DEBUG __yD.61536 => D#97ptD.0
  if (out.136_7 < _96)
    goto <bb 54>;
  else
    goto <bb 26>;
;;    succ:       54 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       25 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                54 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_101 = PHI <__i$_M_node_119(25), __i$_M_node_100(54)>
  # .MEM_28 = PHI <.MEM_3(D)(25), .MEM_130(54)>
  # DEBUG __i$_M_nodeD.64938 => __i$_M_node_101
  # DEBUG thisD.61561 => &__iD.64916
  # DEBUG thisD.61562 => __i$_M_node_101
  # DEBUG D#755ptD.0 => &MEM[(struct _Rb_tree_nodeD.41466 *)__i$_M_node_101]._M_value_fieldD.43957
  # DEBUG __rD.53249 => D#755ptD.0
  # DEBUG D#757ptD.0 => {CLOBBER}
  # DEBUG __i$_M_nodeD.64938 => D#757ptD.0
  # VUSE <.MEM_28>
  _15 = MEM[(struct mapped_typeD.41247 &)__i$_M_node_101 + 36].labelD.35381;
  if (_15 != label_16(D))
    goto <bb 27>;
  else
    goto <bb 28>;
;;    succ:       27 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       26 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_40 = VDEF <.MEM_28>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  __assert_failD.14402 ("_in_req[in][out].label == label", "allocators/allocator.cpp", 354, &_ZZN15SparseAllocator13RemoveRequestEiiiE19__PRETTY_FUNCTION__D.42662);
;;    succ:      

;;   basic block 28, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       26 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_28>
  in.135_17 = inD.42656;
  # RANGE ~[2147483648, 18446744071562067967]
  _18 = (long unsigned intD.14) in.135_17;
  # DEBUG D#782ptD.0 => &this_5(D)->_in_reqD.37895
  # VUSE <.MEM_28>
  # PT = nonlocal escaped 
  _45 = MEM[(struct mapD.37148 * *)this_5(D) + 256B];
  # DEBUG D#85ptD.0 => D#782ptD.0
  # DEBUG __nD.61694 => _18
  # DEBUG thisD.61695 => D#85ptD.0
  # RANGE [0, 18446744073709551568] NONZERO 18446744073709551600
  _58 = _18 * 48;
  # PT = nonlocal escaped 
  _59 = _45 + _58;
  # DEBUG thisD.61690 => NULL
  # DEBUG __xD.61691 => &outD.42657
  # PT = nonlocal escaped 
  _57 = &_59->_M_tD.41463;
  # .MEM_83 = VDEF <.MEM_28>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE5eraseERS1_D.41961 (_57, &outD.42657);
  # VUSE <.MEM_83>
  in.135_19 = inD.42656;
  # RANGE ~[2147483648, 18446744071562067967]
  _20 = (long unsigned intD.14) in.135_19;
  # DEBUG D#783ptD.0 => &this_5(D)->_in_reqD.37895
  # VUSE <.MEM_83>
  # PT = nonlocal escaped 
  _46 = MEM[(struct mapD.37148 * *)this_5(D) + 256B];
  # DEBUG D#85ptD.0 => D#783ptD.0
  # DEBUG __nD.61687 => _20
  # DEBUG thisD.61688 => D#85ptD.0
  # RANGE [0, 18446744073709551568] NONZERO 18446744073709551600
  _55 = _20 * 48;
  # PT = nonlocal escaped 
  _56 = _46 + _55;
  # DEBUG thisD.61683 => NULL
  # VUSE <.MEM_83>
  _54 = MEM[(long unsigned intD.14 *)_56 + 40B];
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.61684 => D#93ptD.0
  if (_54 == 0)
    goto <bb 29>;
  else
    goto <bb 30>;
;;    succ:       29 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 261, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       28 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#784ptD.0 => &this_5(D)->_in_occD.37144
  # DEBUG thisD.61697 => D#784ptD.0
  # DEBUG __xD.61698 => &inD.42656
  # PT = nonlocal 
  _60 = &MEM[(struct setD.36306 *)this_5(D) + 160B]._M_tD.36318;
  # .MEM_84 = VDEF <.MEM_83>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE5eraseERKiD.36827 (_60, &inD.42656);
;;    succ:       30 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       28 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                29 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_83(28), .MEM_84(29)>
  # VUSE <.MEM_1>
  out.136_24 = outD.42657;
  # RANGE ~[2147483648, 18446744071562067967]
  _25 = (long unsigned intD.14) out.136_24;
  # DEBUG D#785ptD.0 => &this_5(D)->_out_reqD.37896
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _47 = MEM[(struct mapD.37148 * *)this_5(D) + 280B];
  # DEBUG D#85ptD.0 => D#785ptD.0
  # DEBUG __nD.61713 => _25
  # DEBUG thisD.61714 => D#85ptD.0
  # RANGE [0, 18446744073709551568] NONZERO 18446744073709551600
  _74 = _25 * 48;
  # PT = nonlocal escaped 
  _75 = _47 + _74;
  # DEBUG thisD.61700 => NULL
  # DEBUG __xD.61701 => &inD.42656
  # DEBUG thisD.61702 => D#344ptD.0
  # PT = nonlocal escaped 
  __i$_M_node_23 = &MEM[(const struct _Rb_treeD.41462 *)_75]._M_implD.41540._M_headerD.41695;
  # DEBUG thisD.54363 => NULL
  # DEBUG __xD.54362 => __i$_M_node_23
  # DEBUG thisD.61704 => D#345ptD.0
  # DEBUG __kD.61703 => &inD.42656
  # DEBUG thisD.54354 => D#345ptD.0
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  __i$_M_node_61 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_75 + 16B];
  # DEBUG D#110ptD.0 => D#345ptD.0
  # DEBUG thisD.54273 => D#110ptD.0
  # DEBUG D#335ptD.0 => D#345ptD.0
  # DEBUG __xD.61709 => NULL
  # DEBUG __yD.61708 => NULL
  # DEBUG __kD.61707 => &inD.42656
  # DEBUG __yD.61708 => __i$_M_node_23
  # DEBUG __xD.61709 => __i$_M_node_61
  if (__i$_M_node_61 == 0B)
    goto <bb 55>;
  else
    goto <bb 31>;
;;    succ:       55 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       30 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1>
  pretmp_13 = inD.42656;
  goto <bb 34>;
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 1, count 0, freq 9093, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       36 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_104 = PHI <__i$_M_node_66(36), __i$_M_node_65(35)>
  # PT = nonlocal escaped 
  # __i$_M_node_103 = PHI <__i$_M_node_70(36), __i$_M_node_71(35)>
  # DEBUG __yD.61708 => __i$_M_node_103
  # DEBUG __xD.61709 => __i$_M_node_104
  if (__i$_M_node_104 == 0B)
    goto <bb 37>;
  else
    goto <bb 33>;
;;    succ:       37 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 33, loop depth 1, count 0, freq 8275, maybe hot
;;    prev block 32, next block 34, flags: (NEW)
;;    pred:       32 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 1, count 0, freq 9093, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       31 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_71 = PHI <__i$_M_node_61(31), __i$_M_node_104(33)>
  # PT = nonlocal escaped 
  # __i$_M_node_70 = PHI <__i$_M_node_23(31), __i$_M_node_103(33)>
  # DEBUG __yD.61708 => __i$_M_node_70
  # DEBUG __xD.61709 => __i$_M_node_71
  # DEBUG __xD.54243 => __i$_M_node_71
  # DEBUG __xD.54209 => __i$_M_node_71
  # DEBUG thisD.54210 => __i$_M_node_71
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__i$_M_node_71]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54245 => D#331ptD.0
  # DEBUG thisD.54244 => D#173ptD.0
  # DEBUG D#332ptD.0 => &MEM[(const struct pairD.37146 &)__i$_M_node_71 + 32].firstD.42483
  # DEBUG D#333ptD.0 => &D#334ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#333ptD.0
  # VUSE <.MEM_1>
  _63 = MEM[(const intD.9 &)__i$_M_node_71 + 32];
  # DEBUG D#96ptD.0 => D#332ptD.0
  # DEBUG D#97ptD.0 => &inD.42656
  # DEBUG thisD.54246 => D#95ptD.0
  # DEBUG __xD.54247 => D#96ptD.0
  # DEBUG __yD.54248 => D#97ptD.0
  if (pretmp_13 <= _63)
    goto <bb 35>;
  else
    goto <bb 36>;
;;    succ:       35 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 35, loop depth 1, count 0, freq 4546, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       34 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.61708 => __i$_M_node_71
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  __i$_M_node_65 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_71 + 16B];
  # DEBUG D#171ptD.0 => __i$_M_node_71
  # DEBUG __xD.54242 => D#171ptD.0
  # DEBUG __xD.61709 => NULL
  goto <bb 32>;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 1, count 0, freq 4546, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       34 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  __i$_M_node_66 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_71 + 24B];
  # DEBUG D#172ptD.0 => __i$_M_node_71
  # DEBUG __xD.54241 => D#172ptD.0
  # DEBUG __xD.61709 => NULL
  goto <bb 32>;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       32 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_112 = PHI <__i$_M_node_103(32)>
  # DEBUG thisD.54240 => NULL
  # DEBUG __xD.54239 => __i$_M_node_112
  # DEBUG __j$_M_nodeD.54291 => __i$_M_node_112
  # DEBUG thisD.54261 => D#345ptD.0
  # DEBUG thisD.54263 => NULL
  # DEBUG __xD.54262 => __i$_M_node_23
  # DEBUG thisD.54258 => &__jD.61705
  # DEBUG __xD.54259 => NULL
  if (__i$_M_node_23 == __i$_M_node_112)
    goto <bb 55>;
  else
    goto <bb 38>;
;;    succ:       55 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 764, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       37 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.54283 => __i$_M_node_112
  # DEBUG __xD.53214 => __i$_M_node_112
  # DEBUG thisD.53215 => __i$_M_node_112
  # DEBUG D#174ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__i$_M_node_112]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.54285 => D#174ptD.0
  # DEBUG thisD.54284 => D#173ptD.0
  # DEBUG D#336ptD.0 => &MEM[(const struct pairD.37146 &)__i$_M_node_112 + 32].firstD.42483
  # DEBUG D#338ptD.0 => &MEM[(const struct _Rb_treeD.41462 *)D#345ptD.0]._M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#338ptD.0
  # DEBUG D#96ptD.0 => &inD.42656
  # VUSE <.MEM_1>
  _69 = MEM[(const intD.9 &)__i$_M_node_112 + 32];
  # DEBUG D#97ptD.0 => D#336ptD.0
  # DEBUG thisD.54281 => D#95ptD.0
  # DEBUG __xD.54280 => D#96ptD.0
  # DEBUG __yD.54279 => D#97ptD.0
  if (pretmp_13 < _69)
    goto <bb 55>;
  else
    goto <bb 39>;
;;    succ:       55 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 382, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       38 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __yD.64961 => __i$_M_node_23
  # DEBUG __xD.64962 => __i$_M_node_61
  if (__i$_M_node_61 == 0B)
    goto <bb 56>;
  else
    goto <bb 42>;
;;    succ:       56 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                42 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 1, count 0, freq 9608, maybe hot
;;   Invalid sum of incoming frequencies 9090, should be 9608
;;    prev block 39, next block 41, flags: (NEW, REACHABLE)
;;    pred:       44 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                45 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_72 = PHI <__i$_M_node_109(44), __i$_M_node_110(45)>
  # PT = nonlocal escaped 
  # __i$_M_node_73 = PHI <__i$_M_node_91(44), __i$_M_node_146(45)>
  # DEBUG __yD.64961 => __i$_M_node_73
  # DEBUG __xD.64962 => __i$_M_node_72
  if (__i$_M_node_72 == 0B)
    goto <bb 46>;
  else
    goto <bb 41>;
;;    succ:       46 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                41 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 41, loop depth 1, count 0, freq 8743, maybe hot
;;    prev block 40, next block 42, flags: (NEW)
;;    pred:       40 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 43>;
;;    succ:       43 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 348, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       39 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       43 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 43, loop depth 1, count 0, freq 9089, maybe hot
;;    prev block 42, next block 44, flags: (NEW)
;;    pred:       42 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_91 = PHI <__i$_M_node_61(42), __i$_M_node_72(41)>
  # PT = nonlocal escaped 
  # __i$_M_node_146 = PHI <__i$_M_node_23(42), __i$_M_node_73(41)>
  # DEBUG __yD.64961 => __i$_M_node_146
  # DEBUG __xD.64962 => __i$_M_node_91
  # DEBUG __xD.54403 => __i$_M_node_91
  # DEBUG __xD.54209 => __i$_M_node_91
  # DEBUG thisD.54210 => __i$_M_node_91
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__i$_M_node_91]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54405 => D#331ptD.0
  # DEBUG thisD.54404 => D#173ptD.0
  # DEBUG D#346ptD.0 => &MEM[(const struct pairD.37146 &)__i$_M_node_91 + 32].firstD.42483
  # DEBUG D#347ptD.0 => &D#348ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#347ptD.0
  # VUSE <.MEM_1>
  _107 = MEM[(const intD.9 &)__i$_M_node_91 + 32];
  # DEBUG D#96ptD.0 => D#346ptD.0
  # DEBUG D#97ptD.0 => &inD.42656
  # DEBUG thisD.54406 => D#95ptD.0
  # DEBUG __xD.54407 => D#96ptD.0
  # DEBUG __yD.54408 => D#97ptD.0
  if (pretmp_13 <= _107)
    goto <bb 44>;
  else
    goto <bb 45>;
;;    succ:       44 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                45 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 44, loop depth 1, count 0, freq 4545, maybe hot
;;    prev block 43, next block 45, flags: (NEW, REACHABLE)
;;    pred:       43 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.64961 => __i$_M_node_91
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  __i$_M_node_109 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_91 + 16B];
  # DEBUG D#108ptD.0 => __i$_M_node_91
  # DEBUG __xD.54402 => D#108ptD.0
  # DEBUG __xD.64962 => NULL
  goto <bb 40>;
;;    succ:       40 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 45, loop depth 1, count 0, freq 4545, maybe hot
;;    prev block 44, next block 46, flags: (NEW, REACHABLE)
;;    pred:       43 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  __i$_M_node_110 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_91 + 24B];
  # DEBUG D#107ptD.0 => __i$_M_node_91
  # DEBUG __xD.54401 => D#107ptD.0
  # DEBUG __xD.64962 => NULL
  goto <bb 40>;
;;    succ:       40 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 46, loop depth 0, count 0, freq 865, maybe hot
;;    prev block 45, next block 47, flags: (NEW, REACHABLE)
;;    pred:       40 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_115 = PHI <__i$_M_node_73(40)>
  # DEBUG thisD.54400 => NULL
  # DEBUG __xD.54399 => __i$_M_node_115
  # DEBUG __i$_M_nodeD.64965 => __i$_M_node_115
  # DEBUG thisD.61519 => _75
  # DEBUG D#176ptD.0 => &_75->_M_tD.41463
  # DEBUG thisD.61520 => D#176ptD.0
  # DEBUG thisD.53244 => NULL
  # DEBUG __xD.53243 => __i$_M_node_23
  # DEBUG thisD.61516 => &__iD.64943
  # DEBUG __xD.61517 => NULL
  if (__i$_M_node_23 == __i$_M_node_115)
    goto <bb 56>;
  else
    goto <bb 47>;
;;    succ:       56 [11.6%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [88.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 47, loop depth 0, count 0, freq 764, maybe hot
;;    prev block 46, next block 48, flags: (NEW, REACHABLE)
;;    pred:       46 [88.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.61543 => &__iD.64943
  # DEBUG thisD.61544 => __i$_M_node_115
  # DEBUG D#753ptD.0 => &MEM[(struct _Rb_tree_nodeD.41466 *)__i$_M_node_115]._M_value_fieldD.43957
  # DEBUG __rD.53249 => D#753ptD.0
  # DEBUG D#754ptD.0 => &MEM[(struct pairD.37146 &)__i$_M_node_115 + 32].firstD.42483
  # DEBUG D#131ptD.0 => _75
  # DEBUG thisD.61540 => D#131ptD.0
  # DEBUG D#130ptD.0 => D#131ptD.0
  # DEBUG D#129ptD.0 => &D#130ptD.0->_M_tD.41463
  # DEBUG D#128ptD.0 => D#129ptD.0
  # DEBUG thisD.52957 => D#128ptD.0
  # DEBUG D#96ptD.0 => &inD.42656
  # VUSE <.MEM_1>
  _113 = MEM[(const intD.9 &)__i$_M_node_115 + 32];
  # DEBUG D#97ptD.0 => D#754ptD.0
  # DEBUG thisD.61538 => D#95ptD.0
  # DEBUG __xD.61537 => D#96ptD.0
  # DEBUG __yD.61536 => D#97ptD.0
  if (pretmp_13 < _113)
    goto <bb 56>;
  else
    goto <bb 48>;
;;    succ:       56 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                48 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 48, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 47, next block 49, flags: (NEW, REACHABLE)
;;    pred:       47 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                56 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_118 = PHI <__i$_M_node_115(47), __i$_M_node_117(56)>
  # .MEM_122 = PHI <.MEM_1(47), .MEM_139(56)>
  # DEBUG __i$_M_nodeD.64965 => __i$_M_node_118
  # DEBUG thisD.61561 => &__iD.64943
  # DEBUG thisD.61562 => __i$_M_node_118
  # DEBUG D#755ptD.0 => &MEM[(struct _Rb_tree_nodeD.41466 *)__i$_M_node_118]._M_value_fieldD.43957
  # DEBUG __rD.53249 => D#755ptD.0
  # DEBUG D#757ptD.0 => {CLOBBER}
  # DEBUG __i$_M_nodeD.64965 => D#757ptD.0
  # VUSE <.MEM_122>
  _30 = MEM[(struct mapped_typeD.41247 &)__i$_M_node_118 + 36].labelD.35381;
  if (_15 != _30)
    goto <bb 49>;
  else
    goto <bb 50>;
;;    succ:       49 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                50 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 48, next block 50, flags: (NEW, REACHABLE)
;;    pred:       48 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_38 = VDEF <.MEM_122>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  __assert_failD.14402 ("_out_req[out][in].label == label", "allocators/allocator.cpp", 365, &_ZZN15SparseAllocator13RemoveRequestEiiiE19__PRETTY_FUNCTION__D.42662);
;;    succ:      

;;   basic block 50, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 49, next block 51, flags: (NEW, REACHABLE)
;;    pred:       48 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_122>
  out.136_31 = outD.42657;
  # RANGE ~[2147483648, 18446744071562067967]
  _32 = (long unsigned intD.14) out.136_31;
  # DEBUG D#787ptD.0 => &this_5(D)->_out_reqD.37896
  # VUSE <.MEM_122>
  # PT = nonlocal escaped 
  _48 = MEM[(struct mapD.37148 * *)this_5(D) + 280B];
  # DEBUG D#85ptD.0 => D#787ptD.0
  # DEBUG __nD.61731 => _32
  # DEBUG thisD.61732 => D#85ptD.0
  # RANGE [0, 18446744073709551568] NONZERO 18446744073709551600
  _80 = _32 * 48;
  # PT = nonlocal escaped 
  _81 = _48 + _80;
  # DEBUG thisD.61727 => NULL
  # DEBUG __xD.61728 => &inD.42656
  # PT = nonlocal escaped 
  _79 = &_81->_M_tD.41463;
  # .MEM_85 = VDEF <.MEM_122>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE5eraseERS1_D.41961 (_79, &inD.42656);
  # VUSE <.MEM_85>
  out.136_34 = outD.42657;
  # RANGE ~[2147483648, 18446744071562067967]
  _35 = (long unsigned intD.14) out.136_34;
  # DEBUG D#788ptD.0 => &this_5(D)->_out_reqD.37896
  # VUSE <.MEM_85>
  # PT = nonlocal escaped 
  _49 = MEM[(struct mapD.37148 * *)this_5(D) + 280B];
  # DEBUG D#85ptD.0 => D#788ptD.0
  # DEBUG __nD.61724 => _35
  # DEBUG thisD.61725 => D#85ptD.0
  # RANGE [0, 18446744073709551568] NONZERO 18446744073709551600
  _77 = _35 * 48;
  # PT = nonlocal escaped 
  _78 = _49 + _77;
  # DEBUG thisD.61720 => NULL
  # VUSE <.MEM_85>
  _76 = MEM[(long unsigned intD.14 *)_78 + 40B];
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.61721 => D#93ptD.0
  if (_76 == 0)
    goto <bb 51>;
  else
    goto <bb 52>;
;;    succ:       51 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                52 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 51, loop depth 0, count 0, freq 350, maybe hot
;;    prev block 50, next block 52, flags: (NEW, REACHABLE)
;;    pred:       50 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#789ptD.0 => &this_5(D)->_out_occD.37145
  # DEBUG thisD.61734 => D#789ptD.0
  # DEBUG __xD.61735 => &outD.42657
  # PT = nonlocal 
  _82 = &MEM[(struct setD.36306 *)this_5(D) + 208B]._M_tD.36318;
  # .MEM_86 = VDEF <.MEM_85>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE5eraseERKiD.36827 (_82, &outD.42657);
;;    succ:       52 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 52, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 51, next block 53, flags: (NEW, REACHABLE)
;;    pred:       50 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                51 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2 = PHI <.MEM_85(50), .MEM_86(51)>
  # VUSE <.MEM_2>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 53, loop depth 0, count 0, freq 135, maybe hot
;;    prev block 52, next block 54, flags: (NEW, REACHABLE)
;;    pred:       15 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#337ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.54291 => D#337ptD.0
  # DEBUG thisD.54348 => NULL
  # DEBUG __xD.54349 => NULL
  # .MEM_41 = VDEF <.MEM_3(D)>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  __assert_failD.14402 ("_in_req[in].count( out ) > 0", "allocators/allocator.cpp", 353, &_ZZN15SparseAllocator13RemoveRequestEiiiE19__PRETTY_FUNCTION__D.42662);
;;    succ:      

;;   basic block 54, loop depth 0, count 0, freq 517, maybe hot
;;    prev block 53, next block 55, flags: (NEW, REACHABLE)
;;    pred:       25 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [7.9%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_21 = PHI <__i$_M_node_119(25), __i$_M_node_119(24), __i$_M_node_37(17)>
  # DEBUG thisD.64919 => &D.64940
  # DEBUG __aD.64918 => &outD.42657
  # DEBUG __bD.64917 => NULL
  # .MEM_123 = VDEF <.MEM_3(D)>
  D.64940.firstD.42483 = out.136_7;
  # .MEM_124 = VDEF <.MEM_123>
  MEM[(struct pairD.37146 *)&D.64940 + 4B] = 0;
  # .MEM_125 = VDEF <.MEM_124>
  MEM[(struct pairD.37146 *)&D.64940 + 8B] = 0;
  # .MEM_126 = VDEF <.MEM_125>
  MEM[(struct pairD.37146 *)&D.64940 + 12B] = 0;
  # .MEM_127 = VDEF <.MEM_126>
  MEM[(struct pairD.37146 *)&D.64940 + 16B] = 0;
  # DEBUG thisD.64922 => _53
  # DEBUG __position$_M_nodeD.61574 => __i$_M_node_21
  # DEBUG __xD.64920 => &D.64940
  # DEBUG thisD.61550 => NULL
  # DEBUG __itD.61549 => &__positionD.64921
  # PT = nonlocal escaped 
  _99 = &_53->_M_tD.41463;
  # DEBUG thisD.64925 => _99
  # .MEM_128 = VDEF <.MEM_127>
  MEM[(struct _Rb_tree_const_iteratorD.41769 *)&__posD.64924] = __i$_M_node_21;
  # DEBUG __xD.64923 => &D.64940
  # DEBUG thisD.61510 => &__anD.64926
  # DEBUG __tD.61509 => _99
  # DEBUG __an$_M_tD.61503 => _99
  # DEBUG D#752ptD.0 => &__anD.64926
  # .MEM_129 = VDEF <.MEM_128>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  D.64939 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE17_M_insert_unique_INSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_ERKS4_RT_.isra.197.constprop.200D.62239 (_99, __posD.64924, &D.64940);
  # VUSE <.MEM_129>
  # PT = nonlocal escaped 
  __i$_M_node_100 = MEM[(struct _Rb_tree_iteratorD.41767 *)&D.64939];
  # DEBUG __i$_M_nodeD.64938 => __i$_M_node_100
  # .MEM_130 = VDEF <.MEM_129>
  D.64940 ={v} {CLOBBER};
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 55, loop depth 0, count 0, freq 135, maybe hot
;;   Invalid sum of incoming frequencies 517, should be 135
;;    prev block 54, next block 56, flags: (NEW, REACHABLE)
;;    pred:       37 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#337ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.54291 => D#337ptD.0
  # DEBUG thisD.54348 => NULL
  # DEBUG __xD.54349 => NULL
  # DEBUG D#337ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.54291 => D#337ptD.0
  # DEBUG thisD.54348 => NULL
  # DEBUG __xD.54349 => NULL
  # .MEM_39 = VDEF <.MEM_1>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  __assert_failD.14402 ("_out_req[out].count( in ) > 0", "allocators/allocator.cpp", 364, &_ZZN15SparseAllocator13RemoveRequestEiiiE19__PRETTY_FUNCTION__D.42662);
;;    succ:      

;;   basic block 56, loop depth 0, count 0, freq 517, maybe hot
;;    prev block 55, next block 1, flags: (NEW, REACHABLE)
;;    pred:       47 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                46 [11.6%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_33 = PHI <__i$_M_node_115(47), __i$_M_node_115(46), __i$_M_node_23(39)>
  # DEBUG thisD.64946 => &D.64967
  # DEBUG __aD.64945 => &inD.42656
  # DEBUG __bD.64944 => NULL
  # .MEM_132 = VDEF <.MEM_1>
  D.64967.firstD.42483 = pretmp_13;
  # .MEM_133 = VDEF <.MEM_132>
  MEM[(struct pairD.37146 *)&D.64967 + 4B] = 0;
  # .MEM_134 = VDEF <.MEM_133>
  MEM[(struct pairD.37146 *)&D.64967 + 8B] = 0;
  # .MEM_135 = VDEF <.MEM_134>
  MEM[(struct pairD.37146 *)&D.64967 + 12B] = 0;
  # .MEM_136 = VDEF <.MEM_135>
  MEM[(struct pairD.37146 *)&D.64967 + 16B] = 0;
  # DEBUG thisD.64949 => _75
  # DEBUG __position$_M_nodeD.61574 => __i$_M_node_33
  # DEBUG __xD.64947 => &D.64967
  # DEBUG thisD.61550 => NULL
  # DEBUG __itD.61549 => &__positionD.64948
  # PT = nonlocal escaped 
  _116 = &_75->_M_tD.41463;
  # DEBUG thisD.64952 => _116
  # .MEM_137 = VDEF <.MEM_136>
  MEM[(struct _Rb_tree_const_iteratorD.41769 *)&__posD.64951] = __i$_M_node_33;
  # DEBUG __xD.64950 => &D.64967
  # DEBUG thisD.61510 => &__anD.64953
  # DEBUG __tD.61509 => _116
  # DEBUG __an$_M_tD.61503 => _116
  # DEBUG D#752ptD.0 => &__anD.64953
  # .MEM_138 = VDEF <.MEM_137>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  D.64966 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE17_M_insert_unique_INSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_ERKS4_RT_.isra.197.constprop.200D.62239 (_116, __posD.64951, &D.64967);
  # VUSE <.MEM_138>
  # PT = nonlocal escaped 
  __i$_M_node_117 = MEM[(struct _Rb_tree_iteratorD.41767 *)&D.64966];
  # DEBUG __i$_M_nodeD.64965 => __i$_M_node_117
  # .MEM_139 = VDEF <.MEM_138>
  D.64967 ={v} {CLOBBER};
  goto <bb 48>;
;;    succ:       48 [100.0%]  (FALLTHRU,EXECUTABLE)

}


Creating dr for in
analyze_innermost: success.
	base_address: &in
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: in
Creating dr for this_5(D)->D.37974._inputs
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: *this_5(D)
	Access function 0: 768
	Access function 1: 0
Creating dr for out
analyze_innermost: success.
	base_address: &out
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: out
Creating dr for this_5(D)->D.37974._outputs
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 100
	step: 0
	aligned to: 256
	base_object: *this_5(D)
	Access function 0: 800
	Access function 1: 0
Creating dr for MEM[(struct map * *)this_5(D) + 256B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_5(D) + 256B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_53 + 16B]
analyze_innermost: success.
	base_address: _44 + (long unsigned int) in.135_4 * 48
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)_53 + 16B]
Creating dr for MEM[(const int &)__i$_M_node_97 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_97 + 32]
Creating dr for MEM[(const int &)__i$_M_node_97 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_97 + 32]
Creating dr for MEM[(const int &)__i$_M_node_97 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_97 + 32]
Creating dr for MEM[(const int &)__i$_M_node_97 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_97 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_97 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_97 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_97 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_97 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_97 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_97 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_97 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_97 + 24B]
Creating dr for MEM[(const int &)__i$_M_node_97 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_97 + 32]
Creating dr for MEM[(const int &)__i$_M_node_97 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_97 + 32]
Creating dr for MEM[(const int &)__i$_M_node_97 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_97 + 32]
Creating dr for MEM[(const int &)__i$_M_node_97 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_97 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_97 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_97 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_97 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_97 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_97 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_97 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_97 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_97 + 24B]
Applying pattern match.pd:750, generic-match.c:1467
Applying pattern match.pd:397, generic-match.c:4039
Creating dr for MEM[(const int &)__i$_M_node_111 + 32]
analyze_innermost: success.
	base_address: __i$_M_node_111
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__i$_M_node_111 + 32]
Creating dr for MEM[(const int &)__i$_M_node_88 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_88 + 32]
Creating dr for MEM[(const int &)__i$_M_node_88 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_88 + 32]
Creating dr for MEM[(const int &)__i$_M_node_88 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_88 + 32]
Creating dr for MEM[(const int &)__i$_M_node_88 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_88 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_88 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_88 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_88 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_88 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_88 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_88 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_88 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_88 + 24B]
Creating dr for MEM[(const int &)__i$_M_node_88 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_88 + 32]
Creating dr for MEM[(const int &)__i$_M_node_88 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_88 + 32]
Creating dr for MEM[(const int &)__i$_M_node_88 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_88 + 32]
Creating dr for MEM[(const int &)__i$_M_node_88 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_88 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_88 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_88 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_88 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_88 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_88 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_88 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_88 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_88 + 24B]
Creating dr for MEM[(const int &)__i$_M_node_119 + 32]
analyze_innermost: success.
	base_address: __i$_M_node_119
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__i$_M_node_119 + 32]
Creating dr for D.64940.first
analyze_innermost: success.
	base_address: &D.64940
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.64940]
	Access function 0: 0
Creating dr for MEM[(struct pair *)&D.64940 + 4B]
analyze_innermost: success.
	base_address: &D.64940
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.64940 + 4B]
Creating dr for MEM[(struct pair *)&D.64940 + 8B]
analyze_innermost: success.
	base_address: &D.64940
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.64940 + 8B]
Creating dr for MEM[(struct pair *)&D.64940 + 12B]
analyze_innermost: success.
	base_address: &D.64940
	offset from base address: 0
	constant offset from base address: 12
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.64940 + 12B]
Creating dr for MEM[(struct pair *)&D.64940 + 16B]
analyze_innermost: success.
	base_address: &D.64940
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.64940 + 16B]
Creating dr for MEM[(struct _Rb_tree_const_iterator *)&__pos]
analyze_innermost: success.
	base_address: &__pos
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_const_iterator *)&__pos]
Creating dr for MEM[(struct mapped_type &)__i$_M_node_101 + 36].label
analyze_innermost: success.
	base_address: __i$_M_node_101
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(struct mapped_type &)__i$_M_node_101 + 36]
	Access function 0: 32
Creating dr for in
analyze_innermost: success.
	base_address: &in
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: in
Creating dr for MEM[(struct map * *)this_5(D) + 256B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_5(D) + 256B]
Creating dr for out
analyze_innermost: success.
	base_address: &out
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: out
Creating dr for MEM[(struct map * *)this_5(D) + 280B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 280
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_5(D) + 280B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_75 + 16B]
analyze_innermost: success.
	base_address: _47 + (long unsigned int) out.136_24 * 48
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)_75 + 16B]
Creating dr for in
analyze_innermost: success.
	base_address: &in
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: in
Creating dr for MEM[(const int &)__i$_M_node_71 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_71 + 32]
Creating dr for MEM[(const int &)__i$_M_node_71 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_71 + 32]
Creating dr for MEM[(const int &)__i$_M_node_71 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_71 + 32]
Creating dr for MEM[(const int &)__i$_M_node_71 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_71 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_71 + 24B]
Creating dr for MEM[(const int &)__i$_M_node_71 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_71 + 32]
Creating dr for MEM[(const int &)__i$_M_node_71 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_71 + 32]
Creating dr for MEM[(const int &)__i$_M_node_71 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_71 + 32]
Creating dr for MEM[(const int &)__i$_M_node_71 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_71 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_71 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_71 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_71 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_71 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_71 + 24B]
Applying pattern match.pd:750, generic-match.c:1467
Applying pattern match.pd:397, generic-match.c:4039
Creating dr for MEM[(const int &)__i$_M_node_112 + 32]
analyze_innermost: success.
	base_address: __i$_M_node_112
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__i$_M_node_112 + 32]
Creating dr for MEM[(const int &)__i$_M_node_91 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_91 + 32]
Creating dr for MEM[(const int &)__i$_M_node_91 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_91 + 32]
Creating dr for MEM[(const int &)__i$_M_node_91 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_91 + 32]
Creating dr for MEM[(const int &)__i$_M_node_91 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_91 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_91 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_91 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_91 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_91 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_91 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_91 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_91 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_91 + 24B]
Creating dr for MEM[(const int &)__i$_M_node_91 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_91 + 32]
Creating dr for MEM[(const int &)__i$_M_node_91 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_91 + 32]
Creating dr for MEM[(const int &)__i$_M_node_91 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_91 + 32]
Creating dr for MEM[(const int &)__i$_M_node_91 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const int &)__i$_M_node_91 + 32]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_91 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_91 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_91 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_91 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_91 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_91 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_91 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_91 + 24B]
Creating dr for MEM[(const int &)__i$_M_node_115 + 32]
analyze_innermost: success.
	base_address: __i$_M_node_115
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__i$_M_node_115 + 32]
Creating dr for D.64967.first
analyze_innermost: success.
	base_address: &D.64967
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.64967]
	Access function 0: 0
Creating dr for MEM[(struct pair *)&D.64967 + 4B]
analyze_innermost: success.
	base_address: &D.64967
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.64967 + 4B]
Creating dr for MEM[(struct pair *)&D.64967 + 8B]
analyze_innermost: success.
	base_address: &D.64967
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.64967 + 8B]
Creating dr for MEM[(struct pair *)&D.64967 + 12B]
analyze_innermost: success.
	base_address: &D.64967
	offset from base address: 0
	constant offset from base address: 12
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.64967 + 12B]
Creating dr for MEM[(struct pair *)&D.64967 + 16B]
analyze_innermost: success.
	base_address: &D.64967
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.64967 + 16B]
Creating dr for MEM[(struct _Rb_tree_const_iterator *)&__pos]
analyze_innermost: success.
	base_address: &__pos
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_const_iterator *)&__pos]
Creating dr for MEM[(struct mapped_type &)__i$_M_node_118 + 36].label
analyze_innermost: success.
	base_address: __i$_M_node_118
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(struct mapped_type &)__i$_M_node_118 + 36]
	Access function 0: 32
Creating dr for out
analyze_innermost: success.
	base_address: &out
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: out
Creating dr for MEM[(struct map * *)this_5(D) + 280B]
analyze_innermost: success.
	base_address: this_5(D)
	offset from base address: 0
	constant offset from base address: 280
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_5(D) + 280B]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:62, LOOPS:4, CONDITIONS:28, STMTS:459)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_4 bb_3 })
  {
    <bb 2>:
    # VUSE <.MEM_3(D)>
    in.135_4 = in;
    if (in.135_4 < 0)
      goto <bb 4>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 bb_5 })
  {
    <bb 3>:
    # VUSE <.MEM_3(D)>
    _6 = this_5(D)->D.37974._inputs;
    if (in.135_4 >= _6)
      goto <bb 4>;
    else
      goto <bb 5>;

  }
  bb_4 (preds = {bb_3 bb_2 }, succs = {})
  {
    <bb 4>:
    # .MEM_43 = VDEF <.MEM_3(D)>
    __assert_fail ("( in >= 0 ) && ( in < _inputs )", "allocators/allocator.cpp", 350, &__PRETTY_FUNCTION__);

  }
  bb_5 (preds = {bb_3 }, succs = {bb_7 bb_6 })
  {
    <bb 5>:
    # VUSE <.MEM_3(D)>
    out.136_7 = out;
    if (out.136_7 < 0)
      goto <bb 7>;
    else
      goto <bb 6>;

  }
  bb_6 (preds = {bb_5 }, succs = {bb_7 bb_8 })
  {
    <bb 6>:
    # VUSE <.MEM_3(D)>
    _8 = this_5(D)->D.37974._outputs;
    if (out.136_7 >= _8)
      goto <bb 7>;
    else
      goto <bb 8>;

  }
  bb_7 (preds = {bb_6 bb_5 }, succs = {})
  {
    <bb 7>:
    # .MEM_42 = VDEF <.MEM_3(D)>
    __assert_fail ("( out >= 0 ) && ( out < _outputs )", "allocators/allocator.cpp", 351, &__PRETTY_FUNCTION__);

  }
  bb_8 (preds = {bb_6 }, succs = {bb_53 bb_11 })
  {
    <bb 8>:
    _9 = (long unsigned int) in.135_4;
    # DEBUG D#780 => &this_5(D)->_in_req
    # VUSE <.MEM_3(D)>
    _44 = MEM[(struct map * *)this_5(D) + 256B];
    # DEBUG D#85 => D#780
    # DEBUG __n => _9
    # DEBUG this => D#85
    _52 = _9 * 48;
    _53 = _44 + _52;
    # DEBUG this => NULL
    # DEBUG __x => &out
    # DEBUG this => D#344
    __i$_M_node_37 = &MEM[(const struct _Rb_tree *)_53]._M_impl._M_header;
    # DEBUG this => NULL
    # DEBUG __x => __i$_M_node_37
    # DEBUG this => D#345
    # DEBUG __k => &out
    # DEBUG this => D#345
    # VUSE <.MEM_3(D)>
    __i$_M_node_36 = MEM[(struct _Rb_tree_node_base * *)_53 + 16B];
    # DEBUG D#110 => D#345
    # DEBUG this => D#110
    # DEBUG D#335 => D#345
    # DEBUG __x => NULL
    # DEBUG __y => NULL
    # DEBUG __k => &out
    # DEBUG __y => __i$_M_node_37
    # DEBUG __x => __i$_M_node_36
    if (__i$_M_node_36 == 0B)
      goto <bb 53>;
    else
      goto <bb 11>;

  }
  bb_11 (preds = {bb_8 }, succs = {bb_12 })
  {
    <bb 11>:

  }
  bb_15 (preds = {bb_9 }, succs = {bb_60 })
  {
    <bb 15>:
    # __i$_M_node_111 = PHI <__i$_M_node_120(9)>

  }
  bb_60 (preds = {bb_15 }, succs = {bb_53 bb_16 })
  {
    <bb 60>:
    # DEBUG this => NULL
    # DEBUG __x => __i$_M_node_111
    # DEBUG __j$_M_node => __i$_M_node_111
    # DEBUG this => D#345
    # DEBUG this => NULL
    # DEBUG __x => __i$_M_node_37
    # DEBUG this => &__j
    # DEBUG __x => NULL
    if (__i$_M_node_37 == __i$_M_node_111)
      goto <bb 53>;
    else
      goto <bb 16>;

  }
  bb_16 (preds = {bb_60 }, succs = {bb_53 bb_17 })
  {
    <bb 16>:
    # DEBUG __x => __i$_M_node_111
    # DEBUG __x => __i$_M_node_111
    # DEBUG this => __i$_M_node_111
    # DEBUG D#174 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_111]._M_value_field
    # DEBUG __r => D#174
    # DEBUG __x => D#174
    # DEBUG this => D#173
    # DEBUG D#336 => &MEM[(const struct pair &)__i$_M_node_111 + 32].first
    # DEBUG D#338 => &MEM[(const struct _Rb_tree *)D#345]._M_impl._M_key_compare
    # DEBUG D#95 => D#338
    # DEBUG D#96 => &out
    # VUSE <.MEM_3(D)>
    _12 = MEM[(const int &)__i$_M_node_111 + 32];
    # DEBUG D#97 => D#336
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    # DEBUG D#337 => {CLOBBER}
    # DEBUG __j$_M_node => D#337
    # DEBUG this => NULL
    # DEBUG __x => NULL
    if (out.136_7 < _12)
      goto <bb 53>;
    else
      goto <bb 17>;

  }
  bb_17 (preds = {bb_16 }, succs = {bb_54 bb_20 })
  {
    <bb 17>:
    # DEBUG __y => __i$_M_node_37
    # DEBUG __x => __i$_M_node_36
    if (__i$_M_node_36 == 0B)
      goto <bb 54>;
    else
      goto <bb 20>;

  }
  bb_20 (preds = {bb_17 }, succs = {bb_21 })
  {
    <bb 20>:

  }
  bb_24 (preds = {bb_18 }, succs = {bb_59 })
  {
    <bb 24>:
    # __i$_M_node_119 = PHI <__i$_M_node_51(18)>

  }
  bb_59 (preds = {bb_24 }, succs = {bb_54 bb_25 })
  {
    <bb 59>:
    # DEBUG this => NULL
    # DEBUG __x => __i$_M_node_119
    # DEBUG __i$_M_node => __i$_M_node_119
    # DEBUG this => _53
    # DEBUG D#176 => &_53->_M_t
    # DEBUG this => D#176
    # DEBUG this => NULL
    # DEBUG __x => __i$_M_node_37
    # DEBUG this => &__i
    # DEBUG __x => NULL
    if (__i$_M_node_37 == __i$_M_node_119)
      goto <bb 54>;
    else
      goto <bb 25>;

  }
  bb_25 (preds = {bb_59 }, succs = {bb_54 bb_26 })
  {
    <bb 25>:
    # DEBUG this => &__i
    # DEBUG this => __i$_M_node_119
    # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_119]._M_value_field
    # DEBUG __r => D#753
    # DEBUG D#754 => &MEM[(struct pair &)__i$_M_node_119 + 32].first
    # DEBUG D#131 => _53
    # DEBUG this => D#131
    # DEBUG D#130 => D#131
    # DEBUG D#129 => &D#130->_M_t
    # DEBUG D#128 => D#129
    # DEBUG this => D#128
    # DEBUG D#96 => &out
    # VUSE <.MEM_3(D)>
    _96 = MEM[(const int &)__i$_M_node_119 + 32];
    # DEBUG D#97 => D#754
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    if (out.136_7 < _96)
      goto <bb 54>;
    else
      goto <bb 26>;

  }
  bb_26 (preds = {bb_25 bb_54 }, succs = {bb_27 bb_28 })
  {
    <bb 26>:
    # __i$_M_node_101 = PHI <__i$_M_node_119(25), __i$_M_node_100(54)>
    # .MEM_28 = PHI <.MEM_3(D)(25), .MEM_130(54)>
    # DEBUG __i$_M_node => __i$_M_node_101
    # DEBUG this => &__i
    # DEBUG this => __i$_M_node_101
    # DEBUG D#755 => &MEM[(struct _Rb_tree_node *)__i$_M_node_101]._M_value_field
    # DEBUG __r => D#755
    # DEBUG D#757 => {CLOBBER}
    # DEBUG __i$_M_node => D#757
    # VUSE <.MEM_28>
    _15 = MEM[(struct mapped_type &)__i$_M_node_101 + 36].label;
    if (_15 != label_16(D))
      goto <bb 27>;
    else
      goto <bb 28>;

  }
  bb_27 (preds = {bb_26 }, succs = {})
  {
    <bb 27>:
    # .MEM_40 = VDEF <.MEM_28>
    __assert_fail ("_in_req[in][out].label == label", "allocators/allocator.cpp", 354, &__PRETTY_FUNCTION__);

  }
  bb_28 (preds = {bb_26 }, succs = {bb_29 bb_30 })
  {
    <bb 28>:
    # VUSE <.MEM_28>
    in.135_17 = in;
    _18 = (long unsigned int) in.135_17;
    # DEBUG D#782 => &this_5(D)->_in_req
    # VUSE <.MEM_28>
    _45 = MEM[(struct map * *)this_5(D) + 256B];
    # DEBUG D#85 => D#782
    # DEBUG __n => _18
    # DEBUG this => D#85
    _58 = _18 * 48;
    _59 = _45 + _58;
    # DEBUG this => NULL
    # DEBUG __x => &out
    _57 = &_59->_M_t;
    # .MEM_83 = VDEF <.MEM_28>
    std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::erase (_57, &out);
    # VUSE <.MEM_83>
    in.135_19 = in;
    _20 = (long unsigned int) in.135_19;
    # DEBUG D#783 => &this_5(D)->_in_req
    # VUSE <.MEM_83>
    _46 = MEM[(struct map * *)this_5(D) + 256B];
    # DEBUG D#85 => D#783
    # DEBUG __n => _20
    # DEBUG this => D#85
    _55 = _20 * 48;
    _56 = _46 + _55;
    # DEBUG this => NULL
    # VUSE <.MEM_83>
    _54 = MEM[(long unsigned int *)_56 + 40B];
    # DEBUG D#93 => D#94
    # DEBUG this => D#93
    if (_54 == 0)
      goto <bb 29>;
    else
      goto <bb 30>;

  }
  bb_29 (preds = {bb_28 }, succs = {bb_30 })
  {
    <bb 29>:
    # DEBUG D#784 => &this_5(D)->_in_occ
    # DEBUG this => D#784
    # DEBUG __x => &in
    _60 = &MEM[(struct set *)this_5(D) + 160B]._M_t;
    # .MEM_84 = VDEF <.MEM_83>
    std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::erase (_60, &in);

  }
  bb_30 (preds = {bb_28 bb_29 }, succs = {bb_55 bb_31 })
  {
    <bb 30>:
    # .MEM_1 = PHI <.MEM_83(28), .MEM_84(29)>
    # VUSE <.MEM_1>
    out.136_24 = out;
    _25 = (long unsigned int) out.136_24;
    # DEBUG D#785 => &this_5(D)->_out_req
    # VUSE <.MEM_1>
    _47 = MEM[(struct map * *)this_5(D) + 280B];
    # DEBUG D#85 => D#785
    # DEBUG __n => _25
    # DEBUG this => D#85
    _74 = _25 * 48;
    _75 = _47 + _74;
    # DEBUG this => NULL
    # DEBUG __x => &in
    # DEBUG this => D#344
    __i$_M_node_23 = &MEM[(const struct _Rb_tree *)_75]._M_impl._M_header;
    # DEBUG this => NULL
    # DEBUG __x => __i$_M_node_23
    # DEBUG this => D#345
    # DEBUG __k => &in
    # DEBUG this => D#345
    # VUSE <.MEM_1>
    __i$_M_node_61 = MEM[(struct _Rb_tree_node_base * *)_75 + 16B];
    # DEBUG D#110 => D#345
    # DEBUG this => D#110
    # DEBUG D#335 => D#345
    # DEBUG __x => NULL
    # DEBUG __y => NULL
    # DEBUG __k => &in
    # DEBUG __y => __i$_M_node_23
    # DEBUG __x => __i$_M_node_61
    if (__i$_M_node_61 == 0B)
      goto <bb 55>;
    else
      goto <bb 31>;

  }
  bb_31 (preds = {bb_30 }, succs = {bb_34 })
  {
    <bb 31>:
    # VUSE <.MEM_1>
    pretmp_13 = in;
    goto <bb 34>;

  }
  bb_37 (preds = {bb_32 }, succs = {bb_58 })
  {
    <bb 37>:
    # __i$_M_node_112 = PHI <__i$_M_node_103(32)>

  }
  bb_58 (preds = {bb_37 }, succs = {bb_55 bb_38 })
  {
    <bb 58>:
    # DEBUG this => NULL
    # DEBUG __x => __i$_M_node_112
    # DEBUG __j$_M_node => __i$_M_node_112
    # DEBUG this => D#345
    # DEBUG this => NULL
    # DEBUG __x => __i$_M_node_23
    # DEBUG this => &__j
    # DEBUG __x => NULL
    if (__i$_M_node_23 == __i$_M_node_112)
      goto <bb 55>;
    else
      goto <bb 38>;

  }
  bb_38 (preds = {bb_58 }, succs = {bb_55 bb_39 })
  {
    <bb 38>:
    # DEBUG __x => __i$_M_node_112
    # DEBUG __x => __i$_M_node_112
    # DEBUG this => __i$_M_node_112
    # DEBUG D#174 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_112]._M_value_field
    # DEBUG __r => D#174
    # DEBUG __x => D#174
    # DEBUG this => D#173
    # DEBUG D#336 => &MEM[(const struct pair &)__i$_M_node_112 + 32].first
    # DEBUG D#338 => &MEM[(const struct _Rb_tree *)D#345]._M_impl._M_key_compare
    # DEBUG D#95 => D#338
    # DEBUG D#96 => &in
    # VUSE <.MEM_1>
    _69 = MEM[(const int &)__i$_M_node_112 + 32];
    # DEBUG D#97 => D#336
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    if (pretmp_13 < _69)
      goto <bb 55>;
    else
      goto <bb 39>;

  }
  bb_39 (preds = {bb_38 }, succs = {bb_56 bb_42 })
  {
    <bb 39>:
    # DEBUG __y => __i$_M_node_23
    # DEBUG __x => __i$_M_node_61
    if (__i$_M_node_61 == 0B)
      goto <bb 56>;
    else
      goto <bb 42>;

  }
  bb_42 (preds = {bb_39 }, succs = {bb_43 })
  {
    <bb 42>:

  }
  bb_46 (preds = {bb_40 }, succs = {bb_57 })
  {
    <bb 46>:
    # __i$_M_node_115 = PHI <__i$_M_node_73(40)>

  }
  bb_57 (preds = {bb_46 }, succs = {bb_56 bb_47 })
  {
    <bb 57>:
    # DEBUG this => NULL
    # DEBUG __x => __i$_M_node_115
    # DEBUG __i$_M_node => __i$_M_node_115
    # DEBUG this => _75
    # DEBUG D#176 => &_75->_M_t
    # DEBUG this => D#176
    # DEBUG this => NULL
    # DEBUG __x => __i$_M_node_23
    # DEBUG this => &__i
    # DEBUG __x => NULL
    if (__i$_M_node_23 == __i$_M_node_115)
      goto <bb 56>;
    else
      goto <bb 47>;

  }
  bb_47 (preds = {bb_57 }, succs = {bb_56 bb_48 })
  {
    <bb 47>:
    # DEBUG this => &__i
    # DEBUG this => __i$_M_node_115
    # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_115]._M_value_field
    # DEBUG __r => D#753
    # DEBUG D#754 => &MEM[(struct pair &)__i$_M_node_115 + 32].first
    # DEBUG D#131 => _75
    # DEBUG this => D#131
    # DEBUG D#130 => D#131
    # DEBUG D#129 => &D#130->_M_t
    # DEBUG D#128 => D#129
    # DEBUG this => D#128
    # DEBUG D#96 => &in
    # VUSE <.MEM_1>
    _113 = MEM[(const int &)__i$_M_node_115 + 32];
    # DEBUG D#97 => D#754
    # DEBUG this => D#95
    # DEBUG __x => D#96
    # DEBUG __y => D#97
    if (pretmp_13 < _113)
      goto <bb 56>;
    else
      goto <bb 48>;

  }
  bb_48 (preds = {bb_47 bb_56 }, succs = {bb_49 bb_50 })
  {
    <bb 48>:
    # __i$_M_node_118 = PHI <__i$_M_node_115(47), __i$_M_node_117(56)>
    # .MEM_122 = PHI <.MEM_1(47), .MEM_139(56)>
    # DEBUG __i$_M_node => __i$_M_node_118
    # DEBUG this => &__i
    # DEBUG this => __i$_M_node_118
    # DEBUG D#755 => &MEM[(struct _Rb_tree_node *)__i$_M_node_118]._M_value_field
    # DEBUG __r => D#755
    # DEBUG D#757 => {CLOBBER}
    # DEBUG __i$_M_node => D#757
    # VUSE <.MEM_122>
    _30 = MEM[(struct mapped_type &)__i$_M_node_118 + 36].label;
    if (_15 != _30)
      goto <bb 49>;
    else
      goto <bb 50>;

  }
  bb_49 (preds = {bb_48 }, succs = {})
  {
    <bb 49>:
    # .MEM_38 = VDEF <.MEM_122>
    __assert_fail ("_out_req[out][in].label == label", "allocators/allocator.cpp", 365, &__PRETTY_FUNCTION__);

  }
  bb_50 (preds = {bb_48 }, succs = {bb_51 bb_52 })
  {
    <bb 50>:
    # VUSE <.MEM_122>
    out.136_31 = out;
    _32 = (long unsigned int) out.136_31;
    # DEBUG D#787 => &this_5(D)->_out_req
    # VUSE <.MEM_122>
    _48 = MEM[(struct map * *)this_5(D) + 280B];
    # DEBUG D#85 => D#787
    # DEBUG __n => _32
    # DEBUG this => D#85
    _80 = _32 * 48;
    _81 = _48 + _80;
    # DEBUG this => NULL
    # DEBUG __x => &in
    _79 = &_81->_M_t;
    # .MEM_85 = VDEF <.MEM_122>
    std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::erase (_79, &in);
    # VUSE <.MEM_85>
    out.136_34 = out;
    _35 = (long unsigned int) out.136_34;
    # DEBUG D#788 => &this_5(D)->_out_req
    # VUSE <.MEM_85>
    _49 = MEM[(struct map * *)this_5(D) + 280B];
    # DEBUG D#85 => D#788
    # DEBUG __n => _35
    # DEBUG this => D#85
    _77 = _35 * 48;
    _78 = _49 + _77;
    # DEBUG this => NULL
    # VUSE <.MEM_85>
    _76 = MEM[(long unsigned int *)_78 + 40B];
    # DEBUG D#93 => D#94
    # DEBUG this => D#93
    if (_76 == 0)
      goto <bb 51>;
    else
      goto <bb 52>;

  }
  bb_51 (preds = {bb_50 }, succs = {bb_52 })
  {
    <bb 51>:
    # DEBUG D#789 => &this_5(D)->_out_occ
    # DEBUG this => D#789
    # DEBUG __x => &out
    _82 = &MEM[(struct set *)this_5(D) + 208B]._M_t;
    # .MEM_86 = VDEF <.MEM_85>
    std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::erase (_82, &out);

  }
  bb_52 (preds = {bb_50 bb_51 }, succs = {bb_61 })
  {
    <bb 52>:
    # .MEM_2 = PHI <.MEM_85(50), .MEM_86(51)>

  }
  bb_61 (preds = {bb_52 }, succs = {bb_1 })
  {
    <bb 61>:
    # VUSE <.MEM_2>
    return;

  }
  bb_53 (preds = {bb_60 bb_8 bb_16 }, succs = {})
  {
    <bb 53>:
    # DEBUG D#337 => {CLOBBER}
    # DEBUG __j$_M_node => D#337
    # DEBUG this => NULL
    # DEBUG __x => NULL
    # .MEM_41 = VDEF <.MEM_3(D)>
    __assert_fail ("_in_req[in].count( out ) > 0", "allocators/allocator.cpp", 353, &__PRETTY_FUNCTION__);

  }
  bb_54 (preds = {bb_25 bb_59 bb_17 }, succs = {bb_26 })
  {
    <bb 54>:
    # __i$_M_node_21 = PHI <__i$_M_node_119(25), __i$_M_node_119(59), __i$_M_node_37(17)>
    # DEBUG this => &D.64940
    # DEBUG __a => &out
    # DEBUG __b => NULL
    # .MEM_123 = VDEF <.MEM_3(D)>
    D.64940.first = out.136_7;
    # .MEM_124 = VDEF <.MEM_123>
    MEM[(struct pair *)&D.64940 + 4B] = 0;
    # .MEM_125 = VDEF <.MEM_124>
    MEM[(struct pair *)&D.64940 + 8B] = 0;
    # .MEM_126 = VDEF <.MEM_125>
    MEM[(struct pair *)&D.64940 + 12B] = 0;
    # .MEM_127 = VDEF <.MEM_126>
    MEM[(struct pair *)&D.64940 + 16B] = 0;
    # DEBUG this => _53
    # DEBUG __position$_M_node => __i$_M_node_21
    # DEBUG __x => &D.64940
    # DEBUG this => NULL
    # DEBUG __it => &__position
    _99 = &_53->_M_t;
    # DEBUG this => _99
    # .MEM_128 = VDEF <.MEM_127>
    MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_21;
    # DEBUG __x => &D.64940
    # DEBUG this => &__an
    # DEBUG __t => _99
    # DEBUG __an$_M_t => _99
    # DEBUG D#752 => &__an
    # .MEM_129 = VDEF <.MEM_128>
    D.64939 = std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE17_M_insert_unique_INSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_ERKS4_RT_.isra.197.constprop (_99, __pos, &D.64940);
    # VUSE <.MEM_129>
    __i$_M_node_100 = MEM[(struct _Rb_tree_iterator *)&D.64939];
    # DEBUG __i$_M_node => __i$_M_node_100
    # .MEM_130 = VDEF <.MEM_129>
    D.64940 ={v} {CLOBBER};
    goto <bb 26>;

  }
  bb_55 (preds = {bb_58 bb_30 bb_38 }, succs = {})
  {
    <bb 55>:
    # DEBUG D#337 => {CLOBBER}
    # DEBUG __j$_M_node => D#337
    # DEBUG this => NULL
    # DEBUG __x => NULL
    # DEBUG D#337 => {CLOBBER}
    # DEBUG __j$_M_node => D#337
    # DEBUG this => NULL
    # DEBUG __x => NULL
    # .MEM_39 = VDEF <.MEM_1>
    __assert_fail ("_out_req[out].count( in ) > 0", "allocators/allocator.cpp", 364, &__PRETTY_FUNCTION__);

  }
  bb_56 (preds = {bb_47 bb_57 bb_39 }, succs = {bb_48 })
  {
    <bb 56>:
    # __i$_M_node_33 = PHI <__i$_M_node_115(47), __i$_M_node_115(57), __i$_M_node_23(39)>
    # DEBUG this => &D.64967
    # DEBUG __a => &in
    # DEBUG __b => NULL
    # .MEM_132 = VDEF <.MEM_1>
    D.64967.first = pretmp_13;
    # .MEM_133 = VDEF <.MEM_132>
    MEM[(struct pair *)&D.64967 + 4B] = 0;
    # .MEM_134 = VDEF <.MEM_133>
    MEM[(struct pair *)&D.64967 + 8B] = 0;
    # .MEM_135 = VDEF <.MEM_134>
    MEM[(struct pair *)&D.64967 + 12B] = 0;
    # .MEM_136 = VDEF <.MEM_135>
    MEM[(struct pair *)&D.64967 + 16B] = 0;
    # DEBUG this => _75
    # DEBUG __position$_M_node => __i$_M_node_33
    # DEBUG __x => &D.64967
    # DEBUG this => NULL
    # DEBUG __it => &__position
    _116 = &_75->_M_t;
    # DEBUG this => _116
    # .MEM_137 = VDEF <.MEM_136>
    MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_33;
    # DEBUG __x => &D.64967
    # DEBUG this => &__an
    # DEBUG __t => _116
    # DEBUG __an$_M_t => _116
    # DEBUG D#752 => &__an
    # .MEM_138 = VDEF <.MEM_137>
    D.64966 = std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE17_M_insert_unique_INSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_ERKS4_RT_.isra.197.constprop (_116, __pos, &D.64967);
    # VUSE <.MEM_138>
    __i$_M_node_117 = MEM[(struct _Rb_tree_iterator *)&D.64966];
    # DEBUG __i$_M_node => __i$_M_node_117
    # .MEM_139 = VDEF <.MEM_138>
    D.64967 ={v} {CLOBBER};
    goto <bb 48>;

  }
  loop_4 (header = 43, latch = 41, niter = )
  {
    bb_40 (preds = {bb_44 bb_45 }, succs = {bb_46 bb_41 })
    {
      <bb 40>:
      # __i$_M_node_72 = PHI <__i$_M_node_109(44), __i$_M_node_110(45)>
      # __i$_M_node_73 = PHI <__i$_M_node_91(44), __i$_M_node_146(45)>
      # DEBUG __y => __i$_M_node_73
      # DEBUG __x => __i$_M_node_72
      if (__i$_M_node_72 == 0B)
        goto <bb 46>;
      else
        goto <bb 41>;

    }
    bb_41 (preds = {bb_40 }, succs = {bb_43 })
    {
      <bb 41>:
      goto <bb 43>;

    }
    bb_43 (preds = {bb_42 bb_41 }, succs = {bb_44 bb_45 })
    {
      <bb 43>:
      # __i$_M_node_91 = PHI <__i$_M_node_61(42), __i$_M_node_72(41)>
      # __i$_M_node_146 = PHI <__i$_M_node_23(42), __i$_M_node_73(41)>
      # DEBUG __y => __i$_M_node_146
      # DEBUG __x => __i$_M_node_91
      # DEBUG __x => __i$_M_node_91
      # DEBUG __x => __i$_M_node_91
      # DEBUG this => __i$_M_node_91
      # DEBUG D#331 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_91]._M_value_field
      # DEBUG __r => D#331
      # DEBUG __x => D#331
      # DEBUG this => D#173
      # DEBUG D#346 => &MEM[(const struct pair &)__i$_M_node_91 + 32].first
      # DEBUG D#347 => &D#348->_M_impl._M_key_compare
      # DEBUG D#95 => D#347
      # VUSE <.MEM_1>
      _107 = MEM[(const int &)__i$_M_node_91 + 32];
      # DEBUG D#96 => D#346
      # DEBUG D#97 => &in
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      if (pretmp_13 <= _107)
        goto <bb 44>;
      else
        goto <bb 45>;

    }
    bb_44 (preds = {bb_43 }, succs = {bb_40 })
    {
      <bb 44>:
      # DEBUG __y => __i$_M_node_91
      # VUSE <.MEM_1>
      __i$_M_node_109 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_91 + 16B];
      # DEBUG D#108 => __i$_M_node_91
      # DEBUG __x => D#108
      # DEBUG __x => NULL
      goto <bb 40>;

    }
    bb_45 (preds = {bb_43 }, succs = {bb_40 })
    {
      <bb 45>:
      # VUSE <.MEM_1>
      __i$_M_node_110 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_91 + 24B];
      # DEBUG D#107 => __i$_M_node_91
      # DEBUG __x => D#107
      # DEBUG __x => NULL
      goto <bb 40>;

    }
  }
  loop_2 (header = 34, latch = 33, niter = )
  {
    bb_32 (preds = {bb_36 bb_35 }, succs = {bb_37 bb_33 })
    {
      <bb 32>:
      # __i$_M_node_104 = PHI <__i$_M_node_66(36), __i$_M_node_65(35)>
      # __i$_M_node_103 = PHI <__i$_M_node_70(36), __i$_M_node_71(35)>
      # DEBUG __y => __i$_M_node_103
      # DEBUG __x => __i$_M_node_104
      if (__i$_M_node_104 == 0B)
        goto <bb 37>;
      else
        goto <bb 33>;

    }
    bb_33 (preds = {bb_32 }, succs = {bb_34 })
    {
      <bb 33>:

    }
    bb_34 (preds = {bb_31 bb_33 }, succs = {bb_35 bb_36 })
    {
      <bb 34>:
      # __i$_M_node_71 = PHI <__i$_M_node_61(31), __i$_M_node_104(33)>
      # __i$_M_node_70 = PHI <__i$_M_node_23(31), __i$_M_node_103(33)>
      # DEBUG __y => __i$_M_node_70
      # DEBUG __x => __i$_M_node_71
      # DEBUG __x => __i$_M_node_71
      # DEBUG __x => __i$_M_node_71
      # DEBUG this => __i$_M_node_71
      # DEBUG D#331 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_71]._M_value_field
      # DEBUG __r => D#331
      # DEBUG __x => D#331
      # DEBUG this => D#173
      # DEBUG D#332 => &MEM[(const struct pair &)__i$_M_node_71 + 32].first
      # DEBUG D#333 => &D#334->_M_impl._M_key_compare
      # DEBUG D#95 => D#333
      # VUSE <.MEM_1>
      _63 = MEM[(const int &)__i$_M_node_71 + 32];
      # DEBUG D#96 => D#332
      # DEBUG D#97 => &in
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      if (pretmp_13 <= _63)
        goto <bb 35>;
      else
        goto <bb 36>;

    }
    bb_35 (preds = {bb_34 }, succs = {bb_32 })
    {
      <bb 35>:
      # DEBUG __y => __i$_M_node_71
      # VUSE <.MEM_1>
      __i$_M_node_65 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_71 + 16B];
      # DEBUG D#171 => __i$_M_node_71
      # DEBUG __x => D#171
      # DEBUG __x => NULL
      goto <bb 32>;

    }
    bb_36 (preds = {bb_34 }, succs = {bb_32 })
    {
      <bb 36>:
      # VUSE <.MEM_1>
      __i$_M_node_66 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_71 + 24B];
      # DEBUG D#172 => __i$_M_node_71
      # DEBUG __x => D#172
      # DEBUG __x => NULL
      goto <bb 32>;

    }
  }
  loop_3 (header = 21, latch = 19, niter = )
  {
    bb_18 (preds = {bb_22 bb_23 }, succs = {bb_24 bb_19 })
    {
      <bb 18>:
      # __i$_M_node_50 = PHI <__i$_M_node_92(22), __i$_M_node_93(23)>
      # __i$_M_node_51 = PHI <__i$_M_node_88(22), __i$_M_node_87(23)>
      # DEBUG __y => __i$_M_node_51
      # DEBUG __x => __i$_M_node_50
      if (__i$_M_node_50 == 0B)
        goto <bb 24>;
      else
        goto <bb 19>;

    }
    bb_19 (preds = {bb_18 }, succs = {bb_21 })
    {
      <bb 19>:
      goto <bb 21>;

    }
    bb_21 (preds = {bb_20 bb_19 }, succs = {bb_22 bb_23 })
    {
      <bb 21>:
      # __i$_M_node_88 = PHI <__i$_M_node_36(20), __i$_M_node_50(19)>
      # __i$_M_node_87 = PHI <__i$_M_node_37(20), __i$_M_node_51(19)>
      # DEBUG __y => __i$_M_node_87
      # DEBUG __x => __i$_M_node_88
      # DEBUG __x => __i$_M_node_88
      # DEBUG __x => __i$_M_node_88
      # DEBUG this => __i$_M_node_88
      # DEBUG D#331 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_88]._M_value_field
      # DEBUG __r => D#331
      # DEBUG __x => D#331
      # DEBUG this => D#173
      # DEBUG D#346 => &MEM[(const struct pair &)__i$_M_node_88 + 32].first
      # DEBUG D#347 => &D#348->_M_impl._M_key_compare
      # DEBUG D#95 => D#347
      # VUSE <.MEM_3(D)>
      _90 = MEM[(const int &)__i$_M_node_88 + 32];
      # DEBUG D#96 => D#346
      # DEBUG D#97 => &out
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      if (out.136_7 <= _90)
        goto <bb 22>;
      else
        goto <bb 23>;

    }
    bb_22 (preds = {bb_21 }, succs = {bb_18 })
    {
      <bb 22>:
      # DEBUG __y => __i$_M_node_88
      # VUSE <.MEM_3(D)>
      __i$_M_node_92 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_88 + 16B];
      # DEBUG D#108 => __i$_M_node_88
      # DEBUG __x => D#108
      # DEBUG __x => NULL
      goto <bb 18>;

    }
    bb_23 (preds = {bb_21 }, succs = {bb_18 })
    {
      <bb 23>:
      # VUSE <.MEM_3(D)>
      __i$_M_node_93 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_88 + 24B];
      # DEBUG D#107 => __i$_M_node_88
      # DEBUG __x => D#107
      # DEBUG __x => NULL
      goto <bb 18>;

    }
  }
  loop_1 (header = 12, latch = 10, niter = )
  {
    bb_9 (preds = {bb_14 bb_13 }, succs = {bb_15 bb_10 })
    {
      <bb 9>:
      # __i$_M_node_121 = PHI <__i$_M_node_22(14), __i$_M_node_26(13)>
      # __i$_M_node_120 = PHI <__i$_M_node_173(14), __i$_M_node_97(13)>
      # DEBUG __y => __i$_M_node_120
      # DEBUG __x => __i$_M_node_121
      if (__i$_M_node_121 == 0B)
        goto <bb 15>;
      else
        goto <bb 10>;

    }
    bb_10 (preds = {bb_9 }, succs = {bb_12 })
    {
      <bb 10>:
      goto <bb 12>;

    }
    bb_12 (preds = {bb_11 bb_10 }, succs = {bb_13 bb_14 })
    {
      <bb 12>:
      # __i$_M_node_173 = PHI <__i$_M_node_37(11), __i$_M_node_120(10)>
      # __i$_M_node_97 = PHI <__i$_M_node_36(11), __i$_M_node_121(10)>
      # DEBUG __y => __i$_M_node_173
      # DEBUG __x => __i$_M_node_97
      # DEBUG __x => __i$_M_node_97
      # DEBUG __x => __i$_M_node_97
      # DEBUG this => __i$_M_node_97
      # DEBUG D#331 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_97]._M_value_field
      # DEBUG __r => D#331
      # DEBUG __x => D#331
      # DEBUG this => D#173
      # DEBUG D#332 => &MEM[(const struct pair &)__i$_M_node_97 + 32].first
      # DEBUG D#333 => &D#334->_M_impl._M_key_compare
      # DEBUG D#95 => D#333
      # VUSE <.MEM_3(D)>
      _27 = MEM[(const int &)__i$_M_node_97 + 32];
      # DEBUG D#96 => D#332
      # DEBUG D#97 => &out
      # DEBUG this => D#95
      # DEBUG __x => D#96
      # DEBUG __y => D#97
      if (out.136_7 <= _27)
        goto <bb 13>;
      else
        goto <bb 14>;

    }
    bb_13 (preds = {bb_12 }, succs = {bb_9 })
    {
      <bb 13>:
      # DEBUG __y => __i$_M_node_97
      # VUSE <.MEM_3(D)>
      __i$_M_node_26 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_97 + 16B];
      # DEBUG D#171 => __i$_M_node_97
      # DEBUG __x => D#171
      # DEBUG __x => NULL
      goto <bb 9>;

    }
    bb_14 (preds = {bb_12 }, succs = {bb_9 })
    {
      <bb 14>:
      # VUSE <.MEM_3(D)>
      __i$_M_node_22 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_97 + 24B];
      # DEBUG D#172 => __i$_M_node_97
      # DEBUG __x => D#172
      # DEBUG __x => NULL
      goto <bb 9>;

    }
  }
}

Pass statistics:
----------------

virtual void SparseAllocator::RemoveRequest(int, int, int) (struct SparseAllocatorD.36303 * const thisD.42660, intD.9 inD.42656, intD.9 outD.42657, intD.9 labelD.42658)
{
  struct value_typeD.41248 D.64967;
  struct _Rb_tree_nodeD.41466 * __yD.64961;
  struct iteratorD.41766 D.64966;
  struct const_iteratorD.41768 __posD.64951;
  struct _Rb_tree_node_baseD.24800 * const __i$_M_nodeD.64965;
  struct _Rb_tree_node_baseD.24800 * SR.1191D.64964;
  struct mapped_typeD.41247 & D.64963;
  struct value_typeD.41248 D.64940;
  struct _Rb_tree_nodeD.41466 * __yD.64934;
  struct iteratorD.41766 D.64939;
  struct const_iteratorD.41768 __posD.64924;
  struct _Rb_tree_node_baseD.24800 * const __i$_M_nodeD.64938;
  struct _Rb_tree_node_baseD.24800 * SR.1191D.64937;
  struct mapped_typeD.41247 & D.64936;
  const struct _Rb_tree_nodeD.41466 * __yD.61708;
  const struct _Rb_tree_nodeD.41466 * __yD.61671;
  static const charD.10 _ZZN15SparseAllocator13RemoveRequestEiiiE19__PRETTY_FUNCTION__D.42662[59] = "virtual void SparseAllocator::RemoveRequest(int, int, int)";
  intD.9 in.135_4;
  intD.9 _6;
  intD.9 out.136_7;
  intD.9 _8;
  long unsigned intD.14 _9;
  const intD.9 _12;
  intD.9 pretmp_13;
  intD.9 _15;
  intD.9 in.135_17;
  long unsigned intD.14 _18;
  intD.9 in.135_19;
  long unsigned intD.14 _20;
  intD.9 out.136_24;
  long unsigned intD.14 _25;
  const intD.9 _27;
  intD.9 _30;
  intD.9 out.136_31;
  long unsigned intD.14 _32;
  intD.9 out.136_34;
  long unsigned intD.14 _35;
  struct mapD.37148 * _44;
  struct mapD.37148 * _45;
  struct mapD.37148 * _46;
  struct mapD.37148 * _47;
  struct mapD.37148 * _48;
  struct mapD.37148 * _49;
  long unsigned intD.14 _52;
  struct mapD.37148 & _53;
  const size_typeD.41494 _54;
  long unsigned intD.14 _55;
  struct mapD.37148 & _56;
  struct _Rep_typeD.41460 * _57;
  long unsigned intD.14 _58;
  struct mapD.37148 & _59;
  struct _Rep_typeD.36315 * _60;
  const intD.9 _63;
  const intD.9 _69;
  long unsigned intD.14 _74;
  struct mapD.37148 & _75;
  const size_typeD.41494 _76;
  long unsigned intD.14 _77;
  struct mapD.37148 & _78;
  struct _Rep_typeD.41460 * _79;
  long unsigned intD.14 _80;
  struct mapD.37148 & _81;
  struct _Rep_typeD.36315 * _82;
  const intD.9 _90;
  const intD.9 _96;
  struct _Rep_typeD.41460 * _99;
  const intD.9 _107;
  const intD.9 _113;
  struct _Rep_typeD.41460 * _116;

;;   basic block 2, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  in.135_4 = inD.42656;
  if (in.135_4 < 0)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  _6 = this_5(D)->D.37974._inputsD.34629;
  if (in.135_4 >= _6)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                2 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_43 = VDEF <.MEM_3(D)>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  __assert_failD.14402 ("( in >= 0 ) && ( in < _inputs )", "allocators/allocator.cpp", 350, &_ZZN15SparseAllocator13RemoveRequestEiiiE19__PRETTY_FUNCTION__D.42662);
;;    succ:      

;;   basic block 5, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  out.136_7 = outD.42657;
  if (out.136_7 < 0)
    goto <bb 7>;
  else
    goto <bb 6>;
;;    succ:       7 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  _8 = this_5(D)->D.37974._outputsD.34630;
  if (out.136_7 >= _8)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_42 = VDEF <.MEM_3(D)>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  __assert_failD.14402 ("( out >= 0 ) && ( out < _outputs )", "allocators/allocator.cpp", 351, &_ZZN15SparseAllocator13RemoveRequestEiiiE19__PRETTY_FUNCTION__D.42662);
;;    succ:      

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _9 = (long unsigned intD.14) in.135_4;
  # DEBUG D#780ptD.0 => &this_5(D)->_in_reqD.37895
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _44 = MEM[(struct mapD.37148 * *)this_5(D) + 256B];
  # DEBUG D#85ptD.0 => D#780ptD.0
  # DEBUG __nD.61676 => _9
  # DEBUG thisD.61677 => D#85ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _52 = _9 * 48;
  # PT = nonlocal escaped 
  _53 = _44 + _52;
  # DEBUG thisD.61663 => NULL
  # DEBUG __xD.61664 => &outD.42657
  # DEBUG thisD.61665 => D#344ptD.0
  # PT = nonlocal escaped 
  __i$_M_node_37 = &MEM[(const struct _Rb_treeD.41462 *)_53]._M_implD.41540._M_headerD.41695;
  # DEBUG thisD.54363 => NULL
  # DEBUG __xD.54362 => __i$_M_node_37
  # DEBUG thisD.61667 => D#345ptD.0
  # DEBUG __kD.61666 => &outD.42657
  # DEBUG thisD.54354 => D#345ptD.0
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  __i$_M_node_36 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_53 + 16B];
  # DEBUG D#110ptD.0 => D#345ptD.0
  # DEBUG thisD.54273 => D#110ptD.0
  # DEBUG D#335ptD.0 => D#345ptD.0
  # DEBUG __xD.61672 => NULL
  # DEBUG __yD.61671 => NULL
  # DEBUG __kD.61670 => &outD.42657
  # DEBUG __yD.61671 => __i$_M_node_37
  # DEBUG __xD.61672 => __i$_M_node_36
  if (__i$_M_node_36 == 0B)
    goto <bb 53>;
  else
    goto <bb 11>;
;;    succ:       53 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_121 = PHI <__i$_M_node_22(14), __i$_M_node_26(13)>
  # PT = nonlocal escaped 
  # __i$_M_node_120 = PHI <__i$_M_node_173(14), __i$_M_node_97(13)>
  # DEBUG __yD.61671 => __i$_M_node_120
  # DEBUG __xD.61672 => __i$_M_node_121
  if (__i$_M_node_121 == 0B)
    goto <bb 15>;
  else
    goto <bb 10>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_173 = PHI <__i$_M_node_37(11), __i$_M_node_120(10)>
  # PT = nonlocal escaped 
  # __i$_M_node_97 = PHI <__i$_M_node_36(11), __i$_M_node_121(10)>
  # DEBUG __yD.61671 => __i$_M_node_173
  # DEBUG __xD.61672 => __i$_M_node_97
  # DEBUG __xD.54243 => __i$_M_node_97
  # DEBUG __xD.54209 => __i$_M_node_97
  # DEBUG thisD.54210 => __i$_M_node_97
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__i$_M_node_97]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54245 => D#331ptD.0
  # DEBUG thisD.54244 => D#173ptD.0
  # DEBUG D#332ptD.0 => &MEM[(const struct pairD.37146 &)__i$_M_node_97 + 32].firstD.42483
  # DEBUG D#333ptD.0 => &D#334ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#333ptD.0
  # VUSE <.MEM_3(D)>
  _27 = MEM[(const intD.9 &)__i$_M_node_97 + 32];
  # DEBUG D#96ptD.0 => D#332ptD.0
  # DEBUG D#97ptD.0 => &outD.42657
  # DEBUG thisD.54246 => D#95ptD.0
  # DEBUG __xD.54247 => D#96ptD.0
  # DEBUG __yD.54248 => D#97ptD.0
  if (out.136_7 <= _27)
    goto <bb 13>;
  else
    goto <bb 14>;
;;    succ:       13 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.61671 => __i$_M_node_97
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  __i$_M_node_26 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_97 + 16B];
  # DEBUG D#171ptD.0 => __i$_M_node_97
  # DEBUG __xD.54242 => D#171ptD.0
  # DEBUG __xD.61672 => NULL
  goto <bb 9>;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 4550, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       12 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  __i$_M_node_22 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_97 + 24B];
  # DEBUG D#172ptD.0 => __i$_M_node_97
  # DEBUG __xD.54241 => D#172ptD.0
  # DEBUG __xD.61672 => NULL
  goto <bb 9>;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 14, next block 60, flags: (NEW, REACHABLE)
;;    pred:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_111 = PHI <__i$_M_node_120(9)>
;;    succ:       60 [100.0%]  (FALLTHRU)

;;   basic block 60, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 15, next block 16, flags: (NEW)
;;    pred:       15 [100.0%]  (FALLTHRU)
  # DEBUG thisD.54240 => NULL
  # DEBUG __xD.54239 => __i$_M_node_111
  # DEBUG __j$_M_nodeD.54291 => __i$_M_node_111
  # DEBUG thisD.54261 => D#345ptD.0
  # DEBUG thisD.54263 => NULL
  # DEBUG __xD.54262 => __i$_M_node_37
  # DEBUG thisD.54258 => &__jD.61668
  # DEBUG __xD.54259 => NULL
  if (__i$_M_node_37 == __i$_M_node_111)
    goto <bb 53>;
  else
    goto <bb 16>;
;;    succ:       53 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 60, next block 17, flags: (NEW, REACHABLE)
;;    pred:       60 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.54283 => __i$_M_node_111
  # DEBUG __xD.53214 => __i$_M_node_111
  # DEBUG thisD.53215 => __i$_M_node_111
  # DEBUG D#174ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__i$_M_node_111]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.54285 => D#174ptD.0
  # DEBUG thisD.54284 => D#173ptD.0
  # DEBUG D#336ptD.0 => &MEM[(const struct pairD.37146 &)__i$_M_node_111 + 32].firstD.42483
  # DEBUG D#338ptD.0 => &MEM[(const struct _Rb_treeD.41462 *)D#345ptD.0]._M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#338ptD.0
  # DEBUG D#96ptD.0 => &outD.42657
  # VUSE <.MEM_3(D)>
  _12 = MEM[(const intD.9 &)__i$_M_node_111 + 32];
  # DEBUG D#97ptD.0 => D#336ptD.0
  # DEBUG thisD.54281 => D#95ptD.0
  # DEBUG __xD.54280 => D#96ptD.0
  # DEBUG __yD.54279 => D#97ptD.0
  # DEBUG D#337ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.54291 => D#337ptD.0
  # DEBUG thisD.54348 => NULL
  # DEBUG __xD.54349 => NULL
  if (out.136_7 < _12)
    goto <bb 53>;
  else
    goto <bb 17>;
;;    succ:       53 (TRUE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 770, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __yD.64934 => __i$_M_node_37
  # DEBUG __xD.64935 => __i$_M_node_36
  if (__i$_M_node_36 == 0B)
    goto <bb 54>;
  else
    goto <bb 20>;
;;    succ:       54 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 1, count 0, freq 9226, maybe hot
;;   Invalid sum of incoming frequencies 9096, should be 9226
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_50 = PHI <__i$_M_node_92(22), __i$_M_node_93(23)>
  # PT = nonlocal escaped 
  # __i$_M_node_51 = PHI <__i$_M_node_88(22), __i$_M_node_87(23)>
  # DEBUG __yD.64934 => __i$_M_node_51
  # DEBUG __xD.64935 => __i$_M_node_50
  if (__i$_M_node_50 == 0B)
    goto <bb 24>;
  else
    goto <bb 19>;
;;    succ:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 8396, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       18 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 21>;
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 701, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 1, count 0, freq 9096, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_88 = PHI <__i$_M_node_36(20), __i$_M_node_50(19)>
  # PT = nonlocal escaped 
  # __i$_M_node_87 = PHI <__i$_M_node_37(20), __i$_M_node_51(19)>
  # DEBUG __yD.64934 => __i$_M_node_87
  # DEBUG __xD.64935 => __i$_M_node_88
  # DEBUG __xD.54403 => __i$_M_node_88
  # DEBUG __xD.54209 => __i$_M_node_88
  # DEBUG thisD.54210 => __i$_M_node_88
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__i$_M_node_88]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54405 => D#331ptD.0
  # DEBUG thisD.54404 => D#173ptD.0
  # DEBUG D#346ptD.0 => &MEM[(const struct pairD.37146 &)__i$_M_node_88 + 32].firstD.42483
  # DEBUG D#347ptD.0 => &D#348ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#347ptD.0
  # VUSE <.MEM_3(D)>
  _90 = MEM[(const intD.9 &)__i$_M_node_88 + 32];
  # DEBUG D#96ptD.0 => D#346ptD.0
  # DEBUG D#97ptD.0 => &outD.42657
  # DEBUG thisD.54406 => D#95ptD.0
  # DEBUG __xD.54407 => D#96ptD.0
  # DEBUG __yD.54408 => D#97ptD.0
  if (out.136_7 <= _90)
    goto <bb 22>;
  else
    goto <bb 23>;
;;    succ:       22 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 4548, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       21 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.64934 => __i$_M_node_88
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  __i$_M_node_92 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_88 + 16B];
  # DEBUG D#108ptD.0 => __i$_M_node_88
  # DEBUG __xD.54402 => D#108ptD.0
  # DEBUG __xD.64935 => NULL
  goto <bb 18>;
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 4548, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       21 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  __i$_M_node_93 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_88 + 24B];
  # DEBUG D#107ptD.0 => __i$_M_node_88
  # DEBUG __xD.54401 => D#107ptD.0
  # DEBUG __xD.64935 => NULL
  goto <bb 18>;
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 831, maybe hot
;;    prev block 23, next block 59, flags: (NEW, REACHABLE)
;;    pred:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_119 = PHI <__i$_M_node_51(18)>
;;    succ:       59 [100.0%]  (FALLTHRU)

;;   basic block 59, loop depth 0, count 0, freq 831, maybe hot
;;    prev block 24, next block 25, flags: (NEW)
;;    pred:       24 [100.0%]  (FALLTHRU)
  # DEBUG thisD.54400 => NULL
  # DEBUG __xD.54399 => __i$_M_node_119
  # DEBUG __i$_M_nodeD.64938 => __i$_M_node_119
  # DEBUG thisD.61519 => _53
  # DEBUG D#176ptD.0 => &_53->_M_tD.41463
  # DEBUG thisD.61520 => D#176ptD.0
  # DEBUG thisD.53244 => NULL
  # DEBUG __xD.53243 => __i$_M_node_37
  # DEBUG thisD.61516 => &__iD.64916
  # DEBUG __xD.61517 => NULL
  if (__i$_M_node_37 == __i$_M_node_119)
    goto <bb 54>;
  else
    goto <bb 25>;
;;    succ:       54 [7.9%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [92.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 59, next block 26, flags: (NEW, REACHABLE)
;;    pred:       59 [92.1%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.61543 => &__iD.64916
  # DEBUG thisD.61544 => __i$_M_node_119
  # DEBUG D#753ptD.0 => &MEM[(struct _Rb_tree_nodeD.41466 *)__i$_M_node_119]._M_value_fieldD.43957
  # DEBUG __rD.53249 => D#753ptD.0
  # DEBUG D#754ptD.0 => &MEM[(struct pairD.37146 &)__i$_M_node_119 + 32].firstD.42483
  # DEBUG D#131ptD.0 => _53
  # DEBUG thisD.61540 => D#131ptD.0
  # DEBUG D#130ptD.0 => D#131ptD.0
  # DEBUG D#129ptD.0 => &D#130ptD.0->_M_tD.41463
  # DEBUG D#128ptD.0 => D#129ptD.0
  # DEBUG thisD.52957 => D#128ptD.0
  # DEBUG D#96ptD.0 => &outD.42657
  # VUSE <.MEM_3(D)>
  _96 = MEM[(const intD.9 &)__i$_M_node_119 + 32];
  # DEBUG D#97ptD.0 => D#754ptD.0
  # DEBUG thisD.61538 => D#95ptD.0
  # DEBUG __xD.61537 => D#96ptD.0
  # DEBUG __yD.61536 => D#97ptD.0
  if (out.136_7 < _96)
    goto <bb 54>;
  else
    goto <bb 26>;
;;    succ:       54 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       25 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                54 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_101 = PHI <__i$_M_node_119(25), __i$_M_node_100(54)>
  # .MEM_28 = PHI <.MEM_3(D)(25), .MEM_130(54)>
  # DEBUG __i$_M_nodeD.64938 => __i$_M_node_101
  # DEBUG thisD.61561 => &__iD.64916
  # DEBUG thisD.61562 => __i$_M_node_101
  # DEBUG D#755ptD.0 => &MEM[(struct _Rb_tree_nodeD.41466 *)__i$_M_node_101]._M_value_fieldD.43957
  # DEBUG __rD.53249 => D#755ptD.0
  # DEBUG D#757ptD.0 => {CLOBBER}
  # DEBUG __i$_M_nodeD.64938 => D#757ptD.0
  # VUSE <.MEM_28>
  _15 = MEM[(struct mapped_typeD.41247 &)__i$_M_node_101 + 36].labelD.35381;
  if (_15 != label_16(D))
    goto <bb 27>;
  else
    goto <bb 28>;
;;    succ:       27 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       26 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_40 = VDEF <.MEM_28>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  __assert_failD.14402 ("_in_req[in][out].label == label", "allocators/allocator.cpp", 354, &_ZZN15SparseAllocator13RemoveRequestEiiiE19__PRETTY_FUNCTION__D.42662);
;;    succ:      

;;   basic block 28, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       26 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_28>
  in.135_17 = inD.42656;
  # RANGE ~[2147483648, 18446744071562067967]
  _18 = (long unsigned intD.14) in.135_17;
  # DEBUG D#782ptD.0 => &this_5(D)->_in_reqD.37895
  # VUSE <.MEM_28>
  # PT = nonlocal escaped 
  _45 = MEM[(struct mapD.37148 * *)this_5(D) + 256B];
  # DEBUG D#85ptD.0 => D#782ptD.0
  # DEBUG __nD.61694 => _18
  # DEBUG thisD.61695 => D#85ptD.0
  # RANGE [0, 18446744073709551568] NONZERO 18446744073709551600
  _58 = _18 * 48;
  # PT = nonlocal escaped 
  _59 = _45 + _58;
  # DEBUG thisD.61690 => NULL
  # DEBUG __xD.61691 => &outD.42657
  # PT = nonlocal escaped 
  _57 = &_59->_M_tD.41463;
  # .MEM_83 = VDEF <.MEM_28>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE5eraseERS1_D.41961 (_57, &outD.42657);
  # VUSE <.MEM_83>
  in.135_19 = inD.42656;
  # RANGE ~[2147483648, 18446744071562067967]
  _20 = (long unsigned intD.14) in.135_19;
  # DEBUG D#783ptD.0 => &this_5(D)->_in_reqD.37895
  # VUSE <.MEM_83>
  # PT = nonlocal escaped 
  _46 = MEM[(struct mapD.37148 * *)this_5(D) + 256B];
  # DEBUG D#85ptD.0 => D#783ptD.0
  # DEBUG __nD.61687 => _20
  # DEBUG thisD.61688 => D#85ptD.0
  # RANGE [0, 18446744073709551568] NONZERO 18446744073709551600
  _55 = _20 * 48;
  # PT = nonlocal escaped 
  _56 = _46 + _55;
  # DEBUG thisD.61683 => NULL
  # VUSE <.MEM_83>
  _54 = MEM[(long unsigned intD.14 *)_56 + 40B];
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.61684 => D#93ptD.0
  if (_54 == 0)
    goto <bb 29>;
  else
    goto <bb 30>;
;;    succ:       29 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 261, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       28 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#784ptD.0 => &this_5(D)->_in_occD.37144
  # DEBUG thisD.61697 => D#784ptD.0
  # DEBUG __xD.61698 => &inD.42656
  # PT = nonlocal 
  _60 = &MEM[(struct setD.36306 *)this_5(D) + 160B]._M_tD.36318;
  # .MEM_84 = VDEF <.MEM_83>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE5eraseERKiD.36827 (_60, &inD.42656);
;;    succ:       30 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       28 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                29 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_83(28), .MEM_84(29)>
  # VUSE <.MEM_1>
  out.136_24 = outD.42657;
  # RANGE ~[2147483648, 18446744071562067967]
  _25 = (long unsigned intD.14) out.136_24;
  # DEBUG D#785ptD.0 => &this_5(D)->_out_reqD.37896
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  _47 = MEM[(struct mapD.37148 * *)this_5(D) + 280B];
  # DEBUG D#85ptD.0 => D#785ptD.0
  # DEBUG __nD.61713 => _25
  # DEBUG thisD.61714 => D#85ptD.0
  # RANGE [0, 18446744073709551568] NONZERO 18446744073709551600
  _74 = _25 * 48;
  # PT = nonlocal escaped 
  _75 = _47 + _74;
  # DEBUG thisD.61700 => NULL
  # DEBUG __xD.61701 => &inD.42656
  # DEBUG thisD.61702 => D#344ptD.0
  # PT = nonlocal escaped 
  __i$_M_node_23 = &MEM[(const struct _Rb_treeD.41462 *)_75]._M_implD.41540._M_headerD.41695;
  # DEBUG thisD.54363 => NULL
  # DEBUG __xD.54362 => __i$_M_node_23
  # DEBUG thisD.61704 => D#345ptD.0
  # DEBUG __kD.61703 => &inD.42656
  # DEBUG thisD.54354 => D#345ptD.0
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  __i$_M_node_61 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_75 + 16B];
  # DEBUG D#110ptD.0 => D#345ptD.0
  # DEBUG thisD.54273 => D#110ptD.0
  # DEBUG D#335ptD.0 => D#345ptD.0
  # DEBUG __xD.61709 => NULL
  # DEBUG __yD.61708 => NULL
  # DEBUG __kD.61707 => &inD.42656
  # DEBUG __yD.61708 => __i$_M_node_23
  # DEBUG __xD.61709 => __i$_M_node_61
  if (__i$_M_node_61 == 0B)
    goto <bb 55>;
  else
    goto <bb 31>;
;;    succ:       55 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       30 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1>
  pretmp_13 = inD.42656;
  goto <bb 34>;
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 1, count 0, freq 9093, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       36 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_104 = PHI <__i$_M_node_66(36), __i$_M_node_65(35)>
  # PT = nonlocal escaped 
  # __i$_M_node_103 = PHI <__i$_M_node_70(36), __i$_M_node_71(35)>
  # DEBUG __yD.61708 => __i$_M_node_103
  # DEBUG __xD.61709 => __i$_M_node_104
  if (__i$_M_node_104 == 0B)
    goto <bb 37>;
  else
    goto <bb 33>;
;;    succ:       37 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 33, loop depth 1, count 0, freq 8275, maybe hot
;;    prev block 32, next block 34, flags: (NEW)
;;    pred:       32 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 1, count 0, freq 9093, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       31 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_71 = PHI <__i$_M_node_61(31), __i$_M_node_104(33)>
  # PT = nonlocal escaped 
  # __i$_M_node_70 = PHI <__i$_M_node_23(31), __i$_M_node_103(33)>
  # DEBUG __yD.61708 => __i$_M_node_70
  # DEBUG __xD.61709 => __i$_M_node_71
  # DEBUG __xD.54243 => __i$_M_node_71
  # DEBUG __xD.54209 => __i$_M_node_71
  # DEBUG thisD.54210 => __i$_M_node_71
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__i$_M_node_71]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54245 => D#331ptD.0
  # DEBUG thisD.54244 => D#173ptD.0
  # DEBUG D#332ptD.0 => &MEM[(const struct pairD.37146 &)__i$_M_node_71 + 32].firstD.42483
  # DEBUG D#333ptD.0 => &D#334ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#333ptD.0
  # VUSE <.MEM_1>
  _63 = MEM[(const intD.9 &)__i$_M_node_71 + 32];
  # DEBUG D#96ptD.0 => D#332ptD.0
  # DEBUG D#97ptD.0 => &inD.42656
  # DEBUG thisD.54246 => D#95ptD.0
  # DEBUG __xD.54247 => D#96ptD.0
  # DEBUG __yD.54248 => D#97ptD.0
  if (pretmp_13 <= _63)
    goto <bb 35>;
  else
    goto <bb 36>;
;;    succ:       35 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 35, loop depth 1, count 0, freq 4546, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       34 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.61708 => __i$_M_node_71
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  __i$_M_node_65 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_71 + 16B];
  # DEBUG D#171ptD.0 => __i$_M_node_71
  # DEBUG __xD.54242 => D#171ptD.0
  # DEBUG __xD.61709 => NULL
  goto <bb 32>;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 1, count 0, freq 4546, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       34 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  __i$_M_node_66 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_71 + 24B];
  # DEBUG D#172ptD.0 => __i$_M_node_71
  # DEBUG __xD.54241 => D#172ptD.0
  # DEBUG __xD.61709 => NULL
  goto <bb 32>;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 36, next block 58, flags: (NEW, REACHABLE)
;;    pred:       32 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_112 = PHI <__i$_M_node_103(32)>
;;    succ:       58 [100.0%]  (FALLTHRU)

;;   basic block 58, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 37, next block 38, flags: (NEW)
;;    pred:       37 [100.0%]  (FALLTHRU)
  # DEBUG thisD.54240 => NULL
  # DEBUG __xD.54239 => __i$_M_node_112
  # DEBUG __j$_M_nodeD.54291 => __i$_M_node_112
  # DEBUG thisD.54261 => D#345ptD.0
  # DEBUG thisD.54263 => NULL
  # DEBUG __xD.54262 => __i$_M_node_23
  # DEBUG thisD.54258 => &__jD.61705
  # DEBUG __xD.54259 => NULL
  if (__i$_M_node_23 == __i$_M_node_112)
    goto <bb 55>;
  else
    goto <bb 38>;
;;    succ:       55 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 764, maybe hot
;;    prev block 58, next block 39, flags: (NEW, REACHABLE)
;;    pred:       58 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __xD.54283 => __i$_M_node_112
  # DEBUG __xD.53214 => __i$_M_node_112
  # DEBUG thisD.53215 => __i$_M_node_112
  # DEBUG D#174ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__i$_M_node_112]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#174ptD.0
  # DEBUG __xD.54285 => D#174ptD.0
  # DEBUG thisD.54284 => D#173ptD.0
  # DEBUG D#336ptD.0 => &MEM[(const struct pairD.37146 &)__i$_M_node_112 + 32].firstD.42483
  # DEBUG D#338ptD.0 => &MEM[(const struct _Rb_treeD.41462 *)D#345ptD.0]._M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#338ptD.0
  # DEBUG D#96ptD.0 => &inD.42656
  # VUSE <.MEM_1>
  _69 = MEM[(const intD.9 &)__i$_M_node_112 + 32];
  # DEBUG D#97ptD.0 => D#336ptD.0
  # DEBUG thisD.54281 => D#95ptD.0
  # DEBUG __xD.54280 => D#96ptD.0
  # DEBUG __yD.54279 => D#97ptD.0
  if (pretmp_13 < _69)
    goto <bb 55>;
  else
    goto <bb 39>;
;;    succ:       55 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 382, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       38 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __yD.64961 => __i$_M_node_23
  # DEBUG __xD.64962 => __i$_M_node_61
  if (__i$_M_node_61 == 0B)
    goto <bb 56>;
  else
    goto <bb 42>;
;;    succ:       56 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                42 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 1, count 0, freq 9608, maybe hot
;;   Invalid sum of incoming frequencies 9090, should be 9608
;;    prev block 39, next block 41, flags: (NEW, REACHABLE)
;;    pred:       44 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                45 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_72 = PHI <__i$_M_node_109(44), __i$_M_node_110(45)>
  # PT = nonlocal escaped 
  # __i$_M_node_73 = PHI <__i$_M_node_91(44), __i$_M_node_146(45)>
  # DEBUG __yD.64961 => __i$_M_node_73
  # DEBUG __xD.64962 => __i$_M_node_72
  if (__i$_M_node_72 == 0B)
    goto <bb 46>;
  else
    goto <bb 41>;
;;    succ:       46 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                41 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 41, loop depth 1, count 0, freq 8743, maybe hot
;;    prev block 40, next block 42, flags: (NEW)
;;    pred:       40 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 43>;
;;    succ:       43 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 348, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       39 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       43 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 43, loop depth 1, count 0, freq 9089, maybe hot
;;    prev block 42, next block 44, flags: (NEW)
;;    pred:       42 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_91 = PHI <__i$_M_node_61(42), __i$_M_node_72(41)>
  # PT = nonlocal escaped 
  # __i$_M_node_146 = PHI <__i$_M_node_23(42), __i$_M_node_73(41)>
  # DEBUG __yD.64961 => __i$_M_node_146
  # DEBUG __xD.64962 => __i$_M_node_91
  # DEBUG __xD.54403 => __i$_M_node_91
  # DEBUG __xD.54209 => __i$_M_node_91
  # DEBUG thisD.54210 => __i$_M_node_91
  # DEBUG D#331ptD.0 => &MEM[(const struct _Rb_tree_nodeD.41466 *)__i$_M_node_91]._M_value_fieldD.43957
  # DEBUG __rD.52840 => D#331ptD.0
  # DEBUG __xD.54405 => D#331ptD.0
  # DEBUG thisD.54404 => D#173ptD.0
  # DEBUG D#346ptD.0 => &MEM[(const struct pairD.37146 &)__i$_M_node_91 + 32].firstD.42483
  # DEBUG D#347ptD.0 => &D#348ptD.0->_M_implD.41540._M_key_compareD.41694
  # DEBUG D#95ptD.0 => D#347ptD.0
  # VUSE <.MEM_1>
  _107 = MEM[(const intD.9 &)__i$_M_node_91 + 32];
  # DEBUG D#96ptD.0 => D#346ptD.0
  # DEBUG D#97ptD.0 => &inD.42656
  # DEBUG thisD.54406 => D#95ptD.0
  # DEBUG __xD.54407 => D#96ptD.0
  # DEBUG __yD.54408 => D#97ptD.0
  if (pretmp_13 <= _107)
    goto <bb 44>;
  else
    goto <bb 45>;
;;    succ:       44 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                45 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 44, loop depth 1, count 0, freq 4545, maybe hot
;;    prev block 43, next block 45, flags: (NEW, REACHABLE)
;;    pred:       43 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __yD.64961 => __i$_M_node_91
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  __i$_M_node_109 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_91 + 16B];
  # DEBUG D#108ptD.0 => __i$_M_node_91
  # DEBUG __xD.54402 => D#108ptD.0
  # DEBUG __xD.64962 => NULL
  goto <bb 40>;
;;    succ:       40 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 45, loop depth 1, count 0, freq 4545, maybe hot
;;    prev block 44, next block 46, flags: (NEW, REACHABLE)
;;    pred:       43 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1>
  # PT = nonlocal escaped 
  __i$_M_node_110 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__i$_M_node_91 + 24B];
  # DEBUG D#107ptD.0 => __i$_M_node_91
  # DEBUG __xD.54401 => D#107ptD.0
  # DEBUG __xD.64962 => NULL
  goto <bb 40>;
;;    succ:       40 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 46, loop depth 0, count 0, freq 865, maybe hot
;;    prev block 45, next block 57, flags: (NEW, REACHABLE)
;;    pred:       40 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_115 = PHI <__i$_M_node_73(40)>
;;    succ:       57 [100.0%]  (FALLTHRU)

;;   basic block 57, loop depth 0, count 0, freq 865, maybe hot
;;    prev block 46, next block 47, flags: (NEW)
;;    pred:       46 [100.0%]  (FALLTHRU)
  # DEBUG thisD.54400 => NULL
  # DEBUG __xD.54399 => __i$_M_node_115
  # DEBUG __i$_M_nodeD.64965 => __i$_M_node_115
  # DEBUG thisD.61519 => _75
  # DEBUG D#176ptD.0 => &_75->_M_tD.41463
  # DEBUG thisD.61520 => D#176ptD.0
  # DEBUG thisD.53244 => NULL
  # DEBUG __xD.53243 => __i$_M_node_23
  # DEBUG thisD.61516 => &__iD.64943
  # DEBUG __xD.61517 => NULL
  if (__i$_M_node_23 == __i$_M_node_115)
    goto <bb 56>;
  else
    goto <bb 47>;
;;    succ:       56 [11.6%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [88.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 47, loop depth 0, count 0, freq 764, maybe hot
;;    prev block 57, next block 48, flags: (NEW, REACHABLE)
;;    pred:       57 [88.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.61543 => &__iD.64943
  # DEBUG thisD.61544 => __i$_M_node_115
  # DEBUG D#753ptD.0 => &MEM[(struct _Rb_tree_nodeD.41466 *)__i$_M_node_115]._M_value_fieldD.43957
  # DEBUG __rD.53249 => D#753ptD.0
  # DEBUG D#754ptD.0 => &MEM[(struct pairD.37146 &)__i$_M_node_115 + 32].firstD.42483
  # DEBUG D#131ptD.0 => _75
  # DEBUG thisD.61540 => D#131ptD.0
  # DEBUG D#130ptD.0 => D#131ptD.0
  # DEBUG D#129ptD.0 => &D#130ptD.0->_M_tD.41463
  # DEBUG D#128ptD.0 => D#129ptD.0
  # DEBUG thisD.52957 => D#128ptD.0
  # DEBUG D#96ptD.0 => &inD.42656
  # VUSE <.MEM_1>
  _113 = MEM[(const intD.9 &)__i$_M_node_115 + 32];
  # DEBUG D#97ptD.0 => D#754ptD.0
  # DEBUG thisD.61538 => D#95ptD.0
  # DEBUG __xD.61537 => D#96ptD.0
  # DEBUG __yD.61536 => D#97ptD.0
  if (pretmp_13 < _113)
    goto <bb 56>;
  else
    goto <bb 48>;
;;    succ:       56 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                48 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 48, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 47, next block 49, flags: (NEW, REACHABLE)
;;    pred:       47 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                56 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_118 = PHI <__i$_M_node_115(47), __i$_M_node_117(56)>
  # .MEM_122 = PHI <.MEM_1(47), .MEM_139(56)>
  # DEBUG __i$_M_nodeD.64965 => __i$_M_node_118
  # DEBUG thisD.61561 => &__iD.64943
  # DEBUG thisD.61562 => __i$_M_node_118
  # DEBUG D#755ptD.0 => &MEM[(struct _Rb_tree_nodeD.41466 *)__i$_M_node_118]._M_value_fieldD.43957
  # DEBUG __rD.53249 => D#755ptD.0
  # DEBUG D#757ptD.0 => {CLOBBER}
  # DEBUG __i$_M_nodeD.64965 => D#757ptD.0
  # VUSE <.MEM_122>
  _30 = MEM[(struct mapped_typeD.41247 &)__i$_M_node_118 + 36].labelD.35381;
  if (_15 != _30)
    goto <bb 49>;
  else
    goto <bb 50>;
;;    succ:       49 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                50 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 49, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 48, next block 50, flags: (NEW, REACHABLE)
;;    pred:       48 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_38 = VDEF <.MEM_122>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  __assert_failD.14402 ("_out_req[out][in].label == label", "allocators/allocator.cpp", 365, &_ZZN15SparseAllocator13RemoveRequestEiiiE19__PRETTY_FUNCTION__D.42662);
;;    succ:      

;;   basic block 50, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 49, next block 51, flags: (NEW, REACHABLE)
;;    pred:       48 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_122>
  out.136_31 = outD.42657;
  # RANGE ~[2147483648, 18446744071562067967]
  _32 = (long unsigned intD.14) out.136_31;
  # DEBUG D#787ptD.0 => &this_5(D)->_out_reqD.37896
  # VUSE <.MEM_122>
  # PT = nonlocal escaped 
  _48 = MEM[(struct mapD.37148 * *)this_5(D) + 280B];
  # DEBUG D#85ptD.0 => D#787ptD.0
  # DEBUG __nD.61731 => _32
  # DEBUG thisD.61732 => D#85ptD.0
  # RANGE [0, 18446744073709551568] NONZERO 18446744073709551600
  _80 = _32 * 48;
  # PT = nonlocal escaped 
  _81 = _48 + _80;
  # DEBUG thisD.61727 => NULL
  # DEBUG __xD.61728 => &inD.42656
  # PT = nonlocal escaped 
  _79 = &_81->_M_tD.41463;
  # .MEM_85 = VDEF <.MEM_122>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE5eraseERS1_D.41961 (_79, &inD.42656);
  # VUSE <.MEM_85>
  out.136_34 = outD.42657;
  # RANGE ~[2147483648, 18446744071562067967]
  _35 = (long unsigned intD.14) out.136_34;
  # DEBUG D#788ptD.0 => &this_5(D)->_out_reqD.37896
  # VUSE <.MEM_85>
  # PT = nonlocal escaped 
  _49 = MEM[(struct mapD.37148 * *)this_5(D) + 280B];
  # DEBUG D#85ptD.0 => D#788ptD.0
  # DEBUG __nD.61724 => _35
  # DEBUG thisD.61725 => D#85ptD.0
  # RANGE [0, 18446744073709551568] NONZERO 18446744073709551600
  _77 = _35 * 48;
  # PT = nonlocal escaped 
  _78 = _49 + _77;
  # DEBUG thisD.61720 => NULL
  # VUSE <.MEM_85>
  _76 = MEM[(long unsigned intD.14 *)_78 + 40B];
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.61721 => D#93ptD.0
  if (_76 == 0)
    goto <bb 51>;
  else
    goto <bb 52>;
;;    succ:       51 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                52 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 51, loop depth 0, count 0, freq 350, maybe hot
;;    prev block 50, next block 52, flags: (NEW, REACHABLE)
;;    pred:       50 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#789ptD.0 => &this_5(D)->_out_occD.37145
  # DEBUG thisD.61734 => D#789ptD.0
  # DEBUG __xD.61735 => &outD.42657
  # PT = nonlocal 
  _82 = &MEM[(struct setD.36306 *)this_5(D) + 208B]._M_tD.36318;
  # .MEM_86 = VDEF <.MEM_85>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE5eraseERKiD.36827 (_82, &outD.42657);
;;    succ:       52 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 52, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 51, next block 61, flags: (NEW, REACHABLE)
;;    pred:       50 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                51 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2 = PHI <.MEM_85(50), .MEM_86(51)>
;;    succ:       61 [100.0%]  (FALLTHRU)

;;   basic block 61, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 52, next block 53, flags: (NEW)
;;    pred:       52 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_2>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 53, loop depth 0, count 0, freq 135, maybe hot
;;    prev block 61, next block 54, flags: (NEW, REACHABLE)
;;    pred:       60 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#337ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.54291 => D#337ptD.0
  # DEBUG thisD.54348 => NULL
  # DEBUG __xD.54349 => NULL
  # .MEM_41 = VDEF <.MEM_3(D)>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  __assert_failD.14402 ("_in_req[in].count( out ) > 0", "allocators/allocator.cpp", 353, &_ZZN15SparseAllocator13RemoveRequestEiiiE19__PRETTY_FUNCTION__D.42662);
;;    succ:      

;;   basic block 54, loop depth 0, count 0, freq 517, maybe hot
;;    prev block 53, next block 55, flags: (NEW, REACHABLE)
;;    pred:       25 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                59 [7.9%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_21 = PHI <__i$_M_node_119(25), __i$_M_node_119(59), __i$_M_node_37(17)>
  # DEBUG thisD.64919 => &D.64940
  # DEBUG __aD.64918 => &outD.42657
  # DEBUG __bD.64917 => NULL
  # .MEM_123 = VDEF <.MEM_3(D)>
  D.64940.firstD.42483 = out.136_7;
  # .MEM_124 = VDEF <.MEM_123>
  MEM[(struct pairD.37146 *)&D.64940 + 4B] = 0;
  # .MEM_125 = VDEF <.MEM_124>
  MEM[(struct pairD.37146 *)&D.64940 + 8B] = 0;
  # .MEM_126 = VDEF <.MEM_125>
  MEM[(struct pairD.37146 *)&D.64940 + 12B] = 0;
  # .MEM_127 = VDEF <.MEM_126>
  MEM[(struct pairD.37146 *)&D.64940 + 16B] = 0;
  # DEBUG thisD.64922 => _53
  # DEBUG __position$_M_nodeD.61574 => __i$_M_node_21
  # DEBUG __xD.64920 => &D.64940
  # DEBUG thisD.61550 => NULL
  # DEBUG __itD.61549 => &__positionD.64921
  # PT = nonlocal escaped 
  _99 = &_53->_M_tD.41463;
  # DEBUG thisD.64925 => _99
  # .MEM_128 = VDEF <.MEM_127>
  MEM[(struct _Rb_tree_const_iteratorD.41769 *)&__posD.64924] = __i$_M_node_21;
  # DEBUG __xD.64923 => &D.64940
  # DEBUG thisD.61510 => &__anD.64926
  # DEBUG __tD.61509 => _99
  # DEBUG __an$_M_tD.61503 => _99
  # DEBUG D#752ptD.0 => &__anD.64926
  # .MEM_129 = VDEF <.MEM_128>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  D.64939 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE17_M_insert_unique_INSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_ERKS4_RT_.isra.197.constprop.200D.62239 (_99, __posD.64924, &D.64940);
  # VUSE <.MEM_129>
  # PT = nonlocal escaped 
  __i$_M_node_100 = MEM[(struct _Rb_tree_iteratorD.41767 *)&D.64939];
  # DEBUG __i$_M_nodeD.64938 => __i$_M_node_100
  # .MEM_130 = VDEF <.MEM_129>
  D.64940 ={v} {CLOBBER};
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 55, loop depth 0, count 0, freq 135, maybe hot
;;   Invalid sum of incoming frequencies 517, should be 135
;;    prev block 54, next block 56, flags: (NEW, REACHABLE)
;;    pred:       58 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#337ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.54291 => D#337ptD.0
  # DEBUG thisD.54348 => NULL
  # DEBUG __xD.54349 => NULL
  # DEBUG D#337ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.54291 => D#337ptD.0
  # DEBUG thisD.54348 => NULL
  # DEBUG __xD.54349 => NULL
  # .MEM_39 = VDEF <.MEM_1>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  __assert_failD.14402 ("_out_req[out].count( in ) > 0", "allocators/allocator.cpp", 364, &_ZZN15SparseAllocator13RemoveRequestEiiiE19__PRETTY_FUNCTION__D.42662);
;;    succ:      

;;   basic block 56, loop depth 0, count 0, freq 517, maybe hot
;;    prev block 55, next block 1, flags: (NEW, REACHABLE)
;;    pred:       47 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                57 [11.6%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_33 = PHI <__i$_M_node_115(47), __i$_M_node_115(57), __i$_M_node_23(39)>
  # DEBUG thisD.64946 => &D.64967
  # DEBUG __aD.64945 => &inD.42656
  # DEBUG __bD.64944 => NULL
  # .MEM_132 = VDEF <.MEM_1>
  D.64967.firstD.42483 = pretmp_13;
  # .MEM_133 = VDEF <.MEM_132>
  MEM[(struct pairD.37146 *)&D.64967 + 4B] = 0;
  # .MEM_134 = VDEF <.MEM_133>
  MEM[(struct pairD.37146 *)&D.64967 + 8B] = 0;
  # .MEM_135 = VDEF <.MEM_134>
  MEM[(struct pairD.37146 *)&D.64967 + 12B] = 0;
  # .MEM_136 = VDEF <.MEM_135>
  MEM[(struct pairD.37146 *)&D.64967 + 16B] = 0;
  # DEBUG thisD.64949 => _75
  # DEBUG __position$_M_nodeD.61574 => __i$_M_node_33
  # DEBUG __xD.64947 => &D.64967
  # DEBUG thisD.61550 => NULL
  # DEBUG __itD.61549 => &__positionD.64948
  # PT = nonlocal escaped 
  _116 = &_75->_M_tD.41463;
  # DEBUG thisD.64952 => _116
  # .MEM_137 = VDEF <.MEM_136>
  MEM[(struct _Rb_tree_const_iteratorD.41769 *)&__posD.64951] = __i$_M_node_33;
  # DEBUG __xD.64950 => &D.64967
  # DEBUG thisD.61510 => &__anD.64953
  # DEBUG __tD.61509 => _116
  # DEBUG __an$_M_tD.61503 => _116
  # DEBUG D#752ptD.0 => &__anD.64953
  # .MEM_138 = VDEF <.MEM_137>
  # USE = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42656 D.42657 D.42662 D.64940 D.64967 } (nonlocal, escaped)
  D.64966 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE17_M_insert_unique_INSA_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_ERKS4_RT_.isra.197.constprop.200D.62239 (_116, __posD.64951, &D.64967);
  # VUSE <.MEM_138>
  # PT = nonlocal escaped 
  __i$_M_node_117 = MEM[(struct _Rb_tree_iteratorD.41767 *)&D.64966];
  # DEBUG __i$_M_nodeD.64965 => __i$_M_node_117
  # .MEM_139 = VDEF <.MEM_138>
  D.64967 ={v} {CLOBBER};
  goto <bb 48>;
;;    succ:       48 [100.0%]  (FALLTHRU,EXECUTABLE)

}



;; Function void std::vector<_Tp, _Alloc>::_M_fill_insert(std::vector<_Tp, _Alloc>::iterator, std::vector<_Tp, _Alloc>::size_type, const value_type&) [with _Tp = int; _Alloc = std::allocator<int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer = int*; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::value_type = int] (_ZNSt6vectorIiSaIiEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPiS1_EEmRKi, funcdef_no=2106, decl_uid=35297, cgraph_uid=776, symbol_order=777)


Pass statistics:
----------------

void std::vector<_Tp, _Alloc>::_M_fill_insert(std::vector<_Tp, _Alloc>::iterator, std::vector<_Tp, _Alloc>::size_type, const value_type&) [with _Tp = int; _Alloc = std::allocator<int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer = int*; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::value_type = int] (struct vectorD.34569 * const thisD.35298, struct iteratorD.34942 __positionD.35299, size_typeD.34950 __nD.35300, const value_typeD.34937 & __xD.35301)
{
  const long unsigned intD.14 D.65020;
  const size_typeD.34950 __lenD.65014;
  size_typeD.34950 D.65019;
  size_typeD.34950 __nD.65012;
  intD.9 * D.65010;
  const ptrdiff_tD.2819 _NumD.65000;
  intD.9 * D.65001;
  intD.9 * const __positionD.60942;
  intD.9 * __firstD.60910;
  const ptrdiff_tD.2819 _NumD.60904;
  const ptrdiff_tD.2819 _NumD.60865;
  intD.9 * __firstD.60793;
  long unsigned intD.14 __nD.60794;
  intD.9 * __firstD.60744;
  const ptrdiff_tD.2819 _NumD.60740;
  intD.9 * __firstD.60693;
  intD.9 * __new_finishD.45007;
  const size_typeD.34950 __elems_afterD.44971;
  value_typeD.34937 __x_copyD.44970;
  intD.9 * _5;
  long intD.12 _6;
  long intD.12 _8;
  long intD.12 _9;
  long intD.12 _10;
  long unsigned intD.14 _11;
  intD.9 * const _17;
  long unsigned intD.14 _19;
  difference_typeD.43018 _22;
  long intD.12 _23;
  long unsigned intD.14 _25;
  long intD.12 _27;
  intD.9 * pretmp_29;
  long unsigned intD.14 _38;
  long unsigned intD.14 _39;
  sizetype _40;
  intD.9 * _41;
  intD.9 * _43;
  long intD.12 _47;
  intD.9 * _48;
  long intD.12 __first.7_49;
  intD.9 * _53;
  const intD.9 _56;
  long unsigned intD.14 _59;
  long intD.12 _66;
  long unsigned intD.14 _68;
  intD.9 * _70;
  long unsigned intD.14 _74;
  long unsigned intD.14 _77;
  long unsigned intD.14 prephitmp_102;
  long unsigned intD.14 pretmp_103;
  long intD.12 _104;
  long unsigned intD.14 _106;
  sizetype _107;
  intD.9 * _108;
  intD.9 * _112;
  intD.9 * iftmp.12_113;
  boolD.2757 _114;
  long intD.12 _116;
  long intD.12 _117;
  long intD.12 _118;
  long unsigned intD.14 _120;
  long intD.12 prephitmp_121;
  long unsigned intD.14 _133;
  long intD.12 prephitmp_137;
  long intD.12 pretmp_138;
  long intD.12 pretmp_140;
  boolD.2757 _142;
  long intD.12 _143;
  long intD.12 _144;
  long intD.12 pretmp_145;
  intD.9 * prephitmp_146;
  intD.9 * pretmp_147;
  intD.9 * prephitmp_148;
  intD.9 * pretmp_149;
  long intD.12 _150;
  long intD.12 _151;
  boolD.2757 _152;
  long intD.12 _153;
  long intD.12 _156;
  long intD.12 _157;
  long intD.12 _158;
  long unsigned intD.14 _160;
  long unsigned intD.14 pretmp_162;
  long unsigned intD.14 prephitmp_163;
  long unsigned intD.14 pretmp_164;
  long unsigned intD.14 prephitmp_165;
  intD.9 * pretmp_166;
  intD.9 * prephitmp_167;
  long unsigned intD.14 pretmp_168;
  long unsigned intD.14 prephitmp_169;
  intD.9 * pretmp_173;
  intD.9 * prephitmp_174;

;;   basic block 2, loop depth 0, count 0, freq 4156, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#941ptD.0 => MEM[(struct __normal_iteratorD.34943 *)&__positionD.35299]
  # DEBUG __positionD.60942 => D#941ptD.0
  if (__n_2(D) != 0)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 3421, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_172 = PHI <.MEM_3(D)(2), .MEM_12(10), .MEM_13(13), .MEM_54(23), .MEM_154(26)>
  goto <bb 45>;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 2535, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal 
  __position_16 = MEM[(struct __normal_iteratorD.34943 *)&__positionD.35299];
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _5 = this_4(D)->D.35374._M_implD.34865._M_end_of_storageD.34869;
  _6 = (long intD.12) _5;
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  __first_7 = this_4(D)->D.35374._M_implD.34865._M_finishD.34868;
  _8 = (long intD.12) __first_7;
  _9 = _6 - _8;
  # RANGE [-2305843009213693952, 2305843009213693951]
  _10 = _9 /[ex] 4;
  # RANGE ~[2305843009213693952, 16140901064495857663]
  _11 = (long unsigned intD.14) _10;
  if (__n_2(D) <= _11)
    goto <bb 5>;
  else
    goto <bb 28>;
;;    succ:       5 [71.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [29.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 1800, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [71.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  __x_copy_35 = *__x_21(D);
  # DEBUG __x_copyD.44970 => __x_copy_35
  # DEBUG thisD.60688 => this_4(D)
  # DEBUG D#100ptD.0 => &this_4(D)->D.35374._M_implD.34865._M_finishD.34868
  # DEBUG thisD.60690 => NULL
  # DEBUG __iD.60689 => D#100ptD.0
  # DEBUG __lhsD.60685 => &D.44972
  # DEBUG __rhsD.60686 => &__positionD.35299
  # DEBUG thisD.53082 => &D.44972
  # DEBUG thisD.53080 => &__positionD.35299
  _27 = (long intD.12) __position_16;
  _23 = _8 - _27;
  # RANGE [-2305843009213693952, 2305843009213693951]
  _22 = _23 /[ex] 4;
  # RANGE ~[2305843009213693952, 16140901064495857663]
  __elems_after_37 = (const size_typeD.34950) _22;
  # DEBUG __elems_afterD.44971 => __elems_after_37
  # DEBUG __old_finishD.44979 => __first_7
  if (__n_2(D) < __elems_after_37)
    goto <bb 6>;
  else
    goto <bb 15>;
;;    succ:       6 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#696ptD.0 => &this_4(D)->D.35374
  # DEBUG thisD.60742 => D#696ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _39 = __n_2(D) * 4;
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _40 = -_39;
  # PT = nonlocal escaped 
  _41 = __first_7 + _40;
  # DEBUG __firstD.60707 => _41
  # DEBUG __lastD.60708 => __first_7
  # DEBUG __resultD.60709 => __first_7
  # DEBUG __allocD.60710 => D#688ptD.0
  # DEBUG D#687ptD.0 => D#688ptD.0
  # DEBUG D#686ptD.0 => D#687ptD.0
  # DEBUG __firstD.60714 => _41
  # DEBUG __lastD.60713 => __first_7
  # DEBUG __resultD.60712 => __first_7
  # DEBUG D.60711 => D#686ptD.0
  # DEBUG __firstD.60717 => _41
  # DEBUG __lastD.60716 => __first_7
  # DEBUG __resultD.60715 => __first_7
  # DEBUG __assignableD.60720 => 1
  # DEBUG __firstD.60723 => _41
  # DEBUG __lastD.60722 => __first_7
  # DEBUG __resultD.60721 => __first_7
  # DEBUG __firstD.60726 => _41
  # DEBUG __lastD.60725 => __first_7
  # DEBUG __resultD.60724 => __first_7
  # DEBUG __itD.60436 => __first_7
  # DEBUG __itD.54602 => __first_7
  # DEBUG __itD.60434 => _41
  # DEBUG __itD.54602 => _41
  # DEBUG __firstD.60729 => _41
  # DEBUG __lastD.60728 => __first_7
  # DEBUG __resultD.60727 => __first_7
  # DEBUG __itD.60416 => __first_7
  # DEBUG __itD.54605 => __first_7
  # DEBUG __itD.60414 => __first_7
  # DEBUG __itD.54605 => __first_7
  # DEBUG __itD.60412 => _41
  # DEBUG __itD.54605 => _41
  # DEBUG __firstD.60732 => _41
  # DEBUG __lastD.60731 => __first_7
  # DEBUG __resultD.60730 => __first_7
  # DEBUG __simpleD.60736 => 1
  # DEBUG __firstD.60739 => _41
  # DEBUG __lastD.60738 => __first_7
  # DEBUG __resultD.60737 => __first_7
  __first.7_49 = (long intD.12) _41;
  _47 = _8 - __first.7_49;
  # RANGE [-2305843009213693952, 2305843009213693951]
  _Num_45 = _47 /[ex] 4;
  # DEBUG _NumD.60740 => _Num_45
  if (_Num_45 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 261, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _38 = (long unsigned intD.14) _47;
  # .MEM_97 = VDEF <.MEM_3(D)>
  # USE = nonlocal null { D.65023 } (escaped heap)
  # CLB = nonlocal null { D.65023 } (escaped heap)
  memmoveD.995 (__first_7, _41, _38);
  # VUSE <.MEM_97>
  pretmp_173 = this_4(D)->D.35374._M_implD.34865._M_finishD.34868;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_14 = PHI <.MEM_3(D)(6), .MEM_97(7)>
  # PT = nonlocal escaped 
  # prephitmp_174 = PHI <__first_7(6), pretmp_173(7)>
  # PT = nonlocal escaped 
  _43 = prephitmp_174 + _39;
  # .MEM_44 = VDEF <.MEM_14>
  this_4(D)->D.35374._M_implD.34865._M_finishD.34868 = _43;
  # DEBUG thisD.60705 => &__positionD.35299
  # DEBUG __firstD.64984 => D#941ptD.0
  # DEBUG __lastD.64985 => _41
  # DEBUG __resultD.64986 => __first_7
  # DEBUG __itD.57026 => _41
  # DEBUG __itD.54602 => _41
  # DEBUG __itD.57024 => D#941ptD.0
  # DEBUG __itD.54602 => D#941ptD.0
  # DEBUG __firstD.64989 => D#941ptD.0
  # DEBUG __lastD.64988 => _41
  # DEBUG __resultD.64987 => __first_7
  # DEBUG __itD.57006 => __first_7
  # DEBUG __itD.54605 => __first_7
  # DEBUG __itD.57004 => _41
  # DEBUG __itD.54605 => _41
  # DEBUG __itD.57002 => D#941ptD.0
  # DEBUG __itD.54605 => D#941ptD.0
  # DEBUG __firstD.64992 => D#941ptD.0
  # DEBUG __lastD.64991 => _41
  # DEBUG __resultD.64990 => __first_7
  # DEBUG __simpleD.64996 => 1
  # DEBUG __firstD.64999 => D#941ptD.0
  # DEBUG __lastD.64998 => _41
  # DEBUG __resultD.64997 => __first_7
  _104 = __first.7_49 - _27;
  # RANGE [-2305843009213693952, 2305843009213693951]
  _Num_105 = _104 /[ex] 4;
  # DEBUG _NumD.65000 => _Num_105
  if (_Num_105 != 0)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _106 = (long unsigned intD.14) _104;
  # RANGE [0, 18446744073709551615]
  _107 = -_106;
  # PT = nonlocal escaped 
  _108 = __first_7 + _107;
  # .MEM_135 = VDEF <.MEM_44>
  # USE = nonlocal null { D.65023 } (escaped heap)
  # CLB = nonlocal null { D.65023 } (escaped heap)
  memmoveD.995 (_108, __position_16, _106);
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_12 = PHI <.MEM_44(8), .MEM_135(9)>
  # DEBUG thisD.60703 => &__positionD.35299
  # PT = nonlocal 
  _48 = __position_16 + _39;
  # DEBUG thisD.60701 => &__positionD.35299
  # DEBUG D#365ptD.0 => &__x_copyD.44970
  # DEBUG __firstD.60693 => D#941ptD.0
  # DEBUG __lastD.60694 => _48
  # DEBUG D#364ptD.0 => D#365ptD.0
  # DEBUG __valueD.60696 => D#364ptD.0
  # DEBUG __itD.54615 => _48
  # DEBUG __itD.54605 => _48
  # DEBUG __itD.54613 => D#941ptD.0
  # DEBUG __itD.54605 => D#941ptD.0
  # DEBUG D#251ptD.0 => D#364ptD.0
  # DEBUG __firstD.60699 => D#941ptD.0
  # DEBUG __lastD.60698 => _48
  # DEBUG __valueD.60697 => D#251ptD.0
  # DEBUG __tmpD.60700 => __x_copy_35
  # DEBUG __firstD.60699 => D#941ptD.0
  if (__position_16 == _48)
    goto <bb 3>;
  else
    goto <bb 11>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  # __position_109 = PHI <__position_16(11), __position_55(14)>
  # .MEM_83 = PHI <.MEM_12(11), .MEM_98(14)>
  # DEBUG __firstD.60699 => __position_109
  # .MEM_98 = VDEF <.MEM_83>
  *__position_109 = __x_copy_35;
  # PT = nonlocal 
  __position_55 = __position_109 + 4;
  # DEBUG __firstD.60699 => __position_55
  # DEBUG __firstD.60699 => __position_55
  if (_48 == __position_55)
    goto <bb 13>;
  else
    goto <bb 14>;
;;    succ:       13 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_13 = PHI <.MEM_98(12)>
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       5 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#697ptD.0 => &this_4(D)->D.35374
  # DEBUG thisD.60815 => D#697ptD.0
  # RANGE [0, 18446744073709551615]
  __n_50 = __n_2(D) - __elems_after_37;
  # DEBUG D#373ptD.0 => &__x_copyD.44970
  # DEBUG __firstD.60793 => __first_7
  # DEBUG __nD.60794 => __n_50
  # DEBUG D#372ptD.0 => D#373ptD.0
  # DEBUG __xD.60797 => D#372ptD.0
  # DEBUG D.60796 => D#374ptD.0
  # DEBUG D#371ptD.0 => D#372ptD.0
  # DEBUG __firstD.60800 => __first_7
  # DEBUG __nD.60799 => __n_50
  # DEBUG D#370ptD.0 => D#371ptD.0
  # DEBUG __xD.60798 => D#370ptD.0
  # DEBUG __assignableD.60802 => 1
  # DEBUG D#369ptD.0 => D#370ptD.0
  # DEBUG __firstD.60805 => __first_7
  # DEBUG __nD.60804 => __n_50
  # DEBUG D#368ptD.0 => D#369ptD.0
  # DEBUG __xD.60803 => D#368ptD.0
  # DEBUG D#367ptD.0 => D#368ptD.0
  # DEBUG __firstD.60808 => __first_7
  # DEBUG __nD.60807 => __n_50
  # DEBUG D#366ptD.0 => D#367ptD.0
  # DEBUG __valueD.60806 => D#366ptD.0
  # DEBUG __itD.54639 => __first_7
  # DEBUG __itD.54605 => __first_7
  # DEBUG D#258ptD.0 => D#366ptD.0
  # DEBUG __firstD.60811 => __first_7
  # DEBUG __nD.60810 => __n_50
  # DEBUG __valueD.60809 => D#258ptD.0
  # DEBUG __tmpD.60812 => __x_copy_35
  # DEBUG __niterD.60813 => __n_50
  # DEBUG __niterD.60813 => __n_50
  # DEBUG __firstD.60811 => __first_7
  if (__n_50 == 0)
    goto <bb 20>;
  else
    goto <bb 16>;
;;    succ:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __n_111 = PHI <__n_50(16), __n_63(19)>
  # PT = nonlocal escaped 
  # __first_76 = PHI <__first_7(16), __first_64(19)>
  # .MEM_81 = PHI <.MEM_3(D)(16), .MEM_99(19)>
  # DEBUG __niterD.60813 => __n_111
  # DEBUG __firstD.60811 => __first_76
  # .MEM_99 = VDEF <.MEM_81>
  *__first_76 = __x_copy_35;
  # RANGE [0, 18446744073709551614]
  __n_63 = __n_111 + 18446744073709551615;
  # DEBUG __niterD.60813 => __n_63
  # PT = nonlocal escaped 
  __first_64 = __first_76 + 4;
  # DEBUG __firstD.60811 => __first_64
  # DEBUG __niterD.60813 => __n_63
  # DEBUG __firstD.60811 => __first_64
  if (__n_63 == 0)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 17, next block 19, flags: (NEW)
;;    pred:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  _160 = __n_50 * 4;
  # PT = nonlocal escaped 
  __first_123 = __first_7 + _160;
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       18 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_125 = PHI <__first_123(18), __first_7(15)>
  # .MEM_84 = PHI <.MEM_99(18), .MEM_3(D)(15)>
  # .MEM_51 = VDEF <.MEM_84>
  this_4(D)->D.35374._M_implD.34865._M_finishD.34868 = __first_125;
  # DEBUG D#698ptD.0 => &this_4(D)->D.35374
  # DEBUG thisD.60791 => D#698ptD.0
  # DEBUG thisD.60789 => &__positionD.35299
  # DEBUG __firstD.60754 => D#941ptD.0
  # DEBUG __lastD.60755 => __first_7
  # DEBUG __resultD.60756 => __first_125
  # DEBUG __allocD.60757 => D#688ptD.0
  # DEBUG D#687ptD.0 => D#688ptD.0
  # DEBUG D#686ptD.0 => D#687ptD.0
  # DEBUG __firstD.60761 => D#941ptD.0
  # DEBUG __lastD.60760 => __first_7
  # DEBUG __resultD.60759 => __first_125
  # DEBUG D.60758 => D#686ptD.0
  # DEBUG __firstD.60764 => D#941ptD.0
  # DEBUG __lastD.60763 => __first_7
  # DEBUG __resultD.60762 => __first_125
  # DEBUG __assignableD.60767 => 1
  # DEBUG __firstD.60770 => D#941ptD.0
  # DEBUG __lastD.60769 => __first_7
  # DEBUG __resultD.60768 => __first_125
  # DEBUG __firstD.60773 => D#941ptD.0
  # DEBUG __lastD.60772 => __first_7
  # DEBUG __resultD.60771 => __first_125
  # DEBUG __itD.60436 => __first_7
  # DEBUG __itD.54602 => __first_7
  # DEBUG __itD.60434 => D#941ptD.0
  # DEBUG __itD.54602 => D#941ptD.0
  # DEBUG __firstD.60776 => D#941ptD.0
  # DEBUG __lastD.60775 => __first_7
  # DEBUG __resultD.60774 => __first_125
  # DEBUG __itD.60416 => __first_125
  # DEBUG __itD.54605 => __first_125
  # DEBUG __itD.60414 => __first_7
  # DEBUG __itD.54605 => __first_7
  # DEBUG __itD.60412 => D#941ptD.0
  # DEBUG __itD.54605 => D#941ptD.0
  # DEBUG __firstD.60779 => D#941ptD.0
  # DEBUG __lastD.60778 => __first_7
  # DEBUG __resultD.60777 => __first_125
  # DEBUG __simpleD.60783 => 1
  # DEBUG __firstD.60786 => D#941ptD.0
  # DEBUG __lastD.60785 => __first_7
  # DEBUG __resultD.60784 => __first_125
  # DEBUG _NumD.60787 => _22
  if (_22 != 0)
    goto <bb 22>;
  else
    goto <bb 21>;
;;    succ:       22 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 639, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_168 = (long unsigned intD.14) _23;
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 261, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       20 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _59 = (long unsigned intD.14) _23;
  # .MEM_100 = VDEF <.MEM_51>
  # USE = nonlocal null { D.65023 } (escaped heap)
  # CLB = nonlocal null { D.65023 } (escaped heap)
  memmoveD.995 (__first_125, __position_16, _59);
  # VUSE <.MEM_100>
  pretmp_166 = this_4(D)->D.35374._M_implD.34865._M_finishD.34868;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       21 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_87 = PHI <.MEM_51(21), .MEM_100(22)>
  # PT = nonlocal escaped 
  # prephitmp_167 = PHI <__first_125(21), pretmp_166(22)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_169 = PHI <pretmp_168(21), _59(22)>
  # PT = nonlocal escaped 
  _53 = prephitmp_167 + prephitmp_169;
  # .MEM_54 = VDEF <.MEM_87>
  this_4(D)->D.35374._M_implD.34865._M_finishD.34868 = _53;
  # DEBUG thisD.60752 => &__positionD.35299
  # DEBUG D#365ptD.0 => &__x_copyD.44970
  # DEBUG __firstD.60744 => D#941ptD.0
  # DEBUG __lastD.60745 => __first_7
  # DEBUG D#364ptD.0 => D#365ptD.0
  # DEBUG __valueD.60747 => D#364ptD.0
  # DEBUG __itD.54615 => __first_7
  # DEBUG __itD.54605 => __first_7
  # DEBUG __itD.54613 => D#941ptD.0
  # DEBUG __itD.54605 => D#941ptD.0
  # DEBUG D#251ptD.0 => D#364ptD.0
  # DEBUG __firstD.60750 => D#941ptD.0
  # DEBUG __lastD.60749 => __first_7
  # DEBUG __valueD.60748 => D#251ptD.0
  # DEBUG __tmpD.60751 => __x_copy_35
  # DEBUG __firstD.60750 => D#941ptD.0
  if (__first_7 == __position_16)
    goto <bb 3>;
  else
    goto <bb 24>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 23, next block 25, flags: (NEW)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 24, next block 26, flags: (NEW)
;;    pred:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                27 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  # __position_110 = PHI <__position_16(24), __position_58(27)>
  # .MEM_136 = PHI <.MEM_54(24), .MEM_101(27)>
  # DEBUG __firstD.60750 => __position_110
  # .MEM_101 = VDEF <.MEM_136>
  *__position_110 = __x_copy_35;
  # PT = nonlocal 
  __position_58 = __position_110 + 4;
  # DEBUG __firstD.60750 => __position_58
  # DEBUG __firstD.60750 => __position_58
  if (__first_7 == __position_58)
    goto <bb 26>;
  else
    goto <bb 27>;
;;    succ:       26 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_154 = PHI <.MEM_101(25)>
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 26, next block 28, flags: (NEW)
;;    pred:       25 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       4 [29.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.65011 => this_4(D)
  # DEBUG __nD.65012 => __n_2(D)
  # DEBUG __nD.65012 => __n_2(D)
  # DEBUG __sD.65013 => "vector::_M_fill_insert"
  # DEBUG D#489ptD.0 => this_4(D)
  # DEBUG thisD.57062 => D#489ptD.0
  # DEBUG D#488ptD.0 => D#489ptD.0
  # DEBUG D#487ptD.0 => &D#488ptD.0->D.35374
  # DEBUG thisD.57052 => D#487ptD.0
  # DEBUG __aD.57044 => D#486ptD.0
  # DEBUG D#485ptD.0 => D#486ptD.0
  # DEBUG D#484ptD.0 => D#485ptD.0
  # DEBUG thisD.57035 => D#484ptD.0
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _17 = MEM[(intD.9 * *)this_4(D)];
  # DEBUG D#87ptD.0 => this_4(D)
  # DEBUG D#87ptD.0 => this_4(D)
  # DEBUG thisD.65017 => D#87ptD.0
  # DEBUG thisD.65018 => D#87ptD.0
  _116 = (long intD.12) _17;
  _117 = _8 - _116;
  # RANGE [-2305843009213693952, 2305843009213693951]
  _118 = _117 /[ex] 4;
  # RANGE ~[2305843009213693952, 16140901064495857663]
  _119 = (const long unsigned intD.14) _118;
  # RANGE [2305843009213693952, 6917529027641081855] NONZERO 9223372036854775807
  _120 = 4611686018427387903 - _119;
  if (__n_2(D) > _120)
    goto <bb 29>;
  else
    goto <bb 30>;
;;    succ:       29 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 0
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       28 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_134 = VDEF <.MEM_3(D)>
  # USE = nonlocal null { D.65023 } (escaped heap)
  # CLB = nonlocal null { D.65023 } (escaped heap)
  _ZSt20__throw_length_errorPKcD.2860 ("vector::_M_fill_insert");
;;    succ:      

;;   basic block 30, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       28 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#87ptD.0 => this_4(D)
  # DEBUG D#87ptD.0 => this_4(D)
  # DEBUG thisD.57080 => D#87ptD.0
  # DEBUG thisD.57079 => D#87ptD.0
  # DEBUG D#87ptD.0 => this_4(D)
  # DEBUG D#87ptD.0 => this_4(D)
  # DEBUG thisD.57075 => D#87ptD.0
  # DEBUG thisD.57074 => D#87ptD.0
  # DEBUG __aD.65016 => &D.65020
  # DEBUG __bD.65015 => &__nD.65012
  _77 = MAX_EXPR <__n_2(D), _119>;
  # RANGE [0, 18446744073709551615]
  __len_124 = _77 + _119;
  # DEBUG __lenD.65014 => __len_124
  # DEBUG D#87ptD.0 => this_4(D)
  # DEBUG D#87ptD.0 => this_4(D)
  # DEBUG thisD.57067 => D#87ptD.0
  # DEBUG thisD.57066 => D#87ptD.0
  # DEBUG D#489ptD.0 => this_4(D)
  # DEBUG thisD.57082 => D#489ptD.0
  # DEBUG D#488ptD.0 => D#489ptD.0
  # DEBUG D#487ptD.0 => &D#488ptD.0->D.35374
  # DEBUG thisD.57052 => D#487ptD.0
  # DEBUG __aD.57044 => D#486ptD.0
  # DEBUG D#485ptD.0 => D#486ptD.0
  # DEBUG D#484ptD.0 => D#485ptD.0
  # DEBUG thisD.57035 => D#484ptD.0
  _152 = __len_124 > 4611686018427387903;
  _142 = _119 > __len_124;
  _114 = _142 | _152;
  if (_114 != 0)
    goto <bb 46>;
  else
    goto <bb 47>;
;;    succ:       46 [67.0%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [33.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 8, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       47 [9.4%]  (TRUE_VALUE,EXECUTABLE)
  pretmp_164 = __len_124 * 4;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 661, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       46 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,EXECUTABLE)
  # _156 = PHI <_144(46), _151(31)>
  # _157 = PHI <_143(46), _150(31)>
  # RANGE [4, 18446744073709551612] NONZERO 18446744073709551612
  # prephitmp_165 = PHI <18446744073709551612(46), pretmp_164(31)>
  # DEBUG __lenD.45003 => NULL
  # DEBUG thisD.60937 => this_4(D)
  # DEBUG D#156ptD.0 => &this_4(D)->D.35374._M_implD.34865._M_startD.34867
  # DEBUG thisD.60939 => NULL
  # DEBUG __iD.60938 => D#156ptD.0
  # DEBUG __lhsD.60934 => &__positionD.35299
  # DEBUG __rhsD.60935 => &D.45005
  # DEBUG thisD.53082 => &__positionD.35299
  # DEBUG thisD.53080 => &D.45005
  # DEBUG D#709ptD.0 => _157 /[ex] 4
  # DEBUG __elems_beforeD.45004 => (const size_typeD.34950) D#709ptD.0
  # DEBUG D#708ptD.0 => &this_4(D)->D.35374
  # DEBUG D#497ptD.0 => D#708ptD.0
  # DEBUG __nD.65002 => NULL
  # DEBUG thisD.65003 => D#497ptD.0
  # DEBUG D#496ptD.0 => D#497ptD.0
  # DEBUG D#495ptD.0 => &D#496ptD.0->_M_implD.34865
  # DEBUG D#494ptD.0 => D#495ptD.0
  # DEBUG __nD.65006 => NULL
  # DEBUG __aD.65005 => D#494ptD.0
  # DEBUG D#493ptD.0 => D#494ptD.0
  # DEBUG D#491ptD.0 => D#493ptD.0
  # DEBUG D#492ptD.0 => 0B
  # DEBUG __nD.65009 => NULL
  # DEBUG thisD.65007 => D#491ptD.0
  # DEBUG D.65008 => D#492ptD.0
  # DEBUG D#490ptD.0 => D#491ptD.0
  # DEBUG D#484ptD.0 => D#490ptD.0
  # DEBUG thisD.57087 => D#484ptD.0
  # .MEM_131 = VDEF <.MEM_3(D)>
  # PT = { D.65023 } (escaped heap)
  # USE = nonlocal null { D.65023 } (escaped heap)
  # CLB = nonlocal null { D.65023 } (escaped heap)
  _112 = _ZnwmD.2764 (prephitmp_165);
  # VUSE <.MEM_131>
  pretmp_29 = this_4(D)->D.35374._M_implD.34865._M_startD.34867;
  # VUSE <.MEM_131>
  pretmp_147 = this_4(D)->D.35374._M_implD.34865._M_finishD.34868;
  pretmp_149 = _112 + prephitmp_165;
  pretmp_145 = (long intD.12) pretmp_147;
  pretmp_138 = (long intD.12) pretmp_29;
  pretmp_140 = _156 - pretmp_138;
;;    succ:       33 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       47 [90.6%]  (FALSE_VALUE,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.65023 } (escaped heap)
  # iftmp.12_113 = PHI <0B(47), _112(32)>
  # .MEM_126 = PHI <.MEM_3(D)(47), .MEM_131(32)>
  # _158 = PHI <_151(47), _156(32)>
  # _153 = PHI <_150(47), _157(32)>
  # PT = nonlocal escaped 
  # prephitmp_146 = PHI <_17(47), pretmp_29(32)>
  # PT = null { D.65023 } (escaped heap)
  # prephitmp_148 = PHI <0B(47), pretmp_149(32)>
  # prephitmp_121 = PHI <_8(47), pretmp_145(32)>
  # prephitmp_137 = PHI <_150(47), pretmp_140(32)>
  # DEBUG __new_startD.45006 => NULL
  # DEBUG __new_finishD.45007 => NULL
  # DEBUG D#692ptD.0 => &this_4(D)->D.35374
  # DEBUG thisD.60932 => D#692ptD.0
  # RANGE [0, 18446744073709551615]
  _19 = (long unsigned intD.14) _153;
  # PT = null { D.65023 } (escaped heap)
  __first_20 = iftmp.12_113 + _19;
  # VUSE <.MEM_126>
  _56 = MEM[(const intD.9 &)__x_21(D)];
  # DEBUG D#373ptD.0 => __x_21(D)
  # DEBUG __firstD.60910 => __first_20
  # DEBUG __nD.60911 => __n_2(D)
  # DEBUG D#372ptD.0 => D#373ptD.0
  # DEBUG __xD.60914 => D#372ptD.0
  # DEBUG D.60913 => D#374ptD.0
  # DEBUG D#371ptD.0 => D#372ptD.0
  # DEBUG __firstD.60917 => __first_20
  # DEBUG __nD.60916 => __n_2(D)
  # DEBUG D#370ptD.0 => D#371ptD.0
  # DEBUG __xD.60915 => D#370ptD.0
  # DEBUG __assignableD.60919 => 1
  # DEBUG D#369ptD.0 => D#370ptD.0
  # DEBUG __firstD.60922 => __first_20
  # DEBUG __nD.60921 => __n_2(D)
  # DEBUG D#368ptD.0 => D#369ptD.0
  # DEBUG __xD.60920 => D#368ptD.0
  # DEBUG D#367ptD.0 => D#368ptD.0
  # DEBUG __firstD.60925 => __first_20
  # DEBUG __nD.60924 => __n_2(D)
  # DEBUG D#366ptD.0 => D#367ptD.0
  # DEBUG __valueD.60923 => D#366ptD.0
  # DEBUG __itD.54639 => __first_20
  # DEBUG __itD.54605 => __first_20
  # DEBUG D#258ptD.0 => D#366ptD.0
  # DEBUG __firstD.60928 => __first_20
  # DEBUG __nD.60927 => __n_2(D)
  # DEBUG __valueD.60926 => D#258ptD.0
  # DEBUG __tmpD.60929 => _56
  # DEBUG __niterD.60930 => __n_2(D)
  # DEBUG __niterD.60930 => __n_2(D)
  # DEBUG __firstD.60928 => __first_20
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 1, count 0, freq 7428, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       35 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 6917529027641081855] NONZERO 9223372036854775807
  # __n_132 = PHI <__n_79(35), __n_2(D)(33)>
  # PT = null { D.65023 } (escaped heap)
  # __first_155 = PHI <__first_80(35), __first_20(33)>
  # .MEM_130 = PHI <.MEM_93(35), .MEM_126(33)>
  # DEBUG __niterD.60930 => __n_132
  # DEBUG __firstD.60928 => __first_155
  # .MEM_93 = VDEF <.MEM_130>
  *__first_155 = _56;
  # RANGE [0, 6917529027641081854] NONZERO 9223372036854775807
  __n_79 = __n_132 + 18446744073709551615;
  # DEBUG __niterD.60930 => __n_79
  # PT = null { D.65023 } (escaped heap)
  __first_80 = __first_155 + 4;
  # DEBUG __firstD.60928 => __first_80
  # DEBUG __niterD.60930 => __n_79
  # DEBUG __firstD.60928 => __first_80
  if (__n_79 == 0)
    goto <bb 36>;
  else
    goto <bb 35>;
;;    succ:       36 [9.9%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [90.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 35, loop depth 1, count 0, freq 6693, maybe hot
;;    prev block 34, next block 36, flags: (NEW)
;;    pred:       34 [90.1%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 34>;
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       34 [9.9%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __new_finishD.45007 => 0B
  # DEBUG D#693ptD.0 => &this_4(D)->D.35374
  # DEBUG thisD.60908 => D#693ptD.0
  # DEBUG thisD.60906 => &__positionD.35299
  # DEBUG D#940ptD.0 => this_4(D)->D.35374._M_implD.34865._M_startD.34867
  # DEBUG __firstD.60871 => D#940ptD.0
  # DEBUG __lastD.60872 => D#941ptD.0
  # DEBUG __resultD.60873 => NULL
  # DEBUG __allocD.60874 => D#690ptD.0
  # DEBUG D#689ptD.0 => D#690ptD.0
  # DEBUG D#686ptD.0 => D#689ptD.0
  # DEBUG __firstD.60878 => D#940ptD.0
  # DEBUG __lastD.60877 => D#941ptD.0
  # DEBUG __resultD.60876 => NULL
  # DEBUG D.60875 => D#686ptD.0
  # DEBUG __firstD.60881 => D#940ptD.0
  # DEBUG __lastD.60880 => D#941ptD.0
  # DEBUG __resultD.60879 => NULL
  # DEBUG __assignableD.60884 => 1
  # DEBUG __firstD.60887 => D#940ptD.0
  # DEBUG __lastD.60886 => D#941ptD.0
  # DEBUG __resultD.60885 => NULL
  # DEBUG __firstD.60890 => D#940ptD.0
  # DEBUG __lastD.60889 => D#941ptD.0
  # DEBUG __resultD.60888 => NULL
  # DEBUG __itD.60436 => D#941ptD.0
  # DEBUG __itD.54602 => D#941ptD.0
  # DEBUG __itD.60434 => D#940ptD.0
  # DEBUG __itD.54602 => D#940ptD.0
  # DEBUG __firstD.60893 => D#940ptD.0
  # DEBUG __lastD.60892 => D#941ptD.0
  # DEBUG __resultD.60891 => NULL
  # DEBUG __itD.60416 => NULL
  # DEBUG __itD.54605 => NULL
  # DEBUG __itD.60414 => D#941ptD.0
  # DEBUG __itD.54605 => D#941ptD.0
  # DEBUG __itD.60412 => D#940ptD.0
  # DEBUG __itD.54605 => D#940ptD.0
  # DEBUG __firstD.60896 => D#940ptD.0
  # DEBUG __lastD.60895 => D#941ptD.0
  # DEBUG __resultD.60894 => NULL
  # DEBUG __simpleD.60900 => 1
  # DEBUG __firstD.60903 => D#940ptD.0
  # DEBUG __lastD.60902 => D#941ptD.0
  # DEBUG __resultD.60901 => NULL
  # DEBUG D#939ptD.0 => (long intD.12) D#940ptD.0
  # DEBUG D#938ptD.0 => _158 - D#939ptD.0
  # RANGE [-2305843009213693952, 2305843009213693951]
  _Num_73 = prephitmp_137 /[ex] 4;
  # DEBUG _NumD.60904 => _Num_73
  if (_Num_73 != 0)
    goto <bb 38>;
  else
    goto <bb 37>;
;;    succ:       38 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 522, maybe hot
;;    prev block 36, next block 38, flags: (NEW)
;;    pred:       36 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_103 = (long unsigned intD.14) prephitmp_137;
  goto <bb 39>;
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 213, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       36 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _74 = (long unsigned intD.14) prephitmp_137;
  # .MEM_94 = VDEF <.MEM_93>
  # USE = nonlocal null { D.65023 } (escaped heap)
  # CLB = nonlocal null { D.65023 } (escaped heap)
  memmoveD.995 (iftmp.12_113, prephitmp_146, _74);
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       37 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_90 = PHI <.MEM_93(37), .MEM_94(38)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_102 = PHI <pretmp_103(37), _74(38)>
  # DEBUG D#937ptD.0 => (long unsigned intD.14) D#938ptD.0
  # DEBUG __new_finishD.45007 => iftmp.12_113 + D#937ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _25 = __n_2(D) * 4;
  # RANGE [0, 18446744073709551615]
  _133 = _25 + prephitmp_102;
  # PT = null { D.65023 } (escaped heap)
  __new_finish_26 = iftmp.12_113 + _133;
  # DEBUG __new_finishD.45007 => __new_finish_26
  # DEBUG D#694ptD.0 => &this_4(D)->D.35374
  # DEBUG thisD.60869 => D#694ptD.0
  # DEBUG D#936ptD.0 => this_4(D)->D.35374._M_implD.34865._M_finishD.34868
  # DEBUG thisD.60867 => &__positionD.35299
  # DEBUG __firstD.60832 => D#941ptD.0
  # DEBUG __lastD.60833 => D#936ptD.0
  # DEBUG __resultD.60834 => __new_finish_26
  # DEBUG __allocD.60835 => D#690ptD.0
  # DEBUG D#689ptD.0 => D#690ptD.0
  # DEBUG D#686ptD.0 => D#689ptD.0
  # DEBUG __firstD.60839 => D#941ptD.0
  # DEBUG __lastD.60838 => D#936ptD.0
  # DEBUG __resultD.60837 => __new_finish_26
  # DEBUG D.60836 => D#686ptD.0
  # DEBUG __firstD.60842 => D#941ptD.0
  # DEBUG __lastD.60841 => D#936ptD.0
  # DEBUG __resultD.60840 => __new_finish_26
  # DEBUG __assignableD.60845 => 1
  # DEBUG __firstD.60848 => D#941ptD.0
  # DEBUG __lastD.60847 => D#936ptD.0
  # DEBUG __resultD.60846 => __new_finish_26
  # DEBUG __firstD.60851 => D#941ptD.0
  # DEBUG __lastD.60850 => D#936ptD.0
  # DEBUG __resultD.60849 => __new_finish_26
  # DEBUG __itD.60436 => D#936ptD.0
  # DEBUG __itD.54602 => D#936ptD.0
  # DEBUG __itD.60434 => D#941ptD.0
  # DEBUG __itD.54602 => D#941ptD.0
  # DEBUG __firstD.60854 => D#941ptD.0
  # DEBUG __lastD.60853 => D#936ptD.0
  # DEBUG __resultD.60852 => __new_finish_26
  # DEBUG __itD.60416 => __new_finish_26
  # DEBUG __itD.54605 => __new_finish_26
  # DEBUG __itD.60414 => D#936ptD.0
  # DEBUG __itD.54605 => D#936ptD.0
  # DEBUG __itD.60412 => D#941ptD.0
  # DEBUG __itD.54605 => D#941ptD.0
  # DEBUG __firstD.60857 => D#941ptD.0
  # DEBUG __lastD.60856 => D#936ptD.0
  # DEBUG __resultD.60855 => __new_finish_26
  # DEBUG __simpleD.60861 => 1
  # DEBUG __firstD.60864 => D#941ptD.0
  # DEBUG __lastD.60863 => D#936ptD.0
  # DEBUG __resultD.60862 => __new_finish_26
  _66 = prephitmp_121 - _158;
  # RANGE [-2305843009213693952, 2305843009213693951]
  _Num_67 = _66 /[ex] 4;
  # DEBUG _NumD.60865 => _Num_67
  if (_Num_67 != 0)
    goto <bb 41>;
  else
    goto <bb 40>;
;;    succ:       41 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 0, count 0, freq 522, maybe hot
;;    prev block 39, next block 41, flags: (NEW)
;;    pred:       39 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_162 = (long unsigned intD.14) _66;
  goto <bb 42>;
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 41, loop depth 0, count 0, freq 213, maybe hot
;;    prev block 40, next block 42, flags: (NEW, REACHABLE)
;;    pred:       39 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _68 = (long unsigned intD.14) _66;
  # .MEM_95 = VDEF <.MEM_90>
  # USE = nonlocal null { D.65023 } (escaped heap)
  # CLB = nonlocal null { D.65023 } (escaped heap)
  memcpyD.992 (__new_finish_26, __position_16, _68);
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       40 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_91 = PHI <.MEM_90(40), .MEM_95(41)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_163 = PHI <pretmp_162(40), _68(41)>
  # PT = null { D.65023 } (escaped heap)
  _70 = __new_finish_26 + prephitmp_163;
  # DEBUG __new_finishD.45007 => _70
  # DEBUG D#695ptD.0 => &this_4(D)->D.35374
  # DEBUG thisD.60830 => D#695ptD.0
  # DEBUG D#707ptD.0 => this_4(D)->D.35374._M_implD.34865._M_finishD.34868
  # DEBUG D#706ptD.0 => this_4(D)->D.35374._M_implD.34865._M_startD.34867
  # DEBUG __firstD.60827 => D#706ptD.0
  # DEBUG __lastD.60828 => D#707ptD.0
  # DEBUG D.60829 => NULL
  # DEBUG D#150ptD.0 => D#706ptD.0
  # DEBUG D#151ptD.0 => D#707ptD.0
  # DEBUG __firstD.53061 => D#150ptD.0
  # DEBUG __lastD.53060 => D#151ptD.0
  # DEBUG D#149ptD.0 => D#151ptD.0
  # DEBUG D#148ptD.0 => D#150ptD.0
  # DEBUG D#146ptD.0 => D#148ptD.0
  # DEBUG D#147ptD.0 => D#149ptD.0
  # DEBUG D.53050 => D#146ptD.0
  # DEBUG D.53049 => D#147ptD.0
  # DEBUG D#705ptD.0 => this_4(D)->D.35374._M_implD.34865._M_end_of_storageD.34869
  # DEBUG D#704ptD.0 => (long intD.12) D#705ptD.0
  # DEBUG D#703ptD.0 => (long intD.12) D#940ptD.0
  # DEBUG D#702ptD.0 => D#704ptD.0 - D#703ptD.0
  # DEBUG D#701ptD.0 => D#702ptD.0 /[ex] 4
  # DEBUG D#700ptD.0 => (long unsigned intD.14) D#701ptD.0
  # DEBUG D#699ptD.0 => &this_4(D)->D.35374
  # DEBUG thisD.60817 => D#699ptD.0
  # DEBUG __pD.60818 => D#940ptD.0
  # DEBUG __nD.60819 => D#700ptD.0
  if (prephitmp_146 != 0B)
    goto <bb 43>;
  else
    goto <bb 44>;
;;    succ:       43 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 43, loop depth 0, count 0, freq 513, maybe hot
;;    prev block 42, next block 44, flags: (NEW, REACHABLE)
;;    pred:       42 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#237ptD.0 => &D#699ptD.0->_M_implD.34865
  # DEBUG D#235ptD.0 => D#237ptD.0
  # DEBUG D#236ptD.0 => D#700ptD.0
  # DEBUG __pD.60823 => D#940ptD.0
  # DEBUG __aD.60821 => D#235ptD.0
  # DEBUG __nD.60822 => D#236ptD.0
  # DEBUG D#234ptD.0 => D#236ptD.0
  # DEBUG D#233ptD.0 => D#235ptD.0
  # DEBUG D#231ptD.0 => D#233ptD.0
  # DEBUG D#232ptD.0 => D#234ptD.0
  # DEBUG __pD.60826 => D#940ptD.0
  # DEBUG thisD.60824 => D#231ptD.0
  # DEBUG D.60825 => D#232ptD.0
  # .MEM_96 = VDEF <.MEM_91>
  # USE = nonlocal null { D.65023 } (escaped heap)
  # CLB = nonlocal null { D.65023 } (escaped heap)
  _ZdlPvD.2766 (prephitmp_146);
;;    succ:       44 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 44, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 43, next block 45, flags: (NEW, REACHABLE)
;;    pred:       43 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                42 [30.2%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_92 = PHI <.MEM_96(43), .MEM_91(42)>
  # .MEM_30 = VDEF <.MEM_92>
  this_4(D)->D.35374._M_implD.34865._M_startD.34867 = iftmp.12_113;
  # .MEM_31 = VDEF <.MEM_30>
  this_4(D)->D.35374._M_implD.34865._M_finishD.34868 = _70;
  # .MEM_34 = VDEF <.MEM_31>
  this_4(D)->D.35374._M_implD.34865._M_end_of_storageD.34869 = prephitmp_148;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 45, loop depth 0, count 0, freq 4156, maybe hot
;;    prev block 44, next block 46, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                44 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_172(3), .MEM_34(44)>
  # VUSE <.MEM_1>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 46, loop depth 0, count 0, freq 654, maybe hot
;;   Invalid sum of incoming frequencies 492, should be 654
;;    prev block 45, next block 47, flags: (NEW, REACHABLE)
;;    pred:       30 [67.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __lenD.45003 => NULL
  # DEBUG thisD.60937 => this_4(D)
  # DEBUG D#156ptD.0 => &this_4(D)->D.35374._M_implD.34865._M_startD.34867
  # DEBUG thisD.60939 => NULL
  # DEBUG __iD.60938 => D#156ptD.0
  # DEBUG __lhsD.60934 => &__positionD.35299
  # DEBUG __rhsD.60935 => &D.45005
  # DEBUG thisD.53082 => &__positionD.35299
  _144 = (long intD.12) __position_16;
  # DEBUG thisD.53080 => &D.45005
  _143 = _144 - _116;
  # DEBUG D#709ptD.0 => _143 /[ex] 4
  # DEBUG __elems_beforeD.45004 => (const size_typeD.34950) D#709ptD.0
  # DEBUG D#708ptD.0 => &this_4(D)->D.35374
  # DEBUG D#497ptD.0 => D#708ptD.0
  # DEBUG __nD.65002 => NULL
  # DEBUG thisD.65003 => D#497ptD.0
  # DEBUG D#496ptD.0 => D#497ptD.0
  goto <bb 32>;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 47, loop depth 0, count 0, freq 80, maybe hot
;;   Invalid sum of incoming frequencies 243, should be 80
;;    prev block 46, next block 1, flags: (NEW, REACHABLE)
;;    pred:       30 [33.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __lenD.45003 => NULL
  # DEBUG thisD.60937 => this_4(D)
  # DEBUG D#156ptD.0 => &this_4(D)->D.35374._M_implD.34865._M_startD.34867
  # DEBUG thisD.60939 => NULL
  # DEBUG __iD.60938 => D#156ptD.0
  # DEBUG __lhsD.60934 => &__positionD.35299
  # DEBUG __rhsD.60935 => &D.45005
  # DEBUG thisD.53082 => &__positionD.35299
  _151 = (long intD.12) __position_16;
  # DEBUG thisD.53080 => &D.45005
  _150 = _151 - _116;
  # DEBUG D#709ptD.0 => _150 /[ex] 4
  # DEBUG __elems_beforeD.45004 => (const size_typeD.34950) D#709ptD.0
  # DEBUG D#708ptD.0 => &this_4(D)->D.35374
  # DEBUG D#497ptD.0 => D#708ptD.0
  # DEBUG __nD.65002 => NULL
  # DEBUG thisD.65003 => D#497ptD.0
  # DEBUG D#496ptD.0 => D#497ptD.0
  if (__len_124 != 0)
    goto <bb 31>;
  else
    goto <bb 33>;
;;    succ:       31 [9.4%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [90.6%]  (FALSE_VALUE,EXECUTABLE)

}


Creating dr for MEM[(struct __normal_iterator *)&__position]
analyze_innermost: success.
	base_address: &__position
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct __normal_iterator *)&__position]
Creating dr for this_4(D)->D.35374._M_impl._M_end_of_storage
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 128
	Access function 1: 0
	Access function 2: 0
Creating dr for this_4(D)->D.35374._M_impl._M_finish
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 64
	Access function 1: 0
	Access function 2: 0
Creating dr for *__x_21(D)
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *__x_21(D)
Creating dr for this_4(D)->D.35374._M_impl._M_finish
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 64
	Access function 1: 0
	Access function 2: 0
Creating dr for *__position_109
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__position_16
	Access function 0: {0B, +, 4}_1
Creating dr for *__position_109
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__position_16
	Access function 0: {0B, +, 4}_1
Creating dr for *__position_109
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__position_16
	Access function 0: {0B, +, 4}_1
Creating dr for *__position_109
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__position_16
	Access function 0: {0B, +, 4}_1
Analyzing # of iterations of loop 1
  exit condition [__position_16 + 4, + , 4](no_overflow) != _48
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551611
Applying pattern match.pd:114, generic-match.c:6953
  result:
    # of iterations ((unsigned long) _48 - (unsigned long) (__position_16 + 4)) /[ex] 4 & 4611686018427387903, bounded by 4611686018427387902
Analyzing # of iterations of loop 1
  exit condition [__position_16 + 4, + , 4](no_overflow) != _48
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551611
Applying pattern match.pd:114, generic-match.c:6953
  result:
    # of iterations ((unsigned long) _48 - (unsigned long) (__position_16 + 4)) /[ex] 4 & 4611686018427387903, bounded by 4611686018427387902
Creating dr for *__position_109
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__position_16
	Access function 0: {0B, +, 4}_1
Creating dr for *__position_109
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__position_16
	Access function 0: {0B, +, 4}_1
Creating dr for *__position_109
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__position_16
	Access function 0: {0B, +, 4}_1
Creating dr for *__position_109
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__position_16
	Access function 0: {0B, +, 4}_1
Analyzing # of iterations of loop 1
  exit condition [__position_16 + 4, + , 4](no_overflow) != _48
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551611
Applying pattern match.pd:114, generic-match.c:6953
  result:
    # of iterations ((unsigned long) _48 - (unsigned long) (__position_16 + 4)) /[ex] 4 & 4611686018427387903, bounded by 4611686018427387902
Applying pattern match.pd:725, generic-match.c:1428
Creating dr for *__first_76
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_7
	Access function 0: {0B, +, 4}_3
Creating dr for *__first_76
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_7
	Access function 0: {0B, +, 4}_3
Creating dr for *__first_76
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_7
	Access function 0: {0B, +, 4}_3
Creating dr for *__first_76
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_7
	Access function 0: {0B, +, 4}_3
Analyzing # of iterations of loop 3
  exit condition [__n_50 + 18446744073709551615, + , 18446744073709551615] != 0
  bounds on difference of bases: -18446744073709551615 ... 0
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations __n_50 + 18446744073709551615, bounded by 0x0ffffffffffffffff
Creating dr for *__first_76
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_7
	Access function 0: {0B, +, 4}_3
Creating dr for *__first_76
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_7
	Access function 0: {0B, +, 4}_3
Creating dr for *__first_76
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_7
	Access function 0: {0B, +, 4}_3
Creating dr for *__first_76
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_7
	Access function 0: {0B, +, 4}_3
Analyzing # of iterations of loop 3
  exit condition [__n_50 + 18446744073709551615, + , 18446744073709551615] != 0
  bounds on difference of bases: -18446744073709551615 ... 0
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations __n_50 + 18446744073709551615, bounded by 0x0ffffffffffffffff
Creating dr for this_4(D)->D.35374._M_impl._M_finish
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 64
	Access function 1: 0
	Access function 2: 0
Creating dr for this_4(D)->D.35374._M_impl._M_finish
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 64
	Access function 1: 0
	Access function 2: 0
Creating dr for *__position_110
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__position_16
	Access function 0: {0B, +, 4}_2
Creating dr for *__position_110
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__position_16
	Access function 0: {0B, +, 4}_2
Creating dr for *__position_110
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__position_16
	Access function 0: {0B, +, 4}_2
Creating dr for *__position_110
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__position_16
	Access function 0: {0B, +, 4}_2
Analyzing # of iterations of loop 2
  exit condition [__position_16 + 4, + , 4](no_overflow) != __first_7
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551611
Applying pattern match.pd:114, generic-match.c:6953
  result:
    # of iterations ((unsigned long) __first_7 - (unsigned long) (__position_16 + 4)) /[ex] 4 & 4611686018427387903, bounded by 4611686018427387902
Analyzing # of iterations of loop 2
  exit condition [__position_16 + 4, + , 4](no_overflow) != __first_7
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551611
Applying pattern match.pd:114, generic-match.c:6953
  result:
    # of iterations ((unsigned long) __first_7 - (unsigned long) (__position_16 + 4)) /[ex] 4 & 4611686018427387903, bounded by 4611686018427387902
Creating dr for *__position_110
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__position_16
	Access function 0: {0B, +, 4}_2
Creating dr for *__position_110
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__position_16
	Access function 0: {0B, +, 4}_2
Creating dr for *__position_110
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__position_16
	Access function 0: {0B, +, 4}_2
Creating dr for *__position_110
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__position_16
	Access function 0: {0B, +, 4}_2
Analyzing # of iterations of loop 2
  exit condition [__position_16 + 4, + , 4](no_overflow) != __first_7
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551611
Applying pattern match.pd:114, generic-match.c:6953
  result:
    # of iterations ((unsigned long) __first_7 - (unsigned long) (__position_16 + 4)) /[ex] 4 & 4611686018427387903, bounded by 4611686018427387902
Creating dr for MEM[(int * *)this_4(D)]
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_4(D)]
Applying pattern match.pd:725, generic-match.c:1428
Applying pattern match.pd:725, generic-match.c:1428
Creating dr for MEM[(const int &)__x_21(D)]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__x_21(D)]
Creating dr for *__first_155
analyze_innermost: success.
	base_address: iftmp.12_113 + (long unsigned int) _153
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *iftmp.12_113 + (long unsigned int) _153
	Access function 0: {0B, +, 4}_4
Creating dr for *__first_155
analyze_innermost: success.
	base_address: iftmp.12_113 + (long unsigned int) _153
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *iftmp.12_113 + (long unsigned int) _153
	Access function 0: {0B, +, 4}_4
Creating dr for *__first_155
analyze_innermost: success.
	base_address: iftmp.12_113 + (long unsigned int) _153
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *iftmp.12_113 + (long unsigned int) _153
	Access function 0: {0B, +, 4}_4
Creating dr for *__first_155
analyze_innermost: success.
	base_address: iftmp.12_113 + (long unsigned int) _153
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *iftmp.12_113 + (long unsigned int) _153
	Access function 0: {0B, +, 4}_4
Analyzing # of iterations of loop 4
  exit condition [__n_2(D) + 18446744073709551615, + , 18446744073709551615] != 0
  bounds on difference of bases: -18446744073709551615 ... 0
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations __n_2(D) + 18446744073709551615, bounded by 0x0ffffffffffffffff
Creating dr for *__first_155
analyze_innermost: success.
	base_address: iftmp.12_113 + (long unsigned int) _153
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *iftmp.12_113 + (long unsigned int) _153
	Access function 0: {0B, +, 4}_4
Creating dr for *__first_155
analyze_innermost: success.
	base_address: iftmp.12_113 + (long unsigned int) _153
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *iftmp.12_113 + (long unsigned int) _153
	Access function 0: {0B, +, 4}_4
Creating dr for *__first_155
analyze_innermost: success.
	base_address: iftmp.12_113 + (long unsigned int) _153
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *iftmp.12_113 + (long unsigned int) _153
	Access function 0: {0B, +, 4}_4
Creating dr for *__first_155
analyze_innermost: success.
	base_address: iftmp.12_113 + (long unsigned int) _153
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *iftmp.12_113 + (long unsigned int) _153
	Access function 0: {0B, +, 4}_4
Analyzing # of iterations of loop 4
  exit condition [__n_2(D) + 18446744073709551615, + , 18446744073709551615] != 0
  bounds on difference of bases: -18446744073709551615 ... 0
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations __n_2(D) + 18446744073709551615, bounded by 0x0ffffffffffffffff
Creating dr for this_4(D)->D.35374._M_impl._M_start
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 0
	Access function 1: 0
	Access function 2: 0
Creating dr for this_4(D)->D.35374._M_impl._M_finish
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 64
	Access function 1: 0
	Access function 2: 0
Creating dr for this_4(D)->D.35374._M_impl._M_end_of_storage
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 128
	Access function 1: 0
	Access function 2: 0

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:18)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:39)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:56, LOOPS:4, CONDITIONS:19, STMTS:600)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_4 bb_3 })
  {
    <bb 2>:
    # DEBUG D#941 => MEM[(struct __normal_iterator *)&__position]
    # DEBUG __position => D#941
    if (__n_2(D) != 0)
      goto <bb 4>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 bb_10 bb_48 bb_23 bb_49 }, succs = {bb_55 })
  {
    <bb 3>:
    # .MEM_172 = PHI <.MEM_3(D)(2), .MEM_12(10), .MEM_13(48), .MEM_54(23), .MEM_154(49)>

  }
  bb_55 (preds = {bb_3 }, succs = {bb_45 })
  {
    <bb 55>:
    goto <bb 45>;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 bb_28 })
  {
    <bb 4>:
    # VUSE <.MEM_3(D)>
    __position_16 = MEM[(struct __normal_iterator *)&__position];
    # VUSE <.MEM_3(D)>
    _5 = this_4(D)->D.35374._M_impl._M_end_of_storage;
    _6 = (long int) _5;
    # VUSE <.MEM_3(D)>
    __first_7 = this_4(D)->D.35374._M_impl._M_finish;
    _8 = (long int) __first_7;
    _9 = _6 - _8;
    _10 = _9 /[ex] 4;
    _11 = (long unsigned int) _10;
    if (__n_2(D) <= _11)
      goto <bb 5>;
    else
      goto <bb 28>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_6 bb_15 })
  {
    <bb 5>:
    # VUSE <.MEM_3(D)>
    __x_copy_35 = *__x_21(D);
    # DEBUG __x_copy => __x_copy_35
    # DEBUG this => this_4(D)
    # DEBUG D#100 => &this_4(D)->D.35374._M_impl._M_finish
    # DEBUG this => NULL
    # DEBUG __i => D#100
    # DEBUG __lhs => &D.44972
    # DEBUG __rhs => &__position
    # DEBUG this => &D.44972
    # DEBUG this => &__position
    _27 = (long int) __position_16;
    _23 = _8 - _27;
    _22 = _23 /[ex] 4;
    __elems_after_37 = (const size_type) _22;
    # DEBUG __elems_after => __elems_after_37
    # DEBUG __old_finish => __first_7
    if (__n_2(D) < __elems_after_37)
      goto <bb 6>;
    else
      goto <bb 15>;

  }
  bb_6 (preds = {bb_5 }, succs = {bb_7 bb_8 })
  {
    <bb 6>:
    # DEBUG D#696 => &this_4(D)->D.35374
    # DEBUG this => D#696
    _39 = __n_2(D) * 4;
    _40 = -_39;
    _41 = __first_7 + _40;
    # DEBUG __first => _41
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    # DEBUG __alloc => D#688
    # DEBUG D#687 => D#688
    # DEBUG D#686 => D#687
    # DEBUG __first => _41
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    # DEBUG D.60711 => D#686
    # DEBUG __first => _41
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    # DEBUG __assignable => 1
    # DEBUG __first => _41
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    # DEBUG __first => _41
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => _41
    # DEBUG __it => _41
    # DEBUG __first => _41
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => _41
    # DEBUG __it => _41
    # DEBUG __first => _41
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    # DEBUG __simple => 1
    # DEBUG __first => _41
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    __first.7_49 = (long int) _41;
    _47 = _8 - __first.7_49;
    _Num_45 = _47 /[ex] 4;
    # DEBUG _Num => _Num_45
    if (_Num_45 != 0)
      goto <bb 7>;
    else
      goto <bb 8>;

  }
  bb_7 (preds = {bb_6 }, succs = {bb_8 })
  {
    <bb 7>:
    _38 = (long unsigned int) _47;
    # .MEM_97 = VDEF <.MEM_3(D)>
    __builtin_memmove (__first_7, _41, _38);
    # VUSE <.MEM_97>
    pretmp_173 = this_4(D)->D.35374._M_impl._M_finish;

  }
  bb_8 (preds = {bb_6 bb_7 }, succs = {bb_9 bb_10 })
  {
    <bb 8>:
    # .MEM_14 = PHI <.MEM_3(D)(6), .MEM_97(7)>
    # prephitmp_174 = PHI <__first_7(6), pretmp_173(7)>
    _43 = prephitmp_174 + _39;
    # .MEM_44 = VDEF <.MEM_14>
    this_4(D)->D.35374._M_impl._M_finish = _43;
    # DEBUG this => &__position
    # DEBUG __first => D#941
    # DEBUG __last => _41
    # DEBUG __result => __first_7
    # DEBUG __it => _41
    # DEBUG __it => _41
    # DEBUG __it => D#941
    # DEBUG __it => D#941
    # DEBUG __first => D#941
    # DEBUG __last => _41
    # DEBUG __result => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => _41
    # DEBUG __it => _41
    # DEBUG __it => D#941
    # DEBUG __it => D#941
    # DEBUG __first => D#941
    # DEBUG __last => _41
    # DEBUG __result => __first_7
    # DEBUG __simple => 1
    # DEBUG __first => D#941
    # DEBUG __last => _41
    # DEBUG __result => __first_7
    _104 = __first.7_49 - _27;
    _Num_105 = _104 /[ex] 4;
    # DEBUG _Num => _Num_105
    if (_Num_105 != 0)
      goto <bb 9>;
    else
      goto <bb 10>;

  }
  bb_9 (preds = {bb_8 }, succs = {bb_10 })
  {
    <bb 9>:
    _106 = (long unsigned int) _104;
    _107 = -_106;
    _108 = __first_7 + _107;
    # .MEM_135 = VDEF <.MEM_44>
    __builtin_memmove (_108, __position_16, _106);

  }
  bb_10 (preds = {bb_8 bb_9 }, succs = {bb_3 bb_11 })
  {
    <bb 10>:
    # .MEM_12 = PHI <.MEM_44(8), .MEM_135(9)>
    # DEBUG this => &__position
    _48 = __position_16 + _39;
    # DEBUG this => &__position
    # DEBUG D#365 => &__x_copy
    # DEBUG __first => D#941
    # DEBUG __last => _48
    # DEBUG D#364 => D#365
    # DEBUG __value => D#364
    # DEBUG __it => _48
    # DEBUG __it => _48
    # DEBUG __it => D#941
    # DEBUG __it => D#941
    # DEBUG D#251 => D#364
    # DEBUG __first => D#941
    # DEBUG __last => _48
    # DEBUG __value => D#251
    # DEBUG __tmp => __x_copy_35
    # DEBUG __first => D#941
    if (__position_16 == _48)
      goto <bb 3>;
    else
      goto <bb 11>;

  }
  bb_11 (preds = {bb_10 }, succs = {bb_12 })
  {
    <bb 11>:

  }
  bb_13 (preds = {bb_12 }, succs = {bb_48 })
  {
    <bb 13>:
    # .MEM_13 = PHI <.MEM_98(12)>

  }
  bb_48 (preds = {bb_13 }, succs = {bb_3 })
  {
    <bb 48>:
    goto <bb 3>;

  }
  bb_15 (preds = {bb_5 }, succs = {bb_20 bb_16 })
  {
    <bb 15>:
    # DEBUG D#697 => &this_4(D)->D.35374
    # DEBUG this => D#697
    __n_50 = __n_2(D) - __elems_after_37;
    # DEBUG D#373 => &__x_copy
    # DEBUG __first => __first_7
    # DEBUG __n => __n_50
    # DEBUG D#372 => D#373
    # DEBUG __x => D#372
    # DEBUG D.60796 => D#374
    # DEBUG D#371 => D#372
    # DEBUG __first => __first_7
    # DEBUG __n => __n_50
    # DEBUG D#370 => D#371
    # DEBUG __x => D#370
    # DEBUG __assignable => 1
    # DEBUG D#369 => D#370
    # DEBUG __first => __first_7
    # DEBUG __n => __n_50
    # DEBUG D#368 => D#369
    # DEBUG __x => D#368
    # DEBUG D#367 => D#368
    # DEBUG __first => __first_7
    # DEBUG __n => __n_50
    # DEBUG D#366 => D#367
    # DEBUG __value => D#366
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG D#258 => D#366
    # DEBUG __first => __first_7
    # DEBUG __n => __n_50
    # DEBUG __value => D#258
    # DEBUG __tmp => __x_copy_35
    # DEBUG __niter => __n_50
    # DEBUG __niter => __n_50
    # DEBUG __first => __first_7
    if (__n_50 == 0)
      goto <bb 20>;
    else
      goto <bb 16>;

  }
  bb_16 (preds = {bb_15 }, succs = {bb_17 })
  {
    <bb 16>:

  }
  bb_18 (preds = {bb_17 }, succs = {bb_50 })
  {
    <bb 18>:

  }
  bb_50 (preds = {bb_18 }, succs = {bb_20 })
  {
    <bb 50>:
    _160 = __n_50 * 4;
    __first_123 = __first_7 + _160;
    goto <bb 20>;

  }
  bb_20 (preds = {bb_50 bb_15 }, succs = {bb_22 bb_21 })
  {
    <bb 20>:
    # __first_125 = PHI <__first_123(50), __first_7(15)>
    # .MEM_84 = PHI <.MEM_99(50), .MEM_3(D)(15)>
    # .MEM_51 = VDEF <.MEM_84>
    this_4(D)->D.35374._M_impl._M_finish = __first_125;
    # DEBUG D#698 => &this_4(D)->D.35374
    # DEBUG this => D#698
    # DEBUG this => &__position
    # DEBUG __first => D#941
    # DEBUG __last => __first_7
    # DEBUG __result => __first_125
    # DEBUG __alloc => D#688
    # DEBUG D#687 => D#688
    # DEBUG D#686 => D#687
    # DEBUG __first => D#941
    # DEBUG __last => __first_7
    # DEBUG __result => __first_125
    # DEBUG D.60758 => D#686
    # DEBUG __first => D#941
    # DEBUG __last => __first_7
    # DEBUG __result => __first_125
    # DEBUG __assignable => 1
    # DEBUG __first => D#941
    # DEBUG __last => __first_7
    # DEBUG __result => __first_125
    # DEBUG __first => D#941
    # DEBUG __last => __first_7
    # DEBUG __result => __first_125
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => D#941
    # DEBUG __it => D#941
    # DEBUG __first => D#941
    # DEBUG __last => __first_7
    # DEBUG __result => __first_125
    # DEBUG __it => __first_125
    # DEBUG __it => __first_125
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => D#941
    # DEBUG __it => D#941
    # DEBUG __first => D#941
    # DEBUG __last => __first_7
    # DEBUG __result => __first_125
    # DEBUG __simple => 1
    # DEBUG __first => D#941
    # DEBUG __last => __first_7
    # DEBUG __result => __first_125
    # DEBUG _Num => _22
    if (_22 != 0)
      goto <bb 22>;
    else
      goto <bb 21>;

  }
  bb_21 (preds = {bb_20 }, succs = {bb_23 })
  {
    <bb 21>:
    pretmp_168 = (long unsigned int) _23;
    goto <bb 23>;

  }
  bb_22 (preds = {bb_20 }, succs = {bb_23 })
  {
    <bb 22>:
    _59 = (long unsigned int) _23;
    # .MEM_100 = VDEF <.MEM_51>
    __builtin_memmove (__first_125, __position_16, _59);
    # VUSE <.MEM_100>
    pretmp_166 = this_4(D)->D.35374._M_impl._M_finish;

  }
  bb_23 (preds = {bb_21 bb_22 }, succs = {bb_3 bb_24 })
  {
    <bb 23>:
    # .MEM_87 = PHI <.MEM_51(21), .MEM_100(22)>
    # prephitmp_167 = PHI <__first_125(21), pretmp_166(22)>
    # prephitmp_169 = PHI <pretmp_168(21), _59(22)>
    _53 = prephitmp_167 + prephitmp_169;
    # .MEM_54 = VDEF <.MEM_87>
    this_4(D)->D.35374._M_impl._M_finish = _53;
    # DEBUG this => &__position
    # DEBUG D#365 => &__x_copy
    # DEBUG __first => D#941
    # DEBUG __last => __first_7
    # DEBUG D#364 => D#365
    # DEBUG __value => D#364
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => D#941
    # DEBUG __it => D#941
    # DEBUG D#251 => D#364
    # DEBUG __first => D#941
    # DEBUG __last => __first_7
    # DEBUG __value => D#251
    # DEBUG __tmp => __x_copy_35
    # DEBUG __first => D#941
    if (__first_7 == __position_16)
      goto <bb 3>;
    else
      goto <bb 24>;

  }
  bb_24 (preds = {bb_23 }, succs = {bb_25 })
  {
    <bb 24>:

  }
  bb_26 (preds = {bb_25 }, succs = {bb_49 })
  {
    <bb 26>:
    # .MEM_154 = PHI <.MEM_101(25)>

  }
  bb_49 (preds = {bb_26 }, succs = {bb_3 })
  {
    <bb 49>:
    goto <bb 3>;

  }
  bb_28 (preds = {bb_4 }, succs = {bb_29 bb_30 })
  {
    <bb 28>:
    # DEBUG this => this_4(D)
    # DEBUG __n => __n_2(D)
    # DEBUG __n => __n_2(D)
    # DEBUG __s => "vector::_M_fill_insert"
    # DEBUG D#489 => this_4(D)
    # DEBUG this => D#489
    # DEBUG D#488 => D#489
    # DEBUG D#487 => &D#488->D.35374
    # DEBUG this => D#487
    # DEBUG __a => D#486
    # DEBUG D#485 => D#486
    # DEBUG D#484 => D#485
    # DEBUG this => D#484
    # VUSE <.MEM_3(D)>
    _17 = MEM[(int * *)this_4(D)];
    # DEBUG D#87 => this_4(D)
    # DEBUG D#87 => this_4(D)
    # DEBUG this => D#87
    # DEBUG this => D#87
    _116 = (long int) _17;
    _117 = _8 - _116;
    _118 = _117 /[ex] 4;
    _119 = (const long unsigned int) _118;
    _120 = 4611686018427387903 - _119;
    if (__n_2(D) > _120)
      goto <bb 29>;
    else
      goto <bb 30>;

  }
  bb_29 (preds = {bb_28 }, succs = {})
  {
    <bb 29>:
    # .MEM_134 = VDEF <.MEM_3(D)>
    std::__throw_length_error ("vector::_M_fill_insert");

  }
  bb_30 (preds = {bb_28 }, succs = {bb_46 bb_47 })
  {
    <bb 30>:
    # DEBUG D#87 => this_4(D)
    # DEBUG D#87 => this_4(D)
    # DEBUG this => D#87
    # DEBUG this => D#87
    # DEBUG D#87 => this_4(D)
    # DEBUG D#87 => this_4(D)
    # DEBUG this => D#87
    # DEBUG this => D#87
    # DEBUG __a => &D.65020
    # DEBUG __b => &__n
    _77 = MAX_EXPR <__n_2(D), _119>;
    __len_124 = _77 + _119;
    # DEBUG __len => __len_124
    # DEBUG D#87 => this_4(D)
    # DEBUG D#87 => this_4(D)
    # DEBUG this => D#87
    # DEBUG this => D#87
    # DEBUG D#489 => this_4(D)
    # DEBUG this => D#489
    # DEBUG D#488 => D#489
    # DEBUG D#487 => &D#488->D.35374
    # DEBUG this => D#487
    # DEBUG __a => D#486
    # DEBUG D#485 => D#486
    # DEBUG D#484 => D#485
    # DEBUG this => D#484
    _152 = __len_124 > 4611686018427387903;
    _142 = _119 > __len_124;
    _114 = _142 | _152;
    if (_114 != 0)
      goto <bb 46>;
    else
      goto <bb 47>;

  }
  bb_31 (preds = {bb_47 }, succs = {bb_32 })
  {
    <bb 31>:
    pretmp_164 = __len_124 * 4;

  }
  bb_32 (preds = {bb_46 bb_31 }, succs = {bb_33 })
  {
    <bb 32>:
    # _156 = PHI <_144(46), _151(31)>
    # _157 = PHI <_143(46), _150(31)>
    # prephitmp_165 = PHI <18446744073709551612(46), pretmp_164(31)>
    # DEBUG __len => NULL
    # DEBUG this => this_4(D)
    # DEBUG D#156 => &this_4(D)->D.35374._M_impl._M_start
    # DEBUG this => NULL
    # DEBUG __i => D#156
    # DEBUG __lhs => &__position
    # DEBUG __rhs => &D.45005
    # DEBUG this => &__position
    # DEBUG this => &D.45005
    # DEBUG D#709 => _157 /[ex] 4
    # DEBUG __elems_before => (const size_type) D#709
    # DEBUG D#708 => &this_4(D)->D.35374
    # DEBUG D#497 => D#708
    # DEBUG __n => NULL
    # DEBUG this => D#497
    # DEBUG D#496 => D#497
    # DEBUG D#495 => &D#496->_M_impl
    # DEBUG D#494 => D#495
    # DEBUG __n => NULL
    # DEBUG __a => D#494
    # DEBUG D#493 => D#494
    # DEBUG D#491 => D#493
    # DEBUG D#492 => 0B
    # DEBUG __n => NULL
    # DEBUG this => D#491
    # DEBUG D.65008 => D#492
    # DEBUG D#490 => D#491
    # DEBUG D#484 => D#490
    # DEBUG this => D#484
    # .MEM_131 = VDEF <.MEM_3(D)>
    _112 = operator new (prephitmp_165);
    # VUSE <.MEM_131>
    pretmp_29 = this_4(D)->D.35374._M_impl._M_start;
    # VUSE <.MEM_131>
    pretmp_147 = this_4(D)->D.35374._M_impl._M_finish;
    pretmp_149 = _112 + prephitmp_165;
    pretmp_145 = (long int) pretmp_147;
    pretmp_138 = (long int) pretmp_29;
    pretmp_140 = _156 - pretmp_138;

  }
  bb_33 (preds = {bb_47 bb_32 }, succs = {bb_52 })
  {
    <bb 33>:
    # iftmp.12_113 = PHI <0B(47), _112(32)>
    # .MEM_126 = PHI <.MEM_3(D)(47), .MEM_131(32)>
    # _158 = PHI <_151(47), _156(32)>
    # _153 = PHI <_150(47), _157(32)>
    # prephitmp_146 = PHI <_17(47), pretmp_29(32)>
    # prephitmp_148 = PHI <0B(47), pretmp_149(32)>
    # prephitmp_121 = PHI <_8(47), pretmp_145(32)>
    # prephitmp_137 = PHI <_150(47), pretmp_140(32)>

  }
  bb_52 (preds = {bb_33 }, succs = {bb_34 })
  {
    <bb 52>:
    # DEBUG __new_start => NULL
    # DEBUG __new_finish => NULL
    # DEBUG D#692 => &this_4(D)->D.35374
    # DEBUG this => D#692
    _19 = (long unsigned int) _153;
    __first_20 = iftmp.12_113 + _19;
    # VUSE <.MEM_126>
    _56 = MEM[(const int &)__x_21(D)];
    # DEBUG D#373 => __x_21(D)
    # DEBUG __first => __first_20
    # DEBUG __n => __n_2(D)
    # DEBUG D#372 => D#373
    # DEBUG __x => D#372
    # DEBUG D.60913 => D#374
    # DEBUG D#371 => D#372
    # DEBUG __first => __first_20
    # DEBUG __n => __n_2(D)
    # DEBUG D#370 => D#371
    # DEBUG __x => D#370
    # DEBUG __assignable => 1
    # DEBUG D#369 => D#370
    # DEBUG __first => __first_20
    # DEBUG __n => __n_2(D)
    # DEBUG D#368 => D#369
    # DEBUG __x => D#368
    # DEBUG D#367 => D#368
    # DEBUG __first => __first_20
    # DEBUG __n => __n_2(D)
    # DEBUG D#366 => D#367
    # DEBUG __value => D#366
    # DEBUG __it => __first_20
    # DEBUG __it => __first_20
    # DEBUG D#258 => D#366
    # DEBUG __first => __first_20
    # DEBUG __n => __n_2(D)
    # DEBUG __value => D#258
    # DEBUG __tmp => _56
    # DEBUG __niter => __n_2(D)
    # DEBUG __niter => __n_2(D)
    # DEBUG __first => __first_20

  }
  bb_36 (preds = {bb_34 }, succs = {bb_51 })
  {
    <bb 36>:

  }
  bb_51 (preds = {bb_36 }, succs = {bb_38 bb_37 })
  {
    <bb 51>:
    # DEBUG __new_finish => 0B
    # DEBUG D#693 => &this_4(D)->D.35374
    # DEBUG this => D#693
    # DEBUG this => &__position
    # DEBUG D#940 => this_4(D)->D.35374._M_impl._M_start
    # DEBUG __first => D#940
    # DEBUG __last => D#941
    # DEBUG __result => NULL
    # DEBUG __alloc => D#690
    # DEBUG D#689 => D#690
    # DEBUG D#686 => D#689
    # DEBUG __first => D#940
    # DEBUG __last => D#941
    # DEBUG __result => NULL
    # DEBUG D.60875 => D#686
    # DEBUG __first => D#940
    # DEBUG __last => D#941
    # DEBUG __result => NULL
    # DEBUG __assignable => 1
    # DEBUG __first => D#940
    # DEBUG __last => D#941
    # DEBUG __result => NULL
    # DEBUG __first => D#940
    # DEBUG __last => D#941
    # DEBUG __result => NULL
    # DEBUG __it => D#941
    # DEBUG __it => D#941
    # DEBUG __it => D#940
    # DEBUG __it => D#940
    # DEBUG __first => D#940
    # DEBUG __last => D#941
    # DEBUG __result => NULL
    # DEBUG __it => NULL
    # DEBUG __it => NULL
    # DEBUG __it => D#941
    # DEBUG __it => D#941
    # DEBUG __it => D#940
    # DEBUG __it => D#940
    # DEBUG __first => D#940
    # DEBUG __last => D#941
    # DEBUG __result => NULL
    # DEBUG __simple => 1
    # DEBUG __first => D#940
    # DEBUG __last => D#941
    # DEBUG __result => NULL
    # DEBUG D#939 => (long int) D#940
    # DEBUG D#938 => _158 - D#939
    _Num_73 = prephitmp_137 /[ex] 4;
    # DEBUG _Num => _Num_73
    if (_Num_73 != 0)
      goto <bb 38>;
    else
      goto <bb 37>;

  }
  bb_37 (preds = {bb_51 }, succs = {bb_39 })
  {
    <bb 37>:
    pretmp_103 = (long unsigned int) prephitmp_137;
    goto <bb 39>;

  }
  bb_38 (preds = {bb_51 }, succs = {bb_39 })
  {
    <bb 38>:
    _74 = (long unsigned int) prephitmp_137;
    # .MEM_94 = VDEF <.MEM_93>
    __builtin_memmove (iftmp.12_113, prephitmp_146, _74);

  }
  bb_39 (preds = {bb_37 bb_38 }, succs = {bb_41 bb_40 })
  {
    <bb 39>:
    # .MEM_90 = PHI <.MEM_93(37), .MEM_94(38)>
    # prephitmp_102 = PHI <pretmp_103(37), _74(38)>
    # DEBUG D#937 => (long unsigned int) D#938
    # DEBUG __new_finish => iftmp.12_113 + D#937
    _25 = __n_2(D) * 4;
    _133 = _25 + prephitmp_102;
    __new_finish_26 = iftmp.12_113 + _133;
    # DEBUG __new_finish => __new_finish_26
    # DEBUG D#694 => &this_4(D)->D.35374
    # DEBUG this => D#694
    # DEBUG D#936 => this_4(D)->D.35374._M_impl._M_finish
    # DEBUG this => &__position
    # DEBUG __first => D#941
    # DEBUG __last => D#936
    # DEBUG __result => __new_finish_26
    # DEBUG __alloc => D#690
    # DEBUG D#689 => D#690
    # DEBUG D#686 => D#689
    # DEBUG __first => D#941
    # DEBUG __last => D#936
    # DEBUG __result => __new_finish_26
    # DEBUG D.60836 => D#686
    # DEBUG __first => D#941
    # DEBUG __last => D#936
    # DEBUG __result => __new_finish_26
    # DEBUG __assignable => 1
    # DEBUG __first => D#941
    # DEBUG __last => D#936
    # DEBUG __result => __new_finish_26
    # DEBUG __first => D#941
    # DEBUG __last => D#936
    # DEBUG __result => __new_finish_26
    # DEBUG __it => D#936
    # DEBUG __it => D#936
    # DEBUG __it => D#941
    # DEBUG __it => D#941
    # DEBUG __first => D#941
    # DEBUG __last => D#936
    # DEBUG __result => __new_finish_26
    # DEBUG __it => __new_finish_26
    # DEBUG __it => __new_finish_26
    # DEBUG __it => D#936
    # DEBUG __it => D#936
    # DEBUG __it => D#941
    # DEBUG __it => D#941
    # DEBUG __first => D#941
    # DEBUG __last => D#936
    # DEBUG __result => __new_finish_26
    # DEBUG __simple => 1
    # DEBUG __first => D#941
    # DEBUG __last => D#936
    # DEBUG __result => __new_finish_26
    _66 = prephitmp_121 - _158;
    _Num_67 = _66 /[ex] 4;
    # DEBUG _Num => _Num_67
    if (_Num_67 != 0)
      goto <bb 41>;
    else
      goto <bb 40>;

  }
  bb_40 (preds = {bb_39 }, succs = {bb_42 })
  {
    <bb 40>:
    pretmp_162 = (long unsigned int) _66;
    goto <bb 42>;

  }
  bb_41 (preds = {bb_39 }, succs = {bb_42 })
  {
    <bb 41>:
    _68 = (long unsigned int) _66;
    # .MEM_95 = VDEF <.MEM_90>
    __builtin_memcpy (__new_finish_26, __position_16, _68);

  }
  bb_42 (preds = {bb_40 bb_41 }, succs = {bb_43 bb_44 })
  {
    <bb 42>:
    # .MEM_91 = PHI <.MEM_90(40), .MEM_95(41)>
    # prephitmp_163 = PHI <pretmp_162(40), _68(41)>
    _70 = __new_finish_26 + prephitmp_163;
    # DEBUG __new_finish => _70
    # DEBUG D#695 => &this_4(D)->D.35374
    # DEBUG this => D#695
    # DEBUG D#707 => this_4(D)->D.35374._M_impl._M_finish
    # DEBUG D#706 => this_4(D)->D.35374._M_impl._M_start
    # DEBUG __first => D#706
    # DEBUG __last => D#707
    # DEBUG D.60829 => NULL
    # DEBUG D#150 => D#706
    # DEBUG D#151 => D#707
    # DEBUG __first => D#150
    # DEBUG __last => D#151
    # DEBUG D#149 => D#151
    # DEBUG D#148 => D#150
    # DEBUG D#146 => D#148
    # DEBUG D#147 => D#149
    # DEBUG D.53050 => D#146
    # DEBUG D.53049 => D#147
    # DEBUG D#705 => this_4(D)->D.35374._M_impl._M_end_of_storage
    # DEBUG D#704 => (long int) D#705
    # DEBUG D#703 => (long int) D#940
    # DEBUG D#702 => D#704 - D#703
    # DEBUG D#701 => D#702 /[ex] 4
    # DEBUG D#700 => (long unsigned int) D#701
    # DEBUG D#699 => &this_4(D)->D.35374
    # DEBUG this => D#699
    # DEBUG __p => D#940
    # DEBUG __n => D#700
    if (prephitmp_146 != 0B)
      goto <bb 43>;
    else
      goto <bb 44>;

  }
  bb_43 (preds = {bb_42 }, succs = {bb_44 })
  {
    <bb 43>:
    # DEBUG D#237 => &D#699->_M_impl
    # DEBUG D#235 => D#237
    # DEBUG D#236 => D#700
    # DEBUG __p => D#940
    # DEBUG __a => D#235
    # DEBUG __n => D#236
    # DEBUG D#234 => D#236
    # DEBUG D#233 => D#235
    # DEBUG D#231 => D#233
    # DEBUG D#232 => D#234
    # DEBUG __p => D#940
    # DEBUG this => D#231
    # DEBUG D.60825 => D#232
    # .MEM_96 = VDEF <.MEM_91>
    operator delete (prephitmp_146);

  }
  bb_44 (preds = {bb_43 bb_42 }, succs = {bb_53 })
  {
    <bb 44>:
    # .MEM_92 = PHI <.MEM_96(43), .MEM_91(42)>

  }
  bb_53 (preds = {bb_44 }, succs = {bb_45 })
  {
    <bb 53>:
    # .MEM_30 = VDEF <.MEM_92>
    this_4(D)->D.35374._M_impl._M_start = iftmp.12_113;
    # .MEM_31 = VDEF <.MEM_30>
    this_4(D)->D.35374._M_impl._M_finish = _70;
    # .MEM_34 = VDEF <.MEM_31>
    this_4(D)->D.35374._M_impl._M_end_of_storage = prephitmp_148;

  }
  bb_45 (preds = {bb_55 bb_53 }, succs = {bb_54 })
  {
    <bb 45>:
    # .MEM_1 = PHI <.MEM_172(55), .MEM_34(53)>

  }
  bb_54 (preds = {bb_45 }, succs = {bb_1 })
  {
    <bb 54>:
    # VUSE <.MEM_1>
    return;

  }
  bb_46 (preds = {bb_30 }, succs = {bb_32 })
  {
    <bb 46>:
    # DEBUG __len => NULL
    # DEBUG this => this_4(D)
    # DEBUG D#156 => &this_4(D)->D.35374._M_impl._M_start
    # DEBUG this => NULL
    # DEBUG __i => D#156
    # DEBUG __lhs => &__position
    # DEBUG __rhs => &D.45005
    # DEBUG this => &__position
    _144 = (long int) __position_16;
    # DEBUG this => &D.45005
    _143 = _144 - _116;
    # DEBUG D#709 => _143 /[ex] 4
    # DEBUG __elems_before => (const size_type) D#709
    # DEBUG D#708 => &this_4(D)->D.35374
    # DEBUG D#497 => D#708
    # DEBUG __n => NULL
    # DEBUG this => D#497
    # DEBUG D#496 => D#497
    goto <bb 32>;

  }
  bb_47 (preds = {bb_30 }, succs = {bb_31 bb_33 })
  {
    <bb 47>:
    # DEBUG __len => NULL
    # DEBUG this => this_4(D)
    # DEBUG D#156 => &this_4(D)->D.35374._M_impl._M_start
    # DEBUG this => NULL
    # DEBUG __i => D#156
    # DEBUG __lhs => &__position
    # DEBUG __rhs => &D.45005
    # DEBUG this => &__position
    _151 = (long int) __position_16;
    # DEBUG this => &D.45005
    _150 = _151 - _116;
    # DEBUG D#709 => _150 /[ex] 4
    # DEBUG __elems_before => (const size_type) D#709
    # DEBUG D#708 => &this_4(D)->D.35374
    # DEBUG D#497 => D#708
    # DEBUG __n => NULL
    # DEBUG this => D#497
    # DEBUG D#496 => D#497
    if (__len_124 != 0)
      goto <bb 31>;
    else
      goto <bb 33>;

  }
  loop_1 (header = 12, latch = 14, niter = ((unsigned long) _48 - (unsigned long) (__position_16 + 4)) /[ex] 4 & 4611686018427387903, upper_bound = 4611686018427387902)
  {
    bb_12 (preds = {bb_11 bb_14 }, succs = {bb_13 bb_14 })
    {
      <bb 12>:
      # __position_109 = PHI <__position_16(11), __position_55(14)>
      # .MEM_83 = PHI <.MEM_12(11), .MEM_98(14)>
      # DEBUG __first => __position_109
      # .MEM_98 = VDEF <.MEM_83>
      *__position_109 = __x_copy_35;
      __position_55 = __position_109 + 4;
      # DEBUG __first => __position_55
      # DEBUG __first => __position_55
      if (_48 == __position_55)
        goto <bb 13>;
      else
        goto <bb 14>;

    }
    bb_14 (preds = {bb_12 }, succs = {bb_12 })
    {
      <bb 14>:
      goto <bb 12>;

    }
  }
  loop_2 (header = 25, latch = 27, niter = ((unsigned long) __first_7 - (unsigned long) (__position_16 + 4)) /[ex] 4 & 4611686018427387903, upper_bound = 4611686018427387902)
  {
    bb_25 (preds = {bb_24 bb_27 }, succs = {bb_26 bb_27 })
    {
      <bb 25>:
      # __position_110 = PHI <__position_16(24), __position_58(27)>
      # .MEM_136 = PHI <.MEM_54(24), .MEM_101(27)>
      # DEBUG __first => __position_110
      # .MEM_101 = VDEF <.MEM_136>
      *__position_110 = __x_copy_35;
      __position_58 = __position_110 + 4;
      # DEBUG __first => __position_58
      # DEBUG __first => __position_58
      if (__first_7 == __position_58)
        goto <bb 26>;
      else
        goto <bb 27>;

    }
    bb_27 (preds = {bb_25 }, succs = {bb_25 })
    {
      <bb 27>:
      goto <bb 25>;

    }
  }
  loop_3 (header = 17, latch = 19, niter = , upper_bound = 0x0ffffffffffffffff)
  {
    bb_17 (preds = {bb_16 bb_19 }, succs = {bb_18 bb_19 })
    {
      <bb 17>:
      # __n_111 = PHI <__n_50(16), __n_63(19)>
      # __first_76 = PHI <__first_7(16), __first_64(19)>
      # .MEM_81 = PHI <.MEM_3(D)(16), .MEM_99(19)>
      # DEBUG __niter => __n_111
      # DEBUG __first => __first_76
      # .MEM_99 = VDEF <.MEM_81>
      *__first_76 = __x_copy_35;
      __n_63 = __n_111 + 18446744073709551615;
      # DEBUG __niter => __n_63
      __first_64 = __first_76 + 4;
      # DEBUG __first => __first_64
      # DEBUG __niter => __n_63
      # DEBUG __first => __first_64
      if (__n_63 == 0)
        goto <bb 18>;
      else
        goto <bb 19>;

    }
    bb_19 (preds = {bb_17 }, succs = {bb_17 })
    {
      <bb 19>:
      goto <bb 17>;

    }
  }
  loop_4 (header = 34, latch = 35, niter = , upper_bound = 0x0ffffffffffffffff)
  {
    bb_34 (preds = {bb_35 bb_52 }, succs = {bb_36 bb_35 })
    {
      <bb 34>:
      # __n_132 = PHI <__n_79(35), __n_2(D)(52)>
      # __first_155 = PHI <__first_80(35), __first_20(52)>
      # .MEM_130 = PHI <.MEM_93(35), .MEM_126(52)>
      # DEBUG __niter => __n_132
      # DEBUG __first => __first_155
      # .MEM_93 = VDEF <.MEM_130>
      *__first_155 = _56;
      __n_79 = __n_132 + 18446744073709551615;
      # DEBUG __niter => __n_79
      __first_80 = __first_155 + 4;
      # DEBUG __first => __first_80
      # DEBUG __niter => __n_79
      # DEBUG __first => __first_80
      if (__n_79 == 0)
        goto <bb 36>;
      else
        goto <bb 35>;

    }
    bb_35 (preds = {bb_34 }, succs = {bb_34 })
    {
      <bb 35>:
      goto <bb 34>;

    }
  }
}

Pass statistics:
----------------

void std::vector<_Tp, _Alloc>::_M_fill_insert(std::vector<_Tp, _Alloc>::iterator, std::vector<_Tp, _Alloc>::size_type, const value_type&) [with _Tp = int; _Alloc = std::allocator<int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer = int*; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::value_type = int] (struct vectorD.34569 * const thisD.35298, struct iteratorD.34942 __positionD.35299, size_typeD.34950 __nD.35300, const value_typeD.34937 & __xD.35301)
{
  const long unsigned intD.14 D.65020;
  const size_typeD.34950 __lenD.65014;
  size_typeD.34950 D.65019;
  size_typeD.34950 __nD.65012;
  intD.9 * D.65010;
  const ptrdiff_tD.2819 _NumD.65000;
  intD.9 * D.65001;
  intD.9 * const __positionD.60942;
  intD.9 * __firstD.60910;
  const ptrdiff_tD.2819 _NumD.60904;
  const ptrdiff_tD.2819 _NumD.60865;
  intD.9 * __firstD.60793;
  long unsigned intD.14 __nD.60794;
  intD.9 * __firstD.60744;
  const ptrdiff_tD.2819 _NumD.60740;
  intD.9 * __firstD.60693;
  intD.9 * __new_finishD.45007;
  const size_typeD.34950 __elems_afterD.44971;
  value_typeD.34937 __x_copyD.44970;
  intD.9 * _5;
  long intD.12 _6;
  long intD.12 _8;
  long intD.12 _9;
  long intD.12 _10;
  long unsigned intD.14 _11;
  intD.9 * const _17;
  long unsigned intD.14 _19;
  difference_typeD.43018 _22;
  long intD.12 _23;
  long unsigned intD.14 _25;
  long intD.12 _27;
  intD.9 * pretmp_29;
  long unsigned intD.14 _38;
  long unsigned intD.14 _39;
  sizetype _40;
  intD.9 * _41;
  intD.9 * _43;
  long intD.12 _47;
  intD.9 * _48;
  long intD.12 __first.7_49;
  intD.9 * _53;
  const intD.9 _56;
  long unsigned intD.14 _59;
  long intD.12 _66;
  long unsigned intD.14 _68;
  intD.9 * _70;
  long unsigned intD.14 _74;
  long unsigned intD.14 _77;
  long unsigned intD.14 prephitmp_102;
  long unsigned intD.14 pretmp_103;
  long intD.12 _104;
  long unsigned intD.14 _106;
  sizetype _107;
  intD.9 * _108;
  intD.9 * _112;
  intD.9 * iftmp.12_113;
  boolD.2757 _114;
  long intD.12 _116;
  long intD.12 _117;
  long intD.12 _118;
  long unsigned intD.14 _120;
  long intD.12 prephitmp_121;
  long unsigned intD.14 _133;
  long intD.12 prephitmp_137;
  long intD.12 pretmp_138;
  long intD.12 pretmp_140;
  boolD.2757 _142;
  long intD.12 _143;
  long intD.12 _144;
  long intD.12 pretmp_145;
  intD.9 * prephitmp_146;
  intD.9 * pretmp_147;
  intD.9 * prephitmp_148;
  intD.9 * pretmp_149;
  long intD.12 _150;
  long intD.12 _151;
  boolD.2757 _152;
  long intD.12 _153;
  long intD.12 _156;
  long intD.12 _157;
  long intD.12 _158;
  long unsigned intD.14 _160;
  long unsigned intD.14 pretmp_162;
  long unsigned intD.14 prephitmp_163;
  long unsigned intD.14 pretmp_164;
  long unsigned intD.14 prephitmp_165;
  intD.9 * pretmp_166;
  intD.9 * prephitmp_167;
  long unsigned intD.14 pretmp_168;
  long unsigned intD.14 prephitmp_169;
  intD.9 * pretmp_173;
  intD.9 * prephitmp_174;

;;   basic block 2, loop depth 0, count 0, freq 4156, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#941ptD.0 => MEM[(struct __normal_iteratorD.34943 *)&__positionD.35299]
  # DEBUG __positionD.60942 => D#941ptD.0
  if (__n_2(D) != 0)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 3421, maybe hot
;;    prev block 2, next block 55, flags: (NEW)
;;    pred:       2 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                48 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                49 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_172 = PHI <.MEM_3(D)(2), .MEM_12(10), .MEM_13(48), .MEM_54(23), .MEM_154(49)>
;;    succ:       55 [100.0%]  (FALLTHRU)

;;   basic block 55, loop depth 0, count 0, freq 3421, maybe hot
;;    prev block 3, next block 4, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU)
  goto <bb 45>;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 2535, maybe hot
;;    prev block 55, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal 
  __position_16 = MEM[(struct __normal_iteratorD.34943 *)&__positionD.35299];
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _5 = this_4(D)->D.35374._M_implD.34865._M_end_of_storageD.34869;
  _6 = (long intD.12) _5;
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  __first_7 = this_4(D)->D.35374._M_implD.34865._M_finishD.34868;
  _8 = (long intD.12) __first_7;
  _9 = _6 - _8;
  # RANGE [-2305843009213693952, 2305843009213693951]
  _10 = _9 /[ex] 4;
  # RANGE ~[2305843009213693952, 16140901064495857663]
  _11 = (long unsigned intD.14) _10;
  if (__n_2(D) <= _11)
    goto <bb 5>;
  else
    goto <bb 28>;
;;    succ:       5 [71.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [29.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 1800, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [71.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  __x_copy_35 = *__x_21(D);
  # DEBUG __x_copyD.44970 => __x_copy_35
  # DEBUG thisD.60688 => this_4(D)
  # DEBUG D#100ptD.0 => &this_4(D)->D.35374._M_implD.34865._M_finishD.34868
  # DEBUG thisD.60690 => NULL
  # DEBUG __iD.60689 => D#100ptD.0
  # DEBUG __lhsD.60685 => &D.44972
  # DEBUG __rhsD.60686 => &__positionD.35299
  # DEBUG thisD.53082 => &D.44972
  # DEBUG thisD.53080 => &__positionD.35299
  _27 = (long intD.12) __position_16;
  _23 = _8 - _27;
  # RANGE [-2305843009213693952, 2305843009213693951]
  _22 = _23 /[ex] 4;
  # RANGE ~[2305843009213693952, 16140901064495857663]
  __elems_after_37 = (const size_typeD.34950) _22;
  # DEBUG __elems_afterD.44971 => __elems_after_37
  # DEBUG __old_finishD.44979 => __first_7
  if (__n_2(D) < __elems_after_37)
    goto <bb 6>;
  else
    goto <bb 15>;
;;    succ:       6 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#696ptD.0 => &this_4(D)->D.35374
  # DEBUG thisD.60742 => D#696ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _39 = __n_2(D) * 4;
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _40 = -_39;
  # PT = nonlocal escaped 
  _41 = __first_7 + _40;
  # DEBUG __firstD.60707 => _41
  # DEBUG __lastD.60708 => __first_7
  # DEBUG __resultD.60709 => __first_7
  # DEBUG __allocD.60710 => D#688ptD.0
  # DEBUG D#687ptD.0 => D#688ptD.0
  # DEBUG D#686ptD.0 => D#687ptD.0
  # DEBUG __firstD.60714 => _41
  # DEBUG __lastD.60713 => __first_7
  # DEBUG __resultD.60712 => __first_7
  # DEBUG D.60711 => D#686ptD.0
  # DEBUG __firstD.60717 => _41
  # DEBUG __lastD.60716 => __first_7
  # DEBUG __resultD.60715 => __first_7
  # DEBUG __assignableD.60720 => 1
  # DEBUG __firstD.60723 => _41
  # DEBUG __lastD.60722 => __first_7
  # DEBUG __resultD.60721 => __first_7
  # DEBUG __firstD.60726 => _41
  # DEBUG __lastD.60725 => __first_7
  # DEBUG __resultD.60724 => __first_7
  # DEBUG __itD.60436 => __first_7
  # DEBUG __itD.54602 => __first_7
  # DEBUG __itD.60434 => _41
  # DEBUG __itD.54602 => _41
  # DEBUG __firstD.60729 => _41
  # DEBUG __lastD.60728 => __first_7
  # DEBUG __resultD.60727 => __first_7
  # DEBUG __itD.60416 => __first_7
  # DEBUG __itD.54605 => __first_7
  # DEBUG __itD.60414 => __first_7
  # DEBUG __itD.54605 => __first_7
  # DEBUG __itD.60412 => _41
  # DEBUG __itD.54605 => _41
  # DEBUG __firstD.60732 => _41
  # DEBUG __lastD.60731 => __first_7
  # DEBUG __resultD.60730 => __first_7
  # DEBUG __simpleD.60736 => 1
  # DEBUG __firstD.60739 => _41
  # DEBUG __lastD.60738 => __first_7
  # DEBUG __resultD.60737 => __first_7
  __first.7_49 = (long intD.12) _41;
  _47 = _8 - __first.7_49;
  # RANGE [-2305843009213693952, 2305843009213693951]
  _Num_45 = _47 /[ex] 4;
  # DEBUG _NumD.60740 => _Num_45
  if (_Num_45 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 261, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _38 = (long unsigned intD.14) _47;
  # .MEM_97 = VDEF <.MEM_3(D)>
  # USE = nonlocal null { D.65023 } (escaped heap)
  # CLB = nonlocal null { D.65023 } (escaped heap)
  memmoveD.995 (__first_7, _41, _38);
  # VUSE <.MEM_97>
  pretmp_173 = this_4(D)->D.35374._M_implD.34865._M_finishD.34868;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_14 = PHI <.MEM_3(D)(6), .MEM_97(7)>
  # PT = nonlocal escaped 
  # prephitmp_174 = PHI <__first_7(6), pretmp_173(7)>
  # PT = nonlocal escaped 
  _43 = prephitmp_174 + _39;
  # .MEM_44 = VDEF <.MEM_14>
  this_4(D)->D.35374._M_implD.34865._M_finishD.34868 = _43;
  # DEBUG thisD.60705 => &__positionD.35299
  # DEBUG __firstD.64984 => D#941ptD.0
  # DEBUG __lastD.64985 => _41
  # DEBUG __resultD.64986 => __first_7
  # DEBUG __itD.57026 => _41
  # DEBUG __itD.54602 => _41
  # DEBUG __itD.57024 => D#941ptD.0
  # DEBUG __itD.54602 => D#941ptD.0
  # DEBUG __firstD.64989 => D#941ptD.0
  # DEBUG __lastD.64988 => _41
  # DEBUG __resultD.64987 => __first_7
  # DEBUG __itD.57006 => __first_7
  # DEBUG __itD.54605 => __first_7
  # DEBUG __itD.57004 => _41
  # DEBUG __itD.54605 => _41
  # DEBUG __itD.57002 => D#941ptD.0
  # DEBUG __itD.54605 => D#941ptD.0
  # DEBUG __firstD.64992 => D#941ptD.0
  # DEBUG __lastD.64991 => _41
  # DEBUG __resultD.64990 => __first_7
  # DEBUG __simpleD.64996 => 1
  # DEBUG __firstD.64999 => D#941ptD.0
  # DEBUG __lastD.64998 => _41
  # DEBUG __resultD.64997 => __first_7
  _104 = __first.7_49 - _27;
  # RANGE [-2305843009213693952, 2305843009213693951]
  _Num_105 = _104 /[ex] 4;
  # DEBUG _NumD.65000 => _Num_105
  if (_Num_105 != 0)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _106 = (long unsigned intD.14) _104;
  # RANGE [0, 18446744073709551615]
  _107 = -_106;
  # PT = nonlocal escaped 
  _108 = __first_7 + _107;
  # .MEM_135 = VDEF <.MEM_44>
  # USE = nonlocal null { D.65023 } (escaped heap)
  # CLB = nonlocal null { D.65023 } (escaped heap)
  memmoveD.995 (_108, __position_16, _106);
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_12 = PHI <.MEM_44(8), .MEM_135(9)>
  # DEBUG thisD.60703 => &__positionD.35299
  # PT = nonlocal 
  _48 = __position_16 + _39;
  # DEBUG thisD.60701 => &__positionD.35299
  # DEBUG D#365ptD.0 => &__x_copyD.44970
  # DEBUG __firstD.60693 => D#941ptD.0
  # DEBUG __lastD.60694 => _48
  # DEBUG D#364ptD.0 => D#365ptD.0
  # DEBUG __valueD.60696 => D#364ptD.0
  # DEBUG __itD.54615 => _48
  # DEBUG __itD.54605 => _48
  # DEBUG __itD.54613 => D#941ptD.0
  # DEBUG __itD.54605 => D#941ptD.0
  # DEBUG D#251ptD.0 => D#364ptD.0
  # DEBUG __firstD.60699 => D#941ptD.0
  # DEBUG __lastD.60698 => _48
  # DEBUG __valueD.60697 => D#251ptD.0
  # DEBUG __tmpD.60700 => __x_copy_35
  # DEBUG __firstD.60699 => D#941ptD.0
  if (__position_16 == _48)
    goto <bb 3>;
  else
    goto <bb 11>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  # __position_109 = PHI <__position_16(11), __position_55(14)>
  # .MEM_83 = PHI <.MEM_12(11), .MEM_98(14)>
  # DEBUG __firstD.60699 => __position_109
  # .MEM_98 = VDEF <.MEM_83>
  *__position_109 = __x_copy_35;
  # PT = nonlocal 
  __position_55 = __position_109 + 4;
  # DEBUG __firstD.60699 => __position_55
  # DEBUG __firstD.60699 => __position_55
  if (_48 == __position_55)
    goto <bb 13>;
  else
    goto <bb 14>;
;;    succ:       13 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 12, next block 48, flags: (NEW)
;;    pred:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_13 = PHI <.MEM_98(12)>
;;    succ:       48 [100.0%]  (FALLTHRU)

;;   basic block 48, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 13, next block 14, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU)
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 48, next block 15, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       5 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#697ptD.0 => &this_4(D)->D.35374
  # DEBUG thisD.60815 => D#697ptD.0
  # RANGE [0, 18446744073709551615]
  __n_50 = __n_2(D) - __elems_after_37;
  # DEBUG D#373ptD.0 => &__x_copyD.44970
  # DEBUG __firstD.60793 => __first_7
  # DEBUG __nD.60794 => __n_50
  # DEBUG D#372ptD.0 => D#373ptD.0
  # DEBUG __xD.60797 => D#372ptD.0
  # DEBUG D.60796 => D#374ptD.0
  # DEBUG D#371ptD.0 => D#372ptD.0
  # DEBUG __firstD.60800 => __first_7
  # DEBUG __nD.60799 => __n_50
  # DEBUG D#370ptD.0 => D#371ptD.0
  # DEBUG __xD.60798 => D#370ptD.0
  # DEBUG __assignableD.60802 => 1
  # DEBUG D#369ptD.0 => D#370ptD.0
  # DEBUG __firstD.60805 => __first_7
  # DEBUG __nD.60804 => __n_50
  # DEBUG D#368ptD.0 => D#369ptD.0
  # DEBUG __xD.60803 => D#368ptD.0
  # DEBUG D#367ptD.0 => D#368ptD.0
  # DEBUG __firstD.60808 => __first_7
  # DEBUG __nD.60807 => __n_50
  # DEBUG D#366ptD.0 => D#367ptD.0
  # DEBUG __valueD.60806 => D#366ptD.0
  # DEBUG __itD.54639 => __first_7
  # DEBUG __itD.54605 => __first_7
  # DEBUG D#258ptD.0 => D#366ptD.0
  # DEBUG __firstD.60811 => __first_7
  # DEBUG __nD.60810 => __n_50
  # DEBUG __valueD.60809 => D#258ptD.0
  # DEBUG __tmpD.60812 => __x_copy_35
  # DEBUG __niterD.60813 => __n_50
  # DEBUG __niterD.60813 => __n_50
  # DEBUG __firstD.60811 => __first_7
  if (__n_50 == 0)
    goto <bb 20>;
  else
    goto <bb 16>;
;;    succ:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __n_111 = PHI <__n_50(16), __n_63(19)>
  # PT = nonlocal escaped 
  # __first_76 = PHI <__first_7(16), __first_64(19)>
  # .MEM_81 = PHI <.MEM_3(D)(16), .MEM_99(19)>
  # DEBUG __niterD.60813 => __n_111
  # DEBUG __firstD.60811 => __first_76
  # .MEM_99 = VDEF <.MEM_81>
  *__first_76 = __x_copy_35;
  # RANGE [0, 18446744073709551614]
  __n_63 = __n_111 + 18446744073709551615;
  # DEBUG __niterD.60813 => __n_63
  # PT = nonlocal escaped 
  __first_64 = __first_76 + 4;
  # DEBUG __firstD.60811 => __first_64
  # DEBUG __niterD.60813 => __n_63
  # DEBUG __firstD.60811 => __first_64
  if (__n_63 == 0)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 17, next block 50, flags: (NEW)
;;    pred:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       50 [100.0%]  (FALLTHRU)

;;   basic block 50, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 18, next block 19, flags: (NEW)
;;    pred:       18 [100.0%]  (FALLTHRU)
  _160 = __n_50 * 4;
  # PT = nonlocal escaped 
  __first_123 = __first_7 + _160;
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 50, next block 20, flags: (NEW)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       50 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_125 = PHI <__first_123(50), __first_7(15)>
  # .MEM_84 = PHI <.MEM_99(50), .MEM_3(D)(15)>
  # .MEM_51 = VDEF <.MEM_84>
  this_4(D)->D.35374._M_implD.34865._M_finishD.34868 = __first_125;
  # DEBUG D#698ptD.0 => &this_4(D)->D.35374
  # DEBUG thisD.60791 => D#698ptD.0
  # DEBUG thisD.60789 => &__positionD.35299
  # DEBUG __firstD.60754 => D#941ptD.0
  # DEBUG __lastD.60755 => __first_7
  # DEBUG __resultD.60756 => __first_125
  # DEBUG __allocD.60757 => D#688ptD.0
  # DEBUG D#687ptD.0 => D#688ptD.0
  # DEBUG D#686ptD.0 => D#687ptD.0
  # DEBUG __firstD.60761 => D#941ptD.0
  # DEBUG __lastD.60760 => __first_7
  # DEBUG __resultD.60759 => __first_125
  # DEBUG D.60758 => D#686ptD.0
  # DEBUG __firstD.60764 => D#941ptD.0
  # DEBUG __lastD.60763 => __first_7
  # DEBUG __resultD.60762 => __first_125
  # DEBUG __assignableD.60767 => 1
  # DEBUG __firstD.60770 => D#941ptD.0
  # DEBUG __lastD.60769 => __first_7
  # DEBUG __resultD.60768 => __first_125
  # DEBUG __firstD.60773 => D#941ptD.0
  # DEBUG __lastD.60772 => __first_7
  # DEBUG __resultD.60771 => __first_125
  # DEBUG __itD.60436 => __first_7
  # DEBUG __itD.54602 => __first_7
  # DEBUG __itD.60434 => D#941ptD.0
  # DEBUG __itD.54602 => D#941ptD.0
  # DEBUG __firstD.60776 => D#941ptD.0
  # DEBUG __lastD.60775 => __first_7
  # DEBUG __resultD.60774 => __first_125
  # DEBUG __itD.60416 => __first_125
  # DEBUG __itD.54605 => __first_125
  # DEBUG __itD.60414 => __first_7
  # DEBUG __itD.54605 => __first_7
  # DEBUG __itD.60412 => D#941ptD.0
  # DEBUG __itD.54605 => D#941ptD.0
  # DEBUG __firstD.60779 => D#941ptD.0
  # DEBUG __lastD.60778 => __first_7
  # DEBUG __resultD.60777 => __first_125
  # DEBUG __simpleD.60783 => 1
  # DEBUG __firstD.60786 => D#941ptD.0
  # DEBUG __lastD.60785 => __first_7
  # DEBUG __resultD.60784 => __first_125
  # DEBUG _NumD.60787 => _22
  if (_22 != 0)
    goto <bb 22>;
  else
    goto <bb 21>;
;;    succ:       22 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 639, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_168 = (long unsigned intD.14) _23;
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 261, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       20 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _59 = (long unsigned intD.14) _23;
  # .MEM_100 = VDEF <.MEM_51>
  # USE = nonlocal null { D.65023 } (escaped heap)
  # CLB = nonlocal null { D.65023 } (escaped heap)
  memmoveD.995 (__first_125, __position_16, _59);
  # VUSE <.MEM_100>
  pretmp_166 = this_4(D)->D.35374._M_implD.34865._M_finishD.34868;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       21 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_87 = PHI <.MEM_51(21), .MEM_100(22)>
  # PT = nonlocal escaped 
  # prephitmp_167 = PHI <__first_125(21), pretmp_166(22)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_169 = PHI <pretmp_168(21), _59(22)>
  # PT = nonlocal escaped 
  _53 = prephitmp_167 + prephitmp_169;
  # .MEM_54 = VDEF <.MEM_87>
  this_4(D)->D.35374._M_implD.34865._M_finishD.34868 = _53;
  # DEBUG thisD.60752 => &__positionD.35299
  # DEBUG D#365ptD.0 => &__x_copyD.44970
  # DEBUG __firstD.60744 => D#941ptD.0
  # DEBUG __lastD.60745 => __first_7
  # DEBUG D#364ptD.0 => D#365ptD.0
  # DEBUG __valueD.60747 => D#364ptD.0
  # DEBUG __itD.54615 => __first_7
  # DEBUG __itD.54605 => __first_7
  # DEBUG __itD.54613 => D#941ptD.0
  # DEBUG __itD.54605 => D#941ptD.0
  # DEBUG D#251ptD.0 => D#364ptD.0
  # DEBUG __firstD.60750 => D#941ptD.0
  # DEBUG __lastD.60749 => __first_7
  # DEBUG __valueD.60748 => D#251ptD.0
  # DEBUG __tmpD.60751 => __x_copy_35
  # DEBUG __firstD.60750 => D#941ptD.0
  if (__first_7 == __position_16)
    goto <bb 3>;
  else
    goto <bb 24>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 23, next block 25, flags: (NEW)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 24, next block 26, flags: (NEW)
;;    pred:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                27 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  # __position_110 = PHI <__position_16(24), __position_58(27)>
  # .MEM_136 = PHI <.MEM_54(24), .MEM_101(27)>
  # DEBUG __firstD.60750 => __position_110
  # .MEM_101 = VDEF <.MEM_136>
  *__position_110 = __x_copy_35;
  # PT = nonlocal 
  __position_58 = __position_110 + 4;
  # DEBUG __firstD.60750 => __position_58
  # DEBUG __firstD.60750 => __position_58
  if (__first_7 == __position_58)
    goto <bb 26>;
  else
    goto <bb 27>;
;;    succ:       26 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 25, next block 49, flags: (NEW)
;;    pred:       25 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_154 = PHI <.MEM_101(25)>
;;    succ:       49 [100.0%]  (FALLTHRU)

;;   basic block 49, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 26, next block 27, flags: (NEW)
;;    pred:       26 [100.0%]  (FALLTHRU)
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 49, next block 28, flags: (NEW)
;;    pred:       25 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       4 [29.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.65011 => this_4(D)
  # DEBUG __nD.65012 => __n_2(D)
  # DEBUG __nD.65012 => __n_2(D)
  # DEBUG __sD.65013 => "vector::_M_fill_insert"
  # DEBUG D#489ptD.0 => this_4(D)
  # DEBUG thisD.57062 => D#489ptD.0
  # DEBUG D#488ptD.0 => D#489ptD.0
  # DEBUG D#487ptD.0 => &D#488ptD.0->D.35374
  # DEBUG thisD.57052 => D#487ptD.0
  # DEBUG __aD.57044 => D#486ptD.0
  # DEBUG D#485ptD.0 => D#486ptD.0
  # DEBUG D#484ptD.0 => D#485ptD.0
  # DEBUG thisD.57035 => D#484ptD.0
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _17 = MEM[(intD.9 * *)this_4(D)];
  # DEBUG D#87ptD.0 => this_4(D)
  # DEBUG D#87ptD.0 => this_4(D)
  # DEBUG thisD.65017 => D#87ptD.0
  # DEBUG thisD.65018 => D#87ptD.0
  _116 = (long intD.12) _17;
  _117 = _8 - _116;
  # RANGE [-2305843009213693952, 2305843009213693951]
  _118 = _117 /[ex] 4;
  # RANGE ~[2305843009213693952, 16140901064495857663]
  _119 = (const long unsigned intD.14) _118;
  # RANGE [2305843009213693952, 6917529027641081855] NONZERO 9223372036854775807
  _120 = 4611686018427387903 - _119;
  if (__n_2(D) > _120)
    goto <bb 29>;
  else
    goto <bb 30>;
;;    succ:       29 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 0
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       28 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_134 = VDEF <.MEM_3(D)>
  # USE = nonlocal null { D.65023 } (escaped heap)
  # CLB = nonlocal null { D.65023 } (escaped heap)
  _ZSt20__throw_length_errorPKcD.2860 ("vector::_M_fill_insert");
;;    succ:      

;;   basic block 30, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       28 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#87ptD.0 => this_4(D)
  # DEBUG D#87ptD.0 => this_4(D)
  # DEBUG thisD.57080 => D#87ptD.0
  # DEBUG thisD.57079 => D#87ptD.0
  # DEBUG D#87ptD.0 => this_4(D)
  # DEBUG D#87ptD.0 => this_4(D)
  # DEBUG thisD.57075 => D#87ptD.0
  # DEBUG thisD.57074 => D#87ptD.0
  # DEBUG __aD.65016 => &D.65020
  # DEBUG __bD.65015 => &__nD.65012
  _77 = MAX_EXPR <__n_2(D), _119>;
  # RANGE [0, 18446744073709551615]
  __len_124 = _77 + _119;
  # DEBUG __lenD.65014 => __len_124
  # DEBUG D#87ptD.0 => this_4(D)
  # DEBUG D#87ptD.0 => this_4(D)
  # DEBUG thisD.57067 => D#87ptD.0
  # DEBUG thisD.57066 => D#87ptD.0
  # DEBUG D#489ptD.0 => this_4(D)
  # DEBUG thisD.57082 => D#489ptD.0
  # DEBUG D#488ptD.0 => D#489ptD.0
  # DEBUG D#487ptD.0 => &D#488ptD.0->D.35374
  # DEBUG thisD.57052 => D#487ptD.0
  # DEBUG __aD.57044 => D#486ptD.0
  # DEBUG D#485ptD.0 => D#486ptD.0
  # DEBUG D#484ptD.0 => D#485ptD.0
  # DEBUG thisD.57035 => D#484ptD.0
  _152 = __len_124 > 4611686018427387903;
  _142 = _119 > __len_124;
  _114 = _142 | _152;
  if (_114 != 0)
    goto <bb 46>;
  else
    goto <bb 47>;
;;    succ:       46 [67.0%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [33.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 8, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       47 [9.4%]  (TRUE_VALUE,EXECUTABLE)
  pretmp_164 = __len_124 * 4;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 661, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       46 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,EXECUTABLE)
  # _156 = PHI <_144(46), _151(31)>
  # _157 = PHI <_143(46), _150(31)>
  # RANGE [4, 18446744073709551612] NONZERO 18446744073709551612
  # prephitmp_165 = PHI <18446744073709551612(46), pretmp_164(31)>
  # DEBUG __lenD.45003 => NULL
  # DEBUG thisD.60937 => this_4(D)
  # DEBUG D#156ptD.0 => &this_4(D)->D.35374._M_implD.34865._M_startD.34867
  # DEBUG thisD.60939 => NULL
  # DEBUG __iD.60938 => D#156ptD.0
  # DEBUG __lhsD.60934 => &__positionD.35299
  # DEBUG __rhsD.60935 => &D.45005
  # DEBUG thisD.53082 => &__positionD.35299
  # DEBUG thisD.53080 => &D.45005
  # DEBUG D#709ptD.0 => _157 /[ex] 4
  # DEBUG __elems_beforeD.45004 => (const size_typeD.34950) D#709ptD.0
  # DEBUG D#708ptD.0 => &this_4(D)->D.35374
  # DEBUG D#497ptD.0 => D#708ptD.0
  # DEBUG __nD.65002 => NULL
  # DEBUG thisD.65003 => D#497ptD.0
  # DEBUG D#496ptD.0 => D#497ptD.0
  # DEBUG D#495ptD.0 => &D#496ptD.0->_M_implD.34865
  # DEBUG D#494ptD.0 => D#495ptD.0
  # DEBUG __nD.65006 => NULL
  # DEBUG __aD.65005 => D#494ptD.0
  # DEBUG D#493ptD.0 => D#494ptD.0
  # DEBUG D#491ptD.0 => D#493ptD.0
  # DEBUG D#492ptD.0 => 0B
  # DEBUG __nD.65009 => NULL
  # DEBUG thisD.65007 => D#491ptD.0
  # DEBUG D.65008 => D#492ptD.0
  # DEBUG D#490ptD.0 => D#491ptD.0
  # DEBUG D#484ptD.0 => D#490ptD.0
  # DEBUG thisD.57087 => D#484ptD.0
  # .MEM_131 = VDEF <.MEM_3(D)>
  # PT = { D.65023 } (escaped heap)
  # USE = nonlocal null { D.65023 } (escaped heap)
  # CLB = nonlocal null { D.65023 } (escaped heap)
  _112 = _ZnwmD.2764 (prephitmp_165);
  # VUSE <.MEM_131>
  pretmp_29 = this_4(D)->D.35374._M_implD.34865._M_startD.34867;
  # VUSE <.MEM_131>
  pretmp_147 = this_4(D)->D.35374._M_implD.34865._M_finishD.34868;
  pretmp_149 = _112 + prephitmp_165;
  pretmp_145 = (long intD.12) pretmp_147;
  pretmp_138 = (long intD.12) pretmp_29;
  pretmp_140 = _156 - pretmp_138;
;;    succ:       33 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 32, next block 52, flags: (NEW, REACHABLE)
;;    pred:       47 [90.6%]  (FALSE_VALUE,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.65023 } (escaped heap)
  # iftmp.12_113 = PHI <0B(47), _112(32)>
  # .MEM_126 = PHI <.MEM_3(D)(47), .MEM_131(32)>
  # _158 = PHI <_151(47), _156(32)>
  # _153 = PHI <_150(47), _157(32)>
  # PT = nonlocal escaped 
  # prephitmp_146 = PHI <_17(47), pretmp_29(32)>
  # PT = null { D.65023 } (escaped heap)
  # prephitmp_148 = PHI <0B(47), pretmp_149(32)>
  # prephitmp_121 = PHI <_8(47), pretmp_145(32)>
  # prephitmp_137 = PHI <_150(47), pretmp_140(32)>
;;    succ:       52 [100.0%]  (FALLTHRU)

;;   basic block 52, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 33, next block 34, flags: (NEW)
;;    pred:       33 [100.0%]  (FALLTHRU)
  # DEBUG __new_startD.45006 => NULL
  # DEBUG __new_finishD.45007 => NULL
  # DEBUG D#692ptD.0 => &this_4(D)->D.35374
  # DEBUG thisD.60932 => D#692ptD.0
  # RANGE [0, 18446744073709551615]
  _19 = (long unsigned intD.14) _153;
  # PT = null { D.65023 } (escaped heap)
  __first_20 = iftmp.12_113 + _19;
  # VUSE <.MEM_126>
  _56 = MEM[(const intD.9 &)__x_21(D)];
  # DEBUG D#373ptD.0 => __x_21(D)
  # DEBUG __firstD.60910 => __first_20
  # DEBUG __nD.60911 => __n_2(D)
  # DEBUG D#372ptD.0 => D#373ptD.0
  # DEBUG __xD.60914 => D#372ptD.0
  # DEBUG D.60913 => D#374ptD.0
  # DEBUG D#371ptD.0 => D#372ptD.0
  # DEBUG __firstD.60917 => __first_20
  # DEBUG __nD.60916 => __n_2(D)
  # DEBUG D#370ptD.0 => D#371ptD.0
  # DEBUG __xD.60915 => D#370ptD.0
  # DEBUG __assignableD.60919 => 1
  # DEBUG D#369ptD.0 => D#370ptD.0
  # DEBUG __firstD.60922 => __first_20
  # DEBUG __nD.60921 => __n_2(D)
  # DEBUG D#368ptD.0 => D#369ptD.0
  # DEBUG __xD.60920 => D#368ptD.0
  # DEBUG D#367ptD.0 => D#368ptD.0
  # DEBUG __firstD.60925 => __first_20
  # DEBUG __nD.60924 => __n_2(D)
  # DEBUG D#366ptD.0 => D#367ptD.0
  # DEBUG __valueD.60923 => D#366ptD.0
  # DEBUG __itD.54639 => __first_20
  # DEBUG __itD.54605 => __first_20
  # DEBUG D#258ptD.0 => D#366ptD.0
  # DEBUG __firstD.60928 => __first_20
  # DEBUG __nD.60927 => __n_2(D)
  # DEBUG __valueD.60926 => D#258ptD.0
  # DEBUG __tmpD.60929 => _56
  # DEBUG __niterD.60930 => __n_2(D)
  # DEBUG __niterD.60930 => __n_2(D)
  # DEBUG __firstD.60928 => __first_20
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 1, count 0, freq 7428, maybe hot
;;    prev block 52, next block 35, flags: (NEW, REACHABLE)
;;    pred:       35 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                52 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 6917529027641081855] NONZERO 9223372036854775807
  # __n_132 = PHI <__n_79(35), __n_2(D)(52)>
  # PT = null { D.65023 } (escaped heap)
  # __first_155 = PHI <__first_80(35), __first_20(52)>
  # .MEM_130 = PHI <.MEM_93(35), .MEM_126(52)>
  # DEBUG __niterD.60930 => __n_132
  # DEBUG __firstD.60928 => __first_155
  # .MEM_93 = VDEF <.MEM_130>
  *__first_155 = _56;
  # RANGE [0, 6917529027641081854] NONZERO 9223372036854775807
  __n_79 = __n_132 + 18446744073709551615;
  # DEBUG __niterD.60930 => __n_79
  # PT = null { D.65023 } (escaped heap)
  __first_80 = __first_155 + 4;
  # DEBUG __firstD.60928 => __first_80
  # DEBUG __niterD.60930 => __n_79
  # DEBUG __firstD.60928 => __first_80
  if (__n_79 == 0)
    goto <bb 36>;
  else
    goto <bb 35>;
;;    succ:       36 [9.9%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [90.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 35, loop depth 1, count 0, freq 6693, maybe hot
;;    prev block 34, next block 36, flags: (NEW)
;;    pred:       34 [90.1%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 34>;
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 35, next block 51, flags: (NEW, REACHABLE)
;;    pred:       34 [9.9%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       51 [100.0%]  (FALLTHRU)

;;   basic block 51, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 36, next block 37, flags: (NEW)
;;    pred:       36 [100.0%]  (FALLTHRU)
  # DEBUG __new_finishD.45007 => 0B
  # DEBUG D#693ptD.0 => &this_4(D)->D.35374
  # DEBUG thisD.60908 => D#693ptD.0
  # DEBUG thisD.60906 => &__positionD.35299
  # DEBUG D#940ptD.0 => this_4(D)->D.35374._M_implD.34865._M_startD.34867
  # DEBUG __firstD.60871 => D#940ptD.0
  # DEBUG __lastD.60872 => D#941ptD.0
  # DEBUG __resultD.60873 => NULL
  # DEBUG __allocD.60874 => D#690ptD.0
  # DEBUG D#689ptD.0 => D#690ptD.0
  # DEBUG D#686ptD.0 => D#689ptD.0
  # DEBUG __firstD.60878 => D#940ptD.0
  # DEBUG __lastD.60877 => D#941ptD.0
  # DEBUG __resultD.60876 => NULL
  # DEBUG D.60875 => D#686ptD.0
  # DEBUG __firstD.60881 => D#940ptD.0
  # DEBUG __lastD.60880 => D#941ptD.0
  # DEBUG __resultD.60879 => NULL
  # DEBUG __assignableD.60884 => 1
  # DEBUG __firstD.60887 => D#940ptD.0
  # DEBUG __lastD.60886 => D#941ptD.0
  # DEBUG __resultD.60885 => NULL
  # DEBUG __firstD.60890 => D#940ptD.0
  # DEBUG __lastD.60889 => D#941ptD.0
  # DEBUG __resultD.60888 => NULL
  # DEBUG __itD.60436 => D#941ptD.0
  # DEBUG __itD.54602 => D#941ptD.0
  # DEBUG __itD.60434 => D#940ptD.0
  # DEBUG __itD.54602 => D#940ptD.0
  # DEBUG __firstD.60893 => D#940ptD.0
  # DEBUG __lastD.60892 => D#941ptD.0
  # DEBUG __resultD.60891 => NULL
  # DEBUG __itD.60416 => NULL
  # DEBUG __itD.54605 => NULL
  # DEBUG __itD.60414 => D#941ptD.0
  # DEBUG __itD.54605 => D#941ptD.0
  # DEBUG __itD.60412 => D#940ptD.0
  # DEBUG __itD.54605 => D#940ptD.0
  # DEBUG __firstD.60896 => D#940ptD.0
  # DEBUG __lastD.60895 => D#941ptD.0
  # DEBUG __resultD.60894 => NULL
  # DEBUG __simpleD.60900 => 1
  # DEBUG __firstD.60903 => D#940ptD.0
  # DEBUG __lastD.60902 => D#941ptD.0
  # DEBUG __resultD.60901 => NULL
  # DEBUG D#939ptD.0 => (long intD.12) D#940ptD.0
  # DEBUG D#938ptD.0 => _158 - D#939ptD.0
  # RANGE [-2305843009213693952, 2305843009213693951]
  _Num_73 = prephitmp_137 /[ex] 4;
  # DEBUG _NumD.60904 => _Num_73
  if (_Num_73 != 0)
    goto <bb 38>;
  else
    goto <bb 37>;
;;    succ:       38 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 522, maybe hot
;;    prev block 51, next block 38, flags: (NEW)
;;    pred:       51 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_103 = (long unsigned intD.14) prephitmp_137;
  goto <bb 39>;
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 213, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       51 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _74 = (long unsigned intD.14) prephitmp_137;
  # .MEM_94 = VDEF <.MEM_93>
  # USE = nonlocal null { D.65023 } (escaped heap)
  # CLB = nonlocal null { D.65023 } (escaped heap)
  memmoveD.995 (iftmp.12_113, prephitmp_146, _74);
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       37 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_90 = PHI <.MEM_93(37), .MEM_94(38)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_102 = PHI <pretmp_103(37), _74(38)>
  # DEBUG D#937ptD.0 => (long unsigned intD.14) D#938ptD.0
  # DEBUG __new_finishD.45007 => iftmp.12_113 + D#937ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _25 = __n_2(D) * 4;
  # RANGE [0, 18446744073709551615]
  _133 = _25 + prephitmp_102;
  # PT = null { D.65023 } (escaped heap)
  __new_finish_26 = iftmp.12_113 + _133;
  # DEBUG __new_finishD.45007 => __new_finish_26
  # DEBUG D#694ptD.0 => &this_4(D)->D.35374
  # DEBUG thisD.60869 => D#694ptD.0
  # DEBUG D#936ptD.0 => this_4(D)->D.35374._M_implD.34865._M_finishD.34868
  # DEBUG thisD.60867 => &__positionD.35299
  # DEBUG __firstD.60832 => D#941ptD.0
  # DEBUG __lastD.60833 => D#936ptD.0
  # DEBUG __resultD.60834 => __new_finish_26
  # DEBUG __allocD.60835 => D#690ptD.0
  # DEBUG D#689ptD.0 => D#690ptD.0
  # DEBUG D#686ptD.0 => D#689ptD.0
  # DEBUG __firstD.60839 => D#941ptD.0
  # DEBUG __lastD.60838 => D#936ptD.0
  # DEBUG __resultD.60837 => __new_finish_26
  # DEBUG D.60836 => D#686ptD.0
  # DEBUG __firstD.60842 => D#941ptD.0
  # DEBUG __lastD.60841 => D#936ptD.0
  # DEBUG __resultD.60840 => __new_finish_26
  # DEBUG __assignableD.60845 => 1
  # DEBUG __firstD.60848 => D#941ptD.0
  # DEBUG __lastD.60847 => D#936ptD.0
  # DEBUG __resultD.60846 => __new_finish_26
  # DEBUG __firstD.60851 => D#941ptD.0
  # DEBUG __lastD.60850 => D#936ptD.0
  # DEBUG __resultD.60849 => __new_finish_26
  # DEBUG __itD.60436 => D#936ptD.0
  # DEBUG __itD.54602 => D#936ptD.0
  # DEBUG __itD.60434 => D#941ptD.0
  # DEBUG __itD.54602 => D#941ptD.0
  # DEBUG __firstD.60854 => D#941ptD.0
  # DEBUG __lastD.60853 => D#936ptD.0
  # DEBUG __resultD.60852 => __new_finish_26
  # DEBUG __itD.60416 => __new_finish_26
  # DEBUG __itD.54605 => __new_finish_26
  # DEBUG __itD.60414 => D#936ptD.0
  # DEBUG __itD.54605 => D#936ptD.0
  # DEBUG __itD.60412 => D#941ptD.0
  # DEBUG __itD.54605 => D#941ptD.0
  # DEBUG __firstD.60857 => D#941ptD.0
  # DEBUG __lastD.60856 => D#936ptD.0
  # DEBUG __resultD.60855 => __new_finish_26
  # DEBUG __simpleD.60861 => 1
  # DEBUG __firstD.60864 => D#941ptD.0
  # DEBUG __lastD.60863 => D#936ptD.0
  # DEBUG __resultD.60862 => __new_finish_26
  _66 = prephitmp_121 - _158;
  # RANGE [-2305843009213693952, 2305843009213693951]
  _Num_67 = _66 /[ex] 4;
  # DEBUG _NumD.60865 => _Num_67
  if (_Num_67 != 0)
    goto <bb 41>;
  else
    goto <bb 40>;
;;    succ:       41 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 0, count 0, freq 522, maybe hot
;;    prev block 39, next block 41, flags: (NEW)
;;    pred:       39 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_162 = (long unsigned intD.14) _66;
  goto <bb 42>;
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 41, loop depth 0, count 0, freq 213, maybe hot
;;    prev block 40, next block 42, flags: (NEW, REACHABLE)
;;    pred:       39 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _68 = (long unsigned intD.14) _66;
  # .MEM_95 = VDEF <.MEM_90>
  # USE = nonlocal null { D.65023 } (escaped heap)
  # CLB = nonlocal null { D.65023 } (escaped heap)
  memcpyD.992 (__new_finish_26, __position_16, _68);
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       40 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_91 = PHI <.MEM_90(40), .MEM_95(41)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_163 = PHI <pretmp_162(40), _68(41)>
  # PT = null { D.65023 } (escaped heap)
  _70 = __new_finish_26 + prephitmp_163;
  # DEBUG __new_finishD.45007 => _70
  # DEBUG D#695ptD.0 => &this_4(D)->D.35374
  # DEBUG thisD.60830 => D#695ptD.0
  # DEBUG D#707ptD.0 => this_4(D)->D.35374._M_implD.34865._M_finishD.34868
  # DEBUG D#706ptD.0 => this_4(D)->D.35374._M_implD.34865._M_startD.34867
  # DEBUG __firstD.60827 => D#706ptD.0
  # DEBUG __lastD.60828 => D#707ptD.0
  # DEBUG D.60829 => NULL
  # DEBUG D#150ptD.0 => D#706ptD.0
  # DEBUG D#151ptD.0 => D#707ptD.0
  # DEBUG __firstD.53061 => D#150ptD.0
  # DEBUG __lastD.53060 => D#151ptD.0
  # DEBUG D#149ptD.0 => D#151ptD.0
  # DEBUG D#148ptD.0 => D#150ptD.0
  # DEBUG D#146ptD.0 => D#148ptD.0
  # DEBUG D#147ptD.0 => D#149ptD.0
  # DEBUG D.53050 => D#146ptD.0
  # DEBUG D.53049 => D#147ptD.0
  # DEBUG D#705ptD.0 => this_4(D)->D.35374._M_implD.34865._M_end_of_storageD.34869
  # DEBUG D#704ptD.0 => (long intD.12) D#705ptD.0
  # DEBUG D#703ptD.0 => (long intD.12) D#940ptD.0
  # DEBUG D#702ptD.0 => D#704ptD.0 - D#703ptD.0
  # DEBUG D#701ptD.0 => D#702ptD.0 /[ex] 4
  # DEBUG D#700ptD.0 => (long unsigned intD.14) D#701ptD.0
  # DEBUG D#699ptD.0 => &this_4(D)->D.35374
  # DEBUG thisD.60817 => D#699ptD.0
  # DEBUG __pD.60818 => D#940ptD.0
  # DEBUG __nD.60819 => D#700ptD.0
  if (prephitmp_146 != 0B)
    goto <bb 43>;
  else
    goto <bb 44>;
;;    succ:       43 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 43, loop depth 0, count 0, freq 513, maybe hot
;;    prev block 42, next block 44, flags: (NEW, REACHABLE)
;;    pred:       42 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#237ptD.0 => &D#699ptD.0->_M_implD.34865
  # DEBUG D#235ptD.0 => D#237ptD.0
  # DEBUG D#236ptD.0 => D#700ptD.0
  # DEBUG __pD.60823 => D#940ptD.0
  # DEBUG __aD.60821 => D#235ptD.0
  # DEBUG __nD.60822 => D#236ptD.0
  # DEBUG D#234ptD.0 => D#236ptD.0
  # DEBUG D#233ptD.0 => D#235ptD.0
  # DEBUG D#231ptD.0 => D#233ptD.0
  # DEBUG D#232ptD.0 => D#234ptD.0
  # DEBUG __pD.60826 => D#940ptD.0
  # DEBUG thisD.60824 => D#231ptD.0
  # DEBUG D.60825 => D#232ptD.0
  # .MEM_96 = VDEF <.MEM_91>
  # USE = nonlocal null { D.65023 } (escaped heap)
  # CLB = nonlocal null { D.65023 } (escaped heap)
  _ZdlPvD.2766 (prephitmp_146);
;;    succ:       44 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 44, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 43, next block 53, flags: (NEW, REACHABLE)
;;    pred:       43 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                42 [30.2%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_92 = PHI <.MEM_96(43), .MEM_91(42)>
;;    succ:       53 [100.0%]  (FALLTHRU)

;;   basic block 53, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 44, next block 45, flags: (NEW)
;;    pred:       44 [100.0%]  (FALLTHRU)
  # .MEM_30 = VDEF <.MEM_92>
  this_4(D)->D.35374._M_implD.34865._M_startD.34867 = iftmp.12_113;
  # .MEM_31 = VDEF <.MEM_30>
  this_4(D)->D.35374._M_implD.34865._M_finishD.34868 = _70;
  # .MEM_34 = VDEF <.MEM_31>
  this_4(D)->D.35374._M_implD.34865._M_end_of_storageD.34869 = prephitmp_148;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 45, loop depth 0, count 0, freq 4156, maybe hot
;;    prev block 53, next block 54, flags: (NEW, REACHABLE)
;;    pred:       55 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                53 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_172(55), .MEM_34(53)>
;;    succ:       54 [100.0%]  (FALLTHRU)

;;   basic block 54, loop depth 0, count 0, freq 4156, maybe hot
;;    prev block 45, next block 46, flags: (NEW)
;;    pred:       45 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_1>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 46, loop depth 0, count 0, freq 654, maybe hot
;;   Invalid sum of incoming frequencies 492, should be 654
;;    prev block 54, next block 47, flags: (NEW, REACHABLE)
;;    pred:       30 [67.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __lenD.45003 => NULL
  # DEBUG thisD.60937 => this_4(D)
  # DEBUG D#156ptD.0 => &this_4(D)->D.35374._M_implD.34865._M_startD.34867
  # DEBUG thisD.60939 => NULL
  # DEBUG __iD.60938 => D#156ptD.0
  # DEBUG __lhsD.60934 => &__positionD.35299
  # DEBUG __rhsD.60935 => &D.45005
  # DEBUG thisD.53082 => &__positionD.35299
  _144 = (long intD.12) __position_16;
  # DEBUG thisD.53080 => &D.45005
  _143 = _144 - _116;
  # DEBUG D#709ptD.0 => _143 /[ex] 4
  # DEBUG __elems_beforeD.45004 => (const size_typeD.34950) D#709ptD.0
  # DEBUG D#708ptD.0 => &this_4(D)->D.35374
  # DEBUG D#497ptD.0 => D#708ptD.0
  # DEBUG __nD.65002 => NULL
  # DEBUG thisD.65003 => D#497ptD.0
  # DEBUG D#496ptD.0 => D#497ptD.0
  goto <bb 32>;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 47, loop depth 0, count 0, freq 80, maybe hot
;;   Invalid sum of incoming frequencies 243, should be 80
;;    prev block 46, next block 1, flags: (NEW, REACHABLE)
;;    pred:       30 [33.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __lenD.45003 => NULL
  # DEBUG thisD.60937 => this_4(D)
  # DEBUG D#156ptD.0 => &this_4(D)->D.35374._M_implD.34865._M_startD.34867
  # DEBUG thisD.60939 => NULL
  # DEBUG __iD.60938 => D#156ptD.0
  # DEBUG __lhsD.60934 => &__positionD.35299
  # DEBUG __rhsD.60935 => &D.45005
  # DEBUG thisD.53082 => &__positionD.35299
  _151 = (long intD.12) __position_16;
  # DEBUG thisD.53080 => &D.45005
  _150 = _151 - _116;
  # DEBUG D#709ptD.0 => _150 /[ex] 4
  # DEBUG __elems_beforeD.45004 => (const size_typeD.34950) D#709ptD.0
  # DEBUG D#708ptD.0 => &this_4(D)->D.35374
  # DEBUG D#497ptD.0 => D#708ptD.0
  # DEBUG __nD.65002 => NULL
  # DEBUG thisD.65003 => D#497ptD.0
  # DEBUG D#496ptD.0 => D#497ptD.0
  if (__len_124 != 0)
    goto <bb 31>;
  else
    goto <bb 33>;
;;    succ:       31 [9.4%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [90.6%]  (FALSE_VALUE,EXECUTABLE)

}



;; Function void std::vector<_Tp, _Alloc>::_M_fill_assign(std::size_t, const value_type&) [with _Tp = int; _Alloc = std::allocator<int>; std::size_t = long unsigned int; std::vector<_Tp, _Alloc>::value_type = int] (_ZNSt6vectorIiSaIiEE14_M_fill_assignEmRKi, funcdef_no=2107, decl_uid=35237, cgraph_uid=777, symbol_order=778)


Pass statistics:
----------------

void std::vector<_Tp, _Alloc>::_M_fill_assign(std::size_t, const value_type&) [with _Tp = int; _Alloc = std::allocator<int>; std::size_t = long unsigned int; std::vector<_Tp, _Alloc>::value_type = int] (struct vectorD.34569 * const thisD.35238, size_tD.2818 __nD.35239, const value_typeD.34937 & __valD.35240)
{
  intD.9 * D.65390;
  intD.9 * __firstD.65365;
  size_typeD.34950 __nD.65348;
  intD.9 * __tmpD.65309;
  intD.9 * __tmpD.65306;
  intD.9 * __tmpD.65303;
  struct vectorD.34569 __tmpD.65298;
  intD.9 * __firstD.57565;
  intD.9 * __firstD.57548;
  intD.9 * __firstD.57513;
  long unsigned intD.14 __nD.57514;
  long intD.12 _3;
  long intD.12 _5;
  long intD.12 _9;
  intD.9 * const _14;
  const intD.9 _15;
  const intD.9 _17;
  long intD.12 _18;
  size_typeD.34950 _19;
  long intD.12 _21;
  long intD.12 _22;
  long intD.12 _23;
  size_typeD.34950 _24;
  intD.9 * pretmp_25;
  intD.9 * prephitmp_26;
  intD.9 * _31;
  long unsigned intD.14 _42;
  long unsigned intD.14 _46;
  intD.9 * _51;
  const intD.9 _52;
  long unsigned intD.14 _55;
  intD.9 * _56;
  intD.9 * _76;
  const intD.9 pretmp_80;
  const intD.9 prephitmp_81;
  long unsigned intD.14 _83;
  long unsigned intD.14 _98;

;;   basic block 2, loop depth 0, count 0, freq 2535, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __first_13 = MEM[(intD.9 * *)this_2(D)];
  # DEBUG D#157ptD.0 => this_2(D)
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _14 = MEM[(intD.9 * *)this_2(D) + 16B];
  # DEBUG D#157ptD.0 => this_2(D)
  # DEBUG thisD.57478 => D#157ptD.0
  # DEBUG thisD.57477 => D#157ptD.0
  _9 = (long intD.12) _14;
  _5 = (long intD.12) __first_13;
  _3 = _9 - _5;
  # RANGE [-2305843009213693952, 2305843009213693951]
  _18 = _3 /[ex] 4;
  # RANGE ~[2305843009213693952, 16140901064495857663]
  _19 = (size_typeD.34950) _18;
  if (__n_4(D) > _19)
    goto <bb 3>;
  else
    goto <bb 13>;
;;    succ:       3 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.65245 => this_2(D)
  # DEBUG __nD.65246 => __n_4(D)
  # DEBUG __valD.65247 => __val_6(D)
  # DEBUG D#532ptD.0 => &this_2(D)->D.35374
  # DEBUG thisD.65325 => D#532ptD.0
  # DEBUG D#1007ptD.0 => &MEM[(struct _Vector_baseD.34632 *)this_2(D)]._M_implD.34865
  # DEBUG thisD.65347 => &__tmpD.65298
  # DEBUG __nD.65348 => __n_4(D)
  # DEBUG __valueD.65349 => __val_6(D)
  # DEBUG __aD.65350 => D#1007ptD.0
  # DEBUG D#531ptD.0 => &__tmpD.65298.D.35374
  # DEBUG thisD.65353 => D#531ptD.0
  # DEBUG __nD.65352 => __n_4(D)
  # DEBUG __aD.65351 => D#1007ptD.0
  # DEBUG D#530ptD.0 => &D#531ptD.0->_M_implD.34865
  # DEBUG thisD.65355 => D#530ptD.0
  # DEBUG __aD.65354 => D#1007ptD.0
  # DEBUG thisD.57428 => D#530ptD.0
  # DEBUG __aD.57429 => D#1007ptD.0
  # DEBUG thisD.57425 => D#530ptD.0
  # DEBUG D.57426 => D#1007ptD.0
  # DEBUG thisD.65357 => D#531ptD.0
  # DEBUG __nD.65356 => __n_4(D)
  # DEBUG D#497ptD.0 => D#531ptD.0
  # DEBUG __nD.65382 => __n_4(D)
  # DEBUG thisD.65383 => D#497ptD.0
  # DEBUG D#496ptD.0 => D#497ptD.0
  if (__n_4(D) != 0)
    goto <bb 4>;
  else
    goto <bb 30>;
;;    succ:       4 [90.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [10.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 662, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [90.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#495ptD.0 => &D#496ptD.0->_M_implD.34865
  # DEBUG D#494ptD.0 => D#495ptD.0
  # DEBUG __nD.65386 => __n_4(D)
  # DEBUG __aD.65385 => D#494ptD.0
  # DEBUG D#493ptD.0 => D#494ptD.0
  # DEBUG D#491ptD.0 => D#493ptD.0
  # DEBUG D#492ptD.0 => 0B
  # DEBUG __nD.65389 => __n_4(D)
  # DEBUG thisD.65387 => D#491ptD.0
  # DEBUG D.65388 => D#492ptD.0
  # DEBUG D#490ptD.0 => D#491ptD.0
  # DEBUG D#484ptD.0 => D#490ptD.0
  # DEBUG thisD.57087 => D#484ptD.0
  if (__n_4(D) > 4611686018427387903)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 0
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_65 = VDEF <.MEM_1(D)>
  # USE = nonlocal null { D.65393 } (escaped heap)
  # CLB = nonlocal null { D.65393 } (escaped heap)
  _ZSt17__throw_bad_allocvD.2850 ();
;;    succ:      

;;   basic block 6, loop depth 0, count 0, freq 669, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [4, 18446744073709551612] NONZERO 18446744073709551612
  _55 = __n_4(D) * 4;
  # .MEM_64 = VDEF <.MEM_1(D)>
  # PT = { D.65393 } (escaped heap)
  # USE = nonlocal null { D.65393 } (escaped heap)
  # CLB = nonlocal null { D.65393 } (escaped heap)
  _56 = _ZnwmD.2764 (_55);
  # PT = { D.65393 } (escaped heap)
  _51 = _56 + _55;
  # DEBUG D#378ptD.0 => &__tmpD.65298
  # DEBUG D#378ptD.0 => &__tmpD.65298
  # VUSE <.MEM_64>
  _52 = MEM[(const intD.9 &)__val_6(D)];
  # DEBUG D#379ptD.0 => __val_6(D)
  # DEBUG __nD.65361 => __n_4(D)
  # DEBUG D#376ptD.0 => D#378ptD.0
  # DEBUG thisD.65358 => D#376ptD.0
  # DEBUG thisD.65359 => D#378ptD.0
  # DEBUG D#377ptD.0 => D#379ptD.0
  # DEBUG __valueD.65360 => D#377ptD.0
  # DEBUG D#375ptD.0 => &D#376ptD.0->D.35374
  # DEBUG thisD.54797 => D#375ptD.0
  # DEBUG D#373ptD.0 => D#377ptD.0
  # DEBUG __firstD.65365 => NULL
  # DEBUG __nD.65364 => __n_4(D)
  # DEBUG D#372ptD.0 => D#373ptD.0
  # DEBUG __xD.65362 => D#372ptD.0
  # DEBUG D.65363 => D#374ptD.0
  # DEBUG D#371ptD.0 => D#372ptD.0
  # DEBUG __firstD.65368 => NULL
  # DEBUG __nD.65367 => __n_4(D)
  # DEBUG D#370ptD.0 => D#371ptD.0
  # DEBUG __xD.65366 => D#370ptD.0
  # DEBUG __assignableD.65370 => 1
  # DEBUG D#369ptD.0 => D#370ptD.0
  # DEBUG __firstD.65373 => NULL
  # DEBUG __nD.65372 => __n_4(D)
  # DEBUG D#368ptD.0 => D#369ptD.0
  # DEBUG __xD.65371 => D#368ptD.0
  # DEBUG D#367ptD.0 => D#368ptD.0
  # DEBUG __firstD.65376 => NULL
  # DEBUG __nD.65375 => __n_4(D)
  # DEBUG D#366ptD.0 => D#367ptD.0
  # DEBUG __valueD.65374 => D#366ptD.0
  # DEBUG __itD.54639 => NULL
  # DEBUG __itD.54605 => NULL
  # DEBUG D#258ptD.0 => D#366ptD.0
  # DEBUG __firstD.65379 => NULL
  # DEBUG __nD.65378 => __n_4(D)
  # DEBUG __valueD.65377 => D#258ptD.0
  # DEBUG __tmpD.65380 => _52
  # DEBUG __niterD.65381 => __n_4(D)
  # DEBUG __niterD.65381 => __n_4(D)
  # DEBUG __firstD.65379 => _56
  # DEBUG D#378ptD.0 => &__tmpD.65298
  # DEBUG D#379ptD.0 => __val_6(D)
  # DEBUG __nD.65361 => __n_4(D)
  # DEBUG D#376ptD.0 => D#378ptD.0
  # DEBUG thisD.65358 => D#376ptD.0
  # DEBUG thisD.65359 => D#378ptD.0
  # DEBUG D#377ptD.0 => D#379ptD.0
  # DEBUG __valueD.65360 => D#377ptD.0
  # DEBUG D#375ptD.0 => &D#376ptD.0->D.35374
  # DEBUG thisD.54797 => D#375ptD.0
  # DEBUG D#373ptD.0 => D#377ptD.0
  # DEBUG __firstD.65365 => NULL
  # DEBUG __nD.65364 => __n_4(D)
  # DEBUG D#372ptD.0 => D#373ptD.0
  # DEBUG __xD.65362 => D#372ptD.0
  # DEBUG D.65363 => D#374ptD.0
  # DEBUG D#371ptD.0 => D#372ptD.0
  # DEBUG __firstD.65368 => NULL
  # DEBUG __nD.65367 => __n_4(D)
  # DEBUG D#370ptD.0 => D#371ptD.0
  # DEBUG __xD.65366 => D#370ptD.0
  # DEBUG __assignableD.65370 => 1
  # DEBUG D#369ptD.0 => D#370ptD.0
  # DEBUG __firstD.65373 => NULL
  # DEBUG __nD.65372 => __n_4(D)
  # DEBUG D#368ptD.0 => D#369ptD.0
  # DEBUG __xD.65371 => D#368ptD.0
  # DEBUG D#367ptD.0 => D#368ptD.0
  # DEBUG __firstD.65376 => NULL
  # DEBUG __nD.65375 => __n_4(D)
  # DEBUG D#366ptD.0 => D#367ptD.0
  # DEBUG __valueD.65374 => D#366ptD.0
  # DEBUG __itD.54639 => NULL
  # DEBUG __itD.54605 => NULL
  # DEBUG D#258ptD.0 => D#366ptD.0
  # DEBUG __nD.65378 => __n_4(D)
  # DEBUG __valueD.65377 => D#258ptD.0
  # DEBUG __tmpD.65380 => _52
  # DEBUG __niterD.65381 => __n_4(D)
  # DEBUG __firstD.65379 => _56
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 7431, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __n_71 = PHI <__n_4(D)(6), __n_53(8)>
  # PT = { D.65393 } (escaped heap)
  # __first_72 = PHI <_56(6), __first_54(8)>
  # .MEM_74 = PHI <.MEM_64(6), .MEM_70(8)>
  # DEBUG __niterD.65381 => __n_71
  # DEBUG __firstD.65379 => __first_72
  # .MEM_70 = VDEF <.MEM_74>
  *__first_72 = _52;
  # RANGE [0, 18446744073709551614]
  __n_53 = __n_71 + 18446744073709551615;
  # DEBUG __niterD.65381 => __n_53
  # PT = { D.65393 } (escaped heap)
  __first_54 = __first_72 + 4;
  # DEBUG __firstD.65379 => __first_54
  # DEBUG __niterD.65381 => __n_53
  # DEBUG __firstD.65379 => __first_54
  if (__n_53 == 0)
    goto <bb 9>;
  else
    goto <bb 8>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 6762, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 669, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  _42 = __n_4(D) * 4;
  # PT = { D.65393 } (escaped heap)
  __first_16 = _56 + _42;
  # VUSE <.MEM_70>
  pretmp_25 = MEM[(intD.9 * &)this_2(D)];
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.65393 } (escaped heap)
  # __first_45 = PHI <__first_16(9), 0B(30)>
  # .MEM_47 = PHI <.MEM_70(9), .MEM_1(D)(30)>
  # PT = nonlocal { D.65393 } (escaped heap)
  # _31 = PHI <_51(9), _76(30)>
  # PT = null { D.65393 } (escaped heap)
  # __first_8 = PHI <_56(9), 0B(30)>
  # PT = nonlocal escaped 
  # prephitmp_26 = PHI <pretmp_25(9), __first_13(30)>
  # DEBUG D#534ptD.0 => &this_2(D)->D.35374._M_implD.34865
  # DEBUG thisD.65300 => &__tmpD.65298.D.35374._M_implD.34865
  # DEBUG __xD.65299 => D#534ptD.0
  # DEBUG D#257ptD.0 => &D#534ptD.0->_M_startD.34867
  # DEBUG D#256ptD.0 => &MEM[(struct _Vector_implD.34842 *)&__tmpD.65298]._M_startD.34867
  # DEBUG __aD.65302 => D#256ptD.0
  # DEBUG __bD.65301 => D#257ptD.0
  # DEBUG __tmpD.65303 => __first_8
  # DEBUG D#1010ptD.0 => MEM[(intD.9 * &)this_2(D)]
  # .MEM_73 = VDEF <.MEM_47>
  MEM[(intD.9 * &)this_2(D)] = __first_8;
  # DEBUG D#255ptD.0 => &D#534ptD.0->_M_finishD.34868
  # DEBUG D#254ptD.0 => &MEM[(struct _Vector_implD.34842 *)&__tmpD.65298]._M_finishD.34868
  # DEBUG __aD.65305 => D#254ptD.0
  # DEBUG __bD.65304 => D#255ptD.0
  # DEBUG __tmpD.65306 => __first_45
  # .MEM_75 = VDEF <.MEM_73>
  MEM[(intD.9 * &)this_2(D) + 8] = __first_45;
  # DEBUG D#253ptD.0 => &D#534ptD.0->_M_end_of_storageD.34869
  # DEBUG D#252ptD.0 => &MEM[(struct _Vector_implD.34842 *)&__tmpD.65298]._M_end_of_storageD.34869
  # DEBUG __aD.65308 => D#252ptD.0
  # DEBUG __bD.65307 => D#253ptD.0
  # DEBUG __tmpD.65309 => _31
  # .MEM_77 = VDEF <.MEM_75>
  MEM[(intD.9 * &)this_2(D) + 16] = _31;
  # DEBUG thisD.65310 => &__tmpD.65298
  # DEBUG D#245ptD.0 => &__tmpD.65298.D.35374
  # DEBUG thisD.53653 => D#245ptD.0
  # DEBUG D#248ptD.0 => __tmpD.65298.D.35374._M_implD.34865._M_finishD.34868
  # DEBUG D#247ptD.0 => __tmpD.65298.D.35374._M_implD.34865._M_startD.34867
  # DEBUG __firstD.53650 => D#247ptD.0
  # DEBUG __lastD.53651 => D#248ptD.0
  # DEBUG D.53652 => NULL
  # DEBUG D#150ptD.0 => D#247ptD.0
  # DEBUG D#151ptD.0 => D#248ptD.0
  # DEBUG __firstD.53061 => D#150ptD.0
  # DEBUG __lastD.53060 => D#151ptD.0
  # DEBUG D#149ptD.0 => D#151ptD.0
  # DEBUG D#148ptD.0 => D#150ptD.0
  # DEBUG D#146ptD.0 => D#148ptD.0
  # DEBUG D#147ptD.0 => D#149ptD.0
  # DEBUG D.53050 => D#146ptD.0
  # DEBUG D.53049 => D#147ptD.0
  # DEBUG D#246ptD.0 => &__tmpD.65298.D.35374
  # DEBUG thisD.65311 => D#246ptD.0
  # DEBUG D#244ptD.0 => D#246ptD.0->_M_implD.34865._M_end_of_storageD.34869
  # DEBUG D#243ptD.0 => (long intD.12) D#244ptD.0
  # DEBUG D#242ptD.0 => (long intD.12) D#1010ptD.0
  # DEBUG D#241ptD.0 => D#243ptD.0 - D#242ptD.0
  # DEBUG D#240ptD.0 => D#241ptD.0 /[ex] 4
  # DEBUG D#239ptD.0 => (long unsigned intD.14) D#240ptD.0
  # DEBUG thisD.65314 => D#246ptD.0
  # DEBUG __pD.65313 => D#1010ptD.0
  # DEBUG __nD.65312 => D#239ptD.0
  if (prephitmp_26 != 0B)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 576, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#237ptD.0 => &D#246ptD.0->_M_implD.34865
  # DEBUG D#235ptD.0 => D#237ptD.0
  # DEBUG D#236ptD.0 => D#239ptD.0
  # DEBUG __pD.65318 => D#1010ptD.0
  # DEBUG __aD.65316 => D#235ptD.0
  # DEBUG __nD.65317 => D#236ptD.0
  # DEBUG D#234ptD.0 => D#236ptD.0
  # DEBUG D#233ptD.0 => D#235ptD.0
  # DEBUG D#231ptD.0 => D#233ptD.0
  # DEBUG D#232ptD.0 => D#234ptD.0
  # DEBUG __pD.65321 => D#1010ptD.0
  # DEBUG thisD.65319 => D#231ptD.0
  # DEBUG D.65320 => D#232ptD.0
  # .MEM_78 = VDEF <.MEM_77>
  # USE = nonlocal null { D.65393 } (escaped heap)
  # CLB = nonlocal null { D.65393 } (escaped heap)
  _ZdlPvD.2766 (prephitmp_26);
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       10 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_60 = PHI <.MEM_77(10), .MEM_78(11)>
  # DEBUG D#238ptD.0 => &D#246ptD.0->_M_implD.34865
  # DEBUG thisD.65322 => D#238ptD.0
  # DEBUG thisD.65323 => D#238ptD.0
  # DEBUG thisD.65324 => D#238ptD.0
  # .MEM_84 = VDEF <.MEM_60>
  __tmpD.65298 ={v} {CLOBBER};
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 1800, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       2 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#87ptD.0 => this_2(D)
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __first_12 = MEM[(intD.9 * *)this_2(D) + 8B];
  # DEBUG D#87ptD.0 => this_2(D)
  # DEBUG thisD.57511 => D#87ptD.0
  # DEBUG thisD.57510 => D#87ptD.0
  _21 = (long intD.12) __first_12;
  _22 = _21 - _5;
  # RANGE [-2305843009213693952, 2305843009213693951]
  _23 = _22 /[ex] 4;
  # RANGE ~[2305843009213693952, 16140901064495857663]
  _24 = (size_typeD.34950) _23;
  if (__n_4(D) > _24)
    goto <bb 14>;
  else
    goto <bb 23>;
;;    succ:       14 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.57558 => this_2(D)
  # DEBUG D#100ptD.0 => &this_2(D)->D.35374._M_implD.34865._M_finishD.34868
  # DEBUG thisD.57560 => NULL
  # DEBUG __iD.57559 => D#100ptD.0
  # DEBUG thisD.57554 => this_2(D)
  # DEBUG D#156ptD.0 => &this_2(D)->D.35374._M_implD.34865._M_startD.34867
  # DEBUG thisD.57556 => NULL
  # DEBUG __iD.57555 => D#156ptD.0
  # VUSE <.MEM_1(D)>
  _17 = MEM[(const intD.9 &)__val_6(D)];
  # DEBUG D#381ptD.0 => __val_6(D)
  # DEBUG __firstD.57577 => __first_13
  # DEBUG __lastD.57578 => __first_12
  # DEBUG D#380ptD.0 => D#381ptD.0
  # DEBUG __valueD.57545 => D#380ptD.0
  # DEBUG __itD.57552 => __first_12
  # DEBUG __itD.54864 => __first_12
  # DEBUG thisD.54828 => NULL
  # DEBUG __itD.57550 => __first_13
  # DEBUG __itD.54867 => __first_13
  # DEBUG thisD.54828 => NULL
  # DEBUG D#251ptD.0 => D#380ptD.0
  # DEBUG __firstD.57548 => __first_13
  # DEBUG __lastD.57547 => __first_12
  # DEBUG __valueD.57546 => D#251ptD.0
  # DEBUG __tmpD.57549 => _17
  # DEBUG __firstD.57548 => __first_13
  if (__first_12 == __first_13)
    goto <bb 19>;
  else
    goto <bb 15>;
;;    succ:       19 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       15 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_41 = PHI <__first_13(15), __first_30(17)>
  # .MEM_63 = PHI <.MEM_1(D)(15), .MEM_37(17)>
  # DEBUG __firstD.57548 => __first_41
  # .MEM_37 = VDEF <.MEM_63>
  *__first_41 = _17;
  # PT = nonlocal escaped 
  __first_30 = __first_41 + 4;
  # DEBUG __firstD.57548 => __first_30
  # DEBUG __firstD.57548 => __first_30
  if (__first_12 == __first_30)
    goto <bb 18>;
  else
    goto <bb 17>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 16>;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 17, next block 19, flags: (NEW)
;;    pred:       16 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_37>
  pretmp_80 = MEM[(const intD.9 &)__val_6(D)];
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_67 = PHI <.MEM_37(18), .MEM_1(D)(14)>
  # prephitmp_81 = PHI <pretmp_80(18), _17(14)>
  # DEBUG D#533ptD.0 => &this_2(D)->D.35374
  # DEBUG thisD.57540 => D#533ptD.0
  # DEBUG D#87ptD.0 => this_2(D)
  # DEBUG D#87ptD.0 => this_2(D)
  # DEBUG thisD.57538 => D#87ptD.0
  # DEBUG thisD.57537 => D#87ptD.0
  # RANGE [1, 18446744073709551615]
  __n_10 = __n_4(D) - _24;
  # DEBUG D#1009ptD.0 => MEM[(const intD.9 &)__val_6(D)]
  # DEBUG D#373ptD.0 => __val_6(D)
  # DEBUG __firstD.57513 => __first_12
  # DEBUG __nD.57514 => __n_10
  # DEBUG D#372ptD.0 => D#373ptD.0
  # DEBUG __xD.57517 => D#372ptD.0
  # DEBUG D.57516 => D#374ptD.0
  # DEBUG D#371ptD.0 => D#372ptD.0
  # DEBUG __firstD.57520 => __first_12
  # DEBUG __nD.57519 => __n_10
  # DEBUG D#370ptD.0 => D#371ptD.0
  # DEBUG __xD.57518 => D#370ptD.0
  # DEBUG __assignableD.57522 => 1
  # DEBUG D#369ptD.0 => D#370ptD.0
  # DEBUG __firstD.57525 => __first_12
  # DEBUG __nD.57524 => __n_10
  # DEBUG D#368ptD.0 => D#369ptD.0
  # DEBUG __xD.57523 => D#368ptD.0
  # DEBUG D#367ptD.0 => D#368ptD.0
  # DEBUG __firstD.57528 => __first_12
  # DEBUG __nD.57527 => __n_10
  # DEBUG D#366ptD.0 => D#367ptD.0
  # DEBUG __valueD.57526 => D#366ptD.0
  # DEBUG __itD.54639 => __first_12
  # DEBUG __itD.54605 => __first_12
  # DEBUG D#258ptD.0 => D#366ptD.0
  # DEBUG __firstD.57531 => __first_12
  # DEBUG __nD.57530 => __n_10
  # DEBUG __valueD.57529 => D#258ptD.0
  # DEBUG __tmpD.57532 => D#1009ptD.0
  # DEBUG __niterD.57533 => __n_10
  # DEBUG __niterD.57533 => __n_10
  # DEBUG __firstD.57531 => __first_12
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       21 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __n_97 = PHI <__n_27(21), __n_10(19)>
  # PT = nonlocal escaped 
  # __first_96 = PHI <__first_28(21), __first_12(19)>
  # .MEM_94 = PHI <.MEM_38(21), .MEM_67(19)>
  # DEBUG __niterD.57533 => __n_97
  # DEBUG __firstD.57531 => __first_96
  # .MEM_38 = VDEF <.MEM_94>
  *__first_96 = prephitmp_81;
  # RANGE [0, 18446744073709551614]
  __n_27 = __n_97 + 18446744073709551615;
  # DEBUG __niterD.57533 => __n_27
  # PT = nonlocal escaped 
  __first_28 = __first_96 + 4;
  # DEBUG __firstD.57531 => __first_28
  # DEBUG __niterD.57533 => __n_27
  # DEBUG __firstD.57531 => __first_28
  if (__n_27 == 0)
    goto <bb 22>;
  else
    goto <bb 21>;
;;    succ:       22 [9.9%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [90.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 1, count 0, freq 8200, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [90.1%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       20 [9.9%]  (TRUE_VALUE,EXECUTABLE)
  _83 = __n_10 * 4;
  # PT = nonlocal escaped 
  __first_59 = __first_12 + _83;
  # .MEM_11 = VDEF <.MEM_38>
  this_2(D)->D.35374._M_implD.34865._M_finishD.34868 = __first_59;
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       13 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1(D)>
  _15 = MEM[(const intD.9 &)__val_6(D)];
  # DEBUG D#367ptD.0 => __val_6(D)
  # DEBUG __firstD.57565 => __first_13
  # DEBUG __nD.57566 => __n_4(D)
  # DEBUG D#366ptD.0 => D#367ptD.0
  # DEBUG __valueD.57568 => D#366ptD.0
  # DEBUG __itD.54639 => __first_13
  # DEBUG __itD.54605 => __first_13
  # DEBUG D#258ptD.0 => D#366ptD.0
  # DEBUG __firstD.57571 => __first_13
  # DEBUG __nD.57570 => __n_4(D)
  # DEBUG __valueD.57569 => D#258ptD.0
  # DEBUG __tmpD.57572 => _15
  # DEBUG __niterD.57573 => __n_4(D)
  # DEBUG __niterD.57573 => __n_4(D)
  # DEBUG __firstD.57571 => __first_13
  if (__n_4(D) == 0)
    goto <bb 28>;
  else
    goto <bb 24>;
;;    succ:       28 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 24, next block 26, flags: (NEW)
;;    pred:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                27 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __n_35 = PHI <__n_4(D)(24), __n_32(27)>
  # PT = nonlocal escaped 
  # __first_61 = PHI <__first_13(24), __first_33(27)>
  # .MEM_68 = PHI <.MEM_1(D)(24), .MEM_39(27)>
  # DEBUG __niterD.57573 => __n_35
  # DEBUG __firstD.57571 => __first_61
  # .MEM_39 = VDEF <.MEM_68>
  *__first_61 = _15;
  # RANGE [0, 18446744073709551614]
  __n_32 = __n_35 + 18446744073709551615;
  # DEBUG __niterD.57573 => __n_32
  # PT = nonlocal escaped 
  __first_33 = __first_61 + 4;
  # DEBUG __firstD.57571 => __first_33
  # DEBUG __niterD.57573 => __n_32
  # DEBUG __firstD.57571 => __first_33
  if (__n_32 == 0)
    goto <bb 26>;
  else
    goto <bb 27>;
;;    succ:       26 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  _98 = __n_4(D) * 4;
  # PT = nonlocal escaped 
  __first_43 = __first_13 + _98;
  goto <bb 28>;
;;    succ:       28 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 26, next block 28, flags: (NEW)
;;    pred:       25 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       26 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_62 = PHI <__first_43(26), __first_13(23)>
  # .MEM_69 = PHI <.MEM_39(26), .MEM_1(D)(23)>
  # DEBUG D#155ptD.0 => this_2(D)
  # DEBUG __posD.57563 => __first_62
  # DEBUG D#154ptD.0 => D#155ptD.0
  # DEBUG thisD.57564 => D#154ptD.0
  # DEBUG D#152ptD.0 => &D#154ptD.0->D.35374
  # DEBUG thisD.53074 => D#152ptD.0
  # DEBUG D#153ptD.0 => D#154ptD.0->D.35374._M_implD.34865._M_finishD.34868
  # DEBUG __firstD.53064 => __first_62
  # DEBUG __lastD.53065 => D#153ptD.0
  # DEBUG D.53066 => NULL
  # DEBUG D#150ptD.0 => __first_62
  # DEBUG D#151ptD.0 => D#153ptD.0
  # DEBUG __firstD.53061 => D#150ptD.0
  # DEBUG __lastD.53060 => D#151ptD.0
  # DEBUG D#149ptD.0 => D#151ptD.0
  # DEBUG D#148ptD.0 => D#150ptD.0
  # DEBUG D#146ptD.0 => D#148ptD.0
  # DEBUG D#147ptD.0 => D#149ptD.0
  # DEBUG D.53050 => D#146ptD.0
  # DEBUG D.53049 => D#147ptD.0
  # .MEM_40 = VDEF <.MEM_69>
  MEM[(intD.9 * *)this_2(D) + 8B] = __first_62;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 2535, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       12 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                28 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_20 = PHI <.MEM_84(12), .MEM_11(22), .MEM_40(28)>
  # VUSE <.MEM_20>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 30, loop depth 0, count 0, freq 74, maybe hot
;;    prev block 29, next block 1, flags: (NEW, REACHABLE)
;;    pred:       3 [10.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _46 = __n_4(D) * 4;
  # PT = nonlocal 
  # ALIGN = 4, MISALIGN = 0
  _76 = (intD.9 *) _46;
  # DEBUG D#378ptD.0 => &__tmpD.65298
  # DEBUG D#378ptD.0 => &__tmpD.65298
  # DEBUG D#1008ptD.0 => MEM[(const intD.9 &)__val_6(D)]
  # DEBUG D#379ptD.0 => __val_6(D)
  # DEBUG __nD.65361 => __n_4(D)
  # DEBUG D#376ptD.0 => D#378ptD.0
  # DEBUG thisD.65358 => D#376ptD.0
  # DEBUG thisD.65359 => D#378ptD.0
  # DEBUG D#377ptD.0 => D#379ptD.0
  # DEBUG __valueD.65360 => D#377ptD.0
  # DEBUG D#375ptD.0 => &D#376ptD.0->D.35374
  # DEBUG thisD.54797 => D#375ptD.0
  # DEBUG D#373ptD.0 => D#377ptD.0
  # DEBUG __firstD.65365 => NULL
  # DEBUG __nD.65364 => __n_4(D)
  # DEBUG D#372ptD.0 => D#373ptD.0
  # DEBUG __xD.65362 => D#372ptD.0
  # DEBUG D.65363 => D#374ptD.0
  # DEBUG D#371ptD.0 => D#372ptD.0
  # DEBUG __firstD.65368 => NULL
  # DEBUG __nD.65367 => __n_4(D)
  # DEBUG D#370ptD.0 => D#371ptD.0
  # DEBUG __xD.65366 => D#370ptD.0
  # DEBUG __assignableD.65370 => 1
  # DEBUG D#369ptD.0 => D#370ptD.0
  # DEBUG __firstD.65373 => NULL
  # DEBUG __nD.65372 => __n_4(D)
  # DEBUG D#368ptD.0 => D#369ptD.0
  # DEBUG __xD.65371 => D#368ptD.0
  # DEBUG D#367ptD.0 => D#368ptD.0
  # DEBUG __firstD.65376 => NULL
  # DEBUG __nD.65375 => __n_4(D)
  # DEBUG D#366ptD.0 => D#367ptD.0
  # DEBUG __valueD.65374 => D#366ptD.0
  # DEBUG __itD.54639 => NULL
  # DEBUG __itD.54605 => NULL
  # DEBUG D#258ptD.0 => D#366ptD.0
  # DEBUG __firstD.65379 => NULL
  # DEBUG __nD.65378 => __n_4(D)
  # DEBUG __valueD.65377 => D#258ptD.0
  # DEBUG __tmpD.65380 => D#1008ptD.0
  # DEBUG __niterD.65381 => __n_4(D)
  # DEBUG __niterD.65381 => __n_4(D)
  # DEBUG __firstD.65379 => 0B
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

}


Creating dr for MEM[(int * *)this_2(D)]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_2(D)]
Creating dr for MEM[(int * *)this_2(D) + 16B]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_2(D) + 16B]
Creating dr for *__first_72
analyze_innermost: success.
	base_address: _56
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *_56
	Access function 0: {0B, +, 4}_4
Creating dr for *__first_72
analyze_innermost: success.
	base_address: _56
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *_56
	Access function 0: {0B, +, 4}_4
Creating dr for *__first_72
analyze_innermost: success.
	base_address: _56
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *_56
	Access function 0: {0B, +, 4}_4
Creating dr for *__first_72
analyze_innermost: success.
	base_address: _56
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *_56
	Access function 0: {0B, +, 4}_4
Analyzing # of iterations of loop 4
  exit condition [__n_4(D) + 18446744073709551615, + , 18446744073709551615] != 0
  bounds on difference of bases: -18446744073709551615 ... 0
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations __n_4(D) + 18446744073709551615, bounded by 0x0ffffffffffffffff
Creating dr for *__first_72
analyze_innermost: success.
	base_address: _56
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *_56
	Access function 0: {0B, +, 4}_4
Creating dr for *__first_72
analyze_innermost: success.
	base_address: _56
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *_56
	Access function 0: {0B, +, 4}_4
Creating dr for *__first_72
analyze_innermost: success.
	base_address: _56
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *_56
	Access function 0: {0B, +, 4}_4
Creating dr for *__first_72
analyze_innermost: success.
	base_address: _56
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *_56
	Access function 0: {0B, +, 4}_4
Analyzing # of iterations of loop 4
  exit condition [__n_4(D) + 18446744073709551615, + , 18446744073709551615] != 0
  bounds on difference of bases: -18446744073709551615 ... 0
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations __n_4(D) + 18446744073709551615, bounded by 0x0ffffffffffffffff
Creating dr for MEM[(int * &)this_2(D)]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(int * &)this_2(D)]
Creating dr for MEM[(int * &)this_2(D)]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(int * &)this_2(D)]
Creating dr for MEM[(int * &)this_2(D) + 8]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(int * &)this_2(D) + 8]
Creating dr for MEM[(int * &)this_2(D) + 16]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(int * &)this_2(D) + 16]
Creating dr for MEM[(int * *)this_2(D) + 8B]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_2(D) + 8B]
Creating dr for MEM[(const int &)__val_6(D)]
analyze_innermost: success.
	base_address: __val_6(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__val_6(D)]
Creating dr for *__first_41
analyze_innermost: success.
	base_address: __first_13
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_13
	Access function 0: {0B, +, 4}_2
Creating dr for *__first_41
analyze_innermost: success.
	base_address: __first_13
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_13
	Access function 0: {0B, +, 4}_2
Creating dr for *__first_41
analyze_innermost: success.
	base_address: __first_13
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_13
	Access function 0: {0B, +, 4}_2
Creating dr for *__first_41
analyze_innermost: success.
	base_address: __first_13
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_13
	Access function 0: {0B, +, 4}_2
Analyzing # of iterations of loop 2
  exit condition [__first_13 + 4, + , 4](no_overflow) != __first_12
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551611
Applying pattern match.pd:114, generic-match.c:6953
  result:
    # of iterations ((unsigned long) __first_12 - (unsigned long) (__first_13 + 4)) /[ex] 4 & 4611686018427387903, bounded by 4611686018427387902
Analyzing # of iterations of loop 2
  exit condition [__first_13 + 4, + , 4](no_overflow) != __first_12
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551611
Applying pattern match.pd:114, generic-match.c:6953
  result:
    # of iterations ((unsigned long) __first_12 - (unsigned long) (__first_13 + 4)) /[ex] 4 & 4611686018427387903, bounded by 4611686018427387902
Creating dr for *__first_41
analyze_innermost: success.
	base_address: __first_13
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_13
	Access function 0: {0B, +, 4}_2
Creating dr for *__first_41
analyze_innermost: success.
	base_address: __first_13
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_13
	Access function 0: {0B, +, 4}_2
Creating dr for *__first_41
analyze_innermost: success.
	base_address: __first_13
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_13
	Access function 0: {0B, +, 4}_2
Creating dr for *__first_41
analyze_innermost: success.
	base_address: __first_13
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_13
	Access function 0: {0B, +, 4}_2
Analyzing # of iterations of loop 2
  exit condition [__first_13 + 4, + , 4](no_overflow) != __first_12
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551611
Applying pattern match.pd:114, generic-match.c:6953
  result:
    # of iterations ((unsigned long) __first_12 - (unsigned long) (__first_13 + 4)) /[ex] 4 & 4611686018427387903, bounded by 4611686018427387902
Creating dr for MEM[(const int &)__val_6(D)]
analyze_innermost: success.
	base_address: __val_6(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__val_6(D)]
Creating dr for *__first_96
analyze_innermost: success.
	base_address: __first_12
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_12
	Access function 0: {0B, +, 4}_1
Creating dr for *__first_96
analyze_innermost: success.
	base_address: __first_12
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_12
	Access function 0: {0B, +, 4}_1
Creating dr for *__first_96
analyze_innermost: success.
	base_address: __first_12
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_12
	Access function 0: {0B, +, 4}_1
Creating dr for *__first_96
analyze_innermost: success.
	base_address: __first_12
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_12
	Access function 0: {0B, +, 4}_1
Analyzing # of iterations of loop 1
  exit condition [__n_10 + 18446744073709551615, + , 18446744073709551615] != 0
  bounds on difference of bases: -18446744073709551614 ... 0
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations __n_10 + 18446744073709551615, bounded by 0x0fffffffffffffffe
Creating dr for *__first_96
analyze_innermost: success.
	base_address: __first_12
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_12
	Access function 0: {0B, +, 4}_1
Creating dr for *__first_96
analyze_innermost: success.
	base_address: __first_12
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_12
	Access function 0: {0B, +, 4}_1
Creating dr for *__first_96
analyze_innermost: success.
	base_address: __first_12
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_12
	Access function 0: {0B, +, 4}_1
Creating dr for *__first_96
analyze_innermost: success.
	base_address: __first_12
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_12
	Access function 0: {0B, +, 4}_1
Analyzing # of iterations of loop 1
  exit condition [__n_10 + 18446744073709551615, + , 18446744073709551615] != 0
  bounds on difference of bases: -18446744073709551614 ... 0
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations __n_10 + 18446744073709551615, bounded by 0x0fffffffffffffffe
Creating dr for this_2(D)->D.35374._M_impl._M_finish
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *this_2(D)
	Access function 0: 64
	Access function 1: 0
	Access function 2: 0
Creating dr for MEM[(const int &)__val_6(D)]
analyze_innermost: success.
	base_address: __val_6(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const int &)__val_6(D)]
Creating dr for *__first_61
analyze_innermost: success.
	base_address: __first_13
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_13
	Access function 0: {0B, +, 4}_3
Creating dr for *__first_61
analyze_innermost: success.
	base_address: __first_13
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_13
	Access function 0: {0B, +, 4}_3
Creating dr for *__first_61
analyze_innermost: success.
	base_address: __first_13
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_13
	Access function 0: {0B, +, 4}_3
Creating dr for *__first_61
analyze_innermost: success.
	base_address: __first_13
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_13
	Access function 0: {0B, +, 4}_3
Analyzing # of iterations of loop 3
  exit condition [__n_4(D) + 18446744073709551615, + , 18446744073709551615] != 0
  bounds on difference of bases: -18446744073709551615 ... 0
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations __n_4(D) + 18446744073709551615, bounded by 0x0ffffffffffffffff
Creating dr for *__first_61
analyze_innermost: success.
	base_address: __first_13
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_13
	Access function 0: {0B, +, 4}_3
Creating dr for *__first_61
analyze_innermost: success.
	base_address: __first_13
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_13
	Access function 0: {0B, +, 4}_3
Creating dr for *__first_61
analyze_innermost: success.
	base_address: __first_13
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_13
	Access function 0: {0B, +, 4}_3
Creating dr for *__first_61
analyze_innermost: success.
	base_address: __first_13
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	aligned to: 256
	base_object: *__first_13
	Access function 0: {0B, +, 4}_3
Analyzing # of iterations of loop 3
  exit condition [__n_4(D) + 18446744073709551615, + , 18446744073709551615] != 0
  bounds on difference of bases: -18446744073709551615 ... 0
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations __n_4(D) + 18446744073709551615, bounded by 0x0ffffffffffffffff
Creating dr for MEM[(int * *)this_2(D) + 8B]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_2(D) + 8B]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:46)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:40)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:21)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:38, LOOPS:4, CONDITIONS:11, STMTS:420)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_13 })
  {
    <bb 2>:
    # VUSE <.MEM_1(D)>
    __first_13 = MEM[(int * *)this_2(D)];
    # DEBUG D#157 => this_2(D)
    # VUSE <.MEM_1(D)>
    _14 = MEM[(int * *)this_2(D) + 16B];
    # DEBUG D#157 => this_2(D)
    # DEBUG this => D#157
    # DEBUG this => D#157
    _9 = (long int) _14;
    _5 = (long int) __first_13;
    _3 = _9 - _5;
    _18 = _3 /[ex] 4;
    _19 = (size_type) _18;
    if (__n_4(D) > _19)
      goto <bb 3>;
    else
      goto <bb 13>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 bb_30 })
  {
    <bb 3>:
    # DEBUG this => this_2(D)
    # DEBUG __n => __n_4(D)
    # DEBUG __val => __val_6(D)
    # DEBUG D#532 => &this_2(D)->D.35374
    # DEBUG this => D#532
    # DEBUG D#1007 => &MEM[(struct _Vector_base *)this_2(D)]._M_impl
    # DEBUG this => &__tmp
    # DEBUG __n => __n_4(D)
    # DEBUG __value => __val_6(D)
    # DEBUG __a => D#1007
    # DEBUG D#531 => &__tmp.D.35374
    # DEBUG this => D#531
    # DEBUG __n => __n_4(D)
    # DEBUG __a => D#1007
    # DEBUG D#530 => &D#531->_M_impl
    # DEBUG this => D#530
    # DEBUG __a => D#1007
    # DEBUG this => D#530
    # DEBUG __a => D#1007
    # DEBUG this => D#530
    # DEBUG D.57426 => D#1007
    # DEBUG this => D#531
    # DEBUG __n => __n_4(D)
    # DEBUG D#497 => D#531
    # DEBUG __n => __n_4(D)
    # DEBUG this => D#497
    # DEBUG D#496 => D#497
    if (__n_4(D) != 0)
      goto <bb 4>;
    else
      goto <bb 30>;

  }
  bb_4 (preds = {bb_3 }, succs = {bb_5 bb_6 })
  {
    <bb 4>:
    # DEBUG D#495 => &D#496->_M_impl
    # DEBUG D#494 => D#495
    # DEBUG __n => __n_4(D)
    # DEBUG __a => D#494
    # DEBUG D#493 => D#494
    # DEBUG D#491 => D#493
    # DEBUG D#492 => 0B
    # DEBUG __n => __n_4(D)
    # DEBUG this => D#491
    # DEBUG D.65388 => D#492
    # DEBUG D#490 => D#491
    # DEBUG D#484 => D#490
    # DEBUG this => D#484
    if (__n_4(D) > 4611686018427387903)
      goto <bb 5>;
    else
      goto <bb 6>;

  }
  bb_5 (preds = {bb_4 }, succs = {})
  {
    <bb 5>:
    # .MEM_65 = VDEF <.MEM_1(D)>
    std::__throw_bad_alloc ();

  }
  bb_6 (preds = {bb_4 }, succs = {bb_7 })
  {
    <bb 6>:
    _55 = __n_4(D) * 4;
    # .MEM_64 = VDEF <.MEM_1(D)>
    _56 = operator new (_55);
    _51 = _56 + _55;
    # DEBUG D#378 => &__tmp
    # DEBUG D#378 => &__tmp
    # VUSE <.MEM_64>
    _52 = MEM[(const int &)__val_6(D)];
    # DEBUG D#379 => __val_6(D)
    # DEBUG __n => __n_4(D)
    # DEBUG D#376 => D#378
    # DEBUG this => D#376
    # DEBUG this => D#378
    # DEBUG D#377 => D#379
    # DEBUG __value => D#377
    # DEBUG D#375 => &D#376->D.35374
    # DEBUG this => D#375
    # DEBUG D#373 => D#377
    # DEBUG __first => NULL
    # DEBUG __n => __n_4(D)
    # DEBUG D#372 => D#373
    # DEBUG __x => D#372
    # DEBUG D.65363 => D#374
    # DEBUG D#371 => D#372
    # DEBUG __first => NULL
    # DEBUG __n => __n_4(D)
    # DEBUG D#370 => D#371
    # DEBUG __x => D#370
    # DEBUG __assignable => 1
    # DEBUG D#369 => D#370
    # DEBUG __first => NULL
    # DEBUG __n => __n_4(D)
    # DEBUG D#368 => D#369
    # DEBUG __x => D#368
    # DEBUG D#367 => D#368
    # DEBUG __first => NULL
    # DEBUG __n => __n_4(D)
    # DEBUG D#366 => D#367
    # DEBUG __value => D#366
    # DEBUG __it => NULL
    # DEBUG __it => NULL
    # DEBUG D#258 => D#366
    # DEBUG __first => NULL
    # DEBUG __n => __n_4(D)
    # DEBUG __value => D#258
    # DEBUG __tmp => _52
    # DEBUG __niter => __n_4(D)
    # DEBUG __niter => __n_4(D)
    # DEBUG __first => _56
    # DEBUG D#378 => &__tmp
    # DEBUG D#379 => __val_6(D)
    # DEBUG __n => __n_4(D)
    # DEBUG D#376 => D#378
    # DEBUG this => D#376
    # DEBUG this => D#378
    # DEBUG D#377 => D#379
    # DEBUG __value => D#377
    # DEBUG D#375 => &D#376->D.35374
    # DEBUG this => D#375
    # DEBUG D#373 => D#377
    # DEBUG __first => NULL
    # DEBUG __n => __n_4(D)
    # DEBUG D#372 => D#373
    # DEBUG __x => D#372
    # DEBUG D.65363 => D#374
    # DEBUG D#371 => D#372
    # DEBUG __first => NULL
    # DEBUG __n => __n_4(D)
    # DEBUG D#370 => D#371
    # DEBUG __x => D#370
    # DEBUG __assignable => 1
    # DEBUG D#369 => D#370
    # DEBUG __first => NULL
    # DEBUG __n => __n_4(D)
    # DEBUG D#368 => D#369
    # DEBUG __x => D#368
    # DEBUG D#367 => D#368
    # DEBUG __first => NULL
    # DEBUG __n => __n_4(D)
    # DEBUG D#366 => D#367
    # DEBUG __value => D#366
    # DEBUG __it => NULL
    # DEBUG __it => NULL
    # DEBUG D#258 => D#366
    # DEBUG __n => __n_4(D)
    # DEBUG __value => D#258
    # DEBUG __tmp => _52
    # DEBUG __niter => __n_4(D)
    # DEBUG __first => _56

  }
  bb_9 (preds = {bb_7 }, succs = {bb_31 })
  {
    <bb 9>:

  }
  bb_31 (preds = {bb_9 }, succs = {bb_10 })
  {
    <bb 31>:
    _42 = __n_4(D) * 4;
    __first_16 = _56 + _42;
    # VUSE <.MEM_70>
    pretmp_25 = MEM[(int * &)this_2(D)];

  }
  bb_10 (preds = {bb_31 bb_30 }, succs = {bb_11 bb_12 })
  {
    <bb 10>:
    # __first_45 = PHI <__first_16(31), 0B(30)>
    # .MEM_47 = PHI <.MEM_70(31), .MEM_1(D)(30)>
    # _31 = PHI <_51(31), _76(30)>
    # __first_8 = PHI <_56(31), 0B(30)>
    # prephitmp_26 = PHI <pretmp_25(31), __first_13(30)>
    # DEBUG D#534 => &this_2(D)->D.35374._M_impl
    # DEBUG this => &__tmp.D.35374._M_impl
    # DEBUG __x => D#534
    # DEBUG D#257 => &D#534->_M_start
    # DEBUG D#256 => &MEM[(struct _Vector_impl *)&__tmp]._M_start
    # DEBUG __a => D#256
    # DEBUG __b => D#257
    # DEBUG __tmp => __first_8
    # DEBUG D#1010 => MEM[(int * &)this_2(D)]
    # .MEM_73 = VDEF <.MEM_47>
    MEM[(int * &)this_2(D)] = __first_8;
    # DEBUG D#255 => &D#534->_M_finish
    # DEBUG D#254 => &MEM[(struct _Vector_impl *)&__tmp]._M_finish
    # DEBUG __a => D#254
    # DEBUG __b => D#255
    # DEBUG __tmp => __first_45
    # .MEM_75 = VDEF <.MEM_73>
    MEM[(int * &)this_2(D) + 8] = __first_45;
    # DEBUG D#253 => &D#534->_M_end_of_storage
    # DEBUG D#252 => &MEM[(struct _Vector_impl *)&__tmp]._M_end_of_storage
    # DEBUG __a => D#252
    # DEBUG __b => D#253
    # DEBUG __tmp => _31
    # .MEM_77 = VDEF <.MEM_75>
    MEM[(int * &)this_2(D) + 16] = _31;
    # DEBUG this => &__tmp
    # DEBUG D#245 => &__tmp.D.35374
    # DEBUG this => D#245
    # DEBUG D#248 => __tmp.D.35374._M_impl._M_finish
    # DEBUG D#247 => __tmp.D.35374._M_impl._M_start
    # DEBUG __first => D#247
    # DEBUG __last => D#248
    # DEBUG D.53652 => NULL
    # DEBUG D#150 => D#247
    # DEBUG D#151 => D#248
    # DEBUG __first => D#150
    # DEBUG __last => D#151
    # DEBUG D#149 => D#151
    # DEBUG D#148 => D#150
    # DEBUG D#146 => D#148
    # DEBUG D#147 => D#149
    # DEBUG D.53050 => D#146
    # DEBUG D.53049 => D#147
    # DEBUG D#246 => &__tmp.D.35374
    # DEBUG this => D#246
    # DEBUG D#244 => D#246->_M_impl._M_end_of_storage
    # DEBUG D#243 => (long int) D#244
    # DEBUG D#242 => (long int) D#1010
    # DEBUG D#241 => D#243 - D#242
    # DEBUG D#240 => D#241 /[ex] 4
    # DEBUG D#239 => (long unsigned int) D#240
    # DEBUG this => D#246
    # DEBUG __p => D#1010
    # DEBUG __n => D#239
    if (prephitmp_26 != 0B)
      goto <bb 11>;
    else
      goto <bb 12>;

  }
  bb_11 (preds = {bb_10 }, succs = {bb_12 })
  {
    <bb 11>:
    # DEBUG D#237 => &D#246->_M_impl
    # DEBUG D#235 => D#237
    # DEBUG D#236 => D#239
    # DEBUG __p => D#1010
    # DEBUG __a => D#235
    # DEBUG __n => D#236
    # DEBUG D#234 => D#236
    # DEBUG D#233 => D#235
    # DEBUG D#231 => D#233
    # DEBUG D#232 => D#234
    # DEBUG __p => D#1010
    # DEBUG this => D#231
    # DEBUG D.65320 => D#232
    # .MEM_78 = VDEF <.MEM_77>
    operator delete (prephitmp_26);

  }
  bb_12 (preds = {bb_10 bb_11 }, succs = {bb_29 })
  {
    <bb 12>:
    # .MEM_60 = PHI <.MEM_77(10), .MEM_78(11)>
    # DEBUG D#238 => &D#246->_M_impl
    # DEBUG this => D#238
    # DEBUG this => D#238
    # DEBUG this => D#238
    # .MEM_84 = VDEF <.MEM_60>
    __tmp ={v} {CLOBBER};
    goto <bb 29>;

  }
  bb_13 (preds = {bb_2 }, succs = {bb_14 bb_23 })
  {
    <bb 13>:
    # DEBUG D#87 => this_2(D)
    # VUSE <.MEM_1(D)>
    __first_12 = MEM[(int * *)this_2(D) + 8B];
    # DEBUG D#87 => this_2(D)
    # DEBUG this => D#87
    # DEBUG this => D#87
    _21 = (long int) __first_12;
    _22 = _21 - _5;
    _23 = _22 /[ex] 4;
    _24 = (size_type) _23;
    if (__n_4(D) > _24)
      goto <bb 14>;
    else
      goto <bb 23>;

  }
  bb_14 (preds = {bb_13 }, succs = {bb_19 bb_15 })
  {
    <bb 14>:
    # DEBUG this => this_2(D)
    # DEBUG D#100 => &this_2(D)->D.35374._M_impl._M_finish
    # DEBUG this => NULL
    # DEBUG __i => D#100
    # DEBUG this => this_2(D)
    # DEBUG D#156 => &this_2(D)->D.35374._M_impl._M_start
    # DEBUG this => NULL
    # DEBUG __i => D#156
    # VUSE <.MEM_1(D)>
    _17 = MEM[(const int &)__val_6(D)];
    # DEBUG D#381 => __val_6(D)
    # DEBUG __first => __first_13
    # DEBUG __last => __first_12
    # DEBUG D#380 => D#381
    # DEBUG __value => D#380
    # DEBUG __it => __first_12
    # DEBUG __it => __first_12
    # DEBUG this => NULL
    # DEBUG __it => __first_13
    # DEBUG __it => __first_13
    # DEBUG this => NULL
    # DEBUG D#251 => D#380
    # DEBUG __first => __first_13
    # DEBUG __last => __first_12
    # DEBUG __value => D#251
    # DEBUG __tmp => _17
    # DEBUG __first => __first_13
    if (__first_12 == __first_13)
      goto <bb 19>;
    else
      goto <bb 15>;

  }
  bb_15 (preds = {bb_14 }, succs = {bb_16 })
  {
    <bb 15>:

  }
  bb_18 (preds = {bb_16 }, succs = {bb_33 })
  {
    <bb 18>:

  }
  bb_33 (preds = {bb_18 }, succs = {bb_19 })
  {
    <bb 33>:
    # VUSE <.MEM_37>
    pretmp_80 = MEM[(const int &)__val_6(D)];

  }
  bb_19 (preds = {bb_33 bb_14 }, succs = {bb_35 })
  {
    <bb 19>:
    # .MEM_67 = PHI <.MEM_37(33), .MEM_1(D)(14)>
    # prephitmp_81 = PHI <pretmp_80(33), _17(14)>

  }
  bb_35 (preds = {bb_19 }, succs = {bb_20 })
  {
    <bb 35>:
    # DEBUG D#533 => &this_2(D)->D.35374
    # DEBUG this => D#533
    # DEBUG D#87 => this_2(D)
    # DEBUG D#87 => this_2(D)
    # DEBUG this => D#87
    # DEBUG this => D#87
    __n_10 = __n_4(D) - _24;
    # DEBUG D#1009 => MEM[(const int &)__val_6(D)]
    # DEBUG D#373 => __val_6(D)
    # DEBUG __first => __first_12
    # DEBUG __n => __n_10
    # DEBUG D#372 => D#373
    # DEBUG __x => D#372
    # DEBUG D.57516 => D#374
    # DEBUG D#371 => D#372
    # DEBUG __first => __first_12
    # DEBUG __n => __n_10
    # DEBUG D#370 => D#371
    # DEBUG __x => D#370
    # DEBUG __assignable => 1
    # DEBUG D#369 => D#370
    # DEBUG __first => __first_12
    # DEBUG __n => __n_10
    # DEBUG D#368 => D#369
    # DEBUG __x => D#368
    # DEBUG D#367 => D#368
    # DEBUG __first => __first_12
    # DEBUG __n => __n_10
    # DEBUG D#366 => D#367
    # DEBUG __value => D#366
    # DEBUG __it => __first_12
    # DEBUG __it => __first_12
    # DEBUG D#258 => D#366
    # DEBUG __first => __first_12
    # DEBUG __n => __n_10
    # DEBUG __value => D#258
    # DEBUG __tmp => D#1009
    # DEBUG __niter => __n_10
    # DEBUG __niter => __n_10
    # DEBUG __first => __first_12

  }
  bb_22 (preds = {bb_20 }, succs = {bb_32 })
  {
    <bb 22>:

  }
  bb_32 (preds = {bb_22 }, succs = {bb_29 })
  {
    <bb 32>:
    _83 = __n_10 * 4;
    __first_59 = __first_12 + _83;
    # .MEM_11 = VDEF <.MEM_38>
    this_2(D)->D.35374._M_impl._M_finish = __first_59;
    goto <bb 29>;

  }
  bb_23 (preds = {bb_13 }, succs = {bb_28 bb_24 })
  {
    <bb 23>:
    # VUSE <.MEM_1(D)>
    _15 = MEM[(const int &)__val_6(D)];
    # DEBUG D#367 => __val_6(D)
    # DEBUG __first => __first_13
    # DEBUG __n => __n_4(D)
    # DEBUG D#366 => D#367
    # DEBUG __value => D#366
    # DEBUG __it => __first_13
    # DEBUG __it => __first_13
    # DEBUG D#258 => D#366
    # DEBUG __first => __first_13
    # DEBUG __n => __n_4(D)
    # DEBUG __value => D#258
    # DEBUG __tmp => _15
    # DEBUG __niter => __n_4(D)
    # DEBUG __niter => __n_4(D)
    # DEBUG __first => __first_13
    if (__n_4(D) == 0)
      goto <bb 28>;
    else
      goto <bb 24>;

  }
  bb_24 (preds = {bb_23 }, succs = {bb_25 })
  {
    <bb 24>:

  }
  bb_26 (preds = {bb_25 }, succs = {bb_34 })
  {
    <bb 26>:

  }
  bb_34 (preds = {bb_26 }, succs = {bb_28 })
  {
    <bb 34>:
    _98 = __n_4(D) * 4;
    __first_43 = __first_13 + _98;
    goto <bb 28>;

  }
  bb_28 (preds = {bb_34 bb_23 }, succs = {bb_36 })
  {
    <bb 28>:
    # __first_62 = PHI <__first_43(34), __first_13(23)>
    # .MEM_69 = PHI <.MEM_39(34), .MEM_1(D)(23)>

  }
  bb_36 (preds = {bb_28 }, succs = {bb_29 })
  {
    <bb 36>:
    # DEBUG D#155 => this_2(D)
    # DEBUG __pos => __first_62
    # DEBUG D#154 => D#155
    # DEBUG this => D#154
    # DEBUG D#152 => &D#154->D.35374
    # DEBUG this => D#152
    # DEBUG D#153 => D#154->D.35374._M_impl._M_finish
    # DEBUG __first => __first_62
    # DEBUG __last => D#153
    # DEBUG D.53066 => NULL
    # DEBUG D#150 => __first_62
    # DEBUG D#151 => D#153
    # DEBUG __first => D#150
    # DEBUG __last => D#151
    # DEBUG D#149 => D#151
    # DEBUG D#148 => D#150
    # DEBUG D#146 => D#148
    # DEBUG D#147 => D#149
    # DEBUG D.53050 => D#146
    # DEBUG D.53049 => D#147
    # .MEM_40 = VDEF <.MEM_69>
    MEM[(int * *)this_2(D) + 8B] = __first_62;

  }
  bb_29 (preds = {bb_12 bb_32 bb_36 }, succs = {bb_37 })
  {
    <bb 29>:
    # .MEM_20 = PHI <.MEM_84(12), .MEM_11(32), .MEM_40(36)>

  }
  bb_37 (preds = {bb_29 }, succs = {bb_1 })
  {
    <bb 37>:
    # VUSE <.MEM_20>
    return;

  }
  bb_30 (preds = {bb_3 }, succs = {bb_10 })
  {
    <bb 30>:
    _46 = __n_4(D) * 4;
    _76 = (int *) _46;
    # DEBUG D#378 => &__tmp
    # DEBUG D#378 => &__tmp
    # DEBUG D#1008 => MEM[(const int &)__val_6(D)]
    # DEBUG D#379 => __val_6(D)
    # DEBUG __n => __n_4(D)
    # DEBUG D#376 => D#378
    # DEBUG this => D#376
    # DEBUG this => D#378
    # DEBUG D#377 => D#379
    # DEBUG __value => D#377
    # DEBUG D#375 => &D#376->D.35374
    # DEBUG this => D#375
    # DEBUG D#373 => D#377
    # DEBUG __first => NULL
    # DEBUG __n => __n_4(D)
    # DEBUG D#372 => D#373
    # DEBUG __x => D#372
    # DEBUG D.65363 => D#374
    # DEBUG D#371 => D#372
    # DEBUG __first => NULL
    # DEBUG __n => __n_4(D)
    # DEBUG D#370 => D#371
    # DEBUG __x => D#370
    # DEBUG __assignable => 1
    # DEBUG D#369 => D#370
    # DEBUG __first => NULL
    # DEBUG __n => __n_4(D)
    # DEBUG D#368 => D#369
    # DEBUG __x => D#368
    # DEBUG D#367 => D#368
    # DEBUG __first => NULL
    # DEBUG __n => __n_4(D)
    # DEBUG D#366 => D#367
    # DEBUG __value => D#366
    # DEBUG __it => NULL
    # DEBUG __it => NULL
    # DEBUG D#258 => D#366
    # DEBUG __first => NULL
    # DEBUG __n => __n_4(D)
    # DEBUG __value => D#258
    # DEBUG __tmp => D#1008
    # DEBUG __niter => __n_4(D)
    # DEBUG __niter => __n_4(D)
    # DEBUG __first => 0B
    goto <bb 10>;

  }
  loop_4 (header = 7, latch = 8, niter = , upper_bound = 0x0ffffffffffffffff)
  {
    bb_7 (preds = {bb_6 bb_8 }, succs = {bb_9 bb_8 })
    {
      <bb 7>:
      # __n_71 = PHI <__n_4(D)(6), __n_53(8)>
      # __first_72 = PHI <_56(6), __first_54(8)>
      # .MEM_74 = PHI <.MEM_64(6), .MEM_70(8)>
      # DEBUG __niter => __n_71
      # DEBUG __first => __first_72
      # .MEM_70 = VDEF <.MEM_74>
      *__first_72 = _52;
      __n_53 = __n_71 + 18446744073709551615;
      # DEBUG __niter => __n_53
      __first_54 = __first_72 + 4;
      # DEBUG __first => __first_54
      # DEBUG __niter => __n_53
      # DEBUG __first => __first_54
      if (__n_53 == 0)
        goto <bb 9>;
      else
        goto <bb 8>;

    }
    bb_8 (preds = {bb_7 }, succs = {bb_7 })
    {
      <bb 8>:
      goto <bb 7>;

    }
  }
  loop_1 (header = 20, latch = 21, niter = , upper_bound = 0x0fffffffffffffffe)
  {
    bb_20 (preds = {bb_21 bb_35 }, succs = {bb_22 bb_21 })
    {
      <bb 20>:
      # __n_97 = PHI <__n_27(21), __n_10(35)>
      # __first_96 = PHI <__first_28(21), __first_12(35)>
      # .MEM_94 = PHI <.MEM_38(21), .MEM_67(35)>
      # DEBUG __niter => __n_97
      # DEBUG __first => __first_96
      # .MEM_38 = VDEF <.MEM_94>
      *__first_96 = prephitmp_81;
      __n_27 = __n_97 + 18446744073709551615;
      # DEBUG __niter => __n_27
      __first_28 = __first_96 + 4;
      # DEBUG __first => __first_28
      # DEBUG __niter => __n_27
      # DEBUG __first => __first_28
      if (__n_27 == 0)
        goto <bb 22>;
      else
        goto <bb 21>;

    }
    bb_21 (preds = {bb_20 }, succs = {bb_20 })
    {
      <bb 21>:
      goto <bb 20>;

    }
  }
  loop_2 (header = 16, latch = 17, niter = ((unsigned long) __first_12 - (unsigned long) (__first_13 + 4)) /[ex] 4 & 4611686018427387903, upper_bound = 4611686018427387902)
  {
    bb_16 (preds = {bb_15 bb_17 }, succs = {bb_18 bb_17 })
    {
      <bb 16>:
      # __first_41 = PHI <__first_13(15), __first_30(17)>
      # .MEM_63 = PHI <.MEM_1(D)(15), .MEM_37(17)>
      # DEBUG __first => __first_41
      # .MEM_37 = VDEF <.MEM_63>
      *__first_41 = _17;
      __first_30 = __first_41 + 4;
      # DEBUG __first => __first_30
      # DEBUG __first => __first_30
      if (__first_12 == __first_30)
        goto <bb 18>;
      else
        goto <bb 17>;

    }
    bb_17 (preds = {bb_16 }, succs = {bb_16 })
    {
      <bb 17>:
      goto <bb 16>;

    }
  }
  loop_3 (header = 25, latch = 27, niter = , upper_bound = 0x0ffffffffffffffff)
  {
    bb_25 (preds = {bb_24 bb_27 }, succs = {bb_26 bb_27 })
    {
      <bb 25>:
      # __n_35 = PHI <__n_4(D)(24), __n_32(27)>
      # __first_61 = PHI <__first_13(24), __first_33(27)>
      # .MEM_68 = PHI <.MEM_1(D)(24), .MEM_39(27)>
      # DEBUG __niter => __n_35
      # DEBUG __first => __first_61
      # .MEM_39 = VDEF <.MEM_68>
      *__first_61 = _15;
      __n_32 = __n_35 + 18446744073709551615;
      # DEBUG __niter => __n_32
      __first_33 = __first_61 + 4;
      # DEBUG __first => __first_33
      # DEBUG __niter => __n_32
      # DEBUG __first => __first_33
      if (__n_32 == 0)
        goto <bb 26>;
      else
        goto <bb 27>;

    }
    bb_27 (preds = {bb_25 }, succs = {bb_25 })
    {
      <bb 27>:
      goto <bb 25>;

    }
  }
}

Pass statistics:
----------------

void std::vector<_Tp, _Alloc>::_M_fill_assign(std::size_t, const value_type&) [with _Tp = int; _Alloc = std::allocator<int>; std::size_t = long unsigned int; std::vector<_Tp, _Alloc>::value_type = int] (struct vectorD.34569 * const thisD.35238, size_tD.2818 __nD.35239, const value_typeD.34937 & __valD.35240)
{
  intD.9 * D.65390;
  intD.9 * __firstD.65365;
  size_typeD.34950 __nD.65348;
  intD.9 * __tmpD.65309;
  intD.9 * __tmpD.65306;
  intD.9 * __tmpD.65303;
  struct vectorD.34569 __tmpD.65298;
  intD.9 * __firstD.57565;
  intD.9 * __firstD.57548;
  intD.9 * __firstD.57513;
  long unsigned intD.14 __nD.57514;
  long intD.12 _3;
  long intD.12 _5;
  long intD.12 _9;
  intD.9 * const _14;
  const intD.9 _15;
  const intD.9 _17;
  long intD.12 _18;
  size_typeD.34950 _19;
  long intD.12 _21;
  long intD.12 _22;
  long intD.12 _23;
  size_typeD.34950 _24;
  intD.9 * pretmp_25;
  intD.9 * prephitmp_26;
  intD.9 * _31;
  long unsigned intD.14 _42;
  long unsigned intD.14 _46;
  intD.9 * _51;
  const intD.9 _52;
  long unsigned intD.14 _55;
  intD.9 * _56;
  intD.9 * _76;
  const intD.9 pretmp_80;
  const intD.9 prephitmp_81;
  long unsigned intD.14 _83;
  long unsigned intD.14 _98;

;;   basic block 2, loop depth 0, count 0, freq 2535, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __first_13 = MEM[(intD.9 * *)this_2(D)];
  # DEBUG D#157ptD.0 => this_2(D)
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  _14 = MEM[(intD.9 * *)this_2(D) + 16B];
  # DEBUG D#157ptD.0 => this_2(D)
  # DEBUG thisD.57478 => D#157ptD.0
  # DEBUG thisD.57477 => D#157ptD.0
  _9 = (long intD.12) _14;
  _5 = (long intD.12) __first_13;
  _3 = _9 - _5;
  # RANGE [-2305843009213693952, 2305843009213693951]
  _18 = _3 /[ex] 4;
  # RANGE ~[2305843009213693952, 16140901064495857663]
  _19 = (size_typeD.34950) _18;
  if (__n_4(D) > _19)
    goto <bb 3>;
  else
    goto <bb 13>;
;;    succ:       3 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.65245 => this_2(D)
  # DEBUG __nD.65246 => __n_4(D)
  # DEBUG __valD.65247 => __val_6(D)
  # DEBUG D#532ptD.0 => &this_2(D)->D.35374
  # DEBUG thisD.65325 => D#532ptD.0
  # DEBUG D#1007ptD.0 => &MEM[(struct _Vector_baseD.34632 *)this_2(D)]._M_implD.34865
  # DEBUG thisD.65347 => &__tmpD.65298
  # DEBUG __nD.65348 => __n_4(D)
  # DEBUG __valueD.65349 => __val_6(D)
  # DEBUG __aD.65350 => D#1007ptD.0
  # DEBUG D#531ptD.0 => &__tmpD.65298.D.35374
  # DEBUG thisD.65353 => D#531ptD.0
  # DEBUG __nD.65352 => __n_4(D)
  # DEBUG __aD.65351 => D#1007ptD.0
  # DEBUG D#530ptD.0 => &D#531ptD.0->_M_implD.34865
  # DEBUG thisD.65355 => D#530ptD.0
  # DEBUG __aD.65354 => D#1007ptD.0
  # DEBUG thisD.57428 => D#530ptD.0
  # DEBUG __aD.57429 => D#1007ptD.0
  # DEBUG thisD.57425 => D#530ptD.0
  # DEBUG D.57426 => D#1007ptD.0
  # DEBUG thisD.65357 => D#531ptD.0
  # DEBUG __nD.65356 => __n_4(D)
  # DEBUG D#497ptD.0 => D#531ptD.0
  # DEBUG __nD.65382 => __n_4(D)
  # DEBUG thisD.65383 => D#497ptD.0
  # DEBUG D#496ptD.0 => D#497ptD.0
  if (__n_4(D) != 0)
    goto <bb 4>;
  else
    goto <bb 30>;
;;    succ:       4 [90.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [10.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 662, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [90.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#495ptD.0 => &D#496ptD.0->_M_implD.34865
  # DEBUG D#494ptD.0 => D#495ptD.0
  # DEBUG __nD.65386 => __n_4(D)
  # DEBUG __aD.65385 => D#494ptD.0
  # DEBUG D#493ptD.0 => D#494ptD.0
  # DEBUG D#491ptD.0 => D#493ptD.0
  # DEBUG D#492ptD.0 => 0B
  # DEBUG __nD.65389 => __n_4(D)
  # DEBUG thisD.65387 => D#491ptD.0
  # DEBUG D.65388 => D#492ptD.0
  # DEBUG D#490ptD.0 => D#491ptD.0
  # DEBUG D#484ptD.0 => D#490ptD.0
  # DEBUG thisD.57087 => D#484ptD.0
  if (__n_4(D) > 4611686018427387903)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 0
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_65 = VDEF <.MEM_1(D)>
  # USE = nonlocal null { D.65393 } (escaped heap)
  # CLB = nonlocal null { D.65393 } (escaped heap)
  _ZSt17__throw_bad_allocvD.2850 ();
;;    succ:      

;;   basic block 6, loop depth 0, count 0, freq 669, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [4, 18446744073709551612] NONZERO 18446744073709551612
  _55 = __n_4(D) * 4;
  # .MEM_64 = VDEF <.MEM_1(D)>
  # PT = { D.65393 } (escaped heap)
  # USE = nonlocal null { D.65393 } (escaped heap)
  # CLB = nonlocal null { D.65393 } (escaped heap)
  _56 = _ZnwmD.2764 (_55);
  # PT = { D.65393 } (escaped heap)
  _51 = _56 + _55;
  # DEBUG D#378ptD.0 => &__tmpD.65298
  # DEBUG D#378ptD.0 => &__tmpD.65298
  # VUSE <.MEM_64>
  _52 = MEM[(const intD.9 &)__val_6(D)];
  # DEBUG D#379ptD.0 => __val_6(D)
  # DEBUG __nD.65361 => __n_4(D)
  # DEBUG D#376ptD.0 => D#378ptD.0
  # DEBUG thisD.65358 => D#376ptD.0
  # DEBUG thisD.65359 => D#378ptD.0
  # DEBUG D#377ptD.0 => D#379ptD.0
  # DEBUG __valueD.65360 => D#377ptD.0
  # DEBUG D#375ptD.0 => &D#376ptD.0->D.35374
  # DEBUG thisD.54797 => D#375ptD.0
  # DEBUG D#373ptD.0 => D#377ptD.0
  # DEBUG __firstD.65365 => NULL
  # DEBUG __nD.65364 => __n_4(D)
  # DEBUG D#372ptD.0 => D#373ptD.0
  # DEBUG __xD.65362 => D#372ptD.0
  # DEBUG D.65363 => D#374ptD.0
  # DEBUG D#371ptD.0 => D#372ptD.0
  # DEBUG __firstD.65368 => NULL
  # DEBUG __nD.65367 => __n_4(D)
  # DEBUG D#370ptD.0 => D#371ptD.0
  # DEBUG __xD.65366 => D#370ptD.0
  # DEBUG __assignableD.65370 => 1
  # DEBUG D#369ptD.0 => D#370ptD.0
  # DEBUG __firstD.65373 => NULL
  # DEBUG __nD.65372 => __n_4(D)
  # DEBUG D#368ptD.0 => D#369ptD.0
  # DEBUG __xD.65371 => D#368ptD.0
  # DEBUG D#367ptD.0 => D#368ptD.0
  # DEBUG __firstD.65376 => NULL
  # DEBUG __nD.65375 => __n_4(D)
  # DEBUG D#366ptD.0 => D#367ptD.0
  # DEBUG __valueD.65374 => D#366ptD.0
  # DEBUG __itD.54639 => NULL
  # DEBUG __itD.54605 => NULL
  # DEBUG D#258ptD.0 => D#366ptD.0
  # DEBUG __firstD.65379 => NULL
  # DEBUG __nD.65378 => __n_4(D)
  # DEBUG __valueD.65377 => D#258ptD.0
  # DEBUG __tmpD.65380 => _52
  # DEBUG __niterD.65381 => __n_4(D)
  # DEBUG __niterD.65381 => __n_4(D)
  # DEBUG __firstD.65379 => _56
  # DEBUG D#378ptD.0 => &__tmpD.65298
  # DEBUG D#379ptD.0 => __val_6(D)
  # DEBUG __nD.65361 => __n_4(D)
  # DEBUG D#376ptD.0 => D#378ptD.0
  # DEBUG thisD.65358 => D#376ptD.0
  # DEBUG thisD.65359 => D#378ptD.0
  # DEBUG D#377ptD.0 => D#379ptD.0
  # DEBUG __valueD.65360 => D#377ptD.0
  # DEBUG D#375ptD.0 => &D#376ptD.0->D.35374
  # DEBUG thisD.54797 => D#375ptD.0
  # DEBUG D#373ptD.0 => D#377ptD.0
  # DEBUG __firstD.65365 => NULL
  # DEBUG __nD.65364 => __n_4(D)
  # DEBUG D#372ptD.0 => D#373ptD.0
  # DEBUG __xD.65362 => D#372ptD.0
  # DEBUG D.65363 => D#374ptD.0
  # DEBUG D#371ptD.0 => D#372ptD.0
  # DEBUG __firstD.65368 => NULL
  # DEBUG __nD.65367 => __n_4(D)
  # DEBUG D#370ptD.0 => D#371ptD.0
  # DEBUG __xD.65366 => D#370ptD.0
  # DEBUG __assignableD.65370 => 1
  # DEBUG D#369ptD.0 => D#370ptD.0
  # DEBUG __firstD.65373 => NULL
  # DEBUG __nD.65372 => __n_4(D)
  # DEBUG D#368ptD.0 => D#369ptD.0
  # DEBUG __xD.65371 => D#368ptD.0
  # DEBUG D#367ptD.0 => D#368ptD.0
  # DEBUG __firstD.65376 => NULL
  # DEBUG __nD.65375 => __n_4(D)
  # DEBUG D#366ptD.0 => D#367ptD.0
  # DEBUG __valueD.65374 => D#366ptD.0
  # DEBUG __itD.54639 => NULL
  # DEBUG __itD.54605 => NULL
  # DEBUG D#258ptD.0 => D#366ptD.0
  # DEBUG __nD.65378 => __n_4(D)
  # DEBUG __valueD.65377 => D#258ptD.0
  # DEBUG __tmpD.65380 => _52
  # DEBUG __niterD.65381 => __n_4(D)
  # DEBUG __firstD.65379 => _56
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 7431, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __n_71 = PHI <__n_4(D)(6), __n_53(8)>
  # PT = { D.65393 } (escaped heap)
  # __first_72 = PHI <_56(6), __first_54(8)>
  # .MEM_74 = PHI <.MEM_64(6), .MEM_70(8)>
  # DEBUG __niterD.65381 => __n_71
  # DEBUG __firstD.65379 => __first_72
  # .MEM_70 = VDEF <.MEM_74>
  *__first_72 = _52;
  # RANGE [0, 18446744073709551614]
  __n_53 = __n_71 + 18446744073709551615;
  # DEBUG __niterD.65381 => __n_53
  # PT = { D.65393 } (escaped heap)
  __first_54 = __first_72 + 4;
  # DEBUG __firstD.65379 => __first_54
  # DEBUG __niterD.65381 => __n_53
  # DEBUG __firstD.65379 => __first_54
  if (__n_53 == 0)
    goto <bb 9>;
  else
    goto <bb 8>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 6762, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 669, maybe hot
;;    prev block 8, next block 31, flags: (NEW)
;;    pred:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       31 [100.0%]  (FALLTHRU)

;;   basic block 31, loop depth 0, count 0, freq 669, maybe hot
;;    prev block 9, next block 10, flags: (NEW)
;;    pred:       9 [100.0%]  (FALLTHRU)
  _42 = __n_4(D) * 4;
  # PT = { D.65393 } (escaped heap)
  __first_16 = _56 + _42;
  # VUSE <.MEM_70>
  pretmp_25 = MEM[(intD.9 * &)this_2(D)];
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 31, next block 11, flags: (NEW, REACHABLE)
;;    pred:       31 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.65393 } (escaped heap)
  # __first_45 = PHI <__first_16(31), 0B(30)>
  # .MEM_47 = PHI <.MEM_70(31), .MEM_1(D)(30)>
  # PT = nonlocal { D.65393 } (escaped heap)
  # _31 = PHI <_51(31), _76(30)>
  # PT = null { D.65393 } (escaped heap)
  # __first_8 = PHI <_56(31), 0B(30)>
  # PT = nonlocal escaped 
  # prephitmp_26 = PHI <pretmp_25(31), __first_13(30)>
  # DEBUG D#534ptD.0 => &this_2(D)->D.35374._M_implD.34865
  # DEBUG thisD.65300 => &__tmpD.65298.D.35374._M_implD.34865
  # DEBUG __xD.65299 => D#534ptD.0
  # DEBUG D#257ptD.0 => &D#534ptD.0->_M_startD.34867
  # DEBUG D#256ptD.0 => &MEM[(struct _Vector_implD.34842 *)&__tmpD.65298]._M_startD.34867
  # DEBUG __aD.65302 => D#256ptD.0
  # DEBUG __bD.65301 => D#257ptD.0
  # DEBUG __tmpD.65303 => __first_8
  # DEBUG D#1010ptD.0 => MEM[(intD.9 * &)this_2(D)]
  # .MEM_73 = VDEF <.MEM_47>
  MEM[(intD.9 * &)this_2(D)] = __first_8;
  # DEBUG D#255ptD.0 => &D#534ptD.0->_M_finishD.34868
  # DEBUG D#254ptD.0 => &MEM[(struct _Vector_implD.34842 *)&__tmpD.65298]._M_finishD.34868
  # DEBUG __aD.65305 => D#254ptD.0
  # DEBUG __bD.65304 => D#255ptD.0
  # DEBUG __tmpD.65306 => __first_45
  # .MEM_75 = VDEF <.MEM_73>
  MEM[(intD.9 * &)this_2(D) + 8] = __first_45;
  # DEBUG D#253ptD.0 => &D#534ptD.0->_M_end_of_storageD.34869
  # DEBUG D#252ptD.0 => &MEM[(struct _Vector_implD.34842 *)&__tmpD.65298]._M_end_of_storageD.34869
  # DEBUG __aD.65308 => D#252ptD.0
  # DEBUG __bD.65307 => D#253ptD.0
  # DEBUG __tmpD.65309 => _31
  # .MEM_77 = VDEF <.MEM_75>
  MEM[(intD.9 * &)this_2(D) + 16] = _31;
  # DEBUG thisD.65310 => &__tmpD.65298
  # DEBUG D#245ptD.0 => &__tmpD.65298.D.35374
  # DEBUG thisD.53653 => D#245ptD.0
  # DEBUG D#248ptD.0 => __tmpD.65298.D.35374._M_implD.34865._M_finishD.34868
  # DEBUG D#247ptD.0 => __tmpD.65298.D.35374._M_implD.34865._M_startD.34867
  # DEBUG __firstD.53650 => D#247ptD.0
  # DEBUG __lastD.53651 => D#248ptD.0
  # DEBUG D.53652 => NULL
  # DEBUG D#150ptD.0 => D#247ptD.0
  # DEBUG D#151ptD.0 => D#248ptD.0
  # DEBUG __firstD.53061 => D#150ptD.0
  # DEBUG __lastD.53060 => D#151ptD.0
  # DEBUG D#149ptD.0 => D#151ptD.0
  # DEBUG D#148ptD.0 => D#150ptD.0
  # DEBUG D#146ptD.0 => D#148ptD.0
  # DEBUG D#147ptD.0 => D#149ptD.0
  # DEBUG D.53050 => D#146ptD.0
  # DEBUG D.53049 => D#147ptD.0
  # DEBUG D#246ptD.0 => &__tmpD.65298.D.35374
  # DEBUG thisD.65311 => D#246ptD.0
  # DEBUG D#244ptD.0 => D#246ptD.0->_M_implD.34865._M_end_of_storageD.34869
  # DEBUG D#243ptD.0 => (long intD.12) D#244ptD.0
  # DEBUG D#242ptD.0 => (long intD.12) D#1010ptD.0
  # DEBUG D#241ptD.0 => D#243ptD.0 - D#242ptD.0
  # DEBUG D#240ptD.0 => D#241ptD.0 /[ex] 4
  # DEBUG D#239ptD.0 => (long unsigned intD.14) D#240ptD.0
  # DEBUG thisD.65314 => D#246ptD.0
  # DEBUG __pD.65313 => D#1010ptD.0
  # DEBUG __nD.65312 => D#239ptD.0
  if (prephitmp_26 != 0B)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 576, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#237ptD.0 => &D#246ptD.0->_M_implD.34865
  # DEBUG D#235ptD.0 => D#237ptD.0
  # DEBUG D#236ptD.0 => D#239ptD.0
  # DEBUG __pD.65318 => D#1010ptD.0
  # DEBUG __aD.65316 => D#235ptD.0
  # DEBUG __nD.65317 => D#236ptD.0
  # DEBUG D#234ptD.0 => D#236ptD.0
  # DEBUG D#233ptD.0 => D#235ptD.0
  # DEBUG D#231ptD.0 => D#233ptD.0
  # DEBUG D#232ptD.0 => D#234ptD.0
  # DEBUG __pD.65321 => D#1010ptD.0
  # DEBUG thisD.65319 => D#231ptD.0
  # DEBUG D.65320 => D#232ptD.0
  # .MEM_78 = VDEF <.MEM_77>
  # USE = nonlocal null { D.65393 } (escaped heap)
  # CLB = nonlocal null { D.65393 } (escaped heap)
  _ZdlPvD.2766 (prephitmp_26);
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       10 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_60 = PHI <.MEM_77(10), .MEM_78(11)>
  # DEBUG D#238ptD.0 => &D#246ptD.0->_M_implD.34865
  # DEBUG thisD.65322 => D#238ptD.0
  # DEBUG thisD.65323 => D#238ptD.0
  # DEBUG thisD.65324 => D#238ptD.0
  # .MEM_84 = VDEF <.MEM_60>
  __tmpD.65298 ={v} {CLOBBER};
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 1800, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       2 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#87ptD.0 => this_2(D)
  # VUSE <.MEM_1(D)>
  # PT = nonlocal escaped 
  __first_12 = MEM[(intD.9 * *)this_2(D) + 8B];
  # DEBUG D#87ptD.0 => this_2(D)
  # DEBUG thisD.57511 => D#87ptD.0
  # DEBUG thisD.57510 => D#87ptD.0
  _21 = (long intD.12) __first_12;
  _22 = _21 - _5;
  # RANGE [-2305843009213693952, 2305843009213693951]
  _23 = _22 /[ex] 4;
  # RANGE ~[2305843009213693952, 16140901064495857663]
  _24 = (size_typeD.34950) _23;
  if (__n_4(D) > _24)
    goto <bb 14>;
  else
    goto <bb 23>;
;;    succ:       14 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.57558 => this_2(D)
  # DEBUG D#100ptD.0 => &this_2(D)->D.35374._M_implD.34865._M_finishD.34868
  # DEBUG thisD.57560 => NULL
  # DEBUG __iD.57559 => D#100ptD.0
  # DEBUG thisD.57554 => this_2(D)
  # DEBUG D#156ptD.0 => &this_2(D)->D.35374._M_implD.34865._M_startD.34867
  # DEBUG thisD.57556 => NULL
  # DEBUG __iD.57555 => D#156ptD.0
  # VUSE <.MEM_1(D)>
  _17 = MEM[(const intD.9 &)__val_6(D)];
  # DEBUG D#381ptD.0 => __val_6(D)
  # DEBUG __firstD.57577 => __first_13
  # DEBUG __lastD.57578 => __first_12
  # DEBUG D#380ptD.0 => D#381ptD.0
  # DEBUG __valueD.57545 => D#380ptD.0
  # DEBUG __itD.57552 => __first_12
  # DEBUG __itD.54864 => __first_12
  # DEBUG thisD.54828 => NULL
  # DEBUG __itD.57550 => __first_13
  # DEBUG __itD.54867 => __first_13
  # DEBUG thisD.54828 => NULL
  # DEBUG D#251ptD.0 => D#380ptD.0
  # DEBUG __firstD.57548 => __first_13
  # DEBUG __lastD.57547 => __first_12
  # DEBUG __valueD.57546 => D#251ptD.0
  # DEBUG __tmpD.57549 => _17
  # DEBUG __firstD.57548 => __first_13
  if (__first_12 == __first_13)
    goto <bb 19>;
  else
    goto <bb 15>;
;;    succ:       19 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       15 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_41 = PHI <__first_13(15), __first_30(17)>
  # .MEM_63 = PHI <.MEM_1(D)(15), .MEM_37(17)>
  # DEBUG __firstD.57548 => __first_41
  # .MEM_37 = VDEF <.MEM_63>
  *__first_41 = _17;
  # PT = nonlocal escaped 
  __first_30 = __first_41 + 4;
  # DEBUG __firstD.57548 => __first_30
  # DEBUG __firstD.57548 => __first_30
  if (__first_12 == __first_30)
    goto <bb 18>;
  else
    goto <bb 17>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 16>;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 17, next block 33, flags: (NEW)
;;    pred:       16 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       33 [100.0%]  (FALLTHRU)

;;   basic block 33, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 18, next block 19, flags: (NEW)
;;    pred:       18 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_37>
  pretmp_80 = MEM[(const intD.9 &)__val_6(D)];
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       33 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_67 = PHI <.MEM_37(33), .MEM_1(D)(14)>
  # prephitmp_81 = PHI <pretmp_80(33), _17(14)>
;;    succ:       35 [100.0%]  (FALLTHRU)

;;   basic block 35, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 19, next block 20, flags: (NEW)
;;    pred:       19 [100.0%]  (FALLTHRU)
  # DEBUG D#533ptD.0 => &this_2(D)->D.35374
  # DEBUG thisD.57540 => D#533ptD.0
  # DEBUG D#87ptD.0 => this_2(D)
  # DEBUG D#87ptD.0 => this_2(D)
  # DEBUG thisD.57538 => D#87ptD.0
  # DEBUG thisD.57537 => D#87ptD.0
  # RANGE [1, 18446744073709551615]
  __n_10 = __n_4(D) - _24;
  # DEBUG D#1009ptD.0 => MEM[(const intD.9 &)__val_6(D)]
  # DEBUG D#373ptD.0 => __val_6(D)
  # DEBUG __firstD.57513 => __first_12
  # DEBUG __nD.57514 => __n_10
  # DEBUG D#372ptD.0 => D#373ptD.0
  # DEBUG __xD.57517 => D#372ptD.0
  # DEBUG D.57516 => D#374ptD.0
  # DEBUG D#371ptD.0 => D#372ptD.0
  # DEBUG __firstD.57520 => __first_12
  # DEBUG __nD.57519 => __n_10
  # DEBUG D#370ptD.0 => D#371ptD.0
  # DEBUG __xD.57518 => D#370ptD.0
  # DEBUG __assignableD.57522 => 1
  # DEBUG D#369ptD.0 => D#370ptD.0
  # DEBUG __firstD.57525 => __first_12
  # DEBUG __nD.57524 => __n_10
  # DEBUG D#368ptD.0 => D#369ptD.0
  # DEBUG __xD.57523 => D#368ptD.0
  # DEBUG D#367ptD.0 => D#368ptD.0
  # DEBUG __firstD.57528 => __first_12
  # DEBUG __nD.57527 => __n_10
  # DEBUG D#366ptD.0 => D#367ptD.0
  # DEBUG __valueD.57526 => D#366ptD.0
  # DEBUG __itD.54639 => __first_12
  # DEBUG __itD.54605 => __first_12
  # DEBUG D#258ptD.0 => D#366ptD.0
  # DEBUG __firstD.57531 => __first_12
  # DEBUG __nD.57530 => __n_10
  # DEBUG __valueD.57529 => D#258ptD.0
  # DEBUG __tmpD.57532 => D#1009ptD.0
  # DEBUG __niterD.57533 => __n_10
  # DEBUG __niterD.57533 => __n_10
  # DEBUG __firstD.57531 => __first_12
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 35, next block 21, flags: (NEW, REACHABLE)
;;    pred:       21 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __n_97 = PHI <__n_27(21), __n_10(35)>
  # PT = nonlocal escaped 
  # __first_96 = PHI <__first_28(21), __first_12(35)>
  # .MEM_94 = PHI <.MEM_38(21), .MEM_67(35)>
  # DEBUG __niterD.57533 => __n_97
  # DEBUG __firstD.57531 => __first_96
  # .MEM_38 = VDEF <.MEM_94>
  *__first_96 = prephitmp_81;
  # RANGE [0, 18446744073709551614]
  __n_27 = __n_97 + 18446744073709551615;
  # DEBUG __niterD.57533 => __n_27
  # PT = nonlocal escaped 
  __first_28 = __first_96 + 4;
  # DEBUG __firstD.57531 => __first_28
  # DEBUG __niterD.57533 => __n_27
  # DEBUG __firstD.57531 => __first_28
  if (__n_27 == 0)
    goto <bb 22>;
  else
    goto <bb 21>;
;;    succ:       22 [9.9%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [90.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 1, count 0, freq 8200, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [90.1%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 21, next block 32, flags: (NEW, REACHABLE)
;;    pred:       20 [9.9%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       32 [100.0%]  (FALLTHRU)

;;   basic block 32, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 22, next block 23, flags: (NEW)
;;    pred:       22 [100.0%]  (FALLTHRU)
  _83 = __n_10 * 4;
  # PT = nonlocal escaped 
  __first_59 = __first_12 + _83;
  # .MEM_11 = VDEF <.MEM_38>
  this_2(D)->D.35374._M_implD.34865._M_finishD.34868 = __first_59;
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 32, next block 24, flags: (NEW, REACHABLE)
;;    pred:       13 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_1(D)>
  _15 = MEM[(const intD.9 &)__val_6(D)];
  # DEBUG D#367ptD.0 => __val_6(D)
  # DEBUG __firstD.57565 => __first_13
  # DEBUG __nD.57566 => __n_4(D)
  # DEBUG D#366ptD.0 => D#367ptD.0
  # DEBUG __valueD.57568 => D#366ptD.0
  # DEBUG __itD.54639 => __first_13
  # DEBUG __itD.54605 => __first_13
  # DEBUG D#258ptD.0 => D#366ptD.0
  # DEBUG __firstD.57571 => __first_13
  # DEBUG __nD.57570 => __n_4(D)
  # DEBUG __valueD.57569 => D#258ptD.0
  # DEBUG __tmpD.57572 => _15
  # DEBUG __niterD.57573 => __n_4(D)
  # DEBUG __niterD.57573 => __n_4(D)
  # DEBUG __firstD.57571 => __first_13
  if (__n_4(D) == 0)
    goto <bb 28>;
  else
    goto <bb 24>;
;;    succ:       28 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 24, next block 26, flags: (NEW)
;;    pred:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                27 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __n_35 = PHI <__n_4(D)(24), __n_32(27)>
  # PT = nonlocal escaped 
  # __first_61 = PHI <__first_13(24), __first_33(27)>
  # .MEM_68 = PHI <.MEM_1(D)(24), .MEM_39(27)>
  # DEBUG __niterD.57573 => __n_35
  # DEBUG __firstD.57571 => __first_61
  # .MEM_39 = VDEF <.MEM_68>
  *__first_61 = _15;
  # RANGE [0, 18446744073709551614]
  __n_32 = __n_35 + 18446744073709551615;
  # DEBUG __niterD.57573 => __n_32
  # PT = nonlocal escaped 
  __first_33 = __first_61 + 4;
  # DEBUG __firstD.57571 => __first_33
  # DEBUG __niterD.57573 => __n_32
  # DEBUG __firstD.57571 => __first_33
  if (__n_32 == 0)
    goto <bb 26>;
  else
    goto <bb 27>;
;;    succ:       26 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 25, next block 34, flags: (NEW)
;;    pred:       25 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       34 [100.0%]  (FALLTHRU)

;;   basic block 34, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 26, next block 27, flags: (NEW)
;;    pred:       26 [100.0%]  (FALLTHRU)
  _98 = __n_4(D) * 4;
  # PT = nonlocal escaped 
  __first_43 = __first_13 + _98;
  goto <bb 28>;
;;    succ:       28 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 34, next block 28, flags: (NEW)
;;    pred:       25 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 27, next block 36, flags: (NEW, REACHABLE)
;;    pred:       34 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_62 = PHI <__first_43(34), __first_13(23)>
  # .MEM_69 = PHI <.MEM_39(34), .MEM_1(D)(23)>
;;    succ:       36 [100.0%]  (FALLTHRU)

;;   basic block 36, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 28, next block 29, flags: (NEW)
;;    pred:       28 [100.0%]  (FALLTHRU)
  # DEBUG D#155ptD.0 => this_2(D)
  # DEBUG __posD.57563 => __first_62
  # DEBUG D#154ptD.0 => D#155ptD.0
  # DEBUG thisD.57564 => D#154ptD.0
  # DEBUG D#152ptD.0 => &D#154ptD.0->D.35374
  # DEBUG thisD.53074 => D#152ptD.0
  # DEBUG D#153ptD.0 => D#154ptD.0->D.35374._M_implD.34865._M_finishD.34868
  # DEBUG __firstD.53064 => __first_62
  # DEBUG __lastD.53065 => D#153ptD.0
  # DEBUG D.53066 => NULL
  # DEBUG D#150ptD.0 => __first_62
  # DEBUG D#151ptD.0 => D#153ptD.0
  # DEBUG __firstD.53061 => D#150ptD.0
  # DEBUG __lastD.53060 => D#151ptD.0
  # DEBUG D#149ptD.0 => D#151ptD.0
  # DEBUG D#148ptD.0 => D#150ptD.0
  # DEBUG D#146ptD.0 => D#148ptD.0
  # DEBUG D#147ptD.0 => D#149ptD.0
  # DEBUG D.53050 => D#146ptD.0
  # DEBUG D.53049 => D#147ptD.0
  # .MEM_40 = VDEF <.MEM_69>
  MEM[(intD.9 * *)this_2(D) + 8B] = __first_62;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 2535, maybe hot
;;    prev block 36, next block 37, flags: (NEW, REACHABLE)
;;    pred:       12 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                36 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_20 = PHI <.MEM_84(12), .MEM_11(32), .MEM_40(36)>
;;    succ:       37 [100.0%]  (FALLTHRU)

;;   basic block 37, loop depth 0, count 0, freq 2535, maybe hot
;;    prev block 29, next block 30, flags: (NEW)
;;    pred:       29 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_20>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 30, loop depth 0, count 0, freq 74, maybe hot
;;    prev block 37, next block 1, flags: (NEW, REACHABLE)
;;    pred:       3 [10.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _46 = __n_4(D) * 4;
  # PT = nonlocal 
  # ALIGN = 4, MISALIGN = 0
  _76 = (intD.9 *) _46;
  # DEBUG D#378ptD.0 => &__tmpD.65298
  # DEBUG D#378ptD.0 => &__tmpD.65298
  # DEBUG D#1008ptD.0 => MEM[(const intD.9 &)__val_6(D)]
  # DEBUG D#379ptD.0 => __val_6(D)
  # DEBUG __nD.65361 => __n_4(D)
  # DEBUG D#376ptD.0 => D#378ptD.0
  # DEBUG thisD.65358 => D#376ptD.0
  # DEBUG thisD.65359 => D#378ptD.0
  # DEBUG D#377ptD.0 => D#379ptD.0
  # DEBUG __valueD.65360 => D#377ptD.0
  # DEBUG D#375ptD.0 => &D#376ptD.0->D.35374
  # DEBUG thisD.54797 => D#375ptD.0
  # DEBUG D#373ptD.0 => D#377ptD.0
  # DEBUG __firstD.65365 => NULL
  # DEBUG __nD.65364 => __n_4(D)
  # DEBUG D#372ptD.0 => D#373ptD.0
  # DEBUG __xD.65362 => D#372ptD.0
  # DEBUG D.65363 => D#374ptD.0
  # DEBUG D#371ptD.0 => D#372ptD.0
  # DEBUG __firstD.65368 => NULL
  # DEBUG __nD.65367 => __n_4(D)
  # DEBUG D#370ptD.0 => D#371ptD.0
  # DEBUG __xD.65366 => D#370ptD.0
  # DEBUG __assignableD.65370 => 1
  # DEBUG D#369ptD.0 => D#370ptD.0
  # DEBUG __firstD.65373 => NULL
  # DEBUG __nD.65372 => __n_4(D)
  # DEBUG D#368ptD.0 => D#369ptD.0
  # DEBUG __xD.65371 => D#368ptD.0
  # DEBUG D#367ptD.0 => D#368ptD.0
  # DEBUG __firstD.65376 => NULL
  # DEBUG __nD.65375 => __n_4(D)
  # DEBUG D#366ptD.0 => D#367ptD.0
  # DEBUG __valueD.65374 => D#366ptD.0
  # DEBUG __itD.54639 => NULL
  # DEBUG __itD.54605 => NULL
  # DEBUG D#258ptD.0 => D#366ptD.0
  # DEBUG __firstD.65379 => NULL
  # DEBUG __nD.65378 => __n_4(D)
  # DEBUG __valueD.65377 => D#258ptD.0
  # DEBUG __tmpD.65380 => D#1008ptD.0
  # DEBUG __niterD.65381 => __n_4(D)
  # DEBUG __niterD.65381 => __n_4(D)
  # DEBUG __firstD.65379 => 0B
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

}



;; Function virtual void SparseAllocator::Clear() (_ZN15SparseAllocator5ClearEv, funcdef_no=1773, decl_uid=37903, cgraph_uid=443, symbol_order=444)


Pass statistics:
----------------

virtual void SparseAllocator::Clear() (struct SparseAllocatorD.36303 * const thisD.42333)
{
  intD.9 __valD.65506;
  intD.9 __valD.65513;
  struct _Rb_tree_nodeD.41466 * __xD.65489;
  struct _Rb_tree_nodeD.41466 * __xD.65476;
  intD.9 jD.42336;
  intD.9 iD.42335;
  long unsigned intD.14 _10;
  struct _Rep_typeD.41460 * _11;
  struct mapD.37148 & _12;
  long unsigned intD.14 _13;
  long unsigned intD.14 _16;
  const size_typeD.41494 _18;
  struct _Rep_typeD.36315 * _21;
  struct _Rep_typeD.36315 * _23;
  struct mapD.37148 * _24;
  struct mapD.37148 * _25;
  struct _Rb_tree_node_baseD.24800 * _27;
  const size_typeD.41494 _28;
  long unsigned intD.14 _29;
  struct mapD.37148 & _30;
  struct _Rep_typeD.41460 * _31;
  struct _Rb_tree_node_baseD.24800 * _33;
  boolD.2757 _34;
  struct _Rb_tree_node_baseD.24800 * _35;
  struct _Rb_tree_node_baseD.24800 * _36;
  struct _Rb_tree_node_baseD.24800 * _37;
  struct _Rb_tree_node_baseD.24800 * _38;
  intD.9 _44;
  struct _Rb_tree_node_baseD.24800 * _61;
  struct _Rb_tree_node_baseD.24800 * _64;
  struct vectorD.34569 * _67;
  long unsigned intD.14 _68;
  intD.9 _69;
  struct vectorD.34569 * _70;
  long unsigned intD.14 _71;
  intD.9 _81;
  intD.9 _86;
  const intD.9 prephitmp_87;
  const intD.9 prephitmp_107;
  const intD.9 prephitmp_111;
  const intD.9 pretmp_112;
  const intD.9 prephitmp_113;
  const intD.9 prephitmp_115;
  const intD.9 pretmp_116;
  const intD.9 prephitmp_117;

;;   basic block 2, loop depth 0, count 0, freq 307, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG iD.42335 => 0
  # DEBUG iD.42335 => 0
  # VUSE <.MEM_7(D)>
  _81 = this_8(D)->D.37974._inputsD.34629;
  if (_81 <= 0)
    goto <bb 3>;
  else
    goto <bb 5>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 307, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_109 = PHI <.MEM_7(D)(2), .MEM_4(13)>
  # DEBUG jD.42336 => 0
  # VUSE <.MEM_109>
  _86 = this_8(D)->D.37974._outputsD.34630;
  if (_86 <= 0)
    goto <bb 4>;
  else
    goto <bb 15>;
;;    succ:       4 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 307, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_108 = PHI <.MEM_109(3), .MEM_6(23)>
  # DEBUG D#562ptD.0 => &this_8(D)->_in_occD.37144
  # DEBUG thisD.57994 => D#562ptD.0
  # PT = nonlocal 
  _21 = &MEM[(struct setD.36306 *)this_8(D) + 160B]._M_tD.36318;
  # DEBUG thisD.57995 => _21
  # VUSE <.MEM_108>
  # PT = nonlocal escaped 
  _37 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_8(D) + 176B];
  # DEBUG D#90ptD.0 => _21
  # DEBUG thisD.55022 => D#90ptD.0
  # .MEM_49 = VDEF <.MEM_108>
  # USE = nonlocal null { D.65506 D.65513 } (escaped)
  # CLB = nonlocal null { D.65506 D.65513 } (escaped)
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiED.36688 (_21, _37);
  # DEBUG D#401ptD.0 => &MEM[(struct _Rb_treeD.36317 *)_21]._M_implD.36395
  # DEBUG thisD.57996 => D#401ptD.0
  # .MEM_50 = VDEF <.MEM_49>
  MEM[(struct _Rb_tree_implD.36407 *)this_8(D) + 160B]._M_headerD.36561._M_parentD.24805 = 0B;
  # PT = nonlocal 
  _38 = &MEM[(struct _Rb_tree_implD.36407 *)this_8(D) + 160B]._M_headerD.36561;
  # .MEM_51 = VDEF <.MEM_50>
  MEM[(struct _Rb_tree_implD.36407 *)this_8(D) + 160B]._M_headerD.36561._M_leftD.24806 = _38;
  # .MEM_52 = VDEF <.MEM_51>
  MEM[(struct _Rb_tree_implD.36407 *)this_8(D) + 160B]._M_headerD.36561._M_rightD.24807 = _38;
  # .MEM_53 = VDEF <.MEM_52>
  MEM[(struct _Rb_tree_implD.36407 *)this_8(D) + 160B]._M_node_countD.36562 = 0;
  # DEBUG D#561ptD.0 => &this_8(D)->_out_occD.37145
  # DEBUG thisD.57991 => D#561ptD.0
  # PT = nonlocal 
  _23 = &MEM[(struct setD.36306 *)this_8(D) + 208B]._M_tD.36318;
  # DEBUG thisD.57992 => _23
  # VUSE <.MEM_53>
  # PT = nonlocal escaped 
  _35 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_8(D) + 224B];
  # DEBUG D#90ptD.0 => _23
  # DEBUG thisD.55022 => D#90ptD.0
  # .MEM_54 = VDEF <.MEM_53>
  # USE = nonlocal null { D.65506 D.65513 } (escaped)
  # CLB = nonlocal null { D.65506 D.65513 } (escaped)
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiED.36688 (_23, _35);
  # DEBUG D#401ptD.0 => &MEM[(struct _Rb_treeD.36317 *)_23]._M_implD.36395
  # DEBUG thisD.57993 => D#401ptD.0
  # .MEM_55 = VDEF <.MEM_54>
  MEM[(struct _Rb_tree_implD.36407 *)this_8(D) + 208B]._M_headerD.36561._M_parentD.24805 = 0B;
  # PT = nonlocal 
  _36 = &MEM[(struct _Rb_tree_implD.36407 *)this_8(D) + 208B]._M_headerD.36561;
  # .MEM_56 = VDEF <.MEM_55>
  MEM[(struct _Rb_tree_implD.36407 *)this_8(D) + 208B]._M_headerD.36561._M_leftD.24806 = _36;
  # .MEM_57 = VDEF <.MEM_56>
  MEM[(struct _Rb_tree_implD.36407 *)this_8(D) + 208B]._M_headerD.36561._M_rightD.24807 = _36;
  # .MEM_58 = VDEF <.MEM_57>
  MEM[(struct _Rb_tree_implD.36407 *)this_8(D) + 208B]._M_node_countD.36562 = 0;
  # DEBUG D#1074ptD.0 => &this_8(D)->D.37974
  # DEBUG thisD.57990 => D#1074ptD.0
  # VUSE <.MEM_58>
  _34 = MEM[(struct AllocatorD.34627 *)this_8(D)]._dirtyD.34631;
  if (_34 != 0)
    goto <bb 25>;
  else
    goto <bb 26>;
;;    succ:       25 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 279, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 3103, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # i_89 = PHI <0(5), i_14(14)>
  # .MEM_91 = PHI <.MEM_7(D)(5), .MEM_4(14)>
  # prephitmp_87 = PHI <_81(5), prephitmp_111(14)>
  # DEBUG iD.42335 => i_89
  # RANGE [0, 18446744073709551615]
  _10 = (long unsigned intD.14) i_89;
  # DEBUG D#557ptD.0 => &this_8(D)->_in_reqD.37895
  # VUSE <.MEM_91>
  # PT = nonlocal escaped 
  _24 = MEM[(struct mapD.37148 * *)this_8(D) + 256B];
  # DEBUG D#85ptD.0 => D#557ptD.0
  # DEBUG __nD.57966 => _10
  # DEBUG thisD.57967 => D#85ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _13 = _10 * 48;
  # PT = nonlocal escaped 
  _12 = _24 + _13;
  # DEBUG thisD.57962 => NULL
  # VUSE <.MEM_91>
  _18 = MEM[(long unsigned intD.14 *)_12 + 40B];
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.57963 => D#93ptD.0
  if (_18 != 0)
    goto <bb 7>;
  else
    goto <bb 13>;
;;    succ:       7 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#558ptD.0 => &this_8(D)->_in_reqD.37895
  # DEBUG D#85ptD.0 => D#558ptD.0
  # DEBUG __nD.57973 => _10
  # DEBUG thisD.57974 => D#85ptD.0
  # DEBUG thisD.57969 => NULL
  # PT = nonlocal escaped 
  _11 = &_12->_M_tD.41463;
  # DEBUG thisD.57970 => _11
  # VUSE <.MEM_91>
  # PT = nonlocal escaped 
  __x_26 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_12 + 16B];
  # DEBUG D#91ptD.0 => _11
  # DEBUG thisD.57956 => D#91ptD.0
  # DEBUG thisD.65475 => _11
  # DEBUG __xD.65476 => __x_26
  # DEBUG __xD.65476 => __x_26
  if (__x_26 == 0B)
    goto <bb 12>;
  else
    goto <bb 8>;
;;    succ:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_95 = PHI <__x_26(8), __x_62(10)>
  # .MEM_98 = PHI <.MEM_91(8), .MEM_72(10)>
  # DEBUG __xD.65476 => __x_95
  # VUSE <.MEM_98>
  # PT = nonlocal escaped 
  _61 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_95 + 24B];
  # DEBUG D#107ptD.0 => __x_95
  # DEBUG __xD.57814 => D#107ptD.0
  # .MEM_59 = VDEF <.MEM_98>
  # USE = nonlocal null { D.65506 D.65513 } (escaped)
  # CLB = nonlocal null { D.65506 D.65513 } (escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (_11, _61);
  # VUSE <.MEM_59>
  # PT = nonlocal escaped 
  __x_62 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_95 + 16B];
  # DEBUG D#108ptD.0 => __x_95
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.65477 => NULL
  # DEBUG D#548ptD.0 => _11
  # DEBUG __pD.65479 => __x_95
  # DEBUG thisD.65478 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_95
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.65481 => D#546ptD.0
  # DEBUG __pD.65480 => __x_95
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.65484 => __x_95
  # DEBUG __aD.65482 => D#406ptD.0
  # DEBUG __nD.65483 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.65487 => __x_95
  # DEBUG thisD.65485 => D#402ptD.0
  # DEBUG D.65486 => D#403ptD.0
  # .MEM_72 = VDEF <.MEM_59>
  # USE = nonlocal null { D.65506 D.65513 } (escaped)
  # CLB = nonlocal null { D.65506 D.65513 } (escaped)
  _ZdlPvD.2766 (__x_95);
  # DEBUG __xD.65476 => __x_62
  # DEBUG __xD.65476 => __x_62
  if (__x_62 == 0B)
    goto <bb 11>;
  else
    goto <bb 10>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 2, count 0, freq 8281, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 9>;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_72>
  pretmp_112 = this_8(D)->D.37974._inputsD.34629;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_99 = PHI <.MEM_72(11), .MEM_91(7)>
  # prephitmp_113 = PHI <pretmp_112(11), prephitmp_87(7)>
  # DEBUG D#556ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_11]._M_implD.41540
  # DEBUG thisD.57971 => D#556ptD.0
  # .MEM_40 = VDEF <.MEM_99>
  MEM[(struct _Rb_tree_implD.41541 *)_12]._M_headerD.41695._M_parentD.24805 = 0B;
  # PT = nonlocal escaped 
  _27 = &MEM[(struct _Rb_tree_implD.41541 *)_12]._M_headerD.41695;
  # .MEM_41 = VDEF <.MEM_40>
  MEM[(struct _Rb_tree_implD.41541 *)_12]._M_headerD.41695._M_leftD.24806 = _27;
  # .MEM_42 = VDEF <.MEM_41>
  MEM[(struct _Rb_tree_implD.41541 *)_12]._M_headerD.41695._M_rightD.24807 = _27;
  # .MEM_43 = VDEF <.MEM_42>
  MEM[(struct _Rb_tree_implD.41541 *)_12]._M_node_countD.41696 = 0;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 3103, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       6 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_4 = PHI <.MEM_91(6), .MEM_43(12)>
  # prephitmp_111 = PHI <prephitmp_87(6), prephitmp_113(12)>
  i_14 = i_89 + 1;
  # DEBUG iD.42335 => i_14
  # DEBUG iD.42335 => i_14
  if (i_14 >= prephitmp_111)
    goto <bb 3>;
  else
    goto <bb 14>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 2824, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 279, maybe hot
;;    prev block 14, next block 16, flags: (NEW)
;;    pred:       3 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 1, count 0, freq 3103, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       15 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                24 [100.0%]  (FALLTHRU,EXECUTABLE)
  # j_90 = PHI <0(15), j_19(24)>
  # .MEM_92 = PHI <.MEM_109(15), .MEM_6(24)>
  # prephitmp_107 = PHI <_86(15), prephitmp_115(24)>
  # DEBUG jD.42336 => j_90
  # RANGE [0, 18446744073709551615]
  _16 = (long unsigned intD.14) j_90;
  # DEBUG D#559ptD.0 => &this_8(D)->_out_reqD.37896
  # VUSE <.MEM_92>
  # PT = nonlocal escaped 
  _25 = MEM[(struct mapD.37148 * *)this_8(D) + 280B];
  # DEBUG D#85ptD.0 => D#559ptD.0
  # DEBUG __nD.57980 => _16
  # DEBUG thisD.57981 => D#85ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _29 = _16 * 48;
  # PT = nonlocal escaped 
  _30 = _25 + _29;
  # DEBUG thisD.57976 => NULL
  # VUSE <.MEM_92>
  _28 = MEM[(long unsigned intD.14 *)_30 + 40B];
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.57977 => D#93ptD.0
  if (_28 != 0)
    goto <bb 17>;
  else
    goto <bb 23>;
;;    succ:       17 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#560ptD.0 => &this_8(D)->_out_reqD.37896
  # DEBUG D#85ptD.0 => D#560ptD.0
  # DEBUG __nD.57987 => _16
  # DEBUG thisD.57988 => D#85ptD.0
  # DEBUG thisD.57983 => NULL
  # PT = nonlocal escaped 
  _31 = &_30->_M_tD.41463;
  # DEBUG thisD.57984 => _31
  # VUSE <.MEM_92>
  # PT = nonlocal escaped 
  __x_32 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_30 + 16B];
  # DEBUG D#91ptD.0 => _31
  # DEBUG thisD.57956 => D#91ptD.0
  # DEBUG thisD.65488 => _31
  # DEBUG __xD.65489 => __x_32
  # DEBUG __xD.65489 => __x_32
  if (__x_32 == 0B)
    goto <bb 22>;
  else
    goto <bb 18>;
;;    succ:       22 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 17, next block 19, flags: (NEW)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       18 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                20 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_94 = PHI <__x_32(18), __x_65(20)>
  # .MEM_96 = PHI <.MEM_92(18), .MEM_74(20)>
  # DEBUG __xD.65489 => __x_94
  # VUSE <.MEM_96>
  # PT = nonlocal escaped 
  _64 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_94 + 24B];
  # DEBUG D#107ptD.0 => __x_94
  # DEBUG __xD.57814 => D#107ptD.0
  # .MEM_73 = VDEF <.MEM_96>
  # USE = nonlocal null { D.65506 D.65513 } (escaped)
  # CLB = nonlocal null { D.65506 D.65513 } (escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (_31, _64);
  # VUSE <.MEM_73>
  # PT = nonlocal escaped 
  __x_65 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_94 + 16B];
  # DEBUG D#108ptD.0 => __x_94
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.65490 => NULL
  # DEBUG D#548ptD.0 => _31
  # DEBUG __pD.65492 => __x_94
  # DEBUG thisD.65491 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_94
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.65494 => D#546ptD.0
  # DEBUG __pD.65493 => __x_94
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.65497 => __x_94
  # DEBUG __aD.65495 => D#406ptD.0
  # DEBUG __nD.65496 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.65500 => __x_94
  # DEBUG thisD.65498 => D#402ptD.0
  # DEBUG D.65499 => D#403ptD.0
  # .MEM_74 = VDEF <.MEM_73>
  # USE = nonlocal null { D.65506 D.65513 } (escaped)
  # CLB = nonlocal null { D.65506 D.65513 } (escaped)
  _ZdlPvD.2766 (__x_94);
  # DEBUG __xD.65489 => __x_65
  # DEBUG __xD.65489 => __x_65
  if (__x_65 == 0B)
    goto <bb 21>;
  else
    goto <bb 20>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 2, count 0, freq 8281, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       19 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 19>;
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       19 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_74>
  pretmp_116 = this_8(D)->D.37974._outputsD.34630;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       21 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_97 = PHI <.MEM_74(21), .MEM_92(17)>
  # prephitmp_117 = PHI <pretmp_116(21), prephitmp_107(17)>
  # DEBUG D#556ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_31]._M_implD.41540
  # DEBUG thisD.57985 => D#556ptD.0
  # .MEM_45 = VDEF <.MEM_97>
  MEM[(struct _Rb_tree_implD.41541 *)_30]._M_headerD.41695._M_parentD.24805 = 0B;
  # PT = nonlocal escaped 
  _33 = &MEM[(struct _Rb_tree_implD.41541 *)_30]._M_headerD.41695;
  # .MEM_46 = VDEF <.MEM_45>
  MEM[(struct _Rb_tree_implD.41541 *)_30]._M_headerD.41695._M_leftD.24806 = _33;
  # .MEM_47 = VDEF <.MEM_46>
  MEM[(struct _Rb_tree_implD.41541 *)_30]._M_headerD.41695._M_rightD.24807 = _33;
  # .MEM_48 = VDEF <.MEM_47>
  MEM[(struct _Rb_tree_implD.41541 *)_30]._M_node_countD.41696 = 0;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 3103, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       16 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_6 = PHI <.MEM_92(16), .MEM_48(22)>
  # prephitmp_115 = PHI <prephitmp_107(16), prephitmp_117(22)>
  j_19 = j_90 + 1;
  # DEBUG jD.42336 => j_19
  # DEBUG jD.42336 => j_19
  if (j_19 >= prephitmp_115)
    goto <bb 4>;
  else
    goto <bb 24>;
;;    succ:       4 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 1, count 0, freq 2824, maybe hot
;;    prev block 23, next block 25, flags: (NEW)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 16>;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 120, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       4 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.65501 => D#1074ptD.0
  # VUSE <.MEM_58>
  _44 = MEM[(struct AllocatorD.34627 *)this_8(D)]._inputsD.34629;
  # PT = nonlocal 
  _67 = &MEM[(struct AllocatorD.34627 *)this_8(D)]._inmatchD.35376;
  # DEBUG thisD.65504 => _67
  # DEBUG __firstD.65503 => _44
  # DEBUG __lastD.65502 => -1
  # DEBUG thisD.65508 => _67
  # DEBUG __nD.65507 => _44
  # .MEM_75 = VDEF <.MEM_58>
  __valD.65506 = -1;
  # DEBUG __valD.65506 => __valD.65506
  # RANGE ~[2147483648, 18446744071562067967]
  _68 = (long unsigned intD.14) _44;
  # .MEM_76 = VDEF <.MEM_75>
  # USE = nonlocal null { D.65506 D.65513 } (escaped)
  # CLB = nonlocal null { D.65506 D.65513 } (escaped)
  _ZNSt6vectorIiSaIiEE14_M_fill_assignEmRKiD.35237 (_67, _68, &__valD.65506);
  # VUSE <.MEM_76>
  _69 = MEM[(struct AllocatorD.34627 *)this_8(D)]._outputsD.34630;
  # PT = nonlocal 
  _70 = &MEM[(struct AllocatorD.34627 *)this_8(D)]._outmatchD.35377;
  # DEBUG thisD.65511 => _70
  # DEBUG __firstD.65510 => _69
  # DEBUG __lastD.65509 => -1
  # DEBUG thisD.65515 => _70
  # DEBUG __nD.65514 => _69
  # .MEM_77 = VDEF <.MEM_76>
  __valD.65513 = -1;
  # DEBUG __valD.65513 => __valD.65513
  # RANGE ~[2147483648, 18446744071562067967]
  _71 = (long unsigned intD.14) _69;
  # .MEM_78 = VDEF <.MEM_77>
  # USE = nonlocal null { D.65506 D.65513 } (escaped)
  # CLB = nonlocal null { D.65506 D.65513 } (escaped)
  _ZNSt6vectorIiSaIiEE14_M_fill_assignEmRKiD.35237 (_70, _71, &__valD.65513);
  # .MEM_79 = VDEF <.MEM_78>
  MEM[(struct AllocatorD.34627 *)this_8(D)]._dirtyD.34631 = 0;
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 307, maybe hot
;;    prev block 25, next block 1, flags: (NEW, REACHABLE)
;;    pred:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                4 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_20 = PHI <.MEM_79(25), .MEM_58(4)>
  # VUSE <.MEM_20>
  return;
;;    succ:       EXIT [100.0%] 

}



Updating SSA:
Registering new PHI nodes in block #2
Registering new PHI nodes in block #5
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Registering new PHI nodes in block #8
Registering new PHI nodes in block #9
Registering new PHI nodes in block #10
Registering new PHI nodes in block #11
Registering new PHI nodes in block #30
Registering new PHI nodes in block #12
Registering new PHI nodes in block #13
Registering new PHI nodes in block #14
Registering new PHI nodes in block #29
Registering new PHI nodes in block #3
Registering new PHI nodes in block #15
Registering new PHI nodes in block #16
Registering new PHI nodes in block #17
Registering new PHI nodes in block #18
Registering new PHI nodes in block #19
Registering new PHI nodes in block #20
Registering new PHI nodes in block #21
Registering new PHI nodes in block #28
Registering new PHI nodes in block #22
Registering new PHI nodes in block #23
Registering new PHI nodes in block #24
Registering new PHI nodes in block #27
Registering new PHI nodes in block #4
Registering new PHI nodes in block #25
Registering new PHI nodes in block #26

DFA Statistics for virtual void SparseAllocator::Clear()

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                            158       1264b
DEF operands                             39        312b
VUSE operands                            47        376b
VDEF operands                            27        216b
PHI nodes                                23       2392b
PHI arguments                            44       2112b
---------------------------------------------------------
Total memory used by DFA/SSA data                 6672b
---------------------------------------------------------

Average number of arguments per PHI node: 1.9 (max: 2)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_80 -> { .MEM_4 }
.MEM_101 -> { .MEM_6 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 31
Number of blocks to update: 8 ( 26%)
Affected blocks: 6 13 14 16 23 24 27 29


Creating dr for this_8(D)->D.37974._inputs
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: *this_8(D)
	Access function 0: 768
	Access function 1: 0
Creating dr for MEM[(struct map * *)this_8(D) + 256B]
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_8(D) + 256B]
Creating dr for MEM[(struct map * *)this_8(D) + 256B]
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_8(D) + 256B]
Creating dr for MEM[(long unsigned int *)_12 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_12 + 40B]
Creating dr for MEM[(long unsigned int *)_12 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_12 + 40B]
Creating dr for MEM[(struct map * *)this_8(D) + 256B]
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_8(D) + 256B]
Creating dr for MEM[(struct map * *)this_8(D) + 256B]
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_8(D) + 256B]
Creating dr for MEM[(long unsigned int *)_12 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_12 + 40B]
Creating dr for MEM[(long unsigned int *)_12 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_12 + 40B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_12 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_12 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_12 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_12 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
Creating dr for this_8(D)->D.37974._inputs
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: *this_8(D)
	Access function 0: 768
	Access function 1: 0
Creating dr for this_8(D)->D.37974._inputs
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: *this_8(D)
	Access function 0: 768
	Access function 1: 0
Creating dr for MEM[(struct _Rb_tree_impl *)_12]._M_header._M_parent
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_12]
	Access function 0: 64
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_12]._M_header._M_parent
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_12]
	Access function 0: 64
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_12]._M_header._M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_12]
	Access function 0: 128
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_12]._M_header._M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_12]
	Access function 0: 128
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_12]._M_header._M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_12]
	Access function 0: 192
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_12]._M_header._M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_12]
	Access function 0: 192
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_12]._M_node_count
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_12]
	Access function 0: 320
Creating dr for MEM[(struct _Rb_tree_impl *)_12]._M_node_count
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_12]
	Access function 0: 320
Creating dr for MEM[(struct map * *)this_8(D) + 256B]
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_8(D) + 256B]
Creating dr for MEM[(struct map * *)this_8(D) + 256B]
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_8(D) + 256B]
Creating dr for MEM[(long unsigned int *)_12 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_12 + 40B]
Creating dr for MEM[(long unsigned int *)_12 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_12 + 40B]
Creating dr for MEM[(struct map * *)this_8(D) + 256B]
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_8(D) + 256B]
Creating dr for MEM[(struct map * *)this_8(D) + 256B]
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 256
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_8(D) + 256B]
Creating dr for MEM[(long unsigned int *)_12 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_12 + 40B]
Creating dr for MEM[(long unsigned int *)_12 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_12 + 40B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_12 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_12 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_12 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_12 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B]
Creating dr for this_8(D)->D.37974._inputs
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: *this_8(D)
	Access function 0: 768
	Access function 1: 0
Creating dr for this_8(D)->D.37974._inputs
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: *this_8(D)
	Access function 0: 768
	Access function 1: 0
Creating dr for MEM[(struct _Rb_tree_impl *)_12]._M_header._M_parent
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_12]
	Access function 0: 64
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_12]._M_header._M_parent
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_12]
	Access function 0: 64
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_12]._M_header._M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_12]
	Access function 0: 128
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_12]._M_header._M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_12]
	Access function 0: 128
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_12]._M_header._M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_12]
	Access function 0: 192
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_12]._M_header._M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_12]
	Access function 0: 192
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_12]._M_node_count
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_12]
	Access function 0: 320
Creating dr for MEM[(struct _Rb_tree_impl *)_12]._M_node_count
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_12]
	Access function 0: 320
Creating dr for this_8(D)->D.37974._outputs
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 100
	step: 0
	aligned to: 256
	base_object: *this_8(D)
	Access function 0: 800
	Access function 1: 0
Creating dr for MEM[(struct map * *)this_8(D) + 280B]
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 280
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_8(D) + 280B]
Creating dr for MEM[(struct map * *)this_8(D) + 280B]
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 280
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_8(D) + 280B]
Creating dr for MEM[(long unsigned int *)_30 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_30 + 40B]
Creating dr for MEM[(long unsigned int *)_30 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_30 + 40B]
Creating dr for MEM[(struct map * *)this_8(D) + 280B]
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 280
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_8(D) + 280B]
Creating dr for MEM[(struct map * *)this_8(D) + 280B]
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 280
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_8(D) + 280B]
Creating dr for MEM[(long unsigned int *)_30 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_30 + 40B]
Creating dr for MEM[(long unsigned int *)_30 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_30 + 40B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_30 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_30 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_30 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_30 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
Creating dr for this_8(D)->D.37974._outputs
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 100
	step: 0
	aligned to: 256
	base_object: *this_8(D)
	Access function 0: 800
	Access function 1: 0
Creating dr for this_8(D)->D.37974._outputs
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 100
	step: 0
	aligned to: 256
	base_object: *this_8(D)
	Access function 0: 800
	Access function 1: 0
Creating dr for MEM[(struct _Rb_tree_impl *)_30]._M_header._M_parent
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_30]
	Access function 0: 64
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_30]._M_header._M_parent
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_30]
	Access function 0: 64
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_30]._M_header._M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_30]
	Access function 0: 128
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_30]._M_header._M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_30]
	Access function 0: 128
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_30]._M_header._M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_30]
	Access function 0: 192
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_30]._M_header._M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_30]
	Access function 0: 192
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_30]._M_node_count
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_30]
	Access function 0: 320
Creating dr for MEM[(struct _Rb_tree_impl *)_30]._M_node_count
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_30]
	Access function 0: 320
Creating dr for MEM[(struct map * *)this_8(D) + 280B]
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 280
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_8(D) + 280B]
Creating dr for MEM[(struct map * *)this_8(D) + 280B]
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 280
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_8(D) + 280B]
Creating dr for MEM[(long unsigned int *)_30 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_30 + 40B]
Creating dr for MEM[(long unsigned int *)_30 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_30 + 40B]
Creating dr for MEM[(struct map * *)this_8(D) + 280B]
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 280
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_8(D) + 280B]
Creating dr for MEM[(struct map * *)this_8(D) + 280B]
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 280
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_8(D) + 280B]
Creating dr for MEM[(long unsigned int *)_30 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_30 + 40B]
Creating dr for MEM[(long unsigned int *)_30 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_30 + 40B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_30 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_30 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_30 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_30 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B]
Creating dr for this_8(D)->D.37974._outputs
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 100
	step: 0
	aligned to: 256
	base_object: *this_8(D)
	Access function 0: 800
	Access function 1: 0
Creating dr for this_8(D)->D.37974._outputs
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 100
	step: 0
	aligned to: 256
	base_object: *this_8(D)
	Access function 0: 800
	Access function 1: 0
Creating dr for MEM[(struct _Rb_tree_impl *)_30]._M_header._M_parent
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_30]
	Access function 0: 64
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_30]._M_header._M_parent
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_30]
	Access function 0: 64
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_30]._M_header._M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_30]
	Access function 0: 128
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_30]._M_header._M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_30]
	Access function 0: 128
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_30]._M_header._M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_30]
	Access function 0: 192
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_30]._M_header._M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_30]
	Access function 0: 192
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)_30]._M_node_count
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_30]
	Access function 0: 320
Creating dr for MEM[(struct _Rb_tree_impl *)_30]._M_node_count
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_impl *)_30]
	Access function 0: 320
Creating dr for MEM[(struct _Rb_tree_node_base * *)this_8(D) + 176B]
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 176
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_8(D) + 176B]
Creating dr for MEM[(struct Allocator *)this_8(D)]._inputs
analyze_innermost: success.
	base_address: this_8(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(struct Allocator *)this_8(D)]
	Access function 0: 768
Creating dr for __val
analyze_innermost: success.
	base_address: &__val
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: __val

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:7)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:7)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:34, LOOPS:4, CONDITIONS:11, STMTS:256)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_5 })
  {
    <bb 2>:
    # DEBUG i => 0
    # DEBUG i => 0
    # VUSE <.MEM_7(D)>
    _81 = this_8(D)->D.37974._inputs;
    if (_81 <= 0)
      goto <bb 3>;
    else
      goto <bb 5>;

  }
  bb_3 (preds = {bb_2 bb_29 }, succs = {bb_4 bb_15 })
  {
    <bb 3>:
    # .MEM_109 = PHI <.MEM_7(D)(2), .MEM_80(29)>
    # DEBUG j => 0
    # VUSE <.MEM_109>
    _86 = this_8(D)->D.37974._outputs;
    if (_86 <= 0)
      goto <bb 4>;
    else
      goto <bb 15>;

  }
  bb_4 (preds = {bb_3 bb_27 }, succs = {bb_25 bb_26 })
  {
    <bb 4>:
    # .MEM_108 = PHI <.MEM_109(3), .MEM_101(27)>
    # DEBUG D#562 => &this_8(D)->_in_occ
    # DEBUG this => D#562
    _21 = &MEM[(struct set *)this_8(D) + 160B]._M_t;
    # DEBUG this => _21
    # VUSE <.MEM_108>
    _37 = MEM[(struct _Rb_tree_node_base * *)this_8(D) + 176B];
    # DEBUG D#90 => _21
    # DEBUG this => D#90
    # .MEM_49 = VDEF <.MEM_108>
    std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase (_21, _37);
    # DEBUG D#401 => &MEM[(struct _Rb_tree *)_21]._M_impl
    # DEBUG this => D#401
    # .MEM_50 = VDEF <.MEM_49>
    MEM[(struct _Rb_tree_impl *)this_8(D) + 160B]._M_header._M_parent = 0B;
    _38 = &MEM[(struct _Rb_tree_impl *)this_8(D) + 160B]._M_header;
    # .MEM_51 = VDEF <.MEM_50>
    MEM[(struct _Rb_tree_impl *)this_8(D) + 160B]._M_header._M_left = _38;
    # .MEM_52 = VDEF <.MEM_51>
    MEM[(struct _Rb_tree_impl *)this_8(D) + 160B]._M_header._M_right = _38;
    # .MEM_53 = VDEF <.MEM_52>
    MEM[(struct _Rb_tree_impl *)this_8(D) + 160B]._M_node_count = 0;
    # DEBUG D#561 => &this_8(D)->_out_occ
    # DEBUG this => D#561
    _23 = &MEM[(struct set *)this_8(D) + 208B]._M_t;
    # DEBUG this => _23
    # VUSE <.MEM_53>
    _35 = MEM[(struct _Rb_tree_node_base * *)this_8(D) + 224B];
    # DEBUG D#90 => _23
    # DEBUG this => D#90
    # .MEM_54 = VDEF <.MEM_53>
    std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase (_23, _35);
    # DEBUG D#401 => &MEM[(struct _Rb_tree *)_23]._M_impl
    # DEBUG this => D#401
    # .MEM_55 = VDEF <.MEM_54>
    MEM[(struct _Rb_tree_impl *)this_8(D) + 208B]._M_header._M_parent = 0B;
    _36 = &MEM[(struct _Rb_tree_impl *)this_8(D) + 208B]._M_header;
    # .MEM_56 = VDEF <.MEM_55>
    MEM[(struct _Rb_tree_impl *)this_8(D) + 208B]._M_header._M_left = _36;
    # .MEM_57 = VDEF <.MEM_56>
    MEM[(struct _Rb_tree_impl *)this_8(D) + 208B]._M_header._M_right = _36;
    # .MEM_58 = VDEF <.MEM_57>
    MEM[(struct _Rb_tree_impl *)this_8(D) + 208B]._M_node_count = 0;
    # DEBUG D#1074 => &this_8(D)->D.37974
    # DEBUG this => D#1074
    # VUSE <.MEM_58>
    _34 = MEM[(struct Allocator *)this_8(D)]._dirty;
    if (_34 != 0)
      goto <bb 25>;
    else
      goto <bb 26>;

  }
  bb_5 (preds = {bb_2 }, succs = {bb_6 })
  {
    <bb 5>:

  }
  bb_29 (preds = {bb_13 }, succs = {bb_3 })
  {
    <bb 29>:
    # .MEM_80 = PHI <.MEM_4(13)>
    goto <bb 3>;

  }
  bb_15 (preds = {bb_3 }, succs = {bb_16 })
  {
    <bb 15>:

  }
  bb_27 (preds = {bb_23 }, succs = {bb_4 })
  {
    <bb 27>:
    # .MEM_101 = PHI <.MEM_6(23)>
    goto <bb 4>;

  }
  bb_25 (preds = {bb_4 }, succs = {bb_26 })
  {
    <bb 25>:
    # DEBUG this => D#1074
    # VUSE <.MEM_58>
    _44 = MEM[(struct Allocator *)this_8(D)]._inputs;
    _67 = &MEM[(struct Allocator *)this_8(D)]._inmatch;
    # DEBUG this => _67
    # DEBUG __first => _44
    # DEBUG __last => -1
    # DEBUG this => _67
    # DEBUG __n => _44
    # .MEM_75 = VDEF <.MEM_58>
    __val = -1;
    # DEBUG __val => __val
    _68 = (long unsigned int) _44;
    # .MEM_76 = VDEF <.MEM_75>
    std::vector<int>::_M_fill_assign (_67, _68, &__val);
    # VUSE <.MEM_76>
    _69 = MEM[(struct Allocator *)this_8(D)]._outputs;
    _70 = &MEM[(struct Allocator *)this_8(D)]._outmatch;
    # DEBUG this => _70
    # DEBUG __first => _69
    # DEBUG __last => -1
    # DEBUG this => _70
    # DEBUG __n => _69
    # .MEM_77 = VDEF <.MEM_76>
    __val = -1;
    # DEBUG __val => __val
    _71 = (long unsigned int) _69;
    # .MEM_78 = VDEF <.MEM_77>
    std::vector<int>::_M_fill_assign (_70, _71, &__val);
    # .MEM_79 = VDEF <.MEM_78>
    MEM[(struct Allocator *)this_8(D)]._dirty = 0;

  }
  bb_26 (preds = {bb_25 bb_4 }, succs = {bb_33 })
  {
    <bb 26>:
    # .MEM_20 = PHI <.MEM_79(25), .MEM_58(4)>

  }
  bb_33 (preds = {bb_26 }, succs = {bb_1 })
  {
    <bb 33>:
    # VUSE <.MEM_20>
    return;

  }
  loop_2 (header = 16, latch = 24, niter = , upper_bound = 2147483647)
  {
    bb_16 (preds = {bb_15 bb_24 }, succs = {bb_17 bb_23 })
    {
      <bb 16>:
      # j_90 = PHI <0(15), j_19(24)>
      # .MEM_92 = PHI <.MEM_109(15), .MEM_6(24)>
      # prephitmp_107 = PHI <_86(15), prephitmp_115(24)>
      # DEBUG j => j_90
      _16 = (long unsigned int) j_90;
      # DEBUG D#559 => &this_8(D)->_out_req
      # VUSE <.MEM_92>
      _25 = MEM[(struct map * *)this_8(D) + 280B];
      # DEBUG D#85 => D#559
      # DEBUG __n => _16
      # DEBUG this => D#85
      _29 = _16 * 48;
      _30 = _25 + _29;
      # DEBUG this => NULL
      # VUSE <.MEM_92>
      _28 = MEM[(long unsigned int *)_30 + 40B];
      # DEBUG D#93 => D#94
      # DEBUG this => D#93
      if (_28 != 0)
        goto <bb 17>;
      else
        goto <bb 23>;

    }
    bb_17 (preds = {bb_16 }, succs = {bb_22 bb_18 })
    {
      <bb 17>:
      # DEBUG D#560 => &this_8(D)->_out_req
      # DEBUG D#85 => D#560
      # DEBUG __n => _16
      # DEBUG this => D#85
      # DEBUG this => NULL
      _31 = &_30->_M_t;
      # DEBUG this => _31
      # VUSE <.MEM_92>
      __x_32 = MEM[(struct _Rb_tree_node_base * *)_30 + 16B];
      # DEBUG D#91 => _31
      # DEBUG this => D#91
      # DEBUG this => _31
      # DEBUG __x => __x_32
      # DEBUG __x => __x_32
      if (__x_32 == 0B)
        goto <bb 22>;
      else
        goto <bb 18>;

    }
    bb_18 (preds = {bb_17 }, succs = {bb_19 })
    {
      <bb 18>:

    }
    bb_21 (preds = {bb_19 }, succs = {bb_28 })
    {
      <bb 21>:

    }
    bb_28 (preds = {bb_21 }, succs = {bb_22 })
    {
      <bb 28>:
      # VUSE <.MEM_74>
      pretmp_116 = this_8(D)->D.37974._outputs;

    }
    bb_22 (preds = {bb_28 bb_17 }, succs = {bb_32 })
    {
      <bb 22>:
      # .MEM_97 = PHI <.MEM_74(28), .MEM_92(17)>
      # prephitmp_117 = PHI <pretmp_116(28), prephitmp_107(17)>

    }
    bb_32 (preds = {bb_22 }, succs = {bb_23 })
    {
      <bb 32>:
      # DEBUG D#556 => &MEM[(struct _Rb_tree *)_31]._M_impl
      # DEBUG this => D#556
      # .MEM_45 = VDEF <.MEM_97>
      MEM[(struct _Rb_tree_impl *)_30]._M_header._M_parent = 0B;
      _33 = &MEM[(struct _Rb_tree_impl *)_30]._M_header;
      # .MEM_46 = VDEF <.MEM_45>
      MEM[(struct _Rb_tree_impl *)_30]._M_header._M_left = _33;
      # .MEM_47 = VDEF <.MEM_46>
      MEM[(struct _Rb_tree_impl *)_30]._M_header._M_right = _33;
      # .MEM_48 = VDEF <.MEM_47>
      MEM[(struct _Rb_tree_impl *)_30]._M_node_count = 0;

    }
    bb_23 (preds = {bb_16 bb_32 }, succs = {bb_27 bb_24 })
    {
      <bb 23>:
      # .MEM_6 = PHI <.MEM_92(16), .MEM_48(32)>
      # prephitmp_115 = PHI <prephitmp_107(16), prephitmp_117(32)>
      j_19 = j_90 + 1;
      # DEBUG j => j_19
      # DEBUG j => j_19
      if (j_19 >= prephitmp_115)
        goto <bb 27>;
      else
        goto <bb 24>;

    }
    bb_24 (preds = {bb_23 }, succs = {bb_16 })
    {
      <bb 24>:
      goto <bb 16>;

    }
    loop_4 (header = 19, latch = 20, niter = )
    {
      bb_19 (preds = {bb_18 bb_20 }, succs = {bb_21 bb_20 })
      {
        <bb 19>:
        # __x_94 = PHI <__x_32(18), __x_65(20)>
        # .MEM_96 = PHI <.MEM_92(18), .MEM_74(20)>
        # DEBUG __x => __x_94
        # VUSE <.MEM_96>
        _64 = MEM[(struct _Rb_tree_node_base * *)__x_94 + 24B];
        # DEBUG D#107 => __x_94
        # DEBUG __x => D#107
        # .MEM_73 = VDEF <.MEM_96>
        std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_M_erase (_31, _64);
        # VUSE <.MEM_73>
        __x_65 = MEM[(struct _Rb_tree_node_base * *)__x_94 + 16B];
        # DEBUG D#108 => __x_94
        # DEBUG __x => D#108
        # DEBUG __y => NULL
        # DEBUG D#548 => _31
        # DEBUG __p => __x_94
        # DEBUG this => D#548
        # DEBUG D#547 => D#548
        # DEBUG D#546 => D#548
        # DEBUG D#545 => D#548
        # DEBUG D#543 => D#545
        # DEBUG D#544 => __x_94
        # DEBUG this => D#543
        # DEBUG __p => D#544
        # DEBUG D#542 => D#543
        # DEBUG D#541 => D#544
        # DEBUG D#540 => D#544
        # DEBUG this => D#540
        # DEBUG D#539 => &D#541->_M_value_field
        # DEBUG __r => D#539
        # DEBUG D#538 => D#542
        # DEBUG this => D#538
        # DEBUG D#537 => D#538
        # DEBUG this => D#537
        # DEBUG this => NULL
        # DEBUG D.57746 => NULL
        # DEBUG this => NULL
        # DEBUG D#330 => D#539
        # DEBUG this => D#329
        # DEBUG __p => D#330
        # DEBUG this => NULL
        # DEBUG this => NULL
        # DEBUG this => D#546
        # DEBUG __p => __x_94
        # DEBUG this => D#547
        # DEBUG D#407 => 1
        # DEBUG __p => __x_94
        # DEBUG __a => D#406
        # DEBUG __n => D#407
        # DEBUG D#405 => D#407
        # DEBUG D#404 => D#406
        # DEBUG D#402 => D#404
        # DEBUG D#403 => D#405
        # DEBUG __p => __x_94
        # DEBUG this => D#402
        # DEBUG D.65499 => D#403
        # .MEM_74 = VDEF <.MEM_73>
        operator delete (__x_94);
        # DEBUG __x => __x_65
        # DEBUG __x => __x_65
        if (__x_65 == 0B)
          goto <bb 21>;
        else
          goto <bb 20>;

      }
      bb_20 (preds = {bb_19 }, succs = {bb_19 })
      {
        <bb 20>:
        goto <bb 19>;

      }
    }
  }
  loop_1 (header = 6, latch = 14, niter = , upper_bound = 2147483647)
  {
    bb_6 (preds = {bb_5 bb_14 }, succs = {bb_7 bb_13 })
    {
      <bb 6>:
      # i_89 = PHI <0(5), i_14(14)>
      # .MEM_91 = PHI <.MEM_7(D)(5), .MEM_4(14)>
      # prephitmp_87 = PHI <_81(5), prephitmp_111(14)>
      # DEBUG i => i_89
      _10 = (long unsigned int) i_89;
      # DEBUG D#557 => &this_8(D)->_in_req
      # VUSE <.MEM_91>
      _24 = MEM[(struct map * *)this_8(D) + 256B];
      # DEBUG D#85 => D#557
      # DEBUG __n => _10
      # DEBUG this => D#85
      _13 = _10 * 48;
      _12 = _24 + _13;
      # DEBUG this => NULL
      # VUSE <.MEM_91>
      _18 = MEM[(long unsigned int *)_12 + 40B];
      # DEBUG D#93 => D#94
      # DEBUG this => D#93
      if (_18 != 0)
        goto <bb 7>;
      else
        goto <bb 13>;

    }
    bb_7 (preds = {bb_6 }, succs = {bb_12 bb_8 })
    {
      <bb 7>:
      # DEBUG D#558 => &this_8(D)->_in_req
      # DEBUG D#85 => D#558
      # DEBUG __n => _10
      # DEBUG this => D#85
      # DEBUG this => NULL
      _11 = &_12->_M_t;
      # DEBUG this => _11
      # VUSE <.MEM_91>
      __x_26 = MEM[(struct _Rb_tree_node_base * *)_12 + 16B];
      # DEBUG D#91 => _11
      # DEBUG this => D#91
      # DEBUG this => _11
      # DEBUG __x => __x_26
      # DEBUG __x => __x_26
      if (__x_26 == 0B)
        goto <bb 12>;
      else
        goto <bb 8>;

    }
    bb_8 (preds = {bb_7 }, succs = {bb_9 })
    {
      <bb 8>:

    }
    bb_11 (preds = {bb_9 }, succs = {bb_30 })
    {
      <bb 11>:

    }
    bb_30 (preds = {bb_11 }, succs = {bb_12 })
    {
      <bb 30>:
      # VUSE <.MEM_72>
      pretmp_112 = this_8(D)->D.37974._inputs;

    }
    bb_12 (preds = {bb_30 bb_7 }, succs = {bb_31 })
    {
      <bb 12>:
      # .MEM_99 = PHI <.MEM_72(30), .MEM_91(7)>
      # prephitmp_113 = PHI <pretmp_112(30), prephitmp_87(7)>

    }
    bb_31 (preds = {bb_12 }, succs = {bb_13 })
    {
      <bb 31>:
      # DEBUG D#556 => &MEM[(struct _Rb_tree *)_11]._M_impl
      # DEBUG this => D#556
      # .MEM_40 = VDEF <.MEM_99>
      MEM[(struct _Rb_tree_impl *)_12]._M_header._M_parent = 0B;
      _27 = &MEM[(struct _Rb_tree_impl *)_12]._M_header;
      # .MEM_41 = VDEF <.MEM_40>
      MEM[(struct _Rb_tree_impl *)_12]._M_header._M_left = _27;
      # .MEM_42 = VDEF <.MEM_41>
      MEM[(struct _Rb_tree_impl *)_12]._M_header._M_right = _27;
      # .MEM_43 = VDEF <.MEM_42>
      MEM[(struct _Rb_tree_impl *)_12]._M_node_count = 0;

    }
    bb_13 (preds = {bb_6 bb_31 }, succs = {bb_29 bb_14 })
    {
      <bb 13>:
      # .MEM_4 = PHI <.MEM_91(6), .MEM_43(31)>
      # prephitmp_111 = PHI <prephitmp_87(6), prephitmp_113(31)>
      i_14 = i_89 + 1;
      # DEBUG i => i_14
      # DEBUG i => i_14
      if (i_14 >= prephitmp_111)
        goto <bb 29>;
      else
        goto <bb 14>;

    }
    bb_14 (preds = {bb_13 }, succs = {bb_6 })
    {
      <bb 14>:
      goto <bb 6>;

    }
    loop_3 (header = 9, latch = 10, niter = )
    {
      bb_9 (preds = {bb_8 bb_10 }, succs = {bb_11 bb_10 })
      {
        <bb 9>:
        # __x_95 = PHI <__x_26(8), __x_62(10)>
        # .MEM_98 = PHI <.MEM_91(8), .MEM_72(10)>
        # DEBUG __x => __x_95
        # VUSE <.MEM_98>
        _61 = MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B];
        # DEBUG D#107 => __x_95
        # DEBUG __x => D#107
        # .MEM_59 = VDEF <.MEM_98>
        std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_M_erase (_11, _61);
        # VUSE <.MEM_59>
        __x_62 = MEM[(struct _Rb_tree_node_base * *)__x_95 + 16B];
        # DEBUG D#108 => __x_95
        # DEBUG __x => D#108
        # DEBUG __y => NULL
        # DEBUG D#548 => _11
        # DEBUG __p => __x_95
        # DEBUG this => D#548
        # DEBUG D#547 => D#548
        # DEBUG D#546 => D#548
        # DEBUG D#545 => D#548
        # DEBUG D#543 => D#545
        # DEBUG D#544 => __x_95
        # DEBUG this => D#543
        # DEBUG __p => D#544
        # DEBUG D#542 => D#543
        # DEBUG D#541 => D#544
        # DEBUG D#540 => D#544
        # DEBUG this => D#540
        # DEBUG D#539 => &D#541->_M_value_field
        # DEBUG __r => D#539
        # DEBUG D#538 => D#542
        # DEBUG this => D#538
        # DEBUG D#537 => D#538
        # DEBUG this => D#537
        # DEBUG this => NULL
        # DEBUG D.57746 => NULL
        # DEBUG this => NULL
        # DEBUG D#330 => D#539
        # DEBUG this => D#329
        # DEBUG __p => D#330
        # DEBUG this => NULL
        # DEBUG this => NULL
        # DEBUG this => D#546
        # DEBUG __p => __x_95
        # DEBUG this => D#547
        # DEBUG D#407 => 1
        # DEBUG __p => __x_95
        # DEBUG __a => D#406
        # DEBUG __n => D#407
        # DEBUG D#405 => D#407
        # DEBUG D#404 => D#406
        # DEBUG D#402 => D#404
        # DEBUG D#403 => D#405
        # DEBUG __p => __x_95
        # DEBUG this => D#402
        # DEBUG D.65486 => D#403
        # .MEM_72 = VDEF <.MEM_59>
        operator delete (__x_95);
        # DEBUG __x => __x_62
        # DEBUG __x => __x_62
        if (__x_62 == 0B)
          goto <bb 11>;
        else
          goto <bb 10>;

      }
      bb_10 (preds = {bb_9 }, succs = {bb_9 })
      {
        <bb 10>:
        goto <bb 9>;

      }
    }
  }
}

Pass statistics:
----------------

virtual void SparseAllocator::Clear() (struct SparseAllocatorD.36303 * const thisD.42333)
{
  intD.9 __valD.65506;
  intD.9 __valD.65513;
  struct _Rb_tree_nodeD.41466 * __xD.65489;
  struct _Rb_tree_nodeD.41466 * __xD.65476;
  intD.9 jD.42336;
  intD.9 iD.42335;
  long unsigned intD.14 _10;
  struct _Rep_typeD.41460 * _11;
  struct mapD.37148 & _12;
  long unsigned intD.14 _13;
  long unsigned intD.14 _16;
  const size_typeD.41494 _18;
  struct _Rep_typeD.36315 * _21;
  struct _Rep_typeD.36315 * _23;
  struct mapD.37148 * _24;
  struct mapD.37148 * _25;
  struct _Rb_tree_node_baseD.24800 * _27;
  const size_typeD.41494 _28;
  long unsigned intD.14 _29;
  struct mapD.37148 & _30;
  struct _Rep_typeD.41460 * _31;
  struct _Rb_tree_node_baseD.24800 * _33;
  boolD.2757 _34;
  struct _Rb_tree_node_baseD.24800 * _35;
  struct _Rb_tree_node_baseD.24800 * _36;
  struct _Rb_tree_node_baseD.24800 * _37;
  struct _Rb_tree_node_baseD.24800 * _38;
  intD.9 _44;
  struct _Rb_tree_node_baseD.24800 * _61;
  struct _Rb_tree_node_baseD.24800 * _64;
  struct vectorD.34569 * _67;
  long unsigned intD.14 _68;
  intD.9 _69;
  struct vectorD.34569 * _70;
  long unsigned intD.14 _71;
  intD.9 _81;
  intD.9 _86;
  const intD.9 prephitmp_87;
  const intD.9 prephitmp_107;
  const intD.9 prephitmp_111;
  const intD.9 pretmp_112;
  const intD.9 prephitmp_113;
  const intD.9 prephitmp_115;
  const intD.9 pretmp_116;
  const intD.9 prephitmp_117;

;;   basic block 2, loop depth 0, count 0, freq 307, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG iD.42335 => 0
  # DEBUG iD.42335 => 0
  # VUSE <.MEM_7(D)>
  _81 = this_8(D)->D.37974._inputsD.34629;
  if (_81 <= 0)
    goto <bb 3>;
  else
    goto <bb 5>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 307, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [100.0%]  (FALLTHRU)
  # .MEM_109 = PHI <.MEM_7(D)(2), .MEM_80(29)>
  # DEBUG jD.42336 => 0
  # VUSE <.MEM_109>
  _86 = this_8(D)->D.37974._outputsD.34630;
  if (_86 <= 0)
    goto <bb 4>;
  else
    goto <bb 15>;
;;    succ:       4 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 307, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [100.0%]  (FALLTHRU)
  # .MEM_108 = PHI <.MEM_109(3), .MEM_101(27)>
  # DEBUG D#562ptD.0 => &this_8(D)->_in_occD.37144
  # DEBUG thisD.57994 => D#562ptD.0
  # PT = nonlocal 
  _21 = &MEM[(struct setD.36306 *)this_8(D) + 160B]._M_tD.36318;
  # DEBUG thisD.57995 => _21
  # VUSE <.MEM_108>
  # PT = nonlocal escaped 
  _37 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_8(D) + 176B];
  # DEBUG D#90ptD.0 => _21
  # DEBUG thisD.55022 => D#90ptD.0
  # .MEM_49 = VDEF <.MEM_108>
  # USE = nonlocal null { D.65506 D.65513 } (escaped)
  # CLB = nonlocal null { D.65506 D.65513 } (escaped)
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiED.36688 (_21, _37);
  # DEBUG D#401ptD.0 => &MEM[(struct _Rb_treeD.36317 *)_21]._M_implD.36395
  # DEBUG thisD.57996 => D#401ptD.0
  # .MEM_50 = VDEF <.MEM_49>
  MEM[(struct _Rb_tree_implD.36407 *)this_8(D) + 160B]._M_headerD.36561._M_parentD.24805 = 0B;
  # PT = nonlocal 
  _38 = &MEM[(struct _Rb_tree_implD.36407 *)this_8(D) + 160B]._M_headerD.36561;
  # .MEM_51 = VDEF <.MEM_50>
  MEM[(struct _Rb_tree_implD.36407 *)this_8(D) + 160B]._M_headerD.36561._M_leftD.24806 = _38;
  # .MEM_52 = VDEF <.MEM_51>
  MEM[(struct _Rb_tree_implD.36407 *)this_8(D) + 160B]._M_headerD.36561._M_rightD.24807 = _38;
  # .MEM_53 = VDEF <.MEM_52>
  MEM[(struct _Rb_tree_implD.36407 *)this_8(D) + 160B]._M_node_countD.36562 = 0;
  # DEBUG D#561ptD.0 => &this_8(D)->_out_occD.37145
  # DEBUG thisD.57991 => D#561ptD.0
  # PT = nonlocal 
  _23 = &MEM[(struct setD.36306 *)this_8(D) + 208B]._M_tD.36318;
  # DEBUG thisD.57992 => _23
  # VUSE <.MEM_53>
  # PT = nonlocal escaped 
  _35 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_8(D) + 224B];
  # DEBUG D#90ptD.0 => _23
  # DEBUG thisD.55022 => D#90ptD.0
  # .MEM_54 = VDEF <.MEM_53>
  # USE = nonlocal null { D.65506 D.65513 } (escaped)
  # CLB = nonlocal null { D.65506 D.65513 } (escaped)
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiED.36688 (_23, _35);
  # DEBUG D#401ptD.0 => &MEM[(struct _Rb_treeD.36317 *)_23]._M_implD.36395
  # DEBUG thisD.57993 => D#401ptD.0
  # .MEM_55 = VDEF <.MEM_54>
  MEM[(struct _Rb_tree_implD.36407 *)this_8(D) + 208B]._M_headerD.36561._M_parentD.24805 = 0B;
  # PT = nonlocal 
  _36 = &MEM[(struct _Rb_tree_implD.36407 *)this_8(D) + 208B]._M_headerD.36561;
  # .MEM_56 = VDEF <.MEM_55>
  MEM[(struct _Rb_tree_implD.36407 *)this_8(D) + 208B]._M_headerD.36561._M_leftD.24806 = _36;
  # .MEM_57 = VDEF <.MEM_56>
  MEM[(struct _Rb_tree_implD.36407 *)this_8(D) + 208B]._M_headerD.36561._M_rightD.24807 = _36;
  # .MEM_58 = VDEF <.MEM_57>
  MEM[(struct _Rb_tree_implD.36407 *)this_8(D) + 208B]._M_node_countD.36562 = 0;
  # DEBUG D#1074ptD.0 => &this_8(D)->D.37974
  # DEBUG thisD.57990 => D#1074ptD.0
  # VUSE <.MEM_58>
  _34 = MEM[(struct AllocatorD.34627 *)this_8(D)]._dirtyD.34631;
  if (_34 != 0)
    goto <bb 25>;
  else
    goto <bb 26>;
;;    succ:       25 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 279, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 3103, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # i_89 = PHI <0(5), i_14(14)>
  # .MEM_91 = PHI <.MEM_7(D)(5), .MEM_4(14)>
  # prephitmp_87 = PHI <_81(5), prephitmp_111(14)>
  # DEBUG iD.42335 => i_89
  # RANGE [0, 18446744073709551615]
  _10 = (long unsigned intD.14) i_89;
  # DEBUG D#557ptD.0 => &this_8(D)->_in_reqD.37895
  # VUSE <.MEM_91>
  # PT = nonlocal escaped 
  _24 = MEM[(struct mapD.37148 * *)this_8(D) + 256B];
  # DEBUG D#85ptD.0 => D#557ptD.0
  # DEBUG __nD.57966 => _10
  # DEBUG thisD.57967 => D#85ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _13 = _10 * 48;
  # PT = nonlocal escaped 
  _12 = _24 + _13;
  # DEBUG thisD.57962 => NULL
  # VUSE <.MEM_91>
  _18 = MEM[(long unsigned intD.14 *)_12 + 40B];
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.57963 => D#93ptD.0
  if (_18 != 0)
    goto <bb 7>;
  else
    goto <bb 13>;
;;    succ:       7 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#558ptD.0 => &this_8(D)->_in_reqD.37895
  # DEBUG D#85ptD.0 => D#558ptD.0
  # DEBUG __nD.57973 => _10
  # DEBUG thisD.57974 => D#85ptD.0
  # DEBUG thisD.57969 => NULL
  # PT = nonlocal escaped 
  _11 = &_12->_M_tD.41463;
  # DEBUG thisD.57970 => _11
  # VUSE <.MEM_91>
  # PT = nonlocal escaped 
  __x_26 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_12 + 16B];
  # DEBUG D#91ptD.0 => _11
  # DEBUG thisD.57956 => D#91ptD.0
  # DEBUG thisD.65475 => _11
  # DEBUG __xD.65476 => __x_26
  # DEBUG __xD.65476 => __x_26
  if (__x_26 == 0B)
    goto <bb 12>;
  else
    goto <bb 8>;
;;    succ:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_95 = PHI <__x_26(8), __x_62(10)>
  # .MEM_98 = PHI <.MEM_91(8), .MEM_72(10)>
  # DEBUG __xD.65476 => __x_95
  # VUSE <.MEM_98>
  # PT = nonlocal escaped 
  _61 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_95 + 24B];
  # DEBUG D#107ptD.0 => __x_95
  # DEBUG __xD.57814 => D#107ptD.0
  # .MEM_59 = VDEF <.MEM_98>
  # USE = nonlocal null { D.65506 D.65513 } (escaped)
  # CLB = nonlocal null { D.65506 D.65513 } (escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (_11, _61);
  # VUSE <.MEM_59>
  # PT = nonlocal escaped 
  __x_62 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_95 + 16B];
  # DEBUG D#108ptD.0 => __x_95
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.65477 => NULL
  # DEBUG D#548ptD.0 => _11
  # DEBUG __pD.65479 => __x_95
  # DEBUG thisD.65478 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_95
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.65481 => D#546ptD.0
  # DEBUG __pD.65480 => __x_95
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.65484 => __x_95
  # DEBUG __aD.65482 => D#406ptD.0
  # DEBUG __nD.65483 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.65487 => __x_95
  # DEBUG thisD.65485 => D#402ptD.0
  # DEBUG D.65486 => D#403ptD.0
  # .MEM_72 = VDEF <.MEM_59>
  # USE = nonlocal null { D.65506 D.65513 } (escaped)
  # CLB = nonlocal null { D.65506 D.65513 } (escaped)
  _ZdlPvD.2766 (__x_95);
  # DEBUG __xD.65476 => __x_62
  # DEBUG __xD.65476 => __x_62
  if (__x_62 == 0B)
    goto <bb 11>;
  else
    goto <bb 10>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 2, count 0, freq 8281, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 9>;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 10, next block 30, flags: (NEW)
;;    pred:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       30 [100.0%]  (FALLTHRU)

;;   basic block 30, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 11, next block 12, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_72>
  pretmp_112 = this_8(D)->D.37974._inputsD.34629;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 30, next block 31, flags: (NEW, REACHABLE)
;;    pred:       30 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_99 = PHI <.MEM_72(30), .MEM_91(7)>
  # prephitmp_113 = PHI <pretmp_112(30), prephitmp_87(7)>
;;    succ:       31 [100.0%]  (FALLTHRU)

;;   basic block 31, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 12, next block 13, flags: (NEW)
;;    pred:       12 [100.0%]  (FALLTHRU)
  # DEBUG D#556ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_11]._M_implD.41540
  # DEBUG thisD.57971 => D#556ptD.0
  # .MEM_40 = VDEF <.MEM_99>
  MEM[(struct _Rb_tree_implD.41541 *)_12]._M_headerD.41695._M_parentD.24805 = 0B;
  # PT = nonlocal escaped 
  _27 = &MEM[(struct _Rb_tree_implD.41541 *)_12]._M_headerD.41695;
  # .MEM_41 = VDEF <.MEM_40>
  MEM[(struct _Rb_tree_implD.41541 *)_12]._M_headerD.41695._M_leftD.24806 = _27;
  # .MEM_42 = VDEF <.MEM_41>
  MEM[(struct _Rb_tree_implD.41541 *)_12]._M_headerD.41695._M_rightD.24807 = _27;
  # .MEM_43 = VDEF <.MEM_42>
  MEM[(struct _Rb_tree_implD.41541 *)_12]._M_node_countD.41696 = 0;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 3103, maybe hot
;;    prev block 31, next block 29, flags: (NEW, REACHABLE)
;;    pred:       6 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_4 = PHI <.MEM_91(6), .MEM_43(31)>
  # prephitmp_111 = PHI <prephitmp_87(6), prephitmp_113(31)>
  i_14 = i_89 + 1;
  # DEBUG iD.42335 => i_14
  # DEBUG iD.42335 => i_14
  if (i_14 >= prephitmp_111)
    goto <bb 29>;
  else
    goto <bb 14>;
;;    succ:       29 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 279, maybe hot
;;    prev block 13, next block 14, flags: (NEW)
;;    pred:       13 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_80 = PHI <.MEM_4(13)>
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU)

;;   basic block 14, loop depth 1, count 0, freq 2824, maybe hot
;;    prev block 29, next block 15, flags: (NEW)
;;    pred:       13 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 279, maybe hot
;;    prev block 14, next block 16, flags: (NEW)
;;    pred:       3 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 1, count 0, freq 3103, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       15 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                24 [100.0%]  (FALLTHRU,EXECUTABLE)
  # j_90 = PHI <0(15), j_19(24)>
  # .MEM_92 = PHI <.MEM_109(15), .MEM_6(24)>
  # prephitmp_107 = PHI <_86(15), prephitmp_115(24)>
  # DEBUG jD.42336 => j_90
  # RANGE [0, 18446744073709551615]
  _16 = (long unsigned intD.14) j_90;
  # DEBUG D#559ptD.0 => &this_8(D)->_out_reqD.37896
  # VUSE <.MEM_92>
  # PT = nonlocal escaped 
  _25 = MEM[(struct mapD.37148 * *)this_8(D) + 280B];
  # DEBUG D#85ptD.0 => D#559ptD.0
  # DEBUG __nD.57980 => _16
  # DEBUG thisD.57981 => D#85ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _29 = _16 * 48;
  # PT = nonlocal escaped 
  _30 = _25 + _29;
  # DEBUG thisD.57976 => NULL
  # VUSE <.MEM_92>
  _28 = MEM[(long unsigned intD.14 *)_30 + 40B];
  # DEBUG D#93ptD.0 => D#94ptD.0
  # DEBUG thisD.57977 => D#93ptD.0
  if (_28 != 0)
    goto <bb 17>;
  else
    goto <bb 23>;
;;    succ:       17 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#560ptD.0 => &this_8(D)->_out_reqD.37896
  # DEBUG D#85ptD.0 => D#560ptD.0
  # DEBUG __nD.57987 => _16
  # DEBUG thisD.57988 => D#85ptD.0
  # DEBUG thisD.57983 => NULL
  # PT = nonlocal escaped 
  _31 = &_30->_M_tD.41463;
  # DEBUG thisD.57984 => _31
  # VUSE <.MEM_92>
  # PT = nonlocal escaped 
  __x_32 = MEM[(struct _Rb_tree_node_baseD.24800 * *)_30 + 16B];
  # DEBUG D#91ptD.0 => _31
  # DEBUG thisD.57956 => D#91ptD.0
  # DEBUG thisD.65488 => _31
  # DEBUG __xD.65489 => __x_32
  # DEBUG __xD.65489 => __x_32
  if (__x_32 == 0B)
    goto <bb 22>;
  else
    goto <bb 18>;
;;    succ:       22 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 17, next block 19, flags: (NEW)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       18 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                20 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_94 = PHI <__x_32(18), __x_65(20)>
  # .MEM_96 = PHI <.MEM_92(18), .MEM_74(20)>
  # DEBUG __xD.65489 => __x_94
  # VUSE <.MEM_96>
  # PT = nonlocal escaped 
  _64 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_94 + 24B];
  # DEBUG D#107ptD.0 => __x_94
  # DEBUG __xD.57814 => D#107ptD.0
  # .MEM_73 = VDEF <.MEM_96>
  # USE = nonlocal null { D.65506 D.65513 } (escaped)
  # CLB = nonlocal null { D.65506 D.65513 } (escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (_31, _64);
  # VUSE <.MEM_73>
  # PT = nonlocal escaped 
  __x_65 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_94 + 16B];
  # DEBUG D#108ptD.0 => __x_94
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.65490 => NULL
  # DEBUG D#548ptD.0 => _31
  # DEBUG __pD.65492 => __x_94
  # DEBUG thisD.65491 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_94
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.65494 => D#546ptD.0
  # DEBUG __pD.65493 => __x_94
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.65497 => __x_94
  # DEBUG __aD.65495 => D#406ptD.0
  # DEBUG __nD.65496 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.65500 => __x_94
  # DEBUG thisD.65498 => D#402ptD.0
  # DEBUG D.65499 => D#403ptD.0
  # .MEM_74 = VDEF <.MEM_73>
  # USE = nonlocal null { D.65506 D.65513 } (escaped)
  # CLB = nonlocal null { D.65506 D.65513 } (escaped)
  _ZdlPvD.2766 (__x_94);
  # DEBUG __xD.65489 => __x_65
  # DEBUG __xD.65489 => __x_65
  if (__x_65 == 0B)
    goto <bb 21>;
  else
    goto <bb 20>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 2, count 0, freq 8281, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       19 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 19>;
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 20, next block 28, flags: (NEW)
;;    pred:       19 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       28 [100.0%]  (FALLTHRU)

;;   basic block 28, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 21, next block 22, flags: (NEW)
;;    pred:       21 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_74>
  pretmp_116 = this_8(D)->D.37974._outputsD.34630;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 28, next block 32, flags: (NEW, REACHABLE)
;;    pred:       28 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_97 = PHI <.MEM_74(28), .MEM_92(17)>
  # prephitmp_117 = PHI <pretmp_116(28), prephitmp_107(17)>
;;    succ:       32 [100.0%]  (FALLTHRU)

;;   basic block 32, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 22, next block 23, flags: (NEW)
;;    pred:       22 [100.0%]  (FALLTHRU)
  # DEBUG D#556ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_31]._M_implD.41540
  # DEBUG thisD.57985 => D#556ptD.0
  # .MEM_45 = VDEF <.MEM_97>
  MEM[(struct _Rb_tree_implD.41541 *)_30]._M_headerD.41695._M_parentD.24805 = 0B;
  # PT = nonlocal escaped 
  _33 = &MEM[(struct _Rb_tree_implD.41541 *)_30]._M_headerD.41695;
  # .MEM_46 = VDEF <.MEM_45>
  MEM[(struct _Rb_tree_implD.41541 *)_30]._M_headerD.41695._M_leftD.24806 = _33;
  # .MEM_47 = VDEF <.MEM_46>
  MEM[(struct _Rb_tree_implD.41541 *)_30]._M_headerD.41695._M_rightD.24807 = _33;
  # .MEM_48 = VDEF <.MEM_47>
  MEM[(struct _Rb_tree_implD.41541 *)_30]._M_node_countD.41696 = 0;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 3103, maybe hot
;;    prev block 32, next block 27, flags: (NEW, REACHABLE)
;;    pred:       16 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_6 = PHI <.MEM_92(16), .MEM_48(32)>
  # prephitmp_115 = PHI <prephitmp_107(16), prephitmp_117(32)>
  j_19 = j_90 + 1;
  # DEBUG jD.42336 => j_19
  # DEBUG jD.42336 => j_19
  if (j_19 >= prephitmp_115)
    goto <bb 27>;
  else
    goto <bb 24>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 279, maybe hot
;;    prev block 23, next block 24, flags: (NEW)
;;    pred:       23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_101 = PHI <.MEM_6(23)>
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU)

;;   basic block 24, loop depth 1, count 0, freq 2824, maybe hot
;;    prev block 27, next block 25, flags: (NEW)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 16>;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 120, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       4 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.65501 => D#1074ptD.0
  # VUSE <.MEM_58>
  _44 = MEM[(struct AllocatorD.34627 *)this_8(D)]._inputsD.34629;
  # PT = nonlocal 
  _67 = &MEM[(struct AllocatorD.34627 *)this_8(D)]._inmatchD.35376;
  # DEBUG thisD.65504 => _67
  # DEBUG __firstD.65503 => _44
  # DEBUG __lastD.65502 => -1
  # DEBUG thisD.65508 => _67
  # DEBUG __nD.65507 => _44
  # .MEM_75 = VDEF <.MEM_58>
  __valD.65506 = -1;
  # DEBUG __valD.65506 => __valD.65506
  # RANGE ~[2147483648, 18446744071562067967]
  _68 = (long unsigned intD.14) _44;
  # .MEM_76 = VDEF <.MEM_75>
  # USE = nonlocal null { D.65506 D.65513 } (escaped)
  # CLB = nonlocal null { D.65506 D.65513 } (escaped)
  _ZNSt6vectorIiSaIiEE14_M_fill_assignEmRKiD.35237 (_67, _68, &__valD.65506);
  # VUSE <.MEM_76>
  _69 = MEM[(struct AllocatorD.34627 *)this_8(D)]._outputsD.34630;
  # PT = nonlocal 
  _70 = &MEM[(struct AllocatorD.34627 *)this_8(D)]._outmatchD.35377;
  # DEBUG thisD.65511 => _70
  # DEBUG __firstD.65510 => _69
  # DEBUG __lastD.65509 => -1
  # DEBUG thisD.65515 => _70
  # DEBUG __nD.65514 => _69
  # .MEM_77 = VDEF <.MEM_76>
  __valD.65513 = -1;
  # DEBUG __valD.65513 => __valD.65513
  # RANGE ~[2147483648, 18446744071562067967]
  _71 = (long unsigned intD.14) _69;
  # .MEM_78 = VDEF <.MEM_77>
  # USE = nonlocal null { D.65506 D.65513 } (escaped)
  # CLB = nonlocal null { D.65506 D.65513 } (escaped)
  _ZNSt6vectorIiSaIiEE14_M_fill_assignEmRKiD.35237 (_70, _71, &__valD.65513);
  # .MEM_79 = VDEF <.MEM_78>
  MEM[(struct AllocatorD.34627 *)this_8(D)]._dirtyD.34631 = 0;
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 307, maybe hot
;;    prev block 25, next block 33, flags: (NEW, REACHABLE)
;;    pred:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                4 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_20 = PHI <.MEM_79(25), .MEM_58(4)>
;;    succ:       33 [100.0%]  (FALLTHRU)

;;   basic block 33, loop depth 0, count 0, freq 307, maybe hot
;;    prev block 26, next block 1, flags: (NEW)
;;    pred:       26 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_20>
  return;
;;    succ:       EXIT [100.0%] 

}



;; Function virtual void Allocator::Clear() (_ZN9Allocator5ClearEv, funcdef_no=1742, decl_uid=35390, cgraph_uid=412, symbol_order=413)


Pass statistics:
----------------

virtual void Allocator::Clear() (struct AllocatorD.34627 * const thisD.40242)
{
  intD.9 * D.65745;
  intD.9 * __firstD.65720;
  size_typeD.34950 __nD.65703;
  intD.9 * __tmpD.65664;
  intD.9 * __tmpD.65661;
  intD.9 * __tmpD.65658;
  struct vectorD.34569 __tmpD.65653;
  intD.9 * __firstD.65559;
  intD.9 * __firstD.65572;
  intD.9 * __firstD.65577;
  long unsigned intD.14 __nD.65576;
  size_tD.2818 __nD.65555;
  intD.9 __valD.65544;
  intD.9 __valD.65551;
  boolD.2757 _3;
  intD.9 _6;
  struct vectorD.34569 * _7;
  long unsigned intD.14 _8;
  intD.9 _9;
  intD.9 * const _12;
  long intD.12 _13;
  long intD.12 _14;
  long intD.12 _15;
  long intD.12 _16;
  size_typeD.34950 _17;
  long intD.12 _19;
  long intD.12 _20;
  long intD.12 _21;
  size_typeD.34950 _22;
  sizetype _23;
  sizetype _24;
  long unsigned intD.14 _28;
  unsigned long _30;
  sizetype _31;
  intD.9 * _34;
  sizetype _37;
  sizetype _41;
  intD.9 * _42;
  intD.9 * _48;
  long unsigned intD.14 _49;
  long unsigned intD.14 _52;
  intD.9 * _53;
  sizetype _58;
  unsigned long _66;
  sizetype _80;
  long unsigned intD.14 _81;
  long unsigned intD.14 _88;
  long unsigned intD.14 _89;
  long unsigned intD.14 _91;
  intD.9 * pretmp_92;
  unsigned long _103;
  intD.9 * _107;
  unsigned long _108;
  sizetype _109;
  intD.9 * prephitmp_110;

;;   basic block 2, loop depth 0, count 0, freq 6504, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_1(D)>
  _3 = this_2(D)->_dirtyD.34631;
  if (_3 != 0)
    goto <bb 3>;
  else
    goto <bb 31>;
;;    succ:       3 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 2535, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.65539 => this_2(D)
  # VUSE <.MEM_1(D)>
  _6 = this_2(D)->_inputsD.34629;
  # PT = nonlocal 
  _7 = &this_2(D)->_inmatchD.35376;
  # DEBUG thisD.65542 => _7
  # DEBUG __firstD.65541 => _6
  # DEBUG __lastD.65540 => -1
  # DEBUG thisD.65546 => _7
  # DEBUG __nD.65545 => _6
  # .MEM_62 = VDEF <.MEM_1(D)>
  __valD.65544 = -1;
  # DEBUG __valD.65544 => __valD.65544
  # RANGE ~[2147483648, 18446744071562067967]
  _8 = (long unsigned intD.14) _6;
  # .MEM_63 = VDEF <.MEM_62>
  # USE = nonlocal null { D.65544 D.65748 } (escaped heap)
  # CLB = nonlocal null { D.65544 D.65748 } (escaped heap)
  _ZNSt6vectorIiSaIiEE14_M_fill_assignEmRKiD.35237 (_7, _8, &__valD.65544);
  # VUSE <.MEM_63>
  _9 = this_2(D)->_outputsD.34630;
  # DEBUG D#1082ptD.0 => &this_2(D)->_outmatchD.35377
  # DEBUG thisD.65549 => D#1082ptD.0
  # DEBUG __firstD.65548 => _9
  # DEBUG __lastD.65547 => -1
  # DEBUG thisD.65553 => D#1082ptD.0
  # DEBUG __nD.65552 => _9
  # DEBUG __valD.65551 => -1
  # DEBUG __valD.65551 => -1
  # RANGE ~[2147483648, 18446744071562067967]
  __n_11 = (size_tD.2818) _9;
  # DEBUG thisD.65554 => D#1082ptD.0
  # DEBUG __nD.65555 => __n_11
  # DEBUG __valD.65556 => &__valD.65551
  # VUSE <.MEM_63>
  # PT = nonlocal escaped 
  __first_5 = MEM[(intD.9 * *)this_2(D) + 136B];
  # DEBUG D#157ptD.0 => D#1082ptD.0
  # VUSE <.MEM_63>
  # PT = nonlocal escaped 
  _12 = MEM[(intD.9 * *)this_2(D) + 152B];
  # DEBUG D#157ptD.0 => D#1082ptD.0
  # DEBUG thisD.65596 => D#157ptD.0
  # DEBUG thisD.65597 => D#157ptD.0
  _13 = (long intD.12) _12;
  _14 = (long intD.12) __first_5;
  _15 = _13 - _14;
  # RANGE [-2305843009213693952, 2305843009213693951]
  _16 = _15 /[ex] 4;
  # RANGE ~[2305843009213693952, 16140901064495857663]
  _17 = (size_typeD.34950) _16;
  if (__n_11 > _17)
    goto <bb 4>;
  else
    goto <bb 14>;
;;    succ:       4 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.65600 => D#1082ptD.0
  # DEBUG __nD.65601 => __n_11
  # DEBUG __valD.65602 => &__valD.65551
  # DEBUG D#532ptD.0 => &D#1082ptD.0->D.35374
  # DEBUG thisD.65680 => D#532ptD.0
  # DEBUG D#1081ptD.0 => &MEM[(struct _Vector_baseD.34632 *)this_2(D) + 136B]._M_implD.34865
  # DEBUG thisD.65702 => &__tmpD.65653
  # DEBUG __nD.65703 => __n_11
  # DEBUG __valueD.65704 => &__valD.65551
  # DEBUG __aD.65705 => D#1081ptD.0
  # DEBUG D#531ptD.0 => &__tmpD.65653.D.35374
  # DEBUG thisD.65708 => D#531ptD.0
  # DEBUG __nD.65707 => __n_11
  # DEBUG __aD.65706 => D#1081ptD.0
  # DEBUG D#530ptD.0 => &D#531ptD.0->_M_implD.34865
  # DEBUG thisD.65710 => D#530ptD.0
  # DEBUG __aD.65709 => D#1081ptD.0
  # DEBUG thisD.57428 => D#530ptD.0
  # DEBUG __aD.57429 => D#1081ptD.0
  # DEBUG thisD.57425 => D#530ptD.0
  # DEBUG D.57426 => D#1081ptD.0
  # DEBUG thisD.65712 => D#531ptD.0
  # DEBUG __nD.65711 => __n_11
  # DEBUG D#497ptD.0 => D#531ptD.0
  # DEBUG __nD.65737 => __n_11
  # DEBUG thisD.65738 => D#497ptD.0
  # DEBUG D#496ptD.0 => D#497ptD.0
  if (__n_11 != 0)
    goto <bb 5>;
  else
    goto <bb 32>;
;;    succ:       5 [90.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [10.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 662, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [90.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#495ptD.0 => &D#496ptD.0->_M_implD.34865
  # DEBUG D#494ptD.0 => D#495ptD.0
  # DEBUG __nD.65741 => __n_11
  # DEBUG __aD.65740 => D#494ptD.0
  # DEBUG D#493ptD.0 => D#494ptD.0
  # DEBUG D#491ptD.0 => D#493ptD.0
  # DEBUG D#492ptD.0 => 0B
  # DEBUG __nD.65744 => __n_11
  # DEBUG thisD.65742 => D#491ptD.0
  # DEBUG D.65743 => D#492ptD.0
  # DEBUG D#490ptD.0 => D#491ptD.0
  # DEBUG D#484ptD.0 => D#490ptD.0
  # DEBUG thisD.57087 => D#484ptD.0
  if (__n_11 > 4611686018427387903)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 0
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_74 = VDEF <.MEM_63>
  # USE = nonlocal null { D.65544 D.65748 } (escaped heap)
  # CLB = nonlocal null { D.65544 D.65748 } (escaped heap)
  _ZSt17__throw_bad_allocvD.2850 ();
;;    succ:      

;;   basic block 7, loop depth 0, count 0, freq 669, maybe hot
;;   Invalid sum of outgoing probabilities 9.0%
;;    prev block 6, next block 10, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [4, 18446744073709551612] NONZERO 18446744073709551612
  _52 = __n_11 * 4;
  # .MEM_73 = VDEF <.MEM_63>
  # PT = { D.65748 } (escaped heap)
  # USE = nonlocal null { D.65544 D.65748 } (escaped heap)
  # CLB = nonlocal null { D.65544 D.65748 } (escaped heap)
  _53 = _ZnwmD.2764 (_52);
  # PT = { D.65748 } (escaped heap)
  _48 = _53 + _52;
  # DEBUG D#378ptD.0 => &__tmpD.65653
  # DEBUG D#378ptD.0 => &__tmpD.65653
  # DEBUG D#379ptD.0 => &__valD.65551
  # DEBUG __nD.65716 => __n_11
  # DEBUG D#376ptD.0 => D#378ptD.0
  # DEBUG thisD.65713 => D#376ptD.0
  # DEBUG thisD.65714 => D#378ptD.0
  # DEBUG D#377ptD.0 => D#379ptD.0
  # DEBUG __valueD.65715 => D#377ptD.0
  # DEBUG D#375ptD.0 => &D#376ptD.0->D.35374
  # DEBUG thisD.54797 => D#375ptD.0
  # DEBUG D#373ptD.0 => D#377ptD.0
  # DEBUG __firstD.65720 => NULL
  # DEBUG __nD.65719 => __n_11
  # DEBUG D#372ptD.0 => D#373ptD.0
  # DEBUG __xD.65717 => D#372ptD.0
  # DEBUG D.65718 => D#374ptD.0
  # DEBUG D#371ptD.0 => D#372ptD.0
  # DEBUG __firstD.65723 => NULL
  # DEBUG __nD.65722 => __n_11
  # DEBUG D#370ptD.0 => D#371ptD.0
  # DEBUG __xD.65721 => D#370ptD.0
  # DEBUG __assignableD.65725 => 1
  # DEBUG D#369ptD.0 => D#370ptD.0
  # DEBUG __firstD.65728 => NULL
  # DEBUG __nD.65727 => __n_11
  # DEBUG D#368ptD.0 => D#369ptD.0
  # DEBUG __xD.65726 => D#368ptD.0
  # DEBUG D#367ptD.0 => D#368ptD.0
  # DEBUG __firstD.65731 => NULL
  # DEBUG __nD.65730 => __n_11
  # DEBUG D#366ptD.0 => D#367ptD.0
  # DEBUG __valueD.65729 => D#366ptD.0
  # DEBUG __itD.54639 => NULL
  # DEBUG __itD.54605 => NULL
  # DEBUG D#258ptD.0 => D#366ptD.0
  # DEBUG __firstD.65734 => NULL
  # DEBUG __nD.65733 => __n_11
  # DEBUG __valueD.65732 => D#258ptD.0
  # DEBUG __tmpD.65735 => -1
  # DEBUG __niterD.65736 => __n_11
  # DEBUG __niterD.65736 => __n_11
  # DEBUG __firstD.65734 => _53
  # DEBUG D#378ptD.0 => &__tmpD.65653
  # DEBUG D#379ptD.0 => &__valD.65551
  # DEBUG __nD.65716 => __n_11
  # DEBUG D#376ptD.0 => D#378ptD.0
  # DEBUG thisD.65713 => D#376ptD.0
  # DEBUG thisD.65714 => D#378ptD.0
  # DEBUG D#377ptD.0 => D#379ptD.0
  # DEBUG __valueD.65715 => D#377ptD.0
  # DEBUG D#375ptD.0 => &D#376ptD.0->D.35374
  # DEBUG thisD.54797 => D#375ptD.0
  # DEBUG D#373ptD.0 => D#377ptD.0
  # DEBUG __firstD.65720 => NULL
  # DEBUG __nD.65719 => __n_11
  # DEBUG D#372ptD.0 => D#373ptD.0
  # DEBUG __xD.65717 => D#372ptD.0
  # DEBUG D.65718 => D#374ptD.0
  # DEBUG D#371ptD.0 => D#372ptD.0
  # DEBUG __firstD.65723 => NULL
  # DEBUG __nD.65722 => __n_11
  # DEBUG D#370ptD.0 => D#371ptD.0
  # DEBUG __xD.65721 => D#370ptD.0
  # DEBUG __assignableD.65725 => 1
  # DEBUG D#369ptD.0 => D#370ptD.0
  # DEBUG __firstD.65728 => NULL
  # DEBUG __nD.65727 => __n_11
  # DEBUG D#368ptD.0 => D#369ptD.0
  # DEBUG __xD.65726 => D#368ptD.0
  # DEBUG D#367ptD.0 => D#368ptD.0
  # DEBUG __firstD.65731 => NULL
  # DEBUG __nD.65730 => __n_11
  # DEBUG D#366ptD.0 => D#367ptD.0
  # DEBUG __valueD.65729 => D#366ptD.0
  # DEBUG __itD.54639 => NULL
  # DEBUG __itD.54605 => NULL
  # DEBUG D#258ptD.0 => D#366ptD.0
  # DEBUG __nD.65733 => __n_11
  # DEBUG __valueD.65732 => D#258ptD.0
  # DEBUG __tmpD.65735 => -1
  # DEBUG __niterD.65736 => __n_11
  # DEBUG __firstD.65734 => _53
  _41 = (sizetype) _9;
  _37 = _41 * 4;
  # .MEM_79 = VDEF <.MEM_73>
  # USE = anything 
  # CLB = anything 
  memsetD.1001 (_53, 255, _37);
;;    succ:       10 [9.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 669, maybe hot
;;   Invalid sum of incoming frequencies 60, should be 669
;;    prev block 7, next block 11, flags: (NEW)
;;    pred:       7 [9.0%]  (FALLTHRU,EXECUTABLE)
  _88 = (long unsigned intD.14) _9;
  _91 = _88 * 4;
  # PT = { D.65748 } (escaped heap)
  __first_29 = _53 + _91;
  # VUSE <.MEM_79>
  pretmp_92 = MEM[(intD.9 * &)this_2(D) + 136];
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.65748 } (escaped heap)
  # __first_76 = PHI <__first_29(10), 0B(32)>
  # .MEM_78 = PHI <.MEM_79(10), .MEM_63(32)>
  # PT = nonlocal escaped { D.65748 } (escaped heap)
  # _34 = PHI <_48(10), _42(32)>
  # PT = null { D.65748 } (escaped heap)
  # __first_33 = PHI <_53(10), 0B(32)>
  # PT = nonlocal escaped 
  # prephitmp_110 = PHI <pretmp_92(10), __first_5(32)>
  # DEBUG D#534ptD.0 => &D#1082ptD.0->D.35374._M_implD.34865
  # DEBUG thisD.65655 => &__tmpD.65653.D.35374._M_implD.34865
  # DEBUG __xD.65654 => D#534ptD.0
  # DEBUG D#257ptD.0 => &D#534ptD.0->_M_startD.34867
  # DEBUG D#256ptD.0 => &MEM[(struct _Vector_implD.34842 *)&__tmpD.65653]._M_startD.34867
  # DEBUG __aD.65657 => D#256ptD.0
  # DEBUG __bD.65656 => D#257ptD.0
  # DEBUG __tmpD.65658 => __first_33
  # DEBUG D#1083ptD.0 => MEM[(intD.9 * &)this_2(D) + 136]
  # .MEM_82 = VDEF <.MEM_78>
  MEM[(intD.9 * &)this_2(D) + 136] = __first_33;
  # DEBUG D#255ptD.0 => &D#534ptD.0->_M_finishD.34868
  # DEBUG D#254ptD.0 => &MEM[(struct _Vector_implD.34842 *)&__tmpD.65653]._M_finishD.34868
  # DEBUG __aD.65660 => D#254ptD.0
  # DEBUG __bD.65659 => D#255ptD.0
  # DEBUG __tmpD.65661 => __first_76
  # .MEM_84 = VDEF <.MEM_82>
  MEM[(intD.9 * &)this_2(D) + 144] = __first_76;
  # DEBUG D#253ptD.0 => &D#534ptD.0->_M_end_of_storageD.34869
  # DEBUG D#252ptD.0 => &MEM[(struct _Vector_implD.34842 *)&__tmpD.65653]._M_end_of_storageD.34869
  # DEBUG __aD.65663 => D#252ptD.0
  # DEBUG __bD.65662 => D#253ptD.0
  # DEBUG __tmpD.65664 => _34
  # .MEM_86 = VDEF <.MEM_84>
  MEM[(intD.9 * &)this_2(D) + 152] = _34;
  # DEBUG thisD.65665 => &__tmpD.65653
  # DEBUG D#245ptD.0 => &__tmpD.65653.D.35374
  # DEBUG thisD.53653 => D#245ptD.0
  # DEBUG D#248ptD.0 => __tmpD.65653.D.35374._M_implD.34865._M_finishD.34868
  # DEBUG D#247ptD.0 => __tmpD.65653.D.35374._M_implD.34865._M_startD.34867
  # DEBUG __firstD.53650 => D#247ptD.0
  # DEBUG __lastD.53651 => D#248ptD.0
  # DEBUG D.53652 => NULL
  # DEBUG D#150ptD.0 => D#247ptD.0
  # DEBUG D#151ptD.0 => D#248ptD.0
  # DEBUG __firstD.53061 => D#150ptD.0
  # DEBUG __lastD.53060 => D#151ptD.0
  # DEBUG D#149ptD.0 => D#151ptD.0
  # DEBUG D#148ptD.0 => D#150ptD.0
  # DEBUG D#146ptD.0 => D#148ptD.0
  # DEBUG D#147ptD.0 => D#149ptD.0
  # DEBUG D.53050 => D#146ptD.0
  # DEBUG D.53049 => D#147ptD.0
  # DEBUG D#246ptD.0 => &__tmpD.65653.D.35374
  # DEBUG thisD.65666 => D#246ptD.0
  # DEBUG D#244ptD.0 => D#246ptD.0->_M_implD.34865._M_end_of_storageD.34869
  # DEBUG D#243ptD.0 => (long intD.12) D#244ptD.0
  # DEBUG D#242ptD.0 => (long intD.12) D#1083ptD.0
  # DEBUG D#241ptD.0 => D#243ptD.0 - D#242ptD.0
  # DEBUG D#240ptD.0 => D#241ptD.0 /[ex] 4
  # DEBUG D#239ptD.0 => (long unsigned intD.14) D#240ptD.0
  # DEBUG thisD.65669 => D#246ptD.0
  # DEBUG __pD.65668 => D#1083ptD.0
  # DEBUG __nD.65667 => D#239ptD.0
  if (prephitmp_110 != 0B)
    goto <bb 12>;
  else
    goto <bb 13>;
;;    succ:       12 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 576, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#237ptD.0 => &D#246ptD.0->_M_implD.34865
  # DEBUG D#235ptD.0 => D#237ptD.0
  # DEBUG D#236ptD.0 => D#239ptD.0
  # DEBUG __pD.65673 => D#1083ptD.0
  # DEBUG __aD.65671 => D#235ptD.0
  # DEBUG __nD.65672 => D#236ptD.0
  # DEBUG D#234ptD.0 => D#236ptD.0
  # DEBUG D#233ptD.0 => D#235ptD.0
  # DEBUG D#231ptD.0 => D#233ptD.0
  # DEBUG D#232ptD.0 => D#234ptD.0
  # DEBUG __pD.65676 => D#1083ptD.0
  # DEBUG thisD.65674 => D#231ptD.0
  # DEBUG D.65675 => D#232ptD.0
  # .MEM_87 = VDEF <.MEM_86>
  # USE = nonlocal null { D.65544 D.65748 } (escaped heap)
  # CLB = nonlocal null { D.65544 D.65748 } (escaped heap)
  _ZdlPvD.2766 (prephitmp_110);
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       11 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_57 = PHI <.MEM_86(11), .MEM_87(12)>
  # DEBUG D#238ptD.0 => &D#246ptD.0->_M_implD.34865
  # DEBUG thisD.65677 => D#238ptD.0
  # DEBUG thisD.65678 => D#238ptD.0
  # DEBUG thisD.65679 => D#238ptD.0
  # .MEM_93 = VDEF <.MEM_57>
  __tmpD.65653 ={v} {CLOBBER};
  goto <bb 30>;
;;    succ:       30 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 1800, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       3 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#87ptD.0 => D#1082ptD.0
  # VUSE <.MEM_63>
  # PT = nonlocal escaped 
  __first_18 = MEM[(intD.9 * *)this_2(D) + 144B];
  # DEBUG D#87ptD.0 => D#1082ptD.0
  # DEBUG thisD.65594 => D#87ptD.0
  # DEBUG thisD.65595 => D#87ptD.0
  _19 = (long intD.12) __first_18;
  _20 = _19 - _14;
  # RANGE [-2305843009213693952, 2305843009213693951]
  _21 = _20 /[ex] 4;
  # RANGE ~[2305843009213693952, 16140901064495857663]
  _22 = (size_typeD.34950) _21;
  if (__n_11 > _22)
    goto <bb 16>;
  else
    goto <bb 15>;
;;    succ:       16 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __niterD.65564 => __n_11
  # DEBUG __firstD.65562 => __first_5
  if (__n_11 == 0)
    goto <bb 29>;
  else
    goto <bb 25>;
;;    succ:       29 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       14 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __firstD.65572 => __first_5
  if (__first_5 == __first_18)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 900, maybe hot
;;   Invalid sum of outgoing probabilities 9.9%
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_95 = PHI <.MEM_63(16), .MEM_90(20)>
  # DEBUG D#533ptD.0 => &D#1082ptD.0->D.35374
  # DEBUG thisD.57540 => D#533ptD.0
  # DEBUG D#87ptD.0 => D#1082ptD.0
  # DEBUG D#87ptD.0 => D#1082ptD.0
  # DEBUG thisD.57538 => D#87ptD.0
  # DEBUG thisD.57537 => D#87ptD.0
  # RANGE [1, 18446744073709551615]
  __n_26 = __n_11 - _22;
  # DEBUG D#373ptD.0 => &__valD.65551
  # DEBUG __firstD.65577 => __first_18
  # DEBUG __nD.65576 => __n_26
  # DEBUG D#372ptD.0 => D#373ptD.0
  # DEBUG __xD.65574 => D#372ptD.0
  # DEBUG D.65575 => D#374ptD.0
  # DEBUG D#371ptD.0 => D#372ptD.0
  # DEBUG __firstD.65580 => __first_18
  # DEBUG __nD.65579 => __n_26
  # DEBUG D#370ptD.0 => D#371ptD.0
  # DEBUG __xD.65578 => D#370ptD.0
  # DEBUG __assignableD.65582 => 1
  # DEBUG D#369ptD.0 => D#370ptD.0
  # DEBUG __firstD.65585 => __first_18
  # DEBUG __nD.65584 => __n_26
  # DEBUG D#368ptD.0 => D#369ptD.0
  # DEBUG __xD.65583 => D#368ptD.0
  # DEBUG D#367ptD.0 => D#368ptD.0
  # DEBUG __firstD.65588 => __first_18
  # DEBUG __nD.65587 => __n_26
  # DEBUG D#366ptD.0 => D#367ptD.0
  # DEBUG __valueD.65586 => D#366ptD.0
  # DEBUG __itD.54639 => __first_18
  # DEBUG __itD.54605 => __first_18
  # DEBUG D#258ptD.0 => D#366ptD.0
  # DEBUG __firstD.65591 => __first_18
  # DEBUG __nD.65590 => __n_26
  # DEBUG __valueD.65589 => D#258ptD.0
  # DEBUG __tmpD.65592 => -1
  # DEBUG __niterD.65593 => __n_26
  # DEBUG __niterD.65593 => __n_26
  # DEBUG __firstD.65591 => __first_18
  _24 = __n_26 * 4;
  # .MEM_72 = VDEF <.MEM_95>
  # USE = anything 
  # CLB = anything 
  memsetD.1001 (__first_18, 255, _24);
  goto <bb 24>;
;;    succ:       24 [9.9%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 819, maybe hot
;;   Invalid sum of outgoing probabilities 9.0%
;;    prev block 17, next block 20, flags: (NEW, REACHABLE)
;;    pred:       16 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  _103 = (unsigned long) __first_18;
  _107 = __first_5 + 4;
  _108 = (unsigned long) _107;
  _66 = _103 - _108;
  _30 = _66 /[ex] 4;
  _31 = _30 & 4611686018427387903;
  _58 = _31 + 1;
  _109 = _58 * 4;
  # .MEM_77 = VDEF <.MEM_63>
  # USE = anything 
  # CLB = anything 
  memsetD.1001 (__first_5, 255, _109);
;;    succ:       20 [9.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 819, maybe hot
;;   Invalid sum of incoming frequencies 74, should be 819
;;    prev block 18, next block 24, flags: (NEW)
;;    pred:       18 [9.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_90 = PHI <.MEM_77(18)>
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 900, maybe hot
;;   Invalid sum of incoming frequencies 89, should be 900
;;    prev block 20, next block 25, flags: (NEW, REACHABLE)
;;    pred:       17 [9.9%]  (FALLTHRU,EXECUTABLE)
  _81 = __n_26 * 4;
  # PT = nonlocal escaped 
  __first_56 = __first_18 + _81;
  # .MEM_67 = VDEF <.MEM_72>
  MEM[(struct vectorD.34569 *)this_2(D) + 136B].D.35374._M_implD.34865._M_finishD.34868 = __first_56;
  goto <bb 30>;
;;    succ:       30 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 819, maybe hot
;;   Invalid sum of outgoing probabilities 9.0%
;;    prev block 24, next block 27, flags: (NEW, REACHABLE)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  _80 = (sizetype) _9;
  _23 = _80 * 4;
  # .MEM_71 = VDEF <.MEM_63>
  # USE = anything 
  # CLB = anything 
  memsetD.1001 (__first_5, 255, _23);
;;    succ:       27 [9.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 819, maybe hot
;;   Invalid sum of incoming frequencies 74, should be 819
;;    prev block 25, next block 29, flags: (NEW)
;;    pred:       25 [9.0%]  (FALLTHRU,EXECUTABLE)
  _89 = (long unsigned intD.14) _9;
  _49 = _89 * 4;
  # PT = nonlocal escaped 
  __first_39 = __first_5 + _49;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 27, next block 30, flags: (NEW, REACHABLE)
;;    pred:       27 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_70 = PHI <__first_39(27), __first_5(15)>
  # .MEM_83 = PHI <.MEM_71(27), .MEM_63(15)>
  # DEBUG D#155ptD.0 => D#1082ptD.0
  # DEBUG __posD.65566 => __first_70
  # DEBUG D#154ptD.0 => D#155ptD.0
  # DEBUG thisD.65565 => D#154ptD.0
  # DEBUG D#152ptD.0 => &D#154ptD.0->D.35374
  # DEBUG thisD.53074 => D#152ptD.0
  # DEBUG D#153ptD.0 => D#154ptD.0->D.35374._M_implD.34865._M_finishD.34868
  # DEBUG __firstD.53064 => __first_70
  # DEBUG __lastD.53065 => D#153ptD.0
  # DEBUG D.53066 => NULL
  # DEBUG D#150ptD.0 => __first_70
  # DEBUG D#151ptD.0 => D#153ptD.0
  # DEBUG __firstD.53061 => D#150ptD.0
  # DEBUG __lastD.53060 => D#151ptD.0
  # DEBUG D#149ptD.0 => D#151ptD.0
  # DEBUG D#148ptD.0 => D#150ptD.0
  # DEBUG D#146ptD.0 => D#148ptD.0
  # DEBUG D#147ptD.0 => D#149ptD.0
  # DEBUG D.53050 => D#146ptD.0
  # DEBUG D.53049 => D#147ptD.0
  # .MEM_69 = VDEF <.MEM_83>
  MEM[(intD.9 * *)this_2(D) + 144B] = __first_70;
;;    succ:       30 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 2535, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                29 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_61 = PHI <.MEM_67(24), .MEM_93(13), .MEM_69(29)>
  # .MEM_94 = VDEF <.MEM_61>
  this_2(D)->_dirtyD.34631 = 0;
;;    succ:       31 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 6504, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       2 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_4 = PHI <.MEM_1(D)(2), .MEM_94(30)>
  # VUSE <.MEM_4>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 32, loop depth 0, count 0, freq 74, maybe hot
;;    prev block 31, next block 1, flags: (NEW, REACHABLE)
;;    pred:       4 [10.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _28 = __n_11 * 4;
  # PT = nonlocal escaped 
  # ALIGN = 4, MISALIGN = 0
  _42 = (intD.9 *) _28;
  # DEBUG D#378ptD.0 => &__tmpD.65653
  # DEBUG D#378ptD.0 => &__tmpD.65653
  # DEBUG D#379ptD.0 => &__valD.65551
  # DEBUG __nD.65716 => __n_11
  # DEBUG D#376ptD.0 => D#378ptD.0
  # DEBUG thisD.65713 => D#376ptD.0
  # DEBUG thisD.65714 => D#378ptD.0
  # DEBUG D#377ptD.0 => D#379ptD.0
  # DEBUG __valueD.65715 => D#377ptD.0
  # DEBUG D#375ptD.0 => &D#376ptD.0->D.35374
  # DEBUG thisD.54797 => D#375ptD.0
  # DEBUG D#373ptD.0 => D#377ptD.0
  # DEBUG __firstD.65720 => NULL
  # DEBUG __nD.65719 => __n_11
  # DEBUG D#372ptD.0 => D#373ptD.0
  # DEBUG __xD.65717 => D#372ptD.0
  # DEBUG D.65718 => D#374ptD.0
  # DEBUG D#371ptD.0 => D#372ptD.0
  # DEBUG __firstD.65723 => NULL
  # DEBUG __nD.65722 => __n_11
  # DEBUG D#370ptD.0 => D#371ptD.0
  # DEBUG __xD.65721 => D#370ptD.0
  # DEBUG __assignableD.65725 => 1
  # DEBUG D#369ptD.0 => D#370ptD.0
  # DEBUG __firstD.65728 => NULL
  # DEBUG __nD.65727 => __n_11
  # DEBUG D#368ptD.0 => D#369ptD.0
  # DEBUG __xD.65726 => D#368ptD.0
  # DEBUG D#367ptD.0 => D#368ptD.0
  # DEBUG __firstD.65731 => NULL
  # DEBUG __nD.65730 => __n_11
  # DEBUG D#366ptD.0 => D#367ptD.0
  # DEBUG __valueD.65729 => D#366ptD.0
  # DEBUG __itD.54639 => NULL
  # DEBUG __itD.54605 => NULL
  # DEBUG D#258ptD.0 => D#366ptD.0
  # DEBUG __firstD.65734 => NULL
  # DEBUG __nD.65733 => __n_11
  # DEBUG __valueD.65732 => D#258ptD.0
  # DEBUG __tmpD.65735 => -1
  # DEBUG __niterD.65736 => __n_11
  # DEBUG __niterD.65736 => __n_11
  # DEBUG __firstD.65734 => 0B
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

}


Creating dr for this_2(D)->_dirty
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 104
	step: 0
	aligned to: 256
	base_object: *this_2(D)
	Access function 0: 832
Creating dr for this_2(D)->_inputs
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: *this_2(D)
	Access function 0: 768
Creating dr for __val
analyze_innermost: success.
	base_address: &__val
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: __val
Creating dr for MEM[(int * &)this_2(D) + 136]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 136
	step: 0
	aligned to: 256
	base_object: MEM[(int * &)this_2(D) + 136]
Creating dr for MEM[(int * &)this_2(D) + 136]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 136
	step: 0
	aligned to: 256
	base_object: MEM[(int * &)this_2(D) + 136]
Creating dr for MEM[(int * &)this_2(D) + 144]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 144
	step: 0
	aligned to: 256
	base_object: MEM[(int * &)this_2(D) + 144]
Creating dr for MEM[(int * &)this_2(D) + 152]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 152
	step: 0
	aligned to: 256
	base_object: MEM[(int * &)this_2(D) + 152]
Creating dr for MEM[(int * *)this_2(D) + 144B]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 144
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_2(D) + 144B]
Creating dr for MEM[(struct vector *)this_2(D) + 136B].D.35374._M_impl._M_finish
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 144
	step: 0
	aligned to: 256
	base_object: MEM[(struct vector *)this_2(D) + 136B]
	Access function 0: 64
	Access function 1: 0
	Access function 2: 0
Creating dr for MEM[(int * *)this_2(D) + 144B]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 144
	step: 0
	aligned to: 256
	base_object: MEM[(int * *)this_2(D) + 144B]
Creating dr for this_2(D)->_dirty
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 104
	step: 0
	aligned to: 256
	base_object: *this_2(D)
	Access function 0: 832

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:45)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:21)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:28, LOOPS:0, CONDITIONS:8, STMTS:388)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_31 })
  {
    <bb 2>:
    # VUSE <.MEM_1(D)>
    _3 = this_2(D)->_dirty;
    if (_3 != 0)
      goto <bb 3>;
    else
      goto <bb 31>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 bb_14 })
  {
    <bb 3>:
    # DEBUG this => this_2(D)
    # VUSE <.MEM_1(D)>
    _6 = this_2(D)->_inputs;
    _7 = &this_2(D)->_inmatch;
    # DEBUG this => _7
    # DEBUG __first => _6
    # DEBUG __last => -1
    # DEBUG this => _7
    # DEBUG __n => _6
    # .MEM_62 = VDEF <.MEM_1(D)>
    __val = -1;
    # DEBUG __val => __val
    _8 = (long unsigned int) _6;
    # .MEM_63 = VDEF <.MEM_62>
    std::vector<int>::_M_fill_assign (_7, _8, &__val);
    # VUSE <.MEM_63>
    _9 = this_2(D)->_outputs;
    # DEBUG D#1082 => &this_2(D)->_outmatch
    # DEBUG this => D#1082
    # DEBUG __first => _9
    # DEBUG __last => -1
    # DEBUG this => D#1082
    # DEBUG __n => _9
    # DEBUG __val => -1
    # DEBUG __val => -1
    __n_11 = (size_t) _9;
    # DEBUG this => D#1082
    # DEBUG __n => __n_11
    # DEBUG __val => &__val
    # VUSE <.MEM_63>
    __first_5 = MEM[(int * *)this_2(D) + 136B];
    # DEBUG D#157 => D#1082
    # VUSE <.MEM_63>
    _12 = MEM[(int * *)this_2(D) + 152B];
    # DEBUG D#157 => D#1082
    # DEBUG this => D#157
    # DEBUG this => D#157
    _13 = (long int) _12;
    _14 = (long int) __first_5;
    _15 = _13 - _14;
    _16 = _15 /[ex] 4;
    _17 = (size_type) _16;
    if (__n_11 > _17)
      goto <bb 4>;
    else
      goto <bb 14>;

  }
  bb_4 (preds = {bb_3 }, succs = {bb_5 bb_32 })
  {
    <bb 4>:
    # DEBUG this => D#1082
    # DEBUG __n => __n_11
    # DEBUG __val => &__val
    # DEBUG D#532 => &D#1082->D.35374
    # DEBUG this => D#532
    # DEBUG D#1081 => &MEM[(struct _Vector_base *)this_2(D) + 136B]._M_impl
    # DEBUG this => &__tmp
    # DEBUG __n => __n_11
    # DEBUG __value => &__val
    # DEBUG __a => D#1081
    # DEBUG D#531 => &__tmp.D.35374
    # DEBUG this => D#531
    # DEBUG __n => __n_11
    # DEBUG __a => D#1081
    # DEBUG D#530 => &D#531->_M_impl
    # DEBUG this => D#530
    # DEBUG __a => D#1081
    # DEBUG this => D#530
    # DEBUG __a => D#1081
    # DEBUG this => D#530
    # DEBUG D.57426 => D#1081
    # DEBUG this => D#531
    # DEBUG __n => __n_11
    # DEBUG D#497 => D#531
    # DEBUG __n => __n_11
    # DEBUG this => D#497
    # DEBUG D#496 => D#497
    if (__n_11 != 0)
      goto <bb 5>;
    else
      goto <bb 32>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_6 bb_7 })
  {
    <bb 5>:
    # DEBUG D#495 => &D#496->_M_impl
    # DEBUG D#494 => D#495
    # DEBUG __n => __n_11
    # DEBUG __a => D#494
    # DEBUG D#493 => D#494
    # DEBUG D#491 => D#493
    # DEBUG D#492 => 0B
    # DEBUG __n => __n_11
    # DEBUG this => D#491
    # DEBUG D.65743 => D#492
    # DEBUG D#490 => D#491
    # DEBUG D#484 => D#490
    # DEBUG this => D#484
    if (__n_11 > 4611686018427387903)
      goto <bb 6>;
    else
      goto <bb 7>;

  }
  bb_6 (preds = {bb_5 }, succs = {})
  {
    <bb 6>:
    # .MEM_74 = VDEF <.MEM_63>
    std::__throw_bad_alloc ();

  }
  bb_7 (preds = {bb_5 }, succs = {bb_10 })
  {
    <bb 7>:
    _52 = __n_11 * 4;
    # .MEM_73 = VDEF <.MEM_63>
    _53 = operator new (_52);
    _48 = _53 + _52;
    # DEBUG D#378 => &__tmp
    # DEBUG D#378 => &__tmp
    # DEBUG D#379 => &__val
    # DEBUG __n => __n_11
    # DEBUG D#376 => D#378
    # DEBUG this => D#376
    # DEBUG this => D#378
    # DEBUG D#377 => D#379
    # DEBUG __value => D#377
    # DEBUG D#375 => &D#376->D.35374
    # DEBUG this => D#375
    # DEBUG D#373 => D#377
    # DEBUG __first => NULL
    # DEBUG __n => __n_11
    # DEBUG D#372 => D#373
    # DEBUG __x => D#372
    # DEBUG D.65718 => D#374
    # DEBUG D#371 => D#372
    # DEBUG __first => NULL
    # DEBUG __n => __n_11
    # DEBUG D#370 => D#371
    # DEBUG __x => D#370
    # DEBUG __assignable => 1
    # DEBUG D#369 => D#370
    # DEBUG __first => NULL
    # DEBUG __n => __n_11
    # DEBUG D#368 => D#369
    # DEBUG __x => D#368
    # DEBUG D#367 => D#368
    # DEBUG __first => NULL
    # DEBUG __n => __n_11
    # DEBUG D#366 => D#367
    # DEBUG __value => D#366
    # DEBUG __it => NULL
    # DEBUG __it => NULL
    # DEBUG D#258 => D#366
    # DEBUG __first => NULL
    # DEBUG __n => __n_11
    # DEBUG __value => D#258
    # DEBUG __tmp => -1
    # DEBUG __niter => __n_11
    # DEBUG __niter => __n_11
    # DEBUG __first => _53
    # DEBUG D#378 => &__tmp
    # DEBUG D#379 => &__val
    # DEBUG __n => __n_11
    # DEBUG D#376 => D#378
    # DEBUG this => D#376
    # DEBUG this => D#378
    # DEBUG D#377 => D#379
    # DEBUG __value => D#377
    # DEBUG D#375 => &D#376->D.35374
    # DEBUG this => D#375
    # DEBUG D#373 => D#377
    # DEBUG __first => NULL
    # DEBUG __n => __n_11
    # DEBUG D#372 => D#373
    # DEBUG __x => D#372
    # DEBUG D.65718 => D#374
    # DEBUG D#371 => D#372
    # DEBUG __first => NULL
    # DEBUG __n => __n_11
    # DEBUG D#370 => D#371
    # DEBUG __x => D#370
    # DEBUG __assignable => 1
    # DEBUG D#369 => D#370
    # DEBUG __first => NULL
    # DEBUG __n => __n_11
    # DEBUG D#368 => D#369
    # DEBUG __x => D#368
    # DEBUG D#367 => D#368
    # DEBUG __first => NULL
    # DEBUG __n => __n_11
    # DEBUG D#366 => D#367
    # DEBUG __value => D#366
    # DEBUG __it => NULL
    # DEBUG __it => NULL
    # DEBUG D#258 => D#366
    # DEBUG __n => __n_11
    # DEBUG __value => D#258
    # DEBUG __tmp => -1
    # DEBUG __niter => __n_11
    # DEBUG __first => _53
    _41 = (sizetype) _9;
    _37 = _41 * 4;
    # .MEM_79 = VDEF <.MEM_73>
    __builtin_memset (_53, 255, _37);

  }
  bb_10 (preds = {bb_7 }, succs = {bb_11 })
  {
    <bb 10>:
    _88 = (long unsigned int) _9;
    _91 = _88 * 4;
    __first_29 = _53 + _91;
    # VUSE <.MEM_79>
    pretmp_92 = MEM[(int * &)this_2(D) + 136];

  }
  bb_11 (preds = {bb_10 bb_32 }, succs = {bb_12 bb_13 })
  {
    <bb 11>:
    # __first_76 = PHI <__first_29(10), 0B(32)>
    # .MEM_78 = PHI <.MEM_79(10), .MEM_63(32)>
    # _34 = PHI <_48(10), _42(32)>
    # __first_33 = PHI <_53(10), 0B(32)>
    # prephitmp_110 = PHI <pretmp_92(10), __first_5(32)>
    # DEBUG D#534 => &D#1082->D.35374._M_impl
    # DEBUG this => &__tmp.D.35374._M_impl
    # DEBUG __x => D#534
    # DEBUG D#257 => &D#534->_M_start
    # DEBUG D#256 => &MEM[(struct _Vector_impl *)&__tmp]._M_start
    # DEBUG __a => D#256
    # DEBUG __b => D#257
    # DEBUG __tmp => __first_33
    # DEBUG D#1083 => MEM[(int * &)this_2(D) + 136]
    # .MEM_82 = VDEF <.MEM_78>
    MEM[(int * &)this_2(D) + 136] = __first_33;
    # DEBUG D#255 => &D#534->_M_finish
    # DEBUG D#254 => &MEM[(struct _Vector_impl *)&__tmp]._M_finish
    # DEBUG __a => D#254
    # DEBUG __b => D#255
    # DEBUG __tmp => __first_76
    # .MEM_84 = VDEF <.MEM_82>
    MEM[(int * &)this_2(D) + 144] = __first_76;
    # DEBUG D#253 => &D#534->_M_end_of_storage
    # DEBUG D#252 => &MEM[(struct _Vector_impl *)&__tmp]._M_end_of_storage
    # DEBUG __a => D#252
    # DEBUG __b => D#253
    # DEBUG __tmp => _34
    # .MEM_86 = VDEF <.MEM_84>
    MEM[(int * &)this_2(D) + 152] = _34;
    # DEBUG this => &__tmp
    # DEBUG D#245 => &__tmp.D.35374
    # DEBUG this => D#245
    # DEBUG D#248 => __tmp.D.35374._M_impl._M_finish
    # DEBUG D#247 => __tmp.D.35374._M_impl._M_start
    # DEBUG __first => D#247
    # DEBUG __last => D#248
    # DEBUG D.53652 => NULL
    # DEBUG D#150 => D#247
    # DEBUG D#151 => D#248
    # DEBUG __first => D#150
    # DEBUG __last => D#151
    # DEBUG D#149 => D#151
    # DEBUG D#148 => D#150
    # DEBUG D#146 => D#148
    # DEBUG D#147 => D#149
    # DEBUG D.53050 => D#146
    # DEBUG D.53049 => D#147
    # DEBUG D#246 => &__tmp.D.35374
    # DEBUG this => D#246
    # DEBUG D#244 => D#246->_M_impl._M_end_of_storage
    # DEBUG D#243 => (long int) D#244
    # DEBUG D#242 => (long int) D#1083
    # DEBUG D#241 => D#243 - D#242
    # DEBUG D#240 => D#241 /[ex] 4
    # DEBUG D#239 => (long unsigned int) D#240
    # DEBUG this => D#246
    # DEBUG __p => D#1083
    # DEBUG __n => D#239
    if (prephitmp_110 != 0B)
      goto <bb 12>;
    else
      goto <bb 13>;

  }
  bb_12 (preds = {bb_11 }, succs = {bb_13 })
  {
    <bb 12>:
    # DEBUG D#237 => &D#246->_M_impl
    # DEBUG D#235 => D#237
    # DEBUG D#236 => D#239
    # DEBUG __p => D#1083
    # DEBUG __a => D#235
    # DEBUG __n => D#236
    # DEBUG D#234 => D#236
    # DEBUG D#233 => D#235
    # DEBUG D#231 => D#233
    # DEBUG D#232 => D#234
    # DEBUG __p => D#1083
    # DEBUG this => D#231
    # DEBUG D.65675 => D#232
    # .MEM_87 = VDEF <.MEM_86>
    operator delete (prephitmp_110);

  }
  bb_13 (preds = {bb_11 bb_12 }, succs = {bb_30 })
  {
    <bb 13>:
    # .MEM_57 = PHI <.MEM_86(11), .MEM_87(12)>
    # DEBUG D#238 => &D#246->_M_impl
    # DEBUG this => D#238
    # DEBUG this => D#238
    # DEBUG this => D#238
    # .MEM_93 = VDEF <.MEM_57>
    __tmp ={v} {CLOBBER};
    goto <bb 30>;

  }
  bb_14 (preds = {bb_3 }, succs = {bb_16 bb_15 })
  {
    <bb 14>:
    # DEBUG D#87 => D#1082
    # VUSE <.MEM_63>
    __first_18 = MEM[(int * *)this_2(D) + 144B];
    # DEBUG D#87 => D#1082
    # DEBUG this => D#87
    # DEBUG this => D#87
    _19 = (long int) __first_18;
    _20 = _19 - _14;
    _21 = _20 /[ex] 4;
    _22 = (size_type) _21;
    if (__n_11 > _22)
      goto <bb 16>;
    else
      goto <bb 15>;

  }
  bb_15 (preds = {bb_14 }, succs = {bb_29 bb_25 })
  {
    <bb 15>:
    # DEBUG __niter => __n_11
    # DEBUG __first => __first_5
    if (__n_11 == 0)
      goto <bb 29>;
    else
      goto <bb 25>;

  }
  bb_16 (preds = {bb_14 }, succs = {bb_17 bb_18 })
  {
    <bb 16>:
    # DEBUG __first => __first_5
    if (__first_5 == __first_18)
      goto <bb 17>;
    else
      goto <bb 18>;

  }
  bb_17 (preds = {bb_16 bb_20 }, succs = {bb_24 })
  {
    <bb 17>:
    # .MEM_95 = PHI <.MEM_63(16), .MEM_90(20)>
    # DEBUG D#533 => &D#1082->D.35374
    # DEBUG this => D#533
    # DEBUG D#87 => D#1082
    # DEBUG D#87 => D#1082
    # DEBUG this => D#87
    # DEBUG this => D#87
    __n_26 = __n_11 - _22;
    # DEBUG D#373 => &__val
    # DEBUG __first => __first_18
    # DEBUG __n => __n_26
    # DEBUG D#372 => D#373
    # DEBUG __x => D#372
    # DEBUG D.65575 => D#374
    # DEBUG D#371 => D#372
    # DEBUG __first => __first_18
    # DEBUG __n => __n_26
    # DEBUG D#370 => D#371
    # DEBUG __x => D#370
    # DEBUG __assignable => 1
    # DEBUG D#369 => D#370
    # DEBUG __first => __first_18
    # DEBUG __n => __n_26
    # DEBUG D#368 => D#369
    # DEBUG __x => D#368
    # DEBUG D#367 => D#368
    # DEBUG __first => __first_18
    # DEBUG __n => __n_26
    # DEBUG D#366 => D#367
    # DEBUG __value => D#366
    # DEBUG __it => __first_18
    # DEBUG __it => __first_18
    # DEBUG D#258 => D#366
    # DEBUG __first => __first_18
    # DEBUG __n => __n_26
    # DEBUG __value => D#258
    # DEBUG __tmp => -1
    # DEBUG __niter => __n_26
    # DEBUG __niter => __n_26
    # DEBUG __first => __first_18
    _24 = __n_26 * 4;
    # .MEM_72 = VDEF <.MEM_95>
    __builtin_memset (__first_18, 255, _24);
    goto <bb 24>;

  }
  bb_18 (preds = {bb_16 }, succs = {bb_20 })
  {
    <bb 18>:
    _103 = (unsigned long) __first_18;
    _107 = __first_5 + 4;
    _108 = (unsigned long) _107;
    _66 = _103 - _108;
    _30 = _66 /[ex] 4;
    _31 = _30 & 4611686018427387903;
    _58 = _31 + 1;
    _109 = _58 * 4;
    # .MEM_77 = VDEF <.MEM_63>
    __builtin_memset (__first_5, 255, _109);

  }
  bb_20 (preds = {bb_18 }, succs = {bb_17 })
  {
    <bb 20>:
    # .MEM_90 = PHI <.MEM_77(18)>
    goto <bb 17>;

  }
  bb_24 (preds = {bb_17 }, succs = {bb_30 })
  {
    <bb 24>:
    _81 = __n_26 * 4;
    __first_56 = __first_18 + _81;
    # .MEM_67 = VDEF <.MEM_72>
    MEM[(struct vector *)this_2(D) + 136B].D.35374._M_impl._M_finish = __first_56;
    goto <bb 30>;

  }
  bb_25 (preds = {bb_15 }, succs = {bb_27 })
  {
    <bb 25>:
    _80 = (sizetype) _9;
    _23 = _80 * 4;
    # .MEM_71 = VDEF <.MEM_63>
    __builtin_memset (__first_5, 255, _23);

  }
  bb_27 (preds = {bb_25 }, succs = {bb_29 })
  {
    <bb 27>:
    _89 = (long unsigned int) _9;
    _49 = _89 * 4;
    __first_39 = __first_5 + _49;

  }
  bb_29 (preds = {bb_27 bb_15 }, succs = {bb_33 })
  {
    <bb 29>:
    # __first_70 = PHI <__first_39(27), __first_5(15)>
    # .MEM_83 = PHI <.MEM_71(27), .MEM_63(15)>

  }
  bb_33 (preds = {bb_29 }, succs = {bb_30 })
  {
    <bb 33>:
    # DEBUG D#155 => D#1082
    # DEBUG __pos => __first_70
    # DEBUG D#154 => D#155
    # DEBUG this => D#154
    # DEBUG D#152 => &D#154->D.35374
    # DEBUG this => D#152
    # DEBUG D#153 => D#154->D.35374._M_impl._M_finish
    # DEBUG __first => __first_70
    # DEBUG __last => D#153
    # DEBUG D.53066 => NULL
    # DEBUG D#150 => __first_70
    # DEBUG D#151 => D#153
    # DEBUG __first => D#150
    # DEBUG __last => D#151
    # DEBUG D#149 => D#151
    # DEBUG D#148 => D#150
    # DEBUG D#146 => D#148
    # DEBUG D#147 => D#149
    # DEBUG D.53050 => D#146
    # DEBUG D.53049 => D#147
    # .MEM_69 = VDEF <.MEM_83>
    MEM[(int * *)this_2(D) + 144B] = __first_70;

  }
  bb_30 (preds = {bb_24 bb_13 bb_33 }, succs = {bb_34 })
  {
    <bb 30>:
    # .MEM_61 = PHI <.MEM_67(24), .MEM_93(13), .MEM_69(33)>

  }
  bb_34 (preds = {bb_30 }, succs = {bb_31 })
  {
    <bb 34>:
    # .MEM_94 = VDEF <.MEM_61>
    this_2(D)->_dirty = 0;

  }
  bb_31 (preds = {bb_2 bb_34 }, succs = {bb_35 })
  {
    <bb 31>:
    # .MEM_4 = PHI <.MEM_1(D)(2), .MEM_94(34)>

  }
  bb_35 (preds = {bb_31 }, succs = {bb_1 })
  {
    <bb 35>:
    # VUSE <.MEM_4>
    return;

  }
  bb_32 (preds = {bb_4 }, succs = {bb_11 })
  {
    <bb 32>:
    _28 = __n_11 * 4;
    _42 = (int *) _28;
    # DEBUG D#378 => &__tmp
    # DEBUG D#378 => &__tmp
    # DEBUG D#379 => &__val
    # DEBUG __n => __n_11
    # DEBUG D#376 => D#378
    # DEBUG this => D#376
    # DEBUG this => D#378
    # DEBUG D#377 => D#379
    # DEBUG __value => D#377
    # DEBUG D#375 => &D#376->D.35374
    # DEBUG this => D#375
    # DEBUG D#373 => D#377
    # DEBUG __first => NULL
    # DEBUG __n => __n_11
    # DEBUG D#372 => D#373
    # DEBUG __x => D#372
    # DEBUG D.65718 => D#374
    # DEBUG D#371 => D#372
    # DEBUG __first => NULL
    # DEBUG __n => __n_11
    # DEBUG D#370 => D#371
    # DEBUG __x => D#370
    # DEBUG __assignable => 1
    # DEBUG D#369 => D#370
    # DEBUG __first => NULL
    # DEBUG __n => __n_11
    # DEBUG D#368 => D#369
    # DEBUG __x => D#368
    # DEBUG D#367 => D#368
    # DEBUG __first => NULL
    # DEBUG __n => __n_11
    # DEBUG D#366 => D#367
    # DEBUG __value => D#366
    # DEBUG __it => NULL
    # DEBUG __it => NULL
    # DEBUG D#258 => D#366
    # DEBUG __first => NULL
    # DEBUG __n => __n_11
    # DEBUG __value => D#258
    # DEBUG __tmp => -1
    # DEBUG __niter => __n_11
    # DEBUG __niter => __n_11
    # DEBUG __first => 0B
    goto <bb 11>;

  }
}

Pass statistics:
----------------

virtual void Allocator::Clear() (struct AllocatorD.34627 * const thisD.40242)
{
  intD.9 * D.65745;
  intD.9 * __firstD.65720;
  size_typeD.34950 __nD.65703;
  intD.9 * __tmpD.65664;
  intD.9 * __tmpD.65661;
  intD.9 * __tmpD.65658;
  struct vectorD.34569 __tmpD.65653;
  intD.9 * __firstD.65559;
  intD.9 * __firstD.65572;
  intD.9 * __firstD.65577;
  long unsigned intD.14 __nD.65576;
  size_tD.2818 __nD.65555;
  intD.9 __valD.65544;
  intD.9 __valD.65551;
  boolD.2757 _3;
  intD.9 _6;
  struct vectorD.34569 * _7;
  long unsigned intD.14 _8;
  intD.9 _9;
  intD.9 * const _12;
  long intD.12 _13;
  long intD.12 _14;
  long intD.12 _15;
  long intD.12 _16;
  size_typeD.34950 _17;
  long intD.12 _19;
  long intD.12 _20;
  long intD.12 _21;
  size_typeD.34950 _22;
  sizetype _23;
  sizetype _24;
  long unsigned intD.14 _28;
  unsigned long _30;
  sizetype _31;
  intD.9 * _34;
  sizetype _37;
  sizetype _41;
  intD.9 * _42;
  intD.9 * _48;
  long unsigned intD.14 _49;
  long unsigned intD.14 _52;
  intD.9 * _53;
  sizetype _58;
  unsigned long _66;
  sizetype _80;
  long unsigned intD.14 _81;
  long unsigned intD.14 _88;
  long unsigned intD.14 _89;
  long unsigned intD.14 _91;
  intD.9 * pretmp_92;
  unsigned long _103;
  intD.9 * _107;
  unsigned long _108;
  sizetype _109;
  intD.9 * prephitmp_110;

;;   basic block 2, loop depth 0, count 0, freq 6504, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_1(D)>
  _3 = this_2(D)->_dirtyD.34631;
  if (_3 != 0)
    goto <bb 3>;
  else
    goto <bb 31>;
;;    succ:       3 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 2535, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.65539 => this_2(D)
  # VUSE <.MEM_1(D)>
  _6 = this_2(D)->_inputsD.34629;
  # PT = nonlocal 
  _7 = &this_2(D)->_inmatchD.35376;
  # DEBUG thisD.65542 => _7
  # DEBUG __firstD.65541 => _6
  # DEBUG __lastD.65540 => -1
  # DEBUG thisD.65546 => _7
  # DEBUG __nD.65545 => _6
  # .MEM_62 = VDEF <.MEM_1(D)>
  __valD.65544 = -1;
  # DEBUG __valD.65544 => __valD.65544
  # RANGE ~[2147483648, 18446744071562067967]
  _8 = (long unsigned intD.14) _6;
  # .MEM_63 = VDEF <.MEM_62>
  # USE = nonlocal null { D.65544 D.65748 } (escaped heap)
  # CLB = nonlocal null { D.65544 D.65748 } (escaped heap)
  _ZNSt6vectorIiSaIiEE14_M_fill_assignEmRKiD.35237 (_7, _8, &__valD.65544);
  # VUSE <.MEM_63>
  _9 = this_2(D)->_outputsD.34630;
  # DEBUG D#1082ptD.0 => &this_2(D)->_outmatchD.35377
  # DEBUG thisD.65549 => D#1082ptD.0
  # DEBUG __firstD.65548 => _9
  # DEBUG __lastD.65547 => -1
  # DEBUG thisD.65553 => D#1082ptD.0
  # DEBUG __nD.65552 => _9
  # DEBUG __valD.65551 => -1
  # DEBUG __valD.65551 => -1
  # RANGE ~[2147483648, 18446744071562067967]
  __n_11 = (size_tD.2818) _9;
  # DEBUG thisD.65554 => D#1082ptD.0
  # DEBUG __nD.65555 => __n_11
  # DEBUG __valD.65556 => &__valD.65551
  # VUSE <.MEM_63>
  # PT = nonlocal escaped 
  __first_5 = MEM[(intD.9 * *)this_2(D) + 136B];
  # DEBUG D#157ptD.0 => D#1082ptD.0
  # VUSE <.MEM_63>
  # PT = nonlocal escaped 
  _12 = MEM[(intD.9 * *)this_2(D) + 152B];
  # DEBUG D#157ptD.0 => D#1082ptD.0
  # DEBUG thisD.65596 => D#157ptD.0
  # DEBUG thisD.65597 => D#157ptD.0
  _13 = (long intD.12) _12;
  _14 = (long intD.12) __first_5;
  _15 = _13 - _14;
  # RANGE [-2305843009213693952, 2305843009213693951]
  _16 = _15 /[ex] 4;
  # RANGE ~[2305843009213693952, 16140901064495857663]
  _17 = (size_typeD.34950) _16;
  if (__n_11 > _17)
    goto <bb 4>;
  else
    goto <bb 14>;
;;    succ:       4 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.65600 => D#1082ptD.0
  # DEBUG __nD.65601 => __n_11
  # DEBUG __valD.65602 => &__valD.65551
  # DEBUG D#532ptD.0 => &D#1082ptD.0->D.35374
  # DEBUG thisD.65680 => D#532ptD.0
  # DEBUG D#1081ptD.0 => &MEM[(struct _Vector_baseD.34632 *)this_2(D) + 136B]._M_implD.34865
  # DEBUG thisD.65702 => &__tmpD.65653
  # DEBUG __nD.65703 => __n_11
  # DEBUG __valueD.65704 => &__valD.65551
  # DEBUG __aD.65705 => D#1081ptD.0
  # DEBUG D#531ptD.0 => &__tmpD.65653.D.35374
  # DEBUG thisD.65708 => D#531ptD.0
  # DEBUG __nD.65707 => __n_11
  # DEBUG __aD.65706 => D#1081ptD.0
  # DEBUG D#530ptD.0 => &D#531ptD.0->_M_implD.34865
  # DEBUG thisD.65710 => D#530ptD.0
  # DEBUG __aD.65709 => D#1081ptD.0
  # DEBUG thisD.57428 => D#530ptD.0
  # DEBUG __aD.57429 => D#1081ptD.0
  # DEBUG thisD.57425 => D#530ptD.0
  # DEBUG D.57426 => D#1081ptD.0
  # DEBUG thisD.65712 => D#531ptD.0
  # DEBUG __nD.65711 => __n_11
  # DEBUG D#497ptD.0 => D#531ptD.0
  # DEBUG __nD.65737 => __n_11
  # DEBUG thisD.65738 => D#497ptD.0
  # DEBUG D#496ptD.0 => D#497ptD.0
  if (__n_11 != 0)
    goto <bb 5>;
  else
    goto <bb 32>;
;;    succ:       5 [90.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [10.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 662, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [90.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#495ptD.0 => &D#496ptD.0->_M_implD.34865
  # DEBUG D#494ptD.0 => D#495ptD.0
  # DEBUG __nD.65741 => __n_11
  # DEBUG __aD.65740 => D#494ptD.0
  # DEBUG D#493ptD.0 => D#494ptD.0
  # DEBUG D#491ptD.0 => D#493ptD.0
  # DEBUG D#492ptD.0 => 0B
  # DEBUG __nD.65744 => __n_11
  # DEBUG thisD.65742 => D#491ptD.0
  # DEBUG D.65743 => D#492ptD.0
  # DEBUG D#490ptD.0 => D#491ptD.0
  # DEBUG D#484ptD.0 => D#490ptD.0
  # DEBUG thisD.57087 => D#484ptD.0
  if (__n_11 > 4611686018427387903)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 0
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_74 = VDEF <.MEM_63>
  # USE = nonlocal null { D.65544 D.65748 } (escaped heap)
  # CLB = nonlocal null { D.65544 D.65748 } (escaped heap)
  _ZSt17__throw_bad_allocvD.2850 ();
;;    succ:      

;;   basic block 7, loop depth 0, count 0, freq 669, maybe hot
;;   Invalid sum of outgoing probabilities 9.0%
;;    prev block 6, next block 10, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [4, 18446744073709551612] NONZERO 18446744073709551612
  _52 = __n_11 * 4;
  # .MEM_73 = VDEF <.MEM_63>
  # PT = { D.65748 } (escaped heap)
  # USE = nonlocal null { D.65544 D.65748 } (escaped heap)
  # CLB = nonlocal null { D.65544 D.65748 } (escaped heap)
  _53 = _ZnwmD.2764 (_52);
  # PT = { D.65748 } (escaped heap)
  _48 = _53 + _52;
  # DEBUG D#378ptD.0 => &__tmpD.65653
  # DEBUG D#378ptD.0 => &__tmpD.65653
  # DEBUG D#379ptD.0 => &__valD.65551
  # DEBUG __nD.65716 => __n_11
  # DEBUG D#376ptD.0 => D#378ptD.0
  # DEBUG thisD.65713 => D#376ptD.0
  # DEBUG thisD.65714 => D#378ptD.0
  # DEBUG D#377ptD.0 => D#379ptD.0
  # DEBUG __valueD.65715 => D#377ptD.0
  # DEBUG D#375ptD.0 => &D#376ptD.0->D.35374
  # DEBUG thisD.54797 => D#375ptD.0
  # DEBUG D#373ptD.0 => D#377ptD.0
  # DEBUG __firstD.65720 => NULL
  # DEBUG __nD.65719 => __n_11
  # DEBUG D#372ptD.0 => D#373ptD.0
  # DEBUG __xD.65717 => D#372ptD.0
  # DEBUG D.65718 => D#374ptD.0
  # DEBUG D#371ptD.0 => D#372ptD.0
  # DEBUG __firstD.65723 => NULL
  # DEBUG __nD.65722 => __n_11
  # DEBUG D#370ptD.0 => D#371ptD.0
  # DEBUG __xD.65721 => D#370ptD.0
  # DEBUG __assignableD.65725 => 1
  # DEBUG D#369ptD.0 => D#370ptD.0
  # DEBUG __firstD.65728 => NULL
  # DEBUG __nD.65727 => __n_11
  # DEBUG D#368ptD.0 => D#369ptD.0
  # DEBUG __xD.65726 => D#368ptD.0
  # DEBUG D#367ptD.0 => D#368ptD.0
  # DEBUG __firstD.65731 => NULL
  # DEBUG __nD.65730 => __n_11
  # DEBUG D#366ptD.0 => D#367ptD.0
  # DEBUG __valueD.65729 => D#366ptD.0
  # DEBUG __itD.54639 => NULL
  # DEBUG __itD.54605 => NULL
  # DEBUG D#258ptD.0 => D#366ptD.0
  # DEBUG __firstD.65734 => NULL
  # DEBUG __nD.65733 => __n_11
  # DEBUG __valueD.65732 => D#258ptD.0
  # DEBUG __tmpD.65735 => -1
  # DEBUG __niterD.65736 => __n_11
  # DEBUG __niterD.65736 => __n_11
  # DEBUG __firstD.65734 => _53
  # DEBUG D#378ptD.0 => &__tmpD.65653
  # DEBUG D#379ptD.0 => &__valD.65551
  # DEBUG __nD.65716 => __n_11
  # DEBUG D#376ptD.0 => D#378ptD.0
  # DEBUG thisD.65713 => D#376ptD.0
  # DEBUG thisD.65714 => D#378ptD.0
  # DEBUG D#377ptD.0 => D#379ptD.0
  # DEBUG __valueD.65715 => D#377ptD.0
  # DEBUG D#375ptD.0 => &D#376ptD.0->D.35374
  # DEBUG thisD.54797 => D#375ptD.0
  # DEBUG D#373ptD.0 => D#377ptD.0
  # DEBUG __firstD.65720 => NULL
  # DEBUG __nD.65719 => __n_11
  # DEBUG D#372ptD.0 => D#373ptD.0
  # DEBUG __xD.65717 => D#372ptD.0
  # DEBUG D.65718 => D#374ptD.0
  # DEBUG D#371ptD.0 => D#372ptD.0
  # DEBUG __firstD.65723 => NULL
  # DEBUG __nD.65722 => __n_11
  # DEBUG D#370ptD.0 => D#371ptD.0
  # DEBUG __xD.65721 => D#370ptD.0
  # DEBUG __assignableD.65725 => 1
  # DEBUG D#369ptD.0 => D#370ptD.0
  # DEBUG __firstD.65728 => NULL
  # DEBUG __nD.65727 => __n_11
  # DEBUG D#368ptD.0 => D#369ptD.0
  # DEBUG __xD.65726 => D#368ptD.0
  # DEBUG D#367ptD.0 => D#368ptD.0
  # DEBUG __firstD.65731 => NULL
  # DEBUG __nD.65730 => __n_11
  # DEBUG D#366ptD.0 => D#367ptD.0
  # DEBUG __valueD.65729 => D#366ptD.0
  # DEBUG __itD.54639 => NULL
  # DEBUG __itD.54605 => NULL
  # DEBUG D#258ptD.0 => D#366ptD.0
  # DEBUG __nD.65733 => __n_11
  # DEBUG __valueD.65732 => D#258ptD.0
  # DEBUG __tmpD.65735 => -1
  # DEBUG __niterD.65736 => __n_11
  # DEBUG __firstD.65734 => _53
  _41 = (sizetype) _9;
  _37 = _41 * 4;
  # .MEM_79 = VDEF <.MEM_73>
  # USE = anything 
  # CLB = anything 
  memsetD.1001 (_53, 255, _37);
;;    succ:       10 [9.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 669, maybe hot
;;   Invalid sum of incoming frequencies 60, should be 669
;;    prev block 7, next block 11, flags: (NEW)
;;    pred:       7 [9.0%]  (FALLTHRU,EXECUTABLE)
  _88 = (long unsigned intD.14) _9;
  _91 = _88 * 4;
  # PT = { D.65748 } (escaped heap)
  __first_29 = _53 + _91;
  # VUSE <.MEM_79>
  pretmp_92 = MEM[(intD.9 * &)this_2(D) + 136];
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.65748 } (escaped heap)
  # __first_76 = PHI <__first_29(10), 0B(32)>
  # .MEM_78 = PHI <.MEM_79(10), .MEM_63(32)>
  # PT = nonlocal escaped { D.65748 } (escaped heap)
  # _34 = PHI <_48(10), _42(32)>
  # PT = null { D.65748 } (escaped heap)
  # __first_33 = PHI <_53(10), 0B(32)>
  # PT = nonlocal escaped 
  # prephitmp_110 = PHI <pretmp_92(10), __first_5(32)>
  # DEBUG D#534ptD.0 => &D#1082ptD.0->D.35374._M_implD.34865
  # DEBUG thisD.65655 => &__tmpD.65653.D.35374._M_implD.34865
  # DEBUG __xD.65654 => D#534ptD.0
  # DEBUG D#257ptD.0 => &D#534ptD.0->_M_startD.34867
  # DEBUG D#256ptD.0 => &MEM[(struct _Vector_implD.34842 *)&__tmpD.65653]._M_startD.34867
  # DEBUG __aD.65657 => D#256ptD.0
  # DEBUG __bD.65656 => D#257ptD.0
  # DEBUG __tmpD.65658 => __first_33
  # DEBUG D#1083ptD.0 => MEM[(intD.9 * &)this_2(D) + 136]
  # .MEM_82 = VDEF <.MEM_78>
  MEM[(intD.9 * &)this_2(D) + 136] = __first_33;
  # DEBUG D#255ptD.0 => &D#534ptD.0->_M_finishD.34868
  # DEBUG D#254ptD.0 => &MEM[(struct _Vector_implD.34842 *)&__tmpD.65653]._M_finishD.34868
  # DEBUG __aD.65660 => D#254ptD.0
  # DEBUG __bD.65659 => D#255ptD.0
  # DEBUG __tmpD.65661 => __first_76
  # .MEM_84 = VDEF <.MEM_82>
  MEM[(intD.9 * &)this_2(D) + 144] = __first_76;
  # DEBUG D#253ptD.0 => &D#534ptD.0->_M_end_of_storageD.34869
  # DEBUG D#252ptD.0 => &MEM[(struct _Vector_implD.34842 *)&__tmpD.65653]._M_end_of_storageD.34869
  # DEBUG __aD.65663 => D#252ptD.0
  # DEBUG __bD.65662 => D#253ptD.0
  # DEBUG __tmpD.65664 => _34
  # .MEM_86 = VDEF <.MEM_84>
  MEM[(intD.9 * &)this_2(D) + 152] = _34;
  # DEBUG thisD.65665 => &__tmpD.65653
  # DEBUG D#245ptD.0 => &__tmpD.65653.D.35374
  # DEBUG thisD.53653 => D#245ptD.0
  # DEBUG D#248ptD.0 => __tmpD.65653.D.35374._M_implD.34865._M_finishD.34868
  # DEBUG D#247ptD.0 => __tmpD.65653.D.35374._M_implD.34865._M_startD.34867
  # DEBUG __firstD.53650 => D#247ptD.0
  # DEBUG __lastD.53651 => D#248ptD.0
  # DEBUG D.53652 => NULL
  # DEBUG D#150ptD.0 => D#247ptD.0
  # DEBUG D#151ptD.0 => D#248ptD.0
  # DEBUG __firstD.53061 => D#150ptD.0
  # DEBUG __lastD.53060 => D#151ptD.0
  # DEBUG D#149ptD.0 => D#151ptD.0
  # DEBUG D#148ptD.0 => D#150ptD.0
  # DEBUG D#146ptD.0 => D#148ptD.0
  # DEBUG D#147ptD.0 => D#149ptD.0
  # DEBUG D.53050 => D#146ptD.0
  # DEBUG D.53049 => D#147ptD.0
  # DEBUG D#246ptD.0 => &__tmpD.65653.D.35374
  # DEBUG thisD.65666 => D#246ptD.0
  # DEBUG D#244ptD.0 => D#246ptD.0->_M_implD.34865._M_end_of_storageD.34869
  # DEBUG D#243ptD.0 => (long intD.12) D#244ptD.0
  # DEBUG D#242ptD.0 => (long intD.12) D#1083ptD.0
  # DEBUG D#241ptD.0 => D#243ptD.0 - D#242ptD.0
  # DEBUG D#240ptD.0 => D#241ptD.0 /[ex] 4
  # DEBUG D#239ptD.0 => (long unsigned intD.14) D#240ptD.0
  # DEBUG thisD.65669 => D#246ptD.0
  # DEBUG __pD.65668 => D#1083ptD.0
  # DEBUG __nD.65667 => D#239ptD.0
  if (prephitmp_110 != 0B)
    goto <bb 12>;
  else
    goto <bb 13>;
;;    succ:       12 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 576, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#237ptD.0 => &D#246ptD.0->_M_implD.34865
  # DEBUG D#235ptD.0 => D#237ptD.0
  # DEBUG D#236ptD.0 => D#239ptD.0
  # DEBUG __pD.65673 => D#1083ptD.0
  # DEBUG __aD.65671 => D#235ptD.0
  # DEBUG __nD.65672 => D#236ptD.0
  # DEBUG D#234ptD.0 => D#236ptD.0
  # DEBUG D#233ptD.0 => D#235ptD.0
  # DEBUG D#231ptD.0 => D#233ptD.0
  # DEBUG D#232ptD.0 => D#234ptD.0
  # DEBUG __pD.65676 => D#1083ptD.0
  # DEBUG thisD.65674 => D#231ptD.0
  # DEBUG D.65675 => D#232ptD.0
  # .MEM_87 = VDEF <.MEM_86>
  # USE = nonlocal null { D.65544 D.65748 } (escaped heap)
  # CLB = nonlocal null { D.65544 D.65748 } (escaped heap)
  _ZdlPvD.2766 (prephitmp_110);
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       11 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_57 = PHI <.MEM_86(11), .MEM_87(12)>
  # DEBUG D#238ptD.0 => &D#246ptD.0->_M_implD.34865
  # DEBUG thisD.65677 => D#238ptD.0
  # DEBUG thisD.65678 => D#238ptD.0
  # DEBUG thisD.65679 => D#238ptD.0
  # .MEM_93 = VDEF <.MEM_57>
  __tmpD.65653 ={v} {CLOBBER};
  goto <bb 30>;
;;    succ:       30 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 1800, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       3 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#87ptD.0 => D#1082ptD.0
  # VUSE <.MEM_63>
  # PT = nonlocal escaped 
  __first_18 = MEM[(intD.9 * *)this_2(D) + 144B];
  # DEBUG D#87ptD.0 => D#1082ptD.0
  # DEBUG thisD.65594 => D#87ptD.0
  # DEBUG thisD.65595 => D#87ptD.0
  _19 = (long intD.12) __first_18;
  _20 = _19 - _14;
  # RANGE [-2305843009213693952, 2305843009213693951]
  _21 = _20 /[ex] 4;
  # RANGE ~[2305843009213693952, 16140901064495857663]
  _22 = (size_typeD.34950) _21;
  if (__n_11 > _22)
    goto <bb 16>;
  else
    goto <bb 15>;
;;    succ:       16 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __niterD.65564 => __n_11
  # DEBUG __firstD.65562 => __first_5
  if (__n_11 == 0)
    goto <bb 29>;
  else
    goto <bb 25>;
;;    succ:       29 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       14 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __firstD.65572 => __first_5
  if (__first_5 == __first_18)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 900, maybe hot
;;   Invalid sum of outgoing probabilities 9.9%
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_95 = PHI <.MEM_63(16), .MEM_90(20)>
  # DEBUG D#533ptD.0 => &D#1082ptD.0->D.35374
  # DEBUG thisD.57540 => D#533ptD.0
  # DEBUG D#87ptD.0 => D#1082ptD.0
  # DEBUG D#87ptD.0 => D#1082ptD.0
  # DEBUG thisD.57538 => D#87ptD.0
  # DEBUG thisD.57537 => D#87ptD.0
  # RANGE [1, 18446744073709551615]
  __n_26 = __n_11 - _22;
  # DEBUG D#373ptD.0 => &__valD.65551
  # DEBUG __firstD.65577 => __first_18
  # DEBUG __nD.65576 => __n_26
  # DEBUG D#372ptD.0 => D#373ptD.0
  # DEBUG __xD.65574 => D#372ptD.0
  # DEBUG D.65575 => D#374ptD.0
  # DEBUG D#371ptD.0 => D#372ptD.0
  # DEBUG __firstD.65580 => __first_18
  # DEBUG __nD.65579 => __n_26
  # DEBUG D#370ptD.0 => D#371ptD.0
  # DEBUG __xD.65578 => D#370ptD.0
  # DEBUG __assignableD.65582 => 1
  # DEBUG D#369ptD.0 => D#370ptD.0
  # DEBUG __firstD.65585 => __first_18
  # DEBUG __nD.65584 => __n_26
  # DEBUG D#368ptD.0 => D#369ptD.0
  # DEBUG __xD.65583 => D#368ptD.0
  # DEBUG D#367ptD.0 => D#368ptD.0
  # DEBUG __firstD.65588 => __first_18
  # DEBUG __nD.65587 => __n_26
  # DEBUG D#366ptD.0 => D#367ptD.0
  # DEBUG __valueD.65586 => D#366ptD.0
  # DEBUG __itD.54639 => __first_18
  # DEBUG __itD.54605 => __first_18
  # DEBUG D#258ptD.0 => D#366ptD.0
  # DEBUG __firstD.65591 => __first_18
  # DEBUG __nD.65590 => __n_26
  # DEBUG __valueD.65589 => D#258ptD.0
  # DEBUG __tmpD.65592 => -1
  # DEBUG __niterD.65593 => __n_26
  # DEBUG __niterD.65593 => __n_26
  # DEBUG __firstD.65591 => __first_18
  _24 = __n_26 * 4;
  # .MEM_72 = VDEF <.MEM_95>
  # USE = anything 
  # CLB = anything 
  memsetD.1001 (__first_18, 255, _24);
  goto <bb 24>;
;;    succ:       24 [9.9%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 819, maybe hot
;;   Invalid sum of outgoing probabilities 9.0%
;;    prev block 17, next block 20, flags: (NEW, REACHABLE)
;;    pred:       16 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  _103 = (unsigned long) __first_18;
  _107 = __first_5 + 4;
  _108 = (unsigned long) _107;
  _66 = _103 - _108;
  _30 = _66 /[ex] 4;
  _31 = _30 & 4611686018427387903;
  _58 = _31 + 1;
  _109 = _58 * 4;
  # .MEM_77 = VDEF <.MEM_63>
  # USE = anything 
  # CLB = anything 
  memsetD.1001 (__first_5, 255, _109);
;;    succ:       20 [9.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 819, maybe hot
;;   Invalid sum of incoming frequencies 74, should be 819
;;    prev block 18, next block 24, flags: (NEW)
;;    pred:       18 [9.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_90 = PHI <.MEM_77(18)>
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 900, maybe hot
;;   Invalid sum of incoming frequencies 89, should be 900
;;    prev block 20, next block 25, flags: (NEW, REACHABLE)
;;    pred:       17 [9.9%]  (FALLTHRU,EXECUTABLE)
  _81 = __n_26 * 4;
  # PT = nonlocal escaped 
  __first_56 = __first_18 + _81;
  # .MEM_67 = VDEF <.MEM_72>
  MEM[(struct vectorD.34569 *)this_2(D) + 136B].D.35374._M_implD.34865._M_finishD.34868 = __first_56;
  goto <bb 30>;
;;    succ:       30 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 819, maybe hot
;;   Invalid sum of outgoing probabilities 9.0%
;;    prev block 24, next block 27, flags: (NEW, REACHABLE)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  _80 = (sizetype) _9;
  _23 = _80 * 4;
  # .MEM_71 = VDEF <.MEM_63>
  # USE = anything 
  # CLB = anything 
  memsetD.1001 (__first_5, 255, _23);
;;    succ:       27 [9.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 819, maybe hot
;;   Invalid sum of incoming frequencies 74, should be 819
;;    prev block 25, next block 29, flags: (NEW)
;;    pred:       25 [9.0%]  (FALLTHRU,EXECUTABLE)
  _89 = (long unsigned intD.14) _9;
  _49 = _89 * 4;
  # PT = nonlocal escaped 
  __first_39 = __first_5 + _49;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 27, next block 33, flags: (NEW, REACHABLE)
;;    pred:       27 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_70 = PHI <__first_39(27), __first_5(15)>
  # .MEM_83 = PHI <.MEM_71(27), .MEM_63(15)>
;;    succ:       33 [100.0%]  (FALLTHRU)

;;   basic block 33, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 29, next block 30, flags: (NEW)
;;    pred:       29 [100.0%]  (FALLTHRU)
  # DEBUG D#155ptD.0 => D#1082ptD.0
  # DEBUG __posD.65566 => __first_70
  # DEBUG D#154ptD.0 => D#155ptD.0
  # DEBUG thisD.65565 => D#154ptD.0
  # DEBUG D#152ptD.0 => &D#154ptD.0->D.35374
  # DEBUG thisD.53074 => D#152ptD.0
  # DEBUG D#153ptD.0 => D#154ptD.0->D.35374._M_implD.34865._M_finishD.34868
  # DEBUG __firstD.53064 => __first_70
  # DEBUG __lastD.53065 => D#153ptD.0
  # DEBUG D.53066 => NULL
  # DEBUG D#150ptD.0 => __first_70
  # DEBUG D#151ptD.0 => D#153ptD.0
  # DEBUG __firstD.53061 => D#150ptD.0
  # DEBUG __lastD.53060 => D#151ptD.0
  # DEBUG D#149ptD.0 => D#151ptD.0
  # DEBUG D#148ptD.0 => D#150ptD.0
  # DEBUG D#146ptD.0 => D#148ptD.0
  # DEBUG D#147ptD.0 => D#149ptD.0
  # DEBUG D.53050 => D#146ptD.0
  # DEBUG D.53049 => D#147ptD.0
  # .MEM_69 = VDEF <.MEM_83>
  MEM[(intD.9 * *)this_2(D) + 144B] = __first_70;
;;    succ:       30 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 2535, maybe hot
;;    prev block 33, next block 34, flags: (NEW, REACHABLE)
;;    pred:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_61 = PHI <.MEM_67(24), .MEM_93(13), .MEM_69(33)>
;;    succ:       34 [100.0%]  (FALLTHRU)

;;   basic block 34, loop depth 0, count 0, freq 2535, maybe hot
;;    prev block 30, next block 31, flags: (NEW)
;;    pred:       30 [100.0%]  (FALLTHRU)
  # .MEM_94 = VDEF <.MEM_61>
  this_2(D)->_dirtyD.34631 = 0;
;;    succ:       31 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 6504, maybe hot
;;    prev block 34, next block 35, flags: (NEW, REACHABLE)
;;    pred:       2 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                34 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_4 = PHI <.MEM_1(D)(2), .MEM_94(34)>
;;    succ:       35 [100.0%]  (FALLTHRU)

;;   basic block 35, loop depth 0, count 0, freq 6504, maybe hot
;;    prev block 31, next block 32, flags: (NEW)
;;    pred:       31 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_4>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 32, loop depth 0, count 0, freq 74, maybe hot
;;    prev block 35, next block 1, flags: (NEW, REACHABLE)
;;    pred:       4 [10.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551612
  _28 = __n_11 * 4;
  # PT = nonlocal escaped 
  # ALIGN = 4, MISALIGN = 0
  _42 = (intD.9 *) _28;
  # DEBUG D#378ptD.0 => &__tmpD.65653
  # DEBUG D#378ptD.0 => &__tmpD.65653
  # DEBUG D#379ptD.0 => &__valD.65551
  # DEBUG __nD.65716 => __n_11
  # DEBUG D#376ptD.0 => D#378ptD.0
  # DEBUG thisD.65713 => D#376ptD.0
  # DEBUG thisD.65714 => D#378ptD.0
  # DEBUG D#377ptD.0 => D#379ptD.0
  # DEBUG __valueD.65715 => D#377ptD.0
  # DEBUG D#375ptD.0 => &D#376ptD.0->D.35374
  # DEBUG thisD.54797 => D#375ptD.0
  # DEBUG D#373ptD.0 => D#377ptD.0
  # DEBUG __firstD.65720 => NULL
  # DEBUG __nD.65719 => __n_11
  # DEBUG D#372ptD.0 => D#373ptD.0
  # DEBUG __xD.65717 => D#372ptD.0
  # DEBUG D.65718 => D#374ptD.0
  # DEBUG D#371ptD.0 => D#372ptD.0
  # DEBUG __firstD.65723 => NULL
  # DEBUG __nD.65722 => __n_11
  # DEBUG D#370ptD.0 => D#371ptD.0
  # DEBUG __xD.65721 => D#370ptD.0
  # DEBUG __assignableD.65725 => 1
  # DEBUG D#369ptD.0 => D#370ptD.0
  # DEBUG __firstD.65728 => NULL
  # DEBUG __nD.65727 => __n_11
  # DEBUG D#368ptD.0 => D#369ptD.0
  # DEBUG __xD.65726 => D#368ptD.0
  # DEBUG D#367ptD.0 => D#368ptD.0
  # DEBUG __firstD.65731 => NULL
  # DEBUG __nD.65730 => __n_11
  # DEBUG D#366ptD.0 => D#367ptD.0
  # DEBUG __valueD.65729 => D#366ptD.0
  # DEBUG __itD.54639 => NULL
  # DEBUG __itD.54605 => NULL
  # DEBUG D#258ptD.0 => D#366ptD.0
  # DEBUG __firstD.65734 => NULL
  # DEBUG __nD.65733 => __n_11
  # DEBUG __valueD.65732 => D#258ptD.0
  # DEBUG __tmpD.65735 => -1
  # DEBUG __niterD.65736 => __n_11
  # DEBUG __niterD.65736 => __n_11
  # DEBUG __firstD.65734 => 0B
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

}



;; Function virtual void DenseAllocator::Clear() (_ZN14DenseAllocator5ClearEv, funcdef_no=1754, decl_uid=36236, cgraph_uid=424, symbol_order=425)


Pass statistics:
----------------

virtual void DenseAllocator::Clear() (struct DenseAllocatorD.35479 * const thisD.41080)
{
  intD.9 __valD.65766;
  intD.9 __valD.65773;
  intD.9 jD.41083;
  intD.9 iD.41082;
  const intD.9 pretmp_2;
  long unsigned intD.14 _9;
  long unsigned intD.14 _11;
  intD.9 _15;
  struct sRequestD.35378 & _19;
  boolD.2757 _23;
  long unsigned intD.14 pretmp_25;
  struct vectorD.34569 * _26;
  long unsigned intD.14 _27;
  intD.9 _28;
  struct vectorD.34569 * _29;
  long unsigned intD.14 _30;
  struct vectorD.35482 * pretmp_46;
  long unsigned intD.14 pretmp_48;
  struct vectorD.35482 & pretmp_49;
  struct sRequestD.35378 * pretmp_50;

;;   basic block 2, loop depth 0, count 0, freq 89, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG iD.41082 => 0
  # DEBUG iD.41082 => 0
  # VUSE <.MEM_5(D)>
  _15 = this_6(D)->D.36298._inputsD.34629;
  if (_15 <= 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 89, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_52 = PHI <.MEM_5(D)(2), .MEM_37(6)>
  # DEBUG D#1085ptD.0 => &this_6(D)->D.36298
  # DEBUG thisD.57740 => D#1085ptD.0
  # VUSE <.MEM_52>
  _23 = MEM[(struct AllocatorD.34627 *)this_6(D)]._dirtyD.34631;
  if (_23 != 0)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 81, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_5(D)>
  pretmp_2 = this_6(D)->D.36298._outputsD.34630;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_35 = PHI <.MEM_5(D)(4), .MEM_37(7)>
  # i_36 = PHI <0(4), i_14(7)>
  # DEBUG iD.41082 => i_36
  # DEBUG jD.41083 => 0
  if (pretmp_2 <= 0)
    goto <bb 6>;
  else
    goto <bb 8>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_37 = PHI <.MEM_35(5), .MEM_12(9)>
  i_14 = i_36 + 1;
  # DEBUG iD.41082 => i_14
  # DEBUG iD.41082 => i_14
  if (i_14 >= _15)
    goto <bb 3>;
  else
    goto <bb 7>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_25 = (long unsigned intD.14) i_36;
  # VUSE <.MEM_35>
  # PT = nonlocal escaped 
  pretmp_46 = MEM[(struct vectorD.35482 * *)this_6(D) + 160B];
  pretmp_48 = pretmp_25 * 24;
  # PT = nonlocal escaped 
  pretmp_49 = pretmp_46 + pretmp_48;
  # VUSE <.MEM_35>
  # PT = nonlocal escaped 
  pretmp_50 = MEM[(struct sRequestD.35378 * *)pretmp_49];
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # j_38 = PHI <0(8), j_13(10)>
  # .MEM_42 = PHI <.MEM_35(8), .MEM_12(10)>
  # DEBUG jD.41083 => j_38
  # RANGE [0, 18446744073709551615]
  _9 = (long unsigned intD.14) j_38;
  # DEBUG D#536ptD.0 => &this_6(D)->_requestD.36229
  # DEBUG D#36ptD.0 => D#536ptD.0
  # DEBUG __nD.57737 => (long unsigned intD.14) i_36
  # DEBUG thisD.57738 => D#36ptD.0
  # DEBUG __nD.57733 => _9
  # DEBUG thisD.57734 => D#37ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _11 = _9 * 16;
  # PT = nonlocal escaped 
  _19 = pretmp_50 + _11;
  # .MEM_12 = VDEF <.MEM_42>
  _19->labelD.35381 = -1;
  j_13 = j_38 + 1;
  # DEBUG jD.41083 => j_13
  # DEBUG jD.41083 => j_13
  if (pretmp_2 <= j_13)
    goto <bb 6>;
  else
    goto <bb 10>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 2, count 0, freq 8281, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 9>;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 35, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       3 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.65761 => D#1085ptD.0
  # PT = nonlocal 
  _26 = &MEM[(struct AllocatorD.34627 *)this_6(D)]._inmatchD.35376;
  # DEBUG thisD.65764 => _26
  # DEBUG __firstD.65763 => _15
  # DEBUG __lastD.65762 => -1
  # DEBUG thisD.65768 => _26
  # DEBUG __nD.65767 => _15
  # .MEM_24 = VDEF <.MEM_52>
  __valD.65766 = -1;
  # DEBUG __valD.65766 => __valD.65766
  # RANGE [0, 18446744073709551615]
  _27 = (long unsigned intD.14) _15;
  # .MEM_31 = VDEF <.MEM_24>
  # USE = nonlocal null { D.65766 D.65773 } (escaped)
  # CLB = nonlocal null { D.65766 D.65773 } (escaped)
  _ZNSt6vectorIiSaIiEE14_M_fill_assignEmRKiD.35237 (_26, _27, &__valD.65766);
  # VUSE <.MEM_31>
  _28 = MEM[(struct AllocatorD.34627 *)this_6(D)]._outputsD.34630;
  # PT = nonlocal 
  _29 = &MEM[(struct AllocatorD.34627 *)this_6(D)]._outmatchD.35377;
  # DEBUG thisD.65771 => _29
  # DEBUG __firstD.65770 => _28
  # DEBUG __lastD.65769 => -1
  # DEBUG thisD.65775 => _29
  # DEBUG __nD.65774 => _28
  # .MEM_32 = VDEF <.MEM_31>
  __valD.65773 = -1;
  # DEBUG __valD.65773 => __valD.65773
  # RANGE ~[2147483648, 18446744071562067967]
  _30 = (long unsigned intD.14) _28;
  # .MEM_33 = VDEF <.MEM_32>
  # USE = nonlocal null { D.65766 D.65773 } (escaped)
  # CLB = nonlocal null { D.65766 D.65773 } (escaped)
  _ZNSt6vectorIiSaIiEE14_M_fill_assignEmRKiD.35237 (_29, _30, &__valD.65773);
  # .MEM_34 = VDEF <.MEM_33>
  MEM[(struct AllocatorD.34627 *)this_6(D)]._dirtyD.34631 = 0;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 89, maybe hot
;;    prev block 11, next block 1, flags: (NEW, REACHABLE)
;;    pred:       11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                3 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_16 = PHI <.MEM_34(11), .MEM_52(3)>
  # VUSE <.MEM_16>
  return;
;;    succ:       EXIT [100.0%] 

}



Updating SSA:
Registering new PHI nodes in block #5
Registering new PHI nodes in block #8
Registering new PHI nodes in block #9
Updating SSA information for statement _19->label = -1;
Registering new PHI nodes in block #10
Registering new PHI nodes in block #14
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Registering new PHI nodes in block #13

DFA Statistics for virtual void DenseAllocator::Clear()

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             51        408b
DEF operands                             18        144b
VUSE operands                            13        104b
VDEF operands                             6         48b
PHI nodes                                 9        936b
PHI arguments                            16        768b
---------------------------------------------------------
Total memory used by DFA/SSA data                 2408b
---------------------------------------------------------

Average number of arguments per PHI node: 1.8 (max: 2)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_41 -> { .MEM_12 }
.MEM_43 -> { .MEM_37 }
Incremental SSA update started at block: 5
Number of blocks in CFG: 15
Number of blocks to update: 7 ( 47%)
Affected blocks: 5 6 7 9 10 13 14


Creating dr for this_6(D)->D.36298._inputs
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: *this_6(D)
	Access function 0: 768
	Access function 1: 0
Creating dr for this_6(D)->D.36298._outputs
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 100
	step: 0
	aligned to: 256
	base_object: *this_6(D)
	Access function 0: 800
	Access function 1: 0
Creating dr for MEM[(struct vector * *)this_6(D) + 160B]
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 160
	step: 0
	aligned to: 256
	base_object: MEM[(struct vector * *)this_6(D) + 160B]
Creating dr for MEM[(struct vector * *)this_6(D) + 160B]
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 160
	step: 0
	aligned to: 256
	base_object: MEM[(struct vector * *)this_6(D) + 160B]
Creating dr for MEM[(struct sRequest * *)pretmp_49]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest * *)pretmp_49]
Creating dr for MEM[(struct sRequest * *)pretmp_49]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest * *)pretmp_49]
Creating dr for _19->label
analyze_innermost: success.
	base_address: pretmp_50
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: *pretmp_50
	Access function 0: 32
	Access function 1: {0B, +, 16}_2
Creating dr for _19->label
analyze_innermost: success.
	base_address: pretmp_50
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: *_19
	Access function 0: 32
Creating dr for _19->label
analyze_innermost: success.
	base_address: pretmp_50
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: *_19
	Access function 0: 32
Creating dr for _19->label
analyze_innermost: success.
	base_address: pretmp_50
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: *pretmp_50
	Access function 0: 32
	Access function 1: {0B, +, 16}_2
Creating dr for _19->label
analyze_innermost: success.
	base_address: pretmp_50
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: *_19
	Access function 0: 32
Creating dr for _19->label
analyze_innermost: success.
	base_address: pretmp_50
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: *_19
	Access function 0: 32
Analyzing # of iterations of loop 2
  exit condition [1, + , 1](no_overflow) < pretmp_2
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) pretmp_2 + 4294967295, bounded by 2147483646
Analyzing # of iterations of loop 2
  exit condition [1, + , 1](no_overflow) < pretmp_2
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) pretmp_2 + 4294967295, bounded by 2147483646
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < _15
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) _15 + 4294967295, bounded by 2147483646
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < _15
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) _15 + 4294967295, bounded by 2147483646
Creating dr for MEM[(struct Allocator *)this_6(D)]._dirty
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 104
	step: 0
	aligned to: 256
	base_object: MEM[(struct Allocator *)this_6(D)]
	Access function 0: 832
Creating dr for __val
analyze_innermost: success.
	base_address: &__val
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: __val

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:11, LOOPS:2, CONDITIONS:4, STMTS:32)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 1

SCoP statistics (BBS:8, LOOPS:2, CONDITIONS:3, STMTS:27)

SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Global statistics (BBS:17, LOOPS:2, CONDITIONS:5, STMTS:60)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
Creating dr for MEM[(struct vector * *)this_6(D) + 160B]
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 160
	step: 0
	aligned to: 256
	base_object: MEM[(struct vector * *)this_6(D) + 160B]
Creating dr for MEM[(struct sRequest * *)pretmp_49]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest * *)pretmp_49]
Creating dr for _19->label
analyze_innermost: success.
	base_address: pretmp_50
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: *_19
	Access function 0: 32
Creating dr for Cross_BB_scalar_dependence.1581[0]
analyze_innermost: success.
	base_address: &Cross_BB_scalar_dependence.1581
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: Cross_BB_scalar_dependence.1581
	Access function 0: 0
Creating dr for Cross_BB_scalar_dependence.1581[0]
analyze_innermost: success.
	base_address: &Cross_BB_scalar_dependence.1581
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: Cross_BB_scalar_dependence.1581
	Access function 0: 0

Updating SSA:
Registering new PHI nodes in block #0
Registering new PHI nodes in block #2
Updating SSA information for statement _15 = this_6(D)->D.36298._inputs;
Registering new PHI nodes in block #4
Updating SSA information for statement pretmp_2 = this_6(D)->D.36298._outputs;
Registering new PHI nodes in block #5
Registering new PHI nodes in block #8
Updating SSA information for statement pretmp_46 = MEM[(struct vector * *)this_6(D) + 160B];
Updating SSA information for statement pretmp_50 = MEM[(struct sRequest * *)pretmp_49];
Updating SSA information for statement Cross_BB_scalar_dependence.1581[0] = pretmp_50;
Registering new PHI nodes in block #9
Updating SSA information for statement pretmp_1 = Cross_BB_scalar_dependence.1581[0];
Updating SSA information for statement _19->label = -1;
Registering new PHI nodes in block #10
Registering new PHI nodes in block #14
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Registering new PHI nodes in block #13
Registering new PHI nodes in block #17
Registering new PHI nodes in block #3
Registering new PHI nodes in block #16
Updating SSA information for statement _23 = MEM[(struct Allocator *)this_6(D)]._dirty;
Registering new PHI nodes in block #11
Updating SSA information for statement __val = -1;
Updating SSA information for statement std::vector<int>::_M_fill_assign (_26, _27, &__val);
Updating SSA information for statement _28 = MEM[(struct Allocator *)this_6(D)]._outputs;
Updating SSA information for statement __val = -1;
Updating SSA information for statement std::vector<int>::_M_fill_assign (_29, _30, &__val);
Updating SSA information for statement MEM[(struct Allocator *)this_6(D)]._dirty = 0;
Registering new PHI nodes in block #12
Registering new PHI nodes in block #15
Updating SSA information for statement return;

DFA Statistics for virtual void DenseAllocator::Clear()

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             52        416b
DEF operands                             19        152b
VUSE operands                            15        120b
VDEF operands                             7         56b
PHI nodes                                 9        936b
PHI arguments                            16        768b
---------------------------------------------------------
Total memory used by DFA/SSA data                 2448b
---------------------------------------------------------

Average number of arguments per PHI node: 1.8 (max: 2)


Hash table statistics:
    var_infos:   size 61, 1 elements, 0.000000 collision/search ratio


Symbols to be put in SSA form
{ D.51904 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 18
Number of blocks to update: 17 ( 94%)
Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17



Stride in BB_8, DR_0, depth 0:  0 
Stride in BB_8, DR_1, depth 0:  0 
Stride in BB_8, DR_2, depth 0:  0 
Stride in BB_9, DR_3, depth 0:  0 
Stride in BB_9, DR_4, depth 0:  0 
Stride in BB_8, DR_0, depth 1:  0 
Stride in BB_8, DR_1, depth 1:  0 
Stride in BB_8, DR_2, depth 1:  0 
Stride in BB_9, DR_3, depth 1:  0 
Stride in BB_9, DR_4, depth 1:  0 
Stride in BB_9, DR_3, depth 0:  0 
Stride in BB_9, DR_4, depth 0:  0 
Stride in BB_9, DR_3, depth 2:  0 
Stride in BB_9, DR_4, depth 2:  0 
Stride in BB_9, DR_3, depth 0:  0 
Stride in BB_9, DR_4, depth 0:  0 
Stride in BB_9, DR_3, depth 3:  0 
Stride in BB_9, DR_4, depth 3:  0 
Stride in BB_9, DR_3, depth 1:  0 
Stride in BB_9, DR_4, depth 1:  0 
Stride in BB_9, DR_3, depth 2:  0 
Stride in BB_9, DR_4, depth 2:  0 
Stride in BB_9, DR_3, depth 1:  0 
Stride in BB_9, DR_4, depth 1:  0 
Stride in BB_9, DR_3, depth 3:  0 
Stride in BB_9, DR_4, depth 3:  0 
Stride in BB_9, DR_3, depth 2:  0 
Stride in BB_9, DR_4, depth 2:  0 
Stride in BB_9, DR_3, depth 3:  0 
Stride in BB_9, DR_4, depth 3:  0 
ISL AST generated by ISL: 
for (int c1 = 0; c1 < P_15; c1 += 1) {
  S_8(c1);
  for (int c3 = 0; c3 < pretmp; c3 += 1)
    S_9(c1, c3);
}


Removing basic block 22
basic block 22, loop depth 0
 pred:      
goto <bb 20>;
 succ:       20



Updating SSA:
Registering new PHI nodes in block #2
Registering new PHI nodes in block #4
Registering new PHI nodes in block #19
Registering new PHI nodes in block #21
Registering new PHI nodes in block #5
Registering new PHI nodes in block #8
Registering new PHI nodes in block #9
Registering new PHI nodes in block #10
Registering new PHI nodes in block #14
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Registering new PHI nodes in block #13
Registering new PHI nodes in block #20
Registering new PHI nodes in block #18
Registering new PHI nodes in block #17
Registering new PHI nodes in block #3
Registering new PHI nodes in block #16
Registering new PHI nodes in block #11
Registering new PHI nodes in block #12
Registering new PHI nodes in block #15

DFA Statistics for virtual void DenseAllocator::Clear()

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             52        416b
DEF operands                             19        152b
VUSE operands                            15        120b
VDEF operands                             7         56b
PHI nodes                                10       1040b
PHI arguments                            18        864b
---------------------------------------------------------
Total memory used by DFA/SSA data                 2648b
---------------------------------------------------------

Average number of arguments per PHI node: 1.8 (max: 2)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_20 -> { .MEM_43 }
Incremental SSA update started at block: 2
Number of blocks in CFG: 23
Number of blocks to update: 5 ( 22%)
Affected blocks: 3 13 17 20 21


Applying pattern match.pd:491, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223

Updating SSA:
creating PHI node in block #24 for .MEM
creating PHI node in block #27 for .MEM
Registering new PHI nodes in block #0
Registering new PHI nodes in block #2
Updating SSA information for statement _15 = this_6(D)->D.36298._inputs;
Registering new PHI nodes in block #4
Updating SSA information for statement pretmp_2 = this_6(D)->D.36298._outputs;
Registering new PHI nodes in block #19
Registering new PHI nodes in block #23
Registering new PHI nodes in block #29
Registering new PHI nodes in block #27
Registering new PHI nodes in block #32
Updating SSA information for statement pretmp_17 = MEM[(struct vector * *)this_6(D) + 160B];
Updating SSA information for statement pretmp_21 = pretmp_17 + _18;
Updating SSA information for statement pretmp_53 = MEM[(struct sRequest * *)pretmp_21];
Updating SSA information for statement Cross_BB_scalar_dependence.1581[0] = pretmp_53;
Registering new PHI nodes in block #30
Registering new PHI nodes in block #28
Registering new PHI nodes in block #31
Registering new PHI nodes in block #25
Registering new PHI nodes in block #26
Registering new PHI nodes in block #24
Registering new PHI nodes in block #21
Registering new PHI nodes in block #5
Registering new PHI nodes in block #8
Updating SSA information for statement pretmp_46 = MEM[(struct vector * *)this_6(D) + 160B];
Updating SSA information for statement pretmp_49 = pretmp_46 + pretmp_48;
Updating SSA information for statement pretmp_50 = MEM[(struct sRequest * *)pretmp_49];
Updating SSA information for statement Cross_BB_scalar_dependence.1581[0] = pretmp_50;
Registering new PHI nodes in block #9
Updating SSA information for statement pretmp_1 = Cross_BB_scalar_dependence.1581[0];
Updating SSA information for statement _19->label = -1;
Registering new PHI nodes in block #10
Registering new PHI nodes in block #14
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Registering new PHI nodes in block #13
Registering new PHI nodes in block #20
Registering new PHI nodes in block #18
Registering new PHI nodes in block #17
Registering new PHI nodes in block #3
Registering new PHI nodes in block #16
Updating SSA information for statement _23 = MEM[(struct Allocator *)this_6(D)]._dirty;
Registering new PHI nodes in block #11
Updating SSA information for statement __val = -1;
Updating SSA information for statement std::vector<int>::_M_fill_assign (_26, _27, &__val);
Updating SSA information for statement _28 = MEM[(struct Allocator *)this_6(D)]._outputs;
Updating SSA information for statement __val = -1;
Updating SSA information for statement std::vector<int>::_M_fill_assign (_29, _30, &__val);
Updating SSA information for statement MEM[(struct Allocator *)this_6(D)]._dirty = 0;
Registering new PHI nodes in block #12
Registering new PHI nodes in block #15
Updating SSA information for statement return;

DFA Statistics for virtual void DenseAllocator::Clear()

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             66        528b
DEF operands                             28        224b
VUSE operands                            18        144b
VDEF operands                             8         64b
PHI nodes                                13       1352b
PHI arguments                            24       1152b
---------------------------------------------------------
Total memory used by DFA/SSA data                 3464b
---------------------------------------------------------

Average number of arguments per PHI node: 1.8 (max: 2)


Hash table statistics:
    var_infos:   size 61, 1 elements, 0.000000 collision/search ratio


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

pretmp_17 -> { pretmp_46 }
pretmp_21 -> { pretmp_49 }
pretmp_53 -> { pretmp_50 }
.MEM_54 -> { .MEM_40 }

Symbols to be put in SSA form
{ D.51904 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 33
Number of blocks to update: 31 ( 94%)
Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 23 24 25 26 27 28 29 30 31 32


Applying pattern match.pd:491, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223

Updating SSA:
creating PHI node in block #34 for .MEM
creating PHI node in block #37 for .MEM
Registering new PHI nodes in block #0
Registering new PHI nodes in block #2
Updating SSA information for statement _15 = this_6(D)->D.36298._inputs;
Registering new PHI nodes in block #4
Updating SSA information for statement pretmp_2 = this_6(D)->D.36298._outputs;
Registering new PHI nodes in block #19
Registering new PHI nodes in block #23
Registering new PHI nodes in block #29
Registering new PHI nodes in block #27
Registering new PHI nodes in block #32
Updating SSA information for statement pretmp_17 = MEM[(struct vector * *)this_6(D) + 160B];
Updating SSA information for statement pretmp_53 = MEM[(struct sRequest * *)pretmp_21];
Updating SSA information for statement Cross_BB_scalar_dependence.1581[0] = pretmp_53;
Registering new PHI nodes in block #33
Registering new PHI nodes in block #39
Registering new PHI nodes in block #37
Registering new PHI nodes in block #42
Updating SSA information for statement pretmp_62 = Cross_BB_scalar_dependence.1581[0];
Updating SSA information for statement _63 = pretmp_62 + _65;
Updating SSA information for statement _63->label = -1;
Registering new PHI nodes in block #40
Registering new PHI nodes in block #38
Registering new PHI nodes in block #41
Registering new PHI nodes in block #35
Registering new PHI nodes in block #36
Registering new PHI nodes in block #34
Registering new PHI nodes in block #30
Registering new PHI nodes in block #28
Registering new PHI nodes in block #31
Registering new PHI nodes in block #25
Registering new PHI nodes in block #26
Registering new PHI nodes in block #24
Registering new PHI nodes in block #21
Registering new PHI nodes in block #5
Registering new PHI nodes in block #8
Updating SSA information for statement pretmp_46 = MEM[(struct vector * *)this_6(D) + 160B];
Updating SSA information for statement pretmp_50 = MEM[(struct sRequest * *)pretmp_49];
Updating SSA information for statement Cross_BB_scalar_dependence.1581[0] = pretmp_50;
Registering new PHI nodes in block #9
Updating SSA information for statement pretmp_1 = Cross_BB_scalar_dependence.1581[0];
Updating SSA information for statement _19 = pretmp_1 + _11;
Updating SSA information for statement _19->label = -1;
Registering new PHI nodes in block #10
Registering new PHI nodes in block #14
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Registering new PHI nodes in block #13
Registering new PHI nodes in block #20
Registering new PHI nodes in block #18
Registering new PHI nodes in block #17
Registering new PHI nodes in block #3
Registering new PHI nodes in block #16
Updating SSA information for statement _23 = MEM[(struct Allocator *)this_6(D)]._dirty;
Registering new PHI nodes in block #11
Updating SSA information for statement __val = -1;
Updating SSA information for statement std::vector<int>::_M_fill_assign (_26, _27, &__val);
Updating SSA information for statement _28 = MEM[(struct Allocator *)this_6(D)]._outputs;
Updating SSA information for statement __val = -1;
Updating SSA information for statement std::vector<int>::_M_fill_assign (_29, _30, &__val);
Updating SSA information for statement MEM[(struct Allocator *)this_6(D)]._dirty = 0;
Registering new PHI nodes in block #12
Registering new PHI nodes in block #15
Updating SSA information for statement return;

DFA Statistics for virtual void DenseAllocator::Clear()

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             78        624b
DEF operands                             36        288b
VUSE operands                            20        160b
VDEF operands                             9         72b
PHI nodes                                16       1664b
PHI arguments                            30       1440b
---------------------------------------------------------
Total memory used by DFA/SSA data                 4248b
---------------------------------------------------------

Average number of arguments per PHI node: 1.9 (max: 2)


Hash table statistics:
    var_infos:   size 61, 1 elements, 0.000000 collision/search ratio


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

pretmp_62 -> { pretmp_1 }
_63 -> { _19 }
.MEM_66 -> { .MEM_12 }

Symbols to be put in SSA form
{ D.51904 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 43
Number of blocks to update: 41 ( 95%)
Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42



0 loops carried no dependency.
Merging blocks 3 and 16
Merging blocks 4 and 19
Merging blocks 12 and 15
Removing basic block 17
basic block 17, loop depth 0
 pred:      
goto <bb 3>;
 succ:       3


Removing basic block 18
basic block 18, loop depth 0
 pred:      
goto <bb 3>;
 succ:       3


Removing basic block 21
basic block 21, loop depth 0
 pred:      
 succ:       20


Removing basic block 25
basic block 25, loop depth 0
 pred:      
 succ:       24


Removing basic block 26
basic block 26, loop depth 0
 pred:      
goto <bb 24>;
 succ:       24


Merging blocks 27 and 32
Removing basic block 31
basic block 31, loop depth 0
 pred:      
 succ:       24


Merging blocks 34 and 30
Removing basic block 35
basic block 35, loop depth 1
 pred:      
 succ:       34


Removing basic block 36
basic block 36, loop depth 1
 pred:      
goto <bb 34>;
 succ:       34


Merging blocks 37 and 42
Removing basic block 41
basic block 41, loop depth 1
 pred:      
 succ:       34


Removing basic block 14
basic block 14, loop depth 1
 pred:       9
goto <bb 6>;
 succ:       6


Removing basic block 10
basic block 10, loop depth 2
 pred:       9
goto <bb 9>;
 succ:       9


Removing basic block 13
basic block 13, loop depth 0
 pred:       6
goto <bb 20>;
 succ:       20


Removing basic block 7
basic block 7, loop depth 1
 pred:       6
goto <bb 5>;
 succ:       5


Removing basic block 9
basic block 9, loop depth 2
 pred:       8
# j_38 = PHI <0(8)>
# DEBUG j => j_38
_9 = (long unsigned int) j_38;
# DEBUG D#536 => &this_6(D)->_request
# DEBUG D#36 => D#536
# DEBUG __n => (long unsigned int) i_36
# DEBUG this => D#36
# DEBUG __n => _9
# DEBUG this => D#37
_11 = _9 * 16;
pretmp_1 = Cross_BB_scalar_dependence.1581[0];
_19 = pretmp_1 + _11;
_19->label = -1;
j_13 = j_38 + 1;
# DEBUG j => j_13
# DEBUG j => j_13
if (pretmp_2 <= j_13)
 succ:      


Removing basic block 6
basic block 6, loop depth 1
 pred:       5
i_14 = i_36 + 1;
# DEBUG i => i_14
# DEBUG i => i_14
if (i_14 >= _15)
 succ:      


Removing basic block 8
basic block 8, loop depth 1
 pred:       5
pretmp_25 = (long unsigned int) i_36;
pretmp_46 = MEM[(struct vector * *)this_6(D) + 160B];
pretmp_48 = pretmp_25 * 24;
pretmp_49 = pretmp_46 + pretmp_48;
pretmp_50 = MEM[(struct sRequest * *)pretmp_49];
Cross_BB_scalar_dependence.1581[0] = pretmp_50;
 succ:      


Removing basic block 5
basic block 5, loop depth 1
 pred:       4
# i_36 = PHI <0(4)>
# DEBUG i => i_36
# DEBUG j => 0
if (pretmp_2 <= 0)
 succ:      


Merging blocks 4 and 23
Merging blocks 24 and 20
Merging blocks 27 and 33
Merging blocks 37 and 40
fix_loop_structure: removing loop 2
fix_loop_structure: removing loop 1
Analyzing # of iterations of loop 3
  exit condition [0, + , 1](no_overflow) < (signed long) _15 + -1
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if _15 <= 0
    # of iterations (unsigned long) ((signed long) _15 + -1), bounded by 9223372036854775806
Analyzing # of iterations of loop 3
  exit condition [0, + , 1](no_overflow) < (signed long) _15 + -1
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if _15 <= 0
    # of iterations (unsigned long) ((signed long) _15 + -1), bounded by 9223372036854775806
Analyzing # of iterations of loop 3
  exit condition [0, + , 1](no_overflow) < (signed long) _15 + -1
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if _15 <= 0
    # of iterations (unsigned long) ((signed long) _15 + -1), bounded by 9223372036854775806
Statement (exit)if (graphite_IV.1582_51 < _47)
 is executed at most (unsigned long) ((signed long) _15 + -1) (bounded by 9223372036854775806) + 1 times in loop 3.
Induction variable (signed long) 1 + 1 * iteration does not wrap in statement graphite_IV.1582_10 = graphite_IV.1582_51 + 1;
 in loop 3.
Statement graphite_IV.1582_10 = graphite_IV.1582_51 + 1;
 is executed at most 9223372036854775806 (bounded by 9223372036854775806) + 1 times in loop 3.
Analyzing # of iterations of loop 4
  exit condition [0, + , 1](no_overflow) < (signed long) pretmp_2 + -1
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if pretmp_2 <= 0
    # of iterations (unsigned long) ((signed long) pretmp_2 + -1), bounded by 9223372036854775806
Analyzing # of iterations of loop 4
  exit condition [0, + , 1](no_overflow) < (signed long) pretmp_2 + -1
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if pretmp_2 <= 0
    # of iterations (unsigned long) ((signed long) pretmp_2 + -1), bounded by 9223372036854775806
Analyzing # of iterations of loop 4
  exit condition [0, + , 1](no_overflow) < (signed long) pretmp_2 + -1
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if pretmp_2 <= 0
    # of iterations (unsigned long) ((signed long) pretmp_2 + -1), bounded by 9223372036854775806
Statement (exit)if (graphite_IV.1583_60 < _59)
 is executed at most pretmp_2 <= 0 ? 0 : (unsigned long) ((signed long) pretmp_2 + -1) (bounded by 9223372036854775806) + 1 times in loop 4.
Induction variable (signed long) 1 + 1 * iteration does not wrap in statement graphite_IV.1583_61 = graphite_IV.1583_60 + 1;
 in loop 4.
Statement graphite_IV.1583_61 = graphite_IV.1583_60 + 1;
 is executed at most 9223372036854775806 (bounded by 9223372036854775806) + 1 times in loop 4.
Predictions for bb 2
  DS theory heuristics: 27.0%
  first match heuristics (ignored): 27.0%
  combined heuristics: 27.0%
  opcode values positive (on trees) heuristics: 27.0%
Predictions for bb 3
  DS theory heuristics: 39.0%
  first match heuristics (ignored): 29.0%
  combined heuristics: 39.0%
  early return (on trees) heuristics: 61.0%
  call heuristics: 29.0%
Predictions for bb 4
  no prediction heuristics: 50.0%
  combined heuristics: 50.0%
1 edges in bb 5 predicted to even probabilities
Predictions for bb 6
  no prediction heuristics: 50.0%
  combined heuristics: 50.0%
1 edges in bb 7 predicted to even probabilities
Predictions for bb 8
  DS theory heuristics (ignored): 91.0%
  first match heuristics: 91.0%
  combined heuristics: 91.0%
  loop exit heuristics: 91.0%
1 edges in bb 9 predicted to even probabilities
Predictions for bb 10
  DS theory heuristics (ignored): 91.0%
  first match heuristics: 91.0%
  combined heuristics: 91.0%
  loop exit heuristics: 91.0%
1 edges in bb 11 predicted to even probabilities
1 edges in bb 12 predicted to even probabilities
1 edges in bb 13 predicted to even probabilities
1 edges in bb 14 predicted to even probabilities
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # DEBUG i => 0
    # DEBUG i => 0
    # VUSE <.MEM_5(D)>
    _15 = this_6(D)->D.36298._inputs;
    if (_15 <= 0)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 bb_12 }, succs = {bb_13 bb_14 })
  {
    <bb 3>:
    # .MEM_52 = PHI <.MEM_5(D)(2), .MEM_55(12)>
    # DEBUG D#1085 => &this_6(D)->D.36298
    # DEBUG this => D#1085
    # VUSE <.MEM_52>
    _23 = MEM[(struct Allocator *)this_6(D)]._dirty;
    if (_23 != 0)
      goto <bb 13>;
    else
      goto <bb 14>;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 bb_12 })
  {
    <bb 4>:
    # VUSE <.MEM_5(D)>
    pretmp_2 = this_6(D)->D.36298._outputs;
    _4 = _15 > 0;
    if (_4 != 0)
      goto <bb 5>;
    else
      goto <bb 12>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_6 })
  {
    <bb 5>:
    _39 = (signed long) _15;
    _47 = _39 + -1;

  }
  bb_12 (preds = {bb_10 bb_4 }, succs = {bb_3 })
  {
    <bb 12>:
    # .MEM_55 = PHI <.MEM_67(10), .MEM_5(D)(4)>
    goto <bb 3>;

  }
  bb_13 (preds = {bb_3 }, succs = {bb_14 })
  {
    <bb 13>:
    # DEBUG this => D#1085
    _26 = &MEM[(struct Allocator *)this_6(D)]._inmatch;
    # DEBUG this => _26
    # DEBUG __first => _15
    # DEBUG __last => -1
    # DEBUG this => _26
    # DEBUG __n => _15
    # .MEM_24 = VDEF <.MEM_52>
    __val = -1;
    # DEBUG __val => __val
    _27 = (long unsigned int) _15;
    # .MEM_31 = VDEF <.MEM_24>
    std::vector<int>::_M_fill_assign (_26, _27, &__val);
    # VUSE <.MEM_31>
    _28 = MEM[(struct Allocator *)this_6(D)]._outputs;
    _29 = &MEM[(struct Allocator *)this_6(D)]._outmatch;
    # DEBUG this => _29
    # DEBUG __first => _28
    # DEBUG __last => -1
    # DEBUG this => _29
    # DEBUG __n => _28
    # .MEM_32 = VDEF <.MEM_31>
    __val = -1;
    # DEBUG __val => __val
    _30 = (long unsigned int) _28;
    # .MEM_33 = VDEF <.MEM_32>
    std::vector<int>::_M_fill_assign (_29, _30, &__val);
    # .MEM_34 = VDEF <.MEM_33>
    MEM[(struct Allocator *)this_6(D)]._dirty = 0;

  }
  bb_14 (preds = {bb_13 bb_3 }, succs = {bb_1 })
  {
    <bb 14>:
    # .MEM_16 = PHI <.MEM_34(13), .MEM_52(3)>
    # VUSE <.MEM_16>
    return;

  }
  loop_3 (header = 6, latch = 11, niter = (unsigned long) ((signed long) _15 + -1), upper_bound = 9223372036854775806)
  {
    bb_6 (preds = {bb_5 bb_11 }, succs = {bb_7 bb_10 })
    {
      <bb 6>:
      # graphite_IV.1582_51 = PHI <0(5), graphite_IV.1582_10(11)>
      # .MEM_56 = PHI <.MEM_5(D)(5), .MEM_67(11)>
      # VUSE <.MEM_56>
      pretmp_17 = MEM[(struct vector * *)this_6(D) + 160B];
      _22 = (long unsigned int) graphite_IV.1582_51;
      _18 = _22 * 24;
      pretmp_21 = pretmp_17 + _18;
      # VUSE <.MEM_56>
      pretmp_53 = MEM[(struct sRequest * *)pretmp_21];
      # .MEM_54 = VDEF <.MEM_56>
      Cross_BB_scalar_dependence.1581[0] = pretmp_53;
      _57 = pretmp_2 > 0;
      if (_57 != 0)
        goto <bb 7>;
      else
        goto <bb 10>;

    }
    bb_7 (preds = {bb_6 }, succs = {bb_8 })
    {
      <bb 7>:
      _58 = (signed long) pretmp_2;
      _59 = _58 + -1;

    }
    bb_10 (preds = {bb_8 bb_6 }, succs = {bb_11 bb_12 })
    {
      <bb 10>:
      # .MEM_67 = PHI <.MEM_66(8), .MEM_54(6)>
      graphite_IV.1582_10 = graphite_IV.1582_51 + 1;
      if (graphite_IV.1582_51 < _47)
        goto <bb 11>;
      else
        goto <bb 12>;

    }
    bb_11 (preds = {bb_10 }, succs = {bb_6 })
    {
      <bb 11>:
      goto <bb 6>;

    }
    loop_4 (header = 8, latch = 9, niter = pretmp_2 > 0 ? (unsigned long) ((signed long) pretmp_2 + -1) : 0, upper_bound = 9223372036854775806)
    {
      bb_8 (preds = {bb_7 bb_9 }, succs = {bb_9 bb_10 })
      {
        <bb 8>:
        # graphite_IV.1583_60 = PHI <0(7), graphite_IV.1583_61(9)>
        # .MEM_68 = PHI <.MEM_54(7), .MEM_66(9)>
        # DEBUG j => NULL
        # DEBUG D#536 => NULL
        # DEBUG D#36 => NULL
        # DEBUG __n => NULL
        # DEBUG this => NULL
        # DEBUG __n => NULL
        # DEBUG this => NULL
        # VUSE <.MEM_68>
        pretmp_62 = Cross_BB_scalar_dependence.1581[0];
        _64 = (long unsigned int) graphite_IV.1583_60;
        _65 = _64 * 16;
        _63 = pretmp_62 + _65;
        # .MEM_66 = VDEF <.MEM_68>
        _63->label = -1;
        # DEBUG j => NULL
        # DEBUG j => NULL
        graphite_IV.1583_61 = graphite_IV.1583_60 + 1;
        if (graphite_IV.1583_60 < _59)
          goto <bb 9>;
        else
          goto <bb 10>;

      }
      bb_9 (preds = {bb_8 }, succs = {bb_8 })
      {
        <bb 9>:
        goto <bb 8>;

      }
    }
  }
}

Pass statistics:
----------------

virtual void DenseAllocator::Clear() (struct DenseAllocatorD.35479 * const thisD.41080)
{
  signed long graphite_IV.1583D.65785;
  signed long graphite_IV.1582D.65784;
  struct sRequestD.35378 & D.65783;
  struct sRequestD.35378 * D.65782;
  struct sRequestD.35378 * Cross_BB_scalar_dependence.1581D.65781[1];
  struct sRequestD.35378 * D.65780;
  struct vectorD.35482 & D.65779;
  struct vectorD.35482 * D.65778;
  intD.9 __valD.65766;
  intD.9 __valD.65773;
  intD.9 jD.41083;
  intD.9 iD.41082;
  const intD.9 pretmp_2;
  boolD.2757 _4;
  intD.9 _15;
  struct vectorD.35482 * pretmp_17;
  long unsigned intD.14 _18;
  struct vectorD.35482 & pretmp_21;
  long unsigned intD.14 _22;
  boolD.2757 _23;
  struct vectorD.34569 * _26;
  long unsigned intD.14 _27;
  intD.9 _28;
  struct vectorD.34569 * _29;
  long unsigned intD.14 _30;
  signed long _39;
  signed long _47;
  struct sRequestD.35378 * pretmp_53;
  boolD.2757 _57;
  signed long _58;
  signed long _59;
  struct sRequestD.35378 * pretmp_62;
  struct sRequestD.35378 & _63;
  long unsigned intD.14 _64;
  long unsigned intD.14 _65;

;;   basic block 2, loop depth 0, count 0, freq 444, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG iD.41082 => 0
  # DEBUG iD.41082 => 0
  # VUSE <.MEM_5(D)>
  _15 = this_6(D)->D.36298._inputsD.34629;
  if (_15 <= 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [27.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [73.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 444, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [27.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU)
  # .MEM_52 = PHI <.MEM_5(D)(2), .MEM_55(12)>
  # DEBUG D#1085ptD.0 => &this_6(D)->D.36298
  # DEBUG thisD.57740 => D#1085ptD.0
  # VUSE <.MEM_52>
  _23 = MEM[(struct AllocatorD.34627 *)this_6(D)]._dirtyD.34631;
  if (_23 != 0)
    goto <bb 13>;
  else
    goto <bb 14>;
;;    succ:       13 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 324, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       2 [73.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_5(D)>
  pretmp_2 = this_6(D)->D.36298._outputsD.34630;
  _4 = _15 > 0;
  if (_4 != 0)
    goto <bb 5>;
  else
    goto <bb 12>;
;;    succ:       5 [50.0%]  (TRUE_VALUE)
;;                12 [50.0%]  (FALSE_VALUE)

;;   basic block 5, loop depth 0, count 0, freq 162, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [50.0%]  (TRUE_VALUE)
  _39 = (signed long) _15;
  _47 = _39 + -1;
;;    succ:       6 [100.0%]  (FALLTHRU)

;;   basic block 6, loop depth 1, count 0, freq 1800, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [100.0%]  (FALLTHRU)
;;                11 [100.0%]  (FALLTHRU,DFS_BACK)
  # graphite_IV.1582_51 = PHI <0(5), graphite_IV.1582_10(11)>
  # .MEM_56 = PHI <.MEM_5(D)(5), .MEM_67(11)>
  # VUSE <.MEM_56>
  # PT = nonlocal escaped 
  pretmp_17 = MEM[(struct vectorD.35482 * *)this_6(D) + 160B];
  _22 = (long unsigned intD.14) graphite_IV.1582_51;
  _18 = _22 * 24;
  # PT = nonlocal escaped 
  pretmp_21 = pretmp_17 + _18;
  # VUSE <.MEM_56>
  # PT = nonlocal escaped 
  pretmp_53 = MEM[(struct sRequestD.35378 * *)pretmp_21];
  # .MEM_54 = VDEF <.MEM_56>
  Cross_BB_scalar_dependence.1581D.65781[0] = pretmp_53;
  _57 = pretmp_2 > 0;
  if (_57 != 0)
    goto <bb 7>;
  else
    goto <bb 10>;
;;    succ:       7 [50.0%]  (TRUE_VALUE)
;;                10 [50.0%]  (FALSE_VALUE)

;;   basic block 7, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [50.0%]  (TRUE_VALUE)
  _58 = (signed long) pretmp_2;
  _59 = _58 + -1;
;;    succ:       8 [100.0%]  (FALLTHRU)

;;   basic block 8, loop depth 2, count 0, freq 10000, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU)
;;                9 [100.0%]  (FALLTHRU,DFS_BACK)
  # graphite_IV.1583_60 = PHI <0(7), graphite_IV.1583_61(9)>
  # .MEM_68 = PHI <.MEM_54(7), .MEM_66(9)>
  # DEBUG jD.41083 => NULL
  # DEBUG D#536ptD.0 => NULL
  # DEBUG D#36ptD.0 => NULL
  # DEBUG __nD.57737 => NULL
  # DEBUG thisD.57738 => NULL
  # DEBUG __nD.57733 => NULL
  # DEBUG thisD.57734 => NULL
  # VUSE <.MEM_68>
  pretmp_62 = Cross_BB_scalar_dependence.1581D.65781[0];
  _64 = (long unsigned intD.14) graphite_IV.1583_60;
  _65 = _64 * 16;
  # PT = nonlocal escaped 
  _63 = pretmp_62 + _65;
  # .MEM_66 = VDEF <.MEM_68>
  _63->labelD.35381 = -1;
  # DEBUG jD.41083 => NULL
  # DEBUG jD.41083 => NULL
  graphite_IV.1583_61 = graphite_IV.1583_60 + 1;
  if (graphite_IV.1583_60 < _59)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [91.0%]  (TRUE_VALUE)
;;                10 [9.0%]  (FALSE_VALUE,LOOP_EXIT)

;;   basic block 9, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [91.0%]  (TRUE_VALUE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,DFS_BACK)

;;   basic block 10, loop depth 1, count 0, freq 1800, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       8 [9.0%]  (FALSE_VALUE,LOOP_EXIT)
;;                6 [50.0%]  (FALSE_VALUE)
  # .MEM_67 = PHI <.MEM_66(8), .MEM_54(6)>
  graphite_IV.1582_10 = graphite_IV.1582_51 + 1;
  if (graphite_IV.1582_51 < _47)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [91.0%]  (TRUE_VALUE)
;;                12 [9.0%]  (FALSE_VALUE,LOOP_EXIT)

;;   basic block 11, loop depth 1, count 0, freq 1638, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [91.0%]  (TRUE_VALUE)
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU,DFS_BACK)

;;   basic block 12, loop depth 0, count 0, freq 324, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       10 [9.0%]  (FALSE_VALUE,LOOP_EXIT)
;;                4 [50.0%]  (FALSE_VALUE)
  # .MEM_55 = PHI <.MEM_67(10), .MEM_5(D)(4)>
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU)

;;   basic block 13, loop depth 0, count 0, freq 173, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       3 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.65761 => D#1085ptD.0
  # PT = nonlocal 
  _26 = &MEM[(struct AllocatorD.34627 *)this_6(D)]._inmatchD.35376;
  # DEBUG thisD.65764 => _26
  # DEBUG __firstD.65763 => _15
  # DEBUG __lastD.65762 => -1
  # DEBUG thisD.65768 => _26
  # DEBUG __nD.65767 => _15
  # .MEM_24 = VDEF <.MEM_52>
  __valD.65766 = -1;
  # DEBUG __valD.65766 => __valD.65766
  # RANGE [0, 18446744073709551615]
  _27 = (long unsigned intD.14) _15;
  # .MEM_31 = VDEF <.MEM_24>
  # USE = nonlocal null { D.65766 D.65773 } (escaped)
  # CLB = nonlocal null { D.65766 D.65773 } (escaped)
  _ZNSt6vectorIiSaIiEE14_M_fill_assignEmRKiD.35237 (_26, _27, &__valD.65766);
  # VUSE <.MEM_31>
  _28 = MEM[(struct AllocatorD.34627 *)this_6(D)]._outputsD.34630;
  # PT = nonlocal 
  _29 = &MEM[(struct AllocatorD.34627 *)this_6(D)]._outmatchD.35377;
  # DEBUG thisD.65771 => _29
  # DEBUG __firstD.65770 => _28
  # DEBUG __lastD.65769 => -1
  # DEBUG thisD.65775 => _29
  # DEBUG __nD.65774 => _28
  # .MEM_32 = VDEF <.MEM_31>
  __valD.65773 = -1;
  # DEBUG __valD.65773 => __valD.65773
  # RANGE ~[2147483648, 18446744071562067967]
  _30 = (long unsigned intD.14) _28;
  # .MEM_33 = VDEF <.MEM_32>
  # USE = nonlocal null { D.65766 D.65773 } (escaped)
  # CLB = nonlocal null { D.65766 D.65773 } (escaped)
  _ZNSt6vectorIiSaIiEE14_M_fill_assignEmRKiD.35237 (_29, _30, &__valD.65773);
  # .MEM_34 = VDEF <.MEM_33>
  MEM[(struct AllocatorD.34627 *)this_6(D)]._dirtyD.34631 = 0;
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 444, maybe hot
;;    prev block 13, next block 1, flags: (NEW, REACHABLE)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                3 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_16 = PHI <.MEM_34(13), .MEM_52(3)>
  # VUSE <.MEM_16>
  return;
;;    succ:       EXIT [100.0%] 

}



;; Function void std::vector<_Tp, _Alloc>::_M_fill_insert(std::vector<_Tp, _Alloc>::iterator, std::vector<_Tp, _Alloc>::size_type, const value_type&) [with _Tp = Allocator::sRequest; _Alloc = std::allocator<Allocator::sRequest>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<Allocator::sRequest*, std::vector<Allocator::sRequest> >; typename std::_Vector_base<_Tp, _Alloc>::pointer = Allocator::sRequest*; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::value_type = Allocator::sRequest] (_ZNSt6vectorIN9Allocator8sRequestESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEmRKS1_, funcdef_no=2141, decl_uid=40967, cgraph_uid=811, symbol_order=812)


Pass statistics:
----------------

void std::vector<_Tp, _Alloc>::_M_fill_insert(std::vector<_Tp, _Alloc>::iterator, std::vector<_Tp, _Alloc>::size_type, const value_type&) [with _Tp = Allocator::sRequest; _Alloc = std::allocator<Allocator::sRequest>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<Allocator::sRequest*, std::vector<Allocator::sRequest> >; typename std::_Vector_base<_Tp, _Alloc>::pointer = Allocator::sRequest*; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::value_type = Allocator::sRequest] (struct vectorD.35482 * const thisD.40968, struct iteratorD.40612 __positionD.40969, size_typeD.40620 __nD.40970, const struct value_typeD.40607 & __xD.40971)
{
  const long unsigned intD.14 D.65848;
  const size_typeD.40620 __lenD.65842;
  size_typeD.40620 D.65847;
  size_typeD.40620 __nD.65840;
  struct sRequestD.35378 * D.65838;
  const ptrdiff_tD.2819 _NumD.65828;
  struct sRequestD.35378 * D.65829;
  intD.9 __x_copy$out_priD.59433;
  intD.9 __x_copy$in_priD.59432;
  intD.9 __x_copy$labelD.59431;
  intD.9 __x_copy$portD.59430;
  struct sRequestD.35378 * const __positionD.59429;
  struct sRequestD.35378 * __firstD.59399;
  const ptrdiff_tD.2819 _NumD.59393;
  const ptrdiff_tD.2819 _NumD.59354;
  struct sRequestD.35378 * __firstD.59284;
  long unsigned intD.14 __nD.59285;
  struct sRequestD.35378 * __firstD.59237;
  const ptrdiff_tD.2819 _NumD.59233;
  struct sRequestD.35378 * __firstD.59188;
  struct sRequestD.35378 * __new_finishD.45191;
  const size_typeD.40620 __elems_afterD.45155;
  struct sRequestD.35378 * _5;
  long intD.12 _6;
  long intD.12 _8;
  long intD.12 _9;
  long intD.12 _10;
  long unsigned intD.14 _11;
  struct sRequestD.35378 * const _17;
  long unsigned intD.14 _19;
  difference_typeD.43543 _22;
  long intD.12 _23;
  long unsigned intD.14 _25;
  long intD.12 _27;
  struct sRequestD.35378 * pretmp_31;
  long unsigned intD.14 _43;
  sizetype _44;
  struct sRequestD.35378 * _45;
  struct sRequestD.35378 * _48;
  long unsigned intD.14 _50;
  struct sRequestD.35378 * _53;
  long intD.12 _54;
  long intD.12 __first.27_56;
  struct sRequestD.35378 * _64;
  long unsigned intD.14 _68;
  long intD.12 _75;
  long unsigned intD.14 _77;
  struct sRequestD.35378 * _79;
  long unsigned intD.14 _84;
  long unsigned intD.14 _87;
  long unsigned intD.14 pretmp_92;
  long unsigned intD.14 pretmp_116;
  long unsigned intD.14 prephitmp_117;
  long intD.12 _118;
  long unsigned intD.14 _120;
  sizetype _121;
  struct sRequestD.35378 * _122;
  struct sRequestD.35378 * _126;
  struct sRequestD.35378 * iftmp.24_127;
  boolD.2757 _128;
  long intD.12 _130;
  long intD.12 _131;
  long intD.12 _132;
  long unsigned intD.14 _134;
  long intD.12 prephitmp_135;
  long unsigned intD.14 _147;
  long intD.12 prephitmp_151;
  long intD.12 pretmp_152;
  boolD.2757 _155;
  long intD.12 _156;
  long intD.12 _157;
  long intD.12 pretmp_158;
  long intD.12 pretmp_160;
  struct sRequestD.35378 * prephitmp_161;
  struct sRequestD.35378 * pretmp_162;
  struct sRequestD.35378 * prephitmp_163;
  struct sRequestD.35378 * pretmp_164;
  long intD.12 _165;
  long intD.12 _166;
  boolD.2757 _167;
  long intD.12 _168;
  long intD.12 _171;
  long intD.12 _172;
  long intD.12 _173;
  long unsigned intD.14 _175;
  long unsigned intD.14 prephitmp_177;
  long unsigned intD.14 pretmp_178;
  long unsigned intD.14 prephitmp_179;
  struct sRequestD.35378 * pretmp_180;
  struct sRequestD.35378 * prephitmp_181;
  long unsigned intD.14 pretmp_182;
  long unsigned intD.14 prephitmp_183;
  struct sRequestD.35378 * pretmp_187;
  struct sRequestD.35378 * prephitmp_188;

;;   basic block 2, loop depth 0, count 0, freq 4156, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#1091ptD.0 => MEM[(struct __normal_iteratorD.40613 *)&__positionD.40969]
  # DEBUG __positionD.59429 => D#1091ptD.0
  if (__n_2(D) != 0)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 3421, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_186 = PHI <.MEM_3(D)(2), .MEM_12(10), .MEM_13(13), .MEM_65(23), .MEM_169(26)>
  goto <bb 45>;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 2535, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal 
  __position_16 = MEM[(struct __normal_iteratorD.40613 *)&__positionD.40969];
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _5 = this_4(D)->D.41044._M_implD.40535._M_end_of_storageD.40539;
  _6 = (long intD.12) _5;
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  __first_7 = this_4(D)->D.41044._M_implD.40535._M_finishD.40538;
  _8 = (long intD.12) __first_7;
  _9 = _6 - _8;
  # RANGE [-576460752303423488, 576460752303423487]
  _10 = _9 /[ex] 16;
  # RANGE ~[576460752303423488, 17870283321406128127]
  _11 = (long unsigned intD.14) _10;
  if (__n_2(D) <= _11)
    goto <bb 5>;
  else
    goto <bb 28>;
;;    succ:       5 [71.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [29.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 1800, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [71.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  __x_copy$port_115 = MEM[(const struct sRequestD.35378 &)__x_21(D)];
  # DEBUG __x_copy$portD.59430 => __x_copy$port_115
  # VUSE <.MEM_3(D)>
  __x_copy$label_112 = MEM[(const struct sRequestD.35378 &)__x_21(D) + 4];
  # DEBUG __x_copy$labelD.59431 => __x_copy$label_112
  # VUSE <.MEM_3(D)>
  __x_copy$in_pri_110 = MEM[(const struct sRequestD.35378 &)__x_21(D) + 8];
  # DEBUG __x_copy$in_priD.59432 => __x_copy$in_pri_110
  # VUSE <.MEM_3(D)>
  __x_copy$out_pri_40 = MEM[(const struct sRequestD.35378 &)__x_21(D) + 12];
  # DEBUG __x_copy$out_priD.59433 => __x_copy$out_pri_40
  # DEBUG thisD.59183 => this_4(D)
  # DEBUG D#104ptD.0 => &this_4(D)->D.41044._M_implD.40535._M_finishD.40538
  # DEBUG thisD.59185 => NULL
  # DEBUG __iD.59184 => D#104ptD.0
  # DEBUG __lhsD.59180 => &D.45156
  # DEBUG __rhsD.59181 => &__positionD.40969
  # DEBUG thisD.53161 => &D.45156
  # DEBUG thisD.53159 => &__positionD.40969
  _27 = (long intD.12) __position_16;
  _23 = _8 - _27;
  # RANGE [-576460752303423488, 576460752303423487]
  _22 = _23 /[ex] 16;
  # RANGE ~[576460752303423488, 17870283321406128127]
  __elems_after_39 = (const size_typeD.40620) _22;
  # DEBUG __elems_afterD.45155 => __elems_after_39
  # DEBUG __old_finishD.45163 => __first_7
  if (__n_2(D) < __elems_after_39)
    goto <bb 6>;
  else
    goto <bb 15>;
;;    succ:       6 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#612ptD.0 => &this_4(D)->D.41044
  # DEBUG thisD.59235 => D#612ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _43 = __n_2(D) * 16;
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _44 = -_43;
  # PT = nonlocal escaped 
  _45 = __first_7 + _44;
  # DEBUG __firstD.59200 => _45
  # DEBUG __lastD.59201 => __first_7
  # DEBUG __resultD.59202 => __first_7
  # DEBUG __allocD.59203 => D#605ptD.0
  # DEBUG D#604ptD.0 => D#605ptD.0
  # DEBUG D#603ptD.0 => D#604ptD.0
  # DEBUG __firstD.59207 => _45
  # DEBUG __lastD.59206 => __first_7
  # DEBUG __resultD.59205 => __first_7
  # DEBUG D.59204 => D#603ptD.0
  # DEBUG __firstD.59210 => _45
  # DEBUG __lastD.59209 => __first_7
  # DEBUG __resultD.59208 => __first_7
  # DEBUG __assignableD.59213 => 1
  # DEBUG __firstD.59216 => _45
  # DEBUG __lastD.59215 => __first_7
  # DEBUG __resultD.59214 => __first_7
  # DEBUG __firstD.59219 => _45
  # DEBUG __lastD.59218 => __first_7
  # DEBUG __resultD.59217 => __first_7
  # DEBUG __itD.58931 => __first_7
  # DEBUG __itD.54893 => __first_7
  # DEBUG __itD.58929 => _45
  # DEBUG __itD.54893 => _45
  # DEBUG __firstD.59222 => _45
  # DEBUG __lastD.59221 => __first_7
  # DEBUG __resultD.59220 => __first_7
  # DEBUG __itD.58911 => __first_7
  # DEBUG __itD.54882 => __first_7
  # DEBUG __itD.58909 => __first_7
  # DEBUG __itD.54882 => __first_7
  # DEBUG __itD.58907 => _45
  # DEBUG __itD.54882 => _45
  # DEBUG __firstD.59225 => _45
  # DEBUG __lastD.59224 => __first_7
  # DEBUG __resultD.59223 => __first_7
  # DEBUG __simpleD.59229 => 1
  # DEBUG __firstD.59232 => _45
  # DEBUG __lastD.59231 => __first_7
  # DEBUG __resultD.59230 => __first_7
  __first.27_56 = (long intD.12) _45;
  _54 = _8 - __first.27_56;
  # RANGE [-576460752303423488, 576460752303423487]
  _Num_52 = _54 /[ex] 16;
  # DEBUG _NumD.59233 => _Num_52
  if (_Num_52 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 261, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _50 = (long unsigned intD.14) _54;
  # .MEM_109 = VDEF <.MEM_3(D)>
  # USE = nonlocal null { D.65851 } (escaped heap)
  # CLB = nonlocal null { D.65851 } (escaped heap)
  memmoveD.995 (__first_7, _45, _50);
  # VUSE <.MEM_109>
  pretmp_187 = this_4(D)->D.41044._M_implD.40535._M_finishD.40538;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_14 = PHI <.MEM_3(D)(6), .MEM_109(7)>
  # PT = nonlocal escaped 
  # prephitmp_188 = PHI <__first_7(6), pretmp_187(7)>
  # PT = nonlocal escaped 
  _48 = prephitmp_188 + _43;
  # .MEM_49 = VDEF <.MEM_14>
  this_4(D)->D.41044._M_implD.40535._M_finishD.40538 = _48;
  # DEBUG thisD.59198 => &__positionD.40969
  # DEBUG __firstD.65812 => D#1091ptD.0
  # DEBUG __lastD.65813 => _45
  # DEBUG __resultD.65814 => __first_7
  # DEBUG __itD.57421 => _45
  # DEBUG __itD.54893 => _45
  # DEBUG __itD.57419 => D#1091ptD.0
  # DEBUG __itD.54893 => D#1091ptD.0
  # DEBUG __firstD.65817 => D#1091ptD.0
  # DEBUG __lastD.65816 => _45
  # DEBUG __resultD.65815 => __first_7
  # DEBUG __itD.57401 => __first_7
  # DEBUG __itD.54882 => __first_7
  # DEBUG __itD.57399 => _45
  # DEBUG __itD.54882 => _45
  # DEBUG __itD.57397 => D#1091ptD.0
  # DEBUG __itD.54882 => D#1091ptD.0
  # DEBUG __firstD.65820 => D#1091ptD.0
  # DEBUG __lastD.65819 => _45
  # DEBUG __resultD.65818 => __first_7
  # DEBUG __simpleD.65824 => 1
  # DEBUG __firstD.65827 => D#1091ptD.0
  # DEBUG __lastD.65826 => _45
  # DEBUG __resultD.65825 => __first_7
  _118 = __first.27_56 - _27;
  # RANGE [-576460752303423488, 576460752303423487]
  _Num_119 = _118 /[ex] 16;
  # DEBUG _NumD.65828 => _Num_119
  if (_Num_119 != 0)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _120 = (long unsigned intD.14) _118;
  # RANGE [0, 18446744073709551615]
  _121 = -_120;
  # PT = nonlocal escaped 
  _122 = __first_7 + _121;
  # .MEM_149 = VDEF <.MEM_49>
  # USE = nonlocal null { D.65851 } (escaped heap)
  # CLB = nonlocal null { D.65851 } (escaped heap)
  memmoveD.995 (_122, __position_16, _120);
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_12 = PHI <.MEM_49(8), .MEM_149(9)>
  # DEBUG thisD.59196 => &__positionD.40969
  # PT = nonlocal 
  _53 = __position_16 + _43;
  # DEBUG thisD.59194 => &__positionD.40969
  # DEBUG __firstD.59188 => D#1091ptD.0
  # DEBUG __lastD.59189 => _53
  # DEBUG __valueD.59190 => &__x_copyD.45153
  # DEBUG __firstD.59193 => D#1091ptD.0
  if (__position_16 == _53)
    goto <bb 3>;
  else
    goto <bb 11>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  # __position_123 = PHI <__position_16(11), __position_15(14)>
  # .MEM_93 = PHI <.MEM_12(11), .MEM_59(14)>
  # DEBUG __firstD.59193 => __position_123
  # .MEM_113 = VDEF <.MEM_93>
  MEM[(struct sRequestD.35378 *)__position_123] = __x_copy$port_115;
  # .MEM_62 = VDEF <.MEM_113>
  MEM[(struct sRequestD.35378 *)__position_123 + 4B] = __x_copy$label_112;
  # .MEM_61 = VDEF <.MEM_62>
  MEM[(struct sRequestD.35378 *)__position_123 + 8B] = __x_copy$in_pri_110;
  # .MEM_59 = VDEF <.MEM_61>
  MEM[(struct sRequestD.35378 *)__position_123 + 12B] = __x_copy$out_pri_40;
  # PT = nonlocal 
  __position_15 = __position_123 + 16;
  # DEBUG __firstD.59193 => __position_15
  # DEBUG __firstD.59193 => __position_15
  if (__position_15 == _53)
    goto <bb 13>;
  else
    goto <bb 14>;
;;    succ:       13 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_13 = PHI <.MEM_59(12)>
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       5 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#613ptD.0 => &this_4(D)->D.41044
  # DEBUG thisD.59304 => D#613ptD.0
  # RANGE [0, 18446744073709551615]
  __n_58 = __n_2(D) - __elems_after_39;
  # DEBUG __firstD.59284 => __first_7
  # DEBUG __nD.59285 => __n_58
  # DEBUG __xD.59286 => &__x_copyD.45153
  # DEBUG __niterD.59302 => __n_58
  # DEBUG __firstD.59301 => __first_7
  if (__n_58 == 0)
    goto <bb 20>;
  else
    goto <bb 16>;
;;    succ:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __n_125 = PHI <__n_58(16), __n_72(19)>
  # PT = nonlocal escaped 
  # __first_86 = PHI <__first_7(16), __first_73(19)>
  # .MEM_91 = PHI <.MEM_3(D)(16), .MEM_46(19)>
  # DEBUG __niterD.59302 => __n_125
  # DEBUG __firstD.59301 => __first_86
  # .MEM_111 = VDEF <.MEM_91>
  MEM[(struct sRequestD.35378 *)__first_86] = __x_copy$port_115;
  # .MEM_57 = VDEF <.MEM_111>
  MEM[(struct sRequestD.35378 *)__first_86 + 4B] = __x_copy$label_112;
  # .MEM_55 = VDEF <.MEM_57>
  MEM[(struct sRequestD.35378 *)__first_86 + 8B] = __x_copy$in_pri_110;
  # .MEM_46 = VDEF <.MEM_55>
  MEM[(struct sRequestD.35378 *)__first_86 + 12B] = __x_copy$out_pri_40;
  # RANGE [0, 18446744073709551614]
  __n_72 = __n_125 + 18446744073709551615;
  # DEBUG __niterD.59302 => __n_72
  # PT = nonlocal escaped 
  __first_73 = __first_86 + 16;
  # DEBUG __firstD.59301 => __first_73
  # DEBUG __niterD.59302 => __n_72
  # DEBUG __firstD.59301 => __first_73
  if (__n_72 == 0)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 17, next block 19, flags: (NEW)
;;    pred:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  _175 = __n_58 * 16;
  # PT = nonlocal escaped 
  __first_142 = __first_7 + _175;
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       18 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_139 = PHI <__first_142(18), __first_7(15)>
  # .MEM_94 = PHI <.MEM_46(18), .MEM_3(D)(15)>
  # .MEM_60 = VDEF <.MEM_94>
  this_4(D)->D.41044._M_implD.40535._M_finishD.40538 = __first_139;
  # DEBUG D#614ptD.0 => &this_4(D)->D.41044
  # DEBUG thisD.59282 => D#614ptD.0
  # DEBUG thisD.59280 => &__positionD.40969
  # DEBUG __firstD.59245 => D#1091ptD.0
  # DEBUG __lastD.59246 => __first_7
  # DEBUG __resultD.59247 => __first_139
  # DEBUG __allocD.59248 => D#605ptD.0
  # DEBUG D#604ptD.0 => D#605ptD.0
  # DEBUG D#603ptD.0 => D#604ptD.0
  # DEBUG __firstD.59252 => D#1091ptD.0
  # DEBUG __lastD.59251 => __first_7
  # DEBUG __resultD.59250 => __first_139
  # DEBUG D.59249 => D#603ptD.0
  # DEBUG __firstD.59255 => D#1091ptD.0
  # DEBUG __lastD.59254 => __first_7
  # DEBUG __resultD.59253 => __first_139
  # DEBUG __assignableD.59258 => 1
  # DEBUG __firstD.59261 => D#1091ptD.0
  # DEBUG __lastD.59260 => __first_7
  # DEBUG __resultD.59259 => __first_139
  # DEBUG __firstD.59264 => D#1091ptD.0
  # DEBUG __lastD.59263 => __first_7
  # DEBUG __resultD.59262 => __first_139
  # DEBUG __itD.58931 => __first_7
  # DEBUG __itD.54893 => __first_7
  # DEBUG __itD.58929 => D#1091ptD.0
  # DEBUG __itD.54893 => D#1091ptD.0
  # DEBUG __firstD.59267 => D#1091ptD.0
  # DEBUG __lastD.59266 => __first_7
  # DEBUG __resultD.59265 => __first_139
  # DEBUG __itD.58911 => __first_139
  # DEBUG __itD.54882 => __first_139
  # DEBUG __itD.58909 => __first_7
  # DEBUG __itD.54882 => __first_7
  # DEBUG __itD.58907 => D#1091ptD.0
  # DEBUG __itD.54882 => D#1091ptD.0
  # DEBUG __firstD.59270 => D#1091ptD.0
  # DEBUG __lastD.59269 => __first_7
  # DEBUG __resultD.59268 => __first_139
  # DEBUG __simpleD.59274 => 1
  # DEBUG __firstD.59277 => D#1091ptD.0
  # DEBUG __lastD.59276 => __first_7
  # DEBUG __resultD.59275 => __first_139
  # DEBUG _NumD.59278 => _22
  if (_22 != 0)
    goto <bb 22>;
  else
    goto <bb 21>;
;;    succ:       22 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 639, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_182 = (long unsigned intD.14) _23;
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 261, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       20 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _68 = (long unsigned intD.14) _23;
  # .MEM_114 = VDEF <.MEM_60>
  # USE = nonlocal null { D.65851 } (escaped heap)
  # CLB = nonlocal null { D.65851 } (escaped heap)
  memmoveD.995 (__first_139, __position_16, _68);
  # VUSE <.MEM_114>
  pretmp_180 = this_4(D)->D.41044._M_implD.40535._M_finishD.40538;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       21 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_97 = PHI <.MEM_60(21), .MEM_114(22)>
  # PT = nonlocal escaped 
  # prephitmp_181 = PHI <__first_139(21), pretmp_180(22)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_183 = PHI <pretmp_182(21), _68(22)>
  # PT = nonlocal escaped 
  _64 = prephitmp_181 + prephitmp_183;
  # .MEM_65 = VDEF <.MEM_97>
  this_4(D)->D.41044._M_implD.40535._M_finishD.40538 = _64;
  # DEBUG thisD.59243 => &__positionD.40969
  # DEBUG __firstD.59237 => D#1091ptD.0
  # DEBUG __lastD.59238 => __first_7
  # DEBUG __valueD.59239 => &__x_copyD.45153
  # DEBUG __firstD.59242 => D#1091ptD.0
  if (__first_7 == __position_16)
    goto <bb 3>;
  else
    goto <bb 24>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 23, next block 25, flags: (NEW)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 24, next block 26, flags: (NEW)
;;    pred:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                27 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  # __position_124 = PHI <__position_16(24), __position_67(27)>
  # .MEM_150 = PHI <.MEM_65(24), .MEM_32(27)>
  # DEBUG __firstD.59242 => __position_124
  # .MEM_108 = VDEF <.MEM_150>
  MEM[(struct sRequestD.35378 *)__position_124] = __x_copy$port_115;
  # .MEM_42 = VDEF <.MEM_108>
  MEM[(struct sRequestD.35378 *)__position_124 + 4B] = __x_copy$label_112;
  # .MEM_41 = VDEF <.MEM_42>
  MEM[(struct sRequestD.35378 *)__position_124 + 8B] = __x_copy$in_pri_110;
  # .MEM_32 = VDEF <.MEM_41>
  MEM[(struct sRequestD.35378 *)__position_124 + 12B] = __x_copy$out_pri_40;
  # PT = nonlocal 
  __position_67 = __position_124 + 16;
  # DEBUG __firstD.59242 => __position_67
  # DEBUG __firstD.59242 => __position_67
  if (__first_7 == __position_67)
    goto <bb 26>;
  else
    goto <bb 27>;
;;    succ:       26 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_169 = PHI <.MEM_32(25)>
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 26, next block 28, flags: (NEW)
;;    pred:       25 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       4 [29.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.65839 => this_4(D)
  # DEBUG __nD.65840 => __n_2(D)
  # DEBUG __nD.65840 => __n_2(D)
  # DEBUG __sD.65841 => "vector::_M_fill_insert"
  # DEBUG D#513ptD.0 => this_4(D)
  # DEBUG thisD.57230 => D#513ptD.0
  # DEBUG D#512ptD.0 => D#513ptD.0
  # DEBUG D#511ptD.0 => &D#512ptD.0->D.41044
  # DEBUG thisD.57220 => D#511ptD.0
  # DEBUG __aD.57212 => D#510ptD.0
  # DEBUG D#509ptD.0 => D#510ptD.0
  # DEBUG D#498ptD.0 => D#509ptD.0
  # DEBUG thisD.57203 => D#498ptD.0
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _17 = MEM[(struct sRequestD.35378 * *)this_4(D)];
  # DEBUG D#88ptD.0 => this_4(D)
  # DEBUG D#88ptD.0 => this_4(D)
  # DEBUG thisD.65845 => D#88ptD.0
  # DEBUG thisD.65846 => D#88ptD.0
  _130 = (long intD.12) _17;
  _131 = _8 - _130;
  # RANGE [-576460752303423488, 576460752303423487]
  _132 = _131 /[ex] 16;
  # RANGE ~[576460752303423488, 17870283321406128127]
  _133 = (const long unsigned intD.14) _132;
  # RANGE [576460752303423488, 1729382256910270463] NONZERO 2305843009213693951
  _134 = 1152921504606846975 - _133;
  if (__n_2(D) > _134)
    goto <bb 29>;
  else
    goto <bb 30>;
;;    succ:       29 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 0
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       28 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_148 = VDEF <.MEM_3(D)>
  # USE = nonlocal null { D.65851 } (escaped heap)
  # CLB = nonlocal null { D.65851 } (escaped heap)
  _ZSt20__throw_length_errorPKcD.2860 ("vector::_M_fill_insert");
;;    succ:      

;;   basic block 30, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       28 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#88ptD.0 => this_4(D)
  # DEBUG D#88ptD.0 => this_4(D)
  # DEBUG thisD.57248 => D#88ptD.0
  # DEBUG thisD.57247 => D#88ptD.0
  # DEBUG D#88ptD.0 => this_4(D)
  # DEBUG D#88ptD.0 => this_4(D)
  # DEBUG thisD.57243 => D#88ptD.0
  # DEBUG thisD.57242 => D#88ptD.0
  # DEBUG __aD.65844 => &D.65848
  # DEBUG __bD.65843 => &__nD.65840
  _87 = MAX_EXPR <__n_2(D), _133>;
  # RANGE [0, 18446744073709551615]
  __len_138 = _87 + _133;
  # DEBUG __lenD.65842 => __len_138
  # DEBUG D#88ptD.0 => this_4(D)
  # DEBUG D#88ptD.0 => this_4(D)
  # DEBUG thisD.57235 => D#88ptD.0
  # DEBUG thisD.57234 => D#88ptD.0
  # DEBUG D#513ptD.0 => this_4(D)
  # DEBUG thisD.57250 => D#513ptD.0
  # DEBUG D#512ptD.0 => D#513ptD.0
  # DEBUG D#511ptD.0 => &D#512ptD.0->D.41044
  # DEBUG thisD.57220 => D#511ptD.0
  # DEBUG __aD.57212 => D#510ptD.0
  # DEBUG D#509ptD.0 => D#510ptD.0
  # DEBUG D#498ptD.0 => D#509ptD.0
  # DEBUG thisD.57203 => D#498ptD.0
  _167 = __len_138 > 1152921504606846975;
  _155 = _133 > __len_138;
  _128 = _155 | _167;
  if (_128 != 0)
    goto <bb 46>;
  else
    goto <bb 47>;
;;    succ:       46 [67.0%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [33.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 8, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       47 [9.4%]  (TRUE_VALUE,EXECUTABLE)
  pretmp_178 = __len_138 * 16;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 661, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       46 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,EXECUTABLE)
  # _171 = PHI <_157(46), _166(31)>
  # _172 = PHI <_156(46), _165(31)>
  # RANGE [16, 18446744073709551600] NONZERO 18446744073709551600
  # prephitmp_179 = PHI <18446744073709551600(46), pretmp_178(31)>
  # DEBUG __lenD.45187 => NULL
  # DEBUG thisD.59424 => this_4(D)
  # DEBUG D#169ptD.0 => &this_4(D)->D.41044._M_implD.40535._M_startD.40537
  # DEBUG thisD.59426 => NULL
  # DEBUG __iD.59425 => D#169ptD.0
  # DEBUG __lhsD.59421 => &__positionD.40969
  # DEBUG __rhsD.59422 => &D.45189
  # DEBUG thisD.53161 => &__positionD.40969
  # DEBUG thisD.53159 => &D.45189
  # DEBUG D#629ptD.0 => _172 /[ex] 16
  # DEBUG __elems_beforeD.45188 => (const size_typeD.40620) D#629ptD.0
  # DEBUG D#628ptD.0 => &this_4(D)->D.41044
  # DEBUG D#506ptD.0 => D#628ptD.0
  # DEBUG __nD.65830 => NULL
  # DEBUG thisD.65831 => D#506ptD.0
  # DEBUG D#505ptD.0 => D#506ptD.0
  # DEBUG D#504ptD.0 => &D#505ptD.0->_M_implD.40535
  # DEBUG D#503ptD.0 => D#504ptD.0
  # DEBUG __nD.65834 => NULL
  # DEBUG __aD.65833 => D#503ptD.0
  # DEBUG D#502ptD.0 => D#503ptD.0
  # DEBUG D#500ptD.0 => D#502ptD.0
  # DEBUG D#501ptD.0 => 0B
  # DEBUG __nD.65837 => NULL
  # DEBUG thisD.65835 => D#500ptD.0
  # DEBUG D.65836 => D#501ptD.0
  # DEBUG D#499ptD.0 => D#500ptD.0
  # DEBUG D#498ptD.0 => D#499ptD.0
  # DEBUG thisD.57144 => D#498ptD.0
  # .MEM_145 = VDEF <.MEM_3(D)>
  # PT = { D.65851 } (escaped heap)
  # USE = nonlocal null { D.65851 } (escaped heap)
  # CLB = nonlocal null { D.65851 } (escaped heap)
  _126 = _ZnwmD.2764 (prephitmp_179);
  # VUSE <.MEM_145>
  pretmp_31 = this_4(D)->D.41044._M_implD.40535._M_startD.40537;
  # VUSE <.MEM_145>
  pretmp_162 = this_4(D)->D.41044._M_implD.40535._M_finishD.40538;
  pretmp_164 = _126 + prephitmp_179;
  pretmp_160 = (long intD.12) pretmp_162;
  pretmp_158 = (long intD.12) pretmp_31;
  pretmp_152 = _171 - pretmp_158;
;;    succ:       33 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       47 [90.6%]  (FALSE_VALUE,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.65851 } (escaped heap)
  # iftmp.24_127 = PHI <0B(47), _126(32)>
  # .MEM_140 = PHI <.MEM_3(D)(47), .MEM_145(32)>
  # _173 = PHI <_166(47), _171(32)>
  # _168 = PHI <_165(47), _172(32)>
  # PT = nonlocal escaped 
  # prephitmp_161 = PHI <_17(47), pretmp_31(32)>
  # PT = null { D.65851 } (escaped heap)
  # prephitmp_163 = PHI <0B(47), pretmp_164(32)>
  # prephitmp_135 = PHI <_8(47), pretmp_160(32)>
  # prephitmp_151 = PHI <_165(47), pretmp_152(32)>
  # DEBUG __new_startD.45190 => NULL
  # DEBUG __new_finishD.45191 => NULL
  # DEBUG D#608ptD.0 => &this_4(D)->D.41044
  # DEBUG thisD.59419 => D#608ptD.0
  # RANGE [0, 18446744073709551615]
  _19 = (long unsigned intD.14) _168;
  # PT = null { D.65851 } (escaped heap)
  __first_20 = iftmp.24_127 + _19;
  # DEBUG __firstD.59399 => __first_20
  # DEBUG __nD.59400 => __n_2(D)
  # DEBUG __xD.59401 => __x_21(D)
  # DEBUG __niterD.59417 => __n_2(D)
  # DEBUG __firstD.59416 => __first_20
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 1, count 0, freq 7428, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       35 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 1729382256910270463] NONZERO 2305843009213693951
  # __n_146 = PHI <__n_89(35), __n_2(D)(33)>
  # PT = null { D.65851 } (escaped heap)
  # __first_170 = PHI <__first_90(35), __first_20(33)>
  # .MEM_144 = PHI <.MEM_103(35), .MEM_140(33)>
  # DEBUG __niterD.59417 => __n_146
  # DEBUG __firstD.59416 => __first_170
  # .MEM_103 = VDEF <.MEM_144>
  *__first_170 = MEM[(const struct sRequestD.35378 &)__x_21(D)];
  # RANGE [0, 1729382256910270462] NONZERO 2305843009213693951
  __n_89 = __n_146 + 18446744073709551615;
  # DEBUG __niterD.59417 => __n_89
  # PT = null { D.65851 } (escaped heap)
  __first_90 = __first_170 + 16;
  # DEBUG __firstD.59416 => __first_90
  # DEBUG __niterD.59417 => __n_89
  # DEBUG __firstD.59416 => __first_90
  if (__n_89 == 0)
    goto <bb 36>;
  else
    goto <bb 35>;
;;    succ:       36 [9.9%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [90.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 35, loop depth 1, count 0, freq 6693, maybe hot
;;    prev block 34, next block 36, flags: (NEW)
;;    pred:       34 [90.1%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 34>;
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       34 [9.9%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __new_finishD.45191 => 0B
  # DEBUG D#609ptD.0 => &this_4(D)->D.41044
  # DEBUG thisD.59397 => D#609ptD.0
  # DEBUG thisD.59395 => &__positionD.40969
  # DEBUG D#1090ptD.0 => this_4(D)->D.41044._M_implD.40535._M_startD.40537
  # DEBUG __firstD.59360 => D#1090ptD.0
  # DEBUG __lastD.59361 => D#1091ptD.0
  # DEBUG __resultD.59362 => NULL
  # DEBUG __allocD.59363 => D#607ptD.0
  # DEBUG D#606ptD.0 => D#607ptD.0
  # DEBUG D#603ptD.0 => D#606ptD.0
  # DEBUG __firstD.59367 => D#1090ptD.0
  # DEBUG __lastD.59366 => D#1091ptD.0
  # DEBUG __resultD.59365 => NULL
  # DEBUG D.59364 => D#603ptD.0
  # DEBUG __firstD.59370 => D#1090ptD.0
  # DEBUG __lastD.59369 => D#1091ptD.0
  # DEBUG __resultD.59368 => NULL
  # DEBUG __assignableD.59373 => 1
  # DEBUG __firstD.59376 => D#1090ptD.0
  # DEBUG __lastD.59375 => D#1091ptD.0
  # DEBUG __resultD.59374 => NULL
  # DEBUG __firstD.59379 => D#1090ptD.0
  # DEBUG __lastD.59378 => D#1091ptD.0
  # DEBUG __resultD.59377 => NULL
  # DEBUG __itD.58931 => D#1091ptD.0
  # DEBUG __itD.54893 => D#1091ptD.0
  # DEBUG __itD.58929 => D#1090ptD.0
  # DEBUG __itD.54893 => D#1090ptD.0
  # DEBUG __firstD.59382 => D#1090ptD.0
  # DEBUG __lastD.59381 => D#1091ptD.0
  # DEBUG __resultD.59380 => NULL
  # DEBUG __itD.58911 => NULL
  # DEBUG __itD.54882 => NULL
  # DEBUG __itD.58909 => D#1091ptD.0
  # DEBUG __itD.54882 => D#1091ptD.0
  # DEBUG __itD.58907 => D#1090ptD.0
  # DEBUG __itD.54882 => D#1090ptD.0
  # DEBUG __firstD.59385 => D#1090ptD.0
  # DEBUG __lastD.59384 => D#1091ptD.0
  # DEBUG __resultD.59383 => NULL
  # DEBUG __simpleD.59389 => 1
  # DEBUG __firstD.59392 => D#1090ptD.0
  # DEBUG __lastD.59391 => D#1091ptD.0
  # DEBUG __resultD.59390 => NULL
  # DEBUG D#1089ptD.0 => (long intD.12) D#1090ptD.0
  # DEBUG D#1088ptD.0 => _173 - D#1089ptD.0
  # RANGE [-576460752303423488, 576460752303423487]
  _Num_83 = prephitmp_151 /[ex] 16;
  # DEBUG _NumD.59393 => _Num_83
  if (_Num_83 != 0)
    goto <bb 38>;
  else
    goto <bb 37>;
;;    succ:       38 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 522, maybe hot
;;    prev block 36, next block 38, flags: (NEW)
;;    pred:       36 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_92 = (long unsigned intD.14) prephitmp_151;
  goto <bb 39>;
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 213, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       36 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _84 = (long unsigned intD.14) prephitmp_151;
  # .MEM_104 = VDEF <.MEM_103>
  # USE = nonlocal null { D.65851 } (escaped heap)
  # CLB = nonlocal null { D.65851 } (escaped heap)
  memmoveD.995 (iftmp.24_127, prephitmp_161, _84);
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       37 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_100 = PHI <.MEM_103(37), .MEM_104(38)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_117 = PHI <pretmp_92(37), _84(38)>
  # DEBUG D#1087ptD.0 => (long unsigned intD.14) D#1088ptD.0
  # DEBUG __new_finishD.45191 => iftmp.24_127 + D#1087ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _25 = __n_2(D) * 16;
  # RANGE [0, 18446744073709551615]
  _147 = _25 + prephitmp_117;
  # PT = null { D.65851 } (escaped heap)
  __new_finish_26 = iftmp.24_127 + _147;
  # DEBUG __new_finishD.45191 => __new_finish_26
  # DEBUG D#610ptD.0 => &this_4(D)->D.41044
  # DEBUG thisD.59358 => D#610ptD.0
  # DEBUG D#1086ptD.0 => this_4(D)->D.41044._M_implD.40535._M_finishD.40538
  # DEBUG thisD.59356 => &__positionD.40969
  # DEBUG __firstD.59321 => D#1091ptD.0
  # DEBUG __lastD.59322 => D#1086ptD.0
  # DEBUG __resultD.59323 => __new_finish_26
  # DEBUG __allocD.59324 => D#607ptD.0
  # DEBUG D#606ptD.0 => D#607ptD.0
  # DEBUG D#603ptD.0 => D#606ptD.0
  # DEBUG __firstD.59328 => D#1091ptD.0
  # DEBUG __lastD.59327 => D#1086ptD.0
  # DEBUG __resultD.59326 => __new_finish_26
  # DEBUG D.59325 => D#603ptD.0
  # DEBUG __firstD.59331 => D#1091ptD.0
  # DEBUG __lastD.59330 => D#1086ptD.0
  # DEBUG __resultD.59329 => __new_finish_26
  # DEBUG __assignableD.59334 => 1
  # DEBUG __firstD.59337 => D#1091ptD.0
  # DEBUG __lastD.59336 => D#1086ptD.0
  # DEBUG __resultD.59335 => __new_finish_26
  # DEBUG __firstD.59340 => D#1091ptD.0
  # DEBUG __lastD.59339 => D#1086ptD.0
  # DEBUG __resultD.59338 => __new_finish_26
  # DEBUG __itD.58931 => D#1086ptD.0
  # DEBUG __itD.54893 => D#1086ptD.0
  # DEBUG __itD.58929 => D#1091ptD.0
  # DEBUG __itD.54893 => D#1091ptD.0
  # DEBUG __firstD.59343 => D#1091ptD.0
  # DEBUG __lastD.59342 => D#1086ptD.0
  # DEBUG __resultD.59341 => __new_finish_26
  # DEBUG __itD.58911 => __new_finish_26
  # DEBUG __itD.54882 => __new_finish_26
  # DEBUG __itD.58909 => D#1086ptD.0
  # DEBUG __itD.54882 => D#1086ptD.0
  # DEBUG __itD.58907 => D#1091ptD.0
  # DEBUG __itD.54882 => D#1091ptD.0
  # DEBUG __firstD.59346 => D#1091ptD.0
  # DEBUG __lastD.59345 => D#1086ptD.0
  # DEBUG __resultD.59344 => __new_finish_26
  # DEBUG __simpleD.59350 => 1
  # DEBUG __firstD.59353 => D#1091ptD.0
  # DEBUG __lastD.59352 => D#1086ptD.0
  # DEBUG __resultD.59351 => __new_finish_26
  _75 = prephitmp_135 - _173;
  # RANGE [-576460752303423488, 576460752303423487]
  _Num_76 = _75 /[ex] 16;
  # DEBUG _NumD.59354 => _Num_76
  if (_Num_76 != 0)
    goto <bb 41>;
  else
    goto <bb 40>;
;;    succ:       41 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 0, count 0, freq 522, maybe hot
;;    prev block 39, next block 41, flags: (NEW)
;;    pred:       39 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_116 = (long unsigned intD.14) _75;
  goto <bb 42>;
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 41, loop depth 0, count 0, freq 213, maybe hot
;;    prev block 40, next block 42, flags: (NEW, REACHABLE)
;;    pred:       39 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _77 = (long unsigned intD.14) _75;
  # .MEM_105 = VDEF <.MEM_100>
  # USE = nonlocal null { D.65851 } (escaped heap)
  # CLB = nonlocal null { D.65851 } (escaped heap)
  memcpyD.992 (__new_finish_26, __position_16, _77);
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       40 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_101 = PHI <.MEM_100(40), .MEM_105(41)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_177 = PHI <pretmp_116(40), _77(41)>
  # PT = null { D.65851 } (escaped heap)
  _79 = __new_finish_26 + prephitmp_177;
  # DEBUG __new_finishD.45191 => _79
  # DEBUG D#611ptD.0 => &this_4(D)->D.41044
  # DEBUG thisD.59319 => D#611ptD.0
  # DEBUG D#627ptD.0 => this_4(D)->D.41044._M_implD.40535._M_finishD.40538
  # DEBUG D#626ptD.0 => this_4(D)->D.41044._M_implD.40535._M_startD.40537
  # DEBUG __firstD.59316 => D#626ptD.0
  # DEBUG __lastD.59317 => D#627ptD.0
  # DEBUG D.59318 => NULL
  # DEBUG D#162ptD.0 => D#626ptD.0
  # DEBUG D#163ptD.0 => D#627ptD.0
  # DEBUG __firstD.53130 => D#162ptD.0
  # DEBUG __lastD.53129 => D#163ptD.0
  # DEBUG D#161ptD.0 => D#163ptD.0
  # DEBUG D#160ptD.0 => D#162ptD.0
  # DEBUG D#158ptD.0 => D#160ptD.0
  # DEBUG D#159ptD.0 => D#161ptD.0
  # DEBUG D.53119 => D#158ptD.0
  # DEBUG D.53118 => D#159ptD.0
  # DEBUG D#625ptD.0 => this_4(D)->D.41044._M_implD.40535._M_end_of_storageD.40539
  # DEBUG D#624ptD.0 => (long intD.12) D#625ptD.0
  # DEBUG D#623ptD.0 => (long intD.12) D#1090ptD.0
  # DEBUG D#622ptD.0 => D#624ptD.0 - D#623ptD.0
  # DEBUG D#621ptD.0 => D#622ptD.0 /[ex] 16
  # DEBUG D#620ptD.0 => (long unsigned intD.14) D#621ptD.0
  # DEBUG D#619ptD.0 => &this_4(D)->D.41044
  # DEBUG thisD.59306 => D#619ptD.0
  # DEBUG __pD.59307 => D#1090ptD.0
  # DEBUG __nD.59308 => D#620ptD.0
  if (prephitmp_161 != 0B)
    goto <bb 43>;
  else
    goto <bb 44>;
;;    succ:       43 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 43, loop depth 0, count 0, freq 513, maybe hot
;;    prev block 42, next block 44, flags: (NEW, REACHABLE)
;;    pred:       42 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#286ptD.0 => &D#619ptD.0->_M_implD.40535
  # DEBUG D#284ptD.0 => D#286ptD.0
  # DEBUG D#285ptD.0 => D#620ptD.0
  # DEBUG __pD.59312 => D#1090ptD.0
  # DEBUG __aD.59310 => D#284ptD.0
  # DEBUG __nD.59311 => D#285ptD.0
  # DEBUG D#283ptD.0 => D#285ptD.0
  # DEBUG D#282ptD.0 => D#284ptD.0
  # DEBUG D#280ptD.0 => D#282ptD.0
  # DEBUG D#281ptD.0 => D#283ptD.0
  # DEBUG __pD.59315 => D#1090ptD.0
  # DEBUG thisD.59313 => D#280ptD.0
  # DEBUG D.59314 => D#281ptD.0
  # .MEM_107 = VDEF <.MEM_101>
  # USE = nonlocal null { D.65851 } (escaped heap)
  # CLB = nonlocal null { D.65851 } (escaped heap)
  _ZdlPvD.2766 (prephitmp_161);
;;    succ:       44 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 44, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 43, next block 45, flags: (NEW, REACHABLE)
;;    pred:       43 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                42 [30.2%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_102 = PHI <.MEM_107(43), .MEM_101(42)>
  # .MEM_33 = VDEF <.MEM_102>
  this_4(D)->D.41044._M_implD.40535._M_startD.40537 = iftmp.24_127;
  # .MEM_34 = VDEF <.MEM_33>
  this_4(D)->D.41044._M_implD.40535._M_finishD.40538 = _79;
  # .MEM_37 = VDEF <.MEM_34>
  this_4(D)->D.41044._M_implD.40535._M_end_of_storageD.40539 = prephitmp_163;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 45, loop depth 0, count 0, freq 4156, maybe hot
;;    prev block 44, next block 46, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                44 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_186(3), .MEM_37(44)>
  # VUSE <.MEM_1>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 46, loop depth 0, count 0, freq 654, maybe hot
;;   Invalid sum of incoming frequencies 492, should be 654
;;    prev block 45, next block 47, flags: (NEW, REACHABLE)
;;    pred:       30 [67.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __lenD.45187 => NULL
  # DEBUG thisD.59424 => this_4(D)
  # DEBUG D#169ptD.0 => &this_4(D)->D.41044._M_implD.40535._M_startD.40537
  # DEBUG thisD.59426 => NULL
  # DEBUG __iD.59425 => D#169ptD.0
  # DEBUG __lhsD.59421 => &__positionD.40969
  # DEBUG __rhsD.59422 => &D.45189
  # DEBUG thisD.53161 => &__positionD.40969
  _157 = (long intD.12) __position_16;
  # DEBUG thisD.53159 => &D.45189
  _156 = _157 - _130;
  # DEBUG D#629ptD.0 => _156 /[ex] 16
  # DEBUG __elems_beforeD.45188 => (const size_typeD.40620) D#629ptD.0
  # DEBUG D#628ptD.0 => &this_4(D)->D.41044
  # DEBUG D#506ptD.0 => D#628ptD.0
  # DEBUG __nD.65830 => NULL
  # DEBUG thisD.65831 => D#506ptD.0
  # DEBUG D#505ptD.0 => D#506ptD.0
  goto <bb 32>;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 47, loop depth 0, count 0, freq 80, maybe hot
;;   Invalid sum of incoming frequencies 243, should be 80
;;    prev block 46, next block 1, flags: (NEW, REACHABLE)
;;    pred:       30 [33.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __lenD.45187 => NULL
  # DEBUG thisD.59424 => this_4(D)
  # DEBUG D#169ptD.0 => &this_4(D)->D.41044._M_implD.40535._M_startD.40537
  # DEBUG thisD.59426 => NULL
  # DEBUG __iD.59425 => D#169ptD.0
  # DEBUG __lhsD.59421 => &__positionD.40969
  # DEBUG __rhsD.59422 => &D.45189
  # DEBUG thisD.53161 => &__positionD.40969
  _166 = (long intD.12) __position_16;
  # DEBUG thisD.53159 => &D.45189
  _165 = _166 - _130;
  # DEBUG D#629ptD.0 => _165 /[ex] 16
  # DEBUG __elems_beforeD.45188 => (const size_typeD.40620) D#629ptD.0
  # DEBUG D#628ptD.0 => &this_4(D)->D.41044
  # DEBUG D#506ptD.0 => D#628ptD.0
  # DEBUG __nD.65830 => NULL
  # DEBUG thisD.65831 => D#506ptD.0
  # DEBUG D#505ptD.0 => D#506ptD.0
  if (__len_138 != 0)
    goto <bb 31>;
  else
    goto <bb 33>;
;;    succ:       31 [9.4%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [90.6%]  (FALSE_VALUE,EXECUTABLE)

}


Creating dr for MEM[(struct __normal_iterator *)&__position]
analyze_innermost: success.
	base_address: &__position
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct __normal_iterator *)&__position]
Creating dr for this_4(D)->D.41044._M_impl._M_end_of_storage
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 128
	Access function 1: 0
	Access function 2: 0
Creating dr for this_4(D)->D.41044._M_impl._M_finish
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 64
	Access function 1: 0
	Access function 2: 0
Creating dr for MEM[(const struct sRequest &)__x_21(D)]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const struct sRequest &)__x_21(D)]
Creating dr for MEM[(const struct sRequest &)__x_21(D) + 4]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: MEM[(const struct sRequest &)__x_21(D) + 4]
Creating dr for MEM[(const struct sRequest &)__x_21(D) + 8]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(const struct sRequest &)__x_21(D) + 8]
Creating dr for MEM[(const struct sRequest &)__x_21(D) + 12]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 12
	step: 0
	aligned to: 256
	base_object: MEM[(const struct sRequest &)__x_21(D) + 12]
Creating dr for this_4(D)->D.41044._M_impl._M_finish
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 64
	Access function 1: 0
	Access function 2: 0
Creating dr for MEM[(struct sRequest *)__position_123]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {0B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {0B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {4B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {4B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {8B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {8B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 12B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {12B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 12B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {12B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {0B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {0B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {4B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {4B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {8B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {8B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 12B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {12B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 12B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {12B, +, 16}_1
Analyzing # of iterations of loop 1
  exit condition [__position_16 + 16, + , 16](no_overflow) != _53
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551599
Applying pattern match.pd:114, generic-match.c:6953
  result:
    # of iterations ((unsigned long) _53 - (unsigned long) (__position_16 + 16)) /[ex] 16 & 1152921504606846975, bounded by 1152921504606846974
Analyzing # of iterations of loop 1
  exit condition [__position_16 + 16, + , 16](no_overflow) != _53
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551599
Applying pattern match.pd:114, generic-match.c:6953
  result:
    # of iterations ((unsigned long) _53 - (unsigned long) (__position_16 + 16)) /[ex] 16 & 1152921504606846975, bounded by 1152921504606846974
Creating dr for MEM[(struct sRequest *)__position_123]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {0B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {0B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {4B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {4B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {8B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {8B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 12B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {12B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 12B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {12B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {0B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {0B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {4B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {4B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {8B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {8B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 12B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {12B, +, 16}_1
Creating dr for MEM[(struct sRequest *)__position_123 + 12B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {12B, +, 16}_1
Analyzing # of iterations of loop 1
  exit condition [__position_16 + 16, + , 16](no_overflow) != _53
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551599
Applying pattern match.pd:114, generic-match.c:6953
  result:
    # of iterations ((unsigned long) _53 - (unsigned long) (__position_16 + 16)) /[ex] 16 & 1152921504606846975, bounded by 1152921504606846974
Applying pattern match.pd:725, generic-match.c:1428
Creating dr for MEM[(struct sRequest *)__first_86]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {0B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {0B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 4B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {4B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 4B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {4B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 8B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {8B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 8B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {8B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 12B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {12B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 12B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {12B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {0B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {0B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 4B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {4B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 4B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {4B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 8B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {8B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 8B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {8B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 12B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {12B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 12B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {12B, +, 16}_3
Analyzing # of iterations of loop 3
  exit condition [__n_58 + 18446744073709551615, + , 18446744073709551615] != 0
  bounds on difference of bases: -18446744073709551615 ... 0
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations __n_58 + 18446744073709551615, bounded by 0x0ffffffffffffffff
Creating dr for MEM[(struct sRequest *)__first_86]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {0B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {0B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 4B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {4B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 4B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {4B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 8B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {8B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 8B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {8B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 12B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {12B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 12B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {12B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {0B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {0B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 4B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {4B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 4B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {4B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 8B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {8B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 8B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {8B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 12B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {12B, +, 16}_3
Creating dr for MEM[(struct sRequest *)__first_86 + 12B]
analyze_innermost: success.
	base_address: __first_7
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__first_7]
	Access function 0: {12B, +, 16}_3
Analyzing # of iterations of loop 3
  exit condition [__n_58 + 18446744073709551615, + , 18446744073709551615] != 0
  bounds on difference of bases: -18446744073709551615 ... 0
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations __n_58 + 18446744073709551615, bounded by 0x0ffffffffffffffff
Creating dr for this_4(D)->D.41044._M_impl._M_finish
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 64
	Access function 1: 0
	Access function 2: 0
Creating dr for this_4(D)->D.41044._M_impl._M_finish
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 64
	Access function 1: 0
	Access function 2: 0
Creating dr for MEM[(struct sRequest *)__position_124]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {0B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {0B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {4B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {4B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {8B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {8B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 12B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {12B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 12B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {12B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {0B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {0B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {4B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {4B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {8B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {8B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 12B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {12B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 12B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {12B, +, 16}_2
Analyzing # of iterations of loop 2
  exit condition [__position_16 + 16, + , 16](no_overflow) != __first_7
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551599
Applying pattern match.pd:114, generic-match.c:6953
  result:
    # of iterations ((unsigned long) __first_7 - (unsigned long) (__position_16 + 16)) /[ex] 16 & 1152921504606846975, bounded by 1152921504606846974
Analyzing # of iterations of loop 2
  exit condition [__position_16 + 16, + , 16](no_overflow) != __first_7
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551599
Applying pattern match.pd:114, generic-match.c:6953
  result:
    # of iterations ((unsigned long) __first_7 - (unsigned long) (__position_16 + 16)) /[ex] 16 & 1152921504606846975, bounded by 1152921504606846974
Creating dr for MEM[(struct sRequest *)__position_124]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {0B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {0B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {4B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {4B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {8B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {8B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 12B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {12B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 12B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {12B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {0B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {0B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {4B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 4B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {4B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {8B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 8B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 8
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {8B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 12B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {12B, +, 16}_2
Creating dr for MEM[(struct sRequest *)__position_124 + 12B]
analyze_innermost: success.
	base_address: __position_16
	offset from base address: 0
	constant offset from base address: 12
	step: 16
	aligned to: 256
	base_object: MEM[(struct sRequest *)__position_16]
	Access function 0: {12B, +, 16}_2
Analyzing # of iterations of loop 2
  exit condition [__position_16 + 16, + , 16](no_overflow) != __first_7
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551599
Applying pattern match.pd:114, generic-match.c:6953
  result:
    # of iterations ((unsigned long) __first_7 - (unsigned long) (__position_16 + 16)) /[ex] 16 & 1152921504606846975, bounded by 1152921504606846974
Creating dr for MEM[(struct sRequest * *)this_4(D)]
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest * *)this_4(D)]
Applying pattern match.pd:725, generic-match.c:1428
Applying pattern match.pd:725, generic-match.c:1428
Creating dr for MEM[(const struct sRequest &)__x_21(D)]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const struct sRequest &)__x_21(D)]
Creating dr for *__first_170
analyze_innermost: success.
	base_address: iftmp.24_127 + (long unsigned int) _168
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: *iftmp.24_127 + (long unsigned int) _168
	Access function 0: {0B, +, 16}_4
Creating dr for MEM[(const struct sRequest &)__x_21(D)]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const struct sRequest &)__x_21(D)]
Creating dr for *__first_170
analyze_innermost: success.
	base_address: iftmp.24_127 + (long unsigned int) _168
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: *iftmp.24_127 + (long unsigned int) _168
	Access function 0: {0B, +, 16}_4
Creating dr for MEM[(const struct sRequest &)__x_21(D)]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const struct sRequest &)__x_21(D)]
Creating dr for *__first_170
analyze_innermost: success.
	base_address: iftmp.24_127 + (long unsigned int) _168
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: *iftmp.24_127 + (long unsigned int) _168
	Access function 0: {0B, +, 16}_4
Creating dr for MEM[(const struct sRequest &)__x_21(D)]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const struct sRequest &)__x_21(D)]
Creating dr for *__first_170
analyze_innermost: success.
	base_address: iftmp.24_127 + (long unsigned int) _168
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: *iftmp.24_127 + (long unsigned int) _168
	Access function 0: {0B, +, 16}_4
Analyzing # of iterations of loop 4
  exit condition [__n_2(D) + 18446744073709551615, + , 18446744073709551615] != 0
  bounds on difference of bases: -18446744073709551615 ... 0
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations __n_2(D) + 18446744073709551615, bounded by 0x0ffffffffffffffff
Creating dr for MEM[(const struct sRequest &)__x_21(D)]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const struct sRequest &)__x_21(D)]
Creating dr for *__first_170
analyze_innermost: success.
	base_address: iftmp.24_127 + (long unsigned int) _168
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: *iftmp.24_127 + (long unsigned int) _168
	Access function 0: {0B, +, 16}_4
Creating dr for MEM[(const struct sRequest &)__x_21(D)]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const struct sRequest &)__x_21(D)]
Creating dr for *__first_170
analyze_innermost: success.
	base_address: iftmp.24_127 + (long unsigned int) _168
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: *iftmp.24_127 + (long unsigned int) _168
	Access function 0: {0B, +, 16}_4
Creating dr for MEM[(const struct sRequest &)__x_21(D)]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const struct sRequest &)__x_21(D)]
Creating dr for *__first_170
analyze_innermost: success.
	base_address: iftmp.24_127 + (long unsigned int) _168
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: *iftmp.24_127 + (long unsigned int) _168
	Access function 0: {0B, +, 16}_4
Creating dr for MEM[(const struct sRequest &)__x_21(D)]
analyze_innermost: success.
	base_address: __x_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const struct sRequest &)__x_21(D)]
Creating dr for *__first_170
analyze_innermost: success.
	base_address: iftmp.24_127 + (long unsigned int) _168
	offset from base address: 0
	constant offset from base address: 0
	step: 16
	aligned to: 256
	base_object: *iftmp.24_127 + (long unsigned int) _168
	Access function 0: {0B, +, 16}_4
Analyzing # of iterations of loop 4
  exit condition [__n_2(D) + 18446744073709551615, + , 18446744073709551615] != 0
  bounds on difference of bases: -18446744073709551615 ... 0
Applying pattern match.pd:49, generic-match.c:4253
  result:
    # of iterations __n_2(D) + 18446744073709551615, bounded by 0x0ffffffffffffffff
Creating dr for this_4(D)->D.41044._M_impl._M_start
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 0
	Access function 1: 0
	Access function 2: 0
Creating dr for this_4(D)->D.41044._M_impl._M_finish
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 64
	Access function 1: 0
	Access function 2: 0
Creating dr for this_4(D)->D.41044._M_impl._M_end_of_storage
analyze_innermost: success.
	base_address: this_4(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: *this_4(D)
	Access function 0: 128
	Access function 1: 0
	Access function 2: 0

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:18)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:11)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:56, LOOPS:4, CONDITIONS:19, STMTS:538)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_4 bb_3 })
  {
    <bb 2>:
    # DEBUG D#1091 => MEM[(struct __normal_iterator *)&__position]
    # DEBUG __position => D#1091
    if (__n_2(D) != 0)
      goto <bb 4>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 bb_10 bb_48 bb_23 bb_49 }, succs = {bb_55 })
  {
    <bb 3>:
    # .MEM_186 = PHI <.MEM_3(D)(2), .MEM_12(10), .MEM_13(48), .MEM_65(23), .MEM_169(49)>

  }
  bb_55 (preds = {bb_3 }, succs = {bb_45 })
  {
    <bb 55>:
    goto <bb 45>;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 bb_28 })
  {
    <bb 4>:
    # VUSE <.MEM_3(D)>
    __position_16 = MEM[(struct __normal_iterator *)&__position];
    # VUSE <.MEM_3(D)>
    _5 = this_4(D)->D.41044._M_impl._M_end_of_storage;
    _6 = (long int) _5;
    # VUSE <.MEM_3(D)>
    __first_7 = this_4(D)->D.41044._M_impl._M_finish;
    _8 = (long int) __first_7;
    _9 = _6 - _8;
    _10 = _9 /[ex] 16;
    _11 = (long unsigned int) _10;
    if (__n_2(D) <= _11)
      goto <bb 5>;
    else
      goto <bb 28>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_6 bb_15 })
  {
    <bb 5>:
    # VUSE <.MEM_3(D)>
    __x_copy$port_115 = MEM[(const struct sRequest &)__x_21(D)];
    # DEBUG __x_copy$port => __x_copy$port_115
    # VUSE <.MEM_3(D)>
    __x_copy$label_112 = MEM[(const struct sRequest &)__x_21(D) + 4];
    # DEBUG __x_copy$label => __x_copy$label_112
    # VUSE <.MEM_3(D)>
    __x_copy$in_pri_110 = MEM[(const struct sRequest &)__x_21(D) + 8];
    # DEBUG __x_copy$in_pri => __x_copy$in_pri_110
    # VUSE <.MEM_3(D)>
    __x_copy$out_pri_40 = MEM[(const struct sRequest &)__x_21(D) + 12];
    # DEBUG __x_copy$out_pri => __x_copy$out_pri_40
    # DEBUG this => this_4(D)
    # DEBUG D#104 => &this_4(D)->D.41044._M_impl._M_finish
    # DEBUG this => NULL
    # DEBUG __i => D#104
    # DEBUG __lhs => &D.45156
    # DEBUG __rhs => &__position
    # DEBUG this => &D.45156
    # DEBUG this => &__position
    _27 = (long int) __position_16;
    _23 = _8 - _27;
    _22 = _23 /[ex] 16;
    __elems_after_39 = (const size_type) _22;
    # DEBUG __elems_after => __elems_after_39
    # DEBUG __old_finish => __first_7
    if (__n_2(D) < __elems_after_39)
      goto <bb 6>;
    else
      goto <bb 15>;

  }
  bb_6 (preds = {bb_5 }, succs = {bb_7 bb_8 })
  {
    <bb 6>:
    # DEBUG D#612 => &this_4(D)->D.41044
    # DEBUG this => D#612
    _43 = __n_2(D) * 16;
    _44 = -_43;
    _45 = __first_7 + _44;
    # DEBUG __first => _45
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    # DEBUG __alloc => D#605
    # DEBUG D#604 => D#605
    # DEBUG D#603 => D#604
    # DEBUG __first => _45
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    # DEBUG D.59204 => D#603
    # DEBUG __first => _45
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    # DEBUG __assignable => 1
    # DEBUG __first => _45
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    # DEBUG __first => _45
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => _45
    # DEBUG __it => _45
    # DEBUG __first => _45
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => _45
    # DEBUG __it => _45
    # DEBUG __first => _45
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    # DEBUG __simple => 1
    # DEBUG __first => _45
    # DEBUG __last => __first_7
    # DEBUG __result => __first_7
    __first.27_56 = (long int) _45;
    _54 = _8 - __first.27_56;
    _Num_52 = _54 /[ex] 16;
    # DEBUG _Num => _Num_52
    if (_Num_52 != 0)
      goto <bb 7>;
    else
      goto <bb 8>;

  }
  bb_7 (preds = {bb_6 }, succs = {bb_8 })
  {
    <bb 7>:
    _50 = (long unsigned int) _54;
    # .MEM_109 = VDEF <.MEM_3(D)>
    __builtin_memmove (__first_7, _45, _50);
    # VUSE <.MEM_109>
    pretmp_187 = this_4(D)->D.41044._M_impl._M_finish;

  }
  bb_8 (preds = {bb_6 bb_7 }, succs = {bb_9 bb_10 })
  {
    <bb 8>:
    # .MEM_14 = PHI <.MEM_3(D)(6), .MEM_109(7)>
    # prephitmp_188 = PHI <__first_7(6), pretmp_187(7)>
    _48 = prephitmp_188 + _43;
    # .MEM_49 = VDEF <.MEM_14>
    this_4(D)->D.41044._M_impl._M_finish = _48;
    # DEBUG this => &__position
    # DEBUG __first => D#1091
    # DEBUG __last => _45
    # DEBUG __result => __first_7
    # DEBUG __it => _45
    # DEBUG __it => _45
    # DEBUG __it => D#1091
    # DEBUG __it => D#1091
    # DEBUG __first => D#1091
    # DEBUG __last => _45
    # DEBUG __result => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => _45
    # DEBUG __it => _45
    # DEBUG __it => D#1091
    # DEBUG __it => D#1091
    # DEBUG __first => D#1091
    # DEBUG __last => _45
    # DEBUG __result => __first_7
    # DEBUG __simple => 1
    # DEBUG __first => D#1091
    # DEBUG __last => _45
    # DEBUG __result => __first_7
    _118 = __first.27_56 - _27;
    _Num_119 = _118 /[ex] 16;
    # DEBUG _Num => _Num_119
    if (_Num_119 != 0)
      goto <bb 9>;
    else
      goto <bb 10>;

  }
  bb_9 (preds = {bb_8 }, succs = {bb_10 })
  {
    <bb 9>:
    _120 = (long unsigned int) _118;
    _121 = -_120;
    _122 = __first_7 + _121;
    # .MEM_149 = VDEF <.MEM_49>
    __builtin_memmove (_122, __position_16, _120);

  }
  bb_10 (preds = {bb_8 bb_9 }, succs = {bb_3 bb_11 })
  {
    <bb 10>:
    # .MEM_12 = PHI <.MEM_49(8), .MEM_149(9)>
    # DEBUG this => &__position
    _53 = __position_16 + _43;
    # DEBUG this => &__position
    # DEBUG __first => D#1091
    # DEBUG __last => _53
    # DEBUG __value => &__x_copy
    # DEBUG __first => D#1091
    if (__position_16 == _53)
      goto <bb 3>;
    else
      goto <bb 11>;

  }
  bb_11 (preds = {bb_10 }, succs = {bb_12 })
  {
    <bb 11>:

  }
  bb_13 (preds = {bb_12 }, succs = {bb_48 })
  {
    <bb 13>:
    # .MEM_13 = PHI <.MEM_59(12)>

  }
  bb_48 (preds = {bb_13 }, succs = {bb_3 })
  {
    <bb 48>:
    goto <bb 3>;

  }
  bb_15 (preds = {bb_5 }, succs = {bb_20 bb_16 })
  {
    <bb 15>:
    # DEBUG D#613 => &this_4(D)->D.41044
    # DEBUG this => D#613
    __n_58 = __n_2(D) - __elems_after_39;
    # DEBUG __first => __first_7
    # DEBUG __n => __n_58
    # DEBUG __x => &__x_copy
    # DEBUG __niter => __n_58
    # DEBUG __first => __first_7
    if (__n_58 == 0)
      goto <bb 20>;
    else
      goto <bb 16>;

  }
  bb_16 (preds = {bb_15 }, succs = {bb_17 })
  {
    <bb 16>:

  }
  bb_18 (preds = {bb_17 }, succs = {bb_50 })
  {
    <bb 18>:

  }
  bb_50 (preds = {bb_18 }, succs = {bb_20 })
  {
    <bb 50>:
    _175 = __n_58 * 16;
    __first_142 = __first_7 + _175;
    goto <bb 20>;

  }
  bb_20 (preds = {bb_50 bb_15 }, succs = {bb_22 bb_21 })
  {
    <bb 20>:
    # __first_139 = PHI <__first_142(50), __first_7(15)>
    # .MEM_94 = PHI <.MEM_46(50), .MEM_3(D)(15)>
    # .MEM_60 = VDEF <.MEM_94>
    this_4(D)->D.41044._M_impl._M_finish = __first_139;
    # DEBUG D#614 => &this_4(D)->D.41044
    # DEBUG this => D#614
    # DEBUG this => &__position
    # DEBUG __first => D#1091
    # DEBUG __last => __first_7
    # DEBUG __result => __first_139
    # DEBUG __alloc => D#605
    # DEBUG D#604 => D#605
    # DEBUG D#603 => D#604
    # DEBUG __first => D#1091
    # DEBUG __last => __first_7
    # DEBUG __result => __first_139
    # DEBUG D.59249 => D#603
    # DEBUG __first => D#1091
    # DEBUG __last => __first_7
    # DEBUG __result => __first_139
    # DEBUG __assignable => 1
    # DEBUG __first => D#1091
    # DEBUG __last => __first_7
    # DEBUG __result => __first_139
    # DEBUG __first => D#1091
    # DEBUG __last => __first_7
    # DEBUG __result => __first_139
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => D#1091
    # DEBUG __it => D#1091
    # DEBUG __first => D#1091
    # DEBUG __last => __first_7
    # DEBUG __result => __first_139
    # DEBUG __it => __first_139
    # DEBUG __it => __first_139
    # DEBUG __it => __first_7
    # DEBUG __it => __first_7
    # DEBUG __it => D#1091
    # DEBUG __it => D#1091
    # DEBUG __first => D#1091
    # DEBUG __last => __first_7
    # DEBUG __result => __first_139
    # DEBUG __simple => 1
    # DEBUG __first => D#1091
    # DEBUG __last => __first_7
    # DEBUG __result => __first_139
    # DEBUG _Num => _22
    if (_22 != 0)
      goto <bb 22>;
    else
      goto <bb 21>;

  }
  bb_21 (preds = {bb_20 }, succs = {bb_23 })
  {
    <bb 21>:
    pretmp_182 = (long unsigned int) _23;
    goto <bb 23>;

  }
  bb_22 (preds = {bb_20 }, succs = {bb_23 })
  {
    <bb 22>:
    _68 = (long unsigned int) _23;
    # .MEM_114 = VDEF <.MEM_60>
    __builtin_memmove (__first_139, __position_16, _68);
    # VUSE <.MEM_114>
    pretmp_180 = this_4(D)->D.41044._M_impl._M_finish;

  }
  bb_23 (preds = {bb_21 bb_22 }, succs = {bb_3 bb_24 })
  {
    <bb 23>:
    # .MEM_97 = PHI <.MEM_60(21), .MEM_114(22)>
    # prephitmp_181 = PHI <__first_139(21), pretmp_180(22)>
    # prephitmp_183 = PHI <pretmp_182(21), _68(22)>
    _64 = prephitmp_181 + prephitmp_183;
    # .MEM_65 = VDEF <.MEM_97>
    this_4(D)->D.41044._M_impl._M_finish = _64;
    # DEBUG this => &__position
    # DEBUG __first => D#1091
    # DEBUG __last => __first_7
    # DEBUG __value => &__x_copy
    # DEBUG __first => D#1091
    if (__first_7 == __position_16)
      goto <bb 3>;
    else
      goto <bb 24>;

  }
  bb_24 (preds = {bb_23 }, succs = {bb_25 })
  {
    <bb 24>:

  }
  bb_26 (preds = {bb_25 }, succs = {bb_49 })
  {
    <bb 26>:
    # .MEM_169 = PHI <.MEM_32(25)>

  }
  bb_49 (preds = {bb_26 }, succs = {bb_3 })
  {
    <bb 49>:
    goto <bb 3>;

  }
  bb_28 (preds = {bb_4 }, succs = {bb_29 bb_30 })
  {
    <bb 28>:
    # DEBUG this => this_4(D)
    # DEBUG __n => __n_2(D)
    # DEBUG __n => __n_2(D)
    # DEBUG __s => "vector::_M_fill_insert"
    # DEBUG D#513 => this_4(D)
    # DEBUG this => D#513
    # DEBUG D#512 => D#513
    # DEBUG D#511 => &D#512->D.41044
    # DEBUG this => D#511
    # DEBUG __a => D#510
    # DEBUG D#509 => D#510
    # DEBUG D#498 => D#509
    # DEBUG this => D#498
    # VUSE <.MEM_3(D)>
    _17 = MEM[(struct sRequest * *)this_4(D)];
    # DEBUG D#88 => this_4(D)
    # DEBUG D#88 => this_4(D)
    # DEBUG this => D#88
    # DEBUG this => D#88
    _130 = (long int) _17;
    _131 = _8 - _130;
    _132 = _131 /[ex] 16;
    _133 = (const long unsigned int) _132;
    _134 = 1152921504606846975 - _133;
    if (__n_2(D) > _134)
      goto <bb 29>;
    else
      goto <bb 30>;

  }
  bb_29 (preds = {bb_28 }, succs = {})
  {
    <bb 29>:
    # .MEM_148 = VDEF <.MEM_3(D)>
    std::__throw_length_error ("vector::_M_fill_insert");

  }
  bb_30 (preds = {bb_28 }, succs = {bb_46 bb_47 })
  {
    <bb 30>:
    # DEBUG D#88 => this_4(D)
    # DEBUG D#88 => this_4(D)
    # DEBUG this => D#88
    # DEBUG this => D#88
    # DEBUG D#88 => this_4(D)
    # DEBUG D#88 => this_4(D)
    # DEBUG this => D#88
    # DEBUG this => D#88
    # DEBUG __a => &D.65848
    # DEBUG __b => &__n
    _87 = MAX_EXPR <__n_2(D), _133>;
    __len_138 = _87 + _133;
    # DEBUG __len => __len_138
    # DEBUG D#88 => this_4(D)
    # DEBUG D#88 => this_4(D)
    # DEBUG this => D#88
    # DEBUG this => D#88
    # DEBUG D#513 => this_4(D)
    # DEBUG this => D#513
    # DEBUG D#512 => D#513
    # DEBUG D#511 => &D#512->D.41044
    # DEBUG this => D#511
    # DEBUG __a => D#510
    # DEBUG D#509 => D#510
    # DEBUG D#498 => D#509
    # DEBUG this => D#498
    _167 = __len_138 > 1152921504606846975;
    _155 = _133 > __len_138;
    _128 = _155 | _167;
    if (_128 != 0)
      goto <bb 46>;
    else
      goto <bb 47>;

  }
  bb_31 (preds = {bb_47 }, succs = {bb_32 })
  {
    <bb 31>:
    pretmp_178 = __len_138 * 16;

  }
  bb_32 (preds = {bb_46 bb_31 }, succs = {bb_33 })
  {
    <bb 32>:
    # _171 = PHI <_157(46), _166(31)>
    # _172 = PHI <_156(46), _165(31)>
    # prephitmp_179 = PHI <18446744073709551600(46), pretmp_178(31)>
    # DEBUG __len => NULL
    # DEBUG this => this_4(D)
    # DEBUG D#169 => &this_4(D)->D.41044._M_impl._M_start
    # DEBUG this => NULL
    # DEBUG __i => D#169
    # DEBUG __lhs => &__position
    # DEBUG __rhs => &D.45189
    # DEBUG this => &__position
    # DEBUG this => &D.45189
    # DEBUG D#629 => _172 /[ex] 16
    # DEBUG __elems_before => (const size_type) D#629
    # DEBUG D#628 => &this_4(D)->D.41044
    # DEBUG D#506 => D#628
    # DEBUG __n => NULL
    # DEBUG this => D#506
    # DEBUG D#505 => D#506
    # DEBUG D#504 => &D#505->_M_impl
    # DEBUG D#503 => D#504
    # DEBUG __n => NULL
    # DEBUG __a => D#503
    # DEBUG D#502 => D#503
    # DEBUG D#500 => D#502
    # DEBUG D#501 => 0B
    # DEBUG __n => NULL
    # DEBUG this => D#500
    # DEBUG D.65836 => D#501
    # DEBUG D#499 => D#500
    # DEBUG D#498 => D#499
    # DEBUG this => D#498
    # .MEM_145 = VDEF <.MEM_3(D)>
    _126 = operator new (prephitmp_179);
    # VUSE <.MEM_145>
    pretmp_31 = this_4(D)->D.41044._M_impl._M_start;
    # VUSE <.MEM_145>
    pretmp_162 = this_4(D)->D.41044._M_impl._M_finish;
    pretmp_164 = _126 + prephitmp_179;
    pretmp_160 = (long int) pretmp_162;
    pretmp_158 = (long int) pretmp_31;
    pretmp_152 = _171 - pretmp_158;

  }
  bb_33 (preds = {bb_47 bb_32 }, succs = {bb_52 })
  {
    <bb 33>:
    # iftmp.24_127 = PHI <0B(47), _126(32)>
    # .MEM_140 = PHI <.MEM_3(D)(47), .MEM_145(32)>
    # _173 = PHI <_166(47), _171(32)>
    # _168 = PHI <_165(47), _172(32)>
    # prephitmp_161 = PHI <_17(47), pretmp_31(32)>
    # prephitmp_163 = PHI <0B(47), pretmp_164(32)>
    # prephitmp_135 = PHI <_8(47), pretmp_160(32)>
    # prephitmp_151 = PHI <_165(47), pretmp_152(32)>

  }
  bb_52 (preds = {bb_33 }, succs = {bb_34 })
  {
    <bb 52>:
    # DEBUG __new_start => NULL
    # DEBUG __new_finish => NULL
    # DEBUG D#608 => &this_4(D)->D.41044
    # DEBUG this => D#608
    _19 = (long unsigned int) _168;
    __first_20 = iftmp.24_127 + _19;
    # DEBUG __first => __first_20
    # DEBUG __n => __n_2(D)
    # DEBUG __x => __x_21(D)
    # DEBUG __niter => __n_2(D)
    # DEBUG __first => __first_20

  }
  bb_36 (preds = {bb_34 }, succs = {bb_51 })
  {
    <bb 36>:

  }
  bb_51 (preds = {bb_36 }, succs = {bb_38 bb_37 })
  {
    <bb 51>:
    # DEBUG __new_finish => 0B
    # DEBUG D#609 => &this_4(D)->D.41044
    # DEBUG this => D#609
    # DEBUG this => &__position
    # DEBUG D#1090 => this_4(D)->D.41044._M_impl._M_start
    # DEBUG __first => D#1090
    # DEBUG __last => D#1091
    # DEBUG __result => NULL
    # DEBUG __alloc => D#607
    # DEBUG D#606 => D#607
    # DEBUG D#603 => D#606
    # DEBUG __first => D#1090
    # DEBUG __last => D#1091
    # DEBUG __result => NULL
    # DEBUG D.59364 => D#603
    # DEBUG __first => D#1090
    # DEBUG __last => D#1091
    # DEBUG __result => NULL
    # DEBUG __assignable => 1
    # DEBUG __first => D#1090
    # DEBUG __last => D#1091
    # DEBUG __result => NULL
    # DEBUG __first => D#1090
    # DEBUG __last => D#1091
    # DEBUG __result => NULL
    # DEBUG __it => D#1091
    # DEBUG __it => D#1091
    # DEBUG __it => D#1090
    # DEBUG __it => D#1090
    # DEBUG __first => D#1090
    # DEBUG __last => D#1091
    # DEBUG __result => NULL
    # DEBUG __it => NULL
    # DEBUG __it => NULL
    # DEBUG __it => D#1091
    # DEBUG __it => D#1091
    # DEBUG __it => D#1090
    # DEBUG __it => D#1090
    # DEBUG __first => D#1090
    # DEBUG __last => D#1091
    # DEBUG __result => NULL
    # DEBUG __simple => 1
    # DEBUG __first => D#1090
    # DEBUG __last => D#1091
    # DEBUG __result => NULL
    # DEBUG D#1089 => (long int) D#1090
    # DEBUG D#1088 => _173 - D#1089
    _Num_83 = prephitmp_151 /[ex] 16;
    # DEBUG _Num => _Num_83
    if (_Num_83 != 0)
      goto <bb 38>;
    else
      goto <bb 37>;

  }
  bb_37 (preds = {bb_51 }, succs = {bb_39 })
  {
    <bb 37>:
    pretmp_92 = (long unsigned int) prephitmp_151;
    goto <bb 39>;

  }
  bb_38 (preds = {bb_51 }, succs = {bb_39 })
  {
    <bb 38>:
    _84 = (long unsigned int) prephitmp_151;
    # .MEM_104 = VDEF <.MEM_103>
    __builtin_memmove (iftmp.24_127, prephitmp_161, _84);

  }
  bb_39 (preds = {bb_37 bb_38 }, succs = {bb_41 bb_40 })
  {
    <bb 39>:
    # .MEM_100 = PHI <.MEM_103(37), .MEM_104(38)>
    # prephitmp_117 = PHI <pretmp_92(37), _84(38)>
    # DEBUG D#1087 => (long unsigned int) D#1088
    # DEBUG __new_finish => iftmp.24_127 + D#1087
    _25 = __n_2(D) * 16;
    _147 = _25 + prephitmp_117;
    __new_finish_26 = iftmp.24_127 + _147;
    # DEBUG __new_finish => __new_finish_26
    # DEBUG D#610 => &this_4(D)->D.41044
    # DEBUG this => D#610
    # DEBUG D#1086 => this_4(D)->D.41044._M_impl._M_finish
    # DEBUG this => &__position
    # DEBUG __first => D#1091
    # DEBUG __last => D#1086
    # DEBUG __result => __new_finish_26
    # DEBUG __alloc => D#607
    # DEBUG D#606 => D#607
    # DEBUG D#603 => D#606
    # DEBUG __first => D#1091
    # DEBUG __last => D#1086
    # DEBUG __result => __new_finish_26
    # DEBUG D.59325 => D#603
    # DEBUG __first => D#1091
    # DEBUG __last => D#1086
    # DEBUG __result => __new_finish_26
    # DEBUG __assignable => 1
    # DEBUG __first => D#1091
    # DEBUG __last => D#1086
    # DEBUG __result => __new_finish_26
    # DEBUG __first => D#1091
    # DEBUG __last => D#1086
    # DEBUG __result => __new_finish_26
    # DEBUG __it => D#1086
    # DEBUG __it => D#1086
    # DEBUG __it => D#1091
    # DEBUG __it => D#1091
    # DEBUG __first => D#1091
    # DEBUG __last => D#1086
    # DEBUG __result => __new_finish_26
    # DEBUG __it => __new_finish_26
    # DEBUG __it => __new_finish_26
    # DEBUG __it => D#1086
    # DEBUG __it => D#1086
    # DEBUG __it => D#1091
    # DEBUG __it => D#1091
    # DEBUG __first => D#1091
    # DEBUG __last => D#1086
    # DEBUG __result => __new_finish_26
    # DEBUG __simple => 1
    # DEBUG __first => D#1091
    # DEBUG __last => D#1086
    # DEBUG __result => __new_finish_26
    _75 = prephitmp_135 - _173;
    _Num_76 = _75 /[ex] 16;
    # DEBUG _Num => _Num_76
    if (_Num_76 != 0)
      goto <bb 41>;
    else
      goto <bb 40>;

  }
  bb_40 (preds = {bb_39 }, succs = {bb_42 })
  {
    <bb 40>:
    pretmp_116 = (long unsigned int) _75;
    goto <bb 42>;

  }
  bb_41 (preds = {bb_39 }, succs = {bb_42 })
  {
    <bb 41>:
    _77 = (long unsigned int) _75;
    # .MEM_105 = VDEF <.MEM_100>
    __builtin_memcpy (__new_finish_26, __position_16, _77);

  }
  bb_42 (preds = {bb_40 bb_41 }, succs = {bb_43 bb_44 })
  {
    <bb 42>:
    # .MEM_101 = PHI <.MEM_100(40), .MEM_105(41)>
    # prephitmp_177 = PHI <pretmp_116(40), _77(41)>
    _79 = __new_finish_26 + prephitmp_177;
    # DEBUG __new_finish => _79
    # DEBUG D#611 => &this_4(D)->D.41044
    # DEBUG this => D#611
    # DEBUG D#627 => this_4(D)->D.41044._M_impl._M_finish
    # DEBUG D#626 => this_4(D)->D.41044._M_impl._M_start
    # DEBUG __first => D#626
    # DEBUG __last => D#627
    # DEBUG D.59318 => NULL
    # DEBUG D#162 => D#626
    # DEBUG D#163 => D#627
    # DEBUG __first => D#162
    # DEBUG __last => D#163
    # DEBUG D#161 => D#163
    # DEBUG D#160 => D#162
    # DEBUG D#158 => D#160
    # DEBUG D#159 => D#161
    # DEBUG D.53119 => D#158
    # DEBUG D.53118 => D#159
    # DEBUG D#625 => this_4(D)->D.41044._M_impl._M_end_of_storage
    # DEBUG D#624 => (long int) D#625
    # DEBUG D#623 => (long int) D#1090
    # DEBUG D#622 => D#624 - D#623
    # DEBUG D#621 => D#622 /[ex] 16
    # DEBUG D#620 => (long unsigned int) D#621
    # DEBUG D#619 => &this_4(D)->D.41044
    # DEBUG this => D#619
    # DEBUG __p => D#1090
    # DEBUG __n => D#620
    if (prephitmp_161 != 0B)
      goto <bb 43>;
    else
      goto <bb 44>;

  }
  bb_43 (preds = {bb_42 }, succs = {bb_44 })
  {
    <bb 43>:
    # DEBUG D#286 => &D#619->_M_impl
    # DEBUG D#284 => D#286
    # DEBUG D#285 => D#620
    # DEBUG __p => D#1090
    # DEBUG __a => D#284
    # DEBUG __n => D#285
    # DEBUG D#283 => D#285
    # DEBUG D#282 => D#284
    # DEBUG D#280 => D#282
    # DEBUG D#281 => D#283
    # DEBUG __p => D#1090
    # DEBUG this => D#280
    # DEBUG D.59314 => D#281
    # .MEM_107 = VDEF <.MEM_101>
    operator delete (prephitmp_161);

  }
  bb_44 (preds = {bb_43 bb_42 }, succs = {bb_53 })
  {
    <bb 44>:
    # .MEM_102 = PHI <.MEM_107(43), .MEM_101(42)>

  }
  bb_53 (preds = {bb_44 }, succs = {bb_45 })
  {
    <bb 53>:
    # .MEM_33 = VDEF <.MEM_102>
    this_4(D)->D.41044._M_impl._M_start = iftmp.24_127;
    # .MEM_34 = VDEF <.MEM_33>
    this_4(D)->D.41044._M_impl._M_finish = _79;
    # .MEM_37 = VDEF <.MEM_34>
    this_4(D)->D.41044._M_impl._M_end_of_storage = prephitmp_163;

  }
  bb_45 (preds = {bb_55 bb_53 }, succs = {bb_54 })
  {
    <bb 45>:
    # .MEM_1 = PHI <.MEM_186(55), .MEM_37(53)>

  }
  bb_54 (preds = {bb_45 }, succs = {bb_1 })
  {
    <bb 54>:
    # VUSE <.MEM_1>
    return;

  }
  bb_46 (preds = {bb_30 }, succs = {bb_32 })
  {
    <bb 46>:
    # DEBUG __len => NULL
    # DEBUG this => this_4(D)
    # DEBUG D#169 => &this_4(D)->D.41044._M_impl._M_start
    # DEBUG this => NULL
    # DEBUG __i => D#169
    # DEBUG __lhs => &__position
    # DEBUG __rhs => &D.45189
    # DEBUG this => &__position
    _157 = (long int) __position_16;
    # DEBUG this => &D.45189
    _156 = _157 - _130;
    # DEBUG D#629 => _156 /[ex] 16
    # DEBUG __elems_before => (const size_type) D#629
    # DEBUG D#628 => &this_4(D)->D.41044
    # DEBUG D#506 => D#628
    # DEBUG __n => NULL
    # DEBUG this => D#506
    # DEBUG D#505 => D#506
    goto <bb 32>;

  }
  bb_47 (preds = {bb_30 }, succs = {bb_31 bb_33 })
  {
    <bb 47>:
    # DEBUG __len => NULL
    # DEBUG this => this_4(D)
    # DEBUG D#169 => &this_4(D)->D.41044._M_impl._M_start
    # DEBUG this => NULL
    # DEBUG __i => D#169
    # DEBUG __lhs => &__position
    # DEBUG __rhs => &D.45189
    # DEBUG this => &__position
    _166 = (long int) __position_16;
    # DEBUG this => &D.45189
    _165 = _166 - _130;
    # DEBUG D#629 => _165 /[ex] 16
    # DEBUG __elems_before => (const size_type) D#629
    # DEBUG D#628 => &this_4(D)->D.41044
    # DEBUG D#506 => D#628
    # DEBUG __n => NULL
    # DEBUG this => D#506
    # DEBUG D#505 => D#506
    if (__len_138 != 0)
      goto <bb 31>;
    else
      goto <bb 33>;

  }
  loop_1 (header = 12, latch = 14, niter = ((unsigned long) _53 - (unsigned long) (__position_16 + 16)) /[ex] 16 & 1152921504606846975, upper_bound = 1152921504606846974)
  {
    bb_12 (preds = {bb_11 bb_14 }, succs = {bb_13 bb_14 })
    {
      <bb 12>:
      # __position_123 = PHI <__position_16(11), __position_15(14)>
      # .MEM_93 = PHI <.MEM_12(11), .MEM_59(14)>
      # DEBUG __first => __position_123
      # .MEM_113 = VDEF <.MEM_93>
      MEM[(struct sRequest *)__position_123] = __x_copy$port_115;
      # .MEM_62 = VDEF <.MEM_113>
      MEM[(struct sRequest *)__position_123 + 4B] = __x_copy$label_112;
      # .MEM_61 = VDEF <.MEM_62>
      MEM[(struct sRequest *)__position_123 + 8B] = __x_copy$in_pri_110;
      # .MEM_59 = VDEF <.MEM_61>
      MEM[(struct sRequest *)__position_123 + 12B] = __x_copy$out_pri_40;
      __position_15 = __position_123 + 16;
      # DEBUG __first => __position_15
      # DEBUG __first => __position_15
      if (__position_15 == _53)
        goto <bb 13>;
      else
        goto <bb 14>;

    }
    bb_14 (preds = {bb_12 }, succs = {bb_12 })
    {
      <bb 14>:
      goto <bb 12>;

    }
  }
  loop_2 (header = 25, latch = 27, niter = ((unsigned long) __first_7 - (unsigned long) (__position_16 + 16)) /[ex] 16 & 1152921504606846975, upper_bound = 1152921504606846974)
  {
    bb_25 (preds = {bb_24 bb_27 }, succs = {bb_26 bb_27 })
    {
      <bb 25>:
      # __position_124 = PHI <__position_16(24), __position_67(27)>
      # .MEM_150 = PHI <.MEM_65(24), .MEM_32(27)>
      # DEBUG __first => __position_124
      # .MEM_108 = VDEF <.MEM_150>
      MEM[(struct sRequest *)__position_124] = __x_copy$port_115;
      # .MEM_42 = VDEF <.MEM_108>
      MEM[(struct sRequest *)__position_124 + 4B] = __x_copy$label_112;
      # .MEM_41 = VDEF <.MEM_42>
      MEM[(struct sRequest *)__position_124 + 8B] = __x_copy$in_pri_110;
      # .MEM_32 = VDEF <.MEM_41>
      MEM[(struct sRequest *)__position_124 + 12B] = __x_copy$out_pri_40;
      __position_67 = __position_124 + 16;
      # DEBUG __first => __position_67
      # DEBUG __first => __position_67
      if (__first_7 == __position_67)
        goto <bb 26>;
      else
        goto <bb 27>;

    }
    bb_27 (preds = {bb_25 }, succs = {bb_25 })
    {
      <bb 27>:
      goto <bb 25>;

    }
  }
  loop_3 (header = 17, latch = 19, niter = , upper_bound = 0x0ffffffffffffffff)
  {
    bb_17 (preds = {bb_16 bb_19 }, succs = {bb_18 bb_19 })
    {
      <bb 17>:
      # __n_125 = PHI <__n_58(16), __n_72(19)>
      # __first_86 = PHI <__first_7(16), __first_73(19)>
      # .MEM_91 = PHI <.MEM_3(D)(16), .MEM_46(19)>
      # DEBUG __niter => __n_125
      # DEBUG __first => __first_86
      # .MEM_111 = VDEF <.MEM_91>
      MEM[(struct sRequest *)__first_86] = __x_copy$port_115;
      # .MEM_57 = VDEF <.MEM_111>
      MEM[(struct sRequest *)__first_86 + 4B] = __x_copy$label_112;
      # .MEM_55 = VDEF <.MEM_57>
      MEM[(struct sRequest *)__first_86 + 8B] = __x_copy$in_pri_110;
      # .MEM_46 = VDEF <.MEM_55>
      MEM[(struct sRequest *)__first_86 + 12B] = __x_copy$out_pri_40;
      __n_72 = __n_125 + 18446744073709551615;
      # DEBUG __niter => __n_72
      __first_73 = __first_86 + 16;
      # DEBUG __first => __first_73
      # DEBUG __niter => __n_72
      # DEBUG __first => __first_73
      if (__n_72 == 0)
        goto <bb 18>;
      else
        goto <bb 19>;

    }
    bb_19 (preds = {bb_17 }, succs = {bb_17 })
    {
      <bb 19>:
      goto <bb 17>;

    }
  }
  loop_4 (header = 34, latch = 35, niter = , upper_bound = 0x0ffffffffffffffff)
  {
    bb_34 (preds = {bb_35 bb_52 }, succs = {bb_36 bb_35 })
    {
      <bb 34>:
      # __n_146 = PHI <__n_89(35), __n_2(D)(52)>
      # __first_170 = PHI <__first_90(35), __first_20(52)>
      # .MEM_144 = PHI <.MEM_103(35), .MEM_140(52)>
      # DEBUG __niter => __n_146
      # DEBUG __first => __first_170
      # .MEM_103 = VDEF <.MEM_144>
      *__first_170 = MEM[(const struct sRequest &)__x_21(D)];
      __n_89 = __n_146 + 18446744073709551615;
      # DEBUG __niter => __n_89
      __first_90 = __first_170 + 16;
      # DEBUG __first => __first_90
      # DEBUG __niter => __n_89
      # DEBUG __first => __first_90
      if (__n_89 == 0)
        goto <bb 36>;
      else
        goto <bb 35>;

    }
    bb_35 (preds = {bb_34 }, succs = {bb_34 })
    {
      <bb 35>:
      goto <bb 34>;

    }
  }
}

Pass statistics:
----------------

void std::vector<_Tp, _Alloc>::_M_fill_insert(std::vector<_Tp, _Alloc>::iterator, std::vector<_Tp, _Alloc>::size_type, const value_type&) [with _Tp = Allocator::sRequest; _Alloc = std::allocator<Allocator::sRequest>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<Allocator::sRequest*, std::vector<Allocator::sRequest> >; typename std::_Vector_base<_Tp, _Alloc>::pointer = Allocator::sRequest*; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::value_type = Allocator::sRequest] (struct vectorD.35482 * const thisD.40968, struct iteratorD.40612 __positionD.40969, size_typeD.40620 __nD.40970, const struct value_typeD.40607 & __xD.40971)
{
  const long unsigned intD.14 D.65848;
  const size_typeD.40620 __lenD.65842;
  size_typeD.40620 D.65847;
  size_typeD.40620 __nD.65840;
  struct sRequestD.35378 * D.65838;
  const ptrdiff_tD.2819 _NumD.65828;
  struct sRequestD.35378 * D.65829;
  intD.9 __x_copy$out_priD.59433;
  intD.9 __x_copy$in_priD.59432;
  intD.9 __x_copy$labelD.59431;
  intD.9 __x_copy$portD.59430;
  struct sRequestD.35378 * const __positionD.59429;
  struct sRequestD.35378 * __firstD.59399;
  const ptrdiff_tD.2819 _NumD.59393;
  const ptrdiff_tD.2819 _NumD.59354;
  struct sRequestD.35378 * __firstD.59284;
  long unsigned intD.14 __nD.59285;
  struct sRequestD.35378 * __firstD.59237;
  const ptrdiff_tD.2819 _NumD.59233;
  struct sRequestD.35378 * __firstD.59188;
  struct sRequestD.35378 * __new_finishD.45191;
  const size_typeD.40620 __elems_afterD.45155;
  struct sRequestD.35378 * _5;
  long intD.12 _6;
  long intD.12 _8;
  long intD.12 _9;
  long intD.12 _10;
  long unsigned intD.14 _11;
  struct sRequestD.35378 * const _17;
  long unsigned intD.14 _19;
  difference_typeD.43543 _22;
  long intD.12 _23;
  long unsigned intD.14 _25;
  long intD.12 _27;
  struct sRequestD.35378 * pretmp_31;
  long unsigned intD.14 _43;
  sizetype _44;
  struct sRequestD.35378 * _45;
  struct sRequestD.35378 * _48;
  long unsigned intD.14 _50;
  struct sRequestD.35378 * _53;
  long intD.12 _54;
  long intD.12 __first.27_56;
  struct sRequestD.35378 * _64;
  long unsigned intD.14 _68;
  long intD.12 _75;
  long unsigned intD.14 _77;
  struct sRequestD.35378 * _79;
  long unsigned intD.14 _84;
  long unsigned intD.14 _87;
  long unsigned intD.14 pretmp_92;
  long unsigned intD.14 pretmp_116;
  long unsigned intD.14 prephitmp_117;
  long intD.12 _118;
  long unsigned intD.14 _120;
  sizetype _121;
  struct sRequestD.35378 * _122;
  struct sRequestD.35378 * _126;
  struct sRequestD.35378 * iftmp.24_127;
  boolD.2757 _128;
  long intD.12 _130;
  long intD.12 _131;
  long intD.12 _132;
  long unsigned intD.14 _134;
  long intD.12 prephitmp_135;
  long unsigned intD.14 _147;
  long intD.12 prephitmp_151;
  long intD.12 pretmp_152;
  boolD.2757 _155;
  long intD.12 _156;
  long intD.12 _157;
  long intD.12 pretmp_158;
  long intD.12 pretmp_160;
  struct sRequestD.35378 * prephitmp_161;
  struct sRequestD.35378 * pretmp_162;
  struct sRequestD.35378 * prephitmp_163;
  struct sRequestD.35378 * pretmp_164;
  long intD.12 _165;
  long intD.12 _166;
  boolD.2757 _167;
  long intD.12 _168;
  long intD.12 _171;
  long intD.12 _172;
  long intD.12 _173;
  long unsigned intD.14 _175;
  long unsigned intD.14 prephitmp_177;
  long unsigned intD.14 pretmp_178;
  long unsigned intD.14 prephitmp_179;
  struct sRequestD.35378 * pretmp_180;
  struct sRequestD.35378 * prephitmp_181;
  long unsigned intD.14 pretmp_182;
  long unsigned intD.14 prephitmp_183;
  struct sRequestD.35378 * pretmp_187;
  struct sRequestD.35378 * prephitmp_188;

;;   basic block 2, loop depth 0, count 0, freq 4156, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#1091ptD.0 => MEM[(struct __normal_iteratorD.40613 *)&__positionD.40969]
  # DEBUG __positionD.59429 => D#1091ptD.0
  if (__n_2(D) != 0)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 3421, maybe hot
;;    prev block 2, next block 55, flags: (NEW)
;;    pred:       2 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                48 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                49 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_186 = PHI <.MEM_3(D)(2), .MEM_12(10), .MEM_13(48), .MEM_65(23), .MEM_169(49)>
;;    succ:       55 [100.0%]  (FALLTHRU)

;;   basic block 55, loop depth 0, count 0, freq 3421, maybe hot
;;    prev block 3, next block 4, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU)
  goto <bb 45>;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 2535, maybe hot
;;    prev block 55, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  # PT = nonlocal 
  __position_16 = MEM[(struct __normal_iteratorD.40613 *)&__positionD.40969];
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _5 = this_4(D)->D.41044._M_implD.40535._M_end_of_storageD.40539;
  _6 = (long intD.12) _5;
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  __first_7 = this_4(D)->D.41044._M_implD.40535._M_finishD.40538;
  _8 = (long intD.12) __first_7;
  _9 = _6 - _8;
  # RANGE [-576460752303423488, 576460752303423487]
  _10 = _9 /[ex] 16;
  # RANGE ~[576460752303423488, 17870283321406128127]
  _11 = (long unsigned intD.14) _10;
  if (__n_2(D) <= _11)
    goto <bb 5>;
  else
    goto <bb 28>;
;;    succ:       5 [71.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [29.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 1800, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [71.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_3(D)>
  __x_copy$port_115 = MEM[(const struct sRequestD.35378 &)__x_21(D)];
  # DEBUG __x_copy$portD.59430 => __x_copy$port_115
  # VUSE <.MEM_3(D)>
  __x_copy$label_112 = MEM[(const struct sRequestD.35378 &)__x_21(D) + 4];
  # DEBUG __x_copy$labelD.59431 => __x_copy$label_112
  # VUSE <.MEM_3(D)>
  __x_copy$in_pri_110 = MEM[(const struct sRequestD.35378 &)__x_21(D) + 8];
  # DEBUG __x_copy$in_priD.59432 => __x_copy$in_pri_110
  # VUSE <.MEM_3(D)>
  __x_copy$out_pri_40 = MEM[(const struct sRequestD.35378 &)__x_21(D) + 12];
  # DEBUG __x_copy$out_priD.59433 => __x_copy$out_pri_40
  # DEBUG thisD.59183 => this_4(D)
  # DEBUG D#104ptD.0 => &this_4(D)->D.41044._M_implD.40535._M_finishD.40538
  # DEBUG thisD.59185 => NULL
  # DEBUG __iD.59184 => D#104ptD.0
  # DEBUG __lhsD.59180 => &D.45156
  # DEBUG __rhsD.59181 => &__positionD.40969
  # DEBUG thisD.53161 => &D.45156
  # DEBUG thisD.53159 => &__positionD.40969
  _27 = (long intD.12) __position_16;
  _23 = _8 - _27;
  # RANGE [-576460752303423488, 576460752303423487]
  _22 = _23 /[ex] 16;
  # RANGE ~[576460752303423488, 17870283321406128127]
  __elems_after_39 = (const size_typeD.40620) _22;
  # DEBUG __elems_afterD.45155 => __elems_after_39
  # DEBUG __old_finishD.45163 => __first_7
  if (__n_2(D) < __elems_after_39)
    goto <bb 6>;
  else
    goto <bb 15>;
;;    succ:       6 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#612ptD.0 => &this_4(D)->D.41044
  # DEBUG thisD.59235 => D#612ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _43 = __n_2(D) * 16;
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _44 = -_43;
  # PT = nonlocal escaped 
  _45 = __first_7 + _44;
  # DEBUG __firstD.59200 => _45
  # DEBUG __lastD.59201 => __first_7
  # DEBUG __resultD.59202 => __first_7
  # DEBUG __allocD.59203 => D#605ptD.0
  # DEBUG D#604ptD.0 => D#605ptD.0
  # DEBUG D#603ptD.0 => D#604ptD.0
  # DEBUG __firstD.59207 => _45
  # DEBUG __lastD.59206 => __first_7
  # DEBUG __resultD.59205 => __first_7
  # DEBUG D.59204 => D#603ptD.0
  # DEBUG __firstD.59210 => _45
  # DEBUG __lastD.59209 => __first_7
  # DEBUG __resultD.59208 => __first_7
  # DEBUG __assignableD.59213 => 1
  # DEBUG __firstD.59216 => _45
  # DEBUG __lastD.59215 => __first_7
  # DEBUG __resultD.59214 => __first_7
  # DEBUG __firstD.59219 => _45
  # DEBUG __lastD.59218 => __first_7
  # DEBUG __resultD.59217 => __first_7
  # DEBUG __itD.58931 => __first_7
  # DEBUG __itD.54893 => __first_7
  # DEBUG __itD.58929 => _45
  # DEBUG __itD.54893 => _45
  # DEBUG __firstD.59222 => _45
  # DEBUG __lastD.59221 => __first_7
  # DEBUG __resultD.59220 => __first_7
  # DEBUG __itD.58911 => __first_7
  # DEBUG __itD.54882 => __first_7
  # DEBUG __itD.58909 => __first_7
  # DEBUG __itD.54882 => __first_7
  # DEBUG __itD.58907 => _45
  # DEBUG __itD.54882 => _45
  # DEBUG __firstD.59225 => _45
  # DEBUG __lastD.59224 => __first_7
  # DEBUG __resultD.59223 => __first_7
  # DEBUG __simpleD.59229 => 1
  # DEBUG __firstD.59232 => _45
  # DEBUG __lastD.59231 => __first_7
  # DEBUG __resultD.59230 => __first_7
  __first.27_56 = (long intD.12) _45;
  _54 = _8 - __first.27_56;
  # RANGE [-576460752303423488, 576460752303423487]
  _Num_52 = _54 /[ex] 16;
  # DEBUG _NumD.59233 => _Num_52
  if (_Num_52 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 261, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _50 = (long unsigned intD.14) _54;
  # .MEM_109 = VDEF <.MEM_3(D)>
  # USE = nonlocal null { D.65851 } (escaped heap)
  # CLB = nonlocal null { D.65851 } (escaped heap)
  memmoveD.995 (__first_7, _45, _50);
  # VUSE <.MEM_109>
  pretmp_187 = this_4(D)->D.41044._M_implD.40535._M_finishD.40538;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_14 = PHI <.MEM_3(D)(6), .MEM_109(7)>
  # PT = nonlocal escaped 
  # prephitmp_188 = PHI <__first_7(6), pretmp_187(7)>
  # PT = nonlocal escaped 
  _48 = prephitmp_188 + _43;
  # .MEM_49 = VDEF <.MEM_14>
  this_4(D)->D.41044._M_implD.40535._M_finishD.40538 = _48;
  # DEBUG thisD.59198 => &__positionD.40969
  # DEBUG __firstD.65812 => D#1091ptD.0
  # DEBUG __lastD.65813 => _45
  # DEBUG __resultD.65814 => __first_7
  # DEBUG __itD.57421 => _45
  # DEBUG __itD.54893 => _45
  # DEBUG __itD.57419 => D#1091ptD.0
  # DEBUG __itD.54893 => D#1091ptD.0
  # DEBUG __firstD.65817 => D#1091ptD.0
  # DEBUG __lastD.65816 => _45
  # DEBUG __resultD.65815 => __first_7
  # DEBUG __itD.57401 => __first_7
  # DEBUG __itD.54882 => __first_7
  # DEBUG __itD.57399 => _45
  # DEBUG __itD.54882 => _45
  # DEBUG __itD.57397 => D#1091ptD.0
  # DEBUG __itD.54882 => D#1091ptD.0
  # DEBUG __firstD.65820 => D#1091ptD.0
  # DEBUG __lastD.65819 => _45
  # DEBUG __resultD.65818 => __first_7
  # DEBUG __simpleD.65824 => 1
  # DEBUG __firstD.65827 => D#1091ptD.0
  # DEBUG __lastD.65826 => _45
  # DEBUG __resultD.65825 => __first_7
  _118 = __first.27_56 - _27;
  # RANGE [-576460752303423488, 576460752303423487]
  _Num_119 = _118 /[ex] 16;
  # DEBUG _NumD.65828 => _Num_119
  if (_Num_119 != 0)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _120 = (long unsigned intD.14) _118;
  # RANGE [0, 18446744073709551615]
  _121 = -_120;
  # PT = nonlocal escaped 
  _122 = __first_7 + _121;
  # .MEM_149 = VDEF <.MEM_49>
  # USE = nonlocal null { D.65851 } (escaped heap)
  # CLB = nonlocal null { D.65851 } (escaped heap)
  memmoveD.995 (_122, __position_16, _120);
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_12 = PHI <.MEM_49(8), .MEM_149(9)>
  # DEBUG thisD.59196 => &__positionD.40969
  # PT = nonlocal 
  _53 = __position_16 + _43;
  # DEBUG thisD.59194 => &__positionD.40969
  # DEBUG __firstD.59188 => D#1091ptD.0
  # DEBUG __lastD.59189 => _53
  # DEBUG __valueD.59190 => &__x_copyD.45153
  # DEBUG __firstD.59193 => D#1091ptD.0
  if (__position_16 == _53)
    goto <bb 3>;
  else
    goto <bb 11>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  # __position_123 = PHI <__position_16(11), __position_15(14)>
  # .MEM_93 = PHI <.MEM_12(11), .MEM_59(14)>
  # DEBUG __firstD.59193 => __position_123
  # .MEM_113 = VDEF <.MEM_93>
  MEM[(struct sRequestD.35378 *)__position_123] = __x_copy$port_115;
  # .MEM_62 = VDEF <.MEM_113>
  MEM[(struct sRequestD.35378 *)__position_123 + 4B] = __x_copy$label_112;
  # .MEM_61 = VDEF <.MEM_62>
  MEM[(struct sRequestD.35378 *)__position_123 + 8B] = __x_copy$in_pri_110;
  # .MEM_59 = VDEF <.MEM_61>
  MEM[(struct sRequestD.35378 *)__position_123 + 12B] = __x_copy$out_pri_40;
  # PT = nonlocal 
  __position_15 = __position_123 + 16;
  # DEBUG __firstD.59193 => __position_15
  # DEBUG __firstD.59193 => __position_15
  if (__position_15 == _53)
    goto <bb 13>;
  else
    goto <bb 14>;
;;    succ:       13 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 12, next block 48, flags: (NEW)
;;    pred:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_13 = PHI <.MEM_59(12)>
;;    succ:       48 [100.0%]  (FALLTHRU)

;;   basic block 48, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 13, next block 14, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU)
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 48, next block 15, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       5 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#613ptD.0 => &this_4(D)->D.41044
  # DEBUG thisD.59304 => D#613ptD.0
  # RANGE [0, 18446744073709551615]
  __n_58 = __n_2(D) - __elems_after_39;
  # DEBUG __firstD.59284 => __first_7
  # DEBUG __nD.59285 => __n_58
  # DEBUG __xD.59286 => &__x_copyD.45153
  # DEBUG __niterD.59302 => __n_58
  # DEBUG __firstD.59301 => __first_7
  if (__n_58 == 0)
    goto <bb 20>;
  else
    goto <bb 16>;
;;    succ:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __n_125 = PHI <__n_58(16), __n_72(19)>
  # PT = nonlocal escaped 
  # __first_86 = PHI <__first_7(16), __first_73(19)>
  # .MEM_91 = PHI <.MEM_3(D)(16), .MEM_46(19)>
  # DEBUG __niterD.59302 => __n_125
  # DEBUG __firstD.59301 => __first_86
  # .MEM_111 = VDEF <.MEM_91>
  MEM[(struct sRequestD.35378 *)__first_86] = __x_copy$port_115;
  # .MEM_57 = VDEF <.MEM_111>
  MEM[(struct sRequestD.35378 *)__first_86 + 4B] = __x_copy$label_112;
  # .MEM_55 = VDEF <.MEM_57>
  MEM[(struct sRequestD.35378 *)__first_86 + 8B] = __x_copy$in_pri_110;
  # .MEM_46 = VDEF <.MEM_55>
  MEM[(struct sRequestD.35378 *)__first_86 + 12B] = __x_copy$out_pri_40;
  # RANGE [0, 18446744073709551614]
  __n_72 = __n_125 + 18446744073709551615;
  # DEBUG __niterD.59302 => __n_72
  # PT = nonlocal escaped 
  __first_73 = __first_86 + 16;
  # DEBUG __firstD.59301 => __first_73
  # DEBUG __niterD.59302 => __n_72
  # DEBUG __firstD.59301 => __first_73
  if (__n_72 == 0)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 17, next block 50, flags: (NEW)
;;    pred:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       50 [100.0%]  (FALLTHRU)

;;   basic block 50, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 18, next block 19, flags: (NEW)
;;    pred:       18 [100.0%]  (FALLTHRU)
  _175 = __n_58 * 16;
  # PT = nonlocal escaped 
  __first_142 = __first_7 + _175;
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 50, next block 20, flags: (NEW)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       50 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_139 = PHI <__first_142(50), __first_7(15)>
  # .MEM_94 = PHI <.MEM_46(50), .MEM_3(D)(15)>
  # .MEM_60 = VDEF <.MEM_94>
  this_4(D)->D.41044._M_implD.40535._M_finishD.40538 = __first_139;
  # DEBUG D#614ptD.0 => &this_4(D)->D.41044
  # DEBUG thisD.59282 => D#614ptD.0
  # DEBUG thisD.59280 => &__positionD.40969
  # DEBUG __firstD.59245 => D#1091ptD.0
  # DEBUG __lastD.59246 => __first_7
  # DEBUG __resultD.59247 => __first_139
  # DEBUG __allocD.59248 => D#605ptD.0
  # DEBUG D#604ptD.0 => D#605ptD.0
  # DEBUG D#603ptD.0 => D#604ptD.0
  # DEBUG __firstD.59252 => D#1091ptD.0
  # DEBUG __lastD.59251 => __first_7
  # DEBUG __resultD.59250 => __first_139
  # DEBUG D.59249 => D#603ptD.0
  # DEBUG __firstD.59255 => D#1091ptD.0
  # DEBUG __lastD.59254 => __first_7
  # DEBUG __resultD.59253 => __first_139
  # DEBUG __assignableD.59258 => 1
  # DEBUG __firstD.59261 => D#1091ptD.0
  # DEBUG __lastD.59260 => __first_7
  # DEBUG __resultD.59259 => __first_139
  # DEBUG __firstD.59264 => D#1091ptD.0
  # DEBUG __lastD.59263 => __first_7
  # DEBUG __resultD.59262 => __first_139
  # DEBUG __itD.58931 => __first_7
  # DEBUG __itD.54893 => __first_7
  # DEBUG __itD.58929 => D#1091ptD.0
  # DEBUG __itD.54893 => D#1091ptD.0
  # DEBUG __firstD.59267 => D#1091ptD.0
  # DEBUG __lastD.59266 => __first_7
  # DEBUG __resultD.59265 => __first_139
  # DEBUG __itD.58911 => __first_139
  # DEBUG __itD.54882 => __first_139
  # DEBUG __itD.58909 => __first_7
  # DEBUG __itD.54882 => __first_7
  # DEBUG __itD.58907 => D#1091ptD.0
  # DEBUG __itD.54882 => D#1091ptD.0
  # DEBUG __firstD.59270 => D#1091ptD.0
  # DEBUG __lastD.59269 => __first_7
  # DEBUG __resultD.59268 => __first_139
  # DEBUG __simpleD.59274 => 1
  # DEBUG __firstD.59277 => D#1091ptD.0
  # DEBUG __lastD.59276 => __first_7
  # DEBUG __resultD.59275 => __first_139
  # DEBUG _NumD.59278 => _22
  if (_22 != 0)
    goto <bb 22>;
  else
    goto <bb 21>;
;;    succ:       22 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 639, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_182 = (long unsigned intD.14) _23;
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 261, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       20 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _68 = (long unsigned intD.14) _23;
  # .MEM_114 = VDEF <.MEM_60>
  # USE = nonlocal null { D.65851 } (escaped heap)
  # CLB = nonlocal null { D.65851 } (escaped heap)
  memmoveD.995 (__first_139, __position_16, _68);
  # VUSE <.MEM_114>
  pretmp_180 = this_4(D)->D.41044._M_implD.40535._M_finishD.40538;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       21 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_97 = PHI <.MEM_60(21), .MEM_114(22)>
  # PT = nonlocal escaped 
  # prephitmp_181 = PHI <__first_139(21), pretmp_180(22)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_183 = PHI <pretmp_182(21), _68(22)>
  # PT = nonlocal escaped 
  _64 = prephitmp_181 + prephitmp_183;
  # .MEM_65 = VDEF <.MEM_97>
  this_4(D)->D.41044._M_implD.40535._M_finishD.40538 = _64;
  # DEBUG thisD.59243 => &__positionD.40969
  # DEBUG __firstD.59237 => D#1091ptD.0
  # DEBUG __lastD.59238 => __first_7
  # DEBUG __valueD.59239 => &__x_copyD.45153
  # DEBUG __firstD.59242 => D#1091ptD.0
  if (__first_7 == __position_16)
    goto <bb 3>;
  else
    goto <bb 24>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 23, next block 25, flags: (NEW)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 24, next block 26, flags: (NEW)
;;    pred:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                27 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  # __position_124 = PHI <__position_16(24), __position_67(27)>
  # .MEM_150 = PHI <.MEM_65(24), .MEM_32(27)>
  # DEBUG __firstD.59242 => __position_124
  # .MEM_108 = VDEF <.MEM_150>
  MEM[(struct sRequestD.35378 *)__position_124] = __x_copy$port_115;
  # .MEM_42 = VDEF <.MEM_108>
  MEM[(struct sRequestD.35378 *)__position_124 + 4B] = __x_copy$label_112;
  # .MEM_41 = VDEF <.MEM_42>
  MEM[(struct sRequestD.35378 *)__position_124 + 8B] = __x_copy$in_pri_110;
  # .MEM_32 = VDEF <.MEM_41>
  MEM[(struct sRequestD.35378 *)__position_124 + 12B] = __x_copy$out_pri_40;
  # PT = nonlocal 
  __position_67 = __position_124 + 16;
  # DEBUG __firstD.59242 => __position_67
  # DEBUG __firstD.59242 => __position_67
  if (__first_7 == __position_67)
    goto <bb 26>;
  else
    goto <bb 27>;
;;    succ:       26 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 25, next block 49, flags: (NEW)
;;    pred:       25 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_169 = PHI <.MEM_32(25)>
;;    succ:       49 [100.0%]  (FALLTHRU)

;;   basic block 49, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 26, next block 27, flags: (NEW)
;;    pred:       26 [100.0%]  (FALLTHRU)
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 49, next block 28, flags: (NEW)
;;    pred:       25 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       4 [29.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.65839 => this_4(D)
  # DEBUG __nD.65840 => __n_2(D)
  # DEBUG __nD.65840 => __n_2(D)
  # DEBUG __sD.65841 => "vector::_M_fill_insert"
  # DEBUG D#513ptD.0 => this_4(D)
  # DEBUG thisD.57230 => D#513ptD.0
  # DEBUG D#512ptD.0 => D#513ptD.0
  # DEBUG D#511ptD.0 => &D#512ptD.0->D.41044
  # DEBUG thisD.57220 => D#511ptD.0
  # DEBUG __aD.57212 => D#510ptD.0
  # DEBUG D#509ptD.0 => D#510ptD.0
  # DEBUG D#498ptD.0 => D#509ptD.0
  # DEBUG thisD.57203 => D#498ptD.0
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  _17 = MEM[(struct sRequestD.35378 * *)this_4(D)];
  # DEBUG D#88ptD.0 => this_4(D)
  # DEBUG D#88ptD.0 => this_4(D)
  # DEBUG thisD.65845 => D#88ptD.0
  # DEBUG thisD.65846 => D#88ptD.0
  _130 = (long intD.12) _17;
  _131 = _8 - _130;
  # RANGE [-576460752303423488, 576460752303423487]
  _132 = _131 /[ex] 16;
  # RANGE ~[576460752303423488, 17870283321406128127]
  _133 = (const long unsigned intD.14) _132;
  # RANGE [576460752303423488, 1729382256910270463] NONZERO 2305843009213693951
  _134 = 1152921504606846975 - _133;
  if (__n_2(D) > _134)
    goto <bb 29>;
  else
    goto <bb 30>;
;;    succ:       29 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 0
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       28 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_148 = VDEF <.MEM_3(D)>
  # USE = nonlocal null { D.65851 } (escaped heap)
  # CLB = nonlocal null { D.65851 } (escaped heap)
  _ZSt20__throw_length_errorPKcD.2860 ("vector::_M_fill_insert");
;;    succ:      

;;   basic block 30, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       28 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#88ptD.0 => this_4(D)
  # DEBUG D#88ptD.0 => this_4(D)
  # DEBUG thisD.57248 => D#88ptD.0
  # DEBUG thisD.57247 => D#88ptD.0
  # DEBUG D#88ptD.0 => this_4(D)
  # DEBUG D#88ptD.0 => this_4(D)
  # DEBUG thisD.57243 => D#88ptD.0
  # DEBUG thisD.57242 => D#88ptD.0
  # DEBUG __aD.65844 => &D.65848
  # DEBUG __bD.65843 => &__nD.65840
  _87 = MAX_EXPR <__n_2(D), _133>;
  # RANGE [0, 18446744073709551615]
  __len_138 = _87 + _133;
  # DEBUG __lenD.65842 => __len_138
  # DEBUG D#88ptD.0 => this_4(D)
  # DEBUG D#88ptD.0 => this_4(D)
  # DEBUG thisD.57235 => D#88ptD.0
  # DEBUG thisD.57234 => D#88ptD.0
  # DEBUG D#513ptD.0 => this_4(D)
  # DEBUG thisD.57250 => D#513ptD.0
  # DEBUG D#512ptD.0 => D#513ptD.0
  # DEBUG D#511ptD.0 => &D#512ptD.0->D.41044
  # DEBUG thisD.57220 => D#511ptD.0
  # DEBUG __aD.57212 => D#510ptD.0
  # DEBUG D#509ptD.0 => D#510ptD.0
  # DEBUG D#498ptD.0 => D#509ptD.0
  # DEBUG thisD.57203 => D#498ptD.0
  _167 = __len_138 > 1152921504606846975;
  _155 = _133 > __len_138;
  _128 = _155 | _167;
  if (_128 != 0)
    goto <bb 46>;
  else
    goto <bb 47>;
;;    succ:       46 [67.0%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [33.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 8, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       47 [9.4%]  (TRUE_VALUE,EXECUTABLE)
  pretmp_178 = __len_138 * 16;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 661, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       46 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,EXECUTABLE)
  # _171 = PHI <_157(46), _166(31)>
  # _172 = PHI <_156(46), _165(31)>
  # RANGE [16, 18446744073709551600] NONZERO 18446744073709551600
  # prephitmp_179 = PHI <18446744073709551600(46), pretmp_178(31)>
  # DEBUG __lenD.45187 => NULL
  # DEBUG thisD.59424 => this_4(D)
  # DEBUG D#169ptD.0 => &this_4(D)->D.41044._M_implD.40535._M_startD.40537
  # DEBUG thisD.59426 => NULL
  # DEBUG __iD.59425 => D#169ptD.0
  # DEBUG __lhsD.59421 => &__positionD.40969
  # DEBUG __rhsD.59422 => &D.45189
  # DEBUG thisD.53161 => &__positionD.40969
  # DEBUG thisD.53159 => &D.45189
  # DEBUG D#629ptD.0 => _172 /[ex] 16
  # DEBUG __elems_beforeD.45188 => (const size_typeD.40620) D#629ptD.0
  # DEBUG D#628ptD.0 => &this_4(D)->D.41044
  # DEBUG D#506ptD.0 => D#628ptD.0
  # DEBUG __nD.65830 => NULL
  # DEBUG thisD.65831 => D#506ptD.0
  # DEBUG D#505ptD.0 => D#506ptD.0
  # DEBUG D#504ptD.0 => &D#505ptD.0->_M_implD.40535
  # DEBUG D#503ptD.0 => D#504ptD.0
  # DEBUG __nD.65834 => NULL
  # DEBUG __aD.65833 => D#503ptD.0
  # DEBUG D#502ptD.0 => D#503ptD.0
  # DEBUG D#500ptD.0 => D#502ptD.0
  # DEBUG D#501ptD.0 => 0B
  # DEBUG __nD.65837 => NULL
  # DEBUG thisD.65835 => D#500ptD.0
  # DEBUG D.65836 => D#501ptD.0
  # DEBUG D#499ptD.0 => D#500ptD.0
  # DEBUG D#498ptD.0 => D#499ptD.0
  # DEBUG thisD.57144 => D#498ptD.0
  # .MEM_145 = VDEF <.MEM_3(D)>
  # PT = { D.65851 } (escaped heap)
  # USE = nonlocal null { D.65851 } (escaped heap)
  # CLB = nonlocal null { D.65851 } (escaped heap)
  _126 = _ZnwmD.2764 (prephitmp_179);
  # VUSE <.MEM_145>
  pretmp_31 = this_4(D)->D.41044._M_implD.40535._M_startD.40537;
  # VUSE <.MEM_145>
  pretmp_162 = this_4(D)->D.41044._M_implD.40535._M_finishD.40538;
  pretmp_164 = _126 + prephitmp_179;
  pretmp_160 = (long intD.12) pretmp_162;
  pretmp_158 = (long intD.12) pretmp_31;
  pretmp_152 = _171 - pretmp_158;
;;    succ:       33 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 32, next block 52, flags: (NEW, REACHABLE)
;;    pred:       47 [90.6%]  (FALSE_VALUE,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.65851 } (escaped heap)
  # iftmp.24_127 = PHI <0B(47), _126(32)>
  # .MEM_140 = PHI <.MEM_3(D)(47), .MEM_145(32)>
  # _173 = PHI <_166(47), _171(32)>
  # _168 = PHI <_165(47), _172(32)>
  # PT = nonlocal escaped 
  # prephitmp_161 = PHI <_17(47), pretmp_31(32)>
  # PT = null { D.65851 } (escaped heap)
  # prephitmp_163 = PHI <0B(47), pretmp_164(32)>
  # prephitmp_135 = PHI <_8(47), pretmp_160(32)>
  # prephitmp_151 = PHI <_165(47), pretmp_152(32)>
;;    succ:       52 [100.0%]  (FALLTHRU)

;;   basic block 52, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 33, next block 34, flags: (NEW)
;;    pred:       33 [100.0%]  (FALLTHRU)
  # DEBUG __new_startD.45190 => NULL
  # DEBUG __new_finishD.45191 => NULL
  # DEBUG D#608ptD.0 => &this_4(D)->D.41044
  # DEBUG thisD.59419 => D#608ptD.0
  # RANGE [0, 18446744073709551615]
  _19 = (long unsigned intD.14) _168;
  # PT = null { D.65851 } (escaped heap)
  __first_20 = iftmp.24_127 + _19;
  # DEBUG __firstD.59399 => __first_20
  # DEBUG __nD.59400 => __n_2(D)
  # DEBUG __xD.59401 => __x_21(D)
  # DEBUG __niterD.59417 => __n_2(D)
  # DEBUG __firstD.59416 => __first_20
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 1, count 0, freq 7428, maybe hot
;;    prev block 52, next block 35, flags: (NEW, REACHABLE)
;;    pred:       35 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                52 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 1729382256910270463] NONZERO 2305843009213693951
  # __n_146 = PHI <__n_89(35), __n_2(D)(52)>
  # PT = null { D.65851 } (escaped heap)
  # __first_170 = PHI <__first_90(35), __first_20(52)>
  # .MEM_144 = PHI <.MEM_103(35), .MEM_140(52)>
  # DEBUG __niterD.59417 => __n_146
  # DEBUG __firstD.59416 => __first_170
  # .MEM_103 = VDEF <.MEM_144>
  *__first_170 = MEM[(const struct sRequestD.35378 &)__x_21(D)];
  # RANGE [0, 1729382256910270462] NONZERO 2305843009213693951
  __n_89 = __n_146 + 18446744073709551615;
  # DEBUG __niterD.59417 => __n_89
  # PT = null { D.65851 } (escaped heap)
  __first_90 = __first_170 + 16;
  # DEBUG __firstD.59416 => __first_90
  # DEBUG __niterD.59417 => __n_89
  # DEBUG __firstD.59416 => __first_90
  if (__n_89 == 0)
    goto <bb 36>;
  else
    goto <bb 35>;
;;    succ:       36 [9.9%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [90.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 35, loop depth 1, count 0, freq 6693, maybe hot
;;    prev block 34, next block 36, flags: (NEW)
;;    pred:       34 [90.1%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 34>;
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 35, next block 51, flags: (NEW, REACHABLE)
;;    pred:       34 [9.9%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       51 [100.0%]  (FALLTHRU)

;;   basic block 51, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 36, next block 37, flags: (NEW)
;;    pred:       36 [100.0%]  (FALLTHRU)
  # DEBUG __new_finishD.45191 => 0B
  # DEBUG D#609ptD.0 => &this_4(D)->D.41044
  # DEBUG thisD.59397 => D#609ptD.0
  # DEBUG thisD.59395 => &__positionD.40969
  # DEBUG D#1090ptD.0 => this_4(D)->D.41044._M_implD.40535._M_startD.40537
  # DEBUG __firstD.59360 => D#1090ptD.0
  # DEBUG __lastD.59361 => D#1091ptD.0
  # DEBUG __resultD.59362 => NULL
  # DEBUG __allocD.59363 => D#607ptD.0
  # DEBUG D#606ptD.0 => D#607ptD.0
  # DEBUG D#603ptD.0 => D#606ptD.0
  # DEBUG __firstD.59367 => D#1090ptD.0
  # DEBUG __lastD.59366 => D#1091ptD.0
  # DEBUG __resultD.59365 => NULL
  # DEBUG D.59364 => D#603ptD.0
  # DEBUG __firstD.59370 => D#1090ptD.0
  # DEBUG __lastD.59369 => D#1091ptD.0
  # DEBUG __resultD.59368 => NULL
  # DEBUG __assignableD.59373 => 1
  # DEBUG __firstD.59376 => D#1090ptD.0
  # DEBUG __lastD.59375 => D#1091ptD.0
  # DEBUG __resultD.59374 => NULL
  # DEBUG __firstD.59379 => D#1090ptD.0
  # DEBUG __lastD.59378 => D#1091ptD.0
  # DEBUG __resultD.59377 => NULL
  # DEBUG __itD.58931 => D#1091ptD.0
  # DEBUG __itD.54893 => D#1091ptD.0
  # DEBUG __itD.58929 => D#1090ptD.0
  # DEBUG __itD.54893 => D#1090ptD.0
  # DEBUG __firstD.59382 => D#1090ptD.0
  # DEBUG __lastD.59381 => D#1091ptD.0
  # DEBUG __resultD.59380 => NULL
  # DEBUG __itD.58911 => NULL
  # DEBUG __itD.54882 => NULL
  # DEBUG __itD.58909 => D#1091ptD.0
  # DEBUG __itD.54882 => D#1091ptD.0
  # DEBUG __itD.58907 => D#1090ptD.0
  # DEBUG __itD.54882 => D#1090ptD.0
  # DEBUG __firstD.59385 => D#1090ptD.0
  # DEBUG __lastD.59384 => D#1091ptD.0
  # DEBUG __resultD.59383 => NULL
  # DEBUG __simpleD.59389 => 1
  # DEBUG __firstD.59392 => D#1090ptD.0
  # DEBUG __lastD.59391 => D#1091ptD.0
  # DEBUG __resultD.59390 => NULL
  # DEBUG D#1089ptD.0 => (long intD.12) D#1090ptD.0
  # DEBUG D#1088ptD.0 => _173 - D#1089ptD.0
  # RANGE [-576460752303423488, 576460752303423487]
  _Num_83 = prephitmp_151 /[ex] 16;
  # DEBUG _NumD.59393 => _Num_83
  if (_Num_83 != 0)
    goto <bb 38>;
  else
    goto <bb 37>;
;;    succ:       38 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 522, maybe hot
;;    prev block 51, next block 38, flags: (NEW)
;;    pred:       51 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_92 = (long unsigned intD.14) prephitmp_151;
  goto <bb 39>;
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 213, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       51 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _84 = (long unsigned intD.14) prephitmp_151;
  # .MEM_104 = VDEF <.MEM_103>
  # USE = nonlocal null { D.65851 } (escaped heap)
  # CLB = nonlocal null { D.65851 } (escaped heap)
  memmoveD.995 (iftmp.24_127, prephitmp_161, _84);
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       37 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_100 = PHI <.MEM_103(37), .MEM_104(38)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_117 = PHI <pretmp_92(37), _84(38)>
  # DEBUG D#1087ptD.0 => (long unsigned intD.14) D#1088ptD.0
  # DEBUG __new_finishD.45191 => iftmp.24_127 + D#1087ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _25 = __n_2(D) * 16;
  # RANGE [0, 18446744073709551615]
  _147 = _25 + prephitmp_117;
  # PT = null { D.65851 } (escaped heap)
  __new_finish_26 = iftmp.24_127 + _147;
  # DEBUG __new_finishD.45191 => __new_finish_26
  # DEBUG D#610ptD.0 => &this_4(D)->D.41044
  # DEBUG thisD.59358 => D#610ptD.0
  # DEBUG D#1086ptD.0 => this_4(D)->D.41044._M_implD.40535._M_finishD.40538
  # DEBUG thisD.59356 => &__positionD.40969
  # DEBUG __firstD.59321 => D#1091ptD.0
  # DEBUG __lastD.59322 => D#1086ptD.0
  # DEBUG __resultD.59323 => __new_finish_26
  # DEBUG __allocD.59324 => D#607ptD.0
  # DEBUG D#606ptD.0 => D#607ptD.0
  # DEBUG D#603ptD.0 => D#606ptD.0
  # DEBUG __firstD.59328 => D#1091ptD.0
  # DEBUG __lastD.59327 => D#1086ptD.0
  # DEBUG __resultD.59326 => __new_finish_26
  # DEBUG D.59325 => D#603ptD.0
  # DEBUG __firstD.59331 => D#1091ptD.0
  # DEBUG __lastD.59330 => D#1086ptD.0
  # DEBUG __resultD.59329 => __new_finish_26
  # DEBUG __assignableD.59334 => 1
  # DEBUG __firstD.59337 => D#1091ptD.0
  # DEBUG __lastD.59336 => D#1086ptD.0
  # DEBUG __resultD.59335 => __new_finish_26
  # DEBUG __firstD.59340 => D#1091ptD.0
  # DEBUG __lastD.59339 => D#1086ptD.0
  # DEBUG __resultD.59338 => __new_finish_26
  # DEBUG __itD.58931 => D#1086ptD.0
  # DEBUG __itD.54893 => D#1086ptD.0
  # DEBUG __itD.58929 => D#1091ptD.0
  # DEBUG __itD.54893 => D#1091ptD.0
  # DEBUG __firstD.59343 => D#1091ptD.0
  # DEBUG __lastD.59342 => D#1086ptD.0
  # DEBUG __resultD.59341 => __new_finish_26
  # DEBUG __itD.58911 => __new_finish_26
  # DEBUG __itD.54882 => __new_finish_26
  # DEBUG __itD.58909 => D#1086ptD.0
  # DEBUG __itD.54882 => D#1086ptD.0
  # DEBUG __itD.58907 => D#1091ptD.0
  # DEBUG __itD.54882 => D#1091ptD.0
  # DEBUG __firstD.59346 => D#1091ptD.0
  # DEBUG __lastD.59345 => D#1086ptD.0
  # DEBUG __resultD.59344 => __new_finish_26
  # DEBUG __simpleD.59350 => 1
  # DEBUG __firstD.59353 => D#1091ptD.0
  # DEBUG __lastD.59352 => D#1086ptD.0
  # DEBUG __resultD.59351 => __new_finish_26
  _75 = prephitmp_135 - _173;
  # RANGE [-576460752303423488, 576460752303423487]
  _Num_76 = _75 /[ex] 16;
  # DEBUG _NumD.59354 => _Num_76
  if (_Num_76 != 0)
    goto <bb 41>;
  else
    goto <bb 40>;
;;    succ:       41 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 0, count 0, freq 522, maybe hot
;;    prev block 39, next block 41, flags: (NEW)
;;    pred:       39 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_116 = (long unsigned intD.14) _75;
  goto <bb 42>;
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 41, loop depth 0, count 0, freq 213, maybe hot
;;    prev block 40, next block 42, flags: (NEW, REACHABLE)
;;    pred:       39 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _77 = (long unsigned intD.14) _75;
  # .MEM_105 = VDEF <.MEM_100>
  # USE = nonlocal null { D.65851 } (escaped heap)
  # CLB = nonlocal null { D.65851 } (escaped heap)
  memcpyD.992 (__new_finish_26, __position_16, _77);
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       40 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_101 = PHI <.MEM_100(40), .MEM_105(41)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_177 = PHI <pretmp_116(40), _77(41)>
  # PT = null { D.65851 } (escaped heap)
  _79 = __new_finish_26 + prephitmp_177;
  # DEBUG __new_finishD.45191 => _79
  # DEBUG D#611ptD.0 => &this_4(D)->D.41044
  # DEBUG thisD.59319 => D#611ptD.0
  # DEBUG D#627ptD.0 => this_4(D)->D.41044._M_implD.40535._M_finishD.40538
  # DEBUG D#626ptD.0 => this_4(D)->D.41044._M_implD.40535._M_startD.40537
  # DEBUG __firstD.59316 => D#626ptD.0
  # DEBUG __lastD.59317 => D#627ptD.0
  # DEBUG D.59318 => NULL
  # DEBUG D#162ptD.0 => D#626ptD.0
  # DEBUG D#163ptD.0 => D#627ptD.0
  # DEBUG __firstD.53130 => D#162ptD.0
  # DEBUG __lastD.53129 => D#163ptD.0
  # DEBUG D#161ptD.0 => D#163ptD.0
  # DEBUG D#160ptD.0 => D#162ptD.0
  # DEBUG D#158ptD.0 => D#160ptD.0
  # DEBUG D#159ptD.0 => D#161ptD.0
  # DEBUG D.53119 => D#158ptD.0
  # DEBUG D.53118 => D#159ptD.0
  # DEBUG D#625ptD.0 => this_4(D)->D.41044._M_implD.40535._M_end_of_storageD.40539
  # DEBUG D#624ptD.0 => (long intD.12) D#625ptD.0
  # DEBUG D#623ptD.0 => (long intD.12) D#1090ptD.0
  # DEBUG D#622ptD.0 => D#624ptD.0 - D#623ptD.0
  # DEBUG D#621ptD.0 => D#622ptD.0 /[ex] 16
  # DEBUG D#620ptD.0 => (long unsigned intD.14) D#621ptD.0
  # DEBUG D#619ptD.0 => &this_4(D)->D.41044
  # DEBUG thisD.59306 => D#619ptD.0
  # DEBUG __pD.59307 => D#1090ptD.0
  # DEBUG __nD.59308 => D#620ptD.0
  if (prephitmp_161 != 0B)
    goto <bb 43>;
  else
    goto <bb 44>;
;;    succ:       43 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 43, loop depth 0, count 0, freq 513, maybe hot
;;    prev block 42, next block 44, flags: (NEW, REACHABLE)
;;    pred:       42 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#286ptD.0 => &D#619ptD.0->_M_implD.40535
  # DEBUG D#284ptD.0 => D#286ptD.0
  # DEBUG D#285ptD.0 => D#620ptD.0
  # DEBUG __pD.59312 => D#1090ptD.0
  # DEBUG __aD.59310 => D#284ptD.0
  # DEBUG __nD.59311 => D#285ptD.0
  # DEBUG D#283ptD.0 => D#285ptD.0
  # DEBUG D#282ptD.0 => D#284ptD.0
  # DEBUG D#280ptD.0 => D#282ptD.0
  # DEBUG D#281ptD.0 => D#283ptD.0
  # DEBUG __pD.59315 => D#1090ptD.0
  # DEBUG thisD.59313 => D#280ptD.0
  # DEBUG D.59314 => D#281ptD.0
  # .MEM_107 = VDEF <.MEM_101>
  # USE = nonlocal null { D.65851 } (escaped heap)
  # CLB = nonlocal null { D.65851 } (escaped heap)
  _ZdlPvD.2766 (prephitmp_161);
;;    succ:       44 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 44, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 43, next block 53, flags: (NEW, REACHABLE)
;;    pred:       43 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                42 [30.2%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_102 = PHI <.MEM_107(43), .MEM_101(42)>
;;    succ:       53 [100.0%]  (FALLTHRU)

;;   basic block 53, loop depth 0, count 0, freq 735, maybe hot
;;    prev block 44, next block 45, flags: (NEW)
;;    pred:       44 [100.0%]  (FALLTHRU)
  # .MEM_33 = VDEF <.MEM_102>
  this_4(D)->D.41044._M_implD.40535._M_startD.40537 = iftmp.24_127;
  # .MEM_34 = VDEF <.MEM_33>
  this_4(D)->D.41044._M_implD.40535._M_finishD.40538 = _79;
  # .MEM_37 = VDEF <.MEM_34>
  this_4(D)->D.41044._M_implD.40535._M_end_of_storageD.40539 = prephitmp_163;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 45, loop depth 0, count 0, freq 4156, maybe hot
;;    prev block 53, next block 54, flags: (NEW, REACHABLE)
;;    pred:       55 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                53 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_186(55), .MEM_37(53)>
;;    succ:       54 [100.0%]  (FALLTHRU)

;;   basic block 54, loop depth 0, count 0, freq 4156, maybe hot
;;    prev block 45, next block 46, flags: (NEW)
;;    pred:       45 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_1>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 46, loop depth 0, count 0, freq 654, maybe hot
;;   Invalid sum of incoming frequencies 492, should be 654
;;    prev block 54, next block 47, flags: (NEW, REACHABLE)
;;    pred:       30 [67.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __lenD.45187 => NULL
  # DEBUG thisD.59424 => this_4(D)
  # DEBUG D#169ptD.0 => &this_4(D)->D.41044._M_implD.40535._M_startD.40537
  # DEBUG thisD.59426 => NULL
  # DEBUG __iD.59425 => D#169ptD.0
  # DEBUG __lhsD.59421 => &__positionD.40969
  # DEBUG __rhsD.59422 => &D.45189
  # DEBUG thisD.53161 => &__positionD.40969
  _157 = (long intD.12) __position_16;
  # DEBUG thisD.53159 => &D.45189
  _156 = _157 - _130;
  # DEBUG D#629ptD.0 => _156 /[ex] 16
  # DEBUG __elems_beforeD.45188 => (const size_typeD.40620) D#629ptD.0
  # DEBUG D#628ptD.0 => &this_4(D)->D.41044
  # DEBUG D#506ptD.0 => D#628ptD.0
  # DEBUG __nD.65830 => NULL
  # DEBUG thisD.65831 => D#506ptD.0
  # DEBUG D#505ptD.0 => D#506ptD.0
  goto <bb 32>;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 47, loop depth 0, count 0, freq 80, maybe hot
;;   Invalid sum of incoming frequencies 243, should be 80
;;    prev block 46, next block 1, flags: (NEW, REACHABLE)
;;    pred:       30 [33.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __lenD.45187 => NULL
  # DEBUG thisD.59424 => this_4(D)
  # DEBUG D#169ptD.0 => &this_4(D)->D.41044._M_implD.40535._M_startD.40537
  # DEBUG thisD.59426 => NULL
  # DEBUG __iD.59425 => D#169ptD.0
  # DEBUG __lhsD.59421 => &__positionD.40969
  # DEBUG __rhsD.59422 => &D.45189
  # DEBUG thisD.53161 => &__positionD.40969
  _166 = (long intD.12) __position_16;
  # DEBUG thisD.53159 => &D.45189
  _165 = _166 - _130;
  # DEBUG D#629ptD.0 => _165 /[ex] 16
  # DEBUG __elems_beforeD.45188 => (const size_typeD.40620) D#629ptD.0
  # DEBUG D#628ptD.0 => &this_4(D)->D.41044
  # DEBUG D#506ptD.0 => D#628ptD.0
  # DEBUG __nD.65830 => NULL
  # DEBUG thisD.65831 => D#506ptD.0
  # DEBUG D#505ptD.0 => D#506ptD.0
  if (__len_138 != 0)
    goto <bb 31>;
  else
    goto <bb 33>;
;;    succ:       31 [9.4%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [90.6%]  (FALSE_VALUE,EXECUTABLE)

}



;; Function std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_copy(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_Alloc_node; _Key = int; _Val = std::pair<const int, Allocator::sRequest>; _KeyOfValue = std::_Select1st<std::pair<const int, Allocator::sRequest> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, Allocator::sRequest> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, Allocator::sRequest> >*; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type = const std::_Rb_tree_node<std::pair<const int, Allocator::sRequest> >*] (_ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_M_copyINSA_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS4_EPKSE_SF_RT_, funcdef_no=2343, decl_uid=45292, cgraph_uid=1013, symbol_order=1014)


Pass statistics:
----------------

std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_copy(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_Alloc_node; _Key = int; _Val = std::pair<const int, Allocator::sRequest>; _KeyOfValue = std::_Select1st<std::pair<const int, Allocator::sRequest> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, Allocator::sRequest> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, Allocator::sRequest> >*; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type = const std::_Rb_tree_node<std::pair<const int, Allocator::sRequest> >*] (struct _Rb_treeD.41462 * const thisD.45293, const struct _Rb_tree_nodeD.41466 * __xD.45294, struct _Rb_tree_nodeD.41466 * __pD.45295, struct _Alloc_nodeD.41487 & __node_genD.45296)
Eh tree:
   3 must_not_throw
   2 cleanup land:{2,<L12>}
   1 try land:{4,<L14>},{3,<L13>},{1,<L15>} catch:{}
{
  struct _Rb_tree_nodeD.41466 * D.65956;
  struct _Rb_tree_nodeD.41466 * D.65939;
  struct _Rb_tree_node_baseD.24800 * _13;
  struct _Rb_tree_nodeD.41466 * _15;
  _Rb_tree_colorD.24797 _17;
  struct _Rb_tree_node_baseD.24800 * _20;
  struct _Rb_tree_nodeD.41466 * _23;
  voidD.45 * _26;
  _Rb_tree_colorD.24797 _36;

;;   basic block 2, loop depth 0, count 0, freq 300, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#732ptD.0 => this_8(D)
  # DEBUG D#733ptD.0 => __node_gen_10(D)
  # DEBUG __xD.61188 => __x_9(D)
  # DEBUG thisD.61190 => D#732ptD.0
  # DEBUG __node_genD.61189 => D#733ptD.0
  # DEBUG D#731ptD.0 => D#733ptD.0
  # DEBUG thisD.61192 => __x_9(D)
  # DEBUG D#1103ptD.0 => &__x_9(D)->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#1103ptD.0
  # DEBUG D#730ptD.0 => D#731ptD.0
  # DEBUG __argD.61194 => D#1103ptD.0
  # DEBUG thisD.61193 => D#730ptD.0
  # DEBUG D#729ptD.0 => D#730ptD.0
  # DEBUG D#728ptD.0 => D#729ptD.0->_M_tD.45275
  # DEBUG D#727ptD.0 => D#728ptD.0
  # DEBUG __xD.65923 => D#1103ptD.0
  # DEBUG thisD.65924 => D#727ptD.0
  # DEBUG D#726ptD.0 => D#727ptD.0
  # DEBUG D#725ptD.0 => D#727ptD.0
  # DEBUG D#724ptD.0 => D#725ptD.0
  # DEBUG thisD.65926 => D#724ptD.0
  # DEBUG D#723ptD.0 => D#724ptD.0
  # DEBUG thisD.61114 => D#723ptD.0
  # DEBUG __nD.65928 => 1
  # DEBUG __aD.65927 => D#722ptD.0
  # DEBUG D#721ptD.0 => D#722ptD.0
  # DEBUG D#719ptD.0 => D#721ptD.0
  # DEBUG D#720ptD.0 => 0B
  # DEBUG __nD.65931 => 1
  # DEBUG thisD.65929 => D#719ptD.0
  # DEBUG D.65930 => D#720ptD.0
  # DEBUG D#718ptD.0 => D#719ptD.0
  # DEBUG D#717ptD.0 => D#718ptD.0
  # DEBUG thisD.61072 => D#717ptD.0
  # .MEM_49 = VDEF <.MEM_7(D)>
  # PT = { D.65963 } (escaped heap)
  # USE = nonlocal null { D.65963 D.65964 } (escaped heap)
  # CLB = nonlocal null { D.65963 D.65964 } (escaped heap)
  __p_45 = _ZnwmD.2764 (56);
  # DEBUG __tmpD.65925 => __p_45
  # DEBUG D#632ptD.0 => D#726ptD.0
  # DEBUG __nodeD.65934 => __p_45
  # DEBUG __xD.65933 => D#1103ptD.0
  # DEBUG thisD.65932 => D#632ptD.0
  # DEBUG D#631ptD.0 => D#632ptD.0
  # DEBUG thisD.65935 => __p_45
  # DEBUG D#1106ptD.0 => &__p_45->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#1106ptD.0
  # DEBUG D#538ptD.0 => D#631ptD.0
  # DEBUG thisD.59488 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG __pD.65938 => D#1106ptD.0
  # DEBUG __valD.65937 => D#1103ptD.0
  # DEBUG thisD.65936 => D#630ptD.0
  # DEBUG D#24ptD.0 => 20
  # DEBUG __pD.59471 => D#1106ptD.0
  # DEBUG D.59472 => D#24ptD.0
  # .MEM_50 = VDEF <.MEM_49>
  MEM[(struct pairD.37146 *)__p_45 + 32B] = MEM[(const struct pairD.37146 &)__x_9(D) + 32];
  # DEBUG thisD.59501 => NULL
  # DEBUG thisD.59484 => NULL
  # DEBUG __tmpD.61191 => NULL
  # VUSE <.MEM_50>
  _17 = __x_9(D)->D.43962._M_colorD.24804;
  # .MEM_38 = VDEF <.MEM_50>
  __p_45->D.43962._M_colorD.24804 = _17;
  # .MEM_39 = VDEF <.MEM_38>
  __p_45->D.43962._M_leftD.24806 = 0B;
  # .MEM_40 = VDEF <.MEM_39>
  __p_45->D.43962._M_rightD.24807 = 0B;
  # DEBUG __topD.46033 => NULL
  # .MEM_12 = VDEF <.MEM_40>
  __p_45->D.43962._M_parentD.24805 = __p_11(D);
  # VUSE <.MEM_12>
  # PT = nonlocal escaped 
  _13 = __x_9(D)->D.43962._M_rightD.24807;
  if (_13 != 0B)
    goto <bb 3>;
  else
    goto <bb 5>;
;;    succ:       3 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 209, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#172ptD.0 => __x_9(D)
  # DEBUG __xD.61197 => D#172ptD.0
  [LP 3] # .MEM_14 = VDEF <.MEM_12>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.65963 D.65964 } (escaped heap)
  # CLB = nonlocal null { D.65963 D.65964 } (escaped heap)
  _15 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_M_copyINSA_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS4_EPKSE_SF_RT_D.45292 (this_8(D), _13, __p_45, __node_gen_10(D));
;;    succ:       16 (EH,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 209, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_16 = VDEF <.MEM_14>
  __p_45->D.43962._M_rightD.24807 = _15;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 300, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       2 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_3 = PHI <.MEM_12(2), .MEM_16(4)>
  # DEBUG __pD.45295 => NULL
  # VUSE <.MEM_3>
  # PT = nonlocal escaped 
  __x_31 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_9(D) + 16B];
  # DEBUG D#171ptD.0 => __x_9(D)
  # DEBUG __xD.61200 => D#171ptD.0
  # DEBUG __xD.45294 => NULL
  # DEBUG __pD.45295 => __p_45
  # DEBUG __xD.45294 => __x_31
  if (__x_31 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [3.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [97.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 300, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [3.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [3.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_3(5), .MEM_5(14)>
  # VUSE <.MEM_1>
  return __p_45;
;;    succ:       EXIT [100.0%] 

;;   basic block 7, loop depth 0, count 0, freq 291, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       5 [97.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 9700, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_41 = PHI <__x_31(7), __x_32(15)>
  # PT = { D.65963 D.65964 } (escaped heap)
  # __p_35 = PHI <__p_45(7), __p_37(15)>
  # .MEM_25 = PHI <.MEM_3(7), .MEM_5(15)>
  # DEBUG __pD.45295 => __p_35
  # DEBUG __xD.45294 => __x_41
  # DEBUG D#732ptD.0 => this_8(D)
  # DEBUG D#733ptD.0 => __node_gen_10(D)
  # DEBUG __xD.61202 => __x_41
  # DEBUG thisD.61204 => D#732ptD.0
  # DEBUG __node_genD.61203 => D#733ptD.0
  # DEBUG D#731ptD.0 => D#733ptD.0
  # DEBUG thisD.61206 => __x_41
  # DEBUG D#1104ptD.0 => &__x_41->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#1104ptD.0
  # DEBUG D#730ptD.0 => D#731ptD.0
  # DEBUG __argD.61208 => D#1104ptD.0
  # DEBUG thisD.61207 => D#730ptD.0
  # DEBUG D#729ptD.0 => D#730ptD.0
  # DEBUG D#728ptD.0 => D#729ptD.0->_M_tD.45275
  # DEBUG D#727ptD.0 => D#728ptD.0
  # DEBUG __xD.65940 => D#1104ptD.0
  # DEBUG thisD.65941 => D#727ptD.0
  # DEBUG D#726ptD.0 => D#727ptD.0
  # DEBUG D#725ptD.0 => D#727ptD.0
  # DEBUG D#724ptD.0 => D#725ptD.0
  # DEBUG thisD.65943 => D#724ptD.0
  # DEBUG D#723ptD.0 => D#724ptD.0
  # DEBUG thisD.61114 => D#723ptD.0
  # DEBUG __nD.65945 => 1
  # DEBUG __aD.65944 => D#722ptD.0
  # DEBUG D#721ptD.0 => D#722ptD.0
  # DEBUG D#719ptD.0 => D#721ptD.0
  # DEBUG D#720ptD.0 => 0B
  # DEBUG __nD.65948 => 1
  # DEBUG thisD.65946 => D#719ptD.0
  # DEBUG D.65947 => D#720ptD.0
  # DEBUG D#718ptD.0 => D#719ptD.0
  # DEBUG D#717ptD.0 => D#718ptD.0
  # DEBUG thisD.61072 => D#717ptD.0
  [LP 4] # .MEM_52 = VDEF <.MEM_25>
  # PT = { D.65964 } (escaped heap)
  # USE = nonlocal null { D.65963 D.65964 } (escaped heap)
  # CLB = nonlocal null { D.65963 D.65964 } (escaped heap)
  __p_37 = _ZnwmD.2764 (56);
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 (EH,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 (EH,EXECUTABLE)
<L14>: [LP 4]
  goto <bb 17> (<L10>);
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 9700, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __tmpD.65942 => __p_37
  # DEBUG D#632ptD.0 => D#726ptD.0
  # DEBUG __nodeD.65951 => __p_37
  # DEBUG __xD.65950 => D#1104ptD.0
  # DEBUG thisD.65949 => D#632ptD.0
  # DEBUG D#631ptD.0 => D#632ptD.0
  # DEBUG thisD.65952 => __p_37
  # DEBUG D#1105ptD.0 => &__p_37->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#1105ptD.0
  # DEBUG D#538ptD.0 => D#631ptD.0
  # DEBUG thisD.59488 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG __pD.65955 => D#1105ptD.0
  # DEBUG __valD.65954 => D#1104ptD.0
  # DEBUG thisD.65953 => D#630ptD.0
  # DEBUG D#24ptD.0 => 20
  # DEBUG __pD.59471 => D#1105ptD.0
  # DEBUG D.59472 => D#24ptD.0
  # .MEM_53 = VDEF <.MEM_52>
  MEM[(struct pairD.37146 *)__p_37 + 32B] = MEM[(const struct pairD.37146 &)__x_41 + 32];
  # DEBUG thisD.59501 => NULL
  # DEBUG thisD.59484 => NULL
  # DEBUG __tmpD.61205 => NULL
  # VUSE <.MEM_53>
  _36 = __x_41->D.43962._M_colorD.24804;
  # .MEM_42 = VDEF <.MEM_53>
  __p_37->D.43962._M_colorD.24804 = _36;
  # .MEM_43 = VDEF <.MEM_42>
  __p_37->D.43962._M_leftD.24806 = 0B;
  # .MEM_44 = VDEF <.MEM_43>
  __p_37->D.43962._M_rightD.24807 = 0B;
  # DEBUG __yD.46038 => NULL
  # .MEM_18 = VDEF <.MEM_44>
  __p_35->D.43962._M_leftD.24806 = __p_37;
  # .MEM_19 = VDEF <.MEM_18>
  __p_37->D.43962._M_parentD.24805 = __p_35;
  # VUSE <.MEM_19>
  # PT = nonlocal escaped 
  _20 = __x_41->D.43962._M_rightD.24807;
  if (_20 != 0B)
    goto <bb 11>;
  else
    goto <bb 14>;
;;    succ:       11 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 6774, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#172ptD.0 => __x_41
  # DEBUG __xD.61211 => D#172ptD.0
  [LP 1] # .MEM_22 = VDEF <.MEM_19>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.65963 D.65964 } (escaped heap)
  # CLB = nonlocal null { D.65963 D.65964 } (escaped heap)
  _23 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_M_copyINSA_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS4_EPKSE_SF_RT_D.45292 (this_8(D), _20, __p_37, __node_gen_10(D));
  goto <bb 13>;
;;    succ:       12 (EH,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       11 (EH,EXECUTABLE)
<L15>: [LP 1]
  goto <bb 17> (<L10>);
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 6774, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_24 = VDEF <.MEM_22>
  __p_37->D.43962._M_rightD.24807 = _23;
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 9700, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       10 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_5 = PHI <.MEM_19(10), .MEM_24(13)>
  # DEBUG __pD.45295 => NULL
  # VUSE <.MEM_5>
  # PT = nonlocal escaped 
  __x_32 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_41 + 16B];
  # DEBUG D#171ptD.0 => __x_41
  # DEBUG __xD.61214 => D#171ptD.0
  # DEBUG __xD.45294 => NULL
  # DEBUG __pD.45295 => __p_37
  # DEBUG __xD.45294 => __x_32
  if (__x_32 == 0B)
    goto <bb 6>;
  else
    goto <bb 15>;
;;    succ:       6 [3.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [97.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 1, count 0, freq 9409, maybe hot
;;    prev block 14, next block 16, flags: (NEW)
;;    pred:       14 [97.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       3 (EH,EXECUTABLE)
<L13>: [LP 3]
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_6 = PHI <.MEM_14(16), .MEM_52(9), .MEM_22(12)>
<L10>:
  # VUSE <.MEM_6>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _26 = __builtin_eh_pointerD.2738 (1);
  # .MEM_27 = VDEF <.MEM_6>
  # USE = nonlocal null { D.65963 D.65964 } (escaped heap)
  # CLB = nonlocal null { D.65963 D.65964 } (escaped heap)
  __cxa_begin_catchD.14644 (_26);
  # .MEM_28 = VDEF <.MEM_27>
  # USE = nonlocal null { D.65963 D.65964 } (escaped heap)
  # CLB = nonlocal null { D.65963 D.65964 } (escaped heap)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (this_8(D), __p_45);
  [LP 2] # .MEM_29 = VDEF <.MEM_28>
  # USE = nonlocal null { D.65963 D.65964 } (escaped heap)
  # CLB = nonlocal null { D.65963 D.65964 } (escaped heap)
  __cxa_rethrowD.45013 ();
;;    succ:       18 (EH,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 17, next block 1, flags: (NEW, REACHABLE)
;;    pred:       17 (EH,EXECUTABLE)
<L12>: [LP 2]
  [MNT 3] # .MEM_30 = VDEF <.MEM_29>
  # USE = nonlocal null { D.65963 D.65964 } (escaped heap)
  # CLB = nonlocal null { D.65963 D.65964 } (escaped heap)
  __cxa_end_catchD.14643 ();
  resx 2
;;    succ:      

}


Creating dr for __p_45->D.43962._M_right
analyze_innermost: success.
	base_address: __p_45
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: *__p_45
	Access function 0: 192
	Access function 1: 0
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_9(D) + 16B]
analyze_innermost: success.
	base_address: __x_9(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_9(D) + 16B]
Creating dr for MEM[(const struct pair &)__x_41 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair &)__x_41 + 32]
Creating dr for MEM[(struct pair *)__p_37 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct pair *)__p_37 + 32B]
Creating dr for MEM[(const struct pair &)__x_41 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair &)__x_41 + 32]
Creating dr for MEM[(struct pair *)__p_37 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct pair *)__p_37 + 32B]
Creating dr for __x_41->D.43962._M_color
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_41
	Access function 0: 0
	Access function 1: 0
Creating dr for __x_41->D.43962._M_color
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_41
	Access function 0: 0
	Access function 1: 0
Creating dr for __p_37->D.43962._M_color
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_37
	Access function 0: 0
	Access function 1: 0
Creating dr for __p_37->D.43962._M_color
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_37
	Access function 0: 0
	Access function 1: 0
Creating dr for __p_37->D.43962._M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_37
	Access function 0: 128
	Access function 1: 0
Creating dr for __p_37->D.43962._M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_37
	Access function 0: 128
	Access function 1: 0
Creating dr for __p_37->D.43962._M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_37
	Access function 0: 192
	Access function 1: 0
Creating dr for __p_37->D.43962._M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_37
	Access function 0: 192
	Access function 1: 0
Creating dr for __p_35->D.43962._M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_35
	Access function 0: 128
	Access function 1: 0
Creating dr for __p_35->D.43962._M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_35
	Access function 0: 128
	Access function 1: 0
Creating dr for __p_37->D.43962._M_parent
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_37
	Access function 0: 64
	Access function 1: 0
Creating dr for __p_37->D.43962._M_parent
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_37
	Access function 0: 64
	Access function 1: 0
Creating dr for __x_41->D.43962._M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_41
	Access function 0: 192
	Access function 1: 0
Creating dr for __x_41->D.43962._M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_41
	Access function 0: 192
	Access function 1: 0
Creating dr for __p_37->D.43962._M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_37
	Access function 0: 192
	Access function 1: 0
Creating dr for __p_37->D.43962._M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_37
	Access function 0: 192
	Access function 1: 0
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_41 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_41 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_41 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_41 + 16B]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:20, LOOPS:1, CONDITIONS:7, STMTS:177)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_5 })
  {
    <bb 2>:
    # DEBUG D#732 => this_8(D)
    # DEBUG D#733 => __node_gen_10(D)
    # DEBUG __x => __x_9(D)
    # DEBUG this => D#732
    # DEBUG __node_gen => D#733
    # DEBUG D#731 => D#733
    # DEBUG this => __x_9(D)
    # DEBUG D#1103 => &__x_9(D)->_M_value_field
    # DEBUG __r => D#1103
    # DEBUG D#730 => D#731
    # DEBUG __arg => D#1103
    # DEBUG this => D#730
    # DEBUG D#729 => D#730
    # DEBUG D#728 => D#729->_M_t
    # DEBUG D#727 => D#728
    # DEBUG __x => D#1103
    # DEBUG this => D#727
    # DEBUG D#726 => D#727
    # DEBUG D#725 => D#727
    # DEBUG D#724 => D#725
    # DEBUG this => D#724
    # DEBUG D#723 => D#724
    # DEBUG this => D#723
    # DEBUG __n => 1
    # DEBUG __a => D#722
    # DEBUG D#721 => D#722
    # DEBUG D#719 => D#721
    # DEBUG D#720 => 0B
    # DEBUG __n => 1
    # DEBUG this => D#719
    # DEBUG D.65930 => D#720
    # DEBUG D#718 => D#719
    # DEBUG D#717 => D#718
    # DEBUG this => D#717
    # .MEM_49 = VDEF <.MEM_7(D)>
    __p_45 = operator new (56);
    # DEBUG __tmp => __p_45
    # DEBUG D#632 => D#726
    # DEBUG __node => __p_45
    # DEBUG __x => D#1103
    # DEBUG this => D#632
    # DEBUG D#631 => D#632
    # DEBUG this => __p_45
    # DEBUG D#1106 => &__p_45->_M_value_field
    # DEBUG __r => D#1106
    # DEBUG D#538 => D#631
    # DEBUG this => D#538
    # DEBUG D#537 => D#538
    # DEBUG this => D#537
    # DEBUG this => NULL
    # DEBUG D.57746 => NULL
    # DEBUG this => NULL
    # DEBUG __p => D#1106
    # DEBUG __val => D#1103
    # DEBUG this => D#630
    # DEBUG D#24 => 20
    # DEBUG __p => D#1106
    # DEBUG D.59472 => D#24
    # .MEM_50 = VDEF <.MEM_49>
    MEM[(struct pair *)__p_45 + 32B] = MEM[(const struct pair &)__x_9(D) + 32];
    # DEBUG this => NULL
    # DEBUG this => NULL
    # DEBUG __tmp => NULL
    # VUSE <.MEM_50>
    _17 = __x_9(D)->D.43962._M_color;
    # .MEM_38 = VDEF <.MEM_50>
    __p_45->D.43962._M_color = _17;
    # .MEM_39 = VDEF <.MEM_38>
    __p_45->D.43962._M_left = 0B;
    # .MEM_40 = VDEF <.MEM_39>
    __p_45->D.43962._M_right = 0B;
    # DEBUG __top => NULL
    # .MEM_12 = VDEF <.MEM_40>
    __p_45->D.43962._M_parent = __p_11(D);
    # VUSE <.MEM_12>
    _13 = __x_9(D)->D.43962._M_right;
    if (_13 != 0B)
      goto <bb 3>;
    else
      goto <bb 5>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_16 bb_4 })
  {
    <bb 3>:
    # DEBUG D#172 => __x_9(D)
    # DEBUG __x => D#172
    # .MEM_14 = VDEF <.MEM_12>
    _15 = std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_M_copy<std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_Alloc_node> (this_8(D), _13, __p_45, __node_gen_10(D));

  }
  bb_4 (preds = {bb_3 }, succs = {bb_5 })
  {
    <bb 4>:
    # .MEM_16 = VDEF <.MEM_14>
    __p_45->D.43962._M_right = _15;

  }
  bb_5 (preds = {bb_2 bb_4 }, succs = {bb_6 bb_7 })
  {
    <bb 5>:
    # .MEM_3 = PHI <.MEM_12(2), .MEM_16(4)>
    # DEBUG __p => NULL
    # VUSE <.MEM_3>
    __x_31 = MEM[(struct _Rb_tree_node_base * *)__x_9(D) + 16B];
    # DEBUG D#171 => __x_9(D)
    # DEBUG __x => D#171
    # DEBUG __x => NULL
    # DEBUG __p => __p_45
    # DEBUG __x => __x_31
    if (__x_31 == 0B)
      goto <bb 6>;
    else
      goto <bb 7>;

  }
  bb_6 (preds = {bb_5 bb_14 }, succs = {bb_19 })
  {
    <bb 6>:
    # .MEM_1 = PHI <.MEM_3(5), .MEM_5(14)>

  }
  bb_19 (preds = {bb_6 }, succs = {bb_1 })
  {
    <bb 19>:
    # VUSE <.MEM_1>
    return __p_45;

  }
  bb_7 (preds = {bb_5 }, succs = {bb_8 })
  {
    <bb 7>:

  }
  bb_9 (preds = {bb_8 }, succs = {bb_17 })
  {
  <L14>:
    goto <bb 17> (<L10>);

  }
  bb_12 (preds = {bb_11 }, succs = {bb_17 })
  {
  <L15>:
    goto <bb 17> (<L10>);

  }
  bb_16 (preds = {bb_3 }, succs = {bb_17 })
  {
  <L13>:

  }
  bb_17 (preds = {bb_16 bb_9 bb_12 }, succs = {bb_18 })
  {
    # .MEM_6 = PHI <.MEM_14(16), .MEM_52(9), .MEM_22(12)>
  <L10>:
    # VUSE <.MEM_6>
    _26 = __builtin_eh_pointer (1);
    # .MEM_27 = VDEF <.MEM_6>
    __cxa_begin_catch (_26);
    # .MEM_28 = VDEF <.MEM_27>
    std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_M_erase (this_8(D), __p_45);
    # .MEM_29 = VDEF <.MEM_28>
    __cxa_rethrow ();

  }
  bb_18 (preds = {bb_17 }, succs = {})
  {
  <L12>:
    # .MEM_30 = VDEF <.MEM_29>
    __cxa_end_catch ();
    resx 2

  }
  loop_1 (header = 8, latch = 15, niter = )
  {
    bb_8 (preds = {bb_7 bb_15 }, succs = {bb_10 bb_9 })
    {
      <bb 8>:
      # __x_41 = PHI <__x_31(7), __x_32(15)>
      # __p_35 = PHI <__p_45(7), __p_37(15)>
      # .MEM_25 = PHI <.MEM_3(7), .MEM_5(15)>
      # DEBUG __p => __p_35
      # DEBUG __x => __x_41
      # DEBUG D#732 => this_8(D)
      # DEBUG D#733 => __node_gen_10(D)
      # DEBUG __x => __x_41
      # DEBUG this => D#732
      # DEBUG __node_gen => D#733
      # DEBUG D#731 => D#733
      # DEBUG this => __x_41
      # DEBUG D#1104 => &__x_41->_M_value_field
      # DEBUG __r => D#1104
      # DEBUG D#730 => D#731
      # DEBUG __arg => D#1104
      # DEBUG this => D#730
      # DEBUG D#729 => D#730
      # DEBUG D#728 => D#729->_M_t
      # DEBUG D#727 => D#728
      # DEBUG __x => D#1104
      # DEBUG this => D#727
      # DEBUG D#726 => D#727
      # DEBUG D#725 => D#727
      # DEBUG D#724 => D#725
      # DEBUG this => D#724
      # DEBUG D#723 => D#724
      # DEBUG this => D#723
      # DEBUG __n => 1
      # DEBUG __a => D#722
      # DEBUG D#721 => D#722
      # DEBUG D#719 => D#721
      # DEBUG D#720 => 0B
      # DEBUG __n => 1
      # DEBUG this => D#719
      # DEBUG D.65947 => D#720
      # DEBUG D#718 => D#719
      # DEBUG D#717 => D#718
      # DEBUG this => D#717
      # .MEM_52 = VDEF <.MEM_25>
      __p_37 = operator new (56);
      goto <bb 10>;

    }
    bb_10 (preds = {bb_8 }, succs = {bb_11 bb_14 })
    {
      <bb 10>:
      # DEBUG __tmp => __p_37
      # DEBUG D#632 => D#726
      # DEBUG __node => __p_37
      # DEBUG __x => D#1104
      # DEBUG this => D#632
      # DEBUG D#631 => D#632
      # DEBUG this => __p_37
      # DEBUG D#1105 => &__p_37->_M_value_field
      # DEBUG __r => D#1105
      # DEBUG D#538 => D#631
      # DEBUG this => D#538
      # DEBUG D#537 => D#538
      # DEBUG this => D#537
      # DEBUG this => NULL
      # DEBUG D.57746 => NULL
      # DEBUG this => NULL
      # DEBUG __p => D#1105
      # DEBUG __val => D#1104
      # DEBUG this => D#630
      # DEBUG D#24 => 20
      # DEBUG __p => D#1105
      # DEBUG D.59472 => D#24
      # .MEM_53 = VDEF <.MEM_52>
      MEM[(struct pair *)__p_37 + 32B] = MEM[(const struct pair &)__x_41 + 32];
      # DEBUG this => NULL
      # DEBUG this => NULL
      # DEBUG __tmp => NULL
      # VUSE <.MEM_53>
      _36 = __x_41->D.43962._M_color;
      # .MEM_42 = VDEF <.MEM_53>
      __p_37->D.43962._M_color = _36;
      # .MEM_43 = VDEF <.MEM_42>
      __p_37->D.43962._M_left = 0B;
      # .MEM_44 = VDEF <.MEM_43>
      __p_37->D.43962._M_right = 0B;
      # DEBUG __y => NULL
      # .MEM_18 = VDEF <.MEM_44>
      __p_35->D.43962._M_left = __p_37;
      # .MEM_19 = VDEF <.MEM_18>
      __p_37->D.43962._M_parent = __p_35;
      # VUSE <.MEM_19>
      _20 = __x_41->D.43962._M_right;
      if (_20 != 0B)
        goto <bb 11>;
      else
        goto <bb 14>;

    }
    bb_11 (preds = {bb_10 }, succs = {bb_12 bb_13 })
    {
      <bb 11>:
      # DEBUG D#172 => __x_41
      # DEBUG __x => D#172
      # .MEM_22 = VDEF <.MEM_19>
      _23 = std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_M_copy<std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_Alloc_node> (this_8(D), _20, __p_37, __node_gen_10(D));
      goto <bb 13>;

    }
    bb_13 (preds = {bb_11 }, succs = {bb_14 })
    {
      <bb 13>:
      # .MEM_24 = VDEF <.MEM_22>
      __p_37->D.43962._M_right = _23;

    }
    bb_14 (preds = {bb_10 bb_13 }, succs = {bb_6 bb_15 })
    {
      <bb 14>:
      # .MEM_5 = PHI <.MEM_19(10), .MEM_24(13)>
      # DEBUG __p => NULL
      # VUSE <.MEM_5>
      __x_32 = MEM[(struct _Rb_tree_node_base * *)__x_41 + 16B];
      # DEBUG D#171 => __x_41
      # DEBUG __x => D#171
      # DEBUG __x => NULL
      # DEBUG __p => __p_37
      # DEBUG __x => __x_32
      if (__x_32 == 0B)
        goto <bb 6>;
      else
        goto <bb 15>;

    }
    bb_15 (preds = {bb_14 }, succs = {bb_8 })
    {
      <bb 15>:
      goto <bb 8>;

    }
  }
}

Pass statistics:
----------------

std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_copy(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_Alloc_node; _Key = int; _Val = std::pair<const int, Allocator::sRequest>; _KeyOfValue = std::_Select1st<std::pair<const int, Allocator::sRequest> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, Allocator::sRequest> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, Allocator::sRequest> >*; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type = const std::_Rb_tree_node<std::pair<const int, Allocator::sRequest> >*] (struct _Rb_treeD.41462 * const thisD.45293, const struct _Rb_tree_nodeD.41466 * __xD.45294, struct _Rb_tree_nodeD.41466 * __pD.45295, struct _Alloc_nodeD.41487 & __node_genD.45296)
Eh tree:
   3 must_not_throw
   2 cleanup land:{2,<L12>}
   1 try land:{4,<L14>},{3,<L13>},{1,<L15>} catch:{}
{
  struct _Rb_tree_nodeD.41466 * D.65956;
  struct _Rb_tree_nodeD.41466 * D.65939;
  struct _Rb_tree_node_baseD.24800 * _13;
  struct _Rb_tree_nodeD.41466 * _15;
  _Rb_tree_colorD.24797 _17;
  struct _Rb_tree_node_baseD.24800 * _20;
  struct _Rb_tree_nodeD.41466 * _23;
  voidD.45 * _26;
  _Rb_tree_colorD.24797 _36;

;;   basic block 2, loop depth 0, count 0, freq 300, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#732ptD.0 => this_8(D)
  # DEBUG D#733ptD.0 => __node_gen_10(D)
  # DEBUG __xD.61188 => __x_9(D)
  # DEBUG thisD.61190 => D#732ptD.0
  # DEBUG __node_genD.61189 => D#733ptD.0
  # DEBUG D#731ptD.0 => D#733ptD.0
  # DEBUG thisD.61192 => __x_9(D)
  # DEBUG D#1103ptD.0 => &__x_9(D)->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#1103ptD.0
  # DEBUG D#730ptD.0 => D#731ptD.0
  # DEBUG __argD.61194 => D#1103ptD.0
  # DEBUG thisD.61193 => D#730ptD.0
  # DEBUG D#729ptD.0 => D#730ptD.0
  # DEBUG D#728ptD.0 => D#729ptD.0->_M_tD.45275
  # DEBUG D#727ptD.0 => D#728ptD.0
  # DEBUG __xD.65923 => D#1103ptD.0
  # DEBUG thisD.65924 => D#727ptD.0
  # DEBUG D#726ptD.0 => D#727ptD.0
  # DEBUG D#725ptD.0 => D#727ptD.0
  # DEBUG D#724ptD.0 => D#725ptD.0
  # DEBUG thisD.65926 => D#724ptD.0
  # DEBUG D#723ptD.0 => D#724ptD.0
  # DEBUG thisD.61114 => D#723ptD.0
  # DEBUG __nD.65928 => 1
  # DEBUG __aD.65927 => D#722ptD.0
  # DEBUG D#721ptD.0 => D#722ptD.0
  # DEBUG D#719ptD.0 => D#721ptD.0
  # DEBUG D#720ptD.0 => 0B
  # DEBUG __nD.65931 => 1
  # DEBUG thisD.65929 => D#719ptD.0
  # DEBUG D.65930 => D#720ptD.0
  # DEBUG D#718ptD.0 => D#719ptD.0
  # DEBUG D#717ptD.0 => D#718ptD.0
  # DEBUG thisD.61072 => D#717ptD.0
  # .MEM_49 = VDEF <.MEM_7(D)>
  # PT = { D.65963 } (escaped heap)
  # USE = nonlocal null { D.65963 D.65964 } (escaped heap)
  # CLB = nonlocal null { D.65963 D.65964 } (escaped heap)
  __p_45 = _ZnwmD.2764 (56);
  # DEBUG __tmpD.65925 => __p_45
  # DEBUG D#632ptD.0 => D#726ptD.0
  # DEBUG __nodeD.65934 => __p_45
  # DEBUG __xD.65933 => D#1103ptD.0
  # DEBUG thisD.65932 => D#632ptD.0
  # DEBUG D#631ptD.0 => D#632ptD.0
  # DEBUG thisD.65935 => __p_45
  # DEBUG D#1106ptD.0 => &__p_45->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#1106ptD.0
  # DEBUG D#538ptD.0 => D#631ptD.0
  # DEBUG thisD.59488 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG __pD.65938 => D#1106ptD.0
  # DEBUG __valD.65937 => D#1103ptD.0
  # DEBUG thisD.65936 => D#630ptD.0
  # DEBUG D#24ptD.0 => 20
  # DEBUG __pD.59471 => D#1106ptD.0
  # DEBUG D.59472 => D#24ptD.0
  # .MEM_50 = VDEF <.MEM_49>
  MEM[(struct pairD.37146 *)__p_45 + 32B] = MEM[(const struct pairD.37146 &)__x_9(D) + 32];
  # DEBUG thisD.59501 => NULL
  # DEBUG thisD.59484 => NULL
  # DEBUG __tmpD.61191 => NULL
  # VUSE <.MEM_50>
  _17 = __x_9(D)->D.43962._M_colorD.24804;
  # .MEM_38 = VDEF <.MEM_50>
  __p_45->D.43962._M_colorD.24804 = _17;
  # .MEM_39 = VDEF <.MEM_38>
  __p_45->D.43962._M_leftD.24806 = 0B;
  # .MEM_40 = VDEF <.MEM_39>
  __p_45->D.43962._M_rightD.24807 = 0B;
  # DEBUG __topD.46033 => NULL
  # .MEM_12 = VDEF <.MEM_40>
  __p_45->D.43962._M_parentD.24805 = __p_11(D);
  # VUSE <.MEM_12>
  # PT = nonlocal escaped 
  _13 = __x_9(D)->D.43962._M_rightD.24807;
  if (_13 != 0B)
    goto <bb 3>;
  else
    goto <bb 5>;
;;    succ:       3 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 209, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#172ptD.0 => __x_9(D)
  # DEBUG __xD.61197 => D#172ptD.0
  [LP 3] # .MEM_14 = VDEF <.MEM_12>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.65963 D.65964 } (escaped heap)
  # CLB = nonlocal null { D.65963 D.65964 } (escaped heap)
  _15 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_M_copyINSA_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS4_EPKSE_SF_RT_D.45292 (this_8(D), _13, __p_45, __node_gen_10(D));
;;    succ:       16 (EH,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 209, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_16 = VDEF <.MEM_14>
  __p_45->D.43962._M_rightD.24807 = _15;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 300, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       2 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_3 = PHI <.MEM_12(2), .MEM_16(4)>
  # DEBUG __pD.45295 => NULL
  # VUSE <.MEM_3>
  # PT = nonlocal escaped 
  __x_31 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_9(D) + 16B];
  # DEBUG D#171ptD.0 => __x_9(D)
  # DEBUG __xD.61200 => D#171ptD.0
  # DEBUG __xD.45294 => NULL
  # DEBUG __pD.45295 => __p_45
  # DEBUG __xD.45294 => __x_31
  if (__x_31 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [3.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [97.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 300, maybe hot
;;    prev block 5, next block 19, flags: (NEW, REACHABLE)
;;    pred:       5 [3.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [3.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_3(5), .MEM_5(14)>
;;    succ:       19 [100.0%]  (FALLTHRU)

;;   basic block 19, loop depth 0, count 0, freq 300, maybe hot
;;    prev block 6, next block 7, flags: (NEW)
;;    pred:       6 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_1>
  return __p_45;
;;    succ:       EXIT [100.0%] 

;;   basic block 7, loop depth 0, count 0, freq 291, maybe hot
;;    prev block 19, next block 8, flags: (NEW)
;;    pred:       5 [97.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 9700, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_41 = PHI <__x_31(7), __x_32(15)>
  # PT = { D.65963 D.65964 } (escaped heap)
  # __p_35 = PHI <__p_45(7), __p_37(15)>
  # .MEM_25 = PHI <.MEM_3(7), .MEM_5(15)>
  # DEBUG __pD.45295 => __p_35
  # DEBUG __xD.45294 => __x_41
  # DEBUG D#732ptD.0 => this_8(D)
  # DEBUG D#733ptD.0 => __node_gen_10(D)
  # DEBUG __xD.61202 => __x_41
  # DEBUG thisD.61204 => D#732ptD.0
  # DEBUG __node_genD.61203 => D#733ptD.0
  # DEBUG D#731ptD.0 => D#733ptD.0
  # DEBUG thisD.61206 => __x_41
  # DEBUG D#1104ptD.0 => &__x_41->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#1104ptD.0
  # DEBUG D#730ptD.0 => D#731ptD.0
  # DEBUG __argD.61208 => D#1104ptD.0
  # DEBUG thisD.61207 => D#730ptD.0
  # DEBUG D#729ptD.0 => D#730ptD.0
  # DEBUG D#728ptD.0 => D#729ptD.0->_M_tD.45275
  # DEBUG D#727ptD.0 => D#728ptD.0
  # DEBUG __xD.65940 => D#1104ptD.0
  # DEBUG thisD.65941 => D#727ptD.0
  # DEBUG D#726ptD.0 => D#727ptD.0
  # DEBUG D#725ptD.0 => D#727ptD.0
  # DEBUG D#724ptD.0 => D#725ptD.0
  # DEBUG thisD.65943 => D#724ptD.0
  # DEBUG D#723ptD.0 => D#724ptD.0
  # DEBUG thisD.61114 => D#723ptD.0
  # DEBUG __nD.65945 => 1
  # DEBUG __aD.65944 => D#722ptD.0
  # DEBUG D#721ptD.0 => D#722ptD.0
  # DEBUG D#719ptD.0 => D#721ptD.0
  # DEBUG D#720ptD.0 => 0B
  # DEBUG __nD.65948 => 1
  # DEBUG thisD.65946 => D#719ptD.0
  # DEBUG D.65947 => D#720ptD.0
  # DEBUG D#718ptD.0 => D#719ptD.0
  # DEBUG D#717ptD.0 => D#718ptD.0
  # DEBUG thisD.61072 => D#717ptD.0
  [LP 4] # .MEM_52 = VDEF <.MEM_25>
  # PT = { D.65964 } (escaped heap)
  # USE = nonlocal null { D.65963 D.65964 } (escaped heap)
  # CLB = nonlocal null { D.65963 D.65964 } (escaped heap)
  __p_37 = _ZnwmD.2764 (56);
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 (EH,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 (EH,EXECUTABLE)
<L14>: [LP 4]
  goto <bb 17> (<L10>);
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 9700, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __tmpD.65942 => __p_37
  # DEBUG D#632ptD.0 => D#726ptD.0
  # DEBUG __nodeD.65951 => __p_37
  # DEBUG __xD.65950 => D#1104ptD.0
  # DEBUG thisD.65949 => D#632ptD.0
  # DEBUG D#631ptD.0 => D#632ptD.0
  # DEBUG thisD.65952 => __p_37
  # DEBUG D#1105ptD.0 => &__p_37->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#1105ptD.0
  # DEBUG D#538ptD.0 => D#631ptD.0
  # DEBUG thisD.59488 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG __pD.65955 => D#1105ptD.0
  # DEBUG __valD.65954 => D#1104ptD.0
  # DEBUG thisD.65953 => D#630ptD.0
  # DEBUG D#24ptD.0 => 20
  # DEBUG __pD.59471 => D#1105ptD.0
  # DEBUG D.59472 => D#24ptD.0
  # .MEM_53 = VDEF <.MEM_52>
  MEM[(struct pairD.37146 *)__p_37 + 32B] = MEM[(const struct pairD.37146 &)__x_41 + 32];
  # DEBUG thisD.59501 => NULL
  # DEBUG thisD.59484 => NULL
  # DEBUG __tmpD.61205 => NULL
  # VUSE <.MEM_53>
  _36 = __x_41->D.43962._M_colorD.24804;
  # .MEM_42 = VDEF <.MEM_53>
  __p_37->D.43962._M_colorD.24804 = _36;
  # .MEM_43 = VDEF <.MEM_42>
  __p_37->D.43962._M_leftD.24806 = 0B;
  # .MEM_44 = VDEF <.MEM_43>
  __p_37->D.43962._M_rightD.24807 = 0B;
  # DEBUG __yD.46038 => NULL
  # .MEM_18 = VDEF <.MEM_44>
  __p_35->D.43962._M_leftD.24806 = __p_37;
  # .MEM_19 = VDEF <.MEM_18>
  __p_37->D.43962._M_parentD.24805 = __p_35;
  # VUSE <.MEM_19>
  # PT = nonlocal escaped 
  _20 = __x_41->D.43962._M_rightD.24807;
  if (_20 != 0B)
    goto <bb 11>;
  else
    goto <bb 14>;
;;    succ:       11 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 6774, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#172ptD.0 => __x_41
  # DEBUG __xD.61211 => D#172ptD.0
  [LP 1] # .MEM_22 = VDEF <.MEM_19>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.65963 D.65964 } (escaped heap)
  # CLB = nonlocal null { D.65963 D.65964 } (escaped heap)
  _23 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_M_copyINSA_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS4_EPKSE_SF_RT_D.45292 (this_8(D), _20, __p_37, __node_gen_10(D));
  goto <bb 13>;
;;    succ:       12 (EH,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       11 (EH,EXECUTABLE)
<L15>: [LP 1]
  goto <bb 17> (<L10>);
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 6774, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_24 = VDEF <.MEM_22>
  __p_37->D.43962._M_rightD.24807 = _23;
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 9700, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       10 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_5 = PHI <.MEM_19(10), .MEM_24(13)>
  # DEBUG __pD.45295 => NULL
  # VUSE <.MEM_5>
  # PT = nonlocal escaped 
  __x_32 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_41 + 16B];
  # DEBUG D#171ptD.0 => __x_41
  # DEBUG __xD.61214 => D#171ptD.0
  # DEBUG __xD.45294 => NULL
  # DEBUG __pD.45295 => __p_37
  # DEBUG __xD.45294 => __x_32
  if (__x_32 == 0B)
    goto <bb 6>;
  else
    goto <bb 15>;
;;    succ:       6 [3.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [97.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 1, count 0, freq 9409, maybe hot
;;    prev block 14, next block 16, flags: (NEW)
;;    pred:       14 [97.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       3 (EH,EXECUTABLE)
<L13>: [LP 3]
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_6 = PHI <.MEM_14(16), .MEM_52(9), .MEM_22(12)>
<L10>:
  # VUSE <.MEM_6>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _26 = __builtin_eh_pointerD.2738 (1);
  # .MEM_27 = VDEF <.MEM_6>
  # USE = nonlocal null { D.65963 D.65964 } (escaped heap)
  # CLB = nonlocal null { D.65963 D.65964 } (escaped heap)
  __cxa_begin_catchD.14644 (_26);
  # .MEM_28 = VDEF <.MEM_27>
  # USE = nonlocal null { D.65963 D.65964 } (escaped heap)
  # CLB = nonlocal null { D.65963 D.65964 } (escaped heap)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (this_8(D), __p_45);
  [LP 2] # .MEM_29 = VDEF <.MEM_28>
  # USE = nonlocal null { D.65963 D.65964 } (escaped heap)
  # CLB = nonlocal null { D.65963 D.65964 } (escaped heap)
  __cxa_rethrowD.45013 ();
;;    succ:       18 (EH,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 17, next block 1, flags: (NEW, REACHABLE)
;;    pred:       17 (EH,EXECUTABLE)
<L12>: [LP 2]
  [MNT 3] # .MEM_30 = VDEF <.MEM_29>
  # USE = nonlocal null { D.65963 D.65964 } (escaped heap)
  # CLB = nonlocal null { D.65963 D.65964 } (escaped heap)
  __cxa_end_catchD.14643 ();
  resx 2
;;    succ:      

}



;; Function void std::vector<_Tp, _Alloc>::_M_fill_insert(std::vector<_Tp, _Alloc>::iterator, std::vector<_Tp, _Alloc>::size_type, const value_type&) [with _Tp = std::vector<Allocator::sRequest>; _Alloc = std::allocator<std::vector<Allocator::sRequest> >; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<std::vector<Allocator::sRequest>*, std::vector<std::vector<Allocator::sRequest> > >; typename std::_Vector_base<_Tp, _Alloc>::pointer = std::vector<Allocator::sRequest>*; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::value_type = std::vector<Allocator::sRequest>] (_ZNSt6vectorIS_IN9Allocator8sRequestESaIS1_EESaIS3_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS3_S5_EEmRKS3_, funcdef_no=2137, decl_uid=36150, cgraph_uid=807, symbol_order=808)


Pass statistics:
----------------


Global statistics (BBS:218, LOOPS:18, CONDITIONS:83, STMTS:2059)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Pass statistics:
----------------

void std::vector<_Tp, _Alloc>::_M_fill_insert(std::vector<_Tp, _Alloc>::iterator, std::vector<_Tp, _Alloc>::size_type, const value_type&) [with _Tp = std::vector<Allocator::sRequest>; _Alloc = std::allocator<std::vector<Allocator::sRequest> >; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<std::vector<Allocator::sRequest>*, std::vector<std::vector<Allocator::sRequest> > >; typename std::_Vector_base<_Tp, _Alloc>::pointer = std::vector<Allocator::sRequest>*; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::value_type = std::vector<Allocator::sRequest>] (struct vectorD.35484 * const thisD.36151, struct iteratorD.35795 __positionD.36152, size_typeD.35803 __nD.36153, const struct value_typeD.35790 & __xD.36154)
Eh tree:
   11 must_not_throw
   10 cleanup land:{6,<L18>}
   9 try land:{29,<L52>},{19,<L37>},{5,<L57>} catch:{}
     29 try land:{31,<L55>},{18,<L56>} catch:{}
     28 cleanup land:{17,<L36>}
     27 must_not_throw
     26 try land:{30,<L53>},{16,<L54>} catch:{}
     25 cleanup land:{15,<L33>}
     24 must_not_throw
     23 try land:{28,<L50>},{14,<L51>} catch:{}
     22 cleanup land:{13,<L30>}
     21 must_not_throw
   2 cleanup land:{27,<L48>},{25,<L45>},{23,<L42>},{22,<L41>},{21,<L40>},{2,<L49>}
     20 try land:{26,<L46>},{12,<L47>} catch:{}
     19 cleanup land:{11,<L27>}
     18 must_not_throw
     17 try land:{24,<L43>},{10,<L44>} catch:{}
     16 cleanup land:{9,<L24>}
     15 must_not_throw
     14 try land:{20,<L38>},{8,<L39>} catch:{}
     13 cleanup land:{7,<L21>}
     12 must_not_throw
{
  struct sRequestD.35378 * D.66583;
  const ptrdiff_tD.2819 _NumD.66574;
  struct vectorD.35482 * D.66530;
  struct vectorD.35482 * __firstD.66503;
  struct vectorD.35482 * __resultD.66505;
  struct sRequestD.35378 * D.66502;
  const ptrdiff_tD.2819 _NumD.66493;
  struct vectorD.35482 * D.66449;
  struct vectorD.35482 * __firstD.66422;
  struct vectorD.35482 * __resultD.66424;
  struct sRequestD.35378 * D.66421;
  const ptrdiff_tD.2819 _NumD.66412;
  const long unsigned intD.14 D.66371;
  const size_typeD.35803 __lenD.66365;
  size_typeD.35803 D.66370;
  size_typeD.35803 __nD.66363;
  struct vectorD.35482 * D.66361;
  struct vectorD.35482 * D.66349;
  struct vectorD.35482 * __firstD.66322;
  long unsigned intD.14 __nD.66323;
  struct sRequestD.35378 * D.66321;
  const ptrdiff_tD.2819 _NumD.66312;
  struct vectorD.35482 * D.66268;
  struct vectorD.35482 * __firstD.66241;
  struct vectorD.35482 * __resultD.66243;
  struct sRequestD.35378 * D.66240;
  const ptrdiff_tD.2819 _NumD.66231;
  struct vectorD.35482 * D.66187;
  struct vectorD.35482 * __firstD.66160;
  long unsigned intD.14 __nD.66161;
  struct sRequestD.35378 * D.66159;
  const ptrdiff_tD.2819 _NumD.66150;
  struct vectorD.35482 * D.66106;
  struct vectorD.35482 * __firstD.66079;
  struct vectorD.35482 * __resultD.66081;
  struct sRequestD.35378 * D.66078;
  const ptrdiff_tD.2819 _NumD.66069;
  struct vectorD.35482 * const __positionD.60330;
  struct vectorD.35482 * __firstD.60268;
  struct vectorD.35482 * __firstD.60227;
  struct vectorD.35482 * __firstD.60136;
  struct vectorD.35482 * __firstD.60095;
  difference_typeD.43414 __nD.60091;
  struct vectorD.35482 * __lastD.60076;
  struct vectorD.35482 * __new_finishD.45143;
  const size_typeD.35803 __elems_beforeD.45140;
  struct vectorD.35482 * __old_finishD.45115;
  const size_typeD.35803 __elems_afterD.45107;
  struct value_typeD.35790 __x_copyD.45105;
  struct vectorD.35482 * _10;
  long intD.12 _11;
  struct vectorD.35482 * _12;
  long intD.12 _13;
  long intD.12 _14;
  long intD.12 _15;
  long unsigned intD.14 _16;
  struct sRequestD.35378 * const _17;
  long unsigned intD.14 pretmp_20;
  struct vectorD.35482 * const _23;
  struct sRequestD.35378 * const pretmp_24;
  long intD.12 __last.29_25;
  long unsigned intD.14 _26;
  difference_typeD.43419 _30;
  long unsigned intD.14 _32;
  long intD.12 _34;
  struct vectorD.35482 * _35;
  long intD.12 _36;
  struct vectorD.35482 * pretmp_40;
  struct vectorD.35482 * _44;
  voidD.45 * _46;
  sizetype _49;
  sizetype _50;
  struct vectorD.35482 * _51;
  long unsigned intD.14 _55;
  long unsigned intD.14 _59;
  sizetype _60;
  struct vectorD.35482 * _63;
  struct vectorD.35482 * _67;
  struct vectorD.35482 * _74;
  long unsigned intD.14 _75;
  struct vectorD.35482 * _76;
  long intD.12 _78;
  long unsigned intD.14 prephitmp_83;
  struct sRequestD.35378 * _85;
  long intD.12 pretmp_91;
  struct sRequestD.35378 * _92;
  struct sRequestD.35378 * _94;
  struct sRequestD.35378 * _95;
  struct sRequestD.35378 * _98;
  voidD.45 * _100;
  struct vectorD.35482 * pretmp_101;
  struct vectorD.35482 * prephitmp_103;
  struct sRequestD.35378 * const _113;
  struct sRequestD.35378 * const _114;
  struct sRequestD.35378 * const _135;
  struct sRequestD.35378 * const _138;
  struct sRequestD.35378 * const _139;
  struct sRequestD.35378 * const _153;
  struct sRequestD.35378 * const _154;
  long intD.12 _155;
  long intD.12 _156;
  long intD.12 _157;
  long intD.12 _158;
  size_typeD.40620 _159;
  struct sRequestD.35378 * _162;
  struct sRequestD.35378 * _171;
  struct sRequestD.35378 * _172;
  struct sRequestD.35378 * iftmp.24_173;
  long unsigned intD.14 prephitmp_174;
  long unsigned intD.14 pretmp_175;
  voidD.45 * _178;
  struct sRequestD.35378 * _180;
  struct sRequestD.35378 * const _182;
  long intD.12 _183;
  long intD.12 _184;
  long intD.12 _185;
  long intD.12 _186;
  size_typeD.40620 _187;
  struct sRequestD.35378 * _190;
  struct sRequestD.35378 * const _191;
  struct sRequestD.35378 * const _192;
  long intD.12 __last.26_193;
  long intD.12 __first.27_194;
  long intD.12 _195;
  long unsigned intD.14 _197;
  struct sRequestD.35378 * _199;
  long unsigned intD.14 _200;
  struct sRequestD.35378 * _201;
  struct sRequestD.35378 * iftmp.24_202;
  struct vectorD.35482 * _203;
  long unsigned intD.14 _204;
  voidD.45 * _207;
  struct sRequestD.35378 * _209;
  struct sRequestD.35378 * const _211;
  long intD.12 _212;
  long intD.12 _213;
  long intD.12 _214;
  long intD.12 _215;
  size_typeD.40620 _216;
  long unsigned intD.14 prephitmp_217;
  struct sRequestD.35378 * _219;
  struct sRequestD.35378 * const _220;
  struct sRequestD.35378 * const _221;
  long intD.12 __last.26_222;
  long intD.12 __first.27_223;
  long intD.12 _224;
  long unsigned intD.14 _226;
  struct sRequestD.35378 * _228;
  long unsigned intD.14 _229;
  struct sRequestD.35378 * _230;
  struct sRequestD.35378 * iftmp.24_231;
  voidD.45 * _236;
  struct sRequestD.35378 * _238;
  struct sRequestD.35378 * const _240;
  long intD.12 _241;
  long intD.12 _242;
  long intD.12 _243;
  long intD.12 _244;
  size_typeD.40620 _245;
  struct sRequestD.35378 * _248;
  struct sRequestD.35378 * const _249;
  struct sRequestD.35378 * const _250;
  long intD.12 __last.26_251;
  long intD.12 __first.27_252;
  long intD.12 _253;
  long unsigned intD.14 _255;
  struct sRequestD.35378 * _257;
  long unsigned intD.14 _258;
  struct sRequestD.35378 * _259;
  struct sRequestD.35378 * iftmp.24_260;
  const ptrdiff_tD.2819 prephitmp_261;
  struct sRequestD.35378 * const pretmp_262;
  voidD.45 * _265;
  struct sRequestD.35378 * _267;
  struct vectorD.35482 * _269;
  long intD.12 pretmp_271;
  long intD.12 _273;
  long intD.12 _274;
  long intD.12 _275;
  long unsigned intD.14 _277;
  long unsigned intD.14 prephitmp_278;
  struct sRequestD.35378 * const prephitmp_279;
  struct sRequestD.35378 * const _283;
  long intD.12 _284;
  long intD.12 _285;
  long intD.12 _286;
  long intD.12 _287;
  size_typeD.40620 _288;
  long unsigned intD.14 _289;
  struct sRequestD.35378 * _291;
  struct sRequestD.35378 * _300;
  long unsigned intD.14 _301;
  struct sRequestD.35378 * _302;
  struct sRequestD.35378 * iftmp.24_303;
  struct sRequestD.35378 * const pretmp_305;
  voidD.45 * _308;
  struct sRequestD.35378 * _310;
  struct sRequestD.35378 * const _312;
  long intD.12 _313;
  long intD.12 _314;
  long intD.12 _315;
  long intD.12 _316;
  size_typeD.40620 _317;
  long intD.12 pretmp_318;
  struct sRequestD.35378 * _320;
  struct sRequestD.35378 * const _321;
  struct sRequestD.35378 * const _322;
  long intD.12 __last.26_323;
  long intD.12 __first.27_324;
  long intD.12 _325;
  long unsigned intD.14 _327;
  struct sRequestD.35378 * _329;
  long unsigned intD.14 _330;
  struct sRequestD.35378 * _331;
  struct sRequestD.35378 * iftmp.24_332;
  voidD.45 * _337;
  struct sRequestD.35378 * _339;
  struct sRequestD.35378 * const _341;
  long intD.12 _342;
  long intD.12 _343;
  long intD.12 _344;
  long intD.12 _345;
  size_typeD.40620 _346;
  long intD.12 _347;
  struct sRequestD.35378 * _349;
  struct sRequestD.35378 * _358;
  long unsigned intD.14 _359;
  struct sRequestD.35378 * _360;
  struct sRequestD.35378 * iftmp.24_361;
  long unsigned intD.14 prephitmp_364;
  const ptrdiff_tD.2819 pretmp_378;
  struct sRequestD.35378 * const pretmp_386;
  boolD.2757 _428;
  long intD.12 pretmp_470;
  const ptrdiff_tD.2819 pretmp_476;
  long unsigned intD.14 prephitmp_545;
  struct sRequestD.35378 * const pretmp_551;
  struct sRequestD.35378 * const prephitmp_553;
  long unsigned intD.14 pretmp_555;
  long intD.12 prephitmp_557;
  struct vectorD.35482 * const prephitmp_558;
  long unsigned intD.14 pretmp_559;
  boolD.2757 _560;
  long intD.12 _561;
  difference_typeD.43419 _565;
  long intD.12 _567;
  difference_typeD.43419 _568;
  long intD.12 _569;
  long unsigned intD.14 pretmp_570;
  const ptrdiff_tD.2819 prephitmp_571;
  long intD.12 pretmp_573;
  long intD.12 pretmp_574;
  struct sRequestD.35378 * const pretmp_576;
  long unsigned intD.14 prephitmp_578;
  long intD.12 pretmp_579;
  struct sRequestD.35378 * const prephitmp_580;
  struct vectorD.35482 * const pretmp_581;
  long unsigned intD.14 pretmp_582;
  long unsigned intD.14 prephitmp_583;
  const ptrdiff_tD.2819 prephitmp_584;
  long unsigned intD.14 pretmp_585;
  const ptrdiff_tD.2819 pretmp_586;
  long intD.12 pretmp_589;
  long intD.12 pretmp_592;
  long intD.12 pretmp_597;
  boolD.2757 _604;
  struct vectorD.35482 * prephitmp_622;
  long intD.12 _629;
  long intD.12 _630;
  long unsigned intD.14 pretmp_638;
  long unsigned intD.14 prephitmp_639;
  long unsigned intD.14 pretmp_640;
  long unsigned intD.14 prephitmp_641;
  long unsigned intD.14 pretmp_642;
  long unsigned intD.14 prephitmp_643;
  long unsigned intD.14 pretmp_644;
  long unsigned intD.14 prephitmp_645;
  struct vectorD.35482 * pretmp_646;
  struct vectorD.35482 * prephitmp_647;
  long unsigned intD.14 pretmp_657;
  long unsigned intD.14 prephitmp_658;
  long unsigned intD.14 pretmp_659;
  long unsigned intD.14 prephitmp_660;
  long unsigned intD.14 pretmp_661;
  long unsigned intD.14 prephitmp_662;
  long unsigned intD.14 pretmp_663;
  long unsigned intD.14 prephitmp_664;

;;   basic block 2, loop depth 0, count 0, freq 1484, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#1131ptD.0 => MEM[(struct __normal_iteratorD.35796 *)&__positionD.36152]
  # DEBUG __positionD.60330 => D#1131ptD.0
  if (__n_7(D) != 0)
    goto <bb 3>;
  else
    goto <bb 193>;
;;    succ:       3 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                193 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 905, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  # PT = nonlocal 
  __position_22 = MEM[(struct __normal_iteratorD.35796 *)&__positionD.36152];
  # VUSE <.MEM_8(D)>
  # PT = nonlocal escaped 
  _10 = this_9(D)->D.36227._M_implD.35718._M_end_of_storageD.35722;
  _11 = (long intD.12) _10;
  # VUSE <.MEM_8(D)>
  # PT = nonlocal escaped 
  _12 = this_9(D)->D.36227._M_implD.35718._M_finishD.35721;
  _13 = (long intD.12) _12;
  _14 = _11 - _13;
  # RANGE [-384307168202282325, 384307168202282325]
  _15 = _14 /[ex] 24;
  # RANGE ~[384307168202282326, 18062436905507269290]
  _16 = (long unsigned intD.14) _15;
  if (__n_7(D) <= _16)
    goto <bb 4>;
  else
    goto <bb 107>;
;;    succ:       4 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                107 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 453, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.66029 => &__x_copyD.45105
  # DEBUG __xD.66030 => __x_28(D)
  # DEBUG D#582ptD.0 => &MEM[(const struct vectorD.35482 *)__x_28(D)].D.41044
  # DEBUG thisD.58605 => D#582ptD.0
  # DEBUG __aD.58603 => NULL
  # VUSE <.MEM_8(D)>
  # PT = nonlocal escaped 
  _153 = MEM[(struct sRequestD.35378 * *)__x_28(D)];
  # DEBUG D#88ptD.0 => __x_28(D)
  # VUSE <.MEM_8(D)>
  # PT = nonlocal escaped 
  _154 = MEM[(struct sRequestD.35378 * *)__x_28(D) + 8B];
  # DEBUG D#88ptD.0 => __x_28(D)
  # DEBUG thisD.66031 => D#88ptD.0
  # DEBUG thisD.66032 => D#88ptD.0
  _155 = (long intD.12) _154;
  _156 = (long intD.12) _153;
  _157 = _155 - _156;
  # RANGE [-576460752303423488, 576460752303423487]
  _158 = _157 /[ex] 16;
  # RANGE ~[576460752303423488, 17870283321406128127]
  _159 = (size_typeD.40620) _158;
  # DEBUG D#584ptD.0 => &__x_copyD.45105.D.41044
  # DEBUG thisD.66035 => D#584ptD.0
  # DEBUG __nD.66034 => NULL
  # DEBUG __aD.66033 => NULL
  # DEBUG D#508ptD.0 => &D#584ptD.0->_M_implD.40535
  # DEBUG thisD.66037 => D#508ptD.0
  # DEBUG __aD.66036 => NULL
  # DEBUG thisD.54076 => D#508ptD.0
  # DEBUG __aD.54077 => NULL
  # DEBUG thisD.54073 => D#508ptD.0
  # DEBUG D.54074 => NULL
  # .MEM_478 = VDEF <.MEM_8(D)>
  MEM[(struct _Vector_implD.40512 *)&__x_copyD.45105]._M_startD.40537 = 0B;
  # .MEM_479 = VDEF <.MEM_478>
  MEM[(struct _Vector_implD.40512 *)&__x_copyD.45105]._M_finishD.40538 = 0B;
  # .MEM_480 = VDEF <.MEM_479>
  MEM[(struct _Vector_implD.40512 *)&__x_copyD.45105]._M_end_of_storageD.40539 = 0B;
  # DEBUG thisD.66039 => D#584ptD.0
  # DEBUG __nD.66038 => NULL
  # DEBUG D#506ptD.0 => D#584ptD.0
  # DEBUG __nD.66070 => _159
  # DEBUG thisD.66071 => D#506ptD.0
  # DEBUG D#505ptD.0 => D#506ptD.0
  if (_159 != 0)
    goto <bb 6>;
  else
    goto <bb 5>;
;;    succ:       6 [90.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [10.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 45, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [10.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_559 = (long unsigned intD.14) _157;
  goto <bb 9>;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 407, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [90.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#504ptD.0 => &D#505ptD.0->_M_implD.40535
  # DEBUG D#503ptD.0 => D#504ptD.0
  # DEBUG __nD.66074 => _159
  # DEBUG __aD.66073 => D#503ptD.0
  # DEBUG D#502ptD.0 => D#503ptD.0
  # DEBUG D#500ptD.0 => D#502ptD.0
  # DEBUG D#501ptD.0 => 0B
  # DEBUG __nD.66077 => _159
  # DEBUG thisD.66075 => D#500ptD.0
  # DEBUG D.66076 => D#501ptD.0
  # DEBUG D#499ptD.0 => D#500ptD.0
  # DEBUG D#498ptD.0 => D#499ptD.0
  # DEBUG thisD.57144 => D#498ptD.0
  if (_159 > 1152921504606846975)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 0
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_482 = VDEF <.MEM_480>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZSt17__throw_bad_allocvD.2850 ();
;;    succ:      

;;   basic block 8, loop depth 0, count 0, freq 407, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _55 = (long unsigned intD.14) _157;
  # .MEM_481 = VDEF <.MEM_480>
  # PT = { D.66614 } (escaped heap)
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _172 = _ZnwmD.2764 (_55);
  # VUSE <.MEM_481>
  pretmp_581 = MEM[(struct vectorD.35482 * const &)this_9(D) + 8];
  pretmp_91 = (long intD.12) pretmp_581;
  # VUSE <.MEM_481>
  pretmp_576 = MEM[(struct sRequestD.35378 * *)__x_28(D) + 8B];
  # VUSE <.MEM_481>
  pretmp_551 = MEM[(struct sRequestD.35378 * *)__x_28(D)];
  pretmp_579 = (long intD.12) pretmp_576;
  pretmp_574 = (long intD.12) pretmp_551;
  pretmp_573 = pretmp_579 - pretmp_574;
  pretmp_476 = pretmp_573 /[ex] 16;
  pretmp_570 = (long unsigned intD.14) pretmp_573;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 453, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.66614 } (escaped heap)
  # iftmp.24_173 = PHI <0B(5), _172(8)>
  # .MEM_362 = PHI <.MEM_480(5), .MEM_481(8)>
  # PT = nonlocal escaped 
  # prephitmp_558 = PHI <_12(5), pretmp_581(8)>
  # prephitmp_557 = PHI <_13(5), pretmp_91(8)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_578 = PHI <pretmp_559(5), _55(8)>
  # PT = nonlocal escaped 
  # prephitmp_580 = PHI <_153(5), pretmp_551(8)>
  # RANGE [-576460752303423488, 576460752303423487]
  # prephitmp_571 = PHI <_158(5), pretmp_476(8)>
  # prephitmp_545 = PHI <pretmp_559(5), pretmp_570(8)>
  # .MEM_484 = VDEF <.MEM_362>
  MEM[(struct _Vector_baseD.40302 *)&__x_copyD.45105]._M_implD.40535._M_startD.40537 = iftmp.24_173;
  # .MEM_485 = VDEF <.MEM_484>
  MEM[(struct _Vector_baseD.40302 *)&__x_copyD.45105]._M_implD.40535._M_finishD.40538 = iftmp.24_173;
  # PT = null { D.66614 } (escaped heap)
  _162 = iftmp.24_173 + prephitmp_578;
  # .MEM_486 = VDEF <.MEM_485>
  MEM[(struct _Vector_baseD.40302 *)&__x_copyD.45105]._M_implD.40535._M_end_of_storageD.40539 = _162;
  # DEBUG D#583ptD.0 => &__x_copyD.45105.D.41044
  # DEBUG thisD.58588 => D#583ptD.0
  # DEBUG D#1118ptD.0 => MEM[(struct sRequestD.35378 * *)__x_28(D) + 8B]
  # DEBUG D#101ptD.0 => __x_28(D)
  # DEBUG thisD.58586 => D#101ptD.0
  # DEBUG thisD.52700 => NULL
  # DEBUG __iD.52699 => NULL
  # DEBUG D#1117ptD.0 => MEM[(struct sRequestD.35378 * *)__x_28(D)]
  # DEBUG D#102ptD.0 => __x_28(D)
  # DEBUG thisD.58583 => D#102ptD.0
  # DEBUG thisD.52716 => NULL
  # DEBUG __iD.52715 => NULL
  # DEBUG __firstD.58609 => D#1117ptD.0
  # DEBUG __lastD.58610 => D#1118ptD.0
  # DEBUG __resultD.66041 => NULL
  # DEBUG D.66040 => D#581ptD.0
  # DEBUG __firstD.58580 => D#1117ptD.0
  # DEBUG __lastD.58581 => D#1118ptD.0
  # DEBUG __resultD.66044 => NULL
  # DEBUG __assignableD.66049 => 1
  # DEBUG __firstD.58544 => D#1117ptD.0
  # DEBUG __lastD.58545 => D#1118ptD.0
  # DEBUG __resultD.66050 => NULL
  # DEBUG __firstD.58474 => D#1117ptD.0
  # DEBUG __lastD.58473 => D#1118ptD.0
  # DEBUG __resultD.66053 => NULL
  # DEBUG __itD.58445 => D#1118ptD.0
  # DEBUG __it$_M_currentD.58415 => D#1118ptD.0
  # DEBUG __itD.58447 => D#1117ptD.0
  # DEBUG __it$_M_currentD.58411 => D#1117ptD.0
  # DEBUG __firstD.58420 => D#1117ptD.0
  # DEBUG __lastD.58421 => D#1118ptD.0
  # DEBUG __resultD.66056 => NULL
  # DEBUG __itD.58386 => NULL
  # DEBUG __itD.54882 => NULL
  # DEBUG __itD.58406 => D#1118ptD.0
  # DEBUG __itD.58384 => D#1118ptD.0
  # DEBUG thisD.58359 => NULL
  # DEBUG __itD.58408 => D#1117ptD.0
  # DEBUG __itD.58380 => D#1117ptD.0
  # DEBUG thisD.58359 => NULL
  # DEBUG __firstD.66061 => D#1117ptD.0
  # DEBUG __lastD.66060 => D#1118ptD.0
  # DEBUG __resultD.66059 => NULL
  # DEBUG __simpleD.66065 => 1
  # DEBUG __firstD.66068 => D#1117ptD.0
  # DEBUG __lastD.66067 => D#1118ptD.0
  # DEBUG __resultD.66066 => NULL
  # DEBUG D#1116ptD.0 => (long intD.12) D#1118ptD.0
  # DEBUG D#1115ptD.0 => (long intD.12) D#1117ptD.0
  # DEBUG D#1114ptD.0 => D#1116ptD.0 - D#1115ptD.0
  # DEBUG _NumD.66069 => D#1114ptD.0 /[ex] 16
  if (prephitmp_571 != 0)
    goto <bb 10>;
  else
    goto <bb 11>;
;;    succ:       10 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 176, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_487 = VDEF <.MEM_486>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  memmoveD.995 (iftmp.24_173, prephitmp_580, prephitmp_545);
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 453, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       9 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_363 = PHI <.MEM_486(9), .MEM_487(10)>
  # PT = null { D.66614 } (escaped heap)
  _171 = iftmp.24_173 + prephitmp_545;
  # .MEM_488 = VDEF <.MEM_363>
  __x_copyD.45105.D.41044._M_implD.40535._M_finishD.40538 = _171;
  # DEBUG thisD.60053 => this_9(D)
  # DEBUG D#103ptD.0 => &this_9(D)->D.36227._M_implD.35718._M_finishD.35721
  # DEBUG thisD.60055 => NULL
  # DEBUG __iD.60054 => D#103ptD.0
  # DEBUG D#1113ptD.0 => MEM[(struct vectorD.35482 * const &)this_9(D) + 8]
  # DEBUG __lhsD.60050 => &D.45108
  # DEBUG __rhsD.60051 => &__positionD.36152
  # DEBUG thisD.53151 => &D.45108
  # DEBUG thisD.53149 => &__positionD.36152
  _36 = (long intD.12) __position_22;
  _34 = prephitmp_557 - _36;
  # RANGE [-384307168202282325, 384307168202282325]
  _30 = _34 /[ex] 24;
  # RANGE ~[384307168202282326, 18062436905507269290]
  __elems_after_57 = (const size_typeD.35803) _30;
  # DEBUG __elems_afterD.45107 => __elems_after_57
  # DEBUG __old_finishD.45115 => D#1113ptD.0
  if (__n_7(D) < __elems_after_57)
    goto <bb 12>;
  else
    goto <bb 49>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                49 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 226, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#673ptD.0 => &this_9(D)->D.36227
  # DEBUG thisD.60073 => D#673ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _59 = __n_7(D) * 24;
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _60 = -_59;
  # PT = nonlocal escaped 
  __last_61 = prephitmp_558 + _60;
  # DEBUG __firstD.60058 => __last_61
  # DEBUG __lastD.60059 => D#1113ptD.0
  # DEBUG __resultD.60060 => D#1113ptD.0
  # DEBUG __allocD.60061 => D#587ptD.0
  # DEBUG D#586ptD.0 => D#587ptD.0
  # DEBUG D#585ptD.0 => D#586ptD.0
  # DEBUG __firstD.60065 => __last_61
  # DEBUG __lastD.60064 => D#1113ptD.0
  # DEBUG __resultD.60063 => D#1113ptD.0
  # DEBUG D.60062 => D#585ptD.0
  # DEBUG __firstD.60068 => __last_61
  # DEBUG __lastD.60067 => D#1113ptD.0
  # DEBUG __resultD.60066 => D#1113ptD.0
  # DEBUG __assignableD.60071 => 1
  # DEBUG __firstD.66079 => __last_61
  # DEBUG __lastD.66080 => D#1113ptD.0
  # DEBUG __resultD.66081 => D#1113ptD.0
  # DEBUG __curD.66082 => D#1113ptD.0
  # DEBUG __curD.66082 => D#1113ptD.0
  # DEBUG __firstD.66079 => __last_61
  if (__last_61 == prephitmp_558)
    goto <bb 28>;
  else
    goto <bb 13>;
;;    succ:       28 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 216, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 4766, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __last_246 = PHI <__last_61(13), __last_176(26)>
  # PT = nonlocal escaped 
  # __old_finish_599 = PHI <prephitmp_558(13), __old_finish_177(26)>
  # .MEM_606 = PHI <.MEM_488(13), .MEM_367(26)>
  # DEBUG __curD.66082 => __old_finish_599
  # DEBUG __firstD.66079 => __last_246
  # DEBUG __rD.58622 => __old_finish_599
  # DEBUG __pD.66105 => NULL
  # DEBUG __valueD.66104 => __last_246
  # DEBUG D#24ptD.0 => 24
  # DEBUG __pD.58614 => NULL
  # DEBUG D.58615 => D#24ptD.0
  if (__old_finish_599 != 0B)
    goto <bb 15>;
  else
    goto <bb 25>;
;;    succ:       15 [100.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [0.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 1, count 0, freq 4765, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.66110 => __old_finish_599
  # DEBUG __xD.66111 => __last_246
  # DEBUG D#582ptD.0 => &MEM[(const struct vectorD.35482 *)__last_246].D.41044
  # DEBUG thisD.58605 => D#582ptD.0
  # DEBUG __aD.58603 => NULL
  # VUSE <.MEM_606>
  # PT = nonlocal escaped 
  _135 = MEM[(struct sRequestD.35378 * *)__last_246];
  # DEBUG D#88ptD.0 => __last_246
  # VUSE <.MEM_606>
  # PT = nonlocal escaped 
  _182 = MEM[(struct sRequestD.35378 * *)__last_246 + 8B];
  # DEBUG D#88ptD.0 => __last_246
  # DEBUG thisD.66112 => D#88ptD.0
  # DEBUG thisD.66113 => D#88ptD.0
  _183 = (long intD.12) _182;
  _184 = (long intD.12) _135;
  _185 = _183 - _184;
  # RANGE [-576460752303423488, 576460752303423487]
  _186 = _185 /[ex] 16;
  # RANGE ~[576460752303423488, 17870283321406128127]
  _187 = (size_typeD.40620) _186;
  # DEBUG D#584ptD.0 => &__old_finish_599->D.41044
  # DEBUG thisD.66116 => D#584ptD.0
  # DEBUG __nD.66115 => NULL
  # DEBUG __aD.66114 => NULL
  # DEBUG D#508ptD.0 => &D#584ptD.0->_M_implD.40535
  # DEBUG thisD.66118 => D#508ptD.0
  # DEBUG __aD.66117 => NULL
  # DEBUG thisD.54076 => D#508ptD.0
  # DEBUG __aD.54077 => NULL
  # DEBUG thisD.54073 => D#508ptD.0
  # DEBUG D.54074 => NULL
  # .MEM_489 = VDEF <.MEM_606>
  MEM[(struct _Vector_implD.40512 *)__old_finish_599]._M_startD.40537 = 0B;
  # .MEM_490 = VDEF <.MEM_489>
  MEM[(struct _Vector_implD.40512 *)__old_finish_599]._M_finishD.40538 = 0B;
  # .MEM_491 = VDEF <.MEM_490>
  MEM[(struct _Vector_implD.40512 *)__old_finish_599]._M_end_of_storageD.40539 = 0B;
  # DEBUG thisD.66120 => D#584ptD.0
  # DEBUG __nD.66119 => NULL
  # DEBUG D#506ptD.0 => D#584ptD.0
  # DEBUG __nD.66151 => _187
  # DEBUG thisD.66152 => D#506ptD.0
  # DEBUG D#505ptD.0 => D#506ptD.0
  if (_187 != 0)
    goto <bb 17>;
  else
    goto <bb 16>;
;;    succ:       17 [90.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [10.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 1, count 0, freq 477, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       15 [10.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_657 = (long unsigned intD.14) _185;
  goto <bb 21>;
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 4289, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       15 [90.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#504ptD.0 => &D#505ptD.0->_M_implD.40535
  # DEBUG D#503ptD.0 => D#504ptD.0
  # DEBUG __nD.66155 => _187
  # DEBUG __aD.66154 => D#503ptD.0
  # DEBUG D#502ptD.0 => D#503ptD.0
  # DEBUG D#500ptD.0 => D#502ptD.0
  # DEBUG D#501ptD.0 => 0B
  # DEBUG __nD.66158 => _187
  # DEBUG thisD.66156 => D#500ptD.0
  # DEBUG D.66157 => D#501ptD.0
  # DEBUG D#499ptD.0 => D#500ptD.0
  # DEBUG D#498ptD.0 => D#499ptD.0
  # DEBUG thisD.57144 => D#498ptD.0
  if (_187 > 1152921504606846975)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 2, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __old_finish_465 = PHI <__old_finish_599(17)>
  [LP 20] # .MEM_493 = VDEF <.MEM_491>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZSt17__throw_bad_allocvD.2850 ();
;;    succ:       30 (EH,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 4287, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       17 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _200 = (long unsigned intD.14) _185;
  [LP 8] # .MEM_492 = VDEF <.MEM_491>
  # PT = { D.66615 } (escaped heap)
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _201 = _ZnwmD.2764 (_200);
  goto <bb 21>;
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                20 (EH,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 0
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       19 (EH,EXECUTABLE)
  # PT = nonlocal escaped 
  # __old_finish_464 = PHI <__old_finish_599(19)>
<L39>: [LP 8]
  goto <bb 31> (<L19>);
;;    succ:       31 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 1, count 0, freq 4763, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.66615 } (escaped heap)
  # iftmp.24_202 = PHI <0B(16), _201(19)>
  # .MEM_365 = PHI <.MEM_491(16), .MEM_492(19)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_658 = PHI <pretmp_657(16), _200(19)>
  # .MEM_504 = VDEF <.MEM_365>
  MEM[(struct _Vector_baseD.40302 *)__old_finish_599]._M_implD.40535._M_startD.40537 = iftmp.24_202;
  # .MEM_505 = VDEF <.MEM_504>
  MEM[(struct _Vector_baseD.40302 *)__old_finish_599]._M_implD.40535._M_finishD.40538 = iftmp.24_202;
  # PT = null { D.66615 } (escaped heap)
  _190 = iftmp.24_202 + prephitmp_658;
  # .MEM_506 = VDEF <.MEM_505>
  MEM[(struct _Vector_baseD.40302 *)__old_finish_599]._M_implD.40535._M_end_of_storageD.40539 = _190;
  # DEBUG D#583ptD.0 => &__old_finish_599->D.41044
  # DEBUG thisD.58588 => D#583ptD.0
  # VUSE <.MEM_506>
  # PT = nonlocal escaped 
  _191 = MEM[(struct sRequestD.35378 * *)__last_246 + 8B];
  # DEBUG D#101ptD.0 => __last_246
  # DEBUG thisD.58586 => D#101ptD.0
  # DEBUG thisD.52700 => NULL
  # DEBUG __iD.52699 => NULL
  # VUSE <.MEM_506>
  # PT = nonlocal escaped 
  _192 = MEM[(struct sRequestD.35378 * *)__last_246];
  # DEBUG D#102ptD.0 => __last_246
  # DEBUG thisD.58583 => D#102ptD.0
  # DEBUG thisD.52716 => NULL
  # DEBUG __iD.52715 => NULL
  # DEBUG __firstD.58609 => _192
  # DEBUG __lastD.58610 => _191
  # DEBUG __resultD.66122 => NULL
  # DEBUG D.66121 => D#581ptD.0
  # DEBUG __firstD.58580 => _192
  # DEBUG __lastD.58581 => _191
  # DEBUG __resultD.66125 => NULL
  # DEBUG __assignableD.66130 => 1
  # DEBUG __firstD.58544 => _192
  # DEBUG __lastD.58545 => _191
  # DEBUG __resultD.66131 => NULL
  # DEBUG __firstD.58474 => _192
  # DEBUG __lastD.58473 => _191
  # DEBUG __resultD.66134 => NULL
  # DEBUG __itD.58445 => _191
  # DEBUG __it$_M_currentD.58415 => _191
  # DEBUG __itD.58447 => _192
  # DEBUG __it$_M_currentD.58411 => _192
  # DEBUG __firstD.58420 => _192
  # DEBUG __lastD.58421 => _191
  # DEBUG __resultD.66137 => NULL
  # DEBUG __itD.58386 => NULL
  # DEBUG __itD.54882 => NULL
  # DEBUG __itD.58406 => _191
  # DEBUG __itD.58384 => _191
  # DEBUG thisD.58359 => NULL
  # DEBUG __itD.58408 => _192
  # DEBUG __itD.58380 => _192
  # DEBUG thisD.58359 => NULL
  # DEBUG __firstD.66142 => _192
  # DEBUG __lastD.66141 => _191
  # DEBUG __resultD.66140 => NULL
  # DEBUG __simpleD.66146 => 1
  # DEBUG __firstD.66149 => _192
  # DEBUG __lastD.66148 => _191
  # DEBUG __resultD.66147 => NULL
  __last.26_193 = (long intD.12) _191;
  __first.27_194 = (long intD.12) _192;
  _195 = __last.26_193 - __first.27_194;
  # RANGE [-576460752303423488, 576460752303423487]
  _Num_196 = _195 /[ex] 16;
  # DEBUG _NumD.66150 => _Num_196
  if (_Num_196 != 0)
    goto <bb 23>;
  else
    goto <bb 22>;
;;    succ:       23 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 2906, maybe hot
;;    prev block 21, next block 23, flags: (NEW)
;;    pred:       21 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_659 = (long unsigned intD.14) _195;
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 1857, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       21 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _197 = (long unsigned intD.14) _195;
  # .MEM_507 = VDEF <.MEM_506>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  memmoveD.995 (iftmp.24_202, _192, _197);
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 1, count 0, freq 4763, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_366 = PHI <.MEM_506(22), .MEM_507(23)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_660 = PHI <pretmp_659(22), _197(23)>
  # PT = null { D.66615 } (escaped heap)
  _199 = iftmp.24_202 + prephitmp_660;
  # .MEM_508 = VDEF <.MEM_366>
  __old_finish_599->D.41044._M_implD.40535._M_finishD.40538 = _199;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 4766, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       14 [0.0%]  (FALSE_VALUE,EXECUTABLE)
;;                24 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_367 = PHI <.MEM_606(14), .MEM_508(24)>
  # PT = nonlocal escaped 
  __last_176 = __last_246 + 24;
  # DEBUG __firstD.66079 => __last_176
  # PT = nonlocal escaped 
  __old_finish_177 = __old_finish_599 + 24;
  # DEBUG __curD.66082 => __old_finish_177
  # DEBUG __curD.66082 => __old_finish_177
  # DEBUG __firstD.66079 => __last_176
  if (__last_176 == prephitmp_558)
    goto <bb 27>;
  else
    goto <bb 26>;
;;    succ:       27 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 1, count 0, freq 4552, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 214, maybe hot
;;    prev block 26, next block 28, flags: (NEW)
;;    pred:       25 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_367>
  pretmp_646 = this_9(D)->D.36227._M_implD.35718._M_finishD.35721;
;;    succ:       28 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 225, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       27 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_483 = PHI <.MEM_367(27), .MEM_488(12)>
  # PT = nonlocal escaped 
  # prephitmp_647 = PHI <pretmp_646(27), prephitmp_558(12)>
  # PT = nonlocal escaped 
  _63 = prephitmp_647 + _59;
  # .MEM_64 = VDEF <.MEM_483>
  this_9(D)->D.36227._M_implD.35718._M_finishD.35721 = _63;
  # DEBUG thisD.60093 => &__positionD.36152
  # DEBUG __firstD.60075 => D#1131ptD.0
  # DEBUG __lastD.60076 => __last_61
  # DEBUG __resultD.60077 => D#1113ptD.0
  # DEBUG __itD.60038 => __last_61
  # DEBUG __itD.54874 => __last_61
  # DEBUG __itD.60036 => D#1131ptD.0
  # DEBUG __itD.54874 => D#1131ptD.0
  # DEBUG __firstD.60080 => D#1131ptD.0
  # DEBUG __lastD.60079 => __last_61
  # DEBUG __resultD.60078 => D#1113ptD.0
  # DEBUG __itD.60018 => D#1113ptD.0
  # DEBUG __itD.54877 => D#1113ptD.0
  # DEBUG __itD.60016 => __last_61
  # DEBUG __itD.54877 => __last_61
  # DEBUG __itD.60014 => D#1131ptD.0
  # DEBUG __itD.54877 => D#1131ptD.0
  # DEBUG __firstD.60083 => D#1131ptD.0
  # DEBUG __lastD.60082 => __last_61
  # DEBUG __resultD.60081 => D#1113ptD.0
  # DEBUG __simpleD.60087 => 0
  # DEBUG __firstD.60090 => D#1131ptD.0
  # DEBUG __lastD.60089 => __last_61
  # DEBUG __resultD.60088 => D#1113ptD.0
  __last.29_25 = (long intD.12) __last_61;
  _78 = __last.29_25 - _36;
  # RANGE [-384307168202282325, 384307168202282325]
  __n_73 = _78 /[ex] 24;
  # DEBUG __nD.60091 => __n_73
  # DEBUG __nD.60091 => __n_73
  # DEBUG __resultD.60088 => D#1113ptD.0
  # DEBUG __lastD.60089 => __last_61
  if (__n_73 <= 0)
    goto <bb 29>;
  else
    goto <bb 38>;
;;    succ:       29 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 225, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       28 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                41 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_656 = PHI <.MEM_64(28), .MEM_136(41)>
  # DEBUG thisD.60103 => &__positionD.36152
  # PT = nonlocal 
  _67 = __position_22 + _59;
  # DEBUG thisD.60101 => &__positionD.36152
  # DEBUG __firstD.60095 => D#1131ptD.0
  # DEBUG __lastD.60096 => _67
  # DEBUG __valueD.60097 => &__x_copyD.45105
  # DEBUG __firstD.60100 => D#1131ptD.0
  if (__position_22 == _67)
    goto <bb 43>;
  else
    goto <bb 44>;
;;    succ:       43 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 0
;;    prev block 29, next block 31, flags: (NEW)
;;    pred:       18 (EH,EXECUTABLE)
<L38>: [LP 20]
;;    succ:       31 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 0
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_368 = PHI <.MEM_492(20), .MEM_493(30)>
  # PT = nonlocal escaped 
  # __old_finish_421 = PHI <__old_finish_464(20), __old_finish_465(30)>
<L19>:
  # VUSE <.MEM_368>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _178 = __builtin_eh_pointerD.2738 (14);
  # .MEM_494 = VDEF <.MEM_368>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  __cxa_begin_catchD.14644 (_178);
  # DEBUG __firstD.66084 => D#1113ptD.0
  # DEBUG __lastD.66083 => __old_finish_421
  # DEBUG __firstD.66087 => D#1113ptD.0
  # DEBUG __lastD.66086 => __old_finish_421
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 1, count 0, freq 0
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       31 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __old_finish_179 = PHI <prephitmp_558(31), __old_finish_181(35)>
  # .MEM_369 = PHI <.MEM_494(31), .MEM_500(35)>
  # DEBUG __firstD.66087 => __old_finish_179
  if (__old_finish_179 == __old_finish_421)
    goto <bb 36>;
  else
    goto <bb 33>;
;;    succ:       36 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 33, loop depth 1, count 0, freq 0
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       32 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __rD.53899 => __old_finish_179
  # DEBUG __pointerD.66088 => NULL
  # DEBUG thisD.66089 => NULL
  # DEBUG thisD.53864 => D#294ptD.0
  # DEBUG __firstD.53861 => D#296ptD.0
  # DEBUG __lastD.53862 => D#297ptD.0
  # DEBUG D.53863 => NULL
  # DEBUG D#162ptD.0 => D#296ptD.0
  # DEBUG D#163ptD.0 => D#297ptD.0
  # DEBUG __firstD.53130 => D#162ptD.0
  # DEBUG __lastD.53129 => D#163ptD.0
  # DEBUG D#161ptD.0 => D#163ptD.0
  # DEBUG D#160ptD.0 => D#162ptD.0
  # DEBUG D#158ptD.0 => D#160ptD.0
  # DEBUG D#159ptD.0 => D#161ptD.0
  # DEBUG D.53119 => D#158ptD.0
  # DEBUG D.53118 => D#159ptD.0
  # DEBUG thisD.66090 => D#295ptD.0
  # DEBUG D#293ptD.0 => D#295ptD.0->_M_implD.40535._M_end_of_storageD.40539
  # DEBUG D#292ptD.0 => (long intD.12) D#293ptD.0
  # VUSE <.MEM_369>
  # PT = nonlocal escaped 
  _180 = MEM[(struct _Vector_baseD.40302 *)__old_finish_179]._M_implD.40535._M_startD.40537;
  # DEBUG D#291ptD.0 => (long intD.12) _180
  # DEBUG D#290ptD.0 => D#292ptD.0 - D#291ptD.0
  # DEBUG D#289ptD.0 => D#290ptD.0 /[ex] 16
  # DEBUG D#288ptD.0 => (long unsigned intD.14) D#289ptD.0
  # DEBUG thisD.66093 => D#295ptD.0
  # DEBUG __pD.66092 => _180
  # DEBUG __nD.66091 => D#288ptD.0
  if (_180 != 0B)
    goto <bb 34>;
  else
    goto <bb 35>;
;;    succ:       34 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 1, count 0, freq 0
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       33 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#286ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG D#284ptD.0 => D#286ptD.0
  # DEBUG D#285ptD.0 => D#288ptD.0
  # DEBUG __pD.66097 => _180
  # DEBUG __aD.66095 => D#284ptD.0
  # DEBUG __nD.66096 => D#285ptD.0
  # DEBUG D#283ptD.0 => D#285ptD.0
  # DEBUG D#282ptD.0 => D#284ptD.0
  # DEBUG D#280ptD.0 => D#282ptD.0
  # DEBUG D#281ptD.0 => D#283ptD.0
  # DEBUG __pD.66100 => _180
  # DEBUG thisD.66098 => D#280ptD.0
  # DEBUG D.66099 => D#281ptD.0
  # .MEM_495 = VDEF <.MEM_369>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZdlPvD.2766 (_180);
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 35, loop depth 1, count 0, freq 0
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       33 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                34 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_370 = PHI <.MEM_369(33), .MEM_495(34)>
  # DEBUG D#287ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG thisD.66101 => D#287ptD.0
  # DEBUG thisD.66102 => D#287ptD.0
  # DEBUG thisD.66103 => D#287ptD.0
  # .MEM_500 = VDEF <.MEM_370>
  MEM[(struct  &)__old_finish_179] ={v} {CLOBBER};
  # PT = nonlocal escaped 
  __old_finish_181 = __old_finish_179 + 24;
  # DEBUG __firstD.66087 => __old_finish_181
  goto <bb 32>;
;;    succ:       32 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 0
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       32 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  [LP 7] # .MEM_501 = VDEF <.MEM_369>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  __cxa_rethrowD.45013 ();
;;    succ:       37 (EH,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 0
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       36 (EH,EXECUTABLE)
<L21>: [LP 7]
  [MNT 12] # .MEM_502 = VDEF <.MEM_501>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  __cxa_end_catchD.14643 ();
  [LP 21] resx 13
;;    succ:       194 (EH,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 215, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       28 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 1, count 0, freq 4766, maybe hot
;;    prev block 38, next block 40, flags: (NEW)
;;    pred:       38 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                42 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_624 = PHI <.MEM_64(38), .MEM_136(42)>
  # PT = nonlocal escaped 
  # __old_finish_618 = PHI <prephitmp_558(38), __old_finish_65(42)>
  # PT = nonlocal escaped 
  # __last_619 = PHI <__last_61(38), __last_68(42)>
  # RANGE [-384307168202282325, 384307168202282325]
  # __n_617 = PHI <__n_73(38), __n_58(42)>
  # DEBUG __nD.60091 => __n_617
  # DEBUG __resultD.60088 => __old_finish_618
  # DEBUG __lastD.60089 => __last_619
  # PT = nonlocal escaped 
  __last_68 = __last_619 + 18446744073709551592;
  # DEBUG __lastD.60089 => __last_68
  # PT = nonlocal escaped 
  __old_finish_65 = __old_finish_618 + 18446744073709551592;
  # DEBUG __resultD.60088 => __old_finish_65
  [LP 22] # .MEM_136 = VDEF <.MEM_624>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZNSt6vectorIN9Allocator8sRequestESaIS1_EEaSERKS3_D.40666 (__old_finish_65, __last_68);
  goto <bb 41>;
;;    succ:       41 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                40 (EH,EXECUTABLE)

;;   basic block 40, loop depth 0, count 0, freq 0
;;    prev block 39, next block 41, flags: (NEW)
;;    pred:       39 (EH,EXECUTABLE)
<L41>: [LP 22]
  goto <bb 195> (<L10>);
;;    succ:       195 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 41, loop depth 1, count 0, freq 4766, maybe hot
;;    prev block 40, next block 42, flags: (NEW, REACHABLE)
;;    pred:       39 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 384307168202282324] NONZERO 576460752303423487
  __n_58 = __n_617 + -1;
  # DEBUG __nD.60091 => __n_58
  # DEBUG __nD.60091 => __n_58
  # DEBUG __resultD.60088 => __old_finish_65
  # DEBUG __lastD.60089 => __last_68
  if (__n_58 <= 0)
    goto <bb 29>;
  else
    goto <bb 42>;
;;    succ:       29 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                42 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 42, loop depth 1, count 0, freq 4552, maybe hot
;;    prev block 41, next block 43, flags: (NEW)
;;    pred:       41 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 39>;
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 43, loop depth 0, count 0, freq 437, maybe hot
;;    prev block 42, next block 44, flags: (NEW)
;;    pred:       29 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                89 (TRUE_VALUE,EXECUTABLE)
;;                102 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_655 = PHI <.MEM_656(29), .MEM_137(47), .MEM_77(89), .MEM_140(102)>
  goto <bb 104>;
;;    succ:       104 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 44, loop depth 0, count 0, freq 215, maybe hot
;;    prev block 43, next block 45, flags: (NEW, REACHABLE)
;;    pred:       29 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 45, loop depth 1, count 0, freq 4766, maybe hot
;;    prev block 44, next block 46, flags: (NEW)
;;    pred:       44 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                48 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  # __position_616 = PHI <__position_22(44), __position_81(48)>
  # .MEM_601 = PHI <.MEM_656(44), .MEM_137(48)>
  # DEBUG __firstD.60100 => __position_616
  [LP 23] # .MEM_137 = VDEF <.MEM_601>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZNSt6vectorIN9Allocator8sRequestESaIS1_EEaSERKS3_D.40666 (__position_616, &__x_copyD.45105);
  goto <bb 47>;
;;    succ:       47 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                46 (EH,EXECUTABLE)

;;   basic block 46, loop depth 0, count 0, freq 0
;;    prev block 45, next block 47, flags: (NEW)
;;    pred:       45 (EH,EXECUTABLE)
<L42>: [LP 23]
  goto <bb 195> (<L10>);
;;    succ:       195 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 47, loop depth 1, count 0, freq 4766, maybe hot
;;    prev block 46, next block 48, flags: (NEW, REACHABLE)
;;    pred:       45 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  __position_81 = __position_616 + 24;
  # DEBUG __firstD.60100 => __position_81
  # DEBUG __firstD.60100 => __position_81
  if (_67 == __position_81)
    goto <bb 43>;
  else
    goto <bb 48>;
;;    succ:       43 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                48 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 48, loop depth 1, count 0, freq 4552, maybe hot
;;    prev block 47, next block 49, flags: (NEW)
;;    pred:       47 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 45>;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 49, loop depth 0, count 0, freq 226, maybe hot
;;    prev block 48, next block 50, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#674ptD.0 => &this_9(D)->D.36227
  # DEBUG thisD.60115 => D#674ptD.0
  # RANGE [0, 18446744073709551615]
  __n_70 = __n_7(D) - __elems_after_57;
  # DEBUG __firstD.60105 => D#1113ptD.0
  # DEBUG __nD.60106 => __n_70
  # DEBUG __xD.60107 => &__x_copyD.45105
  # DEBUG D.60108 => D#590ptD.0
  # DEBUG __firstD.60111 => D#1113ptD.0
  # DEBUG __nD.60110 => __n_70
  # DEBUG __xD.60109 => &__x_copyD.45105
  # DEBUG __assignableD.60113 => 1
  # DEBUG __firstD.66160 => D#1113ptD.0
  # DEBUG __nD.66161 => __n_70
  # DEBUG __xD.66162 => &__x_copyD.45105
  # DEBUG __curD.66163 => D#1113ptD.0
  # DEBUG __curD.66163 => D#1113ptD.0
  # DEBUG __nD.66161 => __n_70
  if (__n_70 == 0)
    goto <bb 65>;
  else
    goto <bb 50>;
;;    succ:       65 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                50 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 50, loop depth 0, count 0, freq 216, maybe hot
;;    prev block 49, next block 51, flags: (NEW, REACHABLE)
;;    pred:       49 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       51 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 51, loop depth 1, count 0, freq 4777, maybe hot
;;    prev block 50, next block 52, flags: (NEW)
;;    pred:       50 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                64 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __n_600 = PHI <__n_70(50), __n_205(64)>
  # PT = nonlocal escaped 
  # __old_finish_598 = PHI <prephitmp_558(50), __old_finish_206(64)>
  # .MEM_160 = PHI <.MEM_488(50), .MEM_374(64)>
  # DEBUG __curD.66163 => __old_finish_598
  # DEBUG __nD.66161 => __n_600
  # DEBUG __rD.58734 => __old_finish_598
  # DEBUG __pD.66186 => NULL
  # DEBUG __valueD.66185 => &__x_copyD.45105
  # DEBUG D#24ptD.0 => 24
  # DEBUG __pD.58614 => NULL
  # DEBUG D.58615 => D#24ptD.0
  if (__old_finish_598 != 0B)
    goto <bb 52>;
  else
    goto <bb 62>;
;;    succ:       52 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                62 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 52, loop depth 1, count 0, freq 3336, maybe hot
;;    prev block 51, next block 53, flags: (NEW, REACHABLE)
;;    pred:       51 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.66191 => __old_finish_598
  # DEBUG __xD.66192 => &__x_copyD.45105
  # DEBUG D#582ptD.0 => &__x_copyD.45105.D.41044
  # DEBUG thisD.58605 => D#582ptD.0
  # DEBUG __aD.58603 => NULL
  # VUSE <.MEM_160>
  # PT = nonlocal escaped null { D.66614 } (escaped heap)
  _138 = MEM[(struct sRequestD.35378 * *)&__x_copyD.45105];
  # DEBUG D#88ptD.0 => &__x_copyD.45105
  # VUSE <.MEM_160>
  # PT = nonlocal escaped null { D.66614 } (escaped heap)
  _211 = MEM[(struct sRequestD.35378 * *)&__x_copyD.45105 + 8B];
  # DEBUG D#88ptD.0 => &__x_copyD.45105
  # DEBUG thisD.66193 => D#88ptD.0
  # DEBUG thisD.66194 => D#88ptD.0
  _212 = (long intD.12) _211;
  _213 = (long intD.12) _138;
  _214 = _212 - _213;
  # RANGE [-576460752303423488, 576460752303423487]
  _215 = _214 /[ex] 16;
  # RANGE ~[576460752303423488, 17870283321406128127]
  _216 = (size_typeD.40620) _215;
  # DEBUG D#584ptD.0 => &__old_finish_598->D.41044
  # DEBUG thisD.66197 => D#584ptD.0
  # DEBUG __nD.66196 => NULL
  # DEBUG __aD.66195 => NULL
  # DEBUG D#508ptD.0 => &D#584ptD.0->_M_implD.40535
  # DEBUG thisD.66199 => D#508ptD.0
  # DEBUG __aD.66198 => NULL
  # DEBUG thisD.54076 => D#508ptD.0
  # DEBUG __aD.54077 => NULL
  # DEBUG thisD.54073 => D#508ptD.0
  # DEBUG D.54074 => NULL
  # .MEM_510 = VDEF <.MEM_160>
  MEM[(struct _Vector_implD.40512 *)__old_finish_598]._M_startD.40537 = 0B;
  # .MEM_511 = VDEF <.MEM_510>
  MEM[(struct _Vector_implD.40512 *)__old_finish_598]._M_finishD.40538 = 0B;
  # .MEM_512 = VDEF <.MEM_511>
  MEM[(struct _Vector_implD.40512 *)__old_finish_598]._M_end_of_storageD.40539 = 0B;
  # DEBUG thisD.66201 => D#584ptD.0
  # DEBUG __nD.66200 => NULL
  # DEBUG D#506ptD.0 => D#584ptD.0
  # DEBUG __nD.66232 => _216
  # DEBUG thisD.66233 => D#506ptD.0
  # DEBUG D#505ptD.0 => D#506ptD.0
  if (_216 != 0)
    goto <bb 54>;
  else
    goto <bb 53>;
;;    succ:       54 [90.0%]  (TRUE_VALUE,EXECUTABLE)
;;                53 [10.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 53, loop depth 1, count 0, freq 334, maybe hot
;;    prev block 52, next block 54, flags: (NEW)
;;    pred:       52 [10.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_642 = (long unsigned intD.14) _214;
  goto <bb 58>;
;;    succ:       58 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 54, loop depth 1, count 0, freq 3002, maybe hot
;;    prev block 53, next block 55, flags: (NEW, REACHABLE)
;;    pred:       52 [90.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#504ptD.0 => &D#505ptD.0->_M_implD.40535
  # DEBUG D#503ptD.0 => D#504ptD.0
  # DEBUG __nD.66236 => _216
  # DEBUG __aD.66235 => D#503ptD.0
  # DEBUG D#502ptD.0 => D#503ptD.0
  # DEBUG D#500ptD.0 => D#502ptD.0
  # DEBUG D#501ptD.0 => 0B
  # DEBUG __nD.66239 => _216
  # DEBUG thisD.66237 => D#500ptD.0
  # DEBUG D.66238 => D#501ptD.0
  # DEBUG D#499ptD.0 => D#500ptD.0
  # DEBUG D#498ptD.0 => D#499ptD.0
  # DEBUG thisD.57144 => D#498ptD.0
  if (_216 > 1152921504606846975)
    goto <bb 55>;
  else
    goto <bb 56>;
;;    succ:       55 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                56 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 55, loop depth 0, count 0, freq 1, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 54, next block 56, flags: (NEW, REACHABLE)
;;    pred:       54 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __old_finish_496 = PHI <__old_finish_598(54)>
  [LP 24] # .MEM_514 = VDEF <.MEM_512>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZSt17__throw_bad_allocvD.2850 ();
;;    succ:       66 (EH,EXECUTABLE)

;;   basic block 56, loop depth 1, count 0, freq 3001, maybe hot
;;    prev block 55, next block 57, flags: (NEW, REACHABLE)
;;    pred:       54 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _229 = (long unsigned intD.14) _214;
  [LP 10] # .MEM_513 = VDEF <.MEM_512>
  # PT = { D.66616 } (escaped heap)
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _230 = _ZnwmD.2764 (_229);
  goto <bb 58>;
;;    succ:       58 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                57 (EH,EXECUTABLE)

;;   basic block 57, loop depth 0, count 0, freq 0
;;    prev block 56, next block 58, flags: (NEW)
;;    pred:       56 (EH,EXECUTABLE)
  # PT = nonlocal escaped 
  # __old_finish_466 = PHI <__old_finish_598(56)>
<L44>: [LP 10]
  goto <bb 67> (<L22>);
;;    succ:       67 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 58, loop depth 1, count 0, freq 3335, maybe hot
;;    prev block 57, next block 59, flags: (NEW, REACHABLE)
;;    pred:       53 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                56 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.66616 } (escaped heap)
  # iftmp.24_231 = PHI <0B(53), _230(56)>
  # .MEM_372 = PHI <.MEM_512(53), .MEM_513(56)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_643 = PHI <pretmp_642(53), _229(56)>
  # .MEM_525 = VDEF <.MEM_372>
  MEM[(struct _Vector_baseD.40302 *)__old_finish_598]._M_implD.40535._M_startD.40537 = iftmp.24_231;
  # .MEM_526 = VDEF <.MEM_525>
  MEM[(struct _Vector_baseD.40302 *)__old_finish_598]._M_implD.40535._M_finishD.40538 = iftmp.24_231;
  # PT = null { D.66616 } (escaped heap)
  _219 = iftmp.24_231 + prephitmp_643;
  # .MEM_527 = VDEF <.MEM_526>
  MEM[(struct _Vector_baseD.40302 *)__old_finish_598]._M_implD.40535._M_end_of_storageD.40539 = _219;
  # DEBUG D#583ptD.0 => &__old_finish_598->D.41044
  # DEBUG thisD.58588 => D#583ptD.0
  # VUSE <.MEM_527>
  # PT = nonlocal escaped null { D.66614 } (escaped heap)
  _220 = MEM[(struct sRequestD.35378 * *)&__x_copyD.45105 + 8B];
  # DEBUG D#101ptD.0 => &__x_copyD.45105
  # DEBUG thisD.58586 => D#101ptD.0
  # DEBUG thisD.52700 => NULL
  # DEBUG __iD.52699 => NULL
  # VUSE <.MEM_527>
  # PT = nonlocal escaped null { D.66614 } (escaped heap)
  _221 = MEM[(struct sRequestD.35378 * *)&__x_copyD.45105];
  # DEBUG D#102ptD.0 => &__x_copyD.45105
  # DEBUG thisD.58583 => D#102ptD.0
  # DEBUG thisD.52716 => NULL
  # DEBUG __iD.52715 => NULL
  # DEBUG __firstD.58609 => _221
  # DEBUG __lastD.58610 => _220
  # DEBUG __resultD.66203 => NULL
  # DEBUG D.66202 => D#581ptD.0
  # DEBUG __firstD.58580 => _221
  # DEBUG __lastD.58581 => _220
  # DEBUG __resultD.66206 => NULL
  # DEBUG __assignableD.66211 => 1
  # DEBUG __firstD.58544 => _221
  # DEBUG __lastD.58545 => _220
  # DEBUG __resultD.66212 => NULL
  # DEBUG __firstD.58474 => _221
  # DEBUG __lastD.58473 => _220
  # DEBUG __resultD.66215 => NULL
  # DEBUG __itD.58445 => _220
  # DEBUG __it$_M_currentD.58415 => _220
  # DEBUG __itD.58447 => _221
  # DEBUG __it$_M_currentD.58411 => _221
  # DEBUG __firstD.58420 => _221
  # DEBUG __lastD.58421 => _220
  # DEBUG __resultD.66218 => NULL
  # DEBUG __itD.58386 => NULL
  # DEBUG __itD.54882 => NULL
  # DEBUG __itD.58406 => _220
  # DEBUG __itD.58384 => _220
  # DEBUG thisD.58359 => NULL
  # DEBUG __itD.58408 => _221
  # DEBUG __itD.58380 => _221
  # DEBUG thisD.58359 => NULL
  # DEBUG __firstD.66223 => _221
  # DEBUG __lastD.66222 => _220
  # DEBUG __resultD.66221 => NULL
  # DEBUG __simpleD.66227 => 1
  # DEBUG __firstD.66230 => _221
  # DEBUG __lastD.66229 => _220
  # DEBUG __resultD.66228 => NULL
  __last.26_222 = (long intD.12) _220;
  __first.27_223 = (long intD.12) _221;
  _224 = __last.26_222 - __first.27_223;
  # RANGE [-576460752303423488, 576460752303423487]
  _Num_225 = _224 /[ex] 16;
  # DEBUG _NumD.66231 => _Num_225
  if (_Num_225 != 0)
    goto <bb 60>;
  else
    goto <bb 59>;
;;    succ:       60 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                59 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 59, loop depth 1, count 0, freq 2035, maybe hot
;;    prev block 58, next block 60, flags: (NEW)
;;    pred:       58 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_644 = (long unsigned intD.14) _224;
  goto <bb 61>;
;;    succ:       61 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 60, loop depth 1, count 0, freq 1300, maybe hot
;;    prev block 59, next block 61, flags: (NEW, REACHABLE)
;;    pred:       58 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _226 = (long unsigned intD.14) _224;
  # .MEM_528 = VDEF <.MEM_527>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  memmoveD.995 (iftmp.24_231, _221, _226);
;;    succ:       61 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 61, loop depth 1, count 0, freq 3335, maybe hot
;;    prev block 60, next block 62, flags: (NEW, REACHABLE)
;;    pred:       59 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                60 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_373 = PHI <.MEM_527(59), .MEM_528(60)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_645 = PHI <pretmp_644(59), _226(60)>
  # PT = null { D.66616 } (escaped heap)
  _228 = iftmp.24_231 + prephitmp_645;
  # .MEM_529 = VDEF <.MEM_373>
  __old_finish_598->D.41044._M_implD.40535._M_finishD.40538 = _228;
;;    succ:       62 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 62, loop depth 1, count 0, freq 4777, maybe hot
;;    prev block 61, next block 63, flags: (NEW, REACHABLE)
;;    pred:       51 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                61 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_374 = PHI <.MEM_160(51), .MEM_529(61)>
  # RANGE [0, 18446744073709551614]
  __n_205 = __n_600 + 18446744073709551615;
  # DEBUG __nD.66161 => __n_205
  # PT = nonlocal escaped 
  __old_finish_206 = __old_finish_598 + 24;
  # DEBUG __curD.66163 => __old_finish_206
  # DEBUG __curD.66163 => __old_finish_206
  # DEBUG __nD.66161 => __n_205
  if (__n_205 == 0)
    goto <bb 63>;
  else
    goto <bb 64>;
;;    succ:       63 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                64 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 63, loop depth 0, count 0, freq 215, maybe hot
;;    prev block 62, next block 64, flags: (NEW)
;;    pred:       62 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __old_finish_499 = PHI <__old_finish_206(62)>
  goto <bb 65>;
;;    succ:       65 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 64, loop depth 1, count 0, freq 4562, maybe hot
;;    prev block 63, next block 65, flags: (NEW)
;;    pred:       62 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 51>;
;;    succ:       51 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 65, loop depth 0, count 0, freq 225, maybe hot
;;    prev block 64, next block 66, flags: (NEW, REACHABLE)
;;    pred:       63 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                49 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __old_finish_611 = PHI <__old_finish_499(63), prephitmp_558(49)>
  # .MEM_530 = PHI <.MEM_374(63), .MEM_488(49)>
  # .MEM_71 = VDEF <.MEM_530>
  this_9(D)->D.36227._M_implD.35718._M_finishD.35721 = __old_finish_611;
  # DEBUG D#675ptD.0 => &this_9(D)->D.36227
  # DEBUG thisD.60134 => D#675ptD.0
  # DEBUG thisD.60132 => &__positionD.36152
  # DEBUG __firstD.60117 => D#1131ptD.0
  # DEBUG __lastD.60118 => D#1113ptD.0
  # DEBUG __resultD.60119 => NULL
  # DEBUG __allocD.60120 => D#587ptD.0
  # DEBUG D#586ptD.0 => D#587ptD.0
  # DEBUG D#585ptD.0 => D#586ptD.0
  # DEBUG __firstD.60124 => D#1131ptD.0
  # DEBUG __lastD.60123 => D#1113ptD.0
  # DEBUG __resultD.60122 => NULL
  # DEBUG D.60121 => D#585ptD.0
  # DEBUG __firstD.60127 => D#1131ptD.0
  # DEBUG __lastD.60126 => D#1113ptD.0
  # DEBUG __resultD.60125 => NULL
  # DEBUG __assignableD.60130 => 1
  # DEBUG __firstD.66241 => D#1131ptD.0
  # DEBUG __lastD.66242 => D#1113ptD.0
  # DEBUG __resultD.66243 => __old_finish_611
  # DEBUG __curD.66244 => __old_finish_611
  # DEBUG __firstD.66241 => D#1131ptD.0
  if (__position_22 == prephitmp_558)
    goto <bb 216>;
  else
    goto <bb 75>;
;;    succ:       216 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                75 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 66, loop depth 0, count 0, freq 0
;;    prev block 65, next block 67, flags: (NEW)
;;    pred:       55 (EH,EXECUTABLE)
<L43>: [LP 24]
;;    succ:       67 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 67, loop depth 0, count 0, freq 0
;;    prev block 66, next block 68, flags: (NEW, REACHABLE)
;;    pred:       57 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                66 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_375 = PHI <.MEM_513(57), .MEM_514(66)>
  # PT = nonlocal escaped 
  # __old_finish_422 = PHI <__old_finish_466(57), __old_finish_496(66)>
<L22>:
  # VUSE <.MEM_375>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _207 = __builtin_eh_pointerD.2738 (17);
  # .MEM_515 = VDEF <.MEM_375>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  __cxa_begin_catchD.14644 (_207);
  # DEBUG __firstD.66165 => D#1113ptD.0
  # DEBUG __lastD.66164 => __old_finish_422
  # DEBUG __firstD.66168 => D#1113ptD.0
  # DEBUG __lastD.66167 => __old_finish_422
;;    succ:       68 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 68, loop depth 1, count 0, freq 0
;;    prev block 67, next block 69, flags: (NEW, REACHABLE)
;;    pred:       67 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                71 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __old_finish_208 = PHI <prephitmp_558(67), __old_finish_210(71)>
  # .MEM_376 = PHI <.MEM_515(67), .MEM_521(71)>
  # DEBUG __firstD.66168 => __old_finish_208
  if (__old_finish_208 == __old_finish_422)
    goto <bb 72>;
  else
    goto <bb 69>;
;;    succ:       72 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                69 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 69, loop depth 1, count 0, freq 0
;;    prev block 68, next block 70, flags: (NEW, REACHABLE)
;;    pred:       68 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __rD.53899 => __old_finish_208
  # DEBUG __pointerD.66169 => NULL
  # DEBUG thisD.66170 => NULL
  # DEBUG thisD.53864 => D#294ptD.0
  # DEBUG __firstD.53861 => D#296ptD.0
  # DEBUG __lastD.53862 => D#297ptD.0
  # DEBUG D.53863 => NULL
  # DEBUG D#162ptD.0 => D#296ptD.0
  # DEBUG D#163ptD.0 => D#297ptD.0
  # DEBUG __firstD.53130 => D#162ptD.0
  # DEBUG __lastD.53129 => D#163ptD.0
  # DEBUG D#161ptD.0 => D#163ptD.0
  # DEBUG D#160ptD.0 => D#162ptD.0
  # DEBUG D#158ptD.0 => D#160ptD.0
  # DEBUG D#159ptD.0 => D#161ptD.0
  # DEBUG D.53119 => D#158ptD.0
  # DEBUG D.53118 => D#159ptD.0
  # DEBUG thisD.66171 => D#295ptD.0
  # DEBUG D#293ptD.0 => D#295ptD.0->_M_implD.40535._M_end_of_storageD.40539
  # DEBUG D#292ptD.0 => (long intD.12) D#293ptD.0
  # VUSE <.MEM_376>
  # PT = nonlocal escaped 
  _209 = MEM[(struct _Vector_baseD.40302 *)__old_finish_208]._M_implD.40535._M_startD.40537;
  # DEBUG D#291ptD.0 => (long intD.12) _209
  # DEBUG D#290ptD.0 => D#292ptD.0 - D#291ptD.0
  # DEBUG D#289ptD.0 => D#290ptD.0 /[ex] 16
  # DEBUG D#288ptD.0 => (long unsigned intD.14) D#289ptD.0
  # DEBUG thisD.66174 => D#295ptD.0
  # DEBUG __pD.66173 => _209
  # DEBUG __nD.66172 => D#288ptD.0
  if (_209 != 0B)
    goto <bb 70>;
  else
    goto <bb 71>;
;;    succ:       70 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                71 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 70, loop depth 1, count 0, freq 0
;;    prev block 69, next block 71, flags: (NEW, REACHABLE)
;;    pred:       69 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#286ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG D#284ptD.0 => D#286ptD.0
  # DEBUG D#285ptD.0 => D#288ptD.0
  # DEBUG __pD.66178 => _209
  # DEBUG __aD.66176 => D#284ptD.0
  # DEBUG __nD.66177 => D#285ptD.0
  # DEBUG D#283ptD.0 => D#285ptD.0
  # DEBUG D#282ptD.0 => D#284ptD.0
  # DEBUG D#280ptD.0 => D#282ptD.0
  # DEBUG D#281ptD.0 => D#283ptD.0
  # DEBUG __pD.66181 => _209
  # DEBUG thisD.66179 => D#280ptD.0
  # DEBUG D.66180 => D#281ptD.0
  # .MEM_516 = VDEF <.MEM_376>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZdlPvD.2766 (_209);
;;    succ:       71 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 71, loop depth 1, count 0, freq 0
;;    prev block 70, next block 72, flags: (NEW, REACHABLE)
;;    pred:       69 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                70 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_377 = PHI <.MEM_376(69), .MEM_516(70)>
  # DEBUG D#287ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG thisD.66182 => D#287ptD.0
  # DEBUG thisD.66183 => D#287ptD.0
  # DEBUG thisD.66184 => D#287ptD.0
  # .MEM_521 = VDEF <.MEM_377>
  MEM[(struct  &)__old_finish_208] ={v} {CLOBBER};
  # PT = nonlocal escaped 
  __old_finish_210 = __old_finish_208 + 24;
  # DEBUG __firstD.66168 => __old_finish_210
  goto <bb 68>;
;;    succ:       68 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 72, loop depth 0, count 0, freq 0
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 71, next block 73, flags: (NEW, REACHABLE)
;;    pred:       68 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  [LP 9] # .MEM_522 = VDEF <.MEM_376>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  __cxa_rethrowD.45013 ();
;;    succ:       73 (EH,EXECUTABLE)

;;   basic block 73, loop depth 0, count 0, freq 0
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 72, next block 74, flags: (NEW, REACHABLE)
;;    pred:       72 (EH,EXECUTABLE)
<L24>: [LP 9]
  [MNT 15] # .MEM_523 = VDEF <.MEM_522>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  __cxa_end_catchD.14643 ();
  [LP 25] resx 16
;;    succ:       74 (EH,EXECUTABLE)

;;   basic block 74, loop depth 0, count 0, freq 0
;;    prev block 73, next block 75, flags: (NEW)
;;    pred:       73 (EH,EXECUTABLE)
<L45>: [LP 25]
  goto <bb 195> (<L10>);
;;    succ:       195 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 75, loop depth 0, count 0, freq 215, maybe hot
;;    prev block 74, next block 76, flags: (NEW, REACHABLE)
;;    pred:       65 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       76 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 76, loop depth 1, count 0, freq 4741, maybe hot
;;    prev block 75, next block 77, flags: (NEW)
;;    pred:       75 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                88 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  # __position_612 = PHI <__position_22(75), __position_234(88)>
  # PT = nonlocal escaped 
  # __old_finish_613 = PHI <__old_finish_611(75), __old_finish_235(88)>
  # .MEM_188 = PHI <.MEM_71(75), .MEM_381(88)>
  # DEBUG __curD.66244 => __old_finish_613
  # DEBUG __firstD.66241 => __position_612
  # DEBUG __rD.58622 => __old_finish_613
  # DEBUG __pD.66267 => NULL
  # DEBUG __valueD.66266 => __position_612
  # DEBUG D#24ptD.0 => 24
  # DEBUG __pD.58614 => NULL
  # DEBUG D.58615 => D#24ptD.0
  if (__old_finish_613 != 0B)
    goto <bb 77>;
  else
    goto <bb 87>;
;;    succ:       77 [100.0%]  (TRUE_VALUE,EXECUTABLE)
;;                87 [0.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 77, loop depth 1, count 0, freq 4740, maybe hot
;;    prev block 76, next block 78, flags: (NEW, REACHABLE)
;;    pred:       76 [100.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.66272 => __old_finish_613
  # DEBUG __xD.66273 => __position_612
  # DEBUG D#582ptD.0 => &MEM[(const struct vectorD.35482 *)__position_612].D.41044
  # DEBUG thisD.58605 => D#582ptD.0
  # DEBUG __aD.58603 => NULL
  # VUSE <.MEM_188>
  # PT = nonlocal escaped 
  _139 = MEM[(struct sRequestD.35378 * *)__position_612];
  # DEBUG D#88ptD.0 => __position_612
  # VUSE <.MEM_188>
  # PT = nonlocal escaped 
  _240 = MEM[(struct sRequestD.35378 * *)__position_612 + 8B];
  # DEBUG D#88ptD.0 => __position_612
  # DEBUG thisD.66274 => D#88ptD.0
  # DEBUG thisD.66275 => D#88ptD.0
  _241 = (long intD.12) _240;
  _242 = (long intD.12) _139;
  _243 = _241 - _242;
  # RANGE [-576460752303423488, 576460752303423487]
  _244 = _243 /[ex] 16;
  # RANGE ~[576460752303423488, 17870283321406128127]
  _245 = (size_typeD.40620) _244;
  # DEBUG D#584ptD.0 => &__old_finish_613->D.41044
  # DEBUG thisD.66278 => D#584ptD.0
  # DEBUG __nD.66277 => NULL
  # DEBUG __aD.66276 => NULL
  # DEBUG D#508ptD.0 => &D#584ptD.0->_M_implD.40535
  # DEBUG thisD.66280 => D#508ptD.0
  # DEBUG __aD.66279 => NULL
  # DEBUG thisD.54076 => D#508ptD.0
  # DEBUG __aD.54077 => NULL
  # DEBUG thisD.54073 => D#508ptD.0
  # DEBUG D.54074 => NULL
  # .MEM_531 = VDEF <.MEM_188>
  MEM[(struct _Vector_implD.40512 *)__old_finish_613]._M_startD.40537 = 0B;
  # .MEM_532 = VDEF <.MEM_531>
  MEM[(struct _Vector_implD.40512 *)__old_finish_613]._M_finishD.40538 = 0B;
  # .MEM_533 = VDEF <.MEM_532>
  MEM[(struct _Vector_implD.40512 *)__old_finish_613]._M_end_of_storageD.40539 = 0B;
  # DEBUG thisD.66282 => D#584ptD.0
  # DEBUG __nD.66281 => NULL
  # DEBUG D#506ptD.0 => D#584ptD.0
  # DEBUG __nD.66313 => _245
  # DEBUG thisD.66314 => D#506ptD.0
  # DEBUG D#505ptD.0 => D#506ptD.0
  if (_245 != 0)
    goto <bb 79>;
  else
    goto <bb 78>;
;;    succ:       79 [90.0%]  (TRUE_VALUE,EXECUTABLE)
;;                78 [10.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 78, loop depth 1, count 0, freq 474, maybe hot
;;    prev block 77, next block 79, flags: (NEW)
;;    pred:       77 [10.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_638 = (long unsigned intD.14) _243;
  goto <bb 83>;
;;    succ:       83 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 79, loop depth 1, count 0, freq 4266, maybe hot
;;    prev block 78, next block 80, flags: (NEW, REACHABLE)
;;    pred:       77 [90.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#504ptD.0 => &D#505ptD.0->_M_implD.40535
  # DEBUG D#503ptD.0 => D#504ptD.0
  # DEBUG __nD.66317 => _245
  # DEBUG __aD.66316 => D#503ptD.0
  # DEBUG D#502ptD.0 => D#503ptD.0
  # DEBUG D#500ptD.0 => D#502ptD.0
  # DEBUG D#501ptD.0 => 0B
  # DEBUG __nD.66320 => _245
  # DEBUG thisD.66318 => D#500ptD.0
  # DEBUG D.66319 => D#501ptD.0
  # DEBUG D#499ptD.0 => D#500ptD.0
  # DEBUG D#498ptD.0 => D#499ptD.0
  # DEBUG thisD.57144 => D#498ptD.0
  if (_245 > 1152921504606846975)
    goto <bb 80>;
  else
    goto <bb 81>;
;;    succ:       80 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                81 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 80, loop depth 0, count 0, freq 2, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 79, next block 81, flags: (NEW, REACHABLE)
;;    pred:       79 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __old_finish_443 = PHI <__old_finish_613(79)>
  [LP 26] # .MEM_535 = VDEF <.MEM_533>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZSt17__throw_bad_allocvD.2850 ();
;;    succ:       90 (EH,EXECUTABLE)

;;   basic block 81, loop depth 1, count 0, freq 4264, maybe hot
;;    prev block 80, next block 82, flags: (NEW, REACHABLE)
;;    pred:       79 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _258 = (long unsigned intD.14) _243;
  [LP 12] # .MEM_534 = VDEF <.MEM_533>
  # PT = { D.66617 } (escaped heap)
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _259 = _ZnwmD.2764 (_258);
  goto <bb 83>;
;;    succ:       83 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                82 (EH,EXECUTABLE)

;;   basic block 82, loop depth 0, count 0, freq 0
;;    prev block 81, next block 83, flags: (NEW)
;;    pred:       81 (EH,EXECUTABLE)
  # PT = nonlocal escaped 
  # __old_finish_442 = PHI <__old_finish_613(81)>
<L47>: [LP 12]
  goto <bb 91> (<L25>);
;;    succ:       91 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 83, loop depth 1, count 0, freq 4738, maybe hot
;;    prev block 82, next block 84, flags: (NEW, REACHABLE)
;;    pred:       78 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                81 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.66617 } (escaped heap)
  # iftmp.24_260 = PHI <0B(78), _259(81)>
  # .MEM_379 = PHI <.MEM_533(78), .MEM_534(81)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_639 = PHI <pretmp_638(78), _258(81)>
  # .MEM_546 = VDEF <.MEM_379>
  MEM[(struct _Vector_baseD.40302 *)__old_finish_613]._M_implD.40535._M_startD.40537 = iftmp.24_260;
  # .MEM_547 = VDEF <.MEM_546>
  MEM[(struct _Vector_baseD.40302 *)__old_finish_613]._M_implD.40535._M_finishD.40538 = iftmp.24_260;
  # PT = null { D.66617 } (escaped heap)
  _248 = iftmp.24_260 + prephitmp_639;
  # .MEM_548 = VDEF <.MEM_547>
  MEM[(struct _Vector_baseD.40302 *)__old_finish_613]._M_implD.40535._M_end_of_storageD.40539 = _248;
  # DEBUG D#583ptD.0 => &__old_finish_613->D.41044
  # DEBUG thisD.58588 => D#583ptD.0
  # VUSE <.MEM_548>
  # PT = nonlocal escaped 
  _249 = MEM[(struct sRequestD.35378 * *)__position_612 + 8B];
  # DEBUG D#101ptD.0 => __position_612
  # DEBUG thisD.58586 => D#101ptD.0
  # DEBUG thisD.52700 => NULL
  # DEBUG __iD.52699 => NULL
  # VUSE <.MEM_548>
  # PT = nonlocal escaped 
  _250 = MEM[(struct sRequestD.35378 * *)__position_612];
  # DEBUG D#102ptD.0 => __position_612
  # DEBUG thisD.58583 => D#102ptD.0
  # DEBUG thisD.52716 => NULL
  # DEBUG __iD.52715 => NULL
  # DEBUG __firstD.58609 => _250
  # DEBUG __lastD.58610 => _249
  # DEBUG __resultD.66284 => NULL
  # DEBUG D.66283 => D#581ptD.0
  # DEBUG __firstD.58580 => _250
  # DEBUG __lastD.58581 => _249
  # DEBUG __resultD.66287 => NULL
  # DEBUG __assignableD.66292 => 1
  # DEBUG __firstD.58544 => _250
  # DEBUG __lastD.58545 => _249
  # DEBUG __resultD.66293 => NULL
  # DEBUG __firstD.58474 => _250
  # DEBUG __lastD.58473 => _249
  # DEBUG __resultD.66296 => NULL
  # DEBUG __itD.58445 => _249
  # DEBUG __it$_M_currentD.58415 => _249
  # DEBUG __itD.58447 => _250
  # DEBUG __it$_M_currentD.58411 => _250
  # DEBUG __firstD.58420 => _250
  # DEBUG __lastD.58421 => _249
  # DEBUG __resultD.66299 => NULL
  # DEBUG __itD.58386 => NULL
  # DEBUG __itD.54882 => NULL
  # DEBUG __itD.58406 => _249
  # DEBUG __itD.58384 => _249
  # DEBUG thisD.58359 => NULL
  # DEBUG __itD.58408 => _250
  # DEBUG __itD.58380 => _250
  # DEBUG thisD.58359 => NULL
  # DEBUG __firstD.66304 => _250
  # DEBUG __lastD.66303 => _249
  # DEBUG __resultD.66302 => NULL
  # DEBUG __simpleD.66308 => 1
  # DEBUG __firstD.66311 => _250
  # DEBUG __lastD.66310 => _249
  # DEBUG __resultD.66309 => NULL
  __last.26_251 = (long intD.12) _249;
  __first.27_252 = (long intD.12) _250;
  _253 = __last.26_251 - __first.27_252;
  # RANGE [-576460752303423488, 576460752303423487]
  _Num_254 = _253 /[ex] 16;
  # DEBUG _NumD.66312 => _Num_254
  if (_Num_254 != 0)
    goto <bb 85>;
  else
    goto <bb 84>;
;;    succ:       85 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                84 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 84, loop depth 1, count 0, freq 2891, maybe hot
;;    prev block 83, next block 85, flags: (NEW)
;;    pred:       83 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_640 = (long unsigned intD.14) _253;
  goto <bb 86>;
;;    succ:       86 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 85, loop depth 1, count 0, freq 1847, maybe hot
;;    prev block 84, next block 86, flags: (NEW, REACHABLE)
;;    pred:       83 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _255 = (long unsigned intD.14) _253;
  # .MEM_549 = VDEF <.MEM_548>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  memmoveD.995 (iftmp.24_260, _250, _255);
;;    succ:       86 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 86, loop depth 1, count 0, freq 4738, maybe hot
;;    prev block 85, next block 87, flags: (NEW, REACHABLE)
;;    pred:       84 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                85 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_380 = PHI <.MEM_548(84), .MEM_549(85)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_641 = PHI <pretmp_640(84), _255(85)>
  # PT = null { D.66617 } (escaped heap)
  _257 = iftmp.24_260 + prephitmp_641;
  # .MEM_550 = VDEF <.MEM_380>
  __old_finish_613->D.41044._M_implD.40535._M_finishD.40538 = _257;
;;    succ:       87 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 87, loop depth 1, count 0, freq 4741, maybe hot
;;    prev block 86, next block 88, flags: (NEW, REACHABLE)
;;    pred:       76 [0.0%]  (FALSE_VALUE,EXECUTABLE)
;;                86 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_381 = PHI <.MEM_188(76), .MEM_550(86)>
  # PT = nonlocal 
  __position_234 = __position_612 + 24;
  # DEBUG __firstD.66241 => __position_234
  # PT = nonlocal escaped 
  __old_finish_235 = __old_finish_613 + 24;
  # DEBUG __curD.66244 => __old_finish_235
  # DEBUG __curD.66244 => __old_finish_235
  # DEBUG __firstD.66241 => __position_234
  if (__position_234 == prephitmp_558)
    goto <bb 89>;
  else
    goto <bb 88>;
;;    succ:       89 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                88 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 88, loop depth 1, count 0, freq 4528, maybe hot
;;    prev block 87, next block 89, flags: (NEW)
;;    pred:       87 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 76>;
;;    succ:       76 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 89, loop depth 0, count 0, freq 213, maybe hot
;;    prev block 88, next block 90, flags: (NEW, REACHABLE)
;;    pred:       87 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_381>
  # PT = nonlocal escaped 
  _74 = this_9(D)->D.36227._M_implD.35718._M_finishD.35721;
  # RANGE [0, 18446744073709551615]
  _75 = (long unsigned intD.14) _34;
  # PT = nonlocal escaped 
  _76 = _74 + _75;
  # .MEM_77 = VDEF <.MEM_381>
  this_9(D)->D.36227._M_implD.35718._M_finishD.35721 = _76;
  # DEBUG thisD.60142 => &__positionD.36152
  # DEBUG __firstD.60136 => D#1131ptD.0
  # DEBUG __lastD.60137 => D#1113ptD.0
  # DEBUG __valueD.60138 => &__x_copyD.45105
  # DEBUG __firstD.60141 => D#1131ptD.0
  if (__position_22 == prephitmp_558)
    goto <bb 43>;
  else
    goto <bb 99>;
;;    succ:       43 (TRUE_VALUE,EXECUTABLE)
;;                99 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 90, loop depth 0, count 0, freq 0
;;    prev block 89, next block 91, flags: (NEW)
;;    pred:       80 (EH,EXECUTABLE)
<L46>: [LP 26]
;;    succ:       91 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 91, loop depth 0, count 0, freq 0
;;    prev block 90, next block 92, flags: (NEW, REACHABLE)
;;    pred:       82 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                90 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_382 = PHI <.MEM_534(82), .MEM_535(90)>
  # PT = nonlocal escaped 
  # __old_finish_409 = PHI <__old_finish_442(82), __old_finish_443(90)>
<L25>:
  # VUSE <.MEM_382>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _236 = __builtin_eh_pointerD.2738 (20);
  # .MEM_536 = VDEF <.MEM_382>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  __cxa_begin_catchD.14644 (_236);
  # DEBUG __firstD.66246 => __old_finish_611
  # DEBUG __lastD.66245 => __old_finish_409
  # DEBUG __firstD.66249 => __old_finish_611
  # DEBUG __lastD.66248 => __old_finish_409
;;    succ:       92 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 92, loop depth 1, count 0, freq 0
;;    prev block 91, next block 93, flags: (NEW, REACHABLE)
;;    pred:       91 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                95 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __old_finish_237 = PHI <__old_finish_611(91), __old_finish_239(95)>
  # .MEM_383 = PHI <.MEM_536(91), .MEM_542(95)>
  # DEBUG __firstD.66249 => __old_finish_237
  if (__old_finish_237 == __old_finish_409)
    goto <bb 96>;
  else
    goto <bb 93>;
;;    succ:       96 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                93 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 93, loop depth 1, count 0, freq 0
;;    prev block 92, next block 94, flags: (NEW, REACHABLE)
;;    pred:       92 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __rD.53899 => __old_finish_237
  # DEBUG __pointerD.66250 => NULL
  # DEBUG thisD.66251 => NULL
  # DEBUG thisD.53864 => D#294ptD.0
  # DEBUG __firstD.53861 => D#296ptD.0
  # DEBUG __lastD.53862 => D#297ptD.0
  # DEBUG D.53863 => NULL
  # DEBUG D#162ptD.0 => D#296ptD.0
  # DEBUG D#163ptD.0 => D#297ptD.0
  # DEBUG __firstD.53130 => D#162ptD.0
  # DEBUG __lastD.53129 => D#163ptD.0
  # DEBUG D#161ptD.0 => D#163ptD.0
  # DEBUG D#160ptD.0 => D#162ptD.0
  # DEBUG D#158ptD.0 => D#160ptD.0
  # DEBUG D#159ptD.0 => D#161ptD.0
  # DEBUG D.53119 => D#158ptD.0
  # DEBUG D.53118 => D#159ptD.0
  # DEBUG thisD.66252 => D#295ptD.0
  # DEBUG D#293ptD.0 => D#295ptD.0->_M_implD.40535._M_end_of_storageD.40539
  # DEBUG D#292ptD.0 => (long intD.12) D#293ptD.0
  # VUSE <.MEM_383>
  # PT = nonlocal escaped 
  _238 = MEM[(struct _Vector_baseD.40302 *)__old_finish_237]._M_implD.40535._M_startD.40537;
  # DEBUG D#291ptD.0 => (long intD.12) _238
  # DEBUG D#290ptD.0 => D#292ptD.0 - D#291ptD.0
  # DEBUG D#289ptD.0 => D#290ptD.0 /[ex] 16
  # DEBUG D#288ptD.0 => (long unsigned intD.14) D#289ptD.0
  # DEBUG thisD.66255 => D#295ptD.0
  # DEBUG __pD.66254 => _238
  # DEBUG __nD.66253 => D#288ptD.0
  if (_238 != 0B)
    goto <bb 94>;
  else
    goto <bb 95>;
;;    succ:       94 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                95 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 94, loop depth 1, count 0, freq 0
;;    prev block 93, next block 95, flags: (NEW, REACHABLE)
;;    pred:       93 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#286ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG D#284ptD.0 => D#286ptD.0
  # DEBUG D#285ptD.0 => D#288ptD.0
  # DEBUG __pD.66259 => _238
  # DEBUG __aD.66257 => D#284ptD.0
  # DEBUG __nD.66258 => D#285ptD.0
  # DEBUG D#283ptD.0 => D#285ptD.0
  # DEBUG D#282ptD.0 => D#284ptD.0
  # DEBUG D#280ptD.0 => D#282ptD.0
  # DEBUG D#281ptD.0 => D#283ptD.0
  # DEBUG __pD.66262 => _238
  # DEBUG thisD.66260 => D#280ptD.0
  # DEBUG D.66261 => D#281ptD.0
  # .MEM_537 = VDEF <.MEM_383>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZdlPvD.2766 (_238);
;;    succ:       95 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 95, loop depth 1, count 0, freq 0
;;    prev block 94, next block 96, flags: (NEW, REACHABLE)
;;    pred:       93 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                94 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_384 = PHI <.MEM_383(93), .MEM_537(94)>
  # DEBUG D#287ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG thisD.66263 => D#287ptD.0
  # DEBUG thisD.66264 => D#287ptD.0
  # DEBUG thisD.66265 => D#287ptD.0
  # .MEM_542 = VDEF <.MEM_384>
  MEM[(struct  &)__old_finish_237] ={v} {CLOBBER};
  # PT = nonlocal escaped 
  __old_finish_239 = __old_finish_237 + 24;
  # DEBUG __firstD.66249 => __old_finish_239
  goto <bb 92>;
;;    succ:       92 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 96, loop depth 0, count 0, freq 0
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 95, next block 97, flags: (NEW, REACHABLE)
;;    pred:       92 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  [LP 11] # .MEM_543 = VDEF <.MEM_383>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  __cxa_rethrowD.45013 ();
;;    succ:       97 (EH,EXECUTABLE)

;;   basic block 97, loop depth 0, count 0, freq 0
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 96, next block 98, flags: (NEW, REACHABLE)
;;    pred:       96 (EH,EXECUTABLE)
<L27>: [LP 11]
  [MNT 18] # .MEM_544 = VDEF <.MEM_543>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  __cxa_end_catchD.14643 ();
  [LP 27] resx 19
;;    succ:       98 (EH,EXECUTABLE)

;;   basic block 98, loop depth 0, count 0, freq 0
;;    prev block 97, next block 99, flags: (NEW)
;;    pred:       97 (EH,EXECUTABLE)
<L48>: [LP 27]
  goto <bb 195> (<L10>);
;;    succ:       195 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 99, loop depth 0, count 0, freq 213, maybe hot
;;    prev block 98, next block 100, flags: (NEW, REACHABLE)
;;    pred:       89 [100.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       100 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 100, loop depth 1, count 0, freq 4741, maybe hot
;;    prev block 99, next block 101, flags: (NEW)
;;    pred:       99 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                103 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  # __position_603 = PHI <__position_22(99), __position_84(103)>
  # .MEM_602 = PHI <.MEM_77(99), .MEM_140(103)>
  # DEBUG __firstD.60141 => __position_603
  [LP 2] # .MEM_140 = VDEF <.MEM_602>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZNSt6vectorIN9Allocator8sRequestESaIS1_EEaSERKS3_D.40666 (__position_603, &__x_copyD.45105);
  goto <bb 102>;
;;    succ:       102 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                101 (EH,EXECUTABLE)

;;   basic block 101, loop depth 0, count 0, freq 0
;;    prev block 100, next block 102, flags: (NEW)
;;    pred:       100 (EH,EXECUTABLE)
<L49>: [LP 2]
  goto <bb 195> (<L10>);
;;    succ:       195 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 102, loop depth 1, count 0, freq 4741, maybe hot
;;    prev block 101, next block 103, flags: (NEW, REACHABLE)
;;    pred:       100 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  __position_84 = __position_603 + 24;
  # DEBUG __firstD.60141 => __position_84
  # DEBUG __firstD.60141 => __position_84
  if (__position_84 == prephitmp_558)
    goto <bb 43>;
  else
    goto <bb 103>;
;;    succ:       43 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                103 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 103, loop depth 1, count 0, freq 4528, maybe hot
;;    prev block 102, next block 104, flags: (NEW)
;;    pred:       102 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 100>;
;;    succ:       100 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 104, loop depth 0, count 0, freq 448, maybe hot
;;    prev block 103, next block 105, flags: (NEW, REACHABLE)
;;    pred:       216 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                43 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2 = PHI <.MEM_282(216), .MEM_655(43)>
  # DEBUG thisD.60144 => &__x_copyD.45105
  # DEBUG D#294ptD.0 => &__x_copyD.45105.D.41044
  # DEBUG thisD.53864 => D#294ptD.0
  # DEBUG D#297ptD.0 => __x_copyD.45105.D.41044._M_implD.40535._M_finishD.40538
  # DEBUG D#296ptD.0 => __x_copyD.45105.D.41044._M_implD.40535._M_startD.40537
  # DEBUG __firstD.53861 => D#296ptD.0
  # DEBUG __lastD.53862 => D#297ptD.0
  # DEBUG D.53863 => NULL
  # DEBUG D#162ptD.0 => D#296ptD.0
  # DEBUG D#163ptD.0 => D#297ptD.0
  # DEBUG __firstD.53130 => D#162ptD.0
  # DEBUG __lastD.53129 => D#163ptD.0
  # DEBUG D#161ptD.0 => D#163ptD.0
  # DEBUG D#160ptD.0 => D#162ptD.0
  # DEBUG D#158ptD.0 => D#160ptD.0
  # DEBUG D#159ptD.0 => D#161ptD.0
  # DEBUG D.53119 => D#158ptD.0
  # DEBUG D.53118 => D#159ptD.0
  # DEBUG D#295ptD.0 => &__x_copyD.45105.D.41044
  # DEBUG thisD.60145 => D#295ptD.0
  # DEBUG D#293ptD.0 => D#295ptD.0->_M_implD.40535._M_end_of_storageD.40539
  # DEBUG D#292ptD.0 => (long intD.12) D#293ptD.0
  # VUSE <.MEM_2>
  # PT = nonlocal escaped null { D.66614 } (escaped heap)
  _85 = MEM[(struct _Vector_baseD.40302 *)&__x_copyD.45105]._M_implD.40535._M_startD.40537;
  # DEBUG D#291ptD.0 => (long intD.12) _85
  # DEBUG D#290ptD.0 => D#292ptD.0 - D#291ptD.0
  # DEBUG D#289ptD.0 => D#290ptD.0 /[ex] 16
  # DEBUG D#288ptD.0 => (long unsigned intD.14) D#289ptD.0
  # DEBUG thisD.60148 => D#295ptD.0
  # DEBUG __pD.60147 => _85
  # DEBUG __nD.60146 => D#288ptD.0
  if (_85 != 0B)
    goto <bb 105>;
  else
    goto <bb 106>;
;;    succ:       105 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                106 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 105, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 104, next block 106, flags: (NEW, REACHABLE)
;;    pred:       104 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#286ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG D#284ptD.0 => D#286ptD.0
  # DEBUG D#285ptD.0 => D#288ptD.0
  # DEBUG __pD.60152 => _85
  # DEBUG __aD.60150 => D#284ptD.0
  # DEBUG __nD.60151 => D#285ptD.0
  # DEBUG D#283ptD.0 => D#285ptD.0
  # DEBUG D#282ptD.0 => D#284ptD.0
  # DEBUG D#280ptD.0 => D#282ptD.0
  # DEBUG D#281ptD.0 => D#283ptD.0
  # DEBUG __pD.60155 => _85
  # DEBUG thisD.60153 => D#280ptD.0
  # DEBUG D.60154 => D#281ptD.0
  # .MEM_141 = VDEF <.MEM_2>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZdlPvD.2766 (_85);
;;    succ:       106 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 106, loop depth 0, count 0, freq 448, maybe hot
;;    prev block 105, next block 107, flags: (NEW, REACHABLE)
;;    pred:       104 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                105 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_102 = PHI <.MEM_2(104), .MEM_141(105)>
  # DEBUG D#287ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG thisD.60156 => D#287ptD.0
  # DEBUG thisD.60157 => D#287ptD.0
  # DEBUG thisD.60158 => D#287ptD.0
  # .MEM_79 = VDEF <.MEM_102>
  __x_copyD.45105 ={v} {CLOBBER};
  goto <bb 193>;
;;    succ:       193 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 107, loop depth 0, count 0, freq 453, maybe hot
;;    prev block 106, next block 108, flags: (NEW, REACHABLE)
;;    pred:       3 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.66362 => this_9(D)
  # DEBUG __nD.66363 => __n_7(D)
  # DEBUG __nD.66363 => __n_7(D)
  # DEBUG __sD.66364 => "vector::_M_fill_insert"
  # DEBUG D#520ptD.0 => this_9(D)
  # DEBUG thisD.57303 => D#520ptD.0
  # DEBUG D#519ptD.0 => D#520ptD.0
  # DEBUG D#518ptD.0 => &D#519ptD.0->D.36227
  # DEBUG thisD.57293 => D#518ptD.0
  # DEBUG __aD.57285 => D#517ptD.0
  # DEBUG D#516ptD.0 => D#517ptD.0
  # DEBUG D#515ptD.0 => D#516ptD.0
  # DEBUG thisD.57276 => D#515ptD.0
  # VUSE <.MEM_8(D)>
  # PT = nonlocal escaped 
  _23 = MEM[(struct vectorD.35482 * *)this_9(D)];
  # DEBUG D#89ptD.0 => this_9(D)
  # DEBUG D#89ptD.0 => this_9(D)
  # DEBUG thisD.66368 => D#89ptD.0
  # DEBUG thisD.66369 => D#89ptD.0
  _273 = (long intD.12) _23;
  _274 = _13 - _273;
  # RANGE [-384307168202282325, 384307168202282325]
  _275 = _274 /[ex] 24;
  # RANGE ~[384307168202282326, 18062436905507269290]
  _276 = (const long unsigned intD.14) _275;
  # RANGE [384307168202282325, 1152921504606846975] NONZERO 1152921504606846975
  _277 = 768614336404564650 - _276;
  if (__n_7(D) > _277)
    goto <bb 108>;
  else
    goto <bb 109>;
;;    succ:       108 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                109 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 108, loop depth 0, count 0, freq 0
;;    prev block 107, next block 109, flags: (NEW, REACHABLE)
;;    pred:       107 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_477 = VDEF <.MEM_8(D)>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZSt20__throw_length_errorPKcD.2860 ("vector::_M_fill_insert");
;;    succ:      

;;   basic block 109, loop depth 0, count 0, freq 453, maybe hot
;;    prev block 108, next block 110, flags: (NEW, REACHABLE)
;;    pred:       107 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#89ptD.0 => this_9(D)
  # DEBUG D#89ptD.0 => this_9(D)
  # DEBUG thisD.57321 => D#89ptD.0
  # DEBUG thisD.57320 => D#89ptD.0
  # DEBUG D#89ptD.0 => this_9(D)
  # DEBUG D#89ptD.0 => this_9(D)
  # DEBUG thisD.57316 => D#89ptD.0
  # DEBUG thisD.57315 => D#89ptD.0
  # DEBUG __aD.66367 => &D.66371
  # DEBUG __bD.66366 => &__nD.66363
  _289 = MAX_EXPR <__n_7(D), _276>;
  # RANGE [0, 18446744073709551615]
  __len_281 = _276 + _289;
  # DEBUG __lenD.66365 => __len_281
  # DEBUG D#89ptD.0 => this_9(D)
  # DEBUG D#89ptD.0 => this_9(D)
  # DEBUG thisD.57308 => D#89ptD.0
  # DEBUG thisD.57307 => D#89ptD.0
  # DEBUG D#520ptD.0 => this_9(D)
  # DEBUG thisD.57323 => D#520ptD.0
  # DEBUG D#519ptD.0 => D#520ptD.0
  # DEBUG D#518ptD.0 => &D#519ptD.0->D.36227
  # DEBUG thisD.57293 => D#518ptD.0
  # DEBUG __aD.57285 => D#517ptD.0
  # DEBUG D#516ptD.0 => D#517ptD.0
  # DEBUG D#515ptD.0 => D#516ptD.0
  # DEBUG thisD.57276 => D#515ptD.0
  _560 = __len_281 > 768614336404564650;
  _604 = _276 > __len_281;
  _428 = _560 | _604;
  if (_428 != 0)
    goto <bb 214>;
  else
    goto <bb 215>;
;;    succ:       214 [67.0%]  (TRUE_VALUE,EXECUTABLE)
;;                215 [33.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 110, loop depth 0, count 0, freq 4, maybe hot
;;    prev block 109, next block 111, flags: (NEW)
;;    pred:       215 [7.5%]  (TRUE_VALUE,EXECUTABLE)
  pretmp_582 = __len_281 * 24;
;;    succ:       111 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 111, loop depth 0, count 0, freq 407, maybe hot
;;    prev block 110, next block 112, flags: (NEW, REACHABLE)
;;    pred:       214 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                110 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE ~[384307168202282326, 18062436905507269290]
  # __elems_before_412 = PHI <__elems_before_566(214), __elems_before_554(110)>
  # _629 = PHI <_567(214), _347(110)>
  # RANGE [24, 18446744073709551600] NONZERO 18446744073709551608
  # prephitmp_583 = PHI <18446744073709551600(214), pretmp_582(110)>
  # DEBUG __lenD.45139 => NULL
  # DEBUG thisD.60174 => this_9(D)
  # DEBUG D#168ptD.0 => &this_9(D)->D.36227._M_implD.35718._M_startD.35720
  # DEBUG thisD.60176 => NULL
  # DEBUG __iD.60175 => D#168ptD.0
  # DEBUG __lhsD.60171 => &__positionD.36152
  # DEBUG __rhsD.60172 => &D.45141
  # DEBUG thisD.53151 => &__positionD.36152
  # DEBUG thisD.53149 => &D.45141
  # DEBUG __elems_beforeD.45140 => __elems_before_412
  # DEBUG D#685ptD.0 => &this_9(D)->D.36227
  # DEBUG D#528ptD.0 => D#685ptD.0
  # DEBUG __nD.66353 => NULL
  # DEBUG thisD.66354 => D#528ptD.0
  # DEBUG D#527ptD.0 => D#528ptD.0
  # DEBUG D#526ptD.0 => &D#527ptD.0->_M_implD.35718
  # DEBUG D#525ptD.0 => D#526ptD.0
  # DEBUG __nD.66357 => NULL
  # DEBUG __aD.66356 => D#525ptD.0
  # DEBUG D#524ptD.0 => D#525ptD.0
  # DEBUG D#522ptD.0 => D#524ptD.0
  # DEBUG D#523ptD.0 => 0B
  # DEBUG __nD.66360 => NULL
  # DEBUG thisD.66358 => D#522ptD.0
  # DEBUG D.66359 => D#523ptD.0
  # DEBUG D#521ptD.0 => D#522ptD.0
  # DEBUG D#515ptD.0 => D#521ptD.0
  # DEBUG thisD.57328 => D#515ptD.0
  # .MEM_411 = VDEF <.MEM_8(D)>
  # PT = { D.66618 } (escaped heap)
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _269 = _ZnwmD.2764 (prephitmp_583);
;;    succ:       112 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 112, loop depth 0, count 0, freq 452, maybe hot
;;    prev block 111, next block 113, flags: (NEW, REACHABLE)
;;    pred:       215 [92.5%]  (FALSE_VALUE,EXECUTABLE)
;;                111 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.66618 } (escaped heap)
  # __new_finish_270 = PHI <0B(215), _269(111)>
  # .MEM_385 = PHI <.MEM_8(D)(215), .MEM_411(111)>
  # RANGE ~[384307168202282326, 18062436905507269290]
  # __elems_before_631 = PHI <__elems_before_554(215), __elems_before_412(111)>
  # _630 = PHI <_347(215), _629(111)>
  # prephitmp_278 = PHI <0(215), prephitmp_583(111)>
  # DEBUG __new_startD.45142 => NULL
  # DEBUG __new_finishD.45143 => NULL
  # DEBUG D#669ptD.0 => &this_9(D)->D.36227
  # DEBUG thisD.60169 => D#669ptD.0
  # RANGE [0, 18446744073709551615]
  _26 = (long unsigned intD.14) _630;
  # PT = null { D.66618 } (escaped heap)
  __first_27 = __new_finish_270 + _26;
  # DEBUG __firstD.60159 => __first_27
  # DEBUG __nD.60160 => __n_7(D)
  # DEBUG __xD.60161 => __x_28(D)
  # DEBUG D.60162 => D#590ptD.0
  # DEBUG __firstD.60165 => __first_27
  # DEBUG __nD.60164 => __n_7(D)
  # DEBUG __xD.60163 => __x_28(D)
  # DEBUG __assignableD.60167 => 1
  # DEBUG __firstD.66322 => __first_27
  # DEBUG __nD.66323 => __n_7(D)
  # DEBUG __xD.66324 => __x_28(D)
  # DEBUG __curD.66325 => __first_27
  # DEBUG __nD.66323 => __n_7(D)
;;    succ:       113 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 113, loop depth 1, count 0, freq 9550, maybe hot
;;    prev block 112, next block 114, flags: (NEW, REACHABLE)
;;    pred:       125 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                112 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 1152921504606846975] NONZERO 1152921504606846975
  # __n_633 = PHI <__n_263(125), __n_7(D)(112)>
  # PT = null { D.66618 } (escaped heap)
  # __first_632 = PHI <__first_264(125), __first_27(112)>
  # .MEM_628 = PHI <.MEM_389(125), .MEM_385(112)>
  # DEBUG __curD.66325 => __first_632
  # DEBUG __nD.66323 => __n_633
  # DEBUG __rD.58734 => __first_632
  # DEBUG __pD.66348 => NULL
  # DEBUG __valueD.66347 => __x_28(D)
  # DEBUG D#24ptD.0 => 24
  # DEBUG __pD.58614 => NULL
  # DEBUG D.58615 => D#24ptD.0
  if (__first_632 != 0B)
    goto <bb 114>;
  else
    goto <bb 124>;
;;    succ:       114 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                124 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 114, loop depth 1, count 0, freq 6669, maybe hot
;;    prev block 113, next block 115, flags: (NEW, REACHABLE)
;;    pred:       113 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.66372 => __first_632
  # DEBUG __xD.66373 => __x_28(D)
  # DEBUG D#582ptD.0 => &MEM[(const struct vectorD.35482 *)__x_28(D)].D.41044
  # DEBUG thisD.58605 => D#582ptD.0
  # DEBUG __aD.58603 => NULL
  # VUSE <.MEM_628>
  # PT = nonlocal escaped 
  _17 = MEM[(struct sRequestD.35378 * *)__x_28(D)];
  # DEBUG D#88ptD.0 => __x_28(D)
  # VUSE <.MEM_628>
  # PT = nonlocal escaped 
  _283 = MEM[(struct sRequestD.35378 * *)__x_28(D) + 8B];
  # DEBUG D#88ptD.0 => __x_28(D)
  # DEBUG thisD.66374 => D#88ptD.0
  # DEBUG thisD.66375 => D#88ptD.0
  _284 = (long intD.12) _283;
  _285 = (long intD.12) _17;
  _286 = _284 - _285;
  # RANGE [-576460752303423488, 576460752303423487]
  _287 = _286 /[ex] 16;
  # RANGE ~[576460752303423488, 17870283321406128127]
  _288 = (size_typeD.40620) _287;
  # DEBUG D#584ptD.0 => &__first_632->D.41044
  # DEBUG thisD.66378 => D#584ptD.0
  # DEBUG __nD.66377 => NULL
  # DEBUG __aD.66376 => NULL
  # DEBUG D#508ptD.0 => &D#584ptD.0->_M_implD.40535
  # DEBUG thisD.66380 => D#508ptD.0
  # DEBUG __aD.66379 => NULL
  # DEBUG thisD.54076 => D#508ptD.0
  # DEBUG __aD.54077 => NULL
  # DEBUG thisD.54073 => D#508ptD.0
  # DEBUG D.54074 => NULL
  # .MEM_414 = VDEF <.MEM_628>
  MEM[(struct _Vector_implD.40512 *)__first_632]._M_startD.40537 = 0B;
  # .MEM_415 = VDEF <.MEM_414>
  MEM[(struct _Vector_implD.40512 *)__first_632]._M_finishD.40538 = 0B;
  # .MEM_416 = VDEF <.MEM_415>
  MEM[(struct _Vector_implD.40512 *)__first_632]._M_end_of_storageD.40539 = 0B;
  # DEBUG thisD.66382 => D#584ptD.0
  # DEBUG __nD.66381 => NULL
  # DEBUG D#506ptD.0 => D#584ptD.0
  # DEBUG __nD.66413 => _288
  # DEBUG thisD.66414 => D#506ptD.0
  # DEBUG D#505ptD.0 => D#506ptD.0
  if (_288 != 0)
    goto <bb 116>;
  else
    goto <bb 115>;
;;    succ:       116 [90.0%]  (TRUE_VALUE,EXECUTABLE)
;;                115 [10.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 115, loop depth 1, count 0, freq 667, maybe hot
;;    prev block 114, next block 116, flags: (NEW)
;;    pred:       114 [10.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_585 = (long unsigned intD.14) _286;
  goto <bb 121>;
;;    succ:       121 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 116, loop depth 1, count 0, freq 6002, maybe hot
;;    prev block 115, next block 117, flags: (NEW, REACHABLE)
;;    pred:       114 [90.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#504ptD.0 => &D#505ptD.0->_M_implD.40535
  # DEBUG D#503ptD.0 => D#504ptD.0
  # DEBUG __nD.66417 => _288
  # DEBUG __aD.66416 => D#503ptD.0
  # DEBUG D#502ptD.0 => D#503ptD.0
  # DEBUG D#500ptD.0 => D#502ptD.0
  # DEBUG D#501ptD.0 => 0B
  # DEBUG __nD.66420 => _288
  # DEBUG thisD.66418 => D#500ptD.0
  # DEBUG D.66419 => D#501ptD.0
  # DEBUG D#499ptD.0 => D#500ptD.0
  # DEBUG D#498ptD.0 => D#499ptD.0
  # DEBUG thisD.57144 => D#498ptD.0
  if (_288 > 1152921504606846975)
    goto <bb 117>;
  else
    goto <bb 118>;
;;    succ:       117 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                118 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 117, loop depth 0, count 0, freq 2, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 116, next block 118, flags: (NEW, REACHABLE)
;;    pred:       116 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = null { D.66618 } (escaped heap)
  # __first_424 = PHI <__first_632(116)>
  [LP 28] # .MEM_418 = VDEF <.MEM_416>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZSt17__throw_bad_allocvD.2850 ();
;;    succ:       127 (EH,EXECUTABLE)

;;   basic block 118, loop depth 1, count 0, freq 5999, maybe hot
;;    prev block 117, next block 119, flags: (NEW, REACHABLE)
;;    pred:       116 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _301 = (long unsigned intD.14) _286;
  [LP 14] # .MEM_417 = VDEF <.MEM_416>
  # PT = { D.66619 } (escaped heap)
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _302 = _ZnwmD.2764 (_301);
  goto <bb 120>;
;;    succ:       120 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                119 (EH,EXECUTABLE)

;;   basic block 119, loop depth 0, count 0, freq 0
;;    prev block 118, next block 120, flags: (NEW)
;;    pred:       118 (EH,EXECUTABLE)
  # PT = null { D.66618 } (escaped heap)
  # __first_423 = PHI <__first_632(118)>
<L51>: [LP 14]
  goto <bb 128> (<L28>);
;;    succ:       128 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 120, loop depth 1, count 0, freq 5999, maybe hot
;;    prev block 119, next block 121, flags: (NEW)
;;    pred:       118 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_417>
  pretmp_262 = MEM[(struct sRequestD.35378 * *)__x_28(D) + 8B];
  # VUSE <.MEM_417>
  pretmp_24 = MEM[(struct sRequestD.35378 * *)__x_28(D)];
  pretmp_597 = (long intD.12) pretmp_262;
  pretmp_589 = (long intD.12) pretmp_24;
  pretmp_592 = pretmp_597 - pretmp_589;
  pretmp_586 = pretmp_592 /[ex] 16;
  pretmp_663 = (long unsigned intD.14) pretmp_592;
;;    succ:       121 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 121, loop depth 1, count 0, freq 6666, maybe hot
;;    prev block 120, next block 122, flags: (NEW, REACHABLE)
;;    pred:       115 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                120 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.66619 } (escaped heap)
  # iftmp.24_303 = PHI <0B(115), _302(120)>
  # .MEM_387 = PHI <.MEM_416(115), .MEM_417(120)>
  # PT = nonlocal escaped 
  # prephitmp_553 = PHI <_17(115), pretmp_24(120)>
  # RANGE [-576460752303423488, 576460752303423487]
  # prephitmp_584 = PHI <_287(115), pretmp_586(120)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_217 = PHI <pretmp_585(115), _301(120)>
  # prephitmp_664 = PHI <pretmp_585(115), pretmp_663(120)>
  # .MEM_429 = VDEF <.MEM_387>
  MEM[(struct _Vector_baseD.40302 *)__first_632]._M_implD.40535._M_startD.40537 = iftmp.24_303;
  # .MEM_430 = VDEF <.MEM_429>
  MEM[(struct _Vector_baseD.40302 *)__first_632]._M_implD.40535._M_finishD.40538 = iftmp.24_303;
  # PT = null { D.66619 } (escaped heap)
  _291 = iftmp.24_303 + prephitmp_217;
  # .MEM_431 = VDEF <.MEM_430>
  MEM[(struct _Vector_baseD.40302 *)__first_632]._M_implD.40535._M_end_of_storageD.40539 = _291;
  # DEBUG D#583ptD.0 => &__first_632->D.41044
  # DEBUG thisD.58588 => D#583ptD.0
  # DEBUG D#1130ptD.0 => MEM[(struct sRequestD.35378 * *)__x_28(D) + 8B]
  # DEBUG D#101ptD.0 => __x_28(D)
  # DEBUG thisD.58586 => D#101ptD.0
  # DEBUG thisD.52700 => NULL
  # DEBUG __iD.52699 => NULL
  # DEBUG D#1129ptD.0 => MEM[(struct sRequestD.35378 * *)__x_28(D)]
  # DEBUG D#102ptD.0 => __x_28(D)
  # DEBUG thisD.58583 => D#102ptD.0
  # DEBUG thisD.52716 => NULL
  # DEBUG __iD.52715 => NULL
  # DEBUG __firstD.58609 => D#1129ptD.0
  # DEBUG __lastD.58610 => D#1130ptD.0
  # DEBUG __resultD.66384 => NULL
  # DEBUG D.66383 => D#581ptD.0
  # DEBUG __firstD.58580 => D#1129ptD.0
  # DEBUG __lastD.58581 => D#1130ptD.0
  # DEBUG __resultD.66387 => NULL
  # DEBUG __assignableD.66392 => 1
  # DEBUG __firstD.58544 => D#1129ptD.0
  # DEBUG __lastD.58545 => D#1130ptD.0
  # DEBUG __resultD.66393 => NULL
  # DEBUG __firstD.58474 => D#1129ptD.0
  # DEBUG __lastD.58473 => D#1130ptD.0
  # DEBUG __resultD.66396 => NULL
  # DEBUG __itD.58445 => D#1130ptD.0
  # DEBUG __it$_M_currentD.58415 => D#1130ptD.0
  # DEBUG __itD.58447 => D#1129ptD.0
  # DEBUG __it$_M_currentD.58411 => D#1129ptD.0
  # DEBUG __firstD.58420 => D#1129ptD.0
  # DEBUG __lastD.58421 => D#1130ptD.0
  # DEBUG __resultD.66399 => NULL
  # DEBUG __itD.58386 => NULL
  # DEBUG __itD.54882 => NULL
  # DEBUG __itD.58406 => D#1130ptD.0
  # DEBUG __itD.58384 => D#1130ptD.0
  # DEBUG thisD.58359 => NULL
  # DEBUG __itD.58408 => D#1129ptD.0
  # DEBUG __itD.58380 => D#1129ptD.0
  # DEBUG thisD.58359 => NULL
  # DEBUG __firstD.66404 => D#1129ptD.0
  # DEBUG __lastD.66403 => D#1130ptD.0
  # DEBUG __resultD.66402 => NULL
  # DEBUG __simpleD.66408 => 1
  # DEBUG __firstD.66411 => D#1129ptD.0
  # DEBUG __lastD.66410 => D#1130ptD.0
  # DEBUG __resultD.66409 => NULL
  # DEBUG D#1128ptD.0 => (long intD.12) D#1130ptD.0
  # DEBUG D#1127ptD.0 => (long intD.12) D#1129ptD.0
  # DEBUG D#1126ptD.0 => D#1128ptD.0 - D#1127ptD.0
  # DEBUG _NumD.66412 => D#1126ptD.0 /[ex] 16
  if (prephitmp_584 != 0)
    goto <bb 122>;
  else
    goto <bb 123>;
;;    succ:       122 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                123 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 122, loop depth 1, count 0, freq 2599, maybe hot
;;    prev block 121, next block 123, flags: (NEW, REACHABLE)
;;    pred:       121 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_432 = VDEF <.MEM_431>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  memmoveD.995 (iftmp.24_303, prephitmp_553, prephitmp_664);
;;    succ:       123 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 123, loop depth 1, count 0, freq 6666, maybe hot
;;    prev block 122, next block 124, flags: (NEW, REACHABLE)
;;    pred:       121 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                122 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_388 = PHI <.MEM_431(121), .MEM_432(122)>
  # PT = null { D.66619 } (escaped heap)
  _300 = iftmp.24_303 + prephitmp_664;
  # .MEM_433 = VDEF <.MEM_388>
  __first_632->D.41044._M_implD.40535._M_finishD.40538 = _300;
;;    succ:       124 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 124, loop depth 1, count 0, freq 9548, maybe hot
;;    prev block 123, next block 125, flags: (NEW, REACHABLE)
;;    pred:       113 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                123 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_389 = PHI <.MEM_628(113), .MEM_433(123)>
  # RANGE [0, 1152921504606846974] NONZERO 1152921504606846975
  __n_263 = __n_633 + 18446744073709551615;
  # DEBUG __nD.66323 => __n_263
  # PT = null { D.66618 } (escaped heap)
  __first_264 = __first_632 + 24;
  # DEBUG __curD.66325 => __first_264
  # DEBUG __curD.66325 => __first_264
  # DEBUG __nD.66323 => __n_263
  if (__n_263 == 0)
    goto <bb 126>;
  else
    goto <bb 125>;
;;    succ:       126 [4.7%]  (TRUE_VALUE,EXECUTABLE)
;;                125 [95.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 125, loop depth 1, count 0, freq 9098, maybe hot
;;    prev block 124, next block 126, flags: (NEW)
;;    pred:       124 [95.3%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 113>;
;;    succ:       113 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 126, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 125, next block 127, flags: (NEW, REACHABLE)
;;    pred:       124 [4.7%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __new_finishD.45143 => 0B
  # DEBUG D#670ptD.0 => &this_9(D)->D.36227
  # DEBUG thisD.60196 => D#670ptD.0
  # DEBUG thisD.60194 => &__positionD.36152
  # VUSE <.MEM_389>
  # PT = nonlocal escaped 
  __first_31 = this_9(D)->D.36227._M_implD.35718._M_startD.35720;
  # DEBUG __firstD.60179 => __first_31
  # DEBUG __lastD.60180 => D#1131ptD.0
  # DEBUG __resultD.60181 => NULL
  # DEBUG __allocD.60182 => D#589ptD.0
  # DEBUG D#588ptD.0 => D#589ptD.0
  # DEBUG D#585ptD.0 => D#588ptD.0
  # DEBUG __firstD.60186 => __first_31
  # DEBUG __lastD.60185 => D#1131ptD.0
  # DEBUG __resultD.60184 => NULL
  # DEBUG D.60183 => D#585ptD.0
  # DEBUG __firstD.60189 => __first_31
  # DEBUG __lastD.60188 => D#1131ptD.0
  # DEBUG __resultD.60187 => NULL
  # DEBUG __assignableD.60192 => 1
  # DEBUG __firstD.66422 => __first_31
  # DEBUG __lastD.66423 => D#1131ptD.0
  # DEBUG __resultD.66424 => __new_finish_270
  # DEBUG __curD.66425 => __new_finish_270
  # DEBUG __firstD.66422 => __first_31
  if (__position_22 == __first_31)
    goto <bb 150>;
  else
    goto <bb 135>;
;;    succ:       150 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                135 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 127, loop depth 0, count 0, freq 0
;;    prev block 126, next block 128, flags: (NEW)
;;    pred:       117 (EH,EXECUTABLE)
<L50>: [LP 28]
;;    succ:       128 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 128, loop depth 0, count 0, freq 0
;;    prev block 127, next block 129, flags: (NEW, REACHABLE)
;;    pred:       119 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                127 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_390 = PHI <.MEM_417(119), .MEM_418(127)>
  # PT = null { D.66618 } (escaped heap)
  # __first_408 = PHI <__first_423(119), __first_424(127)>
<L28>:
  # VUSE <.MEM_390>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _265 = __builtin_eh_pointerD.2738 (23);
  # .MEM_419 = VDEF <.MEM_390>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  __cxa_begin_catchD.14644 (_265);
  # DEBUG __firstD.66327 => __first_27
  # DEBUG __lastD.66326 => __first_408
  # DEBUG __firstD.66330 => __first_27
  # DEBUG __lastD.66329 => __first_408
;;    succ:       129 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 129, loop depth 1, count 0, freq 0
;;    prev block 128, next block 130, flags: (NEW, REACHABLE)
;;    pred:       128 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                132 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = null { D.66618 } (escaped heap)
  # __first_266 = PHI <__first_27(128), __first_268(132)>
  # .MEM_391 = PHI <.MEM_419(128), .MEM_425(132)>
  # DEBUG __firstD.66330 => __first_266
  if (__first_266 == __first_408)
    goto <bb 133>;
  else
    goto <bb 130>;
;;    succ:       133 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                130 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 130, loop depth 1, count 0, freq 0
;;    prev block 129, next block 131, flags: (NEW, REACHABLE)
;;    pred:       129 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __rD.53899 => __first_266
  # DEBUG __pointerD.66331 => NULL
  # DEBUG thisD.66332 => NULL
  # DEBUG thisD.53864 => D#294ptD.0
  # DEBUG __firstD.53861 => D#296ptD.0
  # DEBUG __lastD.53862 => D#297ptD.0
  # DEBUG D.53863 => NULL
  # DEBUG D#162ptD.0 => D#296ptD.0
  # DEBUG D#163ptD.0 => D#297ptD.0
  # DEBUG __firstD.53130 => D#162ptD.0
  # DEBUG __lastD.53129 => D#163ptD.0
  # DEBUG D#161ptD.0 => D#163ptD.0
  # DEBUG D#160ptD.0 => D#162ptD.0
  # DEBUG D#158ptD.0 => D#160ptD.0
  # DEBUG D#159ptD.0 => D#161ptD.0
  # DEBUG D.53119 => D#158ptD.0
  # DEBUG D.53118 => D#159ptD.0
  # DEBUG thisD.66333 => D#295ptD.0
  # DEBUG D#293ptD.0 => D#295ptD.0->_M_implD.40535._M_end_of_storageD.40539
  # DEBUG D#292ptD.0 => (long intD.12) D#293ptD.0
  # VUSE <.MEM_391>
  # PT = nonlocal escaped null { D.66619 D.66620 D.66621 } (escaped heap)
  _267 = MEM[(struct _Vector_baseD.40302 *)__first_266]._M_implD.40535._M_startD.40537;
  # DEBUG D#291ptD.0 => (long intD.12) _267
  # DEBUG D#290ptD.0 => D#292ptD.0 - D#291ptD.0
  # DEBUG D#289ptD.0 => D#290ptD.0 /[ex] 16
  # DEBUG D#288ptD.0 => (long unsigned intD.14) D#289ptD.0
  # DEBUG thisD.66336 => D#295ptD.0
  # DEBUG __pD.66335 => _267
  # DEBUG __nD.66334 => D#288ptD.0
  if (_267 != 0B)
    goto <bb 131>;
  else
    goto <bb 132>;
;;    succ:       131 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                132 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 131, loop depth 1, count 0, freq 0
;;    prev block 130, next block 132, flags: (NEW, REACHABLE)
;;    pred:       130 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#286ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG D#284ptD.0 => D#286ptD.0
  # DEBUG D#285ptD.0 => D#288ptD.0
  # DEBUG __pD.66340 => _267
  # DEBUG __aD.66338 => D#284ptD.0
  # DEBUG __nD.66339 => D#285ptD.0
  # DEBUG D#283ptD.0 => D#285ptD.0
  # DEBUG D#282ptD.0 => D#284ptD.0
  # DEBUG D#280ptD.0 => D#282ptD.0
  # DEBUG D#281ptD.0 => D#283ptD.0
  # DEBUG __pD.66343 => _267
  # DEBUG thisD.66341 => D#280ptD.0
  # DEBUG D.66342 => D#281ptD.0
  # .MEM_420 = VDEF <.MEM_391>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZdlPvD.2766 (_267);
;;    succ:       132 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 132, loop depth 1, count 0, freq 0
;;    prev block 131, next block 133, flags: (NEW, REACHABLE)
;;    pred:       130 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                131 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_392 = PHI <.MEM_391(130), .MEM_420(131)>
  # DEBUG D#287ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG thisD.66344 => D#287ptD.0
  # DEBUG thisD.66345 => D#287ptD.0
  # DEBUG thisD.66346 => D#287ptD.0
  # .MEM_425 = VDEF <.MEM_392>
  MEM[(struct  &)__first_266] ={v} {CLOBBER};
  # PT = null { D.66618 } (escaped heap)
  __first_268 = __first_266 + 24;
  # DEBUG __firstD.66330 => __first_268
  goto <bb 129>;
;;    succ:       129 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 133, loop depth 0, count 0, freq 0
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 132, next block 134, flags: (NEW, REACHABLE)
;;    pred:       129 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  [LP 13] # .MEM_426 = VDEF <.MEM_391>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  __cxa_rethrowD.45013 ();
;;    succ:       134 (EH,EXECUTABLE)

;;   basic block 134, loop depth 0, count 0, freq 0
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 133, next block 135, flags: (NEW, REACHABLE)
;;    pred:       133 (EH,EXECUTABLE)
<L30>: [LP 13]
  [MNT 21] # .MEM_427 = VDEF <.MEM_426>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  __cxa_end_catchD.14643 ();
  [LP 29] resx 22
;;    succ:       198 (EH,EXECUTABLE)

;;   basic block 135, loop depth 0, count 0, freq 430, maybe hot
;;    prev block 134, next block 136, flags: (NEW, REACHABLE)
;;    pred:       126 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       136 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 136, loop depth 1, count 0, freq 9478, maybe hot
;;    prev block 135, next block 137, flags: (NEW)
;;    pred:       135 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                149 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_607 = PHI <__first_31(135), __first_306(149)>
  # PT = null { D.66618 } (escaped heap)
  # __new_finish_608 = PHI <__new_finish_270(135), __new_finish_307(149)>
  # .MEM_562 = PHI <.MEM_389(135), .MEM_396(149)>
  # DEBUG __curD.66425 => __new_finish_608
  # DEBUG __firstD.66422 => __first_607
  # DEBUG __rD.58622 => __new_finish_608
  # DEBUG __pD.66448 => NULL
  # DEBUG __valueD.66447 => __first_607
  # DEBUG D#24ptD.0 => 24
  # DEBUG __pD.58614 => NULL
  # DEBUG D.58615 => D#24ptD.0
  if (__new_finish_608 != 0B)
    goto <bb 137>;
  else
    goto <bb 147>;
;;    succ:       137 [100.0%]  (TRUE_VALUE,EXECUTABLE)
;;                147 [0.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 137, loop depth 1, count 0, freq 9476, maybe hot
;;    prev block 136, next block 138, flags: (NEW, REACHABLE)
;;    pred:       136 [100.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.66453 => __new_finish_608
  # DEBUG __xD.66454 => __first_607
  # DEBUG D#582ptD.0 => &MEM[(const struct vectorD.35482 *)__first_607].D.41044
  # DEBUG thisD.58605 => D#582ptD.0
  # DEBUG __aD.58603 => NULL
  # VUSE <.MEM_562>
  # PT = nonlocal escaped 
  _113 = MEM[(struct sRequestD.35378 * *)__first_607];
  # DEBUG D#88ptD.0 => __first_607
  # VUSE <.MEM_562>
  # PT = nonlocal escaped 
  _312 = MEM[(struct sRequestD.35378 * *)__first_607 + 8B];
  # DEBUG D#88ptD.0 => __first_607
  # DEBUG thisD.66455 => D#88ptD.0
  # DEBUG thisD.66456 => D#88ptD.0
  _313 = (long intD.12) _312;
  _314 = (long intD.12) _113;
  _315 = _313 - _314;
  # RANGE [-576460752303423488, 576460752303423487]
  _316 = _315 /[ex] 16;
  # RANGE ~[576460752303423488, 17870283321406128127]
  _317 = (size_typeD.40620) _316;
  # DEBUG D#584ptD.0 => &__new_finish_608->D.41044
  # DEBUG thisD.66459 => D#584ptD.0
  # DEBUG __nD.66458 => NULL
  # DEBUG __aD.66457 => NULL
  # DEBUG D#508ptD.0 => &D#584ptD.0->_M_implD.40535
  # DEBUG thisD.66461 => D#508ptD.0
  # DEBUG __aD.66460 => NULL
  # DEBUG thisD.54076 => D#508ptD.0
  # DEBUG __aD.54077 => NULL
  # DEBUG thisD.54073 => D#508ptD.0
  # DEBUG D.54074 => NULL
  # .MEM_435 = VDEF <.MEM_562>
  MEM[(struct _Vector_implD.40512 *)__new_finish_608]._M_startD.40537 = 0B;
  # .MEM_436 = VDEF <.MEM_435>
  MEM[(struct _Vector_implD.40512 *)__new_finish_608]._M_finishD.40538 = 0B;
  # .MEM_437 = VDEF <.MEM_436>
  MEM[(struct _Vector_implD.40512 *)__new_finish_608]._M_end_of_storageD.40539 = 0B;
  # DEBUG thisD.66463 => D#584ptD.0
  # DEBUG __nD.66462 => NULL
  # DEBUG D#506ptD.0 => D#584ptD.0
  # DEBUG __nD.66494 => _317
  # DEBUG thisD.66495 => D#506ptD.0
  # DEBUG D#505ptD.0 => D#506ptD.0
  if (_317 != 0)
    goto <bb 139>;
  else
    goto <bb 138>;
;;    succ:       139 [90.0%]  (TRUE_VALUE,EXECUTABLE)
;;                138 [10.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 138, loop depth 1, count 0, freq 948, maybe hot
;;    prev block 137, next block 139, flags: (NEW)
;;    pred:       137 [10.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_20 = (long unsigned intD.14) _315;
  goto <bb 143>;
;;    succ:       143 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 139, loop depth 1, count 0, freq 8528, maybe hot
;;    prev block 138, next block 140, flags: (NEW, REACHABLE)
;;    pred:       137 [90.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#504ptD.0 => &D#505ptD.0->_M_implD.40535
  # DEBUG D#503ptD.0 => D#504ptD.0
  # DEBUG __nD.66498 => _317
  # DEBUG __aD.66497 => D#503ptD.0
  # DEBUG D#502ptD.0 => D#503ptD.0
  # DEBUG D#500ptD.0 => D#502ptD.0
  # DEBUG D#501ptD.0 => 0B
  # DEBUG __nD.66501 => _317
  # DEBUG thisD.66499 => D#500ptD.0
  # DEBUG D.66500 => D#501ptD.0
  # DEBUG D#499ptD.0 => D#500ptD.0
  # DEBUG D#498ptD.0 => D#499ptD.0
  # DEBUG thisD.57144 => D#498ptD.0
  if (_317 > 1152921504606846975)
    goto <bb 140>;
  else
    goto <bb 141>;
;;    succ:       140 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                141 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 140, loop depth 0, count 0, freq 3, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 139, next block 141, flags: (NEW, REACHABLE)
;;    pred:       139 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = null { D.66618 } (escaped heap)
  # __new_finish_445 = PHI <__new_finish_608(139)>
  [LP 30] # .MEM_439 = VDEF <.MEM_437>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZSt17__throw_bad_allocvD.2850 ();
;;    succ:       151 (EH,EXECUTABLE)

;;   basic block 141, loop depth 1, count 0, freq 8525, maybe hot
;;    prev block 140, next block 142, flags: (NEW, REACHABLE)
;;    pred:       139 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _330 = (long unsigned intD.14) _315;
  [LP 16] # .MEM_438 = VDEF <.MEM_437>
  # PT = { D.66620 } (escaped heap)
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _331 = _ZnwmD.2764 (_330);
  goto <bb 143>;
;;    succ:       143 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                142 (EH,EXECUTABLE)

;;   basic block 142, loop depth 0, count 0, freq 0
;;    prev block 141, next block 143, flags: (NEW)
;;    pred:       141 (EH,EXECUTABLE)
  # PT = null { D.66618 } (escaped heap)
  # __new_finish_444 = PHI <__new_finish_608(141)>
<L54>: [LP 16]
  goto <bb 152> (<L31>);
;;    succ:       152 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 143, loop depth 1, count 0, freq 9472, maybe hot
;;    prev block 142, next block 144, flags: (NEW, REACHABLE)
;;    pred:       138 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                141 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.66620 } (escaped heap)
  # iftmp.24_332 = PHI <0B(138), _331(141)>
  # .MEM_394 = PHI <.MEM_437(138), .MEM_438(141)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_364 = PHI <pretmp_20(138), _330(141)>
  # .MEM_450 = VDEF <.MEM_394>
  MEM[(struct _Vector_baseD.40302 *)__new_finish_608]._M_implD.40535._M_startD.40537 = iftmp.24_332;
  # .MEM_451 = VDEF <.MEM_450>
  MEM[(struct _Vector_baseD.40302 *)__new_finish_608]._M_implD.40535._M_finishD.40538 = iftmp.24_332;
  # PT = null { D.66620 } (escaped heap)
  _320 = iftmp.24_332 + prephitmp_364;
  # .MEM_452 = VDEF <.MEM_451>
  MEM[(struct _Vector_baseD.40302 *)__new_finish_608]._M_implD.40535._M_end_of_storageD.40539 = _320;
  # DEBUG D#583ptD.0 => &__new_finish_608->D.41044
  # DEBUG thisD.58588 => D#583ptD.0
  # VUSE <.MEM_452>
  # PT = nonlocal escaped 
  _321 = MEM[(struct sRequestD.35378 * *)__first_607 + 8B];
  # DEBUG D#101ptD.0 => __first_607
  # DEBUG thisD.58586 => D#101ptD.0
  # DEBUG thisD.52700 => NULL
  # DEBUG __iD.52699 => NULL
  # VUSE <.MEM_452>
  # PT = nonlocal escaped 
  _322 = MEM[(struct sRequestD.35378 * *)__first_607];
  # DEBUG D#102ptD.0 => __first_607
  # DEBUG thisD.58583 => D#102ptD.0
  # DEBUG thisD.52716 => NULL
  # DEBUG __iD.52715 => NULL
  # DEBUG __firstD.58609 => _322
  # DEBUG __lastD.58610 => _321
  # DEBUG __resultD.66465 => NULL
  # DEBUG D.66464 => D#581ptD.0
  # DEBUG __firstD.58580 => _322
  # DEBUG __lastD.58581 => _321
  # DEBUG __resultD.66468 => NULL
  # DEBUG __assignableD.66473 => 1
  # DEBUG __firstD.58544 => _322
  # DEBUG __lastD.58545 => _321
  # DEBUG __resultD.66474 => NULL
  # DEBUG __firstD.58474 => _322
  # DEBUG __lastD.58473 => _321
  # DEBUG __resultD.66477 => NULL
  # DEBUG __itD.58445 => _321
  # DEBUG __it$_M_currentD.58415 => _321
  # DEBUG __itD.58447 => _322
  # DEBUG __it$_M_currentD.58411 => _322
  # DEBUG __firstD.58420 => _322
  # DEBUG __lastD.58421 => _321
  # DEBUG __resultD.66480 => NULL
  # DEBUG __itD.58386 => NULL
  # DEBUG __itD.54882 => NULL
  # DEBUG __itD.58406 => _321
  # DEBUG __itD.58384 => _321
  # DEBUG thisD.58359 => NULL
  # DEBUG __itD.58408 => _322
  # DEBUG __itD.58380 => _322
  # DEBUG thisD.58359 => NULL
  # DEBUG __firstD.66485 => _322
  # DEBUG __lastD.66484 => _321
  # DEBUG __resultD.66483 => NULL
  # DEBUG __simpleD.66489 => 1
  # DEBUG __firstD.66492 => _322
  # DEBUG __lastD.66491 => _321
  # DEBUG __resultD.66490 => NULL
  __last.26_323 = (long intD.12) _321;
  __first.27_324 = (long intD.12) _322;
  _325 = __last.26_323 - __first.27_324;
  # RANGE [-576460752303423488, 576460752303423487]
  _Num_326 = _325 /[ex] 16;
  # DEBUG _NumD.66493 => _Num_326
  if (_Num_326 != 0)
    goto <bb 145>;
  else
    goto <bb 144>;
;;    succ:       145 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                144 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 144, loop depth 1, count 0, freq 5780, maybe hot
;;    prev block 143, next block 145, flags: (NEW)
;;    pred:       143 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_175 = (long unsigned intD.14) _325;
  goto <bb 146>;
;;    succ:       146 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 145, loop depth 1, count 0, freq 3692, maybe hot
;;    prev block 144, next block 146, flags: (NEW, REACHABLE)
;;    pred:       143 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _327 = (long unsigned intD.14) _325;
  # .MEM_453 = VDEF <.MEM_452>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  memmoveD.995 (iftmp.24_332, _322, _327);
;;    succ:       146 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 146, loop depth 1, count 0, freq 9472, maybe hot
;;    prev block 145, next block 147, flags: (NEW, REACHABLE)
;;    pred:       144 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                145 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_395 = PHI <.MEM_452(144), .MEM_453(145)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_174 = PHI <pretmp_175(144), _327(145)>
  # PT = null { D.66620 } (escaped heap)
  _329 = iftmp.24_332 + prephitmp_174;
  # .MEM_454 = VDEF <.MEM_395>
  __new_finish_608->D.41044._M_implD.40535._M_finishD.40538 = _329;
;;    succ:       147 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 147, loop depth 1, count 0, freq 9477, maybe hot
;;    prev block 146, next block 148, flags: (NEW, REACHABLE)
;;    pred:       136 [0.0%]  (FALSE_VALUE,EXECUTABLE)
;;                146 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_396 = PHI <.MEM_562(136), .MEM_454(146)>
  # PT = nonlocal escaped 
  __first_306 = __first_607 + 24;
  # DEBUG __firstD.66422 => __first_306
  # PT = null { D.66618 } (escaped heap)
  __new_finish_307 = __new_finish_608 + 24;
  # DEBUG __curD.66425 => __new_finish_307
  # DEBUG __curD.66425 => __new_finish_307
  # DEBUG __firstD.66422 => __first_306
  if (__position_22 == __first_306)
    goto <bb 148>;
  else
    goto <bb 149>;
;;    succ:       148 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                149 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 148, loop depth 0, count 0, freq 426, maybe hot
;;    prev block 147, next block 149, flags: (NEW)
;;    pred:       147 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # PT = null { D.66618 } (escaped heap)
  # __new_finish_498 = PHI <__new_finish_307(147)>
  goto <bb 150>;
;;    succ:       150 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 149, loop depth 1, count 0, freq 9051, maybe hot
;;    prev block 148, next block 150, flags: (NEW)
;;    pred:       147 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 136>;
;;    succ:       136 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 150, loop depth 0, count 0, freq 447, maybe hot
;;    prev block 149, next block 151, flags: (NEW, REACHABLE)
;;    pred:       148 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                126 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # PT = null { D.66618 } (escaped heap)
  # __new_finish_610 = PHI <__new_finish_498(148), __new_finish_270(126)>
  # .MEM_595 = PHI <.MEM_396(148), .MEM_389(126)>
  # DEBUG __new_finishD.45143 => NULL
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _32 = __n_7(D) * 24;
  # PT = null { D.66618 } (escaped heap)
  __new_finish_33 = __new_finish_610 + _32;
  # DEBUG __new_finishD.45143 => __new_finish_33
  # DEBUG D#671ptD.0 => &this_9(D)->D.36227
  # DEBUG thisD.60215 => D#671ptD.0
  # VUSE <.MEM_595>
  # PT = nonlocal escaped 
  _35 = this_9(D)->D.36227._M_implD.35718._M_finishD.35721;
  # DEBUG thisD.60213 => &__positionD.36152
  # DEBUG __firstD.60198 => D#1131ptD.0
  # DEBUG __lastD.60199 => _35
  # DEBUG __resultD.60200 => __new_finish_33
  # DEBUG __allocD.60201 => D#589ptD.0
  # DEBUG D#588ptD.0 => D#589ptD.0
  # DEBUG D#585ptD.0 => D#588ptD.0
  # DEBUG __firstD.60205 => D#1131ptD.0
  # DEBUG __lastD.60204 => _35
  # DEBUG __resultD.60203 => __new_finish_33
  # DEBUG D.60202 => D#585ptD.0
  # DEBUG __firstD.60208 => D#1131ptD.0
  # DEBUG __lastD.60207 => _35
  # DEBUG __resultD.60206 => __new_finish_33
  # DEBUG __assignableD.60211 => 1
  # DEBUG __firstD.66503 => D#1131ptD.0
  # DEBUG __lastD.66504 => _35
  # DEBUG __resultD.66505 => __new_finish_33
  # DEBUG __curD.66506 => __new_finish_33
  # DEBUG __firstD.66503 => D#1131ptD.0
  if (__position_22 == _35)
    goto <bb 174>;
  else
    goto <bb 159>;
;;    succ:       174 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                159 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 151, loop depth 0, count 0, freq 0
;;    prev block 150, next block 152, flags: (NEW)
;;    pred:       140 (EH,EXECUTABLE)
<L53>: [LP 30]
;;    succ:       152 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 152, loop depth 0, count 0, freq 0
;;    prev block 151, next block 153, flags: (NEW, REACHABLE)
;;    pred:       142 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                151 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_397 = PHI <.MEM_438(142), .MEM_439(151)>
  # PT = null { D.66618 } (escaped heap)
  # __new_finish_410 = PHI <__new_finish_444(142), __new_finish_445(151)>
<L31>:
  # VUSE <.MEM_397>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _308 = __builtin_eh_pointerD.2738 (26);
  # .MEM_440 = VDEF <.MEM_397>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  __cxa_begin_catchD.14644 (_308);
  # DEBUG __firstD.66427 => __new_finish_270
  # DEBUG __lastD.66426 => __new_finish_410
  # DEBUG __firstD.66430 => __new_finish_270
  # DEBUG __lastD.66429 => __new_finish_410
;;    succ:       153 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 153, loop depth 1, count 0, freq 0
;;    prev block 152, next block 154, flags: (NEW, REACHABLE)
;;    pred:       152 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                156 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = null { D.66618 } (escaped heap)
  # __new_finish_309 = PHI <__new_finish_270(152), __new_finish_311(156)>
  # .MEM_398 = PHI <.MEM_440(152), .MEM_446(156)>
  # DEBUG __firstD.66430 => __new_finish_309
  if (__new_finish_309 == __new_finish_410)
    goto <bb 157>;
  else
    goto <bb 154>;
;;    succ:       157 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                154 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 154, loop depth 1, count 0, freq 0
;;    prev block 153, next block 155, flags: (NEW, REACHABLE)
;;    pred:       153 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __rD.53899 => __new_finish_309
  # DEBUG __pointerD.66431 => NULL
  # DEBUG thisD.66432 => NULL
  # DEBUG thisD.53864 => D#294ptD.0
  # DEBUG __firstD.53861 => D#296ptD.0
  # DEBUG __lastD.53862 => D#297ptD.0
  # DEBUG D.53863 => NULL
  # DEBUG D#162ptD.0 => D#296ptD.0
  # DEBUG D#163ptD.0 => D#297ptD.0
  # DEBUG __firstD.53130 => D#162ptD.0
  # DEBUG __lastD.53129 => D#163ptD.0
  # DEBUG D#161ptD.0 => D#163ptD.0
  # DEBUG D#160ptD.0 => D#162ptD.0
  # DEBUG D#158ptD.0 => D#160ptD.0
  # DEBUG D#159ptD.0 => D#161ptD.0
  # DEBUG D.53119 => D#158ptD.0
  # DEBUG D.53118 => D#159ptD.0
  # DEBUG thisD.66433 => D#295ptD.0
  # DEBUG D#293ptD.0 => D#295ptD.0->_M_implD.40535._M_end_of_storageD.40539
  # DEBUG D#292ptD.0 => (long intD.12) D#293ptD.0
  # VUSE <.MEM_398>
  # PT = nonlocal escaped null { D.66619 D.66620 D.66621 } (escaped heap)
  _310 = MEM[(struct _Vector_baseD.40302 *)__new_finish_309]._M_implD.40535._M_startD.40537;
  # DEBUG D#291ptD.0 => (long intD.12) _310
  # DEBUG D#290ptD.0 => D#292ptD.0 - D#291ptD.0
  # DEBUG D#289ptD.0 => D#290ptD.0 /[ex] 16
  # DEBUG D#288ptD.0 => (long unsigned intD.14) D#289ptD.0
  # DEBUG thisD.66436 => D#295ptD.0
  # DEBUG __pD.66435 => _310
  # DEBUG __nD.66434 => D#288ptD.0
  if (_310 != 0B)
    goto <bb 155>;
  else
    goto <bb 156>;
;;    succ:       155 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                156 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 155, loop depth 1, count 0, freq 0
;;    prev block 154, next block 156, flags: (NEW, REACHABLE)
;;    pred:       154 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#286ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG D#284ptD.0 => D#286ptD.0
  # DEBUG D#285ptD.0 => D#288ptD.0
  # DEBUG __pD.66440 => _310
  # DEBUG __aD.66438 => D#284ptD.0
  # DEBUG __nD.66439 => D#285ptD.0
  # DEBUG D#283ptD.0 => D#285ptD.0
  # DEBUG D#282ptD.0 => D#284ptD.0
  # DEBUG D#280ptD.0 => D#282ptD.0
  # DEBUG D#281ptD.0 => D#283ptD.0
  # DEBUG __pD.66443 => _310
  # DEBUG thisD.66441 => D#280ptD.0
  # DEBUG D.66442 => D#281ptD.0
  # .MEM_441 = VDEF <.MEM_398>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZdlPvD.2766 (_310);
;;    succ:       156 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 156, loop depth 1, count 0, freq 0
;;    prev block 155, next block 157, flags: (NEW, REACHABLE)
;;    pred:       154 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                155 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_399 = PHI <.MEM_398(154), .MEM_441(155)>
  # DEBUG D#287ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG thisD.66444 => D#287ptD.0
  # DEBUG thisD.66445 => D#287ptD.0
  # DEBUG thisD.66446 => D#287ptD.0
  # .MEM_446 = VDEF <.MEM_399>
  MEM[(struct  &)__new_finish_309] ={v} {CLOBBER};
  # PT = null { D.66618 } (escaped heap)
  __new_finish_311 = __new_finish_309 + 24;
  # DEBUG __firstD.66430 => __new_finish_311
  goto <bb 153>;
;;    succ:       153 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 157, loop depth 0, count 0, freq 0
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 156, next block 158, flags: (NEW, REACHABLE)
;;    pred:       153 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  [LP 15] # .MEM_447 = VDEF <.MEM_398>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  __cxa_rethrowD.45013 ();
;;    succ:       158 (EH,EXECUTABLE)

;;   basic block 158, loop depth 0, count 0, freq 0
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 157, next block 159, flags: (NEW, REACHABLE)
;;    pred:       157 (EH,EXECUTABLE)
<L33>: [LP 15]
  [MNT 24] # .MEM_448 = VDEF <.MEM_447>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  __cxa_end_catchD.14643 ();
  [LP 19] resx 25
;;    succ:       217 (EH,EXECUTABLE)

;;   basic block 159, loop depth 0, count 0, freq 427, maybe hot
;;    prev block 158, next block 160, flags: (NEW, REACHABLE)
;;    pred:       150 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       160 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 160, loop depth 1, count 0, freq 9406, maybe hot
;;    prev block 159, next block 161, flags: (NEW)
;;    pred:       159 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                172 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  # __position_609 = PHI <__position_22(159), __position_335(172)>
  # PT = null { D.66618 } (escaped heap)
  # __new_finish_605 = PHI <__new_finish_33(159), __new_finish_336(172)>
  # .MEM_593 = PHI <.MEM_595(159), .MEM_403(172)>
  # DEBUG __curD.66506 => __new_finish_605
  # DEBUG __firstD.66503 => __position_609
  # DEBUG __rD.58622 => __new_finish_605
  # DEBUG __pD.66529 => NULL
  # DEBUG __valueD.66528 => __position_609
  # DEBUG D#24ptD.0 => 24
  # DEBUG __pD.58614 => NULL
  # DEBUG D.58615 => D#24ptD.0
  if (__new_finish_605 != 0B)
    goto <bb 161>;
  else
    goto <bb 171>;
;;    succ:       161 [100.0%]  (TRUE_VALUE,EXECUTABLE)
;;                171 [0.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 161, loop depth 1, count 0, freq 9404, maybe hot
;;    prev block 160, next block 162, flags: (NEW, REACHABLE)
;;    pred:       160 [100.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.66534 => __new_finish_605
  # DEBUG __xD.66535 => __position_609
  # DEBUG D#582ptD.0 => &MEM[(const struct vectorD.35482 *)__position_609].D.41044
  # DEBUG thisD.58605 => D#582ptD.0
  # DEBUG __aD.58603 => NULL
  # VUSE <.MEM_593>
  # PT = nonlocal escaped 
  _114 = MEM[(struct sRequestD.35378 * *)__position_609];
  # DEBUG D#88ptD.0 => __position_609
  # VUSE <.MEM_593>
  # PT = nonlocal escaped 
  _341 = MEM[(struct sRequestD.35378 * *)__position_609 + 8B];
  # DEBUG D#88ptD.0 => __position_609
  # DEBUG thisD.66536 => D#88ptD.0
  # DEBUG thisD.66537 => D#88ptD.0
  _342 = (long intD.12) _341;
  _343 = (long intD.12) _114;
  _344 = _342 - _343;
  # RANGE [-576460752303423488, 576460752303423487]
  _345 = _344 /[ex] 16;
  # RANGE ~[576460752303423488, 17870283321406128127]
  _346 = (size_typeD.40620) _345;
  # DEBUG D#584ptD.0 => &__new_finish_605->D.41044
  # DEBUG thisD.66540 => D#584ptD.0
  # DEBUG __nD.66539 => NULL
  # DEBUG __aD.66538 => NULL
  # DEBUG D#508ptD.0 => &D#584ptD.0->_M_implD.40535
  # DEBUG thisD.66542 => D#508ptD.0
  # DEBUG __aD.66541 => NULL
  # DEBUG thisD.54076 => D#508ptD.0
  # DEBUG __aD.54077 => NULL
  # DEBUG thisD.54073 => D#508ptD.0
  # DEBUG D.54074 => NULL
  # .MEM_456 = VDEF <.MEM_593>
  MEM[(struct _Vector_implD.40512 *)__new_finish_605]._M_startD.40537 = 0B;
  # .MEM_457 = VDEF <.MEM_456>
  MEM[(struct _Vector_implD.40512 *)__new_finish_605]._M_finishD.40538 = 0B;
  # .MEM_458 = VDEF <.MEM_457>
  MEM[(struct _Vector_implD.40512 *)__new_finish_605]._M_end_of_storageD.40539 = 0B;
  # DEBUG thisD.66544 => D#584ptD.0
  # DEBUG __nD.66543 => NULL
  # DEBUG D#506ptD.0 => D#584ptD.0
  # DEBUG __nD.66575 => _346
  # DEBUG thisD.66576 => D#506ptD.0
  # DEBUG D#505ptD.0 => D#506ptD.0
  if (_346 != 0)
    goto <bb 163>;
  else
    goto <bb 162>;
;;    succ:       163 [90.0%]  (TRUE_VALUE,EXECUTABLE)
;;                162 [10.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 162, loop depth 1, count 0, freq 940, maybe hot
;;    prev block 161, next block 163, flags: (NEW)
;;    pred:       161 [10.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_555 = (long unsigned intD.14) _344;
  goto <bb 168>;
;;    succ:       168 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 163, loop depth 1, count 0, freq 8463, maybe hot
;;    prev block 162, next block 164, flags: (NEW, REACHABLE)
;;    pred:       161 [90.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#504ptD.0 => &D#505ptD.0->_M_implD.40535
  # DEBUG D#503ptD.0 => D#504ptD.0
  # DEBUG __nD.66579 => _346
  # DEBUG __aD.66578 => D#503ptD.0
  # DEBUG D#502ptD.0 => D#503ptD.0
  # DEBUG D#500ptD.0 => D#502ptD.0
  # DEBUG D#501ptD.0 => 0B
  # DEBUG __nD.66582 => _346
  # DEBUG thisD.66580 => D#500ptD.0
  # DEBUG D.66581 => D#501ptD.0
  # DEBUG D#499ptD.0 => D#500ptD.0
  # DEBUG D#498ptD.0 => D#499ptD.0
  # DEBUG thisD.57144 => D#498ptD.0
  if (_346 > 1152921504606846975)
    goto <bb 164>;
  else
    goto <bb 165>;
;;    succ:       164 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                165 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 164, loop depth 0, count 0, freq 3, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 163, next block 165, flags: (NEW, REACHABLE)
;;    pred:       163 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = null { D.66618 } (escaped heap)
  # __new_finish_463 = PHI <__new_finish_605(163)>
  [LP 31] # .MEM_460 = VDEF <.MEM_458>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZSt17__throw_bad_allocvD.2850 ();
;;    succ:       175 (EH,EXECUTABLE)

;;   basic block 165, loop depth 1, count 0, freq 8460, maybe hot
;;    prev block 164, next block 166, flags: (NEW, REACHABLE)
;;    pred:       163 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _359 = (long unsigned intD.14) _344;
  [LP 18] # .MEM_459 = VDEF <.MEM_458>
  # PT = { D.66621 } (escaped heap)
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _360 = _ZnwmD.2764 (_359);
  goto <bb 167>;
;;    succ:       167 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                166 (EH,EXECUTABLE)

;;   basic block 166, loop depth 0, count 0, freq 0
;;    prev block 165, next block 167, flags: (NEW)
;;    pred:       165 (EH,EXECUTABLE)
  # PT = null { D.66618 } (escaped heap)
  # __new_finish_449 = PHI <__new_finish_605(165)>
<L56>: [LP 18]
  goto <bb 176> (<L34>);
;;    succ:       176 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 167, loop depth 1, count 0, freq 8460, maybe hot
;;    prev block 166, next block 168, flags: (NEW)
;;    pred:       165 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_459>
  pretmp_305 = MEM[(struct sRequestD.35378 * *)__position_609 + 8B];
  # VUSE <.MEM_459>
  pretmp_386 = MEM[(struct sRequestD.35378 * *)__position_609];
  pretmp_318 = (long intD.12) pretmp_305;
  pretmp_271 = (long intD.12) pretmp_386;
  pretmp_470 = pretmp_318 - pretmp_271;
  pretmp_378 = pretmp_470 /[ex] 16;
  pretmp_661 = (long unsigned intD.14) pretmp_470;
;;    succ:       168 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 168, loop depth 1, count 0, freq 9400, maybe hot
;;    prev block 167, next block 169, flags: (NEW, REACHABLE)
;;    pred:       162 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                167 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.66621 } (escaped heap)
  # iftmp.24_361 = PHI <0B(162), _360(167)>
  # .MEM_401 = PHI <.MEM_458(162), .MEM_459(167)>
  # PT = nonlocal escaped 
  # prephitmp_279 = PHI <_114(162), pretmp_386(167)>
  # RANGE [-576460752303423488, 576460752303423487]
  # prephitmp_261 = PHI <_345(162), pretmp_378(167)>
  # RANGE [0, 18446744073709551615]
  # prephitmp_83 = PHI <pretmp_555(162), _359(167)>
  # prephitmp_662 = PHI <pretmp_555(162), pretmp_661(167)>
  # .MEM_471 = VDEF <.MEM_401>
  MEM[(struct _Vector_baseD.40302 *)__new_finish_605]._M_implD.40535._M_startD.40537 = iftmp.24_361;
  # .MEM_472 = VDEF <.MEM_471>
  MEM[(struct _Vector_baseD.40302 *)__new_finish_605]._M_implD.40535._M_finishD.40538 = iftmp.24_361;
  # PT = null { D.66621 } (escaped heap)
  _349 = iftmp.24_361 + prephitmp_83;
  # .MEM_473 = VDEF <.MEM_472>
  MEM[(struct _Vector_baseD.40302 *)__new_finish_605]._M_implD.40535._M_end_of_storageD.40539 = _349;
  # DEBUG D#583ptD.0 => &__new_finish_605->D.41044
  # DEBUG thisD.58588 => D#583ptD.0
  # DEBUG D#1125ptD.0 => MEM[(struct sRequestD.35378 * *)__position_609 + 8B]
  # DEBUG D#101ptD.0 => __position_609
  # DEBUG thisD.58586 => D#101ptD.0
  # DEBUG thisD.52700 => NULL
  # DEBUG __iD.52699 => NULL
  # DEBUG D#1124ptD.0 => MEM[(struct sRequestD.35378 * *)__position_609]
  # DEBUG D#102ptD.0 => __position_609
  # DEBUG thisD.58583 => D#102ptD.0
  # DEBUG thisD.52716 => NULL
  # DEBUG __iD.52715 => NULL
  # DEBUG __firstD.58609 => D#1124ptD.0
  # DEBUG __lastD.58610 => D#1125ptD.0
  # DEBUG __resultD.66546 => NULL
  # DEBUG D.66545 => D#581ptD.0
  # DEBUG __firstD.58580 => D#1124ptD.0
  # DEBUG __lastD.58581 => D#1125ptD.0
  # DEBUG __resultD.66549 => NULL
  # DEBUG __assignableD.66554 => 1
  # DEBUG __firstD.58544 => D#1124ptD.0
  # DEBUG __lastD.58545 => D#1125ptD.0
  # DEBUG __resultD.66555 => NULL
  # DEBUG __firstD.58474 => D#1124ptD.0
  # DEBUG __lastD.58473 => D#1125ptD.0
  # DEBUG __resultD.66558 => NULL
  # DEBUG __itD.58445 => D#1125ptD.0
  # DEBUG __it$_M_currentD.58415 => D#1125ptD.0
  # DEBUG __itD.58447 => D#1124ptD.0
  # DEBUG __it$_M_currentD.58411 => D#1124ptD.0
  # DEBUG __firstD.58420 => D#1124ptD.0
  # DEBUG __lastD.58421 => D#1125ptD.0
  # DEBUG __resultD.66561 => NULL
  # DEBUG __itD.58386 => NULL
  # DEBUG __itD.54882 => NULL
  # DEBUG __itD.58406 => D#1125ptD.0
  # DEBUG __itD.58384 => D#1125ptD.0
  # DEBUG thisD.58359 => NULL
  # DEBUG __itD.58408 => D#1124ptD.0
  # DEBUG __itD.58380 => D#1124ptD.0
  # DEBUG thisD.58359 => NULL
  # DEBUG __firstD.66566 => D#1124ptD.0
  # DEBUG __lastD.66565 => D#1125ptD.0
  # DEBUG __resultD.66564 => NULL
  # DEBUG __simpleD.66570 => 1
  # DEBUG __firstD.66573 => D#1124ptD.0
  # DEBUG __lastD.66572 => D#1125ptD.0
  # DEBUG __resultD.66571 => NULL
  # DEBUG D#1123ptD.0 => (long intD.12) D#1125ptD.0
  # DEBUG D#1122ptD.0 => (long intD.12) D#1124ptD.0
  # DEBUG D#1121ptD.0 => D#1123ptD.0 - D#1122ptD.0
  # DEBUG _NumD.66574 => D#1121ptD.0 /[ex] 16
  if (prephitmp_261 != 0)
    goto <bb 169>;
  else
    goto <bb 170>;
;;    succ:       169 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                170 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 169, loop depth 1, count 0, freq 3664, maybe hot
;;    prev block 168, next block 170, flags: (NEW, REACHABLE)
;;    pred:       168 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_474 = VDEF <.MEM_473>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  memmoveD.995 (iftmp.24_361, prephitmp_279, prephitmp_662);
;;    succ:       170 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 170, loop depth 1, count 0, freq 9400, maybe hot
;;    prev block 169, next block 171, flags: (NEW, REACHABLE)
;;    pred:       168 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                169 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_402 = PHI <.MEM_473(168), .MEM_474(169)>
  # PT = null { D.66621 } (escaped heap)
  _358 = iftmp.24_361 + prephitmp_662;
  # .MEM_475 = VDEF <.MEM_402>
  __new_finish_605->D.41044._M_implD.40535._M_finishD.40538 = _358;
;;    succ:       171 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 171, loop depth 1, count 0, freq 9406, maybe hot
;;    prev block 170, next block 172, flags: (NEW, REACHABLE)
;;    pred:       160 [0.0%]  (FALSE_VALUE,EXECUTABLE)
;;                170 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_403 = PHI <.MEM_593(160), .MEM_475(170)>
  # PT = nonlocal 
  __position_335 = __position_609 + 24;
  # DEBUG __firstD.66503 => __position_335
  # PT = null { D.66618 } (escaped heap)
  __new_finish_336 = __new_finish_605 + 24;
  # DEBUG __curD.66506 => __new_finish_336
  # DEBUG __curD.66506 => __new_finish_336
  # DEBUG __firstD.66503 => __position_335
  if (_35 == __position_335)
    goto <bb 173>;
  else
    goto <bb 172>;
;;    succ:       173 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                172 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 172, loop depth 1, count 0, freq 8983, maybe hot
;;    prev block 171, next block 173, flags: (NEW)
;;    pred:       171 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 160>;
;;    succ:       160 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 173, loop depth 0, count 0, freq 423, maybe hot
;;    prev block 172, next block 174, flags: (NEW)
;;    pred:       171 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # PT = null { D.66618 } (escaped heap)
  # __new_finish_497 = PHI <__new_finish_336(171)>
  # VUSE <.MEM_403>
  pretmp_40 = this_9(D)->D.36227._M_implD.35718._M_finishD.35721;
;;    succ:       174 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 174, loop depth 0, count 0, freq 443, maybe hot
;;    prev block 173, next block 175, flags: (NEW, REACHABLE)
;;    pred:       173 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                150 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # PT = null { D.66618 } (escaped heap)
  # __new_finish_19 = PHI <__new_finish_497(173), __new_finish_33(150)>
  # .MEM_594 = PHI <.MEM_403(173), .MEM_595(150)>
  # PT = nonlocal escaped 
  # prephitmp_103 = PHI <pretmp_40(173), _35(150)>
  # DEBUG __new_finishD.45143 => NULL
  # DEBUG D#672ptD.0 => &this_9(D)->D.36227
  # DEBUG thisD.60251 => D#672ptD.0
  # DEBUG D#1120ptD.0 => this_9(D)->D.36227._M_implD.35718._M_finishD.35721
  # VUSE <.MEM_594>
  # PT = nonlocal escaped 
  __first_38 = this_9(D)->D.36227._M_implD.35718._M_startD.35720;
  # DEBUG __firstD.60227 => __first_38
  # DEBUG __lastD.60228 => D#1120ptD.0
  # DEBUG __firstD.60234 => __first_38
  if (__first_38 == prephitmp_103)
    goto <bb 190>;
  else
    goto <bb 184>;
;;    succ:       190 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                184 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 175, loop depth 0, count 0, freq 0
;;    prev block 174, next block 176, flags: (NEW)
;;    pred:       164 (EH,EXECUTABLE)
<L55>: [LP 31]
;;    succ:       176 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 176, loop depth 0, count 0, freq 0
;;    prev block 175, next block 177, flags: (NEW, REACHABLE)
;;    pred:       166 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                175 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_404 = PHI <.MEM_459(166), .MEM_460(175)>
  # PT = null { D.66618 } (escaped heap)
  # __new_finish_413 = PHI <__new_finish_449(166), __new_finish_463(175)>
<L34>:
  # VUSE <.MEM_404>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _337 = __builtin_eh_pointerD.2738 (29);
  # .MEM_461 = VDEF <.MEM_404>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  __cxa_begin_catchD.14644 (_337);
  # DEBUG __firstD.66508 => __new_finish_33
  # DEBUG __lastD.66507 => __new_finish_413
  # DEBUG __firstD.66511 => __new_finish_33
  # DEBUG __lastD.66510 => __new_finish_413
;;    succ:       177 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 177, loop depth 1, count 0, freq 0
;;    prev block 176, next block 178, flags: (NEW, REACHABLE)
;;    pred:       176 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                180 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = null { D.66618 } (escaped heap)
  # __new_finish_338 = PHI <__new_finish_33(176), __new_finish_340(180)>
  # .MEM_405 = PHI <.MEM_461(176), .MEM_467(180)>
  # DEBUG __firstD.66511 => __new_finish_338
  if (__new_finish_338 == __new_finish_413)
    goto <bb 181>;
  else
    goto <bb 178>;
;;    succ:       181 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                178 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 178, loop depth 1, count 0, freq 0
;;    prev block 177, next block 179, flags: (NEW, REACHABLE)
;;    pred:       177 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __rD.53899 => __new_finish_338
  # DEBUG __pointerD.66512 => NULL
  # DEBUG thisD.66513 => NULL
  # DEBUG thisD.53864 => D#294ptD.0
  # DEBUG __firstD.53861 => D#296ptD.0
  # DEBUG __lastD.53862 => D#297ptD.0
  # DEBUG D.53863 => NULL
  # DEBUG D#162ptD.0 => D#296ptD.0
  # DEBUG D#163ptD.0 => D#297ptD.0
  # DEBUG __firstD.53130 => D#162ptD.0
  # DEBUG __lastD.53129 => D#163ptD.0
  # DEBUG D#161ptD.0 => D#163ptD.0
  # DEBUG D#160ptD.0 => D#162ptD.0
  # DEBUG D#158ptD.0 => D#160ptD.0
  # DEBUG D#159ptD.0 => D#161ptD.0
  # DEBUG D.53119 => D#158ptD.0
  # DEBUG D.53118 => D#159ptD.0
  # DEBUG thisD.66514 => D#295ptD.0
  # DEBUG D#293ptD.0 => D#295ptD.0->_M_implD.40535._M_end_of_storageD.40539
  # DEBUG D#292ptD.0 => (long intD.12) D#293ptD.0
  # VUSE <.MEM_405>
  # PT = nonlocal escaped null { D.66619 D.66620 D.66621 } (escaped heap)
  _339 = MEM[(struct _Vector_baseD.40302 *)__new_finish_338]._M_implD.40535._M_startD.40537;
  # DEBUG D#291ptD.0 => (long intD.12) _339
  # DEBUG D#290ptD.0 => D#292ptD.0 - D#291ptD.0
  # DEBUG D#289ptD.0 => D#290ptD.0 /[ex] 16
  # DEBUG D#288ptD.0 => (long unsigned intD.14) D#289ptD.0
  # DEBUG thisD.66517 => D#295ptD.0
  # DEBUG __pD.66516 => _339
  # DEBUG __nD.66515 => D#288ptD.0
  if (_339 != 0B)
    goto <bb 179>;
  else
    goto <bb 180>;
;;    succ:       179 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                180 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 179, loop depth 1, count 0, freq 0
;;    prev block 178, next block 180, flags: (NEW, REACHABLE)
;;    pred:       178 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#286ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG D#284ptD.0 => D#286ptD.0
  # DEBUG D#285ptD.0 => D#288ptD.0
  # DEBUG __pD.66521 => _339
  # DEBUG __aD.66519 => D#284ptD.0
  # DEBUG __nD.66520 => D#285ptD.0
  # DEBUG D#283ptD.0 => D#285ptD.0
  # DEBUG D#282ptD.0 => D#284ptD.0
  # DEBUG D#280ptD.0 => D#282ptD.0
  # DEBUG D#281ptD.0 => D#283ptD.0
  # DEBUG __pD.66524 => _339
  # DEBUG thisD.66522 => D#280ptD.0
  # DEBUG D.66523 => D#281ptD.0
  # .MEM_462 = VDEF <.MEM_405>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZdlPvD.2766 (_339);
;;    succ:       180 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 180, loop depth 1, count 0, freq 0
;;    prev block 179, next block 181, flags: (NEW, REACHABLE)
;;    pred:       178 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                179 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_406 = PHI <.MEM_405(178), .MEM_462(179)>
  # DEBUG D#287ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG thisD.66525 => D#287ptD.0
  # DEBUG thisD.66526 => D#287ptD.0
  # DEBUG thisD.66527 => D#287ptD.0
  # .MEM_467 = VDEF <.MEM_406>
  MEM[(struct  &)__new_finish_338] ={v} {CLOBBER};
  # PT = null { D.66618 } (escaped heap)
  __new_finish_340 = __new_finish_338 + 24;
  # DEBUG __firstD.66511 => __new_finish_340
  goto <bb 177>;
;;    succ:       177 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 181, loop depth 0, count 0, freq 0
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 180, next block 182, flags: (NEW, REACHABLE)
;;    pred:       177 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  [LP 17] # .MEM_468 = VDEF <.MEM_405>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  __cxa_rethrowD.45013 ();
;;    succ:       182 (EH,EXECUTABLE)

;;   basic block 182, loop depth 0, count 0, freq 0
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 181, next block 183, flags: (NEW, REACHABLE)
;;    pred:       181 (EH,EXECUTABLE)
<L36>: [LP 17]
  [MNT 27] # .MEM_469 = VDEF <.MEM_468>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  __cxa_end_catchD.14643 ();
  [LP 5] resx 28
;;    succ:       183 (EH,EXECUTABLE)

;;   basic block 183, loop depth 0, count 0, freq 0
;;    prev block 182, next block 184, flags: (NEW)
;;    pred:       182 (EH,EXECUTABLE)
<L57>: [LP 5]
  goto <bb 199> (<L13>);
;;    succ:       199 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 184, loop depth 0, count 0, freq 403, maybe hot
;;    prev block 183, next block 185, flags: (NEW, REACHABLE)
;;    pred:       174 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       185 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 185, loop depth 1, count 0, freq 4481, maybe hot
;;    prev block 184, next block 186, flags: (NEW)
;;    pred:       184 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                188 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_82 = PHI <__first_38(184), __first_93(188)>
  # .MEM_615 = PHI <.MEM_594(184), .MEM_120(188)>
  # DEBUG __firstD.60234 => __first_82
  # DEBUG __rD.53899 => __first_82
  # DEBUG __pointerD.60235 => NULL
  # DEBUG thisD.60236 => NULL
  # DEBUG thisD.53864 => D#294ptD.0
  # DEBUG __firstD.53861 => D#296ptD.0
  # DEBUG __lastD.53862 => D#297ptD.0
  # DEBUG D.53863 => NULL
  # DEBUG D#162ptD.0 => D#296ptD.0
  # DEBUG D#163ptD.0 => D#297ptD.0
  # DEBUG __firstD.53130 => D#162ptD.0
  # DEBUG __lastD.53129 => D#163ptD.0
  # DEBUG D#161ptD.0 => D#163ptD.0
  # DEBUG D#160ptD.0 => D#162ptD.0
  # DEBUG D#158ptD.0 => D#160ptD.0
  # DEBUG D#159ptD.0 => D#161ptD.0
  # DEBUG D.53119 => D#158ptD.0
  # DEBUG D.53118 => D#159ptD.0
  # DEBUG thisD.60237 => D#295ptD.0
  # DEBUG D#293ptD.0 => D#295ptD.0->_M_implD.40535._M_end_of_storageD.40539
  # DEBUG D#292ptD.0 => (long intD.12) D#293ptD.0
  # VUSE <.MEM_615>
  # PT = nonlocal escaped 
  _92 = MEM[(struct _Vector_baseD.40302 *)__first_82]._M_implD.40535._M_startD.40537;
  # DEBUG D#291ptD.0 => (long intD.12) _92
  # DEBUG D#290ptD.0 => D#292ptD.0 - D#291ptD.0
  # DEBUG D#289ptD.0 => D#290ptD.0 /[ex] 16
  # DEBUG D#288ptD.0 => (long unsigned intD.14) D#289ptD.0
  # DEBUG thisD.60240 => D#295ptD.0
  # DEBUG __pD.60239 => _92
  # DEBUG __nD.60238 => D#288ptD.0
  if (_92 != 0B)
    goto <bb 186>;
  else
    goto <bb 187>;
;;    succ:       186 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                187 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 186, loop depth 1, count 0, freq 3129, maybe hot
;;    prev block 185, next block 187, flags: (NEW, REACHABLE)
;;    pred:       185 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#286ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG D#284ptD.0 => D#286ptD.0
  # DEBUG D#285ptD.0 => D#288ptD.0
  # DEBUG __pD.60244 => _92
  # DEBUG __aD.60242 => D#284ptD.0
  # DEBUG __nD.60243 => D#285ptD.0
  # DEBUG D#283ptD.0 => D#285ptD.0
  # DEBUG D#282ptD.0 => D#284ptD.0
  # DEBUG D#280ptD.0 => D#282ptD.0
  # DEBUG D#281ptD.0 => D#283ptD.0
  # DEBUG __pD.60247 => _92
  # DEBUG thisD.60245 => D#280ptD.0
  # DEBUG D.60246 => D#281ptD.0
  # .MEM_115 = VDEF <.MEM_615>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZdlPvD.2766 (_92);
;;    succ:       187 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 187, loop depth 1, count 0, freq 4481, maybe hot
;;    prev block 186, next block 188, flags: (NEW, REACHABLE)
;;    pred:       185 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                186 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_104 = PHI <.MEM_615(185), .MEM_115(186)>
  # DEBUG D#287ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG thisD.60248 => D#287ptD.0
  # DEBUG thisD.60249 => D#287ptD.0
  # DEBUG thisD.60250 => D#287ptD.0
  # .MEM_120 = VDEF <.MEM_104>
  MEM[(struct  &)__first_82] ={v} {CLOBBER};
  # PT = nonlocal escaped 
  __first_93 = __first_82 + 24;
  # DEBUG __firstD.60234 => __first_93
  # DEBUG __firstD.60234 => __first_93
  if (__first_93 == prephitmp_103)
    goto <bb 189>;
  else
    goto <bb 188>;
;;    succ:       189 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                188 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 188, loop depth 1, count 0, freq 4078, maybe hot
;;    prev block 187, next block 189, flags: (NEW)
;;    pred:       187 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 185>;
;;    succ:       185 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 189, loop depth 0, count 0, freq 403, maybe hot
;;    prev block 188, next block 190, flags: (NEW)
;;    pred:       187 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_120>
  pretmp_101 = this_9(D)->D.36227._M_implD.35718._M_startD.35720;
;;    succ:       190 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 190, loop depth 0, count 0, freq 443, maybe hot
;;    prev block 189, next block 191, flags: (NEW, REACHABLE)
;;    pred:       189 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                174 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_614 = PHI <.MEM_120(189), .MEM_594(174)>
  # PT = nonlocal escaped 
  # prephitmp_622 = PHI <pretmp_101(189), __first_38(174)>
  # DEBUG D#683ptD.0 => this_9(D)->D.36227._M_implD.35718._M_end_of_storageD.35722
  # DEBUG D#682ptD.0 => (long intD.12) D#683ptD.0
  # DEBUG D#1119ptD.0 => this_9(D)->D.36227._M_implD.35718._M_startD.35720
  # DEBUG D#681ptD.0 => (long intD.12) D#1119ptD.0
  # DEBUG D#680ptD.0 => D#682ptD.0 - D#681ptD.0
  # DEBUG D#679ptD.0 => D#680ptD.0 /[ex] 24
  # DEBUG D#678ptD.0 => &this_9(D)->D.36227
  # DEBUG D#270ptD.0 => D#678ptD.0
  # DEBUG D#271ptD.0 => (long unsigned intD.14) D#679ptD.0
  # DEBUG __pD.60217 => D#1119ptD.0
  # DEBUG thisD.60219 => D#270ptD.0
  # DEBUG __nD.60218 => D#271ptD.0
  # DEBUG D#269ptD.0 => D#271ptD.0
  # DEBUG D#268ptD.0 => D#270ptD.0
  if (prephitmp_622 != 0B)
    goto <bb 191>;
  else
    goto <bb 192>;
;;    succ:       191 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                192 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 191, loop depth 0, count 0, freq 309, maybe hot
;;    prev block 190, next block 192, flags: (NEW, REACHABLE)
;;    pred:       190 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#267ptD.0 => &D#268ptD.0->_M_implD.35718
  # DEBUG D#265ptD.0 => D#267ptD.0
  # DEBUG D#266ptD.0 => D#269ptD.0
  # DEBUG __pD.60223 => D#1119ptD.0
  # DEBUG __aD.60221 => D#265ptD.0
  # DEBUG __nD.60222 => D#266ptD.0
  # DEBUG D#264ptD.0 => D#266ptD.0
  # DEBUG D#263ptD.0 => D#265ptD.0
  # DEBUG D#261ptD.0 => D#263ptD.0
  # DEBUG D#262ptD.0 => D#264ptD.0
  # DEBUG __pD.60226 => D#1119ptD.0
  # DEBUG thisD.60224 => D#261ptD.0
  # DEBUG D.60225 => D#262ptD.0
  # .MEM_121 = VDEF <.MEM_614>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZdlPvD.2766 (prephitmp_622);
;;    succ:       192 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 192, loop depth 0, count 0, freq 443, maybe hot
;;    prev block 191, next block 193, flags: (NEW, REACHABLE)
;;    pred:       191 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                190 [30.2%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_105 = PHI <.MEM_121(191), .MEM_614(190)>
  # .MEM_41 = VDEF <.MEM_105>
  this_9(D)->D.36227._M_implD.35718._M_startD.35720 = __new_finish_270;
  # .MEM_42 = VDEF <.MEM_41>
  this_9(D)->D.36227._M_implD.35718._M_finishD.35721 = __new_finish_19;
  # PT = null { D.66618 } (escaped heap)
  _44 = __new_finish_270 + prephitmp_278;
  # .MEM_45 = VDEF <.MEM_42>
  this_9(D)->D.36227._M_implD.35718._M_end_of_storageD.35722 = _44;
;;    succ:       193 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 193, loop depth 0, count 0, freq 1470, maybe hot
;;    prev block 192, next block 194, flags: (NEW, REACHABLE)
;;    pred:       2 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                192 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                106 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_3 = PHI <.MEM_8(D)(2), .MEM_45(192), .MEM_79(106)>
  # VUSE <.MEM_3>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 194, loop depth 0, count 0, freq 0
;;    prev block 193, next block 195, flags: (NEW)
;;    pred:       37 (EH,EXECUTABLE)
<L40>: [LP 21]
;;    succ:       195 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 195, loop depth 0, count 0, freq 0
;;    prev block 194, next block 196, flags: (NEW, REACHABLE)
;;    pred:       101 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                194 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                40 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                46 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                74 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                98 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_4 = PHI <.MEM_140(101), .MEM_502(194), .MEM_136(40), .MEM_137(46), .MEM_523(74), .MEM_544(98)>
<L10>:
  # DEBUG thisD.60253 => &__x_copyD.45105
  # DEBUG D#294ptD.0 => &__x_copyD.45105.D.41044
  # DEBUG thisD.53864 => D#294ptD.0
  # DEBUG D#297ptD.0 => __x_copyD.45105.D.41044._M_implD.40535._M_finishD.40538
  # DEBUG D#296ptD.0 => __x_copyD.45105.D.41044._M_implD.40535._M_startD.40537
  # DEBUG __firstD.53861 => D#296ptD.0
  # DEBUG __lastD.53862 => D#297ptD.0
  # DEBUG D.53863 => NULL
  # DEBUG D#162ptD.0 => D#296ptD.0
  # DEBUG D#163ptD.0 => D#297ptD.0
  # DEBUG __firstD.53130 => D#162ptD.0
  # DEBUG __lastD.53129 => D#163ptD.0
  # DEBUG D#161ptD.0 => D#163ptD.0
  # DEBUG D#160ptD.0 => D#162ptD.0
  # DEBUG D#158ptD.0 => D#160ptD.0
  # DEBUG D#159ptD.0 => D#161ptD.0
  # DEBUG D.53119 => D#158ptD.0
  # DEBUG D.53118 => D#159ptD.0
  # DEBUG D#295ptD.0 => &__x_copyD.45105.D.41044
  # DEBUG thisD.60254 => D#295ptD.0
  # DEBUG D#293ptD.0 => D#295ptD.0->_M_implD.40535._M_end_of_storageD.40539
  # DEBUG D#292ptD.0 => (long intD.12) D#293ptD.0
  # VUSE <.MEM_4>
  # PT = nonlocal escaped null { D.66614 } (escaped heap)
  _94 = MEM[(struct _Vector_baseD.40302 *)&__x_copyD.45105]._M_implD.40535._M_startD.40537;
  # DEBUG D#291ptD.0 => (long intD.12) _94
  # DEBUG D#290ptD.0 => D#292ptD.0 - D#291ptD.0
  # DEBUG D#289ptD.0 => D#290ptD.0 /[ex] 16
  # DEBUG D#288ptD.0 => (long unsigned intD.14) D#289ptD.0
  # DEBUG thisD.60257 => D#295ptD.0
  # DEBUG __pD.60256 => _94
  # DEBUG __nD.60255 => D#288ptD.0
  if (_94 != 0B)
    goto <bb 196>;
  else
    goto <bb 197>;
;;    succ:       196 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                197 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 196, loop depth 0, count 0, freq 0
;;    prev block 195, next block 197, flags: (NEW, REACHABLE)
;;    pred:       195 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#286ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG D#284ptD.0 => D#286ptD.0
  # DEBUG D#285ptD.0 => D#288ptD.0
  # DEBUG __pD.60261 => _94
  # DEBUG __aD.60259 => D#284ptD.0
  # DEBUG __nD.60260 => D#285ptD.0
  # DEBUG D#283ptD.0 => D#285ptD.0
  # DEBUG D#282ptD.0 => D#284ptD.0
  # DEBUG D#280ptD.0 => D#282ptD.0
  # DEBUG D#281ptD.0 => D#283ptD.0
  # DEBUG __pD.60264 => _94
  # DEBUG thisD.60262 => D#280ptD.0
  # DEBUG D.60263 => D#281ptD.0
  # .MEM_147 = VDEF <.MEM_4>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZdlPvD.2766 (_94);
;;    succ:       197 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 197, loop depth 0, count 0, freq 0
;;    prev block 196, next block 198, flags: (NEW, REACHABLE)
;;    pred:       195 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                196 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_106 = PHI <.MEM_4(195), .MEM_147(196)>
  # DEBUG D#287ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG thisD.60265 => D#287ptD.0
  # DEBUG thisD.60266 => D#287ptD.0
  # DEBUG thisD.60267 => D#287ptD.0
  resx 2
;;    succ:      

;;   basic block 198, loop depth 0, count 0, freq 0
;;    prev block 197, next block 199, flags: (NEW)
;;    pred:       134 (EH,EXECUTABLE)
<L52>: [LP 29]
;;    succ:       199 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 199, loop depth 0, count 0, freq 0
;;    prev block 198, next block 200, flags: (NEW, REACHABLE)
;;    pred:       198 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                183 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.66618 } (escaped heap)
  # __new_finish_1 = PHI <__new_finish_270(198), __new_finish_33(183)>
  # .MEM_5 = PHI <.MEM_427(198), .MEM_469(183)>
<L13>:
  # DEBUG __new_finishD.45143 => __new_finish_1
  # VUSE <.MEM_5>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _46 = __builtin_eh_pointerD.2738 (9);
  # .MEM_47 = VDEF <.MEM_5>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  __cxa_begin_catchD.14644 (_46);
  if (__new_finish_1 == 0B)
    goto <bb 201>;
  else
    goto <bb 200>;
;;    succ:       201 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                200 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 200, loop depth 0, count 0, freq 0
;;    prev block 199, next block 201, flags: (NEW, REACHABLE)
;;    pred:       199 [85.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 206>;
;;    succ:       206 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 201, loop depth 0, count 0, freq 0
;;    prev block 200, next block 202, flags: (NEW, REACHABLE)
;;    pred:       199 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                217 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_455 = PHI <.MEM_47(199), .MEM_56(217)>
  # DEBUG __new_finishD.45143 => 0B
  # DEBUG D#676ptD.0 => &this_9(D)->D.36227
  # DEBUG thisD.60292 => D#676ptD.0
  # RANGE ~[1537228672809129301, 18062436905507269290]
  _49 = __n_7(D) + __elems_before_631;
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _50 = _49 * 24;
  # PT = null { D.66618 } (escaped heap)
  _51 = __new_finish_270 + _50;
  # DEBUG __firstD.60268 => __first_27
  # DEBUG __lastD.60269 => _51
;;    succ:       202 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 202, loop depth 1, count 0, freq 0
;;    prev block 201, next block 203, flags: (NEW, REACHABLE)
;;    pred:       201 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                205 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = null { D.66618 } (escaped heap)
  # __first_80 = PHI <__first_27(201), __first_96(205)>
  # .MEM_107 = PHI <.MEM_455(201), .MEM_127(205)>
  # DEBUG __firstD.60275 => __first_80
  if (_51 == __first_80)
    goto <bb 210>;
  else
    goto <bb 203>;
;;    succ:       210 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                203 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 203, loop depth 1, count 0, freq 0
;;    prev block 202, next block 204, flags: (NEW, REACHABLE)
;;    pred:       202 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __rD.53899 => __first_80
  # DEBUG __pointerD.60276 => NULL
  # DEBUG thisD.60277 => NULL
  # DEBUG thisD.53864 => D#294ptD.0
  # DEBUG __firstD.53861 => D#296ptD.0
  # DEBUG __lastD.53862 => D#297ptD.0
  # DEBUG D.53863 => NULL
  # DEBUG D#162ptD.0 => D#296ptD.0
  # DEBUG D#163ptD.0 => D#297ptD.0
  # DEBUG __firstD.53130 => D#162ptD.0
  # DEBUG __lastD.53129 => D#163ptD.0
  # DEBUG D#161ptD.0 => D#163ptD.0
  # DEBUG D#160ptD.0 => D#162ptD.0
  # DEBUG D#158ptD.0 => D#160ptD.0
  # DEBUG D#159ptD.0 => D#161ptD.0
  # DEBUG D.53119 => D#158ptD.0
  # DEBUG D.53118 => D#159ptD.0
  # DEBUG thisD.60278 => D#295ptD.0
  # DEBUG D#293ptD.0 => D#295ptD.0->_M_implD.40535._M_end_of_storageD.40539
  # DEBUG D#292ptD.0 => (long intD.12) D#293ptD.0
  # VUSE <.MEM_107>
  # PT = nonlocal escaped null { D.66619 D.66620 D.66621 } (escaped heap)
  _95 = MEM[(struct _Vector_baseD.40302 *)__first_80]._M_implD.40535._M_startD.40537;
  # DEBUG D#291ptD.0 => (long intD.12) _95
  # DEBUG D#290ptD.0 => D#292ptD.0 - D#291ptD.0
  # DEBUG D#289ptD.0 => D#290ptD.0 /[ex] 16
  # DEBUG D#288ptD.0 => (long unsigned intD.14) D#289ptD.0
  # DEBUG thisD.60281 => D#295ptD.0
  # DEBUG __pD.60280 => _95
  # DEBUG __nD.60279 => D#288ptD.0
  if (_95 != 0B)
    goto <bb 204>;
  else
    goto <bb 205>;
;;    succ:       204 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                205 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 204, loop depth 1, count 0, freq 0
;;    prev block 203, next block 205, flags: (NEW, REACHABLE)
;;    pred:       203 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#286ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG D#284ptD.0 => D#286ptD.0
  # DEBUG D#285ptD.0 => D#288ptD.0
  # DEBUG __pD.60285 => _95
  # DEBUG __aD.60283 => D#284ptD.0
  # DEBUG __nD.60284 => D#285ptD.0
  # DEBUG D#283ptD.0 => D#285ptD.0
  # DEBUG D#282ptD.0 => D#284ptD.0
  # DEBUG D#280ptD.0 => D#282ptD.0
  # DEBUG D#281ptD.0 => D#283ptD.0
  # DEBUG __pD.60288 => _95
  # DEBUG thisD.60286 => D#280ptD.0
  # DEBUG D.60287 => D#281ptD.0
  # .MEM_122 = VDEF <.MEM_107>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZdlPvD.2766 (_95);
;;    succ:       205 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 205, loop depth 1, count 0, freq 0
;;    prev block 204, next block 206, flags: (NEW, REACHABLE)
;;    pred:       203 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                204 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_108 = PHI <.MEM_107(203), .MEM_122(204)>
  # DEBUG D#287ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG thisD.60289 => D#287ptD.0
  # DEBUG thisD.60290 => D#287ptD.0
  # DEBUG thisD.60291 => D#287ptD.0
  # .MEM_127 = VDEF <.MEM_108>
  MEM[(struct  &)__first_80] ={v} {CLOBBER};
  # PT = null { D.66618 } (escaped heap)
  __first_96 = __first_80 + 24;
  # DEBUG __firstD.60275 => __first_96
  goto <bb 202>;
;;    succ:       202 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 206, loop depth 1, count 0, freq 0
;;    prev block 205, next block 207, flags: (NEW)
;;    pred:       200 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                209 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = null { D.66618 } (escaped heap)
  # __new_finish_97 = PHI <__new_finish_270(200), __new_finish_99(209)>
  # .MEM_109 = PHI <.MEM_47(200), .MEM_133(209)>
  # DEBUG __firstD.60301 => __new_finish_97
  if (__new_finish_1 == __new_finish_97)
    goto <bb 210>;
  else
    goto <bb 207>;
;;    succ:       210 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                207 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 207, loop depth 1, count 0, freq 0
;;    prev block 206, next block 208, flags: (NEW, REACHABLE)
;;    pred:       206 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __rD.53899 => __new_finish_97
  # DEBUG __pointerD.60302 => NULL
  # DEBUG thisD.60303 => NULL
  # DEBUG thisD.53864 => D#294ptD.0
  # DEBUG __firstD.53861 => D#296ptD.0
  # DEBUG __lastD.53862 => D#297ptD.0
  # DEBUG D.53863 => NULL
  # DEBUG D#162ptD.0 => D#296ptD.0
  # DEBUG D#163ptD.0 => D#297ptD.0
  # DEBUG __firstD.53130 => D#162ptD.0
  # DEBUG __lastD.53129 => D#163ptD.0
  # DEBUG D#161ptD.0 => D#163ptD.0
  # DEBUG D#160ptD.0 => D#162ptD.0
  # DEBUG D#158ptD.0 => D#160ptD.0
  # DEBUG D#159ptD.0 => D#161ptD.0
  # DEBUG D.53119 => D#158ptD.0
  # DEBUG D.53118 => D#159ptD.0
  # DEBUG thisD.60304 => D#295ptD.0
  # DEBUG D#293ptD.0 => D#295ptD.0->_M_implD.40535._M_end_of_storageD.40539
  # DEBUG D#292ptD.0 => (long intD.12) D#293ptD.0
  # VUSE <.MEM_109>
  # PT = nonlocal escaped null { D.66619 D.66620 D.66621 } (escaped heap)
  _98 = MEM[(struct _Vector_baseD.40302 *)__new_finish_97]._M_implD.40535._M_startD.40537;
  # DEBUG D#291ptD.0 => (long intD.12) _98
  # DEBUG D#290ptD.0 => D#292ptD.0 - D#291ptD.0
  # DEBUG D#289ptD.0 => D#290ptD.0 /[ex] 16
  # DEBUG D#288ptD.0 => (long unsigned intD.14) D#289ptD.0
  # DEBUG thisD.60307 => D#295ptD.0
  # DEBUG __pD.60306 => _98
  # DEBUG __nD.60305 => D#288ptD.0
  if (_98 != 0B)
    goto <bb 208>;
  else
    goto <bb 209>;
;;    succ:       208 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                209 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 208, loop depth 1, count 0, freq 0
;;    prev block 207, next block 209, flags: (NEW, REACHABLE)
;;    pred:       207 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#286ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG D#284ptD.0 => D#286ptD.0
  # DEBUG D#285ptD.0 => D#288ptD.0
  # DEBUG __pD.60311 => _98
  # DEBUG __aD.60309 => D#284ptD.0
  # DEBUG __nD.60310 => D#285ptD.0
  # DEBUG D#283ptD.0 => D#285ptD.0
  # DEBUG D#282ptD.0 => D#284ptD.0
  # DEBUG D#280ptD.0 => D#282ptD.0
  # DEBUG D#281ptD.0 => D#283ptD.0
  # DEBUG __pD.60314 => _98
  # DEBUG thisD.60312 => D#280ptD.0
  # DEBUG D.60313 => D#281ptD.0
  # .MEM_128 = VDEF <.MEM_109>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZdlPvD.2766 (_98);
;;    succ:       209 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 209, loop depth 1, count 0, freq 0
;;    prev block 208, next block 210, flags: (NEW, REACHABLE)
;;    pred:       207 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                208 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_110 = PHI <.MEM_109(207), .MEM_128(208)>
  # DEBUG D#287ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG thisD.60315 => D#287ptD.0
  # DEBUG thisD.60316 => D#287ptD.0
  # DEBUG thisD.60317 => D#287ptD.0
  # .MEM_133 = VDEF <.MEM_110>
  MEM[(struct  &)__new_finish_97] ={v} {CLOBBER};
  # PT = null { D.66618 } (escaped heap)
  __new_finish_99 = __new_finish_97 + 24;
  # DEBUG __firstD.60301 => __new_finish_99
  goto <bb 206>;
;;    succ:       206 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 210, loop depth 0, count 0, freq 0
;;    prev block 209, next block 211, flags: (NEW, REACHABLE)
;;    pred:       202 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                206 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_654 = PHI <.MEM_107(202), .MEM_109(206)>
  # DEBUG D#684ptD.0 => &this_9(D)->D.36227
  # DEBUG D#270ptD.0 => D#684ptD.0
  # DEBUG __pD.60320 => NULL
  # DEBUG thisD.60322 => D#270ptD.0
  # DEBUG __nD.60321 => D#271ptD.0
  # DEBUG D#269ptD.0 => D#271ptD.0
  # DEBUG D#268ptD.0 => D#270ptD.0
  if (__new_finish_270 != 0B)
    goto <bb 211>;
  else
    goto <bb 212>;
;;    succ:       211 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                212 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 211, loop depth 0, count 0, freq 0
;;    prev block 210, next block 212, flags: (NEW, REACHABLE)
;;    pred:       210 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#267ptD.0 => &D#268ptD.0->_M_implD.35718
  # DEBUG D#265ptD.0 => D#267ptD.0
  # DEBUG D#266ptD.0 => D#269ptD.0
  # DEBUG __pD.60326 => NULL
  # DEBUG __aD.60324 => D#265ptD.0
  # DEBUG __nD.60325 => D#266ptD.0
  # DEBUG D#264ptD.0 => D#266ptD.0
  # DEBUG D#263ptD.0 => D#265ptD.0
  # DEBUG D#261ptD.0 => D#263ptD.0
  # DEBUG D#262ptD.0 => D#264ptD.0
  # DEBUG __pD.60329 => NULL
  # DEBUG thisD.60327 => D#261ptD.0
  # DEBUG D.60328 => D#262ptD.0
  # .MEM_134 = VDEF <.MEM_654>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  _ZdlPvD.2766 (__new_finish_270);
;;    succ:       212 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 212, loop depth 0, count 0, freq 0
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 211, next block 213, flags: (NEW, REACHABLE)
;;    pred:       211 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                210 [30.2%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_111 = PHI <.MEM_134(211), .MEM_654(210)>
  [LP 6] # .MEM_53 = VDEF <.MEM_111>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  __cxa_rethrowD.45013 ();
;;    succ:       213 (EH,EXECUTABLE)

;;   basic block 213, loop depth 0, count 0, freq 0
;;    prev block 212, next block 214, flags: (NEW, REACHABLE)
;;    pred:       212 (EH,EXECUTABLE)
<L18>: [LP 6]
  [MNT 11] # .MEM_54 = VDEF <.MEM_53>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  __cxa_end_catchD.14643 ();
  resx 10
;;    succ:      

;;   basic block 214, loop depth 0, count 0, freq 404, maybe hot
;;    prev block 213, next block 215, flags: (NEW, REACHABLE)
;;    pred:       109 [67.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __lenD.45139 => NULL
  # DEBUG thisD.60174 => this_9(D)
  # DEBUG D#168ptD.0 => &this_9(D)->D.36227._M_implD.35718._M_startD.35720
  # DEBUG thisD.60176 => NULL
  # DEBUG __iD.60175 => D#168ptD.0
  # DEBUG __lhsD.60171 => &__positionD.36152
  # DEBUG __rhsD.60172 => &D.45141
  # DEBUG thisD.53151 => &__positionD.36152
  _569 = (long intD.12) __position_22;
  # DEBUG thisD.53149 => &D.45141
  _567 = _569 - _273;
  # RANGE [-384307168202282325, 384307168202282325]
  _568 = _567 /[ex] 24;
  # RANGE ~[384307168202282326, 18062436905507269290]
  __elems_before_566 = (const size_typeD.35803) _568;
  # DEBUG __elems_beforeD.45140 => __elems_before_566
  # DEBUG D#685ptD.0 => &this_9(D)->D.36227
  # DEBUG D#528ptD.0 => D#685ptD.0
  # DEBUG __nD.66353 => NULL
  # DEBUG thisD.66354 => D#528ptD.0
  # DEBUG D#527ptD.0 => D#528ptD.0
  goto <bb 111>;
;;    succ:       111 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 215, loop depth 0, count 0, freq 49, maybe hot
;;    prev block 214, next block 216, flags: (NEW, REACHABLE)
;;    pred:       109 [33.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __lenD.45139 => NULL
  # DEBUG thisD.60174 => this_9(D)
  # DEBUG D#168ptD.0 => &this_9(D)->D.36227._M_implD.35718._M_startD.35720
  # DEBUG thisD.60176 => NULL
  # DEBUG __iD.60175 => D#168ptD.0
  # DEBUG __lhsD.60171 => &__positionD.36152
  # DEBUG __rhsD.60172 => &D.45141
  # DEBUG thisD.53151 => &__positionD.36152
  _561 = (long intD.12) __position_22;
  # DEBUG thisD.53149 => &D.45141
  _347 = _561 - _273;
  # RANGE [-384307168202282325, 384307168202282325]
  _565 = _347 /[ex] 24;
  # RANGE ~[384307168202282326, 18062436905507269290]
  __elems_before_554 = (const size_typeD.35803) _565;
  # DEBUG __elems_beforeD.45140 => __elems_before_554
  # DEBUG D#685ptD.0 => &this_9(D)->D.36227
  # DEBUG D#528ptD.0 => D#685ptD.0
  # DEBUG __nD.66353 => NULL
  # DEBUG thisD.66354 => D#528ptD.0
  # DEBUG D#527ptD.0 => D#528ptD.0
  if (__len_281 != 0)
    goto <bb 110>;
  else
    goto <bb 112>;
;;    succ:       110 [7.5%]  (TRUE_VALUE,EXECUTABLE)
;;                112 [92.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 216, loop depth 0, count 0, freq 10, maybe hot
;;    prev block 215, next block 217, flags: (NEW, REACHABLE)
;;    pred:       65 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _204 = (long unsigned intD.14) _34;
  # PT = nonlocal escaped 
  _203 = __old_finish_611 + _204;
  # .MEM_282 = VDEF <.MEM_71>
  this_9(D)->D.36227._M_implD.35718._M_finishD.35721 = _203;
  # DEBUG thisD.60142 => &__positionD.36152
  # DEBUG __firstD.60136 => D#1131ptD.0
  # DEBUG __lastD.60137 => D#1113ptD.0
  # DEBUG __valueD.60138 => &__x_copyD.45105
  # DEBUG __firstD.60141 => D#1131ptD.0
  goto <bb 104>;
;;    succ:       104 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 217, loop depth 0, count 0, freq 0
;;    prev block 216, next block 1, flags: (NEW, REACHABLE)
;;    pred:       158 (EH,EXECUTABLE)
<L37>: [LP 19]
  # DEBUG __new_finishD.45143 => 0B
  # VUSE <.MEM_448>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _100 = __builtin_eh_pointerD.2738 (9);
  # .MEM_56 = VDEF <.MEM_448>
  # USE = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  # CLB = nonlocal null { D.45105 D.66614 D.66615 D.66616 D.66617 D.66618 D.66619 D.66620 D.66621 } (escaped heap)
  __cxa_begin_catchD.14644 (_100);
  goto <bb 201>;
;;    succ:       201 [100.0%]  (FALLTHRU,EXECUTABLE)

}



;; Function DenseAllocator::DenseAllocator(Module*, const string&, int, int) (_ZN14DenseAllocatorC2EP6ModuleRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii, funcdef_no=1752, decl_uid=36292, cgraph_uid=422, symbol_order=423)


Pass statistics:
----------------

DenseAllocator::DenseAllocator(Module*, const string&, int, int) (struct DenseAllocatorD.35479 * const thisD.36293, struct ModuleD.29751 * parentD.36294, const struct stringD.2845 & nameD.36295, intD.9 inputsD.36296, intD.9 outputsD.36297)
Eh tree:
   1 cleanup land:{1,<L8>}
     2 cleanup land:{4,<L9>},{2,<L10>}
       3 cleanup land:{3,<L6>}
{
  intD.9 SR.1791D.66854;
  intD.9 SR.1790D.66853;
  intD.9 SR.1789D.66852;
  intD.9 SR.1788D.66851;
  struct vectorD.35482 * __firstD.66814;
  struct iteratorD.40612 __positionD.66807;
  struct value_typeD.40607 __xD.66802;
  struct iteratorD.35795 __positionD.66796;
  struct vectorD.35482 * __posD.66769;
  intD.9 jD.41076;
  intD.9 iD.41073;
  struct sRequestD.35378 D.48080;
  struct value_typeD.35790 D.41072;
  struct sRequestD.35378 * pretmp_2;
  struct sRequestD.35378 * prephitmp_4;
  struct AllocatorD.34627 * _7;
  long unsigned intD.14 _16;
  intD.9 _17;
  long unsigned intD.14 _18;
  struct vectorD.35484 * _19;
  struct sRequestD.35378 * const _20;
  intD.9 _23;
  intD.9 _28;
  long unsigned intD.14 _29;
  long unsigned intD.14 _30;
  long unsigned intD.14 _31;
  struct vectorD.35482 * _32;
  long unsigned intD.14 _34;
  struct vectorD.35482 & _35;
  struct vectorD.35482 * _43;
  struct sRequestD.35378 & _46;
  struct sRequestD.35378 * _48;
  struct vectorD.35482 * pretmp_61;
  intD.9 _69;
  const intD.9 pretmp_72;
  const intD.9 prephitmp_73;
  struct sRequestD.35378 * const _81;
  long intD.12 _82;
  long intD.12 _83;
  long intD.12 _84;
  long intD.12 _85;
  size_typeD.40620 _86;
  long unsigned intD.14 _87;
  long unsigned intD.14 _88;
  struct sRequestD.35378 * _89;
  struct sRequestD.35378 * _92;
  struct vectorD.35482 * prephitmp_106;
  struct vectorD.35482 * pretmp_130;
  struct vectorD.35482 & pretmp_132;
  struct sRequestD.35378 * pretmp_133;

;;   basic block 2, loop depth 0, count 0, freq 42, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  _7 = &this_6(D)->D.36298;
  # .MEM_13 = VDEF <.MEM_8(D)>
  # USE = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  # CLB = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  _ZN9AllocatorC2EP6ModuleRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiiD.35464 (_7, parent_9(D), name_10(D), inputs_11(D), outputs_12(D));
  # .MEM_14 = VDEF <.MEM_13>
  this_6(D)->D.36298.D.35470._vptr.ModuleD.30546 = &MEM[(voidD.45 *)&_ZTV14DenseAllocatorD.36301 + 16B];
  # DEBUG D#716ptD.0 => &this_6(D)->_requestD.36229
  # DEBUG thisD.61020 => D#716ptD.0
  # DEBUG D#260ptD.0 => &D#716ptD.0->D.36227
  # DEBUG thisD.61021 => D#260ptD.0
  # DEBUG D#259ptD.0 => &D#260ptD.0->_M_implD.35718
  # DEBUG thisD.61022 => D#259ptD.0
  # DEBUG thisD.53724 => D#259ptD.0
  # DEBUG thisD.53722 => D#259ptD.0
  # .MEM_50 = VDEF <.MEM_14>
  MEM[(struct _Vector_implD.35695 *)this_6(D) + 160B]._M_startD.35720 = 0B;
  # .MEM_51 = VDEF <.MEM_50>
  MEM[(struct _Vector_implD.35695 *)this_6(D) + 160B]._M_finishD.35721 = 0B;
  # .MEM_52 = VDEF <.MEM_51>
  MEM[(struct _Vector_implD.35695 *)this_6(D) + 160B]._M_end_of_storageD.35722 = 0B;
  # DEBUG thisD.61017 => &D.41072
  # DEBUG D#279ptD.0 => &D.41072.D.41044
  # DEBUG thisD.61018 => D#279ptD.0
  # DEBUG D#278ptD.0 => &D#279ptD.0->_M_implD.40535
  # DEBUG thisD.61019 => D#278ptD.0
  # DEBUG thisD.53795 => D#278ptD.0
  # DEBUG thisD.53793 => D#278ptD.0
  # .MEM_53 = VDEF <.MEM_52>
  MEM[(struct _Vector_implD.40512 *)&D.41072]._M_startD.40537 = 0B;
  # .MEM_54 = VDEF <.MEM_53>
  MEM[(struct _Vector_implD.40512 *)&D.41072]._M_finishD.40538 = 0B;
  # .MEM_55 = VDEF <.MEM_54>
  MEM[(struct _Vector_implD.40512 *)&D.41072]._M_end_of_storageD.40539 = 0B;
  # VUSE <.MEM_55>
  _17 = this_6(D)->D.36298._inputsD.34629;
  # RANGE ~[2147483648, 18446744071562067967]
  _18 = (long unsigned intD.14) _17;
  # DEBUG D#1146ptD.0 => &this_6(D)->_requestD.36229
  # DEBUG thisD.66765 => D#1146ptD.0
  # DEBUG __new_sizeD.66766 => _18
  # DEBUG __xD.66767 => &D.41072
  # DEBUG D#89ptD.0 => D#1146ptD.0
  # DEBUG D#89ptD.0 => D#1146ptD.0
  # DEBUG thisD.66798 => D#89ptD.0
  # DEBUG thisD.66799 => D#89ptD.0
  if (_18 != 0)
    goto <bb 3>;
  else
    goto <bb 5>;
;;    succ:       3 [20.7%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [79.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 9, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [20.7%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#89ptD.0 => D#1146ptD.0
  # DEBUG D#89ptD.0 => D#1146ptD.0
  # DEBUG thisD.60355 => D#89ptD.0
  # DEBUG thisD.60354 => D#89ptD.0
  # DEBUG thisD.60348 => D#1146ptD.0
  # DEBUG D#103ptD.0 => &D#1146ptD.0->D.36227._M_implD.35718._M_finishD.35721
  # DEBUG thisD.60350 => NULL
  # DEBUG __iD.60349 => D#103ptD.0
  # DEBUG thisD.66797 => D#1146ptD.0
  # .MEM_108 = VDEF <.MEM_55>
  MEM[(struct __normal_iteratorD.35796 *)&__positionD.66796] = 0B;
  # DEBUG __nD.66795 => _18
  # DEBUG __xD.66794 => &D.41072
  # PT = nonlocal 
  _19 = &this_6(D)->_requestD.36229;
  [LP 3] # .MEM_109 = VDEF <.MEM_108>
  # USE = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  # CLB = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  _ZNSt6vectorIS_IN9Allocator8sRequestESaIS1_EESaIS3_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS3_S5_EEmRKS3_D.36150 (_19, __positionD.66796, _18, &D.41072);
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                22 (EH,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 9, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_109>
  pretmp_2 = MEM[(struct _Vector_baseD.40302 *)&D.41072]._M_implD.40535._M_startD.40537;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 42, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       2 [79.3%]  (FALSE_VALUE,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_96 = PHI <.MEM_55(2), .MEM_109(4)>
  # PT = nonlocal escaped null 
  # prephitmp_4 = PHI <0B(2), pretmp_2(4)>
  # DEBUG thisD.61023 => &D.41072
  # DEBUG D#294ptD.0 => &D.41072.D.41044
  # DEBUG thisD.53864 => D#294ptD.0
  # DEBUG D#297ptD.0 => D.41072.D.41044._M_implD.40535._M_finishD.40538
  # DEBUG D#296ptD.0 => D.41072.D.41044._M_implD.40535._M_startD.40537
  # DEBUG __firstD.53861 => D#296ptD.0
  # DEBUG __lastD.53862 => D#297ptD.0
  # DEBUG D.53863 => NULL
  # DEBUG D#162ptD.0 => D#296ptD.0
  # DEBUG D#163ptD.0 => D#297ptD.0
  # DEBUG __firstD.53130 => D#162ptD.0
  # DEBUG __lastD.53129 => D#163ptD.0
  # DEBUG D#161ptD.0 => D#163ptD.0
  # DEBUG D#160ptD.0 => D#162ptD.0
  # DEBUG D#158ptD.0 => D#160ptD.0
  # DEBUG D#159ptD.0 => D#161ptD.0
  # DEBUG D.53119 => D#158ptD.0
  # DEBUG D.53118 => D#159ptD.0
  # DEBUG D#295ptD.0 => &D.41072.D.41044
  # DEBUG thisD.61024 => D#295ptD.0
  # DEBUG D#293ptD.0 => D#295ptD.0->_M_implD.40535._M_end_of_storageD.40539
  # DEBUG D#292ptD.0 => (long intD.12) D#293ptD.0
  # DEBUG D#1145ptD.0 => MEM[(struct _Vector_baseD.40302 *)&D.41072]._M_implD.40535._M_startD.40537
  # DEBUG D#291ptD.0 => (long intD.12) D#1145ptD.0
  # DEBUG D#290ptD.0 => D#292ptD.0 - D#291ptD.0
  # DEBUG D#289ptD.0 => D#290ptD.0 /[ex] 16
  # DEBUG D#288ptD.0 => (long unsigned intD.14) D#289ptD.0
  # DEBUG thisD.61027 => D#295ptD.0
  # DEBUG __pD.61026 => D#1145ptD.0
  # DEBUG __nD.61025 => D#288ptD.0
  if (prephitmp_4 != 0B)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 30, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#286ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG D#284ptD.0 => D#286ptD.0
  # DEBUG D#285ptD.0 => D#288ptD.0
  # DEBUG __pD.61031 => D#1145ptD.0
  # DEBUG __aD.61029 => D#284ptD.0
  # DEBUG __nD.61030 => D#285ptD.0
  # DEBUG D#283ptD.0 => D#285ptD.0
  # DEBUG D#282ptD.0 => D#284ptD.0
  # DEBUG D#280ptD.0 => D#282ptD.0
  # DEBUG D#281ptD.0 => D#283ptD.0
  # DEBUG __pD.61034 => D#1145ptD.0
  # DEBUG thisD.61032 => D#280ptD.0
  # DEBUG D.61033 => D#281ptD.0
  # .MEM_56 = VDEF <.MEM_96>
  # USE = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  # CLB = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  _ZdlPvD.2766 (prephitmp_4);
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 42, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       5 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_39 = PHI <.MEM_96(5), .MEM_56(6)>
  # DEBUG D#287ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG thisD.61035 => D#287ptD.0
  # DEBUG thisD.61036 => D#287ptD.0
  # DEBUG thisD.61037 => D#287ptD.0
  # .MEM_22 = VDEF <.MEM_39>
  D.41072 ={v} {CLOBBER};
  # DEBUG iD.41073 => 0
  # DEBUG iD.41073 => 0
  # VUSE <.MEM_22>
  _69 = this_6(D)->D.36298._inputsD.34629;
  if (_69 <= 0)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 43, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_135 = PHI <.MEM_22(7), .MEM_126(16)>
  # VUSE <.MEM_135>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 9, loop depth 0, count 0, freq 40, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       7 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # i_102 = PHI <0(9), i_38(17)>
  # .MEM_104 = PHI <.MEM_22(9), .MEM_126(17)>
  # DEBUG iD.41073 => i_102
  # VUSE <.MEM_104>
  _28 = this_6(D)->D.36298._outputsD.34630;
  # RANGE ~[2147483648, 18446744071562067967]
  _29 = (long unsigned intD.14) _28;
  # RANGE [0, 18446744073709551615]
  _30 = (long unsigned intD.14) i_102;
  # DEBUG D#714ptD.0 => &this_6(D)->_requestD.36229
  # VUSE <.MEM_104>
  # PT = nonlocal escaped 
  _43 = MEM[(struct vectorD.35482 * *)this_6(D) + 160B];
  # DEBUG D#36ptD.0 => D#714ptD.0
  # DEBUG __nD.61039 => _30
  # DEBUG thisD.61040 => D#36ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _16 = _30 * 24;
  # PT = nonlocal escaped 
  _35 = _43 + _16;
  # DEBUG thisD.66800 => _35
  # DEBUG __new_sizeD.66801 => _29
  # .MEM_24 = VDEF <.MEM_104>
  MEM[(struct sRequestD.35378 *)&__xD.66802] = 0;
  # .MEM_98 = VDEF <.MEM_24>
  MEM[(struct sRequestD.35378 *)&__xD.66802 + 4B] = 0;
  # .MEM_91 = VDEF <.MEM_98>
  MEM[(struct sRequestD.35378 *)&__xD.66802 + 8B] = 0;
  # .MEM_71 = VDEF <.MEM_91>
  MEM[(struct sRequestD.35378 *)&__xD.66802 + 12B] = 0;
  # VUSE <.MEM_71>
  # PT = nonlocal escaped 
  _20 = MEM[(struct sRequestD.35378 * *)_35];
  # DEBUG D#88ptD.0 => _35
  # VUSE <.MEM_71>
  # PT = nonlocal escaped 
  _81 = MEM[(struct sRequestD.35378 * *)_35 + 8B];
  # DEBUG D#88ptD.0 => _35
  # DEBUG thisD.66809 => D#88ptD.0
  # DEBUG thisD.66810 => D#88ptD.0
  _82 = (long intD.12) _81;
  _83 = (long intD.12) _20;
  _84 = _82 - _83;
  # RANGE [-576460752303423488, 576460752303423487]
  _85 = _84 /[ex] 16;
  # RANGE ~[576460752303423488, 17870283321406128127]
  _86 = (size_typeD.40620) _85;
  if (_29 > _86)
    goto <bb 11>;
  else
    goto <bb 13>;
;;    succ:       11 [20.7%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [79.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 186, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [20.7%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#88ptD.0 => _35
  # DEBUG D#88ptD.0 => _35
  # DEBUG thisD.59458 => D#88ptD.0
  # DEBUG thisD.59457 => D#88ptD.0
  # RANGE [1, 18446744073709551615]
  _87 = _29 - _86;
  # DEBUG thisD.59451 => _35
  # DEBUG D#104ptD.0 => &_35->D.41044._M_implD.40535._M_finishD.40538
  # DEBUG thisD.59453 => NULL
  # DEBUG __iD.59452 => D#104ptD.0
  # DEBUG thisD.66808 => _35
  # .MEM_112 = VDEF <.MEM_71>
  MEM[(struct __normal_iteratorD.40613 *)&__positionD.66807] = _81;
  # DEBUG __nD.66806 => _87
  # DEBUG __xD.66805 => &__xD.66802
  [LP 4] # .MEM_113 = VDEF <.MEM_112>
  # USE = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  # CLB = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  _ZNSt6vectorIN9Allocator8sRequestESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEmRKS1_D.40967 (_35, __positionD.66807, _87, &__xD.66802);
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                26 (EH,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 186, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_113>
  pretmp_72 = this_6(D)->D.36298._outputsD.34630;
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 714, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       10 [79.3%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#88ptD.0 => _35
  # DEBUG D#88ptD.0 => _35
  # DEBUG thisD.59463 => D#88ptD.0
  # DEBUG thisD.59462 => D#88ptD.0
  if (_29 < _86)
    goto <bb 14>;
  else
    goto <bb 15>;
;;    succ:       14 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 435, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _88 = _29 * 16;
  # PT = nonlocal escaped 
  _89 = _20 + _88;
  # DEBUG D#167ptD.0 => _35
  # DEBUG __posD.66804 => _89
  # DEBUG D#166ptD.0 => D#167ptD.0
  # DEBUG thisD.66803 => D#166ptD.0
  # DEBUG D#164ptD.0 => &D#166ptD.0->D.41044
  # DEBUG thisD.53143 => D#164ptD.0
  # DEBUG D#165ptD.0 => D#166ptD.0->D.41044._M_implD.40535._M_finishD.40538
  # DEBUG __firstD.53133 => _89
  # DEBUG __lastD.53134 => D#165ptD.0
  # DEBUG D.53135 => NULL
  # DEBUG D#162ptD.0 => _89
  # DEBUG D#163ptD.0 => D#165ptD.0
  # DEBUG __firstD.53130 => D#162ptD.0
  # DEBUG __lastD.53129 => D#163ptD.0
  # DEBUG D#161ptD.0 => D#163ptD.0
  # DEBUG D#160ptD.0 => D#162ptD.0
  # DEBUG D#158ptD.0 => D#160ptD.0
  # DEBUG D#159ptD.0 => D#161ptD.0
  # DEBUG D.53119 => D#158ptD.0
  # DEBUG D.53118 => D#159ptD.0
  # .MEM_111 = VDEF <.MEM_71>
  MEM[(struct sRequestD.35378 * *)_35 + 8B] = _89;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       12 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                13 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_76 = PHI <.MEM_113(12), .MEM_111(14), .MEM_71(13)>
  # prephitmp_73 = PHI <pretmp_72(12), _28(14), _28(13)>
  # DEBUG jD.41076 => 0
  if (prephitmp_73 <= 0)
    goto <bb 16>;
  else
    goto <bb 18>;
;;    succ:       16 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_126 = PHI <.MEM_76(15), .MEM_80(20)>
  i_38 = i_102 + 1;
  # DEBUG iD.41073 => i_38
  # DEBUG iD.41073 => i_38
  # VUSE <.MEM_126>
  _23 = this_6(D)->D.36298._inputsD.34629;
  if (_23 <= i_38)
    goto <bb 8>;
  else
    goto <bb 17>;
;;    succ:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 860, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 17, next block 19, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_76>
  # PT = nonlocal escaped 
  pretmp_130 = MEM[(struct vectorD.35482 * *)this_6(D) + 160B];
  # PT = nonlocal escaped 
  pretmp_132 = pretmp_130 + _16;
  # VUSE <.MEM_76>
  # PT = nonlocal escaped 
  pretmp_133 = MEM[(struct sRequestD.35378 * *)pretmp_132];
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       18 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                21 [100.0%]  (FALLTHRU,EXECUTABLE)
  # j_101 = PHI <0(18), j_37(21)>
  # .MEM_103 = PHI <.MEM_76(18), .MEM_36(21)>
  # DEBUG jD.41076 => j_101
  # RANGE [0, 18446744073709551615]
  _34 = (long unsigned intD.14) j_101;
  # DEBUG D#715ptD.0 => &this_6(D)->_requestD.36229
  # DEBUG D#36ptD.0 => D#715ptD.0
  # DEBUG __nD.61047 => _30
  # DEBUG thisD.61048 => D#36ptD.0
  # DEBUG __nD.61043 => _34
  # DEBUG thisD.61044 => D#37ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _31 = _34 * 16;
  # PT = nonlocal escaped 
  _46 = pretmp_133 + _31;
  # .MEM_36 = VDEF <.MEM_103>
  _46->labelD.35381 = -1;
  j_37 = j_101 + 1;
  # DEBUG jD.41076 => j_37
  # DEBUG jD.41076 => j_37
  if (j_37 >= prephitmp_73)
    goto <bb 20>;
  else
    goto <bb 21>;
;;    succ:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       19 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_80 = PHI <.MEM_36(19)>
  goto <bb 16>;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 2, count 0, freq 8281, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       19 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 19>;
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       3 (EH,EXECUTABLE)
<L6>: [LP 3]
  # DEBUG thisD.61050 => &D.41072
  # DEBUG D#294ptD.0 => &D.41072.D.41044
  # DEBUG thisD.53864 => D#294ptD.0
  # DEBUG D#297ptD.0 => D.41072.D.41044._M_implD.40535._M_finishD.40538
  # DEBUG D#296ptD.0 => D.41072.D.41044._M_implD.40535._M_startD.40537
  # DEBUG __firstD.53861 => D#296ptD.0
  # DEBUG __lastD.53862 => D#297ptD.0
  # DEBUG D.53863 => NULL
  # DEBUG D#162ptD.0 => D#296ptD.0
  # DEBUG D#163ptD.0 => D#297ptD.0
  # DEBUG __firstD.53130 => D#162ptD.0
  # DEBUG __lastD.53129 => D#163ptD.0
  # DEBUG D#161ptD.0 => D#163ptD.0
  # DEBUG D#160ptD.0 => D#162ptD.0
  # DEBUG D#158ptD.0 => D#160ptD.0
  # DEBUG D#159ptD.0 => D#161ptD.0
  # DEBUG D.53119 => D#158ptD.0
  # DEBUG D.53118 => D#159ptD.0
  # DEBUG D#295ptD.0 => &D.41072.D.41044
  # DEBUG thisD.61051 => D#295ptD.0
  # DEBUG D#293ptD.0 => D#295ptD.0->_M_implD.40535._M_end_of_storageD.40539
  # DEBUG D#292ptD.0 => (long intD.12) D#293ptD.0
  # VUSE <.MEM_109>
  # PT = nonlocal escaped null 
  _48 = MEM[(struct _Vector_baseD.40302 *)&D.41072]._M_implD.40535._M_startD.40537;
  # DEBUG D#291ptD.0 => (long intD.12) _48
  # DEBUG D#290ptD.0 => D#292ptD.0 - D#291ptD.0
  # DEBUG D#289ptD.0 => D#290ptD.0 /[ex] 16
  # DEBUG D#288ptD.0 => (long unsigned intD.14) D#289ptD.0
  # DEBUG thisD.61054 => D#295ptD.0
  # DEBUG __pD.61053 => _48
  # DEBUG __nD.61052 => D#288ptD.0
  if (_48 != 0B)
    goto <bb 23>;
  else
    goto <bb 24>;
;;    succ:       23 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       22 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#286ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG D#284ptD.0 => D#286ptD.0
  # DEBUG D#285ptD.0 => D#288ptD.0
  # DEBUG __pD.61058 => _48
  # DEBUG __aD.61056 => D#284ptD.0
  # DEBUG __nD.61057 => D#285ptD.0
  # DEBUG D#283ptD.0 => D#285ptD.0
  # DEBUG D#282ptD.0 => D#284ptD.0
  # DEBUG D#280ptD.0 => D#282ptD.0
  # DEBUG D#281ptD.0 => D#283ptD.0
  # DEBUG __pD.61061 => _48
  # DEBUG thisD.61059 => D#280ptD.0
  # DEBUG D.61060 => D#281ptD.0
  # .MEM_62 = VDEF <.MEM_109>
  # USE = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  # CLB = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  _ZdlPvD.2766 (_48);
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       22 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                23 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_49 = PHI <.MEM_109(22), .MEM_62(23)>
  # DEBUG D#287ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG thisD.61062 => D#287ptD.0
  # DEBUG thisD.61063 => D#287ptD.0
  # DEBUG thisD.61064 => D#287ptD.0
  # .MEM_40 = VDEF <.MEM_49>
  D.41072 ={v} {CLOBBER};
  [LP 2] resx 3
;;    succ:       25 (EH,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 24, next block 26, flags: (NEW)
;;    pred:       24 (EH,EXECUTABLE)
<L10>: [LP 2]
  goto <bb 27> (<L7>);
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       11 (EH,EXECUTABLE)
<L9>: [LP 4]
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_5 = PHI <.MEM_40(25), .MEM_113(26)>
<L7>:
  # DEBUG thisD.66811 => D#1146ptD.0
  # DEBUG D#302ptD.0 => &D#1146ptD.0->D.36227
  # DEBUG thisD.54069 => D#302ptD.0
  # VUSE <.MEM_5>
  # PT = nonlocal escaped 
  _32 = MEM[(struct vectorD.35484 *)this_6(D) + 160B].D.36227._M_implD.35718._M_finishD.35721;
  # VUSE <.MEM_5>
  # PT = nonlocal escaped 
  __first_90 = MEM[(struct vectorD.35484 *)this_6(D) + 160B].D.36227._M_implD.35718._M_startD.35720;
  # DEBUG __firstD.66814 => __first_90
  # DEBUG __lastD.66813 => _32
  # DEBUG __firstD.66819 => __first_90
  if (_32 == __first_90)
    goto <bb 34>;
  else
    goto <bb 28>;
;;    succ:       34 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 27, next block 29, flags: (NEW)
;;    pred:       27 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 28, next block 30, flags: (NEW)
;;    pred:       28 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_77 = PHI <__first_90(28), __first_93(32)>
  # .MEM_79 = PHI <.MEM_5(28), .MEM_119(32)>
  # DEBUG __firstD.66819 => __first_77
  # DEBUG __rD.53899 => __first_77
  # DEBUG __pointerD.66820 => NULL
  # DEBUG thisD.66821 => NULL
  # DEBUG thisD.53864 => D#294ptD.0
  # DEBUG __firstD.53861 => D#296ptD.0
  # DEBUG __lastD.53862 => D#297ptD.0
  # DEBUG D.53863 => NULL
  # DEBUG D#162ptD.0 => D#296ptD.0
  # DEBUG D#163ptD.0 => D#297ptD.0
  # DEBUG __firstD.53130 => D#162ptD.0
  # DEBUG __lastD.53129 => D#163ptD.0
  # DEBUG D#161ptD.0 => D#163ptD.0
  # DEBUG D#160ptD.0 => D#162ptD.0
  # DEBUG D#158ptD.0 => D#160ptD.0
  # DEBUG D#159ptD.0 => D#161ptD.0
  # DEBUG D.53119 => D#158ptD.0
  # DEBUG D.53118 => D#159ptD.0
  # DEBUG thisD.66822 => D#295ptD.0
  # DEBUG D#293ptD.0 => D#295ptD.0->_M_implD.40535._M_end_of_storageD.40539
  # DEBUG D#292ptD.0 => (long intD.12) D#293ptD.0
  # VUSE <.MEM_79>
  # PT = nonlocal escaped 
  _92 = MEM[(struct _Vector_baseD.40302 *)__first_77]._M_implD.40535._M_startD.40537;
  # DEBUG D#291ptD.0 => (long intD.12) _92
  # DEBUG D#290ptD.0 => D#292ptD.0 - D#291ptD.0
  # DEBUG D#289ptD.0 => D#290ptD.0 /[ex] 16
  # DEBUG D#288ptD.0 => (long unsigned intD.14) D#289ptD.0
  # DEBUG thisD.66825 => D#295ptD.0
  # DEBUG __pD.66824 => _92
  # DEBUG __nD.66823 => D#288ptD.0
  if (_92 != 0B)
    goto <bb 30>;
  else
    goto <bb 31>;
;;    succ:       30 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#286ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG D#284ptD.0 => D#286ptD.0
  # DEBUG D#285ptD.0 => D#288ptD.0
  # DEBUG __pD.66829 => _92
  # DEBUG __aD.66827 => D#284ptD.0
  # DEBUG __nD.66828 => D#285ptD.0
  # DEBUG D#283ptD.0 => D#285ptD.0
  # DEBUG D#282ptD.0 => D#284ptD.0
  # DEBUG D#280ptD.0 => D#282ptD.0
  # DEBUG D#281ptD.0 => D#283ptD.0
  # DEBUG __pD.66832 => _92
  # DEBUG thisD.66830 => D#280ptD.0
  # DEBUG D.66831 => D#281ptD.0
  # .MEM_114 = VDEF <.MEM_79>
  # USE = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  # CLB = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  _ZdlPvD.2766 (_92);
;;    succ:       31 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 31, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       29 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_99 = PHI <.MEM_79(29), .MEM_114(30)>
  # DEBUG D#287ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG thisD.66833 => D#287ptD.0
  # DEBUG thisD.66834 => D#287ptD.0
  # DEBUG thisD.66835 => D#287ptD.0
  # .MEM_119 = VDEF <.MEM_99>
  MEM[(struct  &)__first_77] ={v} {CLOBBER};
  # PT = nonlocal escaped 
  __first_93 = __first_77 + 24;
  # DEBUG __firstD.66819 => __first_93
  # DEBUG __firstD.66819 => __first_93
  if (_32 == __first_93)
    goto <bb 33>;
  else
    goto <bb 32>;
;;    succ:       33 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 32, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 31, next block 33, flags: (NEW)
;;    pred:       31 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 32, next block 34, flags: (NEW)
;;    pred:       31 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_119>
  pretmp_61 = MEM[(struct _Vector_baseD.35485 *)this_6(D) + 160B]._M_implD.35718._M_startD.35720;
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       33 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_95 = PHI <.MEM_119(33), .MEM_5(27)>
  # PT = nonlocal escaped 
  # prephitmp_106 = PHI <pretmp_61(33), __first_90(27)>
  # DEBUG D#303ptD.0 => &D#1146ptD.0->D.36227
  # DEBUG thisD.66836 => D#303ptD.0
  # DEBUG D#277ptD.0 => D#303ptD.0->_M_implD.35718._M_end_of_storageD.35722
  # DEBUG D#276ptD.0 => (long intD.12) D#277ptD.0
  # DEBUG D#1144ptD.0 => MEM[(struct _Vector_baseD.35485 *)this_6(D) + 160B]._M_implD.35718._M_startD.35720
  # DEBUG D#275ptD.0 => (long intD.12) D#1144ptD.0
  # DEBUG D#274ptD.0 => D#276ptD.0 - D#275ptD.0
  # DEBUG D#273ptD.0 => D#274ptD.0 /[ex] 24
  # DEBUG D#270ptD.0 => D#303ptD.0
  # DEBUG D#271ptD.0 => (long unsigned intD.14) D#273ptD.0
  # DEBUG __pD.66839 => D#1144ptD.0
  # DEBUG thisD.66837 => D#270ptD.0
  # DEBUG __nD.66838 => D#271ptD.0
  # DEBUG D#269ptD.0 => D#271ptD.0
  # DEBUG D#268ptD.0 => D#270ptD.0
  if (prephitmp_106 != 0B)
    goto <bb 35>;
  else
    goto <bb 36>;
;;    succ:       35 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       34 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#267ptD.0 => &D#268ptD.0->_M_implD.35718
  # DEBUG D#265ptD.0 => D#267ptD.0
  # DEBUG D#266ptD.0 => D#269ptD.0
  # DEBUG __pD.66843 => D#1144ptD.0
  # DEBUG __aD.66841 => D#265ptD.0
  # DEBUG __nD.66842 => D#266ptD.0
  # DEBUG D#264ptD.0 => D#266ptD.0
  # DEBUG D#263ptD.0 => D#265ptD.0
  # DEBUG D#261ptD.0 => D#263ptD.0
  # DEBUG D#262ptD.0 => D#264ptD.0
  # DEBUG __pD.66846 => D#1144ptD.0
  # DEBUG thisD.66844 => D#261ptD.0
  # DEBUG D.66845 => D#262ptD.0
  # .MEM_120 = VDEF <.MEM_95>
  # USE = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  # CLB = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  _ZdlPvD.2766 (prephitmp_106);
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       34 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_100 = PHI <.MEM_95(34), .MEM_120(35)>
  # DEBUG D#272ptD.0 => &D#303ptD.0->_M_implD.35718
  # DEBUG thisD.66847 => D#272ptD.0
  # DEBUG thisD.66848 => D#272ptD.0
  # DEBUG thisD.66849 => D#272ptD.0
  # .MEM_125 = VDEF <.MEM_100>
  MEM[(struct  &)this_6(D) + 160] ={v} {CLOBBER};
  [LP 1] resx 2
;;    succ:       37 (EH,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 36, next block 1, flags: (NEW, REACHABLE)
;;    pred:       36 (EH,EXECUTABLE)
<L8>: [LP 1]
  # .MEM_42 = VDEF <.MEM_125>
  # USE = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  # CLB = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  _ZN9AllocatorD2EvD.35455 (_7);
  resx 1
;;    succ:      

}


Creating dr for MEM[(struct __normal_iterator *)&__position]
analyze_innermost: success.
	base_address: &__position
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct __normal_iterator *)&__position]
Creating dr for MEM[(struct _Vector_base *)&D.41072]._M_impl._M_start
analyze_innermost: success.
	base_address: &D.41072
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Vector_base *)&D.41072]
	Access function 0: 0
	Access function 1: 0
Creating dr for MEM[(struct _Vector_base *)&D.41072]._M_impl._M_start
analyze_innermost: success.
	base_address: &D.41072
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Vector_base *)&D.41072]
	Access function 0: 0
	Access function 1: 0
Creating dr for MEM[(struct vector *)this_6(D) + 160B].D.36227._M_impl._M_finish
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 168
	step: 0
	aligned to: 256
	base_object: MEM[(struct vector *)this_6(D) + 160B]
	Access function 0: 64
	Access function 1: 0
	Access function 2: 0
Creating dr for MEM[(struct vector *)this_6(D) + 160B].D.36227._M_impl._M_start
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 160
	step: 0
	aligned to: 256
	base_object: MEM[(struct vector *)this_6(D) + 160B]
	Access function 0: 0
	Access function 1: 0
	Access function 2: 0
Creating dr for MEM[(struct _Vector_base *)__first_77]._M_impl._M_start
analyze_innermost: success.
	base_address: __first_90
	offset from base address: 0
	constant offset from base address: 0
	step: 24
	aligned to: 256
	base_object: MEM[(struct _Vector_base *)__first_90]
	Access function 0: 0
	Access function 1: 0
	Access function 2: {0B, +, 24}_4
Creating dr for MEM[(struct _Vector_base *)__first_77]._M_impl._M_start
analyze_innermost: success.
	base_address: __first_90
	offset from base address: 0
	constant offset from base address: 0
	step: 24
	aligned to: 256
	base_object: MEM[(struct _Vector_base *)__first_90]
	Access function 0: 0
	Access function 1: 0
	Access function 2: {0B, +, 24}_4
Creating dr for MEM[(struct _Vector_base *)__first_77]._M_impl._M_start
analyze_innermost: success.
	base_address: __first_90
	offset from base address: 0
	constant offset from base address: 0
	step: 24
	aligned to: 256
	base_object: MEM[(struct _Vector_base *)__first_90]
	Access function 0: 0
	Access function 1: 0
	Access function 2: {0B, +, 24}_4
Creating dr for MEM[(struct _Vector_base *)__first_77]._M_impl._M_start
analyze_innermost: success.
	base_address: __first_90
	offset from base address: 0
	constant offset from base address: 0
	step: 24
	aligned to: 256
	base_object: MEM[(struct _Vector_base *)__first_90]
	Access function 0: 0
	Access function 1: 0
	Access function 2: {0B, +, 24}_4
Analyzing # of iterations of loop 4
  exit condition [__first_90 + 24, + , 24](no_overflow) != _32
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551591
  result:
    under assumptions ((unsigned long) _32 - (unsigned long) (__first_90 + 24) & 7) == 0
    # of iterations (((unsigned long) _32 - (unsigned long) (__first_90 + 24)) /[ex] 8) * 768614336404564651 & 2305843009213693951, bounded by 768614336404564650
Creating dr for MEM[(struct _Vector_base *)__first_77]._M_impl._M_start
analyze_innermost: success.
	base_address: __first_90
	offset from base address: 0
	constant offset from base address: 0
	step: 24
	aligned to: 256
	base_object: MEM[(struct _Vector_base *)__first_90]
	Access function 0: 0
	Access function 1: 0
	Access function 2: {0B, +, 24}_4
Creating dr for MEM[(struct _Vector_base *)__first_77]._M_impl._M_start
analyze_innermost: success.
	base_address: __first_90
	offset from base address: 0
	constant offset from base address: 0
	step: 24
	aligned to: 256
	base_object: MEM[(struct _Vector_base *)__first_90]
	Access function 0: 0
	Access function 1: 0
	Access function 2: {0B, +, 24}_4
Creating dr for MEM[(struct _Vector_base *)__first_77]._M_impl._M_start
analyze_innermost: success.
	base_address: __first_90
	offset from base address: 0
	constant offset from base address: 0
	step: 24
	aligned to: 256
	base_object: MEM[(struct _Vector_base *)__first_90]
	Access function 0: 0
	Access function 1: 0
	Access function 2: {0B, +, 24}_4
Creating dr for MEM[(struct _Vector_base *)__first_77]._M_impl._M_start
analyze_innermost: success.
	base_address: __first_90
	offset from base address: 0
	constant offset from base address: 0
	step: 24
	aligned to: 256
	base_object: MEM[(struct _Vector_base *)__first_90]
	Access function 0: 0
	Access function 1: 0
	Access function 2: {0B, +, 24}_4
Analyzing # of iterations of loop 4
  exit condition [__first_90 + 24, + , 24](no_overflow) != _32
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551591
  result:
    under assumptions ((unsigned long) _32 - (unsigned long) (__first_90 + 24) & 7) == 0
    # of iterations (((unsigned long) _32 - (unsigned long) (__first_90 + 24)) /[ex] 8) * 768614336404564651 & 2305843009213693951, bounded by 768614336404564650
Creating dr for MEM[(struct _Vector_base *)this_6(D) + 160B]._M_impl._M_start
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 160
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Vector_base *)this_6(D) + 160B]
	Access function 0: 0
	Access function 1: 0
Creating dr for this_6(D)->D.36298._outputs
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 100
	step: 0
	aligned to: 256
	base_object: *this_6(D)
	Access function 0: 800
	Access function 1: 0
Creating dr for this_6(D)->D.36298._outputs
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 100
	step: 0
	aligned to: 256
	base_object: *this_6(D)
	Access function 0: 800
	Access function 1: 0
Creating dr for MEM[(struct vector * *)this_6(D) + 160B]
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 160
	step: 0
	aligned to: 256
	base_object: MEM[(struct vector * *)this_6(D) + 160B]
Creating dr for MEM[(struct vector * *)this_6(D) + 160B]
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 160
	step: 0
	aligned to: 256
	base_object: MEM[(struct vector * *)this_6(D) + 160B]
Creating dr for MEM[(struct sRequest *)&__x]
analyze_innermost: success.
	base_address: &__x
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest *)&__x]
Creating dr for MEM[(struct sRequest *)&__x]
analyze_innermost: success.
	base_address: &__x
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest *)&__x]
Creating dr for MEM[(struct sRequest *)&__x + 4B]
analyze_innermost: success.
	base_address: &__x
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest *)&__x + 4B]
Creating dr for MEM[(struct sRequest *)&__x + 4B]
analyze_innermost: success.
	base_address: &__x
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest *)&__x + 4B]
Creating dr for MEM[(struct sRequest *)&__x + 8B]
analyze_innermost: success.
	base_address: &__x
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest *)&__x + 8B]
Creating dr for MEM[(struct sRequest *)&__x + 8B]
analyze_innermost: success.
	base_address: &__x
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest *)&__x + 8B]
Creating dr for MEM[(struct sRequest *)&__x + 12B]
analyze_innermost: success.
	base_address: &__x
	offset from base address: 0
	constant offset from base address: 12
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest *)&__x + 12B]
Creating dr for MEM[(struct sRequest *)&__x + 12B]
analyze_innermost: success.
	base_address: &__x
	offset from base address: 0
	constant offset from base address: 12
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest *)&__x + 12B]
Creating dr for MEM[(struct sRequest * *)_35]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest * *)_35]
Creating dr for MEM[(struct sRequest * *)_35]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest * *)_35]
Creating dr for MEM[(struct sRequest * *)_35 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest * *)_35 + 8B]
Creating dr for MEM[(struct sRequest * *)_35 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest * *)_35 + 8B]
Creating dr for this_6(D)->D.36298._outputs
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 100
	step: 0
	aligned to: 256
	base_object: *this_6(D)
	Access function 0: 800
	Access function 1: 0
Creating dr for this_6(D)->D.36298._outputs
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 100
	step: 0
	aligned to: 256
	base_object: *this_6(D)
	Access function 0: 800
	Access function 1: 0
Creating dr for MEM[(struct vector * *)this_6(D) + 160B]
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 160
	step: 0
	aligned to: 256
	base_object: MEM[(struct vector * *)this_6(D) + 160B]
Creating dr for MEM[(struct vector * *)this_6(D) + 160B]
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 160
	step: 0
	aligned to: 256
	base_object: MEM[(struct vector * *)this_6(D) + 160B]
Creating dr for MEM[(struct sRequest *)&__x]
analyze_innermost: success.
	base_address: &__x
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest *)&__x]
Creating dr for MEM[(struct sRequest *)&__x]
analyze_innermost: success.
	base_address: &__x
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest *)&__x]
Creating dr for MEM[(struct sRequest *)&__x + 4B]
analyze_innermost: success.
	base_address: &__x
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest *)&__x + 4B]
Creating dr for MEM[(struct sRequest *)&__x + 4B]
analyze_innermost: success.
	base_address: &__x
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest *)&__x + 4B]
Creating dr for MEM[(struct sRequest *)&__x + 8B]
analyze_innermost: success.
	base_address: &__x
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest *)&__x + 8B]
Creating dr for MEM[(struct sRequest *)&__x + 8B]
analyze_innermost: success.
	base_address: &__x
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest *)&__x + 8B]
Creating dr for MEM[(struct sRequest *)&__x + 12B]
analyze_innermost: success.
	base_address: &__x
	offset from base address: 0
	constant offset from base address: 12
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest *)&__x + 12B]
Creating dr for MEM[(struct sRequest *)&__x + 12B]
analyze_innermost: success.
	base_address: &__x
	offset from base address: 0
	constant offset from base address: 12
	step: 0
	aligned to: 256
	base_object: MEM[(struct sRequest *)&__x + 12B]
Creating dr for MEM[(struct sRequest * *)_35]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest * *)_35]
Creating dr for MEM[(struct sRequest * *)_35]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest * *)_35]
Creating dr for MEM[(struct sRequest * *)_35 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest * *)_35 + 8B]
Creating dr for MEM[(struct sRequest * *)_35 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest * *)_35 + 8B]
Creating dr for MEM[(struct __normal_iterator *)&__position]
analyze_innermost: success.
	base_address: &__position
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct __normal_iterator *)&__position]
Creating dr for MEM[(struct __normal_iterator *)&__position]
analyze_innermost: success.
	base_address: &__position
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct __normal_iterator *)&__position]
Creating dr for this_6(D)->D.36298._outputs
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 100
	step: 0
	aligned to: 256
	base_object: *this_6(D)
	Access function 0: 800
	Access function 1: 0
Creating dr for this_6(D)->D.36298._outputs
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 100
	step: 0
	aligned to: 256
	base_object: *this_6(D)
	Access function 0: 800
	Access function 1: 0
Creating dr for MEM[(struct sRequest * *)_35 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest * *)_35 + 8B]
Creating dr for MEM[(struct sRequest * *)_35 + 8B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest * *)_35 + 8B]
Creating dr for MEM[(struct vector * *)this_6(D) + 160B]
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 160
	step: 0
	aligned to: 256
	base_object: MEM[(struct vector * *)this_6(D) + 160B]
Creating dr for MEM[(struct vector * *)this_6(D) + 160B]
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 160
	step: 0
	aligned to: 256
	base_object: MEM[(struct vector * *)this_6(D) + 160B]
Creating dr for MEM[(struct sRequest * *)pretmp_132]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest * *)pretmp_132]
Creating dr for MEM[(struct sRequest * *)pretmp_132]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct sRequest * *)pretmp_132]
Creating dr for _46->label
analyze_innermost: success.
	base_address: pretmp_133
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: *pretmp_133
	Access function 0: 32
	Access function 1: {0B, +, 16}_2
Creating dr for _46->label
analyze_innermost: success.
	base_address: pretmp_133
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: *_46
	Access function 0: 32
Creating dr for _46->label
analyze_innermost: success.
	base_address: pretmp_133
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: *_46
	Access function 0: 32
Creating dr for _46->label
analyze_innermost: success.
	base_address: pretmp_133
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: *pretmp_133
	Access function 0: 32
	Access function 1: {0B, +, 16}_2
Creating dr for _46->label
analyze_innermost: success.
	base_address: pretmp_133
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: *_46
	Access function 0: 32
Creating dr for _46->label
analyze_innermost: success.
	base_address: pretmp_133
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: *_46
	Access function 0: 32
Analyzing # of iterations of loop 2
  exit condition [1, + , 1](no_overflow) < prephitmp_73
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) prephitmp_73 + 4294967295, bounded by 2147483646
Analyzing # of iterations of loop 2
  exit condition [1, + , 1](no_overflow) < prephitmp_73
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) prephitmp_73 + 4294967295, bounded by 2147483646
Creating dr for _46->label
analyze_innermost: success.
	base_address: pretmp_133
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: *pretmp_133
	Access function 0: 32
	Access function 1: {0B, +, 16}_2
Creating dr for _46->label
analyze_innermost: success.
	base_address: pretmp_133
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: *_46
	Access function 0: 32
Creating dr for _46->label
analyze_innermost: success.
	base_address: pretmp_133
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: *_46
	Access function 0: 32
Creating dr for _46->label
analyze_innermost: success.
	base_address: pretmp_133
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: *pretmp_133
	Access function 0: 32
	Access function 1: {0B, +, 16}_2
Creating dr for _46->label
analyze_innermost: success.
	base_address: pretmp_133
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: *_46
	Access function 0: 32
Creating dr for _46->label
analyze_innermost: success.
	base_address: pretmp_133
	offset from base address: 0
	constant offset from base address: 4
	step: 16
	aligned to: 256
	base_object: *_46
	Access function 0: 32
Analyzing # of iterations of loop 2
  exit condition [1, + , 1](no_overflow) < prephitmp_73
  bounds on difference of bases: 0 ... 2147483646
  result:
    # of iterations (unsigned int) prephitmp_73 + 4294967295, bounded by 2147483646
Creating dr for this_6(D)->D.36298._inputs
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: *this_6(D)
	Access function 0: 768
	Access function 1: 0
Creating dr for this_6(D)->D.36298._inputs
analyze_innermost: success.
	base_address: this_6(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: *this_6(D)
	Access function 0: 768
	Access function 1: 0

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:23)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:41, LOOPS:3, CONDITIONS:15, STMTS:359)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_5 })
  {
    <bb 2>:
    _7 = &this_6(D)->D.36298;
    # .MEM_13 = VDEF <.MEM_8(D)>
    Allocator::Allocator (_7, parent_9(D), name_10(D), inputs_11(D), outputs_12(D));
    # .MEM_14 = VDEF <.MEM_13>
    this_6(D)->D.36298.D.35470._vptr.Module = &MEM[(void *)&_ZTV14DenseAllocator + 16B];
    # DEBUG D#716 => &this_6(D)->_request
    # DEBUG this => D#716
    # DEBUG D#260 => &D#716->D.36227
    # DEBUG this => D#260
    # DEBUG D#259 => &D#260->_M_impl
    # DEBUG this => D#259
    # DEBUG this => D#259
    # DEBUG this => D#259
    # .MEM_50 = VDEF <.MEM_14>
    MEM[(struct _Vector_impl *)this_6(D) + 160B]._M_start = 0B;
    # .MEM_51 = VDEF <.MEM_50>
    MEM[(struct _Vector_impl *)this_6(D) + 160B]._M_finish = 0B;
    # .MEM_52 = VDEF <.MEM_51>
    MEM[(struct _Vector_impl *)this_6(D) + 160B]._M_end_of_storage = 0B;
    # DEBUG this => &D.41072
    # DEBUG D#279 => &D.41072.D.41044
    # DEBUG this => D#279
    # DEBUG D#278 => &D#279->_M_impl
    # DEBUG this => D#278
    # DEBUG this => D#278
    # DEBUG this => D#278
    # .MEM_53 = VDEF <.MEM_52>
    MEM[(struct _Vector_impl *)&D.41072]._M_start = 0B;
    # .MEM_54 = VDEF <.MEM_53>
    MEM[(struct _Vector_impl *)&D.41072]._M_finish = 0B;
    # .MEM_55 = VDEF <.MEM_54>
    MEM[(struct _Vector_impl *)&D.41072]._M_end_of_storage = 0B;
    # VUSE <.MEM_55>
    _17 = this_6(D)->D.36298._inputs;
    _18 = (long unsigned int) _17;
    # DEBUG D#1146 => &this_6(D)->_request
    # DEBUG this => D#1146
    # DEBUG __new_size => _18
    # DEBUG __x => &D.41072
    # DEBUG D#89 => D#1146
    # DEBUG D#89 => D#1146
    # DEBUG this => D#89
    # DEBUG this => D#89
    if (_18 != 0)
      goto <bb 3>;
    else
      goto <bb 5>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 bb_22 })
  {
    <bb 3>:
    # DEBUG D#89 => D#1146
    # DEBUG D#89 => D#1146
    # DEBUG this => D#89
    # DEBUG this => D#89
    # DEBUG this => D#1146
    # DEBUG D#103 => &D#1146->D.36227._M_impl._M_finish
    # DEBUG this => NULL
    # DEBUG __i => D#103
    # DEBUG this => D#1146
    # .MEM_108 = VDEF <.MEM_55>
    MEM[(struct __normal_iterator *)&__position] = 0B;
    # DEBUG __n => _18
    # DEBUG __x => &D.41072
    _19 = &this_6(D)->_request;
    # .MEM_109 = VDEF <.MEM_108>
    std::vector<std::vector<Allocator::sRequest> >::_M_fill_insert (_19, __position, _18, &D.41072);

  }
  bb_4 (preds = {bb_3 }, succs = {bb_5 })
  {
    <bb 4>:
    # VUSE <.MEM_109>
    pretmp_2 = MEM[(struct _Vector_base *)&D.41072]._M_impl._M_start;

  }
  bb_5 (preds = {bb_2 bb_4 }, succs = {bb_6 bb_7 })
  {
    <bb 5>:
    # .MEM_96 = PHI <.MEM_55(2), .MEM_109(4)>
    # prephitmp_4 = PHI <0B(2), pretmp_2(4)>
    # DEBUG this => &D.41072
    # DEBUG D#294 => &D.41072.D.41044
    # DEBUG this => D#294
    # DEBUG D#297 => D.41072.D.41044._M_impl._M_finish
    # DEBUG D#296 => D.41072.D.41044._M_impl._M_start
    # DEBUG __first => D#296
    # DEBUG __last => D#297
    # DEBUG D.53863 => NULL
    # DEBUG D#162 => D#296
    # DEBUG D#163 => D#297
    # DEBUG __first => D#162
    # DEBUG __last => D#163
    # DEBUG D#161 => D#163
    # DEBUG D#160 => D#162
    # DEBUG D#158 => D#160
    # DEBUG D#159 => D#161
    # DEBUG D.53119 => D#158
    # DEBUG D.53118 => D#159
    # DEBUG D#295 => &D.41072.D.41044
    # DEBUG this => D#295
    # DEBUG D#293 => D#295->_M_impl._M_end_of_storage
    # DEBUG D#292 => (long int) D#293
    # DEBUG D#1145 => MEM[(struct _Vector_base *)&D.41072]._M_impl._M_start
    # DEBUG D#291 => (long int) D#1145
    # DEBUG D#290 => D#292 - D#291
    # DEBUG D#289 => D#290 /[ex] 16
    # DEBUG D#288 => (long unsigned int) D#289
    # DEBUG this => D#295
    # DEBUG __p => D#1145
    # DEBUG __n => D#288
    if (prephitmp_4 != 0B)
      goto <bb 6>;
    else
      goto <bb 7>;

  }
  bb_6 (preds = {bb_5 }, succs = {bb_7 })
  {
    <bb 6>:
    # DEBUG D#286 => &D#295->_M_impl
    # DEBUG D#284 => D#286
    # DEBUG D#285 => D#288
    # DEBUG __p => D#1145
    # DEBUG __a => D#284
    # DEBUG __n => D#285
    # DEBUG D#283 => D#285
    # DEBUG D#282 => D#284
    # DEBUG D#280 => D#282
    # DEBUG D#281 => D#283
    # DEBUG __p => D#1145
    # DEBUG this => D#280
    # DEBUG D.61033 => D#281
    # .MEM_56 = VDEF <.MEM_96>
    operator delete (prephitmp_4);

  }
  bb_7 (preds = {bb_5 bb_6 }, succs = {bb_8 bb_9 })
  {
    <bb 7>:
    # .MEM_39 = PHI <.MEM_96(5), .MEM_56(6)>
    # DEBUG D#287 => &D#295->_M_impl
    # DEBUG this => D#287
    # DEBUG this => D#287
    # DEBUG this => D#287
    # .MEM_22 = VDEF <.MEM_39>
    D.41072 ={v} {CLOBBER};
    # DEBUG i => 0
    # DEBUG i => 0
    # VUSE <.MEM_22>
    _69 = this_6(D)->D.36298._inputs;
    if (_69 <= 0)
      goto <bb 8>;
    else
      goto <bb 9>;

  }
  bb_8 (preds = {bb_7 bb_16 }, succs = {bb_40 })
  {
    <bb 8>:
    # .MEM_135 = PHI <.MEM_22(7), .MEM_126(16)>

  }
  bb_40 (preds = {bb_8 }, succs = {bb_1 })
  {
    <bb 40>:
    # VUSE <.MEM_135>
    return;

  }
  bb_9 (preds = {bb_7 }, succs = {bb_10 })
  {
    <bb 9>:

  }
  bb_22 (preds = {bb_3 }, succs = {bb_23 bb_24 })
  {
  <L6>:
    # DEBUG this => &D.41072
    # DEBUG D#294 => &D.41072.D.41044
    # DEBUG this => D#294
    # DEBUG D#297 => D.41072.D.41044._M_impl._M_finish
    # DEBUG D#296 => D.41072.D.41044._M_impl._M_start
    # DEBUG __first => D#296
    # DEBUG __last => D#297
    # DEBUG D.53863 => NULL
    # DEBUG D#162 => D#296
    # DEBUG D#163 => D#297
    # DEBUG __first => D#162
    # DEBUG __last => D#163
    # DEBUG D#161 => D#163
    # DEBUG D#160 => D#162
    # DEBUG D#158 => D#160
    # DEBUG D#159 => D#161
    # DEBUG D.53119 => D#158
    # DEBUG D.53118 => D#159
    # DEBUG D#295 => &D.41072.D.41044
    # DEBUG this => D#295
    # DEBUG D#293 => D#295->_M_impl._M_end_of_storage
    # DEBUG D#292 => (long int) D#293
    # VUSE <.MEM_109>
    _48 = MEM[(struct _Vector_base *)&D.41072]._M_impl._M_start;
    # DEBUG D#291 => (long int) _48
    # DEBUG D#290 => D#292 - D#291
    # DEBUG D#289 => D#290 /[ex] 16
    # DEBUG D#288 => (long unsigned int) D#289
    # DEBUG this => D#295
    # DEBUG __p => _48
    # DEBUG __n => D#288
    if (_48 != 0B)
      goto <bb 23>;
    else
      goto <bb 24>;

  }
  bb_23 (preds = {bb_22 }, succs = {bb_24 })
  {
    <bb 23>:
    # DEBUG D#286 => &D#295->_M_impl
    # DEBUG D#284 => D#286
    # DEBUG D#285 => D#288
    # DEBUG __p => _48
    # DEBUG __a => D#284
    # DEBUG __n => D#285
    # DEBUG D#283 => D#285
    # DEBUG D#282 => D#284
    # DEBUG D#280 => D#282
    # DEBUG D#281 => D#283
    # DEBUG __p => _48
    # DEBUG this => D#280
    # DEBUG D.61060 => D#281
    # .MEM_62 = VDEF <.MEM_109>
    operator delete (_48);

  }
  bb_24 (preds = {bb_22 bb_23 }, succs = {bb_25 })
  {
    <bb 24>:
    # .MEM_49 = PHI <.MEM_109(22), .MEM_62(23)>
    # DEBUG D#287 => &D#295->_M_impl
    # DEBUG this => D#287
    # DEBUG this => D#287
    # DEBUG this => D#287
    # .MEM_40 = VDEF <.MEM_49>
    D.41072 ={v} {CLOBBER};
    resx 3

  }
  bb_25 (preds = {bb_24 }, succs = {bb_27 })
  {
  <L10>:
    goto <bb 27> (<L7>);

  }
  bb_26 (preds = {bb_11 }, succs = {bb_27 })
  {
  <L9>:

  }
  bb_27 (preds = {bb_25 bb_26 }, succs = {bb_34 bb_28 })
  {
    # .MEM_5 = PHI <.MEM_40(25), .MEM_113(26)>
  <L7>:
    # DEBUG this => D#1146
    # DEBUG D#302 => &D#1146->D.36227
    # DEBUG this => D#302
    # VUSE <.MEM_5>
    _32 = MEM[(struct vector *)this_6(D) + 160B].D.36227._M_impl._M_finish;
    # VUSE <.MEM_5>
    __first_90 = MEM[(struct vector *)this_6(D) + 160B].D.36227._M_impl._M_start;
    # DEBUG __first => __first_90
    # DEBUG __last => _32
    # DEBUG __first => __first_90
    if (_32 == __first_90)
      goto <bb 34>;
    else
      goto <bb 28>;

  }
  bb_28 (preds = {bb_27 }, succs = {bb_29 })
  {
    <bb 28>:

  }
  bb_33 (preds = {bb_31 }, succs = {bb_38 })
  {
    <bb 33>:

  }
  bb_38 (preds = {bb_33 }, succs = {bb_34 })
  {
    <bb 38>:
    # VUSE <.MEM_119>
    pretmp_61 = MEM[(struct _Vector_base *)this_6(D) + 160B]._M_impl._M_start;

  }
  bb_34 (preds = {bb_38 bb_27 }, succs = {bb_35 bb_36 })
  {
    <bb 34>:
    # .MEM_95 = PHI <.MEM_119(38), .MEM_5(27)>
    # prephitmp_106 = PHI <pretmp_61(38), __first_90(27)>
    # DEBUG D#303 => &D#1146->D.36227
    # DEBUG this => D#303
    # DEBUG D#277 => D#303->_M_impl._M_end_of_storage
    # DEBUG D#276 => (long int) D#277
    # DEBUG D#1144 => MEM[(struct _Vector_base *)this_6(D) + 160B]._M_impl._M_start
    # DEBUG D#275 => (long int) D#1144
    # DEBUG D#274 => D#276 - D#275
    # DEBUG D#273 => D#274 /[ex] 24
    # DEBUG D#270 => D#303
    # DEBUG D#271 => (long unsigned int) D#273
    # DEBUG __p => D#1144
    # DEBUG this => D#270
    # DEBUG __n => D#271
    # DEBUG D#269 => D#271
    # DEBUG D#268 => D#270
    if (prephitmp_106 != 0B)
      goto <bb 35>;
    else
      goto <bb 36>;

  }
  bb_35 (preds = {bb_34 }, succs = {bb_36 })
  {
    <bb 35>:
    # DEBUG D#267 => &D#268->_M_impl
    # DEBUG D#265 => D#267
    # DEBUG D#266 => D#269
    # DEBUG __p => D#1144
    # DEBUG __a => D#265
    # DEBUG __n => D#266
    # DEBUG D#264 => D#266
    # DEBUG D#263 => D#265
    # DEBUG D#261 => D#263
    # DEBUG D#262 => D#264
    # DEBUG __p => D#1144
    # DEBUG this => D#261
    # DEBUG D.66845 => D#262
    # .MEM_120 = VDEF <.MEM_95>
    operator delete (prephitmp_106);

  }
  bb_36 (preds = {bb_34 bb_35 }, succs = {bb_37 })
  {
    <bb 36>:
    # .MEM_100 = PHI <.MEM_95(34), .MEM_120(35)>
    # DEBUG D#272 => &D#303->_M_impl
    # DEBUG this => D#272
    # DEBUG this => D#272
    # DEBUG this => D#272
    # .MEM_125 = VDEF <.MEM_100>
    MEM[(struct  &)this_6(D) + 160] ={v} {CLOBBER};
    resx 2

  }
  bb_37 (preds = {bb_36 }, succs = {})
  {
  <L8>:
    # .MEM_42 = VDEF <.MEM_125>
    Allocator::~Allocator (_7);
    resx 1

  }
  loop_4 (header = 29, latch = 32, niter = )
  {
    bb_29 (preds = {bb_28 bb_32 }, succs = {bb_30 bb_31 })
    {
      <bb 29>:
      # __first_77 = PHI <__first_90(28), __first_93(32)>
      # .MEM_79 = PHI <.MEM_5(28), .MEM_119(32)>
      # DEBUG __first => __first_77
      # DEBUG __r => __first_77
      # DEBUG __pointer => NULL
      # DEBUG this => NULL
      # DEBUG this => D#294
      # DEBUG __first => D#296
      # DEBUG __last => D#297
      # DEBUG D.53863 => NULL
      # DEBUG D#162 => D#296
      # DEBUG D#163 => D#297
      # DEBUG __first => D#162
      # DEBUG __last => D#163
      # DEBUG D#161 => D#163
      # DEBUG D#160 => D#162
      # DEBUG D#158 => D#160
      # DEBUG D#159 => D#161
      # DEBUG D.53119 => D#158
      # DEBUG D.53118 => D#159
      # DEBUG this => D#295
      # DEBUG D#293 => D#295->_M_impl._M_end_of_storage
      # DEBUG D#292 => (long int) D#293
      # VUSE <.MEM_79>
      _92 = MEM[(struct _Vector_base *)__first_77]._M_impl._M_start;
      # DEBUG D#291 => (long int) _92
      # DEBUG D#290 => D#292 - D#291
      # DEBUG D#289 => D#290 /[ex] 16
      # DEBUG D#288 => (long unsigned int) D#289
      # DEBUG this => D#295
      # DEBUG __p => _92
      # DEBUG __n => D#288
      if (_92 != 0B)
        goto <bb 30>;
      else
        goto <bb 31>;

    }
    bb_30 (preds = {bb_29 }, succs = {bb_31 })
    {
      <bb 30>:
      # DEBUG D#286 => &D#295->_M_impl
      # DEBUG D#284 => D#286
      # DEBUG D#285 => D#288
      # DEBUG __p => _92
      # DEBUG __a => D#284
      # DEBUG __n => D#285
      # DEBUG D#283 => D#285
      # DEBUG D#282 => D#284
      # DEBUG D#280 => D#282
      # DEBUG D#281 => D#283
      # DEBUG __p => _92
      # DEBUG this => D#280
      # DEBUG D.66831 => D#281
      # .MEM_114 = VDEF <.MEM_79>
      operator delete (_92);

    }
    bb_31 (preds = {bb_29 bb_30 }, succs = {bb_33 bb_32 })
    {
      <bb 31>:
      # .MEM_99 = PHI <.MEM_79(29), .MEM_114(30)>
      # DEBUG D#287 => &D#295->_M_impl
      # DEBUG this => D#287
      # DEBUG this => D#287
      # DEBUG this => D#287
      # .MEM_119 = VDEF <.MEM_99>
      MEM[(struct  &)__first_77] ={v} {CLOBBER};
      __first_93 = __first_77 + 24;
      # DEBUG __first => __first_93
      # DEBUG __first => __first_93
      if (_32 == __first_93)
        goto <bb 33>;
      else
        goto <bb 32>;

    }
    bb_32 (preds = {bb_31 }, succs = {bb_29 })
    {
      <bb 32>:
      goto <bb 29>;

    }
  }
  loop_1 (header = 10, latch = 17, niter = , upper_bound = 2147483647)
  {
    bb_10 (preds = {bb_9 bb_17 }, succs = {bb_11 bb_13 })
    {
      <bb 10>:
      # i_102 = PHI <0(9), i_38(17)>
      # .MEM_104 = PHI <.MEM_22(9), .MEM_126(17)>
      # DEBUG i => i_102
      # VUSE <.MEM_104>
      _28 = this_6(D)->D.36298._outputs;
      _29 = (long unsigned int) _28;
      _30 = (long unsigned int) i_102;
      # DEBUG D#714 => &this_6(D)->_request
      # VUSE <.MEM_104>
      _43 = MEM[(struct vector * *)this_6(D) + 160B];
      # DEBUG D#36 => D#714
      # DEBUG __n => _30
      # DEBUG this => D#36
      _16 = _30 * 24;
      _35 = _43 + _16;
      # DEBUG this => _35
      # DEBUG __new_size => _29
      # .MEM_24 = VDEF <.MEM_104>
      MEM[(struct sRequest *)&__x] = 0;
      # .MEM_98 = VDEF <.MEM_24>
      MEM[(struct sRequest *)&__x + 4B] = 0;
      # .MEM_91 = VDEF <.MEM_98>
      MEM[(struct sRequest *)&__x + 8B] = 0;
      # .MEM_71 = VDEF <.MEM_91>
      MEM[(struct sRequest *)&__x + 12B] = 0;
      # VUSE <.MEM_71>
      _20 = MEM[(struct sRequest * *)_35];
      # DEBUG D#88 => _35
      # VUSE <.MEM_71>
      _81 = MEM[(struct sRequest * *)_35 + 8B];
      # DEBUG D#88 => _35
      # DEBUG this => D#88
      # DEBUG this => D#88
      _82 = (long int) _81;
      _83 = (long int) _20;
      _84 = _82 - _83;
      _85 = _84 /[ex] 16;
      _86 = (size_type) _85;
      if (_29 > _86)
        goto <bb 11>;
      else
        goto <bb 13>;

    }
    bb_11 (preds = {bb_10 }, succs = {bb_12 bb_26 })
    {
      <bb 11>:
      # DEBUG D#88 => _35
      # DEBUG D#88 => _35
      # DEBUG this => D#88
      # DEBUG this => D#88
      _87 = _29 - _86;
      # DEBUG this => _35
      # DEBUG D#104 => &_35->D.41044._M_impl._M_finish
      # DEBUG this => NULL
      # DEBUG __i => D#104
      # DEBUG this => _35
      # .MEM_112 = VDEF <.MEM_71>
      MEM[(struct __normal_iterator *)&__position] = _81;
      # DEBUG __n => _87
      # DEBUG __x => &__x
      # .MEM_113 = VDEF <.MEM_112>
      std::vector<Allocator::sRequest>::_M_fill_insert (_35, __position, _87, &__x);

    }
    bb_12 (preds = {bb_11 }, succs = {bb_15 })
    {
      <bb 12>:
      # VUSE <.MEM_113>
      pretmp_72 = this_6(D)->D.36298._outputs;
      goto <bb 15>;

    }
    bb_13 (preds = {bb_10 }, succs = {bb_14 bb_15 })
    {
      <bb 13>:
      # DEBUG D#88 => _35
      # DEBUG D#88 => _35
      # DEBUG this => D#88
      # DEBUG this => D#88
      if (_29 < _86)
        goto <bb 14>;
      else
        goto <bb 15>;

    }
    bb_14 (preds = {bb_13 }, succs = {bb_15 })
    {
      <bb 14>:
      _88 = _29 * 16;
      _89 = _20 + _88;
      # DEBUG D#167 => _35
      # DEBUG __pos => _89
      # DEBUG D#166 => D#167
      # DEBUG this => D#166
      # DEBUG D#164 => &D#166->D.41044
      # DEBUG this => D#164
      # DEBUG D#165 => D#166->D.41044._M_impl._M_finish
      # DEBUG __first => _89
      # DEBUG __last => D#165
      # DEBUG D.53135 => NULL
      # DEBUG D#162 => _89
      # DEBUG D#163 => D#165
      # DEBUG __first => D#162
      # DEBUG __last => D#163
      # DEBUG D#161 => D#163
      # DEBUG D#160 => D#162
      # DEBUG D#158 => D#160
      # DEBUG D#159 => D#161
      # DEBUG D.53119 => D#158
      # DEBUG D.53118 => D#159
      # .MEM_111 = VDEF <.MEM_71>
      MEM[(struct sRequest * *)_35 + 8B] = _89;

    }
    bb_15 (preds = {bb_12 bb_14 bb_13 }, succs = {bb_16 bb_18 })
    {
      <bb 15>:
      # .MEM_76 = PHI <.MEM_113(12), .MEM_111(14), .MEM_71(13)>
      # prephitmp_73 = PHI <pretmp_72(12), _28(14), _28(13)>
      # DEBUG j => 0
      if (prephitmp_73 <= 0)
        goto <bb 16>;
      else
        goto <bb 18>;

    }
    bb_16 (preds = {bb_15 bb_39 }, succs = {bb_8 bb_17 })
    {
      <bb 16>:
      # .MEM_126 = PHI <.MEM_76(15), .MEM_80(39)>
      i_38 = i_102 + 1;
      # DEBUG i => i_38
      # DEBUG i => i_38
      # VUSE <.MEM_126>
      _23 = this_6(D)->D.36298._inputs;
      if (_23 <= i_38)
        goto <bb 8>;
      else
        goto <bb 17>;

    }
    bb_17 (preds = {bb_16 }, succs = {bb_10 })
    {
      <bb 17>:
      goto <bb 10>;

    }
    bb_18 (preds = {bb_15 }, succs = {bb_19 })
    {
      <bb 18>:
      # VUSE <.MEM_76>
      pretmp_130 = MEM[(struct vector * *)this_6(D) + 160B];
      pretmp_132 = pretmp_130 + _16;
      # VUSE <.MEM_76>
      pretmp_133 = MEM[(struct sRequest * *)pretmp_132];

    }
    bb_20 (preds = {bb_19 }, succs = {bb_39 })
    {
      <bb 20>:
      # .MEM_80 = PHI <.MEM_36(19)>

    }
    bb_39 (preds = {bb_20 }, succs = {bb_16 })
    {
      <bb 39>:
      goto <bb 16>;

    }
    loop_2 (header = 19, latch = 21, niter = (unsigned int) prephitmp_73 + 4294967295, upper_bound = 2147483646)
    {
      bb_19 (preds = {bb_18 bb_21 }, succs = {bb_20 bb_21 })
      {
        <bb 19>:
        # j_101 = PHI <0(18), j_37(21)>
        # .MEM_103 = PHI <.MEM_76(18), .MEM_36(21)>
        # DEBUG j => j_101
        _34 = (long unsigned int) j_101;
        # DEBUG D#715 => &this_6(D)->_request
        # DEBUG D#36 => D#715
        # DEBUG __n => _30
        # DEBUG this => D#36
        # DEBUG __n => _34
        # DEBUG this => D#37
        _31 = _34 * 16;
        _46 = pretmp_133 + _31;
        # .MEM_36 = VDEF <.MEM_103>
        _46->label = -1;
        j_37 = j_101 + 1;
        # DEBUG j => j_37
        # DEBUG j => j_37
        if (j_37 >= prephitmp_73)
          goto <bb 20>;
        else
          goto <bb 21>;

      }
      bb_21 (preds = {bb_19 }, succs = {bb_19 })
      {
        <bb 21>:
        goto <bb 19>;

      }
    }
  }
}

Pass statistics:
----------------

DenseAllocator::DenseAllocator(Module*, const string&, int, int) (struct DenseAllocatorD.35479 * const thisD.36293, struct ModuleD.29751 * parentD.36294, const struct stringD.2845 & nameD.36295, intD.9 inputsD.36296, intD.9 outputsD.36297)
Eh tree:
   1 cleanup land:{1,<L8>}
     2 cleanup land:{4,<L9>},{2,<L10>}
       3 cleanup land:{3,<L6>}
{
  intD.9 SR.1791D.66854;
  intD.9 SR.1790D.66853;
  intD.9 SR.1789D.66852;
  intD.9 SR.1788D.66851;
  struct vectorD.35482 * __firstD.66814;
  struct iteratorD.40612 __positionD.66807;
  struct value_typeD.40607 __xD.66802;
  struct iteratorD.35795 __positionD.66796;
  struct vectorD.35482 * __posD.66769;
  intD.9 jD.41076;
  intD.9 iD.41073;
  struct sRequestD.35378 D.48080;
  struct value_typeD.35790 D.41072;
  struct sRequestD.35378 * pretmp_2;
  struct sRequestD.35378 * prephitmp_4;
  struct AllocatorD.34627 * _7;
  long unsigned intD.14 _16;
  intD.9 _17;
  long unsigned intD.14 _18;
  struct vectorD.35484 * _19;
  struct sRequestD.35378 * const _20;
  intD.9 _23;
  intD.9 _28;
  long unsigned intD.14 _29;
  long unsigned intD.14 _30;
  long unsigned intD.14 _31;
  struct vectorD.35482 * _32;
  long unsigned intD.14 _34;
  struct vectorD.35482 & _35;
  struct vectorD.35482 * _43;
  struct sRequestD.35378 & _46;
  struct sRequestD.35378 * _48;
  struct vectorD.35482 * pretmp_61;
  intD.9 _69;
  const intD.9 pretmp_72;
  const intD.9 prephitmp_73;
  struct sRequestD.35378 * const _81;
  long intD.12 _82;
  long intD.12 _83;
  long intD.12 _84;
  long intD.12 _85;
  size_typeD.40620 _86;
  long unsigned intD.14 _87;
  long unsigned intD.14 _88;
  struct sRequestD.35378 * _89;
  struct sRequestD.35378 * _92;
  struct vectorD.35482 * prephitmp_106;
  struct vectorD.35482 * pretmp_130;
  struct vectorD.35482 & pretmp_132;
  struct sRequestD.35378 * pretmp_133;

;;   basic block 2, loop depth 0, count 0, freq 42, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  _7 = &this_6(D)->D.36298;
  # .MEM_13 = VDEF <.MEM_8(D)>
  # USE = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  # CLB = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  _ZN9AllocatorC2EP6ModuleRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiiD.35464 (_7, parent_9(D), name_10(D), inputs_11(D), outputs_12(D));
  # .MEM_14 = VDEF <.MEM_13>
  this_6(D)->D.36298.D.35470._vptr.ModuleD.30546 = &MEM[(voidD.45 *)&_ZTV14DenseAllocatorD.36301 + 16B];
  # DEBUG D#716ptD.0 => &this_6(D)->_requestD.36229
  # DEBUG thisD.61020 => D#716ptD.0
  # DEBUG D#260ptD.0 => &D#716ptD.0->D.36227
  # DEBUG thisD.61021 => D#260ptD.0
  # DEBUG D#259ptD.0 => &D#260ptD.0->_M_implD.35718
  # DEBUG thisD.61022 => D#259ptD.0
  # DEBUG thisD.53724 => D#259ptD.0
  # DEBUG thisD.53722 => D#259ptD.0
  # .MEM_50 = VDEF <.MEM_14>
  MEM[(struct _Vector_implD.35695 *)this_6(D) + 160B]._M_startD.35720 = 0B;
  # .MEM_51 = VDEF <.MEM_50>
  MEM[(struct _Vector_implD.35695 *)this_6(D) + 160B]._M_finishD.35721 = 0B;
  # .MEM_52 = VDEF <.MEM_51>
  MEM[(struct _Vector_implD.35695 *)this_6(D) + 160B]._M_end_of_storageD.35722 = 0B;
  # DEBUG thisD.61017 => &D.41072
  # DEBUG D#279ptD.0 => &D.41072.D.41044
  # DEBUG thisD.61018 => D#279ptD.0
  # DEBUG D#278ptD.0 => &D#279ptD.0->_M_implD.40535
  # DEBUG thisD.61019 => D#278ptD.0
  # DEBUG thisD.53795 => D#278ptD.0
  # DEBUG thisD.53793 => D#278ptD.0
  # .MEM_53 = VDEF <.MEM_52>
  MEM[(struct _Vector_implD.40512 *)&D.41072]._M_startD.40537 = 0B;
  # .MEM_54 = VDEF <.MEM_53>
  MEM[(struct _Vector_implD.40512 *)&D.41072]._M_finishD.40538 = 0B;
  # .MEM_55 = VDEF <.MEM_54>
  MEM[(struct _Vector_implD.40512 *)&D.41072]._M_end_of_storageD.40539 = 0B;
  # VUSE <.MEM_55>
  _17 = this_6(D)->D.36298._inputsD.34629;
  # RANGE ~[2147483648, 18446744071562067967]
  _18 = (long unsigned intD.14) _17;
  # DEBUG D#1146ptD.0 => &this_6(D)->_requestD.36229
  # DEBUG thisD.66765 => D#1146ptD.0
  # DEBUG __new_sizeD.66766 => _18
  # DEBUG __xD.66767 => &D.41072
  # DEBUG D#89ptD.0 => D#1146ptD.0
  # DEBUG D#89ptD.0 => D#1146ptD.0
  # DEBUG thisD.66798 => D#89ptD.0
  # DEBUG thisD.66799 => D#89ptD.0
  if (_18 != 0)
    goto <bb 3>;
  else
    goto <bb 5>;
;;    succ:       3 [20.7%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [79.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 9, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [20.7%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#89ptD.0 => D#1146ptD.0
  # DEBUG D#89ptD.0 => D#1146ptD.0
  # DEBUG thisD.60355 => D#89ptD.0
  # DEBUG thisD.60354 => D#89ptD.0
  # DEBUG thisD.60348 => D#1146ptD.0
  # DEBUG D#103ptD.0 => &D#1146ptD.0->D.36227._M_implD.35718._M_finishD.35721
  # DEBUG thisD.60350 => NULL
  # DEBUG __iD.60349 => D#103ptD.0
  # DEBUG thisD.66797 => D#1146ptD.0
  # .MEM_108 = VDEF <.MEM_55>
  MEM[(struct __normal_iteratorD.35796 *)&__positionD.66796] = 0B;
  # DEBUG __nD.66795 => _18
  # DEBUG __xD.66794 => &D.41072
  # PT = nonlocal 
  _19 = &this_6(D)->_requestD.36229;
  [LP 3] # .MEM_109 = VDEF <.MEM_108>
  # USE = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  # CLB = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  _ZNSt6vectorIS_IN9Allocator8sRequestESaIS1_EESaIS3_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS3_S5_EEmRKS3_D.36150 (_19, __positionD.66796, _18, &D.41072);
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                22 (EH,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 9, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_109>
  pretmp_2 = MEM[(struct _Vector_baseD.40302 *)&D.41072]._M_implD.40535._M_startD.40537;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 42, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       2 [79.3%]  (FALSE_VALUE,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_96 = PHI <.MEM_55(2), .MEM_109(4)>
  # PT = nonlocal escaped null 
  # prephitmp_4 = PHI <0B(2), pretmp_2(4)>
  # DEBUG thisD.61023 => &D.41072
  # DEBUG D#294ptD.0 => &D.41072.D.41044
  # DEBUG thisD.53864 => D#294ptD.0
  # DEBUG D#297ptD.0 => D.41072.D.41044._M_implD.40535._M_finishD.40538
  # DEBUG D#296ptD.0 => D.41072.D.41044._M_implD.40535._M_startD.40537
  # DEBUG __firstD.53861 => D#296ptD.0
  # DEBUG __lastD.53862 => D#297ptD.0
  # DEBUG D.53863 => NULL
  # DEBUG D#162ptD.0 => D#296ptD.0
  # DEBUG D#163ptD.0 => D#297ptD.0
  # DEBUG __firstD.53130 => D#162ptD.0
  # DEBUG __lastD.53129 => D#163ptD.0
  # DEBUG D#161ptD.0 => D#163ptD.0
  # DEBUG D#160ptD.0 => D#162ptD.0
  # DEBUG D#158ptD.0 => D#160ptD.0
  # DEBUG D#159ptD.0 => D#161ptD.0
  # DEBUG D.53119 => D#158ptD.0
  # DEBUG D.53118 => D#159ptD.0
  # DEBUG D#295ptD.0 => &D.41072.D.41044
  # DEBUG thisD.61024 => D#295ptD.0
  # DEBUG D#293ptD.0 => D#295ptD.0->_M_implD.40535._M_end_of_storageD.40539
  # DEBUG D#292ptD.0 => (long intD.12) D#293ptD.0
  # DEBUG D#1145ptD.0 => MEM[(struct _Vector_baseD.40302 *)&D.41072]._M_implD.40535._M_startD.40537
  # DEBUG D#291ptD.0 => (long intD.12) D#1145ptD.0
  # DEBUG D#290ptD.0 => D#292ptD.0 - D#291ptD.0
  # DEBUG D#289ptD.0 => D#290ptD.0 /[ex] 16
  # DEBUG D#288ptD.0 => (long unsigned intD.14) D#289ptD.0
  # DEBUG thisD.61027 => D#295ptD.0
  # DEBUG __pD.61026 => D#1145ptD.0
  # DEBUG __nD.61025 => D#288ptD.0
  if (prephitmp_4 != 0B)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 30, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#286ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG D#284ptD.0 => D#286ptD.0
  # DEBUG D#285ptD.0 => D#288ptD.0
  # DEBUG __pD.61031 => D#1145ptD.0
  # DEBUG __aD.61029 => D#284ptD.0
  # DEBUG __nD.61030 => D#285ptD.0
  # DEBUG D#283ptD.0 => D#285ptD.0
  # DEBUG D#282ptD.0 => D#284ptD.0
  # DEBUG D#280ptD.0 => D#282ptD.0
  # DEBUG D#281ptD.0 => D#283ptD.0
  # DEBUG __pD.61034 => D#1145ptD.0
  # DEBUG thisD.61032 => D#280ptD.0
  # DEBUG D.61033 => D#281ptD.0
  # .MEM_56 = VDEF <.MEM_96>
  # USE = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  # CLB = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  _ZdlPvD.2766 (prephitmp_4);
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 42, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       5 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_39 = PHI <.MEM_96(5), .MEM_56(6)>
  # DEBUG D#287ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG thisD.61035 => D#287ptD.0
  # DEBUG thisD.61036 => D#287ptD.0
  # DEBUG thisD.61037 => D#287ptD.0
  # .MEM_22 = VDEF <.MEM_39>
  D.41072 ={v} {CLOBBER};
  # DEBUG iD.41073 => 0
  # DEBUG iD.41073 => 0
  # VUSE <.MEM_22>
  _69 = this_6(D)->D.36298._inputsD.34629;
  if (_69 <= 0)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 43, maybe hot
;;    prev block 7, next block 40, flags: (NEW, REACHABLE)
;;    pred:       7 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_135 = PHI <.MEM_22(7), .MEM_126(16)>
;;    succ:       40 [100.0%]  (FALLTHRU)

;;   basic block 40, loop depth 0, count 0, freq 43, maybe hot
;;    prev block 8, next block 9, flags: (NEW)
;;    pred:       8 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_135>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 9, loop depth 0, count 0, freq 40, maybe hot
;;    prev block 40, next block 10, flags: (NEW)
;;    pred:       7 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # i_102 = PHI <0(9), i_38(17)>
  # .MEM_104 = PHI <.MEM_22(9), .MEM_126(17)>
  # DEBUG iD.41073 => i_102
  # VUSE <.MEM_104>
  _28 = this_6(D)->D.36298._outputsD.34630;
  # RANGE ~[2147483648, 18446744071562067967]
  _29 = (long unsigned intD.14) _28;
  # RANGE [0, 18446744073709551615]
  _30 = (long unsigned intD.14) i_102;
  # DEBUG D#714ptD.0 => &this_6(D)->_requestD.36229
  # VUSE <.MEM_104>
  # PT = nonlocal escaped 
  _43 = MEM[(struct vectorD.35482 * *)this_6(D) + 160B];
  # DEBUG D#36ptD.0 => D#714ptD.0
  # DEBUG __nD.61039 => _30
  # DEBUG thisD.61040 => D#36ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551608
  _16 = _30 * 24;
  # PT = nonlocal escaped 
  _35 = _43 + _16;
  # DEBUG thisD.66800 => _35
  # DEBUG __new_sizeD.66801 => _29
  # .MEM_24 = VDEF <.MEM_104>
  MEM[(struct sRequestD.35378 *)&__xD.66802] = 0;
  # .MEM_98 = VDEF <.MEM_24>
  MEM[(struct sRequestD.35378 *)&__xD.66802 + 4B] = 0;
  # .MEM_91 = VDEF <.MEM_98>
  MEM[(struct sRequestD.35378 *)&__xD.66802 + 8B] = 0;
  # .MEM_71 = VDEF <.MEM_91>
  MEM[(struct sRequestD.35378 *)&__xD.66802 + 12B] = 0;
  # VUSE <.MEM_71>
  # PT = nonlocal escaped 
  _20 = MEM[(struct sRequestD.35378 * *)_35];
  # DEBUG D#88ptD.0 => _35
  # VUSE <.MEM_71>
  # PT = nonlocal escaped 
  _81 = MEM[(struct sRequestD.35378 * *)_35 + 8B];
  # DEBUG D#88ptD.0 => _35
  # DEBUG thisD.66809 => D#88ptD.0
  # DEBUG thisD.66810 => D#88ptD.0
  _82 = (long intD.12) _81;
  _83 = (long intD.12) _20;
  _84 = _82 - _83;
  # RANGE [-576460752303423488, 576460752303423487]
  _85 = _84 /[ex] 16;
  # RANGE ~[576460752303423488, 17870283321406128127]
  _86 = (size_typeD.40620) _85;
  if (_29 > _86)
    goto <bb 11>;
  else
    goto <bb 13>;
;;    succ:       11 [20.7%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [79.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 186, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [20.7%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#88ptD.0 => _35
  # DEBUG D#88ptD.0 => _35
  # DEBUG thisD.59458 => D#88ptD.0
  # DEBUG thisD.59457 => D#88ptD.0
  # RANGE [1, 18446744073709551615]
  _87 = _29 - _86;
  # DEBUG thisD.59451 => _35
  # DEBUG D#104ptD.0 => &_35->D.41044._M_implD.40535._M_finishD.40538
  # DEBUG thisD.59453 => NULL
  # DEBUG __iD.59452 => D#104ptD.0
  # DEBUG thisD.66808 => _35
  # .MEM_112 = VDEF <.MEM_71>
  MEM[(struct __normal_iteratorD.40613 *)&__positionD.66807] = _81;
  # DEBUG __nD.66806 => _87
  # DEBUG __xD.66805 => &__xD.66802
  [LP 4] # .MEM_113 = VDEF <.MEM_112>
  # USE = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  # CLB = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  _ZNSt6vectorIN9Allocator8sRequestESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEmRKS1_D.40967 (_35, __positionD.66807, _87, &__xD.66802);
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                26 (EH,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 186, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_113>
  pretmp_72 = this_6(D)->D.36298._outputsD.34630;
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 714, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       10 [79.3%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#88ptD.0 => _35
  # DEBUG D#88ptD.0 => _35
  # DEBUG thisD.59463 => D#88ptD.0
  # DEBUG thisD.59462 => D#88ptD.0
  if (_29 < _86)
    goto <bb 14>;
  else
    goto <bb 15>;
;;    succ:       14 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 435, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _88 = _29 * 16;
  # PT = nonlocal escaped 
  _89 = _20 + _88;
  # DEBUG D#167ptD.0 => _35
  # DEBUG __posD.66804 => _89
  # DEBUG D#166ptD.0 => D#167ptD.0
  # DEBUG thisD.66803 => D#166ptD.0
  # DEBUG D#164ptD.0 => &D#166ptD.0->D.41044
  # DEBUG thisD.53143 => D#164ptD.0
  # DEBUG D#165ptD.0 => D#166ptD.0->D.41044._M_implD.40535._M_finishD.40538
  # DEBUG __firstD.53133 => _89
  # DEBUG __lastD.53134 => D#165ptD.0
  # DEBUG D.53135 => NULL
  # DEBUG D#162ptD.0 => _89
  # DEBUG D#163ptD.0 => D#165ptD.0
  # DEBUG __firstD.53130 => D#162ptD.0
  # DEBUG __lastD.53129 => D#163ptD.0
  # DEBUG D#161ptD.0 => D#163ptD.0
  # DEBUG D#160ptD.0 => D#162ptD.0
  # DEBUG D#158ptD.0 => D#160ptD.0
  # DEBUG D#159ptD.0 => D#161ptD.0
  # DEBUG D.53119 => D#158ptD.0
  # DEBUG D.53118 => D#159ptD.0
  # .MEM_111 = VDEF <.MEM_71>
  MEM[(struct sRequestD.35378 * *)_35 + 8B] = _89;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       12 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                13 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_76 = PHI <.MEM_113(12), .MEM_111(14), .MEM_71(13)>
  # prephitmp_73 = PHI <pretmp_72(12), _28(14), _28(13)>
  # DEBUG jD.41076 => 0
  if (prephitmp_73 <= 0)
    goto <bb 16>;
  else
    goto <bb 18>;
;;    succ:       16 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_126 = PHI <.MEM_76(15), .MEM_80(39)>
  i_38 = i_102 + 1;
  # DEBUG iD.41073 => i_38
  # DEBUG iD.41073 => i_38
  # VUSE <.MEM_126>
  _23 = this_6(D)->D.36298._inputsD.34629;
  if (_23 <= i_38)
    goto <bb 8>;
  else
    goto <bb 17>;
;;    succ:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 860, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 17, next block 19, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_76>
  # PT = nonlocal escaped 
  pretmp_130 = MEM[(struct vectorD.35482 * *)this_6(D) + 160B];
  # PT = nonlocal escaped 
  pretmp_132 = pretmp_130 + _16;
  # VUSE <.MEM_76>
  # PT = nonlocal escaped 
  pretmp_133 = MEM[(struct sRequestD.35378 * *)pretmp_132];
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       18 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                21 [100.0%]  (FALLTHRU,EXECUTABLE)
  # j_101 = PHI <0(18), j_37(21)>
  # .MEM_103 = PHI <.MEM_76(18), .MEM_36(21)>
  # DEBUG jD.41076 => j_101
  # RANGE [0, 18446744073709551615]
  _34 = (long unsigned intD.14) j_101;
  # DEBUG D#715ptD.0 => &this_6(D)->_requestD.36229
  # DEBUG D#36ptD.0 => D#715ptD.0
  # DEBUG __nD.61047 => _30
  # DEBUG thisD.61048 => D#36ptD.0
  # DEBUG __nD.61043 => _34
  # DEBUG thisD.61044 => D#37ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _31 = _34 * 16;
  # PT = nonlocal escaped 
  _46 = pretmp_133 + _31;
  # .MEM_36 = VDEF <.MEM_103>
  _46->labelD.35381 = -1;
  j_37 = j_101 + 1;
  # DEBUG jD.41076 => j_37
  # DEBUG jD.41076 => j_37
  if (j_37 >= prephitmp_73)
    goto <bb 20>;
  else
    goto <bb 21>;
;;    succ:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 19, next block 39, flags: (NEW)
;;    pred:       19 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_80 = PHI <.MEM_36(19)>
;;    succ:       39 [100.0%]  (FALLTHRU)

;;   basic block 39, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 20, next block 21, flags: (NEW)
;;    pred:       20 [100.0%]  (FALLTHRU)
  goto <bb 16>;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 2, count 0, freq 8281, maybe hot
;;    prev block 39, next block 22, flags: (NEW)
;;    pred:       19 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 19>;
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       3 (EH,EXECUTABLE)
<L6>: [LP 3]
  # DEBUG thisD.61050 => &D.41072
  # DEBUG D#294ptD.0 => &D.41072.D.41044
  # DEBUG thisD.53864 => D#294ptD.0
  # DEBUG D#297ptD.0 => D.41072.D.41044._M_implD.40535._M_finishD.40538
  # DEBUG D#296ptD.0 => D.41072.D.41044._M_implD.40535._M_startD.40537
  # DEBUG __firstD.53861 => D#296ptD.0
  # DEBUG __lastD.53862 => D#297ptD.0
  # DEBUG D.53863 => NULL
  # DEBUG D#162ptD.0 => D#296ptD.0
  # DEBUG D#163ptD.0 => D#297ptD.0
  # DEBUG __firstD.53130 => D#162ptD.0
  # DEBUG __lastD.53129 => D#163ptD.0
  # DEBUG D#161ptD.0 => D#163ptD.0
  # DEBUG D#160ptD.0 => D#162ptD.0
  # DEBUG D#158ptD.0 => D#160ptD.0
  # DEBUG D#159ptD.0 => D#161ptD.0
  # DEBUG D.53119 => D#158ptD.0
  # DEBUG D.53118 => D#159ptD.0
  # DEBUG D#295ptD.0 => &D.41072.D.41044
  # DEBUG thisD.61051 => D#295ptD.0
  # DEBUG D#293ptD.0 => D#295ptD.0->_M_implD.40535._M_end_of_storageD.40539
  # DEBUG D#292ptD.0 => (long intD.12) D#293ptD.0
  # VUSE <.MEM_109>
  # PT = nonlocal escaped null 
  _48 = MEM[(struct _Vector_baseD.40302 *)&D.41072]._M_implD.40535._M_startD.40537;
  # DEBUG D#291ptD.0 => (long intD.12) _48
  # DEBUG D#290ptD.0 => D#292ptD.0 - D#291ptD.0
  # DEBUG D#289ptD.0 => D#290ptD.0 /[ex] 16
  # DEBUG D#288ptD.0 => (long unsigned intD.14) D#289ptD.0
  # DEBUG thisD.61054 => D#295ptD.0
  # DEBUG __pD.61053 => _48
  # DEBUG __nD.61052 => D#288ptD.0
  if (_48 != 0B)
    goto <bb 23>;
  else
    goto <bb 24>;
;;    succ:       23 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       22 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#286ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG D#284ptD.0 => D#286ptD.0
  # DEBUG D#285ptD.0 => D#288ptD.0
  # DEBUG __pD.61058 => _48
  # DEBUG __aD.61056 => D#284ptD.0
  # DEBUG __nD.61057 => D#285ptD.0
  # DEBUG D#283ptD.0 => D#285ptD.0
  # DEBUG D#282ptD.0 => D#284ptD.0
  # DEBUG D#280ptD.0 => D#282ptD.0
  # DEBUG D#281ptD.0 => D#283ptD.0
  # DEBUG __pD.61061 => _48
  # DEBUG thisD.61059 => D#280ptD.0
  # DEBUG D.61060 => D#281ptD.0
  # .MEM_62 = VDEF <.MEM_109>
  # USE = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  # CLB = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  _ZdlPvD.2766 (_48);
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       22 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                23 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_49 = PHI <.MEM_109(22), .MEM_62(23)>
  # DEBUG D#287ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG thisD.61062 => D#287ptD.0
  # DEBUG thisD.61063 => D#287ptD.0
  # DEBUG thisD.61064 => D#287ptD.0
  # .MEM_40 = VDEF <.MEM_49>
  D.41072 ={v} {CLOBBER};
  [LP 2] resx 3
;;    succ:       25 (EH,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 24, next block 26, flags: (NEW)
;;    pred:       24 (EH,EXECUTABLE)
<L10>: [LP 2]
  goto <bb 27> (<L7>);
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       11 (EH,EXECUTABLE)
<L9>: [LP 4]
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_5 = PHI <.MEM_40(25), .MEM_113(26)>
<L7>:
  # DEBUG thisD.66811 => D#1146ptD.0
  # DEBUG D#302ptD.0 => &D#1146ptD.0->D.36227
  # DEBUG thisD.54069 => D#302ptD.0
  # VUSE <.MEM_5>
  # PT = nonlocal escaped 
  _32 = MEM[(struct vectorD.35484 *)this_6(D) + 160B].D.36227._M_implD.35718._M_finishD.35721;
  # VUSE <.MEM_5>
  # PT = nonlocal escaped 
  __first_90 = MEM[(struct vectorD.35484 *)this_6(D) + 160B].D.36227._M_implD.35718._M_startD.35720;
  # DEBUG __firstD.66814 => __first_90
  # DEBUG __lastD.66813 => _32
  # DEBUG __firstD.66819 => __first_90
  if (_32 == __first_90)
    goto <bb 34>;
  else
    goto <bb 28>;
;;    succ:       34 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 27, next block 29, flags: (NEW)
;;    pred:       27 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 28, next block 30, flags: (NEW)
;;    pred:       28 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_77 = PHI <__first_90(28), __first_93(32)>
  # .MEM_79 = PHI <.MEM_5(28), .MEM_119(32)>
  # DEBUG __firstD.66819 => __first_77
  # DEBUG __rD.53899 => __first_77
  # DEBUG __pointerD.66820 => NULL
  # DEBUG thisD.66821 => NULL
  # DEBUG thisD.53864 => D#294ptD.0
  # DEBUG __firstD.53861 => D#296ptD.0
  # DEBUG __lastD.53862 => D#297ptD.0
  # DEBUG D.53863 => NULL
  # DEBUG D#162ptD.0 => D#296ptD.0
  # DEBUG D#163ptD.0 => D#297ptD.0
  # DEBUG __firstD.53130 => D#162ptD.0
  # DEBUG __lastD.53129 => D#163ptD.0
  # DEBUG D#161ptD.0 => D#163ptD.0
  # DEBUG D#160ptD.0 => D#162ptD.0
  # DEBUG D#158ptD.0 => D#160ptD.0
  # DEBUG D#159ptD.0 => D#161ptD.0
  # DEBUG D.53119 => D#158ptD.0
  # DEBUG D.53118 => D#159ptD.0
  # DEBUG thisD.66822 => D#295ptD.0
  # DEBUG D#293ptD.0 => D#295ptD.0->_M_implD.40535._M_end_of_storageD.40539
  # DEBUG D#292ptD.0 => (long intD.12) D#293ptD.0
  # VUSE <.MEM_79>
  # PT = nonlocal escaped 
  _92 = MEM[(struct _Vector_baseD.40302 *)__first_77]._M_implD.40535._M_startD.40537;
  # DEBUG D#291ptD.0 => (long intD.12) _92
  # DEBUG D#290ptD.0 => D#292ptD.0 - D#291ptD.0
  # DEBUG D#289ptD.0 => D#290ptD.0 /[ex] 16
  # DEBUG D#288ptD.0 => (long unsigned intD.14) D#289ptD.0
  # DEBUG thisD.66825 => D#295ptD.0
  # DEBUG __pD.66824 => _92
  # DEBUG __nD.66823 => D#288ptD.0
  if (_92 != 0B)
    goto <bb 30>;
  else
    goto <bb 31>;
;;    succ:       30 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#286ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG D#284ptD.0 => D#286ptD.0
  # DEBUG D#285ptD.0 => D#288ptD.0
  # DEBUG __pD.66829 => _92
  # DEBUG __aD.66827 => D#284ptD.0
  # DEBUG __nD.66828 => D#285ptD.0
  # DEBUG D#283ptD.0 => D#285ptD.0
  # DEBUG D#282ptD.0 => D#284ptD.0
  # DEBUG D#280ptD.0 => D#282ptD.0
  # DEBUG D#281ptD.0 => D#283ptD.0
  # DEBUG __pD.66832 => _92
  # DEBUG thisD.66830 => D#280ptD.0
  # DEBUG D.66831 => D#281ptD.0
  # .MEM_114 = VDEF <.MEM_79>
  # USE = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  # CLB = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  _ZdlPvD.2766 (_92);
;;    succ:       31 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 31, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       29 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_99 = PHI <.MEM_79(29), .MEM_114(30)>
  # DEBUG D#287ptD.0 => &D#295ptD.0->_M_implD.40535
  # DEBUG thisD.66833 => D#287ptD.0
  # DEBUG thisD.66834 => D#287ptD.0
  # DEBUG thisD.66835 => D#287ptD.0
  # .MEM_119 = VDEF <.MEM_99>
  MEM[(struct  &)__first_77] ={v} {CLOBBER};
  # PT = nonlocal escaped 
  __first_93 = __first_77 + 24;
  # DEBUG __firstD.66819 => __first_93
  # DEBUG __firstD.66819 => __first_93
  if (_32 == __first_93)
    goto <bb 33>;
  else
    goto <bb 32>;
;;    succ:       33 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 32, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 31, next block 33, flags: (NEW)
;;    pred:       31 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 32, next block 38, flags: (NEW)
;;    pred:       31 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       38 [100.0%]  (FALLTHRU)

;;   basic block 38, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 33, next block 34, flags: (NEW)
;;    pred:       33 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_119>
  pretmp_61 = MEM[(struct _Vector_baseD.35485 *)this_6(D) + 160B]._M_implD.35718._M_startD.35720;
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 38, next block 35, flags: (NEW, REACHABLE)
;;    pred:       38 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_95 = PHI <.MEM_119(38), .MEM_5(27)>
  # PT = nonlocal escaped 
  # prephitmp_106 = PHI <pretmp_61(38), __first_90(27)>
  # DEBUG D#303ptD.0 => &D#1146ptD.0->D.36227
  # DEBUG thisD.66836 => D#303ptD.0
  # DEBUG D#277ptD.0 => D#303ptD.0->_M_implD.35718._M_end_of_storageD.35722
  # DEBUG D#276ptD.0 => (long intD.12) D#277ptD.0
  # DEBUG D#1144ptD.0 => MEM[(struct _Vector_baseD.35485 *)this_6(D) + 160B]._M_implD.35718._M_startD.35720
  # DEBUG D#275ptD.0 => (long intD.12) D#1144ptD.0
  # DEBUG D#274ptD.0 => D#276ptD.0 - D#275ptD.0
  # DEBUG D#273ptD.0 => D#274ptD.0 /[ex] 24
  # DEBUG D#270ptD.0 => D#303ptD.0
  # DEBUG D#271ptD.0 => (long unsigned intD.14) D#273ptD.0
  # DEBUG __pD.66839 => D#1144ptD.0
  # DEBUG thisD.66837 => D#270ptD.0
  # DEBUG __nD.66838 => D#271ptD.0
  # DEBUG D#269ptD.0 => D#271ptD.0
  # DEBUG D#268ptD.0 => D#270ptD.0
  if (prephitmp_106 != 0B)
    goto <bb 35>;
  else
    goto <bb 36>;
;;    succ:       35 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       34 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#267ptD.0 => &D#268ptD.0->_M_implD.35718
  # DEBUG D#265ptD.0 => D#267ptD.0
  # DEBUG D#266ptD.0 => D#269ptD.0
  # DEBUG __pD.66843 => D#1144ptD.0
  # DEBUG __aD.66841 => D#265ptD.0
  # DEBUG __nD.66842 => D#266ptD.0
  # DEBUG D#264ptD.0 => D#266ptD.0
  # DEBUG D#263ptD.0 => D#265ptD.0
  # DEBUG D#261ptD.0 => D#263ptD.0
  # DEBUG D#262ptD.0 => D#264ptD.0
  # DEBUG __pD.66846 => D#1144ptD.0
  # DEBUG thisD.66844 => D#261ptD.0
  # DEBUG D.66845 => D#262ptD.0
  # .MEM_120 = VDEF <.MEM_95>
  # USE = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  # CLB = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  _ZdlPvD.2766 (prephitmp_106);
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       34 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_100 = PHI <.MEM_95(34), .MEM_120(35)>
  # DEBUG D#272ptD.0 => &D#303ptD.0->_M_implD.35718
  # DEBUG thisD.66847 => D#272ptD.0
  # DEBUG thisD.66848 => D#272ptD.0
  # DEBUG thisD.66849 => D#272ptD.0
  # .MEM_125 = VDEF <.MEM_100>
  MEM[(struct  &)this_6(D) + 160] ={v} {CLOBBER};
  [LP 1] resx 2
;;    succ:       37 (EH,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 36, next block 1, flags: (NEW, REACHABLE)
;;    pred:       36 (EH,EXECUTABLE)
<L8>: [LP 1]
  # .MEM_42 = VDEF <.MEM_125>
  # USE = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  # CLB = nonlocal null { D.36301 D.41072 D.66802 } (nonlocal, escaped)
  _ZN9AllocatorD2EvD.35455 (_7);
  resx 1
;;    succ:      

}



;; Function std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_copy(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_Reuse_or_alloc_node; _Key = int; _Val = std::pair<const int, Allocator::sRequest>; _KeyOfValue = std::_Select1st<std::pair<const int, Allocator::sRequest> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, Allocator::sRequest> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, Allocator::sRequest> >*; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type = const std::_Rb_tree_node<std::pair<const int, Allocator::sRequest> >*] (_ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_M_copyINSA_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIS4_EPKSE_SF_RT_, funcdef_no=2623, decl_uid=47300, cgraph_uid=1293, symbol_order=1294)


Pass statistics:
----------------

std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_copy(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_Reuse_or_alloc_node; _Key = int; _Val = std::pair<const int, Allocator::sRequest>; _KeyOfValue = std::_Select1st<std::pair<const int, Allocator::sRequest> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, Allocator::sRequest> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, Allocator::sRequest> >*; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type = const std::_Rb_tree_node<std::pair<const int, Allocator::sRequest> >*] (struct _Rb_treeD.41462 * const thisD.47301, const struct _Rb_tree_nodeD.41466 * __xD.47302, struct _Rb_tree_nodeD.41466 * __pD.47303, struct _Reuse_or_alloc_nodeD.41486 & __node_genD.47304)
Eh tree:
   3 must_not_throw
   2 cleanup land:{2,<L12>}
   1 try land:{4,<L14>},{3,<L13>},{1,<L15>} catch:{}
{
  boolD.2757 __node_gen___M_nodes_lsm.1816D.66977;
  struct _Rb_tree_node_baseD.24800 * __node_gen___M_nodes_lsm.1815D.66976;
  boolD.2757 __node_gen___M_nodes_lsm.1814D.66975;
  struct _Rb_tree_node_baseD.24800 * __node_gen___M_nodes_lsm.1813D.66974;
  struct _Rb_tree_nodeD.41466 * D.66964;
  struct _Rb_tree_node_baseD.24800 * D.66944;
  struct _Rb_tree_nodeD.41466 * __nodeD.66933;
  struct _Rb_tree_nodeD.41466 * D.66941;
  struct _Rb_tree_nodeD.41466 * D.66930;
  struct _Rb_tree_node_baseD.24800 * D.66910;
  struct _Rb_tree_nodeD.41466 * __nodeD.66899;
  struct _Rb_tree_nodeD.41466 * D.66907;
  struct _Rb_tree_node_baseD.24800 * _13;
  struct _Rb_tree_nodeD.41466 * _15;
  _Rb_tree_colorD.24797 _17;
  struct _Rb_tree_node_baseD.24800 * _20;
  struct _Rb_tree_nodeD.41466 * _23;
  voidD.45 * _26;
  struct _Rb_tree_node_baseD.24800 * const _33;
  _Rb_tree_colorD.24797 _36;
  struct _Rb_tree_node_baseD.24800 * _37;
  struct _Rb_tree_node_baseD.24800 * _41;
  struct _Rb_tree_node_baseD.24800 * _45;
  struct _Rb_tree_node_baseD.24800 * _46;
  struct _Rb_tree_node_baseD.24800 * _49;
  struct _Rb_tree_node_baseD.24800 * _50;
  struct _Rb_tree_node_baseD.24800 * _51;
  struct _Rb_tree_node_baseD.24800 * _52;
  struct _Rb_tree_node_baseD.24800 * _53;
  struct _Rb_tree_node_baseD.24800 * _54;
  struct _Rb_tree_nodeD.41466 * _55;
  struct _Rb_tree_node_baseD.24800 * _61;
  struct _Rb_tree_node_baseD.24800 * _62;
  struct _Rb_tree_node_baseD.24800 * _63;
  struct _Rb_tree_node_baseD.24800 * _65;
  struct _Rb_tree_node_baseD.24800 * _66;
  struct _Rb_tree_nodeD.41466 * _67;
  struct _Rb_tree_node_baseD.24800 * _74;
  struct _Rb_tree_node_baseD.24800 * _97;
  struct _Rb_tree_node_baseD.24800 * _107;
  struct _Rb_tree_node_baseD.24800 * _110;
  struct _Rb_tree_node_baseD.24800 * _125;

;;   basic block 2, loop depth 0, count 0, freq 187, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#793ptD.0 => this_8(D)
  # DEBUG __xD.61767 => __x_9(D)
  # DEBUG __node_genD.61768 => __node_gen_10(D)
  # DEBUG thisD.61769 => D#793ptD.0
  # DEBUG thisD.61771 => __x_9(D)
  # DEBUG D#1150ptD.0 => &__x_9(D)->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#1150ptD.0
  # DEBUG thisD.66897 => __node_gen_10(D)
  # DEBUG __argD.66898 => D#1150ptD.0
  # DEBUG thisD.66908 => __node_gen_10(D)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _37 = __node_gen_10(D)->_M_nodesD.47271;
  if (_37 == 0B)
    goto <bb 46>;
  else
    goto <bb 3>;
;;    succ:       46 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 168, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __nodeD.66909 => _37
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _49 = _37->_M_parentD.24805;
  # .MEM_77 = VDEF <.MEM_7(D)>
  __node_gen_10(D)->_M_nodesD.47271 = _49;
  if (_49 != 0B)
    goto <bb 4>;
  else
    goto <bb 14>;
;;    succ:       4 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 143, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_77>
  # PT = nonlocal escaped 
  _50 = _49->_M_rightD.24807;
  if (_37 == _50)
    goto <bb 5>;
  else
    goto <bb 13>;
;;    succ:       5 [21.6%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [78.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 31, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [21.6%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_78 = VDEF <.MEM_77>
  _49->_M_rightD.24807 = 0B;
  # VUSE <.MEM_78>
  # PT = nonlocal escaped 
  _51 = _49->_M_leftD.24806;
  if (_51 != 0B)
    goto <bb 6>;
  else
    goto <bb 44>;
;;    succ:       6 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 28, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_79 = VDEF <.MEM_78>
  __node_gen_10(D)->_M_nodesD.47271 = _51;
  # DEBUG thisD.66911 => __node_gen_10(D)
  # VUSE <.MEM_79>
  # PT = nonlocal escaped 
  _74 = _51->_M_rightD.24807;
  if (_74 == 0B)
    goto <bb 11>;
  else
    goto <bb 7>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 25, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 281, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # _97 = PHI <_74(7), _53(9)>
  # .MEM_124 = PHI <.MEM_79(7), .MEM_124(9)>
  # VUSE <.MEM_124>
  # PT = nonlocal escaped 
  _53 = _97->_M_rightD.24807;
  if (_53 == 0B)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 256, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 25, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # _52 = PHI <_97(8)>
  # __node_gen___M_nodes_lsm.1815_113 = PHI <_97(8)>
  # .MEM_2 = VDEF <.MEM_124>
  __node_gen_10(D)->_M_nodesD.47271 = __node_gen___M_nodes_lsm.1815_113;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 28, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # _107 = PHI <_52(10), _51(6)>
  # .MEM_123 = PHI <.MEM_2(10), .MEM_79(6)>
  # VUSE <.MEM_123>
  # PT = nonlocal escaped 
  _54 = _107->_M_leftD.24806;
  if (_54 != 0B)
    goto <bb 12>;
  else
    goto <bb 44>;
;;    succ:       12 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 24, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_81 = VDEF <.MEM_123>
  __node_gen_10(D)->_M_nodesD.47271 = _54;
  goto <bb 45>;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 112, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       4 [78.4%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_82 = VDEF <.MEM_77>
  _49->_M_leftD.24806 = 0B;
  goto <bb 45>;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 25, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       3 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_83 = VDEF <.MEM_77>
  __node_gen_10(D)->_M_rootD.47270 = 0B;
  goto <bb 45>;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 187, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       46 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                45 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped { D.66971 } (escaped heap)
  # __p_48 = PHI <_55(46), _37(45)>
  # .MEM_72 = PHI <.MEM_87(46), .MEM_85(45)>
  # DEBUG __tmpD.61770 => NULL
  # VUSE <.MEM_72>
  _17 = __x_9(D)->D.43962._M_colorD.24804;
  # .MEM_38 = VDEF <.MEM_72>
  __p_48->D.43962._M_colorD.24804 = _17;
  # .MEM_39 = VDEF <.MEM_38>
  __p_48->D.43962._M_leftD.24806 = 0B;
  # .MEM_40 = VDEF <.MEM_39>
  __p_48->D.43962._M_rightD.24807 = 0B;
  # DEBUG __topD.47381 => NULL
  # .MEM_12 = VDEF <.MEM_40>
  __p_48->D.43962._M_parentD.24805 = __p_11(D);
  # VUSE <.MEM_12>
  # PT = nonlocal escaped 
  _13 = __x_9(D)->D.43962._M_rightD.24807;
  if (_13 != 0B)
    goto <bb 16>;
  else
    goto <bb 18>;
;;    succ:       16 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 131, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       15 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12>
  # PT = nonlocal escaped 
  _33 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_9(D) + 24B];
  # DEBUG D#172ptD.0 => __x_9(D)
  # DEBUG __xD.61774 => D#172ptD.0
  [LP 3] # .MEM_14 = VDEF <.MEM_12>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.66971 D.66972 } (escaped heap)
  # CLB = nonlocal null { D.66971 D.66972 } (escaped heap)
  _15 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_M_copyINSA_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIS4_EPKSE_SF_RT_D.47300 (this_8(D), _33, __p_48, __node_gen_10(D));
;;    succ:       41 (EH,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 131, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_16 = VDEF <.MEM_14>
  __p_48->D.43962._M_rightD.24807 = _15;
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 188, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       15 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_3 = PHI <.MEM_12(15), .MEM_16(17)>
  # DEBUG __pD.47303 => NULL
  # VUSE <.MEM_3>
  # PT = nonlocal escaped 
  __x_31 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_9(D) + 16B];
  # DEBUG D#171ptD.0 => __x_9(D)
  # DEBUG __xD.61777 => D#171ptD.0
  # DEBUG __xD.47302 => NULL
  # DEBUG __pD.47303 => __p_48
  # DEBUG __xD.47302 => __x_31
  if (__x_31 == 0B)
    goto <bb 19>;
  else
    goto <bb 20>;
;;    succ:       19 [3.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [97.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 188, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [3.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [3.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_58 = PHI <.MEM_3(18), .MEM_5(39)>
  # VUSE <.MEM_58>
  return __p_48;
;;    succ:       EXIT [100.0%] 

;;   basic block 20, loop depth 0, count 0, freq 182, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       18 [97.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 1, count 0, freq 6062, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                40 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_70 = PHI <__x_31(20), __x_32(40)>
  # PT = nonlocal escaped { D.66971 D.66972 } (escaped heap)
  # __p_126 = PHI <__p_48(20), __p_60(40)>
  # .MEM_108 = PHI <.MEM_3(20), .MEM_5(40)>
  # DEBUG __pD.47303 => __p_126
  # DEBUG __xD.47302 => __x_70
  # DEBUG D#793ptD.0 => this_8(D)
  # DEBUG __xD.61779 => __x_70
  # DEBUG __node_genD.61780 => __node_gen_10(D)
  # DEBUG thisD.61781 => D#793ptD.0
  # DEBUG thisD.61783 => __x_70
  # DEBUG D#1151ptD.0 => &__x_70->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#1151ptD.0
  # DEBUG thisD.66931 => __node_gen_10(D)
  # DEBUG __argD.66932 => D#1151ptD.0
  # DEBUG thisD.66942 => __node_gen_10(D)
  # VUSE <.MEM_108>
  # PT = nonlocal escaped 
  _41 = __node_gen_10(D)->_M_nodesD.47271;
  if (_41 == 0B)
    goto <bb 49>;
  else
    goto <bb 22>;
;;    succ:       49 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 5448, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       21 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __nodeD.66943 => _41
  # VUSE <.MEM_108>
  # PT = nonlocal escaped 
  _61 = _41->_M_parentD.24805;
  # .MEM_90 = VDEF <.MEM_108>
  __node_gen_10(D)->_M_nodesD.47271 = _61;
  if (_61 != 0B)
    goto <bb 23>;
  else
    goto <bb 33>;
;;    succ:       23 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 4630, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       22 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_90>
  # PT = nonlocal escaped 
  _62 = _61->_M_rightD.24807;
  if (_41 == _62)
    goto <bb 24>;
  else
    goto <bb 32>;
;;    succ:       24 [21.6%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [78.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 1, count 0, freq 1002, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [21.6%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_91 = VDEF <.MEM_90>
  _61->_M_rightD.24807 = 0B;
  # VUSE <.MEM_91>
  # PT = nonlocal escaped 
  _63 = _61->_M_leftD.24806;
  if (_63 != 0B)
    goto <bb 25>;
  else
    goto <bb 47>;
;;    succ:       25 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       24 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_92 = VDEF <.MEM_91>
  __node_gen_10(D)->_M_nodesD.47271 = _63;
  # DEBUG thisD.66945 => __node_gen_10(D)
  # VUSE <.MEM_92>
  # PT = nonlocal escaped 
  _46 = _63->_M_rightD.24807;
  if (_46 == 0B)
    goto <bb 30>;
  else
    goto <bb 26>;
;;    succ:       30 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 26, next block 28, flags: (NEW)
;;    pred:       26 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                28 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # _125 = PHI <_46(26), _65(28)>
  # .MEM_122 = PHI <.MEM_92(26), .MEM_122(28)>
  # VUSE <.MEM_122>
  # PT = nonlocal escaped 
  _65 = _125->_M_rightD.24807;
  if (_65 == 0B)
    goto <bb 29>;
  else
    goto <bb 28>;
;;    succ:       29 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 2, count 0, freq 8281, maybe hot
;;    prev block 27, next block 29, flags: (NEW)
;;    pred:       27 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 27>;
;;    succ:       27 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 29, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 28, next block 30, flags: (NEW)
;;    pred:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # _45 = PHI <_125(27)>
  # __node_gen___M_nodes_lsm.1813_34 = PHI <_125(27)>
  # .MEM_121 = VDEF <.MEM_122>
  __node_gen_10(D)->_M_nodesD.47271 = __node_gen___M_nodes_lsm.1813_34;
;;    succ:       30 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 30, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                25 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # _110 = PHI <_45(29), _63(25)>
  # .MEM_109 = PHI <.MEM_121(29), .MEM_92(25)>
  # VUSE <.MEM_109>
  # PT = nonlocal escaped 
  _66 = _110->_M_leftD.24806;
  if (_66 != 0B)
    goto <bb 31>;
  else
    goto <bb 47>;
;;    succ:       31 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 1, count 0, freq 765, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       30 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_94 = VDEF <.MEM_109>
  __node_gen_10(D)->_M_nodesD.47271 = _66;
  goto <bb 48>;
;;    succ:       48 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 1, count 0, freq 3629, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       23 [78.4%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_95 = VDEF <.MEM_90>
  _61->_M_leftD.24806 = 0B;
  goto <bb 48>;
;;    succ:       48 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 1, count 0, freq 817, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       22 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_96 = VDEF <.MEM_90>
  __node_gen_10(D)->_M_rootD.47270 = 0B;
  goto <bb 48>;
;;    succ:       48 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 1, count 0, freq 407, maybe hot
;;   Invalid sum of incoming frequencies 615, should be 407
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       49 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __tmpD.66950 => _67
  # DEBUG D#632ptD.0 => D#726ptD.0
  # DEBUG __nodeD.66959 => _67
  # DEBUG __xD.66958 => D#1151ptD.0
  # DEBUG thisD.66957 => D#632ptD.0
  # DEBUG D#631ptD.0 => D#632ptD.0
  # DEBUG thisD.66960 => _67
  # DEBUG D#1153ptD.0 => &_67->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#1153ptD.0
  # DEBUG D#538ptD.0 => D#631ptD.0
  # DEBUG thisD.59488 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG __pD.66963 => D#1153ptD.0
  # DEBUG __valD.66962 => D#1151ptD.0
  # DEBUG thisD.66961 => D#630ptD.0
  # DEBUG D#24ptD.0 => 20
  # DEBUG __pD.59471 => D#1153ptD.0
  # DEBUG D.59472 => D#24ptD.0
  # .MEM_100 = VDEF <.MEM_99>
  MEM[(struct pairD.37146 *)_67 + 32B] = MEM[(const struct pairD.37146 &)__x_70 + 32];
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 35, loop depth 1, count 0, freq 6062, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       34 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                48 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped { D.66972 } (escaped heap)
  # __p_60 = PHI <_67(34), _41(48)>
  # .MEM_76 = PHI <.MEM_100(34), .MEM_98(48)>
  # DEBUG __tmpD.61782 => NULL
  # VUSE <.MEM_76>
  _36 = __x_70->D.43962._M_colorD.24804;
  # .MEM_42 = VDEF <.MEM_76>
  __p_60->D.43962._M_colorD.24804 = _36;
  # .MEM_43 = VDEF <.MEM_42>
  __p_60->D.43962._M_leftD.24806 = 0B;
  # .MEM_44 = VDEF <.MEM_43>
  __p_60->D.43962._M_rightD.24807 = 0B;
  # DEBUG __yD.47386 => NULL
  # .MEM_18 = VDEF <.MEM_44>
  __p_126->D.43962._M_leftD.24806 = __p_60;
  # .MEM_19 = VDEF <.MEM_18>
  __p_60->D.43962._M_parentD.24805 = __p_126;
  # VUSE <.MEM_19>
  # PT = nonlocal escaped 
  _20 = __x_70->D.43962._M_rightD.24807;
  if (_20 != 0B)
    goto <bb 36>;
  else
    goto <bb 39>;
;;    succ:       36 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 36, loop depth 1, count 0, freq 4233, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       35 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#172ptD.0 => __x_70
  # DEBUG __xD.61786 => D#172ptD.0
  [LP 4] # .MEM_22 = VDEF <.MEM_19>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.66971 D.66972 } (escaped heap)
  # CLB = nonlocal null { D.66971 D.66972 } (escaped heap)
  _23 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_M_copyINSA_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIS4_EPKSE_SF_RT_D.47300 (this_8(D), _20, __p_60, __node_gen_10(D));
  goto <bb 38>;
;;    succ:       37 (EH,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 36, next block 38, flags: (NEW)
;;    pred:       36 (EH,EXECUTABLE)
<L14>: [LP 4]
  goto <bb 42> (<L10>);
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 38, loop depth 1, count 0, freq 4233, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       36 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_24 = VDEF <.MEM_22>
  __p_60->D.43962._M_rightD.24807 = _23;
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 1, count 0, freq 6063, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       35 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_5 = PHI <.MEM_19(35), .MEM_24(38)>
  # DEBUG __pD.47303 => NULL
  # VUSE <.MEM_5>
  # PT = nonlocal escaped 
  __x_32 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_70 + 16B];
  # DEBUG D#171ptD.0 => __x_70
  # DEBUG __xD.61789 => D#171ptD.0
  # DEBUG __xD.47302 => NULL
  # DEBUG __pD.47303 => __p_60
  # DEBUG __xD.47302 => __x_32
  if (__x_32 == 0B)
    goto <bb 19>;
  else
    goto <bb 40>;
;;    succ:       19 [3.0%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [97.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 1, count 0, freq 5881, maybe hot
;;    prev block 39, next block 41, flags: (NEW)
;;    pred:       39 [97.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 21>;
;;    succ:       21 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 40, next block 42, flags: (NEW)
;;    pred:       16 (EH,EXECUTABLE)
<L13>: [LP 3]
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       41 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                50 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_6 = PHI <.MEM_14(41), .MEM_99(50), .MEM_22(37)>
<L10>:
  # VUSE <.MEM_6>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _26 = __builtin_eh_pointerD.2738 (1);
  # .MEM_27 = VDEF <.MEM_6>
  # USE = nonlocal null { D.66971 D.66972 } (escaped heap)
  # CLB = nonlocal null { D.66971 D.66972 } (escaped heap)
  __cxa_begin_catchD.14644 (_26);
  # .MEM_28 = VDEF <.MEM_27>
  # USE = nonlocal null { D.66971 D.66972 } (escaped heap)
  # CLB = nonlocal null { D.66971 D.66972 } (escaped heap)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (this_8(D), __p_48);
  [LP 2] # .MEM_29 = VDEF <.MEM_28>
  # USE = nonlocal null { D.66971 D.66972 } (escaped heap)
  # CLB = nonlocal null { D.66971 D.66972 } (escaped heap)
  __cxa_rethrowD.45013 ();
;;    succ:       43 (EH,EXECUTABLE)

;;   basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 42, next block 44, flags: (NEW, REACHABLE)
;;    pred:       42 (EH,EXECUTABLE)
<L12>: [LP 2]
  [MNT 3] # .MEM_30 = VDEF <.MEM_29>
  # USE = nonlocal null { D.66971 D.66972 } (escaped heap)
  # CLB = nonlocal null { D.66971 D.66972 } (escaped heap)
  __cxa_end_catchD.14643 ();
  resx 2
;;    succ:      

;;   basic block 44, loop depth 0, count 0, freq 7, maybe hot
;;    prev block 43, next block 45, flags: (NEW)
;;    pred:       5 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_75 = PHI <.MEM_78(5), .MEM_123(11)>
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 45, loop depth 0, count 0, freq 175, maybe hot
;;    prev block 44, next block 46, flags: (NEW, REACHABLE)
;;    pred:       44 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_59 = PHI <.MEM_75(44), .MEM_83(14), .MEM_82(13), .MEM_81(12)>
  # DEBUG __nodeD.66899 => NULL
  # DEBUG __nodeD.66899 => NULL
  # DEBUG D#791ptD.0 => __node_gen_10(D)->_M_tD.47272
  # DEBUG D#543ptD.0 => D#791ptD.0
  # DEBUG thisD.61752 => D#543ptD.0
  # DEBUG __pD.61751 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG D#790ptD.0 => __node_gen_10(D)->_M_tD.47272
  # DEBUG D#632ptD.0 => D#790ptD.0
  # DEBUG __nodeD.66902 => NULL
  # DEBUG __xD.66901 => D#1150ptD.0
  # DEBUG thisD.66900 => D#632ptD.0
  # DEBUG D#631ptD.0 => D#632ptD.0
  # DEBUG thisD.66903 => NULL
  # DEBUG D#1154ptD.0 => &MEM[(struct _Rb_tree_nodeD.41466 *)_37]._M_value_fieldD.43957
  # DEBUG __rD.53249 => D#1154ptD.0
  # DEBUG D#538ptD.0 => D#631ptD.0
  # DEBUG thisD.59488 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG __pD.66906 => D#1154ptD.0
  # DEBUG __valD.66905 => D#1150ptD.0
  # DEBUG thisD.66904 => D#630ptD.0
  # DEBUG D#24ptD.0 => 20
  # DEBUG __pD.59471 => D#1154ptD.0
  # DEBUG D.59472 => D#24ptD.0
  # .MEM_85 = VDEF <.MEM_59>
  MEM[(struct pairD.37146 *)_37 + 32B] = MEM[(const struct pairD.37146 &)__x_9(D) + 32];
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 46, loop depth 0, count 0, freq 19, maybe hot
;;    prev block 45, next block 47, flags: (NEW, REACHABLE)
;;    pred:       2 [10.1%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __nodeD.66899 => NULL
  # DEBUG __nodeD.66899 => NULL
  # DEBUG D#792ptD.0 => __node_gen_10(D)->_M_tD.47272
  # DEBUG D#727ptD.0 => D#792ptD.0
  # DEBUG __xD.66914 => D#1150ptD.0
  # DEBUG thisD.66915 => D#727ptD.0
  # DEBUG D#726ptD.0 => D#727ptD.0
  # DEBUG D#725ptD.0 => D#727ptD.0
  # DEBUG D#724ptD.0 => D#725ptD.0
  # DEBUG thisD.66917 => D#724ptD.0
  # DEBUG D#723ptD.0 => D#724ptD.0
  # DEBUG thisD.61114 => D#723ptD.0
  # DEBUG __nD.66919 => 1
  # DEBUG __aD.66918 => D#722ptD.0
  # DEBUG D#721ptD.0 => D#722ptD.0
  # DEBUG D#719ptD.0 => D#721ptD.0
  # DEBUG D#720ptD.0 => 0B
  # DEBUG __nD.66922 => 1
  # DEBUG thisD.66920 => D#719ptD.0
  # DEBUG D.66921 => D#720ptD.0
  # DEBUG D#718ptD.0 => D#719ptD.0
  # DEBUG D#717ptD.0 => D#718ptD.0
  # DEBUG thisD.61072 => D#717ptD.0
  # .MEM_86 = VDEF <.MEM_7(D)>
  # PT = { D.66971 } (escaped heap)
  # USE = nonlocal null { D.66971 D.66972 } (escaped heap)
  # CLB = nonlocal null { D.66971 D.66972 } (escaped heap)
  _55 = _ZnwmD.2764 (56);
  # DEBUG __tmpD.66916 => _55
  # DEBUG D#632ptD.0 => D#726ptD.0
  # DEBUG __nodeD.66925 => _55
  # DEBUG __xD.66924 => D#1150ptD.0
  # DEBUG thisD.66923 => D#632ptD.0
  # DEBUG D#631ptD.0 => D#632ptD.0
  # DEBUG thisD.66926 => _55
  # DEBUG D#1155ptD.0 => &_55->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#1155ptD.0
  # DEBUG D#538ptD.0 => D#631ptD.0
  # DEBUG thisD.59488 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG __pD.66929 => D#1155ptD.0
  # DEBUG __valD.66928 => D#1150ptD.0
  # DEBUG thisD.66927 => D#630ptD.0
  # DEBUG D#24ptD.0 => 20
  # DEBUG __pD.59471 => D#1155ptD.0
  # DEBUG D.59472 => D#24ptD.0
  # .MEM_87 = VDEF <.MEM_86>
  MEM[(struct pairD.37146 *)_55 + 32B] = MEM[(const struct pairD.37146 &)__x_9(D) + 32];
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 47, loop depth 1, count 0, freq 237, maybe hot
;;    prev block 46, next block 48, flags: (NEW)
;;    pred:       24 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                30 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_56 = PHI <.MEM_91(24), .MEM_109(30)>
;;    succ:       48 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 48, loop depth 1, count 0, freq 5655, maybe hot
;;   Invalid sum of incoming frequencies 5448, should be 5655
;;    prev block 47, next block 49, flags: (NEW, REACHABLE)
;;    pred:       47 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_120 = PHI <.MEM_56(47), .MEM_96(33), .MEM_95(32), .MEM_94(31)>
  # DEBUG __nodeD.66933 => NULL
  # DEBUG __nodeD.66933 => NULL
  # DEBUG D#791ptD.0 => __node_gen_10(D)->_M_tD.47272
  # DEBUG D#543ptD.0 => D#791ptD.0
  # DEBUG thisD.61752 => D#543ptD.0
  # DEBUG __pD.61751 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG D#790ptD.0 => __node_gen_10(D)->_M_tD.47272
  # DEBUG D#632ptD.0 => D#790ptD.0
  # DEBUG __nodeD.66936 => NULL
  # DEBUG __xD.66935 => D#1151ptD.0
  # DEBUG thisD.66934 => D#632ptD.0
  # DEBUG D#631ptD.0 => D#632ptD.0
  # DEBUG thisD.66937 => NULL
  # DEBUG D#1152ptD.0 => &MEM[(struct _Rb_tree_nodeD.41466 *)_41]._M_value_fieldD.43957
  # DEBUG __rD.53249 => D#1152ptD.0
  # DEBUG D#538ptD.0 => D#631ptD.0
  # DEBUG thisD.59488 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG __pD.66940 => D#1152ptD.0
  # DEBUG __valD.66939 => D#1151ptD.0
  # DEBUG thisD.66938 => D#630ptD.0
  # DEBUG D#24ptD.0 => 20
  # DEBUG __pD.59471 => D#1152ptD.0
  # DEBUG D.59472 => D#24ptD.0
  # .MEM_98 = VDEF <.MEM_120>
  MEM[(struct pairD.37146 *)_41 + 32B] = MEM[(const struct pairD.37146 &)__x_70 + 32];
  goto <bb 35>;
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 49, loop depth 1, count 0, freq 615, maybe hot
;;    prev block 48, next block 50, flags: (NEW, REACHABLE)
;;    pred:       21 [10.1%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __nodeD.66933 => NULL
  # DEBUG __nodeD.66933 => NULL
  # DEBUG D#792ptD.0 => __node_gen_10(D)->_M_tD.47272
  # DEBUG D#727ptD.0 => D#792ptD.0
  # DEBUG __xD.66948 => D#1151ptD.0
  # DEBUG thisD.66949 => D#727ptD.0
  # DEBUG D#726ptD.0 => D#727ptD.0
  # DEBUG D#725ptD.0 => D#727ptD.0
  # DEBUG D#724ptD.0 => D#725ptD.0
  # DEBUG thisD.66951 => D#724ptD.0
  # DEBUG D#723ptD.0 => D#724ptD.0
  # DEBUG thisD.61114 => D#723ptD.0
  # DEBUG __nD.66953 => 1
  # DEBUG __aD.66952 => D#722ptD.0
  # DEBUG D#721ptD.0 => D#722ptD.0
  # DEBUG D#719ptD.0 => D#721ptD.0
  # DEBUG D#720ptD.0 => 0B
  # DEBUG __nD.66956 => 1
  # DEBUG thisD.66954 => D#719ptD.0
  # DEBUG D.66955 => D#720ptD.0
  # DEBUG D#718ptD.0 => D#719ptD.0
  # DEBUG D#717ptD.0 => D#718ptD.0
  # DEBUG thisD.61072 => D#717ptD.0
  [LP 1] # .MEM_99 = VDEF <.MEM_108>
  # PT = { D.66972 } (escaped heap)
  # USE = nonlocal null { D.66971 D.66972 } (escaped heap)
  # CLB = nonlocal null { D.66971 D.66972 } (escaped heap)
  _67 = _ZnwmD.2764 (56);
  goto <bb 34>;
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                50 (EH,EXECUTABLE)

;;   basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 49, next block 1, flags: (NEW)
;;    pred:       49 (EH,EXECUTABLE)
<L15>: [LP 1]
  goto <bb 42> (<L10>);
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

}


Creating dr for __node_gen_10(D)->_M_nodes
analyze_innermost: success.
	base_address: __node_gen_10(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *__node_gen_10(D)
	Access function 0: 64
Creating dr for _37->_M_parent
analyze_innermost: success.
	base_address: _37
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *_37
	Access function 0: 64
Creating dr for __node_gen_10(D)->_M_nodes
analyze_innermost: success.
	base_address: __node_gen_10(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *__node_gen_10(D)
	Access function 0: 64
Creating dr for _49->_M_right
analyze_innermost: success.
	base_address: _49
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: *_49
	Access function 0: 192
Creating dr for _49->_M_right
analyze_innermost: success.
	base_address: _49
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: *_49
	Access function 0: 192
Creating dr for _49->_M_left
analyze_innermost: success.
	base_address: _49
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: *_49
	Access function 0: 128
Creating dr for __node_gen_10(D)->_M_nodes
analyze_innermost: success.
	base_address: __node_gen_10(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *__node_gen_10(D)
	Access function 0: 64
Creating dr for _51->_M_right
analyze_innermost: success.
	base_address: _51
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: *_51
	Access function 0: 192
Creating dr for _97->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_97
	Access function 0: 192
Creating dr for _97->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_97
	Access function 0: 192
Creating dr for _97->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_97
	Access function 0: 192
Creating dr for _97->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_97
	Access function 0: 192
Creating dr for _97->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_97
	Access function 0: 192
Creating dr for _97->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_97
	Access function 0: 192
Creating dr for _97->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_97
	Access function 0: 192
Creating dr for _97->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_97
	Access function 0: 192
Creating dr for __node_gen_10(D)->_M_nodes
analyze_innermost: success.
	base_address: __node_gen_10(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *__node_gen_10(D)
	Access function 0: 64
Creating dr for _107->_M_left
analyze_innermost: success.
	base_address: _107
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: *_107
	Access function 0: 128
Creating dr for __node_gen_10(D)->_M_nodes
analyze_innermost: success.
	base_address: __node_gen_10(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *__node_gen_10(D)
	Access function 0: 64
Creating dr for _49->_M_left
analyze_innermost: success.
	base_address: _49
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: *_49
	Access function 0: 128
Creating dr for __node_gen_10(D)->_M_root
analyze_innermost: success.
	base_address: __node_gen_10(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *__node_gen_10(D)
	Access function 0: 0
Creating dr for MEM[(const struct pair &)__x_9(D) + 32]
analyze_innermost: success.
	base_address: __x_9(D)
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(const struct pair &)__x_9(D) + 32]
Creating dr for MEM[(struct pair *)_37 + 32B]
analyze_innermost: success.
	base_address: _37
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)_37 + 32B]
Creating dr for __x_9(D)->D.43962._M_color
analyze_innermost: success.
	base_address: __x_9(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *__x_9(D)
	Access function 0: 0
	Access function 1: 0
Creating dr for __p_48->D.43962._M_color
analyze_innermost: success.
	base_address: __p_48
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *__p_48
	Access function 0: 0
	Access function 1: 0
Creating dr for __p_48->D.43962._M_left
analyze_innermost: success.
	base_address: __p_48
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: *__p_48
	Access function 0: 128
	Access function 1: 0
Creating dr for __p_48->D.43962._M_right
analyze_innermost: success.
	base_address: __p_48
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: *__p_48
	Access function 0: 192
	Access function 1: 0
Creating dr for __p_48->D.43962._M_parent
analyze_innermost: success.
	base_address: __p_48
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *__p_48
	Access function 0: 64
	Access function 1: 0
Creating dr for __x_9(D)->D.43962._M_right
analyze_innermost: success.
	base_address: __x_9(D)
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: *__x_9(D)
	Access function 0: 192
	Access function 1: 0
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_9(D) + 24B]
analyze_innermost: success.
	base_address: __x_9(D)
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_9(D) + 24B]
Creating dr for __p_48->D.43962._M_right
analyze_innermost: success.
	base_address: __p_48
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: *__p_48
	Access function 0: 192
	Access function 1: 0
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_9(D) + 16B]
analyze_innermost: success.
	base_address: __x_9(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_9(D) + 16B]
Creating dr for __node_gen_10(D)->_M_nodes
analyze_innermost: success.
	base_address: __node_gen_10(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *__node_gen_10(D)
	Access function 0: 64
Creating dr for __node_gen_10(D)->_M_nodes
analyze_innermost: success.
	base_address: __node_gen_10(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *__node_gen_10(D)
	Access function 0: 64
Creating dr for __node_gen_10(D)->_M_nodes
analyze_innermost: success.
	base_address: __node_gen_10(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *__node_gen_10(D)
	Access function 0: 64
Creating dr for __node_gen_10(D)->_M_nodes
analyze_innermost: success.
	base_address: __node_gen_10(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *__node_gen_10(D)
	Access function 0: 64
Creating dr for MEM[(const struct pair &)__x_70 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair &)__x_70 + 32]
Creating dr for MEM[(struct pair *)_67 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct pair *)_67 + 32B]
Creating dr for MEM[(const struct pair &)__x_70 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair &)__x_70 + 32]
Creating dr for MEM[(struct pair *)_67 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct pair *)_67 + 32B]
Creating dr for _41->_M_parent
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_41
	Access function 0: 64
Creating dr for _41->_M_parent
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_41
	Access function 0: 64
Creating dr for __node_gen_10(D)->_M_nodes
analyze_innermost: success.
	base_address: __node_gen_10(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *__node_gen_10(D)
	Access function 0: 64
Creating dr for __node_gen_10(D)->_M_nodes
analyze_innermost: success.
	base_address: __node_gen_10(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *__node_gen_10(D)
	Access function 0: 64
Creating dr for _61->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_61
	Access function 0: 192
Creating dr for _61->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_61
	Access function 0: 192
Creating dr for _61->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_61
	Access function 0: 192
Creating dr for _61->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_61
	Access function 0: 192
Creating dr for _61->_M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_61
	Access function 0: 128
Creating dr for _61->_M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_61
	Access function 0: 128
Creating dr for __node_gen_10(D)->_M_nodes
analyze_innermost: success.
	base_address: __node_gen_10(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *__node_gen_10(D)
	Access function 0: 64
Creating dr for __node_gen_10(D)->_M_nodes
analyze_innermost: success.
	base_address: __node_gen_10(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *__node_gen_10(D)
	Access function 0: 64
Creating dr for _63->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_63
	Access function 0: 192
Creating dr for _63->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_63
	Access function 0: 192
Creating dr for _125->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_125
	Access function 0: 192
Creating dr for _125->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_125
	Access function 0: 192
Creating dr for _125->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_125
	Access function 0: 192
Creating dr for _125->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_125
	Access function 0: 192
Creating dr for _125->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_125
	Access function 0: 192
Creating dr for _125->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_125
	Access function 0: 192
Creating dr for _125->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_125
	Access function 0: 192
Creating dr for _125->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_125
	Access function 0: 192
Creating dr for _125->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_125
	Access function 0: 192
Creating dr for _125->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_125
	Access function 0: 192
Creating dr for _125->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_125
	Access function 0: 192
Creating dr for _125->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_125
	Access function 0: 192
Creating dr for __node_gen_10(D)->_M_nodes
analyze_innermost: success.
	base_address: __node_gen_10(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *__node_gen_10(D)
	Access function 0: 64
Creating dr for __node_gen_10(D)->_M_nodes
analyze_innermost: success.
	base_address: __node_gen_10(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *__node_gen_10(D)
	Access function 0: 64
Creating dr for _110->_M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_110
	Access function 0: 128
Creating dr for _110->_M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_110
	Access function 0: 128
Creating dr for __node_gen_10(D)->_M_nodes
analyze_innermost: success.
	base_address: __node_gen_10(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *__node_gen_10(D)
	Access function 0: 64
Creating dr for __node_gen_10(D)->_M_nodes
analyze_innermost: success.
	base_address: __node_gen_10(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *__node_gen_10(D)
	Access function 0: 64
Creating dr for _61->_M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_61
	Access function 0: 128
Creating dr for _61->_M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *_61
	Access function 0: 128
Creating dr for __node_gen_10(D)->_M_root
analyze_innermost: success.
	base_address: __node_gen_10(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *__node_gen_10(D)
	Access function 0: 0
Creating dr for __node_gen_10(D)->_M_root
analyze_innermost: success.
	base_address: __node_gen_10(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *__node_gen_10(D)
	Access function 0: 0
Creating dr for MEM[(const struct pair &)__x_70 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair &)__x_70 + 32]
Creating dr for MEM[(struct pair *)_41 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct pair *)_41 + 32B]
Creating dr for MEM[(const struct pair &)__x_70 + 32]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct pair &)__x_70 + 32]
Creating dr for MEM[(struct pair *)_41 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct pair *)_41 + 32B]
Creating dr for __x_70->D.43962._M_color
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_70
	Access function 0: 0
	Access function 1: 0
Creating dr for __x_70->D.43962._M_color
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_70
	Access function 0: 0
	Access function 1: 0
Creating dr for __p_60->D.43962._M_color
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_60
	Access function 0: 0
	Access function 1: 0
Creating dr for __p_60->D.43962._M_color
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_60
	Access function 0: 0
	Access function 1: 0
Creating dr for __p_60->D.43962._M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_60
	Access function 0: 128
	Access function 1: 0
Creating dr for __p_60->D.43962._M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_60
	Access function 0: 128
	Access function 1: 0
Creating dr for __p_60->D.43962._M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_60
	Access function 0: 192
	Access function 1: 0
Creating dr for __p_60->D.43962._M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_60
	Access function 0: 192
	Access function 1: 0
Creating dr for __p_126->D.43962._M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_126
	Access function 0: 128
	Access function 1: 0
Creating dr for __p_126->D.43962._M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_126
	Access function 0: 128
	Access function 1: 0
Creating dr for __p_60->D.43962._M_parent
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_60
	Access function 0: 64
	Access function 1: 0
Creating dr for __p_60->D.43962._M_parent
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_60
	Access function 0: 64
	Access function 1: 0
Creating dr for __x_70->D.43962._M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_70
	Access function 0: 192
	Access function 1: 0
Creating dr for __x_70->D.43962._M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_70
	Access function 0: 192
	Access function 1: 0
Creating dr for __p_60->D.43962._M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_60
	Access function 0: 192
	Access function 1: 0
Creating dr for __p_60->D.43962._M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__p_60
	Access function 0: 192
	Access function 1: 0
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_70 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_70 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_70 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_70 + 16B]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:47)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:23)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:47)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:58, LOOPS:3, CONDITIONS:21, STMTS:312)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_46 bb_3 })
  {
    <bb 2>:
    # DEBUG D#793 => this_8(D)
    # DEBUG __x => __x_9(D)
    # DEBUG __node_gen => __node_gen_10(D)
    # DEBUG this => D#793
    # DEBUG this => __x_9(D)
    # DEBUG D#1150 => &__x_9(D)->_M_value_field
    # DEBUG __r => D#1150
    # DEBUG this => __node_gen_10(D)
    # DEBUG __arg => D#1150
    # DEBUG this => __node_gen_10(D)
    # VUSE <.MEM_7(D)>
    _37 = __node_gen_10(D)->_M_nodes;
    if (_37 == 0B)
      goto <bb 46>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 bb_14 })
  {
    <bb 3>:
    # DEBUG __node => _37
    # VUSE <.MEM_7(D)>
    _49 = _37->_M_parent;
    # .MEM_77 = VDEF <.MEM_7(D)>
    __node_gen_10(D)->_M_nodes = _49;
    if (_49 != 0B)
      goto <bb 4>;
    else
      goto <bb 14>;

  }
  bb_4 (preds = {bb_3 }, succs = {bb_5 bb_13 })
  {
    <bb 4>:
    # VUSE <.MEM_77>
    _50 = _49->_M_right;
    if (_37 == _50)
      goto <bb 5>;
    else
      goto <bb 13>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_6 bb_44 })
  {
    <bb 5>:
    # .MEM_78 = VDEF <.MEM_77>
    _49->_M_right = 0B;
    # VUSE <.MEM_78>
    _51 = _49->_M_left;
    if (_51 != 0B)
      goto <bb 6>;
    else
      goto <bb 44>;

  }
  bb_6 (preds = {bb_5 }, succs = {bb_11 bb_7 })
  {
    <bb 6>:
    # .MEM_79 = VDEF <.MEM_78>
    __node_gen_10(D)->_M_nodes = _51;
    # DEBUG this => __node_gen_10(D)
    # VUSE <.MEM_79>
    _74 = _51->_M_right;
    if (_74 == 0B)
      goto <bb 11>;
    else
      goto <bb 7>;

  }
  bb_7 (preds = {bb_6 }, succs = {bb_8 })
  {
    <bb 7>:

  }
  bb_10 (preds = {bb_8 }, succs = {bb_52 })
  {
    <bb 10>:
    # _52 = PHI <_97(8)>

  }
  bb_52 (preds = {bb_10 }, succs = {bb_11 })
  {
    <bb 52>:
    # .MEM_2 = VDEF <.MEM_124>
    __node_gen_10(D)->_M_nodes = _52;

  }
  bb_11 (preds = {bb_52 bb_6 }, succs = {bb_12 bb_44 })
  {
    <bb 11>:
    # _107 = PHI <_52(52), _51(6)>
    # .MEM_123 = PHI <.MEM_2(52), .MEM_79(6)>
    # VUSE <.MEM_123>
    _54 = _107->_M_left;
    if (_54 != 0B)
      goto <bb 12>;
    else
      goto <bb 44>;

  }
  bb_12 (preds = {bb_11 }, succs = {bb_45 })
  {
    <bb 12>:
    # .MEM_81 = VDEF <.MEM_123>
    __node_gen_10(D)->_M_nodes = _54;
    goto <bb 45>;

  }
  bb_13 (preds = {bb_4 }, succs = {bb_45 })
  {
    <bb 13>:
    # .MEM_82 = VDEF <.MEM_77>
    _49->_M_left = 0B;
    goto <bb 45>;

  }
  bb_14 (preds = {bb_3 }, succs = {bb_45 })
  {
    <bb 14>:
    # .MEM_83 = VDEF <.MEM_77>
    __node_gen_10(D)->_M_root = 0B;
    goto <bb 45>;

  }
  bb_15 (preds = {bb_46 bb_54 }, succs = {bb_16 bb_18 })
  {
    <bb 15>:
    # __p_48 = PHI <_55(46), _37(54)>
    # .MEM_72 = PHI <.MEM_87(46), .MEM_85(54)>
    # DEBUG __tmp => NULL
    # VUSE <.MEM_72>
    _17 = __x_9(D)->D.43962._M_color;
    # .MEM_38 = VDEF <.MEM_72>
    __p_48->D.43962._M_color = _17;
    # .MEM_39 = VDEF <.MEM_38>
    __p_48->D.43962._M_left = 0B;
    # .MEM_40 = VDEF <.MEM_39>
    __p_48->D.43962._M_right = 0B;
    # DEBUG __top => NULL
    # .MEM_12 = VDEF <.MEM_40>
    __p_48->D.43962._M_parent = __p_11(D);
    # VUSE <.MEM_12>
    _13 = __x_9(D)->D.43962._M_right;
    if (_13 != 0B)
      goto <bb 16>;
    else
      goto <bb 18>;

  }
  bb_16 (preds = {bb_15 }, succs = {bb_41 bb_17 })
  {
    <bb 16>:
    # VUSE <.MEM_12>
    _33 = MEM[(struct _Rb_tree_node_base * *)__x_9(D) + 24B];
    # DEBUG D#172 => __x_9(D)
    # DEBUG __x => D#172
    # .MEM_14 = VDEF <.MEM_12>
    _15 = std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_M_copy<std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_Reuse_or_alloc_node> (this_8(D), _33, __p_48, __node_gen_10(D));

  }
  bb_17 (preds = {bb_16 }, succs = {bb_18 })
  {
    <bb 17>:
    # .MEM_16 = VDEF <.MEM_14>
    __p_48->D.43962._M_right = _15;

  }
  bb_18 (preds = {bb_15 bb_17 }, succs = {bb_19 bb_20 })
  {
    <bb 18>:
    # .MEM_3 = PHI <.MEM_12(15), .MEM_16(17)>
    # DEBUG __p => NULL
    # VUSE <.MEM_3>
    __x_31 = MEM[(struct _Rb_tree_node_base * *)__x_9(D) + 16B];
    # DEBUG D#171 => __x_9(D)
    # DEBUG __x => D#171
    # DEBUG __x => NULL
    # DEBUG __p => __p_48
    # DEBUG __x => __x_31
    if (__x_31 == 0B)
      goto <bb 19>;
    else
      goto <bb 20>;

  }
  bb_19 (preds = {bb_18 bb_39 }, succs = {bb_57 })
  {
    <bb 19>:
    # .MEM_58 = PHI <.MEM_3(18), .MEM_5(39)>

  }
  bb_57 (preds = {bb_19 }, succs = {bb_1 })
  {
    <bb 57>:
    # VUSE <.MEM_58>
    return __p_48;

  }
  bb_20 (preds = {bb_18 }, succs = {bb_21 })
  {
    <bb 20>:

  }
  bb_37 (preds = {bb_36 }, succs = {bb_42 })
  {
  <L14>:
    goto <bb 42> (<L10>);

  }
  bb_41 (preds = {bb_16 }, succs = {bb_42 })
  {
  <L13>:

  }
  bb_42 (preds = {bb_41 bb_50 bb_37 }, succs = {bb_43 })
  {
    # .MEM_6 = PHI <.MEM_14(41), .MEM_99(50), .MEM_22(37)>
  <L10>:
    # VUSE <.MEM_6>
    _26 = __builtin_eh_pointer (1);
    # .MEM_27 = VDEF <.MEM_6>
    __cxa_begin_catch (_26);
    # .MEM_28 = VDEF <.MEM_27>
    std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_M_erase (this_8(D), __p_48);
    # .MEM_29 = VDEF <.MEM_28>
    __cxa_rethrow ();

  }
  bb_43 (preds = {bb_42 }, succs = {})
  {
  <L12>:
    # .MEM_30 = VDEF <.MEM_29>
    __cxa_end_catch ();
    resx 2

  }
  bb_44 (preds = {bb_5 bb_11 }, succs = {bb_53 })
  {
    <bb 44>:
    # .MEM_75 = PHI <.MEM_78(5), .MEM_123(11)>

  }
  bb_53 (preds = {bb_44 }, succs = {bb_45 })
  {
    <bb 53>:

  }
  bb_45 (preds = {bb_53 bb_14 bb_13 bb_12 }, succs = {bb_54 })
  {
    <bb 45>:
    # .MEM_59 = PHI <.MEM_75(53), .MEM_83(14), .MEM_82(13), .MEM_81(12)>

  }
  bb_54 (preds = {bb_45 }, succs = {bb_15 })
  {
    <bb 54>:
    # DEBUG __node => NULL
    # DEBUG __node => NULL
    # DEBUG D#791 => __node_gen_10(D)->_M_t
    # DEBUG D#543 => D#791
    # DEBUG this => D#543
    # DEBUG __p => D#544
    # DEBUG D#542 => D#543
    # DEBUG D#541 => D#544
    # DEBUG D#540 => D#544
    # DEBUG this => D#540
    # DEBUG D#539 => &D#541->_M_value_field
    # DEBUG __r => D#539
    # DEBUG D#538 => D#542
    # DEBUG this => D#538
    # DEBUG D#537 => D#538
    # DEBUG this => D#537
    # DEBUG this => NULL
    # DEBUG D.57746 => NULL
    # DEBUG this => NULL
    # DEBUG D#330 => D#539
    # DEBUG this => D#329
    # DEBUG __p => D#330
    # DEBUG this => NULL
    # DEBUG this => NULL
    # DEBUG D#790 => __node_gen_10(D)->_M_t
    # DEBUG D#632 => D#790
    # DEBUG __node => NULL
    # DEBUG __x => D#1150
    # DEBUG this => D#632
    # DEBUG D#631 => D#632
    # DEBUG this => NULL
    # DEBUG D#1154 => &MEM[(struct _Rb_tree_node *)_37]._M_value_field
    # DEBUG __r => D#1154
    # DEBUG D#538 => D#631
    # DEBUG this => D#538
    # DEBUG D#537 => D#538
    # DEBUG this => D#537
    # DEBUG this => NULL
    # DEBUG D.57746 => NULL
    # DEBUG this => NULL
    # DEBUG __p => D#1154
    # DEBUG __val => D#1150
    # DEBUG this => D#630
    # DEBUG D#24 => 20
    # DEBUG __p => D#1154
    # DEBUG D.59472 => D#24
    # .MEM_85 = VDEF <.MEM_59>
    MEM[(struct pair *)_37 + 32B] = MEM[(const struct pair &)__x_9(D) + 32];
    goto <bb 15>;

  }
  bb_46 (preds = {bb_2 }, succs = {bb_15 })
  {
    <bb 46>:
    # DEBUG __node => NULL
    # DEBUG __node => NULL
    # DEBUG D#792 => __node_gen_10(D)->_M_t
    # DEBUG D#727 => D#792
    # DEBUG __x => D#1150
    # DEBUG this => D#727
    # DEBUG D#726 => D#727
    # DEBUG D#725 => D#727
    # DEBUG D#724 => D#725
    # DEBUG this => D#724
    # DEBUG D#723 => D#724
    # DEBUG this => D#723
    # DEBUG __n => 1
    # DEBUG __a => D#722
    # DEBUG D#721 => D#722
    # DEBUG D#719 => D#721
    # DEBUG D#720 => 0B
    # DEBUG __n => 1
    # DEBUG this => D#719
    # DEBUG D.66921 => D#720
    # DEBUG D#718 => D#719
    # DEBUG D#717 => D#718
    # DEBUG this => D#717
    # .MEM_86 = VDEF <.MEM_7(D)>
    _55 = operator new (56);
    # DEBUG __tmp => _55
    # DEBUG D#632 => D#726
    # DEBUG __node => _55
    # DEBUG __x => D#1150
    # DEBUG this => D#632
    # DEBUG D#631 => D#632
    # DEBUG this => _55
    # DEBUG D#1155 => &_55->_M_value_field
    # DEBUG __r => D#1155
    # DEBUG D#538 => D#631
    # DEBUG this => D#538
    # DEBUG D#537 => D#538
    # DEBUG this => D#537
    # DEBUG this => NULL
    # DEBUG D.57746 => NULL
    # DEBUG this => NULL
    # DEBUG __p => D#1155
    # DEBUG __val => D#1150
    # DEBUG this => D#630
    # DEBUG D#24 => 20
    # DEBUG __p => D#1155
    # DEBUG D.59472 => D#24
    # .MEM_87 = VDEF <.MEM_86>
    MEM[(struct pair *)_55 + 32B] = MEM[(const struct pair &)__x_9(D) + 32];
    goto <bb 15>;

  }
  bb_50 (preds = {bb_49 }, succs = {bb_42 })
  {
  <L15>:
    goto <bb 42> (<L10>);

  }
  loop_1 (header = 21, latch = 40, niter = )
  {
    bb_21 (preds = {bb_20 bb_40 }, succs = {bb_49 bb_22 })
    {
      <bb 21>:
      # __x_70 = PHI <__x_31(20), __x_32(40)>
      # __p_126 = PHI <__p_48(20), __p_60(40)>
      # .MEM_108 = PHI <.MEM_3(20), .MEM_5(40)>
      # DEBUG __p => __p_126
      # DEBUG __x => __x_70
      # DEBUG D#793 => this_8(D)
      # DEBUG __x => __x_70
      # DEBUG __node_gen => __node_gen_10(D)
      # DEBUG this => D#793
      # DEBUG this => __x_70
      # DEBUG D#1151 => &__x_70->_M_value_field
      # DEBUG __r => D#1151
      # DEBUG this => __node_gen_10(D)
      # DEBUG __arg => D#1151
      # DEBUG this => __node_gen_10(D)
      # VUSE <.MEM_108>
      _41 = __node_gen_10(D)->_M_nodes;
      if (_41 == 0B)
        goto <bb 49>;
      else
        goto <bb 22>;

    }
    bb_22 (preds = {bb_21 }, succs = {bb_23 bb_33 })
    {
      <bb 22>:
      # DEBUG __node => _41
      # VUSE <.MEM_108>
      _61 = _41->_M_parent;
      # .MEM_90 = VDEF <.MEM_108>
      __node_gen_10(D)->_M_nodes = _61;
      if (_61 != 0B)
        goto <bb 23>;
      else
        goto <bb 33>;

    }
    bb_23 (preds = {bb_22 }, succs = {bb_24 bb_32 })
    {
      <bb 23>:
      # VUSE <.MEM_90>
      _62 = _61->_M_right;
      if (_41 == _62)
        goto <bb 24>;
      else
        goto <bb 32>;

    }
    bb_24 (preds = {bb_23 }, succs = {bb_25 bb_47 })
    {
      <bb 24>:
      # .MEM_91 = VDEF <.MEM_90>
      _61->_M_right = 0B;
      # VUSE <.MEM_91>
      _63 = _61->_M_left;
      if (_63 != 0B)
        goto <bb 25>;
      else
        goto <bb 47>;

    }
    bb_25 (preds = {bb_24 }, succs = {bb_30 bb_26 })
    {
      <bb 25>:
      # .MEM_92 = VDEF <.MEM_91>
      __node_gen_10(D)->_M_nodes = _63;
      # DEBUG this => __node_gen_10(D)
      # VUSE <.MEM_92>
      _46 = _63->_M_right;
      if (_46 == 0B)
        goto <bb 30>;
      else
        goto <bb 26>;

    }
    bb_26 (preds = {bb_25 }, succs = {bb_27 })
    {
      <bb 26>:

    }
    bb_29 (preds = {bb_27 }, succs = {bb_51 })
    {
      <bb 29>:
      # _45 = PHI <_125(27)>

    }
    bb_51 (preds = {bb_29 }, succs = {bb_30 })
    {
      <bb 51>:
      # .MEM_121 = VDEF <.MEM_122>
      __node_gen_10(D)->_M_nodes = _45;

    }
    bb_30 (preds = {bb_51 bb_25 }, succs = {bb_31 bb_47 })
    {
      <bb 30>:
      # _110 = PHI <_45(51), _63(25)>
      # .MEM_109 = PHI <.MEM_121(51), .MEM_92(25)>
      # VUSE <.MEM_109>
      _66 = _110->_M_left;
      if (_66 != 0B)
        goto <bb 31>;
      else
        goto <bb 47>;

    }
    bb_31 (preds = {bb_30 }, succs = {bb_48 })
    {
      <bb 31>:
      # .MEM_94 = VDEF <.MEM_109>
      __node_gen_10(D)->_M_nodes = _66;
      goto <bb 48>;

    }
    bb_32 (preds = {bb_23 }, succs = {bb_48 })
    {
      <bb 32>:
      # .MEM_95 = VDEF <.MEM_90>
      _61->_M_left = 0B;
      goto <bb 48>;

    }
    bb_33 (preds = {bb_22 }, succs = {bb_48 })
    {
      <bb 33>:
      # .MEM_96 = VDEF <.MEM_90>
      __node_gen_10(D)->_M_root = 0B;
      goto <bb 48>;

    }
    bb_34 (preds = {bb_49 }, succs = {bb_35 })
    {
      <bb 34>:
      # DEBUG __tmp => _67
      # DEBUG D#632 => D#726
      # DEBUG __node => _67
      # DEBUG __x => D#1151
      # DEBUG this => D#632
      # DEBUG D#631 => D#632
      # DEBUG this => _67
      # DEBUG D#1153 => &_67->_M_value_field
      # DEBUG __r => D#1153
      # DEBUG D#538 => D#631
      # DEBUG this => D#538
      # DEBUG D#537 => D#538
      # DEBUG this => D#537
      # DEBUG this => NULL
      # DEBUG D.57746 => NULL
      # DEBUG this => NULL
      # DEBUG __p => D#1153
      # DEBUG __val => D#1151
      # DEBUG this => D#630
      # DEBUG D#24 => 20
      # DEBUG __p => D#1153
      # DEBUG D.59472 => D#24
      # .MEM_100 = VDEF <.MEM_99>
      MEM[(struct pair *)_67 + 32B] = MEM[(const struct pair &)__x_70 + 32];

    }
    bb_35 (preds = {bb_34 bb_56 }, succs = {bb_36 bb_39 })
    {
      <bb 35>:
      # __p_60 = PHI <_67(34), _41(56)>
      # .MEM_76 = PHI <.MEM_100(34), .MEM_98(56)>
      # DEBUG __tmp => NULL
      # VUSE <.MEM_76>
      _36 = __x_70->D.43962._M_color;
      # .MEM_42 = VDEF <.MEM_76>
      __p_60->D.43962._M_color = _36;
      # .MEM_43 = VDEF <.MEM_42>
      __p_60->D.43962._M_left = 0B;
      # .MEM_44 = VDEF <.MEM_43>
      __p_60->D.43962._M_right = 0B;
      # DEBUG __y => NULL
      # .MEM_18 = VDEF <.MEM_44>
      __p_126->D.43962._M_left = __p_60;
      # .MEM_19 = VDEF <.MEM_18>
      __p_60->D.43962._M_parent = __p_126;
      # VUSE <.MEM_19>
      _20 = __x_70->D.43962._M_right;
      if (_20 != 0B)
        goto <bb 36>;
      else
        goto <bb 39>;

    }
    bb_36 (preds = {bb_35 }, succs = {bb_37 bb_38 })
    {
      <bb 36>:
      # DEBUG D#172 => __x_70
      # DEBUG __x => D#172
      # .MEM_22 = VDEF <.MEM_19>
      _23 = std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_M_copy<std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_Reuse_or_alloc_node> (this_8(D), _20, __p_60, __node_gen_10(D));
      goto <bb 38>;

    }
    bb_38 (preds = {bb_36 }, succs = {bb_39 })
    {
      <bb 38>:
      # .MEM_24 = VDEF <.MEM_22>
      __p_60->D.43962._M_right = _23;

    }
    bb_39 (preds = {bb_35 bb_38 }, succs = {bb_19 bb_40 })
    {
      <bb 39>:
      # .MEM_5 = PHI <.MEM_19(35), .MEM_24(38)>
      # DEBUG __p => NULL
      # VUSE <.MEM_5>
      __x_32 = MEM[(struct _Rb_tree_node_base * *)__x_70 + 16B];
      # DEBUG D#171 => __x_70
      # DEBUG __x => D#171
      # DEBUG __x => NULL
      # DEBUG __p => __p_60
      # DEBUG __x => __x_32
      if (__x_32 == 0B)
        goto <bb 19>;
      else
        goto <bb 40>;

    }
    bb_40 (preds = {bb_39 }, succs = {bb_21 })
    {
      <bb 40>:
      goto <bb 21>;

    }
    bb_47 (preds = {bb_24 bb_30 }, succs = {bb_55 })
    {
      <bb 47>:
      # .MEM_56 = PHI <.MEM_91(24), .MEM_109(30)>

    }
    bb_55 (preds = {bb_47 }, succs = {bb_48 })
    {
      <bb 55>:

    }
    bb_48 (preds = {bb_55 bb_33 bb_32 bb_31 }, succs = {bb_56 })
    {
      <bb 48>:
      # .MEM_120 = PHI <.MEM_56(55), .MEM_96(33), .MEM_95(32), .MEM_94(31)>

    }
    bb_56 (preds = {bb_48 }, succs = {bb_35 })
    {
      <bb 56>:
      # DEBUG __node => NULL
      # DEBUG __node => NULL
      # DEBUG D#791 => __node_gen_10(D)->_M_t
      # DEBUG D#543 => D#791
      # DEBUG this => D#543
      # DEBUG __p => D#544
      # DEBUG D#542 => D#543
      # DEBUG D#541 => D#544
      # DEBUG D#540 => D#544
      # DEBUG this => D#540
      # DEBUG D#539 => &D#541->_M_value_field
      # DEBUG __r => D#539
      # DEBUG D#538 => D#542
      # DEBUG this => D#538
      # DEBUG D#537 => D#538
      # DEBUG this => D#537
      # DEBUG this => NULL
      # DEBUG D.57746 => NULL
      # DEBUG this => NULL
      # DEBUG D#330 => D#539
      # DEBUG this => D#329
      # DEBUG __p => D#330
      # DEBUG this => NULL
      # DEBUG this => NULL
      # DEBUG D#790 => __node_gen_10(D)->_M_t
      # DEBUG D#632 => D#790
      # DEBUG __node => NULL
      # DEBUG __x => D#1151
      # DEBUG this => D#632
      # DEBUG D#631 => D#632
      # DEBUG this => NULL
      # DEBUG D#1152 => &MEM[(struct _Rb_tree_node *)_41]._M_value_field
      # DEBUG __r => D#1152
      # DEBUG D#538 => D#631
      # DEBUG this => D#538
      # DEBUG D#537 => D#538
      # DEBUG this => D#537
      # DEBUG this => NULL
      # DEBUG D.57746 => NULL
      # DEBUG this => NULL
      # DEBUG __p => D#1152
      # DEBUG __val => D#1151
      # DEBUG this => D#630
      # DEBUG D#24 => 20
      # DEBUG __p => D#1152
      # DEBUG D.59472 => D#24
      # .MEM_98 = VDEF <.MEM_120>
      MEM[(struct pair *)_41 + 32B] = MEM[(const struct pair &)__x_70 + 32];
      goto <bb 35>;

    }
    bb_49 (preds = {bb_21 }, succs = {bb_34 bb_50 })
    {
      <bb 49>:
      # DEBUG __node => NULL
      # DEBUG __node => NULL
      # DEBUG D#792 => __node_gen_10(D)->_M_t
      # DEBUG D#727 => D#792
      # DEBUG __x => D#1151
      # DEBUG this => D#727
      # DEBUG D#726 => D#727
      # DEBUG D#725 => D#727
      # DEBUG D#724 => D#725
      # DEBUG this => D#724
      # DEBUG D#723 => D#724
      # DEBUG this => D#723
      # DEBUG __n => 1
      # DEBUG __a => D#722
      # DEBUG D#721 => D#722
      # DEBUG D#719 => D#721
      # DEBUG D#720 => 0B
      # DEBUG __n => 1
      # DEBUG this => D#719
      # DEBUG D.66955 => D#720
      # DEBUG D#718 => D#719
      # DEBUG D#717 => D#718
      # DEBUG this => D#717
      # .MEM_99 = VDEF <.MEM_108>
      _67 = operator new (56);
      goto <bb 34>;

    }
    loop_3 (header = 27, latch = 28, niter = )
    {
      bb_27 (preds = {bb_26 bb_28 }, succs = {bb_29 bb_28 })
      {
        <bb 27>:
        # _125 = PHI <_46(26), _65(28)>
        # .MEM_122 = PHI <.MEM_92(26), .MEM_122(28)>
        # VUSE <.MEM_122>
        _65 = _125->_M_right;
        if (_65 == 0B)
          goto <bb 29>;
        else
          goto <bb 28>;

      }
      bb_28 (preds = {bb_27 }, succs = {bb_27 })
      {
        <bb 28>:
        goto <bb 27>;

      }
    }
  }
  loop_2 (header = 8, latch = 9, niter = )
  {
    bb_8 (preds = {bb_7 bb_9 }, succs = {bb_10 bb_9 })
    {
      <bb 8>:
      # _97 = PHI <_74(7), _53(9)>
      # .MEM_124 = PHI <.MEM_79(7), .MEM_124(9)>
      # VUSE <.MEM_124>
      _53 = _97->_M_right;
      if (_53 == 0B)
        goto <bb 10>;
      else
        goto <bb 9>;

    }
    bb_9 (preds = {bb_8 }, succs = {bb_8 })
    {
      <bb 9>:
      goto <bb 8>;

    }
  }
}

Pass statistics:
----------------

std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_copy(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_Reuse_or_alloc_node; _Key = int; _Val = std::pair<const int, Allocator::sRequest>; _KeyOfValue = std::_Select1st<std::pair<const int, Allocator::sRequest> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, Allocator::sRequest> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, Allocator::sRequest> >*; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type = const std::_Rb_tree_node<std::pair<const int, Allocator::sRequest> >*] (struct _Rb_treeD.41462 * const thisD.47301, const struct _Rb_tree_nodeD.41466 * __xD.47302, struct _Rb_tree_nodeD.41466 * __pD.47303, struct _Reuse_or_alloc_nodeD.41486 & __node_genD.47304)
Eh tree:
   3 must_not_throw
   2 cleanup land:{2,<L12>}
   1 try land:{4,<L14>},{3,<L13>},{1,<L15>} catch:{}
{
  boolD.2757 __node_gen___M_nodes_lsm.1816D.66977;
  struct _Rb_tree_node_baseD.24800 * __node_gen___M_nodes_lsm.1815D.66976;
  boolD.2757 __node_gen___M_nodes_lsm.1814D.66975;
  struct _Rb_tree_node_baseD.24800 * __node_gen___M_nodes_lsm.1813D.66974;
  struct _Rb_tree_nodeD.41466 * D.66964;
  struct _Rb_tree_node_baseD.24800 * D.66944;
  struct _Rb_tree_nodeD.41466 * __nodeD.66933;
  struct _Rb_tree_nodeD.41466 * D.66941;
  struct _Rb_tree_nodeD.41466 * D.66930;
  struct _Rb_tree_node_baseD.24800 * D.66910;
  struct _Rb_tree_nodeD.41466 * __nodeD.66899;
  struct _Rb_tree_nodeD.41466 * D.66907;
  struct _Rb_tree_node_baseD.24800 * _13;
  struct _Rb_tree_nodeD.41466 * _15;
  _Rb_tree_colorD.24797 _17;
  struct _Rb_tree_node_baseD.24800 * _20;
  struct _Rb_tree_nodeD.41466 * _23;
  voidD.45 * _26;
  struct _Rb_tree_node_baseD.24800 * const _33;
  _Rb_tree_colorD.24797 _36;
  struct _Rb_tree_node_baseD.24800 * _37;
  struct _Rb_tree_node_baseD.24800 * _41;
  struct _Rb_tree_node_baseD.24800 * _45;
  struct _Rb_tree_node_baseD.24800 * _46;
  struct _Rb_tree_node_baseD.24800 * _49;
  struct _Rb_tree_node_baseD.24800 * _50;
  struct _Rb_tree_node_baseD.24800 * _51;
  struct _Rb_tree_node_baseD.24800 * _52;
  struct _Rb_tree_node_baseD.24800 * _53;
  struct _Rb_tree_node_baseD.24800 * _54;
  struct _Rb_tree_nodeD.41466 * _55;
  struct _Rb_tree_node_baseD.24800 * _61;
  struct _Rb_tree_node_baseD.24800 * _62;
  struct _Rb_tree_node_baseD.24800 * _63;
  struct _Rb_tree_node_baseD.24800 * _65;
  struct _Rb_tree_node_baseD.24800 * _66;
  struct _Rb_tree_nodeD.41466 * _67;
  struct _Rb_tree_node_baseD.24800 * _74;
  struct _Rb_tree_node_baseD.24800 * _97;
  struct _Rb_tree_node_baseD.24800 * _107;
  struct _Rb_tree_node_baseD.24800 * _110;
  struct _Rb_tree_node_baseD.24800 * _125;

;;   basic block 2, loop depth 0, count 0, freq 187, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#793ptD.0 => this_8(D)
  # DEBUG __xD.61767 => __x_9(D)
  # DEBUG __node_genD.61768 => __node_gen_10(D)
  # DEBUG thisD.61769 => D#793ptD.0
  # DEBUG thisD.61771 => __x_9(D)
  # DEBUG D#1150ptD.0 => &__x_9(D)->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#1150ptD.0
  # DEBUG thisD.66897 => __node_gen_10(D)
  # DEBUG __argD.66898 => D#1150ptD.0
  # DEBUG thisD.66908 => __node_gen_10(D)
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _37 = __node_gen_10(D)->_M_nodesD.47271;
  if (_37 == 0B)
    goto <bb 46>;
  else
    goto <bb 3>;
;;    succ:       46 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 168, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __nodeD.66909 => _37
  # VUSE <.MEM_7(D)>
  # PT = nonlocal escaped 
  _49 = _37->_M_parentD.24805;
  # .MEM_77 = VDEF <.MEM_7(D)>
  __node_gen_10(D)->_M_nodesD.47271 = _49;
  if (_49 != 0B)
    goto <bb 4>;
  else
    goto <bb 14>;
;;    succ:       4 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 143, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_77>
  # PT = nonlocal escaped 
  _50 = _49->_M_rightD.24807;
  if (_37 == _50)
    goto <bb 5>;
  else
    goto <bb 13>;
;;    succ:       5 [21.6%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [78.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 31, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [21.6%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_78 = VDEF <.MEM_77>
  _49->_M_rightD.24807 = 0B;
  # VUSE <.MEM_78>
  # PT = nonlocal escaped 
  _51 = _49->_M_leftD.24806;
  if (_51 != 0B)
    goto <bb 6>;
  else
    goto <bb 44>;
;;    succ:       6 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 28, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_79 = VDEF <.MEM_78>
  __node_gen_10(D)->_M_nodesD.47271 = _51;
  # DEBUG thisD.66911 => __node_gen_10(D)
  # VUSE <.MEM_79>
  # PT = nonlocal escaped 
  _74 = _51->_M_rightD.24807;
  if (_74 == 0B)
    goto <bb 11>;
  else
    goto <bb 7>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 25, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 281, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # _97 = PHI <_74(7), _53(9)>
  # .MEM_124 = PHI <.MEM_79(7), .MEM_124(9)>
  # VUSE <.MEM_124>
  # PT = nonlocal escaped 
  _53 = _97->_M_rightD.24807;
  if (_53 == 0B)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 256, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 25, maybe hot
;;    prev block 9, next block 52, flags: (NEW)
;;    pred:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # _52 = PHI <_97(8)>
;;    succ:       52 [100.0%]  (FALLTHRU)

;;   basic block 52, loop depth 0, count 0, freq 25, maybe hot
;;    prev block 10, next block 11, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU)
  # .MEM_2 = VDEF <.MEM_124>
  __node_gen_10(D)->_M_nodesD.47271 = _52;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 28, maybe hot
;;    prev block 52, next block 12, flags: (NEW, REACHABLE)
;;    pred:       52 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # _107 = PHI <_52(52), _51(6)>
  # .MEM_123 = PHI <.MEM_2(52), .MEM_79(6)>
  # VUSE <.MEM_123>
  # PT = nonlocal escaped 
  _54 = _107->_M_leftD.24806;
  if (_54 != 0B)
    goto <bb 12>;
  else
    goto <bb 44>;
;;    succ:       12 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 24, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_81 = VDEF <.MEM_123>
  __node_gen_10(D)->_M_nodesD.47271 = _54;
  goto <bb 45>;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 112, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       4 [78.4%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_82 = VDEF <.MEM_77>
  _49->_M_leftD.24806 = 0B;
  goto <bb 45>;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 25, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       3 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_83 = VDEF <.MEM_77>
  __node_gen_10(D)->_M_rootD.47270 = 0B;
  goto <bb 45>;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 187, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       46 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                54 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped { D.66971 } (escaped heap)
  # __p_48 = PHI <_55(46), _37(54)>
  # .MEM_72 = PHI <.MEM_87(46), .MEM_85(54)>
  # DEBUG __tmpD.61770 => NULL
  # VUSE <.MEM_72>
  _17 = __x_9(D)->D.43962._M_colorD.24804;
  # .MEM_38 = VDEF <.MEM_72>
  __p_48->D.43962._M_colorD.24804 = _17;
  # .MEM_39 = VDEF <.MEM_38>
  __p_48->D.43962._M_leftD.24806 = 0B;
  # .MEM_40 = VDEF <.MEM_39>
  __p_48->D.43962._M_rightD.24807 = 0B;
  # DEBUG __topD.47381 => NULL
  # .MEM_12 = VDEF <.MEM_40>
  __p_48->D.43962._M_parentD.24805 = __p_11(D);
  # VUSE <.MEM_12>
  # PT = nonlocal escaped 
  _13 = __x_9(D)->D.43962._M_rightD.24807;
  if (_13 != 0B)
    goto <bb 16>;
  else
    goto <bb 18>;
;;    succ:       16 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 131, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       15 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12>
  # PT = nonlocal escaped 
  _33 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_9(D) + 24B];
  # DEBUG D#172ptD.0 => __x_9(D)
  # DEBUG __xD.61774 => D#172ptD.0
  [LP 3] # .MEM_14 = VDEF <.MEM_12>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.66971 D.66972 } (escaped heap)
  # CLB = nonlocal null { D.66971 D.66972 } (escaped heap)
  _15 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_M_copyINSA_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIS4_EPKSE_SF_RT_D.47300 (this_8(D), _33, __p_48, __node_gen_10(D));
;;    succ:       41 (EH,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 131, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_16 = VDEF <.MEM_14>
  __p_48->D.43962._M_rightD.24807 = _15;
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 188, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       15 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_3 = PHI <.MEM_12(15), .MEM_16(17)>
  # DEBUG __pD.47303 => NULL
  # VUSE <.MEM_3>
  # PT = nonlocal escaped 
  __x_31 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_9(D) + 16B];
  # DEBUG D#171ptD.0 => __x_9(D)
  # DEBUG __xD.61777 => D#171ptD.0
  # DEBUG __xD.47302 => NULL
  # DEBUG __pD.47303 => __p_48
  # DEBUG __xD.47302 => __x_31
  if (__x_31 == 0B)
    goto <bb 19>;
  else
    goto <bb 20>;
;;    succ:       19 [3.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [97.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 188, maybe hot
;;    prev block 18, next block 57, flags: (NEW, REACHABLE)
;;    pred:       18 [3.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [3.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_58 = PHI <.MEM_3(18), .MEM_5(39)>
;;    succ:       57 [100.0%]  (FALLTHRU)

;;   basic block 57, loop depth 0, count 0, freq 188, maybe hot
;;    prev block 19, next block 20, flags: (NEW)
;;    pred:       19 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_58>
  return __p_48;
;;    succ:       EXIT [100.0%] 

;;   basic block 20, loop depth 0, count 0, freq 182, maybe hot
;;    prev block 57, next block 21, flags: (NEW)
;;    pred:       18 [97.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 1, count 0, freq 6062, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                40 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_70 = PHI <__x_31(20), __x_32(40)>
  # PT = nonlocal escaped { D.66971 D.66972 } (escaped heap)
  # __p_126 = PHI <__p_48(20), __p_60(40)>
  # .MEM_108 = PHI <.MEM_3(20), .MEM_5(40)>
  # DEBUG __pD.47303 => __p_126
  # DEBUG __xD.47302 => __x_70
  # DEBUG D#793ptD.0 => this_8(D)
  # DEBUG __xD.61779 => __x_70
  # DEBUG __node_genD.61780 => __node_gen_10(D)
  # DEBUG thisD.61781 => D#793ptD.0
  # DEBUG thisD.61783 => __x_70
  # DEBUG D#1151ptD.0 => &__x_70->_M_value_fieldD.43957
  # DEBUG __rD.52840 => D#1151ptD.0
  # DEBUG thisD.66931 => __node_gen_10(D)
  # DEBUG __argD.66932 => D#1151ptD.0
  # DEBUG thisD.66942 => __node_gen_10(D)
  # VUSE <.MEM_108>
  # PT = nonlocal escaped 
  _41 = __node_gen_10(D)->_M_nodesD.47271;
  if (_41 == 0B)
    goto <bb 49>;
  else
    goto <bb 22>;
;;    succ:       49 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 5448, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       21 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __nodeD.66943 => _41
  # VUSE <.MEM_108>
  # PT = nonlocal escaped 
  _61 = _41->_M_parentD.24805;
  # .MEM_90 = VDEF <.MEM_108>
  __node_gen_10(D)->_M_nodesD.47271 = _61;
  if (_61 != 0B)
    goto <bb 23>;
  else
    goto <bb 33>;
;;    succ:       23 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 4630, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       22 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_90>
  # PT = nonlocal escaped 
  _62 = _61->_M_rightD.24807;
  if (_41 == _62)
    goto <bb 24>;
  else
    goto <bb 32>;
;;    succ:       24 [21.6%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [78.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 1, count 0, freq 1002, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [21.6%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_91 = VDEF <.MEM_90>
  _61->_M_rightD.24807 = 0B;
  # VUSE <.MEM_91>
  # PT = nonlocal escaped 
  _63 = _61->_M_leftD.24806;
  if (_63 != 0B)
    goto <bb 25>;
  else
    goto <bb 47>;
;;    succ:       25 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       24 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_92 = VDEF <.MEM_91>
  __node_gen_10(D)->_M_nodesD.47271 = _63;
  # DEBUG thisD.66945 => __node_gen_10(D)
  # VUSE <.MEM_92>
  # PT = nonlocal escaped 
  _46 = _63->_M_rightD.24807;
  if (_46 == 0B)
    goto <bb 30>;
  else
    goto <bb 26>;
;;    succ:       30 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 26, next block 28, flags: (NEW)
;;    pred:       26 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                28 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # _125 = PHI <_46(26), _65(28)>
  # .MEM_122 = PHI <.MEM_92(26), .MEM_122(28)>
  # VUSE <.MEM_122>
  # PT = nonlocal escaped 
  _65 = _125->_M_rightD.24807;
  if (_65 == 0B)
    goto <bb 29>;
  else
    goto <bb 28>;
;;    succ:       29 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 2, count 0, freq 8281, maybe hot
;;    prev block 27, next block 29, flags: (NEW)
;;    pred:       27 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 27>;
;;    succ:       27 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 29, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 28, next block 51, flags: (NEW)
;;    pred:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # _45 = PHI <_125(27)>
;;    succ:       51 [100.0%]  (FALLTHRU)

;;   basic block 51, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 29, next block 30, flags: (NEW)
;;    pred:       29 [100.0%]  (FALLTHRU)
  # .MEM_121 = VDEF <.MEM_122>
  __node_gen_10(D)->_M_nodesD.47271 = _45;
;;    succ:       30 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 30, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 51, next block 31, flags: (NEW, REACHABLE)
;;    pred:       51 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                25 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # _110 = PHI <_45(51), _63(25)>
  # .MEM_109 = PHI <.MEM_121(51), .MEM_92(25)>
  # VUSE <.MEM_109>
  # PT = nonlocal escaped 
  _66 = _110->_M_leftD.24806;
  if (_66 != 0B)
    goto <bb 31>;
  else
    goto <bb 47>;
;;    succ:       31 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 1, count 0, freq 765, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       30 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_94 = VDEF <.MEM_109>
  __node_gen_10(D)->_M_nodesD.47271 = _66;
  goto <bb 48>;
;;    succ:       48 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 1, count 0, freq 3629, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       23 [78.4%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_95 = VDEF <.MEM_90>
  _61->_M_leftD.24806 = 0B;
  goto <bb 48>;
;;    succ:       48 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 1, count 0, freq 817, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       22 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_96 = VDEF <.MEM_90>
  __node_gen_10(D)->_M_rootD.47270 = 0B;
  goto <bb 48>;
;;    succ:       48 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 1, count 0, freq 407, maybe hot
;;   Invalid sum of incoming frequencies 615, should be 407
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       49 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __tmpD.66950 => _67
  # DEBUG D#632ptD.0 => D#726ptD.0
  # DEBUG __nodeD.66959 => _67
  # DEBUG __xD.66958 => D#1151ptD.0
  # DEBUG thisD.66957 => D#632ptD.0
  # DEBUG D#631ptD.0 => D#632ptD.0
  # DEBUG thisD.66960 => _67
  # DEBUG D#1153ptD.0 => &_67->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#1153ptD.0
  # DEBUG D#538ptD.0 => D#631ptD.0
  # DEBUG thisD.59488 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG __pD.66963 => D#1153ptD.0
  # DEBUG __valD.66962 => D#1151ptD.0
  # DEBUG thisD.66961 => D#630ptD.0
  # DEBUG D#24ptD.0 => 20
  # DEBUG __pD.59471 => D#1153ptD.0
  # DEBUG D.59472 => D#24ptD.0
  # .MEM_100 = VDEF <.MEM_99>
  MEM[(struct pairD.37146 *)_67 + 32B] = MEM[(const struct pairD.37146 &)__x_70 + 32];
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 35, loop depth 1, count 0, freq 6062, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       34 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                56 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped { D.66972 } (escaped heap)
  # __p_60 = PHI <_67(34), _41(56)>
  # .MEM_76 = PHI <.MEM_100(34), .MEM_98(56)>
  # DEBUG __tmpD.61782 => NULL
  # VUSE <.MEM_76>
  _36 = __x_70->D.43962._M_colorD.24804;
  # .MEM_42 = VDEF <.MEM_76>
  __p_60->D.43962._M_colorD.24804 = _36;
  # .MEM_43 = VDEF <.MEM_42>
  __p_60->D.43962._M_leftD.24806 = 0B;
  # .MEM_44 = VDEF <.MEM_43>
  __p_60->D.43962._M_rightD.24807 = 0B;
  # DEBUG __yD.47386 => NULL
  # .MEM_18 = VDEF <.MEM_44>
  __p_126->D.43962._M_leftD.24806 = __p_60;
  # .MEM_19 = VDEF <.MEM_18>
  __p_60->D.43962._M_parentD.24805 = __p_126;
  # VUSE <.MEM_19>
  # PT = nonlocal escaped 
  _20 = __x_70->D.43962._M_rightD.24807;
  if (_20 != 0B)
    goto <bb 36>;
  else
    goto <bb 39>;
;;    succ:       36 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 36, loop depth 1, count 0, freq 4233, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       35 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#172ptD.0 => __x_70
  # DEBUG __xD.61786 => D#172ptD.0
  [LP 4] # .MEM_22 = VDEF <.MEM_19>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.66971 D.66972 } (escaped heap)
  # CLB = nonlocal null { D.66971 D.66972 } (escaped heap)
  _23 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_M_copyINSA_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIS4_EPKSE_SF_RT_D.47300 (this_8(D), _20, __p_60, __node_gen_10(D));
  goto <bb 38>;
;;    succ:       37 (EH,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 36, next block 38, flags: (NEW)
;;    pred:       36 (EH,EXECUTABLE)
<L14>: [LP 4]
  goto <bb 42> (<L10>);
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 38, loop depth 1, count 0, freq 4233, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       36 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_24 = VDEF <.MEM_22>
  __p_60->D.43962._M_rightD.24807 = _23;
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 1, count 0, freq 6063, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       35 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_5 = PHI <.MEM_19(35), .MEM_24(38)>
  # DEBUG __pD.47303 => NULL
  # VUSE <.MEM_5>
  # PT = nonlocal escaped 
  __x_32 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_70 + 16B];
  # DEBUG D#171ptD.0 => __x_70
  # DEBUG __xD.61789 => D#171ptD.0
  # DEBUG __xD.47302 => NULL
  # DEBUG __pD.47303 => __p_60
  # DEBUG __xD.47302 => __x_32
  if (__x_32 == 0B)
    goto <bb 19>;
  else
    goto <bb 40>;
;;    succ:       19 [3.0%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [97.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 1, count 0, freq 5881, maybe hot
;;    prev block 39, next block 41, flags: (NEW)
;;    pred:       39 [97.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 21>;
;;    succ:       21 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 41, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 40, next block 42, flags: (NEW)
;;    pred:       16 (EH,EXECUTABLE)
<L13>: [LP 3]
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       41 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                50 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_6 = PHI <.MEM_14(41), .MEM_99(50), .MEM_22(37)>
<L10>:
  # VUSE <.MEM_6>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _26 = __builtin_eh_pointerD.2738 (1);
  # .MEM_27 = VDEF <.MEM_6>
  # USE = nonlocal null { D.66971 D.66972 } (escaped heap)
  # CLB = nonlocal null { D.66971 D.66972 } (escaped heap)
  __cxa_begin_catchD.14644 (_26);
  # .MEM_28 = VDEF <.MEM_27>
  # USE = nonlocal null { D.66971 D.66972 } (escaped heap)
  # CLB = nonlocal null { D.66971 D.66972 } (escaped heap)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (this_8(D), __p_48);
  [LP 2] # .MEM_29 = VDEF <.MEM_28>
  # USE = nonlocal null { D.66971 D.66972 } (escaped heap)
  # CLB = nonlocal null { D.66971 D.66972 } (escaped heap)
  __cxa_rethrowD.45013 ();
;;    succ:       43 (EH,EXECUTABLE)

;;   basic block 43, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 42, next block 44, flags: (NEW, REACHABLE)
;;    pred:       42 (EH,EXECUTABLE)
<L12>: [LP 2]
  [MNT 3] # .MEM_30 = VDEF <.MEM_29>
  # USE = nonlocal null { D.66971 D.66972 } (escaped heap)
  # CLB = nonlocal null { D.66971 D.66972 } (escaped heap)
  __cxa_end_catchD.14643 ();
  resx 2
;;    succ:      

;;   basic block 44, loop depth 0, count 0, freq 7, maybe hot
;;    prev block 43, next block 53, flags: (NEW)
;;    pred:       5 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_75 = PHI <.MEM_78(5), .MEM_123(11)>
;;    succ:       53 [100.0%]  (FALLTHRU)

;;   basic block 53, loop depth 0, count 0, freq 7, maybe hot
;;    prev block 44, next block 45, flags: (NEW)
;;    pred:       44 [100.0%]  (FALLTHRU)
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 45, loop depth 0, count 0, freq 175, maybe hot
;;    prev block 53, next block 54, flags: (NEW, REACHABLE)
;;    pred:       53 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_59 = PHI <.MEM_75(53), .MEM_83(14), .MEM_82(13), .MEM_81(12)>
;;    succ:       54 [100.0%]  (FALLTHRU)

;;   basic block 54, loop depth 0, count 0, freq 175, maybe hot
;;    prev block 45, next block 46, flags: (NEW)
;;    pred:       45 [100.0%]  (FALLTHRU)
  # DEBUG __nodeD.66899 => NULL
  # DEBUG __nodeD.66899 => NULL
  # DEBUG D#791ptD.0 => __node_gen_10(D)->_M_tD.47272
  # DEBUG D#543ptD.0 => D#791ptD.0
  # DEBUG thisD.61752 => D#543ptD.0
  # DEBUG __pD.61751 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG D#790ptD.0 => __node_gen_10(D)->_M_tD.47272
  # DEBUG D#632ptD.0 => D#790ptD.0
  # DEBUG __nodeD.66902 => NULL
  # DEBUG __xD.66901 => D#1150ptD.0
  # DEBUG thisD.66900 => D#632ptD.0
  # DEBUG D#631ptD.0 => D#632ptD.0
  # DEBUG thisD.66903 => NULL
  # DEBUG D#1154ptD.0 => &MEM[(struct _Rb_tree_nodeD.41466 *)_37]._M_value_fieldD.43957
  # DEBUG __rD.53249 => D#1154ptD.0
  # DEBUG D#538ptD.0 => D#631ptD.0
  # DEBUG thisD.59488 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG __pD.66906 => D#1154ptD.0
  # DEBUG __valD.66905 => D#1150ptD.0
  # DEBUG thisD.66904 => D#630ptD.0
  # DEBUG D#24ptD.0 => 20
  # DEBUG __pD.59471 => D#1154ptD.0
  # DEBUG D.59472 => D#24ptD.0
  # .MEM_85 = VDEF <.MEM_59>
  MEM[(struct pairD.37146 *)_37 + 32B] = MEM[(const struct pairD.37146 &)__x_9(D) + 32];
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 46, loop depth 0, count 0, freq 19, maybe hot
;;    prev block 54, next block 47, flags: (NEW, REACHABLE)
;;    pred:       2 [10.1%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __nodeD.66899 => NULL
  # DEBUG __nodeD.66899 => NULL
  # DEBUG D#792ptD.0 => __node_gen_10(D)->_M_tD.47272
  # DEBUG D#727ptD.0 => D#792ptD.0
  # DEBUG __xD.66914 => D#1150ptD.0
  # DEBUG thisD.66915 => D#727ptD.0
  # DEBUG D#726ptD.0 => D#727ptD.0
  # DEBUG D#725ptD.0 => D#727ptD.0
  # DEBUG D#724ptD.0 => D#725ptD.0
  # DEBUG thisD.66917 => D#724ptD.0
  # DEBUG D#723ptD.0 => D#724ptD.0
  # DEBUG thisD.61114 => D#723ptD.0
  # DEBUG __nD.66919 => 1
  # DEBUG __aD.66918 => D#722ptD.0
  # DEBUG D#721ptD.0 => D#722ptD.0
  # DEBUG D#719ptD.0 => D#721ptD.0
  # DEBUG D#720ptD.0 => 0B
  # DEBUG __nD.66922 => 1
  # DEBUG thisD.66920 => D#719ptD.0
  # DEBUG D.66921 => D#720ptD.0
  # DEBUG D#718ptD.0 => D#719ptD.0
  # DEBUG D#717ptD.0 => D#718ptD.0
  # DEBUG thisD.61072 => D#717ptD.0
  # .MEM_86 = VDEF <.MEM_7(D)>
  # PT = { D.66971 } (escaped heap)
  # USE = nonlocal null { D.66971 D.66972 } (escaped heap)
  # CLB = nonlocal null { D.66971 D.66972 } (escaped heap)
  _55 = _ZnwmD.2764 (56);
  # DEBUG __tmpD.66916 => _55
  # DEBUG D#632ptD.0 => D#726ptD.0
  # DEBUG __nodeD.66925 => _55
  # DEBUG __xD.66924 => D#1150ptD.0
  # DEBUG thisD.66923 => D#632ptD.0
  # DEBUG D#631ptD.0 => D#632ptD.0
  # DEBUG thisD.66926 => _55
  # DEBUG D#1155ptD.0 => &_55->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#1155ptD.0
  # DEBUG D#538ptD.0 => D#631ptD.0
  # DEBUG thisD.59488 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG __pD.66929 => D#1155ptD.0
  # DEBUG __valD.66928 => D#1150ptD.0
  # DEBUG thisD.66927 => D#630ptD.0
  # DEBUG D#24ptD.0 => 20
  # DEBUG __pD.59471 => D#1155ptD.0
  # DEBUG D.59472 => D#24ptD.0
  # .MEM_87 = VDEF <.MEM_86>
  MEM[(struct pairD.37146 *)_55 + 32B] = MEM[(const struct pairD.37146 &)__x_9(D) + 32];
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 47, loop depth 1, count 0, freq 237, maybe hot
;;    prev block 46, next block 55, flags: (NEW)
;;    pred:       24 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                30 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_56 = PHI <.MEM_91(24), .MEM_109(30)>
;;    succ:       55 [100.0%]  (FALLTHRU)

;;   basic block 55, loop depth 1, count 0, freq 237, maybe hot
;;    prev block 47, next block 48, flags: (NEW)
;;    pred:       47 [100.0%]  (FALLTHRU)
;;    succ:       48 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 48, loop depth 1, count 0, freq 5655, maybe hot
;;   Invalid sum of incoming frequencies 5448, should be 5655
;;    prev block 55, next block 56, flags: (NEW, REACHABLE)
;;    pred:       55 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_120 = PHI <.MEM_56(55), .MEM_96(33), .MEM_95(32), .MEM_94(31)>
;;    succ:       56 [100.0%]  (FALLTHRU)

;;   basic block 56, loop depth 1, count 0, freq 5655, maybe hot
;;    prev block 48, next block 49, flags: (NEW)
;;    pred:       48 [100.0%]  (FALLTHRU)
  # DEBUG __nodeD.66933 => NULL
  # DEBUG __nodeD.66933 => NULL
  # DEBUG D#791ptD.0 => __node_gen_10(D)->_M_tD.47272
  # DEBUG D#543ptD.0 => D#791ptD.0
  # DEBUG thisD.61752 => D#543ptD.0
  # DEBUG __pD.61751 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG D#790ptD.0 => __node_gen_10(D)->_M_tD.47272
  # DEBUG D#632ptD.0 => D#790ptD.0
  # DEBUG __nodeD.66936 => NULL
  # DEBUG __xD.66935 => D#1151ptD.0
  # DEBUG thisD.66934 => D#632ptD.0
  # DEBUG D#631ptD.0 => D#632ptD.0
  # DEBUG thisD.66937 => NULL
  # DEBUG D#1152ptD.0 => &MEM[(struct _Rb_tree_nodeD.41466 *)_41]._M_value_fieldD.43957
  # DEBUG __rD.53249 => D#1152ptD.0
  # DEBUG D#538ptD.0 => D#631ptD.0
  # DEBUG thisD.59488 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG __pD.66940 => D#1152ptD.0
  # DEBUG __valD.66939 => D#1151ptD.0
  # DEBUG thisD.66938 => D#630ptD.0
  # DEBUG D#24ptD.0 => 20
  # DEBUG __pD.59471 => D#1152ptD.0
  # DEBUG D.59472 => D#24ptD.0
  # .MEM_98 = VDEF <.MEM_120>
  MEM[(struct pairD.37146 *)_41 + 32B] = MEM[(const struct pairD.37146 &)__x_70 + 32];
  goto <bb 35>;
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 49, loop depth 1, count 0, freq 615, maybe hot
;;    prev block 56, next block 50, flags: (NEW, REACHABLE)
;;    pred:       21 [10.1%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __nodeD.66933 => NULL
  # DEBUG __nodeD.66933 => NULL
  # DEBUG D#792ptD.0 => __node_gen_10(D)->_M_tD.47272
  # DEBUG D#727ptD.0 => D#792ptD.0
  # DEBUG __xD.66948 => D#1151ptD.0
  # DEBUG thisD.66949 => D#727ptD.0
  # DEBUG D#726ptD.0 => D#727ptD.0
  # DEBUG D#725ptD.0 => D#727ptD.0
  # DEBUG D#724ptD.0 => D#725ptD.0
  # DEBUG thisD.66951 => D#724ptD.0
  # DEBUG D#723ptD.0 => D#724ptD.0
  # DEBUG thisD.61114 => D#723ptD.0
  # DEBUG __nD.66953 => 1
  # DEBUG __aD.66952 => D#722ptD.0
  # DEBUG D#721ptD.0 => D#722ptD.0
  # DEBUG D#719ptD.0 => D#721ptD.0
  # DEBUG D#720ptD.0 => 0B
  # DEBUG __nD.66956 => 1
  # DEBUG thisD.66954 => D#719ptD.0
  # DEBUG D.66955 => D#720ptD.0
  # DEBUG D#718ptD.0 => D#719ptD.0
  # DEBUG D#717ptD.0 => D#718ptD.0
  # DEBUG thisD.61072 => D#717ptD.0
  [LP 1] # .MEM_99 = VDEF <.MEM_108>
  # PT = { D.66972 } (escaped heap)
  # USE = nonlocal null { D.66971 D.66972 } (escaped heap)
  # CLB = nonlocal null { D.66971 D.66972 } (escaped heap)
  _67 = _ZnwmD.2764 (56);
  goto <bb 34>;
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                50 (EH,EXECUTABLE)

;;   basic block 50, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 49, next block 1, flags: (NEW)
;;    pred:       49 (EH,EXECUTABLE)
<L15>: [LP 1]
  goto <bb 42> (<L10>);
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

}



;; Function std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::operator=(const std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&) [with _Key = int; _Val = std::pair<const int, Allocator::sRequest>; _KeyOfValue = std::_Select1st<std::pair<const int, Allocator::sRequest> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, Allocator::sRequest> >] (_ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EEaSERKSA_, funcdef_no=2603, decl_uid=41857, cgraph_uid=1273, symbol_order=1274)


Pass statistics:
----------------

std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::operator=(const std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&) [with _Key = int; _Val = std::pair<const int, Allocator::sRequest>; _KeyOfValue = std::_Select1st<std::pair<const int, Allocator::sRequest> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, Allocator::sRequest> >] (struct _Rb_treeD.41462 * const thisD.41858, const struct _Rb_treeD.41462 & __xD.41859)
Eh tree:
   2 cleanup land:{1,<L7>}
{
  struct _Rb_tree_node_baseD.24800 * __xD.61812;
  struct _Rb_tree_node_baseD.24800 * __xD.61805;
  struct _Reuse_or_alloc_nodeD.41486 __roanD.47251;
  struct _Rb_tree_node_baseD.24800 * _6;
  struct _Rb_treeD.41462 & prephitmp_12;
  struct _Rb_tree_node_baseD.24800 * _13;
  struct _Rb_tree_node_baseD.24800 * _15;
  struct _Rb_tree_node_baseD.24800 * _16;
  long unsigned intD.14 _18;
  struct _Rb_tree_node_baseD.24800 * _21;
  struct _Rb_tree_node_baseD.24800 * const _23;
  struct _Rb_treeD.41462 & _28;
  struct _Rb_tree_node_baseD.24800 * pretmp_40;
  struct _Rb_tree_node_baseD.24800 * prephitmp_42;
  struct _Rb_treeD.41462 & pretmp_43;

;;   basic block 2, loop depth 0, count 0, freq 1178, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  if (this_3(D) != __x_4(D))
    goto <bb 3>;
  else
    goto <bb 17>;
;;    succ:       3 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 1059, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.61796 => &__roanD.47251
  # DEBUG __tD.61797 => this_3(D)
  # DEBUG thisD.58354 => this_3(D)
  # VUSE <.MEM_5(D)>
  # PT = nonlocal escaped 
  _6 = MEM[(struct _Rb_tree_node_baseD.24800 * &)this_3(D) + 16];
  # .MEM_29 = VDEF <.MEM_5(D)>
  __roanD.47251._M_rootD.47270 = _6;
  # DEBUG thisD.58352 => this_3(D)
  # VUSE <.MEM_29>
  # PT = nonlocal escaped 
  _15 = MEM[(struct _Rb_tree_node_baseD.24800 * &)this_3(D) + 32];
  # .MEM_30 = VDEF <.MEM_29>
  __roanD.47251._M_nodesD.47271 = _15;
  # .MEM_31 = VDEF <.MEM_30>
  __roanD.47251._M_tD.47272 = this_3(D);
  if (_6 != 0B)
    goto <bb 4>;
  else
    goto <bb 6>;
;;    succ:       4 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_32 = VDEF <.MEM_31>
  _6->_M_parentD.24805 = 0B;
  # VUSE <.MEM_32>
  # PT = nonlocal escaped 
  _13 = _15->_M_leftD.24806;
  if (_13 != 0B)
    goto <bb 5>;
  else
    goto <bb 7>;
;;    succ:       5 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_33 = VDEF <.MEM_32>
  __roanD.47251._M_nodesD.47271 = _13;
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 159, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       3 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_34 = VDEF <.MEM_31>
  __roanD.47251._M_nodesD.47271 = 0B;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 1059, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                4 [15.0%]  (FALSE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_20 = PHI <.MEM_33(5), .MEM_32(4), .MEM_34(6)>
  # DEBUG D#794ptD.0 => &this_3(D)->_M_implD.41540
  # DEBUG thisD.61795 => D#794ptD.0
  # .MEM_35 = VDEF <.MEM_20>
  MEM[(struct _Rb_tree_implD.41541 *)this_3(D)]._M_headerD.41695._M_parentD.24805 = 0B;
  # PT = nonlocal 
  _16 = &MEM[(struct _Rb_tree_implD.41541 *)this_3(D)]._M_headerD.41695;
  # .MEM_36 = VDEF <.MEM_35>
  MEM[(struct _Rb_tree_implD.41541 *)this_3(D)]._M_headerD.41695._M_leftD.24806 = _16;
  # .MEM_37 = VDEF <.MEM_36>
  MEM[(struct _Rb_tree_implD.41541 *)this_3(D)]._M_headerD.41695._M_rightD.24807 = _16;
  # .MEM_38 = VDEF <.MEM_37>
  MEM[(struct _Rb_tree_implD.41541 *)this_3(D)]._M_node_countD.41696 = 0;
  # VUSE <.MEM_38>
  # PT = nonlocal escaped 
  _23 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_4(D) + 16B];
  # DEBUG D#109ptD.0 => __x_4(D)
  # DEBUG thisD.61793 => D#109ptD.0
  if (_23 != 0B)
    goto <bb 8>;
  else
    goto <bb 16>;
;;    succ:       8 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.61803 => this_3(D)
  # DEBUG thisD.61801 => this_3(D)
  # DEBUG D#110ptD.0 => __x_4(D)
  # DEBUG thisD.61799 => D#110ptD.0
  [LP 1] # .MEM_9 = VDEF <.MEM_38>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.47251 } (escaped)
  # CLB = nonlocal null { D.47251 } (escaped)
  __x_10 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_M_copyINSA_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIS4_EPKSE_SF_RT_D.47300 (this_3(D), _23, _16, &__roanD.47251);
;;    succ:       18 (EH,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_11 = VDEF <.MEM_9>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)this_3(D) + 16] = __x_10;
  # DEBUG thisD.61817 => this_3(D)
  # DEBUG thisD.61815 => this_3(D)
  # DEBUG __xD.61812 => __x_10
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 10000, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_24 = PHI <__x_10(9), __x_25(11)>
  # DEBUG __xD.61813 => __x_24
  # VUSE <.MEM_11>
  # PT = nonlocal escaped 
  __x_25 = __x_24->_M_leftD.24806;
  if (__x_25 == 0B)
    goto <bb 12>;
  else
    goto <bb 11>;
;;    succ:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_50 = PHI <__x_24(10)>
  # .MEM_14 = VDEF <.MEM_11>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)this_3(D) + 24] = __x_50;
  # DEBUG thisD.61810 => this_3(D)
  # DEBUG thisD.61808 => this_3(D)
  # DEBUG __xD.61805 => __x_10
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 10000, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_8 = PHI <__x_10(12), __x_7(14)>
  # DEBUG __xD.61806 => __x_8
  # VUSE <.MEM_14>
  # PT = nonlocal escaped 
  __x_7 = __x_8->_M_rightD.24807;
  if (__x_7 == 0B)
    goto <bb 15>;
  else
    goto <bb 14>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       13 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_51 = PHI <__x_8(13)>
  # .MEM_17 = VDEF <.MEM_14>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)this_3(D) + 32] = __x_51;
  # VUSE <.MEM_17>
  _18 = __x_4(D)->_M_implD.41540._M_node_countD.41696;
  # .MEM_19 = VDEF <.MEM_17>
  this_3(D)->_M_implD.41540._M_node_countD.41696 = _18;
  # VUSE <.MEM_19>
  pretmp_40 = __roanD.47251._M_rootD.47270;
  # VUSE <.MEM_19>
  pretmp_43 = __roanD.47251._M_tD.47272;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 1059, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       7 [15.0%]  (FALSE_VALUE,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_38(7), .MEM_19(15)>
  # PT = nonlocal escaped 
  # prephitmp_42 = PHI <_6(7), pretmp_40(15)>
  # PT = nonlocal escaped 
  # prephitmp_12 = PHI <this_3(D)(7), pretmp_43(15)>
  # DEBUG thisD.61819 => &__roanD.47251
  # .MEM_41 = VDEF <.MEM_1>
  # USE = nonlocal null { D.47251 } (escaped)
  # CLB = nonlocal null { D.47251 } (escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (prephitmp_12, prephitmp_42);
  # .MEM_22 = VDEF <.MEM_41>
  __roanD.47251 ={v} {CLOBBER};
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 1178, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       2 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                16 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2 = PHI <.MEM_5(D)(2), .MEM_22(16)>
  # VUSE <.MEM_2>
  return this_3(D);
;;    succ:       EXIT [100.0%] 

;;   basic block 18, loop depth 0, count 0, freq 0
;;    prev block 17, next block 1, flags: (NEW, REACHABLE)
;;    pred:       8 (EH,EXECUTABLE)
<L7>: [LP 1]
  # DEBUG thisD.61820 => &__roanD.47251
  # VUSE <.MEM_9>
  # PT = nonlocal escaped 
  _21 = __roanD.47251._M_rootD.47270;
  # VUSE <.MEM_9>
  # PT = nonlocal escaped 
  _28 = __roanD.47251._M_tD.47272;
  # .MEM_39 = VDEF <.MEM_9>
  # USE = nonlocal null { D.47251 } (escaped)
  # CLB = nonlocal null { D.47251 } (escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (_28, _21);
  resx 2
;;    succ:      

}


Creating dr for MEM[(struct _Rb_tree_node_base * &)this_3(D) + 16]
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * &)this_3(D) + 16]
Creating dr for __roan._M_root
analyze_innermost: success.
	base_address: &__roan
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: __roan
	Access function 0: 0
Creating dr for MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32]
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32]
Creating dr for __roan._M_nodes
analyze_innermost: success.
	base_address: &__roan
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: __roan
	Access function 0: 64
Creating dr for __roan._M_t
analyze_innermost: success.
	base_address: &__roan
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: __roan
	Access function 0: 128
Creating dr for _6->_M_parent
analyze_innermost: success.
	base_address: _6
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: *_6
	Access function 0: 64
Creating dr for _15->_M_left
analyze_innermost: success.
	base_address: _15
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: *_15
	Access function 0: 128
Creating dr for __roan._M_nodes
analyze_innermost: success.
	base_address: &__roan
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: __roan
	Access function 0: 64
Creating dr for __roan._M_nodes
analyze_innermost: success.
	base_address: &__roan
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: __roan
	Access function 0: 64
Creating dr for MEM[(struct _Rb_tree_impl *)this_3(D)]._M_header._M_parent
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_impl *)this_3(D)]
	Access function 0: 64
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)this_3(D)]._M_header._M_left
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_impl *)this_3(D)]
	Access function 0: 128
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)this_3(D)]._M_header._M_right
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_impl *)this_3(D)]
	Access function 0: 192
	Access function 1: 64
Creating dr for MEM[(struct _Rb_tree_impl *)this_3(D)]._M_node_count
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_impl *)this_3(D)]
	Access function 0: 320
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_4(D) + 16B]
analyze_innermost: success.
	base_address: __x_4(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_4(D) + 16B]
Creating dr for __roan._M_root
analyze_innermost: success.
	base_address: &__roan
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: __roan
	Access function 0: 0
Creating dr for __roan._M_t
analyze_innermost: success.
	base_address: &__roan
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: __roan
	Access function 0: 128
Creating dr for MEM[(struct _Rb_tree_node_base * &)this_3(D) + 16]
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * &)this_3(D) + 16]
Creating dr for __x_24->_M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_24
	Access function 0: 128
Creating dr for __x_24->_M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_24
	Access function 0: 128
Creating dr for __x_24->_M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_24
	Access function 0: 128
Creating dr for __x_24->_M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_24
	Access function 0: 128
Creating dr for __x_24->_M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_24
	Access function 0: 128
Creating dr for __x_24->_M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_24
	Access function 0: 128
Creating dr for __x_24->_M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_24
	Access function 0: 128
Creating dr for __x_24->_M_left
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_24
	Access function 0: 128
Creating dr for MEM[(struct _Rb_tree_node_base * &)this_3(D) + 24]
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * &)this_3(D) + 24]
Creating dr for __x_8->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_8
	Access function 0: 192
Creating dr for __x_8->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_8
	Access function 0: 192
Creating dr for __x_8->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_8
	Access function 0: 192
Creating dr for __x_8->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_8
	Access function 0: 192
Creating dr for __x_8->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_8
	Access function 0: 192
Creating dr for __x_8->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_8
	Access function 0: 192
Creating dr for __x_8->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_8
	Access function 0: 192
Creating dr for __x_8->_M_right
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: *__x_8
	Access function 0: 192
Creating dr for MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32]
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32]
Creating dr for __x_4(D)->_M_impl._M_node_count
analyze_innermost: success.
	base_address: __x_4(D)
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: *__x_4(D)
	Access function 0: 320
	Access function 1: 0
Creating dr for this_3(D)->_M_impl._M_node_count
analyze_innermost: success.
	base_address: this_3(D)
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: *this_3(D)
	Access function 0: 320
	Access function 1: 0
Creating dr for __roan._M_root
analyze_innermost: success.
	base_address: &__roan
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: __roan
	Access function 0: 0
Creating dr for __roan._M_t
analyze_innermost: success.
	base_address: &__roan
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: __roan
	Access function 0: 128

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:22, LOOPS:2, CONDITIONS:7, STMTS:61)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_17 })
  {
    <bb 2>:
    if (this_3(D) != __x_4(D))
      goto <bb 3>;
    else
      goto <bb 17>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 bb_6 })
  {
    <bb 3>:
    # DEBUG this => &__roan
    # DEBUG __t => this_3(D)
    # DEBUG this => this_3(D)
    # VUSE <.MEM_5(D)>
    _6 = MEM[(struct _Rb_tree_node_base * &)this_3(D) + 16];
    # .MEM_29 = VDEF <.MEM_5(D)>
    __roan._M_root = _6;
    # DEBUG this => this_3(D)
    # VUSE <.MEM_29>
    _15 = MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32];
    # .MEM_30 = VDEF <.MEM_29>
    __roan._M_nodes = _15;
    # .MEM_31 = VDEF <.MEM_30>
    __roan._M_t = this_3(D);
    if (_6 != 0B)
      goto <bb 4>;
    else
      goto <bb 6>;

  }
  bb_4 (preds = {bb_3 }, succs = {bb_5 bb_7 })
  {
    <bb 4>:
    # .MEM_32 = VDEF <.MEM_31>
    _6->_M_parent = 0B;
    # VUSE <.MEM_32>
    _13 = _15->_M_left;
    if (_13 != 0B)
      goto <bb 5>;
    else
      goto <bb 7>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_7 })
  {
    <bb 5>:
    # .MEM_33 = VDEF <.MEM_32>
    __roan._M_nodes = _13;
    goto <bb 7>;

  }
  bb_6 (preds = {bb_3 }, succs = {bb_7 })
  {
    <bb 6>:
    # .MEM_34 = VDEF <.MEM_31>
    __roan._M_nodes = 0B;

  }
  bb_7 (preds = {bb_5 bb_4 bb_6 }, succs = {bb_8 bb_16 })
  {
    <bb 7>:
    # .MEM_20 = PHI <.MEM_33(5), .MEM_32(4), .MEM_34(6)>
    # DEBUG D#794 => &this_3(D)->_M_impl
    # DEBUG this => D#794
    # .MEM_35 = VDEF <.MEM_20>
    MEM[(struct _Rb_tree_impl *)this_3(D)]._M_header._M_parent = 0B;
    _16 = &MEM[(struct _Rb_tree_impl *)this_3(D)]._M_header;
    # .MEM_36 = VDEF <.MEM_35>
    MEM[(struct _Rb_tree_impl *)this_3(D)]._M_header._M_left = _16;
    # .MEM_37 = VDEF <.MEM_36>
    MEM[(struct _Rb_tree_impl *)this_3(D)]._M_header._M_right = _16;
    # .MEM_38 = VDEF <.MEM_37>
    MEM[(struct _Rb_tree_impl *)this_3(D)]._M_node_count = 0;
    # VUSE <.MEM_38>
    _23 = MEM[(struct _Rb_tree_node_base * *)__x_4(D) + 16B];
    # DEBUG D#109 => __x_4(D)
    # DEBUG this => D#109
    if (_23 != 0B)
      goto <bb 8>;
    else
      goto <bb 16>;

  }
  bb_8 (preds = {bb_7 }, succs = {bb_18 bb_9 })
  {
    <bb 8>:
    # DEBUG this => this_3(D)
    # DEBUG this => this_3(D)
    # DEBUG D#110 => __x_4(D)
    # DEBUG this => D#110
    # .MEM_9 = VDEF <.MEM_38>
    __x_10 = std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_M_copy<std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_Reuse_or_alloc_node> (this_3(D), _23, _16, &__roan);

  }
  bb_9 (preds = {bb_8 }, succs = {bb_10 })
  {
    <bb 9>:
    # .MEM_11 = VDEF <.MEM_9>
    MEM[(struct _Rb_tree_node_base * &)this_3(D) + 16] = __x_10;
    # DEBUG this => this_3(D)
    # DEBUG this => this_3(D)
    # DEBUG __x => __x_10

  }
  bb_12 (preds = {bb_10 }, succs = {bb_20 })
  {
    <bb 12>:
    # __x_50 = PHI <__x_24(10)>

  }
  bb_20 (preds = {bb_12 }, succs = {bb_13 })
  {
    <bb 20>:
    # .MEM_14 = VDEF <.MEM_11>
    MEM[(struct _Rb_tree_node_base * &)this_3(D) + 24] = __x_50;
    # DEBUG this => this_3(D)
    # DEBUG this => this_3(D)
    # DEBUG __x => __x_10

  }
  bb_15 (preds = {bb_13 }, succs = {bb_19 })
  {
    <bb 15>:
    # __x_51 = PHI <__x_8(13)>

  }
  bb_19 (preds = {bb_15 }, succs = {bb_16 })
  {
    <bb 19>:
    # .MEM_17 = VDEF <.MEM_14>
    MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32] = __x_51;
    # VUSE <.MEM_17>
    _18 = __x_4(D)->_M_impl._M_node_count;
    # .MEM_19 = VDEF <.MEM_17>
    this_3(D)->_M_impl._M_node_count = _18;
    # VUSE <.MEM_19>
    pretmp_40 = __roan._M_root;
    # VUSE <.MEM_19>
    pretmp_43 = __roan._M_t;

  }
  bb_16 (preds = {bb_7 bb_19 }, succs = {bb_17 })
  {
    <bb 16>:
    # .MEM_1 = PHI <.MEM_38(7), .MEM_19(19)>
    # prephitmp_42 = PHI <_6(7), pretmp_40(19)>
    # prephitmp_12 = PHI <this_3(D)(7), pretmp_43(19)>
    # DEBUG this => &__roan
    # .MEM_41 = VDEF <.MEM_1>
    std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_M_erase (prephitmp_12, prephitmp_42);
    # .MEM_22 = VDEF <.MEM_41>
    __roan ={v} {CLOBBER};

  }
  bb_17 (preds = {bb_2 bb_16 }, succs = {bb_21 })
  {
    <bb 17>:
    # .MEM_2 = PHI <.MEM_5(D)(2), .MEM_22(16)>

  }
  bb_21 (preds = {bb_17 }, succs = {bb_1 })
  {
    <bb 21>:
    # VUSE <.MEM_2>
    return this_3(D);

  }
  bb_18 (preds = {bb_8 }, succs = {})
  {
  <L7>:
    # DEBUG this => &__roan
    # VUSE <.MEM_9>
    _21 = __roan._M_root;
    # VUSE <.MEM_9>
    _28 = __roan._M_t;
    # .MEM_39 = VDEF <.MEM_9>
    std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_M_erase (_28, _21);
    resx 2

  }
  loop_1 (header = 13, latch = 14, niter = )
  {
    bb_13 (preds = {bb_20 bb_14 }, succs = {bb_15 bb_14 })
    {
      <bb 13>:
      # __x_8 = PHI <__x_10(20), __x_7(14)>
      # DEBUG __x => __x_8
      # VUSE <.MEM_14>
      __x_7 = __x_8->_M_right;
      if (__x_7 == 0B)
        goto <bb 15>;
      else
        goto <bb 14>;

    }
    bb_14 (preds = {bb_13 }, succs = {bb_13 })
    {
      <bb 14>:
      goto <bb 13>;

    }
  }
  loop_2 (header = 10, latch = 11, niter = )
  {
    bb_10 (preds = {bb_9 bb_11 }, succs = {bb_12 bb_11 })
    {
      <bb 10>:
      # __x_24 = PHI <__x_10(9), __x_25(11)>
      # DEBUG __x => __x_24
      # VUSE <.MEM_11>
      __x_25 = __x_24->_M_left;
      if (__x_25 == 0B)
        goto <bb 12>;
      else
        goto <bb 11>;

    }
    bb_11 (preds = {bb_10 }, succs = {bb_10 })
    {
      <bb 11>:
      goto <bb 10>;

    }
  }
}

Pass statistics:
----------------

std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::operator=(const std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&) [with _Key = int; _Val = std::pair<const int, Allocator::sRequest>; _KeyOfValue = std::_Select1st<std::pair<const int, Allocator::sRequest> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, Allocator::sRequest> >] (struct _Rb_treeD.41462 * const thisD.41858, const struct _Rb_treeD.41462 & __xD.41859)
Eh tree:
   2 cleanup land:{1,<L7>}
{
  struct _Rb_tree_node_baseD.24800 * __xD.61812;
  struct _Rb_tree_node_baseD.24800 * __xD.61805;
  struct _Reuse_or_alloc_nodeD.41486 __roanD.47251;
  struct _Rb_tree_node_baseD.24800 * _6;
  struct _Rb_treeD.41462 & prephitmp_12;
  struct _Rb_tree_node_baseD.24800 * _13;
  struct _Rb_tree_node_baseD.24800 * _15;
  struct _Rb_tree_node_baseD.24800 * _16;
  long unsigned intD.14 _18;
  struct _Rb_tree_node_baseD.24800 * _21;
  struct _Rb_tree_node_baseD.24800 * const _23;
  struct _Rb_treeD.41462 & _28;
  struct _Rb_tree_node_baseD.24800 * pretmp_40;
  struct _Rb_tree_node_baseD.24800 * prephitmp_42;
  struct _Rb_treeD.41462 & pretmp_43;

;;   basic block 2, loop depth 0, count 0, freq 1178, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  if (this_3(D) != __x_4(D))
    goto <bb 3>;
  else
    goto <bb 17>;
;;    succ:       3 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 1059, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.61796 => &__roanD.47251
  # DEBUG __tD.61797 => this_3(D)
  # DEBUG thisD.58354 => this_3(D)
  # VUSE <.MEM_5(D)>
  # PT = nonlocal escaped 
  _6 = MEM[(struct _Rb_tree_node_baseD.24800 * &)this_3(D) + 16];
  # .MEM_29 = VDEF <.MEM_5(D)>
  __roanD.47251._M_rootD.47270 = _6;
  # DEBUG thisD.58352 => this_3(D)
  # VUSE <.MEM_29>
  # PT = nonlocal escaped 
  _15 = MEM[(struct _Rb_tree_node_baseD.24800 * &)this_3(D) + 32];
  # .MEM_30 = VDEF <.MEM_29>
  __roanD.47251._M_nodesD.47271 = _15;
  # .MEM_31 = VDEF <.MEM_30>
  __roanD.47251._M_tD.47272 = this_3(D);
  if (_6 != 0B)
    goto <bb 4>;
  else
    goto <bb 6>;
;;    succ:       4 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_32 = VDEF <.MEM_31>
  _6->_M_parentD.24805 = 0B;
  # VUSE <.MEM_32>
  # PT = nonlocal escaped 
  _13 = _15->_M_leftD.24806;
  if (_13 != 0B)
    goto <bb 5>;
  else
    goto <bb 7>;
;;    succ:       5 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_33 = VDEF <.MEM_32>
  __roanD.47251._M_nodesD.47271 = _13;
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 159, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       3 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_34 = VDEF <.MEM_31>
  __roanD.47251._M_nodesD.47271 = 0B;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 1059, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                4 [15.0%]  (FALSE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_20 = PHI <.MEM_33(5), .MEM_32(4), .MEM_34(6)>
  # DEBUG D#794ptD.0 => &this_3(D)->_M_implD.41540
  # DEBUG thisD.61795 => D#794ptD.0
  # .MEM_35 = VDEF <.MEM_20>
  MEM[(struct _Rb_tree_implD.41541 *)this_3(D)]._M_headerD.41695._M_parentD.24805 = 0B;
  # PT = nonlocal 
  _16 = &MEM[(struct _Rb_tree_implD.41541 *)this_3(D)]._M_headerD.41695;
  # .MEM_36 = VDEF <.MEM_35>
  MEM[(struct _Rb_tree_implD.41541 *)this_3(D)]._M_headerD.41695._M_leftD.24806 = _16;
  # .MEM_37 = VDEF <.MEM_36>
  MEM[(struct _Rb_tree_implD.41541 *)this_3(D)]._M_headerD.41695._M_rightD.24807 = _16;
  # .MEM_38 = VDEF <.MEM_37>
  MEM[(struct _Rb_tree_implD.41541 *)this_3(D)]._M_node_countD.41696 = 0;
  # VUSE <.MEM_38>
  # PT = nonlocal escaped 
  _23 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_4(D) + 16B];
  # DEBUG D#109ptD.0 => __x_4(D)
  # DEBUG thisD.61793 => D#109ptD.0
  if (_23 != 0B)
    goto <bb 8>;
  else
    goto <bb 16>;
;;    succ:       8 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.61803 => this_3(D)
  # DEBUG thisD.61801 => this_3(D)
  # DEBUG D#110ptD.0 => __x_4(D)
  # DEBUG thisD.61799 => D#110ptD.0
  [LP 1] # .MEM_9 = VDEF <.MEM_38>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.47251 } (escaped)
  # CLB = nonlocal null { D.47251 } (escaped)
  __x_10 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_M_copyINSA_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIS4_EPKSE_SF_RT_D.47300 (this_3(D), _23, _16, &__roanD.47251);
;;    succ:       18 (EH,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_11 = VDEF <.MEM_9>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)this_3(D) + 16] = __x_10;
  # DEBUG thisD.61817 => this_3(D)
  # DEBUG thisD.61815 => this_3(D)
  # DEBUG __xD.61812 => __x_10
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 10000, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_24 = PHI <__x_10(9), __x_25(11)>
  # DEBUG __xD.61813 => __x_24
  # VUSE <.MEM_11>
  # PT = nonlocal escaped 
  __x_25 = __x_24->_M_leftD.24806;
  if (__x_25 == 0B)
    goto <bb 12>;
  else
    goto <bb 11>;
;;    succ:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 11, next block 20, flags: (NEW, REACHABLE)
;;    pred:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_50 = PHI <__x_24(10)>
;;    succ:       20 [100.0%]  (FALLTHRU)

;;   basic block 20, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 12, next block 13, flags: (NEW)
;;    pred:       12 [100.0%]  (FALLTHRU)
  # .MEM_14 = VDEF <.MEM_11>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)this_3(D) + 24] = __x_50;
  # DEBUG thisD.61810 => this_3(D)
  # DEBUG thisD.61808 => this_3(D)
  # DEBUG __xD.61805 => __x_10
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 10000, maybe hot
;;    prev block 20, next block 14, flags: (NEW, REACHABLE)
;;    pred:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_8 = PHI <__x_10(20), __x_7(14)>
  # DEBUG __xD.61806 => __x_8
  # VUSE <.MEM_14>
  # PT = nonlocal escaped 
  __x_7 = __x_8->_M_rightD.24807;
  if (__x_7 == 0B)
    goto <bb 15>;
  else
    goto <bb 14>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 14, next block 19, flags: (NEW, REACHABLE)
;;    pred:       13 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_51 = PHI <__x_8(13)>
;;    succ:       19 [100.0%]  (FALLTHRU)

;;   basic block 19, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 15, next block 16, flags: (NEW)
;;    pred:       15 [100.0%]  (FALLTHRU)
  # .MEM_17 = VDEF <.MEM_14>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)this_3(D) + 32] = __x_51;
  # VUSE <.MEM_17>
  _18 = __x_4(D)->_M_implD.41540._M_node_countD.41696;
  # .MEM_19 = VDEF <.MEM_17>
  this_3(D)->_M_implD.41540._M_node_countD.41696 = _18;
  # VUSE <.MEM_19>
  pretmp_40 = __roanD.47251._M_rootD.47270;
  # VUSE <.MEM_19>
  pretmp_43 = __roanD.47251._M_tD.47272;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 1059, maybe hot
;;    prev block 19, next block 17, flags: (NEW, REACHABLE)
;;    pred:       7 [15.0%]  (FALSE_VALUE,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_38(7), .MEM_19(19)>
  # PT = nonlocal escaped 
  # prephitmp_42 = PHI <_6(7), pretmp_40(19)>
  # PT = nonlocal escaped 
  # prephitmp_12 = PHI <this_3(D)(7), pretmp_43(19)>
  # DEBUG thisD.61819 => &__roanD.47251
  # .MEM_41 = VDEF <.MEM_1>
  # USE = nonlocal null { D.47251 } (escaped)
  # CLB = nonlocal null { D.47251 } (escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (prephitmp_12, prephitmp_42);
  # .MEM_22 = VDEF <.MEM_41>
  __roanD.47251 ={v} {CLOBBER};
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 1178, maybe hot
;;    prev block 16, next block 21, flags: (NEW, REACHABLE)
;;    pred:       2 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                16 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2 = PHI <.MEM_5(D)(2), .MEM_22(16)>
;;    succ:       21 [100.0%]  (FALLTHRU)

;;   basic block 21, loop depth 0, count 0, freq 1178, maybe hot
;;    prev block 17, next block 18, flags: (NEW)
;;    pred:       17 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_2>
  return this_3(D);
;;    succ:       EXIT [100.0%] 

;;   basic block 18, loop depth 0, count 0, freq 0
;;    prev block 21, next block 1, flags: (NEW, REACHABLE)
;;    pred:       8 (EH,EXECUTABLE)
<L7>: [LP 1]
  # DEBUG thisD.61820 => &__roanD.47251
  # VUSE <.MEM_9>
  # PT = nonlocal escaped 
  _21 = __roanD.47251._M_rootD.47270;
  # VUSE <.MEM_9>
  # PT = nonlocal escaped 
  _28 = __roanD.47251._M_tD.47272;
  # .MEM_39 = VDEF <.MEM_9>
  # USE = nonlocal null { D.47251 } (escaped)
  # CLB = nonlocal null { D.47251 } (escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (_28, _21);
  resx 2
;;    succ:      

}



;; Function void std::vector<_Tp, _Alloc>::_M_fill_insert(std::vector<_Tp, _Alloc>::iterator, std::vector<_Tp, _Alloc>::size_type, const value_type&) [with _Tp = std::map<int, Allocator::sRequest>; _Alloc = std::allocator<std::map<int, Allocator::sRequest> >; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<std::map<int, Allocator::sRequest>*, std::vector<std::map<int, Allocator::sRequest> > >; typename std::_Vector_base<_Tp, _Alloc>::pointer = std::map<int, Allocator::sRequest>*; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::value_type = std::map<int, Allocator::sRequest>] (_ZNSt6vectorISt3mapIiN9Allocator8sRequestESt4lessIiESaISt4pairIKiS2_EEESaIS9_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS9_SB_EEmRKS9_, funcdef_no=2194, decl_uid=37816, cgraph_uid=864, symbol_order=865)


Pass statistics:
----------------


Global statistics (BBS:199, LOOPS:32, CONDITIONS:81, STMTS:1258)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Pass statistics:
----------------

void std::vector<_Tp, _Alloc>::_M_fill_insert(std::vector<_Tp, _Alloc>::iterator, std::vector<_Tp, _Alloc>::size_type, const value_type&) [with _Tp = std::map<int, Allocator::sRequest>; _Alloc = std::allocator<std::map<int, Allocator::sRequest> >; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<std::map<int, Allocator::sRequest>*, std::vector<std::map<int, Allocator::sRequest> > >; typename std::_Vector_base<_Tp, _Alloc>::pointer = std::map<int, Allocator::sRequest>*; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::value_type = std::map<int, Allocator::sRequest>] (struct vectorD.37150 * const thisD.37817, struct iteratorD.37461 __positionD.37818, size_typeD.37469 __nD.37819, const struct value_typeD.37456 & __xD.37820)
Eh tree:
   11 must_not_throw
   10 cleanup land:{6,<L18>}
   9 try land:{20,<L38>},{19,<L37>},{5,<L13>} catch:{}
     29 try land:{18,<L34>} catch:{}
     28 cleanup land:{17,<L36>}
     27 must_not_throw
     26 try land:{16,<L31>} catch:{}
     25 cleanup land:{15,<L33>}
     24 must_not_throw
     23 try land:{14,<L28>} catch:{}
     22 cleanup land:{13,<L30>}
     21 must_not_throw
   2 cleanup land:{25,<L43>},{24,<L42>},{23,<L41>},{22,<L40>},{21,<L39>},{2,<L44>}
     20 try land:{12,<L25>} catch:{}
     19 cleanup land:{11,<L27>}
     18 must_not_throw
     17 try land:{10,<L22>} catch:{}
     16 cleanup land:{9,<L24>}
     15 must_not_throw
     14 try land:{8,<L19>} catch:{}
     13 cleanup land:{7,<L21>}
     12 must_not_throw
{
  struct _Alloc_nodeD.41487 __anD.67269;
  struct _Rb_tree_node_baseD.24800 * __xD.67263;
  struct _Rb_tree_node_baseD.24800 * __xD.67261;
  struct mapD.37148 * D.67254;
  struct mapD.37148 * __firstD.67235;
  struct mapD.37148 * __resultD.67237;
  struct _Alloc_nodeD.41487 __anD.67228;
  struct _Rb_tree_node_baseD.24800 * __xD.67222;
  struct _Rb_tree_node_baseD.24800 * __xD.67220;
  struct mapD.37148 * D.67213;
  struct mapD.37148 * __firstD.67194;
  struct mapD.37148 * __resultD.67196;
  struct _Alloc_nodeD.41487 __anD.67187;
  struct _Rb_tree_node_baseD.24800 * __xD.67181;
  struct _Rb_tree_node_baseD.24800 * __xD.67179;
  const long unsigned intD.14 D.67175;
  const size_typeD.37469 __lenD.67169;
  size_typeD.37469 D.67174;
  size_typeD.37469 __nD.67167;
  struct mapD.37148 * D.67165;
  struct mapD.37148 * D.67153;
  struct mapD.37148 * __firstD.67134;
  long unsigned intD.14 __nD.67135;
  struct _Alloc_nodeD.41487 __anD.67127;
  struct _Rb_tree_node_baseD.24800 * __xD.67121;
  struct _Rb_tree_node_baseD.24800 * __xD.67119;
  struct mapD.37148 * D.67112;
  struct mapD.37148 * __firstD.67093;
  struct mapD.37148 * __resultD.67095;
  struct _Alloc_nodeD.41487 __anD.67086;
  struct _Rb_tree_node_baseD.24800 * __xD.67080;
  struct _Rb_tree_node_baseD.24800 * __xD.67078;
  struct mapD.37148 * D.67071;
  struct mapD.37148 * __firstD.67052;
  long unsigned intD.14 __nD.67053;
  struct _Alloc_nodeD.41487 __anD.67045;
  struct _Rb_tree_node_baseD.24800 * __xD.67039;
  struct _Rb_tree_node_baseD.24800 * __xD.67037;
  struct mapD.37148 * D.67030;
  struct mapD.37148 * __firstD.67011;
  struct mapD.37148 * __resultD.67013;
  struct _Alloc_nodeD.41487 __anD.67004;
  struct _Rb_tree_node_baseD.24800 * __xD.66998;
  struct _Rb_tree_node_baseD.24800 * __xD.66996;
  struct mapD.37148 * const __positionD.62130;
  struct mapD.37148 * __firstD.62088;
  struct mapD.37148 * __firstD.62067;
  struct mapD.37148 * __firstD.61984;
  struct mapD.37148 * __firstD.61941;
  difference_typeD.43831 __nD.61935;
  struct mapD.37148 * __lastD.61920;
  struct mapD.37148 * __new_finishD.45343;
  const size_typeD.37469 __elems_beforeD.45340;
  struct mapD.37148 * __old_finishD.45315;
  const size_typeD.37469 __elems_afterD.45307;
  struct value_typeD.37456 __x_copyD.45305;
  struct mapD.37148 * _10;
  long intD.12 _11;
  struct mapD.37148 * _12;
  long intD.12 _13;
  long intD.12 _14;
  long intD.12 _15;
  long unsigned intD.14 _16;
  struct _Rb_tree_node_baseD.24800 * _17;
  long intD.12 __last.86_21;
  struct mapD.37148 * const _24;
  long unsigned intD.14 _25;
  long unsigned intD.14 _27;
  difference_typeD.43836 _30;
  long intD.12 _31;
  long unsigned intD.14 _33;
  long intD.12 _35;
  struct mapD.37148 * _36;
  struct mapD.37148 * _45;
  voidD.45 * _47;
  sizetype _49;
  sizetype _50;
  struct mapD.37148 * _51;
  const struct _Rep_typeD.41460 * _56;
  long unsigned intD.14 _59;
  sizetype _60;
  struct mapD.37148 * _63;
  struct mapD.37148 * _67;
  long intD.12 _73;
  struct mapD.37148 * _74;
  long unsigned intD.14 _75;
  struct mapD.37148 * _76;
  struct _Rep_typeD.41460 * _80;
  struct _Rep_typeD.41460 * _83;
  struct _Rep_typeD.41460 * _87;
  struct _Rb_tree_node_baseD.24800 * _89;
  boolD.2757 _95;
  struct _Rep_typeD.41460 * _96;
  struct _Rb_tree_node_baseD.24800 * _97;
  struct _Rb_tree_node_baseD.24800 * _99;
  struct _Rep_typeD.41460 * _100;
  struct _Rb_tree_node_baseD.24800 * _101;
  struct _Rep_typeD.41460 * _104;
  struct _Rb_tree_node_baseD.24800 * _105;
  struct _Rb_tree_node_baseD.24800 * _115;
  struct _Rb_tree_node_baseD.24800 * _116;
  long unsigned intD.14 prephitmp_128;
  struct _Rb_tree_node_baseD.24800 * _138;
  struct _Rb_tree_node_baseD.24800 * _141;
  struct _Rb_tree_node_baseD.24800 * _142;
  struct mapD.37148 * const prephitmp_151;
  long intD.12 pretmp_152;
  long intD.12 prephitmp_153;
  struct _Rb_tree_node_baseD.24800 * const _157;
  long unsigned intD.14 _164;
  long unsigned intD.14 _166;
  struct _Rep_typeD.41460 * _167;
  voidD.45 * _170;
  struct _Rep_typeD.41460 * _172;
  struct _Rb_tree_node_baseD.24800 * _173;
  struct _Rb_tree_node_baseD.24800 * const _175;
  long unsigned intD.14 _182;
  struct _Rep_typeD.41460 * _186;
  voidD.45 * _189;
  voidD.45 * _190;
  struct _Rep_typeD.41460 * _191;
  struct _Rb_tree_node_baseD.24800 * _192;
  struct _Rb_tree_node_baseD.24800 * const _194;
  long unsigned intD.14 _201;
  boolD.2757 _204;
  struct _Rep_typeD.41460 * _205;
  voidD.45 * _208;
  struct _Rep_typeD.41460 * _210;
  struct _Rb_tree_node_baseD.24800 * _211;
  struct _Rb_tree_node_baseD.24800 * const _213;
  long unsigned intD.14 _220;
  struct _Rep_typeD.41460 * _224;
  voidD.45 * _227;
  struct _Rep_typeD.41460 * _229;
  struct _Rb_tree_node_baseD.24800 * _230;
  struct mapD.37148 * _232;
  long intD.12 _236;
  long intD.12 _237;
  long intD.12 _238;
  long unsigned intD.14 _240;
  struct _Rb_tree_node_baseD.24800 * const _246;
  long unsigned intD.14 _253;
  struct _Rep_typeD.41460 * _257;
  voidD.45 * _260;
  struct _Rep_typeD.41460 * _262;
  struct _Rb_tree_node_baseD.24800 * _263;
  struct _Rb_tree_node_baseD.24800 * const _265;
  long unsigned intD.14 _272;
  struct _Rep_typeD.41460 * _276;
  voidD.45 * _279;
  struct _Rep_typeD.41460 * _281;
  struct _Rb_tree_node_baseD.24800 * _282;
  struct _Rb_tree_node_baseD.24800 * const _284;
  long unsigned intD.14 _291;
  voidD.45 * _296;
  struct mapD.37148 * _299;
  struct mapD.37148 * prephitmp_345;
  struct mapD.37148 * pretmp_362;
  struct mapD.37148 * pretmp_370;
  struct mapD.37148 * prephitmp_383;
  struct mapD.37148 * pretmp_385;
  struct mapD.37148 * prephitmp_386;
  long unsigned intD.14 pretmp_423;
  long unsigned intD.14 prephitmp_424;
  struct mapD.37148 * const pretmp_425;
  long intD.12 _487;
  long intD.12 _488;
  difference_typeD.43836 _489;
  difference_typeD.43836 _492;
  long intD.12 _496;
  long intD.12 _497;
  boolD.2757 _540;
  long intD.12 _572;
  long intD.12 _573;

;;   basic block 2, loop depth 0, count 0, freq 178, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#1166ptD.0 => MEM[(struct __normal_iteratorD.37462 *)&__positionD.37818]
  # DEBUG __positionD.62130 => D#1166ptD.0
  if (__n_7(D) != 0)
    goto <bb 3>;
  else
    goto <bb 177>;
;;    succ:       3 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                177 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 108, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  # PT = nonlocal 
  __position_23 = MEM[(struct __normal_iteratorD.37462 *)&__positionD.37818];
  # VUSE <.MEM_8(D)>
  # PT = nonlocal escaped 
  _10 = this_9(D)->D.37893._M_implD.37384._M_end_of_storageD.37388;
  _11 = (long intD.12) _10;
  # VUSE <.MEM_8(D)>
  # PT = nonlocal escaped 
  _12 = this_9(D)->D.37893._M_implD.37384._M_finishD.37387;
  _13 = (long intD.12) _12;
  _14 = _11 - _13;
  # RANGE [-192153584101141162, 192153584101141162]
  _15 = _14 /[ex] 48;
  # RANGE ~[192153584101141163, 18254590489608410453]
  _16 = (long unsigned intD.14) _15;
  if (__n_7(D) <= _16)
    goto <bb 4>;
  else
    goto <bb 100>;
;;    succ:       4 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                100 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 54, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.61892 => &__x_copyD.45305
  # DEBUG __xD.61893 => __x_29(D)
  # DEBUG D#1160ptD.0 => &MEM[(const struct mapD.37148 &)__x_29(D)]._M_tD.41463
  # DEBUG thisD.66993 => &__x_copyD.45305._M_tD.41463
  # DEBUG __xD.66994 => D#1160ptD.0
  # DEBUG thisD.61229 => D#1160ptD.0
  # DEBUG __aD.61227 => NULL
  # DEBUG D#736ptD.0 => &MEM[(const struct _Rb_treeD.41462 &)D#1160ptD.0]._M_implD.41540._M_key_compareD.41694
  # DEBUG D#735ptD.0 => &MEM[(struct _Rb_treeD.41462 *)&__x_copyD.45305]._M_implD.41540
  # DEBUG thisD.67009 => D#735ptD.0
  # DEBUG __compD.67008 => D#736ptD.0
  # DEBUG __aD.67007 => NULL
  # DEBUG thisD.54200 => D#735ptD.0
  # DEBUG __aD.54201 => NULL
  # DEBUG thisD.54196 => D#735ptD.0
  # DEBUG D.54197 => NULL
  # .MEM_392 = VDEF <.MEM_8(D)>
  MEM[(struct _Rb_tree_implD.41541 *)&__x_copyD.45305]._M_headerD.41695._M_colorD.24804 = 0;
  # .MEM_393 = VDEF <.MEM_392>
  MEM[(struct _Rb_tree_implD.41541 *)&__x_copyD.45305]._M_headerD.41695._M_parentD.24805 = 0B;
  # .MEM_396 = VDEF <.MEM_393>
  MEM[(struct _Rb_tree_implD.41541 *)&__x_copyD.45305]._M_node_countD.41696 = 0;
  # DEBUG thisD.67010 => D#735ptD.0
  # .MEM_397 = VDEF <.MEM_396>
  MEM[(struct _Rb_tree_implD.41541 *)&__x_copyD.45305]._M_headerD.41695._M_leftD.24806 = &MEM[(struct _Rb_tree_implD.41541 *)&__x_copyD.45305]._M_headerD.41695;
  # .MEM_398 = VDEF <.MEM_397>
  MEM[(struct _Rb_tree_implD.41541 *)&__x_copyD.45305]._M_headerD.41695._M_rightD.24807 = &MEM[(struct _Rb_tree_implD.41541 *)&__x_copyD.45305]._M_headerD.41695;
  # VUSE <.MEM_398>
  # PT = nonlocal escaped 
  _157 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_29(D) + 16B];
  # DEBUG D#109ptD.0 => D#1160ptD.0
  # DEBUG thisD.61221 => D#109ptD.0
  if (_157 != 0B)
    goto <bb 5>;
  else
    goto <bb 12>;
;;    succ:       5 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 42, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.61243 => &__x_copyD.45305._M_tD.41463
  # DEBUG thisD.67000 => &__x_copyD.45305._M_tD.41463
  # DEBUG D#110ptD.0 => D#1160ptD.0
  # DEBUG thisD.61239 => D#110ptD.0
  # DEBUG thisD.67003 => &__x_copyD.45305._M_tD.41463
  # DEBUG __xD.67002 => NULL
  # DEBUG __pD.67001 => NULL
  # DEBUG thisD.67006 => &__anD.67004
  # DEBUG __tD.67005 => &__x_copyD.45305._M_tD.41463
  # .MEM_399 = VDEF <.MEM_398>
  __anD.67004._M_tD.45275 = &__x_copyD.45305._M_tD.41463;
  # .MEM_400 = VDEF <.MEM_399>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __x_159 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_M_copyINSA_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS4_EPKSE_SF_RT_D.45292 (&__x_copyD.45305._M_tD.41463, _157, &MEM[(struct _Rb_treeD.41462 *)&__x_copyD.45305]._M_implD.41540._M_headerD.41695, &__anD.67004);
  # .MEM_401 = VDEF <.MEM_400>
  __anD.67004 ={v} {CLOBBER};
  # .MEM_402 = VDEF <.MEM_401>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)&__x_copyD.45305 + 16] = __x_159;
  # DEBUG thisD.61257 => &__x_copyD.45305._M_tD.41463
  # DEBUG thisD.61255 => &__x_copyD.45305._M_tD.41463
  # DEBUG __xD.66996 => __x_159
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 472, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_160 = PHI <__x_159(5), __x_161(7)>
  # DEBUG __xD.66997 => __x_160
  # VUSE <.MEM_402>
  # PT = nonlocal escaped 
  __x_161 = __x_160->_M_leftD.24806;
  if (__x_161 == 0B)
    goto <bb 8>;
  else
    goto <bb 7>;
;;    succ:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 430, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 42, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_62 = PHI <__x_160(6)>
  # .MEM_403 = VDEF <.MEM_402>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)&__x_copyD.45305 + 24] = __x_62;
  # DEBUG thisD.61250 => &__x_copyD.45305._M_tD.41463
  # DEBUG thisD.61248 => &__x_copyD.45305._M_tD.41463
  # DEBUG __xD.66998 => __x_159
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 472, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_162 = PHI <__x_159(8), __x_163(10)>
  # DEBUG __xD.66999 => __x_162
  # VUSE <.MEM_403>
  # PT = nonlocal escaped 
  __x_163 = __x_162->_M_rightD.24807;
  if (__x_163 == 0B)
    goto <bb 11>;
  else
    goto <bb 10>;
;;    succ:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 430, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 9>;
;;    succ:       9 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 42, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_94 = PHI <__x_162(9)>
  # .MEM_404 = VDEF <.MEM_403>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)&__x_copyD.45305 + 32] = __x_94;
  # VUSE <.MEM_404>
  _164 = MEM[(const struct _Rb_treeD.41462 &)__x_29(D)]._M_implD.41540._M_node_countD.41696;
  # .MEM_405 = VDEF <.MEM_404>
  MEM[(struct _Rb_treeD.41462 *)&__x_copyD.45305]._M_implD.41540._M_node_countD.41696 = _164;
  # VUSE <.MEM_405>
  pretmp_425 = MEM[(struct mapD.37148 * const &)this_9(D) + 8];
  pretmp_152 = (long intD.12) pretmp_425;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 54, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                4 [21.6%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_292 = PHI <.MEM_405(11), .MEM_398(4)>
  # PT = nonlocal escaped 
  # prephitmp_151 = PHI <pretmp_425(11), _12(4)>
  # prephitmp_153 = PHI <pretmp_152(11), _13(4)>
  # DEBUG thisD.61897 => this_9(D)
  # DEBUG D#111ptD.0 => &this_9(D)->D.37893._M_implD.37384._M_finishD.37387
  # DEBUG thisD.61899 => NULL
  # DEBUG __iD.61898 => D#111ptD.0
  # DEBUG D#1163ptD.0 => MEM[(struct mapD.37148 * const &)this_9(D) + 8]
  # DEBUG __lhsD.61894 => &D.45308
  # DEBUG __rhsD.61895 => &__positionD.37818
  # DEBUG thisD.53180 => &D.45308
  # DEBUG thisD.53178 => &__positionD.37818
  _35 = (long intD.12) __position_23;
  _31 = prephitmp_153 - _35;
  # RANGE [-192153584101141162, 192153584101141162]
  _30 = _31 /[ex] 48;
  # RANGE ~[192153584101141163, 18254590489608410453]
  __elems_after_57 = (const size_typeD.37469) _30;
  # DEBUG __elems_afterD.45307 => __elems_after_57
  # DEBUG __old_finishD.45315 => D#1163ptD.0
  if (__n_7(D) < __elems_after_57)
    goto <bb 13>;
  else
    goto <bb 48>;
;;    succ:       13 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                48 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 27, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#799ptD.0 => &this_9(D)->D.37893
  # DEBUG thisD.61917 => D#799ptD.0
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _59 = __n_7(D) * 48;
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _60 = -_59;
  # PT = nonlocal escaped 
  __last_61 = prephitmp_151 + _60;
  # DEBUG __firstD.61902 => __last_61
  # DEBUG __lastD.61903 => D#1163ptD.0
  # DEBUG __resultD.61904 => D#1163ptD.0
  # DEBUG __allocD.61905 => D#739ptD.0
  # DEBUG D#738ptD.0 => D#739ptD.0
  # DEBUG D#737ptD.0 => D#738ptD.0
  # DEBUG __firstD.61909 => __last_61
  # DEBUG __lastD.61908 => D#1163ptD.0
  # DEBUG __resultD.61907 => D#1163ptD.0
  # DEBUG D.61906 => D#737ptD.0
  # DEBUG __firstD.61912 => __last_61
  # DEBUG __lastD.61911 => D#1163ptD.0
  # DEBUG __resultD.61910 => D#1163ptD.0
  # DEBUG __assignableD.61915 => 1
  # DEBUG __firstD.67011 => __last_61
  # DEBUG __lastD.67012 => D#1163ptD.0
  # DEBUG __resultD.67013 => D#1163ptD.0
  # DEBUG __curD.67014 => D#1163ptD.0
  # DEBUG __curD.67014 => D#1163ptD.0
  # DEBUG __firstD.67011 => __last_61
  if (__last_61 == prephitmp_151)
    goto <bb 29>;
  else
    goto <bb 14>;
;;    succ:       29 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 26, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 1, count 0, freq 575, maybe hot
;;    prev block 14, next block 16, flags: (NEW)
;;    pred:       14 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                27 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __last_548 = PHI <__last_61(14), __last_168(27)>
  # PT = nonlocal escaped 
  # __old_finish_549 = PHI <prephitmp_151(14), __old_finish_169(27)>
  # .MEM_532 = PHI <.MEM_292(14), .MEM_294(27)>
  # DEBUG __curD.67014 => __old_finish_549
  # DEBUG __firstD.67011 => __last_548
  # DEBUG __rD.61276 => __old_finish_549
  # DEBUG __pD.67027 => NULL
  # DEBUG __valueD.67026 => __last_548
  # DEBUG D#24ptD.0 => 48
  # DEBUG __pD.61264 => NULL
  # DEBUG D.61265 => D#24ptD.0
  if (__old_finish_549 != 0B)
    goto <bb 17>;
  else
    goto <bb 16>;
;;    succ:       17 [100.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [0.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 1, count 0, freq 124, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       15 [0.0%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [21.6%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_473 = PHI <.MEM_532(15), .MEM_412(17)>
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 575, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       15 [100.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.67029 => NULL
  # DEBUG __xD.67028 => __last_548
  # DEBUG D#1161ptD.0 => &MEM[(const struct mapD.37148 &)__last_548]._M_tD.41463
  # PT = nonlocal escaped 
  _167 = &__old_finish_549->_M_tD.41463;
  # DEBUG thisD.67034 => _167
  # DEBUG __xD.67035 => D#1161ptD.0
  # DEBUG thisD.61229 => D#1161ptD.0
  # DEBUG __aD.61227 => NULL
  # DEBUG D#736ptD.0 => &MEM[(const struct _Rb_treeD.41462 &)D#1161ptD.0]._M_implD.41540._M_key_compareD.41694
  # DEBUG D#735ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_167]._M_implD.41540
  # DEBUG thisD.67050 => D#735ptD.0
  # DEBUG __compD.67049 => D#736ptD.0
  # DEBUG __aD.67048 => NULL
  # DEBUG thisD.54200 => D#735ptD.0
  # DEBUG __aD.54201 => NULL
  # DEBUG thisD.54196 => D#735ptD.0
  # DEBUG D.54197 => NULL
  # .MEM_406 = VDEF <.MEM_532>
  MEM[(struct _Rb_tree_implD.41541 *)__old_finish_549]._M_headerD.41695._M_colorD.24804 = 0;
  # .MEM_407 = VDEF <.MEM_406>
  MEM[(struct _Rb_tree_implD.41541 *)__old_finish_549]._M_headerD.41695._M_parentD.24805 = 0B;
  # .MEM_410 = VDEF <.MEM_407>
  MEM[(struct _Rb_tree_implD.41541 *)__old_finish_549]._M_node_countD.41696 = 0;
  # DEBUG thisD.67051 => D#735ptD.0
  # PT = nonlocal escaped 
  _138 = &MEM[(struct _Rb_tree_implD.41541 *)__old_finish_549]._M_headerD.41695;
  # .MEM_411 = VDEF <.MEM_410>
  MEM[(struct _Rb_tree_implD.41541 *)__old_finish_549]._M_headerD.41695._M_leftD.24806 = _138;
  # .MEM_412 = VDEF <.MEM_411>
  MEM[(struct _Rb_tree_implD.41541 *)__old_finish_549]._M_headerD.41695._M_rightD.24807 = _138;
  # VUSE <.MEM_412>
  # PT = nonlocal escaped 
  _175 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__last_548 + 16B];
  # DEBUG D#109ptD.0 => D#1161ptD.0
  # DEBUG thisD.61221 => D#109ptD.0
  if (_175 != 0B)
    goto <bb 18>;
  else
    goto <bb 16>;
;;    succ:       18 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 1, count 0, freq 450, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.61243 => _167
  # DEBUG thisD.67041 => _167
  # DEBUG D#110ptD.0 => D#1161ptD.0
  # DEBUG thisD.61239 => D#110ptD.0
  # DEBUG thisD.67044 => _167
  # DEBUG __xD.67043 => NULL
  # DEBUG __pD.67042 => NULL
  # DEBUG thisD.67047 => &__anD.67045
  # DEBUG __tD.67046 => _167
  # .MEM_413 = VDEF <.MEM_412>
  __anD.67045._M_tD.45275 = _167;
  [LP 8] # .MEM_414 = VDEF <.MEM_413>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __x_177 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_M_copyINSA_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS4_EPKSE_SF_RT_D.45292 (_167, _175, _138, &__anD.67045);
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                31 (EH,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 450, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_415 = VDEF <.MEM_414>
  __anD.67045 ={v} {CLOBBER};
  # .MEM_416 = VDEF <.MEM_415>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)__old_finish_549 + 16] = __x_177;
  # DEBUG thisD.61257 => _167
  # DEBUG thisD.61255 => _167
  # DEBUG __xD.67037 => __x_177
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 2, count 0, freq 5004, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                21 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_178 = PHI <__x_177(19), __x_179(21)>
  # DEBUG __xD.67038 => __x_178
  # VUSE <.MEM_416>
  # PT = nonlocal escaped 
  __x_179 = __x_178->_M_leftD.24806;
  if (__x_179 == 0B)
    goto <bb 22>;
  else
    goto <bb 21>;
;;    succ:       22 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 2, count 0, freq 4554, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 450, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_433 = PHI <__x_178(20)>
  # .MEM_417 = VDEF <.MEM_416>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)__old_finish_549 + 24] = __x_433;
  # DEBUG thisD.61250 => _167
  # DEBUG thisD.61248 => _167
  # DEBUG __xD.67039 => __x_177
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 2, count 0, freq 5004, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                24 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_180 = PHI <__x_177(22), __x_181(24)>
  # DEBUG __xD.67040 => __x_180
  # VUSE <.MEM_417>
  # PT = nonlocal escaped 
  __x_181 = __x_180->_M_rightD.24807;
  if (__x_181 == 0B)
    goto <bb 25>;
  else
    goto <bb 24>;
;;    succ:       25 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 2, count 0, freq 4554, maybe hot
;;    prev block 23, next block 25, flags: (NEW)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 450, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_408 = PHI <__x_180(23)>
  # .MEM_418 = VDEF <.MEM_417>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)__old_finish_549 + 32] = __x_408;
  # VUSE <.MEM_418>
  _182 = MEM[(const struct _Rb_treeD.41462 &)__last_548]._M_implD.41540._M_node_countD.41696;
  # .MEM_419 = VDEF <.MEM_418>
  MEM[(struct _Rb_treeD.41462 *)__old_finish_549]._M_implD.41540._M_node_countD.41696 = _182;
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 1, count 0, freq 575, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                25 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_294 = PHI <.MEM_473(16), .MEM_419(25)>
  # PT = nonlocal escaped 
  __last_168 = __last_548 + 48;
  # DEBUG __firstD.67011 => __last_168
  # PT = nonlocal escaped 
  __old_finish_169 = __old_finish_549 + 48;
  # DEBUG __curD.67014 => __old_finish_169
  # DEBUG __curD.67014 => __old_finish_169
  # DEBUG __firstD.67011 => __last_168
  if (prephitmp_151 == __last_168)
    goto <bb 28>;
  else
    goto <bb 27>;
;;    succ:       28 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 1, count 0, freq 549, maybe hot
;;    prev block 26, next block 28, flags: (NEW)
;;    pred:       26 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 26, maybe hot
;;    prev block 27, next block 29, flags: (NEW)
;;    pred:       26 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_294>
  pretmp_370 = this_9(D)->D.37893._M_implD.37384._M_finishD.37387;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 27, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       28 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                13 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_531 = PHI <.MEM_294(28), .MEM_292(13)>
  # PT = nonlocal escaped 
  # prephitmp_345 = PHI <pretmp_370(28), prephitmp_151(13)>
  # PT = nonlocal escaped 
  _63 = prephitmp_345 + _59;
  # .MEM_64 = VDEF <.MEM_531>
  this_9(D)->D.37893._M_implD.37384._M_finishD.37387 = _63;
  # DEBUG thisD.61939 => &__positionD.37818
  # DEBUG __firstD.61919 => D#1166ptD.0
  # DEBUG __lastD.61920 => __last_61
  # DEBUG __resultD.61921 => D#1163ptD.0
  # DEBUG __itD.61875 => __last_61
  # DEBUG __itD.55065 => __last_61
  # DEBUG __itD.61873 => D#1166ptD.0
  # DEBUG __itD.55065 => D#1166ptD.0
  # DEBUG __firstD.61924 => D#1166ptD.0
  # DEBUG __lastD.61923 => __last_61
  # DEBUG __resultD.61922 => D#1163ptD.0
  # DEBUG __itD.61853 => D#1163ptD.0
  # DEBUG __itD.55068 => D#1163ptD.0
  # DEBUG __itD.61851 => __last_61
  # DEBUG __itD.55068 => __last_61
  # DEBUG __itD.61849 => D#1166ptD.0
  # DEBUG __itD.55068 => D#1166ptD.0
  # DEBUG __firstD.61927 => D#1166ptD.0
  # DEBUG __lastD.61926 => __last_61
  # DEBUG __resultD.61925 => D#1163ptD.0
  # DEBUG __simpleD.61931 => 0
  # DEBUG __firstD.61934 => D#1166ptD.0
  # DEBUG __lastD.61933 => __last_61
  # DEBUG __resultD.61932 => D#1163ptD.0
  __last.86_21 = (long intD.12) __last_61;
  _73 = __last.86_21 - _35;
  # RANGE [-192153584101141162, 192153584101141162]
  __n_72 = _73 /[ex] 48;
  # DEBUG __nD.61935 => __n_72
  # DEBUG __nD.61935 => __n_72
  # DEBUG __resultD.61932 => D#1163ptD.0
  # DEBUG __lastD.61933 => __last_61
  if (__n_72 <= 0)
    goto <bb 30>;
  else
    goto <bb 37>;
;;    succ:       30 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 27, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_472 = PHI <.MEM_64(29), .MEM_139(40)>
  # DEBUG thisD.61951 => &__positionD.37818
  # PT = nonlocal 
  _67 = __position_23 + _59;
  # DEBUG thisD.61949 => &__positionD.37818
  # DEBUG __firstD.61941 => D#1166ptD.0
  # DEBUG __lastD.61942 => _67
  # DEBUG __valueD.61943 => &__x_copyD.45305
  # DEBUG __firstD.61946 => D#1166ptD.0
  if (__position_23 == _67)
    goto <bb 42>;
  else
    goto <bb 43>;
;;    succ:       42 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                43 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       18 (EH,EXECUTABLE)
  # PT = nonlocal escaped 
  # __old_finish_560 = PHI <__old_finish_549(18)>
<L19>: [LP 8]
  # VUSE <.MEM_414>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _170 = __builtin_eh_pointerD.2738 (14);
  # .MEM_420 = VDEF <.MEM_414>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_begin_catchD.14644 (_170);
  # DEBUG __firstD.67016 => D#1163ptD.0
  # DEBUG __lastD.67015 => __old_finish_560
  # DEBUG __firstD.67019 => D#1163ptD.0
  # DEBUG __lastD.67018 => __old_finish_560
  # DEBUG __firstD.67019 => D#1163ptD.0
  if (prephitmp_151 == __old_finish_560)
    goto <bb 32>;
  else
    goto <bb 33>;
;;    succ:       32 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       31 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_471 = PHI <.MEM_420(31), .MEM_426(34)>
  [LP 7] # .MEM_427 = VDEF <.MEM_471>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_rethrowD.45013 ();
;;    succ:       36 (EH,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       31 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 33, next block 35, flags: (NEW)
;;    pred:       33 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __old_finish_543 = PHI <prephitmp_151(33), __old_finish_174(35)>
  # .MEM_530 = PHI <.MEM_420(33), .MEM_426(35)>
  # DEBUG __firstD.67019 => __old_finish_543
  # DEBUG __rD.57841 => __old_finish_543
  # DEBUG __pointerD.67020 => NULL
  # DEBUG thisD.67021 => NULL
  # PT = nonlocal escaped 
  _172 = &__old_finish_543->_M_tD.41463;
  # DEBUG thisD.67022 => _172
  # VUSE <.MEM_530>
  # PT = nonlocal escaped 
  _173 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__old_finish_543 + 16B];
  # DEBUG D#91ptD.0 => _172
  # DEBUG thisD.57821 => D#91ptD.0
  # .MEM_421 = VDEF <.MEM_530>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (_172, _173);
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_172]._M_implD.41540
  # DEBUG thisD.67023 => D#549ptD.0
  # DEBUG thisD.67024 => D#549ptD.0
  # DEBUG thisD.67025 => D#549ptD.0
  # .MEM_426 = VDEF <.MEM_421>
  MEM[(struct  &)__old_finish_543] ={v} {CLOBBER};
  # PT = nonlocal escaped 
  __old_finish_174 = __old_finish_543 + 48;
  # DEBUG __firstD.67019 => __old_finish_174
  # DEBUG __firstD.67019 => __old_finish_174
  if (__old_finish_174 == __old_finish_560)
    goto <bb 32>;
  else
    goto <bb 35>;
;;    succ:       32 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 35, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 34, next block 36, flags: (NEW)
;;    pred:       34 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 34>;
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       32 (EH,EXECUTABLE)
<L21>: [LP 7]
  [MNT 12] # .MEM_428 = VDEF <.MEM_427>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_end_catchD.14643 ();
  [LP 21] resx 13
;;    succ:       178 (EH,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 26, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       29 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       38 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 38, loop depth 1, count 0, freq 575, maybe hot
;;    prev block 37, next block 39, flags: (NEW)
;;    pred:       37 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_557 = PHI <.MEM_64(37), .MEM_139(41)>
  # PT = nonlocal escaped 
  # __old_finish_556 = PHI <prephitmp_151(37), __old_finish_58(41)>
  # PT = nonlocal escaped 
  # __last_538 = PHI <__last_61(37), __last_66(41)>
  # RANGE [-192153584101141162, 192153584101141162]
  # __n_539 = PHI <__n_72(37), __n_81(41)>
  # DEBUG __nD.61935 => __n_539
  # DEBUG __resultD.61932 => __old_finish_556
  # DEBUG __lastD.61933 => __last_538
  # PT = nonlocal escaped 
  __last_66 = __last_538 + 18446744073709551568;
  # DEBUG __lastD.61933 => __last_66
  # PT = nonlocal escaped 
  __old_finish_58 = __old_finish_556 + 18446744073709551568;
  # DEBUG __resultD.61932 => __old_finish_58
  # DEBUG thisD.61937 => __old_finish_58
  # DEBUG __xD.61936 => __last_66
  # PT = nonlocal escaped 
  _56 = &MEM[(const struct mapD.37148 &)__last_66]._M_tD.41463;
  # PT = nonlocal escaped 
  _80 = &__old_finish_58->_M_tD.41463;
  [LP 22] # .MEM_139 = VDEF <.MEM_557>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EEaSERKSA_D.41857 (_80, _56);
  goto <bb 40>;
;;    succ:       40 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                39 (EH,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 38, next block 40, flags: (NEW)
;;    pred:       38 (EH,EXECUTABLE)
<L40>: [LP 22]
  goto <bb 179> (<L10>);
;;    succ:       179 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 40, loop depth 1, count 0, freq 575, maybe hot
;;    prev block 39, next block 41, flags: (NEW, REACHABLE)
;;    pred:       38 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 192153584101141161] NONZERO 288230376151711743
  __n_81 = __n_539 + -1;
  # DEBUG __nD.61935 => __n_81
  # DEBUG __nD.61935 => __n_81
  # DEBUG __resultD.61932 => __old_finish_58
  # DEBUG __lastD.61933 => __last_66
  if (__n_81 <= 0)
    goto <bb 30>;
  else
    goto <bb 41>;
;;    succ:       30 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                41 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 41, loop depth 1, count 0, freq 549, maybe hot
;;    prev block 40, next block 42, flags: (NEW)
;;    pred:       40 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 38>;
;;    succ:       38 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 53, maybe hot
;;    prev block 41, next block 43, flags: (NEW)
;;    pred:       30 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                46 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                86 (TRUE_VALUE,EXECUTABLE)
;;                97 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_470 = PHI <.MEM_472(30), .MEM_140(46), .MEM_77(86), .MEM_143(97)>
  goto <bb 99>;
;;    succ:       99 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 43, loop depth 0, count 0, freq 26, maybe hot
;;    prev block 42, next block 44, flags: (NEW, REACHABLE)
;;    pred:       30 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       44 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 44, loop depth 1, count 0, freq 575, maybe hot
;;    prev block 43, next block 45, flags: (NEW)
;;    pred:       43 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                47 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  # __position_553 = PHI <__position_23(43), __position_84(47)>
  # .MEM_550 = PHI <.MEM_472(43), .MEM_140(47)>
  # DEBUG __firstD.61946 => __position_553
  # DEBUG thisD.61948 => __position_553
  # DEBUG __xD.61947 => &__x_copyD.45305
  # PT = nonlocal 
  _83 = &__position_553->_M_tD.41463;
  [LP 23] # .MEM_140 = VDEF <.MEM_550>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EEaSERKSA_D.41857 (_83, &__x_copyD.45305._M_tD.41463);
  goto <bb 46>;
;;    succ:       46 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                45 (EH,EXECUTABLE)

;;   basic block 45, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 44, next block 46, flags: (NEW)
;;    pred:       44 (EH,EXECUTABLE)
<L41>: [LP 23]
  goto <bb 179> (<L10>);
;;    succ:       179 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 46, loop depth 1, count 0, freq 575, maybe hot
;;    prev block 45, next block 47, flags: (NEW, REACHABLE)
;;    pred:       44 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  __position_84 = __position_553 + 48;
  # DEBUG __firstD.61946 => __position_84
  # DEBUG __firstD.61946 => __position_84
  if (_67 == __position_84)
    goto <bb 42>;
  else
    goto <bb 47>;
;;    succ:       42 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 47, loop depth 1, count 0, freq 549, maybe hot
;;    prev block 46, next block 48, flags: (NEW)
;;    pred:       46 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 44>;
;;    succ:       44 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 48, loop depth 0, count 0, freq 27, maybe hot
;;    prev block 47, next block 49, flags: (NEW, REACHABLE)
;;    pred:       12 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#800ptD.0 => &this_9(D)->D.37893
  # DEBUG thisD.61963 => D#800ptD.0
  # RANGE [0, 18446744073709551615]
  __n_70 = __n_7(D) - __elems_after_57;
  # DEBUG __firstD.61953 => D#1163ptD.0
  # DEBUG __nD.61954 => __n_70
  # DEBUG __xD.61955 => &__x_copyD.45305
  # DEBUG D.61956 => D#742ptD.0
  # DEBUG __firstD.61959 => D#1163ptD.0
  # DEBUG __nD.61958 => __n_70
  # DEBUG __xD.61957 => &__x_copyD.45305
  # DEBUG __assignableD.61961 => 1
  # DEBUG __firstD.67052 => D#1163ptD.0
  # DEBUG __nD.67053 => __n_70
  # DEBUG __xD.67054 => &__x_copyD.45305
  # DEBUG __curD.67055 => D#1163ptD.0
  # DEBUG __curD.67055 => D#1163ptD.0
  # DEBUG __nD.67053 => __n_70
  if (__n_70 == 0)
    goto <bb 64>;
  else
    goto <bb 49>;
;;    succ:       64 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                49 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 49, loop depth 0, count 0, freq 26, maybe hot
;;    prev block 48, next block 50, flags: (NEW, REACHABLE)
;;    pred:       48 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       50 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 50, loop depth 1, count 0, freq 575, maybe hot
;;    prev block 49, next block 51, flags: (NEW)
;;    pred:       49 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                63 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __n_544 = PHI <__n_70(49), __n_187(63)>
  # PT = nonlocal escaped 
  # __old_finish_546 = PHI <prephitmp_151(49), __old_finish_188(63)>
  # .MEM_526 = PHI <.MEM_292(49), .MEM_297(63)>
  # DEBUG __curD.67055 => __old_finish_546
  # DEBUG __nD.67053 => __n_544
  # DEBUG __rD.61380 => __old_finish_546
  # DEBUG __pD.67068 => NULL
  # DEBUG __valueD.67067 => &__x_copyD.45305
  # DEBUG D#24ptD.0 => 48
  # DEBUG __pD.61264 => NULL
  # DEBUG D.61265 => D#24ptD.0
  if (__old_finish_546 != 0B)
    goto <bb 52>;
  else
    goto <bb 51>;
;;    succ:       52 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                51 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 51, loop depth 1, count 0, freq 260, maybe hot
;;    prev block 50, next block 52, flags: (NEW)
;;    pred:       50 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                52 [21.6%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_457 = PHI <.MEM_526(50), .MEM_436(52)>
  goto <bb 61>;
;;    succ:       61 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 52, loop depth 1, count 0, freq 401, maybe hot
;;    prev block 51, next block 53, flags: (NEW, REACHABLE)
;;    pred:       50 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.67070 => NULL
  # DEBUG __xD.67069 => &__x_copyD.45305
  # PT = nonlocal escaped 
  _186 = &__old_finish_546->_M_tD.41463;
  # DEBUG thisD.67075 => _186
  # DEBUG __xD.67076 => &__x_copyD.45305._M_tD.41463
  # DEBUG thisD.61229 => &__x_copyD.45305._M_tD.41463
  # DEBUG __aD.61227 => NULL
  # DEBUG D#736ptD.0 => &MEM[(const struct _Rb_treeD.41462 &)&__x_copyD.45305]._M_implD.41540._M_key_compareD.41694
  # DEBUG D#735ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_186]._M_implD.41540
  # DEBUG thisD.67091 => D#735ptD.0
  # DEBUG __compD.67090 => D#736ptD.0
  # DEBUG __aD.67089 => NULL
  # DEBUG thisD.54200 => D#735ptD.0
  # DEBUG __aD.54201 => NULL
  # DEBUG thisD.54196 => D#735ptD.0
  # DEBUG D.54197 => NULL
  # .MEM_430 = VDEF <.MEM_526>
  MEM[(struct _Rb_tree_implD.41541 *)__old_finish_546]._M_headerD.41695._M_colorD.24804 = 0;
  # .MEM_431 = VDEF <.MEM_430>
  MEM[(struct _Rb_tree_implD.41541 *)__old_finish_546]._M_headerD.41695._M_parentD.24805 = 0B;
  # .MEM_434 = VDEF <.MEM_431>
  MEM[(struct _Rb_tree_implD.41541 *)__old_finish_546]._M_node_countD.41696 = 0;
  # DEBUG thisD.67092 => D#735ptD.0
  # PT = nonlocal escaped 
  _141 = &MEM[(struct _Rb_tree_implD.41541 *)__old_finish_546]._M_headerD.41695;
  # .MEM_435 = VDEF <.MEM_434>
  MEM[(struct _Rb_tree_implD.41541 *)__old_finish_546]._M_headerD.41695._M_leftD.24806 = _141;
  # .MEM_436 = VDEF <.MEM_435>
  MEM[(struct _Rb_tree_implD.41541 *)__old_finish_546]._M_headerD.41695._M_rightD.24807 = _141;
  # VUSE <.MEM_436>
  # PT = nonlocal escaped null 
  _194 = MEM[(struct _Rb_tree_node_baseD.24800 * *)&__x_copyD.45305 + 16B];
  # DEBUG D#109ptD.0 => &__x_copyD.45305._M_tD.41463
  # DEBUG thisD.61221 => D#109ptD.0
  if (_194 != 0B)
    goto <bb 53>;
  else
    goto <bb 51>;
;;    succ:       53 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                51 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 53, loop depth 1, count 0, freq 315, maybe hot
;;    prev block 52, next block 54, flags: (NEW, REACHABLE)
;;    pred:       52 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.61243 => _186
  # DEBUG thisD.67082 => _186
  # DEBUG D#110ptD.0 => &__x_copyD.45305._M_tD.41463
  # DEBUG thisD.61239 => D#110ptD.0
  # DEBUG thisD.67085 => _186
  # DEBUG __xD.67084 => NULL
  # DEBUG __pD.67083 => NULL
  # DEBUG thisD.67088 => &__anD.67086
  # DEBUG __tD.67087 => _186
  # .MEM_437 = VDEF <.MEM_436>
  __anD.67086._M_tD.45275 = _186;
  [LP 10] # .MEM_438 = VDEF <.MEM_437>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __x_196 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_M_copyINSA_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS4_EPKSE_SF_RT_D.45292 (_186, _194, _141, &__anD.67086);
;;    succ:       54 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                65 (EH,EXECUTABLE)

;;   basic block 54, loop depth 1, count 0, freq 315, maybe hot
;;    prev block 53, next block 55, flags: (NEW, REACHABLE)
;;    pred:       53 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_439 = VDEF <.MEM_438>
  __anD.67086 ={v} {CLOBBER};
  # .MEM_440 = VDEF <.MEM_439>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)__old_finish_546 + 16] = __x_196;
  # DEBUG thisD.61257 => _186
  # DEBUG thisD.61255 => _186
  # DEBUG __xD.67078 => __x_196
;;    succ:       55 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 55, loop depth 2, count 0, freq 3495, maybe hot
;;    prev block 54, next block 56, flags: (NEW, REACHABLE)
;;    pred:       54 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                56 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_197 = PHI <__x_196(54), __x_198(56)>
  # DEBUG __xD.67079 => __x_197
  # VUSE <.MEM_440>
  # PT = nonlocal escaped 
  __x_198 = __x_197->_M_leftD.24806;
  if (__x_198 == 0B)
    goto <bb 57>;
  else
    goto <bb 56>;
;;    succ:       57 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                56 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 56, loop depth 2, count 0, freq 3180, maybe hot
;;    prev block 55, next block 57, flags: (NEW)
;;    pred:       55 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 55>;
;;    succ:       55 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 57, loop depth 1, count 0, freq 315, maybe hot
;;    prev block 56, next block 58, flags: (NEW, REACHABLE)
;;    pred:       55 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_394 = PHI <__x_197(55)>
  # .MEM_441 = VDEF <.MEM_440>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)__old_finish_546 + 24] = __x_394;
  # DEBUG thisD.61250 => _186
  # DEBUG thisD.61248 => _186
  # DEBUG __xD.67080 => __x_196
;;    succ:       58 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 58, loop depth 2, count 0, freq 3495, maybe hot
;;    prev block 57, next block 59, flags: (NEW, REACHABLE)
;;    pred:       57 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                59 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_199 = PHI <__x_196(57), __x_200(59)>
  # DEBUG __xD.67081 => __x_199
  # VUSE <.MEM_441>
  # PT = nonlocal escaped 
  __x_200 = __x_199->_M_rightD.24807;
  if (__x_200 == 0B)
    goto <bb 60>;
  else
    goto <bb 59>;
;;    succ:       60 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                59 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 59, loop depth 2, count 0, freq 3180, maybe hot
;;    prev block 58, next block 60, flags: (NEW)
;;    pred:       58 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 58>;
;;    succ:       58 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 60, loop depth 1, count 0, freq 315, maybe hot
;;    prev block 59, next block 61, flags: (NEW, REACHABLE)
;;    pred:       58 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_395 = PHI <__x_199(58)>
  # .MEM_442 = VDEF <.MEM_441>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)__old_finish_546 + 32] = __x_395;
  # VUSE <.MEM_442>
  _201 = MEM[(const struct _Rb_treeD.41462 &)&__x_copyD.45305]._M_implD.41540._M_node_countD.41696;
  # .MEM_443 = VDEF <.MEM_442>
  MEM[(struct _Rb_treeD.41462 *)__old_finish_546]._M_implD.41540._M_node_countD.41696 = _201;
;;    succ:       61 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 61, loop depth 1, count 0, freq 575, maybe hot
;;    prev block 60, next block 62, flags: (NEW, REACHABLE)
;;    pred:       51 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                60 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_297 = PHI <.MEM_457(51), .MEM_443(60)>
  # RANGE [0, 18446744073709551614]
  __n_187 = __n_544 + 18446744073709551615;
  # DEBUG __nD.67053 => __n_187
  # PT = nonlocal escaped 
  __old_finish_188 = __old_finish_546 + 48;
  # DEBUG __curD.67055 => __old_finish_188
  # DEBUG __curD.67055 => __old_finish_188
  # DEBUG __nD.67053 => __n_187
  if (__n_187 == 0)
    goto <bb 62>;
  else
    goto <bb 63>;
;;    succ:       62 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                63 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 62, loop depth 0, count 0, freq 26, maybe hot
;;    prev block 61, next block 63, flags: (NEW)
;;    pred:       61 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __old_finish_409 = PHI <__old_finish_188(61)>
  goto <bb 64>;
;;    succ:       64 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 63, loop depth 1, count 0, freq 549, maybe hot
;;    prev block 62, next block 64, flags: (NEW)
;;    pred:       61 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 50>;
;;    succ:       50 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 64, loop depth 0, count 0, freq 27, maybe hot
;;    prev block 63, next block 65, flags: (NEW, REACHABLE)
;;    pred:       62 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                48 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __old_finish_545 = PHI <__old_finish_409(62), prephitmp_151(48)>
  # .MEM_527 = PHI <.MEM_297(62), .MEM_292(48)>
  # .MEM_71 = VDEF <.MEM_527>
  this_9(D)->D.37893._M_implD.37384._M_finishD.37387 = __old_finish_545;
  # DEBUG D#801ptD.0 => &this_9(D)->D.37893
  # DEBUG thisD.61982 => D#801ptD.0
  # DEBUG thisD.61980 => &__positionD.37818
  # DEBUG __firstD.61965 => D#1166ptD.0
  # DEBUG __lastD.61966 => D#1163ptD.0
  # DEBUG __resultD.61967 => NULL
  # DEBUG __allocD.61968 => D#739ptD.0
  # DEBUG D#738ptD.0 => D#739ptD.0
  # DEBUG D#737ptD.0 => D#738ptD.0
  # DEBUG __firstD.61972 => D#1166ptD.0
  # DEBUG __lastD.61971 => D#1163ptD.0
  # DEBUG __resultD.61970 => NULL
  # DEBUG D.61969 => D#737ptD.0
  # DEBUG __firstD.61975 => D#1166ptD.0
  # DEBUG __lastD.61974 => D#1163ptD.0
  # DEBUG __resultD.61973 => NULL
  # DEBUG __assignableD.61978 => 1
  # DEBUG __firstD.67093 => D#1166ptD.0
  # DEBUG __lastD.67094 => D#1163ptD.0
  # DEBUG __resultD.67095 => __old_finish_545
  # DEBUG __curD.67096 => __old_finish_545
  # DEBUG __firstD.67093 => D#1166ptD.0
  if (__position_23 == prephitmp_151)
    goto <bb 196>;
  else
    goto <bb 72>;
;;    succ:       196 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                72 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 65, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 64, next block 66, flags: (NEW, REACHABLE)
;;    pred:       53 (EH,EXECUTABLE)
  # PT = nonlocal escaped 
  # __old_finish_273 = PHI <__old_finish_546(53)>
<L22>: [LP 10]
  # VUSE <.MEM_438>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _189 = __builtin_eh_pointerD.2738 (17);
  # .MEM_444 = VDEF <.MEM_438>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_begin_catchD.14644 (_189);
  # DEBUG __firstD.67057 => D#1163ptD.0
  # DEBUG __lastD.67056 => __old_finish_273
  # DEBUG __firstD.67060 => D#1163ptD.0
  # DEBUG __lastD.67059 => __old_finish_273
  # DEBUG __firstD.67060 => D#1163ptD.0
  if (prephitmp_151 == __old_finish_273)
    goto <bb 66>;
  else
    goto <bb 67>;
;;    succ:       66 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                67 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 66, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 65, next block 67, flags: (NEW, REACHABLE)
;;    pred:       65 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                68 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_456 = PHI <.MEM_444(65), .MEM_450(68)>
  [LP 9] # .MEM_451 = VDEF <.MEM_456>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_rethrowD.45013 ();
;;    succ:       70 (EH,EXECUTABLE)

;;   basic block 67, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 66, next block 68, flags: (NEW, REACHABLE)
;;    pred:       65 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       68 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 68, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 67, next block 69, flags: (NEW)
;;    pred:       67 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                69 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __old_finish_541 = PHI <prephitmp_151(67), __old_finish_193(69)>
  # .MEM_525 = PHI <.MEM_444(67), .MEM_450(69)>
  # DEBUG __firstD.67060 => __old_finish_541
  # DEBUG __rD.57841 => __old_finish_541
  # DEBUG __pointerD.67061 => NULL
  # DEBUG thisD.67062 => NULL
  # PT = nonlocal escaped 
  _191 = &__old_finish_541->_M_tD.41463;
  # DEBUG thisD.67063 => _191
  # VUSE <.MEM_525>
  # PT = nonlocal escaped 
  _192 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__old_finish_541 + 16B];
  # DEBUG D#91ptD.0 => _191
  # DEBUG thisD.57821 => D#91ptD.0
  # .MEM_445 = VDEF <.MEM_525>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (_191, _192);
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_191]._M_implD.41540
  # DEBUG thisD.67064 => D#549ptD.0
  # DEBUG thisD.67065 => D#549ptD.0
  # DEBUG thisD.67066 => D#549ptD.0
  # .MEM_450 = VDEF <.MEM_445>
  MEM[(struct  &)__old_finish_541] ={v} {CLOBBER};
  # PT = nonlocal escaped 
  __old_finish_193 = __old_finish_541 + 48;
  # DEBUG __firstD.67060 => __old_finish_193
  # DEBUG __firstD.67060 => __old_finish_193
  if (__old_finish_193 == __old_finish_273)
    goto <bb 66>;
  else
    goto <bb 69>;
;;    succ:       66 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                69 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 69, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 68, next block 70, flags: (NEW)
;;    pred:       68 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 68>;
;;    succ:       68 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 70, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 69, next block 71, flags: (NEW, REACHABLE)
;;    pred:       66 (EH,EXECUTABLE)
<L24>: [LP 9]
  [MNT 15] # .MEM_452 = VDEF <.MEM_451>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_end_catchD.14643 ();
  [LP 24] resx 16
;;    succ:       71 (EH,EXECUTABLE)

;;   basic block 71, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 70, next block 72, flags: (NEW)
;;    pred:       70 (EH,EXECUTABLE)
<L42>: [LP 24]
  goto <bb 179> (<L10>);
;;    succ:       179 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 72, loop depth 0, count 0, freq 26, maybe hot
;;    prev block 71, next block 73, flags: (NEW, REACHABLE)
;;    pred:       64 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       73 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 73, loop depth 1, count 0, freq 575, maybe hot
;;    prev block 72, next block 74, flags: (NEW)
;;    pred:       72 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                85 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  # __position_453 = PHI <__position_23(72), __position_206(85)>
  # PT = nonlocal escaped 
  # __old_finish_542 = PHI <__old_finish_545(72), __old_finish_207(85)>
  # .MEM_518 = PHI <.MEM_71(72), .MEM_300(85)>
  # DEBUG __curD.67096 => __old_finish_542
  # DEBUG __firstD.67093 => __position_453
  # DEBUG __rD.61276 => __old_finish_542
  # DEBUG __pD.67109 => NULL
  # DEBUG __valueD.67108 => __position_453
  # DEBUG D#24ptD.0 => 48
  # DEBUG __pD.61264 => NULL
  # DEBUG D.61265 => D#24ptD.0
  if (__old_finish_542 != 0B)
    goto <bb 75>;
  else
    goto <bb 74>;
;;    succ:       75 [100.0%]  (TRUE_VALUE,EXECUTABLE)
;;                74 [0.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 74, loop depth 1, count 0, freq 124, maybe hot
;;    prev block 73, next block 75, flags: (NEW)
;;    pred:       73 [0.0%]  (FALSE_VALUE,EXECUTABLE)
;;                75 [21.6%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_449 = PHI <.MEM_518(73), .MEM_460(75)>
  goto <bb 84>;
;;    succ:       84 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 75, loop depth 1, count 0, freq 575, maybe hot
;;    prev block 74, next block 76, flags: (NEW, REACHABLE)
;;    pred:       73 [100.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.67111 => NULL
  # DEBUG __xD.67110 => __position_453
  # DEBUG D#1162ptD.0 => &MEM[(const struct mapD.37148 &)__position_453]._M_tD.41463
  # PT = nonlocal escaped 
  _205 = &__old_finish_542->_M_tD.41463;
  # DEBUG thisD.67116 => _205
  # DEBUG __xD.67117 => D#1162ptD.0
  # DEBUG thisD.61229 => D#1162ptD.0
  # DEBUG __aD.61227 => NULL
  # DEBUG D#736ptD.0 => &MEM[(const struct _Rb_treeD.41462 &)D#1162ptD.0]._M_implD.41540._M_key_compareD.41694
  # DEBUG D#735ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_205]._M_implD.41540
  # DEBUG thisD.67132 => D#735ptD.0
  # DEBUG __compD.67131 => D#736ptD.0
  # DEBUG __aD.67130 => NULL
  # DEBUG thisD.54200 => D#735ptD.0
  # DEBUG __aD.54201 => NULL
  # DEBUG thisD.54196 => D#735ptD.0
  # DEBUG D.54197 => NULL
  # .MEM_454 = VDEF <.MEM_518>
  MEM[(struct _Rb_tree_implD.41541 *)__old_finish_542]._M_headerD.41695._M_colorD.24804 = 0;
  # .MEM_455 = VDEF <.MEM_454>
  MEM[(struct _Rb_tree_implD.41541 *)__old_finish_542]._M_headerD.41695._M_parentD.24805 = 0B;
  # .MEM_458 = VDEF <.MEM_455>
  MEM[(struct _Rb_tree_implD.41541 *)__old_finish_542]._M_node_countD.41696 = 0;
  # DEBUG thisD.67133 => D#735ptD.0
  # PT = nonlocal escaped 
  _142 = &MEM[(struct _Rb_tree_implD.41541 *)__old_finish_542]._M_headerD.41695;
  # .MEM_459 = VDEF <.MEM_458>
  MEM[(struct _Rb_tree_implD.41541 *)__old_finish_542]._M_headerD.41695._M_leftD.24806 = _142;
  # .MEM_460 = VDEF <.MEM_459>
  MEM[(struct _Rb_tree_implD.41541 *)__old_finish_542]._M_headerD.41695._M_rightD.24807 = _142;
  # VUSE <.MEM_460>
  # PT = nonlocal escaped 
  _213 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__position_453 + 16B];
  # DEBUG D#109ptD.0 => D#1162ptD.0
  # DEBUG thisD.61221 => D#109ptD.0
  if (_213 != 0B)
    goto <bb 76>;
  else
    goto <bb 74>;
;;    succ:       76 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                74 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 76, loop depth 1, count 0, freq 450, maybe hot
;;    prev block 75, next block 77, flags: (NEW, REACHABLE)
;;    pred:       75 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.61243 => _205
  # DEBUG thisD.67123 => _205
  # DEBUG D#110ptD.0 => D#1162ptD.0
  # DEBUG thisD.61239 => D#110ptD.0
  # DEBUG thisD.67126 => _205
  # DEBUG __xD.67125 => NULL
  # DEBUG __pD.67124 => NULL
  # DEBUG thisD.67129 => &__anD.67127
  # DEBUG __tD.67128 => _205
  # .MEM_461 = VDEF <.MEM_460>
  __anD.67127._M_tD.45275 = _205;
  [LP 12] # .MEM_462 = VDEF <.MEM_461>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __x_215 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_M_copyINSA_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS4_EPKSE_SF_RT_D.45292 (_205, _213, _142, &__anD.67127);
;;    succ:       77 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                87 (EH,EXECUTABLE)

;;   basic block 77, loop depth 1, count 0, freq 450, maybe hot
;;    prev block 76, next block 78, flags: (NEW, REACHABLE)
;;    pred:       76 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_463 = VDEF <.MEM_462>
  __anD.67127 ={v} {CLOBBER};
  # .MEM_464 = VDEF <.MEM_463>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)__old_finish_542 + 16] = __x_215;
  # DEBUG thisD.61257 => _205
  # DEBUG thisD.61255 => _205
  # DEBUG __xD.67119 => __x_215
;;    succ:       78 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 78, loop depth 2, count 0, freq 5004, maybe hot
;;    prev block 77, next block 79, flags: (NEW, REACHABLE)
;;    pred:       77 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                79 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_216 = PHI <__x_215(77), __x_217(79)>
  # DEBUG __xD.67120 => __x_216
  # VUSE <.MEM_464>
  # PT = nonlocal escaped 
  __x_217 = __x_216->_M_leftD.24806;
  if (__x_217 == 0B)
    goto <bb 80>;
  else
    goto <bb 79>;
;;    succ:       80 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                79 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 79, loop depth 2, count 0, freq 4554, maybe hot
;;    prev block 78, next block 80, flags: (NEW)
;;    pred:       78 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 78>;
;;    succ:       78 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 80, loop depth 1, count 0, freq 450, maybe hot
;;    prev block 79, next block 81, flags: (NEW, REACHABLE)
;;    pred:       78 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_575 = PHI <__x_216(78)>
  # .MEM_465 = VDEF <.MEM_464>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)__old_finish_542 + 24] = __x_575;
  # DEBUG thisD.61250 => _205
  # DEBUG thisD.61248 => _205
  # DEBUG __xD.67121 => __x_215
;;    succ:       81 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 81, loop depth 2, count 0, freq 5004, maybe hot
;;    prev block 80, next block 82, flags: (NEW, REACHABLE)
;;    pred:       80 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                82 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_218 = PHI <__x_215(80), __x_219(82)>
  # DEBUG __xD.67122 => __x_218
  # VUSE <.MEM_465>
  # PT = nonlocal escaped 
  __x_219 = __x_218->_M_rightD.24807;
  if (__x_219 == 0B)
    goto <bb 83>;
  else
    goto <bb 82>;
;;    succ:       83 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                82 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 82, loop depth 2, count 0, freq 4554, maybe hot
;;    prev block 81, next block 83, flags: (NEW)
;;    pred:       81 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 81>;
;;    succ:       81 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 83, loop depth 1, count 0, freq 450, maybe hot
;;    prev block 82, next block 84, flags: (NEW, REACHABLE)
;;    pred:       81 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_234 = PHI <__x_218(81)>
  # .MEM_466 = VDEF <.MEM_465>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)__old_finish_542 + 32] = __x_234;
  # VUSE <.MEM_466>
  _220 = MEM[(const struct _Rb_treeD.41462 &)__position_453]._M_implD.41540._M_node_countD.41696;
  # .MEM_467 = VDEF <.MEM_466>
  MEM[(struct _Rb_treeD.41462 *)__old_finish_542]._M_implD.41540._M_node_countD.41696 = _220;
;;    succ:       84 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 84, loop depth 1, count 0, freq 575, maybe hot
;;    prev block 83, next block 85, flags: (NEW, REACHABLE)
;;    pred:       74 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                83 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_300 = PHI <.MEM_449(74), .MEM_467(83)>
  # PT = nonlocal 
  __position_206 = __position_453 + 48;
  # DEBUG __firstD.67093 => __position_206
  # PT = nonlocal escaped 
  __old_finish_207 = __old_finish_542 + 48;
  # DEBUG __curD.67096 => __old_finish_207
  # DEBUG __curD.67096 => __old_finish_207
  # DEBUG __firstD.67093 => __position_206
  if (prephitmp_151 == __position_206)
    goto <bb 86>;
  else
    goto <bb 85>;
;;    succ:       86 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                85 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 85, loop depth 1, count 0, freq 549, maybe hot
;;    prev block 84, next block 86, flags: (NEW)
;;    pred:       84 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 73>;
;;    succ:       73 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 86, loop depth 0, count 0, freq 26, maybe hot
;;    prev block 85, next block 87, flags: (NEW, REACHABLE)
;;    pred:       84 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_300>
  # PT = nonlocal escaped 
  _74 = this_9(D)->D.37893._M_implD.37384._M_finishD.37387;
  # RANGE [0, 18446744073709551615]
  _75 = (long unsigned intD.14) _31;
  # PT = nonlocal escaped 
  _76 = _74 + _75;
  # .MEM_77 = VDEF <.MEM_300>
  this_9(D)->D.37893._M_implD.37384._M_finishD.37387 = _76;
  # DEBUG thisD.61992 => &__positionD.37818
  # DEBUG __firstD.61984 => D#1166ptD.0
  # DEBUG __lastD.61985 => D#1163ptD.0
  # DEBUG __valueD.61986 => &__x_copyD.45305
  # DEBUG __firstD.61989 => D#1166ptD.0
  if (__position_23 == prephitmp_151)
    goto <bb 42>;
  else
    goto <bb 94>;
;;    succ:       42 (TRUE_VALUE,EXECUTABLE)
;;                94 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 87, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 86, next block 88, flags: (NEW, REACHABLE)
;;    pred:       76 (EH,EXECUTABLE)
  # PT = nonlocal escaped 
  # __old_finish_308 = PHI <__old_finish_542(76)>
<L25>: [LP 12]
  # VUSE <.MEM_462>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _208 = __builtin_eh_pointerD.2738 (20);
  # .MEM_468 = VDEF <.MEM_462>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_begin_catchD.14644 (_208);
  # DEBUG __firstD.67098 => __old_finish_545
  # DEBUG __lastD.67097 => __old_finish_308
  # DEBUG __firstD.67101 => __old_finish_545
  # DEBUG __lastD.67100 => __old_finish_308
  # DEBUG __firstD.67101 => __old_finish_545
  if (__old_finish_308 == __old_finish_545)
    goto <bb 88>;
  else
    goto <bb 89>;
;;    succ:       88 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                89 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 88, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 87, next block 89, flags: (NEW, REACHABLE)
;;    pred:       87 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                90 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_448 = PHI <.MEM_468(87), .MEM_474(90)>
  [LP 11] # .MEM_475 = VDEF <.MEM_448>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_rethrowD.45013 ();
;;    succ:       92 (EH,EXECUTABLE)

;;   basic block 89, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 88, next block 90, flags: (NEW, REACHABLE)
;;    pred:       87 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       90 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 90, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 89, next block 91, flags: (NEW)
;;    pred:       89 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                91 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __old_finish_85 = PHI <__old_finish_545(89), __old_finish_212(91)>
  # .MEM_523 = PHI <.MEM_468(89), .MEM_474(91)>
  # DEBUG __firstD.67101 => __old_finish_85
  # DEBUG __rD.57841 => __old_finish_85
  # DEBUG __pointerD.67102 => NULL
  # DEBUG thisD.67103 => NULL
  # PT = nonlocal escaped 
  _210 = &__old_finish_85->_M_tD.41463;
  # DEBUG thisD.67104 => _210
  # VUSE <.MEM_523>
  # PT = nonlocal escaped 
  _211 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__old_finish_85 + 16B];
  # DEBUG D#91ptD.0 => _210
  # DEBUG thisD.57821 => D#91ptD.0
  # .MEM_469 = VDEF <.MEM_523>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (_210, _211);
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_210]._M_implD.41540
  # DEBUG thisD.67105 => D#549ptD.0
  # DEBUG thisD.67106 => D#549ptD.0
  # DEBUG thisD.67107 => D#549ptD.0
  # .MEM_474 = VDEF <.MEM_469>
  MEM[(struct  &)__old_finish_85] ={v} {CLOBBER};
  # PT = nonlocal escaped 
  __old_finish_212 = __old_finish_85 + 48;
  # DEBUG __firstD.67101 => __old_finish_212
  # DEBUG __firstD.67101 => __old_finish_212
  if (__old_finish_212 == __old_finish_308)
    goto <bb 88>;
  else
    goto <bb 91>;
;;    succ:       88 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                91 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 91, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 90, next block 92, flags: (NEW)
;;    pred:       90 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 90>;
;;    succ:       90 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 92, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 91, next block 93, flags: (NEW, REACHABLE)
;;    pred:       88 (EH,EXECUTABLE)
<L27>: [LP 11]
  [MNT 18] # .MEM_476 = VDEF <.MEM_475>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_end_catchD.14643 ();
  [LP 25] resx 19
;;    succ:       93 (EH,EXECUTABLE)

;;   basic block 93, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 92, next block 94, flags: (NEW)
;;    pred:       92 (EH,EXECUTABLE)
<L43>: [LP 25]
  goto <bb 179> (<L10>);
;;    succ:       179 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 94, loop depth 0, count 0, freq 26, maybe hot
;;    prev block 93, next block 95, flags: (NEW, REACHABLE)
;;    pred:       86 [100.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       95 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 95, loop depth 1, count 0, freq 575, maybe hot
;;    prev block 94, next block 96, flags: (NEW)
;;    pred:       94 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                98 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  # __position_552 = PHI <__position_23(94), __position_88(98)>
  # .MEM_486 = PHI <.MEM_77(94), .MEM_143(98)>
  # DEBUG __firstD.61989 => __position_552
  # DEBUG thisD.61991 => __position_552
  # DEBUG __xD.61990 => &__x_copyD.45305
  # PT = nonlocal 
  _87 = &__position_552->_M_tD.41463;
  [LP 2] # .MEM_143 = VDEF <.MEM_486>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EEaSERKSA_D.41857 (_87, &__x_copyD.45305._M_tD.41463);
  goto <bb 97>;
;;    succ:       97 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                96 (EH,EXECUTABLE)

;;   basic block 96, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 95, next block 97, flags: (NEW)
;;    pred:       95 (EH,EXECUTABLE)
<L44>: [LP 2]
  goto <bb 179> (<L10>);
;;    succ:       179 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 97, loop depth 1, count 0, freq 575, maybe hot
;;    prev block 96, next block 98, flags: (NEW, REACHABLE)
;;    pred:       95 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  __position_88 = __position_552 + 48;
  # DEBUG __firstD.61989 => __position_88
  # DEBUG __firstD.61989 => __position_88
  if (__position_88 == prephitmp_151)
    goto <bb 42>;
  else
    goto <bb 98>;
;;    succ:       42 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                98 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 98, loop depth 1, count 0, freq 549, maybe hot
;;    prev block 97, next block 99, flags: (NEW)
;;    pred:       97 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 95>;
;;    succ:       95 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 99, loop depth 0, count 0, freq 54, maybe hot
;;    prev block 98, next block 100, flags: (NEW, REACHABLE)
;;    pred:       196 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                42 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2 = PHI <.MEM_203(196), .MEM_470(42)>
  # DEBUG thisD.61994 => &__x_copyD.45305
  # DEBUG thisD.61995 => &__x_copyD.45305._M_tD.41463
  # VUSE <.MEM_2>
  # PT = nonlocal escaped null 
  _89 = MEM[(struct _Rb_tree_node_baseD.24800 * *)&__x_copyD.45305 + 16B];
  # DEBUG D#91ptD.0 => &__x_copyD.45305._M_tD.41463
  # DEBUG thisD.57821 => D#91ptD.0
  # .MEM_144 = VDEF <.MEM_2>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (&__x_copyD.45305._M_tD.41463, _89);
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)&__x_copyD.45305]._M_implD.41540
  # DEBUG thisD.61996 => D#549ptD.0
  # DEBUG thisD.61997 => D#549ptD.0
  # DEBUG thisD.61998 => D#549ptD.0
  # .MEM_78 = VDEF <.MEM_144>
  __x_copyD.45305 ={v} {CLOBBER};
  goto <bb 177>;
;;    succ:       177 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 100, loop depth 0, count 0, freq 54, maybe hot
;;    prev block 99, next block 101, flags: (NEW, REACHABLE)
;;    pred:       3 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.67166 => this_9(D)
  # DEBUG __nD.67167 => __n_7(D)
  # DEBUG __nD.67167 => __n_7(D)
  # DEBUG __sD.67168 => "vector::_M_fill_insert"
  # DEBUG D#568ptD.0 => this_9(D)
  # DEBUG thisD.58162 => D#568ptD.0
  # DEBUG D#567ptD.0 => D#568ptD.0
  # DEBUG D#566ptD.0 => &D#567ptD.0->D.37893
  # DEBUG thisD.58152 => D#566ptD.0
  # DEBUG __aD.58144 => D#565ptD.0
  # DEBUG D#564ptD.0 => D#565ptD.0
  # DEBUG D#563ptD.0 => D#564ptD.0
  # DEBUG thisD.58135 => D#563ptD.0
  # VUSE <.MEM_8(D)>
  # PT = nonlocal escaped 
  _24 = MEM[(struct mapD.37148 * *)this_9(D)];
  # DEBUG D#92ptD.0 => this_9(D)
  # DEBUG D#92ptD.0 => this_9(D)
  # DEBUG thisD.67172 => D#92ptD.0
  # DEBUG thisD.67173 => D#92ptD.0
  _236 = (long intD.12) _24;
  _237 = _13 - _236;
  # RANGE [-192153584101141162, 192153584101141162]
  _238 = _237 /[ex] 48;
  # RANGE ~[192153584101141163, 18254590489608410453]
  _239 = (const long unsigned intD.14) _238;
  # RANGE [192153584101141163, 576460752303423487] NONZERO 576460752303423487
  _240 = 384307168202282325 - _239;
  if (__n_7(D) > _240)
    goto <bb 101>;
  else
    goto <bb 102>;
;;    succ:       101 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                102 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 101, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 100, next block 102, flags: (NEW, REACHABLE)
;;    pred:       100 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_391 = VDEF <.MEM_8(D)>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  _ZSt20__throw_length_errorPKcD.2860 ("vector::_M_fill_insert");
;;    succ:      

;;   basic block 102, loop depth 0, count 0, freq 54, maybe hot
;;    prev block 101, next block 103, flags: (NEW, REACHABLE)
;;    pred:       100 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#92ptD.0 => this_9(D)
  # DEBUG D#92ptD.0 => this_9(D)
  # DEBUG thisD.58180 => D#92ptD.0
  # DEBUG thisD.58179 => D#92ptD.0
  # DEBUG D#92ptD.0 => this_9(D)
  # DEBUG D#92ptD.0 => this_9(D)
  # DEBUG thisD.58175 => D#92ptD.0
  # DEBUG thisD.58174 => D#92ptD.0
  # DEBUG __aD.67171 => &D.67175
  # DEBUG __bD.67170 => &__nD.67167
  _166 = MAX_EXPR <__n_7(D), _239>;
  # RANGE [0, 18446744073709551615]
  __len_244 = _166 + _239;
  # DEBUG __lenD.67169 => __len_244
  # DEBUG D#92ptD.0 => this_9(D)
  # DEBUG D#92ptD.0 => this_9(D)
  # DEBUG thisD.58167 => D#92ptD.0
  # DEBUG thisD.58166 => D#92ptD.0
  # DEBUG D#568ptD.0 => this_9(D)
  # DEBUG thisD.58182 => D#568ptD.0
  # DEBUG D#567ptD.0 => D#568ptD.0
  # DEBUG D#566ptD.0 => &D#567ptD.0->D.37893
  # DEBUG thisD.58152 => D#566ptD.0
  # DEBUG __aD.58144 => D#565ptD.0
  # DEBUG D#564ptD.0 => D#565ptD.0
  # DEBUG D#563ptD.0 => D#564ptD.0
  # DEBUG thisD.58135 => D#563ptD.0
  _95 = __len_244 > 384307168202282325;
  _540 = _239 > __len_244;
  _204 = _95 | _540;
  if (_204 != 0)
    goto <bb 194>;
  else
    goto <bb 195>;
;;    succ:       194 [67.0%]  (TRUE_VALUE,EXECUTABLE)
;;                195 [33.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 103, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 102, next block 104, flags: (NEW)
;;    pred:       195 [10.0%]  (TRUE_VALUE,EXECUTABLE)
  pretmp_423 = __len_244 * 48;
;;    succ:       104 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 104, loop depth 0, count 0, freq 49, maybe hot
;;    prev block 103, next block 105, flags: (NEW, REACHABLE)
;;    pred:       194 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                103 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE ~[192153584101141163, 18254590489608410453]
  # __elems_before_317 = PHI <__elems_before_493(194), __elems_before_570(103)>
  # _573 = PHI <_497(194), _488(103)>
  # RANGE [48, 18446744073709551600] NONZERO 18446744073709551600
  # prephitmp_424 = PHI <18446744073709551600(194), pretmp_423(103)>
  # DEBUG __lenD.45339 => NULL
  # DEBUG thisD.62014 => this_9(D)
  # DEBUG D#170ptD.0 => &this_9(D)->D.37893._M_implD.37384._M_startD.37386
  # DEBUG thisD.62016 => NULL
  # DEBUG __iD.62015 => D#170ptD.0
  # DEBUG __lhsD.62011 => &__positionD.37818
  # DEBUG __rhsD.62012 => &D.45341
  # DEBUG thisD.53180 => &__positionD.37818
  # DEBUG thisD.53178 => &D.45341
  # DEBUG __elems_beforeD.45340 => __elems_before_317
  # DEBUG D#811ptD.0 => &this_9(D)->D.37893
  # DEBUG D#576ptD.0 => D#811ptD.0
  # DEBUG __nD.67157 => NULL
  # DEBUG thisD.67158 => D#576ptD.0
  # DEBUG D#575ptD.0 => D#576ptD.0
  # DEBUG D#574ptD.0 => &D#575ptD.0->_M_implD.37384
  # DEBUG D#573ptD.0 => D#574ptD.0
  # DEBUG __nD.67161 => NULL
  # DEBUG __aD.67160 => D#573ptD.0
  # DEBUG D#572ptD.0 => D#573ptD.0
  # DEBUG D#570ptD.0 => D#572ptD.0
  # DEBUG D#571ptD.0 => 0B
  # DEBUG __nD.67164 => NULL
  # DEBUG thisD.67162 => D#570ptD.0
  # DEBUG D.67163 => D#571ptD.0
  # DEBUG D#569ptD.0 => D#570ptD.0
  # DEBUG D#563ptD.0 => D#569ptD.0
  # DEBUG thisD.58187 => D#563ptD.0
  # .MEM_316 = VDEF <.MEM_8(D)>
  # PT = { D.67286 } (escaped heap)
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  _232 = _ZnwmD.2764 (prephitmp_424);
;;    succ:       105 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 105, loop depth 0, count 0, freq 54, maybe hot
;;    prev block 104, next block 106, flags: (NEW, REACHABLE)
;;    pred:       195 [90.0%]  (FALSE_VALUE,EXECUTABLE)
;;                104 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.67286 } (escaped heap)
  # __new_finish_233 = PHI <0B(195), _232(104)>
  # .MEM_302 = PHI <.MEM_8(D)(195), .MEM_316(104)>
  # RANGE ~[192153584101141163, 18254590489608410453]
  # __elems_before_574 = PHI <__elems_before_570(195), __elems_before_317(104)>
  # _572 = PHI <_488(195), _573(104)>
  # prephitmp_128 = PHI <0(195), prephitmp_424(104)>
  # DEBUG __new_startD.45342 => NULL
  # DEBUG __new_finishD.45343 => NULL
  # DEBUG D#795ptD.0 => &this_9(D)->D.37893
  # DEBUG thisD.62009 => D#795ptD.0
  # RANGE [0, 18446744073709551615]
  _27 = (long unsigned intD.14) _572;
  # PT = null { D.67286 } (escaped heap)
  __first_28 = __new_finish_233 + _27;
  # DEBUG __firstD.61999 => __first_28
  # DEBUG __nD.62000 => __n_7(D)
  # DEBUG __xD.62001 => __x_29(D)
  # DEBUG D.62002 => D#742ptD.0
  # DEBUG __firstD.62005 => __first_28
  # DEBUG __nD.62004 => __n_7(D)
  # DEBUG __xD.62003 => __x_29(D)
  # DEBUG __assignableD.62007 => 1
  # DEBUG __firstD.67134 => __first_28
  # DEBUG __nD.67135 => __n_7(D)
  # DEBUG __xD.67136 => __x_29(D)
  # DEBUG __curD.67137 => __first_28
  # DEBUG __nD.67135 => __n_7(D)
;;    succ:       106 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 106, loop depth 1, count 0, freq 1149, maybe hot
;;    prev block 105, next block 107, flags: (NEW, REACHABLE)
;;    pred:       118 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                105 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 576460752303423487] NONZERO 576460752303423487
  # __n_566 = PHI <__n_225(118), __n_7(D)(105)>
  # PT = null { D.67286 } (escaped heap)
  # __first_568 = PHI <__first_226(118), __first_28(105)>
  # .MEM_559 = PHI <.MEM_304(118), .MEM_302(105)>
  # DEBUG __curD.67137 => __first_568
  # DEBUG __nD.67135 => __n_566
  # DEBUG __rD.61380 => __first_568
  # DEBUG __pD.67150 => NULL
  # DEBUG __valueD.67149 => __x_29(D)
  # DEBUG D#24ptD.0 => 48
  # DEBUG __pD.61264 => NULL
  # DEBUG D.61265 => D#24ptD.0
  if (__first_568 != 0B)
    goto <bb 108>;
  else
    goto <bb 107>;
;;    succ:       108 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                107 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 107, loop depth 1, count 0, freq 521, maybe hot
;;    prev block 106, next block 108, flags: (NEW)
;;    pred:       106 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                108 [21.6%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_447 = PHI <.MEM_559(106), .MEM_325(108)>
  goto <bb 117>;
;;    succ:       117 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 108, loop depth 1, count 0, freq 802, maybe hot
;;    prev block 107, next block 109, flags: (NEW, REACHABLE)
;;    pred:       106 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.67152 => NULL
  # DEBUG __xD.67151 => __x_29(D)
  # DEBUG D#1157ptD.0 => &MEM[(const struct mapD.37148 &)__x_29(D)]._M_tD.41463
  # PT = null { D.67286 } (escaped heap)
  _224 = &__first_568->_M_tD.41463;
  # DEBUG thisD.67176 => _224
  # DEBUG __xD.67177 => D#1157ptD.0
  # DEBUG thisD.61229 => D#1157ptD.0
  # DEBUG __aD.61227 => NULL
  # DEBUG D#736ptD.0 => &MEM[(const struct _Rb_treeD.41462 &)D#1157ptD.0]._M_implD.41540._M_key_compareD.41694
  # DEBUG D#735ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_224]._M_implD.41540
  # DEBUG thisD.67192 => D#735ptD.0
  # DEBUG __compD.67191 => D#736ptD.0
  # DEBUG __aD.67190 => NULL
  # DEBUG thisD.54200 => D#735ptD.0
  # DEBUG __aD.54201 => NULL
  # DEBUG thisD.54196 => D#735ptD.0
  # DEBUG D.54197 => NULL
  # .MEM_319 = VDEF <.MEM_559>
  MEM[(struct _Rb_tree_implD.41541 *)__first_568]._M_headerD.41695._M_colorD.24804 = 0;
  # .MEM_320 = VDEF <.MEM_319>
  MEM[(struct _Rb_tree_implD.41541 *)__first_568]._M_headerD.41695._M_parentD.24805 = 0B;
  # .MEM_323 = VDEF <.MEM_320>
  MEM[(struct _Rb_tree_implD.41541 *)__first_568]._M_node_countD.41696 = 0;
  # DEBUG thisD.67193 => D#735ptD.0
  # PT = null { D.67286 } (escaped heap)
  _17 = &MEM[(struct _Rb_tree_implD.41541 *)__first_568]._M_headerD.41695;
  # .MEM_324 = VDEF <.MEM_323>
  MEM[(struct _Rb_tree_implD.41541 *)__first_568]._M_headerD.41695._M_leftD.24806 = _17;
  # .MEM_325 = VDEF <.MEM_324>
  MEM[(struct _Rb_tree_implD.41541 *)__first_568]._M_headerD.41695._M_rightD.24807 = _17;
  # VUSE <.MEM_325>
  # PT = nonlocal escaped 
  _246 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_29(D) + 16B];
  # DEBUG D#109ptD.0 => D#1157ptD.0
  # DEBUG thisD.61221 => D#109ptD.0
  if (_246 != 0B)
    goto <bb 109>;
  else
    goto <bb 107>;
;;    succ:       109 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                107 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 109, loop depth 1, count 0, freq 629, maybe hot
;;    prev block 108, next block 110, flags: (NEW, REACHABLE)
;;    pred:       108 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.61243 => _224
  # DEBUG thisD.67183 => _224
  # DEBUG D#110ptD.0 => D#1157ptD.0
  # DEBUG thisD.61239 => D#110ptD.0
  # DEBUG thisD.67186 => _224
  # DEBUG __xD.67185 => NULL
  # DEBUG __pD.67184 => NULL
  # DEBUG thisD.67189 => &__anD.67187
  # DEBUG __tD.67188 => _224
  # .MEM_326 = VDEF <.MEM_325>
  __anD.67187._M_tD.45275 = _224;
  [LP 14] # .MEM_327 = VDEF <.MEM_326>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __x_248 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_M_copyINSA_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS4_EPKSE_SF_RT_D.45292 (_224, _246, _17, &__anD.67187);
;;    succ:       110 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                120 (EH,EXECUTABLE)

;;   basic block 110, loop depth 1, count 0, freq 629, maybe hot
;;    prev block 109, next block 111, flags: (NEW, REACHABLE)
;;    pred:       109 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_328 = VDEF <.MEM_327>
  __anD.67187 ={v} {CLOBBER};
  # .MEM_329 = VDEF <.MEM_328>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)__first_568 + 16] = __x_248;
  # DEBUG thisD.61257 => _224
  # DEBUG thisD.61255 => _224
  # DEBUG __xD.67179 => __x_248
;;    succ:       111 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 111, loop depth 2, count 0, freq 6984, maybe hot
;;    prev block 110, next block 112, flags: (NEW, REACHABLE)
;;    pred:       110 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                112 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_249 = PHI <__x_248(110), __x_250(112)>
  # DEBUG __xD.67180 => __x_249
  # VUSE <.MEM_329>
  # PT = nonlocal escaped 
  __x_250 = __x_249->_M_leftD.24806;
  if (__x_250 == 0B)
    goto <bb 113>;
  else
    goto <bb 112>;
;;    succ:       113 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                112 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 112, loop depth 2, count 0, freq 6355, maybe hot
;;    prev block 111, next block 113, flags: (NEW)
;;    pred:       111 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 111>;
;;    succ:       111 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 113, loop depth 1, count 0, freq 629, maybe hot
;;    prev block 112, next block 114, flags: (NEW, REACHABLE)
;;    pred:       111 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_311 = PHI <__x_249(111)>
  # .MEM_330 = VDEF <.MEM_329>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)__first_568 + 24] = __x_311;
  # DEBUG thisD.61250 => _224
  # DEBUG thisD.61248 => _224
  # DEBUG __xD.67181 => __x_248
;;    succ:       114 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 114, loop depth 2, count 0, freq 6984, maybe hot
;;    prev block 113, next block 115, flags: (NEW, REACHABLE)
;;    pred:       113 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                115 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_251 = PHI <__x_248(113), __x_252(115)>
  # DEBUG __xD.67182 => __x_251
  # VUSE <.MEM_330>
  # PT = nonlocal escaped 
  __x_252 = __x_251->_M_rightD.24807;
  if (__x_252 == 0B)
    goto <bb 116>;
  else
    goto <bb 115>;
;;    succ:       116 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                115 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 115, loop depth 2, count 0, freq 6355, maybe hot
;;    prev block 114, next block 116, flags: (NEW)
;;    pred:       114 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 114>;
;;    succ:       114 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 116, loop depth 1, count 0, freq 629, maybe hot
;;    prev block 115, next block 117, flags: (NEW, REACHABLE)
;;    pred:       114 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_41 = PHI <__x_251(114)>
  # .MEM_331 = VDEF <.MEM_330>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)__first_568 + 32] = __x_41;
  # VUSE <.MEM_331>
  _253 = MEM[(const struct _Rb_treeD.41462 &)__x_29(D)]._M_implD.41540._M_node_countD.41696;
  # .MEM_332 = VDEF <.MEM_331>
  MEM[(struct _Rb_treeD.41462 *)__first_568]._M_implD.41540._M_node_countD.41696 = _253;
;;    succ:       117 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 117, loop depth 1, count 0, freq 1149, maybe hot
;;    prev block 116, next block 118, flags: (NEW, REACHABLE)
;;    pred:       107 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                116 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_304 = PHI <.MEM_447(107), .MEM_332(116)>
  # RANGE [0, 576460752303423486] NONZERO 576460752303423487
  __n_225 = __n_566 + 18446744073709551615;
  # DEBUG __nD.67135 => __n_225
  # PT = null { D.67286 } (escaped heap)
  __first_226 = __first_568 + 48;
  # DEBUG __curD.67137 => __first_226
  # DEBUG __curD.67137 => __first_226
  # DEBUG __nD.67135 => __n_225
  if (__n_225 == 0)
    goto <bb 119>;
  else
    goto <bb 118>;
;;    succ:       119 [4.7%]  (TRUE_VALUE,EXECUTABLE)
;;                118 [95.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 118, loop depth 1, count 0, freq 1095, maybe hot
;;    prev block 117, next block 119, flags: (NEW)
;;    pred:       117 [95.3%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 106>;
;;    succ:       106 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 119, loop depth 0, count 0, freq 54, maybe hot
;;    prev block 118, next block 120, flags: (NEW, REACHABLE)
;;    pred:       117 [4.7%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __new_finishD.45343 => 0B
  # DEBUG D#796ptD.0 => &this_9(D)->D.37893
  # DEBUG thisD.62036 => D#796ptD.0
  # DEBUG thisD.62034 => &__positionD.37818
  # VUSE <.MEM_304>
  # PT = nonlocal escaped 
  __first_32 = this_9(D)->D.37893._M_implD.37384._M_startD.37386;
  # DEBUG __firstD.62019 => __first_32
  # DEBUG __lastD.62020 => D#1166ptD.0
  # DEBUG __resultD.62021 => NULL
  # DEBUG __allocD.62022 => D#741ptD.0
  # DEBUG D#740ptD.0 => D#741ptD.0
  # DEBUG D#737ptD.0 => D#740ptD.0
  # DEBUG __firstD.62026 => __first_32
  # DEBUG __lastD.62025 => D#1166ptD.0
  # DEBUG __resultD.62024 => NULL
  # DEBUG D.62023 => D#737ptD.0
  # DEBUG __firstD.62029 => __first_32
  # DEBUG __lastD.62028 => D#1166ptD.0
  # DEBUG __resultD.62027 => NULL
  # DEBUG __assignableD.62032 => 1
  # DEBUG __firstD.67194 => __first_32
  # DEBUG __lastD.67195 => D#1166ptD.0
  # DEBUG __resultD.67196 => __new_finish_233
  # DEBUG __curD.67197 => __new_finish_233
  # DEBUG __firstD.67194 => __first_32
  if (__position_23 == __first_32)
    goto <bb 141>;
  else
    goto <bb 126>;
;;    succ:       141 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                126 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 120, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 119, next block 121, flags: (NEW, REACHABLE)
;;    pred:       109 (EH,EXECUTABLE)
  # PT = null { D.67286 } (escaped heap)
  # __first_481 = PHI <__first_568(109)>
<L28>: [LP 14]
  # VUSE <.MEM_327>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _227 = __builtin_eh_pointerD.2738 (23);
  # .MEM_333 = VDEF <.MEM_327>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_begin_catchD.14644 (_227);
  # DEBUG __firstD.67139 => __first_28
  # DEBUG __lastD.67138 => __first_481
  # DEBUG __firstD.67142 => __first_28
  # DEBUG __lastD.67141 => __first_481
  # DEBUG __firstD.67142 => __first_28
  if (__first_28 == __first_481)
    goto <bb 121>;
  else
    goto <bb 122>;
;;    succ:       121 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                122 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 121, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 120, next block 122, flags: (NEW, REACHABLE)
;;    pred:       120 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                123 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_446 = PHI <.MEM_333(120), .MEM_339(123)>
  [LP 13] # .MEM_340 = VDEF <.MEM_446>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_rethrowD.45013 ();
;;    succ:       125 (EH,EXECUTABLE)

;;   basic block 122, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 121, next block 123, flags: (NEW, REACHABLE)
;;    pred:       120 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       123 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 123, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 122, next block 124, flags: (NEW)
;;    pred:       122 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                124 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.67286 } (escaped heap)
  # __first_477 = PHI <__first_28(122), __first_231(124)>
  # .MEM_521 = PHI <.MEM_333(122), .MEM_339(124)>
  # DEBUG __firstD.67142 => __first_477
  # DEBUG __rD.57841 => __first_477
  # DEBUG __pointerD.67143 => NULL
  # DEBUG thisD.67144 => NULL
  # PT = null { D.67286 } (escaped heap)
  _229 = &__first_477->_M_tD.41463;
  # DEBUG thisD.67145 => _229
  # VUSE <.MEM_521>
  # PT = nonlocal escaped null { D.67286 } (escaped heap)
  _230 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__first_477 + 16B];
  # DEBUG D#91ptD.0 => _229
  # DEBUG thisD.57821 => D#91ptD.0
  # .MEM_334 = VDEF <.MEM_521>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (_229, _230);
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_229]._M_implD.41540
  # DEBUG thisD.67146 => D#549ptD.0
  # DEBUG thisD.67147 => D#549ptD.0
  # DEBUG thisD.67148 => D#549ptD.0
  # .MEM_339 = VDEF <.MEM_334>
  MEM[(struct  &)__first_477] ={v} {CLOBBER};
  # PT = null { D.67286 } (escaped heap)
  __first_231 = __first_477 + 48;
  # DEBUG __firstD.67142 => __first_231
  # DEBUG __firstD.67142 => __first_231
  if (__first_231 == __first_481)
    goto <bb 121>;
  else
    goto <bb 124>;
;;    succ:       121 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                124 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 124, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 123, next block 125, flags: (NEW)
;;    pred:       123 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 123>;
;;    succ:       123 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 125, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 124, next block 126, flags: (NEW, REACHABLE)
;;    pred:       121 (EH,EXECUTABLE)
<L30>: [LP 13]
  [MNT 21] # .MEM_341 = VDEF <.MEM_340>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_end_catchD.14643 ();
  [LP 20] resx 22
;;    succ:       198 (EH,EXECUTABLE)

;;   basic block 126, loop depth 0, count 0, freq 52, maybe hot
;;    prev block 125, next block 127, flags: (NEW, REACHABLE)
;;    pred:       119 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       127 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 127, loop depth 1, count 0, freq 1149, maybe hot
;;    prev block 126, next block 128, flags: (NEW)
;;    pred:       126 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                140 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_480 = PHI <__first_32(126), __first_258(140)>
  # PT = null { D.67286 } (escaped heap)
  # __new_finish_158 = PHI <__new_finish_233(126), __new_finish_259(140)>
  # .MEM_519 = PHI <.MEM_304(126), .MEM_307(140)>
  # DEBUG __curD.67197 => __new_finish_158
  # DEBUG __firstD.67194 => __first_480
  # DEBUG __rD.61276 => __new_finish_158
  # DEBUG __pD.67210 => NULL
  # DEBUG __valueD.67209 => __first_480
  # DEBUG D#24ptD.0 => 48
  # DEBUG __pD.61264 => NULL
  # DEBUG D.61265 => D#24ptD.0
  if (__new_finish_158 != 0B)
    goto <bb 129>;
  else
    goto <bb 128>;
;;    succ:       129 [100.0%]  (TRUE_VALUE,EXECUTABLE)
;;                128 [0.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 128, loop depth 1, count 0, freq 249, maybe hot
;;    prev block 127, next block 129, flags: (NEW)
;;    pred:       127 [0.0%]  (FALSE_VALUE,EXECUTABLE)
;;                129 [21.6%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_432 = PHI <.MEM_519(127), .MEM_349(129)>
  goto <bb 138>;
;;    succ:       138 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 129, loop depth 1, count 0, freq 1149, maybe hot
;;    prev block 128, next block 130, flags: (NEW, REACHABLE)
;;    pred:       127 [100.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.67212 => NULL
  # DEBUG __xD.67211 => __first_480
  # DEBUG D#1158ptD.0 => &MEM[(const struct mapD.37148 &)__first_480]._M_tD.41463
  # PT = null { D.67286 } (escaped heap)
  _257 = &__new_finish_158->_M_tD.41463;
  # DEBUG thisD.67217 => _257
  # DEBUG __xD.67218 => D#1158ptD.0
  # DEBUG thisD.61229 => D#1158ptD.0
  # DEBUG __aD.61227 => NULL
  # DEBUG D#736ptD.0 => &MEM[(const struct _Rb_treeD.41462 &)D#1158ptD.0]._M_implD.41540._M_key_compareD.41694
  # DEBUG D#735ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_257]._M_implD.41540
  # DEBUG thisD.67233 => D#735ptD.0
  # DEBUG __compD.67232 => D#736ptD.0
  # DEBUG __aD.67231 => NULL
  # DEBUG thisD.54200 => D#735ptD.0
  # DEBUG __aD.54201 => NULL
  # DEBUG thisD.54196 => D#735ptD.0
  # DEBUG D.54197 => NULL
  # .MEM_343 = VDEF <.MEM_519>
  MEM[(struct _Rb_tree_implD.41541 *)__new_finish_158]._M_headerD.41695._M_colorD.24804 = 0;
  # .MEM_344 = VDEF <.MEM_343>
  MEM[(struct _Rb_tree_implD.41541 *)__new_finish_158]._M_headerD.41695._M_parentD.24805 = 0B;
  # .MEM_347 = VDEF <.MEM_344>
  MEM[(struct _Rb_tree_implD.41541 *)__new_finish_158]._M_node_countD.41696 = 0;
  # DEBUG thisD.67234 => D#735ptD.0
  # PT = null { D.67286 } (escaped heap)
  _115 = &MEM[(struct _Rb_tree_implD.41541 *)__new_finish_158]._M_headerD.41695;
  # .MEM_348 = VDEF <.MEM_347>
  MEM[(struct _Rb_tree_implD.41541 *)__new_finish_158]._M_headerD.41695._M_leftD.24806 = _115;
  # .MEM_349 = VDEF <.MEM_348>
  MEM[(struct _Rb_tree_implD.41541 *)__new_finish_158]._M_headerD.41695._M_rightD.24807 = _115;
  # VUSE <.MEM_349>
  # PT = nonlocal escaped 
  _265 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__first_480 + 16B];
  # DEBUG D#109ptD.0 => D#1158ptD.0
  # DEBUG thisD.61221 => D#109ptD.0
  if (_265 != 0B)
    goto <bb 130>;
  else
    goto <bb 128>;
;;    succ:       130 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                128 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 130, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 129, next block 131, flags: (NEW, REACHABLE)
;;    pred:       129 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.61243 => _257
  # DEBUG thisD.67224 => _257
  # DEBUG D#110ptD.0 => D#1158ptD.0
  # DEBUG thisD.61239 => D#110ptD.0
  # DEBUG thisD.67227 => _257
  # DEBUG __xD.67226 => NULL
  # DEBUG __pD.67225 => NULL
  # DEBUG thisD.67230 => &__anD.67228
  # DEBUG __tD.67229 => _257
  # .MEM_350 = VDEF <.MEM_349>
  __anD.67228._M_tD.45275 = _257;
  [LP 16] # .MEM_351 = VDEF <.MEM_350>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __x_267 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_M_copyINSA_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS4_EPKSE_SF_RT_D.45292 (_257, _265, _115, &__anD.67228);
;;    succ:       131 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                142 (EH,EXECUTABLE)

;;   basic block 131, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 130, next block 132, flags: (NEW, REACHABLE)
;;    pred:       130 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_352 = VDEF <.MEM_351>
  __anD.67228 ={v} {CLOBBER};
  # .MEM_353 = VDEF <.MEM_352>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)__new_finish_158 + 16] = __x_267;
  # DEBUG thisD.61257 => _257
  # DEBUG thisD.61255 => _257
  # DEBUG __xD.67220 => __x_267
;;    succ:       132 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 132, loop depth 2, count 0, freq 10000, maybe hot
;;    prev block 131, next block 133, flags: (NEW, REACHABLE)
;;    pred:       131 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                133 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_268 = PHI <__x_267(131), __x_269(133)>
  # DEBUG __xD.67221 => __x_268
  # VUSE <.MEM_353>
  # PT = nonlocal escaped 
  __x_269 = __x_268->_M_leftD.24806;
  if (__x_269 == 0B)
    goto <bb 134>;
  else
    goto <bb 133>;
;;    succ:       134 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                133 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 133, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 132, next block 134, flags: (NEW)
;;    pred:       132 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 132>;
;;    succ:       132 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 134, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 133, next block 135, flags: (NEW, REACHABLE)
;;    pred:       132 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_79 = PHI <__x_268(132)>
  # .MEM_354 = VDEF <.MEM_353>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)__new_finish_158 + 24] = __x_79;
  # DEBUG thisD.61250 => _257
  # DEBUG thisD.61248 => _257
  # DEBUG __xD.67222 => __x_267
;;    succ:       135 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 135, loop depth 2, count 0, freq 10000, maybe hot
;;    prev block 134, next block 136, flags: (NEW, REACHABLE)
;;    pred:       134 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                136 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_270 = PHI <__x_267(134), __x_271(136)>
  # DEBUG __xD.67223 => __x_270
  # VUSE <.MEM_354>
  # PT = nonlocal escaped 
  __x_271 = __x_270->_M_rightD.24807;
  if (__x_271 == 0B)
    goto <bb 137>;
  else
    goto <bb 136>;
;;    succ:       137 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                136 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 136, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 135, next block 137, flags: (NEW)
;;    pred:       135 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 135>;
;;    succ:       135 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 137, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 136, next block 138, flags: (NEW, REACHABLE)
;;    pred:       135 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_111 = PHI <__x_270(135)>
  # .MEM_355 = VDEF <.MEM_354>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)__new_finish_158 + 32] = __x_111;
  # VUSE <.MEM_355>
  _272 = MEM[(const struct _Rb_treeD.41462 &)__first_480]._M_implD.41540._M_node_countD.41696;
  # .MEM_356 = VDEF <.MEM_355>
  MEM[(struct _Rb_treeD.41462 *)__new_finish_158]._M_implD.41540._M_node_countD.41696 = _272;
;;    succ:       138 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 138, loop depth 1, count 0, freq 1149, maybe hot
;;    prev block 137, next block 139, flags: (NEW, REACHABLE)
;;    pred:       128 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                137 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_307 = PHI <.MEM_432(128), .MEM_356(137)>
  # PT = nonlocal escaped 
  __first_258 = __first_480 + 48;
  # DEBUG __firstD.67194 => __first_258
  # PT = null { D.67286 } (escaped heap)
  __new_finish_259 = __new_finish_158 + 48;
  # DEBUG __curD.67197 => __new_finish_259
  # DEBUG __curD.67197 => __new_finish_259
  # DEBUG __firstD.67194 => __first_258
  if (__position_23 == __first_258)
    goto <bb 139>;
  else
    goto <bb 140>;
;;    succ:       139 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                140 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 139, loop depth 0, count 0, freq 52, maybe hot
;;    prev block 138, next block 140, flags: (NEW)
;;    pred:       138 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # PT = null { D.67286 } (escaped heap)
  # __new_finish_109 = PHI <__new_finish_259(138)>
  goto <bb 141>;
;;    succ:       141 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 140, loop depth 1, count 0, freq 1097, maybe hot
;;    prev block 139, next block 141, flags: (NEW)
;;    pred:       138 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 127>;
;;    succ:       127 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 141, loop depth 0, count 0, freq 54, maybe hot
;;    prev block 140, next block 142, flags: (NEW, REACHABLE)
;;    pred:       139 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                119 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # PT = null { D.67286 } (escaped heap)
  # __new_finish_495 = PHI <__new_finish_109(139), __new_finish_233(119)>
  # .MEM_515 = PHI <.MEM_307(139), .MEM_304(119)>
  # DEBUG __new_finishD.45343 => NULL
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _33 = __n_7(D) * 48;
  # PT = null { D.67286 } (escaped heap)
  __new_finish_34 = __new_finish_495 + _33;
  # DEBUG __new_finishD.45343 => __new_finish_34
  # DEBUG D#797ptD.0 => &this_9(D)->D.37893
  # DEBUG thisD.62055 => D#797ptD.0
  # VUSE <.MEM_515>
  # PT = nonlocal escaped 
  _36 = this_9(D)->D.37893._M_implD.37384._M_finishD.37387;
  # DEBUG thisD.62053 => &__positionD.37818
  # DEBUG __firstD.62038 => D#1166ptD.0
  # DEBUG __lastD.62039 => _36
  # DEBUG __resultD.62040 => __new_finish_34
  # DEBUG __allocD.62041 => D#741ptD.0
  # DEBUG D#740ptD.0 => D#741ptD.0
  # DEBUG D#737ptD.0 => D#740ptD.0
  # DEBUG __firstD.62045 => D#1166ptD.0
  # DEBUG __lastD.62044 => _36
  # DEBUG __resultD.62043 => __new_finish_34
  # DEBUG D.62042 => D#737ptD.0
  # DEBUG __firstD.62048 => D#1166ptD.0
  # DEBUG __lastD.62047 => _36
  # DEBUG __resultD.62046 => __new_finish_34
  # DEBUG __assignableD.62051 => 1
  # DEBUG __firstD.67235 => D#1166ptD.0
  # DEBUG __lastD.67236 => _36
  # DEBUG __resultD.67237 => __new_finish_34
  # DEBUG __curD.67238 => __new_finish_34
  # DEBUG __firstD.67235 => D#1166ptD.0
  if (__position_23 == _36)
    goto <bb 163>;
  else
    goto <bb 148>;
;;    succ:       163 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                148 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 142, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 141, next block 143, flags: (NEW, REACHABLE)
;;    pred:       130 (EH,EXECUTABLE)
  # PT = null { D.67286 } (escaped heap)
  # __new_finish_37 = PHI <__new_finish_158(130)>
<L31>: [LP 16]
  # VUSE <.MEM_351>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _260 = __builtin_eh_pointerD.2738 (26);
  # .MEM_357 = VDEF <.MEM_351>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_begin_catchD.14644 (_260);
  # DEBUG __firstD.67199 => __new_finish_233
  # DEBUG __lastD.67198 => __new_finish_37
  # DEBUG __firstD.67202 => __new_finish_233
  # DEBUG __lastD.67201 => __new_finish_37
  # DEBUG __firstD.67202 => __new_finish_233
  if (__new_finish_37 == __new_finish_233)
    goto <bb 143>;
  else
    goto <bb 144>;
;;    succ:       143 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                144 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 143, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 142, next block 144, flags: (NEW, REACHABLE)
;;    pred:       142 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                145 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_422 = PHI <.MEM_357(142), .MEM_363(145)>
  [LP 15] # .MEM_364 = VDEF <.MEM_422>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_rethrowD.45013 ();
;;    succ:       147 (EH,EXECUTABLE)

;;   basic block 144, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 143, next block 145, flags: (NEW, REACHABLE)
;;    pred:       142 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       145 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 145, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 144, next block 146, flags: (NEW)
;;    pred:       144 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                146 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.67286 } (escaped heap)
  # __new_finish_528 = PHI <__new_finish_233(144), __new_finish_264(146)>
  # .MEM_516 = PHI <.MEM_357(144), .MEM_363(146)>
  # DEBUG __firstD.67202 => __new_finish_528
  # DEBUG __rD.57841 => __new_finish_528
  # DEBUG __pointerD.67203 => NULL
  # DEBUG thisD.67204 => NULL
  # PT = null { D.67286 } (escaped heap)
  _262 = &__new_finish_528->_M_tD.41463;
  # DEBUG thisD.67205 => _262
  # VUSE <.MEM_516>
  # PT = nonlocal escaped null { D.67286 } (escaped heap)
  _263 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__new_finish_528 + 16B];
  # DEBUG D#91ptD.0 => _262
  # DEBUG thisD.57821 => D#91ptD.0
  # .MEM_358 = VDEF <.MEM_516>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (_262, _263);
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_262]._M_implD.41540
  # DEBUG thisD.67206 => D#549ptD.0
  # DEBUG thisD.67207 => D#549ptD.0
  # DEBUG thisD.67208 => D#549ptD.0
  # .MEM_363 = VDEF <.MEM_358>
  MEM[(struct  &)__new_finish_528] ={v} {CLOBBER};
  # PT = null { D.67286 } (escaped heap)
  __new_finish_264 = __new_finish_528 + 48;
  # DEBUG __firstD.67202 => __new_finish_264
  # DEBUG __firstD.67202 => __new_finish_264
  if (__new_finish_37 == __new_finish_264)
    goto <bb 143>;
  else
    goto <bb 146>;
;;    succ:       143 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                146 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 146, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 145, next block 147, flags: (NEW)
;;    pred:       145 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 145>;
;;    succ:       145 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 147, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 146, next block 148, flags: (NEW, REACHABLE)
;;    pred:       143 (EH,EXECUTABLE)
<L33>: [LP 15]
  [MNT 24] # .MEM_365 = VDEF <.MEM_364>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_end_catchD.14643 ();
  [LP 19] resx 25
;;    succ:       197 (EH,EXECUTABLE)

;;   basic block 148, loop depth 0, count 0, freq 52, maybe hot
;;    prev block 147, next block 149, flags: (NEW, REACHABLE)
;;    pred:       141 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       149 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 149, loop depth 1, count 0, freq 1149, maybe hot
;;    prev block 148, next block 150, flags: (NEW)
;;    pred:       148 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                161 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  # __position_529 = PHI <__position_23(148), __position_277(161)>
  # PT = null { D.67286 } (escaped heap)
  # __new_finish_484 = PHI <__new_finish_34(148), __new_finish_278(161)>
  # .MEM_490 = PHI <.MEM_515(148), .MEM_310(161)>
  # DEBUG __curD.67238 => __new_finish_484
  # DEBUG __firstD.67235 => __position_529
  # DEBUG __rD.61276 => __new_finish_484
  # DEBUG __pD.67251 => NULL
  # DEBUG __valueD.67250 => __position_529
  # DEBUG D#24ptD.0 => 48
  # DEBUG __pD.61264 => NULL
  # DEBUG D.61265 => D#24ptD.0
  if (__new_finish_484 != 0B)
    goto <bb 151>;
  else
    goto <bb 150>;
;;    succ:       151 [100.0%]  (TRUE_VALUE,EXECUTABLE)
;;                150 [0.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 150, loop depth 1, count 0, freq 249, maybe hot
;;    prev block 149, next block 151, flags: (NEW)
;;    pred:       149 [0.0%]  (FALSE_VALUE,EXECUTABLE)
;;                151 [21.6%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_384 = PHI <.MEM_490(149), .MEM_373(151)>
  goto <bb 160>;
;;    succ:       160 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 151, loop depth 1, count 0, freq 1149, maybe hot
;;    prev block 150, next block 152, flags: (NEW, REACHABLE)
;;    pred:       149 [100.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.67253 => NULL
  # DEBUG __xD.67252 => __position_529
  # DEBUG D#1159ptD.0 => &MEM[(const struct mapD.37148 &)__position_529]._M_tD.41463
  # PT = null { D.67286 } (escaped heap)
  _276 = &__new_finish_484->_M_tD.41463;
  # DEBUG thisD.67258 => _276
  # DEBUG __xD.67259 => D#1159ptD.0
  # DEBUG thisD.61229 => D#1159ptD.0
  # DEBUG __aD.61227 => NULL
  # DEBUG D#736ptD.0 => &MEM[(const struct _Rb_treeD.41462 &)D#1159ptD.0]._M_implD.41540._M_key_compareD.41694
  # DEBUG D#735ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_276]._M_implD.41540
  # DEBUG thisD.67274 => D#735ptD.0
  # DEBUG __compD.67273 => D#736ptD.0
  # DEBUG __aD.67272 => NULL
  # DEBUG thisD.54200 => D#735ptD.0
  # DEBUG __aD.54201 => NULL
  # DEBUG thisD.54196 => D#735ptD.0
  # DEBUG D.54197 => NULL
  # .MEM_367 = VDEF <.MEM_490>
  MEM[(struct _Rb_tree_implD.41541 *)__new_finish_484]._M_headerD.41695._M_colorD.24804 = 0;
  # .MEM_368 = VDEF <.MEM_367>
  MEM[(struct _Rb_tree_implD.41541 *)__new_finish_484]._M_headerD.41695._M_parentD.24805 = 0B;
  # .MEM_371 = VDEF <.MEM_368>
  MEM[(struct _Rb_tree_implD.41541 *)__new_finish_484]._M_node_countD.41696 = 0;
  # DEBUG thisD.67275 => D#735ptD.0
  # PT = null { D.67286 } (escaped heap)
  _116 = &MEM[(struct _Rb_tree_implD.41541 *)__new_finish_484]._M_headerD.41695;
  # .MEM_372 = VDEF <.MEM_371>
  MEM[(struct _Rb_tree_implD.41541 *)__new_finish_484]._M_headerD.41695._M_leftD.24806 = _116;
  # .MEM_373 = VDEF <.MEM_372>
  MEM[(struct _Rb_tree_implD.41541 *)__new_finish_484]._M_headerD.41695._M_rightD.24807 = _116;
  # VUSE <.MEM_373>
  # PT = nonlocal escaped 
  _284 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__position_529 + 16B];
  # DEBUG D#109ptD.0 => D#1159ptD.0
  # DEBUG thisD.61221 => D#109ptD.0
  if (_284 != 0B)
    goto <bb 152>;
  else
    goto <bb 150>;
;;    succ:       152 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                150 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 152, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 151, next block 153, flags: (NEW, REACHABLE)
;;    pred:       151 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.61243 => _276
  # DEBUG thisD.67265 => _276
  # DEBUG D#110ptD.0 => D#1159ptD.0
  # DEBUG thisD.61239 => D#110ptD.0
  # DEBUG thisD.67268 => _276
  # DEBUG __xD.67267 => NULL
  # DEBUG __pD.67266 => NULL
  # DEBUG thisD.67271 => &__anD.67269
  # DEBUG __tD.67270 => _276
  # .MEM_374 = VDEF <.MEM_373>
  __anD.67269._M_tD.45275 = _276;
  [LP 18] # .MEM_375 = VDEF <.MEM_374>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __x_286 = _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE7_M_copyINSA_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS4_EPKSE_SF_RT_D.45292 (_276, _284, _116, &__anD.67269);
;;    succ:       153 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                164 (EH,EXECUTABLE)

;;   basic block 153, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 152, next block 154, flags: (NEW, REACHABLE)
;;    pred:       152 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_376 = VDEF <.MEM_375>
  __anD.67269 ={v} {CLOBBER};
  # .MEM_377 = VDEF <.MEM_376>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)__new_finish_484 + 16] = __x_286;
  # DEBUG thisD.61257 => _276
  # DEBUG thisD.61255 => _276
  # DEBUG __xD.67261 => __x_286
;;    succ:       154 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 154, loop depth 2, count 0, freq 10000, maybe hot
;;    prev block 153, next block 155, flags: (NEW, REACHABLE)
;;    pred:       153 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                155 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_287 = PHI <__x_286(153), __x_288(155)>
  # DEBUG __xD.67262 => __x_287
  # VUSE <.MEM_377>
  # PT = nonlocal escaped 
  __x_288 = __x_287->_M_leftD.24806;
  if (__x_288 == 0B)
    goto <bb 156>;
  else
    goto <bb 155>;
;;    succ:       156 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                155 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 155, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 154, next block 156, flags: (NEW)
;;    pred:       154 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 154>;
;;    succ:       154 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 156, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 155, next block 157, flags: (NEW, REACHABLE)
;;    pred:       154 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_242 = PHI <__x_287(154)>
  # .MEM_378 = VDEF <.MEM_377>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)__new_finish_484 + 24] = __x_242;
  # DEBUG thisD.61250 => _276
  # DEBUG thisD.61248 => _276
  # DEBUG __xD.67263 => __x_286
;;    succ:       157 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 157, loop depth 2, count 0, freq 10000, maybe hot
;;    prev block 156, next block 158, flags: (NEW, REACHABLE)
;;    pred:       156 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                158 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_289 = PHI <__x_286(156), __x_290(158)>
  # DEBUG __xD.67264 => __x_289
  # VUSE <.MEM_378>
  # PT = nonlocal escaped 
  __x_290 = __x_289->_M_rightD.24807;
  if (__x_290 == 0B)
    goto <bb 159>;
  else
    goto <bb 158>;
;;    succ:       159 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                158 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 158, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 157, next block 159, flags: (NEW)
;;    pred:       157 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 157>;
;;    succ:       157 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 159, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 158, next block 160, flags: (NEW, REACHABLE)
;;    pred:       157 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_103 = PHI <__x_289(157)>
  # .MEM_379 = VDEF <.MEM_378>
  MEM[(struct _Rb_tree_node_baseD.24800 * &)__new_finish_484 + 32] = __x_103;
  # VUSE <.MEM_379>
  _291 = MEM[(const struct _Rb_treeD.41462 &)__position_529]._M_implD.41540._M_node_countD.41696;
  # .MEM_380 = VDEF <.MEM_379>
  MEM[(struct _Rb_treeD.41462 *)__new_finish_484]._M_implD.41540._M_node_countD.41696 = _291;
;;    succ:       160 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 160, loop depth 1, count 0, freq 1149, maybe hot
;;    prev block 159, next block 161, flags: (NEW, REACHABLE)
;;    pred:       150 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                159 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_310 = PHI <.MEM_384(150), .MEM_380(159)>
  # PT = nonlocal 
  __position_277 = __position_529 + 48;
  # DEBUG __firstD.67235 => __position_277
  # PT = null { D.67286 } (escaped heap)
  __new_finish_278 = __new_finish_484 + 48;
  # DEBUG __curD.67238 => __new_finish_278
  # DEBUG __curD.67238 => __new_finish_278
  # DEBUG __firstD.67235 => __position_277
  if (_36 == __position_277)
    goto <bb 162>;
  else
    goto <bb 161>;
;;    succ:       162 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                161 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 161, loop depth 1, count 0, freq 1097, maybe hot
;;    prev block 160, next block 162, flags: (NEW)
;;    pred:       160 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 149>;
;;    succ:       149 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 162, loop depth 0, count 0, freq 52, maybe hot
;;    prev block 161, next block 163, flags: (NEW)
;;    pred:       160 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # PT = null { D.67286 } (escaped heap)
  # __new_finish_303 = PHI <__new_finish_278(160)>
  # VUSE <.MEM_310>
  pretmp_362 = this_9(D)->D.37893._M_implD.37384._M_finishD.37387;
;;    succ:       163 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 163, loop depth 0, count 0, freq 54, maybe hot
;;    prev block 162, next block 164, flags: (NEW, REACHABLE)
;;    pred:       162 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                141 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # PT = null { D.67286 } (escaped heap)
  # __new_finish_534 = PHI <__new_finish_303(162), __new_finish_34(141)>
  # .MEM_429 = PHI <.MEM_310(162), .MEM_515(141)>
  # PT = nonlocal escaped 
  # prephitmp_383 = PHI <pretmp_362(162), _36(141)>
  # DEBUG __new_finishD.45343 => NULL
  # DEBUG D#798ptD.0 => &this_9(D)->D.37893
  # DEBUG thisD.62081 => D#798ptD.0
  # DEBUG D#1165ptD.0 => this_9(D)->D.37893._M_implD.37384._M_finishD.37387
  # VUSE <.MEM_429>
  # PT = nonlocal escaped 
  __first_39 = this_9(D)->D.37893._M_implD.37384._M_startD.37386;
  # DEBUG __firstD.62067 => __first_39
  # DEBUG __lastD.62068 => D#1165ptD.0
  # DEBUG __firstD.62074 => __first_39
  if (__first_39 == prephitmp_383)
    goto <bb 174>;
  else
    goto <bb 170>;
;;    succ:       174 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                170 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 164, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 163, next block 165, flags: (NEW, REACHABLE)
;;    pred:       152 (EH,EXECUTABLE)
  # PT = null { D.67286 } (escaped heap)
  # __new_finish_112 = PHI <__new_finish_484(152)>
<L34>: [LP 18]
  # VUSE <.MEM_375>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _279 = __builtin_eh_pointerD.2738 (29);
  # .MEM_381 = VDEF <.MEM_375>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_begin_catchD.14644 (_279);
  # DEBUG __firstD.67240 => __new_finish_34
  # DEBUG __lastD.67239 => __new_finish_112
  # DEBUG __firstD.67243 => __new_finish_34
  # DEBUG __lastD.67242 => __new_finish_112
  # DEBUG __firstD.67243 => __new_finish_34
  if (__new_finish_34 == __new_finish_112)
    goto <bb 165>;
  else
    goto <bb 166>;
;;    succ:       165 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                166 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 165, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 164, next block 166, flags: (NEW, REACHABLE)
;;    pred:       164 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                167 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_369 = PHI <.MEM_381(164), .MEM_387(167)>
  [LP 17] # .MEM_388 = VDEF <.MEM_369>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_rethrowD.45013 ();
;;    succ:       169 (EH,EXECUTABLE)

;;   basic block 166, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 165, next block 167, flags: (NEW, REACHABLE)
;;    pred:       164 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       167 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 167, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 166, next block 168, flags: (NEW)
;;    pred:       166 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                168 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.67286 } (escaped heap)
  # __new_finish_533 = PHI <__new_finish_34(166), __new_finish_283(168)>
  # .MEM_494 = PHI <.MEM_381(166), .MEM_387(168)>
  # DEBUG __firstD.67243 => __new_finish_533
  # DEBUG __rD.57841 => __new_finish_533
  # DEBUG __pointerD.67244 => NULL
  # DEBUG thisD.67245 => NULL
  # PT = null { D.67286 } (escaped heap)
  _281 = &__new_finish_533->_M_tD.41463;
  # DEBUG thisD.67246 => _281
  # VUSE <.MEM_494>
  # PT = nonlocal escaped null { D.67286 } (escaped heap)
  _282 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__new_finish_533 + 16B];
  # DEBUG D#91ptD.0 => _281
  # DEBUG thisD.57821 => D#91ptD.0
  # .MEM_382 = VDEF <.MEM_494>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (_281, _282);
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_281]._M_implD.41540
  # DEBUG thisD.67247 => D#549ptD.0
  # DEBUG thisD.67248 => D#549ptD.0
  # DEBUG thisD.67249 => D#549ptD.0
  # .MEM_387 = VDEF <.MEM_382>
  MEM[(struct  &)__new_finish_533] ={v} {CLOBBER};
  # PT = null { D.67286 } (escaped heap)
  __new_finish_283 = __new_finish_533 + 48;
  # DEBUG __firstD.67243 => __new_finish_283
  # DEBUG __firstD.67243 => __new_finish_283
  if (__new_finish_283 == __new_finish_112)
    goto <bb 165>;
  else
    goto <bb 168>;
;;    succ:       165 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                168 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 168, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 167, next block 169, flags: (NEW)
;;    pred:       167 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 167>;
;;    succ:       167 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 169, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 168, next block 170, flags: (NEW, REACHABLE)
;;    pred:       165 (EH,EXECUTABLE)
<L36>: [LP 17]
  [MNT 27] # .MEM_389 = VDEF <.MEM_388>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_end_catchD.14643 ();
  [LP 5] resx 28
;;    succ:       180 (EH,EXECUTABLE)

;;   basic block 170, loop depth 0, count 0, freq 49, maybe hot
;;    prev block 169, next block 171, flags: (NEW, REACHABLE)
;;    pred:       163 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       171 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 171, loop depth 1, count 0, freq 548, maybe hot
;;    prev block 170, next block 172, flags: (NEW)
;;    pred:       170 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                172 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __first_555 = PHI <__first_39(170), __first_98(172)>
  # .MEM_536 = PHI <.MEM_429(170), .MEM_122(172)>
  # DEBUG __firstD.62074 => __first_555
  # DEBUG __rD.57841 => __first_555
  # DEBUG __pointerD.62075 => NULL
  # DEBUG thisD.62076 => NULL
  # PT = nonlocal escaped 
  _96 = &__first_555->_M_tD.41463;
  # DEBUG thisD.62077 => _96
  # VUSE <.MEM_536>
  # PT = nonlocal escaped 
  _97 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__first_555 + 16B];
  # DEBUG D#91ptD.0 => _96
  # DEBUG thisD.57821 => D#91ptD.0
  # .MEM_117 = VDEF <.MEM_536>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (_96, _97);
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_96]._M_implD.41540
  # DEBUG thisD.62078 => D#549ptD.0
  # DEBUG thisD.62079 => D#549ptD.0
  # DEBUG thisD.62080 => D#549ptD.0
  # .MEM_122 = VDEF <.MEM_117>
  MEM[(struct  &)__first_555] ={v} {CLOBBER};
  # PT = nonlocal escaped 
  __first_98 = __first_555 + 48;
  # DEBUG __firstD.62074 => __first_98
  # DEBUG __firstD.62074 => __first_98
  if (__first_98 == prephitmp_383)
    goto <bb 173>;
  else
    goto <bb 172>;
;;    succ:       173 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                172 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 172, loop depth 1, count 0, freq 499, maybe hot
;;    prev block 171, next block 173, flags: (NEW)
;;    pred:       171 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 171>;
;;    succ:       171 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 173, loop depth 0, count 0, freq 49, maybe hot
;;    prev block 172, next block 174, flags: (NEW)
;;    pred:       171 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_122>
  pretmp_385 = this_9(D)->D.37893._M_implD.37384._M_startD.37386;
;;    succ:       174 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 174, loop depth 0, count 0, freq 54, maybe hot
;;    prev block 173, next block 175, flags: (NEW, REACHABLE)
;;    pred:       173 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                163 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_537 = PHI <.MEM_122(173), .MEM_429(163)>
  # PT = nonlocal escaped 
  # prephitmp_386 = PHI <pretmp_385(173), __first_39(163)>
  # DEBUG D#809ptD.0 => this_9(D)->D.37893._M_implD.37384._M_end_of_storageD.37388
  # DEBUG D#808ptD.0 => (long intD.12) D#809ptD.0
  # DEBUG D#1164ptD.0 => this_9(D)->D.37893._M_implD.37384._M_startD.37386
  # DEBUG D#807ptD.0 => (long intD.12) D#1164ptD.0
  # DEBUG D#806ptD.0 => D#808ptD.0 - D#807ptD.0
  # DEBUG D#805ptD.0 => D#806ptD.0 /[ex] 48
  # DEBUG D#804ptD.0 => &this_9(D)->D.37893
  # DEBUG D#319ptD.0 => D#804ptD.0
  # DEBUG D#320ptD.0 => (long unsigned intD.14) D#805ptD.0
  # DEBUG __pD.62057 => D#1164ptD.0
  # DEBUG thisD.62059 => D#319ptD.0
  # DEBUG __nD.62058 => D#320ptD.0
  # DEBUG D#318ptD.0 => D#320ptD.0
  # DEBUG D#317ptD.0 => D#319ptD.0
  if (prephitmp_386 != 0B)
    goto <bb 175>;
  else
    goto <bb 176>;
;;    succ:       175 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                176 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 175, loop depth 0, count 0, freq 38, maybe hot
;;    prev block 174, next block 176, flags: (NEW, REACHABLE)
;;    pred:       174 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#316ptD.0 => &D#317ptD.0->_M_implD.37384
  # DEBUG D#314ptD.0 => D#316ptD.0
  # DEBUG D#315ptD.0 => D#318ptD.0
  # DEBUG __pD.62063 => D#1164ptD.0
  # DEBUG __aD.62061 => D#314ptD.0
  # DEBUG __nD.62062 => D#315ptD.0
  # DEBUG D#313ptD.0 => D#315ptD.0
  # DEBUG D#312ptD.0 => D#314ptD.0
  # DEBUG D#310ptD.0 => D#312ptD.0
  # DEBUG D#311ptD.0 => D#313ptD.0
  # DEBUG __pD.62066 => D#1164ptD.0
  # DEBUG thisD.62064 => D#310ptD.0
  # DEBUG D.62065 => D#311ptD.0
  # .MEM_123 = VDEF <.MEM_537>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  _ZdlPvD.2766 (prephitmp_386);
;;    succ:       176 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 176, loop depth 0, count 0, freq 54, maybe hot
;;    prev block 175, next block 177, flags: (NEW, REACHABLE)
;;    pred:       175 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                174 [30.2%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_110 = PHI <.MEM_123(175), .MEM_537(174)>
  # .MEM_42 = VDEF <.MEM_110>
  this_9(D)->D.37893._M_implD.37384._M_startD.37386 = __new_finish_233;
  # .MEM_43 = VDEF <.MEM_42>
  this_9(D)->D.37893._M_implD.37384._M_finishD.37387 = __new_finish_534;
  # PT = null { D.67286 } (escaped heap)
  _45 = __new_finish_233 + prephitmp_128;
  # .MEM_46 = VDEF <.MEM_43>
  this_9(D)->D.37893._M_implD.37384._M_end_of_storageD.37388 = _45;
;;    succ:       177 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 177, loop depth 0, count 0, freq 178, maybe hot
;;    prev block 176, next block 178, flags: (NEW, REACHABLE)
;;    pred:       2 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                176 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                99 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_3 = PHI <.MEM_8(D)(2), .MEM_46(176), .MEM_78(99)>
  # VUSE <.MEM_3>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 178, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 177, next block 179, flags: (NEW)
;;    pred:       36 (EH,EXECUTABLE)
<L39>: [LP 21]
;;    succ:       179 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 179, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 178, next block 180, flags: (NEW, REACHABLE)
;;    pred:       96 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                178 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                39 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                45 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                71 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                93 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_4 = PHI <.MEM_143(96), .MEM_428(178), .MEM_139(39), .MEM_140(45), .MEM_452(71), .MEM_476(93)>
<L10>:
  # DEBUG thisD.62083 => &__x_copyD.45305
  # DEBUG thisD.62084 => &__x_copyD.45305._M_tD.41463
  # VUSE <.MEM_4>
  # PT = nonlocal escaped null 
  _99 = MEM[(struct _Rb_tree_node_baseD.24800 * *)&__x_copyD.45305 + 16B];
  # DEBUG D#91ptD.0 => &__x_copyD.45305._M_tD.41463
  # DEBUG thisD.57821 => D#91ptD.0
  # .MEM_150 = VDEF <.MEM_4>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (&__x_copyD.45305._M_tD.41463, _99);
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)&__x_copyD.45305]._M_implD.41540
  # DEBUG thisD.62085 => D#549ptD.0
  # DEBUG thisD.62086 => D#549ptD.0
  # DEBUG thisD.62087 => D#549ptD.0
  resx 2
;;    succ:      

;;   basic block 180, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 179, next block 181, flags: (NEW, REACHABLE)
;;    pred:       169 (EH,EXECUTABLE)
<L13>: [LP 5]
  # DEBUG __new_finishD.45343 => __new_finish_34
  # VUSE <.MEM_389>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _47 = __builtin_eh_pointerD.2738 (9);
  # .MEM_48 = VDEF <.MEM_389>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_begin_catchD.14644 (_47);
  if (__new_finish_34 == 0B)
    goto <bb 183>;
  else
    goto <bb 181>;
;;    succ:       183 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                181 [85.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 181, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 180, next block 182, flags: (NEW, REACHABLE)
;;    pred:       180 [85.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __firstD.62111 => __new_finish_233
  if (__new_finish_34 == __new_finish_233)
    goto <bb 182>;
  else
    goto <bb 188>;
;;    succ:       182 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                188 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 182, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 181, next block 183, flags: (NEW, REACHABLE)
;;    pred:       181 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                184 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                186 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                189 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                198 [85.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_360 = PHI <.MEM_48(181), .MEM_183(184), .MEM_129(186), .MEM_135(189), .MEM_184(198)>
  # DEBUG D#810ptD.0 => &this_9(D)->D.37893
  # DEBUG D#319ptD.0 => D#810ptD.0
  # DEBUG __pD.62120 => NULL
  # DEBUG thisD.62122 => D#319ptD.0
  # DEBUG __nD.62121 => D#320ptD.0
  # DEBUG D#318ptD.0 => D#320ptD.0
  # DEBUG D#317ptD.0 => D#319ptD.0
  if (__new_finish_233 != 0B)
    goto <bb 191>;
  else
    goto <bb 192>;
;;    succ:       191 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                192 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 183, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 182, next block 184, flags: (NEW)
;;    pred:       180 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                198 [15.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_361 = PHI <.MEM_48(180), .MEM_184(198)>
;;    succ:       184 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 184, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 183, next block 185, flags: (NEW, REACHABLE)
;;    pred:       183 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                197 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_183 = PHI <.MEM_361(183), .MEM_195(197)>
  # DEBUG __new_finishD.45343 => 0B
  # DEBUG D#802ptD.0 => &this_9(D)->D.37893
  # DEBUG thisD.62102 => D#802ptD.0
  # RANGE ~[768614336404564650, 18254590489608410453]
  _49 = __n_7(D) + __elems_before_574;
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _50 = _49 * 48;
  # PT = null { D.67286 } (escaped heap)
  _51 = __new_finish_233 + _50;
  # DEBUG __firstD.62088 => __first_28
  # DEBUG __lastD.62089 => _51
  # DEBUG __firstD.62095 => __first_28
  if (__first_28 == _51)
    goto <bb 182>;
  else
    goto <bb 185>;
;;    succ:       182 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                185 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 185, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 184, next block 186, flags: (NEW, REACHABLE)
;;    pred:       184 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       186 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 186, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 185, next block 187, flags: (NEW)
;;    pred:       185 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                187 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.67286 } (escaped heap)
  # __first_554 = PHI <__first_28(185), __first_102(187)>
  # .MEM_535 = PHI <.MEM_183(185), .MEM_129(187)>
  # DEBUG __firstD.62095 => __first_554
  # DEBUG __rD.57841 => __first_554
  # DEBUG __pointerD.62096 => NULL
  # DEBUG thisD.62097 => NULL
  # PT = null { D.67286 } (escaped heap)
  _100 = &__first_554->_M_tD.41463;
  # DEBUG thisD.62098 => _100
  # VUSE <.MEM_535>
  # PT = nonlocal escaped null { D.67286 } (escaped heap)
  _101 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__first_554 + 16B];
  # DEBUG D#91ptD.0 => _100
  # DEBUG thisD.57821 => D#91ptD.0
  # .MEM_124 = VDEF <.MEM_535>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (_100, _101);
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_100]._M_implD.41540
  # DEBUG thisD.62099 => D#549ptD.0
  # DEBUG thisD.62100 => D#549ptD.0
  # DEBUG thisD.62101 => D#549ptD.0
  # .MEM_129 = VDEF <.MEM_124>
  MEM[(struct  &)__first_554] ={v} {CLOBBER};
  # PT = null { D.67286 } (escaped heap)
  __first_102 = __first_554 + 48;
  # DEBUG __firstD.62095 => __first_102
  # DEBUG __firstD.62095 => __first_102
  if (_51 == __first_102)
    goto <bb 182>;
  else
    goto <bb 187>;
;;    succ:       182 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                187 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 187, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 186, next block 188, flags: (NEW)
;;    pred:       186 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 186>;
;;    succ:       186 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 188, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 187, next block 189, flags: (NEW, REACHABLE)
;;    pred:       181 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       189 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 189, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 188, next block 190, flags: (NEW)
;;    pred:       188 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                190 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = null { D.67286 } (escaped heap)
  # __new_finish_551 = PHI <__new_finish_233(188), __new_finish_106(190)>
  # .MEM_547 = PHI <.MEM_48(188), .MEM_135(190)>
  # DEBUG __firstD.62111 => __new_finish_551
  # DEBUG __rD.57841 => __new_finish_551
  # DEBUG __pointerD.62112 => NULL
  # DEBUG thisD.62113 => NULL
  # PT = null { D.67286 } (escaped heap)
  _104 = &__new_finish_551->_M_tD.41463;
  # DEBUG thisD.62114 => _104
  # VUSE <.MEM_547>
  # PT = nonlocal escaped null { D.67286 } (escaped heap)
  _105 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__new_finish_551 + 16B];
  # DEBUG D#91ptD.0 => _104
  # DEBUG thisD.57821 => D#91ptD.0
  # .MEM_130 = VDEF <.MEM_547>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (_104, _105);
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_104]._M_implD.41540
  # DEBUG thisD.62115 => D#549ptD.0
  # DEBUG thisD.62116 => D#549ptD.0
  # DEBUG thisD.62117 => D#549ptD.0
  # .MEM_135 = VDEF <.MEM_130>
  MEM[(struct  &)__new_finish_551] ={v} {CLOBBER};
  # PT = null { D.67286 } (escaped heap)
  __new_finish_106 = __new_finish_551 + 48;
  # DEBUG __firstD.62111 => __new_finish_106
  # DEBUG __firstD.62111 => __new_finish_106
  if (__new_finish_34 == __new_finish_106)
    goto <bb 182>;
  else
    goto <bb 190>;
;;    succ:       182 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                190 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 190, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 189, next block 191, flags: (NEW)
;;    pred:       189 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 189>;
;;    succ:       189 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 191, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 190, next block 192, flags: (NEW, REACHABLE)
;;    pred:       182 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#316ptD.0 => &D#317ptD.0->_M_implD.37384
  # DEBUG D#314ptD.0 => D#316ptD.0
  # DEBUG D#315ptD.0 => D#318ptD.0
  # DEBUG __pD.62126 => NULL
  # DEBUG __aD.62124 => D#314ptD.0
  # DEBUG __nD.62125 => D#315ptD.0
  # DEBUG D#313ptD.0 => D#315ptD.0
  # DEBUG D#312ptD.0 => D#314ptD.0
  # DEBUG D#310ptD.0 => D#312ptD.0
  # DEBUG D#311ptD.0 => D#313ptD.0
  # DEBUG __pD.62129 => NULL
  # DEBUG thisD.62127 => D#310ptD.0
  # DEBUG D.62128 => D#311ptD.0
  # .MEM_136 = VDEF <.MEM_360>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  _ZdlPvD.2766 (__new_finish_233);
;;    succ:       192 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 192, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 191, next block 193, flags: (NEW, REACHABLE)
;;    pred:       191 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                182 [30.2%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_113 = PHI <.MEM_136(191), .MEM_360(182)>
  [LP 6] # .MEM_54 = VDEF <.MEM_113>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_rethrowD.45013 ();
;;    succ:       193 (EH,EXECUTABLE)

;;   basic block 193, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 192, next block 194, flags: (NEW, REACHABLE)
;;    pred:       192 (EH,EXECUTABLE)
<L18>: [LP 6]
  [MNT 11] # .MEM_55 = VDEF <.MEM_54>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_end_catchD.14643 ();
  resx 10
;;    succ:      

;;   basic block 194, loop depth 0, count 0, freq 48, maybe hot
;;    prev block 193, next block 195, flags: (NEW, REACHABLE)
;;    pred:       102 [67.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __lenD.45339 => NULL
  # DEBUG thisD.62014 => this_9(D)
  # DEBUG D#170ptD.0 => &this_9(D)->D.37893._M_implD.37384._M_startD.37386
  # DEBUG thisD.62016 => NULL
  # DEBUG __iD.62015 => D#170ptD.0
  # DEBUG __lhsD.62011 => &__positionD.37818
  # DEBUG __rhsD.62012 => &D.45341
  # DEBUG thisD.53180 => &__positionD.37818
  _496 = (long intD.12) __position_23;
  # DEBUG thisD.53178 => &D.45341
  _497 = _496 - _236;
  # RANGE [-192153584101141162, 192153584101141162]
  _492 = _497 /[ex] 48;
  # RANGE ~[192153584101141163, 18254590489608410453]
  __elems_before_493 = (const size_typeD.37469) _492;
  # DEBUG __elems_beforeD.45340 => __elems_before_493
  # DEBUG D#811ptD.0 => &this_9(D)->D.37893
  # DEBUG D#576ptD.0 => D#811ptD.0
  # DEBUG __nD.67157 => NULL
  # DEBUG thisD.67158 => D#576ptD.0
  # DEBUG D#575ptD.0 => D#576ptD.0
  goto <bb 104>;
;;    succ:       104 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 195, loop depth 0, count 0, freq 6, maybe hot
;;    prev block 194, next block 196, flags: (NEW, REACHABLE)
;;    pred:       102 [33.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __lenD.45339 => NULL
  # DEBUG thisD.62014 => this_9(D)
  # DEBUG D#170ptD.0 => &this_9(D)->D.37893._M_implD.37384._M_startD.37386
  # DEBUG thisD.62016 => NULL
  # DEBUG __iD.62015 => D#170ptD.0
  # DEBUG __lhsD.62011 => &__positionD.37818
  # DEBUG __rhsD.62012 => &D.45341
  # DEBUG thisD.53180 => &__positionD.37818
  _487 = (long intD.12) __position_23;
  # DEBUG thisD.53178 => &D.45341
  _488 = _487 - _236;
  # RANGE [-192153584101141162, 192153584101141162]
  _489 = _488 /[ex] 48;
  # RANGE ~[192153584101141163, 18254590489608410453]
  __elems_before_570 = (const size_typeD.37469) _489;
  # DEBUG __elems_beforeD.45340 => __elems_before_570
  # DEBUG D#811ptD.0 => &this_9(D)->D.37893
  # DEBUG D#576ptD.0 => D#811ptD.0
  # DEBUG __nD.67157 => NULL
  # DEBUG thisD.67158 => D#576ptD.0
  # DEBUG D#575ptD.0 => D#576ptD.0
  if (__len_244 != 0)
    goto <bb 103>;
  else
    goto <bb 105>;
;;    succ:       103 [10.0%]  (TRUE_VALUE,EXECUTABLE)
;;                105 [90.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 196, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 195, next block 197, flags: (NEW, REACHABLE)
;;    pred:       64 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615]
  _25 = (long unsigned intD.14) _31;
  # PT = nonlocal escaped 
  _299 = __old_finish_545 + _25;
  # .MEM_203 = VDEF <.MEM_71>
  this_9(D)->D.37893._M_implD.37384._M_finishD.37387 = _299;
  # DEBUG thisD.61992 => &__positionD.37818
  # DEBUG __firstD.61984 => D#1166ptD.0
  # DEBUG __lastD.61985 => D#1163ptD.0
  # DEBUG __valueD.61986 => &__x_copyD.45305
  # DEBUG __firstD.61989 => D#1166ptD.0
  goto <bb 99>;
;;    succ:       99 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 197, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 196, next block 198, flags: (NEW, REACHABLE)
;;    pred:       147 (EH,EXECUTABLE)
<L37>: [LP 19]
  # DEBUG __new_finishD.45343 => 0B
  # VUSE <.MEM_365>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _190 = __builtin_eh_pointerD.2738 (9);
  # .MEM_195 = VDEF <.MEM_365>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_begin_catchD.14644 (_190);
  goto <bb 184>;
;;    succ:       184 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 198, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 197, next block 1, flags: (NEW, REACHABLE)
;;    pred:       125 (EH,EXECUTABLE)
<L38>: [LP 20]
  # DEBUG __new_finishD.45343 => __new_finish_233
  # VUSE <.MEM_341>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  _296 = __builtin_eh_pointerD.2738 (9);
  # .MEM_184 = VDEF <.MEM_341>
  # USE = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  # CLB = nonlocal null { D.45305 D.67004 D.67045 D.67086 D.67127 D.67187 D.67228 D.67269 D.67286 } (escaped)
  __cxa_begin_catchD.14644 (_296);
  if (__new_finish_233 == 0B)
    goto <bb 183>;
  else
    goto <bb 182>;
;;    succ:       183 [15.0%]  (TRUE_VALUE,EXECUTABLE)
;;                182 [85.0%]  (FALSE_VALUE,EXECUTABLE)

}



;; Function SparseAllocator::SparseAllocator(Module*, const string&, int, int) (_ZN15SparseAllocatorC2EP6ModuleRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEii, funcdef_no=1771, decl_uid=37968, cgraph_uid=441, symbol_order=442)


Pass statistics:
----------------

SparseAllocator::SparseAllocator(Module*, const string&, int, int) (struct SparseAllocatorD.36303 * const thisD.37969, struct ModuleD.29751 * parentD.37970, const struct stringD.2845 & nameD.37971, intD.9 inputsD.37972, intD.9 outputsD.37973)
Eh tree:
   1 cleanup land:{1,<L6>}
     2 cleanup land:{2,<L5>}
       3 cleanup land:{3,<L4>}
         4 cleanup land:{4,<L3>}
           5 cleanup land:{8,<L7>},{5,<L8>}
             8 cleanup land:{7,<L1>}
             6 cleanup land:{6,<L0>}
{
  struct _Rb_tree_nodeD.41466 * __xD.67525;
  struct iteratorD.37461 __positionD.67520;
  struct mapD.37148 * __posD.67503;
  struct _Rb_tree_nodeD.41466 * __xD.67487;
  struct iteratorD.37461 __positionD.67482;
  struct mapD.37148 * __posD.67465;
  struct value_typeD.37456 D.42330;
  struct value_typeD.37456 D.42329;
  struct AllocatorD.34627 * _3;
  struct _Rb_tree_node_baseD.24800 * _11;
  struct _Rb_tree_node_baseD.24800 * _12;
  intD.9 _15;
  long unsigned intD.14 _16;
  struct vectorD.37150 * _17;
  intD.9 _20;
  long unsigned intD.14 _21;
  struct vectorD.37150 * _22;
  struct _Rep_typeD.36315 * _25;
  struct _Rep_typeD.36315 * _31;
  struct _Rb_tree_node_baseD.24800 * _34;
  struct _Rb_tree_node_baseD.24800 * _35;
  struct _Rb_tree_node_baseD.24800 * _36;
  struct _Rb_tree_node_baseD.24800 * _37;
  struct vectorD.37150 * pretmp_84;
  struct vectorD.37150 * prephitmp_85;
  struct _Rb_tree_node_baseD.24800 * pretmp_86;
  struct _Rb_tree_node_baseD.24800 * prephitmp_87;
  struct _Rb_tree_node_baseD.24800 * pretmp_88;
  struct _Rb_tree_node_baseD.24800 * prephitmp_91;
  struct _Rb_tree_node_baseD.24800 * pretmp_92;
  struct _Rb_tree_node_baseD.24800 * prephitmp_93;
  struct mapD.37148 * const _124;
  struct mapD.37148 * const _125;
  long intD.12 _126;
  long intD.12 _127;
  long intD.12 _128;
  long intD.12 _129;
  size_typeD.37469 _130;
  long unsigned intD.14 _131;
  long unsigned intD.14 _132;
  struct _Rep_typeD.41460 * _135;
  struct _Rb_tree_node_baseD.24800 * _138;

;;   basic block 2, loop depth 0, count 0, freq 184, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  _3 = &this_2(D)->D.37974;
  # .MEM_9 = VDEF <.MEM_4(D)>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZN9AllocatorC2EP6ModuleRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiiD.35464 (_3, parent_5(D), name_6(D), inputs_7(D), outputs_8(D));
  # .MEM_10 = VDEF <.MEM_9>
  this_2(D)->D.37974.D.35470._vptr.ModuleD.30546 = &MEM[(voidD.45 *)&_ZTV15SparseAllocatorD.37980 + 16B];
  # DEBUG D#817ptD.0 => &this_2(D)->_in_occD.37144
  # DEBUG thisD.62197 => D#817ptD.0
  # DEBUG D#305ptD.0 => &D#817ptD.0->_M_tD.36318
  # DEBUG thisD.62198 => D#305ptD.0
  # DEBUG D#304ptD.0 => &MEM[(struct _Rb_treeD.36317 *)D#305ptD.0]._M_implD.36395
  # DEBUG thisD.62199 => D#304ptD.0
  # DEBUG thisD.54084 => D#304ptD.0
  # DEBUG thisD.54081 => D#304ptD.0
  # .MEM_32 = VDEF <.MEM_10>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 160B]._M_headerD.36561._M_colorD.24804 = 0;
  # .MEM_38 = VDEF <.MEM_32>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 160B]._M_headerD.36561._M_parentD.24805 = 0B;
  # .MEM_41 = VDEF <.MEM_38>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 160B]._M_node_countD.36562 = 0;
  # DEBUG thisD.62200 => D#304ptD.0
  # PT = nonlocal 
  _11 = &MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 160B]._M_headerD.36561;
  # .MEM_42 = VDEF <.MEM_41>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 160B]._M_headerD.36561._M_leftD.24806 = _11;
  # .MEM_43 = VDEF <.MEM_42>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 160B]._M_headerD.36561._M_rightD.24807 = _11;
  # DEBUG D#816ptD.0 => &this_2(D)->_out_occD.37145
  # DEBUG thisD.62193 => D#816ptD.0
  # DEBUG D#305ptD.0 => &D#816ptD.0->_M_tD.36318
  # DEBUG thisD.62194 => D#305ptD.0
  # DEBUG D#304ptD.0 => &MEM[(struct _Rb_treeD.36317 *)D#305ptD.0]._M_implD.36395
  # DEBUG thisD.62195 => D#304ptD.0
  # DEBUG thisD.54084 => D#304ptD.0
  # DEBUG thisD.54081 => D#304ptD.0
  # .MEM_44 = VDEF <.MEM_43>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 208B]._M_headerD.36561._M_colorD.24804 = 0;
  # .MEM_45 = VDEF <.MEM_44>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 208B]._M_headerD.36561._M_parentD.24805 = 0B;
  # .MEM_48 = VDEF <.MEM_45>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 208B]._M_node_countD.36562 = 0;
  # DEBUG thisD.62196 => D#304ptD.0
  # PT = nonlocal 
  _12 = &MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 208B]._M_headerD.36561;
  # .MEM_49 = VDEF <.MEM_48>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 208B]._M_headerD.36561._M_leftD.24806 = _12;
  # .MEM_50 = VDEF <.MEM_49>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 208B]._M_headerD.36561._M_rightD.24807 = _12;
  # DEBUG D#815ptD.0 => &this_2(D)->_in_reqD.37895
  # DEBUG thisD.62190 => D#815ptD.0
  # DEBUG D#309ptD.0 => &D#815ptD.0->D.37893
  # DEBUG thisD.62191 => D#309ptD.0
  # DEBUG D#308ptD.0 => &D#309ptD.0->_M_implD.37384
  # DEBUG thisD.62192 => D#308ptD.0
  # DEBUG thisD.54105 => D#308ptD.0
  # DEBUG thisD.54103 => D#308ptD.0
  # .MEM_51 = VDEF <.MEM_50>
  MEM[(struct _Vector_implD.37361 *)this_2(D) + 256B]._M_startD.37386 = 0B;
  # .MEM_52 = VDEF <.MEM_51>
  MEM[(struct _Vector_implD.37361 *)this_2(D) + 256B]._M_finishD.37387 = 0B;
  # .MEM_53 = VDEF <.MEM_52>
  MEM[(struct _Vector_implD.37361 *)this_2(D) + 256B]._M_end_of_storageD.37388 = 0B;
  # DEBUG D#814ptD.0 => &this_2(D)->_out_reqD.37896
  # DEBUG thisD.62187 => D#814ptD.0
  # DEBUG D#309ptD.0 => &D#814ptD.0->D.37893
  # DEBUG thisD.62188 => D#309ptD.0
  # DEBUG D#308ptD.0 => &D#309ptD.0->_M_implD.37384
  # DEBUG thisD.62189 => D#308ptD.0
  # DEBUG thisD.54105 => D#308ptD.0
  # DEBUG thisD.54103 => D#308ptD.0
  # .MEM_54 = VDEF <.MEM_53>
  MEM[(struct _Vector_implD.37361 *)this_2(D) + 280B]._M_startD.37386 = 0B;
  # .MEM_55 = VDEF <.MEM_54>
  MEM[(struct _Vector_implD.37361 *)this_2(D) + 280B]._M_finishD.37387 = 0B;
  # .MEM_56 = VDEF <.MEM_55>
  MEM[(struct _Vector_implD.37361 *)this_2(D) + 280B]._M_end_of_storageD.37388 = 0B;
  # DEBUG thisD.62183 => &D.42329
  # DEBUG D#328ptD.0 => &D.42329._M_tD.41463
  # DEBUG thisD.62184 => D#328ptD.0
  # DEBUG D#327ptD.0 => &MEM[(struct _Rb_treeD.41462 *)D#328ptD.0]._M_implD.41540
  # DEBUG thisD.62185 => D#327ptD.0
  # DEBUG thisD.54177 => D#327ptD.0
  # DEBUG thisD.54174 => D#327ptD.0
  # .MEM_57 = VDEF <.MEM_56>
  MEM[(struct _Rb_tree_implD.41541 *)&D.42329]._M_headerD.41695._M_colorD.24804 = 0;
  # .MEM_58 = VDEF <.MEM_57>
  MEM[(struct _Rb_tree_implD.41541 *)&D.42329]._M_headerD.41695._M_parentD.24805 = 0B;
  # .MEM_61 = VDEF <.MEM_58>
  MEM[(struct _Rb_tree_implD.41541 *)&D.42329]._M_node_countD.41696 = 0;
  # DEBUG thisD.62186 => D#327ptD.0
  # .MEM_62 = VDEF <.MEM_61>
  MEM[(struct _Rb_tree_implD.41541 *)&D.42329]._M_headerD.41695._M_leftD.24806 = &MEM[(struct _Rb_tree_implD.41541 *)&D.42329]._M_headerD.41695;
  # .MEM_63 = VDEF <.MEM_62>
  MEM[(struct _Rb_tree_implD.41541 *)&D.42329]._M_headerD.41695._M_rightD.24807 = &MEM[(struct _Rb_tree_implD.41541 *)&D.42329]._M_headerD.41695;
  # VUSE <.MEM_63>
  _15 = this_2(D)->D.37974._inputsD.34629;
  # RANGE ~[2147483648, 18446744071562067967]
  _16 = (long unsigned intD.14) _15;
  # PT = nonlocal 
  _17 = &this_2(D)->_in_reqD.37895;
  # DEBUG thisD.67461 => _17
  # DEBUG __new_sizeD.67462 => _16
  # DEBUG __xD.67463 => &D.42329
  # DEBUG D#92ptD.0 => _17
  # DEBUG D#92ptD.0 => _17
  # DEBUG thisD.67484 => D#92ptD.0
  # DEBUG thisD.67485 => D#92ptD.0
  if (_16 != 0)
    goto <bb 3>;
  else
    goto <bb 5>;
;;    succ:       3 [20.7%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [79.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 38, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [20.7%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#92ptD.0 => _17
  # DEBUG D#92ptD.0 => _17
  # DEBUG thisD.62155 => D#92ptD.0
  # DEBUG thisD.62154 => D#92ptD.0
  # DEBUG thisD.62148 => _17
  # DEBUG D#111ptD.0 => &_17->D.37893._M_implD.37384._M_finishD.37387
  # DEBUG thisD.62150 => NULL
  # DEBUG __iD.62149 => D#111ptD.0
  # DEBUG thisD.67483 => _17
  # .MEM_153 = VDEF <.MEM_63>
  MEM[(struct __normal_iteratorD.37462 *)&__positionD.67482] = 0B;
  # DEBUG __nD.67481 => _16
  # DEBUG __xD.67480 => &D.42329
  [LP 6] # .MEM_154 = VDEF <.MEM_153>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZNSt6vectorISt3mapIiN9Allocator8sRequestESt4lessIiESaISt4pairIKiS2_EEESaIS9_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS9_SB_EEmRKS9_D.37816 (_17, __positionD.67482, _16, &D.42329);
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                20 (EH,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 38, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_154>
  pretmp_86 = MEM[(struct _Rb_tree_node_baseD.24800 * *)&D.42329 + 16B];
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 184, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       2 [79.3%]  (FALSE_VALUE,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_141 = PHI <.MEM_63(2), .MEM_154(4)>
  # PT = nonlocal escaped null 
  # prephitmp_87 = PHI <0B(2), pretmp_86(4)>
  # DEBUG thisD.62205 => &D.42329
  # DEBUG thisD.62206 => &D.42329._M_tD.41463
  # DEBUG D#91ptD.0 => &D.42329._M_tD.41463
  # DEBUG thisD.57821 => D#91ptD.0
  # .MEM_64 = VDEF <.MEM_141>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (&D.42329._M_tD.41463, prephitmp_87);
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)&D.42329]._M_implD.41540
  # DEBUG thisD.62207 => D#549ptD.0
  # DEBUG thisD.62208 => D#549ptD.0
  # DEBUG thisD.62209 => D#549ptD.0
  # .MEM_19 = VDEF <.MEM_64>
  D.42329 ={v} {CLOBBER};
  # DEBUG thisD.62201 => &D.42330
  # DEBUG D#328ptD.0 => &D.42330._M_tD.41463
  # DEBUG thisD.62202 => D#328ptD.0
  # DEBUG D#327ptD.0 => &MEM[(struct _Rb_treeD.41462 *)D#328ptD.0]._M_implD.41540
  # DEBUG thisD.62203 => D#327ptD.0
  # DEBUG thisD.54177 => D#327ptD.0
  # DEBUG thisD.54174 => D#327ptD.0
  # .MEM_70 = VDEF <.MEM_19>
  MEM[(struct _Rb_tree_implD.41541 *)&D.42330]._M_headerD.41695._M_colorD.24804 = 0;
  # .MEM_71 = VDEF <.MEM_70>
  MEM[(struct _Rb_tree_implD.41541 *)&D.42330]._M_headerD.41695._M_parentD.24805 = 0B;
  # .MEM_74 = VDEF <.MEM_71>
  MEM[(struct _Rb_tree_implD.41541 *)&D.42330]._M_node_countD.41696 = 0;
  # DEBUG thisD.62204 => D#327ptD.0
  # .MEM_75 = VDEF <.MEM_74>
  MEM[(struct _Rb_tree_implD.41541 *)&D.42330]._M_headerD.41695._M_leftD.24806 = &MEM[(struct _Rb_tree_implD.41541 *)&D.42330]._M_headerD.41695;
  # .MEM_76 = VDEF <.MEM_75>
  MEM[(struct _Rb_tree_implD.41541 *)&D.42330]._M_headerD.41695._M_rightD.24807 = &MEM[(struct _Rb_tree_implD.41541 *)&D.42330]._M_headerD.41695;
  # VUSE <.MEM_76>
  _20 = this_2(D)->D.37974._outputsD.34630;
  # RANGE ~[2147483648, 18446744071562067967]
  _21 = (long unsigned intD.14) _20;
  # DEBUG D#1183ptD.0 => &this_2(D)->_out_reqD.37896
  # DEBUG thisD.67499 => D#1183ptD.0
  # DEBUG __new_sizeD.67500 => _21
  # DEBUG __xD.67501 => &D.42330
  # VUSE <.MEM_76>
  # PT = nonlocal escaped 
  _124 = MEM[(struct mapD.37148 * *)this_2(D) + 280B];
  # DEBUG D#92ptD.0 => D#1183ptD.0
  # VUSE <.MEM_76>
  # PT = nonlocal escaped 
  _125 = MEM[(struct mapD.37148 * *)this_2(D) + 288B];
  # DEBUG D#92ptD.0 => D#1183ptD.0
  # DEBUG thisD.67522 => D#92ptD.0
  # DEBUG thisD.67523 => D#92ptD.0
  _126 = (long intD.12) _125;
  _127 = (long intD.12) _124;
  _128 = _126 - _127;
  # RANGE [-192153584101141162, 192153584101141162]
  _129 = _128 /[ex] 48;
  # RANGE ~[192153584101141163, 18254590489608410453]
  _130 = (size_typeD.37469) _129;
  if (_21 > _130)
    goto <bb 6>;
  else
    goto <bb 8>;
;;    succ:       6 [20.7%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [79.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 38, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [20.7%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal 
  _22 = &this_2(D)->_out_reqD.37896;
  # DEBUG D#92ptD.0 => D#1183ptD.0
  # DEBUG D#92ptD.0 => D#1183ptD.0
  # DEBUG thisD.62155 => D#92ptD.0
  # DEBUG thisD.62154 => D#92ptD.0
  # RANGE [1, 18446744073709551615]
  _131 = _21 - _130;
  # DEBUG thisD.62148 => D#1183ptD.0
  # DEBUG D#111ptD.0 => &D#1183ptD.0->D.37893._M_implD.37384._M_finishD.37387
  # DEBUG thisD.62150 => NULL
  # DEBUG __iD.62149 => D#111ptD.0
  # DEBUG thisD.67521 => D#1183ptD.0
  # .MEM_163 = VDEF <.MEM_76>
  MEM[(struct __normal_iteratorD.37462 *)&__positionD.67520] = _125;
  # DEBUG __nD.67519 => _131
  # DEBUG __xD.67518 => &D.42330
  [LP 7] # .MEM_164 = VDEF <.MEM_163>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZNSt6vectorISt3mapIiN9Allocator8sRequestESt4lessIiESaISt4pairIKiS2_EEESaIS9_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS9_SB_EEmRKS9_D.37816 (_22, __positionD.67520, _131, &D.42330);
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                21 (EH,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 38, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_164>
  pretmp_88 = MEM[(struct _Rb_tree_node_baseD.24800 * *)&D.42330 + 16B];
  goto <bb 19>;
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 146, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       5 [79.3%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#92ptD.0 => D#1183ptD.0
  # DEBUG D#92ptD.0 => D#1183ptD.0
  # DEBUG thisD.62160 => D#92ptD.0
  # DEBUG thisD.62159 => D#92ptD.0
  if (_21 < _130)
    goto <bb 9>;
  else
    goto <bb 19>;
;;    succ:       9 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 89, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _132 = _21 * 48;
  # PT = nonlocal escaped 
  __pos_133 = _124 + _132;
  # DEBUG D#553ptD.0 => D#1183ptD.0
  # DEBUG __posD.67503 => __pos_133
  # DEBUG D#552ptD.0 => D#553ptD.0
  # DEBUG thisD.67502 => D#552ptD.0
  # DEBUG D#551ptD.0 => &D#552ptD.0->D.37893
  # DEBUG thisD.57904 => D#551ptD.0
  # DEBUG __firstD.67506 => __pos_133
  # DEBUG __lastD.67505 => _125
  # DEBUG __firstD.67511 => __pos_133
  if (_125 == __pos_133)
    goto <bb 18>;
  else
    goto <bb 10>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 81, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __pos_118 = PHI <__pos_133(10), __pos_137(13)>
  # .MEM_123 = PHI <.MEM_76(10), .MEM_161(13)>
  # DEBUG __firstD.67511 => __pos_118
  # DEBUG __rD.57841 => __pos_118
  # DEBUG __pointerD.67512 => NULL
  # DEBUG thisD.67513 => NULL
  # PT = nonlocal escaped 
  _135 = &__pos_118->_M_tD.41463;
  # DEBUG thisD.67514 => _135
  # VUSE <.MEM_123>
  # PT = nonlocal escaped 
  __x_136 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__pos_118 + 16B];
  # DEBUG D#91ptD.0 => _135
  # DEBUG thisD.57821 => D#91ptD.0
  # DEBUG thisD.67524 => _135
  # DEBUG __xD.67525 => __x_136
  # DEBUG __xD.67525 => __x_136
  if (__x_136 == 0B)
    goto <bb 12>;
  else
    goto <bb 14>;
;;    succ:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_94 = PHI <.MEM_123(11), .MEM_156(15)>
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_135]._M_implD.41540
  # DEBUG thisD.67515 => D#549ptD.0
  # DEBUG thisD.67516 => D#549ptD.0
  # DEBUG thisD.67517 => D#549ptD.0
  # .MEM_161 = VDEF <.MEM_94>
  MEM[(struct  &)__pos_118] ={v} {CLOBBER};
  # PT = nonlocal escaped 
  __pos_137 = __pos_118 + 48;
  # DEBUG __firstD.67511 => __pos_137
  # DEBUG __firstD.67511 => __pos_137
  if (_125 == __pos_137)
    goto <bb 17>;
  else
    goto <bb 13>;
;;    succ:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       11 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 14, next block 16, flags: (NEW)
;;    pred:       14 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                16 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_18 = PHI <__x_136(14), __x_139(16)>
  # .MEM_116 = PHI <.MEM_123(14), .MEM_156(16)>
  # DEBUG __xD.67525 => __x_18
  # VUSE <.MEM_116>
  # PT = nonlocal escaped 
  _138 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_18 + 24B];
  # DEBUG D#107ptD.0 => __x_18
  # DEBUG __xD.57814 => D#107ptD.0
  # .MEM_155 = VDEF <.MEM_116>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (_135, _138);
  # VUSE <.MEM_155>
  # PT = nonlocal escaped 
  __x_139 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_18 + 16B];
  # DEBUG D#108ptD.0 => __x_18
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.67526 => NULL
  # DEBUG D#548ptD.0 => _135
  # DEBUG __pD.67528 => __x_18
  # DEBUG thisD.67527 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_18
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.67530 => D#546ptD.0
  # DEBUG __pD.67529 => __x_18
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.67533 => __x_18
  # DEBUG __aD.67531 => D#406ptD.0
  # DEBUG __nD.67532 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.67536 => __x_18
  # DEBUG thisD.67534 => D#402ptD.0
  # DEBUG D.67535 => D#403ptD.0
  # .MEM_156 = VDEF <.MEM_155>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZdlPvD.2766 (__x_18);
  # DEBUG __xD.67525 => __x_139
  # DEBUG __xD.67525 => __x_139
  if (__x_139 == 0B)
    goto <bb 12>;
  else
    goto <bb 16>;
;;    succ:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 2, count 0, freq 8281, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 81, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_161>
  pretmp_92 = MEM[(struct _Rb_tree_node_baseD.24800 * *)&D.42330 + 16B];
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 89, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_152 = PHI <.MEM_161(17), .MEM_76(9)>
  # prephitmp_93 = PHI <pretmp_92(17), 0B(9)>
  # .MEM_162 = VDEF <.MEM_152>
  MEM[(struct mapD.37148 * *)this_2(D) + 288B] = __pos_133;
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 184, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       8 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                18 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_144 = PHI <.MEM_76(8), .MEM_164(7), .MEM_162(18)>
  # PT = nonlocal escaped null 
  # prephitmp_91 = PHI <0B(8), pretmp_88(7), prephitmp_93(18)>
  # DEBUG thisD.62210 => &D.42330
  # DEBUG thisD.62211 => &D.42330._M_tD.41463
  # DEBUG D#91ptD.0 => &D.42330._M_tD.41463
  # DEBUG thisD.57821 => D#91ptD.0
  # .MEM_77 = VDEF <.MEM_144>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (&D.42330._M_tD.41463, prephitmp_91);
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)&D.42330]._M_implD.41540
  # DEBUG thisD.62212 => D#549ptD.0
  # DEBUG thisD.62213 => D#549ptD.0
  # DEBUG thisD.62214 => D#549ptD.0
  # .MEM_24 = VDEF <.MEM_77>
  D.42330 ={v} {CLOBBER};
  # VUSE <.MEM_24>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       3 (EH,EXECUTABLE)
<L0>: [LP 6]
  # DEBUG thisD.62215 => &D.42329
  # DEBUG thisD.62216 => &D.42329._M_tD.41463
  # VUSE <.MEM_154>
  # PT = nonlocal escaped null 
  _34 = MEM[(struct _Rb_tree_node_baseD.24800 * *)&D.42329 + 16B];
  # DEBUG D#91ptD.0 => &D.42329._M_tD.41463
  # DEBUG thisD.57821 => D#91ptD.0
  # .MEM_89 = VDEF <.MEM_154>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (&D.42329._M_tD.41463, _34);
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)&D.42329]._M_implD.41540
  # DEBUG thisD.62217 => D#549ptD.0
  # DEBUG thisD.62218 => D#549ptD.0
  # DEBUG thisD.62219 => D#549ptD.0
  # .MEM_27 = VDEF <.MEM_89>
  D.42329 ={v} {CLOBBER};
  [LP 8] resx 6
;;    succ:       23 (EH,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       6 (EH,EXECUTABLE)
<L1>: [LP 7]
  # DEBUG thisD.62220 => &D.42330
  # DEBUG thisD.62221 => &D.42330._M_tD.41463
  # VUSE <.MEM_164>
  # PT = nonlocal escaped null 
  _35 = MEM[(struct _Rb_tree_node_baseD.24800 * *)&D.42330 + 16B];
  # DEBUG D#91ptD.0 => &D.42330._M_tD.41463
  # DEBUG thisD.57821 => D#91ptD.0
  # .MEM_83 = VDEF <.MEM_164>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (&D.42330._M_tD.41463, _35);
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)&D.42330]._M_implD.41540
  # DEBUG thisD.62222 => D#549ptD.0
  # DEBUG thisD.62223 => D#549ptD.0
  # DEBUG thisD.62224 => D#549ptD.0
  # .MEM_26 = VDEF <.MEM_83>
  D.42330 ={v} {CLOBBER};
  [LP 5] resx 8
;;    succ:       22 (EH,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 21, next block 23, flags: (NEW)
;;    pred:       21 (EH,EXECUTABLE)
<L8>: [LP 5]
  goto <bb 24> (<L2>);
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       20 (EH,EXECUTABLE)
<L7>: [LP 8]
  pretmp_84 = &this_2(D)->_out_reqD.37896;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_26(22), .MEM_27(23)>
  # PT = nonlocal 
  # prephitmp_85 = PHI <_22(22), pretmp_84(23)>
<L2>:
  # .MEM_29 = VDEF <.MEM_1>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZNSt6vectorISt3mapIiN9Allocator8sRequestESt4lessIiESaISt4pairIKiS2_EEESaIS9_EED1EvD.37887 (prephitmp_85);
  [LP 4] resx 5
;;    succ:       25 (EH,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       24 (EH,EXECUTABLE)
<L3>: [LP 4]
  # .MEM_30 = VDEF <.MEM_29>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZNSt6vectorISt3mapIiN9Allocator8sRequestESt4lessIiESaISt4pairIKiS2_EEESaIS9_EED1EvD.37887 (_17);
  [LP 3] resx 4
;;    succ:       26 (EH,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       25 (EH,EXECUTABLE)
<L4>: [LP 3]
  # DEBUG D#813ptD.0 => &this_2(D)->_out_occD.37145
  # DEBUG thisD.62225 => D#813ptD.0
  # PT = nonlocal 
  _25 = &MEM[(struct setD.36306 *)this_2(D) + 208B]._M_tD.36318;
  # DEBUG thisD.62226 => _25
  # VUSE <.MEM_30>
  # PT = nonlocal escaped 
  _36 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_2(D) + 224B];
  # DEBUG D#90ptD.0 => _25
  # DEBUG thisD.55012 => D#90ptD.0
  # .MEM_95 = VDEF <.MEM_30>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiED.36688 (_25, _36);
  # DEBUG D#400ptD.0 => &MEM[(struct _Rb_treeD.36317 *)_25]._M_implD.36395
  # DEBUG thisD.62227 => D#400ptD.0
  # DEBUG thisD.62228 => D#400ptD.0
  # DEBUG thisD.62229 => D#400ptD.0
  # .MEM_100 = VDEF <.MEM_95>
  MEM[(struct  &)this_2(D) + 208] ={v} {CLOBBER};
  [LP 2] resx 3
;;    succ:       27 (EH,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       26 (EH,EXECUTABLE)
<L5>: [LP 2]
  # DEBUG D#812ptD.0 => &this_2(D)->_in_occD.37144
  # DEBUG thisD.62230 => D#812ptD.0
  # PT = nonlocal 
  _31 = &MEM[(struct setD.36306 *)this_2(D) + 160B]._M_tD.36318;
  # DEBUG thisD.62231 => _31
  # VUSE <.MEM_100>
  # PT = nonlocal escaped 
  _37 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_2(D) + 176B];
  # DEBUG D#90ptD.0 => _31
  # DEBUG thisD.55012 => D#90ptD.0
  # .MEM_101 = VDEF <.MEM_100>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiED.36688 (_31, _37);
  # DEBUG D#400ptD.0 => &MEM[(struct _Rb_treeD.36317 *)_31]._M_implD.36395
  # DEBUG thisD.62232 => D#400ptD.0
  # DEBUG thisD.62233 => D#400ptD.0
  # DEBUG thisD.62234 => D#400ptD.0
  # .MEM_106 = VDEF <.MEM_101>
  MEM[(struct  &)this_2(D) + 160] ={v} {CLOBBER};
  [LP 1] resx 2
;;    succ:       28 (EH,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 27, next block 1, flags: (NEW, REACHABLE)
;;    pred:       27 (EH,EXECUTABLE)
<L6>: [LP 1]
  # .MEM_33 = VDEF <.MEM_106>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZN9AllocatorD2EvD.35455 (_3);
  resx 1
;;    succ:      

}



Updating SSA:
Registering new PHI nodes in block #15
Updating SSA information for statement operator delete (__x_18);
Registering new PHI nodes in block #16
Registering new PHI nodes in block #30

DFA Statistics for SparseAllocator::SparseAllocator(Module*, const string&, int, int)

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                            143       1144b
DEF operands                             34        272b
VUSE operands                            66        528b
VDEF operands                            51        408b
PHI nodes                                14       1456b
PHI arguments                            29       1392b
---------------------------------------------------------
Total memory used by DFA/SSA data                 5200b
---------------------------------------------------------

Average number of arguments per PHI node: 2.1 (max: 3)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_14 -> { .MEM_156 }
Incremental SSA update started at block: 15
Number of blocks in CFG: 31
Number of blocks to update: 3 ( 10%)
Affected blocks: 15 16 30


Creating dr for MEM[(struct __normal_iterator *)&__position]
analyze_innermost: success.
	base_address: &__position
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct __normal_iterator *)&__position]
Creating dr for MEM[(struct _Rb_tree_node_base * *)&D.42329 + 16B]
analyze_innermost: success.
	base_address: &D.42329
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)&D.42329 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)&D.42329 + 16B]
analyze_innermost: success.
	base_address: &D.42329
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)&D.42329 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)this_2(D) + 224B]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 224
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_2(D) + 224B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)this_2(D) + 176B]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 176
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_2(D) + 176B]
Creating dr for MEM[(struct __normal_iterator *)&__position]
analyze_innermost: success.
	base_address: &__position
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct __normal_iterator *)&__position]
Creating dr for MEM[(struct _Rb_tree_node_base * *)&D.42330 + 16B]
analyze_innermost: success.
	base_address: &D.42330
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)&D.42330 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)&D.42330 + 16B]
analyze_innermost: success.
	base_address: &D.42330
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)&D.42330 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__pos_118 + 16B]
analyze_innermost: success.
	base_address: _124 + (long unsigned int) _20 * 48
	offset from base address: 0
	constant offset from base address: 16
	step: 48
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)_124 + (long unsigned int) _20 * 48]
	Access function 0: {16B, +, 48}_3
Creating dr for MEM[(struct _Rb_tree_node_base * *)__pos_118 + 16B]
analyze_innermost: success.
	base_address: _124 + (long unsigned int) _20 * 48
	offset from base address: 0
	constant offset from base address: 16
	step: 48
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)_124 + (long unsigned int) _20 * 48]
	Access function 0: {16B, +, 48}_3
Creating dr for MEM[(struct _Rb_tree_node_base * *)__pos_118 + 16B]
analyze_innermost: success.
	base_address: _124 + (long unsigned int) _20 * 48
	offset from base address: 0
	constant offset from base address: 16
	step: 48
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)_124 + (long unsigned int) _20 * 48]
	Access function 0: {16B, +, 48}_3
Creating dr for MEM[(struct _Rb_tree_node_base * *)__pos_118 + 16B]
analyze_innermost: success.
	base_address: _124 + (long unsigned int) _20 * 48
	offset from base address: 0
	constant offset from base address: 16
	step: 48
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)_124 + (long unsigned int) _20 * 48]
	Access function 0: {16B, +, 48}_3
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
Analyzing # of iterations of loop 3
  exit condition [__pos_133 + 48, + , 48](no_overflow) != _125
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551567
  result:
    under assumptions ((unsigned long) _125 - (unsigned long) (__pos_133 + 48) & 15) == 0
    # of iterations (((unsigned long) _125 - (unsigned long) (__pos_133 + 48)) /[ex] 16) * 768614336404564651 & 1152921504606846975, bounded by 384307168202282325
Creating dr for MEM[(struct _Rb_tree_node_base * *)__pos_118 + 16B]
analyze_innermost: success.
	base_address: _124 + (long unsigned int) _20 * 48
	offset from base address: 0
	constant offset from base address: 16
	step: 48
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)_124 + (long unsigned int) _20 * 48]
	Access function 0: {16B, +, 48}_3
Creating dr for MEM[(struct _Rb_tree_node_base * *)__pos_118 + 16B]
analyze_innermost: success.
	base_address: _124 + (long unsigned int) _20 * 48
	offset from base address: 0
	constant offset from base address: 16
	step: 48
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)_124 + (long unsigned int) _20 * 48]
	Access function 0: {16B, +, 48}_3
Creating dr for MEM[(struct _Rb_tree_node_base * *)__pos_118 + 16B]
analyze_innermost: success.
	base_address: _124 + (long unsigned int) _20 * 48
	offset from base address: 0
	constant offset from base address: 16
	step: 48
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)_124 + (long unsigned int) _20 * 48]
	Access function 0: {16B, +, 48}_3
Creating dr for MEM[(struct _Rb_tree_node_base * *)__pos_118 + 16B]
analyze_innermost: success.
	base_address: _124 + (long unsigned int) _20 * 48
	offset from base address: 0
	constant offset from base address: 16
	step: 48
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)_124 + (long unsigned int) _20 * 48]
	Access function 0: {16B, +, 48}_3
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B]
Analyzing # of iterations of loop 3
  exit condition [__pos_133 + 48, + , 48](no_overflow) != _125
  bounds on difference of bases: -18446744073709551615 ... 18446744073709551567
  result:
    under assumptions ((unsigned long) _125 - (unsigned long) (__pos_133 + 48) & 15) == 0
    # of iterations (((unsigned long) _125 - (unsigned long) (__pos_133 + 48)) /[ex] 16) * 768614336404564651 & 1152921504606846975, bounded by 384307168202282325
Creating dr for MEM[(struct _Rb_tree_node_base * *)&D.42330 + 16B]
analyze_innermost: success.
	base_address: &D.42330
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)&D.42330 + 16B]
Creating dr for MEM[(struct map * *)this_2(D) + 288B]
analyze_innermost: success.
	base_address: this_2(D)
	offset from base address: 0
	constant offset from base address: 288
	step: 0
	aligned to: 256
	base_object: MEM[(struct map * *)this_2(D) + 288B]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:32, LOOPS:2, CONDITIONS:9, STMTS:325)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_5 })
  {
    <bb 2>:
    _3 = &this_2(D)->D.37974;
    # .MEM_9 = VDEF <.MEM_4(D)>
    Allocator::Allocator (_3, parent_5(D), name_6(D), inputs_7(D), outputs_8(D));
    # .MEM_10 = VDEF <.MEM_9>
    this_2(D)->D.37974.D.35470._vptr.Module = &MEM[(void *)&_ZTV15SparseAllocator + 16B];
    # DEBUG D#817 => &this_2(D)->_in_occ
    # DEBUG this => D#817
    # DEBUG D#305 => &D#817->_M_t
    # DEBUG this => D#305
    # DEBUG D#304 => &MEM[(struct _Rb_tree *)D#305]._M_impl
    # DEBUG this => D#304
    # DEBUG this => D#304
    # DEBUG this => D#304
    # .MEM_32 = VDEF <.MEM_10>
    MEM[(struct _Rb_tree_impl *)this_2(D) + 160B]._M_header._M_color = 0;
    # .MEM_38 = VDEF <.MEM_32>
    MEM[(struct _Rb_tree_impl *)this_2(D) + 160B]._M_header._M_parent = 0B;
    # .MEM_41 = VDEF <.MEM_38>
    MEM[(struct _Rb_tree_impl *)this_2(D) + 160B]._M_node_count = 0;
    # DEBUG this => D#304
    _11 = &MEM[(struct _Rb_tree_impl *)this_2(D) + 160B]._M_header;
    # .MEM_42 = VDEF <.MEM_41>
    MEM[(struct _Rb_tree_impl *)this_2(D) + 160B]._M_header._M_left = _11;
    # .MEM_43 = VDEF <.MEM_42>
    MEM[(struct _Rb_tree_impl *)this_2(D) + 160B]._M_header._M_right = _11;
    # DEBUG D#816 => &this_2(D)->_out_occ
    # DEBUG this => D#816
    # DEBUG D#305 => &D#816->_M_t
    # DEBUG this => D#305
    # DEBUG D#304 => &MEM[(struct _Rb_tree *)D#305]._M_impl
    # DEBUG this => D#304
    # DEBUG this => D#304
    # DEBUG this => D#304
    # .MEM_44 = VDEF <.MEM_43>
    MEM[(struct _Rb_tree_impl *)this_2(D) + 208B]._M_header._M_color = 0;
    # .MEM_45 = VDEF <.MEM_44>
    MEM[(struct _Rb_tree_impl *)this_2(D) + 208B]._M_header._M_parent = 0B;
    # .MEM_48 = VDEF <.MEM_45>
    MEM[(struct _Rb_tree_impl *)this_2(D) + 208B]._M_node_count = 0;
    # DEBUG this => D#304
    _12 = &MEM[(struct _Rb_tree_impl *)this_2(D) + 208B]._M_header;
    # .MEM_49 = VDEF <.MEM_48>
    MEM[(struct _Rb_tree_impl *)this_2(D) + 208B]._M_header._M_left = _12;
    # .MEM_50 = VDEF <.MEM_49>
    MEM[(struct _Rb_tree_impl *)this_2(D) + 208B]._M_header._M_right = _12;
    # DEBUG D#815 => &this_2(D)->_in_req
    # DEBUG this => D#815
    # DEBUG D#309 => &D#815->D.37893
    # DEBUG this => D#309
    # DEBUG D#308 => &D#309->_M_impl
    # DEBUG this => D#308
    # DEBUG this => D#308
    # DEBUG this => D#308
    # .MEM_51 = VDEF <.MEM_50>
    MEM[(struct _Vector_impl *)this_2(D) + 256B]._M_start = 0B;
    # .MEM_52 = VDEF <.MEM_51>
    MEM[(struct _Vector_impl *)this_2(D) + 256B]._M_finish = 0B;
    # .MEM_53 = VDEF <.MEM_52>
    MEM[(struct _Vector_impl *)this_2(D) + 256B]._M_end_of_storage = 0B;
    # DEBUG D#814 => &this_2(D)->_out_req
    # DEBUG this => D#814
    # DEBUG D#309 => &D#814->D.37893
    # DEBUG this => D#309
    # DEBUG D#308 => &D#309->_M_impl
    # DEBUG this => D#308
    # DEBUG this => D#308
    # DEBUG this => D#308
    # .MEM_54 = VDEF <.MEM_53>
    MEM[(struct _Vector_impl *)this_2(D) + 280B]._M_start = 0B;
    # .MEM_55 = VDEF <.MEM_54>
    MEM[(struct _Vector_impl *)this_2(D) + 280B]._M_finish = 0B;
    # .MEM_56 = VDEF <.MEM_55>
    MEM[(struct _Vector_impl *)this_2(D) + 280B]._M_end_of_storage = 0B;
    # DEBUG this => &D.42329
    # DEBUG D#328 => &D.42329._M_t
    # DEBUG this => D#328
    # DEBUG D#327 => &MEM[(struct _Rb_tree *)D#328]._M_impl
    # DEBUG this => D#327
    # DEBUG this => D#327
    # DEBUG this => D#327
    # .MEM_57 = VDEF <.MEM_56>
    MEM[(struct _Rb_tree_impl *)&D.42329]._M_header._M_color = 0;
    # .MEM_58 = VDEF <.MEM_57>
    MEM[(struct _Rb_tree_impl *)&D.42329]._M_header._M_parent = 0B;
    # .MEM_61 = VDEF <.MEM_58>
    MEM[(struct _Rb_tree_impl *)&D.42329]._M_node_count = 0;
    # DEBUG this => D#327
    # .MEM_62 = VDEF <.MEM_61>
    MEM[(struct _Rb_tree_impl *)&D.42329]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.42329]._M_header;
    # .MEM_63 = VDEF <.MEM_62>
    MEM[(struct _Rb_tree_impl *)&D.42329]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.42329]._M_header;
    # VUSE <.MEM_63>
    _15 = this_2(D)->D.37974._inputs;
    _16 = (long unsigned int) _15;
    _17 = &this_2(D)->_in_req;
    # DEBUG this => _17
    # DEBUG __new_size => _16
    # DEBUG __x => &D.42329
    # DEBUG D#92 => _17
    # DEBUG D#92 => _17
    # DEBUG this => D#92
    # DEBUG this => D#92
    if (_16 != 0)
      goto <bb 3>;
    else
      goto <bb 5>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 bb_20 })
  {
    <bb 3>:
    # DEBUG D#92 => _17
    # DEBUG D#92 => _17
    # DEBUG this => D#92
    # DEBUG this => D#92
    # DEBUG this => _17
    # DEBUG D#111 => &_17->D.37893._M_impl._M_finish
    # DEBUG this => NULL
    # DEBUG __i => D#111
    # DEBUG this => _17
    # .MEM_153 = VDEF <.MEM_63>
    MEM[(struct __normal_iterator *)&__position] = 0B;
    # DEBUG __n => _16
    # DEBUG __x => &D.42329
    # .MEM_154 = VDEF <.MEM_153>
    std::vector<std::map<int, Allocator::sRequest> >::_M_fill_insert (_17, __position, _16, &D.42329);

  }
  bb_4 (preds = {bb_3 }, succs = {bb_5 })
  {
    <bb 4>:
    # VUSE <.MEM_154>
    pretmp_86 = MEM[(struct _Rb_tree_node_base * *)&D.42329 + 16B];

  }
  bb_5 (preds = {bb_2 bb_4 }, succs = {bb_6 bb_8 })
  {
    <bb 5>:
    # .MEM_141 = PHI <.MEM_63(2), .MEM_154(4)>
    # prephitmp_87 = PHI <0B(2), pretmp_86(4)>
    # DEBUG this => &D.42329
    # DEBUG this => &D.42329._M_t
    # DEBUG D#91 => &D.42329._M_t
    # DEBUG this => D#91
    # .MEM_64 = VDEF <.MEM_141>
    std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_M_erase (&D.42329._M_t, prephitmp_87);
    # DEBUG D#549 => &MEM[(struct _Rb_tree *)&D.42329]._M_impl
    # DEBUG this => D#549
    # DEBUG this => D#549
    # DEBUG this => D#549
    # .MEM_19 = VDEF <.MEM_64>
    D.42329 ={v} {CLOBBER};
    # DEBUG this => &D.42330
    # DEBUG D#328 => &D.42330._M_t
    # DEBUG this => D#328
    # DEBUG D#327 => &MEM[(struct _Rb_tree *)D#328]._M_impl
    # DEBUG this => D#327
    # DEBUG this => D#327
    # DEBUG this => D#327
    # .MEM_70 = VDEF <.MEM_19>
    MEM[(struct _Rb_tree_impl *)&D.42330]._M_header._M_color = 0;
    # .MEM_71 = VDEF <.MEM_70>
    MEM[(struct _Rb_tree_impl *)&D.42330]._M_header._M_parent = 0B;
    # .MEM_74 = VDEF <.MEM_71>
    MEM[(struct _Rb_tree_impl *)&D.42330]._M_node_count = 0;
    # DEBUG this => D#327
    # .MEM_75 = VDEF <.MEM_74>
    MEM[(struct _Rb_tree_impl *)&D.42330]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.42330]._M_header;
    # .MEM_76 = VDEF <.MEM_75>
    MEM[(struct _Rb_tree_impl *)&D.42330]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.42330]._M_header;
    # VUSE <.MEM_76>
    _20 = this_2(D)->D.37974._outputs;
    _21 = (long unsigned int) _20;
    # DEBUG D#1183 => &this_2(D)->_out_req
    # DEBUG this => D#1183
    # DEBUG __new_size => _21
    # DEBUG __x => &D.42330
    # VUSE <.MEM_76>
    _124 = MEM[(struct map * *)this_2(D) + 280B];
    # DEBUG D#92 => D#1183
    # VUSE <.MEM_76>
    _125 = MEM[(struct map * *)this_2(D) + 288B];
    # DEBUG D#92 => D#1183
    # DEBUG this => D#92
    # DEBUG this => D#92
    _126 = (long int) _125;
    _127 = (long int) _124;
    _128 = _126 - _127;
    _129 = _128 /[ex] 48;
    _130 = (size_type) _129;
    if (_21 > _130)
      goto <bb 6>;
    else
      goto <bb 8>;

  }
  bb_6 (preds = {bb_5 }, succs = {bb_7 bb_21 })
  {
    <bb 6>:
    _22 = &this_2(D)->_out_req;
    # DEBUG D#92 => D#1183
    # DEBUG D#92 => D#1183
    # DEBUG this => D#92
    # DEBUG this => D#92
    _131 = _21 - _130;
    # DEBUG this => D#1183
    # DEBUG D#111 => &D#1183->D.37893._M_impl._M_finish
    # DEBUG this => NULL
    # DEBUG __i => D#111
    # DEBUG this => D#1183
    # .MEM_163 = VDEF <.MEM_76>
    MEM[(struct __normal_iterator *)&__position] = _125;
    # DEBUG __n => _131
    # DEBUG __x => &D.42330
    # .MEM_164 = VDEF <.MEM_163>
    std::vector<std::map<int, Allocator::sRequest> >::_M_fill_insert (_22, __position, _131, &D.42330);

  }
  bb_7 (preds = {bb_6 }, succs = {bb_19 })
  {
    <bb 7>:
    # VUSE <.MEM_164>
    pretmp_88 = MEM[(struct _Rb_tree_node_base * *)&D.42330 + 16B];
    goto <bb 19>;

  }
  bb_8 (preds = {bb_5 }, succs = {bb_9 bb_19 })
  {
    <bb 8>:
    # DEBUG D#92 => D#1183
    # DEBUG D#92 => D#1183
    # DEBUG this => D#92
    # DEBUG this => D#92
    if (_21 < _130)
      goto <bb 9>;
    else
      goto <bb 19>;

  }
  bb_9 (preds = {bb_8 }, succs = {bb_18 bb_10 })
  {
    <bb 9>:
    _132 = _21 * 48;
    __pos_133 = _124 + _132;
    # DEBUG D#553 => D#1183
    # DEBUG __pos => __pos_133
    # DEBUG D#552 => D#553
    # DEBUG this => D#552
    # DEBUG D#551 => &D#552->D.37893
    # DEBUG this => D#551
    # DEBUG __first => __pos_133
    # DEBUG __last => _125
    # DEBUG __first => __pos_133
    if (_125 == __pos_133)
      goto <bb 18>;
    else
      goto <bb 10>;

  }
  bb_10 (preds = {bb_9 }, succs = {bb_11 })
  {
    <bb 10>:

  }
  bb_17 (preds = {bb_12 }, succs = {bb_29 })
  {
    <bb 17>:

  }
  bb_29 (preds = {bb_17 }, succs = {bb_18 })
  {
    <bb 29>:
    # VUSE <.MEM_161>
    pretmp_92 = MEM[(struct _Rb_tree_node_base * *)&D.42330 + 16B];

  }
  bb_18 (preds = {bb_29 bb_9 }, succs = {bb_31 })
  {
    <bb 18>:
    # .MEM_152 = PHI <.MEM_161(29), .MEM_76(9)>
    # prephitmp_93 = PHI <pretmp_92(29), 0B(9)>

  }
  bb_31 (preds = {bb_18 }, succs = {bb_19 })
  {
    <bb 31>:
    # .MEM_162 = VDEF <.MEM_152>
    MEM[(struct map * *)this_2(D) + 288B] = __pos_133;

  }
  bb_19 (preds = {bb_8 bb_7 bb_31 }, succs = {bb_1 })
  {
    <bb 19>:
    # .MEM_144 = PHI <.MEM_76(8), .MEM_164(7), .MEM_162(31)>
    # prephitmp_91 = PHI <0B(8), pretmp_88(7), prephitmp_93(31)>
    # DEBUG this => &D.42330
    # DEBUG this => &D.42330._M_t
    # DEBUG D#91 => &D.42330._M_t
    # DEBUG this => D#91
    # .MEM_77 = VDEF <.MEM_144>
    std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_M_erase (&D.42330._M_t, prephitmp_91);
    # DEBUG D#549 => &MEM[(struct _Rb_tree *)&D.42330]._M_impl
    # DEBUG this => D#549
    # DEBUG this => D#549
    # DEBUG this => D#549
    # .MEM_24 = VDEF <.MEM_77>
    D.42330 ={v} {CLOBBER};
    # VUSE <.MEM_24>
    return;

  }
  bb_20 (preds = {bb_3 }, succs = {bb_23 })
  {
  <L0>:
    # DEBUG this => &D.42329
    # DEBUG this => &D.42329._M_t
    # VUSE <.MEM_154>
    _34 = MEM[(struct _Rb_tree_node_base * *)&D.42329 + 16B];
    # DEBUG D#91 => &D.42329._M_t
    # DEBUG this => D#91
    # .MEM_89 = VDEF <.MEM_154>
    std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_M_erase (&D.42329._M_t, _34);
    # DEBUG D#549 => &MEM[(struct _Rb_tree *)&D.42329]._M_impl
    # DEBUG this => D#549
    # DEBUG this => D#549
    # DEBUG this => D#549
    # .MEM_27 = VDEF <.MEM_89>
    D.42329 ={v} {CLOBBER};
    resx 6

  }
  bb_21 (preds = {bb_6 }, succs = {bb_22 })
  {
  <L1>:
    # DEBUG this => &D.42330
    # DEBUG this => &D.42330._M_t
    # VUSE <.MEM_164>
    _35 = MEM[(struct _Rb_tree_node_base * *)&D.42330 + 16B];
    # DEBUG D#91 => &D.42330._M_t
    # DEBUG this => D#91
    # .MEM_83 = VDEF <.MEM_164>
    std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_M_erase (&D.42330._M_t, _35);
    # DEBUG D#549 => &MEM[(struct _Rb_tree *)&D.42330]._M_impl
    # DEBUG this => D#549
    # DEBUG this => D#549
    # DEBUG this => D#549
    # .MEM_26 = VDEF <.MEM_83>
    D.42330 ={v} {CLOBBER};
    resx 8

  }
  bb_22 (preds = {bb_21 }, succs = {bb_24 })
  {
  <L8>:
    goto <bb 24> (<L2>);

  }
  bb_23 (preds = {bb_20 }, succs = {bb_24 })
  {
  <L7>:
    pretmp_84 = &this_2(D)->_out_req;

  }
  bb_24 (preds = {bb_22 bb_23 }, succs = {bb_25 })
  {
    # .MEM_1 = PHI <.MEM_26(22), .MEM_27(23)>
    # prephitmp_85 = PHI <_22(22), pretmp_84(23)>
  <L2>:
    # .MEM_29 = VDEF <.MEM_1>
    std::vector<std::map<int, Allocator::sRequest> >::~vector (prephitmp_85);
    resx 5

  }
  bb_25 (preds = {bb_24 }, succs = {bb_26 })
  {
  <L3>:
    # .MEM_30 = VDEF <.MEM_29>
    std::vector<std::map<int, Allocator::sRequest> >::~vector (_17);
    resx 4

  }
  bb_26 (preds = {bb_25 }, succs = {bb_27 })
  {
  <L4>:
    # DEBUG D#813 => &this_2(D)->_out_occ
    # DEBUG this => D#813
    _25 = &MEM[(struct set *)this_2(D) + 208B]._M_t;
    # DEBUG this => _25
    # VUSE <.MEM_30>
    _36 = MEM[(struct _Rb_tree_node_base * *)this_2(D) + 224B];
    # DEBUG D#90 => _25
    # DEBUG this => D#90
    # .MEM_95 = VDEF <.MEM_30>
    std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase (_25, _36);
    # DEBUG D#400 => &MEM[(struct _Rb_tree *)_25]._M_impl
    # DEBUG this => D#400
    # DEBUG this => D#400
    # DEBUG this => D#400
    # .MEM_100 = VDEF <.MEM_95>
    MEM[(struct  &)this_2(D) + 208] ={v} {CLOBBER};
    resx 3

  }
  bb_27 (preds = {bb_26 }, succs = {bb_28 })
  {
  <L5>:
    # DEBUG D#812 => &this_2(D)->_in_occ
    # DEBUG this => D#812
    _31 = &MEM[(struct set *)this_2(D) + 160B]._M_t;
    # DEBUG this => _31
    # VUSE <.MEM_100>
    _37 = MEM[(struct _Rb_tree_node_base * *)this_2(D) + 176B];
    # DEBUG D#90 => _31
    # DEBUG this => D#90
    # .MEM_101 = VDEF <.MEM_100>
    std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase (_31, _37);
    # DEBUG D#400 => &MEM[(struct _Rb_tree *)_31]._M_impl
    # DEBUG this => D#400
    # DEBUG this => D#400
    # DEBUG this => D#400
    # .MEM_106 = VDEF <.MEM_101>
    MEM[(struct  &)this_2(D) + 160] ={v} {CLOBBER};
    resx 2

  }
  bb_28 (preds = {bb_27 }, succs = {})
  {
  <L6>:
    # .MEM_33 = VDEF <.MEM_106>
    Allocator::~Allocator (_3);
    resx 1

  }
  loop_3 (header = 11, latch = 13, niter = )
  {
    bb_11 (preds = {bb_10 bb_13 }, succs = {bb_12 bb_14 })
    {
      <bb 11>:
      # __pos_118 = PHI <__pos_133(10), __pos_137(13)>
      # .MEM_123 = PHI <.MEM_76(10), .MEM_161(13)>
      # DEBUG __first => __pos_118
      # DEBUG __r => __pos_118
      # DEBUG __pointer => NULL
      # DEBUG this => NULL
      _135 = &__pos_118->_M_t;
      # DEBUG this => _135
      # VUSE <.MEM_123>
      __x_136 = MEM[(struct _Rb_tree_node_base * *)__pos_118 + 16B];
      # DEBUG D#91 => _135
      # DEBUG this => D#91
      # DEBUG this => _135
      # DEBUG __x => __x_136
      # DEBUG __x => __x_136
      if (__x_136 == 0B)
        goto <bb 12>;
      else
        goto <bb 14>;

    }
    bb_12 (preds = {bb_11 bb_30 }, succs = {bb_17 bb_13 })
    {
      <bb 12>:
      # .MEM_94 = PHI <.MEM_123(11), .MEM_14(30)>
      # DEBUG D#549 => &MEM[(struct _Rb_tree *)_135]._M_impl
      # DEBUG this => D#549
      # DEBUG this => D#549
      # DEBUG this => D#549
      # .MEM_161 = VDEF <.MEM_94>
      MEM[(struct  &)__pos_118] ={v} {CLOBBER};
      __pos_137 = __pos_118 + 48;
      # DEBUG __first => __pos_137
      # DEBUG __first => __pos_137
      if (_125 == __pos_137)
        goto <bb 17>;
      else
        goto <bb 13>;

    }
    bb_13 (preds = {bb_12 }, succs = {bb_11 })
    {
      <bb 13>:
      goto <bb 11>;

    }
    bb_14 (preds = {bb_11 }, succs = {bb_15 })
    {
      <bb 14>:

    }
    bb_30 (preds = {bb_15 }, succs = {bb_12 })
    {
      <bb 30>:
      # .MEM_14 = PHI <.MEM_156(15)>
      goto <bb 12>;

    }
    loop_4 (header = 15, latch = 16, niter = )
    {
      bb_15 (preds = {bb_14 bb_16 }, succs = {bb_30 bb_16 })
      {
        <bb 15>:
        # __x_18 = PHI <__x_136(14), __x_139(16)>
        # .MEM_116 = PHI <.MEM_123(14), .MEM_156(16)>
        # DEBUG __x => __x_18
        # VUSE <.MEM_116>
        _138 = MEM[(struct _Rb_tree_node_base * *)__x_18 + 24B];
        # DEBUG D#107 => __x_18
        # DEBUG __x => D#107
        # .MEM_155 = VDEF <.MEM_116>
        std::_Rb_tree<int, std::pair<const int, Allocator::sRequest>, std::_Select1st<std::pair<const int, Allocator::sRequest> >, std::less<int>, std::allocator<std::pair<const int, Allocator::sRequest> > >::_M_erase (_135, _138);
        # VUSE <.MEM_155>
        __x_139 = MEM[(struct _Rb_tree_node_base * *)__x_18 + 16B];
        # DEBUG D#108 => __x_18
        # DEBUG __x => D#108
        # DEBUG __y => NULL
        # DEBUG D#548 => _135
        # DEBUG __p => __x_18
        # DEBUG this => D#548
        # DEBUG D#547 => D#548
        # DEBUG D#546 => D#548
        # DEBUG D#545 => D#548
        # DEBUG D#543 => D#545
        # DEBUG D#544 => __x_18
        # DEBUG this => D#543
        # DEBUG __p => D#544
        # DEBUG D#542 => D#543
        # DEBUG D#541 => D#544
        # DEBUG D#540 => D#544
        # DEBUG this => D#540
        # DEBUG D#539 => &D#541->_M_value_field
        # DEBUG __r => D#539
        # DEBUG D#538 => D#542
        # DEBUG this => D#538
        # DEBUG D#537 => D#538
        # DEBUG this => D#537
        # DEBUG this => NULL
        # DEBUG D.57746 => NULL
        # DEBUG this => NULL
        # DEBUG D#330 => D#539
        # DEBUG this => D#329
        # DEBUG __p => D#330
        # DEBUG this => NULL
        # DEBUG this => NULL
        # DEBUG this => D#546
        # DEBUG __p => __x_18
        # DEBUG this => D#547
        # DEBUG D#407 => 1
        # DEBUG __p => __x_18
        # DEBUG __a => D#406
        # DEBUG __n => D#407
        # DEBUG D#405 => D#407
        # DEBUG D#404 => D#406
        # DEBUG D#402 => D#404
        # DEBUG D#403 => D#405
        # DEBUG __p => __x_18
        # DEBUG this => D#402
        # DEBUG D.67535 => D#403
        # .MEM_156 = VDEF <.MEM_155>
        operator delete (__x_18);
        # DEBUG __x => __x_139
        # DEBUG __x => __x_139
        if (__x_139 == 0B)
          goto <bb 30>;
        else
          goto <bb 16>;

      }
      bb_16 (preds = {bb_15 }, succs = {bb_15 })
      {
        <bb 16>:
        goto <bb 15>;

      }
    }
  }
}

Pass statistics:
----------------

SparseAllocator::SparseAllocator(Module*, const string&, int, int) (struct SparseAllocatorD.36303 * const thisD.37969, struct ModuleD.29751 * parentD.37970, const struct stringD.2845 & nameD.37971, intD.9 inputsD.37972, intD.9 outputsD.37973)
Eh tree:
   1 cleanup land:{1,<L6>}
     2 cleanup land:{2,<L5>}
       3 cleanup land:{3,<L4>}
         4 cleanup land:{4,<L3>}
           5 cleanup land:{8,<L7>},{5,<L8>}
             8 cleanup land:{7,<L1>}
             6 cleanup land:{6,<L0>}
{
  struct _Rb_tree_nodeD.41466 * __xD.67525;
  struct iteratorD.37461 __positionD.67520;
  struct mapD.37148 * __posD.67503;
  struct _Rb_tree_nodeD.41466 * __xD.67487;
  struct iteratorD.37461 __positionD.67482;
  struct mapD.37148 * __posD.67465;
  struct value_typeD.37456 D.42330;
  struct value_typeD.37456 D.42329;
  struct AllocatorD.34627 * _3;
  struct _Rb_tree_node_baseD.24800 * _11;
  struct _Rb_tree_node_baseD.24800 * _12;
  intD.9 _15;
  long unsigned intD.14 _16;
  struct vectorD.37150 * _17;
  intD.9 _20;
  long unsigned intD.14 _21;
  struct vectorD.37150 * _22;
  struct _Rep_typeD.36315 * _25;
  struct _Rep_typeD.36315 * _31;
  struct _Rb_tree_node_baseD.24800 * _34;
  struct _Rb_tree_node_baseD.24800 * _35;
  struct _Rb_tree_node_baseD.24800 * _36;
  struct _Rb_tree_node_baseD.24800 * _37;
  struct vectorD.37150 * pretmp_84;
  struct vectorD.37150 * prephitmp_85;
  struct _Rb_tree_node_baseD.24800 * pretmp_86;
  struct _Rb_tree_node_baseD.24800 * prephitmp_87;
  struct _Rb_tree_node_baseD.24800 * pretmp_88;
  struct _Rb_tree_node_baseD.24800 * prephitmp_91;
  struct _Rb_tree_node_baseD.24800 * pretmp_92;
  struct _Rb_tree_node_baseD.24800 * prephitmp_93;
  struct mapD.37148 * const _124;
  struct mapD.37148 * const _125;
  long intD.12 _126;
  long intD.12 _127;
  long intD.12 _128;
  long intD.12 _129;
  size_typeD.37469 _130;
  long unsigned intD.14 _131;
  long unsigned intD.14 _132;
  struct _Rep_typeD.41460 * _135;
  struct _Rb_tree_node_baseD.24800 * _138;

;;   basic block 2, loop depth 0, count 0, freq 184, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  _3 = &this_2(D)->D.37974;
  # .MEM_9 = VDEF <.MEM_4(D)>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZN9AllocatorC2EP6ModuleRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiiD.35464 (_3, parent_5(D), name_6(D), inputs_7(D), outputs_8(D));
  # .MEM_10 = VDEF <.MEM_9>
  this_2(D)->D.37974.D.35470._vptr.ModuleD.30546 = &MEM[(voidD.45 *)&_ZTV15SparseAllocatorD.37980 + 16B];
  # DEBUG D#817ptD.0 => &this_2(D)->_in_occD.37144
  # DEBUG thisD.62197 => D#817ptD.0
  # DEBUG D#305ptD.0 => &D#817ptD.0->_M_tD.36318
  # DEBUG thisD.62198 => D#305ptD.0
  # DEBUG D#304ptD.0 => &MEM[(struct _Rb_treeD.36317 *)D#305ptD.0]._M_implD.36395
  # DEBUG thisD.62199 => D#304ptD.0
  # DEBUG thisD.54084 => D#304ptD.0
  # DEBUG thisD.54081 => D#304ptD.0
  # .MEM_32 = VDEF <.MEM_10>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 160B]._M_headerD.36561._M_colorD.24804 = 0;
  # .MEM_38 = VDEF <.MEM_32>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 160B]._M_headerD.36561._M_parentD.24805 = 0B;
  # .MEM_41 = VDEF <.MEM_38>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 160B]._M_node_countD.36562 = 0;
  # DEBUG thisD.62200 => D#304ptD.0
  # PT = nonlocal 
  _11 = &MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 160B]._M_headerD.36561;
  # .MEM_42 = VDEF <.MEM_41>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 160B]._M_headerD.36561._M_leftD.24806 = _11;
  # .MEM_43 = VDEF <.MEM_42>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 160B]._M_headerD.36561._M_rightD.24807 = _11;
  # DEBUG D#816ptD.0 => &this_2(D)->_out_occD.37145
  # DEBUG thisD.62193 => D#816ptD.0
  # DEBUG D#305ptD.0 => &D#816ptD.0->_M_tD.36318
  # DEBUG thisD.62194 => D#305ptD.0
  # DEBUG D#304ptD.0 => &MEM[(struct _Rb_treeD.36317 *)D#305ptD.0]._M_implD.36395
  # DEBUG thisD.62195 => D#304ptD.0
  # DEBUG thisD.54084 => D#304ptD.0
  # DEBUG thisD.54081 => D#304ptD.0
  # .MEM_44 = VDEF <.MEM_43>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 208B]._M_headerD.36561._M_colorD.24804 = 0;
  # .MEM_45 = VDEF <.MEM_44>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 208B]._M_headerD.36561._M_parentD.24805 = 0B;
  # .MEM_48 = VDEF <.MEM_45>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 208B]._M_node_countD.36562 = 0;
  # DEBUG thisD.62196 => D#304ptD.0
  # PT = nonlocal 
  _12 = &MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 208B]._M_headerD.36561;
  # .MEM_49 = VDEF <.MEM_48>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 208B]._M_headerD.36561._M_leftD.24806 = _12;
  # .MEM_50 = VDEF <.MEM_49>
  MEM[(struct _Rb_tree_implD.36407 *)this_2(D) + 208B]._M_headerD.36561._M_rightD.24807 = _12;
  # DEBUG D#815ptD.0 => &this_2(D)->_in_reqD.37895
  # DEBUG thisD.62190 => D#815ptD.0
  # DEBUG D#309ptD.0 => &D#815ptD.0->D.37893
  # DEBUG thisD.62191 => D#309ptD.0
  # DEBUG D#308ptD.0 => &D#309ptD.0->_M_implD.37384
  # DEBUG thisD.62192 => D#308ptD.0
  # DEBUG thisD.54105 => D#308ptD.0
  # DEBUG thisD.54103 => D#308ptD.0
  # .MEM_51 = VDEF <.MEM_50>
  MEM[(struct _Vector_implD.37361 *)this_2(D) + 256B]._M_startD.37386 = 0B;
  # .MEM_52 = VDEF <.MEM_51>
  MEM[(struct _Vector_implD.37361 *)this_2(D) + 256B]._M_finishD.37387 = 0B;
  # .MEM_53 = VDEF <.MEM_52>
  MEM[(struct _Vector_implD.37361 *)this_2(D) + 256B]._M_end_of_storageD.37388 = 0B;
  # DEBUG D#814ptD.0 => &this_2(D)->_out_reqD.37896
  # DEBUG thisD.62187 => D#814ptD.0
  # DEBUG D#309ptD.0 => &D#814ptD.0->D.37893
  # DEBUG thisD.62188 => D#309ptD.0
  # DEBUG D#308ptD.0 => &D#309ptD.0->_M_implD.37384
  # DEBUG thisD.62189 => D#308ptD.0
  # DEBUG thisD.54105 => D#308ptD.0
  # DEBUG thisD.54103 => D#308ptD.0
  # .MEM_54 = VDEF <.MEM_53>
  MEM[(struct _Vector_implD.37361 *)this_2(D) + 280B]._M_startD.37386 = 0B;
  # .MEM_55 = VDEF <.MEM_54>
  MEM[(struct _Vector_implD.37361 *)this_2(D) + 280B]._M_finishD.37387 = 0B;
  # .MEM_56 = VDEF <.MEM_55>
  MEM[(struct _Vector_implD.37361 *)this_2(D) + 280B]._M_end_of_storageD.37388 = 0B;
  # DEBUG thisD.62183 => &D.42329
  # DEBUG D#328ptD.0 => &D.42329._M_tD.41463
  # DEBUG thisD.62184 => D#328ptD.0
  # DEBUG D#327ptD.0 => &MEM[(struct _Rb_treeD.41462 *)D#328ptD.0]._M_implD.41540
  # DEBUG thisD.62185 => D#327ptD.0
  # DEBUG thisD.54177 => D#327ptD.0
  # DEBUG thisD.54174 => D#327ptD.0
  # .MEM_57 = VDEF <.MEM_56>
  MEM[(struct _Rb_tree_implD.41541 *)&D.42329]._M_headerD.41695._M_colorD.24804 = 0;
  # .MEM_58 = VDEF <.MEM_57>
  MEM[(struct _Rb_tree_implD.41541 *)&D.42329]._M_headerD.41695._M_parentD.24805 = 0B;
  # .MEM_61 = VDEF <.MEM_58>
  MEM[(struct _Rb_tree_implD.41541 *)&D.42329]._M_node_countD.41696 = 0;
  # DEBUG thisD.62186 => D#327ptD.0
  # .MEM_62 = VDEF <.MEM_61>
  MEM[(struct _Rb_tree_implD.41541 *)&D.42329]._M_headerD.41695._M_leftD.24806 = &MEM[(struct _Rb_tree_implD.41541 *)&D.42329]._M_headerD.41695;
  # .MEM_63 = VDEF <.MEM_62>
  MEM[(struct _Rb_tree_implD.41541 *)&D.42329]._M_headerD.41695._M_rightD.24807 = &MEM[(struct _Rb_tree_implD.41541 *)&D.42329]._M_headerD.41695;
  # VUSE <.MEM_63>
  _15 = this_2(D)->D.37974._inputsD.34629;
  # RANGE ~[2147483648, 18446744071562067967]
  _16 = (long unsigned intD.14) _15;
  # PT = nonlocal 
  _17 = &this_2(D)->_in_reqD.37895;
  # DEBUG thisD.67461 => _17
  # DEBUG __new_sizeD.67462 => _16
  # DEBUG __xD.67463 => &D.42329
  # DEBUG D#92ptD.0 => _17
  # DEBUG D#92ptD.0 => _17
  # DEBUG thisD.67484 => D#92ptD.0
  # DEBUG thisD.67485 => D#92ptD.0
  if (_16 != 0)
    goto <bb 3>;
  else
    goto <bb 5>;
;;    succ:       3 [20.7%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [79.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 38, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [20.7%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#92ptD.0 => _17
  # DEBUG D#92ptD.0 => _17
  # DEBUG thisD.62155 => D#92ptD.0
  # DEBUG thisD.62154 => D#92ptD.0
  # DEBUG thisD.62148 => _17
  # DEBUG D#111ptD.0 => &_17->D.37893._M_implD.37384._M_finishD.37387
  # DEBUG thisD.62150 => NULL
  # DEBUG __iD.62149 => D#111ptD.0
  # DEBUG thisD.67483 => _17
  # .MEM_153 = VDEF <.MEM_63>
  MEM[(struct __normal_iteratorD.37462 *)&__positionD.67482] = 0B;
  # DEBUG __nD.67481 => _16
  # DEBUG __xD.67480 => &D.42329
  [LP 6] # .MEM_154 = VDEF <.MEM_153>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZNSt6vectorISt3mapIiN9Allocator8sRequestESt4lessIiESaISt4pairIKiS2_EEESaIS9_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS9_SB_EEmRKS9_D.37816 (_17, __positionD.67482, _16, &D.42329);
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                20 (EH,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 38, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_154>
  pretmp_86 = MEM[(struct _Rb_tree_node_baseD.24800 * *)&D.42329 + 16B];
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 184, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       2 [79.3%]  (FALSE_VALUE,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_141 = PHI <.MEM_63(2), .MEM_154(4)>
  # PT = nonlocal escaped null 
  # prephitmp_87 = PHI <0B(2), pretmp_86(4)>
  # DEBUG thisD.62205 => &D.42329
  # DEBUG thisD.62206 => &D.42329._M_tD.41463
  # DEBUG D#91ptD.0 => &D.42329._M_tD.41463
  # DEBUG thisD.57821 => D#91ptD.0
  # .MEM_64 = VDEF <.MEM_141>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (&D.42329._M_tD.41463, prephitmp_87);
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)&D.42329]._M_implD.41540
  # DEBUG thisD.62207 => D#549ptD.0
  # DEBUG thisD.62208 => D#549ptD.0
  # DEBUG thisD.62209 => D#549ptD.0
  # .MEM_19 = VDEF <.MEM_64>
  D.42329 ={v} {CLOBBER};
  # DEBUG thisD.62201 => &D.42330
  # DEBUG D#328ptD.0 => &D.42330._M_tD.41463
  # DEBUG thisD.62202 => D#328ptD.0
  # DEBUG D#327ptD.0 => &MEM[(struct _Rb_treeD.41462 *)D#328ptD.0]._M_implD.41540
  # DEBUG thisD.62203 => D#327ptD.0
  # DEBUG thisD.54177 => D#327ptD.0
  # DEBUG thisD.54174 => D#327ptD.0
  # .MEM_70 = VDEF <.MEM_19>
  MEM[(struct _Rb_tree_implD.41541 *)&D.42330]._M_headerD.41695._M_colorD.24804 = 0;
  # .MEM_71 = VDEF <.MEM_70>
  MEM[(struct _Rb_tree_implD.41541 *)&D.42330]._M_headerD.41695._M_parentD.24805 = 0B;
  # .MEM_74 = VDEF <.MEM_71>
  MEM[(struct _Rb_tree_implD.41541 *)&D.42330]._M_node_countD.41696 = 0;
  # DEBUG thisD.62204 => D#327ptD.0
  # .MEM_75 = VDEF <.MEM_74>
  MEM[(struct _Rb_tree_implD.41541 *)&D.42330]._M_headerD.41695._M_leftD.24806 = &MEM[(struct _Rb_tree_implD.41541 *)&D.42330]._M_headerD.41695;
  # .MEM_76 = VDEF <.MEM_75>
  MEM[(struct _Rb_tree_implD.41541 *)&D.42330]._M_headerD.41695._M_rightD.24807 = &MEM[(struct _Rb_tree_implD.41541 *)&D.42330]._M_headerD.41695;
  # VUSE <.MEM_76>
  _20 = this_2(D)->D.37974._outputsD.34630;
  # RANGE ~[2147483648, 18446744071562067967]
  _21 = (long unsigned intD.14) _20;
  # DEBUG D#1183ptD.0 => &this_2(D)->_out_reqD.37896
  # DEBUG thisD.67499 => D#1183ptD.0
  # DEBUG __new_sizeD.67500 => _21
  # DEBUG __xD.67501 => &D.42330
  # VUSE <.MEM_76>
  # PT = nonlocal escaped 
  _124 = MEM[(struct mapD.37148 * *)this_2(D) + 280B];
  # DEBUG D#92ptD.0 => D#1183ptD.0
  # VUSE <.MEM_76>
  # PT = nonlocal escaped 
  _125 = MEM[(struct mapD.37148 * *)this_2(D) + 288B];
  # DEBUG D#92ptD.0 => D#1183ptD.0
  # DEBUG thisD.67522 => D#92ptD.0
  # DEBUG thisD.67523 => D#92ptD.0
  _126 = (long intD.12) _125;
  _127 = (long intD.12) _124;
  _128 = _126 - _127;
  # RANGE [-192153584101141162, 192153584101141162]
  _129 = _128 /[ex] 48;
  # RANGE ~[192153584101141163, 18254590489608410453]
  _130 = (size_typeD.37469) _129;
  if (_21 > _130)
    goto <bb 6>;
  else
    goto <bb 8>;
;;    succ:       6 [20.7%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [79.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 38, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [20.7%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal 
  _22 = &this_2(D)->_out_reqD.37896;
  # DEBUG D#92ptD.0 => D#1183ptD.0
  # DEBUG D#92ptD.0 => D#1183ptD.0
  # DEBUG thisD.62155 => D#92ptD.0
  # DEBUG thisD.62154 => D#92ptD.0
  # RANGE [1, 18446744073709551615]
  _131 = _21 - _130;
  # DEBUG thisD.62148 => D#1183ptD.0
  # DEBUG D#111ptD.0 => &D#1183ptD.0->D.37893._M_implD.37384._M_finishD.37387
  # DEBUG thisD.62150 => NULL
  # DEBUG __iD.62149 => D#111ptD.0
  # DEBUG thisD.67521 => D#1183ptD.0
  # .MEM_163 = VDEF <.MEM_76>
  MEM[(struct __normal_iteratorD.37462 *)&__positionD.67520] = _125;
  # DEBUG __nD.67519 => _131
  # DEBUG __xD.67518 => &D.42330
  [LP 7] # .MEM_164 = VDEF <.MEM_163>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZNSt6vectorISt3mapIiN9Allocator8sRequestESt4lessIiESaISt4pairIKiS2_EEESaIS9_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS9_SB_EEmRKS9_D.37816 (_22, __positionD.67520, _131, &D.42330);
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                21 (EH,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 38, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_164>
  pretmp_88 = MEM[(struct _Rb_tree_node_baseD.24800 * *)&D.42330 + 16B];
  goto <bb 19>;
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 146, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       5 [79.3%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#92ptD.0 => D#1183ptD.0
  # DEBUG D#92ptD.0 => D#1183ptD.0
  # DEBUG thisD.62160 => D#92ptD.0
  # DEBUG thisD.62159 => D#92ptD.0
  if (_21 < _130)
    goto <bb 9>;
  else
    goto <bb 19>;
;;    succ:       9 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 89, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 18446744073709551615] NONZERO 18446744073709551600
  _132 = _21 * 48;
  # PT = nonlocal escaped 
  __pos_133 = _124 + _132;
  # DEBUG D#553ptD.0 => D#1183ptD.0
  # DEBUG __posD.67503 => __pos_133
  # DEBUG D#552ptD.0 => D#553ptD.0
  # DEBUG thisD.67502 => D#552ptD.0
  # DEBUG D#551ptD.0 => &D#552ptD.0->D.37893
  # DEBUG thisD.57904 => D#551ptD.0
  # DEBUG __firstD.67506 => __pos_133
  # DEBUG __lastD.67505 => _125
  # DEBUG __firstD.67511 => __pos_133
  if (_125 == __pos_133)
    goto <bb 18>;
  else
    goto <bb 10>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 81, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       9 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __pos_118 = PHI <__pos_133(10), __pos_137(13)>
  # .MEM_123 = PHI <.MEM_76(10), .MEM_161(13)>
  # DEBUG __firstD.67511 => __pos_118
  # DEBUG __rD.57841 => __pos_118
  # DEBUG __pointerD.67512 => NULL
  # DEBUG thisD.67513 => NULL
  # PT = nonlocal escaped 
  _135 = &__pos_118->_M_tD.41463;
  # DEBUG thisD.67514 => _135
  # VUSE <.MEM_123>
  # PT = nonlocal escaped 
  __x_136 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__pos_118 + 16B];
  # DEBUG D#91ptD.0 => _135
  # DEBUG thisD.57821 => D#91ptD.0
  # DEBUG thisD.67524 => _135
  # DEBUG __xD.67525 => __x_136
  # DEBUG __xD.67525 => __x_136
  if (__x_136 == 0B)
    goto <bb 12>;
  else
    goto <bb 14>;
;;    succ:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 900, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU)
  # .MEM_94 = PHI <.MEM_123(11), .MEM_14(30)>
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)_135]._M_implD.41540
  # DEBUG thisD.67515 => D#549ptD.0
  # DEBUG thisD.67516 => D#549ptD.0
  # DEBUG thisD.67517 => D#549ptD.0
  # .MEM_161 = VDEF <.MEM_94>
  MEM[(struct  &)__pos_118] ={v} {CLOBBER};
  # PT = nonlocal escaped 
  __pos_137 = __pos_118 + 48;
  # DEBUG __firstD.67511 => __pos_137
  # DEBUG __firstD.67511 => __pos_137
  if (_125 == __pos_137)
    goto <bb 17>;
  else
    goto <bb 13>;
;;    succ:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       11 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 2, count 0, freq 9100, maybe hot
;;    prev block 14, next block 30, flags: (NEW)
;;    pred:       14 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                16 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_18 = PHI <__x_136(14), __x_139(16)>
  # .MEM_116 = PHI <.MEM_123(14), .MEM_156(16)>
  # DEBUG __xD.67525 => __x_18
  # VUSE <.MEM_116>
  # PT = nonlocal escaped 
  _138 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_18 + 24B];
  # DEBUG D#107ptD.0 => __x_18
  # DEBUG __xD.57814 => D#107ptD.0
  # .MEM_155 = VDEF <.MEM_116>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (_135, _138);
  # VUSE <.MEM_155>
  # PT = nonlocal escaped 
  __x_139 = MEM[(struct _Rb_tree_node_baseD.24800 * *)__x_18 + 16B];
  # DEBUG D#108ptD.0 => __x_18
  # DEBUG __xD.57811 => D#108ptD.0
  # DEBUG __yD.67526 => NULL
  # DEBUG D#548ptD.0 => _135
  # DEBUG __pD.67528 => __x_18
  # DEBUG thisD.67527 => D#548ptD.0
  # DEBUG D#547ptD.0 => D#548ptD.0
  # DEBUG D#546ptD.0 => D#548ptD.0
  # DEBUG D#545ptD.0 => D#548ptD.0
  # DEBUG D#543ptD.0 => D#545ptD.0
  # DEBUG D#544ptD.0 => __x_18
  # DEBUG thisD.57784 => D#543ptD.0
  # DEBUG __pD.57783 => D#544ptD.0
  # DEBUG D#542ptD.0 => D#543ptD.0
  # DEBUG D#541ptD.0 => D#544ptD.0
  # DEBUG D#540ptD.0 => D#544ptD.0
  # DEBUG thisD.57769 => D#540ptD.0
  # DEBUG D#539ptD.0 => &D#541ptD.0->_M_value_fieldD.43957
  # DEBUG __rD.53249 => D#539ptD.0
  # DEBUG D#538ptD.0 => D#542ptD.0
  # DEBUG thisD.57761 => D#538ptD.0
  # DEBUG D#537ptD.0 => D#538ptD.0
  # DEBUG thisD.57753 => D#537ptD.0
  # DEBUG thisD.57745 => NULL
  # DEBUG D.57746 => NULL
  # DEBUG thisD.57743 => NULL
  # DEBUG D#330ptD.0 => D#539ptD.0
  # DEBUG thisD.57760 => D#329ptD.0
  # DEBUG __pD.57759 => D#330ptD.0
  # DEBUG thisD.57770 => NULL
  # DEBUG thisD.57758 => NULL
  # DEBUG thisD.67530 => D#546ptD.0
  # DEBUG __pD.67529 => __x_18
  # DEBUG thisD.55061 => D#547ptD.0
  # DEBUG D#407ptD.0 => 1
  # DEBUG __pD.67533 => __x_18
  # DEBUG __aD.67531 => D#406ptD.0
  # DEBUG __nD.67532 => D#407ptD.0
  # DEBUG D#405ptD.0 => D#407ptD.0
  # DEBUG D#404ptD.0 => D#406ptD.0
  # DEBUG D#402ptD.0 => D#404ptD.0
  # DEBUG D#403ptD.0 => D#405ptD.0
  # DEBUG __pD.67536 => __x_18
  # DEBUG thisD.67534 => D#402ptD.0
  # DEBUG D.67535 => D#403ptD.0
  # .MEM_156 = VDEF <.MEM_155>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZdlPvD.2766 (__x_18);
  # DEBUG __xD.67525 => __x_139
  # DEBUG __xD.67525 => __x_139
  if (__x_139 == 0B)
    goto <bb 30>;
  else
    goto <bb 16>;
;;    succ:       30 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 1, count 0, freq 819, maybe hot
;;    prev block 15, next block 16, flags: (NEW)
;;    pred:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_14 = PHI <.MEM_156(15)>
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU)

;;   basic block 16, loop depth 2, count 0, freq 8281, maybe hot
;;    prev block 30, next block 17, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 81, maybe hot
;;    prev block 16, next block 29, flags: (NEW)
;;    pred:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       29 [100.0%]  (FALLTHRU)

;;   basic block 29, loop depth 0, count 0, freq 81, maybe hot
;;    prev block 17, next block 18, flags: (NEW)
;;    pred:       17 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_161>
  pretmp_92 = MEM[(struct _Rb_tree_node_baseD.24800 * *)&D.42330 + 16B];
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 89, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_152 = PHI <.MEM_161(29), .MEM_76(9)>
  # prephitmp_93 = PHI <pretmp_92(29), 0B(9)>
;;    succ:       31 [100.0%]  (FALLTHRU)

;;   basic block 31, loop depth 0, count 0, freq 89, maybe hot
;;    prev block 18, next block 19, flags: (NEW)
;;    pred:       18 [100.0%]  (FALLTHRU)
  # .MEM_162 = VDEF <.MEM_152>
  MEM[(struct mapD.37148 * *)this_2(D) + 288B] = __pos_133;
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 184, maybe hot
;;    prev block 31, next block 20, flags: (NEW, REACHABLE)
;;    pred:       8 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_144 = PHI <.MEM_76(8), .MEM_164(7), .MEM_162(31)>
  # PT = nonlocal escaped null 
  # prephitmp_91 = PHI <0B(8), pretmp_88(7), prephitmp_93(31)>
  # DEBUG thisD.62210 => &D.42330
  # DEBUG thisD.62211 => &D.42330._M_tD.41463
  # DEBUG D#91ptD.0 => &D.42330._M_tD.41463
  # DEBUG thisD.57821 => D#91ptD.0
  # .MEM_77 = VDEF <.MEM_144>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (&D.42330._M_tD.41463, prephitmp_91);
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)&D.42330]._M_implD.41540
  # DEBUG thisD.62212 => D#549ptD.0
  # DEBUG thisD.62213 => D#549ptD.0
  # DEBUG thisD.62214 => D#549ptD.0
  # .MEM_24 = VDEF <.MEM_77>
  D.42330 ={v} {CLOBBER};
  # VUSE <.MEM_24>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       3 (EH,EXECUTABLE)
<L0>: [LP 6]
  # DEBUG thisD.62215 => &D.42329
  # DEBUG thisD.62216 => &D.42329._M_tD.41463
  # VUSE <.MEM_154>
  # PT = nonlocal escaped null 
  _34 = MEM[(struct _Rb_tree_node_baseD.24800 * *)&D.42329 + 16B];
  # DEBUG D#91ptD.0 => &D.42329._M_tD.41463
  # DEBUG thisD.57821 => D#91ptD.0
  # .MEM_89 = VDEF <.MEM_154>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (&D.42329._M_tD.41463, _34);
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)&D.42329]._M_implD.41540
  # DEBUG thisD.62217 => D#549ptD.0
  # DEBUG thisD.62218 => D#549ptD.0
  # DEBUG thisD.62219 => D#549ptD.0
  # .MEM_27 = VDEF <.MEM_89>
  D.42329 ={v} {CLOBBER};
  [LP 8] resx 6
;;    succ:       23 (EH,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       6 (EH,EXECUTABLE)
<L1>: [LP 7]
  # DEBUG thisD.62220 => &D.42330
  # DEBUG thisD.62221 => &D.42330._M_tD.41463
  # VUSE <.MEM_164>
  # PT = nonlocal escaped null 
  _35 = MEM[(struct _Rb_tree_node_baseD.24800 * *)&D.42330 + 16B];
  # DEBUG D#91ptD.0 => &D.42330._M_tD.41463
  # DEBUG thisD.57821 => D#91ptD.0
  # .MEM_83 = VDEF <.MEM_164>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiSt4pairIKiN9Allocator8sRequestEESt10_Select1stIS4_ESt4lessIiESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_ED.41822 (&D.42330._M_tD.41463, _35);
  # DEBUG D#549ptD.0 => &MEM[(struct _Rb_treeD.41462 *)&D.42330]._M_implD.41540
  # DEBUG thisD.62222 => D#549ptD.0
  # DEBUG thisD.62223 => D#549ptD.0
  # DEBUG thisD.62224 => D#549ptD.0
  # .MEM_26 = VDEF <.MEM_83>
  D.42330 ={v} {CLOBBER};
  [LP 5] resx 8
;;    succ:       22 (EH,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 21, next block 23, flags: (NEW)
;;    pred:       21 (EH,EXECUTABLE)
<L8>: [LP 5]
  goto <bb 24> (<L2>);
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       20 (EH,EXECUTABLE)
<L7>: [LP 8]
  pretmp_84 = &this_2(D)->_out_reqD.37896;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_26(22), .MEM_27(23)>
  # PT = nonlocal 
  # prephitmp_85 = PHI <_22(22), pretmp_84(23)>
<L2>:
  # .MEM_29 = VDEF <.MEM_1>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZNSt6vectorISt3mapIiN9Allocator8sRequestESt4lessIiESaISt4pairIKiS2_EEESaIS9_EED1EvD.37887 (prephitmp_85);
  [LP 4] resx 5
;;    succ:       25 (EH,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       24 (EH,EXECUTABLE)
<L3>: [LP 4]
  # .MEM_30 = VDEF <.MEM_29>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZNSt6vectorISt3mapIiN9Allocator8sRequestESt4lessIiESaISt4pairIKiS2_EEESaIS9_EED1EvD.37887 (_17);
  [LP 3] resx 4
;;    succ:       26 (EH,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       25 (EH,EXECUTABLE)
<L4>: [LP 3]
  # DEBUG D#813ptD.0 => &this_2(D)->_out_occD.37145
  # DEBUG thisD.62225 => D#813ptD.0
  # PT = nonlocal 
  _25 = &MEM[(struct setD.36306 *)this_2(D) + 208B]._M_tD.36318;
  # DEBUG thisD.62226 => _25
  # VUSE <.MEM_30>
  # PT = nonlocal escaped 
  _36 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_2(D) + 224B];
  # DEBUG D#90ptD.0 => _25
  # DEBUG thisD.55012 => D#90ptD.0
  # .MEM_95 = VDEF <.MEM_30>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiED.36688 (_25, _36);
  # DEBUG D#400ptD.0 => &MEM[(struct _Rb_treeD.36317 *)_25]._M_implD.36395
  # DEBUG thisD.62227 => D#400ptD.0
  # DEBUG thisD.62228 => D#400ptD.0
  # DEBUG thisD.62229 => D#400ptD.0
  # .MEM_100 = VDEF <.MEM_95>
  MEM[(struct  &)this_2(D) + 208] ={v} {CLOBBER};
  [LP 2] resx 3
;;    succ:       27 (EH,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       26 (EH,EXECUTABLE)
<L5>: [LP 2]
  # DEBUG D#812ptD.0 => &this_2(D)->_in_occD.37144
  # DEBUG thisD.62230 => D#812ptD.0
  # PT = nonlocal 
  _31 = &MEM[(struct setD.36306 *)this_2(D) + 160B]._M_tD.36318;
  # DEBUG thisD.62231 => _31
  # VUSE <.MEM_100>
  # PT = nonlocal escaped 
  _37 = MEM[(struct _Rb_tree_node_baseD.24800 * *)this_2(D) + 176B];
  # DEBUG D#90ptD.0 => _31
  # DEBUG thisD.55012 => D#90ptD.0
  # .MEM_101 = VDEF <.MEM_100>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiED.36688 (_31, _37);
  # DEBUG D#400ptD.0 => &MEM[(struct _Rb_treeD.36317 *)_31]._M_implD.36395
  # DEBUG thisD.62232 => D#400ptD.0
  # DEBUG thisD.62233 => D#400ptD.0
  # DEBUG thisD.62234 => D#400ptD.0
  # .MEM_106 = VDEF <.MEM_101>
  MEM[(struct  &)this_2(D) + 160] ={v} {CLOBBER};
  [LP 1] resx 2
;;    succ:       28 (EH,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 27, next block 1, flags: (NEW, REACHABLE)
;;    pred:       27 (EH,EXECUTABLE)
<L6>: [LP 1]
  # .MEM_33 = VDEF <.MEM_106>
  # USE = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  # CLB = nonlocal null { D.37980 D.42329 D.42330 } (nonlocal, escaped)
  _ZN9AllocatorD2EvD.35455 (_3);
  resx 1
;;    succ:      

}


