
;; Function void qtree_nca(const Router*, const Flit*, int, OutputSet*, bool) (_Z9qtree_ncaPK6RouterPK4FlitiP9OutputSetb, funcdef_no=1964, decl_uid=45359, cgraph_uid=463, symbol_order=474)


Pass statistics:
----------------

void qtree_nca(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45354, const struct FlitD.29321 * fD.45355, intD.9 in_channelD.45356, struct OutputSetD.28230 * outputsD.45357, boolD.2757 injectD.45358)
{
  intD.9 iD.45368;
  intD.9 destD.45367;
  intD.9 posD.45366;
  intD.9 heightD.45365;
  intD.9 out_portD.45364;
  static const charD.10 _ZZ9qtree_ncaPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45363[66] = "void qtree_nca(const Router*, const Flit*, int, OutputSet*, bool)";
  intD.9 vcEndD.45362;
  intD.9 vcBeginD.45361;
  intD.9 gNumVCs.0_8;
  FlitTypeD.29324 _11;
  intD.9 _20;
  intD.9 _35;
  const intD.9 _40;
  const intD.9 _41;
  boolD.2757 _42;
  intD.9 gN.1_44;
  boolD.2757 _46;
  boolD.2757 _47;
  boolD.2757 _56;
  intD.9 pretmp_61;
  intD.9 prephitmp_62;
  intD.9 pretmp_63;

;;   basic block 2, loop depth 0, count 0, freq 2310, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG vcBeginD.45361 => 0
  # DEBUG D#148ptD.0 => gNumVCsD.42077
  # DEBUG vcEndD.45362 => D#148ptD.0 + -1
  # VUSE <.MEM_7(D)>
  _11 = f_10(D)->typeD.29330;
  if (_11 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 1155, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  vcBegin_12 = gReadReqBeginVCD.42078;
  # DEBUG vcBeginD.45361 => vcBegin_12
  # VUSE <.MEM_7(D)>
  vcEnd_13 = gReadReqEndVCD.42079;
  # DEBUG vcEndD.45362 => vcEnd_13
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 1155, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_11 == 2)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 323, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  vcBegin_14 = gWriteReqBeginVCD.42080;
  # DEBUG vcBeginD.45361 => vcBegin_14
  # VUSE <.MEM_7(D)>
  vcEnd_15 = gWriteReqEndVCD.42081;
  # DEBUG vcEndD.45362 => vcEnd_15
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 832, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_11 == 1)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 233, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  vcBegin_16 = gReadReplyBeginVCD.42082;
  # DEBUG vcBeginD.45361 => vcBegin_16
  # VUSE <.MEM_7(D)>
  vcEnd_17 = gReadReplyEndVCD.42083;
  # DEBUG vcEndD.45362 => vcEnd_17
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 599, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  gNumVCs.0_8 = gNumVCsD.42077;
  if (_11 == 3)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 431, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  vcEnd_9 = gNumVCs.0_8 + -1;
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 168, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  vcBegin_18 = gWriteReplyBeginVCD.42084;
  # DEBUG vcBeginD.45361 => vcBegin_18
  # VUSE <.MEM_7(D)>
  vcEnd_19 = gWriteReplyEndVCD.42085;
  # DEBUG vcEndD.45362 => vcEnd_19
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 2310, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # vcBegin_1 = PHI <vcBegin_12(3), vcBegin_14(5), vcBegin_16(7), 0(9), vcBegin_18(10)>
  # vcEnd_2 = PHI <vcEnd_13(3), vcEnd_15(5), vcEnd_17(7), vcEnd_9(9), vcEnd_19(10)>
  # DEBUG vcEndD.45362 => vcEnd_2
  # DEBUG vcBeginD.45361 => vcBegin_1
  # VUSE <.MEM_7(D)>
  _20 = f_10(D)->vcD.29331;
  _42 = vcEnd_2 < _20;
  _47 = vcBegin_1 > _20;
  _56 = _42 | _47;
  if (_56 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 1732, maybe hot
;;   Invalid sum of incoming frequencies 1155, should be 1732
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  _46 = _20 >= 0;
  if (inject_21(D) <= _46)
    goto <bb 13>;
  else
    goto <bb 23>;
;;    succ:       13 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 1
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_22 = VDEF <.MEM_7(D)>
  # USE = nonlocal null { D.45363 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45363 } (nonlocal, escaped)
  __assert_failD.9858 ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 92, &_ZZ9qtree_ncaPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45363);
;;    succ:      

;;   basic block 14, loop depth 0, count 0, freq 578, maybe hot
;;   Invalid sum of incoming frequencies 1155, should be 578
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (inject_21(D) != 0)
    goto <bb 23>;
  else
    goto <bb 15>;
;;    succ:       23 (TRUE_VALUE,EXECUTABLE)
;;                15 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 900, maybe hot
;;   Invalid sum of incoming frequencies 578, should be 900
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  _40 = MEM[(intD.9 *)r_23(D) + 96B];
  # DEBUG D#14ptD.0 => r_23(D)
  # DEBUG thisD.50834 => D#14ptD.0
  # .MEM_24 = VDEF <.MEM_7(D)>
  # USE = nonlocal null { D.45363 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45363 } (nonlocal, escaped)
  height_25 = _ZN5QTree12HeightFromIDEiD.44162 (_40);
  # DEBUG heightD.45365 => height_25
  # VUSE <.MEM_24>
  _41 = MEM[(intD.9 *)r_23(D) + 96B];
  # DEBUG D#14ptD.0 => r_23(D)
  # DEBUG thisD.50831 => D#14ptD.0
  # .MEM_26 = VDEF <.MEM_24>
  # USE = nonlocal null { D.45363 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45363 } (nonlocal, escaped)
  pos_27 = _ZN5QTree9PosFromIDEiD.44164 (_41);
  # DEBUG posD.45366 => pos_27
  # VUSE <.MEM_26>
  dest_28 = f_10(D)->destD.29342;
  # DEBUG destD.45367 => dest_28
  i_29 = height_25 + 1;
  # DEBUG iD.45368 => i_29
  # DEBUG iD.45368 => i_29
  # DEBUG destD.45367 => dest_28
  # VUSE <.MEM_26>
  gN.1_44 = gND.33727;
  if (i_29 >= gN.1_44)
    goto <bb 16>;
  else
    goto <bb 17>;
;;    succ:       16 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 81, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_26>
  pretmp_61 = gKD.33726;
  goto <bb 21>;
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_26>
  pretmp_63 = gKD.33726;
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 17, next block 19, flags: (NEW)
;;    pred:       17 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # dest_53 = PHI <dest_28(17), dest_32(19)>
  # i_49 = PHI <i_29(17), i_33(19)>
  # DEBUG iD.45368 => i_49
  # DEBUG destD.45367 => dest_53
  dest_32 = dest_53 / pretmp_63;
  # DEBUG destD.45367 => dest_32
  i_33 = i_49 + 1;
  # DEBUG iD.45368 => i_33
  # DEBUG iD.45368 => i_33
  # DEBUG destD.45367 => dest_32
  if (i_33 >= gN.1_44)
    goto <bb 20>;
  else
    goto <bb 19>;
;;    succ:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       18 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 18>;
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # dest_66 = PHI <dest_32(18)>
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                16 [100.0%]  (FALLTHRU,EXECUTABLE)
  # dest_43 = PHI <dest_66(20), dest_28(16)>
  # prephitmp_62 = PHI <pretmp_63(20), pretmp_61(16)>
  _35 = dest_43 / prephitmp_62;
  if (pos_27 == _35)
    goto <bb 22>;
  else
    goto <bb 23>;
;;    succ:       22 [37.8%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [62.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 340, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       21 [37.8%]  (TRUE_VALUE,EXECUTABLE)
  out_port_36 = dest_43 % prephitmp_62;
  # DEBUG out_portD.45364 => out_port_36
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 2309, maybe hot
;;   Invalid sum of incoming frequencies 2631, should be 2309
;;    prev block 22, next block 1, flags: (NEW, REACHABLE)
;;    pred:       14 (TRUE_VALUE,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                21 [62.2%]  (FALSE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # out_port_3 = PHI <-1(14), out_port_36(22), prephitmp_62(21), -1(12)>
  # .MEM_6 = PHI <.MEM_7(D)(14), .MEM_26(22), .MEM_26(21), .MEM_7(D)(12)>
  # DEBUG out_portD.45364 => out_port_3
  # .MEM_38 = VDEF <.MEM_6>
  # USE = nonlocal null { D.45363 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45363 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_37(D));
  # .MEM_39 = VDEF <.MEM_38>
  # USE = nonlocal null { D.45363 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45363 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_37(D), out_port_3, vcBegin_1, vcEnd_2, 0);
  # VUSE <.MEM_39>
  return;
;;    succ:       EXIT [100.0%] 

}


Creating dr for f_10(D)->type
analyze_innermost: success.
	base_address: f_10(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *f_10(D)
	Access function 0: 0
Creating dr for gReadReqBeginVC
analyze_innermost: success.
	base_address: &gReadReqBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReqBeginVC
Creating dr for gReadReqEndVC
analyze_innermost: success.
	base_address: &gReadReqEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReqEndVC
Creating dr for gWriteReqBeginVC
analyze_innermost: success.
	base_address: &gWriteReqBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReqBeginVC
Creating dr for gWriteReqEndVC
analyze_innermost: success.
	base_address: &gWriteReqEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReqEndVC
Creating dr for gReadReplyBeginVC
analyze_innermost: success.
	base_address: &gReadReplyBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReplyBeginVC
Creating dr for gReadReplyEndVC
analyze_innermost: success.
	base_address: &gReadReplyEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReplyEndVC
Creating dr for gNumVCs
analyze_innermost: success.
	base_address: &gNumVCs
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gNumVCs
Creating dr for gWriteReplyBeginVC
analyze_innermost: success.
	base_address: &gWriteReplyBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReplyBeginVC
Creating dr for gWriteReplyEndVC
analyze_innermost: success.
	base_address: &gWriteReplyEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReplyEndVC
Creating dr for f_10(D)->vc
analyze_innermost: success.
	base_address: f_10(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: *f_10(D)
	Access function 0: 32
Creating dr for MEM[(int *)r_23(D) + 96B]
analyze_innermost: success.
	base_address: r_23(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(int *)r_23(D) + 96B]
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Applying pattern match.pd:491, generic-match.c:3721
Analyzing # of iterations of loop 1
  exit condition [height_25 + 2, + , 1](no_overflow) < gN.1_44
  bounds on difference of bases: 0 ... 4294967293
Applying pattern match.pd:439, generic-match.c:3325
  result:
    # of iterations ((unsigned int) gN.1_44 - (unsigned int) height_25) + 4294967294, bounded by 4294967293
Applying pattern match.pd:491, generic-match.c:3721
Analyzing # of iterations of loop 1
  exit condition [height_25 + 2, + , 1](no_overflow) < gN.1_44
  bounds on difference of bases: 0 ... 4294967293
Applying pattern match.pd:439, generic-match.c:3325
  result:
    # of iterations ((unsigned int) gN.1_44 - (unsigned int) height_25) + 4294967294, bounded by 4294967293

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:5, LOOPS:1, CONDITIONS:1, STMTS:10)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:3, LOOPS:0, CONDITIONS:1, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:10, LOOPS:0, CONDITIONS:4, STMTS:26)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 1

SCoP statistics (BBS:3, LOOPS:1, CONDITIONS:1, STMTS:9)

SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Global statistics (BBS:28, LOOPS:1, CONDITIONS:10, STMTS:74)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
Creating dr for phi_out_of_ssa.442[0]
analyze_innermost: success.
	base_address: &phi_out_of_ssa.442
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: phi_out_of_ssa.442
	Access function 0: 0
Creating dr for phi_out_of_ssa.442[0]
analyze_innermost: success.
	base_address: &phi_out_of_ssa.442
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: phi_out_of_ssa.442
	Access function 0: 0
Creating dr for Close_Phi.443[0]
analyze_innermost: success.
	base_address: &Close_Phi.443
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: Close_Phi.443
	Access function 0: 0
Creating dr for Close_Phi.443[0]
analyze_innermost: success.
	base_address: &Close_Phi.443
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: Close_Phi.443
	Access function 0: 0

Updating SSA:
creating PHI node in block #18 for .MEM
creating PHI node in block #21 for .MEM
Registering new PHI nodes in block #0
Registering new PHI nodes in block #2
Updating SSA information for statement _11 = f_10(D)->type;
Registering new PHI nodes in block #3
Updating SSA information for statement vcBegin_12 = gReadReqBeginVC;
Updating SSA information for statement vcEnd_13 = gReadReqEndVC;
Registering new PHI nodes in block #4
Registering new PHI nodes in block #5
Updating SSA information for statement vcBegin_14 = gWriteReqBeginVC;
Updating SSA information for statement vcEnd_15 = gWriteReqEndVC;
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Updating SSA information for statement vcBegin_16 = gReadReplyBeginVC;
Updating SSA information for statement vcEnd_17 = gReadReplyEndVC;
Registering new PHI nodes in block #8
Updating SSA information for statement gNumVCs.0_8 = gNumVCs;
Registering new PHI nodes in block #9
Registering new PHI nodes in block #10
Updating SSA information for statement vcBegin_18 = gWriteReplyBeginVC;
Updating SSA information for statement vcEnd_19 = gWriteReplyEndVC;
Registering new PHI nodes in block #11
Registering new PHI nodes in block #27
Updating SSA information for statement _20 = f_10(D)->vc;
Registering new PHI nodes in block #14
Registering new PHI nodes in block #15
Updating SSA information for statement _40 = MEM[(int *)r_23(D) + 96B];
Updating SSA information for statement height_25 = QTree::HeightFromID (_40);
Updating SSA information for statement _41 = MEM[(int *)r_23(D) + 96B];
Updating SSA information for statement pos_27 = QTree::PosFromID (_41);
Updating SSA information for statement dest_28 = f_10(D)->dest;
Updating SSA information for statement gN.1_44 = gN;
Registering new PHI nodes in block #17
Updating SSA information for statement pretmp_63 = gK;
Updating SSA information for statement phi_out_of_ssa.442[0] = dest_28;
Registering new PHI nodes in block #18
Updating SSA information for statement dest_53 = phi_out_of_ssa.442[0];
Updating SSA information for statement Close_Phi.443[0] = dest_32;
Updating SSA information for statement phi_out_of_ssa.442[0] = dest_32;
Registering new PHI nodes in block #19
Registering new PHI nodes in block #20
Updating SSA information for statement dest_66 = Close_Phi.443[0];
Registering new PHI nodes in block #24
Registering new PHI nodes in block #16
Updating SSA information for statement pretmp_61 = gK;
Registering new PHI nodes in block #21
Registering new PHI nodes in block #25
Registering new PHI nodes in block #22
Registering new PHI nodes in block #23
Registering new PHI nodes in block #12
Registering new PHI nodes in block #13
Updating SSA information for statement __assert_fail ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 92, &__PRETTY_FUNCTION__);
Registering new PHI nodes in block #26
Updating SSA information for statement OutputSet::Clear (outputs_37(D));
Updating SSA information for statement OutputSet::AddRange (outputs_37(D), out_port_3, vcBegin_1, vcEnd_2, 0);
Updating SSA information for statement return;

DFA Statistics for void qtree_nca(const Router*, const Flit*, int, OutputSet*, bool)

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             71        568b
DEF operands                             31        248b
VUSE operands                            28        224b
VDEF operands                             8         64b
PHI nodes                                11       1144b
PHI arguments                            30       1440b
---------------------------------------------------------
Total memory used by DFA/SSA data                 3688b
---------------------------------------------------------

Average number of arguments per PHI node: 2.7 (max: 5)


Hash table statistics:
    var_infos:   size 61, 1 elements, 0.000000 collision/search ratio


Symbols to be put in SSA form
{ D.50509 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 28
Number of blocks to update: 27 ( 96%)
Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27


Creating dr for Cross_BB_scalar_dependence.444[0]
analyze_innermost: success.
	base_address: &Cross_BB_scalar_dependence.444
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: Cross_BB_scalar_dependence.444
	Access function 0: 0

Updating SSA:
Registering new PHI nodes in block #0
Registering new PHI nodes in block #2
Updating SSA information for statement _11 = f_10(D)->type;
Registering new PHI nodes in block #3
Updating SSA information for statement vcBegin_12 = gReadReqBeginVC;
Updating SSA information for statement vcEnd_13 = gReadReqEndVC;
Registering new PHI nodes in block #4
Registering new PHI nodes in block #5
Updating SSA information for statement vcBegin_14 = gWriteReqBeginVC;
Updating SSA information for statement vcEnd_15 = gWriteReqEndVC;
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Updating SSA information for statement vcBegin_16 = gReadReplyBeginVC;
Updating SSA information for statement vcEnd_17 = gReadReplyEndVC;
Registering new PHI nodes in block #8
Updating SSA information for statement gNumVCs.0_8 = gNumVCs;
Registering new PHI nodes in block #9
Registering new PHI nodes in block #10
Updating SSA information for statement vcBegin_18 = gWriteReplyBeginVC;
Updating SSA information for statement vcEnd_19 = gWriteReplyEndVC;
Registering new PHI nodes in block #11
Registering new PHI nodes in block #27
Updating SSA information for statement _20 = f_10(D)->vc;
Registering new PHI nodes in block #14
Registering new PHI nodes in block #15
Updating SSA information for statement _40 = MEM[(int *)r_23(D) + 96B];
Updating SSA information for statement height_25 = QTree::HeightFromID (_40);
Updating SSA information for statement _41 = MEM[(int *)r_23(D) + 96B];
Updating SSA information for statement pos_27 = QTree::PosFromID (_41);
Updating SSA information for statement dest_28 = f_10(D)->dest;
Updating SSA information for statement gN.1_44 = gN;
Registering new PHI nodes in block #17
Updating SSA information for statement pretmp_63 = gK;
Updating SSA information for statement phi_out_of_ssa.442[0] = dest_28;
Registering new PHI nodes in block #18
Updating SSA information for statement dest_53 = phi_out_of_ssa.442[0];
Updating SSA information for statement Close_Phi.443[0] = dest_32;
Updating SSA information for statement phi_out_of_ssa.442[0] = dest_32;
Registering new PHI nodes in block #19
Registering new PHI nodes in block #20
Updating SSA information for statement dest_66 = Close_Phi.443[0];
Updating SSA information for statement Cross_BB_scalar_dependence.444[0] = dest_66;
Registering new PHI nodes in block #28
Updating SSA information for statement dest_48 = Cross_BB_scalar_dependence.444[0];
Registering new PHI nodes in block #24
Registering new PHI nodes in block #16
Updating SSA information for statement pretmp_61 = gK;
Registering new PHI nodes in block #21
Registering new PHI nodes in block #25
Registering new PHI nodes in block #22
Registering new PHI nodes in block #23
Registering new PHI nodes in block #12
Registering new PHI nodes in block #13
Updating SSA information for statement __assert_fail ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 92, &__PRETTY_FUNCTION__);
Registering new PHI nodes in block #26
Updating SSA information for statement OutputSet::Clear (outputs_37(D));
Updating SSA information for statement OutputSet::AddRange (outputs_37(D), out_port_3, vcBegin_1, vcEnd_2, 0);
Updating SSA information for statement return;

DFA Statistics for void qtree_nca(const Router*, const Flit*, int, OutputSet*, bool)

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             73        584b
DEF operands                             33        264b
VUSE operands                            30        240b
VDEF operands                             9         72b
PHI nodes                                11       1144b
PHI arguments                            30       1440b
---------------------------------------------------------
Total memory used by DFA/SSA data                 3744b
---------------------------------------------------------

Average number of arguments per PHI node: 2.7 (max: 5)


Hash table statistics:
    var_infos:   size 61, 1 elements, 0.000000 collision/search ratio


Symbols to be put in SSA form
{ D.50509 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 29
Number of blocks to update: 28 ( 97%)
Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28



ISL AST generated by ISL: 
{
  for (int c1 = 0; c1 < -((-gN.1 + height + 4294967297) % 4294967296) + 4294967296; c1 += 1)
    S_18(c1);
  S_20();
}


Removing basic block 33
basic block 33, loop depth 0
 pred:      
goto <bb 31>;
 succ:       31



Updating SSA:
Registering new PHI nodes in block #15
Registering new PHI nodes in block #17
Registering new PHI nodes in block #30
Registering new PHI nodes in block #32
Registering new PHI nodes in block #18
Registering new PHI nodes in block #19
Registering new PHI nodes in block #20
Updating SSA information for statement Cross_BB_scalar_dependence.444[0] = dest_66;
Registering new PHI nodes in block #31
Registering new PHI nodes in block #29
Registering new PHI nodes in block #28
Updating SSA information for statement dest_48 = Cross_BB_scalar_dependence.444[0];
Registering new PHI nodes in block #24
Registering new PHI nodes in block #16
Registering new PHI nodes in block #21
Registering new PHI nodes in block #25
Registering new PHI nodes in block #22
Registering new PHI nodes in block #23

DFA Statistics for void qtree_nca(const Router*, const Flit*, int, OutputSet*, bool)

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             73        584b
DEF operands                             33        264b
VUSE operands                            30        240b
VDEF operands                             9         72b
PHI nodes                                12       1248b
PHI arguments                            32       1536b
---------------------------------------------------------
Total memory used by DFA/SSA data                 3944b
---------------------------------------------------------

Average number of arguments per PHI node: 2.7 (max: 5)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_30 -> { .MEM_45 }
Incremental SSA update started at block: 15
Number of blocks in CFG: 34
Number of blocks to update: 6 ( 18%)
Affected blocks: 20 21 24 28 31 32


Applying pattern match.pd:439, generic-match.c:3611
Applying pattern match.pd:625, generic-match.c:1309
Applying pattern match.pd:625, generic-match.c:1309
Applying pattern match.pd:439, generic-match.c:3611
Applying pattern match.pd:625, generic-match.c:1309
Applying pattern match.pd:499, generic-match.c:4743
Applying pattern match.pd:499, generic-match.c:3797

Updating SSA:
creating PHI node in block #35 for .MEM
creating PHI node in block #38 for .MEM
Registering new PHI nodes in block #0
Registering new PHI nodes in block #2
Updating SSA information for statement _11 = f_10(D)->type;
Registering new PHI nodes in block #3
Updating SSA information for statement vcBegin_12 = gReadReqBeginVC;
Updating SSA information for statement vcEnd_13 = gReadReqEndVC;
Registering new PHI nodes in block #4
Registering new PHI nodes in block #5
Updating SSA information for statement vcBegin_14 = gWriteReqBeginVC;
Updating SSA information for statement vcEnd_15 = gWriteReqEndVC;
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Updating SSA information for statement vcBegin_16 = gReadReplyBeginVC;
Updating SSA information for statement vcEnd_17 = gReadReplyEndVC;
Registering new PHI nodes in block #8
Updating SSA information for statement gNumVCs.0_8 = gNumVCs;
Registering new PHI nodes in block #9
Registering new PHI nodes in block #10
Updating SSA information for statement vcBegin_18 = gWriteReplyBeginVC;
Updating SSA information for statement vcEnd_19 = gWriteReplyEndVC;
Registering new PHI nodes in block #11
Registering new PHI nodes in block #27
Updating SSA information for statement _20 = f_10(D)->vc;
Registering new PHI nodes in block #14
Registering new PHI nodes in block #15
Updating SSA information for statement _40 = MEM[(int *)r_23(D) + 96B];
Updating SSA information for statement height_25 = QTree::HeightFromID (_40);
Updating SSA information for statement _41 = MEM[(int *)r_23(D) + 96B];
Updating SSA information for statement pos_27 = QTree::PosFromID (_41);
Updating SSA information for statement dest_28 = f_10(D)->dest;
Updating SSA information for statement gN.1_44 = gN;
Registering new PHI nodes in block #17
Updating SSA information for statement pretmp_63 = gK;
Updating SSA information for statement phi_out_of_ssa.442[0] = dest_28;
Registering new PHI nodes in block #30
Registering new PHI nodes in block #34
Registering new PHI nodes in block #40
Registering new PHI nodes in block #38
Registering new PHI nodes in block #43
Updating SSA information for statement dest_73 = phi_out_of_ssa.442[0];
Updating SSA information for statement dest_74 = dest_73 / pretmp_63;
Updating SSA information for statement Close_Phi.443[0] = dest_74;
Updating SSA information for statement phi_out_of_ssa.442[0] = dest_74;
Registering new PHI nodes in block #41
Registering new PHI nodes in block #39
Registering new PHI nodes in block #42
Registering new PHI nodes in block #36
Registering new PHI nodes in block #37
Registering new PHI nodes in block #35
Registering new PHI nodes in block #32
Registering new PHI nodes in block #18
Updating SSA information for statement dest_53 = phi_out_of_ssa.442[0];
Updating SSA information for statement # DEBUG dest => dest_53
Updating SSA information for statement dest_32 = dest_53 / pretmp_63;
Updating SSA information for statement Close_Phi.443[0] = dest_32;
Updating SSA information for statement phi_out_of_ssa.442[0] = dest_32;
Updating SSA information for statement # DEBUG dest => dest_32
Updating SSA information for statement # DEBUG dest => dest_32
Registering new PHI nodes in block #19
Registering new PHI nodes in block #20
Updating SSA information for statement dest_66 = Close_Phi.443[0];
Updating SSA information for statement Cross_BB_scalar_dependence.444[0] = dest_66;
Registering new PHI nodes in block #31
Registering new PHI nodes in block #29
Registering new PHI nodes in block #28
Updating SSA information for statement dest_48 = Cross_BB_scalar_dependence.444[0];
Registering new PHI nodes in block #24
Registering new PHI nodes in block #16
Updating SSA information for statement pretmp_61 = gK;
Registering new PHI nodes in block #21
Registering new PHI nodes in block #25
Registering new PHI nodes in block #22
Registering new PHI nodes in block #23
Registering new PHI nodes in block #12
Registering new PHI nodes in block #13
Updating SSA information for statement __assert_fail ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 92, &__PRETTY_FUNCTION__);
Registering new PHI nodes in block #26
Updating SSA information for statement OutputSet::Clear (outputs_37(D));
Updating SSA information for statement OutputSet::AddRange (outputs_37(D), out_port_3, vcBegin_1, vcEnd_2, 0);
Updating SSA information for statement return;

DFA Statistics for void qtree_nca(const Router*, const Flit*, int, OutputSet*, bool)

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             91        728b
DEF operands                             45        360b
VUSE operands                            33        264b
VDEF operands                            11         88b
PHI nodes                                15       1560b
PHI arguments                            38       1824b
---------------------------------------------------------
Total memory used by DFA/SSA data                 4824b
---------------------------------------------------------

Average number of arguments per PHI node: 2.5 (max: 5)


Hash table statistics:
    var_infos:   size 61, 1 elements, 0.000000 collision/search ratio


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

dest_73 -> { dest_53 }
dest_74 -> { dest_32 }
.MEM_75 -> { .MEM_58 }
.MEM_76 -> { .MEM_57 }

Symbols to be put in SSA form
{ D.50509 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 44
Number of blocks to update: 42 ( 95%)
Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 34 35 36 37 38 39 40 41 42 43



Updating SSA:
Registering new PHI nodes in block #0
Registering new PHI nodes in block #2
Updating SSA information for statement _11 = f_10(D)->type;
Registering new PHI nodes in block #3
Updating SSA information for statement vcBegin_12 = gReadReqBeginVC;
Updating SSA information for statement vcEnd_13 = gReadReqEndVC;
Registering new PHI nodes in block #4
Registering new PHI nodes in block #5
Updating SSA information for statement vcBegin_14 = gWriteReqBeginVC;
Updating SSA information for statement vcEnd_15 = gWriteReqEndVC;
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Updating SSA information for statement vcBegin_16 = gReadReplyBeginVC;
Updating SSA information for statement vcEnd_17 = gReadReplyEndVC;
Registering new PHI nodes in block #8
Updating SSA information for statement gNumVCs.0_8 = gNumVCs;
Registering new PHI nodes in block #9
Registering new PHI nodes in block #10
Updating SSA information for statement vcBegin_18 = gWriteReplyBeginVC;
Updating SSA information for statement vcEnd_19 = gWriteReplyEndVC;
Registering new PHI nodes in block #11
Registering new PHI nodes in block #27
Updating SSA information for statement _20 = f_10(D)->vc;
Registering new PHI nodes in block #14
Registering new PHI nodes in block #15
Updating SSA information for statement _40 = MEM[(int *)r_23(D) + 96B];
Updating SSA information for statement height_25 = QTree::HeightFromID (_40);
Updating SSA information for statement _41 = MEM[(int *)r_23(D) + 96B];
Updating SSA information for statement pos_27 = QTree::PosFromID (_41);
Updating SSA information for statement dest_28 = f_10(D)->dest;
Updating SSA information for statement gN.1_44 = gN;
Registering new PHI nodes in block #17
Updating SSA information for statement pretmp_63 = gK;
Updating SSA information for statement phi_out_of_ssa.442[0] = dest_28;
Registering new PHI nodes in block #30
Registering new PHI nodes in block #34
Registering new PHI nodes in block #40
Registering new PHI nodes in block #38
Registering new PHI nodes in block #43
Updating SSA information for statement dest_73 = phi_out_of_ssa.442[0];
Updating SSA information for statement Close_Phi.443[0] = dest_74;
Updating SSA information for statement phi_out_of_ssa.442[0] = dest_74;
Registering new PHI nodes in block #41
Registering new PHI nodes in block #39
Registering new PHI nodes in block #42
Registering new PHI nodes in block #36
Registering new PHI nodes in block #37
Registering new PHI nodes in block #35
Registering new PHI nodes in block #44
Updating SSA information for statement dest_79 = Close_Phi.443[0];
Updating SSA information for statement Cross_BB_scalar_dependence.444[0] = dest_79;
Registering new PHI nodes in block #32
Registering new PHI nodes in block #18
Updating SSA information for statement dest_53 = phi_out_of_ssa.442[0];
Updating SSA information for statement Close_Phi.443[0] = dest_32;
Updating SSA information for statement phi_out_of_ssa.442[0] = dest_32;
Registering new PHI nodes in block #19
Registering new PHI nodes in block #20
Updating SSA information for statement dest_66 = Close_Phi.443[0];
Updating SSA information for statement Cross_BB_scalar_dependence.444[0] = dest_66;
Registering new PHI nodes in block #31
Registering new PHI nodes in block #29
Registering new PHI nodes in block #28
Updating SSA information for statement dest_48 = Cross_BB_scalar_dependence.444[0];
Registering new PHI nodes in block #24
Registering new PHI nodes in block #16
Updating SSA information for statement pretmp_61 = gK;
Registering new PHI nodes in block #21
Registering new PHI nodes in block #25
Registering new PHI nodes in block #22
Registering new PHI nodes in block #23
Registering new PHI nodes in block #12
Registering new PHI nodes in block #13
Updating SSA information for statement __assert_fail ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 92, &__PRETTY_FUNCTION__);
Registering new PHI nodes in block #26
Updating SSA information for statement OutputSet::Clear (outputs_37(D));
Updating SSA information for statement OutputSet::AddRange (outputs_37(D), out_port_3, vcBegin_1, vcEnd_2, 0);
Updating SSA information for statement return;

DFA Statistics for void qtree_nca(const Router*, const Flit*, int, OutputSet*, bool)

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             92        736b
DEF operands                             46        368b
VUSE operands                            35        280b
VDEF operands                            12         96b
PHI nodes                                15       1560b
PHI arguments                            38       1824b
---------------------------------------------------------
Total memory used by DFA/SSA data                 4864b
---------------------------------------------------------

Average number of arguments per PHI node: 2.5 (max: 5)


Hash table statistics:
    var_infos:   size 61, 1 elements, 0.000000 collision/search ratio


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

dest_79 -> { dest_66 }
.MEM_80 -> { .MEM_45 }

Symbols to be put in SSA form
{ D.50509 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 45
Number of blocks to update: 43 ( 96%)
Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 34 35 36 37 38 39 40 41 42 43 44



0 loops carried no dependency.
Merging blocks 11 and 27
Merging blocks 17 and 30
Merging blocks 21 and 25
Removing basic block 24
basic block 24, loop depth 0
 pred:      
 succ:       21


Removing basic block 29
basic block 29, loop depth 0
 pred:      
goto <bb 28>;
 succ:       28


Merging blocks 31 and 28
Removing basic block 32
basic block 32, loop depth 0
 pred:      
 succ:       31


Merging blocks 35 and 44
Removing basic block 36
basic block 36, loop depth 0
 pred:      
 succ:       35


Removing basic block 37
basic block 37, loop depth 0
 pred:      
goto <bb 35>;
 succ:       35


Merging blocks 38 and 43
Removing basic block 42
basic block 42, loop depth 0
 pred:      
 succ:       35


Removing basic block 19
basic block 19, loop depth 1
 pred:       18
goto <bb 18>;
 succ:       18


Removing basic block 20
basic block 20, loop depth 0
 pred:       18
dest_66 = Close_Phi.443[0];
Cross_BB_scalar_dependence.444[0] = dest_66;
goto <bb 31>;
 succ:       31


Removing basic block 18
basic block 18, loop depth 1
 pred:       17
# i_49 = PHI <i_29(17)>
dest_53 = phi_out_of_ssa.442[0];
# DEBUG i => i_49
# DEBUG dest => dest_53
dest_32 = dest_53 / pretmp_63;
Close_Phi.443[0] = dest_32;
phi_out_of_ssa.442[0] = dest_32;
# DEBUG dest => dest_32
i_33 = i_49 + 1;
# DEBUG i => i_33
# DEBUG i => i_33
# DEBUG dest => dest_32
if (i_33 >= gN.1_44)
 succ:      


Merging blocks 17 and 34
Merging blocks 35 and 31
Merging blocks 38 and 41
fix_loop_structure: removing loop 1
Analyzing # of iterations of loop 2
  exit condition [0, + , 1](no_overflow) < _70
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775807
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if _70 < 0
    # of iterations (unsigned long) _70, bounded by 9223372036854775807
Analyzing # of iterations of loop 2
  exit condition [0, + , 1](no_overflow) < _70
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775807
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if _70 < 0
    # of iterations (unsigned long) _70, bounded by 9223372036854775807
Analyzing # of iterations of loop 2
  exit condition [0, + , 1](no_overflow) < _70
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775807
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if _70 < 0
    # of iterations (unsigned long) _70, bounded by 9223372036854775807
Statement (exit)if (graphite_IV.445_71 < _70)
 is executed at most _70 < 0 ? 0 : (unsigned long) _70 (bounded by 9223372036854775807) + 1 times in loop 2.
Induction variable (signed long) 1 + 1 * iteration does not wrap in statement graphite_IV.445_72 = graphite_IV.445_71 + 1;
 in loop 2.
Statement graphite_IV.445_72 = graphite_IV.445_71 + 1;
 is executed at most 9223372036854775806 (bounded by 9223372036854775806) + 1 times in loop 2.
Reducing loop iteration estimate by 1; undefined statement must be executed at the last iteration.
Predictions for bb 2
  no prediction heuristics: 50.0%
  combined heuristics: 50.0%
1 edges in bb 3 predicted to even probabilities
Predictions for bb 4
  DS theory heuristics: 28.0%
  first match heuristics (ignored): 28.0%
  combined heuristics: 28.0%
  opcode values nonequal (on trees) heuristics: 28.0%
1 edges in bb 5 predicted to even probabilities
Predictions for bb 6
  DS theory heuristics: 28.0%
  first match heuristics (ignored): 28.0%
  combined heuristics: 28.0%
  opcode values nonequal (on trees) heuristics: 28.0%
1 edges in bb 7 predicted to even probabilities
Predictions for bb 8
  DS theory heuristics: 28.0%
  first match heuristics (ignored): 28.0%
  combined heuristics: 28.0%
  opcode values nonequal (on trees) heuristics: 28.0%
1 edges in bb 9 predicted to even probabilities
1 edges in bb 10 predicted to even probabilities
Predictions for bb 11
  no prediction heuristics: 50.0%
  combined heuristics: 50.0%
Predictions for bb 12
  DS theory heuristics (ignored): 0.0%
  first match heuristics: 0.0%
  combined heuristics: 0.0%
  early return (on trees) heuristics (ignored): 61.0%
  call heuristics (ignored): 29.0%
  noreturn call heuristics: 0.0%
0 edges in bb 13 predicted to even probabilities
Predictions for bb 14
  DS theory heuristics: 61.0%
  first match heuristics (ignored): 71.0%
  combined heuristics: 61.0%
  call heuristics: 71.0%
  early return (on trees) heuristics: 39.0%
Predictions for bb 15
  no prediction heuristics: 50.0%
  combined heuristics: 50.0%
1 edges in bb 16 predicted to even probabilities
Predictions for bb 17
  no prediction heuristics: 50.0%
  combined heuristics: 50.0%
1 edges in bb 18 predicted to even probabilities
Predictions for bb 19
  DS theory heuristics (ignored): 91.0%
  first match heuristics: 91.0%
  combined heuristics: 91.0%
  loop exit heuristics: 91.0%
1 edges in bb 20 predicted to even probabilities
1 edges in bb 21 predicted to even probabilities
Predictions for bb 22
  DS theory heuristics: 28.0%
  first match heuristics (ignored): 28.0%
  combined heuristics: 28.0%
  opcode values nonequal (on trees) heuristics: 28.0%
1 edges in bb 23 predicted to even probabilities
1 edges in bb 24 predicted to even probabilities
1 edges in bb 25 predicted to even probabilities
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # DEBUG vcBegin => 0
    # DEBUG D#148 => gNumVCs
    # DEBUG vcEnd => D#148 + -1
    # VUSE <.MEM_7(D)>
    _11 = f_10(D)->type;
    if (_11 == 0)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_11 })
  {
    <bb 3>:
    # VUSE <.MEM_7(D)>
    vcBegin_12 = gReadReqBeginVC;
    # DEBUG vcBegin => vcBegin_12
    # VUSE <.MEM_7(D)>
    vcEnd_13 = gReadReqEndVC;
    # DEBUG vcEnd => vcEnd_13
    goto <bb 11>;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 bb_6 })
  {
    <bb 4>:
    if (_11 == 2)
      goto <bb 5>;
    else
      goto <bb 6>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_11 })
  {
    <bb 5>:
    # VUSE <.MEM_7(D)>
    vcBegin_14 = gWriteReqBeginVC;
    # DEBUG vcBegin => vcBegin_14
    # VUSE <.MEM_7(D)>
    vcEnd_15 = gWriteReqEndVC;
    # DEBUG vcEnd => vcEnd_15
    goto <bb 11>;

  }
  bb_6 (preds = {bb_4 }, succs = {bb_7 bb_8 })
  {
    <bb 6>:
    if (_11 == 1)
      goto <bb 7>;
    else
      goto <bb 8>;

  }
  bb_7 (preds = {bb_6 }, succs = {bb_11 })
  {
    <bb 7>:
    # VUSE <.MEM_7(D)>
    vcBegin_16 = gReadReplyBeginVC;
    # DEBUG vcBegin => vcBegin_16
    # VUSE <.MEM_7(D)>
    vcEnd_17 = gReadReplyEndVC;
    # DEBUG vcEnd => vcEnd_17
    goto <bb 11>;

  }
  bb_8 (preds = {bb_6 }, succs = {bb_10 bb_9 })
  {
    <bb 8>:
    # VUSE <.MEM_7(D)>
    gNumVCs.0_8 = gNumVCs;
    if (_11 == 3)
      goto <bb 10>;
    else
      goto <bb 9>;

  }
  bb_9 (preds = {bb_8 }, succs = {bb_11 })
  {
    <bb 9>:
    vcEnd_9 = gNumVCs.0_8 + -1;
    goto <bb 11>;

  }
  bb_10 (preds = {bb_8 }, succs = {bb_11 })
  {
    <bb 10>:
    # VUSE <.MEM_7(D)>
    vcBegin_18 = gWriteReplyBeginVC;
    # DEBUG vcBegin => vcBegin_18
    # VUSE <.MEM_7(D)>
    vcEnd_19 = gWriteReplyEndVC;
    # DEBUG vcEnd => vcEnd_19

  }
  bb_11 (preds = {bb_3 bb_5 bb_7 bb_9 bb_10 }, succs = {bb_12 bb_14 })
  {
    <bb 11>:
    # vcBegin_1 = PHI <vcBegin_12(3), vcBegin_14(5), vcBegin_16(7), 0(9), vcBegin_18(10)>
    # vcEnd_2 = PHI <vcEnd_13(3), vcEnd_15(5), vcEnd_17(7), vcEnd_9(9), vcEnd_19(10)>
    # DEBUG vcEnd => vcEnd_2
    # DEBUG vcBegin => vcBegin_1
    # VUSE <.MEM_7(D)>
    _20 = f_10(D)->vc;
    _42 = vcEnd_2 < _20;
    _47 = vcBegin_1 > _20;
    _56 = _42 | _47;
    if (_56 != 0)
      goto <bb 12>;
    else
      goto <bb 14>;

  }
  bb_12 (preds = {bb_11 }, succs = {bb_13 bb_25 })
  {
    <bb 12>:
    _46 = _20 >= 0;
    if (inject_21(D) <= _46)
      goto <bb 13>;
    else
      goto <bb 25>;

  }
  bb_13 (preds = {bb_12 }, succs = {})
  {
    <bb 13>:
    # .MEM_22 = VDEF <.MEM_7(D)>
    __assert_fail ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 92, &__PRETTY_FUNCTION__);

  }
  bb_14 (preds = {bb_11 }, succs = {bb_25 bb_15 })
  {
    <bb 14>:
    if (inject_21(D) != 0)
      goto <bb 25>;
    else
      goto <bb 15>;

  }
  bb_15 (preds = {bb_14 }, succs = {bb_16 bb_17 })
  {
    <bb 15>:
    # VUSE <.MEM_7(D)>
    _40 = MEM[(int *)r_23(D) + 96B];
    # DEBUG D#14 => r_23(D)
    # DEBUG this => D#14
    # .MEM_24 = VDEF <.MEM_7(D)>
    height_25 = QTree::HeightFromID (_40);
    # DEBUG height => height_25
    # VUSE <.MEM_24>
    _41 = MEM[(int *)r_23(D) + 96B];
    # DEBUG D#14 => r_23(D)
    # DEBUG this => D#14
    # .MEM_26 = VDEF <.MEM_24>
    pos_27 = QTree::PosFromID (_41);
    # DEBUG pos => pos_27
    # VUSE <.MEM_26>
    dest_28 = f_10(D)->dest;
    # DEBUG dest => dest_28
    i_29 = height_25 + 1;
    # DEBUG i => i_29
    # DEBUG i => i_29
    # DEBUG dest => dest_28
    # VUSE <.MEM_26>
    gN.1_44 = gN;
    if (i_29 >= gN.1_44)
      goto <bb 16>;
    else
      goto <bb 17>;

  }
  bb_16 (preds = {bb_15 }, succs = {bb_22 })
  {
    <bb 16>:
    # VUSE <.MEM_26>
    pretmp_61 = gK;
    goto <bb 22>;

  }
  bb_17 (preds = {bb_15 }, succs = {bb_18 bb_21 })
  {
    <bb 17>:
    # VUSE <.MEM_26>
    pretmp_63 = gK;
    # .MEM_59 = VDEF <.MEM_26>
    phi_out_of_ssa.442[0] = dest_28;
    _5 = (signed long) height_25;
    _4 = (signed long) gN.1_44;
    _64 = _5 - _4;
    _31 = _64 + 4294967297;
    _34 = _31 % 4294967296;
    _67 = 4294967296 - _34;
    _68 = _67 > 0;
    if (_68 != 0)
      goto <bb 18>;
    else
      goto <bb 21>;

  }
  bb_18 (preds = {bb_17 }, succs = {bb_19 })
  {
    <bb 18>:
    _69 = _31 % 4294967296;
    _70 = 4294967295 - _69;

  }
  bb_21 (preds = {bb_19 bb_17 }, succs = {bb_22 })
  {
    <bb 21>:
    # .MEM_77 = PHI <.MEM_76(19), .MEM_59(17)>
    # VUSE <.MEM_77>
    dest_79 = Close_Phi.443[0];
    # .MEM_80 = VDEF <.MEM_77>
    Cross_BB_scalar_dependence.444[0] = dest_79;
    # VUSE <.MEM_80>
    dest_48 = Cross_BB_scalar_dependence.444[0];
    _50 = dest_48;

  }
  bb_22 (preds = {bb_21 bb_16 }, succs = {bb_23 bb_24 })
  {
    <bb 22>:
    # dest_43 = PHI <_50(21), dest_28(16)>
    # prephitmp_62 = PHI <pretmp_63(21), pretmp_61(16)>
    # .MEM_60 = PHI <.MEM_80(21), .MEM_26(16)>
    _35 = dest_43 / prephitmp_62;
    if (pos_27 == _35)
      goto <bb 23>;
    else
      goto <bb 24>;

  }
  bb_23 (preds = {bb_22 }, succs = {bb_24 })
  {
    <bb 23>:
    out_port_36 = dest_43 % prephitmp_62;
    # DEBUG out_port => out_port_36

  }
  bb_24 (preds = {bb_22 bb_23 }, succs = {bb_25 })
  {
    <bb 24>:
    # out_port_55 = PHI <prephitmp_62(22), out_port_36(23)>
    # .MEM_52 = PHI <.MEM_60(22), .MEM_60(23)>

  }
  bb_25 (preds = {bb_24 bb_14 bb_12 }, succs = {bb_1 })
  {
    <bb 25>:
    # out_port_3 = PHI <out_port_55(24), -1(14), -1(12)>
    # .MEM_6 = PHI <.MEM_52(24), .MEM_7(D)(14), .MEM_7(D)(12)>
    # DEBUG out_port => out_port_3
    # .MEM_38 = VDEF <.MEM_6>
    OutputSet::Clear (outputs_37(D));
    # .MEM_39 = VDEF <.MEM_38>
    OutputSet::AddRange (outputs_37(D), out_port_3, vcBegin_1, vcEnd_2, 0);
    # VUSE <.MEM_39>
    return;

  }
  loop_2 (header = 19, latch = 20, niter = (unsigned long) MAX_EXPR <_70, 0>, upper_bound = 9223372036854775806)
  {
    bb_19 (preds = {bb_18 bb_20 }, succs = {bb_20 bb_21 })
    {
      <bb 19>:
      # graphite_IV.445_71 = PHI <0(18), graphite_IV.445_72(20)>
      # .MEM_78 = PHI <.MEM_59(18), .MEM_76(20)>
      # VUSE <.MEM_78>
      dest_73 = phi_out_of_ssa.442[0];
      # DEBUG i => NULL
      # DEBUG dest => NULL
      dest_74 = dest_73 / pretmp_63;
      # .MEM_75 = VDEF <.MEM_78>
      Close_Phi.443[0] = dest_74;
      # .MEM_76 = VDEF <.MEM_75>
      phi_out_of_ssa.442[0] = dest_74;
      # DEBUG dest => NULL
      # DEBUG i => NULL
      # DEBUG i => NULL
      # DEBUG dest => NULL
      graphite_IV.445_72 = graphite_IV.445_71 + 1;
      if (graphite_IV.445_71 < _70)
        goto <bb 20>;
      else
        goto <bb 21>;

    }
    bb_20 (preds = {bb_19 }, succs = {bb_19 })
    {
      <bb 20>:
      goto <bb 19>;

    }
  }
}

Pass statistics:
----------------

void qtree_nca(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45354, const struct FlitD.29321 * fD.45355, intD.9 in_channelD.45356, struct OutputSetD.28230 * outputsD.45357, boolD.2757 injectD.45358)
{
  signed long graphite_IV.445D.54672;
  intD.9 Cross_BB_scalar_dependence.444D.54671[1];
  intD.9 D.54670;
  intD.9 D.54669;
  intD.9 D.54668;
  intD.9 Close_Phi.443D.54667[1];
  intD.9 phi_out_of_ssa.442D.54666[1];
  intD.9 iD.45368;
  intD.9 destD.45367;
  intD.9 posD.45366;
  intD.9 heightD.45365;
  intD.9 out_portD.45364;
  static const charD.10 _ZZ9qtree_ncaPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45363[66] = "void qtree_nca(const Router*, const Flit*, int, OutputSet*, bool)";
  intD.9 vcEndD.45362;
  intD.9 vcBeginD.45361;
  signed long _4;
  signed long _5;
  intD.9 gNumVCs.0_8;
  FlitTypeD.29324 _11;
  intD.9 _20;
  signed long _31;
  signed long _34;
  intD.9 _35;
  const intD.9 _40;
  const intD.9 _41;
  boolD.2757 _42;
  intD.9 gN.1_44;
  boolD.2757 _46;
  boolD.2757 _47;
  boolD.2757 _56;
  intD.9 pretmp_61;
  intD.9 prephitmp_62;
  intD.9 pretmp_63;
  signed long _64;
  signed long _67;
  boolD.2757 _68;
  signed long _69;
  signed long _70;

;;   basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG vcBeginD.45361 => 0
  # DEBUG D#148ptD.0 => gNumVCsD.42077
  # DEBUG vcEndD.45362 => D#148ptD.0 + -1
  # VUSE <.MEM_7(D)>
  _11 = f_10(D)->typeD.29330;
  if (_11 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 5000, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  vcBegin_12 = gReadReqBeginVCD.42078;
  # DEBUG vcBeginD.45361 => vcBegin_12
  # VUSE <.MEM_7(D)>
  vcEnd_13 = gReadReqEndVCD.42079;
  # DEBUG vcEndD.45362 => vcEnd_13
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 5000, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_11 == 2)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 1400, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  vcBegin_14 = gWriteReqBeginVCD.42080;
  # DEBUG vcBeginD.45361 => vcBegin_14
  # VUSE <.MEM_7(D)>
  vcEnd_15 = gWriteReqEndVCD.42081;
  # DEBUG vcEndD.45362 => vcEnd_15
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 3600, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_11 == 1)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 1008, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  vcBegin_16 = gReadReplyBeginVCD.42082;
  # DEBUG vcBeginD.45361 => vcBegin_16
  # VUSE <.MEM_7(D)>
  vcEnd_17 = gReadReplyEndVCD.42083;
  # DEBUG vcEndD.45362 => vcEnd_17
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 2592, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  gNumVCs.0_8 = gNumVCsD.42077;
  if (_11 == 3)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 1866, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  vcEnd_9 = gNumVCs.0_8 + -1;
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 726, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  vcBegin_18 = gWriteReplyBeginVCD.42084;
  # DEBUG vcBeginD.45361 => vcBegin_18
  # VUSE <.MEM_7(D)>
  vcEnd_19 = gWriteReplyEndVCD.42085;
  # DEBUG vcEndD.45362 => vcEnd_19
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # vcBegin_1 = PHI <vcBegin_12(3), vcBegin_14(5), vcBegin_16(7), 0(9), vcBegin_18(10)>
  # vcEnd_2 = PHI <vcEnd_13(3), vcEnd_15(5), vcEnd_17(7), vcEnd_9(9), vcEnd_19(10)>
  # DEBUG vcEndD.45362 => vcEnd_2
  # DEBUG vcBeginD.45361 => vcBegin_1
  # VUSE <.MEM_7(D)>
  _20 = f_10(D)->vcD.29331;
  _42 = vcEnd_2 < _20;
  _47 = vcBegin_1 > _20;
  _56 = _42 | _47;
  if (_56 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 5000, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  _46 = _20 >= 0;
  if (inject_21(D) <= _46)
    goto <bb 13>;
  else
    goto <bb 25>;
;;    succ:       13 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 2, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_22 = VDEF <.MEM_7(D)>
  # USE = nonlocal null { D.45363 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45363 } (nonlocal, escaped)
  __assert_failD.9858 ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 92, &_ZZ9qtree_ncaPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45363);
;;    succ:      

;;   basic block 14, loop depth 0, count 0, freq 5000, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (inject_21(D) != 0)
    goto <bb 25>;
  else
    goto <bb 15>;
;;    succ:       25 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 1949, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7(D)>
  _40 = MEM[(intD.9 *)r_23(D) + 96B];
  # DEBUG D#14ptD.0 => r_23(D)
  # DEBUG thisD.50834 => D#14ptD.0
  # .MEM_24 = VDEF <.MEM_7(D)>
  # USE = nonlocal null { D.45363 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45363 } (nonlocal, escaped)
  height_25 = _ZN5QTree12HeightFromIDEiD.44162 (_40);
  # DEBUG heightD.45365 => height_25
  # VUSE <.MEM_24>
  _41 = MEM[(intD.9 *)r_23(D) + 96B];
  # DEBUG D#14ptD.0 => r_23(D)
  # DEBUG thisD.50831 => D#14ptD.0
  # .MEM_26 = VDEF <.MEM_24>
  # USE = nonlocal null { D.45363 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45363 } (nonlocal, escaped)
  pos_27 = _ZN5QTree9PosFromIDEiD.44164 (_41);
  # DEBUG posD.45366 => pos_27
  # VUSE <.MEM_26>
  dest_28 = f_10(D)->destD.29342;
  # DEBUG destD.45367 => dest_28
  i_29 = height_25 + 1;
  # DEBUG iD.45368 => i_29
  # DEBUG iD.45368 => i_29
  # DEBUG destD.45367 => dest_28
  # VUSE <.MEM_26>
  gN.1_44 = gND.33727;
  if (i_29 >= gN.1_44)
    goto <bb 16>;
  else
    goto <bb 17>;
;;    succ:       16 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 974, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       15 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_26>
  pretmp_61 = gKD.33726;
  goto <bb 22>;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 974, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       15 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_26>
  pretmp_63 = gKD.33726;
  # .MEM_59 = VDEF <.MEM_26>
  phi_out_of_ssa.442D.54666[0] = dest_28;
  _5 = (signed long) height_25;
  _4 = (signed long) gN.1_44;
  _64 = _5 - _4;
  _31 = _64 + 4294967297;
  _34 = _31 % 4294967296;
  _67 = 4294967296 - _34;
  _68 = _67 > 0;
  if (_68 != 0)
    goto <bb 18>;
  else
    goto <bb 21>;
;;    succ:       18 [50.0%]  (TRUE_VALUE)
;;                21 [50.0%]  (FALSE_VALUE)

;;   basic block 18, loop depth 0, count 0, freq 487, maybe hot
;;    prev block 17, next block 19, flags: (NEW)
;;    pred:       17 [50.0%]  (TRUE_VALUE)
  _69 = _31 % 4294967296;
  _70 = 4294967295 - _69;
;;    succ:       19 [100.0%]  (FALLTHRU)

;;   basic block 19, loop depth 1, count 0, freq 5414, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       18 [100.0%]  (FALLTHRU)
;;                20 [100.0%]  (FALLTHRU,DFS_BACK)
  # graphite_IV.445_71 = PHI <0(18), graphite_IV.445_72(20)>
  # .MEM_78 = PHI <.MEM_59(18), .MEM_76(20)>
  # VUSE <.MEM_78>
  dest_73 = phi_out_of_ssa.442D.54666[0];
  # DEBUG iD.45368 => NULL
  # DEBUG destD.45367 => NULL
  dest_74 = dest_73 / pretmp_63;
  # .MEM_75 = VDEF <.MEM_78>
  Close_Phi.443D.54667[0] = dest_74;
  # .MEM_76 = VDEF <.MEM_75>
  phi_out_of_ssa.442D.54666[0] = dest_74;
  # DEBUG destD.45367 => NULL
  # DEBUG iD.45368 => NULL
  # DEBUG iD.45368 => NULL
  # DEBUG destD.45367 => NULL
  graphite_IV.445_72 = graphite_IV.445_71 + 1;
  if (graphite_IV.445_71 < _70)
    goto <bb 20>;
  else
    goto <bb 21>;
;;    succ:       20 [91.0%]  (TRUE_VALUE)
;;                21 [9.0%]  (FALSE_VALUE,LOOP_EXIT)

;;   basic block 20, loop depth 1, count 0, freq 4927, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       19 [91.0%]  (TRUE_VALUE)
  goto <bb 19>;
;;    succ:       19 [100.0%]  (FALLTHRU,DFS_BACK)

;;   basic block 21, loop depth 0, count 0, freq 975, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       19 [9.0%]  (FALSE_VALUE,LOOP_EXIT)
;;                17 [50.0%]  (FALSE_VALUE)
  # .MEM_77 = PHI <.MEM_76(19), .MEM_59(17)>
  # VUSE <.MEM_77>
  dest_79 = Close_Phi.443D.54667[0];
  # .MEM_80 = VDEF <.MEM_77>
  Cross_BB_scalar_dependence.444D.54671[0] = dest_79;
  # VUSE <.MEM_80>
  dest_48 = Cross_BB_scalar_dependence.444D.54671[0];
  _50 = dest_48;
;;    succ:       22 [100.0%]  (FALLTHRU)

;;   basic block 22, loop depth 0, count 0, freq 1949, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       21 [100.0%]  (FALLTHRU)
;;                16 [100.0%]  (FALLTHRU,EXECUTABLE)
  # dest_43 = PHI <_50(21), dest_28(16)>
  # prephitmp_62 = PHI <pretmp_63(21), pretmp_61(16)>
  # .MEM_60 = PHI <.MEM_80(21), .MEM_26(16)>
  _35 = dest_43 / prephitmp_62;
  if (pos_27 == _35)
    goto <bb 23>;
  else
    goto <bb 24>;
;;    succ:       23 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 546, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       22 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  out_port_36 = dest_43 % prephitmp_62;
  # DEBUG out_portD.45364 => out_port_36
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 1949, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       22 [72.0%]  (FALSE_VALUE,EXECUTABLE)
;;                23 [100.0%]  (FALLTHRU,EXECUTABLE)
  # out_port_55 = PHI <prephitmp_62(22), out_port_36(23)>
  # .MEM_52 = PHI <.MEM_60(22), .MEM_60(23)>
;;    succ:       25 [100.0%]  (FALLTHRU)

;;   basic block 25, loop depth 0, count 0, freq 9998, maybe hot
;;    prev block 24, next block 1, flags: (NEW)
;;    pred:       24 [100.0%]  (FALLTHRU)
;;                14 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # out_port_3 = PHI <out_port_55(24), -1(14), -1(12)>
  # .MEM_6 = PHI <.MEM_52(24), .MEM_7(D)(14), .MEM_7(D)(12)>
  # DEBUG out_portD.45364 => out_port_3
  # .MEM_38 = VDEF <.MEM_6>
  # USE = nonlocal null { D.45363 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45363 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_37(D));
  # .MEM_39 = VDEF <.MEM_38>
  # USE = nonlocal null { D.45363 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45363 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_37(D), out_port_3, vcBegin_1, vcEnd_2, 0);
  # VUSE <.MEM_39>
  return;
;;    succ:       EXIT [100.0%] 

}



;; Function void dest_tag_fly(const Router*, const Flit*, int, OutputSet*, bool) (_Z12dest_tag_flyPK6RouterPK4FlitiP9OutputSetb, funcdef_no=1988, decl_uid=45756, cgraph_uid=487, symbol_order=498)


Pass statistics:
----------------

void dest_tag_fly(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45751, const struct FlitD.29321 * fD.45752, intD.9 in_channelD.45753, struct OutputSetD.28230 * outputsD.45754, boolD.2757 injectD.45755)
{
  intD.9 destD.45763;
  intD.9 stageD.45762;
  intD.9 out_portD.45761;
  static const charD.10 _ZZ12dest_tag_flyPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45760[69] = "void dest_tag_fly(const Router*, const Flit*, int, OutputSet*, bool)";
  intD.9 vcEndD.45759;
  intD.9 vcBeginD.45758;
  intD.9 gNumVCs.132_7;
  FlitTypeD.29324 _10;
  intD.9 _19;
  intD.9 gK.133_23;
  intD.9 _24;
  intD.9 gNodes.134_25;
  const intD.9 _36;
  boolD.2757 _37;
  intD.9 _38;
  boolD.2757 _41;
  boolD.2757 _42;
  intD.9 gN.135_48;
  boolD.2757 _50;

;;   basic block 2, loop depth 0, count 0, freq 1476, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG vcBeginD.45758 => 0
  # DEBUG D#150ptD.0 => gNumVCsD.42077
  # DEBUG vcEndD.45759 => D#150ptD.0 + -1
  # VUSE <.MEM_6(D)>
  _10 = f_9(D)->typeD.29330;
  if (_10 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 738, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_6(D)>
  vcBegin_11 = gReadReqBeginVCD.42078;
  # DEBUG vcBeginD.45758 => vcBegin_11
  # VUSE <.MEM_6(D)>
  vcEnd_12 = gReadReqEndVCD.42079;
  # DEBUG vcEndD.45759 => vcEnd_12
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 738, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_10 == 2)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 207, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_6(D)>
  vcBegin_13 = gWriteReqBeginVCD.42080;
  # DEBUG vcBeginD.45758 => vcBegin_13
  # VUSE <.MEM_6(D)>
  vcEnd_14 = gWriteReqEndVCD.42081;
  # DEBUG vcEndD.45759 => vcEnd_14
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 531, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_10 == 1)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 149, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_6(D)>
  vcBegin_15 = gReadReplyBeginVCD.42082;
  # DEBUG vcBeginD.45758 => vcBegin_15
  # VUSE <.MEM_6(D)>
  vcEnd_16 = gReadReplyEndVCD.42083;
  # DEBUG vcEndD.45759 => vcEnd_16
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 383, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_6(D)>
  gNumVCs.132_7 = gNumVCsD.42077;
  if (_10 == 3)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 276, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  vcEnd_8 = gNumVCs.132_7 + -1;
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 107, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_6(D)>
  vcBegin_17 = gWriteReplyBeginVCD.42084;
  # DEBUG vcBeginD.45758 => vcBegin_17
  # VUSE <.MEM_6(D)>
  vcEnd_18 = gWriteReplyEndVCD.42085;
  # DEBUG vcEndD.45759 => vcEnd_18
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 1476, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # vcBegin_1 = PHI <vcBegin_11(3), vcBegin_13(5), vcBegin_15(7), 0(9), vcBegin_17(10)>
  # vcEnd_2 = PHI <vcEnd_12(3), vcEnd_14(5), vcEnd_16(7), vcEnd_8(9), vcEnd_18(10)>
  # DEBUG vcEndD.45759 => vcEnd_2
  # DEBUG vcBeginD.45758 => vcBegin_1
  # VUSE <.MEM_6(D)>
  _19 = f_9(D)->vcD.29331;
  _37 = vcEnd_2 < _19;
  _42 = vcBegin_1 > _19;
  _41 = _37 | _42;
  if (_41 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 1107, maybe hot
;;   Invalid sum of incoming frequencies 738, should be 1107
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  _50 = _19 >= 0;
  if (inject_20(D) <= _50)
    goto <bb 13>;
  else
    goto <bb 21>;
;;    succ:       13 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_21 = VDEF <.MEM_6(D)>
  # USE = nonlocal null { D.45760 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45760 } (nonlocal, escaped)
  __assert_failD.9858 ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 1815, &_ZZ12dest_tag_flyPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45760);
;;    succ:      

;;   basic block 14, loop depth 0, count 0, freq 368, maybe hot
;;   Invalid sum of incoming frequencies 738, should be 368
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (inject_20(D) != 0)
    goto <bb 21>;
  else
    goto <bb 15>;
;;    succ:       21 (TRUE_VALUE,EXECUTABLE)
;;                15 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 900, maybe hot
;;   Invalid sum of incoming frequencies 368, should be 900
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_6(D)>
  _36 = MEM[(intD.9 *)r_22(D) + 96B];
  # DEBUG D#14ptD.0 => r_22(D)
  # DEBUG thisD.50838 => D#14ptD.0
  # VUSE <.MEM_6(D)>
  gK.133_23 = gKD.33726;
  _24 = gK.133_23 * _36;
  # VUSE <.MEM_6(D)>
  gNodes.134_25 = gNodesD.33729;
  stage_26 = _24 / gNodes.134_25;
  # DEBUG stageD.45762 => stage_26
  # VUSE <.MEM_6(D)>
  dest_27 = f_9(D)->destD.29342;
  # DEBUG destD.45763 => dest_27
  # DEBUG destD.45763 => dest_27
  # DEBUG stageD.45762 => stage_26
  # VUSE <.MEM_6(D)>
  gN.135_48 = gND.33727;
  _38 = gN.135_48 + -1;
  if (stage_26 >= _38)
    goto <bb 20>;
  else
    goto <bb 16>;
;;    succ:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       15 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                18 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # stage_44 = PHI <stage_26(16), stage_31(18)>
  # dest_45 = PHI <dest_27(16), dest_30(18)>
  # DEBUG destD.45763 => dest_45
  # DEBUG stageD.45762 => stage_44
  dest_30 = dest_45 / gK.133_23;
  # DEBUG destD.45763 => dest_30
  stage_31 = stage_44 + 1;
  # DEBUG stageD.45762 => stage_31
  # DEBUG destD.45763 => dest_30
  # DEBUG stageD.45762 => stage_31
  if (stage_31 >= _38)
    goto <bb 19>;
  else
    goto <bb 18>;
;;    succ:       19 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 17, next block 19, flags: (NEW)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # dest_56 = PHI <dest_30(17)>
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # dest_46 = PHI <dest_56(19), dest_27(15)>
  out_port_32 = dest_46 % gK.133_23;
  # DEBUG out_portD.45761 => out_port_32
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 1475, maybe hot
;;   Invalid sum of incoming frequencies 2007, should be 1475
;;    prev block 20, next block 1, flags: (NEW, REACHABLE)
;;    pred:       14 (TRUE_VALUE,EXECUTABLE)
;;                20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # out_port_3 = PHI <-1(14), out_port_32(20), -1(12)>
  # DEBUG out_portD.45761 => out_port_3
  # .MEM_34 = VDEF <.MEM_6(D)>
  # USE = nonlocal null { D.45760 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45760 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_33(D));
  # .MEM_35 = VDEF <.MEM_34>
  # USE = nonlocal null { D.45760 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45760 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_33(D), out_port_3, vcBegin_1, vcEnd_2, 0);
  # VUSE <.MEM_35>
  return;
;;    succ:       EXIT [100.0%] 

}


Creating dr for f_9(D)->type
analyze_innermost: success.
	base_address: f_9(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *f_9(D)
	Access function 0: 0
Creating dr for gReadReqBeginVC
analyze_innermost: success.
	base_address: &gReadReqBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReqBeginVC
Creating dr for gReadReqEndVC
analyze_innermost: success.
	base_address: &gReadReqEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReqEndVC
Creating dr for gWriteReqBeginVC
analyze_innermost: success.
	base_address: &gWriteReqBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReqBeginVC
Creating dr for gWriteReqEndVC
analyze_innermost: success.
	base_address: &gWriteReqEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReqEndVC
Creating dr for gReadReplyBeginVC
analyze_innermost: success.
	base_address: &gReadReplyBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReplyBeginVC
Creating dr for gReadReplyEndVC
analyze_innermost: success.
	base_address: &gReadReplyEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReplyEndVC
Creating dr for gNumVCs
analyze_innermost: success.
	base_address: &gNumVCs
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gNumVCs
Creating dr for gWriteReplyBeginVC
analyze_innermost: success.
	base_address: &gWriteReplyBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReplyBeginVC
Creating dr for gWriteReplyEndVC
analyze_innermost: success.
	base_address: &gWriteReplyEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReplyEndVC
Creating dr for f_9(D)->vc
analyze_innermost: success.
	base_address: f_9(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: *f_9(D)
	Access function 0: 32
Creating dr for MEM[(int *)r_22(D) + 96B]
analyze_innermost: success.
	base_address: r_22(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(int *)r_22(D) + 96B]
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gNodes
analyze_innermost: success.
	base_address: &gNodes
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gNodes
Creating dr for f_9(D)->dest
analyze_innermost: success.
	base_address: f_9(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_9(D)
	Access function 0: 352
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Analyzing # of iterations of loop 1
  exit condition [stage_26 + 1, + , 1](no_overflow) < gN.135_48 + -1
  bounds on difference of bases: 0 ... 4294967293
Applying pattern match.pd:524, generic-match.c:4929
Applying pattern match.pd:439, generic-match.c:3325
  result:
    # of iterations ((unsigned int) gN.135_48 - (unsigned int) stage_26) - 2, bounded by 4294967293
Analyzing # of iterations of loop 1
  exit condition [stage_26 + 1, + , 1](no_overflow) < gN.135_48 + -1
  bounds on difference of bases: 0 ... 4294967293
Applying pattern match.pd:524, generic-match.c:4929
Applying pattern match.pd:439, generic-match.c:3325
  result:
    # of iterations ((unsigned int) gN.135_48 - (unsigned int) stage_26) - 2, bounded by 4294967293

Before limit_scops SCoP statistics (BBS:9, LOOPS:1, CONDITIONS:3, STMTS:27)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:10, LOOPS:0, CONDITIONS:4, STMTS:26)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 1

SCoP statistics (BBS:3, LOOPS:1, CONDITIONS:1, STMTS:9)

SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Global statistics (BBS:25, LOOPS:1, CONDITIONS:9, STMTS:67)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
Creating dr for phi_out_of_ssa.456[0]
analyze_innermost: success.
	base_address: &phi_out_of_ssa.456
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: phi_out_of_ssa.456
	Access function 0: 0
Creating dr for phi_out_of_ssa.456[0]
analyze_innermost: success.
	base_address: &phi_out_of_ssa.456
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: phi_out_of_ssa.456
	Access function 0: 0
Creating dr for Close_Phi.457[0]
analyze_innermost: success.
	base_address: &Close_Phi.457
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: Close_Phi.457
	Access function 0: 0
Creating dr for Close_Phi.457[0]
analyze_innermost: success.
	base_address: &Close_Phi.457
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: Close_Phi.457
	Access function 0: 0

Updating SSA:
creating PHI node in block #17 for .MEM
creating PHI node in block #20 for .MEM
creating PHI node in block #21 for .MEM
creating PHI node in block #23 for .MEM
Registering new PHI nodes in block #0
Registering new PHI nodes in block #2
Updating SSA information for statement _10 = f_9(D)->type;
Registering new PHI nodes in block #3
Updating SSA information for statement vcBegin_11 = gReadReqBeginVC;
Updating SSA information for statement vcEnd_12 = gReadReqEndVC;
Registering new PHI nodes in block #4
Registering new PHI nodes in block #5
Updating SSA information for statement vcBegin_13 = gWriteReqBeginVC;
Updating SSA information for statement vcEnd_14 = gWriteReqEndVC;
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Updating SSA information for statement vcBegin_15 = gReadReplyBeginVC;
Updating SSA information for statement vcEnd_16 = gReadReplyEndVC;
Registering new PHI nodes in block #8
Updating SSA information for statement gNumVCs.132_7 = gNumVCs;
Registering new PHI nodes in block #9
Registering new PHI nodes in block #10
Updating SSA information for statement vcBegin_17 = gWriteReplyBeginVC;
Updating SSA information for statement vcEnd_18 = gWriteReplyEndVC;
Registering new PHI nodes in block #11
Registering new PHI nodes in block #24
Updating SSA information for statement _19 = f_9(D)->vc;
Registering new PHI nodes in block #14
Registering new PHI nodes in block #15
Updating SSA information for statement _36 = MEM[(int *)r_22(D) + 96B];
Updating SSA information for statement gK.133_23 = gK;
Updating SSA information for statement gNodes.134_25 = gNodes;
Updating SSA information for statement dest_27 = f_9(D)->dest;
Updating SSA information for statement gN.135_48 = gN;
Registering new PHI nodes in block #16
Updating SSA information for statement phi_out_of_ssa.456[0] = dest_27;
Registering new PHI nodes in block #17
Updating SSA information for statement dest_45 = phi_out_of_ssa.456[0];
Updating SSA information for statement Close_Phi.457[0] = dest_30;
Updating SSA information for statement phi_out_of_ssa.456[0] = dest_30;
Registering new PHI nodes in block #18
Registering new PHI nodes in block #19
Updating SSA information for statement dest_56 = Close_Phi.457[0];
Registering new PHI nodes in block #22
Registering new PHI nodes in block #20
Registering new PHI nodes in block #21
Registering new PHI nodes in block #12
Registering new PHI nodes in block #13
Updating SSA information for statement __assert_fail ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 1815, &__PRETTY_FUNCTION__);
Registering new PHI nodes in block #23
Updating SSA information for statement OutputSet::Clear (outputs_33(D));
Updating SSA information for statement OutputSet::AddRange (outputs_33(D), out_port_3, vcBegin_1, vcEnd_2, 0);
Updating SSA information for statement return;

DFA Statistics for void dest_tag_fly(const Router*, const Flit*, int, OutputSet*, bool)

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             65        520b
DEF operands                             29        232b
VUSE operands                            25        200b
VDEF operands                             6         48b
PHI nodes                                10       1040b
PHI arguments                            26       1248b
---------------------------------------------------------
Total memory used by DFA/SSA data                 3288b
---------------------------------------------------------

Average number of arguments per PHI node: 2.6 (max: 5)


Hash table statistics:
    var_infos:   size 61, 1 elements, 0.000000 collision/search ratio


Symbols to be put in SSA form
{ D.50510 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 25
Number of blocks to update: 24 ( 96%)
Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24


Creating dr for Cross_BB_scalar_dependence.458[0]
analyze_innermost: success.
	base_address: &Cross_BB_scalar_dependence.458
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: Cross_BB_scalar_dependence.458
	Access function 0: 0

Updating SSA:
Registering new PHI nodes in block #0
Registering new PHI nodes in block #2
Updating SSA information for statement _10 = f_9(D)->type;
Registering new PHI nodes in block #3
Updating SSA information for statement vcBegin_11 = gReadReqBeginVC;
Updating SSA information for statement vcEnd_12 = gReadReqEndVC;
Registering new PHI nodes in block #4
Registering new PHI nodes in block #5
Updating SSA information for statement vcBegin_13 = gWriteReqBeginVC;
Updating SSA information for statement vcEnd_14 = gWriteReqEndVC;
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Updating SSA information for statement vcBegin_15 = gReadReplyBeginVC;
Updating SSA information for statement vcEnd_16 = gReadReplyEndVC;
Registering new PHI nodes in block #8
Updating SSA information for statement gNumVCs.132_7 = gNumVCs;
Registering new PHI nodes in block #9
Registering new PHI nodes in block #10
Updating SSA information for statement vcBegin_17 = gWriteReplyBeginVC;
Updating SSA information for statement vcEnd_18 = gWriteReplyEndVC;
Registering new PHI nodes in block #11
Registering new PHI nodes in block #24
Updating SSA information for statement _19 = f_9(D)->vc;
Registering new PHI nodes in block #14
Registering new PHI nodes in block #15
Updating SSA information for statement _36 = MEM[(int *)r_22(D) + 96B];
Updating SSA information for statement gK.133_23 = gK;
Updating SSA information for statement gNodes.134_25 = gNodes;
Updating SSA information for statement dest_27 = f_9(D)->dest;
Updating SSA information for statement gN.135_48 = gN;
Registering new PHI nodes in block #16
Updating SSA information for statement phi_out_of_ssa.456[0] = dest_27;
Registering new PHI nodes in block #17
Updating SSA information for statement dest_45 = phi_out_of_ssa.456[0];
Updating SSA information for statement Close_Phi.457[0] = dest_30;
Updating SSA information for statement phi_out_of_ssa.456[0] = dest_30;
Registering new PHI nodes in block #18
Registering new PHI nodes in block #19
Updating SSA information for statement dest_56 = Close_Phi.457[0];
Updating SSA information for statement Cross_BB_scalar_dependence.458[0] = dest_56;
Registering new PHI nodes in block #25
Updating SSA information for statement dest_28 = Cross_BB_scalar_dependence.458[0];
Registering new PHI nodes in block #22
Registering new PHI nodes in block #20
Registering new PHI nodes in block #21
Registering new PHI nodes in block #12
Registering new PHI nodes in block #13
Updating SSA information for statement __assert_fail ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 1815, &__PRETTY_FUNCTION__);
Registering new PHI nodes in block #23
Updating SSA information for statement OutputSet::Clear (outputs_33(D));
Updating SSA information for statement OutputSet::AddRange (outputs_33(D), out_port_3, vcBegin_1, vcEnd_2, 0);
Updating SSA information for statement return;

DFA Statistics for void dest_tag_fly(const Router*, const Flit*, int, OutputSet*, bool)

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             67        536b
DEF operands                             31        248b
VUSE operands                            27        216b
VDEF operands                             7         56b
PHI nodes                                10       1040b
PHI arguments                            26       1248b
---------------------------------------------------------
Total memory used by DFA/SSA data                 3344b
---------------------------------------------------------

Average number of arguments per PHI node: 2.6 (max: 5)


Hash table statistics:
    var_infos:   size 61, 1 elements, 0.000000 collision/search ratio


Symbols to be put in SSA form
{ D.50510 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 26
Number of blocks to update: 25 ( 96%)
Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25



ISL AST generated by ISL: 
{
  for (int c1 = 0; c1 < -((-gN.135 + stage + 4294967297) % 4294967296) + 4294967296; c1 += 1)
    S_17(c1);
  S_19();
}


Removing basic block 30
basic block 30, loop depth 0
 pred:      
goto <bb 28>;
 succ:       28



Updating SSA:
Registering new PHI nodes in block #15
Registering new PHI nodes in block #16
Registering new PHI nodes in block #27
Registering new PHI nodes in block #29
Registering new PHI nodes in block #17
Registering new PHI nodes in block #18
Registering new PHI nodes in block #19
Updating SSA information for statement Cross_BB_scalar_dependence.458[0] = dest_56;
Registering new PHI nodes in block #28
Registering new PHI nodes in block #26
Registering new PHI nodes in block #25
Updating SSA information for statement dest_28 = Cross_BB_scalar_dependence.458[0];
Registering new PHI nodes in block #22
Registering new PHI nodes in block #20

DFA Statistics for void dest_tag_fly(const Router*, const Flit*, int, OutputSet*, bool)

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             67        536b
DEF operands                             31        248b
VUSE operands                            27        216b
VDEF operands                             7         56b
PHI nodes                                11       1144b
PHI arguments                            28       1344b
---------------------------------------------------------
Total memory used by DFA/SSA data                 3544b
---------------------------------------------------------

Average number of arguments per PHI node: 2.5 (max: 5)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_4 -> { .MEM_5 }
Incremental SSA update started at block: 15
Number of blocks in CFG: 31
Number of blocks to update: 6 ( 19%)
Affected blocks: 19 20 22 25 28 29


Applying pattern match.pd:439, generic-match.c:3611
Applying pattern match.pd:625, generic-match.c:1309
Applying pattern match.pd:625, generic-match.c:1309
Applying pattern match.pd:439, generic-match.c:3611
Applying pattern match.pd:625, generic-match.c:1309
Applying pattern match.pd:499, generic-match.c:4743
Applying pattern match.pd:499, generic-match.c:3797

Updating SSA:
creating PHI node in block #32 for .MEM
creating PHI node in block #35 for .MEM
Registering new PHI nodes in block #0
Registering new PHI nodes in block #2
Updating SSA information for statement _10 = f_9(D)->type;
Registering new PHI nodes in block #3
Updating SSA information for statement vcBegin_11 = gReadReqBeginVC;
Updating SSA information for statement vcEnd_12 = gReadReqEndVC;
Registering new PHI nodes in block #4
Registering new PHI nodes in block #5
Updating SSA information for statement vcBegin_13 = gWriteReqBeginVC;
Updating SSA information for statement vcEnd_14 = gWriteReqEndVC;
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Updating SSA information for statement vcBegin_15 = gReadReplyBeginVC;
Updating SSA information for statement vcEnd_16 = gReadReplyEndVC;
Registering new PHI nodes in block #8
Updating SSA information for statement gNumVCs.132_7 = gNumVCs;
Registering new PHI nodes in block #9
Registering new PHI nodes in block #10
Updating SSA information for statement vcBegin_17 = gWriteReplyBeginVC;
Updating SSA information for statement vcEnd_18 = gWriteReplyEndVC;
Registering new PHI nodes in block #11
Registering new PHI nodes in block #24
Updating SSA information for statement _19 = f_9(D)->vc;
Registering new PHI nodes in block #14
Registering new PHI nodes in block #15
Updating SSA information for statement _36 = MEM[(int *)r_22(D) + 96B];
Updating SSA information for statement gK.133_23 = gK;
Updating SSA information for statement gNodes.134_25 = gNodes;
Updating SSA information for statement dest_27 = f_9(D)->dest;
Updating SSA information for statement gN.135_48 = gN;
Registering new PHI nodes in block #16
Updating SSA information for statement phi_out_of_ssa.456[0] = dest_27;
Registering new PHI nodes in block #27
Registering new PHI nodes in block #31
Registering new PHI nodes in block #37
Registering new PHI nodes in block #35
Registering new PHI nodes in block #40
Updating SSA information for statement dest_68 = phi_out_of_ssa.456[0];
Updating SSA information for statement dest_69 = dest_68 / gK.133_23;
Updating SSA information for statement Close_Phi.457[0] = dest_69;
Updating SSA information for statement phi_out_of_ssa.456[0] = dest_69;
Registering new PHI nodes in block #38
Registering new PHI nodes in block #36
Registering new PHI nodes in block #39
Registering new PHI nodes in block #33
Registering new PHI nodes in block #34
Registering new PHI nodes in block #32
Registering new PHI nodes in block #29
Registering new PHI nodes in block #17
Updating SSA information for statement dest_45 = phi_out_of_ssa.456[0];
Updating SSA information for statement # DEBUG dest => dest_45
Updating SSA information for statement dest_30 = dest_45 / gK.133_23;
Updating SSA information for statement Close_Phi.457[0] = dest_30;
Updating SSA information for statement phi_out_of_ssa.456[0] = dest_30;
Updating SSA information for statement # DEBUG dest => dest_30
Updating SSA information for statement # DEBUG dest => dest_30
Registering new PHI nodes in block #18
Registering new PHI nodes in block #19
Updating SSA information for statement dest_56 = Close_Phi.457[0];
Updating SSA information for statement Cross_BB_scalar_dependence.458[0] = dest_56;
Registering new PHI nodes in block #28
Registering new PHI nodes in block #26
Registering new PHI nodes in block #25
Updating SSA information for statement dest_28 = Cross_BB_scalar_dependence.458[0];
Registering new PHI nodes in block #22
Registering new PHI nodes in block #20
Registering new PHI nodes in block #21
Registering new PHI nodes in block #12
Registering new PHI nodes in block #13
Updating SSA information for statement __assert_fail ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 1815, &__PRETTY_FUNCTION__);
Registering new PHI nodes in block #23
Updating SSA information for statement OutputSet::Clear (outputs_33(D));
Updating SSA information for statement OutputSet::AddRange (outputs_33(D), out_port_3, vcBegin_1, vcEnd_2, 0);
Updating SSA information for statement return;

DFA Statistics for void dest_tag_fly(const Router*, const Flit*, int, OutputSet*, bool)

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             85        680b
DEF operands                             43        344b
VUSE operands                            30        240b
VDEF operands                             9         72b
PHI nodes                                14       1456b
PHI arguments                            34       1632b
---------------------------------------------------------
Total memory used by DFA/SSA data                 4424b
---------------------------------------------------------

Average number of arguments per PHI node: 2.4 (max: 5)


Hash table statistics:
    var_infos:   size 61, 1 elements, 0.000000 collision/search ratio


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

dest_68 -> { dest_45 }
dest_69 -> { dest_30 }
.MEM_70 -> { .MEM_51 }
.MEM_71 -> { .MEM_49 }

Symbols to be put in SSA form
{ D.50510 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 41
Number of blocks to update: 39 ( 95%)
Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 31 32 33 34 35 36 37 38 39 40



Updating SSA:
Registering new PHI nodes in block #0
Registering new PHI nodes in block #2
Updating SSA information for statement _10 = f_9(D)->type;
Registering new PHI nodes in block #3
Updating SSA information for statement vcBegin_11 = gReadReqBeginVC;
Updating SSA information for statement vcEnd_12 = gReadReqEndVC;
Registering new PHI nodes in block #4
Registering new PHI nodes in block #5
Updating SSA information for statement vcBegin_13 = gWriteReqBeginVC;
Updating SSA information for statement vcEnd_14 = gWriteReqEndVC;
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Updating SSA information for statement vcBegin_15 = gReadReplyBeginVC;
Updating SSA information for statement vcEnd_16 = gReadReplyEndVC;
Registering new PHI nodes in block #8
Updating SSA information for statement gNumVCs.132_7 = gNumVCs;
Registering new PHI nodes in block #9
Registering new PHI nodes in block #10
Updating SSA information for statement vcBegin_17 = gWriteReplyBeginVC;
Updating SSA information for statement vcEnd_18 = gWriteReplyEndVC;
Registering new PHI nodes in block #11
Registering new PHI nodes in block #24
Updating SSA information for statement _19 = f_9(D)->vc;
Registering new PHI nodes in block #14
Registering new PHI nodes in block #15
Updating SSA information for statement _36 = MEM[(int *)r_22(D) + 96B];
Updating SSA information for statement gK.133_23 = gK;
Updating SSA information for statement gNodes.134_25 = gNodes;
Updating SSA information for statement dest_27 = f_9(D)->dest;
Updating SSA information for statement gN.135_48 = gN;
Registering new PHI nodes in block #16
Updating SSA information for statement phi_out_of_ssa.456[0] = dest_27;
Registering new PHI nodes in block #27
Registering new PHI nodes in block #31
Registering new PHI nodes in block #37
Registering new PHI nodes in block #35
Registering new PHI nodes in block #40
Updating SSA information for statement dest_68 = phi_out_of_ssa.456[0];
Updating SSA information for statement Close_Phi.457[0] = dest_69;
Updating SSA information for statement phi_out_of_ssa.456[0] = dest_69;
Registering new PHI nodes in block #38
Registering new PHI nodes in block #36
Registering new PHI nodes in block #39
Registering new PHI nodes in block #33
Registering new PHI nodes in block #34
Registering new PHI nodes in block #32
Registering new PHI nodes in block #41
Updating SSA information for statement dest_74 = Close_Phi.457[0];
Updating SSA information for statement Cross_BB_scalar_dependence.458[0] = dest_74;
Registering new PHI nodes in block #29
Registering new PHI nodes in block #17
Updating SSA information for statement dest_45 = phi_out_of_ssa.456[0];
Updating SSA information for statement Close_Phi.457[0] = dest_30;
Updating SSA information for statement phi_out_of_ssa.456[0] = dest_30;
Registering new PHI nodes in block #18
Registering new PHI nodes in block #19
Updating SSA information for statement dest_56 = Close_Phi.457[0];
Updating SSA information for statement Cross_BB_scalar_dependence.458[0] = dest_56;
Registering new PHI nodes in block #28
Registering new PHI nodes in block #26
Registering new PHI nodes in block #25
Updating SSA information for statement dest_28 = Cross_BB_scalar_dependence.458[0];
Registering new PHI nodes in block #22
Registering new PHI nodes in block #20
Registering new PHI nodes in block #21
Registering new PHI nodes in block #12
Registering new PHI nodes in block #13
Updating SSA information for statement __assert_fail ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 1815, &__PRETTY_FUNCTION__);
Registering new PHI nodes in block #23
Updating SSA information for statement OutputSet::Clear (outputs_33(D));
Updating SSA information for statement OutputSet::AddRange (outputs_33(D), out_port_3, vcBegin_1, vcEnd_2, 0);
Updating SSA information for statement return;

DFA Statistics for void dest_tag_fly(const Router*, const Flit*, int, OutputSet*, bool)

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             86        688b
DEF operands                             44        352b
VUSE operands                            32        256b
VDEF operands                            10         80b
PHI nodes                                14       1456b
PHI arguments                            34       1632b
---------------------------------------------------------
Total memory used by DFA/SSA data                 4464b
---------------------------------------------------------

Average number of arguments per PHI node: 2.4 (max: 5)


Hash table statistics:
    var_infos:   size 61, 1 elements, 0.000000 collision/search ratio


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

dest_74 -> { dest_56 }
.MEM_75 -> { .MEM_5 }

Symbols to be put in SSA form
{ D.50510 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 42
Number of blocks to update: 40 ( 95%)
Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 31 32 33 34 35 36 37 38 39 40 41



0 loops carried no dependency.
Merging blocks 11 and 24
Merging blocks 16 and 27
Removing basic block 22
basic block 22, loop depth 0
 pred:      
 succ:       20


Removing basic block 26
basic block 26, loop depth 0
 pred:      
goto <bb 25>;
 succ:       25


Merging blocks 28 and 25
Removing basic block 29
basic block 29, loop depth 0
 pred:      
 succ:       28


Merging blocks 32 and 41
Removing basic block 33
basic block 33, loop depth 0
 pred:      
 succ:       32


Removing basic block 34
basic block 34, loop depth 0
 pred:      
goto <bb 32>;
 succ:       32


Merging blocks 35 and 40
Removing basic block 39
basic block 39, loop depth 0
 pred:      
 succ:       32


Removing basic block 18
basic block 18, loop depth 1
 pred:       17
goto <bb 17>;
 succ:       17


Removing basic block 19
basic block 19, loop depth 0
 pred:       17
dest_56 = Close_Phi.457[0];
Cross_BB_scalar_dependence.458[0] = dest_56;
goto <bb 28>;
 succ:       28


Removing basic block 17
basic block 17, loop depth 1
 pred:       16
# stage_44 = PHI <stage_26(16)>
dest_45 = phi_out_of_ssa.456[0];
# DEBUG dest => dest_45
# DEBUG stage => stage_44
dest_30 = dest_45 / gK.133_23;
Close_Phi.457[0] = dest_30;
phi_out_of_ssa.456[0] = dest_30;
# DEBUG dest => dest_30
stage_31 = stage_44 + 1;
# DEBUG stage => stage_31
# DEBUG dest => dest_30
# DEBUG stage => stage_31
if (stage_31 >= _38)
 succ:      


Merging blocks 16 and 31
Merging blocks 32 and 28
Merging blocks 35 and 38
fix_loop_structure: removing loop 1
Analyzing # of iterations of loop 2
  exit condition [0, + , 1](no_overflow) < _65
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775807
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if _65 < 0
    # of iterations (unsigned long) _65, bounded by 9223372036854775807
Analyzing # of iterations of loop 2
  exit condition [0, + , 1](no_overflow) < _65
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775807
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if _65 < 0
    # of iterations (unsigned long) _65, bounded by 9223372036854775807
Analyzing # of iterations of loop 2
  exit condition [0, + , 1](no_overflow) < _65
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775807
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if _65 < 0
    # of iterations (unsigned long) _65, bounded by 9223372036854775807
Statement (exit)if (graphite_IV.459_66 < _65)
 is executed at most _65 < 0 ? 0 : (unsigned long) _65 (bounded by 9223372036854775807) + 1 times in loop 2.
Induction variable (signed long) 1 + 1 * iteration does not wrap in statement graphite_IV.459_67 = graphite_IV.459_66 + 1;
 in loop 2.
Statement graphite_IV.459_67 = graphite_IV.459_66 + 1;
 is executed at most 9223372036854775806 (bounded by 9223372036854775806) + 1 times in loop 2.
Reducing loop iteration estimate by 1; undefined statement must be executed at the last iteration.
Predictions for bb 2
  no prediction heuristics: 50.0%
  combined heuristics: 50.0%
1 edges in bb 3 predicted to even probabilities
Predictions for bb 4
  DS theory heuristics: 28.0%
  first match heuristics (ignored): 28.0%
  combined heuristics: 28.0%
  opcode values nonequal (on trees) heuristics: 28.0%
1 edges in bb 5 predicted to even probabilities
Predictions for bb 6
  DS theory heuristics: 28.0%
  first match heuristics (ignored): 28.0%
  combined heuristics: 28.0%
  opcode values nonequal (on trees) heuristics: 28.0%
1 edges in bb 7 predicted to even probabilities
Predictions for bb 8
  DS theory heuristics: 28.0%
  first match heuristics (ignored): 28.0%
  combined heuristics: 28.0%
  opcode values nonequal (on trees) heuristics: 28.0%
1 edges in bb 9 predicted to even probabilities
1 edges in bb 10 predicted to even probabilities
Predictions for bb 11
  no prediction heuristics: 50.0%
  combined heuristics: 50.0%
Predictions for bb 12
  DS theory heuristics (ignored): 0.0%
  first match heuristics: 0.0%
  combined heuristics: 0.0%
  early return (on trees) heuristics (ignored): 61.0%
  call heuristics (ignored): 29.0%
  noreturn call heuristics: 0.0%
0 edges in bb 13 predicted to even probabilities
Predictions for bb 14
  no prediction heuristics: 50.0%
  combined heuristics: 50.0%
Predictions for bb 15
  no prediction heuristics: 50.0%
  combined heuristics: 50.0%
Predictions for bb 16
  no prediction heuristics: 50.0%
  combined heuristics: 50.0%
1 edges in bb 17 predicted to even probabilities
Predictions for bb 18
  DS theory heuristics (ignored): 91.0%
  first match heuristics: 91.0%
  combined heuristics: 91.0%
  loop exit heuristics: 91.0%
1 edges in bb 19 predicted to even probabilities
1 edges in bb 20 predicted to even probabilities
1 edges in bb 21 predicted to even probabilities
1 edges in bb 22 predicted to even probabilities
1 edges in bb 23 predicted to even probabilities
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # DEBUG vcBegin => 0
    # DEBUG D#150 => gNumVCs
    # DEBUG vcEnd => D#150 + -1
    # VUSE <.MEM_6(D)>
    _10 = f_9(D)->type;
    if (_10 == 0)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_11 })
  {
    <bb 3>:
    # VUSE <.MEM_6(D)>
    vcBegin_11 = gReadReqBeginVC;
    # DEBUG vcBegin => vcBegin_11
    # VUSE <.MEM_6(D)>
    vcEnd_12 = gReadReqEndVC;
    # DEBUG vcEnd => vcEnd_12
    goto <bb 11>;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 bb_6 })
  {
    <bb 4>:
    if (_10 == 2)
      goto <bb 5>;
    else
      goto <bb 6>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_11 })
  {
    <bb 5>:
    # VUSE <.MEM_6(D)>
    vcBegin_13 = gWriteReqBeginVC;
    # DEBUG vcBegin => vcBegin_13
    # VUSE <.MEM_6(D)>
    vcEnd_14 = gWriteReqEndVC;
    # DEBUG vcEnd => vcEnd_14
    goto <bb 11>;

  }
  bb_6 (preds = {bb_4 }, succs = {bb_7 bb_8 })
  {
    <bb 6>:
    if (_10 == 1)
      goto <bb 7>;
    else
      goto <bb 8>;

  }
  bb_7 (preds = {bb_6 }, succs = {bb_11 })
  {
    <bb 7>:
    # VUSE <.MEM_6(D)>
    vcBegin_15 = gReadReplyBeginVC;
    # DEBUG vcBegin => vcBegin_15
    # VUSE <.MEM_6(D)>
    vcEnd_16 = gReadReplyEndVC;
    # DEBUG vcEnd => vcEnd_16
    goto <bb 11>;

  }
  bb_8 (preds = {bb_6 }, succs = {bb_10 bb_9 })
  {
    <bb 8>:
    # VUSE <.MEM_6(D)>
    gNumVCs.132_7 = gNumVCs;
    if (_10 == 3)
      goto <bb 10>;
    else
      goto <bb 9>;

  }
  bb_9 (preds = {bb_8 }, succs = {bb_11 })
  {
    <bb 9>:
    vcEnd_8 = gNumVCs.132_7 + -1;
    goto <bb 11>;

  }
  bb_10 (preds = {bb_8 }, succs = {bb_11 })
  {
    <bb 10>:
    # VUSE <.MEM_6(D)>
    vcBegin_17 = gWriteReplyBeginVC;
    # DEBUG vcBegin => vcBegin_17
    # VUSE <.MEM_6(D)>
    vcEnd_18 = gWriteReplyEndVC;
    # DEBUG vcEnd => vcEnd_18

  }
  bb_11 (preds = {bb_3 bb_5 bb_7 bb_9 bb_10 }, succs = {bb_12 bb_14 })
  {
    <bb 11>:
    # vcBegin_1 = PHI <vcBegin_11(3), vcBegin_13(5), vcBegin_15(7), 0(9), vcBegin_17(10)>
    # vcEnd_2 = PHI <vcEnd_12(3), vcEnd_14(5), vcEnd_16(7), vcEnd_8(9), vcEnd_18(10)>
    # DEBUG vcEnd => vcEnd_2
    # DEBUG vcBegin => vcBegin_1
    # VUSE <.MEM_6(D)>
    _19 = f_9(D)->vc;
    _37 = vcEnd_2 < _19;
    _42 = vcBegin_1 > _19;
    _41 = _37 | _42;
    if (_41 != 0)
      goto <bb 12>;
    else
      goto <bb 14>;

  }
  bb_12 (preds = {bb_11 }, succs = {bb_13 bb_23 })
  {
    <bb 12>:
    _50 = _19 >= 0;
    if (inject_20(D) <= _50)
      goto <bb 13>;
    else
      goto <bb 23>;

  }
  bb_13 (preds = {bb_12 }, succs = {})
  {
    <bb 13>:
    # .MEM_21 = VDEF <.MEM_6(D)>
    __assert_fail ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 1815, &__PRETTY_FUNCTION__);

  }
  bb_14 (preds = {bb_11 }, succs = {bb_22 bb_15 })
  {
    <bb 14>:
    if (inject_20(D) != 0)
      goto <bb 22>;
    else
      goto <bb 15>;

  }
  bb_15 (preds = {bb_14 }, succs = {bb_21 bb_16 })
  {
    <bb 15>:
    # VUSE <.MEM_6(D)>
    _36 = MEM[(int *)r_22(D) + 96B];
    # DEBUG D#14 => r_22(D)
    # DEBUG this => D#14
    # VUSE <.MEM_6(D)>
    gK.133_23 = gK;
    _24 = gK.133_23 * _36;
    # VUSE <.MEM_6(D)>
    gNodes.134_25 = gNodes;
    stage_26 = _24 / gNodes.134_25;
    # DEBUG stage => stage_26
    # VUSE <.MEM_6(D)>
    dest_27 = f_9(D)->dest;
    # DEBUG dest => dest_27
    # DEBUG dest => dest_27
    # DEBUG stage => stage_26
    # VUSE <.MEM_6(D)>
    gN.135_48 = gN;
    _38 = gN.135_48 + -1;
    if (stage_26 >= _38)
      goto <bb 21>;
    else
      goto <bb 16>;

  }
  bb_16 (preds = {bb_15 }, succs = {bb_17 bb_20 })
  {
    <bb 16>:
    # .MEM_52 = VDEF <.MEM_6(D)>
    phi_out_of_ssa.456[0] = dest_27;
    _57 = (signed long) stage_26;
    _58 = (signed long) gN.135_48;
    _59 = _57 - _58;
    _60 = _59 + 4294967297;
    _61 = _60 % 4294967296;
    _62 = 4294967296 - _61;
    _63 = _62 > 0;
    if (_63 != 0)
      goto <bb 17>;
    else
      goto <bb 20>;

  }
  bb_17 (preds = {bb_16 }, succs = {bb_18 })
  {
    <bb 17>:
    _64 = _60 % 4294967296;
    _65 = 4294967295 - _64;

  }
  bb_20 (preds = {bb_18 bb_16 }, succs = {bb_21 })
  {
    <bb 20>:
    # .MEM_72 = PHI <.MEM_71(18), .MEM_52(16)>
    # VUSE <.MEM_72>
    dest_74 = Close_Phi.457[0];
    # .MEM_75 = VDEF <.MEM_72>
    Cross_BB_scalar_dependence.458[0] = dest_74;
    # VUSE <.MEM_75>
    dest_28 = Cross_BB_scalar_dependence.458[0];
    _29 = dest_28;

  }
  bb_21 (preds = {bb_20 bb_15 }, succs = {bb_22 })
  {
    <bb 21>:
    # dest_46 = PHI <_29(20), dest_27(15)>
    # .MEM_55 = PHI <.MEM_75(20), .MEM_6(D)(15)>
    out_port_32 = dest_46 % gK.133_23;
    # DEBUG out_port => out_port_32

  }
  bb_22 (preds = {bb_14 bb_21 }, succs = {bb_23 })
  {
    <bb 22>:
    # out_port_47 = PHI <-1(14), out_port_32(21)>
    # .MEM_54 = PHI <.MEM_6(D)(14), .MEM_55(21)>

  }
  bb_23 (preds = {bb_22 bb_12 }, succs = {bb_1 })
  {
    <bb 23>:
    # out_port_3 = PHI <out_port_47(22), -1(12)>
    # .MEM_53 = PHI <.MEM_54(22), .MEM_6(D)(12)>
    # DEBUG out_port => out_port_3
    # .MEM_34 = VDEF <.MEM_53>
    OutputSet::Clear (outputs_33(D));
    # .MEM_35 = VDEF <.MEM_34>
    OutputSet::AddRange (outputs_33(D), out_port_3, vcBegin_1, vcEnd_2, 0);
    # VUSE <.MEM_35>
    return;

  }
  loop_2 (header = 18, latch = 19, niter = (unsigned long) MAX_EXPR <_65, 0>, upper_bound = 9223372036854775806)
  {
    bb_18 (preds = {bb_17 bb_19 }, succs = {bb_19 bb_20 })
    {
      <bb 18>:
      # graphite_IV.459_66 = PHI <0(17), graphite_IV.459_67(19)>
      # .MEM_73 = PHI <.MEM_52(17), .MEM_71(19)>
      # VUSE <.MEM_73>
      dest_68 = phi_out_of_ssa.456[0];
      # DEBUG dest => NULL
      # DEBUG stage => NULL
      dest_69 = dest_68 / gK.133_23;
      # .MEM_70 = VDEF <.MEM_73>
      Close_Phi.457[0] = dest_69;
      # .MEM_71 = VDEF <.MEM_70>
      phi_out_of_ssa.456[0] = dest_69;
      # DEBUG dest => NULL
      # DEBUG stage => NULL
      # DEBUG dest => NULL
      # DEBUG stage => NULL
      graphite_IV.459_67 = graphite_IV.459_66 + 1;
      if (graphite_IV.459_66 < _65)
        goto <bb 19>;
      else
        goto <bb 20>;

    }
    bb_19 (preds = {bb_18 }, succs = {bb_18 })
    {
      <bb 19>:
      goto <bb 18>;

    }
  }
}

Pass statistics:
----------------

void dest_tag_fly(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45751, const struct FlitD.29321 * fD.45752, intD.9 in_channelD.45753, struct OutputSetD.28230 * outputsD.45754, boolD.2757 injectD.45755)
{
  signed long graphite_IV.459D.54702;
  intD.9 Cross_BB_scalar_dependence.458D.54701[1];
  intD.9 D.54700;
  intD.9 D.54699;
  intD.9 D.54698;
  intD.9 Close_Phi.457D.54697[1];
  intD.9 phi_out_of_ssa.456D.54696[1];
  intD.9 destD.45763;
  intD.9 stageD.45762;
  intD.9 out_portD.45761;
  static const charD.10 _ZZ12dest_tag_flyPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45760[69] = "void dest_tag_fly(const Router*, const Flit*, int, OutputSet*, bool)";
  intD.9 vcEndD.45759;
  intD.9 vcBeginD.45758;
  intD.9 gNumVCs.132_7;
  FlitTypeD.29324 _10;
  intD.9 _19;
  intD.9 gK.133_23;
  intD.9 _24;
  intD.9 gNodes.134_25;
  const intD.9 _36;
  boolD.2757 _37;
  intD.9 _38;
  boolD.2757 _41;
  boolD.2757 _42;
  intD.9 gN.135_48;
  boolD.2757 _50;
  signed long _57;
  signed long _58;
  signed long _59;
  signed long _60;
  signed long _61;
  signed long _62;
  boolD.2757 _63;
  signed long _64;
  signed long _65;

;;   basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG vcBeginD.45758 => 0
  # DEBUG D#150ptD.0 => gNumVCsD.42077
  # DEBUG vcEndD.45759 => D#150ptD.0 + -1
  # VUSE <.MEM_6(D)>
  _10 = f_9(D)->typeD.29330;
  if (_10 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 5000, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_6(D)>
  vcBegin_11 = gReadReqBeginVCD.42078;
  # DEBUG vcBeginD.45758 => vcBegin_11
  # VUSE <.MEM_6(D)>
  vcEnd_12 = gReadReqEndVCD.42079;
  # DEBUG vcEndD.45759 => vcEnd_12
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 5000, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_10 == 2)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 1400, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_6(D)>
  vcBegin_13 = gWriteReqBeginVCD.42080;
  # DEBUG vcBeginD.45758 => vcBegin_13
  # VUSE <.MEM_6(D)>
  vcEnd_14 = gWriteReqEndVCD.42081;
  # DEBUG vcEndD.45759 => vcEnd_14
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 3600, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_10 == 1)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 1008, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_6(D)>
  vcBegin_15 = gReadReplyBeginVCD.42082;
  # DEBUG vcBeginD.45758 => vcBegin_15
  # VUSE <.MEM_6(D)>
  vcEnd_16 = gReadReplyEndVCD.42083;
  # DEBUG vcEndD.45759 => vcEnd_16
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 2592, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_6(D)>
  gNumVCs.132_7 = gNumVCsD.42077;
  if (_10 == 3)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 1866, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  vcEnd_8 = gNumVCs.132_7 + -1;
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 726, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_6(D)>
  vcBegin_17 = gWriteReplyBeginVCD.42084;
  # DEBUG vcBeginD.45758 => vcBegin_17
  # VUSE <.MEM_6(D)>
  vcEnd_18 = gWriteReplyEndVCD.42085;
  # DEBUG vcEndD.45759 => vcEnd_18
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # vcBegin_1 = PHI <vcBegin_11(3), vcBegin_13(5), vcBegin_15(7), 0(9), vcBegin_17(10)>
  # vcEnd_2 = PHI <vcEnd_12(3), vcEnd_14(5), vcEnd_16(7), vcEnd_8(9), vcEnd_18(10)>
  # DEBUG vcEndD.45759 => vcEnd_2
  # DEBUG vcBeginD.45758 => vcBegin_1
  # VUSE <.MEM_6(D)>
  _19 = f_9(D)->vcD.29331;
  _37 = vcEnd_2 < _19;
  _42 = vcBegin_1 > _19;
  _41 = _37 | _42;
  if (_41 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 5000, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  _50 = _19 >= 0;
  if (inject_20(D) <= _50)
    goto <bb 13>;
  else
    goto <bb 23>;
;;    succ:       13 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 2, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_21 = VDEF <.MEM_6(D)>
  # USE = nonlocal null { D.45760 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45760 } (nonlocal, escaped)
  __assert_failD.9858 ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 1815, &_ZZ12dest_tag_flyPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45760);
;;    succ:      

;;   basic block 14, loop depth 0, count 0, freq 5000, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (inject_20(D) != 0)
    goto <bb 22>;
  else
    goto <bb 15>;
;;    succ:       22 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 2500, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_6(D)>
  _36 = MEM[(intD.9 *)r_22(D) + 96B];
  # DEBUG D#14ptD.0 => r_22(D)
  # DEBUG thisD.50838 => D#14ptD.0
  # VUSE <.MEM_6(D)>
  gK.133_23 = gKD.33726;
  _24 = gK.133_23 * _36;
  # VUSE <.MEM_6(D)>
  gNodes.134_25 = gNodesD.33729;
  stage_26 = _24 / gNodes.134_25;
  # DEBUG stageD.45762 => stage_26
  # VUSE <.MEM_6(D)>
  dest_27 = f_9(D)->destD.29342;
  # DEBUG destD.45763 => dest_27
  # DEBUG destD.45763 => dest_27
  # DEBUG stageD.45762 => stage_26
  # VUSE <.MEM_6(D)>
  gN.135_48 = gND.33727;
  _38 = gN.135_48 + -1;
  if (stage_26 >= _38)
    goto <bb 21>;
  else
    goto <bb 16>;
;;    succ:       21 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 1250, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       15 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_52 = VDEF <.MEM_6(D)>
  phi_out_of_ssa.456D.54696[0] = dest_27;
  _57 = (signed long) stage_26;
  _58 = (signed long) gN.135_48;
  _59 = _57 - _58;
  _60 = _59 + 4294967297;
  _61 = _60 % 4294967296;
  _62 = 4294967296 - _61;
  _63 = _62 > 0;
  if (_63 != 0)
    goto <bb 17>;
  else
    goto <bb 20>;
;;    succ:       17 [50.0%]  (TRUE_VALUE)
;;                20 [50.0%]  (FALSE_VALUE)

;;   basic block 17, loop depth 0, count 0, freq 625, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [50.0%]  (TRUE_VALUE)
  _64 = _60 % 4294967296;
  _65 = 4294967295 - _64;
;;    succ:       18 [100.0%]  (FALLTHRU)

;;   basic block 18, loop depth 1, count 0, freq 6944, maybe hot
;;    prev block 17, next block 19, flags: (NEW)
;;    pred:       17 [100.0%]  (FALLTHRU)
;;                19 [100.0%]  (FALLTHRU,DFS_BACK)
  # graphite_IV.459_66 = PHI <0(17), graphite_IV.459_67(19)>
  # .MEM_73 = PHI <.MEM_52(17), .MEM_71(19)>
  # VUSE <.MEM_73>
  dest_68 = phi_out_of_ssa.456D.54696[0];
  # DEBUG destD.45763 => NULL
  # DEBUG stageD.45762 => NULL
  dest_69 = dest_68 / gK.133_23;
  # .MEM_70 = VDEF <.MEM_73>
  Close_Phi.457D.54697[0] = dest_69;
  # .MEM_71 = VDEF <.MEM_70>
  phi_out_of_ssa.456D.54696[0] = dest_69;
  # DEBUG destD.45763 => NULL
  # DEBUG stageD.45762 => NULL
  # DEBUG destD.45763 => NULL
  # DEBUG stageD.45762 => NULL
  graphite_IV.459_67 = graphite_IV.459_66 + 1;
  if (graphite_IV.459_66 < _65)
    goto <bb 19>;
  else
    goto <bb 20>;
;;    succ:       19 [91.0%]  (TRUE_VALUE)
;;                20 [9.0%]  (FALSE_VALUE,LOOP_EXIT)

;;   basic block 19, loop depth 1, count 0, freq 6319, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       18 [91.0%]  (TRUE_VALUE)
  goto <bb 18>;
;;    succ:       18 [100.0%]  (FALLTHRU,DFS_BACK)

;;   basic block 20, loop depth 0, count 0, freq 1250, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       18 [9.0%]  (FALSE_VALUE,LOOP_EXIT)
;;                16 [50.0%]  (FALSE_VALUE)
  # .MEM_72 = PHI <.MEM_71(18), .MEM_52(16)>
  # VUSE <.MEM_72>
  dest_74 = Close_Phi.457D.54697[0];
  # .MEM_75 = VDEF <.MEM_72>
  Cross_BB_scalar_dependence.458D.54701[0] = dest_74;
  # VUSE <.MEM_75>
  dest_28 = Cross_BB_scalar_dependence.458D.54701[0];
  _29 = dest_28;
;;    succ:       21 [100.0%]  (FALLTHRU)

;;   basic block 21, loop depth 0, count 0, freq 2500, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [100.0%]  (FALLTHRU)
;;                15 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # dest_46 = PHI <_29(20), dest_27(15)>
  # .MEM_55 = PHI <.MEM_75(20), .MEM_6(D)(15)>
  out_port_32 = dest_46 % gK.133_23;
  # DEBUG out_portD.45761 => out_port_32
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 5000, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       14 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [100.0%]  (FALLTHRU,EXECUTABLE)
  # out_port_47 = PHI <-1(14), out_port_32(21)>
  # .MEM_54 = PHI <.MEM_6(D)(14), .MEM_55(21)>
;;    succ:       23 [100.0%]  (FALLTHRU)

;;   basic block 23, loop depth 0, count 0, freq 9998, maybe hot
;;    prev block 22, next block 1, flags: (NEW)
;;    pred:       22 [100.0%]  (FALLTHRU)
;;                12 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # out_port_3 = PHI <out_port_47(22), -1(12)>
  # .MEM_53 = PHI <.MEM_54(22), .MEM_6(D)(12)>
  # DEBUG out_portD.45761 => out_port_3
  # .MEM_34 = VDEF <.MEM_53>
  # USE = nonlocal null { D.45760 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45760 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_33(D));
  # .MEM_35 = VDEF <.MEM_34>
  # USE = nonlocal null { D.45760 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45760 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_33(D), out_port_3, vcBegin_1, vcEnd_2, 0);
  # VUSE <.MEM_35>
  return;
;;    succ:       EXIT [100.0%] 

}



;; Function void chaos_torus(const Router*, const Flit*, int, OutputSet*, bool) (_Z11chaos_torusPK6RouterPK4FlitiP9OutputSetb, funcdef_no=1989, decl_uid=45771, cgraph_uid=488, symbol_order=499)


Pass statistics:
----------------

void chaos_torus(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45766, const struct FlitD.29321 * fD.45767, intD.9 in_channelD.45768, struct OutputSetD.28230 * outputsD.45769, boolD.2757 injectD.45770)
{
  intD.9 dist2D.45776;
  intD.9 nD.45775;
  intD.9 destD.45774;
  intD.9 curD.45773;
  intD.9 pretmp_4;
  intD.9 prephitmp_5;
  intD.9 _19;
  intD.9 _21;
  intD.9 _23;
  intD.9 _24;
  intD.9 _25;
  intD.9 _26;
  intD.9 _28;
  intD.9 _30;
  intD.9 _31;
  intD.9 gN.136_37;
  intD.9 _38;
  intD.9 gN.136_42;
  intD.9 prephitmp_52;
  intD.9 pretmp_53;
  intD.9 pretmp_54;
  intD.9 prephitmp_55;
  intD.9 pretmp_58;
  intD.9 pretmp_59;
  intD.9 prephitmp_60;

;;   basic block 2, loop depth 0, count 0, freq 1315, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_10 = VDEF <.MEM_8(D)>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZN9OutputSet5ClearEvD.28238 (outputs_9(D));
  if (inject_11(D) != 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [20.7%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [79.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 272, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [20.7%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_12 = VDEF <.MEM_10>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_9(D), -1, 0, 0, 0);
  goto <bb 16>;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 1043, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [79.3%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_10>
  cur_40 = MEM[(intD.9 *)r_13(D) + 96B];
  # DEBUG D#14ptD.0 => r_13(D)
  # DEBUG thisD.50842 => D#14ptD.0
  # DEBUG curD.45773 => NULL
  # VUSE <.MEM_10>
  dest_16 = f_15(D)->destD.29342;
  # DEBUG destD.45774 => dest_16
  if (dest_16 != cur_40)
    goto <bb 5>;
  else
    goto <bb 15>;
;;    succ:       5 [86.3%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [13.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [86.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG nD.45775 => 0
  # DEBUG destD.45774 => dest_16
  # DEBUG curD.45773 => cur_40
  # VUSE <.MEM_10>
  gN.136_42 = gND.33727;
  if (gN.136_42 <= 0)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_57 = PHI <.MEM_10(5), .MEM_6(13)>
  goto <bb 16>;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_10>
  pretmp_4 = gKD.33726;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # cur_48 = PHI <cur_40(7), cur_34(14)>
  # dest_43 = PHI <dest_16(7), dest_35(14)>
  # n_49 = PHI <0(7), n_36(14)>
  # .MEM_50 = PHI <.MEM_10(7), .MEM_6(14)>
  # prephitmp_5 = PHI <pretmp_4(7), prephitmp_55(14)>
  # prephitmp_52 = PHI <gN.136_42(7), prephitmp_60(14)>
  # DEBUG nD.45775 => n_49
  # DEBUG destD.45774 => dest_43
  # DEBUG curD.45773 => cur_48
  _19 = cur_48 % prephitmp_5;
  _21 = dest_43 % prephitmp_5;
  if (_19 != _21)
    goto <bb 9>;
  else
    goto <bb 13>;
;;    succ:       9 [72.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [28.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 6552, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [72.0%]  (TRUE_VALUE,EXECUTABLE)
  _23 = _21 - _19;
  _24 = prephitmp_5 + _23;
  _25 = _24 % prephitmp_5;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _26 = _25 * -2;
  dist2_27 = prephitmp_5 + _26;
  # DEBUG dist2D.45776 => dist2_27
  if (dist2_27 >= 0)
    goto <bb 11>;
  else
    goto <bb 10>;
;;    succ:       11 [52.5%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [47.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 3114, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [47.5%]  (FALSE_VALUE,EXECUTABLE)
;;                11 (TRUE_VALUE,EXECUTABLE)
  # .MEM_56 = PHI <.MEM_50(9), .MEM_29(11)>
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _30 = n_49 * 2;
  # RANGE [-2147483647, 2147483647]
  _31 = _30 + 1;
  # .MEM_32 = VDEF <.MEM_56>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_9(D), _31, 0, 0, 0);
  # VUSE <.MEM_32>
  pretmp_53 = gKD.33726;
  # VUSE <.MEM_32>
  pretmp_58 = gND.33727;
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 3438, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       9 [52.5%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _28 = n_49 * 2;
  # .MEM_29 = VDEF <.MEM_50>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_9(D), _28, 0, 0, 0);
  if (dist2_27 <= 0)
    goto <bb 10>;
  else
    goto <bb 12>;
;;    succ:       10 (TRUE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 3438, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       11 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_29>
  pretmp_54 = gKD.33726;
  # VUSE <.MEM_29>
  pretmp_59 = gND.33727;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (FALSE_VALUE,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_6 = PHI <.MEM_50(8), .MEM_32(10), .MEM_29(12)>
  # prephitmp_55 = PHI <prephitmp_5(8), pretmp_53(10), pretmp_54(12)>
  # prephitmp_60 = PHI <prephitmp_52(8), pretmp_58(10), pretmp_59(12)>
  cur_34 = cur_48 / prephitmp_55;
  # DEBUG curD.45773 => cur_34
  dest_35 = dest_43 / prephitmp_55;
  # DEBUG destD.45774 => dest_35
  n_36 = n_49 + 1;
  # DEBUG nD.45775 => n_36
  # DEBUG nD.45775 => n_36
  # DEBUG destD.45774 => dest_35
  # DEBUG curD.45773 => cur_34
  if (n_36 >= prephitmp_60)
    goto <bb 6>;
  else
    goto <bb 14>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 143, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       4 [13.7%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_10>
  gN.136_37 = gND.33727;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _38 = gN.136_37 * 2;
  # .MEM_39 = VDEF <.MEM_10>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_9(D), _38, 0, 0, 0);
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 1315, maybe hot
;;    prev block 15, next block 1, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_7 = PHI <.MEM_12(3), .MEM_57(6), .MEM_39(15)>
  # VUSE <.MEM_7>
  return;
;;    succ:       EXIT [100.0%] 

}



Updating SSA:
Registering new PHI nodes in block #8
Registering new PHI nodes in block #9
Registering new PHI nodes in block #11
Registering new PHI nodes in block #12
Registering new PHI nodes in block #10
Registering new PHI nodes in block #13
Registering new PHI nodes in block #14
Registering new PHI nodes in block #17

DFA Statistics for void chaos_torus(const Router*, const Flit*, int, OutputSet*, bool)

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             56        448b
DEF operands                             23        184b
VUSE operands                            15        120b
VDEF operands                             5         40b
PHI nodes                                13       1352b
PHI arguments                            29       1392b
---------------------------------------------------------
Total memory used by DFA/SSA data                 3536b
---------------------------------------------------------

Average number of arguments per PHI node: 2.2 (max: 3)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_47 -> { .MEM_6 }
Incremental SSA update started at block: 8
Number of blocks in CFG: 18
Number of blocks to update: 4 ( 22%)
Affected blocks: 8 13 14 17


Creating dr for MEM[(int *)r_13(D) + 96B]
analyze_innermost: success.
	base_address: r_13(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(int *)r_13(D) + 96B]
Creating dr for f_15(D)->dest
analyze_innermost: success.
	base_address: f_15(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_15(D)
	Access function 0: 352
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:20, LOOPS:1, CONDITIONS:7, STMTS:53)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # .MEM_10 = VDEF <.MEM_8(D)>
    OutputSet::Clear (outputs_9(D));
    if (inject_11(D) != 0)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_16 })
  {
    <bb 3>:
    # .MEM_12 = VDEF <.MEM_10>
    OutputSet::AddRange (outputs_9(D), -1, 0, 0, 0);
    goto <bb 16>;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 bb_15 })
  {
    <bb 4>:
    # VUSE <.MEM_10>
    cur_40 = MEM[(int *)r_13(D) + 96B];
    # DEBUG D#14 => r_13(D)
    # DEBUG this => D#14
    # DEBUG cur => NULL
    # VUSE <.MEM_10>
    dest_16 = f_15(D)->dest;
    # DEBUG dest => dest_16
    if (dest_16 != cur_40)
      goto <bb 5>;
    else
      goto <bb 15>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_6 bb_7 })
  {
    <bb 5>:
    # DEBUG n => 0
    # DEBUG dest => dest_16
    # DEBUG cur => cur_40
    # VUSE <.MEM_10>
    gN.136_42 = gN;
    if (gN.136_42 <= 0)
      goto <bb 6>;
    else
      goto <bb 7>;

  }
  bb_6 (preds = {bb_5 bb_17 }, succs = {bb_18 })
  {
    <bb 6>:
    # .MEM_57 = PHI <.MEM_10(5), .MEM_47(17)>

  }
  bb_18 (preds = {bb_6 }, succs = {bb_16 })
  {
    <bb 18>:
    goto <bb 16>;

  }
  bb_7 (preds = {bb_5 }, succs = {bb_8 })
  {
    <bb 7>:
    # VUSE <.MEM_10>
    pretmp_4 = gK;

  }
  bb_17 (preds = {bb_13 }, succs = {bb_6 })
  {
    <bb 17>:
    # .MEM_47 = PHI <.MEM_6(13)>
    goto <bb 6>;

  }
  bb_15 (preds = {bb_4 }, succs = {bb_16 })
  {
    <bb 15>:
    # VUSE <.MEM_10>
    gN.136_37 = gN;
    _38 = gN.136_37 * 2;
    # .MEM_39 = VDEF <.MEM_10>
    OutputSet::AddRange (outputs_9(D), _38, 0, 0, 0);

  }
  bb_16 (preds = {bb_3 bb_18 bb_15 }, succs = {bb_19 })
  {
    <bb 16>:
    # .MEM_7 = PHI <.MEM_12(3), .MEM_57(18), .MEM_39(15)>

  }
  bb_19 (preds = {bb_16 }, succs = {bb_1 })
  {
    <bb 19>:
    # VUSE <.MEM_7>
    return;

  }
  loop_1 (header = 8, latch = 14, niter = , upper_bound = 2147483647)
  {
    bb_8 (preds = {bb_7 bb_14 }, succs = {bb_9 bb_13 })
    {
      <bb 8>:
      # cur_48 = PHI <cur_40(7), cur_34(14)>
      # dest_43 = PHI <dest_16(7), dest_35(14)>
      # n_49 = PHI <0(7), n_36(14)>
      # .MEM_50 = PHI <.MEM_10(7), .MEM_6(14)>
      # prephitmp_5 = PHI <pretmp_4(7), prephitmp_55(14)>
      # prephitmp_52 = PHI <gN.136_42(7), prephitmp_60(14)>
      # DEBUG n => n_49
      # DEBUG dest => dest_43
      # DEBUG cur => cur_48
      _19 = cur_48 % prephitmp_5;
      _21 = dest_43 % prephitmp_5;
      if (_19 != _21)
        goto <bb 9>;
      else
        goto <bb 13>;

    }
    bb_9 (preds = {bb_8 }, succs = {bb_11 bb_10 })
    {
      <bb 9>:
      _23 = _21 - _19;
      _24 = prephitmp_5 + _23;
      _25 = _24 % prephitmp_5;
      _26 = _25 * -2;
      dist2_27 = prephitmp_5 + _26;
      # DEBUG dist2 => dist2_27
      if (dist2_27 >= 0)
        goto <bb 11>;
      else
        goto <bb 10>;

    }
    bb_10 (preds = {bb_9 bb_11 }, succs = {bb_13 })
    {
      <bb 10>:
      # .MEM_56 = PHI <.MEM_50(9), .MEM_29(11)>
      _30 = n_49 * 2;
      _31 = _30 + 1;
      # .MEM_32 = VDEF <.MEM_56>
      OutputSet::AddRange (outputs_9(D), _31, 0, 0, 0);
      # VUSE <.MEM_32>
      pretmp_53 = gK;
      # VUSE <.MEM_32>
      pretmp_58 = gN;
      goto <bb 13>;

    }
    bb_11 (preds = {bb_9 }, succs = {bb_10 bb_12 })
    {
      <bb 11>:
      _28 = n_49 * 2;
      # .MEM_29 = VDEF <.MEM_50>
      OutputSet::AddRange (outputs_9(D), _28, 0, 0, 0);
      if (dist2_27 <= 0)
        goto <bb 10>;
      else
        goto <bb 12>;

    }
    bb_12 (preds = {bb_11 }, succs = {bb_13 })
    {
      <bb 12>:
      # VUSE <.MEM_29>
      pretmp_54 = gK;
      # VUSE <.MEM_29>
      pretmp_59 = gN;

    }
    bb_13 (preds = {bb_8 bb_10 bb_12 }, succs = {bb_17 bb_14 })
    {
      <bb 13>:
      # .MEM_6 = PHI <.MEM_50(8), .MEM_32(10), .MEM_29(12)>
      # prephitmp_55 = PHI <prephitmp_5(8), pretmp_53(10), pretmp_54(12)>
      # prephitmp_60 = PHI <prephitmp_52(8), pretmp_58(10), pretmp_59(12)>
      cur_34 = cur_48 / prephitmp_55;
      # DEBUG cur => cur_34
      dest_35 = dest_43 / prephitmp_55;
      # DEBUG dest => dest_35
      n_36 = n_49 + 1;
      # DEBUG n => n_36
      # DEBUG n => n_36
      # DEBUG dest => dest_35
      # DEBUG cur => cur_34
      if (n_36 >= prephitmp_60)
        goto <bb 17>;
      else
        goto <bb 14>;

    }
    bb_14 (preds = {bb_13 }, succs = {bb_8 })
    {
      <bb 14>:
      goto <bb 8>;

    }
  }
}

Pass statistics:
----------------

void chaos_torus(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45766, const struct FlitD.29321 * fD.45767, intD.9 in_channelD.45768, struct OutputSetD.28230 * outputsD.45769, boolD.2757 injectD.45770)
{
  intD.9 dist2D.45776;
  intD.9 nD.45775;
  intD.9 destD.45774;
  intD.9 curD.45773;
  intD.9 pretmp_4;
  intD.9 prephitmp_5;
  intD.9 _19;
  intD.9 _21;
  intD.9 _23;
  intD.9 _24;
  intD.9 _25;
  intD.9 _26;
  intD.9 _28;
  intD.9 _30;
  intD.9 _31;
  intD.9 gN.136_37;
  intD.9 _38;
  intD.9 gN.136_42;
  intD.9 prephitmp_52;
  intD.9 pretmp_53;
  intD.9 pretmp_54;
  intD.9 prephitmp_55;
  intD.9 pretmp_58;
  intD.9 pretmp_59;
  intD.9 prephitmp_60;

;;   basic block 2, loop depth 0, count 0, freq 1315, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_10 = VDEF <.MEM_8(D)>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZN9OutputSet5ClearEvD.28238 (outputs_9(D));
  if (inject_11(D) != 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [20.7%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [79.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 272, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [20.7%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_12 = VDEF <.MEM_10>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_9(D), -1, 0, 0, 0);
  goto <bb 16>;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 1043, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [79.3%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_10>
  cur_40 = MEM[(intD.9 *)r_13(D) + 96B];
  # DEBUG D#14ptD.0 => r_13(D)
  # DEBUG thisD.50842 => D#14ptD.0
  # DEBUG curD.45773 => NULL
  # VUSE <.MEM_10>
  dest_16 = f_15(D)->destD.29342;
  # DEBUG destD.45774 => dest_16
  if (dest_16 != cur_40)
    goto <bb 5>;
  else
    goto <bb 15>;
;;    succ:       5 [86.3%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [13.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [86.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG nD.45775 => 0
  # DEBUG destD.45774 => dest_16
  # DEBUG curD.45773 => cur_40
  # VUSE <.MEM_10>
  gN.136_42 = gND.33727;
  if (gN.136_42 <= 0)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 5, next block 18, flags: (NEW)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU)
  # .MEM_57 = PHI <.MEM_10(5), .MEM_47(17)>
;;    succ:       18 [100.0%]  (FALLTHRU)

;;   basic block 18, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 6, next block 7, flags: (NEW)
;;    pred:       6 [100.0%]  (FALLTHRU)
  goto <bb 16>;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 18, next block 8, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_10>
  pretmp_4 = gKD.33726;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # cur_48 = PHI <cur_40(7), cur_34(14)>
  # dest_43 = PHI <dest_16(7), dest_35(14)>
  # n_49 = PHI <0(7), n_36(14)>
  # .MEM_50 = PHI <.MEM_10(7), .MEM_6(14)>
  # prephitmp_5 = PHI <pretmp_4(7), prephitmp_55(14)>
  # prephitmp_52 = PHI <gN.136_42(7), prephitmp_60(14)>
  # DEBUG nD.45775 => n_49
  # DEBUG destD.45774 => dest_43
  # DEBUG curD.45773 => cur_48
  _19 = cur_48 % prephitmp_5;
  _21 = dest_43 % prephitmp_5;
  if (_19 != _21)
    goto <bb 9>;
  else
    goto <bb 13>;
;;    succ:       9 [72.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [28.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 6552, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [72.0%]  (TRUE_VALUE,EXECUTABLE)
  _23 = _21 - _19;
  _24 = prephitmp_5 + _23;
  _25 = _24 % prephitmp_5;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _26 = _25 * -2;
  dist2_27 = prephitmp_5 + _26;
  # DEBUG dist2D.45776 => dist2_27
  if (dist2_27 >= 0)
    goto <bb 11>;
  else
    goto <bb 10>;
;;    succ:       11 [52.5%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [47.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 3114, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [47.5%]  (FALSE_VALUE,EXECUTABLE)
;;                11 (TRUE_VALUE,EXECUTABLE)
  # .MEM_56 = PHI <.MEM_50(9), .MEM_29(11)>
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _30 = n_49 * 2;
  # RANGE [-2147483647, 2147483647]
  _31 = _30 + 1;
  # .MEM_32 = VDEF <.MEM_56>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_9(D), _31, 0, 0, 0);
  # VUSE <.MEM_32>
  pretmp_53 = gKD.33726;
  # VUSE <.MEM_32>
  pretmp_58 = gND.33727;
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 3438, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       9 [52.5%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _28 = n_49 * 2;
  # .MEM_29 = VDEF <.MEM_50>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_9(D), _28, 0, 0, 0);
  if (dist2_27 <= 0)
    goto <bb 10>;
  else
    goto <bb 12>;
;;    succ:       10 (TRUE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 3438, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       11 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_29>
  pretmp_54 = gKD.33726;
  # VUSE <.MEM_29>
  pretmp_59 = gND.33727;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 12, next block 17, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (FALSE_VALUE,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_6 = PHI <.MEM_50(8), .MEM_32(10), .MEM_29(12)>
  # prephitmp_55 = PHI <prephitmp_5(8), pretmp_53(10), pretmp_54(12)>
  # prephitmp_60 = PHI <prephitmp_52(8), pretmp_58(10), pretmp_59(12)>
  cur_34 = cur_48 / prephitmp_55;
  # DEBUG curD.45773 => cur_34
  dest_35 = dest_43 / prephitmp_55;
  # DEBUG destD.45774 => dest_35
  n_36 = n_49 + 1;
  # DEBUG nD.45775 => n_36
  # DEBUG nD.45775 => n_36
  # DEBUG destD.45774 => dest_35
  # DEBUG curD.45773 => cur_34
  if (n_36 >= prephitmp_60)
    goto <bb 17>;
  else
    goto <bb 14>;
;;    succ:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 13, next block 14, flags: (NEW)
;;    pred:       13 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_47 = PHI <.MEM_6(13)>
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU)

;;   basic block 14, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 17, next block 15, flags: (NEW)
;;    pred:       13 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 143, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       4 [13.7%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_10>
  gN.136_37 = gND.33727;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _38 = gN.136_37 * 2;
  # .MEM_39 = VDEF <.MEM_10>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_9(D), _38, 0, 0, 0);
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 1315, maybe hot
;;    prev block 15, next block 19, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                18 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_7 = PHI <.MEM_12(3), .MEM_57(18), .MEM_39(15)>
;;    succ:       19 [100.0%]  (FALLTHRU)

;;   basic block 19, loop depth 0, count 0, freq 1315, maybe hot
;;    prev block 16, next block 1, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_7>
  return;
;;    succ:       EXIT [100.0%] 

}



;; Function void chaos_mesh(const Router*, const Flit*, int, OutputSet*, bool) (_Z10chaos_meshPK6RouterPK4FlitiP9OutputSetb, funcdef_no=1990, decl_uid=45784, cgraph_uid=489, symbol_order=500)


Pass statistics:
----------------

void chaos_mesh(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45779, const struct FlitD.29321 * fD.45780, intD.9 in_channelD.45781, struct OutputSetD.28230 * outputsD.45782, boolD.2757 injectD.45783)
{
  intD.9 nD.45788;
  intD.9 destD.45787;
  intD.9 curD.45786;
  intD.9 pretmp_4;
  intD.9 _18;
  intD.9 prephitmp_19;
  intD.9 _20;
  intD.9 _22;
  intD.9 _23;
  intD.9 _25;
  intD.9 gN.138_31;
  intD.9 _32;
  intD.9 prephitmp_35;
  intD.9 pretmp_36;
  intD.9 gN.138_37;
  intD.9 prephitmp_38;
  intD.9 pretmp_40;
  intD.9 pretmp_46;
  intD.9 pretmp_47;
  intD.9 prephitmp_48;

;;   basic block 2, loop depth 0, count 0, freq 1315, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_9 = VDEF <.MEM_7(D)>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZN9OutputSet5ClearEvD.28238 (outputs_8(D));
  if (inject_10(D) != 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [20.7%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [79.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 272, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [20.7%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_11 = VDEF <.MEM_9>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_8(D), -1, 0, 0, 0);
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 1043, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [79.3%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_9>
  cur_34 = MEM[(intD.9 *)r_12(D) + 96B];
  # DEBUG D#14ptD.0 => r_12(D)
  # DEBUG thisD.50846 => D#14ptD.0
  # DEBUG curD.45786 => NULL
  # VUSE <.MEM_9>
  dest_15 = f_14(D)->destD.29342;
  # DEBUG destD.45787 => dest_15
  if (dest_15 != cur_34)
    goto <bb 5>;
  else
    goto <bb 14>;
;;    succ:       5 [86.3%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [13.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [86.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG nD.45788 => 0
  # DEBUG destD.45787 => dest_15
  # DEBUG curD.45786 => cur_34
  # VUSE <.MEM_9>
  gN.138_37 = gND.33727;
  if (gN.138_37 <= 0)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_45 = PHI <.MEM_9(5), .MEM_5(12)>
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_9>
  pretmp_4 = gKD.33726;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
  # cur_41 = PHI <cur_34(7), cur_28(13)>
  # dest_42 = PHI <dest_15(7), dest_29(13)>
  # n_43 = PHI <0(7), n_30(13)>
  # .MEM_44 = PHI <.MEM_9(7), .MEM_5(13)>
  # prephitmp_19 = PHI <pretmp_4(7), prephitmp_38(13)>
  # prephitmp_35 = PHI <gN.138_37(7), prephitmp_48(13)>
  # DEBUG nD.45788 => n_43
  # DEBUG destD.45787 => dest_42
  # DEBUG curD.45786 => cur_41
  _18 = cur_41 % prephitmp_19;
  _20 = dest_42 % prephitmp_19;
  if (_18 != _20)
    goto <bb 9>;
  else
    goto <bb 12>;
;;    succ:       9 [72.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [28.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 6552, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [72.0%]  (TRUE_VALUE,EXECUTABLE)
  if (_18 < _20)
    goto <bb 10>;
  else
    goto <bb 11>;
;;    succ:       10 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 3276, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _25 = n_43 * 2;
  # .MEM_26 = VDEF <.MEM_44>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_8(D), _25, 0, 0, 0);
  # VUSE <.MEM_26>
  pretmp_36 = gKD.33726;
  # VUSE <.MEM_26>
  pretmp_47 = gND.33727;
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 3276, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       9 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _22 = n_43 * 2;
  # RANGE [-2147483647, 2147483647]
  _23 = _22 + 1;
  # .MEM_24 = VDEF <.MEM_44>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_8(D), _23, 0, 0, 0);
  # VUSE <.MEM_24>
  pretmp_40 = gKD.33726;
  # VUSE <.MEM_24>
  pretmp_46 = gND.33727;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_5 = PHI <.MEM_44(8), .MEM_24(11), .MEM_26(10)>
  # prephitmp_38 = PHI <prephitmp_19(8), pretmp_40(11), pretmp_36(10)>
  # prephitmp_48 = PHI <prephitmp_35(8), pretmp_46(11), pretmp_47(10)>
  cur_28 = cur_41 / prephitmp_38;
  # DEBUG curD.45786 => cur_28
  dest_29 = dest_42 / prephitmp_38;
  # DEBUG destD.45787 => dest_29
  n_30 = n_43 + 1;
  # DEBUG nD.45788 => n_30
  # DEBUG nD.45788 => n_30
  # DEBUG destD.45787 => dest_29
  # DEBUG curD.45786 => cur_28
  if (n_30 >= prephitmp_48)
    goto <bb 6>;
  else
    goto <bb 13>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 143, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       4 [13.7%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_9>
  gN.138_31 = gND.33727;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _32 = gN.138_31 * 2;
  # .MEM_33 = VDEF <.MEM_9>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_8(D), _32, 0, 0, 0);
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 1315, maybe hot
;;    prev block 14, next block 1, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_6 = PHI <.MEM_11(3), .MEM_45(6), .MEM_33(14)>
  # VUSE <.MEM_6>
  return;
;;    succ:       EXIT [100.0%] 

}



Updating SSA:
Registering new PHI nodes in block #8
Registering new PHI nodes in block #9
Registering new PHI nodes in block #11
Registering new PHI nodes in block #10
Registering new PHI nodes in block #12
Registering new PHI nodes in block #13
Registering new PHI nodes in block #16

DFA Statistics for void chaos_mesh(const Router*, const Flit*, int, OutputSet*, bool)

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             46        368b
DEF operands                             18        144b
VUSE operands                            15        120b
VDEF operands                             5         40b
PHI nodes                                12       1248b
PHI arguments                            27       1296b
---------------------------------------------------------
Total memory used by DFA/SSA data                 3216b
---------------------------------------------------------

Average number of arguments per PHI node: 2.2 (max: 3)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_39 -> { .MEM_5 }
Incremental SSA update started at block: 8
Number of blocks in CFG: 17
Number of blocks to update: 4 ( 24%)
Affected blocks: 8 12 13 16


Creating dr for MEM[(int *)r_12(D) + 96B]
analyze_innermost: success.
	base_address: r_12(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(int *)r_12(D) + 96B]
Creating dr for f_14(D)->dest
analyze_innermost: success.
	base_address: f_14(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_14(D)
	Access function 0: 352
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:19, LOOPS:1, CONDITIONS:6, STMTS:46)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # .MEM_9 = VDEF <.MEM_7(D)>
    OutputSet::Clear (outputs_8(D));
    if (inject_10(D) != 0)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_15 })
  {
    <bb 3>:
    # .MEM_11 = VDEF <.MEM_9>
    OutputSet::AddRange (outputs_8(D), -1, 0, 0, 0);
    goto <bb 15>;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 bb_14 })
  {
    <bb 4>:
    # VUSE <.MEM_9>
    cur_34 = MEM[(int *)r_12(D) + 96B];
    # DEBUG D#14 => r_12(D)
    # DEBUG this => D#14
    # DEBUG cur => NULL
    # VUSE <.MEM_9>
    dest_15 = f_14(D)->dest;
    # DEBUG dest => dest_15
    if (dest_15 != cur_34)
      goto <bb 5>;
    else
      goto <bb 14>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_6 bb_7 })
  {
    <bb 5>:
    # DEBUG n => 0
    # DEBUG dest => dest_15
    # DEBUG cur => cur_34
    # VUSE <.MEM_9>
    gN.138_37 = gN;
    if (gN.138_37 <= 0)
      goto <bb 6>;
    else
      goto <bb 7>;

  }
  bb_6 (preds = {bb_5 bb_16 }, succs = {bb_17 })
  {
    <bb 6>:
    # .MEM_45 = PHI <.MEM_9(5), .MEM_39(16)>

  }
  bb_17 (preds = {bb_6 }, succs = {bb_15 })
  {
    <bb 17>:
    goto <bb 15>;

  }
  bb_7 (preds = {bb_5 }, succs = {bb_8 })
  {
    <bb 7>:
    # VUSE <.MEM_9>
    pretmp_4 = gK;

  }
  bb_16 (preds = {bb_12 }, succs = {bb_6 })
  {
    <bb 16>:
    # .MEM_39 = PHI <.MEM_5(12)>
    goto <bb 6>;

  }
  bb_14 (preds = {bb_4 }, succs = {bb_15 })
  {
    <bb 14>:
    # VUSE <.MEM_9>
    gN.138_31 = gN;
    _32 = gN.138_31 * 2;
    # .MEM_33 = VDEF <.MEM_9>
    OutputSet::AddRange (outputs_8(D), _32, 0, 0, 0);

  }
  bb_15 (preds = {bb_3 bb_17 bb_14 }, succs = {bb_18 })
  {
    <bb 15>:
    # .MEM_6 = PHI <.MEM_11(3), .MEM_45(17), .MEM_33(14)>

  }
  bb_18 (preds = {bb_15 }, succs = {bb_1 })
  {
    <bb 18>:
    # VUSE <.MEM_6>
    return;

  }
  loop_1 (header = 8, latch = 13, niter = , upper_bound = 2147483647)
  {
    bb_8 (preds = {bb_7 bb_13 }, succs = {bb_9 bb_12 })
    {
      <bb 8>:
      # cur_41 = PHI <cur_34(7), cur_28(13)>
      # dest_42 = PHI <dest_15(7), dest_29(13)>
      # n_43 = PHI <0(7), n_30(13)>
      # .MEM_44 = PHI <.MEM_9(7), .MEM_5(13)>
      # prephitmp_19 = PHI <pretmp_4(7), prephitmp_38(13)>
      # prephitmp_35 = PHI <gN.138_37(7), prephitmp_48(13)>
      # DEBUG n => n_43
      # DEBUG dest => dest_42
      # DEBUG cur => cur_41
      _18 = cur_41 % prephitmp_19;
      _20 = dest_42 % prephitmp_19;
      if (_18 != _20)
        goto <bb 9>;
      else
        goto <bb 12>;

    }
    bb_9 (preds = {bb_8 }, succs = {bb_10 bb_11 })
    {
      <bb 9>:
      if (_18 < _20)
        goto <bb 10>;
      else
        goto <bb 11>;

    }
    bb_10 (preds = {bb_9 }, succs = {bb_12 })
    {
      <bb 10>:
      _25 = n_43 * 2;
      # .MEM_26 = VDEF <.MEM_44>
      OutputSet::AddRange (outputs_8(D), _25, 0, 0, 0);
      # VUSE <.MEM_26>
      pretmp_36 = gK;
      # VUSE <.MEM_26>
      pretmp_47 = gN;
      goto <bb 12>;

    }
    bb_11 (preds = {bb_9 }, succs = {bb_12 })
    {
      <bb 11>:
      _22 = n_43 * 2;
      _23 = _22 + 1;
      # .MEM_24 = VDEF <.MEM_44>
      OutputSet::AddRange (outputs_8(D), _23, 0, 0, 0);
      # VUSE <.MEM_24>
      pretmp_40 = gK;
      # VUSE <.MEM_24>
      pretmp_46 = gN;

    }
    bb_12 (preds = {bb_8 bb_11 bb_10 }, succs = {bb_16 bb_13 })
    {
      <bb 12>:
      # .MEM_5 = PHI <.MEM_44(8), .MEM_24(11), .MEM_26(10)>
      # prephitmp_38 = PHI <prephitmp_19(8), pretmp_40(11), pretmp_36(10)>
      # prephitmp_48 = PHI <prephitmp_35(8), pretmp_46(11), pretmp_47(10)>
      cur_28 = cur_41 / prephitmp_38;
      # DEBUG cur => cur_28
      dest_29 = dest_42 / prephitmp_38;
      # DEBUG dest => dest_29
      n_30 = n_43 + 1;
      # DEBUG n => n_30
      # DEBUG n => n_30
      # DEBUG dest => dest_29
      # DEBUG cur => cur_28
      if (n_30 >= prephitmp_48)
        goto <bb 16>;
      else
        goto <bb 13>;

    }
    bb_13 (preds = {bb_12 }, succs = {bb_8 })
    {
      <bb 13>:
      goto <bb 8>;

    }
  }
}

Pass statistics:
----------------

void chaos_mesh(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45779, const struct FlitD.29321 * fD.45780, intD.9 in_channelD.45781, struct OutputSetD.28230 * outputsD.45782, boolD.2757 injectD.45783)
{
  intD.9 nD.45788;
  intD.9 destD.45787;
  intD.9 curD.45786;
  intD.9 pretmp_4;
  intD.9 _18;
  intD.9 prephitmp_19;
  intD.9 _20;
  intD.9 _22;
  intD.9 _23;
  intD.9 _25;
  intD.9 gN.138_31;
  intD.9 _32;
  intD.9 prephitmp_35;
  intD.9 pretmp_36;
  intD.9 gN.138_37;
  intD.9 prephitmp_38;
  intD.9 pretmp_40;
  intD.9 pretmp_46;
  intD.9 pretmp_47;
  intD.9 prephitmp_48;

;;   basic block 2, loop depth 0, count 0, freq 1315, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_9 = VDEF <.MEM_7(D)>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZN9OutputSet5ClearEvD.28238 (outputs_8(D));
  if (inject_10(D) != 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [20.7%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [79.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 272, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [20.7%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_11 = VDEF <.MEM_9>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_8(D), -1, 0, 0, 0);
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 1043, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [79.3%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_9>
  cur_34 = MEM[(intD.9 *)r_12(D) + 96B];
  # DEBUG D#14ptD.0 => r_12(D)
  # DEBUG thisD.50846 => D#14ptD.0
  # DEBUG curD.45786 => NULL
  # VUSE <.MEM_9>
  dest_15 = f_14(D)->destD.29342;
  # DEBUG destD.45787 => dest_15
  if (dest_15 != cur_34)
    goto <bb 5>;
  else
    goto <bb 14>;
;;    succ:       5 [86.3%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [13.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [86.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG nD.45788 => 0
  # DEBUG destD.45787 => dest_15
  # DEBUG curD.45786 => cur_34
  # VUSE <.MEM_9>
  gN.138_37 = gND.33727;
  if (gN.138_37 <= 0)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 5, next block 17, flags: (NEW)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [100.0%]  (FALLTHRU)
  # .MEM_45 = PHI <.MEM_9(5), .MEM_39(16)>
;;    succ:       17 [100.0%]  (FALLTHRU)

;;   basic block 17, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 6, next block 7, flags: (NEW)
;;    pred:       6 [100.0%]  (FALLTHRU)
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 17, next block 8, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_9>
  pretmp_4 = gKD.33726;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                13 [100.0%]  (FALLTHRU,EXECUTABLE)
  # cur_41 = PHI <cur_34(7), cur_28(13)>
  # dest_42 = PHI <dest_15(7), dest_29(13)>
  # n_43 = PHI <0(7), n_30(13)>
  # .MEM_44 = PHI <.MEM_9(7), .MEM_5(13)>
  # prephitmp_19 = PHI <pretmp_4(7), prephitmp_38(13)>
  # prephitmp_35 = PHI <gN.138_37(7), prephitmp_48(13)>
  # DEBUG nD.45788 => n_43
  # DEBUG destD.45787 => dest_42
  # DEBUG curD.45786 => cur_41
  _18 = cur_41 % prephitmp_19;
  _20 = dest_42 % prephitmp_19;
  if (_18 != _20)
    goto <bb 9>;
  else
    goto <bb 12>;
;;    succ:       9 [72.0%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [28.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 6552, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [72.0%]  (TRUE_VALUE,EXECUTABLE)
  if (_18 < _20)
    goto <bb 10>;
  else
    goto <bb 11>;
;;    succ:       10 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 3276, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _25 = n_43 * 2;
  # .MEM_26 = VDEF <.MEM_44>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_8(D), _25, 0, 0, 0);
  # VUSE <.MEM_26>
  pretmp_36 = gKD.33726;
  # VUSE <.MEM_26>
  pretmp_47 = gND.33727;
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 3276, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       9 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _22 = n_43 * 2;
  # RANGE [-2147483647, 2147483647]
  _23 = _22 + 1;
  # .MEM_24 = VDEF <.MEM_44>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_8(D), _23, 0, 0, 0);
  # VUSE <.MEM_24>
  pretmp_40 = gKD.33726;
  # VUSE <.MEM_24>
  pretmp_46 = gND.33727;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 11, next block 16, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_5 = PHI <.MEM_44(8), .MEM_24(11), .MEM_26(10)>
  # prephitmp_38 = PHI <prephitmp_19(8), pretmp_40(11), pretmp_36(10)>
  # prephitmp_48 = PHI <prephitmp_35(8), pretmp_46(11), pretmp_47(10)>
  cur_28 = cur_41 / prephitmp_38;
  # DEBUG curD.45786 => cur_28
  dest_29 = dest_42 / prephitmp_38;
  # DEBUG destD.45787 => dest_29
  n_30 = n_43 + 1;
  # DEBUG nD.45788 => n_30
  # DEBUG nD.45788 => n_30
  # DEBUG destD.45787 => dest_29
  # DEBUG curD.45786 => cur_28
  if (n_30 >= prephitmp_48)
    goto <bb 16>;
  else
    goto <bb 13>;
;;    succ:       16 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 12, next block 13, flags: (NEW)
;;    pred:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_39 = PHI <.MEM_5(12)>
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU)

;;   basic block 13, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 16, next block 14, flags: (NEW)
;;    pred:       12 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 143, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       4 [13.7%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_9>
  gN.138_31 = gND.33727;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _32 = gN.138_31 * 2;
  # .MEM_33 = VDEF <.MEM_9>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_8(D), _32, 0, 0, 0);
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 1315, maybe hot
;;    prev block 14, next block 18, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_6 = PHI <.MEM_11(3), .MEM_45(17), .MEM_33(14)>
;;    succ:       18 [100.0%]  (FALLTHRU)

;;   basic block 18, loop depth 0, count 0, freq 1315, maybe hot
;;    prev block 15, next block 1, flags: (NEW)
;;    pred:       15 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_6>
  return;
;;    succ:       EXIT [100.0%] 

}



;; Function void tree4_anca(const Router*, const Flit*, int, OutputSet*, bool) (_Z10tree4_ancaPK6RouterPK4FlitiP9OutputSetb, funcdef_no=1965, decl_uid=45376, cgraph_uid=464, symbol_order=475)


Pass statistics:
----------------

void tree4_anca(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45371, const struct FlitD.29321 * fD.45372, intD.9 in_channelD.45373, struct OutputSetD.28230 * outputsD.45374, boolD.2757 injectD.45375)
{
  intD.9 iD.45387;
  intD.9 rPD.45386;
  intD.9 rHD.45385;
  intD.9 destD.45383;
  intD.9 out_portD.45382;
  intD.9 rangeD.45381;
  static const charD.10 _ZZ10tree4_ancaPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45380[67] = "void tree4_anca(const Router*, const Flit*, int, OutputSet*, bool)";
  intD.9 vcEndD.45379;
  intD.9 vcBeginD.45378;
  intD.9 gNumVCs.3_9;
  FlitTypeD.29324 _12;
  intD.9 _21;
  intD.9 _29;
  intD.9 _32;
  intD.9 _33;
  intD.9 _36;
  intD.9 _41;
  const intD.9 _44;
  long intD.12 _45;
  long intD.12 _46;
  intD.9 _47;
  boolD.2757 _52;
  boolD.2757 _53;
  boolD.2757 _61;
  boolD.2757 _62;

;;   basic block 2, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG vcBeginD.45378 => 0
  # DEBUG D#158ptD.0 => gNumVCsD.42077
  # DEBUG vcEndD.45379 => D#158ptD.0 + -1
  # VUSE <.MEM_8(D)>
  _12 = f_11(D)->typeD.29330;
  if (_12 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  vcBegin_13 = gReadReqBeginVCD.42078;
  # DEBUG vcBeginD.45378 => vcBegin_13
  # VUSE <.MEM_8(D)>
  vcEnd_14 = gReadReqEndVCD.42079;
  # DEBUG vcEndD.45379 => vcEnd_14
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_12 == 2)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 126, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  vcBegin_15 = gWriteReqBeginVCD.42080;
  # DEBUG vcBeginD.45378 => vcBegin_15
  # VUSE <.MEM_8(D)>
  vcEnd_16 = gWriteReqEndVCD.42081;
  # DEBUG vcEndD.45379 => vcEnd_16
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 324, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_12 == 1)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 91, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  vcBegin_17 = gReadReplyBeginVCD.42082;
  # DEBUG vcBeginD.45378 => vcBegin_17
  # VUSE <.MEM_8(D)>
  vcEnd_18 = gReadReplyEndVCD.42083;
  # DEBUG vcEndD.45379 => vcEnd_18
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 233, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  gNumVCs.3_9 = gNumVCsD.42077;
  if (_12 == 3)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 168, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  vcEnd_10 = gNumVCs.3_9 + -1;
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 65, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  vcBegin_19 = gWriteReplyBeginVCD.42084;
  # DEBUG vcBeginD.45378 => vcBegin_19
  # VUSE <.MEM_8(D)>
  vcEnd_20 = gWriteReplyEndVCD.42085;
  # DEBUG vcEndD.45379 => vcEnd_20
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # vcBegin_1 = PHI <vcBegin_13(3), vcBegin_15(5), vcBegin_17(7), 0(9), vcBegin_19(10)>
  # vcEnd_2 = PHI <vcEnd_14(3), vcEnd_16(5), vcEnd_18(7), vcEnd_10(9), vcEnd_20(10)>
  # DEBUG vcEndD.45379 => vcEnd_2
  # DEBUG vcBeginD.45378 => vcBegin_1
  # VUSE <.MEM_8(D)>
  _21 = f_11(D)->vcD.29331;
  _53 = vcEnd_2 < _21;
  _62 = vcBegin_1 > _21;
  _52 = _53 | _62;
  if (_52 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 675, maybe hot
;;   Invalid sum of incoming frequencies 451, should be 675
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  _61 = _21 >= 0;
  if (inject_22(D) <= _61)
    goto <bb 13>;
  else
    goto <bb 29>;
;;    succ:       13 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_23 = VDEF <.MEM_8(D)>
  # USE = nonlocal null { D.45380 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45380 } (nonlocal, escaped)
  __assert_failD.9858 ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 143, &_ZZ10tree4_ancaPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45380);
;;    succ:      

;;   basic block 14, loop depth 0, count 0, freq 225, maybe hot
;;   Invalid sum of incoming frequencies 451, should be 225
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG rangeD.45381 => 1
  if (inject_22(D) != 0)
    goto <bb 29>;
  else
    goto <bb 15>;
;;    succ:       29 (TRUE_VALUE,EXECUTABLE)
;;                15 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 450, maybe hot
;;   Invalid sum of incoming frequencies 225, should be 450
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  dest_24 = f_11(D)->destD.29342;
  # DEBUG destD.45383 => dest_24
  # DEBUG NPOSD.45384 => 16
  # VUSE <.MEM_8(D)>
  _44 = MEM[(intD.9 *)r_25(D) + 96B];
  # DEBUG D#14ptD.0 => r_25(D)
  # DEBUG thisD.50854 => D#14ptD.0
  # RANGE [-134217728, 134217727]
  rH_26 = _44 / 16;
  # DEBUG rHD.45385 => rH_26
  # DEBUG D#14ptD.0 => r_25(D)
  # DEBUG thisD.50851 => D#14ptD.0
  # DEBUG rPD.45386 => _44 % 16
  if (rH_26 == 0)
    goto <bb 16>;
  else
    goto <bb 17>;
;;    succ:       16 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 130, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       15 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [-134217728, 134217727]
  dest_28 = dest_24 / 16;
  # DEBUG destD.45383 => dest_28
  # RANGE [-268435456, 268435454] NONZERO 4294967294
  _29 = dest_28 * 2;
  # DEBUG maxD.50856 => 1
  # .MEM_48 = VDEF <.MEM_8(D)>
  # USE = nonlocal null { D.45380 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45380 } (nonlocal, escaped)
  _45 = _Z8ran_nextvD.43987 ();
  # RANGE [-1, 1]
  _46 = _45 % 2;
  # RANGE [-1, 1]
  _47 = (intD.9) _46;
  # RANGE [-268435457, 268435455]
  out_port_30 = _29 + _47;
  # DEBUG out_portD.45382 => out_port_30
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 319, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       15 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-15, 15]
  rP_27 = _44 % 16;
  if (rH_26 == 1)
    goto <bb 18>;
  else
    goto <bb 22>;
;;    succ:       18 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 89, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG destD.45383 => dest_24 / 4
  # RANGE [-134217728, 134217727]
  _32 = dest_24 / 16;
  # RANGE [-7, 7]
  _33 = rP_27 / 2;
  if (_32 == _33)
    goto <bb 19>;
  else
    goto <bb 20>;
;;    succ:       19 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 25, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [-536870912, 536870911]
  dest_31 = dest_24 / 4;
  # RANGE [-3, 3]
  out_port_35 = dest_31 % 4;
  # DEBUG out_portD.45382 => out_port_35
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 64, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       18 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  out_port_34 = gKD.33726;
  # DEBUG out_portD.45382 => out_port_34
  # DEBUG rangeD.45381 => out_port_34
  # DEBUG out_portD.45382 => out_port_34
  # DEBUG rangeD.45381 => out_port_34
  # .MEM_40 = VDEF <.MEM_8(D)>
  # USE = nonlocal null { D.45380 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45380 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_39(D));
  # DEBUG iD.45387 => 0
  # DEBUG iD.45387 => 0
  if (out_port_34 <= 0)
    goto <bb 21>;
  else
    goto <bb 25>;
;;    succ:       21 [100.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [100.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_69 = PHI <.MEM_40(20), .MEM_74(27)>
  # VUSE <.MEM_69>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 22, loop depth 0, count 0, freq 230, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       17 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-536870912, 536870911]
  _36 = dest_24 / 4;
  if (rP_27 == _36)
    goto <bb 23>;
  else
    goto <bb 24>;
;;    succ:       23 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 64, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       22 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [-3, 3]
  out_port_37 = dest_24 % 4;
  # DEBUG out_portD.45382 => out_port_37
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 166, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       22 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  out_port_38 = gKD.33726;
  # DEBUG out_portD.45382 => out_port_38
  # DEBUG rangeD.45381 => 2
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 819, maybe hot
;;   Invalid sum of incoming frequencies 1060, should be 819
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       20 (FALSE_VALUE,EXECUTABLE)
;;                29 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_5 = PHI <.MEM_40(20), .MEM_57(29)>
  # out_port_54 = PHI <out_port_34(20), out_port_50(29)>
  # out_port_63 = PHI <out_port_34(20), out_port_60(29)>
  # DEBUG out_portD.45382 => out_port_63
  # DEBUG rangeD.45381 => out_port_54
  # DEBUG iD.45387 => 0
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                28 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # i_59 = PHI <0(25), i_43(28)>
  # .MEM_49 = PHI <.MEM_5(25), .MEM_42(28)>
  # DEBUG iD.45387 => i_59
  _41 = i_59 + out_port_63;
  # .MEM_42 = VDEF <.MEM_49>
  # USE = nonlocal null { D.45380 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45380 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_39(D), _41, vcBegin_1, vcEnd_2, 0);
  i_43 = i_59 + 1;
  # DEBUG iD.45387 => i_43
  # DEBUG iD.45387 => i_43
  if (i_43 >= out_port_54)
    goto <bb 27>;
  else
    goto <bb 28>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 26, next block 28, flags: (NEW)
;;    pred:       26 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_74 = PHI <.MEM_42(26)>
  goto <bb 21>;
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 27, next block 29, flags: (NEW)
;;    pred:       26 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 1060, maybe hot
;;    prev block 28, next block 1, flags: (NEW, REACHABLE)
;;    pred:       14 (TRUE_VALUE,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647] NONZERO 3
  # out_port_50 = PHI <1(14), 1(19), 2(24), 1(23), 1(16), 1(12)>
  # out_port_60 = PHI <-1(14), out_port_35(19), out_port_38(24), out_port_37(23), out_port_30(16), -1(12)>
  # .MEM_56 = PHI <.MEM_8(D)(14), .MEM_8(D)(19), .MEM_8(D)(24), .MEM_8(D)(23), .MEM_48(16), .MEM_8(D)(12)>
  # DEBUG out_portD.45382 => out_port_60
  # DEBUG rangeD.45381 => out_port_50
  # .MEM_57 = VDEF <.MEM_56>
  # USE = nonlocal null { D.45380 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45380 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_39(D));
  # DEBUG iD.45387 => 0
  # DEBUG iD.45387 => 0
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

}


Creating dr for f_11(D)->type
analyze_innermost: success.
	base_address: f_11(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *f_11(D)
	Access function 0: 0
Creating dr for gReadReqBeginVC
analyze_innermost: success.
	base_address: &gReadReqBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReqBeginVC
Creating dr for gReadReqEndVC
analyze_innermost: success.
	base_address: &gReadReqEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReqEndVC
Creating dr for gWriteReqBeginVC
analyze_innermost: success.
	base_address: &gWriteReqBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReqBeginVC
Creating dr for gWriteReqEndVC
analyze_innermost: success.
	base_address: &gWriteReqEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReqEndVC
Creating dr for gReadReplyBeginVC
analyze_innermost: success.
	base_address: &gReadReplyBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReplyBeginVC
Creating dr for gReadReplyEndVC
analyze_innermost: success.
	base_address: &gReadReplyEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReplyEndVC
Creating dr for gNumVCs
analyze_innermost: success.
	base_address: &gNumVCs
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gNumVCs
Creating dr for gWriteReplyBeginVC
analyze_innermost: success.
	base_address: &gWriteReplyBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReplyBeginVC
Creating dr for gWriteReplyEndVC
analyze_innermost: success.
	base_address: &gWriteReplyEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReplyEndVC
Creating dr for f_11(D)->vc
analyze_innermost: success.
	base_address: f_11(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: *f_11(D)
	Access function 0: 32
Creating dr for f_11(D)->dest
analyze_innermost: success.
	base_address: f_11(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_11(D)
	Access function 0: 352
Creating dr for MEM[(int *)r_25(D) + 96B]
analyze_innermost: success.
	base_address: r_25(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(int *)r_25(D) + 96B]
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < out_port_54
  bounds on difference of bases: -2147483649 ... 2147483646
  result:
    zero if out_port_54 <= 0
    # of iterations (unsigned int) out_port_54 + 4294967295, bounded by 2147483646
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < out_port_54
  bounds on difference of bases: -2147483649 ... 2147483646
  result:
    zero if out_port_54 <= 0
    # of iterations (unsigned int) out_port_54 + 4294967295, bounded by 2147483646
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < out_port_54
  bounds on difference of bases: -2147483649 ... 2147483646
  result:
    zero if out_port_54 <= 0
    # of iterations (unsigned int) out_port_54 + 4294967295, bounded by 2147483646

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:4, LOOPS:0, CONDITIONS:1, STMTS:7)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:10, LOOPS:0, CONDITIONS:4, STMTS:26)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:35, LOOPS:1, CONDITIONS:13, STMTS:100)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # DEBUG vcBegin => 0
    # DEBUG D#158 => gNumVCs
    # DEBUG vcEnd => D#158 + -1
    # VUSE <.MEM_8(D)>
    _12 = f_11(D)->type;
    if (_12 == 0)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_11 })
  {
    <bb 3>:
    # VUSE <.MEM_8(D)>
    vcBegin_13 = gReadReqBeginVC;
    # DEBUG vcBegin => vcBegin_13
    # VUSE <.MEM_8(D)>
    vcEnd_14 = gReadReqEndVC;
    # DEBUG vcEnd => vcEnd_14
    goto <bb 11>;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 bb_6 })
  {
    <bb 4>:
    if (_12 == 2)
      goto <bb 5>;
    else
      goto <bb 6>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_11 })
  {
    <bb 5>:
    # VUSE <.MEM_8(D)>
    vcBegin_15 = gWriteReqBeginVC;
    # DEBUG vcBegin => vcBegin_15
    # VUSE <.MEM_8(D)>
    vcEnd_16 = gWriteReqEndVC;
    # DEBUG vcEnd => vcEnd_16
    goto <bb 11>;

  }
  bb_6 (preds = {bb_4 }, succs = {bb_7 bb_8 })
  {
    <bb 6>:
    if (_12 == 1)
      goto <bb 7>;
    else
      goto <bb 8>;

  }
  bb_7 (preds = {bb_6 }, succs = {bb_11 })
  {
    <bb 7>:
    # VUSE <.MEM_8(D)>
    vcBegin_17 = gReadReplyBeginVC;
    # DEBUG vcBegin => vcBegin_17
    # VUSE <.MEM_8(D)>
    vcEnd_18 = gReadReplyEndVC;
    # DEBUG vcEnd => vcEnd_18
    goto <bb 11>;

  }
  bb_8 (preds = {bb_6 }, succs = {bb_10 bb_9 })
  {
    <bb 8>:
    # VUSE <.MEM_8(D)>
    gNumVCs.3_9 = gNumVCs;
    if (_12 == 3)
      goto <bb 10>;
    else
      goto <bb 9>;

  }
  bb_9 (preds = {bb_8 }, succs = {bb_11 })
  {
    <bb 9>:
    vcEnd_10 = gNumVCs.3_9 + -1;
    goto <bb 11>;

  }
  bb_10 (preds = {bb_8 }, succs = {bb_11 })
  {
    <bb 10>:
    # VUSE <.MEM_8(D)>
    vcBegin_19 = gWriteReplyBeginVC;
    # DEBUG vcBegin => vcBegin_19
    # VUSE <.MEM_8(D)>
    vcEnd_20 = gWriteReplyEndVC;
    # DEBUG vcEnd => vcEnd_20

  }
  bb_11 (preds = {bb_3 bb_5 bb_7 bb_9 bb_10 }, succs = {bb_34 })
  {
    <bb 11>:
    # vcBegin_1 = PHI <vcBegin_13(3), vcBegin_15(5), vcBegin_17(7), 0(9), vcBegin_19(10)>
    # vcEnd_2 = PHI <vcEnd_14(3), vcEnd_16(5), vcEnd_18(7), vcEnd_10(9), vcEnd_20(10)>

  }
  bb_34 (preds = {bb_11 }, succs = {bb_12 bb_14 })
  {
    <bb 34>:
    # DEBUG vcEnd => vcEnd_2
    # DEBUG vcBegin => vcBegin_1
    # VUSE <.MEM_8(D)>
    _21 = f_11(D)->vc;
    _53 = vcEnd_2 < _21;
    _62 = vcBegin_1 > _21;
    _52 = _53 | _62;
    if (_52 != 0)
      goto <bb 12>;
    else
      goto <bb 14>;

  }
  bb_12 (preds = {bb_34 }, succs = {bb_13 bb_33 })
  {
    <bb 12>:
    _61 = _21 >= 0;
    if (inject_22(D) <= _61)
      goto <bb 13>;
    else
      goto <bb 33>;

  }
  bb_13 (preds = {bb_12 }, succs = {})
  {
    <bb 13>:
    # .MEM_23 = VDEF <.MEM_8(D)>
    __assert_fail ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 143, &__PRETTY_FUNCTION__);

  }
  bb_14 (preds = {bb_34 }, succs = {bb_33 bb_15 })
  {
    <bb 14>:
    # DEBUG range => 1
    if (inject_22(D) != 0)
      goto <bb 33>;
    else
      goto <bb 15>;

  }
  bb_15 (preds = {bb_14 }, succs = {bb_16 bb_17 })
  {
    <bb 15>:
    # VUSE <.MEM_8(D)>
    dest_24 = f_11(D)->dest;
    # DEBUG dest => dest_24
    # DEBUG NPOS => 16
    # VUSE <.MEM_8(D)>
    _44 = MEM[(int *)r_25(D) + 96B];
    # DEBUG D#14 => r_25(D)
    # DEBUG this => D#14
    rH_26 = _44 / 16;
    # DEBUG rH => rH_26
    # DEBUG D#14 => r_25(D)
    # DEBUG this => D#14
    # DEBUG rP => _44 % 16
    if (rH_26 == 0)
      goto <bb 16>;
    else
      goto <bb 17>;

  }
  bb_16 (preds = {bb_15 }, succs = {bb_33 })
  {
    <bb 16>:
    dest_28 = dest_24 / 16;
    # DEBUG dest => dest_28
    _29 = dest_28 * 2;
    # DEBUG max => 1
    # .MEM_48 = VDEF <.MEM_8(D)>
    _45 = ran_next ();
    _46 = _45 % 2;
    _47 = (int) _46;
    out_port_30 = _29 + _47;
    # DEBUG out_port => out_port_30
    goto <bb 33>;

  }
  bb_17 (preds = {bb_15 }, succs = {bb_18 bb_22 })
  {
    <bb 17>:
    rP_27 = _44 % 16;
    if (rH_26 == 1)
      goto <bb 18>;
    else
      goto <bb 22>;

  }
  bb_18 (preds = {bb_17 }, succs = {bb_19 bb_20 })
  {
    <bb 18>:
    # DEBUG dest => dest_24 / 4
    _32 = dest_24 / 16;
    _33 = rP_27 / 2;
    if (_32 == _33)
      goto <bb 19>;
    else
      goto <bb 20>;

  }
  bb_19 (preds = {bb_18 }, succs = {bb_33 })
  {
    <bb 19>:
    dest_31 = dest_24 / 4;
    out_port_35 = dest_31 % 4;
    # DEBUG out_port => out_port_35
    goto <bb 33>;

  }
  bb_20 (preds = {bb_18 }, succs = {bb_21 bb_25 })
  {
    <bb 20>:
    # VUSE <.MEM_8(D)>
    out_port_34 = gK;
    # DEBUG out_port => out_port_34
    # DEBUG range => out_port_34
    # DEBUG out_port => out_port_34
    # DEBUG range => out_port_34
    # .MEM_40 = VDEF <.MEM_8(D)>
    OutputSet::Clear (outputs_39(D));
    # DEBUG i => 0
    # DEBUG i => 0
    if (out_port_34 <= 0)
      goto <bb 21>;
    else
      goto <bb 25>;

  }
  bb_21 (preds = {bb_20 bb_30 }, succs = {bb_32 })
  {
    <bb 21>:
    # .MEM_69 = PHI <.MEM_40(20), .MEM_74(30)>

  }
  bb_32 (preds = {bb_21 }, succs = {bb_1 })
  {
    <bb 32>:
    # VUSE <.MEM_69>
    return;

  }
  bb_22 (preds = {bb_17 }, succs = {bb_23 bb_24 })
  {
    <bb 22>:
    _36 = dest_24 / 4;
    if (rP_27 == _36)
      goto <bb 23>;
    else
      goto <bb 24>;

  }
  bb_23 (preds = {bb_22 }, succs = {bb_29 })
  {
    <bb 23>:
    out_port_37 = dest_24 % 4;
    # DEBUG out_port => out_port_37
    goto <bb 29>;

  }
  bb_24 (preds = {bb_22 }, succs = {bb_29 })
  {
    <bb 24>:
    # VUSE <.MEM_8(D)>
    out_port_38 = gK;
    # DEBUG out_port => out_port_38
    # DEBUG range => 2
    goto <bb 29>;

  }
  bb_25 (preds = {bb_20 bb_33 }, succs = {bb_31 })
  {
    <bb 25>:
    # .MEM_5 = PHI <.MEM_40(20), .MEM_57(33)>
    # out_port_54 = PHI <out_port_34(20), out_port_50(33)>
    # out_port_63 = PHI <out_port_34(20), out_port_60(33)>

  }
  bb_31 (preds = {bb_25 }, succs = {bb_26 })
  {
    <bb 31>:
    # DEBUG out_port => out_port_63
    # DEBUG range => out_port_54
    # DEBUG i => 0

  }
  bb_27 (preds = {bb_26 }, succs = {bb_30 })
  {
    <bb 27>:
    # .MEM_74 = PHI <.MEM_42(26)>

  }
  bb_30 (preds = {bb_27 }, succs = {bb_21 })
  {
    <bb 30>:
    goto <bb 21>;

  }
  bb_29 (preds = {bb_23 bb_24 }, succs = {bb_33 })
  {
    <bb 29>:
    # out_port_58 = PHI <1(23), 2(24)>
    # out_port_51 = PHI <out_port_37(23), out_port_38(24)>
    # .MEM_55 = PHI <.MEM_8(D)(23), .MEM_8(D)(24)>

  }
  bb_33 (preds = {bb_29 bb_14 bb_12 bb_16 bb_19 }, succs = {bb_25 })
  {
    <bb 33>:
    # out_port_50 = PHI <out_port_58(29), 1(14), 1(12), 1(16), 1(19)>
    # out_port_60 = PHI <out_port_51(29), -1(14), -1(12), out_port_30(16), out_port_35(19)>
    # .MEM_56 = PHI <.MEM_55(29), .MEM_8(D)(14), .MEM_8(D)(12), .MEM_48(16), .MEM_8(D)(19)>
    # DEBUG out_port => out_port_60
    # DEBUG range => out_port_50
    # .MEM_57 = VDEF <.MEM_56>
    OutputSet::Clear (outputs_39(D));
    # DEBUG i => 0
    # DEBUG i => 0
    goto <bb 25>;

  }
  loop_1 (header = 26, latch = 28, niter = out_port_54 > 0 ? (unsigned int) out_port_54 + 4294967295 : 0, upper_bound = 2147483646)
  {
    bb_26 (preds = {bb_31 bb_28 }, succs = {bb_27 bb_28 })
    {
      <bb 26>:
      # i_59 = PHI <0(31), i_43(28)>
      # .MEM_49 = PHI <.MEM_5(31), .MEM_42(28)>
      # DEBUG i => i_59
      _41 = i_59 + out_port_63;
      # .MEM_42 = VDEF <.MEM_49>
      OutputSet::AddRange (outputs_39(D), _41, vcBegin_1, vcEnd_2, 0);
      i_43 = i_59 + 1;
      # DEBUG i => i_43
      # DEBUG i => i_43
      if (i_43 >= out_port_54)
        goto <bb 27>;
      else
        goto <bb 28>;

    }
    bb_28 (preds = {bb_26 }, succs = {bb_26 })
    {
      <bb 28>:
      goto <bb 26>;

    }
  }
}

Pass statistics:
----------------

void tree4_anca(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45371, const struct FlitD.29321 * fD.45372, intD.9 in_channelD.45373, struct OutputSetD.28230 * outputsD.45374, boolD.2757 injectD.45375)
{
  intD.9 iD.45387;
  intD.9 rPD.45386;
  intD.9 rHD.45385;
  intD.9 destD.45383;
  intD.9 out_portD.45382;
  intD.9 rangeD.45381;
  static const charD.10 _ZZ10tree4_ancaPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45380[67] = "void tree4_anca(const Router*, const Flit*, int, OutputSet*, bool)";
  intD.9 vcEndD.45379;
  intD.9 vcBeginD.45378;
  intD.9 gNumVCs.3_9;
  FlitTypeD.29324 _12;
  intD.9 _21;
  intD.9 _29;
  intD.9 _32;
  intD.9 _33;
  intD.9 _36;
  intD.9 _41;
  const intD.9 _44;
  long intD.12 _45;
  long intD.12 _46;
  intD.9 _47;
  boolD.2757 _52;
  boolD.2757 _53;
  boolD.2757 _61;
  boolD.2757 _62;

;;   basic block 2, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG vcBeginD.45378 => 0
  # DEBUG D#158ptD.0 => gNumVCsD.42077
  # DEBUG vcEndD.45379 => D#158ptD.0 + -1
  # VUSE <.MEM_8(D)>
  _12 = f_11(D)->typeD.29330;
  if (_12 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  vcBegin_13 = gReadReqBeginVCD.42078;
  # DEBUG vcBeginD.45378 => vcBegin_13
  # VUSE <.MEM_8(D)>
  vcEnd_14 = gReadReqEndVCD.42079;
  # DEBUG vcEndD.45379 => vcEnd_14
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_12 == 2)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 126, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  vcBegin_15 = gWriteReqBeginVCD.42080;
  # DEBUG vcBeginD.45378 => vcBegin_15
  # VUSE <.MEM_8(D)>
  vcEnd_16 = gWriteReqEndVCD.42081;
  # DEBUG vcEndD.45379 => vcEnd_16
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 324, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_12 == 1)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 91, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  vcBegin_17 = gReadReplyBeginVCD.42082;
  # DEBUG vcBeginD.45378 => vcBegin_17
  # VUSE <.MEM_8(D)>
  vcEnd_18 = gReadReplyEndVCD.42083;
  # DEBUG vcEndD.45379 => vcEnd_18
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 233, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  gNumVCs.3_9 = gNumVCsD.42077;
  if (_12 == 3)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 168, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  vcEnd_10 = gNumVCs.3_9 + -1;
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 65, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  vcBegin_19 = gWriteReplyBeginVCD.42084;
  # DEBUG vcBeginD.45378 => vcBegin_19
  # VUSE <.MEM_8(D)>
  vcEnd_20 = gWriteReplyEndVCD.42085;
  # DEBUG vcEndD.45379 => vcEnd_20
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 10, next block 34, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # vcBegin_1 = PHI <vcBegin_13(3), vcBegin_15(5), vcBegin_17(7), 0(9), vcBegin_19(10)>
  # vcEnd_2 = PHI <vcEnd_14(3), vcEnd_16(5), vcEnd_18(7), vcEnd_10(9), vcEnd_20(10)>
;;    succ:       34 [100.0%]  (FALLTHRU)

;;   basic block 34, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 11, next block 12, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU)
  # DEBUG vcEndD.45379 => vcEnd_2
  # DEBUG vcBeginD.45378 => vcBegin_1
  # VUSE <.MEM_8(D)>
  _21 = f_11(D)->vcD.29331;
  _53 = vcEnd_2 < _21;
  _62 = vcBegin_1 > _21;
  _52 = _53 | _62;
  if (_52 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 675, maybe hot
;;   Invalid sum of incoming frequencies 451, should be 675
;;    prev block 34, next block 13, flags: (NEW, REACHABLE)
;;    pred:       34 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  _61 = _21 >= 0;
  if (inject_22(D) <= _61)
    goto <bb 13>;
  else
    goto <bb 33>;
;;    succ:       13 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_23 = VDEF <.MEM_8(D)>
  # USE = nonlocal null { D.45380 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45380 } (nonlocal, escaped)
  __assert_failD.9858 ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 143, &_ZZ10tree4_ancaPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45380);
;;    succ:      

;;   basic block 14, loop depth 0, count 0, freq 225, maybe hot
;;   Invalid sum of incoming frequencies 451, should be 225
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       34 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG rangeD.45381 => 1
  if (inject_22(D) != 0)
    goto <bb 33>;
  else
    goto <bb 15>;
;;    succ:       33 (TRUE_VALUE,EXECUTABLE)
;;                15 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 450, maybe hot
;;   Invalid sum of incoming frequencies 225, should be 450
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  dest_24 = f_11(D)->destD.29342;
  # DEBUG destD.45383 => dest_24
  # DEBUG NPOSD.45384 => 16
  # VUSE <.MEM_8(D)>
  _44 = MEM[(intD.9 *)r_25(D) + 96B];
  # DEBUG D#14ptD.0 => r_25(D)
  # DEBUG thisD.50854 => D#14ptD.0
  # RANGE [-134217728, 134217727]
  rH_26 = _44 / 16;
  # DEBUG rHD.45385 => rH_26
  # DEBUG D#14ptD.0 => r_25(D)
  # DEBUG thisD.50851 => D#14ptD.0
  # DEBUG rPD.45386 => _44 % 16
  if (rH_26 == 0)
    goto <bb 16>;
  else
    goto <bb 17>;
;;    succ:       16 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 130, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       15 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [-134217728, 134217727]
  dest_28 = dest_24 / 16;
  # DEBUG destD.45383 => dest_28
  # RANGE [-268435456, 268435454] NONZERO 4294967294
  _29 = dest_28 * 2;
  # DEBUG maxD.50856 => 1
  # .MEM_48 = VDEF <.MEM_8(D)>
  # USE = nonlocal null { D.45380 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45380 } (nonlocal, escaped)
  _45 = _Z8ran_nextvD.43987 ();
  # RANGE [-1, 1]
  _46 = _45 % 2;
  # RANGE [-1, 1]
  _47 = (intD.9) _46;
  # RANGE [-268435457, 268435455]
  out_port_30 = _29 + _47;
  # DEBUG out_portD.45382 => out_port_30
  goto <bb 33>;
;;    succ:       33 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 319, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       15 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-15, 15]
  rP_27 = _44 % 16;
  if (rH_26 == 1)
    goto <bb 18>;
  else
    goto <bb 22>;
;;    succ:       18 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 89, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG destD.45383 => dest_24 / 4
  # RANGE [-134217728, 134217727]
  _32 = dest_24 / 16;
  # RANGE [-7, 7]
  _33 = rP_27 / 2;
  if (_32 == _33)
    goto <bb 19>;
  else
    goto <bb 20>;
;;    succ:       19 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 25, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [-536870912, 536870911]
  dest_31 = dest_24 / 4;
  # RANGE [-3, 3]
  out_port_35 = dest_31 % 4;
  # DEBUG out_portD.45382 => out_port_35
  goto <bb 33>;
;;    succ:       33 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 64, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       18 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  out_port_34 = gKD.33726;
  # DEBUG out_portD.45382 => out_port_34
  # DEBUG rangeD.45381 => out_port_34
  # DEBUG out_portD.45382 => out_port_34
  # DEBUG rangeD.45381 => out_port_34
  # .MEM_40 = VDEF <.MEM_8(D)>
  # USE = nonlocal null { D.45380 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45380 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_39(D));
  # DEBUG iD.45387 => 0
  # DEBUG iD.45387 => 0
  if (out_port_34 <= 0)
    goto <bb 21>;
  else
    goto <bb 25>;
;;    succ:       21 [100.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 20, next block 32, flags: (NEW, REACHABLE)
;;    pred:       20 [100.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_69 = PHI <.MEM_40(20), .MEM_74(30)>
;;    succ:       32 [100.0%]  (FALLTHRU)

;;   basic block 32, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 21, next block 22, flags: (NEW)
;;    pred:       21 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_69>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 22, loop depth 0, count 0, freq 230, maybe hot
;;    prev block 32, next block 23, flags: (NEW, REACHABLE)
;;    pred:       17 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-536870912, 536870911]
  _36 = dest_24 / 4;
  if (rP_27 == _36)
    goto <bb 23>;
  else
    goto <bb 24>;
;;    succ:       23 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 64, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       22 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [-3, 3]
  out_port_37 = dest_24 % 4;
  # DEBUG out_portD.45382 => out_port_37
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 166, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       22 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  out_port_38 = gKD.33726;
  # DEBUG out_portD.45382 => out_port_38
  # DEBUG rangeD.45381 => 2
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 819, maybe hot
;;   Invalid sum of incoming frequencies 1060, should be 819
;;    prev block 24, next block 31, flags: (NEW, REACHABLE)
;;    pred:       20 (FALSE_VALUE,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_5 = PHI <.MEM_40(20), .MEM_57(33)>
  # out_port_54 = PHI <out_port_34(20), out_port_50(33)>
  # out_port_63 = PHI <out_port_34(20), out_port_60(33)>
;;    succ:       31 [100.0%]  (FALLTHRU)

;;   basic block 31, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 25, next block 26, flags: (NEW)
;;    pred:       25 [100.0%]  (FALLTHRU)
  # DEBUG out_portD.45382 => out_port_63
  # DEBUG rangeD.45381 => out_port_54
  # DEBUG iD.45387 => 0
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 31, next block 27, flags: (NEW, REACHABLE)
;;    pred:       31 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                28 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # i_59 = PHI <0(31), i_43(28)>
  # .MEM_49 = PHI <.MEM_5(31), .MEM_42(28)>
  # DEBUG iD.45387 => i_59
  _41 = i_59 + out_port_63;
  # .MEM_42 = VDEF <.MEM_49>
  # USE = nonlocal null { D.45380 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45380 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_39(D), _41, vcBegin_1, vcEnd_2, 0);
  i_43 = i_59 + 1;
  # DEBUG iD.45387 => i_43
  # DEBUG iD.45387 => i_43
  if (i_43 >= out_port_54)
    goto <bb 27>;
  else
    goto <bb 28>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 26, next block 30, flags: (NEW)
;;    pred:       26 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_74 = PHI <.MEM_42(26)>
;;    succ:       30 [100.0%]  (FALLTHRU)

;;   basic block 30, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 27, next block 28, flags: (NEW)
;;    pred:       27 [100.0%]  (FALLTHRU)
  goto <bb 21>;
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 30, next block 29, flags: (NEW)
;;    pred:       26 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 230, maybe hot
;;    prev block 28, next block 33, flags: (NEW, REACHABLE)
;;    pred:       23 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                24 [100.0%]  (FALLTHRU,EXECUTABLE)
  # out_port_58 = PHI <1(23), 2(24)>
  # out_port_51 = PHI <out_port_37(23), out_port_38(24)>
  # .MEM_55 = PHI <.MEM_8(D)(23), .MEM_8(D)(24)>
;;    succ:       33 [100.0%]  (FALLTHRU)

;;   basic block 33, loop depth 0, count 0, freq 1060, maybe hot
;;    prev block 29, next block 1, flags: (NEW)
;;    pred:       29 [100.0%]  (FALLTHRU)
;;                14 (TRUE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALSE_VALUE,EXECUTABLE)
;;                16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [-2147483648, 2147483647] NONZERO 3
  # out_port_50 = PHI <out_port_58(29), 1(14), 1(12), 1(16), 1(19)>
  # out_port_60 = PHI <out_port_51(29), -1(14), -1(12), out_port_30(16), out_port_35(19)>
  # .MEM_56 = PHI <.MEM_55(29), .MEM_8(D)(14), .MEM_8(D)(12), .MEM_48(16), .MEM_8(D)(19)>
  # DEBUG out_portD.45382 => out_port_60
  # DEBUG rangeD.45381 => out_port_50
  # .MEM_57 = VDEF <.MEM_56>
  # USE = nonlocal null { D.45380 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45380 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_39(D));
  # DEBUG iD.45387 => 0
  # DEBUG iD.45387 => 0
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

}



;; Function void dim_order_ni_torus(const Router*, const Flit*, int, OutputSet*, bool) (_Z18dim_order_ni_torusPK6RouterPK4FlitiP9OutputSetb, funcdef_no=1985, decl_uid=45710, cgraph_uid=484, symbol_order=495)


Pass statistics:
----------------

void dim_order_ni_torus(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45705, const struct FlitD.29321 * fD.45706, intD.9 in_channelD.45707, struct OutputSetD.28230 * outputsD.45708, boolD.2757 injectD.45709)
{
  char_typeD.19944 D.54805;
  charD.10 __cD.54804;
  char_typeD.19944 D.54802;
  charD.10 __cD.54801;
  char_typeD.23023 D.54799;
  struct basic_ostreamD.11177 & D.54793;
  intD.9 dim_leftD.54785;
  intD.9 dirD.54786;
  intD.9 dist2D.54787;
  intD.9 curD.54779;
  intD.9 destD.54780;
  const intD.9 vcs_per_destD.45718;
  intD.9 destD.45717;
  intD.9 out_portD.45715;
  static const charD.10 _ZZ18dim_order_ni_torusPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45714[75] = "void dim_order_ni_torus(const Router*, const Flit*, int, OutputSet*, bool)";
  intD.9 vcEndD.45713;
  intD.9 vcBeginD.45712;
  intD.9 gNumVCs.120_9;
  FlitTypeD.29324 _12;
  intD.9 _21;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _28;
  intD.9 _29;
  intD.9 _30;
  intD.9 gNodes.121_31;
  intD.9 _33;
  intD.9 _34;
  intD.9 _36;
  boolD.2757 _39;
  intD.9 _40;
  intD.9 _41;
  intD.9 _44;
  struct ostreamD.11178 * gWatchOut.123_45;
  struct basic_ostreamD.11177 & _47;
  const size_typeD.14319 _48;
  struct basic_ostreamD.11177 & _50;
  struct basic_ostreamD.11177 & _52;
  struct basic_ostreamD.11177 & _54;
  struct basic_ostreamD.11177 & _56;
  struct basic_ostreamD.11177 & _58;
  struct basic_ostreamD.11177 & _60;
  boolD.2757 _65;
  long intD.12 _67;
  charD.10 * const _68;
  struct basic_ostreamD.11177 & _69;
  const struct __ctype_typeD.23028 * _82;
  intD.9 _87;
  intD.9 _89;
  intD.9 _93;
  intD.9 _97;
  intD.9 _98;
  intD.9 _99;
  intD.9 _100;
  long intD.12 _102;
  long intD.12 _103;
  intD.9 gN.23_105;
  intD.9 _107;
  boolD.2757 _109;
  boolD.2757 _125;
  boolD.2757 _127;
  intD.9 _131;
  long intD.12 _132;
  sizetype _133;
  struct basic_iosD.11171 * _134;
  struct basic_ostreamD.11177 & _137;
  charD.10 _139;
  char_typeD.19944 _142;
  intD.9 gK.24_146;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _147;
  intD.9 (*__vtbl_ptr_typeD.2760) () _148;
  voidD.45 * PROF_152;
  char_typeD.19944 _154;
  intD.9 _159;
  intD.9 pretmp_188;
  intD.9 pretmp_189;
  intD.9 prephitmp_190;
  intD.9 prephitmp_191;
  intD.9 prephitmp_192;
  intD.9 _198;
  intD.9 _199;

;;   basic block 2, loop depth 0, count 0, freq 2258, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG vcBeginD.45712 => 0
  # DEBUG D#175ptD.0 => gNumVCsD.42077
  # DEBUG vcEndD.45713 => D#175ptD.0 + -1
  # VUSE <.MEM_8(D)>
  _12 = f_11(D)->typeD.29330;
  if (_12 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 1129, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  vcBegin_13 = gReadReqBeginVCD.42078;
  # DEBUG vcBeginD.45712 => vcBegin_13
  # VUSE <.MEM_8(D)>
  vcEnd_14 = gReadReqEndVCD.42079;
  # DEBUG vcEndD.45713 => vcEnd_14
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 1129, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_12 == 2)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 316, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  vcBegin_15 = gWriteReqBeginVCD.42080;
  # DEBUG vcBeginD.45712 => vcBegin_15
  # VUSE <.MEM_8(D)>
  vcEnd_16 = gWriteReqEndVCD.42081;
  # DEBUG vcEndD.45713 => vcEnd_16
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 813, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_12 == 1)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 228, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  vcBegin_17 = gReadReplyBeginVCD.42082;
  # DEBUG vcBeginD.45712 => vcBegin_17
  # VUSE <.MEM_8(D)>
  vcEnd_18 = gReadReplyEndVCD.42083;
  # DEBUG vcEndD.45713 => vcEnd_18
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 585, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  gNumVCs.120_9 = gNumVCsD.42077;
  if (_12 == 3)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 421, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  vcEnd_10 = gNumVCs.120_9 + -1;
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 164, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  vcBegin_19 = gWriteReplyBeginVCD.42084;
  # DEBUG vcBeginD.45712 => vcBegin_19
  # VUSE <.MEM_8(D)>
  vcEnd_20 = gWriteReplyEndVCD.42085;
  # DEBUG vcEndD.45713 => vcEnd_20
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 2258, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # vcBegin_1 = PHI <vcBegin_13(3), vcBegin_15(5), vcBegin_17(7), 0(9), vcBegin_19(10)>
  # vcEnd_4 = PHI <vcEnd_14(3), vcEnd_16(5), vcEnd_18(7), vcEnd_10(9), vcEnd_20(10)>
  # DEBUG vcEndD.45713 => vcEnd_4
  # DEBUG vcBeginD.45712 => vcBegin_1
  # VUSE <.MEM_8(D)>
  _21 = f_11(D)->vcD.29331;
  _65 = vcEnd_4 < _21;
  _125 = vcBegin_1 > _21;
  _109 = _65 | _125;
  if (_109 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 1693, maybe hot
;;   Invalid sum of incoming frequencies 1129, should be 1693
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  _127 = _21 >= 0;
  if (inject_22(D) <= _127)
    goto <bb 13>;
  else
    goto <bb 38>;
;;    succ:       13 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 1
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_23 = VDEF <.MEM_8(D)>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  __assert_failD.9858 ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 1602, &_ZZ18dim_order_ni_torusPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45714);
;;    succ:      

;;   basic block 14, loop depth 0, count 0, freq 565, maybe hot
;;   Invalid sum of incoming frequencies 1129, should be 565
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (inject_22(D) != 0)
    goto <bb 38>;
  else
    goto <bb 15>;
;;    succ:       38 (TRUE_VALUE,EXECUTABLE)
;;                15 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 880, maybe hot
;;   Invalid sum of incoming frequencies 565, should be 880
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  cur_66 = MEM[(intD.9 *)r_25(D) + 96B];
  # DEBUG D#14ptD.0 => r_25(D)
  # DEBUG thisD.51412 => D#14ptD.0
  # DEBUG curD.45716 => NULL
  # VUSE <.MEM_8(D)>
  dest_26 = f_11(D)->destD.29342;
  # DEBUG destD.45717 => dest_26
  # DEBUG curD.54779 => cur_66
  # DEBUG destD.54780 => dest_26
  # DEBUG in_portD.54781 => in_channel_27(D)
  # DEBUG out_portD.54782 => &out_portD.45715
  # DEBUG partitionD.54783 => 0B
  # DEBUG balanceD.54784 => 0
  # DEBUG dim_leftD.54785 => 0
  # DEBUG dim_leftD.54785 => 0
  # DEBUG destD.54780 => dest_26
  # DEBUG curD.54779 => cur_66
  # VUSE <.MEM_8(D)>
  gN.23_105 = gND.33727;
  if (gN.23_105 <= 0)
    goto <bb 41>;
  else
    goto <bb 16>;
;;    succ:       41 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 840, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       15 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  gK.24_146 = gKD.33726;
  _131 = cur_66 % gK.24_146;
  _159 = dest_26 % gK.24_146;
  if (_131 != _159)
    goto <bb 42>;
  else
    goto <bb 20>;
;;    succ:       42 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 8710, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       21 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  _87 = cur_90 % gK.24_146;
  _89 = dest_91 % gK.24_146;
  if (_87 != _89)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 392, maybe hot
;;    prev block 17, next block 19, flags: (NEW)
;;    pred:       17 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # _199 = PHI <_87(17)>
  # _198 = PHI <_89(17)>
  # RANGE [1, 2147483647] NONZERO 2147483647
  # dim_left_195 = PHI <dim_left_92(17)>
  goto <bb 42>;
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 8318, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       17 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 21>;
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 802, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       16 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 1, count 0, freq 9120, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  # dim_left_117 = PHI <0(20), dim_left_92(19)>
  # cur_156 = PHI <cur_66(20), cur_90(19)>
  # dest_124 = PHI <dest_26(20), dest_91(19)>
  # DEBUG dim_leftD.54785 => dim_left_117
  # DEBUG destD.54780 => dest_124
  # DEBUG curD.54779 => cur_156
  cur_90 = cur_156 / gK.24_146;
  # DEBUG curD.54779 => cur_90
  dest_91 = dest_124 / gK.24_146;
  # DEBUG destD.54780 => dest_91
  # RANGE [1, 2147483647] NONZERO 2147483647
  dim_left_92 = dim_left_117 + 1;
  # DEBUG dim_leftD.54785 => dim_left_92
  # DEBUG dim_leftD.54785 => dim_left_92
  # DEBUG destD.54780 => dest_91
  # DEBUG curD.54779 => cur_90
  if (dim_left_92 >= gN.23_105)
    goto <bb 41>;
  else
    goto <bb 17>;
;;    succ:       41 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 352, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       42 [80.1%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#174ptD.0 => gKD.33726
  # DEBUG curD.54779 => NULL
  # DEBUG destD.54780 => NULL
  _97 = prephitmp_192 - prephitmp_191;
  _98 = _97 + gK.24_146;
  _99 = _98 % gK.24_146;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _100 = _99 * -2;
  dist2_101 = _100 + gK.24_146;
  # DEBUG dist2D.54787 => dist2_101
  if (dist2_101 > 0)
    goto <bb 40>;
  else
    goto <bb 23>;
;;    succ:       40 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [27.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 95, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       22 [27.0%]  (FALSE_VALUE,EXECUTABLE)
  if (dist2_101 == 0)
    goto <bb 24>;
  else
    goto <bb 39>;
;;    succ:       24 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 28, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG maxD.54789 => 1
  # .MEM_111 = VDEF <.MEM_8(D)>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _102 = _Z8ran_nextvD.43987 ();
  # RANGE [-1, 1]
  _103 = _102 % 2;
  if (_103 != 0)
    goto <bb 40>;
  else
    goto <bb 39>;
;;    succ:       40 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 88, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       42 [19.9%]  (FALSE_VALUE,EXECUTABLE)
  out_port_129 = in_channel_27(D) ^ 1;
  # DEBUG out_portD.45715 => out_port_129
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 880, maybe hot
;;   Invalid sum of incoming frequencies 985, should be 880
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       41 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                39 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                40 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_126 = PHI <.MEM_8(D)(41), .MEM_201(39), .MEM_8(D)(25), .MEM_202(40)>
  # out_port_110 = PHI <out_port_130(41), out_port_108(39), out_port_129(25), out_port_106(40)>
  # DEBUG out_portD.45715 => out_port_110
  if (dest_26 != cur_66)
    goto <bb 27>;
  else
    goto <bb 30>;
;;    succ:       27 [72.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [28.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 633, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       26 [72.0%]  (TRUE_VALUE,EXECUTABLE)
  _29 = vcEnd_4 - vcBegin_1;
  _30 = _29 + 1;
  # VUSE <.MEM_126>
  gNodes.121_31 = gNodesD.33729;
  vcs_per_dest_32 = _30 / gNodes.121_31;
  # DEBUG vcs_per_destD.45718 => vcs_per_dest_32
  if (vcs_per_dest_32 == 0)
    goto <bb 28>;
  else
    goto <bb 29>;
;;    succ:       28 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 0
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       27 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_38 = VDEF <.MEM_126>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  __assert_failD.9858 ("vcs_per_dest", "routefunc.cpp", 1622, &_ZZ18dim_order_ni_torusPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45714);
;;    succ:      

;;   basic block 29, loop depth 0, count 0, freq 633, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       27 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_126>
  _33 = f_11(D)->destD.29342;
  _34 = vcs_per_dest_32 * _33;
  vcBegin_35 = vcBegin_1 + _34;
  # DEBUG vcBeginD.45712 => vcBegin_35
  _36 = vcs_per_dest_32 + vcBegin_35;
  vcEnd_37 = _36 + -1;
  # DEBUG vcEndD.45713 => vcEnd_37
;;    succ:       30 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 879, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       26 [28.0%]  (FALSE_VALUE,EXECUTABLE)
;;                29 [100.0%]  (FALLTHRU,EXECUTABLE)
  # vcBegin_2 = PHI <vcBegin_1(26), vcBegin_35(29)>
  # vcEnd_5 = PHI <vcEnd_4(26), vcEnd_37(29)>
  # DEBUG vcEndD.45713 => vcEnd_5
  # DEBUG vcBeginD.45712 => vcBegin_2
  # VUSE <.MEM_126>
  _39 = f_11(D)->watchD.29345;
  if (_39 != 0)
    goto <bb 31>;
  else
    goto <bb 38>;
;;    succ:       31 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 343, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       30 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_126>
  _40 = f_11(D)->destD.29342;
  # VUSE <.MEM_126>
  _41 = f_11(D)->idD.29338;
  # DEBUG D#25ptD.0 => &r_25(D)->D.42039.D.32226
  # DEBUG thisD.51414 => D#25ptD.0
  # DEBUG D#26ptD.0 => &MEM[(const struct ModuleD.31381 *)r_25(D)]._fullnameD.31384
  # .MEM_43 = VDEF <.MEM_126>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _44 = _Z10GetSimTimevD.33721 ();
  # VUSE <.MEM_43>
  # PT = nonlocal escaped 
  gWatchOut.123_45 = gWatchOutD.33731;
  # .MEM_46 = VDEF <.MEM_43>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _47 = _ZNSolsEiD.23719 (gWatchOut.123_45, _44);
  # DEBUG __outD.51416 => _47
  # DEBUG __sD.51417 => " | "
  # DEBUG __sD.51418 => " | "
  # .MEM_70 = VDEF <.MEM_46>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_47, " | ", 3);
  # DEBUG __osD.51420 => _47
  # DEBUG __strD.51421 => D#26ptD.0
  # VUSE <.MEM_70>
  _48 = MEM[(long unsigned intD.14 *)r_25(D) + 48B];
  # DEBUG D#1ptD.0 => D#26ptD.0
  # DEBUG thisD.50724 => D#1ptD.0
  _67 = (long intD.12) _48;
  # DEBUG thisD.50721 => D#26ptD.0
  # VUSE <.MEM_70>
  # PT = nonlocal escaped 
  _68 = MEM[(charD.10 * *)r_25(D) + 40B];
  # DEBUG D#3ptD.0 => D#26ptD.0
  # DEBUG thisD.50676 => D#3ptD.0
  # .MEM_71 = VDEF <.MEM_70>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _69 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_47, _68, _67);
  # DEBUG __outD.51423 => _69
  # DEBUG __sD.51424 => " | "
  # DEBUG __sD.51425 => " | "
  # .MEM_72 = VDEF <.MEM_71>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_69, " | ", 3);
  # DEBUG __outD.51427 => _69
  # DEBUG __sD.51428 => "Adding VC range ["
  # DEBUG __sD.51429 => "Adding VC range ["
  # .MEM_73 = VDEF <.MEM_72>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_69, "Adding VC range [", 17);
  # .MEM_49 = VDEF <.MEM_73>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _50 = _ZNSolsEiD.23719 (_69, vcBegin_2);
  # DEBUG __outD.51431 => _50
  # DEBUG __sD.51432 => ","
  # DEBUG __sD.51433 => ","
  # .MEM_74 = VDEF <.MEM_49>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_50, ",", 1);
  # .MEM_51 = VDEF <.MEM_74>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _52 = _ZNSolsEiD.23719 (_50, vcEnd_5);
  # DEBUG __outD.51435 => _52
  # DEBUG __sD.51436 => "]"
  # DEBUG __sD.51437 => "]"
  # .MEM_75 = VDEF <.MEM_51>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_52, "]", 1);
  # DEBUG __outD.51439 => _52
  # DEBUG __sD.51440 => " at output port "
  # DEBUG __sD.51441 => " at output port "
  # .MEM_76 = VDEF <.MEM_75>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_52, " at output port ", 16);
  # .MEM_53 = VDEF <.MEM_76>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _54 = _ZNSolsEiD.23719 (_52, out_port_110);
  # DEBUG __outD.51443 => _54
  # DEBUG __sD.51444 => " for flit "
  # DEBUG __sD.51445 => " for flit "
  # .MEM_77 = VDEF <.MEM_53>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_54, " for flit ", 10);
  # .MEM_55 = VDEF <.MEM_77>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _56 = _ZNSolsEiD.23719 (_54, _41);
  # DEBUG __outD.51447 => _56
  # DEBUG __sD.51448 => " (input port "
  # DEBUG __sD.51449 => " (input port "
  # .MEM_78 = VDEF <.MEM_55>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_56, " (input port ", 13);
  # .MEM_57 = VDEF <.MEM_78>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _58 = _ZNSolsEiD.23719 (_56, in_channel_27(D));
  # DEBUG __outD.51451 => _58
  # DEBUG __sD.51452 => ", destination "
  # DEBUG __sD.51453 => ", destination "
  # .MEM_79 = VDEF <.MEM_57>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_58, ", destination ", 14);
  # .MEM_59 = VDEF <.MEM_79>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _60 = _ZNSolsEiD.23719 (_58, _40);
  # DEBUG __outD.51455 => _60
  # DEBUG __sD.51456 => ")"
  # DEBUG __sD.51457 => ")"
  # .MEM_80 = VDEF <.MEM_59>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_60, ")", 1);
  # DEBUG __outD.51459 => _60
  # DEBUG __sD.51460 => "."
  # DEBUG __sD.51461 => "."
  # .MEM_81 = VDEF <.MEM_80>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_60, ".", 1);
  # DEBUG thisD.51463 => _60
  # DEBUG __pfD.51464 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.23851
  # DEBUG __osD.54791 => _60
  # VUSE <.MEM_81>
  # PT = nonlocal escaped null { D.45714 } (nonlocal, escaped)
  _28 = _60->_vptr.basic_ostreamD.23811;
  # VUSE <.MEM_81>
  _132 = MEM[(long intD.12 *)_28 + -24B];
  # RANGE [0, 18446744073709551615]
  _133 = (sizetype) _132;
  # PT = nonlocal escaped 
  _134 = _60 + _133;
  # DEBUG thisD.54794 => _134
  # DEBUG __cD.54795 => 10
  # VUSE <.MEM_81>
  # PT = nonlocal escaped 
  _82 = MEM[(const struct basic_iosD.11171 *)_134]._M_ctypeD.23035;
  # DEBUG __fD.54796 => _82
  if (_82 == 0B)
    goto <bb 32>;
  else
    goto <bb 33>;
;;    succ:       32 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 0
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       31 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_123 = VDEF <.MEM_81>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__throw_bad_castvD.2825 ();
;;    succ:      

;;   basic block 33, loop depth 0, count 0, freq 343, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       31 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.54798 => _82
  # DEBUG __cD.54797 => 10
  # VUSE <.MEM_81>
  _139 = MEM[(const struct ctypeD.11417 *)_82]._M_widen_okD.19950;
  if (_139 != 0)
    goto <bb 34>;
  else
    goto <bb 35>;
;;    succ:       34 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 209, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       33 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_81>
  _142 = MEM[(const struct ctypeD.11417 *)_82]._M_widenD.19951[10];
  pretmp_188 = (intD.9) _142;
  goto <bb 37>;
;;    succ:       37 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 134, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       33 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.54800 => _82
  # DEBUG __cD.54801 => 10
  # .MEM_115 = VDEF <.MEM_81>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.20058 (_82);
  # VUSE <.MEM_115>
  # PT = nonlocal escaped 
  _147 = MEM[(const struct ctypeD.11417 *)_82].D.20091._vptr.facetD.16709;
  # VUSE <.MEM_115>
  # PT = nonlocal escaped 
  _148 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_147 + 48B];
  # PT = anything 
  PROF_152 = [obj_type_ref] OBJ_TYPE_REF(_148;(const struct ctypeD.11417)_82->6);
  if (PROF_152 == _ZNKSt5ctypeIcE8do_widenEcD.20039)
    goto <bb 37>;
  else
    goto <bb 36>;
;;    succ:       37 [81.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [19.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 25, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       35 [19.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_116 = VDEF <.MEM_115>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _154 = OBJ_TYPE_REF(_148;(const struct ctypeD.11417)_82->6) (_82, 10);
  pretmp_189 = (intD.9) _154;
;;    succ:       37 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 343, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       34 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [81.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_128 = PHI <.MEM_81(34), .MEM_115(35), .MEM_116(36)>
  # prephitmp_190 = PHI <pretmp_188(34), 10(35), pretmp_189(36)>
  # .MEM_119 = VDEF <.MEM_128>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _137 = _ZNSo3putEcD.23746 (_60, prephitmp_190);
  # DEBUG __osD.54792 => _137
  # .MEM_120 = VDEF <.MEM_119>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZNSo5flushEvD.23757 (_137);
;;    succ:       38 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 2257, maybe hot
;;   Invalid sum of incoming frequencies 2571, should be 2257
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       14 (TRUE_VALUE,EXECUTABLE)
;;                30 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # vcBegin_3 = PHI <vcBegin_1(14), vcBegin_2(30), vcBegin_2(37), vcBegin_1(12)>
  # vcEnd_6 = PHI <vcEnd_4(14), vcEnd_5(30), vcEnd_5(37), vcEnd_4(12)>
  # .MEM_7 = PHI <.MEM_8(D)(14), .MEM_126(30), .MEM_120(37), .MEM_8(D)(12)>
  # out_port_114 = PHI <-1(14), out_port_110(30), out_port_110(37), -1(12)>
  # DEBUG out_portD.45715 => out_port_114
  # DEBUG vcEndD.45713 => vcEnd_6
  # DEBUG vcBeginD.45712 => vcBegin_3
  # .MEM_62 = VDEF <.MEM_7>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_61(D));
  # .MEM_64 = VDEF <.MEM_62>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_61(D), out_port_114, vcBegin_3, vcEnd_6, 0);
  # DEBUG D#173ptD.0 => {CLOBBER}
  # DEBUG out_portD.45715 => D#173ptD.0
  # VUSE <.MEM_64>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 39, loop depth 0, count 0, freq 176, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       23 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                24 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_201 = PHI <.MEM_8(D)(23), .MEM_111(24)>
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _107 = dim_left_112 * 2;
  # RANGE [-2147483647, 2147483647]
  out_port_108 = _107 + 1;
  # DEBUG out_portD.45715 => out_port_108
  # DEBUG dirD.54786 => 1
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 40, loop depth 0, count 0, freq 271, maybe hot
;;    prev block 39, next block 41, flags: (NEW, REACHABLE)
;;    pred:       22 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_202 = PHI <.MEM_8(D)(22), .MEM_111(24)>
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  out_port_106 = dim_left_112 * 2;
  # DEBUG out_portD.45715 => out_port_106
  # DEBUG dirD.54786 => 0
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 41, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 40, next block 42, flags: (NEW, REACHABLE)
;;    pred:       21 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  out_port_130 = gN.23_105 * 2;
  # DEBUG out_portD.45715 => out_port_130
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 440, maybe hot
;;    prev block 41, next block 1, flags: (NEW, REACHABLE)
;;    pred:       16 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  # dim_left_112 = PHI <0(16), dim_left_195(18)>
  # prephitmp_191 = PHI <_131(16), _199(18)>
  # prephitmp_192 = PHI <_159(16), _198(18)>
  # RANGE [-1073741824, 1073741823]
  _93 = in_channel_27(D) / 2;
  if (_93 != dim_left_112)
    goto <bb 22>;
  else
    goto <bb 25>;
;;    succ:       22 [80.1%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [19.9%]  (FALSE_VALUE,EXECUTABLE)

}


Creating dr for f_11(D)->type
analyze_innermost: success.
	base_address: f_11(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *f_11(D)
	Access function 0: 0
Creating dr for gReadReqBeginVC
analyze_innermost: success.
	base_address: &gReadReqBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReqBeginVC
Creating dr for gReadReqEndVC
analyze_innermost: success.
	base_address: &gReadReqEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReqEndVC
Creating dr for gWriteReqBeginVC
analyze_innermost: success.
	base_address: &gWriteReqBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReqBeginVC
Creating dr for gWriteReqEndVC
analyze_innermost: success.
	base_address: &gWriteReqEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReqEndVC
Creating dr for gReadReplyBeginVC
analyze_innermost: success.
	base_address: &gReadReplyBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReplyBeginVC
Creating dr for gReadReplyEndVC
analyze_innermost: success.
	base_address: &gReadReplyEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReplyEndVC
Creating dr for gNumVCs
analyze_innermost: success.
	base_address: &gNumVCs
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gNumVCs
Creating dr for gWriteReplyBeginVC
analyze_innermost: success.
	base_address: &gWriteReplyBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReplyBeginVC
Creating dr for gWriteReplyEndVC
analyze_innermost: success.
	base_address: &gWriteReplyEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReplyEndVC
Creating dr for f_11(D)->vc
analyze_innermost: success.
	base_address: f_11(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: *f_11(D)
	Access function 0: 32
Creating dr for MEM[(int *)r_25(D) + 96B]
analyze_innermost: success.
	base_address: r_25(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(int *)r_25(D) + 96B]
Creating dr for f_11(D)->dest
analyze_innermost: success.
	base_address: f_11(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_11(D)
	Access function 0: 352
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gNodes
analyze_innermost: success.
	base_address: &gNodes
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gNodes
Creating dr for f_11(D)->dest
analyze_innermost: success.
	base_address: f_11(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_11(D)
	Access function 0: 352
Creating dr for f_11(D)->watch
analyze_innermost: success.
	base_address: f_11(D)
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: *f_11(D)
	Access function 0: 448
Creating dr for f_11(D)->dest
analyze_innermost: success.
	base_address: f_11(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_11(D)
	Access function 0: 352
Creating dr for f_11(D)->id
analyze_innermost: success.
	base_address: f_11(D)
	offset from base address: 0
	constant offset from base address: 28
	step: 0
	aligned to: 256
	base_object: *f_11(D)
	Access function 0: 224
Creating dr for MEM[(const struct ctype *)_82]._M_widen_ok
analyze_innermost: success.
	base_address: _82
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(const struct ctype *)_82]
	Access function 0: 448
Creating dr for MEM[(const struct ctype *)_82]._M_widen[10]
analyze_innermost: success.
	base_address: _82
	offset from base address: 0
	constant offset from base address: 67
	step: 0
	aligned to: 256
	base_object: MEM[(const struct ctype *)_82]
	Access function 0: 10
	Access function 1: 456

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:7)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:10, LOOPS:0, CONDITIONS:4, STMTS:26)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:47, LOOPS:1, CONDITIONS:21, STMTS:231)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # DEBUG vcBegin => 0
    # DEBUG D#175 => gNumVCs
    # DEBUG vcEnd => D#175 + -1
    # VUSE <.MEM_8(D)>
    _12 = f_11(D)->type;
    if (_12 == 0)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_11 })
  {
    <bb 3>:
    # VUSE <.MEM_8(D)>
    vcBegin_13 = gReadReqBeginVC;
    # DEBUG vcBegin => vcBegin_13
    # VUSE <.MEM_8(D)>
    vcEnd_14 = gReadReqEndVC;
    # DEBUG vcEnd => vcEnd_14
    goto <bb 11>;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 bb_6 })
  {
    <bb 4>:
    if (_12 == 2)
      goto <bb 5>;
    else
      goto <bb 6>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_11 })
  {
    <bb 5>:
    # VUSE <.MEM_8(D)>
    vcBegin_15 = gWriteReqBeginVC;
    # DEBUG vcBegin => vcBegin_15
    # VUSE <.MEM_8(D)>
    vcEnd_16 = gWriteReqEndVC;
    # DEBUG vcEnd => vcEnd_16
    goto <bb 11>;

  }
  bb_6 (preds = {bb_4 }, succs = {bb_7 bb_8 })
  {
    <bb 6>:
    if (_12 == 1)
      goto <bb 7>;
    else
      goto <bb 8>;

  }
  bb_7 (preds = {bb_6 }, succs = {bb_11 })
  {
    <bb 7>:
    # VUSE <.MEM_8(D)>
    vcBegin_17 = gReadReplyBeginVC;
    # DEBUG vcBegin => vcBegin_17
    # VUSE <.MEM_8(D)>
    vcEnd_18 = gReadReplyEndVC;
    # DEBUG vcEnd => vcEnd_18
    goto <bb 11>;

  }
  bb_8 (preds = {bb_6 }, succs = {bb_10 bb_9 })
  {
    <bb 8>:
    # VUSE <.MEM_8(D)>
    gNumVCs.120_9 = gNumVCs;
    if (_12 == 3)
      goto <bb 10>;
    else
      goto <bb 9>;

  }
  bb_9 (preds = {bb_8 }, succs = {bb_11 })
  {
    <bb 9>:
    vcEnd_10 = gNumVCs.120_9 + -1;
    goto <bb 11>;

  }
  bb_10 (preds = {bb_8 }, succs = {bb_11 })
  {
    <bb 10>:
    # VUSE <.MEM_8(D)>
    vcBegin_19 = gWriteReplyBeginVC;
    # DEBUG vcBegin => vcBegin_19
    # VUSE <.MEM_8(D)>
    vcEnd_20 = gWriteReplyEndVC;
    # DEBUG vcEnd => vcEnd_20

  }
  bb_11 (preds = {bb_3 bb_5 bb_7 bb_9 bb_10 }, succs = {bb_46 })
  {
    <bb 11>:
    # vcBegin_1 = PHI <vcBegin_13(3), vcBegin_15(5), vcBegin_17(7), 0(9), vcBegin_19(10)>
    # vcEnd_4 = PHI <vcEnd_14(3), vcEnd_16(5), vcEnd_18(7), vcEnd_10(9), vcEnd_20(10)>

  }
  bb_46 (preds = {bb_11 }, succs = {bb_12 bb_14 })
  {
    <bb 46>:
    # DEBUG vcEnd => vcEnd_4
    # DEBUG vcBegin => vcBegin_1
    # VUSE <.MEM_8(D)>
    _21 = f_11(D)->vc;
    _65 = vcEnd_4 < _21;
    _125 = vcBegin_1 > _21;
    _109 = _65 | _125;
    if (_109 != 0)
      goto <bb 12>;
    else
      goto <bb 14>;

  }
  bb_12 (preds = {bb_46 }, succs = {bb_13 bb_38 })
  {
    <bb 12>:
    _127 = _21 >= 0;
    if (inject_22(D) <= _127)
      goto <bb 13>;
    else
      goto <bb 38>;

  }
  bb_13 (preds = {bb_12 }, succs = {})
  {
    <bb 13>:
    # .MEM_23 = VDEF <.MEM_8(D)>
    __assert_fail ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 1602, &__PRETTY_FUNCTION__);

  }
  bb_14 (preds = {bb_46 }, succs = {bb_38 bb_15 })
  {
    <bb 14>:
    if (inject_22(D) != 0)
      goto <bb 38>;
    else
      goto <bb 15>;

  }
  bb_15 (preds = {bb_14 }, succs = {bb_41 bb_16 })
  {
    <bb 15>:
    # VUSE <.MEM_8(D)>
    cur_66 = MEM[(int *)r_25(D) + 96B];
    # DEBUG D#14 => r_25(D)
    # DEBUG this => D#14
    # DEBUG cur => NULL
    # VUSE <.MEM_8(D)>
    dest_26 = f_11(D)->dest;
    # DEBUG dest => dest_26
    # DEBUG cur => cur_66
    # DEBUG dest => dest_26
    # DEBUG in_port => in_channel_27(D)
    # DEBUG out_port => &out_port
    # DEBUG partition => 0B
    # DEBUG balance => 0
    # DEBUG dim_left => 0
    # DEBUG dim_left => 0
    # DEBUG dest => dest_26
    # DEBUG cur => cur_66
    # VUSE <.MEM_8(D)>
    gN.23_105 = gN;
    if (gN.23_105 <= 0)
      goto <bb 41>;
    else
      goto <bb 16>;

  }
  bb_16 (preds = {bb_15 }, succs = {bb_42 bb_20 })
  {
    <bb 16>:
    # VUSE <.MEM_8(D)>
    gK.24_146 = gK;
    _131 = cur_66 % gK.24_146;
    _159 = dest_26 % gK.24_146;
    if (_131 != _159)
      goto <bb 42>;
    else
      goto <bb 20>;

  }
  bb_18 (preds = {bb_17 }, succs = {bb_42 })
  {
    <bb 18>:
    # _199 = PHI <_87(17)>
    # _198 = PHI <_89(17)>
    # dim_left_195 = PHI <dim_left_92(17)>
    goto <bb 42>;

  }
  bb_20 (preds = {bb_16 }, succs = {bb_21 })
  {
    <bb 20>:

  }
  bb_22 (preds = {bb_42 }, succs = {bb_40 bb_23 })
  {
    <bb 22>:
    # DEBUG D#174 => gK
    # DEBUG cur => NULL
    # DEBUG dest => NULL
    _97 = prephitmp_192 - prephitmp_191;
    _98 = _97 + gK.24_146;
    _99 = _98 % gK.24_146;
    _100 = _99 * -2;
    dist2_101 = _100 + gK.24_146;
    # DEBUG dist2 => dist2_101
    if (dist2_101 > 0)
      goto <bb 40>;
    else
      goto <bb 23>;

  }
  bb_23 (preds = {bb_22 }, succs = {bb_24 bb_39 })
  {
    <bb 23>:
    if (dist2_101 == 0)
      goto <bb 24>;
    else
      goto <bb 39>;

  }
  bb_24 (preds = {bb_23 }, succs = {bb_40 bb_39 })
  {
    <bb 24>:
    # DEBUG max => 1
    # .MEM_111 = VDEF <.MEM_8(D)>
    _102 = ran_next ();
    _103 = _102 % 2;
    if (_103 != 0)
      goto <bb 40>;
    else
      goto <bb 39>;

  }
  bb_25 (preds = {bb_42 }, succs = {bb_26 })
  {
    <bb 25>:
    out_port_129 = in_channel_27(D) ^ 1;
    # DEBUG out_port => out_port_129

  }
  bb_26 (preds = {bb_45 bb_43 bb_25 bb_44 }, succs = {bb_27 bb_30 })
  {
    <bb 26>:
    # .MEM_126 = PHI <.MEM_8(D)(45), .MEM_201(43), .MEM_8(D)(25), .MEM_202(44)>
    # out_port_110 = PHI <out_port_130(45), out_port_108(43), out_port_129(25), out_port_106(44)>
    # DEBUG out_port => out_port_110
    if (dest_26 != cur_66)
      goto <bb 27>;
    else
      goto <bb 30>;

  }
  bb_27 (preds = {bb_26 }, succs = {bb_28 bb_29 })
  {
    <bb 27>:
    _29 = vcEnd_4 - vcBegin_1;
    _30 = _29 + 1;
    # VUSE <.MEM_126>
    gNodes.121_31 = gNodes;
    vcs_per_dest_32 = _30 / gNodes.121_31;
    # DEBUG vcs_per_dest => vcs_per_dest_32
    if (vcs_per_dest_32 == 0)
      goto <bb 28>;
    else
      goto <bb 29>;

  }
  bb_28 (preds = {bb_27 }, succs = {})
  {
    <bb 28>:
    # .MEM_38 = VDEF <.MEM_126>
    __assert_fail ("vcs_per_dest", "routefunc.cpp", 1622, &__PRETTY_FUNCTION__);

  }
  bb_29 (preds = {bb_27 }, succs = {bb_30 })
  {
    <bb 29>:
    # VUSE <.MEM_126>
    _33 = f_11(D)->dest;
    _34 = vcs_per_dest_32 * _33;
    vcBegin_35 = vcBegin_1 + _34;
    # DEBUG vcBegin => vcBegin_35
    _36 = vcs_per_dest_32 + vcBegin_35;
    vcEnd_37 = _36 + -1;
    # DEBUG vcEnd => vcEnd_37

  }
  bb_30 (preds = {bb_26 bb_29 }, succs = {bb_31 bb_38 })
  {
    <bb 30>:
    # vcBegin_2 = PHI <vcBegin_1(26), vcBegin_35(29)>
    # vcEnd_5 = PHI <vcEnd_4(26), vcEnd_37(29)>
    # DEBUG vcEnd => vcEnd_5
    # DEBUG vcBegin => vcBegin_2
    # VUSE <.MEM_126>
    _39 = f_11(D)->watch;
    if (_39 != 0)
      goto <bb 31>;
    else
      goto <bb 38>;

  }
  bb_31 (preds = {bb_30 }, succs = {bb_32 bb_33 })
  {
    <bb 31>:
    # VUSE <.MEM_126>
    _40 = f_11(D)->dest;
    # VUSE <.MEM_126>
    _41 = f_11(D)->id;
    # DEBUG D#25 => &r_25(D)->D.42039.D.32226
    # DEBUG this => D#25
    # DEBUG D#26 => &MEM[(const struct Module *)r_25(D)]._fullname
    # .MEM_43 = VDEF <.MEM_126>
    _44 = GetSimTime ();
    # VUSE <.MEM_43>
    gWatchOut.123_45 = gWatchOut;
    # .MEM_46 = VDEF <.MEM_43>
    _47 = std::basic_ostream<char>::operator<< (gWatchOut.123_45, _44);
    # DEBUG __out => _47
    # DEBUG __s => " | "
    # DEBUG __s => " | "
    # .MEM_70 = VDEF <.MEM_46>
    std::__ostream_insert<char, std::char_traits<char> > (_47, " | ", 3);
    # DEBUG __os => _47
    # DEBUG __str => D#26
    # VUSE <.MEM_70>
    _48 = MEM[(long unsigned int *)r_25(D) + 48B];
    # DEBUG D#1 => D#26
    # DEBUG this => D#1
    _67 = (long int) _48;
    # DEBUG this => D#26
    # VUSE <.MEM_70>
    _68 = MEM[(char * *)r_25(D) + 40B];
    # DEBUG D#3 => D#26
    # DEBUG this => D#3
    # .MEM_71 = VDEF <.MEM_70>
    _69 = std::__ostream_insert<char, std::char_traits<char> > (_47, _68, _67);
    # DEBUG __out => _69
    # DEBUG __s => " | "
    # DEBUG __s => " | "
    # .MEM_72 = VDEF <.MEM_71>
    std::__ostream_insert<char, std::char_traits<char> > (_69, " | ", 3);
    # DEBUG __out => _69
    # DEBUG __s => "Adding VC range ["
    # DEBUG __s => "Adding VC range ["
    # .MEM_73 = VDEF <.MEM_72>
    std::__ostream_insert<char, std::char_traits<char> > (_69, "Adding VC range [", 17);
    # .MEM_49 = VDEF <.MEM_73>
    _50 = std::basic_ostream<char>::operator<< (_69, vcBegin_2);
    # DEBUG __out => _50
    # DEBUG __s => ","
    # DEBUG __s => ","
    # .MEM_74 = VDEF <.MEM_49>
    std::__ostream_insert<char, std::char_traits<char> > (_50, ",", 1);
    # .MEM_51 = VDEF <.MEM_74>
    _52 = std::basic_ostream<char>::operator<< (_50, vcEnd_5);
    # DEBUG __out => _52
    # DEBUG __s => "]"
    # DEBUG __s => "]"
    # .MEM_75 = VDEF <.MEM_51>
    std::__ostream_insert<char, std::char_traits<char> > (_52, "]", 1);
    # DEBUG __out => _52
    # DEBUG __s => " at output port "
    # DEBUG __s => " at output port "
    # .MEM_76 = VDEF <.MEM_75>
    std::__ostream_insert<char, std::char_traits<char> > (_52, " at output port ", 16);
    # .MEM_53 = VDEF <.MEM_76>
    _54 = std::basic_ostream<char>::operator<< (_52, out_port_110);
    # DEBUG __out => _54
    # DEBUG __s => " for flit "
    # DEBUG __s => " for flit "
    # .MEM_77 = VDEF <.MEM_53>
    std::__ostream_insert<char, std::char_traits<char> > (_54, " for flit ", 10);
    # .MEM_55 = VDEF <.MEM_77>
    _56 = std::basic_ostream<char>::operator<< (_54, _41);
    # DEBUG __out => _56
    # DEBUG __s => " (input port "
    # DEBUG __s => " (input port "
    # .MEM_78 = VDEF <.MEM_55>
    std::__ostream_insert<char, std::char_traits<char> > (_56, " (input port ", 13);
    # .MEM_57 = VDEF <.MEM_78>
    _58 = std::basic_ostream<char>::operator<< (_56, in_channel_27(D));
    # DEBUG __out => _58
    # DEBUG __s => ", destination "
    # DEBUG __s => ", destination "
    # .MEM_79 = VDEF <.MEM_57>
    std::__ostream_insert<char, std::char_traits<char> > (_58, ", destination ", 14);
    # .MEM_59 = VDEF <.MEM_79>
    _60 = std::basic_ostream<char>::operator<< (_58, _40);
    # DEBUG __out => _60
    # DEBUG __s => ")"
    # DEBUG __s => ")"
    # .MEM_80 = VDEF <.MEM_59>
    std::__ostream_insert<char, std::char_traits<char> > (_60, ")", 1);
    # DEBUG __out => _60
    # DEBUG __s => "."
    # DEBUG __s => "."
    # .MEM_81 = VDEF <.MEM_80>
    std::__ostream_insert<char, std::char_traits<char> > (_60, ".", 1);
    # DEBUG this => _60
    # DEBUG __pf => endl
    # DEBUG __os => _60
    # VUSE <.MEM_81>
    _28 = _60->_vptr.basic_ostream;
    # VUSE <.MEM_81>
    _132 = MEM[(long int *)_28 + -24B];
    _133 = (sizetype) _132;
    _134 = _60 + _133;
    # DEBUG this => _134
    # DEBUG __c => 10
    # VUSE <.MEM_81>
    _82 = MEM[(const struct basic_ios *)_134]._M_ctype;
    # DEBUG __f => _82
    if (_82 == 0B)
      goto <bb 32>;
    else
      goto <bb 33>;

  }
  bb_32 (preds = {bb_31 }, succs = {})
  {
    <bb 32>:
    # .MEM_123 = VDEF <.MEM_81>
    std::__throw_bad_cast ();

  }
  bb_33 (preds = {bb_31 }, succs = {bb_34 bb_35 })
  {
    <bb 33>:
    # DEBUG this => _82
    # DEBUG __c => 10
    # VUSE <.MEM_81>
    _139 = MEM[(const struct ctype *)_82]._M_widen_ok;
    if (_139 != 0)
      goto <bb 34>;
    else
      goto <bb 35>;

  }
  bb_34 (preds = {bb_33 }, succs = {bb_37 })
  {
    <bb 34>:
    # VUSE <.MEM_81>
    _142 = MEM[(const struct ctype *)_82]._M_widen[10];
    pretmp_188 = (int) _142;
    goto <bb 37>;

  }
  bb_35 (preds = {bb_33 }, succs = {bb_37 bb_36 })
  {
    <bb 35>:
    # DEBUG this => _82
    # DEBUG __c => 10
    # .MEM_115 = VDEF <.MEM_81>
    std::ctype<char>::_M_widen_init (_82);
    # VUSE <.MEM_115>
    _147 = MEM[(const struct ctype *)_82].D.20091._vptr.facet;
    # VUSE <.MEM_115>
    _148 = MEM[(int (*__vtbl_ptr_type) () *)_147 + 48B];
    PROF_152 = [obj_type_ref] OBJ_TYPE_REF(_148;(const struct ctype)_82->6);
    if (PROF_152 == do_widen)
      goto <bb 37>;
    else
      goto <bb 36>;

  }
  bb_36 (preds = {bb_35 }, succs = {bb_37 })
  {
    <bb 36>:
    # .MEM_116 = VDEF <.MEM_115>
    _154 = OBJ_TYPE_REF(_148;(const struct ctype)_82->6) (_82, 10);
    pretmp_189 = (int) _154;

  }
  bb_37 (preds = {bb_34 bb_35 bb_36 }, succs = {bb_38 })
  {
    <bb 37>:
    # .MEM_128 = PHI <.MEM_81(34), .MEM_115(35), .MEM_116(36)>
    # prephitmp_190 = PHI <pretmp_188(34), 10(35), pretmp_189(36)>
    # .MEM_119 = VDEF <.MEM_128>
    _137 = std::basic_ostream<char>::put (_60, prephitmp_190);
    # DEBUG __os => _137
    # .MEM_120 = VDEF <.MEM_119>
    std::basic_ostream<char>::flush (_137);

  }
  bb_38 (preds = {bb_14 bb_30 bb_37 bb_12 }, succs = {bb_1 })
  {
    <bb 38>:
    # vcBegin_3 = PHI <vcBegin_1(14), vcBegin_2(30), vcBegin_2(37), vcBegin_1(12)>
    # vcEnd_6 = PHI <vcEnd_4(14), vcEnd_5(30), vcEnd_5(37), vcEnd_4(12)>
    # .MEM_7 = PHI <.MEM_8(D)(14), .MEM_126(30), .MEM_120(37), .MEM_8(D)(12)>
    # out_port_114 = PHI <-1(14), out_port_110(30), out_port_110(37), -1(12)>
    # DEBUG out_port => out_port_114
    # DEBUG vcEnd => vcEnd_6
    # DEBUG vcBegin => vcBegin_3
    # .MEM_62 = VDEF <.MEM_7>
    OutputSet::Clear (outputs_61(D));
    # .MEM_64 = VDEF <.MEM_62>
    OutputSet::AddRange (outputs_61(D), out_port_114, vcBegin_3, vcEnd_6, 0);
    # DEBUG D#173 => {CLOBBER}
    # DEBUG out_port => D#173
    # VUSE <.MEM_64>
    return;

  }
  bb_39 (preds = {bb_23 bb_24 }, succs = {bb_43 })
  {
    <bb 39>:
    # .MEM_201 = PHI <.MEM_8(D)(23), .MEM_111(24)>

  }
  bb_43 (preds = {bb_39 }, succs = {bb_26 })
  {
    <bb 43>:
    _107 = dim_left_112 * 2;
    out_port_108 = _107 + 1;
    # DEBUG out_port => out_port_108
    # DEBUG dir => 1
    goto <bb 26>;

  }
  bb_40 (preds = {bb_22 bb_24 }, succs = {bb_44 })
  {
    <bb 40>:
    # .MEM_202 = PHI <.MEM_8(D)(22), .MEM_111(24)>

  }
  bb_44 (preds = {bb_40 }, succs = {bb_26 })
  {
    <bb 44>:
    out_port_106 = dim_left_112 * 2;
    # DEBUG out_port => out_port_106
    # DEBUG dir => 0
    goto <bb 26>;

  }
  bb_41 (preds = {bb_21 bb_15 }, succs = {bb_45 })
  {
    <bb 41>:

  }
  bb_45 (preds = {bb_41 }, succs = {bb_26 })
  {
    <bb 45>:
    out_port_130 = gN.23_105 * 2;
    # DEBUG out_port => out_port_130
    goto <bb 26>;

  }
  bb_42 (preds = {bb_16 bb_18 }, succs = {bb_22 bb_25 })
  {
    <bb 42>:
    # dim_left_112 = PHI <0(16), dim_left_195(18)>
    # prephitmp_191 = PHI <_131(16), _199(18)>
    # prephitmp_192 = PHI <_159(16), _198(18)>
    _93 = in_channel_27(D) / 2;
    if (_93 != dim_left_112)
      goto <bb 22>;
    else
      goto <bb 25>;

  }
  loop_1 (header = 21, latch = 19, niter = scev_not_known, upper_bound = 2147483646)
  {
    bb_17 (preds = {bb_21 }, succs = {bb_18 bb_19 })
    {
      <bb 17>:
      _87 = cur_90 % gK.24_146;
      _89 = dest_91 % gK.24_146;
      if (_87 != _89)
        goto <bb 18>;
      else
        goto <bb 19>;

    }
    bb_19 (preds = {bb_17 }, succs = {bb_21 })
    {
      <bb 19>:
      goto <bb 21>;

    }
    bb_21 (preds = {bb_20 bb_19 }, succs = {bb_41 bb_17 })
    {
      <bb 21>:
      # dim_left_117 = PHI <0(20), dim_left_92(19)>
      # cur_156 = PHI <cur_66(20), cur_90(19)>
      # dest_124 = PHI <dest_26(20), dest_91(19)>
      # DEBUG dim_left => dim_left_117
      # DEBUG dest => dest_124
      # DEBUG cur => cur_156
      cur_90 = cur_156 / gK.24_146;
      # DEBUG cur => cur_90
      dest_91 = dest_124 / gK.24_146;
      # DEBUG dest => dest_91
      dim_left_92 = dim_left_117 + 1;
      # DEBUG dim_left => dim_left_92
      # DEBUG dim_left => dim_left_92
      # DEBUG dest => dest_91
      # DEBUG cur => cur_90
      if (dim_left_92 >= gN.23_105)
        goto <bb 41>;
      else
        goto <bb 17>;

    }
  }
}

Pass statistics:
----------------

void dim_order_ni_torus(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45705, const struct FlitD.29321 * fD.45706, intD.9 in_channelD.45707, struct OutputSetD.28230 * outputsD.45708, boolD.2757 injectD.45709)
{
  char_typeD.19944 D.54805;
  charD.10 __cD.54804;
  char_typeD.19944 D.54802;
  charD.10 __cD.54801;
  char_typeD.23023 D.54799;
  struct basic_ostreamD.11177 & D.54793;
  intD.9 dim_leftD.54785;
  intD.9 dirD.54786;
  intD.9 dist2D.54787;
  intD.9 curD.54779;
  intD.9 destD.54780;
  const intD.9 vcs_per_destD.45718;
  intD.9 destD.45717;
  intD.9 out_portD.45715;
  static const charD.10 _ZZ18dim_order_ni_torusPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45714[75] = "void dim_order_ni_torus(const Router*, const Flit*, int, OutputSet*, bool)";
  intD.9 vcEndD.45713;
  intD.9 vcBeginD.45712;
  intD.9 gNumVCs.120_9;
  FlitTypeD.29324 _12;
  intD.9 _21;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _28;
  intD.9 _29;
  intD.9 _30;
  intD.9 gNodes.121_31;
  intD.9 _33;
  intD.9 _34;
  intD.9 _36;
  boolD.2757 _39;
  intD.9 _40;
  intD.9 _41;
  intD.9 _44;
  struct ostreamD.11178 * gWatchOut.123_45;
  struct basic_ostreamD.11177 & _47;
  const size_typeD.14319 _48;
  struct basic_ostreamD.11177 & _50;
  struct basic_ostreamD.11177 & _52;
  struct basic_ostreamD.11177 & _54;
  struct basic_ostreamD.11177 & _56;
  struct basic_ostreamD.11177 & _58;
  struct basic_ostreamD.11177 & _60;
  boolD.2757 _65;
  long intD.12 _67;
  charD.10 * const _68;
  struct basic_ostreamD.11177 & _69;
  const struct __ctype_typeD.23028 * _82;
  intD.9 _87;
  intD.9 _89;
  intD.9 _93;
  intD.9 _97;
  intD.9 _98;
  intD.9 _99;
  intD.9 _100;
  long intD.12 _102;
  long intD.12 _103;
  intD.9 gN.23_105;
  intD.9 _107;
  boolD.2757 _109;
  boolD.2757 _125;
  boolD.2757 _127;
  intD.9 _131;
  long intD.12 _132;
  sizetype _133;
  struct basic_iosD.11171 * _134;
  struct basic_ostreamD.11177 & _137;
  charD.10 _139;
  char_typeD.19944 _142;
  intD.9 gK.24_146;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _147;
  intD.9 (*__vtbl_ptr_typeD.2760) () _148;
  voidD.45 * PROF_152;
  char_typeD.19944 _154;
  intD.9 _159;
  intD.9 pretmp_188;
  intD.9 pretmp_189;
  intD.9 prephitmp_190;
  intD.9 prephitmp_191;
  intD.9 prephitmp_192;
  intD.9 _198;
  intD.9 _199;

;;   basic block 2, loop depth 0, count 0, freq 2258, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG vcBeginD.45712 => 0
  # DEBUG D#175ptD.0 => gNumVCsD.42077
  # DEBUG vcEndD.45713 => D#175ptD.0 + -1
  # VUSE <.MEM_8(D)>
  _12 = f_11(D)->typeD.29330;
  if (_12 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 1129, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  vcBegin_13 = gReadReqBeginVCD.42078;
  # DEBUG vcBeginD.45712 => vcBegin_13
  # VUSE <.MEM_8(D)>
  vcEnd_14 = gReadReqEndVCD.42079;
  # DEBUG vcEndD.45713 => vcEnd_14
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 1129, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_12 == 2)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 316, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  vcBegin_15 = gWriteReqBeginVCD.42080;
  # DEBUG vcBeginD.45712 => vcBegin_15
  # VUSE <.MEM_8(D)>
  vcEnd_16 = gWriteReqEndVCD.42081;
  # DEBUG vcEndD.45713 => vcEnd_16
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 813, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_12 == 1)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 228, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  vcBegin_17 = gReadReplyBeginVCD.42082;
  # DEBUG vcBeginD.45712 => vcBegin_17
  # VUSE <.MEM_8(D)>
  vcEnd_18 = gReadReplyEndVCD.42083;
  # DEBUG vcEndD.45713 => vcEnd_18
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 585, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  gNumVCs.120_9 = gNumVCsD.42077;
  if (_12 == 3)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 421, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  vcEnd_10 = gNumVCs.120_9 + -1;
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 164, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  vcBegin_19 = gWriteReplyBeginVCD.42084;
  # DEBUG vcBeginD.45712 => vcBegin_19
  # VUSE <.MEM_8(D)>
  vcEnd_20 = gWriteReplyEndVCD.42085;
  # DEBUG vcEndD.45713 => vcEnd_20
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 2258, maybe hot
;;    prev block 10, next block 46, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # vcBegin_1 = PHI <vcBegin_13(3), vcBegin_15(5), vcBegin_17(7), 0(9), vcBegin_19(10)>
  # vcEnd_4 = PHI <vcEnd_14(3), vcEnd_16(5), vcEnd_18(7), vcEnd_10(9), vcEnd_20(10)>
;;    succ:       46 [100.0%]  (FALLTHRU)

;;   basic block 46, loop depth 0, count 0, freq 2258, maybe hot
;;    prev block 11, next block 12, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU)
  # DEBUG vcEndD.45713 => vcEnd_4
  # DEBUG vcBeginD.45712 => vcBegin_1
  # VUSE <.MEM_8(D)>
  _21 = f_11(D)->vcD.29331;
  _65 = vcEnd_4 < _21;
  _125 = vcBegin_1 > _21;
  _109 = _65 | _125;
  if (_109 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 1693, maybe hot
;;   Invalid sum of incoming frequencies 1129, should be 1693
;;    prev block 46, next block 13, flags: (NEW, REACHABLE)
;;    pred:       46 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  _127 = _21 >= 0;
  if (inject_22(D) <= _127)
    goto <bb 13>;
  else
    goto <bb 38>;
;;    succ:       13 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 1
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_23 = VDEF <.MEM_8(D)>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  __assert_failD.9858 ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 1602, &_ZZ18dim_order_ni_torusPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45714);
;;    succ:      

;;   basic block 14, loop depth 0, count 0, freq 565, maybe hot
;;   Invalid sum of incoming frequencies 1129, should be 565
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       46 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (inject_22(D) != 0)
    goto <bb 38>;
  else
    goto <bb 15>;
;;    succ:       38 (TRUE_VALUE,EXECUTABLE)
;;                15 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 880, maybe hot
;;   Invalid sum of incoming frequencies 565, should be 880
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  cur_66 = MEM[(intD.9 *)r_25(D) + 96B];
  # DEBUG D#14ptD.0 => r_25(D)
  # DEBUG thisD.51412 => D#14ptD.0
  # DEBUG curD.45716 => NULL
  # VUSE <.MEM_8(D)>
  dest_26 = f_11(D)->destD.29342;
  # DEBUG destD.45717 => dest_26
  # DEBUG curD.54779 => cur_66
  # DEBUG destD.54780 => dest_26
  # DEBUG in_portD.54781 => in_channel_27(D)
  # DEBUG out_portD.54782 => &out_portD.45715
  # DEBUG partitionD.54783 => 0B
  # DEBUG balanceD.54784 => 0
  # DEBUG dim_leftD.54785 => 0
  # DEBUG dim_leftD.54785 => 0
  # DEBUG destD.54780 => dest_26
  # DEBUG curD.54779 => cur_66
  # VUSE <.MEM_8(D)>
  gN.23_105 = gND.33727;
  if (gN.23_105 <= 0)
    goto <bb 41>;
  else
    goto <bb 16>;
;;    succ:       41 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 840, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       15 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  gK.24_146 = gKD.33726;
  _131 = cur_66 % gK.24_146;
  _159 = dest_26 % gK.24_146;
  if (_131 != _159)
    goto <bb 42>;
  else
    goto <bb 20>;
;;    succ:       42 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 1, count 0, freq 8710, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       21 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  _87 = cur_90 % gK.24_146;
  _89 = dest_91 % gK.24_146;
  if (_87 != _89)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 392, maybe hot
;;    prev block 17, next block 19, flags: (NEW)
;;    pred:       17 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # _199 = PHI <_87(17)>
  # _198 = PHI <_89(17)>
  # RANGE [1, 2147483647] NONZERO 2147483647
  # dim_left_195 = PHI <dim_left_92(17)>
  goto <bb 42>;
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 8318, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       17 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 21>;
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 802, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       16 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 1, count 0, freq 9120, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  # dim_left_117 = PHI <0(20), dim_left_92(19)>
  # cur_156 = PHI <cur_66(20), cur_90(19)>
  # dest_124 = PHI <dest_26(20), dest_91(19)>
  # DEBUG dim_leftD.54785 => dim_left_117
  # DEBUG destD.54780 => dest_124
  # DEBUG curD.54779 => cur_156
  cur_90 = cur_156 / gK.24_146;
  # DEBUG curD.54779 => cur_90
  dest_91 = dest_124 / gK.24_146;
  # DEBUG destD.54780 => dest_91
  # RANGE [1, 2147483647] NONZERO 2147483647
  dim_left_92 = dim_left_117 + 1;
  # DEBUG dim_leftD.54785 => dim_left_92
  # DEBUG dim_leftD.54785 => dim_left_92
  # DEBUG destD.54780 => dest_91
  # DEBUG curD.54779 => cur_90
  if (dim_left_92 >= gN.23_105)
    goto <bb 41>;
  else
    goto <bb 17>;
;;    succ:       41 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 352, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       42 [80.1%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#174ptD.0 => gKD.33726
  # DEBUG curD.54779 => NULL
  # DEBUG destD.54780 => NULL
  _97 = prephitmp_192 - prephitmp_191;
  _98 = _97 + gK.24_146;
  _99 = _98 % gK.24_146;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _100 = _99 * -2;
  dist2_101 = _100 + gK.24_146;
  # DEBUG dist2D.54787 => dist2_101
  if (dist2_101 > 0)
    goto <bb 40>;
  else
    goto <bb 23>;
;;    succ:       40 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [27.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 95, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       22 [27.0%]  (FALSE_VALUE,EXECUTABLE)
  if (dist2_101 == 0)
    goto <bb 24>;
  else
    goto <bb 39>;
;;    succ:       24 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 28, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG maxD.54789 => 1
  # .MEM_111 = VDEF <.MEM_8(D)>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _102 = _Z8ran_nextvD.43987 ();
  # RANGE [-1, 1]
  _103 = _102 % 2;
  if (_103 != 0)
    goto <bb 40>;
  else
    goto <bb 39>;
;;    succ:       40 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 88, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       42 [19.9%]  (FALSE_VALUE,EXECUTABLE)
  out_port_129 = in_channel_27(D) ^ 1;
  # DEBUG out_portD.45715 => out_port_129
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 880, maybe hot
;;   Invalid sum of incoming frequencies 985, should be 880
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       45 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                43 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                44 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_126 = PHI <.MEM_8(D)(45), .MEM_201(43), .MEM_8(D)(25), .MEM_202(44)>
  # out_port_110 = PHI <out_port_130(45), out_port_108(43), out_port_129(25), out_port_106(44)>
  # DEBUG out_portD.45715 => out_port_110
  if (dest_26 != cur_66)
    goto <bb 27>;
  else
    goto <bb 30>;
;;    succ:       27 [72.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [28.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 633, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       26 [72.0%]  (TRUE_VALUE,EXECUTABLE)
  _29 = vcEnd_4 - vcBegin_1;
  _30 = _29 + 1;
  # VUSE <.MEM_126>
  gNodes.121_31 = gNodesD.33729;
  vcs_per_dest_32 = _30 / gNodes.121_31;
  # DEBUG vcs_per_destD.45718 => vcs_per_dest_32
  if (vcs_per_dest_32 == 0)
    goto <bb 28>;
  else
    goto <bb 29>;
;;    succ:       28 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 0
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       27 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_38 = VDEF <.MEM_126>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  __assert_failD.9858 ("vcs_per_dest", "routefunc.cpp", 1622, &_ZZ18dim_order_ni_torusPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45714);
;;    succ:      

;;   basic block 29, loop depth 0, count 0, freq 633, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       27 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_126>
  _33 = f_11(D)->destD.29342;
  _34 = vcs_per_dest_32 * _33;
  vcBegin_35 = vcBegin_1 + _34;
  # DEBUG vcBeginD.45712 => vcBegin_35
  _36 = vcs_per_dest_32 + vcBegin_35;
  vcEnd_37 = _36 + -1;
  # DEBUG vcEndD.45713 => vcEnd_37
;;    succ:       30 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 879, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       26 [28.0%]  (FALSE_VALUE,EXECUTABLE)
;;                29 [100.0%]  (FALLTHRU,EXECUTABLE)
  # vcBegin_2 = PHI <vcBegin_1(26), vcBegin_35(29)>
  # vcEnd_5 = PHI <vcEnd_4(26), vcEnd_37(29)>
  # DEBUG vcEndD.45713 => vcEnd_5
  # DEBUG vcBeginD.45712 => vcBegin_2
  # VUSE <.MEM_126>
  _39 = f_11(D)->watchD.29345;
  if (_39 != 0)
    goto <bb 31>;
  else
    goto <bb 38>;
;;    succ:       31 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 343, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       30 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_126>
  _40 = f_11(D)->destD.29342;
  # VUSE <.MEM_126>
  _41 = f_11(D)->idD.29338;
  # DEBUG D#25ptD.0 => &r_25(D)->D.42039.D.32226
  # DEBUG thisD.51414 => D#25ptD.0
  # DEBUG D#26ptD.0 => &MEM[(const struct ModuleD.31381 *)r_25(D)]._fullnameD.31384
  # .MEM_43 = VDEF <.MEM_126>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _44 = _Z10GetSimTimevD.33721 ();
  # VUSE <.MEM_43>
  # PT = nonlocal escaped 
  gWatchOut.123_45 = gWatchOutD.33731;
  # .MEM_46 = VDEF <.MEM_43>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _47 = _ZNSolsEiD.23719 (gWatchOut.123_45, _44);
  # DEBUG __outD.51416 => _47
  # DEBUG __sD.51417 => " | "
  # DEBUG __sD.51418 => " | "
  # .MEM_70 = VDEF <.MEM_46>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_47, " | ", 3);
  # DEBUG __osD.51420 => _47
  # DEBUG __strD.51421 => D#26ptD.0
  # VUSE <.MEM_70>
  _48 = MEM[(long unsigned intD.14 *)r_25(D) + 48B];
  # DEBUG D#1ptD.0 => D#26ptD.0
  # DEBUG thisD.50724 => D#1ptD.0
  _67 = (long intD.12) _48;
  # DEBUG thisD.50721 => D#26ptD.0
  # VUSE <.MEM_70>
  # PT = nonlocal escaped 
  _68 = MEM[(charD.10 * *)r_25(D) + 40B];
  # DEBUG D#3ptD.0 => D#26ptD.0
  # DEBUG thisD.50676 => D#3ptD.0
  # .MEM_71 = VDEF <.MEM_70>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _69 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_47, _68, _67);
  # DEBUG __outD.51423 => _69
  # DEBUG __sD.51424 => " | "
  # DEBUG __sD.51425 => " | "
  # .MEM_72 = VDEF <.MEM_71>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_69, " | ", 3);
  # DEBUG __outD.51427 => _69
  # DEBUG __sD.51428 => "Adding VC range ["
  # DEBUG __sD.51429 => "Adding VC range ["
  # .MEM_73 = VDEF <.MEM_72>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_69, "Adding VC range [", 17);
  # .MEM_49 = VDEF <.MEM_73>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _50 = _ZNSolsEiD.23719 (_69, vcBegin_2);
  # DEBUG __outD.51431 => _50
  # DEBUG __sD.51432 => ","
  # DEBUG __sD.51433 => ","
  # .MEM_74 = VDEF <.MEM_49>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_50, ",", 1);
  # .MEM_51 = VDEF <.MEM_74>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _52 = _ZNSolsEiD.23719 (_50, vcEnd_5);
  # DEBUG __outD.51435 => _52
  # DEBUG __sD.51436 => "]"
  # DEBUG __sD.51437 => "]"
  # .MEM_75 = VDEF <.MEM_51>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_52, "]", 1);
  # DEBUG __outD.51439 => _52
  # DEBUG __sD.51440 => " at output port "
  # DEBUG __sD.51441 => " at output port "
  # .MEM_76 = VDEF <.MEM_75>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_52, " at output port ", 16);
  # .MEM_53 = VDEF <.MEM_76>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _54 = _ZNSolsEiD.23719 (_52, out_port_110);
  # DEBUG __outD.51443 => _54
  # DEBUG __sD.51444 => " for flit "
  # DEBUG __sD.51445 => " for flit "
  # .MEM_77 = VDEF <.MEM_53>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_54, " for flit ", 10);
  # .MEM_55 = VDEF <.MEM_77>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _56 = _ZNSolsEiD.23719 (_54, _41);
  # DEBUG __outD.51447 => _56
  # DEBUG __sD.51448 => " (input port "
  # DEBUG __sD.51449 => " (input port "
  # .MEM_78 = VDEF <.MEM_55>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_56, " (input port ", 13);
  # .MEM_57 = VDEF <.MEM_78>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _58 = _ZNSolsEiD.23719 (_56, in_channel_27(D));
  # DEBUG __outD.51451 => _58
  # DEBUG __sD.51452 => ", destination "
  # DEBUG __sD.51453 => ", destination "
  # .MEM_79 = VDEF <.MEM_57>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_58, ", destination ", 14);
  # .MEM_59 = VDEF <.MEM_79>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _60 = _ZNSolsEiD.23719 (_58, _40);
  # DEBUG __outD.51455 => _60
  # DEBUG __sD.51456 => ")"
  # DEBUG __sD.51457 => ")"
  # .MEM_80 = VDEF <.MEM_59>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_60, ")", 1);
  # DEBUG __outD.51459 => _60
  # DEBUG __sD.51460 => "."
  # DEBUG __sD.51461 => "."
  # .MEM_81 = VDEF <.MEM_80>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_60, ".", 1);
  # DEBUG thisD.51463 => _60
  # DEBUG __pfD.51464 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.23851
  # DEBUG __osD.54791 => _60
  # VUSE <.MEM_81>
  # PT = nonlocal escaped null { D.45714 } (nonlocal, escaped)
  _28 = _60->_vptr.basic_ostreamD.23811;
  # VUSE <.MEM_81>
  _132 = MEM[(long intD.12 *)_28 + -24B];
  # RANGE [0, 18446744073709551615]
  _133 = (sizetype) _132;
  # PT = nonlocal escaped 
  _134 = _60 + _133;
  # DEBUG thisD.54794 => _134
  # DEBUG __cD.54795 => 10
  # VUSE <.MEM_81>
  # PT = nonlocal escaped 
  _82 = MEM[(const struct basic_iosD.11171 *)_134]._M_ctypeD.23035;
  # DEBUG __fD.54796 => _82
  if (_82 == 0B)
    goto <bb 32>;
  else
    goto <bb 33>;
;;    succ:       32 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 0
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       31 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_123 = VDEF <.MEM_81>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZSt16__throw_bad_castvD.2825 ();
;;    succ:      

;;   basic block 33, loop depth 0, count 0, freq 343, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       31 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.54798 => _82
  # DEBUG __cD.54797 => 10
  # VUSE <.MEM_81>
  _139 = MEM[(const struct ctypeD.11417 *)_82]._M_widen_okD.19950;
  if (_139 != 0)
    goto <bb 34>;
  else
    goto <bb 35>;
;;    succ:       34 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 209, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       33 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_81>
  _142 = MEM[(const struct ctypeD.11417 *)_82]._M_widenD.19951[10];
  pretmp_188 = (intD.9) _142;
  goto <bb 37>;
;;    succ:       37 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 134, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       33 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.54800 => _82
  # DEBUG __cD.54801 => 10
  # .MEM_115 = VDEF <.MEM_81>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.20058 (_82);
  # VUSE <.MEM_115>
  # PT = nonlocal escaped 
  _147 = MEM[(const struct ctypeD.11417 *)_82].D.20091._vptr.facetD.16709;
  # VUSE <.MEM_115>
  # PT = nonlocal escaped 
  _148 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_147 + 48B];
  # PT = anything 
  PROF_152 = [obj_type_ref] OBJ_TYPE_REF(_148;(const struct ctypeD.11417)_82->6);
  if (PROF_152 == _ZNKSt5ctypeIcE8do_widenEcD.20039)
    goto <bb 37>;
  else
    goto <bb 36>;
;;    succ:       37 [81.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [19.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 25, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       35 [19.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_116 = VDEF <.MEM_115>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _154 = OBJ_TYPE_REF(_148;(const struct ctypeD.11417)_82->6) (_82, 10);
  pretmp_189 = (intD.9) _154;
;;    succ:       37 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 343, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       34 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [81.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_128 = PHI <.MEM_81(34), .MEM_115(35), .MEM_116(36)>
  # prephitmp_190 = PHI <pretmp_188(34), 10(35), pretmp_189(36)>
  # .MEM_119 = VDEF <.MEM_128>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _137 = _ZNSo3putEcD.23746 (_60, prephitmp_190);
  # DEBUG __osD.54792 => _137
  # .MEM_120 = VDEF <.MEM_119>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZNSo5flushEvD.23757 (_137);
;;    succ:       38 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 2257, maybe hot
;;   Invalid sum of incoming frequencies 2571, should be 2257
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       14 (TRUE_VALUE,EXECUTABLE)
;;                30 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # vcBegin_3 = PHI <vcBegin_1(14), vcBegin_2(30), vcBegin_2(37), vcBegin_1(12)>
  # vcEnd_6 = PHI <vcEnd_4(14), vcEnd_5(30), vcEnd_5(37), vcEnd_4(12)>
  # .MEM_7 = PHI <.MEM_8(D)(14), .MEM_126(30), .MEM_120(37), .MEM_8(D)(12)>
  # out_port_114 = PHI <-1(14), out_port_110(30), out_port_110(37), -1(12)>
  # DEBUG out_portD.45715 => out_port_114
  # DEBUG vcEndD.45713 => vcEnd_6
  # DEBUG vcBeginD.45712 => vcBegin_3
  # .MEM_62 = VDEF <.MEM_7>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_61(D));
  # .MEM_64 = VDEF <.MEM_62>
  # USE = nonlocal null { D.45714 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45714 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_61(D), out_port_114, vcBegin_3, vcEnd_6, 0);
  # DEBUG D#173ptD.0 => {CLOBBER}
  # DEBUG out_portD.45715 => D#173ptD.0
  # VUSE <.MEM_64>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 39, loop depth 0, count 0, freq 176, maybe hot
;;    prev block 38, next block 43, flags: (NEW, REACHABLE)
;;    pred:       23 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                24 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_201 = PHI <.MEM_8(D)(23), .MEM_111(24)>
;;    succ:       43 [100.0%]  (FALLTHRU)

;;   basic block 43, loop depth 0, count 0, freq 176, maybe hot
;;    prev block 39, next block 40, flags: (NEW)
;;    pred:       39 [100.0%]  (FALLTHRU)
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _107 = dim_left_112 * 2;
  # RANGE [-2147483647, 2147483647]
  out_port_108 = _107 + 1;
  # DEBUG out_portD.45715 => out_port_108
  # DEBUG dirD.54786 => 1
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 40, loop depth 0, count 0, freq 271, maybe hot
;;    prev block 43, next block 44, flags: (NEW, REACHABLE)
;;    pred:       22 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_202 = PHI <.MEM_8(D)(22), .MEM_111(24)>
;;    succ:       44 [100.0%]  (FALLTHRU)

;;   basic block 44, loop depth 0, count 0, freq 271, maybe hot
;;    prev block 40, next block 41, flags: (NEW)
;;    pred:       40 [100.0%]  (FALLTHRU)
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  out_port_106 = dim_left_112 * 2;
  # DEBUG out_portD.45715 => out_port_106
  # DEBUG dirD.54786 => 0
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 41, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 44, next block 45, flags: (NEW, REACHABLE)
;;    pred:       21 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       45 [100.0%]  (FALLTHRU)

;;   basic block 45, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 41, next block 42, flags: (NEW)
;;    pred:       41 [100.0%]  (FALLTHRU)
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  out_port_130 = gN.23_105 * 2;
  # DEBUG out_portD.45715 => out_port_130
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 440, maybe hot
;;    prev block 45, next block 1, flags: (NEW, REACHABLE)
;;    pred:       16 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  # dim_left_112 = PHI <0(16), dim_left_195(18)>
  # prephitmp_191 = PHI <_131(16), _199(18)>
  # prephitmp_192 = PHI <_159(16), _198(18)>
  # RANGE [-1073741824, 1073741823]
  _93 = in_channel_27(D) / 2;
  if (_93 != dim_left_112)
    goto <bb 22>;
  else
    goto <bb 25>;
;;    succ:       22 [80.1%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [19.9%]  (FALSE_VALUE,EXECUTABLE)

}



;; Function void planar_adapt_mesh(const Router*, const Flit*, int, OutputSet*, bool) (_Z17planar_adapt_meshPK6RouterPK4FlitiP9OutputSetb, funcdef_no=1980, decl_uid=45626, cgraph_uid=479, symbol_order=490)


Pass statistics:
----------------


Global statistics (BBS:108, LOOPS:2, CONDITIONS:57, STMTS:803)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Pass statistics:
----------------

void planar_adapt_mesh(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45621, const struct FlitD.29321 * fD.45622, intD.9 in_channelD.45623, struct OutputSetD.28230 * outputsD.45624, boolD.2757 injectD.45625)
Eh tree:
   6 cleanup land:{4,<L102>}
   2 cleanup land:{2,<L100>}
{
  size_typeD.14319 __dnewD.54963;
  size_typeD.14319 __dnewD.54918;
  char_typeD.19944 D.54898;
  charD.10 __cD.54897;
  char_typeD.19944 D.54895;
  charD.10 __cD.54894;
  char_typeD.23023 D.54892;
  struct basic_ostreamD.11177 & D.54886;
  char_typeD.19944 D.54883;
  charD.10 __cD.54882;
  char_typeD.19944 D.54880;
  charD.10 __cD.54879;
  char_typeD.23023 D.54877;
  struct basic_ostreamD.11177 & D.54871;
  char_typeD.19944 D.54868;
  charD.10 __cD.54867;
  char_typeD.19944 D.54865;
  charD.10 __cD.54864;
  char_typeD.23023 D.54862;
  struct basic_ostreamD.11177 & D.54856;
  char_typeD.19944 D.54853;
  charD.10 __cD.54852;
  char_typeD.19944 D.54850;
  charD.10 __cD.54849;
  char_typeD.23023 D.54847;
  struct basic_ostreamD.11177 & D.54841;
  boolD.2757 atedgeD.45642;
  intD.9 d1_min_cD.45638;
  boolD.2757 faultD.45637;
  boolD.2757 increaseD.45636;
  intD.9 nD.45635;
  intD.9 vc_multD.45634;
  intD.9 in_vcD.45633;
  intD.9 destD.45632;
  intD.9 curD.45631;
  static const charD.10 _ZZ17planar_adapt_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45630[74] = "void planar_adapt_mesh(const Router*, const Flit*, int, OutputSet*, bool)";
  intD.9 vcEndD.45629;
  intD.9 vcBeginD.45628;
  const struct stringD.9878 D.45645;
  const struct stringD.9878 D.45641;
  intD.9 pretmp_8;
  intD.9 gNumVCs.67_22;
  FlitTypeD.29324 _25;
  intD.9 _34;
  long intD.12 _41;
  intD.9 _44;
  intD.9 _45;
  intD.9 _49;
  intD.9 _50;
  unsigned int in_channel.70_52;
  unsigned int _53;
  intD.9 _54;
  intD.9 _55;
  boolD.2757 _59;
  intD.9 _60;
  intD.9 _62;
  struct ostreamD.11178 * gWatchOut.71_63;
  struct basic_ostreamD.11177 & _65;
  const size_typeD.14319 _66;
  struct basic_ostreamD.11177 & _68;
  struct basic_ostreamD.11177 & _70;
  intD.9 _74;
  boolD.2757 _76;
  intD.9 _77;
  intD.9 _78;
  boolD.2757 _80;
  intD.9 _82;
  struct ostreamD.11178 * gWatchOut.71_83;
  struct basic_ostreamD.11177 & _85;
  const size_typeD.14319 _86;
  struct basic_ostreamD.11177 & _88;
  intD.9 _89;
  intD.9 _90;
  boolD.2757 _92;
  intD.9 _93;
  intD.9 _94;
  boolD.2757 _96;
  intD.9 _98;
  struct ostreamD.11178 * gWatchOut.71_99;
  struct basic_ostreamD.11177 & _101;
  const size_typeD.14319 _102;
  struct basic_ostreamD.11177 & _104;
  intD.9 pretmp_105;
  intD.9 _112;
  intD.9 _114;
  intD.9 _115;
  intD.9 _117;
  boolD.2757 _120;
  intD.9 _122;
  struct ostreamD.11178 * gWatchOut.71_123;
  struct basic_ostreamD.11177 & _125;
  const size_typeD.14319 _126;
  struct basic_ostreamD.11177 & _128;
  intD.9 gK.69_129;
  intD.9 _130;
  intD.9 _132;
  intD.9 _133;
  intD.9 _135;
  boolD.2757 _139;
  intD.9 _140;
  boolD.2757 _142;
  boolD.2757 _143;
  const struct ModuleD.31381 * _144;
  charD.10 * const _146;
  charD.10 * const _148;
  boolD.2757 _156;
  boolD.2757 _157;
  const struct ModuleD.31381 * _158;
  long intD.12 _160;
  charD.10 * const _162;
  charD.10 * const _164;
  intD.9 gN.68_167;
  intD.9 _168;
  charD.10 * const _171;
  struct basic_ostreamD.11177 & _172;
  long intD.12 _173;
  charD.10 * const _174;
  struct basic_ostreamD.11177 & _175;
  long intD.12 _176;
  charD.10 * const _177;
  struct basic_ostreamD.11177 & _178;
  long intD.12 _179;
  charD.10 * const _180;
  struct basic_ostreamD.11177 & _181;
  long intD.12 _182;
  intD.9 _183;
  const struct __ctype_typeD.23028 * _192;
  const struct __ctype_typeD.23028 * _198;
  const struct __ctype_typeD.23028 * _204;
  const struct __ctype_typeD.23028 * _210;
  intD.9 _224;
  intD.9 _225;
  boolD.2757 _230;
  boolD.2757 _231;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _232;
  long intD.12 _233;
  sizetype _234;
  struct basic_iosD.11171 * _235;
  intD.9 prephitmp_236;
  struct basic_ostreamD.11177 & _238;
  boolD.2757 _239;
  charD.10 _240;
  intD.9 gK.69_241;
  char_typeD.19944 _243;
  unsigned int _244;
  intD.9 _246;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _248;
  intD.9 (*__vtbl_ptr_typeD.2760) () _249;
  boolD.2757 _251;
  intD.9 gN.68_252;
  voidD.45 * PROF_253;
  unsigned int in_channel.70_254;
  char_typeD.19944 _255;
  unsigned int _256;
  unsigned int _257;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _258;
  long intD.12 _259;
  sizetype _260;
  struct basic_iosD.11171 * _261;
  intD.9 pretmp_262;
  struct basic_ostreamD.11177 & _264;
  unsigned int _265;
  charD.10 _266;
  unsigned int _267;
  char_typeD.19944 _269;
  boolD.2757 _270;
  intD.9 pretmp_271;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _274;
  intD.9 (*__vtbl_ptr_typeD.2760) () _275;
  boolD.2757 _277;
  intD.9 gN.68_278;
  voidD.45 * PROF_279;
  char_typeD.19944 _281;
  unsigned int _282;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _284;
  long intD.12 _285;
  sizetype _286;
  struct basic_iosD.11171 * _287;
  struct basic_ostreamD.11177 & _290;
  charD.10 _292;
  intD.9 pretmp_294;
  char_typeD.19944 _295;
  intD.9 pretmp_296;
  intD.9 prephitmp_299;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _300;
  intD.9 (*__vtbl_ptr_typeD.2760) () _301;
  boolD.2757 _303;
  voidD.45 * PROF_305;
  intD.9 _306;
  char_typeD.19944 _307;
  intD.9 pretmp_308;
  intD.9 _309;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _310;
  long intD.12 _311;
  sizetype _312;
  struct basic_iosD.11171 * _313;
  boolD.2757 _314;
  struct basic_ostreamD.11177 & _316;
  charD.10 _318;
  intD.9 prephitmp_319;
  char_typeD.19944 _321;
  intD.9 pretmp_325;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _326;
  intD.9 (*__vtbl_ptr_typeD.2760) () _327;
  intD.9 pretmp_328;
  intD.9 gK.69_329;
  voidD.45 * PROF_331;
  intD.9 prephitmp_332;
  char_typeD.19944 _333;
  intD.9 prephitmp_334;
  intD.9 pretmp_335;
  intD.9 _344;
  charD.10 * _345;
  long unsigned intD.14 __dnew.173_346;
  intD.9 _347;
  long unsigned intD.14 __dnew.173_349;
  charD.10 * const _350;
  charD.10 * _351;
  boolD.2757 _355;
  charD.10 * _361;
  long unsigned intD.14 __dnew.173_362;
  intD.9 gK.69_364;
  long unsigned intD.14 __dnew.173_365;
  charD.10 * const _366;
  charD.10 * _367;
  intD.9 _369;
  intD.9 _372;
  intD.9 gN.68_377;
  intD.9 prephitmp_383;
  intD.9 pretmp_390;
  intD.9 pretmp_399;
  intD.9 _400;

;;   basic block 2, loop depth 0, count 0, freq 5704, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG vcBeginD.45628 => 0
  # DEBUG D#178ptD.0 => gNumVCsD.42077
  # DEBUG vcEndD.45629 => D#178ptD.0 + -1
  # VUSE <.MEM_21(D)>
  _25 = f_24(D)->typeD.29330;
  if (_25 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 2852, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_21(D)>
  vcBegin_26 = gReadReqBeginVCD.42078;
  # DEBUG vcBeginD.45628 => vcBegin_26
  # VUSE <.MEM_21(D)>
  vcEnd_27 = gReadReqEndVCD.42079;
  # DEBUG vcEndD.45629 => vcEnd_27
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 2852, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_25 == 2)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 799, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_21(D)>
  vcBegin_28 = gWriteReqBeginVCD.42080;
  # DEBUG vcBeginD.45628 => vcBegin_28
  # VUSE <.MEM_21(D)>
  vcEnd_29 = gWriteReqEndVCD.42081;
  # DEBUG vcEndD.45629 => vcEnd_29
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 2054, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_25 == 1)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 575, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_21(D)>
  vcBegin_30 = gReadReplyBeginVCD.42082;
  # DEBUG vcBeginD.45628 => vcBegin_30
  # VUSE <.MEM_21(D)>
  vcEnd_31 = gReadReplyEndVCD.42083;
  # DEBUG vcEndD.45629 => vcEnd_31
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 1479, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_21(D)>
  gNumVCs.67_22 = gNumVCsD.42077;
  if (_25 == 3)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 1065, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  vcEnd_23 = gNumVCs.67_22 + -1;
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 414, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_21(D)>
  vcBegin_32 = gWriteReplyBeginVCD.42084;
  # DEBUG vcBeginD.45628 => vcBegin_32
  # VUSE <.MEM_21(D)>
  vcEnd_33 = gWriteReplyEndVCD.42085;
  # DEBUG vcEndD.45629 => vcEnd_33
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 5704, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # vcBegin_1 = PHI <vcBegin_26(3), vcBegin_28(5), vcBegin_30(7), 0(9), vcBegin_32(10)>
  # vcEnd_3 = PHI <vcEnd_27(3), vcEnd_29(5), vcEnd_31(7), vcEnd_23(9), vcEnd_33(10)>
  # DEBUG vcEndD.45629 => vcEnd_3
  # DEBUG vcBeginD.45628 => vcBegin_1
  # VUSE <.MEM_21(D)>
  _34 = f_24(D)->vcD.29331;
  _143 = vcEnd_3 < _34;
  _251 = vcBegin_1 > _34;
  _157 = _143 | _251;
  if (_157 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 4277, maybe hot
;;   Invalid sum of incoming frequencies 2852, should be 4277
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  _277 = _34 >= 0;
  if (inject_35(D) <= _277)
    goto <bb 13>;
  else
    goto <bb 101>;
;;    succ:       13 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                101 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 3
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_36 = VDEF <.MEM_21(D)>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  __assert_failD.9858 ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 1048, &_ZZ17planar_adapt_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45630);
;;    succ:      

;;   basic block 14, loop depth 0, count 0, freq 1426, maybe hot
;;   Invalid sum of incoming frequencies 2852, should be 1426
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_38 = VDEF <.MEM_21(D)>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_37(D));
  if (inject_35(D) != 0)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 (TRUE_VALUE,EXECUTABLE)
;;                16 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 1181, maybe hot
;;   Invalid sum of incoming frequencies 4275, should be 1181
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 (TRUE_VALUE,EXECUTABLE)
;;                101 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_401 = PHI <.MEM_38(14), .MEM_273(101)>
  # .MEM_39 = VDEF <.MEM_401>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_37(D), -1, vcBegin_1, vcEnd_3, 0);
  goto <bb 94>;
;;    succ:       94 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 4520, maybe hot
;;   Invalid sum of incoming frequencies 1426, should be 4520
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_38>
  cur_170 = MEM[(intD.9 *)r_40(D) + 96B];
  # DEBUG D#14ptD.0 => r_40(D)
  # DEBUG thisD.52036 => D#14ptD.0
  # DEBUG curD.45631 => NULL
  # VUSE <.MEM_38>
  dest_42 = f_24(D)->destD.29342;
  # DEBUG destD.45632 => dest_42
  if (dest_42 != cur_170)
    goto <bb 17>;
  else
    goto <bb 93>;
;;    succ:       17 [86.3%]  (TRUE_VALUE,EXECUTABLE)
;;                93 [13.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 3901, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [86.3%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_38>
  in_vc_43 = f_24(D)->vcD.29331;
  # DEBUG in_vcD.45633 => in_vc_43
  _44 = vcEnd_3 - vcBegin_1;
  _45 = _44 + 1;
  # RANGE [-715827882, 715827882]
  vc_mult_46 = _45 / 3;
  # DEBUG vc_multD.45634 => vc_mult_46
  # DEBUG nD.45635 => 0
  # DEBUG nD.45635 => 0
  # DEBUG destD.45632 => dest_42
  # DEBUG curD.45631 => cur_170
  # VUSE <.MEM_38>
  gN.68_278 = gND.33727;
  if (gN.68_278 <= 0)
    goto <bb 30>;
  else
    goto <bb 18>;
;;    succ:       30 [2.2%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [97.8%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 3813, maybe hot
;;    prev block 17, next block 19, flags: (NEW)
;;    pred:       17 [97.8%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_38>
  pretmp_105 = gKD.33726;
  _282 = (unsigned int) vc_mult_46;
  _267 = _282 * 2;
  _54 = (intD.9) _267;
  _265 = (unsigned int) vcBegin_1;
  _257 = (unsigned int) _54;
  _256 = _265 + _257;
  _55 = (intD.9) _256;
  if (in_vc_43 >= _55)
    goto <bb 24>;
  else
    goto <bb 19>;
;;    succ:       19 [97.8%]  (FALSE_VALUE,EXECUTABLE)
;;                24 [2.2%]  (TRUE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 3727, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       18 [97.8%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 1, count 0, freq 9560, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [100.0%]  (FALLTHRU,EXECUTABLE)
  # cur_324 = PHI <cur_170(19), cur_229(23)>
  # dest_298 = PHI <dest_42(19), dest_228(23)>
  # n_272 = PHI <0(19), n_226(23)>
  # DEBUG nD.45635 => n_272
  # DEBUG destD.45632 => dest_298
  # DEBUG curD.45631 => cur_324
  _246 = cur_324 % pretmp_105;
  _372 = dest_298 % pretmp_105;
  if (_246 != _372)
    goto <bb 21>;
  else
    goto <bb 22>;
;;    succ:       21 [72.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [28.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 1, count 0, freq 6883, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [72.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 4294967295]
  in_channel.70_254 = (unsigned int) in_channel_51(D);
  # RANGE [0, 4294967295]
  _244 = in_channel.70_254 + 1;
  # RANGE [0, 1]
  _239 = n_272 != 0;
  # RANGE [0, 1]
  _231 = _244 > 2;
  # RANGE [0, 1]
  _230 = _239 | _231;
  if (_230 != 0)
    goto <bb 31>;
  else
    goto <bb 22>;
;;    succ:       31 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 5966, maybe hot
;;   Invalid sum of incoming frequencies 6119, should be 5966
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       20 [28.0%]  (FALSE_VALUE,EXECUTABLE)
;;                21 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  cur_229 = cur_324 / pretmp_105;
  # DEBUG curD.45631 => cur_229
  dest_228 = dest_298 / pretmp_105;
  # DEBUG destD.45632 => dest_228
  n_226 = n_272 + 1;
  # DEBUG nD.45635 => n_226
  # DEBUG nD.45635 => n_226
  # DEBUG destD.45632 => dest_228
  # DEBUG curD.45631 => cur_229
  if (n_226 >= gN.68_278)
    goto <bb 30>;
  else
    goto <bb 23>;
;;    succ:       30 [2.2%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [97.8%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 5832, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 [97.8%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 86, maybe hot
;;    prev block 23, next block 25, flags: (NEW)
;;    pred:       18 [2.2%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 225, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                28 [100.0%]  (FALLTHRU,EXECUTABLE)
  # cur_359 = PHI <cur_170(24), cur_56(28)>
  # dest_382 = PHI <dest_42(24), dest_57(28)>
  # n_323 = PHI <0(24), n_58(28)>
  # DEBUG nD.45635 => n_323
  # DEBUG destD.45632 => dest_382
  # DEBUG curD.45631 => cur_359
  _49 = cur_359 % pretmp_105;
  _50 = dest_382 % pretmp_105;
  if (_49 != _50)
    goto <bb 26>;
  else
    goto <bb 27>;
;;    succ:       26 [72.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [28.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 162, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       25 [72.0%]  (TRUE_VALUE,EXECUTABLE)
  # _225 = PHI <_49(25)>
  # _224 = PHI <_50(25)>
  # n_223 = PHI <n_323(25)>
  # cur_221 = PHI <cur_359(25)>
  # dest_220 = PHI <dest_382(25)>
  # RANGE [0, 4294967295]
  in_channel.70_52 = (unsigned int) in_channel_51(D);
  # RANGE [0, 4294967295]
  _53 = in_channel.70_52 + 1;
  # RANGE [0, 1]
  _270 = n_223 != 0;
  # RANGE [0, 1]
  _303 = _53 > 2;
  # RANGE [0, 1]
  _355 = _270 | _303;
  if (_355 != 0)
    goto <bb 31>;
  else
    goto <bb 29>;
;;    succ:       31 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 1, count 0, freq 140, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       25 [28.0%]  (FALSE_VALUE,EXECUTABLE)
  cur_56 = cur_359 / pretmp_105;
  # DEBUG curD.45631 => cur_56
  dest_57 = dest_382 / pretmp_105;
  # DEBUG destD.45632 => dest_57
  n_58 = n_323 + 1;
  # DEBUG nD.45635 => n_58
  # DEBUG nD.45635 => n_58
  # DEBUG destD.45632 => dest_57
  # DEBUG curD.45631 => cur_56
  if (n_58 >= gN.68_278)
    goto <bb 30>;
  else
    goto <bb 28>;
;;    succ:       30 [2.2%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [97.8%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 1, count 0, freq 137, maybe hot
;;    prev block 27, next block 29, flags: (NEW)
;;    pred:       27 [97.8%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 78, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       26 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (gN.68_278 <= 0)
    goto <bb 30>;
  else
    goto <bb 32>;
;;    succ:       30 (TRUE_VALUE,EXECUTABLE)
;;                32 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 2
;;   Invalid sum of incoming frequencies 225, should be 2
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       27 [2.2%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [2.2%]  (TRUE_VALUE,EXECUTABLE)
;;                29 (TRUE_VALUE,EXECUTABLE)
;;                22 [2.2%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_166 = VDEF <.MEM_38>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  __assert_failD.9858 ("n < gN", "routefunc.cpp", 1084, &_ZZ17planar_adapt_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45630);
;;    succ:      

;;   basic block 31, loop depth 0, count 0, freq 3519, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       26 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # _369 = PHI <_225(26), _246(21)>
  # _347 = PHI <_224(26), _372(21)>
  # n_342 = PHI <n_223(26), n_272(21)>
  # cur_322 = PHI <cur_221(26), cur_324(21)>
  # dest_317 = PHI <dest_220(26), dest_298(21)>
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 3899, maybe hot
;;   Invalid sum of incoming frequencies 3597, should be 3899
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       29 [100.0%]  (FALSE_VALUE,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,EXECUTABLE)
  # n_391 = PHI <0(29), n_342(31)>
  # _309 = PHI <_225(29), _369(31)>
  # _306 = PHI <_224(29), _347(31)>
  # cur_297 = PHI <cur_221(29), cur_322(31)>
  # dest_291 = PHI <dest_220(29), dest_317(31)>
  # VUSE <.MEM_38>
  _59 = f_24(D)->watchD.29345;
  if (_59 != 0)
    goto <bb 33>;
  else
    goto <bb 40>;
;;    succ:       33 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 1131, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       32 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_38>
  _60 = f_24(D)->idD.29338;
  # DEBUG D#70ptD.0 => &r_40(D)->D.42039.D.32226
  # DEBUG thisD.52064 => D#70ptD.0
  # .MEM_61 = VDEF <.MEM_38>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _62 = _Z10GetSimTimevD.33721 ();
  # VUSE <.MEM_61>
  # PT = nonlocal escaped 
  gWatchOut.71_63 = gWatchOutD.33731;
  # .MEM_64 = VDEF <.MEM_61>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _65 = _ZNSolsEiD.23719 (gWatchOut.71_63, _62);
  # DEBUG __outD.52060 => _65
  # DEBUG __sD.52061 => " | "
  # DEBUG __sD.52062 => " | "
  # .MEM_186 = VDEF <.MEM_64>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_65, " | ", 3);
  # DEBUG __osD.52057 => _65
  # DEBUG __strD.52058 => NULL
  # VUSE <.MEM_186>
  _66 = MEM[(long unsigned intD.14 *)r_40(D) + 48B];
  # DEBUG thisD.50724 => D#1ptD.0
  _41 = (long intD.12) _66;
  # DEBUG thisD.50721 => NULL
  # VUSE <.MEM_186>
  # PT = nonlocal escaped 
  _171 = MEM[(charD.10 * *)r_40(D) + 40B];
  # DEBUG thisD.50676 => D#3ptD.0
  # .MEM_187 = VDEF <.MEM_186>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _172 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_65, _171, _41);
  # DEBUG __outD.52053 => _172
  # DEBUG __sD.52054 => " | "
  # DEBUG __sD.52055 => " | "
  # .MEM_188 = VDEF <.MEM_187>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_172, " | ", 3);
  # DEBUG __outD.52049 => _172
  # DEBUG __sD.52050 => "PLANAR ADAPTIVE: flit "
  # DEBUG __sD.52051 => "PLANAR ADAPTIVE: flit "
  # .MEM_189 = VDEF <.MEM_188>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_172, "PLANAR ADAPTIVE: flit ", 22);
  # .MEM_67 = VDEF <.MEM_189>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _68 = _ZNSolsEiD.23719 (_172, _60);
  # DEBUG __outD.52045 => _68
  # DEBUG __sD.52046 => " in adaptive plane "
  # DEBUG __sD.52047 => " in adaptive plane "
  # .MEM_190 = VDEF <.MEM_67>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_68, " in adaptive plane ", 19);
  # .MEM_69 = VDEF <.MEM_190>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _70 = _ZNSolsEiD.23719 (_68, n_391);
  # DEBUG __outD.52041 => _70
  # DEBUG __sD.52042 => "."
  # DEBUG __sD.52043 => "."
  # .MEM_191 = VDEF <.MEM_69>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_70, ".", 1);
  # DEBUG thisD.52038 => _70
  # DEBUG __pfD.52039 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.23851
  # DEBUG __osD.54839 => _70
  # VUSE <.MEM_191>
  # PT = nonlocal escaped null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _232 = _70->_vptr.basic_ostreamD.23811;
  # VUSE <.MEM_191>
  _233 = MEM[(long intD.12 *)_232 + -24B];
  # RANGE [0, 18446744073709551615]
  _234 = (sizetype) _233;
  # PT = nonlocal escaped 
  _235 = _70 + _234;
  # DEBUG thisD.54842 => _235
  # DEBUG __cD.54843 => 10
  # VUSE <.MEM_191>
  # PT = nonlocal escaped 
  _192 = MEM[(const struct basic_iosD.11171 *)_235]._M_ctypeD.23035;
  # DEBUG __fD.54844 => _192
  if (_192 == 0B)
    goto <bb 34>;
  else
    goto <bb 35>;
;;    succ:       34 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 0
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       33 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                43 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                51 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                65 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_368 = PHI <.MEM_191(33), .MEM_197(43), .MEM_203(51), .MEM_209(65)>
  # .MEM_378 = VDEF <.MEM_368>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZSt16__throw_bad_castvD.2825 ();
;;    succ:      

;;   basic block 35, loop depth 0, count 0, freq 1130, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       33 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.54846 => _192
  # DEBUG __cD.54845 => 10
  # VUSE <.MEM_191>
  _240 = MEM[(const struct ctypeD.11417 *)_192]._M_widen_okD.19950;
  if (_240 != 0)
    goto <bb 36>;
  else
    goto <bb 37>;
;;    succ:       36 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 690, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       35 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_191>
  _243 = MEM[(const struct ctypeD.11417 *)_192]._M_widenD.19951[10];
  pretmp_335 = (intD.9) _243;
  goto <bb 39>;
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 441, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       35 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.54848 => _192
  # DEBUG __cD.54849 => 10
  # .MEM_370 = VDEF <.MEM_191>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.20058 (_192);
  # VUSE <.MEM_370>
  # PT = nonlocal escaped 
  _248 = MEM[(const struct ctypeD.11417 *)_192].D.20091._vptr.facetD.16709;
  # VUSE <.MEM_370>
  # PT = nonlocal escaped 
  _249 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_248 + 48B];
  # PT = anything 
  PROF_253 = [obj_type_ref] OBJ_TYPE_REF(_249;(const struct ctypeD.11417)_192->6);
  if (PROF_253 == _ZNKSt5ctypeIcE8do_widenEcD.20039)
    goto <bb 39>;
  else
    goto <bb 38>;
;;    succ:       39 [80.2%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [19.8%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 87, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       37 [19.8%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_371 = VDEF <.MEM_370>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _255 = OBJ_TYPE_REF(_249;(const struct ctypeD.11417)_192->6) (_192, 10);
  pretmp_399 = (intD.9) _255;
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 1130, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       36 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                37 [80.2%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_356 = PHI <.MEM_191(36), .MEM_370(37), .MEM_371(38)>
  # RANGE [-128, 127]
  # prephitmp_334 = PHI <pretmp_335(36), 10(37), pretmp_399(38)>
  # .MEM_375 = VDEF <.MEM_356>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _238 = _ZNSo3putEcD.23746 (_70, prephitmp_334);
  # DEBUG __osD.54840 => _238
  # .MEM_376 = VDEF <.MEM_375>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZNSo5flushEvD.23757 (_238);
  # VUSE <.MEM_376>
  pretmp_8 = gKD.33726;
  pretmp_271 = cur_297 % pretmp_8;
  pretmp_262 = dest_291 % pretmp_8;
;;    succ:       40 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 40, loop depth 0, count 0, freq 3899, maybe hot
;;    prev block 39, next block 41, flags: (NEW, REACHABLE)
;;    pred:       32 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                39 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_15 = PHI <.MEM_38(32), .MEM_376(39)>
  # prephitmp_383 = PHI <_309(32), pretmp_271(39)>
  # prephitmp_236 = PHI <_306(32), pretmp_262(39)>
  if (prephitmp_236 > prephitmp_383)
    goto <bb 41>;
  else
    goto <bb 49>;
;;    succ:       41 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                49 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 41, loop depth 0, count 0, freq 1949, maybe hot
;;    prev block 40, next block 42, flags: (NEW, REACHABLE)
;;    pred:       40 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG increaseD.45636 => 1
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _74 = n_391 * 2;
  # .MEM_75 = VDEF <.MEM_15>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _76 = _ZNK6Router14IsFaultyOutputEiD.41991 (r_40(D), _74);
  if (_76 != 0)
    goto <bb 103>;
  else
    goto <bb 42>;
;;    succ:       42 [29.0%]  (FALSE_VALUE,EXECUTABLE)
;;                103 [71.0%]  (TRUE_VALUE,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 565, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       41 [29.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-1431655764, 1431655764] NONZERO 4294967294
  _77 = vc_mult_46 * 2;
  _78 = vcBegin_1 + _77;
  # .MEM_79 = VDEF <.MEM_75>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_37(D), _74, _78, vcEnd_3, 0);
  # DEBUG faultD.45637 => 0
  # VUSE <.MEM_79>
  _80 = f_24(D)->watchD.29345;
  if (_80 != 0)
    goto <bb 43>;
  else
    goto <bb 103>;
;;    succ:       43 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                103 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 43, loop depth 0, count 0, freq 164, maybe hot
;;    prev block 42, next block 44, flags: (NEW, REACHABLE)
;;    pred:       42 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#72ptD.0 => &r_40(D)->D.42039.D.32226
  # DEBUG thisD.52088 => D#72ptD.0
  # .MEM_81 = VDEF <.MEM_79>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _82 = _Z10GetSimTimevD.33721 ();
  # VUSE <.MEM_81>
  # PT = nonlocal escaped 
  gWatchOut.71_83 = gWatchOutD.33731;
  # .MEM_84 = VDEF <.MEM_81>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _85 = _ZNSolsEiD.23719 (gWatchOut.71_83, _82);
  # DEBUG __outD.52084 => _85
  # DEBUG __sD.52085 => " | "
  # DEBUG __sD.52086 => " | "
  # .MEM_193 = VDEF <.MEM_84>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_85, " | ", 3);
  # DEBUG __osD.52081 => _85
  # DEBUG __strD.52082 => NULL
  # VUSE <.MEM_193>
  _86 = MEM[(long unsigned intD.14 *)r_40(D) + 48B];
  # DEBUG thisD.50724 => D#1ptD.0
  _173 = (long intD.12) _86;
  # DEBUG thisD.50721 => NULL
  # VUSE <.MEM_193>
  # PT = nonlocal escaped 
  _174 = MEM[(charD.10 * *)r_40(D) + 40B];
  # DEBUG thisD.50676 => D#3ptD.0
  # .MEM_194 = VDEF <.MEM_193>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _175 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_85, _174, _173);
  # DEBUG __outD.52077 => _175
  # DEBUG __sD.52078 => " | "
  # DEBUG __sD.52079 => " | "
  # .MEM_195 = VDEF <.MEM_194>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_175, " | ", 3);
  # DEBUG __outD.52073 => _175
  # DEBUG __sD.52074 => "PLANAR ADAPTIVE: increasing in dimension "
  # DEBUG __sD.52075 => "PLANAR ADAPTIVE: increasing in dimension "
  # .MEM_196 = VDEF <.MEM_195>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_175, "PLANAR ADAPTIVE: increasing in dimension ", 41);
  # .MEM_87 = VDEF <.MEM_196>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _88 = _ZNSolsEiD.23719 (_175, n_391);
  # DEBUG __outD.52069 => _88
  # DEBUG __sD.52070 => "."
  # DEBUG __sD.52071 => "."
  # .MEM_197 = VDEF <.MEM_87>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_88, ".", 1);
  # DEBUG thisD.52066 => _88
  # DEBUG __pfD.52067 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.23851
  # DEBUG __osD.54854 => _88
  # VUSE <.MEM_197>
  # PT = nonlocal escaped null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _258 = _88->_vptr.basic_ostreamD.23811;
  # VUSE <.MEM_197>
  _259 = MEM[(long intD.12 *)_258 + -24B];
  # RANGE [0, 18446744073709551615]
  _260 = (sizetype) _259;
  # PT = nonlocal escaped 
  _261 = _88 + _260;
  # DEBUG thisD.54857 => _261
  # DEBUG __cD.54858 => 10
  # VUSE <.MEM_197>
  # PT = nonlocal escaped 
  _198 = MEM[(const struct basic_iosD.11171 *)_261]._M_ctypeD.23035;
  # DEBUG __fD.54859 => _198
  if (_198 == 0B)
    goto <bb 34>;
  else
    goto <bb 44>;
;;    succ:       34 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 44, loop depth 0, count 0, freq 164, maybe hot
;;    prev block 43, next block 45, flags: (NEW, REACHABLE)
;;    pred:       43 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.54861 => _198
  # DEBUG __cD.54860 => 10
  # VUSE <.MEM_197>
  _266 = MEM[(const struct ctypeD.11417 *)_198]._M_widen_okD.19950;
  if (_266 != 0)
    goto <bb 45>;
  else
    goto <bb 46>;
;;    succ:       45 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                46 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 45, loop depth 0, count 0, freq 100, maybe hot
;;    prev block 44, next block 46, flags: (NEW, REACHABLE)
;;    pred:       44 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_197>
  _269 = MEM[(const struct ctypeD.11417 *)_198]._M_widenD.19951[10];
  pretmp_325 = (intD.9) _269;
  goto <bb 48>;
;;    succ:       48 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 46, loop depth 0, count 0, freq 64, maybe hot
;;    prev block 45, next block 47, flags: (NEW, REACHABLE)
;;    pred:       44 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.54863 => _198
  # DEBUG __cD.54864 => 10
  # .MEM_379 = VDEF <.MEM_197>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.20058 (_198);
  # VUSE <.MEM_379>
  # PT = nonlocal escaped 
  _274 = MEM[(const struct ctypeD.11417 *)_198].D.20091._vptr.facetD.16709;
  # VUSE <.MEM_379>
  # PT = nonlocal escaped 
  _275 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_274 + 48B];
  # PT = anything 
  PROF_279 = [obj_type_ref] OBJ_TYPE_REF(_275;(const struct ctypeD.11417)_198->6);
  if (PROF_279 == _ZNKSt5ctypeIcE8do_widenEcD.20039)
    goto <bb 48>;
  else
    goto <bb 47>;
;;    succ:       48 [80.7%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [19.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 47, loop depth 0, count 0, freq 12, maybe hot
;;    prev block 46, next block 48, flags: (NEW, REACHABLE)
;;    pred:       46 [19.3%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_380 = VDEF <.MEM_379>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _281 = OBJ_TYPE_REF(_275;(const struct ctypeD.11417)_198->6) (_198, 10);
  pretmp_328 = (intD.9) _281;
;;    succ:       48 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 48, loop depth 0, count 0, freq 164, maybe hot
;;    prev block 47, next block 49, flags: (NEW, REACHABLE)
;;    pred:       45 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                46 [80.7%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_340 = PHI <.MEM_197(45), .MEM_379(46), .MEM_380(47)>
  # RANGE [-128, 127]
  # prephitmp_332 = PHI <pretmp_325(45), 10(46), pretmp_328(47)>
  # .MEM_384 = VDEF <.MEM_340>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _264 = _ZNSo3putEcD.23746 (_88, prephitmp_332);
  # DEBUG __osD.54855 => _264
  # .MEM_385 = VDEF <.MEM_384>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZNSo5flushEvD.23757 (_264);
  goto <bb 103>;
;;    succ:       103 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 49, loop depth 0, count 0, freq 1949, maybe hot
;;    prev block 48, next block 50, flags: (NEW, REACHABLE)
;;    pred:       40 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG increaseD.45636 => 0
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _89 = n_391 * 2;
  # RANGE [-2147483647, 2147483647]
  _90 = _89 + 1;
  # .MEM_91 = VDEF <.MEM_15>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _92 = _ZNK6Router14IsFaultyOutputEiD.41991 (r_40(D), _90);
  if (_92 != 0)
    goto <bb 102>;
  else
    goto <bb 50>;
;;    succ:       50 [29.0%]  (FALSE_VALUE,EXECUTABLE)
;;                102 [71.0%]  (TRUE_VALUE,EXECUTABLE)

;;   basic block 50, loop depth 0, count 0, freq 565, maybe hot
;;    prev block 49, next block 51, flags: (NEW, REACHABLE)
;;    pred:       49 [29.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-1431655764, 1431655764] NONZERO 4294967294
  _93 = vc_mult_46 * 2;
  _94 = vcBegin_1 + _93;
  # .MEM_95 = VDEF <.MEM_91>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_37(D), _90, _94, vcEnd_3, 0);
  # DEBUG faultD.45637 => 0
  # VUSE <.MEM_95>
  _96 = f_24(D)->watchD.29345;
  if (_96 != 0)
    goto <bb 51>;
  else
    goto <bb 102>;
;;    succ:       51 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                102 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 51, loop depth 0, count 0, freq 164, maybe hot
;;    prev block 50, next block 52, flags: (NEW, REACHABLE)
;;    pred:       50 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#71ptD.0 => &r_40(D)->D.42039.D.32226
  # DEBUG thisD.52112 => D#71ptD.0
  # .MEM_97 = VDEF <.MEM_95>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _98 = _Z10GetSimTimevD.33721 ();
  # VUSE <.MEM_97>
  # PT = nonlocal escaped 
  gWatchOut.71_99 = gWatchOutD.33731;
  # .MEM_100 = VDEF <.MEM_97>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _101 = _ZNSolsEiD.23719 (gWatchOut.71_99, _98);
  # DEBUG __outD.52108 => _101
  # DEBUG __sD.52109 => " | "
  # DEBUG __sD.52110 => " | "
  # .MEM_199 = VDEF <.MEM_100>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_101, " | ", 3);
  # DEBUG __osD.52105 => _101
  # DEBUG __strD.52106 => NULL
  # VUSE <.MEM_199>
  _102 = MEM[(long unsigned intD.14 *)r_40(D) + 48B];
  # DEBUG thisD.50724 => D#1ptD.0
  _176 = (long intD.12) _102;
  # DEBUG thisD.50721 => NULL
  # VUSE <.MEM_199>
  # PT = nonlocal escaped 
  _177 = MEM[(charD.10 * *)r_40(D) + 40B];
  # DEBUG thisD.50676 => D#3ptD.0
  # .MEM_200 = VDEF <.MEM_199>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _178 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_101, _177, _176);
  # DEBUG __outD.52101 => _178
  # DEBUG __sD.52102 => " | "
  # DEBUG __sD.52103 => " | "
  # .MEM_201 = VDEF <.MEM_200>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_178, " | ", 3);
  # DEBUG __outD.52097 => _178
  # DEBUG __sD.52098 => "PLANAR ADAPTIVE: decreasing in dimension "
  # DEBUG __sD.52099 => "PLANAR ADAPTIVE: decreasing in dimension "
  # .MEM_202 = VDEF <.MEM_201>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_178, "PLANAR ADAPTIVE: decreasing in dimension ", 41);
  # .MEM_103 = VDEF <.MEM_202>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _104 = _ZNSolsEiD.23719 (_178, n_391);
  # DEBUG __outD.52093 => _104
  # DEBUG __sD.52094 => "."
  # DEBUG __sD.52095 => "."
  # .MEM_203 = VDEF <.MEM_103>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_104, ".", 1);
  # DEBUG thisD.52090 => _104
  # DEBUG __pfD.52091 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.23851
  # DEBUG __osD.54869 => _104
  # VUSE <.MEM_203>
  # PT = nonlocal escaped null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _284 = _104->_vptr.basic_ostreamD.23811;
  # VUSE <.MEM_203>
  _285 = MEM[(long intD.12 *)_284 + -24B];
  # RANGE [0, 18446744073709551615]
  _286 = (sizetype) _285;
  # PT = nonlocal escaped 
  _287 = _104 + _286;
  # DEBUG thisD.54872 => _287
  # DEBUG __cD.54873 => 10
  # VUSE <.MEM_203>
  # PT = nonlocal escaped 
  _204 = MEM[(const struct basic_iosD.11171 *)_287]._M_ctypeD.23035;
  # DEBUG __fD.54874 => _204
  if (_204 == 0B)
    goto <bb 34>;
  else
    goto <bb 52>;
;;    succ:       34 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                52 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 52, loop depth 0, count 0, freq 164, maybe hot
;;    prev block 51, next block 53, flags: (NEW, REACHABLE)
;;    pred:       51 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.54876 => _204
  # DEBUG __cD.54875 => 10
  # VUSE <.MEM_203>
  _292 = MEM[(const struct ctypeD.11417 *)_204]._M_widen_okD.19950;
  if (_292 != 0)
    goto <bb 53>;
  else
    goto <bb 54>;
;;    succ:       53 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                54 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 53, loop depth 0, count 0, freq 100, maybe hot
;;    prev block 52, next block 54, flags: (NEW, REACHABLE)
;;    pred:       52 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_203>
  _295 = MEM[(const struct ctypeD.11417 *)_204]._M_widenD.19951[10];
  pretmp_390 = (intD.9) _295;
  goto <bb 56>;
;;    succ:       56 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 54, loop depth 0, count 0, freq 64, maybe hot
;;    prev block 53, next block 55, flags: (NEW, REACHABLE)
;;    pred:       52 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.54878 => _204
  # DEBUG __cD.54879 => 10
  # .MEM_388 = VDEF <.MEM_203>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.20058 (_204);
  # VUSE <.MEM_388>
  # PT = nonlocal escaped 
  _300 = MEM[(const struct ctypeD.11417 *)_204].D.20091._vptr.facetD.16709;
  # VUSE <.MEM_388>
  # PT = nonlocal escaped 
  _301 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_300 + 48B];
  # PT = anything 
  PROF_305 = [obj_type_ref] OBJ_TYPE_REF(_301;(const struct ctypeD.11417)_204->6);
  if (PROF_305 == _ZNKSt5ctypeIcE8do_widenEcD.20039)
    goto <bb 56>;
  else
    goto <bb 55>;
;;    succ:       56 [80.7%]  (TRUE_VALUE,EXECUTABLE)
;;                55 [19.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 55, loop depth 0, count 0, freq 12, maybe hot
;;    prev block 54, next block 56, flags: (NEW, REACHABLE)
;;    pred:       54 [19.3%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_389 = VDEF <.MEM_388>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _307 = OBJ_TYPE_REF(_301;(const struct ctypeD.11417)_204->6) (_204, 10);
  pretmp_308 = (intD.9) _307;
;;    succ:       56 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 56, loop depth 0, count 0, freq 164, maybe hot
;;    prev block 55, next block 57, flags: (NEW, REACHABLE)
;;    pred:       53 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                54 [80.7%]  (TRUE_VALUE,EXECUTABLE)
;;                55 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_339 = PHI <.MEM_203(53), .MEM_388(54), .MEM_389(55)>
  # RANGE [-128, 127]
  # prephitmp_319 = PHI <pretmp_390(53), 10(54), pretmp_308(55)>
  # .MEM_393 = VDEF <.MEM_339>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _290 = _ZNSo3putEcD.23746 (_104, prephitmp_319);
  # DEBUG __osD.54870 => _290
  # .MEM_394 = VDEF <.MEM_393>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZNSo5flushEvD.23757 (_290);
  goto <bb 102>;
;;    succ:       102 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 57, loop depth 0, count 0, freq 3898, maybe hot
;;    prev block 56, next block 58, flags: (NEW, REACHABLE)
;;    pred:       103 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                102 [100.0%]  (FALLTHRU,EXECUTABLE)
  # vcBegin_2 = PHI <vcBegin_1(103), vcBegin_111(102)>
  # RANGE [0, 1]
  # fault_411 = PHI <fault_381(103), fault_250(102)>
  # .MEM_276 = PHI <.MEM_242(103), .MEM_343(102)>
  # n_288 = PHI <n_283(103), n_373(102)>
  # gK.69_329 = PHI <gK.69_241(103), gK.69_364(102)>
  # cur_392 = PHI <cur_395(103), cur_245(102)>
  # dest_386 = PHI <dest_280(103), dest_247(102)>
  # DEBUG vcBeginD.45628 => vcBegin_2
  _112 = vcBegin_2 + vc_mult_46;
  vcEnd_113 = _112 + -1;
  # DEBUG vcEndD.45629 => vcEnd_113
  _114 = cur_392 % gK.69_329;
  _115 = dest_386 % gK.69_329;
  if (_114 < _115)
    goto <bb 58>;
  else
    goto <bb 59>;
;;    succ:       58 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                59 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 58, loop depth 0, count 0, freq 1949, maybe hot
;;    prev block 57, next block 59, flags: (NEW, REACHABLE)
;;    pred:       57 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  d1_min_c_116 = n_288 * 2;
  # DEBUG d1_min_cD.45638 => d1_min_c_116
  goto <bb 61>;
;;    succ:       61 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 59, loop depth 0, count 0, freq 1949, maybe hot
;;    prev block 58, next block 60, flags: (NEW, REACHABLE)
;;    pred:       57 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_114 != _115)
    goto <bb 60>;
  else
    goto <bb 107>;
;;    succ:       60 [72.0%]  (TRUE_VALUE,EXECUTABLE)
;;                107 [28.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 60, loop depth 0, count 0, freq 1403, maybe hot
;;    prev block 59, next block 61, flags: (NEW, REACHABLE)
;;    pred:       59 [72.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _117 = n_288 * 2;
  # RANGE [-2147483647, 2147483647]
  d1_min_c_118 = _117 + 1;
  # DEBUG d1_min_cD.45638 => d1_min_c_118
;;    succ:       61 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 61, loop depth 0, count 0, freq 3352, maybe hot
;;    prev block 60, next block 62, flags: (NEW, REACHABLE)
;;    pred:       58 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                60 [100.0%]  (FALLTHRU,EXECUTABLE)
  # d1_min_c_9 = PHI <d1_min_c_116(58), d1_min_c_118(60)>
  # DEBUG d1_min_cD.45638 => d1_min_c_9
  if (d1_min_c_9 == in_channel_51(D))
    goto <bb 62>;
  else
    goto <bb 71>;
;;    succ:       62 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                71 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 62, loop depth 0, count 0, freq 1092, maybe hot
;;    prev block 61, next block 63, flags: (NEW, REACHABLE)
;;    pred:       61 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                107 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # d1_min_c_374 = PHI <d1_min_c_9(61), -1(107)>
  if (fault_411 != 0)
    goto <bb 63>;
  else
    goto <bb 64>;
;;    succ:       63 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                64 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 63, loop depth 0, count 0, freq 546, maybe hot
;;    prev block 62, next block 64, flags: (NEW, REACHABLE)
;;    pred:       62 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  d1_min_c_119 = d1_min_c_374 ^ 1;
  # DEBUG d1_min_cD.45638 => d1_min_c_119
;;    succ:       64 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 64, loop depth 0, count 0, freq 1092, maybe hot
;;    prev block 63, next block 65, flags: (NEW, REACHABLE)
;;    pred:       63 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                62 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # d1_min_c_10 = PHI <d1_min_c_119(63), -1(62)>
  # DEBUG d1_min_cD.45638 => d1_min_c_10
  # VUSE <.MEM_276>
  _120 = f_24(D)->watchD.29345;
  if (_120 != 0)
    goto <bb 65>;
  else
    goto <bb 71>;
;;    succ:       65 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                71 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 65, loop depth 0, count 0, freq 317, maybe hot
;;    prev block 64, next block 66, flags: (NEW, REACHABLE)
;;    pred:       64 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#73ptD.0 => &r_40(D)->D.42039.D.32226
  # DEBUG thisD.52136 => D#73ptD.0
  # .MEM_121 = VDEF <.MEM_276>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _122 = _Z10GetSimTimevD.33721 ();
  # VUSE <.MEM_121>
  # PT = nonlocal escaped 
  gWatchOut.71_123 = gWatchOutD.33731;
  # .MEM_124 = VDEF <.MEM_121>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _125 = _ZNSolsEiD.23719 (gWatchOut.71_123, _122);
  # DEBUG __outD.52132 => _125
  # DEBUG __sD.52133 => " | "
  # DEBUG __sD.52134 => " | "
  # .MEM_205 = VDEF <.MEM_124>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_125, " | ", 3);
  # DEBUG __osD.52129 => _125
  # DEBUG __strD.52130 => NULL
  # VUSE <.MEM_205>
  _126 = MEM[(long unsigned intD.14 *)r_40(D) + 48B];
  # DEBUG thisD.50724 => D#1ptD.0
  _179 = (long intD.12) _126;
  # DEBUG thisD.50721 => NULL
  # VUSE <.MEM_205>
  # PT = nonlocal escaped 
  _180 = MEM[(charD.10 * *)r_40(D) + 40B];
  # DEBUG thisD.50676 => D#3ptD.0
  # .MEM_206 = VDEF <.MEM_205>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _181 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_125, _180, _179);
  # DEBUG __outD.52125 => _181
  # DEBUG __sD.52126 => " | "
  # DEBUG __sD.52127 => " | "
  # .MEM_207 = VDEF <.MEM_206>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_181, " | ", 3);
  # DEBUG __outD.52121 => _181
  # DEBUG __sD.52122 => "PLANAR ADAPTIVE: avoiding 180 in dimension "
  # DEBUG __sD.52123 => "PLANAR ADAPTIVE: avoiding 180 in dimension "
  # .MEM_208 = VDEF <.MEM_207>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_181, "PLANAR ADAPTIVE: avoiding 180 in dimension ", 43);
  # .MEM_127 = VDEF <.MEM_208>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _128 = _ZNSolsEiD.23719 (_181, n_288);
  # DEBUG __outD.52117 => _128
  # DEBUG __sD.52118 => "."
  # DEBUG __sD.52119 => "."
  # .MEM_209 = VDEF <.MEM_127>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_128, ".", 1);
  # DEBUG thisD.52114 => _128
  # DEBUG __pfD.52115 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.23851
  # DEBUG __osD.54884 => _128
  # VUSE <.MEM_209>
  # PT = nonlocal escaped null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _310 = _128->_vptr.basic_ostreamD.23811;
  # VUSE <.MEM_209>
  _311 = MEM[(long intD.12 *)_310 + -24B];
  # RANGE [0, 18446744073709551615]
  _312 = (sizetype) _311;
  # PT = nonlocal escaped 
  _313 = _128 + _312;
  # DEBUG thisD.54887 => _313
  # DEBUG __cD.54888 => 10
  # VUSE <.MEM_209>
  # PT = nonlocal escaped 
  _210 = MEM[(const struct basic_iosD.11171 *)_313]._M_ctypeD.23035;
  # DEBUG __fD.54889 => _210
  if (_210 == 0B)
    goto <bb 34>;
  else
    goto <bb 66>;
;;    succ:       34 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                66 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 66, loop depth 0, count 0, freq 316, maybe hot
;;    prev block 65, next block 67, flags: (NEW, REACHABLE)
;;    pred:       65 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.54891 => _210
  # DEBUG __cD.54890 => 10
  # VUSE <.MEM_209>
  _318 = MEM[(const struct ctypeD.11417 *)_210]._M_widen_okD.19950;
  if (_318 != 0)
    goto <bb 67>;
  else
    goto <bb 68>;
;;    succ:       67 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                68 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 67, loop depth 0, count 0, freq 193, maybe hot
;;    prev block 66, next block 68, flags: (NEW, REACHABLE)
;;    pred:       66 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_209>
  _321 = MEM[(const struct ctypeD.11417 *)_210]._M_widenD.19951[10];
  pretmp_294 = (intD.9) _321;
  goto <bb 70>;
;;    succ:       70 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 68, loop depth 0, count 0, freq 123, maybe hot
;;    prev block 67, next block 69, flags: (NEW, REACHABLE)
;;    pred:       66 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.54893 => _210
  # DEBUG __cD.54894 => 10
  # .MEM_397 = VDEF <.MEM_209>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.20058 (_210);
  # VUSE <.MEM_397>
  # PT = nonlocal escaped 
  _326 = MEM[(const struct ctypeD.11417 *)_210].D.20091._vptr.facetD.16709;
  # VUSE <.MEM_397>
  # PT = nonlocal escaped 
  _327 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_326 + 48B];
  # PT = anything 
  PROF_331 = [obj_type_ref] OBJ_TYPE_REF(_327;(const struct ctypeD.11417)_210->6);
  if (PROF_331 == _ZNKSt5ctypeIcE8do_widenEcD.20039)
    goto <bb 70>;
  else
    goto <bb 69>;
;;    succ:       70 [80.5%]  (TRUE_VALUE,EXECUTABLE)
;;                69 [19.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 69, loop depth 0, count 0, freq 24, maybe hot
;;    prev block 68, next block 70, flags: (NEW, REACHABLE)
;;    pred:       68 [19.5%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_398 = VDEF <.MEM_397>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _333 = OBJ_TYPE_REF(_327;(const struct ctypeD.11417)_210->6) (_210, 10);
  pretmp_296 = (intD.9) _333;
;;    succ:       70 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 70, loop depth 0, count 0, freq 316, maybe hot
;;    prev block 69, next block 71, flags: (NEW, REACHABLE)
;;    pred:       67 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                68 [80.5%]  (TRUE_VALUE,EXECUTABLE)
;;                69 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_304 = PHI <.MEM_209(67), .MEM_397(68), .MEM_398(69)>
  # RANGE [-128, 127]
  # prephitmp_299 = PHI <pretmp_294(67), 10(68), pretmp_296(69)>
  # .MEM_402 = VDEF <.MEM_304>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _316 = _ZNSo3putEcD.23746 (_128, prephitmp_299);
  # DEBUG __osD.54885 => _316
  # .MEM_403 = VDEF <.MEM_402>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZNSo5flushEvD.23757 (_316);
;;    succ:       71 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 71, loop depth 0, count 0, freq 3505, maybe hot
;;    prev block 70, next block 72, flags: (NEW, REACHABLE)
;;    pred:       61 [72.0%]  (FALSE_VALUE,EXECUTABLE)
;;                70 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                64 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  # d1_min_c_11 = PHI <d1_min_c_9(61), d1_min_c_10(70), d1_min_c_10(64)>
  # .MEM_17 = PHI <.MEM_276(61), .MEM_403(70), .MEM_276(64)>
  # DEBUG d1_min_cD.45638 => d1_min_c_11
  if (d1_min_c_11 != -1)
    goto <bb 72>;
  else
    goto <bb 80>;
;;    succ:       72 [57.0%]  (TRUE_VALUE,EXECUTABLE)
;;                80 [43.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 72, loop depth 0, count 0, freq 1997, maybe hot
;;    prev block 71, next block 73, flags: (NEW, REACHABLE)
;;    pred:       71 [57.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_155 = VDEF <.MEM_17>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _156 = _ZNK6Router14IsFaultyOutputEiD.41991 (r_40(D), d1_min_c_11);
  if (_156 != 0)
    goto <bb 74>;
  else
    goto <bb 73>;
;;    succ:       73 [20.7%]  (FALSE_VALUE,EXECUTABLE)
;;                74 [79.3%]  (TRUE_VALUE,EXECUTABLE)

;;   basic block 73, loop depth 0, count 0, freq 414, maybe hot
;;    prev block 72, next block 74, flags: (NEW, REACHABLE)
;;    pred:       72 [20.7%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_165 = VDEF <.MEM_155>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_37(D), d1_min_c_11, vcBegin_2, vcEnd_113, 0);
  goto <bb 94>;
;;    succ:       94 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 74, loop depth 0, count 0, freq 1584, maybe hot
;;    prev block 73, next block 75, flags: (NEW, REACHABLE)
;;    pred:       72 [79.3%]  (TRUE_VALUE,EXECUTABLE)
  if (fault_411 != 0)
    goto <bb 76>;
  else
    goto <bb 75>;
;;    succ:       76 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                75 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 75, loop depth 0, count 0, freq 1708, maybe hot
;;    prev block 74, next block 76, flags: (NEW)
;;    pred:       74 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                80 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_360 = PHI <.MEM_155(74), .MEM_363(80)>
  goto <bb 94>;
;;    succ:       94 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 76, loop depth 0, count 0, freq 617, maybe hot
;;    prev block 75, next block 77, flags: (NEW, REACHABLE)
;;    pred:       74 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#30ptD.0 => &D.45640
  # DEBUG thisD.52138 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45640
  # DEBUG thisD.54899 => &D.45641
  # DEBUG __sD.54900 => "There seem to be faults in d_i and d_{i+1}"
  # DEBUG __aD.54901 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.54911 => &D.45641
  # DEBUG D#66ptD.0 => &D.45641._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.54914 => D#66ptD.0
  # DEBUG __datD.54913 => &D.45641.D.14356._M_local_bufD.14358
  # DEBUG __aD.54912 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_416 = VDEF <.MEM_155>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45641]._M_pD.14342 = &D.45641.D.14356._M_local_bufD.14358;
  # DEBUG __sD.54910 => "There seem to be faults in d_i and d_{i+1}"
  # DEBUG thisD.54904 => &D.45641
  # DEBUG __begD.54903 => "There seem to be faults in d_i and d_{i+1}"
  # DEBUG __endD.54902 => &MEM[(voidD.45 *)"There seem to be faults in d_i and d_{i+1}" + 42B]
  # DEBUG thisD.54908 => &D.45641
  # DEBUG __begD.54907 => "There seem to be faults in d_i and d_{i+1}"
  # DEBUG __endD.54906 => &MEM[(voidD.45 *)"There seem to be faults in d_i and d_{i+1}" + 42B]
  # DEBUG thisD.54915 => &D.45641
  # DEBUG __begD.54916 => "There seem to be faults in d_i and d_{i+1}"
  # DEBUG __endD.54917 => &MEM[(voidD.45 *)"There seem to be faults in d_i and d_{i+1}" + 42B]
  # DEBUG __ptrD.52815 => "There seem to be faults in d_i and d_{i+1}"
  # DEBUG __firstD.54941 => "There seem to be faults in d_i and d_{i+1}"
  # DEBUG __lastD.54940 => &MEM[(voidD.45 *)"There seem to be faults in d_i and d_{i+1}" + 42B]
  # DEBUG D#109ptD.0 => &__firstD.54941
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.54943 => "There seem to be faults in d_i and d_{i+1}"
  # DEBUG __lastD.54942 => &MEM[(voidD.45 *)"There seem to be faults in d_i and d_{i+1}" + 42B]
  # .MEM_417 = VDEF <.MEM_416>
  __dnewD.54918 = 42;
  # .MEM_418 = VDEF <.MEM_417>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _345 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.45641, &__dnewD.54918, 0);
  # DEBUG D#5ptD.0 => &D.45641
  # DEBUG __pD.54937 => _345
  # DEBUG thisD.54936 => D#5ptD.0
  # .MEM_419 = VDEF <.MEM_418>
  MEM[(charD.10 * *)&D.45641] = _345;
  # VUSE <.MEM_419>
  __dnew.173_346 = __dnewD.54918;
  # DEBUG D#6ptD.0 => &D.45641
  # DEBUG __capacityD.54939 => __dnew.173_346
  # DEBUG thisD.54938 => D#6ptD.0
  # .MEM_420 = VDEF <.MEM_419>
  MEM[(size_typeD.14319 *)&D.45641 + 16B] = __dnew.173_346;
  # DEBUG D#3ptD.0 => &D.45641
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.54921 => _345
  # DEBUG __k1D.54920 => "There seem to be faults in d_i and d_{i+1}"
  # DEBUG __k2D.54919 => &MEM[(voidD.45 *)"There seem to be faults in d_i and d_{i+1}" + 42B]
  # DEBUG __dD.54924 => _345
  # DEBUG __sD.54923 => "There seem to be faults in d_i and d_{i+1}"
  # DEBUG __nD.54922 => 42
  # DEBUG __s1D.54927 => _345
  # DEBUG __s2D.54926 => "There seem to be faults in d_i and d_{i+1}"
  # DEBUG __nD.54925 => 42
  # .MEM_422 = VDEF <.MEM_420>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  memcpyD.992 (_345, "There seem to be faults in d_i and d_{i+1}", 42);
  # VUSE <.MEM_422>
  __dnew.173_349 = __dnewD.54918;
  # DEBUG thisD.54931 => &D.45641
  # DEBUG __nD.54930 => __dnew.173_349
  # DEBUG D#7ptD.0 => &D.45641
  # DEBUG __lengthD.54933 => __dnew.173_349
  # DEBUG thisD.54932 => D#7ptD.0
  # .MEM_423 = VDEF <.MEM_422>
  MEM[(size_typeD.14319 *)&D.45641 + 8B] = __dnew.173_349;
  # VUSE <.MEM_423>
  # PT = nonlocal escaped null { D.45641 } (escaped)
  _350 = MEM[(charD.10 * *)&D.45641];
  # DEBUG D#3ptD.0 => &D.45641
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.45641 } (escaped)
  _351 = _350 + __dnew.173_349;
  # DEBUG __c1D.54935 => _351
  # DEBUG __c2D.54934 => D#11ptD.0
  # .MEM_424 = VDEF <.MEM_423>
  MEM[(char_typeD.10931 &)_351] = 0;
  # .MEM_425 = VDEF <.MEM_424>
  __dnewD.54918 ={v} {CLOBBER};
  # PT = nonlocal 
  _158 = &r_40(D)->D.42039.D.32226;
  [LP 2] # .MEM_159 = VDEF <.MEM_425>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZNK6Module5ErrorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.32151 (_158, &D.45641);
;;    succ:       95 (EH,EXECUTABLE)
;;                77 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 77, loop depth 0, count 0, freq 617, maybe hot
;;    prev block 76, next block 78, flags: (NEW, REACHABLE)
;;    pred:       76 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.52141 => &D.45641
  # DEBUG thisD.52142 => &D.45641
  # DEBUG thisD.52151 => &D.45641
  # VUSE <.MEM_159>
  # PT = nonlocal escaped null { D.45641 } (escaped)
  _162 = MEM[(charD.10 * *)&D.45641];
  # DEBUG D#3ptD.0 => &D.45641
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.52152 => &D.45641
  if (&D.45641.D.14356._M_local_bufD.14358 != _162)
    goto <bb 78>;
  else
    goto <bb 79>;
;;    succ:       78 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                79 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 78, loop depth 0, count 0, freq 484, maybe hot
;;    prev block 77, next block 79, flags: (NEW, REACHABLE)
;;    pred:       77 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45641.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.52144 => &D.45641
  # DEBUG __sizeD.52143 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45641
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45641
  # DEBUG D#51ptD.0 => &D.45641._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.52147 => _162
  # DEBUG __aD.52145 => D#49ptD.0
  # DEBUG __nD.52146 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.52150 => _162
  # DEBUG thisD.52148 => D#45ptD.0
  # DEBUG D.52149 => D#46ptD.0
  # .MEM_222 = VDEF <.MEM_159>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZdlPvD.2766 (_162);
;;    succ:       79 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 79, loop depth 0, count 0, freq 617, maybe hot
;;    prev block 78, next block 80, flags: (NEW, REACHABLE)
;;    pred:       77 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                78 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_151 = PHI <.MEM_159(77), .MEM_222(78)>
  # DEBUG D#55ptD.0 => &D.45641._M_dataplusD.14336
  # DEBUG thisD.52153 => D#55ptD.0
  # DEBUG thisD.52154 => D#55ptD.0
  # DEBUG thisD.52155 => D#55ptD.0
  # .MEM_161 = VDEF <.MEM_151>
  D.45641 ={v} {CLOBBER};
  # DEBUG thisD.52139 => &D.45640
  # DEBUG thisD.52140 => &D.45640
  goto <bb 94>;
;;    succ:       94 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 80, loop depth 0, count 0, freq 1901, maybe hot
;;    prev block 79, next block 81, flags: (NEW, REACHABLE)
;;    pred:       71 [43.0%]  (FALSE_VALUE,EXECUTABLE)
;;                107 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_363 = PHI <.MEM_17(71), .MEM_276(107)>
  # DEBUG d1_min_cD.45638 => -1
  if (fault_411 != 0)
    goto <bb 81>;
  else
    goto <bb 75>;
;;    succ:       81 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                75 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 81, loop depth 0, count 0, freq 1160, maybe hot
;;    prev block 80, next block 82, flags: (NEW, REACHABLE)
;;    pred:       80 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_363>
  gK.69_129 = gKD.33726;
  _130 = cur_392 % gK.69_129;
  if (_130 == 0)
    goto <bb 82>;
  else
    goto <bb 83>;
;;    succ:       82 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                83 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 82, loop depth 0, count 0, freq 580, maybe hot
;;    prev block 81, next block 83, flags: (NEW, REACHABLE)
;;    pred:       81 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  d1_min_c_131 = n_288 * 2;
  # DEBUG d1_min_cD.45638 => d1_min_c_131
  # DEBUG atedgeD.45642 => 1
  goto <bb 87>;
;;    succ:       87 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 83, loop depth 0, count 0, freq 580, maybe hot
;;    prev block 82, next block 84, flags: (NEW, REACHABLE)
;;    pred:       81 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  _132 = gK.69_129 + -1;
  if (_130 == _132)
    goto <bb 84>;
  else
    goto <bb 85>;
;;    succ:       84 [48.8%]  (TRUE_VALUE,EXECUTABLE)
;;                85 [51.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 84, loop depth 0, count 0, freq 283, maybe hot
;;    prev block 83, next block 85, flags: (NEW, REACHABLE)
;;    pred:       83 [48.8%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _133 = n_288 * 2;
  # RANGE [-2147483647, 2147483647]
  d1_min_c_134 = _133 + 1;
  # DEBUG d1_min_cD.45638 => d1_min_c_134
  # DEBUG atedgeD.45642 => 1
  goto <bb 87>;
;;    succ:       87 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 85, loop depth 0, count 0, freq 297, maybe hot
;;    prev block 84, next block 86, flags: (NEW, REACHABLE)
;;    pred:       83 [51.2%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _135 = n_288 * 2;
  # DEBUG maxD.52156 => 1
  # .MEM_211 = VDEF <.MEM_363>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _160 = _Z8ran_nextvD.43987 ();
  # RANGE [-1, 1]
  _182 = _160 % 2;
  # RANGE [-1, 1]
  _183 = (intD.9) _182;
  d1_min_c_136 = _135 + _183;
  # DEBUG d1_min_cD.45638 => d1_min_c_136
  if (in_channel_51(D) == d1_min_c_136)
    goto <bb 86>;
  else
    goto <bb 104>;
;;    succ:       86 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                104 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 86, loop depth 0, count 0, freq 83, maybe hot
;;    prev block 85, next block 87, flags: (NEW, REACHABLE)
;;    pred:       85 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  d1_min_c_137 = in_channel_51(D) ^ 1;
  # DEBUG d1_min_cD.45638 => d1_min_c_137
  goto <bb 104>;
;;    succ:       104 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 87, loop depth 0, count 0, freq 863, maybe hot
;;    prev block 86, next block 88, flags: (NEW, REACHABLE)
;;    pred:       82 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                84 [100.0%]  (FALLTHRU,EXECUTABLE)
  # d1_min_c_12 = PHI <d1_min_c_131(82), d1_min_c_134(84)>
  # DEBUG atedgeD.45642 => 1
  # DEBUG d1_min_cD.45638 => d1_min_c_12
  # .MEM_138 = VDEF <.MEM_363>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _139 = _ZNK6Router14IsFaultyOutputEiD.41991 (r_40(D), d1_min_c_12);
  if (_139 != 0)
    goto <bb 106>;
  else
    goto <bb 88>;
;;    succ:       88 [20.7%]  (FALSE_VALUE,EXECUTABLE)
;;                106 [79.3%]  (TRUE_VALUE,EXECUTABLE)

;;   basic block 88, loop depth 0, count 0, freq 240, maybe hot
;;    prev block 87, next block 89, flags: (NEW, REACHABLE)
;;    pred:       87 [20.7%]  (FALSE_VALUE,EXECUTABLE)
;;                104 [20.7%]  (FALSE_VALUE,EXECUTABLE)
  # d1_min_c_404 = PHI <d1_min_c_12(87), d1_min_c_421(104)>
  # .MEM_330 = PHI <.MEM_138(87), .MEM_268(104)>
  # .MEM_154 = VDEF <.MEM_330>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_37(D), d1_min_c_404, vcBegin_2, vcEnd_113, 0);
  goto <bb 94>;
;;    succ:       94 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 89, loop depth 0, count 0, freq 267, maybe hot
;;    prev block 88, next block 90, flags: (NEW, REACHABLE)
;;    pred:       104 [79.3%]  (TRUE_VALUE,EXECUTABLE)
  _140 = d1_min_c_421 ^ 1;
  # .MEM_141 = VDEF <.MEM_268>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _142 = _ZNK6Router14IsFaultyOutputEiD.41991 (r_40(D), _140);
  if (_142 != 0)
    goto <bb 106>;
  else
    goto <bb 105>;
;;    succ:       105 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                106 [50.0%]  (TRUE_VALUE,EXECUTABLE)

;;   basic block 90, loop depth 0, count 0, freq 561, maybe hot
;;   Invalid sum of incoming frequencies 818, should be 561
;;    prev block 89, next block 91, flags: (NEW, REACHABLE)
;;    pred:       106 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.52161 => &D.45645
  # DEBUG thisD.52162 => &D.45645
  # DEBUG thisD.52171 => &D.45645
  # VUSE <.MEM_145>
  # PT = nonlocal escaped null { D.45645 } (escaped)
  _148 = MEM[(charD.10 * *)&D.45645];
  # DEBUG D#3ptD.0 => &D.45645
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.52172 => &D.45645
  if (&D.45645.D.14356._M_local_bufD.14358 != _148)
    goto <bb 91>;
  else
    goto <bb 92>;
;;    succ:       91 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                92 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 91, loop depth 0, count 0, freq 439, maybe hot
;;    prev block 90, next block 92, flags: (NEW, REACHABLE)
;;    pred:       90 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45645.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.52164 => &D.45645
  # DEBUG __sizeD.52163 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45645
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45645
  # DEBUG D#51ptD.0 => &D.45645._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.52167 => _148
  # DEBUG __aD.52165 => D#49ptD.0
  # DEBUG __nD.52166 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.52170 => _148
  # DEBUG thisD.52168 => D#45ptD.0
  # DEBUG D.52169 => D#46ptD.0
  # .MEM_212 = VDEF <.MEM_145>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZdlPvD.2766 (_148);
;;    succ:       92 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 92, loop depth 0, count 0, freq 561, maybe hot
;;    prev block 91, next block 93, flags: (NEW, REACHABLE)
;;    pred:       90 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                91 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_149 = PHI <.MEM_145(90), .MEM_212(91)>
  # DEBUG D#55ptD.0 => &D.45645._M_dataplusD.14336
  # DEBUG thisD.52173 => D#55ptD.0
  # DEBUG thisD.52174 => D#55ptD.0
  # DEBUG thisD.52175 => D#55ptD.0
  # .MEM_147 = VDEF <.MEM_149>
  D.45645 ={v} {CLOBBER};
  # DEBUG thisD.52159 => &D.45644
  # DEBUG thisD.52160 => &D.45644
  goto <bb 94>;
;;    succ:       94 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 93, loop depth 0, count 0, freq 620, maybe hot
;;    prev block 92, next block 94, flags: (NEW, REACHABLE)
;;    pred:       16 [13.7%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_38>
  gN.68_167 = gND.33727;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _168 = gN.68_167 * 2;
  # .MEM_169 = VDEF <.MEM_38>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_37(D), _168, vcBegin_1, vcEnd_3, 0);
;;    succ:       94 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 94, loop depth 0, count 0, freq 5699, maybe hot
;;    prev block 93, next block 95, flags: (NEW, REACHABLE)
;;    pred:       15 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                105 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                93 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                75 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                92 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                88 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                79 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                73 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_20 = PHI <.MEM_39(15), .MEM_153(105), .MEM_169(93), .MEM_360(75), .MEM_147(92), .MEM_154(88), .MEM_161(79), .MEM_165(73)>
  # VUSE <.MEM_20>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 95, loop depth 0, count 0, freq 0
;;    prev block 94, next block 96, flags: (NEW, REACHABLE)
;;    pred:       76 (EH,EXECUTABLE)
<L100>: [LP 2]
  # DEBUG thisD.52176 => &D.45641
  # DEBUG thisD.52177 => &D.45641
  # DEBUG thisD.52186 => &D.45641
  # VUSE <.MEM_159>
  # PT = nonlocal escaped null { D.45641 } (escaped)
  _146 = MEM[(charD.10 * *)&D.45641];
  # DEBUG D#3ptD.0 => &D.45641
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.52187 => &D.45641
  if (&D.45641.D.14356._M_local_bufD.14358 != _146)
    goto <bb 96>;
  else
    goto <bb 97>;
;;    succ:       96 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                97 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 96, loop depth 0, count 0, freq 0
;;    prev block 95, next block 97, flags: (NEW, REACHABLE)
;;    pred:       95 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45641.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.52179 => &D.45641
  # DEBUG __sizeD.52178 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45641
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45641
  # DEBUG D#51ptD.0 => &D.45641._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.52182 => _146
  # DEBUG __aD.52180 => D#49ptD.0
  # DEBUG __nD.52181 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.52185 => _146
  # DEBUG thisD.52183 => D#45ptD.0
  # DEBUG D.52184 => D#46ptD.0
  # .MEM_227 = VDEF <.MEM_159>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZdlPvD.2766 (_146);
;;    succ:       97 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 97, loop depth 0, count 0, freq 0
;;    prev block 96, next block 98, flags: (NEW, REACHABLE)
;;    pred:       95 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                96 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_184 = PHI <.MEM_159(95), .MEM_227(96)>
  # DEBUG D#55ptD.0 => &D.45641._M_dataplusD.14336
  # DEBUG thisD.52188 => D#55ptD.0
  # DEBUG thisD.52189 => D#55ptD.0
  # DEBUG thisD.52190 => D#55ptD.0
  # .MEM_163 = VDEF <.MEM_184>
  D.45641 ={v} {CLOBBER};
  resx 2
;;    succ:      

;;   basic block 98, loop depth 0, count 0, freq 0
;;    prev block 97, next block 99, flags: (NEW, REACHABLE)
;;    pred:       106 (EH,EXECUTABLE)
<L102>: [LP 4]
  # DEBUG thisD.52193 => &D.45645
  # DEBUG thisD.52194 => &D.45645
  # DEBUG thisD.52203 => &D.45645
  # VUSE <.MEM_145>
  # PT = nonlocal escaped null { D.45645 } (escaped)
  _164 = MEM[(charD.10 * *)&D.45645];
  # DEBUG D#3ptD.0 => &D.45645
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.52204 => &D.45645
  if (&D.45645.D.14356._M_local_bufD.14358 != _164)
    goto <bb 99>;
  else
    goto <bb 100>;
;;    succ:       99 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                100 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 99, loop depth 0, count 0, freq 0
;;    prev block 98, next block 100, flags: (NEW, REACHABLE)
;;    pred:       98 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45645.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.52196 => &D.45645
  # DEBUG __sizeD.52195 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45645
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45645
  # DEBUG D#51ptD.0 => &D.45645._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.52199 => _164
  # DEBUG __aD.52197 => D#49ptD.0
  # DEBUG __nD.52198 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.52202 => _164
  # DEBUG thisD.52200 => D#45ptD.0
  # DEBUG D.52201 => D#46ptD.0
  # .MEM_217 = VDEF <.MEM_145>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZdlPvD.2766 (_164);
;;    succ:       100 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 100, loop depth 0, count 0, freq 0
;;    prev block 99, next block 101, flags: (NEW, REACHABLE)
;;    pred:       98 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                99 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_185 = PHI <.MEM_145(98), .MEM_217(99)>
  # DEBUG D#55ptD.0 => &D.45645._M_dataplusD.14336
  # DEBUG thisD.52205 => D#55ptD.0
  # DEBUG thisD.52206 => D#55ptD.0
  # DEBUG thisD.52207 => D#55ptD.0
  # .MEM_150 = VDEF <.MEM_185>
  D.45645 ={v} {CLOBBER};
  resx 6
;;    succ:      

;;   basic block 101, loop depth 0, count 0, freq 4275, maybe hot
;;    prev block 100, next block 102, flags: (NEW, REACHABLE)
;;    pred:       12 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_273 = VDEF <.MEM_21(D)>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_37(D));
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 102, loop depth 0, count 0, freq 1949, maybe hot
;;    prev block 101, next block 103, flags: (NEW, REACHABLE)
;;    pred:       50 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                49 [71.0%]  (TRUE_VALUE,EXECUTABLE)
;;                56 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 1]
  # fault_250 = PHI <0(50), 1(49), 0(56)>
  # .MEM_343 = PHI <.MEM_95(50), .MEM_91(49), .MEM_394(56)>
  # DEBUG faultD.45637 => fault_250
  # DEBUG increaseD.45636 => 0
  _344 = n_391 + 1;
  # VUSE <.MEM_343>
  gN.68_252 = gND.33727;
  n_373 = _344 % gN.68_252;
  # DEBUG nD.45635 => n_373
  # VUSE <.MEM_343>
  gK.69_364 = gKD.33726;
  cur_245 = cur_297 / gK.69_364;
  # DEBUG curD.45631 => cur_245
  dest_247 = dest_291 / gK.69_364;
  # DEBUG destD.45632 => dest_247
  # DEBUG faultD.45637 => fault_250
  # DEBUG increaseD.45636 => 0
  # DEBUG nD.45635 => n_373
  # DEBUG curD.45631 => cur_245
  # DEBUG destD.45632 => dest_247
  vcBegin_111 = vcBegin_1 + vc_mult_46;
  # DEBUG vcBeginD.45628 => vcBegin_111
  goto <bb 57>;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 103, loop depth 0, count 0, freq 1949, maybe hot
;;    prev block 102, next block 104, flags: (NEW, REACHABLE)
;;    pred:       42 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                48 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [71.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1]
  # fault_381 = PHI <0(42), 0(48), 1(41)>
  # .MEM_242 = PHI <.MEM_79(42), .MEM_385(48), .MEM_75(41)>
  # DEBUG faultD.45637 => fault_381
  # DEBUG increaseD.45636 => 1
  _400 = n_391 + 1;
  # VUSE <.MEM_242>
  gN.68_377 = gND.33727;
  n_283 = _400 % gN.68_377;
  # DEBUG nD.45635 => n_283
  # VUSE <.MEM_242>
  gK.69_241 = gKD.33726;
  cur_395 = cur_297 / gK.69_241;
  # DEBUG curD.45631 => cur_395
  dest_280 = dest_291 / gK.69_241;
  # DEBUG destD.45632 => dest_280
  goto <bb 57>;
;;    succ:       57 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 104, loop depth 0, count 0, freq 297, maybe hot
;;    prev block 103, next block 105, flags: (NEW, REACHABLE)
;;    pred:       85 [72.0%]  (FALSE_VALUE,EXECUTABLE)
;;                86 [100.0%]  (FALLTHRU,EXECUTABLE)
  # d1_min_c_421 = PHI <d1_min_c_136(85), d1_min_c_137(86)>
  # DEBUG atedgeD.45642 => 0
  # DEBUG d1_min_cD.45638 => d1_min_c_421
  # .MEM_268 = VDEF <.MEM_211>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _314 = _ZNK6Router14IsFaultyOutputEiD.41991 (r_40(D), d1_min_c_421);
  if (_314 != 0)
    goto <bb 89>;
  else
    goto <bb 88>;
;;    succ:       88 [20.7%]  (FALSE_VALUE,EXECUTABLE)
;;                89 [79.3%]  (TRUE_VALUE,EXECUTABLE)

;;   basic block 105, loop depth 0, count 0, freq 359, maybe hot
;;   Invalid sum of incoming frequencies 134, should be 359
;;    prev block 104, next block 106, flags: (NEW, REACHABLE)
;;    pred:       89 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_153 = VDEF <.MEM_141>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_37(D), _140, vcBegin_2, vcEnd_113, 0);
  goto <bb 94>;
;;    succ:       94 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 106, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 105, next block 107, flags: (NEW, REACHABLE)
;;    pred:       87 [79.3%]  (TRUE_VALUE,EXECUTABLE)
;;                89 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_358 = PHI <.MEM_138(87), .MEM_141(89)>
  # DEBUG D#30ptD.0 => &D.45644
  # DEBUG thisD.52158 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45644
  # DEBUG thisD.54944 => &D.45645
  # DEBUG __sD.54945 => "There seem to be faults in d_i and d_{i+1}"
  # DEBUG __aD.54946 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.54956 => &D.45645
  # DEBUG D#66ptD.0 => &D.45645._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.54959 => D#66ptD.0
  # DEBUG __datD.54958 => &D.45645.D.14356._M_local_bufD.14358
  # DEBUG __aD.54957 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_406 = VDEF <.MEM_358>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45645]._M_pD.14342 = &D.45645.D.14356._M_local_bufD.14358;
  # DEBUG __sD.54955 => "There seem to be faults in d_i and d_{i+1}"
  # DEBUG thisD.54949 => &D.45645
  # DEBUG __begD.54948 => "There seem to be faults in d_i and d_{i+1}"
  # DEBUG __endD.54947 => &MEM[(voidD.45 *)"There seem to be faults in d_i and d_{i+1}" + 42B]
  # DEBUG thisD.54953 => &D.45645
  # DEBUG __begD.54952 => "There seem to be faults in d_i and d_{i+1}"
  # DEBUG __endD.54951 => &MEM[(voidD.45 *)"There seem to be faults in d_i and d_{i+1}" + 42B]
  # DEBUG thisD.54960 => &D.45645
  # DEBUG __begD.54961 => "There seem to be faults in d_i and d_{i+1}"
  # DEBUG __endD.54962 => &MEM[(voidD.45 *)"There seem to be faults in d_i and d_{i+1}" + 42B]
  # DEBUG __ptrD.52815 => "There seem to be faults in d_i and d_{i+1}"
  # DEBUG __firstD.54986 => "There seem to be faults in d_i and d_{i+1}"
  # DEBUG __lastD.54985 => &MEM[(voidD.45 *)"There seem to be faults in d_i and d_{i+1}" + 42B]
  # DEBUG D#109ptD.0 => &__firstD.54986
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.54988 => "There seem to be faults in d_i and d_{i+1}"
  # DEBUG __lastD.54987 => &MEM[(voidD.45 *)"There seem to be faults in d_i and d_{i+1}" + 42B]
  # .MEM_407 = VDEF <.MEM_406>
  __dnewD.54963 = 42;
  # .MEM_408 = VDEF <.MEM_407>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _361 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.45645, &__dnewD.54963, 0);
  # DEBUG D#5ptD.0 => &D.45645
  # DEBUG __pD.54982 => _361
  # DEBUG thisD.54981 => D#5ptD.0
  # .MEM_409 = VDEF <.MEM_408>
  MEM[(charD.10 * *)&D.45645] = _361;
  # VUSE <.MEM_409>
  __dnew.173_362 = __dnewD.54963;
  # DEBUG D#6ptD.0 => &D.45645
  # DEBUG __capacityD.54984 => __dnew.173_362
  # DEBUG thisD.54983 => D#6ptD.0
  # .MEM_410 = VDEF <.MEM_409>
  MEM[(size_typeD.14319 *)&D.45645 + 16B] = __dnew.173_362;
  # DEBUG D#3ptD.0 => &D.45645
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.54966 => _361
  # DEBUG __k1D.54965 => "There seem to be faults in d_i and d_{i+1}"
  # DEBUG __k2D.54964 => &MEM[(voidD.45 *)"There seem to be faults in d_i and d_{i+1}" + 42B]
  # DEBUG __dD.54969 => _361
  # DEBUG __sD.54968 => "There seem to be faults in d_i and d_{i+1}"
  # DEBUG __nD.54967 => 42
  # DEBUG __s1D.54972 => _361
  # DEBUG __s2D.54971 => "There seem to be faults in d_i and d_{i+1}"
  # DEBUG __nD.54970 => 42
  # .MEM_412 = VDEF <.MEM_410>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  memcpyD.992 (_361, "There seem to be faults in d_i and d_{i+1}", 42);
  # VUSE <.MEM_412>
  __dnew.173_365 = __dnewD.54963;
  # DEBUG thisD.54976 => &D.45645
  # DEBUG __nD.54975 => __dnew.173_365
  # DEBUG D#7ptD.0 => &D.45645
  # DEBUG __lengthD.54978 => __dnew.173_365
  # DEBUG thisD.54977 => D#7ptD.0
  # .MEM_413 = VDEF <.MEM_412>
  MEM[(size_typeD.14319 *)&D.45645 + 8B] = __dnew.173_365;
  # VUSE <.MEM_413>
  # PT = nonlocal escaped null { D.45645 } (escaped)
  _366 = MEM[(charD.10 * *)&D.45645];
  # DEBUG D#3ptD.0 => &D.45645
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.45645 } (escaped)
  _367 = _366 + __dnew.173_365;
  # DEBUG __c1D.54980 => _367
  # DEBUG __c2D.54979 => D#11ptD.0
  # .MEM_414 = VDEF <.MEM_413>
  MEM[(char_typeD.10931 &)_367] = 0;
  # .MEM_415 = VDEF <.MEM_414>
  __dnewD.54963 ={v} {CLOBBER};
  # PT = nonlocal 
  _144 = &r_40(D)->D.42039.D.32226;
  [LP 4] # .MEM_145 = VDEF <.MEM_415>
  # USE = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45630 D.45641 D.45645 D.54918 D.54963 } (nonlocal, escaped)
  _ZNK6Module5ErrorERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.32151 (_144, &D.45645);
  goto <bb 90>;
;;    succ:       98 (EH,EXECUTABLE)
;;                90 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 107, loop depth 0, count 0, freq 546, maybe hot
;;    prev block 106, next block 1, flags: (NEW, REACHABLE)
;;    pred:       59 [28.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG d1_min_cD.45638 => -1
  if (in_channel_51(D) == -1)
    goto <bb 62>;
  else
    goto <bb 80>;
;;    succ:       62 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                80 [72.0%]  (FALSE_VALUE,EXECUTABLE)

}



;; Function int dor_next_mesh(int, int, bool) (_Z13dor_next_meshiib, funcdef_no=1971, decl_uid=45450, cgraph_uid=470, symbol_order=481)


Pass statistics:
----------------

int dor_next_mesh(int, int, bool) (intD.9 curD.45481, intD.9 destD.45482, boolD.2757 descendingD.45483)
{
  intD.9 dim_leftD.45486;
  intD.9 pretmp_1;
  intD.9 _10;
  intD.9 gN.20_14;
  intD.9 _15;
  intD.9 gN.20_17;
  intD.9 _20;
  intD.9 _21;
  intD.9 _22;
  intD.9 pretmp_23;
  intD.9 _24;
  intD.9 pretmp_25;
  intD.9 _26;
  intD.9 gNodes.22_27;
  intD.9 _37;
  intD.9 _40;
  intD.9 _41;
  intD.9 _50;
  intD.9 pretmp_52;
  intD.9 pretmp_53;
  intD.9 gK.21_54;
  intD.9 _56;
  intD.9 _57;
  intD.9 _59;
  intD.9 _60;
  intD.9 gN.20_63;
  intD.9 _64;
  intD.9 gK.21_65;
  intD.9 _66;
  intD.9 _67;
  intD.9 _78;
  intD.9 _79;
  intD.9 _80;
  intD.9 _81;
  intD.9 pretmp_82;
  intD.9 pretmp_88;
  intD.9 pretmp_89;
  intD.9 pretmp_90;
  intD.9 pretmp_92;
  intD.9 pretmp_93;
  intD.9 prephitmp_94;
  intD.9 pretmp_98;
  intD.9 prephitmp_99;
  intD.9 pretmp_100;
  intD.9 pretmp_102;
  intD.9 prephitmp_103;
  intD.9 pretmp_104;
  intD.9 pretmp_106;
  intD.9 prephitmp_107;
  intD.9 pretmp_108;
  intD.9 prephitmp_109;
  intD.9 pretmp_110;
  intD.9 prephitmp_111;

;;   basic block 2, loop depth 0, count 0, freq 2197, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  if (cur_11(D) == dest_12(D))
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [19.9%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [80.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 437, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [19.9%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  gN.20_14 = gND.33727;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _15 = gN.20_14 * 2;
  goto <bb 27>;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 1760, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [80.1%]  (FALSE_VALUE,EXECUTABLE)
  if (descending_16(D) != 0)
    goto <bb 7>;
  else
    goto <bb 5>;
;;    succ:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG dim_leftD.45486 => 0
  # DEBUG destD.45482 => dest_12(D)
  # DEBUG curD.45481 => cur_11(D)
  # VUSE <.MEM_13(D)>
  gN.20_63 = gND.33727;
  _64 = gN.20_63 + -1;
  if (_64 <= 0)
    goto <bb 6>;
  else
    goto <bb 17>;
;;    succ:       6 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 40, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  pretmp_90 = gKD.33726;
  pretmp_108 = cur_11(D) % pretmp_90;
  pretmp_110 = dest_12(D) % pretmp_90;
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       4 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  gN.20_17 = gND.33727;
  dim_left_18 = gN.20_17 + -1;
  # DEBUG dim_leftD.45486 => dim_left_18
  # DEBUG dim_leftD.45486 => dim_left_18
  # DEBUG destD.45482 => dest_12(D)
  # DEBUG curD.45481 => cur_11(D)
  if (dim_left_18 <= 0)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 40, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  pretmp_53 = gNodesD.33729;
  # VUSE <.MEM_13(D)>
  pretmp_82 = gKD.33726;
  pretmp_100 = cur_11(D) * pretmp_82;
  pretmp_102 = pretmp_100 / pretmp_53;
  pretmp_104 = dest_12(D) * pretmp_82;
  pretmp_106 = pretmp_104 / pretmp_53;
  goto <bb 16>;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 840, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       7 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  gK.21_54 = gKD.33726;
  _56 = cur_11(D) * gK.21_54;
  # VUSE <.MEM_13(D)>
  gNodes.22_27 = gNodesD.33729;
  _59 = _56 / gNodes.22_27;
  _60 = dest_12(D) * gK.21_54;
  _57 = _60 / gNodes.22_27;
  if (_57 != _59)
    goto <bb 16>;
  else
    goto <bb 13>;
;;    succ:       16 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 8710, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       14 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  _20 = cur_28 * gK.21_54;
  _22 = _20 / gNodes.22_27;
  _24 = dest_29 * gK.21_54;
  _26 = _24 / gNodes.22_27;
  if (_22 != _26)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 392, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # _81 = PHI <_22(10)>
  # _79 = PHI <_26(10)>
  # RANGE [0, 2147483646] NONZERO 2147483647
  # dim_left_38 = PHI <dim_left_30(10)>
  goto <bb 16>;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 8318, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       10 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 802, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       9 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 9120, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # dim_left_74 = PHI <dim_left_18(13), dim_left_30(12)>
  # _78 = PHI <_56(13), _20(12)>
  # _80 = PHI <_60(13), _24(12)>
  # DEBUG dim_leftD.45486 => dim_left_74
  # DEBUG destD.45482 => dest_12(D)
  # DEBUG curD.45481 => cur_11(D)
  cur_28 = _78 % gNodes.22_27;
  # DEBUG curD.45481 => cur_28
  dest_29 = _80 % gNodes.22_27;
  # DEBUG destD.45482 => dest_29
  # RANGE [0, 2147483646] NONZERO 2147483647
  dim_left_30 = dim_left_74 + -1;
  # DEBUG dim_leftD.45486 => dim_left_30
  # DEBUG dim_leftD.45486 => dim_left_30
  # DEBUG destD.45482 => dest_29
  # DEBUG curD.45481 => cur_28
  if (dim_left_30 <= 0)
    goto <bb 15>;
  else
    goto <bb 10>;
;;    succ:       15 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 410, maybe hot
;;    prev block 14, next block 16, flags: (NEW)
;;    pred:       14 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # cur_62 = PHI <cur_28(14)>
  # dest_58 = PHI <dest_29(14)>
  # RANGE [0, 2147483646] NONZERO 2147483647
  # dim_left_39 = PHI <dim_left_30(14)>
  pretmp_1 = cur_62 * gK.21_54;
  pretmp_52 = pretmp_1 / gNodes.22_27;
  pretmp_25 = dest_58 * gK.21_54;
  pretmp_23 = pretmp_25 / gNodes.22_27;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       15 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # dim_left_75 = PHI <dim_left_39(15), dim_left_38(11), dim_left_18(8), dim_left_18(9)>
  # prephitmp_103 = PHI <pretmp_52(15), _81(11), pretmp_102(8), _59(9)>
  # prephitmp_107 = PHI <pretmp_23(15), _79(11), pretmp_106(8), _57(9)>
  # DEBUG D#193ptD.0 => gKD.33726
  # DEBUG D#192ptD.0 => NULL
  # DEBUG D#191ptD.0 => gNodesD.33729
  # DEBUG curD.45481 => D#192ptD.0 / D#191ptD.0
  # DEBUG D#190ptD.0 => NULL
  # DEBUG destD.45482 => D#190ptD.0 / D#191ptD.0
  pretmp_98 = dim_left_75 * 2;
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 840, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       5 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  gK.21_65 = gKD.33726;
  _66 = cur_11(D) % gK.21_65;
  _67 = dest_12(D) % gK.21_65;
  if (_66 != _67)
    goto <bb 24>;
  else
    goto <bb 21>;
;;    succ:       24 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 1, count 0, freq 8710, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       22 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  _40 = cur_42 % gK.21_65;
  _41 = dest_43 % gK.21_65;
  if (_40 != _41)
    goto <bb 20>;
  else
    goto <bb 19>;
;;    succ:       20 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 8318, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       18 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 22>;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 392, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       18 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # _37 = PHI <_40(18)>
  # _21 = PHI <_41(18)>
  # dim_left_4 = PHI <dim_left_44(18)>
  pretmp_93 = dim_left_4 * 2;
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 802, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       17 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 9120, maybe hot
;;    prev block 21, next block 23, flags: (NEW)
;;    pred:       21 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # cur_69 = PHI <cur_11(D)(21), cur_42(19)>
  # dest_72 = PHI <dest_12(D)(21), dest_43(19)>
  # dim_left_76 = PHI <0(21), dim_left_44(19)>
  # DEBUG dim_leftD.45486 => dim_left_76
  # DEBUG destD.45482 => dest_72
  # DEBUG curD.45481 => cur_69
  cur_42 = cur_69 / gK.21_65;
  # DEBUG curD.45481 => cur_42
  dest_43 = dest_72 / gK.21_65;
  # DEBUG destD.45482 => dest_43
  dim_left_44 = dim_left_76 + 1;
  # DEBUG dim_leftD.45486 => dim_left_44
  # DEBUG dim_leftD.45486 => dim_left_44
  # DEBUG destD.45482 => dest_43
  # DEBUG curD.45481 => cur_42
  if (dim_left_44 >= _64)
    goto <bb 23>;
  else
    goto <bb 18>;
;;    succ:       23 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 410, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # cur_8 = PHI <cur_42(22)>
  # dest_5 = PHI <dest_43(22)>
  # dim_left_2 = PHI <dim_left_44(22)>
  pretmp_88 = cur_8 % gK.21_65;
  pretmp_89 = dest_5 % gK.21_65;
  pretmp_92 = dim_left_2 * 2;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                17 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # prephitmp_94 = PHI <pretmp_92(23), pretmp_93(20), 0(6), 0(17)>
  # prephitmp_109 = PHI <pretmp_88(23), _37(20), pretmp_108(6), _66(17)>
  # prephitmp_111 = PHI <pretmp_89(23), _21(20), pretmp_110(6), _67(17)>
  # DEBUG D#189ptD.0 => gKD.33726
  # DEBUG curD.45481 => NULL
  # DEBUG destD.45482 => NULL
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 1759, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                24 [100.0%]  (FALLTHRU,EXECUTABLE)
  # cur_3 = PHI <prephitmp_103(16), prephitmp_109(24)>
  # dest_6 = PHI <prephitmp_107(16), prephitmp_111(24)>
  # prephitmp_99 = PHI <pretmp_98(16), prephitmp_94(24)>
  # DEBUG dim_leftD.45486 => NULL
  # DEBUG destD.45482 => dest_6
  # DEBUG curD.45481 => cur_3
  if (cur_3 < dest_6)
    goto <bb 27>;
  else
    goto <bb 26>;
;;    succ:       27 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 1073, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       25 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483647, 2147483647]
  _50 = prephitmp_99 + 1;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 2197, maybe hot
;;    prev block 26, next block 1, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                25 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
  # _10 = PHI <_15(3), prephitmp_99(25), _50(26)>
  # VUSE <.MEM_13(D)>
  return _10;
;;    succ:       EXIT [100.0%] 

}


Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gNodes
analyze_innermost: success.
	base_address: &gNodes
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gNodes
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gNodes
analyze_innermost: success.
	base_address: &gNodes
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gNodes
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:6)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:7)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:3, LOOPS:0, CONDITIONS:1, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:33, LOOPS:2, CONDITIONS:11, STMTS:95)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    if (cur_11(D) == dest_12(D))
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_32 })
  {
    <bb 3>:
    # VUSE <.MEM_13(D)>
    gN.20_14 = gN;
    _15 = gN.20_14 * 2;
    goto <bb 32>;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_7 bb_5 })
  {
    <bb 4>:
    if (descending_16(D) != 0)
      goto <bb 7>;
    else
      goto <bb 5>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_6 bb_17 })
  {
    <bb 5>:
    # DEBUG dim_left => 0
    # DEBUG dest => dest_12(D)
    # DEBUG cur => cur_11(D)
    # VUSE <.MEM_13(D)>
    gN.20_63 = gN;
    _64 = gN.20_63 + -1;
    if (_64 <= 0)
      goto <bb 6>;
    else
      goto <bb 17>;

  }
  bb_6 (preds = {bb_5 }, succs = {bb_24 })
  {
    <bb 6>:
    # VUSE <.MEM_13(D)>
    pretmp_90 = gK;
    pretmp_108 = cur_11(D) % pretmp_90;
    pretmp_110 = dest_12(D) % pretmp_90;
    goto <bb 24>;

  }
  bb_7 (preds = {bb_4 }, succs = {bb_8 bb_9 })
  {
    <bb 7>:
    # VUSE <.MEM_13(D)>
    gN.20_17 = gN;
    dim_left_18 = gN.20_17 + -1;
    # DEBUG dim_left => dim_left_18
    # DEBUG dim_left => dim_left_18
    # DEBUG dest => dest_12(D)
    # DEBUG cur => cur_11(D)
    if (dim_left_18 <= 0)
      goto <bb 8>;
    else
      goto <bb 9>;

  }
  bb_8 (preds = {bb_7 }, succs = {bb_16 })
  {
    <bb 8>:
    # VUSE <.MEM_13(D)>
    pretmp_53 = gNodes;
    # VUSE <.MEM_13(D)>
    pretmp_82 = gK;
    pretmp_100 = cur_11(D) * pretmp_82;
    pretmp_102 = pretmp_100 / pretmp_53;
    pretmp_104 = dest_12(D) * pretmp_82;
    pretmp_106 = pretmp_104 / pretmp_53;
    goto <bb 16>;

  }
  bb_9 (preds = {bb_7 }, succs = {bb_16 bb_13 })
  {
    <bb 9>:
    # VUSE <.MEM_13(D)>
    gK.21_54 = gK;
    _56 = cur_11(D) * gK.21_54;
    # VUSE <.MEM_13(D)>
    gNodes.22_27 = gNodes;
    _59 = _56 / gNodes.22_27;
    _60 = dest_12(D) * gK.21_54;
    _57 = _60 / gNodes.22_27;
    if (_57 != _59)
      goto <bb 16>;
    else
      goto <bb 13>;

  }
  bb_11 (preds = {bb_10 }, succs = {bb_16 })
  {
    <bb 11>:
    # _81 = PHI <_22(10)>
    # _79 = PHI <_26(10)>
    # dim_left_38 = PHI <dim_left_30(10)>
    goto <bb 16>;

  }
  bb_13 (preds = {bb_9 }, succs = {bb_14 })
  {
    <bb 13>:

  }
  bb_15 (preds = {bb_14 }, succs = {bb_16 })
  {
    <bb 15>:
    # cur_62 = PHI <cur_28(14)>
    # dest_58 = PHI <dest_29(14)>
    # dim_left_39 = PHI <dim_left_30(14)>
    pretmp_1 = cur_62 * gK.21_54;
    pretmp_52 = pretmp_1 / gNodes.22_27;
    pretmp_25 = dest_58 * gK.21_54;
    pretmp_23 = pretmp_25 / gNodes.22_27;

  }
  bb_16 (preds = {bb_15 bb_11 bb_8 bb_9 }, succs = {bb_28 })
  {
    <bb 16>:
    # dim_left_75 = PHI <dim_left_39(15), dim_left_38(11), dim_left_18(8), dim_left_18(9)>
    # prephitmp_103 = PHI <pretmp_52(15), _81(11), pretmp_102(8), _59(9)>
    # prephitmp_107 = PHI <pretmp_23(15), _79(11), pretmp_106(8), _57(9)>

  }
  bb_28 (preds = {bb_16 }, succs = {bb_25 })
  {
    <bb 28>:
    # DEBUG D#193 => gK
    # DEBUG D#192 => NULL
    # DEBUG D#191 => gNodes
    # DEBUG cur => D#192 / D#191
    # DEBUG D#190 => NULL
    # DEBUG dest => D#190 / D#191
    pretmp_98 = dim_left_75 * 2;
    goto <bb 25>;

  }
  bb_17 (preds = {bb_5 }, succs = {bb_24 bb_21 })
  {
    <bb 17>:
    # VUSE <.MEM_13(D)>
    gK.21_65 = gK;
    _66 = cur_11(D) % gK.21_65;
    _67 = dest_12(D) % gK.21_65;
    if (_66 != _67)
      goto <bb 24>;
    else
      goto <bb 21>;

  }
  bb_20 (preds = {bb_18 }, succs = {bb_24 })
  {
    <bb 20>:
    # _37 = PHI <_40(18)>
    # _21 = PHI <_41(18)>
    # dim_left_4 = PHI <dim_left_44(18)>
    pretmp_93 = dim_left_4 * 2;
    goto <bb 24>;

  }
  bb_21 (preds = {bb_17 }, succs = {bb_22 })
  {
    <bb 21>:

  }
  bb_23 (preds = {bb_22 }, succs = {bb_24 })
  {
    <bb 23>:
    # cur_8 = PHI <cur_42(22)>
    # dest_5 = PHI <dest_43(22)>
    # dim_left_2 = PHI <dim_left_44(22)>
    pretmp_88 = cur_8 % gK.21_65;
    pretmp_89 = dest_5 % gK.21_65;
    pretmp_92 = dim_left_2 * 2;

  }
  bb_24 (preds = {bb_23 bb_20 bb_6 bb_17 }, succs = {bb_29 })
  {
    <bb 24>:
    # prephitmp_94 = PHI <pretmp_92(23), pretmp_93(20), 0(6), 0(17)>
    # prephitmp_109 = PHI <pretmp_88(23), _37(20), pretmp_108(6), _66(17)>
    # prephitmp_111 = PHI <pretmp_89(23), _21(20), pretmp_110(6), _67(17)>

  }
  bb_29 (preds = {bb_24 }, succs = {bb_25 })
  {
    <bb 29>:
    # DEBUG D#189 => gK
    # DEBUG cur => NULL
    # DEBUG dest => NULL

  }
  bb_25 (preds = {bb_28 bb_29 }, succs = {bb_30 })
  {
    <bb 25>:
    # cur_3 = PHI <prephitmp_103(28), prephitmp_109(29)>
    # dest_6 = PHI <prephitmp_107(28), prephitmp_111(29)>
    # prephitmp_99 = PHI <pretmp_98(28), prephitmp_94(29)>

  }
  bb_30 (preds = {bb_25 }, succs = {bb_27 bb_26 })
  {
    <bb 30>:
    # DEBUG dim_left => NULL
    # DEBUG dest => dest_6
    # DEBUG cur => cur_3
    if (cur_3 < dest_6)
      goto <bb 27>;
    else
      goto <bb 26>;

  }
  bb_26 (preds = {bb_30 }, succs = {bb_27 })
  {
    <bb 26>:
    _50 = prephitmp_99 + 1;

  }
  bb_27 (preds = {bb_26 bb_30 }, succs = {bb_32 })
  {
    <bb 27>:
    # _9 = PHI <_50(26), prephitmp_99(30)>

  }
  bb_32 (preds = {bb_27 bb_3 }, succs = {bb_31 })
  {
    <bb 32>:
    # _10 = PHI <_9(27), _15(3)>

  }
  bb_31 (preds = {bb_32 }, succs = {bb_1 })
  {
    <bb 31>:
    # VUSE <.MEM_13(D)>
    return _10;

  }
  loop_2 (header = 14, latch = 12, niter = , upper_bound = 2147483645)
  {
    bb_10 (preds = {bb_14 }, succs = {bb_11 bb_12 })
    {
      <bb 10>:
      _20 = cur_28 * gK.21_54;
      _22 = _20 / gNodes.22_27;
      _24 = dest_29 * gK.21_54;
      _26 = _24 / gNodes.22_27;
      if (_22 != _26)
        goto <bb 11>;
      else
        goto <bb 12>;

    }
    bb_12 (preds = {bb_10 }, succs = {bb_14 })
    {
      <bb 12>:
      goto <bb 14>;

    }
    bb_14 (preds = {bb_13 bb_12 }, succs = {bb_15 bb_10 })
    {
      <bb 14>:
      # dim_left_74 = PHI <dim_left_18(13), dim_left_30(12)>
      # _78 = PHI <_56(13), _20(12)>
      # _80 = PHI <_60(13), _24(12)>
      # DEBUG dim_left => dim_left_74
      # DEBUG dest => dest_12(D)
      # DEBUG cur => cur_11(D)
      cur_28 = _78 % gNodes.22_27;
      # DEBUG cur => cur_28
      dest_29 = _80 % gNodes.22_27;
      # DEBUG dest => dest_29
      dim_left_30 = dim_left_74 + -1;
      # DEBUG dim_left => dim_left_30
      # DEBUG dim_left => dim_left_30
      # DEBUG dest => dest_29
      # DEBUG cur => cur_28
      if (dim_left_30 <= 0)
        goto <bb 15>;
      else
        goto <bb 10>;

    }
  }
  loop_1 (header = 22, latch = 19, niter = , upper_bound = 2147483645)
  {
    bb_18 (preds = {bb_22 }, succs = {bb_20 bb_19 })
    {
      <bb 18>:
      _40 = cur_42 % gK.21_65;
      _41 = dest_43 % gK.21_65;
      if (_40 != _41)
        goto <bb 20>;
      else
        goto <bb 19>;

    }
    bb_19 (preds = {bb_18 }, succs = {bb_22 })
    {
      <bb 19>:
      goto <bb 22>;

    }
    bb_22 (preds = {bb_21 bb_19 }, succs = {bb_23 bb_18 })
    {
      <bb 22>:
      # cur_69 = PHI <cur_11(D)(21), cur_42(19)>
      # dest_72 = PHI <dest_12(D)(21), dest_43(19)>
      # dim_left_76 = PHI <0(21), dim_left_44(19)>
      # DEBUG dim_left => dim_left_76
      # DEBUG dest => dest_72
      # DEBUG cur => cur_69
      cur_42 = cur_69 / gK.21_65;
      # DEBUG cur => cur_42
      dest_43 = dest_72 / gK.21_65;
      # DEBUG dest => dest_43
      dim_left_44 = dim_left_76 + 1;
      # DEBUG dim_left => dim_left_44
      # DEBUG dim_left => dim_left_44
      # DEBUG dest => dest_43
      # DEBUG cur => cur_42
      if (dim_left_44 >= _64)
        goto <bb 23>;
      else
        goto <bb 18>;

    }
  }
}

Pass statistics:
----------------

int dor_next_mesh(int, int, bool) (intD.9 curD.45481, intD.9 destD.45482, boolD.2757 descendingD.45483)
{
  intD.9 dim_leftD.45486;
  intD.9 pretmp_1;
  intD.9 _9;
  intD.9 _10;
  intD.9 gN.20_14;
  intD.9 _15;
  intD.9 gN.20_17;
  intD.9 _20;
  intD.9 _21;
  intD.9 _22;
  intD.9 pretmp_23;
  intD.9 _24;
  intD.9 pretmp_25;
  intD.9 _26;
  intD.9 gNodes.22_27;
  intD.9 _37;
  intD.9 _40;
  intD.9 _41;
  intD.9 _50;
  intD.9 pretmp_52;
  intD.9 pretmp_53;
  intD.9 gK.21_54;
  intD.9 _56;
  intD.9 _57;
  intD.9 _59;
  intD.9 _60;
  intD.9 gN.20_63;
  intD.9 _64;
  intD.9 gK.21_65;
  intD.9 _66;
  intD.9 _67;
  intD.9 _78;
  intD.9 _79;
  intD.9 _80;
  intD.9 _81;
  intD.9 pretmp_82;
  intD.9 pretmp_88;
  intD.9 pretmp_89;
  intD.9 pretmp_90;
  intD.9 pretmp_92;
  intD.9 pretmp_93;
  intD.9 prephitmp_94;
  intD.9 pretmp_98;
  intD.9 prephitmp_99;
  intD.9 pretmp_100;
  intD.9 pretmp_102;
  intD.9 prephitmp_103;
  intD.9 pretmp_104;
  intD.9 pretmp_106;
  intD.9 prephitmp_107;
  intD.9 pretmp_108;
  intD.9 prephitmp_109;
  intD.9 pretmp_110;
  intD.9 prephitmp_111;

;;   basic block 2, loop depth 0, count 0, freq 2197, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  if (cur_11(D) == dest_12(D))
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [19.9%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [80.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 437, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [19.9%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  gN.20_14 = gND.33727;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _15 = gN.20_14 * 2;
  goto <bb 32>;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 1760, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [80.1%]  (FALSE_VALUE,EXECUTABLE)
  if (descending_16(D) != 0)
    goto <bb 7>;
  else
    goto <bb 5>;
;;    succ:       7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG dim_leftD.45486 => 0
  # DEBUG destD.45482 => dest_12(D)
  # DEBUG curD.45481 => cur_11(D)
  # VUSE <.MEM_13(D)>
  gN.20_63 = gND.33727;
  _64 = gN.20_63 + -1;
  if (_64 <= 0)
    goto <bb 6>;
  else
    goto <bb 17>;
;;    succ:       6 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 40, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  pretmp_90 = gKD.33726;
  pretmp_108 = cur_11(D) % pretmp_90;
  pretmp_110 = dest_12(D) % pretmp_90;
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       4 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  gN.20_17 = gND.33727;
  dim_left_18 = gN.20_17 + -1;
  # DEBUG dim_leftD.45486 => dim_left_18
  # DEBUG dim_leftD.45486 => dim_left_18
  # DEBUG destD.45482 => dest_12(D)
  # DEBUG curD.45481 => cur_11(D)
  if (dim_left_18 <= 0)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 40, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  pretmp_53 = gNodesD.33729;
  # VUSE <.MEM_13(D)>
  pretmp_82 = gKD.33726;
  pretmp_100 = cur_11(D) * pretmp_82;
  pretmp_102 = pretmp_100 / pretmp_53;
  pretmp_104 = dest_12(D) * pretmp_82;
  pretmp_106 = pretmp_104 / pretmp_53;
  goto <bb 16>;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 840, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       7 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  gK.21_54 = gKD.33726;
  _56 = cur_11(D) * gK.21_54;
  # VUSE <.MEM_13(D)>
  gNodes.22_27 = gNodesD.33729;
  _59 = _56 / gNodes.22_27;
  _60 = dest_12(D) * gK.21_54;
  _57 = _60 / gNodes.22_27;
  if (_57 != _59)
    goto <bb 16>;
  else
    goto <bb 13>;
;;    succ:       16 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 8710, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       14 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  _20 = cur_28 * gK.21_54;
  _22 = _20 / gNodes.22_27;
  _24 = dest_29 * gK.21_54;
  _26 = _24 / gNodes.22_27;
  if (_22 != _26)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 392, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # _81 = PHI <_22(10)>
  # _79 = PHI <_26(10)>
  # RANGE [0, 2147483646] NONZERO 2147483647
  # dim_left_38 = PHI <dim_left_30(10)>
  goto <bb 16>;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 8318, maybe hot
;;    prev block 11, next block 13, flags: (NEW)
;;    pred:       10 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 802, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       9 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 1, count 0, freq 9120, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # dim_left_74 = PHI <dim_left_18(13), dim_left_30(12)>
  # _78 = PHI <_56(13), _20(12)>
  # _80 = PHI <_60(13), _24(12)>
  # DEBUG dim_leftD.45486 => dim_left_74
  # DEBUG destD.45482 => dest_12(D)
  # DEBUG curD.45481 => cur_11(D)
  cur_28 = _78 % gNodes.22_27;
  # DEBUG curD.45481 => cur_28
  dest_29 = _80 % gNodes.22_27;
  # DEBUG destD.45482 => dest_29
  # RANGE [0, 2147483646] NONZERO 2147483647
  dim_left_30 = dim_left_74 + -1;
  # DEBUG dim_leftD.45486 => dim_left_30
  # DEBUG dim_leftD.45486 => dim_left_30
  # DEBUG destD.45482 => dest_29
  # DEBUG curD.45481 => cur_28
  if (dim_left_30 <= 0)
    goto <bb 15>;
  else
    goto <bb 10>;
;;    succ:       15 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 410, maybe hot
;;    prev block 14, next block 16, flags: (NEW)
;;    pred:       14 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # cur_62 = PHI <cur_28(14)>
  # dest_58 = PHI <dest_29(14)>
  # RANGE [0, 2147483646] NONZERO 2147483647
  # dim_left_39 = PHI <dim_left_30(14)>
  pretmp_1 = cur_62 * gK.21_54;
  pretmp_52 = pretmp_1 / gNodes.22_27;
  pretmp_25 = dest_58 * gK.21_54;
  pretmp_23 = pretmp_25 / gNodes.22_27;
;;    succ:       16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 15, next block 28, flags: (NEW, REACHABLE)
;;    pred:       15 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # dim_left_75 = PHI <dim_left_39(15), dim_left_38(11), dim_left_18(8), dim_left_18(9)>
  # prephitmp_103 = PHI <pretmp_52(15), _81(11), pretmp_102(8), _59(9)>
  # prephitmp_107 = PHI <pretmp_23(15), _79(11), pretmp_106(8), _57(9)>
;;    succ:       28 [100.0%]  (FALLTHRU)

;;   basic block 28, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 16, next block 17, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU)
  # DEBUG D#193ptD.0 => gKD.33726
  # DEBUG D#192ptD.0 => NULL
  # DEBUG D#191ptD.0 => gNodesD.33729
  # DEBUG curD.45481 => D#192ptD.0 / D#191ptD.0
  # DEBUG D#190ptD.0 => NULL
  # DEBUG destD.45482 => D#190ptD.0 / D#191ptD.0
  pretmp_98 = dim_left_75 * 2;
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 840, maybe hot
;;    prev block 28, next block 18, flags: (NEW, REACHABLE)
;;    pred:       5 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  gK.21_65 = gKD.33726;
  _66 = cur_11(D) % gK.21_65;
  _67 = dest_12(D) % gK.21_65;
  if (_66 != _67)
    goto <bb 24>;
  else
    goto <bb 21>;
;;    succ:       24 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 1, count 0, freq 8710, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       22 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  _40 = cur_42 % gK.21_65;
  _41 = dest_43 % gK.21_65;
  if (_40 != _41)
    goto <bb 20>;
  else
    goto <bb 19>;
;;    succ:       20 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 8318, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       18 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 22>;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 392, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       18 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # _37 = PHI <_40(18)>
  # _21 = PHI <_41(18)>
  # dim_left_4 = PHI <dim_left_44(18)>
  pretmp_93 = dim_left_4 * 2;
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 802, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       17 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 9120, maybe hot
;;    prev block 21, next block 23, flags: (NEW)
;;    pred:       21 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # cur_69 = PHI <cur_11(D)(21), cur_42(19)>
  # dest_72 = PHI <dest_12(D)(21), dest_43(19)>
  # dim_left_76 = PHI <0(21), dim_left_44(19)>
  # DEBUG dim_leftD.45486 => dim_left_76
  # DEBUG destD.45482 => dest_72
  # DEBUG curD.45481 => cur_69
  cur_42 = cur_69 / gK.21_65;
  # DEBUG curD.45481 => cur_42
  dest_43 = dest_72 / gK.21_65;
  # DEBUG destD.45482 => dest_43
  dim_left_44 = dim_left_76 + 1;
  # DEBUG dim_leftD.45486 => dim_left_44
  # DEBUG dim_leftD.45486 => dim_left_44
  # DEBUG destD.45482 => dest_43
  # DEBUG curD.45481 => cur_42
  if (dim_left_44 >= _64)
    goto <bb 23>;
  else
    goto <bb 18>;
;;    succ:       23 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 410, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # cur_8 = PHI <cur_42(22)>
  # dest_5 = PHI <dest_43(22)>
  # dim_left_2 = PHI <dim_left_44(22)>
  pretmp_88 = cur_8 % gK.21_65;
  pretmp_89 = dest_5 % gK.21_65;
  pretmp_92 = dim_left_2 * 2;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 23, next block 29, flags: (NEW, REACHABLE)
;;    pred:       23 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                17 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # prephitmp_94 = PHI <pretmp_92(23), pretmp_93(20), 0(6), 0(17)>
  # prephitmp_109 = PHI <pretmp_88(23), _37(20), pretmp_108(6), _66(17)>
  # prephitmp_111 = PHI <pretmp_89(23), _21(20), pretmp_110(6), _67(17)>
;;    succ:       29 [100.0%]  (FALLTHRU)

;;   basic block 29, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 24, next block 25, flags: (NEW)
;;    pred:       24 [100.0%]  (FALLTHRU)
  # DEBUG D#189ptD.0 => gKD.33726
  # DEBUG curD.45481 => NULL
  # DEBUG destD.45482 => NULL
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 1759, maybe hot
;;    prev block 29, next block 30, flags: (NEW, REACHABLE)
;;    pred:       28 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                29 [100.0%]  (FALLTHRU,EXECUTABLE)
  # cur_3 = PHI <prephitmp_103(28), prephitmp_109(29)>
  # dest_6 = PHI <prephitmp_107(28), prephitmp_111(29)>
  # prephitmp_99 = PHI <pretmp_98(28), prephitmp_94(29)>
;;    succ:       30 [100.0%]  (FALLTHRU)

;;   basic block 30, loop depth 0, count 0, freq 1759, maybe hot
;;    prev block 25, next block 26, flags: (NEW)
;;    pred:       25 [100.0%]  (FALLTHRU)
  # DEBUG dim_leftD.45486 => NULL
  # DEBUG destD.45482 => dest_6
  # DEBUG curD.45481 => cur_3
  if (cur_3 < dest_6)
    goto <bb 27>;
  else
    goto <bb 26>;
;;    succ:       27 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 1073, maybe hot
;;    prev block 30, next block 27, flags: (NEW, REACHABLE)
;;    pred:       30 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483647, 2147483647]
  _50 = prephitmp_99 + 1;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 1759, maybe hot
;;    prev block 26, next block 32, flags: (NEW, REACHABLE)
;;    pred:       26 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                30 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # _9 = PHI <_50(26), prephitmp_99(30)>
;;    succ:       32 [100.0%]  (FALLTHRU)

;;   basic block 32, loop depth 0, count 0, freq 2197, maybe hot
;;    prev block 27, next block 31, flags: (NEW)
;;    pred:       27 [100.0%]  (FALLTHRU)
;;                3 [100.0%]  (FALLTHRU,EXECUTABLE)
  # _10 = PHI <_9(27), _15(3)>
;;    succ:       31 [100.0%]  (FALLTHRU)

;;   basic block 31, loop depth 0, count 0, freq 2197, maybe hot
;;    prev block 32, next block 1, flags: (NEW)
;;    pred:       32 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_13(D)>
  return _10;
;;    succ:       EXIT [100.0%] 

}



;; Function void dim_order_pni_mesh(const Router*, const Flit*, int, OutputSet*, bool) (_Z18dim_order_pni_meshPK6RouterPK4FlitiP9OutputSetb, funcdef_no=1975, decl_uid=45556, cgraph_uid=474, symbol_order=485)


Pass statistics:
----------------

void dim_order_pni_mesh(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45551, const struct FlitD.29321 * fD.45552, intD.9 in_channelD.45553, struct OutputSetD.28230 * outputsD.45554, boolD.2757 injectD.45555)
{
  char_typeD.19944 D.55146;
  charD.10 __cD.55145;
  char_typeD.19944 D.55143;
  charD.10 __cD.55142;
  char_typeD.23023 D.55140;
  struct basic_ostreamD.11177 & D.55134;
  intD.9 dD.45564;
  intD.9 out_dimD.45563;
  intD.9 vcs_per_destD.45565;
  intD.9 next_coordD.45562;
  static const charD.10 _ZZ18dim_order_pni_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45561[75] = "void dim_order_pni_mesh(const Router*, const Flit*, int, OutputSet*, bool)";
  intD.9 vcEndD.45560;
  intD.9 vcBeginD.45559;
  intD.9 out_portD.45558;
  boolD.2757 _9;
  intD.9 _14;
  intD.9 gNumVCs.41_17;
  FlitTypeD.29324 _19;
  intD.9 _28;
  intD.9 _30;
  intD.9 _38;
  intD.9 _39;
  intD.9 _41;
  intD.9 _43;
  boolD.2757 _47;
  intD.9 _48;
  intD.9 _49;
  intD.9 _51;
  struct ostreamD.11178 * gWatchOut.45_52;
  struct basic_ostreamD.11177 & _54;
  const size_typeD.14319 _55;
  struct basic_ostreamD.11177 & _57;
  struct basic_ostreamD.11177 & _59;
  struct basic_ostreamD.11177 & _61;
  struct basic_ostreamD.11177 & _63;
  struct basic_ostreamD.11177 & _66;
  struct basic_ostreamD.11177 & _68;
  const intD.9 _72;
  const intD.9 _73;
  long intD.12 _74;
  charD.10 * const _75;
  struct basic_ostreamD.11177 & _76;
  const struct __ctype_typeD.23028 * _89;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _90;
  long intD.12 _91;
  sizetype _92;
  struct basic_iosD.11171 * _93;
  struct basic_ostreamD.11177 & _96;
  boolD.2757 _97;
  charD.10 _98;
  char_typeD.19944 _101;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _106;
  intD.9 (*__vtbl_ptr_typeD.2760) () _107;
  voidD.45 * PROF_111;
  char_typeD.19944 _113;
  boolD.2757 _135;
  boolD.2757 _136;
  boolD.2757 _137;
  boolD.2757 _139;
  boolD.2757 _140;
  intD.9 pretmp_147;
  intD.9 pretmp_148;
  intD.9 prephitmp_149;
  intD.9 pretmp_150;
  intD.9 pretmp_151;
  intD.9 pretmp_152;
  intD.9 prephitmp_153;
  intD.9 pretmp_157;

;;   basic block 2, loop depth 0, count 0, freq 3602, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  if (inject_11(D) != 0)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 1801, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  _14 = f_13(D)->destD.29342;
  # VUSE <.MEM_12(D)>
  _72 = MEM[(intD.9 *)r_15(D) + 96B];
  # DEBUG D#14ptD.0 => r_15(D)
  # DEBUG thisD.51027 => D#14ptD.0
  # VUSE <.MEM_12(D)>
  # USE = nonlocal escaped null 
  out_port_16 = _Z13dor_next_meshiibD.45450 (_72, _14, 0);
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 3602, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [100.0%]  (FALLTHRU,EXECUTABLE)
  # out_port_8 = PHI <-1(2), out_port_16(3)>
  # DEBUG out_portD.45558 => out_port_8
  # DEBUG vcBeginD.45559 => 0
  # DEBUG D#201ptD.0 => gNumVCsD.42077
  # DEBUG vcEndD.45560 => D#201ptD.0 + -1
  # VUSE <.MEM_12(D)>
  _19 = f_13(D)->typeD.29330;
  if (_19 == 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 1801, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  vcBegin_20 = gReadReqBeginVCD.42078;
  # DEBUG vcBeginD.45559 => vcBegin_20
  # VUSE <.MEM_12(D)>
  vcEnd_21 = gReadReqEndVCD.42079;
  # DEBUG vcEndD.45560 => vcEnd_21
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 1801, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_19 == 2)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 504, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  vcBegin_22 = gWriteReqBeginVCD.42080;
  # DEBUG vcBeginD.45559 => vcBegin_22
  # VUSE <.MEM_12(D)>
  vcEnd_23 = gWriteReqEndVCD.42081;
  # DEBUG vcEndD.45560 => vcEnd_23
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 1297, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_19 == 1)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 363, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  vcBegin_24 = gReadReplyBeginVCD.42082;
  # DEBUG vcBeginD.45559 => vcBegin_24
  # VUSE <.MEM_12(D)>
  vcEnd_25 = gReadReplyEndVCD.42083;
  # DEBUG vcEndD.45560 => vcEnd_25
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 934, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  gNumVCs.41_17 = gNumVCsD.42077;
  if (_19 == 3)
    goto <bb 12>;
  else
    goto <bb 11>;
;;    succ:       12 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 672, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  vcEnd_18 = gNumVCs.41_17 + -1;
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 261, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       10 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  vcBegin_26 = gWriteReplyBeginVCD.42084;
  # DEBUG vcBeginD.45559 => vcBegin_26
  # VUSE <.MEM_12(D)>
  vcEnd_27 = gWriteReplyEndVCD.42085;
  # DEBUG vcEndD.45560 => vcEnd_27
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 3602, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # vcBegin_1 = PHI <vcBegin_20(5), vcBegin_22(7), vcBegin_24(9), 0(11), vcBegin_26(12)>
  # vcEnd_3 = PHI <vcEnd_21(5), vcEnd_23(7), vcEnd_25(9), vcEnd_18(11), vcEnd_27(12)>
  # DEBUG vcEndD.45560 => vcEnd_3
  # DEBUG vcBeginD.45559 => vcBegin_1
  # VUSE <.MEM_12(D)>
  _28 = f_13(D)->vcD.29331;
  _139 = vcEnd_3 < _28;
  _140 = vcBegin_1 > _28;
  _97 = _139 | _140;
  if (_97 != 0)
    goto <bb 14>;
  else
    goto <bb 16>;
;;    succ:       14 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 2701, maybe hot
;;   Invalid sum of incoming frequencies 1801, should be 2701
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  _9 = _28 >= 0;
  if (_9 >= inject_11(D))
    goto <bb 15>;
  else
    goto <bb 38>;
;;    succ:       15 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 2
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_29 = VDEF <.MEM_12(D)>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  __assert_failD.9858 ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 750, &_ZZ18dim_order_pni_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45561);
;;    succ:      

;;   basic block 16, loop depth 0, count 0, freq 900, maybe hot
;;   Invalid sum of incoming frequencies 1801, should be 900
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       13 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (inject_11(D) != 0)
    goto <bb 40>;
  else
    goto <bb 17>;
;;    succ:       40 (TRUE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 1800, maybe hot
;;   Invalid sum of incoming frequencies 900, should be 1800
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  _73 = MEM[(intD.9 *)r_15(D) + 96B];
  # DEBUG D#14ptD.0 => r_15(D)
  # DEBUG thisD.51030 => D#14ptD.0
  # VUSE <.MEM_12(D)>
  _30 = f_13(D)->destD.29342;
  if (_30 != _73)
    goto <bb 18>;
  else
    goto <bb 29>;
;;    succ:       18 [72.0%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [28.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 900, maybe hot
;;   Invalid sum of incoming frequencies 1548, should be 900
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       38 [14.0%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [72.0%]  (TRUE_VALUE,EXECUTABLE)
  # next_coord_132 = PHI <next_coord_31(38), _30(17)>
  # DEBUG next_coordD.45562 => next_coord_132
  # RANGE [-1073741824, 1073741823]
  out_dim_32 = out_port_8 / 2;
  # DEBUG out_dimD.45563 => out_dim_32
  # DEBUG dD.45564 => 0
  # DEBUG dD.45564 => 0
  # DEBUG next_coordD.45562 => next_coord_132
  if (out_dim_32 <= 0)
    goto <bb 19>;
  else
    goto <bb 20>;
;;    succ:       19 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 81, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  pretmp_151 = gKD.33726;
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       18 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  pretmp_157 = gKD.33726;
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
  # next_coord_94 = PHI <next_coord_132(20), next_coord_34(22)>
  # RANGE [0, 2147483646] NONZERO 1073741823
  # d_115 = PHI <0(20), d_35(22)>
  # DEBUG dD.45564 => d_115
  # DEBUG next_coordD.45562 => next_coord_94
  next_coord_34 = next_coord_94 / pretmp_157;
  # DEBUG next_coordD.45562 => next_coord_34
  # RANGE [1, 1073741823] NONZERO 1073741823
  d_35 = d_115 + 1;
  # DEBUG dD.45564 => d_35
  # DEBUG dD.45564 => d_35
  # DEBUG next_coordD.45562 => next_coord_34
  if (out_dim_32 <= d_35)
    goto <bb 23>;
  else
    goto <bb 22>;
;;    succ:       23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 21, next block 23, flags: (NEW)
;;    pred:       21 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 21>;
;;    succ:       21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # next_coord_156 = PHI <next_coord_34(21)>
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 1800, maybe hot
;;   Invalid sum of incoming frequencies 2448, should be 1800
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       39 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                40 [100.0%]  (FALLTHRU,EXECUTABLE)
  # next_coord_6 = PHI <next_coord_31(39), next_coord_156(23), next_coord_132(19), next_coord_127(40)>
  # prephitmp_153 = PHI <pretmp_150(39), pretmp_157(23), pretmp_151(19), pretmp_152(40)>
  # DEBUG next_coordD.45562 => next_coord_6
  next_coord_37 = next_coord_6 % prephitmp_153;
  # DEBUG next_coordD.45562 => next_coord_37
  _136 = next_coord_37 >= prephitmp_153;
  _135 = next_coord_37 < 0;
  _137 = _135 | _136;
  if (_137 != 0)
    goto <bb 25>;
  else
    goto <bb 26>;
;;    succ:       25 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 1
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       24 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_46 = VDEF <.MEM_12(D)>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  __assert_failD.9858 ("next_coord >= 0 && next_coord < gK", "routefunc.cpp", 761, &_ZZ18dim_order_pni_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45561);
;;    succ:      

;;   basic block 26, loop depth 0, count 0, freq 1799, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       24 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  _38 = vcEnd_3 - vcBegin_1;
  _39 = _38 + 1;
  vcs_per_dest_40 = _39 / prephitmp_153;
  # DEBUG vcs_per_destD.45565 => vcs_per_dest_40
  if (vcs_per_dest_40 <= 0)
    goto <bb 27>;
  else
    goto <bb 28>;
;;    succ:       27 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 1
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       26 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_45 = VDEF <.MEM_12(D)>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  __assert_failD.9858 ("vcs_per_dest > 0", "routefunc.cpp", 763, &_ZZ18dim_order_pni_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45561);
;;    succ:      

;;   basic block 28, loop depth 0, count 0, freq 3094, maybe hot
;;   Invalid sum of incoming frequencies 1798, should be 3094
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       26 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  _41 = next_coord_37 * vcs_per_dest_40;
  vcBegin_42 = vcBegin_1 + _41;
  # DEBUG vcBeginD.45559 => vcBegin_42
  _43 = vcs_per_dest_40 + vcBegin_42;
  vcEnd_44 = _43 + -1;
  # DEBUG vcEndD.45560 => vcEnd_44
  # DEBUG vcEndD.45560 => vcEnd_44
  # DEBUG vcBeginD.45559 => vcBegin_42
  if (inject_11(D) != 0)
    goto <bb 37>;
  else
    goto <bb 29>;
;;    succ:       29 [54.6%]  (FALSE_VALUE,EXECUTABLE)
;;                37 [45.4%]  (TRUE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 2195, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       28 [54.6%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [28.0%]  (FALSE_VALUE,EXECUTABLE)
  # vcBegin_100 = PHI <vcBegin_42(28), vcBegin_1(17)>
  # vcEnd_103 = PHI <vcEnd_44(28), vcEnd_3(17)>
  # DEBUG vcEndD.45560 => vcEnd_103
  # DEBUG vcBeginD.45559 => vcBegin_100
  # VUSE <.MEM_12(D)>
  _47 = f_13(D)->watchD.29345;
  if (_47 != 0)
    goto <bb 30>;
  else
    goto <bb 37>;
;;    succ:       30 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 855, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  _48 = f_13(D)->destD.29342;
  # VUSE <.MEM_12(D)>
  _49 = f_13(D)->idD.29338;
  # DEBUG D#17ptD.0 => &r_15(D)->D.42039.D.32226
  # DEBUG thisD.51082 => D#17ptD.0
  # .MEM_50 = VDEF <.MEM_12(D)>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _51 = _Z10GetSimTimevD.33721 ();
  # VUSE <.MEM_50>
  # PT = nonlocal escaped 
  gWatchOut.45_52 = gWatchOutD.33731;
  # .MEM_53 = VDEF <.MEM_50>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _54 = _ZNSolsEiD.23719 (gWatchOut.45_52, _51);
  # DEBUG __outD.51078 => _54
  # DEBUG __sD.51079 => " | "
  # DEBUG __sD.51080 => " | "
  # .MEM_77 = VDEF <.MEM_53>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_54, " | ", 3);
  # DEBUG __osD.51075 => _54
  # DEBUG __strD.51076 => NULL
  # VUSE <.MEM_77>
  _55 = MEM[(long unsigned intD.14 *)r_15(D) + 48B];
  # DEBUG thisD.50724 => D#1ptD.0
  _74 = (long intD.12) _55;
  # DEBUG thisD.50721 => NULL
  # VUSE <.MEM_77>
  # PT = nonlocal escaped 
  _75 = MEM[(charD.10 * *)r_15(D) + 40B];
  # DEBUG thisD.50676 => D#3ptD.0
  # .MEM_78 = VDEF <.MEM_77>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _76 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_54, _75, _74);
  # DEBUG __outD.51071 => _76
  # DEBUG __sD.51072 => " | "
  # DEBUG __sD.51073 => " | "
  # .MEM_79 = VDEF <.MEM_78>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_76, " | ", 3);
  # DEBUG __outD.51067 => _76
  # DEBUG __sD.51068 => "Adding VC range ["
  # DEBUG __sD.51069 => "Adding VC range ["
  # .MEM_80 = VDEF <.MEM_79>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_76, "Adding VC range [", 17);
  # .MEM_56 = VDEF <.MEM_80>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _57 = _ZNSolsEiD.23719 (_76, vcBegin_100);
  # DEBUG __outD.51063 => _57
  # DEBUG __sD.51064 => ","
  # DEBUG __sD.51065 => ","
  # .MEM_81 = VDEF <.MEM_56>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_57, ",", 1);
  # .MEM_58 = VDEF <.MEM_81>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _59 = _ZNSolsEiD.23719 (_57, vcEnd_103);
  # DEBUG __outD.51059 => _59
  # DEBUG __sD.51060 => "]"
  # DEBUG __sD.51061 => "]"
  # .MEM_82 = VDEF <.MEM_58>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_59, "]", 1);
  # DEBUG __outD.51055 => _59
  # DEBUG __sD.51056 => " at output port "
  # DEBUG __sD.51057 => " at output port "
  # .MEM_83 = VDEF <.MEM_82>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_59, " at output port ", 16);
  # .MEM_60 = VDEF <.MEM_83>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _61 = _ZNSolsEiD.23719 (_59, out_port_8);
  # DEBUG __outD.51051 => _61
  # DEBUG __sD.51052 => " for flit "
  # DEBUG __sD.51053 => " for flit "
  # .MEM_84 = VDEF <.MEM_60>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_61, " for flit ", 10);
  # .MEM_62 = VDEF <.MEM_84>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _63 = _ZNSolsEiD.23719 (_61, _49);
  # DEBUG __outD.51047 => _63
  # DEBUG __sD.51048 => " (input port "
  # DEBUG __sD.51049 => " (input port "
  # .MEM_85 = VDEF <.MEM_62>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_63, " (input port ", 13);
  # .MEM_65 = VDEF <.MEM_85>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _66 = _ZNSolsEiD.23719 (_63, in_channel_64(D));
  # DEBUG __outD.51043 => _66
  # DEBUG __sD.51044 => ", destination "
  # DEBUG __sD.51045 => ", destination "
  # .MEM_86 = VDEF <.MEM_65>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_66, ", destination ", 14);
  # .MEM_67 = VDEF <.MEM_86>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _68 = _ZNSolsEiD.23719 (_66, _48);
  # DEBUG __outD.51039 => _68
  # DEBUG __sD.51040 => ")"
  # DEBUG __sD.51041 => ")"
  # .MEM_87 = VDEF <.MEM_67>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_68, ")", 1);
  # DEBUG __outD.51035 => _68
  # DEBUG __sD.51036 => "."
  # DEBUG __sD.51037 => "."
  # .MEM_88 = VDEF <.MEM_87>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_68, ".", 1);
  # DEBUG thisD.51032 => _68
  # DEBUG __pfD.51033 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.23851
  # DEBUG __osD.55132 => _68
  # VUSE <.MEM_88>
  # PT = nonlocal escaped null { D.45561 } (nonlocal, escaped)
  _90 = _68->_vptr.basic_ostreamD.23811;
  # VUSE <.MEM_88>
  _91 = MEM[(long intD.12 *)_90 + -24B];
  # RANGE [0, 18446744073709551615]
  _92 = (sizetype) _91;
  # PT = nonlocal escaped 
  _93 = _68 + _92;
  # DEBUG thisD.55135 => _93
  # DEBUG __cD.55136 => 10
  # VUSE <.MEM_88>
  # PT = nonlocal escaped 
  _89 = MEM[(const struct basic_iosD.11171 *)_93]._M_ctypeD.23035;
  # DEBUG __fD.55137 => _89
  if (_89 == 0B)
    goto <bb 31>;
  else
    goto <bb 32>;
;;    succ:       31 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 0
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       30 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_125 = VDEF <.MEM_88>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__throw_bad_castvD.2825 ();
;;    succ:      

;;   basic block 32, loop depth 0, count 0, freq 855, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       30 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.55139 => _89
  # DEBUG __cD.55138 => 10
  # VUSE <.MEM_88>
  _98 = MEM[(const struct ctypeD.11417 *)_89]._M_widen_okD.19950;
  if (_98 != 0)
    goto <bb 33>;
  else
    goto <bb 34>;
;;    succ:       33 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 522, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       32 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_88>
  _101 = MEM[(const struct ctypeD.11417 *)_89]._M_widenD.19951[10];
  pretmp_147 = (intD.9) _101;
  goto <bb 36>;
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 333, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       32 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.55141 => _89
  # DEBUG __cD.55142 => 10
  # .MEM_117 = VDEF <.MEM_88>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.20058 (_89);
  # VUSE <.MEM_117>
  # PT = nonlocal escaped 
  _106 = MEM[(const struct ctypeD.11417 *)_89].D.20091._vptr.facetD.16709;
  # VUSE <.MEM_117>
  # PT = nonlocal escaped 
  _107 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_106 + 48B];
  # PT = anything 
  PROF_111 = [obj_type_ref] OBJ_TYPE_REF(_107;(const struct ctypeD.11417)_89->6);
  if (PROF_111 == _ZNKSt5ctypeIcE8do_widenEcD.20039)
    goto <bb 36>;
  else
    goto <bb 35>;
;;    succ:       36 [80.2%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [19.8%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 66, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       34 [19.8%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_118 = VDEF <.MEM_117>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _113 = OBJ_TYPE_REF(_107;(const struct ctypeD.11417)_89->6) (_89, 10);
  pretmp_148 = (intD.9) _113;
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 855, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       33 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                34 [80.2%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_116 = PHI <.MEM_88(33), .MEM_117(34), .MEM_118(35)>
  # RANGE [-128, 127]
  # prephitmp_149 = PHI <pretmp_147(33), 10(34), pretmp_148(35)>
  # .MEM_122 = VDEF <.MEM_116>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _96 = _ZNSo3putEcD.23746 (_68, prephitmp_149);
  # DEBUG __osD.55133 => _96
  # .MEM_123 = VDEF <.MEM_122>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZNSo5flushEvD.23757 (_96);
;;    succ:       37 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 3597, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       28 [45.4%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                36 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_10 = PHI <.MEM_12(D)(28), .MEM_12(D)(29), .MEM_123(36)>
  # vcBegin_99 = PHI <vcBegin_42(28), vcBegin_100(29), vcBegin_100(36)>
  # vcEnd_102 = PHI <vcEnd_44(28), vcEnd_103(29), vcEnd_103(36)>
  # .MEM_70 = VDEF <.MEM_10>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_69(D));
  # .MEM_71 = VDEF <.MEM_70>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_69(D), out_port_8, vcBegin_99, vcEnd_102, 0);
  # VUSE <.MEM_71>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 38, loop depth 0, count 0, freq 1800, maybe hot
;;   Invalid sum of incoming frequencies 2700, should be 1800
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  next_coord_31 = f_13(D)->destD.29342;
  # DEBUG next_coordD.45562 => next_coord_31
  if (inject_11(D) != 0)
    goto <bb 39>;
  else
    goto <bb 18>;
;;    succ:       18 [14.0%]  (FALSE_VALUE,EXECUTABLE)
;;                39 [86.0%]  (TRUE_VALUE,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 1548, maybe hot
;;    prev block 38, next block 40, flags: (NEW)
;;    pred:       38 [86.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  pretmp_150 = gKD.33726;
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 40, loop depth 0, count 0, freq 0
;;    prev block 39, next block 1, flags: (NEW, REACHABLE)
;;    pred:       16 (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  next_coord_127 = f_13(D)->destD.29342;
  # DEBUG next_coordD.45562 => next_coord_127
  # VUSE <.MEM_12(D)>
  pretmp_152 = gKD.33726;
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

}


Creating dr for f_13(D)->dest
analyze_innermost: success.
	base_address: f_13(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_13(D)
	Access function 0: 352
Creating dr for MEM[(int *)r_15(D) + 96B]
analyze_innermost: success.
	base_address: r_15(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(int *)r_15(D) + 96B]
Creating dr for f_13(D)->type
analyze_innermost: success.
	base_address: f_13(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *f_13(D)
	Access function 0: 0
Creating dr for gReadReqBeginVC
analyze_innermost: success.
	base_address: &gReadReqBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReqBeginVC
Creating dr for gReadReqEndVC
analyze_innermost: success.
	base_address: &gReadReqEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReqEndVC
Creating dr for gWriteReqBeginVC
analyze_innermost: success.
	base_address: &gWriteReqBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReqBeginVC
Creating dr for gWriteReqEndVC
analyze_innermost: success.
	base_address: &gWriteReqEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReqEndVC
Creating dr for gReadReplyBeginVC
analyze_innermost: success.
	base_address: &gReadReplyBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReplyBeginVC
Creating dr for gReadReplyEndVC
analyze_innermost: success.
	base_address: &gReadReplyEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReplyEndVC
Creating dr for gNumVCs
analyze_innermost: success.
	base_address: &gNumVCs
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gNumVCs
Creating dr for gWriteReplyBeginVC
analyze_innermost: success.
	base_address: &gWriteReplyBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReplyBeginVC
Creating dr for gWriteReplyEndVC
analyze_innermost: success.
	base_address: &gWriteReplyEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReplyEndVC
Creating dr for f_13(D)->vc
analyze_innermost: success.
	base_address: f_13(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: *f_13(D)
	Access function 0: 32
Creating dr for f_13(D)->dest
analyze_innermost: success.
	base_address: f_13(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_13(D)
	Access function 0: 352
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for f_13(D)->dest
analyze_innermost: success.
	base_address: f_13(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_13(D)
	Access function 0: 352
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for MEM[(int *)r_15(D) + 96B]
analyze_innermost: success.
	base_address: r_15(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(int *)r_15(D) + 96B]
Creating dr for f_13(D)->dest
analyze_innermost: success.
	base_address: f_13(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_13(D)
	Access function 0: 352
Creating dr for f_13(D)->watch
analyze_innermost: success.
	base_address: f_13(D)
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: *f_13(D)
	Access function 0: 448
Creating dr for f_13(D)->dest
analyze_innermost: success.
	base_address: f_13(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_13(D)
	Access function 0: 352
Creating dr for f_13(D)->id
analyze_innermost: success.
	base_address: f_13(D)
	offset from base address: 0
	constant offset from base address: 28
	step: 0
	aligned to: 256
	base_object: *f_13(D)
	Access function 0: 224
Creating dr for MEM[(const struct ctype *)_89]._M_widen_ok
analyze_innermost: success.
	base_address: _89
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(const struct ctype *)_89]
	Access function 0: 448
Creating dr for MEM[(const struct ctype *)_89]._M_widen[10]
analyze_innermost: success.
	base_address: _89
	offset from base address: 0
	constant offset from base address: 67
	step: 0
	aligned to: 256
	base_object: MEM[(const struct ctype *)_89]
	Access function 0: 10
	Access function 1: 456
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < out_dim_32
  bounds on difference of bases: 0 ... 1073741822
  result:
    # of iterations (unsigned int) out_dim_32 + 4294967295, bounded by 1073741822
Analyzing # of iterations of loop 1
  exit condition [1, + , 1](no_overflow) < out_dim_32
  bounds on difference of bases: 0 ... 1073741822
  result:
    # of iterations (unsigned int) out_dim_32 + 4294967295, bounded by 1073741822

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:8, LOOPS:1, CONDITIONS:2, STMTS:18)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:12, LOOPS:0, CONDITIONS:5, STMTS:33)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 1

SCoP statistics (BBS:3, LOOPS:1, CONDITIONS:1, STMTS:9)

SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Global statistics (BBS:45, LOOPS:1, CONDITIONS:19, STMTS:201)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
Creating dr for phi_out_of_ssa.527[0]
analyze_innermost: success.
	base_address: &phi_out_of_ssa.527
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: phi_out_of_ssa.527
	Access function 0: 0
Creating dr for phi_out_of_ssa.527[0]
analyze_innermost: success.
	base_address: &phi_out_of_ssa.527
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: phi_out_of_ssa.527
	Access function 0: 0
Creating dr for Close_Phi.528[0]
analyze_innermost: success.
	base_address: &Close_Phi.528
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: Close_Phi.528
	Access function 0: 0
Creating dr for Close_Phi.528[0]
analyze_innermost: success.
	base_address: &Close_Phi.528
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: Close_Phi.528
	Access function 0: 0

Updating SSA:
creating PHI node in block #21 for .MEM
creating PHI node in block #24 for .MEM
creating PHI node in block #29 for .MEM
creating PHI node in block #43 for .MEM
Registering new PHI nodes in block #0
Registering new PHI nodes in block #2
Registering new PHI nodes in block #3
Updating SSA information for statement _14 = f_13(D)->dest;
Updating SSA information for statement _72 = MEM[(int *)r_15(D) + 96B];
Updating SSA information for statement out_port_16 = dor_next_mesh (_72, _14, 0);
Registering new PHI nodes in block #4
Updating SSA information for statement _19 = f_13(D)->type;
Registering new PHI nodes in block #5
Updating SSA information for statement vcBegin_20 = gReadReqBeginVC;
Updating SSA information for statement vcEnd_21 = gReadReqEndVC;
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Updating SSA information for statement vcBegin_22 = gWriteReqBeginVC;
Updating SSA information for statement vcEnd_23 = gWriteReqEndVC;
Registering new PHI nodes in block #8
Registering new PHI nodes in block #9
Updating SSA information for statement vcBegin_24 = gReadReplyBeginVC;
Updating SSA information for statement vcEnd_25 = gReadReplyEndVC;
Registering new PHI nodes in block #10
Updating SSA information for statement gNumVCs.41_17 = gNumVCs;
Registering new PHI nodes in block #11
Registering new PHI nodes in block #12
Updating SSA information for statement vcBegin_26 = gWriteReplyBeginVC;
Updating SSA information for statement vcEnd_27 = gWriteReplyEndVC;
Registering new PHI nodes in block #13
Registering new PHI nodes in block #44
Updating SSA information for statement _28 = f_13(D)->vc;
Registering new PHI nodes in block #14
Registering new PHI nodes in block #38
Updating SSA information for statement next_coord_31 = f_13(D)->dest;
Registering new PHI nodes in block #39
Updating SSA information for statement pretmp_150 = gK;
Registering new PHI nodes in block #15
Updating SSA information for statement __assert_fail ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 750, &__PRETTY_FUNCTION__);
Registering new PHI nodes in block #16
Registering new PHI nodes in block #17
Updating SSA information for statement _73 = MEM[(int *)r_15(D) + 96B];
Updating SSA information for statement _30 = f_13(D)->dest;
Registering new PHI nodes in block #40
Updating SSA information for statement next_coord_127 = f_13(D)->dest;
Updating SSA information for statement pretmp_152 = gK;
Registering new PHI nodes in block #18
Registering new PHI nodes in block #42
Registering new PHI nodes in block #19
Updating SSA information for statement pretmp_151 = gK;
Registering new PHI nodes in block #20
Updating SSA information for statement pretmp_157 = gK;
Updating SSA information for statement phi_out_of_ssa.527[0] = next_coord_132;
Registering new PHI nodes in block #21
Updating SSA information for statement next_coord_94 = phi_out_of_ssa.527[0];
Updating SSA information for statement Close_Phi.528[0] = next_coord_34;
Updating SSA information for statement phi_out_of_ssa.527[0] = next_coord_34;
Registering new PHI nodes in block #22
Registering new PHI nodes in block #23
Updating SSA information for statement next_coord_156 = Close_Phi.528[0];
Registering new PHI nodes in block #41
Registering new PHI nodes in block #24
Registering new PHI nodes in block #43
Registering new PHI nodes in block #26
Registering new PHI nodes in block #28
Registering new PHI nodes in block #27
Updating SSA information for statement __assert_fail ("vcs_per_dest > 0", "routefunc.cpp", 763, &__PRETTY_FUNCTION__);
Registering new PHI nodes in block #25
Updating SSA information for statement __assert_fail ("next_coord >= 0 && next_coord < gK", "routefunc.cpp", 761, &__PRETTY_FUNCTION__);
Registering new PHI nodes in block #29
Updating SSA information for statement _47 = f_13(D)->watch;
Registering new PHI nodes in block #30
Updating SSA information for statement _48 = f_13(D)->dest;
Updating SSA information for statement _49 = f_13(D)->id;
Updating SSA information for statement _51 = GetSimTime ();
Updating SSA information for statement gWatchOut.45_52 = gWatchOut;
Updating SSA information for statement _54 = std::basic_ostream<char>::operator<< (gWatchOut.45_52, _51);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_54, " | ", 3);
Updating SSA information for statement _55 = MEM[(long unsigned int *)r_15(D) + 48B];
Updating SSA information for statement _75 = MEM[(char * *)r_15(D) + 40B];
Updating SSA information for statement _76 = std::__ostream_insert<char, std::char_traits<char> > (_54, _75, _74);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_76, " | ", 3);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_76, "Adding VC range [", 17);
Updating SSA information for statement _57 = std::basic_ostream<char>::operator<< (_76, vcBegin_100);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_57, ",", 1);
Updating SSA information for statement _59 = std::basic_ostream<char>::operator<< (_57, vcEnd_103);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_59, "]", 1);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_59, " at output port ", 16);
Updating SSA information for statement _61 = std::basic_ostream<char>::operator<< (_59, out_port_8);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_61, " for flit ", 10);
Updating SSA information for statement _63 = std::basic_ostream<char>::operator<< (_61, _49);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_63, " (input port ", 13);
Updating SSA information for statement _66 = std::basic_ostream<char>::operator<< (_63, in_channel_64(D));
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_66, ", destination ", 14);
Updating SSA information for statement _68 = std::basic_ostream<char>::operator<< (_66, _48);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_68, ")", 1);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_68, ".", 1);
Updating SSA information for statement _90 = _68->_vptr.basic_ostream;
Updating SSA information for statement _91 = MEM[(long int *)_90 + -24B];
Updating SSA information for statement _89 = MEM[(const struct basic_ios *)_93]._M_ctype;
Registering new PHI nodes in block #32
Updating SSA information for statement _98 = MEM[(const struct ctype *)_89]._M_widen_ok;
Registering new PHI nodes in block #33
Updating SSA information for statement _101 = MEM[(const struct ctype *)_89]._M_widen[10];
Registering new PHI nodes in block #34
Updating SSA information for statement std::ctype<char>::_M_widen_init (_89);
Updating SSA information for statement _106 = MEM[(const struct ctype *)_89].D.20091._vptr.facet;
Updating SSA information for statement _107 = MEM[(int (*__vtbl_ptr_type) () *)_106 + 48B];
Registering new PHI nodes in block #35
Updating SSA information for statement _113 = OBJ_TYPE_REF(_107;_89->6) (_89, 10);
Registering new PHI nodes in block #36
Updating SSA information for statement _96 = std::basic_ostream<char>::put (_68, prephitmp_149);
Updating SSA information for statement std::basic_ostream<char>::flush (_96);
Registering new PHI nodes in block #31
Updating SSA information for statement std::__throw_bad_cast ();
Registering new PHI nodes in block #37
Updating SSA information for statement OutputSet::Clear (outputs_69(D));
Updating SSA information for statement OutputSet::AddRange (outputs_69(D), out_port_8, vcBegin_99, vcEnd_102, 0);
Updating SSA information for statement return;

DFA Statistics for void dim_order_pni_mesh(const Router*, const Flit*, int, OutputSet*, bool)

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                            179       1432b
DEF operands                             73        584b
VUSE operands                            71        568b
VDEF operands                            33        264b
PHI nodes                                20       2080b
PHI arguments                            54       2592b
---------------------------------------------------------
Total memory used by DFA/SSA data                 7520b
---------------------------------------------------------

Average number of arguments per PHI node: 2.7 (max: 5)


Hash table statistics:
    var_infos:   size 61, 1 elements, 0.000000 collision/search ratio


Symbols to be put in SSA form
{ D.50523 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 45
Number of blocks to update: 44 ( 98%)
Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44


Creating dr for Cross_BB_scalar_dependence.529[0]
analyze_innermost: success.
	base_address: &Cross_BB_scalar_dependence.529
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: Cross_BB_scalar_dependence.529
	Access function 0: 0

Updating SSA:
Registering new PHI nodes in block #0
Registering new PHI nodes in block #2
Registering new PHI nodes in block #3
Updating SSA information for statement _14 = f_13(D)->dest;
Updating SSA information for statement _72 = MEM[(int *)r_15(D) + 96B];
Updating SSA information for statement out_port_16 = dor_next_mesh (_72, _14, 0);
Registering new PHI nodes in block #4
Updating SSA information for statement _19 = f_13(D)->type;
Registering new PHI nodes in block #5
Updating SSA information for statement vcBegin_20 = gReadReqBeginVC;
Updating SSA information for statement vcEnd_21 = gReadReqEndVC;
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Updating SSA information for statement vcBegin_22 = gWriteReqBeginVC;
Updating SSA information for statement vcEnd_23 = gWriteReqEndVC;
Registering new PHI nodes in block #8
Registering new PHI nodes in block #9
Updating SSA information for statement vcBegin_24 = gReadReplyBeginVC;
Updating SSA information for statement vcEnd_25 = gReadReplyEndVC;
Registering new PHI nodes in block #10
Updating SSA information for statement gNumVCs.41_17 = gNumVCs;
Registering new PHI nodes in block #11
Registering new PHI nodes in block #12
Updating SSA information for statement vcBegin_26 = gWriteReplyBeginVC;
Updating SSA information for statement vcEnd_27 = gWriteReplyEndVC;
Registering new PHI nodes in block #13
Registering new PHI nodes in block #44
Updating SSA information for statement _28 = f_13(D)->vc;
Registering new PHI nodes in block #14
Registering new PHI nodes in block #38
Updating SSA information for statement next_coord_31 = f_13(D)->dest;
Registering new PHI nodes in block #39
Updating SSA information for statement pretmp_150 = gK;
Registering new PHI nodes in block #15
Updating SSA information for statement __assert_fail ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 750, &__PRETTY_FUNCTION__);
Registering new PHI nodes in block #16
Registering new PHI nodes in block #17
Updating SSA information for statement _73 = MEM[(int *)r_15(D) + 96B];
Updating SSA information for statement _30 = f_13(D)->dest;
Registering new PHI nodes in block #40
Updating SSA information for statement next_coord_127 = f_13(D)->dest;
Updating SSA information for statement pretmp_152 = gK;
Registering new PHI nodes in block #18
Registering new PHI nodes in block #42
Registering new PHI nodes in block #19
Updating SSA information for statement pretmp_151 = gK;
Registering new PHI nodes in block #20
Updating SSA information for statement pretmp_157 = gK;
Updating SSA information for statement phi_out_of_ssa.527[0] = next_coord_132;
Registering new PHI nodes in block #21
Updating SSA information for statement next_coord_94 = phi_out_of_ssa.527[0];
Updating SSA information for statement Close_Phi.528[0] = next_coord_34;
Updating SSA information for statement phi_out_of_ssa.527[0] = next_coord_34;
Registering new PHI nodes in block #22
Registering new PHI nodes in block #23
Updating SSA information for statement next_coord_156 = Close_Phi.528[0];
Updating SSA information for statement Cross_BB_scalar_dependence.529[0] = next_coord_156;
Registering new PHI nodes in block #45
Updating SSA information for statement next_coord_133 = Cross_BB_scalar_dependence.529[0];
Registering new PHI nodes in block #41
Registering new PHI nodes in block #24
Registering new PHI nodes in block #43
Registering new PHI nodes in block #26
Registering new PHI nodes in block #28
Registering new PHI nodes in block #27
Updating SSA information for statement __assert_fail ("vcs_per_dest > 0", "routefunc.cpp", 763, &__PRETTY_FUNCTION__);
Registering new PHI nodes in block #25
Updating SSA information for statement __assert_fail ("next_coord >= 0 && next_coord < gK", "routefunc.cpp", 761, &__PRETTY_FUNCTION__);
Registering new PHI nodes in block #29
Updating SSA information for statement _47 = f_13(D)->watch;
Registering new PHI nodes in block #30
Updating SSA information for statement _48 = f_13(D)->dest;
Updating SSA information for statement _49 = f_13(D)->id;
Updating SSA information for statement _51 = GetSimTime ();
Updating SSA information for statement gWatchOut.45_52 = gWatchOut;
Updating SSA information for statement _54 = std::basic_ostream<char>::operator<< (gWatchOut.45_52, _51);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_54, " | ", 3);
Updating SSA information for statement _55 = MEM[(long unsigned int *)r_15(D) + 48B];
Updating SSA information for statement _75 = MEM[(char * *)r_15(D) + 40B];
Updating SSA information for statement _76 = std::__ostream_insert<char, std::char_traits<char> > (_54, _75, _74);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_76, " | ", 3);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_76, "Adding VC range [", 17);
Updating SSA information for statement _57 = std::basic_ostream<char>::operator<< (_76, vcBegin_100);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_57, ",", 1);
Updating SSA information for statement _59 = std::basic_ostream<char>::operator<< (_57, vcEnd_103);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_59, "]", 1);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_59, " at output port ", 16);
Updating SSA information for statement _61 = std::basic_ostream<char>::operator<< (_59, out_port_8);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_61, " for flit ", 10);
Updating SSA information for statement _63 = std::basic_ostream<char>::operator<< (_61, _49);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_63, " (input port ", 13);
Updating SSA information for statement _66 = std::basic_ostream<char>::operator<< (_63, in_channel_64(D));
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_66, ", destination ", 14);
Updating SSA information for statement _68 = std::basic_ostream<char>::operator<< (_66, _48);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_68, ")", 1);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_68, ".", 1);
Updating SSA information for statement _90 = _68->_vptr.basic_ostream;
Updating SSA information for statement _91 = MEM[(long int *)_90 + -24B];
Updating SSA information for statement _89 = MEM[(const struct basic_ios *)_93]._M_ctype;
Registering new PHI nodes in block #32
Updating SSA information for statement _98 = MEM[(const struct ctype *)_89]._M_widen_ok;
Registering new PHI nodes in block #33
Updating SSA information for statement _101 = MEM[(const struct ctype *)_89]._M_widen[10];
Registering new PHI nodes in block #34
Updating SSA information for statement std::ctype<char>::_M_widen_init (_89);
Updating SSA information for statement _106 = MEM[(const struct ctype *)_89].D.20091._vptr.facet;
Updating SSA information for statement _107 = MEM[(int (*__vtbl_ptr_type) () *)_106 + 48B];
Registering new PHI nodes in block #35
Updating SSA information for statement _113 = OBJ_TYPE_REF(_107;_89->6) (_89, 10);
Registering new PHI nodes in block #36
Updating SSA information for statement _96 = std::basic_ostream<char>::put (_68, prephitmp_149);
Updating SSA information for statement std::basic_ostream<char>::flush (_96);
Registering new PHI nodes in block #31
Updating SSA information for statement std::__throw_bad_cast ();
Registering new PHI nodes in block #37
Updating SSA information for statement OutputSet::Clear (outputs_69(D));
Updating SSA information for statement OutputSet::AddRange (outputs_69(D), out_port_8, vcBegin_99, vcEnd_102, 0);
Updating SSA information for statement return;

DFA Statistics for void dim_order_pni_mesh(const Router*, const Flit*, int, OutputSet*, bool)

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                            181       1448b
DEF operands                             75        600b
VUSE operands                            73        584b
VDEF operands                            34        272b
PHI nodes                                20       2080b
PHI arguments                            54       2592b
---------------------------------------------------------
Total memory used by DFA/SSA data                 7576b
---------------------------------------------------------

Average number of arguments per PHI node: 2.7 (max: 5)


Hash table statistics:
    var_infos:   size 61, 1 elements, 0.000000 collision/search ratio


Symbols to be put in SSA form
{ D.50523 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 46
Number of blocks to update: 45 ( 98%)
Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45



ISL AST generated by ISL: 
{
  for (int c1 = 0; c1 < out_dim; c1 += 1)
    S_21(c1);
  S_23();
}


Removing basic block 50
basic block 50, loop depth 0
 pred:      
goto <bb 48>;
 succ:       48



Updating SSA:
Registering new PHI nodes in block #42
Registering new PHI nodes in block #19
Registering new PHI nodes in block #20
Registering new PHI nodes in block #47
Registering new PHI nodes in block #49
Registering new PHI nodes in block #21
Registering new PHI nodes in block #22
Registering new PHI nodes in block #23
Updating SSA information for statement Cross_BB_scalar_dependence.529[0] = next_coord_156;
Registering new PHI nodes in block #48
Registering new PHI nodes in block #46
Registering new PHI nodes in block #45
Updating SSA information for statement next_coord_133 = Cross_BB_scalar_dependence.529[0];
Registering new PHI nodes in block #41
Registering new PHI nodes in block #24

DFA Statistics for void dim_order_pni_mesh(const Router*, const Flit*, int, OutputSet*, bool)

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                            181       1448b
DEF operands                             75        600b
VUSE operands                            73        584b
VDEF operands                            34        272b
PHI nodes                                21       2184b
PHI arguments                            56       2688b
---------------------------------------------------------
Total memory used by DFA/SSA data                 7776b
---------------------------------------------------------

Average number of arguments per PHI node: 2.7 (max: 5)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_130 -> { .MEM_131 }
Incremental SSA update started at block: 42
Number of blocks in CFG: 51
Number of blocks to update: 6 ( 12%)
Affected blocks: 23 24 41 45 48 49


Applying pattern match.pd:491, generic-match.c:3721
Applying pattern match.pd:49, generic-match.c:3223

Updating SSA:
creating PHI node in block #52 for .MEM
creating PHI node in block #55 for .MEM
Registering new PHI nodes in block #0
Registering new PHI nodes in block #2
Registering new PHI nodes in block #3
Updating SSA information for statement _14 = f_13(D)->dest;
Updating SSA information for statement _72 = MEM[(int *)r_15(D) + 96B];
Updating SSA information for statement out_port_16 = dor_next_mesh (_72, _14, 0);
Registering new PHI nodes in block #4
Updating SSA information for statement _19 = f_13(D)->type;
Registering new PHI nodes in block #5
Updating SSA information for statement vcBegin_20 = gReadReqBeginVC;
Updating SSA information for statement vcEnd_21 = gReadReqEndVC;
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Updating SSA information for statement vcBegin_22 = gWriteReqBeginVC;
Updating SSA information for statement vcEnd_23 = gWriteReqEndVC;
Registering new PHI nodes in block #8
Registering new PHI nodes in block #9
Updating SSA information for statement vcBegin_24 = gReadReplyBeginVC;
Updating SSA information for statement vcEnd_25 = gReadReplyEndVC;
Registering new PHI nodes in block #10
Updating SSA information for statement gNumVCs.41_17 = gNumVCs;
Registering new PHI nodes in block #11
Registering new PHI nodes in block #12
Updating SSA information for statement vcBegin_26 = gWriteReplyBeginVC;
Updating SSA information for statement vcEnd_27 = gWriteReplyEndVC;
Registering new PHI nodes in block #13
Registering new PHI nodes in block #44
Updating SSA information for statement _28 = f_13(D)->vc;
Registering new PHI nodes in block #14
Registering new PHI nodes in block #38
Updating SSA information for statement next_coord_31 = f_13(D)->dest;
Registering new PHI nodes in block #39
Updating SSA information for statement pretmp_150 = gK;
Registering new PHI nodes in block #15
Updating SSA information for statement __assert_fail ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 750, &__PRETTY_FUNCTION__);
Registering new PHI nodes in block #16
Registering new PHI nodes in block #17
Updating SSA information for statement _73 = MEM[(int *)r_15(D) + 96B];
Updating SSA information for statement _30 = f_13(D)->dest;
Registering new PHI nodes in block #40
Updating SSA information for statement next_coord_127 = f_13(D)->dest;
Updating SSA information for statement pretmp_152 = gK;
Registering new PHI nodes in block #18
Registering new PHI nodes in block #42
Registering new PHI nodes in block #19
Updating SSA information for statement pretmp_151 = gK;
Registering new PHI nodes in block #20
Updating SSA information for statement pretmp_157 = gK;
Updating SSA information for statement phi_out_of_ssa.527[0] = next_coord_132;
Registering new PHI nodes in block #47
Registering new PHI nodes in block #51
Registering new PHI nodes in block #57
Registering new PHI nodes in block #55
Registering new PHI nodes in block #60
Updating SSA information for statement next_coord_114 = phi_out_of_ssa.527[0];
Updating SSA information for statement next_coord_112 = next_coord_114 / pretmp_157;
Updating SSA information for statement Close_Phi.528[0] = next_coord_112;
Updating SSA information for statement phi_out_of_ssa.527[0] = next_coord_112;
Registering new PHI nodes in block #58
Registering new PHI nodes in block #56
Registering new PHI nodes in block #59
Registering new PHI nodes in block #53
Registering new PHI nodes in block #54
Registering new PHI nodes in block #52
Registering new PHI nodes in block #49
Registering new PHI nodes in block #21
Updating SSA information for statement next_coord_94 = phi_out_of_ssa.527[0];
Updating SSA information for statement # DEBUG next_coord => next_coord_94
Updating SSA information for statement next_coord_34 = next_coord_94 / pretmp_157;
Updating SSA information for statement Close_Phi.528[0] = next_coord_34;
Updating SSA information for statement phi_out_of_ssa.527[0] = next_coord_34;
Updating SSA information for statement # DEBUG next_coord => next_coord_34
Updating SSA information for statement # DEBUG next_coord => next_coord_34
Registering new PHI nodes in block #22
Registering new PHI nodes in block #23
Updating SSA information for statement next_coord_156 = Close_Phi.528[0];
Updating SSA information for statement Cross_BB_scalar_dependence.529[0] = next_coord_156;
Registering new PHI nodes in block #48
Registering new PHI nodes in block #46
Registering new PHI nodes in block #45
Updating SSA information for statement next_coord_133 = Cross_BB_scalar_dependence.529[0];
Registering new PHI nodes in block #41
Registering new PHI nodes in block #24
Registering new PHI nodes in block #43
Registering new PHI nodes in block #26
Registering new PHI nodes in block #28
Registering new PHI nodes in block #27
Updating SSA information for statement __assert_fail ("vcs_per_dest > 0", "routefunc.cpp", 763, &__PRETTY_FUNCTION__);
Registering new PHI nodes in block #25
Updating SSA information for statement __assert_fail ("next_coord >= 0 && next_coord < gK", "routefunc.cpp", 761, &__PRETTY_FUNCTION__);
Registering new PHI nodes in block #29
Updating SSA information for statement _47 = f_13(D)->watch;
Registering new PHI nodes in block #30
Updating SSA information for statement _48 = f_13(D)->dest;
Updating SSA information for statement _49 = f_13(D)->id;
Updating SSA information for statement _51 = GetSimTime ();
Updating SSA information for statement gWatchOut.45_52 = gWatchOut;
Updating SSA information for statement _54 = std::basic_ostream<char>::operator<< (gWatchOut.45_52, _51);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_54, " | ", 3);
Updating SSA information for statement _55 = MEM[(long unsigned int *)r_15(D) + 48B];
Updating SSA information for statement _75 = MEM[(char * *)r_15(D) + 40B];
Updating SSA information for statement _76 = std::__ostream_insert<char, std::char_traits<char> > (_54, _75, _74);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_76, " | ", 3);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_76, "Adding VC range [", 17);
Updating SSA information for statement _57 = std::basic_ostream<char>::operator<< (_76, vcBegin_100);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_57, ",", 1);
Updating SSA information for statement _59 = std::basic_ostream<char>::operator<< (_57, vcEnd_103);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_59, "]", 1);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_59, " at output port ", 16);
Updating SSA information for statement _61 = std::basic_ostream<char>::operator<< (_59, out_port_8);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_61, " for flit ", 10);
Updating SSA information for statement _63 = std::basic_ostream<char>::operator<< (_61, _49);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_63, " (input port ", 13);
Updating SSA information for statement _66 = std::basic_ostream<char>::operator<< (_63, in_channel_64(D));
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_66, ", destination ", 14);
Updating SSA information for statement _68 = std::basic_ostream<char>::operator<< (_66, _48);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_68, ")", 1);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_68, ".", 1);
Updating SSA information for statement _90 = _68->_vptr.basic_ostream;
Updating SSA information for statement _91 = MEM[(long int *)_90 + -24B];
Updating SSA information for statement _89 = MEM[(const struct basic_ios *)_93]._M_ctype;
Registering new PHI nodes in block #32
Updating SSA information for statement _98 = MEM[(const struct ctype *)_89]._M_widen_ok;
Registering new PHI nodes in block #33
Updating SSA information for statement _101 = MEM[(const struct ctype *)_89]._M_widen[10];
Registering new PHI nodes in block #34
Updating SSA information for statement std::ctype<char>::_M_widen_init (_89);
Updating SSA information for statement _106 = MEM[(const struct ctype *)_89].D.20091._vptr.facet;
Updating SSA information for statement _107 = MEM[(int (*__vtbl_ptr_type) () *)_106 + 48B];
Registering new PHI nodes in block #35
Updating SSA information for statement _113 = OBJ_TYPE_REF(_107;_89->6) (_89, 10);
Registering new PHI nodes in block #36
Updating SSA information for statement _96 = std::basic_ostream<char>::put (_68, prephitmp_149);
Updating SSA information for statement std::basic_ostream<char>::flush (_96);
Registering new PHI nodes in block #31
Updating SSA information for statement std::__throw_bad_cast ();
Registering new PHI nodes in block #37
Updating SSA information for statement OutputSet::Clear (outputs_69(D));
Updating SSA information for statement OutputSet::AddRange (outputs_69(D), out_port_8, vcBegin_99, vcEnd_102, 0);
Updating SSA information for statement return;

DFA Statistics for void dim_order_pni_mesh(const Router*, const Flit*, int, OutputSet*, bool)

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                            192       1536b
DEF operands                             81        648b
VUSE operands                            76        608b
VDEF operands                            36        288b
PHI nodes                                24       2496b
PHI arguments                            62       2976b
---------------------------------------------------------
Total memory used by DFA/SSA data                 8552b
---------------------------------------------------------

Average number of arguments per PHI node: 2.6 (max: 5)


Hash table statistics:
    var_infos:   size 61, 1 elements, 0.000000 collision/search ratio


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_109 -> { .MEM_143 }
.MEM_110 -> { .MEM_144 }
next_coord_112 -> { next_coord_34 }
next_coord_114 -> { next_coord_94 }

Symbols to be put in SSA form
{ D.50523 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 61
Number of blocks to update: 59 ( 97%)
Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 51 52 53 54 55 56 57 58 59 60



Updating SSA:
Registering new PHI nodes in block #0
Registering new PHI nodes in block #2
Registering new PHI nodes in block #3
Updating SSA information for statement _14 = f_13(D)->dest;
Updating SSA information for statement _72 = MEM[(int *)r_15(D) + 96B];
Updating SSA information for statement out_port_16 = dor_next_mesh (_72, _14, 0);
Registering new PHI nodes in block #4
Updating SSA information for statement _19 = f_13(D)->type;
Registering new PHI nodes in block #5
Updating SSA information for statement vcBegin_20 = gReadReqBeginVC;
Updating SSA information for statement vcEnd_21 = gReadReqEndVC;
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Updating SSA information for statement vcBegin_22 = gWriteReqBeginVC;
Updating SSA information for statement vcEnd_23 = gWriteReqEndVC;
Registering new PHI nodes in block #8
Registering new PHI nodes in block #9
Updating SSA information for statement vcBegin_24 = gReadReplyBeginVC;
Updating SSA information for statement vcEnd_25 = gReadReplyEndVC;
Registering new PHI nodes in block #10
Updating SSA information for statement gNumVCs.41_17 = gNumVCs;
Registering new PHI nodes in block #11
Registering new PHI nodes in block #12
Updating SSA information for statement vcBegin_26 = gWriteReplyBeginVC;
Updating SSA information for statement vcEnd_27 = gWriteReplyEndVC;
Registering new PHI nodes in block #13
Registering new PHI nodes in block #44
Updating SSA information for statement _28 = f_13(D)->vc;
Registering new PHI nodes in block #14
Registering new PHI nodes in block #38
Updating SSA information for statement next_coord_31 = f_13(D)->dest;
Registering new PHI nodes in block #39
Updating SSA information for statement pretmp_150 = gK;
Registering new PHI nodes in block #15
Updating SSA information for statement __assert_fail ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 750, &__PRETTY_FUNCTION__);
Registering new PHI nodes in block #16
Registering new PHI nodes in block #17
Updating SSA information for statement _73 = MEM[(int *)r_15(D) + 96B];
Updating SSA information for statement _30 = f_13(D)->dest;
Registering new PHI nodes in block #40
Updating SSA information for statement next_coord_127 = f_13(D)->dest;
Updating SSA information for statement pretmp_152 = gK;
Registering new PHI nodes in block #18
Registering new PHI nodes in block #42
Registering new PHI nodes in block #19
Updating SSA information for statement pretmp_151 = gK;
Registering new PHI nodes in block #20
Updating SSA information for statement pretmp_157 = gK;
Updating SSA information for statement phi_out_of_ssa.527[0] = next_coord_132;
Registering new PHI nodes in block #47
Registering new PHI nodes in block #51
Registering new PHI nodes in block #57
Registering new PHI nodes in block #55
Registering new PHI nodes in block #60
Updating SSA information for statement next_coord_114 = phi_out_of_ssa.527[0];
Updating SSA information for statement Close_Phi.528[0] = next_coord_112;
Updating SSA information for statement phi_out_of_ssa.527[0] = next_coord_112;
Registering new PHI nodes in block #58
Registering new PHI nodes in block #56
Registering new PHI nodes in block #59
Registering new PHI nodes in block #53
Registering new PHI nodes in block #54
Registering new PHI nodes in block #52
Registering new PHI nodes in block #61
Updating SSA information for statement next_coord_7 = Close_Phi.528[0];
Updating SSA information for statement Cross_BB_scalar_dependence.529[0] = next_coord_7;
Registering new PHI nodes in block #49
Registering new PHI nodes in block #21
Updating SSA information for statement next_coord_94 = phi_out_of_ssa.527[0];
Updating SSA information for statement Close_Phi.528[0] = next_coord_34;
Updating SSA information for statement phi_out_of_ssa.527[0] = next_coord_34;
Registering new PHI nodes in block #22
Registering new PHI nodes in block #23
Updating SSA information for statement next_coord_156 = Close_Phi.528[0];
Updating SSA information for statement Cross_BB_scalar_dependence.529[0] = next_coord_156;
Registering new PHI nodes in block #48
Registering new PHI nodes in block #46
Registering new PHI nodes in block #45
Updating SSA information for statement next_coord_133 = Cross_BB_scalar_dependence.529[0];
Registering new PHI nodes in block #41
Registering new PHI nodes in block #24
Registering new PHI nodes in block #43
Registering new PHI nodes in block #26
Registering new PHI nodes in block #28
Registering new PHI nodes in block #27
Updating SSA information for statement __assert_fail ("vcs_per_dest > 0", "routefunc.cpp", 763, &__PRETTY_FUNCTION__);
Registering new PHI nodes in block #25
Updating SSA information for statement __assert_fail ("next_coord >= 0 && next_coord < gK", "routefunc.cpp", 761, &__PRETTY_FUNCTION__);
Registering new PHI nodes in block #29
Updating SSA information for statement _47 = f_13(D)->watch;
Registering new PHI nodes in block #30
Updating SSA information for statement _48 = f_13(D)->dest;
Updating SSA information for statement _49 = f_13(D)->id;
Updating SSA information for statement _51 = GetSimTime ();
Updating SSA information for statement gWatchOut.45_52 = gWatchOut;
Updating SSA information for statement _54 = std::basic_ostream<char>::operator<< (gWatchOut.45_52, _51);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_54, " | ", 3);
Updating SSA information for statement _55 = MEM[(long unsigned int *)r_15(D) + 48B];
Updating SSA information for statement _75 = MEM[(char * *)r_15(D) + 40B];
Updating SSA information for statement _76 = std::__ostream_insert<char, std::char_traits<char> > (_54, _75, _74);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_76, " | ", 3);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_76, "Adding VC range [", 17);
Updating SSA information for statement _57 = std::basic_ostream<char>::operator<< (_76, vcBegin_100);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_57, ",", 1);
Updating SSA information for statement _59 = std::basic_ostream<char>::operator<< (_57, vcEnd_103);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_59, "]", 1);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_59, " at output port ", 16);
Updating SSA information for statement _61 = std::basic_ostream<char>::operator<< (_59, out_port_8);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_61, " for flit ", 10);
Updating SSA information for statement _63 = std::basic_ostream<char>::operator<< (_61, _49);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_63, " (input port ", 13);
Updating SSA information for statement _66 = std::basic_ostream<char>::operator<< (_63, in_channel_64(D));
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_66, ", destination ", 14);
Updating SSA information for statement _68 = std::basic_ostream<char>::operator<< (_66, _48);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_68, ")", 1);
Updating SSA information for statement std::__ostream_insert<char, std::char_traits<char> > (_68, ".", 1);
Updating SSA information for statement _90 = _68->_vptr.basic_ostream;
Updating SSA information for statement _91 = MEM[(long int *)_90 + -24B];
Updating SSA information for statement _89 = MEM[(const struct basic_ios *)_93]._M_ctype;
Registering new PHI nodes in block #32
Updating SSA information for statement _98 = MEM[(const struct ctype *)_89]._M_widen_ok;
Registering new PHI nodes in block #33
Updating SSA information for statement _101 = MEM[(const struct ctype *)_89]._M_widen[10];
Registering new PHI nodes in block #34
Updating SSA information for statement std::ctype<char>::_M_widen_init (_89);
Updating SSA information for statement _106 = MEM[(const struct ctype *)_89].D.20091._vptr.facet;
Updating SSA information for statement _107 = MEM[(int (*__vtbl_ptr_type) () *)_106 + 48B];
Registering new PHI nodes in block #35
Updating SSA information for statement _113 = OBJ_TYPE_REF(_107;_89->6) (_89, 10);
Registering new PHI nodes in block #36
Updating SSA information for statement _96 = std::basic_ostream<char>::put (_68, prephitmp_149);
Updating SSA information for statement std::basic_ostream<char>::flush (_96);
Registering new PHI nodes in block #31
Updating SSA information for statement std::__throw_bad_cast ();
Registering new PHI nodes in block #37
Updating SSA information for statement OutputSet::Clear (outputs_69(D));
Updating SSA information for statement OutputSet::AddRange (outputs_69(D), out_port_8, vcBegin_99, vcEnd_102, 0);
Updating SSA information for statement return;

DFA Statistics for void dim_order_pni_mesh(const Router*, const Flit*, int, OutputSet*, bool)

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                            193       1544b
DEF operands                             82        656b
VUSE operands                            78        624b
VDEF operands                            37        296b
PHI nodes                                24       2496b
PHI arguments                            62       2976b
---------------------------------------------------------
Total memory used by DFA/SSA data                 8592b
---------------------------------------------------------

Average number of arguments per PHI node: 2.6 (max: 5)


Hash table statistics:
    var_infos:   size 61, 1 elements, 0.000000 collision/search ratio


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_5 -> { .MEM_131 }
next_coord_7 -> { next_coord_156 }

Symbols to be put in SSA form
{ D.50523 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 62
Number of blocks to update: 60 ( 97%)
Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 51 52 53 54 55 56 57 58 59 60 61



0 loops carried no dependency.
Merging blocks 13 and 44
Merging blocks 18 and 42
Merging blocks 20 and 47
Removing basic block 41
basic block 41, loop depth 0
 pred:      
 succ:       24


Removing basic block 46
basic block 46, loop depth 0
 pred:      
goto <bb 45>;
 succ:       45


Merging blocks 48 and 45
Removing basic block 49
basic block 49, loop depth 0
 pred:      
 succ:       48


Merging blocks 52 and 61
Removing basic block 53
basic block 53, loop depth 0
 pred:      
 succ:       52


Removing basic block 54
basic block 54, loop depth 0
 pred:      
goto <bb 52>;
 succ:       52


Merging blocks 55 and 60
Removing basic block 59
basic block 59, loop depth 0
 pred:      
 succ:       52


Removing basic block 22
basic block 22, loop depth 1
 pred:       21
goto <bb 21>;
 succ:       21


Removing basic block 23
basic block 23, loop depth 0
 pred:       21
next_coord_156 = Close_Phi.528[0];
Cross_BB_scalar_dependence.529[0] = next_coord_156;
goto <bb 48>;
 succ:       48


Removing basic block 21
basic block 21, loop depth 1
 pred:       20
# d_115 = PHI <0(20)>
next_coord_94 = phi_out_of_ssa.527[0];
# DEBUG d => d_115
# DEBUG next_coord => next_coord_94
next_coord_34 = next_coord_94 / pretmp_157;
Close_Phi.528[0] = next_coord_34;
phi_out_of_ssa.527[0] = next_coord_34;
# DEBUG next_coord => next_coord_34
d_35 = d_115 + 1;
# DEBUG d => d_35
# DEBUG d => d_35
# DEBUG next_coord => next_coord_34
if (out_dim_32 <= d_35)
 succ:      


Merging blocks 20 and 51
Merging blocks 52 and 48
Merging blocks 55 and 58
fix_loop_structure: removing loop 1
Analyzing # of iterations of loop 2
  exit condition [0, + , 1](no_overflow) < (signed long) out_dim_32 + -1
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if out_dim_32 <= 0
    # of iterations (unsigned long) ((signed long) out_dim_32 + -1), bounded by 9223372036854775806
Analyzing # of iterations of loop 2
  exit condition [0, + , 1](no_overflow) < (signed long) out_dim_32 + -1
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if out_dim_32 <= 0
    # of iterations (unsigned long) ((signed long) out_dim_32 + -1), bounded by 9223372036854775806
Analyzing # of iterations of loop 2
  exit condition [0, + , 1](no_overflow) < (signed long) out_dim_32 + -1
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if out_dim_32 <= 0
    # of iterations (unsigned long) ((signed long) out_dim_32 + -1), bounded by 9223372036854775806
Statement (exit)if (graphite_IV.530_121 < _124)
 is executed at most (unsigned long) ((signed long) out_dim_32 + -1) (bounded by 9223372036854775806) + 1 times in loop 2.
Induction variable (signed long) 1 + 1 * iteration does not wrap in statement graphite_IV.530_120 = graphite_IV.530_121 + 1;
 in loop 2.
Statement graphite_IV.530_120 = graphite_IV.530_121 + 1;
 is executed at most 9223372036854775806 (bounded by 9223372036854775806) + 1 times in loop 2.
Predictions for bb 2
  no prediction heuristics: 50.0%
  combined heuristics: 50.0%
1 edges in bb 3 predicted to even probabilities
Predictions for bb 4
  no prediction heuristics: 50.0%
  combined heuristics: 50.0%
1 edges in bb 5 predicted to even probabilities
Predictions for bb 6
  DS theory heuristics: 28.0%
  first match heuristics (ignored): 28.0%
  combined heuristics: 28.0%
  opcode values nonequal (on trees) heuristics: 28.0%
1 edges in bb 7 predicted to even probabilities
Predictions for bb 8
  DS theory heuristics: 28.0%
  first match heuristics (ignored): 28.0%
  combined heuristics: 28.0%
  opcode values nonequal (on trees) heuristics: 28.0%
1 edges in bb 9 predicted to even probabilities
Predictions for bb 10
  DS theory heuristics: 28.0%
  first match heuristics (ignored): 28.0%
  combined heuristics: 28.0%
  opcode values nonequal (on trees) heuristics: 28.0%
1 edges in bb 11 predicted to even probabilities
1 edges in bb 12 predicted to even probabilities
Predictions for bb 13
  no prediction heuristics: 50.0%
  combined heuristics: 50.0%
Predictions for bb 14
  DS theory heuristics (ignored): 0.0%
  first match heuristics: 0.0%
  combined heuristics: 0.0%
  call heuristics (ignored): 29.0%
  noreturn call heuristics: 0.0%
0 edges in bb 15 predicted to even probabilities
Predictions for bb 16
  no prediction heuristics: 50.0%
  combined heuristics: 50.0%
Predictions for bb 17
  DS theory heuristics: 72.0%
  first match heuristics (ignored): 72.0%
  combined heuristics: 72.0%
  opcode values nonequal (on trees) heuristics: 72.0%
Predictions for bb 18
  DS theory heuristics: 27.0%
  first match heuristics (ignored): 27.0%
  combined heuristics: 27.0%
  opcode values positive (on trees) heuristics: 27.0%
1 edges in bb 19 predicted to even probabilities
Predictions for bb 20
  no prediction heuristics: 50.0%
  combined heuristics: 50.0%
1 edges in bb 21 predicted to even probabilities
Predictions for bb 22
  DS theory heuristics (ignored): 91.0%
  first match heuristics: 91.0%
  combined heuristics: 91.0%
  loop exit heuristics: 91.0%
1 edges in bb 23 predicted to even probabilities
1 edges in bb 24 predicted to even probabilities
1 edges in bb 25 predicted to even probabilities
Predictions for bb 26
  DS theory heuristics (ignored): 0.0%
  first match heuristics: 0.0%
  combined heuristics: 0.0%
  call heuristics (ignored): 29.0%
  noreturn call heuristics: 0.0%
0 edges in bb 27 predicted to even probabilities
Predictions for bb 28
  DS theory heuristics (ignored): 0.0%
  first match heuristics: 0.0%
  combined heuristics: 0.0%
  opcode values positive (on trees) heuristics (ignored): 27.0%
  call heuristics (ignored): 29.0%
  noreturn call heuristics: 0.0%
0 edges in bb 29 predicted to even probabilities
Predictions for bb 30
  DS theory heuristics: 61.0%
  first match heuristics (ignored): 61.0%
  combined heuristics: 61.0%
  early return (on trees) heuristics: 61.0%
Predictions for bb 31
  DS theory heuristics: 39.0%
  first match heuristics (ignored): 29.0%
  combined heuristics: 39.0%
  early return (on trees) heuristics: 61.0%
  call heuristics: 29.0%
Predictions for bb 32
  DS theory heuristics (ignored): 0.0%
  first match heuristics: 0.0%
  combined heuristics: 0.0%
  pointer (on trees) heuristics (ignored): 15.0%
  call heuristics (ignored): 29.0%
  noreturn call heuristics: 0.0%
0 edges in bb 33 predicted to even probabilities
Predictions for bb 34
  DS theory heuristics: 71.0%
  first match heuristics (ignored): 71.0%
  combined heuristics: 71.0%
  call heuristics: 71.0%
1 edges in bb 35 predicted to even probabilities
Predictions for bb 36
  DS theory heuristics: 30.2%
  first match heuristics (ignored): 15.0%
  combined heuristics: 30.2%
  pointer (on trees) heuristics: 15.0%
  call heuristics: 71.0%
1 edges in bb 37 predicted to even probabilities
1 edges in bb 38 predicted to even probabilities
1 edges in bb 39 predicted to even probabilities
Predictions for bb 40
  no prediction heuristics: 50.0%
  combined heuristics: 50.0%
1 edges in bb 41 predicted to even probabilities
1 edges in bb 42 predicted to even probabilities
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_4 bb_3 })
  {
    <bb 2>:
    if (inject_11(D) != 0)
      goto <bb 4>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 })
  {
    <bb 3>:
    # VUSE <.MEM_12(D)>
    _14 = f_13(D)->dest;
    # VUSE <.MEM_12(D)>
    _72 = MEM[(int *)r_15(D) + 96B];
    # DEBUG D#14 => r_15(D)
    # DEBUG this => D#14
    # VUSE <.MEM_12(D)>
    out_port_16 = dor_next_mesh (_72, _14, 0);

  }
  bb_4 (preds = {bb_2 bb_3 }, succs = {bb_5 bb_6 })
  {
    <bb 4>:
    # out_port_8 = PHI <-1(2), out_port_16(3)>
    # DEBUG out_port => out_port_8
    # DEBUG vcBegin => 0
    # DEBUG D#201 => gNumVCs
    # DEBUG vcEnd => D#201 + -1
    # VUSE <.MEM_12(D)>
    _19 = f_13(D)->type;
    if (_19 == 0)
      goto <bb 5>;
    else
      goto <bb 6>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_13 })
  {
    <bb 5>:
    # VUSE <.MEM_12(D)>
    vcBegin_20 = gReadReqBeginVC;
    # DEBUG vcBegin => vcBegin_20
    # VUSE <.MEM_12(D)>
    vcEnd_21 = gReadReqEndVC;
    # DEBUG vcEnd => vcEnd_21
    goto <bb 13>;

  }
  bb_6 (preds = {bb_4 }, succs = {bb_7 bb_8 })
  {
    <bb 6>:
    if (_19 == 2)
      goto <bb 7>;
    else
      goto <bb 8>;

  }
  bb_7 (preds = {bb_6 }, succs = {bb_13 })
  {
    <bb 7>:
    # VUSE <.MEM_12(D)>
    vcBegin_22 = gWriteReqBeginVC;
    # DEBUG vcBegin => vcBegin_22
    # VUSE <.MEM_12(D)>
    vcEnd_23 = gWriteReqEndVC;
    # DEBUG vcEnd => vcEnd_23
    goto <bb 13>;

  }
  bb_8 (preds = {bb_6 }, succs = {bb_9 bb_10 })
  {
    <bb 8>:
    if (_19 == 1)
      goto <bb 9>;
    else
      goto <bb 10>;

  }
  bb_9 (preds = {bb_8 }, succs = {bb_13 })
  {
    <bb 9>:
    # VUSE <.MEM_12(D)>
    vcBegin_24 = gReadReplyBeginVC;
    # DEBUG vcBegin => vcBegin_24
    # VUSE <.MEM_12(D)>
    vcEnd_25 = gReadReplyEndVC;
    # DEBUG vcEnd => vcEnd_25
    goto <bb 13>;

  }
  bb_10 (preds = {bb_8 }, succs = {bb_12 bb_11 })
  {
    <bb 10>:
    # VUSE <.MEM_12(D)>
    gNumVCs.41_17 = gNumVCs;
    if (_19 == 3)
      goto <bb 12>;
    else
      goto <bb 11>;

  }
  bb_11 (preds = {bb_10 }, succs = {bb_13 })
  {
    <bb 11>:
    vcEnd_18 = gNumVCs.41_17 + -1;
    goto <bb 13>;

  }
  bb_12 (preds = {bb_10 }, succs = {bb_13 })
  {
    <bb 12>:
    # VUSE <.MEM_12(D)>
    vcBegin_26 = gWriteReplyBeginVC;
    # DEBUG vcBegin => vcBegin_26
    # VUSE <.MEM_12(D)>
    vcEnd_27 = gWriteReplyEndVC;
    # DEBUG vcEnd => vcEnd_27

  }
  bb_13 (preds = {bb_5 bb_7 bb_9 bb_11 bb_12 }, succs = {bb_14 bb_16 })
  {
    <bb 13>:
    # vcBegin_1 = PHI <vcBegin_20(5), vcBegin_22(7), vcBegin_24(9), 0(11), vcBegin_26(12)>
    # vcEnd_3 = PHI <vcEnd_21(5), vcEnd_23(7), vcEnd_25(9), vcEnd_18(11), vcEnd_27(12)>
    # DEBUG vcEnd => vcEnd_3
    # DEBUG vcBegin => vcBegin_1
    # VUSE <.MEM_12(D)>
    _28 = f_13(D)->vc;
    _139 = vcEnd_3 < _28;
    _140 = vcBegin_1 > _28;
    _97 = _139 | _140;
    if (_97 != 0)
      goto <bb 14>;
    else
      goto <bb 16>;

  }
  bb_14 (preds = {bb_13 }, succs = {bb_15 bb_40 })
  {
    <bb 14>:
    _9 = _28 >= 0;
    if (_9 >= inject_11(D))
      goto <bb 15>;
    else
      goto <bb 40>;

  }
  bb_15 (preds = {bb_14 }, succs = {})
  {
    <bb 15>:
    # .MEM_29 = VDEF <.MEM_12(D)>
    __assert_fail ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 750, &__PRETTY_FUNCTION__);

  }
  bb_16 (preds = {bb_13 }, succs = {bb_42 bb_17 })
  {
    <bb 16>:
    if (inject_11(D) != 0)
      goto <bb 42>;
    else
      goto <bb 17>;

  }
  bb_17 (preds = {bb_16 }, succs = {bb_18 bb_31 })
  {
    <bb 17>:
    # VUSE <.MEM_12(D)>
    _73 = MEM[(int *)r_15(D) + 96B];
    # DEBUG D#14 => r_15(D)
    # DEBUG this => D#14
    # VUSE <.MEM_12(D)>
    _30 = f_13(D)->dest;
    if (_30 != _73)
      goto <bb 18>;
    else
      goto <bb 31>;

  }
  bb_18 (preds = {bb_40 bb_17 }, succs = {bb_19 bb_20 })
  {
    <bb 18>:
    # next_coord_132 = PHI <next_coord_31(40), _30(17)>
    # DEBUG next_coord => next_coord_132
    out_dim_32 = out_port_8 / 2;
    # DEBUG out_dim => out_dim_32
    # DEBUG d => 0
    # DEBUG d => 0
    # DEBUG next_coord => next_coord_132
    if (out_dim_32 <= 0)
      goto <bb 19>;
    else
      goto <bb 20>;

  }
  bb_19 (preds = {bb_18 }, succs = {bb_25 })
  {
    <bb 19>:
    # VUSE <.MEM_12(D)>
    pretmp_151 = gK;
    goto <bb 25>;

  }
  bb_20 (preds = {bb_18 }, succs = {bb_21 bb_24 })
  {
    <bb 20>:
    # VUSE <.MEM_12(D)>
    pretmp_157 = gK;
    # .MEM_145 = VDEF <.MEM_12(D)>
    phi_out_of_ssa.527[0] = next_coord_132;
    _129 = out_dim_32 > 0;
    if (_129 != 0)
      goto <bb 21>;
    else
      goto <bb 24>;

  }
  bb_21 (preds = {bb_20 }, succs = {bb_22 })
  {
    <bb 21>:
    _128 = (signed long) out_dim_32;
    _124 = _128 + -1;

  }
  bb_24 (preds = {bb_22 bb_20 }, succs = {bb_25 })
  {
    <bb 24>:
    # .MEM_108 = PHI <.MEM_109(22), .MEM_145(20)>
    # VUSE <.MEM_108>
    next_coord_7 = Close_Phi.528[0];
    # .MEM_5 = VDEF <.MEM_108>
    Cross_BB_scalar_dependence.529[0] = next_coord_7;
    # VUSE <.MEM_5>
    next_coord_133 = Cross_BB_scalar_dependence.529[0];
    _134 = next_coord_133;

  }
  bb_25 (preds = {bb_19 bb_24 }, succs = {bb_26 })
  {
    <bb 25>:
    # next_coord_104 = PHI <next_coord_132(19), _134(24)>
    # prephitmp_126 = PHI <pretmp_151(19), pretmp_157(24)>
    # .MEM_155 = PHI <.MEM_12(D)(19), .MEM_5(24)>

  }
  bb_26 (preds = {bb_25 bb_41 bb_42 }, succs = {bb_27 bb_28 })
  {
    <bb 26>:
    # next_coord_6 = PHI <next_coord_104(25), next_coord_31(41), next_coord_127(42)>
    # prephitmp_153 = PHI <prephitmp_126(25), pretmp_150(41), pretmp_152(42)>
    # .MEM_146 = PHI <.MEM_155(25), .MEM_12(D)(41), .MEM_12(D)(42)>
    # DEBUG next_coord => next_coord_6
    next_coord_37 = next_coord_6 % prephitmp_153;
    # DEBUG next_coord => next_coord_37
    _136 = next_coord_37 >= prephitmp_153;
    _135 = next_coord_37 < 0;
    _137 = _135 | _136;
    if (_137 != 0)
      goto <bb 27>;
    else
      goto <bb 28>;

  }
  bb_27 (preds = {bb_26 }, succs = {})
  {
    <bb 27>:
    # .MEM_46 = VDEF <.MEM_146>
    __assert_fail ("next_coord >= 0 && next_coord < gK", "routefunc.cpp", 761, &__PRETTY_FUNCTION__);

  }
  bb_28 (preds = {bb_26 }, succs = {bb_29 bb_30 })
  {
    <bb 28>:
    _38 = vcEnd_3 - vcBegin_1;
    _39 = _38 + 1;
    vcs_per_dest_40 = _39 / prephitmp_153;
    # DEBUG vcs_per_dest => vcs_per_dest_40
    if (vcs_per_dest_40 <= 0)
      goto <bb 29>;
    else
      goto <bb 30>;

  }
  bb_29 (preds = {bb_28 }, succs = {})
  {
    <bb 29>:
    # .MEM_45 = VDEF <.MEM_146>
    __assert_fail ("vcs_per_dest > 0", "routefunc.cpp", 763, &__PRETTY_FUNCTION__);

  }
  bb_30 (preds = {bb_28 }, succs = {bb_31 bb_39 })
  {
    <bb 30>:
    _41 = next_coord_37 * vcs_per_dest_40;
    vcBegin_42 = vcBegin_1 + _41;
    # DEBUG vcBegin => vcBegin_42
    _43 = vcs_per_dest_40 + vcBegin_42;
    vcEnd_44 = _43 + -1;
    # DEBUG vcEnd => vcEnd_44
    # DEBUG vcEnd => vcEnd_44
    # DEBUG vcBegin => vcBegin_42
    if (inject_11(D) != 0)
      goto <bb 39>;
    else
      goto <bb 31>;

  }
  bb_31 (preds = {bb_30 bb_17 }, succs = {bb_32 bb_39 })
  {
    <bb 31>:
    # vcBegin_100 = PHI <vcBegin_42(30), vcBegin_1(17)>
    # vcEnd_103 = PHI <vcEnd_44(30), vcEnd_3(17)>
    # .MEM_154 = PHI <.MEM_146(30), .MEM_12(D)(17)>
    # DEBUG vcEnd => vcEnd_103
    # DEBUG vcBegin => vcBegin_100
    # VUSE <.MEM_154>
    _47 = f_13(D)->watch;
    if (_47 != 0)
      goto <bb 32>;
    else
      goto <bb 39>;

  }
  bb_32 (preds = {bb_31 }, succs = {bb_33 bb_34 })
  {
    <bb 32>:
    # VUSE <.MEM_154>
    _48 = f_13(D)->dest;
    # VUSE <.MEM_154>
    _49 = f_13(D)->id;
    # DEBUG D#17 => &r_15(D)->D.42039.D.32226
    # DEBUG this => D#17
    # .MEM_50 = VDEF <.MEM_154>
    _51 = GetSimTime ();
    # VUSE <.MEM_50>
    gWatchOut.45_52 = gWatchOut;
    # .MEM_53 = VDEF <.MEM_50>
    _54 = std::basic_ostream<char>::operator<< (gWatchOut.45_52, _51);
    # DEBUG __out => _54
    # DEBUG __s => " | "
    # DEBUG __s => " | "
    # .MEM_77 = VDEF <.MEM_53>
    std::__ostream_insert<char, std::char_traits<char> > (_54, " | ", 3);
    # DEBUG __os => _54
    # DEBUG __str => NULL
    # VUSE <.MEM_77>
    _55 = MEM[(long unsigned int *)r_15(D) + 48B];
    # DEBUG this => D#1
    _74 = (long int) _55;
    # DEBUG this => NULL
    # VUSE <.MEM_77>
    _75 = MEM[(char * *)r_15(D) + 40B];
    # DEBUG this => D#3
    # .MEM_78 = VDEF <.MEM_77>
    _76 = std::__ostream_insert<char, std::char_traits<char> > (_54, _75, _74);
    # DEBUG __out => _76
    # DEBUG __s => " | "
    # DEBUG __s => " | "
    # .MEM_79 = VDEF <.MEM_78>
    std::__ostream_insert<char, std::char_traits<char> > (_76, " | ", 3);
    # DEBUG __out => _76
    # DEBUG __s => "Adding VC range ["
    # DEBUG __s => "Adding VC range ["
    # .MEM_80 = VDEF <.MEM_79>
    std::__ostream_insert<char, std::char_traits<char> > (_76, "Adding VC range [", 17);
    # .MEM_56 = VDEF <.MEM_80>
    _57 = std::basic_ostream<char>::operator<< (_76, vcBegin_100);
    # DEBUG __out => _57
    # DEBUG __s => ","
    # DEBUG __s => ","
    # .MEM_81 = VDEF <.MEM_56>
    std::__ostream_insert<char, std::char_traits<char> > (_57, ",", 1);
    # .MEM_58 = VDEF <.MEM_81>
    _59 = std::basic_ostream<char>::operator<< (_57, vcEnd_103);
    # DEBUG __out => _59
    # DEBUG __s => "]"
    # DEBUG __s => "]"
    # .MEM_82 = VDEF <.MEM_58>
    std::__ostream_insert<char, std::char_traits<char> > (_59, "]", 1);
    # DEBUG __out => _59
    # DEBUG __s => " at output port "
    # DEBUG __s => " at output port "
    # .MEM_83 = VDEF <.MEM_82>
    std::__ostream_insert<char, std::char_traits<char> > (_59, " at output port ", 16);
    # .MEM_60 = VDEF <.MEM_83>
    _61 = std::basic_ostream<char>::operator<< (_59, out_port_8);
    # DEBUG __out => _61
    # DEBUG __s => " for flit "
    # DEBUG __s => " for flit "
    # .MEM_84 = VDEF <.MEM_60>
    std::__ostream_insert<char, std::char_traits<char> > (_61, " for flit ", 10);
    # .MEM_62 = VDEF <.MEM_84>
    _63 = std::basic_ostream<char>::operator<< (_61, _49);
    # DEBUG __out => _63
    # DEBUG __s => " (input port "
    # DEBUG __s => " (input port "
    # .MEM_85 = VDEF <.MEM_62>
    std::__ostream_insert<char, std::char_traits<char> > (_63, " (input port ", 13);
    # .MEM_65 = VDEF <.MEM_85>
    _66 = std::basic_ostream<char>::operator<< (_63, in_channel_64(D));
    # DEBUG __out => _66
    # DEBUG __s => ", destination "
    # DEBUG __s => ", destination "
    # .MEM_86 = VDEF <.MEM_65>
    std::__ostream_insert<char, std::char_traits<char> > (_66, ", destination ", 14);
    # .MEM_67 = VDEF <.MEM_86>
    _68 = std::basic_ostream<char>::operator<< (_66, _48);
    # DEBUG __out => _68
    # DEBUG __s => ")"
    # DEBUG __s => ")"
    # .MEM_87 = VDEF <.MEM_67>
    std::__ostream_insert<char, std::char_traits<char> > (_68, ")", 1);
    # DEBUG __out => _68
    # DEBUG __s => "."
    # DEBUG __s => "."
    # .MEM_88 = VDEF <.MEM_87>
    std::__ostream_insert<char, std::char_traits<char> > (_68, ".", 1);
    # DEBUG this => _68
    # DEBUG __pf => endl
    # DEBUG __os => _68
    # VUSE <.MEM_88>
    _90 = _68->_vptr.basic_ostream;
    # VUSE <.MEM_88>
    _91 = MEM[(long int *)_90 + -24B];
    _92 = (sizetype) _91;
    _93 = _68 + _92;
    # DEBUG this => _93
    # DEBUG __c => 10
    # VUSE <.MEM_88>
    _89 = MEM[(const struct basic_ios *)_93]._M_ctype;
    # DEBUG __f => _89
    if (_89 == 0B)
      goto <bb 33>;
    else
      goto <bb 34>;

  }
  bb_33 (preds = {bb_32 }, succs = {})
  {
    <bb 33>:
    # .MEM_125 = VDEF <.MEM_88>
    std::__throw_bad_cast ();

  }
  bb_34 (preds = {bb_32 }, succs = {bb_35 bb_36 })
  {
    <bb 34>:
    # DEBUG this => _89
    # DEBUG __c => 10
    # VUSE <.MEM_88>
    _98 = MEM[(const struct ctype *)_89]._M_widen_ok;
    if (_98 != 0)
      goto <bb 35>;
    else
      goto <bb 36>;

  }
  bb_35 (preds = {bb_34 }, succs = {bb_38 })
  {
    <bb 35>:
    # VUSE <.MEM_88>
    _101 = MEM[(const struct ctype *)_89]._M_widen[10];
    pretmp_147 = (int) _101;
    goto <bb 38>;

  }
  bb_36 (preds = {bb_34 }, succs = {bb_38 bb_37 })
  {
    <bb 36>:
    # DEBUG this => _89
    # DEBUG __c => 10
    # .MEM_117 = VDEF <.MEM_88>
    std::ctype<char>::_M_widen_init (_89);
    # VUSE <.MEM_117>
    _106 = MEM[(const struct ctype *)_89].D.20091._vptr.facet;
    # VUSE <.MEM_117>
    _107 = MEM[(int (*__vtbl_ptr_type) () *)_106 + 48B];
    PROF_111 = [obj_type_ref] OBJ_TYPE_REF(_107;(const struct ctype)_89->6);
    if (PROF_111 == do_widen)
      goto <bb 38>;
    else
      goto <bb 37>;

  }
  bb_37 (preds = {bb_36 }, succs = {bb_38 })
  {
    <bb 37>:
    # .MEM_118 = VDEF <.MEM_117>
    _113 = OBJ_TYPE_REF(_107;(const struct ctype)_89->6) (_89, 10);
    pretmp_148 = (int) _113;

  }
  bb_38 (preds = {bb_35 bb_36 bb_37 }, succs = {bb_39 })
  {
    <bb 38>:
    # .MEM_116 = PHI <.MEM_88(35), .MEM_117(36), .MEM_118(37)>
    # prephitmp_149 = PHI <pretmp_147(35), 10(36), pretmp_148(37)>
    # .MEM_122 = VDEF <.MEM_116>
    _96 = std::basic_ostream<char>::put (_68, prephitmp_149);
    # DEBUG __os => _96
    # .MEM_123 = VDEF <.MEM_122>
    std::basic_ostream<char>::flush (_96);

  }
  bb_39 (preds = {bb_30 bb_31 bb_38 }, succs = {bb_1 })
  {
    <bb 39>:
    # .MEM_10 = PHI <.MEM_146(30), .MEM_154(31), .MEM_123(38)>
    # vcBegin_99 = PHI <vcBegin_42(30), vcBegin_100(31), vcBegin_100(38)>
    # vcEnd_102 = PHI <vcEnd_44(30), vcEnd_103(31), vcEnd_103(38)>
    # .MEM_70 = VDEF <.MEM_10>
    OutputSet::Clear (outputs_69(D));
    # .MEM_71 = VDEF <.MEM_70>
    OutputSet::AddRange (outputs_69(D), out_port_8, vcBegin_99, vcEnd_102, 0);
    # VUSE <.MEM_71>
    return;

  }
  bb_40 (preds = {bb_14 }, succs = {bb_18 bb_41 })
  {
    <bb 40>:
    # VUSE <.MEM_12(D)>
    next_coord_31 = f_13(D)->dest;
    # DEBUG next_coord => next_coord_31
    if (inject_11(D) != 0)
      goto <bb 41>;
    else
      goto <bb 18>;

  }
  bb_41 (preds = {bb_40 }, succs = {bb_26 })
  {
    <bb 41>:
    # VUSE <.MEM_12(D)>
    pretmp_150 = gK;
    goto <bb 26>;

  }
  bb_42 (preds = {bb_16 }, succs = {bb_26 })
  {
    <bb 42>:
    # VUSE <.MEM_12(D)>
    next_coord_127 = f_13(D)->dest;
    # DEBUG next_coord => next_coord_127
    # VUSE <.MEM_12(D)>
    pretmp_152 = gK;
    goto <bb 26>;

  }
  loop_2 (header = 22, latch = 23, niter = (unsigned long) ((signed long) out_dim_32 + -1), upper_bound = 9223372036854775806)
  {
    bb_22 (preds = {bb_21 bb_23 }, succs = {bb_23 bb_24 })
    {
      <bb 22>:
      # graphite_IV.530_121 = PHI <0(21), graphite_IV.530_120(23)>
      # .MEM_105 = PHI <.MEM_145(21), .MEM_109(23)>
      # VUSE <.MEM_105>
      next_coord_114 = phi_out_of_ssa.527[0];
      # DEBUG d => NULL
      # DEBUG next_coord => NULL
      next_coord_112 = next_coord_114 / pretmp_157;
      # .MEM_110 = VDEF <.MEM_105>
      Close_Phi.528[0] = next_coord_112;
      # .MEM_109 = VDEF <.MEM_110>
      phi_out_of_ssa.527[0] = next_coord_112;
      # DEBUG next_coord => NULL
      # DEBUG d => NULL
      # DEBUG d => NULL
      # DEBUG next_coord => NULL
      graphite_IV.530_120 = graphite_IV.530_121 + 1;
      if (graphite_IV.530_121 < _124)
        goto <bb 23>;
      else
        goto <bb 24>;

    }
    bb_23 (preds = {bb_22 }, succs = {bb_22 })
    {
      <bb 23>:
      goto <bb 22>;

    }
  }
}

Pass statistics:
----------------

void dim_order_pni_mesh(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45551, const struct FlitD.29321 * fD.45552, intD.9 in_channelD.45553, struct OutputSetD.28230 * outputsD.45554, boolD.2757 injectD.45555)
{
  signed long graphite_IV.530D.55155;
  intD.9 Cross_BB_scalar_dependence.529D.55154[1];
  intD.9 D.55153;
  intD.9 D.55152;
  intD.9 D.55151;
  intD.9 Close_Phi.528D.55150[1];
  intD.9 phi_out_of_ssa.527D.55149[1];
  char_typeD.19944 D.55146;
  charD.10 __cD.55145;
  char_typeD.19944 D.55143;
  charD.10 __cD.55142;
  char_typeD.23023 D.55140;
  struct basic_ostreamD.11177 & D.55134;
  intD.9 dD.45564;
  intD.9 out_dimD.45563;
  intD.9 vcs_per_destD.45565;
  intD.9 next_coordD.45562;
  static const charD.10 _ZZ18dim_order_pni_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45561[75] = "void dim_order_pni_mesh(const Router*, const Flit*, int, OutputSet*, bool)";
  intD.9 vcEndD.45560;
  intD.9 vcBeginD.45559;
  intD.9 out_portD.45558;
  boolD.2757 _9;
  intD.9 _14;
  intD.9 gNumVCs.41_17;
  FlitTypeD.29324 _19;
  intD.9 _28;
  intD.9 _30;
  intD.9 _38;
  intD.9 _39;
  intD.9 _41;
  intD.9 _43;
  boolD.2757 _47;
  intD.9 _48;
  intD.9 _49;
  intD.9 _51;
  struct ostreamD.11178 * gWatchOut.45_52;
  struct basic_ostreamD.11177 & _54;
  const size_typeD.14319 _55;
  struct basic_ostreamD.11177 & _57;
  struct basic_ostreamD.11177 & _59;
  struct basic_ostreamD.11177 & _61;
  struct basic_ostreamD.11177 & _63;
  struct basic_ostreamD.11177 & _66;
  struct basic_ostreamD.11177 & _68;
  const intD.9 _72;
  const intD.9 _73;
  long intD.12 _74;
  charD.10 * const _75;
  struct basic_ostreamD.11177 & _76;
  const struct __ctype_typeD.23028 * _89;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _90;
  long intD.12 _91;
  sizetype _92;
  struct basic_iosD.11171 * _93;
  struct basic_ostreamD.11177 & _96;
  boolD.2757 _97;
  charD.10 _98;
  char_typeD.19944 _101;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _106;
  intD.9 (*__vtbl_ptr_typeD.2760) () _107;
  voidD.45 * PROF_111;
  char_typeD.19944 _113;
  signed long _124;
  intD.9 prephitmp_126;
  signed long _128;
  boolD.2757 _129;
  boolD.2757 _135;
  boolD.2757 _136;
  boolD.2757 _137;
  boolD.2757 _139;
  boolD.2757 _140;
  intD.9 pretmp_147;
  intD.9 pretmp_148;
  intD.9 prephitmp_149;
  intD.9 pretmp_150;
  intD.9 pretmp_151;
  intD.9 pretmp_152;
  intD.9 prephitmp_153;
  intD.9 pretmp_157;

;;   basic block 2, loop depth 0, count 0, freq 5736, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  if (inject_11(D) != 0)
    goto <bb 4>;
  else
    goto <bb 3>;
;;    succ:       4 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 2868, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  _14 = f_13(D)->destD.29342;
  # VUSE <.MEM_12(D)>
  _72 = MEM[(intD.9 *)r_15(D) + 96B];
  # DEBUG D#14ptD.0 => r_15(D)
  # DEBUG thisD.51027 => D#14ptD.0
  # VUSE <.MEM_12(D)>
  # USE = nonlocal escaped null 
  out_port_16 = _Z13dor_next_meshiibD.45450 (_72, _14, 0);
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 5736, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [100.0%]  (FALLTHRU,EXECUTABLE)
  # out_port_8 = PHI <-1(2), out_port_16(3)>
  # DEBUG out_portD.45558 => out_port_8
  # DEBUG vcBeginD.45559 => 0
  # DEBUG D#201ptD.0 => gNumVCsD.42077
  # DEBUG vcEndD.45560 => D#201ptD.0 + -1
  # VUSE <.MEM_12(D)>
  _19 = f_13(D)->typeD.29330;
  if (_19 == 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 2868, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  vcBegin_20 = gReadReqBeginVCD.42078;
  # DEBUG vcBeginD.45559 => vcBegin_20
  # VUSE <.MEM_12(D)>
  vcEnd_21 = gReadReqEndVCD.42079;
  # DEBUG vcEndD.45560 => vcEnd_21
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 2868, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_19 == 2)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 803, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  vcBegin_22 = gWriteReqBeginVCD.42080;
  # DEBUG vcBeginD.45559 => vcBegin_22
  # VUSE <.MEM_12(D)>
  vcEnd_23 = gWriteReqEndVCD.42081;
  # DEBUG vcEndD.45560 => vcEnd_23
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 2065, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_19 == 1)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 578, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  vcBegin_24 = gReadReplyBeginVCD.42082;
  # DEBUG vcBeginD.45559 => vcBegin_24
  # VUSE <.MEM_12(D)>
  vcEnd_25 = gReadReplyEndVCD.42083;
  # DEBUG vcEndD.45560 => vcEnd_25
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 1487, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  gNumVCs.41_17 = gNumVCsD.42077;
  if (_19 == 3)
    goto <bb 12>;
  else
    goto <bb 11>;
;;    succ:       12 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 1070, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  vcEnd_18 = gNumVCs.41_17 + -1;
  goto <bb 13>;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 416, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       10 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  vcBegin_26 = gWriteReplyBeginVCD.42084;
  # DEBUG vcBeginD.45559 => vcBegin_26
  # VUSE <.MEM_12(D)>
  vcEnd_27 = gWriteReplyEndVCD.42085;
  # DEBUG vcEndD.45560 => vcEnd_27
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 5736, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # vcBegin_1 = PHI <vcBegin_20(5), vcBegin_22(7), vcBegin_24(9), 0(11), vcBegin_26(12)>
  # vcEnd_3 = PHI <vcEnd_21(5), vcEnd_23(7), vcEnd_25(9), vcEnd_18(11), vcEnd_27(12)>
  # DEBUG vcEndD.45560 => vcEnd_3
  # DEBUG vcBeginD.45559 => vcBegin_1
  # VUSE <.MEM_12(D)>
  _28 = f_13(D)->vcD.29331;
  _139 = vcEnd_3 < _28;
  _140 = vcBegin_1 > _28;
  _97 = _139 | _140;
  if (_97 != 0)
    goto <bb 14>;
  else
    goto <bb 16>;
;;    succ:       14 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 2868, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  _9 = _28 >= 0;
  if (_9 >= inject_11(D))
    goto <bb 15>;
  else
    goto <bb 40>;
;;    succ:       15 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_29 = VDEF <.MEM_12(D)>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  __assert_failD.9858 ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 750, &_ZZ18dim_order_pni_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45561);
;;    succ:      

;;   basic block 16, loop depth 0, count 0, freq 2868, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       13 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (inject_11(D) != 0)
    goto <bb 42>;
  else
    goto <bb 17>;
;;    succ:       42 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 1434, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  _73 = MEM[(intD.9 *)r_15(D) + 96B];
  # DEBUG D#14ptD.0 => r_15(D)
  # DEBUG thisD.51030 => D#14ptD.0
  # VUSE <.MEM_12(D)>
  _30 = f_13(D)->destD.29342;
  if (_30 != _73)
    goto <bb 18>;
  else
    goto <bb 31>;
;;    succ:       18 [72.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [28.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 2466, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       40 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [72.0%]  (TRUE_VALUE,EXECUTABLE)
  # next_coord_132 = PHI <next_coord_31(40), _30(17)>
  # DEBUG next_coordD.45562 => next_coord_132
  # RANGE [-1073741824, 1073741823]
  out_dim_32 = out_port_8 / 2;
  # DEBUG out_dimD.45563 => out_dim_32
  # DEBUG dD.45564 => 0
  # DEBUG dD.45564 => 0
  # DEBUG next_coordD.45562 => next_coord_132
  if (out_dim_32 <= 0)
    goto <bb 19>;
  else
    goto <bb 20>;
;;    succ:       19 [27.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [73.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 666, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       18 [27.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  pretmp_151 = gKD.33726;
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 1800, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       18 [73.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  pretmp_157 = gKD.33726;
  # .MEM_145 = VDEF <.MEM_12(D)>
  phi_out_of_ssa.527D.55149[0] = next_coord_132;
  _129 = out_dim_32 > 0;
  if (_129 != 0)
    goto <bb 21>;
  else
    goto <bb 24>;
;;    succ:       21 [50.0%]  (TRUE_VALUE)
;;                24 [50.0%]  (FALSE_VALUE)

;;   basic block 21, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [50.0%]  (TRUE_VALUE)
  _128 = (signed long) out_dim_32;
  _124 = _128 + -1;
;;    succ:       22 [100.0%]  (FALLTHRU)

;;   basic block 22, loop depth 1, count 0, freq 10000, maybe hot
;;    prev block 21, next block 23, flags: (NEW)
;;    pred:       21 [100.0%]  (FALLTHRU)
;;                23 [100.0%]  (FALLTHRU,DFS_BACK)
  # graphite_IV.530_121 = PHI <0(21), graphite_IV.530_120(23)>
  # .MEM_105 = PHI <.MEM_145(21), .MEM_109(23)>
  # VUSE <.MEM_105>
  next_coord_114 = phi_out_of_ssa.527D.55149[0];
  # DEBUG dD.45564 => NULL
  # DEBUG next_coordD.45562 => NULL
  next_coord_112 = next_coord_114 / pretmp_157;
  # .MEM_110 = VDEF <.MEM_105>
  Close_Phi.528D.55150[0] = next_coord_112;
  # .MEM_109 = VDEF <.MEM_110>
  phi_out_of_ssa.527D.55149[0] = next_coord_112;
  # DEBUG next_coordD.45562 => NULL
  # DEBUG dD.45564 => NULL
  # DEBUG dD.45564 => NULL
  # DEBUG next_coordD.45562 => NULL
  graphite_IV.530_120 = graphite_IV.530_121 + 1;
  if (graphite_IV.530_121 < _124)
    goto <bb 23>;
  else
    goto <bb 24>;
;;    succ:       23 [91.0%]  (TRUE_VALUE)
;;                24 [9.0%]  (FALSE_VALUE,LOOP_EXIT)

;;   basic block 23, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 [91.0%]  (TRUE_VALUE)
  goto <bb 22>;
;;    succ:       22 [100.0%]  (FALLTHRU,DFS_BACK)

;;   basic block 24, loop depth 0, count 0, freq 1800, maybe hot
;;    prev block 23, next block 25, flags: (NEW)
;;    pred:       22 [9.0%]  (FALSE_VALUE,LOOP_EXIT)
;;                20 [50.0%]  (FALSE_VALUE)
  # .MEM_108 = PHI <.MEM_109(22), .MEM_145(20)>
  # VUSE <.MEM_108>
  next_coord_7 = Close_Phi.528D.55150[0];
  # .MEM_5 = VDEF <.MEM_108>
  Cross_BB_scalar_dependence.529D.55154[0] = next_coord_7;
  # VUSE <.MEM_5>
  next_coord_133 = Cross_BB_scalar_dependence.529D.55154[0];
  _134 = next_coord_133;
;;    succ:       25 [100.0%]  (FALLTHRU)

;;   basic block 25, loop depth 0, count 0, freq 2466, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                24 [100.0%]  (FALLTHRU)
  # next_coord_104 = PHI <next_coord_132(19), _134(24)>
  # prephitmp_126 = PHI <pretmp_151(19), pretmp_157(24)>
  # .MEM_155 = PHI <.MEM_12(D)(19), .MEM_5(24)>
;;    succ:       26 [100.0%]  (FALLTHRU)

;;   basic block 26, loop depth 0, count 0, freq 5333, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 [100.0%]  (FALLTHRU)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                42 [100.0%]  (FALLTHRU,EXECUTABLE)
  # next_coord_6 = PHI <next_coord_104(25), next_coord_31(41), next_coord_127(42)>
  # prephitmp_153 = PHI <prephitmp_126(25), pretmp_150(41), pretmp_152(42)>
  # .MEM_146 = PHI <.MEM_155(25), .MEM_12(D)(41), .MEM_12(D)(42)>
  # DEBUG next_coordD.45562 => next_coord_6
  next_coord_37 = next_coord_6 % prephitmp_153;
  # DEBUG next_coordD.45562 => next_coord_37
  _136 = next_coord_37 >= prephitmp_153;
  _135 = next_coord_37 < 0;
  _137 = _135 | _136;
  if (_137 != 0)
    goto <bb 27>;
  else
    goto <bb 28>;
;;    succ:       27 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 2, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       26 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_46 = VDEF <.MEM_146>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  __assert_failD.9858 ("next_coord >= 0 && next_coord < gK", "routefunc.cpp", 761, &_ZZ18dim_order_pni_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45561);
;;    succ:      

;;   basic block 28, loop depth 0, count 0, freq 5331, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       26 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  _38 = vcEnd_3 - vcBegin_1;
  _39 = _38 + 1;
  vcs_per_dest_40 = _39 / prephitmp_153;
  # DEBUG vcs_per_destD.45565 => vcs_per_dest_40
  if (vcs_per_dest_40 <= 0)
    goto <bb 29>;
  else
    goto <bb 30>;
;;    succ:       29 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 2, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       28 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_45 = VDEF <.MEM_146>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  __assert_failD.9858 ("vcs_per_dest > 0", "routefunc.cpp", 763, &_ZZ18dim_order_pni_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45561);
;;    succ:      

;;   basic block 30, loop depth 0, count 0, freq 5329, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       28 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 2147483647] NONZERO 2147483647
  _41 = next_coord_37 * vcs_per_dest_40;
  vcBegin_42 = vcBegin_1 + _41;
  # DEBUG vcBeginD.45559 => vcBegin_42
  _43 = vcs_per_dest_40 + vcBegin_42;
  vcEnd_44 = _43 + -1;
  # DEBUG vcEndD.45560 => vcEnd_44
  # DEBUG vcEndD.45560 => vcEnd_44
  # DEBUG vcBeginD.45559 => vcBegin_42
  if (inject_11(D) != 0)
    goto <bb 39>;
  else
    goto <bb 31>;
;;    succ:       31 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                39 [39.0%]  (TRUE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 3652, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       30 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [28.0%]  (FALSE_VALUE,EXECUTABLE)
  # vcBegin_100 = PHI <vcBegin_42(30), vcBegin_1(17)>
  # vcEnd_103 = PHI <vcEnd_44(30), vcEnd_3(17)>
  # .MEM_154 = PHI <.MEM_146(30), .MEM_12(D)(17)>
  # DEBUG vcEndD.45560 => vcEnd_103
  # DEBUG vcBeginD.45559 => vcBegin_100
  # VUSE <.MEM_154>
  _47 = f_13(D)->watchD.29345;
  if (_47 != 0)
    goto <bb 32>;
  else
    goto <bb 39>;
;;    succ:       32 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 1424, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       31 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_154>
  _48 = f_13(D)->destD.29342;
  # VUSE <.MEM_154>
  _49 = f_13(D)->idD.29338;
  # DEBUG D#17ptD.0 => &r_15(D)->D.42039.D.32226
  # DEBUG thisD.51082 => D#17ptD.0
  # .MEM_50 = VDEF <.MEM_154>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _51 = _Z10GetSimTimevD.33721 ();
  # VUSE <.MEM_50>
  # PT = nonlocal escaped 
  gWatchOut.45_52 = gWatchOutD.33731;
  # .MEM_53 = VDEF <.MEM_50>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _54 = _ZNSolsEiD.23719 (gWatchOut.45_52, _51);
  # DEBUG __outD.51078 => _54
  # DEBUG __sD.51079 => " | "
  # DEBUG __sD.51080 => " | "
  # .MEM_77 = VDEF <.MEM_53>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_54, " | ", 3);
  # DEBUG __osD.51075 => _54
  # DEBUG __strD.51076 => NULL
  # VUSE <.MEM_77>
  _55 = MEM[(long unsigned intD.14 *)r_15(D) + 48B];
  # DEBUG thisD.50724 => D#1ptD.0
  _74 = (long intD.12) _55;
  # DEBUG thisD.50721 => NULL
  # VUSE <.MEM_77>
  # PT = nonlocal escaped 
  _75 = MEM[(charD.10 * *)r_15(D) + 40B];
  # DEBUG thisD.50676 => D#3ptD.0
  # .MEM_78 = VDEF <.MEM_77>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _76 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_54, _75, _74);
  # DEBUG __outD.51071 => _76
  # DEBUG __sD.51072 => " | "
  # DEBUG __sD.51073 => " | "
  # .MEM_79 = VDEF <.MEM_78>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_76, " | ", 3);
  # DEBUG __outD.51067 => _76
  # DEBUG __sD.51068 => "Adding VC range ["
  # DEBUG __sD.51069 => "Adding VC range ["
  # .MEM_80 = VDEF <.MEM_79>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_76, "Adding VC range [", 17);
  # .MEM_56 = VDEF <.MEM_80>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _57 = _ZNSolsEiD.23719 (_76, vcBegin_100);
  # DEBUG __outD.51063 => _57
  # DEBUG __sD.51064 => ","
  # DEBUG __sD.51065 => ","
  # .MEM_81 = VDEF <.MEM_56>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_57, ",", 1);
  # .MEM_58 = VDEF <.MEM_81>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _59 = _ZNSolsEiD.23719 (_57, vcEnd_103);
  # DEBUG __outD.51059 => _59
  # DEBUG __sD.51060 => "]"
  # DEBUG __sD.51061 => "]"
  # .MEM_82 = VDEF <.MEM_58>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_59, "]", 1);
  # DEBUG __outD.51055 => _59
  # DEBUG __sD.51056 => " at output port "
  # DEBUG __sD.51057 => " at output port "
  # .MEM_83 = VDEF <.MEM_82>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_59, " at output port ", 16);
  # .MEM_60 = VDEF <.MEM_83>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _61 = _ZNSolsEiD.23719 (_59, out_port_8);
  # DEBUG __outD.51051 => _61
  # DEBUG __sD.51052 => " for flit "
  # DEBUG __sD.51053 => " for flit "
  # .MEM_84 = VDEF <.MEM_60>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_61, " for flit ", 10);
  # .MEM_62 = VDEF <.MEM_84>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _63 = _ZNSolsEiD.23719 (_61, _49);
  # DEBUG __outD.51047 => _63
  # DEBUG __sD.51048 => " (input port "
  # DEBUG __sD.51049 => " (input port "
  # .MEM_85 = VDEF <.MEM_62>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_63, " (input port ", 13);
  # .MEM_65 = VDEF <.MEM_85>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _66 = _ZNSolsEiD.23719 (_63, in_channel_64(D));
  # DEBUG __outD.51043 => _66
  # DEBUG __sD.51044 => ", destination "
  # DEBUG __sD.51045 => ", destination "
  # .MEM_86 = VDEF <.MEM_65>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_66, ", destination ", 14);
  # .MEM_67 = VDEF <.MEM_86>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _68 = _ZNSolsEiD.23719 (_66, _48);
  # DEBUG __outD.51039 => _68
  # DEBUG __sD.51040 => ")"
  # DEBUG __sD.51041 => ")"
  # .MEM_87 = VDEF <.MEM_67>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_68, ")", 1);
  # DEBUG __outD.51035 => _68
  # DEBUG __sD.51036 => "."
  # DEBUG __sD.51037 => "."
  # .MEM_88 = VDEF <.MEM_87>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_68, ".", 1);
  # DEBUG thisD.51032 => _68
  # DEBUG __pfD.51033 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.23851
  # DEBUG __osD.55132 => _68
  # VUSE <.MEM_88>
  # PT = nonlocal escaped null { D.45561 } (nonlocal, escaped)
  _90 = _68->_vptr.basic_ostreamD.23811;
  # VUSE <.MEM_88>
  _91 = MEM[(long intD.12 *)_90 + -24B];
  # RANGE [0, 18446744073709551615]
  _92 = (sizetype) _91;
  # PT = nonlocal escaped 
  _93 = _68 + _92;
  # DEBUG thisD.55135 => _93
  # DEBUG __cD.55136 => 10
  # VUSE <.MEM_88>
  # PT = nonlocal escaped 
  _89 = MEM[(const struct basic_iosD.11171 *)_93]._M_ctypeD.23035;
  # DEBUG __fD.55137 => _89
  if (_89 == 0B)
    goto <bb 33>;
  else
    goto <bb 34>;
;;    succ:       33 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       32 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_125 = VDEF <.MEM_88>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZSt16__throw_bad_castvD.2825 ();
;;    succ:      

;;   basic block 34, loop depth 0, count 0, freq 1423, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       32 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.55139 => _89
  # DEBUG __cD.55138 => 10
  # VUSE <.MEM_88>
  _98 = MEM[(const struct ctypeD.11417 *)_89]._M_widen_okD.19950;
  if (_98 != 0)
    goto <bb 35>;
  else
    goto <bb 36>;
;;    succ:       35 [71.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [29.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 1010, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       34 [71.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_88>
  _101 = MEM[(const struct ctypeD.11417 *)_89]._M_widenD.19951[10];
  pretmp_147 = (intD.9) _101;
  goto <bb 38>;
;;    succ:       38 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 413, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       34 [29.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.55141 => _89
  # DEBUG __cD.55142 => 10
  # .MEM_117 = VDEF <.MEM_88>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.20058 (_89);
  # VUSE <.MEM_117>
  # PT = nonlocal escaped 
  _106 = MEM[(const struct ctypeD.11417 *)_89].D.20091._vptr.facetD.16709;
  # VUSE <.MEM_117>
  # PT = nonlocal escaped 
  _107 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_106 + 48B];
  # PT = anything 
  PROF_111 = [obj_type_ref] OBJ_TYPE_REF(_107;(const struct ctypeD.11417)_89->6);
  if (PROF_111 == _ZNKSt5ctypeIcE8do_widenEcD.20039)
    goto <bb 38>;
  else
    goto <bb 37>;
;;    succ:       38 [30.2%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [69.8%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 288, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       36 [69.8%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_118 = VDEF <.MEM_117>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _113 = OBJ_TYPE_REF(_107;(const struct ctypeD.11417)_89->6) (_89, 10);
  pretmp_148 = (intD.9) _113;
;;    succ:       38 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 1423, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       35 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                36 [30.2%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_116 = PHI <.MEM_88(35), .MEM_117(36), .MEM_118(37)>
  # RANGE [-128, 127]
  # prephitmp_149 = PHI <pretmp_147(35), 10(36), pretmp_148(37)>
  # .MEM_122 = VDEF <.MEM_116>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _96 = _ZNSo3putEcD.23746 (_68, prephitmp_149);
  # DEBUG __osD.55133 => _96
  # .MEM_123 = VDEF <.MEM_122>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZNSo5flushEvD.23757 (_96);
;;    succ:       39 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 5730, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       30 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [61.0%]  (FALSE_VALUE,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_10 = PHI <.MEM_146(30), .MEM_154(31), .MEM_123(38)>
  # vcBegin_99 = PHI <vcBegin_42(30), vcBegin_100(31), vcBegin_100(38)>
  # vcEnd_102 = PHI <vcEnd_44(30), vcEnd_103(31), vcEnd_103(38)>
  # .MEM_70 = VDEF <.MEM_10>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_69(D));
  # .MEM_71 = VDEF <.MEM_70>
  # USE = nonlocal null { D.45561 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45561 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_69(D), out_port_8, vcBegin_99, vcEnd_102, 0);
  # VUSE <.MEM_71>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 40, loop depth 0, count 0, freq 2867, maybe hot
;;    prev block 39, next block 41, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  next_coord_31 = f_13(D)->destD.29342;
  # DEBUG next_coordD.45562 => next_coord_31
  if (inject_11(D) != 0)
    goto <bb 41>;
  else
    goto <bb 18>;
;;    succ:       18 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                41 [50.0%]  (TRUE_VALUE,EXECUTABLE)

;;   basic block 41, loop depth 0, count 0, freq 1433, maybe hot
;;    prev block 40, next block 42, flags: (NEW)
;;    pred:       40 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  pretmp_150 = gKD.33726;
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 1434, maybe hot
;;    prev block 41, next block 1, flags: (NEW, REACHABLE)
;;    pred:       16 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  next_coord_127 = f_13(D)->destD.29342;
  # DEBUG next_coordD.45562 => next_coord_127
  # VUSE <.MEM_12(D)>
  pretmp_152 = gKD.33726;
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

}



;; Function void min_adapt_mesh(const Router*, const Flit*, int, OutputSet*, bool) (_Z14min_adapt_meshPK6RouterPK4FlitiP9OutputSetb, funcdef_no=1979, decl_uid=45609, cgraph_uid=478, symbol_order=489)


Pass statistics:
----------------

void min_adapt_mesh(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45604, const struct FlitD.29321 * fD.45605, intD.9 in_channelD.45606, struct OutputSetD.28230 * outputsD.45607, boolD.2757 injectD.45608)
{
  char_typeD.19944 D.55228;
  charD.10 __cD.55227;
  char_typeD.19944 D.55225;
  charD.10 __cD.55224;
  char_typeD.23023 D.55222;
  struct basic_ostreamD.11177 & D.55216;
  char_typeD.19944 D.55213;
  charD.10 __cD.55212;
  char_typeD.19944 D.55210;
  charD.10 __cD.55209;
  char_typeD.23023 D.55207;
  struct basic_ostreamD.11177 & D.55201;
  char_typeD.19944 D.55198;
  charD.10 __cD.55197;
  char_typeD.19944 D.55195;
  charD.10 __cD.55194;
  char_typeD.23023 D.55192;
  struct basic_ostreamD.11177 & D.55186;
  intD.9 nD.45618;
  intD.9 destD.45617;
  intD.9 curD.45616;
  intD.9 out_portD.45615;
  intD.9 in_vcD.45614;
  static const charD.10 _ZZ14min_adapt_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45613[71] = "void min_adapt_mesh(const Router*, const Flit*, int, OutputSet*, bool)";
  intD.9 vcBeginD.45611;
  intD.9 gNumVCs.62_14;
  FlitTypeD.29324 _17;
  intD.9 _26;
  intD.9 _33;
  intD.9 gN.64_34;
  intD.9 _35;
  intD.9 gN.64_37;
  intD.9 _38;
  boolD.2757 _43;
  intD.9 _44;
  intD.9 _45;
  intD.9 _47;
  struct ostreamD.11178 * gWatchOut.65_48;
  struct basic_ostreamD.11177 & _50;
  const size_typeD.14319 _51;
  struct basic_ostreamD.11177 & _53;
  struct basic_ostreamD.11177 & _55;
  struct basic_ostreamD.11177 & _57;
  struct basic_ostreamD.11177 & _59;
  struct basic_ostreamD.11177 & _61;
  struct basic_ostreamD.11177 & _63;
  intD.9 _67;
  intD.9 _68;
  boolD.2757 _69;
  intD.9 _70;
  intD.9 _71;
  intD.9 _72;
  intD.9 _73;
  intD.9 _74;
  intD.9 _76;
  struct ostreamD.11178 * gWatchOut.65_77;
  struct basic_ostreamD.11177 & _79;
  const size_typeD.14319 _80;
  struct basic_ostreamD.11177 & _82;
  struct basic_ostreamD.11177 & _84;
  struct basic_ostreamD.11177 & _86;
  struct basic_ostreamD.11177 & _88;
  struct basic_ostreamD.11177 & _90;
  struct basic_ostreamD.11177 & _92;
  struct basic_ostreamD.11177 & _94;
  boolD.2757 _99;
  intD.9 _100;
  intD.9 _101;
  intD.9 _102;
  intD.9 _103;
  intD.9 _105;
  struct ostreamD.11178 * gWatchOut.65_106;
  struct basic_ostreamD.11177 & _108;
  const size_typeD.14319 _109;
  struct basic_ostreamD.11177 & _111;
  struct basic_ostreamD.11177 & _113;
  struct basic_ostreamD.11177 & _115;
  struct basic_ostreamD.11177 & _117;
  struct basic_ostreamD.11177 & _119;
  struct basic_ostreamD.11177 & _121;
  struct basic_ostreamD.11177 & _123;
  const intD.9 _131;
  long intD.12 _133;
  charD.10 * const _134;
  struct basic_ostreamD.11177 & _135;
  long intD.12 _136;
  charD.10 * const _137;
  struct basic_ostreamD.11177 & _138;
  long intD.12 _139;
  charD.10 * const _140;
  struct basic_ostreamD.11177 & _141;
  const struct __ctype_typeD.23028 * _154;
  const struct __ctype_typeD.23028 * _168;
  const struct __ctype_typeD.23028 * _182;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _183;
  long intD.12 _184;
  sizetype _185;
  struct basic_iosD.11171 * _186;
  struct basic_ostreamD.11177 & _189;
  boolD.2757 _190;
  charD.10 _191;
  char_typeD.19944 _194;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _199;
  intD.9 (*__vtbl_ptr_typeD.2760) () _200;
  intD.9 prephitmp_202;
  intD.9 prephitmp_203;
  voidD.45 * PROF_204;
  char_typeD.19944 _206;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _209;
  long intD.12 _210;
  sizetype _211;
  struct basic_iosD.11171 * _212;
  struct basic_ostreamD.11177 & _215;
  boolD.2757 _216;
  charD.10 _217;
  intD.9 pretmp_218;
  intD.9 pretmp_219;
  char_typeD.19944 _220;
  intD.9 prephitmp_221;
  intD.9 pretmp_224;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _225;
  intD.9 (*__vtbl_ptr_typeD.2760) () _226;
  intD.9 prephitmp_227;
  voidD.45 * PROF_230;
  intD.9 pretmp_231;
  char_typeD.19944 _232;
  intD.9 pretmp_233;
  intD.9 prephitmp_234;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _235;
  long intD.12 _236;
  sizetype _237;
  struct basic_iosD.11171 * _238;
  struct basic_ostreamD.11177 & _241;
  boolD.2757 _242;
  charD.10 _243;
  char_typeD.19944 _246;
  intD.9 prephitmp_248;
  intD.9 pretmp_250;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _251;
  intD.9 (*__vtbl_ptr_typeD.2760) () _252;
  intD.9 gN.64_255;
  voidD.45 * PROF_256;
  intD.9 pretmp_257;
  char_typeD.19944 _258;
  intD.9 prephitmp_259;
  intD.9 prephitmp_260;
  intD.9 pretmp_271;
  intD.9 pretmp_275;
  intD.9 pretmp_276;
  intD.9 pretmp_280;
  intD.9 pretmp_284;
  boolD.2757 _286;
  intD.9 prephitmp_291;
  intD.9 pretmp_292;
  intD.9 pretmp_293;
  intD.9 prephitmp_294;
  intD.9 pretmp_295;
  intD.9 pretmp_296;
  intD.9 prephitmp_297;

;;   basic block 2, loop depth 0, count 0, freq 1564, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG vcBeginD.45611 => 0
  # DEBUG D#202ptD.0 => gNumVCsD.42077
  # DEBUG vcEndD.45612 => D#202ptD.0 + -1
  # VUSE <.MEM_13(D)>
  _17 = f_16(D)->typeD.29330;
  if (_17 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 782, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  vcBegin_18 = gReadReqBeginVCD.42078;
  # DEBUG vcBeginD.45611 => vcBegin_18
  # VUSE <.MEM_13(D)>
  in_vc_19 = gReadReqEndVCD.42079;
  # DEBUG vcEndD.45612 => in_vc_19
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 782, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_17 == 2)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 219, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  vcBegin_20 = gWriteReqBeginVCD.42080;
  # DEBUG vcBeginD.45611 => vcBegin_20
  # VUSE <.MEM_13(D)>
  in_vc_21 = gWriteReqEndVCD.42081;
  # DEBUG vcEndD.45612 => in_vc_21
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 563, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_17 == 1)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 158, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  vcBegin_22 = gReadReplyBeginVCD.42082;
  # DEBUG vcBeginD.45611 => vcBegin_22
  # VUSE <.MEM_13(D)>
  in_vc_23 = gReadReplyEndVCD.42083;
  # DEBUG vcEndD.45612 => in_vc_23
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 405, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  gNumVCs.62_14 = gNumVCsD.42077;
  if (_17 == 3)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 292, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  in_vc_15 = gNumVCs.62_14 + -1;
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 113, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  vcBegin_24 = gWriteReplyBeginVCD.42084;
  # DEBUG vcBeginD.45611 => vcBegin_24
  # VUSE <.MEM_13(D)>
  in_vc_25 = gWriteReplyEndVCD.42085;
  # DEBUG vcEndD.45612 => in_vc_25
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 1564, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # vcBegin_1 = PHI <vcBegin_18(3), vcBegin_20(5), vcBegin_22(7), 0(9), vcBegin_24(10)>
  # in_vc_2 = PHI <in_vc_19(3), in_vc_21(5), in_vc_23(7), in_vc_15(9), in_vc_25(10)>
  # DEBUG vcEndD.45612 => in_vc_2
  # DEBUG vcBeginD.45611 => vcBegin_1
  # VUSE <.MEM_13(D)>
  _26 = f_16(D)->vcD.29331;
  _190 = in_vc_2 < _26;
  _242 = vcBegin_1 > _26;
  _216 = _190 | _242;
  if (_216 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 1172, maybe hot
;;   Invalid sum of incoming frequencies 782, should be 1172
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  _286 = _26 >= 0;
  if (inject_27(D) <= _286)
    goto <bb 13>;
  else
    goto <bb 55>;
;;    succ:       13 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                55 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_28 = VDEF <.MEM_13(D)>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  __assert_failD.9858 ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 948, &_ZZ14min_adapt_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45613);
;;    succ:      

;;   basic block 14, loop depth 0, count 0, freq 391, maybe hot
;;   Invalid sum of incoming frequencies 782, should be 391
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_30 = VDEF <.MEM_13(D)>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_29(D));
  if (inject_27(D) != 0)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 (TRUE_VALUE,EXECUTABLE)
;;                16 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 324, maybe hot
;;   Invalid sum of incoming frequencies 1172, should be 324
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 (TRUE_VALUE,EXECUTABLE)
;;                55 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_205 = PHI <.MEM_30(14), .MEM_244(55)>
  # .MEM_31 = VDEF <.MEM_205>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_29(D), -1, vcBegin_1, in_vc_2, 0);
  goto <bb 54>;
;;    succ:       54 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 1239, maybe hot
;;   Invalid sum of incoming frequencies 391, should be 1239
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_30>
  _131 = MEM[(intD.9 *)r_32(D) + 96B];
  # DEBUG D#14ptD.0 => r_32(D)
  # DEBUG thisD.51086 => D#14ptD.0
  # VUSE <.MEM_30>
  _33 = f_16(D)->destD.29342;
  if (_33 == _131)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [9.2%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [90.8%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 114, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [9.2%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_30>
  gN.64_34 = gND.33727;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _35 = gN.64_34 * 2;
  # .MEM_36 = VDEF <.MEM_30>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_29(D), _35, vcBegin_1, in_vc_2, 0);
  goto <bb 54>;
;;    succ:       54 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 1125, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       16 [90.8%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_30>
  gN.64_37 = gND.33727;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _38 = gN.64_37 * 2;
  if (_38 == in_channel_39(D))
    goto <bb 20>;
  else
    goto <bb 19>;
;;    succ:       20 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 810, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_30>
  in_vc_40 = f_16(D)->vcD.29331;
  # DEBUG in_vcD.45614 => in_vc_40
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 1125, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       18 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # in_vc_3 = PHI <in_vc_2(18), in_vc_40(19)>
  # DEBUG in_vcD.45614 => in_vc_3
  # DEBUG D#14ptD.0 => r_32(D)
  # DEBUG thisD.51089 => D#14ptD.0
  # VUSE <.MEM_30>
  # USE = nonlocal escaped null 
  out_port_41 = _Z13dor_next_meshiibD.45450 (_131, _33, 0);
  # DEBUG out_portD.45615 => out_port_41
  # .MEM_42 = VDEF <.MEM_30>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_29(D), out_port_41, 0, vcBegin_1, vcBegin_1);
  # VUSE <.MEM_42>
  _43 = f_16(D)->watchD.29345;
  if (_43 != 0)
    goto <bb 21>;
  else
    goto <bb 28>;
;;    succ:       21 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 326, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_42>
  _44 = f_16(D)->destD.29342;
  # VUSE <.MEM_42>
  _45 = f_16(D)->idD.29338;
  # DEBUG D#18ptD.0 => &r_32(D)->D.42039.D.32226
  # DEBUG thisD.51141 => D#18ptD.0
  # .MEM_46 = VDEF <.MEM_42>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _47 = _Z10GetSimTimevD.33721 ();
  # VUSE <.MEM_46>
  # PT = nonlocal escaped 
  gWatchOut.65_48 = gWatchOutD.33731;
  # .MEM_49 = VDEF <.MEM_46>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _50 = _ZNSolsEiD.23719 (gWatchOut.65_48, _47);
  # DEBUG __outD.51137 => _50
  # DEBUG __sD.51138 => " | "
  # DEBUG __sD.51139 => " | "
  # .MEM_142 = VDEF <.MEM_49>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_50, " | ", 3);
  # DEBUG __osD.51134 => _50
  # DEBUG __strD.51135 => NULL
  # VUSE <.MEM_142>
  _51 = MEM[(long unsigned intD.14 *)r_32(D) + 48B];
  # DEBUG thisD.50724 => D#1ptD.0
  _133 = (long intD.12) _51;
  # DEBUG thisD.50721 => NULL
  # VUSE <.MEM_142>
  # PT = nonlocal escaped 
  _134 = MEM[(charD.10 * *)r_32(D) + 40B];
  # DEBUG thisD.50676 => D#3ptD.0
  # .MEM_143 = VDEF <.MEM_142>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _135 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_50, _134, _133);
  # DEBUG __outD.51130 => _135
  # DEBUG __sD.51131 => " | "
  # DEBUG __sD.51132 => " | "
  # .MEM_144 = VDEF <.MEM_143>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_135, " | ", 3);
  # DEBUG __outD.51126 => _135
  # DEBUG __sD.51127 => "Adding VC range ["
  # DEBUG __sD.51128 => "Adding VC range ["
  # .MEM_145 = VDEF <.MEM_144>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_135, "Adding VC range [", 17);
  # .MEM_52 = VDEF <.MEM_145>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _53 = _ZNSolsEiD.23719 (_135, vcBegin_1);
  # DEBUG __outD.51122 => _53
  # DEBUG __sD.51123 => ","
  # DEBUG __sD.51124 => ","
  # .MEM_146 = VDEF <.MEM_52>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_53, ",", 1);
  # .MEM_54 = VDEF <.MEM_146>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _55 = _ZNSolsEiD.23719 (_53, vcBegin_1);
  # DEBUG __outD.51118 => _55
  # DEBUG __sD.51119 => "]"
  # DEBUG __sD.51120 => "]"
  # .MEM_147 = VDEF <.MEM_54>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_55, "]", 1);
  # DEBUG __outD.51114 => _55
  # DEBUG __sD.51115 => " at output port "
  # DEBUG __sD.51116 => " at output port "
  # .MEM_148 = VDEF <.MEM_147>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_55, " at output port ", 16);
  # .MEM_56 = VDEF <.MEM_148>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _57 = _ZNSolsEiD.23719 (_55, out_port_41);
  # DEBUG __outD.51110 => _57
  # DEBUG __sD.51111 => " for flit "
  # DEBUG __sD.51112 => " for flit "
  # .MEM_149 = VDEF <.MEM_56>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_57, " for flit ", 10);
  # .MEM_58 = VDEF <.MEM_149>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _59 = _ZNSolsEiD.23719 (_57, _45);
  # DEBUG __outD.51106 => _59
  # DEBUG __sD.51107 => " (input port "
  # DEBUG __sD.51108 => " (input port "
  # .MEM_150 = VDEF <.MEM_58>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_59, " (input port ", 13);
  # .MEM_60 = VDEF <.MEM_150>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _61 = _ZNSolsEiD.23719 (_59, in_channel_39(D));
  # DEBUG __outD.51102 => _61
  # DEBUG __sD.51103 => ", destination "
  # DEBUG __sD.51104 => ", destination "
  # .MEM_151 = VDEF <.MEM_60>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_61, ", destination ", 14);
  # .MEM_62 = VDEF <.MEM_151>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _63 = _ZNSolsEiD.23719 (_61, _44);
  # DEBUG __outD.51098 => _63
  # DEBUG __sD.51099 => ")"
  # DEBUG __sD.51100 => ")"
  # .MEM_152 = VDEF <.MEM_62>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_63, ")", 1);
  # DEBUG __outD.51094 => _63
  # DEBUG __sD.51095 => "."
  # DEBUG __sD.51096 => "."
  # .MEM_153 = VDEF <.MEM_152>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_63, ".", 1);
  # DEBUG thisD.51091 => _63
  # DEBUG __pfD.51092 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.23851
  # DEBUG __osD.55184 => _63
  # VUSE <.MEM_153>
  # PT = nonlocal escaped null { D.45613 } (nonlocal, escaped)
  _183 = _63->_vptr.basic_ostreamD.23811;
  # VUSE <.MEM_153>
  _184 = MEM[(long intD.12 *)_183 + -24B];
  # RANGE [0, 18446744073709551615]
  _185 = (sizetype) _184;
  # PT = nonlocal escaped 
  _186 = _63 + _185;
  # DEBUG thisD.55187 => _186
  # DEBUG __cD.55188 => 10
  # VUSE <.MEM_153>
  # PT = nonlocal escaped 
  _154 = MEM[(const struct basic_iosD.11171 *)_186]._M_ctypeD.23035;
  # DEBUG __fD.55189 => _154
  if (_154 == 0B)
    goto <bb 22>;
  else
    goto <bb 23>;
;;    succ:       22 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 0
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       21 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                45 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_289 = PHI <.MEM_153(21), .MEM_181(36), .MEM_167(45)>
  # .MEM_272 = VDEF <.MEM_289>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__throw_bad_castvD.2825 ();
;;    succ:      

;;   basic block 23, loop depth 0, count 0, freq 326, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       21 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.55191 => _154
  # DEBUG __cD.55190 => 10
  # VUSE <.MEM_153>
  _191 = MEM[(const struct ctypeD.11417 *)_154]._M_widen_okD.19950;
  if (_191 != 0)
    goto <bb 24>;
  else
    goto <bb 25>;
;;    succ:       24 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 199, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_153>
  _194 = MEM[(const struct ctypeD.11417 *)_154]._M_widenD.19951[10];
  pretmp_292 = (intD.9) _194;
  goto <bb 27>;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 127, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       23 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.55193 => _154
  # DEBUG __cD.55194 => 10
  # .MEM_264 = VDEF <.MEM_153>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.20058 (_154);
  # VUSE <.MEM_264>
  # PT = nonlocal escaped 
  _199 = MEM[(const struct ctypeD.11417 *)_154].D.20091._vptr.facetD.16709;
  # VUSE <.MEM_264>
  # PT = nonlocal escaped 
  _200 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_199 + 48B];
  # PT = anything 
  PROF_204 = [obj_type_ref] OBJ_TYPE_REF(_200;(const struct ctypeD.11417)_154->6);
  if (PROF_204 == _ZNKSt5ctypeIcE8do_widenEcD.20039)
    goto <bb 27>;
  else
    goto <bb 26>;
;;    succ:       27 [80.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [20.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 25, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       25 [20.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_265 = VDEF <.MEM_264>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _206 = OBJ_TYPE_REF(_200;(const struct ctypeD.11417)_154->6) (_154, 10);
  pretmp_293 = (intD.9) _206;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 326, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                25 [80.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_229 = PHI <.MEM_153(24), .MEM_264(25), .MEM_265(26)>
  # RANGE [-128, 127]
  # prephitmp_294 = PHI <pretmp_292(24), 10(25), pretmp_293(26)>
  # .MEM_269 = VDEF <.MEM_229>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _189 = _ZNSo3putEcD.23746 (_63, prephitmp_294);
  # DEBUG __osD.55185 => _189
  # .MEM_270 = VDEF <.MEM_269>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZNSo5flushEvD.23757 (_189);
;;    succ:       28 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 1125, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       20 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                27 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_7 = PHI <.MEM_42(20), .MEM_270(27)>
  if (vcBegin_1 != in_vc_3)
    goto <bb 30>;
  else
    goto <bb 29>;
;;    succ:       30 [80.1%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [19.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 1124, maybe hot
;;    prev block 28, next block 30, flags: (NEW)
;;    pred:       28 [19.9%]  (FALSE_VALUE,EXECUTABLE)
;;                30 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                52 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_285 = PHI <.MEM_7(28), .MEM_7(30), .MEM_11(52)>
  goto <bb 54>;
;;    succ:       54 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       28 [80.1%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7>
  cur_132 = MEM[(intD.9 *)r_32(D) + 96B];
  # DEBUG D#14ptD.0 => r_32(D)
  # DEBUG thisD.51144 => D#14ptD.0
  # DEBUG curD.45616 => NULL
  # VUSE <.MEM_7>
  dest_64 = f_16(D)->destD.29342;
  # DEBUG destD.45617 => dest_64
  # DEBUG nD.45618 => 0
  # DEBUG nD.45618 => 0
  # DEBUG destD.45617 => dest_64
  # DEBUG curD.45616 => cur_132
  # VUSE <.MEM_7>
  gN.64_255 = gND.33727;
  if (gN.64_255 <= 0)
    goto <bb 29>;
  else
    goto <bb 31>;
;;    succ:       29 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 820, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       30 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7>
  pretmp_280 = gKD.33726;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 31, next block 33, flags: (NEW)
;;    pred:       31 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                53 [100.0%]  (FALLTHRU,EXECUTABLE)
  # cur_207 = PHI <cur_132(31), cur_128(53)>
  # dest_195 = PHI <dest_64(31), dest_129(53)>
  # n_213 = PHI <0(31), n_130(53)>
  # .MEM_268 = PHI <.MEM_7(31), .MEM_11(53)>
  # prephitmp_203 = PHI <pretmp_280(31), prephitmp_248(53)>
  # prephitmp_202 = PHI <gN.64_255(31), prephitmp_297(53)>
  # DEBUG nD.45618 => n_213
  # DEBUG destD.45617 => dest_195
  # DEBUG curD.45616 => cur_207
  _67 = cur_207 % prephitmp_203;
  _68 = dest_195 % prephitmp_203;
  if (_67 != _68)
    goto <bb 33>;
  else
    goto <bb 52>;
;;    succ:       33 [72.0%]  (TRUE_VALUE,EXECUTABLE)
;;                52 [28.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 33, loop depth 1, count 0, freq 6552, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       32 [72.0%]  (TRUE_VALUE,EXECUTABLE)
  if (_67 < _68)
    goto <bb 34>;
  else
    goto <bb 43>;
;;    succ:       34 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                43 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 1, count 0, freq 3276, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       33 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_268>
  _99 = f_16(D)->watchD.29345;
  if (_99 != 0)
    goto <bb 36>;
  else
    goto <bb 35>;
;;    succ:       36 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 35, loop depth 1, count 0, freq 2326, maybe hot
;;    prev block 34, next block 36, flags: (NEW)
;;    pred:       34 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_224 = n_213 * 2;
  pretmp_231 = vcBegin_1 + 1;
  goto <bb 42>;
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 1, count 0, freq 950, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       34 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_268>
  _100 = f_16(D)->destD.29342;
  # VUSE <.MEM_268>
  _101 = f_16(D)->idD.29338;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _102 = n_213 * 2;
  _103 = vcBegin_1 + 1;
  # DEBUG D#20ptD.0 => &r_32(D)->D.42039.D.32226
  # DEBUG thisD.51200 => D#20ptD.0
  # .MEM_104 = VDEF <.MEM_268>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _105 = _Z10GetSimTimevD.33721 ();
  # VUSE <.MEM_104>
  # PT = nonlocal escaped 
  gWatchOut.65_106 = gWatchOutD.33731;
  # .MEM_107 = VDEF <.MEM_104>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _108 = _ZNSolsEiD.23719 (gWatchOut.65_106, _105);
  # DEBUG __outD.51196 => _108
  # DEBUG __sD.51197 => " | "
  # DEBUG __sD.51198 => " | "
  # .MEM_169 = VDEF <.MEM_107>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_108, " | ", 3);
  # DEBUG __osD.51193 => _108
  # DEBUG __strD.51194 => NULL
  # VUSE <.MEM_169>
  _109 = MEM[(long unsigned intD.14 *)r_32(D) + 48B];
  # DEBUG thisD.50724 => D#1ptD.0
  _136 = (long intD.12) _109;
  # DEBUG thisD.50721 => NULL
  # VUSE <.MEM_169>
  # PT = nonlocal escaped 
  _137 = MEM[(charD.10 * *)r_32(D) + 40B];
  # DEBUG thisD.50676 => D#3ptD.0
  # .MEM_170 = VDEF <.MEM_169>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _138 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_108, _137, _136);
  # DEBUG __outD.51189 => _138
  # DEBUG __sD.51190 => " | "
  # DEBUG __sD.51191 => " | "
  # .MEM_171 = VDEF <.MEM_170>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_138, " | ", 3);
  # DEBUG __outD.51185 => _138
  # DEBUG __sD.51186 => "Adding VC range ["
  # DEBUG __sD.51187 => "Adding VC range ["
  # .MEM_172 = VDEF <.MEM_171>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_138, "Adding VC range [", 17);
  # .MEM_110 = VDEF <.MEM_172>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _111 = _ZNSolsEiD.23719 (_138, _103);
  # DEBUG __outD.51181 => _111
  # DEBUG __sD.51182 => ","
  # DEBUG __sD.51183 => ","
  # .MEM_173 = VDEF <.MEM_110>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_111, ",", 1);
  # .MEM_112 = VDEF <.MEM_173>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _113 = _ZNSolsEiD.23719 (_111, in_vc_2);
  # DEBUG __outD.51177 => _113
  # DEBUG __sD.51178 => "]"
  # DEBUG __sD.51179 => "]"
  # .MEM_174 = VDEF <.MEM_112>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_113, "]", 1);
  # DEBUG __outD.51173 => _113
  # DEBUG __sD.51174 => " at output port "
  # DEBUG __sD.51175 => " at output port "
  # .MEM_175 = VDEF <.MEM_174>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_113, " at output port ", 16);
  # .MEM_114 = VDEF <.MEM_175>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _115 = _ZNSolsEiD.23719 (_113, _102);
  # DEBUG __outD.51169 => _115
  # DEBUG __sD.51170 => " with priority "
  # DEBUG __sD.51171 => " with priority "
  # .MEM_176 = VDEF <.MEM_114>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_115, " with priority ", 15);
  # .MEM_116 = VDEF <.MEM_176>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _117 = _ZNSolsEiD.23719 (_115, 1);
  # DEBUG __outD.51165 => _117
  # DEBUG __sD.51166 => " for flit "
  # DEBUG __sD.51167 => " for flit "
  # .MEM_177 = VDEF <.MEM_116>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_117, " for flit ", 10);
  # .MEM_118 = VDEF <.MEM_177>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _119 = _ZNSolsEiD.23719 (_117, _101);
  # DEBUG __outD.51161 => _119
  # DEBUG __sD.51162 => " (input port "
  # DEBUG __sD.51163 => " (input port "
  # .MEM_178 = VDEF <.MEM_118>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_119, " (input port ", 13);
  # .MEM_120 = VDEF <.MEM_178>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _121 = _ZNSolsEiD.23719 (_119, in_channel_39(D));
  # DEBUG __outD.51157 => _121
  # DEBUG __sD.51158 => ", destination "
  # DEBUG __sD.51159 => ", destination "
  # .MEM_179 = VDEF <.MEM_120>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_121, ", destination ", 14);
  # .MEM_122 = VDEF <.MEM_179>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _123 = _ZNSolsEiD.23719 (_121, _100);
  # DEBUG __outD.51153 => _123
  # DEBUG __sD.51154 => ")"
  # DEBUG __sD.51155 => ")"
  # .MEM_180 = VDEF <.MEM_122>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_123, ")", 1);
  # DEBUG __outD.51149 => _123
  # DEBUG __sD.51150 => "."
  # DEBUG __sD.51151 => "."
  # .MEM_181 = VDEF <.MEM_180>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_123, ".", 1);
  # DEBUG thisD.51146 => _123
  # DEBUG __pfD.51147 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.23851
  # DEBUG __osD.55199 => _123
  # VUSE <.MEM_181>
  # PT = nonlocal escaped null { D.45613 } (nonlocal, escaped)
  _209 = _123->_vptr.basic_ostreamD.23811;
  # VUSE <.MEM_181>
  _210 = MEM[(long intD.12 *)_209 + -24B];
  # RANGE [0, 18446744073709551615]
  _211 = (sizetype) _210;
  # PT = nonlocal escaped 
  _212 = _123 + _211;
  # DEBUG thisD.55202 => _212
  # DEBUG __cD.55203 => 10
  # VUSE <.MEM_181>
  # PT = nonlocal escaped 
  _182 = MEM[(const struct basic_iosD.11171 *)_212]._M_ctypeD.23035;
  # DEBUG __fD.55204 => _182
  if (_182 == 0B)
    goto <bb 22>;
  else
    goto <bb 37>;
;;    succ:       22 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 37, loop depth 1, count 0, freq 950, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       36 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.55206 => _182
  # DEBUG __cD.55205 => 10
  # VUSE <.MEM_181>
  _217 = MEM[(const struct ctypeD.11417 *)_182]._M_widen_okD.19950;
  if (_217 != 0)
    goto <bb 38>;
  else
    goto <bb 39>;
;;    succ:       38 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 38, loop depth 1, count 0, freq 579, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       37 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_181>
  _220 = MEM[(const struct ctypeD.11417 *)_182]._M_widenD.19951[10];
  pretmp_284 = (intD.9) _220;
  goto <bb 41>;
;;    succ:       41 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 1, count 0, freq 370, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       37 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.55208 => _182
  # DEBUG __cD.55209 => 10
  # .MEM_282 = VDEF <.MEM_181>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.20058 (_182);
  # VUSE <.MEM_282>
  # PT = nonlocal escaped 
  _225 = MEM[(const struct ctypeD.11417 *)_182].D.20091._vptr.facetD.16709;
  # VUSE <.MEM_282>
  # PT = nonlocal escaped 
  _226 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_225 + 48B];
  # PT = anything 
  PROF_230 = [obj_type_ref] OBJ_TYPE_REF(_226;(const struct ctypeD.11417)_182->6);
  if (PROF_230 == _ZNKSt5ctypeIcE8do_widenEcD.20039)
    goto <bb 41>;
  else
    goto <bb 40>;
;;    succ:       41 [80.4%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [19.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 1, count 0, freq 72, maybe hot
;;    prev block 39, next block 41, flags: (NEW, REACHABLE)
;;    pred:       39 [19.6%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_283 = VDEF <.MEM_282>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _232 = OBJ_TYPE_REF(_226;(const struct ctypeD.11417)_182->6) (_182, 10);
  pretmp_233 = (intD.9) _232;
;;    succ:       41 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 41, loop depth 1, count 0, freq 950, maybe hot
;;    prev block 40, next block 42, flags: (NEW, REACHABLE)
;;    pred:       38 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                39 [80.4%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_261 = PHI <.MEM_181(38), .MEM_282(39), .MEM_283(40)>
  # RANGE [-128, 127]
  # prephitmp_291 = PHI <pretmp_284(38), 10(39), pretmp_233(40)>
  # .MEM_287 = VDEF <.MEM_261>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _215 = _ZNSo3putEcD.23746 (_123, prephitmp_291);
  # DEBUG __osD.55200 => _215
  # .MEM_288 = VDEF <.MEM_287>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZNSo5flushEvD.23757 (_215);
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 42, loop depth 1, count 0, freq 3276, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       35 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_9 = PHI <.MEM_268(35), .MEM_288(41)>
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  # prephitmp_227 = PHI <pretmp_224(35), _102(41)>
  # prephitmp_234 = PHI <pretmp_231(35), _103(41)>
  # .MEM_126 = VDEF <.MEM_9>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_29(D), prephitmp_227, prephitmp_234, in_vc_2, 1);
  # VUSE <.MEM_126>
  pretmp_276 = gKD.33726;
  # VUSE <.MEM_126>
  pretmp_296 = gND.33727;
  goto <bb 52>;
;;    succ:       52 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 43, loop depth 1, count 0, freq 3276, maybe hot
;;    prev block 42, next block 44, flags: (NEW, REACHABLE)
;;    pred:       33 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_268>
  _69 = f_16(D)->watchD.29345;
  if (_69 != 0)
    goto <bb 45>;
  else
    goto <bb 44>;
;;    succ:       45 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 44, loop depth 1, count 0, freq 2326, maybe hot
;;    prev block 43, next block 45, flags: (NEW)
;;    pred:       43 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_250 = n_213 * 2;
  pretmp_257 = pretmp_250 + 1;
  pretmp_275 = vcBegin_1 + 1;
  goto <bb 51>;
;;    succ:       51 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 45, loop depth 1, count 0, freq 950, maybe hot
;;    prev block 44, next block 46, flags: (NEW, REACHABLE)
;;    pred:       43 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_268>
  _70 = f_16(D)->destD.29342;
  # VUSE <.MEM_268>
  _71 = f_16(D)->idD.29338;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _72 = n_213 * 2;
  # RANGE [-2147483647, 2147483647]
  _73 = _72 + 1;
  _74 = vcBegin_1 + 1;
  # DEBUG D#19ptD.0 => &r_32(D)->D.42039.D.32226
  # DEBUG thisD.51256 => D#19ptD.0
  # .MEM_75 = VDEF <.MEM_268>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _76 = _Z10GetSimTimevD.33721 ();
  # VUSE <.MEM_75>
  # PT = nonlocal escaped 
  gWatchOut.65_77 = gWatchOutD.33731;
  # .MEM_78 = VDEF <.MEM_75>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _79 = _ZNSolsEiD.23719 (gWatchOut.65_77, _76);
  # DEBUG __outD.51252 => _79
  # DEBUG __sD.51253 => " | "
  # DEBUG __sD.51254 => " | "
  # .MEM_155 = VDEF <.MEM_78>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_79, " | ", 3);
  # DEBUG __osD.51249 => _79
  # DEBUG __strD.51250 => NULL
  # VUSE <.MEM_155>
  _80 = MEM[(long unsigned intD.14 *)r_32(D) + 48B];
  # DEBUG thisD.50724 => D#1ptD.0
  _139 = (long intD.12) _80;
  # DEBUG thisD.50721 => NULL
  # VUSE <.MEM_155>
  # PT = nonlocal escaped 
  _140 = MEM[(charD.10 * *)r_32(D) + 40B];
  # DEBUG thisD.50676 => D#3ptD.0
  # .MEM_156 = VDEF <.MEM_155>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _141 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_79, _140, _139);
  # DEBUG __outD.51245 => _141
  # DEBUG __sD.51246 => " | "
  # DEBUG __sD.51247 => " | "
  # .MEM_157 = VDEF <.MEM_156>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_141, " | ", 3);
  # DEBUG __outD.51241 => _141
  # DEBUG __sD.51242 => "Adding VC range ["
  # DEBUG __sD.51243 => "Adding VC range ["
  # .MEM_158 = VDEF <.MEM_157>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_141, "Adding VC range [", 17);
  # .MEM_81 = VDEF <.MEM_158>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _82 = _ZNSolsEiD.23719 (_141, _74);
  # DEBUG __outD.51237 => _82
  # DEBUG __sD.51238 => ","
  # DEBUG __sD.51239 => ","
  # .MEM_159 = VDEF <.MEM_81>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_82, ",", 1);
  # .MEM_83 = VDEF <.MEM_159>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _84 = _ZNSolsEiD.23719 (_82, in_vc_2);
  # DEBUG __outD.51233 => _84
  # DEBUG __sD.51234 => "]"
  # DEBUG __sD.51235 => "]"
  # .MEM_160 = VDEF <.MEM_83>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_84, "]", 1);
  # DEBUG __outD.51229 => _84
  # DEBUG __sD.51230 => " at output port "
  # DEBUG __sD.51231 => " at output port "
  # .MEM_161 = VDEF <.MEM_160>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_84, " at output port ", 16);
  # .MEM_85 = VDEF <.MEM_161>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _86 = _ZNSolsEiD.23719 (_84, _73);
  # DEBUG __outD.51225 => _86
  # DEBUG __sD.51226 => " with priority "
  # DEBUG __sD.51227 => " with priority "
  # .MEM_162 = VDEF <.MEM_85>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_86, " with priority ", 15);
  # .MEM_87 = VDEF <.MEM_162>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _88 = _ZNSolsEiD.23719 (_86, 1);
  # DEBUG __outD.51221 => _88
  # DEBUG __sD.51222 => " for flit "
  # DEBUG __sD.51223 => " for flit "
  # .MEM_163 = VDEF <.MEM_87>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_88, " for flit ", 10);
  # .MEM_89 = VDEF <.MEM_163>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _90 = _ZNSolsEiD.23719 (_88, _71);
  # DEBUG __outD.51217 => _90
  # DEBUG __sD.51218 => " (input port "
  # DEBUG __sD.51219 => " (input port "
  # .MEM_164 = VDEF <.MEM_89>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_90, " (input port ", 13);
  # .MEM_91 = VDEF <.MEM_164>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _92 = _ZNSolsEiD.23719 (_90, in_channel_39(D));
  # DEBUG __outD.51213 => _92
  # DEBUG __sD.51214 => ", destination "
  # DEBUG __sD.51215 => ", destination "
  # .MEM_165 = VDEF <.MEM_91>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_92, ", destination ", 14);
  # .MEM_93 = VDEF <.MEM_165>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _94 = _ZNSolsEiD.23719 (_92, _70);
  # DEBUG __outD.51209 => _94
  # DEBUG __sD.51210 => ")"
  # DEBUG __sD.51211 => ")"
  # .MEM_166 = VDEF <.MEM_93>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_94, ")", 1);
  # DEBUG __outD.51205 => _94
  # DEBUG __sD.51206 => "."
  # DEBUG __sD.51207 => "."
  # .MEM_167 = VDEF <.MEM_166>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_94, ".", 1);
  # DEBUG thisD.51202 => _94
  # DEBUG __pfD.51203 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.23851
  # DEBUG __osD.55214 => _94
  # VUSE <.MEM_167>
  # PT = nonlocal escaped null { D.45613 } (nonlocal, escaped)
  _235 = _94->_vptr.basic_ostreamD.23811;
  # VUSE <.MEM_167>
  _236 = MEM[(long intD.12 *)_235 + -24B];
  # RANGE [0, 18446744073709551615]
  _237 = (sizetype) _236;
  # PT = nonlocal escaped 
  _238 = _94 + _237;
  # DEBUG thisD.55217 => _238
  # DEBUG __cD.55218 => 10
  # VUSE <.MEM_167>
  # PT = nonlocal escaped 
  _168 = MEM[(const struct basic_iosD.11171 *)_238]._M_ctypeD.23035;
  # DEBUG __fD.55219 => _168
  if (_168 == 0B)
    goto <bb 22>;
  else
    goto <bb 46>;
;;    succ:       22 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                46 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 46, loop depth 1, count 0, freq 950, maybe hot
;;    prev block 45, next block 47, flags: (NEW, REACHABLE)
;;    pred:       45 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.55221 => _168
  # DEBUG __cD.55220 => 10
  # VUSE <.MEM_167>
  _243 = MEM[(const struct ctypeD.11417 *)_168]._M_widen_okD.19950;
  if (_243 != 0)
    goto <bb 47>;
  else
    goto <bb 48>;
;;    succ:       47 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                48 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 47, loop depth 1, count 0, freq 579, maybe hot
;;    prev block 46, next block 48, flags: (NEW, REACHABLE)
;;    pred:       46 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_167>
  _246 = MEM[(const struct ctypeD.11417 *)_168]._M_widenD.19951[10];
  pretmp_218 = (intD.9) _246;
  goto <bb 50>;
;;    succ:       50 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 48, loop depth 1, count 0, freq 370, maybe hot
;;    prev block 47, next block 49, flags: (NEW, REACHABLE)
;;    pred:       46 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.55223 => _168
  # DEBUG __cD.55224 => 10
  # .MEM_273 = VDEF <.MEM_167>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.20058 (_168);
  # VUSE <.MEM_273>
  # PT = nonlocal escaped 
  _251 = MEM[(const struct ctypeD.11417 *)_168].D.20091._vptr.facetD.16709;
  # VUSE <.MEM_273>
  # PT = nonlocal escaped 
  _252 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_251 + 48B];
  # PT = anything 
  PROF_256 = [obj_type_ref] OBJ_TYPE_REF(_252;(const struct ctypeD.11417)_168->6);
  if (PROF_256 == _ZNKSt5ctypeIcE8do_widenEcD.20039)
    goto <bb 50>;
  else
    goto <bb 49>;
;;    succ:       50 [80.4%]  (TRUE_VALUE,EXECUTABLE)
;;                49 [19.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 49, loop depth 1, count 0, freq 72, maybe hot
;;    prev block 48, next block 50, flags: (NEW, REACHABLE)
;;    pred:       48 [19.6%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_274 = VDEF <.MEM_273>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _258 = OBJ_TYPE_REF(_252;(const struct ctypeD.11417)_168->6) (_168, 10);
  pretmp_219 = (intD.9) _258;
;;    succ:       50 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 50, loop depth 1, count 0, freq 950, maybe hot
;;    prev block 49, next block 51, flags: (NEW, REACHABLE)
;;    pred:       47 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                48 [80.4%]  (TRUE_VALUE,EXECUTABLE)
;;                49 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_263 = PHI <.MEM_167(47), .MEM_273(48), .MEM_274(49)>
  # RANGE [-128, 127]
  # prephitmp_221 = PHI <pretmp_218(47), 10(48), pretmp_219(49)>
  # .MEM_278 = VDEF <.MEM_263>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _241 = _ZNSo3putEcD.23746 (_94, prephitmp_221);
  # DEBUG __osD.55215 => _241
  # .MEM_279 = VDEF <.MEM_278>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZNSo5flushEvD.23757 (_241);
;;    succ:       51 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 51, loop depth 1, count 0, freq 3276, maybe hot
;;    prev block 50, next block 52, flags: (NEW, REACHABLE)
;;    pred:       44 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                50 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_10 = PHI <.MEM_268(44), .MEM_279(50)>
  # RANGE [-2147483647, 2147483647]
  # prephitmp_260 = PHI <pretmp_257(44), _73(50)>
  # prephitmp_259 = PHI <pretmp_275(44), _74(50)>
  # .MEM_98 = VDEF <.MEM_10>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_29(D), prephitmp_260, prephitmp_259, in_vc_2, 1);
  # VUSE <.MEM_98>
  pretmp_271 = gKD.33726;
  # VUSE <.MEM_98>
  pretmp_295 = gND.33727;
;;    succ:       52 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 52, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 51, next block 53, flags: (NEW, REACHABLE)
;;    pred:       32 [28.0%]  (FALSE_VALUE,EXECUTABLE)
;;                51 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                42 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_11 = PHI <.MEM_268(32), .MEM_98(51), .MEM_126(42)>
  # prephitmp_248 = PHI <prephitmp_203(32), pretmp_271(51), pretmp_276(42)>
  # prephitmp_297 = PHI <prephitmp_202(32), pretmp_295(51), pretmp_296(42)>
  cur_128 = cur_207 / prephitmp_248;
  # DEBUG curD.45616 => cur_128
  dest_129 = dest_195 / prephitmp_248;
  # DEBUG destD.45617 => dest_129
  n_130 = n_213 + 1;
  # DEBUG nD.45618 => n_130
  # DEBUG nD.45618 => n_130
  # DEBUG destD.45617 => dest_129
  # DEBUG curD.45616 => cur_128
  if (n_130 >= prephitmp_297)
    goto <bb 29>;
  else
    goto <bb 53>;
;;    succ:       29 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                53 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 53, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 52, next block 54, flags: (NEW)
;;    pred:       52 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 32>;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 54, loop depth 0, count 0, freq 1562, maybe hot
;;    prev block 53, next block 55, flags: (NEW, REACHABLE)
;;    pred:       15 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                29 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_12 = PHI <.MEM_31(15), .MEM_36(17), .MEM_285(29)>
  # VUSE <.MEM_12>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 55, loop depth 0, count 0, freq 1172, maybe hot
;;    prev block 54, next block 1, flags: (NEW, REACHABLE)
;;    pred:       12 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_244 = VDEF <.MEM_13(D)>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_29(D));
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

}


Creating dr for f_16(D)->type
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 0
Creating dr for gReadReqBeginVC
analyze_innermost: success.
	base_address: &gReadReqBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReqBeginVC
Creating dr for gReadReqEndVC
analyze_innermost: success.
	base_address: &gReadReqEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReqEndVC
Creating dr for gWriteReqBeginVC
analyze_innermost: success.
	base_address: &gWriteReqBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReqBeginVC
Creating dr for gWriteReqEndVC
analyze_innermost: success.
	base_address: &gWriteReqEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReqEndVC
Creating dr for gReadReplyBeginVC
analyze_innermost: success.
	base_address: &gReadReplyBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReplyBeginVC
Creating dr for gReadReplyEndVC
analyze_innermost: success.
	base_address: &gReadReplyEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReplyEndVC
Creating dr for gNumVCs
analyze_innermost: success.
	base_address: &gNumVCs
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gNumVCs
Creating dr for gWriteReplyBeginVC
analyze_innermost: success.
	base_address: &gWriteReplyBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReplyBeginVC
Creating dr for gWriteReplyEndVC
analyze_innermost: success.
	base_address: &gWriteReplyEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReplyEndVC
Creating dr for f_16(D)->vc
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 32
Creating dr for MEM[(int *)r_32(D) + 96B]
analyze_innermost: success.
	base_address: r_32(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(int *)r_32(D) + 96B]
Creating dr for f_16(D)->dest
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 352
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for f_16(D)->vc
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 32
Creating dr for f_16(D)->dest
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 352
Creating dr for f_16(D)->id
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 28
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 224
Creating dr for MEM[(const struct ctype *)_154]._M_widen_ok
analyze_innermost: success.
	base_address: _154
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: MEM[(const struct ctype *)_154]
	Access function 0: 448
Creating dr for MEM[(const struct ctype *)_154]._M_widen[10]
analyze_innermost: success.
	base_address: _154
	offset from base address: 0
	constant offset from base address: 67
	step: 0
	aligned to: 256
	base_object: MEM[(const struct ctype *)_154]
	Access function 0: 10
	Access function 1: 456
Creating dr for MEM[(int *)r_32(D) + 96B]
analyze_innermost: success.
	base_address: r_32(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(int *)r_32(D) + 96B]
Creating dr for f_16(D)->dest
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 352
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for f_16(D)->watch
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 448
Creating dr for f_16(D)->watch
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 448
Creating dr for f_16(D)->dest
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 352
Creating dr for f_16(D)->dest
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 352
Creating dr for f_16(D)->id
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 28
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 224
Creating dr for f_16(D)->id
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 28
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 224
Creating dr for MEM[(const struct ctype *)_182]._M_widen_ok
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct ctype *)_182]
	Access function 0: 448
Creating dr for MEM[(const struct ctype *)_182]._M_widen_ok
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct ctype *)_182]
	Access function 0: 448
Creating dr for MEM[(const struct ctype *)_182]._M_widen[10]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct ctype *)_182]
	Access function 0: 10
	Access function 1: 456
Creating dr for MEM[(const struct ctype *)_182]._M_widen[10]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct ctype *)_182]
	Access function 0: 10
	Access function 1: 456
Creating dr for f_16(D)->watch
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 448
Creating dr for f_16(D)->watch
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 56
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 448
Creating dr for f_16(D)->dest
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 352
Creating dr for f_16(D)->dest
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 352
Creating dr for f_16(D)->id
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 28
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 224
Creating dr for f_16(D)->id
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 28
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 224
Creating dr for MEM[(const struct ctype *)_168]._M_widen_ok
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct ctype *)_168]
	Access function 0: 448
Creating dr for MEM[(const struct ctype *)_168]._M_widen_ok
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct ctype *)_168]
	Access function 0: 448
Creating dr for MEM[(const struct ctype *)_168]._M_widen[10]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct ctype *)_168]
	Access function 0: 10
	Access function 1: 456
Creating dr for MEM[(const struct ctype *)_168]._M_widen[10]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(const struct ctype *)_168]
	Access function 0: 10
	Access function 1: 456

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:3, LOOPS:0, CONDITIONS:1, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:10, LOOPS:0, CONDITIONS:4, STMTS:26)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:60, LOOPS:1, CONDITIONS:26, STMTS:412)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # DEBUG vcBegin => 0
    # DEBUG D#202 => gNumVCs
    # DEBUG vcEnd => D#202 + -1
    # VUSE <.MEM_13(D)>
    _17 = f_16(D)->type;
    if (_17 == 0)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_11 })
  {
    <bb 3>:
    # VUSE <.MEM_13(D)>
    vcBegin_18 = gReadReqBeginVC;
    # DEBUG vcBegin => vcBegin_18
    # VUSE <.MEM_13(D)>
    in_vc_19 = gReadReqEndVC;
    # DEBUG vcEnd => in_vc_19
    goto <bb 11>;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 bb_6 })
  {
    <bb 4>:
    if (_17 == 2)
      goto <bb 5>;
    else
      goto <bb 6>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_11 })
  {
    <bb 5>:
    # VUSE <.MEM_13(D)>
    vcBegin_20 = gWriteReqBeginVC;
    # DEBUG vcBegin => vcBegin_20
    # VUSE <.MEM_13(D)>
    in_vc_21 = gWriteReqEndVC;
    # DEBUG vcEnd => in_vc_21
    goto <bb 11>;

  }
  bb_6 (preds = {bb_4 }, succs = {bb_7 bb_8 })
  {
    <bb 6>:
    if (_17 == 1)
      goto <bb 7>;
    else
      goto <bb 8>;

  }
  bb_7 (preds = {bb_6 }, succs = {bb_11 })
  {
    <bb 7>:
    # VUSE <.MEM_13(D)>
    vcBegin_22 = gReadReplyBeginVC;
    # DEBUG vcBegin => vcBegin_22
    # VUSE <.MEM_13(D)>
    in_vc_23 = gReadReplyEndVC;
    # DEBUG vcEnd => in_vc_23
    goto <bb 11>;

  }
  bb_8 (preds = {bb_6 }, succs = {bb_10 bb_9 })
  {
    <bb 8>:
    # VUSE <.MEM_13(D)>
    gNumVCs.62_14 = gNumVCs;
    if (_17 == 3)
      goto <bb 10>;
    else
      goto <bb 9>;

  }
  bb_9 (preds = {bb_8 }, succs = {bb_11 })
  {
    <bb 9>:
    in_vc_15 = gNumVCs.62_14 + -1;
    goto <bb 11>;

  }
  bb_10 (preds = {bb_8 }, succs = {bb_11 })
  {
    <bb 10>:
    # VUSE <.MEM_13(D)>
    vcBegin_24 = gWriteReplyBeginVC;
    # DEBUG vcBegin => vcBegin_24
    # VUSE <.MEM_13(D)>
    in_vc_25 = gWriteReplyEndVC;
    # DEBUG vcEnd => in_vc_25

  }
  bb_11 (preds = {bb_3 bb_5 bb_7 bb_9 bb_10 }, succs = {bb_59 })
  {
    <bb 11>:
    # vcBegin_1 = PHI <vcBegin_18(3), vcBegin_20(5), vcBegin_22(7), 0(9), vcBegin_24(10)>
    # in_vc_2 = PHI <in_vc_19(3), in_vc_21(5), in_vc_23(7), in_vc_15(9), in_vc_25(10)>

  }
  bb_59 (preds = {bb_11 }, succs = {bb_12 bb_14 })
  {
    <bb 59>:
    # DEBUG vcEnd => in_vc_2
    # DEBUG vcBegin => vcBegin_1
    # VUSE <.MEM_13(D)>
    _26 = f_16(D)->vc;
    _190 = in_vc_2 < _26;
    _242 = vcBegin_1 > _26;
    _216 = _190 | _242;
    if (_216 != 0)
      goto <bb 12>;
    else
      goto <bb 14>;

  }
  bb_12 (preds = {bb_59 }, succs = {bb_13 bb_55 })
  {
    <bb 12>:
    _286 = _26 >= 0;
    if (inject_27(D) <= _286)
      goto <bb 13>;
    else
      goto <bb 55>;

  }
  bb_13 (preds = {bb_12 }, succs = {})
  {
    <bb 13>:
    # .MEM_28 = VDEF <.MEM_13(D)>
    __assert_fail ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 948, &__PRETTY_FUNCTION__);

  }
  bb_14 (preds = {bb_59 }, succs = {bb_15 bb_16 })
  {
    <bb 14>:
    # .MEM_30 = VDEF <.MEM_13(D)>
    OutputSet::Clear (outputs_29(D));
    if (inject_27(D) != 0)
      goto <bb 15>;
    else
      goto <bb 16>;

  }
  bb_15 (preds = {bb_14 bb_55 }, succs = {bb_54 })
  {
    <bb 15>:
    # .MEM_205 = PHI <.MEM_30(14), .MEM_244(55)>
    # .MEM_31 = VDEF <.MEM_205>
    OutputSet::AddRange (outputs_29(D), -1, vcBegin_1, in_vc_2, 0);
    goto <bb 54>;

  }
  bb_16 (preds = {bb_14 }, succs = {bb_17 bb_18 })
  {
    <bb 16>:
    # VUSE <.MEM_30>
    _131 = MEM[(int *)r_32(D) + 96B];
    # DEBUG D#14 => r_32(D)
    # DEBUG this => D#14
    # VUSE <.MEM_30>
    _33 = f_16(D)->dest;
    if (_33 == _131)
      goto <bb 17>;
    else
      goto <bb 18>;

  }
  bb_17 (preds = {bb_16 }, succs = {bb_54 })
  {
    <bb 17>:
    # VUSE <.MEM_30>
    gN.64_34 = gN;
    _35 = gN.64_34 * 2;
    # .MEM_36 = VDEF <.MEM_30>
    OutputSet::AddRange (outputs_29(D), _35, vcBegin_1, in_vc_2, 0);
    goto <bb 54>;

  }
  bb_18 (preds = {bb_16 }, succs = {bb_20 bb_19 })
  {
    <bb 18>:
    # VUSE <.MEM_30>
    gN.64_37 = gN;
    _38 = gN.64_37 * 2;
    if (_38 == in_channel_39(D))
      goto <bb 20>;
    else
      goto <bb 19>;

  }
  bb_19 (preds = {bb_18 }, succs = {bb_20 })
  {
    <bb 19>:
    # VUSE <.MEM_30>
    in_vc_40 = f_16(D)->vc;
    # DEBUG in_vc => in_vc_40

  }
  bb_20 (preds = {bb_18 bb_19 }, succs = {bb_58 })
  {
    <bb 20>:
    # in_vc_3 = PHI <in_vc_2(18), in_vc_40(19)>

  }
  bb_58 (preds = {bb_20 }, succs = {bb_21 bb_28 })
  {
    <bb 58>:
    # DEBUG in_vc => in_vc_3
    # DEBUG D#14 => r_32(D)
    # DEBUG this => D#14
    # VUSE <.MEM_30>
    out_port_41 = dor_next_mesh (_131, _33, 0);
    # DEBUG out_port => out_port_41
    # .MEM_42 = VDEF <.MEM_30>
    OutputSet::AddRange (outputs_29(D), out_port_41, 0, vcBegin_1, vcBegin_1);
    # VUSE <.MEM_42>
    _43 = f_16(D)->watch;
    if (_43 != 0)
      goto <bb 21>;
    else
      goto <bb 28>;

  }
  bb_21 (preds = {bb_58 }, succs = {bb_22 bb_23 })
  {
    <bb 21>:
    # VUSE <.MEM_42>
    _44 = f_16(D)->dest;
    # VUSE <.MEM_42>
    _45 = f_16(D)->id;
    # DEBUG D#18 => &r_32(D)->D.42039.D.32226
    # DEBUG this => D#18
    # .MEM_46 = VDEF <.MEM_42>
    _47 = GetSimTime ();
    # VUSE <.MEM_46>
    gWatchOut.65_48 = gWatchOut;
    # .MEM_49 = VDEF <.MEM_46>
    _50 = std::basic_ostream<char>::operator<< (gWatchOut.65_48, _47);
    # DEBUG __out => _50
    # DEBUG __s => " | "
    # DEBUG __s => " | "
    # .MEM_142 = VDEF <.MEM_49>
    std::__ostream_insert<char, std::char_traits<char> > (_50, " | ", 3);
    # DEBUG __os => _50
    # DEBUG __str => NULL
    # VUSE <.MEM_142>
    _51 = MEM[(long unsigned int *)r_32(D) + 48B];
    # DEBUG this => D#1
    _133 = (long int) _51;
    # DEBUG this => NULL
    # VUSE <.MEM_142>
    _134 = MEM[(char * *)r_32(D) + 40B];
    # DEBUG this => D#3
    # .MEM_143 = VDEF <.MEM_142>
    _135 = std::__ostream_insert<char, std::char_traits<char> > (_50, _134, _133);
    # DEBUG __out => _135
    # DEBUG __s => " | "
    # DEBUG __s => " | "
    # .MEM_144 = VDEF <.MEM_143>
    std::__ostream_insert<char, std::char_traits<char> > (_135, " | ", 3);
    # DEBUG __out => _135
    # DEBUG __s => "Adding VC range ["
    # DEBUG __s => "Adding VC range ["
    # .MEM_145 = VDEF <.MEM_144>
    std::__ostream_insert<char, std::char_traits<char> > (_135, "Adding VC range [", 17);
    # .MEM_52 = VDEF <.MEM_145>
    _53 = std::basic_ostream<char>::operator<< (_135, vcBegin_1);
    # DEBUG __out => _53
    # DEBUG __s => ","
    # DEBUG __s => ","
    # .MEM_146 = VDEF <.MEM_52>
    std::__ostream_insert<char, std::char_traits<char> > (_53, ",", 1);
    # .MEM_54 = VDEF <.MEM_146>
    _55 = std::basic_ostream<char>::operator<< (_53, vcBegin_1);
    # DEBUG __out => _55
    # DEBUG __s => "]"
    # DEBUG __s => "]"
    # .MEM_147 = VDEF <.MEM_54>
    std::__ostream_insert<char, std::char_traits<char> > (_55, "]", 1);
    # DEBUG __out => _55
    # DEBUG __s => " at output port "
    # DEBUG __s => " at output port "
    # .MEM_148 = VDEF <.MEM_147>
    std::__ostream_insert<char, std::char_traits<char> > (_55, " at output port ", 16);
    # .MEM_56 = VDEF <.MEM_148>
    _57 = std::basic_ostream<char>::operator<< (_55, out_port_41);
    # DEBUG __out => _57
    # DEBUG __s => " for flit "
    # DEBUG __s => " for flit "
    # .MEM_149 = VDEF <.MEM_56>
    std::__ostream_insert<char, std::char_traits<char> > (_57, " for flit ", 10);
    # .MEM_58 = VDEF <.MEM_149>
    _59 = std::basic_ostream<char>::operator<< (_57, _45);
    # DEBUG __out => _59
    # DEBUG __s => " (input port "
    # DEBUG __s => " (input port "
    # .MEM_150 = VDEF <.MEM_58>
    std::__ostream_insert<char, std::char_traits<char> > (_59, " (input port ", 13);
    # .MEM_60 = VDEF <.MEM_150>
    _61 = std::basic_ostream<char>::operator<< (_59, in_channel_39(D));
    # DEBUG __out => _61
    # DEBUG __s => ", destination "
    # DEBUG __s => ", destination "
    # .MEM_151 = VDEF <.MEM_60>
    std::__ostream_insert<char, std::char_traits<char> > (_61, ", destination ", 14);
    # .MEM_62 = VDEF <.MEM_151>
    _63 = std::basic_ostream<char>::operator<< (_61, _44);
    # DEBUG __out => _63
    # DEBUG __s => ")"
    # DEBUG __s => ")"
    # .MEM_152 = VDEF <.MEM_62>
    std::__ostream_insert<char, std::char_traits<char> > (_63, ")", 1);
    # DEBUG __out => _63
    # DEBUG __s => "."
    # DEBUG __s => "."
    # .MEM_153 = VDEF <.MEM_152>
    std::__ostream_insert<char, std::char_traits<char> > (_63, ".", 1);
    # DEBUG this => _63
    # DEBUG __pf => endl
    # DEBUG __os => _63
    # VUSE <.MEM_153>
    _183 = _63->_vptr.basic_ostream;
    # VUSE <.MEM_153>
    _184 = MEM[(long int *)_183 + -24B];
    _185 = (sizetype) _184;
    _186 = _63 + _185;
    # DEBUG this => _186
    # DEBUG __c => 10
    # VUSE <.MEM_153>
    _154 = MEM[(const struct basic_ios *)_186]._M_ctype;
    # DEBUG __f => _154
    if (_154 == 0B)
      goto <bb 22>;
    else
      goto <bb 23>;

  }
  bb_22 (preds = {bb_21 bb_36 bb_45 }, succs = {})
  {
    <bb 22>:
    # .MEM_289 = PHI <.MEM_153(21), .MEM_181(36), .MEM_167(45)>
    # .MEM_272 = VDEF <.MEM_289>
    std::__throw_bad_cast ();

  }
  bb_23 (preds = {bb_21 }, succs = {bb_24 bb_25 })
  {
    <bb 23>:
    # DEBUG this => _154
    # DEBUG __c => 10
    # VUSE <.MEM_153>
    _191 = MEM[(const struct ctype *)_154]._M_widen_ok;
    if (_191 != 0)
      goto <bb 24>;
    else
      goto <bb 25>;

  }
  bb_24 (preds = {bb_23 }, succs = {bb_27 })
  {
    <bb 24>:
    # VUSE <.MEM_153>
    _194 = MEM[(const struct ctype *)_154]._M_widen[10];
    pretmp_292 = (int) _194;
    goto <bb 27>;

  }
  bb_25 (preds = {bb_23 }, succs = {bb_27 bb_26 })
  {
    <bb 25>:
    # DEBUG this => _154
    # DEBUG __c => 10
    # .MEM_264 = VDEF <.MEM_153>
    std::ctype<char>::_M_widen_init (_154);
    # VUSE <.MEM_264>
    _199 = MEM[(const struct ctype *)_154].D.20091._vptr.facet;
    # VUSE <.MEM_264>
    _200 = MEM[(int (*__vtbl_ptr_type) () *)_199 + 48B];
    PROF_204 = [obj_type_ref] OBJ_TYPE_REF(_200;(const struct ctype)_154->6);
    if (PROF_204 == do_widen)
      goto <bb 27>;
    else
      goto <bb 26>;

  }
  bb_26 (preds = {bb_25 }, succs = {bb_27 })
  {
    <bb 26>:
    # .MEM_265 = VDEF <.MEM_264>
    _206 = OBJ_TYPE_REF(_200;(const struct ctype)_154->6) (_154, 10);
    pretmp_293 = (int) _206;

  }
  bb_27 (preds = {bb_24 bb_25 bb_26 }, succs = {bb_28 })
  {
    <bb 27>:
    # .MEM_229 = PHI <.MEM_153(24), .MEM_264(25), .MEM_265(26)>
    # prephitmp_294 = PHI <pretmp_292(24), 10(25), pretmp_293(26)>
    # .MEM_269 = VDEF <.MEM_229>
    _189 = std::basic_ostream<char>::put (_63, prephitmp_294);
    # DEBUG __os => _189
    # .MEM_270 = VDEF <.MEM_269>
    std::basic_ostream<char>::flush (_189);

  }
  bb_28 (preds = {bb_58 bb_27 }, succs = {bb_30 bb_29 })
  {
    <bb 28>:
    # .MEM_7 = PHI <.MEM_42(58), .MEM_270(27)>
    if (vcBegin_1 != in_vc_3)
      goto <bb 30>;
    else
      goto <bb 29>;

  }
  bb_29 (preds = {bb_28 bb_30 bb_52 }, succs = {bb_56 })
  {
    <bb 29>:
    # .MEM_285 = PHI <.MEM_7(28), .MEM_7(30), .MEM_11(52)>

  }
  bb_56 (preds = {bb_29 }, succs = {bb_54 })
  {
    <bb 56>:
    goto <bb 54>;

  }
  bb_30 (preds = {bb_28 }, succs = {bb_29 bb_31 })
  {
    <bb 30>:
    # VUSE <.MEM_7>
    cur_132 = MEM[(int *)r_32(D) + 96B];
    # DEBUG D#14 => r_32(D)
    # DEBUG this => D#14
    # DEBUG cur => NULL
    # VUSE <.MEM_7>
    dest_64 = f_16(D)->dest;
    # DEBUG dest => dest_64
    # DEBUG n => 0
    # DEBUG n => 0
    # DEBUG dest => dest_64
    # DEBUG cur => cur_132
    # VUSE <.MEM_7>
    gN.64_255 = gN;
    if (gN.64_255 <= 0)
      goto <bb 29>;
    else
      goto <bb 31>;

  }
  bb_31 (preds = {bb_30 }, succs = {bb_32 })
  {
    <bb 31>:
    # VUSE <.MEM_7>
    pretmp_280 = gK;

  }
  bb_54 (preds = {bb_15 bb_17 bb_56 }, succs = {bb_57 })
  {
    <bb 54>:
    # .MEM_12 = PHI <.MEM_31(15), .MEM_36(17), .MEM_285(56)>

  }
  bb_57 (preds = {bb_54 }, succs = {bb_1 })
  {
    <bb 57>:
    # VUSE <.MEM_12>
    return;

  }
  bb_55 (preds = {bb_12 }, succs = {bb_15 })
  {
    <bb 55>:
    # .MEM_244 = VDEF <.MEM_13(D)>
    OutputSet::Clear (outputs_29(D));
    goto <bb 15>;

  }
  loop_1 (header = 32, latch = 53, niter = , upper_bound = 2147483647)
  {
    bb_32 (preds = {bb_31 bb_53 }, succs = {bb_33 bb_52 })
    {
      <bb 32>:
      # cur_207 = PHI <cur_132(31), cur_128(53)>
      # dest_195 = PHI <dest_64(31), dest_129(53)>
      # n_213 = PHI <0(31), n_130(53)>
      # .MEM_268 = PHI <.MEM_7(31), .MEM_11(53)>
      # prephitmp_203 = PHI <pretmp_280(31), prephitmp_248(53)>
      # prephitmp_202 = PHI <gN.64_255(31), prephitmp_297(53)>
      # DEBUG n => n_213
      # DEBUG dest => dest_195
      # DEBUG cur => cur_207
      _67 = cur_207 % prephitmp_203;
      _68 = dest_195 % prephitmp_203;
      if (_67 != _68)
        goto <bb 33>;
      else
        goto <bb 52>;

    }
    bb_33 (preds = {bb_32 }, succs = {bb_34 bb_43 })
    {
      <bb 33>:
      if (_67 < _68)
        goto <bb 34>;
      else
        goto <bb 43>;

    }
    bb_34 (preds = {bb_33 }, succs = {bb_36 bb_35 })
    {
      <bb 34>:
      # VUSE <.MEM_268>
      _99 = f_16(D)->watch;
      if (_99 != 0)
        goto <bb 36>;
      else
        goto <bb 35>;

    }
    bb_35 (preds = {bb_34 }, succs = {bb_42 })
    {
      <bb 35>:
      pretmp_224 = n_213 * 2;
      pretmp_231 = vcBegin_1 + 1;
      goto <bb 42>;

    }
    bb_36 (preds = {bb_34 }, succs = {bb_22 bb_37 })
    {
      <bb 36>:
      # VUSE <.MEM_268>
      _100 = f_16(D)->dest;
      # VUSE <.MEM_268>
      _101 = f_16(D)->id;
      _102 = n_213 * 2;
      _103 = vcBegin_1 + 1;
      # DEBUG D#20 => &r_32(D)->D.42039.D.32226
      # DEBUG this => D#20
      # .MEM_104 = VDEF <.MEM_268>
      _105 = GetSimTime ();
      # VUSE <.MEM_104>
      gWatchOut.65_106 = gWatchOut;
      # .MEM_107 = VDEF <.MEM_104>
      _108 = std::basic_ostream<char>::operator<< (gWatchOut.65_106, _105);
      # DEBUG __out => _108
      # DEBUG __s => " | "
      # DEBUG __s => " | "
      # .MEM_169 = VDEF <.MEM_107>
      std::__ostream_insert<char, std::char_traits<char> > (_108, " | ", 3);
      # DEBUG __os => _108
      # DEBUG __str => NULL
      # VUSE <.MEM_169>
      _109 = MEM[(long unsigned int *)r_32(D) + 48B];
      # DEBUG this => D#1
      _136 = (long int) _109;
      # DEBUG this => NULL
      # VUSE <.MEM_169>
      _137 = MEM[(char * *)r_32(D) + 40B];
      # DEBUG this => D#3
      # .MEM_170 = VDEF <.MEM_169>
      _138 = std::__ostream_insert<char, std::char_traits<char> > (_108, _137, _136);
      # DEBUG __out => _138
      # DEBUG __s => " | "
      # DEBUG __s => " | "
      # .MEM_171 = VDEF <.MEM_170>
      std::__ostream_insert<char, std::char_traits<char> > (_138, " | ", 3);
      # DEBUG __out => _138
      # DEBUG __s => "Adding VC range ["
      # DEBUG __s => "Adding VC range ["
      # .MEM_172 = VDEF <.MEM_171>
      std::__ostream_insert<char, std::char_traits<char> > (_138, "Adding VC range [", 17);
      # .MEM_110 = VDEF <.MEM_172>
      _111 = std::basic_ostream<char>::operator<< (_138, _103);
      # DEBUG __out => _111
      # DEBUG __s => ","
      # DEBUG __s => ","
      # .MEM_173 = VDEF <.MEM_110>
      std::__ostream_insert<char, std::char_traits<char> > (_111, ",", 1);
      # .MEM_112 = VDEF <.MEM_173>
      _113 = std::basic_ostream<char>::operator<< (_111, in_vc_2);
      # DEBUG __out => _113
      # DEBUG __s => "]"
      # DEBUG __s => "]"
      # .MEM_174 = VDEF <.MEM_112>
      std::__ostream_insert<char, std::char_traits<char> > (_113, "]", 1);
      # DEBUG __out => _113
      # DEBUG __s => " at output port "
      # DEBUG __s => " at output port "
      # .MEM_175 = VDEF <.MEM_174>
      std::__ostream_insert<char, std::char_traits<char> > (_113, " at output port ", 16);
      # .MEM_114 = VDEF <.MEM_175>
      _115 = std::basic_ostream<char>::operator<< (_113, _102);
      # DEBUG __out => _115
      # DEBUG __s => " with priority "
      # DEBUG __s => " with priority "
      # .MEM_176 = VDEF <.MEM_114>
      std::__ostream_insert<char, std::char_traits<char> > (_115, " with priority ", 15);
      # .MEM_116 = VDEF <.MEM_176>
      _117 = std::basic_ostream<char>::operator<< (_115, 1);
      # DEBUG __out => _117
      # DEBUG __s => " for flit "
      # DEBUG __s => " for flit "
      # .MEM_177 = VDEF <.MEM_116>
      std::__ostream_insert<char, std::char_traits<char> > (_117, " for flit ", 10);
      # .MEM_118 = VDEF <.MEM_177>
      _119 = std::basic_ostream<char>::operator<< (_117, _101);
      # DEBUG __out => _119
      # DEBUG __s => " (input port "
      # DEBUG __s => " (input port "
      # .MEM_178 = VDEF <.MEM_118>
      std::__ostream_insert<char, std::char_traits<char> > (_119, " (input port ", 13);
      # .MEM_120 = VDEF <.MEM_178>
      _121 = std::basic_ostream<char>::operator<< (_119, in_channel_39(D));
      # DEBUG __out => _121
      # DEBUG __s => ", destination "
      # DEBUG __s => ", destination "
      # .MEM_179 = VDEF <.MEM_120>
      std::__ostream_insert<char, std::char_traits<char> > (_121, ", destination ", 14);
      # .MEM_122 = VDEF <.MEM_179>
      _123 = std::basic_ostream<char>::operator<< (_121, _100);
      # DEBUG __out => _123
      # DEBUG __s => ")"
      # DEBUG __s => ")"
      # .MEM_180 = VDEF <.MEM_122>
      std::__ostream_insert<char, std::char_traits<char> > (_123, ")", 1);
      # DEBUG __out => _123
      # DEBUG __s => "."
      # DEBUG __s => "."
      # .MEM_181 = VDEF <.MEM_180>
      std::__ostream_insert<char, std::char_traits<char> > (_123, ".", 1);
      # DEBUG this => _123
      # DEBUG __pf => endl
      # DEBUG __os => _123
      # VUSE <.MEM_181>
      _209 = _123->_vptr.basic_ostream;
      # VUSE <.MEM_181>
      _210 = MEM[(long int *)_209 + -24B];
      _211 = (sizetype) _210;
      _212 = _123 + _211;
      # DEBUG this => _212
      # DEBUG __c => 10
      # VUSE <.MEM_181>
      _182 = MEM[(const struct basic_ios *)_212]._M_ctype;
      # DEBUG __f => _182
      if (_182 == 0B)
        goto <bb 22>;
      else
        goto <bb 37>;

    }
    bb_37 (preds = {bb_36 }, succs = {bb_38 bb_39 })
    {
      <bb 37>:
      # DEBUG this => _182
      # DEBUG __c => 10
      # VUSE <.MEM_181>
      _217 = MEM[(const struct ctype *)_182]._M_widen_ok;
      if (_217 != 0)
        goto <bb 38>;
      else
        goto <bb 39>;

    }
    bb_38 (preds = {bb_37 }, succs = {bb_41 })
    {
      <bb 38>:
      # VUSE <.MEM_181>
      _220 = MEM[(const struct ctype *)_182]._M_widen[10];
      pretmp_284 = (int) _220;
      goto <bb 41>;

    }
    bb_39 (preds = {bb_37 }, succs = {bb_41 bb_40 })
    {
      <bb 39>:
      # DEBUG this => _182
      # DEBUG __c => 10
      # .MEM_282 = VDEF <.MEM_181>
      std::ctype<char>::_M_widen_init (_182);
      # VUSE <.MEM_282>
      _225 = MEM[(const struct ctype *)_182].D.20091._vptr.facet;
      # VUSE <.MEM_282>
      _226 = MEM[(int (*__vtbl_ptr_type) () *)_225 + 48B];
      PROF_230 = [obj_type_ref] OBJ_TYPE_REF(_226;(const struct ctype)_182->6);
      if (PROF_230 == do_widen)
        goto <bb 41>;
      else
        goto <bb 40>;

    }
    bb_40 (preds = {bb_39 }, succs = {bb_41 })
    {
      <bb 40>:
      # .MEM_283 = VDEF <.MEM_282>
      _232 = OBJ_TYPE_REF(_226;(const struct ctype)_182->6) (_182, 10);
      pretmp_233 = (int) _232;

    }
    bb_41 (preds = {bb_38 bb_39 bb_40 }, succs = {bb_42 })
    {
      <bb 41>:
      # .MEM_261 = PHI <.MEM_181(38), .MEM_282(39), .MEM_283(40)>
      # prephitmp_291 = PHI <pretmp_284(38), 10(39), pretmp_233(40)>
      # .MEM_287 = VDEF <.MEM_261>
      _215 = std::basic_ostream<char>::put (_123, prephitmp_291);
      # DEBUG __os => _215
      # .MEM_288 = VDEF <.MEM_287>
      std::basic_ostream<char>::flush (_215);

    }
    bb_42 (preds = {bb_35 bb_41 }, succs = {bb_52 })
    {
      <bb 42>:
      # .MEM_9 = PHI <.MEM_268(35), .MEM_288(41)>
      # prephitmp_227 = PHI <pretmp_224(35), _102(41)>
      # prephitmp_234 = PHI <pretmp_231(35), _103(41)>
      # .MEM_126 = VDEF <.MEM_9>
      OutputSet::AddRange (outputs_29(D), prephitmp_227, prephitmp_234, in_vc_2, 1);
      # VUSE <.MEM_126>
      pretmp_276 = gK;
      # VUSE <.MEM_126>
      pretmp_296 = gN;
      goto <bb 52>;

    }
    bb_43 (preds = {bb_33 }, succs = {bb_45 bb_44 })
    {
      <bb 43>:
      # VUSE <.MEM_268>
      _69 = f_16(D)->watch;
      if (_69 != 0)
        goto <bb 45>;
      else
        goto <bb 44>;

    }
    bb_44 (preds = {bb_43 }, succs = {bb_51 })
    {
      <bb 44>:
      pretmp_250 = n_213 * 2;
      pretmp_257 = pretmp_250 + 1;
      pretmp_275 = vcBegin_1 + 1;
      goto <bb 51>;

    }
    bb_45 (preds = {bb_43 }, succs = {bb_22 bb_46 })
    {
      <bb 45>:
      # VUSE <.MEM_268>
      _70 = f_16(D)->dest;
      # VUSE <.MEM_268>
      _71 = f_16(D)->id;
      _72 = n_213 * 2;
      _73 = _72 + 1;
      _74 = vcBegin_1 + 1;
      # DEBUG D#19 => &r_32(D)->D.42039.D.32226
      # DEBUG this => D#19
      # .MEM_75 = VDEF <.MEM_268>
      _76 = GetSimTime ();
      # VUSE <.MEM_75>
      gWatchOut.65_77 = gWatchOut;
      # .MEM_78 = VDEF <.MEM_75>
      _79 = std::basic_ostream<char>::operator<< (gWatchOut.65_77, _76);
      # DEBUG __out => _79
      # DEBUG __s => " | "
      # DEBUG __s => " | "
      # .MEM_155 = VDEF <.MEM_78>
      std::__ostream_insert<char, std::char_traits<char> > (_79, " | ", 3);
      # DEBUG __os => _79
      # DEBUG __str => NULL
      # VUSE <.MEM_155>
      _80 = MEM[(long unsigned int *)r_32(D) + 48B];
      # DEBUG this => D#1
      _139 = (long int) _80;
      # DEBUG this => NULL
      # VUSE <.MEM_155>
      _140 = MEM[(char * *)r_32(D) + 40B];
      # DEBUG this => D#3
      # .MEM_156 = VDEF <.MEM_155>
      _141 = std::__ostream_insert<char, std::char_traits<char> > (_79, _140, _139);
      # DEBUG __out => _141
      # DEBUG __s => " | "
      # DEBUG __s => " | "
      # .MEM_157 = VDEF <.MEM_156>
      std::__ostream_insert<char, std::char_traits<char> > (_141, " | ", 3);
      # DEBUG __out => _141
      # DEBUG __s => "Adding VC range ["
      # DEBUG __s => "Adding VC range ["
      # .MEM_158 = VDEF <.MEM_157>
      std::__ostream_insert<char, std::char_traits<char> > (_141, "Adding VC range [", 17);
      # .MEM_81 = VDEF <.MEM_158>
      _82 = std::basic_ostream<char>::operator<< (_141, _74);
      # DEBUG __out => _82
      # DEBUG __s => ","
      # DEBUG __s => ","
      # .MEM_159 = VDEF <.MEM_81>
      std::__ostream_insert<char, std::char_traits<char> > (_82, ",", 1);
      # .MEM_83 = VDEF <.MEM_159>
      _84 = std::basic_ostream<char>::operator<< (_82, in_vc_2);
      # DEBUG __out => _84
      # DEBUG __s => "]"
      # DEBUG __s => "]"
      # .MEM_160 = VDEF <.MEM_83>
      std::__ostream_insert<char, std::char_traits<char> > (_84, "]", 1);
      # DEBUG __out => _84
      # DEBUG __s => " at output port "
      # DEBUG __s => " at output port "
      # .MEM_161 = VDEF <.MEM_160>
      std::__ostream_insert<char, std::char_traits<char> > (_84, " at output port ", 16);
      # .MEM_85 = VDEF <.MEM_161>
      _86 = std::basic_ostream<char>::operator<< (_84, _73);
      # DEBUG __out => _86
      # DEBUG __s => " with priority "
      # DEBUG __s => " with priority "
      # .MEM_162 = VDEF <.MEM_85>
      std::__ostream_insert<char, std::char_traits<char> > (_86, " with priority ", 15);
      # .MEM_87 = VDEF <.MEM_162>
      _88 = std::basic_ostream<char>::operator<< (_86, 1);
      # DEBUG __out => _88
      # DEBUG __s => " for flit "
      # DEBUG __s => " for flit "
      # .MEM_163 = VDEF <.MEM_87>
      std::__ostream_insert<char, std::char_traits<char> > (_88, " for flit ", 10);
      # .MEM_89 = VDEF <.MEM_163>
      _90 = std::basic_ostream<char>::operator<< (_88, _71);
      # DEBUG __out => _90
      # DEBUG __s => " (input port "
      # DEBUG __s => " (input port "
      # .MEM_164 = VDEF <.MEM_89>
      std::__ostream_insert<char, std::char_traits<char> > (_90, " (input port ", 13);
      # .MEM_91 = VDEF <.MEM_164>
      _92 = std::basic_ostream<char>::operator<< (_90, in_channel_39(D));
      # DEBUG __out => _92
      # DEBUG __s => ", destination "
      # DEBUG __s => ", destination "
      # .MEM_165 = VDEF <.MEM_91>
      std::__ostream_insert<char, std::char_traits<char> > (_92, ", destination ", 14);
      # .MEM_93 = VDEF <.MEM_165>
      _94 = std::basic_ostream<char>::operator<< (_92, _70);
      # DEBUG __out => _94
      # DEBUG __s => ")"
      # DEBUG __s => ")"
      # .MEM_166 = VDEF <.MEM_93>
      std::__ostream_insert<char, std::char_traits<char> > (_94, ")", 1);
      # DEBUG __out => _94
      # DEBUG __s => "."
      # DEBUG __s => "."
      # .MEM_167 = VDEF <.MEM_166>
      std::__ostream_insert<char, std::char_traits<char> > (_94, ".", 1);
      # DEBUG this => _94
      # DEBUG __pf => endl
      # DEBUG __os => _94
      # VUSE <.MEM_167>
      _235 = _94->_vptr.basic_ostream;
      # VUSE <.MEM_167>
      _236 = MEM[(long int *)_235 + -24B];
      _237 = (sizetype) _236;
      _238 = _94 + _237;
      # DEBUG this => _238
      # DEBUG __c => 10
      # VUSE <.MEM_167>
      _168 = MEM[(const struct basic_ios *)_238]._M_ctype;
      # DEBUG __f => _168
      if (_168 == 0B)
        goto <bb 22>;
      else
        goto <bb 46>;

    }
    bb_46 (preds = {bb_45 }, succs = {bb_47 bb_48 })
    {
      <bb 46>:
      # DEBUG this => _168
      # DEBUG __c => 10
      # VUSE <.MEM_167>
      _243 = MEM[(const struct ctype *)_168]._M_widen_ok;
      if (_243 != 0)
        goto <bb 47>;
      else
        goto <bb 48>;

    }
    bb_47 (preds = {bb_46 }, succs = {bb_50 })
    {
      <bb 47>:
      # VUSE <.MEM_167>
      _246 = MEM[(const struct ctype *)_168]._M_widen[10];
      pretmp_218 = (int) _246;
      goto <bb 50>;

    }
    bb_48 (preds = {bb_46 }, succs = {bb_50 bb_49 })
    {
      <bb 48>:
      # DEBUG this => _168
      # DEBUG __c => 10
      # .MEM_273 = VDEF <.MEM_167>
      std::ctype<char>::_M_widen_init (_168);
      # VUSE <.MEM_273>
      _251 = MEM[(const struct ctype *)_168].D.20091._vptr.facet;
      # VUSE <.MEM_273>
      _252 = MEM[(int (*__vtbl_ptr_type) () *)_251 + 48B];
      PROF_256 = [obj_type_ref] OBJ_TYPE_REF(_252;(const struct ctype)_168->6);
      if (PROF_256 == do_widen)
        goto <bb 50>;
      else
        goto <bb 49>;

    }
    bb_49 (preds = {bb_48 }, succs = {bb_50 })
    {
      <bb 49>:
      # .MEM_274 = VDEF <.MEM_273>
      _258 = OBJ_TYPE_REF(_252;(const struct ctype)_168->6) (_168, 10);
      pretmp_219 = (int) _258;

    }
    bb_50 (preds = {bb_47 bb_48 bb_49 }, succs = {bb_51 })
    {
      <bb 50>:
      # .MEM_263 = PHI <.MEM_167(47), .MEM_273(48), .MEM_274(49)>
      # prephitmp_221 = PHI <pretmp_218(47), 10(48), pretmp_219(49)>
      # .MEM_278 = VDEF <.MEM_263>
      _241 = std::basic_ostream<char>::put (_94, prephitmp_221);
      # DEBUG __os => _241
      # .MEM_279 = VDEF <.MEM_278>
      std::basic_ostream<char>::flush (_241);

    }
    bb_51 (preds = {bb_44 bb_50 }, succs = {bb_52 })
    {
      <bb 51>:
      # .MEM_10 = PHI <.MEM_268(44), .MEM_279(50)>
      # prephitmp_260 = PHI <pretmp_257(44), _73(50)>
      # prephitmp_259 = PHI <pretmp_275(44), _74(50)>
      # .MEM_98 = VDEF <.MEM_10>
      OutputSet::AddRange (outputs_29(D), prephitmp_260, prephitmp_259, in_vc_2, 1);
      # VUSE <.MEM_98>
      pretmp_271 = gK;
      # VUSE <.MEM_98>
      pretmp_295 = gN;

    }
    bb_52 (preds = {bb_32 bb_51 bb_42 }, succs = {bb_29 bb_53 })
    {
      <bb 52>:
      # .MEM_11 = PHI <.MEM_268(32), .MEM_98(51), .MEM_126(42)>
      # prephitmp_248 = PHI <prephitmp_203(32), pretmp_271(51), pretmp_276(42)>
      # prephitmp_297 = PHI <prephitmp_202(32), pretmp_295(51), pretmp_296(42)>
      cur_128 = cur_207 / prephitmp_248;
      # DEBUG cur => cur_128
      dest_129 = dest_195 / prephitmp_248;
      # DEBUG dest => dest_129
      n_130 = n_213 + 1;
      # DEBUG n => n_130
      # DEBUG n => n_130
      # DEBUG dest => dest_129
      # DEBUG cur => cur_128
      if (n_130 >= prephitmp_297)
        goto <bb 29>;
      else
        goto <bb 53>;

    }
    bb_53 (preds = {bb_52 }, succs = {bb_32 })
    {
      <bb 53>:
      goto <bb 32>;

    }
  }
}

Pass statistics:
----------------

void min_adapt_mesh(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45604, const struct FlitD.29321 * fD.45605, intD.9 in_channelD.45606, struct OutputSetD.28230 * outputsD.45607, boolD.2757 injectD.45608)
{
  char_typeD.19944 D.55228;
  charD.10 __cD.55227;
  char_typeD.19944 D.55225;
  charD.10 __cD.55224;
  char_typeD.23023 D.55222;
  struct basic_ostreamD.11177 & D.55216;
  char_typeD.19944 D.55213;
  charD.10 __cD.55212;
  char_typeD.19944 D.55210;
  charD.10 __cD.55209;
  char_typeD.23023 D.55207;
  struct basic_ostreamD.11177 & D.55201;
  char_typeD.19944 D.55198;
  charD.10 __cD.55197;
  char_typeD.19944 D.55195;
  charD.10 __cD.55194;
  char_typeD.23023 D.55192;
  struct basic_ostreamD.11177 & D.55186;
  intD.9 nD.45618;
  intD.9 destD.45617;
  intD.9 curD.45616;
  intD.9 out_portD.45615;
  intD.9 in_vcD.45614;
  static const charD.10 _ZZ14min_adapt_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45613[71] = "void min_adapt_mesh(const Router*, const Flit*, int, OutputSet*, bool)";
  intD.9 vcBeginD.45611;
  intD.9 gNumVCs.62_14;
  FlitTypeD.29324 _17;
  intD.9 _26;
  intD.9 _33;
  intD.9 gN.64_34;
  intD.9 _35;
  intD.9 gN.64_37;
  intD.9 _38;
  boolD.2757 _43;
  intD.9 _44;
  intD.9 _45;
  intD.9 _47;
  struct ostreamD.11178 * gWatchOut.65_48;
  struct basic_ostreamD.11177 & _50;
  const size_typeD.14319 _51;
  struct basic_ostreamD.11177 & _53;
  struct basic_ostreamD.11177 & _55;
  struct basic_ostreamD.11177 & _57;
  struct basic_ostreamD.11177 & _59;
  struct basic_ostreamD.11177 & _61;
  struct basic_ostreamD.11177 & _63;
  intD.9 _67;
  intD.9 _68;
  boolD.2757 _69;
  intD.9 _70;
  intD.9 _71;
  intD.9 _72;
  intD.9 _73;
  intD.9 _74;
  intD.9 _76;
  struct ostreamD.11178 * gWatchOut.65_77;
  struct basic_ostreamD.11177 & _79;
  const size_typeD.14319 _80;
  struct basic_ostreamD.11177 & _82;
  struct basic_ostreamD.11177 & _84;
  struct basic_ostreamD.11177 & _86;
  struct basic_ostreamD.11177 & _88;
  struct basic_ostreamD.11177 & _90;
  struct basic_ostreamD.11177 & _92;
  struct basic_ostreamD.11177 & _94;
  boolD.2757 _99;
  intD.9 _100;
  intD.9 _101;
  intD.9 _102;
  intD.9 _103;
  intD.9 _105;
  struct ostreamD.11178 * gWatchOut.65_106;
  struct basic_ostreamD.11177 & _108;
  const size_typeD.14319 _109;
  struct basic_ostreamD.11177 & _111;
  struct basic_ostreamD.11177 & _113;
  struct basic_ostreamD.11177 & _115;
  struct basic_ostreamD.11177 & _117;
  struct basic_ostreamD.11177 & _119;
  struct basic_ostreamD.11177 & _121;
  struct basic_ostreamD.11177 & _123;
  const intD.9 _131;
  long intD.12 _133;
  charD.10 * const _134;
  struct basic_ostreamD.11177 & _135;
  long intD.12 _136;
  charD.10 * const _137;
  struct basic_ostreamD.11177 & _138;
  long intD.12 _139;
  charD.10 * const _140;
  struct basic_ostreamD.11177 & _141;
  const struct __ctype_typeD.23028 * _154;
  const struct __ctype_typeD.23028 * _168;
  const struct __ctype_typeD.23028 * _182;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _183;
  long intD.12 _184;
  sizetype _185;
  struct basic_iosD.11171 * _186;
  struct basic_ostreamD.11177 & _189;
  boolD.2757 _190;
  charD.10 _191;
  char_typeD.19944 _194;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _199;
  intD.9 (*__vtbl_ptr_typeD.2760) () _200;
  intD.9 prephitmp_202;
  intD.9 prephitmp_203;
  voidD.45 * PROF_204;
  char_typeD.19944 _206;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _209;
  long intD.12 _210;
  sizetype _211;
  struct basic_iosD.11171 * _212;
  struct basic_ostreamD.11177 & _215;
  boolD.2757 _216;
  charD.10 _217;
  intD.9 pretmp_218;
  intD.9 pretmp_219;
  char_typeD.19944 _220;
  intD.9 prephitmp_221;
  intD.9 pretmp_224;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _225;
  intD.9 (*__vtbl_ptr_typeD.2760) () _226;
  intD.9 prephitmp_227;
  voidD.45 * PROF_230;
  intD.9 pretmp_231;
  char_typeD.19944 _232;
  intD.9 pretmp_233;
  intD.9 prephitmp_234;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _235;
  long intD.12 _236;
  sizetype _237;
  struct basic_iosD.11171 * _238;
  struct basic_ostreamD.11177 & _241;
  boolD.2757 _242;
  charD.10 _243;
  char_typeD.19944 _246;
  intD.9 prephitmp_248;
  intD.9 pretmp_250;
  intD.9 (*__vtbl_ptr_typeD.2760) () * _251;
  intD.9 (*__vtbl_ptr_typeD.2760) () _252;
  intD.9 gN.64_255;
  voidD.45 * PROF_256;
  intD.9 pretmp_257;
  char_typeD.19944 _258;
  intD.9 prephitmp_259;
  intD.9 prephitmp_260;
  intD.9 pretmp_271;
  intD.9 pretmp_275;
  intD.9 pretmp_276;
  intD.9 pretmp_280;
  intD.9 pretmp_284;
  boolD.2757 _286;
  intD.9 prephitmp_291;
  intD.9 pretmp_292;
  intD.9 pretmp_293;
  intD.9 prephitmp_294;
  intD.9 pretmp_295;
  intD.9 pretmp_296;
  intD.9 prephitmp_297;

;;   basic block 2, loop depth 0, count 0, freq 1564, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG vcBeginD.45611 => 0
  # DEBUG D#202ptD.0 => gNumVCsD.42077
  # DEBUG vcEndD.45612 => D#202ptD.0 + -1
  # VUSE <.MEM_13(D)>
  _17 = f_16(D)->typeD.29330;
  if (_17 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 782, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  vcBegin_18 = gReadReqBeginVCD.42078;
  # DEBUG vcBeginD.45611 => vcBegin_18
  # VUSE <.MEM_13(D)>
  in_vc_19 = gReadReqEndVCD.42079;
  # DEBUG vcEndD.45612 => in_vc_19
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 782, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_17 == 2)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 219, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  vcBegin_20 = gWriteReqBeginVCD.42080;
  # DEBUG vcBeginD.45611 => vcBegin_20
  # VUSE <.MEM_13(D)>
  in_vc_21 = gWriteReqEndVCD.42081;
  # DEBUG vcEndD.45612 => in_vc_21
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 563, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_17 == 1)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 158, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  vcBegin_22 = gReadReplyBeginVCD.42082;
  # DEBUG vcBeginD.45611 => vcBegin_22
  # VUSE <.MEM_13(D)>
  in_vc_23 = gReadReplyEndVCD.42083;
  # DEBUG vcEndD.45612 => in_vc_23
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 405, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  gNumVCs.62_14 = gNumVCsD.42077;
  if (_17 == 3)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 292, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  in_vc_15 = gNumVCs.62_14 + -1;
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 113, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  vcBegin_24 = gWriteReplyBeginVCD.42084;
  # DEBUG vcBeginD.45611 => vcBegin_24
  # VUSE <.MEM_13(D)>
  in_vc_25 = gWriteReplyEndVCD.42085;
  # DEBUG vcEndD.45612 => in_vc_25
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 1564, maybe hot
;;    prev block 10, next block 59, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # vcBegin_1 = PHI <vcBegin_18(3), vcBegin_20(5), vcBegin_22(7), 0(9), vcBegin_24(10)>
  # in_vc_2 = PHI <in_vc_19(3), in_vc_21(5), in_vc_23(7), in_vc_15(9), in_vc_25(10)>
;;    succ:       59 [100.0%]  (FALLTHRU)

;;   basic block 59, loop depth 0, count 0, freq 1564, maybe hot
;;    prev block 11, next block 12, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU)
  # DEBUG vcEndD.45612 => in_vc_2
  # DEBUG vcBeginD.45611 => vcBegin_1
  # VUSE <.MEM_13(D)>
  _26 = f_16(D)->vcD.29331;
  _190 = in_vc_2 < _26;
  _242 = vcBegin_1 > _26;
  _216 = _190 | _242;
  if (_216 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 1172, maybe hot
;;   Invalid sum of incoming frequencies 782, should be 1172
;;    prev block 59, next block 13, flags: (NEW, REACHABLE)
;;    pred:       59 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  _286 = _26 >= 0;
  if (inject_27(D) <= _286)
    goto <bb 13>;
  else
    goto <bb 55>;
;;    succ:       13 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                55 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_28 = VDEF <.MEM_13(D)>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  __assert_failD.9858 ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 948, &_ZZ14min_adapt_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45613);
;;    succ:      

;;   basic block 14, loop depth 0, count 0, freq 391, maybe hot
;;   Invalid sum of incoming frequencies 782, should be 391
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       59 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_30 = VDEF <.MEM_13(D)>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_29(D));
  if (inject_27(D) != 0)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 (TRUE_VALUE,EXECUTABLE)
;;                16 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 324, maybe hot
;;   Invalid sum of incoming frequencies 1172, should be 324
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 (TRUE_VALUE,EXECUTABLE)
;;                55 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_205 = PHI <.MEM_30(14), .MEM_244(55)>
  # .MEM_31 = VDEF <.MEM_205>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_29(D), -1, vcBegin_1, in_vc_2, 0);
  goto <bb 54>;
;;    succ:       54 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 1239, maybe hot
;;   Invalid sum of incoming frequencies 391, should be 1239
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_30>
  _131 = MEM[(intD.9 *)r_32(D) + 96B];
  # DEBUG D#14ptD.0 => r_32(D)
  # DEBUG thisD.51086 => D#14ptD.0
  # VUSE <.MEM_30>
  _33 = f_16(D)->destD.29342;
  if (_33 == _131)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [9.2%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [90.8%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 114, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [9.2%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_30>
  gN.64_34 = gND.33727;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _35 = gN.64_34 * 2;
  # .MEM_36 = VDEF <.MEM_30>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_29(D), _35, vcBegin_1, in_vc_2, 0);
  goto <bb 54>;
;;    succ:       54 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 1125, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       16 [90.8%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_30>
  gN.64_37 = gND.33727;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _38 = gN.64_37 * 2;
  if (_38 == in_channel_39(D))
    goto <bb 20>;
  else
    goto <bb 19>;
;;    succ:       20 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 810, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_30>
  in_vc_40 = f_16(D)->vcD.29331;
  # DEBUG in_vcD.45614 => in_vc_40
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 1125, maybe hot
;;    prev block 19, next block 58, flags: (NEW, REACHABLE)
;;    pred:       18 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # in_vc_3 = PHI <in_vc_2(18), in_vc_40(19)>
;;    succ:       58 [100.0%]  (FALLTHRU)

;;   basic block 58, loop depth 0, count 0, freq 1125, maybe hot
;;    prev block 20, next block 21, flags: (NEW)
;;    pred:       20 [100.0%]  (FALLTHRU)
  # DEBUG in_vcD.45614 => in_vc_3
  # DEBUG D#14ptD.0 => r_32(D)
  # DEBUG thisD.51089 => D#14ptD.0
  # VUSE <.MEM_30>
  # USE = nonlocal escaped null 
  out_port_41 = _Z13dor_next_meshiibD.45450 (_131, _33, 0);
  # DEBUG out_portD.45615 => out_port_41
  # .MEM_42 = VDEF <.MEM_30>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_29(D), out_port_41, 0, vcBegin_1, vcBegin_1);
  # VUSE <.MEM_42>
  _43 = f_16(D)->watchD.29345;
  if (_43 != 0)
    goto <bb 21>;
  else
    goto <bb 28>;
;;    succ:       21 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 326, maybe hot
;;    prev block 58, next block 22, flags: (NEW, REACHABLE)
;;    pred:       58 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_42>
  _44 = f_16(D)->destD.29342;
  # VUSE <.MEM_42>
  _45 = f_16(D)->idD.29338;
  # DEBUG D#18ptD.0 => &r_32(D)->D.42039.D.32226
  # DEBUG thisD.51141 => D#18ptD.0
  # .MEM_46 = VDEF <.MEM_42>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _47 = _Z10GetSimTimevD.33721 ();
  # VUSE <.MEM_46>
  # PT = nonlocal escaped 
  gWatchOut.65_48 = gWatchOutD.33731;
  # .MEM_49 = VDEF <.MEM_46>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _50 = _ZNSolsEiD.23719 (gWatchOut.65_48, _47);
  # DEBUG __outD.51137 => _50
  # DEBUG __sD.51138 => " | "
  # DEBUG __sD.51139 => " | "
  # .MEM_142 = VDEF <.MEM_49>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_50, " | ", 3);
  # DEBUG __osD.51134 => _50
  # DEBUG __strD.51135 => NULL
  # VUSE <.MEM_142>
  _51 = MEM[(long unsigned intD.14 *)r_32(D) + 48B];
  # DEBUG thisD.50724 => D#1ptD.0
  _133 = (long intD.12) _51;
  # DEBUG thisD.50721 => NULL
  # VUSE <.MEM_142>
  # PT = nonlocal escaped 
  _134 = MEM[(charD.10 * *)r_32(D) + 40B];
  # DEBUG thisD.50676 => D#3ptD.0
  # .MEM_143 = VDEF <.MEM_142>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _135 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_50, _134, _133);
  # DEBUG __outD.51130 => _135
  # DEBUG __sD.51131 => " | "
  # DEBUG __sD.51132 => " | "
  # .MEM_144 = VDEF <.MEM_143>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_135, " | ", 3);
  # DEBUG __outD.51126 => _135
  # DEBUG __sD.51127 => "Adding VC range ["
  # DEBUG __sD.51128 => "Adding VC range ["
  # .MEM_145 = VDEF <.MEM_144>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_135, "Adding VC range [", 17);
  # .MEM_52 = VDEF <.MEM_145>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _53 = _ZNSolsEiD.23719 (_135, vcBegin_1);
  # DEBUG __outD.51122 => _53
  # DEBUG __sD.51123 => ","
  # DEBUG __sD.51124 => ","
  # .MEM_146 = VDEF <.MEM_52>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_53, ",", 1);
  # .MEM_54 = VDEF <.MEM_146>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _55 = _ZNSolsEiD.23719 (_53, vcBegin_1);
  # DEBUG __outD.51118 => _55
  # DEBUG __sD.51119 => "]"
  # DEBUG __sD.51120 => "]"
  # .MEM_147 = VDEF <.MEM_54>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_55, "]", 1);
  # DEBUG __outD.51114 => _55
  # DEBUG __sD.51115 => " at output port "
  # DEBUG __sD.51116 => " at output port "
  # .MEM_148 = VDEF <.MEM_147>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_55, " at output port ", 16);
  # .MEM_56 = VDEF <.MEM_148>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _57 = _ZNSolsEiD.23719 (_55, out_port_41);
  # DEBUG __outD.51110 => _57
  # DEBUG __sD.51111 => " for flit "
  # DEBUG __sD.51112 => " for flit "
  # .MEM_149 = VDEF <.MEM_56>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_57, " for flit ", 10);
  # .MEM_58 = VDEF <.MEM_149>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _59 = _ZNSolsEiD.23719 (_57, _45);
  # DEBUG __outD.51106 => _59
  # DEBUG __sD.51107 => " (input port "
  # DEBUG __sD.51108 => " (input port "
  # .MEM_150 = VDEF <.MEM_58>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_59, " (input port ", 13);
  # .MEM_60 = VDEF <.MEM_150>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _61 = _ZNSolsEiD.23719 (_59, in_channel_39(D));
  # DEBUG __outD.51102 => _61
  # DEBUG __sD.51103 => ", destination "
  # DEBUG __sD.51104 => ", destination "
  # .MEM_151 = VDEF <.MEM_60>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_61, ", destination ", 14);
  # .MEM_62 = VDEF <.MEM_151>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _63 = _ZNSolsEiD.23719 (_61, _44);
  # DEBUG __outD.51098 => _63
  # DEBUG __sD.51099 => ")"
  # DEBUG __sD.51100 => ")"
  # .MEM_152 = VDEF <.MEM_62>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_63, ")", 1);
  # DEBUG __outD.51094 => _63
  # DEBUG __sD.51095 => "."
  # DEBUG __sD.51096 => "."
  # .MEM_153 = VDEF <.MEM_152>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_63, ".", 1);
  # DEBUG thisD.51091 => _63
  # DEBUG __pfD.51092 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.23851
  # DEBUG __osD.55184 => _63
  # VUSE <.MEM_153>
  # PT = nonlocal escaped null { D.45613 } (nonlocal, escaped)
  _183 = _63->_vptr.basic_ostreamD.23811;
  # VUSE <.MEM_153>
  _184 = MEM[(long intD.12 *)_183 + -24B];
  # RANGE [0, 18446744073709551615]
  _185 = (sizetype) _184;
  # PT = nonlocal escaped 
  _186 = _63 + _185;
  # DEBUG thisD.55187 => _186
  # DEBUG __cD.55188 => 10
  # VUSE <.MEM_153>
  # PT = nonlocal escaped 
  _154 = MEM[(const struct basic_iosD.11171 *)_186]._M_ctypeD.23035;
  # DEBUG __fD.55189 => _154
  if (_154 == 0B)
    goto <bb 22>;
  else
    goto <bb 23>;
;;    succ:       22 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 0
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       21 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                45 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_289 = PHI <.MEM_153(21), .MEM_181(36), .MEM_167(45)>
  # .MEM_272 = VDEF <.MEM_289>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__throw_bad_castvD.2825 ();
;;    succ:      

;;   basic block 23, loop depth 0, count 0, freq 326, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       21 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.55191 => _154
  # DEBUG __cD.55190 => 10
  # VUSE <.MEM_153>
  _191 = MEM[(const struct ctypeD.11417 *)_154]._M_widen_okD.19950;
  if (_191 != 0)
    goto <bb 24>;
  else
    goto <bb 25>;
;;    succ:       24 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 199, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_153>
  _194 = MEM[(const struct ctypeD.11417 *)_154]._M_widenD.19951[10];
  pretmp_292 = (intD.9) _194;
  goto <bb 27>;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 127, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       23 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.55193 => _154
  # DEBUG __cD.55194 => 10
  # .MEM_264 = VDEF <.MEM_153>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.20058 (_154);
  # VUSE <.MEM_264>
  # PT = nonlocal escaped 
  _199 = MEM[(const struct ctypeD.11417 *)_154].D.20091._vptr.facetD.16709;
  # VUSE <.MEM_264>
  # PT = nonlocal escaped 
  _200 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_199 + 48B];
  # PT = anything 
  PROF_204 = [obj_type_ref] OBJ_TYPE_REF(_200;(const struct ctypeD.11417)_154->6);
  if (PROF_204 == _ZNKSt5ctypeIcE8do_widenEcD.20039)
    goto <bb 27>;
  else
    goto <bb 26>;
;;    succ:       27 [80.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [20.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 25, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       25 [20.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_265 = VDEF <.MEM_264>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _206 = OBJ_TYPE_REF(_200;(const struct ctypeD.11417)_154->6) (_154, 10);
  pretmp_293 = (intD.9) _206;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 326, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                25 [80.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_229 = PHI <.MEM_153(24), .MEM_264(25), .MEM_265(26)>
  # RANGE [-128, 127]
  # prephitmp_294 = PHI <pretmp_292(24), 10(25), pretmp_293(26)>
  # .MEM_269 = VDEF <.MEM_229>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _189 = _ZNSo3putEcD.23746 (_63, prephitmp_294);
  # DEBUG __osD.55185 => _189
  # .MEM_270 = VDEF <.MEM_269>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZNSo5flushEvD.23757 (_189);
;;    succ:       28 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 1125, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       58 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                27 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_7 = PHI <.MEM_42(58), .MEM_270(27)>
  if (vcBegin_1 != in_vc_3)
    goto <bb 30>;
  else
    goto <bb 29>;
;;    succ:       30 [80.1%]  (TRUE_VALUE,EXECUTABLE)
;;                29 [19.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 1124, maybe hot
;;    prev block 28, next block 56, flags: (NEW)
;;    pred:       28 [19.9%]  (FALSE_VALUE,EXECUTABLE)
;;                30 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                52 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_285 = PHI <.MEM_7(28), .MEM_7(30), .MEM_11(52)>
;;    succ:       56 [100.0%]  (FALLTHRU)

;;   basic block 56, loop depth 0, count 0, freq 1124, maybe hot
;;    prev block 29, next block 30, flags: (NEW)
;;    pred:       29 [100.0%]  (FALLTHRU)
  goto <bb 54>;
;;    succ:       54 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 901, maybe hot
;;    prev block 56, next block 31, flags: (NEW, REACHABLE)
;;    pred:       28 [80.1%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7>
  cur_132 = MEM[(intD.9 *)r_32(D) + 96B];
  # DEBUG D#14ptD.0 => r_32(D)
  # DEBUG thisD.51144 => D#14ptD.0
  # DEBUG curD.45616 => NULL
  # VUSE <.MEM_7>
  dest_64 = f_16(D)->destD.29342;
  # DEBUG destD.45617 => dest_64
  # DEBUG nD.45618 => 0
  # DEBUG nD.45618 => 0
  # DEBUG destD.45617 => dest_64
  # DEBUG curD.45616 => cur_132
  # VUSE <.MEM_7>
  gN.64_255 = gND.33727;
  if (gN.64_255 <= 0)
    goto <bb 29>;
  else
    goto <bb 31>;
;;    succ:       29 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 820, maybe hot
;;    prev block 30, next block 32, flags: (NEW)
;;    pred:       30 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7>
  pretmp_280 = gKD.33726;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 31, next block 33, flags: (NEW)
;;    pred:       31 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                53 [100.0%]  (FALLTHRU,EXECUTABLE)
  # cur_207 = PHI <cur_132(31), cur_128(53)>
  # dest_195 = PHI <dest_64(31), dest_129(53)>
  # n_213 = PHI <0(31), n_130(53)>
  # .MEM_268 = PHI <.MEM_7(31), .MEM_11(53)>
  # prephitmp_203 = PHI <pretmp_280(31), prephitmp_248(53)>
  # prephitmp_202 = PHI <gN.64_255(31), prephitmp_297(53)>
  # DEBUG nD.45618 => n_213
  # DEBUG destD.45617 => dest_195
  # DEBUG curD.45616 => cur_207
  _67 = cur_207 % prephitmp_203;
  _68 = dest_195 % prephitmp_203;
  if (_67 != _68)
    goto <bb 33>;
  else
    goto <bb 52>;
;;    succ:       33 [72.0%]  (TRUE_VALUE,EXECUTABLE)
;;                52 [28.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 33, loop depth 1, count 0, freq 6552, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       32 [72.0%]  (TRUE_VALUE,EXECUTABLE)
  if (_67 < _68)
    goto <bb 34>;
  else
    goto <bb 43>;
;;    succ:       34 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                43 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 1, count 0, freq 3276, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       33 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_268>
  _99 = f_16(D)->watchD.29345;
  if (_99 != 0)
    goto <bb 36>;
  else
    goto <bb 35>;
;;    succ:       36 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 35, loop depth 1, count 0, freq 2326, maybe hot
;;    prev block 34, next block 36, flags: (NEW)
;;    pred:       34 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_224 = n_213 * 2;
  pretmp_231 = vcBegin_1 + 1;
  goto <bb 42>;
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 1, count 0, freq 950, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       34 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_268>
  _100 = f_16(D)->destD.29342;
  # VUSE <.MEM_268>
  _101 = f_16(D)->idD.29338;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _102 = n_213 * 2;
  _103 = vcBegin_1 + 1;
  # DEBUG D#20ptD.0 => &r_32(D)->D.42039.D.32226
  # DEBUG thisD.51200 => D#20ptD.0
  # .MEM_104 = VDEF <.MEM_268>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _105 = _Z10GetSimTimevD.33721 ();
  # VUSE <.MEM_104>
  # PT = nonlocal escaped 
  gWatchOut.65_106 = gWatchOutD.33731;
  # .MEM_107 = VDEF <.MEM_104>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _108 = _ZNSolsEiD.23719 (gWatchOut.65_106, _105);
  # DEBUG __outD.51196 => _108
  # DEBUG __sD.51197 => " | "
  # DEBUG __sD.51198 => " | "
  # .MEM_169 = VDEF <.MEM_107>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_108, " | ", 3);
  # DEBUG __osD.51193 => _108
  # DEBUG __strD.51194 => NULL
  # VUSE <.MEM_169>
  _109 = MEM[(long unsigned intD.14 *)r_32(D) + 48B];
  # DEBUG thisD.50724 => D#1ptD.0
  _136 = (long intD.12) _109;
  # DEBUG thisD.50721 => NULL
  # VUSE <.MEM_169>
  # PT = nonlocal escaped 
  _137 = MEM[(charD.10 * *)r_32(D) + 40B];
  # DEBUG thisD.50676 => D#3ptD.0
  # .MEM_170 = VDEF <.MEM_169>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _138 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_108, _137, _136);
  # DEBUG __outD.51189 => _138
  # DEBUG __sD.51190 => " | "
  # DEBUG __sD.51191 => " | "
  # .MEM_171 = VDEF <.MEM_170>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_138, " | ", 3);
  # DEBUG __outD.51185 => _138
  # DEBUG __sD.51186 => "Adding VC range ["
  # DEBUG __sD.51187 => "Adding VC range ["
  # .MEM_172 = VDEF <.MEM_171>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_138, "Adding VC range [", 17);
  # .MEM_110 = VDEF <.MEM_172>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _111 = _ZNSolsEiD.23719 (_138, _103);
  # DEBUG __outD.51181 => _111
  # DEBUG __sD.51182 => ","
  # DEBUG __sD.51183 => ","
  # .MEM_173 = VDEF <.MEM_110>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_111, ",", 1);
  # .MEM_112 = VDEF <.MEM_173>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _113 = _ZNSolsEiD.23719 (_111, in_vc_2);
  # DEBUG __outD.51177 => _113
  # DEBUG __sD.51178 => "]"
  # DEBUG __sD.51179 => "]"
  # .MEM_174 = VDEF <.MEM_112>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_113, "]", 1);
  # DEBUG __outD.51173 => _113
  # DEBUG __sD.51174 => " at output port "
  # DEBUG __sD.51175 => " at output port "
  # .MEM_175 = VDEF <.MEM_174>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_113, " at output port ", 16);
  # .MEM_114 = VDEF <.MEM_175>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _115 = _ZNSolsEiD.23719 (_113, _102);
  # DEBUG __outD.51169 => _115
  # DEBUG __sD.51170 => " with priority "
  # DEBUG __sD.51171 => " with priority "
  # .MEM_176 = VDEF <.MEM_114>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_115, " with priority ", 15);
  # .MEM_116 = VDEF <.MEM_176>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _117 = _ZNSolsEiD.23719 (_115, 1);
  # DEBUG __outD.51165 => _117
  # DEBUG __sD.51166 => " for flit "
  # DEBUG __sD.51167 => " for flit "
  # .MEM_177 = VDEF <.MEM_116>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_117, " for flit ", 10);
  # .MEM_118 = VDEF <.MEM_177>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _119 = _ZNSolsEiD.23719 (_117, _101);
  # DEBUG __outD.51161 => _119
  # DEBUG __sD.51162 => " (input port "
  # DEBUG __sD.51163 => " (input port "
  # .MEM_178 = VDEF <.MEM_118>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_119, " (input port ", 13);
  # .MEM_120 = VDEF <.MEM_178>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _121 = _ZNSolsEiD.23719 (_119, in_channel_39(D));
  # DEBUG __outD.51157 => _121
  # DEBUG __sD.51158 => ", destination "
  # DEBUG __sD.51159 => ", destination "
  # .MEM_179 = VDEF <.MEM_120>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_121, ", destination ", 14);
  # .MEM_122 = VDEF <.MEM_179>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _123 = _ZNSolsEiD.23719 (_121, _100);
  # DEBUG __outD.51153 => _123
  # DEBUG __sD.51154 => ")"
  # DEBUG __sD.51155 => ")"
  # .MEM_180 = VDEF <.MEM_122>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_123, ")", 1);
  # DEBUG __outD.51149 => _123
  # DEBUG __sD.51150 => "."
  # DEBUG __sD.51151 => "."
  # .MEM_181 = VDEF <.MEM_180>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_123, ".", 1);
  # DEBUG thisD.51146 => _123
  # DEBUG __pfD.51147 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.23851
  # DEBUG __osD.55199 => _123
  # VUSE <.MEM_181>
  # PT = nonlocal escaped null { D.45613 } (nonlocal, escaped)
  _209 = _123->_vptr.basic_ostreamD.23811;
  # VUSE <.MEM_181>
  _210 = MEM[(long intD.12 *)_209 + -24B];
  # RANGE [0, 18446744073709551615]
  _211 = (sizetype) _210;
  # PT = nonlocal escaped 
  _212 = _123 + _211;
  # DEBUG thisD.55202 => _212
  # DEBUG __cD.55203 => 10
  # VUSE <.MEM_181>
  # PT = nonlocal escaped 
  _182 = MEM[(const struct basic_iosD.11171 *)_212]._M_ctypeD.23035;
  # DEBUG __fD.55204 => _182
  if (_182 == 0B)
    goto <bb 22>;
  else
    goto <bb 37>;
;;    succ:       22 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 37, loop depth 1, count 0, freq 950, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       36 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.55206 => _182
  # DEBUG __cD.55205 => 10
  # VUSE <.MEM_181>
  _217 = MEM[(const struct ctypeD.11417 *)_182]._M_widen_okD.19950;
  if (_217 != 0)
    goto <bb 38>;
  else
    goto <bb 39>;
;;    succ:       38 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 38, loop depth 1, count 0, freq 579, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       37 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_181>
  _220 = MEM[(const struct ctypeD.11417 *)_182]._M_widenD.19951[10];
  pretmp_284 = (intD.9) _220;
  goto <bb 41>;
;;    succ:       41 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 39, loop depth 1, count 0, freq 370, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       37 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.55208 => _182
  # DEBUG __cD.55209 => 10
  # .MEM_282 = VDEF <.MEM_181>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.20058 (_182);
  # VUSE <.MEM_282>
  # PT = nonlocal escaped 
  _225 = MEM[(const struct ctypeD.11417 *)_182].D.20091._vptr.facetD.16709;
  # VUSE <.MEM_282>
  # PT = nonlocal escaped 
  _226 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_225 + 48B];
  # PT = anything 
  PROF_230 = [obj_type_ref] OBJ_TYPE_REF(_226;(const struct ctypeD.11417)_182->6);
  if (PROF_230 == _ZNKSt5ctypeIcE8do_widenEcD.20039)
    goto <bb 41>;
  else
    goto <bb 40>;
;;    succ:       41 [80.4%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [19.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 40, loop depth 1, count 0, freq 72, maybe hot
;;    prev block 39, next block 41, flags: (NEW, REACHABLE)
;;    pred:       39 [19.6%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_283 = VDEF <.MEM_282>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _232 = OBJ_TYPE_REF(_226;(const struct ctypeD.11417)_182->6) (_182, 10);
  pretmp_233 = (intD.9) _232;
;;    succ:       41 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 41, loop depth 1, count 0, freq 950, maybe hot
;;    prev block 40, next block 42, flags: (NEW, REACHABLE)
;;    pred:       38 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                39 [80.4%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_261 = PHI <.MEM_181(38), .MEM_282(39), .MEM_283(40)>
  # RANGE [-128, 127]
  # prephitmp_291 = PHI <pretmp_284(38), 10(39), pretmp_233(40)>
  # .MEM_287 = VDEF <.MEM_261>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _215 = _ZNSo3putEcD.23746 (_123, prephitmp_291);
  # DEBUG __osD.55200 => _215
  # .MEM_288 = VDEF <.MEM_287>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZNSo5flushEvD.23757 (_215);
;;    succ:       42 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 42, loop depth 1, count 0, freq 3276, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       35 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_9 = PHI <.MEM_268(35), .MEM_288(41)>
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  # prephitmp_227 = PHI <pretmp_224(35), _102(41)>
  # prephitmp_234 = PHI <pretmp_231(35), _103(41)>
  # .MEM_126 = VDEF <.MEM_9>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_29(D), prephitmp_227, prephitmp_234, in_vc_2, 1);
  # VUSE <.MEM_126>
  pretmp_276 = gKD.33726;
  # VUSE <.MEM_126>
  pretmp_296 = gND.33727;
  goto <bb 52>;
;;    succ:       52 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 43, loop depth 1, count 0, freq 3276, maybe hot
;;    prev block 42, next block 44, flags: (NEW, REACHABLE)
;;    pred:       33 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_268>
  _69 = f_16(D)->watchD.29345;
  if (_69 != 0)
    goto <bb 45>;
  else
    goto <bb 44>;
;;    succ:       45 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 44, loop depth 1, count 0, freq 2326, maybe hot
;;    prev block 43, next block 45, flags: (NEW)
;;    pred:       43 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  pretmp_250 = n_213 * 2;
  pretmp_257 = pretmp_250 + 1;
  pretmp_275 = vcBegin_1 + 1;
  goto <bb 51>;
;;    succ:       51 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 45, loop depth 1, count 0, freq 950, maybe hot
;;    prev block 44, next block 46, flags: (NEW, REACHABLE)
;;    pred:       43 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_268>
  _70 = f_16(D)->destD.29342;
  # VUSE <.MEM_268>
  _71 = f_16(D)->idD.29338;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _72 = n_213 * 2;
  # RANGE [-2147483647, 2147483647]
  _73 = _72 + 1;
  _74 = vcBegin_1 + 1;
  # DEBUG D#19ptD.0 => &r_32(D)->D.42039.D.32226
  # DEBUG thisD.51256 => D#19ptD.0
  # .MEM_75 = VDEF <.MEM_268>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _76 = _Z10GetSimTimevD.33721 ();
  # VUSE <.MEM_75>
  # PT = nonlocal escaped 
  gWatchOut.65_77 = gWatchOutD.33731;
  # .MEM_78 = VDEF <.MEM_75>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _79 = _ZNSolsEiD.23719 (gWatchOut.65_77, _76);
  # DEBUG __outD.51252 => _79
  # DEBUG __sD.51253 => " | "
  # DEBUG __sD.51254 => " | "
  # .MEM_155 = VDEF <.MEM_78>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_79, " | ", 3);
  # DEBUG __osD.51249 => _79
  # DEBUG __strD.51250 => NULL
  # VUSE <.MEM_155>
  _80 = MEM[(long unsigned intD.14 *)r_32(D) + 48B];
  # DEBUG thisD.50724 => D#1ptD.0
  _139 = (long intD.12) _80;
  # DEBUG thisD.50721 => NULL
  # VUSE <.MEM_155>
  # PT = nonlocal escaped 
  _140 = MEM[(charD.10 * *)r_32(D) + 40B];
  # DEBUG thisD.50676 => D#3ptD.0
  # .MEM_156 = VDEF <.MEM_155>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _141 = _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_79, _140, _139);
  # DEBUG __outD.51245 => _141
  # DEBUG __sD.51246 => " | "
  # DEBUG __sD.51247 => " | "
  # .MEM_157 = VDEF <.MEM_156>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_141, " | ", 3);
  # DEBUG __outD.51241 => _141
  # DEBUG __sD.51242 => "Adding VC range ["
  # DEBUG __sD.51243 => "Adding VC range ["
  # .MEM_158 = VDEF <.MEM_157>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_141, "Adding VC range [", 17);
  # .MEM_81 = VDEF <.MEM_158>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _82 = _ZNSolsEiD.23719 (_141, _74);
  # DEBUG __outD.51237 => _82
  # DEBUG __sD.51238 => ","
  # DEBUG __sD.51239 => ","
  # .MEM_159 = VDEF <.MEM_81>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_82, ",", 1);
  # .MEM_83 = VDEF <.MEM_159>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _84 = _ZNSolsEiD.23719 (_82, in_vc_2);
  # DEBUG __outD.51233 => _84
  # DEBUG __sD.51234 => "]"
  # DEBUG __sD.51235 => "]"
  # .MEM_160 = VDEF <.MEM_83>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_84, "]", 1);
  # DEBUG __outD.51229 => _84
  # DEBUG __sD.51230 => " at output port "
  # DEBUG __sD.51231 => " at output port "
  # .MEM_161 = VDEF <.MEM_160>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_84, " at output port ", 16);
  # .MEM_85 = VDEF <.MEM_161>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _86 = _ZNSolsEiD.23719 (_84, _73);
  # DEBUG __outD.51225 => _86
  # DEBUG __sD.51226 => " with priority "
  # DEBUG __sD.51227 => " with priority "
  # .MEM_162 = VDEF <.MEM_85>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_86, " with priority ", 15);
  # .MEM_87 = VDEF <.MEM_162>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _88 = _ZNSolsEiD.23719 (_86, 1);
  # DEBUG __outD.51221 => _88
  # DEBUG __sD.51222 => " for flit "
  # DEBUG __sD.51223 => " for flit "
  # .MEM_163 = VDEF <.MEM_87>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_88, " for flit ", 10);
  # .MEM_89 = VDEF <.MEM_163>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _90 = _ZNSolsEiD.23719 (_88, _71);
  # DEBUG __outD.51217 => _90
  # DEBUG __sD.51218 => " (input port "
  # DEBUG __sD.51219 => " (input port "
  # .MEM_164 = VDEF <.MEM_89>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_90, " (input port ", 13);
  # .MEM_91 = VDEF <.MEM_164>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _92 = _ZNSolsEiD.23719 (_90, in_channel_39(D));
  # DEBUG __outD.51213 => _92
  # DEBUG __sD.51214 => ", destination "
  # DEBUG __sD.51215 => ", destination "
  # .MEM_165 = VDEF <.MEM_91>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_92, ", destination ", 14);
  # .MEM_93 = VDEF <.MEM_165>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _94 = _ZNSolsEiD.23719 (_92, _70);
  # DEBUG __outD.51209 => _94
  # DEBUG __sD.51210 => ")"
  # DEBUG __sD.51211 => ")"
  # .MEM_166 = VDEF <.MEM_93>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_94, ")", 1);
  # DEBUG __outD.51205 => _94
  # DEBUG __sD.51206 => "."
  # DEBUG __sD.51207 => "."
  # .MEM_167 = VDEF <.MEM_166>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_lD.11579 (_94, ".", 1);
  # DEBUG thisD.51202 => _94
  # DEBUG __pfD.51203 => _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_D.23851
  # DEBUG __osD.55214 => _94
  # VUSE <.MEM_167>
  # PT = nonlocal escaped null { D.45613 } (nonlocal, escaped)
  _235 = _94->_vptr.basic_ostreamD.23811;
  # VUSE <.MEM_167>
  _236 = MEM[(long intD.12 *)_235 + -24B];
  # RANGE [0, 18446744073709551615]
  _237 = (sizetype) _236;
  # PT = nonlocal escaped 
  _238 = _94 + _237;
  # DEBUG thisD.55217 => _238
  # DEBUG __cD.55218 => 10
  # VUSE <.MEM_167>
  # PT = nonlocal escaped 
  _168 = MEM[(const struct basic_iosD.11171 *)_238]._M_ctypeD.23035;
  # DEBUG __fD.55219 => _168
  if (_168 == 0B)
    goto <bb 22>;
  else
    goto <bb 46>;
;;    succ:       22 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                46 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 46, loop depth 1, count 0, freq 950, maybe hot
;;    prev block 45, next block 47, flags: (NEW, REACHABLE)
;;    pred:       45 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.55221 => _168
  # DEBUG __cD.55220 => 10
  # VUSE <.MEM_167>
  _243 = MEM[(const struct ctypeD.11417 *)_168]._M_widen_okD.19950;
  if (_243 != 0)
    goto <bb 47>;
  else
    goto <bb 48>;
;;    succ:       47 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                48 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 47, loop depth 1, count 0, freq 579, maybe hot
;;    prev block 46, next block 48, flags: (NEW, REACHABLE)
;;    pred:       46 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_167>
  _246 = MEM[(const struct ctypeD.11417 *)_168]._M_widenD.19951[10];
  pretmp_218 = (intD.9) _246;
  goto <bb 50>;
;;    succ:       50 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 48, loop depth 1, count 0, freq 370, maybe hot
;;    prev block 47, next block 49, flags: (NEW, REACHABLE)
;;    pred:       46 [39.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.55223 => _168
  # DEBUG __cD.55224 => 10
  # .MEM_273 = VDEF <.MEM_167>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZNKSt5ctypeIcE13_M_widen_initEvD.20058 (_168);
  # VUSE <.MEM_273>
  # PT = nonlocal escaped 
  _251 = MEM[(const struct ctypeD.11417 *)_168].D.20091._vptr.facetD.16709;
  # VUSE <.MEM_273>
  # PT = nonlocal escaped 
  _252 = MEM[(intD.9 (*__vtbl_ptr_typeD.2760) () *)_251 + 48B];
  # PT = anything 
  PROF_256 = [obj_type_ref] OBJ_TYPE_REF(_252;(const struct ctypeD.11417)_168->6);
  if (PROF_256 == _ZNKSt5ctypeIcE8do_widenEcD.20039)
    goto <bb 50>;
  else
    goto <bb 49>;
;;    succ:       50 [80.4%]  (TRUE_VALUE,EXECUTABLE)
;;                49 [19.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 49, loop depth 1, count 0, freq 72, maybe hot
;;    prev block 48, next block 50, flags: (NEW, REACHABLE)
;;    pred:       48 [19.6%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_274 = VDEF <.MEM_273>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _258 = OBJ_TYPE_REF(_252;(const struct ctypeD.11417)_168->6) (_168, 10);
  pretmp_219 = (intD.9) _258;
;;    succ:       50 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 50, loop depth 1, count 0, freq 950, maybe hot
;;    prev block 49, next block 51, flags: (NEW, REACHABLE)
;;    pred:       47 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                48 [80.4%]  (TRUE_VALUE,EXECUTABLE)
;;                49 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_263 = PHI <.MEM_167(47), .MEM_273(48), .MEM_274(49)>
  # RANGE [-128, 127]
  # prephitmp_221 = PHI <pretmp_218(47), 10(48), pretmp_219(49)>
  # .MEM_278 = VDEF <.MEM_263>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _241 = _ZNSo3putEcD.23746 (_94, prephitmp_221);
  # DEBUG __osD.55215 => _241
  # .MEM_279 = VDEF <.MEM_278>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZNSo5flushEvD.23757 (_241);
;;    succ:       51 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 51, loop depth 1, count 0, freq 3276, maybe hot
;;    prev block 50, next block 52, flags: (NEW, REACHABLE)
;;    pred:       44 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                50 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_10 = PHI <.MEM_268(44), .MEM_279(50)>
  # RANGE [-2147483647, 2147483647]
  # prephitmp_260 = PHI <pretmp_257(44), _73(50)>
  # prephitmp_259 = PHI <pretmp_275(44), _74(50)>
  # .MEM_98 = VDEF <.MEM_10>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_29(D), prephitmp_260, prephitmp_259, in_vc_2, 1);
  # VUSE <.MEM_98>
  pretmp_271 = gKD.33726;
  # VUSE <.MEM_98>
  pretmp_295 = gND.33727;
;;    succ:       52 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 52, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 51, next block 53, flags: (NEW, REACHABLE)
;;    pred:       32 [28.0%]  (FALSE_VALUE,EXECUTABLE)
;;                51 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                42 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_11 = PHI <.MEM_268(32), .MEM_98(51), .MEM_126(42)>
  # prephitmp_248 = PHI <prephitmp_203(32), pretmp_271(51), pretmp_276(42)>
  # prephitmp_297 = PHI <prephitmp_202(32), pretmp_295(51), pretmp_296(42)>
  cur_128 = cur_207 / prephitmp_248;
  # DEBUG curD.45616 => cur_128
  dest_129 = dest_195 / prephitmp_248;
  # DEBUG destD.45617 => dest_129
  n_130 = n_213 + 1;
  # DEBUG nD.45618 => n_130
  # DEBUG nD.45618 => n_130
  # DEBUG destD.45617 => dest_129
  # DEBUG curD.45616 => cur_128
  if (n_130 >= prephitmp_297)
    goto <bb 29>;
  else
    goto <bb 53>;
;;    succ:       29 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                53 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 53, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 52, next block 54, flags: (NEW)
;;    pred:       52 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 32>;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 54, loop depth 0, count 0, freq 1562, maybe hot
;;    prev block 53, next block 57, flags: (NEW, REACHABLE)
;;    pred:       15 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                56 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_12 = PHI <.MEM_31(15), .MEM_36(17), .MEM_285(56)>
;;    succ:       57 [100.0%]  (FALLTHRU)

;;   basic block 57, loop depth 0, count 0, freq 1562, maybe hot
;;    prev block 54, next block 55, flags: (NEW)
;;    pred:       54 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_12>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 55, loop depth 0, count 0, freq 1172, maybe hot
;;    prev block 57, next block 1, flags: (NEW, REACHABLE)
;;    pred:       12 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_244 = VDEF <.MEM_13(D)>
  # USE = nonlocal null { D.45613 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45613 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_29(D));
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

}



;; Function void romm_mesh(const Router*, const Flit*, int, OutputSet*, bool) (_Z9romm_meshPK6RouterPK4FlitiP9OutputSetb, funcdef_no=1977, decl_uid=45585, cgraph_uid=476, symbol_order=487)


Pass statistics:
----------------

void romm_mesh(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45580, const struct FlitD.29321 * fD.45581, intD.9 in_channelD.45582, struct OutputSetD.28230 * outputsD.45583, boolD.2757 injectD.45584)
{
  intD.9 distD.55267;
  intD.9 intmD.55268;
  intD.9 offsetD.55269;
  intD.9 nD.55270;
  intD.9 D.55273;
  intD.9 srcD.55265;
  intD.9 destD.55266;
  intD.9 available_vcsD.45591;
  intD.9 out_portD.45590;
  static const charD.10 _ZZ9romm_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45589[66] = "void romm_mesh(const Router*, const Flit*, int, OutputSet*, bool)";
  intD.9 vcEndD.45588;
  intD.9 vcBeginD.45587;
  boolD.2757 _6;
  const intD.9 iftmp.52_7;
  intD.9 gNumVCs.48_12;
  FlitTypeD.29324 _15;
  intD.9 _24;
  intD.9 gN.49_27;
  intD.9 _28;
  intD.9 _38;
  intD.9 _45;
  intD.9 _46;
  const intD.9 _55;
  intD.9 gN.46_57;
  intD.9 _61;
  intD.9 _63;
  long intD.12 _65;
  intD.9 _66;
  long intD.12 _67;
  long intD.12 _68;
  intD.9 _69;
  intD.9 _70;
  intD.9 _72;
  long intD.12 _75;
  intD.9 _76;
  long intD.12 _77;
  long intD.12 _78;
  intD.9 _79;
  intD.9 _80;
  intD.9 _81;
  intD.9 gK.47_83;
  boolD.2757 _92;
  boolD.2757 _109;
  intD.9 _110;
  boolD.2757 _112;
  intD.9 prephitmp_123;
  const intD.9 pretmp_126;
  const intD.9 prephitmp_127;
  intD.9 pretmp_128;
  intD.9 prephitmp_129;
  const intD.9 pretmp_130;
  const intD.9 prephitmp_131;
  intD.9 pretmp_132;
  intD.9 prephitmp_133;
  intD.9 pretmp_138;
  intD.9 prephitmp_139;
  const intD.9 pretmp_140;
  const intD.9 prephitmp_141;

;;   basic block 2, loop depth 0, count 0, freq 8284, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG vcBeginD.45587 => 0
  # DEBUG D#207ptD.0 => gNumVCsD.42077
  # DEBUG vcEndD.45588 => D#207ptD.0 + -1
  # VUSE <.MEM_11(D)>
  _15 = f_14(D)->typeD.29330;
  if (_15 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 4142, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  vcBegin_16 = gReadReqBeginVCD.42078;
  # DEBUG vcBeginD.45587 => vcBegin_16
  # VUSE <.MEM_11(D)>
  vcEnd_17 = gReadReqEndVCD.42079;
  # DEBUG vcEndD.45588 => vcEnd_17
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 4142, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_15 == 2)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 1160, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  vcBegin_18 = gWriteReqBeginVCD.42080;
  # DEBUG vcBeginD.45587 => vcBegin_18
  # VUSE <.MEM_11(D)>
  vcEnd_19 = gWriteReqEndVCD.42081;
  # DEBUG vcEndD.45588 => vcEnd_19
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 2982, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_15 == 1)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 835, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  vcBegin_20 = gReadReplyBeginVCD.42082;
  # DEBUG vcBeginD.45587 => vcBegin_20
  # VUSE <.MEM_11(D)>
  vcEnd_21 = gReadReplyEndVCD.42083;
  # DEBUG vcEndD.45588 => vcEnd_21
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 2147, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  gNumVCs.48_12 = gNumVCsD.42077;
  if (_15 == 3)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 1546, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  vcEnd_13 = gNumVCs.48_12 + -1;
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 601, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  vcBegin_22 = gWriteReplyBeginVCD.42084;
  # DEBUG vcBeginD.45587 => vcBegin_22
  # VUSE <.MEM_11(D)>
  vcEnd_23 = gWriteReplyEndVCD.42085;
  # DEBUG vcEndD.45588 => vcEnd_23
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 8284, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # vcBegin_1 = PHI <vcBegin_16(3), vcBegin_18(5), vcBegin_20(7), 0(9), vcBegin_22(10)>
  # vcEnd_3 = PHI <vcEnd_17(3), vcEnd_19(5), vcEnd_21(7), vcEnd_13(9), vcEnd_23(10)>
  # DEBUG vcEndD.45588 => vcEnd_3
  # DEBUG vcBeginD.45587 => vcBegin_1
  # VUSE <.MEM_11(D)>
  _24 = f_14(D)->vcD.29331;
  _92 = vcEnd_3 < _24;
  _112 = vcBegin_1 > _24;
  _109 = _92 | _112;
  if (_109 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 6211, maybe hot
;;   Invalid sum of incoming frequencies 4142, should be 6211
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  _6 = _24 >= 0;
  if (_6 >= inject_25(D))
    goto <bb 13>;
  else
    goto <bb 36>;
;;    succ:       13 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 5
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_26 = VDEF <.MEM_11(D)>
  # USE = nonlocal null { D.45589 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45589 } (nonlocal, escaped)
  __assert_failD.9858 ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 830, &_ZZ9romm_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45589);
;;    succ:      

;;   basic block 14, loop depth 0, count 0, freq 2070, maybe hot
;;   Invalid sum of incoming frequencies 4142, should be 2070
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (inject_25(D) != 0)
    goto <bb 36>;
  else
    goto <bb 15>;
;;    succ:       36 (TRUE_VALUE,EXECUTABLE)
;;                15 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 6565, maybe hot
;;   Invalid sum of incoming frequencies 2070, should be 6565
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  gN.49_27 = gND.33727;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _28 = gN.49_27 * 2;
  if (_28 == in_channel_29(D))
    goto <bb 17>;
  else
    goto <bb 16>;
;;    succ:       17 [13.7%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [86.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 5665, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       15 [86.3%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  pretmp_138 = f_14(D)->phD.29348;
  # VUSE <.MEM_11(D)>
  pretmp_140 = f_14(D)->destD.29342;
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       15 [13.7%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_30 = VDEF <.MEM_11(D)>
  f_14(D)->phD.29348 = 0;
  # VUSE <.MEM_30>
  dest_31 = f_14(D)->destD.29342;
  # VUSE <.MEM_30>
  src_32 = f_14(D)->srcD.29341;
  # DEBUG srcD.55265 => src_32
  # DEBUG destD.55266 => dest_31
  # DEBUG intmD.55268 => 0
  # DEBUG offsetD.55269 => 1
  # DEBUG nD.55270 => 0
  # DEBUG nD.55270 => 0
  # DEBUG offsetD.55269 => 1
  # DEBUG intmD.55268 => 0
  # DEBUG destD.55266 => dest_31
  # DEBUG srcD.55265 => src_32
  if (gN.49_27 <= 0)
    goto <bb 25>;
  else
    goto <bb 18>;
;;    succ:       25 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 17, next block 19, flags: (NEW)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_30>
  pretmp_132 = gKD.33726;
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_100 = PHI <.MEM_30(18), .MEM_89(23)>
  # n_107 = PHI <0(18), n_87(23)>
  # dest_104 = PHI <dest_31(18), dest_85(23)>
  # src_94 = PHI <src_32(18), src_86(23)>
  # offset_106 = PHI <1(18), offset_84(23)>
  # intm_93 = PHI <0(18), intm_88(23)>
  # prephitmp_133 = PHI <pretmp_132(18), gK.47_83(23)>
  # DEBUG nD.55270 => n_107
  # DEBUG offsetD.55269 => offset_106
  # DEBUG intmD.55268 => intm_93
  # DEBUG destD.55266 => dest_104
  # DEBUG srcD.55265 => src_94
  _61 = dest_104 % prephitmp_133;
  _63 = src_94 % prephitmp_133;
  dist_64 = _61 - _63;
  # DEBUG distD.55267 => dist_64
  if (dist_64 > 0)
    goto <bb 20>;
  else
    goto <bb 21>;
;;    succ:       20 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [27.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 1, count 0, freq 6644, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       19 [73.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG maxD.55272 => dist_64
  # .MEM_90 = VDEF <.MEM_100>
  # USE = nonlocal null { D.45589 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45589 } (nonlocal, escaped)
  _65 = _Z8ran_nextvD.43987 ();
  # RANGE [2, 2147483647] NONZERO 2147483647
  _66 = dist_64 + 1;
  # RANGE [2, 9223372036854775807] NONZERO 2147483647
  _67 = (long intD.12) _66;
  _68 = _65 % _67;
  _69 = (intD.9) _68;
  _70 = _63 + _69;
  _72 = _70 * offset_106;
  intm_74 = _72 + intm_93;
  # DEBUG intmD.55268 => intm_74
  goto <bb 22>;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 1, count 0, freq 2456, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       19 [27.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG maxD.55271 => -dist_64
  # .MEM_91 = VDEF <.MEM_100>
  # USE = nonlocal null { D.45589 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45589 } (nonlocal, escaped)
  _75 = _Z8ran_nextvD.43987 ();
  # RANGE [1, 2147483647] NONZERO 2147483647
  _76 = 1 - dist_64;
  # RANGE [1, 9223372036854775807] NONZERO 2147483647
  _77 = (long intD.12) _76;
  _78 = _75 % _77;
  _79 = (intD.9) _78;
  _80 = _61 + _79;
  _81 = _80 * offset_106;
  intm_82 = _81 + intm_93;
  # DEBUG intmD.55268 => intm_82
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                21 [100.0%]  (FALLTHRU,EXECUTABLE)
  # intm_88 = PHI <intm_74(20), intm_82(21)>
  # .MEM_89 = PHI <.MEM_90(20), .MEM_91(21)>
  # DEBUG intmD.55268 => intm_88
  # VUSE <.MEM_89>
  gK.47_83 = gKD.33726;
  offset_84 = gK.47_83 * offset_106;
  # DEBUG offsetD.55269 => offset_84
  dest_85 = dest_104 / gK.47_83;
  # DEBUG destD.55266 => dest_85
  src_86 = src_94 / gK.47_83;
  # DEBUG srcD.55265 => src_86
  n_87 = n_107 + 1;
  # DEBUG nD.55270 => n_87
  # DEBUG nD.55270 => n_87
  # DEBUG offsetD.55269 => offset_84
  # DEBUG intmD.55268 => intm_88
  # DEBUG destD.55266 => dest_85
  # DEBUG srcD.55265 => src_86
  # VUSE <.MEM_89>
  gN.46_57 = gND.33727;
  if (gN.46_57 <= n_87)
    goto <bb 24>;
  else
    goto <bb 23>;
;;    succ:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 19>;
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 23, next block 25, flags: (NEW)
;;    pred:       22 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # intm_137 = PHI <intm_88(22)>
  # VUSE <.MEM_89>
  pretmp_128 = f_14(D)->phD.29348;
  # VUSE <.MEM_89>
  pretmp_130 = f_14(D)->destD.29342;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_95 = PHI <.MEM_89(24), .MEM_30(17)>
  # intm_105 = PHI <intm_137(24), 0(17)>
  # prephitmp_129 = PHI <pretmp_128(24), 0(17)>
  # prephitmp_131 = PHI <pretmp_130(24), dest_31(17)>
  # .MEM_35 = VDEF <.MEM_95>
  f_14(D)->intmD.29347 = intm_105;
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 6565, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                25 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_8 = PHI <.MEM_11(D)(16), .MEM_35(25)>
  # prephitmp_139 = PHI <pretmp_138(16), prephitmp_129(25)>
  # prephitmp_141 = PHI <pretmp_140(16), prephitmp_131(25)>
  if (prephitmp_139 == 0)
    goto <bb 27>;
  else
    goto <bb 38>;
;;    succ:       27 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 3282, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       26 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8>
  _55 = MEM[(intD.9 *)r_37(D) + 96B];
  # DEBUG D#14ptD.0 => r_37(D)
  # DEBUG thisD.51539 => D#14ptD.0
  # VUSE <.MEM_8>
  _38 = f_14(D)->intmD.29347;
  if (_38 == _55)
    goto <bb 37>;
  else
    goto <bb 28>;
;;    succ:       37 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 6565, maybe hot
;;   Invalid sum of incoming frequencies 8928, should be 6565
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       27 [72.0%]  (FALSE_VALUE,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)
  # iftmp.52_7 = PHI <_38(27), prephitmp_141(38)>
  # .MEM_98 = PHI <.MEM_8(27), .MEM_108(38)>
  # _110 = PHI <prephitmp_139(27), prephitmp_123(38)>
  # prephitmp_127 = PHI <_55(27), pretmp_126(38)>
  # DEBUG D#14ptD.0 => r_37(D)
  # DEBUG thisD.51545 => D#14ptD.0
  # VUSE <.MEM_98>
  # USE = nonlocal escaped null 
  out_port_43 = _Z13dor_next_meshiibD.45450 (prephitmp_127, iftmp.52_7, 0);
  # DEBUG out_portD.45590 => out_port_43
  # DEBUG D#14ptD.0 => r_37(D)
  # DEBUG thisD.51542 => D#14ptD.0
  if (prephitmp_127 != prephitmp_141)
    goto <bb 29>;
  else
    goto <bb 36>;
;;    succ:       29 [80.1%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [19.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 5258, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       28 [80.1%]  (TRUE_VALUE,EXECUTABLE)
  _45 = vcEnd_3 - vcBegin_1;
  _46 = _45 + 1;
  # RANGE [-1073741824, 1073741823]
  available_vcs_47 = _46 / 2;
  # DEBUG available_vcsD.45591 => available_vcs_47
  if (available_vcs_47 <= 0)
    goto <bb 30>;
  else
    goto <bb 31>;
;;    succ:       30 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 2
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_51 = VDEF <.MEM_98>
  # USE = nonlocal null { D.45589 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45589 } (nonlocal, escaped)
  __assert_failD.9858 ("available_vcs > 0", "routefunc.cpp", 856, &_ZZ9romm_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45589);
;;    succ:      

;;   basic block 31, loop depth 0, count 0, freq 5255, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       29 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_110 == 0)
    goto <bb 32>;
  else
    goto <bb 33>;
;;    succ:       32 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 2050, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       31 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  vcEnd_50 = vcEnd_3 - available_vcs_47;
  # DEBUG vcEndD.45588 => vcEnd_50
  goto <bb 36>;
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 3206, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       31 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_110 != 1)
    goto <bb 34>;
  else
    goto <bb 35>;
;;    succ:       34 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 1
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       33 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_49 = VDEF <.MEM_98>
  # USE = nonlocal null { D.45589 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45589 } (nonlocal, escaped)
  __assert_failD.9858 ("f->ph == 1", "routefunc.cpp", 861, &_ZZ9romm_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45589);
;;    succ:      

;;   basic block 35, loop depth 0, count 0, freq 3205, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       33 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  vcBegin_48 = vcBegin_1 + available_vcs_47;
  # DEBUG vcBeginD.45587 => vcBegin_48
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 8276, maybe hot
;;   Invalid sum of incoming frequencies 12771, should be 8276
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       14 (TRUE_VALUE,EXECUTABLE)
;;                28 [19.9%]  (FALSE_VALUE,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # vcBegin_2 = PHI <vcBegin_1(14), vcBegin_1(28), vcBegin_48(35), vcBegin_1(32), vcBegin_1(12)>
  # vcEnd_4 = PHI <vcEnd_3(14), vcEnd_3(28), vcEnd_3(35), vcEnd_50(32), vcEnd_3(12)>
  # out_port_5 = PHI <-1(14), out_port_43(28), out_port_43(35), out_port_43(32), -1(12)>
  # .MEM_10 = PHI <.MEM_11(D)(14), .MEM_98(28), .MEM_98(35), .MEM_98(32), .MEM_11(D)(12)>
  # DEBUG out_portD.45590 => out_port_5
  # DEBUG vcEndD.45588 => vcEnd_4
  # DEBUG vcBeginD.45587 => vcBegin_2
  # .MEM_53 = VDEF <.MEM_10>
  # USE = nonlocal null { D.45589 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45589 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_52(D));
  # .MEM_54 = VDEF <.MEM_53>
  # USE = nonlocal null { D.45589 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45589 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_52(D), out_port_5, vcBegin_2, vcEnd_4, 0);
  # VUSE <.MEM_54>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 37, loop depth 0, count 0, freq 3282, maybe hot
;;   Invalid sum of incoming frequencies 919, should be 3282
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       27 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_39 = VDEF <.MEM_8>
  f_14(D)->phD.29348 = 1;
;;    succ:       38 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 6565, maybe hot
;;    prev block 37, next block 1, flags: (NEW, REACHABLE)
;;    pred:       26 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_108 = PHI <.MEM_8(26), .MEM_39(37)>
  # prephitmp_123 = PHI <prephitmp_139(26), 1(37)>
  # VUSE <.MEM_108>
  pretmp_126 = MEM[(intD.9 *)r_37(D) + 96B];
  goto <bb 28>;
;;    succ:       28 [100.0%]  (FALLTHRU,EXECUTABLE)

}


Creating dr for f_14(D)->type
analyze_innermost: success.
	base_address: f_14(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *f_14(D)
	Access function 0: 0
Creating dr for gReadReqBeginVC
analyze_innermost: success.
	base_address: &gReadReqBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReqBeginVC
Creating dr for gReadReqEndVC
analyze_innermost: success.
	base_address: &gReadReqEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReqEndVC
Creating dr for gWriteReqBeginVC
analyze_innermost: success.
	base_address: &gWriteReqBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReqBeginVC
Creating dr for gWriteReqEndVC
analyze_innermost: success.
	base_address: &gWriteReqEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReqEndVC
Creating dr for gReadReplyBeginVC
analyze_innermost: success.
	base_address: &gReadReplyBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReplyBeginVC
Creating dr for gReadReplyEndVC
analyze_innermost: success.
	base_address: &gReadReplyEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReplyEndVC
Creating dr for gNumVCs
analyze_innermost: success.
	base_address: &gNumVCs
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gNumVCs
Creating dr for gWriteReplyBeginVC
analyze_innermost: success.
	base_address: &gWriteReplyBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReplyBeginVC
Creating dr for gWriteReplyEndVC
analyze_innermost: success.
	base_address: &gWriteReplyEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReplyEndVC
Creating dr for f_14(D)->vc
analyze_innermost: success.
	base_address: f_14(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: *f_14(D)
	Access function 0: 32
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for f_14(D)->ph
analyze_innermost: success.
	base_address: f_14(D)
	offset from base address: 0
	constant offset from base address: 68
	step: 0
	aligned to: 256
	base_object: *f_14(D)
	Access function 0: 544
Creating dr for f_14(D)->dest
analyze_innermost: success.
	base_address: f_14(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_14(D)
	Access function 0: 352
Creating dr for f_14(D)->src
analyze_innermost: success.
	base_address: f_14(D)
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: *f_14(D)
	Access function 0: 320
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for f_14(D)->ph
analyze_innermost: success.
	base_address: f_14(D)
	offset from base address: 0
	constant offset from base address: 68
	step: 0
	aligned to: 256
	base_object: *f_14(D)
	Access function 0: 544
Creating dr for f_14(D)->dest
analyze_innermost: success.
	base_address: f_14(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_14(D)
	Access function 0: 352
Creating dr for f_14(D)->intm
analyze_innermost: success.
	base_address: f_14(D)
	offset from base address: 0
	constant offset from base address: 64
	step: 0
	aligned to: 256
	base_object: *f_14(D)
	Access function 0: 512
Creating dr for f_14(D)->ph
analyze_innermost: success.
	base_address: f_14(D)
	offset from base address: 0
	constant offset from base address: 68
	step: 0
	aligned to: 256
	base_object: *f_14(D)
	Access function 0: 544
Creating dr for f_14(D)->dest
analyze_innermost: success.
	base_address: f_14(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_14(D)
	Access function 0: 352
Creating dr for MEM[(int *)r_37(D) + 96B]
analyze_innermost: success.
	base_address: r_37(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(int *)r_37(D) + 96B]
Creating dr for f_14(D)->intm
analyze_innermost: success.
	base_address: f_14(D)
	offset from base address: 0
	constant offset from base address: 64
	step: 0
	aligned to: 256
	base_object: *f_14(D)
	Access function 0: 512
Creating dr for f_14(D)->ph
analyze_innermost: success.
	base_address: f_14(D)
	offset from base address: 0
	constant offset from base address: 68
	step: 0
	aligned to: 256
	base_object: *f_14(D)
	Access function 0: 544
Creating dr for MEM[(int *)r_37(D) + 96B]
analyze_innermost: success.
	base_address: r_37(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(int *)r_37(D) + 96B]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:10, LOOPS:0, CONDITIONS:4, STMTS:26)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:43, LOOPS:1, CONDITIONS:17, STMTS:141)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # DEBUG vcBegin => 0
    # DEBUG D#207 => gNumVCs
    # DEBUG vcEnd => D#207 + -1
    # VUSE <.MEM_11(D)>
    _15 = f_14(D)->type;
    if (_15 == 0)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_11 })
  {
    <bb 3>:
    # VUSE <.MEM_11(D)>
    vcBegin_16 = gReadReqBeginVC;
    # DEBUG vcBegin => vcBegin_16
    # VUSE <.MEM_11(D)>
    vcEnd_17 = gReadReqEndVC;
    # DEBUG vcEnd => vcEnd_17
    goto <bb 11>;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 bb_6 })
  {
    <bb 4>:
    if (_15 == 2)
      goto <bb 5>;
    else
      goto <bb 6>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_11 })
  {
    <bb 5>:
    # VUSE <.MEM_11(D)>
    vcBegin_18 = gWriteReqBeginVC;
    # DEBUG vcBegin => vcBegin_18
    # VUSE <.MEM_11(D)>
    vcEnd_19 = gWriteReqEndVC;
    # DEBUG vcEnd => vcEnd_19
    goto <bb 11>;

  }
  bb_6 (preds = {bb_4 }, succs = {bb_7 bb_8 })
  {
    <bb 6>:
    if (_15 == 1)
      goto <bb 7>;
    else
      goto <bb 8>;

  }
  bb_7 (preds = {bb_6 }, succs = {bb_11 })
  {
    <bb 7>:
    # VUSE <.MEM_11(D)>
    vcBegin_20 = gReadReplyBeginVC;
    # DEBUG vcBegin => vcBegin_20
    # VUSE <.MEM_11(D)>
    vcEnd_21 = gReadReplyEndVC;
    # DEBUG vcEnd => vcEnd_21
    goto <bb 11>;

  }
  bb_8 (preds = {bb_6 }, succs = {bb_10 bb_9 })
  {
    <bb 8>:
    # VUSE <.MEM_11(D)>
    gNumVCs.48_12 = gNumVCs;
    if (_15 == 3)
      goto <bb 10>;
    else
      goto <bb 9>;

  }
  bb_9 (preds = {bb_8 }, succs = {bb_11 })
  {
    <bb 9>:
    vcEnd_13 = gNumVCs.48_12 + -1;
    goto <bb 11>;

  }
  bb_10 (preds = {bb_8 }, succs = {bb_11 })
  {
    <bb 10>:
    # VUSE <.MEM_11(D)>
    vcBegin_22 = gWriteReplyBeginVC;
    # DEBUG vcBegin => vcBegin_22
    # VUSE <.MEM_11(D)>
    vcEnd_23 = gWriteReplyEndVC;
    # DEBUG vcEnd => vcEnd_23

  }
  bb_11 (preds = {bb_3 bb_5 bb_7 bb_9 bb_10 }, succs = {bb_42 })
  {
    <bb 11>:
    # vcBegin_1 = PHI <vcBegin_16(3), vcBegin_18(5), vcBegin_20(7), 0(9), vcBegin_22(10)>
    # vcEnd_3 = PHI <vcEnd_17(3), vcEnd_19(5), vcEnd_21(7), vcEnd_13(9), vcEnd_23(10)>

  }
  bb_42 (preds = {bb_11 }, succs = {bb_12 bb_14 })
  {
    <bb 42>:
    # DEBUG vcEnd => vcEnd_3
    # DEBUG vcBegin => vcBegin_1
    # VUSE <.MEM_11(D)>
    _24 = f_14(D)->vc;
    _92 = vcEnd_3 < _24;
    _112 = vcBegin_1 > _24;
    _109 = _92 | _112;
    if (_109 != 0)
      goto <bb 12>;
    else
      goto <bb 14>;

  }
  bb_12 (preds = {bb_42 }, succs = {bb_13 bb_36 })
  {
    <bb 12>:
    _6 = _24 >= 0;
    if (_6 >= inject_25(D))
      goto <bb 13>;
    else
      goto <bb 36>;

  }
  bb_13 (preds = {bb_12 }, succs = {})
  {
    <bb 13>:
    # .MEM_26 = VDEF <.MEM_11(D)>
    __assert_fail ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 830, &__PRETTY_FUNCTION__);

  }
  bb_14 (preds = {bb_42 }, succs = {bb_36 bb_15 })
  {
    <bb 14>:
    if (inject_25(D) != 0)
      goto <bb 36>;
    else
      goto <bb 15>;

  }
  bb_15 (preds = {bb_14 }, succs = {bb_17 bb_16 })
  {
    <bb 15>:
    # VUSE <.MEM_11(D)>
    gN.49_27 = gN;
    _28 = gN.49_27 * 2;
    if (_28 == in_channel_29(D))
      goto <bb 17>;
    else
      goto <bb 16>;

  }
  bb_16 (preds = {bb_15 }, succs = {bb_26 })
  {
    <bb 16>:
    # VUSE <.MEM_11(D)>
    pretmp_138 = f_14(D)->ph;
    # VUSE <.MEM_11(D)>
    pretmp_140 = f_14(D)->dest;
    goto <bb 26>;

  }
  bb_17 (preds = {bb_15 }, succs = {bb_25 bb_18 })
  {
    <bb 17>:
    # .MEM_30 = VDEF <.MEM_11(D)>
    f_14(D)->ph = 0;
    # VUSE <.MEM_30>
    dest_31 = f_14(D)->dest;
    # VUSE <.MEM_30>
    src_32 = f_14(D)->src;
    # DEBUG src => src_32
    # DEBUG dest => dest_31
    # DEBUG intm => 0
    # DEBUG offset => 1
    # DEBUG n => 0
    # DEBUG n => 0
    # DEBUG offset => 1
    # DEBUG intm => 0
    # DEBUG dest => dest_31
    # DEBUG src => src_32
    if (gN.49_27 <= 0)
      goto <bb 25>;
    else
      goto <bb 18>;

  }
  bb_18 (preds = {bb_17 }, succs = {bb_19 })
  {
    <bb 18>:
    # VUSE <.MEM_30>
    pretmp_132 = gK;

  }
  bb_24 (preds = {bb_22 }, succs = {bb_39 })
  {
    <bb 24>:
    # intm_137 = PHI <intm_88(22)>

  }
  bb_39 (preds = {bb_24 }, succs = {bb_25 })
  {
    <bb 39>:
    # VUSE <.MEM_89>
    pretmp_128 = f_14(D)->ph;
    # VUSE <.MEM_89>
    pretmp_130 = f_14(D)->dest;

  }
  bb_25 (preds = {bb_39 bb_17 }, succs = {bb_40 })
  {
    <bb 25>:
    # .MEM_95 = PHI <.MEM_89(39), .MEM_30(17)>
    # intm_105 = PHI <intm_137(39), 0(17)>
    # prephitmp_129 = PHI <pretmp_128(39), 0(17)>
    # prephitmp_131 = PHI <pretmp_130(39), dest_31(17)>

  }
  bb_40 (preds = {bb_25 }, succs = {bb_26 })
  {
    <bb 40>:
    # .MEM_35 = VDEF <.MEM_95>
    f_14(D)->intm = intm_105;

  }
  bb_26 (preds = {bb_16 bb_40 }, succs = {bb_27 bb_38 })
  {
    <bb 26>:
    # .MEM_8 = PHI <.MEM_11(D)(16), .MEM_35(40)>
    # prephitmp_139 = PHI <pretmp_138(16), prephitmp_129(40)>
    # prephitmp_141 = PHI <pretmp_140(16), prephitmp_131(40)>
    if (prephitmp_139 == 0)
      goto <bb 27>;
    else
      goto <bb 38>;

  }
  bb_27 (preds = {bb_26 }, succs = {bb_37 bb_28 })
  {
    <bb 27>:
    # VUSE <.MEM_8>
    _55 = MEM[(int *)r_37(D) + 96B];
    # DEBUG D#14 => r_37(D)
    # DEBUG this => D#14
    # VUSE <.MEM_8>
    _38 = f_14(D)->intm;
    if (_38 == _55)
      goto <bb 37>;
    else
      goto <bb 28>;

  }
  bb_28 (preds = {bb_27 bb_41 }, succs = {bb_29 bb_36 })
  {
    <bb 28>:
    # iftmp.52_7 = PHI <_38(27), prephitmp_141(41)>
    # .MEM_98 = PHI <.MEM_8(27), .MEM_108(41)>
    # _110 = PHI <prephitmp_139(27), prephitmp_123(41)>
    # prephitmp_127 = PHI <_55(27), pretmp_126(41)>
    # DEBUG D#14 => r_37(D)
    # DEBUG this => D#14
    # VUSE <.MEM_98>
    out_port_43 = dor_next_mesh (prephitmp_127, iftmp.52_7, 0);
    # DEBUG out_port => out_port_43
    # DEBUG D#14 => r_37(D)
    # DEBUG this => D#14
    if (prephitmp_127 != prephitmp_141)
      goto <bb 29>;
    else
      goto <bb 36>;

  }
  bb_29 (preds = {bb_28 }, succs = {bb_30 bb_31 })
  {
    <bb 29>:
    _45 = vcEnd_3 - vcBegin_1;
    _46 = _45 + 1;
    available_vcs_47 = _46 / 2;
    # DEBUG available_vcs => available_vcs_47
    if (available_vcs_47 <= 0)
      goto <bb 30>;
    else
      goto <bb 31>;

  }
  bb_30 (preds = {bb_29 }, succs = {})
  {
    <bb 30>:
    # .MEM_51 = VDEF <.MEM_98>
    __assert_fail ("available_vcs > 0", "routefunc.cpp", 856, &__PRETTY_FUNCTION__);

  }
  bb_31 (preds = {bb_29 }, succs = {bb_32 bb_33 })
  {
    <bb 31>:
    if (_110 == 0)
      goto <bb 32>;
    else
      goto <bb 33>;

  }
  bb_32 (preds = {bb_31 }, succs = {bb_36 })
  {
    <bb 32>:
    vcEnd_50 = vcEnd_3 - available_vcs_47;
    # DEBUG vcEnd => vcEnd_50
    goto <bb 36>;

  }
  bb_33 (preds = {bb_31 }, succs = {bb_34 bb_35 })
  {
    <bb 33>:
    if (_110 != 1)
      goto <bb 34>;
    else
      goto <bb 35>;

  }
  bb_34 (preds = {bb_33 }, succs = {})
  {
    <bb 34>:
    # .MEM_49 = VDEF <.MEM_98>
    __assert_fail ("f->ph == 1", "routefunc.cpp", 861, &__PRETTY_FUNCTION__);

  }
  bb_35 (preds = {bb_33 }, succs = {bb_36 })
  {
    <bb 35>:
    vcBegin_48 = vcBegin_1 + available_vcs_47;
    # DEBUG vcBegin => vcBegin_48

  }
  bb_36 (preds = {bb_14 bb_28 bb_35 bb_32 bb_12 }, succs = {bb_1 })
  {
    <bb 36>:
    # vcBegin_2 = PHI <vcBegin_1(14), vcBegin_1(28), vcBegin_48(35), vcBegin_1(32), vcBegin_1(12)>
    # vcEnd_4 = PHI <vcEnd_3(14), vcEnd_3(28), vcEnd_3(35), vcEnd_50(32), vcEnd_3(12)>
    # out_port_5 = PHI <-1(14), out_port_43(28), out_port_43(35), out_port_43(32), -1(12)>
    # .MEM_10 = PHI <.MEM_11(D)(14), .MEM_98(28), .MEM_98(35), .MEM_98(32), .MEM_11(D)(12)>
    # DEBUG out_port => out_port_5
    # DEBUG vcEnd => vcEnd_4
    # DEBUG vcBegin => vcBegin_2
    # .MEM_53 = VDEF <.MEM_10>
    OutputSet::Clear (outputs_52(D));
    # .MEM_54 = VDEF <.MEM_53>
    OutputSet::AddRange (outputs_52(D), out_port_5, vcBegin_2, vcEnd_4, 0);
    # VUSE <.MEM_54>
    return;

  }
  bb_37 (preds = {bb_27 }, succs = {bb_38 })
  {
    <bb 37>:
    # .MEM_39 = VDEF <.MEM_8>
    f_14(D)->ph = 1;

  }
  bb_38 (preds = {bb_26 bb_37 }, succs = {bb_41 })
  {
    <bb 38>:
    # .MEM_108 = PHI <.MEM_8(26), .MEM_39(37)>
    # prephitmp_123 = PHI <prephitmp_139(26), 1(37)>

  }
  bb_41 (preds = {bb_38 }, succs = {bb_28 })
  {
    <bb 41>:
    # VUSE <.MEM_108>
    pretmp_126 = MEM[(int *)r_37(D) + 96B];
    goto <bb 28>;

  }
  loop_1 (header = 19, latch = 23, niter = , upper_bound = 2147483647)
  {
    bb_19 (preds = {bb_18 bb_23 }, succs = {bb_20 bb_21 })
    {
      <bb 19>:
      # .MEM_100 = PHI <.MEM_30(18), .MEM_89(23)>
      # n_107 = PHI <0(18), n_87(23)>
      # dest_104 = PHI <dest_31(18), dest_85(23)>
      # src_94 = PHI <src_32(18), src_86(23)>
      # offset_106 = PHI <1(18), offset_84(23)>
      # intm_93 = PHI <0(18), intm_88(23)>
      # prephitmp_133 = PHI <pretmp_132(18), gK.47_83(23)>
      # DEBUG n => n_107
      # DEBUG offset => offset_106
      # DEBUG intm => intm_93
      # DEBUG dest => dest_104
      # DEBUG src => src_94
      _61 = dest_104 % prephitmp_133;
      _63 = src_94 % prephitmp_133;
      dist_64 = _61 - _63;
      # DEBUG dist => dist_64
      if (dist_64 > 0)
        goto <bb 20>;
      else
        goto <bb 21>;

    }
    bb_20 (preds = {bb_19 }, succs = {bb_22 })
    {
      <bb 20>:
      # DEBUG max => dist_64
      # .MEM_90 = VDEF <.MEM_100>
      _65 = ran_next ();
      _66 = dist_64 + 1;
      _67 = (long int) _66;
      _68 = _65 % _67;
      _69 = (int) _68;
      _70 = _63 + _69;
      _72 = _70 * offset_106;
      intm_74 = _72 + intm_93;
      # DEBUG intm => intm_74
      goto <bb 22>;

    }
    bb_21 (preds = {bb_19 }, succs = {bb_22 })
    {
      <bb 21>:
      # DEBUG max => -dist_64
      # .MEM_91 = VDEF <.MEM_100>
      _75 = ran_next ();
      _76 = 1 - dist_64;
      _77 = (long int) _76;
      _78 = _75 % _77;
      _79 = (int) _78;
      _80 = _61 + _79;
      _81 = _80 * offset_106;
      intm_82 = _81 + intm_93;
      # DEBUG intm => intm_82

    }
    bb_22 (preds = {bb_20 bb_21 }, succs = {bb_24 bb_23 })
    {
      <bb 22>:
      # intm_88 = PHI <intm_74(20), intm_82(21)>
      # .MEM_89 = PHI <.MEM_90(20), .MEM_91(21)>
      # DEBUG intm => intm_88
      # VUSE <.MEM_89>
      gK.47_83 = gK;
      offset_84 = gK.47_83 * offset_106;
      # DEBUG offset => offset_84
      dest_85 = dest_104 / gK.47_83;
      # DEBUG dest => dest_85
      src_86 = src_94 / gK.47_83;
      # DEBUG src => src_86
      n_87 = n_107 + 1;
      # DEBUG n => n_87
      # DEBUG n => n_87
      # DEBUG offset => offset_84
      # DEBUG intm => intm_88
      # DEBUG dest => dest_85
      # DEBUG src => src_86
      # VUSE <.MEM_89>
      gN.46_57 = gN;
      if (gN.46_57 <= n_87)
        goto <bb 24>;
      else
        goto <bb 23>;

    }
    bb_23 (preds = {bb_22 }, succs = {bb_19 })
    {
      <bb 23>:
      goto <bb 19>;

    }
  }
}

Pass statistics:
----------------

void romm_mesh(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45580, const struct FlitD.29321 * fD.45581, intD.9 in_channelD.45582, struct OutputSetD.28230 * outputsD.45583, boolD.2757 injectD.45584)
{
  intD.9 distD.55267;
  intD.9 intmD.55268;
  intD.9 offsetD.55269;
  intD.9 nD.55270;
  intD.9 D.55273;
  intD.9 srcD.55265;
  intD.9 destD.55266;
  intD.9 available_vcsD.45591;
  intD.9 out_portD.45590;
  static const charD.10 _ZZ9romm_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45589[66] = "void romm_mesh(const Router*, const Flit*, int, OutputSet*, bool)";
  intD.9 vcEndD.45588;
  intD.9 vcBeginD.45587;
  boolD.2757 _6;
  const intD.9 iftmp.52_7;
  intD.9 gNumVCs.48_12;
  FlitTypeD.29324 _15;
  intD.9 _24;
  intD.9 gN.49_27;
  intD.9 _28;
  intD.9 _38;
  intD.9 _45;
  intD.9 _46;
  const intD.9 _55;
  intD.9 gN.46_57;
  intD.9 _61;
  intD.9 _63;
  long intD.12 _65;
  intD.9 _66;
  long intD.12 _67;
  long intD.12 _68;
  intD.9 _69;
  intD.9 _70;
  intD.9 _72;
  long intD.12 _75;
  intD.9 _76;
  long intD.12 _77;
  long intD.12 _78;
  intD.9 _79;
  intD.9 _80;
  intD.9 _81;
  intD.9 gK.47_83;
  boolD.2757 _92;
  boolD.2757 _109;
  intD.9 _110;
  boolD.2757 _112;
  intD.9 prephitmp_123;
  const intD.9 pretmp_126;
  const intD.9 prephitmp_127;
  intD.9 pretmp_128;
  intD.9 prephitmp_129;
  const intD.9 pretmp_130;
  const intD.9 prephitmp_131;
  intD.9 pretmp_132;
  intD.9 prephitmp_133;
  intD.9 pretmp_138;
  intD.9 prephitmp_139;
  const intD.9 pretmp_140;
  const intD.9 prephitmp_141;

;;   basic block 2, loop depth 0, count 0, freq 8284, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG vcBeginD.45587 => 0
  # DEBUG D#207ptD.0 => gNumVCsD.42077
  # DEBUG vcEndD.45588 => D#207ptD.0 + -1
  # VUSE <.MEM_11(D)>
  _15 = f_14(D)->typeD.29330;
  if (_15 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 4142, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  vcBegin_16 = gReadReqBeginVCD.42078;
  # DEBUG vcBeginD.45587 => vcBegin_16
  # VUSE <.MEM_11(D)>
  vcEnd_17 = gReadReqEndVCD.42079;
  # DEBUG vcEndD.45588 => vcEnd_17
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 4142, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_15 == 2)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 1160, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  vcBegin_18 = gWriteReqBeginVCD.42080;
  # DEBUG vcBeginD.45587 => vcBegin_18
  # VUSE <.MEM_11(D)>
  vcEnd_19 = gWriteReqEndVCD.42081;
  # DEBUG vcEndD.45588 => vcEnd_19
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 2982, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_15 == 1)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 835, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  vcBegin_20 = gReadReplyBeginVCD.42082;
  # DEBUG vcBeginD.45587 => vcBegin_20
  # VUSE <.MEM_11(D)>
  vcEnd_21 = gReadReplyEndVCD.42083;
  # DEBUG vcEndD.45588 => vcEnd_21
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 2147, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  gNumVCs.48_12 = gNumVCsD.42077;
  if (_15 == 3)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 1546, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  vcEnd_13 = gNumVCs.48_12 + -1;
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 601, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  vcBegin_22 = gWriteReplyBeginVCD.42084;
  # DEBUG vcBeginD.45587 => vcBegin_22
  # VUSE <.MEM_11(D)>
  vcEnd_23 = gWriteReplyEndVCD.42085;
  # DEBUG vcEndD.45588 => vcEnd_23
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 8284, maybe hot
;;    prev block 10, next block 42, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # vcBegin_1 = PHI <vcBegin_16(3), vcBegin_18(5), vcBegin_20(7), 0(9), vcBegin_22(10)>
  # vcEnd_3 = PHI <vcEnd_17(3), vcEnd_19(5), vcEnd_21(7), vcEnd_13(9), vcEnd_23(10)>
;;    succ:       42 [100.0%]  (FALLTHRU)

;;   basic block 42, loop depth 0, count 0, freq 8284, maybe hot
;;    prev block 11, next block 12, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU)
  # DEBUG vcEndD.45588 => vcEnd_3
  # DEBUG vcBeginD.45587 => vcBegin_1
  # VUSE <.MEM_11(D)>
  _24 = f_14(D)->vcD.29331;
  _92 = vcEnd_3 < _24;
  _112 = vcBegin_1 > _24;
  _109 = _92 | _112;
  if (_109 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 6211, maybe hot
;;   Invalid sum of incoming frequencies 4142, should be 6211
;;    prev block 42, next block 13, flags: (NEW, REACHABLE)
;;    pred:       42 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  _6 = _24 >= 0;
  if (_6 >= inject_25(D))
    goto <bb 13>;
  else
    goto <bb 36>;
;;    succ:       13 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 5
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_26 = VDEF <.MEM_11(D)>
  # USE = nonlocal null { D.45589 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45589 } (nonlocal, escaped)
  __assert_failD.9858 ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 830, &_ZZ9romm_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45589);
;;    succ:      

;;   basic block 14, loop depth 0, count 0, freq 2070, maybe hot
;;   Invalid sum of incoming frequencies 4142, should be 2070
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       42 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (inject_25(D) != 0)
    goto <bb 36>;
  else
    goto <bb 15>;
;;    succ:       36 (TRUE_VALUE,EXECUTABLE)
;;                15 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 6565, maybe hot
;;   Invalid sum of incoming frequencies 2070, should be 6565
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  gN.49_27 = gND.33727;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _28 = gN.49_27 * 2;
  if (_28 == in_channel_29(D))
    goto <bb 17>;
  else
    goto <bb 16>;
;;    succ:       17 [13.7%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [86.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 5665, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       15 [86.3%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  pretmp_138 = f_14(D)->phD.29348;
  # VUSE <.MEM_11(D)>
  pretmp_140 = f_14(D)->destD.29342;
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       15 [13.7%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_30 = VDEF <.MEM_11(D)>
  f_14(D)->phD.29348 = 0;
  # VUSE <.MEM_30>
  dest_31 = f_14(D)->destD.29342;
  # VUSE <.MEM_30>
  src_32 = f_14(D)->srcD.29341;
  # DEBUG srcD.55265 => src_32
  # DEBUG destD.55266 => dest_31
  # DEBUG intmD.55268 => 0
  # DEBUG offsetD.55269 => 1
  # DEBUG nD.55270 => 0
  # DEBUG nD.55270 => 0
  # DEBUG offsetD.55269 => 1
  # DEBUG intmD.55268 => 0
  # DEBUG destD.55266 => dest_31
  # DEBUG srcD.55265 => src_32
  if (gN.49_27 <= 0)
    goto <bb 25>;
  else
    goto <bb 18>;
;;    succ:       25 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 17, next block 19, flags: (NEW)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_30>
  pretmp_132 = gKD.33726;
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 19, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_100 = PHI <.MEM_30(18), .MEM_89(23)>
  # n_107 = PHI <0(18), n_87(23)>
  # dest_104 = PHI <dest_31(18), dest_85(23)>
  # src_94 = PHI <src_32(18), src_86(23)>
  # offset_106 = PHI <1(18), offset_84(23)>
  # intm_93 = PHI <0(18), intm_88(23)>
  # prephitmp_133 = PHI <pretmp_132(18), gK.47_83(23)>
  # DEBUG nD.55270 => n_107
  # DEBUG offsetD.55269 => offset_106
  # DEBUG intmD.55268 => intm_93
  # DEBUG destD.55266 => dest_104
  # DEBUG srcD.55265 => src_94
  _61 = dest_104 % prephitmp_133;
  _63 = src_94 % prephitmp_133;
  dist_64 = _61 - _63;
  # DEBUG distD.55267 => dist_64
  if (dist_64 > 0)
    goto <bb 20>;
  else
    goto <bb 21>;
;;    succ:       20 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [27.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 1, count 0, freq 6644, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       19 [73.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG maxD.55272 => dist_64
  # .MEM_90 = VDEF <.MEM_100>
  # USE = nonlocal null { D.45589 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45589 } (nonlocal, escaped)
  _65 = _Z8ran_nextvD.43987 ();
  # RANGE [2, 2147483647] NONZERO 2147483647
  _66 = dist_64 + 1;
  # RANGE [2, 9223372036854775807] NONZERO 2147483647
  _67 = (long intD.12) _66;
  _68 = _65 % _67;
  _69 = (intD.9) _68;
  _70 = _63 + _69;
  _72 = _70 * offset_106;
  intm_74 = _72 + intm_93;
  # DEBUG intmD.55268 => intm_74
  goto <bb 22>;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 1, count 0, freq 2456, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       19 [27.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG maxD.55271 => -dist_64
  # .MEM_91 = VDEF <.MEM_100>
  # USE = nonlocal null { D.45589 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45589 } (nonlocal, escaped)
  _75 = _Z8ran_nextvD.43987 ();
  # RANGE [1, 2147483647] NONZERO 2147483647
  _76 = 1 - dist_64;
  # RANGE [1, 9223372036854775807] NONZERO 2147483647
  _77 = (long intD.12) _76;
  _78 = _75 % _77;
  _79 = (intD.9) _78;
  _80 = _61 + _79;
  _81 = _80 * offset_106;
  intm_82 = _81 + intm_93;
  # DEBUG intmD.55268 => intm_82
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                21 [100.0%]  (FALLTHRU,EXECUTABLE)
  # intm_88 = PHI <intm_74(20), intm_82(21)>
  # .MEM_89 = PHI <.MEM_90(20), .MEM_91(21)>
  # DEBUG intmD.55268 => intm_88
  # VUSE <.MEM_89>
  gK.47_83 = gKD.33726;
  offset_84 = gK.47_83 * offset_106;
  # DEBUG offsetD.55269 => offset_84
  dest_85 = dest_104 / gK.47_83;
  # DEBUG destD.55266 => dest_85
  src_86 = src_94 / gK.47_83;
  # DEBUG srcD.55265 => src_86
  n_87 = n_107 + 1;
  # DEBUG nD.55270 => n_87
  # DEBUG nD.55270 => n_87
  # DEBUG offsetD.55269 => offset_84
  # DEBUG intmD.55268 => intm_88
  # DEBUG destD.55266 => dest_85
  # DEBUG srcD.55265 => src_86
  # VUSE <.MEM_89>
  gN.46_57 = gND.33727;
  if (gN.46_57 <= n_87)
    goto <bb 24>;
  else
    goto <bb 23>;
;;    succ:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 19>;
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 23, next block 39, flags: (NEW)
;;    pred:       22 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # intm_137 = PHI <intm_88(22)>
;;    succ:       39 [100.0%]  (FALLTHRU)

;;   basic block 39, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 24, next block 25, flags: (NEW)
;;    pred:       24 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_89>
  pretmp_128 = f_14(D)->phD.29348;
  # VUSE <.MEM_89>
  pretmp_130 = f_14(D)->destD.29342;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 39, next block 40, flags: (NEW, REACHABLE)
;;    pred:       39 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_95 = PHI <.MEM_89(39), .MEM_30(17)>
  # intm_105 = PHI <intm_137(39), 0(17)>
  # prephitmp_129 = PHI <pretmp_128(39), 0(17)>
  # prephitmp_131 = PHI <pretmp_130(39), dest_31(17)>
;;    succ:       40 [100.0%]  (FALLTHRU)

;;   basic block 40, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 25, next block 26, flags: (NEW)
;;    pred:       25 [100.0%]  (FALLTHRU)
  # .MEM_35 = VDEF <.MEM_95>
  f_14(D)->intmD.29347 = intm_105;
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 6565, maybe hot
;;    prev block 40, next block 27, flags: (NEW, REACHABLE)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                40 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_8 = PHI <.MEM_11(D)(16), .MEM_35(40)>
  # prephitmp_139 = PHI <pretmp_138(16), prephitmp_129(40)>
  # prephitmp_141 = PHI <pretmp_140(16), prephitmp_131(40)>
  if (prephitmp_139 == 0)
    goto <bb 27>;
  else
    goto <bb 38>;
;;    succ:       27 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 3282, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       26 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8>
  _55 = MEM[(intD.9 *)r_37(D) + 96B];
  # DEBUG D#14ptD.0 => r_37(D)
  # DEBUG thisD.51539 => D#14ptD.0
  # VUSE <.MEM_8>
  _38 = f_14(D)->intmD.29347;
  if (_38 == _55)
    goto <bb 37>;
  else
    goto <bb 28>;
;;    succ:       37 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 6565, maybe hot
;;   Invalid sum of incoming frequencies 8928, should be 6565
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       27 [72.0%]  (FALSE_VALUE,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)
  # iftmp.52_7 = PHI <_38(27), prephitmp_141(41)>
  # .MEM_98 = PHI <.MEM_8(27), .MEM_108(41)>
  # _110 = PHI <prephitmp_139(27), prephitmp_123(41)>
  # prephitmp_127 = PHI <_55(27), pretmp_126(41)>
  # DEBUG D#14ptD.0 => r_37(D)
  # DEBUG thisD.51545 => D#14ptD.0
  # VUSE <.MEM_98>
  # USE = nonlocal escaped null 
  out_port_43 = _Z13dor_next_meshiibD.45450 (prephitmp_127, iftmp.52_7, 0);
  # DEBUG out_portD.45590 => out_port_43
  # DEBUG D#14ptD.0 => r_37(D)
  # DEBUG thisD.51542 => D#14ptD.0
  if (prephitmp_127 != prephitmp_141)
    goto <bb 29>;
  else
    goto <bb 36>;
;;    succ:       29 [80.1%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [19.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 5258, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       28 [80.1%]  (TRUE_VALUE,EXECUTABLE)
  _45 = vcEnd_3 - vcBegin_1;
  _46 = _45 + 1;
  # RANGE [-1073741824, 1073741823]
  available_vcs_47 = _46 / 2;
  # DEBUG available_vcsD.45591 => available_vcs_47
  if (available_vcs_47 <= 0)
    goto <bb 30>;
  else
    goto <bb 31>;
;;    succ:       30 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 2
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_51 = VDEF <.MEM_98>
  # USE = nonlocal null { D.45589 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45589 } (nonlocal, escaped)
  __assert_failD.9858 ("available_vcs > 0", "routefunc.cpp", 856, &_ZZ9romm_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45589);
;;    succ:      

;;   basic block 31, loop depth 0, count 0, freq 5255, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       29 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_110 == 0)
    goto <bb 32>;
  else
    goto <bb 33>;
;;    succ:       32 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 2050, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       31 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  vcEnd_50 = vcEnd_3 - available_vcs_47;
  # DEBUG vcEndD.45588 => vcEnd_50
  goto <bb 36>;
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 3206, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       31 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_110 != 1)
    goto <bb 34>;
  else
    goto <bb 35>;
;;    succ:       34 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 1
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       33 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_49 = VDEF <.MEM_98>
  # USE = nonlocal null { D.45589 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45589 } (nonlocal, escaped)
  __assert_failD.9858 ("f->ph == 1", "routefunc.cpp", 861, &_ZZ9romm_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45589);
;;    succ:      

;;   basic block 35, loop depth 0, count 0, freq 3205, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       33 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  vcBegin_48 = vcBegin_1 + available_vcs_47;
  # DEBUG vcBeginD.45587 => vcBegin_48
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 8276, maybe hot
;;   Invalid sum of incoming frequencies 12771, should be 8276
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       14 (TRUE_VALUE,EXECUTABLE)
;;                28 [19.9%]  (FALSE_VALUE,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # vcBegin_2 = PHI <vcBegin_1(14), vcBegin_1(28), vcBegin_48(35), vcBegin_1(32), vcBegin_1(12)>
  # vcEnd_4 = PHI <vcEnd_3(14), vcEnd_3(28), vcEnd_3(35), vcEnd_50(32), vcEnd_3(12)>
  # out_port_5 = PHI <-1(14), out_port_43(28), out_port_43(35), out_port_43(32), -1(12)>
  # .MEM_10 = PHI <.MEM_11(D)(14), .MEM_98(28), .MEM_98(35), .MEM_98(32), .MEM_11(D)(12)>
  # DEBUG out_portD.45590 => out_port_5
  # DEBUG vcEndD.45588 => vcEnd_4
  # DEBUG vcBeginD.45587 => vcBegin_2
  # .MEM_53 = VDEF <.MEM_10>
  # USE = nonlocal null { D.45589 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45589 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_52(D));
  # .MEM_54 = VDEF <.MEM_53>
  # USE = nonlocal null { D.45589 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45589 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_52(D), out_port_5, vcBegin_2, vcEnd_4, 0);
  # VUSE <.MEM_54>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 37, loop depth 0, count 0, freq 3282, maybe hot
;;   Invalid sum of incoming frequencies 919, should be 3282
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       27 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_39 = VDEF <.MEM_8>
  f_14(D)->phD.29348 = 1;
;;    succ:       38 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 6565, maybe hot
;;    prev block 37, next block 41, flags: (NEW, REACHABLE)
;;    pred:       26 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_108 = PHI <.MEM_8(26), .MEM_39(37)>
  # prephitmp_123 = PHI <prephitmp_139(26), 1(37)>
;;    succ:       41 [100.0%]  (FALLTHRU)

;;   basic block 41, loop depth 0, count 0, freq 6565, maybe hot
;;    prev block 38, next block 1, flags: (NEW)
;;    pred:       38 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_108>
  pretmp_126 = MEM[(intD.9 *)r_37(D) + 96B];
  goto <bb 28>;
;;    succ:       28 [100.0%]  (FALLTHRU,EXECUTABLE)

}



;; Function void romm_ni_mesh(const Router*, const Flit*, int, OutputSet*, bool) (_Z12romm_ni_meshPK6RouterPK4FlitiP9OutputSetb, funcdef_no=1978, decl_uid=45597, cgraph_uid=477, symbol_order=488)


Pass statistics:
----------------

void romm_ni_mesh(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45592, const struct FlitD.29321 * fD.45593, intD.9 in_channelD.45594, struct OutputSetD.28230 * outputsD.45595, boolD.2757 injectD.45596)
{
  intD.9 distD.55287;
  intD.9 intmD.55288;
  intD.9 offsetD.55289;
  intD.9 nD.55290;
  intD.9 D.55293;
  intD.9 srcD.55285;
  intD.9 destD.55286;
  const intD.9 vcs_per_destD.45602;
  intD.9 out_portD.45603;
  static const charD.10 _ZZ12romm_ni_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45601[69] = "void romm_ni_mesh(const Router*, const Flit*, int, OutputSet*, bool)";
  intD.9 vcEndD.45600;
  intD.9 vcBeginD.45599;
  const intD.9 iftmp.61_8;
  intD.9 gNumVCs.54_13;
  FlitTypeD.29324 _16;
  intD.9 _25;
  intD.9 _29;
  intD.9 _30;
  intD.9 _31;
  intD.9 gNodes.57_32;
  intD.9 _34;
  intD.9 _35;
  intD.9 _37;
  intD.9 gN.58_40;
  intD.9 _41;
  intD.9 _50;
  const intD.9 iftmp.61_54;
  const intD.9 _59;
  const intD.9 _60;
  intD.9 gN.46_62;
  intD.9 _66;
  intD.9 _68;
  long intD.12 _70;
  intD.9 _71;
  long intD.12 _72;
  long intD.12 _73;
  intD.9 _74;
  intD.9 _75;
  intD.9 _77;
  long intD.12 _80;
  intD.9 _81;
  long intD.12 _82;
  long intD.12 _83;
  intD.9 _84;
  intD.9 _85;
  intD.9 _86;
  intD.9 gK.47_88;
  boolD.2757 _97;
  boolD.2757 _103;
  boolD.2757 _116;
  boolD.2757 _121;
  const intD.9 prephitmp_127;
  const intD.9 pretmp_129;
  const intD.9 prephitmp_130;
  intD.9 pretmp_131;
  intD.9 prephitmp_132;
  intD.9 pretmp_133;
  intD.9 prephitmp_134;
  intD.9 pretmp_139;
  intD.9 prephitmp_140;

;;   basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG vcBeginD.45599 => 0
  # DEBUG D#212ptD.0 => gNumVCsD.42077
  # DEBUG vcEndD.45600 => D#212ptD.0 + -1
  # VUSE <.MEM_12(D)>
  _16 = f_15(D)->typeD.29330;
  if (_16 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 5000, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  vcBegin_17 = gReadReqBeginVCD.42078;
  # DEBUG vcBeginD.45599 => vcBegin_17
  # VUSE <.MEM_12(D)>
  vcEnd_18 = gReadReqEndVCD.42079;
  # DEBUG vcEndD.45600 => vcEnd_18
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 5000, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_16 == 2)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 1400, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  vcBegin_19 = gWriteReqBeginVCD.42080;
  # DEBUG vcBeginD.45599 => vcBegin_19
  # VUSE <.MEM_12(D)>
  vcEnd_20 = gWriteReqEndVCD.42081;
  # DEBUG vcEndD.45600 => vcEnd_20
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 3600, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_16 == 1)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 1008, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  vcBegin_21 = gReadReplyBeginVCD.42082;
  # DEBUG vcBeginD.45599 => vcBegin_21
  # VUSE <.MEM_12(D)>
  vcEnd_22 = gReadReplyEndVCD.42083;
  # DEBUG vcEndD.45600 => vcEnd_22
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 2592, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  gNumVCs.54_13 = gNumVCsD.42077;
  if (_16 == 3)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 1866, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  vcEnd_14 = gNumVCs.54_13 + -1;
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 726, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  vcBegin_23 = gWriteReplyBeginVCD.42084;
  # DEBUG vcBeginD.45599 => vcBegin_23
  # VUSE <.MEM_12(D)>
  vcEnd_24 = gWriteReplyEndVCD.42085;
  # DEBUG vcEndD.45600 => vcEnd_24
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # vcBegin_1 = PHI <vcBegin_17(3), vcBegin_19(5), vcBegin_21(7), 0(9), vcBegin_23(10)>
  # vcEnd_3 = PHI <vcEnd_18(3), vcEnd_20(5), vcEnd_22(7), vcEnd_14(9), vcEnd_24(10)>
  # DEBUG vcEndD.45600 => vcEnd_3
  # DEBUG vcBeginD.45599 => vcBegin_1
  # VUSE <.MEM_12(D)>
  _25 = f_15(D)->vcD.29331;
  _97 = vcEnd_3 < _25;
  _121 = vcBegin_1 > _25;
  _116 = _97 | _121;
  if (_116 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 7497, maybe hot
;;   Invalid sum of incoming frequencies 5000, should be 7497
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  _103 = _25 >= 0;
  if (inject_26(D) <= _103)
    goto <bb 13>;
  else
    goto <bb 33>;
;;    succ:       13 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 6
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_27 = VDEF <.MEM_12(D)>
  # USE = nonlocal null { D.45601 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45601 } (nonlocal, escaped)
  __assert_failD.9858 ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 891, &_ZZ12romm_ni_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45601);
;;    succ:      

;;   basic block 14, loop depth 0, count 0, freq 2500, maybe hot
;;   Invalid sum of incoming frequencies 5000, should be 2500
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (inject_26(D) != 0)
    goto <bb 33>;
  else
    goto <bb 15>;
;;    succ:       33 (TRUE_VALUE,EXECUTABLE)
;;                15 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 4997, maybe hot
;;   Invalid sum of incoming frequencies 2500, should be 4997
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  _59 = MEM[(intD.9 *)r_28(D) + 96B];
  # DEBUG D#14ptD.0 => r_28(D)
  # DEBUG thisD.51549 => D#14ptD.0
  # VUSE <.MEM_12(D)>
  _29 = f_15(D)->destD.29342;
  if (_29 != _59)
    goto <bb 33>;
  else
    goto <bb 18>;
;;    succ:       33 [72.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [28.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 2
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       33 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_39 = VDEF <.MEM_12(D)>
  # USE = nonlocal null { D.45601 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45601 } (nonlocal, escaped)
  __assert_failD.9858 ("vcs_per_dest > 0", "routefunc.cpp", 897, &_ZZ12romm_ni_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45601);
;;    succ:      

;;   basic block 17, loop depth 0, count 0, freq 8593, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       33 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  _34 = f_15(D)->destD.29342;
  _35 = vcs_per_dest_33 * _34;
  vcBegin_36 = vcBegin_1 + _35;
  # DEBUG vcBeginD.45599 => vcBegin_36
  _37 = vcs_per_dest_33 + vcBegin_36;
  vcEnd_38 = _37 + -1;
  # DEBUG vcEndD.45600 => vcEnd_38
  # DEBUG vcEndD.45600 => vcEnd_38
  # DEBUG vcBeginD.45599 => vcBegin_36
  if (inject_26(D) != 0)
    goto <bb 32>;
  else
    goto <bb 18>;
;;    succ:       32 [45.4%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [54.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 6095, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [54.6%]  (FALSE_VALUE,EXECUTABLE)
;;                15 [28.0%]  (FALSE_VALUE,EXECUTABLE)
  # vcBegin_98 = PHI <vcBegin_36(17), vcBegin_1(15)>
  # vcEnd_47 = PHI <vcEnd_38(17), vcEnd_3(15)>
  # prephitmp_127 = PHI <_34(17), _29(15)>
  # DEBUG vcEndD.45600 => vcEnd_47
  # DEBUG vcBeginD.45599 => vcBegin_98
  # VUSE <.MEM_12(D)>
  gN.58_40 = gND.33727;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _41 = gN.58_40 * 2;
  if (_41 == in_channel_42(D))
    goto <bb 20>;
  else
    goto <bb 19>;
;;    succ:       20 [13.7%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [86.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 5259, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       18 [86.3%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  pretmp_139 = f_15(D)->phD.29348;
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 836, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       18 [13.7%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_43 = VDEF <.MEM_12(D)>
  f_15(D)->phD.29348 = 0;
  # DEBUG D#211ptD.0 => f_15(D)->destD.29342
  # VUSE <.MEM_43>
  src_45 = f_15(D)->srcD.29341;
  # DEBUG srcD.55285 => src_45
  # DEBUG destD.55286 => D#211ptD.0
  # DEBUG intmD.55288 => 0
  # DEBUG offsetD.55289 => 1
  # DEBUG nD.55290 => 0
  # DEBUG nD.55290 => 0
  # DEBUG offsetD.55289 => 1
  # DEBUG intmD.55288 => 0
  # DEBUG destD.55286 => D#211ptD.0
  # DEBUG srcD.55285 => src_45
  if (gN.58_40 <= 0)
    goto <bb 28>;
  else
    goto <bb 21>;
;;    succ:       28 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 761, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_43>
  pretmp_133 = gKD.33726;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 8449, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       21 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_117 = PHI <.MEM_43(21), .MEM_94(26)>
  # n_113 = PHI <0(21), n_92(26)>
  # dest_100 = PHI <prephitmp_127(21), dest_90(26)>
  # src_115 = PHI <src_45(21), src_91(26)>
  # offset_110 = PHI <1(21), offset_89(26)>
  # intm_99 = PHI <0(21), intm_93(26)>
  # prephitmp_134 = PHI <pretmp_133(21), gK.47_88(26)>
  # DEBUG nD.55290 => n_113
  # DEBUG offsetD.55289 => offset_110
  # DEBUG intmD.55288 => intm_99
  # DEBUG destD.55286 => dest_100
  # DEBUG srcD.55285 => src_115
  _66 = dest_100 % prephitmp_134;
  _68 = src_115 % prephitmp_134;
  dist_69 = _66 - _68;
  # DEBUG distD.55287 => dist_69
  if (dist_69 > 0)
    goto <bb 23>;
  else
    goto <bb 24>;
;;    succ:       23 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [27.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 6169, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       22 [73.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG maxD.55292 => dist_69
  # .MEM_95 = VDEF <.MEM_117>
  # USE = nonlocal null { D.45601 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45601 } (nonlocal, escaped)
  _70 = _Z8ran_nextvD.43987 ();
  # RANGE [2, 2147483647] NONZERO 2147483647
  _71 = dist_69 + 1;
  # RANGE [2, 9223372036854775807] NONZERO 2147483647
  _72 = (long intD.12) _71;
  _73 = _70 % _72;
  _74 = (intD.9) _73;
  _75 = _68 + _74;
  _77 = _75 * offset_110;
  intm_79 = _77 + intm_99;
  # DEBUG intmD.55288 => intm_79
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 1, count 0, freq 2280, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       22 [27.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG maxD.55291 => -dist_69
  # .MEM_96 = VDEF <.MEM_117>
  # USE = nonlocal null { D.45601 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45601 } (nonlocal, escaped)
  _80 = _Z8ran_nextvD.43987 ();
  # RANGE [1, 2147483647] NONZERO 2147483647
  _81 = 1 - dist_69;
  # RANGE [1, 9223372036854775807] NONZERO 2147483647
  _82 = (long intD.12) _81;
  _83 = _80 % _82;
  _84 = (intD.9) _83;
  _85 = _66 + _84;
  _86 = _85 * offset_110;
  intm_87 = _86 + intm_99;
  # DEBUG intmD.55288 => intm_87
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 8449, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       23 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                24 [100.0%]  (FALLTHRU,EXECUTABLE)
  # intm_93 = PHI <intm_79(23), intm_87(24)>
  # .MEM_94 = PHI <.MEM_95(23), .MEM_96(24)>
  # DEBUG intmD.55288 => intm_93
  # VUSE <.MEM_94>
  gK.47_88 = gKD.33726;
  offset_89 = gK.47_88 * offset_110;
  # DEBUG offsetD.55289 => offset_89
  dest_90 = dest_100 / gK.47_88;
  # DEBUG destD.55286 => dest_90
  src_91 = src_115 / gK.47_88;
  # DEBUG srcD.55285 => src_91
  n_92 = n_113 + 1;
  # DEBUG nD.55290 => n_92
  # DEBUG nD.55290 => n_92
  # DEBUG offsetD.55289 => offset_89
  # DEBUG intmD.55288 => intm_93
  # DEBUG destD.55286 => dest_90
  # DEBUG srcD.55285 => src_91
  # VUSE <.MEM_94>
  gN.46_62 = gND.33727;
  if (gN.46_62 <= n_92)
    goto <bb 27>;
  else
    goto <bb 26>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 1, count 0, freq 7689, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 22>;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 760, maybe hot
;;    prev block 26, next block 28, flags: (NEW)
;;    pred:       25 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # intm_138 = PHI <intm_93(25)>
  # VUSE <.MEM_94>
  pretmp_131 = f_15(D)->phD.29348;
;;    succ:       28 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 836, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       27 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_114 = PHI <.MEM_94(27), .MEM_43(20)>
  # intm_112 = PHI <intm_138(27), 0(20)>
  # prephitmp_132 = PHI <pretmp_131(27), 0(20)>
  # .MEM_48 = VDEF <.MEM_114>
  f_15(D)->intmD.29347 = intm_112;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 6095, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                28 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_9 = PHI <.MEM_12(D)(19), .MEM_48(28)>
  # prephitmp_140 = PHI <pretmp_139(19), prephitmp_132(28)>
  if (prephitmp_140 == 0)
    goto <bb 30>;
  else
    goto <bb 35>;
;;    succ:       30 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 3048, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_9>
  _60 = MEM[(intD.9 *)r_28(D) + 96B];
  # DEBUG D#14ptD.0 => r_28(D)
  # DEBUG thisD.51552 => D#14ptD.0
  # VUSE <.MEM_9>
  _50 = f_15(D)->intmD.29347;
  if (_50 == _60)
    goto <bb 34>;
  else
    goto <bb 31>;
;;    succ:       34 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 6095, maybe hot
;;   Invalid sum of incoming frequencies 8291, should be 6095
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       30 [72.0%]  (FALSE_VALUE,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,EXECUTABLE)
  # iftmp.61_8 = PHI <_50(30), iftmp.61_54(35)>
  # .MEM_108 = PHI <.MEM_9(30), .MEM_120(35)>
  # prephitmp_130 = PHI <_60(30), pretmp_129(35)>
  # DEBUG D#14ptD.0 => r_28(D)
  # DEBUG thisD.51555 => D#14ptD.0
  # VUSE <.MEM_108>
  # USE = nonlocal escaped null 
  out_port_55 = _Z13dor_next_meshiibD.45450 (prephitmp_130, iftmp.61_8, 0);
  # DEBUG out_portD.45603 => out_port_55
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 9992, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       17 [45.4%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,EXECUTABLE)
  # out_port_5 = PHI <-1(17), out_port_55(31)>
  # .MEM_11 = PHI <.MEM_12(D)(17), .MEM_108(31)>
  # vcBegin_111 = PHI <vcBegin_36(17), vcBegin_98(31)>
  # vcEnd_107 = PHI <vcEnd_38(17), vcEnd_47(31)>
  # DEBUG out_portD.45603 => out_port_5
  # .MEM_57 = VDEF <.MEM_11>
  # USE = nonlocal null { D.45601 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45601 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_56(D));
  # .MEM_58 = VDEF <.MEM_57>
  # USE = nonlocal null { D.45601 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45601 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_56(D), out_port_5, vcBegin_111, vcEnd_107, 0);
  # VUSE <.MEM_58>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 33, loop depth 0, count 0, freq 8595, maybe hot
;;   Invalid sum of incoming frequencies 11092, should be 8595
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       14 (TRUE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALSE_VALUE,EXECUTABLE)
;;                15 [72.0%]  (TRUE_VALUE,EXECUTABLE)
  _30 = vcEnd_3 - vcBegin_1;
  _31 = _30 + 1;
  # VUSE <.MEM_12(D)>
  gNodes.57_32 = gNodesD.33729;
  vcs_per_dest_33 = _31 / gNodes.57_32;
  # DEBUG vcs_per_destD.45602 => vcs_per_dest_33
  if (vcs_per_dest_33 <= 0)
    goto <bb 16>;
  else
    goto <bb 17>;
;;    succ:       16 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 3048, maybe hot
;;   Invalid sum of incoming frequencies 853, should be 3048
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       30 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_51 = VDEF <.MEM_9>
  f_15(D)->phD.29348 = 1;
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 6096, maybe hot
;;    prev block 34, next block 1, flags: (NEW, REACHABLE)
;;    pred:       29 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                34 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_120 = PHI <.MEM_9(29), .MEM_51(34)>
  # VUSE <.MEM_120>
  iftmp.61_54 = f_15(D)->destD.29342;
  # VUSE <.MEM_120>
  pretmp_129 = MEM[(intD.9 *)r_28(D) + 96B];
  goto <bb 31>;
;;    succ:       31 [100.0%]  (FALLTHRU,EXECUTABLE)

}


Creating dr for f_15(D)->type
analyze_innermost: success.
	base_address: f_15(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *f_15(D)
	Access function 0: 0
Creating dr for gReadReqBeginVC
analyze_innermost: success.
	base_address: &gReadReqBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReqBeginVC
Creating dr for gReadReqEndVC
analyze_innermost: success.
	base_address: &gReadReqEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReqEndVC
Creating dr for gWriteReqBeginVC
analyze_innermost: success.
	base_address: &gWriteReqBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReqBeginVC
Creating dr for gWriteReqEndVC
analyze_innermost: success.
	base_address: &gWriteReqEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReqEndVC
Creating dr for gReadReplyBeginVC
analyze_innermost: success.
	base_address: &gReadReplyBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReplyBeginVC
Creating dr for gReadReplyEndVC
analyze_innermost: success.
	base_address: &gReadReplyEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReplyEndVC
Creating dr for gNumVCs
analyze_innermost: success.
	base_address: &gNumVCs
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gNumVCs
Creating dr for gWriteReplyBeginVC
analyze_innermost: success.
	base_address: &gWriteReplyBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReplyBeginVC
Creating dr for gWriteReplyEndVC
analyze_innermost: success.
	base_address: &gWriteReplyEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReplyEndVC
Creating dr for f_15(D)->vc
analyze_innermost: success.
	base_address: f_15(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: *f_15(D)
	Access function 0: 32
Creating dr for MEM[(int *)r_28(D) + 96B]
analyze_innermost: success.
	base_address: r_28(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(int *)r_28(D) + 96B]
Creating dr for f_15(D)->dest
analyze_innermost: success.
	base_address: f_15(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_15(D)
	Access function 0: 352
Creating dr for gNodes
analyze_innermost: success.
	base_address: &gNodes
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gNodes
Creating dr for f_15(D)->dest
analyze_innermost: success.
	base_address: f_15(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_15(D)
	Access function 0: 352
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for f_15(D)->ph
analyze_innermost: success.
	base_address: f_15(D)
	offset from base address: 0
	constant offset from base address: 68
	step: 0
	aligned to: 256
	base_object: *f_15(D)
	Access function 0: 544
Creating dr for f_15(D)->src
analyze_innermost: success.
	base_address: f_15(D)
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: *f_15(D)
	Access function 0: 320
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for f_15(D)->ph
analyze_innermost: success.
	base_address: f_15(D)
	offset from base address: 0
	constant offset from base address: 68
	step: 0
	aligned to: 256
	base_object: *f_15(D)
	Access function 0: 544
Creating dr for f_15(D)->intm
analyze_innermost: success.
	base_address: f_15(D)
	offset from base address: 0
	constant offset from base address: 64
	step: 0
	aligned to: 256
	base_object: *f_15(D)
	Access function 0: 512
Creating dr for f_15(D)->ph
analyze_innermost: success.
	base_address: f_15(D)
	offset from base address: 0
	constant offset from base address: 68
	step: 0
	aligned to: 256
	base_object: *f_15(D)
	Access function 0: 544
Creating dr for MEM[(int *)r_28(D) + 96B]
analyze_innermost: success.
	base_address: r_28(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(int *)r_28(D) + 96B]
Creating dr for f_15(D)->intm
analyze_innermost: success.
	base_address: f_15(D)
	offset from base address: 0
	constant offset from base address: 64
	step: 0
	aligned to: 256
	base_object: *f_15(D)
	Access function 0: 512
Creating dr for f_15(D)->ph
analyze_innermost: success.
	base_address: f_15(D)
	offset from base address: 0
	constant offset from base address: 68
	step: 0
	aligned to: 256
	base_object: *f_15(D)
	Access function 0: 544
Creating dr for f_15(D)->dest
analyze_innermost: success.
	base_address: f_15(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_15(D)
	Access function 0: 352
Creating dr for MEM[(int *)r_28(D) + 96B]
analyze_innermost: success.
	base_address: r_28(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(int *)r_28(D) + 96B]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:4)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:10, LOOPS:0, CONDITIONS:4, STMTS:26)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:41, LOOPS:1, CONDITIONS:16, STMTS:146)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # DEBUG vcBegin => 0
    # DEBUG D#212 => gNumVCs
    # DEBUG vcEnd => D#212 + -1
    # VUSE <.MEM_12(D)>
    _16 = f_15(D)->type;
    if (_16 == 0)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_11 })
  {
    <bb 3>:
    # VUSE <.MEM_12(D)>
    vcBegin_17 = gReadReqBeginVC;
    # DEBUG vcBegin => vcBegin_17
    # VUSE <.MEM_12(D)>
    vcEnd_18 = gReadReqEndVC;
    # DEBUG vcEnd => vcEnd_18
    goto <bb 11>;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 bb_6 })
  {
    <bb 4>:
    if (_16 == 2)
      goto <bb 5>;
    else
      goto <bb 6>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_11 })
  {
    <bb 5>:
    # VUSE <.MEM_12(D)>
    vcBegin_19 = gWriteReqBeginVC;
    # DEBUG vcBegin => vcBegin_19
    # VUSE <.MEM_12(D)>
    vcEnd_20 = gWriteReqEndVC;
    # DEBUG vcEnd => vcEnd_20
    goto <bb 11>;

  }
  bb_6 (preds = {bb_4 }, succs = {bb_7 bb_8 })
  {
    <bb 6>:
    if (_16 == 1)
      goto <bb 7>;
    else
      goto <bb 8>;

  }
  bb_7 (preds = {bb_6 }, succs = {bb_11 })
  {
    <bb 7>:
    # VUSE <.MEM_12(D)>
    vcBegin_21 = gReadReplyBeginVC;
    # DEBUG vcBegin => vcBegin_21
    # VUSE <.MEM_12(D)>
    vcEnd_22 = gReadReplyEndVC;
    # DEBUG vcEnd => vcEnd_22
    goto <bb 11>;

  }
  bb_8 (preds = {bb_6 }, succs = {bb_10 bb_9 })
  {
    <bb 8>:
    # VUSE <.MEM_12(D)>
    gNumVCs.54_13 = gNumVCs;
    if (_16 == 3)
      goto <bb 10>;
    else
      goto <bb 9>;

  }
  bb_9 (preds = {bb_8 }, succs = {bb_11 })
  {
    <bb 9>:
    vcEnd_14 = gNumVCs.54_13 + -1;
    goto <bb 11>;

  }
  bb_10 (preds = {bb_8 }, succs = {bb_11 })
  {
    <bb 10>:
    # VUSE <.MEM_12(D)>
    vcBegin_23 = gWriteReplyBeginVC;
    # DEBUG vcBegin => vcBegin_23
    # VUSE <.MEM_12(D)>
    vcEnd_24 = gWriteReplyEndVC;
    # DEBUG vcEnd => vcEnd_24

  }
  bb_11 (preds = {bb_3 bb_5 bb_7 bb_9 bb_10 }, succs = {bb_40 })
  {
    <bb 11>:
    # vcBegin_1 = PHI <vcBegin_17(3), vcBegin_19(5), vcBegin_21(7), 0(9), vcBegin_23(10)>
    # vcEnd_3 = PHI <vcEnd_18(3), vcEnd_20(5), vcEnd_22(7), vcEnd_14(9), vcEnd_24(10)>

  }
  bb_40 (preds = {bb_11 }, succs = {bb_12 bb_14 })
  {
    <bb 40>:
    # DEBUG vcEnd => vcEnd_3
    # DEBUG vcBegin => vcBegin_1
    # VUSE <.MEM_12(D)>
    _25 = f_15(D)->vc;
    _97 = vcEnd_3 < _25;
    _121 = vcBegin_1 > _25;
    _116 = _97 | _121;
    if (_116 != 0)
      goto <bb 12>;
    else
      goto <bb 14>;

  }
  bb_12 (preds = {bb_40 }, succs = {bb_13 bb_33 })
  {
    <bb 12>:
    _103 = _25 >= 0;
    if (inject_26(D) <= _103)
      goto <bb 13>;
    else
      goto <bb 33>;

  }
  bb_13 (preds = {bb_12 }, succs = {})
  {
    <bb 13>:
    # .MEM_27 = VDEF <.MEM_12(D)>
    __assert_fail ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 891, &__PRETTY_FUNCTION__);

  }
  bb_14 (preds = {bb_40 }, succs = {bb_33 bb_15 })
  {
    <bb 14>:
    if (inject_26(D) != 0)
      goto <bb 33>;
    else
      goto <bb 15>;

  }
  bb_15 (preds = {bb_14 }, succs = {bb_33 bb_18 })
  {
    <bb 15>:
    # VUSE <.MEM_12(D)>
    _59 = MEM[(int *)r_28(D) + 96B];
    # DEBUG D#14 => r_28(D)
    # DEBUG this => D#14
    # VUSE <.MEM_12(D)>
    _29 = f_15(D)->dest;
    if (_29 != _59)
      goto <bb 33>;
    else
      goto <bb 18>;

  }
  bb_16 (preds = {bb_33 }, succs = {})
  {
    <bb 16>:
    # .MEM_39 = VDEF <.MEM_12(D)>
    __assert_fail ("vcs_per_dest > 0", "routefunc.cpp", 897, &__PRETTY_FUNCTION__);

  }
  bb_17 (preds = {bb_33 }, succs = {bb_32 bb_18 })
  {
    <bb 17>:
    # VUSE <.MEM_12(D)>
    _34 = f_15(D)->dest;
    _35 = vcs_per_dest_33 * _34;
    vcBegin_36 = vcBegin_1 + _35;
    # DEBUG vcBegin => vcBegin_36
    _37 = vcs_per_dest_33 + vcBegin_36;
    vcEnd_38 = _37 + -1;
    # DEBUG vcEnd => vcEnd_38
    # DEBUG vcEnd => vcEnd_38
    # DEBUG vcBegin => vcBegin_36
    if (inject_26(D) != 0)
      goto <bb 32>;
    else
      goto <bb 18>;

  }
  bb_18 (preds = {bb_17 bb_15 }, succs = {bb_20 bb_19 })
  {
    <bb 18>:
    # vcBegin_98 = PHI <vcBegin_36(17), vcBegin_1(15)>
    # vcEnd_47 = PHI <vcEnd_38(17), vcEnd_3(15)>
    # prephitmp_127 = PHI <_34(17), _29(15)>
    # DEBUG vcEnd => vcEnd_47
    # DEBUG vcBegin => vcBegin_98
    # VUSE <.MEM_12(D)>
    gN.58_40 = gN;
    _41 = gN.58_40 * 2;
    if (_41 == in_channel_42(D))
      goto <bb 20>;
    else
      goto <bb 19>;

  }
  bb_19 (preds = {bb_18 }, succs = {bb_29 })
  {
    <bb 19>:
    # VUSE <.MEM_12(D)>
    pretmp_139 = f_15(D)->ph;
    goto <bb 29>;

  }
  bb_20 (preds = {bb_18 }, succs = {bb_28 bb_21 })
  {
    <bb 20>:
    # .MEM_43 = VDEF <.MEM_12(D)>
    f_15(D)->ph = 0;
    # DEBUG D#211 => f_15(D)->dest
    # VUSE <.MEM_43>
    src_45 = f_15(D)->src;
    # DEBUG src => src_45
    # DEBUG dest => D#211
    # DEBUG intm => 0
    # DEBUG offset => 1
    # DEBUG n => 0
    # DEBUG n => 0
    # DEBUG offset => 1
    # DEBUG intm => 0
    # DEBUG dest => D#211
    # DEBUG src => src_45
    if (gN.58_40 <= 0)
      goto <bb 28>;
    else
      goto <bb 21>;

  }
  bb_21 (preds = {bb_20 }, succs = {bb_22 })
  {
    <bb 21>:
    # VUSE <.MEM_43>
    pretmp_133 = gK;

  }
  bb_27 (preds = {bb_25 }, succs = {bb_36 })
  {
    <bb 27>:
    # intm_138 = PHI <intm_93(25)>

  }
  bb_36 (preds = {bb_27 }, succs = {bb_28 })
  {
    <bb 36>:
    # VUSE <.MEM_94>
    pretmp_131 = f_15(D)->ph;

  }
  bb_28 (preds = {bb_36 bb_20 }, succs = {bb_37 })
  {
    <bb 28>:
    # .MEM_114 = PHI <.MEM_94(36), .MEM_43(20)>
    # intm_112 = PHI <intm_138(36), 0(20)>
    # prephitmp_132 = PHI <pretmp_131(36), 0(20)>

  }
  bb_37 (preds = {bb_28 }, succs = {bb_29 })
  {
    <bb 37>:
    # .MEM_48 = VDEF <.MEM_114>
    f_15(D)->intm = intm_112;

  }
  bb_29 (preds = {bb_19 bb_37 }, succs = {bb_30 bb_35 })
  {
    <bb 29>:
    # .MEM_9 = PHI <.MEM_12(D)(19), .MEM_48(37)>
    # prephitmp_140 = PHI <pretmp_139(19), prephitmp_132(37)>
    if (prephitmp_140 == 0)
      goto <bb 30>;
    else
      goto <bb 35>;

  }
  bb_30 (preds = {bb_29 }, succs = {bb_34 bb_31 })
  {
    <bb 30>:
    # VUSE <.MEM_9>
    _60 = MEM[(int *)r_28(D) + 96B];
    # DEBUG D#14 => r_28(D)
    # DEBUG this => D#14
    # VUSE <.MEM_9>
    _50 = f_15(D)->intm;
    if (_50 == _60)
      goto <bb 34>;
    else
      goto <bb 31>;

  }
  bb_31 (preds = {bb_30 bb_38 }, succs = {bb_39 })
  {
    <bb 31>:
    # iftmp.61_8 = PHI <_50(30), iftmp.61_54(38)>
    # .MEM_108 = PHI <.MEM_9(30), .MEM_120(38)>
    # prephitmp_130 = PHI <_60(30), pretmp_129(38)>

  }
  bb_39 (preds = {bb_31 }, succs = {bb_32 })
  {
    <bb 39>:
    # DEBUG D#14 => r_28(D)
    # DEBUG this => D#14
    # VUSE <.MEM_108>
    out_port_55 = dor_next_mesh (prephitmp_130, iftmp.61_8, 0);
    # DEBUG out_port => out_port_55

  }
  bb_32 (preds = {bb_17 bb_39 }, succs = {bb_1 })
  {
    <bb 32>:
    # out_port_5 = PHI <-1(17), out_port_55(39)>
    # .MEM_11 = PHI <.MEM_12(D)(17), .MEM_108(39)>
    # vcBegin_111 = PHI <vcBegin_36(17), vcBegin_98(39)>
    # vcEnd_107 = PHI <vcEnd_38(17), vcEnd_47(39)>
    # DEBUG out_port => out_port_5
    # .MEM_57 = VDEF <.MEM_11>
    OutputSet::Clear (outputs_56(D));
    # .MEM_58 = VDEF <.MEM_57>
    OutputSet::AddRange (outputs_56(D), out_port_5, vcBegin_111, vcEnd_107, 0);
    # VUSE <.MEM_58>
    return;

  }
  bb_33 (preds = {bb_14 bb_12 bb_15 }, succs = {bb_16 bb_17 })
  {
    <bb 33>:
    _30 = vcEnd_3 - vcBegin_1;
    _31 = _30 + 1;
    # VUSE <.MEM_12(D)>
    gNodes.57_32 = gNodes;
    vcs_per_dest_33 = _31 / gNodes.57_32;
    # DEBUG vcs_per_dest => vcs_per_dest_33
    if (vcs_per_dest_33 <= 0)
      goto <bb 16>;
    else
      goto <bb 17>;

  }
  bb_34 (preds = {bb_30 }, succs = {bb_35 })
  {
    <bb 34>:
    # .MEM_51 = VDEF <.MEM_9>
    f_15(D)->ph = 1;

  }
  bb_35 (preds = {bb_29 bb_34 }, succs = {bb_38 })
  {
    <bb 35>:
    # .MEM_120 = PHI <.MEM_9(29), .MEM_51(34)>

  }
  bb_38 (preds = {bb_35 }, succs = {bb_31 })
  {
    <bb 38>:
    # VUSE <.MEM_120>
    iftmp.61_54 = f_15(D)->dest;
    # VUSE <.MEM_120>
    pretmp_129 = MEM[(int *)r_28(D) + 96B];
    goto <bb 31>;

  }
  loop_1 (header = 22, latch = 26, niter = , upper_bound = 2147483647)
  {
    bb_22 (preds = {bb_21 bb_26 }, succs = {bb_23 bb_24 })
    {
      <bb 22>:
      # .MEM_117 = PHI <.MEM_43(21), .MEM_94(26)>
      # n_113 = PHI <0(21), n_92(26)>
      # dest_100 = PHI <prephitmp_127(21), dest_90(26)>
      # src_115 = PHI <src_45(21), src_91(26)>
      # offset_110 = PHI <1(21), offset_89(26)>
      # intm_99 = PHI <0(21), intm_93(26)>
      # prephitmp_134 = PHI <pretmp_133(21), gK.47_88(26)>
      # DEBUG n => n_113
      # DEBUG offset => offset_110
      # DEBUG intm => intm_99
      # DEBUG dest => dest_100
      # DEBUG src => src_115
      _66 = dest_100 % prephitmp_134;
      _68 = src_115 % prephitmp_134;
      dist_69 = _66 - _68;
      # DEBUG dist => dist_69
      if (dist_69 > 0)
        goto <bb 23>;
      else
        goto <bb 24>;

    }
    bb_23 (preds = {bb_22 }, succs = {bb_25 })
    {
      <bb 23>:
      # DEBUG max => dist_69
      # .MEM_95 = VDEF <.MEM_117>
      _70 = ran_next ();
      _71 = dist_69 + 1;
      _72 = (long int) _71;
      _73 = _70 % _72;
      _74 = (int) _73;
      _75 = _68 + _74;
      _77 = _75 * offset_110;
      intm_79 = _77 + intm_99;
      # DEBUG intm => intm_79
      goto <bb 25>;

    }
    bb_24 (preds = {bb_22 }, succs = {bb_25 })
    {
      <bb 24>:
      # DEBUG max => -dist_69
      # .MEM_96 = VDEF <.MEM_117>
      _80 = ran_next ();
      _81 = 1 - dist_69;
      _82 = (long int) _81;
      _83 = _80 % _82;
      _84 = (int) _83;
      _85 = _66 + _84;
      _86 = _85 * offset_110;
      intm_87 = _86 + intm_99;
      # DEBUG intm => intm_87

    }
    bb_25 (preds = {bb_23 bb_24 }, succs = {bb_27 bb_26 })
    {
      <bb 25>:
      # intm_93 = PHI <intm_79(23), intm_87(24)>
      # .MEM_94 = PHI <.MEM_95(23), .MEM_96(24)>
      # DEBUG intm => intm_93
      # VUSE <.MEM_94>
      gK.47_88 = gK;
      offset_89 = gK.47_88 * offset_110;
      # DEBUG offset => offset_89
      dest_90 = dest_100 / gK.47_88;
      # DEBUG dest => dest_90
      src_91 = src_115 / gK.47_88;
      # DEBUG src => src_91
      n_92 = n_113 + 1;
      # DEBUG n => n_92
      # DEBUG n => n_92
      # DEBUG offset => offset_89
      # DEBUG intm => intm_93
      # DEBUG dest => dest_90
      # DEBUG src => src_91
      # VUSE <.MEM_94>
      gN.46_62 = gN;
      if (gN.46_62 <= n_92)
        goto <bb 27>;
      else
        goto <bb 26>;

    }
    bb_26 (preds = {bb_25 }, succs = {bb_22 })
    {
      <bb 26>:
      goto <bb 22>;

    }
  }
}

Pass statistics:
----------------

void romm_ni_mesh(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45592, const struct FlitD.29321 * fD.45593, intD.9 in_channelD.45594, struct OutputSetD.28230 * outputsD.45595, boolD.2757 injectD.45596)
{
  intD.9 distD.55287;
  intD.9 intmD.55288;
  intD.9 offsetD.55289;
  intD.9 nD.55290;
  intD.9 D.55293;
  intD.9 srcD.55285;
  intD.9 destD.55286;
  const intD.9 vcs_per_destD.45602;
  intD.9 out_portD.45603;
  static const charD.10 _ZZ12romm_ni_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45601[69] = "void romm_ni_mesh(const Router*, const Flit*, int, OutputSet*, bool)";
  intD.9 vcEndD.45600;
  intD.9 vcBeginD.45599;
  const intD.9 iftmp.61_8;
  intD.9 gNumVCs.54_13;
  FlitTypeD.29324 _16;
  intD.9 _25;
  intD.9 _29;
  intD.9 _30;
  intD.9 _31;
  intD.9 gNodes.57_32;
  intD.9 _34;
  intD.9 _35;
  intD.9 _37;
  intD.9 gN.58_40;
  intD.9 _41;
  intD.9 _50;
  const intD.9 iftmp.61_54;
  const intD.9 _59;
  const intD.9 _60;
  intD.9 gN.46_62;
  intD.9 _66;
  intD.9 _68;
  long intD.12 _70;
  intD.9 _71;
  long intD.12 _72;
  long intD.12 _73;
  intD.9 _74;
  intD.9 _75;
  intD.9 _77;
  long intD.12 _80;
  intD.9 _81;
  long intD.12 _82;
  long intD.12 _83;
  intD.9 _84;
  intD.9 _85;
  intD.9 _86;
  intD.9 gK.47_88;
  boolD.2757 _97;
  boolD.2757 _103;
  boolD.2757 _116;
  boolD.2757 _121;
  const intD.9 prephitmp_127;
  const intD.9 pretmp_129;
  const intD.9 prephitmp_130;
  intD.9 pretmp_131;
  intD.9 prephitmp_132;
  intD.9 pretmp_133;
  intD.9 prephitmp_134;
  intD.9 pretmp_139;
  intD.9 prephitmp_140;

;;   basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG vcBeginD.45599 => 0
  # DEBUG D#212ptD.0 => gNumVCsD.42077
  # DEBUG vcEndD.45600 => D#212ptD.0 + -1
  # VUSE <.MEM_12(D)>
  _16 = f_15(D)->typeD.29330;
  if (_16 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 5000, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  vcBegin_17 = gReadReqBeginVCD.42078;
  # DEBUG vcBeginD.45599 => vcBegin_17
  # VUSE <.MEM_12(D)>
  vcEnd_18 = gReadReqEndVCD.42079;
  # DEBUG vcEndD.45600 => vcEnd_18
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 5000, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_16 == 2)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 1400, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  vcBegin_19 = gWriteReqBeginVCD.42080;
  # DEBUG vcBeginD.45599 => vcBegin_19
  # VUSE <.MEM_12(D)>
  vcEnd_20 = gWriteReqEndVCD.42081;
  # DEBUG vcEndD.45600 => vcEnd_20
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 3600, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_16 == 1)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 1008, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  vcBegin_21 = gReadReplyBeginVCD.42082;
  # DEBUG vcBeginD.45599 => vcBegin_21
  # VUSE <.MEM_12(D)>
  vcEnd_22 = gReadReplyEndVCD.42083;
  # DEBUG vcEndD.45600 => vcEnd_22
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 2592, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  gNumVCs.54_13 = gNumVCsD.42077;
  if (_16 == 3)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 1866, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  vcEnd_14 = gNumVCs.54_13 + -1;
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 726, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  vcBegin_23 = gWriteReplyBeginVCD.42084;
  # DEBUG vcBeginD.45599 => vcBegin_23
  # VUSE <.MEM_12(D)>
  vcEnd_24 = gWriteReplyEndVCD.42085;
  # DEBUG vcEndD.45600 => vcEnd_24
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 10, next block 40, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # vcBegin_1 = PHI <vcBegin_17(3), vcBegin_19(5), vcBegin_21(7), 0(9), vcBegin_23(10)>
  # vcEnd_3 = PHI <vcEnd_18(3), vcEnd_20(5), vcEnd_22(7), vcEnd_14(9), vcEnd_24(10)>
;;    succ:       40 [100.0%]  (FALLTHRU)

;;   basic block 40, loop depth 0, count 0, freq 10000, maybe hot
;;    prev block 11, next block 12, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU)
  # DEBUG vcEndD.45600 => vcEnd_3
  # DEBUG vcBeginD.45599 => vcBegin_1
  # VUSE <.MEM_12(D)>
  _25 = f_15(D)->vcD.29331;
  _97 = vcEnd_3 < _25;
  _121 = vcBegin_1 > _25;
  _116 = _97 | _121;
  if (_116 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 7497, maybe hot
;;   Invalid sum of incoming frequencies 5000, should be 7497
;;    prev block 40, next block 13, flags: (NEW, REACHABLE)
;;    pred:       40 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  _103 = _25 >= 0;
  if (inject_26(D) <= _103)
    goto <bb 13>;
  else
    goto <bb 33>;
;;    succ:       13 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 6
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_27 = VDEF <.MEM_12(D)>
  # USE = nonlocal null { D.45601 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45601 } (nonlocal, escaped)
  __assert_failD.9858 ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 891, &_ZZ12romm_ni_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45601);
;;    succ:      

;;   basic block 14, loop depth 0, count 0, freq 2500, maybe hot
;;   Invalid sum of incoming frequencies 5000, should be 2500
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       40 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (inject_26(D) != 0)
    goto <bb 33>;
  else
    goto <bb 15>;
;;    succ:       33 (TRUE_VALUE,EXECUTABLE)
;;                15 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 4997, maybe hot
;;   Invalid sum of incoming frequencies 2500, should be 4997
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  _59 = MEM[(intD.9 *)r_28(D) + 96B];
  # DEBUG D#14ptD.0 => r_28(D)
  # DEBUG thisD.51549 => D#14ptD.0
  # VUSE <.MEM_12(D)>
  _29 = f_15(D)->destD.29342;
  if (_29 != _59)
    goto <bb 33>;
  else
    goto <bb 18>;
;;    succ:       33 [72.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [28.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 2
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       33 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_39 = VDEF <.MEM_12(D)>
  # USE = nonlocal null { D.45601 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45601 } (nonlocal, escaped)
  __assert_failD.9858 ("vcs_per_dest > 0", "routefunc.cpp", 897, &_ZZ12romm_ni_meshPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45601);
;;    succ:      

;;   basic block 17, loop depth 0, count 0, freq 8593, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       33 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  _34 = f_15(D)->destD.29342;
  _35 = vcs_per_dest_33 * _34;
  vcBegin_36 = vcBegin_1 + _35;
  # DEBUG vcBeginD.45599 => vcBegin_36
  _37 = vcs_per_dest_33 + vcBegin_36;
  vcEnd_38 = _37 + -1;
  # DEBUG vcEndD.45600 => vcEnd_38
  # DEBUG vcEndD.45600 => vcEnd_38
  # DEBUG vcBeginD.45599 => vcBegin_36
  if (inject_26(D) != 0)
    goto <bb 32>;
  else
    goto <bb 18>;
;;    succ:       32 [45.4%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [54.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 6095, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [54.6%]  (FALSE_VALUE,EXECUTABLE)
;;                15 [28.0%]  (FALSE_VALUE,EXECUTABLE)
  # vcBegin_98 = PHI <vcBegin_36(17), vcBegin_1(15)>
  # vcEnd_47 = PHI <vcEnd_38(17), vcEnd_3(15)>
  # prephitmp_127 = PHI <_34(17), _29(15)>
  # DEBUG vcEndD.45600 => vcEnd_47
  # DEBUG vcBeginD.45599 => vcBegin_98
  # VUSE <.MEM_12(D)>
  gN.58_40 = gND.33727;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _41 = gN.58_40 * 2;
  if (_41 == in_channel_42(D))
    goto <bb 20>;
  else
    goto <bb 19>;
;;    succ:       20 [13.7%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [86.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 5259, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       18 [86.3%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_12(D)>
  pretmp_139 = f_15(D)->phD.29348;
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 836, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       18 [13.7%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_43 = VDEF <.MEM_12(D)>
  f_15(D)->phD.29348 = 0;
  # DEBUG D#211ptD.0 => f_15(D)->destD.29342
  # VUSE <.MEM_43>
  src_45 = f_15(D)->srcD.29341;
  # DEBUG srcD.55285 => src_45
  # DEBUG destD.55286 => D#211ptD.0
  # DEBUG intmD.55288 => 0
  # DEBUG offsetD.55289 => 1
  # DEBUG nD.55290 => 0
  # DEBUG nD.55290 => 0
  # DEBUG offsetD.55289 => 1
  # DEBUG intmD.55288 => 0
  # DEBUG destD.55286 => D#211ptD.0
  # DEBUG srcD.55285 => src_45
  if (gN.58_40 <= 0)
    goto <bb 28>;
  else
    goto <bb 21>;
;;    succ:       28 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 761, maybe hot
;;    prev block 20, next block 22, flags: (NEW)
;;    pred:       20 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_43>
  pretmp_133 = gKD.33726;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 1, count 0, freq 8449, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       21 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_117 = PHI <.MEM_43(21), .MEM_94(26)>
  # n_113 = PHI <0(21), n_92(26)>
  # dest_100 = PHI <prephitmp_127(21), dest_90(26)>
  # src_115 = PHI <src_45(21), src_91(26)>
  # offset_110 = PHI <1(21), offset_89(26)>
  # intm_99 = PHI <0(21), intm_93(26)>
  # prephitmp_134 = PHI <pretmp_133(21), gK.47_88(26)>
  # DEBUG nD.55290 => n_113
  # DEBUG offsetD.55289 => offset_110
  # DEBUG intmD.55288 => intm_99
  # DEBUG destD.55286 => dest_100
  # DEBUG srcD.55285 => src_115
  _66 = dest_100 % prephitmp_134;
  _68 = src_115 % prephitmp_134;
  dist_69 = _66 - _68;
  # DEBUG distD.55287 => dist_69
  if (dist_69 > 0)
    goto <bb 23>;
  else
    goto <bb 24>;
;;    succ:       23 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [27.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 6169, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       22 [73.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG maxD.55292 => dist_69
  # .MEM_95 = VDEF <.MEM_117>
  # USE = nonlocal null { D.45601 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45601 } (nonlocal, escaped)
  _70 = _Z8ran_nextvD.43987 ();
  # RANGE [2, 2147483647] NONZERO 2147483647
  _71 = dist_69 + 1;
  # RANGE [2, 9223372036854775807] NONZERO 2147483647
  _72 = (long intD.12) _71;
  _73 = _70 % _72;
  _74 = (intD.9) _73;
  _75 = _68 + _74;
  _77 = _75 * offset_110;
  intm_79 = _77 + intm_99;
  # DEBUG intmD.55288 => intm_79
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 1, count 0, freq 2280, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       22 [27.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG maxD.55291 => -dist_69
  # .MEM_96 = VDEF <.MEM_117>
  # USE = nonlocal null { D.45601 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45601 } (nonlocal, escaped)
  _80 = _Z8ran_nextvD.43987 ();
  # RANGE [1, 2147483647] NONZERO 2147483647
  _81 = 1 - dist_69;
  # RANGE [1, 9223372036854775807] NONZERO 2147483647
  _82 = (long intD.12) _81;
  _83 = _80 % _82;
  _84 = (intD.9) _83;
  _85 = _66 + _84;
  _86 = _85 * offset_110;
  intm_87 = _86 + intm_99;
  # DEBUG intmD.55288 => intm_87
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 8449, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       23 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                24 [100.0%]  (FALLTHRU,EXECUTABLE)
  # intm_93 = PHI <intm_79(23), intm_87(24)>
  # .MEM_94 = PHI <.MEM_95(23), .MEM_96(24)>
  # DEBUG intmD.55288 => intm_93
  # VUSE <.MEM_94>
  gK.47_88 = gKD.33726;
  offset_89 = gK.47_88 * offset_110;
  # DEBUG offsetD.55289 => offset_89
  dest_90 = dest_100 / gK.47_88;
  # DEBUG destD.55286 => dest_90
  src_91 = src_115 / gK.47_88;
  # DEBUG srcD.55285 => src_91
  n_92 = n_113 + 1;
  # DEBUG nD.55290 => n_92
  # DEBUG nD.55290 => n_92
  # DEBUG offsetD.55289 => offset_89
  # DEBUG intmD.55288 => intm_93
  # DEBUG destD.55286 => dest_90
  # DEBUG srcD.55285 => src_91
  # VUSE <.MEM_94>
  gN.46_62 = gND.33727;
  if (gN.46_62 <= n_92)
    goto <bb 27>;
  else
    goto <bb 26>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 1, count 0, freq 7689, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 22>;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 760, maybe hot
;;    prev block 26, next block 36, flags: (NEW)
;;    pred:       25 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # intm_138 = PHI <intm_93(25)>
;;    succ:       36 [100.0%]  (FALLTHRU)

;;   basic block 36, loop depth 0, count 0, freq 760, maybe hot
;;    prev block 27, next block 28, flags: (NEW)
;;    pred:       27 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_94>
  pretmp_131 = f_15(D)->phD.29348;
;;    succ:       28 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 836, maybe hot
;;    prev block 36, next block 37, flags: (NEW, REACHABLE)
;;    pred:       36 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_114 = PHI <.MEM_94(36), .MEM_43(20)>
  # intm_112 = PHI <intm_138(36), 0(20)>
  # prephitmp_132 = PHI <pretmp_131(36), 0(20)>
;;    succ:       37 [100.0%]  (FALLTHRU)

;;   basic block 37, loop depth 0, count 0, freq 836, maybe hot
;;    prev block 28, next block 29, flags: (NEW)
;;    pred:       28 [100.0%]  (FALLTHRU)
  # .MEM_48 = VDEF <.MEM_114>
  f_15(D)->intmD.29347 = intm_112;
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 6095, maybe hot
;;    prev block 37, next block 30, flags: (NEW, REACHABLE)
;;    pred:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_9 = PHI <.MEM_12(D)(19), .MEM_48(37)>
  # prephitmp_140 = PHI <pretmp_139(19), prephitmp_132(37)>
  if (prephitmp_140 == 0)
    goto <bb 30>;
  else
    goto <bb 35>;
;;    succ:       30 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 3048, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_9>
  _60 = MEM[(intD.9 *)r_28(D) + 96B];
  # DEBUG D#14ptD.0 => r_28(D)
  # DEBUG thisD.51552 => D#14ptD.0
  # VUSE <.MEM_9>
  _50 = f_15(D)->intmD.29347;
  if (_50 == _60)
    goto <bb 34>;
  else
    goto <bb 31>;
;;    succ:       34 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 6095, maybe hot
;;   Invalid sum of incoming frequencies 8291, should be 6095
;;    prev block 30, next block 39, flags: (NEW, REACHABLE)
;;    pred:       30 [72.0%]  (FALSE_VALUE,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,EXECUTABLE)
  # iftmp.61_8 = PHI <_50(30), iftmp.61_54(38)>
  # .MEM_108 = PHI <.MEM_9(30), .MEM_120(38)>
  # prephitmp_130 = PHI <_60(30), pretmp_129(38)>
;;    succ:       39 [100.0%]  (FALLTHRU)

;;   basic block 39, loop depth 0, count 0, freq 6095, maybe hot
;;    prev block 31, next block 32, flags: (NEW)
;;    pred:       31 [100.0%]  (FALLTHRU)
  # DEBUG D#14ptD.0 => r_28(D)
  # DEBUG thisD.51555 => D#14ptD.0
  # VUSE <.MEM_108>
  # USE = nonlocal escaped null 
  out_port_55 = _Z13dor_next_meshiibD.45450 (prephitmp_130, iftmp.61_8, 0);
  # DEBUG out_portD.45603 => out_port_55
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 9992, maybe hot
;;    prev block 39, next block 33, flags: (NEW, REACHABLE)
;;    pred:       17 [45.4%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [100.0%]  (FALLTHRU,EXECUTABLE)
  # out_port_5 = PHI <-1(17), out_port_55(39)>
  # .MEM_11 = PHI <.MEM_12(D)(17), .MEM_108(39)>
  # vcBegin_111 = PHI <vcBegin_36(17), vcBegin_98(39)>
  # vcEnd_107 = PHI <vcEnd_38(17), vcEnd_47(39)>
  # DEBUG out_portD.45603 => out_port_5
  # .MEM_57 = VDEF <.MEM_11>
  # USE = nonlocal null { D.45601 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45601 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_56(D));
  # .MEM_58 = VDEF <.MEM_57>
  # USE = nonlocal null { D.45601 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45601 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_56(D), out_port_5, vcBegin_111, vcEnd_107, 0);
  # VUSE <.MEM_58>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 33, loop depth 0, count 0, freq 8595, maybe hot
;;   Invalid sum of incoming frequencies 11092, should be 8595
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       14 (TRUE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALSE_VALUE,EXECUTABLE)
;;                15 [72.0%]  (TRUE_VALUE,EXECUTABLE)
  _30 = vcEnd_3 - vcBegin_1;
  _31 = _30 + 1;
  # VUSE <.MEM_12(D)>
  gNodes.57_32 = gNodesD.33729;
  vcs_per_dest_33 = _31 / gNodes.57_32;
  # DEBUG vcs_per_destD.45602 => vcs_per_dest_33
  if (vcs_per_dest_33 <= 0)
    goto <bb 16>;
  else
    goto <bb 17>;
;;    succ:       16 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 3048, maybe hot
;;   Invalid sum of incoming frequencies 853, should be 3048
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       30 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_51 = VDEF <.MEM_9>
  f_15(D)->phD.29348 = 1;
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 6096, maybe hot
;;    prev block 34, next block 38, flags: (NEW, REACHABLE)
;;    pred:       29 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                34 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_120 = PHI <.MEM_9(29), .MEM_51(34)>
;;    succ:       38 [100.0%]  (FALLTHRU)

;;   basic block 38, loop depth 0, count 0, freq 6096, maybe hot
;;    prev block 35, next block 1, flags: (NEW)
;;    pred:       35 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_120>
  iftmp.61_54 = f_15(D)->destD.29342;
  # VUSE <.MEM_120>
  pretmp_129 = MEM[(intD.9 *)r_28(D) + 96B];
  goto <bb 31>;
;;    succ:       31 [100.0%]  (FALLTHRU,EXECUTABLE)

}



;; Function void dor_next_torus(int, int, int, int*, int*, bool) (_Z14dor_next_torusiiiPiS_b, funcdef_no=1972, decl_uid=45497, cgraph_uid=471, symbol_order=482)


Pass statistics:
----------------

void dor_next_torus(int, int, int, int*, int*, bool) (intD.9 curD.45491, intD.9 destD.45492, intD.9 in_portD.45493, intD.9 * out_portD.45494, intD.9 * partitionD.45495, boolD.2757 balanceD.45496)
{
  intD.9 dist2D.45501;
  intD.9 dirD.45500;
  intD.9 dim_leftD.45499;
  intD.9 _14;
  intD.9 _15;
  intD.9 _20;
  intD.9 _21;
  intD.9 _27;
  intD.9 _28;
  intD.9 _29;
  intD.9 _30;
  long intD.12 _32;
  intD.9 _33;
  intD.9 _35;
  intD.9 _36;
  intD.9 cstore_37;
  intD.9 _40;
  boolD.2757 _43;
  boolD.2757 _47;
  boolD.2757 _48;
  boolD.2757 _50;
  boolD.2757 _51;
  intD.9 gK.24_52;
  intD.9 _53;
  intD.9 _54;
  intD.9 gK.24_55;
  intD.9 _56;
  intD.9 _57;
  intD.9 _62;
  long intD.12 _64;
  long intD.12 _65;
  intD.9 _66;
  long intD.12 _67;
  intD.9 _68;
  intD.9 prephitmp_74;
  boolD.2757 _77;
  intD.9 prephitmp_79;
  intD.9 gN.23_80;
  boolD.2757 _82;
  intD.9 gK.24_85;
  boolD.2757 _86;
  boolD.2757 _87;
  boolD.2757 _89;
  boolD.2757 prephitmp_91;
  boolD.2757 prephitmp_92;
  intD.9 _100;
  intD.9 _101;

;;   basic block 2, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG dim_leftD.45499 => 0
  # DEBUG dim_leftD.45499 => 0
  # DEBUG destD.45492 => dest_10(D)
  # DEBUG curD.45491 => cur_9(D)
  # VUSE <.MEM_11(D)>
  gN.23_80 = gND.33727;
  if (gN.23_80 <= 0)
    goto <bb 26>;
  else
    goto <bb 3>;
;;    succ:       26 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 840, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  gK.24_85 = gKD.33726;
  _66 = cur_9(D) % gK.24_85;
  _40 = dest_10(D) % gK.24_85;
  if (_40 != _66)
    goto <bb 25>;
  else
    goto <bb 7>;
;;    succ:       25 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 8710, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       8 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  _14 = cur_16 % gK.24_85;
  _15 = dest_17 % gK.24_85;
  if (_14 != _15)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 392, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # _101 = PHI <_14(4)>
  # _100 = PHI <_15(4)>
  # dim_left_97 = PHI <dim_left_18(4)>
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8318, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       4 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 802, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       3 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 9120, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # cur_41 = PHI <cur_9(D)(7), cur_16(6)>
  # dest_72 = PHI <dest_10(D)(7), dest_17(6)>
  # dim_left_70 = PHI <0(7), dim_left_18(6)>
  # DEBUG dim_leftD.45499 => dim_left_70
  # DEBUG destD.45492 => dest_72
  # DEBUG curD.45491 => cur_41
  cur_16 = cur_41 / gK.24_85;
  # DEBUG curD.45491 => cur_16
  dest_17 = dest_72 / gK.24_85;
  # DEBUG destD.45492 => dest_17
  dim_left_18 = dim_left_70 + 1;
  # DEBUG dim_leftD.45499 => dim_left_18
  # DEBUG dim_leftD.45499 => dim_left_18
  # DEBUG destD.45492 => dest_17
  # DEBUG curD.45491 => cur_16
  if (dim_left_18 >= gN.23_80)
    goto <bb 26>;
  else
    goto <bb 4>;
;;    succ:       26 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 352, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       25 [80.1%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG curD.45491 => NULL
  # DEBUG destD.45492 => NULL
  _27 = prephitmp_79 - prephitmp_74;
  _28 = _27 + gK.24_85;
  _29 = _28 % gK.24_85;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _30 = _29 * -2;
  dist2_31 = _30 + gK.24_85;
  # DEBUG dist2D.45501 => dist2_31
  if (dist2_31 > 0)
    goto <bb 28>;
  else
    goto <bb 10>;
;;    succ:       28 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [27.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 95, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [27.0%]  (FALSE_VALUE,EXECUTABLE)
  if (dist2_31 == 0)
    goto <bb 11>;
  else
    goto <bb 27>;
;;    succ:       11 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 28, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG maxD.51271 => 1
  # .MEM_58 = VDEF <.MEM_11(D)>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _64 = _Z8ran_nextvD.43987 ();
  # RANGE [-1, 1]
  _65 = _64 % 2;
  if (_65 != 0)
    goto <bb 28>;
  else
    goto <bb 27>;
;;    succ:       28 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 352, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       28 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                27 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 1] NONZERO 1
  # dir_4 = PHI <0(28), 1(27)>
  # .MEM_7 = PHI <.MEM_104(28), .MEM_103(27)>
  # cstore_37 = PHI <_33(28), _36(27)>
  # prephitmp_91 = PHI <1(28), 0(27)>
  # prephitmp_92 = PHI <0(28), 1(27)>
  # .MEM_34 = VDEF <.MEM_7>
  *out_port_22(D) = cstore_37;
  # DEBUG dirD.45500 => dir_4
  if (partition_38(D) != 0B)
    goto <bb 13>;
  else
    goto <bb 24>;
;;    succ:       13 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 317, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  if (balance_39(D) != 0)
    goto <bb 14>;
  else
    goto <bb 22>;
;;    succ:       14 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 158, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1]
  _47 = prephitmp_74 > prephitmp_79;
  # RANGE [0, 1]
  _48 = _47 & prephitmp_91;
  if (_48 != 0)
    goto <bb 16>;
  else
    goto <bb 15>;
;;    succ:       16 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 97, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 1]
  _50 = prephitmp_74 < prephitmp_79;
  # RANGE [0, 1]
  _51 = _50 & prephitmp_92;
  if (_51 != 0)
    goto <bb 16>;
  else
    goto <bb 17>;
;;    succ:       16 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 178, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       15 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_61 = VDEF <.MEM_34>
  *partition_38(D) = 1;
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 59, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       15 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  if (dir_4 == 0)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 29, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_34>
  gK.24_52 = gKD.33726;
  _53 = gK.24_52 + -1;
  # RANGE [-1073741824, 1073741823]
  _54 = _53 / 2;
  _89 = _54 < prephitmp_79;
  _86 = _54 >= prephitmp_74;
  _82 = _86 & _89;
  if (_82 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;
;;    succ:       20 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 32, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       17 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_34>
  gK.24_55 = gKD.33726;
  _56 = gK.24_55 + -1;
  # RANGE [-1073741824, 1073741823]
  _57 = _56 / 2;
  _43 = _57 >= prephitmp_79;
  _77 = _57 < prephitmp_74;
  _87 = _43 & _77;
  if (_87 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;
;;    succ:       20 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 94, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       19 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                18 [39.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_60 = VDEF <.MEM_34>
  *partition_38(D) = 0;
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 43, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       19 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                18 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG maxD.51273 => 1
  # .MEM_69 = VDEF <.MEM_34>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _32 = _Z8ran_nextvD.43987 ();
  # RANGE [-1, 1]
  _67 = _32 % 2;
  # RANGE [-1, 1]
  _68 = (intD.9) _67;
  # .MEM_59 = VDEF <.MEM_69>
  *partition_38(D) = _68;
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 158, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       13 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (prephitmp_74 > prephitmp_79)
    goto <bb 16>;
  else
    goto <bb 20>;
;;    succ:       16 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 88, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       25 [19.9%]  (FALSE_VALUE,EXECUTABLE)
  _21 = in_port_19(D) ^ 1;
  # .MEM_23 = VDEF <.MEM_11(D)>
  *out_port_22(D) = _21;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                20 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                21 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                16 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_8 = PHI <.MEM_23(23), .MEM_63(26), .MEM_34(12), .MEM_60(20), .MEM_59(21), .MEM_61(16)>
  # VUSE <.MEM_8>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 25, loop depth 0, count 0, freq 440, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                3 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # dim_left_6 = PHI <dim_left_97(5), 0(3)>
  # prephitmp_74 = PHI <_101(5), _66(3)>
  # prephitmp_79 = PHI <_100(5), _40(3)>
  # RANGE [-1073741824, 1073741823]
  _20 = in_port_19(D) / 2;
  if (dim_left_6 != _20)
    goto <bb 9>;
  else
    goto <bb 23>;
;;    succ:       9 [80.1%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [19.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                2 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _62 = gN.23_80 * 2;
  # .MEM_63 = VDEF <.MEM_11(D)>
  *out_port_22(D) = _62;
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 176, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       10 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_103 = PHI <.MEM_11(D)(10), .MEM_58(11)>
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _35 = dim_left_6 * 2;
  # RANGE [-2147483647, 2147483647]
  _36 = _35 + 1;
  # DEBUG dirD.45500 => 1
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 271, maybe hot
;;    prev block 27, next block 1, flags: (NEW, REACHABLE)
;;    pred:       9 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_104 = PHI <.MEM_11(D)(9), .MEM_58(11)>
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _33 = dim_left_6 * 2;
  # DEBUG dirD.45500 => 0
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

}


Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for *out_port_22(D)
analyze_innermost: success.
	base_address: out_port_22(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *out_port_22(D)
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for *partition_38(D)
analyze_innermost: success.
	base_address: partition_38(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *partition_38(D)
Creating dr for *partition_38(D)
analyze_innermost: success.
	base_address: partition_38(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *partition_38(D)
Creating dr for *out_port_22(D)
analyze_innermost: success.
	base_address: out_port_22(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *out_port_22(D)
Creating dr for *out_port_22(D)
analyze_innermost: success.
	base_address: out_port_22(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *out_port_22(D)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:35, LOOPS:1, CONDITIONS:16, STMTS:85)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_26 bb_3 })
  {
    <bb 2>:
    # DEBUG dim_left => 0
    # DEBUG dim_left => 0
    # DEBUG dest => dest_10(D)
    # DEBUG cur => cur_9(D)
    # VUSE <.MEM_11(D)>
    gN.23_80 = gN;
    if (gN.23_80 <= 0)
      goto <bb 26>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_25 bb_7 })
  {
    <bb 3>:
    # VUSE <.MEM_11(D)>
    gK.24_85 = gK;
    _66 = cur_9(D) % gK.24_85;
    _40 = dest_10(D) % gK.24_85;
    if (_40 != _66)
      goto <bb 25>;
    else
      goto <bb 7>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_25 })
  {
    <bb 5>:
    # _101 = PHI <_14(4)>
    # _100 = PHI <_15(4)>
    # dim_left_97 = PHI <dim_left_18(4)>
    goto <bb 25>;

  }
  bb_7 (preds = {bb_3 }, succs = {bb_8 })
  {
    <bb 7>:

  }
  bb_9 (preds = {bb_25 }, succs = {bb_28 bb_10 })
  {
    <bb 9>:
    # DEBUG cur => NULL
    # DEBUG dest => NULL
    _27 = prephitmp_79 - prephitmp_74;
    _28 = _27 + gK.24_85;
    _29 = _28 % gK.24_85;
    _30 = _29 * -2;
    dist2_31 = _30 + gK.24_85;
    # DEBUG dist2 => dist2_31
    if (dist2_31 > 0)
      goto <bb 28>;
    else
      goto <bb 10>;

  }
  bb_10 (preds = {bb_9 }, succs = {bb_11 bb_27 })
  {
    <bb 10>:
    if (dist2_31 == 0)
      goto <bb 11>;
    else
      goto <bb 27>;

  }
  bb_11 (preds = {bb_10 }, succs = {bb_28 bb_27 })
  {
    <bb 11>:
    # DEBUG max => 1
    # .MEM_58 = VDEF <.MEM_11(D)>
    _64 = ran_next ();
    _65 = _64 % 2;
    if (_65 != 0)
      goto <bb 28>;
    else
      goto <bb 27>;

  }
  bb_12 (preds = {bb_30 bb_29 }, succs = {bb_13 bb_24 })
  {
    <bb 12>:
    # dir_4 = PHI <0(30), 1(29)>
    # .MEM_7 = PHI <.MEM_104(30), .MEM_103(29)>
    # cstore_37 = PHI <_33(30), _36(29)>
    # prephitmp_91 = PHI <1(30), 0(29)>
    # prephitmp_92 = PHI <0(30), 1(29)>
    # .MEM_34 = VDEF <.MEM_7>
    *out_port_22(D) = cstore_37;
    # DEBUG dir => dir_4
    if (partition_38(D) != 0B)
      goto <bb 13>;
    else
      goto <bb 24>;

  }
  bb_13 (preds = {bb_12 }, succs = {bb_14 bb_22 })
  {
    <bb 13>:
    if (balance_39(D) != 0)
      goto <bb 14>;
    else
      goto <bb 22>;

  }
  bb_14 (preds = {bb_13 }, succs = {bb_16 bb_15 })
  {
    <bb 14>:
    _47 = prephitmp_74 > prephitmp_79;
    _48 = _47 & prephitmp_91;
    if (_48 != 0)
      goto <bb 16>;
    else
      goto <bb 15>;

  }
  bb_15 (preds = {bb_14 }, succs = {bb_16 bb_17 })
  {
    <bb 15>:
    _50 = prephitmp_74 < prephitmp_79;
    _51 = _50 & prephitmp_92;
    if (_51 != 0)
      goto <bb 16>;
    else
      goto <bb 17>;

  }
  bb_16 (preds = {bb_15 bb_22 bb_14 }, succs = {bb_32 })
  {
    <bb 16>:

  }
  bb_32 (preds = {bb_16 }, succs = {bb_24 })
  {
    <bb 32>:
    # .MEM_61 = VDEF <.MEM_34>
    *partition_38(D) = 1;
    goto <bb 24>;

  }
  bb_17 (preds = {bb_15 }, succs = {bb_18 bb_19 })
  {
    <bb 17>:
    if (dir_4 == 0)
      goto <bb 18>;
    else
      goto <bb 19>;

  }
  bb_18 (preds = {bb_17 }, succs = {bb_20 bb_21 })
  {
    <bb 18>:
    # VUSE <.MEM_34>
    gK.24_52 = gK;
    _53 = gK.24_52 + -1;
    _54 = _53 / 2;
    _89 = _54 < prephitmp_79;
    _86 = _54 >= prephitmp_74;
    _82 = _86 & _89;
    if (_82 != 0)
      goto <bb 20>;
    else
      goto <bb 21>;

  }
  bb_19 (preds = {bb_17 }, succs = {bb_20 bb_21 })
  {
    <bb 19>:
    # VUSE <.MEM_34>
    gK.24_55 = gK;
    _56 = gK.24_55 + -1;
    _57 = _56 / 2;
    _43 = _57 >= prephitmp_79;
    _77 = _57 < prephitmp_74;
    _87 = _43 & _77;
    if (_87 != 0)
      goto <bb 20>;
    else
      goto <bb 21>;

  }
  bb_20 (preds = {bb_19 bb_22 bb_18 }, succs = {bb_31 })
  {
    <bb 20>:

  }
  bb_31 (preds = {bb_20 }, succs = {bb_24 })
  {
    <bb 31>:
    # .MEM_60 = VDEF <.MEM_34>
    *partition_38(D) = 0;
    goto <bb 24>;

  }
  bb_21 (preds = {bb_19 bb_18 }, succs = {bb_24 })
  {
    <bb 21>:
    # DEBUG max => 1
    # .MEM_69 = VDEF <.MEM_34>
    _32 = ran_next ();
    _67 = _32 % 2;
    _68 = (int) _67;
    # .MEM_59 = VDEF <.MEM_69>
    *partition_38(D) = _68;
    goto <bb 24>;

  }
  bb_22 (preds = {bb_13 }, succs = {bb_16 bb_20 })
  {
    <bb 22>:
    if (prephitmp_74 > prephitmp_79)
      goto <bb 16>;
    else
      goto <bb 20>;

  }
  bb_23 (preds = {bb_25 }, succs = {bb_24 })
  {
    <bb 23>:
    _21 = in_port_19(D) ^ 1;
    # .MEM_23 = VDEF <.MEM_11(D)>
    *out_port_22(D) = _21;

  }
  bb_24 (preds = {bb_23 bb_33 bb_12 bb_31 bb_21 bb_32 }, succs = {bb_34 })
  {
    <bb 24>:
    # .MEM_8 = PHI <.MEM_23(23), .MEM_63(33), .MEM_34(12), .MEM_60(31), .MEM_59(21), .MEM_61(32)>

  }
  bb_34 (preds = {bb_24 }, succs = {bb_1 })
  {
    <bb 34>:
    # VUSE <.MEM_8>
    return;

  }
  bb_25 (preds = {bb_5 bb_3 }, succs = {bb_9 bb_23 })
  {
    <bb 25>:
    # dim_left_6 = PHI <dim_left_97(5), 0(3)>
    # prephitmp_74 = PHI <_101(5), _66(3)>
    # prephitmp_79 = PHI <_100(5), _40(3)>
    _20 = in_port_19(D) / 2;
    if (dim_left_6 != _20)
      goto <bb 9>;
    else
      goto <bb 23>;

  }
  bb_26 (preds = {bb_8 bb_2 }, succs = {bb_33 })
  {
    <bb 26>:

  }
  bb_33 (preds = {bb_26 }, succs = {bb_24 })
  {
    <bb 33>:
    _62 = gN.23_80 * 2;
    # .MEM_63 = VDEF <.MEM_11(D)>
    *out_port_22(D) = _62;
    goto <bb 24>;

  }
  bb_27 (preds = {bb_10 bb_11 }, succs = {bb_29 })
  {
    <bb 27>:
    # .MEM_103 = PHI <.MEM_11(D)(10), .MEM_58(11)>

  }
  bb_29 (preds = {bb_27 }, succs = {bb_12 })
  {
    <bb 29>:
    _35 = dim_left_6 * 2;
    _36 = _35 + 1;
    # DEBUG dir => 1
    goto <bb 12>;

  }
  bb_28 (preds = {bb_9 bb_11 }, succs = {bb_30 })
  {
    <bb 28>:
    # .MEM_104 = PHI <.MEM_11(D)(9), .MEM_58(11)>

  }
  bb_30 (preds = {bb_28 }, succs = {bb_12 })
  {
    <bb 30>:
    _33 = dim_left_6 * 2;
    # DEBUG dir => 0
    goto <bb 12>;

  }
  loop_1 (header = 8, latch = 6, niter = scev_not_known, upper_bound = 2147483646)
  {
    bb_4 (preds = {bb_8 }, succs = {bb_5 bb_6 })
    {
      <bb 4>:
      _14 = cur_16 % gK.24_85;
      _15 = dest_17 % gK.24_85;
      if (_14 != _15)
        goto <bb 5>;
      else
        goto <bb 6>;

    }
    bb_6 (preds = {bb_4 }, succs = {bb_8 })
    {
      <bb 6>:
      goto <bb 8>;

    }
    bb_8 (preds = {bb_7 bb_6 }, succs = {bb_26 bb_4 })
    {
      <bb 8>:
      # cur_41 = PHI <cur_9(D)(7), cur_16(6)>
      # dest_72 = PHI <dest_10(D)(7), dest_17(6)>
      # dim_left_70 = PHI <0(7), dim_left_18(6)>
      # DEBUG dim_left => dim_left_70
      # DEBUG dest => dest_72
      # DEBUG cur => cur_41
      cur_16 = cur_41 / gK.24_85;
      # DEBUG cur => cur_16
      dest_17 = dest_72 / gK.24_85;
      # DEBUG dest => dest_17
      dim_left_18 = dim_left_70 + 1;
      # DEBUG dim_left => dim_left_18
      # DEBUG dim_left => dim_left_18
      # DEBUG dest => dest_17
      # DEBUG cur => cur_16
      if (dim_left_18 >= gN.23_80)
        goto <bb 26>;
      else
        goto <bb 4>;

    }
  }
}

Pass statistics:
----------------

void dor_next_torus(int, int, int, int*, int*, bool) (intD.9 curD.45491, intD.9 destD.45492, intD.9 in_portD.45493, intD.9 * out_portD.45494, intD.9 * partitionD.45495, boolD.2757 balanceD.45496)
{
  intD.9 dist2D.45501;
  intD.9 dirD.45500;
  intD.9 dim_leftD.45499;
  intD.9 _14;
  intD.9 _15;
  intD.9 _20;
  intD.9 _21;
  intD.9 _27;
  intD.9 _28;
  intD.9 _29;
  intD.9 _30;
  long intD.12 _32;
  intD.9 _33;
  intD.9 _35;
  intD.9 _36;
  intD.9 cstore_37;
  intD.9 _40;
  boolD.2757 _43;
  boolD.2757 _47;
  boolD.2757 _48;
  boolD.2757 _50;
  boolD.2757 _51;
  intD.9 gK.24_52;
  intD.9 _53;
  intD.9 _54;
  intD.9 gK.24_55;
  intD.9 _56;
  intD.9 _57;
  intD.9 _62;
  long intD.12 _64;
  long intD.12 _65;
  intD.9 _66;
  long intD.12 _67;
  intD.9 _68;
  intD.9 prephitmp_74;
  boolD.2757 _77;
  intD.9 prephitmp_79;
  intD.9 gN.23_80;
  boolD.2757 _82;
  intD.9 gK.24_85;
  boolD.2757 _86;
  boolD.2757 _87;
  boolD.2757 _89;
  boolD.2757 prephitmp_91;
  boolD.2757 prephitmp_92;
  intD.9 _100;
  intD.9 _101;

;;   basic block 2, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG dim_leftD.45499 => 0
  # DEBUG dim_leftD.45499 => 0
  # DEBUG destD.45492 => dest_10(D)
  # DEBUG curD.45491 => cur_9(D)
  # VUSE <.MEM_11(D)>
  gN.23_80 = gND.33727;
  if (gN.23_80 <= 0)
    goto <bb 26>;
  else
    goto <bb 3>;
;;    succ:       26 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 840, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  gK.24_85 = gKD.33726;
  _66 = cur_9(D) % gK.24_85;
  _40 = dest_10(D) % gK.24_85;
  if (_40 != _66)
    goto <bb 25>;
  else
    goto <bb 7>;
;;    succ:       25 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 8710, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       8 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  _14 = cur_16 % gK.24_85;
  _15 = dest_17 % gK.24_85;
  if (_14 != _15)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 392, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # _101 = PHI <_14(4)>
  # _100 = PHI <_15(4)>
  # dim_left_97 = PHI <dim_left_18(4)>
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8318, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       4 [95.5%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 802, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       3 [95.5%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 9120, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # cur_41 = PHI <cur_9(D)(7), cur_16(6)>
  # dest_72 = PHI <dest_10(D)(7), dest_17(6)>
  # dim_left_70 = PHI <0(7), dim_left_18(6)>
  # DEBUG dim_leftD.45499 => dim_left_70
  # DEBUG destD.45492 => dest_72
  # DEBUG curD.45491 => cur_41
  cur_16 = cur_41 / gK.24_85;
  # DEBUG curD.45491 => cur_16
  dest_17 = dest_72 / gK.24_85;
  # DEBUG destD.45492 => dest_17
  dim_left_18 = dim_left_70 + 1;
  # DEBUG dim_leftD.45499 => dim_left_18
  # DEBUG dim_leftD.45499 => dim_left_18
  # DEBUG destD.45492 => dest_17
  # DEBUG curD.45491 => cur_16
  if (dim_left_18 >= gN.23_80)
    goto <bb 26>;
  else
    goto <bb 4>;
;;    succ:       26 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [95.5%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 352, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       25 [80.1%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG curD.45491 => NULL
  # DEBUG destD.45492 => NULL
  _27 = prephitmp_79 - prephitmp_74;
  _28 = _27 + gK.24_85;
  _29 = _28 % gK.24_85;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _30 = _29 * -2;
  dist2_31 = _30 + gK.24_85;
  # DEBUG dist2D.45501 => dist2_31
  if (dist2_31 > 0)
    goto <bb 28>;
  else
    goto <bb 10>;
;;    succ:       28 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [27.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 95, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [27.0%]  (FALSE_VALUE,EXECUTABLE)
  if (dist2_31 == 0)
    goto <bb 11>;
  else
    goto <bb 27>;
;;    succ:       11 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 28, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG maxD.51271 => 1
  # .MEM_58 = VDEF <.MEM_11(D)>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _64 = _Z8ran_nextvD.43987 ();
  # RANGE [-1, 1]
  _65 = _64 % 2;
  if (_65 != 0)
    goto <bb 28>;
  else
    goto <bb 27>;
;;    succ:       28 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 352, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       30 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                29 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 1] NONZERO 1
  # dir_4 = PHI <0(30), 1(29)>
  # .MEM_7 = PHI <.MEM_104(30), .MEM_103(29)>
  # cstore_37 = PHI <_33(30), _36(29)>
  # prephitmp_91 = PHI <1(30), 0(29)>
  # prephitmp_92 = PHI <0(30), 1(29)>
  # .MEM_34 = VDEF <.MEM_7>
  *out_port_22(D) = cstore_37;
  # DEBUG dirD.45500 => dir_4
  if (partition_38(D) != 0B)
    goto <bb 13>;
  else
    goto <bb 24>;
;;    succ:       13 [89.9%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [10.1%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 317, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [89.9%]  (TRUE_VALUE,EXECUTABLE)
  if (balance_39(D) != 0)
    goto <bb 14>;
  else
    goto <bb 22>;
;;    succ:       14 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 158, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # RANGE [0, 1]
  _47 = prephitmp_74 > prephitmp_79;
  # RANGE [0, 1]
  _48 = _47 & prephitmp_91;
  if (_48 != 0)
    goto <bb 16>;
  else
    goto <bb 15>;
;;    succ:       16 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 97, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [0, 1]
  _50 = prephitmp_74 < prephitmp_79;
  # RANGE [0, 1]
  _51 = _50 & prephitmp_92;
  if (_51 != 0)
    goto <bb 16>;
  else
    goto <bb 17>;
;;    succ:       16 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 178, maybe hot
;;    prev block 15, next block 32, flags: (NEW, REACHABLE)
;;    pred:       15 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       32 [100.0%]  (FALLTHRU)

;;   basic block 32, loop depth 0, count 0, freq 178, maybe hot
;;    prev block 16, next block 17, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU)
  # .MEM_61 = VDEF <.MEM_34>
  *partition_38(D) = 1;
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 59, maybe hot
;;    prev block 32, next block 18, flags: (NEW, REACHABLE)
;;    pred:       15 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  if (dir_4 == 0)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 29, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_34>
  gK.24_52 = gKD.33726;
  _53 = gK.24_52 + -1;
  # RANGE [-1073741824, 1073741823]
  _54 = _53 / 2;
  _89 = _54 < prephitmp_79;
  _86 = _54 >= prephitmp_74;
  _82 = _86 & _89;
  if (_82 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;
;;    succ:       20 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [61.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 32, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       17 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_34>
  gK.24_55 = gKD.33726;
  _56 = gK.24_55 + -1;
  # RANGE [-1073741824, 1073741823]
  _57 = _56 / 2;
  _43 = _57 >= prephitmp_79;
  _77 = _57 < prephitmp_74;
  _87 = _43 & _77;
  if (_87 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;
;;    succ:       20 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 94, maybe hot
;;    prev block 19, next block 31, flags: (NEW, REACHABLE)
;;    pred:       19 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                18 [39.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       31 [100.0%]  (FALLTHRU)

;;   basic block 31, loop depth 0, count 0, freq 94, maybe hot
;;    prev block 20, next block 21, flags: (NEW)
;;    pred:       20 [100.0%]  (FALLTHRU)
  # .MEM_60 = VDEF <.MEM_34>
  *partition_38(D) = 0;
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 43, maybe hot
;;    prev block 31, next block 22, flags: (NEW, REACHABLE)
;;    pred:       19 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;                18 [61.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG maxD.51273 => 1
  # .MEM_69 = VDEF <.MEM_34>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _32 = _Z8ran_nextvD.43987 ();
  # RANGE [-1, 1]
  _67 = _32 % 2;
  # RANGE [-1, 1]
  _68 = (intD.9) _67;
  # .MEM_59 = VDEF <.MEM_69>
  *partition_38(D) = _68;
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 158, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       13 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (prephitmp_74 > prephitmp_79)
    goto <bb 16>;
  else
    goto <bb 20>;
;;    succ:       16 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 88, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       25 [19.9%]  (FALSE_VALUE,EXECUTABLE)
  _21 = in_port_19(D) ^ 1;
  # .MEM_23 = VDEF <.MEM_11(D)>
  *out_port_22(D) = _21;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 23, next block 34, flags: (NEW, REACHABLE)
;;    pred:       23 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [10.1%]  (FALSE_VALUE,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                21 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_8 = PHI <.MEM_23(23), .MEM_63(33), .MEM_34(12), .MEM_60(31), .MEM_59(21), .MEM_61(32)>
;;    succ:       34 [100.0%]  (FALLTHRU)

;;   basic block 34, loop depth 0, count 0, freq 880, maybe hot
;;    prev block 24, next block 25, flags: (NEW)
;;    pred:       24 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_8>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 25, loop depth 0, count 0, freq 440, maybe hot
;;    prev block 34, next block 26, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                3 [4.5%]  (TRUE_VALUE,EXECUTABLE)
  # dim_left_6 = PHI <dim_left_97(5), 0(3)>
  # prephitmp_74 = PHI <_101(5), _66(3)>
  # prephitmp_79 = PHI <_100(5), _40(3)>
  # RANGE [-1073741824, 1073741823]
  _20 = in_port_19(D) / 2;
  if (dim_left_6 != _20)
    goto <bb 9>;
  else
    goto <bb 23>;
;;    succ:       9 [80.1%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [19.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 25, next block 33, flags: (NEW, REACHABLE)
;;    pred:       8 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;                2 [4.5%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       33 [100.0%]  (FALLTHRU)

;;   basic block 33, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 26, next block 27, flags: (NEW)
;;    pred:       26 [100.0%]  (FALLTHRU)
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _62 = gN.23_80 * 2;
  # .MEM_63 = VDEF <.MEM_11(D)>
  *out_port_22(D) = _62;
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 176, maybe hot
;;    prev block 33, next block 29, flags: (NEW, REACHABLE)
;;    pred:       10 [71.0%]  (FALSE_VALUE,EXECUTABLE)
;;                11 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_103 = PHI <.MEM_11(D)(10), .MEM_58(11)>
;;    succ:       29 [100.0%]  (FALLTHRU)

;;   basic block 29, loop depth 0, count 0, freq 176, maybe hot
;;    prev block 27, next block 28, flags: (NEW)
;;    pred:       27 [100.0%]  (FALLTHRU)
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _35 = dim_left_6 * 2;
  # RANGE [-2147483647, 2147483647]
  _36 = _35 + 1;
  # DEBUG dirD.45500 => 1
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 271, maybe hot
;;    prev block 29, next block 30, flags: (NEW, REACHABLE)
;;    pred:       9 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_104 = PHI <.MEM_11(D)(9), .MEM_58(11)>
;;    succ:       30 [100.0%]  (FALLTHRU)

;;   basic block 30, loop depth 0, count 0, freq 271, maybe hot
;;    prev block 28, next block 1, flags: (NEW)
;;    pred:       28 [100.0%]  (FALLTHRU)
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _33 = dim_left_6 * 2;
  # DEBUG dirD.45500 => 0
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU,EXECUTABLE)

}



;; Function void min_adapt_torus(const Router*, const Flit*, int, OutputSet*, bool) (_Z15min_adapt_torusPK6RouterPK4FlitiP9OutputSetb, funcdef_no=1987, decl_uid=45738, cgraph_uid=486, symbol_order=497)


Pass statistics:
----------------

void min_adapt_torus(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45733, const struct FlitD.29321 * fD.45734, intD.9 in_channelD.45735, struct OutputSetD.28230 * outputsD.45736, boolD.2757 injectD.45737)
{
  intD.9 dist2D.45748;
  intD.9 nD.45747;
  intD.9 out_portD.45746;
  intD.9 destD.45745;
  intD.9 curD.45744;
  intD.9 in_vcD.45743;
  static const charD.10 _ZZ15min_adapt_torusPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45742[72] = "void min_adapt_torus(const Router*, const Flit*, int, OutputSet*, bool)";
  intD.9 vcBeginD.45740;
  intD.9 gNumVCs.127_14;
  FlitTypeD.29324 _17;
  boolD.2757 _20;
  boolD.2757 _26;
  intD.9 _29;
  intD.9 _35;
  intD.9 gN.129_36;
  intD.9 _37;
  intD.9 gN.129_39;
  intD.9 _40;
  intD.9 _44;
  intD.9 _47;
  intD.9 _48;
  intD.9 _49;
  intD.9 _50;
  intD.9 _51;
  intD.9 _52;
  intD.9 _54;
  intD.9 _55;
  intD.9 _56;
  intD.9 _58;
  intD.9 _59;
  intD.9 * _65;
  intD.9 * _69;
  intD.9 _71;
  intD.9 out_port.131_72;
  intD.9 out_port.131_74;
  const intD.9 _79;
  boolD.2757 _82;
  boolD.2757 _83;
  const intD.9 pretmp_106;
  const intD.9 prephitmp_107;
  const intD.9 pretmp_108;
  const intD.9 prephitmp_109;
  intD.9 pretmp_110;
  intD.9 prephitmp_111;
  const intD.9 pretmp_112;
  const intD.9 prephitmp_113;
  const intD.9 pretmp_114;
  const intD.9 prephitmp_115;
  intD.9 pretmp_116;
  intD.9 prephitmp_117;
  intD.9 prephitmp_126;
  intD.9 pretmp_127;
  intD.9 pretmp_128;
  intD.9 prephitmp_129;
  intD.9 prephitmp_131;
  intD.9 pretmp_132;
  intD.9 pretmp_133;
  intD.9 prephitmp_134;

;;   basic block 2, loop depth 0, count 0, freq 1600, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG vcBeginD.45740 => 0
  # DEBUG D#224ptD.0 => gNumVCsD.42077
  # DEBUG vcEndD.45741 => D#224ptD.0 + -1
  # VUSE <.MEM_13(D)>
  _17 = f_16(D)->typeD.29330;
  if (_17 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 800, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  vcBegin_18 = gReadReqBeginVCD.42078;
  # DEBUG vcBeginD.45740 => vcBegin_18
  # VUSE <.MEM_13(D)>
  in_vc_19 = gReadReqEndVCD.42079;
  # DEBUG vcEndD.45741 => in_vc_19
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 800, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_17 == 2)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 224, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  vcBegin_21 = gWriteReqBeginVCD.42080;
  # DEBUG vcBeginD.45740 => vcBegin_21
  # VUSE <.MEM_13(D)>
  in_vc_22 = gWriteReqEndVCD.42081;
  # DEBUG vcEndD.45741 => in_vc_22
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 576, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_17 == 1)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 161, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  vcBegin_24 = gReadReplyBeginVCD.42082;
  # DEBUG vcBeginD.45740 => vcBegin_24
  # VUSE <.MEM_13(D)>
  in_vc_25 = gReadReplyEndVCD.42083;
  # DEBUG vcEndD.45741 => in_vc_25
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 415, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  gNumVCs.127_14 = gNumVCsD.42077;
  if (_17 == 3)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 299, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  in_vc_15 = gNumVCs.127_14 + -1;
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 116, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  vcBegin_27 = gWriteReplyBeginVCD.42084;
  # DEBUG vcBeginD.45740 => vcBegin_27
  # VUSE <.MEM_13(D)>
  in_vc_28 = gWriteReplyEndVCD.42085;
  # DEBUG vcEndD.45741 => in_vc_28
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 1600, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # vcBegin_1 = PHI <vcBegin_18(3), vcBegin_21(5), vcBegin_24(7), 0(9), vcBegin_27(10)>
  # in_vc_2 = PHI <in_vc_19(3), in_vc_22(5), in_vc_25(7), in_vc_15(9), in_vc_28(10)>
  # DEBUG vcEndD.45741 => in_vc_2
  # DEBUG vcBeginD.45740 => vcBegin_1
  # VUSE <.MEM_13(D)>
  _29 = f_16(D)->vcD.29331;
  _82 = in_vc_2 < _29;
  _20 = vcBegin_1 > _29;
  _83 = _20 | _82;
  if (_83 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 1199, maybe hot
;;   Invalid sum of incoming frequencies 800, should be 1199
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  _26 = _29 >= 0;
  if (_26 >= inject_30(D))
    goto <bb 13>;
  else
    goto <bb 37>;
;;    succ:       13 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_31 = VDEF <.MEM_13(D)>
  # USE = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  __assert_failD.9858 ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 1734, &_ZZ15min_adapt_torusPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45742);
;;    succ:      

;;   basic block 14, loop depth 0, count 0, freq 400, maybe hot
;;   Invalid sum of incoming frequencies 800, should be 400
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       11 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_33 = VDEF <.MEM_13(D)>
  # USE = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_32(D));
  if (inject_30(D) != 0)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 (TRUE_VALUE,EXECUTABLE)
;;                16 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 331, maybe hot
;;   Invalid sum of incoming frequencies 1199, should be 331
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 (TRUE_VALUE,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_103 = PHI <.MEM_33(14), .MEM_102(37)>
  # .MEM_77 = VDEF <.MEM_103>
  # USE = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_32(D), -1, vcBegin_1, in_vc_2, 0);
  # .MEM_78 = VDEF <.MEM_77>
  out_portD.45746 ={v} {CLOBBER};
  goto <bb 36>;
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 1268, maybe hot
;;   Invalid sum of incoming frequencies 400, should be 1268
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_33>
  _79 = MEM[(intD.9 *)r_34(D) + 96B];
  # DEBUG D#14ptD.0 => r_34(D)
  # DEBUG thisD.51524 => D#14ptD.0
  # VUSE <.MEM_33>
  _35 = f_16(D)->destD.29342;
  if (_35 == _79)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [13.7%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [86.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 174, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [13.7%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_33>
  gN.129_36 = gND.33727;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _37 = gN.129_36 * 2;
  # .MEM_38 = VDEF <.MEM_33>
  # USE = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_32(D), _37, vcBegin_1, in_vc_2, 0);
  # VUSE <.MEM_38>
  pretmp_106 = f_16(D)->destD.29342;
  # VUSE <.MEM_38>
  pretmp_108 = MEM[(intD.9 *)r_34(D) + 96B];
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 1268, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       16 [86.3%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_7 = PHI <.MEM_33(16), .MEM_38(17)>
  # prephitmp_107 = PHI <_35(16), pretmp_106(17)>
  # prephitmp_109 = PHI <_79(16), pretmp_108(17)>
  # VUSE <.MEM_7>
  gN.129_39 = gND.33727;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _40 = gN.129_39 * 2;
  if (_40 == in_channel_41(D))
    goto <bb 20>;
  else
    goto <bb 19>;
;;    succ:       20 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 913, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7>
  in_vc_42 = f_16(D)->vcD.29331;
  # DEBUG in_vcD.45743 => in_vc_42
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 1268, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       18 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # in_vc_3 = PHI <in_vc_2(18), in_vc_42(19)>
  # DEBUG in_vcD.45743 => in_vc_3
  # DEBUG D#223ptD.0 => MEM[(intD.9 *)r_34(D) + 96B]
  # DEBUG D#14ptD.0 => r_34(D)
  # DEBUG thisD.51527 => D#14ptD.0
  # DEBUG curD.45744 => NULL
  # DEBUG D#222ptD.0 => f_16(D)->destD.29342
  # DEBUG destD.45745 => D#222ptD.0
  _44 = vcBegin_1 + 1;
  if (in_vc_3 > _44)
    goto <bb 21>;
  else
    goto <bb 31>;
;;    succ:       21 [71.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [29.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [71.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG nD.45747 => 0
  # DEBUG destD.45745 => D#222ptD.0
  # DEBUG curD.45744 => D#223ptD.0
  if (gN.129_39 <= 0)
    goto <bb 30>;
  else
    goto <bb 22>;
;;    succ:       30 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 21, next block 23, flags: (NEW)
;;    pred:       21 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7>
  pretmp_116 = gKD.33726;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                28 [100.0%]  (FALLTHRU,EXECUTABLE)
  # cur_94 = PHI <prephitmp_109(22), cur_62(28)>
  # dest_86 = PHI <prephitmp_107(22), dest_63(28)>
  # n_96 = PHI <0(22), n_64(28)>
  # .MEM_85 = PHI <.MEM_7(22), .MEM_9(28)>
  # prephitmp_117 = PHI <pretmp_116(22), prephitmp_129(28)>
  # prephitmp_126 = PHI <gN.129_39(22), prephitmp_134(28)>
  # DEBUG nD.45747 => n_96
  # DEBUG destD.45745 => dest_86
  # DEBUG curD.45744 => cur_94
  _47 = cur_94 % prephitmp_117;
  _48 = dest_86 % prephitmp_117;
  if (_47 != _48)
    goto <bb 24>;
  else
    goto <bb 27>;
;;    succ:       24 [72.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [28.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 1, count 0, freq 6552, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [72.0%]  (TRUE_VALUE,EXECUTABLE)
  _49 = _48 - _47;
  _50 = _49 + prephitmp_117;
  _51 = _50 % prephitmp_117;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _52 = _51 * -2;
  dist2_53 = _52 + prephitmp_117;
  # DEBUG dist2D.45748 => dist2_53
  if (dist2_53 > 0)
    goto <bb 25>;
  else
    goto <bb 26>;
;;    succ:       25 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [27.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 4784, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       24 [73.0%]  (TRUE_VALUE,EXECUTABLE)
  _58 = vcBegin_1 + 3;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _59 = n_96 * 2;
  # .MEM_60 = VDEF <.MEM_85>
  # USE = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_32(D), _59, _58, _58, 1);
  # VUSE <.MEM_60>
  pretmp_128 = gKD.33726;
  # VUSE <.MEM_60>
  pretmp_133 = gND.33727;
  goto <bb 27>;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 1, count 0, freq 1768, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       24 [27.0%]  (FALSE_VALUE,EXECUTABLE)
  _54 = vcBegin_1 + 3;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _55 = n_96 * 2;
  # RANGE [-2147483647, 2147483647]
  _56 = _55 + 1;
  # .MEM_57 = VDEF <.MEM_85>
  # USE = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_32(D), _56, _54, _54, 1);
  # VUSE <.MEM_57>
  pretmp_127 = gKD.33726;
  # VUSE <.MEM_57>
  pretmp_132 = gND.33727;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       23 [28.0%]  (FALSE_VALUE,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                25 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_9 = PHI <.MEM_85(23), .MEM_57(26), .MEM_60(25)>
  # prephitmp_129 = PHI <prephitmp_117(23), pretmp_127(26), pretmp_128(25)>
  # prephitmp_134 = PHI <prephitmp_126(23), pretmp_132(26), pretmp_133(25)>
  cur_62 = cur_94 / prephitmp_129;
  # DEBUG curD.45744 => cur_62
  dest_63 = dest_86 / prephitmp_129;
  # DEBUG destD.45745 => dest_63
  n_64 = n_96 + 1;
  # DEBUG nD.45747 => n_64
  # DEBUG nD.45747 => n_64
  # DEBUG destD.45745 => dest_63
  # DEBUG curD.45744 => cur_62
  if (n_64 >= prephitmp_134)
    goto <bb 29>;
  else
    goto <bb 28>;
;;    succ:       29 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 27, next block 29, flags: (NEW)
;;    pred:       27 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 28, next block 30, flags: (NEW)
;;    pred:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # prephitmp_131 = PHI <prephitmp_134(27)>
  pretmp_110 = prephitmp_131 * 2;
  # VUSE <.MEM_9>
  pretmp_112 = f_16(D)->destD.29342;
  # VUSE <.MEM_9>
  pretmp_114 = MEM[(intD.9 *)r_34(D) + 96B];
;;    succ:       30 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_95 = PHI <.MEM_9(29), .MEM_7(21)>
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  # prephitmp_111 = PHI <pretmp_110(29), _40(21)>
  # prephitmp_113 = PHI <pretmp_112(29), prephitmp_107(21)>
  # prephitmp_115 = PHI <pretmp_114(29), prephitmp_109(21)>
  # PT = nonlocal 
  _65 = &f_16(D)->phD.29348;
  # DEBUG D#14ptD.0 => r_34(D)
  # DEBUG thisD.51530 => D#14ptD.0
  # .MEM_68 = VDEF <.MEM_95>
  # USE = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  _Z14dor_next_torusiiiPiS_bD.45497 (prephitmp_115, prephitmp_113, prephitmp_111, &out_portD.45746, _65, 0);
  goto <bb 32>;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 368, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       20 [29.0%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal 
  _69 = &f_16(D)->phD.29348;
  # .MEM_70 = VDEF <.MEM_7>
  # USE = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  _Z14dor_next_torusiiiPiS_bD.45497 (prephitmp_109, prephitmp_107, in_channel_41(D), &out_portD.45746, _69, 0);
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 1268, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       30 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_10 = PHI <.MEM_68(30), .MEM_70(31)>
  # VUSE <.MEM_10>
  _71 = f_16(D)->phD.29348;
  if (_71 == 0)
    goto <bb 33>;
  else
    goto <bb 34>;
;;    succ:       33 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 634, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       32 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_10>
  out_port.131_72 = out_portD.45746;
  # .MEM_73 = VDEF <.MEM_10>
  # USE = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_32(D), out_port.131_72, vcBegin_1, vcBegin_1, 0);
  goto <bb 35>;
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 634, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       32 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_10>
  out_port.131_74 = out_portD.45746;
  # .MEM_75 = VDEF <.MEM_10>
  # USE = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_32(D), out_port.131_74, _44, _44, 0);
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 1268, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       33 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                34 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_11 = PHI <.MEM_73(33), .MEM_75(34)>
  # .MEM_76 = VDEF <.MEM_11>
  out_portD.45746 ={v} {CLOBBER};
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 1599, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       35 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_12 = PHI <.MEM_76(35), .MEM_78(15)>
  # VUSE <.MEM_12>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 37, loop depth 0, count 0, freq 1199, maybe hot
;;    prev block 36, next block 1, flags: (NEW, REACHABLE)
;;    pred:       12 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_102 = VDEF <.MEM_13(D)>
  # USE = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_32(D));
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

}


Creating dr for f_16(D)->type
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 0
Creating dr for gReadReqBeginVC
analyze_innermost: success.
	base_address: &gReadReqBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReqBeginVC
Creating dr for gReadReqEndVC
analyze_innermost: success.
	base_address: &gReadReqEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReqEndVC
Creating dr for gWriteReqBeginVC
analyze_innermost: success.
	base_address: &gWriteReqBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReqBeginVC
Creating dr for gWriteReqEndVC
analyze_innermost: success.
	base_address: &gWriteReqEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReqEndVC
Creating dr for gReadReplyBeginVC
analyze_innermost: success.
	base_address: &gReadReplyBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReplyBeginVC
Creating dr for gReadReplyEndVC
analyze_innermost: success.
	base_address: &gReadReplyEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gReadReplyEndVC
Creating dr for gNumVCs
analyze_innermost: success.
	base_address: &gNumVCs
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gNumVCs
Creating dr for gWriteReplyBeginVC
analyze_innermost: success.
	base_address: &gWriteReplyBeginVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReplyBeginVC
Creating dr for gWriteReplyEndVC
analyze_innermost: success.
	base_address: &gWriteReplyEndVC
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gWriteReplyEndVC
Creating dr for f_16(D)->vc
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 32
Creating dr for MEM[(int *)r_34(D) + 96B]
analyze_innermost: success.
	base_address: r_34(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(int *)r_34(D) + 96B]
Creating dr for f_16(D)->dest
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 352
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for f_16(D)->vc
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 32
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for f_16(D)->dest
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 44
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 352
Creating dr for MEM[(int *)r_34(D) + 96B]
analyze_innermost: success.
	base_address: r_34(D)
	offset from base address: 0
	constant offset from base address: 96
	step: 0
	aligned to: 256
	base_object: MEM[(int *)r_34(D) + 96B]
Creating dr for f_16(D)->ph
analyze_innermost: success.
	base_address: f_16(D)
	offset from base address: 0
	constant offset from base address: 68
	step: 0
	aligned to: 256
	base_object: *f_16(D)
	Access function 0: 544
Creating dr for out_port
analyze_innermost: success.
	base_address: &out_port
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: out_port
Creating dr for out_port
analyze_innermost: success.
	base_address: &out_port
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: out_port

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:3, LOOPS:0, CONDITIONS:1, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:10, LOOPS:0, CONDITIONS:4, STMTS:26)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:43, LOOPS:1, CONDITIONS:15, STMTS:121)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # DEBUG vcBegin => 0
    # DEBUG D#224 => gNumVCs
    # DEBUG vcEnd => D#224 + -1
    # VUSE <.MEM_13(D)>
    _17 = f_16(D)->type;
    if (_17 == 0)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_11 })
  {
    <bb 3>:
    # VUSE <.MEM_13(D)>
    vcBegin_18 = gReadReqBeginVC;
    # DEBUG vcBegin => vcBegin_18
    # VUSE <.MEM_13(D)>
    in_vc_19 = gReadReqEndVC;
    # DEBUG vcEnd => in_vc_19
    goto <bb 11>;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 bb_6 })
  {
    <bb 4>:
    if (_17 == 2)
      goto <bb 5>;
    else
      goto <bb 6>;

  }
  bb_5 (preds = {bb_4 }, succs = {bb_11 })
  {
    <bb 5>:
    # VUSE <.MEM_13(D)>
    vcBegin_21 = gWriteReqBeginVC;
    # DEBUG vcBegin => vcBegin_21
    # VUSE <.MEM_13(D)>
    in_vc_22 = gWriteReqEndVC;
    # DEBUG vcEnd => in_vc_22
    goto <bb 11>;

  }
  bb_6 (preds = {bb_4 }, succs = {bb_7 bb_8 })
  {
    <bb 6>:
    if (_17 == 1)
      goto <bb 7>;
    else
      goto <bb 8>;

  }
  bb_7 (preds = {bb_6 }, succs = {bb_11 })
  {
    <bb 7>:
    # VUSE <.MEM_13(D)>
    vcBegin_24 = gReadReplyBeginVC;
    # DEBUG vcBegin => vcBegin_24
    # VUSE <.MEM_13(D)>
    in_vc_25 = gReadReplyEndVC;
    # DEBUG vcEnd => in_vc_25
    goto <bb 11>;

  }
  bb_8 (preds = {bb_6 }, succs = {bb_10 bb_9 })
  {
    <bb 8>:
    # VUSE <.MEM_13(D)>
    gNumVCs.127_14 = gNumVCs;
    if (_17 == 3)
      goto <bb 10>;
    else
      goto <bb 9>;

  }
  bb_9 (preds = {bb_8 }, succs = {bb_11 })
  {
    <bb 9>:
    in_vc_15 = gNumVCs.127_14 + -1;
    goto <bb 11>;

  }
  bb_10 (preds = {bb_8 }, succs = {bb_11 })
  {
    <bb 10>:
    # VUSE <.MEM_13(D)>
    vcBegin_27 = gWriteReplyBeginVC;
    # DEBUG vcBegin => vcBegin_27
    # VUSE <.MEM_13(D)>
    in_vc_28 = gWriteReplyEndVC;
    # DEBUG vcEnd => in_vc_28

  }
  bb_11 (preds = {bb_3 bb_5 bb_7 bb_9 bb_10 }, succs = {bb_42 })
  {
    <bb 11>:
    # vcBegin_1 = PHI <vcBegin_18(3), vcBegin_21(5), vcBegin_24(7), 0(9), vcBegin_27(10)>
    # in_vc_2 = PHI <in_vc_19(3), in_vc_22(5), in_vc_25(7), in_vc_15(9), in_vc_28(10)>

  }
  bb_42 (preds = {bb_11 }, succs = {bb_12 bb_14 })
  {
    <bb 42>:
    # DEBUG vcEnd => in_vc_2
    # DEBUG vcBegin => vcBegin_1
    # VUSE <.MEM_13(D)>
    _29 = f_16(D)->vc;
    _82 = in_vc_2 < _29;
    _20 = vcBegin_1 > _29;
    _83 = _20 | _82;
    if (_83 != 0)
      goto <bb 12>;
    else
      goto <bb 14>;

  }
  bb_12 (preds = {bb_42 }, succs = {bb_13 bb_37 })
  {
    <bb 12>:
    _26 = _29 >= 0;
    if (_26 >= inject_30(D))
      goto <bb 13>;
    else
      goto <bb 37>;

  }
  bb_13 (preds = {bb_12 }, succs = {})
  {
    <bb 13>:
    # .MEM_31 = VDEF <.MEM_13(D)>
    __assert_fail ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 1734, &__PRETTY_FUNCTION__);

  }
  bb_14 (preds = {bb_42 }, succs = {bb_15 bb_16 })
  {
    <bb 14>:
    # .MEM_33 = VDEF <.MEM_13(D)>
    OutputSet::Clear (outputs_32(D));
    if (inject_30(D) != 0)
      goto <bb 15>;
    else
      goto <bb 16>;

  }
  bb_15 (preds = {bb_14 bb_37 }, succs = {bb_36 })
  {
    <bb 15>:
    # .MEM_103 = PHI <.MEM_33(14), .MEM_102(37)>
    # .MEM_77 = VDEF <.MEM_103>
    OutputSet::AddRange (outputs_32(D), -1, vcBegin_1, in_vc_2, 0);
    # .MEM_78 = VDEF <.MEM_77>
    out_port ={v} {CLOBBER};
    goto <bb 36>;

  }
  bb_16 (preds = {bb_14 }, succs = {bb_17 bb_18 })
  {
    <bb 16>:
    # VUSE <.MEM_33>
    _79 = MEM[(int *)r_34(D) + 96B];
    # DEBUG D#14 => r_34(D)
    # DEBUG this => D#14
    # VUSE <.MEM_33>
    _35 = f_16(D)->dest;
    if (_35 == _79)
      goto <bb 17>;
    else
      goto <bb 18>;

  }
  bb_17 (preds = {bb_16 }, succs = {bb_18 })
  {
    <bb 17>:
    # VUSE <.MEM_33>
    gN.129_36 = gN;
    _37 = gN.129_36 * 2;
    # .MEM_38 = VDEF <.MEM_33>
    OutputSet::AddRange (outputs_32(D), _37, vcBegin_1, in_vc_2, 0);
    # VUSE <.MEM_38>
    pretmp_106 = f_16(D)->dest;
    # VUSE <.MEM_38>
    pretmp_108 = MEM[(int *)r_34(D) + 96B];

  }
  bb_18 (preds = {bb_16 bb_17 }, succs = {bb_39 })
  {
    <bb 18>:
    # .MEM_7 = PHI <.MEM_33(16), .MEM_38(17)>
    # prephitmp_107 = PHI <_35(16), pretmp_106(17)>
    # prephitmp_109 = PHI <_79(16), pretmp_108(17)>

  }
  bb_39 (preds = {bb_18 }, succs = {bb_20 bb_19 })
  {
    <bb 39>:
    # VUSE <.MEM_7>
    gN.129_39 = gN;
    _40 = gN.129_39 * 2;
    if (_40 == in_channel_41(D))
      goto <bb 20>;
    else
      goto <bb 19>;

  }
  bb_19 (preds = {bb_39 }, succs = {bb_20 })
  {
    <bb 19>:
    # VUSE <.MEM_7>
    in_vc_42 = f_16(D)->vc;
    # DEBUG in_vc => in_vc_42

  }
  bb_20 (preds = {bb_39 bb_19 }, succs = {bb_41 })
  {
    <bb 20>:
    # in_vc_3 = PHI <in_vc_2(39), in_vc_42(19)>

  }
  bb_41 (preds = {bb_20 }, succs = {bb_21 bb_31 })
  {
    <bb 41>:
    # DEBUG in_vc => in_vc_3
    # DEBUG D#223 => MEM[(int *)r_34(D) + 96B]
    # DEBUG D#14 => r_34(D)
    # DEBUG this => D#14
    # DEBUG cur => NULL
    # DEBUG D#222 => f_16(D)->dest
    # DEBUG dest => D#222
    _44 = vcBegin_1 + 1;
    if (in_vc_3 > _44)
      goto <bb 21>;
    else
      goto <bb 31>;

  }
  bb_21 (preds = {bb_41 }, succs = {bb_30 bb_22 })
  {
    <bb 21>:
    # DEBUG n => 0
    # DEBUG dest => D#222
    # DEBUG cur => D#223
    if (gN.129_39 <= 0)
      goto <bb 30>;
    else
      goto <bb 22>;

  }
  bb_22 (preds = {bb_21 }, succs = {bb_23 })
  {
    <bb 22>:
    # VUSE <.MEM_7>
    pretmp_116 = gK;

  }
  bb_29 (preds = {bb_27 }, succs = {bb_38 })
  {
    <bb 29>:
    # prephitmp_131 = PHI <prephitmp_134(27)>

  }
  bb_38 (preds = {bb_29 }, succs = {bb_30 })
  {
    <bb 38>:
    pretmp_110 = prephitmp_131 * 2;
    # VUSE <.MEM_9>
    pretmp_112 = f_16(D)->dest;
    # VUSE <.MEM_9>
    pretmp_114 = MEM[(int *)r_34(D) + 96B];

  }
  bb_30 (preds = {bb_38 bb_21 }, succs = {bb_32 })
  {
    <bb 30>:
    # .MEM_95 = PHI <.MEM_9(38), .MEM_7(21)>
    # prephitmp_111 = PHI <pretmp_110(38), _40(21)>
    # prephitmp_113 = PHI <pretmp_112(38), prephitmp_107(21)>
    # prephitmp_115 = PHI <pretmp_114(38), prephitmp_109(21)>
    _65 = &f_16(D)->ph;
    # DEBUG D#14 => r_34(D)
    # DEBUG this => D#14
    # .MEM_68 = VDEF <.MEM_95>
    dor_next_torus (prephitmp_115, prephitmp_113, prephitmp_111, &out_port, _65, 0);
    goto <bb 32>;

  }
  bb_31 (preds = {bb_41 }, succs = {bb_32 })
  {
    <bb 31>:
    _69 = &f_16(D)->ph;
    # .MEM_70 = VDEF <.MEM_7>
    dor_next_torus (prephitmp_109, prephitmp_107, in_channel_41(D), &out_port, _69, 0);

  }
  bb_32 (preds = {bb_30 bb_31 }, succs = {bb_33 bb_34 })
  {
    <bb 32>:
    # .MEM_10 = PHI <.MEM_68(30), .MEM_70(31)>
    # VUSE <.MEM_10>
    _71 = f_16(D)->ph;
    if (_71 == 0)
      goto <bb 33>;
    else
      goto <bb 34>;

  }
  bb_33 (preds = {bb_32 }, succs = {bb_35 })
  {
    <bb 33>:
    # VUSE <.MEM_10>
    out_port.131_72 = out_port;
    # .MEM_73 = VDEF <.MEM_10>
    OutputSet::AddRange (outputs_32(D), out_port.131_72, vcBegin_1, vcBegin_1, 0);
    goto <bb 35>;

  }
  bb_34 (preds = {bb_32 }, succs = {bb_35 })
  {
    <bb 34>:
    # VUSE <.MEM_10>
    out_port.131_74 = out_port;
    # .MEM_75 = VDEF <.MEM_10>
    OutputSet::AddRange (outputs_32(D), out_port.131_74, _44, _44, 0);

  }
  bb_35 (preds = {bb_33 bb_34 }, succs = {bb_36 })
  {
    <bb 35>:
    # .MEM_11 = PHI <.MEM_73(33), .MEM_75(34)>
    # .MEM_76 = VDEF <.MEM_11>
    out_port ={v} {CLOBBER};

  }
  bb_36 (preds = {bb_35 bb_15 }, succs = {bb_40 })
  {
    <bb 36>:
    # .MEM_12 = PHI <.MEM_76(35), .MEM_78(15)>

  }
  bb_40 (preds = {bb_36 }, succs = {bb_1 })
  {
    <bb 40>:
    # VUSE <.MEM_12>
    return;

  }
  bb_37 (preds = {bb_12 }, succs = {bb_15 })
  {
    <bb 37>:
    # .MEM_102 = VDEF <.MEM_13(D)>
    OutputSet::Clear (outputs_32(D));
    goto <bb 15>;

  }
  loop_1 (header = 23, latch = 28, niter = , upper_bound = 2147483647)
  {
    bb_23 (preds = {bb_22 bb_28 }, succs = {bb_24 bb_27 })
    {
      <bb 23>:
      # cur_94 = PHI <prephitmp_109(22), cur_62(28)>
      # dest_86 = PHI <prephitmp_107(22), dest_63(28)>
      # n_96 = PHI <0(22), n_64(28)>
      # .MEM_85 = PHI <.MEM_7(22), .MEM_9(28)>
      # prephitmp_117 = PHI <pretmp_116(22), prephitmp_129(28)>
      # prephitmp_126 = PHI <gN.129_39(22), prephitmp_134(28)>
      # DEBUG n => n_96
      # DEBUG dest => dest_86
      # DEBUG cur => cur_94
      _47 = cur_94 % prephitmp_117;
      _48 = dest_86 % prephitmp_117;
      if (_47 != _48)
        goto <bb 24>;
      else
        goto <bb 27>;

    }
    bb_24 (preds = {bb_23 }, succs = {bb_25 bb_26 })
    {
      <bb 24>:
      _49 = _48 - _47;
      _50 = _49 + prephitmp_117;
      _51 = _50 % prephitmp_117;
      _52 = _51 * -2;
      dist2_53 = _52 + prephitmp_117;
      # DEBUG dist2 => dist2_53
      if (dist2_53 > 0)
        goto <bb 25>;
      else
        goto <bb 26>;

    }
    bb_25 (preds = {bb_24 }, succs = {bb_27 })
    {
      <bb 25>:
      _58 = vcBegin_1 + 3;
      _59 = n_96 * 2;
      # .MEM_60 = VDEF <.MEM_85>
      OutputSet::AddRange (outputs_32(D), _59, _58, _58, 1);
      # VUSE <.MEM_60>
      pretmp_128 = gK;
      # VUSE <.MEM_60>
      pretmp_133 = gN;
      goto <bb 27>;

    }
    bb_26 (preds = {bb_24 }, succs = {bb_27 })
    {
      <bb 26>:
      _54 = vcBegin_1 + 3;
      _55 = n_96 * 2;
      _56 = _55 + 1;
      # .MEM_57 = VDEF <.MEM_85>
      OutputSet::AddRange (outputs_32(D), _56, _54, _54, 1);
      # VUSE <.MEM_57>
      pretmp_127 = gK;
      # VUSE <.MEM_57>
      pretmp_132 = gN;

    }
    bb_27 (preds = {bb_23 bb_26 bb_25 }, succs = {bb_29 bb_28 })
    {
      <bb 27>:
      # .MEM_9 = PHI <.MEM_85(23), .MEM_57(26), .MEM_60(25)>
      # prephitmp_129 = PHI <prephitmp_117(23), pretmp_127(26), pretmp_128(25)>
      # prephitmp_134 = PHI <prephitmp_126(23), pretmp_132(26), pretmp_133(25)>
      cur_62 = cur_94 / prephitmp_129;
      # DEBUG cur => cur_62
      dest_63 = dest_86 / prephitmp_129;
      # DEBUG dest => dest_63
      n_64 = n_96 + 1;
      # DEBUG n => n_64
      # DEBUG n => n_64
      # DEBUG dest => dest_63
      # DEBUG cur => cur_62
      if (n_64 >= prephitmp_134)
        goto <bb 29>;
      else
        goto <bb 28>;

    }
    bb_28 (preds = {bb_27 }, succs = {bb_23 })
    {
      <bb 28>:
      goto <bb 23>;

    }
  }
}

Pass statistics:
----------------

void min_adapt_torus(const Router*, const Flit*, int, OutputSet*, bool) (const struct RouterD.33813 * rD.45733, const struct FlitD.29321 * fD.45734, intD.9 in_channelD.45735, struct OutputSetD.28230 * outputsD.45736, boolD.2757 injectD.45737)
{
  intD.9 dist2D.45748;
  intD.9 nD.45747;
  intD.9 out_portD.45746;
  intD.9 destD.45745;
  intD.9 curD.45744;
  intD.9 in_vcD.45743;
  static const charD.10 _ZZ15min_adapt_torusPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45742[72] = "void min_adapt_torus(const Router*, const Flit*, int, OutputSet*, bool)";
  intD.9 vcBeginD.45740;
  intD.9 gNumVCs.127_14;
  FlitTypeD.29324 _17;
  boolD.2757 _20;
  boolD.2757 _26;
  intD.9 _29;
  intD.9 _35;
  intD.9 gN.129_36;
  intD.9 _37;
  intD.9 gN.129_39;
  intD.9 _40;
  intD.9 _44;
  intD.9 _47;
  intD.9 _48;
  intD.9 _49;
  intD.9 _50;
  intD.9 _51;
  intD.9 _52;
  intD.9 _54;
  intD.9 _55;
  intD.9 _56;
  intD.9 _58;
  intD.9 _59;
  intD.9 * _65;
  intD.9 * _69;
  intD.9 _71;
  intD.9 out_port.131_72;
  intD.9 out_port.131_74;
  const intD.9 _79;
  boolD.2757 _82;
  boolD.2757 _83;
  const intD.9 pretmp_106;
  const intD.9 prephitmp_107;
  const intD.9 pretmp_108;
  const intD.9 prephitmp_109;
  intD.9 pretmp_110;
  intD.9 prephitmp_111;
  const intD.9 pretmp_112;
  const intD.9 prephitmp_113;
  const intD.9 pretmp_114;
  const intD.9 prephitmp_115;
  intD.9 pretmp_116;
  intD.9 prephitmp_117;
  intD.9 prephitmp_126;
  intD.9 pretmp_127;
  intD.9 pretmp_128;
  intD.9 prephitmp_129;
  intD.9 prephitmp_131;
  intD.9 pretmp_132;
  intD.9 pretmp_133;
  intD.9 prephitmp_134;

;;   basic block 2, loop depth 0, count 0, freq 1600, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG vcBeginD.45740 => 0
  # DEBUG D#224ptD.0 => gNumVCsD.42077
  # DEBUG vcEndD.45741 => D#224ptD.0 + -1
  # VUSE <.MEM_13(D)>
  _17 = f_16(D)->typeD.29330;
  if (_17 == 0)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 800, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  vcBegin_18 = gReadReqBeginVCD.42078;
  # DEBUG vcBeginD.45740 => vcBegin_18
  # VUSE <.MEM_13(D)>
  in_vc_19 = gReadReqEndVCD.42079;
  # DEBUG vcEndD.45741 => in_vc_19
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 800, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       2 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_17 == 2)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 224, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  vcBegin_21 = gWriteReqBeginVCD.42080;
  # DEBUG vcBeginD.45740 => vcBegin_21
  # VUSE <.MEM_13(D)>
  in_vc_22 = gWriteReqEndVCD.42081;
  # DEBUG vcEndD.45741 => in_vc_22
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 576, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  if (_17 == 1)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 161, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  vcBegin_24 = gReadReplyBeginVCD.42082;
  # DEBUG vcBeginD.45740 => vcBegin_24
  # VUSE <.MEM_13(D)>
  in_vc_25 = gReadReplyEndVCD.42083;
  # DEBUG vcEndD.45741 => in_vc_25
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 415, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  gNumVCs.127_14 = gNumVCsD.42077;
  if (_17 == 3)
    goto <bb 10>;
  else
    goto <bb 9>;
;;    succ:       10 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 299, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       8 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  in_vc_15 = gNumVCs.127_14 + -1;
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 116, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [28.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_13(D)>
  vcBegin_27 = gWriteReplyBeginVCD.42084;
  # DEBUG vcBeginD.45740 => vcBegin_27
  # VUSE <.MEM_13(D)>
  in_vc_28 = gWriteReplyEndVCD.42085;
  # DEBUG vcEndD.45741 => in_vc_28
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 1600, maybe hot
;;    prev block 10, next block 42, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # vcBegin_1 = PHI <vcBegin_18(3), vcBegin_21(5), vcBegin_24(7), 0(9), vcBegin_27(10)>
  # in_vc_2 = PHI <in_vc_19(3), in_vc_22(5), in_vc_25(7), in_vc_15(9), in_vc_28(10)>
;;    succ:       42 [100.0%]  (FALLTHRU)

;;   basic block 42, loop depth 0, count 0, freq 1600, maybe hot
;;    prev block 11, next block 12, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU)
  # DEBUG vcEndD.45741 => in_vc_2
  # DEBUG vcBeginD.45740 => vcBegin_1
  # VUSE <.MEM_13(D)>
  _29 = f_16(D)->vcD.29331;
  _82 = in_vc_2 < _29;
  _20 = vcBegin_1 > _29;
  _83 = _20 | _82;
  if (_83 != 0)
    goto <bb 12>;
  else
    goto <bb 14>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 1199, maybe hot
;;   Invalid sum of incoming frequencies 800, should be 1199
;;    prev block 42, next block 13, flags: (NEW, REACHABLE)
;;    pred:       42 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  _26 = _29 >= 0;
  if (_26 >= inject_30(D))
    goto <bb 13>;
  else
    goto <bb 37>;
;;    succ:       13 [0.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 1, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       12 [0.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_31 = VDEF <.MEM_13(D)>
  # USE = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  __assert_failD.9858 ("((f->vc >= vcBegin) && (f->vc <= vcEnd)) || (inject && (f->vc < 0))", "routefunc.cpp", 1734, &_ZZ15min_adapt_torusPK6RouterPK4FlitiP9OutputSetbE19__PRETTY_FUNCTION__D.45742);
;;    succ:      

;;   basic block 14, loop depth 0, count 0, freq 400, maybe hot
;;   Invalid sum of incoming frequencies 800, should be 400
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       42 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_33 = VDEF <.MEM_13(D)>
  # USE = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_32(D));
  if (inject_30(D) != 0)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 (TRUE_VALUE,EXECUTABLE)
;;                16 [100.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 331, maybe hot
;;   Invalid sum of incoming frequencies 1199, should be 331
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 (TRUE_VALUE,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_103 = PHI <.MEM_33(14), .MEM_102(37)>
  # .MEM_77 = VDEF <.MEM_103>
  # USE = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_32(D), -1, vcBegin_1, in_vc_2, 0);
  # .MEM_78 = VDEF <.MEM_77>
  out_portD.45746 ={v} {CLOBBER};
  goto <bb 36>;
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 1268, maybe hot
;;   Invalid sum of incoming frequencies 400, should be 1268
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       14 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_33>
  _79 = MEM[(intD.9 *)r_34(D) + 96B];
  # DEBUG D#14ptD.0 => r_34(D)
  # DEBUG thisD.51524 => D#14ptD.0
  # VUSE <.MEM_33>
  _35 = f_16(D)->destD.29342;
  if (_35 == _79)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [13.7%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [86.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 174, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [13.7%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_33>
  gN.129_36 = gND.33727;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _37 = gN.129_36 * 2;
  # .MEM_38 = VDEF <.MEM_33>
  # USE = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_32(D), _37, vcBegin_1, in_vc_2, 0);
  # VUSE <.MEM_38>
  pretmp_106 = f_16(D)->destD.29342;
  # VUSE <.MEM_38>
  pretmp_108 = MEM[(intD.9 *)r_34(D) + 96B];
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 1268, maybe hot
;;    prev block 17, next block 39, flags: (NEW, REACHABLE)
;;    pred:       16 [86.3%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_7 = PHI <.MEM_33(16), .MEM_38(17)>
  # prephitmp_107 = PHI <_35(16), pretmp_106(17)>
  # prephitmp_109 = PHI <_79(16), pretmp_108(17)>
;;    succ:       39 [100.0%]  (FALLTHRU)

;;   basic block 39, loop depth 0, count 0, freq 1268, maybe hot
;;    prev block 18, next block 19, flags: (NEW)
;;    pred:       18 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_7>
  gN.129_39 = gND.33727;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _40 = gN.129_39 * 2;
  if (_40 == in_channel_41(D))
    goto <bb 20>;
  else
    goto <bb 19>;
;;    succ:       20 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [72.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 913, maybe hot
;;    prev block 39, next block 20, flags: (NEW, REACHABLE)
;;    pred:       39 [72.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7>
  in_vc_42 = f_16(D)->vcD.29331;
  # DEBUG in_vcD.45743 => in_vc_42
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 1268, maybe hot
;;    prev block 19, next block 41, flags: (NEW, REACHABLE)
;;    pred:       39 [28.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # in_vc_3 = PHI <in_vc_2(39), in_vc_42(19)>
;;    succ:       41 [100.0%]  (FALLTHRU)

;;   basic block 41, loop depth 0, count 0, freq 1268, maybe hot
;;    prev block 20, next block 21, flags: (NEW)
;;    pred:       20 [100.0%]  (FALLTHRU)
  # DEBUG in_vcD.45743 => in_vc_3
  # DEBUG D#223ptD.0 => MEM[(intD.9 *)r_34(D) + 96B]
  # DEBUG D#14ptD.0 => r_34(D)
  # DEBUG thisD.51527 => D#14ptD.0
  # DEBUG curD.45744 => NULL
  # DEBUG D#222ptD.0 => f_16(D)->destD.29342
  # DEBUG destD.45745 => D#222ptD.0
  _44 = vcBegin_1 + 1;
  if (in_vc_3 > _44)
    goto <bb 21>;
  else
    goto <bb 31>;
;;    succ:       21 [71.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [29.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 41, next block 22, flags: (NEW, REACHABLE)
;;    pred:       41 [71.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG nD.45747 => 0
  # DEBUG destD.45745 => D#222ptD.0
  # DEBUG curD.45744 => D#223ptD.0
  if (gN.129_39 <= 0)
    goto <bb 30>;
  else
    goto <bb 22>;
;;    succ:       30 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 21, next block 23, flags: (NEW)
;;    pred:       21 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_7>
  pretmp_116 = gKD.33726;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                28 [100.0%]  (FALLTHRU,EXECUTABLE)
  # cur_94 = PHI <prephitmp_109(22), cur_62(28)>
  # dest_86 = PHI <prephitmp_107(22), dest_63(28)>
  # n_96 = PHI <0(22), n_64(28)>
  # .MEM_85 = PHI <.MEM_7(22), .MEM_9(28)>
  # prephitmp_117 = PHI <pretmp_116(22), prephitmp_129(28)>
  # prephitmp_126 = PHI <gN.129_39(22), prephitmp_134(28)>
  # DEBUG nD.45747 => n_96
  # DEBUG destD.45745 => dest_86
  # DEBUG curD.45744 => cur_94
  _47 = cur_94 % prephitmp_117;
  _48 = dest_86 % prephitmp_117;
  if (_47 != _48)
    goto <bb 24>;
  else
    goto <bb 27>;
;;    succ:       24 [72.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [28.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 1, count 0, freq 6552, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [72.0%]  (TRUE_VALUE,EXECUTABLE)
  _49 = _48 - _47;
  _50 = _49 + prephitmp_117;
  _51 = _50 % prephitmp_117;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _52 = _51 * -2;
  dist2_53 = _52 + prephitmp_117;
  # DEBUG dist2D.45748 => dist2_53
  if (dist2_53 > 0)
    goto <bb 25>;
  else
    goto <bb 26>;
;;    succ:       25 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                26 [27.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 1, count 0, freq 4784, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       24 [73.0%]  (TRUE_VALUE,EXECUTABLE)
  _58 = vcBegin_1 + 3;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _59 = n_96 * 2;
  # .MEM_60 = VDEF <.MEM_85>
  # USE = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_32(D), _59, _58, _58, 1);
  # VUSE <.MEM_60>
  pretmp_128 = gKD.33726;
  # VUSE <.MEM_60>
  pretmp_133 = gND.33727;
  goto <bb 27>;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 1, count 0, freq 1768, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       24 [27.0%]  (FALSE_VALUE,EXECUTABLE)
  _54 = vcBegin_1 + 3;
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  _55 = n_96 * 2;
  # RANGE [-2147483647, 2147483647]
  _56 = _55 + 1;
  # .MEM_57 = VDEF <.MEM_85>
  # USE = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_32(D), _56, _54, _54, 1);
  # VUSE <.MEM_57>
  pretmp_127 = gKD.33726;
  # VUSE <.MEM_57>
  pretmp_132 = gND.33727;
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       23 [28.0%]  (FALSE_VALUE,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                25 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_9 = PHI <.MEM_85(23), .MEM_57(26), .MEM_60(25)>
  # prephitmp_129 = PHI <prephitmp_117(23), pretmp_127(26), pretmp_128(25)>
  # prephitmp_134 = PHI <prephitmp_126(23), pretmp_132(26), pretmp_133(25)>
  cur_62 = cur_94 / prephitmp_129;
  # DEBUG curD.45744 => cur_62
  dest_63 = dest_86 / prephitmp_129;
  # DEBUG destD.45745 => dest_63
  n_64 = n_96 + 1;
  # DEBUG nD.45747 => n_64
  # DEBUG nD.45747 => n_64
  # DEBUG destD.45745 => dest_63
  # DEBUG curD.45744 => cur_62
  if (n_64 >= prephitmp_134)
    goto <bb 29>;
  else
    goto <bb 28>;
;;    succ:       29 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 27, next block 29, flags: (NEW)
;;    pred:       27 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 28, next block 38, flags: (NEW)
;;    pred:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # prephitmp_131 = PHI <prephitmp_134(27)>
;;    succ:       38 [100.0%]  (FALLTHRU)

;;   basic block 38, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 29, next block 30, flags: (NEW)
;;    pred:       29 [100.0%]  (FALLTHRU)
  pretmp_110 = prephitmp_131 * 2;
  # VUSE <.MEM_9>
  pretmp_112 = f_16(D)->destD.29342;
  # VUSE <.MEM_9>
  pretmp_114 = MEM[(intD.9 *)r_34(D) + 96B];
;;    succ:       30 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 38, next block 31, flags: (NEW, REACHABLE)
;;    pred:       38 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_95 = PHI <.MEM_9(38), .MEM_7(21)>
  # RANGE [-2147483648, 2147483647] NONZERO 4294967294
  # prephitmp_111 = PHI <pretmp_110(38), _40(21)>
  # prephitmp_113 = PHI <pretmp_112(38), prephitmp_107(21)>
  # prephitmp_115 = PHI <pretmp_114(38), prephitmp_109(21)>
  # PT = nonlocal 
  _65 = &f_16(D)->phD.29348;
  # DEBUG D#14ptD.0 => r_34(D)
  # DEBUG thisD.51530 => D#14ptD.0
  # .MEM_68 = VDEF <.MEM_95>
  # USE = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  _Z14dor_next_torusiiiPiS_bD.45497 (prephitmp_115, prephitmp_113, prephitmp_111, &out_portD.45746, _65, 0);
  goto <bb 32>;
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 368, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       41 [29.0%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal 
  _69 = &f_16(D)->phD.29348;
  # .MEM_70 = VDEF <.MEM_7>
  # USE = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  _Z14dor_next_torusiiiPiS_bD.45497 (prephitmp_109, prephitmp_107, in_channel_41(D), &out_portD.45746, _69, 0);
;;    succ:       32 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 1268, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       30 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_10 = PHI <.MEM_68(30), .MEM_70(31)>
  # VUSE <.MEM_10>
  _71 = f_16(D)->phD.29348;
  if (_71 == 0)
    goto <bb 33>;
  else
    goto <bb 34>;
;;    succ:       33 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 634, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       32 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_10>
  out_port.131_72 = out_portD.45746;
  # .MEM_73 = VDEF <.MEM_10>
  # USE = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_32(D), out_port.131_72, vcBegin_1, vcBegin_1, 0);
  goto <bb 35>;
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 634, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       32 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_10>
  out_port.131_74 = out_portD.45746;
  # .MEM_75 = VDEF <.MEM_10>
  # USE = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  _ZN9OutputSet8AddRangeEiiiiD.28249 (outputs_32(D), out_port.131_74, _44, _44, 0);
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 1268, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       33 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                34 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_11 = PHI <.MEM_73(33), .MEM_75(34)>
  # .MEM_76 = VDEF <.MEM_11>
  out_portD.45746 ={v} {CLOBBER};
;;    succ:       36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 1599, maybe hot
;;    prev block 35, next block 40, flags: (NEW, REACHABLE)
;;    pred:       35 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                15 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_12 = PHI <.MEM_76(35), .MEM_78(15)>
;;    succ:       40 [100.0%]  (FALLTHRU)

;;   basic block 40, loop depth 0, count 0, freq 1599, maybe hot
;;    prev block 36, next block 37, flags: (NEW)
;;    pred:       36 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_12>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 37, loop depth 0, count 0, freq 1199, maybe hot
;;    prev block 40, next block 1, flags: (NEW, REACHABLE)
;;    pred:       12 [100.0%]  (FALSE_VALUE,EXECUTABLE)
  # .MEM_102 = VDEF <.MEM_13(D)>
  # USE = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  # CLB = nonlocal null { D.45742 D.45746 } (nonlocal, escaped)
  _ZN9OutputSet5ClearEvD.28238 (outputs_32(D));
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

}



;; Function int rand_min_intr_mesh(int, int) (_Z18rand_min_intr_meshii, funcdef_no=1976, decl_uid=45570, cgraph_uid=475, symbol_order=486)


Pass statistics:
----------------

int rand_min_intr_mesh(int, int) (intD.9 srcD.45568, intD.9 destD.45569)
{
  intD.9 nD.45575;
  intD.9 offsetD.45574;
  intD.9 intmD.45573;
  intD.9 distD.45572;
  intD.9 pretmp_7;
  intD.9 gN.46_12;
  intD.9 _14;
  intD.9 _15;
  long intD.12 _17;
  intD.9 _18;
  intD.9 _19;
  intD.9 _22;
  intD.9 _23;
  intD.9 gK.47_25;
  long intD.12 _30;
  intD.9 _31;
  long intD.12 _32;
  long intD.12 _33;
  intD.9 _34;
  intD.9 _35;
  long intD.12 _36;
  long intD.12 _37;
  intD.9 _38;
  intD.9 prephitmp_45;
  intD.9 gN.46_46;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG intmD.45573 => 0
  # DEBUG offsetD.45574 => 1
  # DEBUG nD.45575 => 0
  # DEBUG nD.45575 => 0
  # DEBUG offsetD.45574 => 1
  # DEBUG intmD.45573 => 0
  # DEBUG destD.45569 => dest_10(D)
  # DEBUG srcD.45568 => src_9(D)
  # VUSE <.MEM_11(D)>
  gN.46_46 = gND.33727;
  if (gN.46_46 <= 0)
    goto <bb 10>;
  else
    goto <bb 3>;
;;    succ:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  pretmp_7 = gKD.33726;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # src_47 = PHI <src_9(D)(3), src_28(9)>
  # dest_48 = PHI <dest_10(D)(3), dest_27(9)>
  # intm_49 = PHI <0(3), intm_4(9)>
  # offset_51 = PHI <1(3), offset_26(9)>
  # n_52 = PHI <0(3), n_29(9)>
  # .MEM_53 = PHI <.MEM_11(D)(3), .MEM_8(9)>
  # prephitmp_45 = PHI <pretmp_7(3), gK.47_25(9)>
  # DEBUG nD.45575 => n_52
  # DEBUG offsetD.45574 => offset_51
  # DEBUG intmD.45573 => intm_49
  # DEBUG destD.45569 => dest_48
  # DEBUG srcD.45568 => src_47
  _14 = dest_48 % prephitmp_45;
  _15 = src_47 % prephitmp_45;
  dist_16 = _14 - _15;
  # DEBUG distD.45572 => dist_16
  if (dist_16 > 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [27.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 6644, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [73.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG maxD.51533 => dist_16
  # .MEM_21 = VDEF <.MEM_53>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _30 = _Z8ran_nextvD.43987 ();
  # RANGE [2, 2147483647] NONZERO 2147483647
  _31 = dist_16 + 1;
  # RANGE [2, 9223372036854775807] NONZERO 2147483647
  _32 = (long intD.12) _31;
  _33 = _30 % _32;
  _34 = (intD.9) _33;
  _18 = _15 + _34;
  _19 = _18 * offset_51;
  intm_20 = _19 + intm_49;
  # DEBUG intmD.45573 => intm_20
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 2456, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [27.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG maxD.51535 => -dist_16
  # .MEM_39 = VDEF <.MEM_53>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _17 = _Z8ran_nextvD.43987 ();
  # RANGE [1, 2147483647] NONZERO 2147483647
  _35 = 1 - dist_16;
  # RANGE [1, 9223372036854775807] NONZERO 2147483647
  _36 = (long intD.12) _35;
  _37 = _17 % _36;
  _38 = (intD.9) _37;
  _22 = _14 + _38;
  _23 = _22 * offset_51;
  intm_24 = _23 + intm_49;
  # DEBUG intmD.45573 => intm_24
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # intm_4 = PHI <intm_20(5), intm_24(6)>
  # .MEM_8 = PHI <.MEM_21(5), .MEM_39(6)>
  # DEBUG intmD.45573 => intm_4
  # VUSE <.MEM_8>
  gK.47_25 = gKD.33726;
  offset_26 = gK.47_25 * offset_51;
  # DEBUG offsetD.45574 => offset_26
  dest_27 = dest_48 / gK.47_25;
  # DEBUG destD.45569 => dest_27
  src_28 = src_47 / gK.47_25;
  # DEBUG srcD.45568 => src_28
  n_29 = n_52 + 1;
  # DEBUG nD.45575 => n_29
  # DEBUG nD.45575 => n_29
  # DEBUG offsetD.45574 => offset_26
  # DEBUG intmD.45573 => intm_4
  # DEBUG destD.45569 => dest_27
  # DEBUG srcD.45568 => src_28
  # VUSE <.MEM_8>
  gN.46_12 = gND.33727;
  if (gN.46_12 <= n_29)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # intm_43 = PHI <intm_4(7)>
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 8, next block 10, flags: (NEW)
;;    pred:       7 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 9, next block 1, flags: (NEW, REACHABLE)
;;    pred:       8 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # intm_50 = PHI <intm_43(8), 0(2)>
  # .MEM_54 = PHI <.MEM_8(8), .MEM_11(D)(2)>
  # VUSE <.MEM_54>
  return intm_50;
;;    succ:       EXIT [100.0%] 

}


Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gK
analyze_innermost: success.
	base_address: &gK
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gK
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN
Creating dr for gN
analyze_innermost: success.
	base_address: &gN
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: gN

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:2, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:13, LOOPS:1, CONDITIONS:3, STMTS:59)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_10 bb_3 })
  {
    <bb 2>:
    # DEBUG intm => 0
    # DEBUG offset => 1
    # DEBUG n => 0
    # DEBUG n => 0
    # DEBUG offset => 1
    # DEBUG intm => 0
    # DEBUG dest => dest_10(D)
    # DEBUG src => src_9(D)
    # VUSE <.MEM_11(D)>
    gN.46_46 = gN;
    if (gN.46_46 <= 0)
      goto <bb 10>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_4 })
  {
    <bb 3>:
    # VUSE <.MEM_11(D)>
    pretmp_7 = gK;

  }
  bb_8 (preds = {bb_7 }, succs = {bb_11 })
  {
    <bb 8>:
    # intm_43 = PHI <intm_4(7)>

  }
  bb_11 (preds = {bb_8 }, succs = {bb_10 })
  {
    <bb 11>:
    goto <bb 10>;

  }
  bb_10 (preds = {bb_11 bb_2 }, succs = {bb_12 })
  {
    <bb 10>:
    # intm_50 = PHI <intm_43(11), 0(2)>
    # .MEM_54 = PHI <.MEM_8(11), .MEM_11(D)(2)>

  }
  bb_12 (preds = {bb_10 }, succs = {bb_1 })
  {
    <bb 12>:
    # VUSE <.MEM_54>
    return intm_50;

  }
  loop_1 (header = 4, latch = 9, niter = , upper_bound = 2147483647)
  {
    bb_4 (preds = {bb_3 bb_9 }, succs = {bb_5 bb_6 })
    {
      <bb 4>:
      # src_47 = PHI <src_9(D)(3), src_28(9)>
      # dest_48 = PHI <dest_10(D)(3), dest_27(9)>
      # intm_49 = PHI <0(3), intm_4(9)>
      # offset_51 = PHI <1(3), offset_26(9)>
      # n_52 = PHI <0(3), n_29(9)>
      # .MEM_53 = PHI <.MEM_11(D)(3), .MEM_8(9)>
      # prephitmp_45 = PHI <pretmp_7(3), gK.47_25(9)>
      # DEBUG n => n_52
      # DEBUG offset => offset_51
      # DEBUG intm => intm_49
      # DEBUG dest => dest_48
      # DEBUG src => src_47
      _14 = dest_48 % prephitmp_45;
      _15 = src_47 % prephitmp_45;
      dist_16 = _14 - _15;
      # DEBUG dist => dist_16
      if (dist_16 > 0)
        goto <bb 5>;
      else
        goto <bb 6>;

    }
    bb_5 (preds = {bb_4 }, succs = {bb_7 })
    {
      <bb 5>:
      # DEBUG max => dist_16
      # .MEM_21 = VDEF <.MEM_53>
      _30 = ran_next ();
      _31 = dist_16 + 1;
      _32 = (long int) _31;
      _33 = _30 % _32;
      _34 = (int) _33;
      _18 = _15 + _34;
      _19 = _18 * offset_51;
      intm_20 = _19 + intm_49;
      # DEBUG intm => intm_20
      goto <bb 7>;

    }
    bb_6 (preds = {bb_4 }, succs = {bb_7 })
    {
      <bb 6>:
      # DEBUG max => -dist_16
      # .MEM_39 = VDEF <.MEM_53>
      _17 = ran_next ();
      _35 = 1 - dist_16;
      _36 = (long int) _35;
      _37 = _17 % _36;
      _38 = (int) _37;
      _22 = _14 + _38;
      _23 = _22 * offset_51;
      intm_24 = _23 + intm_49;
      # DEBUG intm => intm_24

    }
    bb_7 (preds = {bb_5 bb_6 }, succs = {bb_8 bb_9 })
    {
      <bb 7>:
      # intm_4 = PHI <intm_20(5), intm_24(6)>
      # .MEM_8 = PHI <.MEM_21(5), .MEM_39(6)>
      # DEBUG intm => intm_4
      # VUSE <.MEM_8>
      gK.47_25 = gK;
      offset_26 = gK.47_25 * offset_51;
      # DEBUG offset => offset_26
      dest_27 = dest_48 / gK.47_25;
      # DEBUG dest => dest_27
      src_28 = src_47 / gK.47_25;
      # DEBUG src => src_28
      n_29 = n_52 + 1;
      # DEBUG n => n_29
      # DEBUG n => n_29
      # DEBUG offset => offset_26
      # DEBUG intm => intm_4
      # DEBUG dest => dest_27
      # DEBUG src => src_28
      # VUSE <.MEM_8>
      gN.46_12 = gN;
      if (gN.46_12 <= n_29)
        goto <bb 8>;
      else
        goto <bb 9>;

    }
    bb_9 (preds = {bb_7 }, succs = {bb_4 })
    {
      <bb 9>:
      goto <bb 4>;

    }
  }
}

Pass statistics:
----------------

int rand_min_intr_mesh(int, int) (intD.9 srcD.45568, intD.9 destD.45569)
{
  intD.9 nD.45575;
  intD.9 offsetD.45574;
  intD.9 intmD.45573;
  intD.9 distD.45572;
  intD.9 pretmp_7;
  intD.9 gN.46_12;
  intD.9 _14;
  intD.9 _15;
  long intD.12 _17;
  intD.9 _18;
  intD.9 _19;
  intD.9 _22;
  intD.9 _23;
  intD.9 gK.47_25;
  long intD.12 _30;
  intD.9 _31;
  long intD.12 _32;
  long intD.12 _33;
  intD.9 _34;
  intD.9 _35;
  long intD.12 _36;
  long intD.12 _37;
  intD.9 _38;
  intD.9 prephitmp_45;
  intD.9 gN.46_46;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG intmD.45573 => 0
  # DEBUG offsetD.45574 => 1
  # DEBUG nD.45575 => 0
  # DEBUG nD.45575 => 0
  # DEBUG offsetD.45574 => 1
  # DEBUG intmD.45573 => 0
  # DEBUG destD.45569 => dest_10(D)
  # DEBUG srcD.45568 => src_9(D)
  # VUSE <.MEM_11(D)>
  gN.46_46 = gND.33727;
  if (gN.46_46 <= 0)
    goto <bb 10>;
  else
    goto <bb 3>;
;;    succ:       10 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_11(D)>
  pretmp_7 = gKD.33726;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # src_47 = PHI <src_9(D)(3), src_28(9)>
  # dest_48 = PHI <dest_10(D)(3), dest_27(9)>
  # intm_49 = PHI <0(3), intm_4(9)>
  # offset_51 = PHI <1(3), offset_26(9)>
  # n_52 = PHI <0(3), n_29(9)>
  # .MEM_53 = PHI <.MEM_11(D)(3), .MEM_8(9)>
  # prephitmp_45 = PHI <pretmp_7(3), gK.47_25(9)>
  # DEBUG nD.45575 => n_52
  # DEBUG offsetD.45574 => offset_51
  # DEBUG intmD.45573 => intm_49
  # DEBUG destD.45569 => dest_48
  # DEBUG srcD.45568 => src_47
  _14 = dest_48 % prephitmp_45;
  _15 = src_47 % prephitmp_45;
  dist_16 = _14 - _15;
  # DEBUG distD.45572 => dist_16
  if (dist_16 > 0)
    goto <bb 5>;
  else
    goto <bb 6>;
;;    succ:       5 [73.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [27.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 6644, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       4 [73.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG maxD.51533 => dist_16
  # .MEM_21 = VDEF <.MEM_53>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _30 = _Z8ran_nextvD.43987 ();
  # RANGE [2, 2147483647] NONZERO 2147483647
  _31 = dist_16 + 1;
  # RANGE [2, 9223372036854775807] NONZERO 2147483647
  _32 = (long intD.12) _31;
  _33 = _30 % _32;
  _34 = (intD.9) _33;
  _18 = _15 + _34;
  _19 = _18 * offset_51;
  intm_20 = _19 + intm_49;
  # DEBUG intmD.45573 => intm_20
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 2456, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       4 [27.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG maxD.51535 => -dist_16
  # .MEM_39 = VDEF <.MEM_53>
  # USE = nonlocal null 
  # CLB = nonlocal null 
  _17 = _Z8ran_nextvD.43987 ();
  # RANGE [1, 2147483647] NONZERO 2147483647
  _35 = 1 - dist_16;
  # RANGE [1, 9223372036854775807] NONZERO 2147483647
  _36 = (long intD.12) _35;
  _37 = _17 % _36;
  _38 = (intD.9) _37;
  _22 = _14 + _38;
  _23 = _22 * offset_51;
  intm_24 = _23 + intm_49;
  # DEBUG intmD.45573 => intm_24
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # intm_4 = PHI <intm_20(5), intm_24(6)>
  # .MEM_8 = PHI <.MEM_21(5), .MEM_39(6)>
  # DEBUG intmD.45573 => intm_4
  # VUSE <.MEM_8>
  gK.47_25 = gKD.33726;
  offset_26 = gK.47_25 * offset_51;
  # DEBUG offsetD.45574 => offset_26
  dest_27 = dest_48 / gK.47_25;
  # DEBUG destD.45569 => dest_27
  src_28 = src_47 / gK.47_25;
  # DEBUG srcD.45568 => src_28
  n_29 = n_52 + 1;
  # DEBUG nD.45575 => n_29
  # DEBUG nD.45575 => n_29
  # DEBUG offsetD.45574 => offset_26
  # DEBUG intmD.45573 => intm_4
  # DEBUG destD.45569 => dest_27
  # DEBUG srcD.45568 => src_28
  # VUSE <.MEM_8>
  gN.46_12 = gND.33727;
  if (gN.46_12 <= n_29)
    goto <bb 8>;
  else
    goto <bb 9>;
;;    succ:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 7, next block 11, flags: (NEW)
;;    pred:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # intm_43 = PHI <intm_4(7)>
;;    succ:       11 [100.0%]  (FALLTHRU)

;;   basic block 11, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 8, next block 9, flags: (NEW)
;;    pred:       8 [100.0%]  (FALLTHRU)
  goto <bb 10>;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 11, next block 10, flags: (NEW)
;;    pred:       7 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 9, next block 12, flags: (NEW, REACHABLE)
;;    pred:       11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # intm_50 = PHI <intm_43(11), 0(2)>
  # .MEM_54 = PHI <.MEM_8(11), .MEM_11(D)(2)>
;;    succ:       12 [100.0%]  (FALLTHRU)

;;   basic block 12, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 10, next block 1, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_54>
  return intm_50;
;;    succ:       EXIT [100.0%] 

}



;; Function void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)>; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >*] (_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPK6RouterPK4FlitiP9OutputSetbEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_E, funcdef_no=2120, decl_uid=44859, cgraph_uid=619, symbol_order=630)


Pass statistics:
----------------

void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)>; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >*] (struct _Rb_treeD.44499 * const thisD.44860, struct _Rb_tree_nodeD.44503 * __xD.44861)
{
  struct _Rb_tree_nodeD.44503 * __xD.55727;
  struct _Rb_tree_nodeD.44503 * __xD.55694;
  struct _Rb_tree_nodeD.44503 * __xD.55661;
  struct _Rb_tree_nodeD.44503 * __xD.55628;
  struct _Rb_tree_nodeD.44503 * __xD.55595;
  struct _Rb_tree_nodeD.44503 * __xD.55562;
  struct _Rb_tree_nodeD.44503 * __xD.55529;
  struct _Rb_tree_nodeD.44503 * __xD.55496;
  charD.10 * const _7;
  charD.10 * const _11;
  const charD.10 * _12;
  const charD.10 * _16;
  charD.10 * const _21;
  const charD.10 * _22;
  charD.10 * const _27;
  const charD.10 * _28;
  charD.10 * const _33;
  const charD.10 * _34;
  charD.10 * const _39;
  const charD.10 * _40;
  charD.10 * const _45;
  const charD.10 * _46;
  charD.10 * const _51;
  const charD.10 * _52;
  struct _Rb_tree_node_baseD.6878 * _54;
  charD.10 * const _57;
  const charD.10 * _58;

;;   basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __xD.44861 => __x_3(D)
  if (__x_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                55 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_80 = PHI <.MEM_4(D)(2), .MEM_131(55)>
  # VUSE <.MEM_80>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                56 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_149 = PHI <__x_3(D)(4), __x_10(56)>
  # .MEM_150 = PHI <.MEM_4(D)(4), .MEM_131(56)>
  # DEBUG __xD.44861 => __x_149
  # VUSE <.MEM_150>
  # PT = nonlocal escaped 
  __x_9 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_149 + 24B];
  # DEBUG D#36ptD.0 => __x_149
  # DEBUG __xD.52428 => D#36ptD.0
  # DEBUG thisD.55495 => this_6(D)
  # DEBUG __xD.55496 => __x_9
  # DEBUG __xD.55496 => __x_9
  if (__x_9 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                52 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_79 = PHI <.MEM_150(5), .MEM_124(52)>
  # VUSE <.MEM_79>
  # PT = nonlocal escaped 
  __x_10 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_149 + 16B];
  # DEBUG D#37ptD.0 => __x_149
  # DEBUG __xD.52425 => D#37ptD.0
  # DEBUG __yD.46634 => NULL
  # DEBUG D#91ptD.0 => this_6(D)
  # DEBUG __pD.55465 => __x_149
  # DEBUG thisD.55466 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#88ptD.0 => D#89ptD.0
  # DEBUG __pD.55468 => __x_149
  # DEBUG thisD.55467 => D#88ptD.0
  # DEBUG D#87ptD.0 => D#88ptD.0
  # DEBUG thisD.52337 => __x_149
  # DEBUG D#86ptD.0 => &__x_149->_M_value_fieldD.46493
  # DEBUG __rD.51667 => D#86ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG thisD.52329 => D#85ptD.0
  # DEBUG D#84ptD.0 => D#85ptD.0
  # DEBUG thisD.52305 => D#84ptD.0
  # DEBUG thisD.52297 => NULL
  # DEBUG D.52298 => NULL
  # DEBUG thisD.52295 => NULL
  # DEBUG __pD.55470 => D#86ptD.0
  # DEBUG thisD.55469 => D#61ptD.0
  # DEBUG thisD.55471 => D#86ptD.0
  # DEBUG D#56ptD.0 => &D#86ptD.0->firstD.46174
  # DEBUG thisD.55472 => D#56ptD.0
  # DEBUG thisD.55473 => D#56ptD.0
  # DEBUG thisD.55482 => D#56ptD.0
  # VUSE <.MEM_79>
  # PT = nonlocal escaped 
  _11 = MEM[(charD.10 * *)__x_149 + 32B];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.55483 => D#56ptD.0
  # PT = nonlocal escaped 
  _12 = &MEM[(const struct basic_stringD.9877 *)__x_149 + 32B].D.14356._M_local_bufD.14358;
  if (_11 != _12)
    goto <bb 54>;
  else
    goto <bb 55>;
;;    succ:       54 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                55 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                53 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_152 = PHI <__x_9(7), __x_14(53)>
  # .MEM_174 = PHI <.MEM_150(7), .MEM_124(53)>
  # DEBUG __xD.55496 => __x_152
  # VUSE <.MEM_174>
  # PT = nonlocal escaped 
  __x_13 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_152 + 24B];
  # DEBUG D#36ptD.0 => __x_152
  # DEBUG __xD.52428 => D#36ptD.0
  # DEBUG thisD.55528 => this_6(D)
  # DEBUG __xD.55529 => __x_13
  # DEBUG __xD.55529 => __x_13
  if (__x_13 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                49 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_78 = PHI <.MEM_174(8), .MEM_117(49)>
  # VUSE <.MEM_78>
  # PT = nonlocal escaped 
  __x_14 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_152 + 16B];
  # DEBUG D#37ptD.0 => __x_152
  # DEBUG __xD.52425 => D#37ptD.0
  # DEBUG __yD.55497 => NULL
  # DEBUG D#91ptD.0 => this_6(D)
  # DEBUG __pD.55498 => __x_152
  # DEBUG thisD.55499 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#88ptD.0 => D#89ptD.0
  # DEBUG __pD.55501 => __x_152
  # DEBUG thisD.55500 => D#88ptD.0
  # DEBUG D#87ptD.0 => D#88ptD.0
  # DEBUG thisD.52337 => __x_152
  # DEBUG D#86ptD.0 => &__x_152->_M_value_fieldD.46493
  # DEBUG __rD.51667 => D#86ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG thisD.52329 => D#85ptD.0
  # DEBUG D#84ptD.0 => D#85ptD.0
  # DEBUG thisD.52305 => D#84ptD.0
  # DEBUG thisD.52297 => NULL
  # DEBUG D.52298 => NULL
  # DEBUG thisD.52295 => NULL
  # DEBUG __pD.55503 => D#86ptD.0
  # DEBUG thisD.55502 => D#61ptD.0
  # DEBUG thisD.55504 => D#86ptD.0
  # DEBUG D#56ptD.0 => &D#86ptD.0->firstD.46174
  # DEBUG thisD.55505 => D#56ptD.0
  # DEBUG thisD.55506 => D#56ptD.0
  # DEBUG thisD.55515 => D#56ptD.0
  # VUSE <.MEM_78>
  # PT = nonlocal escaped 
  _7 = MEM[(charD.10 * *)__x_152 + 32B];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.55516 => D#56ptD.0
  # PT = nonlocal escaped 
  _16 = &MEM[(const struct basic_stringD.9877 *)__x_152 + 32B].D.14356._M_local_bufD.14358;
  if (_7 != _16)
    goto <bb 51>;
  else
    goto <bb 52>;
;;    succ:       51 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                52 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                50 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_155 = PHI <__x_13(10), __x_19(50)>
  # .MEM_171 = PHI <.MEM_174(10), .MEM_117(50)>
  # DEBUG __xD.55529 => __x_155
  # VUSE <.MEM_171>
  # PT = nonlocal escaped 
  __x_18 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_155 + 24B];
  # DEBUG D#36ptD.0 => __x_155
  # DEBUG __xD.52428 => D#36ptD.0
  # DEBUG thisD.55561 => this_6(D)
  # DEBUG __xD.55562 => __x_18
  # DEBUG __xD.55562 => __x_18
  if (__x_18 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;
;;    succ:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                46 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_77 = PHI <.MEM_171(11), .MEM_110(46)>
  # VUSE <.MEM_77>
  # PT = nonlocal escaped 
  __x_19 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_155 + 16B];
  # DEBUG D#37ptD.0 => __x_155
  # DEBUG __xD.52425 => D#37ptD.0
  # DEBUG __yD.55530 => NULL
  # DEBUG D#91ptD.0 => this_6(D)
  # DEBUG __pD.55531 => __x_155
  # DEBUG thisD.55532 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#88ptD.0 => D#89ptD.0
  # DEBUG __pD.55534 => __x_155
  # DEBUG thisD.55533 => D#88ptD.0
  # DEBUG D#87ptD.0 => D#88ptD.0
  # DEBUG thisD.52337 => __x_155
  # DEBUG D#86ptD.0 => &__x_155->_M_value_fieldD.46493
  # DEBUG __rD.51667 => D#86ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG thisD.52329 => D#85ptD.0
  # DEBUG D#84ptD.0 => D#85ptD.0
  # DEBUG thisD.52305 => D#84ptD.0
  # DEBUG thisD.52297 => NULL
  # DEBUG D.52298 => NULL
  # DEBUG thisD.52295 => NULL
  # DEBUG __pD.55536 => D#86ptD.0
  # DEBUG thisD.55535 => D#61ptD.0
  # DEBUG thisD.55537 => D#86ptD.0
  # DEBUG D#56ptD.0 => &D#86ptD.0->firstD.46174
  # DEBUG thisD.55538 => D#56ptD.0
  # DEBUG thisD.55539 => D#56ptD.0
  # DEBUG thisD.55548 => D#56ptD.0
  # VUSE <.MEM_77>
  # PT = nonlocal escaped 
  _21 = MEM[(charD.10 * *)__x_155 + 32B];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.55549 => D#56ptD.0
  # PT = nonlocal escaped 
  _22 = &MEM[(const struct basic_stringD.9877 *)__x_155 + 32B].D.14356._M_local_bufD.14358;
  if (_21 != _22)
    goto <bb 48>;
  else
    goto <bb 49>;
;;    succ:       48 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                49 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       11 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                47 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_158 = PHI <__x_18(13), __x_25(47)>
  # .MEM_168 = PHI <.MEM_171(13), .MEM_110(47)>
  # DEBUG __xD.55562 => __x_158
  # VUSE <.MEM_168>
  # PT = nonlocal escaped 
  __x_24 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_158 + 24B];
  # DEBUG D#36ptD.0 => __x_158
  # DEBUG __xD.52428 => D#36ptD.0
  # DEBUG thisD.55594 => this_6(D)
  # DEBUG __xD.55595 => __x_24
  # DEBUG __xD.55595 => __x_24
  if (__x_24 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                43 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_73 = PHI <.MEM_168(14), .MEM_103(43)>
  # VUSE <.MEM_73>
  # PT = nonlocal escaped 
  __x_25 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_158 + 16B];
  # DEBUG D#37ptD.0 => __x_158
  # DEBUG __xD.52425 => D#37ptD.0
  # DEBUG __yD.55563 => NULL
  # DEBUG D#91ptD.0 => this_6(D)
  # DEBUG __pD.55564 => __x_158
  # DEBUG thisD.55565 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#88ptD.0 => D#89ptD.0
  # DEBUG __pD.55567 => __x_158
  # DEBUG thisD.55566 => D#88ptD.0
  # DEBUG D#87ptD.0 => D#88ptD.0
  # DEBUG thisD.52337 => __x_158
  # DEBUG D#86ptD.0 => &__x_158->_M_value_fieldD.46493
  # DEBUG __rD.51667 => D#86ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG thisD.52329 => D#85ptD.0
  # DEBUG D#84ptD.0 => D#85ptD.0
  # DEBUG thisD.52305 => D#84ptD.0
  # DEBUG thisD.52297 => NULL
  # DEBUG D.52298 => NULL
  # DEBUG thisD.52295 => NULL
  # DEBUG __pD.55569 => D#86ptD.0
  # DEBUG thisD.55568 => D#61ptD.0
  # DEBUG thisD.55570 => D#86ptD.0
  # DEBUG D#56ptD.0 => &D#86ptD.0->firstD.46174
  # DEBUG thisD.55571 => D#56ptD.0
  # DEBUG thisD.55572 => D#56ptD.0
  # DEBUG thisD.55581 => D#56ptD.0
  # VUSE <.MEM_73>
  # PT = nonlocal escaped 
  _27 = MEM[(charD.10 * *)__x_158 + 32B];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.55582 => D#56ptD.0
  # PT = nonlocal escaped 
  _28 = &MEM[(const struct basic_stringD.9877 *)__x_158 + 32B].D.14356._M_local_bufD.14358;
  if (_27 != _28)
    goto <bb 45>;
  else
    goto <bb 46>;
;;    succ:       45 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                46 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       14 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                44 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_161 = PHI <__x_24(16), __x_31(44)>
  # .MEM_165 = PHI <.MEM_168(16), .MEM_103(44)>
  # DEBUG __xD.55595 => __x_161
  # VUSE <.MEM_165>
  # PT = nonlocal escaped 
  __x_30 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_161 + 24B];
  # DEBUG D#36ptD.0 => __x_161
  # DEBUG __xD.52428 => D#36ptD.0
  # DEBUG thisD.55627 => this_6(D)
  # DEBUG __xD.55628 => __x_30
  # DEBUG __xD.55628 => __x_30
  if (__x_30 == 0B)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_72 = PHI <.MEM_165(17), .MEM_96(40)>
  # VUSE <.MEM_72>
  # PT = nonlocal escaped 
  __x_31 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_161 + 16B];
  # DEBUG D#37ptD.0 => __x_161
  # DEBUG __xD.52425 => D#37ptD.0
  # DEBUG __yD.55596 => NULL
  # DEBUG D#91ptD.0 => this_6(D)
  # DEBUG __pD.55597 => __x_161
  # DEBUG thisD.55598 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#88ptD.0 => D#89ptD.0
  # DEBUG __pD.55600 => __x_161
  # DEBUG thisD.55599 => D#88ptD.0
  # DEBUG D#87ptD.0 => D#88ptD.0
  # DEBUG thisD.52337 => __x_161
  # DEBUG D#86ptD.0 => &__x_161->_M_value_fieldD.46493
  # DEBUG __rD.51667 => D#86ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG thisD.52329 => D#85ptD.0
  # DEBUG D#84ptD.0 => D#85ptD.0
  # DEBUG thisD.52305 => D#84ptD.0
  # DEBUG thisD.52297 => NULL
  # DEBUG D.52298 => NULL
  # DEBUG thisD.52295 => NULL
  # DEBUG __pD.55602 => D#86ptD.0
  # DEBUG thisD.55601 => D#61ptD.0
  # DEBUG thisD.55603 => D#86ptD.0
  # DEBUG D#56ptD.0 => &D#86ptD.0->firstD.46174
  # DEBUG thisD.55604 => D#56ptD.0
  # DEBUG thisD.55605 => D#56ptD.0
  # DEBUG thisD.55614 => D#56ptD.0
  # VUSE <.MEM_72>
  # PT = nonlocal escaped 
  _33 = MEM[(charD.10 * *)__x_161 + 32B];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.55615 => D#56ptD.0
  # PT = nonlocal escaped 
  _34 = &MEM[(const struct basic_stringD.9877 *)__x_161 + 32B].D.14356._M_local_bufD.14358;
  if (_33 != _34)
    goto <bb 42>;
  else
    goto <bb 43>;
;;    succ:       42 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                43 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 6, count 0, freq 9, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_162 = PHI <.MEM_165(19), .MEM_96(41)>
  # PT = nonlocal escaped 
  # __x_164 = PHI <__x_30(19), __x_37(41)>
  # DEBUG __xD.55628 => __x_164
  # VUSE <.MEM_162>
  # PT = nonlocal escaped 
  __x_36 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_164 + 24B];
  # DEBUG D#36ptD.0 => __x_164
  # DEBUG __xD.52428 => D#36ptD.0
  # DEBUG thisD.55660 => this_6(D)
  # DEBUG __xD.55661 => __x_36
  # DEBUG __xD.55661 => __x_36
  if (__x_36 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 6, count 0, freq 9, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_71 = PHI <.MEM_162(20), .MEM_89(37)>
  # VUSE <.MEM_71>
  # PT = nonlocal escaped 
  __x_37 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_164 + 16B];
  # DEBUG D#37ptD.0 => __x_164
  # DEBUG __xD.52425 => D#37ptD.0
  # DEBUG __yD.55629 => NULL
  # DEBUG D#91ptD.0 => this_6(D)
  # DEBUG __pD.55630 => __x_164
  # DEBUG thisD.55631 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#88ptD.0 => D#89ptD.0
  # DEBUG __pD.55633 => __x_164
  # DEBUG thisD.55632 => D#88ptD.0
  # DEBUG D#87ptD.0 => D#88ptD.0
  # DEBUG thisD.52337 => __x_164
  # DEBUG D#86ptD.0 => &__x_164->_M_value_fieldD.46493
  # DEBUG __rD.51667 => D#86ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG thisD.52329 => D#85ptD.0
  # DEBUG D#84ptD.0 => D#85ptD.0
  # DEBUG thisD.52305 => D#84ptD.0
  # DEBUG thisD.52297 => NULL
  # DEBUG D.52298 => NULL
  # DEBUG thisD.52295 => NULL
  # DEBUG __pD.55635 => D#86ptD.0
  # DEBUG thisD.55634 => D#61ptD.0
  # DEBUG thisD.55636 => D#86ptD.0
  # DEBUG D#56ptD.0 => &D#86ptD.0->firstD.46174
  # DEBUG thisD.55637 => D#56ptD.0
  # DEBUG thisD.55638 => D#56ptD.0
  # DEBUG thisD.55647 => D#56ptD.0
  # VUSE <.MEM_71>
  # PT = nonlocal escaped 
  _39 = MEM[(charD.10 * *)__x_164 + 32B];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.55648 => D#56ptD.0
  # PT = nonlocal escaped 
  _40 = &MEM[(const struct basic_stringD.9877 *)__x_164 + 32B].D.14356._M_local_bufD.14358;
  if (_39 != _40)
    goto <bb 39>;
  else
    goto <bb 40>;
;;    succ:       39 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 21, next block 23, flags: (NEW)
;;    pred:       20 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 7, count 0, freq 89, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_159 = PHI <.MEM_162(22), .MEM_89(38)>
  # PT = nonlocal escaped 
  # __x_167 = PHI <__x_36(22), __x_43(38)>
  # DEBUG __xD.55661 => __x_167
  # VUSE <.MEM_159>
  # PT = nonlocal escaped 
  __x_42 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_167 + 24B];
  # DEBUG D#36ptD.0 => __x_167
  # DEBUG __xD.52428 => D#36ptD.0
  # DEBUG thisD.55693 => this_6(D)
  # DEBUG __xD.55694 => __x_42
  # DEBUG __xD.55694 => __x_42
  if (__x_42 == 0B)
    goto <bb 24>;
  else
    goto <bb 25>;
;;    succ:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 7, count 0, freq 89, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_70 = PHI <.MEM_159(23), .MEM_82(34)>
  # VUSE <.MEM_70>
  # PT = nonlocal escaped 
  __x_43 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_167 + 16B];
  # DEBUG D#37ptD.0 => __x_167
  # DEBUG __xD.52425 => D#37ptD.0
  # DEBUG __yD.55662 => NULL
  # DEBUG D#91ptD.0 => this_6(D)
  # DEBUG __pD.55663 => __x_167
  # DEBUG thisD.55664 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#88ptD.0 => D#89ptD.0
  # DEBUG __pD.55666 => __x_167
  # DEBUG thisD.55665 => D#88ptD.0
  # DEBUG D#87ptD.0 => D#88ptD.0
  # DEBUG thisD.52337 => __x_167
  # DEBUG D#86ptD.0 => &__x_167->_M_value_fieldD.46493
  # DEBUG __rD.51667 => D#86ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG thisD.52329 => D#85ptD.0
  # DEBUG D#84ptD.0 => D#85ptD.0
  # DEBUG thisD.52305 => D#84ptD.0
  # DEBUG thisD.52297 => NULL
  # DEBUG D.52298 => NULL
  # DEBUG thisD.52295 => NULL
  # DEBUG __pD.55668 => D#86ptD.0
  # DEBUG thisD.55667 => D#61ptD.0
  # DEBUG thisD.55669 => D#86ptD.0
  # DEBUG D#56ptD.0 => &D#86ptD.0->firstD.46174
  # DEBUG thisD.55670 => D#56ptD.0
  # DEBUG thisD.55671 => D#56ptD.0
  # DEBUG thisD.55680 => D#56ptD.0
  # VUSE <.MEM_70>
  # PT = nonlocal escaped 
  _45 = MEM[(charD.10 * *)__x_167 + 32B];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.55681 => D#56ptD.0
  # PT = nonlocal escaped 
  _46 = &MEM[(const struct basic_stringD.9877 *)__x_167 + 32B].D.14356._M_local_bufD.14358;
  if (_45 != _46)
    goto <bb 36>;
  else
    goto <bb 37>;
;;    succ:       36 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 24, next block 26, flags: (NEW)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 8, count 0, freq 900, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_156 = PHI <.MEM_159(25), .MEM_82(35)>
  # PT = nonlocal escaped 
  # __x_170 = PHI <__x_42(25), __x_49(35)>
  # DEBUG __xD.55694 => __x_170
  # VUSE <.MEM_156>
  # PT = nonlocal escaped 
  __x_48 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_170 + 24B];
  # DEBUG D#36ptD.0 => __x_170
  # DEBUG __xD.52428 => D#36ptD.0
  # DEBUG thisD.55726 => this_6(D)
  # DEBUG __xD.55727 => __x_48
  # DEBUG __xD.55727 => __x_48
  if (__x_48 == 0B)
    goto <bb 27>;
  else
    goto <bb 28>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 8, count 0, freq 900, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       26 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_84 = PHI <.MEM_156(26), .MEM_75(31)>
  # VUSE <.MEM_84>
  # PT = nonlocal escaped 
  __x_49 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_170 + 16B];
  # DEBUG D#37ptD.0 => __x_170
  # DEBUG __xD.52425 => D#37ptD.0
  # DEBUG __yD.55695 => NULL
  # DEBUG D#91ptD.0 => this_6(D)
  # DEBUG __pD.55696 => __x_170
  # DEBUG thisD.55697 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#88ptD.0 => D#89ptD.0
  # DEBUG __pD.55699 => __x_170
  # DEBUG thisD.55698 => D#88ptD.0
  # DEBUG D#87ptD.0 => D#88ptD.0
  # DEBUG thisD.52337 => __x_170
  # DEBUG D#86ptD.0 => &__x_170->_M_value_fieldD.46493
  # DEBUG __rD.51667 => D#86ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG thisD.52329 => D#85ptD.0
  # DEBUG D#84ptD.0 => D#85ptD.0
  # DEBUG thisD.52305 => D#84ptD.0
  # DEBUG thisD.52297 => NULL
  # DEBUG D.52298 => NULL
  # DEBUG thisD.52295 => NULL
  # DEBUG __pD.55701 => D#86ptD.0
  # DEBUG thisD.55700 => D#61ptD.0
  # DEBUG thisD.55702 => D#86ptD.0
  # DEBUG D#56ptD.0 => &D#86ptD.0->firstD.46174
  # DEBUG thisD.55703 => D#56ptD.0
  # DEBUG thisD.55704 => D#56ptD.0
  # DEBUG thisD.55713 => D#56ptD.0
  # VUSE <.MEM_84>
  # PT = nonlocal escaped 
  _51 = MEM[(charD.10 * *)__x_170 + 32B];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.55714 => D#56ptD.0
  # PT = nonlocal escaped 
  _52 = &MEM[(const struct basic_stringD.9877 *)__x_170 + 32B].D.14356._M_local_bufD.14358;
  if (_51 != _52)
    goto <bb 33>;
  else
    goto <bb 34>;
;;    succ:       33 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 27, next block 29, flags: (NEW)
;;    pred:       26 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 9, count 0, freq 9100, maybe hot
;;    prev block 28, next block 30, flags: (NEW)
;;    pred:       28 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_153 = PHI <.MEM_156(28), .MEM_75(32)>
  # PT = nonlocal escaped 
  # __x_173 = PHI <__x_48(28), __x_55(32)>
  # DEBUG __xD.55727 => __x_173
  # VUSE <.MEM_153>
  # PT = nonlocal escaped 
  _54 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_173 + 24B];
  # DEBUG D#36ptD.0 => __x_173
  # DEBUG __xD.52428 => D#36ptD.0
  # .MEM_68 = VDEF <.MEM_153>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPK6RouterPK4FlitiP9OutputSetbEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_ED.44859 (this_6(D), _54);
  # VUSE <.MEM_68>
  # PT = nonlocal escaped 
  __x_55 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_173 + 16B];
  # DEBUG D#37ptD.0 => __x_173
  # DEBUG __xD.52425 => D#37ptD.0
  # DEBUG __yD.55728 => NULL
  # DEBUG D#91ptD.0 => this_6(D)
  # DEBUG __pD.55729 => __x_173
  # DEBUG thisD.55730 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#88ptD.0 => D#89ptD.0
  # DEBUG __pD.55732 => __x_173
  # DEBUG thisD.55731 => D#88ptD.0
  # DEBUG D#87ptD.0 => D#88ptD.0
  # DEBUG thisD.52337 => __x_173
  # DEBUG D#86ptD.0 => &__x_173->_M_value_fieldD.46493
  # DEBUG __rD.51667 => D#86ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG thisD.52329 => D#85ptD.0
  # DEBUG D#84ptD.0 => D#85ptD.0
  # DEBUG thisD.52305 => D#84ptD.0
  # DEBUG thisD.52297 => NULL
  # DEBUG D.52298 => NULL
  # DEBUG thisD.52295 => NULL
  # DEBUG __pD.55734 => D#86ptD.0
  # DEBUG thisD.55733 => D#61ptD.0
  # DEBUG thisD.55735 => D#86ptD.0
  # DEBUG D#56ptD.0 => &D#86ptD.0->firstD.46174
  # DEBUG thisD.55736 => D#56ptD.0
  # DEBUG thisD.55737 => D#56ptD.0
  # DEBUG thisD.55746 => D#56ptD.0
  # VUSE <.MEM_68>
  # PT = nonlocal escaped 
  _57 = MEM[(charD.10 * *)__x_173 + 32B];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.55747 => D#56ptD.0
  # PT = nonlocal escaped 
  _58 = &MEM[(const struct basic_stringD.9877 *)__x_173 + 32B].D.14356._M_local_bufD.14358;
  if (_57 != _58)
    goto <bb 30>;
  else
    goto <bb 31>;
;;    succ:       30 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 9, count 0, freq 7130, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.55739 => D#56ptD.0
  # DEBUG __sizeD.55738 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.55742 => _57
  # DEBUG __aD.55740 => D#49ptD.0
  # DEBUG __nD.55741 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.55745 => _57
  # DEBUG thisD.55743 => D#45ptD.0
  # DEBUG D.55744 => D#46ptD.0
  # .MEM_69 = VDEF <.MEM_68>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_57);
;;    succ:       31 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 31, loop depth 9, count 0, freq 9100, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       29 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_59 = PHI <.MEM_68(29), .MEM_69(30)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.55748 => D#55ptD.0
  # DEBUG thisD.55749 => D#55ptD.0
  # DEBUG thisD.55750 => D#55ptD.0
  # .MEM_74 = VDEF <.MEM_59>
  MEM[(struct  &)__x_173 + 32] ={v} {CLOBBER};
  # DEBUG thisD.52356 => NULL
  # DEBUG thisD.52310 => NULL
  # DEBUG D#82ptD.0 => D#90ptD.0
  # DEBUG __pD.55752 => __x_173
  # DEBUG thisD.55751 => D#82ptD.0
  # DEBUG D#81ptD.0 => D#82ptD.0
  # DEBUG thisD.52268 => D#81ptD.0
  # DEBUG D#80ptD.0 => 1
  # DEBUG __pD.55755 => __x_173
  # DEBUG __aD.55753 => D#79ptD.0
  # DEBUG __nD.55754 => D#80ptD.0
  # DEBUG D#78ptD.0 => D#80ptD.0
  # DEBUG D#77ptD.0 => D#79ptD.0
  # DEBUG D#75ptD.0 => D#77ptD.0
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG __pD.55758 => __x_173
  # DEBUG thisD.55756 => D#75ptD.0
  # DEBUG D.55757 => D#76ptD.0
  # .MEM_75 = VDEF <.MEM_74>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_173);
  # DEBUG __xD.55727 => __x_55
  if (__x_55 == 0B)
    goto <bb 27>;
  else
    goto <bb 32>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 32, loop depth 9, count 0, freq 8281, maybe hot
;;    prev block 31, next block 33, flags: (NEW)
;;    pred:       31 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 33, loop depth 8, count 0, freq 705, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       27 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.55706 => D#56ptD.0
  # DEBUG __sizeD.55705 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.55709 => _51
  # DEBUG __aD.55707 => D#49ptD.0
  # DEBUG __nD.55708 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.55712 => _51
  # DEBUG thisD.55710 => D#45ptD.0
  # DEBUG D.55711 => D#46ptD.0
  # .MEM_76 = VDEF <.MEM_84>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_51);
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 8, count 0, freq 900, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       27 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_60 = PHI <.MEM_84(27), .MEM_76(33)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.55715 => D#55ptD.0
  # DEBUG thisD.55716 => D#55ptD.0
  # DEBUG thisD.55717 => D#55ptD.0
  # .MEM_81 = VDEF <.MEM_60>
  MEM[(struct  &)__x_170 + 32] ={v} {CLOBBER};
  # DEBUG thisD.52356 => NULL
  # DEBUG thisD.52310 => NULL
  # DEBUG D#82ptD.0 => D#90ptD.0
  # DEBUG __pD.55719 => __x_170
  # DEBUG thisD.55718 => D#82ptD.0
  # DEBUG D#81ptD.0 => D#82ptD.0
  # DEBUG thisD.52268 => D#81ptD.0
  # DEBUG D#80ptD.0 => 1
  # DEBUG __pD.55722 => __x_170
  # DEBUG __aD.55720 => D#79ptD.0
  # DEBUG __nD.55721 => D#80ptD.0
  # DEBUG D#78ptD.0 => D#80ptD.0
  # DEBUG D#77ptD.0 => D#79ptD.0
  # DEBUG D#75ptD.0 => D#77ptD.0
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG __pD.55725 => __x_170
  # DEBUG thisD.55723 => D#75ptD.0
  # DEBUG D.55724 => D#76ptD.0
  # .MEM_82 = VDEF <.MEM_81>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_170);
  # DEBUG __xD.55694 => __x_49
  if (__x_49 == 0B)
    goto <bb 24>;
  else
    goto <bb 35>;
;;    succ:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 35, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 34, next block 36, flags: (NEW)
;;    pred:       34 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 36, loop depth 7, count 0, freq 70, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       24 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.55673 => D#56ptD.0
  # DEBUG __sizeD.55672 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.55676 => _45
  # DEBUG __aD.55674 => D#49ptD.0
  # DEBUG __nD.55675 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.55679 => _45
  # DEBUG thisD.55677 => D#45ptD.0
  # DEBUG D.55678 => D#46ptD.0
  # .MEM_83 = VDEF <.MEM_70>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_45);
;;    succ:       37 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 37, loop depth 7, count 0, freq 89, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       24 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                36 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_61 = PHI <.MEM_70(24), .MEM_83(36)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.55682 => D#55ptD.0
  # DEBUG thisD.55683 => D#55ptD.0
  # DEBUG thisD.55684 => D#55ptD.0
  # .MEM_88 = VDEF <.MEM_61>
  MEM[(struct  &)__x_167 + 32] ={v} {CLOBBER};
  # DEBUG thisD.52356 => NULL
  # DEBUG thisD.52310 => NULL
  # DEBUG D#82ptD.0 => D#90ptD.0
  # DEBUG __pD.55686 => __x_167
  # DEBUG thisD.55685 => D#82ptD.0
  # DEBUG D#81ptD.0 => D#82ptD.0
  # DEBUG thisD.52268 => D#81ptD.0
  # DEBUG D#80ptD.0 => 1
  # DEBUG __pD.55689 => __x_167
  # DEBUG __aD.55687 => D#79ptD.0
  # DEBUG __nD.55688 => D#80ptD.0
  # DEBUG D#78ptD.0 => D#80ptD.0
  # DEBUG D#77ptD.0 => D#79ptD.0
  # DEBUG D#75ptD.0 => D#77ptD.0
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG __pD.55692 => __x_167
  # DEBUG thisD.55690 => D#75ptD.0
  # DEBUG D.55691 => D#76ptD.0
  # .MEM_89 = VDEF <.MEM_88>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_167);
  # DEBUG __xD.55661 => __x_43
  if (__x_43 == 0B)
    goto <bb 21>;
  else
    goto <bb 38>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 38, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 37, next block 39, flags: (NEW)
;;    pred:       37 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 39, loop depth 6, count 0, freq 7, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       21 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.55640 => D#56ptD.0
  # DEBUG __sizeD.55639 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.55643 => _39
  # DEBUG __aD.55641 => D#49ptD.0
  # DEBUG __nD.55642 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.55646 => _39
  # DEBUG thisD.55644 => D#45ptD.0
  # DEBUG D.55645 => D#46ptD.0
  # .MEM_90 = VDEF <.MEM_71>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_39);
;;    succ:       40 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 40, loop depth 6, count 0, freq 9, maybe hot
;;    prev block 39, next block 41, flags: (NEW, REACHABLE)
;;    pred:       21 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                39 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_62 = PHI <.MEM_71(21), .MEM_90(39)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.55649 => D#55ptD.0
  # DEBUG thisD.55650 => D#55ptD.0
  # DEBUG thisD.55651 => D#55ptD.0
  # .MEM_95 = VDEF <.MEM_62>
  MEM[(struct  &)__x_164 + 32] ={v} {CLOBBER};
  # DEBUG thisD.52356 => NULL
  # DEBUG thisD.52310 => NULL
  # DEBUG D#82ptD.0 => D#90ptD.0
  # DEBUG __pD.55653 => __x_164
  # DEBUG thisD.55652 => D#82ptD.0
  # DEBUG D#81ptD.0 => D#82ptD.0
  # DEBUG thisD.52268 => D#81ptD.0
  # DEBUG D#80ptD.0 => 1
  # DEBUG __pD.55656 => __x_164
  # DEBUG __aD.55654 => D#79ptD.0
  # DEBUG __nD.55655 => D#80ptD.0
  # DEBUG D#78ptD.0 => D#80ptD.0
  # DEBUG D#77ptD.0 => D#79ptD.0
  # DEBUG D#75ptD.0 => D#77ptD.0
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG __pD.55659 => __x_164
  # DEBUG thisD.55657 => D#75ptD.0
  # DEBUG D.55658 => D#76ptD.0
  # .MEM_96 = VDEF <.MEM_95>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_164);
  # DEBUG __xD.55628 => __x_37
  if (__x_37 == 0B)
    goto <bb 18>;
  else
    goto <bb 41>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                41 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 41, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 40, next block 42, flags: (NEW)
;;    pred:       40 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 42, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       18 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.55607 => D#56ptD.0
  # DEBUG __sizeD.55606 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.55610 => _33
  # DEBUG __aD.55608 => D#49ptD.0
  # DEBUG __nD.55609 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.55613 => _33
  # DEBUG thisD.55611 => D#45ptD.0
  # DEBUG D.55612 => D#46ptD.0
  # .MEM_97 = VDEF <.MEM_72>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_33);
;;    succ:       43 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 43, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 42, next block 44, flags: (NEW, REACHABLE)
;;    pred:       18 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                42 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_63 = PHI <.MEM_72(18), .MEM_97(42)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.55616 => D#55ptD.0
  # DEBUG thisD.55617 => D#55ptD.0
  # DEBUG thisD.55618 => D#55ptD.0
  # .MEM_102 = VDEF <.MEM_63>
  MEM[(struct  &)__x_161 + 32] ={v} {CLOBBER};
  # DEBUG thisD.52356 => NULL
  # DEBUG thisD.52310 => NULL
  # DEBUG D#82ptD.0 => D#90ptD.0
  # DEBUG __pD.55620 => __x_161
  # DEBUG thisD.55619 => D#82ptD.0
  # DEBUG D#81ptD.0 => D#82ptD.0
  # DEBUG thisD.52268 => D#81ptD.0
  # DEBUG D#80ptD.0 => 1
  # DEBUG __pD.55623 => __x_161
  # DEBUG __aD.55621 => D#79ptD.0
  # DEBUG __nD.55622 => D#80ptD.0
  # DEBUG D#78ptD.0 => D#80ptD.0
  # DEBUG D#77ptD.0 => D#79ptD.0
  # DEBUG D#75ptD.0 => D#77ptD.0
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG __pD.55626 => __x_161
  # DEBUG thisD.55624 => D#75ptD.0
  # DEBUG D.55625 => D#76ptD.0
  # .MEM_103 = VDEF <.MEM_102>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_161);
  # DEBUG __xD.55595 => __x_31
  if (__x_31 == 0B)
    goto <bb 15>;
  else
    goto <bb 44>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 44, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 43, next block 45, flags: (NEW)
;;    pred:       43 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 45, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 44, next block 46, flags: (NEW, REACHABLE)
;;    pred:       15 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.55574 => D#56ptD.0
  # DEBUG __sizeD.55573 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.55577 => _27
  # DEBUG __aD.55575 => D#49ptD.0
  # DEBUG __nD.55576 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.55580 => _27
  # DEBUG thisD.55578 => D#45ptD.0
  # DEBUG D.55579 => D#46ptD.0
  # .MEM_104 = VDEF <.MEM_73>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_27);
;;    succ:       46 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 46, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 45, next block 47, flags: (NEW, REACHABLE)
;;    pred:       15 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                45 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_64 = PHI <.MEM_73(15), .MEM_104(45)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.55583 => D#55ptD.0
  # DEBUG thisD.55584 => D#55ptD.0
  # DEBUG thisD.55585 => D#55ptD.0
  # .MEM_109 = VDEF <.MEM_64>
  MEM[(struct  &)__x_158 + 32] ={v} {CLOBBER};
  # DEBUG thisD.52356 => NULL
  # DEBUG thisD.52310 => NULL
  # DEBUG D#82ptD.0 => D#90ptD.0
  # DEBUG __pD.55587 => __x_158
  # DEBUG thisD.55586 => D#82ptD.0
  # DEBUG D#81ptD.0 => D#82ptD.0
  # DEBUG thisD.52268 => D#81ptD.0
  # DEBUG D#80ptD.0 => 1
  # DEBUG __pD.55590 => __x_158
  # DEBUG __aD.55588 => D#79ptD.0
  # DEBUG __nD.55589 => D#80ptD.0
  # DEBUG D#78ptD.0 => D#80ptD.0
  # DEBUG D#77ptD.0 => D#79ptD.0
  # DEBUG D#75ptD.0 => D#77ptD.0
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG __pD.55593 => __x_158
  # DEBUG thisD.55591 => D#75ptD.0
  # DEBUG D.55592 => D#76ptD.0
  # .MEM_110 = VDEF <.MEM_109>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_158);
  # DEBUG __xD.55562 => __x_25
  if (__x_25 == 0B)
    goto <bb 12>;
  else
    goto <bb 47>;
;;    succ:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 47, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 46, next block 48, flags: (NEW)
;;    pred:       46 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 48, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 47, next block 49, flags: (NEW, REACHABLE)
;;    pred:       12 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.55541 => D#56ptD.0
  # DEBUG __sizeD.55540 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.55544 => _21
  # DEBUG __aD.55542 => D#49ptD.0
  # DEBUG __nD.55543 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.55547 => _21
  # DEBUG thisD.55545 => D#45ptD.0
  # DEBUG D.55546 => D#46ptD.0
  # .MEM_111 = VDEF <.MEM_77>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_21);
;;    succ:       49 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 49, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 48, next block 50, flags: (NEW, REACHABLE)
;;    pred:       12 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                48 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_65 = PHI <.MEM_77(12), .MEM_111(48)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.55550 => D#55ptD.0
  # DEBUG thisD.55551 => D#55ptD.0
  # DEBUG thisD.55552 => D#55ptD.0
  # .MEM_116 = VDEF <.MEM_65>
  MEM[(struct  &)__x_155 + 32] ={v} {CLOBBER};
  # DEBUG thisD.52356 => NULL
  # DEBUG thisD.52310 => NULL
  # DEBUG D#82ptD.0 => D#90ptD.0
  # DEBUG __pD.55554 => __x_155
  # DEBUG thisD.55553 => D#82ptD.0
  # DEBUG D#81ptD.0 => D#82ptD.0
  # DEBUG thisD.52268 => D#81ptD.0
  # DEBUG D#80ptD.0 => 1
  # DEBUG __pD.55557 => __x_155
  # DEBUG __aD.55555 => D#79ptD.0
  # DEBUG __nD.55556 => D#80ptD.0
  # DEBUG D#78ptD.0 => D#80ptD.0
  # DEBUG D#77ptD.0 => D#79ptD.0
  # DEBUG D#75ptD.0 => D#77ptD.0
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG __pD.55560 => __x_155
  # DEBUG thisD.55558 => D#75ptD.0
  # DEBUG D.55559 => D#76ptD.0
  # .MEM_117 = VDEF <.MEM_116>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_155);
  # DEBUG __xD.55529 => __x_19
  if (__x_19 == 0B)
    goto <bb 9>;
  else
    goto <bb 50>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                50 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 50, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 49, next block 51, flags: (NEW)
;;    pred:       49 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 51, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 50, next block 52, flags: (NEW, REACHABLE)
;;    pred:       9 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.55508 => D#56ptD.0
  # DEBUG __sizeD.55507 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.55511 => _7
  # DEBUG __aD.55509 => D#49ptD.0
  # DEBUG __nD.55510 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.55514 => _7
  # DEBUG thisD.55512 => D#45ptD.0
  # DEBUG D.55513 => D#46ptD.0
  # .MEM_118 = VDEF <.MEM_78>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_7);
;;    succ:       52 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 52, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 51, next block 53, flags: (NEW, REACHABLE)
;;    pred:       9 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                51 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_66 = PHI <.MEM_78(9), .MEM_118(51)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.55517 => D#55ptD.0
  # DEBUG thisD.55518 => D#55ptD.0
  # DEBUG thisD.55519 => D#55ptD.0
  # .MEM_123 = VDEF <.MEM_66>
  MEM[(struct  &)__x_152 + 32] ={v} {CLOBBER};
  # DEBUG thisD.52356 => NULL
  # DEBUG thisD.52310 => NULL
  # DEBUG D#82ptD.0 => D#90ptD.0
  # DEBUG __pD.55521 => __x_152
  # DEBUG thisD.55520 => D#82ptD.0
  # DEBUG D#81ptD.0 => D#82ptD.0
  # DEBUG thisD.52268 => D#81ptD.0
  # DEBUG D#80ptD.0 => 1
  # DEBUG __pD.55524 => __x_152
  # DEBUG __aD.55522 => D#79ptD.0
  # DEBUG __nD.55523 => D#80ptD.0
  # DEBUG D#78ptD.0 => D#80ptD.0
  # DEBUG D#77ptD.0 => D#79ptD.0
  # DEBUG D#75ptD.0 => D#77ptD.0
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG __pD.55527 => __x_152
  # DEBUG thisD.55525 => D#75ptD.0
  # DEBUG D.55526 => D#76ptD.0
  # .MEM_124 = VDEF <.MEM_123>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_152);
  # DEBUG __xD.55496 => __x_14
  if (__x_14 == 0B)
    goto <bb 6>;
  else
    goto <bb 53>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                53 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 53, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 52, next block 54, flags: (NEW)
;;    pred:       52 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 54, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 53, next block 55, flags: (NEW, REACHABLE)
;;    pred:       6 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.55475 => D#56ptD.0
  # DEBUG __sizeD.55474 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.55478 => _11
  # DEBUG __aD.55476 => D#49ptD.0
  # DEBUG __nD.55477 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.55481 => _11
  # DEBUG thisD.55479 => D#45ptD.0
  # DEBUG D.55480 => D#46ptD.0
  # .MEM_125 = VDEF <.MEM_79>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_11);
;;    succ:       55 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 55, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 54, next block 56, flags: (NEW, REACHABLE)
;;    pred:       6 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                54 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_67 = PHI <.MEM_79(6), .MEM_125(54)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.55484 => D#55ptD.0
  # DEBUG thisD.55485 => D#55ptD.0
  # DEBUG thisD.55486 => D#55ptD.0
  # .MEM_130 = VDEF <.MEM_67>
  MEM[(struct  &)__x_149 + 32] ={v} {CLOBBER};
  # DEBUG thisD.52356 => NULL
  # DEBUG thisD.52310 => NULL
  # DEBUG D#82ptD.0 => D#90ptD.0
  # DEBUG __pD.55488 => __x_149
  # DEBUG thisD.55487 => D#82ptD.0
  # DEBUG D#81ptD.0 => D#82ptD.0
  # DEBUG thisD.52268 => D#81ptD.0
  # DEBUG D#80ptD.0 => 1
  # DEBUG __pD.55491 => __x_149
  # DEBUG __aD.55489 => D#79ptD.0
  # DEBUG __nD.55490 => D#80ptD.0
  # DEBUG D#78ptD.0 => D#80ptD.0
  # DEBUG D#77ptD.0 => D#79ptD.0
  # DEBUG D#75ptD.0 => D#77ptD.0
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG __pD.55494 => __x_149
  # DEBUG thisD.55492 => D#75ptD.0
  # DEBUG D.55493 => D#76ptD.0
  # .MEM_131 = VDEF <.MEM_130>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_149);
  # DEBUG __xD.44861 => __x_10
  if (__x_10 == 0B)
    goto <bb 3>;
  else
    goto <bb 56>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                56 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 56, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 55, next block 1, flags: (NEW)
;;    pred:       55 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

}



Updating SSA:
Registering new PHI nodes in block #5
Registering new PHI nodes in block #7
Registering new PHI nodes in block #8
Registering new PHI nodes in block #10
Registering new PHI nodes in block #11
Registering new PHI nodes in block #13
Registering new PHI nodes in block #14
Registering new PHI nodes in block #16
Registering new PHI nodes in block #17
Registering new PHI nodes in block #19
Registering new PHI nodes in block #20
Registering new PHI nodes in block #22
Registering new PHI nodes in block #23
Registering new PHI nodes in block #25
Registering new PHI nodes in block #26
Registering new PHI nodes in block #28
Registering new PHI nodes in block #29
Registering new PHI nodes in block #30
Registering new PHI nodes in block #31
Updating SSA information for statement operator delete (__x_173);
Registering new PHI nodes in block #32
Registering new PHI nodes in block #65
Registering new PHI nodes in block #27
Registering new PHI nodes in block #33
Registering new PHI nodes in block #34
Updating SSA information for statement operator delete (__x_170);
Registering new PHI nodes in block #35
Registering new PHI nodes in block #64
Registering new PHI nodes in block #24
Registering new PHI nodes in block #36
Registering new PHI nodes in block #37
Updating SSA information for statement operator delete (__x_167);
Registering new PHI nodes in block #38
Registering new PHI nodes in block #63
Registering new PHI nodes in block #21
Registering new PHI nodes in block #39
Registering new PHI nodes in block #40
Updating SSA information for statement operator delete (__x_164);
Registering new PHI nodes in block #41
Registering new PHI nodes in block #62
Registering new PHI nodes in block #18
Registering new PHI nodes in block #42
Registering new PHI nodes in block #43
Updating SSA information for statement operator delete (__x_161);
Registering new PHI nodes in block #44
Registering new PHI nodes in block #61
Registering new PHI nodes in block #15
Registering new PHI nodes in block #45
Registering new PHI nodes in block #46
Updating SSA information for statement operator delete (__x_158);
Registering new PHI nodes in block #47
Registering new PHI nodes in block #60
Registering new PHI nodes in block #12
Registering new PHI nodes in block #48
Registering new PHI nodes in block #49
Updating SSA information for statement operator delete (__x_155);
Registering new PHI nodes in block #50
Registering new PHI nodes in block #59
Registering new PHI nodes in block #9
Registering new PHI nodes in block #51
Registering new PHI nodes in block #52
Updating SSA information for statement operator delete (__x_152);
Registering new PHI nodes in block #53
Registering new PHI nodes in block #58
Registering new PHI nodes in block #6
Registering new PHI nodes in block #54
Registering new PHI nodes in block #55
Updating SSA information for statement operator delete (__x_149);
Registering new PHI nodes in block #56
Registering new PHI nodes in block #57

DFA Statistics for void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)>; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >*]

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                            252       2016b
DEF operands                             36        288b
VUSE operands                            56        448b
VDEF operands                            28        224b
PHI nodes                                45       4680b
PHI arguments                            81       3888b
---------------------------------------------------------
Total memory used by DFA/SSA data                   11k
---------------------------------------------------------

Average number of arguments per PHI node: 1.8 (max: 2)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_151 -> { .MEM_131 }
.MEM_154 -> { .MEM_75 }
.MEM_157 -> { .MEM_82 }
.MEM_160 -> { .MEM_89 }
.MEM_163 -> { .MEM_96 }
.MEM_166 -> { .MEM_103 }
.MEM_169 -> { .MEM_110 }
.MEM_172 -> { .MEM_117 }
.MEM_175 -> { .MEM_124 }
Incremental SSA update started at block: 5
Number of blocks in CFG: 66
Number of blocks to update: 36 ( 55%)
Affected blocks: 5 8 11 14 17 20 23 26 29 31 32 34 35 37 38 40 41 43 44 46 47 49 50 52 53 55 56 57 58 59 60 61 62 63 64 65


Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_149 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_149 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_149 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_149 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_149 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_149 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_149 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_149 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
Creating dr for MEM[(char * *)__x_155 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_155 + 32B]
Creating dr for MEM[(char * *)__x_155 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_155 + 32B]
Creating dr for MEM[(char * *)__x_155 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_155 + 32B]
Creating dr for MEM[(char * *)__x_155 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_155 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 16B]
Creating dr for MEM[(char * *)__x_152 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_152 + 32B]
Creating dr for MEM[(char * *)__x_152 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_152 + 32B]
Creating dr for MEM[(char * *)__x_152 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_152 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_149 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_149 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_149 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_149 + 16B]
Creating dr for MEM[(char * *)__x_149 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_149 + 32B]
Creating dr for MEM[(char * *)__x_149 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_149 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_149 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_149 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_149 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_149 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_149 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_149 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_149 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_149 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
Creating dr for MEM[(char * *)__x_155 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_155 + 32B]
Creating dr for MEM[(char * *)__x_155 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_155 + 32B]
Creating dr for MEM[(char * *)__x_155 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_155 + 32B]
Creating dr for MEM[(char * *)__x_155 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_155 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 16B]
Creating dr for MEM[(char * *)__x_152 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_152 + 32B]
Creating dr for MEM[(char * *)__x_152 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_152 + 32B]
Creating dr for MEM[(char * *)__x_152 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_152 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
Creating dr for MEM[(char * *)__x_155 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_155 + 32B]
Creating dr for MEM[(char * *)__x_155 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_155 + 32B]
Creating dr for MEM[(char * *)__x_155 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_155 + 32B]
Creating dr for MEM[(char * *)__x_155 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_155 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(char * *)__x_170 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_170 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(char * *)__x_167 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_167 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(char * *)__x_164 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_164 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(char * *)__x_161 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_161 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(char * *)__x_158 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_158 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B]
Creating dr for MEM[(char * *)__x_155 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_155 + 32B]
Creating dr for MEM[(char * *)__x_155 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_155 + 32B]
Creating dr for MEM[(char * *)__x_155 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_155 + 32B]
Creating dr for MEM[(char * *)__x_155 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_155 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_152 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_152 + 16B]
Creating dr for MEM[(char * *)__x_152 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_152 + 32B]
Creating dr for MEM[(char * *)__x_152 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_152 + 32B]
Creating dr for MEM[(char * *)__x_152 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_152 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_149 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_149 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_149 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_149 + 16B]
Creating dr for MEM[(char * *)__x_149 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_149 + 32B]
Creating dr for MEM[(char * *)__x_149 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__x_149 + 32B]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:67, LOOPS:9, CONDITIONS:27, STMTS:828)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # DEBUG __x => __x_3(D)
    if (__x_3(D) == 0B)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 bb_57 }, succs = {bb_66 })
  {
    <bb 3>:
    # .MEM_80 = PHI <.MEM_4(D)(2), .MEM_151(57)>

  }
  bb_66 (preds = {bb_3 }, succs = {bb_1 })
  {
    <bb 66>:
    # VUSE <.MEM_80>
    return;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 })
  {
    <bb 4>:

  }
  bb_57 (preds = {bb_55 }, succs = {bb_3 })
  {
    <bb 57>:
    # .MEM_151 = PHI <.MEM_131(55)>
    goto <bb 3>;

  }
  loop_1 (header = 5, latch = 56, niter = )
  {
    bb_5 (preds = {bb_4 bb_56 }, succs = {bb_6 bb_7 })
    {
      <bb 5>:
      # __x_149 = PHI <__x_3(D)(4), __x_10(56)>
      # .MEM_150 = PHI <.MEM_4(D)(4), .MEM_131(56)>
      # DEBUG __x => __x_149
      # VUSE <.MEM_150>
      __x_9 = MEM[(struct _Rb_tree_node_base * *)__x_149 + 24B];
      # DEBUG D#36 => __x_149
      # DEBUG __x => D#36
      # DEBUG this => this_6(D)
      # DEBUG __x => __x_9
      # DEBUG __x => __x_9
      if (__x_9 == 0B)
        goto <bb 6>;
      else
        goto <bb 7>;

    }
    bb_6 (preds = {bb_5 bb_58 }, succs = {bb_54 bb_55 })
    {
      <bb 6>:
      # .MEM_79 = PHI <.MEM_150(5), .MEM_175(58)>
      # VUSE <.MEM_79>
      __x_10 = MEM[(struct _Rb_tree_node_base * *)__x_149 + 16B];
      # DEBUG D#37 => __x_149
      # DEBUG __x => D#37
      # DEBUG __y => NULL
      # DEBUG D#91 => this_6(D)
      # DEBUG __p => __x_149
      # DEBUG this => D#91
      # DEBUG D#90 => D#91
      # DEBUG D#89 => D#91
      # DEBUG D#88 => D#89
      # DEBUG __p => __x_149
      # DEBUG this => D#88
      # DEBUG D#87 => D#88
      # DEBUG this => __x_149
      # DEBUG D#86 => &__x_149->_M_value_field
      # DEBUG __r => D#86
      # DEBUG D#85 => D#87
      # DEBUG this => D#85
      # DEBUG D#84 => D#85
      # DEBUG this => D#84
      # DEBUG this => NULL
      # DEBUG D.52298 => NULL
      # DEBUG this => NULL
      # DEBUG __p => D#86
      # DEBUG this => D#61
      # DEBUG this => D#86
      # DEBUG D#56 => &D#86->first
      # DEBUG this => D#56
      # DEBUG this => D#56
      # DEBUG this => D#56
      # VUSE <.MEM_79>
      _11 = MEM[(char * *)__x_149 + 32B];
      # DEBUG D#3 => D#56
      # DEBUG this => D#3
      # DEBUG this => D#56
      _12 = &MEM[(const struct basic_string *)__x_149 + 32B].D.14356._M_local_buf;
      if (_11 != _12)
        goto <bb 54>;
      else
        goto <bb 55>;

    }
    bb_7 (preds = {bb_5 }, succs = {bb_8 })
    {
      <bb 7>:

    }
    bb_58 (preds = {bb_52 }, succs = {bb_6 })
    {
      <bb 58>:
      # .MEM_175 = PHI <.MEM_124(52)>
      goto <bb 6>;

    }
    bb_54 (preds = {bb_6 }, succs = {bb_55 })
    {
      <bb 54>:
      # DEBUG D#54 => MEM[(struct basic_string *)D#56].D.14356._M_allocated_capacity
      # DEBUG D#53 => D#54
      # DEBUG this => D#56
      # DEBUG __size => D#53
      # DEBUG D#52 => D#53
      # DEBUG D#3 => D#56
      # DEBUG this => D#3
      # DEBUG this => D#56
      # DEBUG D#51 => &MEM[(struct basic_string *)D#56]._M_dataplus
      # DEBUG D#49 => D#51
      # DEBUG D#50 => D#52 + 1
      # DEBUG __p => _11
      # DEBUG __a => D#49
      # DEBUG __n => D#50
      # DEBUG D#48 => D#50
      # DEBUG D#47 => D#49
      # DEBUG D#45 => D#47
      # DEBUG D#46 => D#48
      # DEBUG __p => _11
      # DEBUG this => D#45
      # DEBUG D.55480 => D#46
      # .MEM_125 = VDEF <.MEM_79>
      operator delete (_11);

    }
    bb_55 (preds = {bb_6 bb_54 }, succs = {bb_57 bb_56 })
    {
      <bb 55>:
      # .MEM_67 = PHI <.MEM_79(6), .MEM_125(54)>
      # DEBUG D#55 => &MEM[(struct basic_string *)D#56]._M_dataplus
      # DEBUG this => D#55
      # DEBUG this => D#55
      # DEBUG this => D#55
      # .MEM_130 = VDEF <.MEM_67>
      MEM[(struct  &)__x_149 + 32] ={v} {CLOBBER};
      # DEBUG this => NULL
      # DEBUG this => NULL
      # DEBUG D#82 => D#90
      # DEBUG __p => __x_149
      # DEBUG this => D#82
      # DEBUG D#81 => D#82
      # DEBUG this => D#81
      # DEBUG D#80 => 1
      # DEBUG __p => __x_149
      # DEBUG __a => D#79
      # DEBUG __n => D#80
      # DEBUG D#78 => D#80
      # DEBUG D#77 => D#79
      # DEBUG D#75 => D#77
      # DEBUG D#76 => D#78
      # DEBUG __p => __x_149
      # DEBUG this => D#75
      # DEBUG D.55493 => D#76
      # .MEM_131 = VDEF <.MEM_130>
      operator delete (__x_149);
      # DEBUG __x => __x_10
      if (__x_10 == 0B)
        goto <bb 57>;
      else
        goto <bb 56>;

    }
    bb_56 (preds = {bb_55 }, succs = {bb_5 })
    {
      <bb 56>:
      goto <bb 5>;

    }
    loop_2 (header = 8, latch = 53, niter = )
    {
      bb_8 (preds = {bb_7 bb_53 }, succs = {bb_9 bb_10 })
      {
        <bb 8>:
        # __x_152 = PHI <__x_9(7), __x_14(53)>
        # .MEM_174 = PHI <.MEM_150(7), .MEM_124(53)>
        # DEBUG __x => __x_152
        # VUSE <.MEM_174>
        __x_13 = MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B];
        # DEBUG D#36 => __x_152
        # DEBUG __x => D#36
        # DEBUG this => this_6(D)
        # DEBUG __x => __x_13
        # DEBUG __x => __x_13
        if (__x_13 == 0B)
          goto <bb 9>;
        else
          goto <bb 10>;

      }
      bb_9 (preds = {bb_8 bb_59 }, succs = {bb_51 bb_52 })
      {
        <bb 9>:
        # .MEM_78 = PHI <.MEM_174(8), .MEM_172(59)>
        # VUSE <.MEM_78>
        __x_14 = MEM[(struct _Rb_tree_node_base * *)__x_152 + 16B];
        # DEBUG D#37 => __x_152
        # DEBUG __x => D#37
        # DEBUG __y => NULL
        # DEBUG D#91 => this_6(D)
        # DEBUG __p => __x_152
        # DEBUG this => D#91
        # DEBUG D#90 => D#91
        # DEBUG D#89 => D#91
        # DEBUG D#88 => D#89
        # DEBUG __p => __x_152
        # DEBUG this => D#88
        # DEBUG D#87 => D#88
        # DEBUG this => __x_152
        # DEBUG D#86 => &__x_152->_M_value_field
        # DEBUG __r => D#86
        # DEBUG D#85 => D#87
        # DEBUG this => D#85
        # DEBUG D#84 => D#85
        # DEBUG this => D#84
        # DEBUG this => NULL
        # DEBUG D.52298 => NULL
        # DEBUG this => NULL
        # DEBUG __p => D#86
        # DEBUG this => D#61
        # DEBUG this => D#86
        # DEBUG D#56 => &D#86->first
        # DEBUG this => D#56
        # DEBUG this => D#56
        # DEBUG this => D#56
        # VUSE <.MEM_78>
        _7 = MEM[(char * *)__x_152 + 32B];
        # DEBUG D#3 => D#56
        # DEBUG this => D#3
        # DEBUG this => D#56
        _16 = &MEM[(const struct basic_string *)__x_152 + 32B].D.14356._M_local_buf;
        if (_7 != _16)
          goto <bb 51>;
        else
          goto <bb 52>;

      }
      bb_10 (preds = {bb_8 }, succs = {bb_11 })
      {
        <bb 10>:

      }
      bb_59 (preds = {bb_49 }, succs = {bb_9 })
      {
        <bb 59>:
        # .MEM_172 = PHI <.MEM_117(49)>
        goto <bb 9>;

      }
      bb_51 (preds = {bb_9 }, succs = {bb_52 })
      {
        <bb 51>:
        # DEBUG D#54 => MEM[(struct basic_string *)D#56].D.14356._M_allocated_capacity
        # DEBUG D#53 => D#54
        # DEBUG this => D#56
        # DEBUG __size => D#53
        # DEBUG D#52 => D#53
        # DEBUG D#3 => D#56
        # DEBUG this => D#3
        # DEBUG this => D#56
        # DEBUG D#51 => &MEM[(struct basic_string *)D#56]._M_dataplus
        # DEBUG D#49 => D#51
        # DEBUG D#50 => D#52 + 1
        # DEBUG __p => _7
        # DEBUG __a => D#49
        # DEBUG __n => D#50
        # DEBUG D#48 => D#50
        # DEBUG D#47 => D#49
        # DEBUG D#45 => D#47
        # DEBUG D#46 => D#48
        # DEBUG __p => _7
        # DEBUG this => D#45
        # DEBUG D.55513 => D#46
        # .MEM_118 = VDEF <.MEM_78>
        operator delete (_7);

      }
      bb_52 (preds = {bb_9 bb_51 }, succs = {bb_58 bb_53 })
      {
        <bb 52>:
        # .MEM_66 = PHI <.MEM_78(9), .MEM_118(51)>
        # DEBUG D#55 => &MEM[(struct basic_string *)D#56]._M_dataplus
        # DEBUG this => D#55
        # DEBUG this => D#55
        # DEBUG this => D#55
        # .MEM_123 = VDEF <.MEM_66>
        MEM[(struct  &)__x_152 + 32] ={v} {CLOBBER};
        # DEBUG this => NULL
        # DEBUG this => NULL
        # DEBUG D#82 => D#90
        # DEBUG __p => __x_152
        # DEBUG this => D#82
        # DEBUG D#81 => D#82
        # DEBUG this => D#81
        # DEBUG D#80 => 1
        # DEBUG __p => __x_152
        # DEBUG __a => D#79
        # DEBUG __n => D#80
        # DEBUG D#78 => D#80
        # DEBUG D#77 => D#79
        # DEBUG D#75 => D#77
        # DEBUG D#76 => D#78
        # DEBUG __p => __x_152
        # DEBUG this => D#75
        # DEBUG D.55526 => D#76
        # .MEM_124 = VDEF <.MEM_123>
        operator delete (__x_152);
        # DEBUG __x => __x_14
        if (__x_14 == 0B)
          goto <bb 58>;
        else
          goto <bb 53>;

      }
      bb_53 (preds = {bb_52 }, succs = {bb_8 })
      {
        <bb 53>:
        goto <bb 8>;

      }
      loop_3 (header = 11, latch = 50, niter = )
      {
        bb_11 (preds = {bb_10 bb_50 }, succs = {bb_12 bb_13 })
        {
          <bb 11>:
          # __x_155 = PHI <__x_13(10), __x_19(50)>
          # .MEM_171 = PHI <.MEM_174(10), .MEM_117(50)>
          # DEBUG __x => __x_155
          # VUSE <.MEM_171>
          __x_18 = MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B];
          # DEBUG D#36 => __x_155
          # DEBUG __x => D#36
          # DEBUG this => this_6(D)
          # DEBUG __x => __x_18
          # DEBUG __x => __x_18
          if (__x_18 == 0B)
            goto <bb 12>;
          else
            goto <bb 13>;

        }
        bb_12 (preds = {bb_11 bb_60 }, succs = {bb_48 bb_49 })
        {
          <bb 12>:
          # .MEM_77 = PHI <.MEM_171(11), .MEM_169(60)>
          # VUSE <.MEM_77>
          __x_19 = MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B];
          # DEBUG D#37 => __x_155
          # DEBUG __x => D#37
          # DEBUG __y => NULL
          # DEBUG D#91 => this_6(D)
          # DEBUG __p => __x_155
          # DEBUG this => D#91
          # DEBUG D#90 => D#91
          # DEBUG D#89 => D#91
          # DEBUG D#88 => D#89
          # DEBUG __p => __x_155
          # DEBUG this => D#88
          # DEBUG D#87 => D#88
          # DEBUG this => __x_155
          # DEBUG D#86 => &__x_155->_M_value_field
          # DEBUG __r => D#86
          # DEBUG D#85 => D#87
          # DEBUG this => D#85
          # DEBUG D#84 => D#85
          # DEBUG this => D#84
          # DEBUG this => NULL
          # DEBUG D.52298 => NULL
          # DEBUG this => NULL
          # DEBUG __p => D#86
          # DEBUG this => D#61
          # DEBUG this => D#86
          # DEBUG D#56 => &D#86->first
          # DEBUG this => D#56
          # DEBUG this => D#56
          # DEBUG this => D#56
          # VUSE <.MEM_77>
          _21 = MEM[(char * *)__x_155 + 32B];
          # DEBUG D#3 => D#56
          # DEBUG this => D#3
          # DEBUG this => D#56
          _22 = &MEM[(const struct basic_string *)__x_155 + 32B].D.14356._M_local_buf;
          if (_21 != _22)
            goto <bb 48>;
          else
            goto <bb 49>;

        }
        bb_13 (preds = {bb_11 }, succs = {bb_14 })
        {
          <bb 13>:

        }
        bb_60 (preds = {bb_46 }, succs = {bb_12 })
        {
          <bb 60>:
          # .MEM_169 = PHI <.MEM_110(46)>
          goto <bb 12>;

        }
        bb_48 (preds = {bb_12 }, succs = {bb_49 })
        {
          <bb 48>:
          # DEBUG D#54 => MEM[(struct basic_string *)D#56].D.14356._M_allocated_capacity
          # DEBUG D#53 => D#54
          # DEBUG this => D#56
          # DEBUG __size => D#53
          # DEBUG D#52 => D#53
          # DEBUG D#3 => D#56
          # DEBUG this => D#3
          # DEBUG this => D#56
          # DEBUG D#51 => &MEM[(struct basic_string *)D#56]._M_dataplus
          # DEBUG D#49 => D#51
          # DEBUG D#50 => D#52 + 1
          # DEBUG __p => _21
          # DEBUG __a => D#49
          # DEBUG __n => D#50
          # DEBUG D#48 => D#50
          # DEBUG D#47 => D#49
          # DEBUG D#45 => D#47
          # DEBUG D#46 => D#48
          # DEBUG __p => _21
          # DEBUG this => D#45
          # DEBUG D.55546 => D#46
          # .MEM_111 = VDEF <.MEM_77>
          operator delete (_21);

        }
        bb_49 (preds = {bb_12 bb_48 }, succs = {bb_59 bb_50 })
        {
          <bb 49>:
          # .MEM_65 = PHI <.MEM_77(12), .MEM_111(48)>
          # DEBUG D#55 => &MEM[(struct basic_string *)D#56]._M_dataplus
          # DEBUG this => D#55
          # DEBUG this => D#55
          # DEBUG this => D#55
          # .MEM_116 = VDEF <.MEM_65>
          MEM[(struct  &)__x_155 + 32] ={v} {CLOBBER};
          # DEBUG this => NULL
          # DEBUG this => NULL
          # DEBUG D#82 => D#90
          # DEBUG __p => __x_155
          # DEBUG this => D#82
          # DEBUG D#81 => D#82
          # DEBUG this => D#81
          # DEBUG D#80 => 1
          # DEBUG __p => __x_155
          # DEBUG __a => D#79
          # DEBUG __n => D#80
          # DEBUG D#78 => D#80
          # DEBUG D#77 => D#79
          # DEBUG D#75 => D#77
          # DEBUG D#76 => D#78
          # DEBUG __p => __x_155
          # DEBUG this => D#75
          # DEBUG D.55559 => D#76
          # .MEM_117 = VDEF <.MEM_116>
          operator delete (__x_155);
          # DEBUG __x => __x_19
          if (__x_19 == 0B)
            goto <bb 59>;
          else
            goto <bb 50>;

        }
        bb_50 (preds = {bb_49 }, succs = {bb_11 })
        {
          <bb 50>:
          goto <bb 11>;

        }
        loop_4 (header = 14, latch = 47, niter = )
        {
          bb_14 (preds = {bb_13 bb_47 }, succs = {bb_15 bb_16 })
          {
            <bb 14>:
            # __x_158 = PHI <__x_18(13), __x_25(47)>
            # .MEM_168 = PHI <.MEM_171(13), .MEM_110(47)>
            # DEBUG __x => __x_158
            # VUSE <.MEM_168>
            __x_24 = MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B];
            # DEBUG D#36 => __x_158
            # DEBUG __x => D#36
            # DEBUG this => this_6(D)
            # DEBUG __x => __x_24
            # DEBUG __x => __x_24
            if (__x_24 == 0B)
              goto <bb 15>;
            else
              goto <bb 16>;

          }
          bb_15 (preds = {bb_14 bb_61 }, succs = {bb_45 bb_46 })
          {
            <bb 15>:
            # .MEM_73 = PHI <.MEM_168(14), .MEM_166(61)>
            # VUSE <.MEM_73>
            __x_25 = MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B];
            # DEBUG D#37 => __x_158
            # DEBUG __x => D#37
            # DEBUG __y => NULL
            # DEBUG D#91 => this_6(D)
            # DEBUG __p => __x_158
            # DEBUG this => D#91
            # DEBUG D#90 => D#91
            # DEBUG D#89 => D#91
            # DEBUG D#88 => D#89
            # DEBUG __p => __x_158
            # DEBUG this => D#88
            # DEBUG D#87 => D#88
            # DEBUG this => __x_158
            # DEBUG D#86 => &__x_158->_M_value_field
            # DEBUG __r => D#86
            # DEBUG D#85 => D#87
            # DEBUG this => D#85
            # DEBUG D#84 => D#85
            # DEBUG this => D#84
            # DEBUG this => NULL
            # DEBUG D.52298 => NULL
            # DEBUG this => NULL
            # DEBUG __p => D#86
            # DEBUG this => D#61
            # DEBUG this => D#86
            # DEBUG D#56 => &D#86->first
            # DEBUG this => D#56
            # DEBUG this => D#56
            # DEBUG this => D#56
            # VUSE <.MEM_73>
            _27 = MEM[(char * *)__x_158 + 32B];
            # DEBUG D#3 => D#56
            # DEBUG this => D#3
            # DEBUG this => D#56
            _28 = &MEM[(const struct basic_string *)__x_158 + 32B].D.14356._M_local_buf;
            if (_27 != _28)
              goto <bb 45>;
            else
              goto <bb 46>;

          }
          bb_16 (preds = {bb_14 }, succs = {bb_17 })
          {
            <bb 16>:

          }
          bb_61 (preds = {bb_43 }, succs = {bb_15 })
          {
            <bb 61>:
            # .MEM_166 = PHI <.MEM_103(43)>
            goto <bb 15>;

          }
          bb_45 (preds = {bb_15 }, succs = {bb_46 })
          {
            <bb 45>:
            # DEBUG D#54 => MEM[(struct basic_string *)D#56].D.14356._M_allocated_capacity
            # DEBUG D#53 => D#54
            # DEBUG this => D#56
            # DEBUG __size => D#53
            # DEBUG D#52 => D#53
            # DEBUG D#3 => D#56
            # DEBUG this => D#3
            # DEBUG this => D#56
            # DEBUG D#51 => &MEM[(struct basic_string *)D#56]._M_dataplus
            # DEBUG D#49 => D#51
            # DEBUG D#50 => D#52 + 1
            # DEBUG __p => _27
            # DEBUG __a => D#49
            # DEBUG __n => D#50
            # DEBUG D#48 => D#50
            # DEBUG D#47 => D#49
            # DEBUG D#45 => D#47
            # DEBUG D#46 => D#48
            # DEBUG __p => _27
            # DEBUG this => D#45
            # DEBUG D.55579 => D#46
            # .MEM_104 = VDEF <.MEM_73>
            operator delete (_27);

          }
          bb_46 (preds = {bb_15 bb_45 }, succs = {bb_60 bb_47 })
          {
            <bb 46>:
            # .MEM_64 = PHI <.MEM_73(15), .MEM_104(45)>
            # DEBUG D#55 => &MEM[(struct basic_string *)D#56]._M_dataplus
            # DEBUG this => D#55
            # DEBUG this => D#55
            # DEBUG this => D#55
            # .MEM_109 = VDEF <.MEM_64>
            MEM[(struct  &)__x_158 + 32] ={v} {CLOBBER};
            # DEBUG this => NULL
            # DEBUG this => NULL
            # DEBUG D#82 => D#90
            # DEBUG __p => __x_158
            # DEBUG this => D#82
            # DEBUG D#81 => D#82
            # DEBUG this => D#81
            # DEBUG D#80 => 1
            # DEBUG __p => __x_158
            # DEBUG __a => D#79
            # DEBUG __n => D#80
            # DEBUG D#78 => D#80
            # DEBUG D#77 => D#79
            # DEBUG D#75 => D#77
            # DEBUG D#76 => D#78
            # DEBUG __p => __x_158
            # DEBUG this => D#75
            # DEBUG D.55592 => D#76
            # .MEM_110 = VDEF <.MEM_109>
            operator delete (__x_158);
            # DEBUG __x => __x_25
            if (__x_25 == 0B)
              goto <bb 60>;
            else
              goto <bb 47>;

          }
          bb_47 (preds = {bb_46 }, succs = {bb_14 })
          {
            <bb 47>:
            goto <bb 14>;

          }
          loop_5 (header = 17, latch = 44, niter = )
          {
            bb_17 (preds = {bb_16 bb_44 }, succs = {bb_18 bb_19 })
            {
              <bb 17>:
              # __x_161 = PHI <__x_24(16), __x_31(44)>
              # .MEM_165 = PHI <.MEM_168(16), .MEM_103(44)>
              # DEBUG __x => __x_161
              # VUSE <.MEM_165>
              __x_30 = MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B];
              # DEBUG D#36 => __x_161
              # DEBUG __x => D#36
              # DEBUG this => this_6(D)
              # DEBUG __x => __x_30
              # DEBUG __x => __x_30
              if (__x_30 == 0B)
                goto <bb 18>;
              else
                goto <bb 19>;

            }
            bb_18 (preds = {bb_17 bb_62 }, succs = {bb_42 bb_43 })
            {
              <bb 18>:
              # .MEM_72 = PHI <.MEM_165(17), .MEM_163(62)>
              # VUSE <.MEM_72>
              __x_31 = MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B];
              # DEBUG D#37 => __x_161
              # DEBUG __x => D#37
              # DEBUG __y => NULL
              # DEBUG D#91 => this_6(D)
              # DEBUG __p => __x_161
              # DEBUG this => D#91
              # DEBUG D#90 => D#91
              # DEBUG D#89 => D#91
              # DEBUG D#88 => D#89
              # DEBUG __p => __x_161
              # DEBUG this => D#88
              # DEBUG D#87 => D#88
              # DEBUG this => __x_161
              # DEBUG D#86 => &__x_161->_M_value_field
              # DEBUG __r => D#86
              # DEBUG D#85 => D#87
              # DEBUG this => D#85
              # DEBUG D#84 => D#85
              # DEBUG this => D#84
              # DEBUG this => NULL
              # DEBUG D.52298 => NULL
              # DEBUG this => NULL
              # DEBUG __p => D#86
              # DEBUG this => D#61
              # DEBUG this => D#86
              # DEBUG D#56 => &D#86->first
              # DEBUG this => D#56
              # DEBUG this => D#56
              # DEBUG this => D#56
              # VUSE <.MEM_72>
              _33 = MEM[(char * *)__x_161 + 32B];
              # DEBUG D#3 => D#56
              # DEBUG this => D#3
              # DEBUG this => D#56
              _34 = &MEM[(const struct basic_string *)__x_161 + 32B].D.14356._M_local_buf;
              if (_33 != _34)
                goto <bb 42>;
              else
                goto <bb 43>;

            }
            bb_19 (preds = {bb_17 }, succs = {bb_20 })
            {
              <bb 19>:

            }
            bb_62 (preds = {bb_40 }, succs = {bb_18 })
            {
              <bb 62>:
              # .MEM_163 = PHI <.MEM_96(40)>
              goto <bb 18>;

            }
            bb_42 (preds = {bb_18 }, succs = {bb_43 })
            {
              <bb 42>:
              # DEBUG D#54 => MEM[(struct basic_string *)D#56].D.14356._M_allocated_capacity
              # DEBUG D#53 => D#54
              # DEBUG this => D#56
              # DEBUG __size => D#53
              # DEBUG D#52 => D#53
              # DEBUG D#3 => D#56
              # DEBUG this => D#3
              # DEBUG this => D#56
              # DEBUG D#51 => &MEM[(struct basic_string *)D#56]._M_dataplus
              # DEBUG D#49 => D#51
              # DEBUG D#50 => D#52 + 1
              # DEBUG __p => _33
              # DEBUG __a => D#49
              # DEBUG __n => D#50
              # DEBUG D#48 => D#50
              # DEBUG D#47 => D#49
              # DEBUG D#45 => D#47
              # DEBUG D#46 => D#48
              # DEBUG __p => _33
              # DEBUG this => D#45
              # DEBUG D.55612 => D#46
              # .MEM_97 = VDEF <.MEM_72>
              operator delete (_33);

            }
            bb_43 (preds = {bb_18 bb_42 }, succs = {bb_61 bb_44 })
            {
              <bb 43>:
              # .MEM_63 = PHI <.MEM_72(18), .MEM_97(42)>
              # DEBUG D#55 => &MEM[(struct basic_string *)D#56]._M_dataplus
              # DEBUG this => D#55
              # DEBUG this => D#55
              # DEBUG this => D#55
              # .MEM_102 = VDEF <.MEM_63>
              MEM[(struct  &)__x_161 + 32] ={v} {CLOBBER};
              # DEBUG this => NULL
              # DEBUG this => NULL
              # DEBUG D#82 => D#90
              # DEBUG __p => __x_161
              # DEBUG this => D#82
              # DEBUG D#81 => D#82
              # DEBUG this => D#81
              # DEBUG D#80 => 1
              # DEBUG __p => __x_161
              # DEBUG __a => D#79
              # DEBUG __n => D#80
              # DEBUG D#78 => D#80
              # DEBUG D#77 => D#79
              # DEBUG D#75 => D#77
              # DEBUG D#76 => D#78
              # DEBUG __p => __x_161
              # DEBUG this => D#75
              # DEBUG D.55625 => D#76
              # .MEM_103 = VDEF <.MEM_102>
              operator delete (__x_161);
              # DEBUG __x => __x_31
              if (__x_31 == 0B)
                goto <bb 61>;
              else
                goto <bb 44>;

            }
            bb_44 (preds = {bb_43 }, succs = {bb_17 })
            {
              <bb 44>:
              goto <bb 17>;

            }
            loop_6 (header = 20, latch = 41, niter = )
            {
              bb_20 (preds = {bb_19 bb_41 }, succs = {bb_21 bb_22 })
              {
                <bb 20>:
                # .MEM_162 = PHI <.MEM_165(19), .MEM_96(41)>
                # __x_164 = PHI <__x_30(19), __x_37(41)>
                # DEBUG __x => __x_164
                # VUSE <.MEM_162>
                __x_36 = MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B];
                # DEBUG D#36 => __x_164
                # DEBUG __x => D#36
                # DEBUG this => this_6(D)
                # DEBUG __x => __x_36
                # DEBUG __x => __x_36
                if (__x_36 == 0B)
                  goto <bb 21>;
                else
                  goto <bb 22>;

              }
              bb_21 (preds = {bb_20 bb_63 }, succs = {bb_39 bb_40 })
              {
                <bb 21>:
                # .MEM_71 = PHI <.MEM_162(20), .MEM_160(63)>
                # VUSE <.MEM_71>
                __x_37 = MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B];
                # DEBUG D#37 => __x_164
                # DEBUG __x => D#37
                # DEBUG __y => NULL
                # DEBUG D#91 => this_6(D)
                # DEBUG __p => __x_164
                # DEBUG this => D#91
                # DEBUG D#90 => D#91
                # DEBUG D#89 => D#91
                # DEBUG D#88 => D#89
                # DEBUG __p => __x_164
                # DEBUG this => D#88
                # DEBUG D#87 => D#88
                # DEBUG this => __x_164
                # DEBUG D#86 => &__x_164->_M_value_field
                # DEBUG __r => D#86
                # DEBUG D#85 => D#87
                # DEBUG this => D#85
                # DEBUG D#84 => D#85
                # DEBUG this => D#84
                # DEBUG this => NULL
                # DEBUG D.52298 => NULL
                # DEBUG this => NULL
                # DEBUG __p => D#86
                # DEBUG this => D#61
                # DEBUG this => D#86
                # DEBUG D#56 => &D#86->first
                # DEBUG this => D#56
                # DEBUG this => D#56
                # DEBUG this => D#56
                # VUSE <.MEM_71>
                _39 = MEM[(char * *)__x_164 + 32B];
                # DEBUG D#3 => D#56
                # DEBUG this => D#3
                # DEBUG this => D#56
                _40 = &MEM[(const struct basic_string *)__x_164 + 32B].D.14356._M_local_buf;
                if (_39 != _40)
                  goto <bb 39>;
                else
                  goto <bb 40>;

              }
              bb_22 (preds = {bb_20 }, succs = {bb_23 })
              {
                <bb 22>:

              }
              bb_63 (preds = {bb_37 }, succs = {bb_21 })
              {
                <bb 63>:
                # .MEM_160 = PHI <.MEM_89(37)>
                goto <bb 21>;

              }
              bb_39 (preds = {bb_21 }, succs = {bb_40 })
              {
                <bb 39>:
                # DEBUG D#54 => MEM[(struct basic_string *)D#56].D.14356._M_allocated_capacity
                # DEBUG D#53 => D#54
                # DEBUG this => D#56
                # DEBUG __size => D#53
                # DEBUG D#52 => D#53
                # DEBUG D#3 => D#56
                # DEBUG this => D#3
                # DEBUG this => D#56
                # DEBUG D#51 => &MEM[(struct basic_string *)D#56]._M_dataplus
                # DEBUG D#49 => D#51
                # DEBUG D#50 => D#52 + 1
                # DEBUG __p => _39
                # DEBUG __a => D#49
                # DEBUG __n => D#50
                # DEBUG D#48 => D#50
                # DEBUG D#47 => D#49
                # DEBUG D#45 => D#47
                # DEBUG D#46 => D#48
                # DEBUG __p => _39
                # DEBUG this => D#45
                # DEBUG D.55645 => D#46
                # .MEM_90 = VDEF <.MEM_71>
                operator delete (_39);

              }
              bb_40 (preds = {bb_21 bb_39 }, succs = {bb_62 bb_41 })
              {
                <bb 40>:
                # .MEM_62 = PHI <.MEM_71(21), .MEM_90(39)>
                # DEBUG D#55 => &MEM[(struct basic_string *)D#56]._M_dataplus
                # DEBUG this => D#55
                # DEBUG this => D#55
                # DEBUG this => D#55
                # .MEM_95 = VDEF <.MEM_62>
                MEM[(struct  &)__x_164 + 32] ={v} {CLOBBER};
                # DEBUG this => NULL
                # DEBUG this => NULL
                # DEBUG D#82 => D#90
                # DEBUG __p => __x_164
                # DEBUG this => D#82
                # DEBUG D#81 => D#82
                # DEBUG this => D#81
                # DEBUG D#80 => 1
                # DEBUG __p => __x_164
                # DEBUG __a => D#79
                # DEBUG __n => D#80
                # DEBUG D#78 => D#80
                # DEBUG D#77 => D#79
                # DEBUG D#75 => D#77
                # DEBUG D#76 => D#78
                # DEBUG __p => __x_164
                # DEBUG this => D#75
                # DEBUG D.55658 => D#76
                # .MEM_96 = VDEF <.MEM_95>
                operator delete (__x_164);
                # DEBUG __x => __x_37
                if (__x_37 == 0B)
                  goto <bb 62>;
                else
                  goto <bb 41>;

              }
              bb_41 (preds = {bb_40 }, succs = {bb_20 })
              {
                <bb 41>:
                goto <bb 20>;

              }
              loop_7 (header = 23, latch = 38, niter = )
              {
                bb_23 (preds = {bb_22 bb_38 }, succs = {bb_24 bb_25 })
                {
                  <bb 23>:
                  # .MEM_159 = PHI <.MEM_162(22), .MEM_89(38)>
                  # __x_167 = PHI <__x_36(22), __x_43(38)>
                  # DEBUG __x => __x_167
                  # VUSE <.MEM_159>
                  __x_42 = MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B];
                  # DEBUG D#36 => __x_167
                  # DEBUG __x => D#36
                  # DEBUG this => this_6(D)
                  # DEBUG __x => __x_42
                  # DEBUG __x => __x_42
                  if (__x_42 == 0B)
                    goto <bb 24>;
                  else
                    goto <bb 25>;

                }
                bb_24 (preds = {bb_23 bb_64 }, succs = {bb_36 bb_37 })
                {
                  <bb 24>:
                  # .MEM_70 = PHI <.MEM_159(23), .MEM_157(64)>
                  # VUSE <.MEM_70>
                  __x_43 = MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B];
                  # DEBUG D#37 => __x_167
                  # DEBUG __x => D#37
                  # DEBUG __y => NULL
                  # DEBUG D#91 => this_6(D)
                  # DEBUG __p => __x_167
                  # DEBUG this => D#91
                  # DEBUG D#90 => D#91
                  # DEBUG D#89 => D#91
                  # DEBUG D#88 => D#89
                  # DEBUG __p => __x_167
                  # DEBUG this => D#88
                  # DEBUG D#87 => D#88
                  # DEBUG this => __x_167
                  # DEBUG D#86 => &__x_167->_M_value_field
                  # DEBUG __r => D#86
                  # DEBUG D#85 => D#87
                  # DEBUG this => D#85
                  # DEBUG D#84 => D#85
                  # DEBUG this => D#84
                  # DEBUG this => NULL
                  # DEBUG D.52298 => NULL
                  # DEBUG this => NULL
                  # DEBUG __p => D#86
                  # DEBUG this => D#61
                  # DEBUG this => D#86
                  # DEBUG D#56 => &D#86->first
                  # DEBUG this => D#56
                  # DEBUG this => D#56
                  # DEBUG this => D#56
                  # VUSE <.MEM_70>
                  _45 = MEM[(char * *)__x_167 + 32B];
                  # DEBUG D#3 => D#56
                  # DEBUG this => D#3
                  # DEBUG this => D#56
                  _46 = &MEM[(const struct basic_string *)__x_167 + 32B].D.14356._M_local_buf;
                  if (_45 != _46)
                    goto <bb 36>;
                  else
                    goto <bb 37>;

                }
                bb_25 (preds = {bb_23 }, succs = {bb_26 })
                {
                  <bb 25>:

                }
                bb_64 (preds = {bb_34 }, succs = {bb_24 })
                {
                  <bb 64>:
                  # .MEM_157 = PHI <.MEM_82(34)>
                  goto <bb 24>;

                }
                bb_36 (preds = {bb_24 }, succs = {bb_37 })
                {
                  <bb 36>:
                  # DEBUG D#54 => MEM[(struct basic_string *)D#56].D.14356._M_allocated_capacity
                  # DEBUG D#53 => D#54
                  # DEBUG this => D#56
                  # DEBUG __size => D#53
                  # DEBUG D#52 => D#53
                  # DEBUG D#3 => D#56
                  # DEBUG this => D#3
                  # DEBUG this => D#56
                  # DEBUG D#51 => &MEM[(struct basic_string *)D#56]._M_dataplus
                  # DEBUG D#49 => D#51
                  # DEBUG D#50 => D#52 + 1
                  # DEBUG __p => _45
                  # DEBUG __a => D#49
                  # DEBUG __n => D#50
                  # DEBUG D#48 => D#50
                  # DEBUG D#47 => D#49
                  # DEBUG D#45 => D#47
                  # DEBUG D#46 => D#48
                  # DEBUG __p => _45
                  # DEBUG this => D#45
                  # DEBUG D.55678 => D#46
                  # .MEM_83 = VDEF <.MEM_70>
                  operator delete (_45);

                }
                bb_37 (preds = {bb_24 bb_36 }, succs = {bb_63 bb_38 })
                {
                  <bb 37>:
                  # .MEM_61 = PHI <.MEM_70(24), .MEM_83(36)>
                  # DEBUG D#55 => &MEM[(struct basic_string *)D#56]._M_dataplus
                  # DEBUG this => D#55
                  # DEBUG this => D#55
                  # DEBUG this => D#55
                  # .MEM_88 = VDEF <.MEM_61>
                  MEM[(struct  &)__x_167 + 32] ={v} {CLOBBER};
                  # DEBUG this => NULL
                  # DEBUG this => NULL
                  # DEBUG D#82 => D#90
                  # DEBUG __p => __x_167
                  # DEBUG this => D#82
                  # DEBUG D#81 => D#82
                  # DEBUG this => D#81
                  # DEBUG D#80 => 1
                  # DEBUG __p => __x_167
                  # DEBUG __a => D#79
                  # DEBUG __n => D#80
                  # DEBUG D#78 => D#80
                  # DEBUG D#77 => D#79
                  # DEBUG D#75 => D#77
                  # DEBUG D#76 => D#78
                  # DEBUG __p => __x_167
                  # DEBUG this => D#75
                  # DEBUG D.55691 => D#76
                  # .MEM_89 = VDEF <.MEM_88>
                  operator delete (__x_167);
                  # DEBUG __x => __x_43
                  if (__x_43 == 0B)
                    goto <bb 63>;
                  else
                    goto <bb 38>;

                }
                bb_38 (preds = {bb_37 }, succs = {bb_23 })
                {
                  <bb 38>:
                  goto <bb 23>;

                }
                loop_8 (header = 26, latch = 35, niter = )
                {
                  bb_26 (preds = {bb_25 bb_35 }, succs = {bb_27 bb_28 })
                  {
                    <bb 26>:
                    # .MEM_156 = PHI <.MEM_159(25), .MEM_82(35)>
                    # __x_170 = PHI <__x_42(25), __x_49(35)>
                    # DEBUG __x => __x_170
                    # VUSE <.MEM_156>
                    __x_48 = MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B];
                    # DEBUG D#36 => __x_170
                    # DEBUG __x => D#36
                    # DEBUG this => this_6(D)
                    # DEBUG __x => __x_48
                    # DEBUG __x => __x_48
                    if (__x_48 == 0B)
                      goto <bb 27>;
                    else
                      goto <bb 28>;

                  }
                  bb_27 (preds = {bb_26 bb_65 }, succs = {bb_33 bb_34 })
                  {
                    <bb 27>:
                    # .MEM_84 = PHI <.MEM_156(26), .MEM_154(65)>
                    # VUSE <.MEM_84>
                    __x_49 = MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B];
                    # DEBUG D#37 => __x_170
                    # DEBUG __x => D#37
                    # DEBUG __y => NULL
                    # DEBUG D#91 => this_6(D)
                    # DEBUG __p => __x_170
                    # DEBUG this => D#91
                    # DEBUG D#90 => D#91
                    # DEBUG D#89 => D#91
                    # DEBUG D#88 => D#89
                    # DEBUG __p => __x_170
                    # DEBUG this => D#88
                    # DEBUG D#87 => D#88
                    # DEBUG this => __x_170
                    # DEBUG D#86 => &__x_170->_M_value_field
                    # DEBUG __r => D#86
                    # DEBUG D#85 => D#87
                    # DEBUG this => D#85
                    # DEBUG D#84 => D#85
                    # DEBUG this => D#84
                    # DEBUG this => NULL
                    # DEBUG D.52298 => NULL
                    # DEBUG this => NULL
                    # DEBUG __p => D#86
                    # DEBUG this => D#61
                    # DEBUG this => D#86
                    # DEBUG D#56 => &D#86->first
                    # DEBUG this => D#56
                    # DEBUG this => D#56
                    # DEBUG this => D#56
                    # VUSE <.MEM_84>
                    _51 = MEM[(char * *)__x_170 + 32B];
                    # DEBUG D#3 => D#56
                    # DEBUG this => D#3
                    # DEBUG this => D#56
                    _52 = &MEM[(const struct basic_string *)__x_170 + 32B].D.14356._M_local_buf;
                    if (_51 != _52)
                      goto <bb 33>;
                    else
                      goto <bb 34>;

                  }
                  bb_28 (preds = {bb_26 }, succs = {bb_29 })
                  {
                    <bb 28>:

                  }
                  bb_65 (preds = {bb_31 }, succs = {bb_27 })
                  {
                    <bb 65>:
                    # .MEM_154 = PHI <.MEM_75(31)>
                    goto <bb 27>;

                  }
                  bb_33 (preds = {bb_27 }, succs = {bb_34 })
                  {
                    <bb 33>:
                    # DEBUG D#54 => MEM[(struct basic_string *)D#56].D.14356._M_allocated_capacity
                    # DEBUG D#53 => D#54
                    # DEBUG this => D#56
                    # DEBUG __size => D#53
                    # DEBUG D#52 => D#53
                    # DEBUG D#3 => D#56
                    # DEBUG this => D#3
                    # DEBUG this => D#56
                    # DEBUG D#51 => &MEM[(struct basic_string *)D#56]._M_dataplus
                    # DEBUG D#49 => D#51
                    # DEBUG D#50 => D#52 + 1
                    # DEBUG __p => _51
                    # DEBUG __a => D#49
                    # DEBUG __n => D#50
                    # DEBUG D#48 => D#50
                    # DEBUG D#47 => D#49
                    # DEBUG D#45 => D#47
                    # DEBUG D#46 => D#48
                    # DEBUG __p => _51
                    # DEBUG this => D#45
                    # DEBUG D.55711 => D#46
                    # .MEM_76 = VDEF <.MEM_84>
                    operator delete (_51);

                  }
                  bb_34 (preds = {bb_27 bb_33 }, succs = {bb_64 bb_35 })
                  {
                    <bb 34>:
                    # .MEM_60 = PHI <.MEM_84(27), .MEM_76(33)>
                    # DEBUG D#55 => &MEM[(struct basic_string *)D#56]._M_dataplus
                    # DEBUG this => D#55
                    # DEBUG this => D#55
                    # DEBUG this => D#55
                    # .MEM_81 = VDEF <.MEM_60>
                    MEM[(struct  &)__x_170 + 32] ={v} {CLOBBER};
                    # DEBUG this => NULL
                    # DEBUG this => NULL
                    # DEBUG D#82 => D#90
                    # DEBUG __p => __x_170
                    # DEBUG this => D#82
                    # DEBUG D#81 => D#82
                    # DEBUG this => D#81
                    # DEBUG D#80 => 1
                    # DEBUG __p => __x_170
                    # DEBUG __a => D#79
                    # DEBUG __n => D#80
                    # DEBUG D#78 => D#80
                    # DEBUG D#77 => D#79
                    # DEBUG D#75 => D#77
                    # DEBUG D#76 => D#78
                    # DEBUG __p => __x_170
                    # DEBUG this => D#75
                    # DEBUG D.55724 => D#76
                    # .MEM_82 = VDEF <.MEM_81>
                    operator delete (__x_170);
                    # DEBUG __x => __x_49
                    if (__x_49 == 0B)
                      goto <bb 64>;
                    else
                      goto <bb 35>;

                  }
                  bb_35 (preds = {bb_34 }, succs = {bb_26 })
                  {
                    <bb 35>:
                    goto <bb 26>;

                  }
                  loop_9 (header = 29, latch = 32, niter = )
                  {
                    bb_29 (preds = {bb_28 bb_32 }, succs = {bb_30 bb_31 })
                    {
                      <bb 29>:
                      # .MEM_153 = PHI <.MEM_156(28), .MEM_75(32)>
                      # __x_173 = PHI <__x_48(28), __x_55(32)>
                      # DEBUG __x => __x_173
                      # VUSE <.MEM_153>
                      _54 = MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B];
                      # DEBUG D#36 => __x_173
                      # DEBUG __x => D#36
                      # .MEM_68 = VDEF <.MEM_153>
                      std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> > >::_M_erase (this_6(D), _54);
                      # VUSE <.MEM_68>
                      __x_55 = MEM[(struct _Rb_tree_node_base * *)__x_173 + 16B];
                      # DEBUG D#37 => __x_173
                      # DEBUG __x => D#37
                      # DEBUG __y => NULL
                      # DEBUG D#91 => this_6(D)
                      # DEBUG __p => __x_173
                      # DEBUG this => D#91
                      # DEBUG D#90 => D#91
                      # DEBUG D#89 => D#91
                      # DEBUG D#88 => D#89
                      # DEBUG __p => __x_173
                      # DEBUG this => D#88
                      # DEBUG D#87 => D#88
                      # DEBUG this => __x_173
                      # DEBUG D#86 => &__x_173->_M_value_field
                      # DEBUG __r => D#86
                      # DEBUG D#85 => D#87
                      # DEBUG this => D#85
                      # DEBUG D#84 => D#85
                      # DEBUG this => D#84
                      # DEBUG this => NULL
                      # DEBUG D.52298 => NULL
                      # DEBUG this => NULL
                      # DEBUG __p => D#86
                      # DEBUG this => D#61
                      # DEBUG this => D#86
                      # DEBUG D#56 => &D#86->first
                      # DEBUG this => D#56
                      # DEBUG this => D#56
                      # DEBUG this => D#56
                      # VUSE <.MEM_68>
                      _57 = MEM[(char * *)__x_173 + 32B];
                      # DEBUG D#3 => D#56
                      # DEBUG this => D#3
                      # DEBUG this => D#56
                      _58 = &MEM[(const struct basic_string *)__x_173 + 32B].D.14356._M_local_buf;
                      if (_57 != _58)
                        goto <bb 30>;
                      else
                        goto <bb 31>;

                    }
                    bb_30 (preds = {bb_29 }, succs = {bb_31 })
                    {
                      <bb 30>:
                      # DEBUG D#54 => MEM[(struct basic_string *)D#56].D.14356._M_allocated_capacity
                      # DEBUG D#53 => D#54
                      # DEBUG this => D#56
                      # DEBUG __size => D#53
                      # DEBUG D#52 => D#53
                      # DEBUG D#3 => D#56
                      # DEBUG this => D#3
                      # DEBUG this => D#56
                      # DEBUG D#51 => &MEM[(struct basic_string *)D#56]._M_dataplus
                      # DEBUG D#49 => D#51
                      # DEBUG D#50 => D#52 + 1
                      # DEBUG __p => _57
                      # DEBUG __a => D#49
                      # DEBUG __n => D#50
                      # DEBUG D#48 => D#50
                      # DEBUG D#47 => D#49
                      # DEBUG D#45 => D#47
                      # DEBUG D#46 => D#48
                      # DEBUG __p => _57
                      # DEBUG this => D#45
                      # DEBUG D.55744 => D#46
                      # .MEM_69 = VDEF <.MEM_68>
                      operator delete (_57);

                    }
                    bb_31 (preds = {bb_29 bb_30 }, succs = {bb_65 bb_32 })
                    {
                      <bb 31>:
                      # .MEM_59 = PHI <.MEM_68(29), .MEM_69(30)>
                      # DEBUG D#55 => &MEM[(struct basic_string *)D#56]._M_dataplus
                      # DEBUG this => D#55
                      # DEBUG this => D#55
                      # DEBUG this => D#55
                      # .MEM_74 = VDEF <.MEM_59>
                      MEM[(struct  &)__x_173 + 32] ={v} {CLOBBER};
                      # DEBUG this => NULL
                      # DEBUG this => NULL
                      # DEBUG D#82 => D#90
                      # DEBUG __p => __x_173
                      # DEBUG this => D#82
                      # DEBUG D#81 => D#82
                      # DEBUG this => D#81
                      # DEBUG D#80 => 1
                      # DEBUG __p => __x_173
                      # DEBUG __a => D#79
                      # DEBUG __n => D#80
                      # DEBUG D#78 => D#80
                      # DEBUG D#77 => D#79
                      # DEBUG D#75 => D#77
                      # DEBUG D#76 => D#78
                      # DEBUG __p => __x_173
                      # DEBUG this => D#75
                      # DEBUG D.55757 => D#76
                      # .MEM_75 = VDEF <.MEM_74>
                      operator delete (__x_173);
                      # DEBUG __x => __x_55
                      if (__x_55 == 0B)
                        goto <bb 65>;
                      else
                        goto <bb 32>;

                    }
                    bb_32 (preds = {bb_31 }, succs = {bb_29 })
                    {
                      <bb 32>:
                      goto <bb 29>;

                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

Pass statistics:
----------------

void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)>; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >*] (struct _Rb_treeD.44499 * const thisD.44860, struct _Rb_tree_nodeD.44503 * __xD.44861)
{
  struct _Rb_tree_nodeD.44503 * __xD.55727;
  struct _Rb_tree_nodeD.44503 * __xD.55694;
  struct _Rb_tree_nodeD.44503 * __xD.55661;
  struct _Rb_tree_nodeD.44503 * __xD.55628;
  struct _Rb_tree_nodeD.44503 * __xD.55595;
  struct _Rb_tree_nodeD.44503 * __xD.55562;
  struct _Rb_tree_nodeD.44503 * __xD.55529;
  struct _Rb_tree_nodeD.44503 * __xD.55496;
  charD.10 * const _7;
  charD.10 * const _11;
  const charD.10 * _12;
  const charD.10 * _16;
  charD.10 * const _21;
  const charD.10 * _22;
  charD.10 * const _27;
  const charD.10 * _28;
  charD.10 * const _33;
  const charD.10 * _34;
  charD.10 * const _39;
  const charD.10 * _40;
  charD.10 * const _45;
  const charD.10 * _46;
  charD.10 * const _51;
  const charD.10 * _52;
  struct _Rb_tree_node_baseD.6878 * _54;
  charD.10 * const _57;
  const charD.10 * _58;

;;   basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG __xD.44861 => __x_3(D)
  if (__x_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 2, next block 66, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                57 [100.0%]  (FALLTHRU)
  # .MEM_80 = PHI <.MEM_4(D)(2), .MEM_151(57)>
;;    succ:       66 [100.0%]  (FALLTHRU)

;;   basic block 66, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 3, next block 4, flags: (NEW)
;;    pred:       3 [100.0%]  (FALLTHRU)
  # VUSE <.MEM_80>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 66, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                56 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_149 = PHI <__x_3(D)(4), __x_10(56)>
  # .MEM_150 = PHI <.MEM_4(D)(4), .MEM_131(56)>
  # DEBUG __xD.44861 => __x_149
  # VUSE <.MEM_150>
  # PT = nonlocal escaped 
  __x_9 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_149 + 24B];
  # DEBUG D#36ptD.0 => __x_149
  # DEBUG __xD.52428 => D#36ptD.0
  # DEBUG thisD.55495 => this_6(D)
  # DEBUG __xD.55496 => __x_9
  # DEBUG __xD.55496 => __x_9
  if (__x_9 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                58 [100.0%]  (FALLTHRU)
  # .MEM_79 = PHI <.MEM_150(5), .MEM_175(58)>
  # VUSE <.MEM_79>
  # PT = nonlocal escaped 
  __x_10 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_149 + 16B];
  # DEBUG D#37ptD.0 => __x_149
  # DEBUG __xD.52425 => D#37ptD.0
  # DEBUG __yD.46634 => NULL
  # DEBUG D#91ptD.0 => this_6(D)
  # DEBUG __pD.55465 => __x_149
  # DEBUG thisD.55466 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#88ptD.0 => D#89ptD.0
  # DEBUG __pD.55468 => __x_149
  # DEBUG thisD.55467 => D#88ptD.0
  # DEBUG D#87ptD.0 => D#88ptD.0
  # DEBUG thisD.52337 => __x_149
  # DEBUG D#86ptD.0 => &__x_149->_M_value_fieldD.46493
  # DEBUG __rD.51667 => D#86ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG thisD.52329 => D#85ptD.0
  # DEBUG D#84ptD.0 => D#85ptD.0
  # DEBUG thisD.52305 => D#84ptD.0
  # DEBUG thisD.52297 => NULL
  # DEBUG D.52298 => NULL
  # DEBUG thisD.52295 => NULL
  # DEBUG __pD.55470 => D#86ptD.0
  # DEBUG thisD.55469 => D#61ptD.0
  # DEBUG thisD.55471 => D#86ptD.0
  # DEBUG D#56ptD.0 => &D#86ptD.0->firstD.46174
  # DEBUG thisD.55472 => D#56ptD.0
  # DEBUG thisD.55473 => D#56ptD.0
  # DEBUG thisD.55482 => D#56ptD.0
  # VUSE <.MEM_79>
  # PT = nonlocal escaped 
  _11 = MEM[(charD.10 * *)__x_149 + 32B];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.55483 => D#56ptD.0
  # PT = nonlocal escaped 
  _12 = &MEM[(const struct basic_stringD.9877 *)__x_149 + 32B].D.14356._M_local_bufD.14358;
  if (_11 != _12)
    goto <bb 54>;
  else
    goto <bb 55>;
;;    succ:       54 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                55 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 6, next block 8, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 7, next block 9, flags: (NEW)
;;    pred:       7 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                53 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_152 = PHI <__x_9(7), __x_14(53)>
  # .MEM_174 = PHI <.MEM_150(7), .MEM_124(53)>
  # DEBUG __xD.55496 => __x_152
  # VUSE <.MEM_174>
  # PT = nonlocal escaped 
  __x_13 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_152 + 24B];
  # DEBUG D#36ptD.0 => __x_152
  # DEBUG __xD.52428 => D#36ptD.0
  # DEBUG thisD.55528 => this_6(D)
  # DEBUG __xD.55529 => __x_13
  # DEBUG __xD.55529 => __x_13
  if (__x_13 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                59 [100.0%]  (FALLTHRU)
  # .MEM_78 = PHI <.MEM_174(8), .MEM_172(59)>
  # VUSE <.MEM_78>
  # PT = nonlocal escaped 
  __x_14 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_152 + 16B];
  # DEBUG D#37ptD.0 => __x_152
  # DEBUG __xD.52425 => D#37ptD.0
  # DEBUG __yD.55497 => NULL
  # DEBUG D#91ptD.0 => this_6(D)
  # DEBUG __pD.55498 => __x_152
  # DEBUG thisD.55499 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#88ptD.0 => D#89ptD.0
  # DEBUG __pD.55501 => __x_152
  # DEBUG thisD.55500 => D#88ptD.0
  # DEBUG D#87ptD.0 => D#88ptD.0
  # DEBUG thisD.52337 => __x_152
  # DEBUG D#86ptD.0 => &__x_152->_M_value_fieldD.46493
  # DEBUG __rD.51667 => D#86ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG thisD.52329 => D#85ptD.0
  # DEBUG D#84ptD.0 => D#85ptD.0
  # DEBUG thisD.52305 => D#84ptD.0
  # DEBUG thisD.52297 => NULL
  # DEBUG D.52298 => NULL
  # DEBUG thisD.52295 => NULL
  # DEBUG __pD.55503 => D#86ptD.0
  # DEBUG thisD.55502 => D#61ptD.0
  # DEBUG thisD.55504 => D#86ptD.0
  # DEBUG D#56ptD.0 => &D#86ptD.0->firstD.46174
  # DEBUG thisD.55505 => D#56ptD.0
  # DEBUG thisD.55506 => D#56ptD.0
  # DEBUG thisD.55515 => D#56ptD.0
  # VUSE <.MEM_78>
  # PT = nonlocal escaped 
  _7 = MEM[(charD.10 * *)__x_152 + 32B];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.55516 => D#56ptD.0
  # PT = nonlocal escaped 
  _16 = &MEM[(const struct basic_stringD.9877 *)__x_152 + 32B].D.14356._M_local_bufD.14358;
  if (_7 != _16)
    goto <bb 51>;
  else
    goto <bb 52>;
;;    succ:       51 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                52 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 9, next block 11, flags: (NEW)
;;    pred:       8 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 10, next block 12, flags: (NEW)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                50 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_155 = PHI <__x_13(10), __x_19(50)>
  # .MEM_171 = PHI <.MEM_174(10), .MEM_117(50)>
  # DEBUG __xD.55529 => __x_155
  # VUSE <.MEM_171>
  # PT = nonlocal escaped 
  __x_18 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_155 + 24B];
  # DEBUG D#36ptD.0 => __x_155
  # DEBUG __xD.52428 => D#36ptD.0
  # DEBUG thisD.55561 => this_6(D)
  # DEBUG __xD.55562 => __x_18
  # DEBUG __xD.55562 => __x_18
  if (__x_18 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;
;;    succ:       12 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                60 [100.0%]  (FALLTHRU)
  # .MEM_77 = PHI <.MEM_171(11), .MEM_169(60)>
  # VUSE <.MEM_77>
  # PT = nonlocal escaped 
  __x_19 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_155 + 16B];
  # DEBUG D#37ptD.0 => __x_155
  # DEBUG __xD.52425 => D#37ptD.0
  # DEBUG __yD.55530 => NULL
  # DEBUG D#91ptD.0 => this_6(D)
  # DEBUG __pD.55531 => __x_155
  # DEBUG thisD.55532 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#88ptD.0 => D#89ptD.0
  # DEBUG __pD.55534 => __x_155
  # DEBUG thisD.55533 => D#88ptD.0
  # DEBUG D#87ptD.0 => D#88ptD.0
  # DEBUG thisD.52337 => __x_155
  # DEBUG D#86ptD.0 => &__x_155->_M_value_fieldD.46493
  # DEBUG __rD.51667 => D#86ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG thisD.52329 => D#85ptD.0
  # DEBUG D#84ptD.0 => D#85ptD.0
  # DEBUG thisD.52305 => D#84ptD.0
  # DEBUG thisD.52297 => NULL
  # DEBUG D.52298 => NULL
  # DEBUG thisD.52295 => NULL
  # DEBUG __pD.55536 => D#86ptD.0
  # DEBUG thisD.55535 => D#61ptD.0
  # DEBUG thisD.55537 => D#86ptD.0
  # DEBUG D#56ptD.0 => &D#86ptD.0->firstD.46174
  # DEBUG thisD.55538 => D#56ptD.0
  # DEBUG thisD.55539 => D#56ptD.0
  # DEBUG thisD.55548 => D#56ptD.0
  # VUSE <.MEM_77>
  # PT = nonlocal escaped 
  _21 = MEM[(charD.10 * *)__x_155 + 32B];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.55549 => D#56ptD.0
  # PT = nonlocal escaped 
  _22 = &MEM[(const struct basic_stringD.9877 *)__x_155 + 32B].D.14356._M_local_bufD.14358;
  if (_21 != _22)
    goto <bb 48>;
  else
    goto <bb 49>;
;;    succ:       48 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                49 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 13, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 12, next block 14, flags: (NEW)
;;    pred:       11 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       14 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 13, next block 15, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                47 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_158 = PHI <__x_18(13), __x_25(47)>
  # .MEM_168 = PHI <.MEM_171(13), .MEM_110(47)>
  # DEBUG __xD.55562 => __x_158
  # VUSE <.MEM_168>
  # PT = nonlocal escaped 
  __x_24 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_158 + 24B];
  # DEBUG D#36ptD.0 => __x_158
  # DEBUG __xD.52428 => D#36ptD.0
  # DEBUG thisD.55594 => this_6(D)
  # DEBUG __xD.55595 => __x_24
  # DEBUG __xD.55595 => __x_24
  if (__x_24 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;
;;    succ:       15 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                61 [100.0%]  (FALLTHRU)
  # .MEM_73 = PHI <.MEM_168(14), .MEM_166(61)>
  # VUSE <.MEM_73>
  # PT = nonlocal escaped 
  __x_25 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_158 + 16B];
  # DEBUG D#37ptD.0 => __x_158
  # DEBUG __xD.52425 => D#37ptD.0
  # DEBUG __yD.55563 => NULL
  # DEBUG D#91ptD.0 => this_6(D)
  # DEBUG __pD.55564 => __x_158
  # DEBUG thisD.55565 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#88ptD.0 => D#89ptD.0
  # DEBUG __pD.55567 => __x_158
  # DEBUG thisD.55566 => D#88ptD.0
  # DEBUG D#87ptD.0 => D#88ptD.0
  # DEBUG thisD.52337 => __x_158
  # DEBUG D#86ptD.0 => &__x_158->_M_value_fieldD.46493
  # DEBUG __rD.51667 => D#86ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG thisD.52329 => D#85ptD.0
  # DEBUG D#84ptD.0 => D#85ptD.0
  # DEBUG thisD.52305 => D#84ptD.0
  # DEBUG thisD.52297 => NULL
  # DEBUG D.52298 => NULL
  # DEBUG thisD.52295 => NULL
  # DEBUG __pD.55569 => D#86ptD.0
  # DEBUG thisD.55568 => D#61ptD.0
  # DEBUG thisD.55570 => D#86ptD.0
  # DEBUG D#56ptD.0 => &D#86ptD.0->firstD.46174
  # DEBUG thisD.55571 => D#56ptD.0
  # DEBUG thisD.55572 => D#56ptD.0
  # DEBUG thisD.55581 => D#56ptD.0
  # VUSE <.MEM_73>
  # PT = nonlocal escaped 
  _27 = MEM[(charD.10 * *)__x_158 + 32B];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.55582 => D#56ptD.0
  # PT = nonlocal escaped 
  _28 = &MEM[(const struct basic_stringD.9877 *)__x_158 + 32B].D.14356._M_local_bufD.14358;
  if (_27 != _28)
    goto <bb 45>;
  else
    goto <bb 46>;
;;    succ:       45 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                46 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 15, next block 17, flags: (NEW)
;;    pred:       14 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       17 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 16, next block 18, flags: (NEW)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                44 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_161 = PHI <__x_24(16), __x_31(44)>
  # .MEM_165 = PHI <.MEM_168(16), .MEM_103(44)>
  # DEBUG __xD.55595 => __x_161
  # VUSE <.MEM_165>
  # PT = nonlocal escaped 
  __x_30 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_161 + 24B];
  # DEBUG D#36ptD.0 => __x_161
  # DEBUG __xD.52428 => D#36ptD.0
  # DEBUG thisD.55627 => this_6(D)
  # DEBUG __xD.55628 => __x_30
  # DEBUG __xD.55628 => __x_30
  if (__x_30 == 0B)
    goto <bb 18>;
  else
    goto <bb 19>;
;;    succ:       18 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                19 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 18, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       17 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                62 [100.0%]  (FALLTHRU)
  # .MEM_72 = PHI <.MEM_165(17), .MEM_163(62)>
  # VUSE <.MEM_72>
  # PT = nonlocal escaped 
  __x_31 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_161 + 16B];
  # DEBUG D#37ptD.0 => __x_161
  # DEBUG __xD.52425 => D#37ptD.0
  # DEBUG __yD.55596 => NULL
  # DEBUG D#91ptD.0 => this_6(D)
  # DEBUG __pD.55597 => __x_161
  # DEBUG thisD.55598 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#88ptD.0 => D#89ptD.0
  # DEBUG __pD.55600 => __x_161
  # DEBUG thisD.55599 => D#88ptD.0
  # DEBUG D#87ptD.0 => D#88ptD.0
  # DEBUG thisD.52337 => __x_161
  # DEBUG D#86ptD.0 => &__x_161->_M_value_fieldD.46493
  # DEBUG __rD.51667 => D#86ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG thisD.52329 => D#85ptD.0
  # DEBUG D#84ptD.0 => D#85ptD.0
  # DEBUG thisD.52305 => D#84ptD.0
  # DEBUG thisD.52297 => NULL
  # DEBUG D.52298 => NULL
  # DEBUG thisD.52295 => NULL
  # DEBUG __pD.55602 => D#86ptD.0
  # DEBUG thisD.55601 => D#61ptD.0
  # DEBUG thisD.55603 => D#86ptD.0
  # DEBUG D#56ptD.0 => &D#86ptD.0->firstD.46174
  # DEBUG thisD.55604 => D#56ptD.0
  # DEBUG thisD.55605 => D#56ptD.0
  # DEBUG thisD.55614 => D#56ptD.0
  # VUSE <.MEM_72>
  # PT = nonlocal escaped 
  _33 = MEM[(charD.10 * *)__x_161 + 32B];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.55615 => D#56ptD.0
  # PT = nonlocal escaped 
  _34 = &MEM[(const struct basic_stringD.9877 *)__x_161 + 32B].D.14356._M_local_bufD.14358;
  if (_33 != _34)
    goto <bb 42>;
  else
    goto <bb 43>;
;;    succ:       42 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                43 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 18, next block 20, flags: (NEW)
;;    pred:       17 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 6, count 0, freq 9, maybe hot
;;    prev block 19, next block 21, flags: (NEW)
;;    pred:       19 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_162 = PHI <.MEM_165(19), .MEM_96(41)>
  # PT = nonlocal escaped 
  # __x_164 = PHI <__x_30(19), __x_37(41)>
  # DEBUG __xD.55628 => __x_164
  # VUSE <.MEM_162>
  # PT = nonlocal escaped 
  __x_36 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_164 + 24B];
  # DEBUG D#36ptD.0 => __x_164
  # DEBUG __xD.52428 => D#36ptD.0
  # DEBUG thisD.55660 => this_6(D)
  # DEBUG __xD.55661 => __x_36
  # DEBUG __xD.55661 => __x_36
  if (__x_36 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;
;;    succ:       21 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 6, count 0, freq 9, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                63 [100.0%]  (FALLTHRU)
  # .MEM_71 = PHI <.MEM_162(20), .MEM_160(63)>
  # VUSE <.MEM_71>
  # PT = nonlocal escaped 
  __x_37 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_164 + 16B];
  # DEBUG D#37ptD.0 => __x_164
  # DEBUG __xD.52425 => D#37ptD.0
  # DEBUG __yD.55629 => NULL
  # DEBUG D#91ptD.0 => this_6(D)
  # DEBUG __pD.55630 => __x_164
  # DEBUG thisD.55631 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#88ptD.0 => D#89ptD.0
  # DEBUG __pD.55633 => __x_164
  # DEBUG thisD.55632 => D#88ptD.0
  # DEBUG D#87ptD.0 => D#88ptD.0
  # DEBUG thisD.52337 => __x_164
  # DEBUG D#86ptD.0 => &__x_164->_M_value_fieldD.46493
  # DEBUG __rD.51667 => D#86ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG thisD.52329 => D#85ptD.0
  # DEBUG D#84ptD.0 => D#85ptD.0
  # DEBUG thisD.52305 => D#84ptD.0
  # DEBUG thisD.52297 => NULL
  # DEBUG D.52298 => NULL
  # DEBUG thisD.52295 => NULL
  # DEBUG __pD.55635 => D#86ptD.0
  # DEBUG thisD.55634 => D#61ptD.0
  # DEBUG thisD.55636 => D#86ptD.0
  # DEBUG D#56ptD.0 => &D#86ptD.0->firstD.46174
  # DEBUG thisD.55637 => D#56ptD.0
  # DEBUG thisD.55638 => D#56ptD.0
  # DEBUG thisD.55647 => D#56ptD.0
  # VUSE <.MEM_71>
  # PT = nonlocal escaped 
  _39 = MEM[(charD.10 * *)__x_164 + 32B];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.55648 => D#56ptD.0
  # PT = nonlocal escaped 
  _40 = &MEM[(const struct basic_stringD.9877 *)__x_164 + 32B].D.14356._M_local_bufD.14358;
  if (_39 != _40)
    goto <bb 39>;
  else
    goto <bb 40>;
;;    succ:       39 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 21, next block 23, flags: (NEW)
;;    pred:       20 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 7, count 0, freq 89, maybe hot
;;    prev block 22, next block 24, flags: (NEW)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                38 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_159 = PHI <.MEM_162(22), .MEM_89(38)>
  # PT = nonlocal escaped 
  # __x_167 = PHI <__x_36(22), __x_43(38)>
  # DEBUG __xD.55661 => __x_167
  # VUSE <.MEM_159>
  # PT = nonlocal escaped 
  __x_42 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_167 + 24B];
  # DEBUG D#36ptD.0 => __x_167
  # DEBUG __xD.52428 => D#36ptD.0
  # DEBUG thisD.55693 => this_6(D)
  # DEBUG __xD.55694 => __x_42
  # DEBUG __xD.55694 => __x_42
  if (__x_42 == 0B)
    goto <bb 24>;
  else
    goto <bb 25>;
;;    succ:       24 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 7, count 0, freq 89, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                64 [100.0%]  (FALLTHRU)
  # .MEM_70 = PHI <.MEM_159(23), .MEM_157(64)>
  # VUSE <.MEM_70>
  # PT = nonlocal escaped 
  __x_43 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_167 + 16B];
  # DEBUG D#37ptD.0 => __x_167
  # DEBUG __xD.52425 => D#37ptD.0
  # DEBUG __yD.55662 => NULL
  # DEBUG D#91ptD.0 => this_6(D)
  # DEBUG __pD.55663 => __x_167
  # DEBUG thisD.55664 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#88ptD.0 => D#89ptD.0
  # DEBUG __pD.55666 => __x_167
  # DEBUG thisD.55665 => D#88ptD.0
  # DEBUG D#87ptD.0 => D#88ptD.0
  # DEBUG thisD.52337 => __x_167
  # DEBUG D#86ptD.0 => &__x_167->_M_value_fieldD.46493
  # DEBUG __rD.51667 => D#86ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG thisD.52329 => D#85ptD.0
  # DEBUG D#84ptD.0 => D#85ptD.0
  # DEBUG thisD.52305 => D#84ptD.0
  # DEBUG thisD.52297 => NULL
  # DEBUG D.52298 => NULL
  # DEBUG thisD.52295 => NULL
  # DEBUG __pD.55668 => D#86ptD.0
  # DEBUG thisD.55667 => D#61ptD.0
  # DEBUG thisD.55669 => D#86ptD.0
  # DEBUG D#56ptD.0 => &D#86ptD.0->firstD.46174
  # DEBUG thisD.55670 => D#56ptD.0
  # DEBUG thisD.55671 => D#56ptD.0
  # DEBUG thisD.55680 => D#56ptD.0
  # VUSE <.MEM_70>
  # PT = nonlocal escaped 
  _45 = MEM[(charD.10 * *)__x_167 + 32B];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.55681 => D#56ptD.0
  # PT = nonlocal escaped 
  _46 = &MEM[(const struct basic_stringD.9877 *)__x_167 + 32B].D.14356._M_local_bufD.14358;
  if (_45 != _46)
    goto <bb 36>;
  else
    goto <bb 37>;
;;    succ:       36 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                37 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 25, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 24, next block 26, flags: (NEW)
;;    pred:       23 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 8, count 0, freq 900, maybe hot
;;    prev block 25, next block 27, flags: (NEW)
;;    pred:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                35 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_156 = PHI <.MEM_159(25), .MEM_82(35)>
  # PT = nonlocal escaped 
  # __x_170 = PHI <__x_42(25), __x_49(35)>
  # DEBUG __xD.55694 => __x_170
  # VUSE <.MEM_156>
  # PT = nonlocal escaped 
  __x_48 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_170 + 24B];
  # DEBUG D#36ptD.0 => __x_170
  # DEBUG __xD.52428 => D#36ptD.0
  # DEBUG thisD.55726 => this_6(D)
  # DEBUG __xD.55727 => __x_48
  # DEBUG __xD.55727 => __x_48
  if (__x_48 == 0B)
    goto <bb 27>;
  else
    goto <bb 28>;
;;    succ:       27 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 8, count 0, freq 900, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       26 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                65 [100.0%]  (FALLTHRU)
  # .MEM_84 = PHI <.MEM_156(26), .MEM_154(65)>
  # VUSE <.MEM_84>
  # PT = nonlocal escaped 
  __x_49 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_170 + 16B];
  # DEBUG D#37ptD.0 => __x_170
  # DEBUG __xD.52425 => D#37ptD.0
  # DEBUG __yD.55695 => NULL
  # DEBUG D#91ptD.0 => this_6(D)
  # DEBUG __pD.55696 => __x_170
  # DEBUG thisD.55697 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#88ptD.0 => D#89ptD.0
  # DEBUG __pD.55699 => __x_170
  # DEBUG thisD.55698 => D#88ptD.0
  # DEBUG D#87ptD.0 => D#88ptD.0
  # DEBUG thisD.52337 => __x_170
  # DEBUG D#86ptD.0 => &__x_170->_M_value_fieldD.46493
  # DEBUG __rD.51667 => D#86ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG thisD.52329 => D#85ptD.0
  # DEBUG D#84ptD.0 => D#85ptD.0
  # DEBUG thisD.52305 => D#84ptD.0
  # DEBUG thisD.52297 => NULL
  # DEBUG D.52298 => NULL
  # DEBUG thisD.52295 => NULL
  # DEBUG __pD.55701 => D#86ptD.0
  # DEBUG thisD.55700 => D#61ptD.0
  # DEBUG thisD.55702 => D#86ptD.0
  # DEBUG D#56ptD.0 => &D#86ptD.0->firstD.46174
  # DEBUG thisD.55703 => D#56ptD.0
  # DEBUG thisD.55704 => D#56ptD.0
  # DEBUG thisD.55713 => D#56ptD.0
  # VUSE <.MEM_84>
  # PT = nonlocal escaped 
  _51 = MEM[(charD.10 * *)__x_170 + 32B];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.55714 => D#56ptD.0
  # PT = nonlocal escaped 
  _52 = &MEM[(const struct basic_stringD.9877 *)__x_170 + 32B].D.14356._M_local_bufD.14358;
  if (_51 != _52)
    goto <bb 33>;
  else
    goto <bb 34>;
;;    succ:       33 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                34 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 28, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 27, next block 29, flags: (NEW)
;;    pred:       26 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       29 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 29, loop depth 9, count 0, freq 9100, maybe hot
;;    prev block 28, next block 30, flags: (NEW)
;;    pred:       28 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # .MEM_153 = PHI <.MEM_156(28), .MEM_75(32)>
  # PT = nonlocal escaped 
  # __x_173 = PHI <__x_48(28), __x_55(32)>
  # DEBUG __xD.55727 => __x_173
  # VUSE <.MEM_153>
  # PT = nonlocal escaped 
  _54 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_173 + 24B];
  # DEBUG D#36ptD.0 => __x_173
  # DEBUG __xD.52428 => D#36ptD.0
  # .MEM_68 = VDEF <.MEM_153>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPK6RouterPK4FlitiP9OutputSetbEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_ED.44859 (this_6(D), _54);
  # VUSE <.MEM_68>
  # PT = nonlocal escaped 
  __x_55 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_173 + 16B];
  # DEBUG D#37ptD.0 => __x_173
  # DEBUG __xD.52425 => D#37ptD.0
  # DEBUG __yD.55728 => NULL
  # DEBUG D#91ptD.0 => this_6(D)
  # DEBUG __pD.55729 => __x_173
  # DEBUG thisD.55730 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#88ptD.0 => D#89ptD.0
  # DEBUG __pD.55732 => __x_173
  # DEBUG thisD.55731 => D#88ptD.0
  # DEBUG D#87ptD.0 => D#88ptD.0
  # DEBUG thisD.52337 => __x_173
  # DEBUG D#86ptD.0 => &__x_173->_M_value_fieldD.46493
  # DEBUG __rD.51667 => D#86ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG thisD.52329 => D#85ptD.0
  # DEBUG D#84ptD.0 => D#85ptD.0
  # DEBUG thisD.52305 => D#84ptD.0
  # DEBUG thisD.52297 => NULL
  # DEBUG D.52298 => NULL
  # DEBUG thisD.52295 => NULL
  # DEBUG __pD.55734 => D#86ptD.0
  # DEBUG thisD.55733 => D#61ptD.0
  # DEBUG thisD.55735 => D#86ptD.0
  # DEBUG D#56ptD.0 => &D#86ptD.0->firstD.46174
  # DEBUG thisD.55736 => D#56ptD.0
  # DEBUG thisD.55737 => D#56ptD.0
  # DEBUG thisD.55746 => D#56ptD.0
  # VUSE <.MEM_68>
  # PT = nonlocal escaped 
  _57 = MEM[(charD.10 * *)__x_173 + 32B];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.55747 => D#56ptD.0
  # PT = nonlocal escaped 
  _58 = &MEM[(const struct basic_stringD.9877 *)__x_173 + 32B].D.14356._M_local_bufD.14358;
  if (_57 != _58)
    goto <bb 30>;
  else
    goto <bb 31>;
;;    succ:       30 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 9, count 0, freq 7130, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.55739 => D#56ptD.0
  # DEBUG __sizeD.55738 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.55742 => _57
  # DEBUG __aD.55740 => D#49ptD.0
  # DEBUG __nD.55741 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.55745 => _57
  # DEBUG thisD.55743 => D#45ptD.0
  # DEBUG D.55744 => D#46ptD.0
  # .MEM_69 = VDEF <.MEM_68>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_57);
;;    succ:       31 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 31, loop depth 9, count 0, freq 9100, maybe hot
;;    prev block 30, next block 65, flags: (NEW, REACHABLE)
;;    pred:       29 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_59 = PHI <.MEM_68(29), .MEM_69(30)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.55748 => D#55ptD.0
  # DEBUG thisD.55749 => D#55ptD.0
  # DEBUG thisD.55750 => D#55ptD.0
  # .MEM_74 = VDEF <.MEM_59>
  MEM[(struct  &)__x_173 + 32] ={v} {CLOBBER};
  # DEBUG thisD.52356 => NULL
  # DEBUG thisD.52310 => NULL
  # DEBUG D#82ptD.0 => D#90ptD.0
  # DEBUG __pD.55752 => __x_173
  # DEBUG thisD.55751 => D#82ptD.0
  # DEBUG D#81ptD.0 => D#82ptD.0
  # DEBUG thisD.52268 => D#81ptD.0
  # DEBUG D#80ptD.0 => 1
  # DEBUG __pD.55755 => __x_173
  # DEBUG __aD.55753 => D#79ptD.0
  # DEBUG __nD.55754 => D#80ptD.0
  # DEBUG D#78ptD.0 => D#80ptD.0
  # DEBUG D#77ptD.0 => D#79ptD.0
  # DEBUG D#75ptD.0 => D#77ptD.0
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG __pD.55758 => __x_173
  # DEBUG thisD.55756 => D#75ptD.0
  # DEBUG D.55757 => D#76ptD.0
  # .MEM_75 = VDEF <.MEM_74>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_173);
  # DEBUG __xD.55727 => __x_55
  if (__x_55 == 0B)
    goto <bb 65>;
  else
    goto <bb 32>;
;;    succ:       65 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 65, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 31, next block 32, flags: (NEW)
;;    pred:       31 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_154 = PHI <.MEM_75(31)>
  goto <bb 27>;
;;    succ:       27 [100.0%]  (FALLTHRU)

;;   basic block 32, loop depth 9, count 0, freq 8281, maybe hot
;;    prev block 65, next block 33, flags: (NEW)
;;    pred:       31 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 29>;
;;    succ:       29 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 33, loop depth 8, count 0, freq 705, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       27 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.55706 => D#56ptD.0
  # DEBUG __sizeD.55705 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.55709 => _51
  # DEBUG __aD.55707 => D#49ptD.0
  # DEBUG __nD.55708 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.55712 => _51
  # DEBUG thisD.55710 => D#45ptD.0
  # DEBUG D.55711 => D#46ptD.0
  # .MEM_76 = VDEF <.MEM_84>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_51);
;;    succ:       34 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 8, count 0, freq 900, maybe hot
;;    prev block 33, next block 64, flags: (NEW, REACHABLE)
;;    pred:       27 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_60 = PHI <.MEM_84(27), .MEM_76(33)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.55715 => D#55ptD.0
  # DEBUG thisD.55716 => D#55ptD.0
  # DEBUG thisD.55717 => D#55ptD.0
  # .MEM_81 = VDEF <.MEM_60>
  MEM[(struct  &)__x_170 + 32] ={v} {CLOBBER};
  # DEBUG thisD.52356 => NULL
  # DEBUG thisD.52310 => NULL
  # DEBUG D#82ptD.0 => D#90ptD.0
  # DEBUG __pD.55719 => __x_170
  # DEBUG thisD.55718 => D#82ptD.0
  # DEBUG D#81ptD.0 => D#82ptD.0
  # DEBUG thisD.52268 => D#81ptD.0
  # DEBUG D#80ptD.0 => 1
  # DEBUG __pD.55722 => __x_170
  # DEBUG __aD.55720 => D#79ptD.0
  # DEBUG __nD.55721 => D#80ptD.0
  # DEBUG D#78ptD.0 => D#80ptD.0
  # DEBUG D#77ptD.0 => D#79ptD.0
  # DEBUG D#75ptD.0 => D#77ptD.0
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG __pD.55725 => __x_170
  # DEBUG thisD.55723 => D#75ptD.0
  # DEBUG D.55724 => D#76ptD.0
  # .MEM_82 = VDEF <.MEM_81>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_170);
  # DEBUG __xD.55694 => __x_49
  if (__x_49 == 0B)
    goto <bb 64>;
  else
    goto <bb 35>;
;;    succ:       64 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 64, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 34, next block 35, flags: (NEW)
;;    pred:       34 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_157 = PHI <.MEM_82(34)>
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU)

;;   basic block 35, loop depth 8, count 0, freq 819, maybe hot
;;    prev block 64, next block 36, flags: (NEW)
;;    pred:       34 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 26>;
;;    succ:       26 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 36, loop depth 7, count 0, freq 70, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       24 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.55673 => D#56ptD.0
  # DEBUG __sizeD.55672 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.55676 => _45
  # DEBUG __aD.55674 => D#49ptD.0
  # DEBUG __nD.55675 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.55679 => _45
  # DEBUG thisD.55677 => D#45ptD.0
  # DEBUG D.55678 => D#46ptD.0
  # .MEM_83 = VDEF <.MEM_70>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_45);
;;    succ:       37 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 37, loop depth 7, count 0, freq 89, maybe hot
;;    prev block 36, next block 63, flags: (NEW, REACHABLE)
;;    pred:       24 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                36 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_61 = PHI <.MEM_70(24), .MEM_83(36)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.55682 => D#55ptD.0
  # DEBUG thisD.55683 => D#55ptD.0
  # DEBUG thisD.55684 => D#55ptD.0
  # .MEM_88 = VDEF <.MEM_61>
  MEM[(struct  &)__x_167 + 32] ={v} {CLOBBER};
  # DEBUG thisD.52356 => NULL
  # DEBUG thisD.52310 => NULL
  # DEBUG D#82ptD.0 => D#90ptD.0
  # DEBUG __pD.55686 => __x_167
  # DEBUG thisD.55685 => D#82ptD.0
  # DEBUG D#81ptD.0 => D#82ptD.0
  # DEBUG thisD.52268 => D#81ptD.0
  # DEBUG D#80ptD.0 => 1
  # DEBUG __pD.55689 => __x_167
  # DEBUG __aD.55687 => D#79ptD.0
  # DEBUG __nD.55688 => D#80ptD.0
  # DEBUG D#78ptD.0 => D#80ptD.0
  # DEBUG D#77ptD.0 => D#79ptD.0
  # DEBUG D#75ptD.0 => D#77ptD.0
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG __pD.55692 => __x_167
  # DEBUG thisD.55690 => D#75ptD.0
  # DEBUG D.55691 => D#76ptD.0
  # .MEM_89 = VDEF <.MEM_88>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_167);
  # DEBUG __xD.55661 => __x_43
  if (__x_43 == 0B)
    goto <bb 63>;
  else
    goto <bb 38>;
;;    succ:       63 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 63, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 37, next block 38, flags: (NEW)
;;    pred:       37 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_160 = PHI <.MEM_89(37)>
  goto <bb 21>;
;;    succ:       21 [100.0%]  (FALLTHRU)

;;   basic block 38, loop depth 7, count 0, freq 81, maybe hot
;;    prev block 63, next block 39, flags: (NEW)
;;    pred:       37 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 39, loop depth 6, count 0, freq 7, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       21 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.55640 => D#56ptD.0
  # DEBUG __sizeD.55639 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.55643 => _39
  # DEBUG __aD.55641 => D#49ptD.0
  # DEBUG __nD.55642 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.55646 => _39
  # DEBUG thisD.55644 => D#45ptD.0
  # DEBUG D.55645 => D#46ptD.0
  # .MEM_90 = VDEF <.MEM_71>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_39);
;;    succ:       40 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 40, loop depth 6, count 0, freq 9, maybe hot
;;    prev block 39, next block 62, flags: (NEW, REACHABLE)
;;    pred:       21 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                39 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_62 = PHI <.MEM_71(21), .MEM_90(39)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.55649 => D#55ptD.0
  # DEBUG thisD.55650 => D#55ptD.0
  # DEBUG thisD.55651 => D#55ptD.0
  # .MEM_95 = VDEF <.MEM_62>
  MEM[(struct  &)__x_164 + 32] ={v} {CLOBBER};
  # DEBUG thisD.52356 => NULL
  # DEBUG thisD.52310 => NULL
  # DEBUG D#82ptD.0 => D#90ptD.0
  # DEBUG __pD.55653 => __x_164
  # DEBUG thisD.55652 => D#82ptD.0
  # DEBUG D#81ptD.0 => D#82ptD.0
  # DEBUG thisD.52268 => D#81ptD.0
  # DEBUG D#80ptD.0 => 1
  # DEBUG __pD.55656 => __x_164
  # DEBUG __aD.55654 => D#79ptD.0
  # DEBUG __nD.55655 => D#80ptD.0
  # DEBUG D#78ptD.0 => D#80ptD.0
  # DEBUG D#77ptD.0 => D#79ptD.0
  # DEBUG D#75ptD.0 => D#77ptD.0
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG __pD.55659 => __x_164
  # DEBUG thisD.55657 => D#75ptD.0
  # DEBUG D.55658 => D#76ptD.0
  # .MEM_96 = VDEF <.MEM_95>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_164);
  # DEBUG __xD.55628 => __x_37
  if (__x_37 == 0B)
    goto <bb 62>;
  else
    goto <bb 41>;
;;    succ:       62 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                41 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 62, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 40, next block 41, flags: (NEW)
;;    pred:       40 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_163 = PHI <.MEM_96(40)>
  goto <bb 18>;
;;    succ:       18 [100.0%]  (FALLTHRU)

;;   basic block 41, loop depth 6, count 0, freq 8, maybe hot
;;    prev block 62, next block 42, flags: (NEW)
;;    pred:       40 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 20>;
;;    succ:       20 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 42, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       18 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.55607 => D#56ptD.0
  # DEBUG __sizeD.55606 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.55610 => _33
  # DEBUG __aD.55608 => D#49ptD.0
  # DEBUG __nD.55609 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.55613 => _33
  # DEBUG thisD.55611 => D#45ptD.0
  # DEBUG D.55612 => D#46ptD.0
  # .MEM_97 = VDEF <.MEM_72>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_33);
;;    succ:       43 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 43, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 42, next block 61, flags: (NEW, REACHABLE)
;;    pred:       18 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                42 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_63 = PHI <.MEM_72(18), .MEM_97(42)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.55616 => D#55ptD.0
  # DEBUG thisD.55617 => D#55ptD.0
  # DEBUG thisD.55618 => D#55ptD.0
  # .MEM_102 = VDEF <.MEM_63>
  MEM[(struct  &)__x_161 + 32] ={v} {CLOBBER};
  # DEBUG thisD.52356 => NULL
  # DEBUG thisD.52310 => NULL
  # DEBUG D#82ptD.0 => D#90ptD.0
  # DEBUG __pD.55620 => __x_161
  # DEBUG thisD.55619 => D#82ptD.0
  # DEBUG D#81ptD.0 => D#82ptD.0
  # DEBUG thisD.52268 => D#81ptD.0
  # DEBUG D#80ptD.0 => 1
  # DEBUG __pD.55623 => __x_161
  # DEBUG __aD.55621 => D#79ptD.0
  # DEBUG __nD.55622 => D#80ptD.0
  # DEBUG D#78ptD.0 => D#80ptD.0
  # DEBUG D#77ptD.0 => D#79ptD.0
  # DEBUG D#75ptD.0 => D#77ptD.0
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG __pD.55626 => __x_161
  # DEBUG thisD.55624 => D#75ptD.0
  # DEBUG D.55625 => D#76ptD.0
  # .MEM_103 = VDEF <.MEM_102>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_161);
  # DEBUG __xD.55595 => __x_31
  if (__x_31 == 0B)
    goto <bb 61>;
  else
    goto <bb 44>;
;;    succ:       61 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                44 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 61, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 43, next block 44, flags: (NEW)
;;    pred:       43 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_166 = PHI <.MEM_103(43)>
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU)

;;   basic block 44, loop depth 5, count 0, freq 1, maybe hot
;;    prev block 61, next block 45, flags: (NEW)
;;    pred:       43 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 17>;
;;    succ:       17 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 45, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 44, next block 46, flags: (NEW, REACHABLE)
;;    pred:       15 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.55574 => D#56ptD.0
  # DEBUG __sizeD.55573 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.55577 => _27
  # DEBUG __aD.55575 => D#49ptD.0
  # DEBUG __nD.55576 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.55580 => _27
  # DEBUG thisD.55578 => D#45ptD.0
  # DEBUG D.55579 => D#46ptD.0
  # .MEM_104 = VDEF <.MEM_73>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_27);
;;    succ:       46 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 46, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 45, next block 60, flags: (NEW, REACHABLE)
;;    pred:       15 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                45 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_64 = PHI <.MEM_73(15), .MEM_104(45)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.55583 => D#55ptD.0
  # DEBUG thisD.55584 => D#55ptD.0
  # DEBUG thisD.55585 => D#55ptD.0
  # .MEM_109 = VDEF <.MEM_64>
  MEM[(struct  &)__x_158 + 32] ={v} {CLOBBER};
  # DEBUG thisD.52356 => NULL
  # DEBUG thisD.52310 => NULL
  # DEBUG D#82ptD.0 => D#90ptD.0
  # DEBUG __pD.55587 => __x_158
  # DEBUG thisD.55586 => D#82ptD.0
  # DEBUG D#81ptD.0 => D#82ptD.0
  # DEBUG thisD.52268 => D#81ptD.0
  # DEBUG D#80ptD.0 => 1
  # DEBUG __pD.55590 => __x_158
  # DEBUG __aD.55588 => D#79ptD.0
  # DEBUG __nD.55589 => D#80ptD.0
  # DEBUG D#78ptD.0 => D#80ptD.0
  # DEBUG D#77ptD.0 => D#79ptD.0
  # DEBUG D#75ptD.0 => D#77ptD.0
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG __pD.55593 => __x_158
  # DEBUG thisD.55591 => D#75ptD.0
  # DEBUG D.55592 => D#76ptD.0
  # .MEM_110 = VDEF <.MEM_109>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_158);
  # DEBUG __xD.55562 => __x_25
  if (__x_25 == 0B)
    goto <bb 60>;
  else
    goto <bb 47>;
;;    succ:       60 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                47 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 60, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 46, next block 47, flags: (NEW)
;;    pred:       46 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_169 = PHI <.MEM_110(46)>
  goto <bb 12>;
;;    succ:       12 [100.0%]  (FALLTHRU)

;;   basic block 47, loop depth 4, count 0, freq 0, maybe hot
;;    prev block 60, next block 48, flags: (NEW)
;;    pred:       46 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 14>;
;;    succ:       14 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 48, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 47, next block 49, flags: (NEW, REACHABLE)
;;    pred:       12 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.55541 => D#56ptD.0
  # DEBUG __sizeD.55540 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.55544 => _21
  # DEBUG __aD.55542 => D#49ptD.0
  # DEBUG __nD.55543 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.55547 => _21
  # DEBUG thisD.55545 => D#45ptD.0
  # DEBUG D.55546 => D#46ptD.0
  # .MEM_111 = VDEF <.MEM_77>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_21);
;;    succ:       49 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 49, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 48, next block 59, flags: (NEW, REACHABLE)
;;    pred:       12 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                48 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_65 = PHI <.MEM_77(12), .MEM_111(48)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.55550 => D#55ptD.0
  # DEBUG thisD.55551 => D#55ptD.0
  # DEBUG thisD.55552 => D#55ptD.0
  # .MEM_116 = VDEF <.MEM_65>
  MEM[(struct  &)__x_155 + 32] ={v} {CLOBBER};
  # DEBUG thisD.52356 => NULL
  # DEBUG thisD.52310 => NULL
  # DEBUG D#82ptD.0 => D#90ptD.0
  # DEBUG __pD.55554 => __x_155
  # DEBUG thisD.55553 => D#82ptD.0
  # DEBUG D#81ptD.0 => D#82ptD.0
  # DEBUG thisD.52268 => D#81ptD.0
  # DEBUG D#80ptD.0 => 1
  # DEBUG __pD.55557 => __x_155
  # DEBUG __aD.55555 => D#79ptD.0
  # DEBUG __nD.55556 => D#80ptD.0
  # DEBUG D#78ptD.0 => D#80ptD.0
  # DEBUG D#77ptD.0 => D#79ptD.0
  # DEBUG D#75ptD.0 => D#77ptD.0
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG __pD.55560 => __x_155
  # DEBUG thisD.55558 => D#75ptD.0
  # DEBUG D.55559 => D#76ptD.0
  # .MEM_117 = VDEF <.MEM_116>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_155);
  # DEBUG __xD.55529 => __x_19
  if (__x_19 == 0B)
    goto <bb 59>;
  else
    goto <bb 50>;
;;    succ:       59 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                50 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 59, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 49, next block 50, flags: (NEW)
;;    pred:       49 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_172 = PHI <.MEM_117(49)>
  goto <bb 9>;
;;    succ:       9 [100.0%]  (FALLTHRU)

;;   basic block 50, loop depth 3, count 0, freq 0, maybe hot
;;    prev block 59, next block 51, flags: (NEW)
;;    pred:       49 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 11>;
;;    succ:       11 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 51, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 50, next block 52, flags: (NEW, REACHABLE)
;;    pred:       9 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.55508 => D#56ptD.0
  # DEBUG __sizeD.55507 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.55511 => _7
  # DEBUG __aD.55509 => D#49ptD.0
  # DEBUG __nD.55510 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.55514 => _7
  # DEBUG thisD.55512 => D#45ptD.0
  # DEBUG D.55513 => D#46ptD.0
  # .MEM_118 = VDEF <.MEM_78>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_7);
;;    succ:       52 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 52, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 51, next block 58, flags: (NEW, REACHABLE)
;;    pred:       9 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                51 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_66 = PHI <.MEM_78(9), .MEM_118(51)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.55517 => D#55ptD.0
  # DEBUG thisD.55518 => D#55ptD.0
  # DEBUG thisD.55519 => D#55ptD.0
  # .MEM_123 = VDEF <.MEM_66>
  MEM[(struct  &)__x_152 + 32] ={v} {CLOBBER};
  # DEBUG thisD.52356 => NULL
  # DEBUG thisD.52310 => NULL
  # DEBUG D#82ptD.0 => D#90ptD.0
  # DEBUG __pD.55521 => __x_152
  # DEBUG thisD.55520 => D#82ptD.0
  # DEBUG D#81ptD.0 => D#82ptD.0
  # DEBUG thisD.52268 => D#81ptD.0
  # DEBUG D#80ptD.0 => 1
  # DEBUG __pD.55524 => __x_152
  # DEBUG __aD.55522 => D#79ptD.0
  # DEBUG __nD.55523 => D#80ptD.0
  # DEBUG D#78ptD.0 => D#80ptD.0
  # DEBUG D#77ptD.0 => D#79ptD.0
  # DEBUG D#75ptD.0 => D#77ptD.0
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG __pD.55527 => __x_152
  # DEBUG thisD.55525 => D#75ptD.0
  # DEBUG D.55526 => D#76ptD.0
  # .MEM_124 = VDEF <.MEM_123>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_152);
  # DEBUG __xD.55496 => __x_14
  if (__x_14 == 0B)
    goto <bb 58>;
  else
    goto <bb 53>;
;;    succ:       58 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                53 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 58, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 52, next block 53, flags: (NEW)
;;    pred:       52 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_175 = PHI <.MEM_124(52)>
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU)

;;   basic block 53, loop depth 2, count 0, freq 0, maybe hot
;;    prev block 58, next block 54, flags: (NEW)
;;    pred:       52 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 8>;
;;    succ:       8 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

;;   basic block 54, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 53, next block 55, flags: (NEW, REACHABLE)
;;    pred:       6 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.55475 => D#56ptD.0
  # DEBUG __sizeD.55474 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.55478 => _11
  # DEBUG __aD.55476 => D#49ptD.0
  # DEBUG __nD.55477 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.55481 => _11
  # DEBUG thisD.55479 => D#45ptD.0
  # DEBUG D.55480 => D#46ptD.0
  # .MEM_125 = VDEF <.MEM_79>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_11);
;;    succ:       55 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 55, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 54, next block 57, flags: (NEW, REACHABLE)
;;    pred:       6 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                54 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_67 = PHI <.MEM_79(6), .MEM_125(54)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.55484 => D#55ptD.0
  # DEBUG thisD.55485 => D#55ptD.0
  # DEBUG thisD.55486 => D#55ptD.0
  # .MEM_130 = VDEF <.MEM_67>
  MEM[(struct  &)__x_149 + 32] ={v} {CLOBBER};
  # DEBUG thisD.52356 => NULL
  # DEBUG thisD.52310 => NULL
  # DEBUG D#82ptD.0 => D#90ptD.0
  # DEBUG __pD.55488 => __x_149
  # DEBUG thisD.55487 => D#82ptD.0
  # DEBUG D#81ptD.0 => D#82ptD.0
  # DEBUG thisD.52268 => D#81ptD.0
  # DEBUG D#80ptD.0 => 1
  # DEBUG __pD.55491 => __x_149
  # DEBUG __aD.55489 => D#79ptD.0
  # DEBUG __nD.55490 => D#80ptD.0
  # DEBUG D#78ptD.0 => D#80ptD.0
  # DEBUG D#77ptD.0 => D#79ptD.0
  # DEBUG D#75ptD.0 => D#77ptD.0
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG __pD.55494 => __x_149
  # DEBUG thisD.55492 => D#75ptD.0
  # DEBUG D.55493 => D#76ptD.0
  # .MEM_131 = VDEF <.MEM_130>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_149);
  # DEBUG __xD.44861 => __x_10
  if (__x_10 == 0B)
    goto <bb 57>;
  else
    goto <bb 56>;
;;    succ:       57 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                56 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 57, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 55, next block 56, flags: (NEW)
;;    pred:       55 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_151 = PHI <.MEM_131(55)>
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU)

;;   basic block 56, loop depth 1, count 0, freq 0, maybe hot
;;    prev block 57, next block 1, flags: (NEW)
;;    pred:       55 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

}



;; Function std::map<std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)>::~map() (_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPK6RouterPK4FlitiP9OutputSetbESt4lessIS5_ESaISt4pairIKS5_SF_EEED2Ev, funcdef_no=2316, decl_uid=47615, cgraph_uid=814, symbol_order=856)


Pass statistics:
----------------

std::map<std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)>::~map() (struct mapD.42075 * const thisD.47616)
{
  struct _Rb_tree_nodeD.44503 * __xD.55765;
  struct _Rep_typeD.44497 * _2;
  charD.10 * const _4;
  struct _Rb_tree_node_baseD.6878 * _12;
  const charD.10 * _15;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  _2 = &this_1(D)->_M_tD.44500;
  # DEBUG thisD.52438 => _2
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  __x_6 = MEM[(struct _Rb_tree_node_baseD.6878 * *)this_1(D) + 16B];
  # DEBUG D#31ptD.0 => _2
  # DEBUG thisD.52435 => D#31ptD.0
  # DEBUG thisD.55764 => _2
  # DEBUG __xD.55765 => __x_6
  # DEBUG __xD.55765 => __x_6
  if (__x_6 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_19 = PHI <.MEM_3(D)(2), .MEM_24(7)>
  # DEBUG D#92ptD.0 => &MEM[(struct _Rb_treeD.44499 *)_2]._M_implD.44577
  # DEBUG thisD.52439 => D#92ptD.0
  # DEBUG thisD.52440 => D#92ptD.0
  # DEBUG thisD.52441 => D#92ptD.0
  # .MEM_5 = VDEF <.MEM_19>
  MEM[(struct  &)this_1(D)] ={v} {CLOBBER};
  # VUSE <.MEM_5>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_25 = PHI <__x_6(4), __x_13(8)>
  # .MEM_28 = PHI <.MEM_3(D)(4), .MEM_24(8)>
  # DEBUG __xD.55765 => __x_25
  # VUSE <.MEM_28>
  # PT = nonlocal escaped 
  _12 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_25 + 24B];
  # DEBUG D#36ptD.0 => __x_25
  # DEBUG __xD.52428 => D#36ptD.0
  # .MEM_17 = VDEF <.MEM_28>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPK6RouterPK4FlitiP9OutputSetbEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_ED.44859 (_2, _12);
  # VUSE <.MEM_17>
  # PT = nonlocal escaped 
  __x_13 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_25 + 16B];
  # DEBUG D#37ptD.0 => __x_25
  # DEBUG __xD.52425 => D#37ptD.0
  # DEBUG __yD.55766 => NULL
  # DEBUG D#91ptD.0 => _2
  # DEBUG __pD.55767 => __x_25
  # DEBUG thisD.55768 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#88ptD.0 => D#89ptD.0
  # DEBUG __pD.55770 => __x_25
  # DEBUG thisD.55769 => D#88ptD.0
  # DEBUG D#87ptD.0 => D#88ptD.0
  # DEBUG thisD.52337 => __x_25
  # DEBUG D#86ptD.0 => &__x_25->_M_value_fieldD.46493
  # DEBUG __rD.51667 => D#86ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG thisD.52329 => D#85ptD.0
  # DEBUG D#84ptD.0 => D#85ptD.0
  # DEBUG thisD.52305 => D#84ptD.0
  # DEBUG thisD.52297 => NULL
  # DEBUG D.52298 => NULL
  # DEBUG thisD.52295 => NULL
  # DEBUG __pD.55772 => D#86ptD.0
  # DEBUG thisD.55771 => D#61ptD.0
  # DEBUG thisD.55773 => D#86ptD.0
  # DEBUG D#56ptD.0 => &D#86ptD.0->firstD.46174
  # DEBUG thisD.55774 => D#56ptD.0
  # DEBUG thisD.55775 => D#56ptD.0
  # DEBUG thisD.55784 => D#56ptD.0
  # VUSE <.MEM_17>
  # PT = nonlocal escaped 
  _4 = MEM[(charD.10 * *)__x_25 + 32B];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.55785 => D#56ptD.0
  # PT = nonlocal escaped 
  _15 = &MEM[(const struct basic_stringD.9877 *)__x_25 + 32B].D.14356._M_local_bufD.14358;
  if (_4 != _15)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 7130, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.55777 => D#56ptD.0
  # DEBUG __sizeD.55776 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.55780 => _4
  # DEBUG __aD.55778 => D#49ptD.0
  # DEBUG __nD.55779 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.55783 => _4
  # DEBUG thisD.55781 => D#45ptD.0
  # DEBUG D.55782 => D#46ptD.0
  # .MEM_18 = VDEF <.MEM_17>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_4);
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       5 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_16 = PHI <.MEM_17(5), .MEM_18(6)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.55786 => D#55ptD.0
  # DEBUG thisD.55787 => D#55ptD.0
  # DEBUG thisD.55788 => D#55ptD.0
  # .MEM_23 = VDEF <.MEM_16>
  MEM[(struct  &)__x_25 + 32] ={v} {CLOBBER};
  # DEBUG thisD.52356 => NULL
  # DEBUG thisD.52310 => NULL
  # DEBUG D#82ptD.0 => D#90ptD.0
  # DEBUG __pD.55790 => __x_25
  # DEBUG thisD.55789 => D#82ptD.0
  # DEBUG D#81ptD.0 => D#82ptD.0
  # DEBUG thisD.52268 => D#81ptD.0
  # DEBUG D#80ptD.0 => 1
  # DEBUG __pD.55793 => __x_25
  # DEBUG __aD.55791 => D#79ptD.0
  # DEBUG __nD.55792 => D#80ptD.0
  # DEBUG D#78ptD.0 => D#80ptD.0
  # DEBUG D#77ptD.0 => D#79ptD.0
  # DEBUG D#75ptD.0 => D#77ptD.0
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG __pD.55796 => __x_25
  # DEBUG thisD.55794 => D#75ptD.0
  # DEBUG D.55795 => D#76ptD.0
  # .MEM_24 = VDEF <.MEM_23>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_25);
  # DEBUG __xD.55765 => __x_13
  if (__x_13 == 0B)
    goto <bb 3>;
  else
    goto <bb 8>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 7, next block 1, flags: (NEW)
;;    pred:       7 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

}



Updating SSA:
Registering new PHI nodes in block #5
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Updating SSA information for statement operator delete (__x_25);
Registering new PHI nodes in block #8
Registering new PHI nodes in block #9

DFA Statistics for std::map<std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)>::~map()

---------------------------------------------------------
                                Number of        Memory
                                instances         used 
---------------------------------------------------------
USE operands                             36        288b
DEF operands                              6         48b
VUSE operands                            10         80b
VDEF operands                             5         40b
PHI nodes                                 5        520b
PHI arguments                             9        432b
---------------------------------------------------------
Total memory used by DFA/SSA data                 1408b
---------------------------------------------------------

Average number of arguments per PHI node: 1.8 (max: 2)


SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_29 -> { .MEM_24 }
Incremental SSA update started at block: 5
Number of blocks in CFG: 10
Number of blocks to update: 4 ( 40%)
Affected blocks: 5 7 8 9


Creating dr for MEM[(struct _Rb_tree_node_base * *)this_1(D) + 16B]
analyze_innermost: success.
	base_address: this_1(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_1(D) + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_25 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_25 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_25 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_25 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_25 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_25 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_25 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_25 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_25 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_25 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_25 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_25 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_25 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_25 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__x_25 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__x_25 + 24B]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:10, LOOPS:1, CONDITIONS:3, STMTS:104)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    _2 = &this_1(D)->_M_t;
    # DEBUG this => _2
    # VUSE <.MEM_3(D)>
    __x_6 = MEM[(struct _Rb_tree_node_base * *)this_1(D) + 16B];
    # DEBUG D#31 => _2
    # DEBUG this => D#31
    # DEBUG this => _2
    # DEBUG __x => __x_6
    # DEBUG __x => __x_6
    if (__x_6 == 0B)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 bb_9 }, succs = {bb_1 })
  {
    <bb 3>:
    # .MEM_19 = PHI <.MEM_3(D)(2), .MEM_29(9)>
    # DEBUG D#92 => &MEM[(struct _Rb_tree *)_2]._M_impl
    # DEBUG this => D#92
    # DEBUG this => D#92
    # DEBUG this => D#92
    # .MEM_5 = VDEF <.MEM_19>
    MEM[(struct  &)this_1(D)] ={v} {CLOBBER};
    # VUSE <.MEM_5>
    return;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_5 })
  {
    <bb 4>:

  }
  bb_9 (preds = {bb_7 }, succs = {bb_3 })
  {
    <bb 9>:
    # .MEM_29 = PHI <.MEM_24(7)>
    goto <bb 3>;

  }
  loop_1 (header = 5, latch = 8, niter = )
  {
    bb_5 (preds = {bb_4 bb_8 }, succs = {bb_6 bb_7 })
    {
      <bb 5>:
      # __x_25 = PHI <__x_6(4), __x_13(8)>
      # .MEM_28 = PHI <.MEM_3(D)(4), .MEM_24(8)>
      # DEBUG __x => __x_25
      # VUSE <.MEM_28>
      _12 = MEM[(struct _Rb_tree_node_base * *)__x_25 + 24B];
      # DEBUG D#36 => __x_25
      # DEBUG __x => D#36
      # .MEM_17 = VDEF <.MEM_28>
      std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> > >::_M_erase (_2, _12);
      # VUSE <.MEM_17>
      __x_13 = MEM[(struct _Rb_tree_node_base * *)__x_25 + 16B];
      # DEBUG D#37 => __x_25
      # DEBUG __x => D#37
      # DEBUG __y => NULL
      # DEBUG D#91 => _2
      # DEBUG __p => __x_25
      # DEBUG this => D#91
      # DEBUG D#90 => D#91
      # DEBUG D#89 => D#91
      # DEBUG D#88 => D#89
      # DEBUG __p => __x_25
      # DEBUG this => D#88
      # DEBUG D#87 => D#88
      # DEBUG this => __x_25
      # DEBUG D#86 => &__x_25->_M_value_field
      # DEBUG __r => D#86
      # DEBUG D#85 => D#87
      # DEBUG this => D#85
      # DEBUG D#84 => D#85
      # DEBUG this => D#84
      # DEBUG this => NULL
      # DEBUG D.52298 => NULL
      # DEBUG this => NULL
      # DEBUG __p => D#86
      # DEBUG this => D#61
      # DEBUG this => D#86
      # DEBUG D#56 => &D#86->first
      # DEBUG this => D#56
      # DEBUG this => D#56
      # DEBUG this => D#56
      # VUSE <.MEM_17>
      _4 = MEM[(char * *)__x_25 + 32B];
      # DEBUG D#3 => D#56
      # DEBUG this => D#3
      # DEBUG this => D#56
      _15 = &MEM[(const struct basic_string *)__x_25 + 32B].D.14356._M_local_buf;
      if (_4 != _15)
        goto <bb 6>;
      else
        goto <bb 7>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_7 })
    {
      <bb 6>:
      # DEBUG D#54 => MEM[(struct basic_string *)D#56].D.14356._M_allocated_capacity
      # DEBUG D#53 => D#54
      # DEBUG this => D#56
      # DEBUG __size => D#53
      # DEBUG D#52 => D#53
      # DEBUG D#3 => D#56
      # DEBUG this => D#3
      # DEBUG this => D#56
      # DEBUG D#51 => &MEM[(struct basic_string *)D#56]._M_dataplus
      # DEBUG D#49 => D#51
      # DEBUG D#50 => D#52 + 1
      # DEBUG __p => _4
      # DEBUG __a => D#49
      # DEBUG __n => D#50
      # DEBUG D#48 => D#50
      # DEBUG D#47 => D#49
      # DEBUG D#45 => D#47
      # DEBUG D#46 => D#48
      # DEBUG __p => _4
      # DEBUG this => D#45
      # DEBUG D.55782 => D#46
      # .MEM_18 = VDEF <.MEM_17>
      operator delete (_4);

    }
    bb_7 (preds = {bb_5 bb_6 }, succs = {bb_9 bb_8 })
    {
      <bb 7>:
      # .MEM_16 = PHI <.MEM_17(5), .MEM_18(6)>
      # DEBUG D#55 => &MEM[(struct basic_string *)D#56]._M_dataplus
      # DEBUG this => D#55
      # DEBUG this => D#55
      # DEBUG this => D#55
      # .MEM_23 = VDEF <.MEM_16>
      MEM[(struct  &)__x_25 + 32] ={v} {CLOBBER};
      # DEBUG this => NULL
      # DEBUG this => NULL
      # DEBUG D#82 => D#90
      # DEBUG __p => __x_25
      # DEBUG this => D#82
      # DEBUG D#81 => D#82
      # DEBUG this => D#81
      # DEBUG D#80 => 1
      # DEBUG __p => __x_25
      # DEBUG __a => D#79
      # DEBUG __n => D#80
      # DEBUG D#78 => D#80
      # DEBUG D#77 => D#79
      # DEBUG D#75 => D#77
      # DEBUG D#76 => D#78
      # DEBUG __p => __x_25
      # DEBUG this => D#75
      # DEBUG D.55795 => D#76
      # .MEM_24 = VDEF <.MEM_23>
      operator delete (__x_25);
      # DEBUG __x => __x_13
      if (__x_13 == 0B)
        goto <bb 9>;
      else
        goto <bb 8>;

    }
    bb_8 (preds = {bb_7 }, succs = {bb_5 })
    {
      <bb 8>:
      goto <bb 5>;

    }
  }
}

Pass statistics:
----------------

std::map<std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)>::~map() (struct mapD.42075 * const thisD.47616)
{
  struct _Rb_tree_nodeD.44503 * __xD.55765;
  struct _Rep_typeD.44497 * _2;
  charD.10 * const _4;
  struct _Rb_tree_node_baseD.6878 * _12;
  const charD.10 * _15;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal 
  _2 = &this_1(D)->_M_tD.44500;
  # DEBUG thisD.52438 => _2
  # VUSE <.MEM_3(D)>
  # PT = nonlocal escaped 
  __x_6 = MEM[(struct _Rb_tree_node_baseD.6878 * *)this_1(D) + 16B];
  # DEBUG D#31ptD.0 => _2
  # DEBUG thisD.52435 => D#31ptD.0
  # DEBUG thisD.55764 => _2
  # DEBUG __xD.55765 => __x_6
  # DEBUG __xD.55765 => __x_6
  if (__x_6 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU)
  # .MEM_19 = PHI <.MEM_3(D)(2), .MEM_29(9)>
  # DEBUG D#92ptD.0 => &MEM[(struct _Rb_treeD.44499 *)_2]._M_implD.44577
  # DEBUG thisD.52439 => D#92ptD.0
  # DEBUG thisD.52440 => D#92ptD.0
  # DEBUG thisD.52441 => D#92ptD.0
  # .MEM_5 = VDEF <.MEM_19>
  MEM[(struct  &)this_1(D)] ={v} {CLOBBER};
  # VUSE <.MEM_5>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                8 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)
  # PT = nonlocal escaped 
  # __x_25 = PHI <__x_6(4), __x_13(8)>
  # .MEM_28 = PHI <.MEM_3(D)(4), .MEM_24(8)>
  # DEBUG __xD.55765 => __x_25
  # VUSE <.MEM_28>
  # PT = nonlocal escaped 
  _12 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_25 + 24B];
  # DEBUG D#36ptD.0 => __x_25
  # DEBUG __xD.52428 => D#36ptD.0
  # .MEM_17 = VDEF <.MEM_28>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPK6RouterPK4FlitiP9OutputSetbEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE8_M_eraseEPSt13_Rb_tree_nodeISI_ED.44859 (_2, _12);
  # VUSE <.MEM_17>
  # PT = nonlocal escaped 
  __x_13 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__x_25 + 16B];
  # DEBUG D#37ptD.0 => __x_25
  # DEBUG __xD.52425 => D#37ptD.0
  # DEBUG __yD.55766 => NULL
  # DEBUG D#91ptD.0 => _2
  # DEBUG __pD.55767 => __x_25
  # DEBUG thisD.55768 => D#91ptD.0
  # DEBUG D#90ptD.0 => D#91ptD.0
  # DEBUG D#89ptD.0 => D#91ptD.0
  # DEBUG D#88ptD.0 => D#89ptD.0
  # DEBUG __pD.55770 => __x_25
  # DEBUG thisD.55769 => D#88ptD.0
  # DEBUG D#87ptD.0 => D#88ptD.0
  # DEBUG thisD.52337 => __x_25
  # DEBUG D#86ptD.0 => &__x_25->_M_value_fieldD.46493
  # DEBUG __rD.51667 => D#86ptD.0
  # DEBUG D#85ptD.0 => D#87ptD.0
  # DEBUG thisD.52329 => D#85ptD.0
  # DEBUG D#84ptD.0 => D#85ptD.0
  # DEBUG thisD.52305 => D#84ptD.0
  # DEBUG thisD.52297 => NULL
  # DEBUG D.52298 => NULL
  # DEBUG thisD.52295 => NULL
  # DEBUG __pD.55772 => D#86ptD.0
  # DEBUG thisD.55771 => D#61ptD.0
  # DEBUG thisD.55773 => D#86ptD.0
  # DEBUG D#56ptD.0 => &D#86ptD.0->firstD.46174
  # DEBUG thisD.55774 => D#56ptD.0
  # DEBUG thisD.55775 => D#56ptD.0
  # DEBUG thisD.55784 => D#56ptD.0
  # VUSE <.MEM_17>
  # PT = nonlocal escaped 
  _4 = MEM[(charD.10 * *)__x_25 + 32B];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.55785 => D#56ptD.0
  # PT = nonlocal escaped 
  _15 = &MEM[(const struct basic_stringD.9877 *)__x_25 + 32B].D.14356._M_local_bufD.14358;
  if (_4 != _15)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 7130, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.55777 => D#56ptD.0
  # DEBUG __sizeD.55776 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.55780 => _4
  # DEBUG __aD.55778 => D#49ptD.0
  # DEBUG __nD.55779 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.55783 => _4
  # DEBUG thisD.55781 => D#45ptD.0
  # DEBUG D.55782 => D#46ptD.0
  # .MEM_18 = VDEF <.MEM_17>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (_4);
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 6, next block 9, flags: (NEW, REACHABLE)
;;    pred:       5 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_16 = PHI <.MEM_17(5), .MEM_18(6)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.55786 => D#55ptD.0
  # DEBUG thisD.55787 => D#55ptD.0
  # DEBUG thisD.55788 => D#55ptD.0
  # .MEM_23 = VDEF <.MEM_16>
  MEM[(struct  &)__x_25 + 32] ={v} {CLOBBER};
  # DEBUG thisD.52356 => NULL
  # DEBUG thisD.52310 => NULL
  # DEBUG D#82ptD.0 => D#90ptD.0
  # DEBUG __pD.55790 => __x_25
  # DEBUG thisD.55789 => D#82ptD.0
  # DEBUG D#81ptD.0 => D#82ptD.0
  # DEBUG thisD.52268 => D#81ptD.0
  # DEBUG D#80ptD.0 => 1
  # DEBUG __pD.55793 => __x_25
  # DEBUG __aD.55791 => D#79ptD.0
  # DEBUG __nD.55792 => D#80ptD.0
  # DEBUG D#78ptD.0 => D#80ptD.0
  # DEBUG D#77ptD.0 => D#79ptD.0
  # DEBUG D#75ptD.0 => D#77ptD.0
  # DEBUG D#76ptD.0 => D#78ptD.0
  # DEBUG __pD.55796 => __x_25
  # DEBUG thisD.55794 => D#75ptD.0
  # DEBUG D.55795 => D#76ptD.0
  # .MEM_24 = VDEF <.MEM_23>
  # USE = nonlocal 
  # CLB = nonlocal 
  _ZdlPvD.2766 (__x_25);
  # DEBUG __xD.55765 => __x_13
  if (__x_13 == 0B)
    goto <bb 9>;
  else
    goto <bb 8>;
;;    succ:       9 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 7, next block 8, flags: (NEW)
;;    pred:       7 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_29 = PHI <.MEM_24(7)>
  goto <bb 3>;
;;    succ:       3 [100.0%]  (FALLTHRU)

;;   basic block 8, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 9, next block 1, flags: (NEW)
;;    pred:       7 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,DFS_BACK,EXECUTABLE)

}



;; Function std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*> std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_get_insert_unique_pos(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)>; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>] (_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPK6RouterPK4FlitiP9OutputSetbEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7_, funcdef_no=2261, decl_uid=44811, cgraph_uid=760, symbol_order=771)


Pass statistics:
----------------

std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*> std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_get_insert_unique_pos(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)>; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>] (struct _Rb_treeD.44499 * const thisD.44812, const struct key_typeD.44525 & __kD.44813)
{
  const size_typeD.14319 __sizeD.55820;
  const size_typeD.14319 __osizeD.55821;
  const size_typeD.14319 __lenD.55822;
  intD.9 __rD.55823;
  const difference_typeD.14320 __dD.55826;
  intD.9 D.55832;
  const size_typeD.14319 __sizeD.55805;
  const size_typeD.14319 __osizeD.55806;
  const size_typeD.14319 __lenD.55807;
  intD.9 __rD.55808;
  const difference_typeD.14320 __dD.55811;
  intD.9 D.55817;
  struct _Rb_tree_node_baseD.6878 * const __j$_M_nodeD.52586;
  boolD.2757 __compD.47478;
  struct _Rb_tree_node_baseD.6878 * const D.47482;
  struct _Rb_tree_node_baseD.6878 * const D.47483;
  struct pairD.7331 D.50328;
  const size_typeD.14319 pretmp_1;
  charD.10 * const prephitmp_13;
  struct _Rb_tree_nodeD.44503 * _17;
  struct _Rb_tree_node_baseD.6878 * _21;
  struct _Rb_tree_node_baseD.6878 * _22;
  struct _Rb_tree_node_baseD.6878 * _23;
  struct _Rb_tree_node_baseD.6878 * _24;
  const size_typeD.14319 _34;
  charD.10 * const _37;
  long unsigned intD.14 _40;
  charD.10 * const pretmp_44;
  long unsigned intD.14 _52;
  const size_typeD.14319 prephitmp_61;
  charD.10 * const pretmp_64;
  charD.10 * const prephitmp_65;
  const size_typeD.14319 pretmp_67;
  const size_typeD.14319 pretmp_76;
  const size_typeD.14319 prephitmp_77;
  const size_typeD.14319 prephitmp_78;
  const size_typeD.14319 pretmp_79;
  charD.10 * const pretmp_80;
  charD.10 * const _83;
  const size_typeD.14319 _84;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  # PT = nonlocal escaped 
  _21 = MEM[(struct _Rb_tree_node_baseD.6878 * *)this_9(D) + 16B];
  # DEBUG D#31ptD.0 => this_9(D)
  # DEBUG thisD.52538 => D#31ptD.0
  # DEBUG __xD.47476 => NULL
  # DEBUG thisD.52535 => this_9(D)
  # DEBUG D#256ptD.0 => &this_9(D)->_M_implD.44577._M_headerD.44732
  # DEBUG __yD.47477 => NULL
  # DEBUG __compD.47478 => 1
  # DEBUG __compD.47478 => 1
  # DEBUG __yD.47477 => D#256ptD.0
  # DEBUG __xD.47476 => _21
  if (_21 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 81, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal 
  _17 = &this_9(D)->_M_implD.44577._M_headerD.44732;
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  pretmp_1 = MEM[(long unsigned intD.14 *)__k_12(D) + 8B];
  # VUSE <.MEM_8(D)>
  # PT = nonlocal escaped 
  pretmp_44 = MEM[(charD.10 * *)__k_12(D)];
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       13 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # _6 = PHI <_22(13), _23(12)>
  # RANGE [0, 1]
  # __comp_56 = PHI <0(13), 1(12)>
  # DEBUG __compD.47478 => __comp_56
  # DEBUG __yD.47477 => _10
  # DEBUG __xD.47476 => _6
  if (_6 == 0B)
    goto <bb 14>;
  else
    goto <bb 6>;
;;    succ:       14 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # _10 = PHI <_21(4), _6(6)>
  # .MEM_47 = PHI <.MEM_8(D)(4), .MEM_47(6)>
  # DEBUG __compD.47478 => 1
  # DEBUG __xD.47476 => _10
  # DEBUG __yD.47477 => _10
  # DEBUG __xD.52546 => _10
  # DEBUG __xD.52453 => _10
  # DEBUG thisD.52454 => _10
  # DEBUG D#93ptD.0 => &MEM[(const struct _Rb_tree_nodeD.44503 *)_10]._M_value_fieldD.46493
  # DEBUG __rD.52444 => D#93ptD.0
  # DEBUG __xD.52548 => D#93ptD.0
  # DEBUG thisD.52547 => D#60ptD.0
  # DEBUG D#236ptD.0 => &MEM[(const struct pairD.42073 &)_10 + 32].firstD.46174
  # DEBUG D#100ptD.0 => &this_9(D)->_M_implD.44577._M_key_compareD.44731
  # DEBUG D#59ptD.0 => D#100ptD.0
  # DEBUG __xD.52540 => __k_12(D)
  # DEBUG __yD.52541 => D#236ptD.0
  # DEBUG thisD.52542 => D#59ptD.0
  # DEBUG __lhsD.52544 => __k_12(D)
  # DEBUG __rhsD.52543 => D#236ptD.0
  # DEBUG thisD.55803 => __k_12(D)
  # DEBUG __strD.55804 => D#236ptD.0
  # DEBUG D#255ptD.0 => MEM[(long unsigned intD.14 *)__k_12(D) + 8B]
  # DEBUG D#1ptD.0 => __k_12(D)
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.55805 => D#255ptD.0
  # VUSE <.MEM_47>
  _34 = MEM[(long unsigned intD.14 *)_10 + 40B];
  # DEBUG D#1ptD.0 => D#236ptD.0
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.55806 => _34
  # DEBUG __aD.55813 => &__sizeD.55805
  # DEBUG __bD.55812 => &__osizeD.55806
  __len_87 = MIN_EXPR <pretmp_1, _34>;
  # DEBUG __lenD.55807 => D#234ptD.0
  # DEBUG thisD.51798 => D#236ptD.0
  # VUSE <.MEM_47>
  # PT = nonlocal escaped 
  _37 = MEM[(charD.10 * *)_10 + 32B];
  # DEBUG D#3ptD.0 => D#236ptD.0
  # DEBUG thisD.50676 => D#3ptD.0
  # DEBUG D#254ptD.0 => MEM[(charD.10 * *)__k_12(D)]
  # DEBUG D#3ptD.0 => __k_12(D)
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.55816 => D#254ptD.0
  # DEBUG __s2D.55815 => _37
  # DEBUG __nD.55814 => D#234ptD.0
  # VUSE <.MEM_47>
  # USE = nonlocal escaped 
  __r_39 = memcmpD.989 (pretmp_44, _37, __len_87);
  # DEBUG __rD.55808 => NULL
  if (__r_39 == 0)
    goto <bb 8>;
  else
    goto <bb 11>;
;;    succ:       8 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 5551, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.55810 => D#255ptD.0
  # DEBUG __n2D.55809 => _34
  # RANGE [0, 18446744073709551615]
  _40 = pretmp_1 - _34;
  __d_41 = (const difference_typeD.14320) _40;
  # DEBUG __dD.55811 => __d_41
  if (__d_41 > 2147483647)
    goto <bb 13>;
  else
    goto <bb 9>;
;;    succ:       13 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 2775, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_41 < -2147483648)
    goto <bb 12>;
  else
    goto <bb 10>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 1388, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_42 = (intD.9) _40;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 4936, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       7 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_43 = PHI <__r_39(7), __r_42(10)>
  # DEBUG __rD.55808 => __r_43
  # DEBUG D#242ptD.0 => {CLOBBER}
  # DEBUG __sizeD.55805 => D#242ptD.0
  # DEBUG D#243ptD.0 => {CLOBBER}
  # DEBUG __osizeD.55806 => D#243ptD.0
  # DEBUG __compD.47478 => __r_43 < 0
  if (__r_43 < 0)
    goto <bb 12>;
  else
    goto <bb 13>;
;;    succ:       12 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [78.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 2457, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.55808 => NULL
  # DEBUG __compD.47478 => 1
  # VUSE <.MEM_47>
  # PT = nonlocal escaped 
  _23 = MEM[(struct _Rb_tree_node_baseD.6878 * *)_10 + 16B];
  # DEBUG D#37ptD.0 => _10
  # DEBUG __xD.52551 => D#37ptD.0
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 6643, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       11 [78.3%]  (FALSE_VALUE,EXECUTABLE)
;;                8 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.55808 => NULL
  # DEBUG __compD.47478 => 0
  # VUSE <.MEM_47>
  # PT = nonlocal escaped 
  _22 = MEM[(struct _Rb_tree_node_baseD.6878 * *)_10 + 24B];
  # DEBUG D#36ptD.0 => _10
  # DEBUG __xD.52554 => D#36ptD.0
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # _85 = PHI <_10(5)>
  # _84 = PHI <_34(5)>
  # PT = nonlocal escaped 
  # _83 = PHI <_37(5)>
  # RANGE [0, 1]
  # __comp_82 = PHI <__comp_56(5)>
  # __len_81 = PHI <__len_87(5)>
  # DEBUG thisD.52556 => &__jD.47479
  # DEBUG __xD.52557 => _85
  # DEBUG __j$_M_nodeD.52586 => _85
  if (__comp_82 != 0)
    goto <bb 15>;
  else
    goto <bb 18>;
;;    succ:       15 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [55.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_59 = PHI <.MEM_47(14), .MEM_8(D)(3)>
  # PT = nonlocal escaped 
  # _57 = PHI <_85(14), _17(3)>
  # DEBUG thisD.52556 => &__jD.47479
  # DEBUG __xD.52557 => _57
  # DEBUG __j$_M_nodeD.52586 => _57
  # VUSE <.MEM_59>
  # PT = nonlocal escaped 
  _24 = MEM[(struct _Rb_tree_node_baseD.6878 * *)this_9(D) + 24B];
  # DEBUG D#83ptD.0 => this_9(D)
  # DEBUG thisD.52562 => D#83ptD.0
  # DEBUG thisD.52287 => NULL
  # DEBUG __xD.52286 => _24
  # DEBUG thisD.52558 => &__jD.47479
  # DEBUG __xD.52559 => &D.47481
  if (_24 == _57)
    goto <bb 16>;
  else
    goto <bb 17>;
;;    succ:       16 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 46, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       15 [10.1%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.52565 => &D.47484
  # DEBUG __aD.52566 => &D.47482
  # DEBUG __bD.52567 => &D.47483
  # .MEM_31 = VDEF <.MEM_59>
  MEM[(struct pairD.7331 *)&D.50328] = 0B;
  # .MEM_29 = VDEF <.MEM_31>
  MEM[(struct pairD.7331 *)&D.50328 + 8B] = _57;
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 404, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       15 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.52568 => &__jD.47479
  # VUSE <.MEM_59>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  __j$_M_node_25 = _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_baseD.6927 (_57);
  # DEBUG __j$_M_nodeD.52586 => __j$_M_node_25
  # VUSE <.MEM_59>
  pretmp_67 = MEM[(long unsigned intD.14 *)__k_12(D) + 8B];
  # VUSE <.MEM_59>
  pretmp_80 = MEM[(charD.10 * *)__k_12(D)];
  # VUSE <.MEM_59>
  pretmp_79 = MEM[(long unsigned intD.14 *)__j$_M_node_25 + 40B];
  # VUSE <.MEM_59>
  pretmp_64 = MEM[(charD.10 * *)__j$_M_node_25 + 32B];
  pretmp_76 = MIN_EXPR <pretmp_67, pretmp_79>;
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 854, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       14 [55.0%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_20 = PHI <_85(14), __j$_M_node_25(17)>
  # .MEM_58 = PHI <.MEM_47(14), .MEM_59(17)>
  # PT = nonlocal escaped 
  # _5 = PHI <_85(14), _57(17)>
  # prephitmp_61 = PHI <pretmp_1(14), pretmp_67(17)>
  # PT = nonlocal escaped 
  # prephitmp_13 = PHI <pretmp_44(14), pretmp_80(17)>
  # prephitmp_78 = PHI <_84(14), pretmp_79(17)>
  # PT = nonlocal escaped 
  # prephitmp_65 = PHI <_83(14), pretmp_64(17)>
  # prephitmp_77 = PHI <__len_81(14), pretmp_76(17)>
  # DEBUG __j$_M_nodeD.52586 => __j$_M_node_20
  # DEBUG __xD.52576 => __j$_M_node_20
  # DEBUG __xD.52531 => __j$_M_node_20
  # DEBUG thisD.52532 => __j$_M_node_20
  # DEBUG D#97ptD.0 => &MEM[(const struct _Rb_tree_nodeD.44503 *)__j$_M_node_20]._M_value_fieldD.46493
  # DEBUG __rD.52444 => D#97ptD.0
  # DEBUG __xD.52578 => D#97ptD.0
  # DEBUG thisD.52577 => D#60ptD.0
  # DEBUG D#237ptD.0 => &MEM[(const struct pairD.42073 &)__j$_M_node_20 + 32].firstD.46174
  # DEBUG D#99ptD.0 => &this_9(D)->_M_implD.44577._M_key_compareD.44731
  # DEBUG D#59ptD.0 => D#99ptD.0
  # DEBUG __xD.52570 => D#237ptD.0
  # DEBUG __yD.52571 => __k_12(D)
  # DEBUG thisD.52572 => D#59ptD.0
  # DEBUG __lhsD.52574 => D#237ptD.0
  # DEBUG __rhsD.52573 => __k_12(D)
  # DEBUG thisD.55818 => D#237ptD.0
  # DEBUG __strD.55819 => __k_12(D)
  # DEBUG D#253ptD.0 => MEM[(long unsigned intD.14 *)__j$_M_node_20 + 40B]
  # DEBUG D#1ptD.0 => D#237ptD.0
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.55820 => D#253ptD.0
  # DEBUG D#252ptD.0 => MEM[(long unsigned intD.14 *)__k_12(D) + 8B]
  # DEBUG D#1ptD.0 => __k_12(D)
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.55821 => D#252ptD.0
  # DEBUG __aD.55828 => &__sizeD.55820
  # DEBUG __bD.55827 => &__osizeD.55821
  # DEBUG __lenD.55822 => D#235ptD.0
  # DEBUG thisD.51798 => __k_12(D)
  # DEBUG D#251ptD.0 => MEM[(charD.10 * *)__k_12(D)]
  # DEBUG D#3ptD.0 => __k_12(D)
  # DEBUG thisD.50676 => D#3ptD.0
  # DEBUG D#250ptD.0 => MEM[(charD.10 * *)__j$_M_node_20 + 32B]
  # DEBUG D#3ptD.0 => D#237ptD.0
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.55831 => D#250ptD.0
  # DEBUG __s2D.55830 => D#251ptD.0
  # DEBUG __nD.55829 => D#235ptD.0
  # VUSE <.MEM_58>
  # USE = nonlocal escaped 
  __r_51 = memcmpD.989 (prephitmp_65, prephitmp_13, prephitmp_77);
  # DEBUG __rD.55823 => NULL
  if (__r_51 == 0)
    goto <bb 19>;
  else
    goto <bb 22>;
;;    succ:       19 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 521, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.55825 => D#253ptD.0
  # DEBUG __n2D.55824 => D#252ptD.0
  # RANGE [0, 18446744073709551615]
  _52 = prephitmp_78 - prephitmp_61;
  __d_53 = (const difference_typeD.14320) _52;
  # DEBUG __dD.55826 => __d_53
  if (__d_53 > 2147483647)
    goto <bb 24>;
  else
    goto <bb 20>;
;;    succ:       24 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 261, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       19 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_53 < -2147483648)
    goto <bb 23>;
  else
    goto <bb 21>;
;;    succ:       23 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 130, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_54 = (intD.9) _52;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 462, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       18 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                21 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_55 = PHI <__r_51(18), __r_54(21)>
  # DEBUG __rD.55823 => __r_55
  # DEBUG D#248ptD.0 => {CLOBBER}
  # DEBUG __sizeD.55820 => D#248ptD.0
  # DEBUG D#249ptD.0 => {CLOBBER}
  # DEBUG __osizeD.55821 => D#249ptD.0
  if (__r_55 < 0)
    goto <bb 23>;
  else
    goto <bb 24>;
;;    succ:       23 [7.1%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [92.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 163, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       22 [7.1%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.55823 => NULL
  # DEBUG thisD.52580 => &D.47487
  # DEBUG __aD.52581 => &D.47485
  # DEBUG __bD.52582 => &D.47486
  # .MEM_28 = VDEF <.MEM_58>
  MEM[(struct pairD.7331 *)&D.50328] = 0B;
  # .MEM_27 = VDEF <.MEM_28>
  MEM[(struct pairD.7331 *)&D.50328 + 8B] = _5;
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 691, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       22 [92.9%]  (FALSE_VALUE,EXECUTABLE)
;;                19 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.55823 => NULL
  # DEBUG thisD.52583 => &D.47489
  # DEBUG __aD.52584 => &__jD.47479._M_nodeD.46148
  # DEBUG __bD.52585 => &D.47488
  # .MEM_11 = VDEF <.MEM_58>
  MEM[(struct pairD.7331 *)&D.50328] = __j$_M_node_20;
  # .MEM_30 = VDEF <.MEM_11>
  MEM[(struct pairD.7331 *)&D.50328 + 8B] = 0B;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 24, next block 1, flags: (NEW, REACHABLE)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                24 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_7 = PHI <.MEM_29(16), .MEM_27(23), .MEM_30(24)>
  # DEBUG D#98ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.52586 => D#98ptD.0
  # VUSE <.MEM_7>
  return D.50328;
;;    succ:       EXIT [100.0%] 

}


Creating dr for MEM[(struct _Rb_tree_node_base * *)this_9(D) + 16B]
analyze_innermost: success.
	base_address: this_9(D)
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_9(D) + 16B]
Creating dr for MEM[(long unsigned int *)__k_12(D) + 8B]
analyze_innermost: success.
	base_address: __k_12(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(long unsigned int *)__k_12(D) + 8B]
Creating dr for MEM[(char * *)__k_12(D)]
analyze_innermost: success.
	base_address: __k_12(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(char * *)__k_12(D)]
Creating dr for MEM[(long unsigned int *)_10 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_10 + 40B]
Creating dr for MEM[(long unsigned int *)_10 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_10 + 40B]
Creating dr for MEM[(char * *)_10 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)_10 + 32B]
Creating dr for MEM[(char * *)_10 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)_10 + 32B]
Creating dr for MEM[(long unsigned int *)_10 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_10 + 40B]
Creating dr for MEM[(long unsigned int *)_10 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_10 + 40B]
Creating dr for MEM[(char * *)_10 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)_10 + 32B]
Creating dr for MEM[(char * *)_10 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)_10 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_10 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_10 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_10 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_10 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_10 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_10 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_10 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_10 + 16B]
Creating dr for MEM[(long unsigned int *)_10 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_10 + 40B]
Creating dr for MEM[(long unsigned int *)_10 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_10 + 40B]
Creating dr for MEM[(char * *)_10 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)_10 + 32B]
Creating dr for MEM[(char * *)_10 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)_10 + 32B]
Creating dr for MEM[(long unsigned int *)_10 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_10 + 40B]
Creating dr for MEM[(long unsigned int *)_10 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)_10 + 40B]
Creating dr for MEM[(char * *)_10 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)_10 + 32B]
Creating dr for MEM[(char * *)_10 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)_10 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_10 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_10 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_10 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_10 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_10 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_10 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)_10 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)_10 + 16B]
Creating dr for MEM[(struct pair *)&D.50328]
analyze_innermost: success.
	base_address: &D.50328
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.50328]
Creating dr for MEM[(struct pair *)&D.50328 + 8B]
analyze_innermost: success.
	base_address: &D.50328
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.50328 + 8B]
Creating dr for MEM[(struct pair *)&D.50328]
analyze_innermost: success.
	base_address: &D.50328
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.50328]
Creating dr for MEM[(struct pair *)&D.50328 + 8B]
analyze_innermost: success.
	base_address: &D.50328
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.50328 + 8B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)this_9(D) + 24B]
analyze_innermost: success.
	base_address: this_9(D)
	offset from base address: 0
	constant offset from base address: 24
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)this_9(D) + 24B]
Creating dr for MEM[(struct pair *)&D.50328]
analyze_innermost: success.
	base_address: &D.50328
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.50328]
Creating dr for MEM[(struct pair *)&D.50328 + 8B]
analyze_innermost: success.
	base_address: &D.50328
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(struct pair *)&D.50328 + 8B]
Creating dr for MEM[(long unsigned int *)__k_12(D) + 8B]
analyze_innermost: success.
	base_address: __k_12(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(long unsigned int *)__k_12(D) + 8B]
Creating dr for MEM[(char * *)__k_12(D)]
analyze_innermost: success.
	base_address: __k_12(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(char * *)__k_12(D)]
Creating dr for MEM[(long unsigned int *)__j$_M_node_25 + 40B]
analyze_innermost: success.
	base_address: __j$_M_node_25
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(long unsigned int *)__j$_M_node_25 + 40B]
Creating dr for MEM[(char * *)__j$_M_node_25 + 32B]
analyze_innermost: success.
	base_address: __j$_M_node_25
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(char * *)__j$_M_node_25 + 32B]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:3)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:6)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:6)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:8)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:32, LOOPS:1, CONDITIONS:12, STMTS:188)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_3 bb_4 })
  {
    <bb 2>:
    # VUSE <.MEM_8(D)>
    _21 = MEM[(struct _Rb_tree_node_base * *)this_9(D) + 16B];
    # DEBUG D#31 => this_9(D)
    # DEBUG this => D#31
    # DEBUG __x => NULL
    # DEBUG this => this_9(D)
    # DEBUG D#256 => &this_9(D)->_M_impl._M_header
    # DEBUG __y => NULL
    # DEBUG __comp => 1
    # DEBUG __comp => 1
    # DEBUG __y => D#256
    # DEBUG __x => _21
    if (_21 == 0B)
      goto <bb 3>;
    else
      goto <bb 4>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_15 })
  {
    <bb 3>:
    _17 = &this_9(D)->_M_impl._M_header;
    goto <bb 15>;

  }
  bb_4 (preds = {bb_2 }, succs = {bb_7 })
  {
    <bb 4>:
    # VUSE <.MEM_8(D)>
    pretmp_1 = MEM[(long unsigned int *)__k_12(D) + 8B];
    # VUSE <.MEM_8(D)>
    pretmp_44 = MEM[(char * *)__k_12(D)];
    goto <bb 7>;

  }
  bb_14 (preds = {bb_5 }, succs = {bb_26 })
  {
    <bb 14>:
    # _85 = PHI <_10(5)>
    # _84 = PHI <_34(5)>
    # _83 = PHI <_37(5)>
    # __comp_82 = PHI <__comp_56(5)>
    # __len_81 = PHI <__len_87(5)>

  }
  bb_26 (preds = {bb_14 }, succs = {bb_15 bb_18 })
  {
    <bb 26>:
    # DEBUG this => &__j
    # DEBUG __x => _85
    # DEBUG __j$_M_node => _85
    if (__comp_82 != 0)
      goto <bb 15>;
    else
      goto <bb 18>;

  }
  bb_15 (preds = {bb_26 bb_3 }, succs = {bb_16 bb_17 })
  {
    <bb 15>:
    # .MEM_59 = PHI <.MEM_47(26), .MEM_8(D)(3)>
    # _57 = PHI <_85(26), _17(3)>
    # DEBUG this => &__j
    # DEBUG __x => _57
    # DEBUG __j$_M_node => _57
    # VUSE <.MEM_59>
    _24 = MEM[(struct _Rb_tree_node_base * *)this_9(D) + 24B];
    # DEBUG D#83 => this_9(D)
    # DEBUG this => D#83
    # DEBUG this => NULL
    # DEBUG __x => _24
    # DEBUG this => &__j
    # DEBUG __x => &D.47481
    if (_24 == _57)
      goto <bb 16>;
    else
      goto <bb 17>;

  }
  bb_16 (preds = {bb_15 }, succs = {bb_25 })
  {
    <bb 16>:
    # DEBUG this => &D.47484
    # DEBUG __a => &D.47482
    # DEBUG __b => &D.47483
    # .MEM_31 = VDEF <.MEM_59>
    MEM[(struct pair *)&D.50328] = 0B;
    # .MEM_29 = VDEF <.MEM_31>
    MEM[(struct pair *)&D.50328 + 8B] = _57;
    goto <bb 25>;

  }
  bb_17 (preds = {bb_15 }, succs = {bb_18 })
  {
    <bb 17>:
    # DEBUG this => &__j
    # VUSE <.MEM_59>
    __j$_M_node_25 = std::_Rb_tree_decrement (_57);
    # DEBUG __j$_M_node => __j$_M_node_25
    # VUSE <.MEM_59>
    pretmp_67 = MEM[(long unsigned int *)__k_12(D) + 8B];
    # VUSE <.MEM_59>
    pretmp_80 = MEM[(char * *)__k_12(D)];
    # VUSE <.MEM_59>
    pretmp_79 = MEM[(long unsigned int *)__j$_M_node_25 + 40B];
    # VUSE <.MEM_59>
    pretmp_64 = MEM[(char * *)__j$_M_node_25 + 32B];
    pretmp_76 = MIN_EXPR <pretmp_67, pretmp_79>;

  }
  bb_18 (preds = {bb_26 bb_17 }, succs = {bb_19 bb_22 })
  {
    <bb 18>:
    # __j$_M_node_20 = PHI <_85(26), __j$_M_node_25(17)>
    # .MEM_58 = PHI <.MEM_47(26), .MEM_59(17)>
    # _5 = PHI <_85(26), _57(17)>
    # prephitmp_61 = PHI <pretmp_1(26), pretmp_67(17)>
    # prephitmp_13 = PHI <pretmp_44(26), pretmp_80(17)>
    # prephitmp_78 = PHI <_84(26), pretmp_79(17)>
    # prephitmp_65 = PHI <_83(26), pretmp_64(17)>
    # prephitmp_77 = PHI <__len_81(26), pretmp_76(17)>
    # DEBUG __j$_M_node => __j$_M_node_20
    # DEBUG __x => __j$_M_node_20
    # DEBUG __x => __j$_M_node_20
    # DEBUG this => __j$_M_node_20
    # DEBUG D#97 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_20]._M_value_field
    # DEBUG __r => D#97
    # DEBUG __x => D#97
    # DEBUG this => D#60
    # DEBUG D#237 => &MEM[(const struct pair &)__j$_M_node_20 + 32].first
    # DEBUG D#99 => &this_9(D)->_M_impl._M_key_compare
    # DEBUG D#59 => D#99
    # DEBUG __x => D#237
    # DEBUG __y => __k_12(D)
    # DEBUG this => D#59
    # DEBUG __lhs => D#237
    # DEBUG __rhs => __k_12(D)
    # DEBUG this => D#237
    # DEBUG __str => __k_12(D)
    # DEBUG D#253 => MEM[(long unsigned int *)__j$_M_node_20 + 40B]
    # DEBUG D#1 => D#237
    # DEBUG this => D#1
    # DEBUG __size => D#253
    # DEBUG D#252 => MEM[(long unsigned int *)__k_12(D) + 8B]
    # DEBUG D#1 => __k_12(D)
    # DEBUG this => D#1
    # DEBUG __osize => D#252
    # DEBUG __a => &__size
    # DEBUG __b => &__osize
    # DEBUG __len => D#235
    # DEBUG this => __k_12(D)
    # DEBUG D#251 => MEM[(char * *)__k_12(D)]
    # DEBUG D#3 => __k_12(D)
    # DEBUG this => D#3
    # DEBUG D#250 => MEM[(char * *)__j$_M_node_20 + 32B]
    # DEBUG D#3 => D#237
    # DEBUG this => D#3
    # DEBUG __s1 => D#250
    # DEBUG __s2 => D#251
    # DEBUG __n => D#235
    # VUSE <.MEM_58>
    __r_51 = __builtin_memcmp (prephitmp_65, prephitmp_13, prephitmp_77);
    # DEBUG __r => NULL
    if (__r_51 == 0)
      goto <bb 19>;
    else
      goto <bb 22>;

  }
  bb_19 (preds = {bb_18 }, succs = {bb_24 bb_20 })
  {
    <bb 19>:
    # DEBUG __n1 => D#253
    # DEBUG __n2 => D#252
    _52 = prephitmp_78 - prephitmp_61;
    __d_53 = (const difference_type) _52;
    # DEBUG __d => __d_53
    if (__d_53 > 2147483647)
      goto <bb 24>;
    else
      goto <bb 20>;

  }
  bb_20 (preds = {bb_19 }, succs = {bb_23 bb_21 })
  {
    <bb 20>:
    if (__d_53 < -2147483648)
      goto <bb 23>;
    else
      goto <bb 21>;

  }
  bb_21 (preds = {bb_20 }, succs = {bb_22 })
  {
    <bb 21>:
    __r_54 = (int) _52;

  }
  bb_22 (preds = {bb_18 bb_21 }, succs = {bb_23 bb_24 })
  {
    <bb 22>:
    # __r_55 = PHI <__r_51(18), __r_54(21)>
    # DEBUG __r => __r_55
    # DEBUG D#248 => {CLOBBER}
    # DEBUG __size => D#248
    # DEBUG D#249 => {CLOBBER}
    # DEBUG __osize => D#249
    if (__r_55 < 0)
      goto <bb 23>;
    else
      goto <bb 24>;

  }
  bb_23 (preds = {bb_22 bb_20 }, succs = {bb_31 })
  {
    <bb 23>:

  }
  bb_31 (preds = {bb_23 }, succs = {bb_25 })
  {
    <bb 31>:
    # DEBUG __r => NULL
    # DEBUG this => &D.47487
    # DEBUG __a => &D.47485
    # DEBUG __b => &D.47486
    # .MEM_28 = VDEF <.MEM_58>
    MEM[(struct pair *)&D.50328] = 0B;
    # .MEM_27 = VDEF <.MEM_28>
    MEM[(struct pair *)&D.50328 + 8B] = _5;
    goto <bb 25>;

  }
  bb_24 (preds = {bb_22 bb_19 }, succs = {bb_30 })
  {
    <bb 24>:

  }
  bb_30 (preds = {bb_24 }, succs = {bb_25 })
  {
    <bb 30>:
    # DEBUG __r => NULL
    # DEBUG this => &D.47489
    # DEBUG __a => &__j._M_node
    # DEBUG __b => &D.47488
    # .MEM_11 = VDEF <.MEM_58>
    MEM[(struct pair *)&D.50328] = __j$_M_node_20;
    # .MEM_30 = VDEF <.MEM_11>
    MEM[(struct pair *)&D.50328 + 8B] = 0B;

  }
  bb_25 (preds = {bb_16 bb_31 bb_30 }, succs = {bb_29 })
  {
    <bb 25>:
    # .MEM_7 = PHI <.MEM_29(16), .MEM_27(31), .MEM_30(30)>

  }
  bb_29 (preds = {bb_25 }, succs = {bb_1 })
  {
    <bb 29>:
    # DEBUG D#98 => {CLOBBER}
    # DEBUG __j$_M_node => D#98
    # VUSE <.MEM_7>
    return D.50328;

  }
  loop_1 (header = 7, latch = 6, niter = )
  {
    bb_5 (preds = {bb_27 bb_28 }, succs = {bb_14 bb_6 })
    {
      <bb 5>:
      # _6 = PHI <_22(27), _23(28)>
      # __comp_56 = PHI <0(27), 1(28)>
      # DEBUG __comp => __comp_56
      # DEBUG __y => _10
      # DEBUG __x => _6
      if (_6 == 0B)
        goto <bb 14>;
      else
        goto <bb 6>;

    }
    bb_6 (preds = {bb_5 }, succs = {bb_7 })
    {
      <bb 6>:

    }
    bb_7 (preds = {bb_4 bb_6 }, succs = {bb_8 bb_11 })
    {
      <bb 7>:
      # _10 = PHI <_21(4), _6(6)>
      # .MEM_47 = PHI <.MEM_8(D)(4), .MEM_47(6)>
      # DEBUG __comp => 1
      # DEBUG __x => _10
      # DEBUG __y => _10
      # DEBUG __x => _10
      # DEBUG __x => _10
      # DEBUG this => _10
      # DEBUG D#93 => &MEM[(const struct _Rb_tree_node *)_10]._M_value_field
      # DEBUG __r => D#93
      # DEBUG __x => D#93
      # DEBUG this => D#60
      # DEBUG D#236 => &MEM[(const struct pair &)_10 + 32].first
      # DEBUG D#100 => &this_9(D)->_M_impl._M_key_compare
      # DEBUG D#59 => D#100
      # DEBUG __x => __k_12(D)
      # DEBUG __y => D#236
      # DEBUG this => D#59
      # DEBUG __lhs => __k_12(D)
      # DEBUG __rhs => D#236
      # DEBUG this => __k_12(D)
      # DEBUG __str => D#236
      # DEBUG D#255 => MEM[(long unsigned int *)__k_12(D) + 8B]
      # DEBUG D#1 => __k_12(D)
      # DEBUG this => D#1
      # DEBUG __size => D#255
      # VUSE <.MEM_47>
      _34 = MEM[(long unsigned int *)_10 + 40B];
      # DEBUG D#1 => D#236
      # DEBUG this => D#1
      # DEBUG __osize => _34
      # DEBUG __a => &__size
      # DEBUG __b => &__osize
      __len_87 = MIN_EXPR <pretmp_1, _34>;
      # DEBUG __len => D#234
      # DEBUG this => D#236
      # VUSE <.MEM_47>
      _37 = MEM[(char * *)_10 + 32B];
      # DEBUG D#3 => D#236
      # DEBUG this => D#3
      # DEBUG D#254 => MEM[(char * *)__k_12(D)]
      # DEBUG D#3 => __k_12(D)
      # DEBUG this => D#3
      # DEBUG __s1 => D#254
      # DEBUG __s2 => _37
      # DEBUG __n => D#234
      # VUSE <.MEM_47>
      __r_39 = __builtin_memcmp (pretmp_44, _37, __len_87);
      # DEBUG __r => NULL
      if (__r_39 == 0)
        goto <bb 8>;
      else
        goto <bb 11>;

    }
    bb_8 (preds = {bb_7 }, succs = {bb_13 bb_9 })
    {
      <bb 8>:
      # DEBUG __n1 => D#255
      # DEBUG __n2 => _34
      _40 = pretmp_1 - _34;
      __d_41 = (const difference_type) _40;
      # DEBUG __d => __d_41
      if (__d_41 > 2147483647)
        goto <bb 13>;
      else
        goto <bb 9>;

    }
    bb_9 (preds = {bb_8 }, succs = {bb_12 bb_10 })
    {
      <bb 9>:
      if (__d_41 < -2147483648)
        goto <bb 12>;
      else
        goto <bb 10>;

    }
    bb_10 (preds = {bb_9 }, succs = {bb_11 })
    {
      <bb 10>:
      __r_42 = (int) _40;

    }
    bb_11 (preds = {bb_7 bb_10 }, succs = {bb_12 bb_13 })
    {
      <bb 11>:
      # __r_43 = PHI <__r_39(7), __r_42(10)>
      # DEBUG __r => __r_43
      # DEBUG D#242 => {CLOBBER}
      # DEBUG __size => D#242
      # DEBUG D#243 => {CLOBBER}
      # DEBUG __osize => D#243
      # DEBUG __comp => __r_43 < 0
      if (__r_43 < 0)
        goto <bb 12>;
      else
        goto <bb 13>;

    }
    bb_12 (preds = {bb_11 bb_9 }, succs = {bb_28 })
    {
      <bb 12>:

    }
    bb_28 (preds = {bb_12 }, succs = {bb_5 })
    {
      <bb 28>:
      # DEBUG __r => NULL
      # DEBUG __comp => 1
      # VUSE <.MEM_47>
      _23 = MEM[(struct _Rb_tree_node_base * *)_10 + 16B];
      # DEBUG D#37 => _10
      # DEBUG __x => D#37
      goto <bb 5>;

    }
    bb_13 (preds = {bb_11 bb_8 }, succs = {bb_27 })
    {
      <bb 13>:

    }
    bb_27 (preds = {bb_13 }, succs = {bb_5 })
    {
      <bb 27>:
      # DEBUG __r => NULL
      # DEBUG __comp => 0
      # VUSE <.MEM_47>
      _22 = MEM[(struct _Rb_tree_node_base * *)_10 + 24B];
      # DEBUG D#36 => _10
      # DEBUG __x => D#36
      goto <bb 5>;

    }
  }
}

Pass statistics:
----------------

std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*> std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_get_insert_unique_pos(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)>; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>] (struct _Rb_treeD.44499 * const thisD.44812, const struct key_typeD.44525 & __kD.44813)
{
  const size_typeD.14319 __sizeD.55820;
  const size_typeD.14319 __osizeD.55821;
  const size_typeD.14319 __lenD.55822;
  intD.9 __rD.55823;
  const difference_typeD.14320 __dD.55826;
  intD.9 D.55832;
  const size_typeD.14319 __sizeD.55805;
  const size_typeD.14319 __osizeD.55806;
  const size_typeD.14319 __lenD.55807;
  intD.9 __rD.55808;
  const difference_typeD.14320 __dD.55811;
  intD.9 D.55817;
  struct _Rb_tree_node_baseD.6878 * const __j$_M_nodeD.52586;
  boolD.2757 __compD.47478;
  struct _Rb_tree_node_baseD.6878 * const D.47482;
  struct _Rb_tree_node_baseD.6878 * const D.47483;
  struct pairD.7331 D.50328;
  const size_typeD.14319 pretmp_1;
  charD.10 * const prephitmp_13;
  struct _Rb_tree_nodeD.44503 * _17;
  struct _Rb_tree_node_baseD.6878 * _21;
  struct _Rb_tree_node_baseD.6878 * _22;
  struct _Rb_tree_node_baseD.6878 * _23;
  struct _Rb_tree_node_baseD.6878 * _24;
  const size_typeD.14319 _34;
  charD.10 * const _37;
  long unsigned intD.14 _40;
  charD.10 * const pretmp_44;
  long unsigned intD.14 _52;
  const size_typeD.14319 prephitmp_61;
  charD.10 * const pretmp_64;
  charD.10 * const prephitmp_65;
  const size_typeD.14319 pretmp_67;
  const size_typeD.14319 pretmp_76;
  const size_typeD.14319 prephitmp_77;
  const size_typeD.14319 prephitmp_78;
  const size_typeD.14319 pretmp_79;
  charD.10 * const pretmp_80;
  charD.10 * const _83;
  const size_typeD.14319 _84;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  # PT = nonlocal escaped 
  _21 = MEM[(struct _Rb_tree_node_baseD.6878 * *)this_9(D) + 16B];
  # DEBUG D#31ptD.0 => this_9(D)
  # DEBUG thisD.52538 => D#31ptD.0
  # DEBUG __xD.47476 => NULL
  # DEBUG thisD.52535 => this_9(D)
  # DEBUG D#256ptD.0 => &this_9(D)->_M_implD.44577._M_headerD.44732
  # DEBUG __yD.47477 => NULL
  # DEBUG __compD.47478 => 1
  # DEBUG __compD.47478 => 1
  # DEBUG __yD.47477 => D#256ptD.0
  # DEBUG __xD.47476 => _21
  if (_21 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;
;;    succ:       3 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                4 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 81, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal 
  _17 = &this_9(D)->_M_implD.44577._M_headerD.44732;
  goto <bb 15>;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 3, next block 5, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_8(D)>
  pretmp_1 = MEM[(long unsigned intD.14 *)__k_12(D) + 8B];
  # VUSE <.MEM_8(D)>
  # PT = nonlocal escaped 
  pretmp_44 = MEM[(charD.10 * *)__k_12(D)];
  goto <bb 7>;
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       27 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                28 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # _6 = PHI <_22(27), _23(28)>
  # RANGE [0, 1]
  # __comp_56 = PHI <0(27), 1(28)>
  # DEBUG __compD.47478 => __comp_56
  # DEBUG __yD.47477 => _10
  # DEBUG __xD.47476 => _6
  if (_6 == 0B)
    goto <bb 14>;
  else
    goto <bb 6>;
;;    succ:       14 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                6 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 5, next block 7, flags: (NEW)
;;    pred:       5 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       7 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       4 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # _10 = PHI <_21(4), _6(6)>
  # .MEM_47 = PHI <.MEM_8(D)(4), .MEM_47(6)>
  # DEBUG __compD.47478 => 1
  # DEBUG __xD.47476 => _10
  # DEBUG __yD.47477 => _10
  # DEBUG __xD.52546 => _10
  # DEBUG __xD.52453 => _10
  # DEBUG thisD.52454 => _10
  # DEBUG D#93ptD.0 => &MEM[(const struct _Rb_tree_nodeD.44503 *)_10]._M_value_fieldD.46493
  # DEBUG __rD.52444 => D#93ptD.0
  # DEBUG __xD.52548 => D#93ptD.0
  # DEBUG thisD.52547 => D#60ptD.0
  # DEBUG D#236ptD.0 => &MEM[(const struct pairD.42073 &)_10 + 32].firstD.46174
  # DEBUG D#100ptD.0 => &this_9(D)->_M_implD.44577._M_key_compareD.44731
  # DEBUG D#59ptD.0 => D#100ptD.0
  # DEBUG __xD.52540 => __k_12(D)
  # DEBUG __yD.52541 => D#236ptD.0
  # DEBUG thisD.52542 => D#59ptD.0
  # DEBUG __lhsD.52544 => __k_12(D)
  # DEBUG __rhsD.52543 => D#236ptD.0
  # DEBUG thisD.55803 => __k_12(D)
  # DEBUG __strD.55804 => D#236ptD.0
  # DEBUG D#255ptD.0 => MEM[(long unsigned intD.14 *)__k_12(D) + 8B]
  # DEBUG D#1ptD.0 => __k_12(D)
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.55805 => D#255ptD.0
  # VUSE <.MEM_47>
  _34 = MEM[(long unsigned intD.14 *)_10 + 40B];
  # DEBUG D#1ptD.0 => D#236ptD.0
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.55806 => _34
  # DEBUG __aD.55813 => &__sizeD.55805
  # DEBUG __bD.55812 => &__osizeD.55806
  __len_87 = MIN_EXPR <pretmp_1, _34>;
  # DEBUG __lenD.55807 => D#234ptD.0
  # DEBUG thisD.51798 => D#236ptD.0
  # VUSE <.MEM_47>
  # PT = nonlocal escaped 
  _37 = MEM[(charD.10 * *)_10 + 32B];
  # DEBUG D#3ptD.0 => D#236ptD.0
  # DEBUG thisD.50676 => D#3ptD.0
  # DEBUG D#254ptD.0 => MEM[(charD.10 * *)__k_12(D)]
  # DEBUG D#3ptD.0 => __k_12(D)
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.55816 => D#254ptD.0
  # DEBUG __s2D.55815 => _37
  # DEBUG __nD.55814 => D#234ptD.0
  # VUSE <.MEM_47>
  # USE = nonlocal escaped 
  __r_39 = memcmpD.989 (pretmp_44, _37, __len_87);
  # DEBUG __rD.55808 => NULL
  if (__r_39 == 0)
    goto <bb 8>;
  else
    goto <bb 11>;
;;    succ:       8 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                11 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 5551, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.55810 => D#255ptD.0
  # DEBUG __n2D.55809 => _34
  # RANGE [0, 18446744073709551615]
  _40 = pretmp_1 - _34;
  __d_41 = (const difference_typeD.14320) _40;
  # DEBUG __dD.55811 => __d_41
  if (__d_41 > 2147483647)
    goto <bb 13>;
  else
    goto <bb 9>;
;;    succ:       13 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 2775, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_41 < -2147483648)
    goto <bb 12>;
  else
    goto <bb 10>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 1388, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       9 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_42 = (intD.9) _40;
;;    succ:       11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 4936, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       7 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_43 = PHI <__r_39(7), __r_42(10)>
  # DEBUG __rD.55808 => __r_43
  # DEBUG D#242ptD.0 => {CLOBBER}
  # DEBUG __sizeD.55805 => D#242ptD.0
  # DEBUG D#243ptD.0 => {CLOBBER}
  # DEBUG __osizeD.55806 => D#243ptD.0
  # DEBUG __compD.47478 => __r_43 < 0
  if (__r_43 < 0)
    goto <bb 12>;
  else
    goto <bb 13>;
;;    succ:       12 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [78.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 2457, maybe hot
;;    prev block 11, next block 28, flags: (NEW, REACHABLE)
;;    pred:       11 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       28 [100.0%]  (FALLTHRU)

;;   basic block 28, loop depth 1, count 0, freq 2457, maybe hot
;;    prev block 12, next block 13, flags: (NEW)
;;    pred:       12 [100.0%]  (FALLTHRU)
  # DEBUG __rD.55808 => NULL
  # DEBUG __compD.47478 => 1
  # VUSE <.MEM_47>
  # PT = nonlocal escaped 
  _23 = MEM[(struct _Rb_tree_node_baseD.6878 * *)_10 + 16B];
  # DEBUG D#37ptD.0 => _10
  # DEBUG __xD.52551 => D#37ptD.0
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 1, count 0, freq 6643, maybe hot
;;    prev block 28, next block 27, flags: (NEW, REACHABLE)
;;    pred:       11 [78.3%]  (FALSE_VALUE,EXECUTABLE)
;;                8 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       27 [100.0%]  (FALLTHRU)

;;   basic block 27, loop depth 1, count 0, freq 6643, maybe hot
;;    prev block 13, next block 14, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU)
  # DEBUG __rD.55808 => NULL
  # DEBUG __compD.47478 => 0
  # VUSE <.MEM_47>
  # PT = nonlocal escaped 
  _22 = MEM[(struct _Rb_tree_node_baseD.6878 * *)_10 + 24B];
  # DEBUG D#36ptD.0 => _10
  # DEBUG __xD.52554 => D#36ptD.0
  goto <bb 5>;
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 27, next block 26, flags: (NEW, REACHABLE)
;;    pred:       5 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped 
  # _85 = PHI <_10(5)>
  # _84 = PHI <_34(5)>
  # PT = nonlocal escaped 
  # _83 = PHI <_37(5)>
  # RANGE [0, 1]
  # __comp_82 = PHI <__comp_56(5)>
  # __len_81 = PHI <__len_87(5)>
;;    succ:       26 [100.0%]  (FALLTHRU)

;;   basic block 26, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 14, next block 15, flags: (NEW)
;;    pred:       14 [100.0%]  (FALLTHRU)
  # DEBUG thisD.52556 => &__jD.47479
  # DEBUG __xD.52557 => _85
  # DEBUG __j$_M_nodeD.52586 => _85
  if (__comp_82 != 0)
    goto <bb 15>;
  else
    goto <bb 18>;
;;    succ:       15 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [55.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 450, maybe hot
;;    prev block 26, next block 16, flags: (NEW, REACHABLE)
;;    pred:       26 [45.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_59 = PHI <.MEM_47(26), .MEM_8(D)(3)>
  # PT = nonlocal escaped 
  # _57 = PHI <_85(26), _17(3)>
  # DEBUG thisD.52556 => &__jD.47479
  # DEBUG __xD.52557 => _57
  # DEBUG __j$_M_nodeD.52586 => _57
  # VUSE <.MEM_59>
  # PT = nonlocal escaped 
  _24 = MEM[(struct _Rb_tree_node_baseD.6878 * *)this_9(D) + 24B];
  # DEBUG D#83ptD.0 => this_9(D)
  # DEBUG thisD.52562 => D#83ptD.0
  # DEBUG thisD.52287 => NULL
  # DEBUG __xD.52286 => _24
  # DEBUG thisD.52558 => &__jD.47479
  # DEBUG __xD.52559 => &D.47481
  if (_24 == _57)
    goto <bb 16>;
  else
    goto <bb 17>;
;;    succ:       16 [10.1%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [89.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 46, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       15 [10.1%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG thisD.52565 => &D.47484
  # DEBUG __aD.52566 => &D.47482
  # DEBUG __bD.52567 => &D.47483
  # .MEM_31 = VDEF <.MEM_59>
  MEM[(struct pairD.7331 *)&D.50328] = 0B;
  # .MEM_29 = VDEF <.MEM_31>
  MEM[(struct pairD.7331 *)&D.50328 + 8B] = _57;
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 404, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       15 [89.9%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.52568 => &__jD.47479
  # VUSE <.MEM_59>
  # PT = nonlocal escaped 
  # USE = nonlocal escaped 
  __j$_M_node_25 = _ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_baseD.6927 (_57);
  # DEBUG __j$_M_nodeD.52586 => __j$_M_node_25
  # VUSE <.MEM_59>
  pretmp_67 = MEM[(long unsigned intD.14 *)__k_12(D) + 8B];
  # VUSE <.MEM_59>
  pretmp_80 = MEM[(charD.10 * *)__k_12(D)];
  # VUSE <.MEM_59>
  pretmp_79 = MEM[(long unsigned intD.14 *)__j$_M_node_25 + 40B];
  # VUSE <.MEM_59>
  pretmp_64 = MEM[(charD.10 * *)__j$_M_node_25 + 32B];
  pretmp_76 = MIN_EXPR <pretmp_67, pretmp_79>;
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 854, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       26 [55.0%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __j$_M_node_20 = PHI <_85(26), __j$_M_node_25(17)>
  # .MEM_58 = PHI <.MEM_47(26), .MEM_59(17)>
  # PT = nonlocal escaped 
  # _5 = PHI <_85(26), _57(17)>
  # prephitmp_61 = PHI <pretmp_1(26), pretmp_67(17)>
  # PT = nonlocal escaped 
  # prephitmp_13 = PHI <pretmp_44(26), pretmp_80(17)>
  # prephitmp_78 = PHI <_84(26), pretmp_79(17)>
  # PT = nonlocal escaped 
  # prephitmp_65 = PHI <_83(26), pretmp_64(17)>
  # prephitmp_77 = PHI <__len_81(26), pretmp_76(17)>
  # DEBUG __j$_M_nodeD.52586 => __j$_M_node_20
  # DEBUG __xD.52576 => __j$_M_node_20
  # DEBUG __xD.52531 => __j$_M_node_20
  # DEBUG thisD.52532 => __j$_M_node_20
  # DEBUG D#97ptD.0 => &MEM[(const struct _Rb_tree_nodeD.44503 *)__j$_M_node_20]._M_value_fieldD.46493
  # DEBUG __rD.52444 => D#97ptD.0
  # DEBUG __xD.52578 => D#97ptD.0
  # DEBUG thisD.52577 => D#60ptD.0
  # DEBUG D#237ptD.0 => &MEM[(const struct pairD.42073 &)__j$_M_node_20 + 32].firstD.46174
  # DEBUG D#99ptD.0 => &this_9(D)->_M_implD.44577._M_key_compareD.44731
  # DEBUG D#59ptD.0 => D#99ptD.0
  # DEBUG __xD.52570 => D#237ptD.0
  # DEBUG __yD.52571 => __k_12(D)
  # DEBUG thisD.52572 => D#59ptD.0
  # DEBUG __lhsD.52574 => D#237ptD.0
  # DEBUG __rhsD.52573 => __k_12(D)
  # DEBUG thisD.55818 => D#237ptD.0
  # DEBUG __strD.55819 => __k_12(D)
  # DEBUG D#253ptD.0 => MEM[(long unsigned intD.14 *)__j$_M_node_20 + 40B]
  # DEBUG D#1ptD.0 => D#237ptD.0
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.55820 => D#253ptD.0
  # DEBUG D#252ptD.0 => MEM[(long unsigned intD.14 *)__k_12(D) + 8B]
  # DEBUG D#1ptD.0 => __k_12(D)
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.55821 => D#252ptD.0
  # DEBUG __aD.55828 => &__sizeD.55820
  # DEBUG __bD.55827 => &__osizeD.55821
  # DEBUG __lenD.55822 => D#235ptD.0
  # DEBUG thisD.51798 => __k_12(D)
  # DEBUG D#251ptD.0 => MEM[(charD.10 * *)__k_12(D)]
  # DEBUG D#3ptD.0 => __k_12(D)
  # DEBUG thisD.50676 => D#3ptD.0
  # DEBUG D#250ptD.0 => MEM[(charD.10 * *)__j$_M_node_20 + 32B]
  # DEBUG D#3ptD.0 => D#237ptD.0
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.55831 => D#250ptD.0
  # DEBUG __s2D.55830 => D#251ptD.0
  # DEBUG __nD.55829 => D#235ptD.0
  # VUSE <.MEM_58>
  # USE = nonlocal escaped 
  __r_51 = memcmpD.989 (prephitmp_65, prephitmp_13, prephitmp_77);
  # DEBUG __rD.55823 => NULL
  if (__r_51 == 0)
    goto <bb 19>;
  else
    goto <bb 22>;
;;    succ:       19 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                22 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 521, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.55825 => D#253ptD.0
  # DEBUG __n2D.55824 => D#252ptD.0
  # RANGE [0, 18446744073709551615]
  _52 = prephitmp_78 - prephitmp_61;
  __d_53 = (const difference_typeD.14320) _52;
  # DEBUG __dD.55826 => __d_53
  if (__d_53 > 2147483647)
    goto <bb 24>;
  else
    goto <bb 20>;
;;    succ:       24 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 261, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       19 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_53 < -2147483648)
    goto <bb 23>;
  else
    goto <bb 21>;
;;    succ:       23 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 130, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_54 = (intD.9) _52;
;;    succ:       22 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 462, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       18 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                21 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_55 = PHI <__r_51(18), __r_54(21)>
  # DEBUG __rD.55823 => __r_55
  # DEBUG D#248ptD.0 => {CLOBBER}
  # DEBUG __sizeD.55820 => D#248ptD.0
  # DEBUG D#249ptD.0 => {CLOBBER}
  # DEBUG __osizeD.55821 => D#249ptD.0
  if (__r_55 < 0)
    goto <bb 23>;
  else
    goto <bb 24>;
;;    succ:       23 [7.1%]  (TRUE_VALUE,EXECUTABLE)
;;                24 [92.9%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 163, maybe hot
;;    prev block 22, next block 31, flags: (NEW, REACHABLE)
;;    pred:       22 [7.1%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       31 [100.0%]  (FALLTHRU)

;;   basic block 31, loop depth 0, count 0, freq 163, maybe hot
;;    prev block 23, next block 24, flags: (NEW)
;;    pred:       23 [100.0%]  (FALLTHRU)
  # DEBUG __rD.55823 => NULL
  # DEBUG thisD.52580 => &D.47487
  # DEBUG __aD.52581 => &D.47485
  # DEBUG __bD.52582 => &D.47486
  # .MEM_28 = VDEF <.MEM_58>
  MEM[(struct pairD.7331 *)&D.50328] = 0B;
  # .MEM_27 = VDEF <.MEM_28>
  MEM[(struct pairD.7331 *)&D.50328 + 8B] = _5;
  goto <bb 25>;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 691, maybe hot
;;    prev block 31, next block 30, flags: (NEW, REACHABLE)
;;    pred:       22 [92.9%]  (FALSE_VALUE,EXECUTABLE)
;;                19 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       30 [100.0%]  (FALLTHRU)

;;   basic block 30, loop depth 0, count 0, freq 691, maybe hot
;;    prev block 24, next block 25, flags: (NEW)
;;    pred:       24 [100.0%]  (FALLTHRU)
  # DEBUG __rD.55823 => NULL
  # DEBUG thisD.52583 => &D.47489
  # DEBUG __aD.52584 => &__jD.47479._M_nodeD.46148
  # DEBUG __bD.52585 => &D.47488
  # .MEM_11 = VDEF <.MEM_58>
  MEM[(struct pairD.7331 *)&D.50328] = __j$_M_node_20;
  # .MEM_30 = VDEF <.MEM_11>
  MEM[(struct pairD.7331 *)&D.50328 + 8B] = 0B;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 30, next block 29, flags: (NEW, REACHABLE)
;;    pred:       16 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_7 = PHI <.MEM_29(16), .MEM_27(31), .MEM_30(30)>
;;    succ:       29 [100.0%]  (FALLTHRU)

;;   basic block 29, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 25, next block 1, flags: (NEW)
;;    pred:       25 [100.0%]  (FALLTHRU)
  # DEBUG D#98ptD.0 => {CLOBBER}
  # DEBUG __j$_M_nodeD.52586 => D#98ptD.0
  # VUSE <.MEM_7>
  return D.50328;
;;    succ:       EXIT [100.0%] 

}



;; Function std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key, _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = void (*)(const Router*, const Flit*, int, OutputSet*, bool); _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >] (_ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPK6RouterPK4FlitiP9OutputSetbESt4lessIS5_ESaISt4pairIKS5_SF_EEEixERSJ_.constprop.56, funcdef_no=2377, decl_uid=54544, cgraph_uid=77, symbol_order=1601)


Pass statistics:
----------------

std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key, _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = void (*)(const Router*, const Flit*, int, OutputSet*, bool); _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >] (const struct key_typeD.44283 & __kD.54573)
Eh tree:
   1 cleanup land:{1,<L0>}
{
  size_typeD.14319 __dnewD.56262;
  const size_typeD.14319 __sizeD.56246;
  const size_typeD.14319 __osizeD.56247;
  const size_typeD.14319 __lenD.56248;
  intD.9 __rD.56249;
  const difference_typeD.14320 __dD.56252;
  intD.9 D.56258;
  const size_typeD.14319 __sizeD.56231;
  const size_typeD.14319 __osizeD.56232;
  const size_typeD.14319 __lenD.56233;
  intD.9 __rD.56234;
  const difference_typeD.14320 __dD.56237;
  intD.9 D.56243;
  struct iteratorD.44803 D.56228;
  struct _Rb_tree_nodeD.44503 * __yD.56218;
  struct value_typeD.44285 D.54645;
  struct iteratorD.45076 D.54644;
  struct iteratorD.44803 D.54643;
  struct const_iteratorD.44805 __posD.54611;
  struct _Rb_tree_node_baseD.6878 * const __i$_M_nodeD.54642;
  struct _Rb_tree_node_baseD.6878 * SR.431D.54641;
  struct _Rb_tree_node_baseD.6878 * SR.434D.54640;
  charD.10 * _10;
  charD.10 * const _12;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & _14;
  charD.10 * const _15;
  const size_typeD.14319 _20;
  charD.10 * const prephitmp_22;
  charD.10 * const pretmp_27;
  charD.10 * const prephitmp_28;
  const size_typeD.14319 prephitmp_29;
  charD.10 * const prephitmp_30;
  size_typeD.14319 pretmp_31;
  const size_typeD.14319 pretmp_37;
  const size_typeD.14319 prephitmp_38;
  charD.10 * const _54;
  long unsigned intD.14 _56;
  const size_typeD.14319 _62;
  charD.10 * const _65;
  long unsigned intD.14 _68;
  boolD.2757 _72;
  charD.10 * const pretmp_77;
  charD.10 * _78;
  long unsigned intD.14 __dnew.173_79;
  const char_typeD.10931 _81;
  charD.10 * _84;
  const size_typeD.14319 pretmp_88;
  size_typeD.14319 prephitmp_89;
  charD.10 * const pretmp_90;
  boolD.2757 _124;
  charD.10 * const _125;
  boolD.2757 _126;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.54572 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG thisD.54637 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG __xD.54636 => __k_2(D)
  # DEBUG thisD.56213 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __kD.56214 => __k_2(D)
  # DEBUG thisD.56215 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # VUSE <.MEM_19(D)>
  # PT = nonlocal escaped 
  __i$_M_node_41 = MEM[(struct _Rb_tree_node_baseD.6878 * *)&_Z19gRoutingFunctionMapB5cxx11D.42076 + 16B];
  # DEBUG D#31ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG thisD.52518 => D#31ptD.0
  # DEBUG D#96ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __xD.56219 => NULL
  # DEBUG __yD.56218 => NULL
  # DEBUG __kD.56217 => __k_2(D)
  # DEBUG __yD.56218 => &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732
  # DEBUG __xD.56219 => __i$_M_node_41
  if (__i$_M_node_41 == 0B)
    goto <bb 32>;
  else
    goto <bb 3>;
;;    succ:       32 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_19(D)>
  pretmp_88 = MEM[(long unsigned intD.14 *)__k_2(D) + 8B];
  # VUSE <.MEM_19(D)>
  # PT = nonlocal escaped 
  pretmp_77 = MEM[(charD.10 * *)__k_2(D)];
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       11 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_49 = PHI <__i$_M_node_45(11), __i$_M_node_46(12)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_48 = PHI <__i$_M_node_99(11), __i$_M_node_6(12)>
  # DEBUG __yD.56218 => __i$_M_node_48
  # DEBUG __xD.56219 => __i$_M_node_49
  if (__i$_M_node_49 == 0B)
    goto <bb 13>;
  else
    goto <bb 5>;
;;    succ:       13 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_130 = PHI <.MEM_19(D)(3), .MEM_130(5)>
  # PT = nonlocal escaped 
  # __i$_M_node_99 = PHI <__i$_M_node_41(3), __i$_M_node_49(5)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_6 = PHI <&MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732(3), __i$_M_node_48(5)>
  # DEBUG __yD.56218 => __i$_M_node_6
  # DEBUG __xD.56219 => __i$_M_node_99
  # DEBUG __xD.56220 => __i$_M_node_99
  # DEBUG __xD.52453 => __i$_M_node_99
  # DEBUG thisD.52454 => __i$_M_node_99
  # DEBUG D#93ptD.0 => &MEM[(const struct _Rb_tree_nodeD.44503 *)__i$_M_node_99]._M_value_fieldD.46493
  # DEBUG __rD.52444 => D#93ptD.0
  # DEBUG __xD.56222 => D#93ptD.0
  # DEBUG thisD.56221 => D#60ptD.0
  # DEBUG D#318ptD.0 => &MEM[(const struct pairD.42073 &)__i$_M_node_99 + 32].firstD.46174
  # DEBUG D#94ptD.0 => &D#95ptD.0->_M_implD.44577._M_key_compareD.44731
  # DEBUG D#59ptD.0 => D#94ptD.0
  # DEBUG __xD.56225 => D#318ptD.0
  # DEBUG __yD.56224 => __k_2(D)
  # DEBUG thisD.56223 => D#59ptD.0
  # DEBUG __lhsD.56227 => D#318ptD.0
  # DEBUG __rhsD.56226 => __k_2(D)
  # DEBUG thisD.56229 => D#318ptD.0
  # DEBUG __strD.56230 => __k_2(D)
  # VUSE <.MEM_130>
  _20 = MEM[(long unsigned intD.14 *)__i$_M_node_99 + 40B];
  # DEBUG D#1ptD.0 => D#318ptD.0
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.56231 => _20
  # DEBUG D#338ptD.0 => MEM[(long unsigned intD.14 *)__k_2(D) + 8B]
  # DEBUG D#1ptD.0 => __k_2(D)
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.56232 => D#338ptD.0
  # DEBUG __aD.56239 => &__sizeD.56231
  # DEBUG __bD.56238 => &__osizeD.56232
  __len_128 = MIN_EXPR <_20, pretmp_88>;
  # DEBUG __lenD.56233 => D#316ptD.0
  # DEBUG thisD.51798 => __k_2(D)
  # DEBUG D#337ptD.0 => MEM[(charD.10 * *)__k_2(D)]
  # DEBUG D#3ptD.0 => __k_2(D)
  # DEBUG thisD.50676 => D#3ptD.0
  # VUSE <.MEM_130>
  # PT = nonlocal escaped 
  _54 = MEM[(charD.10 * *)__i$_M_node_99 + 32B];
  # DEBUG D#3ptD.0 => D#318ptD.0
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.56242 => _54
  # DEBUG __s2D.56241 => D#337ptD.0
  # DEBUG __nD.56240 => D#316ptD.0
  # VUSE <.MEM_130>
  # USE = nonlocal escaped 
  __r_55 = memcmpD.989 (_54, pretmp_77, __len_128);
  # DEBUG __rD.56234 => NULL
  if (__r_55 == 0)
    goto <bb 7>;
  else
    goto <bb 10>;
;;    succ:       7 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 5551, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.56236 => _20
  # DEBUG __n2D.56235 => D#338ptD.0
  # RANGE [0, 18446744073709551615]
  _56 = _20 - pretmp_88;
  __d_57 = (const difference_typeD.14320) _56;
  # DEBUG __dD.56237 => __d_57
  if (__d_57 > 2147483647)
    goto <bb 11>;
  else
    goto <bb 8>;
;;    succ:       11 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 2775, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_57 < -2147483648)
    goto <bb 12>;
  else
    goto <bb 9>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 1388, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_58 = (intD.9) _56;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 4936, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       6 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_59 = PHI <__r_55(6), __r_58(9)>
  # DEBUG __rD.56234 => __r_59
  # DEBUG D#324ptD.0 => {CLOBBER}
  # DEBUG __sizeD.56231 => D#324ptD.0
  # DEBUG D#325ptD.0 => {CLOBBER}
  # DEBUG __osizeD.56232 => D#325ptD.0
  if (__r_59 >= 0)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [21.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 6643, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.56234 => NULL
  # DEBUG __yD.56218 => __i$_M_node_99
  # VUSE <.MEM_130>
  # PT = nonlocal escaped 
  __i$_M_node_45 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__i$_M_node_99 + 16B];
  # DEBUG D#37ptD.0 => __i$_M_node_99
  # DEBUG __xD.52486 => D#37ptD.0
  # DEBUG __xD.56219 => NULL
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 2457, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       10 [21.7%]  (FALSE_VALUE,EXECUTABLE)
;;                8 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.56234 => NULL
  # VUSE <.MEM_130>
  # PT = nonlocal escaped 
  __i$_M_node_46 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__i$_M_node_99 + 24B];
  # DEBUG D#36ptD.0 => __i$_M_node_99
  # DEBUG __xD.52485 => D#36ptD.0
  # DEBUG __xD.56219 => NULL
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       4 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_135 = PHI <__i$_M_node_48(4)>
  # DEBUG thisD.52484 => NULL
  # DEBUG __xD.52483 => __i$_M_node_135
  # DEBUG __i$_M_nodeD.54642 => __i$_M_node_135
  # DEBUG thisD.54638 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG D#44ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG thisD.54639 => D#44ptD.0
  # DEBUG thisD.51662 => NULL
  # DEBUG __xD.51661 => &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732
  # DEBUG thisD.53255 => &__iD.54574
  # DEBUG __xD.53256 => NULL
  if (__i$_M_node_135 == &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732)
    goto <bb 33>;
  else
    goto <bb 14>;
;;    succ:       33 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.53275 => &__iD.54574
  # DEBUG thisD.53276 => __i$_M_node_135
  # DEBUG D#144ptD.0 => &MEM[(struct _Rb_tree_nodeD.44503 *)__i$_M_node_135]._M_value_fieldD.46493
  # DEBUG __rD.51667 => D#144ptD.0
  # DEBUG D#319ptD.0 => &MEM[(struct pairD.42073 &)__i$_M_node_135 + 32].firstD.46174
  # DEBUG D#35ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG thisD.53272 => D#35ptD.0
  # DEBUG D#34ptD.0 => D#35ptD.0
  # DEBUG D#33ptD.0 => &D#34ptD.0->_M_tD.44500
  # DEBUG D#32ptD.0 => D#33ptD.0
  # DEBUG thisD.51597 => D#32ptD.0
  # DEBUG __xD.54633 => __k_2(D)
  # DEBUG __yD.54632 => D#319ptD.0
  # DEBUG thisD.54631 => D#59ptD.0
  # DEBUG __lhsD.54635 => __k_2(D)
  # DEBUG __rhsD.54634 => D#319ptD.0
  # DEBUG thisD.56244 => __k_2(D)
  # DEBUG __strD.56245 => D#319ptD.0
  # DEBUG D#336ptD.0 => MEM[(long unsigned intD.14 *)__k_2(D) + 8B]
  # DEBUG D#1ptD.0 => __k_2(D)
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.56246 => D#336ptD.0
  # VUSE <.MEM_130>
  _62 = MEM[(long unsigned intD.14 *)__i$_M_node_135 + 40B];
  # DEBUG D#1ptD.0 => D#319ptD.0
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.56247 => _62
  # DEBUG __aD.56254 => &__sizeD.56246
  # DEBUG __bD.56253 => &__osizeD.56247
  __len_129 = MIN_EXPR <_62, pretmp_88>;
  # DEBUG __lenD.56248 => D#317ptD.0
  # DEBUG thisD.51798 => D#319ptD.0
  # VUSE <.MEM_130>
  # PT = nonlocal escaped 
  _65 = MEM[(charD.10 * *)__i$_M_node_135 + 32B];
  # DEBUG D#3ptD.0 => D#319ptD.0
  # DEBUG thisD.50676 => D#3ptD.0
  # DEBUG D#335ptD.0 => MEM[(charD.10 * *)__k_2(D)]
  # DEBUG D#3ptD.0 => __k_2(D)
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.56257 => D#335ptD.0
  # DEBUG __s2D.56256 => _65
  # DEBUG __nD.56255 => D#317ptD.0
  # VUSE <.MEM_130>
  # USE = nonlocal escaped 
  __r_67 = memcmpD.989 (pretmp_77, _65, __len_129);
  # DEBUG __rD.56249 => NULL
  if (__r_67 == 0)
    goto <bb 15>;
  else
    goto <bb 18>;
;;    succ:       15 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 467, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.56251 => D#336ptD.0
  # DEBUG __n2D.56250 => _62
  # RANGE [0, 18446744073709551615]
  _68 = pretmp_88 - _62;
  __d_69 = (const difference_typeD.14320) _68;
  # DEBUG __dD.56252 => __d_69
  if (__d_69 > 2147483647)
    goto <bb 28>;
  else
    goto <bb 16>;
;;    succ:       28 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 233, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       15 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_69 < -2147483648)
    goto <bb 19>;
  else
    goto <bb 17>;
;;    succ:       19 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 117, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_70 = (intD.9) _68;
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 414, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       14 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_71 = PHI <__r_67(14), __r_70(17)>
  # DEBUG __rD.56249 => __r_71
  # DEBUG D#330ptD.0 => {CLOBBER}
  # DEBUG __sizeD.56246 => D#330ptD.0
  # DEBUG D#331ptD.0 => {CLOBBER}
  # DEBUG __osizeD.56247 => D#331ptD.0
  if (__r_71 < 0)
    goto <bb 33>;
  else
    goto <bb 28>;
;;    succ:       33 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [78.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       16 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_133 = PHI <.MEM_130(16), .MEM_132(33)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_47 = PHI <__i$_M_node_135(16), __i$_M_node_42(33)>
  # prephitmp_29 = PHI <pretmp_88(16), prephitmp_38(33)>
  # PT = nonlocal escaped 
  # prephitmp_30 = PHI <pretmp_77(16), prephitmp_28(33)>
  # DEBUG thisD.54616 => &D.54645
  # DEBUG __aD.54615 => __k_2(D)
  # DEBUG __bD.54614 => NULL
  # DEBUG thisD.54618 => &D.54645.firstD.46174
  # DEBUG __strD.54617 => __k_2(D)
  # DEBUG thisD.52863 => __k_2(D)
  # DEBUG D#113ptD.0 => &MEM[(const struct basic_stringD.9877 *)__k_2(D)]._M_dataplusD.14336
  # DEBUG thisD.54619 => &D.54645.firstD.46174
  # DEBUG D#114ptD.0 => &MEM[(struct basic_stringD.9877 *)&D.54645]._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#113ptD.0
  # DEBUG thisD.54622 => D#114ptD.0
  # DEBUG __datD.54621 => &MEM[(struct basic_stringD.9877 *)&D.54645].D.14356._M_local_bufD.14358
  # DEBUG __aD.54620 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#114ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_21 = VDEF <.MEM_133>
  MEM[(struct _Alloc_hiderD.14335 *)&D.54645]._M_pD.14342 = &MEM[(struct basic_stringD.9877 *)&D.54645].D.14356._M_local_bufD.14358;
  # DEBUG D#334ptD.0 => MEM[(charD.10 * *)__k_2(D)]
  # DEBUG D#3ptD.0 => __k_2(D)
  # DEBUG thisD.52856 => D#3ptD.0
  # DEBUG D#333ptD.0 => MEM[(long unsigned intD.14 *)__k_2(D) + 8B]
  # DEBUG D#4ptD.0 => __k_2(D)
  # DEBUG thisD.52853 => D#4ptD.0
  # PT = nonlocal escaped 
  _10 = prephitmp_30 + prephitmp_29;
  # DEBUG D#3ptD.0 => __k_2(D)
  # DEBUG thisD.52850 => D#3ptD.0
  # DEBUG thisD.54625 => &D.54645.firstD.46174
  # DEBUG __begD.54624 => D#334ptD.0
  # DEBUG __endD.54623 => _10
  # DEBUG thisD.54629 => &D.54645.firstD.46174
  # DEBUG __begD.54628 => D#334ptD.0
  # DEBUG __endD.54627 => _10
  # DEBUG thisD.56259 => &D.54645.firstD.46174
  # DEBUG __begD.56260 => D#334ptD.0
  # DEBUG __endD.56261 => _10
  # DEBUG __ptrD.52815 => D#334ptD.0
  # RANGE [0, 1]
  _72 = _10 != 0B;
  # RANGE [0, 1]
  _124 = prephitmp_30 == 0B;
  # RANGE [0, 1]
  _126 = _72 & _124;
  if (_126 != 0)
    goto <bb 34>;
  else
    goto <bb 35>;
;;    succ:       34 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 102, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       35 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_101 = VDEF <.MEM_100>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  _78 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.54645.firstD.46174, &__dnewD.56262, 0);
  # DEBUG D#5ptD.0 => &D.54645.firstD.46174
  # DEBUG __pD.56281 => _78
  # DEBUG thisD.56280 => D#5ptD.0
  # .MEM_102 = VDEF <.MEM_101>
  MEM[(charD.10 * *)&D.54645] = _78;
  # VUSE <.MEM_102>
  __dnew.173_79 = __dnewD.56262;
  # DEBUG D#6ptD.0 => &D.54645.firstD.46174
  # DEBUG __capacityD.56283 => __dnew.173_79
  # DEBUG thisD.56282 => D#6ptD.0
  # .MEM_103 = VDEF <.MEM_102>
  MEM[(size_typeD.14319 *)&D.54645 + 16B] = __dnew.173_79;
  # DEBUG D#3ptD.0 => &D.54645.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.56265 => _78
  # DEBUG __k1D.56264 => D#334ptD.0
  # DEBUG __k2D.56263 => _10
  # DEBUG __dD.56268 => _78
  # DEBUG __sD.56267 => D#334ptD.0
  # DEBUG __nD.56266 => D#333ptD.0
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 249, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       35 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#3ptD.0 => &D.54645.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.56265 => &MEM[(struct basic_stringD.9877 *)&D.54645].D.14356._M_local_bufD.14358
  # DEBUG __k1D.56264 => D#334ptD.0
  # DEBUG __k2D.56263 => _10
  # DEBUG __dD.56268 => &MEM[(struct basic_stringD.9877 *)&D.54645].D.14356._M_local_bufD.14358
  # DEBUG __sD.56267 => D#334ptD.0
  # DEBUG __nD.56266 => D#333ptD.0
  if (prephitmp_29 == 1)
    goto <bb 22>;
  else
    goto <bb 23>;
;;    succ:       22 [53.3%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [46.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 133, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       21 [53.3%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_100>
  _81 = MEM[(const char_typeD.10931 &)prephitmp_30];
  # DEBUG D#11ptD.0 => D#334ptD.0
  # DEBUG __c1D.56273 => &MEM[(struct basic_stringD.9877 *)&D.54645].D.14356._M_local_bufD.14358
  # DEBUG __c2D.56272 => D#11ptD.0
  # .MEM_104 = VDEF <.MEM_100>
  MEM[(char_typeD.10931 &)&D.54645 + 16] = _81;
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 218, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       21 [46.7%]  (FALSE_VALUE,EXECUTABLE)
;;                20 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped null { D.54645 } (escaped)
  # _125 = PHI <&MEM[(struct basic_stringD.9877 *)&D.54645].D.14356._M_local_bufD.14358(21), _78(20)>
  # .MEM_92 = PHI <.MEM_100(21), .MEM_103(20)>
  # DEBUG D#3ptD.0 => &D.54645.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.56265 => _125
  # DEBUG __k1D.56264 => D#334ptD.0
  # DEBUG __k2D.56263 => _10
  # DEBUG __dD.56268 => _125
  # DEBUG __sD.56267 => D#334ptD.0
  # DEBUG __nD.56266 => D#333ptD.0
  # DEBUG __s1D.56271 => _125
  # DEBUG __s2D.56270 => D#334ptD.0
  # DEBUG __nD.56269 => D#333ptD.0
  # .MEM_105 = VDEF <.MEM_92>
  # USE = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  memcpyD.992 (_125, prephitmp_30, prephitmp_29);
  # VUSE <.MEM_105>
  pretmp_31 = __dnewD.56262;
  # VUSE <.MEM_105>
  pretmp_90 = MEM[(charD.10 * *)&D.54645];
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_87 = PHI <.MEM_104(22), .MEM_105(23)>
  # prephitmp_89 = PHI <prephitmp_29(22), pretmp_31(23)>
  # PT = nonlocal escaped null { D.54645 } (escaped)
  # prephitmp_22 = PHI <&MEM[(struct basic_stringD.9877 *)&D.54645].D.14356._M_local_bufD.14358(22), pretmp_90(23)>
  # DEBUG D#332ptD.0 => __dnewD.56262
  # DEBUG thisD.56275 => &D.54645.firstD.46174
  # DEBUG __nD.56274 => D#332ptD.0
  # DEBUG D#7ptD.0 => &D.54645.firstD.46174
  # DEBUG __lengthD.56277 => D#332ptD.0
  # DEBUG thisD.56276 => D#7ptD.0
  # .MEM_106 = VDEF <.MEM_87>
  MEM[(size_typeD.14319 *)&D.54645 + 8B] = prephitmp_89;
  # DEBUG D#3ptD.0 => &D.54645.firstD.46174
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.54645 } (escaped)
  _84 = prephitmp_22 + prephitmp_89;
  # DEBUG __c1D.56279 => _84
  # DEBUG __c2D.56278 => D#11ptD.0
  # .MEM_107 = VDEF <.MEM_106>
  MEM[(char_typeD.10931 &)_84] = 0;
  # .MEM_108 = VDEF <.MEM_107>
  __dnewD.56262 ={v} {CLOBBER};
  # .MEM_23 = VDEF <.MEM_108>
  D.54645.secondD.46175 = 0B;
  # DEBUG thisD.54609 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG __position$_M_nodeD.53347 => __i$_M_node_47
  # DEBUG __xD.54607 => &D.54645
  # DEBUG thisD.53299 => NULL
  # DEBUG __itD.53298 => &__positionD.54608
  # DEBUG thisD.54612 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # .MEM_24 = VDEF <.MEM_23>
  MEM[(struct _Rb_tree_const_iteratorD.44806 *)&__posD.54611] = __i$_M_node_47;
  # DEBUG __xD.54610 => &D.54645
  # DEBUG thisD.53249 => &__anD.54613
  # DEBUG __tD.53248 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __an$_M_tD.53242 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG D#143ptD.0 => &__anD.54613
  [LP 1] # .MEM_25 = VDEF <.MEM_24>
  # USE = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  D.54643 = _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPK6RouterPK4FlitiP9OutputSetbEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_INSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_ERKSI_RT_.isra.54.constprop.57D.54545 (&_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500, __posD.54611, &D.54645);
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                29 (EH,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_25>
  # PT = nonlocal escaped 
  __i$_M_node_11 = MEM[(struct _Rb_tree_iteratorD.44804 *)&D.54643];
  # DEBUG __i$_M_nodeD.54642 => __i$_M_node_11
  # DEBUG thisD.54591 => &D.54645
  # DEBUG D#56ptD.0 => &D.54645.firstD.46174
  # DEBUG thisD.54592 => D#56ptD.0
  # DEBUG thisD.54593 => D#56ptD.0
  # DEBUG thisD.54602 => D#56ptD.0
  # VUSE <.MEM_25>
  # PT = nonlocal escaped null { D.54645 } (escaped)
  _12 = MEM[(charD.10 * *)&D.54645];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54603 => D#56ptD.0
  if (&MEM[(const struct basic_stringD.9877 *)&D.54645].D.14356._M_local_bufD.14358 != _12)
    goto <bb 26>;
  else
    goto <bb 27>;
;;    succ:       26 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 245, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       25 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54595 => D#56ptD.0
  # DEBUG __sizeD.54594 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54598 => _12
  # DEBUG __aD.54596 => D#49ptD.0
  # DEBUG __nD.54597 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54601 => _12
  # DEBUG thisD.54599 => D#45ptD.0
  # DEBUG D.54600 => D#46ptD.0
  # .MEM_26 = VDEF <.MEM_25>
  # USE = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  _ZdlPvD.2766 (_12);
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       25 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_16 = PHI <.MEM_25(25), .MEM_26(26)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.54604 => D#55ptD.0
  # DEBUG thisD.54605 => D#55ptD.0
  # DEBUG thisD.54606 => D#55ptD.0
  # .MEM_32 = VDEF <.MEM_16>
  D.54645 ={v} {CLOBBER};
;;    succ:       28 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       15 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                18 [78.3%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_13 = PHI <__i$_M_node_135(15), __i$_M_node_11(27), __i$_M_node_135(18)>
  # .MEM_17 = PHI <.MEM_130(15), .MEM_32(27), .MEM_130(18)>
  # DEBUG __i$_M_nodeD.54642 => __i$_M_node_13
  # DEBUG thisD.53323 => &__iD.54574
  # DEBUG thisD.53324 => __i$_M_node_13
  # DEBUG D#145ptD.0 => &MEM[(struct _Rb_tree_nodeD.44503 *)__i$_M_node_13]._M_value_fieldD.46493
  # DEBUG __rD.51667 => D#145ptD.0
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  _14 = &MEM[(struct pairD.42073 &)__i$_M_node_13 + 32].secondD.46175;
  # DEBUG D#147ptD.0 => {CLOBBER}
  # DEBUG __i$_M_nodeD.54642 => D#147ptD.0
  # VUSE <.MEM_17>
  return _14;
;;    succ:       EXIT [100.0%] 

;;   basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       24 (EH,EXECUTABLE)
<L0>: [LP 1]
  # DEBUG thisD.54575 => &D.54645
  # DEBUG D#56ptD.0 => &D.54645.firstD.46174
  # DEBUG thisD.54576 => D#56ptD.0
  # DEBUG thisD.54577 => D#56ptD.0
  # DEBUG thisD.54586 => D#56ptD.0
  # VUSE <.MEM_25>
  # PT = nonlocal escaped null { D.54645 } (escaped)
  _15 = MEM[(charD.10 * *)&D.54645];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54587 => D#56ptD.0
  if (&MEM[(const struct basic_stringD.9877 *)&D.54645].D.14356._M_local_bufD.14358 != _15)
    goto <bb 30>;
  else
    goto <bb 31>;
;;    succ:       30 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54579 => D#56ptD.0
  # DEBUG __sizeD.54578 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54582 => _15
  # DEBUG __aD.54580 => D#49ptD.0
  # DEBUG __nD.54581 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54585 => _15
  # DEBUG thisD.54583 => D#45ptD.0
  # DEBUG D.54584 => D#46ptD.0
  # .MEM_33 = VDEF <.MEM_25>
  # USE = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  _ZdlPvD.2766 (_15);
;;    succ:       31 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       29 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_18 = PHI <.MEM_25(29), .MEM_33(30)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.54588 => D#55ptD.0
  # DEBUG thisD.54589 => D#55ptD.0
  # DEBUG thisD.54590 => D#55ptD.0
  # .MEM_39 = VDEF <.MEM_18>
  D.54645 ={v} {CLOBBER};
  resx 1
;;    succ:      

;;   basic block 32, loop depth 0, count 0, freq 81, maybe hot
;;    prev block 31, next block 33, flags: (NEW)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_19(D)>
  pretmp_37 = MEM[(long unsigned intD.14 *)__k_2(D) + 8B];
  # VUSE <.MEM_19(D)>
  pretmp_27 = MEM[(charD.10 * *)__k_2(D)];
;;    succ:       33 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 225, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       18 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_132 = PHI <.MEM_130(18), .MEM_130(13), .MEM_19(D)(32)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_42 = PHI <__i$_M_node_135(18), __i$_M_node_135(13), &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732(32)>
  # prephitmp_38 = PHI <pretmp_88(18), pretmp_88(13), pretmp_37(32)>
  # prephitmp_28 = PHI <pretmp_77(18), pretmp_77(13), pretmp_27(32)>
  goto <bb 19>;
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 45, maybe hot
;;   Invalid sum of incoming frequencies 298, should be 45
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       19 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_109 = VDEF <.MEM_21>
  # USE = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  _ZSt19__throw_logic_errorPKcD.2828 ("basic_string::_M_construct null not valid");
;;    succ:      

;;   basic block 35, loop depth 0, count 0, freq 351, maybe hot
;;   Invalid sum of incoming frequencies 53, should be 351
;;    prev block 34, next block 1, flags: (NEW, REACHABLE)
;;    pred:       19 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __firstD.56285 => D#334ptD.0
  # DEBUG __lastD.56284 => _10
  # DEBUG D#109ptD.0 => &__firstD.56285
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.56287 => D#334ptD.0
  # DEBUG __lastD.56286 => _10
  # .MEM_100 = VDEF <.MEM_21>
  __dnewD.56262 = prephitmp_29;
  if (prephitmp_29 > 15)
    goto <bb 20>;
  else
    goto <bb 21>;
;;    succ:       20 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [71.0%]  (FALSE_VALUE,EXECUTABLE)

}


Creating dr for MEM[(struct _Rb_tree_node_base * *)&gRoutingFunctionMap + 16B]
analyze_innermost: success.
	base_address: &gRoutingFunctionMap
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_node_base * *)&gRoutingFunctionMap + 16B]
Creating dr for MEM[(long unsigned int *)__k_2(D) + 8B]
analyze_innermost: success.
	base_address: __k_2(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(long unsigned int *)__k_2(D) + 8B]
Creating dr for MEM[(char * *)__k_2(D)]
analyze_innermost: success.
	base_address: __k_2(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(char * *)__k_2(D)]
Creating dr for MEM[(long unsigned int *)__k_2(D) + 8B]
analyze_innermost: success.
	base_address: __k_2(D)
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(long unsigned int *)__k_2(D) + 8B]
Creating dr for MEM[(char * *)__k_2(D)]
analyze_innermost: success.
	base_address: __k_2(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(char * *)__k_2(D)]
Creating dr for MEM[(long unsigned int *)__i$_M_node_99 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)__i$_M_node_99 + 40B]
Creating dr for MEM[(long unsigned int *)__i$_M_node_99 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)__i$_M_node_99 + 40B]
Creating dr for MEM[(char * *)__i$_M_node_99 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__i$_M_node_99 + 32B]
Creating dr for MEM[(char * *)__i$_M_node_99 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__i$_M_node_99 + 32B]
Creating dr for MEM[(long unsigned int *)__i$_M_node_99 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)__i$_M_node_99 + 40B]
Creating dr for MEM[(long unsigned int *)__i$_M_node_99 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)__i$_M_node_99 + 40B]
Creating dr for MEM[(char * *)__i$_M_node_99 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__i$_M_node_99 + 32B]
Creating dr for MEM[(char * *)__i$_M_node_99 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__i$_M_node_99 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_99 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_99 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_99 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_99 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_99 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_99 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_99 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_99 + 16B]
Creating dr for MEM[(long unsigned int *)__i$_M_node_99 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)__i$_M_node_99 + 40B]
Creating dr for MEM[(long unsigned int *)__i$_M_node_99 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)__i$_M_node_99 + 40B]
Creating dr for MEM[(char * *)__i$_M_node_99 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__i$_M_node_99 + 32B]
Creating dr for MEM[(char * *)__i$_M_node_99 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__i$_M_node_99 + 32B]
Creating dr for MEM[(long unsigned int *)__i$_M_node_99 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)__i$_M_node_99 + 40B]
Creating dr for MEM[(long unsigned int *)__i$_M_node_99 + 40B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(long unsigned int *)__i$_M_node_99 + 40B]
Creating dr for MEM[(char * *)__i$_M_node_99 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__i$_M_node_99 + 32B]
Creating dr for MEM[(char * *)__i$_M_node_99 + 32B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(char * *)__i$_M_node_99 + 32B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_99 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_99 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_99 + 24B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_99 + 24B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_99 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_99 + 16B]
Creating dr for MEM[(struct _Rb_tree_node_base * *)__i$_M_node_99 + 16B]
analyze_innermost: failed: evolution of base is not affine.
	base_address: 
	offset from base address: 
	constant offset from base address: 
	step: 
	aligned to: 
	base_object: MEM[(struct _Rb_tree_node_base * *)__i$_M_node_99 + 16B]
Creating dr for MEM[(long unsigned int *)__i$_M_node_135 + 40B]
analyze_innermost: success.
	base_address: __i$_M_node_135
	offset from base address: 0
	constant offset from base address: 40
	step: 0
	aligned to: 256
	base_object: MEM[(long unsigned int *)__i$_M_node_135 + 40B]
Creating dr for MEM[(char * *)__i$_M_node_135 + 32B]
analyze_innermost: success.
	base_address: __i$_M_node_135
	offset from base address: 0
	constant offset from base address: 32
	step: 0
	aligned to: 256
	base_object: MEM[(char * *)__i$_M_node_135 + 32B]
Creating dr for MEM[(struct _Alloc_hider *)&D.54645]._M_p
analyze_innermost: success.
	base_address: &D.54645
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Alloc_hider *)&D.54645]
	Access function 0: 0
Creating dr for __dnew
analyze_innermost: success.
	base_address: &__dnew
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(long unsigned int *)&__dnew]
Creating dr for MEM[(const char_type &)prephitmp_30]
analyze_innermost: success.
	base_address: prephitmp_30
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(const char_type &)prephitmp_30]
Creating dr for MEM[(char_type &)&D.54645 + 16]
analyze_innermost: success.
	base_address: &D.54645
	offset from base address: 0
	constant offset from base address: 16
	step: 0
	aligned to: 256
	base_object: MEM[(char_type &)&D.54645 + 16]
Creating dr for MEM[(size_type *)&D.54645 + 8B]
analyze_innermost: success.
	base_address: &D.54645
	offset from base address: 0
	constant offset from base address: 8
	step: 0
	aligned to: 256
	base_object: MEM[(size_type *)&D.54645 + 8B]
Creating dr for MEM[(char_type &)_84]
analyze_innermost: success.
	base_address: prephitmp_22 + prephitmp_89
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(char_type &)_84]
Creating dr for MEM[(struct _Rb_tree_iterator *)&D.54643]
analyze_innermost: success.
	base_address: &D.54643
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(struct _Rb_tree_iterator *)&D.54643]
Creating dr for MEM[(char * *)&D.54645]
analyze_innermost: success.
	base_address: &D.54645
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(char * *)&D.54645]
Creating dr for MEM[(char * *)&D.54645]
analyze_innermost: success.
	base_address: &D.54645
	offset from base address: 0
	constant offset from base address: 0
	step: 0
	aligned to: 256
	base_object: MEM[(char * *)&D.54645]

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:6)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:2)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:1)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:9)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Before limit_scops SCoP statistics (BBS:1, LOOPS:0, CONDITIONS:0, STMTS:5)

Before limit_scops SCoP profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

number of SCoPs: 0

Global statistics (BBS:41, LOOPS:1, CONDITIONS:17, STMTS:376)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)
loop_0 (header = 0, latch = 1, niter = )
{
  bb_2 (preds = {bb_0 }, succs = {bb_32 bb_3 })
  {
    <bb 2>:
    # DEBUG this => &gRoutingFunctionMap
    # DEBUG this => &gRoutingFunctionMap
    # DEBUG __x => __k_2(D)
    # DEBUG this => &gRoutingFunctionMap._M_t
    # DEBUG __k => __k_2(D)
    # DEBUG this => &gRoutingFunctionMap._M_t
    # VUSE <.MEM_19(D)>
    __i$_M_node_41 = MEM[(struct _Rb_tree_node_base * *)&gRoutingFunctionMap + 16B];
    # DEBUG D#31 => &gRoutingFunctionMap._M_t
    # DEBUG this => D#31
    # DEBUG D#96 => &gRoutingFunctionMap._M_t
    # DEBUG __x => NULL
    # DEBUG __y => NULL
    # DEBUG __k => __k_2(D)
    # DEBUG __y => &MEM[(struct _Rb_tree *)&gRoutingFunctionMap]._M_impl._M_header
    # DEBUG __x => __i$_M_node_41
    if (__i$_M_node_41 == 0B)
      goto <bb 32>;
    else
      goto <bb 3>;

  }
  bb_3 (preds = {bb_2 }, succs = {bb_6 })
  {
    <bb 3>:
    # VUSE <.MEM_19(D)>
    pretmp_88 = MEM[(long unsigned int *)__k_2(D) + 8B];
    # VUSE <.MEM_19(D)>
    pretmp_77 = MEM[(char * *)__k_2(D)];
    goto <bb 6>;

  }
  bb_13 (preds = {bb_4 }, succs = {bb_36 })
  {
    <bb 13>:
    # __i$_M_node_135 = PHI <__i$_M_node_48(4)>

  }
  bb_36 (preds = {bb_13 }, succs = {bb_33 bb_14 })
  {
    <bb 36>:
    # DEBUG this => NULL
    # DEBUG __x => __i$_M_node_135
    # DEBUG __i$_M_node => __i$_M_node_135
    # DEBUG this => &gRoutingFunctionMap
    # DEBUG D#44 => &gRoutingFunctionMap._M_t
    # DEBUG this => D#44
    # DEBUG this => NULL
    # DEBUG __x => &MEM[(struct _Rb_tree *)&gRoutingFunctionMap]._M_impl._M_header
    # DEBUG this => &__i
    # DEBUG __x => NULL
    if (__i$_M_node_135 == &MEM[(struct _Rb_tree *)&gRoutingFunctionMap]._M_impl._M_header)
      goto <bb 33>;
    else
      goto <bb 14>;

  }
  bb_14 (preds = {bb_36 }, succs = {bb_15 bb_18 })
  {
    <bb 14>:
    # DEBUG this => &__i
    # DEBUG this => __i$_M_node_135
    # DEBUG D#144 => &MEM[(struct _Rb_tree_node *)__i$_M_node_135]._M_value_field
    # DEBUG __r => D#144
    # DEBUG D#319 => &MEM[(struct pair &)__i$_M_node_135 + 32].first
    # DEBUG D#35 => &gRoutingFunctionMap
    # DEBUG this => D#35
    # DEBUG D#34 => D#35
    # DEBUG D#33 => &D#34->_M_t
    # DEBUG D#32 => D#33
    # DEBUG this => D#32
    # DEBUG __x => __k_2(D)
    # DEBUG __y => D#319
    # DEBUG this => D#59
    # DEBUG __lhs => __k_2(D)
    # DEBUG __rhs => D#319
    # DEBUG this => __k_2(D)
    # DEBUG __str => D#319
    # DEBUG D#336 => MEM[(long unsigned int *)__k_2(D) + 8B]
    # DEBUG D#1 => __k_2(D)
    # DEBUG this => D#1
    # DEBUG __size => D#336
    # VUSE <.MEM_130>
    _62 = MEM[(long unsigned int *)__i$_M_node_135 + 40B];
    # DEBUG D#1 => D#319
    # DEBUG this => D#1
    # DEBUG __osize => _62
    # DEBUG __a => &__size
    # DEBUG __b => &__osize
    __len_129 = MIN_EXPR <_62, pretmp_88>;
    # DEBUG __len => D#317
    # DEBUG this => D#319
    # VUSE <.MEM_130>
    _65 = MEM[(char * *)__i$_M_node_135 + 32B];
    # DEBUG D#3 => D#319
    # DEBUG this => D#3
    # DEBUG D#335 => MEM[(char * *)__k_2(D)]
    # DEBUG D#3 => __k_2(D)
    # DEBUG this => D#3
    # DEBUG __s1 => D#335
    # DEBUG __s2 => _65
    # DEBUG __n => D#317
    # VUSE <.MEM_130>
    __r_67 = __builtin_memcmp (pretmp_77, _65, __len_129);
    # DEBUG __r => NULL
    if (__r_67 == 0)
      goto <bb 15>;
    else
      goto <bb 18>;

  }
  bb_15 (preds = {bb_14 }, succs = {bb_28 bb_16 })
  {
    <bb 15>:
    # DEBUG __n1 => D#336
    # DEBUG __n2 => _62
    _68 = pretmp_88 - _62;
    __d_69 = (const difference_type) _68;
    # DEBUG __d => __d_69
    if (__d_69 > 2147483647)
      goto <bb 28>;
    else
      goto <bb 16>;

  }
  bb_16 (preds = {bb_15 }, succs = {bb_19 bb_17 })
  {
    <bb 16>:
    if (__d_69 < -2147483648)
      goto <bb 19>;
    else
      goto <bb 17>;

  }
  bb_17 (preds = {bb_16 }, succs = {bb_18 })
  {
    <bb 17>:
    __r_70 = (int) _68;

  }
  bb_18 (preds = {bb_14 bb_17 }, succs = {bb_33 bb_28 })
  {
    <bb 18>:
    # __r_71 = PHI <__r_67(14), __r_70(17)>
    # DEBUG __r => __r_71
    # DEBUG D#330 => {CLOBBER}
    # DEBUG __size => D#330
    # DEBUG D#331 => {CLOBBER}
    # DEBUG __osize => D#331
    if (__r_71 < 0)
      goto <bb 33>;
    else
      goto <bb 28>;

  }
  bb_19 (preds = {bb_16 bb_39 }, succs = {bb_34 bb_35 })
  {
    <bb 19>:
    # .MEM_133 = PHI <.MEM_130(16), .MEM_132(39)>
    # __i$_M_node_47 = PHI <__i$_M_node_135(16), __i$_M_node_42(39)>
    # prephitmp_29 = PHI <pretmp_88(16), prephitmp_38(39)>
    # prephitmp_30 = PHI <pretmp_77(16), prephitmp_28(39)>
    # DEBUG this => &D.54645
    # DEBUG __a => __k_2(D)
    # DEBUG __b => NULL
    # DEBUG this => &D.54645.first
    # DEBUG __str => __k_2(D)
    # DEBUG this => __k_2(D)
    # DEBUG D#113 => &MEM[(const struct basic_string *)__k_2(D)]._M_dataplus
    # DEBUG this => &D.54645.first
    # DEBUG D#114 => &MEM[(struct basic_string *)&D.54645]._M_dataplus
    # DEBUG D#43 => D#113
    # DEBUG this => D#114
    # DEBUG __dat => &MEM[(struct basic_string *)&D.54645].D.14356._M_local_buf
    # DEBUG __a => D#43
    # DEBUG D#42 => D#43
    # DEBUG D#40 => D#114
    # DEBUG D#41 => D#42
    # DEBUG this => D#40
    # DEBUG __a => D#41
    # DEBUG D#39 => D#41
    # DEBUG D#38 => D#40
    # DEBUG this => D#38
    # DEBUG D.51633 => D#39
    # .MEM_21 = VDEF <.MEM_133>
    MEM[(struct _Alloc_hider *)&D.54645]._M_p = &MEM[(struct basic_string *)&D.54645].D.14356._M_local_buf;
    # DEBUG D#334 => MEM[(char * *)__k_2(D)]
    # DEBUG D#3 => __k_2(D)
    # DEBUG this => D#3
    # DEBUG D#333 => MEM[(long unsigned int *)__k_2(D) + 8B]
    # DEBUG D#4 => __k_2(D)
    # DEBUG this => D#4
    _10 = prephitmp_30 + prephitmp_29;
    # DEBUG D#3 => __k_2(D)
    # DEBUG this => D#3
    # DEBUG this => &D.54645.first
    # DEBUG __beg => D#334
    # DEBUG __end => _10
    # DEBUG this => &D.54645.first
    # DEBUG __beg => D#334
    # DEBUG __end => _10
    # DEBUG this => &D.54645.first
    # DEBUG __beg => D#334
    # DEBUG __end => _10
    # DEBUG __ptr => D#334
    _72 = _10 != 0B;
    _124 = prephitmp_30 == 0B;
    _126 = _72 & _124;
    if (_126 != 0)
      goto <bb 34>;
    else
      goto <bb 35>;

  }
  bb_20 (preds = {bb_35 }, succs = {bb_23 })
  {
    <bb 20>:
    # .MEM_101 = VDEF <.MEM_100>
    _78 = std::__cxx11::basic_string<char>::_M_create (&D.54645.first, &__dnew, 0);
    # DEBUG D#5 => &D.54645.first
    # DEBUG __p => _78
    # DEBUG this => D#5
    # .MEM_102 = VDEF <.MEM_101>
    MEM[(char * *)&D.54645] = _78;
    # VUSE <.MEM_102>
    __dnew.173_79 = __dnew;
    # DEBUG D#6 => &D.54645.first
    # DEBUG __capacity => __dnew.173_79
    # DEBUG this => D#6
    # .MEM_103 = VDEF <.MEM_102>
    MEM[(size_type *)&D.54645 + 16B] = __dnew.173_79;
    # DEBUG D#3 => &D.54645.first
    # DEBUG this => D#3
    # DEBUG __p => _78
    # DEBUG __k1 => D#334
    # DEBUG __k2 => _10
    # DEBUG __d => _78
    # DEBUG __s => D#334
    # DEBUG __n => D#333
    goto <bb 23>;

  }
  bb_21 (preds = {bb_35 }, succs = {bb_22 bb_23 })
  {
    <bb 21>:
    # DEBUG D#3 => &D.54645.first
    # DEBUG this => D#3
    # DEBUG __p => &MEM[(struct basic_string *)&D.54645].D.14356._M_local_buf
    # DEBUG __k1 => D#334
    # DEBUG __k2 => _10
    # DEBUG __d => &MEM[(struct basic_string *)&D.54645].D.14356._M_local_buf
    # DEBUG __s => D#334
    # DEBUG __n => D#333
    if (prephitmp_29 == 1)
      goto <bb 22>;
    else
      goto <bb 23>;

  }
  bb_22 (preds = {bb_21 }, succs = {bb_24 })
  {
    <bb 22>:
    # VUSE <.MEM_100>
    _81 = MEM[(const char_type &)prephitmp_30];
    # DEBUG D#11 => D#334
    # DEBUG __c1 => &MEM[(struct basic_string *)&D.54645].D.14356._M_local_buf
    # DEBUG __c2 => D#11
    # .MEM_104 = VDEF <.MEM_100>
    MEM[(char_type &)&D.54645 + 16] = _81;
    goto <bb 24>;

  }
  bb_23 (preds = {bb_21 bb_20 }, succs = {bb_24 })
  {
    <bb 23>:
    # _125 = PHI <&MEM[(struct basic_string *)&D.54645].D.14356._M_local_buf(21), _78(20)>
    # .MEM_92 = PHI <.MEM_100(21), .MEM_103(20)>
    # DEBUG D#3 => &D.54645.first
    # DEBUG this => D#3
    # DEBUG __p => _125
    # DEBUG __k1 => D#334
    # DEBUG __k2 => _10
    # DEBUG __d => _125
    # DEBUG __s => D#334
    # DEBUG __n => D#333
    # DEBUG __s1 => _125
    # DEBUG __s2 => D#334
    # DEBUG __n => D#333
    # .MEM_105 = VDEF <.MEM_92>
    __builtin_memcpy (_125, prephitmp_30, prephitmp_29);
    # VUSE <.MEM_105>
    pretmp_31 = __dnew;
    # VUSE <.MEM_105>
    pretmp_90 = MEM[(char * *)&D.54645];

  }
  bb_24 (preds = {bb_22 bb_23 }, succs = {bb_25 bb_29 })
  {
    <bb 24>:
    # .MEM_87 = PHI <.MEM_104(22), .MEM_105(23)>
    # prephitmp_89 = PHI <prephitmp_29(22), pretmp_31(23)>
    # prephitmp_22 = PHI <&MEM[(struct basic_string *)&D.54645].D.14356._M_local_buf(22), pretmp_90(23)>
    # DEBUG D#332 => __dnew
    # DEBUG this => &D.54645.first
    # DEBUG __n => D#332
    # DEBUG D#7 => &D.54645.first
    # DEBUG __length => D#332
    # DEBUG this => D#7
    # .MEM_106 = VDEF <.MEM_87>
    MEM[(size_type *)&D.54645 + 8B] = prephitmp_89;
    # DEBUG D#3 => &D.54645.first
    # DEBUG this => D#3
    _84 = prephitmp_22 + prephitmp_89;
    # DEBUG __c1 => _84
    # DEBUG __c2 => D#11
    # .MEM_107 = VDEF <.MEM_106>
    MEM[(char_type &)_84] = 0;
    # .MEM_108 = VDEF <.MEM_107>
    __dnew ={v} {CLOBBER};
    # .MEM_23 = VDEF <.MEM_108>
    D.54645.second = 0B;
    # DEBUG this => &gRoutingFunctionMap
    # DEBUG __position$_M_node => __i$_M_node_47
    # DEBUG __x => &D.54645
    # DEBUG this => NULL
    # DEBUG __it => &__position
    # DEBUG this => &gRoutingFunctionMap._M_t
    # .MEM_24 = VDEF <.MEM_23>
    MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_47;
    # DEBUG __x => &D.54645
    # DEBUG this => &__an
    # DEBUG __t => &gRoutingFunctionMap._M_t
    # DEBUG __an$_M_t => &gRoutingFunctionMap._M_t
    # DEBUG D#143 => &__an
    # .MEM_25 = VDEF <.MEM_24>
    D.54643 = std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> > >::_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPK6RouterPK4FlitiP9OutputSetbEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_INSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_ERKSI_RT_.isra.54.constprop (&gRoutingFunctionMap._M_t, __pos, &D.54645);

  }
  bb_25 (preds = {bb_24 }, succs = {bb_26 bb_27 })
  {
    <bb 25>:
    # VUSE <.MEM_25>
    __i$_M_node_11 = MEM[(struct _Rb_tree_iterator *)&D.54643];
    # DEBUG __i$_M_node => __i$_M_node_11
    # DEBUG this => &D.54645
    # DEBUG D#56 => &D.54645.first
    # DEBUG this => D#56
    # DEBUG this => D#56
    # DEBUG this => D#56
    # VUSE <.MEM_25>
    _12 = MEM[(char * *)&D.54645];
    # DEBUG D#3 => D#56
    # DEBUG this => D#3
    # DEBUG this => D#56
    if (&MEM[(const struct basic_string *)&D.54645].D.14356._M_local_buf != _12)
      goto <bb 26>;
    else
      goto <bb 27>;

  }
  bb_26 (preds = {bb_25 }, succs = {bb_27 })
  {
    <bb 26>:
    # DEBUG D#54 => MEM[(struct basic_string *)D#56].D.14356._M_allocated_capacity
    # DEBUG D#53 => D#54
    # DEBUG this => D#56
    # DEBUG __size => D#53
    # DEBUG D#52 => D#53
    # DEBUG D#3 => D#56
    # DEBUG this => D#3
    # DEBUG this => D#56
    # DEBUG D#51 => &MEM[(struct basic_string *)D#56]._M_dataplus
    # DEBUG D#49 => D#51
    # DEBUG D#50 => D#52 + 1
    # DEBUG __p => _12
    # DEBUG __a => D#49
    # DEBUG __n => D#50
    # DEBUG D#48 => D#50
    # DEBUG D#47 => D#49
    # DEBUG D#45 => D#47
    # DEBUG D#46 => D#48
    # DEBUG __p => _12
    # DEBUG this => D#45
    # DEBUG D.54600 => D#46
    # .MEM_26 = VDEF <.MEM_25>
    operator delete (_12);

  }
  bb_27 (preds = {bb_25 bb_26 }, succs = {bb_28 })
  {
    <bb 27>:
    # .MEM_16 = PHI <.MEM_25(25), .MEM_26(26)>
    # DEBUG D#55 => &MEM[(struct basic_string *)D#56]._M_dataplus
    # DEBUG this => D#55
    # DEBUG this => D#55
    # DEBUG this => D#55
    # .MEM_32 = VDEF <.MEM_16>
    D.54645 ={v} {CLOBBER};

  }
  bb_28 (preds = {bb_15 bb_27 bb_18 }, succs = {bb_40 })
  {
    <bb 28>:
    # __i$_M_node_13 = PHI <__i$_M_node_135(15), __i$_M_node_11(27), __i$_M_node_135(18)>
    # .MEM_17 = PHI <.MEM_130(15), .MEM_32(27), .MEM_130(18)>

  }
  bb_40 (preds = {bb_28 }, succs = {bb_1 })
  {
    <bb 40>:
    # DEBUG __i$_M_node => __i$_M_node_13
    # DEBUG this => &__i
    # DEBUG this => __i$_M_node_13
    # DEBUG D#145 => &MEM[(struct _Rb_tree_node *)__i$_M_node_13]._M_value_field
    # DEBUG __r => D#145
    _14 = &MEM[(struct pair &)__i$_M_node_13 + 32].second;
    # DEBUG D#147 => {CLOBBER}
    # DEBUG __i$_M_node => D#147
    # VUSE <.MEM_17>
    return _14;

  }
  bb_29 (preds = {bb_24 }, succs = {bb_30 bb_31 })
  {
  <L0>:
    # DEBUG this => &D.54645
    # DEBUG D#56 => &D.54645.first
    # DEBUG this => D#56
    # DEBUG this => D#56
    # DEBUG this => D#56
    # VUSE <.MEM_25>
    _15 = MEM[(char * *)&D.54645];
    # DEBUG D#3 => D#56
    # DEBUG this => D#3
    # DEBUG this => D#56
    if (&MEM[(const struct basic_string *)&D.54645].D.14356._M_local_buf != _15)
      goto <bb 30>;
    else
      goto <bb 31>;

  }
  bb_30 (preds = {bb_29 }, succs = {bb_31 })
  {
    <bb 30>:
    # DEBUG D#54 => MEM[(struct basic_string *)D#56].D.14356._M_allocated_capacity
    # DEBUG D#53 => D#54
    # DEBUG this => D#56
    # DEBUG __size => D#53
    # DEBUG D#52 => D#53
    # DEBUG D#3 => D#56
    # DEBUG this => D#3
    # DEBUG this => D#56
    # DEBUG D#51 => &MEM[(struct basic_string *)D#56]._M_dataplus
    # DEBUG D#49 => D#51
    # DEBUG D#50 => D#52 + 1
    # DEBUG __p => _15
    # DEBUG __a => D#49
    # DEBUG __n => D#50
    # DEBUG D#48 => D#50
    # DEBUG D#47 => D#49
    # DEBUG D#45 => D#47
    # DEBUG D#46 => D#48
    # DEBUG __p => _15
    # DEBUG this => D#45
    # DEBUG D.54584 => D#46
    # .MEM_33 = VDEF <.MEM_25>
    operator delete (_15);

  }
  bb_31 (preds = {bb_29 bb_30 }, succs = {})
  {
    <bb 31>:
    # .MEM_18 = PHI <.MEM_25(29), .MEM_33(30)>
    # DEBUG D#55 => &MEM[(struct basic_string *)D#56]._M_dataplus
    # DEBUG this => D#55
    # DEBUG this => D#55
    # DEBUG this => D#55
    # .MEM_39 = VDEF <.MEM_18>
    D.54645 ={v} {CLOBBER};
    resx 1

  }
  bb_32 (preds = {bb_2 }, succs = {bb_33 })
  {
    <bb 32>:
    # VUSE <.MEM_19(D)>
    pretmp_37 = MEM[(long unsigned int *)__k_2(D) + 8B];
    # VUSE <.MEM_19(D)>
    pretmp_27 = MEM[(char * *)__k_2(D)];

  }
  bb_33 (preds = {bb_18 bb_36 bb_32 }, succs = {bb_39 })
  {
    <bb 33>:
    # .MEM_132 = PHI <.MEM_130(18), .MEM_130(36), .MEM_19(D)(32)>
    # __i$_M_node_42 = PHI <__i$_M_node_135(18), __i$_M_node_135(36), &MEM[(struct _Rb_tree *)&gRoutingFunctionMap]._M_impl._M_header(32)>
    # prephitmp_38 = PHI <pretmp_88(18), pretmp_88(36), pretmp_37(32)>
    # prephitmp_28 = PHI <pretmp_77(18), pretmp_77(36), pretmp_27(32)>

  }
  bb_39 (preds = {bb_33 }, succs = {bb_19 })
  {
    <bb 39>:
    goto <bb 19>;

  }
  bb_34 (preds = {bb_19 }, succs = {})
  {
    <bb 34>:
    # .MEM_109 = VDEF <.MEM_21>
    std::__throw_logic_error ("basic_string::_M_construct null not valid");

  }
  bb_35 (preds = {bb_19 }, succs = {bb_20 bb_21 })
  {
    <bb 35>:
    # DEBUG __first => D#334
    # DEBUG __last => _10
    # DEBUG D#109 => &__first
    # DEBUG D.52744 => D#109
    # DEBUG __first => D#334
    # DEBUG __last => _10
    # .MEM_100 = VDEF <.MEM_21>
    __dnew = prephitmp_29;
    if (prephitmp_29 > 15)
      goto <bb 20>;
    else
      goto <bb 21>;

  }
  loop_1 (header = 6, latch = 5, niter = )
  {
    bb_4 (preds = {bb_38 bb_37 }, succs = {bb_13 bb_5 })
    {
      <bb 4>:
      # __i$_M_node_49 = PHI <__i$_M_node_45(38), __i$_M_node_46(37)>
      # __i$_M_node_48 = PHI <__i$_M_node_99(38), __i$_M_node_6(37)>
      # DEBUG __y => __i$_M_node_48
      # DEBUG __x => __i$_M_node_49
      if (__i$_M_node_49 == 0B)
        goto <bb 13>;
      else
        goto <bb 5>;

    }
    bb_5 (preds = {bb_4 }, succs = {bb_6 })
    {
      <bb 5>:

    }
    bb_6 (preds = {bb_3 bb_5 }, succs = {bb_7 bb_10 })
    {
      <bb 6>:
      # .MEM_130 = PHI <.MEM_19(D)(3), .MEM_130(5)>
      # __i$_M_node_99 = PHI <__i$_M_node_41(3), __i$_M_node_49(5)>
      # __i$_M_node_6 = PHI <&MEM[(struct _Rb_tree *)&gRoutingFunctionMap]._M_impl._M_header(3), __i$_M_node_48(5)>
      # DEBUG __y => __i$_M_node_6
      # DEBUG __x => __i$_M_node_99
      # DEBUG __x => __i$_M_node_99
      # DEBUG __x => __i$_M_node_99
      # DEBUG this => __i$_M_node_99
      # DEBUG D#93 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_99]._M_value_field
      # DEBUG __r => D#93
      # DEBUG __x => D#93
      # DEBUG this => D#60
      # DEBUG D#318 => &MEM[(const struct pair &)__i$_M_node_99 + 32].first
      # DEBUG D#94 => &D#95->_M_impl._M_key_compare
      # DEBUG D#59 => D#94
      # DEBUG __x => D#318
      # DEBUG __y => __k_2(D)
      # DEBUG this => D#59
      # DEBUG __lhs => D#318
      # DEBUG __rhs => __k_2(D)
      # DEBUG this => D#318
      # DEBUG __str => __k_2(D)
      # VUSE <.MEM_130>
      _20 = MEM[(long unsigned int *)__i$_M_node_99 + 40B];
      # DEBUG D#1 => D#318
      # DEBUG this => D#1
      # DEBUG __size => _20
      # DEBUG D#338 => MEM[(long unsigned int *)__k_2(D) + 8B]
      # DEBUG D#1 => __k_2(D)
      # DEBUG this => D#1
      # DEBUG __osize => D#338
      # DEBUG __a => &__size
      # DEBUG __b => &__osize
      __len_128 = MIN_EXPR <_20, pretmp_88>;
      # DEBUG __len => D#316
      # DEBUG this => __k_2(D)
      # DEBUG D#337 => MEM[(char * *)__k_2(D)]
      # DEBUG D#3 => __k_2(D)
      # DEBUG this => D#3
      # VUSE <.MEM_130>
      _54 = MEM[(char * *)__i$_M_node_99 + 32B];
      # DEBUG D#3 => D#318
      # DEBUG this => D#3
      # DEBUG __s1 => _54
      # DEBUG __s2 => D#337
      # DEBUG __n => D#316
      # VUSE <.MEM_130>
      __r_55 = __builtin_memcmp (_54, pretmp_77, __len_128);
      # DEBUG __r => NULL
      if (__r_55 == 0)
        goto <bb 7>;
      else
        goto <bb 10>;

    }
    bb_7 (preds = {bb_6 }, succs = {bb_11 bb_8 })
    {
      <bb 7>:
      # DEBUG __n1 => _20
      # DEBUG __n2 => D#338
      _56 = _20 - pretmp_88;
      __d_57 = (const difference_type) _56;
      # DEBUG __d => __d_57
      if (__d_57 > 2147483647)
        goto <bb 11>;
      else
        goto <bb 8>;

    }
    bb_8 (preds = {bb_7 }, succs = {bb_12 bb_9 })
    {
      <bb 8>:
      if (__d_57 < -2147483648)
        goto <bb 12>;
      else
        goto <bb 9>;

    }
    bb_9 (preds = {bb_8 }, succs = {bb_10 })
    {
      <bb 9>:
      __r_58 = (int) _56;

    }
    bb_10 (preds = {bb_6 bb_9 }, succs = {bb_11 bb_12 })
    {
      <bb 10>:
      # __r_59 = PHI <__r_55(6), __r_58(9)>
      # DEBUG __r => __r_59
      # DEBUG D#324 => {CLOBBER}
      # DEBUG __size => D#324
      # DEBUG D#325 => {CLOBBER}
      # DEBUG __osize => D#325
      if (__r_59 >= 0)
        goto <bb 11>;
      else
        goto <bb 12>;

    }
    bb_11 (preds = {bb_10 bb_7 }, succs = {bb_38 })
    {
      <bb 11>:

    }
    bb_38 (preds = {bb_11 }, succs = {bb_4 })
    {
      <bb 38>:
      # DEBUG __r => NULL
      # DEBUG __y => __i$_M_node_99
      # VUSE <.MEM_130>
      __i$_M_node_45 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_99 + 16B];
      # DEBUG D#37 => __i$_M_node_99
      # DEBUG __x => D#37
      # DEBUG __x => NULL
      goto <bb 4>;

    }
    bb_12 (preds = {bb_10 bb_8 }, succs = {bb_37 })
    {
      <bb 12>:

    }
    bb_37 (preds = {bb_12 }, succs = {bb_4 })
    {
      <bb 37>:
      # DEBUG __r => NULL
      # VUSE <.MEM_130>
      __i$_M_node_46 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_99 + 24B];
      # DEBUG D#36 => __i$_M_node_99
      # DEBUG __x => D#36
      # DEBUG __x => NULL
      goto <bb 4>;

    }
  }
}

Pass statistics:
----------------

std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key, _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = void (*)(const Router*, const Flit*, int, OutputSet*, bool); _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >] (const struct key_typeD.44283 & __kD.54573)
Eh tree:
   1 cleanup land:{1,<L0>}
{
  size_typeD.14319 __dnewD.56262;
  const size_typeD.14319 __sizeD.56246;
  const size_typeD.14319 __osizeD.56247;
  const size_typeD.14319 __lenD.56248;
  intD.9 __rD.56249;
  const difference_typeD.14320 __dD.56252;
  intD.9 D.56258;
  const size_typeD.14319 __sizeD.56231;
  const size_typeD.14319 __osizeD.56232;
  const size_typeD.14319 __lenD.56233;
  intD.9 __rD.56234;
  const difference_typeD.14320 __dD.56237;
  intD.9 D.56243;
  struct iteratorD.44803 D.56228;
  struct _Rb_tree_nodeD.44503 * __yD.56218;
  struct value_typeD.44285 D.54645;
  struct iteratorD.45076 D.54644;
  struct iteratorD.44803 D.54643;
  struct const_iteratorD.44805 __posD.54611;
  struct _Rb_tree_node_baseD.6878 * const __i$_M_nodeD.54642;
  struct _Rb_tree_node_baseD.6878 * SR.431D.54641;
  struct _Rb_tree_node_baseD.6878 * SR.434D.54640;
  charD.10 * _10;
  charD.10 * const _12;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & _14;
  charD.10 * const _15;
  const size_typeD.14319 _20;
  charD.10 * const prephitmp_22;
  charD.10 * const pretmp_27;
  charD.10 * const prephitmp_28;
  const size_typeD.14319 prephitmp_29;
  charD.10 * const prephitmp_30;
  size_typeD.14319 pretmp_31;
  const size_typeD.14319 pretmp_37;
  const size_typeD.14319 prephitmp_38;
  charD.10 * const _54;
  long unsigned intD.14 _56;
  const size_typeD.14319 _62;
  charD.10 * const _65;
  long unsigned intD.14 _68;
  boolD.2757 _72;
  charD.10 * const pretmp_77;
  charD.10 * _78;
  long unsigned intD.14 __dnew.173_79;
  const char_typeD.10931 _81;
  charD.10 * _84;
  const size_typeD.14319 pretmp_88;
  size_typeD.14319 prephitmp_89;
  charD.10 * const pretmp_90;
  boolD.2757 _124;
  charD.10 * const _125;
  boolD.2757 _126;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG thisD.54572 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG thisD.54637 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG __xD.54636 => __k_2(D)
  # DEBUG thisD.56213 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __kD.56214 => __k_2(D)
  # DEBUG thisD.56215 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # VUSE <.MEM_19(D)>
  # PT = nonlocal escaped 
  __i$_M_node_41 = MEM[(struct _Rb_tree_node_baseD.6878 * *)&_Z19gRoutingFunctionMapB5cxx11D.42076 + 16B];
  # DEBUG D#31ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG thisD.52518 => D#31ptD.0
  # DEBUG D#96ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __xD.56219 => NULL
  # DEBUG __yD.56218 => NULL
  # DEBUG __kD.56217 => __k_2(D)
  # DEBUG __yD.56218 => &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732
  # DEBUG __xD.56219 => __i$_M_node_41
  if (__i$_M_node_41 == 0B)
    goto <bb 32>;
  else
    goto <bb 3>;
;;    succ:       32 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                3 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 2, next block 4, flags: (NEW)
;;    pred:       2 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_19(D)>
  pretmp_88 = MEM[(long unsigned intD.14 *)__k_2(D) + 8B];
  # VUSE <.MEM_19(D)>
  # PT = nonlocal escaped 
  pretmp_77 = MEM[(charD.10 * *)__k_2(D)];
  goto <bb 6>;
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 4, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       38 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_49 = PHI <__i$_M_node_45(38), __i$_M_node_46(37)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_48 = PHI <__i$_M_node_99(38), __i$_M_node_6(37)>
  # DEBUG __yD.56218 => __i$_M_node_48
  # DEBUG __xD.56219 => __i$_M_node_49
  if (__i$_M_node_49 == 0B)
    goto <bb 13>;
  else
    goto <bb 5>;
;;    succ:       13 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 5, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 4, next block 6, flags: (NEW)
;;    pred:       4 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       3 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                5 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_130 = PHI <.MEM_19(D)(3), .MEM_130(5)>
  # PT = nonlocal escaped 
  # __i$_M_node_99 = PHI <__i$_M_node_41(3), __i$_M_node_49(5)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_6 = PHI <&MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732(3), __i$_M_node_48(5)>
  # DEBUG __yD.56218 => __i$_M_node_6
  # DEBUG __xD.56219 => __i$_M_node_99
  # DEBUG __xD.56220 => __i$_M_node_99
  # DEBUG __xD.52453 => __i$_M_node_99
  # DEBUG thisD.52454 => __i$_M_node_99
  # DEBUG D#93ptD.0 => &MEM[(const struct _Rb_tree_nodeD.44503 *)__i$_M_node_99]._M_value_fieldD.46493
  # DEBUG __rD.52444 => D#93ptD.0
  # DEBUG __xD.56222 => D#93ptD.0
  # DEBUG thisD.56221 => D#60ptD.0
  # DEBUG D#318ptD.0 => &MEM[(const struct pairD.42073 &)__i$_M_node_99 + 32].firstD.46174
  # DEBUG D#94ptD.0 => &D#95ptD.0->_M_implD.44577._M_key_compareD.44731
  # DEBUG D#59ptD.0 => D#94ptD.0
  # DEBUG __xD.56225 => D#318ptD.0
  # DEBUG __yD.56224 => __k_2(D)
  # DEBUG thisD.56223 => D#59ptD.0
  # DEBUG __lhsD.56227 => D#318ptD.0
  # DEBUG __rhsD.56226 => __k_2(D)
  # DEBUG thisD.56229 => D#318ptD.0
  # DEBUG __strD.56230 => __k_2(D)
  # VUSE <.MEM_130>
  _20 = MEM[(long unsigned intD.14 *)__i$_M_node_99 + 40B];
  # DEBUG D#1ptD.0 => D#318ptD.0
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.56231 => _20
  # DEBUG D#338ptD.0 => MEM[(long unsigned intD.14 *)__k_2(D) + 8B]
  # DEBUG D#1ptD.0 => __k_2(D)
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.56232 => D#338ptD.0
  # DEBUG __aD.56239 => &__sizeD.56231
  # DEBUG __bD.56238 => &__osizeD.56232
  __len_128 = MIN_EXPR <_20, pretmp_88>;
  # DEBUG __lenD.56233 => D#316ptD.0
  # DEBUG thisD.51798 => __k_2(D)
  # DEBUG D#337ptD.0 => MEM[(charD.10 * *)__k_2(D)]
  # DEBUG D#3ptD.0 => __k_2(D)
  # DEBUG thisD.50676 => D#3ptD.0
  # VUSE <.MEM_130>
  # PT = nonlocal escaped 
  _54 = MEM[(charD.10 * *)__i$_M_node_99 + 32B];
  # DEBUG D#3ptD.0 => D#318ptD.0
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.56242 => _54
  # DEBUG __s2D.56241 => D#337ptD.0
  # DEBUG __nD.56240 => D#316ptD.0
  # VUSE <.MEM_130>
  # USE = nonlocal escaped 
  __r_55 = memcmpD.989 (_54, pretmp_77, __len_128);
  # DEBUG __rD.56234 => NULL
  if (__r_55 == 0)
    goto <bb 7>;
  else
    goto <bb 10>;
;;    succ:       7 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 1, count 0, freq 5551, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.56236 => _20
  # DEBUG __n2D.56235 => D#338ptD.0
  # RANGE [0, 18446744073709551615]
  _56 = _20 - pretmp_88;
  __d_57 = (const difference_typeD.14320) _56;
  # DEBUG __dD.56237 => __d_57
  if (__d_57 > 2147483647)
    goto <bb 11>;
  else
    goto <bb 8>;
;;    succ:       11 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 8, loop depth 1, count 0, freq 2775, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       7 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_57 < -2147483648)
    goto <bb 12>;
  else
    goto <bb 9>;
;;    succ:       12 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                9 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 1, count 0, freq 1388, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_58 = (intD.9) _56;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 1, count 0, freq 4936, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       6 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_59 = PHI <__r_55(6), __r_58(9)>
  # DEBUG __rD.56234 => __r_59
  # DEBUG D#324ptD.0 => {CLOBBER}
  # DEBUG __sizeD.56231 => D#324ptD.0
  # DEBUG D#325ptD.0 => {CLOBBER}
  # DEBUG __osizeD.56232 => D#325ptD.0
  if (__r_59 >= 0)
    goto <bb 11>;
  else
    goto <bb 12>;
;;    succ:       11 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                12 [21.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 11, loop depth 1, count 0, freq 6643, maybe hot
;;    prev block 10, next block 38, flags: (NEW, REACHABLE)
;;    pred:       10 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                7 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       38 [100.0%]  (FALLTHRU)

;;   basic block 38, loop depth 1, count 0, freq 6643, maybe hot
;;    prev block 11, next block 12, flags: (NEW)
;;    pred:       11 [100.0%]  (FALLTHRU)
  # DEBUG __rD.56234 => NULL
  # DEBUG __yD.56218 => __i$_M_node_99
  # VUSE <.MEM_130>
  # PT = nonlocal escaped 
  __i$_M_node_45 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__i$_M_node_99 + 16B];
  # DEBUG D#37ptD.0 => __i$_M_node_99
  # DEBUG __xD.52486 => D#37ptD.0
  # DEBUG __xD.56219 => NULL
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 12, loop depth 1, count 0, freq 2457, maybe hot
;;    prev block 38, next block 37, flags: (NEW, REACHABLE)
;;    pred:       10 [21.7%]  (FALSE_VALUE,EXECUTABLE)
;;                8 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;    succ:       37 [100.0%]  (FALLTHRU)

;;   basic block 37, loop depth 1, count 0, freq 2457, maybe hot
;;    prev block 12, next block 13, flags: (NEW)
;;    pred:       12 [100.0%]  (FALLTHRU)
  # DEBUG __rD.56234 => NULL
  # VUSE <.MEM_130>
  # PT = nonlocal escaped 
  __i$_M_node_46 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__i$_M_node_99 + 24B];
  # DEBUG D#36ptD.0 => __i$_M_node_99
  # DEBUG __xD.52485 => D#36ptD.0
  # DEBUG __xD.56219 => NULL
  goto <bb 4>;
;;    succ:       4 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 37, next block 36, flags: (NEW, REACHABLE)
;;    pred:       4 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_135 = PHI <__i$_M_node_48(4)>
;;    succ:       36 [100.0%]  (FALLTHRU)

;;   basic block 36, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 13, next block 14, flags: (NEW)
;;    pred:       13 [100.0%]  (FALLTHRU)
  # DEBUG thisD.52484 => NULL
  # DEBUG __xD.52483 => __i$_M_node_135
  # DEBUG __i$_M_nodeD.54642 => __i$_M_node_135
  # DEBUG thisD.54638 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG D#44ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG thisD.54639 => D#44ptD.0
  # DEBUG thisD.51662 => NULL
  # DEBUG __xD.51661 => &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732
  # DEBUG thisD.53255 => &__iD.54574
  # DEBUG __xD.53256 => NULL
  if (__i$_M_node_135 == &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732)
    goto <bb 33>;
  else
    goto <bb 14>;
;;    succ:       33 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                14 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 36, next block 15, flags: (NEW, REACHABLE)
;;    pred:       36 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.53275 => &__iD.54574
  # DEBUG thisD.53276 => __i$_M_node_135
  # DEBUG D#144ptD.0 => &MEM[(struct _Rb_tree_nodeD.44503 *)__i$_M_node_135]._M_value_fieldD.46493
  # DEBUG __rD.51667 => D#144ptD.0
  # DEBUG D#319ptD.0 => &MEM[(struct pairD.42073 &)__i$_M_node_135 + 32].firstD.46174
  # DEBUG D#35ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG thisD.53272 => D#35ptD.0
  # DEBUG D#34ptD.0 => D#35ptD.0
  # DEBUG D#33ptD.0 => &D#34ptD.0->_M_tD.44500
  # DEBUG D#32ptD.0 => D#33ptD.0
  # DEBUG thisD.51597 => D#32ptD.0
  # DEBUG __xD.54633 => __k_2(D)
  # DEBUG __yD.54632 => D#319ptD.0
  # DEBUG thisD.54631 => D#59ptD.0
  # DEBUG __lhsD.54635 => __k_2(D)
  # DEBUG __rhsD.54634 => D#319ptD.0
  # DEBUG thisD.56244 => __k_2(D)
  # DEBUG __strD.56245 => D#319ptD.0
  # DEBUG D#336ptD.0 => MEM[(long unsigned intD.14 *)__k_2(D) + 8B]
  # DEBUG D#1ptD.0 => __k_2(D)
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.56246 => D#336ptD.0
  # VUSE <.MEM_130>
  _62 = MEM[(long unsigned intD.14 *)__i$_M_node_135 + 40B];
  # DEBUG D#1ptD.0 => D#319ptD.0
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.56247 => _62
  # DEBUG __aD.56254 => &__sizeD.56246
  # DEBUG __bD.56253 => &__osizeD.56247
  __len_129 = MIN_EXPR <_62, pretmp_88>;
  # DEBUG __lenD.56248 => D#317ptD.0
  # DEBUG thisD.51798 => D#319ptD.0
  # VUSE <.MEM_130>
  # PT = nonlocal escaped 
  _65 = MEM[(charD.10 * *)__i$_M_node_135 + 32B];
  # DEBUG D#3ptD.0 => D#319ptD.0
  # DEBUG thisD.50676 => D#3ptD.0
  # DEBUG D#335ptD.0 => MEM[(charD.10 * *)__k_2(D)]
  # DEBUG D#3ptD.0 => __k_2(D)
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.56257 => D#335ptD.0
  # DEBUG __s2D.56256 => _65
  # DEBUG __nD.56255 => D#317ptD.0
  # VUSE <.MEM_130>
  # USE = nonlocal escaped 
  __r_67 = memcmpD.989 (pretmp_77, _65, __len_129);
  # DEBUG __rD.56249 => NULL
  if (__r_67 == 0)
    goto <bb 15>;
  else
    goto <bb 18>;
;;    succ:       15 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 467, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       14 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.56251 => D#336ptD.0
  # DEBUG __n2D.56250 => _62
  # RANGE [0, 18446744073709551615]
  _68 = pretmp_88 - _62;
  __d_69 = (const difference_typeD.14320) _68;
  # DEBUG __dD.56252 => __d_69
  if (__d_69 > 2147483647)
    goto <bb 28>;
  else
    goto <bb 16>;
;;    succ:       28 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                16 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 233, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       15 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_69 < -2147483648)
    goto <bb 19>;
  else
    goto <bb 17>;
;;    succ:       19 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                17 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 117, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_70 = (intD.9) _68;
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 414, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       14 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_71 = PHI <__r_67(14), __r_70(17)>
  # DEBUG __rD.56249 => __r_71
  # DEBUG D#330ptD.0 => {CLOBBER}
  # DEBUG __sizeD.56246 => D#330ptD.0
  # DEBUG D#331ptD.0 => {CLOBBER}
  # DEBUG __osizeD.56247 => D#331ptD.0
  if (__r_71 < 0)
    goto <bb 33>;
  else
    goto <bb 28>;
;;    succ:       33 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [78.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       16 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                39 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_133 = PHI <.MEM_130(16), .MEM_132(39)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_47 = PHI <__i$_M_node_135(16), __i$_M_node_42(39)>
  # prephitmp_29 = PHI <pretmp_88(16), prephitmp_38(39)>
  # PT = nonlocal escaped 
  # prephitmp_30 = PHI <pretmp_77(16), prephitmp_28(39)>
  # DEBUG thisD.54616 => &D.54645
  # DEBUG __aD.54615 => __k_2(D)
  # DEBUG __bD.54614 => NULL
  # DEBUG thisD.54618 => &D.54645.firstD.46174
  # DEBUG __strD.54617 => __k_2(D)
  # DEBUG thisD.52863 => __k_2(D)
  # DEBUG D#113ptD.0 => &MEM[(const struct basic_stringD.9877 *)__k_2(D)]._M_dataplusD.14336
  # DEBUG thisD.54619 => &D.54645.firstD.46174
  # DEBUG D#114ptD.0 => &MEM[(struct basic_stringD.9877 *)&D.54645]._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#113ptD.0
  # DEBUG thisD.54622 => D#114ptD.0
  # DEBUG __datD.54621 => &MEM[(struct basic_stringD.9877 *)&D.54645].D.14356._M_local_bufD.14358
  # DEBUG __aD.54620 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#114ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_21 = VDEF <.MEM_133>
  MEM[(struct _Alloc_hiderD.14335 *)&D.54645]._M_pD.14342 = &MEM[(struct basic_stringD.9877 *)&D.54645].D.14356._M_local_bufD.14358;
  # DEBUG D#334ptD.0 => MEM[(charD.10 * *)__k_2(D)]
  # DEBUG D#3ptD.0 => __k_2(D)
  # DEBUG thisD.52856 => D#3ptD.0
  # DEBUG D#333ptD.0 => MEM[(long unsigned intD.14 *)__k_2(D) + 8B]
  # DEBUG D#4ptD.0 => __k_2(D)
  # DEBUG thisD.52853 => D#4ptD.0
  # PT = nonlocal escaped 
  _10 = prephitmp_30 + prephitmp_29;
  # DEBUG D#3ptD.0 => __k_2(D)
  # DEBUG thisD.52850 => D#3ptD.0
  # DEBUG thisD.54625 => &D.54645.firstD.46174
  # DEBUG __begD.54624 => D#334ptD.0
  # DEBUG __endD.54623 => _10
  # DEBUG thisD.54629 => &D.54645.firstD.46174
  # DEBUG __begD.54628 => D#334ptD.0
  # DEBUG __endD.54627 => _10
  # DEBUG thisD.56259 => &D.54645.firstD.46174
  # DEBUG __begD.56260 => D#334ptD.0
  # DEBUG __endD.56261 => _10
  # DEBUG __ptrD.52815 => D#334ptD.0
  # RANGE [0, 1]
  _72 = _10 != 0B;
  # RANGE [0, 1]
  _124 = prephitmp_30 == 0B;
  # RANGE [0, 1]
  _126 = _72 & _124;
  if (_126 != 0)
    goto <bb 34>;
  else
    goto <bb 35>;
;;    succ:       34 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 102, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       35 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_101 = VDEF <.MEM_100>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  _78 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.54645.firstD.46174, &__dnewD.56262, 0);
  # DEBUG D#5ptD.0 => &D.54645.firstD.46174
  # DEBUG __pD.56281 => _78
  # DEBUG thisD.56280 => D#5ptD.0
  # .MEM_102 = VDEF <.MEM_101>
  MEM[(charD.10 * *)&D.54645] = _78;
  # VUSE <.MEM_102>
  __dnew.173_79 = __dnewD.56262;
  # DEBUG D#6ptD.0 => &D.54645.firstD.46174
  # DEBUG __capacityD.56283 => __dnew.173_79
  # DEBUG thisD.56282 => D#6ptD.0
  # .MEM_103 = VDEF <.MEM_102>
  MEM[(size_typeD.14319 *)&D.54645 + 16B] = __dnew.173_79;
  # DEBUG D#3ptD.0 => &D.54645.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.56265 => _78
  # DEBUG __k1D.56264 => D#334ptD.0
  # DEBUG __k2D.56263 => _10
  # DEBUG __dD.56268 => _78
  # DEBUG __sD.56267 => D#334ptD.0
  # DEBUG __nD.56266 => D#333ptD.0
  goto <bb 23>;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 249, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       35 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#3ptD.0 => &D.54645.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.56265 => &MEM[(struct basic_stringD.9877 *)&D.54645].D.14356._M_local_bufD.14358
  # DEBUG __k1D.56264 => D#334ptD.0
  # DEBUG __k2D.56263 => _10
  # DEBUG __dD.56268 => &MEM[(struct basic_stringD.9877 *)&D.54645].D.14356._M_local_bufD.14358
  # DEBUG __sD.56267 => D#334ptD.0
  # DEBUG __nD.56266 => D#333ptD.0
  if (prephitmp_29 == 1)
    goto <bb 22>;
  else
    goto <bb 23>;
;;    succ:       22 [53.3%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [46.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 133, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       21 [53.3%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_100>
  _81 = MEM[(const char_typeD.10931 &)prephitmp_30];
  # DEBUG D#11ptD.0 => D#334ptD.0
  # DEBUG __c1D.56273 => &MEM[(struct basic_stringD.9877 *)&D.54645].D.14356._M_local_bufD.14358
  # DEBUG __c2D.56272 => D#11ptD.0
  # .MEM_104 = VDEF <.MEM_100>
  MEM[(char_typeD.10931 &)&D.54645 + 16] = _81;
  goto <bb 24>;
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 218, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       21 [46.7%]  (FALSE_VALUE,EXECUTABLE)
;;                20 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped null { D.54645 } (escaped)
  # _125 = PHI <&MEM[(struct basic_stringD.9877 *)&D.54645].D.14356._M_local_bufD.14358(21), _78(20)>
  # .MEM_92 = PHI <.MEM_100(21), .MEM_103(20)>
  # DEBUG D#3ptD.0 => &D.54645.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.56265 => _125
  # DEBUG __k1D.56264 => D#334ptD.0
  # DEBUG __k2D.56263 => _10
  # DEBUG __dD.56268 => _125
  # DEBUG __sD.56267 => D#334ptD.0
  # DEBUG __nD.56266 => D#333ptD.0
  # DEBUG __s1D.56271 => _125
  # DEBUG __s2D.56270 => D#334ptD.0
  # DEBUG __nD.56269 => D#333ptD.0
  # .MEM_105 = VDEF <.MEM_92>
  # USE = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  memcpyD.992 (_125, prephitmp_30, prephitmp_29);
  # VUSE <.MEM_105>
  pretmp_31 = __dnewD.56262;
  # VUSE <.MEM_105>
  pretmp_90 = MEM[(charD.10 * *)&D.54645];
;;    succ:       24 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       22 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                23 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_87 = PHI <.MEM_104(22), .MEM_105(23)>
  # prephitmp_89 = PHI <prephitmp_29(22), pretmp_31(23)>
  # PT = nonlocal escaped null { D.54645 } (escaped)
  # prephitmp_22 = PHI <&MEM[(struct basic_stringD.9877 *)&D.54645].D.14356._M_local_bufD.14358(22), pretmp_90(23)>
  # DEBUG D#332ptD.0 => __dnewD.56262
  # DEBUG thisD.56275 => &D.54645.firstD.46174
  # DEBUG __nD.56274 => D#332ptD.0
  # DEBUG D#7ptD.0 => &D.54645.firstD.46174
  # DEBUG __lengthD.56277 => D#332ptD.0
  # DEBUG thisD.56276 => D#7ptD.0
  # .MEM_106 = VDEF <.MEM_87>
  MEM[(size_typeD.14319 *)&D.54645 + 8B] = prephitmp_89;
  # DEBUG D#3ptD.0 => &D.54645.firstD.46174
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.54645 } (escaped)
  _84 = prephitmp_22 + prephitmp_89;
  # DEBUG __c1D.56279 => _84
  # DEBUG __c2D.56278 => D#11ptD.0
  # .MEM_107 = VDEF <.MEM_106>
  MEM[(char_typeD.10931 &)_84] = 0;
  # .MEM_108 = VDEF <.MEM_107>
  __dnewD.56262 ={v} {CLOBBER};
  # .MEM_23 = VDEF <.MEM_108>
  D.54645.secondD.46175 = 0B;
  # DEBUG thisD.54609 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG __position$_M_nodeD.53347 => __i$_M_node_47
  # DEBUG __xD.54607 => &D.54645
  # DEBUG thisD.53299 => NULL
  # DEBUG __itD.53298 => &__positionD.54608
  # DEBUG thisD.54612 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # .MEM_24 = VDEF <.MEM_23>
  MEM[(struct _Rb_tree_const_iteratorD.44806 *)&__posD.54611] = __i$_M_node_47;
  # DEBUG __xD.54610 => &D.54645
  # DEBUG thisD.53249 => &__anD.54613
  # DEBUG __tD.53248 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __an$_M_tD.53242 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG D#143ptD.0 => &__anD.54613
  [LP 1] # .MEM_25 = VDEF <.MEM_24>
  # USE = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  D.54643 = _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPK6RouterPK4FlitiP9OutputSetbEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_INSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_ERKSI_RT_.isra.54.constprop.57D.54545 (&_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500, __posD.54611, &D.54645);
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                29 (EH,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       24 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_25>
  # PT = nonlocal escaped 
  __i$_M_node_11 = MEM[(struct _Rb_tree_iteratorD.44804 *)&D.54643];
  # DEBUG __i$_M_nodeD.54642 => __i$_M_node_11
  # DEBUG thisD.54591 => &D.54645
  # DEBUG D#56ptD.0 => &D.54645.firstD.46174
  # DEBUG thisD.54592 => D#56ptD.0
  # DEBUG thisD.54593 => D#56ptD.0
  # DEBUG thisD.54602 => D#56ptD.0
  # VUSE <.MEM_25>
  # PT = nonlocal escaped null { D.54645 } (escaped)
  _12 = MEM[(charD.10 * *)&D.54645];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54603 => D#56ptD.0
  if (&MEM[(const struct basic_stringD.9877 *)&D.54645].D.14356._M_local_bufD.14358 != _12)
    goto <bb 26>;
  else
    goto <bb 27>;
;;    succ:       26 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 245, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       25 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54595 => D#56ptD.0
  # DEBUG __sizeD.54594 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54598 => _12
  # DEBUG __aD.54596 => D#49ptD.0
  # DEBUG __nD.54597 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54601 => _12
  # DEBUG thisD.54599 => D#45ptD.0
  # DEBUG D.54600 => D#46ptD.0
  # .MEM_26 = VDEF <.MEM_25>
  # USE = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  _ZdlPvD.2766 (_12);
;;    succ:       27 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       25 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_16 = PHI <.MEM_25(25), .MEM_26(26)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.54604 => D#55ptD.0
  # DEBUG thisD.54605 => D#55ptD.0
  # DEBUG thisD.54606 => D#55ptD.0
  # .MEM_32 = VDEF <.MEM_16>
  D.54645 ={v} {CLOBBER};
;;    succ:       28 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 27, next block 40, flags: (NEW, REACHABLE)
;;    pred:       15 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                27 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                18 [78.3%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_13 = PHI <__i$_M_node_135(15), __i$_M_node_11(27), __i$_M_node_135(18)>
  # .MEM_17 = PHI <.MEM_130(15), .MEM_32(27), .MEM_130(18)>
;;    succ:       40 [100.0%]  (FALLTHRU)

;;   basic block 40, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 28, next block 29, flags: (NEW)
;;    pred:       28 [100.0%]  (FALLTHRU)
  # DEBUG __i$_M_nodeD.54642 => __i$_M_node_13
  # DEBUG thisD.53323 => &__iD.54574
  # DEBUG thisD.53324 => __i$_M_node_13
  # DEBUG D#145ptD.0 => &MEM[(struct _Rb_tree_nodeD.44503 *)__i$_M_node_13]._M_value_fieldD.46493
  # DEBUG __rD.51667 => D#145ptD.0
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  _14 = &MEM[(struct pairD.42073 &)__i$_M_node_13 + 32].secondD.46175;
  # DEBUG D#147ptD.0 => {CLOBBER}
  # DEBUG __i$_M_nodeD.54642 => D#147ptD.0
  # VUSE <.MEM_17>
  return _14;
;;    succ:       EXIT [100.0%] 

;;   basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 40, next block 30, flags: (NEW, REACHABLE)
;;    pred:       24 (EH,EXECUTABLE)
<L0>: [LP 1]
  # DEBUG thisD.54575 => &D.54645
  # DEBUG D#56ptD.0 => &D.54645.firstD.46174
  # DEBUG thisD.54576 => D#56ptD.0
  # DEBUG thisD.54577 => D#56ptD.0
  # DEBUG thisD.54586 => D#56ptD.0
  # VUSE <.MEM_25>
  # PT = nonlocal escaped null { D.54645 } (escaped)
  _15 = MEM[(charD.10 * *)&D.54645];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54587 => D#56ptD.0
  if (&MEM[(const struct basic_stringD.9877 *)&D.54645].D.14356._M_local_bufD.14358 != _15)
    goto <bb 30>;
  else
    goto <bb 31>;
;;    succ:       30 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                31 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       29 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54579 => D#56ptD.0
  # DEBUG __sizeD.54578 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54582 => _15
  # DEBUG __aD.54580 => D#49ptD.0
  # DEBUG __nD.54581 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54585 => _15
  # DEBUG thisD.54583 => D#45ptD.0
  # DEBUG D.54584 => D#46ptD.0
  # .MEM_33 = VDEF <.MEM_25>
  # USE = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  _ZdlPvD.2766 (_15);
;;    succ:       31 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       29 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                30 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_18 = PHI <.MEM_25(29), .MEM_33(30)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.54588 => D#55ptD.0
  # DEBUG thisD.54589 => D#55ptD.0
  # DEBUG thisD.54590 => D#55ptD.0
  # .MEM_39 = VDEF <.MEM_18>
  D.54645 ={v} {CLOBBER};
  resx 1
;;    succ:      

;;   basic block 32, loop depth 0, count 0, freq 81, maybe hot
;;    prev block 31, next block 33, flags: (NEW)
;;    pred:       2 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_19(D)>
  pretmp_37 = MEM[(long unsigned intD.14 *)__k_2(D) + 8B];
  # VUSE <.MEM_19(D)>
  pretmp_27 = MEM[(charD.10 * *)__k_2(D)];
;;    succ:       33 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 225, maybe hot
;;    prev block 32, next block 39, flags: (NEW, REACHABLE)
;;    pred:       18 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                36 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_132 = PHI <.MEM_130(18), .MEM_130(36), .MEM_19(D)(32)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_42 = PHI <__i$_M_node_135(18), __i$_M_node_135(36), &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732(32)>
  # prephitmp_38 = PHI <pretmp_88(18), pretmp_88(36), pretmp_37(32)>
  # prephitmp_28 = PHI <pretmp_77(18), pretmp_77(36), pretmp_27(32)>
;;    succ:       39 [100.0%]  (FALLTHRU)

;;   basic block 39, loop depth 0, count 0, freq 225, maybe hot
;;    prev block 33, next block 34, flags: (NEW)
;;    pred:       33 [100.0%]  (FALLTHRU)
  goto <bb 19>;
;;    succ:       19 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 45, maybe hot
;;   Invalid sum of incoming frequencies 298, should be 45
;;    prev block 39, next block 35, flags: (NEW, REACHABLE)
;;    pred:       19 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_109 = VDEF <.MEM_21>
  # USE = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.54645 D.56262 } (nonlocal, escaped)
  _ZSt19__throw_logic_errorPKcD.2828 ("basic_string::_M_construct null not valid");
;;    succ:      

;;   basic block 35, loop depth 0, count 0, freq 351, maybe hot
;;   Invalid sum of incoming frequencies 53, should be 351
;;    prev block 34, next block 1, flags: (NEW, REACHABLE)
;;    pred:       19 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __firstD.56285 => D#334ptD.0
  # DEBUG __lastD.56284 => _10
  # DEBUG D#109ptD.0 => &__firstD.56285
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.56287 => D#334ptD.0
  # DEBUG __lastD.56286 => _10
  # .MEM_100 = VDEF <.MEM_21>
  __dnewD.56262 = prephitmp_29;
  if (prephitmp_29 > 15)
    goto <bb 20>;
  else
    goto <bb 21>;
;;    succ:       20 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                21 [71.0%]  (FALSE_VALUE,EXECUTABLE)

}



;; Function void InitializeRoutingMap(const Configuration&) (_Z20InitializeRoutingMapRK13Configuration, funcdef_no=1991, decl_uid=42072, cgraph_uid=490, symbol_order=501)


Pass statistics:
----------------


Global statistics (BBS:497, LOOPS:9, CONDITIONS:248, STMTS:8243)

Global profiling statistics (BBS:0, LOOPS:0, CONDITIONS:0, STMTS:0)

Pass statistics:
----------------

void InitializeRoutingMap(const Configuration&) (const struct ConfigurationD.36227 & configD.45791)
Eh tree:
   134 cleanup land:{68,<L90>}
   130 cleanup land:{66,<L88>}
   126 cleanup land:{64,<L86>}
   122 cleanup land:{62,<L84>}
   118 cleanup land:{60,<L82>}
   114 cleanup land:{58,<L80>}
   110 cleanup land:{56,<L78>}
   106 cleanup land:{54,<L76>}
     145 cleanup land:{77,<L100>}
   102 cleanup land:{52,<L74>}
   98 cleanup land:{50,<L72>}
     144 cleanup land:{76,<L99>}
   94 cleanup land:{48,<L70>}
   90 cleanup land:{85,<L108>},{84,<L107>},{46,<L112>}
     143 cleanup land:{75,<L98>}
   86 cleanup land:{83,<L106>},{82,<L105>},{44,<L111>}
     142 cleanup land:{74,<L97>}
   82 cleanup land:{42,<L64>}
     141 cleanup land:{73,<L96>}
   78 cleanup land:{40,<L62>}
   74 cleanup land:{81,<L104>},{80,<L103>},{38,<L110>}
     140 cleanup land:{72,<L95>}
   70 cleanup land:{36,<L58>}
   66 cleanup land:{79,<L102>},{78,<L101>},{34,<L109>}
     139 cleanup land:{71,<L94>}
   62 cleanup land:{32,<L54>}
   58 cleanup land:{30,<L52>}
     138 cleanup land:{70,<L93>}
   54 cleanup land:{28,<L50>}
   50 cleanup land:{26,<L48>}
   46 cleanup land:{24,<L46>}
   42 cleanup land:{22,<L44>}
     137 cleanup land:{69,<L92>}
   38 cleanup land:{20,<L42>}
   34 cleanup land:{18,<L40>}
   30 cleanup land:{16,<L38>}
   26 cleanup land:{14,<L36>}
   22 cleanup land:{12,<L34>}
   18 cleanup land:{10,<L32>}
   14 cleanup land:{8,<L30>}
   10 cleanup land:{6,<L28>}
   6 cleanup land:{4,<L26>}
   2 cleanup land:{2,<L24>}
{
  size_typeD.14319 __dnewD.59166;
  size_typeD.14319 __dnewD.59121;
  size_typeD.14319 __dnewD.59076;
  size_typeD.14319 __dnewD.59031;
  size_typeD.14319 __dnewD.58986;
  size_typeD.14319 __dnewD.58941;
  size_typeD.14319 __dnewD.58896;
  size_typeD.14319 __dnewD.58851;
  const size_typeD.14319 __sizeD.58835;
  const size_typeD.14319 __osizeD.58836;
  const size_typeD.14319 __lenD.58837;
  intD.9 __rD.58838;
  const difference_typeD.14320 __dD.58841;
  intD.9 D.58847;
  const size_typeD.14319 __sizeD.58820;
  const size_typeD.14319 __osizeD.58821;
  const size_typeD.14319 __lenD.58822;
  intD.9 __rD.58823;
  const difference_typeD.14320 __dD.58826;
  intD.9 D.58832;
  struct iteratorD.44803 D.58817;
  struct _Rb_tree_nodeD.44503 * __yD.58807;
  size_typeD.14319 __dnewD.58776;
  struct value_typeD.44285 D.58755;
  struct iteratorD.45076 D.58754;
  struct iteratorD.44803 D.58753;
  struct const_iteratorD.44805 __posD.58720;
  struct _Rb_tree_node_baseD.6878 * const __i$_M_nodeD.58752;
  struct _Rb_tree_node_baseD.6878 * SR.431D.58751;
  struct _Rb_tree_node_baseD.6878 * SR.434D.58750;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & D.58749;
  size_typeD.14319 __dnewD.58655;
  size_typeD.14319 __dnewD.58610;
  const size_typeD.14319 __sizeD.58594;
  const size_typeD.14319 __osizeD.58595;
  const size_typeD.14319 __lenD.58596;
  intD.9 __rD.58597;
  const difference_typeD.14320 __dD.58600;
  intD.9 D.58606;
  const size_typeD.14319 __sizeD.58579;
  const size_typeD.14319 __osizeD.58580;
  const size_typeD.14319 __lenD.58581;
  intD.9 __rD.58582;
  const difference_typeD.14320 __dD.58585;
  intD.9 D.58591;
  struct iteratorD.44803 D.58576;
  struct _Rb_tree_nodeD.44503 * __yD.58566;
  size_typeD.14319 __dnewD.58535;
  struct value_typeD.44285 D.58514;
  struct iteratorD.45076 D.58513;
  struct iteratorD.44803 D.58512;
  struct const_iteratorD.44805 __posD.58479;
  struct _Rb_tree_node_baseD.6878 * const __i$_M_nodeD.58511;
  struct _Rb_tree_node_baseD.6878 * SR.431D.58510;
  struct _Rb_tree_node_baseD.6878 * SR.434D.58509;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & D.58508;
  size_typeD.14319 __dnewD.58414;
  size_typeD.14319 __dnewD.58369;
  const size_typeD.14319 __sizeD.58353;
  const size_typeD.14319 __osizeD.58354;
  const size_typeD.14319 __lenD.58355;
  intD.9 __rD.58356;
  const difference_typeD.14320 __dD.58359;
  intD.9 D.58365;
  const size_typeD.14319 __sizeD.58338;
  const size_typeD.14319 __osizeD.58339;
  const size_typeD.14319 __lenD.58340;
  intD.9 __rD.58341;
  const difference_typeD.14320 __dD.58344;
  intD.9 D.58350;
  struct iteratorD.44803 D.58335;
  struct _Rb_tree_nodeD.44503 * __yD.58325;
  size_typeD.14319 __dnewD.58294;
  struct value_typeD.44285 D.58273;
  struct iteratorD.45076 D.58272;
  struct iteratorD.44803 D.58271;
  struct const_iteratorD.44805 __posD.58238;
  struct _Rb_tree_node_baseD.6878 * const __i$_M_nodeD.58270;
  struct _Rb_tree_node_baseD.6878 * SR.431D.58269;
  struct _Rb_tree_node_baseD.6878 * SR.434D.58268;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & D.58267;
  size_typeD.14319 __dnewD.58173;
  const size_typeD.14319 __sizeD.58157;
  const size_typeD.14319 __osizeD.58158;
  const size_typeD.14319 __lenD.58159;
  intD.9 __rD.58160;
  const difference_typeD.14320 __dD.58163;
  intD.9 D.58169;
  const size_typeD.14319 __sizeD.58142;
  const size_typeD.14319 __osizeD.58143;
  const size_typeD.14319 __lenD.58144;
  intD.9 __rD.58145;
  const difference_typeD.14320 __dD.58148;
  intD.9 D.58154;
  struct iteratorD.44803 D.58139;
  struct _Rb_tree_nodeD.44503 * __yD.58129;
  size_typeD.14319 __dnewD.58098;
  struct value_typeD.44285 D.58077;
  struct iteratorD.45076 D.58076;
  struct iteratorD.44803 D.58075;
  struct const_iteratorD.44805 __posD.58042;
  struct _Rb_tree_node_baseD.6878 * const __i$_M_nodeD.58074;
  struct _Rb_tree_node_baseD.6878 * SR.431D.58073;
  struct _Rb_tree_node_baseD.6878 * SR.434D.58072;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & D.58071;
  size_typeD.14319 __dnewD.57977;
  const size_typeD.14319 __sizeD.57961;
  const size_typeD.14319 __osizeD.57962;
  const size_typeD.14319 __lenD.57963;
  intD.9 __rD.57964;
  const difference_typeD.14320 __dD.57967;
  intD.9 D.57973;
  const size_typeD.14319 __sizeD.57946;
  const size_typeD.14319 __osizeD.57947;
  const size_typeD.14319 __lenD.57948;
  intD.9 __rD.57949;
  const difference_typeD.14320 __dD.57952;
  intD.9 D.57958;
  struct iteratorD.44803 D.57943;
  struct _Rb_tree_nodeD.44503 * __yD.57933;
  size_typeD.14319 __dnewD.57902;
  struct value_typeD.44285 D.57881;
  struct iteratorD.45076 D.57880;
  struct iteratorD.44803 D.57879;
  struct const_iteratorD.44805 __posD.57846;
  struct _Rb_tree_node_baseD.6878 * const __i$_M_nodeD.57878;
  struct _Rb_tree_node_baseD.6878 * SR.431D.57877;
  struct _Rb_tree_node_baseD.6878 * SR.434D.57876;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & D.57875;
  size_typeD.14319 __dnewD.57781;
  size_typeD.14319 __dnewD.57736;
  const size_typeD.14319 __sizeD.57720;
  const size_typeD.14319 __osizeD.57721;
  const size_typeD.14319 __lenD.57722;
  intD.9 __rD.57723;
  const difference_typeD.14320 __dD.57726;
  intD.9 D.57732;
  const size_typeD.14319 __sizeD.57705;
  const size_typeD.14319 __osizeD.57706;
  const size_typeD.14319 __lenD.57707;
  intD.9 __rD.57708;
  const difference_typeD.14320 __dD.57711;
  intD.9 D.57717;
  struct iteratorD.44803 D.57702;
  struct _Rb_tree_nodeD.44503 * __yD.57692;
  size_typeD.14319 __dnewD.57661;
  struct value_typeD.44285 D.57640;
  struct iteratorD.45076 D.57639;
  struct iteratorD.44803 D.57638;
  struct const_iteratorD.44805 __posD.57605;
  struct _Rb_tree_node_baseD.6878 * const __i$_M_nodeD.57637;
  struct _Rb_tree_node_baseD.6878 * SR.431D.57636;
  struct _Rb_tree_node_baseD.6878 * SR.434D.57635;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & D.57634;
  size_typeD.14319 __dnewD.57540;
  size_typeD.14319 __dnewD.57495;
  const size_typeD.14319 __sizeD.57479;
  const size_typeD.14319 __osizeD.57480;
  const size_typeD.14319 __lenD.57481;
  intD.9 __rD.57482;
  const difference_typeD.14320 __dD.57485;
  intD.9 D.57491;
  const size_typeD.14319 __sizeD.57464;
  const size_typeD.14319 __osizeD.57465;
  const size_typeD.14319 __lenD.57466;
  intD.9 __rD.57467;
  const difference_typeD.14320 __dD.57470;
  intD.9 D.57476;
  struct iteratorD.44803 D.57461;
  struct _Rb_tree_nodeD.44503 * __yD.57451;
  size_typeD.14319 __dnewD.57420;
  struct value_typeD.44285 D.57399;
  struct iteratorD.45076 D.57398;
  struct iteratorD.44803 D.57397;
  struct const_iteratorD.44805 __posD.57364;
  struct _Rb_tree_node_baseD.6878 * const __i$_M_nodeD.57396;
  struct _Rb_tree_node_baseD.6878 * SR.431D.57395;
  struct _Rb_tree_node_baseD.6878 * SR.434D.57394;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & D.57393;
  size_typeD.14319 __dnewD.57299;
  size_typeD.14319 __dnewD.57254;
  const size_typeD.14319 __sizeD.57238;
  const size_typeD.14319 __osizeD.57239;
  const size_typeD.14319 __lenD.57240;
  intD.9 __rD.57241;
  const difference_typeD.14320 __dD.57244;
  intD.9 D.57250;
  const size_typeD.14319 __sizeD.57223;
  const size_typeD.14319 __osizeD.57224;
  const size_typeD.14319 __lenD.57225;
  intD.9 __rD.57226;
  const difference_typeD.14320 __dD.57229;
  intD.9 D.57235;
  struct iteratorD.44803 D.57220;
  struct _Rb_tree_nodeD.44503 * __yD.57210;
  size_typeD.14319 __dnewD.57179;
  struct value_typeD.44285 D.57158;
  struct iteratorD.45076 D.57157;
  struct iteratorD.44803 D.57156;
  struct const_iteratorD.44805 __posD.57123;
  struct _Rb_tree_node_baseD.6878 * const __i$_M_nodeD.57155;
  struct _Rb_tree_node_baseD.6878 * SR.431D.57154;
  struct _Rb_tree_node_baseD.6878 * SR.434D.57153;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & D.57152;
  size_typeD.14319 __dnewD.57058;
  size_typeD.14319 __dnewD.57013;
  size_typeD.14319 __dnewD.56968;
  size_typeD.14319 __dnewD.56923;
  const size_typeD.14319 __sizeD.56907;
  const size_typeD.14319 __osizeD.56908;
  const size_typeD.14319 __lenD.56909;
  intD.9 __rD.56910;
  const difference_typeD.14320 __dD.56913;
  intD.9 D.56919;
  const size_typeD.14319 __sizeD.56892;
  const size_typeD.14319 __osizeD.56893;
  const size_typeD.14319 __lenD.56894;
  intD.9 __rD.56895;
  const difference_typeD.14320 __dD.56898;
  intD.9 D.56904;
  struct iteratorD.44803 D.56889;
  struct _Rb_tree_nodeD.44503 * __yD.56879;
  size_typeD.14319 __dnewD.56848;
  struct value_typeD.44285 D.56827;
  struct iteratorD.45076 D.56826;
  struct iteratorD.44803 D.56825;
  struct const_iteratorD.44805 __posD.56792;
  struct _Rb_tree_node_baseD.6878 * const __i$_M_nodeD.56824;
  struct _Rb_tree_node_baseD.6878 * SR.431D.56823;
  struct _Rb_tree_node_baseD.6878 * SR.434D.56822;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & D.56821;
  size_typeD.14319 __dnewD.56727;
  size_typeD.14319 __dnewD.56682;
  size_typeD.14319 __dnewD.56637;
  size_typeD.14319 __dnewD.56592;
  size_typeD.14319 __dnewD.56547;
  size_typeD.14319 __dnewD.56502;
  size_typeD.14319 __dnewD.56457;
  size_typeD.14319 __dnewD.56412;
  size_typeD.14319 __dnewD.56367;
  size_typeD.14319 __dnewD.56322;
  const struct key_typeD.44283 D.45895;
  const struct key_typeD.44283 D.45892;
  const struct key_typeD.44283 D.45889;
  const struct key_typeD.44283 D.45886;
  const struct key_typeD.44283 D.45883;
  const struct key_typeD.44283 D.45880;
  const struct key_typeD.44283 D.45877;
  const struct key_typeD.44283 D.45874;
  const struct key_typeD.44283 D.45871;
  const struct key_typeD.44283 D.45868;
  const struct key_typeD.44283 D.45865;
  const struct key_typeD.44283 D.45862;
  const struct key_typeD.44283 D.45859;
  const struct key_typeD.44283 D.45856;
  const struct key_typeD.44283 D.45853;
  const struct key_typeD.44283 D.45850;
  const struct key_typeD.44283 D.45847;
  const struct key_typeD.44283 D.45844;
  const struct key_typeD.44283 D.45841;
  const struct key_typeD.44283 D.45838;
  const struct key_typeD.44283 D.45835;
  const struct key_typeD.44283 D.45832;
  const struct key_typeD.44283 D.45829;
  const struct key_typeD.44283 D.45826;
  const struct key_typeD.44283 D.45823;
  const struct stringD.9878 D.45820;
  const struct stringD.9878 D.45817;
  const struct stringD.9878 D.45814;
  const struct stringD.9878 D.45811;
  const struct stringD.9878 D.45808;
  const struct stringD.9878 D.45805;
  const struct stringD.9878 D.45802;
  const struct stringD.9878 D.45799;
  const struct stringD.9878 D.45796;
  intD.9 _14;
  charD.10 * const _17;
  intD.9 _21;
  charD.10 * const _24;
  intD.9 _30;
  charD.10 * const _33;
  intD.9 gNumVCs.145_35;
  intD.9 gReadReplyBeginVC.153_36;
  intD.9 gReadReqEndVC.146_37;
  intD.9 _42;
  charD.10 * const _45;
  intD.9 _51;
  charD.10 * const _54;
  intD.9 gNumVCs.145_56;
  intD.9 gReadReplyBeginVC.153_57;
  intD.9 gReadReqEndVC.146_58;
  intD.9 _63;
  charD.10 * const _66;
  intD.9 gNumVCs.145_68;
  intD.9 gReadReplyBeginVC.153_69;
  intD.9 _74;
  charD.10 * const _77;
  intD.9 gNumVCs.145_79;
  intD.9 gReadReplyEndVC.156_80;
  intD.9 _85;
  charD.10 * const _88;
  intD.9 gNumVCs.145_90;
  intD.9 gReadReplyBeginVC.153_91;
  intD.9 _96;
  charD.10 * const _99;
  intD.9 gNumVCs.145_101;
  intD.9 gReadReplyEndVC.156_102;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & _107;
  charD.10 * const _110;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & _121;
  charD.10 * const _124;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & _128;
  charD.10 * const _131;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & _135;
  charD.10 * const _138;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & _149;
  charD.10 * const _152;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & _163;
  charD.10 * const _166;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & _177;
  charD.10 * const _180;
  boolD.2757 _196;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & _205;
  charD.10 * const _208;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & _219;
  charD.10 * const _222;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & _233;
  charD.10 * const _236;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & _240;
  charD.10 * const _243;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & _247;
  charD.10 * const _250;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & _254;
  charD.10 * const _257;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & _261;
  charD.10 * const _264;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & _267;
  charD.10 * const _270;
  voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) & _273;
  charD.10 * const _275;
  charD.10 * const _277;
  charD.10 * const _282;
  charD.10 * const _284;
  charD.10 * const _286;
  charD.10 * const _288;
  charD.10 * const _290;
  charD.10 * const _292;
  charD.10 * const _294;
  charD.10 * const _296;
  charD.10 * const _298;
  charD.10 * const _300;
  charD.10 * const _302;
  charD.10 * const _304;
  charD.10 * const _306;
  charD.10 * const _308;
  charD.10 * const _310;
  charD.10 * const _312;
  charD.10 * const _314;
  charD.10 * const _316;
  charD.10 * const _318;
  charD.10 * const _320;
  charD.10 * const _322;
  charD.10 * const _324;
  charD.10 * const _326;
  charD.10 * const _328;
  charD.10 * const _330;
  charD.10 * const _332;
  charD.10 * const _334;
  charD.10 * const _336;
  charD.10 * const _338;
  charD.10 * const _340;
  charD.10 * const _342;
  charD.10 * const _344;
  charD.10 * const _346;
  charD.10 * const pretmp_543;
  size_typeD.14319 prephitmp_547;
  charD.10 * const pretmp_548;
  charD.10 * const prephitmp_549;
  const size_typeD.14319 pretmp_550;
  intD.9 pretmp_607;
  intD.9 prephitmp_608;
  intD.9 pretmp_609;
  intD.9 prephitmp_610;
  intD.9 prephitmp_612;
  intD.9 pretmp_613;
  intD.9 prephitmp_614;
  charD.10 * const pretmp_617;
  charD.10 * const prephitmp_618;
  const size_typeD.14319 pretmp_619;
  const size_typeD.14319 prephitmp_620;
  charD.10 * const pretmp_622;
  charD.10 * const prephitmp_623;
  charD.10 * const pretmp_624;
  charD.10 * const prephitmp_625;
  charD.10 * const prephitmp_627;
  charD.10 * const pretmp_630;
  charD.10 * const prephitmp_632;
  const size_typeD.14319 pretmp_633;
  const size_typeD.14319 prephitmp_634;
  charD.10 * const pretmp_635;
  charD.10 * const pretmp_637;
  charD.10 * const prephitmp_638;
  charD.10 * const pretmp_639;
  charD.10 * const prephitmp_640;
  charD.10 * const pretmp_644;
  charD.10 * const prephitmp_645;
  const size_typeD.14319 prephitmp_658;
  charD.10 * const prephitmp_659;
  size_typeD.14319 pretmp_660;
  size_typeD.14319 prephitmp_662;
  charD.10 * const pretmp_663;
  charD.10 * const prephitmp_664;
  const size_typeD.14319 pretmp_665;
  const size_typeD.14319 prephitmp_672;
  charD.10 * const prephitmp_673;
  size_typeD.14319 pretmp_674;
  size_typeD.14319 prephitmp_675;
  charD.10 * const pretmp_677;
  charD.10 * const prephitmp_678;
  const size_typeD.14319 pretmp_679;
  charD.10 * const pretmp_682;
  const size_typeD.14319 prephitmp_698;
  charD.10 * const prephitmp_699;
  size_typeD.14319 pretmp_700;
  size_typeD.14319 prephitmp_702;
  charD.10 * const pretmp_703;
  charD.10 * const prephitmp_704;
  const size_typeD.14319 pretmp_705;
  charD.10 * const pretmp_708;
  const size_typeD.14319 prephitmp_718;
  charD.10 * const prephitmp_719;
  size_typeD.14319 pretmp_720;
  charD.10 * _746;
  long unsigned intD.14 __dnew.173_747;
  long unsigned intD.14 __dnew.173_750;
  charD.10 * const _751;
  charD.10 * _752;
  charD.10 * _762;
  long unsigned intD.14 __dnew.173_763;
  long unsigned intD.14 __dnew.173_766;
  charD.10 * const _767;
  charD.10 * _768;
  charD.10 * _778;
  long unsigned intD.14 __dnew.173_779;
  long unsigned intD.14 __dnew.173_782;
  charD.10 * const _783;
  charD.10 * _784;
  charD.10 * _794;
  long unsigned intD.14 __dnew.173_795;
  long unsigned intD.14 __dnew.173_798;
  charD.10 * const _799;
  charD.10 * _800;
  charD.10 * _810;
  long unsigned intD.14 __dnew.173_811;
  long unsigned intD.14 __dnew.173_814;
  charD.10 * const _815;
  charD.10 * _816;
  charD.10 * _826;
  long unsigned intD.14 __dnew.173_827;
  long unsigned intD.14 __dnew.173_830;
  charD.10 * const _831;
  charD.10 * _832;
  charD.10 * _842;
  long unsigned intD.14 __dnew.173_843;
  long unsigned intD.14 __dnew.173_846;
  charD.10 * const _847;
  charD.10 * _848;
  charD.10 * _858;
  long unsigned intD.14 __dnew.173_859;
  long unsigned intD.14 __dnew.173_862;
  charD.10 * const _863;
  charD.10 * _864;
  charD.10 * const _891;
  charD.10 * const _894;
  charD.10 * const _907;
  const size_typeD.14319 _920;
  charD.10 * const _925;
  long unsigned intD.14 _927;
  const size_typeD.14319 _933;
  charD.10 * const _936;
  long unsigned intD.14 _939;
  charD.10 * const _1014;
  charD.10 * const _1017;
  const size_typeD.14319 _1043;
  charD.10 * const _1048;
  long unsigned intD.14 _1050;
  const size_typeD.14319 _1056;
  charD.10 * const _1059;
  long unsigned intD.14 _1062;
  charD.10 * _1103;
  charD.10 * const _1105;
  charD.10 * const _1108;
  charD.10 * _1117;
  long unsigned intD.14 __dnew.173_1118;
  long unsigned intD.14 __dnew.173_1121;
  charD.10 * const _1122;
  charD.10 * _1123;
  const size_typeD.14319 _1134;
  charD.10 * const _1139;
  long unsigned intD.14 _1141;
  const size_typeD.14319 _1147;
  charD.10 * const _1150;
  long unsigned intD.14 _1153;
  charD.10 * _1163;
  long unsigned intD.14 __dnew.173_1164;
  const char_typeD.10931 _1166;
  charD.10 * _1169;
  charD.10 * const _1180;
  charD.10 * _1194;
  charD.10 * const _1196;
  charD.10 * const _1199;
  charD.10 * _1208;
  long unsigned intD.14 __dnew.173_1209;
  long unsigned intD.14 __dnew.173_1212;
  charD.10 * const _1213;
  charD.10 * _1214;
  const size_typeD.14319 _1225;
  charD.10 * const _1230;
  long unsigned intD.14 _1232;
  const size_typeD.14319 _1238;
  charD.10 * const _1241;
  long unsigned intD.14 _1244;
  charD.10 * _1254;
  long unsigned intD.14 __dnew.173_1255;
  const char_typeD.10931 _1257;
  charD.10 * _1260;
  charD.10 * const _1264;
  charD.10 * _1270;
  long unsigned intD.14 __dnew.173_1271;
  long unsigned intD.14 __dnew.173_1274;
  charD.10 * const _1275;
  charD.10 * _1276;
  charD.10 * const _1287;
  charD.10 * const _1290;
  const size_typeD.14319 _1316;
  charD.10 * const _1321;
  long unsigned intD.14 _1323;
  const size_typeD.14319 _1329;
  charD.10 * const _1332;
  long unsigned intD.14 _1335;
  charD.10 * _1360;
  charD.10 * const _1362;
  charD.10 * const _1365;
  charD.10 * _1374;
  long unsigned intD.14 __dnew.173_1375;
  long unsigned intD.14 __dnew.173_1378;
  charD.10 * const _1379;
  charD.10 * _1380;
  const size_typeD.14319 _1391;
  charD.10 * const _1396;
  long unsigned intD.14 _1398;
  const size_typeD.14319 _1404;
  charD.10 * const _1407;
  long unsigned intD.14 _1410;
  charD.10 * _1420;
  long unsigned intD.14 __dnew.173_1421;
  const char_typeD.10931 _1423;
  charD.10 * _1426;
  charD.10 * _1435;
  charD.10 * const _1437;
  charD.10 * const _1440;
  charD.10 * _1449;
  long unsigned intD.14 __dnew.173_1450;
  long unsigned intD.14 __dnew.173_1453;
  charD.10 * const _1454;
  charD.10 * _1455;
  const size_typeD.14319 _1466;
  charD.10 * const _1471;
  long unsigned intD.14 _1473;
  const size_typeD.14319 _1479;
  charD.10 * const _1482;
  long unsigned intD.14 _1485;
  boolD.2757 _1489;
  charD.10 * _1495;
  long unsigned intD.14 __dnew.173_1496;
  const char_typeD.10931 _1498;
  charD.10 * _1501;
  charD.10 * const _1528;
  charD.10 * const _1531;
  boolD.2757 _1555;
  boolD.2757 _1556;
  const size_typeD.14319 _1557;
  charD.10 * const _1562;
  long unsigned intD.14 _1564;
  boolD.2757 _1568;
  const size_typeD.14319 _1570;
  charD.10 * const _1573;
  long unsigned intD.14 _1576;
  boolD.2757 _1580;
  charD.10 * const _1619;
  charD.10 * const _1622;
  boolD.2757 _1646;
  boolD.2757 _1647;
  const size_typeD.14319 _1648;
  charD.10 * const _1653;
  long unsigned intD.14 _1655;
  boolD.2757 _1659;
  const size_typeD.14319 _1661;
  charD.10 * const _1664;
  long unsigned intD.14 _1667;
  boolD.2757 _1671;
  charD.10 * _1693;
  long unsigned intD.14 __dnew.173_1694;
  long unsigned intD.14 __dnew.173_1697;
  charD.10 * const _1698;
  charD.10 * _1699;
  charD.10 * _1741;
  long unsigned intD.14 __dnew.173_1742;
  long unsigned intD.14 __dnew.173_1745;
  charD.10 * const _1746;
  charD.10 * _1747;
  boolD.2757 _1796;
  charD.10 * const pretmp_1978;
  long unsigned intD.14 _2008;
  charD.10 * const pretmp_2060;
  charD.10 * const prephitmp_2061;
  charD.10 * const _2081;
  charD.10 * const prephitmp_2119;
  charD.10 * const pretmp_2120;
  charD.10 * const prephitmp_2121;
  const size_typeD.14319 pretmp_2122;
  const size_typeD.14319 prephitmp_2123;
  boolD.2757 _2142;
  const size_typeD.14319 pretmp_2180;
  const size_typeD.14319 prephitmp_2181;
  charD.10 * const pretmp_2182;
  charD.10 * const prephitmp_2183;
  charD.10 * const pretmp_2184;
  charD.10 * const pretmp_2242;
  charD.10 * const prephitmp_2243;
  intD.9 pretmp_2292;
  intD.9 prephitmp_2293;
  intD.9 pretmp_2294;
  intD.9 prephitmp_2295;
  intD.9 pretmp_2296;
  intD.9 pretmp_2344;
  intD.9 prephitmp_2345;
  intD.9 pretmp_2346;
  intD.9 prephitmp_2347;

;;   basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 0, next block 3, flags: (NEW, REACHABLE)
;;    pred:       ENTRY [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#30ptD.0 => &D.45795
  # DEBUG thisD.53351 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45795
  # DEBUG thisD.56303 => &D.45796
  # DEBUG __sD.56304 => "num_vcs"
  # DEBUG __aD.56305 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.56315 => &D.45796
  # DEBUG D#66ptD.0 => &D.45796._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.56318 => D#66ptD.0
  # DEBUG __datD.56317 => &D.45796.D.14356._M_local_bufD.14358
  # DEBUG __aD.56316 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_1834 = VDEF <.MEM_9(D)>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45796]._M_pD.14342 = &D.45796.D.14356._M_local_bufD.14358;
  # DEBUG __sD.56314 => "num_vcs"
  # DEBUG thisD.56308 => &D.45796
  # DEBUG __begD.56307 => "num_vcs"
  # DEBUG __endD.56306 => &MEM[(voidD.45 *)"num_vcs" + 7B]
  # DEBUG thisD.56312 => &D.45796
  # DEBUG __begD.56311 => "num_vcs"
  # DEBUG __endD.56310 => &MEM[(voidD.45 *)"num_vcs" + 7B]
  # DEBUG thisD.56319 => &D.45796
  # DEBUG __begD.56320 => "num_vcs"
  # DEBUG __endD.56321 => &MEM[(voidD.45 *)"num_vcs" + 7B]
  # DEBUG __ptrD.52815 => "num_vcs"
  # DEBUG __firstD.56345 => "num_vcs"
  # DEBUG __lastD.56344 => &MEM[(voidD.45 *)"num_vcs" + 7B]
  # DEBUG D#109ptD.0 => &__firstD.56345
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.56347 => "num_vcs"
  # DEBUG __lastD.56346 => &MEM[(voidD.45 *)"num_vcs" + 7B]
  # DEBUG __dnewD.56322 => 7
  # DEBUG D#3ptD.0 => &D.45796
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.56325 => &D.45796.D.14356._M_local_bufD.14358
  # DEBUG __k1D.56324 => "num_vcs"
  # DEBUG __k2D.56323 => &MEM[(voidD.45 *)"num_vcs" + 7B]
  # DEBUG __dD.56328 => &D.45796.D.14356._M_local_bufD.14358
  # DEBUG __sD.56327 => "num_vcs"
  # DEBUG __nD.56326 => 7
  # DEBUG __s1D.56331 => &D.45796.D.14356._M_local_bufD.14358
  # DEBUG __s2D.56330 => "num_vcs"
  # DEBUG __nD.56329 => 7
  # .MEM_1840 = VDEF <.MEM_1834>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&D.45796.D.14356._M_local_bufD.14358, "num_vcs", 7);
  # DEBUG thisD.56335 => &D.45796
  # DEBUG __nD.56334 => 7
  # DEBUG D#7ptD.0 => &D.45796
  # DEBUG __lengthD.56337 => 7
  # DEBUG thisD.56336 => D#7ptD.0
  # .MEM_1841 = VDEF <.MEM_1840>
  MEM[(size_typeD.14319 *)&D.45796 + 8B] = 7;
  # DEBUG D#3ptD.0 => &D.45796
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.56339 => &MEM[(voidD.45 *)&D.45796 + 23B]
  # DEBUG __c2D.56338 => D#11ptD.0
  # .MEM_1842 = VDEF <.MEM_1841>
  MEM[(char_typeD.10931 &)&D.45796 + 23] = 0;
  # DEBUG D#378ptD.0 => {CLOBBER}
  # DEBUG __dnewD.56322 => D#378ptD.0
  [LP 2] # .MEM_13 = VDEF <.MEM_1842>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _14 = _ZNK13Configuration6GetIntERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.39467 (config_12(D), &D.45796);
;;    succ:       366 (EH,EXECUTABLE)
;;                3 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 2, next block 4, flags: (NEW, REACHABLE)
;;    pred:       2 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_15 = VDEF <.MEM_13>
  gNumVCsD.42077 = _14;
  # DEBUG thisD.53355 => &D.45796
  # DEBUG thisD.53356 => &D.45796
  # DEBUG thisD.53365 => &D.45796
  # VUSE <.MEM_15>
  # PT = nonlocal escaped { D.45796 } (escaped)
  _17 = MEM[(charD.10 * *)&D.45796];
  # DEBUG D#3ptD.0 => &D.45796
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53366 => &D.45796
  if (&D.45796.D.14356._M_local_bufD.14358 != _17)
    goto <bb 4>;
  else
    goto <bb 5>;
;;    succ:       4 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                5 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 4, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 3, next block 5, flags: (NEW, REACHABLE)
;;    pred:       3 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45796.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53358 => &D.45796
  # DEBUG __sizeD.53357 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45796
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45796
  # DEBUG D#51ptD.0 => &D.45796._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53361 => _17
  # DEBUG __aD.53359 => D#49ptD.0
  # DEBUG __nD.53360 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53364 => _17
  # DEBUG thisD.53362 => D#45ptD.0
  # DEBUG D.53363 => D#46ptD.0
  # .MEM_381 = VDEF <.MEM_15>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_17);
;;    succ:       5 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 5, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 4, next block 6, flags: (NEW, REACHABLE)
;;    pred:       3 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                4 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_280 = PHI <.MEM_15(3), .MEM_381(4)>
  # DEBUG D#55ptD.0 => &D.45796._M_dataplusD.14336
  # DEBUG thisD.53367 => D#55ptD.0
  # DEBUG thisD.53368 => D#55ptD.0
  # DEBUG thisD.53369 => D#55ptD.0
  # .MEM_16 = VDEF <.MEM_280>
  D.45796 ={v} {CLOBBER};
  # DEBUG thisD.53353 => &D.45795
  # DEBUG thisD.53354 => &D.45795
  # DEBUG D#30ptD.0 => &D.45798
  # DEBUG thisD.53352 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45798
  # DEBUG thisD.56348 => &D.45799
  # DEBUG __sD.56349 => "read_request_begin_vc"
  # DEBUG __aD.56350 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.56360 => &D.45799
  # DEBUG D#66ptD.0 => &D.45799._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.56363 => D#66ptD.0
  # DEBUG __datD.56362 => &D.45799.D.14356._M_local_bufD.14358
  # DEBUG __aD.56361 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_1844 = VDEF <.MEM_16>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45799]._M_pD.14342 = &D.45799.D.14356._M_local_bufD.14358;
  # DEBUG __sD.56359 => "read_request_begin_vc"
  # DEBUG thisD.56353 => &D.45799
  # DEBUG __begD.56352 => "read_request_begin_vc"
  # DEBUG __endD.56351 => &MEM[(voidD.45 *)"read_request_begin_vc" + 21B]
  # DEBUG thisD.56357 => &D.45799
  # DEBUG __begD.56356 => "read_request_begin_vc"
  # DEBUG __endD.56355 => &MEM[(voidD.45 *)"read_request_begin_vc" + 21B]
  # DEBUG thisD.56364 => &D.45799
  # DEBUG __begD.56365 => "read_request_begin_vc"
  # DEBUG __endD.56366 => &MEM[(voidD.45 *)"read_request_begin_vc" + 21B]
  # DEBUG __ptrD.52815 => "read_request_begin_vc"
  # DEBUG __firstD.56390 => "read_request_begin_vc"
  # DEBUG __lastD.56389 => &MEM[(voidD.45 *)"read_request_begin_vc" + 21B]
  # DEBUG D#109ptD.0 => &__firstD.56390
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.56392 => "read_request_begin_vc"
  # DEBUG __lastD.56391 => &MEM[(voidD.45 *)"read_request_begin_vc" + 21B]
  # .MEM_1845 = VDEF <.MEM_1844>
  __dnewD.56367 = 21;
  # .MEM_1846 = VDEF <.MEM_1845>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _746 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.45799, &__dnewD.56367, 0);
  # DEBUG D#5ptD.0 => &D.45799
  # DEBUG __pD.56386 => _746
  # DEBUG thisD.56385 => D#5ptD.0
  # .MEM_1847 = VDEF <.MEM_1846>
  MEM[(charD.10 * *)&D.45799] = _746;
  # VUSE <.MEM_1847>
  __dnew.173_747 = __dnewD.56367;
  # DEBUG D#6ptD.0 => &D.45799
  # DEBUG __capacityD.56388 => __dnew.173_747
  # DEBUG thisD.56387 => D#6ptD.0
  # .MEM_1848 = VDEF <.MEM_1847>
  MEM[(size_typeD.14319 *)&D.45799 + 16B] = __dnew.173_747;
  # DEBUG D#3ptD.0 => &D.45799
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.56370 => _746
  # DEBUG __k1D.56369 => "read_request_begin_vc"
  # DEBUG __k2D.56368 => &MEM[(voidD.45 *)"read_request_begin_vc" + 21B]
  # DEBUG __dD.56373 => _746
  # DEBUG __sD.56372 => "read_request_begin_vc"
  # DEBUG __nD.56371 => 21
  # DEBUG __s1D.56376 => _746
  # DEBUG __s2D.56375 => "read_request_begin_vc"
  # DEBUG __nD.56374 => 21
  # .MEM_1850 = VDEF <.MEM_1848>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (_746, "read_request_begin_vc", 21);
  # VUSE <.MEM_1850>
  __dnew.173_750 = __dnewD.56367;
  # DEBUG thisD.56380 => &D.45799
  # DEBUG __nD.56379 => __dnew.173_750
  # DEBUG D#7ptD.0 => &D.45799
  # DEBUG __lengthD.56382 => __dnew.173_750
  # DEBUG thisD.56381 => D#7ptD.0
  # .MEM_1851 = VDEF <.MEM_1850>
  MEM[(size_typeD.14319 *)&D.45799 + 8B] = __dnew.173_750;
  # VUSE <.MEM_1851>
  # PT = nonlocal escaped null { D.45799 } (escaped)
  _751 = MEM[(charD.10 * *)&D.45799];
  # DEBUG D#3ptD.0 => &D.45799
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.45799 } (escaped)
  _752 = _751 + __dnew.173_750;
  # DEBUG __c1D.56384 => _752
  # DEBUG __c2D.56383 => D#11ptD.0
  # .MEM_1852 = VDEF <.MEM_1851>
  MEM[(char_typeD.10931 &)_752] = 0;
  # .MEM_1853 = VDEF <.MEM_1852>
  __dnewD.56367 ={v} {CLOBBER};
  [LP 4] # .MEM_20 = VDEF <.MEM_1853>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _21 = _ZNK13Configuration6GetIntERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.39467 (config_12(D), &D.45799);
;;    succ:       369 (EH,EXECUTABLE)
;;                6 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 5, next block 7, flags: (NEW, REACHABLE)
;;    pred:       5 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_22 = VDEF <.MEM_20>
  gReadReqBeginVCD.42078 = _21;
  # DEBUG thisD.53372 => &D.45799
  # DEBUG thisD.53373 => &D.45799
  # DEBUG thisD.53382 => &D.45799
  # VUSE <.MEM_22>
  # PT = nonlocal escaped null { D.45799 } (escaped)
  _24 = MEM[(charD.10 * *)&D.45799];
  # DEBUG D#3ptD.0 => &D.45799
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53383 => &D.45799
  if (&D.45799.D.14356._M_local_bufD.14358 != _24)
    goto <bb 7>;
  else
    goto <bb 8>;
;;    succ:       7 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                8 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 7, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 6, next block 8, flags: (NEW, REACHABLE)
;;    pred:       6 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45799.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53375 => &D.45799
  # DEBUG __sizeD.53374 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45799
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45799
  # DEBUG D#51ptD.0 => &D.45799._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53378 => _24
  # DEBUG __aD.53376 => D#49ptD.0
  # DEBUG __nD.53377 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53381 => _24
  # DEBUG thisD.53379 => D#45ptD.0
  # DEBUG D.53380 => D#46ptD.0
  # .MEM_386 = VDEF <.MEM_22>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_24);
  # VUSE <.MEM_386>
  pretmp_2344 = gReadReqBeginVCD.42078;
;;    succ:       8 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 8, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 7, next block 9, flags: (NEW, REACHABLE)
;;    pred:       6 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                7 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_278 = PHI <.MEM_22(6), .MEM_386(7)>
  # prephitmp_2345 = PHI <_21(6), pretmp_2344(7)>
  # DEBUG D#55ptD.0 => &D.45799._M_dataplusD.14336
  # DEBUG thisD.53384 => D#55ptD.0
  # DEBUG thisD.53385 => D#55ptD.0
  # DEBUG thisD.53386 => D#55ptD.0
  # .MEM_23 = VDEF <.MEM_278>
  D.45799 ={v} {CLOBBER};
  # DEBUG thisD.53370 => &D.45798
  # DEBUG thisD.53371 => &D.45798
  if (prephitmp_2345 < 0)
    goto <bb 9>;
  else
    goto <bb 10>;
;;    succ:       9 [27.0%]  (TRUE_VALUE,EXECUTABLE)
;;                10 [73.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 9, loop depth 0, count 0, freq 243, maybe hot
;;    prev block 8, next block 10, flags: (NEW, REACHABLE)
;;    pred:       8 [27.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_26 = VDEF <.MEM_23>
  gReadReqBeginVCD.42078 = 0;
;;    succ:       10 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 9, next block 11, flags: (NEW, REACHABLE)
;;    pred:       8 [73.0%]  (FALSE_VALUE,EXECUTABLE)
;;                9 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1 = PHI <.MEM_23(8), .MEM_26(9)>
  # DEBUG D#30ptD.0 => &D.45801
  # DEBUG thisD.53387 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45801
  # DEBUG thisD.56393 => &D.45802
  # DEBUG __sD.56394 => "read_request_end_vc"
  # DEBUG __aD.56395 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.56405 => &D.45802
  # DEBUG D#66ptD.0 => &D.45802._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.56408 => D#66ptD.0
  # DEBUG __datD.56407 => &D.45802.D.14356._M_local_bufD.14358
  # DEBUG __aD.56406 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_1854 = VDEF <.MEM_1>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45802]._M_pD.14342 = &D.45802.D.14356._M_local_bufD.14358;
  # DEBUG __sD.56404 => "read_request_end_vc"
  # DEBUG thisD.56398 => &D.45802
  # DEBUG __begD.56397 => "read_request_end_vc"
  # DEBUG __endD.56396 => &MEM[(voidD.45 *)"read_request_end_vc" + 19B]
  # DEBUG thisD.56402 => &D.45802
  # DEBUG __begD.56401 => "read_request_end_vc"
  # DEBUG __endD.56400 => &MEM[(voidD.45 *)"read_request_end_vc" + 19B]
  # DEBUG thisD.56409 => &D.45802
  # DEBUG __begD.56410 => "read_request_end_vc"
  # DEBUG __endD.56411 => &MEM[(voidD.45 *)"read_request_end_vc" + 19B]
  # DEBUG __ptrD.52815 => "read_request_end_vc"
  # DEBUG __firstD.56435 => "read_request_end_vc"
  # DEBUG __lastD.56434 => &MEM[(voidD.45 *)"read_request_end_vc" + 19B]
  # DEBUG D#109ptD.0 => &__firstD.56435
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.56437 => "read_request_end_vc"
  # DEBUG __lastD.56436 => &MEM[(voidD.45 *)"read_request_end_vc" + 19B]
  # .MEM_1855 = VDEF <.MEM_1854>
  __dnewD.56412 = 19;
  # .MEM_1856 = VDEF <.MEM_1855>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _762 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.45802, &__dnewD.56412, 0);
  # DEBUG D#5ptD.0 => &D.45802
  # DEBUG __pD.56431 => _762
  # DEBUG thisD.56430 => D#5ptD.0
  # .MEM_1857 = VDEF <.MEM_1856>
  MEM[(charD.10 * *)&D.45802] = _762;
  # VUSE <.MEM_1857>
  __dnew.173_763 = __dnewD.56412;
  # DEBUG D#6ptD.0 => &D.45802
  # DEBUG __capacityD.56433 => __dnew.173_763
  # DEBUG thisD.56432 => D#6ptD.0
  # .MEM_1858 = VDEF <.MEM_1857>
  MEM[(size_typeD.14319 *)&D.45802 + 16B] = __dnew.173_763;
  # DEBUG D#3ptD.0 => &D.45802
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.56415 => _762
  # DEBUG __k1D.56414 => "read_request_end_vc"
  # DEBUG __k2D.56413 => &MEM[(voidD.45 *)"read_request_end_vc" + 19B]
  # DEBUG __dD.56418 => _762
  # DEBUG __sD.56417 => "read_request_end_vc"
  # DEBUG __nD.56416 => 19
  # DEBUG __s1D.56421 => _762
  # DEBUG __s2D.56420 => "read_request_end_vc"
  # DEBUG __nD.56419 => 19
  # .MEM_1860 = VDEF <.MEM_1858>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (_762, "read_request_end_vc", 19);
  # VUSE <.MEM_1860>
  __dnew.173_766 = __dnewD.56412;
  # DEBUG thisD.56425 => &D.45802
  # DEBUG __nD.56424 => __dnew.173_766
  # DEBUG D#7ptD.0 => &D.45802
  # DEBUG __lengthD.56427 => __dnew.173_766
  # DEBUG thisD.56426 => D#7ptD.0
  # .MEM_1861 = VDEF <.MEM_1860>
  MEM[(size_typeD.14319 *)&D.45802 + 8B] = __dnew.173_766;
  # VUSE <.MEM_1861>
  # PT = nonlocal escaped null { D.45802 } (escaped)
  _767 = MEM[(charD.10 * *)&D.45802];
  # DEBUG D#3ptD.0 => &D.45802
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.45802 } (escaped)
  _768 = _767 + __dnew.173_766;
  # DEBUG __c1D.56429 => _768
  # DEBUG __c2D.56428 => D#11ptD.0
  # .MEM_1862 = VDEF <.MEM_1861>
  MEM[(char_typeD.10931 &)_768] = 0;
  # .MEM_1863 = VDEF <.MEM_1862>
  __dnewD.56412 ={v} {CLOBBER};
  [LP 6] # .MEM_29 = VDEF <.MEM_1863>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _30 = _ZNK13Configuration6GetIntERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.39467 (config_12(D), &D.45802);
;;    succ:       372 (EH,EXECUTABLE)
;;                11 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 11, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 10, next block 12, flags: (NEW, REACHABLE)
;;    pred:       10 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_31 = VDEF <.MEM_29>
  gReadReqEndVCD.42079 = _30;
  # DEBUG thisD.53390 => &D.45802
  # DEBUG thisD.53391 => &D.45802
  # DEBUG thisD.53400 => &D.45802
  # VUSE <.MEM_31>
  # PT = nonlocal escaped null { D.45802 } (escaped)
  _33 = MEM[(charD.10 * *)&D.45802];
  # DEBUG D#3ptD.0 => &D.45802
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53401 => &D.45802
  if (&D.45802.D.14356._M_local_bufD.14358 != _33)
    goto <bb 12>;
  else
    goto <bb 13>;
;;    succ:       12 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                13 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 12, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 11, next block 13, flags: (NEW, REACHABLE)
;;    pred:       11 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45802.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53393 => &D.45802
  # DEBUG __sizeD.53392 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45802
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45802
  # DEBUG D#51ptD.0 => &D.45802._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53396 => _33
  # DEBUG __aD.53394 => D#49ptD.0
  # DEBUG __nD.53395 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53399 => _33
  # DEBUG thisD.53397 => D#45ptD.0
  # DEBUG D.53398 => D#46ptD.0
  # .MEM_391 = VDEF <.MEM_31>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_33);
  # VUSE <.MEM_391>
  pretmp_2346 = gReadReqEndVCD.42079;
;;    succ:       13 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 13, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 12, next block 14, flags: (NEW, REACHABLE)
;;    pred:       11 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                12 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_258 = PHI <.MEM_31(11), .MEM_391(12)>
  # prephitmp_2347 = PHI <_30(11), pretmp_2346(12)>
  # DEBUG D#55ptD.0 => &D.45802._M_dataplusD.14336
  # DEBUG thisD.53402 => D#55ptD.0
  # DEBUG thisD.53403 => D#55ptD.0
  # DEBUG thisD.53404 => D#55ptD.0
  # .MEM_32 = VDEF <.MEM_258>
  D.45802 ={v} {CLOBBER};
  # DEBUG thisD.53388 => &D.45801
  # DEBUG thisD.53389 => &D.45801
  if (prephitmp_2347 < 0)
    goto <bb 14>;
  else
    goto <bb 15>;
;;    succ:       14 [27.0%]  (TRUE_VALUE,EXECUTABLE)
;;                15 [73.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 14, loop depth 0, count 0, freq 243, maybe hot
;;    prev block 13, next block 15, flags: (NEW, REACHABLE)
;;    pred:       13 [27.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_32>
  gNumVCs.145_35 = gNumVCsD.42077;
  # RANGE [-1073741824, 1073741823]
  gReadReplyBeginVC.153_36 = gNumVCs.145_35 / 2;
  # RANGE [-1073741825, 1073741822]
  gReadReqEndVC.146_37 = gReadReplyBeginVC.153_36 + -1;
  # .MEM_38 = VDEF <.MEM_32>
  gReadReqEndVCD.42079 = gReadReqEndVC.146_37;
;;    succ:       15 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 15, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 14, next block 16, flags: (NEW, REACHABLE)
;;    pred:       13 [73.0%]  (FALSE_VALUE,EXECUTABLE)
;;                14 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2 = PHI <.MEM_32(13), .MEM_38(14)>
  # DEBUG D#30ptD.0 => &D.45804
  # DEBUG thisD.53405 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45804
  # DEBUG thisD.56438 => &D.45805
  # DEBUG __sD.56439 => "write_request_begin_vc"
  # DEBUG __aD.56440 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.56450 => &D.45805
  # DEBUG D#66ptD.0 => &D.45805._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.56453 => D#66ptD.0
  # DEBUG __datD.56452 => &D.45805.D.14356._M_local_bufD.14358
  # DEBUG __aD.56451 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_1864 = VDEF <.MEM_2>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45805]._M_pD.14342 = &D.45805.D.14356._M_local_bufD.14358;
  # DEBUG __sD.56449 => "write_request_begin_vc"
  # DEBUG thisD.56443 => &D.45805
  # DEBUG __begD.56442 => "write_request_begin_vc"
  # DEBUG __endD.56441 => &MEM[(voidD.45 *)"write_request_begin_vc" + 22B]
  # DEBUG thisD.56447 => &D.45805
  # DEBUG __begD.56446 => "write_request_begin_vc"
  # DEBUG __endD.56445 => &MEM[(voidD.45 *)"write_request_begin_vc" + 22B]
  # DEBUG thisD.56454 => &D.45805
  # DEBUG __begD.56455 => "write_request_begin_vc"
  # DEBUG __endD.56456 => &MEM[(voidD.45 *)"write_request_begin_vc" + 22B]
  # DEBUG __ptrD.52815 => "write_request_begin_vc"
  # DEBUG __firstD.56480 => "write_request_begin_vc"
  # DEBUG __lastD.56479 => &MEM[(voidD.45 *)"write_request_begin_vc" + 22B]
  # DEBUG D#109ptD.0 => &__firstD.56480
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.56482 => "write_request_begin_vc"
  # DEBUG __lastD.56481 => &MEM[(voidD.45 *)"write_request_begin_vc" + 22B]
  # .MEM_1865 = VDEF <.MEM_1864>
  __dnewD.56457 = 22;
  # .MEM_1866 = VDEF <.MEM_1865>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _778 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.45805, &__dnewD.56457, 0);
  # DEBUG D#5ptD.0 => &D.45805
  # DEBUG __pD.56476 => _778
  # DEBUG thisD.56475 => D#5ptD.0
  # .MEM_1867 = VDEF <.MEM_1866>
  MEM[(charD.10 * *)&D.45805] = _778;
  # VUSE <.MEM_1867>
  __dnew.173_779 = __dnewD.56457;
  # DEBUG D#6ptD.0 => &D.45805
  # DEBUG __capacityD.56478 => __dnew.173_779
  # DEBUG thisD.56477 => D#6ptD.0
  # .MEM_1868 = VDEF <.MEM_1867>
  MEM[(size_typeD.14319 *)&D.45805 + 16B] = __dnew.173_779;
  # DEBUG D#3ptD.0 => &D.45805
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.56460 => _778
  # DEBUG __k1D.56459 => "write_request_begin_vc"
  # DEBUG __k2D.56458 => &MEM[(voidD.45 *)"write_request_begin_vc" + 22B]
  # DEBUG __dD.56463 => _778
  # DEBUG __sD.56462 => "write_request_begin_vc"
  # DEBUG __nD.56461 => 22
  # DEBUG __s1D.56466 => _778
  # DEBUG __s2D.56465 => "write_request_begin_vc"
  # DEBUG __nD.56464 => 22
  # .MEM_1870 = VDEF <.MEM_1868>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (_778, "write_request_begin_vc", 22);
  # VUSE <.MEM_1870>
  __dnew.173_782 = __dnewD.56457;
  # DEBUG thisD.56470 => &D.45805
  # DEBUG __nD.56469 => __dnew.173_782
  # DEBUG D#7ptD.0 => &D.45805
  # DEBUG __lengthD.56472 => __dnew.173_782
  # DEBUG thisD.56471 => D#7ptD.0
  # .MEM_1871 = VDEF <.MEM_1870>
  MEM[(size_typeD.14319 *)&D.45805 + 8B] = __dnew.173_782;
  # VUSE <.MEM_1871>
  # PT = nonlocal escaped null { D.45805 } (escaped)
  _783 = MEM[(charD.10 * *)&D.45805];
  # DEBUG D#3ptD.0 => &D.45805
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.45805 } (escaped)
  _784 = _783 + __dnew.173_782;
  # DEBUG __c1D.56474 => _784
  # DEBUG __c2D.56473 => D#11ptD.0
  # .MEM_1872 = VDEF <.MEM_1871>
  MEM[(char_typeD.10931 &)_784] = 0;
  # .MEM_1873 = VDEF <.MEM_1872>
  __dnewD.56457 ={v} {CLOBBER};
  [LP 8] # .MEM_41 = VDEF <.MEM_1873>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _42 = _ZNK13Configuration6GetIntERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.39467 (config_12(D), &D.45805);
;;    succ:       375 (EH,EXECUTABLE)
;;                16 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 16, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 15, next block 17, flags: (NEW, REACHABLE)
;;    pred:       15 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_43 = VDEF <.MEM_41>
  gWriteReqBeginVCD.42080 = _42;
  # DEBUG thisD.53408 => &D.45805
  # DEBUG thisD.53409 => &D.45805
  # DEBUG thisD.53418 => &D.45805
  # VUSE <.MEM_43>
  # PT = nonlocal escaped null { D.45805 } (escaped)
  _45 = MEM[(charD.10 * *)&D.45805];
  # DEBUG D#3ptD.0 => &D.45805
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53419 => &D.45805
  if (&D.45805.D.14356._M_local_bufD.14358 != _45)
    goto <bb 17>;
  else
    goto <bb 18>;
;;    succ:       17 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                18 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 17, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 16, next block 18, flags: (NEW, REACHABLE)
;;    pred:       16 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45805.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53411 => &D.45805
  # DEBUG __sizeD.53410 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45805
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45805
  # DEBUG D#51ptD.0 => &D.45805._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53414 => _45
  # DEBUG __aD.53412 => D#49ptD.0
  # DEBUG __nD.53413 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53417 => _45
  # DEBUG thisD.53415 => D#45ptD.0
  # DEBUG D.53416 => D#46ptD.0
  # .MEM_396 = VDEF <.MEM_43>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_45);
  # VUSE <.MEM_396>
  pretmp_607 = gWriteReqBeginVCD.42080;
;;    succ:       18 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 18, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 17, next block 19, flags: (NEW, REACHABLE)
;;    pred:       16 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                17 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_251 = PHI <.MEM_43(16), .MEM_396(17)>
  # prephitmp_608 = PHI <_42(16), pretmp_607(17)>
  # DEBUG D#55ptD.0 => &D.45805._M_dataplusD.14336
  # DEBUG thisD.53420 => D#55ptD.0
  # DEBUG thisD.53421 => D#55ptD.0
  # DEBUG thisD.53422 => D#55ptD.0
  # .MEM_44 = VDEF <.MEM_251>
  D.45805 ={v} {CLOBBER};
  # DEBUG thisD.53406 => &D.45804
  # DEBUG thisD.53407 => &D.45804
  if (prephitmp_608 < 0)
    goto <bb 19>;
  else
    goto <bb 20>;
;;    succ:       19 [27.0%]  (TRUE_VALUE,EXECUTABLE)
;;                20 [73.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 19, loop depth 0, count 0, freq 243, maybe hot
;;    prev block 18, next block 20, flags: (NEW, REACHABLE)
;;    pred:       18 [27.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_47 = VDEF <.MEM_44>
  gWriteReqBeginVCD.42080 = 0;
;;    succ:       20 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 20, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 19, next block 21, flags: (NEW, REACHABLE)
;;    pred:       18 [73.0%]  (FALSE_VALUE,EXECUTABLE)
;;                19 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_3 = PHI <.MEM_44(18), .MEM_47(19)>
  # DEBUG D#30ptD.0 => &D.45807
  # DEBUG thisD.53423 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45807
  # DEBUG thisD.56483 => &D.45808
  # DEBUG __sD.56484 => "write_request_end_vc"
  # DEBUG __aD.56485 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.56495 => &D.45808
  # DEBUG D#66ptD.0 => &D.45808._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.56498 => D#66ptD.0
  # DEBUG __datD.56497 => &D.45808.D.14356._M_local_bufD.14358
  # DEBUG __aD.56496 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_1874 = VDEF <.MEM_3>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45808]._M_pD.14342 = &D.45808.D.14356._M_local_bufD.14358;
  # DEBUG __sD.56494 => "write_request_end_vc"
  # DEBUG thisD.56488 => &D.45808
  # DEBUG __begD.56487 => "write_request_end_vc"
  # DEBUG __endD.56486 => &MEM[(voidD.45 *)"write_request_end_vc" + 20B]
  # DEBUG thisD.56492 => &D.45808
  # DEBUG __begD.56491 => "write_request_end_vc"
  # DEBUG __endD.56490 => &MEM[(voidD.45 *)"write_request_end_vc" + 20B]
  # DEBUG thisD.56499 => &D.45808
  # DEBUG __begD.56500 => "write_request_end_vc"
  # DEBUG __endD.56501 => &MEM[(voidD.45 *)"write_request_end_vc" + 20B]
  # DEBUG __ptrD.52815 => "write_request_end_vc"
  # DEBUG __firstD.56525 => "write_request_end_vc"
  # DEBUG __lastD.56524 => &MEM[(voidD.45 *)"write_request_end_vc" + 20B]
  # DEBUG D#109ptD.0 => &__firstD.56525
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.56527 => "write_request_end_vc"
  # DEBUG __lastD.56526 => &MEM[(voidD.45 *)"write_request_end_vc" + 20B]
  # .MEM_1875 = VDEF <.MEM_1874>
  __dnewD.56502 = 20;
  # .MEM_1876 = VDEF <.MEM_1875>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _794 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.45808, &__dnewD.56502, 0);
  # DEBUG D#5ptD.0 => &D.45808
  # DEBUG __pD.56521 => _794
  # DEBUG thisD.56520 => D#5ptD.0
  # .MEM_1877 = VDEF <.MEM_1876>
  MEM[(charD.10 * *)&D.45808] = _794;
  # VUSE <.MEM_1877>
  __dnew.173_795 = __dnewD.56502;
  # DEBUG D#6ptD.0 => &D.45808
  # DEBUG __capacityD.56523 => __dnew.173_795
  # DEBUG thisD.56522 => D#6ptD.0
  # .MEM_1878 = VDEF <.MEM_1877>
  MEM[(size_typeD.14319 *)&D.45808 + 16B] = __dnew.173_795;
  # DEBUG D#3ptD.0 => &D.45808
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.56505 => _794
  # DEBUG __k1D.56504 => "write_request_end_vc"
  # DEBUG __k2D.56503 => &MEM[(voidD.45 *)"write_request_end_vc" + 20B]
  # DEBUG __dD.56508 => _794
  # DEBUG __sD.56507 => "write_request_end_vc"
  # DEBUG __nD.56506 => 20
  # DEBUG __s1D.56511 => _794
  # DEBUG __s2D.56510 => "write_request_end_vc"
  # DEBUG __nD.56509 => 20
  # .MEM_1880 = VDEF <.MEM_1878>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (_794, "write_request_end_vc", 20);
  # VUSE <.MEM_1880>
  __dnew.173_798 = __dnewD.56502;
  # DEBUG thisD.56515 => &D.45808
  # DEBUG __nD.56514 => __dnew.173_798
  # DEBUG D#7ptD.0 => &D.45808
  # DEBUG __lengthD.56517 => __dnew.173_798
  # DEBUG thisD.56516 => D#7ptD.0
  # .MEM_1881 = VDEF <.MEM_1880>
  MEM[(size_typeD.14319 *)&D.45808 + 8B] = __dnew.173_798;
  # VUSE <.MEM_1881>
  # PT = nonlocal escaped null { D.45808 } (escaped)
  _799 = MEM[(charD.10 * *)&D.45808];
  # DEBUG D#3ptD.0 => &D.45808
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.45808 } (escaped)
  _800 = _799 + __dnew.173_798;
  # DEBUG __c1D.56519 => _800
  # DEBUG __c2D.56518 => D#11ptD.0
  # .MEM_1882 = VDEF <.MEM_1881>
  MEM[(char_typeD.10931 &)_800] = 0;
  # .MEM_1883 = VDEF <.MEM_1882>
  __dnewD.56502 ={v} {CLOBBER};
  [LP 10] # .MEM_50 = VDEF <.MEM_1883>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _51 = _ZNK13Configuration6GetIntERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.39467 (config_12(D), &D.45808);
;;    succ:       378 (EH,EXECUTABLE)
;;                21 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 21, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 20, next block 22, flags: (NEW, REACHABLE)
;;    pred:       20 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_52 = VDEF <.MEM_50>
  gWriteReqEndVCD.42081 = _51;
  # DEBUG thisD.53426 => &D.45808
  # DEBUG thisD.53427 => &D.45808
  # DEBUG thisD.53436 => &D.45808
  # VUSE <.MEM_52>
  # PT = nonlocal escaped null { D.45808 } (escaped)
  _54 = MEM[(charD.10 * *)&D.45808];
  # DEBUG D#3ptD.0 => &D.45808
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53437 => &D.45808
  if (&D.45808.D.14356._M_local_bufD.14358 != _54)
    goto <bb 22>;
  else
    goto <bb 23>;
;;    succ:       22 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                23 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 22, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 21, next block 23, flags: (NEW, REACHABLE)
;;    pred:       21 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45808.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53429 => &D.45808
  # DEBUG __sizeD.53428 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45808
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45808
  # DEBUG D#51ptD.0 => &D.45808._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53432 => _54
  # DEBUG __aD.53430 => D#49ptD.0
  # DEBUG __nD.53431 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53435 => _54
  # DEBUG thisD.53433 => D#45ptD.0
  # DEBUG D.53434 => D#46ptD.0
  # .MEM_401 = VDEF <.MEM_52>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_54);
  # VUSE <.MEM_401>
  pretmp_609 = gWriteReqEndVCD.42081;
;;    succ:       23 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 23, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 22, next block 24, flags: (NEW, REACHABLE)
;;    pred:       21 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                22 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_244 = PHI <.MEM_52(21), .MEM_401(22)>
  # prephitmp_610 = PHI <_51(21), pretmp_609(22)>
  # DEBUG D#55ptD.0 => &D.45808._M_dataplusD.14336
  # DEBUG thisD.53438 => D#55ptD.0
  # DEBUG thisD.53439 => D#55ptD.0
  # DEBUG thisD.53440 => D#55ptD.0
  # .MEM_53 = VDEF <.MEM_244>
  D.45808 ={v} {CLOBBER};
  # DEBUG thisD.53424 => &D.45807
  # DEBUG thisD.53425 => &D.45807
  if (prephitmp_610 < 0)
    goto <bb 24>;
  else
    goto <bb 25>;
;;    succ:       24 [27.0%]  (TRUE_VALUE,EXECUTABLE)
;;                25 [73.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 24, loop depth 0, count 0, freq 243, maybe hot
;;    prev block 23, next block 25, flags: (NEW, REACHABLE)
;;    pred:       23 [27.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_53>
  gNumVCs.145_56 = gNumVCsD.42077;
  # RANGE [-1073741824, 1073741823]
  gReadReplyBeginVC.153_57 = gNumVCs.145_56 / 2;
  # RANGE [-1073741825, 1073741822]
  gReadReqEndVC.146_58 = gReadReplyBeginVC.153_57 + -1;
  # .MEM_59 = VDEF <.MEM_53>
  gWriteReqEndVCD.42081 = gReadReqEndVC.146_58;
;;    succ:       25 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 25, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 24, next block 26, flags: (NEW, REACHABLE)
;;    pred:       23 [73.0%]  (FALSE_VALUE,EXECUTABLE)
;;                24 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_4 = PHI <.MEM_53(23), .MEM_59(24)>
  # DEBUG D#30ptD.0 => &D.45810
  # DEBUG thisD.53441 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45810
  # DEBUG thisD.56528 => &D.45811
  # DEBUG __sD.56529 => "read_reply_begin_vc"
  # DEBUG __aD.56530 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.56540 => &D.45811
  # DEBUG D#66ptD.0 => &D.45811._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.56543 => D#66ptD.0
  # DEBUG __datD.56542 => &D.45811.D.14356._M_local_bufD.14358
  # DEBUG __aD.56541 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_1884 = VDEF <.MEM_4>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45811]._M_pD.14342 = &D.45811.D.14356._M_local_bufD.14358;
  # DEBUG __sD.56539 => "read_reply_begin_vc"
  # DEBUG thisD.56533 => &D.45811
  # DEBUG __begD.56532 => "read_reply_begin_vc"
  # DEBUG __endD.56531 => &MEM[(voidD.45 *)"read_reply_begin_vc" + 19B]
  # DEBUG thisD.56537 => &D.45811
  # DEBUG __begD.56536 => "read_reply_begin_vc"
  # DEBUG __endD.56535 => &MEM[(voidD.45 *)"read_reply_begin_vc" + 19B]
  # DEBUG thisD.56544 => &D.45811
  # DEBUG __begD.56545 => "read_reply_begin_vc"
  # DEBUG __endD.56546 => &MEM[(voidD.45 *)"read_reply_begin_vc" + 19B]
  # DEBUG __ptrD.52815 => "read_reply_begin_vc"
  # DEBUG __firstD.56570 => "read_reply_begin_vc"
  # DEBUG __lastD.56569 => &MEM[(voidD.45 *)"read_reply_begin_vc" + 19B]
  # DEBUG D#109ptD.0 => &__firstD.56570
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.56572 => "read_reply_begin_vc"
  # DEBUG __lastD.56571 => &MEM[(voidD.45 *)"read_reply_begin_vc" + 19B]
  # .MEM_1885 = VDEF <.MEM_1884>
  __dnewD.56547 = 19;
  # .MEM_1886 = VDEF <.MEM_1885>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _810 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.45811, &__dnewD.56547, 0);
  # DEBUG D#5ptD.0 => &D.45811
  # DEBUG __pD.56566 => _810
  # DEBUG thisD.56565 => D#5ptD.0
  # .MEM_1887 = VDEF <.MEM_1886>
  MEM[(charD.10 * *)&D.45811] = _810;
  # VUSE <.MEM_1887>
  __dnew.173_811 = __dnewD.56547;
  # DEBUG D#6ptD.0 => &D.45811
  # DEBUG __capacityD.56568 => __dnew.173_811
  # DEBUG thisD.56567 => D#6ptD.0
  # .MEM_1888 = VDEF <.MEM_1887>
  MEM[(size_typeD.14319 *)&D.45811 + 16B] = __dnew.173_811;
  # DEBUG D#3ptD.0 => &D.45811
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.56550 => _810
  # DEBUG __k1D.56549 => "read_reply_begin_vc"
  # DEBUG __k2D.56548 => &MEM[(voidD.45 *)"read_reply_begin_vc" + 19B]
  # DEBUG __dD.56553 => _810
  # DEBUG __sD.56552 => "read_reply_begin_vc"
  # DEBUG __nD.56551 => 19
  # DEBUG __s1D.56556 => _810
  # DEBUG __s2D.56555 => "read_reply_begin_vc"
  # DEBUG __nD.56554 => 19
  # .MEM_1890 = VDEF <.MEM_1888>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (_810, "read_reply_begin_vc", 19);
  # VUSE <.MEM_1890>
  __dnew.173_814 = __dnewD.56547;
  # DEBUG thisD.56560 => &D.45811
  # DEBUG __nD.56559 => __dnew.173_814
  # DEBUG D#7ptD.0 => &D.45811
  # DEBUG __lengthD.56562 => __dnew.173_814
  # DEBUG thisD.56561 => D#7ptD.0
  # .MEM_1891 = VDEF <.MEM_1890>
  MEM[(size_typeD.14319 *)&D.45811 + 8B] = __dnew.173_814;
  # VUSE <.MEM_1891>
  # PT = nonlocal escaped null { D.45811 } (escaped)
  _815 = MEM[(charD.10 * *)&D.45811];
  # DEBUG D#3ptD.0 => &D.45811
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.45811 } (escaped)
  _816 = _815 + __dnew.173_814;
  # DEBUG __c1D.56564 => _816
  # DEBUG __c2D.56563 => D#11ptD.0
  # .MEM_1892 = VDEF <.MEM_1891>
  MEM[(char_typeD.10931 &)_816] = 0;
  # .MEM_1893 = VDEF <.MEM_1892>
  __dnewD.56547 ={v} {CLOBBER};
  [LP 12] # .MEM_62 = VDEF <.MEM_1893>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _63 = _ZNK13Configuration6GetIntERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.39467 (config_12(D), &D.45811);
;;    succ:       381 (EH,EXECUTABLE)
;;                26 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 26, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 25, next block 27, flags: (NEW, REACHABLE)
;;    pred:       25 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_64 = VDEF <.MEM_62>
  gReadReplyBeginVCD.42082 = _63;
  # DEBUG thisD.53444 => &D.45811
  # DEBUG thisD.53445 => &D.45811
  # DEBUG thisD.53454 => &D.45811
  # VUSE <.MEM_64>
  # PT = nonlocal escaped null { D.45811 } (escaped)
  _66 = MEM[(charD.10 * *)&D.45811];
  # DEBUG D#3ptD.0 => &D.45811
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53455 => &D.45811
  if (&D.45811.D.14356._M_local_bufD.14358 != _66)
    goto <bb 27>;
  else
    goto <bb 28>;
;;    succ:       27 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                28 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 27, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 26, next block 28, flags: (NEW, REACHABLE)
;;    pred:       26 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45811.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53447 => &D.45811
  # DEBUG __sizeD.53446 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45811
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45811
  # DEBUG D#51ptD.0 => &D.45811._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53450 => _66
  # DEBUG __aD.53448 => D#49ptD.0
  # DEBUG __nD.53449 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53453 => _66
  # DEBUG thisD.53451 => D#45ptD.0
  # DEBUG D.53452 => D#46ptD.0
  # .MEM_406 = VDEF <.MEM_64>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_66);
  # VUSE <.MEM_406>
  pretmp_2292 = gReadReplyBeginVCD.42082;
;;    succ:       28 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 28, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 27, next block 29, flags: (NEW, REACHABLE)
;;    pred:       26 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                27 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_237 = PHI <.MEM_64(26), .MEM_406(27)>
  # prephitmp_2293 = PHI <_63(26), pretmp_2292(27)>
  # DEBUG D#55ptD.0 => &D.45811._M_dataplusD.14336
  # DEBUG thisD.53456 => D#55ptD.0
  # DEBUG thisD.53457 => D#55ptD.0
  # DEBUG thisD.53458 => D#55ptD.0
  # .MEM_65 = VDEF <.MEM_237>
  D.45811 ={v} {CLOBBER};
  # DEBUG thisD.53442 => &D.45810
  # DEBUG thisD.53443 => &D.45810
  if (prephitmp_2293 < 0)
    goto <bb 29>;
  else
    goto <bb 30>;
;;    succ:       29 [27.0%]  (TRUE_VALUE,EXECUTABLE)
;;                30 [73.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 29, loop depth 0, count 0, freq 243, maybe hot
;;    prev block 28, next block 30, flags: (NEW, REACHABLE)
;;    pred:       28 [27.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_65>
  gNumVCs.145_68 = gNumVCsD.42077;
  # RANGE [-1073741824, 1073741823]
  gReadReplyBeginVC.153_69 = gNumVCs.145_68 / 2;
  # .MEM_70 = VDEF <.MEM_65>
  gReadReplyBeginVCD.42082 = gReadReplyBeginVC.153_69;
;;    succ:       30 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 30, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 29, next block 31, flags: (NEW, REACHABLE)
;;    pred:       28 [73.0%]  (FALSE_VALUE,EXECUTABLE)
;;                29 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_5 = PHI <.MEM_65(28), .MEM_70(29)>
  # DEBUG D#30ptD.0 => &D.45813
  # DEBUG thisD.53459 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45813
  # DEBUG thisD.56573 => &D.45814
  # DEBUG __sD.56574 => "read_reply_end_vc"
  # DEBUG __aD.56575 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.56585 => &D.45814
  # DEBUG D#66ptD.0 => &D.45814._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.56588 => D#66ptD.0
  # DEBUG __datD.56587 => &D.45814.D.14356._M_local_bufD.14358
  # DEBUG __aD.56586 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_1894 = VDEF <.MEM_5>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45814]._M_pD.14342 = &D.45814.D.14356._M_local_bufD.14358;
  # DEBUG __sD.56584 => "read_reply_end_vc"
  # DEBUG thisD.56578 => &D.45814
  # DEBUG __begD.56577 => "read_reply_end_vc"
  # DEBUG __endD.56576 => &MEM[(voidD.45 *)"read_reply_end_vc" + 17B]
  # DEBUG thisD.56582 => &D.45814
  # DEBUG __begD.56581 => "read_reply_end_vc"
  # DEBUG __endD.56580 => &MEM[(voidD.45 *)"read_reply_end_vc" + 17B]
  # DEBUG thisD.56589 => &D.45814
  # DEBUG __begD.56590 => "read_reply_end_vc"
  # DEBUG __endD.56591 => &MEM[(voidD.45 *)"read_reply_end_vc" + 17B]
  # DEBUG __ptrD.52815 => "read_reply_end_vc"
  # DEBUG __firstD.56615 => "read_reply_end_vc"
  # DEBUG __lastD.56614 => &MEM[(voidD.45 *)"read_reply_end_vc" + 17B]
  # DEBUG D#109ptD.0 => &__firstD.56615
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.56617 => "read_reply_end_vc"
  # DEBUG __lastD.56616 => &MEM[(voidD.45 *)"read_reply_end_vc" + 17B]
  # .MEM_1895 = VDEF <.MEM_1894>
  __dnewD.56592 = 17;
  # .MEM_1896 = VDEF <.MEM_1895>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _826 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.45814, &__dnewD.56592, 0);
  # DEBUG D#5ptD.0 => &D.45814
  # DEBUG __pD.56611 => _826
  # DEBUG thisD.56610 => D#5ptD.0
  # .MEM_1897 = VDEF <.MEM_1896>
  MEM[(charD.10 * *)&D.45814] = _826;
  # VUSE <.MEM_1897>
  __dnew.173_827 = __dnewD.56592;
  # DEBUG D#6ptD.0 => &D.45814
  # DEBUG __capacityD.56613 => __dnew.173_827
  # DEBUG thisD.56612 => D#6ptD.0
  # .MEM_1898 = VDEF <.MEM_1897>
  MEM[(size_typeD.14319 *)&D.45814 + 16B] = __dnew.173_827;
  # DEBUG D#3ptD.0 => &D.45814
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.56595 => _826
  # DEBUG __k1D.56594 => "read_reply_end_vc"
  # DEBUG __k2D.56593 => &MEM[(voidD.45 *)"read_reply_end_vc" + 17B]
  # DEBUG __dD.56598 => _826
  # DEBUG __sD.56597 => "read_reply_end_vc"
  # DEBUG __nD.56596 => 17
  # DEBUG __s1D.56601 => _826
  # DEBUG __s2D.56600 => "read_reply_end_vc"
  # DEBUG __nD.56599 => 17
  # .MEM_1900 = VDEF <.MEM_1898>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (_826, "read_reply_end_vc", 17);
  # VUSE <.MEM_1900>
  __dnew.173_830 = __dnewD.56592;
  # DEBUG thisD.56605 => &D.45814
  # DEBUG __nD.56604 => __dnew.173_830
  # DEBUG D#7ptD.0 => &D.45814
  # DEBUG __lengthD.56607 => __dnew.173_830
  # DEBUG thisD.56606 => D#7ptD.0
  # .MEM_1901 = VDEF <.MEM_1900>
  MEM[(size_typeD.14319 *)&D.45814 + 8B] = __dnew.173_830;
  # VUSE <.MEM_1901>
  # PT = nonlocal escaped null { D.45814 } (escaped)
  _831 = MEM[(charD.10 * *)&D.45814];
  # DEBUG D#3ptD.0 => &D.45814
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.45814 } (escaped)
  _832 = _831 + __dnew.173_830;
  # DEBUG __c1D.56609 => _832
  # DEBUG __c2D.56608 => D#11ptD.0
  # .MEM_1902 = VDEF <.MEM_1901>
  MEM[(char_typeD.10931 &)_832] = 0;
  # .MEM_1903 = VDEF <.MEM_1902>
  __dnewD.56592 ={v} {CLOBBER};
  [LP 14] # .MEM_73 = VDEF <.MEM_1903>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _74 = _ZNK13Configuration6GetIntERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.39467 (config_12(D), &D.45814);
;;    succ:       384 (EH,EXECUTABLE)
;;                31 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 31, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 30, next block 32, flags: (NEW, REACHABLE)
;;    pred:       30 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_75 = VDEF <.MEM_73>
  gReadReplyEndVCD.42083 = _74;
  # DEBUG thisD.53462 => &D.45814
  # DEBUG thisD.53463 => &D.45814
  # DEBUG thisD.53472 => &D.45814
  # VUSE <.MEM_75>
  # PT = nonlocal escaped null { D.45814 } (escaped)
  _77 = MEM[(charD.10 * *)&D.45814];
  # DEBUG D#3ptD.0 => &D.45814
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53473 => &D.45814
  if (&D.45814.D.14356._M_local_bufD.14358 != _77)
    goto <bb 32>;
  else
    goto <bb 33>;
;;    succ:       32 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                33 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 32, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 31, next block 33, flags: (NEW, REACHABLE)
;;    pred:       31 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45814.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53465 => &D.45814
  # DEBUG __sizeD.53464 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45814
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45814
  # DEBUG D#51ptD.0 => &D.45814._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53468 => _77
  # DEBUG __aD.53466 => D#49ptD.0
  # DEBUG __nD.53467 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53471 => _77
  # DEBUG thisD.53469 => D#45ptD.0
  # DEBUG D.53470 => D#46ptD.0
  # .MEM_411 = VDEF <.MEM_75>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_77);
  # VUSE <.MEM_411>
  pretmp_2294 = gReadReplyEndVCD.42083;
;;    succ:       33 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 33, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 32, next block 34, flags: (NEW, REACHABLE)
;;    pred:       31 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                32 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_230 = PHI <.MEM_75(31), .MEM_411(32)>
  # prephitmp_2295 = PHI <_74(31), pretmp_2294(32)>
  # DEBUG D#55ptD.0 => &D.45814._M_dataplusD.14336
  # DEBUG thisD.53474 => D#55ptD.0
  # DEBUG thisD.53475 => D#55ptD.0
  # DEBUG thisD.53476 => D#55ptD.0
  # .MEM_76 = VDEF <.MEM_230>
  D.45814 ={v} {CLOBBER};
  # DEBUG thisD.53460 => &D.45813
  # DEBUG thisD.53461 => &D.45813
  if (prephitmp_2295 < 0)
    goto <bb 34>;
  else
    goto <bb 35>;
;;    succ:       34 [27.0%]  (TRUE_VALUE,EXECUTABLE)
;;                35 [73.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 34, loop depth 0, count 0, freq 243, maybe hot
;;    prev block 33, next block 35, flags: (NEW, REACHABLE)
;;    pred:       33 [27.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_76>
  gNumVCs.145_79 = gNumVCsD.42077;
  gReadReplyEndVC.156_80 = gNumVCs.145_79 + -1;
  # .MEM_81 = VDEF <.MEM_76>
  gReadReplyEndVCD.42083 = gReadReplyEndVC.156_80;
;;    succ:       35 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 35, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 34, next block 36, flags: (NEW, REACHABLE)
;;    pred:       33 [73.0%]  (FALSE_VALUE,EXECUTABLE)
;;                34 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_6 = PHI <.MEM_76(33), .MEM_81(34)>
  # DEBUG D#30ptD.0 => &D.45816
  # DEBUG thisD.53477 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45816
  # DEBUG thisD.56618 => &D.45817
  # DEBUG __sD.56619 => "write_reply_begin_vc"
  # DEBUG __aD.56620 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.56630 => &D.45817
  # DEBUG D#66ptD.0 => &D.45817._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.56633 => D#66ptD.0
  # DEBUG __datD.56632 => &D.45817.D.14356._M_local_bufD.14358
  # DEBUG __aD.56631 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_1904 = VDEF <.MEM_6>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45817]._M_pD.14342 = &D.45817.D.14356._M_local_bufD.14358;
  # DEBUG __sD.56629 => "write_reply_begin_vc"
  # DEBUG thisD.56623 => &D.45817
  # DEBUG __begD.56622 => "write_reply_begin_vc"
  # DEBUG __endD.56621 => &MEM[(voidD.45 *)"write_reply_begin_vc" + 20B]
  # DEBUG thisD.56627 => &D.45817
  # DEBUG __begD.56626 => "write_reply_begin_vc"
  # DEBUG __endD.56625 => &MEM[(voidD.45 *)"write_reply_begin_vc" + 20B]
  # DEBUG thisD.56634 => &D.45817
  # DEBUG __begD.56635 => "write_reply_begin_vc"
  # DEBUG __endD.56636 => &MEM[(voidD.45 *)"write_reply_begin_vc" + 20B]
  # DEBUG __ptrD.52815 => "write_reply_begin_vc"
  # DEBUG __firstD.56660 => "write_reply_begin_vc"
  # DEBUG __lastD.56659 => &MEM[(voidD.45 *)"write_reply_begin_vc" + 20B]
  # DEBUG D#109ptD.0 => &__firstD.56660
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.56662 => "write_reply_begin_vc"
  # DEBUG __lastD.56661 => &MEM[(voidD.45 *)"write_reply_begin_vc" + 20B]
  # .MEM_1905 = VDEF <.MEM_1904>
  __dnewD.56637 = 20;
  # .MEM_1906 = VDEF <.MEM_1905>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _842 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.45817, &__dnewD.56637, 0);
  # DEBUG D#5ptD.0 => &D.45817
  # DEBUG __pD.56656 => _842
  # DEBUG thisD.56655 => D#5ptD.0
  # .MEM_1907 = VDEF <.MEM_1906>
  MEM[(charD.10 * *)&D.45817] = _842;
  # VUSE <.MEM_1907>
  __dnew.173_843 = __dnewD.56637;
  # DEBUG D#6ptD.0 => &D.45817
  # DEBUG __capacityD.56658 => __dnew.173_843
  # DEBUG thisD.56657 => D#6ptD.0
  # .MEM_1908 = VDEF <.MEM_1907>
  MEM[(size_typeD.14319 *)&D.45817 + 16B] = __dnew.173_843;
  # DEBUG D#3ptD.0 => &D.45817
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.56640 => _842
  # DEBUG __k1D.56639 => "write_reply_begin_vc"
  # DEBUG __k2D.56638 => &MEM[(voidD.45 *)"write_reply_begin_vc" + 20B]
  # DEBUG __dD.56643 => _842
  # DEBUG __sD.56642 => "write_reply_begin_vc"
  # DEBUG __nD.56641 => 20
  # DEBUG __s1D.56646 => _842
  # DEBUG __s2D.56645 => "write_reply_begin_vc"
  # DEBUG __nD.56644 => 20
  # .MEM_1910 = VDEF <.MEM_1908>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (_842, "write_reply_begin_vc", 20);
  # VUSE <.MEM_1910>
  __dnew.173_846 = __dnewD.56637;
  # DEBUG thisD.56650 => &D.45817
  # DEBUG __nD.56649 => __dnew.173_846
  # DEBUG D#7ptD.0 => &D.45817
  # DEBUG __lengthD.56652 => __dnew.173_846
  # DEBUG thisD.56651 => D#7ptD.0
  # .MEM_1911 = VDEF <.MEM_1910>
  MEM[(size_typeD.14319 *)&D.45817 + 8B] = __dnew.173_846;
  # VUSE <.MEM_1911>
  # PT = nonlocal escaped null { D.45817 } (escaped)
  _847 = MEM[(charD.10 * *)&D.45817];
  # DEBUG D#3ptD.0 => &D.45817
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.45817 } (escaped)
  _848 = _847 + __dnew.173_846;
  # DEBUG __c1D.56654 => _848
  # DEBUG __c2D.56653 => D#11ptD.0
  # .MEM_1912 = VDEF <.MEM_1911>
  MEM[(char_typeD.10931 &)_848] = 0;
  # .MEM_1913 = VDEF <.MEM_1912>
  __dnewD.56637 ={v} {CLOBBER};
  [LP 16] # .MEM_84 = VDEF <.MEM_1913>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _85 = _ZNK13Configuration6GetIntERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.39467 (config_12(D), &D.45817);
;;    succ:       387 (EH,EXECUTABLE)
;;                36 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 36, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 35, next block 37, flags: (NEW, REACHABLE)
;;    pred:       35 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_86 = VDEF <.MEM_84>
  gWriteReplyBeginVCD.42084 = _85;
  # DEBUG thisD.53480 => &D.45817
  # DEBUG thisD.53481 => &D.45817
  # DEBUG thisD.53490 => &D.45817
  # VUSE <.MEM_86>
  # PT = nonlocal escaped null { D.45817 } (escaped)
  _88 = MEM[(charD.10 * *)&D.45817];
  # DEBUG D#3ptD.0 => &D.45817
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53491 => &D.45817
  if (&D.45817.D.14356._M_local_bufD.14358 != _88)
    goto <bb 37>;
  else
    goto <bb 38>;
;;    succ:       37 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                38 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 37, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 36, next block 38, flags: (NEW, REACHABLE)
;;    pred:       36 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45817.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53483 => &D.45817
  # DEBUG __sizeD.53482 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45817
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45817
  # DEBUG D#51ptD.0 => &D.45817._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53486 => _88
  # DEBUG __aD.53484 => D#49ptD.0
  # DEBUG __nD.53485 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53489 => _88
  # DEBUG thisD.53487 => D#45ptD.0
  # DEBUG D.53488 => D#46ptD.0
  # .MEM_416 = VDEF <.MEM_86>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_88);
  # VUSE <.MEM_416>
  pretmp_2296 = gWriteReplyBeginVCD.42084;
;;    succ:       38 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 38, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 37, next block 39, flags: (NEW, REACHABLE)
;;    pred:       36 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                37 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_223 = PHI <.MEM_86(36), .MEM_416(37)>
  # prephitmp_612 = PHI <_85(36), pretmp_2296(37)>
  # DEBUG D#55ptD.0 => &D.45817._M_dataplusD.14336
  # DEBUG thisD.53492 => D#55ptD.0
  # DEBUG thisD.53493 => D#55ptD.0
  # DEBUG thisD.53494 => D#55ptD.0
  # .MEM_87 = VDEF <.MEM_223>
  D.45817 ={v} {CLOBBER};
  # DEBUG thisD.53478 => &D.45816
  # DEBUG thisD.53479 => &D.45816
  if (prephitmp_612 < 0)
    goto <bb 39>;
  else
    goto <bb 40>;
;;    succ:       39 [27.0%]  (TRUE_VALUE,EXECUTABLE)
;;                40 [73.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 39, loop depth 0, count 0, freq 243, maybe hot
;;    prev block 38, next block 40, flags: (NEW, REACHABLE)
;;    pred:       38 [27.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_87>
  gNumVCs.145_90 = gNumVCsD.42077;
  # RANGE [-1073741824, 1073741823]
  gReadReplyBeginVC.153_91 = gNumVCs.145_90 / 2;
  # .MEM_92 = VDEF <.MEM_87>
  gWriteReplyBeginVCD.42084 = gReadReplyBeginVC.153_91;
;;    succ:       40 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 40, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 39, next block 41, flags: (NEW, REACHABLE)
;;    pred:       38 [73.0%]  (FALSE_VALUE,EXECUTABLE)
;;                39 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_7 = PHI <.MEM_87(38), .MEM_92(39)>
  # DEBUG D#30ptD.0 => &D.45819
  # DEBUG thisD.53495 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45819
  # DEBUG thisD.56663 => &D.45820
  # DEBUG __sD.56664 => "write_reply_end_vc"
  # DEBUG __aD.56665 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.56675 => &D.45820
  # DEBUG D#66ptD.0 => &D.45820._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.56678 => D#66ptD.0
  # DEBUG __datD.56677 => &D.45820.D.14356._M_local_bufD.14358
  # DEBUG __aD.56676 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_1914 = VDEF <.MEM_7>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45820]._M_pD.14342 = &D.45820.D.14356._M_local_bufD.14358;
  # DEBUG __sD.56674 => "write_reply_end_vc"
  # DEBUG thisD.56668 => &D.45820
  # DEBUG __begD.56667 => "write_reply_end_vc"
  # DEBUG __endD.56666 => &MEM[(voidD.45 *)"write_reply_end_vc" + 18B]
  # DEBUG thisD.56672 => &D.45820
  # DEBUG __begD.56671 => "write_reply_end_vc"
  # DEBUG __endD.56670 => &MEM[(voidD.45 *)"write_reply_end_vc" + 18B]
  # DEBUG thisD.56679 => &D.45820
  # DEBUG __begD.56680 => "write_reply_end_vc"
  # DEBUG __endD.56681 => &MEM[(voidD.45 *)"write_reply_end_vc" + 18B]
  # DEBUG __ptrD.52815 => "write_reply_end_vc"
  # DEBUG __firstD.56705 => "write_reply_end_vc"
  # DEBUG __lastD.56704 => &MEM[(voidD.45 *)"write_reply_end_vc" + 18B]
  # DEBUG D#109ptD.0 => &__firstD.56705
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.56707 => "write_reply_end_vc"
  # DEBUG __lastD.56706 => &MEM[(voidD.45 *)"write_reply_end_vc" + 18B]
  # .MEM_1915 = VDEF <.MEM_1914>
  __dnewD.56682 = 18;
  # .MEM_1916 = VDEF <.MEM_1915>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _858 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.45820, &__dnewD.56682, 0);
  # DEBUG D#5ptD.0 => &D.45820
  # DEBUG __pD.56701 => _858
  # DEBUG thisD.56700 => D#5ptD.0
  # .MEM_1917 = VDEF <.MEM_1916>
  MEM[(charD.10 * *)&D.45820] = _858;
  # VUSE <.MEM_1917>
  __dnew.173_859 = __dnewD.56682;
  # DEBUG D#6ptD.0 => &D.45820
  # DEBUG __capacityD.56703 => __dnew.173_859
  # DEBUG thisD.56702 => D#6ptD.0
  # .MEM_1918 = VDEF <.MEM_1917>
  MEM[(size_typeD.14319 *)&D.45820 + 16B] = __dnew.173_859;
  # DEBUG D#3ptD.0 => &D.45820
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.56685 => _858
  # DEBUG __k1D.56684 => "write_reply_end_vc"
  # DEBUG __k2D.56683 => &MEM[(voidD.45 *)"write_reply_end_vc" + 18B]
  # DEBUG __dD.56688 => _858
  # DEBUG __sD.56687 => "write_reply_end_vc"
  # DEBUG __nD.56686 => 18
  # DEBUG __s1D.56691 => _858
  # DEBUG __s2D.56690 => "write_reply_end_vc"
  # DEBUG __nD.56689 => 18
  # .MEM_1920 = VDEF <.MEM_1918>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (_858, "write_reply_end_vc", 18);
  # VUSE <.MEM_1920>
  __dnew.173_862 = __dnewD.56682;
  # DEBUG thisD.56695 => &D.45820
  # DEBUG __nD.56694 => __dnew.173_862
  # DEBUG D#7ptD.0 => &D.45820
  # DEBUG __lengthD.56697 => __dnew.173_862
  # DEBUG thisD.56696 => D#7ptD.0
  # .MEM_1921 = VDEF <.MEM_1920>
  MEM[(size_typeD.14319 *)&D.45820 + 8B] = __dnew.173_862;
  # VUSE <.MEM_1921>
  # PT = nonlocal escaped null { D.45820 } (escaped)
  _863 = MEM[(charD.10 * *)&D.45820];
  # DEBUG D#3ptD.0 => &D.45820
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.45820 } (escaped)
  _864 = _863 + __dnew.173_862;
  # DEBUG __c1D.56699 => _864
  # DEBUG __c2D.56698 => D#11ptD.0
  # .MEM_1922 = VDEF <.MEM_1921>
  MEM[(char_typeD.10931 &)_864] = 0;
  # .MEM_1923 = VDEF <.MEM_1922>
  __dnewD.56682 ={v} {CLOBBER};
  [LP 18] # .MEM_95 = VDEF <.MEM_1923>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _96 = _ZNK13Configuration6GetIntERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED.39467 (config_12(D), &D.45820);
;;    succ:       390 (EH,EXECUTABLE)
;;                41 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 41, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 40, next block 42, flags: (NEW, REACHABLE)
;;    pred:       40 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_97 = VDEF <.MEM_95>
  gWriteReplyEndVCD.42085 = _96;
  # DEBUG thisD.53498 => &D.45820
  # DEBUG thisD.53499 => &D.45820
  # DEBUG thisD.53508 => &D.45820
  # VUSE <.MEM_97>
  # PT = nonlocal escaped null { D.45820 } (escaped)
  _99 = MEM[(charD.10 * *)&D.45820];
  # DEBUG D#3ptD.0 => &D.45820
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53509 => &D.45820
  if (&D.45820.D.14356._M_local_bufD.14358 != _99)
    goto <bb 42>;
  else
    goto <bb 43>;
;;    succ:       42 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                43 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 42, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 41, next block 43, flags: (NEW, REACHABLE)
;;    pred:       41 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45820.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53501 => &D.45820
  # DEBUG __sizeD.53500 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45820
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45820
  # DEBUG D#51ptD.0 => &D.45820._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53504 => _99
  # DEBUG __aD.53502 => D#49ptD.0
  # DEBUG __nD.53503 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53507 => _99
  # DEBUG thisD.53505 => D#45ptD.0
  # DEBUG D.53506 => D#46ptD.0
  # .MEM_421 = VDEF <.MEM_97>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_99);
  # VUSE <.MEM_421>
  pretmp_613 = gWriteReplyEndVCD.42085;
;;    succ:       43 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 43, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 42, next block 44, flags: (NEW, REACHABLE)
;;    pred:       41 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                42 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_216 = PHI <.MEM_97(41), .MEM_421(42)>
  # prephitmp_614 = PHI <_96(41), pretmp_613(42)>
  # DEBUG D#55ptD.0 => &D.45820._M_dataplusD.14336
  # DEBUG thisD.53510 => D#55ptD.0
  # DEBUG thisD.53511 => D#55ptD.0
  # DEBUG thisD.53512 => D#55ptD.0
  # .MEM_98 = VDEF <.MEM_216>
  D.45820 ={v} {CLOBBER};
  # DEBUG thisD.53496 => &D.45819
  # DEBUG thisD.53497 => &D.45819
  if (prephitmp_614 < 0)
    goto <bb 44>;
  else
    goto <bb 45>;
;;    succ:       44 [27.0%]  (TRUE_VALUE,EXECUTABLE)
;;                45 [73.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 44, loop depth 0, count 0, freq 243, maybe hot
;;    prev block 43, next block 45, flags: (NEW, REACHABLE)
;;    pred:       43 [27.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_98>
  gNumVCs.145_101 = gNumVCsD.42077;
  gReadReplyEndVC.156_102 = gNumVCs.145_101 + -1;
  # .MEM_103 = VDEF <.MEM_98>
  gWriteReplyEndVCD.42085 = gReadReplyEndVC.156_102;
;;    succ:       45 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 45, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 44, next block 46, flags: (NEW, REACHABLE)
;;    pred:       43 [73.0%]  (FALSE_VALUE,EXECUTABLE)
;;                44 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_8 = PHI <.MEM_98(43), .MEM_103(44)>
  # DEBUG D#30ptD.0 => &D.45822
  # DEBUG thisD.53513 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45822
  # DEBUG thisD.56708 => &D.45823
  # DEBUG __sD.56709 => "nca_fattree"
  # DEBUG __aD.56710 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.56720 => &D.45823
  # DEBUG D#66ptD.0 => &D.45823._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.56723 => D#66ptD.0
  # DEBUG __datD.56722 => &D.45823.D.14356._M_local_bufD.14358
  # DEBUG __aD.56721 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_1924 = VDEF <.MEM_8>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45823]._M_pD.14342 = &D.45823.D.14356._M_local_bufD.14358;
  # DEBUG __sD.56719 => "nca_fattree"
  # DEBUG thisD.56713 => &D.45823
  # DEBUG __begD.56712 => "nca_fattree"
  # DEBUG __endD.56711 => &MEM[(voidD.45 *)"nca_fattree" + 11B]
  # DEBUG thisD.56717 => &D.45823
  # DEBUG __begD.56716 => "nca_fattree"
  # DEBUG __endD.56715 => &MEM[(voidD.45 *)"nca_fattree" + 11B]
  # DEBUG thisD.56724 => &D.45823
  # DEBUG __begD.56725 => "nca_fattree"
  # DEBUG __endD.56726 => &MEM[(voidD.45 *)"nca_fattree" + 11B]
  # DEBUG __ptrD.52815 => "nca_fattree"
  # DEBUG __firstD.56750 => "nca_fattree"
  # DEBUG __lastD.56749 => &MEM[(voidD.45 *)"nca_fattree" + 11B]
  # DEBUG D#109ptD.0 => &__firstD.56750
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.56752 => "nca_fattree"
  # DEBUG __lastD.56751 => &MEM[(voidD.45 *)"nca_fattree" + 11B]
  # DEBUG __dnewD.56727 => 11
  # DEBUG D#3ptD.0 => &D.45823
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.56730 => &D.45823.D.14356._M_local_bufD.14358
  # DEBUG __k1D.56729 => "nca_fattree"
  # DEBUG __k2D.56728 => &MEM[(voidD.45 *)"nca_fattree" + 11B]
  # DEBUG __dD.56733 => &D.45823.D.14356._M_local_bufD.14358
  # DEBUG __sD.56732 => "nca_fattree"
  # DEBUG __nD.56731 => 11
  # DEBUG __s1D.56736 => &D.45823.D.14356._M_local_bufD.14358
  # DEBUG __s2D.56735 => "nca_fattree"
  # DEBUG __nD.56734 => 11
  # .MEM_1930 = VDEF <.MEM_1924>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&D.45823.D.14356._M_local_bufD.14358, "nca_fattree", 11);
  # DEBUG thisD.56740 => &D.45823
  # DEBUG __nD.56739 => 11
  # DEBUG D#7ptD.0 => &D.45823
  # DEBUG __lengthD.56742 => 11
  # DEBUG thisD.56741 => D#7ptD.0
  # .MEM_1931 = VDEF <.MEM_1930>
  MEM[(size_typeD.14319 *)&D.45823 + 8B] = 11;
  # DEBUG D#3ptD.0 => &D.45823
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.56744 => &MEM[(voidD.45 *)&D.45823 + 27B]
  # DEBUG __c2D.56743 => D#11ptD.0
  # .MEM_1932 = VDEF <.MEM_1931>
  MEM[(char_typeD.10931 &)&D.45823 + 27] = 0;
  # DEBUG D#379ptD.0 => {CLOBBER}
  # DEBUG __dnewD.56727 => D#379ptD.0
  [LP 20] # .MEM_106 = VDEF <.MEM_1932>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _107 = _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPK6RouterPK4FlitiP9OutputSetbESt4lessIS5_ESaISt4pairIKS5_SF_EEEixERSJ_.constprop.56D.54544 (&D.45823);
;;    succ:       393 (EH,EXECUTABLE)
;;                46 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 46, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 45, next block 47, flags: (NEW, REACHABLE)
;;    pred:       45 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_108 = VDEF <.MEM_106>
  *_107 = _Z11fattree_ncaPK6RouterPK4FlitiP9OutputSetbD.45410;
  # DEBUG thisD.53517 => &D.45823
  # DEBUG thisD.53518 => &D.45823
  # DEBUG thisD.53527 => &D.45823
  # VUSE <.MEM_108>
  # PT = nonlocal escaped { D.45823 } (escaped)
  _110 = MEM[(charD.10 * *)&D.45823];
  # DEBUG D#3ptD.0 => &D.45823
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53528 => &D.45823
  if (&D.45823.D.14356._M_local_bufD.14358 != _110)
    goto <bb 47>;
  else
    goto <bb 48>;
;;    succ:       47 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                48 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 47, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 46, next block 48, flags: (NEW, REACHABLE)
;;    pred:       46 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45823.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53520 => &D.45823
  # DEBUG __sizeD.53519 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45823
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45823
  # DEBUG D#51ptD.0 => &D.45823._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53523 => _110
  # DEBUG __aD.53521 => D#49ptD.0
  # DEBUG __nD.53522 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53526 => _110
  # DEBUG thisD.53524 => D#45ptD.0
  # DEBUG D.53525 => D#46ptD.0
  # .MEM_426 = VDEF <.MEM_108>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_110);
;;    succ:       48 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 48, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 47, next block 49, flags: (NEW, REACHABLE)
;;    pred:       46 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                47 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_209 = PHI <.MEM_108(46), .MEM_426(47)>
  # DEBUG D#55ptD.0 => &D.45823._M_dataplusD.14336
  # DEBUG thisD.53529 => D#55ptD.0
  # DEBUG thisD.53530 => D#55ptD.0
  # DEBUG thisD.53531 => D#55ptD.0
  # .MEM_109 = VDEF <.MEM_209>
  D.45823 ={v} {CLOBBER};
  # DEBUG thisD.53515 => &D.45822
  # DEBUG thisD.53516 => &D.45822
  # DEBUG D#30ptD.0 => &D.45825
  # DEBUG thisD.53514 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45825
  # DEBUG thisD.56829 => &D.45826
  # DEBUG __sD.56830 => "anca_fattree"
  # DEBUG __aD.56831 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.56841 => &D.45826
  # DEBUG D#66ptD.0 => &D.45826._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.56844 => D#66ptD.0
  # DEBUG __datD.56843 => &D.45826.D.14356._M_local_bufD.14358
  # DEBUG __aD.56842 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_1934 = VDEF <.MEM_109>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45826]._M_pD.14342 = &D.45826.D.14356._M_local_bufD.14358;
  # DEBUG __sD.56840 => "anca_fattree"
  # DEBUG thisD.56834 => &D.45826
  # DEBUG __begD.56833 => "anca_fattree"
  # DEBUG __endD.56832 => &MEM[(voidD.45 *)"anca_fattree" + 12B]
  # DEBUG thisD.56838 => &D.45826
  # DEBUG __begD.56837 => "anca_fattree"
  # DEBUG __endD.56836 => &MEM[(voidD.45 *)"anca_fattree" + 12B]
  # DEBUG thisD.56845 => &D.45826
  # DEBUG __begD.56846 => "anca_fattree"
  # DEBUG __endD.56847 => &MEM[(voidD.45 *)"anca_fattree" + 12B]
  # DEBUG __ptrD.52815 => "anca_fattree"
  # DEBUG __firstD.56871 => "anca_fattree"
  # DEBUG __lastD.56870 => &MEM[(voidD.45 *)"anca_fattree" + 12B]
  # DEBUG D#109ptD.0 => &__firstD.56871
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.56873 => "anca_fattree"
  # DEBUG __lastD.56872 => &MEM[(voidD.45 *)"anca_fattree" + 12B]
  # DEBUG __dnewD.56848 => 12
  # DEBUG D#3ptD.0 => &D.45826
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.56851 => &D.45826.D.14356._M_local_bufD.14358
  # DEBUG __k1D.56850 => "anca_fattree"
  # DEBUG __k2D.56849 => &MEM[(voidD.45 *)"anca_fattree" + 12B]
  # DEBUG __dD.56854 => &D.45826.D.14356._M_local_bufD.14358
  # DEBUG __sD.56853 => "anca_fattree"
  # DEBUG __nD.56852 => 12
  # DEBUG __s1D.56857 => &D.45826.D.14356._M_local_bufD.14358
  # DEBUG __s2D.56856 => "anca_fattree"
  # DEBUG __nD.56855 => 12
  # .MEM_1940 = VDEF <.MEM_1934>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&D.45826.D.14356._M_local_bufD.14358, "anca_fattree", 12);
  # DEBUG thisD.56861 => &D.45826
  # DEBUG __nD.56860 => 12
  # DEBUG D#7ptD.0 => &D.45826
  # DEBUG __lengthD.56863 => 12
  # DEBUG thisD.56862 => D#7ptD.0
  # .MEM_1941 = VDEF <.MEM_1940>
  MEM[(size_typeD.14319 *)&D.45826 + 8B] = 12;
  # DEBUG D#3ptD.0 => &D.45826
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.56865 => &MEM[(voidD.45 *)&D.45826 + 28B]
  # DEBUG __c2D.56864 => D#11ptD.0
  # .MEM_1942 = VDEF <.MEM_1941>
  MEM[(char_typeD.10931 &)&D.45826 + 28] = 0;
  # DEBUG D#380ptD.0 => {CLOBBER}
  # DEBUG __dnewD.56848 => D#380ptD.0
  # DEBUG __kD.56753 => &D.45826
  # DEBUG thisD.56755 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG thisD.56818 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG __xD.56817 => &D.45826
  # DEBUG thisD.56874 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __kD.56875 => &D.45826
  # DEBUG thisD.56876 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # VUSE <.MEM_1942>
  # PT = nonlocal escaped 
  __i$_M_node_911 = MEM[(struct _Rb_tree_node_baseD.6878 * *)&_Z19gRoutingFunctionMapB5cxx11D.42076 + 16B];
  # DEBUG D#31ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG thisD.52518 => D#31ptD.0
  # DEBUG D#96ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __xD.56880 => NULL
  # DEBUG __yD.56879 => NULL
  # DEBUG __kD.56878 => &D.45826
  # DEBUG __yD.56879 => &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732
  # DEBUG __xD.56880 => __i$_M_node_911
  if (__i$_M_node_911 == 0B)
    goto <bb 472>;
  else
    goto <bb 51>;
;;    succ:       472 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                51 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 49, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 48, next block 50, flags: (NEW, REACHABLE)
;;    pred:       57 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                58 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_1465 = PHI <__i$_M_node_915(57), __i$_M_node_916(58)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1464 = PHI <__i$_M_node_872(57), __i$_M_node_876(58)>
  # DEBUG __yD.56879 => __i$_M_node_1464
  # DEBUG __xD.56880 => __i$_M_node_1465
  if (__i$_M_node_1465 == 0B)
    goto <bb 59>;
  else
    goto <bb 50>;
;;    succ:       59 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                50 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 50, loop depth 1, count 0, freq 8281, maybe hot
;;    prev block 49, next block 51, flags: (NEW)
;;    pred:       49 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 52>;
;;    succ:       52 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 51, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 50, next block 52, flags: (NEW, REACHABLE)
;;    pred:       48 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       52 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 52, loop depth 1, count 0, freq 9100, maybe hot
;;    prev block 51, next block 53, flags: (NEW)
;;    pred:       51 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                50 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_872 = PHI <__i$_M_node_911(51), __i$_M_node_1465(50)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_876 = PHI <&MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732(51), __i$_M_node_1464(50)>
  # .MEM_1505 = PHI <.MEM_1942(51), .MEM_1505(50)>
  # DEBUG __yD.56879 => __i$_M_node_876
  # DEBUG __xD.56880 => __i$_M_node_872
  # DEBUG __xD.56881 => __i$_M_node_872
  # DEBUG __xD.52453 => __i$_M_node_872
  # DEBUG thisD.52454 => __i$_M_node_872
  # DEBUG D#93ptD.0 => &MEM[(const struct _Rb_tree_nodeD.44503 *)__i$_M_node_872]._M_value_fieldD.46493
  # DEBUG __rD.52444 => D#93ptD.0
  # DEBUG __xD.56883 => D#93ptD.0
  # DEBUG thisD.56882 => D#60ptD.0
  # DEBUG D#360ptD.0 => &MEM[(const struct pairD.42073 &)__i$_M_node_872 + 32].firstD.46174
  # DEBUG D#94ptD.0 => &D#95ptD.0->_M_implD.44577._M_key_compareD.44731
  # DEBUG D#59ptD.0 => D#94ptD.0
  # DEBUG __xD.56886 => D#360ptD.0
  # DEBUG __yD.56885 => &D.45826
  # DEBUG thisD.56884 => D#59ptD.0
  # DEBUG __lhsD.56888 => D#360ptD.0
  # DEBUG __rhsD.56887 => &D.45826
  # DEBUG thisD.56890 => D#360ptD.0
  # DEBUG __strD.56891 => &D.45826
  # VUSE <.MEM_1505>
  _920 = MEM[(long unsigned intD.14 *)__i$_M_node_872 + 40B];
  # DEBUG D#1ptD.0 => D#360ptD.0
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.56892 => _920
  # DEBUG D#1ptD.0 => &D.45826
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.56893 => 12
  # DEBUG __aD.56900 => &__sizeD.56892
  # DEBUG __bD.56899 => &__osizeD.56893
  # RANGE [0, 12] NONZERO 15
  __len_2064 = MIN_EXPR <_920, 12>;
  # DEBUG __lenD.56894 => D#342ptD.0
  # DEBUG thisD.51798 => &D.45826
  # DEBUG D#3ptD.0 => &D.45826
  # DEBUG thisD.50676 => D#3ptD.0
  # VUSE <.MEM_1505>
  # PT = nonlocal escaped 
  _925 = MEM[(charD.10 * *)__i$_M_node_872 + 32B];
  # DEBUG D#3ptD.0 => D#360ptD.0
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.56903 => _925
  # DEBUG __s2D.56902 => &D.45826.D.14356._M_local_bufD.14358
  # DEBUG __nD.56901 => D#342ptD.0
  # VUSE <.MEM_1505>
  # USE = nonlocal escaped null { D.45826 } (escaped)
  __r_926 = memcmpD.989 (_925, &D.45826.D.14356._M_local_bufD.14358, __len_2064);
  # DEBUG __rD.56895 => NULL
  if (__r_926 == 0)
    goto <bb 53>;
  else
    goto <bb 56>;
;;    succ:       53 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                56 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 53, loop depth 1, count 0, freq 5551, maybe hot
;;    prev block 52, next block 54, flags: (NEW, REACHABLE)
;;    pred:       52 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.56897 => _920
  # DEBUG __n2D.56896 => 12
  # RANGE [0, 18446744073709551615]
  _927 = _920 - 12;
  __d_928 = (const difference_typeD.14320) _927;
  # DEBUG __dD.56898 => __d_928
  if (__d_928 > 2147483647)
    goto <bb 57>;
  else
    goto <bb 54>;
;;    succ:       57 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                54 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 54, loop depth 1, count 0, freq 2776, maybe hot
;;    prev block 53, next block 55, flags: (NEW, REACHABLE)
;;    pred:       53 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_928 < -2147483648)
    goto <bb 58>;
  else
    goto <bb 55>;
;;    succ:       58 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                55 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 55, loop depth 1, count 0, freq 1388, maybe hot
;;    prev block 54, next block 56, flags: (NEW, REACHABLE)
;;    pred:       54 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_929 = (intD.9) _927;
;;    succ:       56 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 56, loop depth 1, count 0, freq 4936, maybe hot
;;    prev block 55, next block 57, flags: (NEW, REACHABLE)
;;    pred:       52 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                55 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_930 = PHI <__r_926(52), __r_929(55)>
  # DEBUG __rD.56895 => __r_930
  # DEBUG D#385ptD.0 => {CLOBBER}
  # DEBUG __sizeD.56892 => D#385ptD.0
  # DEBUG D#386ptD.0 => {CLOBBER}
  # DEBUG __osizeD.56893 => D#386ptD.0
  if (__r_930 >= 0)
    goto <bb 57>;
  else
    goto <bb 58>;
;;    succ:       57 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                58 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 57, loop depth 1, count 0, freq 6643, maybe hot
;;    prev block 56, next block 58, flags: (NEW, REACHABLE)
;;    pred:       56 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                53 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.56895 => NULL
  # DEBUG __yD.56879 => __i$_M_node_872
  # VUSE <.MEM_1505>
  # PT = nonlocal escaped 
  __i$_M_node_915 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__i$_M_node_872 + 16B];
  # DEBUG D#37ptD.0 => __i$_M_node_872
  # DEBUG __xD.52486 => D#37ptD.0
  # DEBUG __xD.56880 => NULL
  goto <bb 49>;
;;    succ:       49 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 58, loop depth 1, count 0, freq 2457, maybe hot
;;    prev block 57, next block 59, flags: (NEW, REACHABLE)
;;    pred:       56 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                54 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.56895 => NULL
  # VUSE <.MEM_1505>
  # PT = nonlocal escaped 
  __i$_M_node_916 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__i$_M_node_872 + 24B];
  # DEBUG D#36ptD.0 => __i$_M_node_872
  # DEBUG __xD.52485 => D#36ptD.0
  # DEBUG __xD.56880 => NULL
  goto <bb 49>;
;;    succ:       49 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 59, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 58, next block 60, flags: (NEW, REACHABLE)
;;    pred:       49 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_2379 = PHI <__i$_M_node_1464(49)>
  # DEBUG thisD.52484 => NULL
  # DEBUG __xD.52483 => __i$_M_node_2379
  # DEBUG __i$_M_nodeD.56824 => __i$_M_node_2379
  # DEBUG thisD.56819 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG D#44ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG thisD.56820 => D#44ptD.0
  # DEBUG thisD.51662 => NULL
  # DEBUG __xD.51661 => &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732
  # DEBUG thisD.53255 => &__iD.56754
  # DEBUG __xD.53256 => NULL
  if (__i$_M_node_2379 == &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732)
    goto <bb 472>;
  else
    goto <bb 60>;
;;    succ:       472 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                60 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 60, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 59, next block 61, flags: (NEW, REACHABLE)
;;    pred:       59 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.53275 => &__iD.56754
  # DEBUG thisD.53276 => __i$_M_node_2379
  # DEBUG D#144ptD.0 => &MEM[(struct _Rb_tree_nodeD.44503 *)__i$_M_node_2379]._M_value_fieldD.46493
  # DEBUG __rD.51667 => D#144ptD.0
  # DEBUG D#361ptD.0 => &MEM[(struct pairD.42073 &)__i$_M_node_2379 + 32].firstD.46174
  # DEBUG D#35ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG thisD.53272 => D#35ptD.0
  # DEBUG D#34ptD.0 => D#35ptD.0
  # DEBUG D#33ptD.0 => &D#34ptD.0->_M_tD.44500
  # DEBUG D#32ptD.0 => D#33ptD.0
  # DEBUG thisD.51597 => D#32ptD.0
  # DEBUG __xD.56814 => &D.45826
  # DEBUG __yD.56813 => D#361ptD.0
  # DEBUG thisD.56812 => D#59ptD.0
  # DEBUG __lhsD.56816 => &D.45826
  # DEBUG __rhsD.56815 => D#361ptD.0
  # DEBUG thisD.56905 => &D.45826
  # DEBUG __strD.56906 => D#361ptD.0
  # DEBUG D#1ptD.0 => &D.45826
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.56907 => 12
  # VUSE <.MEM_1505>
  _933 = MEM[(long unsigned intD.14 *)__i$_M_node_2379 + 40B];
  # DEBUG D#1ptD.0 => D#361ptD.0
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.56908 => _933
  # DEBUG __aD.56915 => &__sizeD.56907
  # DEBUG __bD.56914 => &__osizeD.56908
  if (_933 <= 11)
    goto <bb 62>;
  else
    goto <bb 61>;
;;    succ:       62 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                61 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 61, loop depth 0, count 0, freq 383, maybe hot
;;    prev block 60, next block 62, flags: (NEW)
;;    pred:       60 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       62 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 62, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 61, next block 63, flags: (NEW, REACHABLE)
;;    pred:       60 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                61 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 12] NONZERO 15
  # __len_935 = PHI <_933(60), 12(61)>
  # DEBUG __lenD.56909 => D#343ptD.0
  # DEBUG thisD.51798 => D#361ptD.0
  # VUSE <.MEM_1505>
  # PT = nonlocal escaped 
  _936 = MEM[(charD.10 * *)__i$_M_node_2379 + 32B];
  # DEBUG D#3ptD.0 => D#361ptD.0
  # DEBUG thisD.50676 => D#3ptD.0
  # DEBUG D#3ptD.0 => &D.45826
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.56918 => &D.45826.D.14356._M_local_bufD.14358
  # DEBUG __s2D.56917 => _936
  # DEBUG __nD.56916 => D#343ptD.0
  # VUSE <.MEM_1505>
  # USE = nonlocal escaped null { D.45826 } (escaped)
  __r_938 = memcmpD.989 (&D.45826.D.14356._M_local_bufD.14358, _936, __len_935);
  # DEBUG __rD.56910 => NULL
  if (__r_938 == 0)
    goto <bb 63>;
  else
    goto <bb 66>;
;;    succ:       63 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                66 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 63, loop depth 0, count 0, freq 467, maybe hot
;;    prev block 62, next block 64, flags: (NEW, REACHABLE)
;;    pred:       62 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.56912 => 12
  # DEBUG __n2D.56911 => _933
  # RANGE [0, 18446744073709551615]
  _939 = 12 - _933;
  __d_940 = (const difference_typeD.14320) _939;
  # DEBUG __dD.56913 => __d_940
  if (__d_940 > 2147483647)
    goto <bb 71>;
  else
    goto <bb 64>;
;;    succ:       71 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                64 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 64, loop depth 0, count 0, freq 233, maybe hot
;;    prev block 63, next block 65, flags: (NEW, REACHABLE)
;;    pred:       63 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_940 < -2147483648)
    goto <bb 67>;
  else
    goto <bb 65>;
;;    succ:       67 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                65 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 65, loop depth 0, count 0, freq 117, maybe hot
;;    prev block 64, next block 66, flags: (NEW, REACHABLE)
;;    pred:       64 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_941 = (intD.9) _939;
;;    succ:       66 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 66, loop depth 0, count 0, freq 414, maybe hot
;;    prev block 65, next block 67, flags: (NEW, REACHABLE)
;;    pred:       62 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                65 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_942 = PHI <__r_938(62), __r_941(65)>
  # DEBUG __rD.56910 => __r_942
  # DEBUG D#391ptD.0 => {CLOBBER}
  # DEBUG __sizeD.56907 => D#391ptD.0
  # DEBUG D#392ptD.0 => {CLOBBER}
  # DEBUG __osizeD.56908 => D#392ptD.0
  if (__r_942 < 0)
    goto <bb 472>;
  else
    goto <bb 71>;
;;    succ:       472 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                71 [78.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 67, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 66, next block 68, flags: (NEW, REACHABLE)
;;    pred:       64 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                472 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2131 = PHI <.MEM_1505(64), .MEM_1444(472)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1394 = PHI <__i$_M_node_2379(64), __i$_M_node_1406(472)>
  # DEBUG thisD.56797 => &D.56827
  # DEBUG __aD.56796 => &D.45826
  # DEBUG __bD.56795 => NULL
  # DEBUG thisD.56799 => &D.56827.firstD.46174
  # DEBUG __strD.56798 => &D.45826
  # DEBUG thisD.52863 => &D.45826
  # DEBUG D#113ptD.0 => &D.45826._M_dataplusD.14336
  # DEBUG thisD.56800 => &D.56827.firstD.46174
  # DEBUG D#114ptD.0 => &MEM[(struct basic_stringD.9877 *)&D.56827]._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#113ptD.0
  # DEBUG thisD.56803 => D#114ptD.0
  # DEBUG __datD.56802 => &MEM[(struct basic_stringD.9877 *)&D.56827].D.14356._M_local_bufD.14358
  # DEBUG __aD.56801 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#114ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_1956 = VDEF <.MEM_2131>
  MEM[(struct _Alloc_hiderD.14335 *)&D.56827]._M_pD.14342 = &MEM[(struct basic_stringD.9877 *)&D.56827].D.14356._M_local_bufD.14358;
  # DEBUG D#3ptD.0 => &D.45826
  # DEBUG thisD.52856 => D#3ptD.0
  # DEBUG D#4ptD.0 => &D.45826
  # DEBUG thisD.52853 => D#4ptD.0
  # DEBUG D#3ptD.0 => &D.45826
  # DEBUG thisD.52850 => D#3ptD.0
  # DEBUG thisD.56806 => &D.56827.firstD.46174
  # DEBUG __begD.56805 => &D.45826.D.14356._M_local_bufD.14358
  # DEBUG __endD.56804 => &MEM[(voidD.45 *)&D.45826 + 28B]
  # DEBUG thisD.56810 => &D.56827.firstD.46174
  # DEBUG __begD.56809 => &D.45826.D.14356._M_local_bufD.14358
  # DEBUG __endD.56808 => &MEM[(voidD.45 *)&D.45826 + 28B]
  # DEBUG thisD.56920 => &D.56827.firstD.46174
  # DEBUG __begD.56921 => &D.45826.D.14356._M_local_bufD.14358
  # DEBUG __endD.56922 => &MEM[(voidD.45 *)&D.45826 + 28B]
  # DEBUG __ptrD.52815 => &D.45826.D.14356._M_local_bufD.14358
  # DEBUG __firstD.56946 => &D.45826.D.14356._M_local_bufD.14358
  # DEBUG __lastD.56945 => &MEM[(voidD.45 *)&D.45826 + 28B]
  # DEBUG D#109ptD.0 => &__firstD.56946
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.56948 => &D.45826.D.14356._M_local_bufD.14358
  # DEBUG __lastD.56947 => &MEM[(voidD.45 *)&D.45826 + 28B]
  # DEBUG __dnewD.56923 => 12
  # DEBUG D#3ptD.0 => &D.56827.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.56926 => &MEM[(struct basic_stringD.9877 *)&D.56827].D.14356._M_local_bufD.14358
  # DEBUG __k1D.56925 => &D.45826.D.14356._M_local_bufD.14358
  # DEBUG __k2D.56924 => &MEM[(voidD.45 *)&D.45826 + 28B]
  # DEBUG __dD.56929 => &MEM[(struct basic_stringD.9877 *)&D.56827].D.14356._M_local_bufD.14358
  # DEBUG __sD.56928 => &D.45826.D.14356._M_local_bufD.14358
  # DEBUG __nD.56927 => 12
  # DEBUG __s1D.56932 => &MEM[(struct basic_stringD.9877 *)&D.56827].D.14356._M_local_bufD.14358
  # DEBUG __s2D.56931 => &D.45826.D.14356._M_local_bufD.14358
  # DEBUG __nD.56930 => 12
  # .MEM_1962 = VDEF <.MEM_1956>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&MEM[(struct basic_stringD.9877 *)&D.56827].D.14356._M_local_bufD.14358, &D.45826.D.14356._M_local_bufD.14358, 12);
  # DEBUG thisD.56936 => &D.56827.firstD.46174
  # DEBUG __nD.56935 => 12
  # DEBUG D#7ptD.0 => &D.56827.firstD.46174
  # DEBUG __lengthD.56938 => 12
  # DEBUG thisD.56937 => D#7ptD.0
  # .MEM_1963 = VDEF <.MEM_1962>
  MEM[(size_typeD.14319 *)&D.56827 + 8B] = 12;
  # DEBUG D#3ptD.0 => &D.56827.firstD.46174
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.56940 => &MEM[(voidD.45 *)&D.56827 + 28B]
  # DEBUG __c2D.56939 => D#11ptD.0
  # .MEM_1964 = VDEF <.MEM_1963>
  MEM[(char_typeD.10931 &)&D.56827 + 28] = 0;
  # DEBUG D#393ptD.0 => {CLOBBER}
  # DEBUG __dnewD.56923 => D#393ptD.0
  # .MEM_1966 = VDEF <.MEM_1964>
  D.56827.secondD.46175 = 0B;
  # DEBUG thisD.56790 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG __position$_M_nodeD.53347 => __i$_M_node_1394
  # DEBUG __xD.56788 => &D.56827
  # DEBUG thisD.53299 => NULL
  # DEBUG __itD.53298 => &__positionD.56789
  # DEBUG thisD.56793 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # .MEM_1967 = VDEF <.MEM_1966>
  MEM[(struct _Rb_tree_const_iteratorD.44806 *)&__posD.56792] = __i$_M_node_1394;
  # DEBUG __xD.56791 => &D.56827
  # DEBUG thisD.53249 => &__anD.56794
  # DEBUG __tD.53248 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __an$_M_tD.53242 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG D#143ptD.0 => &__anD.56794
  [LP 69] # .MEM_1968 = VDEF <.MEM_1967>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  D.56825 = _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPK6RouterPK4FlitiP9OutputSetbEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_INSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_ERKSI_RT_.isra.54.constprop.57D.54545 (&_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500, __posD.56792, &D.56827);
;;    succ:       68 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                72 (EH,EXECUTABLE)

;;   basic block 68, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 67, next block 69, flags: (NEW, REACHABLE)
;;    pred:       67 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_1968>
  # PT = nonlocal escaped 
  __i$_M_node_890 = MEM[(struct _Rb_tree_iteratorD.44804 *)&D.56825];
  # DEBUG __i$_M_nodeD.56824 => __i$_M_node_890
  # DEBUG thisD.56772 => &D.56827
  # DEBUG D#56ptD.0 => &D.56827.firstD.46174
  # DEBUG thisD.56773 => D#56ptD.0
  # DEBUG thisD.56774 => D#56ptD.0
  # DEBUG thisD.56783 => D#56ptD.0
  # VUSE <.MEM_1968>
  # PT = nonlocal escaped null { D.45826 D.56827 } (escaped)
  _891 = MEM[(charD.10 * *)&D.56827];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.56784 => D#56ptD.0
  if (&MEM[(const struct basic_stringD.9877 *)&D.56827].D.14356._M_local_bufD.14358 != _891)
    goto <bb 69>;
  else
    goto <bb 70>;
;;    succ:       69 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                70 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 69, loop depth 0, count 0, freq 245, maybe hot
;;    prev block 68, next block 70, flags: (NEW, REACHABLE)
;;    pred:       68 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.56776 => D#56ptD.0
  # DEBUG __sizeD.56775 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.56779 => _891
  # DEBUG __aD.56777 => D#49ptD.0
  # DEBUG __nD.56778 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.56782 => _891
  # DEBUG thisD.56780 => D#45ptD.0
  # DEBUG D.56781 => D#46ptD.0
  # .MEM_1969 = VDEF <.MEM_1968>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_891);
;;    succ:       70 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 70, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 69, next block 71, flags: (NEW, REACHABLE)
;;    pred:       68 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                69 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1596 = PHI <.MEM_1968(68), .MEM_1969(69)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.56785 => D#55ptD.0
  # DEBUG thisD.56786 => D#55ptD.0
  # DEBUG thisD.56787 => D#55ptD.0
  # .MEM_1975 = VDEF <.MEM_1596>
  D.56827 ={v} {CLOBBER};
  # VUSE <.MEM_1975>
  pretmp_2242 = MEM[(charD.10 * *)&D.45826];
;;    succ:       71 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 71, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 70, next block 72, flags: (NEW, REACHABLE)
;;    pred:       63 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                70 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                66 [78.3%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_892 = PHI <__i$_M_node_2379(63), __i$_M_node_890(70), __i$_M_node_2379(66)>
  # .MEM_210 = PHI <.MEM_1505(63), .MEM_1975(70), .MEM_1505(66)>
  # PT = nonlocal escaped { D.45826 } (escaped)
  # prephitmp_2243 = PHI <&D.45826.D.14356._M_local_bufD.14358(63), pretmp_2242(70), &D.45826.D.14356._M_local_bufD.14358(66)>
  # DEBUG __i$_M_nodeD.56824 => __i$_M_node_892
  # DEBUG thisD.53323 => &__iD.56754
  # DEBUG thisD.53324 => __i$_M_node_892
  # DEBUG D#145ptD.0 => &MEM[(struct _Rb_tree_nodeD.44503 *)__i$_M_node_892]._M_value_fieldD.46493
  # DEBUG __rD.51667 => D#145ptD.0
  # DEBUG D#147ptD.0 => {CLOBBER}
  # DEBUG __i$_M_nodeD.56824 => D#147ptD.0
  # .MEM_115 = VDEF <.MEM_210>
  MEM[(voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) &)__i$_M_node_892 + 64] = _Z12fattree_ancaPK6RouterPK4FlitiP9OutputSetbD.45430;
  # DEBUG thisD.53535 => &D.45826
  # DEBUG thisD.53536 => &D.45826
  # DEBUG thisD.53545 => &D.45826
  # DEBUG D#546ptD.0 => MEM[(charD.10 * *)&D.45826]
  # DEBUG D#3ptD.0 => &D.45826
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53546 => &D.45826
  if (&D.45826.D.14356._M_local_bufD.14358 != prephitmp_2243)
    goto <bb 75>;
  else
    goto <bb 76>;
;;    succ:       75 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                76 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 72, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 71, next block 73, flags: (NEW, REACHABLE)
;;    pred:       67 (EH,EXECUTABLE)
<L92>: [LP 69]
  # DEBUG thisD.56756 => &D.56827
  # DEBUG D#56ptD.0 => &D.56827.firstD.46174
  # DEBUG thisD.56757 => D#56ptD.0
  # DEBUG thisD.56758 => D#56ptD.0
  # DEBUG thisD.56767 => D#56ptD.0
  # VUSE <.MEM_1968>
  # PT = nonlocal escaped null { D.45826 D.56827 } (escaped)
  _894 = MEM[(charD.10 * *)&D.56827];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.56768 => D#56ptD.0
  if (&MEM[(const struct basic_stringD.9877 *)&D.56827].D.14356._M_local_bufD.14358 != _894)
    goto <bb 73>;
  else
    goto <bb 74>;
;;    succ:       73 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                74 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 73, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 72, next block 74, flags: (NEW, REACHABLE)
;;    pred:       72 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.56760 => D#56ptD.0
  # DEBUG __sizeD.56759 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.56763 => _894
  # DEBUG __aD.56761 => D#49ptD.0
  # DEBUG __nD.56762 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.56766 => _894
  # DEBUG thisD.56764 => D#45ptD.0
  # DEBUG D.56765 => D#46ptD.0
  # .MEM_1976 = VDEF <.MEM_1968>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_894);
;;    succ:       74 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 74, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 73, next block 75, flags: (NEW, REACHABLE)
;;    pred:       72 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                73 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1535 = PHI <.MEM_1968(72), .MEM_1976(73)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.56769 => D#55ptD.0
  # DEBUG thisD.56770 => D#55ptD.0
  # DEBUG thisD.56771 => D#55ptD.0
  # .MEM_1982 = VDEF <.MEM_1535>
  D.56827 ={v} {CLOBBER};
  [LP 22] resx 137
;;    succ:       396 (EH,EXECUTABLE)

;;   basic block 75, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 74, next block 76, flags: (NEW, REACHABLE)
;;    pred:       71 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45826.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53538 => &D.45826
  # DEBUG __sizeD.53537 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45826
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45826
  # DEBUG D#51ptD.0 => &D.45826._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53541 => D#546ptD.0
  # DEBUG __aD.53539 => D#49ptD.0
  # DEBUG __nD.53540 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53544 => D#546ptD.0
  # DEBUG thisD.53542 => D#45ptD.0
  # DEBUG D.53543 => D#46ptD.0
  # .MEM_431 = VDEF <.MEM_115>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (prephitmp_2243);
;;    succ:       76 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 76, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 75, next block 77, flags: (NEW, REACHABLE)
;;    pred:       71 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                75 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_202 = PHI <.MEM_115(71), .MEM_431(75)>
  # DEBUG D#55ptD.0 => &D.45826._M_dataplusD.14336
  # DEBUG thisD.53547 => D#55ptD.0
  # DEBUG thisD.53548 => D#55ptD.0
  # DEBUG thisD.53549 => D#55ptD.0
  # .MEM_116 = VDEF <.MEM_202>
  D.45826 ={v} {CLOBBER};
  # DEBUG thisD.53533 => &D.45825
  # DEBUG thisD.53534 => &D.45825
  # DEBUG D#30ptD.0 => &D.45828
  # DEBUG thisD.53532 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45828
  # DEBUG thisD.56949 => &D.45829
  # DEBUG __sD.56950 => "nca_qtree"
  # DEBUG __aD.56951 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.56961 => &D.45829
  # DEBUG D#66ptD.0 => &D.45829._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.56964 => D#66ptD.0
  # DEBUG __datD.56963 => &D.45829.D.14356._M_local_bufD.14358
  # DEBUG __aD.56962 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_1985 = VDEF <.MEM_116>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45829]._M_pD.14342 = &D.45829.D.14356._M_local_bufD.14358;
  # DEBUG __sD.56960 => "nca_qtree"
  # DEBUG thisD.56954 => &D.45829
  # DEBUG __begD.56953 => "nca_qtree"
  # DEBUG __endD.56952 => &MEM[(voidD.45 *)"nca_qtree" + 9B]
  # DEBUG thisD.56958 => &D.45829
  # DEBUG __begD.56957 => "nca_qtree"
  # DEBUG __endD.56956 => &MEM[(voidD.45 *)"nca_qtree" + 9B]
  # DEBUG thisD.56965 => &D.45829
  # DEBUG __begD.56966 => "nca_qtree"
  # DEBUG __endD.56967 => &MEM[(voidD.45 *)"nca_qtree" + 9B]
  # DEBUG __ptrD.52815 => "nca_qtree"
  # DEBUG __firstD.56991 => "nca_qtree"
  # DEBUG __lastD.56990 => &MEM[(voidD.45 *)"nca_qtree" + 9B]
  # DEBUG D#109ptD.0 => &__firstD.56991
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.56993 => "nca_qtree"
  # DEBUG __lastD.56992 => &MEM[(voidD.45 *)"nca_qtree" + 9B]
  # DEBUG __dnewD.56968 => 9
  # DEBUG D#3ptD.0 => &D.45829
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.56971 => &D.45829.D.14356._M_local_bufD.14358
  # DEBUG __k1D.56970 => "nca_qtree"
  # DEBUG __k2D.56969 => &MEM[(voidD.45 *)"nca_qtree" + 9B]
  # DEBUG __dD.56974 => &D.45829.D.14356._M_local_bufD.14358
  # DEBUG __sD.56973 => "nca_qtree"
  # DEBUG __nD.56972 => 9
  # DEBUG __s1D.56977 => &D.45829.D.14356._M_local_bufD.14358
  # DEBUG __s2D.56976 => "nca_qtree"
  # DEBUG __nD.56975 => 9
  # .MEM_1991 = VDEF <.MEM_1985>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&D.45829.D.14356._M_local_bufD.14358, "nca_qtree", 9);
  # DEBUG thisD.56981 => &D.45829
  # DEBUG __nD.56980 => 9
  # DEBUG D#7ptD.0 => &D.45829
  # DEBUG __lengthD.56983 => 9
  # DEBUG thisD.56982 => D#7ptD.0
  # .MEM_1992 = VDEF <.MEM_1991>
  MEM[(size_typeD.14319 *)&D.45829 + 8B] = 9;
  # DEBUG D#3ptD.0 => &D.45829
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.56985 => &MEM[(voidD.45 *)&D.45829 + 25B]
  # DEBUG __c2D.56984 => D#11ptD.0
  # .MEM_1993 = VDEF <.MEM_1992>
  MEM[(char_typeD.10931 &)&D.45829 + 25] = 0;
  # DEBUG D#394ptD.0 => {CLOBBER}
  # DEBUG __dnewD.56968 => D#394ptD.0
  [LP 24] # .MEM_120 = VDEF <.MEM_1993>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _121 = _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPK6RouterPK4FlitiP9OutputSetbESt4lessIS5_ESaISt4pairIKS5_SF_EEEixERSJ_.constprop.56D.54544 (&D.45829);
;;    succ:       399 (EH,EXECUTABLE)
;;                77 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 77, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 76, next block 78, flags: (NEW, REACHABLE)
;;    pred:       76 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_122 = VDEF <.MEM_120>
  *_121 = _Z9qtree_ncaPK6RouterPK4FlitiP9OutputSetbD.45359;
  # DEBUG thisD.53553 => &D.45829
  # DEBUG thisD.53554 => &D.45829
  # DEBUG thisD.53563 => &D.45829
  # VUSE <.MEM_122>
  # PT = nonlocal escaped { D.45829 } (escaped)
  _124 = MEM[(charD.10 * *)&D.45829];
  # DEBUG D#3ptD.0 => &D.45829
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53564 => &D.45829
  if (&D.45829.D.14356._M_local_bufD.14358 != _124)
    goto <bb 78>;
  else
    goto <bb 79>;
;;    succ:       78 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                79 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 78, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 77, next block 79, flags: (NEW, REACHABLE)
;;    pred:       77 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45829.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53556 => &D.45829
  # DEBUG __sizeD.53555 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45829
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45829
  # DEBUG D#51ptD.0 => &D.45829._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53559 => _124
  # DEBUG __aD.53557 => D#49ptD.0
  # DEBUG __nD.53558 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53562 => _124
  # DEBUG thisD.53560 => D#45ptD.0
  # DEBUG D.53561 => D#46ptD.0
  # .MEM_436 = VDEF <.MEM_122>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_124);
;;    succ:       79 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 79, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 78, next block 80, flags: (NEW, REACHABLE)
;;    pred:       77 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                78 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_195 = PHI <.MEM_122(77), .MEM_436(78)>
  # DEBUG D#55ptD.0 => &D.45829._M_dataplusD.14336
  # DEBUG thisD.53565 => D#55ptD.0
  # DEBUG thisD.53566 => D#55ptD.0
  # DEBUG thisD.53567 => D#55ptD.0
  # .MEM_123 = VDEF <.MEM_195>
  D.45829 ={v} {CLOBBER};
  # DEBUG thisD.53551 => &D.45828
  # DEBUG thisD.53552 => &D.45828
  # DEBUG D#30ptD.0 => &D.45831
  # DEBUG thisD.53550 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45831
  # DEBUG thisD.56994 => &D.45832
  # DEBUG __sD.56995 => "nca_tree4"
  # DEBUG __aD.56996 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.57006 => &D.45832
  # DEBUG D#66ptD.0 => &D.45832._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.57009 => D#66ptD.0
  # DEBUG __datD.57008 => &D.45832.D.14356._M_local_bufD.14358
  # DEBUG __aD.57007 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_1995 = VDEF <.MEM_123>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45832]._M_pD.14342 = &D.45832.D.14356._M_local_bufD.14358;
  # DEBUG __sD.57005 => "nca_tree4"
  # DEBUG thisD.56999 => &D.45832
  # DEBUG __begD.56998 => "nca_tree4"
  # DEBUG __endD.56997 => &MEM[(voidD.45 *)"nca_tree4" + 9B]
  # DEBUG thisD.57003 => &D.45832
  # DEBUG __begD.57002 => "nca_tree4"
  # DEBUG __endD.57001 => &MEM[(voidD.45 *)"nca_tree4" + 9B]
  # DEBUG thisD.57010 => &D.45832
  # DEBUG __begD.57011 => "nca_tree4"
  # DEBUG __endD.57012 => &MEM[(voidD.45 *)"nca_tree4" + 9B]
  # DEBUG __ptrD.52815 => "nca_tree4"
  # DEBUG __firstD.57036 => "nca_tree4"
  # DEBUG __lastD.57035 => &MEM[(voidD.45 *)"nca_tree4" + 9B]
  # DEBUG D#109ptD.0 => &__firstD.57036
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.57038 => "nca_tree4"
  # DEBUG __lastD.57037 => &MEM[(voidD.45 *)"nca_tree4" + 9B]
  # DEBUG __dnewD.57013 => 9
  # DEBUG D#3ptD.0 => &D.45832
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.57016 => &D.45832.D.14356._M_local_bufD.14358
  # DEBUG __k1D.57015 => "nca_tree4"
  # DEBUG __k2D.57014 => &MEM[(voidD.45 *)"nca_tree4" + 9B]
  # DEBUG __dD.57019 => &D.45832.D.14356._M_local_bufD.14358
  # DEBUG __sD.57018 => "nca_tree4"
  # DEBUG __nD.57017 => 9
  # DEBUG __s1D.57022 => &D.45832.D.14356._M_local_bufD.14358
  # DEBUG __s2D.57021 => "nca_tree4"
  # DEBUG __nD.57020 => 9
  # .MEM_2001 = VDEF <.MEM_1995>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&D.45832.D.14356._M_local_bufD.14358, "nca_tree4", 9);
  # DEBUG thisD.57026 => &D.45832
  # DEBUG __nD.57025 => 9
  # DEBUG D#7ptD.0 => &D.45832
  # DEBUG __lengthD.57028 => 9
  # DEBUG thisD.57027 => D#7ptD.0
  # .MEM_2002 = VDEF <.MEM_2001>
  MEM[(size_typeD.14319 *)&D.45832 + 8B] = 9;
  # DEBUG D#3ptD.0 => &D.45832
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.57030 => &MEM[(voidD.45 *)&D.45832 + 25B]
  # DEBUG __c2D.57029 => D#11ptD.0
  # .MEM_2003 = VDEF <.MEM_2002>
  MEM[(char_typeD.10931 &)&D.45832 + 25] = 0;
  # DEBUG D#395ptD.0 => {CLOBBER}
  # DEBUG __dnewD.57013 => D#395ptD.0
  [LP 26] # .MEM_127 = VDEF <.MEM_2003>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _128 = _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPK6RouterPK4FlitiP9OutputSetbESt4lessIS5_ESaISt4pairIKS5_SF_EEEixERSJ_.constprop.56D.54544 (&D.45832);
;;    succ:       402 (EH,EXECUTABLE)
;;                80 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 80, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 79, next block 81, flags: (NEW, REACHABLE)
;;    pred:       79 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_129 = VDEF <.MEM_127>
  *_128 = _Z9tree4_ncaPK6RouterPK4FlitiP9OutputSetbD.45395;
  # DEBUG thisD.53571 => &D.45832
  # DEBUG thisD.53572 => &D.45832
  # DEBUG thisD.53581 => &D.45832
  # VUSE <.MEM_129>
  # PT = nonlocal escaped { D.45832 } (escaped)
  _131 = MEM[(charD.10 * *)&D.45832];
  # DEBUG D#3ptD.0 => &D.45832
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53582 => &D.45832
  if (&D.45832.D.14356._M_local_bufD.14358 != _131)
    goto <bb 81>;
  else
    goto <bb 82>;
;;    succ:       81 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                82 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 81, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 80, next block 82, flags: (NEW, REACHABLE)
;;    pred:       80 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45832.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53574 => &D.45832
  # DEBUG __sizeD.53573 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45832
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45832
  # DEBUG D#51ptD.0 => &D.45832._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53577 => _131
  # DEBUG __aD.53575 => D#49ptD.0
  # DEBUG __nD.53576 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53580 => _131
  # DEBUG thisD.53578 => D#45ptD.0
  # DEBUG D.53579 => D#46ptD.0
  # .MEM_441 = VDEF <.MEM_129>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_131);
;;    succ:       82 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 82, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 81, next block 83, flags: (NEW, REACHABLE)
;;    pred:       80 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                81 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_188 = PHI <.MEM_129(80), .MEM_441(81)>
  # DEBUG D#55ptD.0 => &D.45832._M_dataplusD.14336
  # DEBUG thisD.53583 => D#55ptD.0
  # DEBUG thisD.53584 => D#55ptD.0
  # DEBUG thisD.53585 => D#55ptD.0
  # .MEM_130 = VDEF <.MEM_188>
  D.45832 ={v} {CLOBBER};
  # DEBUG thisD.53569 => &D.45831
  # DEBUG thisD.53570 => &D.45831
  # DEBUG D#30ptD.0 => &D.45834
  # DEBUG thisD.53568 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45834
  # DEBUG thisD.57039 => &D.45835
  # DEBUG __sD.57040 => "anca_tree4"
  # DEBUG __aD.57041 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.57051 => &D.45835
  # DEBUG D#66ptD.0 => &D.45835._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.57054 => D#66ptD.0
  # DEBUG __datD.57053 => &D.45835.D.14356._M_local_bufD.14358
  # DEBUG __aD.57052 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2005 = VDEF <.MEM_130>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45835]._M_pD.14342 = &D.45835.D.14356._M_local_bufD.14358;
  # DEBUG __sD.57050 => "anca_tree4"
  # DEBUG thisD.57044 => &D.45835
  # DEBUG __begD.57043 => "anca_tree4"
  # DEBUG __endD.57042 => &MEM[(voidD.45 *)"anca_tree4" + 10B]
  # DEBUG thisD.57048 => &D.45835
  # DEBUG __begD.57047 => "anca_tree4"
  # DEBUG __endD.57046 => &MEM[(voidD.45 *)"anca_tree4" + 10B]
  # DEBUG thisD.57055 => &D.45835
  # DEBUG __begD.57056 => "anca_tree4"
  # DEBUG __endD.57057 => &MEM[(voidD.45 *)"anca_tree4" + 10B]
  # DEBUG __ptrD.52815 => "anca_tree4"
  # DEBUG __firstD.57081 => "anca_tree4"
  # DEBUG __lastD.57080 => &MEM[(voidD.45 *)"anca_tree4" + 10B]
  # DEBUG D#109ptD.0 => &__firstD.57081
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.57083 => "anca_tree4"
  # DEBUG __lastD.57082 => &MEM[(voidD.45 *)"anca_tree4" + 10B]
  # DEBUG __dnewD.57058 => 10
  # DEBUG D#3ptD.0 => &D.45835
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.57061 => &D.45835.D.14356._M_local_bufD.14358
  # DEBUG __k1D.57060 => "anca_tree4"
  # DEBUG __k2D.57059 => &MEM[(voidD.45 *)"anca_tree4" + 10B]
  # DEBUG __dD.57064 => &D.45835.D.14356._M_local_bufD.14358
  # DEBUG __sD.57063 => "anca_tree4"
  # DEBUG __nD.57062 => 10
  # DEBUG __s1D.57067 => &D.45835.D.14356._M_local_bufD.14358
  # DEBUG __s2D.57066 => "anca_tree4"
  # DEBUG __nD.57065 => 10
  # .MEM_2011 = VDEF <.MEM_2005>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&D.45835.D.14356._M_local_bufD.14358, "anca_tree4", 10);
  # DEBUG thisD.57071 => &D.45835
  # DEBUG __nD.57070 => 10
  # DEBUG D#7ptD.0 => &D.45835
  # DEBUG __lengthD.57073 => 10
  # DEBUG thisD.57072 => D#7ptD.0
  # .MEM_2012 = VDEF <.MEM_2011>
  MEM[(size_typeD.14319 *)&D.45835 + 8B] = 10;
  # DEBUG D#3ptD.0 => &D.45835
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.57075 => &MEM[(voidD.45 *)&D.45835 + 26B]
  # DEBUG __c2D.57074 => D#11ptD.0
  # .MEM_2013 = VDEF <.MEM_2012>
  MEM[(char_typeD.10931 &)&D.45835 + 26] = 0;
  # DEBUG D#396ptD.0 => {CLOBBER}
  # DEBUG __dnewD.57058 => D#396ptD.0
  [LP 28] # .MEM_134 = VDEF <.MEM_2013>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _135 = _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPK6RouterPK4FlitiP9OutputSetbESt4lessIS5_ESaISt4pairIKS5_SF_EEEixERSJ_.constprop.56D.54544 (&D.45835);
;;    succ:       405 (EH,EXECUTABLE)
;;                83 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 83, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 82, next block 84, flags: (NEW, REACHABLE)
;;    pred:       82 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_136 = VDEF <.MEM_134>
  *_135 = _Z10tree4_ancaPK6RouterPK4FlitiP9OutputSetbD.45376;
  # DEBUG thisD.53589 => &D.45835
  # DEBUG thisD.53590 => &D.45835
  # DEBUG thisD.53599 => &D.45835
  # VUSE <.MEM_136>
  # PT = nonlocal escaped { D.45835 } (escaped)
  _138 = MEM[(charD.10 * *)&D.45835];
  # DEBUG D#3ptD.0 => &D.45835
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53600 => &D.45835
  if (&D.45835.D.14356._M_local_bufD.14358 != _138)
    goto <bb 84>;
  else
    goto <bb 85>;
;;    succ:       84 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                85 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 84, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 83, next block 85, flags: (NEW, REACHABLE)
;;    pred:       83 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45835.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53592 => &D.45835
  # DEBUG __sizeD.53591 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45835
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45835
  # DEBUG D#51ptD.0 => &D.45835._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53595 => _138
  # DEBUG __aD.53593 => D#49ptD.0
  # DEBUG __nD.53594 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53598 => _138
  # DEBUG thisD.53596 => D#45ptD.0
  # DEBUG D.53597 => D#46ptD.0
  # .MEM_446 = VDEF <.MEM_136>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_138);
;;    succ:       85 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 85, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 84, next block 86, flags: (NEW, REACHABLE)
;;    pred:       83 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                84 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_181 = PHI <.MEM_136(83), .MEM_446(84)>
  # DEBUG D#55ptD.0 => &D.45835._M_dataplusD.14336
  # DEBUG thisD.53601 => D#55ptD.0
  # DEBUG thisD.53602 => D#55ptD.0
  # DEBUG thisD.53603 => D#55ptD.0
  # .MEM_137 = VDEF <.MEM_181>
  D.45835 ={v} {CLOBBER};
  # DEBUG thisD.53587 => &D.45834
  # DEBUG thisD.53588 => &D.45834
  # DEBUG D#30ptD.0 => &D.45837
  # DEBUG thisD.53586 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45837
  # DEBUG thisD.57160 => &D.45838
  # DEBUG __sD.57161 => "dor_mesh"
  # DEBUG __aD.57162 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.57172 => &D.45838
  # DEBUG D#66ptD.0 => &D.45838._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.57175 => D#66ptD.0
  # DEBUG __datD.57174 => &D.45838.D.14356._M_local_bufD.14358
  # DEBUG __aD.57173 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2015 = VDEF <.MEM_137>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45838]._M_pD.14342 = &D.45838.D.14356._M_local_bufD.14358;
  # DEBUG __sD.57171 => "dor_mesh"
  # DEBUG thisD.57165 => &D.45838
  # DEBUG __begD.57164 => "dor_mesh"
  # DEBUG __endD.57163 => &MEM[(voidD.45 *)"dor_mesh" + 8B]
  # DEBUG thisD.57169 => &D.45838
  # DEBUG __begD.57168 => "dor_mesh"
  # DEBUG __endD.57167 => &MEM[(voidD.45 *)"dor_mesh" + 8B]
  # DEBUG thisD.57176 => &D.45838
  # DEBUG __begD.57177 => "dor_mesh"
  # DEBUG __endD.57178 => &MEM[(voidD.45 *)"dor_mesh" + 8B]
  # DEBUG __ptrD.52815 => "dor_mesh"
  # DEBUG __firstD.57202 => "dor_mesh"
  # DEBUG __lastD.57201 => &MEM[(voidD.45 *)"dor_mesh" + 8B]
  # DEBUG D#109ptD.0 => &__firstD.57202
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.57204 => "dor_mesh"
  # DEBUG __lastD.57203 => &MEM[(voidD.45 *)"dor_mesh" + 8B]
  # DEBUG __dnewD.57179 => 8
  # DEBUG D#3ptD.0 => &D.45838
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.57182 => &D.45838.D.14356._M_local_bufD.14358
  # DEBUG __k1D.57181 => "dor_mesh"
  # DEBUG __k2D.57180 => &MEM[(voidD.45 *)"dor_mesh" + 8B]
  # DEBUG __dD.57185 => &D.45838.D.14356._M_local_bufD.14358
  # DEBUG __sD.57184 => "dor_mesh"
  # DEBUG __nD.57183 => 8
  # DEBUG __s1D.57188 => &D.45838.D.14356._M_local_bufD.14358
  # DEBUG __s2D.57187 => "dor_mesh"
  # DEBUG __nD.57186 => 8
  # .MEM_2021 = VDEF <.MEM_2015>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&D.45838.D.14356._M_local_bufD.14358, "dor_mesh", 8);
  # DEBUG thisD.57192 => &D.45838
  # DEBUG __nD.57191 => 8
  # DEBUG D#7ptD.0 => &D.45838
  # DEBUG __lengthD.57194 => 8
  # DEBUG thisD.57193 => D#7ptD.0
  # .MEM_2022 = VDEF <.MEM_2021>
  MEM[(size_typeD.14319 *)&D.45838 + 8B] = 8;
  # DEBUG D#3ptD.0 => &D.45838
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.57196 => &MEM[(voidD.45 *)&D.45838 + 24B]
  # DEBUG __c2D.57195 => D#11ptD.0
  # .MEM_2023 = VDEF <.MEM_2022>
  MEM[(char_typeD.10931 &)&D.45838 + 24] = 0;
  # DEBUG D#397ptD.0 => {CLOBBER}
  # DEBUG __dnewD.57179 => D#397ptD.0
  # DEBUG __kD.57084 => &D.45838
  # DEBUG thisD.57086 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG thisD.57149 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG __xD.57148 => &D.45838
  # DEBUG thisD.57205 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __kD.57206 => &D.45838
  # DEBUG thisD.57207 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # VUSE <.MEM_2023>
  # PT = nonlocal escaped 
  __i$_M_node_1034 = MEM[(struct _Rb_tree_node_baseD.6878 * *)&_Z19gRoutingFunctionMapB5cxx11D.42076 + 16B];
  # DEBUG D#31ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG thisD.52518 => D#31ptD.0
  # DEBUG D#96ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __xD.57211 => NULL
  # DEBUG __yD.57210 => NULL
  # DEBUG __kD.57209 => &D.45838
  # DEBUG __yD.57210 => &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732
  # DEBUG __xD.57211 => __i$_M_node_1034
  if (__i$_M_node_1034 == 0B)
    goto <bb 473>;
  else
    goto <bb 88>;
;;    succ:       473 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                88 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 86, loop depth 1, count 0, freq 9099, maybe hot
;;    prev block 85, next block 87, flags: (NEW, REACHABLE)
;;    pred:       94 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                95 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_1389 = PHI <__i$_M_node_1038(94), __i$_M_node_1039(95)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1402 = PHI <__i$_M_node_732(94), __i$_M_node_19(95)>
  # DEBUG __yD.57210 => __i$_M_node_1402
  # DEBUG __xD.57211 => __i$_M_node_1389
  if (__i$_M_node_1389 == 0B)
    goto <bb 96>;
  else
    goto <bb 87>;
;;    succ:       96 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                87 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 87, loop depth 1, count 0, freq 8280, maybe hot
;;    prev block 86, next block 88, flags: (NEW)
;;    pred:       86 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 89>;
;;    succ:       89 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 88, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 87, next block 89, flags: (NEW, REACHABLE)
;;    pred:       85 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       89 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 89, loop depth 1, count 0, freq 9099, maybe hot
;;    prev block 88, next block 90, flags: (NEW)
;;    pred:       88 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                87 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_732 = PHI <__i$_M_node_1034(88), __i$_M_node_1389(87)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_19 = PHI <&MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732(88), __i$_M_node_1402(87)>
  # .MEM_49 = PHI <.MEM_2023(88), .MEM_49(87)>
  # DEBUG __yD.57210 => __i$_M_node_19
  # DEBUG __xD.57211 => __i$_M_node_732
  # DEBUG __xD.57212 => __i$_M_node_732
  # DEBUG __xD.52453 => __i$_M_node_732
  # DEBUG thisD.52454 => __i$_M_node_732
  # DEBUG D#93ptD.0 => &MEM[(const struct _Rb_tree_nodeD.44503 *)__i$_M_node_732]._M_value_fieldD.46493
  # DEBUG __rD.52444 => D#93ptD.0
  # DEBUG __xD.57214 => D#93ptD.0
  # DEBUG thisD.57213 => D#60ptD.0
  # DEBUG D#362ptD.0 => &MEM[(const struct pairD.42073 &)__i$_M_node_732 + 32].firstD.46174
  # DEBUG D#94ptD.0 => &D#95ptD.0->_M_implD.44577._M_key_compareD.44731
  # DEBUG D#59ptD.0 => D#94ptD.0
  # DEBUG __xD.57217 => D#362ptD.0
  # DEBUG __yD.57216 => &D.45838
  # DEBUG thisD.57215 => D#59ptD.0
  # DEBUG __lhsD.57219 => D#362ptD.0
  # DEBUG __rhsD.57218 => &D.45838
  # DEBUG thisD.57221 => D#362ptD.0
  # DEBUG __strD.57222 => &D.45838
  # VUSE <.MEM_49>
  _1043 = MEM[(long unsigned intD.14 *)__i$_M_node_732 + 40B];
  # DEBUG D#1ptD.0 => D#362ptD.0
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.57223 => _1043
  # DEBUG D#1ptD.0 => &D.45838
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.57224 => 8
  # DEBUG __aD.57231 => &__sizeD.57223
  # DEBUG __bD.57230 => &__osizeD.57224
  # RANGE [0, 8] NONZERO 15
  __len_1443 = MIN_EXPR <_1043, 8>;
  # DEBUG __lenD.57225 => D#344ptD.0
  # DEBUG thisD.51798 => &D.45838
  # DEBUG D#3ptD.0 => &D.45838
  # DEBUG thisD.50676 => D#3ptD.0
  # VUSE <.MEM_49>
  # PT = nonlocal escaped 
  _1048 = MEM[(charD.10 * *)__i$_M_node_732 + 32B];
  # DEBUG D#3ptD.0 => D#362ptD.0
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.57234 => _1048
  # DEBUG __s2D.57233 => &D.45838.D.14356._M_local_bufD.14358
  # DEBUG __nD.57232 => D#344ptD.0
  # VUSE <.MEM_49>
  # USE = nonlocal escaped null { D.45838 } (escaped)
  __r_1049 = memcmpD.989 (_1048, &D.45838.D.14356._M_local_bufD.14358, __len_1443);
  # DEBUG __rD.57226 => NULL
  if (__r_1049 == 0)
    goto <bb 90>;
  else
    goto <bb 93>;
;;    succ:       90 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                93 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 90, loop depth 1, count 0, freq 5550, maybe hot
;;    prev block 89, next block 91, flags: (NEW, REACHABLE)
;;    pred:       89 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.57228 => _1043
  # DEBUG __n2D.57227 => 8
  # RANGE [0, 18446744073709551615]
  _1050 = _1043 - 8;
  __d_1051 = (const difference_typeD.14320) _1050;
  # DEBUG __dD.57229 => __d_1051
  if (__d_1051 > 2147483647)
    goto <bb 94>;
  else
    goto <bb 91>;
;;    succ:       94 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                91 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 91, loop depth 1, count 0, freq 2775, maybe hot
;;    prev block 90, next block 92, flags: (NEW, REACHABLE)
;;    pred:       90 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_1051 < -2147483648)
    goto <bb 95>;
  else
    goto <bb 92>;
;;    succ:       95 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                92 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 92, loop depth 1, count 0, freq 1388, maybe hot
;;    prev block 91, next block 93, flags: (NEW, REACHABLE)
;;    pred:       91 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_1052 = (intD.9) _1050;
;;    succ:       93 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 93, loop depth 1, count 0, freq 4936, maybe hot
;;    prev block 92, next block 94, flags: (NEW, REACHABLE)
;;    pred:       89 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                92 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_1053 = PHI <__r_1049(89), __r_1052(92)>
  # DEBUG __rD.57226 => __r_1053
  # DEBUG D#402ptD.0 => {CLOBBER}
  # DEBUG __sizeD.57223 => D#402ptD.0
  # DEBUG D#403ptD.0 => {CLOBBER}
  # DEBUG __osizeD.57224 => D#403ptD.0
  if (__r_1053 >= 0)
    goto <bb 94>;
  else
    goto <bb 95>;
;;    succ:       94 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                95 [21.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 94, loop depth 1, count 0, freq 6642, maybe hot
;;    prev block 93, next block 95, flags: (NEW, REACHABLE)
;;    pred:       93 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                90 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.57226 => NULL
  # DEBUG __yD.57210 => __i$_M_node_732
  # VUSE <.MEM_49>
  # PT = nonlocal escaped 
  __i$_M_node_1038 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__i$_M_node_732 + 16B];
  # DEBUG D#37ptD.0 => __i$_M_node_732
  # DEBUG __xD.52486 => D#37ptD.0
  # DEBUG __xD.57211 => NULL
  goto <bb 86>;
;;    succ:       86 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 95, loop depth 1, count 0, freq 2457, maybe hot
;;    prev block 94, next block 96, flags: (NEW, REACHABLE)
;;    pred:       93 [21.7%]  (FALSE_VALUE,EXECUTABLE)
;;                91 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.57226 => NULL
  # VUSE <.MEM_49>
  # PT = nonlocal escaped 
  __i$_M_node_1039 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__i$_M_node_732 + 24B];
  # DEBUG D#36ptD.0 => __i$_M_node_732
  # DEBUG __xD.52485 => D#36ptD.0
  # DEBUG __xD.57211 => NULL
  goto <bb 86>;
;;    succ:       86 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 96, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 95, next block 97, flags: (NEW, REACHABLE)
;;    pred:       86 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_2381 = PHI <__i$_M_node_1402(86)>
  # DEBUG thisD.52484 => NULL
  # DEBUG __xD.52483 => __i$_M_node_2381
  # DEBUG __i$_M_nodeD.57155 => __i$_M_node_2381
  # DEBUG thisD.57150 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG D#44ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG thisD.57151 => D#44ptD.0
  # DEBUG thisD.51662 => NULL
  # DEBUG __xD.51661 => &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732
  # DEBUG thisD.53255 => &__iD.57085
  # DEBUG __xD.53256 => NULL
  if (__i$_M_node_2381 == &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732)
    goto <bb 473>;
  else
    goto <bb 97>;
;;    succ:       473 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                97 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 97, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 96, next block 98, flags: (NEW, REACHABLE)
;;    pred:       96 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.53275 => &__iD.57085
  # DEBUG thisD.53276 => __i$_M_node_2381
  # DEBUG D#144ptD.0 => &MEM[(struct _Rb_tree_nodeD.44503 *)__i$_M_node_2381]._M_value_fieldD.46493
  # DEBUG __rD.51667 => D#144ptD.0
  # DEBUG D#363ptD.0 => &MEM[(struct pairD.42073 &)__i$_M_node_2381 + 32].firstD.46174
  # DEBUG D#35ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG thisD.53272 => D#35ptD.0
  # DEBUG D#34ptD.0 => D#35ptD.0
  # DEBUG D#33ptD.0 => &D#34ptD.0->_M_tD.44500
  # DEBUG D#32ptD.0 => D#33ptD.0
  # DEBUG thisD.51597 => D#32ptD.0
  # DEBUG __xD.57145 => &D.45838
  # DEBUG __yD.57144 => D#363ptD.0
  # DEBUG thisD.57143 => D#59ptD.0
  # DEBUG __lhsD.57147 => &D.45838
  # DEBUG __rhsD.57146 => D#363ptD.0
  # DEBUG thisD.57236 => &D.45838
  # DEBUG __strD.57237 => D#363ptD.0
  # DEBUG D#1ptD.0 => &D.45838
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.57238 => 8
  # VUSE <.MEM_49>
  _1056 = MEM[(long unsigned intD.14 *)__i$_M_node_2381 + 40B];
  # DEBUG D#1ptD.0 => D#363ptD.0
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.57239 => _1056
  # DEBUG __aD.57246 => &__sizeD.57238
  # DEBUG __bD.57245 => &__osizeD.57239
  if (_1056 <= 7)
    goto <bb 99>;
  else
    goto <bb 98>;
;;    succ:       99 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                98 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 98, loop depth 0, count 0, freq 383, maybe hot
;;    prev block 97, next block 99, flags: (NEW)
;;    pred:       97 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       99 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 99, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 98, next block 100, flags: (NEW, REACHABLE)
;;    pred:       97 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                98 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 8] NONZERO 15
  # __len_1058 = PHI <_1056(97), 8(98)>
  # DEBUG __lenD.57240 => D#345ptD.0
  # DEBUG thisD.51798 => D#363ptD.0
  # VUSE <.MEM_49>
  # PT = nonlocal escaped 
  _1059 = MEM[(charD.10 * *)__i$_M_node_2381 + 32B];
  # DEBUG D#3ptD.0 => D#363ptD.0
  # DEBUG thisD.50676 => D#3ptD.0
  # DEBUG D#3ptD.0 => &D.45838
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.57249 => &D.45838.D.14356._M_local_bufD.14358
  # DEBUG __s2D.57248 => _1059
  # DEBUG __nD.57247 => D#345ptD.0
  # VUSE <.MEM_49>
  # USE = nonlocal escaped null { D.45838 } (escaped)
  __r_1061 = memcmpD.989 (&D.45838.D.14356._M_local_bufD.14358, _1059, __len_1058);
  # DEBUG __rD.57241 => NULL
  if (__r_1061 == 0)
    goto <bb 100>;
  else
    goto <bb 103>;
;;    succ:       100 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                103 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 100, loop depth 0, count 0, freq 467, maybe hot
;;    prev block 99, next block 101, flags: (NEW, REACHABLE)
;;    pred:       99 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.57243 => 8
  # DEBUG __n2D.57242 => _1056
  # RANGE [0, 18446744073709551615]
  _1062 = 8 - _1056;
  __d_1063 = (const difference_typeD.14320) _1062;
  # DEBUG __dD.57244 => __d_1063
  if (__d_1063 > 2147483647)
    goto <bb 108>;
  else
    goto <bb 101>;
;;    succ:       108 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                101 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 101, loop depth 0, count 0, freq 233, maybe hot
;;    prev block 100, next block 102, flags: (NEW, REACHABLE)
;;    pred:       100 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_1063 < -2147483648)
    goto <bb 104>;
  else
    goto <bb 102>;
;;    succ:       104 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                102 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 102, loop depth 0, count 0, freq 117, maybe hot
;;    prev block 101, next block 103, flags: (NEW, REACHABLE)
;;    pred:       101 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_1064 = (intD.9) _1062;
;;    succ:       103 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 103, loop depth 0, count 0, freq 414, maybe hot
;;    prev block 102, next block 104, flags: (NEW, REACHABLE)
;;    pred:       99 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                102 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_1065 = PHI <__r_1061(99), __r_1064(102)>
  # DEBUG __rD.57241 => __r_1065
  # DEBUG D#408ptD.0 => {CLOBBER}
  # DEBUG __sizeD.57238 => D#408ptD.0
  # DEBUG D#409ptD.0 => {CLOBBER}
  # DEBUG __osizeD.57239 => D#409ptD.0
  if (__r_1065 < 0)
    goto <bb 473>;
  else
    goto <bb 108>;
;;    succ:       473 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                108 [78.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 104, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 103, next block 105, flags: (NEW, REACHABLE)
;;    pred:       101 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                473 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1088 = PHI <.MEM_49(101), .MEM_1720(473)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1469 = PHI <__i$_M_node_2381(101), __i$_M_node_789(473)>
  # DEBUG thisD.57128 => &D.57158
  # DEBUG __aD.57127 => &D.45838
  # DEBUG __bD.57126 => NULL
  # DEBUG thisD.57130 => &D.57158.firstD.46174
  # DEBUG __strD.57129 => &D.45838
  # DEBUG thisD.52863 => &D.45838
  # DEBUG D#113ptD.0 => &D.45838._M_dataplusD.14336
  # DEBUG thisD.57131 => &D.57158.firstD.46174
  # DEBUG D#114ptD.0 => &MEM[(struct basic_stringD.9877 *)&D.57158]._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#113ptD.0
  # DEBUG thisD.57134 => D#114ptD.0
  # DEBUG __datD.57133 => &MEM[(struct basic_stringD.9877 *)&D.57158].D.14356._M_local_bufD.14358
  # DEBUG __aD.57132 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#114ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2037 = VDEF <.MEM_1088>
  MEM[(struct _Alloc_hiderD.14335 *)&D.57158]._M_pD.14342 = &MEM[(struct basic_stringD.9877 *)&D.57158].D.14356._M_local_bufD.14358;
  # DEBUG D#3ptD.0 => &D.45838
  # DEBUG thisD.52856 => D#3ptD.0
  # DEBUG D#4ptD.0 => &D.45838
  # DEBUG thisD.52853 => D#4ptD.0
  # DEBUG D#3ptD.0 => &D.45838
  # DEBUG thisD.52850 => D#3ptD.0
  # DEBUG thisD.57137 => &D.57158.firstD.46174
  # DEBUG __begD.57136 => &D.45838.D.14356._M_local_bufD.14358
  # DEBUG __endD.57135 => &MEM[(voidD.45 *)&D.45838 + 24B]
  # DEBUG thisD.57141 => &D.57158.firstD.46174
  # DEBUG __begD.57140 => &D.45838.D.14356._M_local_bufD.14358
  # DEBUG __endD.57139 => &MEM[(voidD.45 *)&D.45838 + 24B]
  # DEBUG thisD.57251 => &D.57158.firstD.46174
  # DEBUG __begD.57252 => &D.45838.D.14356._M_local_bufD.14358
  # DEBUG __endD.57253 => &MEM[(voidD.45 *)&D.45838 + 24B]
  # DEBUG __ptrD.52815 => &D.45838.D.14356._M_local_bufD.14358
  # DEBUG __firstD.57277 => &D.45838.D.14356._M_local_bufD.14358
  # DEBUG __lastD.57276 => &MEM[(voidD.45 *)&D.45838 + 24B]
  # DEBUG D#109ptD.0 => &__firstD.57277
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.57279 => &D.45838.D.14356._M_local_bufD.14358
  # DEBUG __lastD.57278 => &MEM[(voidD.45 *)&D.45838 + 24B]
  # DEBUG __dnewD.57254 => 8
  # DEBUG D#3ptD.0 => &D.57158.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.57257 => &MEM[(struct basic_stringD.9877 *)&D.57158].D.14356._M_local_bufD.14358
  # DEBUG __k1D.57256 => &D.45838.D.14356._M_local_bufD.14358
  # DEBUG __k2D.57255 => &MEM[(voidD.45 *)&D.45838 + 24B]
  # DEBUG __dD.57260 => &MEM[(struct basic_stringD.9877 *)&D.57158].D.14356._M_local_bufD.14358
  # DEBUG __sD.57259 => &D.45838.D.14356._M_local_bufD.14358
  # DEBUG __nD.57258 => 8
  # DEBUG __s1D.57263 => &MEM[(struct basic_stringD.9877 *)&D.57158].D.14356._M_local_bufD.14358
  # DEBUG __s2D.57262 => &D.45838.D.14356._M_local_bufD.14358
  # DEBUG __nD.57261 => 8
  # VUSE <.MEM_2037>
  _2008 = MEM[(charD.10 * {ref-all})&D.45838 + 16B];
  # .MEM_2043 = VDEF <.MEM_2037>
  MEM[(charD.10 * {ref-all})&D.57158 + 16B] = _2008;
  # DEBUG thisD.57267 => &D.57158.firstD.46174
  # DEBUG __nD.57266 => 8
  # DEBUG D#7ptD.0 => &D.57158.firstD.46174
  # DEBUG __lengthD.57269 => 8
  # DEBUG thisD.57268 => D#7ptD.0
  # .MEM_2044 = VDEF <.MEM_2043>
  MEM[(size_typeD.14319 *)&D.57158 + 8B] = 8;
  # DEBUG D#3ptD.0 => &D.57158.firstD.46174
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.57271 => &MEM[(voidD.45 *)&D.57158 + 24B]
  # DEBUG __c2D.57270 => D#11ptD.0
  # .MEM_2045 = VDEF <.MEM_2044>
  MEM[(char_typeD.10931 &)&D.57158 + 24] = 0;
  # DEBUG D#410ptD.0 => {CLOBBER}
  # DEBUG __dnewD.57254 => D#410ptD.0
  # .MEM_2047 = VDEF <.MEM_2045>
  D.57158.secondD.46175 = 0B;
  # DEBUG thisD.57121 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG __position$_M_nodeD.53347 => __i$_M_node_1469
  # DEBUG __xD.57119 => &D.57158
  # DEBUG thisD.53299 => NULL
  # DEBUG __itD.53298 => &__positionD.57120
  # DEBUG thisD.57124 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # .MEM_2048 = VDEF <.MEM_2047>
  MEM[(struct _Rb_tree_const_iteratorD.44806 *)&__posD.57123] = __i$_M_node_1469;
  # DEBUG __xD.57122 => &D.57158
  # DEBUG thisD.53249 => &__anD.57125
  # DEBUG __tD.53248 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __an$_M_tD.53242 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG D#143ptD.0 => &__anD.57125
  [LP 70] # .MEM_2049 = VDEF <.MEM_2048>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  D.57156 = _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPK6RouterPK4FlitiP9OutputSetbEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_INSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_ERKSI_RT_.isra.54.constprop.57D.54545 (&_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500, __posD.57123, &D.57158);
;;    succ:       105 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                109 (EH,EXECUTABLE)

;;   basic block 105, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 104, next block 106, flags: (NEW, REACHABLE)
;;    pred:       104 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_2049>
  # PT = nonlocal escaped 
  __i$_M_node_1013 = MEM[(struct _Rb_tree_iteratorD.44804 *)&D.57156];
  # DEBUG __i$_M_nodeD.57155 => __i$_M_node_1013
  # DEBUG thisD.57103 => &D.57158
  # DEBUG D#56ptD.0 => &D.57158.firstD.46174
  # DEBUG thisD.57104 => D#56ptD.0
  # DEBUG thisD.57105 => D#56ptD.0
  # DEBUG thisD.57114 => D#56ptD.0
  # VUSE <.MEM_2049>
  # PT = nonlocal escaped { D.57158 } (escaped)
  _1014 = MEM[(charD.10 * *)&D.57158];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.57115 => D#56ptD.0
  if (&MEM[(const struct basic_stringD.9877 *)&D.57158].D.14356._M_local_bufD.14358 != _1014)
    goto <bb 106>;
  else
    goto <bb 107>;
;;    succ:       106 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                107 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 106, loop depth 0, count 0, freq 245, maybe hot
;;    prev block 105, next block 107, flags: (NEW, REACHABLE)
;;    pred:       105 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.57107 => D#56ptD.0
  # DEBUG __sizeD.57106 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.57110 => _1014
  # DEBUG __aD.57108 => D#49ptD.0
  # DEBUG __nD.57109 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.57113 => _1014
  # DEBUG thisD.57111 => D#45ptD.0
  # DEBUG D.57112 => D#46ptD.0
  # .MEM_2050 = VDEF <.MEM_2049>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_1014);
;;    succ:       107 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 107, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 106, next block 108, flags: (NEW, REACHABLE)
;;    pred:       105 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                106 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1293 = PHI <.MEM_2049(105), .MEM_2050(106)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.57116 => D#55ptD.0
  # DEBUG thisD.57117 => D#55ptD.0
  # DEBUG thisD.57118 => D#55ptD.0
  # .MEM_2056 = VDEF <.MEM_1293>
  D.57158 ={v} {CLOBBER};
  # VUSE <.MEM_2056>
  pretmp_617 = MEM[(charD.10 * *)&D.45838];
;;    succ:       108 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 108, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 107, next block 109, flags: (NEW, REACHABLE)
;;    pred:       100 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                107 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                103 [78.3%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1015 = PHI <__i$_M_node_2381(100), __i$_M_node_1013(107), __i$_M_node_2381(103)>
  # .MEM_175 = PHI <.MEM_49(100), .MEM_2056(107), .MEM_49(103)>
  # PT = nonlocal escaped { D.45838 } (escaped)
  # prephitmp_618 = PHI <&D.45838.D.14356._M_local_bufD.14358(100), pretmp_617(107), &D.45838.D.14356._M_local_bufD.14358(103)>
  # DEBUG __i$_M_nodeD.57155 => __i$_M_node_1015
  # DEBUG thisD.53323 => &__iD.57085
  # DEBUG thisD.53324 => __i$_M_node_1015
  # DEBUG D#145ptD.0 => &MEM[(struct _Rb_tree_nodeD.44503 *)__i$_M_node_1015]._M_value_fieldD.46493
  # DEBUG __rD.51667 => D#145ptD.0
  # DEBUG D#147ptD.0 => {CLOBBER}
  # DEBUG __i$_M_nodeD.57155 => D#147ptD.0
  # .MEM_143 = VDEF <.MEM_175>
  MEM[(voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) &)__i$_M_node_1015 + 64] = _Z14dim_order_meshPK6RouterPK4FlitiP9OutputSetbD.45509;
  # DEBUG thisD.53607 => &D.45838
  # DEBUG thisD.53608 => &D.45838
  # DEBUG thisD.53617 => &D.45838
  # DEBUG D#545ptD.0 => MEM[(charD.10 * *)&D.45838]
  # DEBUG D#3ptD.0 => &D.45838
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53618 => &D.45838
  if (&D.45838.D.14356._M_local_bufD.14358 != prephitmp_618)
    goto <bb 112>;
  else
    goto <bb 113>;
;;    succ:       112 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                113 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 109, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 108, next block 110, flags: (NEW, REACHABLE)
;;    pred:       104 (EH,EXECUTABLE)
<L93>: [LP 70]
  # DEBUG thisD.57087 => &D.57158
  # DEBUG D#56ptD.0 => &D.57158.firstD.46174
  # DEBUG thisD.57088 => D#56ptD.0
  # DEBUG thisD.57089 => D#56ptD.0
  # DEBUG thisD.57098 => D#56ptD.0
  # VUSE <.MEM_2049>
  # PT = nonlocal escaped { D.57158 } (escaped)
  _1017 = MEM[(charD.10 * *)&D.57158];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.57099 => D#56ptD.0
  if (&MEM[(const struct basic_stringD.9877 *)&D.57158].D.14356._M_local_bufD.14358 != _1017)
    goto <bb 110>;
  else
    goto <bb 111>;
;;    succ:       110 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                111 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 110, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 109, next block 111, flags: (NEW, REACHABLE)
;;    pred:       109 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.57091 => D#56ptD.0
  # DEBUG __sizeD.57090 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.57094 => _1017
  # DEBUG __aD.57092 => D#49ptD.0
  # DEBUG __nD.57093 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.57097 => _1017
  # DEBUG thisD.57095 => D#45ptD.0
  # DEBUG D.57096 => D#46ptD.0
  # .MEM_2057 = VDEF <.MEM_2049>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_1017);
;;    succ:       111 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 111, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 110, next block 112, flags: (NEW, REACHABLE)
;;    pred:       109 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                110 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1265 = PHI <.MEM_2049(109), .MEM_2057(110)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.57100 => D#55ptD.0
  # DEBUG thisD.57101 => D#55ptD.0
  # DEBUG thisD.57102 => D#55ptD.0
  # .MEM_2063 = VDEF <.MEM_1265>
  D.57158 ={v} {CLOBBER};
  [LP 30] resx 138
;;    succ:       408 (EH,EXECUTABLE)

;;   basic block 112, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 111, next block 113, flags: (NEW, REACHABLE)
;;    pred:       108 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45838.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53610 => &D.45838
  # DEBUG __sizeD.53609 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45838
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45838
  # DEBUG D#51ptD.0 => &D.45838._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53613 => D#545ptD.0
  # DEBUG __aD.53611 => D#49ptD.0
  # DEBUG __nD.53612 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53616 => D#545ptD.0
  # DEBUG thisD.53614 => D#45ptD.0
  # DEBUG D.53615 => D#46ptD.0
  # .MEM_451 = VDEF <.MEM_143>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (prephitmp_618);
;;    succ:       113 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 113, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 112, next block 114, flags: (NEW, REACHABLE)
;;    pred:       108 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                112 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_174 = PHI <.MEM_143(108), .MEM_451(112)>
  # DEBUG D#55ptD.0 => &D.45838._M_dataplusD.14336
  # DEBUG thisD.53619 => D#55ptD.0
  # DEBUG thisD.53620 => D#55ptD.0
  # DEBUG thisD.53621 => D#55ptD.0
  # .MEM_144 = VDEF <.MEM_174>
  D.45838 ={v} {CLOBBER};
  # DEBUG thisD.53605 => &D.45837
  # DEBUG thisD.53606 => &D.45837
  # DEBUG D#30ptD.0 => &D.45840
  # DEBUG thisD.53604 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45840
  # DEBUG thisD.57280 => &D.45841
  # DEBUG __sD.57281 => "xy_yx_mesh"
  # DEBUG __aD.57282 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.57292 => &D.45841
  # DEBUG D#66ptD.0 => &D.45841._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.57295 => D#66ptD.0
  # DEBUG __datD.57294 => &D.45841.D.14356._M_local_bufD.14358
  # DEBUG __aD.57293 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2066 = VDEF <.MEM_144>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45841]._M_pD.14342 = &D.45841.D.14356._M_local_bufD.14358;
  # DEBUG __sD.57291 => "xy_yx_mesh"
  # DEBUG thisD.57285 => &D.45841
  # DEBUG __begD.57284 => "xy_yx_mesh"
  # DEBUG __endD.57283 => &MEM[(voidD.45 *)"xy_yx_mesh" + 10B]
  # DEBUG thisD.57289 => &D.45841
  # DEBUG __begD.57288 => "xy_yx_mesh"
  # DEBUG __endD.57287 => &MEM[(voidD.45 *)"xy_yx_mesh" + 10B]
  # DEBUG thisD.57296 => &D.45841
  # DEBUG __begD.57297 => "xy_yx_mesh"
  # DEBUG __endD.57298 => &MEM[(voidD.45 *)"xy_yx_mesh" + 10B]
  # DEBUG __ptrD.52815 => "xy_yx_mesh"
  # DEBUG __firstD.57322 => "xy_yx_mesh"
  # DEBUG __lastD.57321 => &MEM[(voidD.45 *)"xy_yx_mesh" + 10B]
  # DEBUG D#109ptD.0 => &__firstD.57322
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.57324 => "xy_yx_mesh"
  # DEBUG __lastD.57323 => &MEM[(voidD.45 *)"xy_yx_mesh" + 10B]
  # DEBUG __dnewD.57299 => 10
  # DEBUG D#3ptD.0 => &D.45841
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.57302 => &D.45841.D.14356._M_local_bufD.14358
  # DEBUG __k1D.57301 => "xy_yx_mesh"
  # DEBUG __k2D.57300 => &MEM[(voidD.45 *)"xy_yx_mesh" + 10B]
  # DEBUG __dD.57305 => &D.45841.D.14356._M_local_bufD.14358
  # DEBUG __sD.57304 => "xy_yx_mesh"
  # DEBUG __nD.57303 => 10
  # DEBUG __s1D.57308 => &D.45841.D.14356._M_local_bufD.14358
  # DEBUG __s2D.57307 => "xy_yx_mesh"
  # DEBUG __nD.57306 => 10
  # .MEM_2072 = VDEF <.MEM_2066>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&D.45841.D.14356._M_local_bufD.14358, "xy_yx_mesh", 10);
  # DEBUG thisD.57312 => &D.45841
  # DEBUG __nD.57311 => 10
  # DEBUG D#7ptD.0 => &D.45841
  # DEBUG __lengthD.57314 => 10
  # DEBUG thisD.57313 => D#7ptD.0
  # .MEM_2073 = VDEF <.MEM_2072>
  MEM[(size_typeD.14319 *)&D.45841 + 8B] = 10;
  # DEBUG D#3ptD.0 => &D.45841
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.57316 => &MEM[(voidD.45 *)&D.45841 + 26B]
  # DEBUG __c2D.57315 => D#11ptD.0
  # .MEM_2074 = VDEF <.MEM_2073>
  MEM[(char_typeD.10931 &)&D.45841 + 26] = 0;
  # DEBUG D#411ptD.0 => {CLOBBER}
  # DEBUG __dnewD.57299 => D#411ptD.0
  [LP 32] # .MEM_148 = VDEF <.MEM_2074>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _149 = _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPK6RouterPK4FlitiP9OutputSetbESt4lessIS5_ESaISt4pairIKS5_SF_EEEixERSJ_.constprop.56D.54544 (&D.45841);
;;    succ:       411 (EH,EXECUTABLE)
;;                114 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 114, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 113, next block 115, flags: (NEW, REACHABLE)
;;    pred:       113 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_150 = VDEF <.MEM_148>
  *_149 = _Z10xy_yx_meshPK6RouterPK4FlitiP9OutputSetbD.45473;
  # DEBUG thisD.53625 => &D.45841
  # DEBUG thisD.53626 => &D.45841
  # DEBUG thisD.53635 => &D.45841
  # VUSE <.MEM_150>
  # PT = nonlocal escaped { D.45841 } (escaped)
  _152 = MEM[(charD.10 * *)&D.45841];
  # DEBUG D#3ptD.0 => &D.45841
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53636 => &D.45841
  if (&D.45841.D.14356._M_local_bufD.14358 != _152)
    goto <bb 115>;
  else
    goto <bb 116>;
;;    succ:       115 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                116 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 115, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 114, next block 116, flags: (NEW, REACHABLE)
;;    pred:       114 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45841.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53628 => &D.45841
  # DEBUG __sizeD.53627 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45841
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45841
  # DEBUG D#51ptD.0 => &D.45841._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53631 => _152
  # DEBUG __aD.53629 => D#49ptD.0
  # DEBUG __nD.53630 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53634 => _152
  # DEBUG thisD.53632 => D#45ptD.0
  # DEBUG D.53633 => D#46ptD.0
  # .MEM_456 = VDEF <.MEM_150>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_152);
;;    succ:       116 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 116, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 115, next block 117, flags: (NEW, REACHABLE)
;;    pred:       114 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                115 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_167 = PHI <.MEM_150(114), .MEM_456(115)>
  # DEBUG D#55ptD.0 => &D.45841._M_dataplusD.14336
  # DEBUG thisD.53637 => D#55ptD.0
  # DEBUG thisD.53638 => D#55ptD.0
  # DEBUG thisD.53639 => D#55ptD.0
  # .MEM_151 = VDEF <.MEM_167>
  D.45841 ={v} {CLOBBER};
  # DEBUG thisD.53623 => &D.45840
  # DEBUG thisD.53624 => &D.45840
  # DEBUG D#30ptD.0 => &D.45843
  # DEBUG thisD.53622 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45843
  # DEBUG thisD.57401 => &D.45844
  # DEBUG __sD.57402 => "adaptive_xy_yx_mesh"
  # DEBUG __aD.57403 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.57413 => &D.45844
  # DEBUG D#66ptD.0 => &D.45844._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.57416 => D#66ptD.0
  # DEBUG __datD.57415 => &D.45844.D.14356._M_local_bufD.14358
  # DEBUG __aD.57414 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2076 = VDEF <.MEM_151>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45844]._M_pD.14342 = &D.45844.D.14356._M_local_bufD.14358;
  # DEBUG __sD.57412 => "adaptive_xy_yx_mesh"
  # DEBUG thisD.57406 => &D.45844
  # DEBUG __begD.57405 => "adaptive_xy_yx_mesh"
  # DEBUG __endD.57404 => &MEM[(voidD.45 *)"adaptive_xy_yx_mesh" + 19B]
  # DEBUG thisD.57410 => &D.45844
  # DEBUG __begD.57409 => "adaptive_xy_yx_mesh"
  # DEBUG __endD.57408 => &MEM[(voidD.45 *)"adaptive_xy_yx_mesh" + 19B]
  # DEBUG thisD.57417 => &D.45844
  # DEBUG __begD.57418 => "adaptive_xy_yx_mesh"
  # DEBUG __endD.57419 => &MEM[(voidD.45 *)"adaptive_xy_yx_mesh" + 19B]
  # DEBUG __ptrD.52815 => "adaptive_xy_yx_mesh"
  # DEBUG __firstD.57443 => "adaptive_xy_yx_mesh"
  # DEBUG __lastD.57442 => &MEM[(voidD.45 *)"adaptive_xy_yx_mesh" + 19B]
  # DEBUG D#109ptD.0 => &__firstD.57443
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.57445 => "adaptive_xy_yx_mesh"
  # DEBUG __lastD.57444 => &MEM[(voidD.45 *)"adaptive_xy_yx_mesh" + 19B]
  # .MEM_2077 = VDEF <.MEM_2076>
  __dnewD.57420 = 19;
  # .MEM_2078 = VDEF <.MEM_2077>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _1117 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.45844, &__dnewD.57420, 0);
  # DEBUG D#5ptD.0 => &D.45844
  # DEBUG __pD.57439 => _1117
  # DEBUG thisD.57438 => D#5ptD.0
  # .MEM_2079 = VDEF <.MEM_2078>
  MEM[(charD.10 * *)&D.45844] = _1117;
  # VUSE <.MEM_2079>
  __dnew.173_1118 = __dnewD.57420;
  # DEBUG D#6ptD.0 => &D.45844
  # DEBUG __capacityD.57441 => __dnew.173_1118
  # DEBUG thisD.57440 => D#6ptD.0
  # .MEM_2080 = VDEF <.MEM_2079>
  MEM[(size_typeD.14319 *)&D.45844 + 16B] = __dnew.173_1118;
  # DEBUG D#3ptD.0 => &D.45844
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.57423 => _1117
  # DEBUG __k1D.57422 => "adaptive_xy_yx_mesh"
  # DEBUG __k2D.57421 => &MEM[(voidD.45 *)"adaptive_xy_yx_mesh" + 19B]
  # DEBUG __dD.57426 => _1117
  # DEBUG __sD.57425 => "adaptive_xy_yx_mesh"
  # DEBUG __nD.57424 => 19
  # DEBUG __s1D.57429 => _1117
  # DEBUG __s2D.57428 => "adaptive_xy_yx_mesh"
  # DEBUG __nD.57427 => 19
  # .MEM_2082 = VDEF <.MEM_2080>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (_1117, "adaptive_xy_yx_mesh", 19);
  # VUSE <.MEM_2082>
  __dnew.173_1121 = __dnewD.57420;
  # DEBUG thisD.57433 => &D.45844
  # DEBUG __nD.57432 => __dnew.173_1121
  # DEBUG D#7ptD.0 => &D.45844
  # DEBUG __lengthD.57435 => __dnew.173_1121
  # DEBUG thisD.57434 => D#7ptD.0
  # .MEM_2083 = VDEF <.MEM_2082>
  MEM[(size_typeD.14319 *)&D.45844 + 8B] = __dnew.173_1121;
  # VUSE <.MEM_2083>
  # PT = nonlocal escaped null { D.45844 } (escaped)
  _1122 = MEM[(charD.10 * *)&D.45844];
  # DEBUG D#3ptD.0 => &D.45844
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.45844 } (escaped)
  _1123 = _1122 + __dnew.173_1121;
  # DEBUG __c1D.57437 => _1123
  # DEBUG __c2D.57436 => D#11ptD.0
  # .MEM_2084 = VDEF <.MEM_2083>
  MEM[(char_typeD.10931 &)_1123] = 0;
  # .MEM_2085 = VDEF <.MEM_2084>
  __dnewD.57420 ={v} {CLOBBER};
  # DEBUG __kD.57325 => &D.45844
  # DEBUG thisD.57327 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG thisD.57390 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG __xD.57389 => &D.45844
  # DEBUG thisD.57446 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __kD.57447 => &D.45844
  # DEBUG thisD.57448 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # VUSE <.MEM_2085>
  # PT = nonlocal escaped 
  __i$_M_node_1125 = MEM[(struct _Rb_tree_node_baseD.6878 * *)&_Z19gRoutingFunctionMapB5cxx11D.42076 + 16B];
  # DEBUG D#31ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG thisD.52518 => D#31ptD.0
  # DEBUG D#96ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __xD.57452 => NULL
  # DEBUG __yD.57451 => NULL
  # DEBUG __kD.57450 => &D.45844
  # DEBUG __yD.57451 => &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732
  # DEBUG __xD.57452 => __i$_M_node_1125
  if (__i$_M_node_1125 == 0B)
    goto <bb 474>;
  else
    goto <bb 117>;
;;    succ:       474 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                117 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 117, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 116, next block 118, flags: (NEW)
;;    pred:       116 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2085>
  pretmp_550 = MEM[(long unsigned intD.14 *)&D.45844 + 8B];
  # VUSE <.MEM_2085>
  # PT = nonlocal escaped null { D.45844 } (escaped)
  pretmp_543 = MEM[(charD.10 * *)&D.45844];
  goto <bb 120>;
;;    succ:       120 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 118, loop depth 1, count 0, freq 9097, maybe hot
;;    prev block 117, next block 119, flags: (NEW, REACHABLE)
;;    pred:       125 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                126 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_1327 = PHI <__i$_M_node_1129(125), __i$_M_node_1130(126)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1339 = PHI <__i$_M_node_888(125), __i$_M_node_944(126)>
  # DEBUG __yD.57451 => __i$_M_node_1339
  # DEBUG __xD.57452 => __i$_M_node_1327
  if (__i$_M_node_1327 == 0B)
    goto <bb 127>;
  else
    goto <bb 119>;
;;    succ:       127 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                119 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 119, loop depth 1, count 0, freq 8278, maybe hot
;;    prev block 118, next block 120, flags: (NEW)
;;    pred:       118 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       120 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 120, loop depth 1, count 0, freq 9097, maybe hot
;;    prev block 119, next block 121, flags: (NEW, REACHABLE)
;;    pred:       117 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                119 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1983 = PHI <.MEM_2085(117), .MEM_1983(119)>
  # PT = nonlocal escaped 
  # __i$_M_node_888 = PHI <__i$_M_node_1125(117), __i$_M_node_1327(119)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_944 = PHI <&MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732(117), __i$_M_node_1339(119)>
  # DEBUG __yD.57451 => __i$_M_node_944
  # DEBUG __xD.57452 => __i$_M_node_888
  # DEBUG __xD.57453 => __i$_M_node_888
  # DEBUG __xD.52453 => __i$_M_node_888
  # DEBUG thisD.52454 => __i$_M_node_888
  # DEBUG D#93ptD.0 => &MEM[(const struct _Rb_tree_nodeD.44503 *)__i$_M_node_888]._M_value_fieldD.46493
  # DEBUG __rD.52444 => D#93ptD.0
  # DEBUG __xD.57455 => D#93ptD.0
  # DEBUG thisD.57454 => D#60ptD.0
  # DEBUG D#364ptD.0 => &MEM[(const struct pairD.42073 &)__i$_M_node_888 + 32].firstD.46174
  # DEBUG D#94ptD.0 => &D#95ptD.0->_M_implD.44577._M_key_compareD.44731
  # DEBUG D#59ptD.0 => D#94ptD.0
  # DEBUG __xD.57458 => D#364ptD.0
  # DEBUG __yD.57457 => &D.45844
  # DEBUG thisD.57456 => D#59ptD.0
  # DEBUG __lhsD.57460 => D#364ptD.0
  # DEBUG __rhsD.57459 => &D.45844
  # DEBUG thisD.57462 => D#364ptD.0
  # DEBUG __strD.57463 => &D.45844
  # VUSE <.MEM_1983>
  _1134 = MEM[(long unsigned intD.14 *)__i$_M_node_888 + 40B];
  # DEBUG D#1ptD.0 => D#364ptD.0
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.57464 => _1134
  # DEBUG D#544ptD.0 => MEM[(long unsigned intD.14 *)&D.45844 + 8B]
  # DEBUG D#1ptD.0 => &D.45844
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.57465 => D#544ptD.0
  # DEBUG __aD.57472 => &__sizeD.57464
  # DEBUG __bD.57471 => &__osizeD.57465
  __len_2018 = MIN_EXPR <pretmp_550, _1134>;
  # DEBUG __lenD.57466 => D#346ptD.0
  # DEBUG thisD.51798 => &D.45844
  # DEBUG D#543ptD.0 => MEM[(charD.10 * *)&D.45844]
  # DEBUG D#3ptD.0 => &D.45844
  # DEBUG thisD.50676 => D#3ptD.0
  # VUSE <.MEM_1983>
  # PT = nonlocal escaped 
  _1139 = MEM[(charD.10 * *)__i$_M_node_888 + 32B];
  # DEBUG D#3ptD.0 => D#364ptD.0
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.57475 => _1139
  # DEBUG __s2D.57474 => D#543ptD.0
  # DEBUG __nD.57473 => D#346ptD.0
  # VUSE <.MEM_1983>
  # USE = nonlocal escaped null { D.45844 } (escaped)
  __r_1140 = memcmpD.989 (_1139, pretmp_543, __len_2018);
  # DEBUG __rD.57467 => NULL
  if (__r_1140 == 0)
    goto <bb 121>;
  else
    goto <bb 124>;
;;    succ:       121 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                124 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 121, loop depth 1, count 0, freq 5549, maybe hot
;;    prev block 120, next block 122, flags: (NEW, REACHABLE)
;;    pred:       120 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.57469 => _1134
  # DEBUG __n2D.57468 => D#544ptD.0
  # RANGE [0, 18446744073709551615]
  _1141 = _1134 - pretmp_550;
  __d_1142 = (const difference_typeD.14320) _1141;
  # DEBUG __dD.57470 => __d_1142
  if (__d_1142 > 2147483647)
    goto <bb 125>;
  else
    goto <bb 122>;
;;    succ:       125 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                122 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 122, loop depth 1, count 0, freq 2775, maybe hot
;;    prev block 121, next block 123, flags: (NEW, REACHABLE)
;;    pred:       121 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_1142 < -2147483648)
    goto <bb 126>;
  else
    goto <bb 123>;
;;    succ:       126 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                123 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 123, loop depth 1, count 0, freq 1387, maybe hot
;;    prev block 122, next block 124, flags: (NEW, REACHABLE)
;;    pred:       122 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_1143 = (intD.9) _1141;
;;    succ:       124 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 124, loop depth 1, count 0, freq 4934, maybe hot
;;    prev block 123, next block 125, flags: (NEW, REACHABLE)
;;    pred:       120 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                123 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_1144 = PHI <__r_1140(120), __r_1143(123)>
  # DEBUG __rD.57467 => __r_1144
  # DEBUG D#416ptD.0 => {CLOBBER}
  # DEBUG __sizeD.57464 => D#416ptD.0
  # DEBUG D#417ptD.0 => {CLOBBER}
  # DEBUG __osizeD.57465 => D#417ptD.0
  if (__r_1144 >= 0)
    goto <bb 125>;
  else
    goto <bb 126>;
;;    succ:       125 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                126 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 125, loop depth 1, count 0, freq 6641, maybe hot
;;    prev block 124, next block 126, flags: (NEW, REACHABLE)
;;    pred:       124 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                121 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.57467 => NULL
  # DEBUG __yD.57451 => __i$_M_node_888
  # VUSE <.MEM_1983>
  # PT = nonlocal escaped 
  __i$_M_node_1129 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__i$_M_node_888 + 16B];
  # DEBUG D#37ptD.0 => __i$_M_node_888
  # DEBUG __xD.52486 => D#37ptD.0
  # DEBUG __xD.57452 => NULL
  goto <bb 118>;
;;    succ:       118 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 126, loop depth 1, count 0, freq 2456, maybe hot
;;    prev block 125, next block 127, flags: (NEW, REACHABLE)
;;    pred:       124 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                122 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.57467 => NULL
  # VUSE <.MEM_1983>
  # PT = nonlocal escaped 
  __i$_M_node_1130 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__i$_M_node_888 + 24B];
  # DEBUG D#36ptD.0 => __i$_M_node_888
  # DEBUG __xD.52485 => D#36ptD.0
  # DEBUG __xD.57452 => NULL
  goto <bb 118>;
;;    succ:       118 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 127, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 126, next block 128, flags: (NEW, REACHABLE)
;;    pred:       118 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_2392 = PHI <__i$_M_node_1339(118)>
  # DEBUG thisD.52484 => NULL
  # DEBUG __xD.52483 => __i$_M_node_2392
  # DEBUG __i$_M_nodeD.57396 => __i$_M_node_2392
  # DEBUG thisD.57391 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG D#44ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG thisD.57392 => D#44ptD.0
  # DEBUG thisD.51662 => NULL
  # DEBUG __xD.51661 => &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732
  # DEBUG thisD.53255 => &__iD.57326
  # DEBUG __xD.53256 => NULL
  if (__i$_M_node_2392 == &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732)
    goto <bb 475>;
  else
    goto <bb 128>;
;;    succ:       475 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                128 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 128, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 127, next block 129, flags: (NEW, REACHABLE)
;;    pred:       127 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.53275 => &__iD.57326
  # DEBUG thisD.53276 => __i$_M_node_2392
  # DEBUG D#144ptD.0 => &MEM[(struct _Rb_tree_nodeD.44503 *)__i$_M_node_2392]._M_value_fieldD.46493
  # DEBUG __rD.51667 => D#144ptD.0
  # DEBUG D#365ptD.0 => &MEM[(struct pairD.42073 &)__i$_M_node_2392 + 32].firstD.46174
  # DEBUG D#35ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG thisD.53272 => D#35ptD.0
  # DEBUG D#34ptD.0 => D#35ptD.0
  # DEBUG D#33ptD.0 => &D#34ptD.0->_M_tD.44500
  # DEBUG D#32ptD.0 => D#33ptD.0
  # DEBUG thisD.51597 => D#32ptD.0
  # DEBUG __xD.57386 => &D.45844
  # DEBUG __yD.57385 => D#365ptD.0
  # DEBUG thisD.57384 => D#59ptD.0
  # DEBUG __lhsD.57388 => &D.45844
  # DEBUG __rhsD.57387 => D#365ptD.0
  # DEBUG thisD.57477 => &D.45844
  # DEBUG __strD.57478 => D#365ptD.0
  # DEBUG D#542ptD.0 => MEM[(long unsigned intD.14 *)&D.45844 + 8B]
  # DEBUG D#1ptD.0 => &D.45844
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.57479 => D#542ptD.0
  # VUSE <.MEM_1983>
  _1147 = MEM[(long unsigned intD.14 *)__i$_M_node_2392 + 40B];
  # DEBUG D#1ptD.0 => D#365ptD.0
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.57480 => _1147
  # DEBUG __aD.57487 => &__sizeD.57479
  # DEBUG __bD.57486 => &__osizeD.57480
  __len_2039 = MIN_EXPR <pretmp_550, _1147>;
  # DEBUG __lenD.57481 => D#347ptD.0
  # DEBUG thisD.51798 => D#365ptD.0
  # VUSE <.MEM_1983>
  # PT = nonlocal escaped 
  _1150 = MEM[(charD.10 * *)__i$_M_node_2392 + 32B];
  # DEBUG D#3ptD.0 => D#365ptD.0
  # DEBUG thisD.50676 => D#3ptD.0
  # DEBUG D#541ptD.0 => MEM[(charD.10 * *)&D.45844]
  # DEBUG D#3ptD.0 => &D.45844
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.57490 => D#541ptD.0
  # DEBUG __s2D.57489 => _1150
  # DEBUG __nD.57488 => D#347ptD.0
  # VUSE <.MEM_1983>
  # USE = nonlocal escaped null { D.45844 } (escaped)
  __r_1152 = memcmpD.989 (pretmp_543, _1150, __len_2039);
  # DEBUG __rD.57482 => NULL
  if (__r_1152 == 0)
    goto <bb 129>;
  else
    goto <bb 132>;
;;    succ:       129 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                132 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 129, loop depth 0, count 0, freq 467, maybe hot
;;    prev block 128, next block 130, flags: (NEW, REACHABLE)
;;    pred:       128 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.57484 => D#542ptD.0
  # DEBUG __n2D.57483 => _1147
  # RANGE [0, 18446744073709551615]
  _1153 = pretmp_550 - _1147;
  __d_1154 = (const difference_typeD.14320) _1153;
  # DEBUG __dD.57485 => __d_1154
  if (__d_1154 > 2147483647)
    goto <bb 143>;
  else
    goto <bb 130>;
;;    succ:       143 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                130 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 130, loop depth 0, count 0, freq 233, maybe hot
;;    prev block 129, next block 131, flags: (NEW, REACHABLE)
;;    pred:       129 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_1154 < -2147483648)
    goto <bb 133>;
  else
    goto <bb 131>;
;;    succ:       133 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                131 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 131, loop depth 0, count 0, freq 117, maybe hot
;;    prev block 130, next block 132, flags: (NEW, REACHABLE)
;;    pred:       130 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_1155 = (intD.9) _1153;
;;    succ:       132 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 132, loop depth 0, count 0, freq 414, maybe hot
;;    prev block 131, next block 133, flags: (NEW, REACHABLE)
;;    pred:       128 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                131 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_1156 = PHI <__r_1152(128), __r_1155(131)>
  # DEBUG __rD.57482 => __r_1156
  # DEBUG D#422ptD.0 => {CLOBBER}
  # DEBUG __sizeD.57479 => D#422ptD.0
  # DEBUG D#423ptD.0 => {CLOBBER}
  # DEBUG __osizeD.57480 => D#423ptD.0
  if (__r_1156 < 0)
    goto <bb 475>;
  else
    goto <bb 143>;
;;    succ:       475 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                143 [78.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 133, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 132, next block 134, flags: (NEW, REACHABLE)
;;    pred:       130 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                475 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1179 = PHI <.MEM_1983(130), .MEM_979(475)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1319 = PHI <__i$_M_node_2392(130), __i$_M_node_837(475)>
  # prephitmp_718 = PHI <pretmp_550(130), prephitmp_620(475)>
  # PT = nonlocal escaped null { D.45844 } (escaped)
  # prephitmp_719 = PHI <pretmp_543(130), prephitmp_623(475)>
  # DEBUG thisD.57369 => &D.57399
  # DEBUG __aD.57368 => &D.45844
  # DEBUG __bD.57367 => NULL
  # DEBUG thisD.57371 => &D.57399.firstD.46174
  # DEBUG __strD.57370 => &D.45844
  # DEBUG thisD.52863 => &D.45844
  # DEBUG D#113ptD.0 => &D.45844._M_dataplusD.14336
  # DEBUG thisD.57372 => &D.57399.firstD.46174
  # DEBUG D#114ptD.0 => &MEM[(struct basic_stringD.9877 *)&D.57399]._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#113ptD.0
  # DEBUG thisD.57375 => D#114ptD.0
  # DEBUG __datD.57374 => &MEM[(struct basic_stringD.9877 *)&D.57399].D.14356._M_local_bufD.14358
  # DEBUG __aD.57373 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#114ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2098 = VDEF <.MEM_1179>
  MEM[(struct _Alloc_hiderD.14335 *)&D.57399]._M_pD.14342 = &MEM[(struct basic_stringD.9877 *)&D.57399].D.14356._M_local_bufD.14358;
  # DEBUG D#540ptD.0 => MEM[(charD.10 * *)&D.45844]
  # DEBUG D#3ptD.0 => &D.45844
  # DEBUG thisD.52856 => D#3ptD.0
  # DEBUG D#539ptD.0 => MEM[(long unsigned intD.14 *)&D.45844 + 8B]
  # DEBUG D#4ptD.0 => &D.45844
  # DEBUG thisD.52853 => D#4ptD.0
  # PT = nonlocal escaped null { D.45844 } (escaped)
  _1103 = prephitmp_719 + prephitmp_718;
  # DEBUG D#3ptD.0 => &D.45844
  # DEBUG thisD.52850 => D#3ptD.0
  # DEBUG thisD.57378 => &D.57399.firstD.46174
  # DEBUG __begD.57377 => D#540ptD.0
  # DEBUG __endD.57376 => _1103
  # DEBUG thisD.57382 => &D.57399.firstD.46174
  # DEBUG __begD.57381 => D#540ptD.0
  # DEBUG __endD.57380 => _1103
  # DEBUG thisD.57492 => &D.57399.firstD.46174
  # DEBUG __begD.57493 => D#540ptD.0
  # DEBUG __endD.57494 => _1103
  # DEBUG __ptrD.52815 => D#540ptD.0
  # RANGE [0, 1]
  _1489 = _1103 != 0B;
  # RANGE [0, 1]
  _1556 = prephitmp_719 == 0B;
  # RANGE [0, 1]
  _1555 = _1489 & _1556;
  if (_1555 != 0)
    goto <bb 476>;
  else
    goto <bb 478>;
;;    succ:       476 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                478 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 134, loop depth 0, count 0, freq 102, maybe hot
;;    prev block 133, next block 135, flags: (NEW, REACHABLE)
;;    pred:       478 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  [LP 78] # .MEM_2100 = VDEF <.MEM_2099>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _1163 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.57399.firstD.46174, &__dnewD.57495, 0);
;;    succ:       135 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                414 (EH,EXECUTABLE)

;;   basic block 135, loop depth 0, count 0, freq 102, maybe hot
;;    prev block 134, next block 136, flags: (NEW, REACHABLE)
;;    pred:       134 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#5ptD.0 => &D.57399.firstD.46174
  # DEBUG __pD.57514 => _1163
  # DEBUG thisD.57513 => D#5ptD.0
  # .MEM_2101 = VDEF <.MEM_2100>
  MEM[(charD.10 * *)&D.57399] = _1163;
  # VUSE <.MEM_2101>
  __dnew.173_1164 = __dnewD.57495;
  # DEBUG D#6ptD.0 => &D.57399.firstD.46174
  # DEBUG __capacityD.57516 => __dnew.173_1164
  # DEBUG thisD.57515 => D#6ptD.0
  # .MEM_2102 = VDEF <.MEM_2101>
  MEM[(size_typeD.14319 *)&D.57399 + 16B] = __dnew.173_1164;
  # DEBUG D#3ptD.0 => &D.57399.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.57498 => _1163
  # DEBUG __k1D.57497 => D#540ptD.0
  # DEBUG __k2D.57496 => _1103
  # DEBUG __dD.57501 => _1163
  # DEBUG __sD.57500 => D#540ptD.0
  # DEBUG __nD.57499 => D#539ptD.0
  goto <bb 138>;
;;    succ:       138 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 136, loop depth 0, count 0, freq 249, maybe hot
;;    prev block 135, next block 137, flags: (NEW, REACHABLE)
;;    pred:       478 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#3ptD.0 => &D.57399.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.57498 => &MEM[(struct basic_stringD.9877 *)&D.57399].D.14356._M_local_bufD.14358
  # DEBUG __k1D.57497 => D#540ptD.0
  # DEBUG __k2D.57496 => _1103
  # DEBUG __dD.57501 => &MEM[(struct basic_stringD.9877 *)&D.57399].D.14356._M_local_bufD.14358
  # DEBUG __sD.57500 => D#540ptD.0
  # DEBUG __nD.57499 => D#539ptD.0
  if (prephitmp_718 == 1)
    goto <bb 137>;
  else
    goto <bb 138>;
;;    succ:       137 [53.3%]  (TRUE_VALUE,EXECUTABLE)
;;                138 [46.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 137, loop depth 0, count 0, freq 133, maybe hot
;;    prev block 136, next block 138, flags: (NEW, REACHABLE)
;;    pred:       136 [53.3%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2099>
  _1166 = MEM[(const char_typeD.10931 &)prephitmp_719];
  # DEBUG D#11ptD.0 => D#540ptD.0
  # DEBUG __c1D.57506 => &MEM[(struct basic_stringD.9877 *)&D.57399].D.14356._M_local_bufD.14358
  # DEBUG __c2D.57505 => D#11ptD.0
  # .MEM_2103 = VDEF <.MEM_2099>
  MEM[(char_typeD.10931 &)&D.57399 + 16] = _1166;
  goto <bb 139>;
;;    succ:       139 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 138, loop depth 0, count 0, freq 218, maybe hot
;;    prev block 137, next block 139, flags: (NEW, REACHABLE)
;;    pred:       136 [46.7%]  (FALSE_VALUE,EXECUTABLE)
;;                135 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped null { D.45844 D.57399 } (escaped)
  # _907 = PHI <&MEM[(struct basic_stringD.9877 *)&D.57399].D.14356._M_local_bufD.14358(136), _1163(135)>
  # .MEM_905 = PHI <.MEM_2099(136), .MEM_2102(135)>
  # DEBUG D#3ptD.0 => &D.57399.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.57498 => _907
  # DEBUG __k1D.57497 => D#540ptD.0
  # DEBUG __k2D.57496 => _1103
  # DEBUG __dD.57501 => _907
  # DEBUG __sD.57500 => D#540ptD.0
  # DEBUG __nD.57499 => D#539ptD.0
  # DEBUG __s1D.57504 => _907
  # DEBUG __s2D.57503 => D#540ptD.0
  # DEBUG __nD.57502 => D#539ptD.0
  # .MEM_2104 = VDEF <.MEM_905>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (_907, prephitmp_719, prephitmp_718);
  # VUSE <.MEM_2104>
  pretmp_720 = __dnewD.57495;
  # VUSE <.MEM_2104>
  pretmp_548 = MEM[(charD.10 * *)&D.57399];
;;    succ:       139 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 139, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 138, next block 140, flags: (NEW, REACHABLE)
;;    pred:       137 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                138 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_154 = PHI <.MEM_2103(137), .MEM_2104(138)>
  # prephitmp_547 = PHI <prephitmp_718(137), pretmp_720(138)>
  # PT = nonlocal escaped null { D.45844 D.57399 } (escaped)
  # prephitmp_549 = PHI <&MEM[(struct basic_stringD.9877 *)&D.57399].D.14356._M_local_bufD.14358(137), pretmp_548(138)>
  # DEBUG D#538ptD.0 => __dnewD.57495
  # DEBUG thisD.57508 => &D.57399.firstD.46174
  # DEBUG __nD.57507 => D#538ptD.0
  # DEBUG D#7ptD.0 => &D.57399.firstD.46174
  # DEBUG __lengthD.57510 => D#538ptD.0
  # DEBUG thisD.57509 => D#7ptD.0
  # .MEM_2105 = VDEF <.MEM_154>
  MEM[(size_typeD.14319 *)&D.57399 + 8B] = prephitmp_547;
  # DEBUG D#3ptD.0 => &D.57399.firstD.46174
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.45844 D.57399 } (escaped)
  _1169 = prephitmp_549 + prephitmp_547;
  # DEBUG __c1D.57512 => _1169
  # DEBUG __c2D.57511 => D#11ptD.0
  # .MEM_2106 = VDEF <.MEM_2105>
  MEM[(char_typeD.10931 &)_1169] = 0;
  # .MEM_2107 = VDEF <.MEM_2106>
  __dnewD.57495 ={v} {CLOBBER};
  # .MEM_2108 = VDEF <.MEM_2107>
  D.57399.secondD.46175 = 0B;
  # DEBUG thisD.57362 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG __position$_M_nodeD.53347 => __i$_M_node_1319
  # DEBUG __xD.57360 => &D.57399
  # DEBUG thisD.53299 => NULL
  # DEBUG __itD.53298 => &__positionD.57361
  # DEBUG thisD.57365 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # .MEM_2109 = VDEF <.MEM_2108>
  MEM[(struct _Rb_tree_const_iteratorD.44806 *)&__posD.57364] = __i$_M_node_1319;
  # DEBUG __xD.57363 => &D.57399
  # DEBUG thisD.53249 => &__anD.57366
  # DEBUG __tD.53248 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __an$_M_tD.53242 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG D#143ptD.0 => &__anD.57366
  [LP 71] # .MEM_2110 = VDEF <.MEM_2109>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  D.57397 = _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPK6RouterPK4FlitiP9OutputSetbEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_INSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_ERKSI_RT_.isra.54.constprop.57D.54545 (&_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500, __posD.57364, &D.57399);
;;    succ:       140 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                144 (EH,EXECUTABLE)

;;   basic block 140, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 139, next block 141, flags: (NEW, REACHABLE)
;;    pred:       139 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_2110>
  # PT = nonlocal escaped 
  __i$_M_node_1104 = MEM[(struct _Rb_tree_iteratorD.44804 *)&D.57397];
  # DEBUG __i$_M_nodeD.57396 => __i$_M_node_1104
  # DEBUG thisD.57344 => &D.57399
  # DEBUG D#56ptD.0 => &D.57399.firstD.46174
  # DEBUG thisD.57345 => D#56ptD.0
  # DEBUG thisD.57346 => D#56ptD.0
  # DEBUG thisD.57355 => D#56ptD.0
  # VUSE <.MEM_2110>
  # PT = nonlocal escaped null { D.45844 D.57399 } (escaped)
  _1105 = MEM[(charD.10 * *)&D.57399];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.57356 => D#56ptD.0
  if (&MEM[(const struct basic_stringD.9877 *)&D.57399].D.14356._M_local_bufD.14358 != _1105)
    goto <bb 141>;
  else
    goto <bb 142>;
;;    succ:       141 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                142 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 141, loop depth 0, count 0, freq 245, maybe hot
;;    prev block 140, next block 142, flags: (NEW, REACHABLE)
;;    pred:       140 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.57348 => D#56ptD.0
  # DEBUG __sizeD.57347 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.57351 => _1105
  # DEBUG __aD.57349 => D#49ptD.0
  # DEBUG __nD.57350 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.57354 => _1105
  # DEBUG thisD.57352 => D#45ptD.0
  # DEBUG D.57353 => D#46ptD.0
  # .MEM_2111 = VDEF <.MEM_2110>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_1105);
;;    succ:       142 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 142, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 141, next block 143, flags: (NEW, REACHABLE)
;;    pred:       140 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                141 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1112 = PHI <.MEM_2110(140), .MEM_2111(141)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.57357 => D#55ptD.0
  # DEBUG thisD.57358 => D#55ptD.0
  # DEBUG thisD.57359 => D#55ptD.0
  # .MEM_2117 = VDEF <.MEM_1112>
  D.57399 ={v} {CLOBBER};
  # VUSE <.MEM_2117>
  pretmp_624 = MEM[(charD.10 * *)&D.45844];
;;    succ:       143 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 143, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 142, next block 144, flags: (NEW, REACHABLE)
;;    pred:       129 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                142 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                132 [78.3%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1106 = PHI <__i$_M_node_2392(129), __i$_M_node_1104(142), __i$_M_node_2392(132)>
  # .MEM_1111 = PHI <.MEM_1983(129), .MEM_2117(142), .MEM_1983(132)>
  # PT = nonlocal escaped null { D.45844 } (escaped)
  # prephitmp_625 = PHI <pretmp_543(129), pretmp_624(142), pretmp_543(132)>
  # DEBUG __i$_M_nodeD.57396 => __i$_M_node_1106
  # DEBUG thisD.53323 => &__iD.57326
  # DEBUG thisD.53324 => __i$_M_node_1106
  # DEBUG D#145ptD.0 => &MEM[(struct _Rb_tree_nodeD.44503 *)__i$_M_node_1106]._M_value_fieldD.46493
  # DEBUG __rD.51667 => D#145ptD.0
  # DEBUG D#147ptD.0 => {CLOBBER}
  # DEBUG __i$_M_nodeD.57396 => D#147ptD.0
  # .MEM_157 = VDEF <.MEM_1111>
  MEM[(voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) &)__i$_M_node_1106 + 64] = _Z19adaptive_xy_yx_meshPK6RouterPK4FlitiP9OutputSetbD.45456;
  # DEBUG thisD.53643 => &D.45844
  # DEBUG thisD.53644 => &D.45844
  # DEBUG thisD.53653 => &D.45844
  # DEBUG D#537ptD.0 => MEM[(charD.10 * *)&D.45844]
  # DEBUG D#3ptD.0 => &D.45844
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53654 => &D.45844
  if (&D.45844.D.14356._M_local_bufD.14358 != prephitmp_625)
    goto <bb 148>;
  else
    goto <bb 149>;
;;    succ:       148 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                149 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 144, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 143, next block 145, flags: (NEW, REACHABLE)
;;    pred:       139 (EH,EXECUTABLE)
<L94>: [LP 71]
  # DEBUG thisD.57328 => &D.57399
  # DEBUG D#56ptD.0 => &D.57399.firstD.46174
  # DEBUG thisD.57329 => D#56ptD.0
  # DEBUG thisD.57330 => D#56ptD.0
  # DEBUG thisD.57339 => D#56ptD.0
  # VUSE <.MEM_2110>
  # PT = nonlocal escaped null { D.45844 D.57399 } (escaped)
  _1108 = MEM[(charD.10 * *)&D.57399];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.57340 => D#56ptD.0
  if (&MEM[(const struct basic_stringD.9877 *)&D.57399].D.14356._M_local_bufD.14358 != _1108)
    goto <bb 145>;
  else
    goto <bb 146>;
;;    succ:       145 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                146 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 145, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 144, next block 146, flags: (NEW, REACHABLE)
;;    pred:       144 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.57332 => D#56ptD.0
  # DEBUG __sizeD.57331 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.57335 => _1108
  # DEBUG __aD.57333 => D#49ptD.0
  # DEBUG __nD.57334 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.57338 => _1108
  # DEBUG thisD.57336 => D#45ptD.0
  # DEBUG D.57337 => D#46ptD.0
  # .MEM_2118 = VDEF <.MEM_2110>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_1108);
;;    succ:       146 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 146, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 145, next block 147, flags: (NEW, REACHABLE)
;;    pred:       144 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                145 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_147 = PHI <.MEM_2110(144), .MEM_2118(145)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.57341 => D#55ptD.0
  # DEBUG thisD.57342 => D#55ptD.0
  # DEBUG thisD.57343 => D#55ptD.0
  # .MEM_2124 = VDEF <.MEM_147>
  D.57399 ={v} {CLOBBER};
  [LP 79] resx 139
;;    succ:       147 (EH,EXECUTABLE)

;;   basic block 147, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 146, next block 148, flags: (NEW)
;;    pred:       146 (EH,EXECUTABLE)
<L102>: [LP 79]
  goto <bb 415> (<L56>);
;;    succ:       415 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 148, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 147, next block 149, flags: (NEW, REACHABLE)
;;    pred:       143 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45844.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53646 => &D.45844
  # DEBUG __sizeD.53645 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45844
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45844
  # DEBUG D#51ptD.0 => &D.45844._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53649 => D#537ptD.0
  # DEBUG __aD.53647 => D#49ptD.0
  # DEBUG __nD.53648 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53652 => D#537ptD.0
  # DEBUG thisD.53650 => D#45ptD.0
  # DEBUG D.53651 => D#46ptD.0
  # .MEM_461 = VDEF <.MEM_157>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (prephitmp_625);
;;    succ:       149 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 149, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 148, next block 150, flags: (NEW, REACHABLE)
;;    pred:       143 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                148 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_160 = PHI <.MEM_157(143), .MEM_461(148)>
  # DEBUG D#55ptD.0 => &D.45844._M_dataplusD.14336
  # DEBUG thisD.53655 => D#55ptD.0
  # DEBUG thisD.53656 => D#55ptD.0
  # DEBUG thisD.53657 => D#55ptD.0
  # .MEM_158 = VDEF <.MEM_160>
  D.45844 ={v} {CLOBBER};
  # DEBUG thisD.53641 => &D.45843
  # DEBUG thisD.53642 => &D.45843
  # DEBUG D#30ptD.0 => &D.45846
  # DEBUG thisD.53640 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45846
  # DEBUG thisD.57521 => &D.45847
  # DEBUG __sD.57522 => "dim_order_mesh"
  # DEBUG __aD.57523 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.57533 => &D.45847
  # DEBUG D#66ptD.0 => &D.45847._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.57536 => D#66ptD.0
  # DEBUG __datD.57535 => &D.45847.D.14356._M_local_bufD.14358
  # DEBUG __aD.57534 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2127 = VDEF <.MEM_158>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45847]._M_pD.14342 = &D.45847.D.14356._M_local_bufD.14358;
  # DEBUG __sD.57532 => "dim_order_mesh"
  # DEBUG thisD.57526 => &D.45847
  # DEBUG __begD.57525 => "dim_order_mesh"
  # DEBUG __endD.57524 => &MEM[(voidD.45 *)"dim_order_mesh" + 14B]
  # DEBUG thisD.57530 => &D.45847
  # DEBUG __begD.57529 => "dim_order_mesh"
  # DEBUG __endD.57528 => &MEM[(voidD.45 *)"dim_order_mesh" + 14B]
  # DEBUG thisD.57537 => &D.45847
  # DEBUG __begD.57538 => "dim_order_mesh"
  # DEBUG __endD.57539 => &MEM[(voidD.45 *)"dim_order_mesh" + 14B]
  # DEBUG __ptrD.52815 => "dim_order_mesh"
  # DEBUG __firstD.57563 => "dim_order_mesh"
  # DEBUG __lastD.57562 => &MEM[(voidD.45 *)"dim_order_mesh" + 14B]
  # DEBUG D#109ptD.0 => &__firstD.57563
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.57565 => "dim_order_mesh"
  # DEBUG __lastD.57564 => &MEM[(voidD.45 *)"dim_order_mesh" + 14B]
  # DEBUG __dnewD.57540 => 14
  # DEBUG D#3ptD.0 => &D.45847
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.57543 => &D.45847.D.14356._M_local_bufD.14358
  # DEBUG __k1D.57542 => "dim_order_mesh"
  # DEBUG __k2D.57541 => &MEM[(voidD.45 *)"dim_order_mesh" + 14B]
  # DEBUG __dD.57546 => &D.45847.D.14356._M_local_bufD.14358
  # DEBUG __sD.57545 => "dim_order_mesh"
  # DEBUG __nD.57544 => 14
  # DEBUG __s1D.57549 => &D.45847.D.14356._M_local_bufD.14358
  # DEBUG __s2D.57548 => "dim_order_mesh"
  # DEBUG __nD.57547 => 14
  # .MEM_2133 = VDEF <.MEM_2127>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&D.45847.D.14356._M_local_bufD.14358, "dim_order_mesh", 14);
  # DEBUG thisD.57553 => &D.45847
  # DEBUG __nD.57552 => 14
  # DEBUG D#7ptD.0 => &D.45847
  # DEBUG __lengthD.57555 => 14
  # DEBUG thisD.57554 => D#7ptD.0
  # .MEM_2134 = VDEF <.MEM_2133>
  MEM[(size_typeD.14319 *)&D.45847 + 8B] = 14;
  # DEBUG D#3ptD.0 => &D.45847
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.57557 => &MEM[(voidD.45 *)&D.45847 + 30B]
  # DEBUG __c2D.57556 => D#11ptD.0
  # .MEM_2135 = VDEF <.MEM_2134>
  MEM[(char_typeD.10931 &)&D.45847 + 30] = 0;
  # DEBUG D#424ptD.0 => {CLOBBER}
  # DEBUG __dnewD.57540 => D#424ptD.0
  [LP 36] # .MEM_162 = VDEF <.MEM_2135>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _163 = _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPK6RouterPK4FlitiP9OutputSetbESt4lessIS5_ESaISt4pairIKS5_SF_EEEixERSJ_.constprop.56D.54544 (&D.45847);
;;    succ:       418 (EH,EXECUTABLE)
;;                150 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 150, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 149, next block 151, flags: (NEW, REACHABLE)
;;    pred:       149 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_164 = VDEF <.MEM_162>
  *_163 = _Z14dim_order_meshPK6RouterPK4FlitiP9OutputSetbD.45509;
  # DEBUG thisD.53661 => &D.45847
  # DEBUG thisD.53662 => &D.45847
  # DEBUG thisD.53671 => &D.45847
  # VUSE <.MEM_164>
  # PT = nonlocal escaped { D.45847 } (escaped)
  _166 = MEM[(charD.10 * *)&D.45847];
  # DEBUG D#3ptD.0 => &D.45847
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53672 => &D.45847
  if (&D.45847.D.14356._M_local_bufD.14358 != _166)
    goto <bb 151>;
  else
    goto <bb 152>;
;;    succ:       151 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                152 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 151, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 150, next block 152, flags: (NEW, REACHABLE)
;;    pred:       150 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45847.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53664 => &D.45847
  # DEBUG __sizeD.53663 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45847
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45847
  # DEBUG D#51ptD.0 => &D.45847._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53667 => _166
  # DEBUG __aD.53665 => D#49ptD.0
  # DEBUG __nD.53666 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53670 => _166
  # DEBUG thisD.53668 => D#45ptD.0
  # DEBUG D.53669 => D#46ptD.0
  # .MEM_466 = VDEF <.MEM_164>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_166);
;;    succ:       152 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 152, loop depth 0, count 0, freq 900, maybe hot
;;    prev block 151, next block 153, flags: (NEW, REACHABLE)
;;    pred:       150 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                151 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_153 = PHI <.MEM_164(150), .MEM_466(151)>
  # DEBUG D#55ptD.0 => &D.45847._M_dataplusD.14336
  # DEBUG thisD.53673 => D#55ptD.0
  # DEBUG thisD.53674 => D#55ptD.0
  # DEBUG thisD.53675 => D#55ptD.0
  # .MEM_165 = VDEF <.MEM_153>
  D.45847 ={v} {CLOBBER};
  # DEBUG thisD.53659 => &D.45846
  # DEBUG thisD.53660 => &D.45846
  # DEBUG D#30ptD.0 => &D.45849
  # DEBUG thisD.53658 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45849
  # DEBUG thisD.57642 => &D.45850
  # DEBUG __sD.57643 => "dim_order_ni_mesh"
  # DEBUG __aD.57644 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.57654 => &D.45850
  # DEBUG D#66ptD.0 => &D.45850._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.57657 => D#66ptD.0
  # DEBUG __datD.57656 => &D.45850.D.14356._M_local_bufD.14358
  # DEBUG __aD.57655 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2137 = VDEF <.MEM_165>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45850]._M_pD.14342 = &D.45850.D.14356._M_local_bufD.14358;
  # DEBUG __sD.57653 => "dim_order_ni_mesh"
  # DEBUG thisD.57647 => &D.45850
  # DEBUG __begD.57646 => "dim_order_ni_mesh"
  # DEBUG __endD.57645 => &MEM[(voidD.45 *)"dim_order_ni_mesh" + 17B]
  # DEBUG thisD.57651 => &D.45850
  # DEBUG __begD.57650 => "dim_order_ni_mesh"
  # DEBUG __endD.57649 => &MEM[(voidD.45 *)"dim_order_ni_mesh" + 17B]
  # DEBUG thisD.57658 => &D.45850
  # DEBUG __begD.57659 => "dim_order_ni_mesh"
  # DEBUG __endD.57660 => &MEM[(voidD.45 *)"dim_order_ni_mesh" + 17B]
  # DEBUG __ptrD.52815 => "dim_order_ni_mesh"
  # DEBUG __firstD.57684 => "dim_order_ni_mesh"
  # DEBUG __lastD.57683 => &MEM[(voidD.45 *)"dim_order_ni_mesh" + 17B]
  # DEBUG D#109ptD.0 => &__firstD.57684
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.57686 => "dim_order_ni_mesh"
  # DEBUG __lastD.57685 => &MEM[(voidD.45 *)"dim_order_ni_mesh" + 17B]
  # .MEM_2138 = VDEF <.MEM_2137>
  __dnewD.57661 = 17;
  # .MEM_2139 = VDEF <.MEM_2138>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _1208 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.45850, &__dnewD.57661, 0);
  # DEBUG D#5ptD.0 => &D.45850
  # DEBUG __pD.57680 => _1208
  # DEBUG thisD.57679 => D#5ptD.0
  # .MEM_2140 = VDEF <.MEM_2139>
  MEM[(charD.10 * *)&D.45850] = _1208;
  # VUSE <.MEM_2140>
  __dnew.173_1209 = __dnewD.57661;
  # DEBUG D#6ptD.0 => &D.45850
  # DEBUG __capacityD.57682 => __dnew.173_1209
  # DEBUG thisD.57681 => D#6ptD.0
  # .MEM_2141 = VDEF <.MEM_2140>
  MEM[(size_typeD.14319 *)&D.45850 + 16B] = __dnew.173_1209;
  # DEBUG D#3ptD.0 => &D.45850
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.57664 => _1208
  # DEBUG __k1D.57663 => "dim_order_ni_mesh"
  # DEBUG __k2D.57662 => &MEM[(voidD.45 *)"dim_order_ni_mesh" + 17B]
  # DEBUG __dD.57667 => _1208
  # DEBUG __sD.57666 => "dim_order_ni_mesh"
  # DEBUG __nD.57665 => 17
  # DEBUG __s1D.57670 => _1208
  # DEBUG __s2D.57669 => "dim_order_ni_mesh"
  # DEBUG __nD.57668 => 17
  # .MEM_2143 = VDEF <.MEM_2141>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (_1208, "dim_order_ni_mesh", 17);
  # VUSE <.MEM_2143>
  __dnew.173_1212 = __dnewD.57661;
  # DEBUG thisD.57674 => &D.45850
  # DEBUG __nD.57673 => __dnew.173_1212
  # DEBUG D#7ptD.0 => &D.45850
  # DEBUG __lengthD.57676 => __dnew.173_1212
  # DEBUG thisD.57675 => D#7ptD.0
  # .MEM_2144 = VDEF <.MEM_2143>
  MEM[(size_typeD.14319 *)&D.45850 + 8B] = __dnew.173_1212;
  # VUSE <.MEM_2144>
  # PT = nonlocal escaped null { D.45850 } (escaped)
  _1213 = MEM[(charD.10 * *)&D.45850];
  # DEBUG D#3ptD.0 => &D.45850
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.45850 } (escaped)
  _1214 = _1213 + __dnew.173_1212;
  # DEBUG __c1D.57678 => _1214
  # DEBUG __c2D.57677 => D#11ptD.0
  # .MEM_2145 = VDEF <.MEM_2144>
  MEM[(char_typeD.10931 &)_1214] = 0;
  # .MEM_2146 = VDEF <.MEM_2145>
  __dnewD.57661 ={v} {CLOBBER};
  # DEBUG __kD.57566 => &D.45850
  # DEBUG thisD.57568 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG thisD.57631 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG __xD.57630 => &D.45850
  # DEBUG thisD.57687 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __kD.57688 => &D.45850
  # DEBUG thisD.57689 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # VUSE <.MEM_2146>
  # PT = nonlocal escaped 
  __i$_M_node_1216 = MEM[(struct _Rb_tree_node_baseD.6878 * *)&_Z19gRoutingFunctionMapB5cxx11D.42076 + 16B];
  # DEBUG D#31ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG thisD.52518 => D#31ptD.0
  # DEBUG D#96ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __xD.57693 => NULL
  # DEBUG __yD.57692 => NULL
  # DEBUG __kD.57691 => &D.45850
  # DEBUG __yD.57692 => &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732
  # DEBUG __xD.57693 => __i$_M_node_1216
  if (__i$_M_node_1216 == 0B)
    goto <bb 479>;
  else
    goto <bb 153>;
;;    succ:       479 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                153 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 153, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 152, next block 154, flags: (NEW)
;;    pred:       152 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2146>
  pretmp_705 = MEM[(long unsigned intD.14 *)&D.45850 + 8B];
  # VUSE <.MEM_2146>
  # PT = nonlocal escaped null { D.45850 } (escaped)
  pretmp_708 = MEM[(charD.10 * *)&D.45850];
  goto <bb 156>;
;;    succ:       156 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 154, loop depth 1, count 0, freq 9096, maybe hot
;;    prev block 153, next block 155, flags: (NEW, REACHABLE)
;;    pred:       161 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                162 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_1248 = PHI <__i$_M_node_1220(161), __i$_M_node_1221(162)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1315 = PHI <__i$_M_node_964(161), __i$_M_node_963(162)>
  # DEBUG __yD.57692 => __i$_M_node_1315
  # DEBUG __xD.57693 => __i$_M_node_1248
  if (__i$_M_node_1248 == 0B)
    goto <bb 163>;
  else
    goto <bb 155>;
;;    succ:       163 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                155 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 155, loop depth 1, count 0, freq 8277, maybe hot
;;    prev block 154, next block 156, flags: (NEW)
;;    pred:       154 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       156 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 156, loop depth 1, count 0, freq 9096, maybe hot
;;    prev block 155, next block 157, flags: (NEW, REACHABLE)
;;    pred:       153 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                155 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_901 = PHI <.MEM_2146(153), .MEM_901(155)>
  # PT = nonlocal escaped 
  # __i$_M_node_964 = PHI <__i$_M_node_1216(153), __i$_M_node_1248(155)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_963 = PHI <&MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732(153), __i$_M_node_1315(155)>
  # DEBUG __yD.57692 => __i$_M_node_963
  # DEBUG __xD.57693 => __i$_M_node_964
  # DEBUG __xD.57694 => __i$_M_node_964
  # DEBUG __xD.52453 => __i$_M_node_964
  # DEBUG thisD.52454 => __i$_M_node_964
  # DEBUG D#93ptD.0 => &MEM[(const struct _Rb_tree_nodeD.44503 *)__i$_M_node_964]._M_value_fieldD.46493
  # DEBUG __rD.52444 => D#93ptD.0
  # DEBUG __xD.57696 => D#93ptD.0
  # DEBUG thisD.57695 => D#60ptD.0
  # DEBUG D#366ptD.0 => &MEM[(const struct pairD.42073 &)__i$_M_node_964 + 32].firstD.46174
  # DEBUG D#94ptD.0 => &D#95ptD.0->_M_implD.44577._M_key_compareD.44731
  # DEBUG D#59ptD.0 => D#94ptD.0
  # DEBUG __xD.57699 => D#366ptD.0
  # DEBUG __yD.57698 => &D.45850
  # DEBUG thisD.57697 => D#59ptD.0
  # DEBUG __lhsD.57701 => D#366ptD.0
  # DEBUG __rhsD.57700 => &D.45850
  # DEBUG thisD.57703 => D#366ptD.0
  # DEBUG __strD.57704 => &D.45850
  # VUSE <.MEM_901>
  _1225 = MEM[(long unsigned intD.14 *)__i$_M_node_964 + 40B];
  # DEBUG D#1ptD.0 => D#366ptD.0
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.57705 => _1225
  # DEBUG D#536ptD.0 => MEM[(long unsigned intD.14 *)&D.45850 + 8B]
  # DEBUG D#1ptD.0 => &D.45850
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.57706 => D#536ptD.0
  # DEBUG __aD.57713 => &__sizeD.57705
  # DEBUG __bD.57712 => &__osizeD.57706
  __len_1989 = MIN_EXPR <pretmp_705, _1225>;
  # DEBUG __lenD.57707 => D#348ptD.0
  # DEBUG thisD.51798 => &D.45850
  # DEBUG D#535ptD.0 => MEM[(charD.10 * *)&D.45850]
  # DEBUG D#3ptD.0 => &D.45850
  # DEBUG thisD.50676 => D#3ptD.0
  # VUSE <.MEM_901>
  # PT = nonlocal escaped 
  _1230 = MEM[(charD.10 * *)__i$_M_node_964 + 32B];
  # DEBUG D#3ptD.0 => D#366ptD.0
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.57716 => _1230
  # DEBUG __s2D.57715 => D#535ptD.0
  # DEBUG __nD.57714 => D#348ptD.0
  # VUSE <.MEM_901>
  # USE = nonlocal escaped null { D.45850 } (escaped)
  __r_1231 = memcmpD.989 (_1230, pretmp_708, __len_1989);
  # DEBUG __rD.57708 => NULL
  if (__r_1231 == 0)
    goto <bb 157>;
  else
    goto <bb 160>;
;;    succ:       157 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                160 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 157, loop depth 1, count 0, freq 5548, maybe hot
;;    prev block 156, next block 158, flags: (NEW, REACHABLE)
;;    pred:       156 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.57710 => _1225
  # DEBUG __n2D.57709 => D#536ptD.0
  # RANGE [0, 18446744073709551615]
  _1232 = _1225 - pretmp_705;
  __d_1233 = (const difference_typeD.14320) _1232;
  # DEBUG __dD.57711 => __d_1233
  if (__d_1233 > 2147483647)
    goto <bb 161>;
  else
    goto <bb 158>;
;;    succ:       161 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                158 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 158, loop depth 1, count 0, freq 2774, maybe hot
;;    prev block 157, next block 159, flags: (NEW, REACHABLE)
;;    pred:       157 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_1233 < -2147483648)
    goto <bb 162>;
  else
    goto <bb 159>;
;;    succ:       162 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                159 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 159, loop depth 1, count 0, freq 1387, maybe hot
;;    prev block 158, next block 160, flags: (NEW, REACHABLE)
;;    pred:       158 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_1234 = (intD.9) _1232;
;;    succ:       160 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 160, loop depth 1, count 0, freq 4935, maybe hot
;;    prev block 159, next block 161, flags: (NEW, REACHABLE)
;;    pred:       156 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                159 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_1235 = PHI <__r_1231(156), __r_1234(159)>
  # DEBUG __rD.57708 => __r_1235
  # DEBUG D#429ptD.0 => {CLOBBER}
  # DEBUG __sizeD.57705 => D#429ptD.0
  # DEBUG D#430ptD.0 => {CLOBBER}
  # DEBUG __osizeD.57706 => D#430ptD.0
  if (__r_1235 >= 0)
    goto <bb 161>;
  else
    goto <bb 162>;
;;    succ:       161 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                162 [21.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 161, loop depth 1, count 0, freq 6640, maybe hot
;;    prev block 160, next block 162, flags: (NEW, REACHABLE)
;;    pred:       160 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                157 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.57708 => NULL
  # DEBUG __yD.57692 => __i$_M_node_964
  # VUSE <.MEM_901>
  # PT = nonlocal escaped 
  __i$_M_node_1220 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__i$_M_node_964 + 16B];
  # DEBUG D#37ptD.0 => __i$_M_node_964
  # DEBUG __xD.52486 => D#37ptD.0
  # DEBUG __xD.57693 => NULL
  goto <bb 154>;
;;    succ:       154 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 162, loop depth 1, count 0, freq 2456, maybe hot
;;    prev block 161, next block 163, flags: (NEW, REACHABLE)
;;    pred:       160 [21.7%]  (FALSE_VALUE,EXECUTABLE)
;;                158 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.57708 => NULL
  # VUSE <.MEM_901>
  # PT = nonlocal escaped 
  __i$_M_node_1221 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__i$_M_node_964 + 24B];
  # DEBUG D#36ptD.0 => __i$_M_node_964
  # DEBUG __xD.52485 => D#36ptD.0
  # DEBUG __xD.57693 => NULL
  goto <bb 154>;
;;    succ:       154 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 163, loop depth 0, count 0, freq 819, maybe hot
;;    prev block 162, next block 164, flags: (NEW, REACHABLE)
;;    pred:       154 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_2404 = PHI <__i$_M_node_1315(154)>
  # DEBUG thisD.52484 => NULL
  # DEBUG __xD.52483 => __i$_M_node_2404
  # DEBUG __i$_M_nodeD.57637 => __i$_M_node_2404
  # DEBUG thisD.57632 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG D#44ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG thisD.57633 => D#44ptD.0
  # DEBUG thisD.51662 => NULL
  # DEBUG __xD.51661 => &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732
  # DEBUG thisD.53255 => &__iD.57567
  # DEBUG __xD.53256 => NULL
  if (__i$_M_node_2404 == &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732)
    goto <bb 480>;
  else
    goto <bb 164>;
;;    succ:       480 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                164 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 164, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 163, next block 165, flags: (NEW, REACHABLE)
;;    pred:       163 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.53275 => &__iD.57567
  # DEBUG thisD.53276 => __i$_M_node_2404
  # DEBUG D#144ptD.0 => &MEM[(struct _Rb_tree_nodeD.44503 *)__i$_M_node_2404]._M_value_fieldD.46493
  # DEBUG __rD.51667 => D#144ptD.0
  # DEBUG D#367ptD.0 => &MEM[(struct pairD.42073 &)__i$_M_node_2404 + 32].firstD.46174
  # DEBUG D#35ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG thisD.53272 => D#35ptD.0
  # DEBUG D#34ptD.0 => D#35ptD.0
  # DEBUG D#33ptD.0 => &D#34ptD.0->_M_tD.44500
  # DEBUG D#32ptD.0 => D#33ptD.0
  # DEBUG thisD.51597 => D#32ptD.0
  # DEBUG __xD.57627 => &D.45850
  # DEBUG __yD.57626 => D#367ptD.0
  # DEBUG thisD.57625 => D#59ptD.0
  # DEBUG __lhsD.57629 => &D.45850
  # DEBUG __rhsD.57628 => D#367ptD.0
  # DEBUG thisD.57718 => &D.45850
  # DEBUG __strD.57719 => D#367ptD.0
  # DEBUG D#534ptD.0 => MEM[(long unsigned intD.14 *)&D.45850 + 8B]
  # DEBUG D#1ptD.0 => &D.45850
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.57720 => D#534ptD.0
  # VUSE <.MEM_901>
  _1238 = MEM[(long unsigned intD.14 *)__i$_M_node_2404 + 40B];
  # DEBUG D#1ptD.0 => D#367ptD.0
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.57721 => _1238
  # DEBUG __aD.57728 => &__sizeD.57720
  # DEBUG __bD.57727 => &__osizeD.57721
  __len_1988 = MIN_EXPR <pretmp_705, _1238>;
  # DEBUG __lenD.57722 => D#349ptD.0
  # DEBUG thisD.51798 => D#367ptD.0
  # VUSE <.MEM_901>
  # PT = nonlocal escaped 
  _1241 = MEM[(charD.10 * *)__i$_M_node_2404 + 32B];
  # DEBUG D#3ptD.0 => D#367ptD.0
  # DEBUG thisD.50676 => D#3ptD.0
  # DEBUG D#533ptD.0 => MEM[(charD.10 * *)&D.45850]
  # DEBUG D#3ptD.0 => &D.45850
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.57731 => D#533ptD.0
  # DEBUG __s2D.57730 => _1241
  # DEBUG __nD.57729 => D#349ptD.0
  # VUSE <.MEM_901>
  # USE = nonlocal escaped null { D.45850 } (escaped)
  __r_1243 = memcmpD.989 (pretmp_708, _1241, __len_1988);
  # DEBUG __rD.57723 => NULL
  if (__r_1243 == 0)
    goto <bb 165>;
  else
    goto <bb 168>;
;;    succ:       165 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                168 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 165, loop depth 0, count 0, freq 466, maybe hot
;;    prev block 164, next block 166, flags: (NEW, REACHABLE)
;;    pred:       164 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.57725 => D#534ptD.0
  # DEBUG __n2D.57724 => _1238
  # RANGE [0, 18446744073709551615]
  _1244 = pretmp_705 - _1238;
  __d_1245 = (const difference_typeD.14320) _1244;
  # DEBUG __dD.57726 => __d_1245
  if (__d_1245 > 2147483647)
    goto <bb 179>;
  else
    goto <bb 166>;
;;    succ:       179 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                166 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 166, loop depth 0, count 0, freq 233, maybe hot
;;    prev block 165, next block 167, flags: (NEW, REACHABLE)
;;    pred:       165 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_1245 < -2147483648)
    goto <bb 169>;
  else
    goto <bb 167>;
;;    succ:       169 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                167 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 167, loop depth 0, count 0, freq 117, maybe hot
;;    prev block 166, next block 168, flags: (NEW, REACHABLE)
;;    pred:       166 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_1246 = (intD.9) _1244;
;;    succ:       168 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 168, loop depth 0, count 0, freq 415, maybe hot
;;    prev block 167, next block 169, flags: (NEW, REACHABLE)
;;    pred:       164 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                167 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_1247 = PHI <__r_1243(164), __r_1246(167)>
  # DEBUG __rD.57723 => __r_1247
  # DEBUG D#435ptD.0 => {CLOBBER}
  # DEBUG __sizeD.57720 => D#435ptD.0
  # DEBUG D#436ptD.0 => {CLOBBER}
  # DEBUG __osizeD.57721 => D#436ptD.0
  if (__r_1247 < 0)
    goto <bb 480>;
  else
    goto <bb 179>;
;;    succ:       480 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                179 [78.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 169, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 168, next block 170, flags: (NEW, REACHABLE)
;;    pred:       166 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                480 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2042 = PHI <.MEM_901(166), .MEM_734(480)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1463 = PHI <__i$_M_node_2404(166), __i$_M_node_1458(480)>
  # prephitmp_698 = PHI <pretmp_705(166), prephitmp_2181(480)>
  # PT = nonlocal escaped null { D.45850 } (escaped)
  # prephitmp_699 = PHI <pretmp_708(166), prephitmp_2183(480)>
  # DEBUG thisD.57610 => &D.57640
  # DEBUG __aD.57609 => &D.45850
  # DEBUG __bD.57608 => NULL
  # DEBUG thisD.57612 => &D.57640.firstD.46174
  # DEBUG __strD.57611 => &D.45850
  # DEBUG thisD.52863 => &D.45850
  # DEBUG D#113ptD.0 => &D.45850._M_dataplusD.14336
  # DEBUG thisD.57613 => &D.57640.firstD.46174
  # DEBUG D#114ptD.0 => &MEM[(struct basic_stringD.9877 *)&D.57640]._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#113ptD.0
  # DEBUG thisD.57616 => D#114ptD.0
  # DEBUG __datD.57615 => &MEM[(struct basic_stringD.9877 *)&D.57640].D.14356._M_local_bufD.14358
  # DEBUG __aD.57614 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#114ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2159 = VDEF <.MEM_2042>
  MEM[(struct _Alloc_hiderD.14335 *)&D.57640]._M_pD.14342 = &MEM[(struct basic_stringD.9877 *)&D.57640].D.14356._M_local_bufD.14358;
  # DEBUG D#532ptD.0 => MEM[(charD.10 * *)&D.45850]
  # DEBUG D#3ptD.0 => &D.45850
  # DEBUG thisD.52856 => D#3ptD.0
  # DEBUG D#531ptD.0 => MEM[(long unsigned intD.14 *)&D.45850 + 8B]
  # DEBUG D#4ptD.0 => &D.45850
  # DEBUG thisD.52853 => D#4ptD.0
  # PT = nonlocal escaped null { D.45850 } (escaped)
  _1194 = prephitmp_699 + prephitmp_698;
  # DEBUG D#3ptD.0 => &D.45850
  # DEBUG thisD.52850 => D#3ptD.0
  # DEBUG thisD.57619 => &D.57640.firstD.46174
  # DEBUG __begD.57618 => D#532ptD.0
  # DEBUG __endD.57617 => _1194
  # DEBUG thisD.57623 => &D.57640.firstD.46174
  # DEBUG __begD.57622 => D#532ptD.0
  # DEBUG __endD.57621 => _1194
  # DEBUG thisD.57733 => &D.57640.firstD.46174
  # DEBUG __begD.57734 => D#532ptD.0
  # DEBUG __endD.57735 => _1194
  # DEBUG __ptrD.52815 => D#532ptD.0
  # RANGE [0, 1]
  _1568 = _1194 != 0B;
  # RANGE [0, 1]
  _1580 = prephitmp_699 == 0B;
  # RANGE [0, 1]
  _1647 = _1568 & _1580;
  if (_1647 != 0)
    goto <bb 481>;
  else
    goto <bb 483>;
;;    succ:       481 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                483 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 170, loop depth 0, count 0, freq 102, maybe hot
;;    prev block 169, next block 171, flags: (NEW, REACHABLE)
;;    pred:       483 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  [LP 80] # .MEM_2161 = VDEF <.MEM_2160>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _1254 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.57640.firstD.46174, &__dnewD.57736, 0);
;;    succ:       171 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                421 (EH,EXECUTABLE)

;;   basic block 171, loop depth 0, count 0, freq 102, maybe hot
;;    prev block 170, next block 172, flags: (NEW, REACHABLE)
;;    pred:       170 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#5ptD.0 => &D.57640.firstD.46174
  # DEBUG __pD.57755 => _1254
  # DEBUG thisD.57754 => D#5ptD.0
  # .MEM_2162 = VDEF <.MEM_2161>
  MEM[(charD.10 * *)&D.57640] = _1254;
  # VUSE <.MEM_2162>
  __dnew.173_1255 = __dnewD.57736;
  # DEBUG D#6ptD.0 => &D.57640.firstD.46174
  # DEBUG __capacityD.57757 => __dnew.173_1255
  # DEBUG thisD.57756 => D#6ptD.0
  # .MEM_2163 = VDEF <.MEM_2162>
  MEM[(size_typeD.14319 *)&D.57640 + 16B] = __dnew.173_1255;
  # DEBUG D#3ptD.0 => &D.57640.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.57739 => _1254
  # DEBUG __k1D.57738 => D#532ptD.0
  # DEBUG __k2D.57737 => _1194
  # DEBUG __dD.57742 => _1254
  # DEBUG __sD.57741 => D#532ptD.0
  # DEBUG __nD.57740 => D#531ptD.0
  goto <bb 174>;
;;    succ:       174 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 172, loop depth 0, count 0, freq 249, maybe hot
;;    prev block 171, next block 173, flags: (NEW, REACHABLE)
;;    pred:       483 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#3ptD.0 => &D.57640.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.57739 => &MEM[(struct basic_stringD.9877 *)&D.57640].D.14356._M_local_bufD.14358
  # DEBUG __k1D.57738 => D#532ptD.0
  # DEBUG __k2D.57737 => _1194
  # DEBUG __dD.57742 => &MEM[(struct basic_stringD.9877 *)&D.57640].D.14356._M_local_bufD.14358
  # DEBUG __sD.57741 => D#532ptD.0
  # DEBUG __nD.57740 => D#531ptD.0
  if (prephitmp_698 == 1)
    goto <bb 173>;
  else
    goto <bb 174>;
;;    succ:       173 [53.3%]  (TRUE_VALUE,EXECUTABLE)
;;                174 [46.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 173, loop depth 0, count 0, freq 133, maybe hot
;;    prev block 172, next block 174, flags: (NEW, REACHABLE)
;;    pred:       172 [53.3%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2160>
  _1257 = MEM[(const char_typeD.10931 &)prephitmp_699];
  # DEBUG D#11ptD.0 => D#532ptD.0
  # DEBUG __c1D.57747 => &MEM[(struct basic_stringD.9877 *)&D.57640].D.14356._M_local_bufD.14358
  # DEBUG __c2D.57746 => D#11ptD.0
  # .MEM_2164 = VDEF <.MEM_2160>
  MEM[(char_typeD.10931 &)&D.57640 + 16] = _1257;
  goto <bb 175>;
;;    succ:       175 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 174, loop depth 0, count 0, freq 218, maybe hot
;;    prev block 173, next block 175, flags: (NEW, REACHABLE)
;;    pred:       172 [46.7%]  (FALSE_VALUE,EXECUTABLE)
;;                171 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_902 = PHI <.MEM_2160(172), .MEM_2163(171)>
  # PT = nonlocal escaped null { D.45850 D.57640 } (escaped)
  # _2081 = PHI <&MEM[(struct basic_stringD.9877 *)&D.57640].D.14356._M_local_bufD.14358(172), _1254(171)>
  # DEBUG D#3ptD.0 => &D.57640.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.57739 => _2081
  # DEBUG __k1D.57738 => D#532ptD.0
  # DEBUG __k2D.57737 => _1194
  # DEBUG __dD.57742 => _2081
  # DEBUG __sD.57741 => D#532ptD.0
  # DEBUG __nD.57740 => D#531ptD.0
  # DEBUG __s1D.57745 => _2081
  # DEBUG __s2D.57744 => D#532ptD.0
  # DEBUG __nD.57743 => D#531ptD.0
  # .MEM_2165 = VDEF <.MEM_902>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (_2081, prephitmp_699, prephitmp_698);
  # VUSE <.MEM_2165>
  pretmp_700 = __dnewD.57736;
  # VUSE <.MEM_2165>
  pretmp_703 = MEM[(charD.10 * *)&D.57640];
;;    succ:       175 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 175, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 174, next block 176, flags: (NEW, REACHABLE)
;;    pred:       173 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                174 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_991 = PHI <.MEM_2164(173), .MEM_2165(174)>
  # prephitmp_702 = PHI <prephitmp_698(173), pretmp_700(174)>
  # PT = nonlocal escaped null { D.45850 D.57640 } (escaped)
  # prephitmp_704 = PHI <&MEM[(struct basic_stringD.9877 *)&D.57640].D.14356._M_local_bufD.14358(173), pretmp_703(174)>
  # DEBUG D#530ptD.0 => __dnewD.57736
  # DEBUG thisD.57749 => &D.57640.firstD.46174
  # DEBUG __nD.57748 => D#530ptD.0
  # DEBUG D#7ptD.0 => &D.57640.firstD.46174
  # DEBUG __lengthD.57751 => D#530ptD.0
  # DEBUG thisD.57750 => D#7ptD.0
  # .MEM_2166 = VDEF <.MEM_991>
  MEM[(size_typeD.14319 *)&D.57640 + 8B] = prephitmp_702;
  # DEBUG D#3ptD.0 => &D.57640.firstD.46174
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.45850 D.57640 } (escaped)
  _1260 = prephitmp_704 + prephitmp_702;
  # DEBUG __c1D.57753 => _1260
  # DEBUG __c2D.57752 => D#11ptD.0
  # .MEM_2167 = VDEF <.MEM_2166>
  MEM[(char_typeD.10931 &)_1260] = 0;
  # .MEM_2168 = VDEF <.MEM_2167>
  __dnewD.57736 ={v} {CLOBBER};
  # .MEM_2169 = VDEF <.MEM_2168>
  D.57640.secondD.46175 = 0B;
  # DEBUG thisD.57603 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG __position$_M_nodeD.53347 => __i$_M_node_1463
  # DEBUG __xD.57601 => &D.57640
  # DEBUG thisD.53299 => NULL
  # DEBUG __itD.53298 => &__positionD.57602
  # DEBUG thisD.57606 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # .MEM_2170 = VDEF <.MEM_2169>
  MEM[(struct _Rb_tree_const_iteratorD.44806 *)&__posD.57605] = __i$_M_node_1463;
  # DEBUG __xD.57604 => &D.57640
  # DEBUG thisD.53249 => &__anD.57607
  # DEBUG __tD.53248 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __an$_M_tD.53242 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG D#143ptD.0 => &__anD.57607
  [LP 72] # .MEM_2171 = VDEF <.MEM_2170>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  D.57638 = _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPK6RouterPK4FlitiP9OutputSetbEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_INSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_ERKSI_RT_.isra.54.constprop.57D.54545 (&_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500, __posD.57605, &D.57640);
;;    succ:       176 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                180 (EH,EXECUTABLE)

;;   basic block 176, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 175, next block 177, flags: (NEW, REACHABLE)
;;    pred:       175 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_2171>
  # PT = nonlocal escaped 
  __i$_M_node_1195 = MEM[(struct _Rb_tree_iteratorD.44804 *)&D.57638];
  # DEBUG __i$_M_nodeD.57637 => __i$_M_node_1195
  # DEBUG thisD.57585 => &D.57640
  # DEBUG D#56ptD.0 => &D.57640.firstD.46174
  # DEBUG thisD.57586 => D#56ptD.0
  # DEBUG thisD.57587 => D#56ptD.0
  # DEBUG thisD.57596 => D#56ptD.0
  # VUSE <.MEM_2171>
  # PT = nonlocal escaped null { D.45850 D.57640 } (escaped)
  _1196 = MEM[(charD.10 * *)&D.57640];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.57597 => D#56ptD.0
  if (&MEM[(const struct basic_stringD.9877 *)&D.57640].D.14356._M_local_bufD.14358 != _1196)
    goto <bb 177>;
  else
    goto <bb 178>;
;;    succ:       177 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                178 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 177, loop depth 0, count 0, freq 245, maybe hot
;;    prev block 176, next block 178, flags: (NEW, REACHABLE)
;;    pred:       176 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.57589 => D#56ptD.0
  # DEBUG __sizeD.57588 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.57592 => _1196
  # DEBUG __aD.57590 => D#49ptD.0
  # DEBUG __nD.57591 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.57595 => _1196
  # DEBUG thisD.57593 => D#45ptD.0
  # DEBUG D.57594 => D#46ptD.0
  # .MEM_2172 = VDEF <.MEM_2171>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_1196);
;;    succ:       178 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 178, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 177, next block 179, flags: (NEW, REACHABLE)
;;    pred:       176 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                177 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_126 = PHI <.MEM_2171(176), .MEM_2172(177)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.57598 => D#55ptD.0
  # DEBUG thisD.57599 => D#55ptD.0
  # DEBUG thisD.57600 => D#55ptD.0
  # .MEM_2178 = VDEF <.MEM_126>
  D.57640 ={v} {CLOBBER};
  # VUSE <.MEM_2178>
  pretmp_2184 = MEM[(charD.10 * *)&D.45850];
;;    succ:       179 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 179, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 178, next block 180, flags: (NEW, REACHABLE)
;;    pred:       165 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                178 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                168 [78.3%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1197 = PHI <__i$_M_node_2404(165), __i$_M_node_1195(178), __i$_M_node_2404(168)>
  # .MEM_976 = PHI <.MEM_901(165), .MEM_2178(178), .MEM_901(168)>
  # PT = nonlocal escaped null { D.45850 } (escaped)
  # prephitmp_627 = PHI <pretmp_708(165), pretmp_2184(178), pretmp_708(168)>
  # DEBUG __i$_M_nodeD.57637 => __i$_M_node_1197
  # DEBUG thisD.53323 => &__iD.57567
  # DEBUG thisD.53324 => __i$_M_node_1197
  # DEBUG D#145ptD.0 => &MEM[(struct _Rb_tree_nodeD.44503 *)__i$_M_node_1197]._M_value_fieldD.46493
  # DEBUG __rD.51667 => D#145ptD.0
  # DEBUG D#147ptD.0 => {CLOBBER}
  # DEBUG __i$_M_nodeD.57637 => D#147ptD.0
  # .MEM_171 = VDEF <.MEM_976>
  MEM[(voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) &)__i$_M_node_1197 + 64] = _Z17dim_order_ni_meshPK6RouterPK4FlitiP9OutputSetbD.45544;
  # DEBUG thisD.53679 => &D.45850
  # DEBUG thisD.53680 => &D.45850
  # DEBUG thisD.53689 => &D.45850
  # DEBUG D#529ptD.0 => MEM[(charD.10 * *)&D.45850]
  # DEBUG D#3ptD.0 => &D.45850
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53690 => &D.45850
  if (&D.45850.D.14356._M_local_bufD.14358 != prephitmp_627)
    goto <bb 184>;
  else
    goto <bb 185>;
;;    succ:       184 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                185 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 180, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 179, next block 181, flags: (NEW, REACHABLE)
;;    pred:       175 (EH,EXECUTABLE)
<L95>: [LP 72]
  # DEBUG thisD.57569 => &D.57640
  # DEBUG D#56ptD.0 => &D.57640.firstD.46174
  # DEBUG thisD.57570 => D#56ptD.0
  # DEBUG thisD.57571 => D#56ptD.0
  # DEBUG thisD.57580 => D#56ptD.0
  # VUSE <.MEM_2171>
  # PT = nonlocal escaped null { D.45850 D.57640 } (escaped)
  _1199 = MEM[(charD.10 * *)&D.57640];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.57581 => D#56ptD.0
  if (&MEM[(const struct basic_stringD.9877 *)&D.57640].D.14356._M_local_bufD.14358 != _1199)
    goto <bb 181>;
  else
    goto <bb 182>;
;;    succ:       181 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                182 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 181, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 180, next block 182, flags: (NEW, REACHABLE)
;;    pred:       180 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.57573 => D#56ptD.0
  # DEBUG __sizeD.57572 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.57576 => _1199
  # DEBUG __aD.57574 => D#49ptD.0
  # DEBUG __nD.57575 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.57579 => _1199
  # DEBUG thisD.57577 => D#45ptD.0
  # DEBUG D.57578 => D#46ptD.0
  # .MEM_2179 = VDEF <.MEM_2171>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_1199);
;;    succ:       182 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 182, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 181, next block 183, flags: (NEW, REACHABLE)
;;    pred:       180 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                181 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_975 = PHI <.MEM_2171(180), .MEM_2179(181)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.57582 => D#55ptD.0
  # DEBUG thisD.57583 => D#55ptD.0
  # DEBUG thisD.57584 => D#55ptD.0
  # .MEM_2185 = VDEF <.MEM_975>
  D.57640 ={v} {CLOBBER};
  [LP 81] resx 140
;;    succ:       183 (EH,EXECUTABLE)

;;   basic block 183, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 182, next block 184, flags: (NEW)
;;    pred:       182 (EH,EXECUTABLE)
<L104>: [LP 81]
  goto <bb 422> (<L60>);
;;    succ:       422 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 184, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 183, next block 185, flags: (NEW, REACHABLE)
;;    pred:       179 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45850.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53682 => &D.45850
  # DEBUG __sizeD.53681 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45850
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45850
  # DEBUG D#51ptD.0 => &D.45850._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53685 => D#529ptD.0
  # DEBUG __aD.53683 => D#49ptD.0
  # DEBUG __nD.53684 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53688 => D#529ptD.0
  # DEBUG thisD.53686 => D#45ptD.0
  # DEBUG D.53687 => D#46ptD.0
  # .MEM_471 = VDEF <.MEM_171>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (prephitmp_627);
;;    succ:       185 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 185, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 184, next block 186, flags: (NEW, REACHABLE)
;;    pred:       179 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                184 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_146 = PHI <.MEM_171(179), .MEM_471(184)>
  # DEBUG D#55ptD.0 => &D.45850._M_dataplusD.14336
  # DEBUG thisD.53691 => D#55ptD.0
  # DEBUG thisD.53692 => D#55ptD.0
  # DEBUG thisD.53693 => D#55ptD.0
  # .MEM_172 = VDEF <.MEM_146>
  D.45850 ={v} {CLOBBER};
  # DEBUG thisD.53677 => &D.45849
  # DEBUG thisD.53678 => &D.45849
  # DEBUG D#30ptD.0 => &D.45852
  # DEBUG thisD.53676 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45852
  # DEBUG thisD.57762 => &D.45853
  # DEBUG __sD.57763 => "dim_order_pni_mesh"
  # DEBUG __aD.57764 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.57774 => &D.45853
  # DEBUG D#66ptD.0 => &D.45853._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.57777 => D#66ptD.0
  # DEBUG __datD.57776 => &D.45853.D.14356._M_local_bufD.14358
  # DEBUG __aD.57775 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2188 = VDEF <.MEM_172>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45853]._M_pD.14342 = &D.45853.D.14356._M_local_bufD.14358;
  # DEBUG __sD.57773 => "dim_order_pni_mesh"
  # DEBUG thisD.57767 => &D.45853
  # DEBUG __begD.57766 => "dim_order_pni_mesh"
  # DEBUG __endD.57765 => &MEM[(voidD.45 *)"dim_order_pni_mesh" + 18B]
  # DEBUG thisD.57771 => &D.45853
  # DEBUG __begD.57770 => "dim_order_pni_mesh"
  # DEBUG __endD.57769 => &MEM[(voidD.45 *)"dim_order_pni_mesh" + 18B]
  # DEBUG thisD.57778 => &D.45853
  # DEBUG __begD.57779 => "dim_order_pni_mesh"
  # DEBUG __endD.57780 => &MEM[(voidD.45 *)"dim_order_pni_mesh" + 18B]
  # DEBUG __ptrD.52815 => "dim_order_pni_mesh"
  # DEBUG __firstD.57804 => "dim_order_pni_mesh"
  # DEBUG __lastD.57803 => &MEM[(voidD.45 *)"dim_order_pni_mesh" + 18B]
  # DEBUG D#109ptD.0 => &__firstD.57804
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.57806 => "dim_order_pni_mesh"
  # DEBUG __lastD.57805 => &MEM[(voidD.45 *)"dim_order_pni_mesh" + 18B]
  # .MEM_2189 = VDEF <.MEM_2188>
  __dnewD.57781 = 18;
  # .MEM_2190 = VDEF <.MEM_2189>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _1270 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.45853, &__dnewD.57781, 0);
  # DEBUG D#5ptD.0 => &D.45853
  # DEBUG __pD.57800 => _1270
  # DEBUG thisD.57799 => D#5ptD.0
  # .MEM_2191 = VDEF <.MEM_2190>
  MEM[(charD.10 * *)&D.45853] = _1270;
  # VUSE <.MEM_2191>
  __dnew.173_1271 = __dnewD.57781;
  # DEBUG D#6ptD.0 => &D.45853
  # DEBUG __capacityD.57802 => __dnew.173_1271
  # DEBUG thisD.57801 => D#6ptD.0
  # .MEM_2192 = VDEF <.MEM_2191>
  MEM[(size_typeD.14319 *)&D.45853 + 16B] = __dnew.173_1271;
  # DEBUG D#3ptD.0 => &D.45853
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.57784 => _1270
  # DEBUG __k1D.57783 => "dim_order_pni_mesh"
  # DEBUG __k2D.57782 => &MEM[(voidD.45 *)"dim_order_pni_mesh" + 18B]
  # DEBUG __dD.57787 => _1270
  # DEBUG __sD.57786 => "dim_order_pni_mesh"
  # DEBUG __nD.57785 => 18
  # DEBUG __s1D.57790 => _1270
  # DEBUG __s2D.57789 => "dim_order_pni_mesh"
  # DEBUG __nD.57788 => 18
  # .MEM_2194 = VDEF <.MEM_2192>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (_1270, "dim_order_pni_mesh", 18);
  # VUSE <.MEM_2194>
  __dnew.173_1274 = __dnewD.57781;
  # DEBUG thisD.57794 => &D.45853
  # DEBUG __nD.57793 => __dnew.173_1274
  # DEBUG D#7ptD.0 => &D.45853
  # DEBUG __lengthD.57796 => __dnew.173_1274
  # DEBUG thisD.57795 => D#7ptD.0
  # .MEM_2195 = VDEF <.MEM_2194>
  MEM[(size_typeD.14319 *)&D.45853 + 8B] = __dnew.173_1274;
  # VUSE <.MEM_2195>
  # PT = nonlocal escaped null { D.45853 } (escaped)
  _1275 = MEM[(charD.10 * *)&D.45853];
  # DEBUG D#3ptD.0 => &D.45853
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.45853 } (escaped)
  _1276 = _1275 + __dnew.173_1274;
  # DEBUG __c1D.57798 => _1276
  # DEBUG __c2D.57797 => D#11ptD.0
  # .MEM_2196 = VDEF <.MEM_2195>
  MEM[(char_typeD.10931 &)_1276] = 0;
  # .MEM_2197 = VDEF <.MEM_2196>
  __dnewD.57781 ={v} {CLOBBER};
  [LP 40] # .MEM_176 = VDEF <.MEM_2197>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _177 = _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPK6RouterPK4FlitiP9OutputSetbESt4lessIS5_ESaISt4pairIKS5_SF_EEEixERSJ_.constprop.56D.54544 (&D.45853);
;;    succ:       425 (EH,EXECUTABLE)
;;                186 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 186, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 185, next block 187, flags: (NEW, REACHABLE)
;;    pred:       185 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_178 = VDEF <.MEM_176>
  *_177 = _Z18dim_order_pni_meshPK6RouterPK4FlitiP9OutputSetbD.45556;
  # DEBUG thisD.53697 => &D.45853
  # DEBUG thisD.53698 => &D.45853
  # DEBUG thisD.53707 => &D.45853
  # VUSE <.MEM_178>
  # PT = nonlocal escaped null { D.45853 } (escaped)
  _180 = MEM[(charD.10 * *)&D.45853];
  # DEBUG D#3ptD.0 => &D.45853
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53708 => &D.45853
  if (&D.45853.D.14356._M_local_bufD.14358 != _180)
    goto <bb 187>;
  else
    goto <bb 188>;
;;    succ:       187 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                188 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 187, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 186, next block 188, flags: (NEW, REACHABLE)
;;    pred:       186 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45853.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53700 => &D.45853
  # DEBUG __sizeD.53699 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45853
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45853
  # DEBUG D#51ptD.0 => &D.45853._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53703 => _180
  # DEBUG __aD.53701 => D#49ptD.0
  # DEBUG __nD.53702 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53706 => _180
  # DEBUG thisD.53704 => D#45ptD.0
  # DEBUG D.53705 => D#46ptD.0
  # .MEM_476 = VDEF <.MEM_178>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_180);
;;    succ:       188 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 188, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 187, next block 189, flags: (NEW, REACHABLE)
;;    pred:       186 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                187 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_139 = PHI <.MEM_178(186), .MEM_476(187)>
  # DEBUG D#55ptD.0 => &D.45853._M_dataplusD.14336
  # DEBUG thisD.53709 => D#55ptD.0
  # DEBUG thisD.53710 => D#55ptD.0
  # DEBUG thisD.53711 => D#55ptD.0
  # .MEM_179 = VDEF <.MEM_139>
  D.45853 ={v} {CLOBBER};
  # DEBUG thisD.53695 => &D.45852
  # DEBUG thisD.53696 => &D.45852
  # DEBUG D#30ptD.0 => &D.45855
  # DEBUG thisD.53694 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45855
  # DEBUG thisD.57883 => &D.45856
  # DEBUG __sD.57884 => "dim_order_torus"
  # DEBUG __aD.57885 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.57895 => &D.45856
  # DEBUG D#66ptD.0 => &D.45856._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.57898 => D#66ptD.0
  # DEBUG __datD.57897 => &D.45856.D.14356._M_local_bufD.14358
  # DEBUG __aD.57896 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2198 = VDEF <.MEM_179>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45856]._M_pD.14342 = &D.45856.D.14356._M_local_bufD.14358;
  # DEBUG __sD.57894 => "dim_order_torus"
  # DEBUG thisD.57888 => &D.45856
  # DEBUG __begD.57887 => "dim_order_torus"
  # DEBUG __endD.57886 => &MEM[(voidD.45 *)"dim_order_torus" + 15B]
  # DEBUG thisD.57892 => &D.45856
  # DEBUG __begD.57891 => "dim_order_torus"
  # DEBUG __endD.57890 => &MEM[(voidD.45 *)"dim_order_torus" + 15B]
  # DEBUG thisD.57899 => &D.45856
  # DEBUG __begD.57900 => "dim_order_torus"
  # DEBUG __endD.57901 => &MEM[(voidD.45 *)"dim_order_torus" + 15B]
  # DEBUG __ptrD.52815 => "dim_order_torus"
  # DEBUG __firstD.57925 => "dim_order_torus"
  # DEBUG __lastD.57924 => &MEM[(voidD.45 *)"dim_order_torus" + 15B]
  # DEBUG D#109ptD.0 => &__firstD.57925
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.57927 => "dim_order_torus"
  # DEBUG __lastD.57926 => &MEM[(voidD.45 *)"dim_order_torus" + 15B]
  # DEBUG __dnewD.57902 => 15
  # DEBUG D#3ptD.0 => &D.45856
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.57905 => &D.45856.D.14356._M_local_bufD.14358
  # DEBUG __k1D.57904 => "dim_order_torus"
  # DEBUG __k2D.57903 => &MEM[(voidD.45 *)"dim_order_torus" + 15B]
  # DEBUG __dD.57908 => &D.45856.D.14356._M_local_bufD.14358
  # DEBUG __sD.57907 => "dim_order_torus"
  # DEBUG __nD.57906 => 15
  # DEBUG __s1D.57911 => &D.45856.D.14356._M_local_bufD.14358
  # DEBUG __s2D.57910 => "dim_order_torus"
  # DEBUG __nD.57909 => 15
  # .MEM_2204 = VDEF <.MEM_2198>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&D.45856.D.14356._M_local_bufD.14358, "dim_order_torus", 15);
  # DEBUG thisD.57915 => &D.45856
  # DEBUG __nD.57914 => 15
  # DEBUG D#7ptD.0 => &D.45856
  # DEBUG __lengthD.57917 => 15
  # DEBUG thisD.57916 => D#7ptD.0
  # .MEM_2205 = VDEF <.MEM_2204>
  MEM[(size_typeD.14319 *)&D.45856 + 8B] = 15;
  # DEBUG D#3ptD.0 => &D.45856
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.57919 => &MEM[(voidD.45 *)&D.45856 + 31B]
  # DEBUG __c2D.57918 => D#11ptD.0
  # .MEM_2206 = VDEF <.MEM_2205>
  MEM[(char_typeD.10931 &)&D.45856 + 31] = 0;
  # DEBUG D#437ptD.0 => {CLOBBER}
  # DEBUG __dnewD.57902 => D#437ptD.0
  # DEBUG __kD.57807 => &D.45856
  # DEBUG thisD.57809 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG thisD.57872 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG __xD.57871 => &D.45856
  # DEBUG thisD.57928 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __kD.57929 => &D.45856
  # DEBUG thisD.57930 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # VUSE <.MEM_2206>
  # PT = nonlocal escaped 
  __i$_M_node_1307 = MEM[(struct _Rb_tree_node_baseD.6878 * *)&_Z19gRoutingFunctionMapB5cxx11D.42076 + 16B];
  # DEBUG D#31ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG thisD.52518 => D#31ptD.0
  # DEBUG D#96ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __xD.57934 => NULL
  # DEBUG __yD.57933 => NULL
  # DEBUG __kD.57932 => &D.45856
  # DEBUG __yD.57933 => &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732
  # DEBUG __xD.57934 => __i$_M_node_1307
  if (__i$_M_node_1307 == 0B)
    goto <bb 484>;
  else
    goto <bb 191>;
;;    succ:       484 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                191 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 189, loop depth 1, count 0, freq 9095, maybe hot
;;    prev block 188, next block 190, flags: (NEW, REACHABLE)
;;    pred:       197 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                198 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_1224 = PHI <__i$_M_node_1311(197), __i$_M_node_1312(198)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1223 = PHI <__i$_M_node_967(197), __i$_M_node_971(198)>
  # DEBUG __yD.57933 => __i$_M_node_1223
  # DEBUG __xD.57934 => __i$_M_node_1224
  if (__i$_M_node_1224 == 0B)
    goto <bb 199>;
  else
    goto <bb 190>;
;;    succ:       199 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                190 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 190, loop depth 1, count 0, freq 8276, maybe hot
;;    prev block 189, next block 191, flags: (NEW)
;;    pred:       189 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 192>;
;;    succ:       192 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 191, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 190, next block 192, flags: (NEW, REACHABLE)
;;    pred:       188 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       192 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 192, loop depth 1, count 0, freq 9094, maybe hot
;;    prev block 191, next block 193, flags: (NEW)
;;    pred:       191 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                190 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_824 = PHI <.MEM_2206(191), .MEM_824(190)>
  # PT = nonlocal escaped 
  # __i$_M_node_967 = PHI <__i$_M_node_1307(191), __i$_M_node_1224(190)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_971 = PHI <&MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732(191), __i$_M_node_1223(190)>
  # DEBUG __yD.57933 => __i$_M_node_971
  # DEBUG __xD.57934 => __i$_M_node_967
  # DEBUG __xD.57935 => __i$_M_node_967
  # DEBUG __xD.52453 => __i$_M_node_967
  # DEBUG thisD.52454 => __i$_M_node_967
  # DEBUG D#93ptD.0 => &MEM[(const struct _Rb_tree_nodeD.44503 *)__i$_M_node_967]._M_value_fieldD.46493
  # DEBUG __rD.52444 => D#93ptD.0
  # DEBUG __xD.57937 => D#93ptD.0
  # DEBUG thisD.57936 => D#60ptD.0
  # DEBUG D#368ptD.0 => &MEM[(const struct pairD.42073 &)__i$_M_node_967 + 32].firstD.46174
  # DEBUG D#94ptD.0 => &D#95ptD.0->_M_implD.44577._M_key_compareD.44731
  # DEBUG D#59ptD.0 => D#94ptD.0
  # DEBUG __xD.57940 => D#368ptD.0
  # DEBUG __yD.57939 => &D.45856
  # DEBUG thisD.57938 => D#59ptD.0
  # DEBUG __lhsD.57942 => D#368ptD.0
  # DEBUG __rhsD.57941 => &D.45856
  # DEBUG thisD.57944 => D#368ptD.0
  # DEBUG __strD.57945 => &D.45856
  # VUSE <.MEM_824>
  _1316 = MEM[(long unsigned intD.14 *)__i$_M_node_967 + 40B];
  # DEBUG D#1ptD.0 => D#368ptD.0
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.57946 => _1316
  # DEBUG D#1ptD.0 => &D.45856
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.57947 => 15
  # DEBUG __aD.57954 => &__sizeD.57946
  # DEBUG __bD.57953 => &__osizeD.57947
  # RANGE [0, 15] NONZERO 15
  __len_1999 = MIN_EXPR <_1316, 15>;
  # DEBUG __lenD.57948 => D#350ptD.0
  # DEBUG thisD.51798 => &D.45856
  # DEBUG D#3ptD.0 => &D.45856
  # DEBUG thisD.50676 => D#3ptD.0
  # VUSE <.MEM_824>
  # PT = nonlocal escaped 
  _1321 = MEM[(charD.10 * *)__i$_M_node_967 + 32B];
  # DEBUG D#3ptD.0 => D#368ptD.0
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.57957 => _1321
  # DEBUG __s2D.57956 => &D.45856.D.14356._M_local_bufD.14358
  # DEBUG __nD.57955 => D#350ptD.0
  # VUSE <.MEM_824>
  # USE = nonlocal escaped null { D.45856 } (escaped)
  __r_1322 = memcmpD.989 (_1321, &D.45856.D.14356._M_local_bufD.14358, __len_1999);
  # DEBUG __rD.57949 => NULL
  if (__r_1322 == 0)
    goto <bb 193>;
  else
    goto <bb 196>;
;;    succ:       193 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                196 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 193, loop depth 1, count 0, freq 5548, maybe hot
;;    prev block 192, next block 194, flags: (NEW, REACHABLE)
;;    pred:       192 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.57951 => _1316
  # DEBUG __n2D.57950 => 15
  # RANGE [0, 18446744073709551615]
  _1323 = _1316 - 15;
  __d_1324 = (const difference_typeD.14320) _1323;
  # DEBUG __dD.57952 => __d_1324
  if (__d_1324 > 2147483647)
    goto <bb 197>;
  else
    goto <bb 194>;
;;    succ:       197 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                194 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 194, loop depth 1, count 0, freq 2774, maybe hot
;;    prev block 193, next block 195, flags: (NEW, REACHABLE)
;;    pred:       193 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_1324 < -2147483648)
    goto <bb 198>;
  else
    goto <bb 195>;
;;    succ:       198 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                195 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 195, loop depth 1, count 0, freq 1387, maybe hot
;;    prev block 194, next block 196, flags: (NEW, REACHABLE)
;;    pred:       194 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_1325 = (intD.9) _1323;
;;    succ:       196 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 196, loop depth 1, count 0, freq 4933, maybe hot
;;    prev block 195, next block 197, flags: (NEW, REACHABLE)
;;    pred:       192 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                195 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_1326 = PHI <__r_1322(192), __r_1325(195)>
  # DEBUG __rD.57949 => __r_1326
  # DEBUG D#442ptD.0 => {CLOBBER}
  # DEBUG __sizeD.57946 => D#442ptD.0
  # DEBUG D#443ptD.0 => {CLOBBER}
  # DEBUG __osizeD.57947 => D#443ptD.0
  if (__r_1326 >= 0)
    goto <bb 197>;
  else
    goto <bb 198>;
;;    succ:       197 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                198 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 197, loop depth 1, count 0, freq 6639, maybe hot
;;    prev block 196, next block 198, flags: (NEW, REACHABLE)
;;    pred:       196 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                193 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.57949 => NULL
  # DEBUG __yD.57933 => __i$_M_node_967
  # VUSE <.MEM_824>
  # PT = nonlocal escaped 
  __i$_M_node_1311 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__i$_M_node_967 + 16B];
  # DEBUG D#37ptD.0 => __i$_M_node_967
  # DEBUG __xD.52486 => D#37ptD.0
  # DEBUG __xD.57934 => NULL
  goto <bb 189>;
;;    succ:       189 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 198, loop depth 1, count 0, freq 2455, maybe hot
;;    prev block 197, next block 199, flags: (NEW, REACHABLE)
;;    pred:       196 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                194 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.57949 => NULL
  # VUSE <.MEM_824>
  # PT = nonlocal escaped 
  __i$_M_node_1312 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__i$_M_node_967 + 24B];
  # DEBUG D#36ptD.0 => __i$_M_node_967
  # DEBUG __xD.52485 => D#36ptD.0
  # DEBUG __xD.57934 => NULL
  goto <bb 189>;
;;    succ:       189 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 199, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 198, next block 200, flags: (NEW, REACHABLE)
;;    pred:       189 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_2405 = PHI <__i$_M_node_1223(189)>
  # DEBUG thisD.52484 => NULL
  # DEBUG __xD.52483 => __i$_M_node_2405
  # DEBUG __i$_M_nodeD.57878 => __i$_M_node_2405
  # DEBUG thisD.57873 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG D#44ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG thisD.57874 => D#44ptD.0
  # DEBUG thisD.51662 => NULL
  # DEBUG __xD.51661 => &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732
  # DEBUG thisD.53255 => &__iD.57808
  # DEBUG __xD.53256 => NULL
  if (__i$_M_node_2405 == &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732)
    goto <bb 484>;
  else
    goto <bb 200>;
;;    succ:       484 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                200 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 200, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 199, next block 201, flags: (NEW, REACHABLE)
;;    pred:       199 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.53275 => &__iD.57808
  # DEBUG thisD.53276 => __i$_M_node_2405
  # DEBUG D#144ptD.0 => &MEM[(struct _Rb_tree_nodeD.44503 *)__i$_M_node_2405]._M_value_fieldD.46493
  # DEBUG __rD.51667 => D#144ptD.0
  # DEBUG D#369ptD.0 => &MEM[(struct pairD.42073 &)__i$_M_node_2405 + 32].firstD.46174
  # DEBUG D#35ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG thisD.53272 => D#35ptD.0
  # DEBUG D#34ptD.0 => D#35ptD.0
  # DEBUG D#33ptD.0 => &D#34ptD.0->_M_tD.44500
  # DEBUG D#32ptD.0 => D#33ptD.0
  # DEBUG thisD.51597 => D#32ptD.0
  # DEBUG __xD.57868 => &D.45856
  # DEBUG __yD.57867 => D#369ptD.0
  # DEBUG thisD.57866 => D#59ptD.0
  # DEBUG __lhsD.57870 => &D.45856
  # DEBUG __rhsD.57869 => D#369ptD.0
  # DEBUG thisD.57959 => &D.45856
  # DEBUG __strD.57960 => D#369ptD.0
  # DEBUG D#1ptD.0 => &D.45856
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.57961 => 15
  # VUSE <.MEM_824>
  _1329 = MEM[(long unsigned intD.14 *)__i$_M_node_2405 + 40B];
  # DEBUG D#1ptD.0 => D#369ptD.0
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.57962 => _1329
  # DEBUG __aD.57969 => &__sizeD.57961
  # DEBUG __bD.57968 => &__osizeD.57962
  if (_1329 <= 14)
    goto <bb 202>;
  else
    goto <bb 201>;
;;    succ:       202 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                201 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 201, loop depth 0, count 0, freq 383, maybe hot
;;    prev block 200, next block 202, flags: (NEW)
;;    pred:       200 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       202 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 202, loop depth 0, count 0, freq 765, maybe hot
;;    prev block 201, next block 203, flags: (NEW, REACHABLE)
;;    pred:       200 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                201 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 15] NONZERO 15
  # __len_1331 = PHI <_1329(200), 15(201)>
  # DEBUG __lenD.57963 => D#351ptD.0
  # DEBUG thisD.51798 => D#369ptD.0
  # VUSE <.MEM_824>
  # PT = nonlocal escaped 
  _1332 = MEM[(charD.10 * *)__i$_M_node_2405 + 32B];
  # DEBUG D#3ptD.0 => D#369ptD.0
  # DEBUG thisD.50676 => D#3ptD.0
  # DEBUG D#3ptD.0 => &D.45856
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.57972 => &D.45856.D.14356._M_local_bufD.14358
  # DEBUG __s2D.57971 => _1332
  # DEBUG __nD.57970 => D#351ptD.0
  # VUSE <.MEM_824>
  # USE = nonlocal escaped null { D.45856 } (escaped)
  __r_1334 = memcmpD.989 (&D.45856.D.14356._M_local_bufD.14358, _1332, __len_1331);
  # DEBUG __rD.57964 => NULL
  if (__r_1334 == 0)
    goto <bb 203>;
  else
    goto <bb 206>;
;;    succ:       203 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                206 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 203, loop depth 0, count 0, freq 466, maybe hot
;;    prev block 202, next block 204, flags: (NEW, REACHABLE)
;;    pred:       202 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.57966 => 15
  # DEBUG __n2D.57965 => _1329
  # RANGE [0, 18446744073709551615]
  _1335 = 15 - _1329;
  __d_1336 = (const difference_typeD.14320) _1335;
  # DEBUG __dD.57967 => __d_1336
  if (__d_1336 > 2147483647)
    goto <bb 211>;
  else
    goto <bb 204>;
;;    succ:       211 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                204 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 204, loop depth 0, count 0, freq 233, maybe hot
;;    prev block 203, next block 205, flags: (NEW, REACHABLE)
;;    pred:       203 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_1336 < -2147483648)
    goto <bb 207>;
  else
    goto <bb 205>;
;;    succ:       207 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                205 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 205, loop depth 0, count 0, freq 117, maybe hot
;;    prev block 204, next block 206, flags: (NEW, REACHABLE)
;;    pred:       204 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_1337 = (intD.9) _1335;
;;    succ:       206 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 206, loop depth 0, count 0, freq 415, maybe hot
;;    prev block 205, next block 207, flags: (NEW, REACHABLE)
;;    pred:       202 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                205 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_1338 = PHI <__r_1334(202), __r_1337(205)>
  # DEBUG __rD.57964 => __r_1338
  # DEBUG D#448ptD.0 => {CLOBBER}
  # DEBUG __sizeD.57961 => D#448ptD.0
  # DEBUG D#449ptD.0 => {CLOBBER}
  # DEBUG __osizeD.57962 => D#449ptD.0
  if (__r_1338 < 0)
    goto <bb 484>;
  else
    goto <bb 211>;
;;    succ:       484 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                211 [78.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 207, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 206, next block 208, flags: (NEW, REACHABLE)
;;    pred:       204 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                484 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2069 = PHI <.MEM_824(204), .MEM_740(484)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1228 = PHI <__i$_M_node_2405(204), __i$_M_node_1240(484)>
  # DEBUG thisD.57851 => &D.57881
  # DEBUG __aD.57850 => &D.45856
  # DEBUG __bD.57849 => NULL
  # DEBUG thisD.57853 => &D.57881.firstD.46174
  # DEBUG __strD.57852 => &D.45856
  # DEBUG thisD.52863 => &D.45856
  # DEBUG D#113ptD.0 => &D.45856._M_dataplusD.14336
  # DEBUG thisD.57854 => &D.57881.firstD.46174
  # DEBUG D#114ptD.0 => &MEM[(struct basic_stringD.9877 *)&D.57881]._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#113ptD.0
  # DEBUG thisD.57857 => D#114ptD.0
  # DEBUG __datD.57856 => &MEM[(struct basic_stringD.9877 *)&D.57881].D.14356._M_local_bufD.14358
  # DEBUG __aD.57855 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#114ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2220 = VDEF <.MEM_2069>
  MEM[(struct _Alloc_hiderD.14335 *)&D.57881]._M_pD.14342 = &MEM[(struct basic_stringD.9877 *)&D.57881].D.14356._M_local_bufD.14358;
  # DEBUG D#3ptD.0 => &D.45856
  # DEBUG thisD.52856 => D#3ptD.0
  # DEBUG D#4ptD.0 => &D.45856
  # DEBUG thisD.52853 => D#4ptD.0
  # DEBUG D#3ptD.0 => &D.45856
  # DEBUG thisD.52850 => D#3ptD.0
  # DEBUG thisD.57860 => &D.57881.firstD.46174
  # DEBUG __begD.57859 => &D.45856.D.14356._M_local_bufD.14358
  # DEBUG __endD.57858 => &MEM[(voidD.45 *)&D.45856 + 31B]
  # DEBUG thisD.57864 => &D.57881.firstD.46174
  # DEBUG __begD.57863 => &D.45856.D.14356._M_local_bufD.14358
  # DEBUG __endD.57862 => &MEM[(voidD.45 *)&D.45856 + 31B]
  # DEBUG thisD.57974 => &D.57881.firstD.46174
  # DEBUG __begD.57975 => &D.45856.D.14356._M_local_bufD.14358
  # DEBUG __endD.57976 => &MEM[(voidD.45 *)&D.45856 + 31B]
  # DEBUG __ptrD.52815 => &D.45856.D.14356._M_local_bufD.14358
  # DEBUG __firstD.58000 => &D.45856.D.14356._M_local_bufD.14358
  # DEBUG __lastD.57999 => &MEM[(voidD.45 *)&D.45856 + 31B]
  # DEBUG D#109ptD.0 => &__firstD.58000
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.58002 => &D.45856.D.14356._M_local_bufD.14358
  # DEBUG __lastD.58001 => &MEM[(voidD.45 *)&D.45856 + 31B]
  # DEBUG __dnewD.57977 => 15
  # DEBUG D#3ptD.0 => &D.57881.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.57980 => &MEM[(struct basic_stringD.9877 *)&D.57881].D.14356._M_local_bufD.14358
  # DEBUG __k1D.57979 => &D.45856.D.14356._M_local_bufD.14358
  # DEBUG __k2D.57978 => &MEM[(voidD.45 *)&D.45856 + 31B]
  # DEBUG __dD.57983 => &MEM[(struct basic_stringD.9877 *)&D.57881].D.14356._M_local_bufD.14358
  # DEBUG __sD.57982 => &D.45856.D.14356._M_local_bufD.14358
  # DEBUG __nD.57981 => 15
  # DEBUG __s1D.57986 => &MEM[(struct basic_stringD.9877 *)&D.57881].D.14356._M_local_bufD.14358
  # DEBUG __s2D.57985 => &D.45856.D.14356._M_local_bufD.14358
  # DEBUG __nD.57984 => 15
  # .MEM_2226 = VDEF <.MEM_2220>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&MEM[(struct basic_stringD.9877 *)&D.57881].D.14356._M_local_bufD.14358, &D.45856.D.14356._M_local_bufD.14358, 15);
  # DEBUG thisD.57990 => &D.57881.firstD.46174
  # DEBUG __nD.57989 => 15
  # DEBUG D#7ptD.0 => &D.57881.firstD.46174
  # DEBUG __lengthD.57992 => 15
  # DEBUG thisD.57991 => D#7ptD.0
  # .MEM_2227 = VDEF <.MEM_2226>
  MEM[(size_typeD.14319 *)&D.57881 + 8B] = 15;
  # DEBUG D#3ptD.0 => &D.57881.firstD.46174
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.57994 => &MEM[(voidD.45 *)&D.57881 + 31B]
  # DEBUG __c2D.57993 => D#11ptD.0
  # .MEM_2228 = VDEF <.MEM_2227>
  MEM[(char_typeD.10931 &)&D.57881 + 31] = 0;
  # DEBUG D#450ptD.0 => {CLOBBER}
  # DEBUG __dnewD.57977 => D#450ptD.0
  # .MEM_2230 = VDEF <.MEM_2228>
  D.57881.secondD.46175 = 0B;
  # DEBUG thisD.57844 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG __position$_M_nodeD.53347 => __i$_M_node_1228
  # DEBUG __xD.57842 => &D.57881
  # DEBUG thisD.53299 => NULL
  # DEBUG __itD.53298 => &__positionD.57843
  # DEBUG thisD.57847 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # .MEM_2231 = VDEF <.MEM_2230>
  MEM[(struct _Rb_tree_const_iteratorD.44806 *)&__posD.57846] = __i$_M_node_1228;
  # DEBUG __xD.57845 => &D.57881
  # DEBUG thisD.53249 => &__anD.57848
  # DEBUG __tD.53248 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __an$_M_tD.53242 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG D#143ptD.0 => &__anD.57848
  [LP 73] # .MEM_2232 = VDEF <.MEM_2231>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  D.57879 = _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPK6RouterPK4FlitiP9OutputSetbEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_INSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_ERKSI_RT_.isra.54.constprop.57D.54545 (&_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500, __posD.57846, &D.57881);
;;    succ:       208 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                212 (EH,EXECUTABLE)

;;   basic block 208, loop depth 0, count 0, freq 350, maybe hot
;;    prev block 207, next block 209, flags: (NEW, REACHABLE)
;;    pred:       207 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_2232>
  # PT = nonlocal escaped 
  __i$_M_node_1286 = MEM[(struct _Rb_tree_iteratorD.44804 *)&D.57879];
  # DEBUG __i$_M_nodeD.57878 => __i$_M_node_1286
  # DEBUG thisD.57826 => &D.57881
  # DEBUG D#56ptD.0 => &D.57881.firstD.46174
  # DEBUG thisD.57827 => D#56ptD.0
  # DEBUG thisD.57828 => D#56ptD.0
  # DEBUG thisD.57837 => D#56ptD.0
  # VUSE <.MEM_2232>
  # PT = nonlocal escaped null { D.45856 D.57881 } (escaped)
  _1287 = MEM[(charD.10 * *)&D.57881];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.57838 => D#56ptD.0
  if (&MEM[(const struct basic_stringD.9877 *)&D.57881].D.14356._M_local_bufD.14358 != _1287)
    goto <bb 209>;
  else
    goto <bb 210>;
;;    succ:       209 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                210 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 209, loop depth 0, count 0, freq 245, maybe hot
;;    prev block 208, next block 210, flags: (NEW, REACHABLE)
;;    pred:       208 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.57830 => D#56ptD.0
  # DEBUG __sizeD.57829 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.57833 => _1287
  # DEBUG __aD.57831 => D#49ptD.0
  # DEBUG __nD.57832 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.57836 => _1287
  # DEBUG thisD.57834 => D#45ptD.0
  # DEBUG D.57835 => D#46ptD.0
  # .MEM_2233 = VDEF <.MEM_2232>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_1287);
;;    succ:       210 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 210, loop depth 0, count 0, freq 350, maybe hot
;;    prev block 209, next block 211, flags: (NEW, REACHABLE)
;;    pred:       208 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                209 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_868 = PHI <.MEM_2232(208), .MEM_2233(209)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.57839 => D#55ptD.0
  # DEBUG thisD.57840 => D#55ptD.0
  # DEBUG thisD.57841 => D#55ptD.0
  # .MEM_2239 = VDEF <.MEM_868>
  D.57881 ={v} {CLOBBER};
  # VUSE <.MEM_2239>
  pretmp_630 = MEM[(charD.10 * *)&D.45856];
;;    succ:       211 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 211, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 210, next block 212, flags: (NEW, REACHABLE)
;;    pred:       203 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                210 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                206 [78.3%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1288 = PHI <__i$_M_node_2405(203), __i$_M_node_1286(210), __i$_M_node_2405(206)>
  # .MEM_94 = PHI <.MEM_824(203), .MEM_2239(210), .MEM_824(206)>
  # PT = nonlocal escaped { D.45856 } (escaped)
  # prephitmp_632 = PHI <&D.45856.D.14356._M_local_bufD.14358(203), pretmp_630(210), &D.45856.D.14356._M_local_bufD.14358(206)>
  # DEBUG __i$_M_nodeD.57878 => __i$_M_node_1288
  # DEBUG thisD.53323 => &__iD.57808
  # DEBUG thisD.53324 => __i$_M_node_1288
  # DEBUG D#145ptD.0 => &MEM[(struct _Rb_tree_nodeD.44503 *)__i$_M_node_1288]._M_value_fieldD.46493
  # DEBUG __rD.51667 => D#145ptD.0
  # DEBUG D#147ptD.0 => {CLOBBER}
  # DEBUG __i$_M_nodeD.57878 => D#147ptD.0
  # .MEM_185 = VDEF <.MEM_94>
  MEM[(voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) &)__i$_M_node_1288 + 64] = _Z15dim_order_torusPK6RouterPK4FlitiP9OutputSetbD.45696;
  # DEBUG thisD.53715 => &D.45856
  # DEBUG thisD.53716 => &D.45856
  # DEBUG thisD.53725 => &D.45856
  # DEBUG D#528ptD.0 => MEM[(charD.10 * *)&D.45856]
  # DEBUG D#3ptD.0 => &D.45856
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53726 => &D.45856
  if (&D.45856.D.14356._M_local_bufD.14358 != prephitmp_632)
    goto <bb 215>;
  else
    goto <bb 216>;
;;    succ:       215 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                216 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 212, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 211, next block 213, flags: (NEW, REACHABLE)
;;    pred:       207 (EH,EXECUTABLE)
<L96>: [LP 73]
  # DEBUG thisD.57810 => &D.57881
  # DEBUG D#56ptD.0 => &D.57881.firstD.46174
  # DEBUG thisD.57811 => D#56ptD.0
  # DEBUG thisD.57812 => D#56ptD.0
  # DEBUG thisD.57821 => D#56ptD.0
  # VUSE <.MEM_2232>
  # PT = nonlocal escaped null { D.45856 D.57881 } (escaped)
  _1290 = MEM[(charD.10 * *)&D.57881];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.57822 => D#56ptD.0
  if (&MEM[(const struct basic_stringD.9877 *)&D.57881].D.14356._M_local_bufD.14358 != _1290)
    goto <bb 213>;
  else
    goto <bb 214>;
;;    succ:       213 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                214 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 213, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 212, next block 214, flags: (NEW, REACHABLE)
;;    pred:       212 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.57814 => D#56ptD.0
  # DEBUG __sizeD.57813 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.57817 => _1290
  # DEBUG __aD.57815 => D#49ptD.0
  # DEBUG __nD.57816 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.57820 => _1290
  # DEBUG thisD.57818 => D#45ptD.0
  # DEBUG D.57819 => D#46ptD.0
  # .MEM_2240 = VDEF <.MEM_2232>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_1290);
;;    succ:       214 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 214, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 213, next block 215, flags: (NEW, REACHABLE)
;;    pred:       212 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                213 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_853 = PHI <.MEM_2232(212), .MEM_2240(213)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.57823 => D#55ptD.0
  # DEBUG thisD.57824 => D#55ptD.0
  # DEBUG thisD.57825 => D#55ptD.0
  # .MEM_2246 = VDEF <.MEM_853>
  D.57881 ={v} {CLOBBER};
  [LP 42] resx 141
;;    succ:       428 (EH,EXECUTABLE)

;;   basic block 215, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 214, next block 216, flags: (NEW, REACHABLE)
;;    pred:       211 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45856.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53718 => &D.45856
  # DEBUG __sizeD.53717 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45856
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45856
  # DEBUG D#51ptD.0 => &D.45856._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53721 => D#528ptD.0
  # DEBUG __aD.53719 => D#49ptD.0
  # DEBUG __nD.53720 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53724 => D#528ptD.0
  # DEBUG thisD.53722 => D#45ptD.0
  # DEBUG D.53723 => D#46ptD.0
  # .MEM_481 = VDEF <.MEM_185>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (prephitmp_632);
;;    succ:       216 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 216, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 215, next block 217, flags: (NEW, REACHABLE)
;;    pred:       211 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                215 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_132 = PHI <.MEM_185(211), .MEM_481(215)>
  # DEBUG D#55ptD.0 => &D.45856._M_dataplusD.14336
  # DEBUG thisD.53727 => D#55ptD.0
  # DEBUG thisD.53728 => D#55ptD.0
  # DEBUG thisD.53729 => D#55ptD.0
  # .MEM_186 = VDEF <.MEM_132>
  D.45856 ={v} {CLOBBER};
  # DEBUG thisD.53713 => &D.45855
  # DEBUG thisD.53714 => &D.45855
  # DEBUG D#30ptD.0 => &D.45858
  # DEBUG thisD.53712 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45858
  # DEBUG thisD.58079 => &D.45859
  # DEBUG __sD.58080 => "dim_order_ni_torus"
  # DEBUG __aD.58081 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.58091 => &D.45859
  # DEBUG D#66ptD.0 => &D.45859._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.58094 => D#66ptD.0
  # DEBUG __datD.58093 => &D.45859.D.14356._M_local_bufD.14358
  # DEBUG __aD.58092 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2249 = VDEF <.MEM_186>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45859]._M_pD.14342 = &D.45859.D.14356._M_local_bufD.14358;
  # DEBUG __sD.58090 => "dim_order_ni_torus"
  # DEBUG thisD.58084 => &D.45859
  # DEBUG __begD.58083 => "dim_order_ni_torus"
  # DEBUG __endD.58082 => &MEM[(voidD.45 *)"dim_order_ni_torus" + 18B]
  # DEBUG thisD.58088 => &D.45859
  # DEBUG __begD.58087 => "dim_order_ni_torus"
  # DEBUG __endD.58086 => &MEM[(voidD.45 *)"dim_order_ni_torus" + 18B]
  # DEBUG thisD.58095 => &D.45859
  # DEBUG __begD.58096 => "dim_order_ni_torus"
  # DEBUG __endD.58097 => &MEM[(voidD.45 *)"dim_order_ni_torus" + 18B]
  # DEBUG __ptrD.52815 => "dim_order_ni_torus"
  # DEBUG __firstD.58121 => "dim_order_ni_torus"
  # DEBUG __lastD.58120 => &MEM[(voidD.45 *)"dim_order_ni_torus" + 18B]
  # DEBUG D#109ptD.0 => &__firstD.58121
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.58123 => "dim_order_ni_torus"
  # DEBUG __lastD.58122 => &MEM[(voidD.45 *)"dim_order_ni_torus" + 18B]
  # .MEM_2250 = VDEF <.MEM_2249>
  __dnewD.58098 = 18;
  # .MEM_2251 = VDEF <.MEM_2250>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _1374 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.45859, &__dnewD.58098, 0);
  # DEBUG D#5ptD.0 => &D.45859
  # DEBUG __pD.58117 => _1374
  # DEBUG thisD.58116 => D#5ptD.0
  # .MEM_2252 = VDEF <.MEM_2251>
  MEM[(charD.10 * *)&D.45859] = _1374;
  # VUSE <.MEM_2252>
  __dnew.173_1375 = __dnewD.58098;
  # DEBUG D#6ptD.0 => &D.45859
  # DEBUG __capacityD.58119 => __dnew.173_1375
  # DEBUG thisD.58118 => D#6ptD.0
  # .MEM_2253 = VDEF <.MEM_2252>
  MEM[(size_typeD.14319 *)&D.45859 + 16B] = __dnew.173_1375;
  # DEBUG D#3ptD.0 => &D.45859
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.58101 => _1374
  # DEBUG __k1D.58100 => "dim_order_ni_torus"
  # DEBUG __k2D.58099 => &MEM[(voidD.45 *)"dim_order_ni_torus" + 18B]
  # DEBUG __dD.58104 => _1374
  # DEBUG __sD.58103 => "dim_order_ni_torus"
  # DEBUG __nD.58102 => 18
  # DEBUG __s1D.58107 => _1374
  # DEBUG __s2D.58106 => "dim_order_ni_torus"
  # DEBUG __nD.58105 => 18
  # .MEM_2255 = VDEF <.MEM_2253>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (_1374, "dim_order_ni_torus", 18);
  # VUSE <.MEM_2255>
  __dnew.173_1378 = __dnewD.58098;
  # DEBUG thisD.58111 => &D.45859
  # DEBUG __nD.58110 => __dnew.173_1378
  # DEBUG D#7ptD.0 => &D.45859
  # DEBUG __lengthD.58113 => __dnew.173_1378
  # DEBUG thisD.58112 => D#7ptD.0
  # .MEM_2256 = VDEF <.MEM_2255>
  MEM[(size_typeD.14319 *)&D.45859 + 8B] = __dnew.173_1378;
  # VUSE <.MEM_2256>
  # PT = nonlocal escaped null { D.45859 } (escaped)
  _1379 = MEM[(charD.10 * *)&D.45859];
  # DEBUG D#3ptD.0 => &D.45859
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.45859 } (escaped)
  _1380 = _1379 + __dnew.173_1378;
  # DEBUG __c1D.58115 => _1380
  # DEBUG __c2D.58114 => D#11ptD.0
  # .MEM_2257 = VDEF <.MEM_2256>
  MEM[(char_typeD.10931 &)_1380] = 0;
  # .MEM_2258 = VDEF <.MEM_2257>
  __dnewD.58098 ={v} {CLOBBER};
  # DEBUG __kD.58003 => &D.45859
  # DEBUG thisD.58005 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG thisD.58068 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG __xD.58067 => &D.45859
  # DEBUG thisD.58124 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __kD.58125 => &D.45859
  # DEBUG thisD.58126 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # VUSE <.MEM_2258>
  # PT = nonlocal escaped 
  __i$_M_node_1382 = MEM[(struct _Rb_tree_node_baseD.6878 * *)&_Z19gRoutingFunctionMapB5cxx11D.42076 + 16B];
  # DEBUG D#31ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG thisD.52518 => D#31ptD.0
  # DEBUG D#96ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __xD.58130 => NULL
  # DEBUG __yD.58129 => NULL
  # DEBUG __kD.58128 => &D.45859
  # DEBUG __yD.58129 => &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732
  # DEBUG __xD.58130 => __i$_M_node_1382
  if (__i$_M_node_1382 == 0B)
    goto <bb 485>;
  else
    goto <bb 217>;
;;    succ:       485 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                217 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 217, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 216, next block 218, flags: (NEW)
;;    pred:       216 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2258>
  pretmp_679 = MEM[(long unsigned intD.14 *)&D.45859 + 8B];
  # VUSE <.MEM_2258>
  # PT = nonlocal escaped null { D.45859 } (escaped)
  pretmp_682 = MEM[(charD.10 * *)&D.45859];
  goto <bb 220>;
;;    succ:       220 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 218, loop depth 1, count 0, freq 9093, maybe hot
;;    prev block 217, next block 219, flags: (NEW, REACHABLE)
;;    pred:       225 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                226 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_1132 = PHI <__i$_M_node_1386(225), __i$_M_node_1387(226)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1145 = PHI <__i$_M_node_112(225), __i$_M_node_1736(226)>
  # DEBUG __yD.58129 => __i$_M_node_1145
  # DEBUG __xD.58130 => __i$_M_node_1132
  if (__i$_M_node_1132 == 0B)
    goto <bb 227>;
  else
    goto <bb 219>;
;;    succ:       227 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                219 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 219, loop depth 1, count 0, freq 8275, maybe hot
;;    prev block 218, next block 220, flags: (NEW)
;;    pred:       218 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       220 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 220, loop depth 1, count 0, freq 9093, maybe hot
;;    prev block 219, next block 221, flags: (NEW, REACHABLE)
;;    pred:       217 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                219 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_793 = PHI <.MEM_2258(217), .MEM_793(219)>
  # PT = nonlocal escaped 
  # __i$_M_node_112 = PHI <__i$_M_node_1382(217), __i$_M_node_1132(219)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1736 = PHI <&MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732(217), __i$_M_node_1145(219)>
  # DEBUG __yD.58129 => __i$_M_node_1736
  # DEBUG __xD.58130 => __i$_M_node_112
  # DEBUG __xD.58131 => __i$_M_node_112
  # DEBUG __xD.52453 => __i$_M_node_112
  # DEBUG thisD.52454 => __i$_M_node_112
  # DEBUG D#93ptD.0 => &MEM[(const struct _Rb_tree_nodeD.44503 *)__i$_M_node_112]._M_value_fieldD.46493
  # DEBUG __rD.52444 => D#93ptD.0
  # DEBUG __xD.58133 => D#93ptD.0
  # DEBUG thisD.58132 => D#60ptD.0
  # DEBUG D#370ptD.0 => &MEM[(const struct pairD.42073 &)__i$_M_node_112 + 32].firstD.46174
  # DEBUG D#94ptD.0 => &D#95ptD.0->_M_implD.44577._M_key_compareD.44731
  # DEBUG D#59ptD.0 => D#94ptD.0
  # DEBUG __xD.58136 => D#370ptD.0
  # DEBUG __yD.58135 => &D.45859
  # DEBUG thisD.58134 => D#59ptD.0
  # DEBUG __lhsD.58138 => D#370ptD.0
  # DEBUG __rhsD.58137 => &D.45859
  # DEBUG thisD.58140 => D#370ptD.0
  # DEBUG __strD.58141 => &D.45859
  # VUSE <.MEM_793>
  _1391 = MEM[(long unsigned intD.14 *)__i$_M_node_112 + 40B];
  # DEBUG D#1ptD.0 => D#370ptD.0
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.58142 => _1391
  # DEBUG D#527ptD.0 => MEM[(long unsigned intD.14 *)&D.45859 + 8B]
  # DEBUG D#1ptD.0 => &D.45859
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.58143 => D#527ptD.0
  # DEBUG __aD.58150 => &__sizeD.58142
  # DEBUG __bD.58149 => &__osizeD.58143
  __len_1987 = MIN_EXPR <pretmp_679, _1391>;
  # DEBUG __lenD.58144 => D#352ptD.0
  # DEBUG thisD.51798 => &D.45859
  # DEBUG D#526ptD.0 => MEM[(charD.10 * *)&D.45859]
  # DEBUG D#3ptD.0 => &D.45859
  # DEBUG thisD.50676 => D#3ptD.0
  # VUSE <.MEM_793>
  # PT = nonlocal escaped 
  _1396 = MEM[(charD.10 * *)__i$_M_node_112 + 32B];
  # DEBUG D#3ptD.0 => D#370ptD.0
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.58153 => _1396
  # DEBUG __s2D.58152 => D#526ptD.0
  # DEBUG __nD.58151 => D#352ptD.0
  # VUSE <.MEM_793>
  # USE = nonlocal escaped null { D.45859 } (escaped)
  __r_1397 = memcmpD.989 (_1396, pretmp_682, __len_1987);
  # DEBUG __rD.58145 => NULL
  if (__r_1397 == 0)
    goto <bb 221>;
  else
    goto <bb 224>;
;;    succ:       221 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                224 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 221, loop depth 1, count 0, freq 5547, maybe hot
;;    prev block 220, next block 222, flags: (NEW, REACHABLE)
;;    pred:       220 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.58147 => _1391
  # DEBUG __n2D.58146 => D#527ptD.0
  # RANGE [0, 18446744073709551615]
  _1398 = _1391 - pretmp_679;
  __d_1399 = (const difference_typeD.14320) _1398;
  # DEBUG __dD.58148 => __d_1399
  if (__d_1399 > 2147483647)
    goto <bb 225>;
  else
    goto <bb 222>;
;;    succ:       225 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                222 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 222, loop depth 1, count 0, freq 2773, maybe hot
;;    prev block 221, next block 223, flags: (NEW, REACHABLE)
;;    pred:       221 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_1399 < -2147483648)
    goto <bb 226>;
  else
    goto <bb 223>;
;;    succ:       226 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                223 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 223, loop depth 1, count 0, freq 1387, maybe hot
;;    prev block 222, next block 224, flags: (NEW, REACHABLE)
;;    pred:       222 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_1400 = (intD.9) _1398;
;;    succ:       224 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 224, loop depth 1, count 0, freq 4932, maybe hot
;;    prev block 223, next block 225, flags: (NEW, REACHABLE)
;;    pred:       220 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                223 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_1401 = PHI <__r_1397(220), __r_1400(223)>
  # DEBUG __rD.58145 => __r_1401
  # DEBUG D#455ptD.0 => {CLOBBER}
  # DEBUG __sizeD.58142 => D#455ptD.0
  # DEBUG D#456ptD.0 => {CLOBBER}
  # DEBUG __osizeD.58143 => D#456ptD.0
  if (__r_1401 >= 0)
    goto <bb 225>;
  else
    goto <bb 226>;
;;    succ:       225 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                226 [21.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 225, loop depth 1, count 0, freq 6638, maybe hot
;;    prev block 224, next block 226, flags: (NEW, REACHABLE)
;;    pred:       224 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                221 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.58145 => NULL
  # DEBUG __yD.58129 => __i$_M_node_112
  # VUSE <.MEM_793>
  # PT = nonlocal escaped 
  __i$_M_node_1386 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__i$_M_node_112 + 16B];
  # DEBUG D#37ptD.0 => __i$_M_node_112
  # DEBUG __xD.52486 => D#37ptD.0
  # DEBUG __xD.58130 => NULL
  goto <bb 218>;
;;    succ:       218 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 226, loop depth 1, count 0, freq 2455, maybe hot
;;    prev block 225, next block 227, flags: (NEW, REACHABLE)
;;    pred:       224 [21.7%]  (FALSE_VALUE,EXECUTABLE)
;;                222 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.58145 => NULL
  # VUSE <.MEM_793>
  # PT = nonlocal escaped 
  __i$_M_node_1387 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__i$_M_node_112 + 24B];
  # DEBUG D#36ptD.0 => __i$_M_node_112
  # DEBUG __xD.52485 => D#36ptD.0
  # DEBUG __xD.58130 => NULL
  goto <bb 218>;
;;    succ:       218 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 227, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 226, next block 228, flags: (NEW, REACHABLE)
;;    pred:       218 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_2406 = PHI <__i$_M_node_1145(218)>
  # DEBUG thisD.52484 => NULL
  # DEBUG __xD.52483 => __i$_M_node_2406
  # DEBUG __i$_M_nodeD.58074 => __i$_M_node_2406
  # DEBUG thisD.58069 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG D#44ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG thisD.58070 => D#44ptD.0
  # DEBUG thisD.51662 => NULL
  # DEBUG __xD.51661 => &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732
  # DEBUG thisD.53255 => &__iD.58004
  # DEBUG __xD.53256 => NULL
  if (__i$_M_node_2406 == &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732)
    goto <bb 486>;
  else
    goto <bb 228>;
;;    succ:       486 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                228 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 228, loop depth 0, count 0, freq 764, maybe hot
;;    prev block 227, next block 229, flags: (NEW, REACHABLE)
;;    pred:       227 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.53275 => &__iD.58004
  # DEBUG thisD.53276 => __i$_M_node_2406
  # DEBUG D#144ptD.0 => &MEM[(struct _Rb_tree_nodeD.44503 *)__i$_M_node_2406]._M_value_fieldD.46493
  # DEBUG __rD.51667 => D#144ptD.0
  # DEBUG D#371ptD.0 => &MEM[(struct pairD.42073 &)__i$_M_node_2406 + 32].firstD.46174
  # DEBUG D#35ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG thisD.53272 => D#35ptD.0
  # DEBUG D#34ptD.0 => D#35ptD.0
  # DEBUG D#33ptD.0 => &D#34ptD.0->_M_tD.44500
  # DEBUG D#32ptD.0 => D#33ptD.0
  # DEBUG thisD.51597 => D#32ptD.0
  # DEBUG __xD.58064 => &D.45859
  # DEBUG __yD.58063 => D#371ptD.0
  # DEBUG thisD.58062 => D#59ptD.0
  # DEBUG __lhsD.58066 => &D.45859
  # DEBUG __rhsD.58065 => D#371ptD.0
  # DEBUG thisD.58155 => &D.45859
  # DEBUG __strD.58156 => D#371ptD.0
  # DEBUG D#525ptD.0 => MEM[(long unsigned intD.14 *)&D.45859 + 8B]
  # DEBUG D#1ptD.0 => &D.45859
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.58157 => D#525ptD.0
  # VUSE <.MEM_793>
  _1404 = MEM[(long unsigned intD.14 *)__i$_M_node_2406 + 40B];
  # DEBUG D#1ptD.0 => D#371ptD.0
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.58158 => _1404
  # DEBUG __aD.58165 => &__sizeD.58157
  # DEBUG __bD.58164 => &__osizeD.58158
  __len_1534 = MIN_EXPR <pretmp_679, _1404>;
  # DEBUG __lenD.58159 => D#353ptD.0
  # DEBUG thisD.51798 => D#371ptD.0
  # VUSE <.MEM_793>
  # PT = nonlocal escaped 
  _1407 = MEM[(charD.10 * *)__i$_M_node_2406 + 32B];
  # DEBUG D#3ptD.0 => D#371ptD.0
  # DEBUG thisD.50676 => D#3ptD.0
  # DEBUG D#524ptD.0 => MEM[(charD.10 * *)&D.45859]
  # DEBUG D#3ptD.0 => &D.45859
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.58168 => D#524ptD.0
  # DEBUG __s2D.58167 => _1407
  # DEBUG __nD.58166 => D#353ptD.0
  # VUSE <.MEM_793>
  # USE = nonlocal escaped null { D.45859 } (escaped)
  __r_1409 = memcmpD.989 (pretmp_682, _1407, __len_1534);
  # DEBUG __rD.58160 => NULL
  if (__r_1409 == 0)
    goto <bb 229>;
  else
    goto <bb 232>;
;;    succ:       229 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                232 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 229, loop depth 0, count 0, freq 466, maybe hot
;;    prev block 228, next block 230, flags: (NEW, REACHABLE)
;;    pred:       228 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.58162 => D#525ptD.0
  # DEBUG __n2D.58161 => _1404
  # RANGE [0, 18446744073709551615]
  _1410 = pretmp_679 - _1404;
  __d_1411 = (const difference_typeD.14320) _1410;
  # DEBUG __dD.58163 => __d_1411
  if (__d_1411 > 2147483647)
    goto <bb 243>;
  else
    goto <bb 230>;
;;    succ:       243 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                230 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 230, loop depth 0, count 0, freq 233, maybe hot
;;    prev block 229, next block 231, flags: (NEW, REACHABLE)
;;    pred:       229 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_1411 < -2147483648)
    goto <bb 233>;
  else
    goto <bb 231>;
;;    succ:       233 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                231 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 231, loop depth 0, count 0, freq 117, maybe hot
;;    prev block 230, next block 232, flags: (NEW, REACHABLE)
;;    pred:       230 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_1412 = (intD.9) _1410;
;;    succ:       232 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 232, loop depth 0, count 0, freq 414, maybe hot
;;    prev block 231, next block 233, flags: (NEW, REACHABLE)
;;    pred:       228 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                231 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_1413 = PHI <__r_1409(228), __r_1412(231)>
  # DEBUG __rD.58160 => __r_1413
  # DEBUG D#461ptD.0 => {CLOBBER}
  # DEBUG __sizeD.58157 => D#461ptD.0
  # DEBUG D#462ptD.0 => {CLOBBER}
  # DEBUG __osizeD.58158 => D#462ptD.0
  if (__r_1413 < 0)
    goto <bb 486>;
  else
    goto <bb 243>;
;;    succ:       486 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                243 [78.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 233, loop depth 0, count 0, freq 351, maybe hot
;;    prev block 232, next block 234, flags: (NEW, REACHABLE)
;;    pred:       230 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                486 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2068 = PHI <.MEM_793(230), .MEM_1837(486)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1149 = PHI <__i$_M_node_2406(230), __i$_M_node_898(486)>
  # prephitmp_672 = PHI <pretmp_679(230), prephitmp_634(486)>
  # PT = nonlocal escaped null { D.45859 } (escaped)
  # prephitmp_673 = PHI <pretmp_682(230), prephitmp_2119(486)>
  # DEBUG thisD.58047 => &D.58077
  # DEBUG __aD.58046 => &D.45859
  # DEBUG __bD.58045 => NULL
  # DEBUG thisD.58049 => &D.58077.firstD.46174
  # DEBUG __strD.58048 => &D.45859
  # DEBUG thisD.52863 => &D.45859
  # DEBUG D#113ptD.0 => &D.45859._M_dataplusD.14336
  # DEBUG thisD.58050 => &D.58077.firstD.46174
  # DEBUG D#114ptD.0 => &MEM[(struct basic_stringD.9877 *)&D.58077]._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#113ptD.0
  # DEBUG thisD.58053 => D#114ptD.0
  # DEBUG __datD.58052 => &MEM[(struct basic_stringD.9877 *)&D.58077].D.14356._M_local_bufD.14358
  # DEBUG __aD.58051 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#114ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2271 = VDEF <.MEM_2068>
  MEM[(struct _Alloc_hiderD.14335 *)&D.58077]._M_pD.14342 = &MEM[(struct basic_stringD.9877 *)&D.58077].D.14356._M_local_bufD.14358;
  # DEBUG D#523ptD.0 => MEM[(charD.10 * *)&D.45859]
  # DEBUG D#3ptD.0 => &D.45859
  # DEBUG thisD.52856 => D#3ptD.0
  # DEBUG D#522ptD.0 => MEM[(long unsigned intD.14 *)&D.45859 + 8B]
  # DEBUG D#4ptD.0 => &D.45859
  # DEBUG thisD.52853 => D#4ptD.0
  # PT = nonlocal escaped null { D.45859 } (escaped)
  _1360 = prephitmp_673 + prephitmp_672;
  # DEBUG D#3ptD.0 => &D.45859
  # DEBUG thisD.52850 => D#3ptD.0
  # DEBUG thisD.58056 => &D.58077.firstD.46174
  # DEBUG __begD.58055 => D#523ptD.0
  # DEBUG __endD.58054 => _1360
  # DEBUG thisD.58060 => &D.58077.firstD.46174
  # DEBUG __begD.58059 => D#523ptD.0
  # DEBUG __endD.58058 => _1360
  # DEBUG thisD.58170 => &D.58077.firstD.46174
  # DEBUG __begD.58171 => D#523ptD.0
  # DEBUG __endD.58172 => _1360
  # DEBUG __ptrD.52815 => D#523ptD.0
  # RANGE [0, 1]
  _1646 = _1360 != 0B;
  # RANGE [0, 1]
  _1659 = prephitmp_673 == 0B;
  # RANGE [0, 1]
  _1671 = _1646 & _1659;
  if (_1671 != 0)
    goto <bb 487>;
  else
    goto <bb 489>;
;;    succ:       487 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                489 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 234, loop depth 0, count 0, freq 102, maybe hot
;;    prev block 233, next block 235, flags: (NEW, REACHABLE)
;;    pred:       489 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  [LP 82] # .MEM_2273 = VDEF <.MEM_2272>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _1420 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.58077.firstD.46174, &__dnewD.58173, 0);
;;    succ:       235 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                431 (EH,EXECUTABLE)

;;   basic block 235, loop depth 0, count 0, freq 102, maybe hot
;;    prev block 234, next block 236, flags: (NEW, REACHABLE)
;;    pred:       234 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#5ptD.0 => &D.58077.firstD.46174
  # DEBUG __pD.58192 => _1420
  # DEBUG thisD.58191 => D#5ptD.0
  # .MEM_2274 = VDEF <.MEM_2273>
  MEM[(charD.10 * *)&D.58077] = _1420;
  # VUSE <.MEM_2274>
  __dnew.173_1421 = __dnewD.58173;
  # DEBUG D#6ptD.0 => &D.58077.firstD.46174
  # DEBUG __capacityD.58194 => __dnew.173_1421
  # DEBUG thisD.58193 => D#6ptD.0
  # .MEM_2275 = VDEF <.MEM_2274>
  MEM[(size_typeD.14319 *)&D.58077 + 16B] = __dnew.173_1421;
  # DEBUG D#3ptD.0 => &D.58077.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.58176 => _1420
  # DEBUG __k1D.58175 => D#523ptD.0
  # DEBUG __k2D.58174 => _1360
  # DEBUG __dD.58179 => _1420
  # DEBUG __sD.58178 => D#523ptD.0
  # DEBUG __nD.58177 => D#522ptD.0
  goto <bb 238>;
;;    succ:       238 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 236, loop depth 0, count 0, freq 248, maybe hot
;;    prev block 235, next block 237, flags: (NEW, REACHABLE)
;;    pred:       489 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#3ptD.0 => &D.58077.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.58176 => &MEM[(struct basic_stringD.9877 *)&D.58077].D.14356._M_local_bufD.14358
  # DEBUG __k1D.58175 => D#523ptD.0
  # DEBUG __k2D.58174 => _1360
  # DEBUG __dD.58179 => &MEM[(struct basic_stringD.9877 *)&D.58077].D.14356._M_local_bufD.14358
  # DEBUG __sD.58178 => D#523ptD.0
  # DEBUG __nD.58177 => D#522ptD.0
  if (prephitmp_672 == 1)
    goto <bb 237>;
  else
    goto <bb 238>;
;;    succ:       237 [53.4%]  (TRUE_VALUE,EXECUTABLE)
;;                238 [46.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 237, loop depth 0, count 0, freq 133, maybe hot
;;    prev block 236, next block 238, flags: (NEW, REACHABLE)
;;    pred:       236 [53.4%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2272>
  _1423 = MEM[(const char_typeD.10931 &)prephitmp_673];
  # DEBUG D#11ptD.0 => D#523ptD.0
  # DEBUG __c1D.58184 => &MEM[(struct basic_stringD.9877 *)&D.58077].D.14356._M_local_bufD.14358
  # DEBUG __c2D.58183 => D#11ptD.0
  # .MEM_2276 = VDEF <.MEM_2272>
  MEM[(char_typeD.10931 &)&D.58077 + 16] = _1423;
  goto <bb 239>;
;;    succ:       239 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 238, loop depth 0, count 0, freq 218, maybe hot
;;    prev block 237, next block 239, flags: (NEW, REACHABLE)
;;    pred:       236 [46.6%]  (FALSE_VALUE,EXECUTABLE)
;;                235 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1072 = PHI <.MEM_2272(236), .MEM_2275(235)>
  # PT = nonlocal escaped null { D.45859 D.58077 } (escaped)
  # _1264 = PHI <&MEM[(struct basic_stringD.9877 *)&D.58077].D.14356._M_local_bufD.14358(236), _1420(235)>
  # DEBUG D#3ptD.0 => &D.58077.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.58176 => _1264
  # DEBUG __k1D.58175 => D#523ptD.0
  # DEBUG __k2D.58174 => _1360
  # DEBUG __dD.58179 => _1264
  # DEBUG __sD.58178 => D#523ptD.0
  # DEBUG __nD.58177 => D#522ptD.0
  # DEBUG __s1D.58182 => _1264
  # DEBUG __s2D.58181 => D#523ptD.0
  # DEBUG __nD.58180 => D#522ptD.0
  # .MEM_2277 = VDEF <.MEM_1072>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (_1264, prephitmp_673, prephitmp_672);
  # VUSE <.MEM_2277>
  pretmp_674 = __dnewD.58173;
  # VUSE <.MEM_2277>
  pretmp_677 = MEM[(charD.10 * *)&D.58077];
;;    succ:       239 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 239, loop depth 0, count 0, freq 350, maybe hot
;;    prev block 238, next block 240, flags: (NEW, REACHABLE)
;;    pred:       237 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                238 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_821 = PHI <.MEM_2276(237), .MEM_2277(238)>
  # prephitmp_675 = PHI <prephitmp_672(237), pretmp_674(238)>
  # PT = nonlocal escaped null { D.45859 D.58077 } (escaped)
  # prephitmp_678 = PHI <&MEM[(struct basic_stringD.9877 *)&D.58077].D.14356._M_local_bufD.14358(237), pretmp_677(238)>
  # DEBUG D#521ptD.0 => __dnewD.58173
  # DEBUG thisD.58186 => &D.58077.firstD.46174
  # DEBUG __nD.58185 => D#521ptD.0
  # DEBUG D#7ptD.0 => &D.58077.firstD.46174
  # DEBUG __lengthD.58188 => D#521ptD.0
  # DEBUG thisD.58187 => D#7ptD.0
  # .MEM_2278 = VDEF <.MEM_821>
  MEM[(size_typeD.14319 *)&D.58077 + 8B] = prephitmp_675;
  # DEBUG D#3ptD.0 => &D.58077.firstD.46174
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.45859 D.58077 } (escaped)
  _1426 = prephitmp_678 + prephitmp_675;
  # DEBUG __c1D.58190 => _1426
  # DEBUG __c2D.58189 => D#11ptD.0
  # .MEM_2279 = VDEF <.MEM_2278>
  MEM[(char_typeD.10931 &)_1426] = 0;
  # .MEM_2280 = VDEF <.MEM_2279>
  __dnewD.58173 ={v} {CLOBBER};
  # .MEM_2281 = VDEF <.MEM_2280>
  D.58077.secondD.46175 = 0B;
  # DEBUG thisD.58040 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG __position$_M_nodeD.53347 => __i$_M_node_1149
  # DEBUG __xD.58038 => &D.58077
  # DEBUG thisD.53299 => NULL
  # DEBUG __itD.53298 => &__positionD.58039
  # DEBUG thisD.58043 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # .MEM_2282 = VDEF <.MEM_2281>
  MEM[(struct _Rb_tree_const_iteratorD.44806 *)&__posD.58042] = __i$_M_node_1149;
  # DEBUG __xD.58041 => &D.58077
  # DEBUG thisD.53249 => &__anD.58044
  # DEBUG __tD.53248 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __an$_M_tD.53242 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG D#143ptD.0 => &__anD.58044
  [LP 74] # .MEM_2283 = VDEF <.MEM_2282>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  D.58075 = _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPK6RouterPK4FlitiP9OutputSetbEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_INSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_ERKSI_RT_.isra.54.constprop.57D.54545 (&_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500, __posD.58042, &D.58077);
;;    succ:       240 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                244 (EH,EXECUTABLE)

;;   basic block 240, loop depth 0, count 0, freq 350, maybe hot
;;    prev block 239, next block 241, flags: (NEW, REACHABLE)
;;    pred:       239 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_2283>
  # PT = nonlocal escaped 
  __i$_M_node_1361 = MEM[(struct _Rb_tree_iteratorD.44804 *)&D.58075];
  # DEBUG __i$_M_nodeD.58074 => __i$_M_node_1361
  # DEBUG thisD.58022 => &D.58077
  # DEBUG D#56ptD.0 => &D.58077.firstD.46174
  # DEBUG thisD.58023 => D#56ptD.0
  # DEBUG thisD.58024 => D#56ptD.0
  # DEBUG thisD.58033 => D#56ptD.0
  # VUSE <.MEM_2283>
  # PT = nonlocal escaped null { D.45859 D.58077 } (escaped)
  _1362 = MEM[(charD.10 * *)&D.58077];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.58034 => D#56ptD.0
  if (&MEM[(const struct basic_stringD.9877 *)&D.58077].D.14356._M_local_bufD.14358 != _1362)
    goto <bb 241>;
  else
    goto <bb 242>;
;;    succ:       241 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                242 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 241, loop depth 0, count 0, freq 245, maybe hot
;;    prev block 240, next block 242, flags: (NEW, REACHABLE)
;;    pred:       240 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.58026 => D#56ptD.0
  # DEBUG __sizeD.58025 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.58029 => _1362
  # DEBUG __aD.58027 => D#49ptD.0
  # DEBUG __nD.58028 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.58032 => _1362
  # DEBUG thisD.58030 => D#45ptD.0
  # DEBUG D.58031 => D#46ptD.0
  # .MEM_2284 = VDEF <.MEM_2283>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_1362);
;;    succ:       242 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 242, loop depth 0, count 0, freq 350, maybe hot
;;    prev block 241, next block 243, flags: (NEW, REACHABLE)
;;    pred:       240 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                241 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_820 = PHI <.MEM_2283(240), .MEM_2284(241)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.58035 => D#55ptD.0
  # DEBUG thisD.58036 => D#55ptD.0
  # DEBUG thisD.58037 => D#55ptD.0
  # .MEM_2290 = VDEF <.MEM_820>
  D.58077 ={v} {CLOBBER};
  # VUSE <.MEM_2290>
  pretmp_2120 = MEM[(charD.10 * *)&D.45859];
;;    succ:       243 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 243, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 242, next block 244, flags: (NEW, REACHABLE)
;;    pred:       229 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                242 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                232 [78.3%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1363 = PHI <__i$_M_node_2406(229), __i$_M_node_1361(242), __i$_M_node_2406(232)>
  # .MEM_61 = PHI <.MEM_793(229), .MEM_2290(242), .MEM_793(232)>
  # PT = nonlocal escaped null { D.45859 } (escaped)
  # prephitmp_2121 = PHI <pretmp_682(229), pretmp_2120(242), pretmp_682(232)>
  # DEBUG __i$_M_nodeD.58074 => __i$_M_node_1363
  # DEBUG thisD.53323 => &__iD.58004
  # DEBUG thisD.53324 => __i$_M_node_1363
  # DEBUG D#145ptD.0 => &MEM[(struct _Rb_tree_nodeD.44503 *)__i$_M_node_1363]._M_value_fieldD.46493
  # DEBUG __rD.51667 => D#145ptD.0
  # DEBUG D#147ptD.0 => {CLOBBER}
  # DEBUG __i$_M_nodeD.58074 => D#147ptD.0
  # .MEM_192 = VDEF <.MEM_61>
  MEM[(voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) &)__i$_M_node_1363 + 64] = _Z18dim_order_ni_torusPK6RouterPK4FlitiP9OutputSetbD.45710;
  # DEBUG thisD.53733 => &D.45859
  # DEBUG thisD.53734 => &D.45859
  # DEBUG thisD.53743 => &D.45859
  # DEBUG D#520ptD.0 => MEM[(charD.10 * *)&D.45859]
  # DEBUG D#3ptD.0 => &D.45859
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53744 => &D.45859
  if (&D.45859.D.14356._M_local_bufD.14358 != prephitmp_2121)
    goto <bb 248>;
  else
    goto <bb 249>;
;;    succ:       248 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                249 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 244, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 243, next block 245, flags: (NEW, REACHABLE)
;;    pred:       239 (EH,EXECUTABLE)
<L97>: [LP 74]
  # DEBUG thisD.58006 => &D.58077
  # DEBUG D#56ptD.0 => &D.58077.firstD.46174
  # DEBUG thisD.58007 => D#56ptD.0
  # DEBUG thisD.58008 => D#56ptD.0
  # DEBUG thisD.58017 => D#56ptD.0
  # VUSE <.MEM_2283>
  # PT = nonlocal escaped null { D.45859 D.58077 } (escaped)
  _1365 = MEM[(charD.10 * *)&D.58077];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.58018 => D#56ptD.0
  if (&MEM[(const struct basic_stringD.9877 *)&D.58077].D.14356._M_local_bufD.14358 != _1365)
    goto <bb 245>;
  else
    goto <bb 246>;
;;    succ:       245 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                246 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 245, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 244, next block 246, flags: (NEW, REACHABLE)
;;    pred:       244 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.58010 => D#56ptD.0
  # DEBUG __sizeD.58009 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.58013 => _1365
  # DEBUG __aD.58011 => D#49ptD.0
  # DEBUG __nD.58012 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.58016 => _1365
  # DEBUG thisD.58014 => D#45ptD.0
  # DEBUG D.58015 => D#46ptD.0
  # .MEM_2291 = VDEF <.MEM_2283>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_1365);
;;    succ:       246 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 246, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 245, next block 247, flags: (NEW, REACHABLE)
;;    pred:       244 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                245 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_805 = PHI <.MEM_2283(244), .MEM_2291(245)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.58019 => D#55ptD.0
  # DEBUG thisD.58020 => D#55ptD.0
  # DEBUG thisD.58021 => D#55ptD.0
  # .MEM_2297 = VDEF <.MEM_805>
  D.58077 ={v} {CLOBBER};
  [LP 83] resx 142
;;    succ:       247 (EH,EXECUTABLE)

;;   basic block 247, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 246, next block 248, flags: (NEW)
;;    pred:       246 (EH,EXECUTABLE)
<L106>: [LP 83]
  goto <bb 432> (<L66>);
;;    succ:       432 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 248, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 247, next block 249, flags: (NEW, REACHABLE)
;;    pred:       243 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45859.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53736 => &D.45859
  # DEBUG __sizeD.53735 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45859
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45859
  # DEBUG D#51ptD.0 => &D.45859._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53739 => D#520ptD.0
  # DEBUG __aD.53737 => D#49ptD.0
  # DEBUG __nD.53738 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53742 => D#520ptD.0
  # DEBUG thisD.53740 => D#45ptD.0
  # DEBUG D.53741 => D#46ptD.0
  # .MEM_486 = VDEF <.MEM_192>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (prephitmp_2121);
;;    succ:       249 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 249, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 248, next block 250, flags: (NEW, REACHABLE)
;;    pred:       243 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                248 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_125 = PHI <.MEM_192(243), .MEM_486(248)>
  # DEBUG D#55ptD.0 => &D.45859._M_dataplusD.14336
  # DEBUG thisD.53745 => D#55ptD.0
  # DEBUG thisD.53746 => D#55ptD.0
  # DEBUG thisD.53747 => D#55ptD.0
  # .MEM_193 = VDEF <.MEM_125>
  D.45859 ={v} {CLOBBER};
  # DEBUG thisD.53731 => &D.45858
  # DEBUG thisD.53732 => &D.45858
  # DEBUG D#30ptD.0 => &D.45861
  # DEBUG thisD.53730 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45861
  # DEBUG thisD.58275 => &D.45862
  # DEBUG __sD.58276 => "dim_order_bal_torus"
  # DEBUG __aD.58277 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.58287 => &D.45862
  # DEBUG D#66ptD.0 => &D.45862._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.58290 => D#66ptD.0
  # DEBUG __datD.58289 => &D.45862.D.14356._M_local_bufD.14358
  # DEBUG __aD.58288 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2300 = VDEF <.MEM_193>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45862]._M_pD.14342 = &D.45862.D.14356._M_local_bufD.14358;
  # DEBUG __sD.58286 => "dim_order_bal_torus"
  # DEBUG thisD.58280 => &D.45862
  # DEBUG __begD.58279 => "dim_order_bal_torus"
  # DEBUG __endD.58278 => &MEM[(voidD.45 *)"dim_order_bal_torus" + 19B]
  # DEBUG thisD.58284 => &D.45862
  # DEBUG __begD.58283 => "dim_order_bal_torus"
  # DEBUG __endD.58282 => &MEM[(voidD.45 *)"dim_order_bal_torus" + 19B]
  # DEBUG thisD.58291 => &D.45862
  # DEBUG __begD.58292 => "dim_order_bal_torus"
  # DEBUG __endD.58293 => &MEM[(voidD.45 *)"dim_order_bal_torus" + 19B]
  # DEBUG __ptrD.52815 => "dim_order_bal_torus"
  # DEBUG __firstD.58317 => "dim_order_bal_torus"
  # DEBUG __lastD.58316 => &MEM[(voidD.45 *)"dim_order_bal_torus" + 19B]
  # DEBUG D#109ptD.0 => &__firstD.58317
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.58319 => "dim_order_bal_torus"
  # DEBUG __lastD.58318 => &MEM[(voidD.45 *)"dim_order_bal_torus" + 19B]
  # .MEM_2301 = VDEF <.MEM_2300>
  __dnewD.58294 = 19;
  # .MEM_2302 = VDEF <.MEM_2301>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _1449 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.45862, &__dnewD.58294, 0);
  # DEBUG D#5ptD.0 => &D.45862
  # DEBUG __pD.58313 => _1449
  # DEBUG thisD.58312 => D#5ptD.0
  # .MEM_2303 = VDEF <.MEM_2302>
  MEM[(charD.10 * *)&D.45862] = _1449;
  # VUSE <.MEM_2303>
  __dnew.173_1450 = __dnewD.58294;
  # DEBUG D#6ptD.0 => &D.45862
  # DEBUG __capacityD.58315 => __dnew.173_1450
  # DEBUG thisD.58314 => D#6ptD.0
  # .MEM_2304 = VDEF <.MEM_2303>
  MEM[(size_typeD.14319 *)&D.45862 + 16B] = __dnew.173_1450;
  # DEBUG D#3ptD.0 => &D.45862
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.58297 => _1449
  # DEBUG __k1D.58296 => "dim_order_bal_torus"
  # DEBUG __k2D.58295 => &MEM[(voidD.45 *)"dim_order_bal_torus" + 19B]
  # DEBUG __dD.58300 => _1449
  # DEBUG __sD.58299 => "dim_order_bal_torus"
  # DEBUG __nD.58298 => 19
  # DEBUG __s1D.58303 => _1449
  # DEBUG __s2D.58302 => "dim_order_bal_torus"
  # DEBUG __nD.58301 => 19
  # .MEM_2306 = VDEF <.MEM_2304>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (_1449, "dim_order_bal_torus", 19);
  # VUSE <.MEM_2306>
  __dnew.173_1453 = __dnewD.58294;
  # DEBUG thisD.58307 => &D.45862
  # DEBUG __nD.58306 => __dnew.173_1453
  # DEBUG D#7ptD.0 => &D.45862
  # DEBUG __lengthD.58309 => __dnew.173_1453
  # DEBUG thisD.58308 => D#7ptD.0
  # .MEM_2307 = VDEF <.MEM_2306>
  MEM[(size_typeD.14319 *)&D.45862 + 8B] = __dnew.173_1453;
  # VUSE <.MEM_2307>
  # PT = nonlocal escaped null { D.45862 } (escaped)
  _1454 = MEM[(charD.10 * *)&D.45862];
  # DEBUG D#3ptD.0 => &D.45862
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.45862 } (escaped)
  _1455 = _1454 + __dnew.173_1453;
  # DEBUG __c1D.58311 => _1455
  # DEBUG __c2D.58310 => D#11ptD.0
  # .MEM_2308 = VDEF <.MEM_2307>
  MEM[(char_typeD.10931 &)_1455] = 0;
  # .MEM_2309 = VDEF <.MEM_2308>
  __dnewD.58294 ={v} {CLOBBER};
  # DEBUG __kD.58199 => &D.45862
  # DEBUG thisD.58201 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG thisD.58264 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG __xD.58263 => &D.45862
  # DEBUG thisD.58320 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __kD.58321 => &D.45862
  # DEBUG thisD.58322 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # VUSE <.MEM_2309>
  # PT = nonlocal escaped 
  __i$_M_node_1457 = MEM[(struct _Rb_tree_node_baseD.6878 * *)&_Z19gRoutingFunctionMapB5cxx11D.42076 + 16B];
  # DEBUG D#31ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG thisD.52518 => D#31ptD.0
  # DEBUG D#96ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __xD.58326 => NULL
  # DEBUG __yD.58325 => NULL
  # DEBUG __kD.58324 => &D.45862
  # DEBUG __yD.58325 => &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732
  # DEBUG __xD.58326 => __i$_M_node_1457
  if (__i$_M_node_1457 == 0B)
    goto <bb 490>;
  else
    goto <bb 250>;
;;    succ:       490 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                250 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 250, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 249, next block 251, flags: (NEW)
;;    pred:       249 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2309>
  pretmp_665 = MEM[(long unsigned intD.14 *)&D.45862 + 8B];
  # VUSE <.MEM_2309>
  # PT = nonlocal escaped null { D.45862 } (escaped)
  pretmp_1978 = MEM[(charD.10 * *)&D.45862];
  goto <bb 253>;
;;    succ:       253 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 251, loop depth 1, count 0, freq 9092, maybe hot
;;    prev block 250, next block 252, flags: (NEW, REACHABLE)
;;    pred:       258 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                259 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_1054 = PHI <__i$_M_node_1461(258), __i$_M_node_1462(259)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1066 = PHI <__i$_M_node_245(258), __i$_M_node_1719(259)>
  # DEBUG __yD.58325 => __i$_M_node_1066
  # DEBUG __xD.58326 => __i$_M_node_1054
  if (__i$_M_node_1054 == 0B)
    goto <bb 260>;
  else
    goto <bb 252>;
;;    succ:       260 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                252 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 252, loop depth 1, count 0, freq 8274, maybe hot
;;    prev block 251, next block 253, flags: (NEW)
;;    pred:       251 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       253 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 253, loop depth 1, count 0, freq 9091, maybe hot
;;    prev block 252, next block 254, flags: (NEW, REACHABLE)
;;    pred:       250 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                252 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2366 = PHI <.MEM_2309(250), .MEM_2366(252)>
  # PT = nonlocal escaped 
  # __i$_M_node_245 = PHI <__i$_M_node_1457(250), __i$_M_node_1054(252)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1719 = PHI <&MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732(250), __i$_M_node_1066(252)>
  # DEBUG __yD.58325 => __i$_M_node_1719
  # DEBUG __xD.58326 => __i$_M_node_245
  # DEBUG __xD.58327 => __i$_M_node_245
  # DEBUG __xD.52453 => __i$_M_node_245
  # DEBUG thisD.52454 => __i$_M_node_245
  # DEBUG D#93ptD.0 => &MEM[(const struct _Rb_tree_nodeD.44503 *)__i$_M_node_245]._M_value_fieldD.46493
  # DEBUG __rD.52444 => D#93ptD.0
  # DEBUG __xD.58329 => D#93ptD.0
  # DEBUG thisD.58328 => D#60ptD.0
  # DEBUG D#372ptD.0 => &MEM[(const struct pairD.42073 &)__i$_M_node_245 + 32].firstD.46174
  # DEBUG D#94ptD.0 => &D#95ptD.0->_M_implD.44577._M_key_compareD.44731
  # DEBUG D#59ptD.0 => D#94ptD.0
  # DEBUG __xD.58332 => D#372ptD.0
  # DEBUG __yD.58331 => &D.45862
  # DEBUG thisD.58330 => D#59ptD.0
  # DEBUG __lhsD.58334 => D#372ptD.0
  # DEBUG __rhsD.58333 => &D.45862
  # DEBUG thisD.58336 => D#372ptD.0
  # DEBUG __strD.58337 => &D.45862
  # VUSE <.MEM_2366>
  _1466 = MEM[(long unsigned intD.14 *)__i$_M_node_245 + 40B];
  # DEBUG D#1ptD.0 => D#372ptD.0
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.58338 => _1466
  # DEBUG D#519ptD.0 => MEM[(long unsigned intD.14 *)&D.45862 + 8B]
  # DEBUG D#1ptD.0 => &D.45862
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.58339 => D#519ptD.0
  # DEBUG __aD.58346 => &__sizeD.58338
  # DEBUG __bD.58345 => &__osizeD.58339
  __len_1955 = MIN_EXPR <pretmp_665, _1466>;
  # DEBUG __lenD.58340 => D#354ptD.0
  # DEBUG thisD.51798 => &D.45862
  # DEBUG D#518ptD.0 => MEM[(charD.10 * *)&D.45862]
  # DEBUG D#3ptD.0 => &D.45862
  # DEBUG thisD.50676 => D#3ptD.0
  # VUSE <.MEM_2366>
  # PT = nonlocal escaped 
  _1471 = MEM[(charD.10 * *)__i$_M_node_245 + 32B];
  # DEBUG D#3ptD.0 => D#372ptD.0
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.58349 => _1471
  # DEBUG __s2D.58348 => D#518ptD.0
  # DEBUG __nD.58347 => D#354ptD.0
  # VUSE <.MEM_2366>
  # USE = nonlocal escaped null { D.45862 } (escaped)
  __r_1472 = memcmpD.989 (_1471, pretmp_1978, __len_1955);
  # DEBUG __rD.58341 => NULL
  if (__r_1472 == 0)
    goto <bb 254>;
  else
    goto <bb 257>;
;;    succ:       254 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                257 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 254, loop depth 1, count 0, freq 5546, maybe hot
;;    prev block 253, next block 255, flags: (NEW, REACHABLE)
;;    pred:       253 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.58343 => _1466
  # DEBUG __n2D.58342 => D#519ptD.0
  # RANGE [0, 18446744073709551615]
  _1473 = _1466 - pretmp_665;
  __d_1474 = (const difference_typeD.14320) _1473;
  # DEBUG __dD.58344 => __d_1474
  if (__d_1474 > 2147483647)
    goto <bb 258>;
  else
    goto <bb 255>;
;;    succ:       258 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                255 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 255, loop depth 1, count 0, freq 2773, maybe hot
;;    prev block 254, next block 256, flags: (NEW, REACHABLE)
;;    pred:       254 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_1474 < -2147483648)
    goto <bb 259>;
  else
    goto <bb 256>;
;;    succ:       259 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                256 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 256, loop depth 1, count 0, freq 1386, maybe hot
;;    prev block 255, next block 257, flags: (NEW, REACHABLE)
;;    pred:       255 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_1475 = (intD.9) _1473;
;;    succ:       257 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 257, loop depth 1, count 0, freq 4931, maybe hot
;;    prev block 256, next block 258, flags: (NEW, REACHABLE)
;;    pred:       253 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                256 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_1476 = PHI <__r_1472(253), __r_1475(256)>
  # DEBUG __rD.58341 => __r_1476
  # DEBUG D#467ptD.0 => {CLOBBER}
  # DEBUG __sizeD.58338 => D#467ptD.0
  # DEBUG D#468ptD.0 => {CLOBBER}
  # DEBUG __osizeD.58339 => D#468ptD.0
  if (__r_1476 >= 0)
    goto <bb 258>;
  else
    goto <bb 259>;
;;    succ:       258 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                259 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 258, loop depth 1, count 0, freq 6637, maybe hot
;;    prev block 257, next block 259, flags: (NEW, REACHABLE)
;;    pred:       257 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                254 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.58341 => NULL
  # DEBUG __yD.58325 => __i$_M_node_245
  # VUSE <.MEM_2366>
  # PT = nonlocal escaped 
  __i$_M_node_1461 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__i$_M_node_245 + 16B];
  # DEBUG D#37ptD.0 => __i$_M_node_245
  # DEBUG __xD.52486 => D#37ptD.0
  # DEBUG __xD.58326 => NULL
  goto <bb 251>;
;;    succ:       251 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 259, loop depth 1, count 0, freq 2455, maybe hot
;;    prev block 258, next block 260, flags: (NEW, REACHABLE)
;;    pred:       257 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                255 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.58341 => NULL
  # VUSE <.MEM_2366>
  # PT = nonlocal escaped 
  __i$_M_node_1462 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__i$_M_node_245 + 24B];
  # DEBUG D#36ptD.0 => __i$_M_node_245
  # DEBUG __xD.52485 => D#36ptD.0
  # DEBUG __xD.58326 => NULL
  goto <bb 251>;
;;    succ:       251 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 260, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 259, next block 261, flags: (NEW, REACHABLE)
;;    pred:       251 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_2407 = PHI <__i$_M_node_1066(251)>
  # DEBUG thisD.52484 => NULL
  # DEBUG __xD.52483 => __i$_M_node_2407
  # DEBUG __i$_M_nodeD.58270 => __i$_M_node_2407
  # DEBUG thisD.58265 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG D#44ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG thisD.58266 => D#44ptD.0
  # DEBUG thisD.51662 => NULL
  # DEBUG __xD.51661 => &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732
  # DEBUG thisD.53255 => &__iD.58200
  # DEBUG __xD.53256 => NULL
  if (__i$_M_node_2407 == &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732)
    goto <bb 491>;
  else
    goto <bb 261>;
;;    succ:       491 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                261 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 261, loop depth 0, count 0, freq 764, maybe hot
;;    prev block 260, next block 262, flags: (NEW, REACHABLE)
;;    pred:       260 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.53275 => &__iD.58200
  # DEBUG thisD.53276 => __i$_M_node_2407
  # DEBUG D#144ptD.0 => &MEM[(struct _Rb_tree_nodeD.44503 *)__i$_M_node_2407]._M_value_fieldD.46493
  # DEBUG __rD.51667 => D#144ptD.0
  # DEBUG D#373ptD.0 => &MEM[(struct pairD.42073 &)__i$_M_node_2407 + 32].firstD.46174
  # DEBUG D#35ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG thisD.53272 => D#35ptD.0
  # DEBUG D#34ptD.0 => D#35ptD.0
  # DEBUG D#33ptD.0 => &D#34ptD.0->_M_tD.44500
  # DEBUG D#32ptD.0 => D#33ptD.0
  # DEBUG thisD.51597 => D#32ptD.0
  # DEBUG __xD.58260 => &D.45862
  # DEBUG __yD.58259 => D#373ptD.0
  # DEBUG thisD.58258 => D#59ptD.0
  # DEBUG __lhsD.58262 => &D.45862
  # DEBUG __rhsD.58261 => D#373ptD.0
  # DEBUG thisD.58351 => &D.45862
  # DEBUG __strD.58352 => D#373ptD.0
  # DEBUG D#517ptD.0 => MEM[(long unsigned intD.14 *)&D.45862 + 8B]
  # DEBUG D#1ptD.0 => &D.45862
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.58353 => D#517ptD.0
  # VUSE <.MEM_2366>
  _1479 = MEM[(long unsigned intD.14 *)__i$_M_node_2407 + 40B];
  # DEBUG D#1ptD.0 => D#373ptD.0
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.58354 => _1479
  # DEBUG __aD.58361 => &__sizeD.58353
  # DEBUG __bD.58360 => &__osizeD.58354
  __len_1997 = MIN_EXPR <pretmp_665, _1479>;
  # DEBUG __lenD.58355 => D#355ptD.0
  # DEBUG thisD.51798 => D#373ptD.0
  # VUSE <.MEM_2366>
  # PT = nonlocal escaped 
  _1482 = MEM[(charD.10 * *)__i$_M_node_2407 + 32B];
  # DEBUG D#3ptD.0 => D#373ptD.0
  # DEBUG thisD.50676 => D#3ptD.0
  # DEBUG D#516ptD.0 => MEM[(charD.10 * *)&D.45862]
  # DEBUG D#3ptD.0 => &D.45862
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.58364 => D#516ptD.0
  # DEBUG __s2D.58363 => _1482
  # DEBUG __nD.58362 => D#355ptD.0
  # VUSE <.MEM_2366>
  # USE = nonlocal escaped null { D.45862 } (escaped)
  __r_1484 = memcmpD.989 (pretmp_1978, _1482, __len_1997);
  # DEBUG __rD.58356 => NULL
  if (__r_1484 == 0)
    goto <bb 262>;
  else
    goto <bb 265>;
;;    succ:       262 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                265 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 262, loop depth 0, count 0, freq 466, maybe hot
;;    prev block 261, next block 263, flags: (NEW, REACHABLE)
;;    pred:       261 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.58358 => D#517ptD.0
  # DEBUG __n2D.58357 => _1479
  # RANGE [0, 18446744073709551615]
  _1485 = pretmp_665 - _1479;
  __d_1486 = (const difference_typeD.14320) _1485;
  # DEBUG __dD.58359 => __d_1486
  if (__d_1486 > 2147483647)
    goto <bb 276>;
  else
    goto <bb 263>;
;;    succ:       276 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                263 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 263, loop depth 0, count 0, freq 233, maybe hot
;;    prev block 262, next block 264, flags: (NEW, REACHABLE)
;;    pred:       262 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_1486 < -2147483648)
    goto <bb 266>;
  else
    goto <bb 264>;
;;    succ:       266 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                264 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 264, loop depth 0, count 0, freq 117, maybe hot
;;    prev block 263, next block 265, flags: (NEW, REACHABLE)
;;    pred:       263 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_1487 = (intD.9) _1485;
;;    succ:       265 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 265, loop depth 0, count 0, freq 414, maybe hot
;;    prev block 264, next block 266, flags: (NEW, REACHABLE)
;;    pred:       261 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                264 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_1488 = PHI <__r_1484(261), __r_1487(264)>
  # DEBUG __rD.58356 => __r_1488
  # DEBUG D#473ptD.0 => {CLOBBER}
  # DEBUG __sizeD.58353 => D#473ptD.0
  # DEBUG D#474ptD.0 => {CLOBBER}
  # DEBUG __osizeD.58354 => D#474ptD.0
  if (__r_1488 < 0)
    goto <bb 491>;
  else
    goto <bb 276>;
;;    succ:       491 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                276 [78.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 266, loop depth 0, count 0, freq 350, maybe hot
;;    prev block 265, next block 267, flags: (NEW, REACHABLE)
;;    pred:       263 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                491 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2070 = PHI <.MEM_2366(263), .MEM_2019(491)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1046 = PHI <__i$_M_node_2407(263), __i$_M_node_1137(491)>
  # prephitmp_658 = PHI <pretmp_665(263), prephitmp_2123(491)>
  # PT = nonlocal escaped null { D.45862 } (escaped)
  # prephitmp_659 = PHI <pretmp_1978(263), prephitmp_638(491)>
  # DEBUG thisD.58243 => &D.58273
  # DEBUG __aD.58242 => &D.45862
  # DEBUG __bD.58241 => NULL
  # DEBUG thisD.58245 => &D.58273.firstD.46174
  # DEBUG __strD.58244 => &D.45862
  # DEBUG thisD.52863 => &D.45862
  # DEBUG D#113ptD.0 => &D.45862._M_dataplusD.14336
  # DEBUG thisD.58246 => &D.58273.firstD.46174
  # DEBUG D#114ptD.0 => &MEM[(struct basic_stringD.9877 *)&D.58273]._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#113ptD.0
  # DEBUG thisD.58249 => D#114ptD.0
  # DEBUG __datD.58248 => &MEM[(struct basic_stringD.9877 *)&D.58273].D.14356._M_local_bufD.14358
  # DEBUG __aD.58247 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#114ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2322 = VDEF <.MEM_2070>
  MEM[(struct _Alloc_hiderD.14335 *)&D.58273]._M_pD.14342 = &MEM[(struct basic_stringD.9877 *)&D.58273].D.14356._M_local_bufD.14358;
  # DEBUG D#515ptD.0 => MEM[(charD.10 * *)&D.45862]
  # DEBUG D#3ptD.0 => &D.45862
  # DEBUG thisD.52856 => D#3ptD.0
  # DEBUG D#514ptD.0 => MEM[(long unsigned intD.14 *)&D.45862 + 8B]
  # DEBUG D#4ptD.0 => &D.45862
  # DEBUG thisD.52853 => D#4ptD.0
  # PT = nonlocal escaped null { D.45862 } (escaped)
  _1435 = prephitmp_659 + prephitmp_658;
  # DEBUG D#3ptD.0 => &D.45862
  # DEBUG thisD.52850 => D#3ptD.0
  # DEBUG thisD.58252 => &D.58273.firstD.46174
  # DEBUG __begD.58251 => D#515ptD.0
  # DEBUG __endD.58250 => _1435
  # DEBUG thisD.58256 => &D.58273.firstD.46174
  # DEBUG __begD.58255 => D#515ptD.0
  # DEBUG __endD.58254 => _1435
  # DEBUG thisD.58366 => &D.58273.firstD.46174
  # DEBUG __begD.58367 => D#515ptD.0
  # DEBUG __endD.58368 => _1435
  # DEBUG __ptrD.52815 => D#515ptD.0
  # RANGE [0, 1]
  _2142 = _1435 != 0B;
  # RANGE [0, 1]
  _1796 = prephitmp_659 == 0B;
  # RANGE [0, 1]
  _196 = _1796 & _2142;
  if (_196 != 0)
    goto <bb 492>;
  else
    goto <bb 494>;
;;    succ:       492 [85.0%]  (TRUE_VALUE,EXECUTABLE)
;;                494 [15.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 267, loop depth 0, count 0, freq 102, maybe hot
;;    prev block 266, next block 268, flags: (NEW, REACHABLE)
;;    pred:       494 [29.0%]  (TRUE_VALUE,EXECUTABLE)
  [LP 84] # .MEM_2324 = VDEF <.MEM_2323>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _1495 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.58273.firstD.46174, &__dnewD.58369, 0);
;;    succ:       268 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                435 (EH,EXECUTABLE)

;;   basic block 268, loop depth 0, count 0, freq 102, maybe hot
;;    prev block 267, next block 269, flags: (NEW, REACHABLE)
;;    pred:       267 [100.0%]  (FALLTHRU,EXECUTABLE)
  # DEBUG D#5ptD.0 => &D.58273.firstD.46174
  # DEBUG __pD.58388 => _1495
  # DEBUG thisD.58387 => D#5ptD.0
  # .MEM_2325 = VDEF <.MEM_2324>
  MEM[(charD.10 * *)&D.58273] = _1495;
  # VUSE <.MEM_2325>
  __dnew.173_1496 = __dnewD.58369;
  # DEBUG D#6ptD.0 => &D.58273.firstD.46174
  # DEBUG __capacityD.58390 => __dnew.173_1496
  # DEBUG thisD.58389 => D#6ptD.0
  # .MEM_2326 = VDEF <.MEM_2325>
  MEM[(size_typeD.14319 *)&D.58273 + 16B] = __dnew.173_1496;
  # DEBUG D#3ptD.0 => &D.58273.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.58372 => _1495
  # DEBUG __k1D.58371 => D#515ptD.0
  # DEBUG __k2D.58370 => _1435
  # DEBUG __dD.58375 => _1495
  # DEBUG __sD.58374 => D#515ptD.0
  # DEBUG __nD.58373 => D#514ptD.0
  goto <bb 271>;
;;    succ:       271 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 269, loop depth 0, count 0, freq 248, maybe hot
;;    prev block 268, next block 270, flags: (NEW, REACHABLE)
;;    pred:       494 [71.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG D#3ptD.0 => &D.58273.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.58372 => &MEM[(struct basic_stringD.9877 *)&D.58273].D.14356._M_local_bufD.14358
  # DEBUG __k1D.58371 => D#515ptD.0
  # DEBUG __k2D.58370 => _1435
  # DEBUG __dD.58375 => &MEM[(struct basic_stringD.9877 *)&D.58273].D.14356._M_local_bufD.14358
  # DEBUG __sD.58374 => D#515ptD.0
  # DEBUG __nD.58373 => D#514ptD.0
  if (prephitmp_658 == 1)
    goto <bb 270>;
  else
    goto <bb 271>;
;;    succ:       270 [53.4%]  (TRUE_VALUE,EXECUTABLE)
;;                271 [46.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 270, loop depth 0, count 0, freq 133, maybe hot
;;    prev block 269, next block 271, flags: (NEW, REACHABLE)
;;    pred:       269 [53.4%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2323>
  _1498 = MEM[(const char_typeD.10931 &)prephitmp_659];
  # DEBUG D#11ptD.0 => D#515ptD.0
  # DEBUG __c1D.58380 => &MEM[(struct basic_stringD.9877 *)&D.58273].D.14356._M_local_bufD.14358
  # DEBUG __c2D.58379 => D#11ptD.0
  # .MEM_2327 = VDEF <.MEM_2323>
  MEM[(char_typeD.10931 &)&D.58273 + 16] = _1498;
  goto <bb 272>;
;;    succ:       272 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 271, loop depth 0, count 0, freq 218, maybe hot
;;    prev block 270, next block 272, flags: (NEW, REACHABLE)
;;    pred:       269 [46.6%]  (FALSE_VALUE,EXECUTABLE)
;;                268 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1075 = PHI <.MEM_2323(269), .MEM_2326(268)>
  # PT = nonlocal escaped null { D.45862 D.58273 } (escaped)
  # _1180 = PHI <&MEM[(struct basic_stringD.9877 *)&D.58273].D.14356._M_local_bufD.14358(269), _1495(268)>
  # DEBUG D#3ptD.0 => &D.58273.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.58372 => _1180
  # DEBUG __k1D.58371 => D#515ptD.0
  # DEBUG __k2D.58370 => _1435
  # DEBUG __dD.58375 => _1180
  # DEBUG __sD.58374 => D#515ptD.0
  # DEBUG __nD.58373 => D#514ptD.0
  # DEBUG __s1D.58378 => _1180
  # DEBUG __s2D.58377 => D#515ptD.0
  # DEBUG __nD.58376 => D#514ptD.0
  # .MEM_2328 = VDEF <.MEM_1075>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (_1180, prephitmp_659, prephitmp_658);
  # VUSE <.MEM_2328>
  pretmp_660 = __dnewD.58369;
  # VUSE <.MEM_2328>
  pretmp_663 = MEM[(charD.10 * *)&D.58273];
;;    succ:       272 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 272, loop depth 0, count 0, freq 350, maybe hot
;;    prev block 271, next block 273, flags: (NEW, REACHABLE)
;;    pred:       270 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                271 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_773 = PHI <.MEM_2327(270), .MEM_2328(271)>
  # prephitmp_662 = PHI <prephitmp_658(270), pretmp_660(271)>
  # PT = nonlocal escaped null { D.45862 D.58273 } (escaped)
  # prephitmp_664 = PHI <&MEM[(struct basic_stringD.9877 *)&D.58273].D.14356._M_local_bufD.14358(270), pretmp_663(271)>
  # DEBUG D#513ptD.0 => __dnewD.58369
  # DEBUG thisD.58382 => &D.58273.firstD.46174
  # DEBUG __nD.58381 => D#513ptD.0
  # DEBUG D#7ptD.0 => &D.58273.firstD.46174
  # DEBUG __lengthD.58384 => D#513ptD.0
  # DEBUG thisD.58383 => D#7ptD.0
  # .MEM_2329 = VDEF <.MEM_773>
  MEM[(size_typeD.14319 *)&D.58273 + 8B] = prephitmp_662;
  # DEBUG D#3ptD.0 => &D.58273.firstD.46174
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.45862 D.58273 } (escaped)
  _1501 = prephitmp_664 + prephitmp_662;
  # DEBUG __c1D.58386 => _1501
  # DEBUG __c2D.58385 => D#11ptD.0
  # .MEM_2330 = VDEF <.MEM_2329>
  MEM[(char_typeD.10931 &)_1501] = 0;
  # .MEM_2331 = VDEF <.MEM_2330>
  __dnewD.58369 ={v} {CLOBBER};
  # .MEM_2332 = VDEF <.MEM_2331>
  D.58273.secondD.46175 = 0B;
  # DEBUG thisD.58236 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG __position$_M_nodeD.53347 => __i$_M_node_1046
  # DEBUG __xD.58234 => &D.58273
  # DEBUG thisD.53299 => NULL
  # DEBUG __itD.53298 => &__positionD.58235
  # DEBUG thisD.58239 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # .MEM_2333 = VDEF <.MEM_2332>
  MEM[(struct _Rb_tree_const_iteratorD.44806 *)&__posD.58238] = __i$_M_node_1046;
  # DEBUG __xD.58237 => &D.58273
  # DEBUG thisD.53249 => &__anD.58240
  # DEBUG __tD.53248 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __an$_M_tD.53242 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG D#143ptD.0 => &__anD.58240
  [LP 75] # .MEM_2334 = VDEF <.MEM_2333>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  D.58271 = _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPK6RouterPK4FlitiP9OutputSetbEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_INSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_ERKSI_RT_.isra.54.constprop.57D.54545 (&_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500, __posD.58238, &D.58273);
;;    succ:       273 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                277 (EH,EXECUTABLE)

;;   basic block 273, loop depth 0, count 0, freq 350, maybe hot
;;    prev block 272, next block 274, flags: (NEW, REACHABLE)
;;    pred:       272 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_2334>
  # PT = nonlocal escaped 
  __i$_M_node_1436 = MEM[(struct _Rb_tree_iteratorD.44804 *)&D.58271];
  # DEBUG __i$_M_nodeD.58270 => __i$_M_node_1436
  # DEBUG thisD.58218 => &D.58273
  # DEBUG D#56ptD.0 => &D.58273.firstD.46174
  # DEBUG thisD.58219 => D#56ptD.0
  # DEBUG thisD.58220 => D#56ptD.0
  # DEBUG thisD.58229 => D#56ptD.0
  # VUSE <.MEM_2334>
  # PT = nonlocal escaped null { D.45862 D.58273 } (escaped)
  _1437 = MEM[(charD.10 * *)&D.58273];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.58230 => D#56ptD.0
  if (&MEM[(const struct basic_stringD.9877 *)&D.58273].D.14356._M_local_bufD.14358 != _1437)
    goto <bb 274>;
  else
    goto <bb 275>;
;;    succ:       274 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                275 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 274, loop depth 0, count 0, freq 245, maybe hot
;;    prev block 273, next block 275, flags: (NEW, REACHABLE)
;;    pred:       273 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.58222 => D#56ptD.0
  # DEBUG __sizeD.58221 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.58225 => _1437
  # DEBUG __aD.58223 => D#49ptD.0
  # DEBUG __nD.58224 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.58228 => _1437
  # DEBUG thisD.58226 => D#45ptD.0
  # DEBUG D.58227 => D#46ptD.0
  # .MEM_2335 = VDEF <.MEM_2334>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_1437);
;;    succ:       275 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 275, loop depth 0, count 0, freq 350, maybe hot
;;    prev block 274, next block 276, flags: (NEW, REACHABLE)
;;    pred:       273 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                274 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_772 = PHI <.MEM_2334(273), .MEM_2335(274)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.58231 => D#55ptD.0
  # DEBUG thisD.58232 => D#55ptD.0
  # DEBUG thisD.58233 => D#55ptD.0
  # .MEM_2341 = VDEF <.MEM_772>
  D.58273 ={v} {CLOBBER};
  # VUSE <.MEM_2341>
  pretmp_639 = MEM[(charD.10 * *)&D.45862];
;;    succ:       276 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 276, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 275, next block 277, flags: (NEW, REACHABLE)
;;    pred:       262 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                275 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                265 [78.3%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1438 = PHI <__i$_M_node_2407(262), __i$_M_node_1436(275), __i$_M_node_2407(265)>
  # .MEM_28 = PHI <.MEM_2366(262), .MEM_2341(275), .MEM_2366(265)>
  # PT = nonlocal escaped null { D.45862 } (escaped)
  # prephitmp_640 = PHI <pretmp_1978(262), pretmp_639(275), pretmp_1978(265)>
  # DEBUG __i$_M_nodeD.58270 => __i$_M_node_1438
  # DEBUG thisD.53323 => &__iD.58200
  # DEBUG thisD.53324 => __i$_M_node_1438
  # DEBUG D#145ptD.0 => &MEM[(struct _Rb_tree_nodeD.44503 *)__i$_M_node_1438]._M_value_fieldD.46493
  # DEBUG __rD.51667 => D#145ptD.0
  # DEBUG D#147ptD.0 => {CLOBBER}
  # DEBUG __i$_M_nodeD.58270 => D#147ptD.0
  # .MEM_199 = VDEF <.MEM_28>
  MEM[(voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) &)__i$_M_node_1438 + 64] = _Z19dim_order_bal_torusPK6RouterPK4FlitiP9OutputSetbD.45724;
  # DEBUG thisD.53751 => &D.45862
  # DEBUG thisD.53752 => &D.45862
  # DEBUG thisD.53761 => &D.45862
  # DEBUG D#512ptD.0 => MEM[(charD.10 * *)&D.45862]
  # DEBUG D#3ptD.0 => &D.45862
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53762 => &D.45862
  if (&D.45862.D.14356._M_local_bufD.14358 != prephitmp_640)
    goto <bb 281>;
  else
    goto <bb 282>;
;;    succ:       281 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                282 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 277, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 276, next block 278, flags: (NEW, REACHABLE)
;;    pred:       272 (EH,EXECUTABLE)
<L98>: [LP 75]
  # DEBUG thisD.58202 => &D.58273
  # DEBUG D#56ptD.0 => &D.58273.firstD.46174
  # DEBUG thisD.58203 => D#56ptD.0
  # DEBUG thisD.58204 => D#56ptD.0
  # DEBUG thisD.58213 => D#56ptD.0
  # VUSE <.MEM_2334>
  # PT = nonlocal escaped null { D.45862 D.58273 } (escaped)
  _1440 = MEM[(charD.10 * *)&D.58273];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.58214 => D#56ptD.0
  if (&MEM[(const struct basic_stringD.9877 *)&D.58273].D.14356._M_local_bufD.14358 != _1440)
    goto <bb 278>;
  else
    goto <bb 279>;
;;    succ:       278 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                279 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 278, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 277, next block 279, flags: (NEW, REACHABLE)
;;    pred:       277 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.58206 => D#56ptD.0
  # DEBUG __sizeD.58205 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.58209 => _1440
  # DEBUG __aD.58207 => D#49ptD.0
  # DEBUG __nD.58208 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.58212 => _1440
  # DEBUG thisD.58210 => D#45ptD.0
  # DEBUG D.58211 => D#46ptD.0
  # .MEM_2342 = VDEF <.MEM_2334>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_1440);
;;    succ:       279 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 279, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 278, next block 280, flags: (NEW, REACHABLE)
;;    pred:       277 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                278 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_757 = PHI <.MEM_2334(277), .MEM_2342(278)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.58215 => D#55ptD.0
  # DEBUG thisD.58216 => D#55ptD.0
  # DEBUG thisD.58217 => D#55ptD.0
  # .MEM_2348 = VDEF <.MEM_757>
  D.58273 ={v} {CLOBBER};
  [LP 85] resx 143
;;    succ:       280 (EH,EXECUTABLE)

;;   basic block 280, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 279, next block 281, flags: (NEW)
;;    pred:       279 (EH,EXECUTABLE)
<L108>: [LP 85]
  goto <bb 436> (<L68>);
;;    succ:       436 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 281, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 280, next block 282, flags: (NEW, REACHABLE)
;;    pred:       276 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45862.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53754 => &D.45862
  # DEBUG __sizeD.53753 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45862
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45862
  # DEBUG D#51ptD.0 => &D.45862._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53757 => D#512ptD.0
  # DEBUG __aD.53755 => D#49ptD.0
  # DEBUG __nD.53756 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53760 => D#512ptD.0
  # DEBUG thisD.53758 => D#45ptD.0
  # DEBUG D.53759 => D#46ptD.0
  # .MEM_491 = VDEF <.MEM_199>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (prephitmp_640);
;;    succ:       282 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 282, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 281, next block 283, flags: (NEW, REACHABLE)
;;    pred:       276 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                281 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_118 = PHI <.MEM_199(276), .MEM_491(281)>
  # DEBUG D#55ptD.0 => &D.45862._M_dataplusD.14336
  # DEBUG thisD.53763 => D#55ptD.0
  # DEBUG thisD.53764 => D#55ptD.0
  # DEBUG thisD.53765 => D#55ptD.0
  # .MEM_200 = VDEF <.MEM_118>
  D.45862 ={v} {CLOBBER};
  # DEBUG thisD.53749 => &D.45861
  # DEBUG thisD.53750 => &D.45861
  # DEBUG D#30ptD.0 => &D.45864
  # DEBUG thisD.53748 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45864
  # DEBUG thisD.58395 => &D.45865
  # DEBUG __sD.58396 => "romm_mesh"
  # DEBUG __aD.58397 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.58407 => &D.45865
  # DEBUG D#66ptD.0 => &D.45865._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.58410 => D#66ptD.0
  # DEBUG __datD.58409 => &D.45865.D.14356._M_local_bufD.14358
  # DEBUG __aD.58408 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2351 = VDEF <.MEM_200>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45865]._M_pD.14342 = &D.45865.D.14356._M_local_bufD.14358;
  # DEBUG __sD.58406 => "romm_mesh"
  # DEBUG thisD.58400 => &D.45865
  # DEBUG __begD.58399 => "romm_mesh"
  # DEBUG __endD.58398 => &MEM[(voidD.45 *)"romm_mesh" + 9B]
  # DEBUG thisD.58404 => &D.45865
  # DEBUG __begD.58403 => "romm_mesh"
  # DEBUG __endD.58402 => &MEM[(voidD.45 *)"romm_mesh" + 9B]
  # DEBUG thisD.58411 => &D.45865
  # DEBUG __begD.58412 => "romm_mesh"
  # DEBUG __endD.58413 => &MEM[(voidD.45 *)"romm_mesh" + 9B]
  # DEBUG __ptrD.52815 => "romm_mesh"
  # DEBUG __firstD.58437 => "romm_mesh"
  # DEBUG __lastD.58436 => &MEM[(voidD.45 *)"romm_mesh" + 9B]
  # DEBUG D#109ptD.0 => &__firstD.58437
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.58439 => "romm_mesh"
  # DEBUG __lastD.58438 => &MEM[(voidD.45 *)"romm_mesh" + 9B]
  # DEBUG __dnewD.58414 => 9
  # DEBUG D#3ptD.0 => &D.45865
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.58417 => &D.45865.D.14356._M_local_bufD.14358
  # DEBUG __k1D.58416 => "romm_mesh"
  # DEBUG __k2D.58415 => &MEM[(voidD.45 *)"romm_mesh" + 9B]
  # DEBUG __dD.58420 => &D.45865.D.14356._M_local_bufD.14358
  # DEBUG __sD.58419 => "romm_mesh"
  # DEBUG __nD.58418 => 9
  # DEBUG __s1D.58423 => &D.45865.D.14356._M_local_bufD.14358
  # DEBUG __s2D.58422 => "romm_mesh"
  # DEBUG __nD.58421 => 9
  # .MEM_2357 = VDEF <.MEM_2351>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&D.45865.D.14356._M_local_bufD.14358, "romm_mesh", 9);
  # DEBUG thisD.58427 => &D.45865
  # DEBUG __nD.58426 => 9
  # DEBUG D#7ptD.0 => &D.45865
  # DEBUG __lengthD.58429 => 9
  # DEBUG thisD.58428 => D#7ptD.0
  # .MEM_2358 = VDEF <.MEM_2357>
  MEM[(size_typeD.14319 *)&D.45865 + 8B] = 9;
  # DEBUG D#3ptD.0 => &D.45865
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.58431 => &MEM[(voidD.45 *)&D.45865 + 25B]
  # DEBUG __c2D.58430 => D#11ptD.0
  # .MEM_2359 = VDEF <.MEM_2358>
  MEM[(char_typeD.10931 &)&D.45865 + 25] = 0;
  # DEBUG D#475ptD.0 => {CLOBBER}
  # DEBUG __dnewD.58414 => D#475ptD.0
  [LP 48] # .MEM_204 = VDEF <.MEM_2359>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _205 = _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPK6RouterPK4FlitiP9OutputSetbESt4lessIS5_ESaISt4pairIKS5_SF_EEEixERSJ_.constprop.56D.54544 (&D.45865);
;;    succ:       439 (EH,EXECUTABLE)
;;                283 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 283, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 282, next block 284, flags: (NEW, REACHABLE)
;;    pred:       282 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_206 = VDEF <.MEM_204>
  *_205 = _Z9romm_meshPK6RouterPK4FlitiP9OutputSetbD.45585;
  # DEBUG thisD.53769 => &D.45865
  # DEBUG thisD.53770 => &D.45865
  # DEBUG thisD.53779 => &D.45865
  # VUSE <.MEM_206>
  # PT = nonlocal escaped { D.45865 } (escaped)
  _208 = MEM[(charD.10 * *)&D.45865];
  # DEBUG D#3ptD.0 => &D.45865
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53780 => &D.45865
  if (&D.45865.D.14356._M_local_bufD.14358 != _208)
    goto <bb 284>;
  else
    goto <bb 285>;
;;    succ:       284 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                285 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 284, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 283, next block 285, flags: (NEW, REACHABLE)
;;    pred:       283 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45865.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53772 => &D.45865
  # DEBUG __sizeD.53771 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45865
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45865
  # DEBUG D#51ptD.0 => &D.45865._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53775 => _208
  # DEBUG __aD.53773 => D#49ptD.0
  # DEBUG __nD.53774 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53778 => _208
  # DEBUG thisD.53776 => D#45ptD.0
  # DEBUG D.53777 => D#46ptD.0
  # .MEM_496 = VDEF <.MEM_206>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_208);
;;    succ:       285 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 285, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 284, next block 286, flags: (NEW, REACHABLE)
;;    pred:       283 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                284 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_111 = PHI <.MEM_206(283), .MEM_496(284)>
  # DEBUG D#55ptD.0 => &D.45865._M_dataplusD.14336
  # DEBUG thisD.53781 => D#55ptD.0
  # DEBUG thisD.53782 => D#55ptD.0
  # DEBUG thisD.53783 => D#55ptD.0
  # .MEM_207 = VDEF <.MEM_111>
  D.45865 ={v} {CLOBBER};
  # DEBUG thisD.53767 => &D.45864
  # DEBUG thisD.53768 => &D.45864
  # DEBUG D#30ptD.0 => &D.45867
  # DEBUG thisD.53766 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45867
  # DEBUG thisD.58516 => &D.45868
  # DEBUG __sD.58517 => "romm_ni_mesh"
  # DEBUG __aD.58518 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.58528 => &D.45868
  # DEBUG D#66ptD.0 => &D.45868._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.58531 => D#66ptD.0
  # DEBUG __datD.58530 => &D.45868.D.14356._M_local_bufD.14358
  # DEBUG __aD.58529 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2361 = VDEF <.MEM_207>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45868]._M_pD.14342 = &D.45868.D.14356._M_local_bufD.14358;
  # DEBUG __sD.58527 => "romm_ni_mesh"
  # DEBUG thisD.58521 => &D.45868
  # DEBUG __begD.58520 => "romm_ni_mesh"
  # DEBUG __endD.58519 => &MEM[(voidD.45 *)"romm_ni_mesh" + 12B]
  # DEBUG thisD.58525 => &D.45868
  # DEBUG __begD.58524 => "romm_ni_mesh"
  # DEBUG __endD.58523 => &MEM[(voidD.45 *)"romm_ni_mesh" + 12B]
  # DEBUG thisD.58532 => &D.45868
  # DEBUG __begD.58533 => "romm_ni_mesh"
  # DEBUG __endD.58534 => &MEM[(voidD.45 *)"romm_ni_mesh" + 12B]
  # DEBUG __ptrD.52815 => "romm_ni_mesh"
  # DEBUG __firstD.58558 => "romm_ni_mesh"
  # DEBUG __lastD.58557 => &MEM[(voidD.45 *)"romm_ni_mesh" + 12B]
  # DEBUG D#109ptD.0 => &__firstD.58558
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.58560 => "romm_ni_mesh"
  # DEBUG __lastD.58559 => &MEM[(voidD.45 *)"romm_ni_mesh" + 12B]
  # DEBUG __dnewD.58535 => 12
  # DEBUG D#3ptD.0 => &D.45868
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.58538 => &D.45868.D.14356._M_local_bufD.14358
  # DEBUG __k1D.58537 => "romm_ni_mesh"
  # DEBUG __k2D.58536 => &MEM[(voidD.45 *)"romm_ni_mesh" + 12B]
  # DEBUG __dD.58541 => &D.45868.D.14356._M_local_bufD.14358
  # DEBUG __sD.58540 => "romm_ni_mesh"
  # DEBUG __nD.58539 => 12
  # DEBUG __s1D.58544 => &D.45868.D.14356._M_local_bufD.14358
  # DEBUG __s2D.58543 => "romm_ni_mesh"
  # DEBUG __nD.58542 => 12
  # .MEM_2367 = VDEF <.MEM_2361>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&D.45868.D.14356._M_local_bufD.14358, "romm_ni_mesh", 12);
  # DEBUG thisD.58548 => &D.45868
  # DEBUG __nD.58547 => 12
  # DEBUG D#7ptD.0 => &D.45868
  # DEBUG __lengthD.58550 => 12
  # DEBUG thisD.58549 => D#7ptD.0
  # .MEM_2368 = VDEF <.MEM_2367>
  MEM[(size_typeD.14319 *)&D.45868 + 8B] = 12;
  # DEBUG D#3ptD.0 => &D.45868
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.58552 => &MEM[(voidD.45 *)&D.45868 + 28B]
  # DEBUG __c2D.58551 => D#11ptD.0
  # .MEM_2369 = VDEF <.MEM_2368>
  MEM[(char_typeD.10931 &)&D.45868 + 28] = 0;
  # DEBUG D#476ptD.0 => {CLOBBER}
  # DEBUG __dnewD.58535 => D#476ptD.0
  # DEBUG __kD.58440 => &D.45868
  # DEBUG thisD.58442 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG thisD.58505 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG __xD.58504 => &D.45868
  # DEBUG thisD.58561 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __kD.58562 => &D.45868
  # DEBUG thisD.58563 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # VUSE <.MEM_2369>
  # PT = nonlocal escaped 
  __i$_M_node_1548 = MEM[(struct _Rb_tree_node_baseD.6878 * *)&_Z19gRoutingFunctionMapB5cxx11D.42076 + 16B];
  # DEBUG D#31ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG thisD.52518 => D#31ptD.0
  # DEBUG D#96ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __xD.58567 => NULL
  # DEBUG __yD.58566 => NULL
  # DEBUG __kD.58565 => &D.45868
  # DEBUG __yD.58566 => &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732
  # DEBUG __xD.58567 => __i$_M_node_1548
  if (__i$_M_node_1548 == 0B)
    goto <bb 495>;
  else
    goto <bb 288>;
;;    succ:       495 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                288 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 286, loop depth 1, count 0, freq 9090, maybe hot
;;    prev block 285, next block 287, flags: (NEW, REACHABLE)
;;    pred:       294 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                295 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_943 = PHI <__i$_M_node_1552(294), __i$_M_node_1553(295)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1042 = PHI <__i$_M_node_1939(294), __i$_M_node_1597(295)>
  # DEBUG __yD.58566 => __i$_M_node_1042
  # DEBUG __xD.58567 => __i$_M_node_943
  if (__i$_M_node_943 == 0B)
    goto <bb 296>;
  else
    goto <bb 287>;
;;    succ:       296 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                287 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 287, loop depth 1, count 0, freq 8272, maybe hot
;;    prev block 286, next block 288, flags: (NEW)
;;    pred:       286 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 289>;
;;    succ:       289 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 288, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 287, next block 289, flags: (NEW, REACHABLE)
;;    pred:       285 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       289 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 289, loop depth 1, count 0, freq 9090, maybe hot
;;    prev block 288, next block 290, flags: (NEW)
;;    pred:       288 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                287 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1959 = PHI <.MEM_2369(288), .MEM_1959(287)>
  # PT = nonlocal escaped 
  # __i$_M_node_1939 = PHI <__i$_M_node_1548(288), __i$_M_node_943(287)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1597 = PHI <&MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732(288), __i$_M_node_1042(287)>
  # DEBUG __yD.58566 => __i$_M_node_1597
  # DEBUG __xD.58567 => __i$_M_node_1939
  # DEBUG __xD.58568 => __i$_M_node_1939
  # DEBUG __xD.52453 => __i$_M_node_1939
  # DEBUG thisD.52454 => __i$_M_node_1939
  # DEBUG D#93ptD.0 => &MEM[(const struct _Rb_tree_nodeD.44503 *)__i$_M_node_1939]._M_value_fieldD.46493
  # DEBUG __rD.52444 => D#93ptD.0
  # DEBUG __xD.58570 => D#93ptD.0
  # DEBUG thisD.58569 => D#60ptD.0
  # DEBUG D#374ptD.0 => &MEM[(const struct pairD.42073 &)__i$_M_node_1939 + 32].firstD.46174
  # DEBUG D#94ptD.0 => &D#95ptD.0->_M_implD.44577._M_key_compareD.44731
  # DEBUG D#59ptD.0 => D#94ptD.0
  # DEBUG __xD.58573 => D#374ptD.0
  # DEBUG __yD.58572 => &D.45868
  # DEBUG thisD.58571 => D#59ptD.0
  # DEBUG __lhsD.58575 => D#374ptD.0
  # DEBUG __rhsD.58574 => &D.45868
  # DEBUG thisD.58577 => D#374ptD.0
  # DEBUG __strD.58578 => &D.45868
  # VUSE <.MEM_1959>
  _1557 = MEM[(long unsigned intD.14 *)__i$_M_node_1939 + 40B];
  # DEBUG D#1ptD.0 => D#374ptD.0
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.58579 => _1557
  # DEBUG D#1ptD.0 => &D.45868
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.58580 => 12
  # DEBUG __aD.58587 => &__sizeD.58579
  # DEBUG __bD.58586 => &__osizeD.58580
  # RANGE [0, 12] NONZERO 15
  __len_1506 = MIN_EXPR <_1557, 12>;
  # DEBUG __lenD.58581 => D#356ptD.0
  # DEBUG thisD.51798 => &D.45868
  # DEBUG D#3ptD.0 => &D.45868
  # DEBUG thisD.50676 => D#3ptD.0
  # VUSE <.MEM_1959>
  # PT = nonlocal escaped 
  _1562 = MEM[(charD.10 * *)__i$_M_node_1939 + 32B];
  # DEBUG D#3ptD.0 => D#374ptD.0
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.58590 => _1562
  # DEBUG __s2D.58589 => &D.45868.D.14356._M_local_bufD.14358
  # DEBUG __nD.58588 => D#356ptD.0
  # VUSE <.MEM_1959>
  # USE = nonlocal escaped null { D.45868 } (escaped)
  __r_1563 = memcmpD.989 (_1562, &D.45868.D.14356._M_local_bufD.14358, __len_1506);
  # DEBUG __rD.58582 => NULL
  if (__r_1563 == 0)
    goto <bb 290>;
  else
    goto <bb 293>;
;;    succ:       290 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                293 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 290, loop depth 1, count 0, freq 5545, maybe hot
;;    prev block 289, next block 291, flags: (NEW, REACHABLE)
;;    pred:       289 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.58584 => _1557
  # DEBUG __n2D.58583 => 12
  # RANGE [0, 18446744073709551615]
  _1564 = _1557 - 12;
  __d_1565 = (const difference_typeD.14320) _1564;
  # DEBUG __dD.58585 => __d_1565
  if (__d_1565 > 2147483647)
    goto <bb 294>;
  else
    goto <bb 291>;
;;    succ:       294 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                291 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 291, loop depth 1, count 0, freq 2772, maybe hot
;;    prev block 290, next block 292, flags: (NEW, REACHABLE)
;;    pred:       290 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_1565 < -2147483648)
    goto <bb 295>;
  else
    goto <bb 292>;
;;    succ:       295 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                292 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 292, loop depth 1, count 0, freq 1386, maybe hot
;;    prev block 291, next block 293, flags: (NEW, REACHABLE)
;;    pred:       291 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_1566 = (intD.9) _1564;
;;    succ:       293 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 293, loop depth 1, count 0, freq 4931, maybe hot
;;    prev block 292, next block 294, flags: (NEW, REACHABLE)
;;    pred:       289 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                292 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_1567 = PHI <__r_1563(289), __r_1566(292)>
  # DEBUG __rD.58582 => __r_1567
  # DEBUG D#481ptD.0 => {CLOBBER}
  # DEBUG __sizeD.58579 => D#481ptD.0
  # DEBUG D#482ptD.0 => {CLOBBER}
  # DEBUG __osizeD.58580 => D#482ptD.0
  if (__r_1567 >= 0)
    goto <bb 294>;
  else
    goto <bb 295>;
;;    succ:       294 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                295 [21.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 294, loop depth 1, count 0, freq 6636, maybe hot
;;    prev block 293, next block 295, flags: (NEW, REACHABLE)
;;    pred:       293 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                290 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.58582 => NULL
  # DEBUG __yD.58566 => __i$_M_node_1939
  # VUSE <.MEM_1959>
  # PT = nonlocal escaped 
  __i$_M_node_1552 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__i$_M_node_1939 + 16B];
  # DEBUG D#37ptD.0 => __i$_M_node_1939
  # DEBUG __xD.52486 => D#37ptD.0
  # DEBUG __xD.58567 => NULL
  goto <bb 286>;
;;    succ:       286 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 295, loop depth 1, count 0, freq 2454, maybe hot
;;    prev block 294, next block 296, flags: (NEW, REACHABLE)
;;    pred:       293 [21.7%]  (FALSE_VALUE,EXECUTABLE)
;;                291 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.58582 => NULL
  # VUSE <.MEM_1959>
  # PT = nonlocal escaped 
  __i$_M_node_1553 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__i$_M_node_1939 + 24B];
  # DEBUG D#36ptD.0 => __i$_M_node_1939
  # DEBUG __xD.52485 => D#36ptD.0
  # DEBUG __xD.58567 => NULL
  goto <bb 286>;
;;    succ:       286 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 296, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 295, next block 297, flags: (NEW, REACHABLE)
;;    pred:       286 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_2408 = PHI <__i$_M_node_1042(286)>
  # DEBUG thisD.52484 => NULL
  # DEBUG __xD.52483 => __i$_M_node_2408
  # DEBUG __i$_M_nodeD.58511 => __i$_M_node_2408
  # DEBUG thisD.58506 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG D#44ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG thisD.58507 => D#44ptD.0
  # DEBUG thisD.51662 => NULL
  # DEBUG __xD.51661 => &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732
  # DEBUG thisD.53255 => &__iD.58441
  # DEBUG __xD.53256 => NULL
  if (__i$_M_node_2408 == &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732)
    goto <bb 495>;
  else
    goto <bb 297>;
;;    succ:       495 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                297 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 297, loop depth 0, count 0, freq 764, maybe hot
;;    prev block 296, next block 298, flags: (NEW, REACHABLE)
;;    pred:       296 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.53275 => &__iD.58441
  # DEBUG thisD.53276 => __i$_M_node_2408
  # DEBUG D#144ptD.0 => &MEM[(struct _Rb_tree_nodeD.44503 *)__i$_M_node_2408]._M_value_fieldD.46493
  # DEBUG __rD.51667 => D#144ptD.0
  # DEBUG D#375ptD.0 => &MEM[(struct pairD.42073 &)__i$_M_node_2408 + 32].firstD.46174
  # DEBUG D#35ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG thisD.53272 => D#35ptD.0
  # DEBUG D#34ptD.0 => D#35ptD.0
  # DEBUG D#33ptD.0 => &D#34ptD.0->_M_tD.44500
  # DEBUG D#32ptD.0 => D#33ptD.0
  # DEBUG thisD.51597 => D#32ptD.0
  # DEBUG __xD.58501 => &D.45868
  # DEBUG __yD.58500 => D#375ptD.0
  # DEBUG thisD.58499 => D#59ptD.0
  # DEBUG __lhsD.58503 => &D.45868
  # DEBUG __rhsD.58502 => D#375ptD.0
  # DEBUG thisD.58592 => &D.45868
  # DEBUG __strD.58593 => D#375ptD.0
  # DEBUG D#1ptD.0 => &D.45868
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.58594 => 12
  # VUSE <.MEM_1959>
  _1570 = MEM[(long unsigned intD.14 *)__i$_M_node_2408 + 40B];
  # DEBUG D#1ptD.0 => D#375ptD.0
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.58595 => _1570
  # DEBUG __aD.58602 => &__sizeD.58594
  # DEBUG __bD.58601 => &__osizeD.58595
  if (_1570 <= 11)
    goto <bb 299>;
  else
    goto <bb 298>;
;;    succ:       299 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                298 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 298, loop depth 0, count 0, freq 382, maybe hot
;;    prev block 297, next block 299, flags: (NEW)
;;    pred:       297 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       299 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 299, loop depth 0, count 0, freq 764, maybe hot
;;    prev block 298, next block 300, flags: (NEW, REACHABLE)
;;    pred:       297 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                298 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 12] NONZERO 15
  # __len_1572 = PHI <_1570(297), 12(298)>
  # DEBUG __lenD.58596 => D#357ptD.0
  # DEBUG thisD.51798 => D#375ptD.0
  # VUSE <.MEM_1959>
  # PT = nonlocal escaped 
  _1573 = MEM[(charD.10 * *)__i$_M_node_2408 + 32B];
  # DEBUG D#3ptD.0 => D#375ptD.0
  # DEBUG thisD.50676 => D#3ptD.0
  # DEBUG D#3ptD.0 => &D.45868
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.58605 => &D.45868.D.14356._M_local_bufD.14358
  # DEBUG __s2D.58604 => _1573
  # DEBUG __nD.58603 => D#357ptD.0
  # VUSE <.MEM_1959>
  # USE = nonlocal escaped null { D.45868 } (escaped)
  __r_1575 = memcmpD.989 (&D.45868.D.14356._M_local_bufD.14358, _1573, __len_1572);
  # DEBUG __rD.58597 => NULL
  if (__r_1575 == 0)
    goto <bb 300>;
  else
    goto <bb 303>;
;;    succ:       300 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                303 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 300, loop depth 0, count 0, freq 466, maybe hot
;;    prev block 299, next block 301, flags: (NEW, REACHABLE)
;;    pred:       299 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.58599 => 12
  # DEBUG __n2D.58598 => _1570
  # RANGE [0, 18446744073709551615]
  _1576 = 12 - _1570;
  __d_1577 = (const difference_typeD.14320) _1576;
  # DEBUG __dD.58600 => __d_1577
  if (__d_1577 > 2147483647)
    goto <bb 308>;
  else
    goto <bb 301>;
;;    succ:       308 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                301 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 301, loop depth 0, count 0, freq 233, maybe hot
;;    prev block 300, next block 302, flags: (NEW, REACHABLE)
;;    pred:       300 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_1577 < -2147483648)
    goto <bb 304>;
  else
    goto <bb 302>;
;;    succ:       304 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                302 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 302, loop depth 0, count 0, freq 117, maybe hot
;;    prev block 301, next block 303, flags: (NEW, REACHABLE)
;;    pred:       301 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_1578 = (intD.9) _1576;
;;    succ:       303 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 303, loop depth 0, count 0, freq 414, maybe hot
;;    prev block 302, next block 304, flags: (NEW, REACHABLE)
;;    pred:       299 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                302 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_1579 = PHI <__r_1575(299), __r_1578(302)>
  # DEBUG __rD.58597 => __r_1579
  # DEBUG D#487ptD.0 => {CLOBBER}
  # DEBUG __sizeD.58594 => D#487ptD.0
  # DEBUG D#488ptD.0 => {CLOBBER}
  # DEBUG __osizeD.58595 => D#488ptD.0
  if (__r_1579 < 0)
    goto <bb 495>;
  else
    goto <bb 308>;
;;    succ:       495 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                308 [78.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 304, loop depth 0, count 0, freq 350, maybe hot
;;    prev block 303, next block 305, flags: (NEW, REACHABLE)
;;    pred:       301 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                495 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1089 = PHI <.MEM_1959(301), .MEM_932(495)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1313 = PHI <__i$_M_node_2408(301), __i$_M_node_1308(495)>
  # DEBUG thisD.58484 => &D.58514
  # DEBUG __aD.58483 => &D.45868
  # DEBUG __bD.58482 => NULL
  # DEBUG thisD.58486 => &D.58514.firstD.46174
  # DEBUG __strD.58485 => &D.45868
  # DEBUG thisD.52863 => &D.45868
  # DEBUG D#113ptD.0 => &D.45868._M_dataplusD.14336
  # DEBUG thisD.58487 => &D.58514.firstD.46174
  # DEBUG D#114ptD.0 => &MEM[(struct basic_stringD.9877 *)&D.58514]._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#113ptD.0
  # DEBUG thisD.58490 => D#114ptD.0
  # DEBUG __datD.58489 => &MEM[(struct basic_stringD.9877 *)&D.58514].D.14356._M_local_bufD.14358
  # DEBUG __aD.58488 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#114ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2383 = VDEF <.MEM_1089>
  MEM[(struct _Alloc_hiderD.14335 *)&D.58514]._M_pD.14342 = &MEM[(struct basic_stringD.9877 *)&D.58514].D.14356._M_local_bufD.14358;
  # DEBUG D#3ptD.0 => &D.45868
  # DEBUG thisD.52856 => D#3ptD.0
  # DEBUG D#4ptD.0 => &D.45868
  # DEBUG thisD.52853 => D#4ptD.0
  # DEBUG D#3ptD.0 => &D.45868
  # DEBUG thisD.52850 => D#3ptD.0
  # DEBUG thisD.58493 => &D.58514.firstD.46174
  # DEBUG __begD.58492 => &D.45868.D.14356._M_local_bufD.14358
  # DEBUG __endD.58491 => &MEM[(voidD.45 *)&D.45868 + 28B]
  # DEBUG thisD.58497 => &D.58514.firstD.46174
  # DEBUG __begD.58496 => &D.45868.D.14356._M_local_bufD.14358
  # DEBUG __endD.58495 => &MEM[(voidD.45 *)&D.45868 + 28B]
  # DEBUG thisD.58607 => &D.58514.firstD.46174
  # DEBUG __begD.58608 => &D.45868.D.14356._M_local_bufD.14358
  # DEBUG __endD.58609 => &MEM[(voidD.45 *)&D.45868 + 28B]
  # DEBUG __ptrD.52815 => &D.45868.D.14356._M_local_bufD.14358
  # DEBUG __firstD.58633 => &D.45868.D.14356._M_local_bufD.14358
  # DEBUG __lastD.58632 => &MEM[(voidD.45 *)&D.45868 + 28B]
  # DEBUG D#109ptD.0 => &__firstD.58633
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.58635 => &D.45868.D.14356._M_local_bufD.14358
  # DEBUG __lastD.58634 => &MEM[(voidD.45 *)&D.45868 + 28B]
  # DEBUG __dnewD.58610 => 12
  # DEBUG D#3ptD.0 => &D.58514.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.58613 => &MEM[(struct basic_stringD.9877 *)&D.58514].D.14356._M_local_bufD.14358
  # DEBUG __k1D.58612 => &D.45868.D.14356._M_local_bufD.14358
  # DEBUG __k2D.58611 => &MEM[(voidD.45 *)&D.45868 + 28B]
  # DEBUG __dD.58616 => &MEM[(struct basic_stringD.9877 *)&D.58514].D.14356._M_local_bufD.14358
  # DEBUG __sD.58615 => &D.45868.D.14356._M_local_bufD.14358
  # DEBUG __nD.58614 => 12
  # DEBUG __s1D.58619 => &MEM[(struct basic_stringD.9877 *)&D.58514].D.14356._M_local_bufD.14358
  # DEBUG __s2D.58618 => &D.45868.D.14356._M_local_bufD.14358
  # DEBUG __nD.58617 => 12
  # .MEM_2389 = VDEF <.MEM_2383>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&MEM[(struct basic_stringD.9877 *)&D.58514].D.14356._M_local_bufD.14358, &D.45868.D.14356._M_local_bufD.14358, 12);
  # DEBUG thisD.58623 => &D.58514.firstD.46174
  # DEBUG __nD.58622 => 12
  # DEBUG D#7ptD.0 => &D.58514.firstD.46174
  # DEBUG __lengthD.58625 => 12
  # DEBUG thisD.58624 => D#7ptD.0
  # .MEM_2390 = VDEF <.MEM_2389>
  MEM[(size_typeD.14319 *)&D.58514 + 8B] = 12;
  # DEBUG D#3ptD.0 => &D.58514.firstD.46174
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.58627 => &MEM[(voidD.45 *)&D.58514 + 28B]
  # DEBUG __c2D.58626 => D#11ptD.0
  # .MEM_2391 = VDEF <.MEM_2390>
  MEM[(char_typeD.10931 &)&D.58514 + 28] = 0;
  # DEBUG D#489ptD.0 => {CLOBBER}
  # DEBUG __dnewD.58610 => D#489ptD.0
  # .MEM_2393 = VDEF <.MEM_2391>
  D.58514.secondD.46175 = 0B;
  # DEBUG thisD.58477 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG __position$_M_nodeD.53347 => __i$_M_node_1313
  # DEBUG __xD.58475 => &D.58514
  # DEBUG thisD.53299 => NULL
  # DEBUG __itD.53298 => &__positionD.58476
  # DEBUG thisD.58480 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # .MEM_2394 = VDEF <.MEM_2393>
  MEM[(struct _Rb_tree_const_iteratorD.44806 *)&__posD.58479] = __i$_M_node_1313;
  # DEBUG __xD.58478 => &D.58514
  # DEBUG thisD.53249 => &__anD.58481
  # DEBUG __tD.53248 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __an$_M_tD.53242 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG D#143ptD.0 => &__anD.58481
  [LP 76] # .MEM_2395 = VDEF <.MEM_2394>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  D.58512 = _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPK6RouterPK4FlitiP9OutputSetbEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_INSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_ERKSI_RT_.isra.54.constprop.57D.54545 (&_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500, __posD.58479, &D.58514);
;;    succ:       305 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                309 (EH,EXECUTABLE)

;;   basic block 305, loop depth 0, count 0, freq 350, maybe hot
;;    prev block 304, next block 306, flags: (NEW, REACHABLE)
;;    pred:       304 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_2395>
  # PT = nonlocal escaped 
  __i$_M_node_1527 = MEM[(struct _Rb_tree_iteratorD.44804 *)&D.58512];
  # DEBUG __i$_M_nodeD.58511 => __i$_M_node_1527
  # DEBUG thisD.58459 => &D.58514
  # DEBUG D#56ptD.0 => &D.58514.firstD.46174
  # DEBUG thisD.58460 => D#56ptD.0
  # DEBUG thisD.58461 => D#56ptD.0
  # DEBUG thisD.58470 => D#56ptD.0
  # VUSE <.MEM_2395>
  # PT = nonlocal escaped null { D.45868 D.58514 } (escaped)
  _1528 = MEM[(charD.10 * *)&D.58514];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.58471 => D#56ptD.0
  if (&MEM[(const struct basic_stringD.9877 *)&D.58514].D.14356._M_local_bufD.14358 != _1528)
    goto <bb 306>;
  else
    goto <bb 307>;
;;    succ:       306 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                307 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 306, loop depth 0, count 0, freq 245, maybe hot
;;    prev block 305, next block 307, flags: (NEW, REACHABLE)
;;    pred:       305 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.58463 => D#56ptD.0
  # DEBUG __sizeD.58462 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.58466 => _1528
  # DEBUG __aD.58464 => D#49ptD.0
  # DEBUG __nD.58465 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.58469 => _1528
  # DEBUG thisD.58467 => D#45ptD.0
  # DEBUG D.58468 => D#46ptD.0
  # .MEM_2396 = VDEF <.MEM_2395>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_1528);
;;    succ:       307 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 307, loop depth 0, count 0, freq 350, maybe hot
;;    prev block 306, next block 308, flags: (NEW, REACHABLE)
;;    pred:       305 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                306 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1797 = PHI <.MEM_2395(305), .MEM_2396(306)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.58472 => D#55ptD.0
  # DEBUG thisD.58473 => D#55ptD.0
  # DEBUG thisD.58474 => D#55ptD.0
  # .MEM_2402 = VDEF <.MEM_1797>
  D.58514 ={v} {CLOBBER};
  # VUSE <.MEM_2402>
  pretmp_644 = MEM[(charD.10 * *)&D.45868];
;;    succ:       308 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 308, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 307, next block 309, flags: (NEW, REACHABLE)
;;    pred:       300 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                307 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                303 [78.3%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1529 = PHI <__i$_M_node_2408(300), __i$_M_node_1527(307), __i$_M_node_2408(303)>
  # .MEM_1798 = PHI <.MEM_1959(300), .MEM_2402(307), .MEM_1959(303)>
  # PT = nonlocal escaped { D.45868 } (escaped)
  # prephitmp_645 = PHI <&D.45868.D.14356._M_local_bufD.14358(300), pretmp_644(307), &D.45868.D.14356._M_local_bufD.14358(303)>
  # DEBUG __i$_M_nodeD.58511 => __i$_M_node_1529
  # DEBUG thisD.53323 => &__iD.58441
  # DEBUG thisD.53324 => __i$_M_node_1529
  # DEBUG D#145ptD.0 => &MEM[(struct _Rb_tree_nodeD.44503 *)__i$_M_node_1529]._M_value_fieldD.46493
  # DEBUG __rD.51667 => D#145ptD.0
  # DEBUG D#147ptD.0 => {CLOBBER}
  # DEBUG __i$_M_nodeD.58511 => D#147ptD.0
  # .MEM_213 = VDEF <.MEM_1798>
  MEM[(voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) &)__i$_M_node_1529 + 64] = _Z12romm_ni_meshPK6RouterPK4FlitiP9OutputSetbD.45597;
  # DEBUG thisD.53787 => &D.45868
  # DEBUG thisD.53788 => &D.45868
  # DEBUG thisD.53797 => &D.45868
  # DEBUG D#511ptD.0 => MEM[(charD.10 * *)&D.45868]
  # DEBUG D#3ptD.0 => &D.45868
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53798 => &D.45868
  if (&D.45868.D.14356._M_local_bufD.14358 != prephitmp_645)
    goto <bb 312>;
  else
    goto <bb 313>;
;;    succ:       312 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                313 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 309, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 308, next block 310, flags: (NEW, REACHABLE)
;;    pred:       304 (EH,EXECUTABLE)
<L99>: [LP 76]
  # DEBUG thisD.58443 => &D.58514
  # DEBUG D#56ptD.0 => &D.58514.firstD.46174
  # DEBUG thisD.58444 => D#56ptD.0
  # DEBUG thisD.58445 => D#56ptD.0
  # DEBUG thisD.58454 => D#56ptD.0
  # VUSE <.MEM_2395>
  # PT = nonlocal escaped null { D.45868 D.58514 } (escaped)
  _1531 = MEM[(charD.10 * *)&D.58514];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.58455 => D#56ptD.0
  if (&MEM[(const struct basic_stringD.9877 *)&D.58514].D.14356._M_local_bufD.14358 != _1531)
    goto <bb 310>;
  else
    goto <bb 311>;
;;    succ:       310 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                311 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 310, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 309, next block 311, flags: (NEW, REACHABLE)
;;    pred:       309 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.58447 => D#56ptD.0
  # DEBUG __sizeD.58446 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.58450 => _1531
  # DEBUG __aD.58448 => D#49ptD.0
  # DEBUG __nD.58449 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.58453 => _1531
  # DEBUG thisD.58451 => D#45ptD.0
  # DEBUG D.58452 => D#46ptD.0
  # .MEM_2403 = VDEF <.MEM_2395>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_1531);
;;    succ:       311 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 311, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 310, next block 312, flags: (NEW, REACHABLE)
;;    pred:       309 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                310 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1799 = PHI <.MEM_2395(309), .MEM_2403(310)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.58456 => D#55ptD.0
  # DEBUG thisD.58457 => D#55ptD.0
  # DEBUG thisD.58458 => D#55ptD.0
  # .MEM_2409 = VDEF <.MEM_1799>
  D.58514 ={v} {CLOBBER};
  [LP 50] resx 144
;;    succ:       442 (EH,EXECUTABLE)

;;   basic block 312, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 311, next block 313, flags: (NEW, REACHABLE)
;;    pred:       308 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45868.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53790 => &D.45868
  # DEBUG __sizeD.53789 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45868
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45868
  # DEBUG D#51ptD.0 => &D.45868._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53793 => D#511ptD.0
  # DEBUG __aD.53791 => D#49ptD.0
  # DEBUG __nD.53792 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53796 => D#511ptD.0
  # DEBUG thisD.53794 => D#45ptD.0
  # DEBUG D.53795 => D#46ptD.0
  # .MEM_501 = VDEF <.MEM_213>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (prephitmp_645);
;;    succ:       313 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 313, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 312, next block 314, flags: (NEW, REACHABLE)
;;    pred:       308 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                312 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_104 = PHI <.MEM_213(308), .MEM_501(312)>
  # DEBUG D#55ptD.0 => &D.45868._M_dataplusD.14336
  # DEBUG thisD.53799 => D#55ptD.0
  # DEBUG thisD.53800 => D#55ptD.0
  # DEBUG thisD.53801 => D#55ptD.0
  # .MEM_214 = VDEF <.MEM_104>
  D.45868 ={v} {CLOBBER};
  # DEBUG thisD.53785 => &D.45867
  # DEBUG thisD.53786 => &D.45867
  # DEBUG D#30ptD.0 => &D.45870
  # DEBUG thisD.53784 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45870
  # DEBUG thisD.58636 => &D.45871
  # DEBUG __sD.58637 => "min_adapt_mesh"
  # DEBUG __aD.58638 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.58648 => &D.45871
  # DEBUG D#66ptD.0 => &D.45871._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.58651 => D#66ptD.0
  # DEBUG __datD.58650 => &D.45871.D.14356._M_local_bufD.14358
  # DEBUG __aD.58649 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2412 = VDEF <.MEM_214>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45871]._M_pD.14342 = &D.45871.D.14356._M_local_bufD.14358;
  # DEBUG __sD.58647 => "min_adapt_mesh"
  # DEBUG thisD.58641 => &D.45871
  # DEBUG __begD.58640 => "min_adapt_mesh"
  # DEBUG __endD.58639 => &MEM[(voidD.45 *)"min_adapt_mesh" + 14B]
  # DEBUG thisD.58645 => &D.45871
  # DEBUG __begD.58644 => "min_adapt_mesh"
  # DEBUG __endD.58643 => &MEM[(voidD.45 *)"min_adapt_mesh" + 14B]
  # DEBUG thisD.58652 => &D.45871
  # DEBUG __begD.58653 => "min_adapt_mesh"
  # DEBUG __endD.58654 => &MEM[(voidD.45 *)"min_adapt_mesh" + 14B]
  # DEBUG __ptrD.52815 => "min_adapt_mesh"
  # DEBUG __firstD.58678 => "min_adapt_mesh"
  # DEBUG __lastD.58677 => &MEM[(voidD.45 *)"min_adapt_mesh" + 14B]
  # DEBUG D#109ptD.0 => &__firstD.58678
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.58680 => "min_adapt_mesh"
  # DEBUG __lastD.58679 => &MEM[(voidD.45 *)"min_adapt_mesh" + 14B]
  # DEBUG __dnewD.58655 => 14
  # DEBUG D#3ptD.0 => &D.45871
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.58658 => &D.45871.D.14356._M_local_bufD.14358
  # DEBUG __k1D.58657 => "min_adapt_mesh"
  # DEBUG __k2D.58656 => &MEM[(voidD.45 *)"min_adapt_mesh" + 14B]
  # DEBUG __dD.58661 => &D.45871.D.14356._M_local_bufD.14358
  # DEBUG __sD.58660 => "min_adapt_mesh"
  # DEBUG __nD.58659 => 14
  # DEBUG __s1D.58664 => &D.45871.D.14356._M_local_bufD.14358
  # DEBUG __s2D.58663 => "min_adapt_mesh"
  # DEBUG __nD.58662 => 14
  # .MEM_2418 = VDEF <.MEM_2412>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&D.45871.D.14356._M_local_bufD.14358, "min_adapt_mesh", 14);
  # DEBUG thisD.58668 => &D.45871
  # DEBUG __nD.58667 => 14
  # DEBUG D#7ptD.0 => &D.45871
  # DEBUG __lengthD.58670 => 14
  # DEBUG thisD.58669 => D#7ptD.0
  # .MEM_2419 = VDEF <.MEM_2418>
  MEM[(size_typeD.14319 *)&D.45871 + 8B] = 14;
  # DEBUG D#3ptD.0 => &D.45871
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.58672 => &MEM[(voidD.45 *)&D.45871 + 30B]
  # DEBUG __c2D.58671 => D#11ptD.0
  # .MEM_2420 = VDEF <.MEM_2419>
  MEM[(char_typeD.10931 &)&D.45871 + 30] = 0;
  # DEBUG D#490ptD.0 => {CLOBBER}
  # DEBUG __dnewD.58655 => D#490ptD.0
  [LP 52] # .MEM_218 = VDEF <.MEM_2420>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _219 = _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPK6RouterPK4FlitiP9OutputSetbESt4lessIS5_ESaISt4pairIKS5_SF_EEEixERSJ_.constprop.56D.54544 (&D.45871);
;;    succ:       445 (EH,EXECUTABLE)
;;                314 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 314, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 313, next block 315, flags: (NEW, REACHABLE)
;;    pred:       313 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_220 = VDEF <.MEM_218>
  *_219 = _Z14min_adapt_meshPK6RouterPK4FlitiP9OutputSetbD.45609;
  # DEBUG thisD.53805 => &D.45871
  # DEBUG thisD.53806 => &D.45871
  # DEBUG thisD.53815 => &D.45871
  # VUSE <.MEM_220>
  # PT = nonlocal escaped { D.45871 } (escaped)
  _222 = MEM[(charD.10 * *)&D.45871];
  # DEBUG D#3ptD.0 => &D.45871
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53816 => &D.45871
  if (&D.45871.D.14356._M_local_bufD.14358 != _222)
    goto <bb 315>;
  else
    goto <bb 316>;
;;    succ:       315 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                316 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 315, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 314, next block 316, flags: (NEW, REACHABLE)
;;    pred:       314 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45871.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53808 => &D.45871
  # DEBUG __sizeD.53807 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45871
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45871
  # DEBUG D#51ptD.0 => &D.45871._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53811 => _222
  # DEBUG __aD.53809 => D#49ptD.0
  # DEBUG __nD.53810 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53814 => _222
  # DEBUG thisD.53812 => D#45ptD.0
  # DEBUG D.53813 => D#46ptD.0
  # .MEM_506 = VDEF <.MEM_220>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_222);
;;    succ:       316 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 316, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 315, next block 317, flags: (NEW, REACHABLE)
;;    pred:       314 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                315 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_93 = PHI <.MEM_220(314), .MEM_506(315)>
  # DEBUG D#55ptD.0 => &D.45871._M_dataplusD.14336
  # DEBUG thisD.53817 => D#55ptD.0
  # DEBUG thisD.53818 => D#55ptD.0
  # DEBUG thisD.53819 => D#55ptD.0
  # .MEM_221 = VDEF <.MEM_93>
  D.45871 ={v} {CLOBBER};
  # DEBUG thisD.53803 => &D.45870
  # DEBUG thisD.53804 => &D.45870
  # DEBUG D#30ptD.0 => &D.45873
  # DEBUG thisD.53802 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45873
  # DEBUG thisD.58757 => &D.45874
  # DEBUG __sD.58758 => "min_adapt_torus"
  # DEBUG __aD.58759 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.58769 => &D.45874
  # DEBUG D#66ptD.0 => &D.45874._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.58772 => D#66ptD.0
  # DEBUG __datD.58771 => &D.45874.D.14356._M_local_bufD.14358
  # DEBUG __aD.58770 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2422 = VDEF <.MEM_221>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45874]._M_pD.14342 = &D.45874.D.14356._M_local_bufD.14358;
  # DEBUG __sD.58768 => "min_adapt_torus"
  # DEBUG thisD.58762 => &D.45874
  # DEBUG __begD.58761 => "min_adapt_torus"
  # DEBUG __endD.58760 => &MEM[(voidD.45 *)"min_adapt_torus" + 15B]
  # DEBUG thisD.58766 => &D.45874
  # DEBUG __begD.58765 => "min_adapt_torus"
  # DEBUG __endD.58764 => &MEM[(voidD.45 *)"min_adapt_torus" + 15B]
  # DEBUG thisD.58773 => &D.45874
  # DEBUG __begD.58774 => "min_adapt_torus"
  # DEBUG __endD.58775 => &MEM[(voidD.45 *)"min_adapt_torus" + 15B]
  # DEBUG __ptrD.52815 => "min_adapt_torus"
  # DEBUG __firstD.58799 => "min_adapt_torus"
  # DEBUG __lastD.58798 => &MEM[(voidD.45 *)"min_adapt_torus" + 15B]
  # DEBUG D#109ptD.0 => &__firstD.58799
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.58801 => "min_adapt_torus"
  # DEBUG __lastD.58800 => &MEM[(voidD.45 *)"min_adapt_torus" + 15B]
  # DEBUG __dnewD.58776 => 15
  # DEBUG D#3ptD.0 => &D.45874
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.58779 => &D.45874.D.14356._M_local_bufD.14358
  # DEBUG __k1D.58778 => "min_adapt_torus"
  # DEBUG __k2D.58777 => &MEM[(voidD.45 *)"min_adapt_torus" + 15B]
  # DEBUG __dD.58782 => &D.45874.D.14356._M_local_bufD.14358
  # DEBUG __sD.58781 => "min_adapt_torus"
  # DEBUG __nD.58780 => 15
  # DEBUG __s1D.58785 => &D.45874.D.14356._M_local_bufD.14358
  # DEBUG __s2D.58784 => "min_adapt_torus"
  # DEBUG __nD.58783 => 15
  # .MEM_2428 = VDEF <.MEM_2422>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&D.45874.D.14356._M_local_bufD.14358, "min_adapt_torus", 15);
  # DEBUG thisD.58789 => &D.45874
  # DEBUG __nD.58788 => 15
  # DEBUG D#7ptD.0 => &D.45874
  # DEBUG __lengthD.58791 => 15
  # DEBUG thisD.58790 => D#7ptD.0
  # .MEM_2429 = VDEF <.MEM_2428>
  MEM[(size_typeD.14319 *)&D.45874 + 8B] = 15;
  # DEBUG D#3ptD.0 => &D.45874
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.58793 => &MEM[(voidD.45 *)&D.45874 + 31B]
  # DEBUG __c2D.58792 => D#11ptD.0
  # .MEM_2430 = VDEF <.MEM_2429>
  MEM[(char_typeD.10931 &)&D.45874 + 31] = 0;
  # DEBUG D#491ptD.0 => {CLOBBER}
  # DEBUG __dnewD.58776 => D#491ptD.0
  # DEBUG __kD.58681 => &D.45874
  # DEBUG thisD.58683 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG thisD.58746 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG __xD.58745 => &D.45874
  # DEBUG thisD.58802 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __kD.58803 => &D.45874
  # DEBUG thisD.58804 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # VUSE <.MEM_2430>
  # PT = nonlocal escaped 
  __i$_M_node_1639 = MEM[(struct _Rb_tree_node_baseD.6878 * *)&_Z19gRoutingFunctionMapB5cxx11D.42076 + 16B];
  # DEBUG D#31ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG thisD.52518 => D#31ptD.0
  # DEBUG D#96ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __xD.58808 => NULL
  # DEBUG __yD.58807 => NULL
  # DEBUG __kD.58806 => &D.45874
  # DEBUG __yD.58807 => &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732
  # DEBUG __xD.58808 => __i$_M_node_1639
  if (__i$_M_node_1639 == 0B)
    goto <bb 496>;
  else
    goto <bb 319>;
;;    succ:       496 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                319 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 317, loop depth 1, count 0, freq 9089, maybe hot
;;    prev block 316, next block 318, flags: (NEW, REACHABLE)
;;    pred:       325 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                326 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_919 = PHI <__i$_M_node_1643(325), __i$_M_node_1644(326)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_918 = PHI <__i$_M_node_2020(325), __i$_M_node_1294(326)>
  # DEBUG __yD.58807 => __i$_M_node_918
  # DEBUG __xD.58808 => __i$_M_node_919
  if (__i$_M_node_919 == 0B)
    goto <bb 327>;
  else
    goto <bb 318>;
;;    succ:       327 [9.0%]  (TRUE_VALUE,EXECUTABLE)
;;                318 [91.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 318, loop depth 1, count 0, freq 8271, maybe hot
;;    prev block 317, next block 319, flags: (NEW)
;;    pred:       317 [91.0%]  (FALSE_VALUE,EXECUTABLE)
  goto <bb 320>;
;;    succ:       320 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 319, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 318, next block 320, flags: (NEW, REACHABLE)
;;    pred:       316 [91.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       320 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 320, loop depth 1, count 0, freq 9089, maybe hot
;;    prev block 319, next block 321, flags: (NEW)
;;    pred:       319 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                318 [100.0%]  (FALLTHRU,EXECUTABLE)
  # PT = nonlocal escaped 
  # __i$_M_node_2020 = PHI <__i$_M_node_1639(319), __i$_M_node_919(318)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1294 = PHI <&MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732(319), __i$_M_node_918(318)>
  # .MEM_1082 = PHI <.MEM_2430(319), .MEM_1082(318)>
  # DEBUG __yD.58807 => __i$_M_node_1294
  # DEBUG __xD.58808 => __i$_M_node_2020
  # DEBUG __xD.58809 => __i$_M_node_2020
  # DEBUG __xD.52453 => __i$_M_node_2020
  # DEBUG thisD.52454 => __i$_M_node_2020
  # DEBUG D#93ptD.0 => &MEM[(const struct _Rb_tree_nodeD.44503 *)__i$_M_node_2020]._M_value_fieldD.46493
  # DEBUG __rD.52444 => D#93ptD.0
  # DEBUG __xD.58811 => D#93ptD.0
  # DEBUG thisD.58810 => D#60ptD.0
  # DEBUG D#376ptD.0 => &MEM[(const struct pairD.42073 &)__i$_M_node_2020 + 32].firstD.46174
  # DEBUG D#94ptD.0 => &D#95ptD.0->_M_implD.44577._M_key_compareD.44731
  # DEBUG D#59ptD.0 => D#94ptD.0
  # DEBUG __xD.58814 => D#376ptD.0
  # DEBUG __yD.58813 => &D.45874
  # DEBUG thisD.58812 => D#59ptD.0
  # DEBUG __lhsD.58816 => D#376ptD.0
  # DEBUG __rhsD.58815 => &D.45874
  # DEBUG thisD.58818 => D#376ptD.0
  # DEBUG __strD.58819 => &D.45874
  # VUSE <.MEM_1082>
  _1648 = MEM[(long unsigned intD.14 *)__i$_M_node_2020 + 40B];
  # DEBUG D#1ptD.0 => D#376ptD.0
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.58820 => _1648
  # DEBUG D#1ptD.0 => &D.45874
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.58821 => 15
  # DEBUG __aD.58828 => &__sizeD.58820
  # DEBUG __bD.58827 => &__osizeD.58821
  # RANGE [0, 15] NONZERO 15
  __len_2007 = MIN_EXPR <_1648, 15>;
  # DEBUG __lenD.58822 => D#358ptD.0
  # DEBUG thisD.51798 => &D.45874
  # DEBUG D#3ptD.0 => &D.45874
  # DEBUG thisD.50676 => D#3ptD.0
  # VUSE <.MEM_1082>
  # PT = nonlocal escaped 
  _1653 = MEM[(charD.10 * *)__i$_M_node_2020 + 32B];
  # DEBUG D#3ptD.0 => D#376ptD.0
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.58831 => _1653
  # DEBUG __s2D.58830 => &D.45874.D.14356._M_local_bufD.14358
  # DEBUG __nD.58829 => D#358ptD.0
  # VUSE <.MEM_1082>
  # USE = nonlocal escaped null { D.45874 } (escaped)
  __r_1654 = memcmpD.989 (_1653, &D.45874.D.14356._M_local_bufD.14358, __len_2007);
  # DEBUG __rD.58823 => NULL
  if (__r_1654 == 0)
    goto <bb 321>;
  else
    goto <bb 324>;
;;    succ:       321 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                324 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 321, loop depth 1, count 0, freq 5544, maybe hot
;;    prev block 320, next block 322, flags: (NEW, REACHABLE)
;;    pred:       320 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.58825 => _1648
  # DEBUG __n2D.58824 => 15
  # RANGE [0, 18446744073709551615]
  _1655 = _1648 - 15;
  __d_1656 = (const difference_typeD.14320) _1655;
  # DEBUG __dD.58826 => __d_1656
  if (__d_1656 > 2147483647)
    goto <bb 325>;
  else
    goto <bb 322>;
;;    succ:       325 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                322 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 322, loop depth 1, count 0, freq 2772, maybe hot
;;    prev block 321, next block 323, flags: (NEW, REACHABLE)
;;    pred:       321 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_1656 < -2147483648)
    goto <bb 326>;
  else
    goto <bb 323>;
;;    succ:       326 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                323 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 323, loop depth 1, count 0, freq 1386, maybe hot
;;    prev block 322, next block 324, flags: (NEW, REACHABLE)
;;    pred:       322 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_1657 = (intD.9) _1655;
;;    succ:       324 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 324, loop depth 1, count 0, freq 4931, maybe hot
;;    prev block 323, next block 325, flags: (NEW, REACHABLE)
;;    pred:       320 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                323 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_1658 = PHI <__r_1654(320), __r_1657(323)>
  # DEBUG __rD.58823 => __r_1658
  # DEBUG D#496ptD.0 => {CLOBBER}
  # DEBUG __sizeD.58820 => D#496ptD.0
  # DEBUG D#497ptD.0 => {CLOBBER}
  # DEBUG __osizeD.58821 => D#497ptD.0
  if (__r_1658 >= 0)
    goto <bb 325>;
  else
    goto <bb 326>;
;;    succ:       325 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                326 [21.7%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 325, loop depth 1, count 0, freq 6635, maybe hot
;;    prev block 324, next block 326, flags: (NEW, REACHABLE)
;;    pred:       324 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                321 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.58823 => NULL
  # DEBUG __yD.58807 => __i$_M_node_2020
  # VUSE <.MEM_1082>
  # PT = nonlocal escaped 
  __i$_M_node_1643 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__i$_M_node_2020 + 16B];
  # DEBUG D#37ptD.0 => __i$_M_node_2020
  # DEBUG __xD.52486 => D#37ptD.0
  # DEBUG __xD.58808 => NULL
  goto <bb 317>;
;;    succ:       317 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 326, loop depth 1, count 0, freq 2454, maybe hot
;;    prev block 325, next block 327, flags: (NEW, REACHABLE)
;;    pred:       324 [21.7%]  (FALSE_VALUE,EXECUTABLE)
;;                322 [50.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __rD.58823 => NULL
  # VUSE <.MEM_1082>
  # PT = nonlocal escaped 
  __i$_M_node_1644 = MEM[(struct _Rb_tree_node_baseD.6878 * *)__i$_M_node_2020 + 24B];
  # DEBUG D#36ptD.0 => __i$_M_node_2020
  # DEBUG __xD.52485 => D#36ptD.0
  # DEBUG __xD.58808 => NULL
  goto <bb 317>;
;;    succ:       317 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 327, loop depth 0, count 0, freq 818, maybe hot
;;    prev block 326, next block 328, flags: (NEW, REACHABLE)
;;    pred:       317 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_2421 = PHI <__i$_M_node_918(317)>
  # DEBUG thisD.52484 => NULL
  # DEBUG __xD.52483 => __i$_M_node_2421
  # DEBUG __i$_M_nodeD.58752 => __i$_M_node_2421
  # DEBUG thisD.58747 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG D#44ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG thisD.58748 => D#44ptD.0
  # DEBUG thisD.51662 => NULL
  # DEBUG __xD.51661 => &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732
  # DEBUG thisD.53255 => &__iD.58682
  # DEBUG __xD.53256 => NULL
  if (__i$_M_node_2421 == &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732)
    goto <bb 496>;
  else
    goto <bb 328>;
;;    succ:       496 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                328 [93.4%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 328, loop depth 0, count 0, freq 764, maybe hot
;;    prev block 327, next block 329, flags: (NEW, REACHABLE)
;;    pred:       327 [93.4%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG thisD.53275 => &__iD.58682
  # DEBUG thisD.53276 => __i$_M_node_2421
  # DEBUG D#144ptD.0 => &MEM[(struct _Rb_tree_nodeD.44503 *)__i$_M_node_2421]._M_value_fieldD.46493
  # DEBUG __rD.51667 => D#144ptD.0
  # DEBUG D#377ptD.0 => &MEM[(struct pairD.42073 &)__i$_M_node_2421 + 32].firstD.46174
  # DEBUG D#35ptD.0 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG thisD.53272 => D#35ptD.0
  # DEBUG D#34ptD.0 => D#35ptD.0
  # DEBUG D#33ptD.0 => &D#34ptD.0->_M_tD.44500
  # DEBUG D#32ptD.0 => D#33ptD.0
  # DEBUG thisD.51597 => D#32ptD.0
  # DEBUG __xD.58742 => &D.45874
  # DEBUG __yD.58741 => D#377ptD.0
  # DEBUG thisD.58740 => D#59ptD.0
  # DEBUG __lhsD.58744 => &D.45874
  # DEBUG __rhsD.58743 => D#377ptD.0
  # DEBUG thisD.58833 => &D.45874
  # DEBUG __strD.58834 => D#377ptD.0
  # DEBUG D#1ptD.0 => &D.45874
  # DEBUG thisD.51807 => D#1ptD.0
  # DEBUG __sizeD.58835 => 15
  # VUSE <.MEM_1082>
  _1661 = MEM[(long unsigned intD.14 *)__i$_M_node_2421 + 40B];
  # DEBUG D#1ptD.0 => D#377ptD.0
  # DEBUG thisD.51804 => D#1ptD.0
  # DEBUG __osizeD.58836 => _1661
  # DEBUG __aD.58843 => &__sizeD.58835
  # DEBUG __bD.58842 => &__osizeD.58836
  if (_1661 <= 14)
    goto <bb 330>;
  else
    goto <bb 329>;
;;    succ:       330 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                329 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 329, loop depth 0, count 0, freq 382, maybe hot
;;    prev block 328, next block 330, flags: (NEW)
;;    pred:       328 [50.0%]  (FALSE_VALUE,EXECUTABLE)
;;    succ:       330 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 330, loop depth 0, count 0, freq 764, maybe hot
;;    prev block 329, next block 331, flags: (NEW, REACHABLE)
;;    pred:       328 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                329 [100.0%]  (FALLTHRU,EXECUTABLE)
  # RANGE [0, 15] NONZERO 15
  # __len_1663 = PHI <_1661(328), 15(329)>
  # DEBUG __lenD.58837 => D#359ptD.0
  # DEBUG thisD.51798 => D#377ptD.0
  # VUSE <.MEM_1082>
  # PT = nonlocal escaped 
  _1664 = MEM[(charD.10 * *)__i$_M_node_2421 + 32B];
  # DEBUG D#3ptD.0 => D#377ptD.0
  # DEBUG thisD.50676 => D#3ptD.0
  # DEBUG D#3ptD.0 => &D.45874
  # DEBUG thisD.51796 => D#3ptD.0
  # DEBUG __s1D.58846 => &D.45874.D.14356._M_local_bufD.14358
  # DEBUG __s2D.58845 => _1664
  # DEBUG __nD.58844 => D#359ptD.0
  # VUSE <.MEM_1082>
  # USE = nonlocal escaped null { D.45874 } (escaped)
  __r_1666 = memcmpD.989 (&D.45874.D.14356._M_local_bufD.14358, _1664, __len_1663);
  # DEBUG __rD.58838 => NULL
  if (__r_1666 == 0)
    goto <bb 331>;
  else
    goto <bb 334>;
;;    succ:       331 [61.0%]  (TRUE_VALUE,EXECUTABLE)
;;                334 [39.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 331, loop depth 0, count 0, freq 466, maybe hot
;;    prev block 330, next block 332, flags: (NEW, REACHABLE)
;;    pred:       330 [61.0%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG __n1D.58840 => 15
  # DEBUG __n2D.58839 => _1661
  # RANGE [0, 18446744073709551615]
  _1667 = 15 - _1661;
  __d_1668 = (const difference_typeD.14320) _1667;
  # DEBUG __dD.58841 => __d_1668
  if (__d_1668 > 2147483647)
    goto <bb 339>;
  else
    goto <bb 332>;
;;    succ:       339 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                332 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 332, loop depth 0, count 0, freq 233, maybe hot
;;    prev block 331, next block 333, flags: (NEW, REACHABLE)
;;    pred:       331 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  if (__d_1668 < -2147483648)
    goto <bb 335>;
  else
    goto <bb 333>;
;;    succ:       335 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                333 [50.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 333, loop depth 0, count 0, freq 117, maybe hot
;;    prev block 332, next block 334, flags: (NEW, REACHABLE)
;;    pred:       332 [50.0%]  (FALSE_VALUE,EXECUTABLE)
  # RANGE [-2147483648, 2147483647]
  __r_1669 = (intD.9) _1667;
;;    succ:       334 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 334, loop depth 0, count 0, freq 414, maybe hot
;;    prev block 333, next block 335, flags: (NEW, REACHABLE)
;;    pred:       330 [39.0%]  (FALSE_VALUE,EXECUTABLE)
;;                333 [100.0%]  (FALLTHRU,EXECUTABLE)
  # __r_1670 = PHI <__r_1666(330), __r_1669(333)>
  # DEBUG __rD.58838 => __r_1670
  # DEBUG D#502ptD.0 => {CLOBBER}
  # DEBUG __sizeD.58835 => D#502ptD.0
  # DEBUG D#503ptD.0 => {CLOBBER}
  # DEBUG __osizeD.58836 => D#503ptD.0
  if (__r_1670 < 0)
    goto <bb 496>;
  else
    goto <bb 339>;
;;    succ:       496 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                339 [78.3%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 335, loop depth 0, count 0, freq 350, maybe hot
;;    prev block 334, next block 336, flags: (NEW, REACHABLE)
;;    pred:       332 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                496 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2129 = PHI <.MEM_1082(332), .MEM_2193(496)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1388 = PHI <__i$_M_node_2421(332), __i$_M_node_1383(496)>
  # DEBUG thisD.58725 => &D.58755
  # DEBUG __aD.58724 => &D.45874
  # DEBUG __bD.58723 => NULL
  # DEBUG thisD.58727 => &D.58755.firstD.46174
  # DEBUG __strD.58726 => &D.45874
  # DEBUG thisD.52863 => &D.45874
  # DEBUG D#113ptD.0 => &D.45874._M_dataplusD.14336
  # DEBUG thisD.58728 => &D.58755.firstD.46174
  # DEBUG D#114ptD.0 => &MEM[(struct basic_stringD.9877 *)&D.58755]._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#113ptD.0
  # DEBUG thisD.58731 => D#114ptD.0
  # DEBUG __datD.58730 => &MEM[(struct basic_stringD.9877 *)&D.58755].D.14356._M_local_bufD.14358
  # DEBUG __aD.58729 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#114ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2444 = VDEF <.MEM_2129>
  MEM[(struct _Alloc_hiderD.14335 *)&D.58755]._M_pD.14342 = &MEM[(struct basic_stringD.9877 *)&D.58755].D.14356._M_local_bufD.14358;
  # DEBUG D#3ptD.0 => &D.45874
  # DEBUG thisD.52856 => D#3ptD.0
  # DEBUG D#4ptD.0 => &D.45874
  # DEBUG thisD.52853 => D#4ptD.0
  # DEBUG D#3ptD.0 => &D.45874
  # DEBUG thisD.52850 => D#3ptD.0
  # DEBUG thisD.58734 => &D.58755.firstD.46174
  # DEBUG __begD.58733 => &D.45874.D.14356._M_local_bufD.14358
  # DEBUG __endD.58732 => &MEM[(voidD.45 *)&D.45874 + 31B]
  # DEBUG thisD.58738 => &D.58755.firstD.46174
  # DEBUG __begD.58737 => &D.45874.D.14356._M_local_bufD.14358
  # DEBUG __endD.58736 => &MEM[(voidD.45 *)&D.45874 + 31B]
  # DEBUG thisD.58848 => &D.58755.firstD.46174
  # DEBUG __begD.58849 => &D.45874.D.14356._M_local_bufD.14358
  # DEBUG __endD.58850 => &MEM[(voidD.45 *)&D.45874 + 31B]
  # DEBUG __ptrD.52815 => &D.45874.D.14356._M_local_bufD.14358
  # DEBUG __firstD.58874 => &D.45874.D.14356._M_local_bufD.14358
  # DEBUG __lastD.58873 => &MEM[(voidD.45 *)&D.45874 + 31B]
  # DEBUG D#109ptD.0 => &__firstD.58874
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.58876 => &D.45874.D.14356._M_local_bufD.14358
  # DEBUG __lastD.58875 => &MEM[(voidD.45 *)&D.45874 + 31B]
  # DEBUG __dnewD.58851 => 15
  # DEBUG D#3ptD.0 => &D.58755.firstD.46174
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.58854 => &MEM[(struct basic_stringD.9877 *)&D.58755].D.14356._M_local_bufD.14358
  # DEBUG __k1D.58853 => &D.45874.D.14356._M_local_bufD.14358
  # DEBUG __k2D.58852 => &MEM[(voidD.45 *)&D.45874 + 31B]
  # DEBUG __dD.58857 => &MEM[(struct basic_stringD.9877 *)&D.58755].D.14356._M_local_bufD.14358
  # DEBUG __sD.58856 => &D.45874.D.14356._M_local_bufD.14358
  # DEBUG __nD.58855 => 15
  # DEBUG __s1D.58860 => &MEM[(struct basic_stringD.9877 *)&D.58755].D.14356._M_local_bufD.14358
  # DEBUG __s2D.58859 => &D.45874.D.14356._M_local_bufD.14358
  # DEBUG __nD.58858 => 15
  # .MEM_2450 = VDEF <.MEM_2444>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&MEM[(struct basic_stringD.9877 *)&D.58755].D.14356._M_local_bufD.14358, &D.45874.D.14356._M_local_bufD.14358, 15);
  # DEBUG thisD.58864 => &D.58755.firstD.46174
  # DEBUG __nD.58863 => 15
  # DEBUG D#7ptD.0 => &D.58755.firstD.46174
  # DEBUG __lengthD.58866 => 15
  # DEBUG thisD.58865 => D#7ptD.0
  # .MEM_2451 = VDEF <.MEM_2450>
  MEM[(size_typeD.14319 *)&D.58755 + 8B] = 15;
  # DEBUG D#3ptD.0 => &D.58755.firstD.46174
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.58868 => &MEM[(voidD.45 *)&D.58755 + 31B]
  # DEBUG __c2D.58867 => D#11ptD.0
  # .MEM_2452 = VDEF <.MEM_2451>
  MEM[(char_typeD.10931 &)&D.58755 + 31] = 0;
  # DEBUG D#504ptD.0 => {CLOBBER}
  # DEBUG __dnewD.58851 => D#504ptD.0
  # .MEM_2454 = VDEF <.MEM_2452>
  D.58755.secondD.46175 = 0B;
  # DEBUG thisD.58718 => &_Z19gRoutingFunctionMapB5cxx11D.42076
  # DEBUG __position$_M_nodeD.53347 => __i$_M_node_1388
  # DEBUG __xD.58716 => &D.58755
  # DEBUG thisD.53299 => NULL
  # DEBUG __itD.53298 => &__positionD.58717
  # DEBUG thisD.58721 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # .MEM_2455 = VDEF <.MEM_2454>
  MEM[(struct _Rb_tree_const_iteratorD.44806 *)&__posD.58720] = __i$_M_node_1388;
  # DEBUG __xD.58719 => &D.58755
  # DEBUG thisD.53249 => &__anD.58722
  # DEBUG __tD.53248 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG __an$_M_tD.53242 => &_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500
  # DEBUG D#143ptD.0 => &__anD.58722
  [LP 77] # .MEM_2456 = VDEF <.MEM_2455>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  D.58753 = _ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPK6RouterPK4FlitiP9OutputSetbEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE17_M_insert_unique_INSO_11_Alloc_nodeEEESt17_Rb_tree_iteratorISI_ESt23_Rb_tree_const_iteratorISI_ERKSI_RT_.isra.54.constprop.57D.54545 (&_Z19gRoutingFunctionMapB5cxx11D.42076._M_tD.44500, __posD.58720, &D.58755);
;;    succ:       336 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                340 (EH,EXECUTABLE)

;;   basic block 336, loop depth 0, count 0, freq 350, maybe hot
;;    prev block 335, next block 337, flags: (NEW, REACHABLE)
;;    pred:       335 [100.0%]  (FALLTHRU,EXECUTABLE)
  # VUSE <.MEM_2456>
  # PT = nonlocal escaped 
  __i$_M_node_1618 = MEM[(struct _Rb_tree_iteratorD.44804 *)&D.58753];
  # DEBUG __i$_M_nodeD.58752 => __i$_M_node_1618
  # DEBUG thisD.58700 => &D.58755
  # DEBUG D#56ptD.0 => &D.58755.firstD.46174
  # DEBUG thisD.58701 => D#56ptD.0
  # DEBUG thisD.58702 => D#56ptD.0
  # DEBUG thisD.58711 => D#56ptD.0
  # VUSE <.MEM_2456>
  # PT = nonlocal escaped null { D.45874 D.58755 } (escaped)
  _1619 = MEM[(charD.10 * *)&D.58755];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.58712 => D#56ptD.0
  if (&MEM[(const struct basic_stringD.9877 *)&D.58755].D.14356._M_local_bufD.14358 != _1619)
    goto <bb 337>;
  else
    goto <bb 338>;
;;    succ:       337 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                338 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 337, loop depth 0, count 0, freq 245, maybe hot
;;    prev block 336, next block 338, flags: (NEW, REACHABLE)
;;    pred:       336 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.58704 => D#56ptD.0
  # DEBUG __sizeD.58703 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.58707 => _1619
  # DEBUG __aD.58705 => D#49ptD.0
  # DEBUG __nD.58706 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.58710 => _1619
  # DEBUG thisD.58708 => D#45ptD.0
  # DEBUG D.58709 => D#46ptD.0
  # .MEM_2457 = VDEF <.MEM_2456>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_1619);
;;    succ:       338 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 338, loop depth 0, count 0, freq 350, maybe hot
;;    prev block 337, next block 339, flags: (NEW, REACHABLE)
;;    pred:       336 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                337 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1808 = PHI <.MEM_2456(336), .MEM_2457(337)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.58713 => D#55ptD.0
  # DEBUG thisD.58714 => D#55ptD.0
  # DEBUG thisD.58715 => D#55ptD.0
  # .MEM_2463 = VDEF <.MEM_1808>
  D.58755 ={v} {CLOBBER};
  # VUSE <.MEM_2463>
  pretmp_2060 = MEM[(charD.10 * *)&D.45874];
;;    succ:       339 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 339, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 338, next block 340, flags: (NEW, REACHABLE)
;;    pred:       331 [50.0%]  (TRUE_VALUE,EXECUTABLE)
;;                338 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                334 [78.3%]  (FALSE_VALUE,EXECUTABLE)
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1620 = PHI <__i$_M_node_2421(331), __i$_M_node_1618(338), __i$_M_node_2421(334)>
  # .MEM_1809 = PHI <.MEM_1082(331), .MEM_2463(338), .MEM_1082(334)>
  # PT = nonlocal escaped { D.45874 } (escaped)
  # prephitmp_2061 = PHI <&D.45874.D.14356._M_local_bufD.14358(331), pretmp_2060(338), &D.45874.D.14356._M_local_bufD.14358(334)>
  # DEBUG __i$_M_nodeD.58752 => __i$_M_node_1620
  # DEBUG thisD.53323 => &__iD.58682
  # DEBUG thisD.53324 => __i$_M_node_1620
  # DEBUG D#145ptD.0 => &MEM[(struct _Rb_tree_nodeD.44503 *)__i$_M_node_1620]._M_value_fieldD.46493
  # DEBUG __rD.51667 => D#145ptD.0
  # DEBUG D#147ptD.0 => {CLOBBER}
  # DEBUG __i$_M_nodeD.58752 => D#147ptD.0
  # .MEM_227 = VDEF <.MEM_1809>
  MEM[(voidD.45 (*mapped_typeD.44284) (const struct RouterD.33813 *, const struct FlitD.29321 *, intD.9, struct OutputSetD.28230 *, boolD.2757) &)__i$_M_node_1620 + 64] = _Z15min_adapt_torusPK6RouterPK4FlitiP9OutputSetbD.45738;
  # DEBUG thisD.53823 => &D.45874
  # DEBUG thisD.53824 => &D.45874
  # DEBUG thisD.53833 => &D.45874
  # DEBUG D#510ptD.0 => MEM[(charD.10 * *)&D.45874]
  # DEBUG D#3ptD.0 => &D.45874
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53834 => &D.45874
  if (&D.45874.D.14356._M_local_bufD.14358 != prephitmp_2061)
    goto <bb 343>;
  else
    goto <bb 344>;
;;    succ:       343 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                344 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 340, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 339, next block 341, flags: (NEW, REACHABLE)
;;    pred:       335 (EH,EXECUTABLE)
<L100>: [LP 77]
  # DEBUG thisD.58684 => &D.58755
  # DEBUG D#56ptD.0 => &D.58755.firstD.46174
  # DEBUG thisD.58685 => D#56ptD.0
  # DEBUG thisD.58686 => D#56ptD.0
  # DEBUG thisD.58695 => D#56ptD.0
  # VUSE <.MEM_2456>
  # PT = nonlocal escaped null { D.45874 D.58755 } (escaped)
  _1622 = MEM[(charD.10 * *)&D.58755];
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.58696 => D#56ptD.0
  if (&MEM[(const struct basic_stringD.9877 *)&D.58755].D.14356._M_local_bufD.14358 != _1622)
    goto <bb 341>;
  else
    goto <bb 342>;
;;    succ:       341 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                342 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 341, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 340, next block 342, flags: (NEW, REACHABLE)
;;    pred:       340 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => MEM[(struct basic_stringD.9877 *)D#56ptD.0].D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.58688 => D#56ptD.0
  # DEBUG __sizeD.58687 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => D#56ptD.0
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => D#56ptD.0
  # DEBUG D#51ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.58691 => _1622
  # DEBUG __aD.58689 => D#49ptD.0
  # DEBUG __nD.58690 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.58694 => _1622
  # DEBUG thisD.58692 => D#45ptD.0
  # DEBUG D.58693 => D#46ptD.0
  # .MEM_2464 = VDEF <.MEM_2456>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_1622);
;;    succ:       342 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 342, loop depth 0, count 0, freq 0, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;    prev block 341, next block 343, flags: (NEW, REACHABLE)
;;    pred:       340 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                341 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1810 = PHI <.MEM_2456(340), .MEM_2464(341)>
  # DEBUG D#55ptD.0 => &MEM[(struct basic_stringD.9877 *)D#56ptD.0]._M_dataplusD.14336
  # DEBUG thisD.58697 => D#55ptD.0
  # DEBUG thisD.58698 => D#55ptD.0
  # DEBUG thisD.58699 => D#55ptD.0
  # .MEM_2470 = VDEF <.MEM_1810>
  D.58755 ={v} {CLOBBER};
  [LP 54] resx 145
;;    succ:       448 (EH,EXECUTABLE)

;;   basic block 343, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 342, next block 344, flags: (NEW, REACHABLE)
;;    pred:       339 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45874.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53826 => &D.45874
  # DEBUG __sizeD.53825 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45874
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45874
  # DEBUG D#51ptD.0 => &D.45874._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53829 => D#510ptD.0
  # DEBUG __aD.53827 => D#49ptD.0
  # DEBUG __nD.53828 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53832 => D#510ptD.0
  # DEBUG thisD.53830 => D#45ptD.0
  # DEBUG D.53831 => D#46ptD.0
  # .MEM_511 = VDEF <.MEM_227>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (prephitmp_2061);
;;    succ:       344 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 344, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 343, next block 345, flags: (NEW, REACHABLE)
;;    pred:       339 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                343 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_82 = PHI <.MEM_227(339), .MEM_511(343)>
  # DEBUG D#55ptD.0 => &D.45874._M_dataplusD.14336
  # DEBUG thisD.53835 => D#55ptD.0
  # DEBUG thisD.53836 => D#55ptD.0
  # DEBUG thisD.53837 => D#55ptD.0
  # .MEM_228 = VDEF <.MEM_82>
  D.45874 ={v} {CLOBBER};
  # DEBUG thisD.53821 => &D.45873
  # DEBUG thisD.53822 => &D.45873
  # DEBUG D#30ptD.0 => &D.45876
  # DEBUG thisD.53820 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45876
  # DEBUG thisD.58877 => &D.45877
  # DEBUG __sD.58878 => "planar_adapt_mesh"
  # DEBUG __aD.58879 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.58889 => &D.45877
  # DEBUG D#66ptD.0 => &D.45877._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.58892 => D#66ptD.0
  # DEBUG __datD.58891 => &D.45877.D.14356._M_local_bufD.14358
  # DEBUG __aD.58890 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2473 = VDEF <.MEM_228>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45877]._M_pD.14342 = &D.45877.D.14356._M_local_bufD.14358;
  # DEBUG __sD.58888 => "planar_adapt_mesh"
  # DEBUG thisD.58882 => &D.45877
  # DEBUG __begD.58881 => "planar_adapt_mesh"
  # DEBUG __endD.58880 => &MEM[(voidD.45 *)"planar_adapt_mesh" + 17B]
  # DEBUG thisD.58886 => &D.45877
  # DEBUG __begD.58885 => "planar_adapt_mesh"
  # DEBUG __endD.58884 => &MEM[(voidD.45 *)"planar_adapt_mesh" + 17B]
  # DEBUG thisD.58893 => &D.45877
  # DEBUG __begD.58894 => "planar_adapt_mesh"
  # DEBUG __endD.58895 => &MEM[(voidD.45 *)"planar_adapt_mesh" + 17B]
  # DEBUG __ptrD.52815 => "planar_adapt_mesh"
  # DEBUG __firstD.58919 => "planar_adapt_mesh"
  # DEBUG __lastD.58918 => &MEM[(voidD.45 *)"planar_adapt_mesh" + 17B]
  # DEBUG D#109ptD.0 => &__firstD.58919
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.58921 => "planar_adapt_mesh"
  # DEBUG __lastD.58920 => &MEM[(voidD.45 *)"planar_adapt_mesh" + 17B]
  # .MEM_2474 = VDEF <.MEM_2473>
  __dnewD.58896 = 17;
  # .MEM_2475 = VDEF <.MEM_2474>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _1693 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.45877, &__dnewD.58896, 0);
  # DEBUG D#5ptD.0 => &D.45877
  # DEBUG __pD.58915 => _1693
  # DEBUG thisD.58914 => D#5ptD.0
  # .MEM_2476 = VDEF <.MEM_2475>
  MEM[(charD.10 * *)&D.45877] = _1693;
  # VUSE <.MEM_2476>
  __dnew.173_1694 = __dnewD.58896;
  # DEBUG D#6ptD.0 => &D.45877
  # DEBUG __capacityD.58917 => __dnew.173_1694
  # DEBUG thisD.58916 => D#6ptD.0
  # .MEM_2477 = VDEF <.MEM_2476>
  MEM[(size_typeD.14319 *)&D.45877 + 16B] = __dnew.173_1694;
  # DEBUG D#3ptD.0 => &D.45877
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.58899 => _1693
  # DEBUG __k1D.58898 => "planar_adapt_mesh"
  # DEBUG __k2D.58897 => &MEM[(voidD.45 *)"planar_adapt_mesh" + 17B]
  # DEBUG __dD.58902 => _1693
  # DEBUG __sD.58901 => "planar_adapt_mesh"
  # DEBUG __nD.58900 => 17
  # DEBUG __s1D.58905 => _1693
  # DEBUG __s2D.58904 => "planar_adapt_mesh"
  # DEBUG __nD.58903 => 17
  # .MEM_2479 = VDEF <.MEM_2477>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (_1693, "planar_adapt_mesh", 17);
  # VUSE <.MEM_2479>
  __dnew.173_1697 = __dnewD.58896;
  # DEBUG thisD.58909 => &D.45877
  # DEBUG __nD.58908 => __dnew.173_1697
  # DEBUG D#7ptD.0 => &D.45877
  # DEBUG __lengthD.58911 => __dnew.173_1697
  # DEBUG thisD.58910 => D#7ptD.0
  # .MEM_2480 = VDEF <.MEM_2479>
  MEM[(size_typeD.14319 *)&D.45877 + 8B] = __dnew.173_1697;
  # VUSE <.MEM_2480>
  # PT = nonlocal escaped null { D.45877 } (escaped)
  _1698 = MEM[(charD.10 * *)&D.45877];
  # DEBUG D#3ptD.0 => &D.45877
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.45877 } (escaped)
  _1699 = _1698 + __dnew.173_1697;
  # DEBUG __c1D.58913 => _1699
  # DEBUG __c2D.58912 => D#11ptD.0
  # .MEM_2481 = VDEF <.MEM_2480>
  MEM[(char_typeD.10931 &)_1699] = 0;
  # .MEM_2482 = VDEF <.MEM_2481>
  __dnewD.58896 ={v} {CLOBBER};
  [LP 56] # .MEM_232 = VDEF <.MEM_2482>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _233 = _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPK6RouterPK4FlitiP9OutputSetbESt4lessIS5_ESaISt4pairIKS5_SF_EEEixERSJ_.constprop.56D.54544 (&D.45877);
;;    succ:       451 (EH,EXECUTABLE)
;;                345 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 345, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 344, next block 346, flags: (NEW, REACHABLE)
;;    pred:       344 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_234 = VDEF <.MEM_232>
  *_233 = _Z17planar_adapt_meshPK6RouterPK4FlitiP9OutputSetbD.45626;
  # DEBUG thisD.53841 => &D.45877
  # DEBUG thisD.53842 => &D.45877
  # DEBUG thisD.53851 => &D.45877
  # VUSE <.MEM_234>
  # PT = nonlocal escaped null { D.45877 } (escaped)
  _236 = MEM[(charD.10 * *)&D.45877];
  # DEBUG D#3ptD.0 => &D.45877
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53852 => &D.45877
  if (&D.45877.D.14356._M_local_bufD.14358 != _236)
    goto <bb 346>;
  else
    goto <bb 347>;
;;    succ:       346 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                347 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 346, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 345, next block 347, flags: (NEW, REACHABLE)
;;    pred:       345 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45877.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53844 => &D.45877
  # DEBUG __sizeD.53843 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45877
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45877
  # DEBUG D#51ptD.0 => &D.45877._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53847 => _236
  # DEBUG __aD.53845 => D#49ptD.0
  # DEBUG __nD.53846 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53850 => _236
  # DEBUG thisD.53848 => D#45ptD.0
  # DEBUG D.53849 => D#46ptD.0
  # .MEM_516 = VDEF <.MEM_234>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_236);
;;    succ:       347 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 347, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 346, next block 348, flags: (NEW, REACHABLE)
;;    pred:       345 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                346 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_71 = PHI <.MEM_234(345), .MEM_516(346)>
  # DEBUG D#55ptD.0 => &D.45877._M_dataplusD.14336
  # DEBUG thisD.53853 => D#55ptD.0
  # DEBUG thisD.53854 => D#55ptD.0
  # DEBUG thisD.53855 => D#55ptD.0
  # .MEM_235 = VDEF <.MEM_71>
  D.45877 ={v} {CLOBBER};
  # DEBUG thisD.53839 => &D.45876
  # DEBUG thisD.53840 => &D.45876
  # DEBUG D#30ptD.0 => &D.45879
  # DEBUG thisD.53838 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45879
  # DEBUG thisD.58922 => &D.45880
  # DEBUG __sD.58923 => "valiant_mesh"
  # DEBUG __aD.58924 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.58934 => &D.45880
  # DEBUG D#66ptD.0 => &D.45880._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.58937 => D#66ptD.0
  # DEBUG __datD.58936 => &D.45880.D.14356._M_local_bufD.14358
  # DEBUG __aD.58935 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2483 = VDEF <.MEM_235>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45880]._M_pD.14342 = &D.45880.D.14356._M_local_bufD.14358;
  # DEBUG __sD.58933 => "valiant_mesh"
  # DEBUG thisD.58927 => &D.45880
  # DEBUG __begD.58926 => "valiant_mesh"
  # DEBUG __endD.58925 => &MEM[(voidD.45 *)"valiant_mesh" + 12B]
  # DEBUG thisD.58931 => &D.45880
  # DEBUG __begD.58930 => "valiant_mesh"
  # DEBUG __endD.58929 => &MEM[(voidD.45 *)"valiant_mesh" + 12B]
  # DEBUG thisD.58938 => &D.45880
  # DEBUG __begD.58939 => "valiant_mesh"
  # DEBUG __endD.58940 => &MEM[(voidD.45 *)"valiant_mesh" + 12B]
  # DEBUG __ptrD.52815 => "valiant_mesh"
  # DEBUG __firstD.58964 => "valiant_mesh"
  # DEBUG __lastD.58963 => &MEM[(voidD.45 *)"valiant_mesh" + 12B]
  # DEBUG D#109ptD.0 => &__firstD.58964
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.58966 => "valiant_mesh"
  # DEBUG __lastD.58965 => &MEM[(voidD.45 *)"valiant_mesh" + 12B]
  # DEBUG __dnewD.58941 => 12
  # DEBUG D#3ptD.0 => &D.45880
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.58944 => &D.45880.D.14356._M_local_bufD.14358
  # DEBUG __k1D.58943 => "valiant_mesh"
  # DEBUG __k2D.58942 => &MEM[(voidD.45 *)"valiant_mesh" + 12B]
  # DEBUG __dD.58947 => &D.45880.D.14356._M_local_bufD.14358
  # DEBUG __sD.58946 => "valiant_mesh"
  # DEBUG __nD.58945 => 12
  # DEBUG __s1D.58950 => &D.45880.D.14356._M_local_bufD.14358
  # DEBUG __s2D.58949 => "valiant_mesh"
  # DEBUG __nD.58948 => 12
  # .MEM_2489 = VDEF <.MEM_2483>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&D.45880.D.14356._M_local_bufD.14358, "valiant_mesh", 12);
  # DEBUG thisD.58954 => &D.45880
  # DEBUG __nD.58953 => 12
  # DEBUG D#7ptD.0 => &D.45880
  # DEBUG __lengthD.58956 => 12
  # DEBUG thisD.58955 => D#7ptD.0
  # .MEM_2490 = VDEF <.MEM_2489>
  MEM[(size_typeD.14319 *)&D.45880 + 8B] = 12;
  # DEBUG D#3ptD.0 => &D.45880
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.58958 => &MEM[(voidD.45 *)&D.45880 + 28B]
  # DEBUG __c2D.58957 => D#11ptD.0
  # .MEM_2491 = VDEF <.MEM_2490>
  MEM[(char_typeD.10931 &)&D.45880 + 28] = 0;
  # DEBUG D#505ptD.0 => {CLOBBER}
  # DEBUG __dnewD.58941 => D#505ptD.0
  [LP 58] # .MEM_239 = VDEF <.MEM_2491>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _240 = _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPK6RouterPK4FlitiP9OutputSetbESt4lessIS5_ESaISt4pairIKS5_SF_EEEixERSJ_.constprop.56D.54544 (&D.45880);
;;    succ:       454 (EH,EXECUTABLE)
;;                348 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 348, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 347, next block 349, flags: (NEW, REACHABLE)
;;    pred:       347 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_241 = VDEF <.MEM_239>
  *_240 = _Z12valiant_meshPK6RouterPK4FlitiP9OutputSetbD.45653;
  # DEBUG thisD.53859 => &D.45880
  # DEBUG thisD.53860 => &D.45880
  # DEBUG thisD.53869 => &D.45880
  # VUSE <.MEM_241>
  # PT = nonlocal escaped { D.45880 } (escaped)
  _243 = MEM[(charD.10 * *)&D.45880];
  # DEBUG D#3ptD.0 => &D.45880
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53870 => &D.45880
  if (&D.45880.D.14356._M_local_bufD.14358 != _243)
    goto <bb 349>;
  else
    goto <bb 350>;
;;    succ:       349 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                350 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 349, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 348, next block 350, flags: (NEW, REACHABLE)
;;    pred:       348 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45880.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53862 => &D.45880
  # DEBUG __sizeD.53861 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45880
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45880
  # DEBUG D#51ptD.0 => &D.45880._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53865 => _243
  # DEBUG __aD.53863 => D#49ptD.0
  # DEBUG __nD.53864 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53868 => _243
  # DEBUG thisD.53866 => D#45ptD.0
  # DEBUG D.53867 => D#46ptD.0
  # .MEM_521 = VDEF <.MEM_241>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_243);
;;    succ:       350 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 350, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 349, next block 351, flags: (NEW, REACHABLE)
;;    pred:       348 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                349 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_60 = PHI <.MEM_241(348), .MEM_521(349)>
  # DEBUG D#55ptD.0 => &D.45880._M_dataplusD.14336
  # DEBUG thisD.53871 => D#55ptD.0
  # DEBUG thisD.53872 => D#55ptD.0
  # DEBUG thisD.53873 => D#55ptD.0
  # .MEM_242 = VDEF <.MEM_60>
  D.45880 ={v} {CLOBBER};
  # DEBUG thisD.53857 => &D.45879
  # DEBUG thisD.53858 => &D.45879
  # DEBUG D#30ptD.0 => &D.45882
  # DEBUG thisD.53856 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45882
  # DEBUG thisD.58967 => &D.45883
  # DEBUG __sD.58968 => "valiant_torus"
  # DEBUG __aD.58969 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.58979 => &D.45883
  # DEBUG D#66ptD.0 => &D.45883._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.58982 => D#66ptD.0
  # DEBUG __datD.58981 => &D.45883.D.14356._M_local_bufD.14358
  # DEBUG __aD.58980 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2493 = VDEF <.MEM_242>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45883]._M_pD.14342 = &D.45883.D.14356._M_local_bufD.14358;
  # DEBUG __sD.58978 => "valiant_torus"
  # DEBUG thisD.58972 => &D.45883
  # DEBUG __begD.58971 => "valiant_torus"
  # DEBUG __endD.58970 => &MEM[(voidD.45 *)"valiant_torus" + 13B]
  # DEBUG thisD.58976 => &D.45883
  # DEBUG __begD.58975 => "valiant_torus"
  # DEBUG __endD.58974 => &MEM[(voidD.45 *)"valiant_torus" + 13B]
  # DEBUG thisD.58983 => &D.45883
  # DEBUG __begD.58984 => "valiant_torus"
  # DEBUG __endD.58985 => &MEM[(voidD.45 *)"valiant_torus" + 13B]
  # DEBUG __ptrD.52815 => "valiant_torus"
  # DEBUG __firstD.59009 => "valiant_torus"
  # DEBUG __lastD.59008 => &MEM[(voidD.45 *)"valiant_torus" + 13B]
  # DEBUG D#109ptD.0 => &__firstD.59009
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.59011 => "valiant_torus"
  # DEBUG __lastD.59010 => &MEM[(voidD.45 *)"valiant_torus" + 13B]
  # DEBUG __dnewD.58986 => 13
  # DEBUG D#3ptD.0 => &D.45883
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.58989 => &D.45883.D.14356._M_local_bufD.14358
  # DEBUG __k1D.58988 => "valiant_torus"
  # DEBUG __k2D.58987 => &MEM[(voidD.45 *)"valiant_torus" + 13B]
  # DEBUG __dD.58992 => &D.45883.D.14356._M_local_bufD.14358
  # DEBUG __sD.58991 => "valiant_torus"
  # DEBUG __nD.58990 => 13
  # DEBUG __s1D.58995 => &D.45883.D.14356._M_local_bufD.14358
  # DEBUG __s2D.58994 => "valiant_torus"
  # DEBUG __nD.58993 => 13
  # .MEM_2499 = VDEF <.MEM_2493>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&D.45883.D.14356._M_local_bufD.14358, "valiant_torus", 13);
  # DEBUG thisD.58999 => &D.45883
  # DEBUG __nD.58998 => 13
  # DEBUG D#7ptD.0 => &D.45883
  # DEBUG __lengthD.59001 => 13
  # DEBUG thisD.59000 => D#7ptD.0
  # .MEM_2500 = VDEF <.MEM_2499>
  MEM[(size_typeD.14319 *)&D.45883 + 8B] = 13;
  # DEBUG D#3ptD.0 => &D.45883
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.59003 => &MEM[(voidD.45 *)&D.45883 + 29B]
  # DEBUG __c2D.59002 => D#11ptD.0
  # .MEM_2501 = VDEF <.MEM_2500>
  MEM[(char_typeD.10931 &)&D.45883 + 29] = 0;
  # DEBUG D#506ptD.0 => {CLOBBER}
  # DEBUG __dnewD.58986 => D#506ptD.0
  [LP 60] # .MEM_246 = VDEF <.MEM_2501>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _247 = _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPK6RouterPK4FlitiP9OutputSetbESt4lessIS5_ESaISt4pairIKS5_SF_EEEixERSJ_.constprop.56D.54544 (&D.45883);
;;    succ:       457 (EH,EXECUTABLE)
;;                351 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 351, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 350, next block 352, flags: (NEW, REACHABLE)
;;    pred:       350 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_248 = VDEF <.MEM_246>
  *_247 = _Z13valiant_torusPK6RouterPK4FlitiP9OutputSetbD.45665;
  # DEBUG thisD.53877 => &D.45883
  # DEBUG thisD.53878 => &D.45883
  # DEBUG thisD.53887 => &D.45883
  # VUSE <.MEM_248>
  # PT = nonlocal escaped { D.45883 } (escaped)
  _250 = MEM[(charD.10 * *)&D.45883];
  # DEBUG D#3ptD.0 => &D.45883
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53888 => &D.45883
  if (&D.45883.D.14356._M_local_bufD.14358 != _250)
    goto <bb 352>;
  else
    goto <bb 353>;
;;    succ:       352 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                353 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 352, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 351, next block 353, flags: (NEW, REACHABLE)
;;    pred:       351 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45883.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53880 => &D.45883
  # DEBUG __sizeD.53879 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45883
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45883
  # DEBUG D#51ptD.0 => &D.45883._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53883 => _250
  # DEBUG __aD.53881 => D#49ptD.0
  # DEBUG __nD.53882 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53886 => _250
  # DEBUG thisD.53884 => D#45ptD.0
  # DEBUG D.53885 => D#46ptD.0
  # .MEM_526 = VDEF <.MEM_248>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_250);
;;    succ:       353 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 353, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 352, next block 354, flags: (NEW, REACHABLE)
;;    pred:       351 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                352 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_48 = PHI <.MEM_248(351), .MEM_526(352)>
  # DEBUG D#55ptD.0 => &D.45883._M_dataplusD.14336
  # DEBUG thisD.53889 => D#55ptD.0
  # DEBUG thisD.53890 => D#55ptD.0
  # DEBUG thisD.53891 => D#55ptD.0
  # .MEM_249 = VDEF <.MEM_48>
  D.45883 ={v} {CLOBBER};
  # DEBUG thisD.53875 => &D.45882
  # DEBUG thisD.53876 => &D.45882
  # DEBUG D#30ptD.0 => &D.45885
  # DEBUG thisD.53874 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45885
  # DEBUG thisD.59012 => &D.45886
  # DEBUG __sD.59013 => "valiant_ni_torus"
  # DEBUG __aD.59014 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.59024 => &D.45886
  # DEBUG D#66ptD.0 => &D.45886._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.59027 => D#66ptD.0
  # DEBUG __datD.59026 => &D.45886.D.14356._M_local_bufD.14358
  # DEBUG __aD.59025 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2503 = VDEF <.MEM_249>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45886]._M_pD.14342 = &D.45886.D.14356._M_local_bufD.14358;
  # DEBUG __sD.59023 => "valiant_ni_torus"
  # DEBUG thisD.59017 => &D.45886
  # DEBUG __begD.59016 => "valiant_ni_torus"
  # DEBUG __endD.59015 => &MEM[(voidD.45 *)"valiant_ni_torus" + 16B]
  # DEBUG thisD.59021 => &D.45886
  # DEBUG __begD.59020 => "valiant_ni_torus"
  # DEBUG __endD.59019 => &MEM[(voidD.45 *)"valiant_ni_torus" + 16B]
  # DEBUG thisD.59028 => &D.45886
  # DEBUG __begD.59029 => "valiant_ni_torus"
  # DEBUG __endD.59030 => &MEM[(voidD.45 *)"valiant_ni_torus" + 16B]
  # DEBUG __ptrD.52815 => "valiant_ni_torus"
  # DEBUG __firstD.59054 => "valiant_ni_torus"
  # DEBUG __lastD.59053 => &MEM[(voidD.45 *)"valiant_ni_torus" + 16B]
  # DEBUG D#109ptD.0 => &__firstD.59054
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.59056 => "valiant_ni_torus"
  # DEBUG __lastD.59055 => &MEM[(voidD.45 *)"valiant_ni_torus" + 16B]
  # .MEM_2504 = VDEF <.MEM_2503>
  __dnewD.59031 = 16;
  # .MEM_2505 = VDEF <.MEM_2504>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _1741 = _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmmD.14380 (&D.45886, &__dnewD.59031, 0);
  # DEBUG D#5ptD.0 => &D.45886
  # DEBUG __pD.59050 => _1741
  # DEBUG thisD.59049 => D#5ptD.0
  # .MEM_2506 = VDEF <.MEM_2505>
  MEM[(charD.10 * *)&D.45886] = _1741;
  # VUSE <.MEM_2506>
  __dnew.173_1742 = __dnewD.59031;
  # DEBUG D#6ptD.0 => &D.45886
  # DEBUG __capacityD.59052 => __dnew.173_1742
  # DEBUG thisD.59051 => D#6ptD.0
  # .MEM_2507 = VDEF <.MEM_2506>
  MEM[(size_typeD.14319 *)&D.45886 + 16B] = __dnew.173_1742;
  # DEBUG D#3ptD.0 => &D.45886
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.59034 => _1741
  # DEBUG __k1D.59033 => "valiant_ni_torus"
  # DEBUG __k2D.59032 => &MEM[(voidD.45 *)"valiant_ni_torus" + 16B]
  # DEBUG __dD.59037 => _1741
  # DEBUG __sD.59036 => "valiant_ni_torus"
  # DEBUG __nD.59035 => 16
  # DEBUG __s1D.59040 => _1741
  # DEBUG __s2D.59039 => "valiant_ni_torus"
  # DEBUG __nD.59038 => 16
  # .MEM_2509 = VDEF <.MEM_2507>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (_1741, "valiant_ni_torus", 16);
  # VUSE <.MEM_2509>
  __dnew.173_1745 = __dnewD.59031;
  # DEBUG thisD.59044 => &D.45886
  # DEBUG __nD.59043 => __dnew.173_1745
  # DEBUG D#7ptD.0 => &D.45886
  # DEBUG __lengthD.59046 => __dnew.173_1745
  # DEBUG thisD.59045 => D#7ptD.0
  # .MEM_2510 = VDEF <.MEM_2509>
  MEM[(size_typeD.14319 *)&D.45886 + 8B] = __dnew.173_1745;
  # VUSE <.MEM_2510>
  # PT = nonlocal escaped null { D.45886 } (escaped)
  _1746 = MEM[(charD.10 * *)&D.45886];
  # DEBUG D#3ptD.0 => &D.45886
  # DEBUG thisD.50754 => D#3ptD.0
  # PT = nonlocal escaped null { D.45886 } (escaped)
  _1747 = _1746 + __dnew.173_1745;
  # DEBUG __c1D.59048 => _1747
  # DEBUG __c2D.59047 => D#11ptD.0
  # .MEM_2511 = VDEF <.MEM_2510>
  MEM[(char_typeD.10931 &)_1747] = 0;
  # .MEM_2512 = VDEF <.MEM_2511>
  __dnewD.59031 ={v} {CLOBBER};
  [LP 62] # .MEM_253 = VDEF <.MEM_2512>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _254 = _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPK6RouterPK4FlitiP9OutputSetbESt4lessIS5_ESaISt4pairIKS5_SF_EEEixERSJ_.constprop.56D.54544 (&D.45886);
;;    succ:       460 (EH,EXECUTABLE)
;;                354 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 354, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 353, next block 355, flags: (NEW, REACHABLE)
;;    pred:       353 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_255 = VDEF <.MEM_253>
  *_254 = _Z16valiant_ni_torusPK6RouterPK4FlitiP9OutputSetbD.45680;
  # DEBUG thisD.53895 => &D.45886
  # DEBUG thisD.53896 => &D.45886
  # DEBUG thisD.53905 => &D.45886
  # VUSE <.MEM_255>
  # PT = nonlocal escaped null { D.45886 } (escaped)
  _257 = MEM[(charD.10 * *)&D.45886];
  # DEBUG D#3ptD.0 => &D.45886
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53906 => &D.45886
  if (&D.45886.D.14356._M_local_bufD.14358 != _257)
    goto <bb 355>;
  else
    goto <bb 356>;
;;    succ:       355 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                356 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 355, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 354, next block 356, flags: (NEW, REACHABLE)
;;    pred:       354 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45886.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53898 => &D.45886
  # DEBUG __sizeD.53897 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45886
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45886
  # DEBUG D#51ptD.0 => &D.45886._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53901 => _257
  # DEBUG __aD.53899 => D#49ptD.0
  # DEBUG __nD.53900 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53904 => _257
  # DEBUG thisD.53902 => D#45ptD.0
  # DEBUG D.53903 => D#46ptD.0
  # .MEM_531 = VDEF <.MEM_255>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_257);
;;    succ:       356 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 356, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 355, next block 357, flags: (NEW, REACHABLE)
;;    pred:       354 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                355 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_39 = PHI <.MEM_255(354), .MEM_531(355)>
  # DEBUG D#55ptD.0 => &D.45886._M_dataplusD.14336
  # DEBUG thisD.53907 => D#55ptD.0
  # DEBUG thisD.53908 => D#55ptD.0
  # DEBUG thisD.53909 => D#55ptD.0
  # .MEM_256 = VDEF <.MEM_39>
  D.45886 ={v} {CLOBBER};
  # DEBUG thisD.53893 => &D.45885
  # DEBUG thisD.53894 => &D.45885
  # DEBUG D#30ptD.0 => &D.45888
  # DEBUG thisD.53892 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45888
  # DEBUG thisD.59057 => &D.45889
  # DEBUG __sD.59058 => "dest_tag_fly"
  # DEBUG __aD.59059 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.59069 => &D.45889
  # DEBUG D#66ptD.0 => &D.45889._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.59072 => D#66ptD.0
  # DEBUG __datD.59071 => &D.45889.D.14356._M_local_bufD.14358
  # DEBUG __aD.59070 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2513 = VDEF <.MEM_256>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45889]._M_pD.14342 = &D.45889.D.14356._M_local_bufD.14358;
  # DEBUG __sD.59068 => "dest_tag_fly"
  # DEBUG thisD.59062 => &D.45889
  # DEBUG __begD.59061 => "dest_tag_fly"
  # DEBUG __endD.59060 => &MEM[(voidD.45 *)"dest_tag_fly" + 12B]
  # DEBUG thisD.59066 => &D.45889
  # DEBUG __begD.59065 => "dest_tag_fly"
  # DEBUG __endD.59064 => &MEM[(voidD.45 *)"dest_tag_fly" + 12B]
  # DEBUG thisD.59073 => &D.45889
  # DEBUG __begD.59074 => "dest_tag_fly"
  # DEBUG __endD.59075 => &MEM[(voidD.45 *)"dest_tag_fly" + 12B]
  # DEBUG __ptrD.52815 => "dest_tag_fly"
  # DEBUG __firstD.59099 => "dest_tag_fly"
  # DEBUG __lastD.59098 => &MEM[(voidD.45 *)"dest_tag_fly" + 12B]
  # DEBUG D#109ptD.0 => &__firstD.59099
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.59101 => "dest_tag_fly"
  # DEBUG __lastD.59100 => &MEM[(voidD.45 *)"dest_tag_fly" + 12B]
  # DEBUG __dnewD.59076 => 12
  # DEBUG D#3ptD.0 => &D.45889
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.59079 => &D.45889.D.14356._M_local_bufD.14358
  # DEBUG __k1D.59078 => "dest_tag_fly"
  # DEBUG __k2D.59077 => &MEM[(voidD.45 *)"dest_tag_fly" + 12B]
  # DEBUG __dD.59082 => &D.45889.D.14356._M_local_bufD.14358
  # DEBUG __sD.59081 => "dest_tag_fly"
  # DEBUG __nD.59080 => 12
  # DEBUG __s1D.59085 => &D.45889.D.14356._M_local_bufD.14358
  # DEBUG __s2D.59084 => "dest_tag_fly"
  # DEBUG __nD.59083 => 12
  # .MEM_2519 = VDEF <.MEM_2513>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&D.45889.D.14356._M_local_bufD.14358, "dest_tag_fly", 12);
  # DEBUG thisD.59089 => &D.45889
  # DEBUG __nD.59088 => 12
  # DEBUG D#7ptD.0 => &D.45889
  # DEBUG __lengthD.59091 => 12
  # DEBUG thisD.59090 => D#7ptD.0
  # .MEM_2520 = VDEF <.MEM_2519>
  MEM[(size_typeD.14319 *)&D.45889 + 8B] = 12;
  # DEBUG D#3ptD.0 => &D.45889
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.59093 => &MEM[(voidD.45 *)&D.45889 + 28B]
  # DEBUG __c2D.59092 => D#11ptD.0
  # .MEM_2521 = VDEF <.MEM_2520>
  MEM[(char_typeD.10931 &)&D.45889 + 28] = 0;
  # DEBUG D#507ptD.0 => {CLOBBER}
  # DEBUG __dnewD.59076 => D#507ptD.0
  [LP 64] # .MEM_260 = VDEF <.MEM_2521>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _261 = _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPK6RouterPK4FlitiP9OutputSetbESt4lessIS5_ESaISt4pairIKS5_SF_EEEixERSJ_.constprop.56D.54544 (&D.45889);
;;    succ:       463 (EH,EXECUTABLE)
;;                357 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 357, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 356, next block 358, flags: (NEW, REACHABLE)
;;    pred:       356 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_262 = VDEF <.MEM_260>
  *_261 = _Z12dest_tag_flyPK6RouterPK4FlitiP9OutputSetbD.45756;
  # DEBUG thisD.53913 => &D.45889
  # DEBUG thisD.53914 => &D.45889
  # DEBUG thisD.53923 => &D.45889
  # VUSE <.MEM_262>
  # PT = nonlocal escaped { D.45889 } (escaped)
  _264 = MEM[(charD.10 * *)&D.45889];
  # DEBUG D#3ptD.0 => &D.45889
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53924 => &D.45889
  if (&D.45889.D.14356._M_local_bufD.14358 != _264)
    goto <bb 358>;
  else
    goto <bb 359>;
;;    succ:       358 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                359 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 358, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 357, next block 359, flags: (NEW, REACHABLE)
;;    pred:       357 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45889.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53916 => &D.45889
  # DEBUG __sizeD.53915 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45889
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45889
  # DEBUG D#51ptD.0 => &D.45889._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53919 => _264
  # DEBUG __aD.53917 => D#49ptD.0
  # DEBUG __nD.53918 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53922 => _264
  # DEBUG thisD.53920 => D#45ptD.0
  # DEBUG D.53921 => D#46ptD.0
  # .MEM_536 = VDEF <.MEM_262>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_264);
;;    succ:       359 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 359, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 358, next block 360, flags: (NEW, REACHABLE)
;;    pred:       357 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                358 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_27 = PHI <.MEM_262(357), .MEM_536(358)>
  # DEBUG D#55ptD.0 => &D.45889._M_dataplusD.14336
  # DEBUG thisD.53925 => D#55ptD.0
  # DEBUG thisD.53926 => D#55ptD.0
  # DEBUG thisD.53927 => D#55ptD.0
  # .MEM_263 = VDEF <.MEM_27>
  D.45889 ={v} {CLOBBER};
  # DEBUG thisD.53911 => &D.45888
  # DEBUG thisD.53912 => &D.45888
  # DEBUG D#30ptD.0 => &D.45891
  # DEBUG thisD.53910 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45891
  # DEBUG thisD.59102 => &D.45892
  # DEBUG __sD.59103 => "chaos_mesh"
  # DEBUG __aD.59104 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.59114 => &D.45892
  # DEBUG D#66ptD.0 => &D.45892._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.59117 => D#66ptD.0
  # DEBUG __datD.59116 => &D.45892.D.14356._M_local_bufD.14358
  # DEBUG __aD.59115 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2523 = VDEF <.MEM_263>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45892]._M_pD.14342 = &D.45892.D.14356._M_local_bufD.14358;
  # DEBUG __sD.59113 => "chaos_mesh"
  # DEBUG thisD.59107 => &D.45892
  # DEBUG __begD.59106 => "chaos_mesh"
  # DEBUG __endD.59105 => &MEM[(voidD.45 *)"chaos_mesh" + 10B]
  # DEBUG thisD.59111 => &D.45892
  # DEBUG __begD.59110 => "chaos_mesh"
  # DEBUG __endD.59109 => &MEM[(voidD.45 *)"chaos_mesh" + 10B]
  # DEBUG thisD.59118 => &D.45892
  # DEBUG __begD.59119 => "chaos_mesh"
  # DEBUG __endD.59120 => &MEM[(voidD.45 *)"chaos_mesh" + 10B]
  # DEBUG __ptrD.52815 => "chaos_mesh"
  # DEBUG __firstD.59144 => "chaos_mesh"
  # DEBUG __lastD.59143 => &MEM[(voidD.45 *)"chaos_mesh" + 10B]
  # DEBUG D#109ptD.0 => &__firstD.59144
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.59146 => "chaos_mesh"
  # DEBUG __lastD.59145 => &MEM[(voidD.45 *)"chaos_mesh" + 10B]
  # DEBUG __dnewD.59121 => 10
  # DEBUG D#3ptD.0 => &D.45892
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.59124 => &D.45892.D.14356._M_local_bufD.14358
  # DEBUG __k1D.59123 => "chaos_mesh"
  # DEBUG __k2D.59122 => &MEM[(voidD.45 *)"chaos_mesh" + 10B]
  # DEBUG __dD.59127 => &D.45892.D.14356._M_local_bufD.14358
  # DEBUG __sD.59126 => "chaos_mesh"
  # DEBUG __nD.59125 => 10
  # DEBUG __s1D.59130 => &D.45892.D.14356._M_local_bufD.14358
  # DEBUG __s2D.59129 => "chaos_mesh"
  # DEBUG __nD.59128 => 10
  # .MEM_2529 = VDEF <.MEM_2523>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&D.45892.D.14356._M_local_bufD.14358, "chaos_mesh", 10);
  # DEBUG thisD.59134 => &D.45892
  # DEBUG __nD.59133 => 10
  # DEBUG D#7ptD.0 => &D.45892
  # DEBUG __lengthD.59136 => 10
  # DEBUG thisD.59135 => D#7ptD.0
  # .MEM_2530 = VDEF <.MEM_2529>
  MEM[(size_typeD.14319 *)&D.45892 + 8B] = 10;
  # DEBUG D#3ptD.0 => &D.45892
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.59138 => &MEM[(voidD.45 *)&D.45892 + 26B]
  # DEBUG __c2D.59137 => D#11ptD.0
  # .MEM_2531 = VDEF <.MEM_2530>
  MEM[(char_typeD.10931 &)&D.45892 + 26] = 0;
  # DEBUG D#508ptD.0 => {CLOBBER}
  # DEBUG __dnewD.59121 => D#508ptD.0
  [LP 66] # .MEM_266 = VDEF <.MEM_2531>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _267 = _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPK6RouterPK4FlitiP9OutputSetbESt4lessIS5_ESaISt4pairIKS5_SF_EEEixERSJ_.constprop.56D.54544 (&D.45892);
;;    succ:       466 (EH,EXECUTABLE)
;;                360 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 360, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 359, next block 361, flags: (NEW, REACHABLE)
;;    pred:       359 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_268 = VDEF <.MEM_266>
  *_267 = _Z10chaos_meshPK6RouterPK4FlitiP9OutputSetbD.45784;
  # DEBUG thisD.53931 => &D.45892
  # DEBUG thisD.53932 => &D.45892
  # DEBUG thisD.53941 => &D.45892
  # VUSE <.MEM_268>
  # PT = nonlocal escaped { D.45892 } (escaped)
  _270 = MEM[(charD.10 * *)&D.45892];
  # DEBUG D#3ptD.0 => &D.45892
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53942 => &D.45892
  if (&D.45892.D.14356._M_local_bufD.14358 != _270)
    goto <bb 361>;
  else
    goto <bb 362>;
;;    succ:       361 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                362 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 361, loop depth 0, count 0, freq 628, maybe hot
;;    prev block 360, next block 362, flags: (NEW, REACHABLE)
;;    pred:       360 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45892.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53934 => &D.45892
  # DEBUG __sizeD.53933 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45892
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45892
  # DEBUG D#51ptD.0 => &D.45892._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53937 => _270
  # DEBUG __aD.53935 => D#49ptD.0
  # DEBUG __nD.53936 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53940 => _270
  # DEBUG thisD.53938 => D#45ptD.0
  # DEBUG D.53939 => D#46ptD.0
  # .MEM_541 = VDEF <.MEM_268>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_270);
;;    succ:       362 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 362, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 361, next block 363, flags: (NEW, REACHABLE)
;;    pred:       360 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                361 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_18 = PHI <.MEM_268(360), .MEM_541(361)>
  # DEBUG D#55ptD.0 => &D.45892._M_dataplusD.14336
  # DEBUG thisD.53943 => D#55ptD.0
  # DEBUG thisD.53944 => D#55ptD.0
  # DEBUG thisD.53945 => D#55ptD.0
  # .MEM_269 = VDEF <.MEM_18>
  D.45892 ={v} {CLOBBER};
  # DEBUG thisD.53929 => &D.45891
  # DEBUG thisD.53930 => &D.45891
  # DEBUG D#30ptD.0 => &D.45894
  # DEBUG thisD.53928 => D#30ptD.0
  # DEBUG D#29ptD.0 => D#30ptD.0
  # DEBUG thisD.51559 => D#29ptD.0
  # DEBUG D#69ptD.0 => &D.45894
  # DEBUG thisD.59147 => &D.45895
  # DEBUG __sD.59148 => "chaos_torus"
  # DEBUG __aD.59149 => D#69ptD.0
  # DEBUG D#68ptD.0 => D#69ptD.0
  # DEBUG thisD.59159 => &D.45895
  # DEBUG D#66ptD.0 => &D.45895._M_dataplusD.14336
  # DEBUG D#43ptD.0 => D#68ptD.0
  # DEBUG thisD.59162 => D#66ptD.0
  # DEBUG __datD.59161 => &D.45895.D.14356._M_local_bufD.14358
  # DEBUG __aD.59160 => D#43ptD.0
  # DEBUG D#42ptD.0 => D#43ptD.0
  # DEBUG D#40ptD.0 => D#66ptD.0
  # DEBUG D#41ptD.0 => D#42ptD.0
  # DEBUG thisD.51650 => D#40ptD.0
  # DEBUG __aD.51651 => D#41ptD.0
  # DEBUG D#39ptD.0 => D#41ptD.0
  # DEBUG D#38ptD.0 => D#40ptD.0
  # DEBUG thisD.51632 => D#38ptD.0
  # DEBUG D.51633 => D#39ptD.0
  # .MEM_2533 = VDEF <.MEM_269>
  MEM[(struct _Alloc_hiderD.14335 *)&D.45895]._M_pD.14342 = &D.45895.D.14356._M_local_bufD.14358;
  # DEBUG __sD.59158 => "chaos_torus"
  # DEBUG thisD.59152 => &D.45895
  # DEBUG __begD.59151 => "chaos_torus"
  # DEBUG __endD.59150 => &MEM[(voidD.45 *)"chaos_torus" + 11B]
  # DEBUG thisD.59156 => &D.45895
  # DEBUG __begD.59155 => "chaos_torus"
  # DEBUG __endD.59154 => &MEM[(voidD.45 *)"chaos_torus" + 11B]
  # DEBUG thisD.59163 => &D.45895
  # DEBUG __begD.59164 => "chaos_torus"
  # DEBUG __endD.59165 => &MEM[(voidD.45 *)"chaos_torus" + 11B]
  # DEBUG __ptrD.52815 => "chaos_torus"
  # DEBUG __firstD.59189 => "chaos_torus"
  # DEBUG __lastD.59188 => &MEM[(voidD.45 *)"chaos_torus" + 11B]
  # DEBUG D#109ptD.0 => &__firstD.59189
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.59191 => "chaos_torus"
  # DEBUG __lastD.59190 => &MEM[(voidD.45 *)"chaos_torus" + 11B]
  # DEBUG __dnewD.59166 => 11
  # DEBUG D#3ptD.0 => &D.45895
  # DEBUG thisD.52789 => D#3ptD.0
  # DEBUG __pD.59169 => &D.45895.D.14356._M_local_bufD.14358
  # DEBUG __k1D.59168 => "chaos_torus"
  # DEBUG __k2D.59167 => &MEM[(voidD.45 *)"chaos_torus" + 11B]
  # DEBUG __dD.59172 => &D.45895.D.14356._M_local_bufD.14358
  # DEBUG __sD.59171 => "chaos_torus"
  # DEBUG __nD.59170 => 11
  # DEBUG __s1D.59175 => &D.45895.D.14356._M_local_bufD.14358
  # DEBUG __s2D.59174 => "chaos_torus"
  # DEBUG __nD.59173 => 11
  # .MEM_2539 = VDEF <.MEM_2533>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  memcpyD.992 (&D.45895.D.14356._M_local_bufD.14358, "chaos_torus", 11);
  # DEBUG thisD.59179 => &D.45895
  # DEBUG __nD.59178 => 11
  # DEBUG D#7ptD.0 => &D.45895
  # DEBUG __lengthD.59181 => 11
  # DEBUG thisD.59180 => D#7ptD.0
  # .MEM_2540 = VDEF <.MEM_2539>
  MEM[(size_typeD.14319 *)&D.45895 + 8B] = 11;
  # DEBUG D#3ptD.0 => &D.45895
  # DEBUG thisD.50754 => D#3ptD.0
  # DEBUG __c1D.59183 => &MEM[(voidD.45 *)&D.45895 + 27B]
  # DEBUG __c2D.59182 => D#11ptD.0
  # .MEM_2541 = VDEF <.MEM_2540>
  MEM[(char_typeD.10931 &)&D.45895 + 27] = 0;
  # DEBUG D#509ptD.0 => {CLOBBER}
  # DEBUG __dnewD.59166 => D#509ptD.0
  [LP 68] # .MEM_272 = VDEF <.MEM_2541>
  # PT = nonlocal escaped 
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _273 = _ZNSt3mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPFvPK6RouterPK4FlitiP9OutputSetbESt4lessIS5_ESaISt4pairIKS5_SF_EEEixERSJ_.constprop.56D.54544 (&D.45895);
;;    succ:       469 (EH,EXECUTABLE)
;;                363 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 363, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 362, next block 364, flags: (NEW, REACHABLE)
;;    pred:       362 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_274 = VDEF <.MEM_272>
  *_273 = _Z11chaos_torusPK6RouterPK4FlitiP9OutputSetbD.45771;
  # DEBUG thisD.53948 => &D.45895
  # DEBUG thisD.53949 => &D.45895
  # DEBUG thisD.53958 => &D.45895
  # VUSE <.MEM_274>
  # PT = nonlocal escaped { D.45895 } (escaped)
  _277 = MEM[(charD.10 * *)&D.45895];
  # DEBUG D#3ptD.0 => &D.45895
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53959 => &D.45895
  if (&D.45895.D.14356._M_local_bufD.14358 != _277)
    goto <bb 364>;
  else
    goto <bb 365>;
;;    succ:       364 [78.3%]  (TRUE_VALUE,EXECUTABLE)
;;                365 [21.6%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 364, loop depth 0, count 0, freq 704, maybe hot
;;    prev block 363, next block 365, flags: (NEW, REACHABLE)
;;    pred:       363 [78.3%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45895.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53951 => &D.45895
  # DEBUG __sizeD.53950 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45895
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45895
  # DEBUG D#51ptD.0 => &D.45895._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53954 => _277
  # DEBUG __aD.53952 => D#49ptD.0
  # DEBUG __nD.53953 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53957 => _277
  # DEBUG thisD.53955 => D#45ptD.0
  # DEBUG D.53956 => D#46ptD.0
  # .MEM_546 = VDEF <.MEM_274>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_277);
;;    succ:       365 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 365, loop depth 0, count 0, freq 899, maybe hot
;;    prev block 364, next block 366, flags: (NEW, REACHABLE)
;;    pred:       363 [21.6%]  (FALSE_VALUE,EXECUTABLE)
;;                364 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_10 = PHI <.MEM_274(363), .MEM_546(364)>
  # DEBUG D#55ptD.0 => &D.45895._M_dataplusD.14336
  # DEBUG thisD.53960 => D#55ptD.0
  # DEBUG thisD.53961 => D#55ptD.0
  # DEBUG thisD.53962 => D#55ptD.0
  # .MEM_276 = VDEF <.MEM_10>
  D.45895 ={v} {CLOBBER};
  # DEBUG thisD.53946 => &D.45894
  # DEBUG thisD.53947 => &D.45894
  # VUSE <.MEM_276>
  return;
;;    succ:       EXIT [100.0%] 

;;   basic block 366, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 365, next block 367, flags: (NEW, REACHABLE)
;;    pred:       2 (EH,EXECUTABLE)
<L24>: [LP 2]
  # DEBUG thisD.53963 => &D.45796
  # DEBUG thisD.53964 => &D.45796
  # DEBUG thisD.53973 => &D.45796
  # VUSE <.MEM_13>
  # PT = nonlocal escaped { D.45796 } (escaped)
  _275 = MEM[(charD.10 * *)&D.45796];
  # DEBUG D#3ptD.0 => &D.45796
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53974 => &D.45796
  if (&D.45796.D.14356._M_local_bufD.14358 != _275)
    goto <bb 367>;
  else
    goto <bb 368>;
;;    succ:       367 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                368 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 367, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 366, next block 368, flags: (NEW, REACHABLE)
;;    pred:       366 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45796.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53966 => &D.45796
  # DEBUG __sizeD.53965 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45796
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45796
  # DEBUG D#51ptD.0 => &D.45796._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53969 => _275
  # DEBUG __aD.53967 => D#49ptD.0
  # DEBUG __nD.53968 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53972 => _275
  # DEBUG thisD.53970 => D#45ptD.0
  # DEBUG D.53971 => D#46ptD.0
  # .MEM_716 = VDEF <.MEM_13>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_275);
;;    succ:       368 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 368, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 367, next block 369, flags: (NEW, REACHABLE)
;;    pred:       366 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                367 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_347 = PHI <.MEM_13(366), .MEM_716(367)>
  # DEBUG D#55ptD.0 => &D.45796._M_dataplusD.14336
  # DEBUG thisD.53975 => D#55ptD.0
  # DEBUG thisD.53976 => D#55ptD.0
  # DEBUG thisD.53977 => D#55ptD.0
  # .MEM_345 = VDEF <.MEM_347>
  D.45796 ={v} {CLOBBER};
  resx 2
;;    succ:      

;;   basic block 369, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 368, next block 370, flags: (NEW, REACHABLE)
;;    pred:       5 (EH,EXECUTABLE)
<L26>: [LP 4]
  # DEBUG thisD.53980 => &D.45799
  # DEBUG thisD.53981 => &D.45799
  # DEBUG thisD.53990 => &D.45799
  # VUSE <.MEM_20>
  # PT = nonlocal escaped null { D.45799 } (escaped)
  _346 = MEM[(charD.10 * *)&D.45799];
  # DEBUG D#3ptD.0 => &D.45799
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.53991 => &D.45799
  if (&D.45799.D.14356._M_local_bufD.14358 != _346)
    goto <bb 370>;
  else
    goto <bb 371>;
;;    succ:       370 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                371 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 370, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 369, next block 371, flags: (NEW, REACHABLE)
;;    pred:       369 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45799.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.53983 => &D.45799
  # DEBUG __sizeD.53982 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45799
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45799
  # DEBUG D#51ptD.0 => &D.45799._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.53986 => _346
  # DEBUG __aD.53984 => D#49ptD.0
  # DEBUG __nD.53985 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.53989 => _346
  # DEBUG thisD.53987 => D#45ptD.0
  # DEBUG D.53988 => D#46ptD.0
  # .MEM_711 = VDEF <.MEM_20>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_346);
;;    succ:       371 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 371, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 370, next block 372, flags: (NEW, REACHABLE)
;;    pred:       369 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                370 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_348 = PHI <.MEM_20(369), .MEM_711(370)>
  # DEBUG D#55ptD.0 => &D.45799._M_dataplusD.14336
  # DEBUG thisD.53992 => D#55ptD.0
  # DEBUG thisD.53993 => D#55ptD.0
  # DEBUG thisD.53994 => D#55ptD.0
  # .MEM_343 = VDEF <.MEM_348>
  D.45799 ={v} {CLOBBER};
  resx 6
;;    succ:      

;;   basic block 372, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 371, next block 373, flags: (NEW, REACHABLE)
;;    pred:       10 (EH,EXECUTABLE)
<L28>: [LP 6]
  # DEBUG thisD.53997 => &D.45802
  # DEBUG thisD.53998 => &D.45802
  # DEBUG thisD.54007 => &D.45802
  # VUSE <.MEM_29>
  # PT = nonlocal escaped null { D.45802 } (escaped)
  _344 = MEM[(charD.10 * *)&D.45802];
  # DEBUG D#3ptD.0 => &D.45802
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54008 => &D.45802
  if (&D.45802.D.14356._M_local_bufD.14358 != _344)
    goto <bb 373>;
  else
    goto <bb 374>;
;;    succ:       373 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                374 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 373, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 372, next block 374, flags: (NEW, REACHABLE)
;;    pred:       372 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45802.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54000 => &D.45802
  # DEBUG __sizeD.53999 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45802
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45802
  # DEBUG D#51ptD.0 => &D.45802._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54003 => _344
  # DEBUG __aD.54001 => D#49ptD.0
  # DEBUG __nD.54002 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54006 => _344
  # DEBUG thisD.54004 => D#45ptD.0
  # DEBUG D.54005 => D#46ptD.0
  # .MEM_706 = VDEF <.MEM_29>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_344);
;;    succ:       374 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 374, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 373, next block 375, flags: (NEW, REACHABLE)
;;    pred:       372 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                373 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_349 = PHI <.MEM_29(372), .MEM_706(373)>
  # DEBUG D#55ptD.0 => &D.45802._M_dataplusD.14336
  # DEBUG thisD.54009 => D#55ptD.0
  # DEBUG thisD.54010 => D#55ptD.0
  # DEBUG thisD.54011 => D#55ptD.0
  # .MEM_341 = VDEF <.MEM_349>
  D.45802 ={v} {CLOBBER};
  resx 10
;;    succ:      

;;   basic block 375, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 374, next block 376, flags: (NEW, REACHABLE)
;;    pred:       15 (EH,EXECUTABLE)
<L30>: [LP 8]
  # DEBUG thisD.54014 => &D.45805
  # DEBUG thisD.54015 => &D.45805
  # DEBUG thisD.54024 => &D.45805
  # VUSE <.MEM_41>
  # PT = nonlocal escaped null { D.45805 } (escaped)
  _342 = MEM[(charD.10 * *)&D.45805];
  # DEBUG D#3ptD.0 => &D.45805
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54025 => &D.45805
  if (&D.45805.D.14356._M_local_bufD.14358 != _342)
    goto <bb 376>;
  else
    goto <bb 377>;
;;    succ:       376 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                377 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 376, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 375, next block 377, flags: (NEW, REACHABLE)
;;    pred:       375 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45805.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54017 => &D.45805
  # DEBUG __sizeD.54016 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45805
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45805
  # DEBUG D#51ptD.0 => &D.45805._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54020 => _342
  # DEBUG __aD.54018 => D#49ptD.0
  # DEBUG __nD.54019 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54023 => _342
  # DEBUG thisD.54021 => D#45ptD.0
  # DEBUG D.54022 => D#46ptD.0
  # .MEM_701 = VDEF <.MEM_41>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_342);
;;    succ:       377 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 377, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 376, next block 378, flags: (NEW, REACHABLE)
;;    pred:       375 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                376 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_350 = PHI <.MEM_41(375), .MEM_701(376)>
  # DEBUG D#55ptD.0 => &D.45805._M_dataplusD.14336
  # DEBUG thisD.54026 => D#55ptD.0
  # DEBUG thisD.54027 => D#55ptD.0
  # DEBUG thisD.54028 => D#55ptD.0
  # .MEM_339 = VDEF <.MEM_350>
  D.45805 ={v} {CLOBBER};
  resx 14
;;    succ:      

;;   basic block 378, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 377, next block 379, flags: (NEW, REACHABLE)
;;    pred:       20 (EH,EXECUTABLE)
<L32>: [LP 10]
  # DEBUG thisD.54031 => &D.45808
  # DEBUG thisD.54032 => &D.45808
  # DEBUG thisD.54041 => &D.45808
  # VUSE <.MEM_50>
  # PT = nonlocal escaped null { D.45808 } (escaped)
  _340 = MEM[(charD.10 * *)&D.45808];
  # DEBUG D#3ptD.0 => &D.45808
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54042 => &D.45808
  if (&D.45808.D.14356._M_local_bufD.14358 != _340)
    goto <bb 379>;
  else
    goto <bb 380>;
;;    succ:       379 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                380 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 379, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 378, next block 380, flags: (NEW, REACHABLE)
;;    pred:       378 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45808.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54034 => &D.45808
  # DEBUG __sizeD.54033 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45808
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45808
  # DEBUG D#51ptD.0 => &D.45808._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54037 => _340
  # DEBUG __aD.54035 => D#49ptD.0
  # DEBUG __nD.54036 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54040 => _340
  # DEBUG thisD.54038 => D#45ptD.0
  # DEBUG D.54039 => D#46ptD.0
  # .MEM_696 = VDEF <.MEM_50>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_340);
;;    succ:       380 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 380, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 379, next block 381, flags: (NEW, REACHABLE)
;;    pred:       378 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                379 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_351 = PHI <.MEM_50(378), .MEM_696(379)>
  # DEBUG D#55ptD.0 => &D.45808._M_dataplusD.14336
  # DEBUG thisD.54043 => D#55ptD.0
  # DEBUG thisD.54044 => D#55ptD.0
  # DEBUG thisD.54045 => D#55ptD.0
  # .MEM_337 = VDEF <.MEM_351>
  D.45808 ={v} {CLOBBER};
  resx 18
;;    succ:      

;;   basic block 381, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 380, next block 382, flags: (NEW, REACHABLE)
;;    pred:       25 (EH,EXECUTABLE)
<L34>: [LP 12]
  # DEBUG thisD.54048 => &D.45811
  # DEBUG thisD.54049 => &D.45811
  # DEBUG thisD.54058 => &D.45811
  # VUSE <.MEM_62>
  # PT = nonlocal escaped null { D.45811 } (escaped)
  _338 = MEM[(charD.10 * *)&D.45811];
  # DEBUG D#3ptD.0 => &D.45811
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54059 => &D.45811
  if (&D.45811.D.14356._M_local_bufD.14358 != _338)
    goto <bb 382>;
  else
    goto <bb 383>;
;;    succ:       382 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                383 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 382, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 381, next block 383, flags: (NEW, REACHABLE)
;;    pred:       381 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45811.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54051 => &D.45811
  # DEBUG __sizeD.54050 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45811
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45811
  # DEBUG D#51ptD.0 => &D.45811._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54054 => _338
  # DEBUG __aD.54052 => D#49ptD.0
  # DEBUG __nD.54053 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54057 => _338
  # DEBUG thisD.54055 => D#45ptD.0
  # DEBUG D.54056 => D#46ptD.0
  # .MEM_691 = VDEF <.MEM_62>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_338);
;;    succ:       383 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 383, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 382, next block 384, flags: (NEW, REACHABLE)
;;    pred:       381 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                382 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_352 = PHI <.MEM_62(381), .MEM_691(382)>
  # DEBUG D#55ptD.0 => &D.45811._M_dataplusD.14336
  # DEBUG thisD.54060 => D#55ptD.0
  # DEBUG thisD.54061 => D#55ptD.0
  # DEBUG thisD.54062 => D#55ptD.0
  # .MEM_335 = VDEF <.MEM_352>
  D.45811 ={v} {CLOBBER};
  resx 22
;;    succ:      

;;   basic block 384, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 383, next block 385, flags: (NEW, REACHABLE)
;;    pred:       30 (EH,EXECUTABLE)
<L36>: [LP 14]
  # DEBUG thisD.54065 => &D.45814
  # DEBUG thisD.54066 => &D.45814
  # DEBUG thisD.54075 => &D.45814
  # VUSE <.MEM_73>
  # PT = nonlocal escaped null { D.45814 } (escaped)
  _336 = MEM[(charD.10 * *)&D.45814];
  # DEBUG D#3ptD.0 => &D.45814
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54076 => &D.45814
  if (&D.45814.D.14356._M_local_bufD.14358 != _336)
    goto <bb 385>;
  else
    goto <bb 386>;
;;    succ:       385 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                386 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 385, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 384, next block 386, flags: (NEW, REACHABLE)
;;    pred:       384 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45814.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54068 => &D.45814
  # DEBUG __sizeD.54067 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45814
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45814
  # DEBUG D#51ptD.0 => &D.45814._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54071 => _336
  # DEBUG __aD.54069 => D#49ptD.0
  # DEBUG __nD.54070 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54074 => _336
  # DEBUG thisD.54072 => D#45ptD.0
  # DEBUG D.54073 => D#46ptD.0
  # .MEM_686 = VDEF <.MEM_73>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_336);
;;    succ:       386 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 386, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 385, next block 387, flags: (NEW, REACHABLE)
;;    pred:       384 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                385 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_353 = PHI <.MEM_73(384), .MEM_686(385)>
  # DEBUG D#55ptD.0 => &D.45814._M_dataplusD.14336
  # DEBUG thisD.54077 => D#55ptD.0
  # DEBUG thisD.54078 => D#55ptD.0
  # DEBUG thisD.54079 => D#55ptD.0
  # .MEM_333 = VDEF <.MEM_353>
  D.45814 ={v} {CLOBBER};
  resx 26
;;    succ:      

;;   basic block 387, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 386, next block 388, flags: (NEW, REACHABLE)
;;    pred:       35 (EH,EXECUTABLE)
<L38>: [LP 16]
  # DEBUG thisD.54082 => &D.45817
  # DEBUG thisD.54083 => &D.45817
  # DEBUG thisD.54092 => &D.45817
  # VUSE <.MEM_84>
  # PT = nonlocal escaped null { D.45817 } (escaped)
  _334 = MEM[(charD.10 * *)&D.45817];
  # DEBUG D#3ptD.0 => &D.45817
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54093 => &D.45817
  if (&D.45817.D.14356._M_local_bufD.14358 != _334)
    goto <bb 388>;
  else
    goto <bb 389>;
;;    succ:       388 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                389 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 388, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 387, next block 389, flags: (NEW, REACHABLE)
;;    pred:       387 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45817.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54085 => &D.45817
  # DEBUG __sizeD.54084 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45817
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45817
  # DEBUG D#51ptD.0 => &D.45817._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54088 => _334
  # DEBUG __aD.54086 => D#49ptD.0
  # DEBUG __nD.54087 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54091 => _334
  # DEBUG thisD.54089 => D#45ptD.0
  # DEBUG D.54090 => D#46ptD.0
  # .MEM_681 = VDEF <.MEM_84>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_334);
;;    succ:       389 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 389, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 388, next block 390, flags: (NEW, REACHABLE)
;;    pred:       387 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                388 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_354 = PHI <.MEM_84(387), .MEM_681(388)>
  # DEBUG D#55ptD.0 => &D.45817._M_dataplusD.14336
  # DEBUG thisD.54094 => D#55ptD.0
  # DEBUG thisD.54095 => D#55ptD.0
  # DEBUG thisD.54096 => D#55ptD.0
  # .MEM_331 = VDEF <.MEM_354>
  D.45817 ={v} {CLOBBER};
  resx 30
;;    succ:      

;;   basic block 390, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 389, next block 391, flags: (NEW, REACHABLE)
;;    pred:       40 (EH,EXECUTABLE)
<L40>: [LP 18]
  # DEBUG thisD.54099 => &D.45820
  # DEBUG thisD.54100 => &D.45820
  # DEBUG thisD.54109 => &D.45820
  # VUSE <.MEM_95>
  # PT = nonlocal escaped null { D.45820 } (escaped)
  _332 = MEM[(charD.10 * *)&D.45820];
  # DEBUG D#3ptD.0 => &D.45820
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54110 => &D.45820
  if (&D.45820.D.14356._M_local_bufD.14358 != _332)
    goto <bb 391>;
  else
    goto <bb 392>;
;;    succ:       391 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                392 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 391, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 390, next block 392, flags: (NEW, REACHABLE)
;;    pred:       390 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45820.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54102 => &D.45820
  # DEBUG __sizeD.54101 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45820
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45820
  # DEBUG D#51ptD.0 => &D.45820._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54105 => _332
  # DEBUG __aD.54103 => D#49ptD.0
  # DEBUG __nD.54104 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54108 => _332
  # DEBUG thisD.54106 => D#45ptD.0
  # DEBUG D.54107 => D#46ptD.0
  # .MEM_676 = VDEF <.MEM_95>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_332);
;;    succ:       392 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 392, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 391, next block 393, flags: (NEW, REACHABLE)
;;    pred:       390 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                391 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_355 = PHI <.MEM_95(390), .MEM_676(391)>
  # DEBUG D#55ptD.0 => &D.45820._M_dataplusD.14336
  # DEBUG thisD.54111 => D#55ptD.0
  # DEBUG thisD.54112 => D#55ptD.0
  # DEBUG thisD.54113 => D#55ptD.0
  # .MEM_329 = VDEF <.MEM_355>
  D.45820 ={v} {CLOBBER};
  resx 34
;;    succ:      

;;   basic block 393, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 392, next block 394, flags: (NEW, REACHABLE)
;;    pred:       45 (EH,EXECUTABLE)
<L42>: [LP 20]
  # DEBUG thisD.54116 => &D.45823
  # DEBUG thisD.54117 => &D.45823
  # DEBUG thisD.54126 => &D.45823
  # VUSE <.MEM_106>
  # PT = nonlocal escaped { D.45823 } (escaped)
  _330 = MEM[(charD.10 * *)&D.45823];
  # DEBUG D#3ptD.0 => &D.45823
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54127 => &D.45823
  if (&D.45823.D.14356._M_local_bufD.14358 != _330)
    goto <bb 394>;
  else
    goto <bb 395>;
;;    succ:       394 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                395 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 394, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 393, next block 395, flags: (NEW, REACHABLE)
;;    pred:       393 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45823.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54119 => &D.45823
  # DEBUG __sizeD.54118 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45823
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45823
  # DEBUG D#51ptD.0 => &D.45823._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54122 => _330
  # DEBUG __aD.54120 => D#49ptD.0
  # DEBUG __nD.54121 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54125 => _330
  # DEBUG thisD.54123 => D#45ptD.0
  # DEBUG D.54124 => D#46ptD.0
  # .MEM_671 = VDEF <.MEM_106>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_330);
;;    succ:       395 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 395, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 394, next block 396, flags: (NEW, REACHABLE)
;;    pred:       393 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                394 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_356 = PHI <.MEM_106(393), .MEM_671(394)>
  # DEBUG D#55ptD.0 => &D.45823._M_dataplusD.14336
  # DEBUG thisD.54128 => D#55ptD.0
  # DEBUG thisD.54129 => D#55ptD.0
  # DEBUG thisD.54130 => D#55ptD.0
  # .MEM_327 = VDEF <.MEM_356>
  D.45823 ={v} {CLOBBER};
  resx 38
;;    succ:      

;;   basic block 396, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 395, next block 397, flags: (NEW, REACHABLE)
;;    pred:       74 (EH,EXECUTABLE)
<L44>: [LP 22]
  # DEBUG thisD.54133 => &D.45826
  # DEBUG thisD.54134 => &D.45826
  # DEBUG thisD.54143 => &D.45826
  # VUSE <.MEM_1982>
  # PT = nonlocal escaped { D.45826 } (escaped)
  _328 = MEM[(charD.10 * *)&D.45826];
  # DEBUG D#3ptD.0 => &D.45826
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54144 => &D.45826
  if (&D.45826.D.14356._M_local_bufD.14358 != _328)
    goto <bb 397>;
  else
    goto <bb 398>;
;;    succ:       397 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                398 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 397, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 396, next block 398, flags: (NEW, REACHABLE)
;;    pred:       396 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45826.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54136 => &D.45826
  # DEBUG __sizeD.54135 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45826
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45826
  # DEBUG D#51ptD.0 => &D.45826._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54139 => _328
  # DEBUG __aD.54137 => D#49ptD.0
  # DEBUG __nD.54138 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54142 => _328
  # DEBUG thisD.54140 => D#45ptD.0
  # DEBUG D.54141 => D#46ptD.0
  # .MEM_666 = VDEF <.MEM_1982>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_328);
;;    succ:       398 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 398, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 397, next block 399, flags: (NEW, REACHABLE)
;;    pred:       396 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                397 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_357 = PHI <.MEM_1982(396), .MEM_666(397)>
  # DEBUG D#55ptD.0 => &D.45826._M_dataplusD.14336
  # DEBUG thisD.54145 => D#55ptD.0
  # DEBUG thisD.54146 => D#55ptD.0
  # DEBUG thisD.54147 => D#55ptD.0
  # .MEM_325 = VDEF <.MEM_357>
  D.45826 ={v} {CLOBBER};
  resx 42
;;    succ:      

;;   basic block 399, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 398, next block 400, flags: (NEW, REACHABLE)
;;    pred:       76 (EH,EXECUTABLE)
<L46>: [LP 24]
  # DEBUG thisD.54150 => &D.45829
  # DEBUG thisD.54151 => &D.45829
  # DEBUG thisD.54160 => &D.45829
  # VUSE <.MEM_120>
  # PT = nonlocal escaped { D.45829 } (escaped)
  _326 = MEM[(charD.10 * *)&D.45829];
  # DEBUG D#3ptD.0 => &D.45829
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54161 => &D.45829
  if (&D.45829.D.14356._M_local_bufD.14358 != _326)
    goto <bb 400>;
  else
    goto <bb 401>;
;;    succ:       400 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                401 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 400, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 399, next block 401, flags: (NEW, REACHABLE)
;;    pred:       399 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45829.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54153 => &D.45829
  # DEBUG __sizeD.54152 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45829
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45829
  # DEBUG D#51ptD.0 => &D.45829._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54156 => _326
  # DEBUG __aD.54154 => D#49ptD.0
  # DEBUG __nD.54155 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54159 => _326
  # DEBUG thisD.54157 => D#45ptD.0
  # DEBUG D.54158 => D#46ptD.0
  # .MEM_661 = VDEF <.MEM_120>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_326);
;;    succ:       401 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 401, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 400, next block 402, flags: (NEW, REACHABLE)
;;    pred:       399 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                400 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_358 = PHI <.MEM_120(399), .MEM_661(400)>
  # DEBUG D#55ptD.0 => &D.45829._M_dataplusD.14336
  # DEBUG thisD.54162 => D#55ptD.0
  # DEBUG thisD.54163 => D#55ptD.0
  # DEBUG thisD.54164 => D#55ptD.0
  # .MEM_323 = VDEF <.MEM_358>
  D.45829 ={v} {CLOBBER};
  resx 46
;;    succ:      

;;   basic block 402, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 401, next block 403, flags: (NEW, REACHABLE)
;;    pred:       79 (EH,EXECUTABLE)
<L48>: [LP 26]
  # DEBUG thisD.54167 => &D.45832
  # DEBUG thisD.54168 => &D.45832
  # DEBUG thisD.54177 => &D.45832
  # VUSE <.MEM_127>
  # PT = nonlocal escaped { D.45832 } (escaped)
  _324 = MEM[(charD.10 * *)&D.45832];
  # DEBUG D#3ptD.0 => &D.45832
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54178 => &D.45832
  if (&D.45832.D.14356._M_local_bufD.14358 != _324)
    goto <bb 403>;
  else
    goto <bb 404>;
;;    succ:       403 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                404 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 403, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 402, next block 404, flags: (NEW, REACHABLE)
;;    pred:       402 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45832.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54170 => &D.45832
  # DEBUG __sizeD.54169 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45832
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45832
  # DEBUG D#51ptD.0 => &D.45832._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54173 => _324
  # DEBUG __aD.54171 => D#49ptD.0
  # DEBUG __nD.54172 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54176 => _324
  # DEBUG thisD.54174 => D#45ptD.0
  # DEBUG D.54175 => D#46ptD.0
  # .MEM_656 = VDEF <.MEM_127>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_324);
;;    succ:       404 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 404, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 403, next block 405, flags: (NEW, REACHABLE)
;;    pred:       402 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                403 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_359 = PHI <.MEM_127(402), .MEM_656(403)>
  # DEBUG D#55ptD.0 => &D.45832._M_dataplusD.14336
  # DEBUG thisD.54179 => D#55ptD.0
  # DEBUG thisD.54180 => D#55ptD.0
  # DEBUG thisD.54181 => D#55ptD.0
  # .MEM_321 = VDEF <.MEM_359>
  D.45832 ={v} {CLOBBER};
  resx 50
;;    succ:      

;;   basic block 405, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 404, next block 406, flags: (NEW, REACHABLE)
;;    pred:       82 (EH,EXECUTABLE)
<L50>: [LP 28]
  # DEBUG thisD.54184 => &D.45835
  # DEBUG thisD.54185 => &D.45835
  # DEBUG thisD.54194 => &D.45835
  # VUSE <.MEM_134>
  # PT = nonlocal escaped { D.45835 } (escaped)
  _322 = MEM[(charD.10 * *)&D.45835];
  # DEBUG D#3ptD.0 => &D.45835
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54195 => &D.45835
  if (&D.45835.D.14356._M_local_bufD.14358 != _322)
    goto <bb 406>;
  else
    goto <bb 407>;
;;    succ:       406 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                407 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 406, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 405, next block 407, flags: (NEW, REACHABLE)
;;    pred:       405 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45835.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54187 => &D.45835
  # DEBUG __sizeD.54186 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45835
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45835
  # DEBUG D#51ptD.0 => &D.45835._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54190 => _322
  # DEBUG __aD.54188 => D#49ptD.0
  # DEBUG __nD.54189 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54193 => _322
  # DEBUG thisD.54191 => D#45ptD.0
  # DEBUG D.54192 => D#46ptD.0
  # .MEM_651 = VDEF <.MEM_134>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_322);
;;    succ:       407 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 407, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 406, next block 408, flags: (NEW, REACHABLE)
;;    pred:       405 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                406 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_360 = PHI <.MEM_134(405), .MEM_651(406)>
  # DEBUG D#55ptD.0 => &D.45835._M_dataplusD.14336
  # DEBUG thisD.54196 => D#55ptD.0
  # DEBUG thisD.54197 => D#55ptD.0
  # DEBUG thisD.54198 => D#55ptD.0
  # .MEM_319 = VDEF <.MEM_360>
  D.45835 ={v} {CLOBBER};
  resx 54
;;    succ:      

;;   basic block 408, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 407, next block 409, flags: (NEW, REACHABLE)
;;    pred:       111 (EH,EXECUTABLE)
<L52>: [LP 30]
  # DEBUG thisD.54201 => &D.45838
  # DEBUG thisD.54202 => &D.45838
  # DEBUG thisD.54211 => &D.45838
  # VUSE <.MEM_2063>
  # PT = nonlocal escaped { D.45838 } (escaped)
  _320 = MEM[(charD.10 * *)&D.45838];
  # DEBUG D#3ptD.0 => &D.45838
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54212 => &D.45838
  if (&D.45838.D.14356._M_local_bufD.14358 != _320)
    goto <bb 409>;
  else
    goto <bb 410>;
;;    succ:       409 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                410 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 409, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 408, next block 410, flags: (NEW, REACHABLE)
;;    pred:       408 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45838.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54204 => &D.45838
  # DEBUG __sizeD.54203 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45838
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45838
  # DEBUG D#51ptD.0 => &D.45838._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54207 => _320
  # DEBUG __aD.54205 => D#49ptD.0
  # DEBUG __nD.54206 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54210 => _320
  # DEBUG thisD.54208 => D#45ptD.0
  # DEBUG D.54209 => D#46ptD.0
  # .MEM_646 = VDEF <.MEM_2063>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_320);
;;    succ:       410 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 410, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 409, next block 411, flags: (NEW, REACHABLE)
;;    pred:       408 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                409 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_361 = PHI <.MEM_2063(408), .MEM_646(409)>
  # DEBUG D#55ptD.0 => &D.45838._M_dataplusD.14336
  # DEBUG thisD.54213 => D#55ptD.0
  # DEBUG thisD.54214 => D#55ptD.0
  # DEBUG thisD.54215 => D#55ptD.0
  # .MEM_317 = VDEF <.MEM_361>
  D.45838 ={v} {CLOBBER};
  resx 58
;;    succ:      

;;   basic block 411, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 410, next block 412, flags: (NEW, REACHABLE)
;;    pred:       113 (EH,EXECUTABLE)
<L54>: [LP 32]
  # DEBUG thisD.54218 => &D.45841
  # DEBUG thisD.54219 => &D.45841
  # DEBUG thisD.54228 => &D.45841
  # VUSE <.MEM_148>
  # PT = nonlocal escaped { D.45841 } (escaped)
  _318 = MEM[(charD.10 * *)&D.45841];
  # DEBUG D#3ptD.0 => &D.45841
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54229 => &D.45841
  if (&D.45841.D.14356._M_local_bufD.14358 != _318)
    goto <bb 412>;
  else
    goto <bb 413>;
;;    succ:       412 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                413 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 412, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 411, next block 413, flags: (NEW, REACHABLE)
;;    pred:       411 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45841.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54221 => &D.45841
  # DEBUG __sizeD.54220 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45841
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45841
  # DEBUG D#51ptD.0 => &D.45841._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54224 => _318
  # DEBUG __aD.54222 => D#49ptD.0
  # DEBUG __nD.54223 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54227 => _318
  # DEBUG thisD.54225 => D#45ptD.0
  # DEBUG D.54226 => D#46ptD.0
  # .MEM_641 = VDEF <.MEM_148>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_318);
;;    succ:       413 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 413, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 412, next block 414, flags: (NEW, REACHABLE)
;;    pred:       411 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                412 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_362 = PHI <.MEM_148(411), .MEM_641(412)>
  # DEBUG D#55ptD.0 => &D.45841._M_dataplusD.14336
  # DEBUG thisD.54230 => D#55ptD.0
  # DEBUG thisD.54231 => D#55ptD.0
  # DEBUG thisD.54232 => D#55ptD.0
  # .MEM_315 = VDEF <.MEM_362>
  D.45841 ={v} {CLOBBER};
  resx 62
;;    succ:      

;;   basic block 414, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 413, next block 415, flags: (NEW)
;;    pred:       134 (EH,EXECUTABLE)
<L101>: [LP 78]
;;    succ:       415 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 415, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 414, next block 416, flags: (NEW, REACHABLE)
;;    pred:       147 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                414 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                477 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1827 = PHI <.MEM_2124(147), .MEM_2100(414), .MEM_2125(477)>
<L56>:
  # DEBUG thisD.54235 => &D.45844
  # DEBUG thisD.54236 => &D.45844
  # DEBUG thisD.54245 => &D.45844
  # VUSE <.MEM_1827>
  # PT = nonlocal escaped null { D.45844 } (escaped)
  _316 = MEM[(charD.10 * *)&D.45844];
  # DEBUG D#3ptD.0 => &D.45844
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54246 => &D.45844
  if (&D.45844.D.14356._M_local_bufD.14358 != _316)
    goto <bb 416>;
  else
    goto <bb 417>;
;;    succ:       416 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                417 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 416, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 415, next block 417, flags: (NEW, REACHABLE)
;;    pred:       415 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45844.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54238 => &D.45844
  # DEBUG __sizeD.54237 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45844
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45844
  # DEBUG D#51ptD.0 => &D.45844._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54241 => _316
  # DEBUG __aD.54239 => D#49ptD.0
  # DEBUG __nD.54240 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54244 => _316
  # DEBUG thisD.54242 => D#45ptD.0
  # DEBUG D.54243 => D#46ptD.0
  # .MEM_636 = VDEF <.MEM_1827>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_316);
;;    succ:       417 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 417, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 416, next block 418, flags: (NEW, REACHABLE)
;;    pred:       415 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                416 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_363 = PHI <.MEM_1827(415), .MEM_636(416)>
  # DEBUG D#55ptD.0 => &D.45844._M_dataplusD.14336
  # DEBUG thisD.54247 => D#55ptD.0
  # DEBUG thisD.54248 => D#55ptD.0
  # DEBUG thisD.54249 => D#55ptD.0
  # .MEM_313 = VDEF <.MEM_363>
  D.45844 ={v} {CLOBBER};
  resx 66
;;    succ:      

;;   basic block 418, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 417, next block 419, flags: (NEW, REACHABLE)
;;    pred:       149 (EH,EXECUTABLE)
<L58>: [LP 36]
  # DEBUG thisD.54252 => &D.45847
  # DEBUG thisD.54253 => &D.45847
  # DEBUG thisD.54262 => &D.45847
  # VUSE <.MEM_162>
  # PT = nonlocal escaped { D.45847 } (escaped)
  _314 = MEM[(charD.10 * *)&D.45847];
  # DEBUG D#3ptD.0 => &D.45847
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54263 => &D.45847
  if (&D.45847.D.14356._M_local_bufD.14358 != _314)
    goto <bb 419>;
  else
    goto <bb 420>;
;;    succ:       419 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                420 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 419, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 418, next block 420, flags: (NEW, REACHABLE)
;;    pred:       418 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45847.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54255 => &D.45847
  # DEBUG __sizeD.54254 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45847
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45847
  # DEBUG D#51ptD.0 => &D.45847._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54258 => _314
  # DEBUG __aD.54256 => D#49ptD.0
  # DEBUG __nD.54257 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54261 => _314
  # DEBUG thisD.54259 => D#45ptD.0
  # DEBUG D.54260 => D#46ptD.0
  # .MEM_631 = VDEF <.MEM_162>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_314);
;;    succ:       420 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 420, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 419, next block 421, flags: (NEW, REACHABLE)
;;    pred:       418 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                419 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_364 = PHI <.MEM_162(418), .MEM_631(419)>
  # DEBUG D#55ptD.0 => &D.45847._M_dataplusD.14336
  # DEBUG thisD.54264 => D#55ptD.0
  # DEBUG thisD.54265 => D#55ptD.0
  # DEBUG thisD.54266 => D#55ptD.0
  # .MEM_311 = VDEF <.MEM_364>
  D.45847 ={v} {CLOBBER};
  resx 70
;;    succ:      

;;   basic block 421, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 420, next block 422, flags: (NEW)
;;    pred:       170 (EH,EXECUTABLE)
<L103>: [LP 80]
;;    succ:       422 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 422, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 421, next block 423, flags: (NEW, REACHABLE)
;;    pred:       183 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                421 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                482 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1828 = PHI <.MEM_2185(183), .MEM_2161(421), .MEM_2186(482)>
<L60>:
  # DEBUG thisD.54269 => &D.45850
  # DEBUG thisD.54270 => &D.45850
  # DEBUG thisD.54279 => &D.45850
  # VUSE <.MEM_1828>
  # PT = nonlocal escaped null { D.45850 } (escaped)
  _312 = MEM[(charD.10 * *)&D.45850];
  # DEBUG D#3ptD.0 => &D.45850
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54280 => &D.45850
  if (&D.45850.D.14356._M_local_bufD.14358 != _312)
    goto <bb 423>;
  else
    goto <bb 424>;
;;    succ:       423 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                424 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 423, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 422, next block 424, flags: (NEW, REACHABLE)
;;    pred:       422 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45850.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54272 => &D.45850
  # DEBUG __sizeD.54271 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45850
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45850
  # DEBUG D#51ptD.0 => &D.45850._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54275 => _312
  # DEBUG __aD.54273 => D#49ptD.0
  # DEBUG __nD.54274 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54278 => _312
  # DEBUG thisD.54276 => D#45ptD.0
  # DEBUG D.54277 => D#46ptD.0
  # .MEM_626 = VDEF <.MEM_1828>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_312);
;;    succ:       424 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 424, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 423, next block 425, flags: (NEW, REACHABLE)
;;    pred:       422 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                423 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_365 = PHI <.MEM_1828(422), .MEM_626(423)>
  # DEBUG D#55ptD.0 => &D.45850._M_dataplusD.14336
  # DEBUG thisD.54281 => D#55ptD.0
  # DEBUG thisD.54282 => D#55ptD.0
  # DEBUG thisD.54283 => D#55ptD.0
  # .MEM_309 = VDEF <.MEM_365>
  D.45850 ={v} {CLOBBER};
  resx 74
;;    succ:      

;;   basic block 425, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 424, next block 426, flags: (NEW, REACHABLE)
;;    pred:       185 (EH,EXECUTABLE)
<L62>: [LP 40]
  # DEBUG thisD.54286 => &D.45853
  # DEBUG thisD.54287 => &D.45853
  # DEBUG thisD.54296 => &D.45853
  # VUSE <.MEM_176>
  # PT = nonlocal escaped null { D.45853 } (escaped)
  _310 = MEM[(charD.10 * *)&D.45853];
  # DEBUG D#3ptD.0 => &D.45853
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54297 => &D.45853
  if (&D.45853.D.14356._M_local_bufD.14358 != _310)
    goto <bb 426>;
  else
    goto <bb 427>;
;;    succ:       426 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                427 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 426, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 425, next block 427, flags: (NEW, REACHABLE)
;;    pred:       425 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45853.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54289 => &D.45853
  # DEBUG __sizeD.54288 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45853
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45853
  # DEBUG D#51ptD.0 => &D.45853._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54292 => _310
  # DEBUG __aD.54290 => D#49ptD.0
  # DEBUG __nD.54291 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54295 => _310
  # DEBUG thisD.54293 => D#45ptD.0
  # DEBUG D.54294 => D#46ptD.0
  # .MEM_621 = VDEF <.MEM_176>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_310);
;;    succ:       427 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 427, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 426, next block 428, flags: (NEW, REACHABLE)
;;    pred:       425 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                426 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_366 = PHI <.MEM_176(425), .MEM_621(426)>
  # DEBUG D#55ptD.0 => &D.45853._M_dataplusD.14336
  # DEBUG thisD.54298 => D#55ptD.0
  # DEBUG thisD.54299 => D#55ptD.0
  # DEBUG thisD.54300 => D#55ptD.0
  # .MEM_307 = VDEF <.MEM_366>
  D.45853 ={v} {CLOBBER};
  resx 78
;;    succ:      

;;   basic block 428, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 427, next block 429, flags: (NEW, REACHABLE)
;;    pred:       214 (EH,EXECUTABLE)
<L64>: [LP 42]
  # DEBUG thisD.54303 => &D.45856
  # DEBUG thisD.54304 => &D.45856
  # DEBUG thisD.54313 => &D.45856
  # VUSE <.MEM_2246>
  # PT = nonlocal escaped { D.45856 } (escaped)
  _308 = MEM[(charD.10 * *)&D.45856];
  # DEBUG D#3ptD.0 => &D.45856
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54314 => &D.45856
  if (&D.45856.D.14356._M_local_bufD.14358 != _308)
    goto <bb 429>;
  else
    goto <bb 430>;
;;    succ:       429 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                430 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 429, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 428, next block 430, flags: (NEW, REACHABLE)
;;    pred:       428 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45856.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54306 => &D.45856
  # DEBUG __sizeD.54305 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45856
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45856
  # DEBUG D#51ptD.0 => &D.45856._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54309 => _308
  # DEBUG __aD.54307 => D#49ptD.0
  # DEBUG __nD.54308 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54312 => _308
  # DEBUG thisD.54310 => D#45ptD.0
  # DEBUG D.54311 => D#46ptD.0
  # .MEM_616 = VDEF <.MEM_2246>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_308);
;;    succ:       430 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 430, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 429, next block 431, flags: (NEW, REACHABLE)
;;    pred:       428 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                429 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_367 = PHI <.MEM_2246(428), .MEM_616(429)>
  # DEBUG D#55ptD.0 => &D.45856._M_dataplusD.14336
  # DEBUG thisD.54315 => D#55ptD.0
  # DEBUG thisD.54316 => D#55ptD.0
  # DEBUG thisD.54317 => D#55ptD.0
  # .MEM_305 = VDEF <.MEM_367>
  D.45856 ={v} {CLOBBER};
  resx 82
;;    succ:      

;;   basic block 431, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 430, next block 432, flags: (NEW)
;;    pred:       234 (EH,EXECUTABLE)
<L105>: [LP 82]
;;    succ:       432 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 432, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 431, next block 433, flags: (NEW, REACHABLE)
;;    pred:       247 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                431 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                488 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1830 = PHI <.MEM_2297(247), .MEM_2273(431), .MEM_2298(488)>
<L66>:
  # DEBUG thisD.54320 => &D.45859
  # DEBUG thisD.54321 => &D.45859
  # DEBUG thisD.54330 => &D.45859
  # VUSE <.MEM_1830>
  # PT = nonlocal escaped null { D.45859 } (escaped)
  _306 = MEM[(charD.10 * *)&D.45859];
  # DEBUG D#3ptD.0 => &D.45859
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54331 => &D.45859
  if (&D.45859.D.14356._M_local_bufD.14358 != _306)
    goto <bb 433>;
  else
    goto <bb 434>;
;;    succ:       433 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                434 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 433, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 432, next block 434, flags: (NEW, REACHABLE)
;;    pred:       432 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45859.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54323 => &D.45859
  # DEBUG __sizeD.54322 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45859
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45859
  # DEBUG D#51ptD.0 => &D.45859._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54326 => _306
  # DEBUG __aD.54324 => D#49ptD.0
  # DEBUG __nD.54325 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54329 => _306
  # DEBUG thisD.54327 => D#45ptD.0
  # DEBUG D.54328 => D#46ptD.0
  # .MEM_611 = VDEF <.MEM_1830>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_306);
;;    succ:       434 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 434, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 433, next block 435, flags: (NEW, REACHABLE)
;;    pred:       432 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                433 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_368 = PHI <.MEM_1830(432), .MEM_611(433)>
  # DEBUG D#55ptD.0 => &D.45859._M_dataplusD.14336
  # DEBUG thisD.54332 => D#55ptD.0
  # DEBUG thisD.54333 => D#55ptD.0
  # DEBUG thisD.54334 => D#55ptD.0
  # .MEM_303 = VDEF <.MEM_368>
  D.45859 ={v} {CLOBBER};
  resx 86
;;    succ:      

;;   basic block 435, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 434, next block 436, flags: (NEW)
;;    pred:       267 (EH,EXECUTABLE)
<L107>: [LP 84]
;;    succ:       436 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 436, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 435, next block 437, flags: (NEW, REACHABLE)
;;    pred:       280 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                435 [100.0%]  (FALLTHRU,EXECUTABLE)
;;                493 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1831 = PHI <.MEM_2348(280), .MEM_2324(435), .MEM_2349(493)>
<L68>:
  # DEBUG thisD.54337 => &D.45862
  # DEBUG thisD.54338 => &D.45862
  # DEBUG thisD.54347 => &D.45862
  # VUSE <.MEM_1831>
  # PT = nonlocal escaped null { D.45862 } (escaped)
  _304 = MEM[(charD.10 * *)&D.45862];
  # DEBUG D#3ptD.0 => &D.45862
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54348 => &D.45862
  if (&D.45862.D.14356._M_local_bufD.14358 != _304)
    goto <bb 437>;
  else
    goto <bb 438>;
;;    succ:       437 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                438 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 437, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 436, next block 438, flags: (NEW, REACHABLE)
;;    pred:       436 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45862.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54340 => &D.45862
  # DEBUG __sizeD.54339 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45862
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45862
  # DEBUG D#51ptD.0 => &D.45862._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54343 => _304
  # DEBUG __aD.54341 => D#49ptD.0
  # DEBUG __nD.54342 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54346 => _304
  # DEBUG thisD.54344 => D#45ptD.0
  # DEBUG D.54345 => D#46ptD.0
  # .MEM_606 = VDEF <.MEM_1831>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_304);
;;    succ:       438 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 438, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 437, next block 439, flags: (NEW, REACHABLE)
;;    pred:       436 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                437 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_369 = PHI <.MEM_1831(436), .MEM_606(437)>
  # DEBUG D#55ptD.0 => &D.45862._M_dataplusD.14336
  # DEBUG thisD.54349 => D#55ptD.0
  # DEBUG thisD.54350 => D#55ptD.0
  # DEBUG thisD.54351 => D#55ptD.0
  # .MEM_301 = VDEF <.MEM_369>
  D.45862 ={v} {CLOBBER};
  resx 90
;;    succ:      

;;   basic block 439, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 438, next block 440, flags: (NEW, REACHABLE)
;;    pred:       282 (EH,EXECUTABLE)
<L70>: [LP 48]
  # DEBUG thisD.54354 => &D.45865
  # DEBUG thisD.54355 => &D.45865
  # DEBUG thisD.54364 => &D.45865
  # VUSE <.MEM_204>
  # PT = nonlocal escaped { D.45865 } (escaped)
  _302 = MEM[(charD.10 * *)&D.45865];
  # DEBUG D#3ptD.0 => &D.45865
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54365 => &D.45865
  if (&D.45865.D.14356._M_local_bufD.14358 != _302)
    goto <bb 440>;
  else
    goto <bb 441>;
;;    succ:       440 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                441 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 440, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 439, next block 441, flags: (NEW, REACHABLE)
;;    pred:       439 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45865.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54357 => &D.45865
  # DEBUG __sizeD.54356 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45865
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45865
  # DEBUG D#51ptD.0 => &D.45865._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54360 => _302
  # DEBUG __aD.54358 => D#49ptD.0
  # DEBUG __nD.54359 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54363 => _302
  # DEBUG thisD.54361 => D#45ptD.0
  # DEBUG D.54362 => D#46ptD.0
  # .MEM_601 = VDEF <.MEM_204>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_302);
;;    succ:       441 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 441, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 440, next block 442, flags: (NEW, REACHABLE)
;;    pred:       439 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                440 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_370 = PHI <.MEM_204(439), .MEM_601(440)>
  # DEBUG D#55ptD.0 => &D.45865._M_dataplusD.14336
  # DEBUG thisD.54366 => D#55ptD.0
  # DEBUG thisD.54367 => D#55ptD.0
  # DEBUG thisD.54368 => D#55ptD.0
  # .MEM_299 = VDEF <.MEM_370>
  D.45865 ={v} {CLOBBER};
  resx 94
;;    succ:      

;;   basic block 442, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 441, next block 443, flags: (NEW, REACHABLE)
;;    pred:       311 (EH,EXECUTABLE)
<L72>: [LP 50]
  # DEBUG thisD.54371 => &D.45868
  # DEBUG thisD.54372 => &D.45868
  # DEBUG thisD.54381 => &D.45868
  # VUSE <.MEM_2409>
  # PT = nonlocal escaped { D.45868 } (escaped)
  _300 = MEM[(charD.10 * *)&D.45868];
  # DEBUG D#3ptD.0 => &D.45868
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54382 => &D.45868
  if (&D.45868.D.14356._M_local_bufD.14358 != _300)
    goto <bb 443>;
  else
    goto <bb 444>;
;;    succ:       443 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                444 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 443, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 442, next block 444, flags: (NEW, REACHABLE)
;;    pred:       442 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45868.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54374 => &D.45868
  # DEBUG __sizeD.54373 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45868
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45868
  # DEBUG D#51ptD.0 => &D.45868._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54377 => _300
  # DEBUG __aD.54375 => D#49ptD.0
  # DEBUG __nD.54376 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54380 => _300
  # DEBUG thisD.54378 => D#45ptD.0
  # DEBUG D.54379 => D#46ptD.0
  # .MEM_596 = VDEF <.MEM_2409>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_300);
;;    succ:       444 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 444, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 443, next block 445, flags: (NEW, REACHABLE)
;;    pred:       442 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                443 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_371 = PHI <.MEM_2409(442), .MEM_596(443)>
  # DEBUG D#55ptD.0 => &D.45868._M_dataplusD.14336
  # DEBUG thisD.54383 => D#55ptD.0
  # DEBUG thisD.54384 => D#55ptD.0
  # DEBUG thisD.54385 => D#55ptD.0
  # .MEM_297 = VDEF <.MEM_371>
  D.45868 ={v} {CLOBBER};
  resx 98
;;    succ:      

;;   basic block 445, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 444, next block 446, flags: (NEW, REACHABLE)
;;    pred:       313 (EH,EXECUTABLE)
<L74>: [LP 52]
  # DEBUG thisD.54388 => &D.45871
  # DEBUG thisD.54389 => &D.45871
  # DEBUG thisD.54398 => &D.45871
  # VUSE <.MEM_218>
  # PT = nonlocal escaped { D.45871 } (escaped)
  _298 = MEM[(charD.10 * *)&D.45871];
  # DEBUG D#3ptD.0 => &D.45871
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54399 => &D.45871
  if (&D.45871.D.14356._M_local_bufD.14358 != _298)
    goto <bb 446>;
  else
    goto <bb 447>;
;;    succ:       446 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                447 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 446, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 445, next block 447, flags: (NEW, REACHABLE)
;;    pred:       445 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45871.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54391 => &D.45871
  # DEBUG __sizeD.54390 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45871
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45871
  # DEBUG D#51ptD.0 => &D.45871._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54394 => _298
  # DEBUG __aD.54392 => D#49ptD.0
  # DEBUG __nD.54393 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54397 => _298
  # DEBUG thisD.54395 => D#45ptD.0
  # DEBUG D.54396 => D#46ptD.0
  # .MEM_591 = VDEF <.MEM_218>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_298);
;;    succ:       447 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 447, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 446, next block 448, flags: (NEW, REACHABLE)
;;    pred:       445 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                446 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_372 = PHI <.MEM_218(445), .MEM_591(446)>
  # DEBUG D#55ptD.0 => &D.45871._M_dataplusD.14336
  # DEBUG thisD.54400 => D#55ptD.0
  # DEBUG thisD.54401 => D#55ptD.0
  # DEBUG thisD.54402 => D#55ptD.0
  # .MEM_295 = VDEF <.MEM_372>
  D.45871 ={v} {CLOBBER};
  resx 102
;;    succ:      

;;   basic block 448, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 447, next block 449, flags: (NEW, REACHABLE)
;;    pred:       342 (EH,EXECUTABLE)
<L76>: [LP 54]
  # DEBUG thisD.54405 => &D.45874
  # DEBUG thisD.54406 => &D.45874
  # DEBUG thisD.54415 => &D.45874
  # VUSE <.MEM_2470>
  # PT = nonlocal escaped { D.45874 } (escaped)
  _296 = MEM[(charD.10 * *)&D.45874];
  # DEBUG D#3ptD.0 => &D.45874
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54416 => &D.45874
  if (&D.45874.D.14356._M_local_bufD.14358 != _296)
    goto <bb 449>;
  else
    goto <bb 450>;
;;    succ:       449 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                450 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 449, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 448, next block 450, flags: (NEW, REACHABLE)
;;    pred:       448 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45874.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54408 => &D.45874
  # DEBUG __sizeD.54407 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45874
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45874
  # DEBUG D#51ptD.0 => &D.45874._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54411 => _296
  # DEBUG __aD.54409 => D#49ptD.0
  # DEBUG __nD.54410 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54414 => _296
  # DEBUG thisD.54412 => D#45ptD.0
  # DEBUG D.54413 => D#46ptD.0
  # .MEM_586 = VDEF <.MEM_2470>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_296);
;;    succ:       450 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 450, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 449, next block 451, flags: (NEW, REACHABLE)
;;    pred:       448 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                449 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_373 = PHI <.MEM_2470(448), .MEM_586(449)>
  # DEBUG D#55ptD.0 => &D.45874._M_dataplusD.14336
  # DEBUG thisD.54417 => D#55ptD.0
  # DEBUG thisD.54418 => D#55ptD.0
  # DEBUG thisD.54419 => D#55ptD.0
  # .MEM_293 = VDEF <.MEM_373>
  D.45874 ={v} {CLOBBER};
  resx 106
;;    succ:      

;;   basic block 451, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 450, next block 452, flags: (NEW, REACHABLE)
;;    pred:       344 (EH,EXECUTABLE)
<L78>: [LP 56]
  # DEBUG thisD.54422 => &D.45877
  # DEBUG thisD.54423 => &D.45877
  # DEBUG thisD.54432 => &D.45877
  # VUSE <.MEM_232>
  # PT = nonlocal escaped null { D.45877 } (escaped)
  _294 = MEM[(charD.10 * *)&D.45877];
  # DEBUG D#3ptD.0 => &D.45877
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54433 => &D.45877
  if (&D.45877.D.14356._M_local_bufD.14358 != _294)
    goto <bb 452>;
  else
    goto <bb 453>;
;;    succ:       452 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                453 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 452, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 451, next block 453, flags: (NEW, REACHABLE)
;;    pred:       451 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45877.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54425 => &D.45877
  # DEBUG __sizeD.54424 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45877
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45877
  # DEBUG D#51ptD.0 => &D.45877._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54428 => _294
  # DEBUG __aD.54426 => D#49ptD.0
  # DEBUG __nD.54427 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54431 => _294
  # DEBUG thisD.54429 => D#45ptD.0
  # DEBUG D.54430 => D#46ptD.0
  # .MEM_581 = VDEF <.MEM_232>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_294);
;;    succ:       453 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 453, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 452, next block 454, flags: (NEW, REACHABLE)
;;    pred:       451 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                452 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_374 = PHI <.MEM_232(451), .MEM_581(452)>
  # DEBUG D#55ptD.0 => &D.45877._M_dataplusD.14336
  # DEBUG thisD.54434 => D#55ptD.0
  # DEBUG thisD.54435 => D#55ptD.0
  # DEBUG thisD.54436 => D#55ptD.0
  # .MEM_291 = VDEF <.MEM_374>
  D.45877 ={v} {CLOBBER};
  resx 110
;;    succ:      

;;   basic block 454, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 453, next block 455, flags: (NEW, REACHABLE)
;;    pred:       347 (EH,EXECUTABLE)
<L80>: [LP 58]
  # DEBUG thisD.54439 => &D.45880
  # DEBUG thisD.54440 => &D.45880
  # DEBUG thisD.54449 => &D.45880
  # VUSE <.MEM_239>
  # PT = nonlocal escaped { D.45880 } (escaped)
  _292 = MEM[(charD.10 * *)&D.45880];
  # DEBUG D#3ptD.0 => &D.45880
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54450 => &D.45880
  if (&D.45880.D.14356._M_local_bufD.14358 != _292)
    goto <bb 455>;
  else
    goto <bb 456>;
;;    succ:       455 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                456 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 455, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 454, next block 456, flags: (NEW, REACHABLE)
;;    pred:       454 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45880.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54442 => &D.45880
  # DEBUG __sizeD.54441 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45880
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45880
  # DEBUG D#51ptD.0 => &D.45880._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54445 => _292
  # DEBUG __aD.54443 => D#49ptD.0
  # DEBUG __nD.54444 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54448 => _292
  # DEBUG thisD.54446 => D#45ptD.0
  # DEBUG D.54447 => D#46ptD.0
  # .MEM_576 = VDEF <.MEM_239>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_292);
;;    succ:       456 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 456, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 455, next block 457, flags: (NEW, REACHABLE)
;;    pred:       454 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                455 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_375 = PHI <.MEM_239(454), .MEM_576(455)>
  # DEBUG D#55ptD.0 => &D.45880._M_dataplusD.14336
  # DEBUG thisD.54451 => D#55ptD.0
  # DEBUG thisD.54452 => D#55ptD.0
  # DEBUG thisD.54453 => D#55ptD.0
  # .MEM_289 = VDEF <.MEM_375>
  D.45880 ={v} {CLOBBER};
  resx 114
;;    succ:      

;;   basic block 457, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 456, next block 458, flags: (NEW, REACHABLE)
;;    pred:       350 (EH,EXECUTABLE)
<L82>: [LP 60]
  # DEBUG thisD.54456 => &D.45883
  # DEBUG thisD.54457 => &D.45883
  # DEBUG thisD.54466 => &D.45883
  # VUSE <.MEM_246>
  # PT = nonlocal escaped { D.45883 } (escaped)
  _290 = MEM[(charD.10 * *)&D.45883];
  # DEBUG D#3ptD.0 => &D.45883
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54467 => &D.45883
  if (&D.45883.D.14356._M_local_bufD.14358 != _290)
    goto <bb 458>;
  else
    goto <bb 459>;
;;    succ:       458 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                459 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 458, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 457, next block 459, flags: (NEW, REACHABLE)
;;    pred:       457 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45883.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54459 => &D.45883
  # DEBUG __sizeD.54458 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45883
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45883
  # DEBUG D#51ptD.0 => &D.45883._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54462 => _290
  # DEBUG __aD.54460 => D#49ptD.0
  # DEBUG __nD.54461 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54465 => _290
  # DEBUG thisD.54463 => D#45ptD.0
  # DEBUG D.54464 => D#46ptD.0
  # .MEM_571 = VDEF <.MEM_246>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_290);
;;    succ:       459 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 459, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 458, next block 460, flags: (NEW, REACHABLE)
;;    pred:       457 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                458 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_376 = PHI <.MEM_246(457), .MEM_571(458)>
  # DEBUG D#55ptD.0 => &D.45883._M_dataplusD.14336
  # DEBUG thisD.54468 => D#55ptD.0
  # DEBUG thisD.54469 => D#55ptD.0
  # DEBUG thisD.54470 => D#55ptD.0
  # .MEM_287 = VDEF <.MEM_376>
  D.45883 ={v} {CLOBBER};
  resx 118
;;    succ:      

;;   basic block 460, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 459, next block 461, flags: (NEW, REACHABLE)
;;    pred:       353 (EH,EXECUTABLE)
<L84>: [LP 62]
  # DEBUG thisD.54473 => &D.45886
  # DEBUG thisD.54474 => &D.45886
  # DEBUG thisD.54483 => &D.45886
  # VUSE <.MEM_253>
  # PT = nonlocal escaped null { D.45886 } (escaped)
  _288 = MEM[(charD.10 * *)&D.45886];
  # DEBUG D#3ptD.0 => &D.45886
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54484 => &D.45886
  if (&D.45886.D.14356._M_local_bufD.14358 != _288)
    goto <bb 461>;
  else
    goto <bb 462>;
;;    succ:       461 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                462 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 461, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 460, next block 462, flags: (NEW, REACHABLE)
;;    pred:       460 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45886.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54476 => &D.45886
  # DEBUG __sizeD.54475 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45886
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45886
  # DEBUG D#51ptD.0 => &D.45886._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54479 => _288
  # DEBUG __aD.54477 => D#49ptD.0
  # DEBUG __nD.54478 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54482 => _288
  # DEBUG thisD.54480 => D#45ptD.0
  # DEBUG D.54481 => D#46ptD.0
  # .MEM_566 = VDEF <.MEM_253>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_288);
;;    succ:       462 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 462, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 461, next block 463, flags: (NEW, REACHABLE)
;;    pred:       460 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                461 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_377 = PHI <.MEM_253(460), .MEM_566(461)>
  # DEBUG D#55ptD.0 => &D.45886._M_dataplusD.14336
  # DEBUG thisD.54485 => D#55ptD.0
  # DEBUG thisD.54486 => D#55ptD.0
  # DEBUG thisD.54487 => D#55ptD.0
  # .MEM_285 = VDEF <.MEM_377>
  D.45886 ={v} {CLOBBER};
  resx 122
;;    succ:      

;;   basic block 463, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 462, next block 464, flags: (NEW, REACHABLE)
;;    pred:       356 (EH,EXECUTABLE)
<L86>: [LP 64]
  # DEBUG thisD.54490 => &D.45889
  # DEBUG thisD.54491 => &D.45889
  # DEBUG thisD.54500 => &D.45889
  # VUSE <.MEM_260>
  # PT = nonlocal escaped { D.45889 } (escaped)
  _286 = MEM[(charD.10 * *)&D.45889];
  # DEBUG D#3ptD.0 => &D.45889
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54501 => &D.45889
  if (&D.45889.D.14356._M_local_bufD.14358 != _286)
    goto <bb 464>;
  else
    goto <bb 465>;
;;    succ:       464 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                465 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 464, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 463, next block 465, flags: (NEW, REACHABLE)
;;    pred:       463 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45889.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54493 => &D.45889
  # DEBUG __sizeD.54492 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45889
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45889
  # DEBUG D#51ptD.0 => &D.45889._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54496 => _286
  # DEBUG __aD.54494 => D#49ptD.0
  # DEBUG __nD.54495 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54499 => _286
  # DEBUG thisD.54497 => D#45ptD.0
  # DEBUG D.54498 => D#46ptD.0
  # .MEM_561 = VDEF <.MEM_260>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_286);
;;    succ:       465 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 465, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 464, next block 466, flags: (NEW, REACHABLE)
;;    pred:       463 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                464 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_378 = PHI <.MEM_260(463), .MEM_561(464)>
  # DEBUG D#55ptD.0 => &D.45889._M_dataplusD.14336
  # DEBUG thisD.54502 => D#55ptD.0
  # DEBUG thisD.54503 => D#55ptD.0
  # DEBUG thisD.54504 => D#55ptD.0
  # .MEM_283 = VDEF <.MEM_378>
  D.45889 ={v} {CLOBBER};
  resx 126
;;    succ:      

;;   basic block 466, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 465, next block 467, flags: (NEW, REACHABLE)
;;    pred:       359 (EH,EXECUTABLE)
<L88>: [LP 66]
  # DEBUG thisD.54507 => &D.45892
  # DEBUG thisD.54508 => &D.45892
  # DEBUG thisD.54517 => &D.45892
  # VUSE <.MEM_266>
  # PT = nonlocal escaped { D.45892 } (escaped)
  _284 = MEM[(charD.10 * *)&D.45892];
  # DEBUG D#3ptD.0 => &D.45892
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54518 => &D.45892
  if (&D.45892.D.14356._M_local_bufD.14358 != _284)
    goto <bb 467>;
  else
    goto <bb 468>;
;;    succ:       467 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                468 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 467, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 466, next block 468, flags: (NEW, REACHABLE)
;;    pred:       466 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45892.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54510 => &D.45892
  # DEBUG __sizeD.54509 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45892
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45892
  # DEBUG D#51ptD.0 => &D.45892._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54513 => _284
  # DEBUG __aD.54511 => D#49ptD.0
  # DEBUG __nD.54512 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54516 => _284
  # DEBUG thisD.54514 => D#45ptD.0
  # DEBUG D.54515 => D#46ptD.0
  # .MEM_556 = VDEF <.MEM_266>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_284);
;;    succ:       468 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 468, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 467, next block 469, flags: (NEW, REACHABLE)
;;    pred:       466 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                467 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_379 = PHI <.MEM_266(466), .MEM_556(467)>
  # DEBUG D#55ptD.0 => &D.45892._M_dataplusD.14336
  # DEBUG thisD.54519 => D#55ptD.0
  # DEBUG thisD.54520 => D#55ptD.0
  # DEBUG thisD.54521 => D#55ptD.0
  # .MEM_281 = VDEF <.MEM_379>
  D.45892 ={v} {CLOBBER};
  resx 130
;;    succ:      

;;   basic block 469, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 468, next block 470, flags: (NEW, REACHABLE)
;;    pred:       362 (EH,EXECUTABLE)
<L90>: [LP 68]
  # DEBUG thisD.54524 => &D.45895
  # DEBUG thisD.54525 => &D.45895
  # DEBUG thisD.54534 => &D.45895
  # VUSE <.MEM_272>
  # PT = nonlocal escaped { D.45895 } (escaped)
  _282 = MEM[(charD.10 * *)&D.45895];
  # DEBUG D#3ptD.0 => &D.45895
  # DEBUG thisD.50683 => D#3ptD.0
  # DEBUG thisD.54535 => &D.45895
  if (&D.45895.D.14356._M_local_bufD.14358 != _282)
    goto <bb 470>;
  else
    goto <bb 471>;
;;    succ:       470 [69.8%]  (TRUE_VALUE,EXECUTABLE)
;;                471 [30.2%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 470, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 469, next block 471, flags: (NEW, REACHABLE)
;;    pred:       469 [69.8%]  (TRUE_VALUE,EXECUTABLE)
  # DEBUG D#54ptD.0 => D.45895.D.14356._M_allocated_capacityD.14359
  # DEBUG D#53ptD.0 => D#54ptD.0
  # DEBUG thisD.54527 => &D.45895
  # DEBUG __sizeD.54526 => D#53ptD.0
  # DEBUG D#52ptD.0 => D#53ptD.0
  # DEBUG D#3ptD.0 => &D.45895
  # DEBUG thisD.51714 => D#3ptD.0
  # DEBUG thisD.51715 => &D.45895
  # DEBUG D#51ptD.0 => &D.45895._M_dataplusD.14336
  # DEBUG D#49ptD.0 => D#51ptD.0
  # DEBUG D#50ptD.0 => D#52ptD.0 + 1
  # DEBUG __pD.54530 => _282
  # DEBUG __aD.54528 => D#49ptD.0
  # DEBUG __nD.54529 => D#50ptD.0
  # DEBUG D#48ptD.0 => D#50ptD.0
  # DEBUG D#47ptD.0 => D#49ptD.0
  # DEBUG D#45ptD.0 => D#47ptD.0
  # DEBUG D#46ptD.0 => D#48ptD.0
  # DEBUG __pD.54533 => _282
  # DEBUG thisD.54531 => D#45ptD.0
  # DEBUG D.54532 => D#46ptD.0
  # .MEM_551 = VDEF <.MEM_272>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZdlPvD.2766 (_282);
;;    succ:       471 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 471, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 470, next block 472, flags: (NEW, REACHABLE)
;;    pred:       469 [30.2%]  (FALSE_VALUE,EXECUTABLE)
;;                470 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_380 = PHI <.MEM_272(469), .MEM_551(470)>
  # DEBUG D#55ptD.0 => &D.45895._M_dataplusD.14336
  # DEBUG thisD.54536 => D#55ptD.0
  # DEBUG thisD.54537 => D#55ptD.0
  # DEBUG thisD.54538 => D#55ptD.0
  # .MEM_279 = VDEF <.MEM_380>
  D.45895 ={v} {CLOBBER};
  resx 134
;;    succ:      

;;   basic block 472, loop depth 0, count 0, freq 225, maybe hot
;;    prev block 471, next block 473, flags: (NEW, REACHABLE)
;;    pred:       66 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                59 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                48 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_1444 = PHI <.MEM_1505(66), .MEM_1505(59), .MEM_1942(48)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1406 = PHI <__i$_M_node_2379(66), __i$_M_node_2379(59), &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732(48)>
  goto <bb 67>;
;;    succ:       67 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 473, loop depth 0, count 0, freq 225, maybe hot
;;    prev block 472, next block 474, flags: (NEW, REACHABLE)
;;    pred:       103 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                96 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                85 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_1720 = PHI <.MEM_49(103), .MEM_49(96), .MEM_2023(85)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_789 = PHI <__i$_M_node_2381(103), __i$_M_node_2381(96), &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732(85)>
  goto <bb 104>;
;;    succ:       104 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 474, loop depth 0, count 0, freq 81, maybe hot
;;    prev block 473, next block 475, flags: (NEW)
;;    pred:       116 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2085>
  pretmp_619 = MEM[(long unsigned intD.14 *)&D.45844 + 8B];
  # VUSE <.MEM_2085>
  pretmp_622 = MEM[(charD.10 * *)&D.45844];
;;    succ:       475 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 475, loop depth 0, count 0, freq 224, maybe hot
;;    prev block 474, next block 476, flags: (NEW, REACHABLE)
;;    pred:       132 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                127 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                474 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_979 = PHI <.MEM_1983(132), .MEM_1983(127), .MEM_2085(474)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_837 = PHI <__i$_M_node_2392(132), __i$_M_node_2392(127), &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732(474)>
  # prephitmp_620 = PHI <pretmp_550(132), pretmp_550(127), pretmp_619(474)>
  # prephitmp_623 = PHI <pretmp_543(132), pretmp_543(127), pretmp_622(474)>
  goto <bb 133>;
;;    succ:       133 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 476, loop depth 0, count 0, freq 45, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;   Invalid sum of incoming frequencies 298, should be 45
;;    prev block 475, next block 477, flags: (NEW, REACHABLE)
;;    pred:       133 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  [LP 34] # .MEM_2125 = VDEF <.MEM_2098>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZSt19__throw_logic_errorPKcD.2828 ("basic_string::_M_construct null not valid");
;;    succ:       477 (EH,EXECUTABLE)

;;   basic block 477, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 476, next block 478, flags: (NEW)
;;    pred:       476 (EH,EXECUTABLE)
<L109>: [LP 34]
  goto <bb 415> (<L56>);
;;    succ:       415 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 478, loop depth 0, count 0, freq 351, maybe hot
;;   Invalid sum of incoming frequencies 53, should be 351
;;    prev block 477, next block 479, flags: (NEW, REACHABLE)
;;    pred:       133 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __firstD.57518 => D#540ptD.0
  # DEBUG __lastD.57517 => _1103
  # DEBUG D#109ptD.0 => &__firstD.57518
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.57520 => D#540ptD.0
  # DEBUG __lastD.57519 => _1103
  # .MEM_2099 = VDEF <.MEM_2098>
  __dnewD.57495 = prephitmp_718;
  if (prephitmp_718 > 15)
    goto <bb 134>;
  else
    goto <bb 136>;
;;    succ:       134 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                136 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 479, loop depth 0, count 0, freq 81, maybe hot
;;    prev block 478, next block 480, flags: (NEW)
;;    pred:       152 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2146>
  pretmp_2180 = MEM[(long unsigned intD.14 *)&D.45850 + 8B];
  # VUSE <.MEM_2146>
  pretmp_2182 = MEM[(charD.10 * *)&D.45850];
;;    succ:       480 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 480, loop depth 0, count 0, freq 224, maybe hot
;;    prev block 479, next block 481, flags: (NEW, REACHABLE)
;;    pred:       168 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                163 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                479 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_734 = PHI <.MEM_901(168), .MEM_901(163), .MEM_2146(479)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1458 = PHI <__i$_M_node_2404(168), __i$_M_node_2404(163), &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732(479)>
  # prephitmp_2181 = PHI <pretmp_705(168), pretmp_705(163), pretmp_2180(479)>
  # prephitmp_2183 = PHI <pretmp_708(168), pretmp_708(163), pretmp_2182(479)>
  goto <bb 169>;
;;    succ:       169 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 481, loop depth 0, count 0, freq 45, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;   Invalid sum of incoming frequencies 298, should be 45
;;    prev block 480, next block 482, flags: (NEW, REACHABLE)
;;    pred:       169 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  [LP 38] # .MEM_2186 = VDEF <.MEM_2159>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZSt19__throw_logic_errorPKcD.2828 ("basic_string::_M_construct null not valid");
;;    succ:       482 (EH,EXECUTABLE)

;;   basic block 482, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 481, next block 483, flags: (NEW)
;;    pred:       481 (EH,EXECUTABLE)
<L110>: [LP 38]
  goto <bb 422> (<L60>);
;;    succ:       422 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 483, loop depth 0, count 0, freq 351, maybe hot
;;   Invalid sum of incoming frequencies 53, should be 351
;;    prev block 482, next block 484, flags: (NEW, REACHABLE)
;;    pred:       169 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __firstD.57759 => D#532ptD.0
  # DEBUG __lastD.57758 => _1194
  # DEBUG D#109ptD.0 => &__firstD.57759
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.57761 => D#532ptD.0
  # DEBUG __lastD.57760 => _1194
  # .MEM_2160 = VDEF <.MEM_2159>
  __dnewD.57736 = prephitmp_698;
  if (prephitmp_698 > 15)
    goto <bb 170>;
  else
    goto <bb 172>;
;;    succ:       170 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                172 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 484, loop depth 0, count 0, freq 224, maybe hot
;;    prev block 483, next block 485, flags: (NEW, REACHABLE)
;;    pred:       206 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                199 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                188 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_740 = PHI <.MEM_824(206), .MEM_824(199), .MEM_2206(188)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1240 = PHI <__i$_M_node_2405(206), __i$_M_node_2405(199), &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732(188)>
  goto <bb 207>;
;;    succ:       207 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 485, loop depth 0, count 0, freq 81, maybe hot
;;    prev block 484, next block 486, flags: (NEW)
;;    pred:       216 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2258>
  pretmp_633 = MEM[(long unsigned intD.14 *)&D.45859 + 8B];
  # VUSE <.MEM_2258>
  pretmp_635 = MEM[(charD.10 * *)&D.45859];
;;    succ:       486 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 486, loop depth 0, count 0, freq 224, maybe hot
;;    prev block 485, next block 487, flags: (NEW, REACHABLE)
;;    pred:       232 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                227 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                485 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_1837 = PHI <.MEM_793(232), .MEM_793(227), .MEM_2258(485)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_898 = PHI <__i$_M_node_2406(232), __i$_M_node_2406(227), &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732(485)>
  # prephitmp_634 = PHI <pretmp_679(232), pretmp_679(227), pretmp_633(485)>
  # prephitmp_2119 = PHI <pretmp_682(232), pretmp_682(227), pretmp_635(485)>
  goto <bb 233>;
;;    succ:       233 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 487, loop depth 0, count 0, freq 45, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;   Invalid sum of incoming frequencies 298, should be 45
;;    prev block 486, next block 488, flags: (NEW, REACHABLE)
;;    pred:       233 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  [LP 44] # .MEM_2298 = VDEF <.MEM_2271>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZSt19__throw_logic_errorPKcD.2828 ("basic_string::_M_construct null not valid");
;;    succ:       488 (EH,EXECUTABLE)

;;   basic block 488, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 487, next block 489, flags: (NEW)
;;    pred:       487 (EH,EXECUTABLE)
<L111>: [LP 44]
  goto <bb 432> (<L66>);
;;    succ:       432 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 489, loop depth 0, count 0, freq 350, maybe hot
;;   Invalid sum of incoming frequencies 53, should be 350
;;    prev block 488, next block 490, flags: (NEW, REACHABLE)
;;    pred:       233 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __firstD.58196 => D#523ptD.0
  # DEBUG __lastD.58195 => _1360
  # DEBUG D#109ptD.0 => &__firstD.58196
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.58198 => D#523ptD.0
  # DEBUG __lastD.58197 => _1360
  # .MEM_2272 = VDEF <.MEM_2271>
  __dnewD.58173 = prephitmp_672;
  if (prephitmp_672 > 15)
    goto <bb 234>;
  else
    goto <bb 236>;
;;    succ:       234 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                236 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 490, loop depth 0, count 0, freq 81, maybe hot
;;    prev block 489, next block 491, flags: (NEW)
;;    pred:       249 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # VUSE <.MEM_2309>
  pretmp_2122 = MEM[(long unsigned intD.14 *)&D.45862 + 8B];
  # VUSE <.MEM_2309>
  pretmp_637 = MEM[(charD.10 * *)&D.45862];
;;    succ:       491 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 491, loop depth 0, count 0, freq 224, maybe hot
;;    prev block 490, next block 492, flags: (NEW, REACHABLE)
;;    pred:       265 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                260 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                490 [100.0%]  (FALLTHRU,EXECUTABLE)
  # .MEM_2019 = PHI <.MEM_2366(265), .MEM_2366(260), .MEM_2309(490)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1137 = PHI <__i$_M_node_2407(265), __i$_M_node_2407(260), &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732(490)>
  # prephitmp_2123 = PHI <pretmp_665(265), pretmp_665(260), pretmp_2122(490)>
  # prephitmp_638 = PHI <pretmp_1978(265), pretmp_1978(260), pretmp_637(490)>
  goto <bb 266>;
;;    succ:       266 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 492, loop depth 0, count 0, freq 45, maybe hot
;;   Invalid sum of outgoing probabilities 0.0%
;;   Invalid sum of incoming frequencies 298, should be 45
;;    prev block 491, next block 493, flags: (NEW, REACHABLE)
;;    pred:       266 [85.0%]  (TRUE_VALUE,EXECUTABLE)
  [LP 46] # .MEM_2349 = VDEF <.MEM_2322>
  # USE = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  # CLB = nonlocal null { D.42076 D.45796 D.45799 D.45802 D.45805 D.45808 D.45811 D.45814 D.45817 D.45820 D.45823 D.45826 D.45829 D.45832 D.45835 D.45838 D.45841 D.45844 D.45847 D.45850 D.45853 D.45856 D.45859 D.45862 D.45865 D.45868 D.45871 D.45874 D.45877 D.45880 D.45883 D.45886 D.45889 D.45892 D.45895 D.56367 D.56412 D.56457 D.56502 D.56547 D.56592 D.56637 D.56682 D.56827 D.57158 D.57399 D.57420 D.57495 D.57640 D.57661 D.57736 D.57781 D.57881 D.58077 D.58098 D.58173 D.58273 D.58294 D.58369 D.58514 D.58755 D.58896 D.59031 } (nonlocal, escaped)
  _ZSt19__throw_logic_errorPKcD.2828 ("basic_string::_M_construct null not valid");
;;    succ:       493 (EH,EXECUTABLE)

;;   basic block 493, loop depth 0, count 0, freq 0, maybe hot
;;    prev block 492, next block 494, flags: (NEW)
;;    pred:       492 (EH,EXECUTABLE)
<L112>: [LP 46]
  goto <bb 436> (<L68>);
;;    succ:       436 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 494, loop depth 0, count 0, freq 350, maybe hot
;;   Invalid sum of incoming frequencies 53, should be 350
;;    prev block 493, next block 495, flags: (NEW, REACHABLE)
;;    pred:       266 [15.0%]  (FALSE_VALUE,EXECUTABLE)
  # DEBUG __firstD.58392 => D#515ptD.0
  # DEBUG __lastD.58391 => _1435
  # DEBUG D#109ptD.0 => &__firstD.58392
  # DEBUG D.52744 => D#109ptD.0
  # DEBUG __firstD.58394 => D#515ptD.0
  # DEBUG __lastD.58393 => _1435
  # .MEM_2323 = VDEF <.MEM_2322>
  __dnewD.58369 = prephitmp_658;
  if (prephitmp_658 > 15)
    goto <bb 267>;
  else
    goto <bb 269>;
;;    succ:       267 [29.0%]  (TRUE_VALUE,EXECUTABLE)
;;                269 [71.0%]  (FALSE_VALUE,EXECUTABLE)

;;   basic block 495, loop depth 0, count 0, freq 224, maybe hot
;;    prev block 494, next block 496, flags: (NEW, REACHABLE)
;;    pred:       303 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                296 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                285 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_932 = PHI <.MEM_1959(303), .MEM_1959(296), .MEM_2369(285)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1308 = PHI <__i$_M_node_2408(303), __i$_M_node_2408(296), &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732(285)>
  goto <bb 304>;
;;    succ:       304 [100.0%]  (FALLTHRU,EXECUTABLE)

;;   basic block 496, loop depth 0, count 0, freq 224, maybe hot
;;    prev block 495, next block 1, flags: (NEW, REACHABLE)
;;    pred:       334 [21.7%]  (TRUE_VALUE,EXECUTABLE)
;;                327 [6.6%]  (TRUE_VALUE,EXECUTABLE)
;;                316 [9.0%]  (TRUE_VALUE,EXECUTABLE)
  # .MEM_2193 = PHI <.MEM_1082(334), .MEM_1082(327), .MEM_2430(316)>
  # PT = nonlocal escaped { D.42076 } (nonlocal, escaped)
  # __i$_M_node_1383 = PHI <__i$_M_node_2421(334), __i$_M_node_2421(327), &MEM[(struct _Rb_treeD.44499 *)&_Z19gRoutingFunctionMapB5cxx11D.42076]._M_implD.44577._M_headerD.44732(316)>
  goto <bb 335>;
;;    succ:       335 [100.0%]  (FALLTHRU,EXECUTABLE)

}


