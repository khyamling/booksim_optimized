
;; Function std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_insert_unique_(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator, const _Val&, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_Alloc_node; _Key = int; _Val = std::pair<const int, int>; _KeyOfValue = std::_Select1st<std::pair<const int, int> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, int> >] (_ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_insert_unique_INS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_ERKS2_RT_.isra.263.constprop.277, funcdef_no=4068, decl_uid=85215, cgraph_uid=25, symbol_order=4047)

Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is innermost
loop is not parallel according to graphite
std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_insert_unique_(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator, const _Val&, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_Alloc_node; _Key = int; _Val = std::pair<const int, int>; _KeyOfValue = std::_Select1st<std::pair<const int, int> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, int> >] (struct _Rb_tree * const this, struct const_iterator __position, const struct pair & __v)
{
  struct _Rb_tree_node_base * SR.1875;
  struct _Rb_tree_node_base * SR.1874;
  struct _Rb_tree_node_base * SR.1873;
  struct _Rb_tree_node_base * SR.1872;
  struct _Rb_tree_node_base * SR.1871;
  struct _Rb_tree_node_base * SR.1870;
  struct _Rb_tree_node_base * SR.1869;
  struct _Rb_tree_node_base * SR.1868;
  struct _Rb_tree_node_base * SR.1867;
  const struct _Rb_tree_node_base * const __position$_M_node;
  struct _Rb_tree_node_base * __res$8;
  struct _Rb_tree_node_base * __res;
  bool __insert_left;
  struct iterator D.85465;
  struct pair D.85438;
  bool __comp;
  struct _Rb_tree_node_base * const __j$_M_node;
  struct pair D.85411;
  bool __comp;
  struct _Rb_tree_node_base * const __j$_M_node;
  struct pair D.85384;
  bool __comp;
  struct _Rb_tree_node_base * const __j$_M_node;
  struct pair D.85357;
  struct const_iterator __position;
  struct _Rb_tree_node_base * __res$second;
  struct _Rb_tree_node_base * __res$first;
  struct pair __res;
  struct iterator D.85236;
  const int pretmp_4;
  const int prephitmp_5;
  struct _Rb_tree_node_base * _8;
  const int pretmp_11;
  const size_type _13;
  struct _Rb_tree_node_base * _14;
  const int _15;
  const int _16;
  const int pretmp_18;
  const int _19;
  const int _20;
  struct _Rb_tree_node_base * _21;
  struct _Rb_tree_node_base * _22;
  const int _23;
  struct _Rb_tree_node_base * _24;
  struct _Rb_tree_node_base * _25;
  struct _Rb_tree_node_base * _26;
  const int _27;
  struct _Rb_tree_node_base * _28;
  struct _Rb_tree_node_base * const _29;
  const int _32;
  struct _Rb_tree_node_base * _34;
  struct _Rb_tree_node_base * _35;
  struct _Rb_tree_node_base * _37;
  struct _Rb_tree_node_base * const _43;
  struct _Rb_tree_node_base * _46;
  const int prephitmp_48;
  const int _50;
  struct _Rb_tree_node_base * _52;
  struct _Rb_tree_node_base * _53;
  const int _54;
  struct _Rb_tree_node_base * const _55;
  bool _61;
  const int pretmp_62;
  const int _63;
  struct _Rb_tree_node_base * _64;
  const int _68;
  const int _69;
  struct _Rb_tree_node_base * _70;
  struct _Rb_tree_node_base * _71;
  struct _Rb_tree_node_base * _73;
  bool _78;
  bool _79;
  struct _Rb_tree_node * _85;
  long unsigned int _90;
  long unsigned int _91;
  const int prephitmp_94;
  const int prephitmp_104;
  const int prephitmp_118;
  const int pretmp_120;
  const int pretmp_127;
  const int prephitmp_128;
  const int pretmp_160;
  int pretmp_167;
  int prephitmp_168;

  <bb 2>:
  # DEBUG __node_gen s=> __node_gen
  # DEBUG D#840 s=> __node_gen
  # DEBUG __x => __v_1(D)
  # DEBUG this => D#128
  # DEBUG D#1053 => &__v_1(D)->first
  # DEBUG this => this_3(D)
  __position$_M_node_129 = MEM[(struct _Rb_tree_const_iterator *)&__position];
  # DEBUG __position$_M_node => __position$_M_node_129
  # DEBUG __k => D#1053
  # DEBUG this => &__position
  # DEBUG this => NULL
  # DEBUG __x => __position$_M_node_129
  # DEBUG __pos => __position$_M_node_129
  # DEBUG this => this_3(D)
  __j$_M_node_12 = &this_3(D)->_M_impl._M_header;
  if (__j$_M_node_12 == __position$_M_node_129)
    goto <bb 3>;
  else
    goto <bb 16>;

  <bb 3>:
  _13 = MEM[(long unsigned int *)this_3(D) + 40B];
  # DEBUG D#50 => this_3(D)
  # DEBUG this => D#50
  if (_13 != 0)
    goto <bb 4>;
  else
    goto <bb 59>;

  <bb 4>:
  # DEBUG this => this_3(D)
  _14 = MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32];
  # DEBUG __x => _14
  # DEBUG __x => _14
  # DEBUG this => _14
  # DEBUG D#346 => &MEM[(const struct _Rb_tree_node *)_14]._M_value_field
  # DEBUG __r => D#346
  # DEBUG __x => D#346
  # DEBUG this => D#128
  # DEBUG D#357 => &MEM[(const struct pair &)_14 + 32].first
  # DEBUG D#367 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#367
  _15 = MEM[(const int &)_14 + 32];
  # DEBUG D#53 => D#357
  _16 = MEM[(const int &)__v_1(D)];
  # DEBUG D#54 => D#1053
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_15 < _16)
    goto <bb 52>;
  else
    goto <bb 59>;

  <bb 5>:
  # _43 = PHI <_34(8), _35(9)>
  # DEBUG __comp => D#1055 < _32
  # DEBUG __y => __j$_M_node_143
  # DEBUG __x => _43
  if (_43 == 0B)
    goto <bb 10>;
  else
    goto <bb 6>;

  <bb 6>:

  <bb 7>:
  # __j$_M_node_143 = PHI <_8(60), _43(6)>
  # DEBUG __comp => 1
  # DEBUG __x => __j$_M_node_143
  # DEBUG __y => __j$_M_node_143
  # DEBUG __x => __j$_M_node_143
  # DEBUG __x => __j$_M_node_143
  # DEBUG this => __j$_M_node_143
  # DEBUG D#336 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_143]._M_value_field
  # DEBUG __r => D#336
  # DEBUG __x => D#336
  # DEBUG this => D#128
  # DEBUG D#352 => &MEM[(const struct pair &)__j$_M_node_143 + 32].first
  # DEBUG D#356 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#356
  # DEBUG D#1055 => MEM[(const int &)__v_1(D)]
  # DEBUG D#53 => D#1053
  _32 = MEM[(const int &)__j$_M_node_143 + 32];
  # DEBUG D#54 => D#352
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  # DEBUG __comp => NULL
  if (_32 > pretmp_120)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  _34 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_143 + 16B];
  # DEBUG D#64 => __j$_M_node_143
  # DEBUG __x => D#64
  goto <bb 5>;

  <bb 9>:
  _35 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_143 + 24B];
  # DEBUG D#63 => __j$_M_node_143
  # DEBUG __x => D#63
  goto <bb 5>;

  <bb 10>:
  # _69 = PHI <_32(5)>
  # __j$_M_node_33 = PHI <__j$_M_node_143(5)>

  <bb 61>:
  # DEBUG this => &__j
  # DEBUG __x => __j$_M_node_33
  # DEBUG __j$_M_node => __j$_M_node_33
  if (_69 > pretmp_120)
    goto <bb 11>;
  else
    goto <bb 13>;

  <bb 11>:
  # __j$_M_node_178 = PHI <__j$_M_node_33(61), __j$_M_node_12(59)>
  # DEBUG this => &__j
  # DEBUG __x => __j$_M_node_178
  # DEBUG __j$_M_node => __j$_M_node_178
  _37 = MEM[(struct _Rb_tree_node_base * *)this_3(D) + 24B];
  # DEBUG D#73 => this_3(D)
  # DEBUG this => D#73
  # DEBUG this => NULL
  # DEBUG __x => _37
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (_37 == __j$_M_node_178)
    goto <bb 73>;
  else
    goto <bb 12>;

  <bb 12>:
  # DEBUG this => &__j
  __j$_M_node_39 = std::_Rb_tree_decrement (__j$_M_node_178);
  # DEBUG __j$_M_node => __j$_M_node_39
  pretmp_18 = MEM[(const int &)__v_1(D)];
  pretmp_127 = MEM[(const int &)__j$_M_node_39 + 32];

  <bb 13>:
  # __j$_M_node_40 = PHI <__j$_M_node_33(61), __j$_M_node_39(12)>
  # __j$_M_node_177 = PHI <__j$_M_node_33(61), __j$_M_node_178(12)>
  # prephitmp_128 = PHI <pretmp_120(61), pretmp_18(12)>
  # prephitmp_104 = PHI <_69(61), pretmp_127(12)>

  <bb 65>:
  # DEBUG __j$_M_node => __j$_M_node_40
  # DEBUG __x => __j$_M_node_40
  # DEBUG __x => __j$_M_node_40
  # DEBUG this => __j$_M_node_40
  # DEBUG D#346 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_40]._M_value_field
  # DEBUG __r => D#346
  # DEBUG __x => D#346
  # DEBUG this => D#128
  # DEBUG D#353 => &MEM[(const struct pair &)__j$_M_node_40 + 32].first
  # DEBUG D#355 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#355
  # DEBUG D#53 => D#353
  # DEBUG D#54 => D#1053
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (prephitmp_104 < prephitmp_128)
    goto <bb 15>;
  else
    goto <bb 14>;

  <bb 14>:

  <bb 15>:
  # SR.1869_88 = PHI <__j$_M_node_40(14), 0B(65)>
  # SR.1870_117 = PHI <0B(14), __j$_M_node_177(65)>

  <bb 73>:
  # SR.1869_139 = PHI <SR.1869_88(15), 0B(11)>
  # SR.1870_134 = PHI <SR.1870_117(15), _37(11)>

  <bb 64>:
  # DEBUG D#354 => {CLOBBER}
  # DEBUG __j$_M_node => D#354
  goto <bb 52>;

  <bb 16>:
  # DEBUG __x => __position$_M_node_129
  # DEBUG __x => __position$_M_node_129
  # DEBUG this => __position$_M_node_129
  # DEBUG D#346 => &MEM[(const struct _Rb_tree_node *)__position$_M_node_129]._M_value_field
  # DEBUG __r => D#346
  # DEBUG __x => D#346
  # DEBUG this => D#128
  # DEBUG D#358 => &MEM[(const struct pair &)__position$_M_node_129 + 32].first
  # DEBUG D#369 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#369
  _19 = MEM[(const int &)__v_1(D)];
  # DEBUG D#53 => D#1053
  _20 = MEM[(const int &)__position$_M_node_129 + 32];
  # DEBUG D#54 => D#358
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_19 < _20)
    goto <bb 17>;
  else
    goto <bb 34>;

  <bb 17>:
  # DEBUG __before => __position$_M_node_129
  # DEBUG this => this_3(D)
  _21 = MEM[(struct _Rb_tree_node_base * &)this_3(D) + 24];
  if (_21 == __position$_M_node_129)
    goto <bb 52>;
  else
    goto <bb 18>;

  <bb 18>:
  # DEBUG this => &__before
  _22 = std::_Rb_tree_decrement (__position$_M_node_129);
  # DEBUG __before => _22
  # DEBUG __x => _22
  # DEBUG __x => _22
  # DEBUG this => _22
  # DEBUG D#346 => &MEM[(const struct _Rb_tree_node *)_22]._M_value_field
  # DEBUG __r => D#346
  # DEBUG __x => D#346
  # DEBUG this => D#128
  # DEBUG D#359 => &MEM[(const struct pair &)_22 + 32].first
  # DEBUG D#366 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#366
  _23 = MEM[(const int &)_22 + 32];
  # DEBUG D#53 => D#359
  # DEBUG D#54 => D#1053
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_19 > _23)
    goto <bb 19>;
  else
    goto <bb 21>;

  <bb 19>:
  _24 = MEM[(struct _Rb_tree_node_base * *)_22 + 24B];
  # DEBUG D#63 => _22
  # DEBUG __x => D#63
  if (_24 == 0B)
    goto <bb 52>;
  else
    goto <bb 20>;

  <bb 20>:
  goto <bb 52>;

  <bb 21>:
  # DEBUG this => this_3(D)
  # DEBUG __k => D#1053
  _46 = MEM[(struct _Rb_tree_node_base * *)this_3(D) + 16B];
  # DEBUG D#41 => this_3(D)
  # DEBUG this => D#41
  # DEBUG __x => NULL
  # DEBUG this => this_3(D)
  # DEBUG __y => NULL
  # DEBUG __comp => 1
  # DEBUG __comp => 1
  # DEBUG __y => __j$_M_node_12
  # DEBUG __x => _46
  if (_46 == 0B)
    goto <bb 29>;
  else
    goto <bb 24>;

  <bb 22>:
  # _29 = PHI <_52(26), _53(27)>
  # DEBUG __comp => _19 < _50
  # DEBUG __y => __j$_M_node_67
  # DEBUG __x => _29
  if (_29 == 0B)
    goto <bb 28>;
  else
    goto <bb 23>;

  <bb 23>:
  goto <bb 25>;

  <bb 24>:

  <bb 25>:
  # __j$_M_node_67 = PHI <_46(24), _29(23)>
  # DEBUG __comp => 1
  # DEBUG __x => __j$_M_node_67
  # DEBUG __y => __j$_M_node_67
  # DEBUG __x => __j$_M_node_67
  # DEBUG __x => __j$_M_node_67
  # DEBUG this => __j$_M_node_67
  # DEBUG D#336 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_67]._M_value_field
  # DEBUG __r => D#336
  # DEBUG __x => D#336
  # DEBUG this => D#128
  # DEBUG D#352 => &MEM[(const struct pair &)__j$_M_node_67 + 32].first
  # DEBUG D#356 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#356
  # DEBUG D#53 => D#1053
  _50 = MEM[(const int &)__j$_M_node_67 + 32];
  # DEBUG D#54 => D#352
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  # DEBUG __comp => NULL
  if (_19 < _50)
    goto <bb 26>;
  else
    goto <bb 27>;

  <bb 26>:
  _52 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_67 + 16B];
  # DEBUG D#64 => __j$_M_node_67
  # DEBUG __x => D#64
  goto <bb 22>;

  <bb 27>:
  _53 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_67 + 24B];
  # DEBUG D#63 => __j$_M_node_67
  # DEBUG __x => D#63
  goto <bb 22>;

  <bb 28>:
  # _63 = PHI <_50(22)>
  # __j$_M_node_56 = PHI <__j$_M_node_67(22)>

  <bb 62>:
  # DEBUG this => &__j
  # DEBUG __x => __j$_M_node_56
  # DEBUG __j$_M_node => __j$_M_node_56
  if (_19 < _63)
    goto <bb 29>;
  else
    goto <bb 31>;

  <bb 29>:
  # __j$_M_node_175 = PHI <__j$_M_node_56(62), __j$_M_node_12(21)>
  # DEBUG this => &__j
  # DEBUG __x => __j$_M_node_175
  # DEBUG __j$_M_node => __j$_M_node_175
  # DEBUG D#73 => this_3(D)
  # DEBUG this => D#73
  # DEBUG this => NULL
  # DEBUG __x => _21
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (_21 == __j$_M_node_175)
    goto <bb 74>;
  else
    goto <bb 30>;

  <bb 30>:
  # DEBUG this => &__j
  __j$_M_node_57 = std::_Rb_tree_decrement (__j$_M_node_175);
  # DEBUG __j$_M_node => __j$_M_node_57
  pretmp_62 = MEM[(const int &)__j$_M_node_57 + 32];

  <bb 31>:
  # __j$_M_node_58 = PHI <__j$_M_node_56(62), __j$_M_node_57(30)>
  # __j$_M_node_179 = PHI <__j$_M_node_56(62), __j$_M_node_175(30)>
  # prephitmp_118 = PHI <_63(62), pretmp_62(30)>

  <bb 67>:
  # DEBUG __j$_M_node => __j$_M_node_58
  # DEBUG __x => __j$_M_node_58
  # DEBUG __x => __j$_M_node_58
  # DEBUG this => __j$_M_node_58
  # DEBUG D#346 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_58]._M_value_field
  # DEBUG __r => D#346
  # DEBUG __x => D#346
  # DEBUG this => D#128
  # DEBUG D#353 => &MEM[(const struct pair &)__j$_M_node_58 + 32].first
  # DEBUG D#355 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#355
  # DEBUG D#53 => D#353
  # DEBUG D#54 => D#1053
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_19 > prephitmp_118)
    goto <bb 33>;
  else
    goto <bb 32>;

  <bb 32>:

  <bb 33>:
  # SR.1871_103 = PHI <__j$_M_node_58(32), 0B(67)>
  # SR.1872_119 = PHI <0B(32), __j$_M_node_179(67)>

  <bb 74>:
  # SR.1871_133 = PHI <SR.1871_103(33), 0B(29)>
  # SR.1872_132 = PHI <SR.1872_119(33), _21(29)>

  <bb 66>:
  # DEBUG D#354 => {CLOBBER}
  # DEBUG __j$_M_node => D#354
  goto <bb 52>;

  <bb 34>:
  # DEBUG __x => __position$_M_node_129
  # DEBUG __x => __position$_M_node_129
  # DEBUG this => __position$_M_node_129
  # DEBUG D#346 => &MEM[(const struct _Rb_tree_node *)__position$_M_node_129]._M_value_field
  # DEBUG __r => D#346
  # DEBUG __x => D#346
  # DEBUG this => D#128
  # DEBUG D#360 => &MEM[(const struct pair &)__position$_M_node_129 + 32].first
  # DEBUG D#368 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#368
  # DEBUG D#53 => D#360
  # DEBUG D#54 => D#1053
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_19 > _20)
    goto <bb 35>;
  else
    goto <bb 57>;

  <bb 35>:
  # DEBUG __after => __position$_M_node_129
  # DEBUG this => this_3(D)
  _25 = MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32];
  if (_25 == __position$_M_node_129)
    goto <bb 52>;
  else
    goto <bb 36>;

  <bb 36>:
  # DEBUG this => &__after
  _26 = std::_Rb_tree_increment (__position$_M_node_129);
  # DEBUG __after => _26
  # DEBUG __x => _26
  # DEBUG __x => _26
  # DEBUG this => _26
  # DEBUG D#346 => &MEM[(const struct _Rb_tree_node *)_26]._M_value_field
  # DEBUG __r => D#346
  # DEBUG __x => D#346
  # DEBUG this => D#128
  # DEBUG D#361 => &MEM[(const struct pair &)_26 + 32].first
  # DEBUG D#365 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#365
  # DEBUG D#53 => D#1053
  _27 = MEM[(const int &)_26 + 32];
  # DEBUG D#54 => D#361
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_19 < _27)
    goto <bb 37>;
  else
    goto <bb 39>;

  <bb 37>:
  _28 = MEM[(struct _Rb_tree_node_base * *)__position$_M_node_129 + 24B];
  # DEBUG D#63 => __position$_M_node_129
  # DEBUG __x => D#63
  if (_28 == 0B)
    goto <bb 38>;
  else
    goto <bb 52>;

  <bb 38>:
  # DEBUG this => NULL
  # DEBUG __a => NULL
  # DEBUG __b => &__pos._M_node
  # DEBUG D#364 => {CLOBBER}
  # DEBUG __pos => D#364
  # DEBUG __res => 0B
  # DEBUG __res$8 => __position$_M_node_129
  # DEBUG __res$first => 0B
  # DEBUG __res$second => __position$_M_node_129
  if (__position$_M_node_129 != 0B)
    goto <bb 55>;
  else
    goto <bb 57>;

  <bb 39>:
  # DEBUG this => this_3(D)
  # DEBUG __k => D#1053
  _64 = MEM[(struct _Rb_tree_node_base * *)this_3(D) + 16B];
  # DEBUG D#41 => this_3(D)
  # DEBUG this => D#41
  # DEBUG __x => NULL
  # DEBUG this => this_3(D)
  # DEBUG __y => NULL
  # DEBUG __comp => 1
  # DEBUG __comp => 1
  # DEBUG __y => __j$_M_node_12
  # DEBUG __x => _64
  if (_64 == 0B)
    goto <bb 47>;
  else
    goto <bb 42>;

  <bb 40>:
  # _55 = PHI <_70(44), _71(45)>
  # DEBUG __comp => _19 < _68
  # DEBUG __y => __j$_M_node_95
  # DEBUG __x => _55
  if (_55 == 0B)
    goto <bb 46>;
  else
    goto <bb 41>;

  <bb 41>:
  goto <bb 43>;

  <bb 42>:

  <bb 43>:
  # __j$_M_node_95 = PHI <_64(42), _55(41)>
  # DEBUG __comp => 1
  # DEBUG __x => __j$_M_node_95
  # DEBUG __y => __j$_M_node_95
  # DEBUG __x => __j$_M_node_95
  # DEBUG __x => __j$_M_node_95
  # DEBUG this => __j$_M_node_95
  # DEBUG D#336 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_95]._M_value_field
  # DEBUG __r => D#336
  # DEBUG __x => D#336
  # DEBUG this => D#128
  # DEBUG D#352 => &MEM[(const struct pair &)__j$_M_node_95 + 32].first
  # DEBUG D#356 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#356
  # DEBUG D#53 => D#1053
  _68 = MEM[(const int &)__j$_M_node_95 + 32];
  # DEBUG D#54 => D#352
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  # DEBUG __comp => NULL
  if (_19 < _68)
    goto <bb 44>;
  else
    goto <bb 45>;

  <bb 44>:
  _70 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_95 + 16B];
  # DEBUG D#64 => __j$_M_node_95
  # DEBUG __x => D#64
  goto <bb 40>;

  <bb 45>:
  _71 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_95 + 24B];
  # DEBUG D#63 => __j$_M_node_95
  # DEBUG __x => D#63
  goto <bb 40>;

  <bb 46>:
  # _54 = PHI <_68(40)>
  # __j$_M_node_51 = PHI <__j$_M_node_95(40)>

  <bb 63>:
  # DEBUG this => &__j
  # DEBUG __x => __j$_M_node_51
  # DEBUG __j$_M_node => __j$_M_node_51
  if (_19 < _54)
    goto <bb 47>;
  else
    goto <bb 49>;

  <bb 47>:
  # __j$_M_node_163 = PHI <__j$_M_node_51(63), __j$_M_node_12(39)>
  # DEBUG this => &__j
  # DEBUG __x => __j$_M_node_163
  # DEBUG __j$_M_node => __j$_M_node_163
  _73 = MEM[(struct _Rb_tree_node_base * *)this_3(D) + 24B];
  # DEBUG D#73 => this_3(D)
  # DEBUG this => D#73
  # DEBUG this => NULL
  # DEBUG __x => _73
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (_73 == __j$_M_node_163)
    goto <bb 75>;
  else
    goto <bb 48>;

  <bb 48>:
  # DEBUG this => &__j
  __j$_M_node_75 = std::_Rb_tree_decrement (__j$_M_node_163);
  # DEBUG __j$_M_node => __j$_M_node_75
  pretmp_4 = MEM[(const int &)__j$_M_node_75 + 32];

  <bb 49>:
  # __j$_M_node_76 = PHI <__j$_M_node_51(63), __j$_M_node_75(48)>
  # __j$_M_node_153 = PHI <__j$_M_node_51(63), __j$_M_node_163(48)>
  # prephitmp_5 = PHI <_54(63), pretmp_4(48)>

  <bb 69>:
  # DEBUG __j$_M_node => __j$_M_node_76
  # DEBUG __x => __j$_M_node_76
  # DEBUG __x => __j$_M_node_76
  # DEBUG this => __j$_M_node_76
  # DEBUG D#346 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_76]._M_value_field
  # DEBUG __r => D#346
  # DEBUG __x => D#346
  # DEBUG this => D#128
  # DEBUG D#353 => &MEM[(const struct pair &)__j$_M_node_76 + 32].first
  # DEBUG D#355 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#355
  # DEBUG D#53 => D#353
  # DEBUG D#54 => D#1053
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (prephitmp_5 < _19)
    goto <bb 51>;
  else
    goto <bb 50>;

  <bb 50>:

  <bb 51>:
  # SR.1873_31 = PHI <__j$_M_node_76(50), 0B(69)>
  # SR.1874_41 = PHI <0B(50), __j$_M_node_153(69)>

  <bb 75>:
  # SR.1873_131 = PHI <SR.1873_31(51), 0B(47)>
  # SR.1874_130 = PHI <SR.1874_41(51), _73(47)>

  <bb 68>:
  # DEBUG D#354 => {CLOBBER}
  # DEBUG __j$_M_node => D#354

  <bb 52>:
  # __res_98 = PHI <0B(4), SR.1869_139(64), _21(17), 0B(19), __position$_M_node_129(20), SR.1871_133(66), 0B(35), SR.1873_131(68), _26(37)>
  # __res$8_97 = PHI <_14(4), SR.1870_134(64), _21(17), _22(19), __position$_M_node_129(20), SR.1872_132(66), _25(35), SR.1874_130(68), _26(37)>
  # DEBUG D#364 => {CLOBBER}
  # DEBUG __pos => D#364
  # DEBUG __res => __res_98
  # DEBUG __res$8 => __res$8_97
  # DEBUG __res$first => __res_98
  # DEBUG __res$second => __res$8_97
  if (__res$8_97 != 0B)
    goto <bb 53>;
  else
    goto <bb 57>;

  <bb 53>:
  # DEBUG D#835 => D#840
  # DEBUG this => this_3(D)
  # DEBUG __x => __res_98
  # DEBUG __p => __res$8_97
  # DEBUG __v => __v_1(D)
  # DEBUG __node_gen => D#835
  # DEBUG D#834 => D#835
  # DEBUG this => this_3(D)
  _61 = __j$_M_node_12 == __res$8_97;
  _79 = __res_98 != 0B;
  _78 = _61 | _79;
  if (_78 != 0)
    goto <bb 56>;
  else
    goto <bb 54>;

  <bb 54>:
  pretmp_160 = MEM[(const int &)__v_1(D)];
  pretmp_11 = MEM[(const int &)__res$8_97 + 32];

  <bb 55>:
  # __res$8_152 = PHI <__res$8_97(54), __position$_M_node_129(38)>
  # prephitmp_94 = PHI <pretmp_160(54), _19(38)>
  # prephitmp_48 = PHI <pretmp_11(54), _20(38)>

  <bb 72>:
  # DEBUG D#835 => D#840
  # DEBUG this => this_3(D)
  # DEBUG __x => NULL
  # DEBUG __p => __res$8_152
  # DEBUG __v => __v_1(D)
  # DEBUG __node_gen => D#835
  # DEBUG D#834 => D#835
  # DEBUG this => this_3(D)
  # DEBUG __x => __res$8_152
  # DEBUG __x => __res$8_152
  # DEBUG this => __res$8_152
  # DEBUG D#346 => &MEM[(const struct _Rb_tree_node *)__res$8_152]._M_value_field
  # DEBUG __r => D#346
  # DEBUG __x => D#346
  # DEBUG this => D#128
  # DEBUG D#832 => &MEM[(const struct pair &)__res$8_152 + 32].first
  # DEBUG __x => __v_1(D)
  # DEBUG this => D#128
  # DEBUG D#833 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#833
  # DEBUG D#54 => D#832
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  __insert_left_82 = prephitmp_48 > prephitmp_94;
  pretmp_167 = (int) __insert_left_82;

  <bb 56>:
  # __res$8_166 = PHI <__res$8_152(72), __res$8_97(53)>
  # prephitmp_168 = PHI <pretmp_167(72), 1(53)>
  # DEBUG __insert_left => NULL
  # DEBUG D#831 => D#834
  # DEBUG __arg => __v_1(D)
  # DEBUG this => D#831
  # DEBUG D#830 => D#831
  # DEBUG D#829 => D#830->_M_t
  # DEBUG D#828 => D#829
  # DEBUG __x => __v_1(D)
  # DEBUG this => D#828
  # DEBUG D#827 => D#828
  # DEBUG D#826 => D#828
  # DEBUG D#825 => D#826
  # DEBUG this => D#825
  # DEBUG D#824 => D#825
  # DEBUG this => D#824
  # DEBUG __n => 1
  # DEBUG __a => D#823
  # DEBUG D#822 => D#823
  # DEBUG D#820 => D#822
  # DEBUG D#821 => 0B
  # DEBUG __n => 1
  # DEBUG this => D#820
  # DEBUG D.85455 => D#821
  # DEBUG D#819 => D#820
  # DEBUG D#818 => D#819
  # DEBUG this => D#818
  _85 = operator new (40);
  # DEBUG __tmp => _85
  # DEBUG D#609 => D#827
  # DEBUG __node => _85
  # DEBUG __x => __v_1(D)
  # DEBUG this => D#609
  # DEBUG D#608 => D#609
  # DEBUG this => _85
  # DEBUG D#1054 => &_85->_M_value_field
  # DEBUG __r => D#1054
  # DEBUG D#453 => D#608
  # DEBUG this => D#453
  # DEBUG D#452 => D#453
  # DEBUG this => D#452
  # DEBUG this => NULL
  # DEBUG D.76846 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1054
  # DEBUG __val => __v_1(D)
  # DEBUG this => D#607
  # DEBUG D#20 => 8
  # DEBUG __p => D#1054
  # DEBUG D.79307 => D#20
  MEM[(struct pair *)_85 + 32B] = *__v_1(D);
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG __z => _85
  std::_Rb_tree_insert_and_rebalance (prephitmp_168, _85, __res$8_166, __j$_M_node_12);
  _90 = this_3(D)->_M_impl._M_node_count;
  _91 = _90 + 1;
  this_3(D)->_M_impl._M_node_count = _91;
  # DEBUG this => NULL
  # DEBUG __x => _85
  MEM[(struct _Rb_tree_iterator *)&D.85236] = _85;
  goto <bb 58>;

  <bb 57>:
  # __res_147 = PHI <__res_98(52), __position$_M_node_129(34), 0B(38)>

  <bb 71>:
  # DEBUG D#364 => {CLOBBER}
  # DEBUG __pos => D#364
  # DEBUG __res => __res_147
  # DEBUG __res$8 => NULL
  # DEBUG __res$first => __res_147
  # DEBUG __res$second => NULL
  # DEBUG this => NULL
  # DEBUG __x => __res_147
  MEM[(struct _Rb_tree_iterator *)&D.85236] = __res_147;

  <bb 58>:

  <bb 70>:
  # DEBUG D#838 => {CLOBBER}
  # DEBUG __res$first => D#838
  # DEBUG D#839 => {CLOBBER}
  # DEBUG __res$second => D#839
  return D.85236;

  <bb 59>:
  # DEBUG this => this_3(D)
  # DEBUG __k => D#1053
  _8 = MEM[(struct _Rb_tree_node_base * *)this_3(D) + 16B];
  # DEBUG D#41 => this_3(D)
  # DEBUG this => D#41
  # DEBUG __x => NULL
  # DEBUG this => this_3(D)
  # DEBUG __y => NULL
  # DEBUG __comp => 1
  # DEBUG __comp => 1
  # DEBUG __y => __j$_M_node_12
  # DEBUG __x => _8
  if (_8 == 0B)
    goto <bb 11>;
  else
    goto <bb 60>;

  <bb 60>:
  pretmp_120 = MEM[(const int &)__v_1(D)];
  goto <bb 7>;

}



;; Function void min_anynet(const Router*, const Flit*, int, OutputSet*, bool) (_Z10min_anynetPK6RouterPK4FlitiP9OutputSetb, funcdef_no=2500, decl_uid=47495, cgraph_uid=622, symbol_order=624)

Trying loop 2 as candidate
loop 2 is innermost
loop is not parallel according to graphite
Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
void min_anynet(const Router*, const Flit*, int, OutputSet*, bool) (const struct Router * r, const struct Flit * f, int in_channel, struct OutputSet * outputs, bool inject)
{
  struct value_type D.85517;
  struct _Rb_tree_node * __y;
  struct iterator D.85516;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1706;
  mapped_type & D.85513;
  const struct _Rb_tree_node * __y;
  int vcEnd;
  int vcBegin;
  static const char __PRETTY_FUNCTION__[67] = "void min_anynet(const Router*, const Flit*, int, OutputSet*, bool)";
  int out_port;
  struct map * global_routing_table.140_8;
  long unsigned int _11;
  long unsigned int _12;
  struct map * _13;
  int gNumVCs.141_21;
  FlitType _23;
  const int _35;
  const int _36;
  const int _42;
  const int _50;
  const int pretmp_51;
  const int _56;
  struct _Rep_type * _59;

  <bb 2>:
  # DEBUG out_port => -1
  if (inject_5(D) != 0)
    goto <bb 22>;
  else
    goto <bb 3>;

  <bb 3>:
  # DEBUG D#847 => &f_7(D)->dest
  global_routing_table.140_8 = global_routing_table;
  _35 = MEM[(int *)r_9(D) + 96B];
  # DEBUG D#30 => r_9(D)
  # DEBUG this => D#30
  _11 = (long unsigned int) _35;
  _12 = _11 * 48;
  _13 = global_routing_table.140_8 + _12;
  # DEBUG this => _13
  # DEBUG __x => D#847
  # DEBUG D#350 => &MEM[(const struct map *)_13]._M_t
  # DEBUG this => D#350
  __i$_M_node_16 = &MEM[(const struct _Rb_tree *)_13]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_16
  # DEBUG D#351 => &MEM[(const struct map *)_13]._M_t
  # DEBUG this => D#351
  # DEBUG __k => D#847
  # DEBUG this => D#351
  __i$_M_node_14 = MEM[(struct _Rb_tree_node_base * *)_13 + 16B];
  # DEBUG D#90 => D#351
  # DEBUG this => D#90
  # DEBUG D#340 => D#351
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => D#847
  # DEBUG __y => __i$_M_node_16
  # DEBUG __x => __i$_M_node_14
  if (__i$_M_node_14 == 0B)
    goto <bb 32>;
  else
    goto <bb 4>;

  <bb 4>:
  pretmp_51 = MEM[(const int &)f_7(D) + 44];
  goto <bb 7>;

  <bb 5>:
  # __i$_M_node_64 = PHI <__i$_M_node_39(9), __i$_M_node_38(8)>
  # __i$_M_node_63 = PHI <__i$_M_node_48(9), __i$_M_node_44(8)>
  # DEBUG __y => __i$_M_node_63
  # DEBUG __x => __i$_M_node_64
  if (__i$_M_node_64 == 0B)
    goto <bb 10>;
  else
    goto <bb 6>;

  <bb 6>:

  <bb 7>:
  # __i$_M_node_44 = PHI <__i$_M_node_14(4), __i$_M_node_64(6)>
  # __i$_M_node_48 = PHI <__i$_M_node_16(4), __i$_M_node_63(6)>
  # DEBUG __y => __i$_M_node_48
  # DEBUG __x => __i$_M_node_44
  # DEBUG __x => __i$_M_node_44
  # DEBUG __x => __i$_M_node_44
  # DEBUG this => __i$_M_node_44
  # DEBUG D#336 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_44]._M_value_field
  # DEBUG __r => D#336
  # DEBUG __x => D#336
  # DEBUG this => D#128
  # DEBUG D#337 => &MEM[(const struct pair &)__i$_M_node_44 + 32].first
  # DEBUG D#338 => &D#339->_M_impl._M_key_compare
  # DEBUG D#52 => D#338
  _36 = MEM[(const int &)__i$_M_node_44 + 32];
  # DEBUG D#53 => D#337
  # DEBUG D#54 => D#847
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_36 >= pretmp_51)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  # DEBUG __y => __i$_M_node_44
  __i$_M_node_38 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_44 + 16B];
  # DEBUG D#126 => __i$_M_node_44
  # DEBUG __x => D#126
  # DEBUG __x => NULL
  goto <bb 5>;

  <bb 9>:
  __i$_M_node_39 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_44 + 24B];
  # DEBUG D#127 => __i$_M_node_44
  # DEBUG __x => D#127
  # DEBUG __x => NULL
  goto <bb 5>;

  <bb 10>:
  # __i$_M_node_58 = PHI <__i$_M_node_63(5)>

  <bb 35>:
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_58
  # DEBUG __j$_M_node => __i$_M_node_58
  # DEBUG this => D#351
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_16
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (__i$_M_node_16 == __i$_M_node_58)
    goto <bb 32>;
  else
    goto <bb 11>;

  <bb 11>:
  # DEBUG __x => __i$_M_node_58
  # DEBUG __x => __i$_M_node_58
  # DEBUG this => __i$_M_node_58
  # DEBUG D#346 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_58]._M_value_field
  # DEBUG __r => D#346
  # DEBUG __x => D#346
  # DEBUG this => D#128
  # DEBUG D#347 => &MEM[(const struct pair &)__i$_M_node_58 + 32].first
  # DEBUG D#349 => &MEM[(const struct _Rb_tree *)D#351]._M_impl._M_key_compare
  # DEBUG D#52 => D#349
  # DEBUG D#53 => D#847
  _42 = MEM[(const int &)__i$_M_node_58 + 32];
  # DEBUG D#54 => D#347
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  # DEBUG D#348 => {CLOBBER}
  # DEBUG __j$_M_node => D#348
  # DEBUG this => NULL
  # DEBUG __x => NULL
  if (_42 > pretmp_51)
    goto <bb 32>;
  else
    goto <bb 12>;

  <bb 12>:
  # DEBUG __y => __i$_M_node_16
  # DEBUG __x => __i$_M_node_14
  if (__i$_M_node_14 == 0B)
    goto <bb 33>;
  else
    goto <bb 15>;

  <bb 13>:
  # __i$_M_node_45 = PHI <__i$_M_node_52(17), __i$_M_node_53(18)>
  # __i$_M_node_46 = PHI <__i$_M_node_18(17), __i$_M_node_77(18)>
  # DEBUG __y => __i$_M_node_46
  # DEBUG __x => __i$_M_node_45
  if (__i$_M_node_45 == 0B)
    goto <bb 19>;
  else
    goto <bb 14>;

  <bb 14>:
  goto <bb 16>;

  <bb 15>:

  <bb 16>:
  # __i$_M_node_18 = PHI <__i$_M_node_14(15), __i$_M_node_45(14)>
  # __i$_M_node_77 = PHI <__i$_M_node_16(15), __i$_M_node_46(14)>
  # DEBUG __y => __i$_M_node_77
  # DEBUG __x => __i$_M_node_18
  # DEBUG __x => __i$_M_node_18
  # DEBUG __x => __i$_M_node_18
  # DEBUG this => __i$_M_node_18
  # DEBUG D#336 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_18]._M_value_field
  # DEBUG __r => D#336
  # DEBUG __x => D#336
  # DEBUG this => D#128
  # DEBUG D#341 => &MEM[(const struct pair &)__i$_M_node_18 + 32].first
  # DEBUG D#342 => &D#343->_M_impl._M_key_compare
  # DEBUG D#52 => D#342
  _50 = MEM[(const int &)__i$_M_node_18 + 32];
  # DEBUG D#53 => D#341
  # DEBUG D#54 => D#1057
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_50 >= pretmp_51)
    goto <bb 17>;
  else
    goto <bb 18>;

  <bb 17>:
  # DEBUG __y => __i$_M_node_18
  __i$_M_node_52 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_18 + 16B];
  # DEBUG D#64 => __i$_M_node_18
  # DEBUG __x => D#64
  # DEBUG __x => NULL
  goto <bb 13>;

  <bb 18>:
  __i$_M_node_53 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_18 + 24B];
  # DEBUG D#63 => __i$_M_node_18
  # DEBUG __x => D#63
  # DEBUG __x => NULL
  goto <bb 13>;

  <bb 19>:
  # __i$_M_node_43 = PHI <__i$_M_node_46(13)>

  <bb 34>:
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_43
  # DEBUG __i$_M_node => __i$_M_node_43
  # DEBUG this => _13
  # DEBUG D#75 => &_13->_M_t
  # DEBUG this => D#75
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_16
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_16 == __i$_M_node_43)
    goto <bb 33>;
  else
    goto <bb 20>;

  <bb 20>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_43
  # DEBUG D#842 => &MEM[(struct _Rb_tree_node *)__i$_M_node_43]._M_value_field
  # DEBUG __r => D#842
  # DEBUG D#843 => &MEM[(struct pair &)__i$_M_node_43 + 32].first
  # DEBUG D#94 => _13
  # DEBUG this => D#94
  # DEBUG D#93 => D#94
  # DEBUG D#92 => &D#93->_M_t
  # DEBUG D#91 => D#92
  # DEBUG this => D#91
  # DEBUG D#53 => D#1057
  _56 = MEM[(const int &)__i$_M_node_43 + 32];
  # DEBUG D#54 => D#843
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (pretmp_51 < _56)
    goto <bb 33>;
  else
    goto <bb 21>;

  <bb 21>:
  # __i$_M_node_61 = PHI <__i$_M_node_43(20), __i$_M_node_60(33)>

  <bb 36>:
  # DEBUG __i$_M_node => __i$_M_node_61
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_61
  # DEBUG D#844 => &MEM[(struct _Rb_tree_node *)__i$_M_node_61]._M_value_field
  # DEBUG __r => D#844
  # DEBUG D#846 => {CLOBBER}
  # DEBUG __i$_M_node => D#846
  out_port_19 = MEM[(mapped_type &)__i$_M_node_61 + 36];
  # DEBUG out_port => out_port_19

  <bb 22>:
  # out_port_1 = PHI <-1(2), out_port_19(36)>

  <bb 37>:
  # DEBUG out_port => out_port_1
  # DEBUG vcBegin => 0
  # DEBUG D#1058 => gNumVCs
  # DEBUG vcEnd => D#1058 + -1
  _23 = f_7(D)->type;
  if (_23 == 0)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 23>:
  vcBegin_24 = gReadReqBeginVC;
  # DEBUG vcBegin => vcBegin_24
  vcEnd_25 = gReadReqEndVC;
  # DEBUG vcEnd => vcEnd_25
  goto <bb 31>;

  <bb 24>:
  if (_23 == 2)
    goto <bb 25>;
  else
    goto <bb 26>;

  <bb 25>:
  vcBegin_26 = gWriteReqBeginVC;
  # DEBUG vcBegin => vcBegin_26
  vcEnd_27 = gWriteReqEndVC;
  # DEBUG vcEnd => vcEnd_27
  goto <bb 31>;

  <bb 26>:
  if (_23 == 1)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  vcBegin_28 = gReadReplyBeginVC;
  # DEBUG vcBegin => vcBegin_28
  vcEnd_29 = gReadReplyEndVC;
  # DEBUG vcEnd => vcEnd_29
  goto <bb 31>;

  <bb 28>:
  gNumVCs.141_21 = gNumVCs;
  if (_23 == 3)
    goto <bb 30>;
  else
    goto <bb 29>;

  <bb 29>:
  vcEnd_22 = gNumVCs.141_21 + -1;
  goto <bb 31>;

  <bb 30>:
  vcBegin_30 = gWriteReplyBeginVC;
  # DEBUG vcBegin => vcBegin_30
  vcEnd_31 = gWriteReplyEndVC;
  # DEBUG vcEnd => vcEnd_31

  <bb 31>:
  # vcBegin_2 = PHI <vcBegin_24(23), vcBegin_26(25), vcBegin_28(27), 0(29), vcBegin_30(30)>
  # vcEnd_3 = PHI <vcEnd_25(23), vcEnd_27(25), vcEnd_29(27), vcEnd_22(29), vcEnd_31(30)>

  <bb 38>:
  # DEBUG vcEnd => vcEnd_3
  # DEBUG vcBegin => vcBegin_2
  OutputSet::Clear (outputs_32(D));
  OutputSet::AddRange (outputs_32(D), out_port_1, vcBegin_2, vcEnd_3, 0);
  return;

  <bb 32>:
  # DEBUG D#348 => {CLOBBER}
  # DEBUG __j$_M_node => D#348
  # DEBUG this => NULL
  # DEBUG __x => NULL
  __assert_fail ("global_routing_table[r->GetID()].count(f->dest)!=0", "networks/anynet.cpp", 218, &__PRETTY_FUNCTION__);

  <bb 33>:
  # __i$_M_node_57 = PHI <__i$_M_node_43(20), __i$_M_node_43(34), __i$_M_node_16(12)>
  # DEBUG this => &D.85517
  # DEBUG __a => D#1057
  # DEBUG __b => NULL
  D.85517.first = pretmp_51;
  D.85517.second = 0;
  # DEBUG this => _13
  # DEBUG __position$_M_node => __i$_M_node_57
  # DEBUG __x => &D.85517
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _59 = &_13->_M_t;
  # DEBUG this => _59
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_57;
  # DEBUG __x => &D.85517
  # DEBUG this => &__an
  # DEBUG __t => _59
  # DEBUG __an$_M_t => _59
  # DEBUG D#841 => &__an
  D.85516 = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_insert_unique_INS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_ERKS2_RT_.isra.263.constprop (_59, __pos, &D.85517);
  __i$_M_node_60 = MEM[(struct _Rb_tree_iterator *)&D.85516];
  # DEBUG __i$_M_node => __i$_M_node_60
  D.85517 ={v} {CLOBBER};
  goto <bb 21>;

}



;; Function std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_insert_unique_(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator, const _Val&, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_Alloc_node; _Key = int; _Val = std::pair<const int, std::pair<int, int> >; _KeyOfValue = std::_Select1st<std::pair<const int, std::pair<int, int> > >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, std::pair<int, int> > >] (_ZNSt8_Rb_treeIiSt4pairIKiS0_IiiEESt10_Select1stIS3_ESt4lessIiESaIS3_EE17_M_insert_unique_INS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_ERKS3_RT_.isra.223.constprop.275, funcdef_no=4070, decl_uid=85213, cgraph_uid=4, symbol_order=4045)

Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is innermost
loop is not parallel according to graphite
std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_insert_unique_(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator, const _Val&, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_Alloc_node; _Key = int; _Val = std::pair<const int, std::pair<int, int> >; _KeyOfValue = std::_Select1st<std::pair<const int, std::pair<int, int> > >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, std::pair<int, int> > >] (struct _Rb_tree * const this, struct const_iterator __position, const struct pair & __v)
{
  struct _Rb_tree_node_base * SR.1891;
  struct _Rb_tree_node_base * SR.1890;
  struct _Rb_tree_node_base * SR.1889;
  struct _Rb_tree_node_base * SR.1888;
  struct _Rb_tree_node_base * SR.1887;
  struct _Rb_tree_node_base * SR.1886;
  struct _Rb_tree_node_base * SR.1885;
  struct _Rb_tree_node_base * SR.1884;
  struct _Rb_tree_node_base * SR.1883;
  const struct _Rb_tree_node_base * const __position$_M_node;
  struct _Rb_tree_node_base * __res$8;
  struct _Rb_tree_node_base * __res;
  bool __insert_left;
  struct iterator D.85675;
  struct pair D.85648;
  bool __comp;
  struct _Rb_tree_node_base * const __j$_M_node;
  struct pair D.85621;
  bool __comp;
  struct _Rb_tree_node_base * const __j$_M_node;
  struct pair D.85594;
  bool __comp;
  struct _Rb_tree_node_base * const __j$_M_node;
  struct pair D.85567;
  struct const_iterator __position;
  struct _Rb_tree_node_base * __res$second;
  struct _Rb_tree_node_base * __res$first;
  struct pair __res;
  struct iterator D.85260;
  const int pretmp_4;
  const int prephitmp_5;
  struct _Rb_tree_node_base * _8;
  const int pretmp_11;
  const size_type _13;
  struct _Rb_tree_node_base * _14;
  const int _15;
  const int _16;
  const int pretmp_18;
  const int _19;
  const int _20;
  struct _Rb_tree_node_base * _21;
  struct _Rb_tree_node_base * _22;
  const int _23;
  struct _Rb_tree_node_base * _24;
  struct _Rb_tree_node_base * _25;
  struct _Rb_tree_node_base * _26;
  const int _27;
  struct _Rb_tree_node_base * _28;
  struct _Rb_tree_node_base * const _29;
  const int _32;
  struct _Rb_tree_node_base * _34;
  struct _Rb_tree_node_base * _35;
  struct _Rb_tree_node_base * _37;
  struct _Rb_tree_node_base * const _43;
  struct _Rb_tree_node_base * _46;
  const int prephitmp_48;
  const int _50;
  struct _Rb_tree_node_base * _52;
  struct _Rb_tree_node_base * _53;
  const int _54;
  struct _Rb_tree_node_base * const _55;
  bool _61;
  const int pretmp_62;
  const int _63;
  struct _Rb_tree_node_base * _64;
  const int _68;
  const int _69;
  struct _Rb_tree_node_base * _70;
  struct _Rb_tree_node_base * _71;
  struct _Rb_tree_node_base * _73;
  bool _78;
  bool _79;
  struct _Rb_tree_node * _85;
  long unsigned int _90;
  long unsigned int _91;
  const int prephitmp_94;
  const int prephitmp_104;
  const int prephitmp_118;
  const int pretmp_120;
  const int pretmp_127;
  const int prephitmp_128;
  const int pretmp_160;
  int pretmp_167;
  int prephitmp_168;

  <bb 2>:
  # DEBUG __node_gen s=> __node_gen
  # DEBUG D#679 s=> __node_gen
  # DEBUG __x => __v_1(D)
  # DEBUG this => D#133
  # DEBUG D#1059 => &__v_1(D)->first
  # DEBUG this => this_3(D)
  __position$_M_node_129 = MEM[(struct _Rb_tree_const_iterator *)&__position];
  # DEBUG __position$_M_node => __position$_M_node_129
  # DEBUG __k => D#1059
  # DEBUG this => &__position
  # DEBUG this => NULL
  # DEBUG __x => __position$_M_node_129
  # DEBUG __pos => __position$_M_node_129
  # DEBUG this => this_3(D)
  __j$_M_node_12 = &this_3(D)->_M_impl._M_header;
  if (__j$_M_node_12 == __position$_M_node_129)
    goto <bb 3>;
  else
    goto <bb 16>;

  <bb 3>:
  _13 = MEM[(long unsigned int *)this_3(D) + 40B];
  # DEBUG D#46 => this_3(D)
  # DEBUG this => D#46
  if (_13 != 0)
    goto <bb 4>;
  else
    goto <bb 59>;

  <bb 4>:
  # DEBUG this => this_3(D)
  _14 = MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32];
  # DEBUG __x => _14
  # DEBUG __x => _14
  # DEBUG this => _14
  # DEBUG D#401 => &MEM[(const struct _Rb_tree_node *)_14]._M_value_field
  # DEBUG __r => D#401
  # DEBUG __x => D#401
  # DEBUG this => D#133
  # DEBUG D#407 => &MEM[(const struct pair &)_14 + 32].first
  # DEBUG D#417 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#417
  _15 = MEM[(const int &)_14 + 32];
  # DEBUG D#53 => D#407
  _16 = MEM[(const int &)__v_1(D)];
  # DEBUG D#54 => D#1059
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_15 < _16)
    goto <bb 52>;
  else
    goto <bb 59>;

  <bb 5>:
  # _43 = PHI <_34(8), _35(9)>
  # DEBUG __comp => D#1061 < _32
  # DEBUG __y => __j$_M_node_143
  # DEBUG __x => _43
  if (_43 == 0B)
    goto <bb 10>;
  else
    goto <bb 6>;

  <bb 6>:

  <bb 7>:
  # __j$_M_node_143 = PHI <_8(60), _43(6)>
  # DEBUG __comp => 1
  # DEBUG __x => __j$_M_node_143
  # DEBUG __y => __j$_M_node_143
  # DEBUG __x => __j$_M_node_143
  # DEBUG __x => __j$_M_node_143
  # DEBUG this => __j$_M_node_143
  # DEBUG D#391 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_143]._M_value_field
  # DEBUG __r => D#391
  # DEBUG __x => D#391
  # DEBUG this => D#133
  # DEBUG D#402 => &MEM[(const struct pair &)__j$_M_node_143 + 32].first
  # DEBUG D#406 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#406
  # DEBUG D#1061 => MEM[(const int &)__v_1(D)]
  # DEBUG D#53 => D#1059
  _32 = MEM[(const int &)__j$_M_node_143 + 32];
  # DEBUG D#54 => D#402
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  # DEBUG __comp => NULL
  if (_32 > pretmp_120)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  _34 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_143 + 16B];
  # DEBUG D#108 => __j$_M_node_143
  # DEBUG __x => D#108
  goto <bb 5>;

  <bb 9>:
  _35 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_143 + 24B];
  # DEBUG D#107 => __j$_M_node_143
  # DEBUG __x => D#107
  goto <bb 5>;

  <bb 10>:
  # _69 = PHI <_32(5)>
  # __j$_M_node_33 = PHI <__j$_M_node_143(5)>

  <bb 61>:
  # DEBUG this => &__j
  # DEBUG __x => __j$_M_node_33
  # DEBUG __j$_M_node => __j$_M_node_33
  if (_69 > pretmp_120)
    goto <bb 11>;
  else
    goto <bb 13>;

  <bb 11>:
  # __j$_M_node_178 = PHI <__j$_M_node_33(61), __j$_M_node_12(59)>
  # DEBUG this => &__j
  # DEBUG __x => __j$_M_node_178
  # DEBUG __j$_M_node => __j$_M_node_178
  _37 = MEM[(struct _Rb_tree_node_base * *)this_3(D) + 24B];
  # DEBUG D#76 => this_3(D)
  # DEBUG this => D#76
  # DEBUG this => NULL
  # DEBUG __x => _37
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (_37 == __j$_M_node_178)
    goto <bb 73>;
  else
    goto <bb 12>;

  <bb 12>:
  # DEBUG this => &__j
  __j$_M_node_39 = std::_Rb_tree_decrement (__j$_M_node_178);
  # DEBUG __j$_M_node => __j$_M_node_39
  pretmp_18 = MEM[(const int &)__v_1(D)];
  pretmp_127 = MEM[(const int &)__j$_M_node_39 + 32];

  <bb 13>:
  # __j$_M_node_40 = PHI <__j$_M_node_33(61), __j$_M_node_39(12)>
  # __j$_M_node_177 = PHI <__j$_M_node_33(61), __j$_M_node_178(12)>
  # prephitmp_128 = PHI <pretmp_120(61), pretmp_18(12)>
  # prephitmp_104 = PHI <_69(61), pretmp_127(12)>

  <bb 65>:
  # DEBUG __j$_M_node => __j$_M_node_40
  # DEBUG __x => __j$_M_node_40
  # DEBUG __x => __j$_M_node_40
  # DEBUG this => __j$_M_node_40
  # DEBUG D#401 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_40]._M_value_field
  # DEBUG __r => D#401
  # DEBUG __x => D#401
  # DEBUG this => D#133
  # DEBUG D#403 => &MEM[(const struct pair &)__j$_M_node_40 + 32].first
  # DEBUG D#405 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#405
  # DEBUG D#53 => D#403
  # DEBUG D#54 => D#1059
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (prephitmp_104 < prephitmp_128)
    goto <bb 15>;
  else
    goto <bb 14>;

  <bb 14>:

  <bb 15>:
  # SR.1885_88 = PHI <__j$_M_node_40(14), 0B(65)>
  # SR.1886_117 = PHI <0B(14), __j$_M_node_177(65)>

  <bb 73>:
  # SR.1885_139 = PHI <SR.1885_88(15), 0B(11)>
  # SR.1886_134 = PHI <SR.1886_117(15), _37(11)>

  <bb 64>:
  # DEBUG D#404 => {CLOBBER}
  # DEBUG __j$_M_node => D#404
  goto <bb 52>;

  <bb 16>:
  # DEBUG __x => __position$_M_node_129
  # DEBUG __x => __position$_M_node_129
  # DEBUG this => __position$_M_node_129
  # DEBUG D#401 => &MEM[(const struct _Rb_tree_node *)__position$_M_node_129]._M_value_field
  # DEBUG __r => D#401
  # DEBUG __x => D#401
  # DEBUG this => D#133
  # DEBUG D#408 => &MEM[(const struct pair &)__position$_M_node_129 + 32].first
  # DEBUG D#419 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#419
  _19 = MEM[(const int &)__v_1(D)];
  # DEBUG D#53 => D#1059
  _20 = MEM[(const int &)__position$_M_node_129 + 32];
  # DEBUG D#54 => D#408
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_19 < _20)
    goto <bb 17>;
  else
    goto <bb 34>;

  <bb 17>:
  # DEBUG __before => __position$_M_node_129
  # DEBUG this => this_3(D)
  _21 = MEM[(struct _Rb_tree_node_base * &)this_3(D) + 24];
  if (_21 == __position$_M_node_129)
    goto <bb 52>;
  else
    goto <bb 18>;

  <bb 18>:
  # DEBUG this => &__before
  _22 = std::_Rb_tree_decrement (__position$_M_node_129);
  # DEBUG __before => _22
  # DEBUG __x => _22
  # DEBUG __x => _22
  # DEBUG this => _22
  # DEBUG D#401 => &MEM[(const struct _Rb_tree_node *)_22]._M_value_field
  # DEBUG __r => D#401
  # DEBUG __x => D#401
  # DEBUG this => D#133
  # DEBUG D#409 => &MEM[(const struct pair &)_22 + 32].first
  # DEBUG D#416 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#416
  _23 = MEM[(const int &)_22 + 32];
  # DEBUG D#53 => D#409
  # DEBUG D#54 => D#1059
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_19 > _23)
    goto <bb 19>;
  else
    goto <bb 21>;

  <bb 19>:
  _24 = MEM[(struct _Rb_tree_node_base * *)_22 + 24B];
  # DEBUG D#107 => _22
  # DEBUG __x => D#107
  if (_24 == 0B)
    goto <bb 52>;
  else
    goto <bb 20>;

  <bb 20>:
  goto <bb 52>;

  <bb 21>:
  # DEBUG this => this_3(D)
  # DEBUG __k => D#1059
  _46 = MEM[(struct _Rb_tree_node_base * *)this_3(D) + 16B];
  # DEBUG D#58 => this_3(D)
  # DEBUG this => D#58
  # DEBUG __x => NULL
  # DEBUG this => this_3(D)
  # DEBUG __y => NULL
  # DEBUG __comp => 1
  # DEBUG __comp => 1
  # DEBUG __y => __j$_M_node_12
  # DEBUG __x => _46
  if (_46 == 0B)
    goto <bb 29>;
  else
    goto <bb 24>;

  <bb 22>:
  # _29 = PHI <_52(26), _53(27)>
  # DEBUG __comp => _19 < _50
  # DEBUG __y => __j$_M_node_67
  # DEBUG __x => _29
  if (_29 == 0B)
    goto <bb 28>;
  else
    goto <bb 23>;

  <bb 23>:
  goto <bb 25>;

  <bb 24>:

  <bb 25>:
  # __j$_M_node_67 = PHI <_46(24), _29(23)>
  # DEBUG __comp => 1
  # DEBUG __x => __j$_M_node_67
  # DEBUG __y => __j$_M_node_67
  # DEBUG __x => __j$_M_node_67
  # DEBUG __x => __j$_M_node_67
  # DEBUG this => __j$_M_node_67
  # DEBUG D#391 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_67]._M_value_field
  # DEBUG __r => D#391
  # DEBUG __x => D#391
  # DEBUG this => D#133
  # DEBUG D#402 => &MEM[(const struct pair &)__j$_M_node_67 + 32].first
  # DEBUG D#406 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#406
  # DEBUG D#53 => D#1059
  _50 = MEM[(const int &)__j$_M_node_67 + 32];
  # DEBUG D#54 => D#402
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  # DEBUG __comp => NULL
  if (_19 < _50)
    goto <bb 26>;
  else
    goto <bb 27>;

  <bb 26>:
  _52 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_67 + 16B];
  # DEBUG D#108 => __j$_M_node_67
  # DEBUG __x => D#108
  goto <bb 22>;

  <bb 27>:
  _53 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_67 + 24B];
  # DEBUG D#107 => __j$_M_node_67
  # DEBUG __x => D#107
  goto <bb 22>;

  <bb 28>:
  # _63 = PHI <_50(22)>
  # __j$_M_node_56 = PHI <__j$_M_node_67(22)>

  <bb 62>:
  # DEBUG this => &__j
  # DEBUG __x => __j$_M_node_56
  # DEBUG __j$_M_node => __j$_M_node_56
  if (_19 < _63)
    goto <bb 29>;
  else
    goto <bb 31>;

  <bb 29>:
  # __j$_M_node_175 = PHI <__j$_M_node_56(62), __j$_M_node_12(21)>
  # DEBUG this => &__j
  # DEBUG __x => __j$_M_node_175
  # DEBUG __j$_M_node => __j$_M_node_175
  # DEBUG D#76 => this_3(D)
  # DEBUG this => D#76
  # DEBUG this => NULL
  # DEBUG __x => _21
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (_21 == __j$_M_node_175)
    goto <bb 74>;
  else
    goto <bb 30>;

  <bb 30>:
  # DEBUG this => &__j
  __j$_M_node_57 = std::_Rb_tree_decrement (__j$_M_node_175);
  # DEBUG __j$_M_node => __j$_M_node_57
  pretmp_62 = MEM[(const int &)__j$_M_node_57 + 32];

  <bb 31>:
  # __j$_M_node_58 = PHI <__j$_M_node_56(62), __j$_M_node_57(30)>
  # __j$_M_node_179 = PHI <__j$_M_node_56(62), __j$_M_node_175(30)>
  # prephitmp_118 = PHI <_63(62), pretmp_62(30)>

  <bb 67>:
  # DEBUG __j$_M_node => __j$_M_node_58
  # DEBUG __x => __j$_M_node_58
  # DEBUG __x => __j$_M_node_58
  # DEBUG this => __j$_M_node_58
  # DEBUG D#401 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_58]._M_value_field
  # DEBUG __r => D#401
  # DEBUG __x => D#401
  # DEBUG this => D#133
  # DEBUG D#403 => &MEM[(const struct pair &)__j$_M_node_58 + 32].first
  # DEBUG D#405 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#405
  # DEBUG D#53 => D#403
  # DEBUG D#54 => D#1059
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_19 > prephitmp_118)
    goto <bb 33>;
  else
    goto <bb 32>;

  <bb 32>:

  <bb 33>:
  # SR.1887_103 = PHI <__j$_M_node_58(32), 0B(67)>
  # SR.1888_119 = PHI <0B(32), __j$_M_node_179(67)>

  <bb 74>:
  # SR.1887_133 = PHI <SR.1887_103(33), 0B(29)>
  # SR.1888_132 = PHI <SR.1888_119(33), _21(29)>

  <bb 66>:
  # DEBUG D#404 => {CLOBBER}
  # DEBUG __j$_M_node => D#404
  goto <bb 52>;

  <bb 34>:
  # DEBUG __x => __position$_M_node_129
  # DEBUG __x => __position$_M_node_129
  # DEBUG this => __position$_M_node_129
  # DEBUG D#401 => &MEM[(const struct _Rb_tree_node *)__position$_M_node_129]._M_value_field
  # DEBUG __r => D#401
  # DEBUG __x => D#401
  # DEBUG this => D#133
  # DEBUG D#410 => &MEM[(const struct pair &)__position$_M_node_129 + 32].first
  # DEBUG D#418 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#418
  # DEBUG D#53 => D#410
  # DEBUG D#54 => D#1059
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_19 > _20)
    goto <bb 35>;
  else
    goto <bb 57>;

  <bb 35>:
  # DEBUG __after => __position$_M_node_129
  # DEBUG this => this_3(D)
  _25 = MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32];
  if (_25 == __position$_M_node_129)
    goto <bb 52>;
  else
    goto <bb 36>;

  <bb 36>:
  # DEBUG this => &__after
  _26 = std::_Rb_tree_increment (__position$_M_node_129);
  # DEBUG __after => _26
  # DEBUG __x => _26
  # DEBUG __x => _26
  # DEBUG this => _26
  # DEBUG D#401 => &MEM[(const struct _Rb_tree_node *)_26]._M_value_field
  # DEBUG __r => D#401
  # DEBUG __x => D#401
  # DEBUG this => D#133
  # DEBUG D#411 => &MEM[(const struct pair &)_26 + 32].first
  # DEBUG D#415 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#415
  # DEBUG D#53 => D#1059
  _27 = MEM[(const int &)_26 + 32];
  # DEBUG D#54 => D#411
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_19 < _27)
    goto <bb 37>;
  else
    goto <bb 39>;

  <bb 37>:
  _28 = MEM[(struct _Rb_tree_node_base * *)__position$_M_node_129 + 24B];
  # DEBUG D#107 => __position$_M_node_129
  # DEBUG __x => D#107
  if (_28 == 0B)
    goto <bb 38>;
  else
    goto <bb 52>;

  <bb 38>:
  # DEBUG this => NULL
  # DEBUG __a => NULL
  # DEBUG __b => &__pos._M_node
  # DEBUG D#414 => {CLOBBER}
  # DEBUG __pos => D#414
  # DEBUG __res => 0B
  # DEBUG __res$8 => __position$_M_node_129
  # DEBUG __res$first => 0B
  # DEBUG __res$second => __position$_M_node_129
  if (__position$_M_node_129 != 0B)
    goto <bb 55>;
  else
    goto <bb 57>;

  <bb 39>:
  # DEBUG this => this_3(D)
  # DEBUG __k => D#1059
  _64 = MEM[(struct _Rb_tree_node_base * *)this_3(D) + 16B];
  # DEBUG D#58 => this_3(D)
  # DEBUG this => D#58
  # DEBUG __x => NULL
  # DEBUG this => this_3(D)
  # DEBUG __y => NULL
  # DEBUG __comp => 1
  # DEBUG __comp => 1
  # DEBUG __y => __j$_M_node_12
  # DEBUG __x => _64
  if (_64 == 0B)
    goto <bb 47>;
  else
    goto <bb 42>;

  <bb 40>:
  # _55 = PHI <_70(44), _71(45)>
  # DEBUG __comp => _19 < _68
  # DEBUG __y => __j$_M_node_95
  # DEBUG __x => _55
  if (_55 == 0B)
    goto <bb 46>;
  else
    goto <bb 41>;

  <bb 41>:
  goto <bb 43>;

  <bb 42>:

  <bb 43>:
  # __j$_M_node_95 = PHI <_64(42), _55(41)>
  # DEBUG __comp => 1
  # DEBUG __x => __j$_M_node_95
  # DEBUG __y => __j$_M_node_95
  # DEBUG __x => __j$_M_node_95
  # DEBUG __x => __j$_M_node_95
  # DEBUG this => __j$_M_node_95
  # DEBUG D#391 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_95]._M_value_field
  # DEBUG __r => D#391
  # DEBUG __x => D#391
  # DEBUG this => D#133
  # DEBUG D#402 => &MEM[(const struct pair &)__j$_M_node_95 + 32].first
  # DEBUG D#406 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#406
  # DEBUG D#53 => D#1059
  _68 = MEM[(const int &)__j$_M_node_95 + 32];
  # DEBUG D#54 => D#402
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  # DEBUG __comp => NULL
  if (_19 < _68)
    goto <bb 44>;
  else
    goto <bb 45>;

  <bb 44>:
  _70 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_95 + 16B];
  # DEBUG D#108 => __j$_M_node_95
  # DEBUG __x => D#108
  goto <bb 40>;

  <bb 45>:
  _71 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_95 + 24B];
  # DEBUG D#107 => __j$_M_node_95
  # DEBUG __x => D#107
  goto <bb 40>;

  <bb 46>:
  # _54 = PHI <_68(40)>
  # __j$_M_node_51 = PHI <__j$_M_node_95(40)>

  <bb 63>:
  # DEBUG this => &__j
  # DEBUG __x => __j$_M_node_51
  # DEBUG __j$_M_node => __j$_M_node_51
  if (_19 < _54)
    goto <bb 47>;
  else
    goto <bb 49>;

  <bb 47>:
  # __j$_M_node_163 = PHI <__j$_M_node_51(63), __j$_M_node_12(39)>
  # DEBUG this => &__j
  # DEBUG __x => __j$_M_node_163
  # DEBUG __j$_M_node => __j$_M_node_163
  _73 = MEM[(struct _Rb_tree_node_base * *)this_3(D) + 24B];
  # DEBUG D#76 => this_3(D)
  # DEBUG this => D#76
  # DEBUG this => NULL
  # DEBUG __x => _73
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (_73 == __j$_M_node_163)
    goto <bb 75>;
  else
    goto <bb 48>;

  <bb 48>:
  # DEBUG this => &__j
  __j$_M_node_75 = std::_Rb_tree_decrement (__j$_M_node_163);
  # DEBUG __j$_M_node => __j$_M_node_75
  pretmp_4 = MEM[(const int &)__j$_M_node_75 + 32];

  <bb 49>:
  # __j$_M_node_76 = PHI <__j$_M_node_51(63), __j$_M_node_75(48)>
  # __j$_M_node_153 = PHI <__j$_M_node_51(63), __j$_M_node_163(48)>
  # prephitmp_5 = PHI <_54(63), pretmp_4(48)>

  <bb 69>:
  # DEBUG __j$_M_node => __j$_M_node_76
  # DEBUG __x => __j$_M_node_76
  # DEBUG __x => __j$_M_node_76
  # DEBUG this => __j$_M_node_76
  # DEBUG D#401 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_76]._M_value_field
  # DEBUG __r => D#401
  # DEBUG __x => D#401
  # DEBUG this => D#133
  # DEBUG D#403 => &MEM[(const struct pair &)__j$_M_node_76 + 32].first
  # DEBUG D#405 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#405
  # DEBUG D#53 => D#403
  # DEBUG D#54 => D#1059
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (prephitmp_5 < _19)
    goto <bb 51>;
  else
    goto <bb 50>;

  <bb 50>:

  <bb 51>:
  # SR.1889_31 = PHI <__j$_M_node_76(50), 0B(69)>
  # SR.1890_41 = PHI <0B(50), __j$_M_node_153(69)>

  <bb 75>:
  # SR.1889_131 = PHI <SR.1889_31(51), 0B(47)>
  # SR.1890_130 = PHI <SR.1890_41(51), _73(47)>

  <bb 68>:
  # DEBUG D#404 => {CLOBBER}
  # DEBUG __j$_M_node => D#404

  <bb 52>:
  # __res_98 = PHI <0B(4), SR.1885_139(64), _21(17), 0B(19), __position$_M_node_129(20), SR.1887_133(66), 0B(35), SR.1889_131(68), _26(37)>
  # __res$8_97 = PHI <_14(4), SR.1886_134(64), _21(17), _22(19), __position$_M_node_129(20), SR.1888_132(66), _25(35), SR.1890_130(68), _26(37)>
  # DEBUG D#414 => {CLOBBER}
  # DEBUG __pos => D#414
  # DEBUG __res => __res_98
  # DEBUG __res$8 => __res$8_97
  # DEBUG __res$first => __res_98
  # DEBUG __res$second => __res$8_97
  if (__res$8_97 != 0B)
    goto <bb 53>;
  else
    goto <bb 57>;

  <bb 53>:
  # DEBUG D#674 => D#679
  # DEBUG this => this_3(D)
  # DEBUG __x => __res_98
  # DEBUG __p => __res$8_97
  # DEBUG __v => __v_1(D)
  # DEBUG __node_gen => D#674
  # DEBUG D#673 => D#674
  # DEBUG this => this_3(D)
  _61 = __j$_M_node_12 == __res$8_97;
  _79 = __res_98 != 0B;
  _78 = _61 | _79;
  if (_78 != 0)
    goto <bb 56>;
  else
    goto <bb 54>;

  <bb 54>:
  pretmp_160 = MEM[(const int &)__v_1(D)];
  pretmp_11 = MEM[(const int &)__res$8_97 + 32];

  <bb 55>:
  # __res$8_152 = PHI <__res$8_97(54), __position$_M_node_129(38)>
  # prephitmp_94 = PHI <pretmp_160(54), _19(38)>
  # prephitmp_48 = PHI <pretmp_11(54), _20(38)>

  <bb 72>:
  # DEBUG D#674 => D#679
  # DEBUG this => this_3(D)
  # DEBUG __x => NULL
  # DEBUG __p => __res$8_152
  # DEBUG __v => __v_1(D)
  # DEBUG __node_gen => D#674
  # DEBUG D#673 => D#674
  # DEBUG this => this_3(D)
  # DEBUG __x => __res$8_152
  # DEBUG __x => __res$8_152
  # DEBUG this => __res$8_152
  # DEBUG D#401 => &MEM[(const struct _Rb_tree_node *)__res$8_152]._M_value_field
  # DEBUG __r => D#401
  # DEBUG __x => D#401
  # DEBUG this => D#133
  # DEBUG D#671 => &MEM[(const struct pair &)__res$8_152 + 32].first
  # DEBUG __x => __v_1(D)
  # DEBUG this => D#133
  # DEBUG D#672 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#672
  # DEBUG D#54 => D#671
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  __insert_left_82 = prephitmp_48 > prephitmp_94;
  pretmp_167 = (int) __insert_left_82;

  <bb 56>:
  # __res$8_166 = PHI <__res$8_152(72), __res$8_97(53)>
  # prephitmp_168 = PHI <pretmp_167(72), 1(53)>
  # DEBUG __insert_left => NULL
  # DEBUG D#656 => D#673
  # DEBUG __arg => __v_1(D)
  # DEBUG this => D#656
  # DEBUG D#655 => D#656
  # DEBUG D#654 => D#655->_M_t
  # DEBUG D#653 => D#654
  # DEBUG __x => __v_1(D)
  # DEBUG this => D#653
  # DEBUG D#652 => D#653
  # DEBUG D#651 => D#653
  # DEBUG D#650 => D#651
  # DEBUG this => D#650
  # DEBUG D#649 => D#650
  # DEBUG this => D#649
  # DEBUG __n => 1
  # DEBUG __a => D#648
  # DEBUG D#647 => D#648
  # DEBUG D#645 => D#647
  # DEBUG D#646 => 0B
  # DEBUG __n => 1
  # DEBUG this => D#645
  # DEBUG D.85665 => D#646
  # DEBUG D#644 => D#645
  # DEBUG D#643 => D#644
  # DEBUG this => D#643
  _85 = operator new (48);
  # DEBUG __tmp => _85
  # DEBUG D#562 => D#652
  # DEBUG __node => _85
  # DEBUG __x => __v_1(D)
  # DEBUG this => D#562
  # DEBUG D#561 => D#562
  # DEBUG this => _85
  # DEBUG D#1060 => &_85->_M_value_field
  # DEBUG __r => D#1060
  # DEBUG D#525 => D#561
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1060
  # DEBUG __val => __v_1(D)
  # DEBUG this => D#560
  # DEBUG D#20 => 12
  # DEBUG __p => D#1060
  # DEBUG D.78103 => D#20
  MEM[(struct pair *)_85 + 32B] = *__v_1(D);
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG __z => _85
  std::_Rb_tree_insert_and_rebalance (prephitmp_168, _85, __res$8_166, __j$_M_node_12);
  _90 = this_3(D)->_M_impl._M_node_count;
  _91 = _90 + 1;
  this_3(D)->_M_impl._M_node_count = _91;
  # DEBUG this => NULL
  # DEBUG __x => _85
  MEM[(struct _Rb_tree_iterator *)&D.85260] = _85;
  goto <bb 58>;

  <bb 57>:
  # __res_147 = PHI <__res_98(52), __position$_M_node_129(34), 0B(38)>

  <bb 71>:
  # DEBUG D#414 => {CLOBBER}
  # DEBUG __pos => D#414
  # DEBUG __res => __res_147
  # DEBUG __res$8 => NULL
  # DEBUG __res$first => __res_147
  # DEBUG __res$second => NULL
  # DEBUG this => NULL
  # DEBUG __x => __res_147
  MEM[(struct _Rb_tree_iterator *)&D.85260] = __res_147;

  <bb 58>:

  <bb 70>:
  # DEBUG D#677 => {CLOBBER}
  # DEBUG __res$first => D#677
  # DEBUG D#678 => {CLOBBER}
  # DEBUG __res$second => D#678
  return D.85260;

  <bb 59>:
  # DEBUG this => this_3(D)
  # DEBUG __k => D#1059
  _8 = MEM[(struct _Rb_tree_node_base * *)this_3(D) + 16B];
  # DEBUG D#58 => this_3(D)
  # DEBUG this => D#58
  # DEBUG __x => NULL
  # DEBUG this => this_3(D)
  # DEBUG __y => NULL
  # DEBUG __comp => 1
  # DEBUG __comp => 1
  # DEBUG __y => __j$_M_node_12
  # DEBUG __x => _8
  if (_8 == 0B)
    goto <bb 11>;
  else
    goto <bb 60>;

  <bb 60>:
  pretmp_120 = MEM[(const int &)__v_1(D)];
  goto <bb 7>;

}



;; Function std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key, _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key = int; _Tp = int; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, int> >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = int; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = int] (_ZNSt3mapIiiSt4lessIiESaISt4pairIKiiEEEixERS3_, funcdef_no=2636, decl_uid=45748, cgraph_uid=758, symbol_order=760)

Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key, _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key = int; _Tp = int; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, int> >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = int; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = int] (struct map * const this, const key_type & __k)
{
  struct _Rb_tree_node_base * SR.1706;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct const_iterator __pos;
  struct iterator D.82901;
  struct _Rb_tree_node * __y;
  struct value_type D.60385;
  mapped_type & _11;
  const int _13;
  const int prephitmp_14;
  const int _15;
  const int pretmp_19;
  struct _Rep_type * _22;
  const int pretmp_36;

  <bb 2>:
  # DEBUG this => this_4(D)
  # DEBUG __x => __k_5(D)
  # DEBUG D#345 => &this_4(D)->_M_t
  # DEBUG this => D#345
  # DEBUG __k => __k_5(D)
  # DEBUG this => D#345
  __i$_M_node_6 = &MEM[(struct _Rb_tree *)this_4(D)]._M_impl._M_header;
  __i$_M_node_7 = MEM[(struct _Rb_tree_node_base * *)this_4(D) + 16B];
  # DEBUG D#41 => D#345
  # DEBUG this => D#41
  # DEBUG D#344 => D#345
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => __k_5(D)
  # DEBUG __y => __i$_M_node_6
  # DEBUG __x => __i$_M_node_7
  if (__i$_M_node_7 == 0B)
    goto <bb 12>;
  else
    goto <bb 3>;

  <bb 3>:
  pretmp_19 = MEM[(const int &)__k_5(D)];
  goto <bb 6>;

  <bb 4>:
  # __i$_M_node_20 = PHI <__i$_M_node_18(8), __i$_M_node_17(7)>
  # __i$_M_node_21 = PHI <__i$_M_node_1(8), __i$_M_node_34(7)>
  # DEBUG __y => __i$_M_node_21
  # DEBUG __x => __i$_M_node_20
  if (__i$_M_node_20 == 0B)
    goto <bb 9>;
  else
    goto <bb 5>;

  <bb 5>:

  <bb 6>:
  # __i$_M_node_34 = PHI <__i$_M_node_7(3), __i$_M_node_20(5)>
  # __i$_M_node_1 = PHI <__i$_M_node_6(3), __i$_M_node_21(5)>
  # DEBUG __y => __i$_M_node_1
  # DEBUG __x => __i$_M_node_34
  # DEBUG __x => __i$_M_node_34
  # DEBUG __x => __i$_M_node_34
  # DEBUG this => __i$_M_node_34
  # DEBUG D#336 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_34]._M_value_field
  # DEBUG __r => D#336
  # DEBUG __x => D#336
  # DEBUG this => D#128
  # DEBUG D#341 => &MEM[(const struct pair &)__i$_M_node_34 + 32].first
  # DEBUG D#342 => &D#343->_M_impl._M_key_compare
  # DEBUG D#52 => D#342
  _15 = MEM[(const int &)__i$_M_node_34 + 32];
  # DEBUG D#53 => D#341
  # DEBUG D#54 => __k_5(D)
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_15 >= pretmp_19)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  # DEBUG __y => __i$_M_node_34
  __i$_M_node_17 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_34 + 16B];
  # DEBUG D#64 => __i$_M_node_34
  # DEBUG __x => D#64
  # DEBUG __x => NULL
  goto <bb 4>;

  <bb 8>:
  __i$_M_node_18 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_34 + 24B];
  # DEBUG D#63 => __i$_M_node_34
  # DEBUG __x => D#63
  # DEBUG __x => NULL
  goto <bb 4>;

  <bb 9>:
  # __i$_M_node_31 = PHI <__i$_M_node_21(4)>

  <bb 14>:
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_31
  # DEBUG __i$_M_node => __i$_M_node_31
  # DEBUG this => this_4(D)
  # DEBUG D#75 => &this_4(D)->_M_t
  # DEBUG this => D#75
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_6
  # DEBUG this => &__i
  # DEBUG __x => &D.60373
  if (__i$_M_node_6 == __i$_M_node_31)
    goto <bb 13>;
  else
    goto <bb 10>;

  <bb 10>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_31
  # DEBUG D#842 => &MEM[(struct _Rb_tree_node *)__i$_M_node_31]._M_value_field
  # DEBUG __r => D#842
  # DEBUG D#843 => &MEM[(struct pair &)__i$_M_node_31 + 32].first
  # DEBUG D#94 => this_4(D)
  # DEBUG this => D#94
  # DEBUG D#93 => D#94
  # DEBUG D#92 => &D#93->_M_t
  # DEBUG D#91 => D#92
  # DEBUG this => D#91
  # DEBUG D#52 => &D.60374
  # DEBUG D#53 => __k_5(D)
  _13 = MEM[(const int &)__i$_M_node_31 + 32];
  # DEBUG D#54 => D#843
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_13 > pretmp_19)
    goto <bb 13>;
  else
    goto <bb 11>;

  <bb 11>:
  # __i$_M_node_10 = PHI <__i$_M_node_31(10), __i$_M_node_24(13)>

  <bb 15>:
  # DEBUG __i$_M_node => __i$_M_node_10
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_10
  # DEBUG D#844 => &MEM[(struct _Rb_tree_node *)__i$_M_node_10]._M_value_field
  # DEBUG __r => D#844
  _11 = &MEM[(struct pair &)__i$_M_node_10 + 32].second;
  # DEBUG D#846 => {CLOBBER}
  # DEBUG __i$_M_node => D#846
  return _11;

  <bb 12>:
  pretmp_36 = MEM[(const int &)__k_5(D)];

  <bb 13>:
  # __i$_M_node_29 = PHI <__i$_M_node_31(14), __i$_M_node_31(10), __i$_M_node_6(12)>
  # prephitmp_14 = PHI <pretmp_19(14), pretmp_19(10), pretmp_36(12)>
  # DEBUG this => &D.60385
  # DEBUG __a => __k_5(D)
  # DEBUG __b => &D.60384
  D.60385.first = prephitmp_14;
  D.60385.second = 0;
  # DEBUG this => this_4(D)
  # DEBUG __position$_M_node => __i$_M_node_29
  # DEBUG __x => &D.60385
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _22 = &this_4(D)->_M_t;
  # DEBUG this => _22
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_29;
  # DEBUG __x => &D.60385
  # DEBUG this => &__an
  # DEBUG __t => _22
  # DEBUG __an$_M_t => _22
  # DEBUG D#841 => &__an
  D.82901 = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_insert_unique_INS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_ERKS2_RT_.isra.263.constprop (_22, __pos, &D.60385);
  __i$_M_node_24 = MEM[(struct _Rb_tree_iterator *)&D.82901];
  # DEBUG __i$_M_node => __i$_M_node_24
  D.60385 ={v} {CLOBBER};
  goto <bb 11>;

}



;; Function void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = int; _Val = int; _KeyOfValue = std::_Identity<int>; _Compare = std::less<int>; _Alloc = std::allocator<int>; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<int>*] (_ZNSt8_Rb_treeIiiSt9_IdentityIiESt4lessIiESaIiEE8_M_eraseEPSt13_Rb_tree_nodeIiE, funcdef_no=2718, decl_uid=32072, cgraph_uid=840, symbol_order=842)

Trying loop 1 as candidate
loop 1 is not innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is not innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is not innermost
loop is not parallel according to graphite
Trying loop 4 as candidate
loop 4 is not innermost
loop is not parallel according to graphite
Trying loop 5 as candidate
loop 5 is not innermost
loop is not parallel according to graphite
Trying loop 6 as candidate
loop 6 is not innermost
loop is not parallel according to graphite
Trying loop 7 as candidate
loop 7 is not innermost
loop is not parallel according to graphite
Trying loop 8 as candidate
loop 8 is not innermost
loop is not parallel according to graphite
Trying loop 9 as candidate
loop 9 is innermost
loop is not parallel according to graphite
void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = int; _Val = int; _KeyOfValue = std::_Identity<int>; _Compare = std::less<int>; _Alloc = std::allocator<int>; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<int>*] (struct _Rb_tree * const this, struct _Rb_tree_node * __x)
{
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node_base * _39;

  <bb 2>:
  # DEBUG __x => __x_3(D)
  if (__x_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  return;

  <bb 4>:

  <bb 5>:
  # __x_68 = PHI <__x_3(D)(4), __x_9(38)>
  # DEBUG __x => __x_68
  __x_8 = MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B];
  # DEBUG D#61 => __x_68
  # DEBUG __x => D#61
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_8
  # DEBUG __x => __x_8
  if (__x_8 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  __x_9 = MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B];
  # DEBUG D#62 => __x_68
  # DEBUG __x => D#62
  # DEBUG __y => NULL
  # DEBUG D#280 => this_6(D)
  # DEBUG __p => __x_68
  # DEBUG this => D#280
  # DEBUG D#279 => D#280
  # DEBUG D#278 => D#280
  # DEBUG D#277 => D#280
  # DEBUG D#269 => D#277
  # DEBUG D#270 => __x_68
  # DEBUG this => D#269
  # DEBUG __p => D#270
  # DEBUG D#268 => D#269
  # DEBUG D#267 => D#270
  # DEBUG D#266 => D#270
  # DEBUG this => D#266
  # DEBUG D#265 => &D#267->_M_value_field
  # DEBUG __r => D#265
  # DEBUG D#264 => D#268
  # DEBUG this => D#264
  # DEBUG D#263 => D#264
  # DEBUG this => D#263
  # DEBUG this => NULL
  # DEBUG D.74553 => NULL
  # DEBUG this => NULL
  # DEBUG D#143 => D#265
  # DEBUG this => D#142
  # DEBUG __p => D#143
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#278
  # DEBUG __p => __x_68
  # DEBUG this => D#279
  # DEBUG D#276 => 1
  # DEBUG __p => __x_68
  # DEBUG __a => D#275
  # DEBUG __n => D#276
  # DEBUG D#274 => D#276
  # DEBUG D#273 => D#275
  # DEBUG D#271 => D#273
  # DEBUG D#272 => D#274
  # DEBUG __p => __x_68
  # DEBUG this => D#271
  # DEBUG D.74652 => D#272
  operator delete (__x_68);
  # DEBUG __x => __x_9
  # DEBUG __x => __x_9
  if (__x_9 == 0B)
    goto <bb 3>;
  else
    goto <bb 38>;

  <bb 7>:

  <bb 8>:
  # __x_72 = PHI <__x_8(7), __x_13(37)>
  # DEBUG __x => __x_72
  __x_12 = MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B];
  # DEBUG D#61 => __x_72
  # DEBUG __x => D#61
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_12
  # DEBUG __x => __x_12
  if (__x_12 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  __x_13 = MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B];
  # DEBUG D#62 => __x_72
  # DEBUG __x => D#62
  # DEBUG __y => NULL
  # DEBUG D#280 => this_6(D)
  # DEBUG __p => __x_72
  # DEBUG this => D#280
  # DEBUG D#279 => D#280
  # DEBUG D#278 => D#280
  # DEBUG D#277 => D#280
  # DEBUG D#269 => D#277
  # DEBUG D#270 => __x_72
  # DEBUG this => D#269
  # DEBUG __p => D#270
  # DEBUG D#268 => D#269
  # DEBUG D#267 => D#270
  # DEBUG D#266 => D#270
  # DEBUG this => D#266
  # DEBUG D#265 => &D#267->_M_value_field
  # DEBUG __r => D#265
  # DEBUG D#264 => D#268
  # DEBUG this => D#264
  # DEBUG D#263 => D#264
  # DEBUG this => D#263
  # DEBUG this => NULL
  # DEBUG D.74553 => NULL
  # DEBUG this => NULL
  # DEBUG D#143 => D#265
  # DEBUG this => D#142
  # DEBUG __p => D#143
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#278
  # DEBUG __p => __x_72
  # DEBUG this => D#279
  # DEBUG D#276 => 1
  # DEBUG __p => __x_72
  # DEBUG __a => D#275
  # DEBUG __n => D#276
  # DEBUG D#274 => D#276
  # DEBUG D#273 => D#275
  # DEBUG D#271 => D#273
  # DEBUG D#272 => D#274
  # DEBUG __p => __x_72
  # DEBUG this => D#271
  # DEBUG D.85762 => D#272
  operator delete (__x_72);
  # DEBUG __x => __x_13
  # DEBUG __x => __x_13
  if (__x_13 == 0B)
    goto <bb 6>;
  else
    goto <bb 37>;

  <bb 10>:

  <bb 11>:
  # __x_71 = PHI <__x_12(10), __x_16(36)>
  # DEBUG __x => __x_71
  __x_15 = MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B];
  # DEBUG D#61 => __x_71
  # DEBUG __x => D#61
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_15
  # DEBUG __x => __x_15
  if (__x_15 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  __x_16 = MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B];
  # DEBUG D#62 => __x_71
  # DEBUG __x => D#62
  # DEBUG __y => NULL
  # DEBUG D#280 => this_6(D)
  # DEBUG __p => __x_71
  # DEBUG this => D#280
  # DEBUG D#279 => D#280
  # DEBUG D#278 => D#280
  # DEBUG D#277 => D#280
  # DEBUG D#269 => D#277
  # DEBUG D#270 => __x_71
  # DEBUG this => D#269
  # DEBUG __p => D#270
  # DEBUG D#268 => D#269
  # DEBUG D#267 => D#270
  # DEBUG D#266 => D#270
  # DEBUG this => D#266
  # DEBUG D#265 => &D#267->_M_value_field
  # DEBUG __r => D#265
  # DEBUG D#264 => D#268
  # DEBUG this => D#264
  # DEBUG D#263 => D#264
  # DEBUG this => D#263
  # DEBUG this => NULL
  # DEBUG D.74553 => NULL
  # DEBUG this => NULL
  # DEBUG D#143 => D#265
  # DEBUG this => D#142
  # DEBUG __p => D#143
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#278
  # DEBUG __p => __x_71
  # DEBUG this => D#279
  # DEBUG D#276 => 1
  # DEBUG __p => __x_71
  # DEBUG __a => D#275
  # DEBUG __n => D#276
  # DEBUG D#274 => D#276
  # DEBUG D#273 => D#275
  # DEBUG D#271 => D#273
  # DEBUG D#272 => D#274
  # DEBUG __p => __x_71
  # DEBUG this => D#271
  # DEBUG D.85775 => D#272
  operator delete (__x_71);
  # DEBUG __x => __x_16
  # DEBUG __x => __x_16
  if (__x_16 == 0B)
    goto <bb 9>;
  else
    goto <bb 36>;

  <bb 13>:

  <bb 14>:
  # __x_77 = PHI <__x_15(13), __x_20(35)>
  # DEBUG __x => __x_77
  __x_19 = MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B];
  # DEBUG D#61 => __x_77
  # DEBUG __x => D#61
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_19
  # DEBUG __x => __x_19
  if (__x_19 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  __x_20 = MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B];
  # DEBUG D#62 => __x_77
  # DEBUG __x => D#62
  # DEBUG __y => NULL
  # DEBUG D#280 => this_6(D)
  # DEBUG __p => __x_77
  # DEBUG this => D#280
  # DEBUG D#279 => D#280
  # DEBUG D#278 => D#280
  # DEBUG D#277 => D#280
  # DEBUG D#269 => D#277
  # DEBUG D#270 => __x_77
  # DEBUG this => D#269
  # DEBUG __p => D#270
  # DEBUG D#268 => D#269
  # DEBUG D#267 => D#270
  # DEBUG D#266 => D#270
  # DEBUG this => D#266
  # DEBUG D#265 => &D#267->_M_value_field
  # DEBUG __r => D#265
  # DEBUG D#264 => D#268
  # DEBUG this => D#264
  # DEBUG D#263 => D#264
  # DEBUG this => D#263
  # DEBUG this => NULL
  # DEBUG D.74553 => NULL
  # DEBUG this => NULL
  # DEBUG D#143 => D#265
  # DEBUG this => D#142
  # DEBUG __p => D#143
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#278
  # DEBUG __p => __x_77
  # DEBUG this => D#279
  # DEBUG D#276 => 1
  # DEBUG __p => __x_77
  # DEBUG __a => D#275
  # DEBUG __n => D#276
  # DEBUG D#274 => D#276
  # DEBUG D#273 => D#275
  # DEBUG D#271 => D#273
  # DEBUG D#272 => D#274
  # DEBUG __p => __x_77
  # DEBUG this => D#271
  # DEBUG D.85788 => D#272
  operator delete (__x_77);
  # DEBUG __x => __x_20
  # DEBUG __x => __x_20
  if (__x_20 == 0B)
    goto <bb 12>;
  else
    goto <bb 35>;

  <bb 16>:

  <bb 17>:
  # __x_80 = PHI <__x_19(16), __x_24(34)>
  # DEBUG __x => __x_80
  __x_23 = MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B];
  # DEBUG D#61 => __x_80
  # DEBUG __x => D#61
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_23
  # DEBUG __x => __x_23
  if (__x_23 == 0B)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  __x_24 = MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B];
  # DEBUG D#62 => __x_80
  # DEBUG __x => D#62
  # DEBUG __y => NULL
  # DEBUG D#280 => this_6(D)
  # DEBUG __p => __x_80
  # DEBUG this => D#280
  # DEBUG D#279 => D#280
  # DEBUG D#278 => D#280
  # DEBUG D#277 => D#280
  # DEBUG D#269 => D#277
  # DEBUG D#270 => __x_80
  # DEBUG this => D#269
  # DEBUG __p => D#270
  # DEBUG D#268 => D#269
  # DEBUG D#267 => D#270
  # DEBUG D#266 => D#270
  # DEBUG this => D#266
  # DEBUG D#265 => &D#267->_M_value_field
  # DEBUG __r => D#265
  # DEBUG D#264 => D#268
  # DEBUG this => D#264
  # DEBUG D#263 => D#264
  # DEBUG this => D#263
  # DEBUG this => NULL
  # DEBUG D.74553 => NULL
  # DEBUG this => NULL
  # DEBUG D#143 => D#265
  # DEBUG this => D#142
  # DEBUG __p => D#143
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#278
  # DEBUG __p => __x_80
  # DEBUG this => D#279
  # DEBUG D#276 => 1
  # DEBUG __p => __x_80
  # DEBUG __a => D#275
  # DEBUG __n => D#276
  # DEBUG D#274 => D#276
  # DEBUG D#273 => D#275
  # DEBUG D#271 => D#273
  # DEBUG D#272 => D#274
  # DEBUG __p => __x_80
  # DEBUG this => D#271
  # DEBUG D.85801 => D#272
  operator delete (__x_80);
  # DEBUG __x => __x_24
  # DEBUG __x => __x_24
  if (__x_24 == 0B)
    goto <bb 15>;
  else
    goto <bb 34>;

  <bb 19>:

  <bb 20>:
  # __x_83 = PHI <__x_23(19), __x_28(33)>
  # DEBUG __x => __x_83
  __x_27 = MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B];
  # DEBUG D#61 => __x_83
  # DEBUG __x => D#61
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_27
  # DEBUG __x => __x_27
  if (__x_27 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  __x_28 = MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B];
  # DEBUG D#62 => __x_83
  # DEBUG __x => D#62
  # DEBUG __y => NULL
  # DEBUG D#280 => this_6(D)
  # DEBUG __p => __x_83
  # DEBUG this => D#280
  # DEBUG D#279 => D#280
  # DEBUG D#278 => D#280
  # DEBUG D#277 => D#280
  # DEBUG D#269 => D#277
  # DEBUG D#270 => __x_83
  # DEBUG this => D#269
  # DEBUG __p => D#270
  # DEBUG D#268 => D#269
  # DEBUG D#267 => D#270
  # DEBUG D#266 => D#270
  # DEBUG this => D#266
  # DEBUG D#265 => &D#267->_M_value_field
  # DEBUG __r => D#265
  # DEBUG D#264 => D#268
  # DEBUG this => D#264
  # DEBUG D#263 => D#264
  # DEBUG this => D#263
  # DEBUG this => NULL
  # DEBUG D.74553 => NULL
  # DEBUG this => NULL
  # DEBUG D#143 => D#265
  # DEBUG this => D#142
  # DEBUG __p => D#143
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#278
  # DEBUG __p => __x_83
  # DEBUG this => D#279
  # DEBUG D#276 => 1
  # DEBUG __p => __x_83
  # DEBUG __a => D#275
  # DEBUG __n => D#276
  # DEBUG D#274 => D#276
  # DEBUG D#273 => D#275
  # DEBUG D#271 => D#273
  # DEBUG D#272 => D#274
  # DEBUG __p => __x_83
  # DEBUG this => D#271
  # DEBUG D.85814 => D#272
  operator delete (__x_83);
  # DEBUG __x => __x_28
  # DEBUG __x => __x_28
  if (__x_28 == 0B)
    goto <bb 18>;
  else
    goto <bb 33>;

  <bb 22>:

  <bb 23>:
  # __x_86 = PHI <__x_27(22), __x_32(32)>
  # DEBUG __x => __x_86
  __x_31 = MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B];
  # DEBUG D#61 => __x_86
  # DEBUG __x => D#61
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_31
  # DEBUG __x => __x_31
  if (__x_31 == 0B)
    goto <bb 24>;
  else
    goto <bb 25>;

  <bb 24>:
  __x_32 = MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B];
  # DEBUG D#62 => __x_86
  # DEBUG __x => D#62
  # DEBUG __y => NULL
  # DEBUG D#280 => this_6(D)
  # DEBUG __p => __x_86
  # DEBUG this => D#280
  # DEBUG D#279 => D#280
  # DEBUG D#278 => D#280
  # DEBUG D#277 => D#280
  # DEBUG D#269 => D#277
  # DEBUG D#270 => __x_86
  # DEBUG this => D#269
  # DEBUG __p => D#270
  # DEBUG D#268 => D#269
  # DEBUG D#267 => D#270
  # DEBUG D#266 => D#270
  # DEBUG this => D#266
  # DEBUG D#265 => &D#267->_M_value_field
  # DEBUG __r => D#265
  # DEBUG D#264 => D#268
  # DEBUG this => D#264
  # DEBUG D#263 => D#264
  # DEBUG this => D#263
  # DEBUG this => NULL
  # DEBUG D.74553 => NULL
  # DEBUG this => NULL
  # DEBUG D#143 => D#265
  # DEBUG this => D#142
  # DEBUG __p => D#143
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#278
  # DEBUG __p => __x_86
  # DEBUG this => D#279
  # DEBUG D#276 => 1
  # DEBUG __p => __x_86
  # DEBUG __a => D#275
  # DEBUG __n => D#276
  # DEBUG D#274 => D#276
  # DEBUG D#273 => D#275
  # DEBUG D#271 => D#273
  # DEBUG D#272 => D#274
  # DEBUG __p => __x_86
  # DEBUG this => D#271
  # DEBUG D.85827 => D#272
  operator delete (__x_86);
  # DEBUG __x => __x_32
  # DEBUG __x => __x_32
  if (__x_32 == 0B)
    goto <bb 21>;
  else
    goto <bb 32>;

  <bb 25>:

  <bb 26>:
  # __x_89 = PHI <__x_31(25), __x_36(31)>
  # DEBUG __x => __x_89
  __x_35 = MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B];
  # DEBUG D#61 => __x_89
  # DEBUG __x => D#61
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_35
  # DEBUG __x => __x_35
  if (__x_35 == 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  __x_36 = MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B];
  # DEBUG D#62 => __x_89
  # DEBUG __x => D#62
  # DEBUG __y => NULL
  # DEBUG D#280 => this_6(D)
  # DEBUG __p => __x_89
  # DEBUG this => D#280
  # DEBUG D#279 => D#280
  # DEBUG D#278 => D#280
  # DEBUG D#277 => D#280
  # DEBUG D#269 => D#277
  # DEBUG D#270 => __x_89
  # DEBUG this => D#269
  # DEBUG __p => D#270
  # DEBUG D#268 => D#269
  # DEBUG D#267 => D#270
  # DEBUG D#266 => D#270
  # DEBUG this => D#266
  # DEBUG D#265 => &D#267->_M_value_field
  # DEBUG __r => D#265
  # DEBUG D#264 => D#268
  # DEBUG this => D#264
  # DEBUG D#263 => D#264
  # DEBUG this => D#263
  # DEBUG this => NULL
  # DEBUG D.74553 => NULL
  # DEBUG this => NULL
  # DEBUG D#143 => D#265
  # DEBUG this => D#142
  # DEBUG __p => D#143
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#278
  # DEBUG __p => __x_89
  # DEBUG this => D#279
  # DEBUG D#276 => 1
  # DEBUG __p => __x_89
  # DEBUG __a => D#275
  # DEBUG __n => D#276
  # DEBUG D#274 => D#276
  # DEBUG D#273 => D#275
  # DEBUG D#271 => D#273
  # DEBUG D#272 => D#274
  # DEBUG __p => __x_89
  # DEBUG this => D#271
  # DEBUG D.85840 => D#272
  operator delete (__x_89);
  # DEBUG __x => __x_36
  # DEBUG __x => __x_36
  if (__x_36 == 0B)
    goto <bb 24>;
  else
    goto <bb 31>;

  <bb 28>:

  <bb 29>:
  # __x_92 = PHI <__x_35(28), __x_40(30)>
  # DEBUG __x => __x_92
  _39 = MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B];
  # DEBUG D#61 => __x_92
  # DEBUG __x => D#61
  std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase (this_6(D), _39);
  __x_40 = MEM[(struct _Rb_tree_node_base * *)__x_92 + 16B];
  # DEBUG D#62 => __x_92
  # DEBUG __x => D#62
  # DEBUG __y => NULL
  # DEBUG D#280 => this_6(D)
  # DEBUG __p => __x_92
  # DEBUG this => D#280
  # DEBUG D#279 => D#280
  # DEBUG D#278 => D#280
  # DEBUG D#277 => D#280
  # DEBUG D#269 => D#277
  # DEBUG D#270 => __x_92
  # DEBUG this => D#269
  # DEBUG __p => D#270
  # DEBUG D#268 => D#269
  # DEBUG D#267 => D#270
  # DEBUG D#266 => D#270
  # DEBUG this => D#266
  # DEBUG D#265 => &D#267->_M_value_field
  # DEBUG __r => D#265
  # DEBUG D#264 => D#268
  # DEBUG this => D#264
  # DEBUG D#263 => D#264
  # DEBUG this => D#263
  # DEBUG this => NULL
  # DEBUG D.74553 => NULL
  # DEBUG this => NULL
  # DEBUG D#143 => D#265
  # DEBUG this => D#142
  # DEBUG __p => D#143
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#278
  # DEBUG __p => __x_92
  # DEBUG this => D#279
  # DEBUG D#276 => 1
  # DEBUG __p => __x_92
  # DEBUG __a => D#275
  # DEBUG __n => D#276
  # DEBUG D#274 => D#276
  # DEBUG D#273 => D#275
  # DEBUG D#271 => D#273
  # DEBUG D#272 => D#274
  # DEBUG __p => __x_92
  # DEBUG this => D#271
  # DEBUG D.85853 => D#272
  operator delete (__x_92);
  # DEBUG __x => __x_40
  # DEBUG __x => __x_40
  if (__x_40 == 0B)
    goto <bb 27>;
  else
    goto <bb 30>;

  <bb 30>:
  goto <bb 29>;

  <bb 31>:
  goto <bb 26>;

  <bb 32>:
  goto <bb 23>;

  <bb 33>:
  goto <bb 20>;

  <bb 34>:
  goto <bb 17>;

  <bb 35>:
  goto <bb 14>;

  <bb 36>:
  goto <bb 11>;

  <bb 37>:
  goto <bb 8>;

  <bb 38>:
  goto <bb 5>;

}



;; Function void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = int; _Val = std::pair<const int, int>; _KeyOfValue = std::_Select1st<std::pair<const int, int> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, int> >*] (_ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE8_M_eraseEPSt13_Rb_tree_nodeIS2_E, funcdef_no=2731, decl_uid=45443, cgraph_uid=853, symbol_order=855)

Trying loop 1 as candidate
loop 1 is not innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is not innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is not innermost
loop is not parallel according to graphite
Trying loop 4 as candidate
loop 4 is not innermost
loop is not parallel according to graphite
Trying loop 5 as candidate
loop 5 is not innermost
loop is not parallel according to graphite
Trying loop 6 as candidate
loop 6 is not innermost
loop is not parallel according to graphite
Trying loop 7 as candidate
loop 7 is not innermost
loop is not parallel according to graphite
Trying loop 8 as candidate
loop 8 is not innermost
loop is not parallel according to graphite
Trying loop 9 as candidate
loop 9 is innermost
loop is not parallel according to graphite
void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = int; _Val = std::pair<const int, int>; _KeyOfValue = std::_Select1st<std::pair<const int, int> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, int> >*] (struct _Rb_tree * const this, struct _Rb_tree_node * __x)
{
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node_base * _39;

  <bb 2>:
  # DEBUG __x => __x_3(D)
  if (__x_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  return;

  <bb 4>:

  <bb 5>:
  # __x_68 = PHI <__x_3(D)(4), __x_9(38)>
  # DEBUG __x => __x_68
  __x_8 = MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B];
  # DEBUG D#63 => __x_68
  # DEBUG __x => D#63
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_8
  # DEBUG __x => __x_8
  if (__x_8 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  __x_9 = MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B];
  # DEBUG D#64 => __x_68
  # DEBUG __x => D#64
  # DEBUG __y => NULL
  # DEBUG D#463 => this_6(D)
  # DEBUG __p => __x_68
  # DEBUG this => D#463
  # DEBUG D#462 => D#463
  # DEBUG D#461 => D#463
  # DEBUG D#460 => D#463
  # DEBUG D#458 => D#460
  # DEBUG D#459 => __x_68
  # DEBUG this => D#458
  # DEBUG __p => D#459
  # DEBUG D#457 => D#458
  # DEBUG D#456 => D#459
  # DEBUG D#455 => D#459
  # DEBUG this => D#455
  # DEBUG D#454 => &D#456->_M_value_field
  # DEBUG __r => D#454
  # DEBUG D#453 => D#457
  # DEBUG this => D#453
  # DEBUG D#452 => D#453
  # DEBUG this => D#452
  # DEBUG this => NULL
  # DEBUG D.76846 => NULL
  # DEBUG this => NULL
  # DEBUG D#165 => D#454
  # DEBUG this => D#164
  # DEBUG __p => D#165
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#461
  # DEBUG __p => __x_68
  # DEBUG this => D#462
  # DEBUG D#287 => 1
  # DEBUG __p => __x_68
  # DEBUG __a => D#286
  # DEBUG __n => D#287
  # DEBUG D#285 => D#287
  # DEBUG D#284 => D#286
  # DEBUG D#282 => D#284
  # DEBUG D#283 => D#285
  # DEBUG __p => __x_68
  # DEBUG this => D#282
  # DEBUG D.76908 => D#283
  operator delete (__x_68);
  # DEBUG __x => __x_9
  # DEBUG __x => __x_9
  if (__x_9 == 0B)
    goto <bb 3>;
  else
    goto <bb 38>;

  <bb 7>:

  <bb 8>:
  # __x_72 = PHI <__x_8(7), __x_13(37)>
  # DEBUG __x => __x_72
  __x_12 = MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B];
  # DEBUG D#63 => __x_72
  # DEBUG __x => D#63
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_12
  # DEBUG __x => __x_12
  if (__x_12 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  __x_13 = MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B];
  # DEBUG D#64 => __x_72
  # DEBUG __x => D#64
  # DEBUG __y => NULL
  # DEBUG D#463 => this_6(D)
  # DEBUG __p => __x_72
  # DEBUG this => D#463
  # DEBUG D#462 => D#463
  # DEBUG D#461 => D#463
  # DEBUG D#460 => D#463
  # DEBUG D#458 => D#460
  # DEBUG D#459 => __x_72
  # DEBUG this => D#458
  # DEBUG __p => D#459
  # DEBUG D#457 => D#458
  # DEBUG D#456 => D#459
  # DEBUG D#455 => D#459
  # DEBUG this => D#455
  # DEBUG D#454 => &D#456->_M_value_field
  # DEBUG __r => D#454
  # DEBUG D#453 => D#457
  # DEBUG this => D#453
  # DEBUG D#452 => D#453
  # DEBUG this => D#452
  # DEBUG this => NULL
  # DEBUG D.76846 => NULL
  # DEBUG this => NULL
  # DEBUG D#165 => D#454
  # DEBUG this => D#164
  # DEBUG __p => D#165
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#461
  # DEBUG __p => __x_72
  # DEBUG this => D#462
  # DEBUG D#287 => 1
  # DEBUG __p => __x_72
  # DEBUG __a => D#286
  # DEBUG __n => D#287
  # DEBUG D#285 => D#287
  # DEBUG D#284 => D#286
  # DEBUG D#282 => D#284
  # DEBUG D#283 => D#285
  # DEBUG __p => __x_72
  # DEBUG this => D#282
  # DEBUG D.85885 => D#283
  operator delete (__x_72);
  # DEBUG __x => __x_13
  # DEBUG __x => __x_13
  if (__x_13 == 0B)
    goto <bb 6>;
  else
    goto <bb 37>;

  <bb 10>:

  <bb 11>:
  # __x_71 = PHI <__x_12(10), __x_16(36)>
  # DEBUG __x => __x_71
  __x_15 = MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B];
  # DEBUG D#63 => __x_71
  # DEBUG __x => D#63
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_15
  # DEBUG __x => __x_15
  if (__x_15 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  __x_16 = MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B];
  # DEBUG D#64 => __x_71
  # DEBUG __x => D#64
  # DEBUG __y => NULL
  # DEBUG D#463 => this_6(D)
  # DEBUG __p => __x_71
  # DEBUG this => D#463
  # DEBUG D#462 => D#463
  # DEBUG D#461 => D#463
  # DEBUG D#460 => D#463
  # DEBUG D#458 => D#460
  # DEBUG D#459 => __x_71
  # DEBUG this => D#458
  # DEBUG __p => D#459
  # DEBUG D#457 => D#458
  # DEBUG D#456 => D#459
  # DEBUG D#455 => D#459
  # DEBUG this => D#455
  # DEBUG D#454 => &D#456->_M_value_field
  # DEBUG __r => D#454
  # DEBUG D#453 => D#457
  # DEBUG this => D#453
  # DEBUG D#452 => D#453
  # DEBUG this => D#452
  # DEBUG this => NULL
  # DEBUG D.76846 => NULL
  # DEBUG this => NULL
  # DEBUG D#165 => D#454
  # DEBUG this => D#164
  # DEBUG __p => D#165
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#461
  # DEBUG __p => __x_71
  # DEBUG this => D#462
  # DEBUG D#287 => 1
  # DEBUG __p => __x_71
  # DEBUG __a => D#286
  # DEBUG __n => D#287
  # DEBUG D#285 => D#287
  # DEBUG D#284 => D#286
  # DEBUG D#282 => D#284
  # DEBUG D#283 => D#285
  # DEBUG __p => __x_71
  # DEBUG this => D#282
  # DEBUG D.85898 => D#283
  operator delete (__x_71);
  # DEBUG __x => __x_16
  # DEBUG __x => __x_16
  if (__x_16 == 0B)
    goto <bb 9>;
  else
    goto <bb 36>;

  <bb 13>:

  <bb 14>:
  # __x_77 = PHI <__x_15(13), __x_20(35)>
  # DEBUG __x => __x_77
  __x_19 = MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B];
  # DEBUG D#63 => __x_77
  # DEBUG __x => D#63
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_19
  # DEBUG __x => __x_19
  if (__x_19 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  __x_20 = MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B];
  # DEBUG D#64 => __x_77
  # DEBUG __x => D#64
  # DEBUG __y => NULL
  # DEBUG D#463 => this_6(D)
  # DEBUG __p => __x_77
  # DEBUG this => D#463
  # DEBUG D#462 => D#463
  # DEBUG D#461 => D#463
  # DEBUG D#460 => D#463
  # DEBUG D#458 => D#460
  # DEBUG D#459 => __x_77
  # DEBUG this => D#458
  # DEBUG __p => D#459
  # DEBUG D#457 => D#458
  # DEBUG D#456 => D#459
  # DEBUG D#455 => D#459
  # DEBUG this => D#455
  # DEBUG D#454 => &D#456->_M_value_field
  # DEBUG __r => D#454
  # DEBUG D#453 => D#457
  # DEBUG this => D#453
  # DEBUG D#452 => D#453
  # DEBUG this => D#452
  # DEBUG this => NULL
  # DEBUG D.76846 => NULL
  # DEBUG this => NULL
  # DEBUG D#165 => D#454
  # DEBUG this => D#164
  # DEBUG __p => D#165
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#461
  # DEBUG __p => __x_77
  # DEBUG this => D#462
  # DEBUG D#287 => 1
  # DEBUG __p => __x_77
  # DEBUG __a => D#286
  # DEBUG __n => D#287
  # DEBUG D#285 => D#287
  # DEBUG D#284 => D#286
  # DEBUG D#282 => D#284
  # DEBUG D#283 => D#285
  # DEBUG __p => __x_77
  # DEBUG this => D#282
  # DEBUG D.85911 => D#283
  operator delete (__x_77);
  # DEBUG __x => __x_20
  # DEBUG __x => __x_20
  if (__x_20 == 0B)
    goto <bb 12>;
  else
    goto <bb 35>;

  <bb 16>:

  <bb 17>:
  # __x_80 = PHI <__x_19(16), __x_24(34)>
  # DEBUG __x => __x_80
  __x_23 = MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B];
  # DEBUG D#63 => __x_80
  # DEBUG __x => D#63
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_23
  # DEBUG __x => __x_23
  if (__x_23 == 0B)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  __x_24 = MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B];
  # DEBUG D#64 => __x_80
  # DEBUG __x => D#64
  # DEBUG __y => NULL
  # DEBUG D#463 => this_6(D)
  # DEBUG __p => __x_80
  # DEBUG this => D#463
  # DEBUG D#462 => D#463
  # DEBUG D#461 => D#463
  # DEBUG D#460 => D#463
  # DEBUG D#458 => D#460
  # DEBUG D#459 => __x_80
  # DEBUG this => D#458
  # DEBUG __p => D#459
  # DEBUG D#457 => D#458
  # DEBUG D#456 => D#459
  # DEBUG D#455 => D#459
  # DEBUG this => D#455
  # DEBUG D#454 => &D#456->_M_value_field
  # DEBUG __r => D#454
  # DEBUG D#453 => D#457
  # DEBUG this => D#453
  # DEBUG D#452 => D#453
  # DEBUG this => D#452
  # DEBUG this => NULL
  # DEBUG D.76846 => NULL
  # DEBUG this => NULL
  # DEBUG D#165 => D#454
  # DEBUG this => D#164
  # DEBUG __p => D#165
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#461
  # DEBUG __p => __x_80
  # DEBUG this => D#462
  # DEBUG D#287 => 1
  # DEBUG __p => __x_80
  # DEBUG __a => D#286
  # DEBUG __n => D#287
  # DEBUG D#285 => D#287
  # DEBUG D#284 => D#286
  # DEBUG D#282 => D#284
  # DEBUG D#283 => D#285
  # DEBUG __p => __x_80
  # DEBUG this => D#282
  # DEBUG D.85924 => D#283
  operator delete (__x_80);
  # DEBUG __x => __x_24
  # DEBUG __x => __x_24
  if (__x_24 == 0B)
    goto <bb 15>;
  else
    goto <bb 34>;

  <bb 19>:

  <bb 20>:
  # __x_83 = PHI <__x_23(19), __x_28(33)>
  # DEBUG __x => __x_83
  __x_27 = MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B];
  # DEBUG D#63 => __x_83
  # DEBUG __x => D#63
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_27
  # DEBUG __x => __x_27
  if (__x_27 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  __x_28 = MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B];
  # DEBUG D#64 => __x_83
  # DEBUG __x => D#64
  # DEBUG __y => NULL
  # DEBUG D#463 => this_6(D)
  # DEBUG __p => __x_83
  # DEBUG this => D#463
  # DEBUG D#462 => D#463
  # DEBUG D#461 => D#463
  # DEBUG D#460 => D#463
  # DEBUG D#458 => D#460
  # DEBUG D#459 => __x_83
  # DEBUG this => D#458
  # DEBUG __p => D#459
  # DEBUG D#457 => D#458
  # DEBUG D#456 => D#459
  # DEBUG D#455 => D#459
  # DEBUG this => D#455
  # DEBUG D#454 => &D#456->_M_value_field
  # DEBUG __r => D#454
  # DEBUG D#453 => D#457
  # DEBUG this => D#453
  # DEBUG D#452 => D#453
  # DEBUG this => D#452
  # DEBUG this => NULL
  # DEBUG D.76846 => NULL
  # DEBUG this => NULL
  # DEBUG D#165 => D#454
  # DEBUG this => D#164
  # DEBUG __p => D#165
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#461
  # DEBUG __p => __x_83
  # DEBUG this => D#462
  # DEBUG D#287 => 1
  # DEBUG __p => __x_83
  # DEBUG __a => D#286
  # DEBUG __n => D#287
  # DEBUG D#285 => D#287
  # DEBUG D#284 => D#286
  # DEBUG D#282 => D#284
  # DEBUG D#283 => D#285
  # DEBUG __p => __x_83
  # DEBUG this => D#282
  # DEBUG D.85937 => D#283
  operator delete (__x_83);
  # DEBUG __x => __x_28
  # DEBUG __x => __x_28
  if (__x_28 == 0B)
    goto <bb 18>;
  else
    goto <bb 33>;

  <bb 22>:

  <bb 23>:
  # __x_86 = PHI <__x_27(22), __x_32(32)>
  # DEBUG __x => __x_86
  __x_31 = MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B];
  # DEBUG D#63 => __x_86
  # DEBUG __x => D#63
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_31
  # DEBUG __x => __x_31
  if (__x_31 == 0B)
    goto <bb 24>;
  else
    goto <bb 25>;

  <bb 24>:
  __x_32 = MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B];
  # DEBUG D#64 => __x_86
  # DEBUG __x => D#64
  # DEBUG __y => NULL
  # DEBUG D#463 => this_6(D)
  # DEBUG __p => __x_86
  # DEBUG this => D#463
  # DEBUG D#462 => D#463
  # DEBUG D#461 => D#463
  # DEBUG D#460 => D#463
  # DEBUG D#458 => D#460
  # DEBUG D#459 => __x_86
  # DEBUG this => D#458
  # DEBUG __p => D#459
  # DEBUG D#457 => D#458
  # DEBUG D#456 => D#459
  # DEBUG D#455 => D#459
  # DEBUG this => D#455
  # DEBUG D#454 => &D#456->_M_value_field
  # DEBUG __r => D#454
  # DEBUG D#453 => D#457
  # DEBUG this => D#453
  # DEBUG D#452 => D#453
  # DEBUG this => D#452
  # DEBUG this => NULL
  # DEBUG D.76846 => NULL
  # DEBUG this => NULL
  # DEBUG D#165 => D#454
  # DEBUG this => D#164
  # DEBUG __p => D#165
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#461
  # DEBUG __p => __x_86
  # DEBUG this => D#462
  # DEBUG D#287 => 1
  # DEBUG __p => __x_86
  # DEBUG __a => D#286
  # DEBUG __n => D#287
  # DEBUG D#285 => D#287
  # DEBUG D#284 => D#286
  # DEBUG D#282 => D#284
  # DEBUG D#283 => D#285
  # DEBUG __p => __x_86
  # DEBUG this => D#282
  # DEBUG D.85950 => D#283
  operator delete (__x_86);
  # DEBUG __x => __x_32
  # DEBUG __x => __x_32
  if (__x_32 == 0B)
    goto <bb 21>;
  else
    goto <bb 32>;

  <bb 25>:

  <bb 26>:
  # __x_89 = PHI <__x_31(25), __x_36(31)>
  # DEBUG __x => __x_89
  __x_35 = MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B];
  # DEBUG D#63 => __x_89
  # DEBUG __x => D#63
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_35
  # DEBUG __x => __x_35
  if (__x_35 == 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  __x_36 = MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B];
  # DEBUG D#64 => __x_89
  # DEBUG __x => D#64
  # DEBUG __y => NULL
  # DEBUG D#463 => this_6(D)
  # DEBUG __p => __x_89
  # DEBUG this => D#463
  # DEBUG D#462 => D#463
  # DEBUG D#461 => D#463
  # DEBUG D#460 => D#463
  # DEBUG D#458 => D#460
  # DEBUG D#459 => __x_89
  # DEBUG this => D#458
  # DEBUG __p => D#459
  # DEBUG D#457 => D#458
  # DEBUG D#456 => D#459
  # DEBUG D#455 => D#459
  # DEBUG this => D#455
  # DEBUG D#454 => &D#456->_M_value_field
  # DEBUG __r => D#454
  # DEBUG D#453 => D#457
  # DEBUG this => D#453
  # DEBUG D#452 => D#453
  # DEBUG this => D#452
  # DEBUG this => NULL
  # DEBUG D.76846 => NULL
  # DEBUG this => NULL
  # DEBUG D#165 => D#454
  # DEBUG this => D#164
  # DEBUG __p => D#165
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#461
  # DEBUG __p => __x_89
  # DEBUG this => D#462
  # DEBUG D#287 => 1
  # DEBUG __p => __x_89
  # DEBUG __a => D#286
  # DEBUG __n => D#287
  # DEBUG D#285 => D#287
  # DEBUG D#284 => D#286
  # DEBUG D#282 => D#284
  # DEBUG D#283 => D#285
  # DEBUG __p => __x_89
  # DEBUG this => D#282
  # DEBUG D.85963 => D#283
  operator delete (__x_89);
  # DEBUG __x => __x_36
  # DEBUG __x => __x_36
  if (__x_36 == 0B)
    goto <bb 24>;
  else
    goto <bb 31>;

  <bb 28>:

  <bb 29>:
  # __x_92 = PHI <__x_35(28), __x_40(30)>
  # DEBUG __x => __x_92
  _39 = MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B];
  # DEBUG D#63 => __x_92
  # DEBUG __x => D#63
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (this_6(D), _39);
  __x_40 = MEM[(struct _Rb_tree_node_base * *)__x_92 + 16B];
  # DEBUG D#64 => __x_92
  # DEBUG __x => D#64
  # DEBUG __y => NULL
  # DEBUG D#463 => this_6(D)
  # DEBUG __p => __x_92
  # DEBUG this => D#463
  # DEBUG D#462 => D#463
  # DEBUG D#461 => D#463
  # DEBUG D#460 => D#463
  # DEBUG D#458 => D#460
  # DEBUG D#459 => __x_92
  # DEBUG this => D#458
  # DEBUG __p => D#459
  # DEBUG D#457 => D#458
  # DEBUG D#456 => D#459
  # DEBUG D#455 => D#459
  # DEBUG this => D#455
  # DEBUG D#454 => &D#456->_M_value_field
  # DEBUG __r => D#454
  # DEBUG D#453 => D#457
  # DEBUG this => D#453
  # DEBUG D#452 => D#453
  # DEBUG this => D#452
  # DEBUG this => NULL
  # DEBUG D.76846 => NULL
  # DEBUG this => NULL
  # DEBUG D#165 => D#454
  # DEBUG this => D#164
  # DEBUG __p => D#165
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#461
  # DEBUG __p => __x_92
  # DEBUG this => D#462
  # DEBUG D#287 => 1
  # DEBUG __p => __x_92
  # DEBUG __a => D#286
  # DEBUG __n => D#287
  # DEBUG D#285 => D#287
  # DEBUG D#284 => D#286
  # DEBUG D#282 => D#284
  # DEBUG D#283 => D#285
  # DEBUG __p => __x_92
  # DEBUG this => D#282
  # DEBUG D.85976 => D#283
  operator delete (__x_92);
  # DEBUG __x => __x_40
  # DEBUG __x => __x_40
  if (__x_40 == 0B)
    goto <bb 27>;
  else
    goto <bb 30>;

  <bb 30>:
  goto <bb 29>;

  <bb 31>:
  goto <bb 26>;

  <bb 32>:
  goto <bb 23>;

  <bb 33>:
  goto <bb 20>;

  <bb 34>:
  goto <bb 17>;

  <bb 35>:
  goto <bb 14>;

  <bb 36>:
  goto <bb 11>;

  <bb 37>:
  goto <bb 8>;

  <bb 38>:
  goto <bb 5>;

}



;; Function void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = int; _Val = std::pair<const int, std::pair<int, int> >; _KeyOfValue = std::_Select1st<std::pair<const int, std::pair<int, int> > >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, std::pair<int, int> > >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, std::pair<int, int> > >*] (_ZNSt8_Rb_treeIiSt4pairIKiS0_IiiEESt10_Select1stIS3_ESt4lessIiESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E, funcdef_no=2917, decl_uid=55871, cgraph_uid=1039, symbol_order=1041)

Trying loop 1 as candidate
loop 1 is not innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is not innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is not innermost
loop is not parallel according to graphite
Trying loop 4 as candidate
loop 4 is not innermost
loop is not parallel according to graphite
Trying loop 5 as candidate
loop 5 is not innermost
loop is not parallel according to graphite
Trying loop 6 as candidate
loop 6 is not innermost
loop is not parallel according to graphite
Trying loop 7 as candidate
loop 7 is not innermost
loop is not parallel according to graphite
Trying loop 8 as candidate
loop 8 is not innermost
loop is not parallel according to graphite
Trying loop 9 as candidate
loop 9 is innermost
loop is not parallel according to graphite
void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = int; _Val = std::pair<const int, std::pair<int, int> >; _KeyOfValue = std::_Select1st<std::pair<const int, std::pair<int, int> > >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, std::pair<int, int> > >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, std::pair<int, int> > >*] (struct _Rb_tree * const this, struct _Rb_tree_node * __x)
{
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node_base * _39;

  <bb 2>:
  # DEBUG __x => __x_3(D)
  if (__x_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  return;

  <bb 4>:

  <bb 5>:
  # __x_68 = PHI <__x_3(D)(4), __x_9(38)>
  # DEBUG __x => __x_68
  __x_8 = MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B];
  # DEBUG D#107 => __x_68
  # DEBUG __x => D#107
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_8
  # DEBUG __x => __x_8
  if (__x_8 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  __x_9 = MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B];
  # DEBUG D#108 => __x_68
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => this_6(D)
  # DEBUG __p => __x_68
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_68
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_68
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_68
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_68
  # DEBUG this => D#425
  # DEBUG D.77754 => D#426
  operator delete (__x_68);
  # DEBUG __x => __x_9
  # DEBUG __x => __x_9
  if (__x_9 == 0B)
    goto <bb 3>;
  else
    goto <bb 38>;

  <bb 7>:

  <bb 8>:
  # __x_72 = PHI <__x_8(7), __x_13(37)>
  # DEBUG __x => __x_72
  __x_12 = MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B];
  # DEBUG D#107 => __x_72
  # DEBUG __x => D#107
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_12
  # DEBUG __x => __x_12
  if (__x_12 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  __x_13 = MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B];
  # DEBUG D#108 => __x_72
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => this_6(D)
  # DEBUG __p => __x_72
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_72
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_72
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_72
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_72
  # DEBUG this => D#425
  # DEBUG D.86008 => D#426
  operator delete (__x_72);
  # DEBUG __x => __x_13
  # DEBUG __x => __x_13
  if (__x_13 == 0B)
    goto <bb 6>;
  else
    goto <bb 37>;

  <bb 10>:

  <bb 11>:
  # __x_71 = PHI <__x_12(10), __x_16(36)>
  # DEBUG __x => __x_71
  __x_15 = MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B];
  # DEBUG D#107 => __x_71
  # DEBUG __x => D#107
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_15
  # DEBUG __x => __x_15
  if (__x_15 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  __x_16 = MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B];
  # DEBUG D#108 => __x_71
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => this_6(D)
  # DEBUG __p => __x_71
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_71
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_71
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_71
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_71
  # DEBUG this => D#425
  # DEBUG D.86021 => D#426
  operator delete (__x_71);
  # DEBUG __x => __x_16
  # DEBUG __x => __x_16
  if (__x_16 == 0B)
    goto <bb 9>;
  else
    goto <bb 36>;

  <bb 13>:

  <bb 14>:
  # __x_77 = PHI <__x_15(13), __x_20(35)>
  # DEBUG __x => __x_77
  __x_19 = MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B];
  # DEBUG D#107 => __x_77
  # DEBUG __x => D#107
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_19
  # DEBUG __x => __x_19
  if (__x_19 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  __x_20 = MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B];
  # DEBUG D#108 => __x_77
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => this_6(D)
  # DEBUG __p => __x_77
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_77
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_77
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_77
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_77
  # DEBUG this => D#425
  # DEBUG D.86034 => D#426
  operator delete (__x_77);
  # DEBUG __x => __x_20
  # DEBUG __x => __x_20
  if (__x_20 == 0B)
    goto <bb 12>;
  else
    goto <bb 35>;

  <bb 16>:

  <bb 17>:
  # __x_80 = PHI <__x_19(16), __x_24(34)>
  # DEBUG __x => __x_80
  __x_23 = MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B];
  # DEBUG D#107 => __x_80
  # DEBUG __x => D#107
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_23
  # DEBUG __x => __x_23
  if (__x_23 == 0B)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  __x_24 = MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B];
  # DEBUG D#108 => __x_80
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => this_6(D)
  # DEBUG __p => __x_80
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_80
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_80
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_80
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_80
  # DEBUG this => D#425
  # DEBUG D.86047 => D#426
  operator delete (__x_80);
  # DEBUG __x => __x_24
  # DEBUG __x => __x_24
  if (__x_24 == 0B)
    goto <bb 15>;
  else
    goto <bb 34>;

  <bb 19>:

  <bb 20>:
  # __x_83 = PHI <__x_23(19), __x_28(33)>
  # DEBUG __x => __x_83
  __x_27 = MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B];
  # DEBUG D#107 => __x_83
  # DEBUG __x => D#107
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_27
  # DEBUG __x => __x_27
  if (__x_27 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  __x_28 = MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B];
  # DEBUG D#108 => __x_83
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => this_6(D)
  # DEBUG __p => __x_83
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_83
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_83
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_83
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_83
  # DEBUG this => D#425
  # DEBUG D.86060 => D#426
  operator delete (__x_83);
  # DEBUG __x => __x_28
  # DEBUG __x => __x_28
  if (__x_28 == 0B)
    goto <bb 18>;
  else
    goto <bb 33>;

  <bb 22>:

  <bb 23>:
  # __x_86 = PHI <__x_27(22), __x_32(32)>
  # DEBUG __x => __x_86
  __x_31 = MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B];
  # DEBUG D#107 => __x_86
  # DEBUG __x => D#107
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_31
  # DEBUG __x => __x_31
  if (__x_31 == 0B)
    goto <bb 24>;
  else
    goto <bb 25>;

  <bb 24>:
  __x_32 = MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B];
  # DEBUG D#108 => __x_86
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => this_6(D)
  # DEBUG __p => __x_86
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_86
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_86
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_86
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_86
  # DEBUG this => D#425
  # DEBUG D.86073 => D#426
  operator delete (__x_86);
  # DEBUG __x => __x_32
  # DEBUG __x => __x_32
  if (__x_32 == 0B)
    goto <bb 21>;
  else
    goto <bb 32>;

  <bb 25>:

  <bb 26>:
  # __x_89 = PHI <__x_31(25), __x_36(31)>
  # DEBUG __x => __x_89
  __x_35 = MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B];
  # DEBUG D#107 => __x_89
  # DEBUG __x => D#107
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_35
  # DEBUG __x => __x_35
  if (__x_35 == 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  __x_36 = MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B];
  # DEBUG D#108 => __x_89
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => this_6(D)
  # DEBUG __p => __x_89
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_89
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_89
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_89
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_89
  # DEBUG this => D#425
  # DEBUG D.86086 => D#426
  operator delete (__x_89);
  # DEBUG __x => __x_36
  # DEBUG __x => __x_36
  if (__x_36 == 0B)
    goto <bb 24>;
  else
    goto <bb 31>;

  <bb 28>:

  <bb 29>:
  # __x_92 = PHI <__x_35(28), __x_40(30)>
  # DEBUG __x => __x_92
  _39 = MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B];
  # DEBUG D#107 => __x_92
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (this_6(D), _39);
  __x_40 = MEM[(struct _Rb_tree_node_base * *)__x_92 + 16B];
  # DEBUG D#108 => __x_92
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => this_6(D)
  # DEBUG __p => __x_92
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_92
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_92
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_92
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_92
  # DEBUG this => D#425
  # DEBUG D.86099 => D#426
  operator delete (__x_92);
  # DEBUG __x => __x_40
  # DEBUG __x => __x_40
  if (__x_40 == 0B)
    goto <bb 27>;
  else
    goto <bb 30>;

  <bb 30>:
  goto <bb 29>;

  <bb 31>:
  goto <bb 26>;

  <bb 32>:
  goto <bb 23>;

  <bb 33>:
  goto <bb 20>;

  <bb 34>:
  goto <bb 17>;

  <bb 35>:
  goto <bb 14>;

  <bb 36>:
  goto <bb 11>;

  <bb 37>:
  goto <bb 8>;

  <bb 38>:
  goto <bb 5>;

}



;; Function void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = int; _Val = std::pair<const int, std::map<int, std::pair<int, int> > >; _KeyOfValue = std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, std::map<int, std::pair<int, int> > > >*] (_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE8_M_eraseEPSt13_Rb_tree_nodeIS9_E, funcdef_no=2761, decl_uid=54718, cgraph_uid=883, symbol_order=885)

Trying loop 1 as candidate
loop 1 is not innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is not innermost
loop is not parallel according to graphite
Trying loop 4 as candidate
loop 4 is innermost
loop is not parallel according to graphite
Trying loop 5 as candidate
loop 5 is not innermost
loop is not parallel according to graphite
Trying loop 6 as candidate
loop 6 is innermost
loop is not parallel according to graphite
Trying loop 7 as candidate
loop 7 is not innermost
loop is not parallel according to graphite
Trying loop 8 as candidate
loop 8 is innermost
loop is not parallel according to graphite
Trying loop 9 as candidate
loop 9 is not innermost
loop is not parallel according to graphite
Trying loop 10 as candidate
loop 10 is innermost
loop is not parallel according to graphite
Trying loop 11 as candidate
loop 11 is not innermost
loop is not parallel according to graphite
Trying loop 12 as candidate
loop 12 is innermost
loop is not parallel according to graphite
Trying loop 13 as candidate
loop 13 is not innermost
loop is not parallel according to graphite
Trying loop 14 as candidate
loop 14 is innermost
loop is not parallel according to graphite
Trying loop 15 as candidate
loop 15 is not innermost
loop is not parallel according to graphite
Trying loop 16 as candidate
loop 16 is innermost
loop is not parallel according to graphite
Trying loop 17 as candidate
loop 17 is not innermost
loop is not parallel according to graphite
Trying loop 18 as candidate
loop 18 is innermost
loop is not parallel according to graphite
void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = int; _Val = std::pair<const int, std::map<int, std::pair<int, int> > >; _KeyOfValue = std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, std::map<int, std::pair<int, int> > > >*] (struct _Rb_tree * const this, struct _Rb_tree_node * __x)
{
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rep_type * _9;
  struct _Rb_tree_node_base * _21;
  struct _Rep_type * _26;
  struct _Rb_tree_node_base * _29;
  struct _Rep_type * _35;
  struct _Rb_tree_node_base * _39;
  struct _Rep_type * _45;
  struct _Rb_tree_node_base * _49;
  struct _Rep_type * _55;
  struct _Rb_tree_node_base * _59;
  struct _Rep_type * _65;
  struct _Rb_tree_node_base * _69;
  struct _Rep_type * _75;
  struct _Rb_tree_node_base * _79;
  struct _Rep_type * _85;
  struct _Rb_tree_node_base * _89;
  struct _Rb_tree_node_base * _93;
  struct _Rep_type * _95;
  struct _Rb_tree_node_base * _99;

  <bb 2>:
  # DEBUG __x => __x_3(D)
  if (__x_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  return;

  <bb 4>:

  <bb 5>:
  # __x_212 = PHI <__x_3(D)(4), __x_11(74)>
  # DEBUG __x => __x_212
  __x_10 = MEM[(struct _Rb_tree_node_base * *)__x_212 + 24B];
  # DEBUG D#65 => __x_212
  # DEBUG __x => D#65
  # DEBUG this => this_7(D)
  # DEBUG __x => __x_10
  # DEBUG __x => __x_10
  if (__x_10 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  __x_11 = MEM[(struct _Rb_tree_node_base * *)__x_212 + 16B];
  # DEBUG D#66 => __x_212
  # DEBUG __x => D#66
  # DEBUG __y => NULL
  # DEBUG D#544 => this_7(D)
  # DEBUG __p => __x_212
  # DEBUG this => D#544
  # DEBUG D#543 => D#544
  # DEBUG D#542 => D#544
  # DEBUG D#541 => D#542
  # DEBUG __p => __x_212
  # DEBUG this => D#541
  # DEBUG D#540 => D#541
  # DEBUG this => __x_212
  # DEBUG D#539 => &__x_212->_M_value_field
  # DEBUG __r => D#539
  # DEBUG D#472 => D#540
  # DEBUG this => D#472
  # DEBUG D#471 => D#472
  # DEBUG this => D#471
  # DEBUG this => NULL
  # DEBUG D.77058 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#539
  # DEBUG this => D#538
  # DEBUG this => D#539
  # DEBUG D#537 => &D#539->second
  # DEBUG this => D#537
  _9 = &MEM[(struct map *)__x_212 + 40B]._M_t;
  # DEBUG this => _9
  __x_5 = MEM[(struct _Rb_tree_node_base * *)__x_212 + 56B];
  # DEBUG D#58 => _9
  # DEBUG this => D#58
  # DEBUG this => _9
  # DEBUG __x => __x_5
  # DEBUG __x => __x_5
  if (__x_5 == 0B)
    goto <bb 70>;
  else
    goto <bb 71>;

  <bb 7>:

  <bb 8>:
  # __x_216 = PHI <__x_10(7), __x_25(69)>
  # DEBUG __x => __x_216
  __x_24 = MEM[(struct _Rb_tree_node_base * *)__x_216 + 24B];
  # DEBUG D#65 => __x_216
  # DEBUG __x => D#65
  # DEBUG this => this_7(D)
  # DEBUG __x => __x_24
  # DEBUG __x => __x_24
  if (__x_24 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  __x_25 = MEM[(struct _Rb_tree_node_base * *)__x_216 + 16B];
  # DEBUG D#66 => __x_216
  # DEBUG __x => D#66
  # DEBUG __y => NULL
  # DEBUG D#544 => this_7(D)
  # DEBUG __p => __x_216
  # DEBUG this => D#544
  # DEBUG D#543 => D#544
  # DEBUG D#542 => D#544
  # DEBUG D#541 => D#542
  # DEBUG __p => __x_216
  # DEBUG this => D#541
  # DEBUG D#540 => D#541
  # DEBUG this => __x_216
  # DEBUG D#539 => &__x_216->_M_value_field
  # DEBUG __r => D#539
  # DEBUG D#472 => D#540
  # DEBUG this => D#472
  # DEBUG D#471 => D#472
  # DEBUG this => D#471
  # DEBUG this => NULL
  # DEBUG D.77058 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#539
  # DEBUG this => D#538
  # DEBUG this => D#539
  # DEBUG D#537 => &D#539->second
  # DEBUG this => D#537
  _26 = &MEM[(struct map *)__x_216 + 40B]._M_t;
  # DEBUG this => _26
  __x_27 = MEM[(struct _Rb_tree_node_base * *)__x_216 + 56B];
  # DEBUG D#58 => _26
  # DEBUG this => D#58
  # DEBUG this => _26
  # DEBUG __x => __x_27
  # DEBUG __x => __x_27
  if (__x_27 == 0B)
    goto <bb 65>;
  else
    goto <bb 66>;

  <bb 10>:

  <bb 11>:
  # __x_224 = PHI <__x_24(10), __x_34(64)>
  # DEBUG __x => __x_224
  __x_33 = MEM[(struct _Rb_tree_node_base * *)__x_224 + 24B];
  # DEBUG D#65 => __x_224
  # DEBUG __x => D#65
  # DEBUG this => this_7(D)
  # DEBUG __x => __x_33
  # DEBUG __x => __x_33
  if (__x_33 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  __x_34 = MEM[(struct _Rb_tree_node_base * *)__x_224 + 16B];
  # DEBUG D#66 => __x_224
  # DEBUG __x => D#66
  # DEBUG __y => NULL
  # DEBUG D#544 => this_7(D)
  # DEBUG __p => __x_224
  # DEBUG this => D#544
  # DEBUG D#543 => D#544
  # DEBUG D#542 => D#544
  # DEBUG D#541 => D#542
  # DEBUG __p => __x_224
  # DEBUG this => D#541
  # DEBUG D#540 => D#541
  # DEBUG this => __x_224
  # DEBUG D#539 => &__x_224->_M_value_field
  # DEBUG __r => D#539
  # DEBUG D#472 => D#540
  # DEBUG this => D#472
  # DEBUG D#471 => D#472
  # DEBUG this => D#471
  # DEBUG this => NULL
  # DEBUG D.77058 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#539
  # DEBUG this => D#538
  # DEBUG this => D#539
  # DEBUG D#537 => &D#539->second
  # DEBUG this => D#537
  _35 = &MEM[(struct map *)__x_224 + 40B]._M_t;
  # DEBUG this => _35
  __x_36 = MEM[(struct _Rb_tree_node_base * *)__x_224 + 56B];
  # DEBUG D#58 => _35
  # DEBUG this => D#58
  # DEBUG this => _35
  # DEBUG __x => __x_36
  # DEBUG __x => __x_36
  if (__x_36 == 0B)
    goto <bb 60>;
  else
    goto <bb 61>;

  <bb 13>:

  <bb 14>:
  # __x_230 = PHI <__x_33(13), __x_44(59)>
  # DEBUG __x => __x_230
  __x_43 = MEM[(struct _Rb_tree_node_base * *)__x_230 + 24B];
  # DEBUG D#65 => __x_230
  # DEBUG __x => D#65
  # DEBUG this => this_7(D)
  # DEBUG __x => __x_43
  # DEBUG __x => __x_43
  if (__x_43 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  __x_44 = MEM[(struct _Rb_tree_node_base * *)__x_230 + 16B];
  # DEBUG D#66 => __x_230
  # DEBUG __x => D#66
  # DEBUG __y => NULL
  # DEBUG D#544 => this_7(D)
  # DEBUG __p => __x_230
  # DEBUG this => D#544
  # DEBUG D#543 => D#544
  # DEBUG D#542 => D#544
  # DEBUG D#541 => D#542
  # DEBUG __p => __x_230
  # DEBUG this => D#541
  # DEBUG D#540 => D#541
  # DEBUG this => __x_230
  # DEBUG D#539 => &__x_230->_M_value_field
  # DEBUG __r => D#539
  # DEBUG D#472 => D#540
  # DEBUG this => D#472
  # DEBUG D#471 => D#472
  # DEBUG this => D#471
  # DEBUG this => NULL
  # DEBUG D.77058 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#539
  # DEBUG this => D#538
  # DEBUG this => D#539
  # DEBUG D#537 => &D#539->second
  # DEBUG this => D#537
  _45 = &MEM[(struct map *)__x_230 + 40B]._M_t;
  # DEBUG this => _45
  __x_46 = MEM[(struct _Rb_tree_node_base * *)__x_230 + 56B];
  # DEBUG D#58 => _45
  # DEBUG this => D#58
  # DEBUG this => _45
  # DEBUG __x => __x_46
  # DEBUG __x => __x_46
  if (__x_46 == 0B)
    goto <bb 55>;
  else
    goto <bb 56>;

  <bb 16>:

  <bb 17>:
  # __x_236 = PHI <__x_43(16), __x_54(54)>
  # DEBUG __x => __x_236
  __x_53 = MEM[(struct _Rb_tree_node_base * *)__x_236 + 24B];
  # DEBUG D#65 => __x_236
  # DEBUG __x => D#65
  # DEBUG this => this_7(D)
  # DEBUG __x => __x_53
  # DEBUG __x => __x_53
  if (__x_53 == 0B)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  __x_54 = MEM[(struct _Rb_tree_node_base * *)__x_236 + 16B];
  # DEBUG D#66 => __x_236
  # DEBUG __x => D#66
  # DEBUG __y => NULL
  # DEBUG D#544 => this_7(D)
  # DEBUG __p => __x_236
  # DEBUG this => D#544
  # DEBUG D#543 => D#544
  # DEBUG D#542 => D#544
  # DEBUG D#541 => D#542
  # DEBUG __p => __x_236
  # DEBUG this => D#541
  # DEBUG D#540 => D#541
  # DEBUG this => __x_236
  # DEBUG D#539 => &__x_236->_M_value_field
  # DEBUG __r => D#539
  # DEBUG D#472 => D#540
  # DEBUG this => D#472
  # DEBUG D#471 => D#472
  # DEBUG this => D#471
  # DEBUG this => NULL
  # DEBUG D.77058 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#539
  # DEBUG this => D#538
  # DEBUG this => D#539
  # DEBUG D#537 => &D#539->second
  # DEBUG this => D#537
  _55 = &MEM[(struct map *)__x_236 + 40B]._M_t;
  # DEBUG this => _55
  __x_56 = MEM[(struct _Rb_tree_node_base * *)__x_236 + 56B];
  # DEBUG D#58 => _55
  # DEBUG this => D#58
  # DEBUG this => _55
  # DEBUG __x => __x_56
  # DEBUG __x => __x_56
  if (__x_56 == 0B)
    goto <bb 50>;
  else
    goto <bb 51>;

  <bb 19>:

  <bb 20>:
  # __x_242 = PHI <__x_53(19), __x_64(49)>
  # DEBUG __x => __x_242
  __x_63 = MEM[(struct _Rb_tree_node_base * *)__x_242 + 24B];
  # DEBUG D#65 => __x_242
  # DEBUG __x => D#65
  # DEBUG this => this_7(D)
  # DEBUG __x => __x_63
  # DEBUG __x => __x_63
  if (__x_63 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  __x_64 = MEM[(struct _Rb_tree_node_base * *)__x_242 + 16B];
  # DEBUG D#66 => __x_242
  # DEBUG __x => D#66
  # DEBUG __y => NULL
  # DEBUG D#544 => this_7(D)
  # DEBUG __p => __x_242
  # DEBUG this => D#544
  # DEBUG D#543 => D#544
  # DEBUG D#542 => D#544
  # DEBUG D#541 => D#542
  # DEBUG __p => __x_242
  # DEBUG this => D#541
  # DEBUG D#540 => D#541
  # DEBUG this => __x_242
  # DEBUG D#539 => &__x_242->_M_value_field
  # DEBUG __r => D#539
  # DEBUG D#472 => D#540
  # DEBUG this => D#472
  # DEBUG D#471 => D#472
  # DEBUG this => D#471
  # DEBUG this => NULL
  # DEBUG D.77058 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#539
  # DEBUG this => D#538
  # DEBUG this => D#539
  # DEBUG D#537 => &D#539->second
  # DEBUG this => D#537
  _65 = &MEM[(struct map *)__x_242 + 40B]._M_t;
  # DEBUG this => _65
  __x_66 = MEM[(struct _Rb_tree_node_base * *)__x_242 + 56B];
  # DEBUG D#58 => _65
  # DEBUG this => D#58
  # DEBUG this => _65
  # DEBUG __x => __x_66
  # DEBUG __x => __x_66
  if (__x_66 == 0B)
    goto <bb 45>;
  else
    goto <bb 46>;

  <bb 22>:

  <bb 23>:
  # __x_248 = PHI <__x_63(22), __x_74(44)>
  # DEBUG __x => __x_248
  __x_73 = MEM[(struct _Rb_tree_node_base * *)__x_248 + 24B];
  # DEBUG D#65 => __x_248
  # DEBUG __x => D#65
  # DEBUG this => this_7(D)
  # DEBUG __x => __x_73
  # DEBUG __x => __x_73
  if (__x_73 == 0B)
    goto <bb 24>;
  else
    goto <bb 25>;

  <bb 24>:
  __x_74 = MEM[(struct _Rb_tree_node_base * *)__x_248 + 16B];
  # DEBUG D#66 => __x_248
  # DEBUG __x => D#66
  # DEBUG __y => NULL
  # DEBUG D#544 => this_7(D)
  # DEBUG __p => __x_248
  # DEBUG this => D#544
  # DEBUG D#543 => D#544
  # DEBUG D#542 => D#544
  # DEBUG D#541 => D#542
  # DEBUG __p => __x_248
  # DEBUG this => D#541
  # DEBUG D#540 => D#541
  # DEBUG this => __x_248
  # DEBUG D#539 => &__x_248->_M_value_field
  # DEBUG __r => D#539
  # DEBUG D#472 => D#540
  # DEBUG this => D#472
  # DEBUG D#471 => D#472
  # DEBUG this => D#471
  # DEBUG this => NULL
  # DEBUG D.77058 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#539
  # DEBUG this => D#538
  # DEBUG this => D#539
  # DEBUG D#537 => &D#539->second
  # DEBUG this => D#537
  _75 = &MEM[(struct map *)__x_248 + 40B]._M_t;
  # DEBUG this => _75
  __x_76 = MEM[(struct _Rb_tree_node_base * *)__x_248 + 56B];
  # DEBUG D#58 => _75
  # DEBUG this => D#58
  # DEBUG this => _75
  # DEBUG __x => __x_76
  # DEBUG __x => __x_76
  if (__x_76 == 0B)
    goto <bb 40>;
  else
    goto <bb 41>;

  <bb 25>:

  <bb 26>:
  # __x_254 = PHI <__x_73(25), __x_84(39)>
  # DEBUG __x => __x_254
  __x_83 = MEM[(struct _Rb_tree_node_base * *)__x_254 + 24B];
  # DEBUG D#65 => __x_254
  # DEBUG __x => D#65
  # DEBUG this => this_7(D)
  # DEBUG __x => __x_83
  # DEBUG __x => __x_83
  if (__x_83 == 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  __x_84 = MEM[(struct _Rb_tree_node_base * *)__x_254 + 16B];
  # DEBUG D#66 => __x_254
  # DEBUG __x => D#66
  # DEBUG __y => NULL
  # DEBUG D#544 => this_7(D)
  # DEBUG __p => __x_254
  # DEBUG this => D#544
  # DEBUG D#543 => D#544
  # DEBUG D#542 => D#544
  # DEBUG D#541 => D#542
  # DEBUG __p => __x_254
  # DEBUG this => D#541
  # DEBUG D#540 => D#541
  # DEBUG this => __x_254
  # DEBUG D#539 => &__x_254->_M_value_field
  # DEBUG __r => D#539
  # DEBUG D#472 => D#540
  # DEBUG this => D#472
  # DEBUG D#471 => D#472
  # DEBUG this => D#471
  # DEBUG this => NULL
  # DEBUG D.77058 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#539
  # DEBUG this => D#538
  # DEBUG this => D#539
  # DEBUG D#537 => &D#539->second
  # DEBUG this => D#537
  _85 = &MEM[(struct map *)__x_254 + 40B]._M_t;
  # DEBUG this => _85
  __x_86 = MEM[(struct _Rb_tree_node_base * *)__x_254 + 56B];
  # DEBUG D#58 => _85
  # DEBUG this => D#58
  # DEBUG this => _85
  # DEBUG __x => __x_86
  # DEBUG __x => __x_86
  if (__x_86 == 0B)
    goto <bb 35>;
  else
    goto <bb 36>;

  <bb 28>:

  <bb 29>:
  # __x_260 = PHI <__x_83(28), __x_94(34)>
  # DEBUG __x => __x_260
  _93 = MEM[(struct _Rb_tree_node_base * *)__x_260 + 24B];
  # DEBUG D#65 => __x_260
  # DEBUG __x => D#65
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_erase (this_7(D), _93);
  __x_94 = MEM[(struct _Rb_tree_node_base * *)__x_260 + 16B];
  # DEBUG D#66 => __x_260
  # DEBUG __x => D#66
  # DEBUG __y => NULL
  # DEBUG D#544 => this_7(D)
  # DEBUG __p => __x_260
  # DEBUG this => D#544
  # DEBUG D#543 => D#544
  # DEBUG D#542 => D#544
  # DEBUG D#541 => D#542
  # DEBUG __p => __x_260
  # DEBUG this => D#541
  # DEBUG D#540 => D#541
  # DEBUG this => __x_260
  # DEBUG D#539 => &__x_260->_M_value_field
  # DEBUG __r => D#539
  # DEBUG D#472 => D#540
  # DEBUG this => D#472
  # DEBUG D#471 => D#472
  # DEBUG this => D#471
  # DEBUG this => NULL
  # DEBUG D.77058 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#539
  # DEBUG this => D#538
  # DEBUG this => D#539
  # DEBUG D#537 => &D#539->second
  # DEBUG this => D#537
  _95 = &MEM[(struct map *)__x_260 + 40B]._M_t;
  # DEBUG this => _95
  __x_96 = MEM[(struct _Rb_tree_node_base * *)__x_260 + 56B];
  # DEBUG D#58 => _95
  # DEBUG this => D#58
  # DEBUG this => _95
  # DEBUG __x => __x_96
  # DEBUG __x => __x_96
  if (__x_96 == 0B)
    goto <bb 30>;
  else
    goto <bb 31>;

  <bb 30>:
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)_95]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  MEM[(struct  &)__x_260 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#295 => D#543
  # DEBUG __p => __x_260
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG D#293 => 1
  # DEBUG __p => __x_260
  # DEBUG __a => D#292
  # DEBUG __n => D#293
  # DEBUG D#291 => D#293
  # DEBUG D#290 => D#292
  # DEBUG D#288 => D#290
  # DEBUG D#289 => D#291
  # DEBUG __p => __x_260
  # DEBUG this => D#288
  # DEBUG D.86416 => D#289
  operator delete (__x_260);
  # DEBUG __x => __x_94
  # DEBUG __x => __x_94
  if (__x_94 == 0B)
    goto <bb 27>;
  else
    goto <bb 34>;

  <bb 31>:

  <bb 32>:
  # __x_263 = PHI <__x_96(31), __x_100(33)>
  # DEBUG __x => __x_263
  _99 = MEM[(struct _Rb_tree_node_base * *)__x_263 + 24B];
  # DEBUG D#107 => __x_263
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (_95, _99);
  __x_100 = MEM[(struct _Rb_tree_node_base * *)__x_263 + 16B];
  # DEBUG D#108 => __x_263
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => _95
  # DEBUG __p => __x_263
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_263
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_263
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_263
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_263
  # DEBUG this => D#425
  # DEBUG D.86429 => D#426
  operator delete (__x_263);
  # DEBUG __x => __x_100
  # DEBUG __x => __x_100
  if (__x_100 == 0B)
    goto <bb 30>;
  else
    goto <bb 33>;

  <bb 33>:
  goto <bb 32>;

  <bb 34>:
  goto <bb 29>;

  <bb 35>:
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)_85]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  MEM[(struct  &)__x_254 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#295 => D#543
  # DEBUG __p => __x_254
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG D#293 => 1
  # DEBUG __p => __x_254
  # DEBUG __a => D#292
  # DEBUG __n => D#293
  # DEBUG D#291 => D#293
  # DEBUG D#290 => D#292
  # DEBUG D#288 => D#290
  # DEBUG D#289 => D#291
  # DEBUG __p => __x_254
  # DEBUG this => D#288
  # DEBUG D.86380 => D#289
  operator delete (__x_254);
  # DEBUG __x => __x_84
  # DEBUG __x => __x_84
  if (__x_84 == 0B)
    goto <bb 24>;
  else
    goto <bb 39>;

  <bb 36>:

  <bb 37>:
  # __x_257 = PHI <__x_86(36), __x_90(38)>
  # DEBUG __x => __x_257
  _89 = MEM[(struct _Rb_tree_node_base * *)__x_257 + 24B];
  # DEBUG D#107 => __x_257
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (_85, _89);
  __x_90 = MEM[(struct _Rb_tree_node_base * *)__x_257 + 16B];
  # DEBUG D#108 => __x_257
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => _85
  # DEBUG __p => __x_257
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_257
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_257
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_257
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_257
  # DEBUG this => D#425
  # DEBUG D.86393 => D#426
  operator delete (__x_257);
  # DEBUG __x => __x_90
  # DEBUG __x => __x_90
  if (__x_90 == 0B)
    goto <bb 35>;
  else
    goto <bb 38>;

  <bb 38>:
  goto <bb 37>;

  <bb 39>:
  goto <bb 26>;

  <bb 40>:
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)_75]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  MEM[(struct  &)__x_248 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#295 => D#543
  # DEBUG __p => __x_248
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG D#293 => 1
  # DEBUG __p => __x_248
  # DEBUG __a => D#292
  # DEBUG __n => D#293
  # DEBUG D#291 => D#293
  # DEBUG D#290 => D#292
  # DEBUG D#288 => D#290
  # DEBUG D#289 => D#291
  # DEBUG __p => __x_248
  # DEBUG this => D#288
  # DEBUG D.86344 => D#289
  operator delete (__x_248);
  # DEBUG __x => __x_74
  # DEBUG __x => __x_74
  if (__x_74 == 0B)
    goto <bb 21>;
  else
    goto <bb 44>;

  <bb 41>:

  <bb 42>:
  # __x_251 = PHI <__x_76(41), __x_80(43)>
  # DEBUG __x => __x_251
  _79 = MEM[(struct _Rb_tree_node_base * *)__x_251 + 24B];
  # DEBUG D#107 => __x_251
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (_75, _79);
  __x_80 = MEM[(struct _Rb_tree_node_base * *)__x_251 + 16B];
  # DEBUG D#108 => __x_251
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => _75
  # DEBUG __p => __x_251
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_251
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_251
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_251
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_251
  # DEBUG this => D#425
  # DEBUG D.86357 => D#426
  operator delete (__x_251);
  # DEBUG __x => __x_80
  # DEBUG __x => __x_80
  if (__x_80 == 0B)
    goto <bb 40>;
  else
    goto <bb 43>;

  <bb 43>:
  goto <bb 42>;

  <bb 44>:
  goto <bb 23>;

  <bb 45>:
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)_65]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  MEM[(struct  &)__x_242 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#295 => D#543
  # DEBUG __p => __x_242
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG D#293 => 1
  # DEBUG __p => __x_242
  # DEBUG __a => D#292
  # DEBUG __n => D#293
  # DEBUG D#291 => D#293
  # DEBUG D#290 => D#292
  # DEBUG D#288 => D#290
  # DEBUG D#289 => D#291
  # DEBUG __p => __x_242
  # DEBUG this => D#288
  # DEBUG D.86308 => D#289
  operator delete (__x_242);
  # DEBUG __x => __x_64
  # DEBUG __x => __x_64
  if (__x_64 == 0B)
    goto <bb 18>;
  else
    goto <bb 49>;

  <bb 46>:

  <bb 47>:
  # __x_245 = PHI <__x_66(46), __x_70(48)>
  # DEBUG __x => __x_245
  _69 = MEM[(struct _Rb_tree_node_base * *)__x_245 + 24B];
  # DEBUG D#107 => __x_245
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (_65, _69);
  __x_70 = MEM[(struct _Rb_tree_node_base * *)__x_245 + 16B];
  # DEBUG D#108 => __x_245
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => _65
  # DEBUG __p => __x_245
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_245
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_245
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_245
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_245
  # DEBUG this => D#425
  # DEBUG D.86321 => D#426
  operator delete (__x_245);
  # DEBUG __x => __x_70
  # DEBUG __x => __x_70
  if (__x_70 == 0B)
    goto <bb 45>;
  else
    goto <bb 48>;

  <bb 48>:
  goto <bb 47>;

  <bb 49>:
  goto <bb 20>;

  <bb 50>:
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)_55]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  MEM[(struct  &)__x_236 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#295 => D#543
  # DEBUG __p => __x_236
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG D#293 => 1
  # DEBUG __p => __x_236
  # DEBUG __a => D#292
  # DEBUG __n => D#293
  # DEBUG D#291 => D#293
  # DEBUG D#290 => D#292
  # DEBUG D#288 => D#290
  # DEBUG D#289 => D#291
  # DEBUG __p => __x_236
  # DEBUG this => D#288
  # DEBUG D.86272 => D#289
  operator delete (__x_236);
  # DEBUG __x => __x_54
  # DEBUG __x => __x_54
  if (__x_54 == 0B)
    goto <bb 15>;
  else
    goto <bb 54>;

  <bb 51>:

  <bb 52>:
  # __x_239 = PHI <__x_56(51), __x_60(53)>
  # DEBUG __x => __x_239
  _59 = MEM[(struct _Rb_tree_node_base * *)__x_239 + 24B];
  # DEBUG D#107 => __x_239
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (_55, _59);
  __x_60 = MEM[(struct _Rb_tree_node_base * *)__x_239 + 16B];
  # DEBUG D#108 => __x_239
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => _55
  # DEBUG __p => __x_239
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_239
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_239
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_239
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_239
  # DEBUG this => D#425
  # DEBUG D.86285 => D#426
  operator delete (__x_239);
  # DEBUG __x => __x_60
  # DEBUG __x => __x_60
  if (__x_60 == 0B)
    goto <bb 50>;
  else
    goto <bb 53>;

  <bb 53>:
  goto <bb 52>;

  <bb 54>:
  goto <bb 17>;

  <bb 55>:
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)_45]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  MEM[(struct  &)__x_230 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#295 => D#543
  # DEBUG __p => __x_230
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG D#293 => 1
  # DEBUG __p => __x_230
  # DEBUG __a => D#292
  # DEBUG __n => D#293
  # DEBUG D#291 => D#293
  # DEBUG D#290 => D#292
  # DEBUG D#288 => D#290
  # DEBUG D#289 => D#291
  # DEBUG __p => __x_230
  # DEBUG this => D#288
  # DEBUG D.86236 => D#289
  operator delete (__x_230);
  # DEBUG __x => __x_44
  # DEBUG __x => __x_44
  if (__x_44 == 0B)
    goto <bb 12>;
  else
    goto <bb 59>;

  <bb 56>:

  <bb 57>:
  # __x_233 = PHI <__x_46(56), __x_50(58)>
  # DEBUG __x => __x_233
  _49 = MEM[(struct _Rb_tree_node_base * *)__x_233 + 24B];
  # DEBUG D#107 => __x_233
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (_45, _49);
  __x_50 = MEM[(struct _Rb_tree_node_base * *)__x_233 + 16B];
  # DEBUG D#108 => __x_233
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => _45
  # DEBUG __p => __x_233
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_233
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_233
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_233
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_233
  # DEBUG this => D#425
  # DEBUG D.86249 => D#426
  operator delete (__x_233);
  # DEBUG __x => __x_50
  # DEBUG __x => __x_50
  if (__x_50 == 0B)
    goto <bb 55>;
  else
    goto <bb 58>;

  <bb 58>:
  goto <bb 57>;

  <bb 59>:
  goto <bb 14>;

  <bb 60>:
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)_35]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  MEM[(struct  &)__x_224 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#295 => D#543
  # DEBUG __p => __x_224
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG D#293 => 1
  # DEBUG __p => __x_224
  # DEBUG __a => D#292
  # DEBUG __n => D#293
  # DEBUG D#291 => D#293
  # DEBUG D#290 => D#292
  # DEBUG D#288 => D#290
  # DEBUG D#289 => D#291
  # DEBUG __p => __x_224
  # DEBUG this => D#288
  # DEBUG D.86200 => D#289
  operator delete (__x_224);
  # DEBUG __x => __x_34
  # DEBUG __x => __x_34
  if (__x_34 == 0B)
    goto <bb 9>;
  else
    goto <bb 64>;

  <bb 61>:

  <bb 62>:
  # __x_227 = PHI <__x_36(61), __x_40(63)>
  # DEBUG __x => __x_227
  _39 = MEM[(struct _Rb_tree_node_base * *)__x_227 + 24B];
  # DEBUG D#107 => __x_227
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (_35, _39);
  __x_40 = MEM[(struct _Rb_tree_node_base * *)__x_227 + 16B];
  # DEBUG D#108 => __x_227
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => _35
  # DEBUG __p => __x_227
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_227
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_227
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_227
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_227
  # DEBUG this => D#425
  # DEBUG D.86213 => D#426
  operator delete (__x_227);
  # DEBUG __x => __x_40
  # DEBUG __x => __x_40
  if (__x_40 == 0B)
    goto <bb 60>;
  else
    goto <bb 63>;

  <bb 63>:
  goto <bb 62>;

  <bb 64>:
  goto <bb 11>;

  <bb 65>:
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)_26]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  MEM[(struct  &)__x_216 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#295 => D#543
  # DEBUG __p => __x_216
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG D#293 => 1
  # DEBUG __p => __x_216
  # DEBUG __a => D#292
  # DEBUG __n => D#293
  # DEBUG D#291 => D#293
  # DEBUG D#290 => D#292
  # DEBUG D#288 => D#290
  # DEBUG D#289 => D#291
  # DEBUG __p => __x_216
  # DEBUG this => D#288
  # DEBUG D.86164 => D#289
  operator delete (__x_216);
  # DEBUG __x => __x_25
  # DEBUG __x => __x_25
  if (__x_25 == 0B)
    goto <bb 6>;
  else
    goto <bb 69>;

  <bb 66>:

  <bb 67>:
  # __x_215 = PHI <__x_27(66), __x_30(68)>
  # DEBUG __x => __x_215
  _29 = MEM[(struct _Rb_tree_node_base * *)__x_215 + 24B];
  # DEBUG D#107 => __x_215
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (_26, _29);
  __x_30 = MEM[(struct _Rb_tree_node_base * *)__x_215 + 16B];
  # DEBUG D#108 => __x_215
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => _26
  # DEBUG __p => __x_215
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_215
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_215
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_215
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_215
  # DEBUG this => D#425
  # DEBUG D.86177 => D#426
  operator delete (__x_215);
  # DEBUG __x => __x_30
  # DEBUG __x => __x_30
  if (__x_30 == 0B)
    goto <bb 65>;
  else
    goto <bb 68>;

  <bb 68>:
  goto <bb 67>;

  <bb 69>:
  goto <bb 8>;

  <bb 70>:
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)_9]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  MEM[(struct  &)__x_212 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#295 => D#543
  # DEBUG __p => __x_212
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG D#293 => 1
  # DEBUG __p => __x_212
  # DEBUG __a => D#292
  # DEBUG __n => D#293
  # DEBUG D#291 => D#293
  # DEBUG D#290 => D#292
  # DEBUG D#288 => D#290
  # DEBUG D#289 => D#291
  # DEBUG __p => __x_212
  # DEBUG this => D#288
  # DEBUG D.77893 => D#289
  operator delete (__x_212);
  # DEBUG __x => __x_11
  # DEBUG __x => __x_11
  if (__x_11 == 0B)
    goto <bb 3>;
  else
    goto <bb 74>;

  <bb 71>:

  <bb 72>:
  # __x_217 = PHI <__x_5(71), __x_22(73)>
  # DEBUG __x => __x_217
  _21 = MEM[(struct _Rb_tree_node_base * *)__x_217 + 24B];
  # DEBUG D#107 => __x_217
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (_9, _21);
  __x_22 = MEM[(struct _Rb_tree_node_base * *)__x_217 + 16B];
  # DEBUG D#108 => __x_217
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => _9
  # DEBUG __p => __x_217
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_217
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_217
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_217
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_217
  # DEBUG this => D#425
  # DEBUG D.86141 => D#426
  operator delete (__x_217);
  # DEBUG __x => __x_22
  # DEBUG __x => __x_22
  if (__x_22 == 0B)
    goto <bb 70>;
  else
    goto <bb 73>;

  <bb 73>:
  goto <bb 72>;

  <bb 74>:
  goto <bb 5>;

}



;; Function std::vector<_Tp, _Alloc>::~vector() [with _Tp = std::map<int, std::map<int, std::pair<int, int> > >; _Alloc = std::allocator<std::map<int, std::map<int, std::pair<int, int> > > >] (_ZNSt6vectorISt3mapIiS0_IiSt4pairIiiESt4lessIiESaIS1_IKiS2_EEES4_SaIS1_IS5_S8_EEESaISB_EED2Ev, funcdef_no=2549, decl_uid=46678, cgraph_uid=671, symbol_order=673)

Trying loop 1 as candidate
loop 1 is not innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is not innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is innermost
loop is not parallel according to graphite
std::vector<_Tp, _Alloc>::~vector() [with _Tp = std::map<int, std::map<int, std::pair<int, int> > >; _Alloc = std::allocator<std::map<int, std::map<int, std::pair<int, int> > > >] (struct vector * const this)
{
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct map * __first;
  struct map * _4;
  struct _Rep_type * _8;
  struct _Rb_tree_node_base * _25;
  struct _Rep_type * _27;
  struct _Rb_tree_node_base * _30;
  struct map * pretmp_36;
  struct map * prephitmp_37;

  <bb 2>:
  # DEBUG D#550 => &this_1(D)->D.46681
  # DEBUG this => D#550
  _4 = this_1(D)->D.46681._M_impl._M_finish;
  __first_5 = this_1(D)->D.46681._M_impl._M_start;
  # DEBUG __first => __first_5
  # DEBUG __last => _4
  # DEBUG __first => __first_5
  if (_4 == __first_5)
    goto <bb 15>;
  else
    goto <bb 3>;

  <bb 3>:

  <bb 4>:
  # __first_49 = PHI <__first_5(3), __first_10(6)>
  # DEBUG __first => __first_49
  # DEBUG __r => __first_49
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _8 = &__first_49->_M_t;
  # DEBUG this => _8
  __x_9 = MEM[(struct _Rb_tree_node_base * *)__first_49 + 16B];
  # DEBUG D#42 => _8
  # DEBUG this => D#42
  # DEBUG this => _8
  # DEBUG __x => __x_9
  # DEBUG __x => __x_9
  if (__x_9 == 0B)
    goto <bb 5>;
  else
    goto <bb 7>;

  <bb 5>:
  # DEBUG D#545 => &MEM[(struct _Rb_tree *)_8]._M_impl
  # DEBUG this => D#545
  # DEBUG this => D#545
  # DEBUG this => D#545
  MEM[(struct  &)__first_49] ={v} {CLOBBER};
  __first_10 = __first_49 + 48;
  # DEBUG __first => __first_10
  # DEBUG __first => __first_10
  if (_4 == __first_10)
    goto <bb 14>;
  else
    goto <bb 6>;

  <bb 6>:
  goto <bb 4>;

  <bb 7>:

  <bb 8>:
  # __x_53 = PHI <__x_9(7), __x_26(10)>
  # DEBUG __x => __x_53
  _25 = MEM[(struct _Rb_tree_node_base * *)__x_53 + 24B];
  # DEBUG D#65 => __x_53
  # DEBUG __x => D#65
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_erase (_8, _25);
  __x_26 = MEM[(struct _Rb_tree_node_base * *)__x_53 + 16B];
  # DEBUG D#66 => __x_53
  # DEBUG __x => D#66
  # DEBUG __y => NULL
  # DEBUG D#544 => _8
  # DEBUG __p => __x_53
  # DEBUG this => D#544
  # DEBUG D#543 => D#544
  # DEBUG D#542 => D#544
  # DEBUG D#541 => D#542
  # DEBUG __p => __x_53
  # DEBUG this => D#541
  # DEBUG D#540 => D#541
  # DEBUG this => __x_53
  # DEBUG D#539 => &__x_53->_M_value_field
  # DEBUG __r => D#539
  # DEBUG D#472 => D#540
  # DEBUG this => D#472
  # DEBUG D#471 => D#472
  # DEBUG this => D#471
  # DEBUG this => NULL
  # DEBUG D.77058 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#539
  # DEBUG this => D#538
  # DEBUG this => D#539
  # DEBUG D#537 => &D#539->second
  # DEBUG this => D#537
  _27 = &MEM[(struct map *)__x_53 + 40B]._M_t;
  # DEBUG this => _27
  __x_28 = MEM[(struct _Rb_tree_node_base * *)__x_53 + 56B];
  # DEBUG D#58 => _27
  # DEBUG this => D#58
  # DEBUG this => _27
  # DEBUG __x => __x_28
  # DEBUG __x => __x_28
  if (__x_28 == 0B)
    goto <bb 9>;
  else
    goto <bb 11>;

  <bb 9>:
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)_27]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  MEM[(struct  &)__x_53 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#295 => D#543
  # DEBUG __p => __x_53
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG D#293 => 1
  # DEBUG __p => __x_53
  # DEBUG __a => D#292
  # DEBUG __n => D#293
  # DEBUG D#291 => D#293
  # DEBUG D#290 => D#292
  # DEBUG D#288 => D#290
  # DEBUG D#289 => D#291
  # DEBUG __p => __x_53
  # DEBUG this => D#288
  # DEBUG D.86488 => D#289
  operator delete (__x_53);
  # DEBUG __x => __x_26
  # DEBUG __x => __x_26
  if (__x_26 == 0B)
    goto <bb 5>;
  else
    goto <bb 10>;

  <bb 10>:
  goto <bb 8>;

  <bb 11>:

  <bb 12>:
  # __x_52 = PHI <__x_28(11), __x_31(13)>
  # DEBUG __x => __x_52
  _30 = MEM[(struct _Rb_tree_node_base * *)__x_52 + 24B];
  # DEBUG D#107 => __x_52
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (_27, _30);
  __x_31 = MEM[(struct _Rb_tree_node_base * *)__x_52 + 16B];
  # DEBUG D#108 => __x_52
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => _27
  # DEBUG __p => __x_52
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_52
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_52
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_52
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_52
  # DEBUG this => D#425
  # DEBUG D.86501 => D#426
  operator delete (__x_52);
  # DEBUG __x => __x_31
  # DEBUG __x => __x_31
  if (__x_31 == 0B)
    goto <bb 9>;
  else
    goto <bb 13>;

  <bb 13>:
  goto <bb 12>;

  <bb 14>:
  pretmp_36 = MEM[(struct _Vector_base *)this_1(D)]._M_impl._M_start;

  <bb 15>:
  # prephitmp_37 = PHI <pretmp_36(14), __first_5(2)>
  # DEBUG D#551 => &this_1(D)->D.46681
  # DEBUG this => D#551
  # DEBUG D#184 => D#551->_M_impl._M_end_of_storage
  # DEBUG D#183 => (long int) D#184
  # DEBUG D#1073 => MEM[(struct _Vector_base *)this_1(D)]._M_impl._M_start
  # DEBUG D#182 => (long int) D#1073
  # DEBUG D#181 => D#183 - D#182
  # DEBUG D#180 => D#181 /[ex] 48
  # DEBUG D#177 => D#551
  # DEBUG D#178 => (long unsigned int) D#180
  # DEBUG __p => D#1073
  # DEBUG this => D#177
  # DEBUG __n => D#178
  # DEBUG D#176 => D#178
  # DEBUG D#175 => D#177
  if (prephitmp_37 != 0B)
    goto <bb 16>;
  else
    goto <bb 17>;

  <bb 16>:
  # DEBUG D#174 => &D#175->_M_impl
  # DEBUG D#172 => D#174
  # DEBUG D#173 => D#176
  # DEBUG __p => D#1073
  # DEBUG __a => D#172
  # DEBUG __n => D#173
  # DEBUG D#171 => D#173
  # DEBUG D#170 => D#172
  # DEBUG D#168 => D#170
  # DEBUG D#169 => D#171
  # DEBUG __p => D#1073
  # DEBUG this => D#168
  # DEBUG D.78017 => D#169
  operator delete (prephitmp_37);

  <bb 17>:
  # DEBUG D#179 => &D#551->_M_impl
  # DEBUG this => D#179
  # DEBUG this => D#179
  # DEBUG this => D#179
  MEM[(struct  &)this_1(D)] ={v} {CLOBBER};
  return;

}



;; Function AnyNet::~AnyNet() (_ZN6AnyNetD2Ev, funcdef_no=2494, decl_uid=47475, cgraph_uid=616, symbol_order=618)

Trying loop 4 as candidate
loop 4 is not innermost
loop is not parallel according to graphite
Trying loop 7 as candidate
loop 7 is not innermost
loop is not parallel according to graphite
Trying loop 8 as candidate
loop 8 is innermost
loop is not parallel according to graphite
Trying loop 5 as candidate
loop 5 is not innermost
loop is not parallel according to graphite
Trying loop 6 as candidate
loop 6 is innermost
loop is not parallel according to graphite
Trying loop 1 as candidate
loop 1 is not innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is not innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is innermost
loop is not parallel according to graphite
AnyNet::~AnyNet() (struct AnyNet * const this)
{
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct map * __first;
  struct map * __first;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node_base * const iter$_M_node;
  int i;
  long unsigned int _7;
  struct map & _8;
  long unsigned int _9;
  struct _Rep_type * _12;
  struct map * _18;
  struct _Rep_type * _20;
  struct Network * _21;
  struct map * _25;
  struct _Rb_tree_node_base * _26;
  struct map & _27;
  struct _Rb_tree_node_base * _30;
  char * const _31;
  const char * _32;
  struct _Rb_tree_node_base * _33;
  struct map * _34;
  struct map * pretmp_41;
  struct map * prephitmp_42;
  struct _Rb_tree_node_base * _51;
  struct _Rep_type * _56;
  struct _Rep_type * _62;
  struct _Rb_tree_node_base * _66;
  struct _Rb_tree_node_base * _70;
  struct _Rep_type * _72;
  struct _Rb_tree_node_base * _76;
  struct map * _89;
  struct map * prephitmp_90;
  struct map * pretmp_94;
  struct map * prephitmp_95;
  unsigned int ivtmp_109;
  struct map * pretmp_114;
  struct map * prephitmp_115;
  struct _Rb_tree_node_base * _123;
  unsigned int ivtmp_148;

  <bb 2>:
  this_5(D)->D.47478.D.43856.D.32618._vptr.Module = &MEM[(void *)&_ZTV6AnyNet + 16B];
  # DEBUG i => 0
  # DEBUG i => 0
  pretmp_41 = MEM[(struct map * *)this_5(D) + 440B];

  <bb 3>:
  # i_134 = PHI <i_14(13), 0(2)>
  # prephitmp_42 = PHI <prephitmp_90(13), pretmp_41(2)>
  # ivtmp_148 = PHI <ivtmp_109(13), 2(2)>
  # DEBUG i => i_134
  _7 = (long unsigned int) i_134;
  # DEBUG D#553 => &this_5(D)->router_list
  # DEBUG D#34 => D#553
  # DEBUG __n => _7
  # DEBUG this => D#34
  _9 = _7 * 48;
  _8 = prephitmp_42 + _9;
  # DEBUG this => NULL
  iter$_M_node_11 = MEM[(struct _Rb_tree_node_base * *)_8 + 24B];
  # DEBUG D#70 => D#71
  # DEBUG this => D#70
  # DEBUG this => NULL
  # DEBUG __x => iter$_M_node_11
  # DEBUG iter$_M_node => iter$_M_node_11
  # DEBUG iter$_M_node => iter$_M_node_11
  # DEBUG D#555 => &this_5(D)->router_list
  # DEBUG D#34 => D#555
  # DEBUG __n => _7
  # DEBUG this => D#34
  # DEBUG this => NULL
  # DEBUG this => D#72
  _123 = &MEM[(struct _Rb_tree *)_8]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => _123
  # DEBUG this => &iter
  # DEBUG __x => &D.56520
  if (iter$_M_node_11 != _123)
    goto <bb 4>;
  else
    goto <bb 12>;

  <bb 4>:

  <bb 5>:
  # iter$_M_node_136 = PHI <iter$_M_node_11(4), iter$_M_node_28(8)>
  # DEBUG iter$_M_node => iter$_M_node_136
  # DEBUG D#555 => &this_5(D)->router_list
  # DEBUG D#34 => D#555
  # DEBUG __n => _7
  # DEBUG this => D#34
  # DEBUG this => NULL
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => _123
  # DEBUG this => &iter
  # DEBUG __x => &D.56520
  # DEBUG this => &iter
  # DEBUG this => iter$_M_node_136
  # DEBUG D#554 => &MEM[(struct _Rb_tree_node *)iter$_M_node_136]._M_value_field
  # DEBUG __r => D#554
  # DEBUG D#557 => &MEM[(struct pair *)iter$_M_node_136 + 32B].second
  # DEBUG this => D#557
  _12 = &MEM[(struct map *)iter$_M_node_136 + 40B]._M_t;
  # DEBUG this => _12
  __x_29 = MEM[(struct _Rb_tree_node_base * *)iter$_M_node_136 + 56B];
  # DEBUG D#58 => _12
  # DEBUG this => D#58
  # DEBUG this => _12
  # DEBUG __x => __x_29
  # DEBUG __x => __x_29
  if (__x_29 == 0B)
    goto <bb 6>;
  else
    goto <bb 9>;

  <bb 6>:
  # DEBUG D#552 => &MEM[(struct _Rb_tree *)_12]._M_impl
  # DEBUG this => D#552
  MEM[(struct _Rb_tree_impl *)iter$_M_node_136 + 40B]._M_header._M_parent = 0B;
  _30 = &MEM[(struct _Rb_tree_impl *)iter$_M_node_136 + 40B]._M_header;
  MEM[(struct _Rb_tree_impl *)iter$_M_node_136 + 40B]._M_header._M_left = _30;
  MEM[(struct _Rb_tree_impl *)iter$_M_node_136 + 40B]._M_header._M_right = _30;
  MEM[(struct _Rb_tree_impl *)iter$_M_node_136 + 40B]._M_node_count = 0;
  # DEBUG this => &iter
  iter$_M_node_28 = std::_Rb_tree_increment (iter$_M_node_136);
  # DEBUG iter$_M_node => iter$_M_node_28
  # DEBUG iter$_M_node => iter$_M_node_28
  # DEBUG D#555 => &this_5(D)->router_list
  _25 = MEM[(struct map * *)this_5(D) + 440B];
  # DEBUG D#34 => D#555
  # DEBUG __n => _7
  # DEBUG this => D#34
  _27 = _25 + _9;
  # DEBUG this => NULL
  # DEBUG this => D#72
  _26 = &MEM[(struct _Rb_tree *)_27]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => _26
  # DEBUG this => &iter
  # DEBUG __x => &D.56520
  if (_26 != iter$_M_node_28)
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 7>:
  # _89 = PHI <_25(6)>
  goto <bb 12>;

  <bb 8>:
  goto <bb 5>;

  <bb 9>:

  <bb 10>:
  # __x_138 = PHI <__x_29(9), __x_52(11)>
  # DEBUG __x => __x_138
  _51 = MEM[(struct _Rb_tree_node_base * *)__x_138 + 24B];
  # DEBUG D#107 => __x_138
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (_12, _51);
  __x_52 = MEM[(struct _Rb_tree_node_base * *)__x_138 + 16B];
  # DEBUG D#108 => __x_138
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => _12
  # DEBUG __p => __x_138
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_138
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_138
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_138
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_138
  # DEBUG this => D#425
  # DEBUG D.86526 => D#426
  operator delete (__x_138);
  # DEBUG __x => __x_52
  # DEBUG __x => __x_52
  if (__x_52 == 0B)
    goto <bb 6>;
  else
    goto <bb 11>;

  <bb 11>:
  goto <bb 10>;

  <bb 12>:
  # prephitmp_90 = PHI <_89(7), prephitmp_42(3)>
  # DEBUG D#556 => {CLOBBER}
  # DEBUG iter$_M_node => D#556
  i_14 = i_134 + 1;
  # DEBUG i => i_14
  # DEBUG i => i_14
  ivtmp_109 = ivtmp_148 - 1;
  if (ivtmp_109 == 0)
    goto <bb 14>;
  else
    goto <bb 13>;

  <bb 13>:
  goto <bb 3>;

  <bb 14>:
  # DEBUG D#1077 => &this_5(D)->routing_table
  # DEBUG this => D#1077
  # DEBUG D#466 => &D#1077->D.47428
  # DEBUG this => D#466
  _18 = MEM[(struct vector *)this_5(D) + 464B].D.47428._M_impl._M_finish;
  __first_60 = MEM[(struct vector *)this_5(D) + 464B].D.47428._M_impl._M_start;
  # DEBUG __first => __first_60
  # DEBUG __last => _18
  # DEBUG __first => __first_60
  if (_18 == __first_60)
    goto <bb 23>;
  else
    goto <bb 15>;

  <bb 15>:

  <bb 16>:
  # __first_140 = PHI <__first_60(15), __first_64(18)>
  # DEBUG __first => __first_140
  # DEBUG __r => __first_140
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _62 = &__first_140->_M_t;
  # DEBUG this => _62
  __x_63 = MEM[(struct _Rb_tree_node_base * *)__first_140 + 16B];
  # DEBUG D#41 => _62
  # DEBUG this => D#41
  # DEBUG this => _62
  # DEBUG __x => __x_63
  # DEBUG __x => __x_63
  if (__x_63 == 0B)
    goto <bb 17>;
  else
    goto <bb 19>;

  <bb 17>:
  # DEBUG D#464 => &MEM[(struct _Rb_tree *)_62]._M_impl
  # DEBUG this => D#464
  # DEBUG this => D#464
  # DEBUG this => D#464
  MEM[(struct  &)__first_140] ={v} {CLOBBER};
  __first_64 = __first_140 + 48;
  # DEBUG __first => __first_64
  # DEBUG __first => __first_64
  if (_18 == __first_64)
    goto <bb 22>;
  else
    goto <bb 18>;

  <bb 18>:
  goto <bb 16>;

  <bb 19>:

  <bb 20>:
  # __x_137 = PHI <__x_63(19), __x_67(21)>
  # DEBUG __x => __x_137
  _66 = MEM[(struct _Rb_tree_node_base * *)__x_137 + 24B];
  # DEBUG D#63 => __x_137
  # DEBUG __x => D#63
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (_62, _66);
  __x_67 = MEM[(struct _Rb_tree_node_base * *)__x_137 + 16B];
  # DEBUG D#64 => __x_137
  # DEBUG __x => D#64
  # DEBUG __y => NULL
  # DEBUG D#463 => _62
  # DEBUG __p => __x_137
  # DEBUG this => D#463
  # DEBUG D#462 => D#463
  # DEBUG D#461 => D#463
  # DEBUG D#460 => D#463
  # DEBUG D#458 => D#460
  # DEBUG D#459 => __x_137
  # DEBUG this => D#458
  # DEBUG __p => D#459
  # DEBUG D#457 => D#458
  # DEBUG D#456 => D#459
  # DEBUG D#455 => D#459
  # DEBUG this => D#455
  # DEBUG D#454 => &D#456->_M_value_field
  # DEBUG __r => D#454
  # DEBUG D#453 => D#457
  # DEBUG this => D#453
  # DEBUG D#452 => D#453
  # DEBUG this => D#452
  # DEBUG this => NULL
  # DEBUG D.76846 => NULL
  # DEBUG this => NULL
  # DEBUG D#165 => D#454
  # DEBUG this => D#164
  # DEBUG __p => D#165
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#461
  # DEBUG __p => __x_137
  # DEBUG this => D#462
  # DEBUG D#287 => 1
  # DEBUG __p => __x_137
  # DEBUG __a => D#286
  # DEBUG __n => D#287
  # DEBUG D#285 => D#287
  # DEBUG D#284 => D#286
  # DEBUG D#282 => D#284
  # DEBUG D#283 => D#285
  # DEBUG __p => __x_137
  # DEBUG this => D#282
  # DEBUG D.86597 => D#283
  operator delete (__x_137);
  # DEBUG __x => __x_67
  # DEBUG __x => __x_67
  if (__x_67 == 0B)
    goto <bb 17>;
  else
    goto <bb 21>;

  <bb 21>:
  goto <bb 20>;

  <bb 22>:
  pretmp_94 = MEM[(struct _Vector_base *)this_5(D) + 464B]._M_impl._M_start;

  <bb 23>:
  # prephitmp_95 = PHI <pretmp_94(22), __first_60(14)>
  # DEBUG D#467 => &D#1077->D.47428
  # DEBUG this => D#467
  # DEBUG D#203 => D#467->_M_impl._M_end_of_storage
  # DEBUG D#202 => (long int) D#203
  # DEBUG D#1079 => MEM[(struct _Vector_base *)this_5(D) + 464B]._M_impl._M_start
  # DEBUG D#201 => (long int) D#1079
  # DEBUG D#200 => D#202 - D#201
  # DEBUG D#199 => D#200 /[ex] 48
  # DEBUG D#196 => D#467
  # DEBUG D#197 => (long unsigned int) D#199
  # DEBUG __p => D#1079
  # DEBUG this => D#196
  # DEBUG __n => D#197
  # DEBUG D#195 => D#197
  # DEBUG D#194 => D#196
  if (prephitmp_95 != 0B)
    goto <bb 24>;
  else
    goto <bb 25>;

  <bb 24>:
  # DEBUG D#193 => &D#194->_M_impl
  # DEBUG D#191 => D#193
  # DEBUG D#192 => D#195
  # DEBUG __p => D#1079
  # DEBUG __a => D#191
  # DEBUG __n => D#192
  # DEBUG D#190 => D#192
  # DEBUG D#189 => D#191
  # DEBUG D#187 => D#189
  # DEBUG D#188 => D#190
  # DEBUG __p => D#1079
  # DEBUG this => D#187
  # DEBUG D.86581 => D#188
  operator delete (prephitmp_95);

  <bb 25>:
  # DEBUG D#198 => &D#467->_M_impl
  # DEBUG this => D#198
  # DEBUG this => D#198
  # DEBUG this => D#198
  MEM[(struct  &)this_5(D) + 464] ={v} {CLOBBER};
  # DEBUG D#1076 => &this_5(D)->router_list
  # DEBUG this => D#1076
  # DEBUG D#550 => &D#1076->D.46681
  # DEBUG this => D#550
  _34 = MEM[(struct vector *)this_5(D) + 440B].D.46681._M_impl._M_finish;
  __first_54 = MEM[(struct vector *)this_5(D) + 440B].D.46681._M_impl._M_start;
  # DEBUG __first => __first_54
  # DEBUG __last => _34
  # DEBUG __first => __first_54
  if (_34 == __first_54)
    goto <bb 38>;
  else
    goto <bb 26>;

  <bb 26>:

  <bb 27>:
  # __first_139 = PHI <__first_54(26), __first_58(29)>
  # DEBUG __first => __first_139
  # DEBUG __r => __first_139
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _56 = &__first_139->_M_t;
  # DEBUG this => _56
  __x_57 = MEM[(struct _Rb_tree_node_base * *)__first_139 + 16B];
  # DEBUG D#42 => _56
  # DEBUG this => D#42
  # DEBUG this => _56
  # DEBUG __x => __x_57
  # DEBUG __x => __x_57
  if (__x_57 == 0B)
    goto <bb 28>;
  else
    goto <bb 30>;

  <bb 28>:
  # DEBUG D#545 => &MEM[(struct _Rb_tree *)_56]._M_impl
  # DEBUG this => D#545
  # DEBUG this => D#545
  # DEBUG this => D#545
  MEM[(struct  &)__first_139] ={v} {CLOBBER};
  __first_58 = __first_139 + 48;
  # DEBUG __first => __first_58
  # DEBUG __first => __first_58
  if (_34 == __first_58)
    goto <bb 37>;
  else
    goto <bb 29>;

  <bb 29>:
  goto <bb 27>;

  <bb 30>:

  <bb 31>:
  # __x_143 = PHI <__x_57(30), __x_71(33)>
  # DEBUG __x => __x_143
  _70 = MEM[(struct _Rb_tree_node_base * *)__x_143 + 24B];
  # DEBUG D#65 => __x_143
  # DEBUG __x => D#65
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_erase (_56, _70);
  __x_71 = MEM[(struct _Rb_tree_node_base * *)__x_143 + 16B];
  # DEBUG D#66 => __x_143
  # DEBUG __x => D#66
  # DEBUG __y => NULL
  # DEBUG D#544 => _56
  # DEBUG __p => __x_143
  # DEBUG this => D#544
  # DEBUG D#543 => D#544
  # DEBUG D#542 => D#544
  # DEBUG D#541 => D#542
  # DEBUG __p => __x_143
  # DEBUG this => D#541
  # DEBUG D#540 => D#541
  # DEBUG this => __x_143
  # DEBUG D#539 => &__x_143->_M_value_field
  # DEBUG __r => D#539
  # DEBUG D#472 => D#540
  # DEBUG this => D#472
  # DEBUG D#471 => D#472
  # DEBUG this => D#471
  # DEBUG this => NULL
  # DEBUG D.77058 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#539
  # DEBUG this => D#538
  # DEBUG this => D#539
  # DEBUG D#537 => &D#539->second
  # DEBUG this => D#537
  _72 = &MEM[(struct map *)__x_143 + 40B]._M_t;
  # DEBUG this => _72
  __x_73 = MEM[(struct _Rb_tree_node_base * *)__x_143 + 56B];
  # DEBUG D#58 => _72
  # DEBUG this => D#58
  # DEBUG this => _72
  # DEBUG __x => __x_73
  # DEBUG __x => __x_73
  if (__x_73 == 0B)
    goto <bb 32>;
  else
    goto <bb 34>;

  <bb 32>:
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)_72]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  MEM[(struct  &)__x_143 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#295 => D#543
  # DEBUG __p => __x_143
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG D#293 => 1
  # DEBUG __p => __x_143
  # DEBUG __a => D#292
  # DEBUG __n => D#293
  # DEBUG D#291 => D#293
  # DEBUG D#290 => D#292
  # DEBUG D#288 => D#290
  # DEBUG D#289 => D#291
  # DEBUG __p => __x_143
  # DEBUG this => D#288
  # DEBUG D.86620 => D#289
  operator delete (__x_143);
  # DEBUG __x => __x_71
  # DEBUG __x => __x_71
  if (__x_71 == 0B)
    goto <bb 28>;
  else
    goto <bb 33>;

  <bb 33>:
  goto <bb 31>;

  <bb 34>:

  <bb 35>:
  # __x_146 = PHI <__x_73(34), __x_77(36)>
  # DEBUG __x => __x_146
  _76 = MEM[(struct _Rb_tree_node_base * *)__x_146 + 24B];
  # DEBUG D#107 => __x_146
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (_72, _76);
  __x_77 = MEM[(struct _Rb_tree_node_base * *)__x_146 + 16B];
  # DEBUG D#108 => __x_146
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => _72
  # DEBUG __p => __x_146
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_146
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_146
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_146
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_146
  # DEBUG this => D#425
  # DEBUG D.86633 => D#426
  operator delete (__x_146);
  # DEBUG __x => __x_77
  # DEBUG __x => __x_77
  if (__x_77 == 0B)
    goto <bb 32>;
  else
    goto <bb 36>;

  <bb 36>:
  goto <bb 35>;

  <bb 37>:
  pretmp_114 = MEM[(struct _Vector_base *)this_5(D) + 440B]._M_impl._M_start;

  <bb 38>:
  # prephitmp_115 = PHI <pretmp_114(37), __first_54(25)>
  # DEBUG D#551 => &D#1076->D.46681
  # DEBUG this => D#551
  # DEBUG D#184 => D#551->_M_impl._M_end_of_storage
  # DEBUG D#183 => (long int) D#184
  # DEBUG D#1078 => MEM[(struct _Vector_base *)this_5(D) + 440B]._M_impl._M_start
  # DEBUG D#182 => (long int) D#1078
  # DEBUG D#181 => D#183 - D#182
  # DEBUG D#180 => D#181 /[ex] 48
  # DEBUG D#177 => D#551
  # DEBUG D#178 => (long unsigned int) D#180
  # DEBUG __p => D#1078
  # DEBUG this => D#177
  # DEBUG __n => D#178
  # DEBUG D#176 => D#178
  # DEBUG D#175 => D#177
  if (prephitmp_115 != 0B)
    goto <bb 39>;
  else
    goto <bb 40>;

  <bb 39>:
  # DEBUG D#174 => &D#175->_M_impl
  # DEBUG D#172 => D#174
  # DEBUG D#173 => D#176
  # DEBUG __p => D#1078
  # DEBUG __a => D#172
  # DEBUG __n => D#173
  # DEBUG D#171 => D#173
  # DEBUG D#170 => D#172
  # DEBUG D#168 => D#170
  # DEBUG D#169 => D#171
  # DEBUG __p => D#1078
  # DEBUG this => D#168
  # DEBUG D.86552 => D#169
  operator delete (prephitmp_115);

  <bb 40>:
  # DEBUG D#179 => &D#551->_M_impl
  # DEBUG this => D#179
  # DEBUG this => D#179
  # DEBUG this => D#179
  MEM[(struct  &)this_5(D) + 440] ={v} {CLOBBER};
  # DEBUG D#559 => &this_5(D)->node_list
  # DEBUG this => D#559
  _20 = &MEM[(struct map *)this_5(D) + 392B]._M_t;
  # DEBUG this => _20
  _33 = MEM[(struct _Rb_tree_node_base * *)this_5(D) + 408B];
  # DEBUG D#41 => _20
  # DEBUG this => D#41
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (_20, _33);
  # DEBUG D#464 => &MEM[(struct _Rb_tree *)_20]._M_impl
  # DEBUG this => D#464
  # DEBUG this => D#464
  # DEBUG this => D#464
  MEM[(struct  &)this_5(D) + 392] ={v} {CLOBBER};
  # DEBUG D#558 => &this_5(D)->file_name
  # DEBUG this => D#558
  # DEBUG this => D#558
  # DEBUG this => D#558
  _31 = MEM[(char * *)this_5(D) + 360B];
  # DEBUG D#1 => D#558
  # DEBUG this => D#1
  # DEBUG this => D#558
  _32 = &MEM[(const struct basic_string *)this_5(D) + 360B].D.15209._M_local_buf;
  if (_31 != _32)
    goto <bb 41>;
  else
    goto <bb 42>;

  <bb 41>:
  # DEBUG D#153 => MEM[(struct basic_string *)D#558].D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => D#558
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => D#558
  # DEBUG this => D#1
  # DEBUG this => D#558
  # DEBUG D#150 => &MEM[(struct basic_string *)D#558]._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _31
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _31
  # DEBUG this => D#144
  # DEBUG D.78081 => D#145
  operator delete (_31);

  <bb 42>:
  # DEBUG D#154 => &MEM[(struct basic_string *)D#558]._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  MEM[(struct  &)this_5(D) + 360] ={v} {CLOBBER};
  _21 = &this_5(D)->D.47478;
  Network::~Network (_21);
  MEM[(struct  &)this_5(D)] ={v} {CLOBBER};
  return;

}



;; Function std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_copy(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_Reuse_or_alloc_node; _Key = int; _Val = std::pair<const int, std::pair<int, int> >; _KeyOfValue = std::_Select1st<std::pair<const int, std::pair<int, int> > >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, std::pair<int, int> > >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, std::pair<int, int> > >*; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type = const std::_Rb_tree_node<std::pair<const int, std::pair<int, int> > >*] (_ZNSt8_Rb_treeIiSt4pairIKiS0_IiiEESt10_Select1stIS3_ESt4lessIiESaIS3_EE7_M_copyINS9_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIS3_EPKSD_SE_RT_, funcdef_no=3154, decl_uid=61931, cgraph_uid=1276, symbol_order=1278)

Trying loop 1 as candidate
loop 1 is not innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is innermost
loop is not parallel according to graphite
std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_copy(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_Reuse_or_alloc_node; _Key = int; _Val = std::pair<const int, std::pair<int, int> >; _KeyOfValue = std::_Select1st<std::pair<const int, std::pair<int, int> > >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, std::pair<int, int> > >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, std::pair<int, int> > >*; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type = const std::_Rb_tree_node<std::pair<const int, std::pair<int, int> > >*] (struct _Rb_tree * const this, const struct _Rb_tree_node * __x, struct _Rb_tree_node * __p, struct _Reuse_or_alloc_node & __node_gen)
{
  bool __node_gen___M_nodes_lsm.1942;
  struct _Rb_tree_node_base * __node_gen___M_nodes_lsm.1941;
  bool __node_gen___M_nodes_lsm.1940;
  struct _Rb_tree_node_base * __node_gen___M_nodes_lsm.1939;
  struct _Rb_tree_node * D.86809;
  struct _Rb_tree_node_base * D.86779;
  struct _Rb_tree_node * __node;
  struct _Rb_tree_node * D.86776;
  struct _Rb_tree_node * D.86764;
  struct _Rb_tree_node_base * D.86734;
  struct _Rb_tree_node * __node;
  struct _Rb_tree_node * D.86731;
  struct _Rb_tree_node_base * _13;
  struct _Rb_tree_node * _15;
  _Rb_tree_color _17;
  struct _Rb_tree_node_base * _20;
  struct _Rb_tree_node_base * _21;
  struct _Rb_tree_node * _23;
  void * _26;
  struct _Rb_tree_node_base * const _33;
  _Rb_tree_color _36;
  struct _Rb_tree_node_base * _37;
  struct _Rb_tree_node_base * _41;
  struct _Rb_tree_node_base * _45;
  struct _Rb_tree_node_base * _46;
  struct _Rb_tree_node_base * _49;
  struct _Rb_tree_node_base * _50;
  struct _Rb_tree_node_base * _51;
  struct _Rb_tree_node_base * _52;
  struct _Rb_tree_node_base * _53;
  struct _Rb_tree_node_base * _54;
  struct _Rb_tree_node * _55;
  struct _Rb_tree_node_base * _62;
  struct _Rb_tree_node_base * _63;
  struct _Rb_tree_node_base * _64;
  struct _Rb_tree_node_base * _66;
  struct _Rb_tree_node_base * _67;
  struct _Rb_tree_node * _68;
  struct _Rb_tree_node_base * _76;
  struct _Rb_tree_node_base * _107;
  struct _Rb_tree_node_base * _110;
  struct _Rb_tree_node_base * _125;

  <bb 2>:
  # DEBUG D#692 => this_8(D)
  # DEBUG __x => __x_9(D)
  # DEBUG __node_gen => __node_gen_10(D)
  # DEBUG this => D#692
  # DEBUG this => __x_9(D)
  # DEBUG D#1091 => &__x_9(D)->_M_value_field
  # DEBUG __r => D#1091
  # DEBUG this => __node_gen_10(D)
  # DEBUG __arg => D#1091
  # DEBUG this => __node_gen_10(D)
  _37 = __node_gen_10(D)->_M_nodes;
  if (_37 == 0B)
    goto <bb 46>;
  else
    goto <bb 3>;

  <bb 3>:
  # DEBUG __node => _37
  _49 = _37->_M_parent;
  __node_gen_10(D)->_M_nodes = _49;
  if (_49 != 0B)
    goto <bb 4>;
  else
    goto <bb 14>;

  <bb 4>:
  _50 = _49->_M_right;
  if (_37 == _50)
    goto <bb 5>;
  else
    goto <bb 13>;

  <bb 5>:
  _49->_M_right = 0B;
  _51 = _49->_M_left;
  if (_51 != 0B)
    goto <bb 6>;
  else
    goto <bb 44>;

  <bb 6>:
  __node_gen_10(D)->_M_nodes = _51;
  # DEBUG this => __node_gen_10(D)
  _76 = _51->_M_right;
  if (_76 == 0B)
    goto <bb 11>;
  else
    goto <bb 7>;

  <bb 7>:

  <bb 8>:
  # _21 = PHI <_76(7), _53(9)>
  _53 = _21->_M_right;
  if (_53 == 0B)
    goto <bb 10>;
  else
    goto <bb 9>;

  <bb 9>:
  goto <bb 8>;

  <bb 10>:
  # _52 = PHI <_21(8)>

  <bb 52>:
  __node_gen_10(D)->_M_nodes = _52;

  <bb 11>:
  # _107 = PHI <_52(52), _51(6)>
  _54 = _107->_M_left;
  if (_54 != 0B)
    goto <bb 12>;
  else
    goto <bb 44>;

  <bb 12>:
  __node_gen_10(D)->_M_nodes = _54;
  goto <bb 45>;

  <bb 13>:
  _49->_M_left = 0B;
  goto <bb 45>;

  <bb 14>:
  __node_gen_10(D)->_M_root = 0B;
  goto <bb 45>;

  <bb 15>:
  # __p_48 = PHI <_55(46), _37(54)>
  # DEBUG __tmp => NULL
  _17 = __x_9(D)->D.60100._M_color;
  __p_48->D.60100._M_color = _17;
  __p_48->D.60100._M_left = 0B;
  __p_48->D.60100._M_right = 0B;
  # DEBUG __top => NULL
  __p_48->D.60100._M_parent = __p_11(D);
  _13 = __x_9(D)->D.60100._M_right;
  if (_13 != 0B)
    goto <bb 16>;
  else
    goto <bb 18>;

  <bb 16>:
  _33 = MEM[(struct _Rb_tree_node_base * *)__x_9(D) + 24B];
  # DEBUG D#132 => __x_9(D)
  # DEBUG __x => D#132
  _15 = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_Reuse_or_alloc_node> (this_8(D), _33, __p_48, __node_gen_10(D));

  <bb 17>:
  __p_48->D.60100._M_right = _15;

  <bb 18>:
  # DEBUG __p => NULL
  __x_31 = MEM[(struct _Rb_tree_node_base * *)__x_9(D) + 16B];
  # DEBUG D#131 => __x_9(D)
  # DEBUG __x => D#131
  # DEBUG __x => NULL
  # DEBUG __p => __p_48
  # DEBUG __x => __x_31
  if (__x_31 == 0B)
    goto <bb 19>;
  else
    goto <bb 20>;

  <bb 19>:

  <bb 57>:
  return __p_48;

  <bb 20>:

  <bb 21>:
  # __x_72 = PHI <__x_31(20), __x_32(40)>
  # __p_126 = PHI <__p_48(20), __p_61(40)>
  # DEBUG __p => __p_126
  # DEBUG __x => __x_72
  # DEBUG D#692 => this_8(D)
  # DEBUG __x => __x_72
  # DEBUG __node_gen => __node_gen_10(D)
  # DEBUG this => D#692
  # DEBUG this => __x_72
  # DEBUG D#1092 => &__x_72->_M_value_field
  # DEBUG __r => D#1092
  # DEBUG this => __node_gen_10(D)
  # DEBUG __arg => D#1092
  # DEBUG this => __node_gen_10(D)
  _41 = __node_gen_10(D)->_M_nodes;
  if (_41 == 0B)
    goto <bb 49>;
  else
    goto <bb 22>;

  <bb 22>:
  # DEBUG __node => _41
  _62 = _41->_M_parent;
  __node_gen_10(D)->_M_nodes = _62;
  if (_62 != 0B)
    goto <bb 23>;
  else
    goto <bb 33>;

  <bb 23>:
  _63 = _62->_M_right;
  if (_41 == _63)
    goto <bb 24>;
  else
    goto <bb 32>;

  <bb 24>:
  _62->_M_right = 0B;
  _64 = _62->_M_left;
  if (_64 != 0B)
    goto <bb 25>;
  else
    goto <bb 47>;

  <bb 25>:
  __node_gen_10(D)->_M_nodes = _64;
  # DEBUG this => __node_gen_10(D)
  _46 = _64->_M_right;
  if (_46 == 0B)
    goto <bb 30>;
  else
    goto <bb 26>;

  <bb 26>:

  <bb 27>:
  # _125 = PHI <_46(26), _66(28)>
  _66 = _125->_M_right;
  if (_66 == 0B)
    goto <bb 29>;
  else
    goto <bb 28>;

  <bb 28>:
  goto <bb 27>;

  <bb 29>:
  # _45 = PHI <_125(27)>

  <bb 51>:
  __node_gen_10(D)->_M_nodes = _45;

  <bb 30>:
  # _110 = PHI <_45(51), _64(25)>
  _67 = _110->_M_left;
  if (_67 != 0B)
    goto <bb 31>;
  else
    goto <bb 47>;

  <bb 31>:
  __node_gen_10(D)->_M_nodes = _67;
  goto <bb 48>;

  <bb 32>:
  _62->_M_left = 0B;
  goto <bb 48>;

  <bb 33>:
  __node_gen_10(D)->_M_root = 0B;
  goto <bb 48>;

  <bb 34>:
  # DEBUG __tmp => _68
  # DEBUG D#562 => D#652
  # DEBUG __node => _68
  # DEBUG __x => D#1092
  # DEBUG this => D#562
  # DEBUG D#561 => D#562
  # DEBUG this => _68
  # DEBUG D#1094 => &_68->_M_value_field
  # DEBUG __r => D#1094
  # DEBUG D#525 => D#561
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1094
  # DEBUG __val => D#1092
  # DEBUG this => D#560
  # DEBUG D#20 => 12
  # DEBUG __p => D#1094
  # DEBUG D.78103 => D#20
  MEM[(struct pair *)_68 + 32B] = MEM[(const struct pair &)__x_72 + 32];

  <bb 35>:
  # __p_61 = PHI <_68(34), _41(56)>
  # DEBUG __tmp => NULL
  _36 = __x_72->D.60100._M_color;
  __p_61->D.60100._M_color = _36;
  __p_61->D.60100._M_left = 0B;
  __p_61->D.60100._M_right = 0B;
  # DEBUG __y => NULL
  __p_126->D.60100._M_left = __p_61;
  __p_61->D.60100._M_parent = __p_126;
  _20 = __x_72->D.60100._M_right;
  if (_20 != 0B)
    goto <bb 36>;
  else
    goto <bb 39>;

  <bb 36>:
  # DEBUG D#132 => __x_72
  # DEBUG __x => D#132
  _23 = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_Reuse_or_alloc_node> (this_8(D), _20, __p_61, __node_gen_10(D));
  goto <bb 38>;

<L14>:
  goto <bb 42> (<L10>);

  <bb 38>:
  __p_61->D.60100._M_right = _23;

  <bb 39>:
  # DEBUG __p => NULL
  __x_32 = MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B];
  # DEBUG D#131 => __x_72
  # DEBUG __x => D#131
  # DEBUG __x => NULL
  # DEBUG __p => __p_61
  # DEBUG __x => __x_32
  if (__x_32 == 0B)
    goto <bb 19>;
  else
    goto <bb 40>;

  <bb 40>:
  goto <bb 21>;

<L13>:

<L10>:
  _26 = __builtin_eh_pointer (1);
  __cxa_begin_catch (_26);
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (this_8(D), __p_48);
  __cxa_rethrow ();

<L12>:
  __cxa_end_catch ();
  resx 2

  <bb 44>:

  <bb 53>:

  <bb 45>:

  <bb 54>:
  # DEBUG __node => NULL
  # DEBUG __node => NULL
  # DEBUG D#687 => __node_gen_10(D)->_M_t
  # DEBUG D#530 => D#687
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#686 => __node_gen_10(D)->_M_t
  # DEBUG D#562 => D#686
  # DEBUG __node => NULL
  # DEBUG __x => D#1091
  # DEBUG this => D#562
  # DEBUG D#561 => D#562
  # DEBUG this => NULL
  # DEBUG D#1095 => &MEM[(struct _Rb_tree_node *)_37]._M_value_field
  # DEBUG __r => D#1095
  # DEBUG D#525 => D#561
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1095
  # DEBUG __val => D#1091
  # DEBUG this => D#560
  # DEBUG D#20 => 12
  # DEBUG __p => D#1095
  # DEBUG D.78103 => D#20
  MEM[(struct pair *)_37 + 32B] = MEM[(const struct pair &)__x_9(D) + 32];
  goto <bb 15>;

  <bb 46>:
  # DEBUG __node => NULL
  # DEBUG __node => NULL
  # DEBUG D#690 => __node_gen_10(D)
  # DEBUG __arg => D#1091
  # DEBUG D#691 => D#690
  # DEBUG this => D#691
  # DEBUG D#653 => D#688
  # DEBUG __x => D#1091
  # DEBUG this => D#653
  # DEBUG D#652 => D#653
  # DEBUG D#651 => D#653
  # DEBUG D#650 => D#651
  # DEBUG this => D#650
  # DEBUG D#649 => D#650
  # DEBUG this => D#649
  # DEBUG __n => 1
  # DEBUG __a => D#648
  # DEBUG D#647 => D#648
  # DEBUG D#645 => D#647
  # DEBUG D#646 => 0B
  # DEBUG __n => 1
  # DEBUG this => D#645
  # DEBUG D.86748 => D#646
  # DEBUG D#644 => D#645
  # DEBUG D#643 => D#644
  # DEBUG this => D#643
  _55 = operator new (48);
  # DEBUG __tmp => _55
  # DEBUG D#562 => D#652
  # DEBUG __node => _55
  # DEBUG __x => D#1091
  # DEBUG this => D#562
  # DEBUG D#561 => D#562
  # DEBUG this => _55
  # DEBUG D#1096 => &_55->_M_value_field
  # DEBUG __r => D#1096
  # DEBUG D#525 => D#561
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1096
  # DEBUG __val => D#1091
  # DEBUG this => D#560
  # DEBUG D#20 => 12
  # DEBUG __p => D#1096
  # DEBUG D.78103 => D#20
  MEM[(struct pair *)_55 + 32B] = MEM[(const struct pair &)__x_9(D) + 32];
  goto <bb 15>;

  <bb 47>:

  <bb 55>:

  <bb 48>:

  <bb 56>:
  # DEBUG __node => NULL
  # DEBUG __node => NULL
  # DEBUG D#687 => __node_gen_10(D)->_M_t
  # DEBUG D#530 => D#687
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#686 => __node_gen_10(D)->_M_t
  # DEBUG D#562 => D#686
  # DEBUG __node => NULL
  # DEBUG __x => D#1092
  # DEBUG this => D#562
  # DEBUG D#561 => D#562
  # DEBUG this => NULL
  # DEBUG D#1093 => &MEM[(struct _Rb_tree_node *)_41]._M_value_field
  # DEBUG __r => D#1093
  # DEBUG D#525 => D#561
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1093
  # DEBUG __val => D#1092
  # DEBUG this => D#560
  # DEBUG D#20 => 12
  # DEBUG __p => D#1093
  # DEBUG D.78103 => D#20
  MEM[(struct pair *)_41 + 32B] = MEM[(const struct pair &)__x_72 + 32];
  goto <bb 35>;

  <bb 49>:
  # DEBUG __node => NULL
  # DEBUG __node => NULL
  # DEBUG D#690 => __node_gen_10(D)
  # DEBUG __arg => D#1092
  # DEBUG D#691 => D#690
  # DEBUG this => D#691
  # DEBUG D#653 => D#688
  # DEBUG __x => D#1092
  # DEBUG this => D#653
  # DEBUG D#652 => D#653
  # DEBUG D#651 => D#653
  # DEBUG D#650 => D#651
  # DEBUG this => D#650
  # DEBUG D#649 => D#650
  # DEBUG this => D#649
  # DEBUG __n => 1
  # DEBUG __a => D#648
  # DEBUG D#647 => D#648
  # DEBUG D#645 => D#647
  # DEBUG D#646 => 0B
  # DEBUG __n => 1
  # DEBUG this => D#645
  # DEBUG D.86793 => D#646
  # DEBUG D#644 => D#645
  # DEBUG D#643 => D#644
  # DEBUG this => D#643
  _68 = operator new (48);
  goto <bb 34>;

<L15>:
  goto <bb 42> (<L10>);

}



;; Function std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::operator=(const std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&) [with _Key = int; _Val = std::pair<const int, std::pair<int, int> >; _KeyOfValue = std::_Select1st<std::pair<const int, std::pair<int, int> > >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, std::pair<int, int> > >] (_ZNSt8_Rb_treeIiSt4pairIKiS0_IiiEESt10_Select1stIS3_ESt4lessIiESaIS3_EEaSERKS9_, funcdef_no=2919, decl_uid=55906, cgraph_uid=1041, symbol_order=1043)

Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is innermost
loop is not parallel according to graphite
std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::operator=(const std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&) [with _Key = int; _Val = std::pair<const int, std::pair<int, int> >; _KeyOfValue = std::_Select1st<std::pair<const int, std::pair<int, int> > >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, std::pair<int, int> > >] (struct _Rb_tree * const this, const struct _Rb_tree & __x)
{
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct _Reuse_or_alloc_node __roan;
  struct _Rb_tree_node_base * _6;
  struct _Rb_tree & prephitmp_12;
  struct _Rb_tree_node_base * _13;
  struct _Rb_tree_node_base * _15;
  struct _Rb_tree_node_base * _16;
  long unsigned int _18;
  struct _Rb_tree_node_base * _21;
  struct _Rb_tree_node_base * const _23;
  struct _Rb_tree & _28;
  struct _Rb_tree_node_base * pretmp_40;
  struct _Rb_tree_node_base * prephitmp_42;
  struct _Rb_tree & pretmp_43;

  <bb 2>:
  if (this_3(D) != __x_4(D))
    goto <bb 3>;
  else
    goto <bb 17>;

  <bb 3>:
  # DEBUG this => &__roan
  # DEBUG __t => this_3(D)
  # DEBUG this => this_3(D)
  _6 = MEM[(struct _Rb_tree_node_base * &)this_3(D) + 16];
  __roan._M_root = _6;
  # DEBUG this => this_3(D)
  _15 = MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32];
  __roan._M_nodes = _15;
  __roan._M_t = this_3(D);
  if (_6 != 0B)
    goto <bb 4>;
  else
    goto <bb 6>;

  <bb 4>:
  _6->_M_parent = 0B;
  _13 = _15->_M_left;
  if (_13 != 0B)
    goto <bb 5>;
  else
    goto <bb 7>;

  <bb 5>:
  __roan._M_nodes = _13;
  goto <bb 7>;

  <bb 6>:
  __roan._M_nodes = 0B;

  <bb 7>:
  # DEBUG D#693 => &this_3(D)->_M_impl
  # DEBUG this => D#693
  MEM[(struct _Rb_tree_impl *)this_3(D)]._M_header._M_parent = 0B;
  _16 = &MEM[(struct _Rb_tree_impl *)this_3(D)]._M_header;
  MEM[(struct _Rb_tree_impl *)this_3(D)]._M_header._M_left = _16;
  MEM[(struct _Rb_tree_impl *)this_3(D)]._M_header._M_right = _16;
  MEM[(struct _Rb_tree_impl *)this_3(D)]._M_node_count = 0;
  _23 = MEM[(struct _Rb_tree_node_base * *)__x_4(D) + 16B];
  # DEBUG D#109 => __x_4(D)
  # DEBUG this => D#109
  if (_23 != 0B)
    goto <bb 8>;
  else
    goto <bb 16>;

  <bb 8>:
  # DEBUG this => this_3(D)
  # DEBUG this => this_3(D)
  # DEBUG D#106 => __x_4(D)
  # DEBUG this => D#106
  __x_10 = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_Reuse_or_alloc_node> (this_3(D), _23, _16, &__roan);

  <bb 9>:
  MEM[(struct _Rb_tree_node_base * &)this_3(D) + 16] = __x_10;
  # DEBUG this => this_3(D)
  # DEBUG this => this_3(D)
  # DEBUG __x => __x_10

  <bb 10>:
  # __x_24 = PHI <__x_10(9), __x_25(11)>
  # DEBUG __x => __x_24
  __x_25 = __x_24->_M_left;
  if (__x_25 == 0B)
    goto <bb 12>;
  else
    goto <bb 11>;

  <bb 11>:
  goto <bb 10>;

  <bb 12>:
  # __x_50 = PHI <__x_24(10)>

  <bb 20>:
  MEM[(struct _Rb_tree_node_base * &)this_3(D) + 24] = __x_50;
  # DEBUG this => this_3(D)
  # DEBUG this => this_3(D)
  # DEBUG __x => __x_10

  <bb 13>:
  # __x_8 = PHI <__x_10(20), __x_7(14)>
  # DEBUG __x => __x_8
  __x_7 = __x_8->_M_right;
  if (__x_7 == 0B)
    goto <bb 15>;
  else
    goto <bb 14>;

  <bb 14>:
  goto <bb 13>;

  <bb 15>:
  # __x_51 = PHI <__x_8(13)>

  <bb 19>:
  MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32] = __x_51;
  _18 = __x_4(D)->_M_impl._M_node_count;
  this_3(D)->_M_impl._M_node_count = _18;
  pretmp_40 = __roan._M_root;
  pretmp_43 = __roan._M_t;

  <bb 16>:
  # prephitmp_42 = PHI <_6(7), pretmp_40(19)>
  # prephitmp_12 = PHI <this_3(D)(7), pretmp_43(19)>
  # DEBUG this => &__roan
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (prephitmp_12, prephitmp_42);
  __roan ={v} {CLOBBER};

  <bb 17>:

  <bb 21>:
  return this_3(D);

<L7>:
  # DEBUG this => &__roan
  _21 = __roan._M_root;
  _28 = __roan._M_t;
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (_28, _21);
  resx 2

}



;; Function std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_copy(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_Alloc_node; _Key = int; _Val = std::pair<const int, int>; _KeyOfValue = std::_Select1st<std::pair<const int, int> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, int> >*; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type = const std::_Rb_tree_node<std::pair<const int, int> >*] (_ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE7_M_copyINS8_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS2_EPKSC_SD_RT_, funcdef_no=3278, decl_uid=62535, cgraph_uid=1400, symbol_order=1402)

Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_copy(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_Alloc_node; _Key = int; _Val = std::pair<const int, int>; _KeyOfValue = std::_Select1st<std::pair<const int, int> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, int> >*; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type = const std::_Rb_tree_node<std::pair<const int, int> >*] (struct _Rb_tree * const this, const struct _Rb_tree_node * __x, struct _Rb_tree_node * __p, struct _Alloc_node & __node_gen)
{
  struct _Rb_tree_node * D.86884;
  struct _Rb_tree_node * D.86861;
  struct _Rb_tree_node_base * _15;
  struct _Rb_tree_node * _17;
  struct _Rb_tree_node_base * _23;
  struct _Rb_tree_node * _25;
  void * _27;
  _Rb_tree_color _37;
  _Rb_tree_color _39;

  <bb 2>:
  # DEBUG D#945 => this_8(D)
  # DEBUG D#946 => __node_gen_10(D)
  # DEBUG __x => __x_9(D)
  # DEBUG this => D#945
  # DEBUG __node_gen => D#946
  # DEBUG D#944 => D#946
  # DEBUG this => __x_9(D)
  # DEBUG D#943 => &__x_9(D)->_M_value_field
  # DEBUG __r => D#943
  # DEBUG D#831 => D#944
  # DEBUG __arg => D#943
  # DEBUG this => D#831
  # DEBUG D#830 => D#831
  # DEBUG D#829 => D#830->_M_t
  # DEBUG D#828 => D#829
  # DEBUG __x => D#943
  # DEBUG this => D#828
  # DEBUG D#827 => D#828
  # DEBUG D#826 => D#828
  # DEBUG D#825 => D#826
  # DEBUG this => D#825
  # DEBUG D#824 => D#825
  # DEBUG this => D#824
  # DEBUG __n => 1
  # DEBUG __a => D#823
  # DEBUG D#822 => D#823
  # DEBUG D#820 => D#822
  # DEBUG D#821 => 0B
  # DEBUG __n => 1
  # DEBUG this => D#820
  # DEBUG D.86852 => D#821
  # DEBUG D#819 => D#820
  # DEBUG D#818 => D#819
  # DEBUG this => D#818
  __p_35 = operator new (40);
  # DEBUG __tmp => __p_35
  # DEBUG D#609 => D#827
  # DEBUG __node => __p_35
  # DEBUG __x => D#943
  # DEBUG this => D#609
  # DEBUG D#608 => D#609
  # DEBUG this => __p_35
  # DEBUG D#1099 => &__p_35->_M_value_field
  # DEBUG __r => D#1099
  # DEBUG D#453 => D#608
  # DEBUG this => D#453
  # DEBUG D#452 => D#453
  # DEBUG this => D#452
  # DEBUG this => NULL
  # DEBUG D.76846 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1099
  # DEBUG __val => D#943
  # DEBUG this => D#607
  # DEBUG D#20 => 8
  # DEBUG __p => D#1099
  # DEBUG D.79307 => D#20
  MEM[(struct pair *)__p_35 + 32B] = MEM[(const struct pair &)__x_9(D) + 32];
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG __tmp => __p_35
  _37 = __x_9(D)->D.60074._M_color;
  __p_35->D.60074._M_color = _37;
  __p_35->D.60074._M_left = 0B;
  __p_35->D.60074._M_right = 0B;
  # DEBUG __top => NULL
  __p_35->D.60074._M_parent = __p_13(D);
  _15 = __x_9(D)->D.60074._M_right;
  if (_15 != 0B)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 3>:
  # DEBUG D#127 => __x_9(D)
  # DEBUG __x => D#127
  _17 = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_copy<std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_Alloc_node> (this_8(D), _15, __p_35, __node_gen_10(D));

  <bb 4>:
  __p_35->D.60074._M_right = _17;

  <bb 5>:
  # DEBUG __p => NULL
  __x_32 = MEM[(struct _Rb_tree_node_base * *)__x_9(D) + 16B];
  # DEBUG D#126 => __x_9(D)
  # DEBUG __x => D#126
  # DEBUG __x => NULL
  # DEBUG __p => __p_35
  # DEBUG __x => __x_32
  if (__x_32 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:

  <bb 19>:
  return __p_35;

  <bb 7>:

  <bb 8>:
  # __x_19 = PHI <__x_32(7), __x_33(15)>
  # __p_56 = PHI <__p_35(7), __p_11(15)>
  # DEBUG __p => __p_56
  # DEBUG __x => __x_19
  # DEBUG D#945 => this_8(D)
  # DEBUG D#946 => __node_gen_10(D)
  # DEBUG __x => __x_19
  # DEBUG this => D#945
  # DEBUG __node_gen => D#946
  # DEBUG D#944 => D#946
  # DEBUG this => __x_19
  # DEBUG D#943 => &__x_19->_M_value_field
  # DEBUG __r => D#943
  # DEBUG D#831 => D#944
  # DEBUG __arg => D#943
  # DEBUG this => D#831
  # DEBUG D#830 => D#831
  # DEBUG D#829 => D#830->_M_t
  # DEBUG D#828 => D#829
  # DEBUG __x => D#943
  # DEBUG this => D#828
  # DEBUG D#827 => D#828
  # DEBUG D#826 => D#828
  # DEBUG D#825 => D#826
  # DEBUG this => D#825
  # DEBUG D#824 => D#825
  # DEBUG this => D#824
  # DEBUG __n => 1
  # DEBUG __a => D#823
  # DEBUG D#822 => D#823
  # DEBUG D#820 => D#822
  # DEBUG D#821 => 0B
  # DEBUG __n => 1
  # DEBUG this => D#820
  # DEBUG D.86875 => D#821
  # DEBUG D#819 => D#820
  # DEBUG D#818 => D#819
  # DEBUG this => D#818
  __p_11 = operator new (40);
  goto <bb 10>;

<L14>:
  goto <bb 17> (<L10>);

  <bb 10>:
  # DEBUG __tmp => __p_11
  # DEBUG D#609 => D#827
  # DEBUG __node => __p_11
  # DEBUG __x => D#943
  # DEBUG this => D#609
  # DEBUG D#608 => D#609
  # DEBUG this => __p_11
  # DEBUG D#1098 => &__p_11->_M_value_field
  # DEBUG __r => D#1098
  # DEBUG D#453 => D#608
  # DEBUG this => D#453
  # DEBUG D#452 => D#453
  # DEBUG this => D#452
  # DEBUG this => NULL
  # DEBUG D.76846 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1098
  # DEBUG __val => D#943
  # DEBUG this => D#607
  # DEBUG D#20 => 8
  # DEBUG __p => D#1098
  # DEBUG D.79307 => D#20
  MEM[(struct pair *)__p_11 + 32B] = MEM[(const struct pair &)__x_19 + 32];
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG __tmp => __p_11
  _39 = __x_19->D.60074._M_color;
  __p_11->D.60074._M_color = _39;
  __p_11->D.60074._M_left = 0B;
  __p_11->D.60074._M_right = 0B;
  # DEBUG __y => NULL
  __p_56->D.60074._M_left = __p_11;
  __p_11->D.60074._M_parent = __p_56;
  _23 = __x_19->D.60074._M_right;
  if (_23 != 0B)
    goto <bb 11>;
  else
    goto <bb 14>;

  <bb 11>:
  # DEBUG D#127 => __x_19
  # DEBUG __x => D#127
  _25 = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_copy<std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_Alloc_node> (this_8(D), _23, __p_11, __node_gen_10(D));
  goto <bb 13>;

<L15>:
  goto <bb 17> (<L10>);

  <bb 13>:
  __p_11->D.60074._M_right = _25;

  <bb 14>:
  # DEBUG __p => NULL
  __x_33 = MEM[(struct _Rb_tree_node_base * *)__x_19 + 16B];
  # DEBUG D#126 => __x_19
  # DEBUG __x => D#126
  # DEBUG __x => NULL
  # DEBUG __p => __p_11
  # DEBUG __x => __x_33
  if (__x_33 == 0B)
    goto <bb 6>;
  else
    goto <bb 15>;

  <bb 15>:
  goto <bb 8>;

<L13>:

<L10>:
  _27 = __builtin_eh_pointer (1);
  __cxa_begin_catch (_27);
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (this_8(D), __p_35);
  __cxa_rethrow ();

<L12>:
  __cxa_end_catch ();
  resx 2

}



;; Function std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*> std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_get_insert_unique_pos(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)>; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>] (_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_PFvPK6RouterPK4FlitiP9OutputSetbEESt10_Select1stISI_ESt4lessIS5_ESaISI_EE24_M_get_insert_unique_posERS7_, funcdef_no=3577, decl_uid=58425, cgraph_uid=1699, symbol_order=1701)

Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
std::pair<std::_Rb_tree_node_base*, std::_Rb_tree_node_base*> std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_get_insert_unique_pos(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)>; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>] (struct _Rb_tree * const this, const struct key_type & __k)
{
  const size_type __size;
  const size_type __osize;
  const size_type __len;
  int __r;
  const difference_type __d;
  int D.86928;
  const size_type __size;
  const size_type __osize;
  const size_type __len;
  int __r;
  const difference_type __d;
  int D.86913;
  struct _Rb_tree_node_base * const __j$_M_node;
  bool __comp;
  struct _Rb_tree_node_base * const D.64995;
  struct _Rb_tree_node_base * const D.64996;
  struct pair D.68486;
  const size_type pretmp_1;
  char * const prephitmp_13;
  struct _Rb_tree_node * _17;
  struct _Rb_tree_node_base * _21;
  struct _Rb_tree_node_base * _22;
  struct _Rb_tree_node_base * _23;
  struct _Rb_tree_node_base * _24;
  const size_type _34;
  char * const _37;
  long unsigned int _40;
  char * const pretmp_44;
  long unsigned int _52;
  const size_type prephitmp_61;
  char * const pretmp_64;
  char * const prephitmp_65;
  const size_type pretmp_67;
  const size_type pretmp_76;
  const size_type prephitmp_77;
  const size_type prephitmp_78;
  const size_type pretmp_79;
  char * const pretmp_80;
  char * const _83;
  const size_type _84;

  <bb 2>:
  _21 = MEM[(struct _Rb_tree_node_base * *)this_9(D) + 16B];
  # DEBUG D#124 => this_9(D)
  # DEBUG this => D#124
  # DEBUG __x => NULL
  # DEBUG this => this_9(D)
  # DEBUG D#1123 => &this_9(D)->_M_impl._M_header
  # DEBUG __y => NULL
  # DEBUG __comp => 1
  # DEBUG __comp => 1
  # DEBUG __y => D#1123
  # DEBUG __x => _21
  if (_21 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  _17 = &this_9(D)->_M_impl._M_header;
  goto <bb 15>;

  <bb 4>:
  pretmp_1 = MEM[(long unsigned int *)__k_12(D) + 8B];
  pretmp_44 = MEM[(char * *)__k_12(D)];
  goto <bb 7>;

  <bb 5>:
  # _6 = PHI <_23(27), _22(28)>
  # __comp_56 = PHI <0(27), 1(28)>
  # DEBUG __comp => __comp_56
  # DEBUG __y => _10
  # DEBUG __x => _6
  if (_6 == 0B)
    goto <bb 14>;
  else
    goto <bb 6>;

  <bb 6>:

  <bb 7>:
  # _10 = PHI <_21(4), _6(6)>
  # DEBUG __comp => 1
  # DEBUG __x => _10
  # DEBUG __y => _10
  # DEBUG __x => _10
  # DEBUG __x => _10
  # DEBUG this => _10
  # DEBUG D#586 => &MEM[(const struct _Rb_tree_node *)_10]._M_value_field
  # DEBUG __r => D#586
  # DEBUG __x => D#586
  # DEBUG this => D#216
  # DEBUG D#1103 => &MEM[(const struct pair &)_10 + 32].first
  # DEBUG D#593 => &this_9(D)->_M_impl._M_key_compare
  # DEBUG D#215 => D#593
  # DEBUG __x => __k_12(D)
  # DEBUG __y => D#1103
  # DEBUG this => D#215
  # DEBUG __lhs => __k_12(D)
  # DEBUG __rhs => D#1103
  # DEBUG this => __k_12(D)
  # DEBUG __str => D#1103
  # DEBUG D#1122 => MEM[(long unsigned int *)__k_12(D) + 8B]
  # DEBUG D#2 => __k_12(D)
  # DEBUG this => D#2
  # DEBUG __size => D#1122
  _34 = MEM[(long unsigned int *)_10 + 40B];
  # DEBUG D#2 => D#1103
  # DEBUG this => D#2
  # DEBUG __osize => _34
  # DEBUG __a => &__size
  # DEBUG __b => &__osize
  __len_87 = MIN_EXPR <pretmp_1, _34>;
  # DEBUG __len => D#1101
  # DEBUG this => D#1103
  _37 = MEM[(char * *)_10 + 32B];
  # DEBUG D#1 => D#1103
  # DEBUG this => D#1
  # DEBUG D#1121 => MEM[(char * *)__k_12(D)]
  # DEBUG D#1 => __k_12(D)
  # DEBUG this => D#1
  # DEBUG __s1 => D#1121
  # DEBUG __s2 => _37
  # DEBUG __n => D#1101
  __r_39 = __builtin_memcmp (pretmp_44, _37, __len_87);
  # DEBUG __r => NULL
  if (__r_39 == 0)
    goto <bb 8>;
  else
    goto <bb 11>;

  <bb 8>:
  # DEBUG __n1 => D#1122
  # DEBUG __n2 => _34
  _40 = pretmp_1 - _34;
  __d_41 = (const difference_type) _40;
  # DEBUG __d => __d_41
  if (__d_41 > 2147483647)
    goto <bb 13>;
  else
    goto <bb 9>;

  <bb 9>:
  if (__d_41 < -2147483648)
    goto <bb 12>;
  else
    goto <bb 10>;

  <bb 10>:
  __r_42 = (int) _40;

  <bb 11>:
  # __r_43 = PHI <__r_39(7), __r_42(10)>
  # DEBUG __r => __r_43
  # DEBUG D#1109 => {CLOBBER}
  # DEBUG __size => D#1109
  # DEBUG D#1110 => {CLOBBER}
  # DEBUG __osize => D#1110
  # DEBUG __comp => __r_43 < 0
  if (__r_43 < 0)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:

  <bb 28>:
  # DEBUG __r => NULL
  # DEBUG __comp => 1
  _22 = MEM[(struct _Rb_tree_node_base * *)_10 + 16B];
  # DEBUG D#213 => _10
  # DEBUG __x => D#213
  goto <bb 5>;

  <bb 13>:

  <bb 27>:
  # DEBUG __r => NULL
  # DEBUG __comp => 0
  _23 = MEM[(struct _Rb_tree_node_base * *)_10 + 24B];
  # DEBUG D#214 => _10
  # DEBUG __x => D#214
  goto <bb 5>;

  <bb 14>:
  # _85 = PHI <_10(5)>
  # _84 = PHI <_34(5)>
  # _83 = PHI <_37(5)>
  # __comp_82 = PHI <__comp_56(5)>
  # __len_81 = PHI <__len_87(5)>

  <bb 26>:
  # DEBUG this => &__j
  # DEBUG __x => _85
  # DEBUG __j$_M_node => _85
  if (__comp_82 != 0)
    goto <bb 15>;
  else
    goto <bb 18>;

  <bb 15>:
  # _57 = PHI <_85(26), _17(3)>
  # DEBUG this => &__j
  # DEBUG __x => _57
  # DEBUG __j$_M_node => _57
  _24 = MEM[(struct _Rb_tree_node_base * *)this_9(D) + 24B];
  # DEBUG D#509 => this_9(D)
  # DEBUG this => D#509
  # DEBUG this => NULL
  # DEBUG __x => _24
  # DEBUG this => &__j
  # DEBUG __x => &D.64994
  if (_24 == _57)
    goto <bb 16>;
  else
    goto <bb 17>;

  <bb 16>:
  # DEBUG this => &D.64997
  # DEBUG __a => &D.64995
  # DEBUG __b => &D.64996
  MEM[(struct pair *)&D.68486] = 0B;
  MEM[(struct pair *)&D.68486 + 8B] = _57;
  goto <bb 25>;

  <bb 17>:
  # DEBUG this => &__j
  __j$_M_node_25 = std::_Rb_tree_decrement (_57);
  # DEBUG __j$_M_node => __j$_M_node_25
  pretmp_67 = MEM[(long unsigned int *)__k_12(D) + 8B];
  pretmp_80 = MEM[(char * *)__k_12(D)];
  pretmp_79 = MEM[(long unsigned int *)__j$_M_node_25 + 40B];
  pretmp_64 = MEM[(char * *)__j$_M_node_25 + 32B];
  pretmp_76 = MIN_EXPR <pretmp_67, pretmp_79>;

  <bb 18>:
  # __j$_M_node_20 = PHI <_85(26), __j$_M_node_25(17)>
  # _5 = PHI <_85(26), _57(17)>
  # prephitmp_61 = PHI <pretmp_1(26), pretmp_67(17)>
  # prephitmp_13 = PHI <pretmp_44(26), pretmp_80(17)>
  # prephitmp_78 = PHI <_84(26), pretmp_79(17)>
  # prephitmp_65 = PHI <_83(26), pretmp_64(17)>
  # prephitmp_77 = PHI <__len_81(26), pretmp_76(17)>
  # DEBUG __j$_M_node => __j$_M_node_20
  # DEBUG __x => __j$_M_node_20
  # DEBUG __x => __j$_M_node_20
  # DEBUG this => __j$_M_node_20
  # DEBUG D#590 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_20]._M_value_field
  # DEBUG __r => D#590
  # DEBUG __x => D#590
  # DEBUG this => D#216
  # DEBUG D#1104 => &MEM[(const struct pair &)__j$_M_node_20 + 32].first
  # DEBUG D#592 => &this_9(D)->_M_impl._M_key_compare
  # DEBUG D#215 => D#592
  # DEBUG __x => D#1104
  # DEBUG __y => __k_12(D)
  # DEBUG this => D#215
  # DEBUG __lhs => D#1104
  # DEBUG __rhs => __k_12(D)
  # DEBUG this => D#1104
  # DEBUG __str => __k_12(D)
  # DEBUG D#1120 => MEM[(long unsigned int *)__j$_M_node_20 + 40B]
  # DEBUG D#2 => D#1104
  # DEBUG this => D#2
  # DEBUG __size => D#1120
  # DEBUG D#1119 => MEM[(long unsigned int *)__k_12(D) + 8B]
  # DEBUG D#2 => __k_12(D)
  # DEBUG this => D#2
  # DEBUG __osize => D#1119
  # DEBUG __a => &__size
  # DEBUG __b => &__osize
  # DEBUG __len => D#1102
  # DEBUG this => __k_12(D)
  # DEBUG D#1118 => MEM[(char * *)__k_12(D)]
  # DEBUG D#1 => __k_12(D)
  # DEBUG this => D#1
  # DEBUG D#1117 => MEM[(char * *)__j$_M_node_20 + 32B]
  # DEBUG D#1 => D#1104
  # DEBUG this => D#1
  # DEBUG __s1 => D#1117
  # DEBUG __s2 => D#1118
  # DEBUG __n => D#1102
  __r_51 = __builtin_memcmp (prephitmp_65, prephitmp_13, prephitmp_77);
  # DEBUG __r => NULL
  if (__r_51 == 0)
    goto <bb 19>;
  else
    goto <bb 22>;

  <bb 19>:
  # DEBUG __n1 => D#1120
  # DEBUG __n2 => D#1119
  _52 = prephitmp_78 - prephitmp_61;
  __d_53 = (const difference_type) _52;
  # DEBUG __d => __d_53
  if (__d_53 > 2147483647)
    goto <bb 24>;
  else
    goto <bb 20>;

  <bb 20>:
  if (__d_53 < -2147483648)
    goto <bb 23>;
  else
    goto <bb 21>;

  <bb 21>:
  __r_54 = (int) _52;

  <bb 22>:
  # __r_55 = PHI <__r_51(18), __r_54(21)>
  # DEBUG __r => __r_55
  # DEBUG D#1115 => {CLOBBER}
  # DEBUG __size => D#1115
  # DEBUG D#1116 => {CLOBBER}
  # DEBUG __osize => D#1116
  if (__r_55 < 0)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 23>:

  <bb 31>:
  # DEBUG __r => NULL
  # DEBUG this => &D.65000
  # DEBUG __a => &D.64998
  # DEBUG __b => &D.64999
  MEM[(struct pair *)&D.68486] = 0B;
  MEM[(struct pair *)&D.68486 + 8B] = _5;
  goto <bb 25>;

  <bb 24>:

  <bb 30>:
  # DEBUG __r => NULL
  # DEBUG this => &D.65002
  # DEBUG __a => &__j._M_node
  # DEBUG __b => &D.65001
  MEM[(struct pair *)&D.68486] = __j$_M_node_20;
  MEM[(struct pair *)&D.68486 + 8B] = 0B;

  <bb 25>:

  <bb 29>:
  # DEBUG D#591 => {CLOBBER}
  # DEBUG __j$_M_node => D#591
  return D.68486;

}



;; Function static void AnyNet::RegisterRoutingFunctions() (_ZN6AnyNet24RegisterRoutingFunctionsEv, funcdef_no=2499, decl_uid=47455, cgraph_uid=621, symbol_order=623)

Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
static void AnyNet::RegisterRoutingFunctions() ()
{
  struct _Rb_tree_node_base * SR.1955;
  struct _Rb_tree_node_base * SR.1954;
  struct _Rb_tree_node_base * SR.1953;
  const struct _Rb_tree_node_base * __pos;
  size_type __dnew;
  const size_type __size;
  const size_type __osize;
  const size_type __len;
  int __r;
  const difference_type __d;
  int D.87272;
  bool __insert_left;
  struct iterator D.87257;
  struct iterator D.87227;
  struct pair __res;
  struct _Rb_tree_node_base * __res$first;
  struct _Rb_tree_node_base * __res$second;
  struct const_iterator __position;
  size_type __dnew;
  const size_type __size;
  const size_type __osize;
  const size_type __len;
  int __r;
  const difference_type __d;
  int D.87188;
  const size_type __size;
  const size_type __osize;
  const size_type __len;
  int __r;
  const difference_type __d;
  int D.87173;
  struct iterator D.87158;
  struct _Rb_tree_node * __y;
  size_type __dnew;
  struct value_type D.87096;
  struct iterator D.87095;
  struct iterator D.87094;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1677;
  struct _Rb_tree_node_base * SR.1680;
  void (*mapped_type) (const struct Router *, const struct Flit *, int, struct OutputSet *, bool) & D.87090;
  const struct key_type D.58961;
  char * const _6;
  char * const prephitmp_18;
  bool _23;
  bool _28;
  char * const _32;
  char * const _35;
  bool _55;
  const size_type _61;
  bool _65;
  char * const _66;
  long unsigned int _68;
  const size_type _74;
  char * const _77;
  long unsigned int _80;
  bool _84;
  struct _Rb_tree_node * _104;
  int _107;
  long unsigned int _108;
  long unsigned int _109;
  const size_type _110;
  const size_type _111;
  char * const _114;
  char * const _115;
  long unsigned int _117;
  struct pair * _122;
  char * _124;
  char * const _125;
  const size_type _126;
  char * _127;
  void (*<T7782>) (const struct Router *, const struct Flit *, int, struct OutputSet *, bool) _128;
  void * _129;
  char * _135;
  long unsigned int __dnew.67_136;
  const char_type _138;
  char * _141;
  char * const _149;
  bool _177;
  char * const pretmp_219;
  char * const prephitmp_220;
  size_type pretmp_221;
  size_type prephitmp_222;
  char * const pretmp_223;

  <bb 2>:
  # DEBUG D#45 => &D.58960
  # DEBUG this => D#45
  # DEBUG D#44 => D#45
  # DEBUG this => D#44
  # DEBUG D#303 => &D.58960
  # DEBUG this => &D.58961
  # DEBUG __s => "min_anynet"
  # DEBUG __a => D#303
  # DEBUG D#302 => D#303
  # DEBUG this => &D.58961
  # DEBUG D#300 => &D.58961._M_dataplus
  # DEBUG D#118 => D#302
  # DEBUG this => D#300
  # DEBUG __dat => &D.58961.D.15209._M_local_buf
  # DEBUG __a => D#118
  # DEBUG D#117 => D#118
  # DEBUG D#115 => D#300
  # DEBUG D#116 => D#117
  # DEBUG this => D#115
  # DEBUG __a => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG this => D#113
  # DEBUG D.73458 => D#114
  MEM[(struct _Alloc_hider *)&D.58961]._M_p = &D.58961.D.15209._M_local_buf;
  # DEBUG __s => "min_anynet"
  # DEBUG this => &D.58961
  # DEBUG __beg => "min_anynet"
  # DEBUG __end => &MEM[(void *)"min_anynet" + 10B]
  # DEBUG this => &D.58961
  # DEBUG __beg => "min_anynet"
  # DEBUG __end => &MEM[(void *)"min_anynet" + 10B]
  # DEBUG this => &D.58961
  # DEBUG __beg => "min_anynet"
  # DEBUG __end => &MEM[(void *)"min_anynet" + 10B]
  # DEBUG __ptr => "min_anynet"
  # DEBUG __first => "min_anynet"
  # DEBUG __last => &MEM[(void *)"min_anynet" + 10B]
  # DEBUG D#487 => &__first
  # DEBUG D.77194 => D#487
  # DEBUG __first => "min_anynet"
  # DEBUG __last => &MEM[(void *)"min_anynet" + 10B]
  # DEBUG __dnew => 10
  # DEBUG D#1 => &D.58961
  # DEBUG this => D#1
  # DEBUG __p => &D.58961.D.15209._M_local_buf
  # DEBUG __k1 => "min_anynet"
  # DEBUG __k2 => &MEM[(void *)"min_anynet" + 10B]
  # DEBUG __d => &D.58961.D.15209._M_local_buf
  # DEBUG __s => "min_anynet"
  # DEBUG __n => 10
  # DEBUG __s1 => &D.58961.D.15209._M_local_buf
  # DEBUG __s2 => "min_anynet"
  # DEBUG __n => 10
  __builtin_memcpy (&D.58961.D.15209._M_local_buf, "min_anynet", 10);
  # DEBUG this => &D.58961
  # DEBUG __n => 10
  # DEBUG D#4 => &D.58961
  # DEBUG __length => 10
  # DEBUG this => D#4
  MEM[(size_type *)&D.58961 + 8B] = 10;
  # DEBUG D#1 => &D.58961
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.58961 + 26B]
  # DEBUG __c2 => D#23
  MEM[(char_type &)&D.58961 + 26] = 0;
  # DEBUG D#1173 => {CLOBBER}
  # DEBUG __dnew => D#1173
  # DEBUG this => &gRoutingFunctionMap
  # DEBUG __k => &D.58961
  # DEBUG this => &gRoutingFunctionMap
  # DEBUG __x => &D.58961
  # DEBUG this => &gRoutingFunctionMap._M_t
  # DEBUG __k => &D.58961
  # DEBUG this => &gRoutingFunctionMap._M_t
  __pos_52 = MEM[(struct _Rb_tree_node_base * *)&gRoutingFunctionMap + 16B];
  # DEBUG D#124 => &gRoutingFunctionMap._M_t
  # DEBUG this => D#124
  # DEBUG D#589 => &gRoutingFunctionMap._M_t
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &D.58961
  # DEBUG __y => &MEM[(struct _Rb_tree *)&gRoutingFunctionMap]._M_impl._M_header
  # DEBUG __x => __pos_52
  if (__pos_52 == 0B)
    goto <bb 53>;
  else
    goto <bb 5>;

  <bb 3>:
  # __pos_60 = PHI <__pos_56(59), __pos_57(58)>
  # __pos_59 = PHI <__pos_121(59), __pos_155(58)>
  # DEBUG __y => __pos_59
  # DEBUG __x => __pos_60
  if (__pos_60 == 0B)
    goto <bb 13>;
  else
    goto <bb 4>;

  <bb 4>:
  goto <bb 6>;

  <bb 5>:

  <bb 6>:
  # __pos_121 = PHI <__pos_52(5), __pos_60(4)>
  # __pos_155 = PHI <&MEM[(struct _Rb_tree *)&gRoutingFunctionMap]._M_impl._M_header(5), __pos_59(4)>
  # DEBUG __y => __pos_155
  # DEBUG __x => __pos_121
  # DEBUG __x => __pos_121
  # DEBUG __x => __pos_121
  # DEBUG this => __pos_121
  # DEBUG D#586 => &MEM[(const struct _Rb_tree_node *)__pos_121]._M_value_field
  # DEBUG __r => D#586
  # DEBUG __x => D#586
  # DEBUG this => D#216
  # DEBUG D#1170 => &MEM[(const struct pair &)__pos_121 + 32].first
  # DEBUG D#587 => &D#588->_M_impl._M_key_compare
  # DEBUG D#215 => D#587
  # DEBUG __x => D#1170
  # DEBUG __y => &D.58961
  # DEBUG this => D#215
  # DEBUG __lhs => D#1170
  # DEBUG __rhs => &D.58961
  # DEBUG this => D#1170
  # DEBUG __str => &D.58961
  _61 = MEM[(long unsigned int *)__pos_121 + 40B];
  # DEBUG D#2 => D#1170
  # DEBUG this => D#2
  # DEBUG __size => _61
  # DEBUG D#2 => &D.58961
  # DEBUG this => D#2
  # DEBUG __osize => 10
  # DEBUG __a => &__size
  # DEBUG __b => &__osize
  __len_94 = MIN_EXPR <_61, 10>;
  # DEBUG __len => D#1167
  # DEBUG this => &D.58961
  # DEBUG D#1 => &D.58961
  # DEBUG this => D#1
  _66 = MEM[(char * *)__pos_121 + 32B];
  # DEBUG D#1 => D#1170
  # DEBUG this => D#1
  # DEBUG __s1 => _66
  # DEBUG __s2 => &D.58961.D.15209._M_local_buf
  # DEBUG __n => D#1167
  __r_67 = __builtin_memcmp (_66, &D.58961.D.15209._M_local_buf, __len_94);
  # DEBUG __r => NULL
  if (__r_67 == 0)
    goto <bb 7>;
  else
    goto <bb 10>;

  <bb 7>:
  # DEBUG __n1 => _61
  # DEBUG __n2 => 10
  _68 = _61 - 10;
  __d_69 = (const difference_type) _68;
  # DEBUG __d => __d_69
  if (__d_69 > 2147483647)
    goto <bb 11>;
  else
    goto <bb 8>;

  <bb 8>:
  if (__d_69 < -2147483648)
    goto <bb 12>;
  else
    goto <bb 9>;

  <bb 9>:
  __r_70 = (int) _68;

  <bb 10>:
  # __r_71 = PHI <__r_67(6), __r_70(9)>
  # DEBUG __r => __r_71
  # DEBUG D#1178 => {CLOBBER}
  # DEBUG __size => D#1178
  # DEBUG D#1179 => {CLOBBER}
  # DEBUG __osize => D#1179
  if (__r_71 >= 0)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:

  <bb 59>:
  # DEBUG __r => NULL
  # DEBUG __y => __pos_121
  __pos_56 = MEM[(struct _Rb_tree_node_base * *)__pos_121 + 16B];
  # DEBUG D#213 => __pos_121
  # DEBUG __x => D#213
  # DEBUG __x => NULL
  goto <bb 3>;

  <bb 12>:

  <bb 58>:
  # DEBUG __r => NULL
  __pos_57 = MEM[(struct _Rb_tree_node_base * *)__pos_121 + 24B];
  # DEBUG D#214 => __pos_121
  # DEBUG __x => D#214
  # DEBUG __x => NULL
  goto <bb 3>;

  <bb 13>:
  # __pos_225 = PHI <__pos_59(3)>

  <bb 57>:
  # DEBUG this => NULL
  # DEBUG __x => __pos_225
  # DEBUG __i$_M_node => __pos_225
  # DEBUG this => &gRoutingFunctionMap
  # DEBUG D#125 => &gRoutingFunctionMap._M_t
  # DEBUG this => D#125
  # DEBUG this => NULL
  # DEBUG __x => &MEM[(struct _Rb_tree *)&gRoutingFunctionMap]._M_impl._M_header
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__pos_225 == &MEM[(struct _Rb_tree *)&gRoutingFunctionMap]._M_impl._M_header)
    goto <bb 53>;
  else
    goto <bb 14>;

  <bb 14>:
  # DEBUG this => &__i
  # DEBUG this => __pos_225
  # DEBUG D#814 => &MEM[(struct _Rb_tree_node *)__pos_225]._M_value_field
  # DEBUG __r => D#814
  # DEBUG D#1171 => &MEM[(struct pair &)__pos_225 + 32].first
  # DEBUG D#89 => &gRoutingFunctionMap
  # DEBUG this => D#89
  # DEBUG D#88 => D#89
  # DEBUG D#87 => &D#88->_M_t
  # DEBUG D#86 => D#87
  # DEBUG this => D#86
  # DEBUG __x => &D.58961
  # DEBUG __y => D#1171
  # DEBUG this => D#215
  # DEBUG __lhs => &D.58961
  # DEBUG __rhs => D#1171
  # DEBUG this => &D.58961
  # DEBUG __str => D#1171
  # DEBUG D#2 => &D.58961
  # DEBUG this => D#2
  # DEBUG __size => 10
  _74 = MEM[(long unsigned int *)__pos_225 + 40B];
  # DEBUG D#2 => D#1171
  # DEBUG this => D#2
  # DEBUG __osize => _74
  # DEBUG __a => &__size
  # DEBUG __b => &__osize
  if (_74 <= 9)
    goto <bb 16>;
  else
    goto <bb 15>;

  <bb 15>:

  <bb 16>:
  # __len_76 = PHI <_74(14), 10(15)>

  <bb 62>:
  # DEBUG __len => D#1168
  # DEBUG this => D#1171
  _77 = MEM[(char * *)__pos_225 + 32B];
  # DEBUG D#1 => D#1171
  # DEBUG this => D#1
  # DEBUG D#1 => &D.58961
  # DEBUG this => D#1
  # DEBUG __s1 => &D.58961.D.15209._M_local_buf
  # DEBUG __s2 => _77
  # DEBUG __n => D#1168
  __r_79 = __builtin_memcmp (&D.58961.D.15209._M_local_buf, _77, __len_76);
  # DEBUG __r => NULL
  if (__r_79 == 0)
    goto <bb 17>;
  else
    goto <bb 20>;

  <bb 17>:
  # DEBUG __n1 => 10
  # DEBUG __n2 => _74
  _80 = 10 - _74;
  __d_81 = (const difference_type) _80;
  # DEBUG __d => __d_81
  if (__d_81 > 2147483647)
    goto <bb 43>;
  else
    goto <bb 18>;

  <bb 18>:
  if (__d_81 < -2147483648)
    goto <bb 21>;
  else
    goto <bb 19>;

  <bb 19>:
  __r_82 = (int) _80;

  <bb 20>:
  # __r_83 = PHI <__r_79(62), __r_82(19)>
  # DEBUG __r => __r_83
  # DEBUG D#1184 => {CLOBBER}
  # DEBUG __size => D#1184
  # DEBUG D#1185 => {CLOBBER}
  # DEBUG __osize => D#1185
  if (__r_83 < 0)
    goto <bb 53>;
  else
    goto <bb 43>;

  <bb 21>:
  # __pos_165 = PHI <__pos_225(18), __pos_157(60)>
  # DEBUG this => &D.87096
  # DEBUG __a => &D.58961
  # DEBUG __b => NULL
  # DEBUG this => &D.87096.first
  # DEBUG __str => &D.58961
  # DEBUG this => &D.58961
  # DEBUG D#500 => &D.58961._M_dataplus
  # DEBUG this => &D.87096.first
  # DEBUG D#501 => &MEM[(struct basic_string *)&D.87096]._M_dataplus
  # DEBUG D#118 => D#500
  # DEBUG this => D#501
  # DEBUG __dat => &MEM[(struct basic_string *)&D.87096].D.15209._M_local_buf
  # DEBUG __a => D#118
  # DEBUG D#117 => D#118
  # DEBUG D#115 => D#501
  # DEBUG D#116 => D#117
  # DEBUG this => D#115
  # DEBUG __a => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG this => D#113
  # DEBUG D.73458 => D#114
  MEM[(struct _Alloc_hider *)&D.87096]._M_p = &MEM[(struct basic_string *)&D.87096].D.15209._M_local_buf;
  # DEBUG D#1 => &D.58961
  # DEBUG this => D#1
  # DEBUG D#8 => &D.58961
  # DEBUG this => D#8
  # DEBUG D#1 => &D.58961
  # DEBUG this => D#1
  # DEBUG this => &D.87096.first
  # DEBUG __beg => &D.58961.D.15209._M_local_buf
  # DEBUG __end => &MEM[(void *)&D.58961 + 26B]
  # DEBUG this => &D.87096.first
  # DEBUG __beg => &D.58961.D.15209._M_local_buf
  # DEBUG __end => &MEM[(void *)&D.58961 + 26B]
  # DEBUG this => &D.87096.first
  # DEBUG __beg => &D.58961.D.15209._M_local_buf
  # DEBUG __end => &MEM[(void *)&D.58961 + 26B]
  # DEBUG __ptr => &D.58961.D.15209._M_local_buf
  # DEBUG __first => &D.58961.D.15209._M_local_buf
  # DEBUG __last => &MEM[(void *)&D.58961 + 26B]
  # DEBUG D#487 => &__first
  # DEBUG D.77194 => D#487
  # DEBUG __first => &D.58961.D.15209._M_local_buf
  # DEBUG __last => &MEM[(void *)&D.58961 + 26B]
  # DEBUG __dnew => 10
  # DEBUG D#1 => &D.87096.first
  # DEBUG this => D#1
  # DEBUG __p => &MEM[(struct basic_string *)&D.87096].D.15209._M_local_buf
  # DEBUG __k1 => &D.58961.D.15209._M_local_buf
  # DEBUG __k2 => &MEM[(void *)&D.58961 + 26B]
  # DEBUG __d => &MEM[(struct basic_string *)&D.87096].D.15209._M_local_buf
  # DEBUG __s => &D.58961.D.15209._M_local_buf
  # DEBUG __n => 10
  # DEBUG __s1 => &MEM[(struct basic_string *)&D.87096].D.15209._M_local_buf
  # DEBUG __s2 => &D.58961.D.15209._M_local_buf
  # DEBUG __n => 10
  __builtin_memcpy (&MEM[(struct basic_string *)&D.87096].D.15209._M_local_buf, &D.58961.D.15209._M_local_buf, 10);
  # DEBUG this => &D.87096.first
  # DEBUG __n => 10
  # DEBUG D#4 => &D.87096.first
  # DEBUG __length => 10
  # DEBUG this => D#4
  MEM[(size_type *)&D.87096 + 8B] = 10;
  # DEBUG D#1 => &D.87096.first
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.87096 + 26B]
  # DEBUG __c2 => D#23
  MEM[(char_type &)&D.87096 + 26] = 0;
  # DEBUG D#1186 => {CLOBBER}
  # DEBUG __dnew => D#1186
  D.87096.second = 0B;
  # DEBUG this => &gRoutingFunctionMap
  # DEBUG __position$_M_node => __pos_165
  # DEBUG __x => &D.87096
  # DEBUG this => NULL
  # DEBUG __it => &__position
  # DEBUG this => &gRoutingFunctionMap._M_t
  # DEBUG __pos => __pos_165
  # DEBUG __x => &D.87096
  # DEBUG this => &__an
  # DEBUG __t => &gRoutingFunctionMap._M_t
  # DEBUG __an$_M_t => &gRoutingFunctionMap._M_t
  # DEBUG D#813 => &__an
  # DEBUG this => &gRoutingFunctionMap._M_t
  MEM[(struct _Rb_tree_const_iterator *)&__position] = __pos_165;
  # DEBUG __v => &D.87096
  # DEBUG __node_gen => D#813
  # DEBUG D#812 => D#813
  # DEBUG __x => &D.87096
  # DEBUG this => D#216
  __res = std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, void (*)(const Router*, const Flit*, int, OutputSet*, bool)> > >::_M_get_insert_hint_unique_pos (&gRoutingFunctionMap._M_t, __position, &D.87096.first);
  __res$first_98 = MEM[(struct pair *)&__res];
  # DEBUG __res$first => __res$first_98
  __res$second_99 = MEM[(struct pair *)&__res + 8B];
  # DEBUG __res$second => __res$second_99
  if (__res$second_99 != 0B)
    goto <bb 22>;
  else
    goto <bb 40>;

  <bb 22>:
  # DEBUG D#807 => D#812
  # DEBUG this => &gRoutingFunctionMap._M_t
  # DEBUG __x => __res$first_98
  # DEBUG __p => __res$second_99
  # DEBUG __v => &D.87096
  # DEBUG __node_gen => D#807
  # DEBUG D#806 => D#807
  # DEBUG this => &gRoutingFunctionMap._M_t
  _84 = __res$second_99 == &MEM[(struct _Rb_tree *)&gRoutingFunctionMap]._M_impl._M_header;
  _23 = __res$first_98 != 0B;
  _55 = _23 | _84;
  if (_55 != 0)
    goto <bb 28>;
  else
    goto <bb 23>;

  <bb 23>:
  # DEBUG __x => __res$second_99
  # DEBUG __x => __res$second_99
  # DEBUG this => __res$second_99
  # DEBUG D#590 => &MEM[(const struct _Rb_tree_node *)__res$second_99]._M_value_field
  # DEBUG __r => D#590
  # DEBUG __x => D#590
  # DEBUG this => D#216
  # DEBUG D#1172 => &MEM[(const struct pair &)__res$second_99 + 32].first
  # DEBUG __x => &D.87096
  # DEBUG this => D#216
  # DEBUG D#805 => &MEM[(struct _Rb_tree *)&gRoutingFunctionMap]._M_impl._M_key_compare
  # DEBUG D#215 => D#805
  # DEBUG __x => NULL
  # DEBUG __y => D#1172
  # DEBUG this => D#215
  # DEBUG __lhs => NULL
  # DEBUG __rhs => D#1172
  # DEBUG this => &D.87096.first
  # DEBUG __str => D#1172
  _110 = MEM[(long unsigned int *)&D.87096 + 8B];
  # DEBUG D#2 => &D.87096.first
  # DEBUG this => D#2
  # DEBUG __size => _110
  _111 = MEM[(long unsigned int *)__res$second_99 + 40B];
  # DEBUG D#2 => D#1172
  # DEBUG this => D#2
  # DEBUG __osize => _111
  # DEBUG __a => &__size
  # DEBUG __b => &__osize
  __len_95 = MIN_EXPR <_110, _111>;
  # DEBUG __len => D#1169
  # DEBUG this => D#1172
  _114 = MEM[(char * *)__res$second_99 + 32B];
  # DEBUG D#1 => D#1172
  # DEBUG this => D#1
  _115 = MEM[(char * *)&D.87096];
  # DEBUG D#1 => &D.87096.first
  # DEBUG this => D#1
  # DEBUG __s1 => _115
  # DEBUG __s2 => _114
  # DEBUG __n => D#1169
  __r_116 = __builtin_memcmp (_115, _114, __len_95);
  # DEBUG __r => NULL
  if (__r_116 == 0)
    goto <bb 24>;
  else
    goto <bb 27>;

  <bb 24>:
  # DEBUG __n1 => _110
  # DEBUG __n2 => _111
  _117 = _110 - _111;
  __d_118 = (const difference_type) _117;
  # DEBUG __d => __d_118
  if (__d_118 > 2147483647)
    goto <bb 28>;
  else
    goto <bb 25>;

  <bb 25>:
  if (__d_118 < -2147483648)
    goto <bb 28>;
  else
    goto <bb 26>;

  <bb 26>:
  __r_119 = (int) _117;

  <bb 27>:
  # __r_120 = PHI <__r_116(23), __r_119(26)>

  <bb 61>:
  # DEBUG __r => __r_120
  # DEBUG D#1191 => {CLOBBER}
  # DEBUG __size => D#1191
  # DEBUG D#1192 => {CLOBBER}
  # DEBUG __osize => D#1192
  __insert_left_51 = __r_120 < 0;

  <bb 28>:
  # __insert_left_106 = PHI <0(24), 1(25), __insert_left_51(61), 1(22)>
  # DEBUG __insert_left => __insert_left_106
  # DEBUG D#804 => D#806
  # DEBUG __arg => &D.87096
  # DEBUG this => D#804
  # DEBUG D#803 => D#804
  # DEBUG D#802 => D#803->_M_t
  # DEBUG D#801 => D#802
  # DEBUG __x => &D.87096
  # DEBUG this => D#801
  # DEBUG D#800 => D#801
  # DEBUG D#799 => D#801
  # DEBUG D#785 => D#799
  # DEBUG this => D#785
  # DEBUG D#784 => D#785
  # DEBUG this => D#784
  # DEBUG __n => 1
  # DEBUG __a => D#783
  # DEBUG D#782 => D#783
  # DEBUG D#780 => D#782
  # DEBUG D#781 => 0B
  # DEBUG __n => 1
  # DEBUG this => D#780
  # DEBUG D.87244 => D#781
  # DEBUG D#779 => D#780
  # DEBUG D#778 => D#779
  # DEBUG this => D#778
  _104 = operator new (72);

  <bb 29>:
  # DEBUG __tmp => _104
  # DEBUG D#798 => D#800
  # DEBUG __node => _104
  # DEBUG __x => &D.87096
  # DEBUG this => D#798
  # DEBUG D#797 => D#798
  # DEBUG D#796 => D#798
  # DEBUG this => _104
  # DEBUG D#1195 => &_104->_M_value_field
  # DEBUG __r => D#1195
  # DEBUG D#787 => D#796
  # DEBUG this => D#787
  # DEBUG D#786 => D#787
  # DEBUG this => D#786
  # DEBUG this => NULL
  # DEBUG D.82152 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1195
  # DEBUG __val => &D.87096
  # DEBUG this => D#606
  # DEBUG D#20 => 40
  # DEBUG __p => D#1195
  # DEBUG D.79260 => D#20
  # DEBUG this => D#1195
  # DEBUG D.87288 => &D.87096
  # DEBUG D#605 => &D.87096.first
  # DEBUG this => D#1195
  # DEBUG __str => D#605
  # DEBUG this => D#605
  # DEBUG D#500 => &D#605->_M_dataplus
  # DEBUG this => D#1195
  _124 = &MEM[(struct basic_string *)_104 + 32B].D.15209._M_local_buf;
  # DEBUG D#501 => &MEM[(struct basic_string *)D#1195]._M_dataplus
  # DEBUG D#118 => D#500
  # DEBUG this => D#501
  # DEBUG __dat => _124
  # DEBUG __a => D#118
  # DEBUG D#117 => D#118
  # DEBUG D#115 => D#501
  # DEBUG D#116 => D#117
  # DEBUG this => D#115
  # DEBUG __a => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG this => D#113
  # DEBUG D.73458 => D#114
  MEM[(struct _Alloc_hider *)_104 + 32B]._M_p = _124;
  _125 = MEM[(char * *)&D.87096];
  # DEBUG D#1 => D#605
  # DEBUG this => D#1
  _126 = MEM[(long unsigned int *)&D.87096 + 8B];
  # DEBUG D#8 => D#605
  # DEBUG this => D#8
  _127 = _125 + _126;
  # DEBUG D#1 => D#605
  # DEBUG this => D#1
  # DEBUG this => D#1195
  # DEBUG __beg => _125
  # DEBUG __end => _127
  # DEBUG this => D#1195
  # DEBUG __beg => _125
  # DEBUG __end => _127
  # DEBUG this => D#1195
  # DEBUG __beg => _125
  # DEBUG __end => _127
  # DEBUG __ptr => _125
  _65 = _127 != 0B;
  _177 = _125 == 0B;
  _28 = _65 & _177;
  if (_28 != 0)
    goto <bb 54>;
  else
    goto <bb 56>;

  <bb 30>:
  _122 = &_104->_M_value_field;
  _135 = std::__cxx11::basic_string<char>::_M_create (_122, &__dnew, 0);

  <bb 31>:
  # DEBUG D#9 => D#1195
  # DEBUG __p => _135
  # DEBUG this => D#9
  MEM[(char * *)_104 + 32B] = _135;
  __dnew.67_136 = __dnew;
  # DEBUG D#10 => D#1195
  # DEBUG __capacity => __dnew.67_136
  # DEBUG this => D#10
  MEM[(size_type *)_104 + 48B] = __dnew.67_136;
  # DEBUG D#1 => D#1195
  # DEBUG this => D#1
  # DEBUG __p => _135
  # DEBUG __k1 => _125
  # DEBUG __k2 => _127
  # DEBUG __d => _135
  # DEBUG __s => _125
  # DEBUG __n => _126
  goto <bb 34>;

  <bb 32>:
  # DEBUG D#1 => D#1195
  # DEBUG this => D#1
  # DEBUG __p => _124
  # DEBUG __k1 => _125
  # DEBUG __k2 => _127
  # DEBUG __d => _124
  # DEBUG __s => _125
  # DEBUG __n => _126
  if (_126 == 1)
    goto <bb 33>;
  else
    goto <bb 34>;

  <bb 33>:
  _138 = MEM[(const char_type &)_125];
  # DEBUG D#23 => _125
  # DEBUG __c1 => _124
  # DEBUG __c2 => D#23
  MEM[(char_type &)_124] = _138;
  goto <bb 35>;

  <bb 34>:
  # _149 = PHI <_124(32), _135(31)>
  # DEBUG D#1 => D#1195
  # DEBUG this => D#1
  # DEBUG __p => _149
  # DEBUG __k1 => _125
  # DEBUG __k2 => _127
  # DEBUG __d => _149
  # DEBUG __s => _125
  # DEBUG __n => _126
  # DEBUG __s1 => _149
  # DEBUG __s2 => _125
  # DEBUG __n => _126
  __builtin_memcpy (_149, _125, _126);
  pretmp_221 = __dnew;
  pretmp_223 = MEM[(char * *)_104 + 32B];

  <bb 35>:
  # prephitmp_222 = PHI <_126(33), pretmp_221(34)>
  # prephitmp_18 = PHI <_124(33), pretmp_223(34)>
  # DEBUG D#1194 => __dnew
  # DEBUG this => D#1195
  # DEBUG __n => D#1194
  # DEBUG D#4 => D#1195
  # DEBUG __length => D#1194
  # DEBUG this => D#4
  MEM[(size_type *)_104 + 40B] = prephitmp_222;
  # DEBUG D#1 => D#1195
  # DEBUG this => D#1
  _141 = prephitmp_18 + prephitmp_222;
  # DEBUG __c1 => _141
  # DEBUG __c2 => D#23
  MEM[(char_type &)_141] = 0;
  __dnew ={v} {CLOBBER};
  _128 = D.87096.second;
  MEM[(struct pair *)_104 + 32B].second = _128;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG __z => _104
  _107 = (int) __insert_left_106;
  std::_Rb_tree_insert_and_rebalance (_107, _104, __res$second_99, &MEM[(struct _Rb_tree *)&gRoutingFunctionMap]._M_impl._M_header);
  _108 = MEM[(struct _Rb_tree *)&gRoutingFunctionMap]._M_impl._M_node_count;
  _109 = _108 + 1;
  MEM[(struct _Rb_tree *)&gRoutingFunctionMap]._M_impl._M_node_count = _109;
  # DEBUG this => NULL
  # DEBUG __x => _104
  goto <bb 40>;

<L7>:

<L3>:
  _129 = __builtin_eh_pointer (6);
  __cxa_begin_catch (_129);
  # DEBUG D#795 => D#797
  # DEBUG __p => _104
  # DEBUG this => D#795
  # DEBUG D#794 => D#795
  # DEBUG this => D#794
  # DEBUG D#793 => 1
  # DEBUG __p => _104
  # DEBUG __a => D#792
  # DEBUG __n => D#793
  # DEBUG D#791 => D#793
  # DEBUG D#790 => D#792
  # DEBUG D#788 => D#790
  # DEBUG D#789 => D#791
  # DEBUG __p => _104
  # DEBUG this => D#788
  # DEBUG D.87282 => D#789
  operator delete (_104);
  __cxa_rethrow ();

<L5>:
  __cxa_end_catch ();
  resx 7

<L8>:
  goto <bb 45> (<L2>);

  <bb 40>:
  # SR.1954_226 = PHI <_104(35), __res$first_98(21)>
  # DEBUG D#810 => {CLOBBER}
  # DEBUG __res$first => D#810
  # DEBUG D#811 => {CLOBBER}
  # DEBUG __res$second => D#811
  # DEBUG __i$_M_node => SR.1954_226
  # DEBUG this => &D.87096
  # DEBUG D#161 => &D.87096.first
  # DEBUG this => D#161
  # DEBUG this => D#161
  # DEBUG this => D#161
  _32 = MEM[(char * *)&D.87096];
  # DEBUG D#1 => D#161
  # DEBUG this => D#1
  # DEBUG this => D#161
  if (&MEM[(const struct basic_string *)&D.87096].D.15209._M_local_buf != _32)
    goto <bb 41>;
  else
    goto <bb 42>;

  <bb 41>:
  # DEBUG D#153 => MEM[(struct basic_string *)D#161].D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => D#161
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => D#161
  # DEBUG this => D#1
  # DEBUG this => D#161
  # DEBUG D#150 => &MEM[(struct basic_string *)D#161]._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _32
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _32
  # DEBUG this => D#144
  # DEBUG D.87050 => D#145
  operator delete (_32);

  <bb 42>:
  # DEBUG D#154 => &MEM[(struct basic_string *)D#161]._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.87096 ={v} {CLOBBER};
  pretmp_219 = MEM[(char * *)&D.58961];

  <bb 43>:
  # __pos_33 = PHI <__pos_225(17), SR.1954_226(42), __pos_225(20)>
  # prephitmp_220 = PHI <&D.58961.D.15209._M_local_buf(17), pretmp_219(42), &D.58961.D.15209._M_local_buf(20)>
  # DEBUG __i$_M_node => __pos_33
  # DEBUG this => &__i
  # DEBUG this => __pos_33
  # DEBUG D#815 => &MEM[(struct _Rb_tree_node *)__pos_33]._M_value_field
  # DEBUG __r => D#815
  # DEBUG D#817 => {CLOBBER}
  # DEBUG __i$_M_node => D#817
  MEM[(void (*mapped_type) (const struct Router *, const struct Flit *, int, struct OutputSet *, bool) &)__pos_33 + 64] = min_anynet;
  # DEBUG this => &D.58961
  # DEBUG this => &D.58961
  # DEBUG this => &D.58961
  # DEBUG D#1193 => MEM[(char * *)&D.58961]
  # DEBUG D#1 => &D.58961
  # DEBUG this => D#1
  # DEBUG this => &D.58961
  if (&D.58961.D.15209._M_local_buf != prephitmp_220)
    goto <bb 48>;
  else
    goto <bb 49>;

<L6>:

<L2>:
  # DEBUG this => &D.87096
  # DEBUG D#161 => &D.87096.first
  # DEBUG this => D#161
  # DEBUG this => D#161
  # DEBUG this => D#161
  _35 = MEM[(char * *)&D.87096];
  # DEBUG D#1 => D#161
  # DEBUG this => D#1
  # DEBUG this => D#161
  if (&MEM[(const struct basic_string *)&D.87096].D.15209._M_local_buf != _35)
    goto <bb 46>;
  else
    goto <bb 47>;

  <bb 46>:
  # DEBUG D#153 => MEM[(struct basic_string *)D#161].D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => D#161
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => D#161
  # DEBUG this => D#1
  # DEBUG this => D#161
  # DEBUG D#150 => &MEM[(struct basic_string *)D#161]._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _35
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _35
  # DEBUG this => D#144
  # DEBUG D.87034 => D#145
  operator delete (_35);

  <bb 47>:
  # DEBUG D#154 => &MEM[(struct basic_string *)D#161]._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.87096 ={v} {CLOBBER};
  resx 5

  <bb 48>:
  # DEBUG D#153 => D.58961.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.58961
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.58961
  # DEBUG this => D#1
  # DEBUG this => &D.58961
  # DEBUG D#150 => &D.58961._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => D#1193
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => D#1193
  # DEBUG this => D#144
  # DEBUG D.82566 => D#145
  operator delete (prephitmp_220);

  <bb 49>:
  # DEBUG D#154 => &D.58961._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.58961 ={v} {CLOBBER};
  # DEBUG this => &D.58960
  # DEBUG this => &D.58960
  return;

<L0>:
  # DEBUG this => &D.58961
  # DEBUG this => &D.58961
  # DEBUG this => &D.58961
  _6 = MEM[(char * *)&D.58961];
  # DEBUG D#1 => &D.58961
  # DEBUG this => D#1
  # DEBUG this => &D.58961
  if (&D.58961.D.15209._M_local_buf != _6)
    goto <bb 51>;
  else
    goto <bb 52>;

  <bb 51>:
  # DEBUG D#153 => D.58961.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.58961
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.58961
  # DEBUG this => D#1
  # DEBUG this => &D.58961
  # DEBUG D#150 => &D.58961._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _6
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _6
  # DEBUG this => D#144
  # DEBUG D.82581 => D#145
  operator delete (_6);

  <bb 52>:
  # DEBUG D#154 => &D.58961._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.58961 ={v} {CLOBBER};
  resx 2

  <bb 53>:
  # __pos_157 = PHI <__pos_225(20), __pos_225(57), &MEM[(struct _Rb_tree *)&gRoutingFunctionMap]._M_impl._M_header(2)>

  <bb 60>:
  goto <bb 21>;

  <bb 54>:
  std::__throw_logic_error ("basic_string::_M_construct null not valid");

<L9>:
  goto <bb 37> (<L3>);

  <bb 56>:
  # DEBUG __first => _125
  # DEBUG __last => _127
  # DEBUG D#487 => &__first
  # DEBUG D.77194 => D#487
  # DEBUG __first => _125
  # DEBUG __last => _127
  __dnew = _126;
  if (_126 > 15)
    goto <bb 30>;
  else
    goto <bb 32>;

}



;; Function std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_copy(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_Alloc_node; _Key = int; _Val = std::pair<const int, std::pair<int, int> >; _KeyOfValue = std::_Select1st<std::pair<const int, std::pair<int, int> > >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, std::pair<int, int> > >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, std::pair<int, int> > >*; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type = const std::_Rb_tree_node<std::pair<const int, std::pair<int, int> > >*] (_ZNSt8_Rb_treeIiSt4pairIKiS0_IiiEESt10_Select1stIS3_ESt4lessIiESaIS3_EE7_M_copyINS9_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS3_EPKSD_SE_RT_, funcdef_no=3602, decl_uid=64475, cgraph_uid=1724, symbol_order=1726)

Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_copy(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_Alloc_node; _Key = int; _Val = std::pair<const int, std::pair<int, int> >; _KeyOfValue = std::_Select1st<std::pair<const int, std::pair<int, int> > >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, std::pair<int, int> > >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, std::pair<int, int> > >*; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type = const std::_Rb_tree_node<std::pair<const int, std::pair<int, int> > >*] (struct _Rb_tree * const this, const struct _Rb_tree_node * __x, struct _Rb_tree_node * __p, struct _Alloc_node & __node_gen)
{
  struct _Rb_tree_node * D.87412;
  struct _Rb_tree_node * D.87389;
  struct _Rb_tree_node_base * _15;
  struct _Rb_tree_node * _17;
  struct _Rb_tree_node_base * _23;
  struct _Rb_tree_node * _25;
  void * _27;
  _Rb_tree_color _37;
  _Rb_tree_color _39;

  <bb 2>:
  # DEBUG D#659 => this_8(D)
  # DEBUG D#660 => __node_gen_10(D)
  # DEBUG __x => __x_9(D)
  # DEBUG this => D#659
  # DEBUG __node_gen => D#660
  # DEBUG D#658 => D#660
  # DEBUG this => __x_9(D)
  # DEBUG D#657 => &__x_9(D)->_M_value_field
  # DEBUG __r => D#657
  # DEBUG D#656 => D#658
  # DEBUG __arg => D#657
  # DEBUG this => D#656
  # DEBUG D#655 => D#656
  # DEBUG D#654 => D#655->_M_t
  # DEBUG D#653 => D#654
  # DEBUG __x => D#657
  # DEBUG this => D#653
  # DEBUG D#652 => D#653
  # DEBUG D#651 => D#653
  # DEBUG D#650 => D#651
  # DEBUG this => D#650
  # DEBUG D#649 => D#650
  # DEBUG this => D#649
  # DEBUG __n => 1
  # DEBUG __a => D#648
  # DEBUG D#647 => D#648
  # DEBUG D#645 => D#647
  # DEBUG D#646 => 0B
  # DEBUG __n => 1
  # DEBUG this => D#645
  # DEBUG D.87380 => D#646
  # DEBUG D#644 => D#645
  # DEBUG D#643 => D#644
  # DEBUG this => D#643
  __p_35 = operator new (48);
  # DEBUG __tmp => __p_35
  # DEBUG D#562 => D#652
  # DEBUG __node => __p_35
  # DEBUG __x => D#657
  # DEBUG this => D#562
  # DEBUG D#561 => D#562
  # DEBUG this => __p_35
  # DEBUG D#1199 => &__p_35->_M_value_field
  # DEBUG __r => D#1199
  # DEBUG D#525 => D#561
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1199
  # DEBUG __val => D#657
  # DEBUG this => D#560
  # DEBUG D#20 => 12
  # DEBUG __p => D#1199
  # DEBUG D.78103 => D#20
  MEM[(struct pair *)__p_35 + 32B] = MEM[(const struct pair &)__x_9(D) + 32];
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG __tmp => __p_35
  _37 = __x_9(D)->D.60100._M_color;
  __p_35->D.60100._M_color = _37;
  __p_35->D.60100._M_left = 0B;
  __p_35->D.60100._M_right = 0B;
  # DEBUG __top => NULL
  __p_35->D.60100._M_parent = __p_13(D);
  _15 = __x_9(D)->D.60100._M_right;
  if (_15 != 0B)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 3>:
  # DEBUG D#132 => __x_9(D)
  # DEBUG __x => D#132
  _17 = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_Alloc_node> (this_8(D), _15, __p_35, __node_gen_10(D));

  <bb 4>:
  __p_35->D.60100._M_right = _17;

  <bb 5>:
  # DEBUG __p => NULL
  __x_32 = MEM[(struct _Rb_tree_node_base * *)__x_9(D) + 16B];
  # DEBUG D#131 => __x_9(D)
  # DEBUG __x => D#131
  # DEBUG __x => NULL
  # DEBUG __p => __p_35
  # DEBUG __x => __x_32
  if (__x_32 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:

  <bb 19>:
  return __p_35;

  <bb 7>:

  <bb 8>:
  # __x_19 = PHI <__x_32(7), __x_33(15)>
  # __p_56 = PHI <__p_35(7), __p_11(15)>
  # DEBUG __p => __p_56
  # DEBUG __x => __x_19
  # DEBUG D#659 => this_8(D)
  # DEBUG D#660 => __node_gen_10(D)
  # DEBUG __x => __x_19
  # DEBUG this => D#659
  # DEBUG __node_gen => D#660
  # DEBUG D#658 => D#660
  # DEBUG this => __x_19
  # DEBUG D#657 => &__x_19->_M_value_field
  # DEBUG __r => D#657
  # DEBUG D#656 => D#658
  # DEBUG __arg => D#657
  # DEBUG this => D#656
  # DEBUG D#655 => D#656
  # DEBUG D#654 => D#655->_M_t
  # DEBUG D#653 => D#654
  # DEBUG __x => D#657
  # DEBUG this => D#653
  # DEBUG D#652 => D#653
  # DEBUG D#651 => D#653
  # DEBUG D#650 => D#651
  # DEBUG this => D#650
  # DEBUG D#649 => D#650
  # DEBUG this => D#649
  # DEBUG __n => 1
  # DEBUG __a => D#648
  # DEBUG D#647 => D#648
  # DEBUG D#645 => D#647
  # DEBUG D#646 => 0B
  # DEBUG __n => 1
  # DEBUG this => D#645
  # DEBUG D.87403 => D#646
  # DEBUG D#644 => D#645
  # DEBUG D#643 => D#644
  # DEBUG this => D#643
  __p_11 = operator new (48);
  goto <bb 10>;

<L14>:
  goto <bb 17> (<L10>);

  <bb 10>:
  # DEBUG __tmp => __p_11
  # DEBUG D#562 => D#652
  # DEBUG __node => __p_11
  # DEBUG __x => D#657
  # DEBUG this => D#562
  # DEBUG D#561 => D#562
  # DEBUG this => __p_11
  # DEBUG D#1198 => &__p_11->_M_value_field
  # DEBUG __r => D#1198
  # DEBUG D#525 => D#561
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1198
  # DEBUG __val => D#657
  # DEBUG this => D#560
  # DEBUG D#20 => 12
  # DEBUG __p => D#1198
  # DEBUG D.78103 => D#20
  MEM[(struct pair *)__p_11 + 32B] = MEM[(const struct pair &)__x_19 + 32];
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG __tmp => __p_11
  _39 = __x_19->D.60100._M_color;
  __p_11->D.60100._M_color = _39;
  __p_11->D.60100._M_left = 0B;
  __p_11->D.60100._M_right = 0B;
  # DEBUG __y => NULL
  __p_56->D.60100._M_left = __p_11;
  __p_11->D.60100._M_parent = __p_56;
  _23 = __x_19->D.60100._M_right;
  if (_23 != 0B)
    goto <bb 11>;
  else
    goto <bb 14>;

  <bb 11>:
  # DEBUG D#132 => __x_19
  # DEBUG __x => D#132
  _25 = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_Alloc_node> (this_8(D), _23, __p_11, __node_gen_10(D));
  goto <bb 13>;

<L15>:
  goto <bb 17> (<L10>);

  <bb 13>:
  __p_11->D.60100._M_right = _25;

  <bb 14>:
  # DEBUG __p => NULL
  __x_33 = MEM[(struct _Rb_tree_node_base * *)__x_19 + 16B];
  # DEBUG D#131 => __x_19
  # DEBUG __x => D#131
  # DEBUG __x => NULL
  # DEBUG __p => __p_11
  # DEBUG __x => __x_33
  if (__x_33 == 0B)
    goto <bb 6>;
  else
    goto <bb 15>;

  <bb 15>:
  goto <bb 8>;

<L13>:

<L10>:
  _27 = __builtin_eh_pointer (1);
  __cxa_begin_catch (_27);
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (this_8(D), __p_35);
  __cxa_rethrow ();

<L12>:
  __cxa_end_catch ();
  resx 2

}



;; Function std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_copy(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_Alloc_node; _Key = int; _Val = std::pair<const int, std::map<int, std::pair<int, int> > >; _KeyOfValue = std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, std::map<int, std::pair<int, int> > > >*; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type = const std::_Rb_tree_node<std::pair<const int, std::map<int, std::pair<int, int> > > >*] (_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE7_M_copyINSD_11_Alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSH_SI_RT_, funcdef_no=3228, decl_uid=62181, cgraph_uid=1350, symbol_order=1352)

Trying loop 1 as candidate
loop 1 is not innermost
loop is not parallel according to graphite
Trying loop 4 as candidate
loop 4 is innermost
loop is not parallel according to graphite
Trying loop 5 as candidate
loop 5 is innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is innermost
loop is not parallel according to graphite
std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_copy(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_Alloc_node; _Key = int; _Val = std::pair<const int, std::map<int, std::pair<int, int> > >; _KeyOfValue = std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, std::map<int, std::pair<int, int> > > >*; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type = const std::_Rb_tree_node<std::pair<const int, std::map<int, std::pair<int, int> > > >*] (struct _Rb_tree * const this, const struct _Rb_tree_node * __x, struct _Rb_tree_node * __p, struct _Alloc_node & __node_gen)
{
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node * D.87500;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node * D.87443;
  struct _Rb_tree_node_base * _15;
  struct _Rb_tree_node * _17;
  struct _Rb_tree_node_base * _23;
  struct _Rb_tree_node * _25;
  void * _27;
  _Rb_tree_color _37;
  int _38;
  struct _Rep_type * _40;
  void * _41;
  struct _Rb_tree_node_base * _42;
  struct _Rb_tree_node_base * const _43;
  long unsigned int _50;
  _Rb_tree_color _53;
  int _54;
  struct _Rep_type * _56;
  void * _57;
  struct _Rb_tree_node_base * _58;
  struct _Rb_tree_node_base * const _59;
  long unsigned int _66;

  <bb 2>:
  # DEBUG D#730 => this_8(D)
  # DEBUG D#731 => __node_gen_10(D)
  # DEBUG __x => __x_9(D)
  # DEBUG this => D#730
  # DEBUG __node_gen => D#731
  # DEBUG D#729 => D#731
  # DEBUG this => __x_9(D)
  # DEBUG D#1201 => &__x_9(D)->_M_value_field
  # DEBUG __r => D#1201
  # DEBUG D#728 => D#729
  # DEBUG __arg => D#1201
  # DEBUG this => D#728
  # DEBUG D#727 => D#728
  # DEBUG D#726 => D#727->_M_t
  # DEBUG D#725 => D#726
  # DEBUG __x => D#1201
  # DEBUG this => D#725
  # DEBUG D#724 => D#725
  # DEBUG D#723 => D#725
  # DEBUG D#722 => D#723
  # DEBUG this => D#722
  # DEBUG D#721 => D#722
  # DEBUG this => D#721
  # DEBUG __n => 1
  # DEBUG __a => D#720
  # DEBUG D#719 => D#720
  # DEBUG D#717 => D#719
  # DEBUG D#718 => 0B
  # DEBUG __n => 1
  # DEBUG this => D#717
  # DEBUG D.87441 => D#718
  # DEBUG D#716 => D#717
  # DEBUG D#715 => D#716
  # DEBUG this => D#715
  __p_36 = operator new (88);
  # DEBUG __tmp => __p_36
  # DEBUG D#669 => D#724
  # DEBUG __node => __p_36
  # DEBUG __x => D#1201
  # DEBUG this => D#669
  # DEBUG D#668 => D#669
  # DEBUG D#667 => D#669
  # DEBUG this => __p_36
  # DEBUG D#1206 => &__p_36->_M_value_field
  # DEBUG __r => D#1206
  # DEBUG D#472 => D#667
  # DEBUG this => D#472
  # DEBUG D#471 => D#472
  # DEBUG this => D#471
  # DEBUG this => NULL
  # DEBUG D.77058 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1206
  # DEBUG __val => D#1201
  # DEBUG this => D#666
  # DEBUG D#20 => 56
  # DEBUG __p => D#1206
  # DEBUG D.80314 => D#20
  # DEBUG this => D#1206
  # DEBUG D.87459 => D#1201
  _38 = MEM[(const struct pair &)__x_9(D) + 32].first;
  MEM[(struct pair *)__p_36 + 32B].first = _38;
  # DEBUG D#664 => &D#1201->second
  # DEBUG D#665 => &D#1206->second
  # DEBUG this => D#665
  # DEBUG __x => D#664
  # DEBUG D#1202 => &MEM[(const struct map &)__x_9(D) + 40]._M_t
  # DEBUG D#1208 => &MEM[(struct map *)__p_36 + 40B]._M_t
  # DEBUG this => D#1208
  # DEBUG __x => D#1202
  # DEBUG this => D#1202
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)D#1202]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)D#1208]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)__p_36 + 40B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)__p_36 + 40B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)__p_36 + 40B]._M_node_count = 0;
  # DEBUG this => D#662
  _42 = &MEM[(struct _Rb_tree_impl *)__p_36 + 40B]._M_header;
  MEM[(struct _Rb_tree_impl *)__p_36 + 40B]._M_header._M_left = _42;
  MEM[(struct _Rb_tree_impl *)__p_36 + 40B]._M_header._M_right = _42;
  _43 = MEM[(struct _Rb_tree_node_base * *)__x_9(D) + 56B];
  # DEBUG D#109 => D#1202
  # DEBUG this => D#109
  if (_43 != 0B)
    goto <bb 3>;
  else
    goto <bb 13>;

  <bb 3>:
  _40 = &MEM[(struct map *)__p_36 + 40B]._M_t;
  # DEBUG this => D#1208
  # DEBUG this => D#1208
  # DEBUG D#106 => D#1202
  # DEBUG this => D#106
  # DEBUG this => D#1208
  # DEBUG __x => NULL
  # DEBUG __p => NULL
  # DEBUG this => &__an
  # DEBUG __t => D#1208
  __an._M_t = _40;
  __x_45 = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_Alloc_node> (_40, _43, _42, &__an);

  <bb 4>:
  __an ={v} {CLOBBER};
  MEM[(struct _Rb_tree_node_base * &)__p_36 + 56] = __x_45;
  # DEBUG this => D#1208
  # DEBUG this => D#1208
  # DEBUG __x => __x_45

  <bb 5>:
  # __x_46 = PHI <__x_45(4), __x_47(6)>
  # DEBUG __x => __x_46
  __x_47 = __x_46->_M_left;
  if (__x_47 == 0B)
    goto <bb 7>;
  else
    goto <bb 6>;

  <bb 6>:
  goto <bb 5>;

  <bb 7>:
  # __x_97 = PHI <__x_46(5)>

  <bb 45>:
  MEM[(struct _Rb_tree_node_base * &)__p_36 + 64] = __x_97;
  # DEBUG this => D#1208
  # DEBUG this => D#1208
  # DEBUG __x => __x_45

  <bb 8>:
  # __x_48 = PHI <__x_45(45), __x_49(9)>
  # DEBUG __x => __x_48
  __x_49 = __x_48->_M_right;
  if (__x_49 == 0B)
    goto <bb 10>;
  else
    goto <bb 9>;

  <bb 9>:
  goto <bb 8>;

  <bb 10>:
  # __x_74 = PHI <__x_48(8)>

  <bb 44>:
  MEM[(struct _Rb_tree_node_base * &)__p_36 + 72] = __x_74;
  _50 = MEM[(const struct _Rb_tree &)__x_9(D) + 40]._M_impl._M_node_count;
  MEM[(struct _Rb_tree *)__p_36 + 40B]._M_impl._M_node_count = _50;
  goto <bb 13>;

<L13>:
  _41 = __builtin_eh_pointer (4);
  __cxa_begin_catch (_41);
  # DEBUG D#295 => D#668
  # DEBUG __p => __p_36
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG D#293 => 1
  # DEBUG __p => __p_36
  # DEBUG __a => D#292
  # DEBUG __n => D#293
  # DEBUG D#291 => D#293
  # DEBUG D#290 => D#292
  # DEBUG D#288 => D#290
  # DEBUG D#289 => D#291
  # DEBUG __p => __p_36
  # DEBUG this => D#288
  # DEBUG D.87453 => D#289
  operator delete (__p_36);
  __cxa_rethrow ();

<L15>:
  __cxa_end_catch ();
  resx 5

  <bb 13>:
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG __tmp => __p_36
  _37 = __x_9(D)->D.60031._M_color;
  __p_36->D.60031._M_color = _37;
  __p_36->D.60031._M_left = 0B;
  __p_36->D.60031._M_right = 0B;
  # DEBUG __top => NULL
  __p_36->D.60031._M_parent = __p_13(D);
  _15 = __x_9(D)->D.60031._M_right;
  if (_15 != 0B)
    goto <bb 14>;
  else
    goto <bb 16>;

  <bb 14>:
  # DEBUG D#135 => __x_9(D)
  # DEBUG __x => D#135
  _17 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_Alloc_node> (this_8(D), _15, __p_36, __node_gen_10(D));

  <bb 15>:
  __p_36->D.60031._M_right = _17;

  <bb 16>:
  # DEBUG __p => NULL
  __x_32 = MEM[(struct _Rb_tree_node_base * *)__x_9(D) + 16B];
  # DEBUG D#134 => __x_9(D)
  # DEBUG __x => D#134
  # DEBUG __x => NULL
  # DEBUG __p => __p_36
  # DEBUG __x => __x_32
  if (__x_32 == 0B)
    goto <bb 17>;
  else
    goto <bb 18>;

  <bb 17>:

  <bb 46>:
  return __p_36;

  <bb 18>:

  <bb 19>:
  # __x_51 = PHI <__x_32(18), __x_33(38)>
  # __p_60 = PHI <__p_36(18), __p_52(38)>
  # DEBUG __p => __p_60
  # DEBUG __x => __x_51
  # DEBUG D#730 => this_8(D)
  # DEBUG D#731 => __node_gen_10(D)
  # DEBUG __x => __x_51
  # DEBUG this => D#730
  # DEBUG __node_gen => D#731
  # DEBUG D#729 => D#731
  # DEBUG this => __x_51
  # DEBUG D#1203 => &__x_51->_M_value_field
  # DEBUG __r => D#1203
  # DEBUG D#728 => D#729
  # DEBUG __arg => D#1203
  # DEBUG this => D#728
  # DEBUG D#727 => D#728
  # DEBUG D#726 => D#727->_M_t
  # DEBUG D#725 => D#726
  # DEBUG __x => D#1203
  # DEBUG this => D#725
  # DEBUG D#724 => D#725
  # DEBUG D#723 => D#725
  # DEBUG D#722 => D#723
  # DEBUG this => D#722
  # DEBUG D#721 => D#722
  # DEBUG this => D#721
  # DEBUG __n => 1
  # DEBUG __a => D#720
  # DEBUG D#719 => D#720
  # DEBUG D#717 => D#719
  # DEBUG D#718 => 0B
  # DEBUG __n => 1
  # DEBUG this => D#717
  # DEBUG D.87498 => D#718
  # DEBUG D#716 => D#717
  # DEBUG D#715 => D#716
  # DEBUG this => D#715
  __p_52 = operator new (88);
  goto <bb 21>;

<L20>:
  goto <bb 40> (<L10>);

  <bb 21>:
  # DEBUG __tmp => __p_52
  # DEBUG D#669 => D#724
  # DEBUG __node => __p_52
  # DEBUG __x => D#1203
  # DEBUG this => D#669
  # DEBUG D#668 => D#669
  # DEBUG D#667 => D#669
  # DEBUG this => __p_52
  # DEBUG D#1205 => &__p_52->_M_value_field
  # DEBUG __r => D#1205
  # DEBUG D#472 => D#667
  # DEBUG this => D#472
  # DEBUG D#471 => D#472
  # DEBUG this => D#471
  # DEBUG this => NULL
  # DEBUG D.77058 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1205
  # DEBUG __val => D#1203
  # DEBUG this => D#666
  # DEBUG D#20 => 56
  # DEBUG __p => D#1205
  # DEBUG D.80314 => D#20
  # DEBUG this => D#1205
  # DEBUG D.87516 => D#1203
  _54 = MEM[(const struct pair &)__x_51 + 32].first;
  MEM[(struct pair *)__p_52 + 32B].first = _54;
  # DEBUG D#664 => &D#1203->second
  # DEBUG D#665 => &D#1205->second
  # DEBUG this => D#665
  # DEBUG __x => D#664
  # DEBUG D#1204 => &MEM[(const struct map &)__x_51 + 40]._M_t
  # DEBUG D#1207 => &MEM[(struct map *)__p_52 + 40B]._M_t
  # DEBUG this => D#1207
  # DEBUG __x => D#1204
  # DEBUG this => D#1204
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)D#1204]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)D#1207]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)__p_52 + 40B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)__p_52 + 40B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)__p_52 + 40B]._M_node_count = 0;
  # DEBUG this => D#662
  _58 = &MEM[(struct _Rb_tree_impl *)__p_52 + 40B]._M_header;
  MEM[(struct _Rb_tree_impl *)__p_52 + 40B]._M_header._M_left = _58;
  MEM[(struct _Rb_tree_impl *)__p_52 + 40B]._M_header._M_right = _58;
  _59 = MEM[(struct _Rb_tree_node_base * *)__x_51 + 56B];
  # DEBUG D#109 => D#1204
  # DEBUG this => D#109
  if (_59 != 0B)
    goto <bb 22>;
  else
    goto <bb 33>;

  <bb 22>:
  _56 = &MEM[(struct map *)__p_52 + 40B]._M_t;
  # DEBUG this => D#1207
  # DEBUG this => D#1207
  # DEBUG D#106 => D#1204
  # DEBUG this => D#106
  # DEBUG this => D#1207
  # DEBUG __x => NULL
  # DEBUG __p => NULL
  # DEBUG this => &__an
  # DEBUG __t => D#1207
  __an._M_t = _56;
  __x_61 = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_Alloc_node> (_56, _59, _58, &__an);

  <bb 23>:
  __an ={v} {CLOBBER};
  MEM[(struct _Rb_tree_node_base * &)__p_52 + 56] = __x_61;
  # DEBUG this => D#1207
  # DEBUG this => D#1207
  # DEBUG __x => __x_61

  <bb 24>:
  # __x_62 = PHI <__x_61(23), __x_63(25)>
  # DEBUG __x => __x_62
  __x_63 = __x_62->_M_left;
  if (__x_63 == 0B)
    goto <bb 26>;
  else
    goto <bb 25>;

  <bb 25>:
  goto <bb 24>;

  <bb 26>:
  # __x_1 = PHI <__x_62(24)>

  <bb 43>:
  MEM[(struct _Rb_tree_node_base * &)__p_52 + 64] = __x_1;
  # DEBUG this => D#1207
  # DEBUG this => D#1207
  # DEBUG __x => __x_61

  <bb 27>:
  # __x_64 = PHI <__x_61(43), __x_65(28)>
  # DEBUG __x => __x_64
  __x_65 = __x_64->_M_right;
  if (__x_65 == 0B)
    goto <bb 29>;
  else
    goto <bb 28>;

  <bb 28>:
  goto <bb 27>;

  <bb 29>:
  # __x_2 = PHI <__x_64(27)>

  <bb 42>:
  MEM[(struct _Rb_tree_node_base * &)__p_52 + 72] = __x_2;
  _66 = MEM[(const struct _Rb_tree &)__x_51 + 40]._M_impl._M_node_count;
  MEM[(struct _Rb_tree *)__p_52 + 40B]._M_impl._M_node_count = _66;
  goto <bb 33>;

  # __p_73 = PHI <__p_52(22)>
<L16>:
  _57 = __builtin_eh_pointer (7);
  __cxa_begin_catch (_57);
  # DEBUG D#295 => D#668
  # DEBUG __p => __p_73
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG D#293 => 1
  # DEBUG __p => __p_73
  # DEBUG __a => D#292
  # DEBUG __n => D#293
  # DEBUG D#291 => D#293
  # DEBUG D#290 => D#292
  # DEBUG D#288 => D#290
  # DEBUG D#289 => D#291
  # DEBUG __p => __p_73
  # DEBUG this => D#288
  # DEBUG D.87510 => D#289
  operator delete (__p_73);
  __cxa_rethrow ();

<L18>:
  __cxa_end_catch ();
  resx 8

<L21>:
  goto <bb 40> (<L10>);

  <bb 33>:
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG __tmp => __p_52
  _53 = __x_51->D.60031._M_color;
  __p_52->D.60031._M_color = _53;
  __p_52->D.60031._M_left = 0B;
  __p_52->D.60031._M_right = 0B;
  # DEBUG __y => NULL
  __p_60->D.60031._M_left = __p_52;
  __p_52->D.60031._M_parent = __p_60;
  _23 = __x_51->D.60031._M_right;
  if (_23 != 0B)
    goto <bb 34>;
  else
    goto <bb 37>;

  <bb 34>:
  # DEBUG D#135 => __x_51
  # DEBUG __x => D#135
  _25 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_Alloc_node> (this_8(D), _23, __p_52, __node_gen_10(D));
  goto <bb 36>;

<L22>:
  goto <bb 40> (<L10>);

  <bb 36>:
  __p_52->D.60031._M_right = _25;

  <bb 37>:
  # DEBUG __p => NULL
  __x_33 = MEM[(struct _Rb_tree_node_base * *)__x_51 + 16B];
  # DEBUG D#134 => __x_51
  # DEBUG __x => D#134
  # DEBUG __x => NULL
  # DEBUG __p => __p_52
  # DEBUG __x => __x_33
  if (__x_33 == 0B)
    goto <bb 17>;
  else
    goto <bb 38>;

  <bb 38>:
  goto <bb 19>;

<L19>:

<L10>:
  _27 = __builtin_eh_pointer (1);
  __cxa_begin_catch (_27);
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_erase (this_8(D), __p_36);
  __cxa_rethrow ();

<L12>:
  __cxa_end_catch ();
  resx 2

}



;; Function std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_insert_unique_(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator, const _Val&, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_Alloc_node; _Key = int; _Val = std::pair<const int, std::map<int, std::pair<int, int> > >; _KeyOfValue = std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > >] (_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE17_M_insert_unique_INSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_ERKS9_RT_.isra.240.constprop.276, funcdef_no=4069, decl_uid=85214, cgraph_uid=23, symbol_order=4046)

Trying loop 4 as candidate
loop 4 is innermost
loop is not parallel according to graphite
Trying loop 5 as candidate
loop 5 is innermost
loop is not parallel according to graphite
Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is innermost
loop is not parallel according to graphite
std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_insert_unique_(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::const_iterator, const _Val&, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_Alloc_node; _Key = int; _Val = std::pair<const int, std::map<int, std::pair<int, int> > >; _KeyOfValue = std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > >] (struct _Rb_tree * const this, struct const_iterator __position, const struct pair & __v)
{
  struct _Rb_tree_node_base * SR.1973;
  struct _Rb_tree_node_base * SR.1972;
  struct _Rb_tree_node_base * SR.1971;
  struct _Rb_tree_node_base * SR.1970;
  struct _Rb_tree_node_base * SR.1969;
  struct _Rb_tree_node_base * SR.1968;
  struct _Rb_tree_node_base * SR.1967;
  struct _Rb_tree_node_base * SR.1966;
  struct _Rb_tree_node_base * SR.1965;
  const struct _Rb_tree_node_base * const __position$_M_node;
  struct _Rb_tree_node_base * __res$8;
  struct _Rb_tree_node_base * __res;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  bool __insert_left;
  struct iterator D.87699;
  struct pair D.87679;
  bool __comp;
  struct _Rb_tree_node_base * const __j$_M_node;
  struct pair D.87652;
  bool __comp;
  struct _Rb_tree_node_base * const __j$_M_node;
  struct pair D.87625;
  bool __comp;
  struct _Rb_tree_node_base * const __j$_M_node;
  struct pair D.87598;
  struct const_iterator __position;
  struct _Rb_tree_node_base * __res$second;
  struct _Rb_tree_node_base * __res$first;
  struct pair __res;
  struct iterator D.85248;
  const int prephitmp_4;
  const int _5;
  struct _Rb_tree_node_base * _8;
  const size_type _13;
  struct _Rb_tree_node_base * _14;
  const int _15;
  const int _16;
  const int pretmp_18;
  const int _19;
  const int _20;
  struct _Rb_tree_node_base * _21;
  struct _Rb_tree_node_base * _22;
  const int _23;
  struct _Rb_tree_node_base * _24;
  struct _Rb_tree_node_base * _25;
  struct _Rb_tree_node_base * _26;
  const int _27;
  struct _Rb_tree_node_base * _28;
  struct _Rb_tree_node_base * const _29;
  const int _32;
  const int _33;
  struct _Rb_tree_node_base * _34;
  struct _Rb_tree_node_base * _35;
  struct _Rb_tree_node_base * _37;
  struct _Rb_tree_node_base * const _43;
  const int _44;
  const int prephitmp_45;
  struct _Rb_tree_node_base * _46;
  const int pretmp_48;
  const int _50;
  struct _Rb_tree_node_base * _52;
  struct _Rb_tree_node_base * _53;
  struct _Rb_tree_node_base * const _55;
  const int pretmp_56;
  bool _61;
  struct _Rb_tree_node_base * _64;
  const int _68;
  struct _Rb_tree_node_base * _70;
  struct _Rb_tree_node_base * _71;
  struct _Rb_tree_node_base * _73;
  bool _78;
  bool _79;
  struct _Rb_tree_node * _85;
  int _88;
  long unsigned int _89;
  long unsigned int _90;
  int _91;
  struct _Rep_type * _93;
  void * _94;
  struct _Rb_tree_node_base * _95;
  struct _Rb_tree_node_base * const _96;
  long unsigned int _103;
  const int prephitmp_107;
  const int pretmp_131;
  const int prephitmp_132;
  const int pretmp_133;
  const int prephitmp_141;
  const int pretmp_194;
  const int pretmp_196;
  const int prephitmp_197;

  <bb 2>:
  # DEBUG __node_gen s=> __node_gen
  # DEBUG D#749 s=> __node_gen
  # DEBUG __x => __v_1(D)
  # DEBUG this => D#123
  # DEBUG D#1210 => &__v_1(D)->first
  # DEBUG this => this_3(D)
  __position$_M_node_142 = MEM[(struct _Rb_tree_const_iterator *)&__position];
  # DEBUG __position$_M_node => __position$_M_node_142
  # DEBUG __k => D#1210
  # DEBUG this => &__position
  # DEBUG this => NULL
  # DEBUG __x => __position$_M_node_142
  # DEBUG __pos => __position$_M_node_142
  # DEBUG this => this_3(D)
  __j$_M_node_12 = &this_3(D)->_M_impl._M_header;
  if (__j$_M_node_12 == __position$_M_node_142)
    goto <bb 3>;
  else
    goto <bb 16>;

  <bb 3>:
  _13 = MEM[(long unsigned int *)this_3(D) + 40B];
  # DEBUG D#48 => this_3(D)
  # DEBUG this => D#48
  if (_13 != 0)
    goto <bb 4>;
  else
    goto <bb 70>;

  <bb 4>:
  # DEBUG this => this_3(D)
  _14 = MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32];
  # DEBUG __x => _14
  # DEBUG __x => _14
  # DEBUG this => _14
  # DEBUG D#316 => &MEM[(const struct _Rb_tree_node *)_14]._M_value_field
  # DEBUG __r => D#316
  # DEBUG __x => D#316
  # DEBUG this => D#123
  # DEBUG D#378 => &MEM[(const struct pair &)_14 + 32].first
  # DEBUG D#388 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#388
  _15 = MEM[(const int &)_14 + 32];
  # DEBUG D#53 => D#378
  _16 = MEM[(const int &)__v_1(D)];
  # DEBUG D#54 => D#1210
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_15 < _16)
    goto <bb 52>;
  else
    goto <bb 70>;

  <bb 5>:
  # _43 = PHI <_34(8), _35(9)>
  # DEBUG __comp => D#1213 < _32
  # DEBUG __y => __j$_M_node_63
  # DEBUG __x => _43
  if (_43 == 0B)
    goto <bb 10>;
  else
    goto <bb 6>;

  <bb 6>:

  <bb 7>:
  # __j$_M_node_63 = PHI <_8(71), _43(6)>
  # DEBUG __comp => 1
  # DEBUG __x => __j$_M_node_63
  # DEBUG __y => __j$_M_node_63
  # DEBUG __x => __j$_M_node_63
  # DEBUG __x => __j$_M_node_63
  # DEBUG this => __j$_M_node_63
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_63]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#373 => &MEM[(const struct pair &)__j$_M_node_63 + 32].first
  # DEBUG D#377 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#377
  # DEBUG D#1213 => MEM[(const int &)__v_1(D)]
  # DEBUG D#53 => D#1210
  _32 = MEM[(const int &)__j$_M_node_63 + 32];
  # DEBUG D#54 => D#373
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  # DEBUG __comp => NULL
  if (_32 > pretmp_131)
    goto <bb 8>;
  else
    goto <bb 9>;

  <bb 8>:
  _34 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_63 + 16B];
  # DEBUG D#66 => __j$_M_node_63
  # DEBUG __x => D#66
  goto <bb 5>;

  <bb 9>:
  _35 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_63 + 24B];
  # DEBUG D#65 => __j$_M_node_63
  # DEBUG __x => D#65
  goto <bb 5>;

  <bb 10>:
  # _44 = PHI <_32(5)>
  # __j$_M_node_11 = PHI <__j$_M_node_63(5)>

  <bb 74>:
  # DEBUG this => &__j
  # DEBUG __x => __j$_M_node_11
  # DEBUG __j$_M_node => __j$_M_node_11
  if (_44 > pretmp_131)
    goto <bb 11>;
  else
    goto <bb 13>;

  <bb 11>:
  # __j$_M_node_211 = PHI <__j$_M_node_11(74), __j$_M_node_12(70)>
  # DEBUG this => &__j
  # DEBUG __x => __j$_M_node_211
  # DEBUG __j$_M_node => __j$_M_node_211
  _37 = MEM[(struct _Rb_tree_node_base * *)this_3(D) + 24B];
  # DEBUG D#70 => this_3(D)
  # DEBUG this => D#70
  # DEBUG this => NULL
  # DEBUG __x => _37
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (_37 == __j$_M_node_211)
    goto <bb 86>;
  else
    goto <bb 12>;

  <bb 12>:
  # DEBUG this => &__j
  __j$_M_node_39 = std::_Rb_tree_decrement (__j$_M_node_211);
  # DEBUG __j$_M_node => __j$_M_node_39
  pretmp_133 = MEM[(const int &)__v_1(D)];
  pretmp_18 = MEM[(const int &)__j$_M_node_39 + 32];

  <bb 13>:
  # __j$_M_node_40 = PHI <__j$_M_node_11(74), __j$_M_node_39(12)>
  # __j$_M_node_210 = PHI <__j$_M_node_11(74), __j$_M_node_211(12)>
  # prephitmp_132 = PHI <pretmp_131(74), pretmp_133(12)>
  # prephitmp_141 = PHI <_44(74), pretmp_18(12)>

  <bb 78>:
  # DEBUG __j$_M_node => __j$_M_node_40
  # DEBUG __x => __j$_M_node_40
  # DEBUG __x => __j$_M_node_40
  # DEBUG this => __j$_M_node_40
  # DEBUG D#316 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_40]._M_value_field
  # DEBUG __r => D#316
  # DEBUG __x => D#316
  # DEBUG this => D#123
  # DEBUG D#374 => &MEM[(const struct pair &)__j$_M_node_40 + 32].first
  # DEBUG D#376 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#376
  # DEBUG D#53 => D#374
  # DEBUG D#54 => D#1210
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (prephitmp_132 > prephitmp_141)
    goto <bb 15>;
  else
    goto <bb 14>;

  <bb 14>:

  <bb 15>:
  # SR.1967_140 = PHI <__j$_M_node_40(14), 0B(78)>
  # SR.1968_69 = PHI <0B(14), __j$_M_node_210(78)>

  <bb 86>:
  # SR.1967_170 = PHI <SR.1967_140(15), 0B(11)>
  # SR.1968_147 = PHI <SR.1968_69(15), _37(11)>

  <bb 77>:
  # DEBUG D#375 => {CLOBBER}
  # DEBUG __j$_M_node => D#375
  goto <bb 52>;

  <bb 16>:
  # DEBUG __x => __position$_M_node_142
  # DEBUG __x => __position$_M_node_142
  # DEBUG this => __position$_M_node_142
  # DEBUG D#316 => &MEM[(const struct _Rb_tree_node *)__position$_M_node_142]._M_value_field
  # DEBUG __r => D#316
  # DEBUG __x => D#316
  # DEBUG this => D#123
  # DEBUG D#379 => &MEM[(const struct pair &)__position$_M_node_142 + 32].first
  # DEBUG D#390 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#390
  _19 = MEM[(const int &)__v_1(D)];
  # DEBUG D#53 => D#1210
  _20 = MEM[(const int &)__position$_M_node_142 + 32];
  # DEBUG D#54 => D#379
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_19 < _20)
    goto <bb 17>;
  else
    goto <bb 34>;

  <bb 17>:
  # DEBUG __before => __position$_M_node_142
  # DEBUG this => this_3(D)
  _21 = MEM[(struct _Rb_tree_node_base * &)this_3(D) + 24];
  if (_21 == __position$_M_node_142)
    goto <bb 52>;
  else
    goto <bb 18>;

  <bb 18>:
  # DEBUG this => &__before
  _22 = std::_Rb_tree_decrement (__position$_M_node_142);
  # DEBUG __before => _22
  # DEBUG __x => _22
  # DEBUG __x => _22
  # DEBUG this => _22
  # DEBUG D#316 => &MEM[(const struct _Rb_tree_node *)_22]._M_value_field
  # DEBUG __r => D#316
  # DEBUG __x => D#316
  # DEBUG this => D#123
  # DEBUG D#380 => &MEM[(const struct pair &)_22 + 32].first
  # DEBUG D#387 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#387
  _23 = MEM[(const int &)_22 + 32];
  # DEBUG D#53 => D#380
  # DEBUG D#54 => D#1210
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_19 > _23)
    goto <bb 19>;
  else
    goto <bb 21>;

  <bb 19>:
  _24 = MEM[(struct _Rb_tree_node_base * *)_22 + 24B];
  # DEBUG D#65 => _22
  # DEBUG __x => D#65
  if (_24 == 0B)
    goto <bb 52>;
  else
    goto <bb 20>;

  <bb 20>:
  goto <bb 52>;

  <bb 21>:
  # DEBUG this => this_3(D)
  # DEBUG __k => D#1210
  _46 = MEM[(struct _Rb_tree_node_base * *)this_3(D) + 16B];
  # DEBUG D#42 => this_3(D)
  # DEBUG this => D#42
  # DEBUG __x => NULL
  # DEBUG this => this_3(D)
  # DEBUG __y => NULL
  # DEBUG __comp => 1
  # DEBUG __comp => 1
  # DEBUG __y => __j$_M_node_12
  # DEBUG __x => _46
  if (_46 == 0B)
    goto <bb 29>;
  else
    goto <bb 24>;

  <bb 22>:
  # _29 = PHI <_52(26), _53(27)>
  # DEBUG __comp => _19 < _50
  # DEBUG __y => __j$_M_node_2
  # DEBUG __x => _29
  if (_29 == 0B)
    goto <bb 28>;
  else
    goto <bb 23>;

  <bb 23>:
  goto <bb 25>;

  <bb 24>:

  <bb 25>:
  # __j$_M_node_2 = PHI <_46(24), _29(23)>
  # DEBUG __comp => 1
  # DEBUG __x => __j$_M_node_2
  # DEBUG __y => __j$_M_node_2
  # DEBUG __x => __j$_M_node_2
  # DEBUG __x => __j$_M_node_2
  # DEBUG this => __j$_M_node_2
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_2]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#373 => &MEM[(const struct pair &)__j$_M_node_2 + 32].first
  # DEBUG D#377 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#377
  # DEBUG D#53 => D#1210
  _50 = MEM[(const int &)__j$_M_node_2 + 32];
  # DEBUG D#54 => D#373
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  # DEBUG __comp => NULL
  if (_19 < _50)
    goto <bb 26>;
  else
    goto <bb 27>;

  <bb 26>:
  _52 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_2 + 16B];
  # DEBUG D#66 => __j$_M_node_2
  # DEBUG __x => D#66
  goto <bb 22>;

  <bb 27>:
  _53 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_2 + 24B];
  # DEBUG D#65 => __j$_M_node_2
  # DEBUG __x => D#65
  goto <bb 22>;

  <bb 28>:
  # __j$_M_node_54 = PHI <__j$_M_node_2(22)>
  # _33 = PHI <_50(22)>

  <bb 75>:
  # DEBUG this => &__j
  # DEBUG __x => __j$_M_node_54
  # DEBUG __j$_M_node => __j$_M_node_54
  if (_19 < _33)
    goto <bb 29>;
  else
    goto <bb 31>;

  <bb 29>:
  # __j$_M_node_201 = PHI <__j$_M_node_54(75), __j$_M_node_12(21)>
  # DEBUG this => &__j
  # DEBUG __x => __j$_M_node_201
  # DEBUG __j$_M_node => __j$_M_node_201
  # DEBUG D#70 => this_3(D)
  # DEBUG this => D#70
  # DEBUG this => NULL
  # DEBUG __x => _21
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (_21 == __j$_M_node_201)
    goto <bb 87>;
  else
    goto <bb 30>;

  <bb 30>:
  # DEBUG this => &__j
  __j$_M_node_57 = std::_Rb_tree_decrement (__j$_M_node_201);
  # DEBUG __j$_M_node => __j$_M_node_57
  pretmp_48 = MEM[(const int &)__j$_M_node_57 + 32];

  <bb 31>:
  # __j$_M_node_58 = PHI <__j$_M_node_54(75), __j$_M_node_57(30)>
  # __j$_M_node_180 = PHI <__j$_M_node_54(75), __j$_M_node_201(30)>
  # prephitmp_45 = PHI <_33(75), pretmp_48(30)>

  <bb 80>:
  # DEBUG __j$_M_node => __j$_M_node_58
  # DEBUG __x => __j$_M_node_58
  # DEBUG __x => __j$_M_node_58
  # DEBUG this => __j$_M_node_58
  # DEBUG D#316 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_58]._M_value_field
  # DEBUG __r => D#316
  # DEBUG __x => D#316
  # DEBUG this => D#123
  # DEBUG D#374 => &MEM[(const struct pair &)__j$_M_node_58 + 32].first
  # DEBUG D#376 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#376
  # DEBUG D#53 => D#374
  # DEBUG D#54 => D#1210
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_19 > prephitmp_45)
    goto <bb 33>;
  else
    goto <bb 32>;

  <bb 32>:

  <bb 33>:
  # SR.1969_41 = PHI <__j$_M_node_58(32), 0B(80)>
  # SR.1970_42 = PHI <0B(32), __j$_M_node_180(80)>

  <bb 87>:
  # SR.1969_146 = PHI <SR.1969_41(33), 0B(29)>
  # SR.1970_145 = PHI <SR.1970_42(33), _21(29)>

  <bb 79>:
  # DEBUG D#375 => {CLOBBER}
  # DEBUG __j$_M_node => D#375
  goto <bb 52>;

  <bb 34>:
  # DEBUG __x => __position$_M_node_142
  # DEBUG __x => __position$_M_node_142
  # DEBUG this => __position$_M_node_142
  # DEBUG D#316 => &MEM[(const struct _Rb_tree_node *)__position$_M_node_142]._M_value_field
  # DEBUG __r => D#316
  # DEBUG __x => D#316
  # DEBUG this => D#123
  # DEBUG D#381 => &MEM[(const struct pair &)__position$_M_node_142 + 32].first
  # DEBUG D#389 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#389
  # DEBUG D#53 => D#381
  # DEBUG D#54 => D#1210
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_19 > _20)
    goto <bb 35>;
  else
    goto <bb 68>;

  <bb 35>:
  # DEBUG __after => __position$_M_node_142
  # DEBUG this => this_3(D)
  _25 = MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32];
  if (_25 == __position$_M_node_142)
    goto <bb 52>;
  else
    goto <bb 36>;

  <bb 36>:
  # DEBUG this => &__after
  _26 = std::_Rb_tree_increment (__position$_M_node_142);
  # DEBUG __after => _26
  # DEBUG __x => _26
  # DEBUG __x => _26
  # DEBUG this => _26
  # DEBUG D#316 => &MEM[(const struct _Rb_tree_node *)_26]._M_value_field
  # DEBUG __r => D#316
  # DEBUG __x => D#316
  # DEBUG this => D#123
  # DEBUG D#382 => &MEM[(const struct pair &)_26 + 32].first
  # DEBUG D#386 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#386
  # DEBUG D#53 => D#1210
  _27 = MEM[(const int &)_26 + 32];
  # DEBUG D#54 => D#382
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_19 < _27)
    goto <bb 37>;
  else
    goto <bb 39>;

  <bb 37>:
  _28 = MEM[(struct _Rb_tree_node_base * *)__position$_M_node_142 + 24B];
  # DEBUG D#65 => __position$_M_node_142
  # DEBUG __x => D#65
  if (_28 == 0B)
    goto <bb 38>;
  else
    goto <bb 52>;

  <bb 38>:
  # DEBUG this => NULL
  # DEBUG __a => NULL
  # DEBUG __b => &__pos._M_node
  # DEBUG D#385 => {CLOBBER}
  # DEBUG __pos => D#385
  # DEBUG __res => 0B
  # DEBUG __res$8 => __position$_M_node_142
  # DEBUG __res$first => 0B
  # DEBUG __res$second => __position$_M_node_142
  if (__position$_M_node_142 != 0B)
    goto <bb 55>;
  else
    goto <bb 68>;

  <bb 39>:
  # DEBUG this => this_3(D)
  # DEBUG __k => D#1210
  _64 = MEM[(struct _Rb_tree_node_base * *)this_3(D) + 16B];
  # DEBUG D#42 => this_3(D)
  # DEBUG this => D#42
  # DEBUG __x => NULL
  # DEBUG this => this_3(D)
  # DEBUG __y => NULL
  # DEBUG __comp => 1
  # DEBUG __comp => 1
  # DEBUG __y => __j$_M_node_12
  # DEBUG __x => _64
  if (_64 == 0B)
    goto <bb 47>;
  else
    goto <bb 42>;

  <bb 40>:
  # _55 = PHI <_70(44), _71(45)>
  # DEBUG __comp => _19 < _68
  # DEBUG __y => __j$_M_node_9
  # DEBUG __x => _55
  if (_55 == 0B)
    goto <bb 46>;
  else
    goto <bb 41>;

  <bb 41>:
  goto <bb 43>;

  <bb 42>:

  <bb 43>:
  # __j$_M_node_9 = PHI <_64(42), _55(41)>
  # DEBUG __comp => 1
  # DEBUG __x => __j$_M_node_9
  # DEBUG __y => __j$_M_node_9
  # DEBUG __x => __j$_M_node_9
  # DEBUG __x => __j$_M_node_9
  # DEBUG this => __j$_M_node_9
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_9]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#373 => &MEM[(const struct pair &)__j$_M_node_9 + 32].first
  # DEBUG D#377 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#377
  # DEBUG D#53 => D#1210
  _68 = MEM[(const int &)__j$_M_node_9 + 32];
  # DEBUG D#54 => D#373
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  # DEBUG __comp => NULL
  if (_19 < _68)
    goto <bb 44>;
  else
    goto <bb 45>;

  <bb 44>:
  _70 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_9 + 16B];
  # DEBUG D#66 => __j$_M_node_9
  # DEBUG __x => D#66
  goto <bb 40>;

  <bb 45>:
  _71 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_9 + 24B];
  # DEBUG D#65 => __j$_M_node_9
  # DEBUG __x => D#65
  goto <bb 40>;

  <bb 46>:
  # __j$_M_node_51 = PHI <__j$_M_node_9(40)>
  # _5 = PHI <_68(40)>

  <bb 76>:
  # DEBUG this => &__j
  # DEBUG __x => __j$_M_node_51
  # DEBUG __j$_M_node => __j$_M_node_51
  if (_19 < _5)
    goto <bb 47>;
  else
    goto <bb 49>;

  <bb 47>:
  # __j$_M_node_209 = PHI <__j$_M_node_51(76), __j$_M_node_12(39)>
  # DEBUG this => &__j
  # DEBUG __x => __j$_M_node_209
  # DEBUG __j$_M_node => __j$_M_node_209
  _73 = MEM[(struct _Rb_tree_node_base * *)this_3(D) + 24B];
  # DEBUG D#70 => this_3(D)
  # DEBUG this => D#70
  # DEBUG this => NULL
  # DEBUG __x => _73
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (_73 == __j$_M_node_209)
    goto <bb 88>;
  else
    goto <bb 48>;

  <bb 48>:
  # DEBUG this => &__j
  __j$_M_node_75 = std::_Rb_tree_decrement (__j$_M_node_209);
  # DEBUG __j$_M_node => __j$_M_node_75
  pretmp_56 = MEM[(const int &)__j$_M_node_75 + 32];

  <bb 49>:
  # __j$_M_node_76 = PHI <__j$_M_node_51(76), __j$_M_node_75(48)>
  # __j$_M_node_192 = PHI <__j$_M_node_51(76), __j$_M_node_209(48)>
  # prephitmp_4 = PHI <_5(76), pretmp_56(48)>

  <bb 82>:
  # DEBUG __j$_M_node => __j$_M_node_76
  # DEBUG __x => __j$_M_node_76
  # DEBUG __x => __j$_M_node_76
  # DEBUG this => __j$_M_node_76
  # DEBUG D#316 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_76]._M_value_field
  # DEBUG __r => D#316
  # DEBUG __x => D#316
  # DEBUG this => D#123
  # DEBUG D#374 => &MEM[(const struct pair &)__j$_M_node_76 + 32].first
  # DEBUG D#376 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#376
  # DEBUG D#53 => D#374
  # DEBUG D#54 => D#1210
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (prephitmp_4 < _19)
    goto <bb 51>;
  else
    goto <bb 50>;

  <bb 50>:

  <bb 51>:
  # SR.1971_59 = PHI <__j$_M_node_76(50), 0B(82)>
  # SR.1972_77 = PHI <0B(50), __j$_M_node_192(82)>

  <bb 88>:
  # SR.1971_144 = PHI <SR.1971_59(51), 0B(47)>
  # SR.1972_143 = PHI <SR.1972_77(51), _73(47)>

  <bb 81>:
  # DEBUG D#375 => {CLOBBER}
  # DEBUG __j$_M_node => D#375

  <bb 52>:
  # __res_111 = PHI <0B(4), SR.1967_170(77), _21(17), 0B(19), __position$_M_node_142(20), SR.1969_146(79), 0B(35), SR.1971_144(81), _26(37)>
  # __res$8_110 = PHI <_14(4), SR.1968_147(77), _21(17), _22(19), __position$_M_node_142(20), SR.1970_145(79), _25(35), SR.1972_143(81), _26(37)>
  # DEBUG D#385 => {CLOBBER}
  # DEBUG __pos => D#385
  # DEBUG __res => __res_111
  # DEBUG __res$8 => __res$8_110
  # DEBUG __res$first => __res_111
  # DEBUG __res$second => __res$8_110
  if (__res$8_110 != 0B)
    goto <bb 53>;
  else
    goto <bb 68>;

  <bb 53>:
  # DEBUG D#744 => D#749
  # DEBUG this => this_3(D)
  # DEBUG __x => __res_111
  # DEBUG __p => __res$8_110
  # DEBUG __v => __v_1(D)
  # DEBUG __node_gen => D#744
  # DEBUG D#743 => D#744
  # DEBUG this => this_3(D)
  _61 = __j$_M_node_12 == __res$8_110;
  _79 = __res_111 != 0B;
  _78 = _61 | _79;
  if (_78 != 0)
    goto <bb 56>;
  else
    goto <bb 54>;

  <bb 54>:
  pretmp_196 = MEM[(const int &)__v_1(D)];
  pretmp_194 = MEM[(const int &)__res$8_110 + 32];

  <bb 55>:
  # __res$8_212 = PHI <__res$8_110(54), __position$_M_node_142(38)>
  # prephitmp_197 = PHI <pretmp_196(54), _19(38)>
  # prephitmp_107 = PHI <pretmp_194(54), _20(38)>

  <bb 85>:
  # DEBUG D#744 => D#749
  # DEBUG this => this_3(D)
  # DEBUG __x => NULL
  # DEBUG __p => __res$8_212
  # DEBUG __v => __v_1(D)
  # DEBUG __node_gen => D#744
  # DEBUG D#743 => D#744
  # DEBUG this => this_3(D)
  # DEBUG __x => __res$8_212
  # DEBUG __x => __res$8_212
  # DEBUG this => __res$8_212
  # DEBUG D#316 => &MEM[(const struct _Rb_tree_node *)__res$8_212]._M_value_field
  # DEBUG __r => D#316
  # DEBUG __x => D#316
  # DEBUG this => D#123
  # DEBUG D#741 => &MEM[(const struct pair &)__res$8_212 + 32].first
  # DEBUG __x => __v_1(D)
  # DEBUG this => D#123
  # DEBUG D#742 => &this_3(D)->_M_impl._M_key_compare
  # DEBUG D#52 => D#742
  # DEBUG D#54 => D#741
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  __insert_left_82 = prephitmp_107 > prephitmp_197;

  <bb 56>:
  # __insert_left_87 = PHI <__insert_left_82(85), 1(53)>
  # __res$8_221 = PHI <__res$8_212(85), __res$8_110(53)>
  # DEBUG __insert_left => __insert_left_87
  # DEBUG D#728 => D#743
  # DEBUG __arg => __v_1(D)
  # DEBUG this => D#728
  # DEBUG D#727 => D#728
  # DEBUG D#726 => D#727->_M_t
  # DEBUG D#725 => D#726
  # DEBUG __x => __v_1(D)
  # DEBUG this => D#725
  # DEBUG D#724 => D#725
  # DEBUG D#723 => D#725
  # DEBUG D#722 => D#723
  # DEBUG this => D#722
  # DEBUG D#721 => D#722
  # DEBUG this => D#721
  # DEBUG __n => 1
  # DEBUG __a => D#720
  # DEBUG D#719 => D#720
  # DEBUG D#717 => D#719
  # DEBUG D#718 => 0B
  # DEBUG __n => 1
  # DEBUG this => D#717
  # DEBUG D.87696 => D#718
  # DEBUG D#716 => D#717
  # DEBUG D#715 => D#716
  # DEBUG this => D#715
  _85 = operator new (88);
  # DEBUG __tmp => _85
  # DEBUG D#669 => D#724
  # DEBUG __node => _85
  # DEBUG __x => __v_1(D)
  # DEBUG this => D#669
  # DEBUG D#668 => D#669
  # DEBUG D#667 => D#669
  # DEBUG this => _85
  # DEBUG D#1212 => &_85->_M_value_field
  # DEBUG __r => D#1212
  # DEBUG D#472 => D#667
  # DEBUG this => D#472
  # DEBUG D#471 => D#472
  # DEBUG this => D#471
  # DEBUG this => NULL
  # DEBUG D.77058 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1212
  # DEBUG __val => __v_1(D)
  # DEBUG this => D#666
  # DEBUG D#20 => 56
  # DEBUG __p => D#1212
  # DEBUG D.80314 => D#20
  # DEBUG this => D#1212
  # DEBUG D.87715 => __v_1(D)
  _91 = __v_1(D)->first;
  MEM[(struct pair *)_85 + 32B].first = _91;
  # DEBUG D#664 => &__v_1(D)->second
  # DEBUG D#665 => &D#1212->second
  # DEBUG this => D#665
  # DEBUG __x => D#664
  # DEBUG D#1211 => &MEM[(const struct map &)__v_1(D) + 8]._M_t
  # DEBUG D#1214 => &MEM[(struct map *)_85 + 40B]._M_t
  # DEBUG this => D#1214
  # DEBUG __x => D#1211
  # DEBUG this => D#1211
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)D#1211]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)D#1214]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)_85 + 40B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)_85 + 40B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)_85 + 40B]._M_node_count = 0;
  # DEBUG this => D#662
  _95 = &MEM[(struct _Rb_tree_impl *)_85 + 40B]._M_header;
  MEM[(struct _Rb_tree_impl *)_85 + 40B]._M_header._M_left = _95;
  MEM[(struct _Rb_tree_impl *)_85 + 40B]._M_header._M_right = _95;
  _96 = MEM[(struct _Rb_tree_node_base * *)__v_1(D) + 24B];
  # DEBUG D#109 => D#1211
  # DEBUG this => D#109
  if (_96 != 0B)
    goto <bb 57>;
  else
    goto <bb 67>;

  <bb 57>:
  _93 = &MEM[(struct map *)_85 + 40B]._M_t;
  # DEBUG this => D#1214
  # DEBUG this => D#1214
  # DEBUG D#106 => D#1211
  # DEBUG this => D#106
  # DEBUG this => D#1214
  # DEBUG __x => NULL
  # DEBUG __p => NULL
  # DEBUG this => &__an
  # DEBUG __t => D#1214
  __an._M_t = _93;
  __x_98 = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_Alloc_node> (_93, _96, _95, &__an);

  <bb 58>:
  __an ={v} {CLOBBER};
  MEM[(struct _Rb_tree_node_base * &)_85 + 56] = __x_98;
  # DEBUG this => D#1214
  # DEBUG this => D#1214
  # DEBUG __x => __x_98

  <bb 59>:
  # __x_99 = PHI <__x_98(58), __x_100(60)>
  # DEBUG __x => __x_99
  __x_100 = __x_99->_M_left;
  if (__x_100 == 0B)
    goto <bb 61>;
  else
    goto <bb 60>;

  <bb 60>:
  goto <bb 59>;

  <bb 61>:
  # __x_130 = PHI <__x_99(59)>

  <bb 73>:
  MEM[(struct _Rb_tree_node_base * &)_85 + 64] = __x_130;
  # DEBUG this => D#1214
  # DEBUG this => D#1214
  # DEBUG __x => __x_98

  <bb 62>:
  # __x_101 = PHI <__x_98(73), __x_102(63)>
  # DEBUG __x => __x_101
  __x_102 = __x_101->_M_right;
  if (__x_102 == 0B)
    goto <bb 64>;
  else
    goto <bb 63>;

  <bb 63>:
  goto <bb 62>;

  <bb 64>:
  # __x_31 = PHI <__x_101(62)>

  <bb 72>:
  MEM[(struct _Rb_tree_node_base * &)_85 + 72] = __x_31;
  _103 = MEM[(const struct _Rb_tree &)__v_1(D) + 8]._M_impl._M_node_count;
  MEM[(struct _Rb_tree *)_85 + 40B]._M_impl._M_node_count = _103;
  goto <bb 67>;

<L0>:
  _94 = __builtin_eh_pointer (1);
  __cxa_begin_catch (_94);
  # DEBUG D#295 => D#668
  # DEBUG __p => _85
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG D#293 => 1
  # DEBUG __p => _85
  # DEBUG __a => D#292
  # DEBUG __n => D#293
  # DEBUG D#291 => D#293
  # DEBUG D#290 => D#292
  # DEBUG D#288 => D#290
  # DEBUG D#289 => D#291
  # DEBUG __p => _85
  # DEBUG this => D#288
  # DEBUG D.87709 => D#289
  operator delete (_85);
  __cxa_rethrow ();

<L2>:
  __cxa_end_catch ();
  resx 2

  <bb 67>:
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG __z => _85
  _88 = (int) __insert_left_87;
  std::_Rb_tree_insert_and_rebalance (_88, _85, __res$8_221, __j$_M_node_12);
  _89 = this_3(D)->_M_impl._M_node_count;
  _90 = _89 + 1;
  this_3(D)->_M_impl._M_node_count = _90;
  # DEBUG this => NULL
  # DEBUG __x => _85
  MEM[(struct _Rb_tree_iterator *)&D.85248] = _85;
  goto <bb 69>;

  <bb 68>:
  # __res_220 = PHI <__res_111(52), __position$_M_node_142(34), 0B(38)>

  <bb 84>:
  # DEBUG D#385 => {CLOBBER}
  # DEBUG __pos => D#385
  # DEBUG __res => __res_220
  # DEBUG __res$8 => NULL
  # DEBUG __res$first => __res_220
  # DEBUG __res$second => NULL
  # DEBUG this => NULL
  # DEBUG __x => __res_220
  MEM[(struct _Rb_tree_iterator *)&D.85248] = __res_220;

  <bb 69>:

  <bb 83>:
  # DEBUG D#747 => {CLOBBER}
  # DEBUG __res$first => D#747
  # DEBUG D#748 => {CLOBBER}
  # DEBUG __res$second => D#748
  return D.85248;

  <bb 70>:
  # DEBUG this => this_3(D)
  # DEBUG __k => D#1210
  _8 = MEM[(struct _Rb_tree_node_base * *)this_3(D) + 16B];
  # DEBUG D#42 => this_3(D)
  # DEBUG this => D#42
  # DEBUG __x => NULL
  # DEBUG this => this_3(D)
  # DEBUG __y => NULL
  # DEBUG __comp => 1
  # DEBUG __comp => 1
  # DEBUG __y => __j$_M_node_12
  # DEBUG __x => _8
  if (_8 == 0B)
    goto <bb 11>;
  else
    goto <bb 71>;

  <bb 71>:
  pretmp_131 = MEM[(const int &)__v_1(D)];
  goto <bb 7>;

}



;; Function void AnyNet::route(int) (_ZN6AnyNet5routeEi, funcdef_no=2502, decl_uid=47442, cgraph_uid=624, symbol_order=626)

Trying loop 3 as candidate
loop 3 is not innermost
loop is not parallel according to graphite
Trying loop 6 as candidate
loop 6 is not innermost
loop is not parallel according to graphite
Trying loop 32 as candidate
loop 32 is innermost
loop is not parallel according to graphite
Trying loop 30 as candidate
loop 30 is innermost
loop is not parallel according to graphite
Trying loop 31 as candidate
loop 31 is innermost
loop is not parallel according to graphite
Trying loop 27 as candidate
loop 27 is innermost
loop is not parallel according to graphite
Trying loop 24 as candidate
loop 24 is innermost
loop is not parallel according to graphite
Trying loop 5 as candidate
loop 5 is not innermost
loop is not parallel according to graphite
Trying loop 63 as candidate
loop 63 is innermost
loop is not parallel according to graphite
Trying loop 61 as candidate
loop 61 is innermost
loop is not parallel according to graphite
Trying loop 62 as candidate
loop 62 is innermost
loop is not parallel according to graphite
Trying loop 58 as candidate
loop 58 is innermost
loop is not parallel according to graphite
Trying loop 55 as candidate
loop 55 is innermost
loop is not parallel according to graphite
Trying loop 54 as candidate
loop 54 is innermost
loop is not parallel according to graphite
Trying loop 51 as candidate
loop 51 is innermost
loop is not parallel according to graphite
Trying loop 10 as candidate
loop 10 is innermost
loop is not parallel according to graphite
Trying loop 48 as candidate
loop 48 is innermost
loop is not parallel according to graphite
Trying loop 47 as candidate
loop 47 is innermost
loop is not parallel according to graphite
Trying loop 44 as candidate
loop 44 is innermost
loop is not parallel according to graphite
Trying loop 4 as candidate
loop 4 is not innermost
loop is not parallel according to graphite
Trying loop 43 as candidate
loop 43 is innermost
loop is not parallel according to graphite
Trying loop 41 as candidate
loop 41 is innermost
loop is not parallel according to graphite
Trying loop 42 as candidate
loop 42 is innermost
loop is not parallel according to graphite
Trying loop 38 as candidate
loop 38 is innermost
loop is not parallel according to graphite
Trying loop 9 as candidate
loop 9 is innermost
loop is not parallel according to graphite
Trying loop 36 as candidate
loop 36 is innermost
loop is not parallel according to graphite
Trying loop 37 as candidate
loop 37 is innermost
loop is not parallel according to graphite
Trying loop 33 as candidate
loop 33 is innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is not innermost
loop is not parallel according to graphite
Trying loop 8 as candidate
loop 8 is not innermost
loop is not parallel according to graphite
Trying loop 22 as candidate
loop 22 is innermost
loop is not parallel according to graphite
Trying loop 23 as candidate
loop 23 is innermost
loop is not parallel according to graphite
Trying loop 19 as candidate
loop 19 is innermost
loop is not parallel according to graphite
Trying loop 12 as candidate
loop 12 is innermost
loop is not parallel according to graphite
Trying loop 13 as candidate
loop 13 is innermost
loop is not parallel according to graphite
Trying loop 14 as candidate
loop 14 is innermost
loop is not parallel according to graphite
Trying loop 15 as candidate
loop 15 is innermost
loop is not parallel according to graphite
Trying loop 16 as candidate
loop 16 is innermost
loop is not parallel according to graphite
Trying loop 7 as candidate
loop 7 is innermost
loop is not parallel according to graphite
Trying loop 1 as candidate
loop 1 is not innermost
loop is not parallel according to graphite
Trying loop 11 as candidate
loop 11 is innermost
loop is not parallel according to graphite
void AnyNet::route(int) (struct AnyNet * const this, int r_start)
{
  struct _Rb_tree_node_base * SR.1983;
  struct _Rb_tree_node_base * SR.1982;
  struct _Rb_tree_node_base * const __p$8;
  struct _Rb_tree_node_base * const __p;
  struct _Rb_tree_node_base * SR.1979;
  struct _Rb_tree_node_base * SR.1978;
  struct _Rb_tree_node_base * __res$8;
  struct _Rb_tree_node_base * __res;
  struct _Rb_tree_node_base * SR.1706;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct const_iterator __pos;
  struct iterator D.89062;
  struct _Rb_tree_node * __y;
  struct value_type D.89061;
  mapped_type & D.89060;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct value_type D.88991;
  struct mapped_type D.88990;
  struct _Rb_tree_node * __y;
  struct iterator D.88989;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1625;
  struct mapped_type & D.88986;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct value_type D.88915;
  struct mapped_type D.88914;
  struct _Rb_tree_node * __y;
  struct iterator D.88913;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1625;
  struct mapped_type & D.88910;
  struct value_type D.88859;
  struct _Rb_tree_node * __y;
  struct iterator D.88858;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1566;
  struct mapped_type & D.88855;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct value_type D.88811;
  struct mapped_type D.88810;
  struct _Rb_tree_node * __y;
  struct iterator D.88809;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1625;
  struct mapped_type & D.88806;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct value_type D.88735;
  struct mapped_type D.88734;
  struct _Rb_tree_node * __y;
  struct iterator D.88733;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1625;
  struct mapped_type & D.88730;
  struct value_type D.88679;
  struct _Rb_tree_node * __y;
  struct iterator D.88678;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1566;
  struct mapped_type & D.88675;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct value_type D.88631;
  struct mapped_type D.88630;
  struct _Rb_tree_node * __y;
  struct iterator D.88629;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1625;
  struct mapped_type & D.88626;
  struct value_type D.88575;
  struct _Rb_tree_node * __y;
  struct iterator D.88574;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1566;
  struct mapped_type & D.88571;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct value_type D.88501;
  struct mapped_type D.88500;
  struct _Rb_tree_node * __y;
  struct iterator D.88499;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1625;
  struct mapped_type & D.88496;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct value_type D.88399;
  struct mapped_type D.88398;
  struct _Rb_tree_node * __y;
  struct iterator D.88397;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1625;
  struct mapped_type & D.88394;
  struct _Rb_tree_node_base * SR.1706;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct const_iterator __pos;
  struct iterator D.88341;
  struct _Rb_tree_node * __y;
  struct value_type D.88340;
  mapped_type & D.88339;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct value_type D.88270;
  struct mapped_type D.88269;
  struct _Rb_tree_node * __y;
  struct iterator D.88268;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1625;
  struct mapped_type & D.88265;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct value_type D.88194;
  struct mapped_type D.88193;
  struct _Rb_tree_node * __y;
  struct iterator D.88192;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1625;
  struct mapped_type & D.88189;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct value_type D.88092;
  struct mapped_type D.88091;
  struct _Rb_tree_node * __y;
  struct iterator D.88090;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1625;
  struct mapped_type & D.88087;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node * __y;
  struct const_iterator __position;
  struct pair D.87957;
  struct _Rb_tree_node * __x;
  struct const_iterator __position;
  const struct _Rb_tree_node_base * const __first$_M_node;
  const struct _Rb_tree_node_base * const __last$_M_node;
  struct const_iterator __first;
  struct const_iterator __last;
  struct pair __p;
  struct const_iterator D.87916;
  struct const_iterator D.87915;
  struct _Rb_tree_node_base * const __first$_M_node;
  struct _Rb_tree_node_base * const __last$_M_node;
  size_type D.87912;
  struct value_type D.87898;
  struct mapped_type D.87897;
  struct _Rb_tree_node * __y;
  struct iterator D.87896;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1625;
  struct mapped_type & D.87893;
  bool __insert_left;
  struct iterator D.87842;
  struct pair D.87815;
  bool __comp;
  struct _Rb_tree_node_base * const __j$_M_node;
  struct pair D.87788;
  struct iterator D.87787;
  struct pair __res;
  struct _Rb_tree_node_base * __res$first;
  struct _Rb_tree_node_base * __res$second;
  struct _Rb_tree_node_base * SR.1455;
  struct _Rb_tree_node_base * const iter$_M_node;
  struct _Rb_tree_node_base * const iter$_M_node;
  struct _Rb_tree_node_base * const i$_M_node;
  const struct _Rb_tree_node_base * const i$_M_node;
  const struct _Rb_tree_node * __y;
  const struct _Rb_tree_node * __y;
  struct pair __p;
  int port;
  int neighbor;
  int i;
  int new_dist;
  int min_cand;
  int min_dist;
  int i;
  static const char __PRETTY_FUNCTION__[24] = "void AnyNet::route(int)";
  struct set rlist;
  int * prev;
  int * dist;
  size_t iftmp.181_3;
  size_t iftmp.182_4;
  int _19;
  sizetype _20;
  size_t iftmp.181_21;
  int _24;
  sizetype _25;
  size_t iftmp.182_26;
  long unsigned int _32;
  long unsigned int _33;
  int * _34;
  int * _36;
  long unsigned int _45;
  long unsigned int _46;
  int * _47;
  long unsigned int _52;
  long unsigned int _53;
  int * _54;
  struct _Rb_tree_node_base * _56;
  long unsigned int _65;
  long unsigned int _66;
  int * _67;
  int _68;
  int _70;
  int _72;
  long unsigned int _73;
  long unsigned int _74;
  int * _75;
  int _76;
  int * _78;
  int _84;
  long unsigned int _86;
  long unsigned int _87;
  int * _88;
  int _89;
  int _103;
  struct map * _163;
  struct map * _165;
  struct map * _167;
  struct map * _168;
  struct map * _169;
  struct map * _170;
  struct map * _171;
  struct map * _172;
  struct map * _174;
  struct map * _175;
  struct _Rb_tree_node_base * _178;
  long unsigned int _179;
  struct map & _180;
  const int _186;
  const int _192;
  const int _203;
  const int _209;
  struct _Rb_tree_node_base * _216;
  long unsigned int _217;
  struct map & _218;
  struct _Rb_tree_node_base * _220;
  struct _Rb_tree_node_base * _221;
  const int _250;
  struct _Rb_tree_node_base * _252;
  struct _Rb_tree_node_base * _253;
  struct _Rb_tree_node_base * _255;
  const int _266;
  struct _Rb_tree_node * _267;
  int _272;
  long unsigned int _273;
  long unsigned int _274;
  const int _278;
  const int _284;
  struct _Rep_type * _287;
  struct _Rb_tree_node_base * _289;
  struct _Rb_tree_node_base * _290;
  struct _Rb_tree_node_base * _293;
  struct _Rb_tree_node_base * _294;
  const int _311;
  const int _318;
  const int _322;
  long unsigned int _341;
  long unsigned int _342;
  const int _355;
  const int _361;
  struct _Rep_type * _364;
  struct _Rb_tree_node_base * _370;
  struct _Rb_tree_node_base * _371;
  struct _Rb_tree_node_base * _383;
  struct _Rb_tree_node_base * _387;
  const int _393;
  const int _399;
  struct _Rep_type * _402;
  struct _Rb_tree_node_base * _404;
  struct _Rb_tree_node_base * _405;
  struct _Rb_tree_node_base * _408;
  struct _Rb_tree_node_base * _409;
  const int _423;
  const int _429;
  struct _Rep_type * _432;
  struct _Rb_tree_node_base * _438;
  struct _Rb_tree_node_base * _439;
  struct _Rb_tree_node_base * _451;
  struct _Rb_tree_node_base * _455;
  const int _461;
  const int _467;
  struct _Rep_type * _470;
  const int _478;
  const int _484;
  struct _Rep_type * _487;
  struct _Rb_tree_node_base * _493;
  struct _Rb_tree_node_base * _494;
  struct _Rb_tree_node_base * _506;
  struct _Rb_tree_node_base * _510;
  const int _516;
  const int _522;
  struct _Rep_type * _525;
  struct _Rb_tree_node_base * _531;
  struct _Rb_tree_node_base * _532;
  struct _Rb_tree_node_base * _544;
  struct _Rb_tree_node_base * _548;
  const int _554;
  const int _560;
  struct _Rep_type * _563;
  const int _571;
  const int _577;
  struct _Rep_type * _580;
  struct _Rb_tree_node_base * _582;
  struct _Rb_tree_node_base * _583;
  struct _Rb_tree_node_base * _586;
  struct _Rb_tree_node_base * _587;
  const int _601;
  const int _607;
  struct _Rep_type * _610;
  const int _618;
  const int _624;
  struct _Rep_type * _627;
  struct _Rb_tree_node_base * _629;
  struct _Rb_tree_node_base * _630;
  struct _Rb_tree_node_base * _633;
  struct _Rb_tree_node_base * _634;
  const int _648;
  const int _654;
  struct _Rep_type * _657;
  struct _Rb_tree_node_base * _659;
  struct _Rb_tree_node_base * _660;
  struct _Rb_tree_node_base * _663;
  struct _Rb_tree_node_base * _664;
  const int _678;
  const int _684;
  struct _Rep_type * _687;
  const int _695;
  const int _701;
  struct _Rep_type * _704;
  struct _Rb_tree_node_base * _706;
  struct _Rb_tree_node_base * _707;
  struct _Rb_tree_node_base * _710;
  struct _Rb_tree_node_base * _711;
  bool _716;
  const int _725;
  const int _731;
  struct _Rep_type * _734;
  struct _Rb_tree_node_base * _740;
  struct _Rb_tree_node_base * _741;
  struct _Rb_tree_node_base * const _743;
  int _746;
  bool _748;
  struct _Rb_tree_node_base * _753;
  struct _Rb_tree_node_base * _757;
  const int _763;
  const int _769;
  struct _Rep_type * _772;
  int _815;
  const int _921;
  const int prephitmp_960;
  bool pretmp_962;
  bool prephitmp_963;
  int pretmp_964;
  int prephitmp_965;
  const int prephitmp_1015;
  const int pretmp_1016;
  struct _Rb_tree_node_base * pretmp_1020;
  struct _Rb_tree_node_base * prephitmp_1023;
  int prephitmp_1024;
  const int pretmp_1027;
  struct map * pretmp_1072;
  struct map * prephitmp_1073;
  struct _Rb_tree_node_base * pretmp_1074;
  struct _Rb_tree_node_base * prephitmp_1075;
  struct _Rb_tree_node_base * pretmp_1076;
  struct _Rb_tree_node_base * prephitmp_1077;
  const int pretmp_1084;
  const int prephitmp_1135;
  const int pretmp_1136;
  struct map * pretmp_1140;
  struct map * prephitmp_1143;
  struct _Rb_tree_node_base * pretmp_1144;
  struct _Rb_tree_node_base * prephitmp_1145;
  struct _Rb_tree_node_base * pretmp_1146;
  struct _Rb_tree_node_base * prephitmp_1147;
  struct map * pretmp_1192;
  struct map * prephitmp_1193;
  struct _Rb_tree_node_base * pretmp_1194;
  struct _Rb_tree_node_base * prephitmp_1195;
  struct _Rb_tree_node_base * pretmp_1196;
  struct _Rb_tree_node_base * prephitmp_1197;
  const int pretmp_1204;
  struct map * pretmp_1259;
  struct map * prephitmp_1262;
  struct _Rb_tree_node_base * pretmp_1263;
  struct _Rb_tree_node_base * prephitmp_1264;
  struct _Rb_tree_node_base * pretmp_1265;
  struct _Rb_tree_node_base * prephitmp_1266;
  long unsigned int pretmp_1321;
  long unsigned int pretmp_1324;
  int * pretmp_1325;
  int pretmp_1326;
  int prephitmp_1327;
  struct _Rb_tree_node_base * pretmp_1371;
  struct _Rb_tree_node_base * prephitmp_1372;
  struct _Rb_tree_node_base * pretmp_1373;
  struct _Rb_tree_node_base * prephitmp_1374;
  bool pretmp_1382;
  bool prephitmp_1383;
  struct map * pretmp_1436;
  struct map * prephitmp_1437;
  struct _Rb_tree_node_base * pretmp_1438;
  struct _Rb_tree_node_base * prephitmp_1441;
  struct _Rb_tree_node_base * pretmp_1442;
  struct _Rb_tree_node_base * prephitmp_1443;
  struct map * pretmp_1444;
  struct map * prephitmp_1445;
  const size_type pretmp_1498;
  const size_type prephitmp_1499;
  const size_type pretmp_1500;
  const size_type prephitmp_1501;

  <bb 2>:
  _19 = this_18(D)->D.47478._size;
  _20 = (sizetype) _19;
  if (_20 <= 2287828610704211968)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  iftmp.181_21 = _20 * 4;

  <bb 4>:
  # iftmp.181_3 = PHI <iftmp.181_21(3), 18446744073709551615(2)>
  dist_23 = operator new [] (iftmp.181_3);
  # DEBUG dist => dist_23
  _24 = this_18(D)->D.47478._size;
  _25 = (sizetype) _24;
  if (_25 <= 2287828610704211968)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  iftmp.182_26 = _25 * 4;

  <bb 6>:
  # iftmp.182_4 = PHI <iftmp.182_26(5), 18446744073709551615(4)>
  prev_28 = operator new [] (iftmp.182_4);
  # DEBUG prev => prev_28
  # DEBUG this => &rlist
  # DEBUG D#218 => &rlist._M_t
  # DEBUG this => D#218
  # DEBUG D#217 => &MEM[(struct _Rb_tree *)D#218]._M_impl
  # DEBUG this => D#217
  # DEBUG this => D#217
  # DEBUG this => D#217
  MEM[(struct _Rb_tree_impl *)&rlist]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&rlist]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&rlist]._M_node_count = 0;
  # DEBUG this => D#217
  MEM[(struct _Rb_tree_impl *)&rlist]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&rlist]._M_header;
  MEM[(struct _Rb_tree_impl *)&rlist]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&rlist]._M_header;
  # DEBUG i => 0
  # DEBUG i => 0
  _815 = this_18(D)->D.47478._size;
  if (_815 <= 0)
    goto <bb 27>;
  else
    goto <bb 7>;

  <bb 7>:

  <bb 8>:
  # i_268 = PHI <0(7), i_40(25)>
  # prephitmp_1023 = PHI <0B(7), pretmp_1020(25)>
  # prephitmp_1024 = PHI <_815(7), prephitmp_965(25)>
  # DEBUG i => i_268
  _32 = (long unsigned int) i_268;
  _33 = _32 * 4;
  _34 = dist_23 + _33;
  *_34 = 2147483647;
  _36 = prev_28 + _33;
  *_36 = -1;
  # DEBUG this => &rlist
  # DEBUG __x => &i
  # DEBUG this => &rlist._M_t
  # DEBUG __v => &i
  # DEBUG __x => &i
  # DEBUG this => D#97
  # DEBUG this => &rlist._M_t
  # DEBUG __k => &i
  # DEBUG D#1251 => MEM[(struct _Rb_tree_node_base * *)&rlist + 16B]
  # DEBUG D#40 => &rlist._M_t
  # DEBUG this => D#40
  # DEBUG __x => NULL
  # DEBUG this => &rlist._M_t
  # DEBUG __y => NULL
  # DEBUG __comp => 1
  # DEBUG __comp => 1
  # DEBUG __y => &MEM[(struct _Rb_tree *)&rlist]._M_impl._M_header
  # DEBUG __x => D#1251
  if (prephitmp_1023 == 0B)
    goto <bb 16>;
  else
    goto <bb 11>;

  <bb 9>:
  # _743 = PHI <_252(13), _253(14)>
  # DEBUG __comp => _250 > i_268
  # DEBUG __y => __j$_M_node_770
  # DEBUG __x => _743
  if (_743 == 0B)
    goto <bb 15>;
  else
    goto <bb 10>;

  <bb 10>:
  goto <bb 12>;

  <bb 11>:

  <bb 12>:
  # __j$_M_node_770 = PHI <prephitmp_1023(11), _743(10)>
  # DEBUG __comp => 1
  # DEBUG __x => __j$_M_node_770
  # DEBUG __y => __j$_M_node_770
  # DEBUG __x => __j$_M_node_770
  # DEBUG __x => __j$_M_node_770
  # DEBUG this => __j$_M_node_770
  # DEBUG D#231 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_770]._M_value_field
  # DEBUG __r => D#231
  # DEBUG __x => D#231
  # DEBUG this => D#97
  # DEBUG D#235 => &MEM[(struct _Rb_tree *)&rlist]._M_impl._M_key_compare
  # DEBUG D#52 => D#235
  # DEBUG D#53 => &i
  _250 = MEM[(const int &)__j$_M_node_770 + 32];
  # DEBUG D#54 => D#231
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  # DEBUG __comp => NULL
  if (_250 > i_268)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  _252 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_770 + 16B];
  # DEBUG D#62 => __j$_M_node_770
  # DEBUG __x => D#62
  goto <bb 9>;

  <bb 14>:
  _253 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_770 + 24B];
  # DEBUG D#61 => __j$_M_node_770
  # DEBUG __x => D#61
  goto <bb 9>;

  <bb 15>:
  # _921 = PHI <_250(9)>
  # __j$_M_node_302 = PHI <__j$_M_node_770(9)>
  # DEBUG this => &__j
  # DEBUG __x => __j$_M_node_302
  # DEBUG __j$_M_node => __j$_M_node_302
  if (_921 > i_268)
    goto <bb 16>;
  else
    goto <bb 18>;

  <bb 16>:
  # __j$_M_node_321 = PHI <__j$_M_node_302(15), &MEM[(struct _Rb_tree *)&rlist]._M_impl._M_header(8)>
  # DEBUG this => &__j
  # DEBUG __x => __j$_M_node_321
  # DEBUG __j$_M_node => __j$_M_node_321
  _255 = MEM[(struct _Rb_tree_node_base * *)&rlist + 24B];
  # DEBUG D#130 => &rlist._M_t
  # DEBUG this => D#130
  # DEBUG this => NULL
  # DEBUG __x => _255
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (_255 == __j$_M_node_321)
    goto <bb 19>;
  else
    goto <bb 17>;

  <bb 17>:
  # DEBUG this => &__j
  __j$_M_node_257 = std::_Rb_tree_decrement (__j$_M_node_321);
  # DEBUG __j$_M_node => __j$_M_node_257
  pretmp_1027 = MEM[(const int &)__j$_M_node_257 + 32];

  <bb 18>:
  # __j$_M_node_326 = PHI <__j$_M_node_302(15), __j$_M_node_321(17)>
  # prephitmp_960 = PHI <_921(15), pretmp_1027(17)>
  # DEBUG __j$_M_node => NULL
  # DEBUG __x => NULL
  # DEBUG __x => NULL
  # DEBUG this => NULL
  # DEBUG __r => D#232
  # DEBUG __x => D#232
  # DEBUG this => D#97
  # DEBUG D#234 => &MEM[(struct _Rb_tree *)&rlist]._M_impl._M_key_compare
  # DEBUG D#52 => D#234
  # DEBUG D#53 => D#232
  # DEBUG D#54 => &i
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (i_268 > prephitmp_960)
    goto <bb 19>;
  else
    goto <bb 24>;

  <bb 19>:
  # __res$8_844 = PHI <_255(16), __j$_M_node_326(18)>
  # DEBUG D#233 => {CLOBBER}
  # DEBUG __j$_M_node => D#233
  # DEBUG __res => 0B
  # DEBUG __res$8 => __res$8_844
  # DEBUG __res$first => 0B
  # DEBUG __res$second => __res$8_844
  if (__res$8_844 != 0B)
    goto <bb 20>;
  else
    goto <bb 24>;

  <bb 20>:
  # DEBUG this => &__an
  # DEBUG __t => &rlist._M_t
  # DEBUG __an$_M_t => &rlist._M_t
  # DEBUG D#627 => &__an
  # DEBUG this => &rlist._M_t
  # DEBUG __x => 0B
  # DEBUG __p => __res$8_844
  # DEBUG __v => &i
  # DEBUG __node_gen => D#627
  # DEBUG D#626 => D#627
  # DEBUG this => &rlist._M_t
  if (&MEM[(struct _Rb_tree *)&rlist]._M_impl._M_header == __res$8_844)
    goto <bb 22>;
  else
    goto <bb 21>;

  <bb 21>:
  # DEBUG __x => __res$8_844
  # DEBUG __x => __res$8_844
  # DEBUG this => __res$8_844
  # DEBUG D#624 => &MEM[(const struct _Rb_tree_node *)__res$8_844]._M_value_field
  # DEBUG __r => D#624
  # DEBUG __x => D#624
  # DEBUG this => D#97
  # DEBUG __x => &i
  # DEBUG this => D#97
  # DEBUG D#625 => &MEM[(struct _Rb_tree *)&rlist]._M_impl._M_key_compare
  # DEBUG D#52 => D#625
  _266 = MEM[(const int &)__res$8_844 + 32];
  # DEBUG D#54 => D#624
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  __insert_left_307 = _266 > i_268;

  <bb 22>:
  # __insert_left_271 = PHI <__insert_left_307(21), 1(20)>
  # DEBUG __insert_left => __insert_left_271
  # DEBUG D#623 => D#626
  # DEBUG __arg => &i
  # DEBUG this => D#623
  # DEBUG D#622 => D#623
  # DEBUG D#621 => D#622->_M_t
  # DEBUG D#620 => D#621
  # DEBUG __x => &i
  # DEBUG this => D#620
  # DEBUG D#619 => D#620
  # DEBUG D#618 => D#620
  # DEBUG D#617 => D#618
  # DEBUG this => D#617
  # DEBUG D#616 => D#617
  # DEBUG this => D#616
  # DEBUG __n => 1
  # DEBUG __a => D#615
  # DEBUG D#614 => D#615
  # DEBUG D#612 => D#614
  # DEBUG D#613 => 0B
  # DEBUG __n => 1
  # DEBUG this => D#612
  # DEBUG D.87832 => D#613
  # DEBUG D#611 => D#612
  # DEBUG D#610 => D#611
  # DEBUG this => D#610
  _267 = operator new (40);

  <bb 23>:
  # DEBUG __tmp => _267
  # DEBUG D#371 => D#619
  # DEBUG __node => _267
  # DEBUG __x => &i
  # DEBUG this => D#371
  # DEBUG D#370 => D#371
  # DEBUG this => _267
  # DEBUG D#1238 => &_267->_M_value_field
  # DEBUG __r => D#1238
  # DEBUG D#264 => D#370
  # DEBUG this => D#264
  # DEBUG D#263 => D#264
  # DEBUG this => D#263
  # DEBUG this => NULL
  # DEBUG D.74553 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1238
  # DEBUG __val => &i
  # DEBUG this => D#110
  # DEBUG D#20 => 4
  # DEBUG __p => D#1238
  # DEBUG D.73419 => D#20
  MEM[(int *)_267 + 32B] = i_268;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG __z => _267
  _272 = (int) __insert_left_271;
  std::_Rb_tree_insert_and_rebalance (_272, _267, __res$8_844, &MEM[(struct _Rb_tree *)&rlist]._M_impl._M_header);
  _273 = MEM[(struct _Rb_tree *)&rlist]._M_impl._M_node_count;
  _274 = _273 + 1;
  MEM[(struct _Rb_tree *)&rlist]._M_impl._M_node_count = _274;
  # DEBUG this => NULL
  # DEBUG __x => _267
  # DEBUG this => NULL
  # DEBUG __a => &D.87787
  # DEBUG __b => NULL
  D.87787 ={v} {CLOBBER};
  pretmp_964 = this_18(D)->D.47478._size;

  <bb 24>:
  # prephitmp_965 = PHI <pretmp_964(23), prephitmp_1024(19), prephitmp_1024(18)>
  # DEBUG D#630 => {CLOBBER}
  # DEBUG __res$first => D#630
  # DEBUG D#631 => {CLOBBER}
  # DEBUG __res$second => D#631
  # DEBUG this => NULL
  # DEBUG __it => &__p.first
  # DEBUG D#882 => MEM[(const struct iterator &)&__p]._M_node
  # DEBUG this => NULL
  # DEBUG __a => NULL
  # DEBUG __b => &__p.second
  # DEBUG D#881 => MEM[(const bool &)&__p + 8]
  # DEBUG D#880 => VIEW_CONVERT_EXPR<unsigned char>(D#881)
  __p ={v} {CLOBBER};
  # DEBUG D.83123 => D#882
  # DEBUG D.83124 => D#880
  i_40 = i_268 + 1;
  # DEBUG i => i_40
  # DEBUG i => i_40
  if (i_40 >= prephitmp_965)
    goto <bb 26>;
  else
    goto <bb 25>;

  <bb 25>:
  pretmp_1020 = MEM[(struct _Rb_tree_node_base * *)&rlist + 16B];
  goto <bb 8>;

  <bb 26>:
  pretmp_1498 = MEM[(long unsigned int *)&rlist + 40B];

  <bb 27>:
  # prephitmp_1499 = PHI <pretmp_1498(26), 0(6)>
  # DEBUG D#1216 => {CLOBBER}
  # DEBUG i => D#1216
  _45 = (long unsigned int) r_start_107(D);
  _46 = _45 * 4;
  _47 = dist_23 + _46;
  *_47 = 0;

  <bb 28>:
  # prephitmp_1501 = PHI <prephitmp_1499(27), pretmp_1500(104)>
  # DEBUG this => &rlist
  # DEBUG D#57 => &rlist._M_t
  # DEBUG D#56 => D#57
  # DEBUG this => D#56
  if (prephitmp_1501 != 0)
    goto <bb 31>;
  else
    goto <bb 29>;

  <bb 29>:
  # DEBUG i => 0
  _746 = this_18(D)->D.47478._size;
  if (_746 <= 0)
    goto <bb 30>;
  else
    goto <bb 111>;

  <bb 30>:
  # DEBUG D#1219 => {CLOBBER}
  # DEBUG i => D#1219
  # DEBUG this => &rlist
  # DEBUG this => &rlist._M_t
  _220 = MEM[(struct _Rb_tree_node_base * *)&rlist + 16B];
  # DEBUG D#40 => &rlist._M_t
  # DEBUG this => D#40
  std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase (&rlist._M_t, _220);
  # DEBUG D#281 => &MEM[(struct _Rb_tree *)&rlist]._M_impl
  # DEBUG this => D#281
  # DEBUG this => D#281
  # DEBUG this => D#281
  rlist ={v} {CLOBBER};
  return;

  <bb 31>:
  # DEBUG min_dist => NULL
  # DEBUG min_cand => -1
  # DEBUG this => &rlist
  # DEBUG D#99 => &rlist._M_t
  i$_M_node_135 = MEM[(struct _Rb_tree_node_base * *)&rlist + 24B];
  # DEBUG D#98 => D#99
  # DEBUG this => D#98
  # DEBUG this => NULL
  # DEBUG __x => i$_M_node_135
  # DEBUG i$_M_node => i$_M_node_135
  # DEBUG min_cand => -1
  # DEBUG i$_M_node => i$_M_node_135
  # DEBUG min_dist => 2147483647
  # DEBUG this => &rlist
  # DEBUG D#100 => &rlist._M_t
  # DEBUG this => D#100
  # DEBUG this => NULL
  # DEBUG __x => &MEM[(const struct _Rb_tree *)&rlist]._M_impl._M_header
  # DEBUG this => &i
  # DEBUG __x => &D.59169
  if (&MEM[(const struct _Rb_tree *)&rlist]._M_impl._M_header != i$_M_node_135)
    goto <bb 32>;
  else
    goto <bb 38>;

  <bb 32>:

  <bb 33>:
  # min_dist_837 = PHI <2147483647(32), min_dist_2(37)>
  # min_cand_832 = PHI <-1(32), min_cand_159(37)>
  # i$_M_node_299 = PHI <i$_M_node_135(32), i$_M_node_96(37)>
  # DEBUG min_cand => min_cand_832
  # DEBUG i$_M_node => i$_M_node_299
  # DEBUG min_dist => min_dist_837
  # DEBUG this => &rlist
  # DEBUG D#100 => &rlist._M_t
  # DEBUG this => D#100
  # DEBUG this => NULL
  # DEBUG __x => &MEM[(const struct _Rb_tree *)&rlist]._M_impl._M_header
  # DEBUG this => &i
  # DEBUG __x => &D.59169
  # DEBUG this => &i
  # DEBUG this => i$_M_node_299
  # DEBUG D#848 => &MEM[(const struct _Rb_tree_node *)i$_M_node_299]._M_value_field
  # DEBUG __r => D#848
  min_cand_51 = MEM[(const int &)i$_M_node_299 + 32];
  _52 = (long unsigned int) min_cand_51;
  _53 = _52 * 4;
  _54 = dist_23 + _53;
  min_dist_55 = *_54;
  if (min_dist_55 < min_dist_837)
    goto <bb 35>;
  else
    goto <bb 34>;

  <bb 34>:

  <bb 35>:
  # min_dist_2 = PHI <min_dist_837(34), min_dist_55(33)>
  # min_cand_159 = PHI <min_cand_832(34), min_cand_51(33)>
  # DEBUG min_cand => min_cand_159
  # DEBUG min_dist => min_dist_2
  # DEBUG this => &i
  i$_M_node_96 = std::_Rb_tree_increment (i$_M_node_299);
  # DEBUG i$_M_node => i$_M_node_96
  # DEBUG min_cand => min_cand_159
  # DEBUG i$_M_node => i$_M_node_96
  # DEBUG min_dist => min_dist_2
  # DEBUG this => &rlist
  # DEBUG D#100 => &rlist._M_t
  # DEBUG this => D#100
  # DEBUG this => NULL
  # DEBUG __x => &MEM[(const struct _Rb_tree *)&rlist]._M_impl._M_header
  # DEBUG this => &i
  # DEBUG __x => &D.59169
  if (&MEM[(const struct _Rb_tree *)&rlist]._M_impl._M_header != i$_M_node_96)
    goto <bb 37>;
  else
    goto <bb 36>;

  <bb 36>:
  # min_cand_977 = PHI <min_cand_159(35)>
  goto <bb 38>;

  <bb 37>:
  goto <bb 33>;

  <bb 38>:
  # min_cand_833 = PHI <min_cand_977(36), -1(31)>
  # DEBUG D#871 => {CLOBBER}
  # DEBUG i$_M_node => D#871
  # DEBUG this => &rlist
  # DEBUG __x => &min_cand
  # DEBUG this => &rlist._M_t
  # DEBUG __x => &min_cand
  # DEBUG this => &rlist._M_t
  # DEBUG __k => &min_cand
  __p_308 = MEM[(struct _Rb_tree_node_base * *)&rlist + 16B];
  # DEBUG D#40 => &rlist._M_t
  # DEBUG this => D#40
  # DEBUG __x => NULL
  # DEBUG this => &rlist._M_t
  # DEBUG __y => NULL
  # DEBUG __y => &MEM[(struct _Rb_tree *)&rlist]._M_impl._M_header
  # DEBUG __x => __p_308
  if (__p_308 == 0B)
    goto <bb 64>;
  else
    goto <bb 42>;

  <bb 39>:
  # __p_713 = PHI <__p_313(44), __p_314(46)>
  # __p_712 = PHI <__p_362(44), __p_578(46)>
  # DEBUG __y => __p_712
  # DEBUG __x => __p_713
  if (__p_713 == 0B)
    goto <bb 41>;
  else
    goto <bb 40>;

  <bb 40>:
  goto <bb 43>;

  <bb 41>:
  # __p_336 = PHI <__p_712(39)>
  pretmp_1382 = &MEM[(struct _Rb_tree *)&rlist]._M_impl._M_header == __p_336;
  goto <bb 64>;

  <bb 42>:

  <bb 43>:
  # __p_578 = PHI <__p_308(42), __p_713(40)>
  # __p_362 = PHI <&MEM[(struct _Rb_tree *)&rlist]._M_impl._M_header(42), __p_712(40)>
  # DEBUG __y => __p_362
  # DEBUG __x => __p_578
  # DEBUG __x => __p_578
  # DEBUG __x => __p_578
  # DEBUG this => __p_578
  # DEBUG D#227 => &MEM[(const struct _Rb_tree_node *)__p_578]._M_value_field
  # DEBUG __r => D#227
  # DEBUG __x => D#227
  # DEBUG this => D#97
  # DEBUG D#230 => &MEM[(struct _Rb_tree *)&rlist]._M_impl._M_key_compare
  # DEBUG D#52 => D#230
  _311 = MEM[(const int &)__p_578 + 32];
  # DEBUG D#53 => D#227
  # DEBUG D#54 => &min_cand
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_311 < min_cand_833)
    goto <bb 44>;
  else
    goto <bb 45>;

  <bb 44>:
  __p_313 = MEM[(struct _Rb_tree_node_base * *)__p_578 + 24B];
  # DEBUG D#61 => __p_578
  # DEBUG __x => D#61
  # DEBUG __x => NULL
  goto <bb 39>;

  <bb 45>:
  # DEBUG __x => __p_578
  # DEBUG __x => __p_578
  # DEBUG this => __p_578
  # DEBUG D#228 => &MEM[(const struct _Rb_tree_node *)__p_578]._M_value_field
  # DEBUG __r => D#228
  # DEBUG __x => D#228
  # DEBUG this => D#97
  # DEBUG D#229 => &MEM[(struct _Rb_tree *)&rlist]._M_impl._M_key_compare
  # DEBUG D#52 => D#229
  # DEBUG D#53 => &min_cand
  # DEBUG D#54 => D#228
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_311 > min_cand_833)
    goto <bb 46>;
  else
    goto <bb 47>;

  <bb 46>:
  # DEBUG __y => __p_578
  __p_314 = MEM[(struct _Rb_tree_node_base * *)__p_578 + 16B];
  # DEBUG D#62 => __p_578
  # DEBUG __x => D#62
  # DEBUG __x => NULL
  goto <bb 39>;

  <bb 47>:
  # __p_846 = PHI <__p_362(45)>
  # __p_821 = PHI <__p_578(45)>
  # DEBUG __xu => __p_821
  # DEBUG __yu => __p_846
  # DEBUG __y => __p_821
  __p_315 = MEM[(struct _Rb_tree_node_base * *)__p_821 + 16B];
  # DEBUG D#62 => __p_821
  # DEBUG __x => D#62
  # DEBUG __x => NULL
  __p_316 = MEM[(struct _Rb_tree_node_base * *)__p_821 + 24B];
  # DEBUG D#61 => __p_821
  # DEBUG __x => D#61
  # DEBUG __xu => NULL
  # DEBUG D#222 => &rlist._M_t
  # DEBUG __x => NULL
  # DEBUG __y => __p_846
  # DEBUG __k => &min_cand
  # DEBUG __y => __p_846
  # DEBUG __x => __p_316
  if (__p_316 == 0B)
    goto <bb 51>;
  else
    goto <bb 52>;

  <bb 48>:
  # __p_692 = PHI <__p_319(54), __p_320(55)>
  # __p_691 = PHI <__p_561(54), __p_430(55)>
  # DEBUG __y => __p_691
  # DEBUG __x => __p_692
  if (__p_692 == 0B)
    goto <bb 49>;
  else
    goto <bb 50>;

  <bb 49>:
  # __p_717 = PHI <__p_691(48)>
  goto <bb 51>;

  <bb 50>:
  goto <bb 53>;

  <bb 51>:
  # __p_400 = PHI <__p_717(49), __p_846(47)>
  # DEBUG __y => __p_821
  # DEBUG __x => __p_315
  if (__p_315 == 0B)
    goto <bb 63>;
  else
    goto <bb 59>;

  <bb 52>:

  <bb 53>:
  # __p_561 = PHI <__p_316(52), __p_692(50)>
  # __p_430 = PHI <__p_846(52), __p_691(50)>
  # DEBUG __y => __p_430
  # DEBUG __x => __p_561
  # DEBUG __x => __p_561
  # DEBUG __x => __p_561
  # DEBUG this => __p_561
  # DEBUG D#219 => &MEM[(const struct _Rb_tree_node *)__p_561]._M_value_field
  # DEBUG __r => D#219
  # DEBUG __x => D#219
  # DEBUG this => D#97
  # DEBUG D#220 => &D#221->_M_impl._M_key_compare
  # DEBUG D#52 => D#220
  # DEBUG D#53 => &min_cand
  _318 = MEM[(const int &)__p_561 + 32];
  # DEBUG D#54 => D#219
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_318 > min_cand_833)
    goto <bb 54>;
  else
    goto <bb 55>;

  <bb 54>:
  # DEBUG __y => __p_561
  __p_319 = MEM[(struct _Rb_tree_node_base * *)__p_561 + 16B];
  # DEBUG D#62 => __p_561
  # DEBUG __x => D#62
  # DEBUG __x => NULL
  goto <bb 48>;

  <bb 55>:
  __p_320 = MEM[(struct _Rb_tree_node_base * *)__p_561 + 24B];
  # DEBUG D#61 => __p_561
  # DEBUG __x => D#61
  # DEBUG __x => NULL
  goto <bb 48>;

  <bb 56>:
  # __p_666 = PHI <__p_323(61), __p_324(62)>
  # __p_665 = PHI <__p_523(61), __p_485(62)>
  # DEBUG __y => __p_665
  # DEBUG __x => __p_666
  if (__p_666 == 0B)
    goto <bb 57>;
  else
    goto <bb 58>;

  <bb 57>:
  # __p_742 = PHI <__p_665(56)>
  goto <bb 63>;

  <bb 58>:
  goto <bb 60>;

  <bb 59>:

  <bb 60>:
  # __p_523 = PHI <__p_315(59), __p_666(58)>
  # __p_485 = PHI <__p_821(59), __p_665(58)>
  # DEBUG __y => __p_485
  # DEBUG __x => __p_523
  # DEBUG __x => __p_523
  # DEBUG __x => __p_523
  # DEBUG this => __p_523
  # DEBUG D#223 => &MEM[(const struct _Rb_tree_node *)__p_523]._M_value_field
  # DEBUG __r => D#223
  # DEBUG __x => D#223
  # DEBUG this => D#97
  # DEBUG D#224 => &D#225->_M_impl._M_key_compare
  # DEBUG D#52 => D#224
  _322 = MEM[(const int &)__p_523 + 32];
  # DEBUG D#53 => D#223
  # DEBUG D#54 => &min_cand
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_322 >= min_cand_833)
    goto <bb 61>;
  else
    goto <bb 62>;

  <bb 61>:
  # DEBUG __y => __p_523
  __p_323 = MEM[(struct _Rb_tree_node_base * *)__p_523 + 16B];
  # DEBUG D#62 => __p_523
  # DEBUG __x => D#62
  # DEBUG __x => NULL
  goto <bb 56>;

  <bb 62>:
  __p_324 = MEM[(struct _Rb_tree_node_base * *)__p_523 + 24B];
  # DEBUG D#61 => __p_523
  # DEBUG __x => D#61
  # DEBUG __x => NULL
  goto <bb 56>;

  <bb 63>:
  # __p_468 = PHI <__p_742(57), __p_821(51)>
  # DEBUG this => NULL
  # DEBUG __x => __p_468
  # DEBUG this => NULL
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  pretmp_962 = &MEM[(struct _Rb_tree *)&rlist]._M_impl._M_header == __p_400;
  goto <bb 65>;

  <bb 64>:
  # __p_304 = PHI <__p_336(41), &MEM[(struct _Rb_tree *)&rlist]._M_impl._M_header(38)>
  # prephitmp_1383 = PHI <pretmp_1382(41), 1(38)>
  # DEBUG this => NULL
  # DEBUG __x => __p_304
  # DEBUG this => NULL
  # DEBUG __x => __p_304
  # DEBUG this => NULL
  # DEBUG __a => NULL
  # DEBUG __b => NULL

  <bb 65>:
  # __p_843 = PHI <__p_468(63), __p_304(64)>
  # __p$8_842 = PHI <__p_400(63), __p_304(64)>
  # prephitmp_963 = PHI <pretmp_962(63), prephitmp_1383(64)>
  # DEBUG __p => __p_843
  # DEBUG __p$8 => __p$8_842
  # DEBUG D#101 => &rlist._M_t
  # DEBUG this => D#101
  # DEBUG __old_size => NULL
  # DEBUG this => &rlist._M_t
  # DEBUG __first$_M_node => __p_843
  # DEBUG __last$_M_node => __p$8_842
  # DEBUG this => &D.87915
  # DEBUG __it => &__last
  # DEBUG this => &D.87916
  # DEBUG __it => &__first
  # DEBUG this => &rlist._M_t
  # DEBUG __first$_M_node => __p_843
  # DEBUG __last$_M_node => __p$8_842
  # DEBUG D#130 => &rlist._M_t
  # DEBUG this => D#130
  # DEBUG this => NULL
  # DEBUG __x => i$_M_node_135
  # DEBUG this => NULL
  # DEBUG __it => NULL
  # DEBUG this => &__first
  # DEBUG __x => NULL
  # DEBUG this => &rlist._M_t
  # DEBUG this => NULL
  # DEBUG __x => &MEM[(struct _Rb_tree *)&rlist]._M_impl._M_header
  # DEBUG this => NULL
  # DEBUG __it => NULL
  # DEBUG this => &__last
  # DEBUG __x => NULL
  _748 = i$_M_node_135 == __p_843;
  _716 = _748 & prephitmp_963;
  if (_716 != 0)
    goto <bb 347>;
  else
    goto <bb 66>;

  <bb 66>:
  # DEBUG __first$_M_node => __p_843
  # DEBUG this => &__first
  # DEBUG __x => &__last
  if (__p$8_842 != __p_843)
    goto <bb 68>;
  else
    goto <bb 67>;

  <bb 67>:
  goto <bb 71>;

  <bb 68>:

  <bb 69>:
  # __p_608 = PHI <__p_843(68), __p_306(70)>
  # DEBUG __first$_M_node => __p_608
  # DEBUG this => &__first
  # DEBUG __x => &__last
  # DEBUG D#237 => 0
  # DEBUG this => &__first
  # DEBUG D.87920 => D#237
  # DEBUG __tmp$_M_node => __p_608
  __p_306 = std::_Rb_tree_increment (__p_608);
  # DEBUG __first$_M_node => __p_306
  # DEBUG D#236 => {CLOBBER}
  # DEBUG __tmp$_M_node => D#236
  # DEBUG this => &rlist._M_t
  # DEBUG this => &rlist._M_t
  __y_340 = std::_Rb_tree_rebalance_for_erase (__p_608, &MEM[(struct _Rb_tree *)&rlist]._M_impl._M_header);
  # DEBUG __y => __y_340
  # DEBUG D#280 => &rlist._M_t
  # DEBUG __p => __y_340
  # DEBUG this => D#280
  # DEBUG D#279 => D#280
  # DEBUG D#278 => D#280
  # DEBUG D#277 => D#280
  # DEBUG D#269 => D#277
  # DEBUG D#270 => __y_340
  # DEBUG this => D#269
  # DEBUG __p => D#270
  # DEBUG D#268 => D#269
  # DEBUG D#267 => D#270
  # DEBUG D#266 => D#270
  # DEBUG this => D#266
  # DEBUG D#265 => &D#267->_M_value_field
  # DEBUG __r => D#265
  # DEBUG D#264 => D#268
  # DEBUG this => D#264
  # DEBUG D#263 => D#264
  # DEBUG this => D#263
  # DEBUG this => NULL
  # DEBUG D.74553 => NULL
  # DEBUG this => NULL
  # DEBUG D#143 => D#265
  # DEBUG this => D#142
  # DEBUG __p => D#143
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#278
  # DEBUG __p => __y_340
  # DEBUG this => D#279
  # DEBUG D#276 => 1
  # DEBUG __p => __y_340
  # DEBUG __a => D#275
  # DEBUG __n => D#276
  # DEBUG D#274 => D#276
  # DEBUG D#273 => D#275
  # DEBUG D#271 => D#273
  # DEBUG D#272 => D#274
  # DEBUG __p => __y_340
  # DEBUG this => D#271
  # DEBUG D.88017 => D#272
  operator delete (__y_340);
  _341 = MEM[(struct _Rb_tree *)&rlist]._M_impl._M_node_count;
  _342 = _341 + 18446744073709551615;
  MEM[(struct _Rb_tree *)&rlist]._M_impl._M_node_count = _342;
  # DEBUG __first$_M_node => __p_306
  # DEBUG this => &__first
  # DEBUG __x => &__last
  if (__p_306 != __p$8_842)
    goto <bb 70>;
  else
    goto <bb 67>;

  <bb 70>:
  goto <bb 69>;

  <bb 71>:
  D.87916 ={v} {CLOBBER};
  D.87915 ={v} {CLOBBER};
  # DEBUG D#101 => &rlist._M_t
  # DEBUG this => D#101
  # DEBUG D#1239 => {CLOBBER}
  # DEBUG __p => D#1239
  # DEBUG D#1240 => {CLOBBER}
  # DEBUG __p$8 => D#1240
  # DEBUG D#851 => &this_18(D)->router_list
  _163 = MEM[(struct map * *)this_18(D) + 440B];
  # DEBUG D#34 => D#851
  # DEBUG __n => 1
  # DEBUG this => D#34
  # DEBUG D#1224 => _163 + 48
  # DEBUG this => D#1224
  # DEBUG __k => &min_cand
  # DEBUG this => D#1224
  # DEBUG __x => &min_cand
  # DEBUG D#311 => &D#1224->_M_t
  # DEBUG this => D#311
  # DEBUG __k => &min_cand
  # DEBUG this => D#311
  __i$_M_node_275 = &MEM[(struct _Rb_tree *)_163 + 48B]._M_impl._M_header;
  __i$_M_node_276 = MEM[(struct _Rb_tree_node_base * *)_163 + 64B];
  # DEBUG D#42 => D#311
  # DEBUG this => D#42
  # DEBUG D#310 => D#311
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &min_cand
  # DEBUG __y => __i$_M_node_275
  # DEBUG __x => __i$_M_node_276
  if (__i$_M_node_276 == 0B)
    goto <bb 348>;
  else
    goto <bb 74>;

  <bb 72>:
  # __i$_M_node_195 = PHI <__i$_M_node_280(76), __i$_M_node_281(77)>
  # __i$_M_node_196 = PHI <__i$_M_node_685(76), __i$_M_node_655(77)>
  # DEBUG __y => __i$_M_node_196
  # DEBUG __x => __i$_M_node_195
  if (__i$_M_node_195 == 0B)
    goto <bb 78>;
  else
    goto <bb 73>;

  <bb 73>:
  goto <bb 75>;

  <bb 74>:

  <bb 75>:
  # __i$_M_node_685 = PHI <__i$_M_node_276(74), __i$_M_node_195(73)>
  # __i$_M_node_655 = PHI <__i$_M_node_275(74), __i$_M_node_196(73)>
  # DEBUG __y => __i$_M_node_655
  # DEBUG __x => __i$_M_node_685
  # DEBUG __x => __i$_M_node_685
  # DEBUG __x => __i$_M_node_685
  # DEBUG this => __i$_M_node_685
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_685]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__i$_M_node_685 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _278 = MEM[(const int &)__i$_M_node_685 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => &min_cand
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_278 >= min_cand_833)
    goto <bb 76>;
  else
    goto <bb 77>;

  <bb 76>:
  # DEBUG __y => __i$_M_node_685
  __i$_M_node_280 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_685 + 16B];
  # DEBUG D#66 => __i$_M_node_685
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 72>;

  <bb 77>:
  __i$_M_node_281 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_685 + 24B];
  # DEBUG D#65 => __i$_M_node_685
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 72>;

  <bb 78>:
  # __i$_M_node_929 = PHI <__i$_M_node_196(72)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_929
  # DEBUG __i$_M_node => __i$_M_node_929
  # DEBUG this => D#1224
  # DEBUG D#72 => &D#1224->_M_t
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_275
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_929 == __i$_M_node_275)
    goto <bb 348>;
  else
    goto <bb 79>;

  <bb 79>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_929
  # DEBUG D#751 => &MEM[(struct _Rb_tree_node *)__i$_M_node_929]._M_value_field
  # DEBUG __r => D#751
  # DEBUG D#752 => &MEM[(struct pair &)__i$_M_node_929 + 32].first
  # DEBUG D#105 => D#1224
  # DEBUG this => D#105
  # DEBUG D#104 => D#105
  # DEBUG D#103 => &D#104->_M_t
  # DEBUG D#102 => D#103
  # DEBUG this => D#102
  # DEBUG D#53 => &min_cand
  _284 = MEM[(const int &)__i$_M_node_929 + 32];
  # DEBUG D#54 => D#752
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_284 > min_cand_833)
    goto <bb 348>;
  else
    goto <bb 81>;

  <bb 80>:
  __i$_M_node_288 = MEM[(struct _Rb_tree_iterator *)&D.87896];
  # DEBUG __i$_M_node => __i$_M_node_288
  # DEBUG this => &D.87898
  # DEBUG D#537 => &D.87898.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.87898 + 8B]._M_t
  _289 = MEM[(struct _Rb_tree_node_base * *)&D.87898 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.87898 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.87898 + 8B]._M_t, _289);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.87898 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.87898 ={v} {CLOBBER};
  # DEBUG this => &D.87897
  # DEBUG this => &D.87897._M_t
  _290 = MEM[(struct _Rb_tree_node_base * *)&D.87897 + 16B];
  # DEBUG D#58 => &D.87897._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.87897._M_t, _290);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.87897]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.87897 ={v} {CLOBBER};
  pretmp_1436 = MEM[(struct map * *)this_18(D) + 440B];
  pretmp_1438 = &MEM[(struct _Rb_tree *)pretmp_1436 + 48B]._M_impl._M_header;
  pretmp_1442 = MEM[(struct _Rb_tree_node_base * *)pretmp_1436 + 64B];

  <bb 81>:
  # __i$_M_node_291 = PHI <__i$_M_node_929(79), __i$_M_node_288(80)>
  # prephitmp_1437 = PHI <_163(79), pretmp_1436(80)>
  # prephitmp_1441 = PHI <__i$_M_node_275(79), pretmp_1438(80)>
  # prephitmp_1443 = PHI <__i$_M_node_276(79), pretmp_1442(80)>
  # DEBUG __i$_M_node => __i$_M_node_291
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_291
  # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_291]._M_value_field
  # DEBUG __r => D#753
  # DEBUG D#755 => {CLOBBER}
  # DEBUG __i$_M_node => D#755
  # DEBUG this => NULL
  i$_M_node_58 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_291 + 64B];
  # DEBUG D#76 => D#77
  # DEBUG this => D#76
  # DEBUG this => NULL
  # DEBUG __x => i$_M_node_58
  # DEBUG i$_M_node => i$_M_node_58
  _65 = (long unsigned int) min_cand_833;
  _66 = _65 * 4;
  _67 = dist_23 + _66;
  goto <bb 85>;

<L55>:
  # DEBUG this => &D.87898
  # DEBUG D#537 => &D.87898.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.87898 + 8B]._M_t
  _293 = MEM[(struct _Rb_tree_node_base * *)&D.87898 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.87898 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.87898 + 8B]._M_t, _293);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.87898 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.87898 ={v} {CLOBBER};
  resx 26

<L56>:
  # DEBUG this => &D.87897
  # DEBUG this => &D.87897._M_t
  _294 = MEM[(struct _Rb_tree_node_base * *)&D.87897 + 16B];
  # DEBUG D#58 => &D.87897._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.87897._M_t, _294);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.87897]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.87897 ={v} {CLOBBER};
  resx 25

<L78>:
  goto <bb 346> (<L53>);

  <bb 85>:
  # i$_M_node_105 = PHI <i$_M_node_58(81), i$_M_node_176(110)>
  # prephitmp_1445 = PHI <prephitmp_1437(81), pretmp_1444(110)>
  # prephitmp_1372 = PHI <prephitmp_1441(81), pretmp_1371(110)>
  # prephitmp_1374 = PHI <prephitmp_1443(81), pretmp_1373(110)>
  # DEBUG i$_M_node => i$_M_node_105
  # DEBUG D#856 => &this_18(D)->router_list
  # DEBUG D#1250 => MEM[(struct map * *)this_18(D) + 440B]
  # DEBUG D#34 => D#856
  # DEBUG __n => 1
  # DEBUG this => D#34
  # DEBUG D#1225 => D#1250 + 48
  # DEBUG this => D#1225
  # DEBUG __k => &min_cand
  # DEBUG this => D#1225
  # DEBUG __x => &min_cand
  # DEBUG D#311 => &D#1225->_M_t
  # DEBUG this => D#311
  # DEBUG __k => &min_cand
  # DEBUG this => D#311
  # DEBUG D#1249 => &MEM[(struct _Rb_tree *)D#1250 + 48B]._M_impl._M_header
  # DEBUG D#1248 => MEM[(struct _Rb_tree_node_base * *)D#1250 + 64B]
  # DEBUG D#42 => D#311
  # DEBUG this => D#42
  # DEBUG D#310 => D#311
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &min_cand
  # DEBUG __y => D#1249
  # DEBUG __x => D#1248
  if (prephitmp_1374 == 0B)
    goto <bb 349>;
  else
    goto <bb 88>;

  <bb 86>:
  # __i$_M_node_636 = PHI <__i$_M_node_357(90), __i$_M_node_358(91)>
  # __i$_M_node_635 = PHI <__i$_M_node_285(90), __i$_M_node_759(91)>
  # DEBUG __y => __i$_M_node_635
  # DEBUG __x => __i$_M_node_636
  if (__i$_M_node_636 == 0B)
    goto <bb 92>;
  else
    goto <bb 87>;

  <bb 87>:
  goto <bb 89>;

  <bb 88>:

  <bb 89>:
  # __i$_M_node_285 = PHI <prephitmp_1374(88), __i$_M_node_636(87)>
  # __i$_M_node_759 = PHI <prephitmp_1372(88), __i$_M_node_635(87)>
  # DEBUG __y => __i$_M_node_759
  # DEBUG __x => __i$_M_node_285
  # DEBUG __x => __i$_M_node_285
  # DEBUG __x => __i$_M_node_285
  # DEBUG this => __i$_M_node_285
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_285]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__i$_M_node_285 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _355 = MEM[(const int &)__i$_M_node_285 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => &min_cand
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_355 >= min_cand_833)
    goto <bb 90>;
  else
    goto <bb 91>;

  <bb 90>:
  # DEBUG __y => __i$_M_node_285
  __i$_M_node_357 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_285 + 16B];
  # DEBUG D#66 => __i$_M_node_285
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 86>;

  <bb 91>:
  __i$_M_node_358 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_285 + 24B];
  # DEBUG D#65 => __i$_M_node_285
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 86>;

  <bb 92>:
  # __i$_M_node_747 = PHI <__i$_M_node_635(86)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_747
  # DEBUG __i$_M_node => __i$_M_node_747
  # DEBUG this => D#1225
  # DEBUG D#72 => &D#1225->_M_t
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => D#1249
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_747 == prephitmp_1372)
    goto <bb 349>;
  else
    goto <bb 93>;

  <bb 93>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_747
  # DEBUG D#751 => &MEM[(struct _Rb_tree_node *)__i$_M_node_747]._M_value_field
  # DEBUG __r => D#751
  # DEBUG D#752 => &MEM[(struct pair &)__i$_M_node_747 + 32].first
  # DEBUG D#105 => D#1225
  # DEBUG this => D#105
  # DEBUG D#104 => D#105
  # DEBUG D#103 => &D#104->_M_t
  # DEBUG D#102 => D#103
  # DEBUG this => D#102
  # DEBUG D#53 => &min_cand
  _361 = MEM[(const int &)__i$_M_node_747 + 32];
  # DEBUG D#54 => D#752
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_361 > min_cand_833)
    goto <bb 349>;
  else
    goto <bb 103>;

  <bb 94>:
  __i$_M_node_365 = MEM[(struct _Rb_tree_iterator *)&D.88090];
  # DEBUG __i$_M_node => __i$_M_node_365
  # DEBUG this => &D.88092
  # DEBUG D#537 => &D.88092.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.88092 + 8B]._M_t
  __x_366 = MEM[(struct _Rb_tree_node_base * *)&D.88092 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.88092 + 8B]._M_t
  # DEBUG this => D#58
  # DEBUG this => &MEM[(struct map *)&D.88092 + 8B]._M_t
  # DEBUG __x => __x_366
  # DEBUG __x => __x_366
  if (__x_366 == 0B)
    goto <bb 95>;
  else
    goto <bb 96>;

  <bb 95>:
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88092 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88092 ={v} {CLOBBER};
  # DEBUG this => &D.88091
  # DEBUG this => &D.88091._M_t
  __x_367 = MEM[(struct _Rb_tree_node_base * *)&D.88091 + 16B];
  # DEBUG D#58 => &D.88091._M_t
  # DEBUG this => D#58
  # DEBUG this => &D.88091._M_t
  # DEBUG __x => __x_367
  # DEBUG __x => __x_367
  if (__x_367 == 0B)
    goto <bb 99>;
  else
    goto <bb 100>;

  <bb 96>:

  <bb 97>:
  # __x_249 = PHI <__x_366(96), __x_388(98)>
  # DEBUG __x => __x_249
  _387 = MEM[(struct _Rb_tree_node_base * *)__x_249 + 24B];
  # DEBUG D#107 => __x_249
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.88092 + 8B]._M_t, _387);
  __x_388 = MEM[(struct _Rb_tree_node_base * *)__x_249 + 16B];
  # DEBUG D#108 => __x_249
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => &MEM[(struct map *)&D.88092 + 8B]._M_t
  # DEBUG __p => __x_249
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_249
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_249
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_249
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_249
  # DEBUG this => D#425
  # DEBUG D.88137 => D#426
  operator delete (__x_249);
  # DEBUG __x => __x_388
  # DEBUG __x => __x_388
  if (__x_388 == 0B)
    goto <bb 95>;
  else
    goto <bb 98>;

  <bb 98>:
  goto <bb 97>;

  <bb 99>:
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88091]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88091 ={v} {CLOBBER};
  goto <bb 103>;

  <bb 100>:

  <bb 101>:
  # __x_1464 = PHI <__x_367(100), __x_384(102)>
  # DEBUG __x => __x_1464
  _383 = MEM[(struct _Rb_tree_node_base * *)__x_1464 + 24B];
  # DEBUG D#107 => __x_1464
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.88091._M_t, _383);
  __x_384 = MEM[(struct _Rb_tree_node_base * *)__x_1464 + 16B];
  # DEBUG D#108 => __x_1464
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => &D.88091._M_t
  # DEBUG __p => __x_1464
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_1464
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_1464
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_1464
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_1464
  # DEBUG this => D#425
  # DEBUG D.88124 => D#426
  operator delete (__x_1464);
  # DEBUG __x => __x_384
  # DEBUG __x => __x_384
  if (__x_384 == 0B)
    goto <bb 99>;
  else
    goto <bb 102>;

  <bb 102>:
  goto <bb 101>;

  <bb 103>:
  # __i$_M_node_368 = PHI <__i$_M_node_747(93), __i$_M_node_365(99)>
  # DEBUG __i$_M_node => __i$_M_node_368
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_368
  # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_368]._M_value_field
  # DEBUG __r => D#753
  # DEBUG D#755 => {CLOBBER}
  # DEBUG __i$_M_node => D#755
  # DEBUG this => NULL
  # DEBUG this => D#78
  _56 = &MEM[(struct _Rb_tree *)__i$_M_node_368 + 40B]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => _56
  # DEBUG this => &i
  # DEBUG __x => &D.59172
  if (_56 != i$_M_node_105)
    goto <bb 108>;
  else
    goto <bb 104>;

  <bb 104>:
  pretmp_1500 = MEM[(long unsigned int *)&rlist + 40B];
  goto <bb 28>;

<L57>:
  # DEBUG this => &D.88092
  # DEBUG D#537 => &D.88092.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.88092 + 8B]._M_t
  _370 = MEM[(struct _Rb_tree_node_base * *)&D.88092 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.88092 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.88092 + 8B]._M_t, _370);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88092 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88092 ={v} {CLOBBER};
  resx 28

<L58>:
  # DEBUG this => &D.88091
  # DEBUG this => &D.88091._M_t
  _371 = MEM[(struct _Rb_tree_node_base * *)&D.88091 + 16B];
  # DEBUG D#58 => &D.88091._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.88091._M_t, _371);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88091]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88091 ={v} {CLOBBER};
  resx 27

<L79>:
  goto <bb 346> (<L53>);

  <bb 108>:
  _68 = *_67;
  # DEBUG this => &i
  # DEBUG this => i$_M_node_105
  # DEBUG D#852 => &MEM[(struct _Rb_tree_node *)i$_M_node_105]._M_value_field
  # DEBUG __r => D#852
  _70 = MEM[(struct pair *)i$_M_node_105 + 32B].second.second;
  new_dist_71 = _68 + _70;
  # DEBUG new_dist => new_dist_71
  # DEBUG this => &i
  # DEBUG this => i$_M_node_105
  # DEBUG D#853 => &MEM[(struct _Rb_tree_node *)i$_M_node_105]._M_value_field
  # DEBUG __r => D#853
  _72 = MEM[(struct pair *)i$_M_node_105 + 32B].first;
  _73 = (long unsigned int) _72;
  _74 = _73 * 4;
  _75 = dist_23 + _74;
  _76 = *_75;
  if (new_dist_71 < _76)
    goto <bb 109>;
  else
    goto <bb 110>;

  <bb 109>:
  # DEBUG this => &i
  # DEBUG this => i$_M_node_105
  # DEBUG D#854 => &MEM[(struct _Rb_tree_node *)i$_M_node_105]._M_value_field
  # DEBUG __r => D#854
  *_75 = new_dist_71;
  # DEBUG this => &i
  # DEBUG this => i$_M_node_105
  # DEBUG D#855 => &MEM[(struct _Rb_tree_node *)i$_M_node_105]._M_value_field
  # DEBUG __r => D#855
  _78 = prev_28 + _74;
  *_78 = min_cand_833;

  <bb 110>:
  # DEBUG this => &i
  i$_M_node_176 = std::_Rb_tree_increment (i$_M_node_105);
  # DEBUG i$_M_node => i$_M_node_176
  pretmp_1444 = MEM[(struct map * *)this_18(D) + 440B];
  pretmp_1371 = &MEM[(struct _Rb_tree *)pretmp_1444 + 48B]._M_impl._M_header;
  pretmp_1373 = MEM[(struct _Rb_tree_node_base * *)pretmp_1444 + 64B];
  goto <bb 85>;

  <bb 111>:
  _179 = _45 * 48;
  _217 = _45 * 48;

  <bb 112>:
  # i_300 = PHI <0(111), i_157(344)>
  # DEBUG i => i_300
  _86 = (long unsigned int) i_300;
  _87 = _86 * 4;
  _88 = prev_28 + _87;
  _89 = *_88;
  if (_89 == -1)
    goto <bb 114>;
  else
    goto <bb 113>;

  <bb 113>:
  goto <bb 163>;

  <bb 114>:
  if (r_start_107(D) != i_300)
    goto <bb 115>;
  else
    goto <bb 116>;

  <bb 115>:
  __assert_fail ("i == r_start", "networks/anynet.cpp", 294, &__PRETTY_FUNCTION__);

  <bb 116>:
  # DEBUG D#857 => &this_18(D)->router_list
  _165 = MEM[(struct map * *)this_18(D) + 440B];
  # DEBUG D#34 => D#857
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => _165
  # DEBUG __k => &i
  # DEBUG this => _165
  # DEBUG __x => &i
  # DEBUG D#311 => &_165->_M_t
  # DEBUG this => D#311
  # DEBUG __k => &i
  # DEBUG this => D#311
  __i$_M_node_390 = &MEM[(struct _Rb_tree *)_165]._M_impl._M_header;
  __i$_M_node_391 = MEM[(struct _Rb_tree_node_base * *)_165 + 16B];
  # DEBUG D#42 => D#311
  # DEBUG this => D#42
  # DEBUG D#310 => D#311
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &i
  # DEBUG __y => __i$_M_node_390
  # DEBUG __x => __i$_M_node_391
  if (__i$_M_node_391 == 0B)
    goto <bb 350>;
  else
    goto <bb 119>;

  <bb 117>:
  # __i$_M_node_331 = PHI <__i$_M_node_395(121), __i$_M_node_396(122)>
  # __i$_M_node_330 = PHI <__i$_M_node_374(121), __i$_M_node_1114(122)>
  # DEBUG __y => __i$_M_node_330
  # DEBUG __x => __i$_M_node_331
  if (__i$_M_node_331 == 0B)
    goto <bb 123>;
  else
    goto <bb 118>;

  <bb 118>:
  goto <bb 120>;

  <bb 119>:

  <bb 120>:
  # __i$_M_node_374 = PHI <__i$_M_node_391(119), __i$_M_node_331(118)>
  # __i$_M_node_1114 = PHI <__i$_M_node_390(119), __i$_M_node_330(118)>
  # DEBUG __y => __i$_M_node_1114
  # DEBUG __x => __i$_M_node_374
  # DEBUG __x => __i$_M_node_374
  # DEBUG __x => __i$_M_node_374
  # DEBUG this => __i$_M_node_374
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_374]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__i$_M_node_374 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _393 = MEM[(const int &)__i$_M_node_374 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => &i
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (i_300 <= _393)
    goto <bb 121>;
  else
    goto <bb 122>;

  <bb 121>:
  # DEBUG __y => __i$_M_node_374
  __i$_M_node_395 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_374 + 16B];
  # DEBUG D#66 => __i$_M_node_374
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 117>;

  <bb 122>:
  __i$_M_node_396 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_374 + 24B];
  # DEBUG D#65 => __i$_M_node_374
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 117>;

  <bb 123>:
  # __i$_M_node_866 = PHI <__i$_M_node_330(117)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_866
  # DEBUG __i$_M_node => __i$_M_node_866
  # DEBUG this => _165
  # DEBUG D#72 => &_165->_M_t
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_390
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_866 == __i$_M_node_390)
    goto <bb 350>;
  else
    goto <bb 124>;

  <bb 124>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_866
  # DEBUG D#751 => &MEM[(struct _Rb_tree_node *)__i$_M_node_866]._M_value_field
  # DEBUG __r => D#751
  # DEBUG D#752 => &MEM[(struct pair &)__i$_M_node_866 + 32].first
  # DEBUG D#105 => _165
  # DEBUG this => D#105
  # DEBUG D#104 => D#105
  # DEBUG D#103 => &D#104->_M_t
  # DEBUG D#102 => D#103
  # DEBUG this => D#102
  # DEBUG D#53 => &i
  _399 = MEM[(const int &)__i$_M_node_866 + 32];
  # DEBUG D#54 => D#752
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (i_300 < _399)
    goto <bb 350>;
  else
    goto <bb 126>;

  <bb 125>:
  __i$_M_node_403 = MEM[(struct _Rb_tree_iterator *)&D.88192];
  # DEBUG __i$_M_node => __i$_M_node_403
  # DEBUG this => &D.88194
  # DEBUG D#537 => &D.88194.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.88194 + 8B]._M_t
  _404 = MEM[(struct _Rb_tree_node_base * *)&D.88194 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.88194 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.88194 + 8B]._M_t, _404);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88194 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88194 ={v} {CLOBBER};
  # DEBUG this => &D.88193
  # DEBUG this => &D.88193._M_t
  _405 = MEM[(struct _Rb_tree_node_base * *)&D.88193 + 16B];
  # DEBUG D#58 => &D.88193._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.88193._M_t, _405);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88193]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88193 ={v} {CLOBBER};
  pretmp_1140 = MEM[(struct map * *)this_18(D) + 440B];
  pretmp_1144 = &MEM[(struct _Rb_tree *)pretmp_1140]._M_impl._M_header;
  pretmp_1146 = MEM[(struct _Rb_tree_node_base * *)pretmp_1140 + 16B];

  <bb 126>:
  # __i$_M_node_406 = PHI <__i$_M_node_866(124), __i$_M_node_403(125)>
  # prephitmp_1143 = PHI <_165(124), pretmp_1140(125)>
  # prephitmp_1145 = PHI <__i$_M_node_390(124), pretmp_1144(125)>
  # prephitmp_1147 = PHI <__i$_M_node_391(124), pretmp_1146(125)>
  # DEBUG __i$_M_node => __i$_M_node_406
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_406
  # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_406]._M_value_field
  # DEBUG __r => D#753
  # DEBUG D#755 => {CLOBBER}
  # DEBUG __i$_M_node => D#755
  # DEBUG this => NULL
  iter$_M_node_177 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_406 + 64B];
  # DEBUG D#76 => D#77
  # DEBUG this => D#76
  # DEBUG this => NULL
  # DEBUG __x => iter$_M_node_177
  # DEBUG iter$_M_node => iter$_M_node_177
  goto <bb 130>;

<L59>:
  # DEBUG this => &D.88194
  # DEBUG D#537 => &D.88194.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.88194 + 8B]._M_t
  _408 = MEM[(struct _Rb_tree_node_base * *)&D.88194 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.88194 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.88194 + 8B]._M_t, _408);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88194 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88194 ={v} {CLOBBER};
  resx 30

<L60>:
  # DEBUG this => &D.88193
  # DEBUG this => &D.88193._M_t
  _409 = MEM[(struct _Rb_tree_node_base * *)&D.88193 + 16B];
  # DEBUG D#58 => &D.88193._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.88193._M_t, _409);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88193]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88193 ={v} {CLOBBER};
  resx 29

<L80>:
  goto <bb 346> (<L53>);

  <bb 130>:
  # iter$_M_node_81 = PHI <iter$_M_node_177(126), iter$_M_node_181(162)>
  # prephitmp_1073 = PHI <prephitmp_1143(126), pretmp_1072(162)>
  # prephitmp_1075 = PHI <prephitmp_1145(126), pretmp_1074(162)>
  # prephitmp_1077 = PHI <prephitmp_1147(126), pretmp_1076(162)>
  # DEBUG iter$_M_node => iter$_M_node_81
  # DEBUG D#861 => &this_18(D)->router_list
  # DEBUG D#1247 => MEM[(struct map * *)this_18(D) + 440B]
  # DEBUG D#34 => D#861
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => D#1247
  # DEBUG __k => &i
  # DEBUG this => D#1247
  # DEBUG __x => &i
  # DEBUG D#311 => &D#1247->_M_t
  # DEBUG this => D#311
  # DEBUG __k => &i
  # DEBUG this => D#311
  # DEBUG D#1246 => &MEM[(struct _Rb_tree *)D#1247]._M_impl._M_header
  # DEBUG D#1245 => MEM[(struct _Rb_tree_node_base * *)D#1247 + 16B]
  # DEBUG D#42 => D#311
  # DEBUG this => D#42
  # DEBUG D#310 => D#311
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &i
  # DEBUG __y => D#1246
  # DEBUG __x => D#1245
  if (prephitmp_1077 == 0B)
    goto <bb 351>;
  else
    goto <bb 133>;

  <bb 131>:
  # __i$_M_node_329 = PHI <__i$_M_node_425(135), __i$_M_node_426(136)>
  # __i$_M_node_328 = PHI <__i$_M_node_198(135), __i$_M_node_1086(136)>
  # DEBUG __y => __i$_M_node_328
  # DEBUG __x => __i$_M_node_329
  if (__i$_M_node_329 == 0B)
    goto <bb 137>;
  else
    goto <bb 132>;

  <bb 132>:
  goto <bb 134>;

  <bb 133>:

  <bb 134>:
  # __i$_M_node_198 = PHI <prephitmp_1077(133), __i$_M_node_329(132)>
  # __i$_M_node_1086 = PHI <prephitmp_1075(133), __i$_M_node_328(132)>
  # DEBUG __y => __i$_M_node_1086
  # DEBUG __x => __i$_M_node_198
  # DEBUG __x => __i$_M_node_198
  # DEBUG __x => __i$_M_node_198
  # DEBUG this => __i$_M_node_198
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_198]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__i$_M_node_198 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _423 = MEM[(const int &)__i$_M_node_198 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => &i
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (i_300 <= _423)
    goto <bb 135>;
  else
    goto <bb 136>;

  <bb 135>:
  # DEBUG __y => __i$_M_node_198
  __i$_M_node_425 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_198 + 16B];
  # DEBUG D#66 => __i$_M_node_198
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 131>;

  <bb 136>:
  __i$_M_node_426 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_198 + 24B];
  # DEBUG D#65 => __i$_M_node_198
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 131>;

  <bb 137>:
  # __i$_M_node_873 = PHI <__i$_M_node_328(131)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_873
  # DEBUG __i$_M_node => __i$_M_node_873
  # DEBUG this => D#1247
  # DEBUG D#72 => &D#1247->_M_t
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => D#1246
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_873 == prephitmp_1075)
    goto <bb 351>;
  else
    goto <bb 138>;

  <bb 138>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_873
  # DEBUG D#751 => &MEM[(struct _Rb_tree_node *)__i$_M_node_873]._M_value_field
  # DEBUG __r => D#751
  # DEBUG D#752 => &MEM[(struct pair &)__i$_M_node_873 + 32].first
  # DEBUG D#105 => D#1247
  # DEBUG this => D#105
  # DEBUG D#104 => D#105
  # DEBUG D#103 => &D#104->_M_t
  # DEBUG D#102 => D#103
  # DEBUG this => D#102
  # DEBUG D#53 => &i
  _429 = MEM[(const int &)__i$_M_node_873 + 32];
  # DEBUG D#54 => D#752
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (i_300 < _429)
    goto <bb 351>;
  else
    goto <bb 148>;

  <bb 139>:
  __i$_M_node_433 = MEM[(struct _Rb_tree_iterator *)&D.88268];
  # DEBUG __i$_M_node => __i$_M_node_433
  # DEBUG this => &D.88270
  # DEBUG D#537 => &D.88270.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.88270 + 8B]._M_t
  __x_434 = MEM[(struct _Rb_tree_node_base * *)&D.88270 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.88270 + 8B]._M_t
  # DEBUG this => D#58
  # DEBUG this => &MEM[(struct map *)&D.88270 + 8B]._M_t
  # DEBUG __x => __x_434
  # DEBUG __x => __x_434
  if (__x_434 == 0B)
    goto <bb 140>;
  else
    goto <bb 141>;

  <bb 140>:
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88270 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88270 ={v} {CLOBBER};
  # DEBUG this => &D.88269
  # DEBUG this => &D.88269._M_t
  __x_435 = MEM[(struct _Rb_tree_node_base * *)&D.88269 + 16B];
  # DEBUG D#58 => &D.88269._M_t
  # DEBUG this => D#58
  # DEBUG this => &D.88269._M_t
  # DEBUG __x => __x_435
  # DEBUG __x => __x_435
  if (__x_435 == 0B)
    goto <bb 144>;
  else
    goto <bb 145>;

  <bb 141>:

  <bb 142>:
  # __x_95 = PHI <__x_434(141), __x_456(143)>
  # DEBUG __x => __x_95
  _455 = MEM[(struct _Rb_tree_node_base * *)__x_95 + 24B];
  # DEBUG D#107 => __x_95
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.88270 + 8B]._M_t, _455);
  __x_456 = MEM[(struct _Rb_tree_node_base * *)__x_95 + 16B];
  # DEBUG D#108 => __x_95
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => &MEM[(struct map *)&D.88270 + 8B]._M_t
  # DEBUG __p => __x_95
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_95
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_95
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_95
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_95
  # DEBUG this => D#425
  # DEBUG D.88315 => D#426
  operator delete (__x_95);
  # DEBUG __x => __x_456
  # DEBUG __x => __x_456
  if (__x_456 == 0B)
    goto <bb 140>;
  else
    goto <bb 143>;

  <bb 143>:
  goto <bb 142>;

  <bb 144>:
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88269]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88269 ={v} {CLOBBER};
  goto <bb 148>;

  <bb 145>:

  <bb 146>:
  # __x_1049 = PHI <__x_435(145), __x_452(147)>
  # DEBUG __x => __x_1049
  _451 = MEM[(struct _Rb_tree_node_base * *)__x_1049 + 24B];
  # DEBUG D#107 => __x_1049
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.88269._M_t, _451);
  __x_452 = MEM[(struct _Rb_tree_node_base * *)__x_1049 + 16B];
  # DEBUG D#108 => __x_1049
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => &D.88269._M_t
  # DEBUG __p => __x_1049
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_1049
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_1049
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_1049
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_1049
  # DEBUG this => D#425
  # DEBUG D.88302 => D#426
  operator delete (__x_1049);
  # DEBUG __x => __x_452
  # DEBUG __x => __x_452
  if (__x_452 == 0B)
    goto <bb 144>;
  else
    goto <bb 147>;

  <bb 147>:
  goto <bb 146>;

  <bb 148>:
  # __i$_M_node_436 = PHI <__i$_M_node_873(138), __i$_M_node_433(144)>
  # DEBUG __i$_M_node => __i$_M_node_436
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_436
  # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_436]._M_value_field
  # DEBUG __r => D#753
  # DEBUG D#755 => {CLOBBER}
  # DEBUG __i$_M_node => D#755
  # DEBUG this => NULL
  # DEBUG this => D#78
  _178 = &MEM[(struct _Rb_tree *)__i$_M_node_436 + 40B]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => _178
  # DEBUG this => &iter
  # DEBUG __x => &D.59178
  if (iter$_M_node_81 != _178)
    goto <bb 152>;
  else
    goto <bb 343>;

<L61>:
  # DEBUG this => &D.88270
  # DEBUG D#537 => &D.88270.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.88270 + 8B]._M_t
  _438 = MEM[(struct _Rb_tree_node_base * *)&D.88270 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.88270 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.88270 + 8B]._M_t, _438);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88270 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88270 ={v} {CLOBBER};
  resx 32

<L62>:
  # DEBUG this => &D.88269
  # DEBUG this => &D.88269._M_t
  _439 = MEM[(struct _Rb_tree_node_base * *)&D.88269 + 16B];
  # DEBUG D#58 => &D.88269._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.88269._M_t, _439);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88269]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88269 ={v} {CLOBBER};
  resx 31

<L81>:
  goto <bb 346> (<L53>);

  <bb 152>:
  # DEBUG this => &iter
  # DEBUG this => iter$_M_node_81
  # DEBUG D#858 => &MEM[(struct _Rb_tree_node *)iter$_M_node_81]._M_value_field
  # DEBUG __r => D#858
  # DEBUG D#1226 => &MEM[(struct pair *)iter$_M_node_81 + 32B].first
  # DEBUG D#859 => &this_18(D)->routing_table
  _174 = MEM[(struct map * *)this_18(D) + 464B];
  # DEBUG D#37 => D#859
  # DEBUG __n => _45
  # DEBUG this => D#37
  _180 = _174 + _179;
  # DEBUG this => _180
  # DEBUG __k => D#1226
  # DEBUG this => _180
  # DEBUG __x => D#1226
  # DEBUG D#345 => &_180->_M_t
  # DEBUG this => D#345
  # DEBUG __k => D#1226
  # DEBUG this => D#345
  __i$_M_node_458 = &MEM[(struct _Rb_tree *)_180]._M_impl._M_header;
  __i$_M_node_459 = MEM[(struct _Rb_tree_node_base * *)_180 + 16B];
  # DEBUG D#41 => D#345
  # DEBUG this => D#41
  # DEBUG D#344 => D#345
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => D#1226
  # DEBUG __y => __i$_M_node_458
  # DEBUG __x => __i$_M_node_459
  if (__i$_M_node_459 == 0B)
    goto <bb 352>;
  else
    goto <bb 153>;

  <bb 153>:
  pretmp_1016 = MEM[(const int &)iter$_M_node_81 + 32];
  goto <bb 156>;

  <bb 154>:
  # __i$_M_node_261 = PHI <__i$_M_node_463(157), __i$_M_node_464(158)>
  # __i$_M_node_31 = PHI <__i$_M_node_446(157), __i$_M_node_448(158)>
  # DEBUG __y => __i$_M_node_31
  # DEBUG __x => __i$_M_node_261
  if (__i$_M_node_261 == 0B)
    goto <bb 159>;
  else
    goto <bb 155>;

  <bb 155>:

  <bb 156>:
  # __i$_M_node_446 = PHI <__i$_M_node_459(153), __i$_M_node_261(155)>
  # __i$_M_node_448 = PHI <__i$_M_node_458(153), __i$_M_node_31(155)>
  # DEBUG __y => __i$_M_node_448
  # DEBUG __x => __i$_M_node_446
  # DEBUG __x => __i$_M_node_446
  # DEBUG __x => __i$_M_node_446
  # DEBUG this => __i$_M_node_446
  # DEBUG D#336 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_446]._M_value_field
  # DEBUG __r => D#336
  # DEBUG __x => D#336
  # DEBUG this => D#128
  # DEBUG D#341 => &MEM[(const struct pair &)__i$_M_node_446 + 32].first
  # DEBUG D#342 => &D#343->_M_impl._M_key_compare
  # DEBUG D#52 => D#342
  _461 = MEM[(const int &)__i$_M_node_446 + 32];
  # DEBUG D#53 => D#341
  # DEBUG D#54 => D#1226
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_461 >= pretmp_1016)
    goto <bb 157>;
  else
    goto <bb 158>;

  <bb 157>:
  # DEBUG __y => __i$_M_node_446
  __i$_M_node_463 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_446 + 16B];
  # DEBUG D#64 => __i$_M_node_446
  # DEBUG __x => D#64
  # DEBUG __x => NULL
  goto <bb 154>;

  <bb 158>:
  __i$_M_node_464 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_446 + 24B];
  # DEBUG D#63 => __i$_M_node_446
  # DEBUG __x => D#63
  # DEBUG __x => NULL
  goto <bb 154>;

  <bb 159>:
  # __i$_M_node_978 = PHI <__i$_M_node_31(154)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_978
  # DEBUG __i$_M_node => __i$_M_node_978
  # DEBUG this => _180
  # DEBUG D#75 => &_180->_M_t
  # DEBUG this => D#75
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_458
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_978 == __i$_M_node_458)
    goto <bb 353>;
  else
    goto <bb 160>;

  <bb 160>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_978
  # DEBUG D#842 => &MEM[(struct _Rb_tree_node *)__i$_M_node_978]._M_value_field
  # DEBUG __r => D#842
  # DEBUG D#843 => &MEM[(struct pair &)__i$_M_node_978 + 32].first
  # DEBUG D#94 => _180
  # DEBUG this => D#94
  # DEBUG D#93 => D#94
  # DEBUG D#92 => &D#93->_M_t
  # DEBUG D#91 => D#92
  # DEBUG this => D#91
  # DEBUG D#53 => D#1226
  _467 = MEM[(const int &)__i$_M_node_978 + 32];
  # DEBUG D#54 => D#843
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_467 > pretmp_1016)
    goto <bb 353>;
  else
    goto <bb 162>;

  <bb 161>:
  __i$_M_node_471 = MEM[(struct _Rb_tree_iterator *)&D.88341];
  # DEBUG __i$_M_node => __i$_M_node_471
  D.88340 ={v} {CLOBBER};

  <bb 162>:
  # __i$_M_node_472 = PHI <__i$_M_node_978(160), __i$_M_node_471(161)>
  # DEBUG __i$_M_node => __i$_M_node_472
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_472
  # DEBUG D#844 => &MEM[(struct _Rb_tree_node *)__i$_M_node_472]._M_value_field
  # DEBUG __r => D#844
  # DEBUG D#846 => {CLOBBER}
  # DEBUG __i$_M_node => D#846
  # DEBUG this => &iter
  # DEBUG this => iter$_M_node_81
  # DEBUG D#860 => &MEM[(struct _Rb_tree_node *)iter$_M_node_81]._M_value_field
  # DEBUG __r => D#860
  _103 = MEM[(struct pair *)iter$_M_node_81 + 32B].second.first;
  MEM[(mapped_type &)__i$_M_node_472 + 36] = _103;
  # DEBUG this => &iter
  iter$_M_node_181 = std::_Rb_tree_increment (iter$_M_node_81);
  # DEBUG iter$_M_node => iter$_M_node_181
  pretmp_1072 = MEM[(struct map * *)this_18(D) + 440B];
  pretmp_1074 = &MEM[(struct _Rb_tree *)pretmp_1072]._M_impl._M_header;
  pretmp_1076 = MEM[(struct _Rb_tree_node_base * *)pretmp_1072 + 16B];
  goto <bb 130>;

  <bb 163>:
  # neighbor_160 = PHI <i_300(113), prephitmp_1327(226)>
  # prephitmp_1327 = PHI <_89(113), pretmp_1326(226)>
  # DEBUG neighbor => neighbor_160
  # DEBUG distance => NULL
  # DEBUG D#1254 => (long unsigned int) neighbor_160
  # DEBUG D#1253 => D#1254 * 4
  # DEBUG D#1252 => prev_28 + D#1253
  # DEBUG D#1244 => *D#1252
  if (r_start_107(D) == prephitmp_1327)
    goto <bb 227>;
  else
    goto <bb 164>;

  <bb 164>:
  # DEBUG D#862 => &this_18(D)->router_list
  _167 = MEM[(struct map * *)this_18(D) + 440B];
  # DEBUG D#34 => D#862
  # DEBUG __n => 1
  # DEBUG this => D#34
  # DEBUG D#1227 => _167 + 48
  # DEBUG this => D#1227
  # DEBUG __k => &neighbor
  # DEBUG this => D#1227
  # DEBUG __x => &neighbor
  # DEBUG D#311 => &D#1227->_M_t
  # DEBUG this => D#311
  # DEBUG __k => &neighbor
  # DEBUG this => D#311
  __i$_M_node_101 = &MEM[(struct _Rb_tree *)_167 + 48B]._M_impl._M_header;
  __i$_M_node_476 = MEM[(struct _Rb_tree_node_base * *)_167 + 64B];
  # DEBUG D#42 => D#311
  # DEBUG this => D#42
  # DEBUG D#310 => D#311
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &neighbor
  # DEBUG __y => __i$_M_node_101
  # DEBUG __x => __i$_M_node_476
  if (__i$_M_node_476 == 0B)
    goto <bb 355>;
  else
    goto <bb 167>;

  <bb 165>:
  # __i$_M_node_615 = PHI <__i$_M_node_480(169), __i$_M_node_481(170)>
  # __i$_M_node_614 = PHI <__i$_M_node_1232(169), __i$_M_node_593(170)>
  # DEBUG __y => __i$_M_node_614
  # DEBUG __x => __i$_M_node_615
  if (__i$_M_node_615 == 0B)
    goto <bb 171>;
  else
    goto <bb 166>;

  <bb 166>:
  goto <bb 168>;

  <bb 167>:

  <bb 168>:
  # __i$_M_node_1232 = PHI <__i$_M_node_476(167), __i$_M_node_615(166)>
  # __i$_M_node_593 = PHI <__i$_M_node_101(167), __i$_M_node_614(166)>
  # DEBUG __y => __i$_M_node_593
  # DEBUG __x => __i$_M_node_1232
  # DEBUG __x => __i$_M_node_1232
  # DEBUG __x => __i$_M_node_1232
  # DEBUG this => __i$_M_node_1232
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1232]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__i$_M_node_1232 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _478 = MEM[(const int &)__i$_M_node_1232 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => &neighbor
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (neighbor_160 <= _478)
    goto <bb 169>;
  else
    goto <bb 170>;

  <bb 169>:
  # DEBUG __y => __i$_M_node_1232
  __i$_M_node_480 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1232 + 16B];
  # DEBUG D#66 => __i$_M_node_1232
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 165>;

  <bb 170>:
  __i$_M_node_481 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1232 + 24B];
  # DEBUG D#65 => __i$_M_node_1232
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 165>;

  <bb 171>:
  # __i$_M_node_762 = PHI <__i$_M_node_614(165)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_762
  # DEBUG __i$_M_node => __i$_M_node_762
  # DEBUG this => D#1227
  # DEBUG D#72 => &D#1227->_M_t
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_101
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_101 == __i$_M_node_762)
    goto <bb 355>;
  else
    goto <bb 172>;

  <bb 172>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_762
  # DEBUG D#751 => &MEM[(struct _Rb_tree_node *)__i$_M_node_762]._M_value_field
  # DEBUG __r => D#751
  # DEBUG D#752 => &MEM[(struct pair &)__i$_M_node_762 + 32].first
  # DEBUG D#105 => D#1227
  # DEBUG this => D#105
  # DEBUG D#104 => D#105
  # DEBUG D#103 => &D#104->_M_t
  # DEBUG D#102 => D#103
  # DEBUG this => D#102
  # DEBUG D#53 => &neighbor
  _484 = MEM[(const int &)__i$_M_node_762 + 32];
  # DEBUG D#54 => D#752
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (neighbor_160 < _484)
    goto <bb 355>;
  else
    goto <bb 182>;

  <bb 173>:
  __i$_M_node_488 = MEM[(struct _Rb_tree_iterator *)&D.88397];
  # DEBUG __i$_M_node => __i$_M_node_488
  # DEBUG this => &D.88399
  # DEBUG D#537 => &D.88399.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.88399 + 8B]._M_t
  __x_489 = MEM[(struct _Rb_tree_node_base * *)&D.88399 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.88399 + 8B]._M_t
  # DEBUG this => D#58
  # DEBUG this => &MEM[(struct map *)&D.88399 + 8B]._M_t
  # DEBUG __x => __x_489
  # DEBUG __x => __x_489
  if (__x_489 == 0B)
    goto <bb 174>;
  else
    goto <bb 175>;

  <bb 174>:
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88399 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88399 ={v} {CLOBBER};
  # DEBUG this => &D.88398
  # DEBUG this => &D.88398._M_t
  __x_490 = MEM[(struct _Rb_tree_node_base * *)&D.88398 + 16B];
  # DEBUG D#58 => &D.88398._M_t
  # DEBUG this => D#58
  # DEBUG this => &D.88398._M_t
  # DEBUG __x => __x_490
  # DEBUG __x => __x_490
  if (__x_490 == 0B)
    goto <bb 178>;
  else
    goto <bb 179>;

  <bb 175>:

  <bb 176>:
  # __x_344 = PHI <__x_489(175), __x_511(177)>
  # DEBUG __x => __x_344
  _510 = MEM[(struct _Rb_tree_node_base * *)__x_344 + 24B];
  # DEBUG D#107 => __x_344
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.88399 + 8B]._M_t, _510);
  __x_511 = MEM[(struct _Rb_tree_node_base * *)__x_344 + 16B];
  # DEBUG D#108 => __x_344
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => &MEM[(struct map *)&D.88399 + 8B]._M_t
  # DEBUG __p => __x_344
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_344
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_344
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_344
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_344
  # DEBUG this => D#425
  # DEBUG D.88444 => D#426
  operator delete (__x_344);
  # DEBUG __x => __x_511
  # DEBUG __x => __x_511
  if (__x_511 == 0B)
    goto <bb 174>;
  else
    goto <bb 177>;

  <bb 177>:
  goto <bb 176>;

  <bb 178>:
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88398]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88398 ={v} {CLOBBER};
  goto <bb 182>;

  <bb 179>:

  <bb 180>:
  # __x_263 = PHI <__x_490(179), __x_507(181)>
  # DEBUG __x => __x_263
  _506 = MEM[(struct _Rb_tree_node_base * *)__x_263 + 24B];
  # DEBUG D#107 => __x_263
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.88398._M_t, _506);
  __x_507 = MEM[(struct _Rb_tree_node_base * *)__x_263 + 16B];
  # DEBUG D#108 => __x_263
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => &D.88398._M_t
  # DEBUG __p => __x_263
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_263
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_263
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_263
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_263
  # DEBUG this => D#425
  # DEBUG D.88431 => D#426
  operator delete (__x_263);
  # DEBUG __x => __x_507
  # DEBUG __x => __x_507
  if (__x_507 == 0B)
    goto <bb 178>;
  else
    goto <bb 181>;

  <bb 181>:
  goto <bb 180>;

  <bb 182>:
  # __i$_M_node_491 = PHI <__i$_M_node_762(172), __i$_M_node_488(178)>
  # DEBUG __i$_M_node => __i$_M_node_491
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_491
  # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_491]._M_value_field
  # DEBUG __r => D#753
  # DEBUG D#755 => {CLOBBER}
  # DEBUG __i$_M_node => D#755
  # DEBUG this => NULL
  # DEBUG __x => D#1252
  # DEBUG this => D#423
  __y_183 = &MEM[(const struct _Rb_tree *)__i$_M_node_491 + 40B]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => __y_183
  # DEBUG this => D#424
  # DEBUG __k => D#1252
  # DEBUG this => D#424
  __y_184 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_491 + 56B];
  # DEBUG D#106 => D#424
  # DEBUG this => D#106
  # DEBUG D#400 => D#424
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => D#1252
  # DEBUG __y => __y_183
  # DEBUG __x => __y_184
  if (__y_184 == 0B)
    goto <bb 194>;
  else
    goto <bb 188>;

<L63>:
  # DEBUG this => &D.88399
  # DEBUG D#537 => &D.88399.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.88399 + 8B]._M_t
  _493 = MEM[(struct _Rb_tree_node_base * *)&D.88399 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.88399 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.88399 + 8B]._M_t, _493);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88399 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88399 ={v} {CLOBBER};
  resx 34

<L64>:
  # DEBUG this => &D.88398
  # DEBUG this => &D.88398._M_t
  _494 = MEM[(struct _Rb_tree_node_base * *)&D.88398 + 16B];
  # DEBUG D#58 => &D.88398._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.88398._M_t, _494);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88398]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88398 ={v} {CLOBBER};
  resx 33

<L82>:
  goto <bb 346> (<L53>);

  <bb 186>:
  # __y_589 = PHI <__y_189(191), __y_188(190)>
  # __y_588 = PHI <__y_850(191), __y_849(190)>
  # DEBUG __y => __y_588
  # DEBUG __x => __y_589
  if (__y_589 == 0B)
    goto <bb 192>;
  else
    goto <bb 187>;

  <bb 187>:
  goto <bb 189>;

  <bb 188>:

  <bb 189>:
  # __y_849 = PHI <__y_184(188), __y_589(187)>
  # __y_850 = PHI <__y_183(188), __y_588(187)>
  # DEBUG __y => __y_850
  # DEBUG __x => __y_849
  # DEBUG __x => __y_849
  # DEBUG __x => __y_849
  # DEBUG this => __y_849
  # DEBUG D#391 => &__y_849->_M_value_field
  # DEBUG __r => D#391
  # DEBUG __x => D#391
  # DEBUG this => D#133
  # DEBUG D#397 => &MEM[(const struct pair &)__y_849 + 32].first
  # DEBUG D#398 => &D#399->_M_impl._M_key_compare
  # DEBUG D#52 => D#398
  _186 = MEM[(const int &)__y_849 + 32];
  # DEBUG D#53 => D#397
  # DEBUG D#54 => D#1252
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_186 >= prephitmp_1327)
    goto <bb 190>;
  else
    goto <bb 191>;

  <bb 190>:
  # DEBUG __y => __y_849
  __y_188 = MEM[(struct _Rb_tree_node_base * *)__y_849 + 16B];
  # DEBUG D#131 => __y_849
  # DEBUG __x => D#131
  # DEBUG __x => NULL
  goto <bb 186>;

  <bb 191>:
  __y_189 = MEM[(struct _Rb_tree_node_base * *)__y_849 + 24B];
  # DEBUG D#132 => __y_849
  # DEBUG __x => D#132
  # DEBUG __x => NULL
  goto <bb 186>;

  <bb 192>:
  # __y_767 = PHI <__y_588(186)>
  # DEBUG this => NULL
  # DEBUG __x => __y_767
  # DEBUG __j$_M_node => __y_767
  # DEBUG this => D#424
  # DEBUG this => NULL
  # DEBUG __x => __y_183
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (__y_183 == __y_767)
    goto <bb 194>;
  else
    goto <bb 193>;

  <bb 193>:
  # DEBUG __x => __y_767
  # DEBUG __x => __y_767
  # DEBUG this => __y_767
  # DEBUG D#401 => &__y_767->_M_value_field
  # DEBUG __r => D#401
  # DEBUG __x => D#401
  # DEBUG this => D#133
  # DEBUG D#420 => &MEM[(const struct pair &)__y_767 + 32].first
  # DEBUG D#422 => &MEM[(const struct _Rb_tree *)D#424]._M_impl._M_key_compare
  # DEBUG D#52 => D#422
  # DEBUG D#53 => D#1252
  _192 = MEM[(const int &)__y_767 + 32];
  # DEBUG D#54 => D#420
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  # DEBUG D#421 => {CLOBBER}
  # DEBUG __j$_M_node => D#421
  # DEBUG this => NULL
  # DEBUG __x => NULL
  if (_192 > prephitmp_1327)
    goto <bb 194>;
  else
    goto <bb 195>;

  <bb 194>:
  __assert_fail ("router_list[1][neighbor].count(prev[neighbor])>0", "networks/anynet.cpp", 305, &__PRETTY_FUNCTION__);

  <bb 195>:
  # DEBUG D#863 => &this_18(D)->router_list
  _168 = MEM[(struct map * *)this_18(D) + 440B];
  # DEBUG D#34 => D#863
  # DEBUG __n => 1
  # DEBUG this => D#34
  # DEBUG D#1228 => _168 + 48
  # DEBUG this => D#1228
  # DEBUG __k => D#1252
  # DEBUG this => D#1228
  # DEBUG __x => D#1252
  # DEBUG D#311 => &D#1228->_M_t
  # DEBUG this => D#311
  # DEBUG __k => D#1252
  # DEBUG this => D#311
  __i$_M_node_513 = &MEM[(struct _Rb_tree *)_168 + 48B]._M_impl._M_header;
  __i$_M_node_514 = MEM[(struct _Rb_tree_node_base * *)_168 + 64B];
  # DEBUG D#42 => D#311
  # DEBUG this => D#42
  # DEBUG D#310 => D#311
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => D#1252
  # DEBUG __y => __i$_M_node_513
  # DEBUG __x => __i$_M_node_514
  if (__i$_M_node_514 == 0B)
    goto <bb 356>;
  else
    goto <bb 198>;

  <bb 196>:
  # __i$_M_node_568 = PHI <__i$_M_node_518(200), __i$_M_node_519(201)>
  # __i$_M_node_567 = PHI <__i$_M_node_339(200), __i$_M_node_504(201)>
  # DEBUG __y => __i$_M_node_567
  # DEBUG __x => __i$_M_node_568
  if (__i$_M_node_568 == 0B)
    goto <bb 202>;
  else
    goto <bb 197>;

  <bb 197>:
  goto <bb 199>;

  <bb 198>:

  <bb 199>:
  # __i$_M_node_339 = PHI <__i$_M_node_514(198), __i$_M_node_568(197)>
  # __i$_M_node_504 = PHI <__i$_M_node_513(198), __i$_M_node_567(197)>
  # DEBUG __y => __i$_M_node_504
  # DEBUG __x => __i$_M_node_339
  # DEBUG __x => __i$_M_node_339
  # DEBUG __x => __i$_M_node_339
  # DEBUG this => __i$_M_node_339
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_339]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__i$_M_node_339 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _516 = MEM[(const int &)__i$_M_node_339 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => D#1252
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_516 >= prephitmp_1327)
    goto <bb 200>;
  else
    goto <bb 201>;

  <bb 200>:
  # DEBUG __y => __i$_M_node_339
  __i$_M_node_518 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_339 + 16B];
  # DEBUG D#66 => __i$_M_node_339
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 196>;

  <bb 201>:
  __i$_M_node_519 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_339 + 24B];
  # DEBUG D#65 => __i$_M_node_339
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 196>;

  <bb 202>:
  # __i$_M_node_822 = PHI <__i$_M_node_567(196)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_822
  # DEBUG __i$_M_node => __i$_M_node_822
  # DEBUG this => D#1228
  # DEBUG D#72 => &D#1228->_M_t
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_513
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_513 == __i$_M_node_822)
    goto <bb 356>;
  else
    goto <bb 203>;

  <bb 203>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_822
  # DEBUG D#751 => &MEM[(struct _Rb_tree_node *)__i$_M_node_822]._M_value_field
  # DEBUG __r => D#751
  # DEBUG D#752 => &MEM[(struct pair &)__i$_M_node_822 + 32].first
  # DEBUG D#105 => D#1228
  # DEBUG this => D#105
  # DEBUG D#104 => D#105
  # DEBUG D#103 => &D#104->_M_t
  # DEBUG D#102 => D#103
  # DEBUG this => D#102
  # DEBUG D#53 => D#1252
  _522 = MEM[(const int &)__i$_M_node_822 + 32];
  # DEBUG D#54 => D#752
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_522 > prephitmp_1327)
    goto <bb 356>;
  else
    goto <bb 213>;

  <bb 204>:
  __i$_M_node_526 = MEM[(struct _Rb_tree_iterator *)&D.88499];
  # DEBUG __i$_M_node => __i$_M_node_526
  # DEBUG this => &D.88501
  # DEBUG D#537 => &D.88501.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.88501 + 8B]._M_t
  __x_527 = MEM[(struct _Rb_tree_node_base * *)&D.88501 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.88501 + 8B]._M_t
  # DEBUG this => D#58
  # DEBUG this => &MEM[(struct map *)&D.88501 + 8B]._M_t
  # DEBUG __x => __x_527
  # DEBUG __x => __x_527
  if (__x_527 == 0B)
    goto <bb 205>;
  else
    goto <bb 206>;

  <bb 205>:
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88501 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88501 ={v} {CLOBBER};
  # DEBUG this => &D.88500
  # DEBUG this => &D.88500._M_t
  __x_528 = MEM[(struct _Rb_tree_node_base * *)&D.88500 + 16B];
  # DEBUG D#58 => &D.88500._M_t
  # DEBUG this => D#58
  # DEBUG this => &D.88500._M_t
  # DEBUG __x => __x_528
  # DEBUG __x => __x_528
  if (__x_528 == 0B)
    goto <bb 209>;
  else
    goto <bb 210>;

  <bb 206>:

  <bb 207>:
  # __x_312 = PHI <__x_527(206), __x_549(208)>
  # DEBUG __x => __x_312
  _548 = MEM[(struct _Rb_tree_node_base * *)__x_312 + 24B];
  # DEBUG D#107 => __x_312
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.88501 + 8B]._M_t, _548);
  __x_549 = MEM[(struct _Rb_tree_node_base * *)__x_312 + 16B];
  # DEBUG D#108 => __x_312
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => &MEM[(struct map *)&D.88501 + 8B]._M_t
  # DEBUG __p => __x_312
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_312
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_312
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_312
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_312
  # DEBUG this => D#425
  # DEBUG D.88546 => D#426
  operator delete (__x_312);
  # DEBUG __x => __x_549
  # DEBUG __x => __x_549
  if (__x_549 == 0B)
    goto <bb 205>;
  else
    goto <bb 208>;

  <bb 208>:
  goto <bb 207>;

  <bb 209>:
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88500]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88500 ={v} {CLOBBER};
  goto <bb 213>;

  <bb 210>:

  <bb 211>:
  # __x_492 = PHI <__x_528(210), __x_545(212)>
  # DEBUG __x => __x_492
  _544 = MEM[(struct _Rb_tree_node_base * *)__x_492 + 24B];
  # DEBUG D#107 => __x_492
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.88500._M_t, _544);
  __x_545 = MEM[(struct _Rb_tree_node_base * *)__x_492 + 16B];
  # DEBUG D#108 => __x_492
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => &D.88500._M_t
  # DEBUG __p => __x_492
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_492
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_492
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_492
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_492
  # DEBUG this => D#425
  # DEBUG D.88533 => D#426
  operator delete (__x_492);
  # DEBUG __x => __x_545
  # DEBUG __x => __x_545
  if (__x_545 == 0B)
    goto <bb 209>;
  else
    goto <bb 212>;

  <bb 212>:
  goto <bb 211>;

  <bb 213>:
  # __i$_M_node_529 = PHI <__i$_M_node_822(203), __i$_M_node_526(209)>
  # DEBUG __i$_M_node => __i$_M_node_529
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_529
  # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_529]._M_value_field
  # DEBUG __r => D#753
  # DEBUG D#1229 => &MEM[(struct pair &)__i$_M_node_529 + 32].second
  # DEBUG D#755 => {CLOBBER}
  # DEBUG __i$_M_node => D#755
  # DEBUG this => D#1229
  # DEBUG __k => &neighbor
  # DEBUG this => D#1229
  # DEBUG __x => &neighbor
  # DEBUG D#396 => &D#1229->_M_t
  # DEBUG this => D#396
  # DEBUG __k => &neighbor
  # DEBUG this => D#396
  __i$_M_node_551 = &MEM[(struct _Rb_tree *)__i$_M_node_529 + 40B]._M_impl._M_header;
  __i$_M_node_552 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_529 + 56B];
  # DEBUG D#58 => D#396
  # DEBUG this => D#58
  # DEBUG D#395 => D#396
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &neighbor
  # DEBUG __y => __i$_M_node_551
  # DEBUG __x => __i$_M_node_552
  if (__i$_M_node_552 == 0B)
    goto <bb 357>;
  else
    goto <bb 219>;

<L65>:
  # DEBUG this => &D.88501
  # DEBUG D#537 => &D.88501.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.88501 + 8B]._M_t
  _531 = MEM[(struct _Rb_tree_node_base * *)&D.88501 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.88501 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.88501 + 8B]._M_t, _531);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88501 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88501 ={v} {CLOBBER};
  resx 36

<L66>:
  # DEBUG this => &D.88500
  # DEBUG this => &D.88500._M_t
  _532 = MEM[(struct _Rb_tree_node_base * *)&D.88500 + 16B];
  # DEBUG D#58 => &D.88500._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.88500._M_t, _532);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88500]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88500 ={v} {CLOBBER};
  resx 35

<L83>:
  goto <bb 346> (<L53>);

  <bb 217>:
  # __i$_M_node_534 = PHI <__i$_M_node_556(221), __i$_M_node_557(222)>
  # __i$_M_node_533 = PHI <__i$_M_node_333(221), __i$_M_node_332(222)>
  # DEBUG __y => __i$_M_node_533
  # DEBUG __x => __i$_M_node_534
  if (__i$_M_node_534 == 0B)
    goto <bb 223>;
  else
    goto <bb 218>;

  <bb 218>:
  goto <bb 220>;

  <bb 219>:

  <bb 220>:
  # __i$_M_node_333 = PHI <__i$_M_node_552(219), __i$_M_node_534(218)>
  # __i$_M_node_332 = PHI <__i$_M_node_551(219), __i$_M_node_533(218)>
  # DEBUG __y => __i$_M_node_332
  # DEBUG __x => __i$_M_node_333
  # DEBUG __x => __i$_M_node_333
  # DEBUG __x => __i$_M_node_333
  # DEBUG this => __i$_M_node_333
  # DEBUG D#391 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_333]._M_value_field
  # DEBUG __r => D#391
  # DEBUG __x => D#391
  # DEBUG this => D#133
  # DEBUG D#392 => &MEM[(const struct pair &)__i$_M_node_333 + 32].first
  # DEBUG D#393 => &D#394->_M_impl._M_key_compare
  # DEBUG D#52 => D#393
  _554 = MEM[(const int &)__i$_M_node_333 + 32];
  # DEBUG D#53 => D#392
  # DEBUG D#54 => &neighbor
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (neighbor_160 <= _554)
    goto <bb 221>;
  else
    goto <bb 222>;

  <bb 221>:
  # DEBUG __y => __i$_M_node_333
  __i$_M_node_556 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_333 + 16B];
  # DEBUG D#108 => __i$_M_node_333
  # DEBUG __x => D#108
  # DEBUG __x => NULL
  goto <bb 217>;

  <bb 222>:
  __i$_M_node_557 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_333 + 24B];
  # DEBUG D#107 => __i$_M_node_333
  # DEBUG __x => D#107
  # DEBUG __x => NULL
  goto <bb 217>;

  <bb 223>:
  # __i$_M_node_824 = PHI <__i$_M_node_533(217)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_824
  # DEBUG __i$_M_node => __i$_M_node_824
  # DEBUG this => D#1229
  # DEBUG D#78 => &D#1229->_M_t
  # DEBUG this => D#78
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_551
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_824 == __i$_M_node_551)
    goto <bb 357>;
  else
    goto <bb 224>;

  <bb 224>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_824
  # DEBUG D#681 => &MEM[(struct _Rb_tree_node *)__i$_M_node_824]._M_value_field
  # DEBUG __r => D#681
  # DEBUG D#682 => &MEM[(struct pair &)__i$_M_node_824 + 32].first
  # DEBUG D#85 => D#1229
  # DEBUG this => D#85
  # DEBUG D#84 => D#85
  # DEBUG D#83 => &D#84->_M_t
  # DEBUG D#82 => D#83
  # DEBUG this => D#82
  # DEBUG D#53 => &neighbor
  _560 = MEM[(const int &)__i$_M_node_824 + 32];
  # DEBUG D#54 => D#682
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (neighbor_160 < _560)
    goto <bb 357>;
  else
    goto <bb 226>;

  <bb 225>:
  # DEBUG D#1236 => MEM[(struct _Rb_tree_iterator *)&D.88574]
  # DEBUG __i$_M_node => D#1236
  D.88575 ={v} {CLOBBER};

  <bb 226>:
  # DEBUG __i$_M_node => NULL
  # DEBUG this => &__i
  # DEBUG this => NULL
  # DEBUG __r => D#683
  # DEBUG D#685 => {CLOBBER}
  # DEBUG __i$_M_node => D#685
  # DEBUG distance => NULL
  # DEBUG neighbor => D#1244
  pretmp_1321 = (long unsigned int) prephitmp_1327;
  pretmp_1324 = pretmp_1321 * 4;
  pretmp_1325 = prev_28 + pretmp_1324;
  pretmp_1326 = *pretmp_1325;
  goto <bb 163>;

  <bb 227>:
  # neighbor_961 = PHI <neighbor_160(163)>
  # DEBUG D#864 => &this_18(D)->router_list
  _169 = MEM[(struct map * *)this_18(D) + 440B];
  # DEBUG D#34 => D#864
  # DEBUG __n => 1
  # DEBUG this => D#34
  # DEBUG D#1230 => _169 + 48
  # DEBUG this => D#1230
  # DEBUG __k => D#1252
  # DEBUG this => D#1230
  # DEBUG __x => D#1252
  # DEBUG D#311 => &D#1230->_M_t
  # DEBUG this => D#311
  # DEBUG __k => D#1252
  # DEBUG this => D#311
  __i$_M_node_122 = &MEM[(struct _Rb_tree *)_169 + 48B]._M_impl._M_header;
  __i$_M_node_569 = MEM[(struct _Rb_tree_node_base * *)_169 + 64B];
  # DEBUG D#42 => D#311
  # DEBUG this => D#42
  # DEBUG D#310 => D#311
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => D#1252
  # DEBUG __y => __i$_M_node_122
  # DEBUG __x => __i$_M_node_569
  if (__i$_M_node_569 == 0B)
    goto <bb 359>;
  else
    goto <bb 230>;

  <bb 228>:
  # __i$_M_node_212 = PHI <__i$_M_node_573(232), __i$_M_node_574(233)>
  # __i$_M_node_213 = PHI <__i$_M_node_301(232), __i$_M_node_231(233)>
  # DEBUG __y => __i$_M_node_213
  # DEBUG __x => __i$_M_node_212
  if (__i$_M_node_212 == 0B)
    goto <bb 234>;
  else
    goto <bb 229>;

  <bb 229>:
  goto <bb 231>;

  <bb 230>:

  <bb 231>:
  # __i$_M_node_301 = PHI <__i$_M_node_569(230), __i$_M_node_212(229)>
  # __i$_M_node_231 = PHI <__i$_M_node_122(230), __i$_M_node_213(229)>
  # DEBUG __y => __i$_M_node_231
  # DEBUG __x => __i$_M_node_301
  # DEBUG __x => __i$_M_node_301
  # DEBUG __x => __i$_M_node_301
  # DEBUG this => __i$_M_node_301
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_301]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__i$_M_node_301 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _571 = MEM[(const int &)__i$_M_node_301 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => D#1252
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (r_start_107(D) <= _571)
    goto <bb 232>;
  else
    goto <bb 233>;

  <bb 232>:
  # DEBUG __y => __i$_M_node_301
  __i$_M_node_573 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_301 + 16B];
  # DEBUG D#66 => __i$_M_node_301
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 228>;

  <bb 233>:
  __i$_M_node_574 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_301 + 24B];
  # DEBUG D#65 => __i$_M_node_301
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 228>;

  <bb 234>:
  # __i$_M_node_928 = PHI <__i$_M_node_213(228)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_928
  # DEBUG __i$_M_node => __i$_M_node_928
  # DEBUG this => D#1230
  # DEBUG D#72 => &D#1230->_M_t
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_122
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_122 == __i$_M_node_928)
    goto <bb 359>;
  else
    goto <bb 235>;

  <bb 235>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_928
  # DEBUG D#751 => &MEM[(struct _Rb_tree_node *)__i$_M_node_928]._M_value_field
  # DEBUG __r => D#751
  # DEBUG D#752 => &MEM[(struct pair &)__i$_M_node_928 + 32].first
  # DEBUG D#105 => D#1230
  # DEBUG this => D#105
  # DEBUG D#104 => D#105
  # DEBUG D#103 => &D#104->_M_t
  # DEBUG D#102 => D#103
  # DEBUG this => D#102
  # DEBUG D#53 => D#1252
  _577 = MEM[(const int &)__i$_M_node_928 + 32];
  # DEBUG D#54 => D#752
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (r_start_107(D) < _577)
    goto <bb 359>;
  else
    goto <bb 237>;

  <bb 236>:
  __i$_M_node_581 = MEM[(struct _Rb_tree_iterator *)&D.88629];
  # DEBUG __i$_M_node => __i$_M_node_581
  # DEBUG this => &D.88631
  # DEBUG D#537 => &D.88631.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.88631 + 8B]._M_t
  _582 = MEM[(struct _Rb_tree_node_base * *)&D.88631 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.88631 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.88631 + 8B]._M_t, _582);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88631 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88631 ={v} {CLOBBER};
  # DEBUG this => &D.88630
  # DEBUG this => &D.88630._M_t
  _583 = MEM[(struct _Rb_tree_node_base * *)&D.88630 + 16B];
  # DEBUG D#58 => &D.88630._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.88630._M_t, _583);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88630]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88630 ={v} {CLOBBER};

  <bb 237>:
  # __i$_M_node_584 = PHI <__i$_M_node_928(235), __i$_M_node_581(236)>
  # DEBUG __i$_M_node => __i$_M_node_584
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_584
  # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_584]._M_value_field
  # DEBUG __r => D#753
  # DEBUG D#1231 => &MEM[(struct pair &)__i$_M_node_584 + 32].second
  # DEBUG D#755 => {CLOBBER}
  # DEBUG __i$_M_node => D#755
  # DEBUG this => D#1231
  # DEBUG __k => &neighbor
  # DEBUG this => D#1231
  # DEBUG __x => &neighbor
  # DEBUG D#396 => &D#1231->_M_t
  # DEBUG this => D#396
  # DEBUG __k => &neighbor
  # DEBUG this => D#396
  __i$_M_node_598 = &MEM[(struct _Rb_tree *)__i$_M_node_584 + 40B]._M_impl._M_header;
  __i$_M_node_599 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_584 + 56B];
  # DEBUG D#58 => D#396
  # DEBUG this => D#58
  # DEBUG D#395 => D#396
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &neighbor
  # DEBUG __y => __i$_M_node_598
  # DEBUG __x => __i$_M_node_599
  if (__i$_M_node_599 == 0B)
    goto <bb 360>;
  else
    goto <bb 243>;

<L67>:
  # DEBUG this => &D.88631
  # DEBUG D#537 => &D.88631.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.88631 + 8B]._M_t
  _586 = MEM[(struct _Rb_tree_node_base * *)&D.88631 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.88631 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.88631 + 8B]._M_t, _586);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88631 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88631 ={v} {CLOBBER};
  resx 38

<L68>:
  # DEBUG this => &D.88630
  # DEBUG this => &D.88630._M_t
  _587 = MEM[(struct _Rb_tree_node_base * *)&D.88630 + 16B];
  # DEBUG D#58 => &D.88630._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.88630._M_t, _587);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88630]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88630 ={v} {CLOBBER};
  resx 37

<L84>:
  goto <bb 346> (<L53>);

  <bb 241>:
  # __i$_M_node_496 = PHI <__i$_M_node_603(245), __i$_M_node_604(246)>
  # __i$_M_node_495 = PHI <__i$_M_node_431(245), __i$_M_node_292(246)>
  # DEBUG __y => __i$_M_node_495
  # DEBUG __x => __i$_M_node_496
  if (__i$_M_node_496 == 0B)
    goto <bb 247>;
  else
    goto <bb 242>;

  <bb 242>:
  goto <bb 244>;

  <bb 243>:

  <bb 244>:
  # __i$_M_node_431 = PHI <__i$_M_node_599(243), __i$_M_node_496(242)>
  # __i$_M_node_292 = PHI <__i$_M_node_598(243), __i$_M_node_495(242)>
  # DEBUG __y => __i$_M_node_292
  # DEBUG __x => __i$_M_node_431
  # DEBUG __x => __i$_M_node_431
  # DEBUG __x => __i$_M_node_431
  # DEBUG this => __i$_M_node_431
  # DEBUG D#391 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_431]._M_value_field
  # DEBUG __r => D#391
  # DEBUG __x => D#391
  # DEBUG this => D#133
  # DEBUG D#392 => &MEM[(const struct pair &)__i$_M_node_431 + 32].first
  # DEBUG D#393 => &D#394->_M_impl._M_key_compare
  # DEBUG D#52 => D#393
  _601 = MEM[(const int &)__i$_M_node_431 + 32];
  # DEBUG D#53 => D#392
  # DEBUG D#54 => &neighbor
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (neighbor_961 <= _601)
    goto <bb 245>;
  else
    goto <bb 246>;

  <bb 245>:
  # DEBUG __y => __i$_M_node_431
  __i$_M_node_603 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_431 + 16B];
  # DEBUG D#108 => __i$_M_node_431
  # DEBUG __x => D#108
  # DEBUG __x => NULL
  goto <bb 241>;

  <bb 246>:
  __i$_M_node_604 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_431 + 24B];
  # DEBUG D#107 => __i$_M_node_431
  # DEBUG __x => D#107
  # DEBUG __x => NULL
  goto <bb 241>;

  <bb 247>:
  # __i$_M_node_825 = PHI <__i$_M_node_495(241)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_825
  # DEBUG __i$_M_node => __i$_M_node_825
  # DEBUG this => D#1231
  # DEBUG D#78 => &D#1231->_M_t
  # DEBUG this => D#78
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_598
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_825 == __i$_M_node_598)
    goto <bb 360>;
  else
    goto <bb 248>;

  <bb 248>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_825
  # DEBUG D#681 => &MEM[(struct _Rb_tree_node *)__i$_M_node_825]._M_value_field
  # DEBUG __r => D#681
  # DEBUG D#682 => &MEM[(struct pair &)__i$_M_node_825 + 32].first
  # DEBUG D#85 => D#1231
  # DEBUG this => D#85
  # DEBUG D#84 => D#85
  # DEBUG D#83 => &D#84->_M_t
  # DEBUG D#82 => D#83
  # DEBUG this => D#82
  # DEBUG D#53 => &neighbor
  _607 = MEM[(const int &)__i$_M_node_825 + 32];
  # DEBUG D#54 => D#682
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (neighbor_961 < _607)
    goto <bb 360>;
  else
    goto <bb 250>;

  <bb 249>:
  # DEBUG D#1237 => MEM[(struct _Rb_tree_iterator *)&D.88678]
  # DEBUG __i$_M_node => D#1237
  D.88679 ={v} {CLOBBER};

  <bb 250>:
  # DEBUG __i$_M_node => NULL
  # DEBUG this => &__i
  # DEBUG this => NULL
  # DEBUG __r => D#683
  # DEBUG D#685 => {CLOBBER}
  # DEBUG __i$_M_node => D#685
  # DEBUG distance => NULL
  # DEBUG D#865 => &this_18(D)->router_list
  _170 = MEM[(struct map * *)this_18(D) + 440B];
  # DEBUG D#34 => D#865
  # DEBUG __n => 1
  # DEBUG this => D#34
  # DEBUG D#1232 => _170 + 48
  # DEBUG this => D#1232
  # DEBUG __k => &r_start
  # DEBUG this => D#1232
  # DEBUG __x => &r_start
  # DEBUG D#311 => &D#1232->_M_t
  # DEBUG this => D#311
  # DEBUG __k => &r_start
  # DEBUG this => D#311
  __i$_M_node_132 = &MEM[(struct _Rb_tree *)_170 + 48B]._M_impl._M_header;
  __i$_M_node_616 = MEM[(struct _Rb_tree_node_base * *)_170 + 64B];
  # DEBUG D#42 => D#311
  # DEBUG this => D#42
  # DEBUG D#310 => D#311
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &r_start
  # DEBUG __y => __i$_M_node_132
  # DEBUG __x => __i$_M_node_616
  if (__i$_M_node_616 == 0B)
    goto <bb 362>;
  else
    goto <bb 253>;

  <bb 251>:
  # __i$_M_node_475 = PHI <__i$_M_node_620(255), __i$_M_node_621(256)>
  # __i$_M_node_474 = PHI <__i$_M_node_91(255), __i$_M_node_39(256)>
  # DEBUG __y => __i$_M_node_474
  # DEBUG __x => __i$_M_node_475
  if (__i$_M_node_475 == 0B)
    goto <bb 257>;
  else
    goto <bb 252>;

  <bb 252>:
  goto <bb 254>;

  <bb 253>:

  <bb 254>:
  # __i$_M_node_91 = PHI <__i$_M_node_616(253), __i$_M_node_475(252)>
  # __i$_M_node_39 = PHI <__i$_M_node_132(253), __i$_M_node_474(252)>
  # DEBUG __y => __i$_M_node_39
  # DEBUG __x => __i$_M_node_91
  # DEBUG __x => __i$_M_node_91
  # DEBUG __x => __i$_M_node_91
  # DEBUG this => __i$_M_node_91
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_91]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__i$_M_node_91 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _618 = MEM[(const int &)__i$_M_node_91 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => &r_start
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (r_start_107(D) <= _618)
    goto <bb 255>;
  else
    goto <bb 256>;

  <bb 255>:
  # DEBUG __y => __i$_M_node_91
  __i$_M_node_620 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_91 + 16B];
  # DEBUG D#66 => __i$_M_node_91
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 251>;

  <bb 256>:
  __i$_M_node_621 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_91 + 24B];
  # DEBUG D#65 => __i$_M_node_91
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 251>;

  <bb 257>:
  # __i$_M_node_826 = PHI <__i$_M_node_474(251)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_826
  # DEBUG __i$_M_node => __i$_M_node_826
  # DEBUG this => D#1232
  # DEBUG D#72 => &D#1232->_M_t
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_132
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_132 == __i$_M_node_826)
    goto <bb 362>;
  else
    goto <bb 258>;

  <bb 258>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_826
  # DEBUG D#751 => &MEM[(struct _Rb_tree_node *)__i$_M_node_826]._M_value_field
  # DEBUG __r => D#751
  # DEBUG D#752 => &MEM[(struct pair &)__i$_M_node_826 + 32].first
  # DEBUG D#105 => D#1232
  # DEBUG this => D#105
  # DEBUG D#104 => D#105
  # DEBUG D#103 => &D#104->_M_t
  # DEBUG D#102 => D#103
  # DEBUG this => D#102
  # DEBUG D#53 => &r_start
  _624 = MEM[(const int &)__i$_M_node_826 + 32];
  # DEBUG D#54 => D#752
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (r_start_107(D) < _624)
    goto <bb 362>;
  else
    goto <bb 260>;

  <bb 259>:
  __i$_M_node_628 = MEM[(struct _Rb_tree_iterator *)&D.88733];
  # DEBUG __i$_M_node => __i$_M_node_628
  # DEBUG this => &D.88735
  # DEBUG D#537 => &D.88735.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.88735 + 8B]._M_t
  _629 = MEM[(struct _Rb_tree_node_base * *)&D.88735 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.88735 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.88735 + 8B]._M_t, _629);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88735 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88735 ={v} {CLOBBER};
  # DEBUG this => &D.88734
  # DEBUG this => &D.88734._M_t
  _630 = MEM[(struct _Rb_tree_node_base * *)&D.88734 + 16B];
  # DEBUG D#58 => &D.88734._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.88734._M_t, _630);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88734]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88734 ={v} {CLOBBER};

  <bb 260>:
  # __i$_M_node_631 = PHI <__i$_M_node_826(258), __i$_M_node_628(259)>
  # DEBUG __i$_M_node => __i$_M_node_631
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_631
  # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_631]._M_value_field
  # DEBUG __r => D#753
  # DEBUG D#755 => {CLOBBER}
  # DEBUG __i$_M_node => D#755
  # DEBUG this => NULL
  # DEBUG __x => &neighbor
  # DEBUG this => D#423
  __y_200 = &MEM[(const struct _Rb_tree *)__i$_M_node_631 + 40B]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => __y_200
  # DEBUG this => D#424
  # DEBUG __k => &neighbor
  # DEBUG this => D#424
  __y_201 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_631 + 56B];
  # DEBUG D#106 => D#424
  # DEBUG this => D#106
  # DEBUG D#400 => D#424
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &neighbor
  # DEBUG __y => __y_200
  # DEBUG __x => __y_201
  if (__y_201 == 0B)
    goto <bb 272>;
  else
    goto <bb 266>;

<L69>:
  # DEBUG this => &D.88735
  # DEBUG D#537 => &D.88735.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.88735 + 8B]._M_t
  _633 = MEM[(struct _Rb_tree_node_base * *)&D.88735 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.88735 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.88735 + 8B]._M_t, _633);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88735 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88735 ={v} {CLOBBER};
  resx 40

<L70>:
  # DEBUG this => &D.88734
  # DEBUG this => &D.88734._M_t
  _634 = MEM[(struct _Rb_tree_node_base * *)&D.88734 + 16B];
  # DEBUG D#58 => &D.88734._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.88734._M_t, _634);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88734]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88734 ={v} {CLOBBER};
  resx 39

<L85>:
  goto <bb 346> (<L53>);

  <bb 264>:
  # __y_441 = PHI <__y_206(269), __y_205(268)>
  # __y_440 = PHI <__y_566(269), __y_611(268)>
  # DEBUG __y => __y_440
  # DEBUG __x => __y_441
  if (__y_441 == 0B)
    goto <bb 270>;
  else
    goto <bb 265>;

  <bb 265>:
  goto <bb 267>;

  <bb 266>:

  <bb 267>:
  # __y_611 = PHI <__y_201(266), __y_441(265)>
  # __y_566 = PHI <__y_200(266), __y_440(265)>
  # DEBUG __y => __y_566
  # DEBUG __x => __y_611
  # DEBUG __x => __y_611
  # DEBUG __x => __y_611
  # DEBUG this => __y_611
  # DEBUG D#391 => &__y_611->_M_value_field
  # DEBUG __r => D#391
  # DEBUG __x => D#391
  # DEBUG this => D#133
  # DEBUG D#397 => &MEM[(const struct pair &)__y_611 + 32].first
  # DEBUG D#398 => &D#399->_M_impl._M_key_compare
  # DEBUG D#52 => D#398
  _203 = MEM[(const int &)__y_611 + 32];
  # DEBUG D#53 => D#397
  # DEBUG D#54 => &neighbor
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (neighbor_961 <= _203)
    goto <bb 268>;
  else
    goto <bb 269>;

  <bb 268>:
  # DEBUG __y => __y_611
  __y_205 = MEM[(struct _Rb_tree_node_base * *)__y_611 + 16B];
  # DEBUG D#131 => __y_611
  # DEBUG __x => D#131
  # DEBUG __x => NULL
  goto <bb 264>;

  <bb 269>:
  __y_206 = MEM[(struct _Rb_tree_node_base * *)__y_611 + 24B];
  # DEBUG D#132 => __y_611
  # DEBUG __x => D#132
  # DEBUG __x => NULL
  goto <bb 264>;

  <bb 270>:
  # __y_827 = PHI <__y_440(264)>
  # DEBUG this => NULL
  # DEBUG __x => __y_827
  # DEBUG __j$_M_node => __y_827
  # DEBUG this => D#424
  # DEBUG this => NULL
  # DEBUG __x => __y_200
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (__y_200 == __y_827)
    goto <bb 272>;
  else
    goto <bb 271>;

  <bb 271>:
  # DEBUG __x => __y_827
  # DEBUG __x => __y_827
  # DEBUG this => __y_827
  # DEBUG D#401 => &__y_827->_M_value_field
  # DEBUG __r => D#401
  # DEBUG __x => D#401
  # DEBUG this => D#133
  # DEBUG D#420 => &MEM[(const struct pair &)__y_827 + 32].first
  # DEBUG D#422 => &MEM[(const struct _Rb_tree *)D#424]._M_impl._M_key_compare
  # DEBUG D#52 => D#422
  # DEBUG D#53 => &neighbor
  _209 = MEM[(const int &)__y_827 + 32];
  # DEBUG D#54 => D#420
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  # DEBUG D#421 => {CLOBBER}
  # DEBUG __j$_M_node => D#421
  # DEBUG this => NULL
  # DEBUG __x => NULL
  if (neighbor_961 < _209)
    goto <bb 272>;
  else
    goto <bb 273>;

  <bb 272>:
  __assert_fail ("router_list[1][r_start].count(neighbor)!=0", "networks/anynet.cpp", 311, &__PRETTY_FUNCTION__);

  <bb 273>:
  # DEBUG D#866 => &this_18(D)->router_list
  _171 = MEM[(struct map * *)this_18(D) + 440B];
  # DEBUG D#34 => D#866
  # DEBUG __n => 1
  # DEBUG this => D#34
  # DEBUG D#1233 => _171 + 48
  # DEBUG this => D#1233
  # DEBUG __k => &r_start
  # DEBUG this => D#1233
  # DEBUG __x => &r_start
  # DEBUG D#311 => &D#1233->_M_t
  # DEBUG this => D#311
  # DEBUG __k => &r_start
  # DEBUG this => D#311
  __i$_M_node_645 = &MEM[(struct _Rb_tree *)_171 + 48B]._M_impl._M_header;
  __i$_M_node_646 = MEM[(struct _Rb_tree_node_base * *)_171 + 64B];
  # DEBUG D#42 => D#311
  # DEBUG this => D#42
  # DEBUG D#310 => D#311
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &r_start
  # DEBUG __y => __i$_M_node_645
  # DEBUG __x => __i$_M_node_646
  if (__i$_M_node_646 == 0B)
    goto <bb 363>;
  else
    goto <bb 276>;

  <bb 274>:
  # __i$_M_node_411 = PHI <__i$_M_node_650(278), __i$_M_node_651(279)>
  # __i$_M_node_410 = PHI <__i$_M_node_1113(278), __i$_M_node_674(279)>
  # DEBUG __y => __i$_M_node_410
  # DEBUG __x => __i$_M_node_411
  if (__i$_M_node_411 == 0B)
    goto <bb 280>;
  else
    goto <bb 275>;

  <bb 275>:
  goto <bb 277>;

  <bb 276>:

  <bb 277>:
  # __i$_M_node_1113 = PHI <__i$_M_node_646(276), __i$_M_node_411(275)>
  # __i$_M_node_674 = PHI <__i$_M_node_645(276), __i$_M_node_410(275)>
  # DEBUG __y => __i$_M_node_674
  # DEBUG __x => __i$_M_node_1113
  # DEBUG __x => __i$_M_node_1113
  # DEBUG __x => __i$_M_node_1113
  # DEBUG this => __i$_M_node_1113
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1113]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__i$_M_node_1113 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _648 = MEM[(const int &)__i$_M_node_1113 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => &r_start
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (r_start_107(D) <= _648)
    goto <bb 278>;
  else
    goto <bb 279>;

  <bb 278>:
  # DEBUG __y => __i$_M_node_1113
  __i$_M_node_650 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1113 + 16B];
  # DEBUG D#66 => __i$_M_node_1113
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 274>;

  <bb 279>:
  __i$_M_node_651 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1113 + 24B];
  # DEBUG D#65 => __i$_M_node_1113
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 274>;

  <bb 280>:
  # __i$_M_node_840 = PHI <__i$_M_node_410(274)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_840
  # DEBUG __i$_M_node => __i$_M_node_840
  # DEBUG this => D#1233
  # DEBUG D#72 => &D#1233->_M_t
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_645
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_840 == __i$_M_node_645)
    goto <bb 363>;
  else
    goto <bb 281>;

  <bb 281>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_840
  # DEBUG D#751 => &MEM[(struct _Rb_tree_node *)__i$_M_node_840]._M_value_field
  # DEBUG __r => D#751
  # DEBUG D#752 => &MEM[(struct pair &)__i$_M_node_840 + 32].first
  # DEBUG D#105 => D#1233
  # DEBUG this => D#105
  # DEBUG D#104 => D#105
  # DEBUG D#103 => &D#104->_M_t
  # DEBUG D#102 => D#103
  # DEBUG this => D#102
  # DEBUG D#53 => &r_start
  _654 = MEM[(const int &)__i$_M_node_840 + 32];
  # DEBUG D#54 => D#752
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (r_start_107(D) < _654)
    goto <bb 363>;
  else
    goto <bb 283>;

  <bb 282>:
  __i$_M_node_658 = MEM[(struct _Rb_tree_iterator *)&D.88809];
  # DEBUG __i$_M_node => __i$_M_node_658
  # DEBUG this => &D.88811
  # DEBUG D#537 => &D.88811.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.88811 + 8B]._M_t
  _659 = MEM[(struct _Rb_tree_node_base * *)&D.88811 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.88811 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.88811 + 8B]._M_t, _659);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88811 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88811 ={v} {CLOBBER};
  # DEBUG this => &D.88810
  # DEBUG this => &D.88810._M_t
  _660 = MEM[(struct _Rb_tree_node_base * *)&D.88810 + 16B];
  # DEBUG D#58 => &D.88810._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.88810._M_t, _660);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88810]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88810 ={v} {CLOBBER};

  <bb 283>:
  # __i$_M_node_661 = PHI <__i$_M_node_840(281), __i$_M_node_658(282)>
  # DEBUG __i$_M_node => __i$_M_node_661
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_661
  # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_661]._M_value_field
  # DEBUG __r => D#753
  # DEBUG D#1234 => &MEM[(struct pair &)__i$_M_node_661 + 32].second
  # DEBUG D#755 => {CLOBBER}
  # DEBUG __i$_M_node => D#755
  # DEBUG this => D#1234
  # DEBUG __k => &neighbor
  # DEBUG this => D#1234
  # DEBUG __x => &neighbor
  # DEBUG D#396 => &D#1234->_M_t
  # DEBUG this => D#396
  # DEBUG __k => &neighbor
  # DEBUG this => D#396
  __i$_M_node_675 = &MEM[(struct _Rb_tree *)__i$_M_node_661 + 40B]._M_impl._M_header;
  __i$_M_node_676 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_661 + 56B];
  # DEBUG D#58 => D#396
  # DEBUG this => D#58
  # DEBUG D#395 => D#396
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &neighbor
  # DEBUG __y => __i$_M_node_675
  # DEBUG __x => __i$_M_node_676
  if (__i$_M_node_676 == 0B)
    goto <bb 364>;
  else
    goto <bb 289>;

<L71>:
  # DEBUG this => &D.88811
  # DEBUG D#537 => &D.88811.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.88811 + 8B]._M_t
  _663 = MEM[(struct _Rb_tree_node_base * *)&D.88811 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.88811 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.88811 + 8B]._M_t, _663);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88811 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88811 ={v} {CLOBBER};
  resx 42

<L72>:
  # DEBUG this => &D.88810
  # DEBUG this => &D.88810._M_t
  _664 = MEM[(struct _Rb_tree_node_base * *)&D.88810 + 16B];
  # DEBUG D#58 => &D.88810._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.88810._M_t, _664);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88810]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88810 ={v} {CLOBBER};
  resx 41

<L86>:
  goto <bb 346> (<L53>);

  <bb 287>:
  # __i$_M_node_372 = PHI <__i$_M_node_680(291), __i$_M_node_681(292)>
  # __i$_M_node_262 = PHI <__i$_M_node_594(291), __i$_M_node_1108(292)>
  # DEBUG __y => __i$_M_node_262
  # DEBUG __x => __i$_M_node_372
  if (__i$_M_node_372 == 0B)
    goto <bb 293>;
  else
    goto <bb 288>;

  <bb 288>:
  goto <bb 290>;

  <bb 289>:

  <bb 290>:
  # __i$_M_node_594 = PHI <__i$_M_node_676(289), __i$_M_node_372(288)>
  # __i$_M_node_1108 = PHI <__i$_M_node_675(289), __i$_M_node_262(288)>
  # DEBUG __y => __i$_M_node_1108
  # DEBUG __x => __i$_M_node_594
  # DEBUG __x => __i$_M_node_594
  # DEBUG __x => __i$_M_node_594
  # DEBUG this => __i$_M_node_594
  # DEBUG D#391 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_594]._M_value_field
  # DEBUG __r => D#391
  # DEBUG __x => D#391
  # DEBUG this => D#133
  # DEBUG D#392 => &MEM[(const struct pair &)__i$_M_node_594 + 32].first
  # DEBUG D#393 => &D#394->_M_impl._M_key_compare
  # DEBUG D#52 => D#393
  _678 = MEM[(const int &)__i$_M_node_594 + 32];
  # DEBUG D#53 => D#392
  # DEBUG D#54 => &neighbor
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (neighbor_961 <= _678)
    goto <bb 291>;
  else
    goto <bb 292>;

  <bb 291>:
  # DEBUG __y => __i$_M_node_594
  __i$_M_node_680 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_594 + 16B];
  # DEBUG D#108 => __i$_M_node_594
  # DEBUG __x => D#108
  # DEBUG __x => NULL
  goto <bb 287>;

  <bb 292>:
  __i$_M_node_681 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_594 + 24B];
  # DEBUG D#107 => __i$_M_node_594
  # DEBUG __x => D#107
  # DEBUG __x => NULL
  goto <bb 287>;

  <bb 293>:
  # __i$_M_node_920 = PHI <__i$_M_node_262(287)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_920
  # DEBUG __i$_M_node => __i$_M_node_920
  # DEBUG this => D#1234
  # DEBUG D#78 => &D#1234->_M_t
  # DEBUG this => D#78
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_675
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_920 == __i$_M_node_675)
    goto <bb 364>;
  else
    goto <bb 294>;

  <bb 294>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_920
  # DEBUG D#681 => &MEM[(struct _Rb_tree_node *)__i$_M_node_920]._M_value_field
  # DEBUG __r => D#681
  # DEBUG D#682 => &MEM[(struct pair &)__i$_M_node_920 + 32].first
  # DEBUG D#85 => D#1234
  # DEBUG this => D#85
  # DEBUG D#84 => D#85
  # DEBUG D#83 => &D#84->_M_t
  # DEBUG D#82 => D#83
  # DEBUG this => D#82
  # DEBUG D#53 => &neighbor
  _684 = MEM[(const int &)__i$_M_node_920 + 32];
  # DEBUG D#54 => D#682
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (neighbor_961 < _684)
    goto <bb 364>;
  else
    goto <bb 296>;

  <bb 295>:
  __i$_M_node_688 = MEM[(struct _Rb_tree_iterator *)&D.88858];
  # DEBUG __i$_M_node => __i$_M_node_688
  D.88859 ={v} {CLOBBER};

  <bb 296>:
  # __i$_M_node_689 = PHI <__i$_M_node_920(294), __i$_M_node_688(295)>
  # DEBUG __i$_M_node => __i$_M_node_689
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_689
  # DEBUG D#683 => &MEM[(struct _Rb_tree_node *)__i$_M_node_689]._M_value_field
  # DEBUG __r => D#683
  # DEBUG D#685 => {CLOBBER}
  # DEBUG __i$_M_node => D#685
  port_140 = MEM[(struct mapped_type &)__i$_M_node_689 + 36].first;
  # DEBUG port => port_140
  # DEBUG D#867 => &this_18(D)->router_list
  _172 = MEM[(struct map * *)this_18(D) + 440B];
  # DEBUG D#34 => D#867
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => _172
  # DEBUG __k => &i
  # DEBUG this => _172
  # DEBUG __x => &i
  # DEBUG D#311 => &_172->_M_t
  # DEBUG this => D#311
  # DEBUG __k => &i
  # DEBUG this => D#311
  __i$_M_node_138 = &MEM[(struct _Rb_tree *)_172]._M_impl._M_header;
  __i$_M_node_693 = MEM[(struct _Rb_tree_node_base * *)_172 + 16B];
  # DEBUG D#42 => D#311
  # DEBUG this => D#42
  # DEBUG D#310 => D#311
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &i
  # DEBUG __y => __i$_M_node_138
  # DEBUG __x => __i$_M_node_693
  if (__i$_M_node_693 == 0B)
    goto <bb 366>;
  else
    goto <bb 299>;

  <bb 297>:
  # __i$_M_node_295 = PHI <__i$_M_node_697(301), __i$_M_node_698(302)>
  # __i$_M_node_373 = PHI <__i$_M_node_1029(301), __i$_M_node_424(302)>
  # DEBUG __y => __i$_M_node_373
  # DEBUG __x => __i$_M_node_295
  if (__i$_M_node_295 == 0B)
    goto <bb 303>;
  else
    goto <bb 298>;

  <bb 298>:
  goto <bb 300>;

  <bb 299>:

  <bb 300>:
  # __i$_M_node_1029 = PHI <__i$_M_node_693(299), __i$_M_node_295(298)>
  # __i$_M_node_424 = PHI <__i$_M_node_138(299), __i$_M_node_373(298)>
  # DEBUG __y => __i$_M_node_424
  # DEBUG __x => __i$_M_node_1029
  # DEBUG __x => __i$_M_node_1029
  # DEBUG __x => __i$_M_node_1029
  # DEBUG this => __i$_M_node_1029
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1029]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__i$_M_node_1029 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _695 = MEM[(const int &)__i$_M_node_1029 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => &i
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (i_300 <= _695)
    goto <bb 301>;
  else
    goto <bb 302>;

  <bb 301>:
  # DEBUG __y => __i$_M_node_1029
  __i$_M_node_697 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1029 + 16B];
  # DEBUG D#66 => __i$_M_node_1029
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 297>;

  <bb 302>:
  __i$_M_node_698 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1029 + 24B];
  # DEBUG D#65 => __i$_M_node_1029
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 297>;

  <bb 303>:
  # __i$_M_node_841 = PHI <__i$_M_node_373(297)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_841
  # DEBUG __i$_M_node => __i$_M_node_841
  # DEBUG this => _172
  # DEBUG D#72 => &_172->_M_t
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_138
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_138 == __i$_M_node_841)
    goto <bb 366>;
  else
    goto <bb 304>;

  <bb 304>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_841
  # DEBUG D#751 => &MEM[(struct _Rb_tree_node *)__i$_M_node_841]._M_value_field
  # DEBUG __r => D#751
  # DEBUG D#752 => &MEM[(struct pair &)__i$_M_node_841 + 32].first
  # DEBUG D#105 => _172
  # DEBUG this => D#105
  # DEBUG D#104 => D#105
  # DEBUG D#103 => &D#104->_M_t
  # DEBUG D#102 => D#103
  # DEBUG this => D#102
  # DEBUG D#53 => &i
  _701 = MEM[(const int &)__i$_M_node_841 + 32];
  # DEBUG D#54 => D#752
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (i_300 < _701)
    goto <bb 366>;
  else
    goto <bb 306>;

  <bb 305>:
  __i$_M_node_705 = MEM[(struct _Rb_tree_iterator *)&D.88913];
  # DEBUG __i$_M_node => __i$_M_node_705
  # DEBUG this => &D.88915
  # DEBUG D#537 => &D.88915.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.88915 + 8B]._M_t
  _706 = MEM[(struct _Rb_tree_node_base * *)&D.88915 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.88915 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.88915 + 8B]._M_t, _706);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88915 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88915 ={v} {CLOBBER};
  # DEBUG this => &D.88914
  # DEBUG this => &D.88914._M_t
  _707 = MEM[(struct _Rb_tree_node_base * *)&D.88914 + 16B];
  # DEBUG D#58 => &D.88914._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.88914._M_t, _707);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88914]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88914 ={v} {CLOBBER};
  pretmp_1259 = MEM[(struct map * *)this_18(D) + 440B];
  pretmp_1263 = &MEM[(struct _Rb_tree *)pretmp_1259]._M_impl._M_header;
  pretmp_1265 = MEM[(struct _Rb_tree_node_base * *)pretmp_1259 + 16B];

  <bb 306>:
  # __i$_M_node_708 = PHI <__i$_M_node_841(304), __i$_M_node_705(305)>
  # prephitmp_1262 = PHI <_172(304), pretmp_1259(305)>
  # prephitmp_1264 = PHI <__i$_M_node_138(304), pretmp_1263(305)>
  # prephitmp_1266 = PHI <__i$_M_node_693(304), pretmp_1265(305)>
  # DEBUG __i$_M_node => __i$_M_node_708
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_708
  # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_708]._M_value_field
  # DEBUG __r => D#753
  # DEBUG D#755 => {CLOBBER}
  # DEBUG __i$_M_node => D#755
  # DEBUG this => NULL
  iter$_M_node_215 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_708 + 64B];
  # DEBUG D#76 => D#77
  # DEBUG this => D#76
  # DEBUG this => NULL
  # DEBUG __x => iter$_M_node_215
  # DEBUG iter$_M_node => iter$_M_node_215
  goto <bb 310>;

<L73>:
  # DEBUG this => &D.88915
  # DEBUG D#537 => &D.88915.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.88915 + 8B]._M_t
  _710 = MEM[(struct _Rb_tree_node_base * *)&D.88915 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.88915 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.88915 + 8B]._M_t, _710);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88915 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88915 ={v} {CLOBBER};
  resx 44

<L74>:
  # DEBUG this => &D.88914
  # DEBUG this => &D.88914._M_t
  _711 = MEM[(struct _Rb_tree_node_base * *)&D.88914 + 16B];
  # DEBUG D#58 => &D.88914._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.88914._M_t, _711);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88914]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88914 ={v} {CLOBBER};
  resx 43

<L87>:
  goto <bb 346> (<L53>);

  <bb 310>:
  # iter$_M_node_151 = PHI <iter$_M_node_215(306), iter$_M_node_219(342)>
  # prephitmp_1193 = PHI <prephitmp_1262(306), pretmp_1192(342)>
  # prephitmp_1195 = PHI <prephitmp_1264(306), pretmp_1194(342)>
  # prephitmp_1197 = PHI <prephitmp_1266(306), pretmp_1196(342)>
  # DEBUG iter$_M_node => iter$_M_node_151
  # DEBUG D#870 => &this_18(D)->router_list
  # DEBUG D#1243 => MEM[(struct map * *)this_18(D) + 440B]
  # DEBUG D#34 => D#870
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => D#1243
  # DEBUG __k => &i
  # DEBUG this => D#1243
  # DEBUG __x => &i
  # DEBUG D#311 => &D#1243->_M_t
  # DEBUG this => D#311
  # DEBUG __k => &i
  # DEBUG this => D#311
  # DEBUG D#1242 => &MEM[(struct _Rb_tree *)D#1243]._M_impl._M_header
  # DEBUG D#1241 => MEM[(struct _Rb_tree_node_base * *)D#1243 + 16B]
  # DEBUG D#42 => D#311
  # DEBUG this => D#42
  # DEBUG D#310 => D#311
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &i
  # DEBUG __y => D#1242
  # DEBUG __x => D#1241
  if (prephitmp_1197 == 0B)
    goto <bb 367>;
  else
    goto <bb 313>;

  <bb 311>:
  # __i$_M_node_265 = PHI <__i$_M_node_727(315), __i$_M_node_728(316)>
  # __i$_M_node_296 = PHI <__i$_M_node_246(315), __i$_M_node_884(316)>
  # DEBUG __y => __i$_M_node_296
  # DEBUG __x => __i$_M_node_265
  if (__i$_M_node_265 == 0B)
    goto <bb 317>;
  else
    goto <bb 312>;

  <bb 312>:
  goto <bb 314>;

  <bb 313>:

  <bb 314>:
  # __i$_M_node_246 = PHI <prephitmp_1197(313), __i$_M_node_265(312)>
  # __i$_M_node_884 = PHI <prephitmp_1195(313), __i$_M_node_296(312)>
  # DEBUG __y => __i$_M_node_884
  # DEBUG __x => __i$_M_node_246
  # DEBUG __x => __i$_M_node_246
  # DEBUG __x => __i$_M_node_246
  # DEBUG this => __i$_M_node_246
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_246]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__i$_M_node_246 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _725 = MEM[(const int &)__i$_M_node_246 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => &i
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (i_300 <= _725)
    goto <bb 315>;
  else
    goto <bb 316>;

  <bb 315>:
  # DEBUG __y => __i$_M_node_246
  __i$_M_node_727 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_246 + 16B];
  # DEBUG D#66 => __i$_M_node_246
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 311>;

  <bb 316>:
  __i$_M_node_728 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_246 + 24B];
  # DEBUG D#65 => __i$_M_node_246
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 311>;

  <bb 317>:
  # __i$_M_node_874 = PHI <__i$_M_node_296(311)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_874
  # DEBUG __i$_M_node => __i$_M_node_874
  # DEBUG this => D#1243
  # DEBUG D#72 => &D#1243->_M_t
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => D#1242
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_874 == prephitmp_1195)
    goto <bb 367>;
  else
    goto <bb 318>;

  <bb 318>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_874
  # DEBUG D#751 => &MEM[(struct _Rb_tree_node *)__i$_M_node_874]._M_value_field
  # DEBUG __r => D#751
  # DEBUG D#752 => &MEM[(struct pair &)__i$_M_node_874 + 32].first
  # DEBUG D#105 => D#1243
  # DEBUG this => D#105
  # DEBUG D#104 => D#105
  # DEBUG D#103 => &D#104->_M_t
  # DEBUG D#102 => D#103
  # DEBUG this => D#102
  # DEBUG D#53 => &i
  _731 = MEM[(const int &)__i$_M_node_874 + 32];
  # DEBUG D#54 => D#752
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (i_300 < _731)
    goto <bb 367>;
  else
    goto <bb 328>;

  <bb 319>:
  __i$_M_node_735 = MEM[(struct _Rb_tree_iterator *)&D.88989];
  # DEBUG __i$_M_node => __i$_M_node_735
  # DEBUG this => &D.88991
  # DEBUG D#537 => &D.88991.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.88991 + 8B]._M_t
  __x_736 = MEM[(struct _Rb_tree_node_base * *)&D.88991 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.88991 + 8B]._M_t
  # DEBUG this => D#58
  # DEBUG this => &MEM[(struct map *)&D.88991 + 8B]._M_t
  # DEBUG __x => __x_736
  # DEBUG __x => __x_736
  if (__x_736 == 0B)
    goto <bb 320>;
  else
    goto <bb 321>;

  <bb 320>:
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88991 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88991 ={v} {CLOBBER};
  # DEBUG this => &D.88990
  # DEBUG this => &D.88990._M_t
  __x_737 = MEM[(struct _Rb_tree_node_base * *)&D.88990 + 16B];
  # DEBUG D#58 => &D.88990._M_t
  # DEBUG this => D#58
  # DEBUG this => &D.88990._M_t
  # DEBUG __x => __x_737
  # DEBUG __x => __x_737
  if (__x_737 == 0B)
    goto <bb 324>;
  else
    goto <bb 325>;

  <bb 321>:

  <bb 322>:
  # __x_351 = PHI <__x_736(321), __x_758(323)>
  # DEBUG __x => __x_351
  _757 = MEM[(struct _Rb_tree_node_base * *)__x_351 + 24B];
  # DEBUG D#107 => __x_351
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.88991 + 8B]._M_t, _757);
  __x_758 = MEM[(struct _Rb_tree_node_base * *)__x_351 + 16B];
  # DEBUG D#108 => __x_351
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => &MEM[(struct map *)&D.88991 + 8B]._M_t
  # DEBUG __p => __x_351
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_351
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_351
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_351
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_351
  # DEBUG this => D#425
  # DEBUG D.89036 => D#426
  operator delete (__x_351);
  # DEBUG __x => __x_758
  # DEBUG __x => __x_758
  if (__x_758 == 0B)
    goto <bb 320>;
  else
    goto <bb 323>;

  <bb 323>:
  goto <bb 322>;

  <bb 324>:
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88990]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88990 ={v} {CLOBBER};
  goto <bb 328>;

  <bb 325>:

  <bb 326>:
  # __x_883 = PHI <__x_737(325), __x_754(327)>
  # DEBUG __x => __x_883
  _753 = MEM[(struct _Rb_tree_node_base * *)__x_883 + 24B];
  # DEBUG D#107 => __x_883
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.88990._M_t, _753);
  __x_754 = MEM[(struct _Rb_tree_node_base * *)__x_883 + 16B];
  # DEBUG D#108 => __x_883
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => &D.88990._M_t
  # DEBUG __p => __x_883
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_883
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_883
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_883
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_883
  # DEBUG this => D#425
  # DEBUG D.89023 => D#426
  operator delete (__x_883);
  # DEBUG __x => __x_754
  # DEBUG __x => __x_754
  if (__x_754 == 0B)
    goto <bb 324>;
  else
    goto <bb 327>;

  <bb 327>:
  goto <bb 326>;

  <bb 328>:
  # __i$_M_node_738 = PHI <__i$_M_node_874(318), __i$_M_node_735(324)>
  # DEBUG __i$_M_node => __i$_M_node_738
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_738
  # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_738]._M_value_field
  # DEBUG __r => D#753
  # DEBUG D#755 => {CLOBBER}
  # DEBUG __i$_M_node => D#755
  # DEBUG this => NULL
  # DEBUG this => D#78
  _216 = &MEM[(struct _Rb_tree *)__i$_M_node_738 + 40B]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => _216
  # DEBUG this => &iter
  # DEBUG __x => &D.59186
  if (iter$_M_node_151 != _216)
    goto <bb 332>;
  else
    goto <bb 343>;

<L75>:
  # DEBUG this => &D.88991
  # DEBUG D#537 => &D.88991.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.88991 + 8B]._M_t
  _740 = MEM[(struct _Rb_tree_node_base * *)&D.88991 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.88991 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.88991 + 8B]._M_t, _740);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88991 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88991 ={v} {CLOBBER};
  resx 46

<L76>:
  # DEBUG this => &D.88990
  # DEBUG this => &D.88990._M_t
  _741 = MEM[(struct _Rb_tree_node_base * *)&D.88990 + 16B];
  # DEBUG D#58 => &D.88990._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.88990._M_t, _741);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.88990]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.88990 ={v} {CLOBBER};
  resx 45

<L88>:
  goto <bb 346> (<L53>);

  <bb 332>:
  # DEBUG this => &iter
  # DEBUG this => iter$_M_node_151
  # DEBUG D#868 => &MEM[(struct _Rb_tree_node *)iter$_M_node_151]._M_value_field
  # DEBUG __r => D#868
  # DEBUG D#1235 => &MEM[(struct pair *)iter$_M_node_151 + 32B].first
  # DEBUG D#869 => &this_18(D)->routing_table
  _175 = MEM[(struct map * *)this_18(D) + 464B];
  # DEBUG D#37 => D#869
  # DEBUG __n => _45
  # DEBUG this => D#37
  _218 = _175 + _217;
  # DEBUG this => _218
  # DEBUG __k => D#1235
  # DEBUG this => _218
  # DEBUG __x => D#1235
  # DEBUG D#345 => &_218->_M_t
  # DEBUG this => D#345
  # DEBUG __k => D#1235
  # DEBUG this => D#345
  __i$_M_node_760 = &MEM[(struct _Rb_tree *)_218]._M_impl._M_header;
  __i$_M_node_761 = MEM[(struct _Rb_tree_node_base * *)_218 + 16B];
  # DEBUG D#41 => D#345
  # DEBUG this => D#41
  # DEBUG D#344 => D#345
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => D#1235
  # DEBUG __y => __i$_M_node_760
  # DEBUG __x => __i$_M_node_761
  if (__i$_M_node_761 == 0B)
    goto <bb 368>;
  else
    goto <bb 333>;

  <bb 333>:
  pretmp_1136 = MEM[(const int &)iter$_M_node_151 + 32];
  goto <bb 336>;

  <bb 334>:
  # __i$_M_node_335 = PHI <__i$_M_node_765(337), __i$_M_node_766(338)>
  # __i$_M_node_334 = PHI <__i$_M_node_1233(337), __i$_M_node_595(338)>
  # DEBUG __y => __i$_M_node_334
  # DEBUG __x => __i$_M_node_335
  if (__i$_M_node_335 == 0B)
    goto <bb 339>;
  else
    goto <bb 335>;

  <bb 335>:

  <bb 336>:
  # __i$_M_node_1233 = PHI <__i$_M_node_761(333), __i$_M_node_335(335)>
  # __i$_M_node_595 = PHI <__i$_M_node_760(333), __i$_M_node_334(335)>
  # DEBUG __y => __i$_M_node_595
  # DEBUG __x => __i$_M_node_1233
  # DEBUG __x => __i$_M_node_1233
  # DEBUG __x => __i$_M_node_1233
  # DEBUG this => __i$_M_node_1233
  # DEBUG D#336 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1233]._M_value_field
  # DEBUG __r => D#336
  # DEBUG __x => D#336
  # DEBUG this => D#128
  # DEBUG D#341 => &MEM[(const struct pair &)__i$_M_node_1233 + 32].first
  # DEBUG D#342 => &D#343->_M_impl._M_key_compare
  # DEBUG D#52 => D#342
  _763 = MEM[(const int &)__i$_M_node_1233 + 32];
  # DEBUG D#53 => D#341
  # DEBUG D#54 => D#1235
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_763 >= pretmp_1136)
    goto <bb 337>;
  else
    goto <bb 338>;

  <bb 337>:
  # DEBUG __y => __i$_M_node_1233
  __i$_M_node_765 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1233 + 16B];
  # DEBUG D#64 => __i$_M_node_1233
  # DEBUG __x => D#64
  # DEBUG __x => NULL
  goto <bb 334>;

  <bb 338>:
  __i$_M_node_766 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1233 + 24B];
  # DEBUG D#63 => __i$_M_node_1233
  # DEBUG __x => D#63
  # DEBUG __x => NULL
  goto <bb 334>;

  <bb 339>:
  # __i$_M_node_865 = PHI <__i$_M_node_334(334)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_865
  # DEBUG __i$_M_node => __i$_M_node_865
  # DEBUG this => _218
  # DEBUG D#75 => &_218->_M_t
  # DEBUG this => D#75
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_760
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_865 == __i$_M_node_760)
    goto <bb 369>;
  else
    goto <bb 340>;

  <bb 340>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_865
  # DEBUG D#842 => &MEM[(struct _Rb_tree_node *)__i$_M_node_865]._M_value_field
  # DEBUG __r => D#842
  # DEBUG D#843 => &MEM[(struct pair &)__i$_M_node_865 + 32].first
  # DEBUG D#94 => _218
  # DEBUG this => D#94
  # DEBUG D#93 => D#94
  # DEBUG D#92 => &D#93->_M_t
  # DEBUG D#91 => D#92
  # DEBUG this => D#91
  # DEBUG D#53 => D#1235
  _769 = MEM[(const int &)__i$_M_node_865 + 32];
  # DEBUG D#54 => D#843
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_769 > pretmp_1136)
    goto <bb 369>;
  else
    goto <bb 342>;

  <bb 341>:
  __i$_M_node_773 = MEM[(struct _Rb_tree_iterator *)&D.89062];
  # DEBUG __i$_M_node => __i$_M_node_773
  D.89061 ={v} {CLOBBER};

  <bb 342>:
  # __i$_M_node_774 = PHI <__i$_M_node_865(340), __i$_M_node_773(341)>
  # DEBUG __i$_M_node => __i$_M_node_774
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_774
  # DEBUG D#844 => &MEM[(struct _Rb_tree_node *)__i$_M_node_774]._M_value_field
  # DEBUG __r => D#844
  # DEBUG D#846 => {CLOBBER}
  # DEBUG __i$_M_node => D#846
  MEM[(mapped_type &)__i$_M_node_774 + 36] = port_140;
  # DEBUG this => &iter
  iter$_M_node_219 = std::_Rb_tree_increment (iter$_M_node_151);
  # DEBUG iter$_M_node => iter$_M_node_219
  pretmp_1192 = MEM[(struct map * *)this_18(D) + 440B];
  pretmp_1194 = &MEM[(struct _Rb_tree *)pretmp_1192]._M_impl._M_header;
  pretmp_1196 = MEM[(struct _Rb_tree_node_base * *)pretmp_1192 + 16B];
  goto <bb 310>;

  <bb 343>:
  i_157 = i_300 + 1;
  # DEBUG i => i_157
  # DEBUG i => i_157
  _84 = this_18(D)->D.47478._size;
  if (_84 <= i_157)
    goto <bb 30>;
  else
    goto <bb 344>;

  <bb 344>:
  goto <bb 112>;

<L77>:

<L53>:
  # DEBUG D#1220 => {CLOBBER}
  # DEBUG neighbor => D#1220
  # DEBUG D#1221 => {CLOBBER}
  # DEBUG i => D#1221
  # DEBUG D#1222 => {CLOBBER}
  # DEBUG min_cand => D#1222
  # DEBUG D#1223 => {CLOBBER}
  # DEBUG i => D#1223
  # DEBUG this => &rlist
  # DEBUG this => &rlist._M_t
  _221 = MEM[(struct _Rb_tree_node_base * *)&rlist + 16B];
  # DEBUG D#40 => &rlist._M_t
  # DEBUG this => D#40
  std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase (&rlist._M_t, _221);
  # DEBUG D#281 => &MEM[(struct _Rb_tree *)&rlist]._M_impl
  # DEBUG this => D#281
  # DEBUG this => D#281
  # DEBUG this => D#281
  resx 2

  <bb 347>:
  # DEBUG this => &rlist._M_t
  # DEBUG this => &rlist._M_t
  # DEBUG D#40 => &rlist._M_t
  # DEBUG this => D#40
  std::_Rb_tree<int, int, std::_Identity<int>, std::less<int>, std::allocator<int> >::_M_erase (&rlist._M_t, __p_308);
  # DEBUG D#372 => &MEM[(struct _Rb_tree *)&rlist]._M_impl
  # DEBUG this => D#372
  MEM[(struct _Rb_tree_impl *)&rlist]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&rlist]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&rlist]._M_header;
  MEM[(struct _Rb_tree_impl *)&rlist]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&rlist]._M_header;
  MEM[(struct _Rb_tree_impl *)&rlist]._M_node_count = 0;
  goto <bb 71>;

  <bb 348>:
  # __i$_M_node_325 = PHI <__i$_M_node_929(79), __i$_M_node_929(78), __i$_M_node_275(71)>
  # DEBUG this => &D.87897
  # DEBUG D#239 => &D.87897._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.87897]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.87897]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.87897]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.87897]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.87897]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.87897]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.87897]._M_header;
  # DEBUG this => &D.87898
  # DEBUG __a => &min_cand
  # DEBUG __b => &D.87897
  D.87898.first = min_cand_833;
  # DEBUG D#670 => &D.87898.second
  # DEBUG this => D#670
  # DEBUG __x => &D.87897
  # DEBUG this => &MEM[(struct map *)&D.87898 + 8B]._M_t
  # DEBUG __x => &D.87897._M_t
  # DEBUG this => &D.87897._M_t
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)&D.87897]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)&D.87898 + 8B]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)&D.87898 + 8B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.87898 + 8B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.87898 + 8B]._M_node_count = 0;
  # DEBUG this => D#662
  MEM[(struct _Rb_tree_impl *)&D.87898 + 8B]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.87898 + 8B]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.87898 + 8B]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.87898 + 8B]._M_header;
  # DEBUG D#109 => &D.87897._M_t
  # DEBUG this => D#109
  # DEBUG this => D#1224
  # DEBUG __position$_M_node => __i$_M_node_325
  # DEBUG __x => &D.87898
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _287 = &MEM[(struct map *)_163 + 48B]._M_t;
  # DEBUG this => _287
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_325;
  # DEBUG __x => &D.87898
  # DEBUG this => &__an
  # DEBUG __t => _287
  # DEBUG __an$_M_t => _287
  # DEBUG D#750 => &__an
  D.87896 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE17_M_insert_unique_INSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_ERKS9_RT_.isra.240.constprop (_287, __pos, &D.87898);
  goto <bb 80>;

  <bb 349>:
  # __i$_M_node_565 = PHI <__i$_M_node_747(93), __i$_M_node_747(92), prephitmp_1372(85)>
  # DEBUG this => &D.88091
  # DEBUG D#239 => &D.88091._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.88091]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.88091]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.88091]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.88091]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.88091]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.88091]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.88091]._M_header;
  # DEBUG this => &D.88092
  # DEBUG __a => &min_cand
  # DEBUG __b => &D.88091
  D.88092.first = min_cand_833;
  # DEBUG D#670 => &D.88092.second
  # DEBUG this => D#670
  # DEBUG __x => &D.88091
  # DEBUG this => &MEM[(struct map *)&D.88092 + 8B]._M_t
  # DEBUG __x => &D.88091._M_t
  # DEBUG this => &D.88091._M_t
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)&D.88091]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)&D.88092 + 8B]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)&D.88092 + 8B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.88092 + 8B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.88092 + 8B]._M_node_count = 0;
  # DEBUG this => D#662
  MEM[(struct _Rb_tree_impl *)&D.88092 + 8B]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.88092 + 8B]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.88092 + 8B]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.88092 + 8B]._M_header;
  # DEBUG D#109 => &D.88091._M_t
  # DEBUG this => D#109
  # DEBUG this => D#1225
  # DEBUG __position$_M_node => __i$_M_node_565
  # DEBUG __x => &D.88092
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _364 = &MEM[(struct map *)prephitmp_1445 + 48B]._M_t;
  # DEBUG this => _364
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_565;
  # DEBUG __x => &D.88092
  # DEBUG this => &__an
  # DEBUG __t => _364
  # DEBUG __an$_M_t => _364
  # DEBUG D#750 => &__an
  D.88090 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE17_M_insert_unique_INSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_ERKS9_RT_.isra.240.constprop (_364, __pos, &D.88092);
  goto <bb 94>;

  <bb 350>:
  # __i$_M_node_612 = PHI <__i$_M_node_866(124), __i$_M_node_866(123), __i$_M_node_390(116)>
  # DEBUG this => &D.88193
  # DEBUG D#239 => &D.88193._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.88193]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.88193]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.88193]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.88193]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.88193]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.88193]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.88193]._M_header;
  # DEBUG this => &D.88194
  # DEBUG __a => &i
  # DEBUG __b => &D.88193
  D.88194.first = i_300;
  # DEBUG D#670 => &D.88194.second
  # DEBUG this => D#670
  # DEBUG __x => &D.88193
  # DEBUG this => &MEM[(struct map *)&D.88194 + 8B]._M_t
  # DEBUG __x => &D.88193._M_t
  # DEBUG this => &D.88193._M_t
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)&D.88193]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)&D.88194 + 8B]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)&D.88194 + 8B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.88194 + 8B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.88194 + 8B]._M_node_count = 0;
  # DEBUG this => D#662
  MEM[(struct _Rb_tree_impl *)&D.88194 + 8B]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.88194 + 8B]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.88194 + 8B]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.88194 + 8B]._M_header;
  # DEBUG D#109 => &D.88193._M_t
  # DEBUG this => D#109
  # DEBUG this => _165
  # DEBUG __position$_M_node => __i$_M_node_612
  # DEBUG __x => &D.88194
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _402 = &_165->_M_t;
  # DEBUG this => _402
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_612;
  # DEBUG __x => &D.88194
  # DEBUG this => &__an
  # DEBUG __t => _402
  # DEBUG __an$_M_t => _402
  # DEBUG D#750 => &__an
  D.88192 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE17_M_insert_unique_INSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_ERKS9_RT_.isra.240.constprop (_402, __pos, &D.88194);
  goto <bb 125>;

  <bb 351>:
  # __i$_M_node_117 = PHI <__i$_M_node_873(138), __i$_M_node_873(137), prephitmp_1075(130)>
  # DEBUG this => &D.88269
  # DEBUG D#239 => &D.88269._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.88269]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.88269]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.88269]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.88269]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.88269]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.88269]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.88269]._M_header;
  # DEBUG this => &D.88270
  # DEBUG __a => &i
  # DEBUG __b => &D.88269
  D.88270.first = i_300;
  # DEBUG D#670 => &D.88270.second
  # DEBUG this => D#670
  # DEBUG __x => &D.88269
  # DEBUG this => &MEM[(struct map *)&D.88270 + 8B]._M_t
  # DEBUG __x => &D.88269._M_t
  # DEBUG this => &D.88269._M_t
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)&D.88269]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)&D.88270 + 8B]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)&D.88270 + 8B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.88270 + 8B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.88270 + 8B]._M_node_count = 0;
  # DEBUG this => D#662
  MEM[(struct _Rb_tree_impl *)&D.88270 + 8B]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.88270 + 8B]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.88270 + 8B]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.88270 + 8B]._M_header;
  # DEBUG D#109 => &D.88269._M_t
  # DEBUG this => D#109
  # DEBUG this => D#1247
  # DEBUG __position$_M_node => __i$_M_node_117
  # DEBUG __x => &D.88270
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _432 = &prephitmp_1073->_M_t;
  # DEBUG this => _432
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_117;
  # DEBUG __x => &D.88270
  # DEBUG this => &__an
  # DEBUG __t => _432
  # DEBUG __an$_M_t => _432
  # DEBUG D#750 => &__an
  D.88268 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE17_M_insert_unique_INSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_ERKS9_RT_.isra.240.constprop (_432, __pos, &D.88270);
  goto <bb 139>;

  <bb 352>:
  pretmp_1084 = MEM[(const int &)iter$_M_node_81 + 32];

  <bb 353>:
  # __i$_M_node_810 = PHI <__i$_M_node_978(160), __i$_M_node_978(159), __i$_M_node_458(352)>
  # prephitmp_1015 = PHI <pretmp_1016(160), pretmp_1016(159), pretmp_1084(352)>
  # DEBUG this => &D.88340
  # DEBUG __a => D#1226
  # DEBUG __b => NULL
  D.88340.first = prephitmp_1015;
  D.88340.second = 0;
  # DEBUG this => _180
  # DEBUG __position$_M_node => __i$_M_node_810
  # DEBUG __x => &D.88340
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _470 = &_180->_M_t;
  # DEBUG this => _470
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_810;
  # DEBUG __x => &D.88340
  # DEBUG this => &__an
  # DEBUG __t => _470
  # DEBUG __an$_M_t => _470
  # DEBUG D#841 => &__an
  D.88341 = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_insert_unique_INS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_ERKS2_RT_.isra.263.constprop (_470, __pos, &D.88340);
  goto <bb 161>;

<L89>:
  goto <bb 346> (<L53>);

  <bb 355>:
  # __i$_M_node_305 = PHI <__i$_M_node_762(172), __i$_M_node_762(171), __i$_M_node_101(164)>
  # DEBUG this => &D.88398
  # DEBUG D#239 => &D.88398._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.88398]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.88398]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.88398]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.88398]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.88398]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.88398]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.88398]._M_header;
  # DEBUG this => &D.88399
  # DEBUG __a => &neighbor
  # DEBUG __b => &D.88398
  D.88399.first = neighbor_160;
  # DEBUG D#670 => &D.88399.second
  # DEBUG this => D#670
  # DEBUG __x => &D.88398
  # DEBUG this => &MEM[(struct map *)&D.88399 + 8B]._M_t
  # DEBUG __x => &D.88398._M_t
  # DEBUG this => &D.88398._M_t
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)&D.88398]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)&D.88399 + 8B]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)&D.88399 + 8B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.88399 + 8B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.88399 + 8B]._M_node_count = 0;
  # DEBUG this => D#662
  MEM[(struct _Rb_tree_impl *)&D.88399 + 8B]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.88399 + 8B]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.88399 + 8B]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.88399 + 8B]._M_header;
  # DEBUG D#109 => &D.88398._M_t
  # DEBUG this => D#109
  # DEBUG this => D#1227
  # DEBUG __position$_M_node => __i$_M_node_305
  # DEBUG __x => &D.88399
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _487 = &MEM[(struct map *)_167 + 48B]._M_t;
  # DEBUG this => _487
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_305;
  # DEBUG __x => &D.88399
  # DEBUG this => &__an
  # DEBUG __t => _487
  # DEBUG __an$_M_t => _487
  # DEBUG D#750 => &__an
  D.88397 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE17_M_insert_unique_INSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_ERKS9_RT_.isra.240.constprop (_487, __pos, &D.88399);
  goto <bb 173>;

  <bb 356>:
  # __i$_M_node_282 = PHI <__i$_M_node_822(203), __i$_M_node_822(202), __i$_M_node_513(195)>
  # DEBUG this => &D.88500
  # DEBUG D#239 => &D.88500._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.88500]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.88500]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.88500]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.88500]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.88500]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.88500]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.88500]._M_header;
  # DEBUG this => &D.88501
  # DEBUG __a => D#1252
  # DEBUG __b => &D.88500
  D.88501.first = prephitmp_1327;
  # DEBUG D#670 => &D.88501.second
  # DEBUG this => D#670
  # DEBUG __x => &D.88500
  # DEBUG this => &MEM[(struct map *)&D.88501 + 8B]._M_t
  # DEBUG __x => &D.88500._M_t
  # DEBUG this => &D.88500._M_t
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)&D.88500]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)&D.88501 + 8B]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)&D.88501 + 8B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.88501 + 8B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.88501 + 8B]._M_node_count = 0;
  # DEBUG this => D#662
  MEM[(struct _Rb_tree_impl *)&D.88501 + 8B]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.88501 + 8B]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.88501 + 8B]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.88501 + 8B]._M_header;
  # DEBUG D#109 => &D.88500._M_t
  # DEBUG this => D#109
  # DEBUG this => D#1228
  # DEBUG __position$_M_node => __i$_M_node_282
  # DEBUG __x => &D.88501
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _525 = &MEM[(struct map *)_168 + 48B]._M_t;
  # DEBUG this => _525
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_282;
  # DEBUG __x => &D.88501
  # DEBUG this => &__an
  # DEBUG __t => _525
  # DEBUG __an$_M_t => _525
  # DEBUG D#750 => &__an
  D.88499 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE17_M_insert_unique_INSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_ERKS9_RT_.isra.240.constprop (_525, __pos, &D.88501);
  goto <bb 204>;

  <bb 357>:
  # __i$_M_node_277 = PHI <__i$_M_node_824(224), __i$_M_node_824(223), __i$_M_node_551(213)>
  # DEBUG this => NULL
  # DEBUG this => &D.88575
  # DEBUG __a => &neighbor
  # DEBUG __b => NULL
  D.88575.first = neighbor_160;
  MEM[(struct pair *)&D.88575 + 4B] = 0;
  MEM[(struct pair *)&D.88575 + 8B] = 0;
  # DEBUG this => D#1229
  # DEBUG __position$_M_node => __i$_M_node_277
  # DEBUG __x => &D.88575
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _563 = &MEM[(struct map *)__i$_M_node_529 + 40B]._M_t;
  # DEBUG this => _563
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_277;
  # DEBUG __x => &D.88575
  # DEBUG this => &__an
  # DEBUG __t => _563
  # DEBUG __an$_M_t => _563
  # DEBUG D#680 => &__an
  D.88574 = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_ZNSt8_Rb_treeIiSt4pairIKiS0_IiiEESt10_Select1stIS3_ESt4lessIiESaIS3_EE17_M_insert_unique_INS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_ERKS3_RT_.isra.223.constprop (_563, __pos, &D.88575);
  goto <bb 225>;

<L90>:
  goto <bb 346> (<L53>);

  <bb 359>:
  # __i$_M_node_508 = PHI <__i$_M_node_928(235), __i$_M_node_928(234), __i$_M_node_122(227)>
  # DEBUG this => &D.88630
  # DEBUG D#239 => &D.88630._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.88630]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.88630]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.88630]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.88630]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.88630]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.88630]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.88630]._M_header;
  # DEBUG this => &D.88631
  # DEBUG __a => D#1252
  # DEBUG __b => &D.88630
  D.88631.first = r_start_107(D);
  # DEBUG D#670 => &D.88631.second
  # DEBUG this => D#670
  # DEBUG __x => &D.88630
  # DEBUG this => &MEM[(struct map *)&D.88631 + 8B]._M_t
  # DEBUG __x => &D.88630._M_t
  # DEBUG this => &D.88630._M_t
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)&D.88630]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)&D.88631 + 8B]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)&D.88631 + 8B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.88631 + 8B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.88631 + 8B]._M_node_count = 0;
  # DEBUG this => D#662
  MEM[(struct _Rb_tree_impl *)&D.88631 + 8B]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.88631 + 8B]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.88631 + 8B]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.88631 + 8B]._M_header;
  # DEBUG D#109 => &D.88630._M_t
  # DEBUG this => D#109
  # DEBUG this => D#1230
  # DEBUG __position$_M_node => __i$_M_node_508
  # DEBUG __x => &D.88631
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _580 = &MEM[(struct map *)_169 + 48B]._M_t;
  # DEBUG this => _580
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_508;
  # DEBUG __x => &D.88631
  # DEBUG this => &__an
  # DEBUG __t => _580
  # DEBUG __an$_M_t => _580
  # DEBUG D#750 => &__an
  D.88629 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE17_M_insert_unique_INSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_ERKS9_RT_.isra.240.constprop (_580, __pos, &D.88631);
  goto <bb 236>;

  <bb 360>:
  # __i$_M_node_1165 = PHI <__i$_M_node_825(248), __i$_M_node_825(247), __i$_M_node_598(237)>
  # DEBUG this => NULL
  # DEBUG this => &D.88679
  # DEBUG __a => &neighbor
  # DEBUG __b => NULL
  D.88679.first = neighbor_961;
  MEM[(struct pair *)&D.88679 + 4B] = 0;
  MEM[(struct pair *)&D.88679 + 8B] = 0;
  # DEBUG this => D#1231
  # DEBUG __position$_M_node => __i$_M_node_1165
  # DEBUG __x => &D.88679
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _610 = &MEM[(struct map *)__i$_M_node_584 + 40B]._M_t;
  # DEBUG this => _610
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_1165;
  # DEBUG __x => &D.88679
  # DEBUG this => &__an
  # DEBUG __t => _610
  # DEBUG __an$_M_t => _610
  # DEBUG D#680 => &__an
  D.88678 = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_ZNSt8_Rb_treeIiSt4pairIKiS0_IiiEESt10_Select1stIS3_ESt4lessIiESaIS3_EE17_M_insert_unique_INS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_ERKS3_RT_.isra.223.constprop (_610, __pos, &D.88679);
  goto <bb 249>;

<L91>:
  goto <bb 346> (<L53>);

  <bb 362>:
  # __i$_M_node_819 = PHI <__i$_M_node_826(258), __i$_M_node_826(257), __i$_M_node_132(250)>
  # DEBUG this => &D.88734
  # DEBUG D#239 => &D.88734._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.88734]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.88734]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.88734]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.88734]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.88734]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.88734]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.88734]._M_header;
  # DEBUG this => &D.88735
  # DEBUG __a => &r_start
  # DEBUG __b => &D.88734
  D.88735.first = r_start_107(D);
  # DEBUG D#670 => &D.88735.second
  # DEBUG this => D#670
  # DEBUG __x => &D.88734
  # DEBUG this => &MEM[(struct map *)&D.88735 + 8B]._M_t
  # DEBUG __x => &D.88734._M_t
  # DEBUG this => &D.88734._M_t
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)&D.88734]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)&D.88735 + 8B]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)&D.88735 + 8B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.88735 + 8B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.88735 + 8B]._M_node_count = 0;
  # DEBUG this => D#662
  MEM[(struct _Rb_tree_impl *)&D.88735 + 8B]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.88735 + 8B]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.88735 + 8B]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.88735 + 8B]._M_header;
  # DEBUG D#109 => &D.88734._M_t
  # DEBUG this => D#109
  # DEBUG this => D#1232
  # DEBUG __position$_M_node => __i$_M_node_819
  # DEBUG __x => &D.88735
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _627 = &MEM[(struct map *)_170 + 48B]._M_t;
  # DEBUG this => _627
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_819;
  # DEBUG __x => &D.88735
  # DEBUG this => &__an
  # DEBUG __t => _627
  # DEBUG __an$_M_t => _627
  # DEBUG D#750 => &__an
  D.88733 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE17_M_insert_unique_INSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_ERKS9_RT_.isra.240.constprop (_627, __pos, &D.88735);
  goto <bb 259>;

  <bb 363>:
  # __i$_M_node_807 = PHI <__i$_M_node_840(281), __i$_M_node_840(280), __i$_M_node_645(273)>
  # DEBUG this => &D.88810
  # DEBUG D#239 => &D.88810._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.88810]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.88810]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.88810]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.88810]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.88810]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.88810]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.88810]._M_header;
  # DEBUG this => &D.88811
  # DEBUG __a => &r_start
  # DEBUG __b => &D.88810
  D.88811.first = r_start_107(D);
  # DEBUG D#670 => &D.88811.second
  # DEBUG this => D#670
  # DEBUG __x => &D.88810
  # DEBUG this => &MEM[(struct map *)&D.88811 + 8B]._M_t
  # DEBUG __x => &D.88810._M_t
  # DEBUG this => &D.88810._M_t
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)&D.88810]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)&D.88811 + 8B]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)&D.88811 + 8B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.88811 + 8B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.88811 + 8B]._M_node_count = 0;
  # DEBUG this => D#662
  MEM[(struct _Rb_tree_impl *)&D.88811 + 8B]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.88811 + 8B]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.88811 + 8B]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.88811 + 8B]._M_header;
  # DEBUG D#109 => &D.88810._M_t
  # DEBUG this => D#109
  # DEBUG this => D#1233
  # DEBUG __position$_M_node => __i$_M_node_807
  # DEBUG __x => &D.88811
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _657 = &MEM[(struct map *)_171 + 48B]._M_t;
  # DEBUG this => _657
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_807;
  # DEBUG __x => &D.88811
  # DEBUG this => &__an
  # DEBUG __t => _657
  # DEBUG __an$_M_t => _657
  # DEBUG D#750 => &__an
  D.88809 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE17_M_insert_unique_INSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_ERKS9_RT_.isra.240.constprop (_657, __pos, &D.88811);
  goto <bb 282>;

  <bb 364>:
  # __i$_M_node_814 = PHI <__i$_M_node_920(294), __i$_M_node_920(293), __i$_M_node_675(283)>
  # DEBUG this => NULL
  # DEBUG this => &D.88859
  # DEBUG __a => &neighbor
  # DEBUG __b => NULL
  D.88859.first = neighbor_961;
  MEM[(struct pair *)&D.88859 + 4B] = 0;
  MEM[(struct pair *)&D.88859 + 8B] = 0;
  # DEBUG this => D#1234
  # DEBUG __position$_M_node => __i$_M_node_814
  # DEBUG __x => &D.88859
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _687 = &MEM[(struct map *)__i$_M_node_661 + 40B]._M_t;
  # DEBUG this => _687
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_814;
  # DEBUG __x => &D.88859
  # DEBUG this => &__an
  # DEBUG __t => _687
  # DEBUG __an$_M_t => _687
  # DEBUG D#680 => &__an
  D.88858 = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_ZNSt8_Rb_treeIiSt4pairIKiS0_IiiEESt10_Select1stIS3_ESt4lessIiESaIS3_EE17_M_insert_unique_INS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_ERKS3_RT_.isra.223.constprop (_687, __pos, &D.88859);
  goto <bb 295>;

<L92>:
  goto <bb 346> (<L53>);

  <bb 366>:
  # __i$_M_node_354 = PHI <__i$_M_node_841(304), __i$_M_node_841(303), __i$_M_node_138(296)>
  # DEBUG this => &D.88914
  # DEBUG D#239 => &D.88914._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.88914]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.88914]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.88914]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.88914]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.88914]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.88914]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.88914]._M_header;
  # DEBUG this => &D.88915
  # DEBUG __a => &i
  # DEBUG __b => &D.88914
  D.88915.first = i_300;
  # DEBUG D#670 => &D.88915.second
  # DEBUG this => D#670
  # DEBUG __x => &D.88914
  # DEBUG this => &MEM[(struct map *)&D.88915 + 8B]._M_t
  # DEBUG __x => &D.88914._M_t
  # DEBUG this => &D.88914._M_t
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)&D.88914]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)&D.88915 + 8B]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)&D.88915 + 8B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.88915 + 8B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.88915 + 8B]._M_node_count = 0;
  # DEBUG this => D#662
  MEM[(struct _Rb_tree_impl *)&D.88915 + 8B]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.88915 + 8B]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.88915 + 8B]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.88915 + 8B]._M_header;
  # DEBUG D#109 => &D.88914._M_t
  # DEBUG this => D#109
  # DEBUG this => _172
  # DEBUG __position$_M_node => __i$_M_node_354
  # DEBUG __x => &D.88915
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _704 = &_172->_M_t;
  # DEBUG this => _704
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_354;
  # DEBUG __x => &D.88915
  # DEBUG this => &__an
  # DEBUG __t => _704
  # DEBUG __an$_M_t => _704
  # DEBUG D#750 => &__an
  D.88913 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE17_M_insert_unique_INSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_ERKS9_RT_.isra.240.constprop (_704, __pos, &D.88915);
  goto <bb 305>;

  <bb 367>:
  # __i$_M_node_795 = PHI <__i$_M_node_874(318), __i$_M_node_874(317), prephitmp_1195(310)>
  # DEBUG this => &D.88990
  # DEBUG D#239 => &D.88990._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.88990]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.88990]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.88990]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.88990]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.88990]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.88990]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.88990]._M_header;
  # DEBUG this => &D.88991
  # DEBUG __a => &i
  # DEBUG __b => &D.88990
  D.88991.first = i_300;
  # DEBUG D#670 => &D.88991.second
  # DEBUG this => D#670
  # DEBUG __x => &D.88990
  # DEBUG this => &MEM[(struct map *)&D.88991 + 8B]._M_t
  # DEBUG __x => &D.88990._M_t
  # DEBUG this => &D.88990._M_t
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)&D.88990]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)&D.88991 + 8B]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)&D.88991 + 8B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.88991 + 8B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.88991 + 8B]._M_node_count = 0;
  # DEBUG this => D#662
  MEM[(struct _Rb_tree_impl *)&D.88991 + 8B]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.88991 + 8B]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.88991 + 8B]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.88991 + 8B]._M_header;
  # DEBUG D#109 => &D.88990._M_t
  # DEBUG this => D#109
  # DEBUG this => D#1243
  # DEBUG __position$_M_node => __i$_M_node_795
  # DEBUG __x => &D.88991
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _734 = &prephitmp_1193->_M_t;
  # DEBUG this => _734
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_795;
  # DEBUG __x => &D.88991
  # DEBUG this => &__an
  # DEBUG __t => _734
  # DEBUG __an$_M_t => _734
  # DEBUG D#750 => &__an
  D.88989 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE17_M_insert_unique_INSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_ERKS9_RT_.isra.240.constprop (_734, __pos, &D.88991);
  goto <bb 319>;

  <bb 368>:
  pretmp_1204 = MEM[(const int &)iter$_M_node_151 + 32];

  <bb 369>:
  # __i$_M_node_317 = PHI <__i$_M_node_865(340), __i$_M_node_865(339), __i$_M_node_760(368)>
  # prephitmp_1135 = PHI <pretmp_1136(340), pretmp_1136(339), pretmp_1204(368)>
  # DEBUG this => &D.89061
  # DEBUG __a => D#1235
  # DEBUG __b => NULL
  D.89061.first = prephitmp_1135;
  D.89061.second = 0;
  # DEBUG this => _218
  # DEBUG __position$_M_node => __i$_M_node_317
  # DEBUG __x => &D.89061
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _772 = &_218->_M_t;
  # DEBUG this => _772
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_317;
  # DEBUG __x => &D.89061
  # DEBUG this => &__an
  # DEBUG __t => _772
  # DEBUG __an$_M_t => _772
  # DEBUG D#841 => &__an
  D.89062 = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_insert_unique_INS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_ERKS2_RT_.isra.263.constprop (_772, __pos, &D.89061);
  goto <bb 341>;

<L93>:
  goto <bb 346> (<L53>);

}



;; Function void std::__adjust_heap(_RandomAccessIterator, _Distance, _Distance, _Tp, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Distance = long int; _Tp = int; _Compare = __gnu_cxx::__ops::_Iter_less_iter] (_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEEliNS0_5__ops15_Iter_less_iterEEvT_T0_SA_T1_T2_, funcdef_no=3700, decl_uid=65168, cgraph_uid=1822, symbol_order=1824)

Trying loop 2 as candidate
loop 2 is innermost
loop is not parallel according to graphite
Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
void std::__adjust_heap(_RandomAccessIterator, _Distance, _Distance, _Tp, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Distance = long int; _Tp = int; _Compare = __gnu_cxx::__ops::_Iter_less_iter] (struct __normal_iterator __first, long int __holeIndex, long int __len, int __value, struct _Iter_less_iter __comp)
{
  int * const __first;
  int * const __first$_M_current;
  struct __normal_iterator __first;
  long int __holeIndex;
  int * const __first$_M_current;
  long int __secondChild;
  long int _11;
  int _14;
  long int _17;
  long int _18;
  long int _19;
  long int _20;
  int _23;
  int _24;
  long unsigned int __n.307_29;
  long unsigned int _30;
  int * const _31;
  long unsigned int __n.307_32;
  long unsigned int _33;
  int * const _34;
  long unsigned int __n.307_38;
  long unsigned int _39;
  int * const _40;
  long unsigned int __n.307_41;
  long unsigned int _42;
  int * const _43;
  long int _48;
  long unsigned int __n.307_52;
  long unsigned int _53;
  int * const _54;
  int _55;
  long unsigned int __n.307_56;
  long unsigned int __n.307_57;
  long unsigned int _58;
  int * const _59;
  long unsigned int __n.307_60;
  long unsigned int _61;
  int * const _62;
  long int _64;
  long unsigned int _73;
  long int _74;
  long int _76;
  int * const _79;
  int _80;
  long int _94;
  long unsigned int pretmp_107;
  long unsigned int pretmp_111;
  int * const pretmp_115;
  int * const prephitmp_116;
  int * const prephitmp_122;
  int * const prephitmp_126;
  int prephitmp_128;
  int * const _132;
  long unsigned int pretmp_133;
  long unsigned int pretmp_135;
  int * const pretmp_137;
  int * const prephitmp_138;
  int * const _139;
  int prephitmp_143;
  int * const prephitmp_146;
  int * const prephitmp_153;

  <bb 2>:
  __first$_M_current_26 = MEM[(struct __normal_iterator *)&__first];
  # DEBUG __first$_M_current => __first$_M_current_26
  # DEBUG __topIndex => __holeIndex_6(D)
  # DEBUG __secondChild => __holeIndex_6(D)
  # DEBUG __secondChild => __holeIndex_6(D)
  # DEBUG __holeIndex => __holeIndex_6(D)
  _76 = __len_8(D) + -1;
  _74 = _76 / 2;
  if (__holeIndex_6(D) >= _74)
    goto <bb 20>;
  else
    goto <bb 3>;

  <bb 3>:

  <bb 4>:
  # __holeIndex_75 = PHI <__holeIndex_6(D)(3), __holeIndex_3(7)>
  # DEBUG __secondChild => __holeIndex_75
  # DEBUG __holeIndex => __holeIndex_75
  _11 = __holeIndex_75 + 1;
  __holeIndex_12 = _11 * 2;
  # DEBUG __secondChild => __holeIndex_12
  __holeIndex_13 = __holeIndex_12 + -1;
  # DEBUG this => &__first
  # DEBUG __n => __holeIndex_13
  __n.307_32 = (long unsigned int) __holeIndex_13;
  _33 = __n.307_32 * 4;
  _34 = __first$_M_current_26 + _33;
  # DEBUG this => NULL
  # DEBUG __i => &D.79732
  # DEBUG this => &__first
  # DEBUG __n => __holeIndex_12
  __n.307_29 = (long unsigned int) __holeIndex_12;
  _30 = __n.307_29 * 4;
  _31 = __first$_M_current_26 + _30;
  # DEBUG this => NULL
  # DEBUG __i => &D.79726
  # DEBUG D#262 => &__comp
  # DEBUG __it1$_M_current => _31
  # DEBUG __it2$_M_current => _34
  # DEBUG this => D#262
  # DEBUG this => &__it1
  _23 = *_31;
  # DEBUG this => &__it2
  _14 = *_34;
  if (_14 > _23)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:

  <bb 6>:
  # __holeIndex_3 = PHI <__holeIndex_12(4), __holeIndex_13(5)>
  # prephitmp_143 = PHI <_23(4), _14(5)>
  # prephitmp_146 = PHI <_31(4), _34(5)>
  # DEBUG __secondChild => __holeIndex_3
  # DEBUG this => &__first
  # DEBUG __n => __holeIndex_75
  __n.307_38 = (long unsigned int) __holeIndex_75;
  _39 = __n.307_38 * 4;
  _40 = __first$_M_current_26 + _39;
  # DEBUG this => NULL
  # DEBUG __i => &D.79750
  # DEBUG this => &D.65501
  # DEBUG this => &__first
  # DEBUG __n => __holeIndex_3
  # DEBUG this => NULL
  # DEBUG __i => &D.79741
  # DEBUG this => &D.65502
  *_40 = prephitmp_143;
  # DEBUG __holeIndex => __holeIndex_3
  # DEBUG __secondChild => __holeIndex_3
  # DEBUG __holeIndex => __holeIndex_3
  if (__holeIndex_3 >= _74)
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 7>:
  goto <bb 4>;

  <bb 8>:
  # __holeIndex_147 = PHI <__holeIndex_3(6)>
  # prephitmp_126 = PHI <prephitmp_146(6)>

  <bb 23>:
  _17 = __len_8(D) & 1;
  if (_17 == 0)
    goto <bb 9>;
  else
    goto <bb 26>;

  <bb 9>:
  # __holeIndex_95 = PHI <__holeIndex_147(23), __holeIndex_6(D)(22)>
  # prephitmp_138 = PHI <prephitmp_126(23), pretmp_137(22)>

  <bb 25>:
  _18 = __len_8(D) + -2;
  _19 = _18 / 2;
  if (_19 == __holeIndex_95)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  _20 = __holeIndex_95 + 1;
  __secondChild_21 = _20 * 2;
  # DEBUG __secondChild => __secondChild_21
  # DEBUG this => &__first
  # DEBUG __n => __holeIndex_95
  # DEBUG this => NULL
  # DEBUG __i => &D.79768
  # DEBUG this => &D.65503
  __holeIndex_22 = __secondChild_21 + -1;
  # DEBUG this => &__first
  # DEBUG __n => __holeIndex_22
  __n.307_41 = (long unsigned int) __holeIndex_22;
  _42 = __n.307_41 * 4;
  _43 = __first$_M_current_26 + _42;
  # DEBUG this => NULL
  # DEBUG __i => &D.79759
  # DEBUG this => &D.65504
  _24 = *_43;
  *prephitmp_138 = _24;
  # DEBUG __holeIndex => __holeIndex_22

  <bb 11>:
  # __holeIndex_89 = PHI <__holeIndex_22(10), __holeIndex_95(25)>
  # prephitmp_153 = PHI <_43(10), prephitmp_138(25)>

  <bb 26>:
  # __holeIndex_2 = PHI <__holeIndex_89(11), __holeIndex_147(23)>
  # prephitmp_122 = PHI <prephitmp_153(11), prephitmp_126(23)>
  # DEBUG __holeIndex => __holeIndex_2
  # DEBUG D#18 => D.71260
  # DEBUG D#634 => D.71261
  # DEBUG __first => __first$_M_current_26
  # DEBUG __holeIndex => __holeIndex_2
  # DEBUG __topIndex => __holeIndex_6(D)
  # DEBUG __value => __value_27(D)
  # DEBUG __first$_M_current => __first$_M_current_26
  # DEBUG D#1262 => __holeIndex_2 + -1
  # DEBUG D#1261 => D#1262 / 2
  # DEBUG __parent => D#1261
  # DEBUG __parent => D#1261
  # DEBUG __holeIndex => __holeIndex_2
  if (__holeIndex_2 > __holeIndex_6(D))
    goto <bb 12>;
  else
    goto <bb 19>;

  <bb 12>:
  _48 = __holeIndex_2 + -1;
  __holeIndex_49 = _48 / 2;
  # DEBUG this => &__first
  # DEBUG __n => D#1261
  __n.307_56 = (long unsigned int) __holeIndex_49;
  _73 = __n.307_56 * 4;
  _79 = __first$_M_current_26 + _73;
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG D#633 => &__value
  # DEBUG __it$_M_current => _79
  # DEBUG this => D#632
  # DEBUG __val => D#633
  # DEBUG this => &__it
  _80 = *_79;
  if (__value_27(D) > _80)
    goto <bb 16>;
  else
    goto <bb 19>;

  <bb 13>:
  _64 = __holeIndex_90 + -1;
  __holeIndex_65 = _64 / 2;
  # DEBUG this => &__first
  # DEBUG __n => D#1259
  __n.307_52 = (long unsigned int) __holeIndex_65;
  _53 = __n.307_52 * 4;
  _54 = __first$_M_current_26 + _53;
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG D#633 => &__value
  # DEBUG __it$_M_current => _54
  # DEBUG this => D#632
  # DEBUG __val => D#633
  # DEBUG this => &__it
  _55 = *_54;
  if (__value_27(D) > _55)
    goto <bb 15>;
  else
    goto <bb 14>;

  <bb 14>:
  # _139 = PHI <_62(13)>
  goto <bb 19>;

  <bb 15>:
  goto <bb 17>;

  <bb 16>:

  <bb 17>:
  # __holeIndex_88 = PHI <__holeIndex_2(16), __holeIndex_90(15)>
  # __holeIndex_90 = PHI <__holeIndex_49(16), __holeIndex_65(15)>
  # prephitmp_128 = PHI <_80(16), _55(15)>
  # DEBUG __parent => __holeIndex_90
  # DEBUG __holeIndex => __holeIndex_88
  # DEBUG this => &__first
  # DEBUG __n => __holeIndex_90
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG D#633 => &__value
  # DEBUG __it$_M_current => _79
  # DEBUG this => D#632
  # DEBUG __val => D#633
  # DEBUG this => &__it
  # DEBUG this => &__first
  # DEBUG __n => __holeIndex_88
  __n.307_57 = (long unsigned int) __holeIndex_88;
  _58 = __n.307_57 * 4;
  _59 = __first$_M_current_26 + _58;
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG this => NULL
  # DEBUG this => &__first
  # DEBUG __n => __holeIndex_90
  __n.307_60 = (long unsigned int) __holeIndex_90;
  _61 = __n.307_60 * 4;
  _62 = __first$_M_current_26 + _61;
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG this => NULL
  *_59 = prephitmp_128;
  # DEBUG __holeIndex => __holeIndex_90
  # DEBUG D#1260 => __holeIndex_90 + -1
  # DEBUG D#1259 => D#1260 / 2
  # DEBUG __parent => D#1259
  # DEBUG __parent => D#1259
  # DEBUG __holeIndex => __holeIndex_90
  if (__holeIndex_6(D) < __holeIndex_90)
    goto <bb 13>;
  else
    goto <bb 18>;

  <bb 18>:
  # _132 = PHI <_62(17)>

  <bb 19>:
  # prephitmp_116 = PHI <_139(14), _132(18), prephitmp_122(26), prephitmp_122(12), pretmp_115(21)>

  <bb 24>:
  # DEBUG this => &__first
  # DEBUG __n => NULL
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG this => NULL
  *prephitmp_116 = __value_27(D);
  return;

  <bb 20>:
  _94 = __len_8(D) & 1;
  if (_94 == 0)
    goto <bb 22>;
  else
    goto <bb 21>;

  <bb 21>:
  pretmp_107 = (long unsigned int) __holeIndex_6(D);
  pretmp_111 = pretmp_107 * 4;
  pretmp_115 = __first$_M_current_26 + pretmp_111;
  goto <bb 19>;

  <bb 22>:
  pretmp_133 = (long unsigned int) __holeIndex_6(D);
  pretmp_135 = pretmp_133 * 4;
  pretmp_137 = __first$_M_current_26 + pretmp_135;
  goto <bb 9>;

}



;; Function void std::__introsort_loop(_RandomAccessIterator, _RandomAccessIterator, _Size, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Size = long int; _Compare = __gnu_cxx::__ops::_Iter_less_iter] (_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.211, funcdef_no=4006, decl_uid=80008, cgraph_uid=1224, symbol_order=3515)

Trying loop 2 as candidate
loop 2 is innermost
loop is not parallel according to graphite
Trying loop 4 as candidate
loop 4 is innermost
loop is not parallel according to graphite
Trying loop 1 as candidate
loop 1 is not innermost
loop is not parallel according to graphite
Trying loop 5 as candidate
loop 5 is not innermost
loop is not parallel according to graphite
Trying loop 6 as candidate
loop 6 is innermost
loop is not parallel according to graphite
void std::__introsort_loop(_RandomAccessIterator, _RandomAccessIterator, _Size, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<int*, std::vector<int> >; _Size = long int; _Compare = __gnu_cxx::__ops::_Iter_less_iter] (struct __normal_iterator __first, struct __normal_iterator __last, long int __depth_limit)
{
  int * SR.2013;
  int * const __first;
  int * __last;
  int * const __first;
  int * __first$_M_current;
  int * __middle$_M_current;
  int * const __last;
  int * const __first;
  int __tmp;
  int __tmp;
  int __tmp;
  int __tmp;
  int __tmp;
  int __tmp;
  int * const __it1$_M_current;
  int * const __it2$_M_current;
  int * const __it2$_M_current;
  int * const __a;
  int * const __a;
  int * const __a;
  int * const __it2$_M_current;
  int * const __a;
  int * const __a;
  int * const __a;
  struct __normal_iterator __result;
  struct __normal_iterator __a;
  struct __normal_iterator __b;
  struct __normal_iterator __c;
  struct _Iter_less_iter __comp;
  struct _Iter_less_iter D.89257;
  struct __normal_iterator D.89256;
  struct __normal_iterator D.89255;
  struct __normal_iterator D.89254;
  struct __normal_iterator __mid;
  int * __first$_M_current;
  int * __last$_M_current;
  int * const __first;
  int * const __last;
  struct __normal_iterator __first;
  struct __normal_iterator __last;
  struct _Iter_less_iter __comp;
  int * const __last;
  int * const __first;
  _ValueType __value;
  _DistanceType __parent;
  struct _Iter_less_iter D.89211;
  struct __normal_iterator __first;
  struct __normal_iterator __last;
  int * const __it2$_M_current;
  int * __i$_M_current;
  struct _Iter_less_iter D.89197;
  struct __normal_iterator __first;
  struct __normal_iterator __first;
  struct __normal_iterator __middle;
  struct __normal_iterator __last;
  int * __last$_M_current;
  _ValueType __value;
  struct _Iter_less_iter D.89177;
  struct __normal_iterator __first;
  struct __normal_iterator __first;
  struct __normal_iterator __last;
  struct _Iter_less_iter D.80023;
  struct __normal_iterator __cut;
  struct __normal_iterator __last;
  struct __normal_iterator __middle;
  struct __normal_iterator __first;
  int * const __last;
  long int _3;
  long int _6;
  int prephitmp_7;
  int prephitmp_22;
  int _34;
  long int _35;
  long int _36;
  difference_type _37;
  int prephitmp_38;
  int pretmp_40;
  int pretmp_43;
  int pretmp_48;
  difference_type _52;
  long int _53;
  long unsigned int __n.307_56;
  long unsigned int _57;
  int * const _58;
  long int _65;
  difference_type _66;
  long int _67;
  long unsigned int __n.307_68;
  long unsigned int _69;
  int * const _70;
  int _74;
  int _80;
  int _86;
  int _87;
  int _89;
  int _97;
  int pretmp_98;
  int _106;
  long int _112;
  long int _117;
  long int _119;
  int prephitmp_154;
  int _157;
  int pretmp_158;
  long int _161;
  int * const pretmp_163;
  long int _164;
  int pretmp_166;
  int pretmp_167;
  int pretmp_169;
  int prephitmp_170;
  int prephitmp_172;
  int pretmp_173;
  long int prephitmp_174;
  long int _177;
  int pretmp_180;

  <bb 2>:
  __first_150 = MEM[(struct __normal_iterator *)&__first];
  # DEBUG __first => __first_150
  __last_149 = MEM[(struct __normal_iterator *)&__last];
  # DEBUG __last => __last_149
  # DEBUG __last => __last_149
  # DEBUG __last => __last_149
  # DEBUG __depth_limit => __depth_limit_11(D)
  # DEBUG __lhs => &__last
  # DEBUG __rhs => &__first
  # DEBUG this => &__last
  _161 = (long int) __last_149;
  # DEBUG this => &__first
  _177 = (long int) __first_150;
  _112 = _161 - _177;
  if (_112 > 67)
    goto <bb 3>;
  else
    goto <bb 38>;

  <bb 3>:
  if (__depth_limit_11(D) == 0)
    goto <bb 7>;
  else
    goto <bb 14>;

  <bb 4>:
  if (__depth_limit_9 == 0)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  # _164 = PHI <_6(4)>
  # __last_160 = PHI <__last_162(4)>
  goto <bb 7>;

  <bb 6>:
  goto <bb 15>;

  <bb 7>:
  # __last_115 = PHI <__last_160(5), __last_149(3)>
  # _119 = PHI <_164(5), _112(3)>
  # prephitmp_174 = PHI <_164(5), _112(3)>
  # DEBUG __first$_M_current => __first_150
  # DEBUG __middle$_M_current => __last_115
  # DEBUG __first => __first_150
  # DEBUG __last => __last_115
  # DEBUG __lhs => &__last
  # DEBUG __rhs => &__first
  # DEBUG this => &__last
  # DEBUG this => &__first
  _52 = _119 /[ex] 4;
  # DEBUG __lhs => &__last
  # DEBUG __rhs => &__first
  # DEBUG this => &__last
  # DEBUG this => &__first
  # DEBUG __len => NULL
  _53 = _52 + -2;
  __parent_54 = _53 >> 1;
  # DEBUG __parent => __parent_54

  <bb 8>:
  # __parent_55 = PHI <__parent_54(7), __parent_60(9)>
  # DEBUG __parent => __parent_55
  # DEBUG this => &__first
  # DEBUG __n => __parent_55
  __n.307_56 = (long unsigned int) __parent_55;
  _57 = __n.307_56 * 4;
  _58 = __first_150 + _57;
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG this => NULL
  __value_59 = *_58;
  # DEBUG __value => __value_59
  MEM[(struct __normal_iterator *)&__first] = __first_150;
  std::__adjust_heap<__gnu_cxx::__normal_iterator<int*, std::vector<int> >, long int, int, __gnu_cxx::__ops::_Iter_less_iter> (__first, __parent_55, _52, __value_59, D.89211);
  if (__parent_55 == 0)
    goto <bb 40>;
  else
    goto <bb 9>;

  <bb 9>:
  # DEBUG __parent => __parent_55
  # DEBUG this => &__first
  # DEBUG __n => __parent_55
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG this => NULL
  # DEBUG __value => __value_59
  __parent_60 = __parent_55 + -1;
  # DEBUG __parent => __parent_60
  goto <bb 8>;

  <bb 10>:

  <bb 11>:
  # __last_139 = PHI <__last_115(10), __last_32(12)>
  # DEBUG __last$_M_current => __last_139
  # DEBUG __lhs => &__last
  # DEBUG __rhs => &__first
  # DEBUG this => &__last
  # DEBUG this => &__first
  # DEBUG this => &__last
  __last_32 = __last_139 + 18446744073709551612;
  # DEBUG __last$_M_current => __last_32
  # DEBUG __first => __first_150
  # DEBUG __last => __last_32
  # DEBUG __result => __last_32
  # DEBUG __first$_M_current => __first_150
  # DEBUG __result$_M_current => __last_32
  # DEBUG this => &__result
  __value_33 = *__last_32;
  # DEBUG __value => __value_33
  # DEBUG this => &__result
  # DEBUG this => &__first
  _34 = *__first_150;
  *__last_32 = _34;
  # DEBUG __lhs => &__last
  # DEBUG __rhs => &__first
  # DEBUG this => &__last
  _35 = (long int) __last_32;
  # DEBUG this => &__first
  _36 = _35 - _177;
  _37 = _36 /[ex] 4;
  MEM[(struct __normal_iterator *)&__first] = __first_150;
  std::__adjust_heap<__gnu_cxx::__normal_iterator<int*, std::vector<int> >, long int, int, __gnu_cxx::__ops::_Iter_less_iter> (__first, 0, _37, __value_33, D.89177);
  # DEBUG __last$_M_current => __last_32
  # DEBUG __lhs => &__last
  # DEBUG __rhs => &__first
  # DEBUG this => &__last
  # DEBUG this => &__first
  if (_36 > 7)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  goto <bb 11>;

  <bb 13>:
  __cut ={v} {CLOBBER};
  goto <bb 39>;

  <bb 14>:
  pretmp_163 = __first_150 + 4;

  <bb 15>:
  # __last_116 = PHI <__last_149(14), __last_162(6)>
  # _117 = PHI <_161(14), _3(6)>
  # __depth_limit_120 = PHI <__depth_limit_11(D)(14), __depth_limit_9(6)>
  # DEBUG __last => __last_116
  # DEBUG __depth_limit => __depth_limit_120
  # DEBUG __lhs => &__last
  # DEBUG __rhs => &__first
  # DEBUG this => &__last
  # DEBUG this => &__first
  __depth_limit_9 = __depth_limit_120 + -1;
  # DEBUG __depth_limit => __depth_limit_9
  # DEBUG __last => __last_116
  # DEBUG __first => __first_150
  # DEBUG __first => __first_150
  # DEBUG __last => __last_116
  # DEBUG __lhs => &__last
  # DEBUG __rhs => &__first
  # DEBUG this => &__last
  # DEBUG this => &__first
  _65 = _117 - _177;
  _66 = _65 /[ex] 4;
  _67 = _66 / 2;
  # DEBUG this => &__first
  # DEBUG __n => _67
  __n.307_68 = (long unsigned int) _67;
  _69 = __n.307_68 * 4;
  _70 = __first_150 + _69;
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG this => &__last
  # DEBUG __n => 1
  # DEBUG D#1265 => __last_116 + 18446744073709551612
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG this => &__first
  # DEBUG __n => 1
  # DEBUG D#1264 => __first_150 + 4
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG D#262 => &__comp
  # DEBUG __it1$_M_current => D#1264
  # DEBUG __it2$_M_current => _70
  # DEBUG this => D#262
  # DEBUG this => &__it1
  _86 = MEM[(int &)__first_150 + 4];
  # DEBUG this => &__it2
  _87 = *_70;
  if (_86 < _87)
    goto <bb 16>;
  else
    goto <bb 22>;

  <bb 16>:
  # DEBUG D#262 => &__comp
  # DEBUG __it1$_M_current => _70
  # DEBUG __it2$_M_current => D#1265
  # DEBUG this => D#262
  # DEBUG this => &__it1
  # DEBUG this => &__it2
  _89 = MEM[(int &)__last_116 + 18446744073709551612];
  if (_87 < _89)
    goto <bb 17>;
  else
    goto <bb 18>;

  <bb 17>:
  # DEBUG __a => __first_150
  # DEBUG __b => _70
  # DEBUG __a$_M_current => __first_150
  # DEBUG __b$_M_current => _70
  # DEBUG this => &__b
  # DEBUG this => &__a
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  __tmp_91 = *__first_150;
  # DEBUG __tmp => __tmp_91
  *__first_150 = _87;
  *_70 = __tmp_91;
  pretmp_158 = *__first_150;
  pretmp_169 = MEM[(int &)__last_116 + 18446744073709551612];
  goto <bb 20>;

  <bb 18>:
  # DEBUG D#262 => &__comp
  # DEBUG __it1$_M_current => D#1264
  # DEBUG __it2$_M_current => D#1265
  # DEBUG this => D#262
  # DEBUG this => NULL
  # DEBUG this => NULL
  if (_86 < _89)
    goto <bb 19>;
  else
    goto <bb 21>;

  <bb 19>:
  # DEBUG __a => __first_150
  # DEBUG __b => D#1265
  # DEBUG __a$_M_current => __first_150
  # DEBUG __b$_M_current => D#1265
  # DEBUG this => &__b
  # DEBUG this => &__a
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  __tmp_93 = *__first_150;
  # DEBUG __tmp => __tmp_93
  *__first_150 = _89;
  MEM[(int &)__last_116 + 18446744073709551612] = __tmp_93;
  pretmp_180 = *__first_150;

  <bb 20>:
  # prephitmp_7 = PHI <pretmp_180(19), _86(21), pretmp_158(17), pretmp_43(26), pretmp_167(25), _86(23)>
  # prephitmp_38 = PHI <__tmp_93(19), pretmp_173(21), pretmp_169(17), pretmp_40(26), __tmp_101(25), pretmp_166(23)>
  goto <bb 28>;

  <bb 21>:
  # DEBUG __a => __first_150
  # DEBUG __b => D#1264
  # DEBUG __a$_M_current => __first_150
  # DEBUG __b$_M_current => D#1264
  # DEBUG this => &__b
  # DEBUG this => &__a
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  __tmp_95 = *__first_150;
  # DEBUG __tmp => __tmp_95
  *__first_150 = _86;
  MEM[(int &)__first_150 + 4] = __tmp_95;
  pretmp_173 = MEM[(int &)__last_116 + 18446744073709551612];
  goto <bb 20>;

  <bb 22>:
  # DEBUG D#262 => &__comp
  # DEBUG __it1$_M_current => D#1264
  # DEBUG __it2$_M_current => D#1265
  # DEBUG this => D#262
  # DEBUG this => &__it1
  # DEBUG this => &__it2
  _97 = MEM[(int &)__last_116 + 18446744073709551612];
  if (_86 < _97)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 23>:
  # DEBUG __a => __first_150
  # DEBUG __b => D#1264
  # DEBUG __a$_M_current => __first_150
  # DEBUG __b$_M_current => D#1264
  # DEBUG this => &__b
  # DEBUG this => &__a
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  __tmp_99 = *__first_150;
  # DEBUG __tmp => __tmp_99
  *__first_150 = _86;
  MEM[(int &)__first_150 + 4] = __tmp_99;
  pretmp_166 = MEM[(int &)__last_116 + 18446744073709551612];
  goto <bb 20>;

  <bb 24>:
  # DEBUG D#262 => &__comp
  # DEBUG __it1$_M_current => _70
  # DEBUG __it2$_M_current => D#1265
  # DEBUG this => D#262
  # DEBUG this => NULL
  # DEBUG this => NULL
  if (_87 < _97)
    goto <bb 25>;
  else
    goto <bb 26>;

  <bb 25>:
  # DEBUG __a => __first_150
  # DEBUG __b => D#1265
  # DEBUG __a$_M_current => __first_150
  # DEBUG __b$_M_current => D#1265
  # DEBUG this => &__b
  # DEBUG this => &__a
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  __tmp_101 = *__first_150;
  # DEBUG __tmp => __tmp_101
  *__first_150 = _97;
  MEM[(int &)__last_116 + 18446744073709551612] = __tmp_101;
  pretmp_167 = *__first_150;
  goto <bb 20>;

  <bb 26>:
  # DEBUG __a => __first_150
  # DEBUG __b => _70
  # DEBUG __a$_M_current => __first_150
  # DEBUG __b$_M_current => _70
  # DEBUG this => &__b
  # DEBUG this => &__a
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  __tmp_103 = *__first_150;
  # DEBUG __tmp => __tmp_103
  *__first_150 = _87;
  *_70 = __tmp_103;
  pretmp_43 = *__first_150;
  pretmp_40 = MEM[(int &)__last_116 + 18446744073709551612];
  goto <bb 20>;

  <bb 27>:
  # __last_105 = PHI <__last_76(29), __last_82(37)>
  # __last_156 = PHI <__last_77(29), __last_143(37)>
  # prephitmp_154 = PHI <prephitmp_170(29), pretmp_98(37)>
  # prephitmp_22 = PHI <prephitmp_172(29), pretmp_48(37)>

  <bb 28>:
  # __last_73 = PHI <pretmp_163(20), __last_105(27)>
  # __last_77 = PHI <__last_116(20), __last_156(27)>
  # prephitmp_170 = PHI <prephitmp_7(20), prephitmp_154(27)>
  # prephitmp_172 = PHI <prephitmp_38(20), prephitmp_22(27)>
  # DEBUG __last$_M_current => __last_77
  # DEBUG __first$_M_current => __last_73
  # DEBUG __it1$_M_current => __last_73
  # DEBUG __it2$_M_current => __first_150
  # DEBUG this => D#262
  # DEBUG this => &__it1
  _74 = *__last_73;
  # DEBUG this => &__it2
  if (_74 < prephitmp_170)
    goto <bb 29>;
  else
    goto <bb 30>;

  <bb 29>:
  # DEBUG this => &__first
  __last_76 = __last_73 + 4;
  # DEBUG __first$_M_current => __last_76
  goto <bb 27>;

  <bb 30>:
  # DEBUG this => &__last
  __last_78 = __last_77 + 18446744073709551612;
  # DEBUG __last$_M_current => __last_78
  # DEBUG __last$_M_current => __last_78
  # DEBUG __it1$_M_current => __first_150
  # DEBUG __it2$_M_current => __last_78
  # DEBUG this => D#262
  # DEBUG this => &__it1
  # DEBUG this => &__it2
  if (prephitmp_170 < prephitmp_172)
    goto <bb 31>;
  else
    goto <bb 35>;

  <bb 31>:

  <bb 32>:
  # __last_142 = PHI <__last_78(31), __last_81(34)>
  # DEBUG __last$_M_current => __last_142
  # DEBUG __it1$_M_current => __first_150
  # DEBUG __it2$_M_current => __last_142
  # DEBUG this => D#262
  # DEBUG this => &__it1
  # DEBUG this => &__it2
  # DEBUG this => &__last
  __last_81 = __last_142 + 18446744073709551612;
  # DEBUG __last$_M_current => __last_81
  # DEBUG __last$_M_current => __last_81
  # DEBUG __it1$_M_current => __first_150
  # DEBUG __it2$_M_current => __last_81
  # DEBUG this => D#262
  # DEBUG this => &__it1
  # DEBUG this => &__it2
  _80 = *__last_81;
  if (_80 > prephitmp_170)
    goto <bb 34>;
  else
    goto <bb 33>;

  <bb 33>:
  # _157 = PHI <_80(32)>
  # __last_148 = PHI <__last_81(32)>
  goto <bb 35>;

  <bb 34>:
  goto <bb 32>;

  <bb 35>:
  # __last_143 = PHI <__last_148(33), __last_78(30)>
  # _106 = PHI <_157(33), prephitmp_172(30)>
  # DEBUG __lhs => &__first
  # DEBUG __rhs => &__last
  # DEBUG this => &__first
  # DEBUG this => &__last
  if (__last_73 >= __last_143)
    goto <bb 36>;
  else
    goto <bb 37>;

  <bb 36>:
  # __last_162 = PHI <__last_73(35)>
  __mid ={v} {CLOBBER};
  MEM[(struct __normal_iterator *)&__cut] = __last_162;
  # DEBUG D#641 => D.80022
  MEM[(struct __normal_iterator *)&__last] = __last_116;
  std::_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.211 (__cut, __last, __depth_limit_9);
  # DEBUG __last => __last_162
  __cut ={v} {CLOBBER};
  # DEBUG __last => __last_162
  # DEBUG __depth_limit => __depth_limit_9
  # DEBUG __lhs => &__last
  # DEBUG __rhs => &__first
  # DEBUG this => &__last
  _3 = (long int) __last_162;
  # DEBUG this => &__first
  _6 = _3 - _177;
  if (_6 > 67)
    goto <bb 4>;
  else
    goto <bb 38>;

  <bb 37>:
  # DEBUG __a => __last_73
  # DEBUG __b => __last_143
  # DEBUG __a$_M_current => __last_73
  # DEBUG __b$_M_current => __last_143
  # DEBUG this => &__b
  # DEBUG this => &__a
  # DEBUG __a => NULL
  # DEBUG __b => NULL
  # DEBUG __tmp => _74
  *__last_73 = _106;
  *__last_143 = _74;
  # DEBUG this => &__first
  __last_82 = __last_73 + 4;
  # DEBUG __first$_M_current => __last_82
  pretmp_98 = *__first_150;
  pretmp_48 = MEM[(int &)__last_143 + 18446744073709551612];
  goto <bb 27>;

  <bb 38>:

  <bb 39>:
  return;

  <bb 40>:
  # DEBUG __i$_M_current => __last_115
  # DEBUG __lhs => &__i
  # DEBUG __rhs => &__last
  # DEBUG this => &__i
  # DEBUG this => &__last
  # DEBUG __lhs => &__i
  # DEBUG __rhs => &__last
  # DEBUG this => &__i
  # DEBUG this => &__last
  # DEBUG D#637 => {CLOBBER}
  # DEBUG __i$_M_current => D#637
  # DEBUG __first => __first_150
  # DEBUG __last => __last_115
  # DEBUG __last$_M_current => __last_115
  # DEBUG __last$_M_current => __last_115
  # DEBUG __lhs => &__last
  # DEBUG __rhs => &__first
  # DEBUG this => &__last
  # DEBUG this => &__first
  if (prephitmp_174 > 7)
    goto <bb 10>;
  else
    goto <bb 13>;

}



;; Function void AnyNet::readFile() (_ZN6AnyNet8readFileEv, funcdef_no=2503, decl_uid=47437, cgraph_uid=628, symbol_order=630)

Trying loop 3 as candidate
loop 3 is innermost
loop is not parallel according to graphite
Trying loop 51 as candidate
loop 51 is not innermost
loop is not parallel according to graphite
Trying loop 52 as candidate
loop 52 is innermost
loop is not parallel according to graphite
Trying loop 53 as candidate
loop 53 is not innermost
loop is not parallel according to graphite
Trying loop 54 as candidate
loop 54 is innermost
loop is not parallel according to graphite
Trying loop 55 as candidate
loop 55 is not innermost
loop is not parallel according to graphite
Trying loop 56 as candidate
loop 56 is innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is innermost
loop is not parallel according to graphite
Trying loop 1 as candidate
loop 1 is not innermost
loop is not parallel according to graphite
Trying loop 4 as candidate
loop 4 is not innermost
loop is not parallel according to graphite
Trying loop 15 as candidate
loop 15 is innermost
loop is not parallel according to graphite
Trying loop 6 as candidate
loop 6 is innermost
loop is not parallel according to graphite
Trying loop 12 as candidate
loop 12 is innermost
loop is not parallel according to graphite
Trying loop 5 as candidate
loop 5 is innermost
loop is not parallel according to graphite
Trying loop 33 as candidate
loop 33 is innermost
loop is not parallel according to graphite
Trying loop 30 as candidate
loop 30 is innermost
loop is not parallel according to graphite
Trying loop 29 as candidate
loop 29 is innermost
loop is not parallel according to graphite
Trying loop 28 as candidate
loop 28 is innermost
loop is not parallel according to graphite
Trying loop 9 as candidate
loop 9 is innermost
loop is not parallel according to graphite
Trying loop 39 as candidate
loop 39 is innermost
loop is not parallel according to graphite
Trying loop 36 as candidate
loop 36 is innermost
loop is not parallel according to graphite
Trying loop 35 as candidate
loop 35 is innermost
loop is not parallel according to graphite
Trying loop 34 as candidate
loop 34 is innermost
loop is not parallel according to graphite
Trying loop 10 as candidate
loop 10 is innermost
loop is not parallel according to graphite
Trying loop 50 as candidate
loop 50 is innermost
loop is not parallel according to graphite
Trying loop 47 as candidate
loop 47 is innermost
loop is not parallel according to graphite
Trying loop 11 as candidate
loop 11 is innermost
loop is not parallel according to graphite
Trying loop 44 as candidate
loop 44 is innermost
loop is not parallel according to graphite
Trying loop 43 as candidate
loop 43 is innermost
loop is not parallel according to graphite
Trying loop 40 as candidate
loop 40 is innermost
loop is not parallel according to graphite
Trying loop 25 as candidate
loop 25 is innermost
loop is not parallel according to graphite
Trying loop 8 as candidate
loop 8 is innermost
loop is not parallel according to graphite
Trying loop 22 as candidate
loop 22 is innermost
loop is not parallel according to graphite
Trying loop 7 as candidate
loop 7 is innermost
loop is not parallel according to graphite
Trying loop 21 as candidate
loop 21 is innermost
loop is not parallel according to graphite
Trying loop 18 as candidate
loop 18 is innermost
loop is not parallel according to graphite
void AnyNet::readFile() (struct AnyNet * const this)
{
  int * __last;
  int * __first;
  struct basic_ostream & D.90691;
  struct __normal_iterator D.90687;
  const ptrdiff_t _Num;
  int * const __it;
  int * const __it;
  int * const __it;
  struct __normal_iterator __first;
  struct __normal_iterator __last;
  struct __normal_iterator __result;
  struct __normal_iterator __result;
  struct __normal_iterator D.90664;
  struct __normal_iterator D.90663;
  struct __normal_iterator D.90662;
  int * const __last$_M_current;
  int * const __first;
  int * const __last;
  int * __i$_M_current;
  struct __normal_iterator __first;
  struct __normal_iterator __last;
  struct _Iter_less_iter __comp;
  struct __normal_iterator D.90633;
  const ptrdiff_t _Num;
  int * const __it;
  int * const __it;
  int * const __it;
  struct __normal_iterator __first;
  struct __normal_iterator __last;
  struct __normal_iterator __result;
  struct __normal_iterator __result;
  struct __normal_iterator D.90610;
  struct __normal_iterator D.90609;
  struct __normal_iterator D.90608;
  int * const __last$_M_current;
  int * const __first;
  int * const __last;
  int * __i$_M_current;
  struct __normal_iterator __first;
  struct __normal_iterator __last;
  struct _Iter_less_iter __comp;
  int * const __first;
  int * const __last$_M_current;
  value_type __val;
  struct _Iter_less_iter D.90577;
  struct __normal_iterator D.90576;
  struct _Iter_less_iter D.90575;
  struct __normal_iterator __first;
  struct __normal_iterator __last;
  int * const __last;
  int * const __first;
  struct __normal_iterator __first;
  struct __normal_iterator __last;
  struct __normal_iterator D.90549;
  char_type D.90540;
  char __c;
  char_type D.90537;
  char __c;
  char_type D.90534;
  struct basic_ostream & D.90528;
  struct basic_ostream & D.90516;
  struct value_type D.90512;
  struct _Rb_tree_node * __y;
  struct iterator D.90511;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1566;
  struct mapped_type & D.90508;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct value_type D.90464;
  struct mapped_type D.90463;
  struct _Rb_tree_node * __y;
  struct iterator D.90462;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1625;
  struct mapped_type & D.90459;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct value_type D.90388;
  struct mapped_type D.90387;
  struct _Rb_tree_node * __y;
  struct iterator D.90386;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1625;
  struct mapped_type & D.90383;
  struct value_type D.90332;
  struct _Rb_tree_node * __y;
  struct iterator D.90331;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1566;
  struct mapped_type & D.90328;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct value_type D.90284;
  struct mapped_type D.90283;
  struct _Rb_tree_node * __y;
  struct iterator D.90282;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1625;
  struct mapped_type & D.90279;
  struct value_type D.90228;
  struct _Rb_tree_node * __y;
  struct iterator D.90227;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1566;
  struct mapped_type & D.90224;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct value_type D.90180;
  struct mapped_type D.90179;
  struct _Rb_tree_node * __y;
  struct iterator D.90178;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1625;
  struct mapped_type & D.90175;
  struct _Rb_tree_node_base * SR.1706;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct const_iterator __pos;
  struct iterator D.90122;
  struct _Rb_tree_node * __y;
  struct value_type D.90121;
  mapped_type & D.90120;
  struct _Rb_tree_node_base * SR.1706;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct const_iterator __pos;
  struct iterator D.90095;
  struct _Rb_tree_node * __y;
  struct value_type D.90094;
  mapped_type & D.90093;
  struct value_type D.90070;
  struct _Rb_tree_node * __y;
  struct iterator D.90069;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1566;
  struct mapped_type & D.90066;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct value_type D.90022;
  struct mapped_type D.90021;
  struct _Rb_tree_node * __y;
  struct iterator D.90020;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1625;
  struct mapped_type & D.90017;
  struct _Rb_tree_node_base * SR.1706;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct const_iterator __pos;
  struct iterator D.89964;
  struct _Rb_tree_node * __y;
  struct value_type D.89963;
  mapped_type & D.89962;
  struct _Rb_tree_node_base * SR.1706;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct const_iterator __pos;
  struct iterator D.89937;
  struct _Rb_tree_node * __y;
  struct value_type D.89936;
  mapped_type & D.89935;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct value_type D.89892;
  struct mapped_type D.89891;
  struct _Rb_tree_node * __y;
  struct iterator D.89890;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1625;
  struct mapped_type & D.89887;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct value_type D.89816;
  struct mapped_type D.89815;
  struct _Rb_tree_node * __y;
  struct iterator D.89814;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1625;
  struct mapped_type & D.89811;
  struct value_type D.89760;
  struct _Rb_tree_node * __y;
  struct iterator D.89759;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1566;
  struct mapped_type & D.89756;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct value_type D.89712;
  struct mapped_type D.89711;
  struct _Rb_tree_node * __y;
  struct iterator D.89710;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1625;
  struct mapped_type & D.89707;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct value_type D.89636;
  struct mapped_type D.89635;
  struct _Rb_tree_node * __y;
  struct iterator D.89634;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1625;
  struct mapped_type & D.89631;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct value_type D.89560;
  struct mapped_type D.89559;
  struct _Rb_tree_node * __y;
  struct iterator D.89558;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1625;
  struct mapped_type & D.89555;
  size_type __dnew;
  const char * __start;
  char_type D.89442;
  char __c;
  char_type D.89439;
  char __c;
  char_type D.89436;
  struct basic_istream & D.89430;
  struct _Rb_tree_node_base * const i$_M_node;
  struct __normal_iterator __first;
  struct __normal_iterator __last;
  const struct _Rb_tree_node * __y;
  const struct _Rb_tree_node * __y;
  const struct _Rb_tree_node * __y;
  const struct _Rb_tree_node * __y;
  const struct _Rb_tree_node * __y;
  const struct _Rb_tree_node * __y;
  const struct _Rb_tree_node * __y;
  size_t i;
  int body_id;
  ParseType body_type;
  ParseType head_type;
  int head_id;
  struct string temp;
  int next_pos;
  int pos;
  ParseState state;
  struct vector node_check;
  static const char __PRETTY_FUNCTION__[24] = "void AnyNet::readFile()";
  struct string line;
  struct ifstream network_list;
  struct map D.59349;
  struct map D.59348;
  struct map D.59344;
  struct map D.59327;
  struct basic_string D.59323;
  int (*__vtbl_ptr_type) () * _43;
  const int _47;
  const struct __ctype_type * _48;
  long unsigned int _54;
  int _56;
  long unsigned int _57;
  int _59;
  int _60;
  char * const _63;
  int _64;
  int _65;
  const size_type _66;
  char * const _67;
  struct basic_ostream & _74;
  char * const _80;
  long int _81;
  int _84;
  int _87;
  char * const _88;
  long unsigned int _89;
  int _95;
  const size_type _96;
  char * const _97;
  size_type _101;
  int _107;
  char * const _112;
  ParseType _114;
  bool _115;
  bool _116;
  bool _117;
  int _118;
  int _122;
  int __a.282_129;
  struct map * _135;
  mapped_type & _137;
  int _138;
  struct basic_ostream & _141;
  struct basic_ostream & _143;
  struct basic_ostream & _145;
  bool _147;
  bool _148;
  bool _149;
  struct basic_ostream & _150;
  int _154;
  int head_id.263_155;
  int head_id.263_159;
  char * const _161;
  struct map * _167;
  mapped_type & _169;
  int _170;
  struct basic_ostream & _173;
  struct basic_ostream & _175;
  struct basic_ostream & _177;
  bool _179;
  long int _180;
  bool _188;
  const size_type _194;
  long unsigned int _202;
  const size_type _203;
  char * const _204;
  const size_type _205;
  int * _210;
  char * const _214;
  long int _216;
  int _217;
  long int _219;
  const int * _220;
  int _226;
  long int _227;
  int _228;
  long unsigned int _229;
  char * const _233;
  int _234;
  char * const _238;
  const size_type _240;
  const iostate _241;
  struct map * _245;
  struct map * _247;
  struct map * _248;
  struct map * _250;
  struct map * _251;
  struct map * _252;
  struct map * _253;
  struct map * _254;
  struct map * _255;
  const int _260;
  bool _261;
  int _262;
  struct _Rep_type * _265;
  struct _Rb_tree_node_base * _266;
  const int _269;
  const int _275;
  struct _Rep_type * _281;
  struct _Rb_tree_node_base * _282;
  long unsigned int _283;
  struct map & _284;
  int _285;
  long int _286;
  char * const _287;
  struct basic_ostream & _288;
  const int _292;
  const int _296;
  struct _Rep_type * _301;
  struct _Rb_tree_node_base * _302;
  const int _305;
  int _306;
  const int _311;
  struct _Rep_type * _317;
  struct _Rb_tree_node_base * _318;
  long int _319;
  char * const _320;
  struct basic_ostream & _321;
  const int _324;
  const int _330;
  const int _336;
  ParseType _340;
  const int _342;
  const int _349;
  const int _355;
  long int _359;
  char * const _360;
  struct basic_ostream & _361;
  const size_type _362;
  long unsigned int _370;
  int & _371;
  char * const _372;
  struct _Rb_tree_node_base * _373;
  struct _Rb_tree_node_base * _374;
  struct _Rb_tree_node_base * _375;
  struct _Rb_tree_node_base * _376;
  long int pretmp_414;
  long int pretmp_415;
  long int pretmp_416;
  size_type pretmp_418;
  long int pretmp_434;
  long int pretmp_436;
  long int prephitmp_437;
  long int pretmp_438;
  struct map * pretmp_462;
  struct map * prephitmp_463;
  struct _Rb_tree_node_base * pretmp_464;
  struct _Rb_tree_node_base * prephitmp_465;
  int pretmp_466;
  int pretmp_482;
  int prephitmp_483;
  const struct __ctype_type * _507;
  int * const prephitmp_540;
  int * const pretmp_541;
  int * const prephitmp_542;
  int _560;
  struct __filebuf_type * _562;
  int (*__vtbl_ptr_type) () * _563;
  long int _564;
  sizetype _565;
  struct basic_ios * _566;
  int (*__vtbl_ptr_type) () * iftmp.274_568;
  long int _569;
  sizetype iftmp.275_570;
  struct basic_ios * _571;
  int (*__vtbl_ptr_type) () * iftmp.276_572;
  long int _573;
  sizetype iftmp.277_574;
  struct basic_ios * _575;
  long int _579;
  sizetype iftmp.279_580;
  struct basic_ios * _581;
  long int _582;
  sizetype _583;
  struct basic_ios * _584;
  const iostate _585;
  int __a.37_586;
  int _587;
  _Ios_Iostate _588;
  int (*__vtbl_ptr_type) () * _589;
  long int _590;
  sizetype _591;
  struct basic_ios * _592;
  char _596;
  char_type _599;
  int (*__vtbl_ptr_type) () * _604;
  int (*__vtbl_ptr_type) () _605;
  void * PROF_609;
  char_type _611;
  const size_type _614;
  char * const _615;
  long unsigned int _618;
  const char * _620;
  char * _626;
  long unsigned int __dnew.67_627;
  const char_type _629;
  char * _632;
  const int _636;
  const int _642;
  struct _Rep_type * _645;
  struct _Rb_tree_node_base * _647;
  struct _Rb_tree_node_base * _648;
  struct _Rb_tree_node_base * _651;
  struct _Rb_tree_node_base * _652;
  const int _666;
  const int _672;
  struct _Rep_type * _675;
  struct _Rb_tree_node_base * _677;
  struct _Rb_tree_node_base * _678;
  struct _Rb_tree_node_base * _681;
  struct _Rb_tree_node_base * _682;
  const int _696;
  const int _702;
  struct _Rep_type * _705;
  struct _Rb_tree_node_base * _707;
  struct _Rb_tree_node_base * _708;
  struct _Rb_tree_node_base * _711;
  struct _Rb_tree_node_base * _712;
  const int _726;
  const int _732;
  struct _Rep_type * _735;
  const int _743;
  const int _749;
  struct _Rep_type * _752;
  struct _Rb_tree_node_base * _754;
  struct _Rb_tree_node_base * _755;
  struct _Rb_tree_node_base * _758;
  struct _Rb_tree_node_base * _759;
  const int _773;
  const int _779;
  struct _Rep_type * _782;
  struct _Rb_tree_node_base * _784;
  struct _Rb_tree_node_base * _785;
  struct _Rb_tree_node_base * _788;
  struct _Rb_tree_node_base * _789;
  bool _802;
  const int _803;
  const int _809;
  struct _Rep_type * _812;
  const int _820;
  const int _826;
  struct _Rep_type * _829;
  const int _837;
  const int _843;
  struct _Rep_type * _846;
  struct _Rb_tree_node_base * _848;
  struct _Rb_tree_node_base * _849;
  struct _Rb_tree_node_base * _852;
  struct _Rb_tree_node_base * _853;
  const int _867;
  const int _873;
  struct _Rep_type * _876;
  const int _884;
  const int _890;
  struct _Rep_type * _893;
  const int _901;
  const int _907;
  struct _Rep_type * _910;
  const int _918;
  const int _924;
  struct _Rep_type * _927;
  struct _Rb_tree_node_base * _929;
  struct _Rb_tree_node_base * _930;
  struct _Rb_tree_node_base * _933;
  struct _Rb_tree_node_base * _934;
  const int _948;
  const int _954;
  struct _Rep_type * _957;
  const int _965;
  const int _971;
  struct _Rep_type * _974;
  struct _Rb_tree_node_base * _976;
  struct _Rb_tree_node_base * _977;
  struct _Rb_tree_node_base * _980;
  struct _Rb_tree_node_base * _981;
  const int _995;
  const int _1001;
  struct _Rep_type * _1004;
  const int _1012;
  bool _1017;
  const int _1018;
  struct _Rep_type * _1021;
  struct _Rb_tree_node_base * _1023;
  struct _Rb_tree_node_base * _1024;
  struct _Rb_tree_node_base * _1027;
  struct _Rb_tree_node_base * _1028;
  char * const _1033;
  const int _1042;
  const int _1048;
  struct _Rep_type * _1051;
  struct _Rb_tree_node_base * _1053;
  struct _Rb_tree_node_base * _1054;
  struct _Rb_tree_node_base * _1057;
  struct _Rb_tree_node_base * _1058;
  const int _1072;
  const int _1078;
  struct _Rep_type * _1081;
  int _1085;
  int (*__vtbl_ptr_type) () * _1095;
  long int _1096;
  sizetype _1097;
  struct basic_ios * _1098;
  struct basic_ostream & _1101;
  char _1103;
  char_type _1106;
  int (*__vtbl_ptr_type) () * _1111;
  int (*__vtbl_ptr_type) () _1112;
  void * PROF_1116;
  char_type _1118;
  int _1123;
  int * _1124;
  int _1131;
  long unsigned int _1132;
  long unsigned int _1133;
  long int _1134;
  long int _1135;
  int _1146;
  int _1154;
  int _1155;
  int _1159;
  long int __last.290_1166;
  long int _1168;
  long unsigned int _1170;
  int * _1172;
  int _1180;
  int _1181;
  int _1185;
  long int __last.290_1192;
  long int _1194;
  long unsigned int _1196;
  int * _1198;
  int (*__vtbl_ptr_type) () * iftmp.278_1213;
  long int _1214;
  sizetype iftmp.279_1215;
  struct basic_ios * _1216;
  int (*__vtbl_ptr_type) () * iftmp.280_1217;
  int (*__vtbl_ptr_type) () * iftmp.278_1220;
  long int _1221;
  sizetype iftmp.279_1222;
  struct basic_ios * _1223;
  int (*__vtbl_ptr_type) () * iftmp.280_1224;
  size_type pretmp_1335;
  size_type pretmp_1336;
  size_type pretmp_1337;
  size_type prephitmp_1338;
  long int pretmp_1390;
  long int pretmp_1391;
  long int pretmp_1392;
  long int pretmp_1393;
  long int pretmp_1394;
  long int pretmp_1395;
  long int pretmp_1398;
  long int pretmp_1399;
  long int pretmp_1402;
  int pretmp_1445;
  struct map * pretmp_1448;
  struct map * prephitmp_1449;
  int pretmp_1450;
  int prephitmp_1453;
  long int pretmp_1454;
  long int pretmp_1455;
  long int pretmp_1456;
  long int pretmp_1457;
  int pretmp_1507;
  int prephitmp_1508;
  int pretmp_1510;
  int prephitmp_1511;
  int pretmp_1512;
  int pretmp_1516;
  int pretmp_1518;
  int prephitmp_1519;
  int pretmp_1562;
  int prephitmp_1563;
  int pretmp_1564;
  int pretmp_1566;
  int pretmp_1570;
  struct _Rb_tree_node_base * pretmp_1572;
  struct _Rb_tree_node_base * prephitmp_1573;
  int * prephitmp_1630;
  int * pretmp_1631;
  int * prephitmp_1632;
  int * const pretmp_1634;
  int * const prephitmp_1637;
  int pretmp_1639;
  int pretmp_1640;
  int prephitmp_1641;
  int * const prephitmp_1652;
  size_type iftmp.285_1682;
  int * const pretmp_1691;
  int * const prephitmp_1692;
  int * const pretmp_1693;
  int * const pretmp_1694;
  int * const pretmp_1695;
  int * const pretmp_1696;
  const size_type _1715;
  bool _1744;
  long unsigned int _1746;
  int _1748;
  int * const pretmp_1763;
  int * const pretmp_1764;
  int * const pretmp_1765;
  unsigned int _1785;
  unsigned int _1786;
  long unsigned int _1793;
  bool _1802;
  long int prephitmp_1808;
  difference_type pretmp_1809;
  long unsigned int pretmp_1811;
  long unsigned int prephitmp_1812;
  size_type pretmp_1886;
  size_type prephitmp_1887;
  char * const pretmp_1890;
  char * const prephitmp_1891;
  int pretmp_1892;
  int pretmp_1893;
  int prephitmp_1894;
  unsigned long ivtmp_1899;
  unsigned long ivtmp_1905;
  struct _Rb_tree_node_base * _1928;
  int _1931;

  <bb 2>:
  # DEBUG this => &network_list
  # DEBUG D#14 => &network_list.D.49077
  # DEBUG this => D#14
  std::ios_base::ios_base (&MEM[(struct basic_ios *)&network_list + 256B].D.24721);
  MEM[(struct basic_ios *)&network_list + 256B].D.24721._vptr.ios_base = &MEM[(void *)&_ZTVSt9basic_iosIcSt11char_traitsIcEE + 16B];
  MEM[(struct basic_ios *)&network_list + 256B]._M_tie = 0B;
  MEM[(struct basic_ios *)&network_list + 256B]._M_fill = 0;
  MEM[(struct basic_ios *)&network_list + 256B]._M_fill_init = 0;
  MEM[(struct basic_ios *)&network_list + 256B]._M_streambuf = 0B;
  MEM[(struct basic_ios *)&network_list + 256B]._M_ctype = 0B;
  MEM[(struct basic_ios *)&network_list + 256B]._M_num_put = 0B;
  MEM[(struct basic_ios *)&network_list + 256B]._M_num_get = 0B;
  # DEBUG this => &network_list.D.49074
  # DEBUG __vtt_parm => &MEM[(void *)&_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE + 8B]
  iftmp.274_568 = MEM[(const void * *)&_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE + 8B];
  MEM[(struct basic_istream *)&network_list]._vptr.basic_istream = iftmp.274_568;
  _569 = MEM[(long int *)iftmp.274_568 + -24B];
  iftmp.275_570 = (sizetype) _569;
  _571 = &network_list.D.49074 + iftmp.275_570;
  iftmp.276_572 = MEM[(const void * *)&_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE + 16B];
  _571->D.24721._vptr.ios_base = iftmp.276_572;
  MEM[(struct basic_istream *)&network_list]._M_gcount = 0;
  _573 = MEM[(long int *)iftmp.274_568 + -24B];
  iftmp.277_574 = (sizetype) _573;
  _575 = &network_list.D.49074 + iftmp.277_574;
  std::basic_ios<char>::init (_575, 0B);

  <bb 3>:
  network_list.D.49074._vptr.basic_istream = &MEM[(void *)&_ZTVSt14basic_ifstreamIcSt11char_traitsIcEE + 24B];
  MEM[(struct basic_ios *)&network_list + 256B].D.24721._vptr.ios_base = &MEM[(void *)&_ZTVSt14basic_ifstreamIcSt11char_traitsIcEE + 64B];
  std::basic_filebuf<char>::basic_filebuf (&network_list._M_filebuf);

  <bb 4>:
  std::basic_ios<char>::init (&MEM[(void *)&network_list + 256B], &network_list._M_filebuf.D.48983);
  goto <bb 12>;

<L116>:
  std::basic_filebuf<char>::~basic_filebuf (&network_list._M_filebuf);
  resx 42

<L149>:
  goto <bb 8> (<L117>);

<L148>:

<L117>:
  # DEBUG this => &network_list.D.49074
  # DEBUG __vtt_parm => &MEM[(void *)&_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE + 8B]
  _579 = MEM[(long int *)iftmp.274_568 + -24B];
  iftmp.279_580 = (sizetype) _579;
  _581 = &network_list.D.49074 + iftmp.279_580;
  _581->D.24721._vptr.ios_base = iftmp.276_572;
  MEM[(struct  &)&network_list] ={v} {CLOBBER};
  resx 40

<L150>:
  goto <bb 11> (<L118>);

<L147>:

<L118>:
  # DEBUG D#13 => &network_list.D.49077
  # DEBUG this => D#13
  MEM[(struct basic_ios *)&network_list + 256B].D.24721._vptr.ios_base = &MEM[(void *)&_ZTVSt9basic_iosIcSt11char_traitsIcEE + 16B];
  std::ios_base::~ios_base (&MEM[(struct basic_ios *)&network_list + 256B].D.24721);
  resx 39

  <bb 12>:
  # DEBUG this => &line
  # DEBUG this => D#45
  # DEBUG D#44 => D#45
  # DEBUG this => D#44
  # DEBUG this => &line
  # DEBUG D#119 => &line._M_dataplus
  # DEBUG this => D#119
  # DEBUG __dat => &line.D.15209._M_local_buf
  # DEBUG __a => D#118
  # DEBUG D#117 => D#118
  # DEBUG D#115 => D#119
  # DEBUG D#116 => D#117
  # DEBUG this => D#115
  # DEBUG __a => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG this => D#113
  # DEBUG D.73458 => D#114
  MEM[(struct _Alloc_hider *)&line]._M_p = &line.D.15209._M_local_buf;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &line
  # DEBUG __n => 0
  # DEBUG D#4 => &line
  # DEBUG __length => 0
  # DEBUG this => D#4
  MEM[(size_type *)&line + 8B] = 0;
  # DEBUG D#1 => &line
  # DEBUG this => D#1
  # DEBUG __c1 => &line.D.15209._M_local_buf
  # DEBUG __c2 => D#23
  MEM[(char_type &)&line + 16] = 0;
  # DEBUG D#883 => &this_44(D)->file_name
  # DEBUG this => D#883
  _214 = MEM[(char * *)this_44(D) + 360B];
  # DEBUG D#1 => D#883
  # DEBUG this => D#1
  # DEBUG this => &network_list
  # DEBUG __s => _214
  # DEBUG __mode => 8
  # DEBUG __a => 8
  # DEBUG __b => 8
  _562 = std::basic_filebuf<char>::open (&network_list._M_filebuf, _214, 8);

  <bb 13>:
  if (_562 == 0B)
    goto <bb 14>;
  else
    goto <bb 18>;

  <bb 14>:
  # DEBUG D#26 => _214
  # DEBUG D#27 => 8
  # DEBUG this => &network_list
  # DEBUG D#28 => D#27
  # DEBUG __mode => D#28
  # DEBUG D#29 => D#26
  # DEBUG __s => D#29
  _43 = network_list.D.49074._vptr.basic_istream;
  _582 = MEM[(long int *)_43 + -24B];
  _583 = (sizetype) _582;
  _584 = &network_list + _583;
  # DEBUG this => _584
  # DEBUG __state => 4
  _585 = MEM[(_Ios_Iostate *)_584 + 32B];
  # DEBUG D#3 => _584
  # DEBUG this => D#3
  # DEBUG __a => _585
  # DEBUG __b => 4
  __a.37_586 = (int) _585;
  _587 = __a.37_586 | 4;
  _588 = (_Ios_Iostate) _587;
  std::basic_ios<char>::clear (_584, _588);
  goto <bb 16>;

<L152>:
  goto <bb 571> (<L109>);

  <bb 16>:
  # DEBUG this => &network_list
  # DEBUG D#17 => &network_list._M_filebuf
  # DEBUG this => D#17
  _188 = std::__basic_file<char>::is_open (&MEM[(const struct basic_filebuf *)&network_list + 16B]._M_file);
  if (_188 != 0)
    goto <bb 17>;
  else
    goto <bb 20>;

  <bb 17>:
  goto <bb 28>;

  <bb 18>:
  _563 = network_list.D.49074._vptr.basic_istream;
  _564 = MEM[(long int *)_563 + -24B];
  _565 = (sizetype) _564;
  _566 = &network_list + _565;
  std::basic_ios<char>::clear (_566, 0);
  goto <bb 16>;

<L153>:
  goto <bb 571> (<L109>);

  <bb 20>:
  # DEBUG D#905 => &this_44(D)->file_name
  # DEBUG __out => &cout
  # DEBUG __s => "Anynet:can\'t open network file "
  # DEBUG __s => "Anynet:can\'t open network file "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "Anynet:can\'t open network file ", 31);
  goto <bb 22>;

<L154>:
  goto <bb 571> (<L109>);

  <bb 22>:
  # DEBUG __os => &cout
  # DEBUG __str => D#905
  _240 = MEM[(long unsigned int *)this_44(D) + 368B];
  # DEBUG D#2 => D#905
  # DEBUG this => D#2
  _180 = (long int) _240;
  # DEBUG this => D#905
  _161 = MEM[(char * *)this_44(D) + 360B];
  # DEBUG D#1 => D#905
  # DEBUG this => D#1
  _150 = std::__ostream_insert<char, std::char_traits<char> > (&cout, _161, _180);
  goto <bb 24>;

<L155>:
  goto <bb 571> (<L109>);

  <bb 24>:
  # DEBUG this => _150
  # DEBUG __pf => endl
  std::endl<char, std::char_traits<char> > (_150);
  goto <bb 26>;

<L156>:
  goto <bb 571> (<L109>);

  <bb 26>:
  exit (-1);

  <bb 27>:

  <bb 28>:
  # DEBUG this => &network_list.D.49077
  _241 = MEM[(_Ios_Iostate *)&network_list + 288B];
  # DEBUG D#3 => &network_list.D.49077
  # DEBUG this => D#3
  # DEBUG __a => _241
  # DEBUG __b => 2
  __a.282_129 = (int) _241;
  _118 = __a.282_129 & 2;
  if (_118 == 0)
    goto <bb 29>;
  else
    goto <bb 467>;

  <bb 29>:
  # DEBUG __is => &network_list.D.49074
  # DEBUG __str => &line
  _589 = MEM[(struct basic_istream *)&network_list]._vptr.basic_istream;
  _590 = MEM[(long int *)_589 + -24B];
  _591 = (sizetype) _590;
  _592 = &network_list.D.49074 + _591;
  # DEBUG this => _592
  # DEBUG __c => 10
  _48 = MEM[(const struct basic_ios *)_592]._M_ctype;
  # DEBUG __f => _48
  if (_48 == 0B)
    goto <bb 30>;
  else
    goto <bb 32>;

  <bb 30>:
  std::__throw_bad_cast ();

<L157>:
  goto <bb 571> (<L109>);

  <bb 32>:
  # DEBUG this => _48
  # DEBUG __c => 10
  _596 = MEM[(const struct ctype *)_48]._M_widen_ok;
  if (_596 != 0)
    goto <bb 33>;
  else
    goto <bb 34>;

  <bb 33>:
  _599 = MEM[(const struct ctype *)_48]._M_widen[10];
  pretmp_1639 = (int) _599;
  goto <bb 40>;

  <bb 34>:
  # DEBUG this => _48
  # DEBUG __c => 10
  std::ctype<char>::_M_widen_init (_48);
  goto <bb 36>;

<L158>:
  goto <bb 571> (<L109>);

  <bb 36>:
  _604 = MEM[(const struct ctype *)_48].D.21685._vptr.facet;
  _605 = MEM[(int (*__vtbl_ptr_type) () *)_604 + 48B];
  PROF_609 = [obj_type_ref] OBJ_TYPE_REF(_605;(const struct ctype)_48->6);
  if (PROF_609 == do_widen)
    goto <bb 40>;
  else
    goto <bb 37>;

  <bb 37>:
  _611 = OBJ_TYPE_REF(_605;(const struct ctype)_48->6) (_48, 10);
  goto <bb 39>;

<L159>:
  goto <bb 571> (<L109>);

  <bb 39>:
  pretmp_1640 = (int) _611;

  <bb 40>:
  # prephitmp_1641 = PHI <pretmp_1639(33), 10(36), pretmp_1640(39)>
  std::getline<char, std::char_traits<char>, std::allocator<char> > (&network_list.D.49074, &line, prephitmp_1641);
  goto <bb 42>;

<L160>:
  goto <bb 571> (<L109>);

  <bb 42>:
  # DEBUG __lhs => &line
  # DEBUG __rhs => ""
  _107 = std::__cxx11::basic_string<char>::compare (&line, "");
  goto <bb 44>;

<L161>:
  goto <bb 571> (<L109>);

  <bb 44>:
  if (_107 == 0)
    goto <bb 466>;
  else
    goto <bb 45>;

  <bb 45>:
  # DEBUG state => 0
  # DEBUG pos => 0
  # DEBUG next_pos => -1
  # DEBUG this => &temp
  # DEBUG this => D#45
  # DEBUG D#44 => D#45
  # DEBUG this => D#44
  # DEBUG this => &temp
  # DEBUG D#119 => &temp._M_dataplus
  # DEBUG this => D#119
  # DEBUG __dat => &temp.D.15209._M_local_buf
  # DEBUG __a => D#118
  # DEBUG D#117 => D#118
  # DEBUG D#115 => D#119
  # DEBUG D#116 => D#117
  # DEBUG this => D#115
  # DEBUG __a => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG this => D#113
  # DEBUG D.73458 => D#114
  MEM[(struct _Alloc_hider *)&temp]._M_p = &temp.D.15209._M_local_buf;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &temp
  # DEBUG __n => 0
  # DEBUG D#4 => &temp
  # DEBUG __length => 0
  # DEBUG this => D#4
  MEM[(size_type *)&temp + 8B] = 0;
  # DEBUG D#1 => &temp
  # DEBUG this => D#1
  # DEBUG __c1 => &temp.D.15209._M_local_buf
  # DEBUG __c2 => D#23
  MEM[(char_type &)&temp + 16] = 0;
  head_id = -1;
  # DEBUG head_type => 2
  # DEBUG body_type => 2
  # DEBUG body_id => -1
  # DEBUG link_weight => 1

  <bb 46>:
  # state_1 = PHI <0(45), state_2(442)>
  # pos_3 = PHI <0(45), pos_62(442)>
  # head_type_4 = PHI <2(45), head_type_6(442)>
  # body_type_7 = PHI <2(45), body_type_9(442)>
  # body_id_213 = PHI <-1(45), body_id_51(442)>
  # DEBUG body_id => body_id_213
  # DEBUG body_type => body_type_7
  # DEBUG head_type => head_type_4
  # DEBUG pos => pos_3
  # DEBUG state => state_1
  _54 = (long unsigned int) pos_3;
  # DEBUG this => &line
  # DEBUG __s => " "
  # DEBUG __pos => _54
  # DEBUG __s => " "
  _101 = std::__cxx11::basic_string<char>::find (&line, " ", _54, 1);

  <bb 47>:
  next_pos_55 = (int) _101;
  # DEBUG next_pos => next_pos_55
  _56 = next_pos_55 - pos_3;
  _57 = (long unsigned int) _56;
  # DEBUG this => &line
  # DEBUG __pos => _54
  # DEBUG __n => _57
  # DEBUG this => &line
  # DEBUG __pos => _54
  # DEBUG __s => "basic_string::substr"
  _614 = MEM[(long unsigned int *)&line + 8B];
  # DEBUG D#2 => &line
  # DEBUG this => D#2
  if (_54 > _614)
    goto <bb 48>;
  else
    goto <bb 50>;

  <bb 48>:
  # _1746 = PHI <_54(47)>
  # _1715 = PHI <_614(47)>
  # DEBUG D#2 => &line
  # DEBUG this => D#2
  std::__throw_out_of_range_fmt ("%s: __pos (which is %zu) > this->size() (which is %zu)", "basic_string::substr", _1746, _1715);

<L163>:
  goto <bb 561> (<L105>);

  <bb 50>:
  # DEBUG this => &D.59323
  # DEBUG __str => &line
  # DEBUG __pos => _54
  # DEBUG __n => _57
  # DEBUG this => D#45
  # DEBUG D#44 => D#45
  # DEBUG this => D#44
  # DEBUG this => &D.59323
  # DEBUG D#304 => &D.59323._M_dataplus
  # DEBUG this => D#304
  # DEBUG __dat => &D.59323.D.15209._M_local_buf
  # DEBUG __a => D#118
  # DEBUG D#117 => D#118
  # DEBUG D#115 => D#304
  # DEBUG D#116 => D#117
  # DEBUG this => D#115
  # DEBUG __a => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG this => D#113
  # DEBUG D.73458 => D#114
  MEM[(struct _Alloc_hider *)&D.59323]._M_p = &D.59323.D.15209._M_local_buf;
  # DEBUG this => NULL
  # DEBUG this => NULL
  _615 = MEM[(char * *)&line];
  # DEBUG D#1 => &line
  # DEBUG this => D#1
  # DEBUG this => &line
  # DEBUG __pos => _54
  # DEBUG __s => "basic_string::basic_string"
  # DEBUG D#2 => &line
  # DEBUG this => D#2
  __start_617 = _615 + _54;
  # DEBUG __start => __start_617
  # DEBUG this => &line
  # DEBUG __pos => _54
  # DEBUG __off => _57
  # DEBUG D#2 => &line
  # DEBUG this => D#2
  _618 = _614 - _54;
  # DEBUG __testoff => _618 > _57
  iftmp.285_1682 = MIN_EXPR <_57, _618>;
  _620 = __start_617 + iftmp.285_1682;
  # DEBUG this => &D.59323
  # DEBUG __beg => __start_617
  # DEBUG __end => _620
  # DEBUG this => &D.59323
  # DEBUG __beg => __start_617
  # DEBUG __end => _620
  # DEBUG this => &D.59323
  # DEBUG __beg => __start_617
  # DEBUG __end => _620
  # DEBUG __ptr => __start_617
  _1802 = _620 != 0B;
  _261 = __start_617 == 0B;
  _1744 = _261 & _1802;
  if (_1744 != 0)
    goto <bb 575>;
  else
    goto <bb 577>;

  <bb 51>:
  _626 = std::__cxx11::basic_string<char>::_M_create (&D.59323, &__dnew, 0);
  goto <bb 53>;

<L164>:
  goto <bb 561> (<L105>);

  <bb 53>:
  # DEBUG D#9 => &D.59323
  # DEBUG __p => _626
  # DEBUG this => D#9
  MEM[(char * *)&D.59323] = _626;
  __dnew.67_627 = __dnew;
  # DEBUG D#10 => &D.59323
  # DEBUG __capacity => __dnew.67_627
  # DEBUG this => D#10
  MEM[(size_type *)&D.59323 + 16B] = __dnew.67_627;
  # DEBUG D#1 => &D.59323
  # DEBUG this => D#1
  # DEBUG __p => _626
  # DEBUG __k1 => __start_617
  # DEBUG __k2 => _620
  # DEBUG __d => _626
  # DEBUG __s => __start_617
  # DEBUG __n => iftmp.285_1682
  goto <bb 56>;

  <bb 54>:
  # DEBUG D#1 => &D.59323
  # DEBUG this => D#1
  # DEBUG __p => &D.59323.D.15209._M_local_buf
  # DEBUG __k1 => __start_617
  # DEBUG __k2 => _620
  # DEBUG __d => &D.59323.D.15209._M_local_buf
  # DEBUG __s => __start_617
  # DEBUG __n => iftmp.285_1682
  if (iftmp.285_1682 == 1)
    goto <bb 55>;
  else
    goto <bb 56>;

  <bb 55>:
  _629 = MEM[(const char_type &)__start_617];
  # DEBUG D#23 => __start_617
  # DEBUG __c1 => &D.59323.D.15209._M_local_buf
  # DEBUG __c2 => D#23
  MEM[(char_type &)&D.59323 + 16] = _629;
  goto <bb 57>;

  <bb 56>:
  # _1033 = PHI <&D.59323.D.15209._M_local_buf(54), _626(53)>
  # DEBUG D#1 => &D.59323
  # DEBUG this => D#1
  # DEBUG __p => _1033
  # DEBUG __k1 => __start_617
  # DEBUG __k2 => _620
  # DEBUG __d => _1033
  # DEBUG __s => __start_617
  # DEBUG __n => iftmp.285_1682
  # DEBUG __s1 => _1033
  # DEBUG __s2 => __start_617
  # DEBUG __n => iftmp.285_1682
  __builtin_memcpy (_1033, __start_617, iftmp.285_1682);
  pretmp_1886 = __dnew;
  pretmp_1890 = MEM[(char * *)&D.59323];

  <bb 57>:
  # prephitmp_1887 = PHI <iftmp.285_1682(55), pretmp_1886(56)>
  # prephitmp_1891 = PHI <&D.59323.D.15209._M_local_buf(55), pretmp_1890(56)>
  # DEBUG D#1298 => __dnew
  # DEBUG this => &D.59323
  # DEBUG __n => D#1298
  # DEBUG D#4 => &D.59323
  # DEBUG __length => D#1298
  # DEBUG this => D#4
  MEM[(size_type *)&D.59323 + 8B] = prephitmp_1887;
  # DEBUG D#1 => &D.59323
  # DEBUG this => D#1
  _632 = prephitmp_1891 + prephitmp_1887;
  # DEBUG __c1 => _632
  # DEBUG __c2 => D#23
  MEM[(char_type &)_632] = 0;
  __dnew ={v} {CLOBBER};
  # DEBUG this => &temp
  # DEBUG __str => &D.59323
  # DEBUG this => &temp
  # DEBUG __str => &D.59323
  std::__cxx11::basic_string<char>::_M_assign (&temp, &D.59323);

  <bb 58>:
  # DEBUG this => &D.59323
  # DEBUG this => &D.59323
  # DEBUG this => &D.59323
  _63 = MEM[(char * *)&D.59323];
  # DEBUG D#1 => &D.59323
  # DEBUG this => D#1
  # DEBUG this => &D.59323
  if (&D.59323.D.15209._M_local_buf != _63)
    goto <bb 59>;
  else
    goto <bb 60>;

  <bb 59>:
  # DEBUG D#153 => D.59323.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.59323
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.59323
  # DEBUG this => D#1
  # DEBUG this => &D.59323
  # DEBUG D#150 => &D.59323._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _63
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _63
  # DEBUG this => D#144
  # DEBUG D.83229 => D#145
  operator delete (_63);

  <bb 60>:
  # DEBUG D#154 => &D.59323._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.59323 ={v} {CLOBBER};
  pos_62 = next_pos_55 + 1;
  # DEBUG pos => pos_62
  # DEBUG __lhs => &temp
  # DEBUG __rhs => ""
  _59 = std::__cxx11::basic_string<char>::compare (&temp, "");
  goto <bb 62>;

<L165>:
  goto <bb 561> (<L105>);

  <bb 62>:
  if (_59 == 0)
    goto <bb 579>;
  else
    goto <bb 63>;

  <bb 63>:
  # DEBUG __lhs => &temp
  # DEBUG __rhs => " "
  _60 = std::__cxx11::basic_string<char>::compare (&temp, " ");
  goto <bb 65>;

<L166>:
  goto <bb 561> (<L105>);

  <bb 65>:
  if (_60 == 0)
    goto <bb 579>;
  else
    goto <bb 578>;

<L112>:
  # DEBUG __lhs => &temp
  # DEBUG __rhs => "router"
  _64 = std::__cxx11::basic_string<char>::compare (&temp, "router");
  goto <bb 68>;

<L167>:
  goto <bb 561> (<L105>);

  <bb 68>:
  if (_64 == 0)
    goto <bb 441>;
  else
    goto <bb 69>;

  <bb 69>:
  # DEBUG __lhs => &temp
  # DEBUG __rhs => "node"
  _65 = std::__cxx11::basic_string<char>::compare (&temp, "node");
  goto <bb 71>;

<L168>:
  goto <bb 561> (<L105>);

  <bb 71>:
  if (_65 == 0)
    goto <bb 441>;
  else
    goto <bb 72>;

  <bb 72>:
  # DEBUG __out => &cout
  # DEBUG __s => "Anynet:Unknow head of line type "
  # DEBUG __s => "Anynet:Unknow head of line type "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "Anynet:Unknow head of line type ", 32);
  goto <bb 74>;

<L169>:
  goto <bb 561> (<L105>);

  <bb 74>:
  # DEBUG __os => &cout
  # DEBUG __str => &temp
  _66 = MEM[(long unsigned int *)&temp + 8B];
  # DEBUG D#2 => &temp
  # DEBUG this => D#2
  _81 = (long int) _66;
  # DEBUG this => &temp
  _80 = MEM[(char * *)&temp];
  # DEBUG D#1 => &temp
  # DEBUG this => D#1
  _74 = std::__ostream_insert<char, std::char_traits<char> > (&cout, _80, _81);
  goto <bb 76>;

<L170>:
  goto <bb 561> (<L105>);

  <bb 76>:
  std::operator<< <std::char_traits<char> > (_74, "\n");
  goto <bb 78>;

<L171>:
  goto <bb 561> (<L105>);

  <bb 78>:
  __assert_fail ("false", "networks/anynet.cpp", 381, &__PRETTY_FUNCTION__);

<L113>:
  # DEBUG this => &temp
  _67 = MEM[(char * *)&temp];
  # DEBUG D#1 => &temp
  # DEBUG this => D#1
  # DEBUG __nptr => _67
  _227 = strtol (_67, 0B, 10);
  _226 = (int) _227;
  head_id = _226;
  # DEBUG D#884 => &this_44(D)->router_list
  _245 = MEM[(struct map * *)this_44(D) + 440B];
  # DEBUG D#34 => D#884
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => NULL
  # DEBUG __x => &head_id
  # DEBUG this => D#324
  __i$_M_node_73 = &MEM[(const struct _Rb_tree *)_245]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_73
  # DEBUG this => D#325
  # DEBUG __k => &head_id
  # DEBUG this => D#325
  __i$_M_node_72 = MEM[(struct _Rb_tree_node_base * *)_245 + 16B];
  # DEBUG D#68 => D#325
  # DEBUG this => D#68
  # DEBUG D#315 => D#325
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &head_id
  # DEBUG __y => __i$_M_node_73
  # DEBUG __x => __i$_M_node_72
  if (__i$_M_node_72 == 0B)
    goto <bb 580>;
  else
    goto <bb 82>;

  <bb 80>:
  # __i$_M_node_653 = PHI <__i$_M_node_258(85), __i$_M_node_45(84)>
  # __i$_M_node_5 = PHI <__i$_M_node_1252(85), __i$_M_node_633(84)>
  # DEBUG __y => __i$_M_node_5
  # DEBUG __x => __i$_M_node_653
  if (__i$_M_node_653 == 0B)
    goto <bb 86>;
  else
    goto <bb 81>;

  <bb 81>:
  goto <bb 83>;

  <bb 82>:

  <bb 83>:
  # __i$_M_node_633 = PHI <__i$_M_node_72(82), __i$_M_node_653(81)>
  # __i$_M_node_1252 = PHI <__i$_M_node_73(82), __i$_M_node_5(81)>
  # DEBUG __y => __i$_M_node_1252
  # DEBUG __x => __i$_M_node_633
  # DEBUG __x => __i$_M_node_633
  # DEBUG __x => __i$_M_node_633
  # DEBUG this => __i$_M_node_633
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_633]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#312 => &MEM[(const struct pair &)__i$_M_node_633 + 32].first
  # DEBUG D#313 => &D#314->_M_impl._M_key_compare
  # DEBUG D#52 => D#313
  _47 = MEM[(const int &)__i$_M_node_633 + 32];
  # DEBUG D#53 => D#312
  # DEBUG D#54 => &head_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_47 >= _226)
    goto <bb 84>;
  else
    goto <bb 85>;

  <bb 84>:
  # DEBUG __y => __i$_M_node_633
  __i$_M_node_45 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_633 + 16B];
  # DEBUG D#134 => __i$_M_node_633
  # DEBUG __x => D#134
  # DEBUG __x => NULL
  goto <bb 80>;

  <bb 85>:
  __i$_M_node_258 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_633 + 24B];
  # DEBUG D#135 => __i$_M_node_633
  # DEBUG __x => D#135
  # DEBUG __x => NULL
  goto <bb 80>;

  <bb 86>:
  # __i$_M_node_1754 = PHI <__i$_M_node_5(80)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1754
  # DEBUG __j$_M_node => __i$_M_node_1754
  # DEBUG this => D#325
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_73
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (__i$_M_node_1754 == __i$_M_node_73)
    goto <bb 580>;
  else
    goto <bb 87>;

  <bb 87>:
  # DEBUG __x => __i$_M_node_1754
  # DEBUG __x => __i$_M_node_1754
  # DEBUG this => __i$_M_node_1754
  # DEBUG D#316 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1754]._M_value_field
  # DEBUG __r => D#316
  # DEBUG __x => D#316
  # DEBUG this => D#123
  # DEBUG D#321 => &MEM[(const struct pair &)__i$_M_node_1754 + 32].first
  # DEBUG D#323 => &MEM[(const struct _Rb_tree *)D#325]._M_impl._M_key_compare
  # DEBUG D#52 => D#323
  # DEBUG D#53 => &head_id
  _260 = MEM[(const int &)__i$_M_node_1754 + 32];
  # DEBUG D#54 => D#321
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  # DEBUG D#322 => {CLOBBER}
  # DEBUG __j$_M_node => D#322
  # DEBUG this => NULL
  # DEBUG __x => NULL
  if (_226 < _260)
    goto <bb 580>;
  else
    goto <bb 102>;

  <bb 88>:
  # __i$_M_node_264 = PHI <__i$_M_node_638(92), __i$_M_node_639(93)>
  # __i$_M_node_654 = PHI <__i$_M_node_1958(92), __i$_M_node_1959(93)>
  # DEBUG __y => __i$_M_node_654
  # DEBUG __x => __i$_M_node_264
  if (__i$_M_node_264 == 0B)
    goto <bb 94>;
  else
    goto <bb 89>;

  <bb 89>:
  goto <bb 91>;

  <bb 90>:

  <bb 91>:
  # __i$_M_node_1958 = PHI <__i$_M_node_634(90), __i$_M_node_264(89)>
  # __i$_M_node_1959 = PHI <__i$_M_node_73(90), __i$_M_node_654(89)>
  # DEBUG __y => __i$_M_node_1959
  # DEBUG __x => __i$_M_node_1958
  # DEBUG __x => __i$_M_node_1958
  # DEBUG __x => __i$_M_node_1958
  # DEBUG this => __i$_M_node_1958
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1958]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__i$_M_node_1958 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _636 = MEM[(const int &)__i$_M_node_1958 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => &head_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_226 <= _636)
    goto <bb 92>;
  else
    goto <bb 93>;

  <bb 92>:
  # DEBUG __y => __i$_M_node_1958
  __i$_M_node_638 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1958 + 16B];
  # DEBUG D#66 => __i$_M_node_1958
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 88>;

  <bb 93>:
  __i$_M_node_639 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1958 + 24B];
  # DEBUG D#65 => __i$_M_node_1958
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 88>;

  <bb 94>:
  # __i$_M_node_1714 = PHI <__i$_M_node_654(88)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1714
  # DEBUG __i$_M_node => __i$_M_node_1714
  # DEBUG this => _245
  # DEBUG D#72 => &_245->_M_t
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_73
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_73 == __i$_M_node_1714)
    goto <bb 581>;
  else
    goto <bb 95>;

  <bb 95>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1714
  # DEBUG D#751 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1714]._M_value_field
  # DEBUG __r => D#751
  # DEBUG D#752 => &MEM[(struct pair &)__i$_M_node_1714 + 32].first
  # DEBUG D#105 => _245
  # DEBUG this => D#105
  # DEBUG D#104 => D#105
  # DEBUG D#103 => &D#104->_M_t
  # DEBUG D#102 => D#103
  # DEBUG this => D#102
  # DEBUG D#53 => &head_id
  _642 = MEM[(const int &)__i$_M_node_1714 + 32];
  # DEBUG D#54 => D#752
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_226 < _642)
    goto <bb 581>;
  else
    goto <bb 97>;

  <bb 96>:
  __i$_M_node_646 = MEM[(struct _Rb_tree_iterator *)&D.89558];
  # DEBUG __i$_M_node => __i$_M_node_646
  # DEBUG this => &D.89560
  # DEBUG D#537 => &D.89560.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.89560 + 8B]._M_t
  _647 = MEM[(struct _Rb_tree_node_base * *)&D.89560 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.89560 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.89560 + 8B]._M_t, _647);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.89560 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.89560 ={v} {CLOBBER};
  # DEBUG this => &D.89559
  # DEBUG this => &D.89559._M_t
  _648 = MEM[(struct _Rb_tree_node_base * *)&D.89559 + 16B];
  # DEBUG D#58 => &D.89559._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.89559._M_t, _648);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.89559]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.89559 ={v} {CLOBBER};

  <bb 97>:
  # __i$_M_node_649 = PHI <__i$_M_node_1714(95), __i$_M_node_646(96)>
  # DEBUG __i$_M_node => __i$_M_node_649
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_649
  # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_649]._M_value_field
  # DEBUG __r => D#753
  # DEBUG D#755 => {CLOBBER}
  # DEBUG __i$_M_node => D#755
  # DEBUG this => NULL
  # DEBUG __x => &D.59327
  _265 = &MEM[(struct map *)__i$_M_node_649 + 40B]._M_t;
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::operator= (_265, &D.59327._M_t);
  goto <bb 101>;

<L119>:
  # DEBUG this => &D.89560
  # DEBUG D#537 => &D.89560.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.89560 + 8B]._M_t
  _651 = MEM[(struct _Rb_tree_node_base * *)&D.89560 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.89560 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.89560 + 8B]._M_t, _651);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.89560 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.89560 ={v} {CLOBBER};
  resx 44

<L120>:
  # DEBUG this => &D.89559
  # DEBUG this => &D.89559._M_t
  _652 = MEM[(struct _Rb_tree_node_base * *)&D.89559 + 16B];
  # DEBUG D#58 => &D.89559._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.89559._M_t, _652);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.89559]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.89559 ={v} {CLOBBER};
  resx 43

<L173>:
  goto <bb 549> (<L101>);

  <bb 101>:
  # DEBUG this => &D.59327
  # DEBUG this => &D.59327._M_t
  _266 = MEM[(struct _Rb_tree_node_base * *)&D.59327 + 16B];
  # DEBUG D#58 => &D.59327._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.59327._M_t, _266);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.59327]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.59327 ={v} {CLOBBER};
  pretmp_1448 = MEM[(struct map * *)this_44(D) + 440B];
  pretmp_1450 = head_id;

  <bb 102>:
  # prephitmp_1449 = PHI <_245(87), pretmp_1448(101)>
  # prephitmp_1453 = PHI <_226(87), pretmp_1450(101)>
  # DEBUG D#886 => &this_44(D)->router_list
  # DEBUG D#1297 => MEM[(struct map * *)this_44(D) + 440B]
  # DEBUG D#34 => D#886
  # DEBUG __n => 1
  # DEBUG this => D#34
  # DEBUG this => NULL
  # DEBUG __x => &head_id
  # DEBUG this => D#324
  __i$_M_node_77 = &MEM[(const struct _Rb_tree *)prephitmp_1449 + 48B]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_77
  # DEBUG this => D#325
  # DEBUG __k => &head_id
  # DEBUG this => D#325
  __i$_M_node_267 = MEM[(struct _Rb_tree_node_base * *)prephitmp_1449 + 64B];
  # DEBUG D#68 => D#325
  # DEBUG this => D#68
  # DEBUG D#315 => D#325
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &head_id
  # DEBUG __y => __i$_M_node_77
  # DEBUG __x => __i$_M_node_267
  if (__i$_M_node_267 == 0B)
    goto <bb 582>;
  else
    goto <bb 105>;

  <bb 103>:
  # __i$_M_node_607 = PHI <__i$_M_node_272(108), __i$_M_node_271(107)>
  # __i$_M_node_263 = PHI <__i$_M_node_29(108), __i$_M_node_1244(107)>
  # DEBUG __y => __i$_M_node_263
  # DEBUG __x => __i$_M_node_607
  if (__i$_M_node_607 == 0B)
    goto <bb 109>;
  else
    goto <bb 104>;

  <bb 104>:
  goto <bb 106>;

  <bb 105>:

  <bb 106>:
  # __i$_M_node_1244 = PHI <__i$_M_node_267(105), __i$_M_node_607(104)>
  # __i$_M_node_29 = PHI <__i$_M_node_77(105), __i$_M_node_263(104)>
  # DEBUG __y => __i$_M_node_29
  # DEBUG __x => __i$_M_node_1244
  # DEBUG __x => __i$_M_node_1244
  # DEBUG __x => __i$_M_node_1244
  # DEBUG this => __i$_M_node_1244
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1244]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#312 => &MEM[(const struct pair &)__i$_M_node_1244 + 32].first
  # DEBUG D#313 => &D#314->_M_impl._M_key_compare
  # DEBUG D#52 => D#313
  _269 = MEM[(const int &)__i$_M_node_1244 + 32];
  # DEBUG D#53 => D#312
  # DEBUG D#54 => &head_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_269 >= prephitmp_1453)
    goto <bb 107>;
  else
    goto <bb 108>;

  <bb 107>:
  # DEBUG __y => __i$_M_node_1244
  __i$_M_node_271 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1244 + 16B];
  # DEBUG D#134 => __i$_M_node_1244
  # DEBUG __x => D#134
  # DEBUG __x => NULL
  goto <bb 103>;

  <bb 108>:
  __i$_M_node_272 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1244 + 24B];
  # DEBUG D#135 => __i$_M_node_1244
  # DEBUG __x => D#135
  # DEBUG __x => NULL
  goto <bb 103>;

  <bb 109>:
  # __i$_M_node_1738 = PHI <__i$_M_node_263(103)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1738
  # DEBUG __j$_M_node => __i$_M_node_1738
  # DEBUG this => D#325
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_77
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (__i$_M_node_77 == __i$_M_node_1738)
    goto <bb 582>;
  else
    goto <bb 110>;

  <bb 110>:
  # DEBUG __x => __i$_M_node_1738
  # DEBUG __x => __i$_M_node_1738
  # DEBUG this => __i$_M_node_1738
  # DEBUG D#316 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1738]._M_value_field
  # DEBUG __r => D#316
  # DEBUG __x => D#316
  # DEBUG this => D#123
  # DEBUG D#321 => &MEM[(const struct pair &)__i$_M_node_1738 + 32].first
  # DEBUG D#323 => &MEM[(const struct _Rb_tree *)D#325]._M_impl._M_key_compare
  # DEBUG D#52 => D#323
  # DEBUG D#53 => &head_id
  _275 = MEM[(const int &)__i$_M_node_1738 + 32];
  # DEBUG D#54 => D#321
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  # DEBUG D#322 => {CLOBBER}
  # DEBUG __j$_M_node => D#322
  # DEBUG this => NULL
  # DEBUG __x => NULL
  if (_275 > prephitmp_1453)
    goto <bb 582>;
  else
    goto <bb 441>;

  <bb 111>:
  # __i$_M_node_17 = PHI <__i$_M_node_668(115), __i$_M_node_669(116)>
  # __i$_M_node_1206 = PHI <__i$_M_node_1961(115), __i$_M_node_1946(116)>
  # DEBUG __y => __i$_M_node_1206
  # DEBUG __x => __i$_M_node_17
  if (__i$_M_node_17 == 0B)
    goto <bb 117>;
  else
    goto <bb 112>;

  <bb 112>:
  goto <bb 114>;

  <bb 113>:

  <bb 114>:
  # __i$_M_node_1961 = PHI <__i$_M_node_267(113), __i$_M_node_17(112)>
  # __i$_M_node_1946 = PHI <__i$_M_node_77(113), __i$_M_node_1206(112)>
  # DEBUG __y => __i$_M_node_1946
  # DEBUG __x => __i$_M_node_1961
  # DEBUG __x => __i$_M_node_1961
  # DEBUG __x => __i$_M_node_1961
  # DEBUG this => __i$_M_node_1961
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1961]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__i$_M_node_1961 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _666 = MEM[(const int &)__i$_M_node_1961 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => &head_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_666 >= prephitmp_1453)
    goto <bb 115>;
  else
    goto <bb 116>;

  <bb 115>:
  # DEBUG __y => __i$_M_node_1961
  __i$_M_node_668 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1961 + 16B];
  # DEBUG D#66 => __i$_M_node_1961
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 111>;

  <bb 116>:
  __i$_M_node_669 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1961 + 24B];
  # DEBUG D#65 => __i$_M_node_1961
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 111>;

  <bb 117>:
  # __i$_M_node_1653 = PHI <__i$_M_node_1206(111)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1653
  # DEBUG __i$_M_node => __i$_M_node_1653
  # DEBUG this => D#1276
  # DEBUG D#72 => &D#1276->_M_t
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_77
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_77 == __i$_M_node_1653)
    goto <bb 583>;
  else
    goto <bb 118>;

  <bb 118>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1653
  # DEBUG D#751 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1653]._M_value_field
  # DEBUG __r => D#751
  # DEBUG D#752 => &MEM[(struct pair &)__i$_M_node_1653 + 32].first
  # DEBUG D#105 => D#1276
  # DEBUG this => D#105
  # DEBUG D#104 => D#105
  # DEBUG D#103 => &D#104->_M_t
  # DEBUG D#102 => D#103
  # DEBUG this => D#102
  # DEBUG D#53 => &head_id
  _672 = MEM[(const int &)__i$_M_node_1653 + 32];
  # DEBUG D#54 => D#752
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_672 > prephitmp_1453)
    goto <bb 583>;
  else
    goto <bb 120>;

  <bb 119>:
  __i$_M_node_676 = MEM[(struct _Rb_tree_iterator *)&D.89634];
  # DEBUG __i$_M_node => __i$_M_node_676
  # DEBUG this => &D.89636
  # DEBUG D#537 => &D.89636.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.89636 + 8B]._M_t
  _677 = MEM[(struct _Rb_tree_node_base * *)&D.89636 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.89636 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.89636 + 8B]._M_t, _677);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.89636 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.89636 ={v} {CLOBBER};
  # DEBUG this => &D.89635
  # DEBUG this => &D.89635._M_t
  _678 = MEM[(struct _Rb_tree_node_base * *)&D.89635 + 16B];
  # DEBUG D#58 => &D.89635._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.89635._M_t, _678);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.89635]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.89635 ={v} {CLOBBER};

  <bb 120>:
  # __i$_M_node_679 = PHI <__i$_M_node_1653(118), __i$_M_node_676(119)>
  # DEBUG __i$_M_node => __i$_M_node_679
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_679
  # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_679]._M_value_field
  # DEBUG __r => D#753
  # DEBUG D#755 => {CLOBBER}
  # DEBUG __i$_M_node => D#755
  # DEBUG this => NULL
  # DEBUG __x => &D.59344
  _281 = &MEM[(struct map *)__i$_M_node_679 + 40B]._M_t;
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::operator= (_281, &D.59344._M_t);
  goto <bb 124>;

<L121>:
  # DEBUG this => &D.89636
  # DEBUG D#537 => &D.89636.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.89636 + 8B]._M_t
  _681 = MEM[(struct _Rb_tree_node_base * *)&D.89636 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.89636 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.89636 + 8B]._M_t, _681);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.89636 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.89636 ={v} {CLOBBER};
  resx 46

<L122>:
  # DEBUG this => &D.89635
  # DEBUG this => &D.89635._M_t
  _682 = MEM[(struct _Rb_tree_node_base * *)&D.89635 + 16B];
  # DEBUG D#58 => &D.89635._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.89635._M_t, _682);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.89635]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.89635 ={v} {CLOBBER};
  resx 45

<L175>:
  goto <bb 552> (<L102>);

  <bb 124>:
  # DEBUG this => &D.59344
  # DEBUG this => &D.59344._M_t
  _282 = MEM[(struct _Rb_tree_node_base * *)&D.59344 + 16B];
  # DEBUG D#58 => &D.59344._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.59344._M_t, _282);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.59344]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.59344 ={v} {CLOBBER};
  goto <bb 441>;

<L114>:
  # DEBUG __lhs => &temp
  # DEBUG __rhs => "router"
  _84 = std::__cxx11::basic_string<char>::compare (&temp, "router");
  goto <bb 127>;

<L176>:
  goto <bb 561> (<L105>);

  <bb 127>:
  if (_84 == 0)
    goto <bb 584>;
  else
    goto <bb 128>;

  <bb 128>:
  # DEBUG __lhs => &temp
  # DEBUG __rhs => "node"
  _87 = std::__cxx11::basic_string<char>::compare (&temp, "node");
  goto <bb 130>;

<L177>:
  goto <bb 561> (<L105>);

  <bb 130>:
  if (_87 == 0)
    goto <bb 584>;
  else
    goto <bb 585>;

  <bb 131>:
  # __i$_M_node_25 = PHI <__i$_M_node_698(134), __i$_M_node_699(135)>
  # __i$_M_node_1060 = PHI <__i$_M_node_1948(134), __i$_M_node_1949(135)>
  # DEBUG __y => __i$_M_node_1060
  # DEBUG __x => __i$_M_node_25
  if (__i$_M_node_25 == 0B)
    goto <bb 136>;
  else
    goto <bb 132>;

  <bb 132>:

  <bb 133>:
  # __i$_M_node_1948 = PHI <__i$_M_node_694(586), __i$_M_node_25(132)>
  # __i$_M_node_1949 = PHI <__i$_M_node_693(586), __i$_M_node_1060(132)>
  # DEBUG __y => __i$_M_node_1949
  # DEBUG __x => __i$_M_node_1948
  # DEBUG __x => __i$_M_node_1948
  # DEBUG __x => __i$_M_node_1948
  # DEBUG this => __i$_M_node_1948
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1948]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__i$_M_node_1948 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _696 = MEM[(const int &)__i$_M_node_1948 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => &head_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_696 >= pretmp_1445)
    goto <bb 134>;
  else
    goto <bb 135>;

  <bb 134>:
  # DEBUG __y => __i$_M_node_1948
  __i$_M_node_698 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1948 + 16B];
  # DEBUG D#66 => __i$_M_node_1948
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 131>;

  <bb 135>:
  __i$_M_node_699 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1948 + 24B];
  # DEBUG D#65 => __i$_M_node_1948
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 131>;

  <bb 136>:
  # __i$_M_node_1654 = PHI <__i$_M_node_1060(131)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1654
  # DEBUG __i$_M_node => __i$_M_node_1654
  # DEBUG this => _284
  # DEBUG D#72 => &_284->_M_t
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_693
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_693 == __i$_M_node_1654)
    goto <bb 588>;
  else
    goto <bb 137>;

  <bb 137>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1654
  # DEBUG D#751 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1654]._M_value_field
  # DEBUG __r => D#751
  # DEBUG D#752 => &MEM[(struct pair &)__i$_M_node_1654 + 32].first
  # DEBUG D#105 => _284
  # DEBUG this => D#105
  # DEBUG D#104 => D#105
  # DEBUG D#103 => &D#104->_M_t
  # DEBUG D#102 => D#103
  # DEBUG this => D#102
  # DEBUG D#53 => &head_id
  _702 = MEM[(const int &)__i$_M_node_1654 + 32];
  # DEBUG D#54 => D#752
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_702 > pretmp_1445)
    goto <bb 588>;
  else
    goto <bb 139>;

  <bb 138>:
  __i$_M_node_706 = MEM[(struct _Rb_tree_iterator *)&D.89710];
  # DEBUG __i$_M_node => __i$_M_node_706
  # DEBUG this => &D.89712
  # DEBUG D#537 => &D.89712.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.89712 + 8B]._M_t
  _707 = MEM[(struct _Rb_tree_node_base * *)&D.89712 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.89712 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.89712 + 8B]._M_t, _707);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.89712 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.89712 ={v} {CLOBBER};
  # DEBUG this => &D.89711
  # DEBUG this => &D.89711._M_t
  _708 = MEM[(struct _Rb_tree_node_base * *)&D.89711 + 16B];
  # DEBUG D#58 => &D.89711._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.89711._M_t, _708);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.89711]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.89711 ={v} {CLOBBER};

  <bb 139>:
  # __i$_M_node_709 = PHI <__i$_M_node_1654(137), __i$_M_node_706(138)>
  # DEBUG __i$_M_node => __i$_M_node_709
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_709
  # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_709]._M_value_field
  # DEBUG __r => D#753
  # DEBUG D#1277 => &MEM[(struct pair &)__i$_M_node_709 + 32].second
  # DEBUG D#755 => {CLOBBER}
  # DEBUG __i$_M_node => D#755
  # DEBUG this => D#1277
  # DEBUG __k => &body_id
  # DEBUG this => D#1277
  # DEBUG __x => &body_id
  # DEBUG D#396 => &D#1277->_M_t
  # DEBUG this => D#396
  # DEBUG __k => &body_id
  # DEBUG this => D#396
  __i$_M_node_723 = &MEM[(struct _Rb_tree *)__i$_M_node_709 + 40B]._M_impl._M_header;
  __i$_M_node_724 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_709 + 56B];
  # DEBUG D#58 => D#396
  # DEBUG this => D#58
  # DEBUG D#395 => D#396
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &body_id
  # DEBUG __y => __i$_M_node_723
  # DEBUG __x => __i$_M_node_724
  if (__i$_M_node_724 == 0B)
    goto <bb 589>;
  else
    goto <bb 145>;

<L123>:
  # DEBUG this => &D.89712
  # DEBUG D#537 => &D.89712.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.89712 + 8B]._M_t
  _711 = MEM[(struct _Rb_tree_node_base * *)&D.89712 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.89712 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.89712 + 8B]._M_t, _711);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.89712 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.89712 ={v} {CLOBBER};
  resx 48

<L124>:
  # DEBUG this => &D.89711
  # DEBUG this => &D.89711._M_t
  _712 = MEM[(struct _Rb_tree_node_base * *)&D.89711 + 16B];
  # DEBUG D#58 => &D.89711._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.89711._M_t, _712);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.89711]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.89711 ={v} {CLOBBER};
  resx 47

<L178>:
  goto <bb 561> (<L105>);

  <bb 143>:
  # __i$_M_node_1029 = PHI <__i$_M_node_728(147), __i$_M_node_729(148)>
  # __i$_M_node_8 = PHI <__i$_M_node_1951(147), __i$_M_node_1199(148)>
  # DEBUG __y => __i$_M_node_8
  # DEBUG __x => __i$_M_node_1029
  if (__i$_M_node_1029 == 0B)
    goto <bb 149>;
  else
    goto <bb 144>;

  <bb 144>:
  goto <bb 146>;

  <bb 145>:

  <bb 146>:
  # __i$_M_node_1951 = PHI <__i$_M_node_724(145), __i$_M_node_1029(144)>
  # __i$_M_node_1199 = PHI <__i$_M_node_723(145), __i$_M_node_8(144)>
  # DEBUG __y => __i$_M_node_1199
  # DEBUG __x => __i$_M_node_1951
  # DEBUG __x => __i$_M_node_1951
  # DEBUG __x => __i$_M_node_1951
  # DEBUG this => __i$_M_node_1951
  # DEBUG D#391 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1951]._M_value_field
  # DEBUG __r => D#391
  # DEBUG __x => D#391
  # DEBUG this => D#133
  # DEBUG D#392 => &MEM[(const struct pair &)__i$_M_node_1951 + 32].first
  # DEBUG D#393 => &D#394->_M_impl._M_key_compare
  # DEBUG D#52 => D#393
  _726 = MEM[(const int &)__i$_M_node_1951 + 32];
  # DEBUG D#53 => D#392
  # DEBUG D#54 => &body_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_213 <= _726)
    goto <bb 147>;
  else
    goto <bb 148>;

  <bb 147>:
  # DEBUG __y => __i$_M_node_1951
  __i$_M_node_728 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1951 + 16B];
  # DEBUG D#108 => __i$_M_node_1951
  # DEBUG __x => D#108
  # DEBUG __x => NULL
  goto <bb 143>;

  <bb 148>:
  __i$_M_node_729 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1951 + 24B];
  # DEBUG D#107 => __i$_M_node_1951
  # DEBUG __x => D#107
  # DEBUG __x => NULL
  goto <bb 143>;

  <bb 149>:
  # __i$_M_node_1753 = PHI <__i$_M_node_8(143)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1753
  # DEBUG __i$_M_node => __i$_M_node_1753
  # DEBUG this => D#1277
  # DEBUG D#78 => &D#1277->_M_t
  # DEBUG this => D#78
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_723
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_1753 == __i$_M_node_723)
    goto <bb 589>;
  else
    goto <bb 150>;

  <bb 150>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1753
  # DEBUG D#681 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1753]._M_value_field
  # DEBUG __r => D#681
  # DEBUG D#682 => &MEM[(struct pair &)__i$_M_node_1753 + 32].first
  # DEBUG D#85 => D#1277
  # DEBUG this => D#85
  # DEBUG D#84 => D#85
  # DEBUG D#83 => &D#84->_M_t
  # DEBUG D#82 => D#83
  # DEBUG this => D#82
  # DEBUG D#53 => &body_id
  _732 = MEM[(const int &)__i$_M_node_1753 + 32];
  # DEBUG D#54 => D#682
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_213 < _732)
    goto <bb 589>;
  else
    goto <bb 152>;

  <bb 151>:
  __i$_M_node_736 = MEM[(struct _Rb_tree_iterator *)&D.89759];
  # DEBUG __i$_M_node => __i$_M_node_736
  D.89760 ={v} {CLOBBER};

  <bb 152>:
  # __i$_M_node_737 = PHI <__i$_M_node_1753(150), __i$_M_node_736(151)>
  # DEBUG __i$_M_node => __i$_M_node_737
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_737
  # DEBUG D#683 => &MEM[(struct _Rb_tree_node *)__i$_M_node_737]._M_value_field
  # DEBUG __r => D#683
  # DEBUG D#685 => {CLOBBER}
  # DEBUG __i$_M_node => D#685
  MEM[(struct mapped_type &)__i$_M_node_737 + 36].second = _217;
  goto <bb 441>;

<L34>:
  # DEBUG __lhs => &temp
  # DEBUG __rhs => "router"
  _285 = std::__cxx11::basic_string<char>::compare (&temp, "router");
  goto <bb 155>;

<L179>:
  goto <bb 561> (<L105>);

  <bb 155>:
  if (_285 == 0)
    goto <bb 441>;
  else
    goto <bb 156>;

  <bb 156>:
  # DEBUG __lhs => &temp
  # DEBUG __rhs => "node"
  _95 = std::__cxx11::basic_string<char>::compare (&temp, "node");
  goto <bb 158>;

<L180>:
  goto <bb 561> (<L105>);

  <bb 158>:
  if (_95 == 0)
    goto <bb 441>;
  else
    goto <bb 159>;

  <bb 159>:
  # DEBUG __out => &cout
  # DEBUG __s => "Anynet:Unknow body type "
  # DEBUG __s => "Anynet:Unknow body type "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "Anynet:Unknow body type ", 24);
  goto <bb 161>;

<L181>:
  goto <bb 561> (<L105>);

  <bb 161>:
  # DEBUG __os => &cout
  # DEBUG __str => &temp
  _96 = MEM[(long unsigned int *)&temp + 8B];
  # DEBUG D#2 => &temp
  # DEBUG this => D#2
  _286 = (long int) _96;
  # DEBUG this => &temp
  _287 = MEM[(char * *)&temp];
  # DEBUG D#1 => &temp
  # DEBUG this => D#1
  _288 = std::__ostream_insert<char, std::char_traits<char> > (&cout, _287, _286);
  goto <bb 163>;

<L182>:
  goto <bb 561> (<L105>);

  <bb 163>:
  std::operator<< <std::char_traits<char> > (_288, "\n");
  goto <bb 165>;

<L183>:
  goto <bb 561> (<L105>);

  <bb 165>:
  __assert_fail ("false", "networks/anynet.cpp", 416, &__PRETTY_FUNCTION__);

<L115>:
  # DEBUG this => &temp
  _97 = MEM[(char * *)&temp];
  # DEBUG D#1 => &temp
  # DEBUG this => D#1
  # DEBUG __nptr => _97
  _216 = strtol (_97, 0B, 10);
  body_id_215 = (int) _216;
  # DEBUG body_id => body_id_215
  if (body_type_7 == 1)
    goto <bb 167>;
  else
    goto <bb 620>;

  <bb 167>:
  # DEBUG D#889 => &this_44(D)->router_list
  _248 = MEM[(struct map * *)this_44(D) + 440B];
  # DEBUG D#34 => D#889
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => NULL
  # DEBUG __x => &body_id
  # DEBUG this => D#324
  __i$_M_node_289 = &MEM[(const struct _Rb_tree *)_248]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_289
  # DEBUG this => D#325
  # DEBUG __k => &body_id
  # DEBUG this => D#325
  __i$_M_node_290 = MEM[(struct _Rb_tree_node_base * *)_248 + 16B];
  # DEBUG D#68 => D#325
  # DEBUG this => D#68
  # DEBUG D#315 => D#325
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &body_id
  # DEBUG __y => __i$_M_node_289
  # DEBUG __x => __i$_M_node_290
  if (__i$_M_node_290 == 0B)
    goto <bb 591>;
  else
    goto <bb 170>;

  <bb 168>:
  # __i$_M_node_1008 = PHI <__i$_M_node_294(173), __i$_M_node_293(172)>
  # __i$_M_node_1030 = PHI <__i$_M_node_1233(173), __i$_M_node_28(172)>
  # DEBUG __y => __i$_M_node_1030
  # DEBUG __x => __i$_M_node_1008
  if (__i$_M_node_1008 == 0B)
    goto <bb 174>;
  else
    goto <bb 169>;

  <bb 169>:
  goto <bb 171>;

  <bb 170>:

  <bb 171>:
  # __i$_M_node_28 = PHI <__i$_M_node_290(170), __i$_M_node_1008(169)>
  # __i$_M_node_1233 = PHI <__i$_M_node_289(170), __i$_M_node_1030(169)>
  # DEBUG __y => __i$_M_node_1233
  # DEBUG __x => __i$_M_node_28
  # DEBUG __x => __i$_M_node_28
  # DEBUG __x => __i$_M_node_28
  # DEBUG this => __i$_M_node_28
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_28]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#312 => &MEM[(const struct pair &)__i$_M_node_28 + 32].first
  # DEBUG D#313 => &D#314->_M_impl._M_key_compare
  # DEBUG D#52 => D#313
  _292 = MEM[(const int &)__i$_M_node_28 + 32];
  # DEBUG D#53 => D#312
  # DEBUG D#54 => &body_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_215 <= _292)
    goto <bb 172>;
  else
    goto <bb 173>;

  <bb 172>:
  # DEBUG __y => __i$_M_node_28
  __i$_M_node_293 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_28 + 16B];
  # DEBUG D#134 => __i$_M_node_28
  # DEBUG __x => D#134
  # DEBUG __x => NULL
  goto <bb 168>;

  <bb 173>:
  __i$_M_node_294 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_28 + 24B];
  # DEBUG D#135 => __i$_M_node_28
  # DEBUG __x => D#135
  # DEBUG __x => NULL
  goto <bb 168>;

  <bb 174>:
  # __i$_M_node_1655 = PHI <__i$_M_node_1030(168)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1655
  # DEBUG __j$_M_node => __i$_M_node_1655
  # DEBUG this => D#325
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_289
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (__i$_M_node_289 == __i$_M_node_1655)
    goto <bb 591>;
  else
    goto <bb 175>;

  <bb 175>:
  # DEBUG __x => __i$_M_node_1655
  # DEBUG __x => __i$_M_node_1655
  # DEBUG this => __i$_M_node_1655
  # DEBUG D#316 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1655]._M_value_field
  # DEBUG __r => D#316
  # DEBUG __x => D#316
  # DEBUG this => D#123
  # DEBUG D#321 => &MEM[(const struct pair &)__i$_M_node_1655 + 32].first
  # DEBUG D#323 => &MEM[(const struct _Rb_tree *)D#325]._M_impl._M_key_compare
  # DEBUG D#52 => D#323
  # DEBUG D#53 => &body_id
  _296 = MEM[(const int &)__i$_M_node_1655 + 32];
  # DEBUG D#54 => D#321
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  # DEBUG D#322 => {CLOBBER}
  # DEBUG __j$_M_node => D#322
  # DEBUG this => NULL
  # DEBUG __x => NULL
  if (body_id_215 < _296)
    goto <bb 591>;
  else
    goto <bb 190>;

  <bb 176>:
  # __i$_M_node_982 = PHI <__i$_M_node_745(180), __i$_M_node_746(181)>
  # __i$_M_node_1009 = PHI <__i$_M_node_1201(180), __i$_M_node_1953(181)>
  # DEBUG __y => __i$_M_node_1009
  # DEBUG __x => __i$_M_node_982
  if (__i$_M_node_982 == 0B)
    goto <bb 182>;
  else
    goto <bb 177>;

  <bb 177>:
  goto <bb 179>;

  <bb 178>:

  <bb 179>:
  # __i$_M_node_1201 = PHI <__i$_M_node_741(178), __i$_M_node_982(177)>
  # __i$_M_node_1953 = PHI <__i$_M_node_289(178), __i$_M_node_1009(177)>
  # DEBUG __y => __i$_M_node_1953
  # DEBUG __x => __i$_M_node_1201
  # DEBUG __x => __i$_M_node_1201
  # DEBUG __x => __i$_M_node_1201
  # DEBUG this => __i$_M_node_1201
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1201]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__i$_M_node_1201 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _743 = MEM[(const int &)__i$_M_node_1201 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => &body_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_215 <= _743)
    goto <bb 180>;
  else
    goto <bb 181>;

  <bb 180>:
  # DEBUG __y => __i$_M_node_1201
  __i$_M_node_745 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1201 + 16B];
  # DEBUG D#66 => __i$_M_node_1201
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 176>;

  <bb 181>:
  __i$_M_node_746 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1201 + 24B];
  # DEBUG D#65 => __i$_M_node_1201
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 176>;

  <bb 182>:
  # __i$_M_node_1656 = PHI <__i$_M_node_1009(176)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1656
  # DEBUG __i$_M_node => __i$_M_node_1656
  # DEBUG this => _248
  # DEBUG D#72 => &_248->_M_t
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_289
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_289 == __i$_M_node_1656)
    goto <bb 592>;
  else
    goto <bb 183>;

  <bb 183>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1656
  # DEBUG D#751 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1656]._M_value_field
  # DEBUG __r => D#751
  # DEBUG D#752 => &MEM[(struct pair &)__i$_M_node_1656 + 32].first
  # DEBUG D#105 => _248
  # DEBUG this => D#105
  # DEBUG D#104 => D#105
  # DEBUG D#103 => &D#104->_M_t
  # DEBUG D#102 => D#103
  # DEBUG this => D#102
  # DEBUG D#53 => &body_id
  _749 = MEM[(const int &)__i$_M_node_1656 + 32];
  # DEBUG D#54 => D#752
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_215 < _749)
    goto <bb 592>;
  else
    goto <bb 185>;

  <bb 184>:
  __i$_M_node_753 = MEM[(struct _Rb_tree_iterator *)&D.89814];
  # DEBUG __i$_M_node => __i$_M_node_753
  # DEBUG this => &D.89816
  # DEBUG D#537 => &D.89816.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.89816 + 8B]._M_t
  _754 = MEM[(struct _Rb_tree_node_base * *)&D.89816 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.89816 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.89816 + 8B]._M_t, _754);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.89816 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.89816 ={v} {CLOBBER};
  # DEBUG this => &D.89815
  # DEBUG this => &D.89815._M_t
  _755 = MEM[(struct _Rb_tree_node_base * *)&D.89815 + 16B];
  # DEBUG D#58 => &D.89815._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.89815._M_t, _755);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.89815]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.89815 ={v} {CLOBBER};

  <bb 185>:
  # __i$_M_node_756 = PHI <__i$_M_node_1656(183), __i$_M_node_753(184)>
  # DEBUG __i$_M_node => __i$_M_node_756
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_756
  # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_756]._M_value_field
  # DEBUG __r => D#753
  # DEBUG D#755 => {CLOBBER}
  # DEBUG __i$_M_node => D#755
  # DEBUG this => NULL
  # DEBUG __x => &D.59348
  _301 = &MEM[(struct map *)__i$_M_node_756 + 40B]._M_t;
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::operator= (_301, &D.59348._M_t);
  goto <bb 189>;

<L125>:
  # DEBUG this => &D.89816
  # DEBUG D#537 => &D.89816.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.89816 + 8B]._M_t
  _758 = MEM[(struct _Rb_tree_node_base * *)&D.89816 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.89816 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.89816 + 8B]._M_t, _758);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.89816 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.89816 ={v} {CLOBBER};
  resx 50

<L126>:
  # DEBUG this => &D.89815
  # DEBUG this => &D.89815._M_t
  _759 = MEM[(struct _Rb_tree_node_base * *)&D.89815 + 16B];
  # DEBUG D#58 => &D.89815._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.89815._M_t, _759);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.89815]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.89815 ={v} {CLOBBER};
  resx 49

<L185>:
  goto <bb 555> (<L103>);

  <bb 189>:
  # DEBUG this => &D.59348
  # DEBUG this => &D.59348._M_t
  _302 = MEM[(struct _Rb_tree_node_base * *)&D.59348 + 16B];
  # DEBUG D#58 => &D.59348._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.59348._M_t, _302);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.59348]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.59348 ={v} {CLOBBER};
  pretmp_462 = MEM[(struct map * *)this_44(D) + 440B];

  <bb 190>:
  # prephitmp_463 = PHI <_248(175), pretmp_462(189)>
  # DEBUG D#891 => &this_44(D)->router_list
  # DEBUG D#1296 => MEM[(struct map * *)this_44(D) + 440B]
  # DEBUG D#34 => D#891
  # DEBUG __n => 1
  # DEBUG this => D#34
  # DEBUG this => NULL
  # DEBUG __x => &body_id
  # DEBUG this => D#324
  __i$_M_node_104 = &MEM[(const struct _Rb_tree *)prephitmp_463 + 48B]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_104
  # DEBUG this => D#325
  # DEBUG __k => &body_id
  # DEBUG this => D#325
  __i$_M_node_303 = MEM[(struct _Rb_tree_node_base * *)prephitmp_463 + 64B];
  # DEBUG D#68 => D#325
  # DEBUG this => D#68
  # DEBUG D#315 => D#325
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &body_id
  # DEBUG __y => __i$_M_node_104
  # DEBUG __x => __i$_M_node_303
  if (__i$_M_node_303 == 0B)
    goto <bb 593>;
  else
    goto <bb 193>;

  <bb 191>:
  # __i$_M_node_961 = PHI <__i$_M_node_308(196), __i$_M_node_307(195)>
  # __i$_M_node_983 = PHI <__i$_M_node_1090(196), __i$_M_node_1093(195)>
  # DEBUG __y => __i$_M_node_983
  # DEBUG __x => __i$_M_node_961
  if (__i$_M_node_961 == 0B)
    goto <bb 197>;
  else
    goto <bb 192>;

  <bb 192>:
  goto <bb 194>;

  <bb 193>:

  <bb 194>:
  # __i$_M_node_1093 = PHI <__i$_M_node_303(193), __i$_M_node_961(192)>
  # __i$_M_node_1090 = PHI <__i$_M_node_104(193), __i$_M_node_983(192)>
  # DEBUG __y => __i$_M_node_1090
  # DEBUG __x => __i$_M_node_1093
  # DEBUG __x => __i$_M_node_1093
  # DEBUG __x => __i$_M_node_1093
  # DEBUG this => __i$_M_node_1093
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1093]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#312 => &MEM[(const struct pair &)__i$_M_node_1093 + 32].first
  # DEBUG D#313 => &D#314->_M_impl._M_key_compare
  # DEBUG D#52 => D#313
  _305 = MEM[(const int &)__i$_M_node_1093 + 32];
  # DEBUG D#53 => D#312
  # DEBUG D#54 => &body_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_215 <= _305)
    goto <bb 195>;
  else
    goto <bb 196>;

  <bb 195>:
  # DEBUG __y => __i$_M_node_1093
  __i$_M_node_307 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1093 + 16B];
  # DEBUG D#134 => __i$_M_node_1093
  # DEBUG __x => D#134
  # DEBUG __x => NULL
  goto <bb 191>;

  <bb 196>:
  __i$_M_node_308 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1093 + 24B];
  # DEBUG D#135 => __i$_M_node_1093
  # DEBUG __x => D#135
  # DEBUG __x => NULL
  goto <bb 191>;

  <bb 197>:
  # __i$_M_node_1668 = PHI <__i$_M_node_983(191)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1668
  # DEBUG __j$_M_node => __i$_M_node_1668
  # DEBUG this => D#325
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_104
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (__i$_M_node_104 == __i$_M_node_1668)
    goto <bb 593>;
  else
    goto <bb 198>;

  <bb 198>:
  # DEBUG __x => __i$_M_node_1668
  # DEBUG __x => __i$_M_node_1668
  # DEBUG this => __i$_M_node_1668
  # DEBUG D#316 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1668]._M_value_field
  # DEBUG __r => D#316
  # DEBUG __x => D#316
  # DEBUG this => D#123
  # DEBUG D#321 => &MEM[(const struct pair &)__i$_M_node_1668 + 32].first
  # DEBUG D#323 => &MEM[(const struct _Rb_tree *)D#325]._M_impl._M_key_compare
  # DEBUG D#52 => D#323
  # DEBUG D#53 => &body_id
  _311 = MEM[(const int &)__i$_M_node_1668 + 32];
  # DEBUG D#54 => D#321
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  # DEBUG D#322 => {CLOBBER}
  # DEBUG __j$_M_node => D#322
  # DEBUG this => NULL
  # DEBUG __x => NULL
  if (body_id_215 < _311)
    goto <bb 593>;
  else
    goto <bb 213>;

  <bb 199>:
  # __i$_M_node_935 = PHI <__i$_M_node_775(203), __i$_M_node_776(204)>
  # __i$_M_node_962 = PHI <__i$_M_node_1962(203), __i$_M_node_1963(204)>
  # DEBUG __y => __i$_M_node_962
  # DEBUG __x => __i$_M_node_935
  if (__i$_M_node_935 == 0B)
    goto <bb 205>;
  else
    goto <bb 200>;

  <bb 200>:
  goto <bb 202>;

  <bb 201>:

  <bb 202>:
  # __i$_M_node_1962 = PHI <__i$_M_node_303(201), __i$_M_node_935(200)>
  # __i$_M_node_1963 = PHI <__i$_M_node_104(201), __i$_M_node_962(200)>
  # DEBUG __y => __i$_M_node_1963
  # DEBUG __x => __i$_M_node_1962
  # DEBUG __x => __i$_M_node_1962
  # DEBUG __x => __i$_M_node_1962
  # DEBUG this => __i$_M_node_1962
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1962]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__i$_M_node_1962 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _773 = MEM[(const int &)__i$_M_node_1962 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => &body_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_215 <= _773)
    goto <bb 203>;
  else
    goto <bb 204>;

  <bb 203>:
  # DEBUG __y => __i$_M_node_1962
  __i$_M_node_775 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1962 + 16B];
  # DEBUG D#66 => __i$_M_node_1962
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 199>;

  <bb 204>:
  __i$_M_node_776 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1962 + 24B];
  # DEBUG D#65 => __i$_M_node_1962
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 199>;

  <bb 205>:
  # __i$_M_node_1669 = PHI <__i$_M_node_962(199)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1669
  # DEBUG __i$_M_node => __i$_M_node_1669
  # DEBUG this => D#1278
  # DEBUG D#72 => &D#1278->_M_t
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_104
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_104 == __i$_M_node_1669)
    goto <bb 594>;
  else
    goto <bb 206>;

  <bb 206>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1669
  # DEBUG D#751 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1669]._M_value_field
  # DEBUG __r => D#751
  # DEBUG D#752 => &MEM[(struct pair &)__i$_M_node_1669 + 32].first
  # DEBUG D#105 => D#1278
  # DEBUG this => D#105
  # DEBUG D#104 => D#105
  # DEBUG D#103 => &D#104->_M_t
  # DEBUG D#102 => D#103
  # DEBUG this => D#102
  # DEBUG D#53 => &body_id
  _779 = MEM[(const int &)__i$_M_node_1669 + 32];
  # DEBUG D#54 => D#752
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_215 < _779)
    goto <bb 594>;
  else
    goto <bb 208>;

  <bb 207>:
  __i$_M_node_783 = MEM[(struct _Rb_tree_iterator *)&D.89890];
  # DEBUG __i$_M_node => __i$_M_node_783
  # DEBUG this => &D.89892
  # DEBUG D#537 => &D.89892.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.89892 + 8B]._M_t
  _784 = MEM[(struct _Rb_tree_node_base * *)&D.89892 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.89892 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.89892 + 8B]._M_t, _784);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.89892 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.89892 ={v} {CLOBBER};
  # DEBUG this => &D.89891
  # DEBUG this => &D.89891._M_t
  _785 = MEM[(struct _Rb_tree_node_base * *)&D.89891 + 16B];
  # DEBUG D#58 => &D.89891._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.89891._M_t, _785);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.89891]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.89891 ={v} {CLOBBER};

  <bb 208>:
  # __i$_M_node_786 = PHI <__i$_M_node_1669(206), __i$_M_node_783(207)>
  # DEBUG __i$_M_node => __i$_M_node_786
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_786
  # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_786]._M_value_field
  # DEBUG __r => D#753
  # DEBUG D#755 => {CLOBBER}
  # DEBUG __i$_M_node => D#755
  # DEBUG this => NULL
  # DEBUG __x => &D.59349
  _317 = &MEM[(struct map *)__i$_M_node_786 + 40B]._M_t;
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::operator= (_317, &D.59349._M_t);
  goto <bb 212>;

<L127>:
  # DEBUG this => &D.89892
  # DEBUG D#537 => &D.89892.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.89892 + 8B]._M_t
  _788 = MEM[(struct _Rb_tree_node_base * *)&D.89892 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.89892 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.89892 + 8B]._M_t, _788);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.89892 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.89892 ={v} {CLOBBER};
  resx 52

<L128>:
  # DEBUG this => &D.89891
  # DEBUG this => &D.89891._M_t
  _789 = MEM[(struct _Rb_tree_node_base * *)&D.89891 + 16B];
  # DEBUG D#58 => &D.89891._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.89891._M_t, _789);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.89891]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.89891 ={v} {CLOBBER};
  resx 51

<L187>:
  goto <bb 558> (<L104>);

  <bb 212>:
  # DEBUG this => &D.59349
  # DEBUG this => &D.59349._M_t
  _318 = MEM[(struct _Rb_tree_node_base * *)&D.59349 + 16B];
  # DEBUG D#58 => &D.59349._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.59349._M_t, _318);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.59349]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.59349 ={v} {CLOBBER};

  <bb 213>:
  _114 = head_type_4 | body_type_7;
  if (_114 == 0)
    goto <bb 214>;
  else
    goto <bb 221>;

  <bb 214>:
  # DEBUG __out => &cout
  # DEBUG __s => "Anynet:Cannot connect node to node "
  # DEBUG __s => "Anynet:Cannot connect node to node "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "Anynet:Cannot connect node to node ", 35);
  goto <bb 216>;

<L188>:
  goto <bb 561> (<L105>);

  <bb 216>:
  # DEBUG __os => &cout
  # DEBUG __str => &temp
  _194 = MEM[(long unsigned int *)&temp + 8B];
  # DEBUG D#2 => &temp
  # DEBUG this => D#2
  _319 = (long int) _194;
  # DEBUG this => &temp
  _320 = MEM[(char * *)&temp];
  # DEBUG D#1 => &temp
  # DEBUG this => D#1
  _321 = std::__ostream_insert<char, std::char_traits<char> > (&cout, _320, _319);
  goto <bb 218>;

<L189>:
  goto <bb 561> (<L105>);

  <bb 218>:
  std::operator<< <std::char_traits<char> > (_321, "\n");
  goto <bb 220>;

<L190>:
  goto <bb 561> (<L105>);

  <bb 220>:
  __assert_fail ("false", "networks/anynet.cpp", 435, &__PRETTY_FUNCTION__);

  <bb 221>:
  _115 = head_type_4 == 0;
  _116 = body_type_7 == 1;
  _117 = _115 & _116;
  if (_117 != 0)
    goto <bb 222>;
  else
    goto <bb 295>;

  <bb 222>:
  # DEBUG D#893 => &this_44(D)->node_list
  # DEBUG this => D#893
  # DEBUG __x => &head_id
  # DEBUG D#350 => &MEM[(const struct map *)D#893]._M_t
  # DEBUG this => D#350
  __i$_M_node_195 = &MEM[(const struct _Rb_tree *)this_44(D) + 392B]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_195
  # DEBUG D#351 => &MEM[(const struct map *)D#893]._M_t
  # DEBUG this => D#351
  # DEBUG __k => &head_id
  # DEBUG this => D#351
  __i$_M_node_322 = MEM[(struct _Rb_tree_node_base * *)this_44(D) + 408B];
  # DEBUG D#90 => D#351
  # DEBUG this => D#90
  # DEBUG D#340 => D#351
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &head_id
  # DEBUG __y => __i$_M_node_195
  # DEBUG __x => __i$_M_node_322
  if (__i$_M_node_322 == 0B)
    goto <bb 260>;
  else
    goto <bb 223>;

  <bb 223>:
  pretmp_1516 = head_id;
  goto <bb 226>;

  <bb 224>:
  # __i$_M_node_315 = PHI <__i$_M_node_327(228), __i$_M_node_326(227)>
  # __i$_M_node_761 = PHI <__i$_M_node_1114(228), __i$_M_node_1208(227)>
  # DEBUG __y => __i$_M_node_761
  # DEBUG __x => __i$_M_node_315
  if (__i$_M_node_315 == 0B)
    goto <bb 229>;
  else
    goto <bb 225>;

  <bb 225>:

  <bb 226>:
  # __i$_M_node_1208 = PHI <__i$_M_node_322(223), __i$_M_node_315(225)>
  # __i$_M_node_1114 = PHI <__i$_M_node_195(223), __i$_M_node_761(225)>
  # DEBUG __y => __i$_M_node_1114
  # DEBUG __x => __i$_M_node_1208
  # DEBUG __x => __i$_M_node_1208
  # DEBUG __x => __i$_M_node_1208
  # DEBUG this => __i$_M_node_1208
  # DEBUG D#336 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1208]._M_value_field
  # DEBUG __r => D#336
  # DEBUG __x => D#336
  # DEBUG this => D#128
  # DEBUG D#337 => &MEM[(const struct pair &)__i$_M_node_1208 + 32].first
  # DEBUG D#338 => &D#339->_M_impl._M_key_compare
  # DEBUG D#52 => D#338
  _324 = MEM[(const int &)__i$_M_node_1208 + 32];
  # DEBUG D#53 => D#337
  # DEBUG D#54 => &head_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_324 >= pretmp_1516)
    goto <bb 227>;
  else
    goto <bb 228>;

  <bb 227>:
  # DEBUG __y => __i$_M_node_1208
  __i$_M_node_326 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1208 + 16B];
  # DEBUG D#126 => __i$_M_node_1208
  # DEBUG __x => D#126
  # DEBUG __x => NULL
  goto <bb 224>;

  <bb 228>:
  __i$_M_node_327 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1208 + 24B];
  # DEBUG D#127 => __i$_M_node_1208
  # DEBUG __x => D#127
  # DEBUG __x => NULL
  goto <bb 224>;

  <bb 229>:
  # __i$_M_node_1708 = PHI <__i$_M_node_761(224)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1708
  # DEBUG __j$_M_node => __i$_M_node_1708
  # DEBUG this => D#351
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_195
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (__i$_M_node_195 == __i$_M_node_1708)
    goto <bb 261>;
  else
    goto <bb 230>;

  <bb 230>:
  # DEBUG __x => __i$_M_node_1708
  # DEBUG __x => __i$_M_node_1708
  # DEBUG this => __i$_M_node_1708
  # DEBUG D#346 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1708]._M_value_field
  # DEBUG __r => D#346
  # DEBUG __x => D#346
  # DEBUG this => D#128
  # DEBUG D#347 => &MEM[(const struct pair &)__i$_M_node_1708 + 32].first
  # DEBUG D#349 => &MEM[(const struct _Rb_tree *)D#351]._M_impl._M_key_compare
  # DEBUG D#52 => D#349
  # DEBUG D#53 => &head_id
  _330 = MEM[(const int &)__i$_M_node_1708 + 32];
  # DEBUG D#54 => D#347
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  # DEBUG D#348 => {CLOBBER}
  # DEBUG __j$_M_node => D#348
  # DEBUG this => NULL
  # DEBUG __x => NULL
  if (_330 > pretmp_1516)
    goto <bb 261>;
  else
    goto <bb 231>;

  <bb 231>:
  # DEBUG __y => __i$_M_node_195
  # DEBUG __x => __i$_M_node_322
  if (__i$_M_node_322 == 0B)
    goto <bb 595>;
  else
    goto <bb 234>;

  <bb 232>:
  # __i$_M_node_739 = PHI <__i$_M_node_805(236), __i$_M_node_806(237)>
  # __i$_M_node_314 = PHI <__i$_M_node_1965(236), __i$_M_node_1966(237)>
  # DEBUG __y => __i$_M_node_314
  # DEBUG __x => __i$_M_node_739
  if (__i$_M_node_739 == 0B)
    goto <bb 238>;
  else
    goto <bb 233>;

  <bb 233>:
  goto <bb 235>;

  <bb 234>:

  <bb 235>:
  # __i$_M_node_1965 = PHI <__i$_M_node_322(234), __i$_M_node_739(233)>
  # __i$_M_node_1966 = PHI <__i$_M_node_195(234), __i$_M_node_314(233)>
  # DEBUG __y => __i$_M_node_1966
  # DEBUG __x => __i$_M_node_1965
  # DEBUG __x => __i$_M_node_1965
  # DEBUG __x => __i$_M_node_1965
  # DEBUG this => __i$_M_node_1965
  # DEBUG D#336 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1965]._M_value_field
  # DEBUG __r => D#336
  # DEBUG __x => D#336
  # DEBUG this => D#128
  # DEBUG D#341 => &MEM[(const struct pair &)__i$_M_node_1965 + 32].first
  # DEBUG D#342 => &D#343->_M_impl._M_key_compare
  # DEBUG D#52 => D#342
  _803 = MEM[(const int &)__i$_M_node_1965 + 32];
  # DEBUG D#53 => D#341
  # DEBUG D#54 => &head_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_803 >= pretmp_1516)
    goto <bb 236>;
  else
    goto <bb 237>;

  <bb 236>:
  # DEBUG __y => __i$_M_node_1965
  __i$_M_node_805 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1965 + 16B];
  # DEBUG D#64 => __i$_M_node_1965
  # DEBUG __x => D#64
  # DEBUG __x => NULL
  goto <bb 232>;

  <bb 237>:
  __i$_M_node_806 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1965 + 24B];
  # DEBUG D#63 => __i$_M_node_1965
  # DEBUG __x => D#63
  # DEBUG __x => NULL
  goto <bb 232>;

  <bb 238>:
  # __i$_M_node_1717 = PHI <__i$_M_node_314(232)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1717
  # DEBUG __i$_M_node => __i$_M_node_1717
  # DEBUG this => D#1282
  # DEBUG D#75 => &D#1282->_M_t
  # DEBUG this => D#75
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_195
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_195 == __i$_M_node_1717)
    goto <bb 595>;
  else
    goto <bb 239>;

  <bb 239>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1717
  # DEBUG D#842 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1717]._M_value_field
  # DEBUG __r => D#842
  # DEBUG D#843 => &MEM[(struct pair &)__i$_M_node_1717 + 32].first
  # DEBUG D#94 => D#1282
  # DEBUG this => D#94
  # DEBUG D#93 => D#94
  # DEBUG D#92 => &D#93->_M_t
  # DEBUG D#91 => D#92
  # DEBUG this => D#91
  # DEBUG D#53 => &head_id
  _809 = MEM[(const int &)__i$_M_node_1717 + 32];
  # DEBUG D#54 => D#843
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_809 > pretmp_1516)
    goto <bb 595>;
  else
    goto <bb 241>;

  <bb 240>:
  __i$_M_node_813 = MEM[(struct _Rb_tree_iterator *)&D.89937];
  # DEBUG __i$_M_node => __i$_M_node_813
  D.89936 ={v} {CLOBBER};

  <bb 241>:
  # __i$_M_node_814 = PHI <__i$_M_node_1717(239), __i$_M_node_813(240)>
  # DEBUG __i$_M_node => __i$_M_node_814
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_814
  # DEBUG D#844 => &MEM[(struct _Rb_tree_node *)__i$_M_node_814]._M_value_field
  # DEBUG __r => D#844
  # DEBUG D#846 => {CLOBBER}
  # DEBUG __i$_M_node => D#846
  _122 = MEM[(mapped_type &)__i$_M_node_814 + 36];
  if (_122 != body_id_215)
    goto <bb 243>;
  else
    goto <bb 242>;

  <bb 242>:
  pretmp_464 = MEM[(struct _Rb_tree_node_base * *)this_44(D) + 408B];
  pretmp_466 = head_id;
  goto <bb 261>;

  <bb 243>:
  # body_id_1745 = PHI <body_id_215(241)>
  _135 = &this_44(D)->node_list;
  _137 = std::map<int, int>::operator[] (_135, &head_id);
  goto <bb 245>;

<L191>:
  goto <bb 561> (<L105>);

  <bb 245>:
  _138 = *_137;
  # DEBUG __out => &cout
  # DEBUG __s => "Anynet:Node "
  # DEBUG __s => "Anynet:Node "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "Anynet:Node ", 12);
  goto <bb 247>;

<L192>:
  goto <bb 561> (<L105>);

  <bb 247>:
  _141 = std::basic_ostream<char>::operator<< (&cout, body_id_1745);
  goto <bb 249>;

<L193>:
  goto <bb 561> (<L105>);

  <bb 249>:
  # DEBUG __out => _141
  # DEBUG __s => " trying to connect to multiple router "
  # DEBUG __s => " trying to connect to multiple router "
  std::__ostream_insert<char, std::char_traits<char> > (_141, " trying to connect to multiple router ", 38);
  goto <bb 251>;

<L194>:
  goto <bb 561> (<L105>);

  <bb 251>:
  _143 = std::basic_ostream<char>::operator<< (_141, body_id_1745);
  goto <bb 253>;

<L195>:
  goto <bb 561> (<L105>);

  <bb 253>:
  # DEBUG __out => _143
  # DEBUG __s => " and "
  # DEBUG __s => " and "
  std::__ostream_insert<char, std::char_traits<char> > (_143, " and ", 5);
  goto <bb 255>;

<L196>:
  goto <bb 561> (<L105>);

  <bb 255>:
  _145 = std::basic_ostream<char>::operator<< (_143, _138);
  goto <bb 257>;

<L197>:
  goto <bb 561> (<L105>);

  <bb 257>:
  # DEBUG this => _145
  # DEBUG __pf => endl
  std::endl<char, std::char_traits<char> > (_145);
  goto <bb 259>;

<L198>:
  goto <bb 561> (<L105>);

  <bb 259>:
  __assert_fail ("false", "networks/anynet.cpp", 443, &__PRETTY_FUNCTION__);

  <bb 260>:
  pretmp_1507 = head_id;

  <bb 261>:
  # prephitmp_465 = PHI <__i$_M_node_322(229), pretmp_464(242), __i$_M_node_322(230), __i$_M_node_322(260)>
  # prephitmp_1508 = PHI <pretmp_1516(229), pretmp_466(242), pretmp_1516(230), pretmp_1507(260)>
  # DEBUG D#1283 => &this_44(D)->node_list
  # DEBUG this => D#1283
  # DEBUG __k => &head_id
  # DEBUG this => D#1283
  # DEBUG __x => &head_id
  # DEBUG D#345 => &D#1283->_M_t
  # DEBUG this => D#345
  # DEBUG __k => &head_id
  # DEBUG this => D#345
  # DEBUG D#1295 => MEM[(struct _Rb_tree_node_base * *)this_44(D) + 408B]
  # DEBUG D#41 => D#345
  # DEBUG this => D#41
  # DEBUG D#344 => D#345
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &head_id
  # DEBUG __y => __i$_M_node_195
  # DEBUG __x => D#1295
  if (prephitmp_465 == 0B)
    goto <bb 597>;
  else
    goto <bb 264>;

  <bb 262>:
  # __i$_M_node_713 = PHI <__i$_M_node_822(266), __i$_M_node_823(267)>
  # __i$_M_node_740 = PHI <__i$_M_node_1173(266), __i$_M_node_1174(267)>
  # DEBUG __y => __i$_M_node_740
  # DEBUG __x => __i$_M_node_713
  if (__i$_M_node_713 == 0B)
    goto <bb 268>;
  else
    goto <bb 263>;

  <bb 263>:
  goto <bb 265>;

  <bb 264>:

  <bb 265>:
  # __i$_M_node_1173 = PHI <prephitmp_465(264), __i$_M_node_713(263)>
  # __i$_M_node_1174 = PHI <__i$_M_node_195(264), __i$_M_node_740(263)>
  # DEBUG __y => __i$_M_node_1174
  # DEBUG __x => __i$_M_node_1173
  # DEBUG __x => __i$_M_node_1173
  # DEBUG __x => __i$_M_node_1173
  # DEBUG this => __i$_M_node_1173
  # DEBUG D#336 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1173]._M_value_field
  # DEBUG __r => D#336
  # DEBUG __x => D#336
  # DEBUG this => D#128
  # DEBUG D#341 => &MEM[(const struct pair &)__i$_M_node_1173 + 32].first
  # DEBUG D#342 => &D#343->_M_impl._M_key_compare
  # DEBUG D#52 => D#342
  _820 = MEM[(const int &)__i$_M_node_1173 + 32];
  # DEBUG D#53 => D#341
  # DEBUG D#54 => &head_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_820 >= prephitmp_1508)
    goto <bb 266>;
  else
    goto <bb 267>;

  <bb 266>:
  # DEBUG __y => __i$_M_node_1173
  __i$_M_node_822 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1173 + 16B];
  # DEBUG D#64 => __i$_M_node_1173
  # DEBUG __x => D#64
  # DEBUG __x => NULL
  goto <bb 262>;

  <bb 267>:
  __i$_M_node_823 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1173 + 24B];
  # DEBUG D#63 => __i$_M_node_1173
  # DEBUG __x => D#63
  # DEBUG __x => NULL
  goto <bb 262>;

  <bb 268>:
  # __i$_M_node_1709 = PHI <__i$_M_node_740(262)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1709
  # DEBUG __i$_M_node => __i$_M_node_1709
  # DEBUG this => D#1283
  # DEBUG D#75 => &D#1283->_M_t
  # DEBUG this => D#75
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_195
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_195 == __i$_M_node_1709)
    goto <bb 597>;
  else
    goto <bb 269>;

  <bb 269>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1709
  # DEBUG D#842 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1709]._M_value_field
  # DEBUG __r => D#842
  # DEBUG D#843 => &MEM[(struct pair &)__i$_M_node_1709 + 32].first
  # DEBUG D#94 => D#1283
  # DEBUG this => D#94
  # DEBUG D#93 => D#94
  # DEBUG D#92 => &D#93->_M_t
  # DEBUG D#91 => D#92
  # DEBUG this => D#91
  # DEBUG D#53 => &head_id
  _826 = MEM[(const int &)__i$_M_node_1709 + 32];
  # DEBUG D#54 => D#843
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_826 > prephitmp_1508)
    goto <bb 597>;
  else
    goto <bb 271>;

  <bb 270>:
  __i$_M_node_830 = MEM[(struct _Rb_tree_iterator *)&D.89964];
  # DEBUG __i$_M_node => __i$_M_node_830
  D.89963 ={v} {CLOBBER};

  <bb 271>:
  # __i$_M_node_831 = PHI <__i$_M_node_1709(269), __i$_M_node_830(270)>
  # DEBUG __i$_M_node => __i$_M_node_831
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_831
  # DEBUG D#844 => &MEM[(struct _Rb_tree_node *)__i$_M_node_831]._M_value_field
  # DEBUG __r => D#844
  # DEBUG D#846 => {CLOBBER}
  # DEBUG __i$_M_node => D#846
  MEM[(mapped_type &)__i$_M_node_831 + 36] = body_id_215;
  # DEBUG D#894 => &this_44(D)->router_list
  _250 = MEM[(struct map * *)this_44(D) + 440B];
  # DEBUG D#34 => D#894
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => _250
  # DEBUG __k => &body_id
  # DEBUG this => _250
  # DEBUG __x => &body_id
  # DEBUG D#311 => &_250->_M_t
  # DEBUG this => D#311
  # DEBUG __k => &body_id
  # DEBUG this => D#311
  __i$_M_node_125 = &MEM[(struct _Rb_tree *)_250]._M_impl._M_header;
  __i$_M_node_835 = MEM[(struct _Rb_tree_node_base * *)_250 + 16B];
  # DEBUG D#42 => D#311
  # DEBUG this => D#42
  # DEBUG D#310 => D#311
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &body_id
  # DEBUG __y => __i$_M_node_125
  # DEBUG __x => __i$_M_node_835
  if (__i$_M_node_835 == 0B)
    goto <bb 599>;
  else
    goto <bb 274>;

  <bb 272>:
  # __i$_M_node_683 = PHI <__i$_M_node_839(276), __i$_M_node_840(277)>
  # __i$_M_node_714 = PHI <__i$_M_node_1969(276), __i$_M_node_1970(277)>
  # DEBUG __y => __i$_M_node_714
  # DEBUG __x => __i$_M_node_683
  if (__i$_M_node_683 == 0B)
    goto <bb 278>;
  else
    goto <bb 273>;

  <bb 273>:
  goto <bb 275>;

  <bb 274>:

  <bb 275>:
  # __i$_M_node_1969 = PHI <__i$_M_node_835(274), __i$_M_node_683(273)>
  # __i$_M_node_1970 = PHI <__i$_M_node_125(274), __i$_M_node_714(273)>
  # DEBUG __y => __i$_M_node_1970
  # DEBUG __x => __i$_M_node_1969
  # DEBUG __x => __i$_M_node_1969
  # DEBUG __x => __i$_M_node_1969
  # DEBUG this => __i$_M_node_1969
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1969]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__i$_M_node_1969 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _837 = MEM[(const int &)__i$_M_node_1969 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => &body_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_215 <= _837)
    goto <bb 276>;
  else
    goto <bb 277>;

  <bb 276>:
  # DEBUG __y => __i$_M_node_1969
  __i$_M_node_839 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1969 + 16B];
  # DEBUG D#66 => __i$_M_node_1969
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 272>;

  <bb 277>:
  __i$_M_node_840 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1969 + 24B];
  # DEBUG D#65 => __i$_M_node_1969
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 272>;

  <bb 278>:
  # __i$_M_node_1710 = PHI <__i$_M_node_714(272)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1710
  # DEBUG __i$_M_node => __i$_M_node_1710
  # DEBUG this => _250
  # DEBUG D#72 => &_250->_M_t
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_125
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_125 == __i$_M_node_1710)
    goto <bb 599>;
  else
    goto <bb 279>;

  <bb 279>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1710
  # DEBUG D#751 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1710]._M_value_field
  # DEBUG __r => D#751
  # DEBUG D#752 => &MEM[(struct pair &)__i$_M_node_1710 + 32].first
  # DEBUG D#105 => _250
  # DEBUG this => D#105
  # DEBUG D#104 => D#105
  # DEBUG D#103 => &D#104->_M_t
  # DEBUG D#102 => D#103
  # DEBUG this => D#102
  # DEBUG D#53 => &body_id
  _843 = MEM[(const int &)__i$_M_node_1710 + 32];
  # DEBUG D#54 => D#752
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_215 < _843)
    goto <bb 599>;
  else
    goto <bb 281>;

  <bb 280>:
  __i$_M_node_847 = MEM[(struct _Rb_tree_iterator *)&D.90020];
  # DEBUG __i$_M_node => __i$_M_node_847
  # DEBUG this => &D.90022
  # DEBUG D#537 => &D.90022.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.90022 + 8B]._M_t
  _848 = MEM[(struct _Rb_tree_node_base * *)&D.90022 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.90022 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.90022 + 8B]._M_t, _848);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.90022 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.90022 ={v} {CLOBBER};
  # DEBUG this => &D.90021
  # DEBUG this => &D.90021._M_t
  _849 = MEM[(struct _Rb_tree_node_base * *)&D.90021 + 16B];
  # DEBUG D#58 => &D.90021._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.90021._M_t, _849);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.90021]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.90021 ={v} {CLOBBER};

  <bb 281>:
  # __i$_M_node_850 = PHI <__i$_M_node_1710(279), __i$_M_node_847(280)>
  # DEBUG __i$_M_node => __i$_M_node_850
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_850
  # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_850]._M_value_field
  # DEBUG __r => D#753
  # DEBUG D#1284 => &MEM[(struct pair &)__i$_M_node_850 + 32].second
  # DEBUG D#755 => {CLOBBER}
  # DEBUG __i$_M_node => D#755
  # DEBUG this => D#1284
  # DEBUG __k => &head_id
  # DEBUG this => D#1284
  # DEBUG __x => &head_id
  # DEBUG D#396 => &D#1284->_M_t
  # DEBUG this => D#396
  # DEBUG __k => &head_id
  # DEBUG this => D#396
  __i$_M_node_864 = &MEM[(struct _Rb_tree *)__i$_M_node_850 + 40B]._M_impl._M_header;
  __i$_M_node_865 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_850 + 56B];
  # DEBUG D#58 => D#396
  # DEBUG this => D#58
  # DEBUG D#395 => D#396
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &head_id
  # DEBUG __y => __i$_M_node_864
  # DEBUG __x => __i$_M_node_865
  if (__i$_M_node_865 == 0B)
    goto <bb 600>;
  else
    goto <bb 282>;

  <bb 282>:
  pretmp_1512 = head_id;
  goto <bb 288>;

<L129>:
  # DEBUG this => &D.90022
  # DEBUG D#537 => &D.90022.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.90022 + 8B]._M_t
  _852 = MEM[(struct _Rb_tree_node_base * *)&D.90022 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.90022 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.90022 + 8B]._M_t, _852);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.90022 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.90022 ={v} {CLOBBER};
  resx 54

<L130>:
  # DEBUG this => &D.90021
  # DEBUG this => &D.90021._M_t
  _853 = MEM[(struct _Rb_tree_node_base * *)&D.90021 + 16B];
  # DEBUG D#58 => &D.90021._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.90021._M_t, _853);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.90021]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.90021 ={v} {CLOBBER};
  resx 53

<L199>:
  goto <bb 561> (<L105>);

  <bb 286>:
  # __i$_M_node_19 = PHI <__i$_M_node_869(289), __i$_M_node_870(290)>
  # __i$_M_node_684 = PHI <__i$_M_node_623(289), __i$_M_node_624(290)>
  # DEBUG __y => __i$_M_node_684
  # DEBUG __x => __i$_M_node_19
  if (__i$_M_node_19 == 0B)
    goto <bb 291>;
  else
    goto <bb 287>;

  <bb 287>:

  <bb 288>:
  # __i$_M_node_623 = PHI <__i$_M_node_865(282), __i$_M_node_19(287)>
  # __i$_M_node_624 = PHI <__i$_M_node_864(282), __i$_M_node_684(287)>
  # DEBUG __y => __i$_M_node_624
  # DEBUG __x => __i$_M_node_623
  # DEBUG __x => __i$_M_node_623
  # DEBUG __x => __i$_M_node_623
  # DEBUG this => __i$_M_node_623
  # DEBUG D#391 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_623]._M_value_field
  # DEBUG __r => D#391
  # DEBUG __x => D#391
  # DEBUG this => D#133
  # DEBUG D#392 => &MEM[(const struct pair &)__i$_M_node_623 + 32].first
  # DEBUG D#393 => &D#394->_M_impl._M_key_compare
  # DEBUG D#52 => D#393
  _867 = MEM[(const int &)__i$_M_node_623 + 32];
  # DEBUG D#53 => D#392
  # DEBUG D#54 => &head_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_867 >= pretmp_1512)
    goto <bb 289>;
  else
    goto <bb 290>;

  <bb 289>:
  # DEBUG __y => __i$_M_node_623
  __i$_M_node_869 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_623 + 16B];
  # DEBUG D#108 => __i$_M_node_623
  # DEBUG __x => D#108
  # DEBUG __x => NULL
  goto <bb 286>;

  <bb 290>:
  __i$_M_node_870 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_623 + 24B];
  # DEBUG D#107 => __i$_M_node_623
  # DEBUG __x => D#107
  # DEBUG __x => NULL
  goto <bb 286>;

  <bb 291>:
  # __i$_M_node_1711 = PHI <__i$_M_node_684(286)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1711
  # DEBUG __i$_M_node => __i$_M_node_1711
  # DEBUG this => D#1284
  # DEBUG D#78 => &D#1284->_M_t
  # DEBUG this => D#78
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_864
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_1711 == __i$_M_node_864)
    goto <bb 601>;
  else
    goto <bb 292>;

  <bb 292>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1711
  # DEBUG D#681 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1711]._M_value_field
  # DEBUG __r => D#681
  # DEBUG D#682 => &MEM[(struct pair &)__i$_M_node_1711 + 32].first
  # DEBUG D#85 => D#1284
  # DEBUG this => D#85
  # DEBUG D#84 => D#85
  # DEBUG D#83 => &D#84->_M_t
  # DEBUG D#82 => D#83
  # DEBUG this => D#82
  # DEBUG D#53 => &head_id
  _873 = MEM[(const int &)__i$_M_node_1711 + 32];
  # DEBUG D#54 => D#682
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_873 > pretmp_1512)
    goto <bb 601>;
  else
    goto <bb 294>;

  <bb 293>:
  __i$_M_node_877 = MEM[(struct _Rb_tree_iterator *)&D.90069];
  # DEBUG __i$_M_node => __i$_M_node_877
  D.90070 ={v} {CLOBBER};

  <bb 294>:
  # __i$_M_node_878 = PHI <__i$_M_node_1711(292), __i$_M_node_877(293)>
  # DEBUG __i$_M_node => __i$_M_node_878
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_878
  # DEBUG D#683 => &MEM[(struct _Rb_tree_node *)__i$_M_node_878]._M_value_field
  # DEBUG __r => D#683
  # DEBUG D#685 => {CLOBBER}
  # DEBUG __i$_M_node => D#685
  # DEBUG this => &D.59361
  # DEBUG __a => &D.59359
  # DEBUG __b => &D.59360
  MEM[(struct mapped_type *)__i$_M_node_878 + 36B] = -1;
  MEM[(struct mapped_type *)__i$_M_node_878 + 40B] = 1;
  goto <bb 441>;

  <bb 295>:
  # _802 = PHI <_116(221), _1017(619)>
  _147 = head_type_4 == 1;
  _148 = body_type_7 == 0;
  _149 = _147 & _148;
  if (_149 != 0)
    goto <bb 296>;
  else
    goto <bb 368>;

  <bb 296>:
  # DEBUG D#895 => &this_44(D)->node_list
  # DEBUG this => D#895
  # DEBUG __x => &body_id
  # DEBUG D#350 => &MEM[(const struct map *)D#895]._M_t
  # DEBUG this => D#350
  __i$_M_node_134 = &MEM[(const struct _Rb_tree *)this_44(D) + 392B]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_134
  # DEBUG D#351 => &MEM[(const struct map *)D#895]._M_t
  # DEBUG this => D#351
  # DEBUG __k => &body_id
  # DEBUG this => D#351
  __i$_M_node_334 = MEM[(struct _Rb_tree_node_base * *)this_44(D) + 408B];
  # DEBUG D#90 => D#351
  # DEBUG this => D#90
  # DEBUG D#340 => D#351
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &body_id
  # DEBUG __y => __i$_M_node_134
  # DEBUG __x => __i$_M_node_334
  if (__i$_M_node_334 == 0B)
    goto <bb 334>;
  else
    goto <bb 299>;

  <bb 297>:
  # __i$_M_node_816 = PHI <__i$_M_node_339(302), __i$_M_node_338(301)>
  # __i$_M_node_834 = PHI <__i$_M_node_1941(302), __i$_M_node_595(301)>
  # DEBUG __y => __i$_M_node_834
  # DEBUG __x => __i$_M_node_816
  if (__i$_M_node_816 == 0B)
    goto <bb 303>;
  else
    goto <bb 298>;

  <bb 298>:
  goto <bb 300>;

  <bb 299>:

  <bb 300>:
  # __i$_M_node_595 = PHI <__i$_M_node_334(299), __i$_M_node_816(298)>
  # __i$_M_node_1941 = PHI <__i$_M_node_134(299), __i$_M_node_834(298)>
  # DEBUG __y => __i$_M_node_1941
  # DEBUG __x => __i$_M_node_595
  # DEBUG __x => __i$_M_node_595
  # DEBUG __x => __i$_M_node_595
  # DEBUG this => __i$_M_node_595
  # DEBUG D#336 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_595]._M_value_field
  # DEBUG __r => D#336
  # DEBUG __x => D#336
  # DEBUG this => D#128
  # DEBUG D#337 => &MEM[(const struct pair &)__i$_M_node_595 + 32].first
  # DEBUG D#338 => &D#339->_M_impl._M_key_compare
  # DEBUG D#52 => D#338
  _336 = MEM[(const int &)__i$_M_node_595 + 32];
  # DEBUG D#53 => D#337
  # DEBUG D#54 => &body_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_215 <= _336)
    goto <bb 301>;
  else
    goto <bb 302>;

  <bb 301>:
  # DEBUG __y => __i$_M_node_595
  __i$_M_node_338 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_595 + 16B];
  # DEBUG D#126 => __i$_M_node_595
  # DEBUG __x => D#126
  # DEBUG __x => NULL
  goto <bb 297>;

  <bb 302>:
  __i$_M_node_339 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_595 + 24B];
  # DEBUG D#127 => __i$_M_node_595
  # DEBUG __x => D#127
  # DEBUG __x => NULL
  goto <bb 297>;

  <bb 303>:
  # __i$_M_node_1703 = PHI <__i$_M_node_834(297)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1703
  # DEBUG __j$_M_node => __i$_M_node_1703
  # DEBUG this => D#351
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_134
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (__i$_M_node_134 == __i$_M_node_1703)
    goto <bb 334>;
  else
    goto <bb 304>;

  <bb 304>:
  # DEBUG __x => __i$_M_node_1703
  # DEBUG __x => __i$_M_node_1703
  # DEBUG this => __i$_M_node_1703
  # DEBUG D#346 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1703]._M_value_field
  # DEBUG __r => D#346
  # DEBUG __x => D#346
  # DEBUG this => D#128
  # DEBUG D#347 => &MEM[(const struct pair &)__i$_M_node_1703 + 32].first
  # DEBUG D#349 => &MEM[(const struct _Rb_tree *)D#351]._M_impl._M_key_compare
  # DEBUG D#52 => D#349
  # DEBUG D#53 => &body_id
  _342 = MEM[(const int &)__i$_M_node_1703 + 32];
  # DEBUG D#54 => D#347
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  # DEBUG D#348 => {CLOBBER}
  # DEBUG __j$_M_node => D#348
  # DEBUG this => NULL
  # DEBUG __x => NULL
  if (body_id_215 < _342)
    goto <bb 334>;
  else
    goto <bb 305>;

  <bb 305>:
  # DEBUG __y => __i$_M_node_134
  # DEBUG __x => __i$_M_node_334
  if (__i$_M_node_334 == 0B)
    goto <bb 603>;
  else
    goto <bb 308>;

  <bb 306>:
  # __i$_M_node_279 = PHI <__i$_M_node_886(310), __i$_M_node_887(311)>
  # __i$_M_node_817 = PHI <__i$_M_node_1007(310), __i$_M_node_879(311)>
  # DEBUG __y => __i$_M_node_817
  # DEBUG __x => __i$_M_node_279
  if (__i$_M_node_279 == 0B)
    goto <bb 312>;
  else
    goto <bb 307>;

  <bb 307>:
  goto <bb 309>;

  <bb 308>:

  <bb 309>:
  # __i$_M_node_1007 = PHI <__i$_M_node_334(308), __i$_M_node_279(307)>
  # __i$_M_node_879 = PHI <__i$_M_node_134(308), __i$_M_node_817(307)>
  # DEBUG __y => __i$_M_node_879
  # DEBUG __x => __i$_M_node_1007
  # DEBUG __x => __i$_M_node_1007
  # DEBUG __x => __i$_M_node_1007
  # DEBUG this => __i$_M_node_1007
  # DEBUG D#336 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1007]._M_value_field
  # DEBUG __r => D#336
  # DEBUG __x => D#336
  # DEBUG this => D#128
  # DEBUG D#341 => &MEM[(const struct pair &)__i$_M_node_1007 + 32].first
  # DEBUG D#342 => &D#343->_M_impl._M_key_compare
  # DEBUG D#52 => D#342
  _884 = MEM[(const int &)__i$_M_node_1007 + 32];
  # DEBUG D#53 => D#341
  # DEBUG D#54 => &body_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_215 <= _884)
    goto <bb 310>;
  else
    goto <bb 311>;

  <bb 310>:
  # DEBUG __y => __i$_M_node_1007
  __i$_M_node_886 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1007 + 16B];
  # DEBUG D#64 => __i$_M_node_1007
  # DEBUG __x => D#64
  # DEBUG __x => NULL
  goto <bb 306>;

  <bb 311>:
  __i$_M_node_887 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1007 + 24B];
  # DEBUG D#63 => __i$_M_node_1007
  # DEBUG __x => D#63
  # DEBUG __x => NULL
  goto <bb 306>;

  <bb 312>:
  # __i$_M_node_1706 = PHI <__i$_M_node_817(306)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1706
  # DEBUG __i$_M_node => __i$_M_node_1706
  # DEBUG this => D#1279
  # DEBUG D#75 => &D#1279->_M_t
  # DEBUG this => D#75
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_134
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_134 == __i$_M_node_1706)
    goto <bb 603>;
  else
    goto <bb 313>;

  <bb 313>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1706
  # DEBUG D#842 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1706]._M_value_field
  # DEBUG __r => D#842
  # DEBUG D#843 => &MEM[(struct pair &)__i$_M_node_1706 + 32].first
  # DEBUG D#94 => D#1279
  # DEBUG this => D#94
  # DEBUG D#93 => D#94
  # DEBUG D#92 => &D#93->_M_t
  # DEBUG D#91 => D#92
  # DEBUG this => D#91
  # DEBUG D#53 => &body_id
  _890 = MEM[(const int &)__i$_M_node_1706 + 32];
  # DEBUG D#54 => D#843
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_215 < _890)
    goto <bb 603>;
  else
    goto <bb 315>;

  <bb 314>:
  __i$_M_node_894 = MEM[(struct _Rb_tree_iterator *)&D.90095];
  # DEBUG __i$_M_node => __i$_M_node_894
  D.90094 ={v} {CLOBBER};

  <bb 315>:
  # __i$_M_node_895 = PHI <__i$_M_node_1706(313), __i$_M_node_894(314)>
  # DEBUG __i$_M_node => __i$_M_node_895
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_895
  # DEBUG D#844 => &MEM[(struct _Rb_tree_node *)__i$_M_node_895]._M_value_field
  # DEBUG __r => D#844
  # DEBUG D#846 => {CLOBBER}
  # DEBUG __i$_M_node => D#846
  _154 = MEM[(mapped_type &)__i$_M_node_895 + 36];
  head_id.263_155 = head_id;
  if (_154 != head_id.263_155)
    goto <bb 317>;
  else
    goto <bb 316>;

  <bb 316>:
  pretmp_1572 = MEM[(struct _Rb_tree_node_base * *)this_44(D) + 408B];
  goto <bb 334>;

  <bb 317>:
  # body_id_1739 = PHI <body_id_215(315)>
  _167 = &this_44(D)->node_list;
  _169 = std::map<int, int>::operator[] (_167, &head_id);
  goto <bb 319>;

<L200>:
  goto <bb 561> (<L105>);

  <bb 319>:
  _170 = *_169;
  # DEBUG __out => &cout
  # DEBUG __s => "Anynet:Node "
  # DEBUG __s => "Anynet:Node "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "Anynet:Node ", 12);
  goto <bb 321>;

<L201>:
  goto <bb 561> (<L105>);

  <bb 321>:
  _173 = std::basic_ostream<char>::operator<< (&cout, body_id_1739);
  goto <bb 323>;

<L202>:
  goto <bb 561> (<L105>);

  <bb 323>:
  # DEBUG __out => _173
  # DEBUG __s => " trying to connect to multiple router "
  # DEBUG __s => " trying to connect to multiple router "
  std::__ostream_insert<char, std::char_traits<char> > (_173, " trying to connect to multiple router ", 38);
  goto <bb 325>;

<L203>:
  goto <bb 561> (<L105>);

  <bb 325>:
  _175 = std::basic_ostream<char>::operator<< (_173, body_id_1739);
  goto <bb 327>;

<L204>:
  goto <bb 561> (<L105>);

  <bb 327>:
  # DEBUG __out => _175
  # DEBUG __s => " and "
  # DEBUG __s => " and "
  std::__ostream_insert<char, std::char_traits<char> > (_175, " and ", 5);
  goto <bb 329>;

<L205>:
  goto <bb 561> (<L105>);

  <bb 329>:
  _177 = std::basic_ostream<char>::operator<< (_175, _170);
  goto <bb 331>;

<L206>:
  goto <bb 561> (<L105>);

  <bb 331>:
  # DEBUG this => _177
  # DEBUG __pf => endl
  std::endl<char, std::char_traits<char> > (_177);
  goto <bb 333>;

<L207>:
  goto <bb 561> (<L105>);

  <bb 333>:
  __assert_fail ("false", "networks/anynet.cpp", 454, &__PRETTY_FUNCTION__);

  <bb 334>:
  # prephitmp_1573 = PHI <__i$_M_node_334(303), pretmp_1572(316), __i$_M_node_334(304), __i$_M_node_334(296)>
  # DEBUG D#1280 => &this_44(D)->node_list
  # DEBUG this => D#1280
  # DEBUG __k => &body_id
  # DEBUG this => D#1280
  # DEBUG __x => &body_id
  # DEBUG D#345 => &D#1280->_M_t
  # DEBUG this => D#345
  # DEBUG __k => &body_id
  # DEBUG this => D#345
  # DEBUG D#1294 => MEM[(struct _Rb_tree_node_base * *)this_44(D) + 408B]
  # DEBUG D#41 => D#345
  # DEBUG this => D#41
  # DEBUG D#344 => D#345
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &body_id
  # DEBUG __y => __i$_M_node_134
  # DEBUG __x => D#1294
  if (prephitmp_1573 == 0B)
    goto <bb 605>;
  else
    goto <bb 337>;

  <bb 335>:
  # __i$_M_node_790 = PHI <__i$_M_node_903(339), __i$_M_node_904(340)>
  # __i$_M_node_278 = PHI <__i$_M_node_1084(339), __i$_M_node_1079(340)>
  # DEBUG __y => __i$_M_node_278
  # DEBUG __x => __i$_M_node_790
  if (__i$_M_node_790 == 0B)
    goto <bb 341>;
  else
    goto <bb 336>;

  <bb 336>:
  goto <bb 338>;

  <bb 337>:

  <bb 338>:
  # __i$_M_node_1084 = PHI <prephitmp_1573(337), __i$_M_node_790(336)>
  # __i$_M_node_1079 = PHI <__i$_M_node_134(337), __i$_M_node_278(336)>
  # DEBUG __y => __i$_M_node_1079
  # DEBUG __x => __i$_M_node_1084
  # DEBUG __x => __i$_M_node_1084
  # DEBUG __x => __i$_M_node_1084
  # DEBUG this => __i$_M_node_1084
  # DEBUG D#336 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1084]._M_value_field
  # DEBUG __r => D#336
  # DEBUG __x => D#336
  # DEBUG this => D#128
  # DEBUG D#341 => &MEM[(const struct pair &)__i$_M_node_1084 + 32].first
  # DEBUG D#342 => &D#343->_M_impl._M_key_compare
  # DEBUG D#52 => D#342
  _901 = MEM[(const int &)__i$_M_node_1084 + 32];
  # DEBUG D#53 => D#341
  # DEBUG D#54 => &body_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_215 <= _901)
    goto <bb 339>;
  else
    goto <bb 340>;

  <bb 339>:
  # DEBUG __y => __i$_M_node_1084
  __i$_M_node_903 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1084 + 16B];
  # DEBUG D#64 => __i$_M_node_1084
  # DEBUG __x => D#64
  # DEBUG __x => NULL
  goto <bb 335>;

  <bb 340>:
  __i$_M_node_904 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1084 + 24B];
  # DEBUG D#63 => __i$_M_node_1084
  # DEBUG __x => D#63
  # DEBUG __x => NULL
  goto <bb 335>;

  <bb 341>:
  # __i$_M_node_1730 = PHI <__i$_M_node_278(335)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1730
  # DEBUG __i$_M_node => __i$_M_node_1730
  # DEBUG this => D#1280
  # DEBUG D#75 => &D#1280->_M_t
  # DEBUG this => D#75
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_134
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_134 == __i$_M_node_1730)
    goto <bb 605>;
  else
    goto <bb 342>;

  <bb 342>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1730
  # DEBUG D#842 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1730]._M_value_field
  # DEBUG __r => D#842
  # DEBUG D#843 => &MEM[(struct pair &)__i$_M_node_1730 + 32].first
  # DEBUG D#94 => D#1280
  # DEBUG this => D#94
  # DEBUG D#93 => D#94
  # DEBUG D#92 => &D#93->_M_t
  # DEBUG D#91 => D#92
  # DEBUG this => D#91
  # DEBUG D#53 => &body_id
  _907 = MEM[(const int &)__i$_M_node_1730 + 32];
  # DEBUG D#54 => D#843
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_215 < _907)
    goto <bb 605>;
  else
    goto <bb 344>;

  <bb 343>:
  __i$_M_node_911 = MEM[(struct _Rb_tree_iterator *)&D.90122];
  # DEBUG __i$_M_node => __i$_M_node_911
  D.90121 ={v} {CLOBBER};

  <bb 344>:
  # __i$_M_node_912 = PHI <__i$_M_node_1730(342), __i$_M_node_911(343)>
  # DEBUG __i$_M_node => __i$_M_node_912
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_912
  # DEBUG D#844 => &MEM[(struct _Rb_tree_node *)__i$_M_node_912]._M_value_field
  # DEBUG __r => D#844
  # DEBUG D#846 => {CLOBBER}
  # DEBUG __i$_M_node => D#846
  head_id.263_159 = head_id;
  MEM[(mapped_type &)__i$_M_node_912 + 36] = head_id.263_159;
  # DEBUG D#896 => &this_44(D)->router_list
  _251 = MEM[(struct map * *)this_44(D) + 440B];
  # DEBUG D#34 => D#896
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => _251
  # DEBUG __k => &head_id
  # DEBUG this => _251
  # DEBUG __x => &head_id
  # DEBUG D#311 => &_251->_M_t
  # DEBUG this => D#311
  # DEBUG __k => &head_id
  # DEBUG this => D#311
  __i$_M_node_157 = &MEM[(struct _Rb_tree *)_251]._M_impl._M_header;
  __i$_M_node_916 = MEM[(struct _Rb_tree_node_base * *)_251 + 16B];
  # DEBUG D#42 => D#311
  # DEBUG this => D#42
  # DEBUG D#310 => D#311
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &head_id
  # DEBUG __y => __i$_M_node_157
  # DEBUG __x => __i$_M_node_916
  if (__i$_M_node_916 == 0B)
    goto <bb 607>;
  else
    goto <bb 347>;

  <bb 345>:
  # __i$_M_node_300 = PHI <__i$_M_node_920(349), __i$_M_node_921(350)>
  # __i$_M_node_791 = PHI <__i$_M_node_1019(349), __i$_M_node_1002(350)>
  # DEBUG __y => __i$_M_node_791
  # DEBUG __x => __i$_M_node_300
  if (__i$_M_node_300 == 0B)
    goto <bb 351>;
  else
    goto <bb 346>;

  <bb 346>:
  goto <bb 348>;

  <bb 347>:

  <bb 348>:
  # __i$_M_node_1019 = PHI <__i$_M_node_916(347), __i$_M_node_300(346)>
  # __i$_M_node_1002 = PHI <__i$_M_node_157(347), __i$_M_node_791(346)>
  # DEBUG __y => __i$_M_node_1002
  # DEBUG __x => __i$_M_node_1019
  # DEBUG __x => __i$_M_node_1019
  # DEBUG __x => __i$_M_node_1019
  # DEBUG this => __i$_M_node_1019
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_1019]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__i$_M_node_1019 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _918 = MEM[(const int &)__i$_M_node_1019 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => &head_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (head_id.263_159 <= _918)
    goto <bb 349>;
  else
    goto <bb 350>;

  <bb 349>:
  # DEBUG __y => __i$_M_node_1019
  __i$_M_node_920 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1019 + 16B];
  # DEBUG D#66 => __i$_M_node_1019
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 345>;

  <bb 350>:
  __i$_M_node_921 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1019 + 24B];
  # DEBUG D#65 => __i$_M_node_1019
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 345>;

  <bb 351>:
  # __i$_M_node_1707 = PHI <__i$_M_node_791(345)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1707
  # DEBUG __i$_M_node => __i$_M_node_1707
  # DEBUG this => _251
  # DEBUG D#72 => &_251->_M_t
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_157
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_157 == __i$_M_node_1707)
    goto <bb 607>;
  else
    goto <bb 352>;

  <bb 352>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1707
  # DEBUG D#751 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1707]._M_value_field
  # DEBUG __r => D#751
  # DEBUG D#752 => &MEM[(struct pair &)__i$_M_node_1707 + 32].first
  # DEBUG D#105 => _251
  # DEBUG this => D#105
  # DEBUG D#104 => D#105
  # DEBUG D#103 => &D#104->_M_t
  # DEBUG D#102 => D#103
  # DEBUG this => D#102
  # DEBUG D#53 => &head_id
  _924 = MEM[(const int &)__i$_M_node_1707 + 32];
  # DEBUG D#54 => D#752
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (head_id.263_159 < _924)
    goto <bb 607>;
  else
    goto <bb 354>;

  <bb 353>:
  __i$_M_node_928 = MEM[(struct _Rb_tree_iterator *)&D.90178];
  # DEBUG __i$_M_node => __i$_M_node_928
  # DEBUG this => &D.90180
  # DEBUG D#537 => &D.90180.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.90180 + 8B]._M_t
  _929 = MEM[(struct _Rb_tree_node_base * *)&D.90180 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.90180 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.90180 + 8B]._M_t, _929);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.90180 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.90180 ={v} {CLOBBER};
  # DEBUG this => &D.90179
  # DEBUG this => &D.90179._M_t
  _930 = MEM[(struct _Rb_tree_node_base * *)&D.90179 + 16B];
  # DEBUG D#58 => &D.90179._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.90179._M_t, _930);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.90179]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.90179 ={v} {CLOBBER};

  <bb 354>:
  # __i$_M_node_931 = PHI <__i$_M_node_1707(352), __i$_M_node_928(353)>
  # DEBUG __i$_M_node => __i$_M_node_931
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_931
  # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_931]._M_value_field
  # DEBUG __r => D#753
  # DEBUG D#1281 => &MEM[(struct pair &)__i$_M_node_931 + 32].second
  # DEBUG D#755 => {CLOBBER}
  # DEBUG __i$_M_node => D#755
  # DEBUG this => D#1281
  # DEBUG __k => &body_id
  # DEBUG this => D#1281
  # DEBUG __x => &body_id
  # DEBUG D#396 => &D#1281->_M_t
  # DEBUG this => D#396
  # DEBUG __k => &body_id
  # DEBUG this => D#396
  __i$_M_node_945 = &MEM[(struct _Rb_tree *)__i$_M_node_931 + 40B]._M_impl._M_header;
  __i$_M_node_946 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_931 + 56B];
  # DEBUG D#58 => D#396
  # DEBUG this => D#58
  # DEBUG D#395 => D#396
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &body_id
  # DEBUG __y => __i$_M_node_945
  # DEBUG __x => __i$_M_node_946
  if (__i$_M_node_946 == 0B)
    goto <bb 608>;
  else
    goto <bb 360>;

<L131>:
  # DEBUG this => &D.90180
  # DEBUG D#537 => &D.90180.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.90180 + 8B]._M_t
  _933 = MEM[(struct _Rb_tree_node_base * *)&D.90180 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.90180 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.90180 + 8B]._M_t, _933);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.90180 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.90180 ={v} {CLOBBER};
  resx 56

<L132>:
  # DEBUG this => &D.90179
  # DEBUG this => &D.90179._M_t
  _934 = MEM[(struct _Rb_tree_node_base * *)&D.90179 + 16B];
  # DEBUG D#58 => &D.90179._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.90179._M_t, _934);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.90179]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.90179 ={v} {CLOBBER};
  resx 55

<L208>:
  goto <bb 561> (<L105>);

  <bb 358>:
  # __i$_M_node_760 = PHI <__i$_M_node_950(362), __i$_M_node_951(363)>
  # __i$_M_node_299 = PHI <__i$_M_node_955(362), __i$_M_node_925(363)>
  # DEBUG __y => __i$_M_node_299
  # DEBUG __x => __i$_M_node_760
  if (__i$_M_node_760 == 0B)
    goto <bb 364>;
  else
    goto <bb 359>;

  <bb 359>:
  goto <bb 361>;

  <bb 360>:

  <bb 361>:
  # __i$_M_node_955 = PHI <__i$_M_node_946(360), __i$_M_node_760(359)>
  # __i$_M_node_925 = PHI <__i$_M_node_945(360), __i$_M_node_299(359)>
  # DEBUG __y => __i$_M_node_925
  # DEBUG __x => __i$_M_node_955
  # DEBUG __x => __i$_M_node_955
  # DEBUG __x => __i$_M_node_955
  # DEBUG this => __i$_M_node_955
  # DEBUG D#391 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_955]._M_value_field
  # DEBUG __r => D#391
  # DEBUG __x => D#391
  # DEBUG this => D#133
  # DEBUG D#392 => &MEM[(const struct pair &)__i$_M_node_955 + 32].first
  # DEBUG D#393 => &D#394->_M_impl._M_key_compare
  # DEBUG D#52 => D#393
  _948 = MEM[(const int &)__i$_M_node_955 + 32];
  # DEBUG D#53 => D#392
  # DEBUG D#54 => &body_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_215 <= _948)
    goto <bb 362>;
  else
    goto <bb 363>;

  <bb 362>:
  # DEBUG __y => __i$_M_node_955
  __i$_M_node_950 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_955 + 16B];
  # DEBUG D#108 => __i$_M_node_955
  # DEBUG __x => D#108
  # DEBUG __x => NULL
  goto <bb 358>;

  <bb 363>:
  __i$_M_node_951 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_955 + 24B];
  # DEBUG D#107 => __i$_M_node_955
  # DEBUG __x => D#107
  # DEBUG __x => NULL
  goto <bb 358>;

  <bb 364>:
  # __i$_M_node_1718 = PHI <__i$_M_node_299(358)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1718
  # DEBUG __i$_M_node => __i$_M_node_1718
  # DEBUG this => D#1281
  # DEBUG D#78 => &D#1281->_M_t
  # DEBUG this => D#78
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_945
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_1718 == __i$_M_node_945)
    goto <bb 608>;
  else
    goto <bb 365>;

  <bb 365>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1718
  # DEBUG D#681 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1718]._M_value_field
  # DEBUG __r => D#681
  # DEBUG D#682 => &MEM[(struct pair &)__i$_M_node_1718 + 32].first
  # DEBUG D#85 => D#1281
  # DEBUG this => D#85
  # DEBUG D#84 => D#85
  # DEBUG D#83 => &D#84->_M_t
  # DEBUG D#82 => D#83
  # DEBUG this => D#82
  # DEBUG D#53 => &body_id
  _954 = MEM[(const int &)__i$_M_node_1718 + 32];
  # DEBUG D#54 => D#682
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_215 < _954)
    goto <bb 608>;
  else
    goto <bb 367>;

  <bb 366>:
  __i$_M_node_958 = MEM[(struct _Rb_tree_iterator *)&D.90227];
  # DEBUG __i$_M_node => __i$_M_node_958
  D.90228 ={v} {CLOBBER};

  <bb 367>:
  # __i$_M_node_959 = PHI <__i$_M_node_1718(365), __i$_M_node_958(366)>
  # DEBUG __i$_M_node => __i$_M_node_959
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_959
  # DEBUG D#683 => &MEM[(struct _Rb_tree_node *)__i$_M_node_959]._M_value_field
  # DEBUG __r => D#683
  # DEBUG D#685 => {CLOBBER}
  # DEBUG __i$_M_node => D#685
  # DEBUG this => &D.59367
  # DEBUG __a => &D.59365
  # DEBUG __b => &D.59366
  MEM[(struct mapped_type *)__i$_M_node_959 + 36B] = -1;
  MEM[(struct mapped_type *)__i$_M_node_959 + 40B] = 1;
  goto <bb 441>;

  <bb 368>:
  _179 = _147 & _802;
  if (_179 != 0)
    goto <bb 369>;
  else
    goto <bb 441>;

  <bb 369>:
  # DEBUG D#897 => &this_44(D)->router_list
  _252 = MEM[(struct map * *)this_44(D) + 440B];
  # DEBUG D#34 => D#897
  # DEBUG __n => 1
  # DEBUG this => D#34
  # DEBUG D#1285 => _252 + 48
  # DEBUG this => D#1285
  # DEBUG __k => &head_id
  # DEBUG this => D#1285
  # DEBUG __x => &head_id
  # DEBUG D#311 => &D#1285->_M_t
  # DEBUG this => D#311
  # DEBUG __k => &head_id
  # DEBUG this => D#311
  __i$_M_node_164 = &MEM[(struct _Rb_tree *)_252 + 48B]._M_impl._M_header;
  __i$_M_node_963 = MEM[(struct _Rb_tree_node_base * *)_252 + 64B];
  # DEBUG D#42 => D#311
  # DEBUG this => D#42
  # DEBUG D#310 => D#311
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &head_id
  # DEBUG __y => __i$_M_node_164
  # DEBUG __x => __i$_M_node_963
  if (__i$_M_node_963 == 0B)
    goto <bb 610>;
  else
    goto <bb 370>;

  <bb 370>:
  pretmp_1570 = head_id;
  goto <bb 373>;

  <bb 371>:
  # __i$_M_node_914 = PHI <__i$_M_node_967(374), __i$_M_node_968(375)>
  # __i$_M_node_936 = PHI <__i$_M_node_891(374), __i$_M_node_874(375)>
  # DEBUG __y => __i$_M_node_936
  # DEBUG __x => __i$_M_node_914
  if (__i$_M_node_914 == 0B)
    goto <bb 376>;
  else
    goto <bb 372>;

  <bb 372>:

  <bb 373>:
  # __i$_M_node_891 = PHI <__i$_M_node_963(370), __i$_M_node_914(372)>
  # __i$_M_node_874 = PHI <__i$_M_node_164(370), __i$_M_node_936(372)>
  # DEBUG __y => __i$_M_node_874
  # DEBUG __x => __i$_M_node_891
  # DEBUG __x => __i$_M_node_891
  # DEBUG __x => __i$_M_node_891
  # DEBUG this => __i$_M_node_891
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_891]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__i$_M_node_891 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _965 = MEM[(const int &)__i$_M_node_891 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => &head_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_965 >= pretmp_1570)
    goto <bb 374>;
  else
    goto <bb 375>;

  <bb 374>:
  # DEBUG __y => __i$_M_node_891
  __i$_M_node_967 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_891 + 16B];
  # DEBUG D#66 => __i$_M_node_891
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 371>;

  <bb 375>:
  __i$_M_node_968 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_891 + 24B];
  # DEBUG D#65 => __i$_M_node_891
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 371>;

  <bb 376>:
  # __i$_M_node_1676 = PHI <__i$_M_node_936(371)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1676
  # DEBUG __i$_M_node => __i$_M_node_1676
  # DEBUG this => D#1285
  # DEBUG D#72 => &D#1285->_M_t
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_164
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_164 == __i$_M_node_1676)
    goto <bb 611>;
  else
    goto <bb 377>;

  <bb 377>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1676
  # DEBUG D#751 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1676]._M_value_field
  # DEBUG __r => D#751
  # DEBUG D#752 => &MEM[(struct pair &)__i$_M_node_1676 + 32].first
  # DEBUG D#105 => D#1285
  # DEBUG this => D#105
  # DEBUG D#104 => D#105
  # DEBUG D#103 => &D#104->_M_t
  # DEBUG D#102 => D#103
  # DEBUG this => D#102
  # DEBUG D#53 => &head_id
  _971 = MEM[(const int &)__i$_M_node_1676 + 32];
  # DEBUG D#54 => D#752
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_971 > pretmp_1570)
    goto <bb 611>;
  else
    goto <bb 379>;

  <bb 378>:
  __i$_M_node_975 = MEM[(struct _Rb_tree_iterator *)&D.90282];
  # DEBUG __i$_M_node => __i$_M_node_975
  # DEBUG this => &D.90284
  # DEBUG D#537 => &D.90284.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.90284 + 8B]._M_t
  _976 = MEM[(struct _Rb_tree_node_base * *)&D.90284 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.90284 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.90284 + 8B]._M_t, _976);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.90284 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.90284 ={v} {CLOBBER};
  # DEBUG this => &D.90283
  # DEBUG this => &D.90283._M_t
  _977 = MEM[(struct _Rb_tree_node_base * *)&D.90283 + 16B];
  # DEBUG D#58 => &D.90283._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.90283._M_t, _977);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.90283]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.90283 ={v} {CLOBBER};

  <bb 379>:
  # __i$_M_node_978 = PHI <__i$_M_node_1676(377), __i$_M_node_975(378)>
  # DEBUG __i$_M_node => __i$_M_node_978
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_978
  # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_978]._M_value_field
  # DEBUG __r => D#753
  # DEBUG D#1286 => &MEM[(struct pair &)__i$_M_node_978 + 32].second
  # DEBUG D#755 => {CLOBBER}
  # DEBUG __i$_M_node => D#755
  # DEBUG this => D#1286
  # DEBUG __k => &body_id
  # DEBUG this => D#1286
  # DEBUG __x => &body_id
  # DEBUG D#396 => &D#1286->_M_t
  # DEBUG this => D#396
  # DEBUG __k => &body_id
  # DEBUG this => D#396
  __i$_M_node_992 = &MEM[(struct _Rb_tree *)__i$_M_node_978 + 40B]._M_impl._M_header;
  __i$_M_node_993 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_978 + 56B];
  # DEBUG D#58 => D#396
  # DEBUG this => D#58
  # DEBUG D#395 => D#396
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &body_id
  # DEBUG __y => __i$_M_node_992
  # DEBUG __x => __i$_M_node_993
  if (__i$_M_node_993 == 0B)
    goto <bb 612>;
  else
    goto <bb 385>;

<L133>:
  # DEBUG this => &D.90284
  # DEBUG D#537 => &D.90284.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.90284 + 8B]._M_t
  _980 = MEM[(struct _Rb_tree_node_base * *)&D.90284 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.90284 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.90284 + 8B]._M_t, _980);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.90284 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.90284 ={v} {CLOBBER};
  resx 58

<L134>:
  # DEBUG this => &D.90283
  # DEBUG this => &D.90283._M_t
  _981 = MEM[(struct _Rb_tree_node_base * *)&D.90283 + 16B];
  # DEBUG D#58 => &D.90283._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.90283._M_t, _981);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.90283]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.90283 ={v} {CLOBBER};
  resx 57

<L209>:
  goto <bb 561> (<L105>);

  <bb 383>:
  # __i$_M_node_897 = PHI <__i$_M_node_997(387), __i$_M_node_998(388)>
  # __i$_M_node_915 = PHI <__i$_M_node_827(387), __i$_M_node_810(388)>
  # DEBUG __y => __i$_M_node_915
  # DEBUG __x => __i$_M_node_897
  if (__i$_M_node_897 == 0B)
    goto <bb 389>;
  else
    goto <bb 384>;

  <bb 384>:
  goto <bb 386>;

  <bb 385>:

  <bb 386>:
  # __i$_M_node_827 = PHI <__i$_M_node_993(385), __i$_M_node_897(384)>
  # __i$_M_node_810 = PHI <__i$_M_node_992(385), __i$_M_node_915(384)>
  # DEBUG __y => __i$_M_node_810
  # DEBUG __x => __i$_M_node_827
  # DEBUG __x => __i$_M_node_827
  # DEBUG __x => __i$_M_node_827
  # DEBUG this => __i$_M_node_827
  # DEBUG D#391 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_827]._M_value_field
  # DEBUG __r => D#391
  # DEBUG __x => D#391
  # DEBUG this => D#133
  # DEBUG D#392 => &MEM[(const struct pair &)__i$_M_node_827 + 32].first
  # DEBUG D#393 => &D#394->_M_impl._M_key_compare
  # DEBUG D#52 => D#393
  _995 = MEM[(const int &)__i$_M_node_827 + 32];
  # DEBUG D#53 => D#392
  # DEBUG D#54 => &body_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_215 <= _995)
    goto <bb 387>;
  else
    goto <bb 388>;

  <bb 387>:
  # DEBUG __y => __i$_M_node_827
  __i$_M_node_997 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_827 + 16B];
  # DEBUG D#108 => __i$_M_node_827
  # DEBUG __x => D#108
  # DEBUG __x => NULL
  goto <bb 383>;

  <bb 388>:
  __i$_M_node_998 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_827 + 24B];
  # DEBUG D#107 => __i$_M_node_827
  # DEBUG __x => D#107
  # DEBUG __x => NULL
  goto <bb 383>;

  <bb 389>:
  # __i$_M_node_1677 = PHI <__i$_M_node_915(383)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1677
  # DEBUG __i$_M_node => __i$_M_node_1677
  # DEBUG this => D#1286
  # DEBUG D#78 => &D#1286->_M_t
  # DEBUG this => D#78
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_992
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_1677 == __i$_M_node_992)
    goto <bb 612>;
  else
    goto <bb 390>;

  <bb 390>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1677
  # DEBUG D#681 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1677]._M_value_field
  # DEBUG __r => D#681
  # DEBUG D#682 => &MEM[(struct pair &)__i$_M_node_1677 + 32].first
  # DEBUG D#85 => D#1286
  # DEBUG this => D#85
  # DEBUG D#84 => D#85
  # DEBUG D#83 => &D#84->_M_t
  # DEBUG D#82 => D#83
  # DEBUG this => D#82
  # DEBUG D#53 => &body_id
  _1001 = MEM[(const int &)__i$_M_node_1677 + 32];
  # DEBUG D#54 => D#682
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_215 < _1001)
    goto <bb 612>;
  else
    goto <bb 392>;

  <bb 391>:
  __i$_M_node_1005 = MEM[(struct _Rb_tree_iterator *)&D.90331];
  # DEBUG __i$_M_node => __i$_M_node_1005
  D.90332 ={v} {CLOBBER};

  <bb 392>:
  # __i$_M_node_1006 = PHI <__i$_M_node_1677(390), __i$_M_node_1005(391)>
  # DEBUG __i$_M_node => __i$_M_node_1006
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1006
  # DEBUG D#683 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1006]._M_value_field
  # DEBUG __r => D#683
  # DEBUG D#685 => {CLOBBER}
  # DEBUG __i$_M_node => D#685
  # DEBUG this => &D.59370
  # DEBUG __a => &D.59368
  # DEBUG __b => &D.59369
  MEM[(struct mapped_type *)__i$_M_node_1006 + 36B] = -1;
  MEM[(struct mapped_type *)__i$_M_node_1006 + 40B] = 1;
  # DEBUG D#898 => &this_44(D)->router_list
  _253 = MEM[(struct map * *)this_44(D) + 440B];
  # DEBUG D#34 => D#898
  # DEBUG __n => 1
  # DEBUG this => D#34
  # DEBUG D#1287 => _253 + 48
  # DEBUG this => D#1287
  # DEBUG __k => &body_id
  # DEBUG this => D#1287
  # DEBUG __x => &body_id
  # DEBUG D#311 => &D#1287->_M_t
  # DEBUG this => D#311
  # DEBUG __k => &body_id
  # DEBUG this => D#311
  __i$_M_node_183 = &MEM[(struct _Rb_tree *)_253 + 48B]._M_impl._M_header;
  __i$_M_node_1010 = MEM[(struct _Rb_tree_node_base * *)_253 + 64B];
  # DEBUG D#42 => D#311
  # DEBUG this => D#42
  # DEBUG D#310 => D#311
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &body_id
  # DEBUG __y => __i$_M_node_183
  # DEBUG __x => __i$_M_node_1010
  if (__i$_M_node_1010 == 0B)
    goto <bb 614>;
  else
    goto <bb 395>;

  <bb 393>:
  # __i$_M_node_21 = PHI <__i$_M_node_1014(397), __i$_M_node_1015(398)>
  # __i$_M_node_898 = PHI <__i$_M_node_750(397), __i$_M_node_733(398)>
  # DEBUG __y => __i$_M_node_898
  # DEBUG __x => __i$_M_node_21
  if (__i$_M_node_21 == 0B)
    goto <bb 399>;
  else
    goto <bb 394>;

  <bb 394>:
  goto <bb 396>;

  <bb 395>:

  <bb 396>:
  # __i$_M_node_750 = PHI <__i$_M_node_1010(395), __i$_M_node_21(394)>
  # __i$_M_node_733 = PHI <__i$_M_node_183(395), __i$_M_node_898(394)>
  # DEBUG __y => __i$_M_node_733
  # DEBUG __x => __i$_M_node_750
  # DEBUG __x => __i$_M_node_750
  # DEBUG __x => __i$_M_node_750
  # DEBUG this => __i$_M_node_750
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_750]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__i$_M_node_750 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _1012 = MEM[(const int &)__i$_M_node_750 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => &body_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_215 <= _1012)
    goto <bb 397>;
  else
    goto <bb 398>;

  <bb 397>:
  # DEBUG __y => __i$_M_node_750
  __i$_M_node_1014 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_750 + 16B];
  # DEBUG D#66 => __i$_M_node_750
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 393>;

  <bb 398>:
  __i$_M_node_1015 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_750 + 24B];
  # DEBUG D#65 => __i$_M_node_750
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 393>;

  <bb 399>:
  # __i$_M_node_1681 = PHI <__i$_M_node_898(393)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1681
  # DEBUG __i$_M_node => __i$_M_node_1681
  # DEBUG this => D#1287
  # DEBUG D#72 => &D#1287->_M_t
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_183
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_183 == __i$_M_node_1681)
    goto <bb 614>;
  else
    goto <bb 400>;

  <bb 400>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1681
  # DEBUG D#751 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1681]._M_value_field
  # DEBUG __r => D#751
  # DEBUG D#752 => &MEM[(struct pair &)__i$_M_node_1681 + 32].first
  # DEBUG D#105 => D#1287
  # DEBUG this => D#105
  # DEBUG D#104 => D#105
  # DEBUG D#103 => &D#104->_M_t
  # DEBUG D#102 => D#103
  # DEBUG this => D#102
  # DEBUG D#53 => &body_id
  _1018 = MEM[(const int &)__i$_M_node_1681 + 32];
  # DEBUG D#54 => D#752
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_215 < _1018)
    goto <bb 614>;
  else
    goto <bb 402>;

  <bb 401>:
  __i$_M_node_1022 = MEM[(struct _Rb_tree_iterator *)&D.90386];
  # DEBUG __i$_M_node => __i$_M_node_1022
  # DEBUG this => &D.90388
  # DEBUG D#537 => &D.90388.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.90388 + 8B]._M_t
  _1023 = MEM[(struct _Rb_tree_node_base * *)&D.90388 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.90388 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.90388 + 8B]._M_t, _1023);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.90388 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.90388 ={v} {CLOBBER};
  # DEBUG this => &D.90387
  # DEBUG this => &D.90387._M_t
  _1024 = MEM[(struct _Rb_tree_node_base * *)&D.90387 + 16B];
  # DEBUG D#58 => &D.90387._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.90387._M_t, _1024);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.90387]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.90387 ={v} {CLOBBER};

  <bb 402>:
  # __i$_M_node_1025 = PHI <__i$_M_node_1681(400), __i$_M_node_1022(401)>
  # DEBUG __i$_M_node => __i$_M_node_1025
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1025
  # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1025]._M_value_field
  # DEBUG __r => D#753
  # DEBUG D#755 => {CLOBBER}
  # DEBUG __i$_M_node => D#755
  # DEBUG this => NULL
  # DEBUG __x => &head_id
  # DEBUG this => D#423
  __y_185 = &MEM[(const struct _Rb_tree *)__i$_M_node_1025 + 40B]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => __y_185
  # DEBUG this => D#424
  # DEBUG __k => &head_id
  # DEBUG this => D#424
  __y_347 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1025 + 56B];
  # DEBUG D#106 => D#424
  # DEBUG this => D#106
  # DEBUG D#400 => D#424
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &head_id
  # DEBUG __y => __y_185
  # DEBUG __x => __y_347
  if (__y_347 == 0B)
    goto <bb 414>;
  else
    goto <bb 403>;

  <bb 403>:
  pretmp_1566 = head_id;
  goto <bb 409>;

<L135>:
  # DEBUG this => &D.90388
  # DEBUG D#537 => &D.90388.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.90388 + 8B]._M_t
  _1027 = MEM[(struct _Rb_tree_node_base * *)&D.90388 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.90388 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.90388 + 8B]._M_t, _1027);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.90388 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.90388 ={v} {CLOBBER};
  resx 60

<L136>:
  # DEBUG this => &D.90387
  # DEBUG this => &D.90387._M_t
  _1028 = MEM[(struct _Rb_tree_node_base * *)&D.90387 + 16B];
  # DEBUG D#58 => &D.90387._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.90387._M_t, _1028);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.90387]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.90387 ={v} {CLOBBER};
  resx 59

<L210>:
  goto <bb 561> (<L105>);

  <bb 407>:
  # __y_880 = PHI <__y_352(411), __y_351(410)>
  # __y_22 = PHI <__y_1944(411), __y_1943(410)>
  # DEBUG __y => __y_22
  # DEBUG __x => __y_880
  if (__y_880 == 0B)
    goto <bb 412>;
  else
    goto <bb 408>;

  <bb 408>:

  <bb 409>:
  # __y_1943 = PHI <__y_347(403), __y_880(408)>
  # __y_1944 = PHI <__y_185(403), __y_22(408)>
  # DEBUG __y => __y_1944
  # DEBUG __x => __y_1943
  # DEBUG __x => __y_1943
  # DEBUG __x => __y_1943
  # DEBUG this => __y_1943
  # DEBUG D#391 => &__y_1943->_M_value_field
  # DEBUG __r => D#391
  # DEBUG __x => D#391
  # DEBUG this => D#133
  # DEBUG D#397 => &MEM[(const struct pair &)__y_1943 + 32].first
  # DEBUG D#398 => &D#399->_M_impl._M_key_compare
  # DEBUG D#52 => D#398
  _349 = MEM[(const int &)__y_1943 + 32];
  # DEBUG D#53 => D#397
  # DEBUG D#54 => &head_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_349 >= pretmp_1566)
    goto <bb 410>;
  else
    goto <bb 411>;

  <bb 410>:
  # DEBUG __y => __y_1943
  __y_351 = MEM[(struct _Rb_tree_node_base * *)__y_1943 + 16B];
  # DEBUG D#131 => __y_1943
  # DEBUG __x => D#131
  # DEBUG __x => NULL
  goto <bb 407>;

  <bb 411>:
  __y_352 = MEM[(struct _Rb_tree_node_base * *)__y_1943 + 24B];
  # DEBUG D#132 => __y_1943
  # DEBUG __x => D#132
  # DEBUG __x => NULL
  goto <bb 407>;

  <bb 412>:
  # __y_1747 = PHI <__y_22(407)>
  # DEBUG this => NULL
  # DEBUG __x => __y_1747
  # DEBUG __j$_M_node => __y_1747
  # DEBUG this => D#424
  # DEBUG this => NULL
  # DEBUG __x => __y_185
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (__y_1747 == __y_185)
    goto <bb 414>;
  else
    goto <bb 413>;

  <bb 413>:
  # DEBUG __x => __y_1747
  # DEBUG __x => __y_1747
  # DEBUG this => __y_1747
  # DEBUG D#401 => &__y_1747->_M_value_field
  # DEBUG __r => D#401
  # DEBUG __x => D#401
  # DEBUG this => D#133
  # DEBUG D#420 => &MEM[(const struct pair &)__y_1747 + 32].first
  # DEBUG D#422 => &MEM[(const struct _Rb_tree *)D#424]._M_impl._M_key_compare
  # DEBUG D#52 => D#422
  # DEBUG D#53 => &head_id
  _355 = MEM[(const int &)__y_1747 + 32];
  # DEBUG D#54 => D#420
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  # DEBUG D#421 => {CLOBBER}
  # DEBUG __j$_M_node => D#421
  # DEBUG this => NULL
  # DEBUG __x => NULL
  if (_355 > pretmp_1566)
    goto <bb 414>;
  else
    goto <bb 441>;

  <bb 414>:
  # DEBUG D#899 => &this_44(D)->router_list
  _254 = MEM[(struct map * *)this_44(D) + 440B];
  # DEBUG D#34 => D#899
  # DEBUG __n => 1
  # DEBUG this => D#34
  # DEBUG D#1288 => _254 + 48
  # DEBUG this => D#1288
  # DEBUG __k => &body_id
  # DEBUG this => D#1288
  # DEBUG __x => &body_id
  # DEBUG D#311 => &D#1288->_M_t
  # DEBUG this => D#311
  # DEBUG __k => &body_id
  # DEBUG this => D#311
  __i$_M_node_1039 = &MEM[(struct _Rb_tree *)_254 + 48B]._M_impl._M_header;
  __i$_M_node_1040 = MEM[(struct _Rb_tree_node_base * *)_254 + 64B];
  # DEBUG D#42 => D#311
  # DEBUG this => D#42
  # DEBUG D#310 => D#311
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &body_id
  # DEBUG __y => __i$_M_node_1039
  # DEBUG __x => __i$_M_node_1040
  if (__i$_M_node_1040 == 0B)
    goto <bb 615>;
  else
    goto <bb 417>;

  <bb 415>:
  # __i$_M_node_854 = PHI <__i$_M_node_1044(419), __i$_M_node_1045(420)>
  # __i$_M_node_881 = PHI <__i$_M_node_673(419), __i$_M_node_643(420)>
  # DEBUG __y => __i$_M_node_881
  # DEBUG __x => __i$_M_node_854
  if (__i$_M_node_854 == 0B)
    goto <bb 421>;
  else
    goto <bb 416>;

  <bb 416>:
  goto <bb 418>;

  <bb 417>:

  <bb 418>:
  # __i$_M_node_673 = PHI <__i$_M_node_1040(417), __i$_M_node_854(416)>
  # __i$_M_node_643 = PHI <__i$_M_node_1039(417), __i$_M_node_881(416)>
  # DEBUG __y => __i$_M_node_643
  # DEBUG __x => __i$_M_node_673
  # DEBUG __x => __i$_M_node_673
  # DEBUG __x => __i$_M_node_673
  # DEBUG this => __i$_M_node_673
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_673]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__i$_M_node_673 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _1042 = MEM[(const int &)__i$_M_node_673 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => &body_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_215 <= _1042)
    goto <bb 419>;
  else
    goto <bb 420>;

  <bb 419>:
  # DEBUG __y => __i$_M_node_673
  __i$_M_node_1044 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_673 + 16B];
  # DEBUG D#66 => __i$_M_node_673
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 415>;

  <bb 420>:
  __i$_M_node_1045 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_673 + 24B];
  # DEBUG D#65 => __i$_M_node_673
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 415>;

  <bb 421>:
  # __i$_M_node_1701 = PHI <__i$_M_node_881(415)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1701
  # DEBUG __i$_M_node => __i$_M_node_1701
  # DEBUG this => D#1288
  # DEBUG D#72 => &D#1288->_M_t
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1039
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_1701 == __i$_M_node_1039)
    goto <bb 615>;
  else
    goto <bb 422>;

  <bb 422>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1701
  # DEBUG D#751 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1701]._M_value_field
  # DEBUG __r => D#751
  # DEBUG D#752 => &MEM[(struct pair &)__i$_M_node_1701 + 32].first
  # DEBUG D#105 => D#1288
  # DEBUG this => D#105
  # DEBUG D#104 => D#105
  # DEBUG D#103 => &D#104->_M_t
  # DEBUG D#102 => D#103
  # DEBUG this => D#102
  # DEBUG D#53 => &body_id
  _1048 = MEM[(const int &)__i$_M_node_1701 + 32];
  # DEBUG D#54 => D#752
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (body_id_215 < _1048)
    goto <bb 615>;
  else
    goto <bb 424>;

  <bb 423>:
  __i$_M_node_1052 = MEM[(struct _Rb_tree_iterator *)&D.90462];
  # DEBUG __i$_M_node => __i$_M_node_1052
  # DEBUG this => &D.90464
  # DEBUG D#537 => &D.90464.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.90464 + 8B]._M_t
  _1053 = MEM[(struct _Rb_tree_node_base * *)&D.90464 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.90464 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.90464 + 8B]._M_t, _1053);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.90464 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.90464 ={v} {CLOBBER};
  # DEBUG this => &D.90463
  # DEBUG this => &D.90463._M_t
  _1054 = MEM[(struct _Rb_tree_node_base * *)&D.90463 + 16B];
  # DEBUG D#58 => &D.90463._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.90463._M_t, _1054);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.90463]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.90463 ={v} {CLOBBER};

  <bb 424>:
  # __i$_M_node_1055 = PHI <__i$_M_node_1701(422), __i$_M_node_1052(423)>
  # DEBUG __i$_M_node => __i$_M_node_1055
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1055
  # DEBUG D#753 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1055]._M_value_field
  # DEBUG __r => D#753
  # DEBUG D#1289 => &MEM[(struct pair &)__i$_M_node_1055 + 32].second
  # DEBUG D#755 => {CLOBBER}
  # DEBUG __i$_M_node => D#755
  # DEBUG this => D#1289
  # DEBUG __k => &head_id
  # DEBUG this => D#1289
  # DEBUG __x => &head_id
  # DEBUG D#396 => &D#1289->_M_t
  # DEBUG this => D#396
  # DEBUG __k => &head_id
  # DEBUG this => D#396
  __i$_M_node_1069 = &MEM[(struct _Rb_tree *)__i$_M_node_1055 + 40B]._M_impl._M_header;
  __i$_M_node_1070 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_1055 + 56B];
  # DEBUG D#58 => D#396
  # DEBUG this => D#58
  # DEBUG D#395 => D#396
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &head_id
  # DEBUG __y => __i$_M_node_1069
  # DEBUG __x => __i$_M_node_1070
  if (__i$_M_node_1070 == 0B)
    goto <bb 616>;
  else
    goto <bb 425>;

  <bb 425>:
  pretmp_1564 = head_id;
  goto <bb 431>;

<L137>:
  # DEBUG this => &D.90464
  # DEBUG D#537 => &D.90464.second
  # DEBUG this => D#537
  # DEBUG this => &MEM[(struct map *)&D.90464 + 8B]._M_t
  _1057 = MEM[(struct _Rb_tree_node_base * *)&D.90464 + 24B];
  # DEBUG D#58 => &MEM[(struct map *)&D.90464 + 8B]._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&MEM[(struct map *)&D.90464 + 8B]._M_t, _1057);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.90464 + 8B]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.90464 ={v} {CLOBBER};
  resx 62

<L138>:
  # DEBUG this => &D.90463
  # DEBUG this => &D.90463._M_t
  _1058 = MEM[(struct _Rb_tree_node_base * *)&D.90463 + 16B];
  # DEBUG D#58 => &D.90463._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.90463._M_t, _1058);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.90463]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.90463 ={v} {CLOBBER};
  resx 61

<L211>:
  goto <bb 561> (<L105>);

  <bb 429>:
  # __i$_M_node_833 = PHI <__i$_M_node_1074(432), __i$_M_node_1075(433)>
  # __i$_M_node_855 = PHI <__i$_M_node_344(432), __i$_M_node_332(433)>
  # DEBUG __y => __i$_M_node_855
  # DEBUG __x => __i$_M_node_833
  if (__i$_M_node_833 == 0B)
    goto <bb 434>;
  else
    goto <bb 430>;

  <bb 430>:

  <bb 431>:
  # __i$_M_node_344 = PHI <__i$_M_node_1070(425), __i$_M_node_833(430)>
  # __i$_M_node_332 = PHI <__i$_M_node_1069(425), __i$_M_node_855(430)>
  # DEBUG __y => __i$_M_node_332
  # DEBUG __x => __i$_M_node_344
  # DEBUG __x => __i$_M_node_344
  # DEBUG __x => __i$_M_node_344
  # DEBUG this => __i$_M_node_344
  # DEBUG D#391 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_344]._M_value_field
  # DEBUG __r => D#391
  # DEBUG __x => D#391
  # DEBUG this => D#133
  # DEBUG D#392 => &MEM[(const struct pair &)__i$_M_node_344 + 32].first
  # DEBUG D#393 => &D#394->_M_impl._M_key_compare
  # DEBUG D#52 => D#393
  _1072 = MEM[(const int &)__i$_M_node_344 + 32];
  # DEBUG D#53 => D#392
  # DEBUG D#54 => &head_id
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_1072 >= pretmp_1564)
    goto <bb 432>;
  else
    goto <bb 433>;

  <bb 432>:
  # DEBUG __y => __i$_M_node_344
  __i$_M_node_1074 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_344 + 16B];
  # DEBUG D#108 => __i$_M_node_344
  # DEBUG __x => D#108
  # DEBUG __x => NULL
  goto <bb 429>;

  <bb 433>:
  __i$_M_node_1075 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_344 + 24B];
  # DEBUG D#107 => __i$_M_node_344
  # DEBUG __x => D#107
  # DEBUG __x => NULL
  goto <bb 429>;

  <bb 434>:
  # __i$_M_node_1702 = PHI <__i$_M_node_855(429)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1702
  # DEBUG __i$_M_node => __i$_M_node_1702
  # DEBUG this => D#1289
  # DEBUG D#78 => &D#1289->_M_t
  # DEBUG this => D#78
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1069
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_1702 == __i$_M_node_1069)
    goto <bb 617>;
  else
    goto <bb 435>;

  <bb 435>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1702
  # DEBUG D#681 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1702]._M_value_field
  # DEBUG __r => D#681
  # DEBUG D#682 => &MEM[(struct pair &)__i$_M_node_1702 + 32].first
  # DEBUG D#85 => D#1289
  # DEBUG this => D#85
  # DEBUG D#84 => D#85
  # DEBUG D#83 => &D#84->_M_t
  # DEBUG D#82 => D#83
  # DEBUG this => D#82
  # DEBUG D#53 => &head_id
  _1078 = MEM[(const int &)__i$_M_node_1702 + 32];
  # DEBUG D#54 => D#682
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_1078 > pretmp_1564)
    goto <bb 617>;
  else
    goto <bb 437>;

  <bb 436>:
  __i$_M_node_1082 = MEM[(struct _Rb_tree_iterator *)&D.90511];
  # DEBUG __i$_M_node => __i$_M_node_1082
  D.90512 ={v} {CLOBBER};

  <bb 437>:
  # __i$_M_node_1083 = PHI <__i$_M_node_1702(435), __i$_M_node_1082(436)>
  # DEBUG __i$_M_node => __i$_M_node_1083
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1083
  # DEBUG D#683 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1083]._M_value_field
  # DEBUG __r => D#683
  # DEBUG D#685 => {CLOBBER}
  # DEBUG __i$_M_node => D#685
  # DEBUG this => &D.59373
  # DEBUG __a => &D.59371
  # DEBUG __b => &D.59372
  MEM[(struct mapped_type *)__i$_M_node_1083 + 36B] = -1;
  MEM[(struct mapped_type *)__i$_M_node_1083 + 40B] = 1;
  goto <bb 441>;

<L145>:
  # DEBUG __s => "Anynet:Unknow parse state\n"
  # DEBUG __out => &cout
  # DEBUG __s => "Anynet:Unknow parse state\n"
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "Anynet:Unknow parse state\n", 26);
  goto <bb 440>;

<L212>:
  goto <bb 561> (<L105>);

  <bb 440>:
  __assert_fail ("false", "networks/anynet.cpp", 469, &__PRETTY_FUNCTION__);

  <bb 441>:
  # state_2 = PHI <2(110), 1(71), 2(124), 4(152), 3(158), 4(367), 4(294), state_1(579), 4(437), 4(368), 3(155), 4(413), 1(68)>
  # head_type_6 = PHI <head_type_4(110), 0(71), head_type_4(124), head_type_4(152), head_type_4(158), 1(367), 0(294), head_type_4(579), 1(437), head_type_4(368), head_type_4(155), 1(413), 1(68)>
  # body_type_9 = PHI <body_type_7(110), body_type_7(71), body_type_7(124), body_type_7(152), 0(158), 0(367), 1(294), body_type_7(579), 1(437), body_type_7(368), 1(155), 1(413), body_type_7(68)>
  # body_id_51 = PHI <body_id_213(110), body_id_213(71), body_id_213(124), body_id_213(152), body_id_213(158), body_id_215(367), body_id_215(294), body_id_213(579), body_id_215(437), body_id_215(368), body_id_213(155), body_id_215(413), body_id_213(68)>
  # DEBUG body_id => body_id_51
  # DEBUG body_type => body_type_9
  # DEBUG head_type => head_type_6
  # DEBUG state => state_2
  if (pos_62 == 0)
    goto <bb 443>;
  else
    goto <bb 442>;

  <bb 442>:
  goto <bb 46>;

  <bb 443>:
  # state_1755 = PHI <state_2(441)>
  _1785 = state_1755 + 4294967294;
  _1786 = _1785 & 4294967293;
  if (_1786 != 0)
    goto <bb 445>;
  else
    goto <bb 444>;

  <bb 444>:
  # DEBUG this => &temp
  # DEBUG this => &temp
  # DEBUG this => &temp
  _204 = MEM[(char * *)&temp];
  # DEBUG D#1 => &temp
  # DEBUG this => D#1
  # DEBUG this => &temp
  if (&temp.D.15209._M_local_buf != _204)
    goto <bb 464>;
  else
    goto <bb 465>;

  <bb 445>:
  # DEBUG __out => &cout
  # DEBUG __s => "Anynet:Incomplete parse of the line: "
  # DEBUG __s => "Anynet:Incomplete parse of the line: "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "Anynet:Incomplete parse of the line: ", 37);
  goto <bb 447>;

<L213>:
  goto <bb 561> (<L105>);

  <bb 447>:
  # DEBUG __os => &cout
  # DEBUG __str => &line
  _203 = MEM[(long unsigned int *)&line + 8B];
  # DEBUG D#2 => &line
  # DEBUG this => D#2
  _359 = (long int) _203;
  # DEBUG this => &line
  _360 = MEM[(char * *)&line];
  # DEBUG D#1 => &line
  # DEBUG this => D#1
  _361 = std::__ostream_insert<char, std::char_traits<char> > (&cout, _360, _359);
  goto <bb 449>;

<L214>:
  goto <bb 561> (<L105>);

  <bb 449>:
  # DEBUG this => _361
  # DEBUG __pf => endl
  # DEBUG __os => _361
  _1095 = _361->_vptr.basic_ostream;
  _1096 = MEM[(long int *)_1095 + -24B];
  _1097 = (sizetype) _1096;
  _1098 = _361 + _1097;
  # DEBUG this => _1098
  # DEBUG __c => 10
  _507 = MEM[(const struct basic_ios *)_1098]._M_ctype;
  # DEBUG __f => _507
  if (_507 == 0B)
    goto <bb 450>;
  else
    goto <bb 452>;

  <bb 450>:
  std::__throw_bad_cast ();

<L215>:
  goto <bb 561> (<L105>);

  <bb 452>:
  # DEBUG this => _507
  # DEBUG __c => 10
  _1103 = MEM[(const struct ctype *)_507]._M_widen_ok;
  if (_1103 != 0)
    goto <bb 453>;
  else
    goto <bb 454>;

  <bb 453>:
  _1106 = MEM[(const struct ctype *)_507]._M_widen[10];
  pretmp_1892 = (int) _1106;
  goto <bb 460>;

  <bb 454>:
  # DEBUG this => _507
  # DEBUG __c => 10
  std::ctype<char>::_M_widen_init (_507);
  goto <bb 456>;

<L216>:
  goto <bb 561> (<L105>);

  <bb 456>:
  _1111 = MEM[(const struct ctype *)_507].D.21685._vptr.facet;
  _1112 = MEM[(int (*__vtbl_ptr_type) () *)_1111 + 48B];
  PROF_1116 = [obj_type_ref] OBJ_TYPE_REF(_1112;(const struct ctype)_507->6);
  if (PROF_1116 == do_widen)
    goto <bb 460>;
  else
    goto <bb 457>;

  <bb 457>:
  _1118 = OBJ_TYPE_REF(_1112;(const struct ctype)_507->6) (_507, 10);
  goto <bb 459>;

<L217>:
  goto <bb 561> (<L105>);

  <bb 459>:
  pretmp_1893 = (int) _1118;

  <bb 460>:
  # prephitmp_1894 = PHI <pretmp_1892(453), 10(456), pretmp_1893(459)>
  _1101 = std::basic_ostream<char>::put (_361, prephitmp_1894);
  goto <bb 462>;

<L218>:
  goto <bb 561> (<L105>);

  <bb 462>:
  # DEBUG __os => _1101
  std::basic_ostream<char>::flush (_1101);
  goto <bb 444>;

<L219>:
  goto <bb 561> (<L105>);

  <bb 464>:
  # DEBUG D#153 => temp.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &temp
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &temp
  # DEBUG this => D#1
  # DEBUG this => &temp
  # DEBUG D#150 => &temp._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _204
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _204
  # DEBUG this => D#144
  # DEBUG D.83532 => D#145
  operator delete (_204);

  <bb 465>:
  # DEBUG D#154 => &temp._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  temp ={v} {CLOBBER};
  head_id ={v} {CLOBBER};
  # DEBUG D#1273 => {CLOBBER}
  # DEBUG body_id => D#1273
  goto <bb 27>;

  <bb 466>:
  temp ={v} {CLOBBER};
  head_id ={v} {CLOBBER};
  # DEBUG D#1274 => {CLOBBER}
  # DEBUG body_id => D#1274
  goto <bb 27>;

  <bb 467>:
  # DEBUG D#900 => &this_44(D)->router_list
  _255 = MEM[(struct map * *)this_44(D) + 440B];
  # DEBUG D#34 => D#900
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => NULL
  _362 = MEM[(long unsigned int *)_255 + 40B];
  # DEBUG D#48 => D#49
  # DEBUG this => D#48
  # DEBUG D#901 => &this_44(D)->router_list
  # DEBUG D#34 => D#901
  # DEBUG __n => 1
  # DEBUG this => D#34
  # DEBUG this => NULL
  _205 = MEM[(long unsigned int *)_255 + 88B];
  # DEBUG D#48 => D#49
  # DEBUG this => D#48
  if (_205 != _362)
    goto <bb 468>;
  else
    goto <bb 469>;

  <bb 468>:
  __assert_fail ("router_list[0].size() == router_list[1].size()", "networks/anynet.cpp", 483, &__PRETTY_FUNCTION__);

  <bb 469>:
  # DEBUG this => &node_check
  # DEBUG D#243 => &node_check.D.34719
  # DEBUG this => D#243
  # DEBUG D#242 => &D#243->_M_impl
  # DEBUG this => D#242
  # DEBUG this => D#242
  # DEBUG this => D#242
  MEM[(struct _Vector_impl *)&node_check]._M_start = 0B;
  MEM[(struct _Vector_impl *)&node_check]._M_finish = 0B;
  MEM[(struct _Vector_impl *)&node_check]._M_end_of_storage = 0B;
  # DEBUG D#902 => &this_44(D)->node_list
  # DEBUG this => D#902
  # DEBUG D#74 => &D#902->_M_t
  i$_M_node_363 = MEM[(struct _Rb_tree_node_base * *)this_44(D) + 416B];
  # DEBUG D#73 => D#74
  # DEBUG this => D#73
  # DEBUG this => NULL
  # DEBUG __x => i$_M_node_363
  # DEBUG i$_M_node => i$_M_node_363
  # DEBUG i$_M_node => i$_M_node_363
  # DEBUG D#904 => &this_44(D)->node_list
  # DEBUG this => D#904
  # DEBUG D#75 => &D#904->_M_t
  # DEBUG this => D#75
  _1928 = &MEM[(struct _Rb_tree *)this_44(D) + 392B]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => _1928
  # DEBUG this => &i
  # DEBUG __x => &D.59378
  if (i$_M_node_363 != _1928)
    goto <bb 470>;
  else
    goto <bb 480>;

  <bb 470>:

  <bb 471>:
  # i$_M_node_1059 = PHI <i$_M_node_363(470), i$_M_node_365(478)>
  # prephitmp_1630 = PHI <0B(470), prephitmp_1637(478)>
  # prephitmp_1632 = PHI <0B(470), pretmp_1631(478)>
  # DEBUG i$_M_node => i$_M_node_1059
  # DEBUG D#904 => &this_44(D)->node_list
  # DEBUG this => D#904
  # DEBUG D#75 => &D#904->_M_t
  # DEBUG this => D#75
  # DEBUG this => NULL
  # DEBUG __x => _1928
  # DEBUG this => &i
  # DEBUG __x => &D.59378
  # DEBUG this => &i
  # DEBUG this => i$_M_node_1059
  # DEBUG D#903 => &MEM[(struct _Rb_tree_node *)i$_M_node_1059]._M_value_field
  # DEBUG __r => D#903
  # DEBUG D#1299 => &MEM[(struct pair *)i$_M_node_1059 + 32B].first
  # DEBUG this => &node_check
  # DEBUG __x => D#1299
  # DEBUG D#1293 => node_check.D.34719._M_impl._M_finish
  if (prephitmp_1630 != prephitmp_1632)
    goto <bb 472>;
  else
    goto <bb 475>;

  <bb 472>:
  # DEBUG D#714 => &node_check.D.34719._M_impl
  # DEBUG D#112 => D#714
  # DEBUG __p => D#1293
  # DEBUG __arg => D#1299
  # DEBUG __a => D#112
  # DEBUG D#111 => D#112
  # DEBUG D#110 => D#111
  # DEBUG __p => D#1293
  # DEBUG __val => D#1299
  # DEBUG this => D#110
  # DEBUG D#20 => 4
  # DEBUG __p => D#1293
  # DEBUG D.73419 => D#20
  if (prephitmp_1630 != 0B)
    goto <bb 473>;
  else
    goto <bb 474>;

  <bb 473>:
  _1123 = MEM[(const int &)i$_M_node_1059 + 32];
  *prephitmp_1630 = _1123;

  <bb 474>:
  _1124 = prephitmp_1630 + 4;
  node_check.D.34719._M_impl._M_finish = _1124;
  goto <bb 477>;

  <bb 475>:
  # DEBUG this => &node_check
  # DEBUG D#59 => &node_check.D.34719._M_impl._M_finish
  # DEBUG this => NULL
  # DEBUG __i => D#59
  MEM[(struct __normal_iterator *)&D.90549] = prephitmp_1630;
  _220 = &MEM[(struct pair *)i$_M_node_1059 + 32B].first;
  std::vector<int>::_M_insert_aux (&node_check, D.90549, _220);

  <bb 476>:
  pretmp_1634 = MEM[(int * const &)&node_check + 8];

  <bb 477>:
  # prephitmp_1637 = PHI <pretmp_1634(476), _1124(474)>
  # DEBUG this => &i
  i$_M_node_365 = std::_Rb_tree_increment (i$_M_node_1059);
  # DEBUG i$_M_node => i$_M_node_365
  # DEBUG i$_M_node => i$_M_node_365
  # DEBUG D#904 => &this_44(D)->node_list
  # DEBUG this => D#904
  # DEBUG D#75 => &D#904->_M_t
  # DEBUG this => D#75
  # DEBUG this => NULL
  # DEBUG __x => _1928
  # DEBUG this => &i
  # DEBUG __x => &D.59378
  if (i$_M_node_365 != _1928)
    goto <bb 478>;
  else
    goto <bb 479>;

  <bb 478>:
  pretmp_1631 = node_check.D.34719._M_impl._M_end_of_storage;
  goto <bb 471>;

  <bb 479>:
  # prephitmp_1652 = PHI <prephitmp_1637(477)>
  pretmp_541 = MEM[(int * const &)&node_check];
  pretmp_434 = (long int) prephitmp_1652;
  pretmp_436 = (long int) pretmp_541;
  pretmp_438 = pretmp_434 - pretmp_436;
  pretmp_1809 = pretmp_438 /[ex] 4;
  pretmp_1811 = (long unsigned int) pretmp_1809;

  <bb 480>:
  # prephitmp_540 = PHI <prephitmp_1652(479), 0B(469)>
  # prephitmp_542 = PHI <pretmp_541(479), 0B(469)>
  # prephitmp_437 = PHI <pretmp_436(479), 0(469)>
  # prephitmp_1808 = PHI <pretmp_438(479), 0(469)>
  # prephitmp_1812 = PHI <pretmp_1811(479), 0(469)>
  # DEBUG D#907 => {CLOBBER}
  # DEBUG i$_M_node => D#907
  # DEBUG this => &node_check
  # DEBUG D#59 => &node_check.D.34719._M_impl._M_finish
  # DEBUG this => NULL
  # DEBUG __i => D#59
  # DEBUG D#1292 => MEM[(int * const &)&node_check + 8]
  # DEBUG this => &node_check
  # DEBUG D#60 => &node_check.D.34719._M_impl._M_start
  # DEBUG this => NULL
  # DEBUG __i => D#60
  # DEBUG D#1291 => MEM[(int * const &)&node_check]
  # DEBUG __first => D#1291
  # DEBUG __last => D#1292
  MEM[(struct __normal_iterator *)&__first] = prephitmp_542;
  MEM[(struct __normal_iterator *)&__last] = prephitmp_540;
  # DEBUG __first => D#1291
  # DEBUG __last => D#1292
  # DEBUG __lhs => &__first
  # DEBUG __rhs => &__last
  # DEBUG this => &__first
  # DEBUG this => &__last
  if (prephitmp_540 != prephitmp_542)
    goto <bb 482>;
  else
    goto <bb 481>;

  <bb 481>:
  # prephitmp_1692 = PHI <prephitmp_542(480), pretmp_1763(506), pretmp_1764(522), pretmp_1765(485), pretmp_1691(508)>
  # prephitmp_1338 = PHI <prephitmp_1812(480), pretmp_418(506), pretmp_1335(522), pretmp_1336(485), pretmp_1337(508)>
  # DEBUG i => 0
  # DEBUG D#1290 => MEM[(int * *)&node_check]
  # DEBUG D#38 => &node_check
  # DEBUG D#38 => &node_check
  # DEBUG this => D#38
  # DEBUG this => D#38
  if (prephitmp_1338 != 0)
    goto <bb 523>;
  else
    goto <bb 531>;

  <bb 482>:
  # DEBUG __lhs => &__last
  # DEBUG __rhs => &__first
  # DEBUG this => &__last
  # DEBUG this => &__first
  # DEBUG __n => NULL
  _1131 = __builtin_clzl (prephitmp_1812);
  _1132 = (long unsigned int) _1131;
  _1133 = 63 - _1132;
  _1134 = (long int) _1133;
  _1135 = _1134 * 2;
  std::_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEElNS0_5__ops15_Iter_less_iterEEvT_S9_T0_T1_.isra.211 (__first, __last, _1135);
  # DEBUG __first => D#1291
  # DEBUG __lhs => &__last
  # DEBUG __rhs => &__first
  # DEBUG this => &__last
  # DEBUG this => &__first
  if (prephitmp_1808 > 67)
    goto <bb 483>;
  else
    goto <bb 507>;

  <bb 483>:
  # DEBUG this => &__first
  # DEBUG __n => 16
  __last$_M_current_1141 = prephitmp_542 + 64;
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG __first => D#1291
  # DEBUG __last => __last$_M_current_1141
  # DEBUG __lhs => &__first
  # DEBUG __rhs => &__last
  # DEBUG this => &__first
  # DEBUG this => &__last
  # DEBUG this => &__first
  # DEBUG __n => 1
  __last$_M_current_1152 = prephitmp_542 + 4;
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG __i$_M_current => __last$_M_current_1152
  # DEBUG __i$_M_current => __last$_M_current_1152
  # DEBUG __lhs => &__i
  # DEBUG __rhs => &__last
  # DEBUG this => &__i
  # DEBUG this => &__last
  goto <bb 487>;

  <bb 484>:
  # DEBUG __i$_M_current => __last$_M_current_1141
  # DEBUG __lhs => &__i
  # DEBUG __rhs => &__last
  # DEBUG this => &__i
  # DEBUG this => &__last
  if (prephitmp_540 != __last$_M_current_1141)
    goto <bb 498>;
  else
    goto <bb 485>;

  <bb 485>:
  pretmp_1765 = MEM[(int * *)&node_check];
  pretmp_1695 = MEM[(int * *)&node_check + 8B];
  pretmp_1392 = (long int) pretmp_1695;
  pretmp_1393 = (long int) pretmp_1765;
  pretmp_1394 = pretmp_1392 - pretmp_1393;
  pretmp_415 = pretmp_1394 /[ex] 4;
  pretmp_1336 = (size_type) pretmp_415;
  goto <bb 481>;

  <bb 486>:

  <bb 487>:
  # __last$_M_current_12 = PHI <__last$_M_current_1152(483), __last$_M_current_1162(486)>
  # ivtmp_1899 = PHI <15(483), ivtmp_1905(486)>
  # DEBUG __i$_M_current => __last$_M_current_12
  # DEBUG __lhs => &__i
  # DEBUG __rhs => &__last
  # DEBUG this => &__i
  # DEBUG this => &__last
  # DEBUG D#262 => &__comp
  # DEBUG __it1$_M_current => __last$_M_current_12
  # DEBUG __it2$_M_current => D#1291
  # DEBUG this => D#262
  # DEBUG this => &__it1
  _1154 = *__last$_M_current_12;
  # DEBUG this => &__it2
  _1155 = *prephitmp_542;
  if (_1154 < _1155)
    goto <bb 488>;
  else
    goto <bb 491>;

  <bb 488>:
  # DEBUG this => &__i
  # DEBUG __val => _1154
  # DEBUG this => &__i
  # DEBUG __n => 1
  # DEBUG D#1301 => __last$_M_current_12 + 4
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG __first => D#1291
  # DEBUG __last => __last$_M_current_12
  # DEBUG __it => __last$_M_current_12
  # DEBUG __it$_M_current => __last$_M_current_12
  # DEBUG __it => D#1291
  # DEBUG __it$_M_current => D#1291
  # DEBUG __it => D#1301
  # DEBUG __it => D#1301
  # DEBUG this => NULL
  # DEBUG __it => __last$_M_current_12
  # DEBUG __it => __last$_M_current_12
  # DEBUG this => NULL
  # DEBUG __it => D#1291
  # DEBUG __it => D#1291
  # DEBUG this => NULL
  # DEBUG __first => D#1291
  # DEBUG __last => __last$_M_current_12
  # DEBUG __result => D#1301
  # DEBUG __simple => 1
  # DEBUG __first => D#1291
  # DEBUG __last => __last$_M_current_12
  # DEBUG __result => D#1301
  __last.290_1166 = (long int) __last$_M_current_12;
  _1168 = __last.290_1166 - prephitmp_437;
  _Num_1169 = _1168 /[ex] 4;
  # DEBUG _Num => _Num_1169
  if (_Num_1169 != 0)
    goto <bb 489>;
  else
    goto <bb 490>;

  <bb 489>:
  _1170 = (long unsigned int) _1168;
  _1793 = 4 - _1170;
  _1172 = __last$_M_current_12 + _1793;
  __builtin_memmove (_1172, prephitmp_542, _1170);

  <bb 490>:
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG this => &__first
  *prephitmp_542 = _1154;
  goto <bb 497>;

  <bb 491>:
  # DEBUG __last => __last$_M_current_12
  # DEBUG __last$_M_current => __last$_M_current_12
  # DEBUG this => &__last
  # DEBUG __val => _1154
  # DEBUG __next$_M_current => __last$_M_current_12
  # DEBUG this => &__next
  __last$_M_current_1157 = __last$_M_current_12 + 18446744073709551612;
  # DEBUG __next$_M_current => __last$_M_current_1157
  # DEBUG __next$_M_current => __last$_M_current_1157
  # DEBUG __last$_M_current => __last$_M_current_12
  # DEBUG D#446 => &__val
  # DEBUG __it$_M_current => __last$_M_current_1157
  # DEBUG this => D#445
  # DEBUG __val => D#446
  # DEBUG this => &__it
  _560 = MEM[(int &)__last$_M_current_12 + 18446744073709551612];
  if (_560 > _1154)
    goto <bb 492>;
  else
    goto <bb 496>;

  <bb 492>:

  <bb 493>:
  # __last$_M_current_11 = PHI <__last$_M_current_1157(492), __last$_M_current_1161(495)>
  # _1931 = PHI <_560(492), _1159(495)>
  # __last$_M_current_690 = PHI <__last$_M_current_12(492), __last$_M_current_11(495)>
  # DEBUG __next$_M_current => __last$_M_current_11
  # DEBUG __last$_M_current => __last$_M_current_690
  # DEBUG D#446 => &__val
  # DEBUG __it$_M_current => __last$_M_current_11
  # DEBUG this => D#445
  # DEBUG __val => D#446
  # DEBUG this => &__it
  # DEBUG this => &__last
  # DEBUG this => &__next
  *__last$_M_current_690 = _1931;
  # DEBUG __last$_M_current => __last$_M_current_11
  # DEBUG this => &__next
  __last$_M_current_1161 = __last$_M_current_11 + 18446744073709551612;
  # DEBUG __next$_M_current => __last$_M_current_1161
  # DEBUG __next$_M_current => __last$_M_current_1161
  # DEBUG __last$_M_current => __last$_M_current_11
  # DEBUG D#446 => &__val
  # DEBUG __it$_M_current => __last$_M_current_1161
  # DEBUG this => D#445
  # DEBUG __val => D#446
  # DEBUG this => &__it
  _1159 = *__last$_M_current_1161;
  if (_1154 < _1159)
    goto <bb 495>;
  else
    goto <bb 494>;

  <bb 494>:
  # __last$_M_current_1749 = PHI <__last$_M_current_11(493)>
  goto <bb 496>;

  <bb 495>:
  goto <bb 493>;

  <bb 496>:
  # __last$_M_current_578 = PHI <__last$_M_current_1749(494), __last$_M_current_12(491)>
  # DEBUG this => &__last
  *__last$_M_current_578 = _1154;
  # DEBUG D#447 => {CLOBBER}
  # DEBUG __val => D#447
  # DEBUG D#448 => {CLOBBER}
  # DEBUG __next$_M_current => D#448

  <bb 497>:
  # DEBUG this => &__i
  __last$_M_current_1162 = __last$_M_current_12 + 4;
  # DEBUG __i$_M_current => __last$_M_current_1162
  # DEBUG __i$_M_current => __last$_M_current_1162
  # DEBUG __lhs => &__i
  # DEBUG __rhs => &__last
  # DEBUG this => &__i
  # DEBUG this => &__last
  ivtmp_1905 = ivtmp_1899 - 1;
  if (ivtmp_1905 != 0)
    goto <bb 486>;
  else
    goto <bb 484>;

  <bb 498>:

  <bb 499>:
  # __last$_M_current_298 = PHI <__last$_M_current_1141(498), __last$_M_current_1149(505)>
  # DEBUG __i$_M_current => __last$_M_current_298
  # DEBUG __lhs => &__i
  # DEBUG __rhs => &__last
  # DEBUG this => &__i
  # DEBUG this => &__last
  # DEBUG __last => __last$_M_current_298
  # DEBUG __last$_M_current => __last$_M_current_298
  # DEBUG this => &__last
  __val_1143 = *__last$_M_current_298;
  # DEBUG __val => __val_1143
  # DEBUG __next$_M_current => __last$_M_current_298
  # DEBUG this => &__next
  __last$_M_current_1144 = __last$_M_current_298 + 18446744073709551612;
  # DEBUG __next$_M_current => __last$_M_current_1144
  # DEBUG __next$_M_current => __last$_M_current_1144
  # DEBUG __last$_M_current => __last$_M_current_298
  # DEBUG D#446 => &__val
  # DEBUG __it$_M_current => __last$_M_current_1144
  # DEBUG this => D#445
  # DEBUG __val => D#446
  # DEBUG this => &__it
  _1085 = MEM[(int &)__last$_M_current_298 + 18446744073709551612];
  if (_1085 > __val_1143)
    goto <bb 500>;
  else
    goto <bb 504>;

  <bb 500>:

  <bb 501>:
  # __last$_M_current_277 = PHI <__last$_M_current_1144(500), __last$_M_current_1148(503)>
  # _262 = PHI <_1085(500), _1146(503)>
  # __last$_M_current_23 = PHI <__last$_M_current_298(500), __last$_M_current_277(503)>
  # DEBUG __next$_M_current => __last$_M_current_277
  # DEBUG __last$_M_current => __last$_M_current_23
  # DEBUG D#446 => &__val
  # DEBUG __it$_M_current => __last$_M_current_277
  # DEBUG this => D#445
  # DEBUG __val => D#446
  # DEBUG this => &__it
  # DEBUG this => &__last
  # DEBUG this => &__next
  *__last$_M_current_23 = _262;
  # DEBUG __last$_M_current => __last$_M_current_277
  # DEBUG this => &__next
  __last$_M_current_1148 = __last$_M_current_277 + 18446744073709551612;
  # DEBUG __next$_M_current => __last$_M_current_1148
  # DEBUG __next$_M_current => __last$_M_current_1148
  # DEBUG __last$_M_current => __last$_M_current_277
  # DEBUG D#446 => &__val
  # DEBUG __it$_M_current => __last$_M_current_1148
  # DEBUG this => D#445
  # DEBUG __val => D#446
  # DEBUG this => &__it
  _1146 = *__last$_M_current_1148;
  if (__val_1143 < _1146)
    goto <bb 503>;
  else
    goto <bb 502>;

  <bb 502>:
  # __last$_M_current_1731 = PHI <__last$_M_current_277(501)>
  goto <bb 504>;

  <bb 503>:
  goto <bb 501>;

  <bb 504>:
  # __last$_M_current_18 = PHI <__last$_M_current_1731(502), __last$_M_current_298(499)>
  # DEBUG this => &__last
  *__last$_M_current_18 = __val_1143;
  # DEBUG D#447 => {CLOBBER}
  # DEBUG __val => D#447
  # DEBUG D#448 => {CLOBBER}
  # DEBUG __next$_M_current => D#448
  # DEBUG this => &__i
  __last$_M_current_1149 = __last$_M_current_298 + 4;
  # DEBUG __i$_M_current => __last$_M_current_1149
  # DEBUG __i$_M_current => __last$_M_current_1149
  # DEBUG __lhs => &__i
  # DEBUG __rhs => &__last
  # DEBUG this => &__i
  # DEBUG this => &__last
  if (prephitmp_540 != __last$_M_current_1149)
    goto <bb 505>;
  else
    goto <bb 506>;

  <bb 505>:
  goto <bb 499>;

  <bb 506>:
  pretmp_1763 = MEM[(int * *)&node_check];
  pretmp_1693 = MEM[(int * *)&node_check + 8B];
  pretmp_1454 = (long int) pretmp_1693;
  pretmp_1455 = (long int) pretmp_1763;
  pretmp_1456 = pretmp_1454 - pretmp_1455;
  pretmp_1402 = pretmp_1456 /[ex] 4;
  pretmp_418 = (size_type) pretmp_1402;
  goto <bb 481>;

  <bb 507>:
  # DEBUG __first => D#1291
  # DEBUG __last => D#1292
  # DEBUG __lhs => &__first
  # DEBUG __rhs => &__last
  # DEBUG this => &__first
  # DEBUG this => &__last
  # DEBUG this => &__first
  # DEBUG __n => 1
  __last$_M_current_1178 = prephitmp_542 + 4;
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG __i$_M_current => __last$_M_current_1178
  # DEBUG __i$_M_current => __last$_M_current_1178
  # DEBUG __lhs => &__i
  # DEBUG __rhs => &__last
  # DEBUG this => &__i
  # DEBUG this => &__last
  if (prephitmp_540 != __last$_M_current_1178)
    goto <bb 509>;
  else
    goto <bb 508>;

  <bb 508>:
  pretmp_1691 = MEM[(int * *)&node_check];
  pretmp_1696 = MEM[(int * *)&node_check + 8B];
  pretmp_1395 = (long int) pretmp_1696;
  pretmp_1398 = (long int) pretmp_1691;
  pretmp_1399 = pretmp_1395 - pretmp_1398;
  pretmp_416 = pretmp_1399 /[ex] 4;
  pretmp_1337 = (size_type) pretmp_416;
  goto <bb 481>;

  <bb 509>:

  <bb 510>:
  # __last$_M_current_559 = PHI <__last$_M_current_1178(509), __last$_M_current_1188(521)>
  # DEBUG __i$_M_current => __last$_M_current_559
  # DEBUG __lhs => &__i
  # DEBUG __rhs => &__last
  # DEBUG this => &__i
  # DEBUG this => &__last
  # DEBUG D#262 => &__comp
  # DEBUG __it1$_M_current => __last$_M_current_559
  # DEBUG __it2$_M_current => D#1291
  # DEBUG this => D#262
  # DEBUG this => &__it1
  _1180 = *__last$_M_current_559;
  # DEBUG this => &__it2
  _1181 = *prephitmp_542;
  if (_1180 < _1181)
    goto <bb 511>;
  else
    goto <bb 514>;

  <bb 511>:
  # DEBUG this => &__i
  # DEBUG __val => _1180
  # DEBUG this => &__i
  # DEBUG __n => 1
  # DEBUG D#1300 => __last$_M_current_559 + 4
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG __first => D#1291
  # DEBUG __last => __last$_M_current_559
  # DEBUG __it => __last$_M_current_559
  # DEBUG __it$_M_current => __last$_M_current_559
  # DEBUG __it => D#1291
  # DEBUG __it$_M_current => D#1291
  # DEBUG __it => D#1300
  # DEBUG __it => D#1300
  # DEBUG this => NULL
  # DEBUG __it => __last$_M_current_559
  # DEBUG __it => __last$_M_current_559
  # DEBUG this => NULL
  # DEBUG __it => D#1291
  # DEBUG __it => D#1291
  # DEBUG this => NULL
  # DEBUG __first => D#1291
  # DEBUG __last => __last$_M_current_559
  # DEBUG __result => D#1300
  # DEBUG __simple => 1
  # DEBUG __first => D#1291
  # DEBUG __last => __last$_M_current_559
  # DEBUG __result => D#1300
  __last.290_1192 = (long int) __last$_M_current_559;
  _1194 = __last.290_1192 - prephitmp_437;
  _Num_1195 = _1194 /[ex] 4;
  # DEBUG _Num => _Num_1195
  if (_Num_1195 != 0)
    goto <bb 512>;
  else
    goto <bb 513>;

  <bb 512>:
  _1196 = (long unsigned int) _1194;
  _202 = 4 - _1196;
  _1198 = __last$_M_current_559 + _202;
  __builtin_memmove (_1198, prephitmp_542, _1196);

  <bb 513>:
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG this => &__first
  *prephitmp_542 = _1180;
  goto <bb 520>;

  <bb 514>:
  # DEBUG __last => __last$_M_current_559
  # DEBUG __last$_M_current => __last$_M_current_559
  # DEBUG this => &__last
  # DEBUG __val => _1180
  # DEBUG __next$_M_current => __last$_M_current_559
  # DEBUG this => &__next
  __last$_M_current_1183 = __last$_M_current_559 + 18446744073709551612;
  # DEBUG __next$_M_current => __last$_M_current_1183
  # DEBUG __next$_M_current => __last$_M_current_1183
  # DEBUG __last$_M_current => __last$_M_current_559
  # DEBUG D#446 => &__val
  # DEBUG __it$_M_current => __last$_M_current_1183
  # DEBUG this => D#445
  # DEBUG __val => D#446
  # DEBUG this => &__it
  _234 = MEM[(int &)__last$_M_current_559 + 18446744073709551612];
  if (_234 > _1180)
    goto <bb 515>;
  else
    goto <bb 519>;

  <bb 515>:

  <bb 516>:
  # __last$_M_current_558 = PHI <__last$_M_current_1183(515), __last$_M_current_1187(518)>
  # _306 = PHI <_234(515), _1185(518)>
  # __last$_M_current_103 = PHI <__last$_M_current_559(515), __last$_M_current_558(518)>
  # DEBUG __next$_M_current => __last$_M_current_558
  # DEBUG __last$_M_current => __last$_M_current_103
  # DEBUG D#446 => &__val
  # DEBUG __it$_M_current => __last$_M_current_558
  # DEBUG this => D#445
  # DEBUG __val => D#446
  # DEBUG this => &__it
  # DEBUG this => &__last
  # DEBUG this => &__next
  *__last$_M_current_103 = _306;
  # DEBUG __last$_M_current => __last$_M_current_558
  # DEBUG this => &__next
  __last$_M_current_1187 = __last$_M_current_558 + 18446744073709551612;
  # DEBUG __next$_M_current => __last$_M_current_1187
  # DEBUG __next$_M_current => __last$_M_current_1187
  # DEBUG __last$_M_current => __last$_M_current_558
  # DEBUG D#446 => &__val
  # DEBUG __it$_M_current => __last$_M_current_1187
  # DEBUG this => D#445
  # DEBUG __val => D#446
  # DEBUG this => &__it
  _1185 = *__last$_M_current_1187;
  if (_1180 < _1185)
    goto <bb 518>;
  else
    goto <bb 517>;

  <bb 517>:
  # __last$_M_current_1716 = PHI <__last$_M_current_558(516)>
  goto <bb 519>;

  <bb 518>:
  goto <bb 516>;

  <bb 519>:
  # __last$_M_current_727 = PHI <__last$_M_current_1716(517), __last$_M_current_559(514)>
  # DEBUG this => &__last
  *__last$_M_current_727 = _1180;
  # DEBUG D#447 => {CLOBBER}
  # DEBUG __val => D#447
  # DEBUG D#448 => {CLOBBER}
  # DEBUG __next$_M_current => D#448

  <bb 520>:
  # DEBUG this => &__i
  __last$_M_current_1188 = __last$_M_current_559 + 4;
  # DEBUG __i$_M_current => __last$_M_current_1188
  # DEBUG __i$_M_current => __last$_M_current_1188
  # DEBUG __lhs => &__i
  # DEBUG __rhs => &__last
  # DEBUG this => &__i
  # DEBUG this => &__last
  if (prephitmp_540 != __last$_M_current_1188)
    goto <bb 521>;
  else
    goto <bb 522>;

  <bb 521>:
  goto <bb 510>;

  <bb 522>:
  pretmp_1764 = MEM[(int * *)&node_check];
  pretmp_1694 = MEM[(int * *)&node_check + 8B];
  pretmp_1457 = (long int) pretmp_1694;
  pretmp_1390 = (long int) pretmp_1764;
  pretmp_1391 = pretmp_1457 - pretmp_1390;
  pretmp_414 = pretmp_1391 /[ex] 4;
  pretmp_1335 = (size_type) pretmp_414;
  goto <bb 481>;

  <bb 523>:
  # DEBUG D#39 => &node_check
  # DEBUG __n => 0
  # DEBUG this => D#39
  _1748 = *prephitmp_1692;
  if (_1748 != 0)
    goto <bb 526>;
  else
    goto <bb 529>;

  <bb 524>:
  # DEBUG D#39 => &node_check
  # DEBUG __n => i_230
  # DEBUG this => D#39
  _370 = i_230 * 4;
  _371 = prephitmp_1692 + _370;
  _228 = *_371;
  _229 = (long unsigned int) _228;
  if (_229 != i_230)
    goto <bb 526>;
  else
    goto <bb 525>;

  <bb 525>:
  goto <bb 530>;

  <bb 526>:
  # DEBUG __s => "Anynet:booksim trafficmanager assumes sequential node numbering starting at 0\n"
  # DEBUG __out => &cout
  # DEBUG __s => "Anynet:booksim trafficmanager assumes sequential node numbering starting at 0\n"
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "Anynet:booksim trafficmanager assumes sequential node numbering starting at 0\n", 78);
  goto <bb 528>;

<L221>:
  goto <bb 566> (<L108>);

  <bb 528>:
  __assert_fail ("false", "networks/anynet.cpp", 496, &__PRETTY_FUNCTION__);

  <bb 529>:

  <bb 530>:
  # i_131 = PHI <0(529), _229(525)>
  # DEBUG i => i_131
  # DEBUG D#38 => &node_check
  # DEBUG this => D#38
  # DEBUG this => D#38
  # DEBUG D#39 => &node_check
  # DEBUG __n => i_131
  # DEBUG this => D#39
  i_230 = i_131 + 1;
  # DEBUG i => i_230
  # DEBUG i => i_230
  # DEBUG D#38 => &node_check
  # DEBUG D#38 => &node_check
  # DEBUG this => D#38
  # DEBUG this => D#38
  if (i_230 < prephitmp_1338)
    goto <bb 524>;
  else
    goto <bb 531>;

  <bb 531>:
  # DEBUG this => &node_check
  # DEBUG D#258 => &node_check.D.34719
  # DEBUG this => D#258
  # DEBUG D#261 => node_check.D.34719._M_impl._M_finish
  # DEBUG D#260 => node_check.D.34719._M_impl._M_start
  # DEBUG __first => D#260
  # DEBUG __last => D#261
  # DEBUG D.74511 => NULL
  # DEBUG D#140 => D#260
  # DEBUG D#141 => D#261
  # DEBUG __first => D#140
  # DEBUG __last => D#141
  # DEBUG D#139 => D#141
  # DEBUG D#138 => D#140
  # DEBUG D#136 => D#138
  # DEBUG D#137 => D#139
  # DEBUG D.73678 => D#136
  # DEBUG D.73677 => D#137
  # DEBUG D#259 => &node_check.D.34719
  # DEBUG this => D#259
  # DEBUG D#257 => D#259->_M_impl._M_end_of_storage
  # DEBUG D#256 => (long int) D#257
  # DEBUG D#255 => (long int) D#1290
  # DEBUG D#254 => D#256 - D#255
  # DEBUG D#253 => D#254 /[ex] 4
  # DEBUG D#252 => (long unsigned int) D#253
  # DEBUG this => D#259
  # DEBUG __p => D#1290
  # DEBUG __n => D#252
  if (prephitmp_1692 != 0B)
    goto <bb 532>;
  else
    goto <bb 533>;

  <bb 532>:
  # DEBUG D#250 => &D#259->_M_impl
  # DEBUG D#248 => D#250
  # DEBUG D#249 => D#252
  # DEBUG __p => D#1290
  # DEBUG __a => D#248
  # DEBUG __n => D#249
  # DEBUG D#247 => D#249
  # DEBUG D#246 => D#248
  # DEBUG D#244 => D#246
  # DEBUG D#245 => D#247
  # DEBUG __p => D#1290
  # DEBUG this => D#244
  # DEBUG D.83613 => D#245
  operator delete (prephitmp_1692);

  <bb 533>:
  # DEBUG D#251 => &D#259->_M_impl
  # DEBUG this => D#251
  # DEBUG this => D#251
  # DEBUG this => D#251
  MEM[(struct  &)&node_check] ={v} {CLOBBER};
  # DEBUG this => &line
  # DEBUG this => &line
  # DEBUG this => &line
  _372 = MEM[(char * *)&line];
  # DEBUG D#1 => &line
  # DEBUG this => D#1
  # DEBUG this => &line
  if (&line.D.15209._M_local_buf != _372)
    goto <bb 534>;
  else
    goto <bb 535>;

  <bb 534>:
  # DEBUG D#153 => line.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &line
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &line
  # DEBUG this => D#1
  # DEBUG this => &line
  # DEBUG D#150 => &line._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _372
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _372
  # DEBUG this => D#144
  # DEBUG D.83596 => D#145
  operator delete (_372);

  <bb 535>:
  # DEBUG D#154 => &line._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  MEM[(struct  &)&line] ={v} {CLOBBER};
  # DEBUG this => &network_list
  network_list.D.49074._vptr.basic_istream = &MEM[(void *)&_ZTVSt14basic_ifstreamIcSt11char_traitsIcEE + 24B];
  MEM[(struct basic_ios *)&network_list + 256B].D.24721._vptr.ios_base = &MEM[(void *)&_ZTVSt14basic_ifstreamIcSt11char_traitsIcEE + 64B];
  # DEBUG this => &network_list._M_filebuf
  MEM[(struct basic_filebuf *)&network_list + 16B].D.48983._vptr.basic_streambuf = &MEM[(void *)&_ZTVSt13basic_filebufIcSt11char_traitsIcEE + 16B];
  std::basic_filebuf<char>::close (&network_list._M_filebuf);

  <bb 536>:
  std::__basic_file<char>::~__basic_file (&MEM[(struct basic_filebuf *)&network_list + 16B]._M_file);

  <bb 537>:
  # DEBUG D#11 => &MEM[(struct basic_filebuf *)&network_list + 16B].D.48983
  # DEBUG this => D#11
  MEM[(struct basic_streambuf *)&network_list + 16B]._vptr.basic_streambuf = &MEM[(void *)&_ZTVSt15basic_streambufIcSt11char_traitsIcEE + 16B];
  std::locale::~locale (&MEM[(struct basic_streambuf *)&network_list + 16B]._M_buf_locale);
  MEM[(struct  &)&network_list + 16] ={v} {CLOBBER};
  # DEBUG this => &network_list.D.49074
  # DEBUG __vtt_parm => &MEM[(void *)&_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE + 8B]
  iftmp.278_1213 = MEM[(const void * *)&_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE + 8B];
  _1214 = MEM[(long int *)iftmp.278_1213 + -24B];
  iftmp.279_1215 = (sizetype) _1214;
  _1216 = &network_list.D.49074 + iftmp.279_1215;
  iftmp.280_1217 = MEM[(const void * *)&_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE + 16B];
  _1216->D.24721._vptr.ios_base = iftmp.280_1217;
  MEM[(struct  &)&network_list] ={v} {CLOBBER};
  # DEBUG D#16 => &network_list.D.49077
  # DEBUG this => D#16
  MEM[(struct basic_ios *)&network_list + 256B].D.24721._vptr.ios_base = &MEM[(void *)&_ZTVSt9basic_iosIcSt11char_traitsIcEE + 16B];
  std::ios_base::~ios_base (&MEM[(struct basic_ios *)&network_list + 256B].D.24721);
  network_list ={v} {CLOBBER};
  line ={v} {CLOBBER};
  node_check ={v} {CLOBBER};
  return;

<L141>:
  std::__basic_file<char>::~__basic_file (&MEM[(struct basic_filebuf *)&network_list + 16B]._M_file);
  resx 68

<L223>:
  goto <bb 541> (<L142>);

<L222>:

<L142>:
  # DEBUG D#12 => &MEM[(struct basic_filebuf *)&network_list + 16B].D.48983
  # DEBUG this => D#12
  MEM[(struct basic_streambuf *)&network_list + 16B]._vptr.basic_streambuf = &MEM[(void *)&_ZTVSt15basic_streambufIcSt11char_traitsIcEE + 16B];
  std::locale::~locale (&MEM[(struct basic_streambuf *)&network_list + 16B]._M_buf_locale);
  MEM[(struct  &)&network_list + 16] ={v} {CLOBBER};
  resx 66

<L139>:
  # DEBUG this => &network_list.D.49074
  # DEBUG __vtt_parm => &MEM[(void *)&_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE + 8B]
  iftmp.278_1220 = MEM[(const void * *)&_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE + 8B];
  _1221 = MEM[(long int *)iftmp.278_1220 + -24B];
  iftmp.279_1222 = (sizetype) _1221;
  _1223 = &network_list.D.49074 + iftmp.279_1222;
  iftmp.280_1224 = MEM[(const void * *)&_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE + 16B];
  _1223->D.24721._vptr.ios_base = iftmp.280_1224;
  MEM[(struct  &)&network_list] ={v} {CLOBBER};
  resx 65

<L140>:
  # DEBUG D#15 => &network_list.D.49077
  # DEBUG this => D#15
  MEM[(struct basic_ios *)&network_list + 256B].D.24721._vptr.ios_base = &MEM[(void *)&_ZTVSt9basic_iosIcSt11char_traitsIcEE + 16B];
  std::ios_base::~ios_base (&MEM[(struct basic_ios *)&network_list + 256B].D.24721);
  resx 64

<L100>:
  # DEBUG this => &D.59323
  # DEBUG this => &D.59323
  # DEBUG this => &D.59323
  _233 = MEM[(char * *)&D.59323];
  # DEBUG D#1 => &D.59323
  # DEBUG this => D#1
  # DEBUG this => &D.59323
  if (&D.59323.D.15209._M_local_buf != _233)
    goto <bb 545>;
  else
    goto <bb 546>;

  <bb 545>:
  # DEBUG D#153 => D.59323.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.59323
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.59323
  # DEBUG this => D#1
  # DEBUG this => &D.59323
  # DEBUG D#150 => &D.59323._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _233
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _233
  # DEBUG this => D#144
  # DEBUG D.83626 => D#145
  operator delete (_233);

  <bb 546>:
  # DEBUG D#154 => &D.59323._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.59323 ={v} {CLOBBER};
  resx 6

<L224>:
  goto <bb 561> (<L105>);

<L172>:

<L101>:
  # DEBUG this => &D.59327
  # DEBUG this => &D.59327._M_t
  _373 = MEM[(struct _Rb_tree_node_base * *)&D.59327 + 16B];
  # DEBUG D#58 => &D.59327._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.59327._M_t, _373);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.59327]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.59327 ={v} {CLOBBER};
  resx 8

<L225>:
  goto <bb 561> (<L105>);

<L174>:

<L102>:
  # DEBUG this => &D.59344
  # DEBUG this => &D.59344._M_t
  _374 = MEM[(struct _Rb_tree_node_base * *)&D.59344 + 16B];
  # DEBUG D#58 => &D.59344._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.59344._M_t, _374);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.59344]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.59344 ={v} {CLOBBER};
  resx 10

<L226>:
  goto <bb 561> (<L105>);

<L184>:

<L103>:
  # DEBUG this => &D.59348
  # DEBUG this => &D.59348._M_t
  _375 = MEM[(struct _Rb_tree_node_base * *)&D.59348 + 16B];
  # DEBUG D#58 => &D.59348._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.59348._M_t, _375);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.59348]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.59348 ={v} {CLOBBER};
  resx 12

<L227>:
  goto <bb 561> (<L105>);

<L186>:

<L104>:
  # DEBUG this => &D.59349
  # DEBUG this => &D.59349._M_t
  _376 = MEM[(struct _Rb_tree_node_base * *)&D.59349 + 16B];
  # DEBUG D#58 => &D.59349._M_t
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (&D.59349._M_t, _376);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)&D.59349]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  D.59349 ={v} {CLOBBER};
  resx 14

<L228>:
  goto <bb 561> (<L105>);

<L162>:

<L105>:
  # DEBUG this => &temp
  # DEBUG this => &temp
  # DEBUG this => &temp
  _112 = MEM[(char * *)&temp];
  # DEBUG D#1 => &temp
  # DEBUG this => D#1
  # DEBUG this => &temp
  if (&temp.D.15209._M_local_buf != _112)
    goto <bb 562>;
  else
    goto <bb 563>;

  <bb 562>:
  # DEBUG D#153 => temp.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &temp
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &temp
  # DEBUG this => D#1
  # DEBUG this => &temp
  # DEBUG D#150 => &temp._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _112
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _112
  # DEBUG this => D#144
  # DEBUG D.83661 => D#145
  operator delete (_112);

  <bb 563>:
  # DEBUG D#154 => &temp._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  resx 5

<L229>:
  goto <bb 571> (<L109>);

<L220>:

<L108>:
  # DEBUG this => &node_check
  # DEBUG D#258 => &node_check.D.34719
  # DEBUG this => D#258
  # DEBUG D#261 => node_check.D.34719._M_impl._M_finish
  # DEBUG D#260 => node_check.D.34719._M_impl._M_start
  # DEBUG __first => D#260
  # DEBUG __last => D#261
  # DEBUG D.74511 => NULL
  # DEBUG D#140 => D#260
  # DEBUG D#141 => D#261
  # DEBUG __first => D#140
  # DEBUG __last => D#141
  # DEBUG D#139 => D#141
  # DEBUG D#138 => D#140
  # DEBUG D#136 => D#138
  # DEBUG D#137 => D#139
  # DEBUG D.73678 => D#136
  # DEBUG D.73677 => D#137
  # DEBUG D#259 => &node_check.D.34719
  # DEBUG this => D#259
  # DEBUG D#257 => D#259->_M_impl._M_end_of_storage
  # DEBUG D#256 => (long int) D#257
  _210 = MEM[(struct _Vector_base *)&node_check]._M_impl._M_start;
  # DEBUG D#255 => (long int) _210
  # DEBUG D#254 => D#256 - D#255
  # DEBUG D#253 => D#254 /[ex] 4
  # DEBUG D#252 => (long unsigned int) D#253
  # DEBUG this => D#259
  # DEBUG __p => _210
  # DEBUG __n => D#252
  if (_210 != 0B)
    goto <bb 567>;
  else
    goto <bb 568>;

  <bb 567>:
  # DEBUG D#250 => &D#259->_M_impl
  # DEBUG D#248 => D#250
  # DEBUG D#249 => D#252
  # DEBUG __p => _210
  # DEBUG __a => D#248
  # DEBUG __n => D#249
  # DEBUG D#247 => D#249
  # DEBUG D#246 => D#248
  # DEBUG D#244 => D#246
  # DEBUG D#245 => D#247
  # DEBUG __p => _210
  # DEBUG this => D#244
  # DEBUG D.83678 => D#245
  operator delete (_210);

  <bb 568>:
  # DEBUG D#251 => &D#259->_M_impl
  # DEBUG this => D#251
  # DEBUG this => D#251
  # DEBUG this => D#251
  MEM[(struct  &)&node_check] ={v} {CLOBBER};
  resx 30

<L230>:
  goto <bb 571> (<L109>);

<L151>:

<L109>:
  temp ={v} {CLOBBER};
  head_id ={v} {CLOBBER};
  # DEBUG D#1275 => {CLOBBER}
  # DEBUG body_id => D#1275
  # DEBUG this => &line
  # DEBUG this => &line
  # DEBUG this => &line
  _238 = MEM[(char * *)&line];
  # DEBUG D#1 => &line
  # DEBUG this => D#1
  # DEBUG this => &line
  if (&line.D.15209._M_local_buf != _238)
    goto <bb 572>;
  else
    goto <bb 573>;

  <bb 572>:
  # DEBUG D#153 => line.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &line
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &line
  # DEBUG this => D#1
  # DEBUG this => &line
  # DEBUG D#150 => &line._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _238
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _238
  # DEBUG this => D#144
  # DEBUG D.83691 => D#145
  operator delete (_238);

  <bb 573>:
  # DEBUG D#154 => &line._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  MEM[(struct  &)&line] ={v} {CLOBBER};
  resx 3

<L110>:
  std::basic_ifstream<char>::~basic_ifstream (&network_list);
  resx 2

  <bb 575>:
  std::__throw_logic_error ("basic_string::_M_construct null not valid");

<L231>:
  goto <bb 561> (<L105>);

  <bb 577>:
  # DEBUG __first => __start_617
  # DEBUG __last => _620
  # DEBUG D#487 => &__first
  # DEBUG D.77194 => D#487
  # DEBUG __first => __start_617
  # DEBUG __last => _620
  __dnew = iftmp.285_1682;
  if (iftmp.285_1682 > 15)
    goto <bb 51>;
  else
    goto <bb 54>;

  <bb 578>:
  switch (state_1) <default: <L145>, case 0: <L112>, case 1: <L113>, case 2: <L34>, case 3: <L115>, case 4: <L114>>

  <bb 579>:
  goto <bb 441>;

  <bb 580>:
  # DEBUG D#322 => {CLOBBER}
  # DEBUG __j$_M_node => D#322
  # DEBUG this => NULL
  # DEBUG __x => NULL
  # DEBUG this => &D.59327
  # DEBUG D#239 => &D.59327._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.59327]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.59327]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.59327]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.59327]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.59327]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.59327]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.59327]._M_header;
  # DEBUG D#885 => &this_44(D)->router_list
  # DEBUG D#34 => D#885
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => _245
  # DEBUG __k => &head_id
  # DEBUG this => _245
  # DEBUG __x => &head_id
  # DEBUG D#311 => &_245->_M_t
  # DEBUG this => D#311
  # DEBUG __k => &head_id
  # DEBUG this => D#311
  __i$_M_node_634 = MEM[(struct _Rb_tree_node_base * *)_245 + 16B];
  # DEBUG D#42 => D#311
  # DEBUG this => D#42
  # DEBUG D#310 => D#311
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &head_id
  # DEBUG __y => __i$_M_node_73
  # DEBUG __x => __i$_M_node_634
  if (__i$_M_node_634 == 0B)
    goto <bb 581>;
  else
    goto <bb 90>;

  <bb 581>:
  # __i$_M_node_730 = PHI <__i$_M_node_1714(95), __i$_M_node_1714(94), __i$_M_node_73(580)>
  # DEBUG this => &D.89559
  # DEBUG D#239 => &D.89559._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.89559]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.89559]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.89559]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.89559]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.89559]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.89559]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.89559]._M_header;
  # DEBUG this => &D.89560
  # DEBUG __a => &head_id
  # DEBUG __b => &D.89559
  D.89560.first = _226;
  # DEBUG D#670 => &D.89560.second
  # DEBUG this => D#670
  # DEBUG __x => &D.89559
  # DEBUG this => &MEM[(struct map *)&D.89560 + 8B]._M_t
  # DEBUG __x => &D.89559._M_t
  # DEBUG this => &D.89559._M_t
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)&D.89559]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)&D.89560 + 8B]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)&D.89560 + 8B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.89560 + 8B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.89560 + 8B]._M_node_count = 0;
  # DEBUG this => D#662
  MEM[(struct _Rb_tree_impl *)&D.89560 + 8B]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.89560 + 8B]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.89560 + 8B]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.89560 + 8B]._M_header;
  # DEBUG D#109 => &D.89559._M_t
  # DEBUG this => D#109
  # DEBUG this => _245
  # DEBUG __position$_M_node => __i$_M_node_730
  # DEBUG __x => &D.89560
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _645 = &_245->_M_t;
  # DEBUG this => _645
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_730;
  # DEBUG __x => &D.89560
  # DEBUG this => &__an
  # DEBUG __t => _645
  # DEBUG __an$_M_t => _645
  # DEBUG D#750 => &__an
  D.89558 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE17_M_insert_unique_INSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_ERKS9_RT_.isra.240.constprop (_645, __pos, &D.89560);
  goto <bb 96>;

  <bb 582>:
  # DEBUG D#322 => {CLOBBER}
  # DEBUG __j$_M_node => D#322
  # DEBUG this => NULL
  # DEBUG __x => NULL
  # DEBUG this => &D.59344
  # DEBUG D#239 => &D.59344._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.59344]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.59344]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.59344]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.59344]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.59344]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.59344]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.59344]._M_header;
  # DEBUG D#887 => &this_44(D)->router_list
  # DEBUG D#34 => D#887
  # DEBUG __n => 1
  # DEBUG this => D#34
  # DEBUG D#1276 => D#1297 + 48
  # DEBUG this => D#1276
  # DEBUG __k => &head_id
  # DEBUG this => D#1276
  # DEBUG __x => &head_id
  # DEBUG D#311 => &D#1276->_M_t
  # DEBUG this => D#311
  # DEBUG __k => &head_id
  # DEBUG this => D#311
  # DEBUG D#42 => D#311
  # DEBUG this => D#42
  # DEBUG D#310 => D#311
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &head_id
  # DEBUG __y => __i$_M_node_77
  # DEBUG __x => __i$_M_node_267
  if (__i$_M_node_267 == 0B)
    goto <bb 583>;
  else
    goto <bb 113>;

  <bb 583>:
  # __i$_M_node_291 = PHI <__i$_M_node_1653(118), __i$_M_node_1653(117), __i$_M_node_77(582)>
  # DEBUG this => &D.89635
  # DEBUG D#239 => &D.89635._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.89635]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.89635]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.89635]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.89635]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.89635]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.89635]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.89635]._M_header;
  # DEBUG this => &D.89636
  # DEBUG __a => &head_id
  # DEBUG __b => &D.89635
  D.89636.first = prephitmp_1453;
  # DEBUG D#670 => &D.89636.second
  # DEBUG this => D#670
  # DEBUG __x => &D.89635
  # DEBUG this => &MEM[(struct map *)&D.89636 + 8B]._M_t
  # DEBUG __x => &D.89635._M_t
  # DEBUG this => &D.89635._M_t
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)&D.89635]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)&D.89636 + 8B]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)&D.89636 + 8B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.89636 + 8B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.89636 + 8B]._M_node_count = 0;
  # DEBUG this => D#662
  MEM[(struct _Rb_tree_impl *)&D.89636 + 8B]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.89636 + 8B]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.89636 + 8B]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.89636 + 8B]._M_header;
  # DEBUG D#109 => &D.89635._M_t
  # DEBUG this => D#109
  # DEBUG this => D#1276
  # DEBUG __position$_M_node => __i$_M_node_291
  # DEBUG __x => &D.89636
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _675 = &MEM[(struct map *)prephitmp_1449 + 48B]._M_t;
  # DEBUG this => _675
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_291;
  # DEBUG __x => &D.89636
  # DEBUG this => &__an
  # DEBUG __t => _675
  # DEBUG __an$_M_t => _675
  # DEBUG D#750 => &__an
  D.89634 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE17_M_insert_unique_INSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_ERKS9_RT_.isra.240.constprop (_675, __pos, &D.89636);
  goto <bb 119>;

  <bb 584>:
  goto <bb 153> (<L34>);

  <bb 585>:
  # DEBUG this => &temp
  _88 = MEM[(char * *)&temp];
  # DEBUG D#1 => &temp
  # DEBUG this => D#1
  # DEBUG __nptr => _88
  _219 = strtol (_88, 0B, 10);
  _217 = (int) _219;
  # DEBUG link_weight => NULL
  _89 = (long unsigned int) head_type_4;
  # DEBUG D#888 => &this_44(D)->router_list
  _247 = MEM[(struct map * *)this_44(D) + 440B];
  # DEBUG D#34 => D#888
  # DEBUG __n => _89
  # DEBUG this => D#34
  _283 = _89 * 48;
  _284 = _247 + _283;
  # DEBUG this => _284
  # DEBUG __k => &head_id
  # DEBUG this => _284
  # DEBUG __x => &head_id
  # DEBUG D#311 => &_284->_M_t
  # DEBUG this => D#311
  # DEBUG __k => &head_id
  # DEBUG this => D#311
  __i$_M_node_693 = &MEM[(struct _Rb_tree *)_284]._M_impl._M_header;
  __i$_M_node_694 = MEM[(struct _Rb_tree_node_base * *)_284 + 16B];
  # DEBUG D#42 => D#311
  # DEBUG this => D#42
  # DEBUG D#310 => D#311
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &head_id
  # DEBUG __y => __i$_M_node_693
  # DEBUG __x => __i$_M_node_694
  if (__i$_M_node_694 == 0B)
    goto <bb 587>;
  else
    goto <bb 586>;

  <bb 586>:
  pretmp_1445 = head_id;
  goto <bb 133>;

  <bb 587>:
  pretmp_1518 = head_id;

  <bb 588>:
  # __i$_M_node_660 = PHI <__i$_M_node_1654(137), __i$_M_node_1654(136), __i$_M_node_693(587)>
  # prephitmp_1519 = PHI <pretmp_1445(137), pretmp_1445(136), pretmp_1518(587)>
  # DEBUG this => &D.89711
  # DEBUG D#239 => &D.89711._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.89711]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.89711]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.89711]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.89711]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.89711]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.89711]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.89711]._M_header;
  # DEBUG this => &D.89712
  # DEBUG __a => &head_id
  # DEBUG __b => &D.89711
  D.89712.first = prephitmp_1519;
  # DEBUG D#670 => &D.89712.second
  # DEBUG this => D#670
  # DEBUG __x => &D.89711
  # DEBUG this => &MEM[(struct map *)&D.89712 + 8B]._M_t
  # DEBUG __x => &D.89711._M_t
  # DEBUG this => &D.89711._M_t
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)&D.89711]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)&D.89712 + 8B]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)&D.89712 + 8B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.89712 + 8B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.89712 + 8B]._M_node_count = 0;
  # DEBUG this => D#662
  MEM[(struct _Rb_tree_impl *)&D.89712 + 8B]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.89712 + 8B]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.89712 + 8B]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.89712 + 8B]._M_header;
  # DEBUG D#109 => &D.89711._M_t
  # DEBUG this => D#109
  # DEBUG this => _284
  # DEBUG __position$_M_node => __i$_M_node_660
  # DEBUG __x => &D.89712
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _705 = &_284->_M_t;
  # DEBUG this => _705
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_660;
  # DEBUG __x => &D.89712
  # DEBUG this => &__an
  # DEBUG __t => _705
  # DEBUG __an$_M_t => _705
  # DEBUG D#750 => &__an
  D.89710 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE17_M_insert_unique_INSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_ERKS9_RT_.isra.240.constprop (_705, __pos, &D.89712);
  goto <bb 138>;

  <bb 589>:
  # __i$_M_node_295 = PHI <__i$_M_node_1753(150), __i$_M_node_1753(149), __i$_M_node_723(139)>
  # DEBUG this => NULL
  # DEBUG this => &D.89760
  # DEBUG __a => &body_id
  # DEBUG __b => NULL
  D.89760.first = body_id_213;
  MEM[(struct pair *)&D.89760 + 4B] = 0;
  MEM[(struct pair *)&D.89760 + 8B] = 0;
  # DEBUG this => D#1277
  # DEBUG __position$_M_node => __i$_M_node_295
  # DEBUG __x => &D.89760
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _735 = &MEM[(struct map *)__i$_M_node_709 + 40B]._M_t;
  # DEBUG this => _735
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_295;
  # DEBUG __x => &D.89760
  # DEBUG this => &__an
  # DEBUG __t => _735
  # DEBUG __an$_M_t => _735
  # DEBUG D#680 => &__an
  D.89759 = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_ZNSt8_Rb_treeIiSt4pairIKiS0_IiiEESt10_Select1stIS3_ESt4lessIiESaIS3_EE17_M_insert_unique_INS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_ERKS3_RT_.isra.223.constprop (_735, __pos, &D.89760);
  goto <bb 151>;

<L233>:
  goto <bb 561> (<L105>);

  <bb 591>:
  # DEBUG D#322 => {CLOBBER}
  # DEBUG __j$_M_node => D#322
  # DEBUG this => NULL
  # DEBUG __x => NULL
  # DEBUG this => &D.59348
  # DEBUG D#239 => &D.59348._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.59348]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.59348]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.59348]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.59348]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.59348]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.59348]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.59348]._M_header;
  # DEBUG D#890 => &this_44(D)->router_list
  # DEBUG D#34 => D#890
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => _248
  # DEBUG __k => &body_id
  # DEBUG this => _248
  # DEBUG __x => &body_id
  # DEBUG D#311 => &_248->_M_t
  # DEBUG this => D#311
  # DEBUG __k => &body_id
  # DEBUG this => D#311
  __i$_M_node_741 = MEM[(struct _Rb_tree_node_base * *)_248 + 16B];
  # DEBUG D#42 => D#311
  # DEBUG this => D#42
  # DEBUG D#310 => D#311
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &body_id
  # DEBUG __y => __i$_M_node_289
  # DEBUG __x => __i$_M_node_741
  if (__i$_M_node_741 == 0B)
    goto <bb 592>;
  else
    goto <bb 178>;

  <bb 592>:
  # __i$_M_node_845 = PHI <__i$_M_node_1656(183), __i$_M_node_1656(182), __i$_M_node_289(591)>
  # DEBUG this => &D.89815
  # DEBUG D#239 => &D.89815._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.89815]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.89815]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.89815]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.89815]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.89815]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.89815]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.89815]._M_header;
  # DEBUG this => &D.89816
  # DEBUG __a => &body_id
  # DEBUG __b => &D.89815
  D.89816.first = body_id_215;
  # DEBUG D#670 => &D.89816.second
  # DEBUG this => D#670
  # DEBUG __x => &D.89815
  # DEBUG this => &MEM[(struct map *)&D.89816 + 8B]._M_t
  # DEBUG __x => &D.89815._M_t
  # DEBUG this => &D.89815._M_t
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)&D.89815]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)&D.89816 + 8B]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)&D.89816 + 8B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.89816 + 8B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.89816 + 8B]._M_node_count = 0;
  # DEBUG this => D#662
  MEM[(struct _Rb_tree_impl *)&D.89816 + 8B]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.89816 + 8B]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.89816 + 8B]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.89816 + 8B]._M_header;
  # DEBUG D#109 => &D.89815._M_t
  # DEBUG this => D#109
  # DEBUG this => _248
  # DEBUG __position$_M_node => __i$_M_node_845
  # DEBUG __x => &D.89816
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _752 = &_248->_M_t;
  # DEBUG this => _752
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_845;
  # DEBUG __x => &D.89816
  # DEBUG this => &__an
  # DEBUG __t => _752
  # DEBUG __an$_M_t => _752
  # DEBUG D#750 => &__an
  D.89814 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE17_M_insert_unique_INSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_ERKS9_RT_.isra.240.constprop (_752, __pos, &D.89816);
  goto <bb 184>;

  <bb 593>:
  # DEBUG D#322 => {CLOBBER}
  # DEBUG __j$_M_node => D#322
  # DEBUG this => NULL
  # DEBUG __x => NULL
  # DEBUG this => &D.59349
  # DEBUG D#239 => &D.59349._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.59349]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.59349]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.59349]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.59349]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.59349]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.59349]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.59349]._M_header;
  # DEBUG D#892 => &this_44(D)->router_list
  # DEBUG D#34 => D#892
  # DEBUG __n => 1
  # DEBUG this => D#34
  # DEBUG D#1278 => D#1296 + 48
  # DEBUG this => D#1278
  # DEBUG __k => &body_id
  # DEBUG this => D#1278
  # DEBUG __x => &body_id
  # DEBUG D#311 => &D#1278->_M_t
  # DEBUG this => D#311
  # DEBUG __k => &body_id
  # DEBUG this => D#311
  # DEBUG D#42 => D#311
  # DEBUG this => D#42
  # DEBUG D#310 => D#311
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &body_id
  # DEBUG __y => __i$_M_node_104
  # DEBUG __x => __i$_M_node_303
  if (__i$_M_node_303 == 0B)
    goto <bb 594>;
  else
    goto <bb 201>;

  <bb 594>:
  # __i$_M_node_725 = PHI <__i$_M_node_1669(206), __i$_M_node_1669(205), __i$_M_node_104(593)>
  # DEBUG this => &D.89891
  # DEBUG D#239 => &D.89891._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.89891]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.89891]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.89891]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.89891]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.89891]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.89891]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.89891]._M_header;
  # DEBUG this => &D.89892
  # DEBUG __a => &body_id
  # DEBUG __b => &D.89891
  D.89892.first = body_id_215;
  # DEBUG D#670 => &D.89892.second
  # DEBUG this => D#670
  # DEBUG __x => &D.89891
  # DEBUG this => &MEM[(struct map *)&D.89892 + 8B]._M_t
  # DEBUG __x => &D.89891._M_t
  # DEBUG this => &D.89891._M_t
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)&D.89891]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)&D.89892 + 8B]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)&D.89892 + 8B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.89892 + 8B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.89892 + 8B]._M_node_count = 0;
  # DEBUG this => D#662
  MEM[(struct _Rb_tree_impl *)&D.89892 + 8B]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.89892 + 8B]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.89892 + 8B]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.89892 + 8B]._M_header;
  # DEBUG D#109 => &D.89891._M_t
  # DEBUG this => D#109
  # DEBUG this => D#1278
  # DEBUG __position$_M_node => __i$_M_node_725
  # DEBUG __x => &D.89892
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _782 = &MEM[(struct map *)prephitmp_463 + 48B]._M_t;
  # DEBUG this => _782
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_725;
  # DEBUG __x => &D.89892
  # DEBUG this => &__an
  # DEBUG __t => _782
  # DEBUG __an$_M_t => _782
  # DEBUG D#750 => &__an
  D.89890 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE17_M_insert_unique_INSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_ERKS9_RT_.isra.240.constprop (_782, __pos, &D.89892);
  goto <bb 207>;

  <bb 595>:
  # __i$_M_node_133 = PHI <__i$_M_node_1717(239), __i$_M_node_1717(238), __i$_M_node_195(231)>
  # DEBUG this => &D.89936
  # DEBUG __a => &head_id
  # DEBUG __b => NULL
  D.89936.first = pretmp_1516;
  D.89936.second = 0;
  # DEBUG this => D#1282
  # DEBUG __position$_M_node => __i$_M_node_133
  # DEBUG __x => &D.89936
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _812 = &MEM[(struct map *)this_44(D) + 392B]._M_t;
  # DEBUG this => _812
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_133;
  # DEBUG __x => &D.89936
  # DEBUG this => &__an
  # DEBUG __t => _812
  # DEBUG __an$_M_t => _812
  # DEBUG D#841 => &__an
  D.89937 = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_insert_unique_INS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_ERKS2_RT_.isra.263.constprop (_812, __pos, &D.89936);
  goto <bb 240>;

<L234>:
  goto <bb 561> (<L105>);

  <bb 597>:
  # __i$_M_node_742 = PHI <__i$_M_node_1709(269), __i$_M_node_1709(268), __i$_M_node_195(261)>
  # DEBUG this => &D.89963
  # DEBUG __a => &head_id
  # DEBUG __b => NULL
  D.89963.first = prephitmp_1508;
  D.89963.second = 0;
  # DEBUG this => D#1283
  # DEBUG __position$_M_node => __i$_M_node_742
  # DEBUG __x => &D.89963
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _829 = &MEM[(struct map *)this_44(D) + 392B]._M_t;
  # DEBUG this => _829
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_742;
  # DEBUG __x => &D.89963
  # DEBUG this => &__an
  # DEBUG __t => _829
  # DEBUG __an$_M_t => _829
  # DEBUG D#841 => &__an
  D.89964 = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_insert_unique_INS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_ERKS2_RT_.isra.263.constprop (_829, __pos, &D.89963);
  goto <bb 270>;

<L235>:
  goto <bb 561> (<L105>);

  <bb 599>:
  # __i$_M_node_532 = PHI <__i$_M_node_1710(279), __i$_M_node_1710(278), __i$_M_node_125(271)>
  # DEBUG this => &D.90021
  # DEBUG D#239 => &D.90021._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.90021]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.90021]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.90021]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.90021]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.90021]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.90021]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.90021]._M_header;
  # DEBUG this => &D.90022
  # DEBUG __a => &body_id
  # DEBUG __b => &D.90021
  D.90022.first = body_id_215;
  # DEBUG D#670 => &D.90022.second
  # DEBUG this => D#670
  # DEBUG __x => &D.90021
  # DEBUG this => &MEM[(struct map *)&D.90022 + 8B]._M_t
  # DEBUG __x => &D.90021._M_t
  # DEBUG this => &D.90021._M_t
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)&D.90021]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)&D.90022 + 8B]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)&D.90022 + 8B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.90022 + 8B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.90022 + 8B]._M_node_count = 0;
  # DEBUG this => D#662
  MEM[(struct _Rb_tree_impl *)&D.90022 + 8B]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.90022 + 8B]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.90022 + 8B]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.90022 + 8B]._M_header;
  # DEBUG D#109 => &D.90021._M_t
  # DEBUG this => D#109
  # DEBUG this => _250
  # DEBUG __position$_M_node => __i$_M_node_532
  # DEBUG __x => &D.90022
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _846 = &_250->_M_t;
  # DEBUG this => _846
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_532;
  # DEBUG __x => &D.90022
  # DEBUG this => &__an
  # DEBUG __t => _846
  # DEBUG __an$_M_t => _846
  # DEBUG D#750 => &__an
  D.90020 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE17_M_insert_unique_INSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_ERKS9_RT_.isra.240.constprop (_846, __pos, &D.90022);
  goto <bb 280>;

  <bb 600>:
  pretmp_1510 = head_id;

  <bb 601>:
  # __i$_M_node_747 = PHI <__i$_M_node_1711(292), __i$_M_node_1711(291), __i$_M_node_864(600)>
  # prephitmp_1511 = PHI <pretmp_1512(292), pretmp_1512(291), pretmp_1510(600)>
  # DEBUG this => NULL
  # DEBUG this => &D.90070
  # DEBUG __a => &head_id
  # DEBUG __b => NULL
  D.90070.first = prephitmp_1511;
  MEM[(struct pair *)&D.90070 + 4B] = 0;
  MEM[(struct pair *)&D.90070 + 8B] = 0;
  # DEBUG this => D#1284
  # DEBUG __position$_M_node => __i$_M_node_747
  # DEBUG __x => &D.90070
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _876 = &MEM[(struct map *)__i$_M_node_850 + 40B]._M_t;
  # DEBUG this => _876
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_747;
  # DEBUG __x => &D.90070
  # DEBUG this => &__an
  # DEBUG __t => _876
  # DEBUG __an$_M_t => _876
  # DEBUG D#680 => &__an
  D.90069 = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_ZNSt8_Rb_treeIiSt4pairIKiS0_IiiEESt10_Select1stIS3_ESt4lessIiESaIS3_EE17_M_insert_unique_INS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_ERKS3_RT_.isra.223.constprop (_876, __pos, &D.90070);
  goto <bb 293>;

<L236>:
  goto <bb 561> (<L105>);

  <bb 603>:
  # __i$_M_node_304 = PHI <__i$_M_node_1706(313), __i$_M_node_1706(312), __i$_M_node_134(305)>
  # DEBUG this => &D.90094
  # DEBUG __a => &body_id
  # DEBUG __b => NULL
  D.90094.first = body_id_215;
  D.90094.second = 0;
  # DEBUG this => D#1279
  # DEBUG __position$_M_node => __i$_M_node_304
  # DEBUG __x => &D.90094
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _893 = &MEM[(struct map *)this_44(D) + 392B]._M_t;
  # DEBUG this => _893
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_304;
  # DEBUG __x => &D.90094
  # DEBUG this => &__an
  # DEBUG __t => _893
  # DEBUG __an$_M_t => _893
  # DEBUG D#841 => &__an
  D.90095 = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_insert_unique_INS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_ERKS2_RT_.isra.263.constprop (_893, __pos, &D.90094);
  goto <bb 314>;

<L237>:
  goto <bb 561> (<L105>);

  <bb 605>:
  # __i$_M_node_192 = PHI <__i$_M_node_1730(342), __i$_M_node_1730(341), __i$_M_node_134(334)>
  # DEBUG this => &D.90121
  # DEBUG __a => &body_id
  # DEBUG __b => NULL
  D.90121.first = body_id_215;
  D.90121.second = 0;
  # DEBUG this => D#1280
  # DEBUG __position$_M_node => __i$_M_node_192
  # DEBUG __x => &D.90121
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _910 = &MEM[(struct map *)this_44(D) + 392B]._M_t;
  # DEBUG this => _910
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_192;
  # DEBUG __x => &D.90121
  # DEBUG this => &__an
  # DEBUG __t => _910
  # DEBUG __an$_M_t => _910
  # DEBUG D#841 => &__an
  D.90122 = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_insert_unique_INS8_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_ERKS2_RT_.isra.263.constprop (_910, __pos, &D.90121);
  goto <bb 343>;

<L238>:
  goto <bb 561> (<L105>);

  <bb 607>:
  # __i$_M_node_1850 = PHI <__i$_M_node_1707(352), __i$_M_node_1707(351), __i$_M_node_157(344)>
  # DEBUG this => &D.90179
  # DEBUG D#239 => &D.90179._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.90179]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.90179]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.90179]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.90179]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.90179]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.90179]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.90179]._M_header;
  # DEBUG this => &D.90180
  # DEBUG __a => &head_id
  # DEBUG __b => &D.90179
  D.90180.first = head_id.263_159;
  # DEBUG D#670 => &D.90180.second
  # DEBUG this => D#670
  # DEBUG __x => &D.90179
  # DEBUG this => &MEM[(struct map *)&D.90180 + 8B]._M_t
  # DEBUG __x => &D.90179._M_t
  # DEBUG this => &D.90179._M_t
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)&D.90179]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)&D.90180 + 8B]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)&D.90180 + 8B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.90180 + 8B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.90180 + 8B]._M_node_count = 0;
  # DEBUG this => D#662
  MEM[(struct _Rb_tree_impl *)&D.90180 + 8B]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.90180 + 8B]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.90180 + 8B]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.90180 + 8B]._M_header;
  # DEBUG D#109 => &D.90179._M_t
  # DEBUG this => D#109
  # DEBUG this => _251
  # DEBUG __position$_M_node => __i$_M_node_1850
  # DEBUG __x => &D.90180
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _927 = &_251->_M_t;
  # DEBUG this => _927
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_1850;
  # DEBUG __x => &D.90180
  # DEBUG this => &__an
  # DEBUG __t => _927
  # DEBUG __an$_M_t => _927
  # DEBUG D#750 => &__an
  D.90178 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE17_M_insert_unique_INSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_ERKS9_RT_.isra.240.constprop (_927, __pos, &D.90180);
  goto <bb 353>;

  <bb 608>:
  # __i$_M_node_309 = PHI <__i$_M_node_1718(365), __i$_M_node_1718(364), __i$_M_node_945(354)>
  # DEBUG this => NULL
  # DEBUG this => &D.90228
  # DEBUG __a => &body_id
  # DEBUG __b => NULL
  D.90228.first = body_id_215;
  MEM[(struct pair *)&D.90228 + 4B] = 0;
  MEM[(struct pair *)&D.90228 + 8B] = 0;
  # DEBUG this => D#1281
  # DEBUG __position$_M_node => __i$_M_node_309
  # DEBUG __x => &D.90228
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _957 = &MEM[(struct map *)__i$_M_node_931 + 40B]._M_t;
  # DEBUG this => _957
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_309;
  # DEBUG __x => &D.90228
  # DEBUG this => &__an
  # DEBUG __t => _957
  # DEBUG __an$_M_t => _957
  # DEBUG D#680 => &__an
  D.90227 = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_ZNSt8_Rb_treeIiSt4pairIKiS0_IiiEESt10_Select1stIS3_ESt4lessIiESaIS3_EE17_M_insert_unique_INS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_ERKS3_RT_.isra.223.constprop (_957, __pos, &D.90228);
  goto <bb 366>;

<L239>:
  goto <bb 561> (<L105>);

  <bb 610>:
  pretmp_482 = head_id;

  <bb 611>:
  # __i$_M_node_772 = PHI <__i$_M_node_1676(377), __i$_M_node_1676(376), __i$_M_node_164(610)>
  # prephitmp_483 = PHI <pretmp_1570(377), pretmp_1570(376), pretmp_482(610)>
  # DEBUG this => &D.90283
  # DEBUG D#239 => &D.90283._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.90283]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.90283]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.90283]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.90283]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.90283]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.90283]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.90283]._M_header;
  # DEBUG this => &D.90284
  # DEBUG __a => &head_id
  # DEBUG __b => &D.90283
  D.90284.first = prephitmp_483;
  # DEBUG D#670 => &D.90284.second
  # DEBUG this => D#670
  # DEBUG __x => &D.90283
  # DEBUG this => &MEM[(struct map *)&D.90284 + 8B]._M_t
  # DEBUG __x => &D.90283._M_t
  # DEBUG this => &D.90283._M_t
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)&D.90283]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)&D.90284 + 8B]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)&D.90284 + 8B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.90284 + 8B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.90284 + 8B]._M_node_count = 0;
  # DEBUG this => D#662
  MEM[(struct _Rb_tree_impl *)&D.90284 + 8B]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.90284 + 8B]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.90284 + 8B]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.90284 + 8B]._M_header;
  # DEBUG D#109 => &D.90283._M_t
  # DEBUG this => D#109
  # DEBUG this => D#1285
  # DEBUG __position$_M_node => __i$_M_node_772
  # DEBUG __x => &D.90284
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _974 = &MEM[(struct map *)_252 + 48B]._M_t;
  # DEBUG this => _974
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_772;
  # DEBUG __x => &D.90284
  # DEBUG this => &__an
  # DEBUG __t => _974
  # DEBUG __an$_M_t => _974
  # DEBUG D#750 => &__an
  D.90282 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE17_M_insert_unique_INSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_ERKS9_RT_.isra.240.constprop (_974, __pos, &D.90284);
  goto <bb 378>;

  <bb 612>:
  # __i$_M_node_777 = PHI <__i$_M_node_1677(390), __i$_M_node_1677(389), __i$_M_node_992(379)>
  # DEBUG this => NULL
  # DEBUG this => &D.90332
  # DEBUG __a => &body_id
  # DEBUG __b => NULL
  D.90332.first = body_id_215;
  MEM[(struct pair *)&D.90332 + 4B] = 0;
  MEM[(struct pair *)&D.90332 + 8B] = 0;
  # DEBUG this => D#1286
  # DEBUG __position$_M_node => __i$_M_node_777
  # DEBUG __x => &D.90332
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _1004 = &MEM[(struct map *)__i$_M_node_978 + 40B]._M_t;
  # DEBUG this => _1004
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_777;
  # DEBUG __x => &D.90332
  # DEBUG this => &__an
  # DEBUG __t => _1004
  # DEBUG __an$_M_t => _1004
  # DEBUG D#680 => &__an
  D.90331 = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_ZNSt8_Rb_treeIiSt4pairIKiS0_IiiEESt10_Select1stIS3_ESt4lessIiESaIS3_EE17_M_insert_unique_INS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_ERKS3_RT_.isra.223.constprop (_1004, __pos, &D.90332);
  goto <bb 391>;

<L240>:
  goto <bb 561> (<L105>);

  <bb 614>:
  # __i$_M_node_221 = PHI <__i$_M_node_1681(400), __i$_M_node_1681(399), __i$_M_node_183(392)>
  # DEBUG this => &D.90387
  # DEBUG D#239 => &D.90387._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.90387]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.90387]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.90387]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.90387]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.90387]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.90387]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.90387]._M_header;
  # DEBUG this => &D.90388
  # DEBUG __a => &body_id
  # DEBUG __b => &D.90387
  D.90388.first = body_id_215;
  # DEBUG D#670 => &D.90388.second
  # DEBUG this => D#670
  # DEBUG __x => &D.90387
  # DEBUG this => &MEM[(struct map *)&D.90388 + 8B]._M_t
  # DEBUG __x => &D.90387._M_t
  # DEBUG this => &D.90387._M_t
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)&D.90387]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)&D.90388 + 8B]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)&D.90388 + 8B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.90388 + 8B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.90388 + 8B]._M_node_count = 0;
  # DEBUG this => D#662
  MEM[(struct _Rb_tree_impl *)&D.90388 + 8B]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.90388 + 8B]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.90388 + 8B]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.90388 + 8B]._M_header;
  # DEBUG D#109 => &D.90387._M_t
  # DEBUG this => D#109
  # DEBUG this => D#1287
  # DEBUG __position$_M_node => __i$_M_node_221
  # DEBUG __x => &D.90388
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _1021 = &MEM[(struct map *)_253 + 48B]._M_t;
  # DEBUG this => _1021
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_221;
  # DEBUG __x => &D.90388
  # DEBUG this => &__an
  # DEBUG __t => _1021
  # DEBUG __an$_M_t => _1021
  # DEBUG D#750 => &__an
  D.90386 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE17_M_insert_unique_INSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_ERKS9_RT_.isra.240.constprop (_1021, __pos, &D.90388);
  goto <bb 401>;

  <bb 615>:
  # __i$_M_node_323 = PHI <__i$_M_node_1701(422), __i$_M_node_1701(421), __i$_M_node_1039(414)>
  # DEBUG this => &D.90463
  # DEBUG D#239 => &D.90463._M_t
  # DEBUG this => D#239
  # DEBUG D#238 => &MEM[(struct _Rb_tree *)D#239]._M_impl
  # DEBUG this => D#238
  # DEBUG this => D#238
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.90463]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.90463]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.90463]._M_node_count = 0;
  # DEBUG this => D#238
  MEM[(struct _Rb_tree_impl *)&D.90463]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.90463]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.90463]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.90463]._M_header;
  # DEBUG this => &D.90464
  # DEBUG __a => &body_id
  # DEBUG __b => &D.90463
  D.90464.first = body_id_215;
  # DEBUG D#670 => &D.90464.second
  # DEBUG this => D#670
  # DEBUG __x => &D.90463
  # DEBUG this => &MEM[(struct map *)&D.90464 + 8B]._M_t
  # DEBUG __x => &D.90463._M_t
  # DEBUG this => &D.90463._M_t
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)&D.90463]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)&D.90464 + 8B]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)&D.90464 + 8B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.90464 + 8B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.90464 + 8B]._M_node_count = 0;
  # DEBUG this => D#662
  MEM[(struct _Rb_tree_impl *)&D.90464 + 8B]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.90464 + 8B]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.90464 + 8B]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.90464 + 8B]._M_header;
  # DEBUG D#109 => &D.90463._M_t
  # DEBUG this => D#109
  # DEBUG this => D#1288
  # DEBUG __position$_M_node => __i$_M_node_323
  # DEBUG __x => &D.90464
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _1051 = &MEM[(struct map *)_254 + 48B]._M_t;
  # DEBUG this => _1051
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_323;
  # DEBUG __x => &D.90464
  # DEBUG this => &__an
  # DEBUG __t => _1051
  # DEBUG __an$_M_t => _1051
  # DEBUG D#750 => &__an
  D.90462 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE17_M_insert_unique_INSD_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS9_ESt23_Rb_tree_const_iteratorIS9_ERKS9_RT_.isra.240.constprop (_1051, __pos, &D.90464);
  goto <bb 423>;

  <bb 616>:
  pretmp_1562 = head_id;

  <bb 617>:
  # __i$_M_node_328 = PHI <__i$_M_node_1702(435), __i$_M_node_1702(434), __i$_M_node_1069(616)>
  # prephitmp_1563 = PHI <pretmp_1564(435), pretmp_1564(434), pretmp_1562(616)>
  # DEBUG this => NULL
  # DEBUG this => &D.90512
  # DEBUG __a => &head_id
  # DEBUG __b => NULL
  D.90512.first = prephitmp_1563;
  MEM[(struct pair *)&D.90512 + 4B] = 0;
  MEM[(struct pair *)&D.90512 + 8B] = 0;
  # DEBUG this => D#1289
  # DEBUG __position$_M_node => __i$_M_node_328
  # DEBUG __x => &D.90512
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _1081 = &MEM[(struct map *)__i$_M_node_1055 + 40B]._M_t;
  # DEBUG this => _1081
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_328;
  # DEBUG __x => &D.90512
  # DEBUG this => &__an
  # DEBUG __t => _1081
  # DEBUG __an$_M_t => _1081
  # DEBUG D#680 => &__an
  D.90511 = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_ZNSt8_Rb_treeIiSt4pairIKiS0_IiiEESt10_Select1stIS3_ESt4lessIiESaIS3_EE17_M_insert_unique_INS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_ERKS3_RT_.isra.223.constprop (_1081, __pos, &D.90512);
  goto <bb 436>;

<L241>:
  goto <bb 561> (<L105>);

  <bb 619>:
  _1017 = body_type_7 == 1;
  goto <bb 295>;

  <bb 620>:
  _340 = head_type_4 | body_type_7;
  if (_340 == 0)
    goto <bb 214>;
  else
    goto <bb 619>;

}



;; Function virtual void AnyNet::_ComputeSize(const Configuration&) (_ZN6AnyNet12_ComputeSizeERK13Configuration, funcdef_no=2497, decl_uid=47432, cgraph_uid=619, symbol_order=621)

Trying loop 3 as candidate
loop 3 is not innermost
loop is not parallel according to graphite
Trying loop 4 as candidate
loop 4 is innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is not innermost
loop is not parallel according to graphite
Trying loop 5 as candidate
loop 5 is innermost
loop is not parallel according to graphite
Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
virtual void AnyNet::_ComputeSize(const Configuration&) (struct AnyNet * const this, const struct Configuration & config)
{
  char_type D.91117;
  char __c;
  char_type D.91114;
  char __c;
  char_type D.91111;
  struct basic_ostream & D.91105;
  char_type D.91102;
  char __c;
  char_type D.91099;
  char __c;
  char_type D.91096;
  struct basic_ostream & D.91090;
  char_type D.91087;
  char __c;
  char_type D.91084;
  char __c;
  char_type D.91081;
  struct basic_ostream & D.91075;
  struct basic_ostream & D.91063;
  char_type D.91059;
  char __c;
  char_type D.91056;
  char __c;
  char_type D.91053;
  struct basic_ostream & D.91047;
  char_type D.91044;
  char __c;
  char_type D.91041;
  char __c;
  char_type D.91038;
  struct basic_ostream & D.91032;
  struct basic_ostream & D.91020;
  char_type D.91016;
  char __c;
  char_type D.91013;
  char __c;
  char_type D.91010;
  struct basic_ostream & D.91004;
  struct basic_ostream & D.90983;
  struct basic_ostream & D.90979;
  size_type __dnew;
  struct _Rb_tree_node_base * const iter2$_M_node;
  struct _Rb_tree_node_base * const iter2$_M_node;
  struct _Rb_tree_node_base * const iter3$_M_node;
  struct _Rb_tree_node_base * const iter$_M_node;
  const struct string D.56533;
  struct string D.56534;
  int pretmp_2;
  int pretmp_3;
  int pretmp_4;
  struct string * _13;
  int _14;
  char * const _16;
  char * const _18;
  int _24;
  int _26;
  struct basic_ostream & _28;
  int _31;
  struct basic_ostream & _33;
  struct _Rb_tree_node_base * _35;
  int _36;
  int _37;
  struct basic_ostream & _39;
  struct basic_ostream & _41;
  int _46;
  struct basic_ostream & _48;
  const size_type _49;
  int _50;
  struct basic_ostream & _52;
  int _55;
  int _56;
  struct basic_ostream & _58;
  struct basic_ostream & _60;
  int _61;
  int _62;
  const size_type _64;
  int prephitmp_65;
  int _66;
  int _69;
  int pretmp_71;
  char * const _74;
  int prephitmp_79;
  int prephitmp_80;
  struct map * _81;
  struct map * _82;
  struct map * _83;
  struct map * _84;
  struct _Rb_tree_node_base * _87;
  const size_type _91;
  char * const _92;
  int pretmp_102;
  int pretmp_103;
  int prephitmp_104;
  struct map * _105;
  const struct __ctype_type * _111;
  const struct __ctype_type * _113;
  const struct __ctype_type * _117;
  const struct __ctype_type * _119;
  const struct __ctype_type * _122;
  const struct __ctype_type * _125;
  int pretmp_141;
  struct _Rb_tree_node_base * _142;
  int pretmp_143;
  struct _Rb_tree_node_base * _151;
  struct _Rb_tree_node_base * _163;
  int (*__vtbl_ptr_type) () * _172;
  long int _173;
  sizetype _174;
  struct basic_ios * _175;
  int pretmp_176;
  struct basic_ostream & _178;
  struct _Rb_tree_node_base * _179;
  char _180;
  char_type _183;
  int (*__vtbl_ptr_type) () * _188;
  int (*__vtbl_ptr_type) () _189;
  void * PROF_193;
  char_type _195;
  int (*__vtbl_ptr_type) () * _207;
  long int _208;
  sizetype _209;
  struct basic_ios * _210;
  struct basic_ostream & _213;
  int prephitmp_214;
  char _215;
  char_type _218;
  int (*__vtbl_ptr_type) () * _223;
  int (*__vtbl_ptr_type) () _224;
  void * PROF_228;
  char_type _230;
  int (*__vtbl_ptr_type) () * _233;
  long int _234;
  sizetype _235;
  struct basic_ios * _236;
  struct basic_ostream & _239;
  struct _Rb_tree_node_base * _240;
  char _241;
  char_type _244;
  int (*__vtbl_ptr_type) () * _249;
  int (*__vtbl_ptr_type) () _250;
  struct map * _252;
  void * PROF_254;
  char_type _256;
  int (*__vtbl_ptr_type) () * _268;
  long int _269;
  sizetype _270;
  struct basic_ios * _271;
  struct basic_ostream & _274;
  int pretmp_275;
  char _276;
  char_type _279;
  int (*__vtbl_ptr_type) () * _284;
  int (*__vtbl_ptr_type) () _285;
  void * PROF_289;
  char_type _291;
  int (*__vtbl_ptr_type) () * _294;
  long int _295;
  sizetype _296;
  struct basic_ios * _297;
  struct basic_ostream & _300;
  int pretmp_301;
  char _302;
  char_type _305;
  int (*__vtbl_ptr_type) () * _310;
  int (*__vtbl_ptr_type) () _311;
  int prephitmp_314;
  void * PROF_315;
  char_type _317;
  int (*__vtbl_ptr_type) () * _320;
  long int _321;
  sizetype _322;
  struct basic_ios * _323;
  struct basic_ostream & _326;
  int pretmp_327;
  char _328;
  char_type _331;
  int (*__vtbl_ptr_type) () * _336;
  int (*__vtbl_ptr_type) () _337;
  void * PROF_341;
  char_type _343;

  <bb 2>:
  # DEBUG D#45 => &D.56532
  # DEBUG this => D#45
  # DEBUG D#44 => D#45
  # DEBUG this => D#44
  # DEBUG D#303 => &D.56532
  # DEBUG this => &D.56533
  # DEBUG __s => "network_file"
  # DEBUG __a => D#303
  # DEBUG D#302 => D#303
  # DEBUG this => &D.56533
  # DEBUG D#300 => &D.56533._M_dataplus
  # DEBUG D#118 => D#302
  # DEBUG this => D#300
  # DEBUG __dat => &D.56533.D.15209._M_local_buf
  # DEBUG __a => D#118
  # DEBUG D#117 => D#118
  # DEBUG D#115 => D#300
  # DEBUG D#116 => D#117
  # DEBUG this => D#115
  # DEBUG __a => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG this => D#113
  # DEBUG D.73458 => D#114
  MEM[(struct _Alloc_hider *)&D.56533]._M_p = &D.56533.D.15209._M_local_buf;
  # DEBUG __s => "network_file"
  # DEBUG this => &D.56533
  # DEBUG __beg => "network_file"
  # DEBUG __end => &MEM[(void *)"network_file" + 12B]
  # DEBUG this => &D.56533
  # DEBUG __beg => "network_file"
  # DEBUG __end => &MEM[(void *)"network_file" + 12B]
  # DEBUG this => &D.56533
  # DEBUG __beg => "network_file"
  # DEBUG __end => &MEM[(void *)"network_file" + 12B]
  # DEBUG __ptr => "network_file"
  # DEBUG __first => "network_file"
  # DEBUG __last => &MEM[(void *)"network_file" + 12B]
  # DEBUG D#487 => &__first
  # DEBUG D.77194 => D#487
  # DEBUG __first => "network_file"
  # DEBUG __last => &MEM[(void *)"network_file" + 12B]
  # DEBUG __dnew => 12
  # DEBUG D#1 => &D.56533
  # DEBUG this => D#1
  # DEBUG __p => &D.56533.D.15209._M_local_buf
  # DEBUG __k1 => "network_file"
  # DEBUG __k2 => &MEM[(void *)"network_file" + 12B]
  # DEBUG __d => &D.56533.D.15209._M_local_buf
  # DEBUG __s => "network_file"
  # DEBUG __n => 12
  # DEBUG __s1 => &D.56533.D.15209._M_local_buf
  # DEBUG __s2 => "network_file"
  # DEBUG __n => 12
  __builtin_memcpy (&D.56533.D.15209._M_local_buf, "network_file", 12);
  # DEBUG this => &D.56533
  # DEBUG __n => 12
  # DEBUG D#4 => &D.56533
  # DEBUG __length => 12
  # DEBUG this => D#4
  MEM[(size_type *)&D.56533 + 8B] = 12;
  # DEBUG D#1 => &D.56533
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.56533 + 28B]
  # DEBUG __c2 => D#23
  MEM[(char_type &)&D.56533 + 28] = 0;
  # DEBUG D#1312 => {CLOBBER}
  # DEBUG __dnew => D#1312
  D.56534 = Configuration::GetStr (config_10(D), &D.56533); [return slot optimization]

  <bb 3>:
  _13 = &this_12(D)->file_name;
  # DEBUG this => _13
  # DEBUG __str => &D.56534
  # DEBUG this => _13
  # DEBUG __str => &D.56534
  std::__cxx11::basic_string<char>::_M_assign (_13, &D.56534);

  <bb 4>:
  # DEBUG this => &D.56534
  # DEBUG this => &D.56534
  # DEBUG this => &D.56534
  _16 = MEM[(char * *)&D.56534];
  # DEBUG D#1 => &D.56534
  # DEBUG this => D#1
  # DEBUG this => &D.56534
  if (&D.56534.D.15209._M_local_buf != _16)
    goto <bb 5>;
  else
    goto <bb 6>;

  <bb 5>:
  # DEBUG D#153 => D.56534.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.56534
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.56534
  # DEBUG this => D#1
  # DEBUG this => &D.56534
  # DEBUG D#150 => &D.56534._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _16
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _16
  # DEBUG this => D#144
  # DEBUG D.83755 => D#145
  operator delete (_16);

  <bb 6>:
  # DEBUG D#154 => &D.56534._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.56534 ={v} {CLOBBER};
  # DEBUG this => &D.56533
  # DEBUG this => &D.56533
  # DEBUG this => &D.56533
  _18 = MEM[(char * *)&D.56533];
  # DEBUG D#1 => &D.56533
  # DEBUG this => D#1
  # DEBUG this => &D.56533
  if (&D.56533.D.15209._M_local_buf != _18)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  # DEBUG D#153 => D.56533.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.56533
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.56533
  # DEBUG this => D#1
  # DEBUG this => &D.56533
  # DEBUG D#150 => &D.56533._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _18
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _18
  # DEBUG this => D#144
  # DEBUG D.83740 => D#145
  operator delete (_18);

  <bb 8>:
  # DEBUG D#154 => &D.56533._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.56533 ={v} {CLOBBER};
  # DEBUG this => &D.56532
  # DEBUG this => &D.56532
  # DEBUG __lhs => _13
  # DEBUG __rhs => ""
  _14 = std::__cxx11::basic_string<char>::compare (_13, "");
  if (_14 == 0)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  # DEBUG __out => &cout
  # DEBUG __s => "No network file name provided"
  # DEBUG __s => "No network file name provided"
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "No network file name provided", 29);
  # DEBUG this => &cout
  # DEBUG __pf => endl
  std::endl<char, std::char_traits<char> > (&cout);
  exit (-1);

  <bb 10>:
  AnyNet::readFile (this_12(D));
  this_12(D)->D.47478._channels = 0;
  # DEBUG __s => "========================Network File Parsed=================\n"
  # DEBUG __out => &cout
  # DEBUG __s => "========================Network File Parsed=================\n"
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "========================Network File Parsed=================\n", 61);
  # DEBUG __s => "******************node listing**********************\n"
  # DEBUG __out => &cout
  # DEBUG __s => "******************node listing**********************\n"
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "******************node listing**********************\n", 53);
  # DEBUG this => &iter
  # DEBUG iter$_M_node => 0B
  # DEBUG D#908 => &this_12(D)->node_list
  # DEBUG this => D#908
  # DEBUG D#74 => &D#908->_M_t
  iter$_M_node_72 = MEM[(struct _Rb_tree_node_base * *)this_12(D) + 416B];
  # DEBUG D#73 => D#74
  # DEBUG this => D#73
  # DEBUG this => NULL
  # DEBUG __x => iter$_M_node_72
  # DEBUG iter$_M_node => iter$_M_node_72
  # DEBUG iter$_M_node => iter$_M_node_72
  # DEBUG D#911 => &this_12(D)->node_list
  # DEBUG this => D#911
  # DEBUG D#75 => &D#911->_M_t
  # DEBUG this => D#75
  _163 = &MEM[(struct _Rb_tree *)this_12(D) + 392B]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => _163
  # DEBUG this => &iter
  # DEBUG __x => &D.56622
  if (iter$_M_node_72 != _163)
    goto <bb 12>;
  else
    goto <bb 11>;

  <bb 11>:
  # DEBUG this => &iter3
  # DEBUG iter3$_M_node => 0B
  # DEBUG __s => "\n****************router to node listing*************\n"
  # DEBUG __out => &cout
  # DEBUG __s => "\n****************router to node listing*************\n"
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "\n****************router to node listing*************\n", 53);
  # DEBUG D#912 => &this_12(D)->router_list
  _81 = MEM[(struct map * *)this_12(D) + 440B];
  # DEBUG D#34 => D#912
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => NULL
  iter3$_M_node_29 = MEM[(struct _Rb_tree_node_base * *)_81 + 24B];
  # DEBUG D#70 => D#71
  # DEBUG this => D#70
  # DEBUG this => NULL
  # DEBUG __x => iter3$_M_node_29
  # DEBUG iter3$_M_node => iter3$_M_node_29
  # DEBUG iter3$_M_node => iter3$_M_node_29
  # DEBUG D#920 => &this_12(D)->router_list
  # DEBUG D#34 => D#920
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => NULL
  # DEBUG this => D#72
  _151 = &MEM[(struct _Rb_tree *)_81]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => _151
  # DEBUG this => &iter3
  # DEBUG __x => &D.56681
  if (iter3$_M_node_29 != _151)
    goto <bb 22>;
  else
    goto <bb 21>;

  <bb 12>:

  <bb 13>:
  # iter$_M_node_152 = PHI <iter$_M_node_72(12), iter$_M_node_45(20)>
  # DEBUG iter$_M_node => iter$_M_node_152
  # DEBUG D#911 => &this_12(D)->node_list
  # DEBUG this => D#911
  # DEBUG D#75 => &D#911->_M_t
  # DEBUG this => D#75
  # DEBUG this => NULL
  # DEBUG __x => _163
  # DEBUG this => &iter
  # DEBUG __x => &D.56622
  # DEBUG this => &iter
  # DEBUG this => iter$_M_node_152
  # DEBUG D#909 => &MEM[(struct _Rb_tree_node *)iter$_M_node_152]._M_value_field
  # DEBUG __r => D#909
  _24 = MEM[(struct pair *)iter$_M_node_152 + 32B].first;
  # DEBUG __out => &cout
  # DEBUG __s => "Node "
  # DEBUG __s => "Node "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "Node ", 5);
  std::basic_ostream<char>::operator<< (&cout, _24);
  # DEBUG this => &iter
  # DEBUG this => iter$_M_node_152
  # DEBUG D#910 => &MEM[(struct _Rb_tree_node *)iter$_M_node_152]._M_value_field
  # DEBUG __r => D#910
  _26 = MEM[(struct pair *)iter$_M_node_152 + 32B].second;
  # DEBUG __out => &cout
  # DEBUG __s => "\tRouter "
  # DEBUG __s => "\tRouter "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "\tRouter ", 8);
  _28 = std::basic_ostream<char>::operator<< (&cout, _26);
  # DEBUG this => _28
  # DEBUG __pf => endl
  # DEBUG __os => _28
  _172 = _28->_vptr.basic_ostream;
  _173 = MEM[(long int *)_172 + -24B];
  _174 = (sizetype) _173;
  _175 = _28 + _174;
  # DEBUG this => _175
  # DEBUG __c => 10
  _111 = MEM[(const struct basic_ios *)_175]._M_ctype;
  # DEBUG __f => _111
  if (_111 == 0B)
    goto <bb 14>;
  else
    goto <bb 15>;

  <bb 14>:
  std::__throw_bad_cast ();

  <bb 15>:
  # DEBUG this => _111
  # DEBUG __c => 10
  _180 = MEM[(const struct ctype *)_111]._M_widen_ok;
  if (_180 != 0)
    goto <bb 16>;
  else
    goto <bb 17>;

  <bb 16>:
  _183 = MEM[(const struct ctype *)_111]._M_widen[10];
  pretmp_327 = (int) _183;
  goto <bb 19>;

  <bb 17>:
  # DEBUG this => _111
  # DEBUG __c => 10
  std::ctype<char>::_M_widen_init (_111);
  _188 = MEM[(const struct ctype *)_111].D.21685._vptr.facet;
  _189 = MEM[(int (*__vtbl_ptr_type) () *)_188 + 48B];
  PROF_193 = [obj_type_ref] OBJ_TYPE_REF(_189;(const struct ctype)_111->6);
  if (PROF_193 == do_widen)
    goto <bb 19>;
  else
    goto <bb 18>;

  <bb 18>:
  _195 = OBJ_TYPE_REF(_189;(const struct ctype)_111->6) (_111, 10);
  pretmp_301 = (int) _195;

  <bb 19>:
  # prephitmp_80 = PHI <pretmp_327(16), 10(17), pretmp_301(18)>
  _178 = std::basic_ostream<char>::put (_28, prephitmp_80);
  # DEBUG __os => _178
  std::basic_ostream<char>::flush (_178);
  # DEBUG this => &iter
  iter$_M_node_45 = std::_Rb_tree_increment (iter$_M_node_152);
  # DEBUG iter$_M_node => iter$_M_node_45
  # DEBUG iter$_M_node => iter$_M_node_45
  # DEBUG D#911 => &this_12(D)->node_list
  # DEBUG this => D#911
  # DEBUG D#75 => &D#911->_M_t
  # DEBUG this => D#75
  # DEBUG this => NULL
  # DEBUG __x => _163
  # DEBUG this => &iter
  # DEBUG __x => &D.56622
  if (iter$_M_node_45 != _163)
    goto <bb 20>;
  else
    goto <bb 11>;

  <bb 20>:
  goto <bb 13>;

  <bb 21>:
  # DEBUG __s => "\n*****************router to router listing************\n"
  # DEBUG __out => &cout
  # DEBUG __s => "\n*****************router to router listing************\n"
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "\n*****************router to router listing************\n", 55);
  # DEBUG D#921 => &this_12(D)->router_list
  _83 = MEM[(struct map * *)this_12(D) + 440B];
  # DEBUG D#34 => D#921
  # DEBUG __n => 1
  # DEBUG this => D#34
  # DEBUG this => NULL
  iter3$_M_node_42 = MEM[(struct _Rb_tree_node_base * *)_83 + 72B];
  # DEBUG D#70 => D#71
  # DEBUG this => D#70
  # DEBUG this => NULL
  # DEBUG __x => iter3$_M_node_42
  # DEBUG iter3$_M_node => iter3$_M_node_42
  # DEBUG iter3$_M_node => iter3$_M_node_42
  # DEBUG D#932 => &this_12(D)->router_list
  # DEBUG D#34 => D#932
  # DEBUG __n => 1
  # DEBUG this => D#34
  # DEBUG this => NULL
  # DEBUG this => D#72
  _179 = &MEM[(struct _Rb_tree *)_83 + 48B]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => _179
  # DEBUG this => &iter3
  # DEBUG __x => &D.56745
  if (iter3$_M_node_42 != _179)
    goto <bb 39>;
  else
    goto <bb 64>;

  <bb 22>:

  <bb 23>:
  # iter3$_M_node_145 = PHI <iter3$_M_node_29(22), iter3$_M_node_86(30)>
  # DEBUG iter3$_M_node => iter3$_M_node_145
  # DEBUG D#920 => &this_12(D)->router_list
  # DEBUG D#34 => D#920
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => NULL
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => _151
  # DEBUG this => &iter3
  # DEBUG __x => &D.56681
  # DEBUG this => &iter3
  # DEBUG this => iter3$_M_node_145
  # DEBUG D#913 => &MEM[(struct _Rb_tree_node *)iter3$_M_node_145]._M_value_field
  # DEBUG __r => D#913
  _31 = MEM[(struct pair *)iter3$_M_node_145 + 32B].first;
  # DEBUG __out => &cout
  # DEBUG __s => "Router "
  # DEBUG __s => "Router "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "Router ", 7);
  _33 = std::basic_ostream<char>::operator<< (&cout, _31);
  # DEBUG this => _33
  # DEBUG __pf => endl
  # DEBUG __os => _33
  _207 = _33->_vptr.basic_ostream;
  _208 = MEM[(long int *)_207 + -24B];
  _209 = (sizetype) _208;
  _210 = _33 + _209;
  # DEBUG this => _210
  # DEBUG __c => 10
  _113 = MEM[(const struct basic_ios *)_210]._M_ctype;
  # DEBUG __f => _113
  if (_113 == 0B)
    goto <bb 14>;
  else
    goto <bb 24>;

  <bb 24>:
  # DEBUG this => _113
  # DEBUG __c => 10
  _215 = MEM[(const struct ctype *)_113]._M_widen_ok;
  if (_215 != 0)
    goto <bb 25>;
  else
    goto <bb 26>;

  <bb 25>:
  _218 = MEM[(const struct ctype *)_113]._M_widen[10];
  pretmp_275 = (int) _218;
  goto <bb 28>;

  <bb 26>:
  # DEBUG this => _113
  # DEBUG __c => 10
  std::ctype<char>::_M_widen_init (_113);
  _223 = MEM[(const struct ctype *)_113].D.21685._vptr.facet;
  _224 = MEM[(int (*__vtbl_ptr_type) () *)_223 + 48B];
  PROF_228 = [obj_type_ref] OBJ_TYPE_REF(_224;(const struct ctype)_113->6);
  if (PROF_228 == do_widen)
    goto <bb 28>;
  else
    goto <bb 27>;

  <bb 27>:
  _230 = OBJ_TYPE_REF(_224;(const struct ctype)_113->6) (_113, 10);
  pretmp_2 = (int) _230;

  <bb 28>:
  # prephitmp_79 = PHI <pretmp_275(25), 10(26), pretmp_2(27)>
  _213 = std::basic_ostream<char>::put (_33, prephitmp_79);
  # DEBUG __os => _213
  std::basic_ostream<char>::flush (_213);
  # DEBUG this => &iter2
  # DEBUG iter2$_M_node => 0B
  # DEBUG this => &iter3
  # DEBUG this => iter3$_M_node_145
  # DEBUG D#914 => &MEM[(struct _Rb_tree_node *)iter3$_M_node_145]._M_value_field
  # DEBUG __r => D#914
  # DEBUG D#915 => &MEM[(struct pair *)iter3$_M_node_145 + 32B].second
  # DEBUG this => D#915
  # DEBUG D#77 => &D#915->_M_t
  iter2$_M_node_34 = MEM[(struct _Rb_tree_node_base * *)iter3$_M_node_145 + 64B];
  # DEBUG D#76 => D#77
  # DEBUG this => D#76
  # DEBUG this => NULL
  # DEBUG __x => iter2$_M_node_34
  # DEBUG iter2$_M_node => iter2$_M_node_34
  # DEBUG iter2$_M_node => iter2$_M_node_34
  # DEBUG this => &iter3
  # DEBUG this => iter3$_M_node_145
  # DEBUG D#918 => &MEM[(struct _Rb_tree_node *)iter3$_M_node_145]._M_value_field
  # DEBUG __r => D#918
  # DEBUG D#919 => &MEM[(struct pair *)iter3$_M_node_145 + 32B].second
  # DEBUG this => D#919
  # DEBUG D#78 => &D#919->_M_t
  # DEBUG this => D#78
  _142 = &MEM[(struct _Rb_tree *)iter3$_M_node_145 + 40B]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => _142
  # DEBUG this => &iter2
  # DEBUG __x => &D.56742
  if (iter2$_M_node_34 != _142)
    goto <bb 31>;
  else
    goto <bb 29>;

  <bb 29>:
  # DEBUG D#935 => {CLOBBER}
  # DEBUG iter2$_M_node => D#935
  # DEBUG this => &iter3
  iter3$_M_node_86 = std::_Rb_tree_increment (iter3$_M_node_145);
  # DEBUG iter3$_M_node => iter3$_M_node_86
  # DEBUG iter3$_M_node => iter3$_M_node_86
  # DEBUG D#920 => &this_12(D)->router_list
  _82 = MEM[(struct map * *)this_12(D) + 440B];
  # DEBUG D#34 => D#920
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => NULL
  # DEBUG this => D#72
  _35 = &MEM[(struct _Rb_tree *)_82]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => _35
  # DEBUG this => &iter3
  # DEBUG __x => &D.56681
  if (_35 != iter3$_M_node_86)
    goto <bb 30>;
  else
    goto <bb 21>;

  <bb 30>:
  goto <bb 23>;

  <bb 31>:

  <bb 32>:
  # iter2$_M_node_153 = PHI <iter2$_M_node_34(31), iter2$_M_node_85(38)>
  # DEBUG iter2$_M_node => iter2$_M_node_153
  # DEBUG this => &iter3
  # DEBUG this => iter3$_M_node_145
  # DEBUG D#918 => &MEM[(struct _Rb_tree_node *)iter3$_M_node_145]._M_value_field
  # DEBUG __r => D#918
  # DEBUG D#919 => &MEM[(struct pair *)iter3$_M_node_145 + 32B].second
  # DEBUG this => D#919
  # DEBUG D#78 => &D#919->_M_t
  # DEBUG this => D#78
  # DEBUG this => NULL
  # DEBUG __x => _142
  # DEBUG this => &iter2
  # DEBUG __x => &D.56742
  # DEBUG this => &iter2
  # DEBUG this => iter2$_M_node_153
  # DEBUG D#916 => &MEM[(struct _Rb_tree_node *)iter2$_M_node_153]._M_value_field
  # DEBUG __r => D#916
  _36 = MEM[(struct pair *)iter2$_M_node_153 + 32B].second.second;
  # DEBUG this => &iter2
  # DEBUG this => iter2$_M_node_153
  # DEBUG D#917 => &MEM[(struct _Rb_tree_node *)iter2$_M_node_153]._M_value_field
  # DEBUG __r => D#917
  _37 = MEM[(struct pair *)iter2$_M_node_153 + 32B].first;
  # DEBUG __out => &cout
  # DEBUG __s => "\t Node "
  # DEBUG __s => "\t Node "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "\t Node ", 7);
  _39 = std::basic_ostream<char>::operator<< (&cout, _37);
  # DEBUG __out => _39
  # DEBUG __s => " lat "
  # DEBUG __s => " lat "
  std::__ostream_insert<char, std::char_traits<char> > (_39, " lat ", 5);
  _41 = std::basic_ostream<char>::operator<< (_39, _36);
  # DEBUG this => _41
  # DEBUG __pf => endl
  # DEBUG __os => _41
  _233 = _41->_vptr.basic_ostream;
  _234 = MEM[(long int *)_233 + -24B];
  _235 = (sizetype) _234;
  _236 = _41 + _235;
  # DEBUG this => _236
  # DEBUG __c => 10
  _117 = MEM[(const struct basic_ios *)_236]._M_ctype;
  # DEBUG __f => _117
  if (_117 == 0B)
    goto <bb 14>;
  else
    goto <bb 33>;

  <bb 33>:
  # DEBUG this => _117
  # DEBUG __c => 10
  _241 = MEM[(const struct ctype *)_117]._M_widen_ok;
  if (_241 != 0)
    goto <bb 34>;
  else
    goto <bb 35>;

  <bb 34>:
  _244 = MEM[(const struct ctype *)_117]._M_widen[10];
  pretmp_3 = (int) _244;
  goto <bb 37>;

  <bb 35>:
  # DEBUG this => _117
  # DEBUG __c => 10
  std::ctype<char>::_M_widen_init (_117);
  _249 = MEM[(const struct ctype *)_117].D.21685._vptr.facet;
  _250 = MEM[(int (*__vtbl_ptr_type) () *)_249 + 48B];
  PROF_254 = [obj_type_ref] OBJ_TYPE_REF(_250;(const struct ctype)_117->6);
  if (PROF_254 == do_widen)
    goto <bb 37>;
  else
    goto <bb 36>;

  <bb 36>:
  _256 = OBJ_TYPE_REF(_250;(const struct ctype)_117->6) (_117, 10);
  pretmp_176 = (int) _256;

  <bb 37>:
  # prephitmp_314 = PHI <pretmp_3(34), 10(35), pretmp_176(36)>
  _239 = std::basic_ostream<char>::put (_41, prephitmp_314);
  # DEBUG __os => _239
  std::basic_ostream<char>::flush (_239);
  # DEBUG D#36 => 0
  # DEBUG this => &iter2
  # DEBUG D.83863 => D#36
  # DEBUG __tmp$_M_node => iter2$_M_node_153
  iter2$_M_node_85 = std::_Rb_tree_increment (iter2$_M_node_153);
  # DEBUG iter2$_M_node => iter2$_M_node_85
  # DEBUG D#35 => {CLOBBER}
  # DEBUG __tmp$_M_node => D#35
  # DEBUG D.84000 => iter2$_M_node_153
  # DEBUG iter2$_M_node => iter2$_M_node_85
  # DEBUG this => &iter3
  # DEBUG this => iter3$_M_node_145
  # DEBUG D#918 => &MEM[(struct _Rb_tree_node *)iter3$_M_node_145]._M_value_field
  # DEBUG __r => D#918
  # DEBUG D#919 => &MEM[(struct pair *)iter3$_M_node_145 + 32B].second
  # DEBUG this => D#919
  # DEBUG D#78 => &D#919->_M_t
  # DEBUG this => D#78
  # DEBUG this => NULL
  # DEBUG __x => _142
  # DEBUG this => &iter2
  # DEBUG __x => &D.56742
  if (iter2$_M_node_85 != _142)
    goto <bb 38>;
  else
    goto <bb 29>;

  <bb 38>:
  goto <bb 32>;

  <bb 39>:

  <bb 40>:
  # iter3$_M_node_262 = PHI <iter3$_M_node_42(39), iter3$_M_node_90(55)>
  # DEBUG iter3$_M_node => iter3$_M_node_262
  # DEBUG D#932 => &this_12(D)->router_list
  # DEBUG D#34 => D#932
  # DEBUG __n => 1
  # DEBUG this => D#34
  # DEBUG this => NULL
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => _179
  # DEBUG this => &iter3
  # DEBUG __x => &D.56745
  # DEBUG this => &iter3
  # DEBUG this => iter3$_M_node_262
  # DEBUG D#922 => &MEM[(struct _Rb_tree_node *)iter3$_M_node_262]._M_value_field
  # DEBUG __r => D#922
  _46 = MEM[(struct pair *)iter3$_M_node_262 + 32B].first;
  # DEBUG __out => &cout
  # DEBUG __s => "Router "
  # DEBUG __s => "Router "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "Router ", 7);
  _48 = std::basic_ostream<char>::operator<< (&cout, _46);
  # DEBUG this => _48
  # DEBUG __pf => endl
  # DEBUG __os => _48
  _268 = _48->_vptr.basic_ostream;
  _269 = MEM[(long int *)_268 + -24B];
  _270 = (sizetype) _269;
  _271 = _48 + _270;
  # DEBUG this => _271
  # DEBUG __c => 10
  _119 = MEM[(const struct basic_ios *)_271]._M_ctype;
  # DEBUG __f => _119
  if (_119 == 0B)
    goto <bb 14>;
  else
    goto <bb 41>;

  <bb 41>:
  # DEBUG this => _119
  # DEBUG __c => 10
  _276 = MEM[(const struct ctype *)_119]._M_widen_ok;
  if (_276 != 0)
    goto <bb 42>;
  else
    goto <bb 43>;

  <bb 42>:
  _279 = MEM[(const struct ctype *)_119]._M_widen[10];
  pretmp_102 = (int) _279;
  goto <bb 45>;

  <bb 43>:
  # DEBUG this => _119
  # DEBUG __c => 10
  std::ctype<char>::_M_widen_init (_119);
  _284 = MEM[(const struct ctype *)_119].D.21685._vptr.facet;
  _285 = MEM[(int (*__vtbl_ptr_type) () *)_284 + 48B];
  PROF_289 = [obj_type_ref] OBJ_TYPE_REF(_285;(const struct ctype)_119->6);
  if (PROF_289 == do_widen)
    goto <bb 45>;
  else
    goto <bb 44>;

  <bb 44>:
  _291 = OBJ_TYPE_REF(_285;(const struct ctype)_119->6) (_119, 10);
  pretmp_103 = (int) _291;

  <bb 45>:
  # prephitmp_104 = PHI <pretmp_102(42), 10(43), pretmp_103(44)>
  _274 = std::basic_ostream<char>::put (_48, prephitmp_104);
  # DEBUG __os => _274
  std::basic_ostream<char>::flush (_274);
  # DEBUG this => &iter2
  # DEBUG iter2$_M_node => 0B
  # DEBUG this => &iter3
  # DEBUG this => iter3$_M_node_262
  # DEBUG D#923 => &MEM[(struct _Rb_tree_node *)iter3$_M_node_262]._M_value_field
  # DEBUG __r => D#923
  # DEBUG D#924 => &MEM[(struct pair *)iter3$_M_node_262 + 32B].second
  # DEBUG this => D#924
  # DEBUG D#47 => &MEM[(const struct map *)D#924]._M_t
  _49 = MEM[(long unsigned int *)iter3$_M_node_262 + 80B];
  # DEBUG D#46 => D#47
  # DEBUG this => D#46
  if (_49 == 0)
    goto <bb 46>;
  else
    goto <bb 52>;

  <bb 46>:
  # DEBUG this => &iter3
  # DEBUG this => iter3$_M_node_262
  # DEBUG D#925 => &MEM[(struct _Rb_tree_node *)iter3$_M_node_262]._M_value_field
  # DEBUG __r => D#925
  _50 = MEM[(struct pair *)iter3$_M_node_262 + 32B].first;
  # DEBUG __out => &cout
  # DEBUG __s => "Caution Router "
  # DEBUG __s => "Caution Router "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "Caution Router ", 15);
  _52 = std::basic_ostream<char>::operator<< (&cout, _50);
  # DEBUG __out => _52
  # DEBUG __s => " is not connected to any other Router\n"
  # DEBUG __s => " is not connected to any other Router\n"
  std::__ostream_insert<char, std::char_traits<char> > (_52, " is not connected to any other Router\n", 38);
  # DEBUG this => _52
  # DEBUG __pf => endl
  # DEBUG __os => _52
  _294 = _52->_vptr.basic_ostream;
  _295 = MEM[(long int *)_294 + -24B];
  _296 = (sizetype) _295;
  _297 = _52 + _296;
  # DEBUG this => _297
  # DEBUG __c => 10
  _122 = MEM[(const struct basic_ios *)_297]._M_ctype;
  # DEBUG __f => _122
  if (_122 == 0B)
    goto <bb 14>;
  else
    goto <bb 47>;

  <bb 47>:
  # DEBUG this => _122
  # DEBUG __c => 10
  _302 = MEM[(const struct ctype *)_122]._M_widen_ok;
  if (_302 != 0)
    goto <bb 48>;
  else
    goto <bb 49>;

  <bb 48>:
  _305 = MEM[(const struct ctype *)_122]._M_widen[10];
  pretmp_141 = (int) _305;
  goto <bb 51>;

  <bb 49>:
  # DEBUG this => _122
  # DEBUG __c => 10
  std::ctype<char>::_M_widen_init (_122);
  _310 = MEM[(const struct ctype *)_122].D.21685._vptr.facet;
  _311 = MEM[(int (*__vtbl_ptr_type) () *)_310 + 48B];
  PROF_315 = [obj_type_ref] OBJ_TYPE_REF(_311;(const struct ctype)_122->6);
  if (PROF_315 == do_widen)
    goto <bb 51>;
  else
    goto <bb 50>;

  <bb 50>:
  _317 = OBJ_TYPE_REF(_311;(const struct ctype)_122->6) (_122, 10);
  pretmp_143 = (int) _317;

  <bb 51>:
  # prephitmp_214 = PHI <pretmp_141(48), 10(49), pretmp_143(50)>
  _300 = std::basic_ostream<char>::put (_52, prephitmp_214);
  # DEBUG __os => _300
  std::basic_ostream<char>::flush (_300);

  <bb 52>:
  # DEBUG this => &iter3
  # DEBUG this => iter3$_M_node_262
  # DEBUG D#926 => &MEM[(struct _Rb_tree_node *)iter3$_M_node_262]._M_value_field
  # DEBUG __r => D#926
  # DEBUG D#927 => &MEM[(struct pair *)iter3$_M_node_262 + 32B].second
  # DEBUG this => D#927
  # DEBUG D#77 => &D#927->_M_t
  iter2$_M_node_53 = MEM[(struct _Rb_tree_node_base * *)iter3$_M_node_262 + 64B];
  # DEBUG D#76 => D#77
  # DEBUG this => D#76
  # DEBUG this => NULL
  # DEBUG __x => iter2$_M_node_53
  # DEBUG iter2$_M_node => iter2$_M_node_53
  # DEBUG iter2$_M_node => iter2$_M_node_53
  # DEBUG this => &iter3
  # DEBUG this => iter3$_M_node_262
  # DEBUG D#930 => &MEM[(struct _Rb_tree_node *)iter3$_M_node_262]._M_value_field
  # DEBUG __r => D#930
  # DEBUG D#931 => &MEM[(struct pair *)iter3$_M_node_262 + 32B].second
  # DEBUG this => D#931
  # DEBUG D#78 => &D#931->_M_t
  # DEBUG this => D#78
  _240 = &MEM[(struct _Rb_tree *)iter3$_M_node_262 + 40B]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => _240
  # DEBUG this => &iter2
  # DEBUG __x => &D.56748
  if (iter2$_M_node_53 != _240)
    goto <bb 56>;
  else
    goto <bb 53>;

  <bb 53>:
  # DEBUG D#937 => {CLOBBER}
  # DEBUG iter2$_M_node => D#937
  # DEBUG this => &iter3
  iter3$_M_node_90 = std::_Rb_tree_increment (iter3$_M_node_262);
  # DEBUG iter3$_M_node => iter3$_M_node_90
  # DEBUG iter3$_M_node => iter3$_M_node_90
  # DEBUG D#932 => &this_12(D)->router_list
  _84 = MEM[(struct map * *)this_12(D) + 440B];
  # DEBUG D#34 => D#932
  # DEBUG __n => 1
  # DEBUG this => D#34
  # DEBUG this => NULL
  # DEBUG this => D#72
  _87 = &MEM[(struct _Rb_tree *)_84 + 48B]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => _87
  # DEBUG this => &iter3
  # DEBUG __x => &D.56745
  if (_87 != iter3$_M_node_90)
    goto <bb 55>;
  else
    goto <bb 54>;

  <bb 54>:
  # _105 = PHI <_84(53)>
  goto <bb 64>;

  <bb 55>:
  goto <bb 40>;

  <bb 56>:

  <bb 57>:
  # iter2$_M_node_201 = PHI <iter2$_M_node_53(56), iter2$_M_node_89(63)>
  # DEBUG iter2$_M_node => iter2$_M_node_201
  # DEBUG this => &iter3
  # DEBUG this => iter3$_M_node_262
  # DEBUG D#930 => &MEM[(struct _Rb_tree_node *)iter3$_M_node_262]._M_value_field
  # DEBUG __r => D#930
  # DEBUG D#931 => &MEM[(struct pair *)iter3$_M_node_262 + 32B].second
  # DEBUG this => D#931
  # DEBUG D#78 => &D#931->_M_t
  # DEBUG this => D#78
  # DEBUG this => NULL
  # DEBUG __x => _240
  # DEBUG this => &iter2
  # DEBUG __x => &D.56748
  # DEBUG this => &iter2
  # DEBUG this => iter2$_M_node_201
  # DEBUG D#928 => &MEM[(struct _Rb_tree_node *)iter2$_M_node_201]._M_value_field
  # DEBUG __r => D#928
  _55 = MEM[(struct pair *)iter2$_M_node_201 + 32B].second.second;
  # DEBUG this => &iter2
  # DEBUG this => iter2$_M_node_201
  # DEBUG D#929 => &MEM[(struct _Rb_tree_node *)iter2$_M_node_201]._M_value_field
  # DEBUG __r => D#929
  _56 = MEM[(struct pair *)iter2$_M_node_201 + 32B].first;
  # DEBUG __out => &cout
  # DEBUG __s => "\t Router "
  # DEBUG __s => "\t Router "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "\t Router ", 9);
  _58 = std::basic_ostream<char>::operator<< (&cout, _56);
  # DEBUG __out => _58
  # DEBUG __s => " lat "
  # DEBUG __s => " lat "
  std::__ostream_insert<char, std::char_traits<char> > (_58, " lat ", 5);
  _60 = std::basic_ostream<char>::operator<< (_58, _55);
  # DEBUG this => _60
  # DEBUG __pf => endl
  # DEBUG __os => _60
  _320 = _60->_vptr.basic_ostream;
  _321 = MEM[(long int *)_320 + -24B];
  _322 = (sizetype) _321;
  _323 = _60 + _322;
  # DEBUG this => _323
  # DEBUG __c => 10
  _125 = MEM[(const struct basic_ios *)_323]._M_ctype;
  # DEBUG __f => _125
  if (_125 == 0B)
    goto <bb 14>;
  else
    goto <bb 58>;

  <bb 58>:
  # DEBUG this => _125
  # DEBUG __c => 10
  _328 = MEM[(const struct ctype *)_125]._M_widen_ok;
  if (_328 != 0)
    goto <bb 59>;
  else
    goto <bb 60>;

  <bb 59>:
  _331 = MEM[(const struct ctype *)_125]._M_widen[10];
  pretmp_71 = (int) _331;
  goto <bb 62>;

  <bb 60>:
  # DEBUG this => _125
  # DEBUG __c => 10
  std::ctype<char>::_M_widen_init (_125);
  _336 = MEM[(const struct ctype *)_125].D.21685._vptr.facet;
  _337 = MEM[(int (*__vtbl_ptr_type) () *)_336 + 48B];
  PROF_341 = [obj_type_ref] OBJ_TYPE_REF(_337;(const struct ctype)_125->6);
  if (PROF_341 == do_widen)
    goto <bb 62>;
  else
    goto <bb 61>;

  <bb 61>:
  _343 = OBJ_TYPE_REF(_337;(const struct ctype)_125->6) (_125, 10);
  pretmp_4 = (int) _343;

  <bb 62>:
  # prephitmp_65 = PHI <pretmp_71(59), 10(60), pretmp_4(61)>
  _326 = std::basic_ostream<char>::put (_60, prephitmp_65);
  # DEBUG __os => _326
  std::basic_ostream<char>::flush (_326);
  _61 = this_12(D)->D.47478._channels;
  _62 = _61 + 1;
  this_12(D)->D.47478._channels = _62;
  # DEBUG this => &iter2
  iter2$_M_node_89 = std::_Rb_tree_increment (iter2$_M_node_201);
  # DEBUG iter2$_M_node => iter2$_M_node_89
  # DEBUG iter2$_M_node => iter2$_M_node_89
  # DEBUG this => &iter3
  # DEBUG this => iter3$_M_node_262
  # DEBUG D#930 => &MEM[(struct _Rb_tree_node *)iter3$_M_node_262]._M_value_field
  # DEBUG __r => D#930
  # DEBUG D#931 => &MEM[(struct pair *)iter3$_M_node_262 + 32B].second
  # DEBUG this => D#931
  # DEBUG D#78 => &D#931->_M_t
  # DEBUG this => D#78
  # DEBUG this => NULL
  # DEBUG __x => _240
  # DEBUG this => &iter2
  # DEBUG __x => &D.56748
  if (iter2$_M_node_89 != _240)
    goto <bb 63>;
  else
    goto <bb 53>;

  <bb 63>:
  goto <bb 57>;

  <bb 64>:
  # _252 = PHI <_105(54), _83(21)>

  <bb 73>:
  # DEBUG D#933 => &this_12(D)->router_list
  # DEBUG D#34 => D#933
  # DEBUG __n => 1
  # DEBUG this => D#34
  # DEBUG this => NULL
  _91 = MEM[(long unsigned int *)_252 + 88B];
  # DEBUG D#48 => D#49
  # DEBUG this => D#48
  _66 = (int) _91;
  this_12(D)->D.47478._size = _66;
  # DEBUG D#934 => &this_12(D)->node_list
  # DEBUG this => D#934
  # DEBUG D#51 => &MEM[(const struct map *)D#934]._M_t
  _64 = MEM[(long unsigned int *)this_12(D) + 432B];
  # DEBUG D#50 => D#51
  # DEBUG this => D#50
  _69 = (int) _64;
  this_12(D)->D.47478._nodes = _69;
  # DEBUG D#939 => {CLOBBER}
  # DEBUG iter$_M_node => D#939
  # DEBUG D#940 => {CLOBBER}
  # DEBUG iter3$_M_node => D#940
  return;

<L20>:
  # DEBUG this => &D.56534
  # DEBUG this => &D.56534
  # DEBUG this => &D.56534
  _92 = MEM[(char * *)&D.56534];
  # DEBUG D#1 => &D.56534
  # DEBUG this => D#1
  # DEBUG this => &D.56534
  if (&D.56534.D.15209._M_local_buf != _92)
    goto <bb 66>;
  else
    goto <bb 67>;

  <bb 66>:
  # DEBUG D#153 => D.56534.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.56534
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.56534
  # DEBUG this => D#1
  # DEBUG this => &D.56534
  # DEBUG D#150 => &D.56534._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _92
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _92
  # DEBUG this => D#144
  # DEBUG D.83970 => D#145
  operator delete (_92);

  <bb 67>:
  # DEBUG D#154 => &D.56534._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.56534 ={v} {CLOBBER};
  resx 4

<L27>:
  goto <bb 70> (<L21>);

<L26>:

<L21>:
  # DEBUG this => &D.56533
  # DEBUG this => &D.56533
  # DEBUG this => &D.56533
  _74 = MEM[(char * *)&D.56533];
  # DEBUG D#1 => &D.56533
  # DEBUG this => D#1
  # DEBUG this => &D.56533
  if (&D.56533.D.15209._M_local_buf != _74)
    goto <bb 71>;
  else
    goto <bb 72>;

  <bb 71>:
  # DEBUG D#153 => D.56533.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.56533
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.56533
  # DEBUG this => D#1
  # DEBUG this => &D.56533
  # DEBUG D#150 => &D.56533._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _74
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _74
  # DEBUG this => D#144
  # DEBUG D.83985 => D#145
  operator delete (_74);

  <bb 72>:
  # DEBUG D#154 => &D.56533._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.56533 ={v} {CLOBBER};
  resx 3

}



;; Function std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_copy(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_Reuse_or_alloc_node; _Key = int; _Val = std::pair<const int, std::map<int, std::pair<int, int> > >; _KeyOfValue = std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, std::map<int, std::pair<int, int> > > >*; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type = const std::_Rb_tree_node<std::pair<const int, std::map<int, std::pair<int, int> > > >*] (_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EE7_M_copyINSD_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIS9_EPKSH_SI_RT_, funcdef_no=3713, decl_uid=65306, cgraph_uid=1835, symbol_order=1837)

Trying loop 1 as candidate
loop 1 is not innermost
loop is not parallel according to graphite
Trying loop 11 as candidate
loop 11 is innermost
loop is not parallel according to graphite
Trying loop 12 as candidate
loop 12 is innermost
loop is not parallel according to graphite
Trying loop 9 as candidate
loop 9 is innermost
loop is not parallel according to graphite
Trying loop 10 as candidate
loop 10 is innermost
loop is not parallel according to graphite
Trying loop 8 as candidate
loop 8 is innermost
loop is not parallel according to graphite
Trying loop 7 as candidate
loop 7 is innermost
loop is not parallel according to graphite
Trying loop 5 as candidate
loop 5 is innermost
loop is not parallel according to graphite
Trying loop 6 as candidate
loop 6 is innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is innermost
loop is not parallel according to graphite
Trying loop 4 as candidate
loop 4 is innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is innermost
loop is not parallel according to graphite
std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_copy(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_Reuse_or_alloc_node; _Key = int; _Val = std::pair<const int, std::map<int, std::pair<int, int> > >; _KeyOfValue = std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, std::map<int, std::pair<int, int> > > >*; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type = const std::_Rb_tree_node<std::pair<const int, std::map<int, std::pair<int, int> > > >*] (struct _Rb_tree * const this, const struct _Rb_tree_node * __x, struct _Rb_tree_node * __p, struct _Reuse_or_alloc_node & __node_gen)
{
  bool __node_gen___M_nodes_lsm.2102;
  struct _Rb_tree_node_base * __node_gen___M_nodes_lsm.2101;
  bool __node_gen___M_nodes_lsm.2100;
  struct _Rb_tree_node_base * __node_gen___M_nodes_lsm.2099;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node_base * D.91290;
  struct _Rb_tree_node * __node;
  struct _Rb_tree_node * D.91287;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * D.91181;
  struct _Rb_tree_node * __node;
  struct _Rb_tree_node * D.91178;
  struct _Rb_tree_node_base * _13;
  struct _Rb_tree_node * _15;
  _Rb_tree_color _17;
  struct _Rb_tree_node_base * _20;
  struct _Rb_tree_node * _23;
  struct _Rb_tree_node_base * _25;
  void * _26;
  struct _Rb_tree_node_base * const _33;
  _Rb_tree_color _36;
  struct _Rb_tree_node_base * _37;
  struct _Rb_tree_node_base * _41;
  struct _Rep_type * _46;
  struct _Rb_tree_node_base * _47;
  struct _Rb_tree_node * _48;
  struct _Rb_tree_node_base * _50;
  struct _Rb_tree_node_base * _51;
  struct _Rb_tree_node_base * _52;
  struct _Rb_tree_node_base * _53;
  struct _Rb_tree_node_base * _54;
  struct _Rb_tree_node_base * _55;
  struct _Rb_tree_node_base * _56;
  int _57;
  void * _60;
  struct _Rb_tree_node_base * _61;
  struct _Rb_tree_node_base * const _62;
  long unsigned int _69;
  int _71;
  struct _Rb_tree_node_base * _72;
  struct _Rep_type * _73;
  void * _74;
  struct _Rb_tree_node_base * _75;
  struct _Rb_tree_node_base * const _76;
  long unsigned int _83;
  struct _Rep_type * _85;
  struct _Rb_tree_node * _87;
  struct _Rb_tree_node_base * _89;
  struct _Rb_tree_node_base * _90;
  struct _Rb_tree_node_base * _91;
  struct _Rb_tree_node_base * _93;
  struct _Rb_tree_node_base * _94;
  struct _Rb_tree_node_base * _95;
  int _96;
  void * _99;
  struct _Rb_tree_node_base * _101;
  struct _Rb_tree_node_base * _104;
  struct _Rb_tree_node_base * const _105;
  long unsigned int _112;
  struct _Rb_tree_node_base * _113;
  int _114;
  struct _Rep_type * _116;
  void * _117;
  struct _Rb_tree_node_base * _118;
  struct _Rb_tree_node_base * const _119;
  long unsigned int _126;
  struct _Rb_tree_node_base * _130;
  struct _Rb_tree_node * _142;
  struct _Rb_tree_node_base * _152;
  struct _Rb_tree_node_base * _199;

  <bb 2>:
  # DEBUG D#759 => this_8(D)
  # DEBUG __x => __x_9(D)
  # DEBUG __node_gen => __node_gen_10(D)
  # DEBUG this => D#759
  # DEBUG this => __x_9(D)
  # DEBUG D#1315 => &__x_9(D)->_M_value_field
  # DEBUG __r => D#1315
  # DEBUG this => __node_gen_10(D)
  # DEBUG __arg => D#1315
  # DEBUG this => __node_gen_10(D)
  _37 = __node_gen_10(D)->_M_nodes;
  if (_37 == 0B)
    goto <bb 91>;
  else
    goto <bb 3>;

  <bb 3>:
  # DEBUG __node => _37
  _50 = _37->_M_parent;
  __node_gen_10(D)->_M_nodes = _50;
  if (_50 != 0B)
    goto <bb 4>;
  else
    goto <bb 14>;

  <bb 4>:
  _51 = _50->_M_right;
  if (_37 == _51)
    goto <bb 5>;
  else
    goto <bb 13>;

  <bb 5>:
  _50->_M_right = 0B;
  _52 = _50->_M_left;
  if (_52 != 0B)
    goto <bb 6>;
  else
    goto <bb 89>;

  <bb 6>:
  __node_gen_10(D)->_M_nodes = _52;
  # DEBUG this => __node_gen_10(D)
  _25 = _52->_M_right;
  if (_25 == 0B)
    goto <bb 11>;
  else
    goto <bb 7>;

  <bb 7>:

  <bb 8>:
  # _113 = PHI <_25(7), _54(9)>
  _54 = _113->_M_right;
  if (_54 == 0B)
    goto <bb 10>;
  else
    goto <bb 9>;

  <bb 9>:
  goto <bb 8>;

  <bb 10>:
  # _53 = PHI <_113(8)>
  __node_gen_10(D)->_M_nodes = _53;

  <bb 11>:
  # _56 = PHI <_53(10), _52(6)>
  _55 = _56->_M_left;
  if (_55 != 0B)
    goto <bb 12>;
  else
    goto <bb 89>;

  <bb 12>:
  __node_gen_10(D)->_M_nodes = _55;
  goto <bb 90>;

  <bb 13>:
  _50->_M_left = 0B;
  goto <bb 90>;

  <bb 14>:
  __node_gen_10(D)->_M_root = 0B;
  goto <bb 90>;

  <bb 15>:
  # DEBUG this => _46
  # DEBUG this => _46
  # DEBUG D#106 => D#1316
  # DEBUG this => D#106
  # DEBUG this => _46
  # DEBUG __x => NULL
  # DEBUG __p => NULL
  # DEBUG this => &__an
  # DEBUG __t => _46
  __an._M_t = _46;
  __x_64 = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_Alloc_node> (_46, _62, _61, &__an);

  <bb 16>:
  __an ={v} {CLOBBER};
  MEM[(struct _Rb_tree_node_base * &)_37 + 56] = __x_64;
  # DEBUG this => _46
  # DEBUG this => _46
  # DEBUG __x => __x_64

  <bb 17>:
  # __x_65 = PHI <__x_64(16), __x_66(18)>
  # DEBUG __x => __x_65
  __x_66 = __x_65->_M_left;
  if (__x_66 == 0B)
    goto <bb 19>;
  else
    goto <bb 18>;

  <bb 18>:
  goto <bb 17>;

  <bb 19>:
  # __x_151 = PHI <__x_65(17)>
  MEM[(struct _Rb_tree_node_base * &)_37 + 64] = __x_151;
  # DEBUG this => _46
  # DEBUG this => _46
  # DEBUG __x => __x_64

  <bb 20>:
  # __x_67 = PHI <__x_64(19), __x_68(21)>
  # DEBUG __x => __x_67
  __x_68 = __x_67->_M_right;
  if (__x_68 == 0B)
    goto <bb 22>;
  else
    goto <bb 21>;

  <bb 21>:
  goto <bb 20>;

  <bb 22>:
  # __x_145 = PHI <__x_67(20)>
  MEM[(struct _Rb_tree_node_base * &)_37 + 72] = __x_145;
  _69 = MEM[(const struct _Rb_tree &)__x_9(D) + 40]._M_impl._M_node_count;
  MEM[(struct _Rb_tree *)_37 + 40B]._M_impl._M_node_count = _69;
  goto <bb 35>;

<L13>:
  _60 = __builtin_eh_pointer (4);
  __cxa_begin_catch (_60);
  # DEBUG D#295 => D#668
  # DEBUG __p => _37
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG D#293 => 1
  # DEBUG __p => _37
  # DEBUG __a => D#292
  # DEBUG __n => D#293
  # DEBUG D#291 => D#293
  # DEBUG D#290 => D#292
  # DEBUG D#288 => D#290
  # DEBUG D#289 => D#291
  # DEBUG __p => _37
  # DEBUG this => D#288
  # DEBUG D.91194 => D#289
  operator delete (_37);
  __cxa_rethrow ();

<L15>:
  __cxa_end_catch ();
  resx 5

  <bb 25>:
  _73 = &MEM[(struct map *)_48 + 40B]._M_t;
  # DEBUG this => D#1325
  # DEBUG this => D#1325
  # DEBUG D#106 => D#1317
  # DEBUG this => D#106
  # DEBUG this => D#1325
  # DEBUG __x => NULL
  # DEBUG __p => NULL
  # DEBUG this => &__an
  # DEBUG __t => D#1325
  __an._M_t = _73;
  __x_78 = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_Alloc_node> (_73, _76, _75, &__an);

  <bb 26>:
  __an ={v} {CLOBBER};
  MEM[(struct _Rb_tree_node_base * &)_48 + 56] = __x_78;
  # DEBUG this => D#1325
  # DEBUG this => D#1325
  # DEBUG __x => __x_78

  <bb 27>:
  # __x_79 = PHI <__x_78(26), __x_80(28)>
  # DEBUG __x => __x_79
  __x_80 = __x_79->_M_left;
  if (__x_80 == 0B)
    goto <bb 29>;
  else
    goto <bb 28>;

  <bb 28>:
  goto <bb 27>;

  <bb 29>:
  # __x_144 = PHI <__x_79(27)>
  MEM[(struct _Rb_tree_node_base * &)_48 + 64] = __x_144;
  # DEBUG this => D#1325
  # DEBUG this => D#1325
  # DEBUG __x => __x_78

  <bb 30>:
  # __x_81 = PHI <__x_78(29), __x_82(31)>
  # DEBUG __x => __x_81
  __x_82 = __x_81->_M_right;
  if (__x_82 == 0B)
    goto <bb 32>;
  else
    goto <bb 31>;

  <bb 31>:
  goto <bb 30>;

  <bb 32>:
  # __x_143 = PHI <__x_81(30)>
  MEM[(struct _Rb_tree_node_base * &)_48 + 72] = __x_143;
  _83 = MEM[(const struct _Rb_tree &)__x_9(D) + 40]._M_impl._M_node_count;
  MEM[(struct _Rb_tree *)_48 + 40B]._M_impl._M_node_count = _83;
  goto <bb 35>;

<L16>:
  _74 = __builtin_eh_pointer (7);
  __cxa_begin_catch (_74);
  # DEBUG D#295 => D#668
  # DEBUG __p => _48
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG D#293 => 1
  # DEBUG __p => _48
  # DEBUG __a => D#292
  # DEBUG __n => D#293
  # DEBUG D#291 => D#293
  # DEBUG D#290 => D#292
  # DEBUG D#288 => D#290
  # DEBUG D#289 => D#291
  # DEBUG __p => _48
  # DEBUG this => D#288
  # DEBUG D.91234 => D#289
  operator delete (_48);
  __cxa_rethrow ();

<L18>:
  __cxa_end_catch ();
  resx 8

  <bb 35>:
  # __p_49 = PHI <_37(22), _48(32), _48(91), _37(90)>
  # DEBUG __tmp => NULL
  _17 = __x_9(D)->D.60031._M_color;
  __p_49->D.60031._M_color = _17;
  __p_49->D.60031._M_left = 0B;
  __p_49->D.60031._M_right = 0B;
  # DEBUG __top => NULL
  __p_49->D.60031._M_parent = __p_11(D);
  _13 = __x_9(D)->D.60031._M_right;
  if (_13 != 0B)
    goto <bb 36>;
  else
    goto <bb 38>;

  <bb 36>:
  _33 = MEM[(struct _Rb_tree_node_base * *)__x_9(D) + 24B];
  # DEBUG D#135 => __x_9(D)
  # DEBUG __x => D#135
  _15 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_Reuse_or_alloc_node> (this_8(D), _33, __p_49, __node_gen_10(D));

  <bb 37>:
  __p_49->D.60031._M_right = _15;

  <bb 38>:
  # DEBUG __p => NULL
  __x_31 = MEM[(struct _Rb_tree_node_base * *)__x_9(D) + 16B];
  # DEBUG D#134 => __x_9(D)
  # DEBUG __x => D#134
  # DEBUG __x => NULL
  # DEBUG __p => __p_49
  # DEBUG __x => __x_31
  if (__x_31 == 0B)
    goto <bb 39>;
  else
    goto <bb 40>;

  <bb 39>:
  return __p_49;

  <bb 40>:

  <bb 41>:
  # __x_115 = PHI <__x_31(40), __x_32(85)>
  # __p_278 = PHI <__p_49(40), __p_88(85)>
  # DEBUG __p => __p_278
  # DEBUG __x => __x_115
  # DEBUG D#759 => this_8(D)
  # DEBUG __x => __x_115
  # DEBUG __node_gen => __node_gen_10(D)
  # DEBUG this => D#759
  # DEBUG this => __x_115
  # DEBUG D#1318 => &__x_115->_M_value_field
  # DEBUG __r => D#1318
  # DEBUG this => __node_gen_10(D)
  # DEBUG __arg => D#1318
  # DEBUG this => __node_gen_10(D)
  _41 = __node_gen_10(D)->_M_nodes;
  if (_41 == 0B)
    goto <bb 92>;
  else
    goto <bb 42>;

  <bb 42>:
  # DEBUG __node => _41
  _89 = _41->_M_parent;
  __node_gen_10(D)->_M_nodes = _89;
  if (_89 != 0B)
    goto <bb 43>;
  else
    goto <bb 53>;

  <bb 43>:
  _90 = _89->_M_right;
  if (_41 == _90)
    goto <bb 44>;
  else
    goto <bb 52>;

  <bb 44>:
  _89->_M_right = 0B;
  _91 = _89->_M_left;
  if (_91 != 0B)
    goto <bb 45>;
  else
    goto <bb 94>;

  <bb 45>:
  __node_gen_10(D)->_M_nodes = _91;
  # DEBUG this => __node_gen_10(D)
  _72 = _91->_M_right;
  if (_72 == 0B)
    goto <bb 50>;
  else
    goto <bb 46>;

  <bb 46>:

  <bb 47>:
  # _130 = PHI <_72(46), _93(48)>
  _93 = _130->_M_right;
  if (_93 == 0B)
    goto <bb 49>;
  else
    goto <bb 48>;

  <bb 48>:
  goto <bb 47>;

  <bb 49>:
  # _199 = PHI <_130(47)>
  __node_gen_10(D)->_M_nodes = _199;

  <bb 50>:
  # _95 = PHI <_199(49), _91(45)>
  _94 = _95->_M_left;
  if (_94 != 0B)
    goto <bb 51>;
  else
    goto <bb 94>;

  <bb 51>:
  __node_gen_10(D)->_M_nodes = _94;
  goto <bb 95>;

  <bb 52>:
  _89->_M_left = 0B;
  goto <bb 95>;

  <bb 53>:
  __node_gen_10(D)->_M_root = 0B;
  goto <bb 95>;

  <bb 54>:

  <bb 55>:
  # __x_127 = PHI <__x_86(96), __x_102(54)>
  # DEBUG __x => __x_127
  _101 = MEM[(struct _Rb_tree_node_base * *)__x_127 + 24B];
  # DEBUG D#107 => __x_127
  # DEBUG __x => D#107
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (_85, _101);
  __x_102 = MEM[(struct _Rb_tree_node_base * *)__x_127 + 16B];
  # DEBUG D#108 => __x_127
  # DEBUG __x => D#108
  # DEBUG __y => NULL
  # DEBUG D#535 => _85
  # DEBUG __p => __x_127
  # DEBUG this => D#535
  # DEBUG D#534 => D#535
  # DEBUG D#533 => D#535
  # DEBUG D#532 => D#535
  # DEBUG D#530 => D#532
  # DEBUG D#531 => __x_127
  # DEBUG this => D#530
  # DEBUG __p => D#531
  # DEBUG D#529 => D#530
  # DEBUG D#528 => D#531
  # DEBUG D#527 => D#531
  # DEBUG this => D#527
  # DEBUG D#526 => &D#528->_M_value_field
  # DEBUG __r => D#526
  # DEBUG D#525 => D#529
  # DEBUG this => D#525
  # DEBUG D#524 => D#525
  # DEBUG this => D#524
  # DEBUG this => NULL
  # DEBUG D.77692 => NULL
  # DEBUG this => NULL
  # DEBUG D#241 => D#526
  # DEBUG this => D#240
  # DEBUG __p => D#241
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#533
  # DEBUG __p => __x_127
  # DEBUG this => D#534
  # DEBUG D#430 => 1
  # DEBUG __p => __x_127
  # DEBUG __a => D#429
  # DEBUG __n => D#430
  # DEBUG D#428 => D#430
  # DEBUG D#427 => D#429
  # DEBUG D#425 => D#427
  # DEBUG D#426 => D#428
  # DEBUG __p => __x_127
  # DEBUG this => D#425
  # DEBUG D.91327 => D#426
  operator delete (__x_127);
  # DEBUG __x => __x_102
  # DEBUG __x => __x_102
  if (__x_102 == 0B)
    goto <bb 56>;
  else
    goto <bb 54>;

  <bb 56>:
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)_85]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  MEM[(struct  &)_41 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#756 => __node_gen_10(D)->_M_t
  # DEBUG D#669 => D#756
  # DEBUG __node => _41
  # DEBUG __x => D#1318
  # DEBUG this => D#669
  # DEBUG D#668 => D#669
  # DEBUG D#667 => D#669
  # DEBUG this => _41
  # DEBUG D#1321 => &MEM[(struct _Rb_tree_node *)_41]._M_value_field
  # DEBUG __r => D#1321
  # DEBUG D#472 => D#667
  # DEBUG this => D#472
  # DEBUG D#471 => D#472
  # DEBUG this => D#471
  # DEBUG this => NULL
  # DEBUG D.77058 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1321
  # DEBUG __val => D#1318
  # DEBUG this => D#666
  # DEBUG D#20 => 56
  # DEBUG __p => D#1321
  # DEBUG D.80314 => D#20
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)_85]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#756 => __node_gen_10(D)->_M_t
  # DEBUG D#669 => D#756
  # DEBUG __node => _41
  # DEBUG __x => D#1318
  # DEBUG this => D#669
  # DEBUG D#668 => D#669
  # DEBUG D#667 => D#669
  # DEBUG this => _41
  # DEBUG __r => D#1321
  # DEBUG D#472 => D#667
  # DEBUG this => D#472
  # DEBUG D#471 => D#472
  # DEBUG this => D#471
  # DEBUG this => NULL
  # DEBUG D.77058 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1321
  # DEBUG __val => D#1318
  # DEBUG this => D#666
  # DEBUG D#20 => 56
  # DEBUG __p => D#1321
  # DEBUG D.80314 => D#20
  # DEBUG this => D#1321
  # DEBUG D.91309 => D#1318
  _96 = MEM[(const struct pair &)__x_115 + 32].first;
  MEM[(struct pair *)_41 + 32B].first = _96;
  # DEBUG D#664 => &D#1318->second
  # DEBUG D#665 => &D#1321->second
  # DEBUG this => D#665
  # DEBUG __x => D#664
  # DEBUG D#1319 => &MEM[(const struct map &)__x_115 + 40]._M_t
  # DEBUG this => _85
  # DEBUG __x => D#1319
  # DEBUG this => D#1319
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)D#1319]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)_85]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)_41 + 40B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)_41 + 40B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)_41 + 40B]._M_node_count = 0;
  # DEBUG this => D#662
  _104 = &MEM[(struct _Rb_tree_impl *)_41 + 40B]._M_header;
  MEM[(struct _Rb_tree_impl *)_41 + 40B]._M_header._M_left = _104;
  MEM[(struct _Rb_tree_impl *)_41 + 40B]._M_header._M_right = _104;
  _105 = MEM[(struct _Rb_tree_node_base * *)__x_115 + 56B];
  # DEBUG D#109 => D#1319
  # DEBUG this => D#109
  if (_105 != 0B)
    goto <bb 57>;
  else
    goto <bb 80>;

  <bb 57>:
  # DEBUG this => _85
  # DEBUG this => _85
  # DEBUG D#106 => D#1319
  # DEBUG this => D#106
  # DEBUG this => _85
  # DEBUG __x => NULL
  # DEBUG __p => NULL
  # DEBUG this => &__an
  # DEBUG __t => _85
  __an._M_t = _85;
  __x_107 = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_Alloc_node> (_85, _105, _104, &__an);

  <bb 58>:
  __an ={v} {CLOBBER};
  MEM[(struct _Rb_tree_node_base * &)_41 + 56] = __x_107;
  # DEBUG this => _85
  # DEBUG this => _85
  # DEBUG __x => __x_107

  <bb 59>:
  # __x_108 = PHI <__x_107(58), __x_109(60)>
  # DEBUG __x => __x_108
  __x_109 = __x_108->_M_left;
  if (__x_109 == 0B)
    goto <bb 61>;
  else
    goto <bb 60>;

  <bb 60>:
  goto <bb 59>;

  <bb 61>:
  # __x_92 = PHI <__x_108(59)>
  MEM[(struct _Rb_tree_node_base * &)_41 + 64] = __x_92;
  # DEBUG this => _85
  # DEBUG this => _85
  # DEBUG __x => __x_107

  <bb 62>:
  # __x_110 = PHI <__x_107(61), __x_111(63)>
  # DEBUG __x => __x_110
  __x_111 = __x_110->_M_right;
  if (__x_111 == 0B)
    goto <bb 64>;
  else
    goto <bb 63>;

  <bb 63>:
  goto <bb 62>;

  <bb 64>:
  # __x_58 = PHI <__x_110(62)>
  MEM[(struct _Rb_tree_node_base * &)_41 + 72] = __x_58;
  _112 = MEM[(const struct _Rb_tree &)__x_115 + 40]._M_impl._M_node_count;
  MEM[(struct _Rb_tree *)_41 + 40B]._M_impl._M_node_count = _112;
  goto <bb 80>;

  # _152 = PHI <_41(57)>
<L19>:
  _99 = __builtin_eh_pointer (10);
  __cxa_begin_catch (_99);
  # DEBUG D#295 => D#668
  # DEBUG __p => _152
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG D#293 => 1
  # DEBUG __p => _152
  # DEBUG __a => D#292
  # DEBUG __n => D#293
  # DEBUG D#291 => D#293
  # DEBUG D#290 => D#292
  # DEBUG D#288 => D#290
  # DEBUG D#289 => D#291
  # DEBUG __p => _152
  # DEBUG this => D#288
  # DEBUG D.91303 => D#289
  operator delete (_152);
  __cxa_rethrow ();

<L21>:
  __cxa_end_catch ();
  resx 11

<L26>:
  goto <bb 87> (<L10>);

  <bb 68>:
  # DEBUG __tmp => _87
  # DEBUG D#669 => D#724
  # DEBUG __node => _87
  # DEBUG __x => D#1318
  # DEBUG this => D#669
  # DEBUG D#668 => D#669
  # DEBUG D#667 => D#669
  # DEBUG this => _87
  # DEBUG D#1322 => &_87->_M_value_field
  # DEBUG __r => D#1322
  # DEBUG D#472 => D#667
  # DEBUG this => D#472
  # DEBUG D#471 => D#472
  # DEBUG this => D#471
  # DEBUG this => NULL
  # DEBUG D.77058 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1322
  # DEBUG __val => D#1318
  # DEBUG this => D#666
  # DEBUG D#20 => 56
  # DEBUG __p => D#1322
  # DEBUG D.80314 => D#20
  # DEBUG this => D#1322
  # DEBUG D.91362 => D#1318
  _114 = MEM[(const struct pair &)__x_115 + 32].first;
  MEM[(struct pair *)_87 + 32B].first = _114;
  # DEBUG D#664 => &D#1318->second
  # DEBUG D#665 => &D#1322->second
  # DEBUG this => D#665
  # DEBUG __x => D#664
  # DEBUG D#1320 => &MEM[(const struct map &)__x_115 + 40]._M_t
  # DEBUG D#1326 => &MEM[(struct map *)_87 + 40B]._M_t
  # DEBUG this => D#1326
  # DEBUG __x => D#1320
  # DEBUG this => D#1320
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)D#1320]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)D#1326]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)_87 + 40B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)_87 + 40B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)_87 + 40B]._M_node_count = 0;
  # DEBUG this => D#662
  _118 = &MEM[(struct _Rb_tree_impl *)_87 + 40B]._M_header;
  MEM[(struct _Rb_tree_impl *)_87 + 40B]._M_header._M_left = _118;
  MEM[(struct _Rb_tree_impl *)_87 + 40B]._M_header._M_right = _118;
  _119 = MEM[(struct _Rb_tree_node_base * *)__x_115 + 56B];
  # DEBUG D#109 => D#1320
  # DEBUG this => D#109
  if (_119 != 0B)
    goto <bb 69>;
  else
    goto <bb 80>;

  <bb 69>:
  _116 = &MEM[(struct map *)_87 + 40B]._M_t;
  # DEBUG this => D#1326
  # DEBUG this => D#1326
  # DEBUG D#106 => D#1320
  # DEBUG this => D#106
  # DEBUG this => D#1326
  # DEBUG __x => NULL
  # DEBUG __p => NULL
  # DEBUG this => &__an
  # DEBUG __t => D#1326
  __an._M_t = _116;
  __x_121 = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_Alloc_node> (_116, _119, _118, &__an);

  <bb 70>:
  __an ={v} {CLOBBER};
  MEM[(struct _Rb_tree_node_base * &)_87 + 56] = __x_121;
  # DEBUG this => D#1326
  # DEBUG this => D#1326
  # DEBUG __x => __x_121

  <bb 71>:
  # __x_122 = PHI <__x_121(70), __x_123(72)>
  # DEBUG __x => __x_122
  __x_123 = __x_122->_M_left;
  if (__x_123 == 0B)
    goto <bb 73>;
  else
    goto <bb 72>;

  <bb 72>:
  goto <bb 71>;

  <bb 73>:
  # __x_34 = PHI <__x_122(71)>
  MEM[(struct _Rb_tree_node_base * &)_87 + 64] = __x_34;
  # DEBUG this => D#1326
  # DEBUG this => D#1326
  # DEBUG __x => __x_121

  <bb 74>:
  # __x_124 = PHI <__x_121(73), __x_125(75)>
  # DEBUG __x => __x_124
  __x_125 = __x_124->_M_right;
  if (__x_125 == 0B)
    goto <bb 76>;
  else
    goto <bb 75>;

  <bb 75>:
  goto <bb 74>;

  <bb 76>:
  # __x_198 = PHI <__x_124(74)>
  MEM[(struct _Rb_tree_node_base * &)_87 + 72] = __x_198;
  _126 = MEM[(const struct _Rb_tree &)__x_115 + 40]._M_impl._M_node_count;
  MEM[(struct _Rb_tree *)_87 + 40B]._M_impl._M_node_count = _126;
  goto <bb 80>;

  # _142 = PHI <_87(69)>
<L22>:
  _117 = __builtin_eh_pointer (13);
  __cxa_begin_catch (_117);
  # DEBUG D#295 => D#668
  # DEBUG __p => _142
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG D#293 => 1
  # DEBUG __p => _142
  # DEBUG __a => D#292
  # DEBUG __n => D#293
  # DEBUG D#291 => D#293
  # DEBUG D#290 => D#292
  # DEBUG D#288 => D#290
  # DEBUG D#289 => D#291
  # DEBUG __p => _142
  # DEBUG this => D#288
  # DEBUG D.91356 => D#289
  operator delete (_142);
  __cxa_rethrow ();

<L24>:
  __cxa_end_catch ();
  resx 14

<L27>:
  goto <bb 87> (<L10>);

  <bb 80>:
  # __p_88 = PHI <_41(64), _87(76), _87(68), _41(56)>
  # DEBUG __tmp => NULL
  _36 = __x_115->D.60031._M_color;
  __p_88->D.60031._M_color = _36;
  __p_88->D.60031._M_left = 0B;
  __p_88->D.60031._M_right = 0B;
  # DEBUG __y => NULL
  __p_278->D.60031._M_left = __p_88;
  __p_88->D.60031._M_parent = __p_278;
  _20 = __x_115->D.60031._M_right;
  if (_20 != 0B)
    goto <bb 81>;
  else
    goto <bb 84>;

  <bb 81>:
  # DEBUG D#135 => __x_115
  # DEBUG __x => D#135
  _23 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_Reuse_or_alloc_node> (this_8(D), _20, __p_88, __node_gen_10(D));
  goto <bb 83>;

<L28>:
  goto <bb 87> (<L10>);

  <bb 83>:
  __p_88->D.60031._M_right = _23;

  <bb 84>:
  # DEBUG __p => NULL
  __x_32 = MEM[(struct _Rb_tree_node_base * *)__x_115 + 16B];
  # DEBUG D#134 => __x_115
  # DEBUG __x => D#134
  # DEBUG __x => NULL
  # DEBUG __p => __p_88
  # DEBUG __x => __x_32
  if (__x_32 == 0B)
    goto <bb 39>;
  else
    goto <bb 85>;

  <bb 85>:
  goto <bb 41>;

<L25>:

<L10>:
  _26 = __builtin_eh_pointer (1);
  __cxa_begin_catch (_26);
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_erase (this_8(D), __p_49);
  __cxa_rethrow ();

<L12>:
  __cxa_end_catch ();
  resx 2

  <bb 89>:

  <bb 90>:
  # DEBUG __node => NULL
  # DEBUG __node => NULL
  # DEBUG D#757 => __node_gen_10(D)->_M_t
  # DEBUG D#541 => D#757
  # DEBUG __p => NULL
  # DEBUG this => D#541
  # DEBUG D#540 => D#541
  # DEBUG this => NULL
  # DEBUG __r => D#539
  # DEBUG D#472 => D#540
  # DEBUG this => D#472
  # DEBUG D#471 => D#472
  # DEBUG this => D#471
  # DEBUG this => NULL
  # DEBUG D.77058 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#539
  # DEBUG this => D#538
  # DEBUG this => D#539
  # DEBUG D#537 => &D#539->second
  # DEBUG this => D#537
  _46 = &MEM[(struct map *)_37 + 40B]._M_t;
  # DEBUG this => _46
  _47 = MEM[(struct _Rb_tree_node_base * *)_37 + 56B];
  # DEBUG D#58 => _46
  # DEBUG this => D#58
  std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_M_erase (_46, _47);
  # DEBUG D#536 => &MEM[(struct _Rb_tree *)_46]._M_impl
  # DEBUG this => D#536
  # DEBUG this => D#536
  # DEBUG this => D#536
  MEM[(struct  &)_37 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#756 => __node_gen_10(D)->_M_t
  # DEBUG D#669 => D#756
  # DEBUG __node => _37
  # DEBUG __x => D#1315
  # DEBUG this => D#669
  # DEBUG D#668 => D#669
  # DEBUG D#667 => D#669
  # DEBUG this => _37
  # DEBUG D#1323 => &MEM[(struct _Rb_tree_node *)_37]._M_value_field
  # DEBUG __r => D#1323
  # DEBUG D#472 => D#667
  # DEBUG this => D#472
  # DEBUG D#471 => D#472
  # DEBUG this => D#471
  # DEBUG this => NULL
  # DEBUG D.77058 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1323
  # DEBUG __val => D#1315
  # DEBUG this => D#666
  # DEBUG D#20 => 56
  # DEBUG __p => D#1323
  # DEBUG D.80314 => D#20
  # DEBUG this => D#1323
  # DEBUG D.91200 => D#1315
  _57 = MEM[(const struct pair &)__x_9(D) + 32].first;
  MEM[(struct pair *)_37 + 32B].first = _57;
  # DEBUG D#664 => &D#1315->second
  # DEBUG D#665 => &D#1323->second
  # DEBUG this => D#665
  # DEBUG __x => D#664
  # DEBUG D#1316 => &MEM[(const struct map &)__x_9(D) + 40]._M_t
  # DEBUG this => _46
  # DEBUG __x => D#1316
  # DEBUG this => D#1316
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)D#1316]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)_46]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)_37 + 40B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)_37 + 40B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)_37 + 40B]._M_node_count = 0;
  # DEBUG this => D#662
  _61 = &MEM[(struct _Rb_tree_impl *)_37 + 40B]._M_header;
  MEM[(struct _Rb_tree_impl *)_37 + 40B]._M_header._M_left = _61;
  MEM[(struct _Rb_tree_impl *)_37 + 40B]._M_header._M_right = _61;
  _62 = MEM[(struct _Rb_tree_node_base * *)__x_9(D) + 56B];
  # DEBUG D#109 => D#1316
  # DEBUG this => D#109
  if (_62 != 0B)
    goto <bb 15>;
  else
    goto <bb 35>;

  <bb 91>:
  # DEBUG __node => NULL
  # DEBUG __node => NULL
  # DEBUG D#758 => __node_gen_10(D)->_M_t
  # DEBUG D#725 => D#758
  # DEBUG __x => D#1315
  # DEBUG this => D#725
  # DEBUG D#724 => D#725
  # DEBUG D#723 => D#725
  # DEBUG D#722 => D#723
  # DEBUG this => D#722
  # DEBUG D#721 => D#722
  # DEBUG this => D#721
  # DEBUG __n => 1
  # DEBUG __a => D#720
  # DEBUG D#719 => D#720
  # DEBUG D#717 => D#719
  # DEBUG D#718 => 0B
  # DEBUG __n => 1
  # DEBUG this => D#717
  # DEBUG D.91166 => D#718
  # DEBUG D#716 => D#717
  # DEBUG D#715 => D#716
  # DEBUG this => D#715
  _48 = operator new (88);
  # DEBUG __tmp => _48
  # DEBUG D#669 => D#724
  # DEBUG __node => _48
  # DEBUG __x => D#1315
  # DEBUG this => D#669
  # DEBUG D#668 => D#669
  # DEBUG D#667 => D#669
  # DEBUG this => _48
  # DEBUG D#1324 => &_48->_M_value_field
  # DEBUG __r => D#1324
  # DEBUG D#472 => D#667
  # DEBUG this => D#472
  # DEBUG D#471 => D#472
  # DEBUG this => D#471
  # DEBUG this => NULL
  # DEBUG D.77058 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1324
  # DEBUG __val => D#1315
  # DEBUG this => D#666
  # DEBUG D#20 => 56
  # DEBUG __p => D#1324
  # DEBUG D.80314 => D#20
  # DEBUG this => D#1324
  # DEBUG D.91240 => D#1315
  _71 = MEM[(const struct pair &)__x_9(D) + 32].first;
  MEM[(struct pair *)_48 + 32B].first = _71;
  # DEBUG D#664 => &D#1315->second
  # DEBUG D#665 => &D#1324->second
  # DEBUG this => D#665
  # DEBUG __x => D#664
  # DEBUG D#1317 => &MEM[(const struct map &)__x_9(D) + 40]._M_t
  # DEBUG D#1325 => &MEM[(struct map *)_48 + 40B]._M_t
  # DEBUG this => D#1325
  # DEBUG __x => D#1317
  # DEBUG this => D#1317
  # DEBUG __a => NULL
  # DEBUG D#663 => &MEM[(const struct _Rb_tree &)D#1317]._M_impl._M_key_compare
  # DEBUG D#662 => &MEM[(struct _Rb_tree *)D#1325]._M_impl
  # DEBUG this => D#662
  # DEBUG __comp => D#663
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG __a => NULL
  # DEBUG this => D#662
  # DEBUG D.77682 => NULL
  MEM[(struct _Rb_tree_impl *)_48 + 40B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)_48 + 40B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)_48 + 40B]._M_node_count = 0;
  # DEBUG this => D#662
  _75 = &MEM[(struct _Rb_tree_impl *)_48 + 40B]._M_header;
  MEM[(struct _Rb_tree_impl *)_48 + 40B]._M_header._M_left = _75;
  MEM[(struct _Rb_tree_impl *)_48 + 40B]._M_header._M_right = _75;
  _76 = MEM[(struct _Rb_tree_node_base * *)__x_9(D) + 56B];
  # DEBUG D#109 => D#1317
  # DEBUG this => D#109
  if (_76 != 0B)
    goto <bb 25>;
  else
    goto <bb 35>;

  <bb 92>:
  # DEBUG __node => NULL
  # DEBUG __node => NULL
  # DEBUG D#758 => __node_gen_10(D)->_M_t
  # DEBUG D#725 => D#758
  # DEBUG __x => D#1318
  # DEBUG this => D#725
  # DEBUG D#724 => D#725
  # DEBUG D#723 => D#725
  # DEBUG D#722 => D#723
  # DEBUG this => D#722
  # DEBUG D#721 => D#722
  # DEBUG this => D#721
  # DEBUG __n => 1
  # DEBUG __a => D#720
  # DEBUG D#719 => D#720
  # DEBUG D#717 => D#719
  # DEBUG D#718 => 0B
  # DEBUG __n => 1
  # DEBUG this => D#717
  # DEBUG D.91275 => D#718
  # DEBUG D#716 => D#717
  # DEBUG D#715 => D#716
  # DEBUG this => D#715
  _87 = operator new (88);
  goto <bb 68>;

<L29>:
  goto <bb 87> (<L10>);

  <bb 94>:

  <bb 95>:
  # DEBUG __node => NULL
  # DEBUG __node => NULL
  # DEBUG D#757 => __node_gen_10(D)->_M_t
  # DEBUG D#541 => D#757
  # DEBUG __p => NULL
  # DEBUG this => D#541
  # DEBUG D#540 => D#541
  # DEBUG this => NULL
  # DEBUG __r => D#539
  # DEBUG D#472 => D#540
  # DEBUG this => D#472
  # DEBUG D#471 => D#472
  # DEBUG this => D#471
  # DEBUG this => NULL
  # DEBUG D.77058 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#539
  # DEBUG this => D#538
  # DEBUG this => D#539
  # DEBUG D#537 => &D#539->second
  # DEBUG this => D#537
  _85 = &MEM[(struct map *)_41 + 40B]._M_t;
  # DEBUG this => _85
  __x_86 = MEM[(struct _Rb_tree_node_base * *)_41 + 56B];
  # DEBUG D#58 => _85
  # DEBUG this => D#58
  # DEBUG this => _85
  # DEBUG __x => __x_86
  # DEBUG __x => __x_86
  if (__x_86 == 0B)
    goto <bb 56>;
  else
    goto <bb 96>;

  <bb 96>:
  goto <bb 55>;

}



;; Function std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::operator=(const std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&) [with _Key = int; _Val = std::pair<const int, std::map<int, std::pair<int, int> > >; _KeyOfValue = std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > >] (_ZNSt8_Rb_treeIiSt4pairIKiSt3mapIiS0_IiiESt4lessIiESaIS0_IS1_S3_EEEESt10_Select1stIS9_ES5_SaIS9_EEaSERKSD_, funcdef_no=3655, decl_uid=54753, cgraph_uid=1777, symbol_order=1779)

Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is innermost
loop is not parallel according to graphite
std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::operator=(const std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&) [with _Key = int; _Val = std::pair<const int, std::map<int, std::pair<int, int> > >; _KeyOfValue = std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > >] (struct _Rb_tree * const this, const struct _Rb_tree & __x)
{
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct _Reuse_or_alloc_node __roan;
  struct _Rb_tree_node_base * _6;
  struct _Rb_tree & prephitmp_12;
  struct _Rb_tree_node_base * _13;
  struct _Rb_tree_node_base * _15;
  struct _Rb_tree_node_base * _16;
  long unsigned int _18;
  struct _Rb_tree_node_base * _21;
  struct _Rb_tree_node_base * const _23;
  struct _Rb_tree & _28;
  struct _Rb_tree_node_base * pretmp_40;
  struct _Rb_tree_node_base * prephitmp_42;
  struct _Rb_tree & pretmp_43;

  <bb 2>:
  if (this_3(D) != __x_4(D))
    goto <bb 3>;
  else
    goto <bb 17>;

  <bb 3>:
  # DEBUG this => &__roan
  # DEBUG __t => this_3(D)
  # DEBUG this => this_3(D)
  _6 = MEM[(struct _Rb_tree_node_base * &)this_3(D) + 16];
  __roan._M_root = _6;
  # DEBUG this => this_3(D)
  _15 = MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32];
  __roan._M_nodes = _15;
  __roan._M_t = this_3(D);
  if (_6 != 0B)
    goto <bb 4>;
  else
    goto <bb 6>;

  <bb 4>:
  _6->_M_parent = 0B;
  _13 = _15->_M_left;
  if (_13 != 0B)
    goto <bb 5>;
  else
    goto <bb 7>;

  <bb 5>:
  __roan._M_nodes = _13;
  goto <bb 7>;

  <bb 6>:
  __roan._M_nodes = 0B;

  <bb 7>:
  # DEBUG D#760 => &this_3(D)->_M_impl
  # DEBUG this => D#760
  MEM[(struct _Rb_tree_impl *)this_3(D)]._M_header._M_parent = 0B;
  _16 = &MEM[(struct _Rb_tree_impl *)this_3(D)]._M_header;
  MEM[(struct _Rb_tree_impl *)this_3(D)]._M_header._M_left = _16;
  MEM[(struct _Rb_tree_impl *)this_3(D)]._M_header._M_right = _16;
  MEM[(struct _Rb_tree_impl *)this_3(D)]._M_node_count = 0;
  _23 = MEM[(struct _Rb_tree_node_base * *)__x_4(D) + 16B];
  # DEBUG D#67 => __x_4(D)
  # DEBUG this => D#67
  if (_23 != 0B)
    goto <bb 8>;
  else
    goto <bb 16>;

  <bb 8>:
  # DEBUG this => this_3(D)
  # DEBUG this => this_3(D)
  # DEBUG D#68 => __x_4(D)
  # DEBUG this => D#68
  __x_10 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_Reuse_or_alloc_node> (this_3(D), _23, _16, &__roan);

  <bb 9>:
  MEM[(struct _Rb_tree_node_base * &)this_3(D) + 16] = __x_10;
  # DEBUG this => this_3(D)
  # DEBUG this => this_3(D)
  # DEBUG __x => __x_10

  <bb 10>:
  # __x_24 = PHI <__x_10(9), __x_25(11)>
  # DEBUG __x => __x_24
  __x_25 = __x_24->_M_left;
  if (__x_25 == 0B)
    goto <bb 12>;
  else
    goto <bb 11>;

  <bb 11>:
  goto <bb 10>;

  <bb 12>:
  # __x_50 = PHI <__x_24(10)>

  <bb 20>:
  MEM[(struct _Rb_tree_node_base * &)this_3(D) + 24] = __x_50;
  # DEBUG this => this_3(D)
  # DEBUG this => this_3(D)
  # DEBUG __x => __x_10

  <bb 13>:
  # __x_8 = PHI <__x_10(20), __x_7(14)>
  # DEBUG __x => __x_8
  __x_7 = __x_8->_M_right;
  if (__x_7 == 0B)
    goto <bb 15>;
  else
    goto <bb 14>;

  <bb 14>:
  goto <bb 13>;

  <bb 15>:
  # __x_51 = PHI <__x_8(13)>

  <bb 19>:
  MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32] = __x_51;
  _18 = __x_4(D)->_M_impl._M_node_count;
  this_3(D)->_M_impl._M_node_count = _18;
  pretmp_40 = __roan._M_root;
  pretmp_43 = __roan._M_t;

  <bb 16>:
  # prephitmp_42 = PHI <_6(7), pretmp_40(19)>
  # prephitmp_12 = PHI <this_3(D)(7), pretmp_43(19)>
  # DEBUG this => &__roan
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_erase (prephitmp_12, prephitmp_42);
  __roan ={v} {CLOBBER};

  <bb 17>:

  <bb 21>:
  return this_3(D);

<L7>:
  # DEBUG this => &__roan
  _21 = __roan._M_root;
  _28 = __roan._M_t;
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_erase (_28, _21);
  resx 2

}



;; Function void std::vector<_Tp, _Alloc>::_M_fill_insert(std::vector<_Tp, _Alloc>::iterator, std::vector<_Tp, _Alloc>::size_type, const value_type&) [with _Tp = std::map<int, std::map<int, std::pair<int, int> > >; _Alloc = std::allocator<std::map<int, std::map<int, std::pair<int, int> > > >; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<std::map<int, std::map<int, std::pair<int, int> > >*, std::vector<std::map<int, std::map<int, std::pair<int, int> > > > >; typename std::_Vector_base<_Tp, _Alloc>::pointer = std::map<int, std::map<int, std::pair<int, int> > >*; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::value_type = std::map<int, std::map<int, std::pair<int, int> > >] (_ZNSt6vectorISt3mapIiS0_IiSt4pairIiiESt4lessIiESaIS1_IKiS2_EEES4_SaIS1_IS5_S8_EEESaISB_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPSB_SD_EEmRKSB_, funcdef_no=3012, decl_uid=46604, cgraph_uid=1134, symbol_order=1136)

Trying loop 2 as candidate
loop 2 is innermost
loop is not parallel according to graphite
Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
Trying loop 9 as candidate
loop 9 is innermost
loop is not parallel according to graphite
Trying loop 10 as candidate
loop 10 is not innermost
loop is not parallel according to graphite
Trying loop 11 as candidate
loop 11 is innermost
loop is not parallel according to graphite
Trying loop 12 as candidate
loop 12 is innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is innermost
loop is not parallel according to graphite
Trying loop 17 as candidate
loop 17 is innermost
loop is not parallel according to graphite
Trying loop 18 as candidate
loop 18 is not innermost
loop is not parallel according to graphite
Trying loop 19 as candidate
loop 19 is innermost
loop is not parallel according to graphite
Trying loop 20 as candidate
loop 20 is innermost
loop is not parallel according to graphite
Trying loop 13 as candidate
loop 13 is innermost
loop is not parallel according to graphite
Trying loop 14 as candidate
loop 14 is not innermost
loop is not parallel according to graphite
Trying loop 15 as candidate
loop 15 is innermost
loop is not parallel according to graphite
Trying loop 16 as candidate
loop 16 is innermost
loop is not parallel according to graphite
Trying loop 7 as candidate
loop 7 is innermost
loop is not parallel according to graphite
Trying loop 8 as candidate
loop 8 is innermost
loop is not parallel according to graphite
Trying loop 4 as candidate
loop 4 is innermost
loop is not parallel according to graphite
Trying loop 5 as candidate
loop 5 is innermost
loop is not parallel according to graphite
Trying loop 6 as candidate
loop 6 is innermost
loop is not parallel according to graphite
Trying loop 29 as candidate
loop 29 is innermost
loop is not parallel according to graphite
Trying loop 30 as candidate
loop 30 is not innermost
loop is not parallel according to graphite
Trying loop 31 as candidate
loop 31 is innermost
loop is not parallel according to graphite
Trying loop 32 as candidate
loop 32 is innermost
loop is not parallel according to graphite
Trying loop 25 as candidate
loop 25 is innermost
loop is not parallel according to graphite
Trying loop 26 as candidate
loop 26 is not innermost
loop is not parallel according to graphite
Trying loop 27 as candidate
loop 27 is innermost
loop is not parallel according to graphite
Trying loop 28 as candidate
loop 28 is innermost
loop is not parallel according to graphite
Trying loop 21 as candidate
loop 21 is innermost
loop is not parallel according to graphite
Trying loop 22 as candidate
loop 22 is not innermost
loop is not parallel according to graphite
Trying loop 23 as candidate
loop 23 is innermost
loop is not parallel according to graphite
Trying loop 24 as candidate
loop 24 is innermost
loop is not parallel according to graphite
void std::vector<_Tp, _Alloc>::_M_fill_insert(std::vector<_Tp, _Alloc>::iterator, std::vector<_Tp, _Alloc>::size_type, const value_type&) [with _Tp = std::map<int, std::map<int, std::pair<int, int> > >; _Alloc = std::allocator<std::map<int, std::map<int, std::pair<int, int> > > >; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<std::map<int, std::map<int, std::pair<int, int> > >*, std::vector<std::map<int, std::map<int, std::pair<int, int> > > > >; typename std::_Vector_base<_Tp, _Alloc>::pointer = std::map<int, std::map<int, std::pair<int, int> > >*; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::value_type = std::map<int, std::map<int, std::pair<int, int> > >] (struct vector * const this, struct iterator __position, size_type __n, const struct value_type & __x)
{
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct map * D.91686;
  struct map * __first;
  struct map * __result;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct map * D.91645;
  struct map * __first;
  struct map * __result;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  const long unsigned int D.91607;
  const size_type __len;
  size_type D.91606;
  size_type __n;
  struct map * D.91597;
  struct map * D.91585;
  struct map * __first;
  long unsigned int __n;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct map * D.91544;
  struct map * __first;
  struct map * __result;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct map * D.91503;
  struct map * __first;
  long unsigned int __n;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct map * D.91462;
  struct map * __first;
  struct map * __result;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct map * const __position;
  struct map * __first;
  struct map * __first;
  struct map * __first;
  struct map * __first;
  difference_type __n;
  struct map * __last;
  struct map * __new_finish;
  const size_type __elems_before;
  struct map * __old_finish;
  const size_type __elems_after;
  struct value_type __x_copy;
  struct map * _10;
  long int _11;
  struct map * _12;
  long int _13;
  long int _14;
  long int _15;
  long unsigned int _16;
  struct _Rb_tree_node_base * _17;
  long int __last.8_21;
  struct map * const _24;
  long unsigned int _25;
  long unsigned int _27;
  difference_type _30;
  long int _31;
  long unsigned int _33;
  long int _35;
  struct map * _36;
  struct map * _45;
  void * _47;
  sizetype _49;
  sizetype _50;
  struct map * _51;
  const struct _Rep_type * _56;
  long unsigned int _59;
  sizetype _60;
  struct map * _63;
  struct map * _67;
  long int _73;
  struct map * _74;
  long unsigned int _75;
  struct map * _76;
  struct _Rep_type * _80;
  struct _Rep_type * _83;
  struct _Rep_type * _87;
  struct _Rb_tree_node_base * _89;
  bool _95;
  struct _Rep_type * _96;
  struct _Rb_tree_node_base * _97;
  struct _Rb_tree_node_base * _99;
  struct _Rep_type * _100;
  struct _Rb_tree_node_base * _101;
  struct _Rep_type * _104;
  struct _Rb_tree_node_base * _105;
  struct _Rb_tree_node_base * _115;
  struct _Rb_tree_node_base * _116;
  long unsigned int prephitmp_128;
  struct _Rb_tree_node_base * _138;
  struct _Rb_tree_node_base * _141;
  struct _Rb_tree_node_base * _142;
  struct map * const prephitmp_151;
  long int pretmp_152;
  long int prephitmp_153;
  struct _Rb_tree_node_base * const _157;
  long unsigned int _164;
  long unsigned int _166;
  struct _Rep_type * _167;
  void * _170;
  struct _Rep_type * _172;
  struct _Rb_tree_node_base * _173;
  struct _Rb_tree_node_base * const _175;
  long unsigned int _182;
  struct _Rep_type * _186;
  void * _189;
  void * _190;
  struct _Rep_type * _191;
  struct _Rb_tree_node_base * _192;
  struct _Rb_tree_node_base * const _194;
  long unsigned int _201;
  bool _204;
  struct _Rep_type * _205;
  void * _208;
  struct _Rep_type * _210;
  struct _Rb_tree_node_base * _211;
  struct _Rb_tree_node_base * const _213;
  long unsigned int _220;
  struct _Rep_type * _224;
  void * _227;
  struct _Rep_type * _229;
  struct _Rb_tree_node_base * _230;
  struct map * _232;
  long int _236;
  long int _237;
  long int _238;
  long unsigned int _240;
  struct _Rb_tree_node_base * const _246;
  long unsigned int _253;
  struct _Rep_type * _257;
  void * _260;
  struct _Rep_type * _262;
  struct _Rb_tree_node_base * _263;
  struct _Rb_tree_node_base * const _265;
  long unsigned int _272;
  struct _Rep_type * _276;
  void * _279;
  struct _Rep_type * _281;
  struct _Rb_tree_node_base * _282;
  struct _Rb_tree_node_base * const _284;
  long unsigned int _291;
  void * _296;
  struct map * _299;
  struct map * prephitmp_345;
  struct map * pretmp_362;
  struct map * pretmp_370;
  struct map * prephitmp_383;
  struct map * pretmp_385;
  struct map * prephitmp_386;
  long unsigned int pretmp_423;
  long unsigned int prephitmp_424;
  struct map * const pretmp_425;
  long int _487;
  long int _488;
  difference_type _489;
  difference_type _492;
  long int _496;
  long int _497;
  bool _540;
  long int _572;
  long int _573;

  <bb 2>:
  # DEBUG D#1339 => MEM[(struct __normal_iterator *)&__position]
  # DEBUG __position => D#1339
  if (__n_7(D) != 0)
    goto <bb 3>;
  else
    goto <bb 177>;

  <bb 3>:
  __position_23 = MEM[(struct __normal_iterator *)&__position];
  _10 = this_9(D)->D.46681._M_impl._M_end_of_storage;
  _11 = (long int) _10;
  _12 = this_9(D)->D.46681._M_impl._M_finish;
  _13 = (long int) _12;
  _14 = _11 - _13;
  _15 = _14 /[ex] 48;
  _16 = (long unsigned int) _15;
  if (__n_7(D) <= _16)
    goto <bb 4>;
  else
    goto <bb 100>;

  <bb 4>:
  # DEBUG this => &__x_copy
  # DEBUG __x => __x_29(D)
  # DEBUG D#1333 => &MEM[(const struct map &)__x_29(D)]._M_t
  # DEBUG this => &__x_copy._M_t
  # DEBUG __x => D#1333
  # DEBUG this => D#1333
  # DEBUG __a => NULL
  # DEBUG D#734 => &MEM[(const struct _Rb_tree &)D#1333]._M_impl._M_key_compare
  # DEBUG D#733 => &MEM[(struct _Rb_tree *)&__x_copy]._M_impl
  # DEBUG this => D#733
  # DEBUG __comp => D#734
  # DEBUG __a => NULL
  # DEBUG this => D#733
  # DEBUG __a => NULL
  # DEBUG this => D#733
  # DEBUG D.74035 => NULL
  MEM[(struct _Rb_tree_impl *)&__x_copy]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&__x_copy]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&__x_copy]._M_node_count = 0;
  # DEBUG this => D#733
  MEM[(struct _Rb_tree_impl *)&__x_copy]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&__x_copy]._M_header;
  MEM[(struct _Rb_tree_impl *)&__x_copy]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&__x_copy]._M_header;
  _157 = MEM[(struct _Rb_tree_node_base * *)__x_29(D) + 16B];
  # DEBUG D#67 => D#1333
  # DEBUG this => D#67
  if (_157 != 0B)
    goto <bb 5>;
  else
    goto <bb 12>;

  <bb 5>:
  # DEBUG this => &__x_copy._M_t
  # DEBUG this => &__x_copy._M_t
  # DEBUG D#68 => D#1333
  # DEBUG this => D#68
  # DEBUG this => &__x_copy._M_t
  # DEBUG __x => NULL
  # DEBUG __p => NULL
  # DEBUG this => &__an
  # DEBUG __t => &__x_copy._M_t
  __an._M_t = &__x_copy._M_t;
  __x_159 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_Alloc_node> (&__x_copy._M_t, _157, &MEM[(struct _Rb_tree *)&__x_copy]._M_impl._M_header, &__an);
  __an ={v} {CLOBBER};
  MEM[(struct _Rb_tree_node_base * &)&__x_copy + 16] = __x_159;
  # DEBUG this => &__x_copy._M_t
  # DEBUG this => &__x_copy._M_t
  # DEBUG __x => __x_159

  <bb 6>:
  # __x_160 = PHI <__x_159(5), __x_161(7)>
  # DEBUG __x => __x_160
  __x_161 = __x_160->_M_left;
  if (__x_161 == 0B)
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 7>:
  goto <bb 6>;

  <bb 8>:
  # __x_62 = PHI <__x_160(6)>
  MEM[(struct _Rb_tree_node_base * &)&__x_copy + 24] = __x_62;
  # DEBUG this => &__x_copy._M_t
  # DEBUG this => &__x_copy._M_t
  # DEBUG __x => __x_159

  <bb 9>:
  # __x_162 = PHI <__x_159(8), __x_163(10)>
  # DEBUG __x => __x_162
  __x_163 = __x_162->_M_right;
  if (__x_163 == 0B)
    goto <bb 11>;
  else
    goto <bb 10>;

  <bb 10>:
  goto <bb 9>;

  <bb 11>:
  # __x_94 = PHI <__x_162(9)>
  MEM[(struct _Rb_tree_node_base * &)&__x_copy + 32] = __x_94;
  _164 = MEM[(const struct _Rb_tree &)__x_29(D)]._M_impl._M_node_count;
  MEM[(struct _Rb_tree *)&__x_copy]._M_impl._M_node_count = _164;
  pretmp_425 = MEM[(struct map * const &)this_9(D) + 8];
  pretmp_152 = (long int) pretmp_425;

  <bb 12>:
  # prephitmp_151 = PHI <pretmp_425(11), _12(4)>
  # prephitmp_153 = PHI <pretmp_152(11), _13(4)>
  # DEBUG this => this_9(D)
  # DEBUG D#69 => &this_9(D)->D.46681._M_impl._M_finish
  # DEBUG this => NULL
  # DEBUG __i => D#69
  # DEBUG D#1336 => MEM[(struct map * const &)this_9(D) + 8]
  # DEBUG __lhs => &D.62197
  # DEBUG __rhs => &__position
  # DEBUG this => &D.62197
  # DEBUG this => &__position
  _35 = (long int) __position_23;
  _31 = prephitmp_153 - _35;
  _30 = _31 /[ex] 48;
  __elems_after_57 = (const size_type) _30;
  # DEBUG __elems_after => __elems_after_57
  # DEBUG __old_finish => D#1336
  if (__n_7(D) < __elems_after_57)
    goto <bb 13>;
  else
    goto <bb 48>;

  <bb 13>:
  # DEBUG D#765 => &this_9(D)->D.46681
  # DEBUG this => D#765
  _59 = __n_7(D) * 48;
  _60 = -_59;
  __last_61 = prephitmp_151 + _60;
  # DEBUG __first => __last_61
  # DEBUG __last => D#1336
  # DEBUG __result => D#1336
  # DEBUG __alloc => D#737
  # DEBUG D#736 => D#737
  # DEBUG D#735 => D#736
  # DEBUG __first => __last_61
  # DEBUG __last => D#1336
  # DEBUG __result => D#1336
  # DEBUG D.81813 => D#735
  # DEBUG __first => __last_61
  # DEBUG __last => D#1336
  # DEBUG __result => D#1336
  # DEBUG __assignable => 1
  # DEBUG __first => __last_61
  # DEBUG __last => D#1336
  # DEBUG __result => D#1336
  # DEBUG __cur => D#1336
  # DEBUG __cur => D#1336
  # DEBUG __first => __last_61
  if (__last_61 == prephitmp_151)
    goto <bb 29>;
  else
    goto <bb 14>;

  <bb 14>:

  <bb 15>:
  # __last_548 = PHI <__last_61(14), __last_168(27)>
  # __old_finish_549 = PHI <prephitmp_151(14), __old_finish_169(27)>
  # DEBUG __cur => __old_finish_549
  # DEBUG __first => __last_548
  # DEBUG __r => __old_finish_549
  # DEBUG __p => NULL
  # DEBUG __value => __last_548
  # DEBUG D#20 => 48
  # DEBUG __p => NULL
  # DEBUG D.81277 => D#20
  if (__old_finish_549 != 0B)
    goto <bb 17>;
  else
    goto <bb 16>;

  <bb 16>:
  goto <bb 26>;

  <bb 17>:
  # DEBUG this => NULL
  # DEBUG __x => __last_548
  # DEBUG D#1334 => &MEM[(const struct map &)__last_548]._M_t
  _167 = &__old_finish_549->_M_t;
  # DEBUG this => _167
  # DEBUG __x => D#1334
  # DEBUG this => D#1334
  # DEBUG __a => NULL
  # DEBUG D#734 => &MEM[(const struct _Rb_tree &)D#1334]._M_impl._M_key_compare
  # DEBUG D#733 => &MEM[(struct _Rb_tree *)_167]._M_impl
  # DEBUG this => D#733
  # DEBUG __comp => D#734
  # DEBUG __a => NULL
  # DEBUG this => D#733
  # DEBUG __a => NULL
  # DEBUG this => D#733
  # DEBUG D.74035 => NULL
  MEM[(struct _Rb_tree_impl *)__old_finish_549]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)__old_finish_549]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)__old_finish_549]._M_node_count = 0;
  # DEBUG this => D#733
  _138 = &MEM[(struct _Rb_tree_impl *)__old_finish_549]._M_header;
  MEM[(struct _Rb_tree_impl *)__old_finish_549]._M_header._M_left = _138;
  MEM[(struct _Rb_tree_impl *)__old_finish_549]._M_header._M_right = _138;
  _175 = MEM[(struct _Rb_tree_node_base * *)__last_548 + 16B];
  # DEBUG D#67 => D#1334
  # DEBUG this => D#67
  if (_175 != 0B)
    goto <bb 18>;
  else
    goto <bb 16>;

  <bb 18>:
  # DEBUG this => _167
  # DEBUG this => _167
  # DEBUG D#68 => D#1334
  # DEBUG this => D#68
  # DEBUG this => _167
  # DEBUG __x => NULL
  # DEBUG __p => NULL
  # DEBUG this => &__an
  # DEBUG __t => _167
  __an._M_t = _167;
  __x_177 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_Alloc_node> (_167, _175, _138, &__an);

  <bb 19>:
  __an ={v} {CLOBBER};
  MEM[(struct _Rb_tree_node_base * &)__old_finish_549 + 16] = __x_177;
  # DEBUG this => _167
  # DEBUG this => _167
  # DEBUG __x => __x_177

  <bb 20>:
  # __x_178 = PHI <__x_177(19), __x_179(21)>
  # DEBUG __x => __x_178
  __x_179 = __x_178->_M_left;
  if (__x_179 == 0B)
    goto <bb 22>;
  else
    goto <bb 21>;

  <bb 21>:
  goto <bb 20>;

  <bb 22>:
  # __x_433 = PHI <__x_178(20)>
  MEM[(struct _Rb_tree_node_base * &)__old_finish_549 + 24] = __x_433;
  # DEBUG this => _167
  # DEBUG this => _167
  # DEBUG __x => __x_177

  <bb 23>:
  # __x_180 = PHI <__x_177(22), __x_181(24)>
  # DEBUG __x => __x_180
  __x_181 = __x_180->_M_right;
  if (__x_181 == 0B)
    goto <bb 25>;
  else
    goto <bb 24>;

  <bb 24>:
  goto <bb 23>;

  <bb 25>:
  # __x_408 = PHI <__x_180(23)>
  MEM[(struct _Rb_tree_node_base * &)__old_finish_549 + 32] = __x_408;
  _182 = MEM[(const struct _Rb_tree &)__last_548]._M_impl._M_node_count;
  MEM[(struct _Rb_tree *)__old_finish_549]._M_impl._M_node_count = _182;

  <bb 26>:
  __last_168 = __last_548 + 48;
  # DEBUG __first => __last_168
  __old_finish_169 = __old_finish_549 + 48;
  # DEBUG __cur => __old_finish_169
  # DEBUG __cur => __old_finish_169
  # DEBUG __first => __last_168
  if (prephitmp_151 == __last_168)
    goto <bb 28>;
  else
    goto <bb 27>;

  <bb 27>:
  goto <bb 15>;

  <bb 28>:
  pretmp_370 = this_9(D)->D.46681._M_impl._M_finish;

  <bb 29>:
  # prephitmp_345 = PHI <pretmp_370(28), prephitmp_151(13)>
  _63 = prephitmp_345 + _59;
  this_9(D)->D.46681._M_impl._M_finish = _63;
  # DEBUG this => &__position
  # DEBUG __first => D#1339
  # DEBUG __last => __last_61
  # DEBUG __result => D#1336
  # DEBUG __it => __last_61
  # DEBUG __it => __last_61
  # DEBUG __it => D#1339
  # DEBUG __it => D#1339
  # DEBUG __first => D#1339
  # DEBUG __last => __last_61
  # DEBUG __result => D#1336
  # DEBUG __it => D#1336
  # DEBUG __it => D#1336
  # DEBUG __it => __last_61
  # DEBUG __it => __last_61
  # DEBUG __it => D#1339
  # DEBUG __it => D#1339
  # DEBUG __first => D#1339
  # DEBUG __last => __last_61
  # DEBUG __result => D#1336
  # DEBUG __simple => 0
  # DEBUG __first => D#1339
  # DEBUG __last => __last_61
  # DEBUG __result => D#1336
  __last.8_21 = (long int) __last_61;
  _73 = __last.8_21 - _35;
  __n_72 = _73 /[ex] 48;
  # DEBUG __n => __n_72
  # DEBUG __n => __n_72
  # DEBUG __result => D#1336
  # DEBUG __last => __last_61
  if (__n_72 <= 0)
    goto <bb 30>;
  else
    goto <bb 37>;

  <bb 30>:
  # DEBUG this => &__position
  _67 = __position_23 + _59;
  # DEBUG this => &__position
  # DEBUG __first => D#1339
  # DEBUG __last => _67
  # DEBUG __value => &__x_copy
  # DEBUG __first => D#1339
  if (__position_23 == _67)
    goto <bb 42>;
  else
    goto <bb 43>;

  # __old_finish_560 = PHI <__old_finish_549(18)>
<L19>:
  _170 = __builtin_eh_pointer (14);
  __cxa_begin_catch (_170);
  # DEBUG __first => D#1336
  # DEBUG __last => __old_finish_560
  # DEBUG __first => D#1336
  # DEBUG __last => __old_finish_560
  # DEBUG __first => D#1336
  if (prephitmp_151 == __old_finish_560)
    goto <bb 32>;
  else
    goto <bb 33>;

  <bb 32>:
  __cxa_rethrow ();

  <bb 33>:

  <bb 34>:
  # __old_finish_543 = PHI <prephitmp_151(33), __old_finish_174(35)>
  # DEBUG __first => __old_finish_543
  # DEBUG __r => __old_finish_543
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _172 = &__old_finish_543->_M_t;
  # DEBUG this => _172
  _173 = MEM[(struct _Rb_tree_node_base * *)__old_finish_543 + 16B];
  # DEBUG D#42 => _172
  # DEBUG this => D#42
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_erase (_172, _173);
  # DEBUG D#545 => &MEM[(struct _Rb_tree *)_172]._M_impl
  # DEBUG this => D#545
  # DEBUG this => D#545
  # DEBUG this => D#545
  MEM[(struct  &)__old_finish_543] ={v} {CLOBBER};
  __old_finish_174 = __old_finish_543 + 48;
  # DEBUG __first => __old_finish_174
  # DEBUG __first => __old_finish_174
  if (__old_finish_174 == __old_finish_560)
    goto <bb 32>;
  else
    goto <bb 35>;

  <bb 35>:
  goto <bb 34>;

<L21>:
  __cxa_end_catch ();
  resx 13

  <bb 37>:

  <bb 38>:
  # __old_finish_556 = PHI <prephitmp_151(37), __old_finish_58(41)>
  # __last_538 = PHI <__last_61(37), __last_66(41)>
  # __n_539 = PHI <__n_72(37), __n_81(41)>
  # DEBUG __n => __n_539
  # DEBUG __result => __old_finish_556
  # DEBUG __last => __last_538
  __last_66 = __last_538 + 18446744073709551568;
  # DEBUG __last => __last_66
  __old_finish_58 = __old_finish_556 + 18446744073709551568;
  # DEBUG __result => __old_finish_58
  # DEBUG this => __old_finish_58
  # DEBUG __x => __last_66
  _56 = &MEM[(const struct map &)__last_66]._M_t;
  _80 = &__old_finish_58->_M_t;
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::operator= (_80, _56);
  goto <bb 40>;

<L40>:
  goto <bb 179> (<L10>);

  <bb 40>:
  __n_81 = __n_539 + -1;
  # DEBUG __n => __n_81
  # DEBUG __n => __n_81
  # DEBUG __result => __old_finish_58
  # DEBUG __last => __last_66
  if (__n_81 <= 0)
    goto <bb 30>;
  else
    goto <bb 41>;

  <bb 41>:
  goto <bb 38>;

  <bb 42>:
  goto <bb 99>;

  <bb 43>:

  <bb 44>:
  # __position_553 = PHI <__position_23(43), __position_84(47)>
  # DEBUG __first => __position_553
  # DEBUG this => __position_553
  # DEBUG __x => &__x_copy
  _83 = &__position_553->_M_t;
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::operator= (_83, &__x_copy._M_t);
  goto <bb 46>;

<L41>:
  goto <bb 179> (<L10>);

  <bb 46>:
  __position_84 = __position_553 + 48;
  # DEBUG __first => __position_84
  # DEBUG __first => __position_84
  if (_67 == __position_84)
    goto <bb 42>;
  else
    goto <bb 47>;

  <bb 47>:
  goto <bb 44>;

  <bb 48>:
  # DEBUG D#766 => &this_9(D)->D.46681
  # DEBUG this => D#766
  __n_70 = __n_7(D) - __elems_after_57;
  # DEBUG __first => D#1336
  # DEBUG __n => __n_70
  # DEBUG __x => &__x_copy
  # DEBUG D.81863 => D#740
  # DEBUG __first => D#1336
  # DEBUG __n => __n_70
  # DEBUG __x => &__x_copy
  # DEBUG __assignable => 1
  # DEBUG __first => D#1336
  # DEBUG __n => __n_70
  # DEBUG __x => &__x_copy
  # DEBUG __cur => D#1336
  # DEBUG __cur => D#1336
  # DEBUG __n => __n_70
  if (__n_70 == 0)
    goto <bb 64>;
  else
    goto <bb 49>;

  <bb 49>:

  <bb 50>:
  # __n_544 = PHI <__n_70(49), __n_187(63)>
  # __old_finish_546 = PHI <prephitmp_151(49), __old_finish_188(63)>
  # DEBUG __cur => __old_finish_546
  # DEBUG __n => __n_544
  # DEBUG __r => __old_finish_546
  # DEBUG __p => NULL
  # DEBUG __value => &__x_copy
  # DEBUG D#20 => 48
  # DEBUG __p => NULL
  # DEBUG D.81277 => D#20
  if (__old_finish_546 != 0B)
    goto <bb 52>;
  else
    goto <bb 51>;

  <bb 51>:
  goto <bb 61>;

  <bb 52>:
  # DEBUG this => NULL
  # DEBUG __x => &__x_copy
  _186 = &__old_finish_546->_M_t;
  # DEBUG this => _186
  # DEBUG __x => &__x_copy._M_t
  # DEBUG this => &__x_copy._M_t
  # DEBUG __a => NULL
  # DEBUG D#734 => &MEM[(const struct _Rb_tree &)&__x_copy]._M_impl._M_key_compare
  # DEBUG D#733 => &MEM[(struct _Rb_tree *)_186]._M_impl
  # DEBUG this => D#733
  # DEBUG __comp => D#734
  # DEBUG __a => NULL
  # DEBUG this => D#733
  # DEBUG __a => NULL
  # DEBUG this => D#733
  # DEBUG D.74035 => NULL
  MEM[(struct _Rb_tree_impl *)__old_finish_546]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)__old_finish_546]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)__old_finish_546]._M_node_count = 0;
  # DEBUG this => D#733
  _141 = &MEM[(struct _Rb_tree_impl *)__old_finish_546]._M_header;
  MEM[(struct _Rb_tree_impl *)__old_finish_546]._M_header._M_left = _141;
  MEM[(struct _Rb_tree_impl *)__old_finish_546]._M_header._M_right = _141;
  _194 = MEM[(struct _Rb_tree_node_base * *)&__x_copy + 16B];
  # DEBUG D#67 => &__x_copy._M_t
  # DEBUG this => D#67
  if (_194 != 0B)
    goto <bb 53>;
  else
    goto <bb 51>;

  <bb 53>:
  # DEBUG this => _186
  # DEBUG this => _186
  # DEBUG D#68 => &__x_copy._M_t
  # DEBUG this => D#68
  # DEBUG this => _186
  # DEBUG __x => NULL
  # DEBUG __p => NULL
  # DEBUG this => &__an
  # DEBUG __t => _186
  __an._M_t = _186;
  __x_196 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_Alloc_node> (_186, _194, _141, &__an);

  <bb 54>:
  __an ={v} {CLOBBER};
  MEM[(struct _Rb_tree_node_base * &)__old_finish_546 + 16] = __x_196;
  # DEBUG this => _186
  # DEBUG this => _186
  # DEBUG __x => __x_196

  <bb 55>:
  # __x_197 = PHI <__x_196(54), __x_198(56)>
  # DEBUG __x => __x_197
  __x_198 = __x_197->_M_left;
  if (__x_198 == 0B)
    goto <bb 57>;
  else
    goto <bb 56>;

  <bb 56>:
  goto <bb 55>;

  <bb 57>:
  # __x_394 = PHI <__x_197(55)>
  MEM[(struct _Rb_tree_node_base * &)__old_finish_546 + 24] = __x_394;
  # DEBUG this => _186
  # DEBUG this => _186
  # DEBUG __x => __x_196

  <bb 58>:
  # __x_199 = PHI <__x_196(57), __x_200(59)>
  # DEBUG __x => __x_199
  __x_200 = __x_199->_M_right;
  if (__x_200 == 0B)
    goto <bb 60>;
  else
    goto <bb 59>;

  <bb 59>:
  goto <bb 58>;

  <bb 60>:
  # __x_395 = PHI <__x_199(58)>
  MEM[(struct _Rb_tree_node_base * &)__old_finish_546 + 32] = __x_395;
  _201 = MEM[(const struct _Rb_tree &)&__x_copy]._M_impl._M_node_count;
  MEM[(struct _Rb_tree *)__old_finish_546]._M_impl._M_node_count = _201;

  <bb 61>:
  __n_187 = __n_544 + 18446744073709551615;
  # DEBUG __n => __n_187
  __old_finish_188 = __old_finish_546 + 48;
  # DEBUG __cur => __old_finish_188
  # DEBUG __cur => __old_finish_188
  # DEBUG __n => __n_187
  if (__n_187 == 0)
    goto <bb 62>;
  else
    goto <bb 63>;

  <bb 62>:
  # __old_finish_409 = PHI <__old_finish_188(61)>
  goto <bb 64>;

  <bb 63>:
  goto <bb 50>;

  <bb 64>:
  # __old_finish_545 = PHI <__old_finish_409(62), prephitmp_151(48)>
  this_9(D)->D.46681._M_impl._M_finish = __old_finish_545;
  # DEBUG D#767 => &this_9(D)->D.46681
  # DEBUG this => D#767
  # DEBUG this => &__position
  # DEBUG __first => D#1339
  # DEBUG __last => D#1336
  # DEBUG __result => NULL
  # DEBUG __alloc => D#737
  # DEBUG D#736 => D#737
  # DEBUG D#735 => D#736
  # DEBUG __first => D#1339
  # DEBUG __last => D#1336
  # DEBUG __result => NULL
  # DEBUG D.81876 => D#735
  # DEBUG __first => D#1339
  # DEBUG __last => D#1336
  # DEBUG __result => NULL
  # DEBUG __assignable => 1
  # DEBUG __first => D#1339
  # DEBUG __last => D#1336
  # DEBUG __result => __old_finish_545
  # DEBUG __cur => __old_finish_545
  # DEBUG __first => D#1339
  if (__position_23 == prephitmp_151)
    goto <bb 196>;
  else
    goto <bb 72>;

  # __old_finish_273 = PHI <__old_finish_546(53)>
<L22>:
  _189 = __builtin_eh_pointer (17);
  __cxa_begin_catch (_189);
  # DEBUG __first => D#1336
  # DEBUG __last => __old_finish_273
  # DEBUG __first => D#1336
  # DEBUG __last => __old_finish_273
  # DEBUG __first => D#1336
  if (prephitmp_151 == __old_finish_273)
    goto <bb 66>;
  else
    goto <bb 67>;

  <bb 66>:
  __cxa_rethrow ();

  <bb 67>:

  <bb 68>:
  # __old_finish_541 = PHI <prephitmp_151(67), __old_finish_193(69)>
  # DEBUG __first => __old_finish_541
  # DEBUG __r => __old_finish_541
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _191 = &__old_finish_541->_M_t;
  # DEBUG this => _191
  _192 = MEM[(struct _Rb_tree_node_base * *)__old_finish_541 + 16B];
  # DEBUG D#42 => _191
  # DEBUG this => D#42
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_erase (_191, _192);
  # DEBUG D#545 => &MEM[(struct _Rb_tree *)_191]._M_impl
  # DEBUG this => D#545
  # DEBUG this => D#545
  # DEBUG this => D#545
  MEM[(struct  &)__old_finish_541] ={v} {CLOBBER};
  __old_finish_193 = __old_finish_541 + 48;
  # DEBUG __first => __old_finish_193
  # DEBUG __first => __old_finish_193
  if (__old_finish_193 == __old_finish_273)
    goto <bb 66>;
  else
    goto <bb 69>;

  <bb 69>:
  goto <bb 68>;

<L24>:
  __cxa_end_catch ();
  resx 16

<L42>:
  goto <bb 179> (<L10>);

  <bb 72>:

  <bb 73>:
  # __position_453 = PHI <__position_23(72), __position_206(85)>
  # __old_finish_542 = PHI <__old_finish_545(72), __old_finish_207(85)>
  # DEBUG __cur => __old_finish_542
  # DEBUG __first => __position_453
  # DEBUG __r => __old_finish_542
  # DEBUG __p => NULL
  # DEBUG __value => __position_453
  # DEBUG D#20 => 48
  # DEBUG __p => NULL
  # DEBUG D.81277 => D#20
  if (__old_finish_542 != 0B)
    goto <bb 75>;
  else
    goto <bb 74>;

  <bb 74>:
  goto <bb 84>;

  <bb 75>:
  # DEBUG this => NULL
  # DEBUG __x => __position_453
  # DEBUG D#1335 => &MEM[(const struct map &)__position_453]._M_t
  _205 = &__old_finish_542->_M_t;
  # DEBUG this => _205
  # DEBUG __x => D#1335
  # DEBUG this => D#1335
  # DEBUG __a => NULL
  # DEBUG D#734 => &MEM[(const struct _Rb_tree &)D#1335]._M_impl._M_key_compare
  # DEBUG D#733 => &MEM[(struct _Rb_tree *)_205]._M_impl
  # DEBUG this => D#733
  # DEBUG __comp => D#734
  # DEBUG __a => NULL
  # DEBUG this => D#733
  # DEBUG __a => NULL
  # DEBUG this => D#733
  # DEBUG D.74035 => NULL
  MEM[(struct _Rb_tree_impl *)__old_finish_542]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)__old_finish_542]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)__old_finish_542]._M_node_count = 0;
  # DEBUG this => D#733
  _142 = &MEM[(struct _Rb_tree_impl *)__old_finish_542]._M_header;
  MEM[(struct _Rb_tree_impl *)__old_finish_542]._M_header._M_left = _142;
  MEM[(struct _Rb_tree_impl *)__old_finish_542]._M_header._M_right = _142;
  _213 = MEM[(struct _Rb_tree_node_base * *)__position_453 + 16B];
  # DEBUG D#67 => D#1335
  # DEBUG this => D#67
  if (_213 != 0B)
    goto <bb 76>;
  else
    goto <bb 74>;

  <bb 76>:
  # DEBUG this => _205
  # DEBUG this => _205
  # DEBUG D#68 => D#1335
  # DEBUG this => D#68
  # DEBUG this => _205
  # DEBUG __x => NULL
  # DEBUG __p => NULL
  # DEBUG this => &__an
  # DEBUG __t => _205
  __an._M_t = _205;
  __x_215 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_Alloc_node> (_205, _213, _142, &__an);

  <bb 77>:
  __an ={v} {CLOBBER};
  MEM[(struct _Rb_tree_node_base * &)__old_finish_542 + 16] = __x_215;
  # DEBUG this => _205
  # DEBUG this => _205
  # DEBUG __x => __x_215

  <bb 78>:
  # __x_216 = PHI <__x_215(77), __x_217(79)>
  # DEBUG __x => __x_216
  __x_217 = __x_216->_M_left;
  if (__x_217 == 0B)
    goto <bb 80>;
  else
    goto <bb 79>;

  <bb 79>:
  goto <bb 78>;

  <bb 80>:
  # __x_575 = PHI <__x_216(78)>
  MEM[(struct _Rb_tree_node_base * &)__old_finish_542 + 24] = __x_575;
  # DEBUG this => _205
  # DEBUG this => _205
  # DEBUG __x => __x_215

  <bb 81>:
  # __x_218 = PHI <__x_215(80), __x_219(82)>
  # DEBUG __x => __x_218
  __x_219 = __x_218->_M_right;
  if (__x_219 == 0B)
    goto <bb 83>;
  else
    goto <bb 82>;

  <bb 82>:
  goto <bb 81>;

  <bb 83>:
  # __x_234 = PHI <__x_218(81)>
  MEM[(struct _Rb_tree_node_base * &)__old_finish_542 + 32] = __x_234;
  _220 = MEM[(const struct _Rb_tree &)__position_453]._M_impl._M_node_count;
  MEM[(struct _Rb_tree *)__old_finish_542]._M_impl._M_node_count = _220;

  <bb 84>:
  __position_206 = __position_453 + 48;
  # DEBUG __first => __position_206
  __old_finish_207 = __old_finish_542 + 48;
  # DEBUG __cur => __old_finish_207
  # DEBUG __cur => __old_finish_207
  # DEBUG __first => __position_206
  if (prephitmp_151 == __position_206)
    goto <bb 86>;
  else
    goto <bb 85>;

  <bb 85>:
  goto <bb 73>;

  <bb 86>:
  _74 = this_9(D)->D.46681._M_impl._M_finish;
  _75 = (long unsigned int) _31;
  _76 = _74 + _75;
  this_9(D)->D.46681._M_impl._M_finish = _76;
  # DEBUG this => &__position
  # DEBUG __first => D#1339
  # DEBUG __last => D#1336
  # DEBUG __value => &__x_copy
  # DEBUG __first => D#1339
  if (__position_23 == prephitmp_151)
    goto <bb 42>;
  else
    goto <bb 94>;

  # __old_finish_308 = PHI <__old_finish_542(76)>
<L25>:
  _208 = __builtin_eh_pointer (20);
  __cxa_begin_catch (_208);
  # DEBUG __first => __old_finish_545
  # DEBUG __last => __old_finish_308
  # DEBUG __first => __old_finish_545
  # DEBUG __last => __old_finish_308
  # DEBUG __first => __old_finish_545
  if (__old_finish_308 == __old_finish_545)
    goto <bb 88>;
  else
    goto <bb 89>;

  <bb 88>:
  __cxa_rethrow ();

  <bb 89>:

  <bb 90>:
  # __old_finish_85 = PHI <__old_finish_545(89), __old_finish_212(91)>
  # DEBUG __first => __old_finish_85
  # DEBUG __r => __old_finish_85
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _210 = &__old_finish_85->_M_t;
  # DEBUG this => _210
  _211 = MEM[(struct _Rb_tree_node_base * *)__old_finish_85 + 16B];
  # DEBUG D#42 => _210
  # DEBUG this => D#42
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_erase (_210, _211);
  # DEBUG D#545 => &MEM[(struct _Rb_tree *)_210]._M_impl
  # DEBUG this => D#545
  # DEBUG this => D#545
  # DEBUG this => D#545
  MEM[(struct  &)__old_finish_85] ={v} {CLOBBER};
  __old_finish_212 = __old_finish_85 + 48;
  # DEBUG __first => __old_finish_212
  # DEBUG __first => __old_finish_212
  if (__old_finish_212 == __old_finish_308)
    goto <bb 88>;
  else
    goto <bb 91>;

  <bb 91>:
  goto <bb 90>;

<L27>:
  __cxa_end_catch ();
  resx 19

<L43>:
  goto <bb 179> (<L10>);

  <bb 94>:

  <bb 95>:
  # __position_552 = PHI <__position_23(94), __position_88(98)>
  # DEBUG __first => __position_552
  # DEBUG this => __position_552
  # DEBUG __x => &__x_copy
  _87 = &__position_552->_M_t;
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::operator= (_87, &__x_copy._M_t);
  goto <bb 97>;

<L44>:
  goto <bb 179> (<L10>);

  <bb 97>:
  __position_88 = __position_552 + 48;
  # DEBUG __first => __position_88
  # DEBUG __first => __position_88
  if (__position_88 == prephitmp_151)
    goto <bb 42>;
  else
    goto <bb 98>;

  <bb 98>:
  goto <bb 95>;

  <bb 99>:
  # DEBUG this => &__x_copy
  # DEBUG this => &__x_copy._M_t
  _89 = MEM[(struct _Rb_tree_node_base * *)&__x_copy + 16B];
  # DEBUG D#42 => &__x_copy._M_t
  # DEBUG this => D#42
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_erase (&__x_copy._M_t, _89);
  # DEBUG D#545 => &MEM[(struct _Rb_tree *)&__x_copy]._M_impl
  # DEBUG this => D#545
  # DEBUG this => D#545
  # DEBUG this => D#545
  __x_copy ={v} {CLOBBER};
  goto <bb 177>;

  <bb 100>:
  # DEBUG this => this_9(D)
  # DEBUG __n => __n_7(D)
  # DEBUG __n => __n_7(D)
  # DEBUG __s => "vector::_M_fill_insert"
  # DEBUG D#515 => this_9(D)
  # DEBUG this => D#515
  # DEBUG D#514 => D#515
  # DEBUG D#513 => &D#514->D.47428
  # DEBUG this => D#513
  # DEBUG __a => D#512
  # DEBUG D#511 => D#512
  # DEBUG D#510 => D#511
  # DEBUG this => D#510
  _24 = MEM[(struct map * *)this_9(D)];
  # DEBUG D#55 => this_9(D)
  # DEBUG D#55 => this_9(D)
  # DEBUG this => D#55
  # DEBUG this => D#55
  _236 = (long int) _24;
  _237 = _13 - _236;
  _238 = _237 /[ex] 48;
  _239 = (const long unsigned int) _238;
  _240 = 384307168202282325 - _239;
  if (__n_7(D) > _240)
    goto <bb 101>;
  else
    goto <bb 102>;

  <bb 101>:
  std::__throw_length_error ("vector::_M_fill_insert");

  <bb 102>:
  # DEBUG D#55 => this_9(D)
  # DEBUG D#55 => this_9(D)
  # DEBUG this => D#55
  # DEBUG this => D#55
  # DEBUG D#55 => this_9(D)
  # DEBUG D#55 => this_9(D)
  # DEBUG this => D#55
  # DEBUG this => D#55
  # DEBUG __a => &D.91607
  # DEBUG __b => &__n
  _166 = MAX_EXPR <__n_7(D), _239>;
  __len_244 = _166 + _239;
  # DEBUG __len => __len_244
  # DEBUG D#55 => this_9(D)
  # DEBUG D#55 => this_9(D)
  # DEBUG this => D#55
  # DEBUG this => D#55
  # DEBUG D#515 => this_9(D)
  # DEBUG this => D#515
  # DEBUG D#514 => D#515
  # DEBUG D#513 => &D#514->D.47428
  # DEBUG this => D#513
  # DEBUG __a => D#512
  # DEBUG D#511 => D#512
  # DEBUG D#510 => D#511
  # DEBUG this => D#510
  _95 = __len_244 > 384307168202282325;
  _540 = _239 > __len_244;
  _204 = _95 | _540;
  if (_204 != 0)
    goto <bb 194>;
  else
    goto <bb 195>;

  <bb 103>:
  pretmp_423 = __len_244 * 48;

  <bb 104>:
  # __elems_before_317 = PHI <__elems_before_493(194), __elems_before_570(103)>
  # _573 = PHI <_497(194), _488(103)>
  # prephitmp_424 = PHI <18446744073709551600(194), pretmp_423(103)>
  # DEBUG __len => NULL
  # DEBUG this => this_9(D)
  # DEBUG D#122 => &this_9(D)->D.46681._M_impl._M_start
  # DEBUG this => NULL
  # DEBUG __i => D#122
  # DEBUG __lhs => &__position
  # DEBUG __rhs => &D.62230
  # DEBUG this => &__position
  # DEBUG this => &D.62230
  # DEBUG __elems_before => __elems_before_317
  # DEBUG D#777 => &this_9(D)->D.46681
  # DEBUG D#486 => D#777
  # DEBUG __n => NULL
  # DEBUG this => D#523
  # DEBUG D#522 => D#523
  # DEBUG D#521 => &D#522->_M_impl
  # DEBUG D#520 => D#521
  # DEBUG __n => NULL
  # DEBUG __a => D#520
  # DEBUG D#519 => D#520
  # DEBUG D#517 => D#519
  # DEBUG D#518 => 0B
  # DEBUG __n => NULL
  # DEBUG this => D#517
  # DEBUG D.91595 => D#518
  # DEBUG D#516 => D#517
  # DEBUG D#510 => D#516
  # DEBUG this => D#510
  _232 = operator new (prephitmp_424);

  <bb 105>:
  # __new_finish_233 = PHI <0B(195), _232(104)>
  # __elems_before_574 = PHI <__elems_before_570(195), __elems_before_317(104)>
  # _572 = PHI <_488(195), _573(104)>
  # prephitmp_128 = PHI <0(195), prephitmp_424(104)>
  # DEBUG __new_start => NULL
  # DEBUG __new_finish => NULL
  # DEBUG D#761 => &this_9(D)->D.46681
  # DEBUG this => D#761
  _27 = (long unsigned int) _572;
  __first_28 = __new_finish_233 + _27;
  # DEBUG __first => __first_28
  # DEBUG __n => __n_7(D)
  # DEBUG __x => __x_29(D)
  # DEBUG D.81909 => D#740
  # DEBUG __first => __first_28
  # DEBUG __n => __n_7(D)
  # DEBUG __x => __x_29(D)
  # DEBUG __assignable => 1
  # DEBUG __first => __first_28
  # DEBUG __n => __n_7(D)
  # DEBUG __x => __x_29(D)
  # DEBUG __cur => __first_28
  # DEBUG __n => __n_7(D)

  <bb 106>:
  # __n_566 = PHI <__n_225(118), __n_7(D)(105)>
  # __first_568 = PHI <__first_226(118), __first_28(105)>
  # DEBUG __cur => __first_568
  # DEBUG __n => __n_566
  # DEBUG __r => __first_568
  # DEBUG __p => NULL
  # DEBUG __value => __x_29(D)
  # DEBUG D#20 => 48
  # DEBUG __p => NULL
  # DEBUG D.81277 => D#20
  if (__first_568 != 0B)
    goto <bb 108>;
  else
    goto <bb 107>;

  <bb 107>:
  goto <bb 117>;

  <bb 108>:
  # DEBUG this => NULL
  # DEBUG __x => __x_29(D)
  # DEBUG D#1330 => &MEM[(const struct map &)__x_29(D)]._M_t
  _224 = &__first_568->_M_t;
  # DEBUG this => _224
  # DEBUG __x => D#1330
  # DEBUG this => D#1330
  # DEBUG __a => NULL
  # DEBUG D#734 => &MEM[(const struct _Rb_tree &)D#1330]._M_impl._M_key_compare
  # DEBUG D#733 => &MEM[(struct _Rb_tree *)_224]._M_impl
  # DEBUG this => D#733
  # DEBUG __comp => D#734
  # DEBUG __a => NULL
  # DEBUG this => D#733
  # DEBUG __a => NULL
  # DEBUG this => D#733
  # DEBUG D.74035 => NULL
  MEM[(struct _Rb_tree_impl *)__first_568]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)__first_568]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)__first_568]._M_node_count = 0;
  # DEBUG this => D#733
  _17 = &MEM[(struct _Rb_tree_impl *)__first_568]._M_header;
  MEM[(struct _Rb_tree_impl *)__first_568]._M_header._M_left = _17;
  MEM[(struct _Rb_tree_impl *)__first_568]._M_header._M_right = _17;
  _246 = MEM[(struct _Rb_tree_node_base * *)__x_29(D) + 16B];
  # DEBUG D#67 => D#1330
  # DEBUG this => D#67
  if (_246 != 0B)
    goto <bb 109>;
  else
    goto <bb 107>;

  <bb 109>:
  # DEBUG this => _224
  # DEBUG this => _224
  # DEBUG D#68 => D#1330
  # DEBUG this => D#68
  # DEBUG this => _224
  # DEBUG __x => NULL
  # DEBUG __p => NULL
  # DEBUG this => &__an
  # DEBUG __t => _224
  __an._M_t = _224;
  __x_248 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_Alloc_node> (_224, _246, _17, &__an);

  <bb 110>:
  __an ={v} {CLOBBER};
  MEM[(struct _Rb_tree_node_base * &)__first_568 + 16] = __x_248;
  # DEBUG this => _224
  # DEBUG this => _224
  # DEBUG __x => __x_248

  <bb 111>:
  # __x_249 = PHI <__x_248(110), __x_250(112)>
  # DEBUG __x => __x_249
  __x_250 = __x_249->_M_left;
  if (__x_250 == 0B)
    goto <bb 113>;
  else
    goto <bb 112>;

  <bb 112>:
  goto <bb 111>;

  <bb 113>:
  # __x_311 = PHI <__x_249(111)>
  MEM[(struct _Rb_tree_node_base * &)__first_568 + 24] = __x_311;
  # DEBUG this => _224
  # DEBUG this => _224
  # DEBUG __x => __x_248

  <bb 114>:
  # __x_251 = PHI <__x_248(113), __x_252(115)>
  # DEBUG __x => __x_251
  __x_252 = __x_251->_M_right;
  if (__x_252 == 0B)
    goto <bb 116>;
  else
    goto <bb 115>;

  <bb 115>:
  goto <bb 114>;

  <bb 116>:
  # __x_41 = PHI <__x_251(114)>
  MEM[(struct _Rb_tree_node_base * &)__first_568 + 32] = __x_41;
  _253 = MEM[(const struct _Rb_tree &)__x_29(D)]._M_impl._M_node_count;
  MEM[(struct _Rb_tree *)__first_568]._M_impl._M_node_count = _253;

  <bb 117>:
  __n_225 = __n_566 + 18446744073709551615;
  # DEBUG __n => __n_225
  __first_226 = __first_568 + 48;
  # DEBUG __cur => __first_226
  # DEBUG __cur => __first_226
  # DEBUG __n => __n_225
  if (__n_225 == 0)
    goto <bb 119>;
  else
    goto <bb 118>;

  <bb 118>:
  goto <bb 106>;

  <bb 119>:
  # DEBUG __new_finish => 0B
  # DEBUG D#762 => &this_9(D)->D.46681
  # DEBUG this => D#762
  # DEBUG this => &__position
  __first_32 = this_9(D)->D.46681._M_impl._M_start;
  # DEBUG __first => __first_32
  # DEBUG __last => D#1339
  # DEBUG __result => NULL
  # DEBUG __alloc => D#739
  # DEBUG D#738 => D#739
  # DEBUG D#735 => D#738
  # DEBUG __first => __first_32
  # DEBUG __last => D#1339
  # DEBUG __result => NULL
  # DEBUG D.81930 => D#735
  # DEBUG __first => __first_32
  # DEBUG __last => D#1339
  # DEBUG __result => NULL
  # DEBUG __assignable => 1
  # DEBUG __first => __first_32
  # DEBUG __last => D#1339
  # DEBUG __result => __new_finish_233
  # DEBUG __cur => __new_finish_233
  # DEBUG __first => __first_32
  if (__position_23 == __first_32)
    goto <bb 141>;
  else
    goto <bb 126>;

  # __first_481 = PHI <__first_568(109)>
<L28>:
  _227 = __builtin_eh_pointer (23);
  __cxa_begin_catch (_227);
  # DEBUG __first => __first_28
  # DEBUG __last => __first_481
  # DEBUG __first => __first_28
  # DEBUG __last => __first_481
  # DEBUG __first => __first_28
  if (__first_28 == __first_481)
    goto <bb 121>;
  else
    goto <bb 122>;

  <bb 121>:
  __cxa_rethrow ();

  <bb 122>:

  <bb 123>:
  # __first_477 = PHI <__first_28(122), __first_231(124)>
  # DEBUG __first => __first_477
  # DEBUG __r => __first_477
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _229 = &__first_477->_M_t;
  # DEBUG this => _229
  _230 = MEM[(struct _Rb_tree_node_base * *)__first_477 + 16B];
  # DEBUG D#42 => _229
  # DEBUG this => D#42
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_erase (_229, _230);
  # DEBUG D#545 => &MEM[(struct _Rb_tree *)_229]._M_impl
  # DEBUG this => D#545
  # DEBUG this => D#545
  # DEBUG this => D#545
  MEM[(struct  &)__first_477] ={v} {CLOBBER};
  __first_231 = __first_477 + 48;
  # DEBUG __first => __first_231
  # DEBUG __first => __first_231
  if (__first_231 == __first_481)
    goto <bb 121>;
  else
    goto <bb 124>;

  <bb 124>:
  goto <bb 123>;

<L30>:
  __cxa_end_catch ();
  resx 22

  <bb 126>:

  <bb 127>:
  # __first_480 = PHI <__first_32(126), __first_258(140)>
  # __new_finish_158 = PHI <__new_finish_233(126), __new_finish_259(140)>
  # DEBUG __cur => __new_finish_158
  # DEBUG __first => __first_480
  # DEBUG __r => __new_finish_158
  # DEBUG __p => NULL
  # DEBUG __value => __first_480
  # DEBUG D#20 => 48
  # DEBUG __p => NULL
  # DEBUG D.81277 => D#20
  if (__new_finish_158 != 0B)
    goto <bb 129>;
  else
    goto <bb 128>;

  <bb 128>:
  goto <bb 138>;

  <bb 129>:
  # DEBUG this => NULL
  # DEBUG __x => __first_480
  # DEBUG D#1331 => &MEM[(const struct map &)__first_480]._M_t
  _257 = &__new_finish_158->_M_t;
  # DEBUG this => _257
  # DEBUG __x => D#1331
  # DEBUG this => D#1331
  # DEBUG __a => NULL
  # DEBUG D#734 => &MEM[(const struct _Rb_tree &)D#1331]._M_impl._M_key_compare
  # DEBUG D#733 => &MEM[(struct _Rb_tree *)_257]._M_impl
  # DEBUG this => D#733
  # DEBUG __comp => D#734
  # DEBUG __a => NULL
  # DEBUG this => D#733
  # DEBUG __a => NULL
  # DEBUG this => D#733
  # DEBUG D.74035 => NULL
  MEM[(struct _Rb_tree_impl *)__new_finish_158]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)__new_finish_158]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)__new_finish_158]._M_node_count = 0;
  # DEBUG this => D#733
  _115 = &MEM[(struct _Rb_tree_impl *)__new_finish_158]._M_header;
  MEM[(struct _Rb_tree_impl *)__new_finish_158]._M_header._M_left = _115;
  MEM[(struct _Rb_tree_impl *)__new_finish_158]._M_header._M_right = _115;
  _265 = MEM[(struct _Rb_tree_node_base * *)__first_480 + 16B];
  # DEBUG D#67 => D#1331
  # DEBUG this => D#67
  if (_265 != 0B)
    goto <bb 130>;
  else
    goto <bb 128>;

  <bb 130>:
  # DEBUG this => _257
  # DEBUG this => _257
  # DEBUG D#68 => D#1331
  # DEBUG this => D#68
  # DEBUG this => _257
  # DEBUG __x => NULL
  # DEBUG __p => NULL
  # DEBUG this => &__an
  # DEBUG __t => _257
  __an._M_t = _257;
  __x_267 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_Alloc_node> (_257, _265, _115, &__an);

  <bb 131>:
  __an ={v} {CLOBBER};
  MEM[(struct _Rb_tree_node_base * &)__new_finish_158 + 16] = __x_267;
  # DEBUG this => _257
  # DEBUG this => _257
  # DEBUG __x => __x_267

  <bb 132>:
  # __x_268 = PHI <__x_267(131), __x_269(133)>
  # DEBUG __x => __x_268
  __x_269 = __x_268->_M_left;
  if (__x_269 == 0B)
    goto <bb 134>;
  else
    goto <bb 133>;

  <bb 133>:
  goto <bb 132>;

  <bb 134>:
  # __x_79 = PHI <__x_268(132)>
  MEM[(struct _Rb_tree_node_base * &)__new_finish_158 + 24] = __x_79;
  # DEBUG this => _257
  # DEBUG this => _257
  # DEBUG __x => __x_267

  <bb 135>:
  # __x_270 = PHI <__x_267(134), __x_271(136)>
  # DEBUG __x => __x_270
  __x_271 = __x_270->_M_right;
  if (__x_271 == 0B)
    goto <bb 137>;
  else
    goto <bb 136>;

  <bb 136>:
  goto <bb 135>;

  <bb 137>:
  # __x_111 = PHI <__x_270(135)>
  MEM[(struct _Rb_tree_node_base * &)__new_finish_158 + 32] = __x_111;
  _272 = MEM[(const struct _Rb_tree &)__first_480]._M_impl._M_node_count;
  MEM[(struct _Rb_tree *)__new_finish_158]._M_impl._M_node_count = _272;

  <bb 138>:
  __first_258 = __first_480 + 48;
  # DEBUG __first => __first_258
  __new_finish_259 = __new_finish_158 + 48;
  # DEBUG __cur => __new_finish_259
  # DEBUG __cur => __new_finish_259
  # DEBUG __first => __first_258
  if (__position_23 == __first_258)
    goto <bb 139>;
  else
    goto <bb 140>;

  <bb 139>:
  # __new_finish_109 = PHI <__new_finish_259(138)>
  goto <bb 141>;

  <bb 140>:
  goto <bb 127>;

  <bb 141>:
  # __new_finish_495 = PHI <__new_finish_109(139), __new_finish_233(119)>
  # DEBUG __new_finish => NULL
  _33 = __n_7(D) * 48;
  __new_finish_34 = __new_finish_495 + _33;
  # DEBUG __new_finish => __new_finish_34
  # DEBUG D#763 => &this_9(D)->D.46681
  # DEBUG this => D#763
  _36 = this_9(D)->D.46681._M_impl._M_finish;
  # DEBUG this => &__position
  # DEBUG __first => D#1339
  # DEBUG __last => _36
  # DEBUG __result => __new_finish_34
  # DEBUG __alloc => D#739
  # DEBUG D#738 => D#739
  # DEBUG D#735 => D#738
  # DEBUG __first => D#1339
  # DEBUG __last => _36
  # DEBUG __result => __new_finish_34
  # DEBUG D.81949 => D#735
  # DEBUG __first => D#1339
  # DEBUG __last => _36
  # DEBUG __result => __new_finish_34
  # DEBUG __assignable => 1
  # DEBUG __first => D#1339
  # DEBUG __last => _36
  # DEBUG __result => __new_finish_34
  # DEBUG __cur => __new_finish_34
  # DEBUG __first => D#1339
  if (__position_23 == _36)
    goto <bb 163>;
  else
    goto <bb 148>;

  # __new_finish_37 = PHI <__new_finish_158(130)>
<L31>:
  _260 = __builtin_eh_pointer (26);
  __cxa_begin_catch (_260);
  # DEBUG __first => __new_finish_233
  # DEBUG __last => __new_finish_37
  # DEBUG __first => __new_finish_233
  # DEBUG __last => __new_finish_37
  # DEBUG __first => __new_finish_233
  if (__new_finish_37 == __new_finish_233)
    goto <bb 143>;
  else
    goto <bb 144>;

  <bb 143>:
  __cxa_rethrow ();

  <bb 144>:

  <bb 145>:
  # __new_finish_528 = PHI <__new_finish_233(144), __new_finish_264(146)>
  # DEBUG __first => __new_finish_528
  # DEBUG __r => __new_finish_528
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _262 = &__new_finish_528->_M_t;
  # DEBUG this => _262
  _263 = MEM[(struct _Rb_tree_node_base * *)__new_finish_528 + 16B];
  # DEBUG D#42 => _262
  # DEBUG this => D#42
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_erase (_262, _263);
  # DEBUG D#545 => &MEM[(struct _Rb_tree *)_262]._M_impl
  # DEBUG this => D#545
  # DEBUG this => D#545
  # DEBUG this => D#545
  MEM[(struct  &)__new_finish_528] ={v} {CLOBBER};
  __new_finish_264 = __new_finish_528 + 48;
  # DEBUG __first => __new_finish_264
  # DEBUG __first => __new_finish_264
  if (__new_finish_37 == __new_finish_264)
    goto <bb 143>;
  else
    goto <bb 146>;

  <bb 146>:
  goto <bb 145>;

<L33>:
  __cxa_end_catch ();
  resx 25

  <bb 148>:

  <bb 149>:
  # __position_529 = PHI <__position_23(148), __position_277(161)>
  # __new_finish_484 = PHI <__new_finish_34(148), __new_finish_278(161)>
  # DEBUG __cur => __new_finish_484
  # DEBUG __first => __position_529
  # DEBUG __r => __new_finish_484
  # DEBUG __p => NULL
  # DEBUG __value => __position_529
  # DEBUG D#20 => 48
  # DEBUG __p => NULL
  # DEBUG D.81277 => D#20
  if (__new_finish_484 != 0B)
    goto <bb 151>;
  else
    goto <bb 150>;

  <bb 150>:
  goto <bb 160>;

  <bb 151>:
  # DEBUG this => NULL
  # DEBUG __x => __position_529
  # DEBUG D#1332 => &MEM[(const struct map &)__position_529]._M_t
  _276 = &__new_finish_484->_M_t;
  # DEBUG this => _276
  # DEBUG __x => D#1332
  # DEBUG this => D#1332
  # DEBUG __a => NULL
  # DEBUG D#734 => &MEM[(const struct _Rb_tree &)D#1332]._M_impl._M_key_compare
  # DEBUG D#733 => &MEM[(struct _Rb_tree *)_276]._M_impl
  # DEBUG this => D#733
  # DEBUG __comp => D#734
  # DEBUG __a => NULL
  # DEBUG this => D#733
  # DEBUG __a => NULL
  # DEBUG this => D#733
  # DEBUG D.74035 => NULL
  MEM[(struct _Rb_tree_impl *)__new_finish_484]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)__new_finish_484]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)__new_finish_484]._M_node_count = 0;
  # DEBUG this => D#733
  _116 = &MEM[(struct _Rb_tree_impl *)__new_finish_484]._M_header;
  MEM[(struct _Rb_tree_impl *)__new_finish_484]._M_header._M_left = _116;
  MEM[(struct _Rb_tree_impl *)__new_finish_484]._M_header._M_right = _116;
  _284 = MEM[(struct _Rb_tree_node_base * *)__position_529 + 16B];
  # DEBUG D#67 => D#1332
  # DEBUG this => D#67
  if (_284 != 0B)
    goto <bb 152>;
  else
    goto <bb 150>;

  <bb 152>:
  # DEBUG this => _276
  # DEBUG this => _276
  # DEBUG D#68 => D#1332
  # DEBUG this => D#68
  # DEBUG this => _276
  # DEBUG __x => NULL
  # DEBUG __p => NULL
  # DEBUG this => &__an
  # DEBUG __t => _276
  __an._M_t = _276;
  __x_286 = std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_copy<std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_Alloc_node> (_276, _284, _116, &__an);

  <bb 153>:
  __an ={v} {CLOBBER};
  MEM[(struct _Rb_tree_node_base * &)__new_finish_484 + 16] = __x_286;
  # DEBUG this => _276
  # DEBUG this => _276
  # DEBUG __x => __x_286

  <bb 154>:
  # __x_287 = PHI <__x_286(153), __x_288(155)>
  # DEBUG __x => __x_287
  __x_288 = __x_287->_M_left;
  if (__x_288 == 0B)
    goto <bb 156>;
  else
    goto <bb 155>;

  <bb 155>:
  goto <bb 154>;

  <bb 156>:
  # __x_242 = PHI <__x_287(154)>
  MEM[(struct _Rb_tree_node_base * &)__new_finish_484 + 24] = __x_242;
  # DEBUG this => _276
  # DEBUG this => _276
  # DEBUG __x => __x_286

  <bb 157>:
  # __x_289 = PHI <__x_286(156), __x_290(158)>
  # DEBUG __x => __x_289
  __x_290 = __x_289->_M_right;
  if (__x_290 == 0B)
    goto <bb 159>;
  else
    goto <bb 158>;

  <bb 158>:
  goto <bb 157>;

  <bb 159>:
  # __x_103 = PHI <__x_289(157)>
  MEM[(struct _Rb_tree_node_base * &)__new_finish_484 + 32] = __x_103;
  _291 = MEM[(const struct _Rb_tree &)__position_529]._M_impl._M_node_count;
  MEM[(struct _Rb_tree *)__new_finish_484]._M_impl._M_node_count = _291;

  <bb 160>:
  __position_277 = __position_529 + 48;
  # DEBUG __first => __position_277
  __new_finish_278 = __new_finish_484 + 48;
  # DEBUG __cur => __new_finish_278
  # DEBUG __cur => __new_finish_278
  # DEBUG __first => __position_277
  if (_36 == __position_277)
    goto <bb 162>;
  else
    goto <bb 161>;

  <bb 161>:
  goto <bb 149>;

  <bb 162>:
  # __new_finish_303 = PHI <__new_finish_278(160)>
  pretmp_362 = this_9(D)->D.46681._M_impl._M_finish;

  <bb 163>:
  # __new_finish_534 = PHI <__new_finish_303(162), __new_finish_34(141)>
  # prephitmp_383 = PHI <pretmp_362(162), _36(141)>
  # DEBUG __new_finish => NULL
  # DEBUG D#764 => &this_9(D)->D.46681
  # DEBUG this => D#764
  # DEBUG D#1338 => this_9(D)->D.46681._M_impl._M_finish
  __first_39 = this_9(D)->D.46681._M_impl._M_start;
  # DEBUG __first => __first_39
  # DEBUG __last => D#1338
  # DEBUG __first => __first_39
  if (__first_39 == prephitmp_383)
    goto <bb 174>;
  else
    goto <bb 170>;

  # __new_finish_112 = PHI <__new_finish_484(152)>
<L34>:
  _279 = __builtin_eh_pointer (29);
  __cxa_begin_catch (_279);
  # DEBUG __first => __new_finish_34
  # DEBUG __last => __new_finish_112
  # DEBUG __first => __new_finish_34
  # DEBUG __last => __new_finish_112
  # DEBUG __first => __new_finish_34
  if (__new_finish_34 == __new_finish_112)
    goto <bb 165>;
  else
    goto <bb 166>;

  <bb 165>:
  __cxa_rethrow ();

  <bb 166>:

  <bb 167>:
  # __new_finish_533 = PHI <__new_finish_34(166), __new_finish_283(168)>
  # DEBUG __first => __new_finish_533
  # DEBUG __r => __new_finish_533
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _281 = &__new_finish_533->_M_t;
  # DEBUG this => _281
  _282 = MEM[(struct _Rb_tree_node_base * *)__new_finish_533 + 16B];
  # DEBUG D#42 => _281
  # DEBUG this => D#42
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_erase (_281, _282);
  # DEBUG D#545 => &MEM[(struct _Rb_tree *)_281]._M_impl
  # DEBUG this => D#545
  # DEBUG this => D#545
  # DEBUG this => D#545
  MEM[(struct  &)__new_finish_533] ={v} {CLOBBER};
  __new_finish_283 = __new_finish_533 + 48;
  # DEBUG __first => __new_finish_283
  # DEBUG __first => __new_finish_283
  if (__new_finish_283 == __new_finish_112)
    goto <bb 165>;
  else
    goto <bb 168>;

  <bb 168>:
  goto <bb 167>;

<L36>:
  __cxa_end_catch ();
  resx 28

  <bb 170>:

  <bb 171>:
  # __first_555 = PHI <__first_39(170), __first_98(172)>
  # DEBUG __first => __first_555
  # DEBUG __r => __first_555
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _96 = &__first_555->_M_t;
  # DEBUG this => _96
  _97 = MEM[(struct _Rb_tree_node_base * *)__first_555 + 16B];
  # DEBUG D#42 => _96
  # DEBUG this => D#42
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_erase (_96, _97);
  # DEBUG D#545 => &MEM[(struct _Rb_tree *)_96]._M_impl
  # DEBUG this => D#545
  # DEBUG this => D#545
  # DEBUG this => D#545
  MEM[(struct  &)__first_555] ={v} {CLOBBER};
  __first_98 = __first_555 + 48;
  # DEBUG __first => __first_98
  # DEBUG __first => __first_98
  if (__first_98 == prephitmp_383)
    goto <bb 173>;
  else
    goto <bb 172>;

  <bb 172>:
  goto <bb 171>;

  <bb 173>:
  pretmp_385 = this_9(D)->D.46681._M_impl._M_start;

  <bb 174>:
  # prephitmp_386 = PHI <pretmp_385(173), __first_39(163)>
  # DEBUG D#775 => this_9(D)->D.46681._M_impl._M_end_of_storage
  # DEBUG D#774 => (long int) D#775
  # DEBUG D#1337 => this_9(D)->D.46681._M_impl._M_start
  # DEBUG D#773 => (long int) D#1337
  # DEBUG D#772 => D#774 - D#773
  # DEBUG D#771 => D#772 /[ex] 48
  # DEBUG D#770 => &this_9(D)->D.46681
  # DEBUG D#177 => D#770
  # DEBUG D#178 => (long unsigned int) D#771
  # DEBUG __p => D#1337
  # DEBUG this => D#177
  # DEBUG __n => D#178
  # DEBUG D#176 => D#178
  # DEBUG D#175 => D#177
  if (prephitmp_386 != 0B)
    goto <bb 175>;
  else
    goto <bb 176>;

  <bb 175>:
  # DEBUG D#174 => &D#175->_M_impl
  # DEBUG D#172 => D#174
  # DEBUG D#173 => D#176
  # DEBUG __p => D#1337
  # DEBUG __a => D#172
  # DEBUG __n => D#173
  # DEBUG D#171 => D#173
  # DEBUG D#170 => D#172
  # DEBUG D#168 => D#170
  # DEBUG D#169 => D#171
  # DEBUG __p => D#1337
  # DEBUG this => D#168
  # DEBUG D.81972 => D#169
  operator delete (prephitmp_386);

  <bb 176>:
  this_9(D)->D.46681._M_impl._M_start = __new_finish_233;
  this_9(D)->D.46681._M_impl._M_finish = __new_finish_534;
  _45 = __new_finish_233 + prephitmp_128;
  this_9(D)->D.46681._M_impl._M_end_of_storage = _45;

  <bb 177>:
  return;

<L39>:

<L10>:
  # DEBUG this => &__x_copy
  # DEBUG this => &__x_copy._M_t
  _99 = MEM[(struct _Rb_tree_node_base * *)&__x_copy + 16B];
  # DEBUG D#42 => &__x_copy._M_t
  # DEBUG this => D#42
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_erase (&__x_copy._M_t, _99);
  # DEBUG D#545 => &MEM[(struct _Rb_tree *)&__x_copy]._M_impl
  # DEBUG this => D#545
  # DEBUG this => D#545
  # DEBUG this => D#545
  resx 2

<L13>:
  # DEBUG __new_finish => __new_finish_34
  _47 = __builtin_eh_pointer (9);
  __cxa_begin_catch (_47);
  if (__new_finish_34 == 0B)
    goto <bb 183>;
  else
    goto <bb 181>;

  <bb 181>:
  # DEBUG __first => __new_finish_233
  if (__new_finish_34 == __new_finish_233)
    goto <bb 182>;
  else
    goto <bb 188>;

  <bb 182>:
  # DEBUG D#776 => &this_9(D)->D.46681
  # DEBUG D#177 => D#776
  # DEBUG __p => NULL
  # DEBUG this => D#177
  # DEBUG __n => D#178
  # DEBUG D#176 => D#178
  # DEBUG D#175 => D#177
  if (__new_finish_233 != 0B)
    goto <bb 191>;
  else
    goto <bb 192>;

  <bb 183>:

  <bb 184>:
  # DEBUG __new_finish => 0B
  # DEBUG D#768 => &this_9(D)->D.46681
  # DEBUG this => D#768
  _49 = __n_7(D) + __elems_before_574;
  _50 = _49 * 48;
  _51 = __new_finish_233 + _50;
  # DEBUG __first => __first_28
  # DEBUG __last => _51
  # DEBUG __first => __first_28
  if (__first_28 == _51)
    goto <bb 182>;
  else
    goto <bb 185>;

  <bb 185>:

  <bb 186>:
  # __first_554 = PHI <__first_28(185), __first_102(187)>
  # DEBUG __first => __first_554
  # DEBUG __r => __first_554
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _100 = &__first_554->_M_t;
  # DEBUG this => _100
  _101 = MEM[(struct _Rb_tree_node_base * *)__first_554 + 16B];
  # DEBUG D#42 => _100
  # DEBUG this => D#42
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_erase (_100, _101);
  # DEBUG D#545 => &MEM[(struct _Rb_tree *)_100]._M_impl
  # DEBUG this => D#545
  # DEBUG this => D#545
  # DEBUG this => D#545
  MEM[(struct  &)__first_554] ={v} {CLOBBER};
  __first_102 = __first_554 + 48;
  # DEBUG __first => __first_102
  # DEBUG __first => __first_102
  if (_51 == __first_102)
    goto <bb 182>;
  else
    goto <bb 187>;

  <bb 187>:
  goto <bb 186>;

  <bb 188>:

  <bb 189>:
  # __new_finish_551 = PHI <__new_finish_233(188), __new_finish_106(190)>
  # DEBUG __first => __new_finish_551
  # DEBUG __r => __new_finish_551
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _104 = &__new_finish_551->_M_t;
  # DEBUG this => _104
  _105 = MEM[(struct _Rb_tree_node_base * *)__new_finish_551 + 16B];
  # DEBUG D#42 => _104
  # DEBUG this => D#42
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_erase (_104, _105);
  # DEBUG D#545 => &MEM[(struct _Rb_tree *)_104]._M_impl
  # DEBUG this => D#545
  # DEBUG this => D#545
  # DEBUG this => D#545
  MEM[(struct  &)__new_finish_551] ={v} {CLOBBER};
  __new_finish_106 = __new_finish_551 + 48;
  # DEBUG __first => __new_finish_106
  # DEBUG __first => __new_finish_106
  if (__new_finish_34 == __new_finish_106)
    goto <bb 182>;
  else
    goto <bb 190>;

  <bb 190>:
  goto <bb 189>;

  <bb 191>:
  # DEBUG D#174 => &D#175->_M_impl
  # DEBUG D#172 => D#174
  # DEBUG D#173 => D#176
  # DEBUG __p => NULL
  # DEBUG __a => D#172
  # DEBUG __n => D#173
  # DEBUG D#171 => D#173
  # DEBUG D#170 => D#172
  # DEBUG D#168 => D#170
  # DEBUG D#169 => D#171
  # DEBUG __p => NULL
  # DEBUG this => D#168
  # DEBUG D.82035 => D#169
  operator delete (__new_finish_233);

  <bb 192>:
  __cxa_rethrow ();

<L18>:
  __cxa_end_catch ();
  resx 10

  <bb 194>:
  # DEBUG __len => NULL
  # DEBUG this => this_9(D)
  # DEBUG D#122 => &this_9(D)->D.46681._M_impl._M_start
  # DEBUG this => NULL
  # DEBUG __i => D#122
  # DEBUG __lhs => &__position
  # DEBUG __rhs => &D.62230
  # DEBUG this => &__position
  _496 = (long int) __position_23;
  # DEBUG this => &D.62230
  _497 = _496 - _236;
  _492 = _497 /[ex] 48;
  __elems_before_493 = (const size_type) _492;
  # DEBUG __elems_before => __elems_before_493
  # DEBUG D#777 => &this_9(D)->D.46681
  # DEBUG D#486 => D#777
  # DEBUG __n => NULL
  # DEBUG this => D#523
  # DEBUG D#522 => D#523
  goto <bb 104>;

  <bb 195>:
  # DEBUG __len => NULL
  # DEBUG this => this_9(D)
  # DEBUG D#122 => &this_9(D)->D.46681._M_impl._M_start
  # DEBUG this => NULL
  # DEBUG __i => D#122
  # DEBUG __lhs => &__position
  # DEBUG __rhs => &D.62230
  # DEBUG this => &__position
  _487 = (long int) __position_23;
  # DEBUG this => &D.62230
  _488 = _487 - _236;
  _489 = _488 /[ex] 48;
  __elems_before_570 = (const size_type) _489;
  # DEBUG __elems_before => __elems_before_570
  # DEBUG D#777 => &this_9(D)->D.46681
  # DEBUG D#486 => D#777
  # DEBUG __n => NULL
  # DEBUG this => D#523
  # DEBUG D#522 => D#523
  if (__len_244 != 0)
    goto <bb 103>;
  else
    goto <bb 105>;

  <bb 196>:
  _25 = (long unsigned int) _31;
  _299 = __old_finish_545 + _25;
  this_9(D)->D.46681._M_impl._M_finish = _299;
  # DEBUG this => &__position
  # DEBUG __first => D#1339
  # DEBUG __last => D#1336
  # DEBUG __value => &__x_copy
  # DEBUG __first => D#1339
  goto <bb 99>;

<L37>:
  # DEBUG __new_finish => 0B
  _190 = __builtin_eh_pointer (9);
  __cxa_begin_catch (_190);
  goto <bb 184>;

<L38>:
  # DEBUG __new_finish => __new_finish_233
  _296 = __builtin_eh_pointer (9);
  __cxa_begin_catch (_296);
  if (__new_finish_233 == 0B)
    goto <bb 183>;
  else
    goto <bb 182>;

}



;; Function std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_copy(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_Reuse_or_alloc_node; _Key = int; _Val = std::pair<const int, int>; _KeyOfValue = std::_Select1st<std::pair<const int, int> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, int> >*; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type = const std::_Rb_tree_node<std::pair<const int, int> >*] (_ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EE7_M_copyINS8_20_Reuse_or_alloc_nodeEEEPSt13_Rb_tree_nodeIS2_EPKSC_SD_RT_, funcdef_no=3732, decl_uid=65457, cgraph_uid=1854, symbol_order=1856)

Trying loop 1 as candidate
loop 1 is not innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is innermost
loop is not parallel according to graphite
std::_Rb_tree_node<_Val>* std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_copy(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type, std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type, _NodeGen&) [with _NodeGen = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_Reuse_or_alloc_node; _Key = int; _Val = std::pair<const int, int>; _KeyOfValue = std::_Select1st<std::pair<const int, int> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const int, int> >*; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Const_Link_type = const std::_Rb_tree_node<std::pair<const int, int> >*] (struct _Rb_tree * const this, const struct _Rb_tree_node * __x, struct _Rb_tree_node * __p, struct _Reuse_or_alloc_node & __node_gen)
{
  bool __node_gen___M_nodes_lsm.2268;
  struct _Rb_tree_node_base * __node_gen___M_nodes_lsm.2267;
  bool __node_gen___M_nodes_lsm.2266;
  struct _Rb_tree_node_base * __node_gen___M_nodes_lsm.2265;
  struct _Rb_tree_node_base * D.91958;
  struct _Rb_tree_node * __node;
  struct _Rb_tree_node * D.91955;
  struct _Rb_tree_node_base * D.91925;
  struct _Rb_tree_node * __node;
  struct _Rb_tree_node * D.91922;
  struct _Rb_tree_node_base * _13;
  struct _Rb_tree_node * _15;
  _Rb_tree_color _17;
  struct _Rb_tree_node_base * _20;
  struct _Rb_tree_node_base * _21;
  struct _Rb_tree_node * _23;
  struct _Rb_tree_node_base * _25;
  void * _26;
  struct _Rb_tree_node_base * const _33;
  _Rb_tree_color _36;
  struct _Rb_tree_node_base * _37;
  struct _Rb_tree_node_base * _41;
  struct _Rb_tree_node_base * _46;
  struct _Rb_tree_node * _47;
  struct _Rb_tree_node_base * _50;
  struct _Rb_tree_node_base * _51;
  struct _Rb_tree_node_base * _52;
  struct _Rb_tree_node_base * _54;
  struct _Rb_tree_node_base * _55;
  struct _Rb_tree_node * _58;
  struct _Rb_tree_node_base * _61;
  struct _Rb_tree_node_base * _62;
  struct _Rb_tree_node_base * _63;
  struct _Rb_tree_node_base * _65;
  struct _Rb_tree_node_base * _66;
  struct _Rb_tree_node_base * _71;
  struct _Rb_tree_node_base * _97;
  struct _Rb_tree_node_base * _107;
  struct _Rb_tree_node_base * _110;
  struct _Rb_tree_node_base * _126;

  <bb 2>:
  # DEBUG D#959 => this_8(D)
  # DEBUG __x => __x_9(D)
  # DEBUG __node_gen => __node_gen_10(D)
  # DEBUG this => D#959
  # DEBUG this => __x_9(D)
  # DEBUG D#1356 => &__x_9(D)->_M_value_field
  # DEBUG __r => D#1356
  # DEBUG this => __node_gen_10(D)
  # DEBUG __arg => D#1356
  # DEBUG this => __node_gen_10(D)
  _37 = __node_gen_10(D)->_M_nodes;
  if (_37 == 0B)
    goto <bb 46>;
  else
    goto <bb 3>;

  <bb 3>:
  # DEBUG __node => _37
  _50 = _37->_M_parent;
  __node_gen_10(D)->_M_nodes = _50;
  if (_50 != 0B)
    goto <bb 4>;
  else
    goto <bb 14>;

  <bb 4>:
  _51 = _50->_M_right;
  if (_37 == _51)
    goto <bb 5>;
  else
    goto <bb 13>;

  <bb 5>:
  _50->_M_right = 0B;
  _52 = _50->_M_left;
  if (_52 != 0B)
    goto <bb 6>;
  else
    goto <bb 44>;

  <bb 6>:
  __node_gen_10(D)->_M_nodes = _52;
  # DEBUG this => __node_gen_10(D)
  _71 = _52->_M_right;
  if (_71 == 0B)
    goto <bb 11>;
  else
    goto <bb 7>;

  <bb 7>:

  <bb 8>:
  # _97 = PHI <_71(7), _54(9)>
  _54 = _97->_M_right;
  if (_54 == 0B)
    goto <bb 10>;
  else
    goto <bb 9>;

  <bb 9>:
  goto <bb 8>;

  <bb 10>:
  # _25 = PHI <_97(8)>

  <bb 52>:
  __node_gen_10(D)->_M_nodes = _25;

  <bb 11>:
  # _107 = PHI <_25(52), _52(6)>
  _55 = _107->_M_left;
  if (_55 != 0B)
    goto <bb 12>;
  else
    goto <bb 44>;

  <bb 12>:
  __node_gen_10(D)->_M_nodes = _55;
  goto <bb 45>;

  <bb 13>:
  _50->_M_left = 0B;
  goto <bb 45>;

  <bb 14>:
  __node_gen_10(D)->_M_root = 0B;
  goto <bb 45>;

  <bb 15>:
  # __p_49 = PHI <_47(46), _37(54)>
  # DEBUG __tmp => NULL
  _17 = __x_9(D)->D.60074._M_color;
  __p_49->D.60074._M_color = _17;
  __p_49->D.60074._M_left = 0B;
  __p_49->D.60074._M_right = 0B;
  # DEBUG __top => NULL
  __p_49->D.60074._M_parent = __p_11(D);
  _13 = __x_9(D)->D.60074._M_right;
  if (_13 != 0B)
    goto <bb 16>;
  else
    goto <bb 18>;

  <bb 16>:
  _33 = MEM[(struct _Rb_tree_node_base * *)__x_9(D) + 24B];
  # DEBUG D#127 => __x_9(D)
  # DEBUG __x => D#127
  _15 = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_copy<std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_Reuse_or_alloc_node> (this_8(D), _33, __p_49, __node_gen_10(D));

  <bb 17>:
  __p_49->D.60074._M_right = _15;

  <bb 18>:
  # DEBUG __p => NULL
  __x_31 = MEM[(struct _Rb_tree_node_base * *)__x_9(D) + 16B];
  # DEBUG D#126 => __x_9(D)
  # DEBUG __x => D#126
  # DEBUG __x => NULL
  # DEBUG __p => __p_49
  # DEBUG __x => __x_31
  if (__x_31 == 0B)
    goto <bb 19>;
  else
    goto <bb 20>;

  <bb 19>:

  <bb 57>:
  return __p_49;

  <bb 20>:

  <bb 21>:
  # __x_68 = PHI <__x_31(20), __x_32(40)>
  # __p_120 = PHI <__p_49(20), __p_60(40)>
  # DEBUG __p => __p_120
  # DEBUG __x => __x_68
  # DEBUG D#959 => this_8(D)
  # DEBUG __x => __x_68
  # DEBUG __node_gen => __node_gen_10(D)
  # DEBUG this => D#959
  # DEBUG this => __x_68
  # DEBUG D#1357 => &__x_68->_M_value_field
  # DEBUG __r => D#1357
  # DEBUG this => __node_gen_10(D)
  # DEBUG __arg => D#1357
  # DEBUG this => __node_gen_10(D)
  _41 = __node_gen_10(D)->_M_nodes;
  if (_41 == 0B)
    goto <bb 49>;
  else
    goto <bb 22>;

  <bb 22>:
  # DEBUG __node => _41
  _61 = _41->_M_parent;
  __node_gen_10(D)->_M_nodes = _61;
  if (_61 != 0B)
    goto <bb 23>;
  else
    goto <bb 33>;

  <bb 23>:
  _62 = _61->_M_right;
  if (_41 == _62)
    goto <bb 24>;
  else
    goto <bb 32>;

  <bb 24>:
  _61->_M_right = 0B;
  _63 = _61->_M_left;
  if (_63 != 0B)
    goto <bb 25>;
  else
    goto <bb 47>;

  <bb 25>:
  __node_gen_10(D)->_M_nodes = _63;
  # DEBUG this => __node_gen_10(D)
  _46 = _63->_M_right;
  if (_46 == 0B)
    goto <bb 30>;
  else
    goto <bb 26>;

  <bb 26>:

  <bb 27>:
  # _126 = PHI <_46(26), _65(28)>
  _65 = _126->_M_right;
  if (_65 == 0B)
    goto <bb 29>;
  else
    goto <bb 28>;

  <bb 28>:
  goto <bb 27>;

  <bb 29>:
  # _21 = PHI <_126(27)>

  <bb 51>:
  __node_gen_10(D)->_M_nodes = _21;

  <bb 30>:
  # _110 = PHI <_21(51), _63(25)>
  _66 = _110->_M_left;
  if (_66 != 0B)
    goto <bb 31>;
  else
    goto <bb 47>;

  <bb 31>:
  __node_gen_10(D)->_M_nodes = _66;
  goto <bb 48>;

  <bb 32>:
  _61->_M_left = 0B;
  goto <bb 48>;

  <bb 33>:
  __node_gen_10(D)->_M_root = 0B;
  goto <bb 48>;

  <bb 34>:
  # DEBUG __tmp => _58
  # DEBUG D#609 => D#827
  # DEBUG __node => _58
  # DEBUG __x => D#1357
  # DEBUG this => D#609
  # DEBUG D#608 => D#609
  # DEBUG this => _58
  # DEBUG D#1359 => &_58->_M_value_field
  # DEBUG __r => D#1359
  # DEBUG D#453 => D#608
  # DEBUG this => D#453
  # DEBUG D#452 => D#453
  # DEBUG this => D#452
  # DEBUG this => NULL
  # DEBUG D.76846 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1359
  # DEBUG __val => D#1357
  # DEBUG this => D#607
  # DEBUG D#20 => 8
  # DEBUG __p => D#1359
  # DEBUG D.79307 => D#20
  MEM[(struct pair *)_58 + 32B] = MEM[(const struct pair &)__x_68 + 32];

  <bb 35>:
  # __p_60 = PHI <_58(34), _41(56)>
  # DEBUG __tmp => NULL
  _36 = __x_68->D.60074._M_color;
  __p_60->D.60074._M_color = _36;
  __p_60->D.60074._M_left = 0B;
  __p_60->D.60074._M_right = 0B;
  # DEBUG __y => NULL
  __p_120->D.60074._M_left = __p_60;
  __p_60->D.60074._M_parent = __p_120;
  _20 = __x_68->D.60074._M_right;
  if (_20 != 0B)
    goto <bb 36>;
  else
    goto <bb 39>;

  <bb 36>:
  # DEBUG D#127 => __x_68
  # DEBUG __x => D#127
  _23 = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_copy<std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_Reuse_or_alloc_node> (this_8(D), _20, __p_60, __node_gen_10(D));
  goto <bb 38>;

<L14>:
  goto <bb 42> (<L10>);

  <bb 38>:
  __p_60->D.60074._M_right = _23;

  <bb 39>:
  # DEBUG __p => NULL
  __x_32 = MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B];
  # DEBUG D#126 => __x_68
  # DEBUG __x => D#126
  # DEBUG __x => NULL
  # DEBUG __p => __p_60
  # DEBUG __x => __x_32
  if (__x_32 == 0B)
    goto <bb 19>;
  else
    goto <bb 40>;

  <bb 40>:
  goto <bb 21>;

<L13>:

<L10>:
  _26 = __builtin_eh_pointer (1);
  __cxa_begin_catch (_26);
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (this_8(D), __p_49);
  __cxa_rethrow ();

<L12>:
  __cxa_end_catch ();
  resx 2

  <bb 44>:

  <bb 53>:

  <bb 45>:

  <bb 54>:
  # DEBUG __node => NULL
  # DEBUG __node => NULL
  # DEBUG D#957 => __node_gen_10(D)->_M_t
  # DEBUG D#458 => D#957
  # DEBUG this => D#458
  # DEBUG __p => D#459
  # DEBUG D#457 => D#458
  # DEBUG D#456 => D#459
  # DEBUG D#455 => D#459
  # DEBUG this => D#455
  # DEBUG D#454 => &D#456->_M_value_field
  # DEBUG __r => D#454
  # DEBUG D#453 => D#457
  # DEBUG this => D#453
  # DEBUG D#452 => D#453
  # DEBUG this => D#452
  # DEBUG this => NULL
  # DEBUG D.76846 => NULL
  # DEBUG this => NULL
  # DEBUG D#165 => D#454
  # DEBUG this => D#164
  # DEBUG __p => D#165
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#956 => __node_gen_10(D)->_M_t
  # DEBUG D#609 => D#956
  # DEBUG __node => NULL
  # DEBUG __x => D#1356
  # DEBUG this => D#609
  # DEBUG D#608 => D#609
  # DEBUG this => NULL
  # DEBUG D#1360 => &MEM[(struct _Rb_tree_node *)_37]._M_value_field
  # DEBUG __r => D#1360
  # DEBUG D#453 => D#608
  # DEBUG this => D#453
  # DEBUG D#452 => D#453
  # DEBUG this => D#452
  # DEBUG this => NULL
  # DEBUG D.76846 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1360
  # DEBUG __val => D#1356
  # DEBUG this => D#607
  # DEBUG D#20 => 8
  # DEBUG __p => D#1360
  # DEBUG D.79307 => D#20
  MEM[(struct pair *)_37 + 32B] = MEM[(const struct pair &)__x_9(D) + 32];
  goto <bb 15>;

  <bb 46>:
  # DEBUG __node => NULL
  # DEBUG __node => NULL
  # DEBUG D#958 => __node_gen_10(D)->_M_t
  # DEBUG D#828 => D#958
  # DEBUG __x => D#1356
  # DEBUG this => D#828
  # DEBUG D#827 => D#828
  # DEBUG D#826 => D#828
  # DEBUG D#825 => D#826
  # DEBUG this => D#825
  # DEBUG D#824 => D#825
  # DEBUG this => D#824
  # DEBUG __n => 1
  # DEBUG __a => D#823
  # DEBUG D#822 => D#823
  # DEBUG D#820 => D#822
  # DEBUG D#821 => 0B
  # DEBUG __n => 1
  # DEBUG this => D#820
  # DEBUG D.91906 => D#821
  # DEBUG D#819 => D#820
  # DEBUG D#818 => D#819
  # DEBUG this => D#818
  _47 = operator new (40);
  # DEBUG __tmp => _47
  # DEBUG D#609 => D#827
  # DEBUG __node => _47
  # DEBUG __x => D#1356
  # DEBUG this => D#609
  # DEBUG D#608 => D#609
  # DEBUG this => _47
  # DEBUG D#1361 => &_47->_M_value_field
  # DEBUG __r => D#1361
  # DEBUG D#453 => D#608
  # DEBUG this => D#453
  # DEBUG D#452 => D#453
  # DEBUG this => D#452
  # DEBUG this => NULL
  # DEBUG D.76846 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1361
  # DEBUG __val => D#1356
  # DEBUG this => D#607
  # DEBUG D#20 => 8
  # DEBUG __p => D#1361
  # DEBUG D.79307 => D#20
  MEM[(struct pair *)_47 + 32B] = MEM[(const struct pair &)__x_9(D) + 32];
  goto <bb 15>;

  <bb 47>:

  <bb 55>:

  <bb 48>:

  <bb 56>:
  # DEBUG __node => NULL
  # DEBUG __node => NULL
  # DEBUG D#957 => __node_gen_10(D)->_M_t
  # DEBUG D#458 => D#957
  # DEBUG this => D#458
  # DEBUG __p => D#459
  # DEBUG D#457 => D#458
  # DEBUG D#456 => D#459
  # DEBUG D#455 => D#459
  # DEBUG this => D#455
  # DEBUG D#454 => &D#456->_M_value_field
  # DEBUG __r => D#454
  # DEBUG D#453 => D#457
  # DEBUG this => D#453
  # DEBUG D#452 => D#453
  # DEBUG this => D#452
  # DEBUG this => NULL
  # DEBUG D.76846 => NULL
  # DEBUG this => NULL
  # DEBUG D#165 => D#454
  # DEBUG this => D#164
  # DEBUG __p => D#165
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#956 => __node_gen_10(D)->_M_t
  # DEBUG D#609 => D#956
  # DEBUG __node => NULL
  # DEBUG __x => D#1357
  # DEBUG this => D#609
  # DEBUG D#608 => D#609
  # DEBUG this => NULL
  # DEBUG D#1358 => &MEM[(struct _Rb_tree_node *)_41]._M_value_field
  # DEBUG __r => D#1358
  # DEBUG D#453 => D#608
  # DEBUG this => D#453
  # DEBUG D#452 => D#453
  # DEBUG this => D#452
  # DEBUG this => NULL
  # DEBUG D.76846 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#1358
  # DEBUG __val => D#1357
  # DEBUG this => D#607
  # DEBUG D#20 => 8
  # DEBUG __p => D#1358
  # DEBUG D.79307 => D#20
  MEM[(struct pair *)_41 + 32B] = MEM[(const struct pair &)__x_68 + 32];
  goto <bb 35>;

  <bb 49>:
  # DEBUG __node => NULL
  # DEBUG __node => NULL
  # DEBUG D#958 => __node_gen_10(D)->_M_t
  # DEBUG D#828 => D#958
  # DEBUG __x => D#1357
  # DEBUG this => D#828
  # DEBUG D#827 => D#828
  # DEBUG D#826 => D#828
  # DEBUG D#825 => D#826
  # DEBUG this => D#825
  # DEBUG D#824 => D#825
  # DEBUG this => D#824
  # DEBUG __n => 1
  # DEBUG __a => D#823
  # DEBUG D#822 => D#823
  # DEBUG D#820 => D#822
  # DEBUG D#821 => 0B
  # DEBUG __n => 1
  # DEBUG this => D#820
  # DEBUG D.91939 => D#821
  # DEBUG D#819 => D#820
  # DEBUG D#818 => D#819
  # DEBUG this => D#818
  _58 = operator new (40);
  goto <bb 34>;

<L15>:
  goto <bb 42> (<L10>);

}



;; Function std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::operator=(const std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&) [with _Key = int; _Val = std::pair<const int, int>; _KeyOfValue = std::_Select1st<std::pair<const int, int> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, int> >] (_ZNSt8_Rb_treeIiSt4pairIKiiESt10_Select1stIS2_ESt4lessIiESaIS2_EEaSERKS8_, funcdef_no=3683, decl_uid=45478, cgraph_uid=1805, symbol_order=1807)

Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is innermost
loop is not parallel according to graphite
std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::operator=(const std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&) [with _Key = int; _Val = std::pair<const int, int>; _KeyOfValue = std::_Select1st<std::pair<const int, int> >; _Compare = std::less<int>; _Alloc = std::allocator<std::pair<const int, int> >] (struct _Rb_tree * const this, const struct _Rb_tree & __x)
{
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct _Reuse_or_alloc_node __roan;
  struct _Rb_tree_node_base * _6;
  struct _Rb_tree & prephitmp_12;
  struct _Rb_tree_node_base * _13;
  struct _Rb_tree_node_base * _15;
  struct _Rb_tree_node_base * _16;
  long unsigned int _18;
  struct _Rb_tree_node_base * _21;
  struct _Rb_tree_node_base * const _23;
  struct _Rb_tree & _28;
  struct _Rb_tree_node_base * pretmp_40;
  struct _Rb_tree_node_base * prephitmp_42;
  struct _Rb_tree & pretmp_43;

  <bb 2>:
  if (this_3(D) != __x_4(D))
    goto <bb 3>;
  else
    goto <bb 17>;

  <bb 3>:
  # DEBUG this => &__roan
  # DEBUG __t => this_3(D)
  # DEBUG this => this_3(D)
  _6 = MEM[(struct _Rb_tree_node_base * &)this_3(D) + 16];
  __roan._M_root = _6;
  # DEBUG this => this_3(D)
  _15 = MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32];
  __roan._M_nodes = _15;
  __roan._M_t = this_3(D);
  if (_6 != 0B)
    goto <bb 4>;
  else
    goto <bb 6>;

  <bb 4>:
  _6->_M_parent = 0B;
  _13 = _15->_M_left;
  if (_13 != 0B)
    goto <bb 5>;
  else
    goto <bb 7>;

  <bb 5>:
  __roan._M_nodes = _13;
  goto <bb 7>;

  <bb 6>:
  __roan._M_nodes = 0B;

  <bb 7>:
  # DEBUG D#960 => &this_3(D)->_M_impl
  # DEBUG this => D#960
  MEM[(struct _Rb_tree_impl *)this_3(D)]._M_header._M_parent = 0B;
  _16 = &MEM[(struct _Rb_tree_impl *)this_3(D)]._M_header;
  MEM[(struct _Rb_tree_impl *)this_3(D)]._M_header._M_left = _16;
  MEM[(struct _Rb_tree_impl *)this_3(D)]._M_header._M_right = _16;
  MEM[(struct _Rb_tree_impl *)this_3(D)]._M_node_count = 0;
  _23 = MEM[(struct _Rb_tree_node_base * *)__x_4(D) + 16B];
  # DEBUG D#95 => __x_4(D)
  # DEBUG this => D#95
  if (_23 != 0B)
    goto <bb 8>;
  else
    goto <bb 16>;

  <bb 8>:
  # DEBUG this => this_3(D)
  # DEBUG this => this_3(D)
  # DEBUG D#90 => __x_4(D)
  # DEBUG this => D#90
  __x_10 = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_copy<std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_Reuse_or_alloc_node> (this_3(D), _23, _16, &__roan);

  <bb 9>:
  MEM[(struct _Rb_tree_node_base * &)this_3(D) + 16] = __x_10;
  # DEBUG this => this_3(D)
  # DEBUG this => this_3(D)
  # DEBUG __x => __x_10

  <bb 10>:
  # __x_24 = PHI <__x_10(9), __x_25(11)>
  # DEBUG __x => __x_24
  __x_25 = __x_24->_M_left;
  if (__x_25 == 0B)
    goto <bb 12>;
  else
    goto <bb 11>;

  <bb 11>:
  goto <bb 10>;

  <bb 12>:
  # __x_50 = PHI <__x_24(10)>

  <bb 20>:
  MEM[(struct _Rb_tree_node_base * &)this_3(D) + 24] = __x_50;
  # DEBUG this => this_3(D)
  # DEBUG this => this_3(D)
  # DEBUG __x => __x_10

  <bb 13>:
  # __x_8 = PHI <__x_10(20), __x_7(14)>
  # DEBUG __x => __x_8
  __x_7 = __x_8->_M_right;
  if (__x_7 == 0B)
    goto <bb 15>;
  else
    goto <bb 14>;

  <bb 14>:
  goto <bb 13>;

  <bb 15>:
  # __x_51 = PHI <__x_8(13)>

  <bb 19>:
  MEM[(struct _Rb_tree_node_base * &)this_3(D) + 32] = __x_51;
  _18 = __x_4(D)->_M_impl._M_node_count;
  this_3(D)->_M_impl._M_node_count = _18;
  pretmp_40 = __roan._M_root;
  pretmp_43 = __roan._M_t;

  <bb 16>:
  # prephitmp_42 = PHI <_6(7), pretmp_40(19)>
  # prephitmp_12 = PHI <this_3(D)(7), pretmp_43(19)>
  # DEBUG this => &__roan
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (prephitmp_12, prephitmp_42);
  __roan ={v} {CLOBBER};

  <bb 17>:

  <bb 21>:
  return this_3(D);

<L7>:
  # DEBUG this => &__roan
  _21 = __roan._M_root;
  _28 = __roan._M_t;
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (_28, _21);
  resx 2

}



;; Function void std::vector<_Tp, _Alloc>::_M_fill_insert(std::vector<_Tp, _Alloc>::iterator, std::vector<_Tp, _Alloc>::size_type, const value_type&) [with _Tp = std::map<int, int>; _Alloc = std::allocator<std::map<int, int> >; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<std::map<int, int>*, std::vector<std::map<int, int> > >; typename std::_Vector_base<_Tp, _Alloc>::pointer = std::map<int, int>*; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::value_type = std::map<int, int>] (_ZNSt6vectorISt3mapIiiSt4lessIiESaISt4pairIKiiEEESaIS7_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS7_S9_EEmRKS7_, funcdef_no=3091, decl_uid=47351, cgraph_uid=1213, symbol_order=1215)

Trying loop 2 as candidate
loop 2 is innermost
loop is not parallel according to graphite
Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
Trying loop 9 as candidate
loop 9 is innermost
loop is not parallel according to graphite
Trying loop 10 as candidate
loop 10 is not innermost
loop is not parallel according to graphite
Trying loop 11 as candidate
loop 11 is innermost
loop is not parallel according to graphite
Trying loop 12 as candidate
loop 12 is innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is innermost
loop is not parallel according to graphite
Trying loop 17 as candidate
loop 17 is innermost
loop is not parallel according to graphite
Trying loop 18 as candidate
loop 18 is not innermost
loop is not parallel according to graphite
Trying loop 19 as candidate
loop 19 is innermost
loop is not parallel according to graphite
Trying loop 20 as candidate
loop 20 is innermost
loop is not parallel according to graphite
Trying loop 13 as candidate
loop 13 is innermost
loop is not parallel according to graphite
Trying loop 14 as candidate
loop 14 is not innermost
loop is not parallel according to graphite
Trying loop 15 as candidate
loop 15 is innermost
loop is not parallel according to graphite
Trying loop 16 as candidate
loop 16 is innermost
loop is not parallel according to graphite
Trying loop 7 as candidate
loop 7 is innermost
loop is not parallel according to graphite
Trying loop 8 as candidate
loop 8 is innermost
loop is not parallel according to graphite
Trying loop 4 as candidate
loop 4 is innermost
loop is not parallel according to graphite
Trying loop 5 as candidate
loop 5 is innermost
loop is not parallel according to graphite
Trying loop 6 as candidate
loop 6 is innermost
loop is not parallel according to graphite
Trying loop 29 as candidate
loop 29 is innermost
loop is not parallel according to graphite
Trying loop 30 as candidate
loop 30 is not innermost
loop is not parallel according to graphite
Trying loop 31 as candidate
loop 31 is innermost
loop is not parallel according to graphite
Trying loop 32 as candidate
loop 32 is innermost
loop is not parallel according to graphite
Trying loop 25 as candidate
loop 25 is innermost
loop is not parallel according to graphite
Trying loop 26 as candidate
loop 26 is not innermost
loop is not parallel according to graphite
Trying loop 27 as candidate
loop 27 is innermost
loop is not parallel according to graphite
Trying loop 28 as candidate
loop 28 is innermost
loop is not parallel according to graphite
Trying loop 21 as candidate
loop 21 is innermost
loop is not parallel according to graphite
Trying loop 22 as candidate
loop 22 is not innermost
loop is not parallel according to graphite
Trying loop 23 as candidate
loop 23 is innermost
loop is not parallel according to graphite
Trying loop 24 as candidate
loop 24 is innermost
loop is not parallel according to graphite
void std::vector<_Tp, _Alloc>::_M_fill_insert(std::vector<_Tp, _Alloc>::iterator, std::vector<_Tp, _Alloc>::size_type, const value_type&) [with _Tp = std::map<int, int>; _Alloc = std::allocator<std::map<int, int> >; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<std::map<int, int>*, std::vector<std::map<int, int> > >; typename std::_Vector_base<_Tp, _Alloc>::pointer = std::map<int, int>*; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp, _Alloc>::value_type = std::map<int, int>] (struct vector * const this, struct iterator __position, size_type __n, const struct value_type & __x)
{
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct map * D.92251;
  struct map * __first;
  struct map * __result;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct map * D.92210;
  struct map * __first;
  struct map * __result;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  const long unsigned int D.92172;
  const size_type __len;
  size_type D.92171;
  size_type __n;
  struct map * D.92162;
  struct map * D.92150;
  struct map * __first;
  long unsigned int __n;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct map * D.92109;
  struct map * __first;
  struct map * __result;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct map * D.92068;
  struct map * __first;
  long unsigned int __n;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct map * D.92027;
  struct map * __first;
  struct map * __result;
  struct _Alloc_node __an;
  struct _Rb_tree_node_base * __x;
  struct _Rb_tree_node_base * __x;
  struct map * const __position;
  struct map * __first;
  struct map * __first;
  struct map * __first;
  struct map * __first;
  difference_type __n;
  struct map * __last;
  struct map * __new_finish;
  const size_type __elems_before;
  struct map * __old_finish;
  const size_type __elems_after;
  struct value_type __x_copy;
  struct map * _10;
  long int _11;
  struct map * _12;
  long int _13;
  long int _14;
  long int _15;
  long unsigned int _16;
  struct _Rb_tree_node_base * _17;
  long int __last.172_21;
  struct map * const _24;
  long unsigned int _25;
  long unsigned int _27;
  difference_type _30;
  long int _31;
  long unsigned int _33;
  long int _35;
  struct map * _36;
  struct map * _45;
  void * _47;
  sizetype _49;
  sizetype _50;
  struct map * _51;
  const struct _Rep_type * _56;
  long unsigned int _59;
  sizetype _60;
  struct map * _63;
  struct map * _67;
  long int _73;
  struct map * _74;
  long unsigned int _75;
  struct map * _76;
  struct _Rep_type * _80;
  struct _Rep_type * _83;
  struct _Rep_type * _87;
  struct _Rb_tree_node_base * _89;
  bool _95;
  struct _Rep_type * _96;
  struct _Rb_tree_node_base * _97;
  struct _Rb_tree_node_base * _99;
  struct _Rep_type * _100;
  struct _Rb_tree_node_base * _101;
  struct _Rep_type * _104;
  struct _Rb_tree_node_base * _105;
  struct _Rb_tree_node_base * _115;
  struct _Rb_tree_node_base * _116;
  long unsigned int prephitmp_128;
  struct _Rb_tree_node_base * _138;
  struct _Rb_tree_node_base * _141;
  struct _Rb_tree_node_base * _142;
  struct map * const prephitmp_151;
  long int pretmp_152;
  long int prephitmp_153;
  struct _Rb_tree_node_base * const _157;
  long unsigned int _164;
  long unsigned int _166;
  struct _Rep_type * _167;
  void * _170;
  struct _Rep_type * _172;
  struct _Rb_tree_node_base * _173;
  struct _Rb_tree_node_base * const _175;
  long unsigned int _182;
  struct _Rep_type * _186;
  void * _189;
  void * _190;
  struct _Rep_type * _191;
  struct _Rb_tree_node_base * _192;
  struct _Rb_tree_node_base * const _194;
  long unsigned int _201;
  bool _204;
  struct _Rep_type * _205;
  void * _208;
  struct _Rep_type * _210;
  struct _Rb_tree_node_base * _211;
  struct _Rb_tree_node_base * const _213;
  long unsigned int _220;
  struct _Rep_type * _224;
  void * _227;
  struct _Rep_type * _229;
  struct _Rb_tree_node_base * _230;
  struct map * _232;
  long int _236;
  long int _237;
  long int _238;
  long unsigned int _240;
  struct _Rb_tree_node_base * const _246;
  long unsigned int _253;
  struct _Rep_type * _257;
  void * _260;
  struct _Rep_type * _262;
  struct _Rb_tree_node_base * _263;
  struct _Rb_tree_node_base * const _265;
  long unsigned int _272;
  struct _Rep_type * _276;
  void * _279;
  struct _Rep_type * _281;
  struct _Rb_tree_node_base * _282;
  struct _Rb_tree_node_base * const _284;
  long unsigned int _291;
  void * _296;
  struct map * _299;
  struct map * prephitmp_345;
  struct map * pretmp_362;
  struct map * pretmp_370;
  struct map * prephitmp_383;
  struct map * pretmp_385;
  struct map * prephitmp_386;
  long unsigned int pretmp_423;
  long unsigned int prephitmp_424;
  struct map * const pretmp_425;
  long int _487;
  long int _488;
  difference_type _489;
  difference_type _492;
  long int _496;
  long int _497;
  bool _540;
  long int _572;
  long int _573;

  <bb 2>:
  # DEBUG D#1372 => MEM[(struct __normal_iterator *)&__position]
  # DEBUG __position => D#1372
  if (__n_7(D) != 0)
    goto <bb 3>;
  else
    goto <bb 177>;

  <bb 3>:
  __position_23 = MEM[(struct __normal_iterator *)&__position];
  _10 = this_9(D)->D.47428._M_impl._M_end_of_storage;
  _11 = (long int) _10;
  _12 = this_9(D)->D.47428._M_impl._M_finish;
  _13 = (long int) _12;
  _14 = _11 - _13;
  _15 = _14 /[ex] 48;
  _16 = (long unsigned int) _15;
  if (__n_7(D) <= _16)
    goto <bb 4>;
  else
    goto <bb 100>;

  <bb 4>:
  # DEBUG this => &__x_copy
  # DEBUG __x => __x_29(D)
  # DEBUG D#1366 => &MEM[(const struct map &)__x_29(D)]._M_t
  # DEBUG this => &__x_copy._M_t
  # DEBUG __x => D#1366
  # DEBUG this => D#1366
  # DEBUG __a => NULL
  # DEBUG D#949 => &MEM[(const struct _Rb_tree &)D#1366]._M_impl._M_key_compare
  # DEBUG D#948 => &MEM[(struct _Rb_tree *)&__x_copy]._M_impl
  # DEBUG this => D#948
  # DEBUG __comp => D#949
  # DEBUG __a => NULL
  # DEBUG this => D#948
  # DEBUG __a => NULL
  # DEBUG this => D#948
  # DEBUG D.74137 => NULL
  MEM[(struct _Rb_tree_impl *)&__x_copy]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&__x_copy]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&__x_copy]._M_node_count = 0;
  # DEBUG this => D#948
  MEM[(struct _Rb_tree_impl *)&__x_copy]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&__x_copy]._M_header;
  MEM[(struct _Rb_tree_impl *)&__x_copy]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&__x_copy]._M_header;
  _157 = MEM[(struct _Rb_tree_node_base * *)__x_29(D) + 16B];
  # DEBUG D#95 => D#1366
  # DEBUG this => D#95
  if (_157 != 0B)
    goto <bb 5>;
  else
    goto <bb 12>;

  <bb 5>:
  # DEBUG this => &__x_copy._M_t
  # DEBUG this => &__x_copy._M_t
  # DEBUG D#90 => D#1366
  # DEBUG this => D#90
  # DEBUG this => &__x_copy._M_t
  # DEBUG __x => NULL
  # DEBUG __p => NULL
  # DEBUG this => &__an
  # DEBUG __t => &__x_copy._M_t
  __an._M_t = &__x_copy._M_t;
  __x_159 = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_copy<std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_Alloc_node> (&__x_copy._M_t, _157, &MEM[(struct _Rb_tree *)&__x_copy]._M_impl._M_header, &__an);
  __an ={v} {CLOBBER};
  MEM[(struct _Rb_tree_node_base * &)&__x_copy + 16] = __x_159;
  # DEBUG this => &__x_copy._M_t
  # DEBUG this => &__x_copy._M_t
  # DEBUG __x => __x_159

  <bb 6>:
  # __x_160 = PHI <__x_159(5), __x_161(7)>
  # DEBUG __x => __x_160
  __x_161 = __x_160->_M_left;
  if (__x_161 == 0B)
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 7>:
  goto <bb 6>;

  <bb 8>:
  # __x_62 = PHI <__x_160(6)>
  MEM[(struct _Rb_tree_node_base * &)&__x_copy + 24] = __x_62;
  # DEBUG this => &__x_copy._M_t
  # DEBUG this => &__x_copy._M_t
  # DEBUG __x => __x_159

  <bb 9>:
  # __x_162 = PHI <__x_159(8), __x_163(10)>
  # DEBUG __x => __x_162
  __x_163 = __x_162->_M_right;
  if (__x_163 == 0B)
    goto <bb 11>;
  else
    goto <bb 10>;

  <bb 10>:
  goto <bb 9>;

  <bb 11>:
  # __x_94 = PHI <__x_162(9)>
  MEM[(struct _Rb_tree_node_base * &)&__x_copy + 32] = __x_94;
  _164 = MEM[(const struct _Rb_tree &)__x_29(D)]._M_impl._M_node_count;
  MEM[(struct _Rb_tree *)&__x_copy]._M_impl._M_node_count = _164;
  pretmp_425 = MEM[(struct map * const &)this_9(D) + 8];
  pretmp_152 = (long int) pretmp_425;

  <bb 12>:
  # prephitmp_151 = PHI <pretmp_425(11), _12(4)>
  # prephitmp_153 = PHI <pretmp_152(11), _13(4)>
  # DEBUG this => this_9(D)
  # DEBUG D#96 => &this_9(D)->D.47428._M_impl._M_finish
  # DEBUG this => NULL
  # DEBUG __i => D#96
  # DEBUG D#1369 => MEM[(struct map * const &)this_9(D) + 8]
  # DEBUG __lhs => &D.62551
  # DEBUG __rhs => &__position
  # DEBUG this => &D.62551
  # DEBUG this => &__position
  _35 = (long int) __position_23;
  _31 = prephitmp_153 - _35;
  _30 = _31 /[ex] 48;
  __elems_after_57 = (const size_type) _30;
  # DEBUG __elems_after => __elems_after_57
  # DEBUG __old_finish => D#1369
  if (__n_7(D) < __elems_after_57)
    goto <bb 13>;
  else
    goto <bb 48>;

  <bb 13>:
  # DEBUG D#965 => &this_9(D)->D.47428
  # DEBUG this => D#965
  _59 = __n_7(D) * 48;
  _60 = -_59;
  __last_61 = prephitmp_151 + _60;
  # DEBUG __first => __last_61
  # DEBUG __last => D#1369
  # DEBUG __result => D#1369
  # DEBUG __alloc => D#952
  # DEBUG D#951 => D#952
  # DEBUG D#950 => D#951
  # DEBUG __first => __last_61
  # DEBUG __last => D#1369
  # DEBUG __result => D#1369
  # DEBUG D.84477 => D#950
  # DEBUG __first => __last_61
  # DEBUG __last => D#1369
  # DEBUG __result => D#1369
  # DEBUG __assignable => 1
  # DEBUG __first => __last_61
  # DEBUG __last => D#1369
  # DEBUG __result => D#1369
  # DEBUG __cur => D#1369
  # DEBUG __cur => D#1369
  # DEBUG __first => __last_61
  if (__last_61 == prephitmp_151)
    goto <bb 29>;
  else
    goto <bb 14>;

  <bb 14>:

  <bb 15>:
  # __last_548 = PHI <__last_61(14), __last_168(27)>
  # __old_finish_549 = PHI <prephitmp_151(14), __old_finish_169(27)>
  # DEBUG __cur => __old_finish_549
  # DEBUG __first => __last_548
  # DEBUG __r => __old_finish_549
  # DEBUG __p => NULL
  # DEBUG __value => __last_548
  # DEBUG D#20 => 48
  # DEBUG __p => NULL
  # DEBUG D.84140 => D#20
  if (__old_finish_549 != 0B)
    goto <bb 17>;
  else
    goto <bb 16>;

  <bb 16>:
  goto <bb 26>;

  <bb 17>:
  # DEBUG this => NULL
  # DEBUG __x => __last_548
  # DEBUG D#1367 => &MEM[(const struct map &)__last_548]._M_t
  _167 = &__old_finish_549->_M_t;
  # DEBUG this => _167
  # DEBUG __x => D#1367
  # DEBUG this => D#1367
  # DEBUG __a => NULL
  # DEBUG D#949 => &MEM[(const struct _Rb_tree &)D#1367]._M_impl._M_key_compare
  # DEBUG D#948 => &MEM[(struct _Rb_tree *)_167]._M_impl
  # DEBUG this => D#948
  # DEBUG __comp => D#949
  # DEBUG __a => NULL
  # DEBUG this => D#948
  # DEBUG __a => NULL
  # DEBUG this => D#948
  # DEBUG D.74137 => NULL
  MEM[(struct _Rb_tree_impl *)__old_finish_549]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)__old_finish_549]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)__old_finish_549]._M_node_count = 0;
  # DEBUG this => D#948
  _138 = &MEM[(struct _Rb_tree_impl *)__old_finish_549]._M_header;
  MEM[(struct _Rb_tree_impl *)__old_finish_549]._M_header._M_left = _138;
  MEM[(struct _Rb_tree_impl *)__old_finish_549]._M_header._M_right = _138;
  _175 = MEM[(struct _Rb_tree_node_base * *)__last_548 + 16B];
  # DEBUG D#95 => D#1367
  # DEBUG this => D#95
  if (_175 != 0B)
    goto <bb 18>;
  else
    goto <bb 16>;

  <bb 18>:
  # DEBUG this => _167
  # DEBUG this => _167
  # DEBUG D#90 => D#1367
  # DEBUG this => D#90
  # DEBUG this => _167
  # DEBUG __x => NULL
  # DEBUG __p => NULL
  # DEBUG this => &__an
  # DEBUG __t => _167
  __an._M_t = _167;
  __x_177 = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_copy<std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_Alloc_node> (_167, _175, _138, &__an);

  <bb 19>:
  __an ={v} {CLOBBER};
  MEM[(struct _Rb_tree_node_base * &)__old_finish_549 + 16] = __x_177;
  # DEBUG this => _167
  # DEBUG this => _167
  # DEBUG __x => __x_177

  <bb 20>:
  # __x_178 = PHI <__x_177(19), __x_179(21)>
  # DEBUG __x => __x_178
  __x_179 = __x_178->_M_left;
  if (__x_179 == 0B)
    goto <bb 22>;
  else
    goto <bb 21>;

  <bb 21>:
  goto <bb 20>;

  <bb 22>:
  # __x_433 = PHI <__x_178(20)>
  MEM[(struct _Rb_tree_node_base * &)__old_finish_549 + 24] = __x_433;
  # DEBUG this => _167
  # DEBUG this => _167
  # DEBUG __x => __x_177

  <bb 23>:
  # __x_180 = PHI <__x_177(22), __x_181(24)>
  # DEBUG __x => __x_180
  __x_181 = __x_180->_M_right;
  if (__x_181 == 0B)
    goto <bb 25>;
  else
    goto <bb 24>;

  <bb 24>:
  goto <bb 23>;

  <bb 25>:
  # __x_408 = PHI <__x_180(23)>
  MEM[(struct _Rb_tree_node_base * &)__old_finish_549 + 32] = __x_408;
  _182 = MEM[(const struct _Rb_tree &)__last_548]._M_impl._M_node_count;
  MEM[(struct _Rb_tree *)__old_finish_549]._M_impl._M_node_count = _182;

  <bb 26>:
  __last_168 = __last_548 + 48;
  # DEBUG __first => __last_168
  __old_finish_169 = __old_finish_549 + 48;
  # DEBUG __cur => __old_finish_169
  # DEBUG __cur => __old_finish_169
  # DEBUG __first => __last_168
  if (prephitmp_151 == __last_168)
    goto <bb 28>;
  else
    goto <bb 27>;

  <bb 27>:
  goto <bb 15>;

  <bb 28>:
  pretmp_370 = this_9(D)->D.47428._M_impl._M_finish;

  <bb 29>:
  # prephitmp_345 = PHI <pretmp_370(28), prephitmp_151(13)>
  _63 = prephitmp_345 + _59;
  this_9(D)->D.47428._M_impl._M_finish = _63;
  # DEBUG this => &__position
  # DEBUG __first => D#1372
  # DEBUG __last => __last_61
  # DEBUG __result => D#1369
  # DEBUG __it => __last_61
  # DEBUG __it => __last_61
  # DEBUG __it => D#1372
  # DEBUG __it => D#1372
  # DEBUG __first => D#1372
  # DEBUG __last => __last_61
  # DEBUG __result => D#1369
  # DEBUG __it => D#1369
  # DEBUG __it => D#1369
  # DEBUG __it => __last_61
  # DEBUG __it => __last_61
  # DEBUG __it => D#1372
  # DEBUG __it => D#1372
  # DEBUG __first => D#1372
  # DEBUG __last => __last_61
  # DEBUG __result => D#1369
  # DEBUG __simple => 0
  # DEBUG __first => D#1372
  # DEBUG __last => __last_61
  # DEBUG __result => D#1369
  __last.172_21 = (long int) __last_61;
  _73 = __last.172_21 - _35;
  __n_72 = _73 /[ex] 48;
  # DEBUG __n => __n_72
  # DEBUG __n => __n_72
  # DEBUG __result => D#1369
  # DEBUG __last => __last_61
  if (__n_72 <= 0)
    goto <bb 30>;
  else
    goto <bb 37>;

  <bb 30>:
  # DEBUG this => &__position
  _67 = __position_23 + _59;
  # DEBUG this => &__position
  # DEBUG __first => D#1372
  # DEBUG __last => _67
  # DEBUG __value => &__x_copy
  # DEBUG __first => D#1372
  if (__position_23 == _67)
    goto <bb 42>;
  else
    goto <bb 43>;

  # __old_finish_560 = PHI <__old_finish_549(18)>
<L19>:
  _170 = __builtin_eh_pointer (14);
  __cxa_begin_catch (_170);
  # DEBUG __first => D#1369
  # DEBUG __last => __old_finish_560
  # DEBUG __first => D#1369
  # DEBUG __last => __old_finish_560
  # DEBUG __first => D#1369
  if (prephitmp_151 == __old_finish_560)
    goto <bb 32>;
  else
    goto <bb 33>;

  <bb 32>:
  __cxa_rethrow ();

  <bb 33>:

  <bb 34>:
  # __old_finish_543 = PHI <prephitmp_151(33), __old_finish_174(35)>
  # DEBUG __first => __old_finish_543
  # DEBUG __r => __old_finish_543
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _172 = &__old_finish_543->_M_t;
  # DEBUG this => _172
  _173 = MEM[(struct _Rb_tree_node_base * *)__old_finish_543 + 16B];
  # DEBUG D#41 => _172
  # DEBUG this => D#41
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (_172, _173);
  # DEBUG D#464 => &MEM[(struct _Rb_tree *)_172]._M_impl
  # DEBUG this => D#464
  # DEBUG this => D#464
  # DEBUG this => D#464
  MEM[(struct  &)__old_finish_543] ={v} {CLOBBER};
  __old_finish_174 = __old_finish_543 + 48;
  # DEBUG __first => __old_finish_174
  # DEBUG __first => __old_finish_174
  if (__old_finish_174 == __old_finish_560)
    goto <bb 32>;
  else
    goto <bb 35>;

  <bb 35>:
  goto <bb 34>;

<L21>:
  __cxa_end_catch ();
  resx 13

  <bb 37>:

  <bb 38>:
  # __old_finish_556 = PHI <prephitmp_151(37), __old_finish_58(41)>
  # __last_538 = PHI <__last_61(37), __last_66(41)>
  # __n_539 = PHI <__n_72(37), __n_81(41)>
  # DEBUG __n => __n_539
  # DEBUG __result => __old_finish_556
  # DEBUG __last => __last_538
  __last_66 = __last_538 + 18446744073709551568;
  # DEBUG __last => __last_66
  __old_finish_58 = __old_finish_556 + 18446744073709551568;
  # DEBUG __result => __old_finish_58
  # DEBUG this => __old_finish_58
  # DEBUG __x => __last_66
  _56 = &MEM[(const struct map &)__last_66]._M_t;
  _80 = &__old_finish_58->_M_t;
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::operator= (_80, _56);
  goto <bb 40>;

<L40>:
  goto <bb 179> (<L10>);

  <bb 40>:
  __n_81 = __n_539 + -1;
  # DEBUG __n => __n_81
  # DEBUG __n => __n_81
  # DEBUG __result => __old_finish_58
  # DEBUG __last => __last_66
  if (__n_81 <= 0)
    goto <bb 30>;
  else
    goto <bb 41>;

  <bb 41>:
  goto <bb 38>;

  <bb 42>:
  goto <bb 99>;

  <bb 43>:

  <bb 44>:
  # __position_553 = PHI <__position_23(43), __position_84(47)>
  # DEBUG __first => __position_553
  # DEBUG this => __position_553
  # DEBUG __x => &__x_copy
  _83 = &__position_553->_M_t;
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::operator= (_83, &__x_copy._M_t);
  goto <bb 46>;

<L41>:
  goto <bb 179> (<L10>);

  <bb 46>:
  __position_84 = __position_553 + 48;
  # DEBUG __first => __position_84
  # DEBUG __first => __position_84
  if (_67 == __position_84)
    goto <bb 42>;
  else
    goto <bb 47>;

  <bb 47>:
  goto <bb 44>;

  <bb 48>:
  # DEBUG D#966 => &this_9(D)->D.47428
  # DEBUG this => D#966
  __n_70 = __n_7(D) - __elems_after_57;
  # DEBUG __first => D#1369
  # DEBUG __n => __n_70
  # DEBUG __x => &__x_copy
  # DEBUG D.84527 => D#955
  # DEBUG __first => D#1369
  # DEBUG __n => __n_70
  # DEBUG __x => &__x_copy
  # DEBUG __assignable => 1
  # DEBUG __first => D#1369
  # DEBUG __n => __n_70
  # DEBUG __x => &__x_copy
  # DEBUG __cur => D#1369
  # DEBUG __cur => D#1369
  # DEBUG __n => __n_70
  if (__n_70 == 0)
    goto <bb 64>;
  else
    goto <bb 49>;

  <bb 49>:

  <bb 50>:
  # __n_544 = PHI <__n_70(49), __n_187(63)>
  # __old_finish_546 = PHI <prephitmp_151(49), __old_finish_188(63)>
  # DEBUG __cur => __old_finish_546
  # DEBUG __n => __n_544
  # DEBUG __r => __old_finish_546
  # DEBUG __p => NULL
  # DEBUG __value => &__x_copy
  # DEBUG D#20 => 48
  # DEBUG __p => NULL
  # DEBUG D.84140 => D#20
  if (__old_finish_546 != 0B)
    goto <bb 52>;
  else
    goto <bb 51>;

  <bb 51>:
  goto <bb 61>;

  <bb 52>:
  # DEBUG this => NULL
  # DEBUG __x => &__x_copy
  _186 = &__old_finish_546->_M_t;
  # DEBUG this => _186
  # DEBUG __x => &__x_copy._M_t
  # DEBUG this => &__x_copy._M_t
  # DEBUG __a => NULL
  # DEBUG D#949 => &MEM[(const struct _Rb_tree &)&__x_copy]._M_impl._M_key_compare
  # DEBUG D#948 => &MEM[(struct _Rb_tree *)_186]._M_impl
  # DEBUG this => D#948
  # DEBUG __comp => D#949
  # DEBUG __a => NULL
  # DEBUG this => D#948
  # DEBUG __a => NULL
  # DEBUG this => D#948
  # DEBUG D.74137 => NULL
  MEM[(struct _Rb_tree_impl *)__old_finish_546]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)__old_finish_546]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)__old_finish_546]._M_node_count = 0;
  # DEBUG this => D#948
  _141 = &MEM[(struct _Rb_tree_impl *)__old_finish_546]._M_header;
  MEM[(struct _Rb_tree_impl *)__old_finish_546]._M_header._M_left = _141;
  MEM[(struct _Rb_tree_impl *)__old_finish_546]._M_header._M_right = _141;
  _194 = MEM[(struct _Rb_tree_node_base * *)&__x_copy + 16B];
  # DEBUG D#95 => &__x_copy._M_t
  # DEBUG this => D#95
  if (_194 != 0B)
    goto <bb 53>;
  else
    goto <bb 51>;

  <bb 53>:
  # DEBUG this => _186
  # DEBUG this => _186
  # DEBUG D#90 => &__x_copy._M_t
  # DEBUG this => D#90
  # DEBUG this => _186
  # DEBUG __x => NULL
  # DEBUG __p => NULL
  # DEBUG this => &__an
  # DEBUG __t => _186
  __an._M_t = _186;
  __x_196 = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_copy<std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_Alloc_node> (_186, _194, _141, &__an);

  <bb 54>:
  __an ={v} {CLOBBER};
  MEM[(struct _Rb_tree_node_base * &)__old_finish_546 + 16] = __x_196;
  # DEBUG this => _186
  # DEBUG this => _186
  # DEBUG __x => __x_196

  <bb 55>:
  # __x_197 = PHI <__x_196(54), __x_198(56)>
  # DEBUG __x => __x_197
  __x_198 = __x_197->_M_left;
  if (__x_198 == 0B)
    goto <bb 57>;
  else
    goto <bb 56>;

  <bb 56>:
  goto <bb 55>;

  <bb 57>:
  # __x_394 = PHI <__x_197(55)>
  MEM[(struct _Rb_tree_node_base * &)__old_finish_546 + 24] = __x_394;
  # DEBUG this => _186
  # DEBUG this => _186
  # DEBUG __x => __x_196

  <bb 58>:
  # __x_199 = PHI <__x_196(57), __x_200(59)>
  # DEBUG __x => __x_199
  __x_200 = __x_199->_M_right;
  if (__x_200 == 0B)
    goto <bb 60>;
  else
    goto <bb 59>;

  <bb 59>:
  goto <bb 58>;

  <bb 60>:
  # __x_395 = PHI <__x_199(58)>
  MEM[(struct _Rb_tree_node_base * &)__old_finish_546 + 32] = __x_395;
  _201 = MEM[(const struct _Rb_tree &)&__x_copy]._M_impl._M_node_count;
  MEM[(struct _Rb_tree *)__old_finish_546]._M_impl._M_node_count = _201;

  <bb 61>:
  __n_187 = __n_544 + 18446744073709551615;
  # DEBUG __n => __n_187
  __old_finish_188 = __old_finish_546 + 48;
  # DEBUG __cur => __old_finish_188
  # DEBUG __cur => __old_finish_188
  # DEBUG __n => __n_187
  if (__n_187 == 0)
    goto <bb 62>;
  else
    goto <bb 63>;

  <bb 62>:
  # __old_finish_409 = PHI <__old_finish_188(61)>
  goto <bb 64>;

  <bb 63>:
  goto <bb 50>;

  <bb 64>:
  # __old_finish_545 = PHI <__old_finish_409(62), prephitmp_151(48)>
  this_9(D)->D.47428._M_impl._M_finish = __old_finish_545;
  # DEBUG D#967 => &this_9(D)->D.47428
  # DEBUG this => D#967
  # DEBUG this => &__position
  # DEBUG __first => D#1372
  # DEBUG __last => D#1369
  # DEBUG __result => NULL
  # DEBUG __alloc => D#952
  # DEBUG D#951 => D#952
  # DEBUG D#950 => D#951
  # DEBUG __first => D#1372
  # DEBUG __last => D#1369
  # DEBUG __result => NULL
  # DEBUG D.84540 => D#950
  # DEBUG __first => D#1372
  # DEBUG __last => D#1369
  # DEBUG __result => NULL
  # DEBUG __assignable => 1
  # DEBUG __first => D#1372
  # DEBUG __last => D#1369
  # DEBUG __result => __old_finish_545
  # DEBUG __cur => __old_finish_545
  # DEBUG __first => D#1372
  if (__position_23 == prephitmp_151)
    goto <bb 196>;
  else
    goto <bb 72>;

  # __old_finish_273 = PHI <__old_finish_546(53)>
<L22>:
  _189 = __builtin_eh_pointer (17);
  __cxa_begin_catch (_189);
  # DEBUG __first => D#1369
  # DEBUG __last => __old_finish_273
  # DEBUG __first => D#1369
  # DEBUG __last => __old_finish_273
  # DEBUG __first => D#1369
  if (prephitmp_151 == __old_finish_273)
    goto <bb 66>;
  else
    goto <bb 67>;

  <bb 66>:
  __cxa_rethrow ();

  <bb 67>:

  <bb 68>:
  # __old_finish_541 = PHI <prephitmp_151(67), __old_finish_193(69)>
  # DEBUG __first => __old_finish_541
  # DEBUG __r => __old_finish_541
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _191 = &__old_finish_541->_M_t;
  # DEBUG this => _191
  _192 = MEM[(struct _Rb_tree_node_base * *)__old_finish_541 + 16B];
  # DEBUG D#41 => _191
  # DEBUG this => D#41
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (_191, _192);
  # DEBUG D#464 => &MEM[(struct _Rb_tree *)_191]._M_impl
  # DEBUG this => D#464
  # DEBUG this => D#464
  # DEBUG this => D#464
  MEM[(struct  &)__old_finish_541] ={v} {CLOBBER};
  __old_finish_193 = __old_finish_541 + 48;
  # DEBUG __first => __old_finish_193
  # DEBUG __first => __old_finish_193
  if (__old_finish_193 == __old_finish_273)
    goto <bb 66>;
  else
    goto <bb 69>;

  <bb 69>:
  goto <bb 68>;

<L24>:
  __cxa_end_catch ();
  resx 16

<L42>:
  goto <bb 179> (<L10>);

  <bb 72>:

  <bb 73>:
  # __position_453 = PHI <__position_23(72), __position_206(85)>
  # __old_finish_542 = PHI <__old_finish_545(72), __old_finish_207(85)>
  # DEBUG __cur => __old_finish_542
  # DEBUG __first => __position_453
  # DEBUG __r => __old_finish_542
  # DEBUG __p => NULL
  # DEBUG __value => __position_453
  # DEBUG D#20 => 48
  # DEBUG __p => NULL
  # DEBUG D.84140 => D#20
  if (__old_finish_542 != 0B)
    goto <bb 75>;
  else
    goto <bb 74>;

  <bb 74>:
  goto <bb 84>;

  <bb 75>:
  # DEBUG this => NULL
  # DEBUG __x => __position_453
  # DEBUG D#1368 => &MEM[(const struct map &)__position_453]._M_t
  _205 = &__old_finish_542->_M_t;
  # DEBUG this => _205
  # DEBUG __x => D#1368
  # DEBUG this => D#1368
  # DEBUG __a => NULL
  # DEBUG D#949 => &MEM[(const struct _Rb_tree &)D#1368]._M_impl._M_key_compare
  # DEBUG D#948 => &MEM[(struct _Rb_tree *)_205]._M_impl
  # DEBUG this => D#948
  # DEBUG __comp => D#949
  # DEBUG __a => NULL
  # DEBUG this => D#948
  # DEBUG __a => NULL
  # DEBUG this => D#948
  # DEBUG D.74137 => NULL
  MEM[(struct _Rb_tree_impl *)__old_finish_542]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)__old_finish_542]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)__old_finish_542]._M_node_count = 0;
  # DEBUG this => D#948
  _142 = &MEM[(struct _Rb_tree_impl *)__old_finish_542]._M_header;
  MEM[(struct _Rb_tree_impl *)__old_finish_542]._M_header._M_left = _142;
  MEM[(struct _Rb_tree_impl *)__old_finish_542]._M_header._M_right = _142;
  _213 = MEM[(struct _Rb_tree_node_base * *)__position_453 + 16B];
  # DEBUG D#95 => D#1368
  # DEBUG this => D#95
  if (_213 != 0B)
    goto <bb 76>;
  else
    goto <bb 74>;

  <bb 76>:
  # DEBUG this => _205
  # DEBUG this => _205
  # DEBUG D#90 => D#1368
  # DEBUG this => D#90
  # DEBUG this => _205
  # DEBUG __x => NULL
  # DEBUG __p => NULL
  # DEBUG this => &__an
  # DEBUG __t => _205
  __an._M_t = _205;
  __x_215 = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_copy<std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_Alloc_node> (_205, _213, _142, &__an);

  <bb 77>:
  __an ={v} {CLOBBER};
  MEM[(struct _Rb_tree_node_base * &)__old_finish_542 + 16] = __x_215;
  # DEBUG this => _205
  # DEBUG this => _205
  # DEBUG __x => __x_215

  <bb 78>:
  # __x_216 = PHI <__x_215(77), __x_217(79)>
  # DEBUG __x => __x_216
  __x_217 = __x_216->_M_left;
  if (__x_217 == 0B)
    goto <bb 80>;
  else
    goto <bb 79>;

  <bb 79>:
  goto <bb 78>;

  <bb 80>:
  # __x_575 = PHI <__x_216(78)>
  MEM[(struct _Rb_tree_node_base * &)__old_finish_542 + 24] = __x_575;
  # DEBUG this => _205
  # DEBUG this => _205
  # DEBUG __x => __x_215

  <bb 81>:
  # __x_218 = PHI <__x_215(80), __x_219(82)>
  # DEBUG __x => __x_218
  __x_219 = __x_218->_M_right;
  if (__x_219 == 0B)
    goto <bb 83>;
  else
    goto <bb 82>;

  <bb 82>:
  goto <bb 81>;

  <bb 83>:
  # __x_234 = PHI <__x_218(81)>
  MEM[(struct _Rb_tree_node_base * &)__old_finish_542 + 32] = __x_234;
  _220 = MEM[(const struct _Rb_tree &)__position_453]._M_impl._M_node_count;
  MEM[(struct _Rb_tree *)__old_finish_542]._M_impl._M_node_count = _220;

  <bb 84>:
  __position_206 = __position_453 + 48;
  # DEBUG __first => __position_206
  __old_finish_207 = __old_finish_542 + 48;
  # DEBUG __cur => __old_finish_207
  # DEBUG __cur => __old_finish_207
  # DEBUG __first => __position_206
  if (prephitmp_151 == __position_206)
    goto <bb 86>;
  else
    goto <bb 85>;

  <bb 85>:
  goto <bb 73>;

  <bb 86>:
  _74 = this_9(D)->D.47428._M_impl._M_finish;
  _75 = (long unsigned int) _31;
  _76 = _74 + _75;
  this_9(D)->D.47428._M_impl._M_finish = _76;
  # DEBUG this => &__position
  # DEBUG __first => D#1372
  # DEBUG __last => D#1369
  # DEBUG __value => &__x_copy
  # DEBUG __first => D#1372
  if (__position_23 == prephitmp_151)
    goto <bb 42>;
  else
    goto <bb 94>;

  # __old_finish_308 = PHI <__old_finish_542(76)>
<L25>:
  _208 = __builtin_eh_pointer (20);
  __cxa_begin_catch (_208);
  # DEBUG __first => __old_finish_545
  # DEBUG __last => __old_finish_308
  # DEBUG __first => __old_finish_545
  # DEBUG __last => __old_finish_308
  # DEBUG __first => __old_finish_545
  if (__old_finish_308 == __old_finish_545)
    goto <bb 88>;
  else
    goto <bb 89>;

  <bb 88>:
  __cxa_rethrow ();

  <bb 89>:

  <bb 90>:
  # __old_finish_85 = PHI <__old_finish_545(89), __old_finish_212(91)>
  # DEBUG __first => __old_finish_85
  # DEBUG __r => __old_finish_85
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _210 = &__old_finish_85->_M_t;
  # DEBUG this => _210
  _211 = MEM[(struct _Rb_tree_node_base * *)__old_finish_85 + 16B];
  # DEBUG D#41 => _210
  # DEBUG this => D#41
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (_210, _211);
  # DEBUG D#464 => &MEM[(struct _Rb_tree *)_210]._M_impl
  # DEBUG this => D#464
  # DEBUG this => D#464
  # DEBUG this => D#464
  MEM[(struct  &)__old_finish_85] ={v} {CLOBBER};
  __old_finish_212 = __old_finish_85 + 48;
  # DEBUG __first => __old_finish_212
  # DEBUG __first => __old_finish_212
  if (__old_finish_212 == __old_finish_308)
    goto <bb 88>;
  else
    goto <bb 91>;

  <bb 91>:
  goto <bb 90>;

<L27>:
  __cxa_end_catch ();
  resx 19

<L43>:
  goto <bb 179> (<L10>);

  <bb 94>:

  <bb 95>:
  # __position_552 = PHI <__position_23(94), __position_88(98)>
  # DEBUG __first => __position_552
  # DEBUG this => __position_552
  # DEBUG __x => &__x_copy
  _87 = &__position_552->_M_t;
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::operator= (_87, &__x_copy._M_t);
  goto <bb 97>;

<L44>:
  goto <bb 179> (<L10>);

  <bb 97>:
  __position_88 = __position_552 + 48;
  # DEBUG __first => __position_88
  # DEBUG __first => __position_88
  if (__position_88 == prephitmp_151)
    goto <bb 42>;
  else
    goto <bb 98>;

  <bb 98>:
  goto <bb 95>;

  <bb 99>:
  # DEBUG this => &__x_copy
  # DEBUG this => &__x_copy._M_t
  _89 = MEM[(struct _Rb_tree_node_base * *)&__x_copy + 16B];
  # DEBUG D#41 => &__x_copy._M_t
  # DEBUG this => D#41
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (&__x_copy._M_t, _89);
  # DEBUG D#464 => &MEM[(struct _Rb_tree *)&__x_copy]._M_impl
  # DEBUG this => D#464
  # DEBUG this => D#464
  # DEBUG this => D#464
  __x_copy ={v} {CLOBBER};
  goto <bb 177>;

  <bb 100>:
  # DEBUG this => this_9(D)
  # DEBUG __n => __n_7(D)
  # DEBUG __n => __n_7(D)
  # DEBUG __s => "vector::_M_fill_insert"
  # DEBUG D#515 => this_9(D)
  # DEBUG this => D#515
  # DEBUG D#514 => D#515
  # DEBUG D#513 => &D#514->D.47428
  # DEBUG this => D#513
  # DEBUG __a => D#512
  # DEBUG D#511 => D#512
  # DEBUG D#510 => D#511
  # DEBUG this => D#510
  _24 = MEM[(struct map * *)this_9(D)];
  # DEBUG D#55 => this_9(D)
  # DEBUG D#55 => this_9(D)
  # DEBUG this => D#55
  # DEBUG this => D#55
  _236 = (long int) _24;
  _237 = _13 - _236;
  _238 = _237 /[ex] 48;
  _239 = (const long unsigned int) _238;
  _240 = 384307168202282325 - _239;
  if (__n_7(D) > _240)
    goto <bb 101>;
  else
    goto <bb 102>;

  <bb 101>:
  std::__throw_length_error ("vector::_M_fill_insert");

  <bb 102>:
  # DEBUG D#55 => this_9(D)
  # DEBUG D#55 => this_9(D)
  # DEBUG this => D#55
  # DEBUG this => D#55
  # DEBUG D#55 => this_9(D)
  # DEBUG D#55 => this_9(D)
  # DEBUG this => D#55
  # DEBUG this => D#55
  # DEBUG __a => &D.92172
  # DEBUG __b => &__n
  _166 = MAX_EXPR <__n_7(D), _239>;
  __len_244 = _166 + _239;
  # DEBUG __len => __len_244
  # DEBUG D#55 => this_9(D)
  # DEBUG D#55 => this_9(D)
  # DEBUG this => D#55
  # DEBUG this => D#55
  # DEBUG D#515 => this_9(D)
  # DEBUG this => D#515
  # DEBUG D#514 => D#515
  # DEBUG D#513 => &D#514->D.47428
  # DEBUG this => D#513
  # DEBUG __a => D#512
  # DEBUG D#511 => D#512
  # DEBUG D#510 => D#511
  # DEBUG this => D#510
  _95 = __len_244 > 384307168202282325;
  _540 = _239 > __len_244;
  _204 = _95 | _540;
  if (_204 != 0)
    goto <bb 194>;
  else
    goto <bb 195>;

  <bb 103>:
  pretmp_423 = __len_244 * 48;

  <bb 104>:
  # __elems_before_317 = PHI <__elems_before_493(194), __elems_before_570(103)>
  # _573 = PHI <_497(194), _488(103)>
  # prephitmp_424 = PHI <18446744073709551600(194), pretmp_423(103)>
  # DEBUG __len => NULL
  # DEBUG this => this_9(D)
  # DEBUG D#129 => &this_9(D)->D.47428._M_impl._M_start
  # DEBUG this => NULL
  # DEBUG __i => D#129
  # DEBUG __lhs => &__position
  # DEBUG __rhs => &D.62584
  # DEBUG this => &__position
  # DEBUG this => &D.62584
  # DEBUG __elems_before => __elems_before_317
  # DEBUG D#977 => &this_9(D)->D.47428
  # DEBUG D#523 => D#977
  # DEBUG __n => NULL
  # DEBUG this => D#523
  # DEBUG D#522 => D#523
  # DEBUG D#521 => &D#522->_M_impl
  # DEBUG D#520 => D#521
  # DEBUG __n => NULL
  # DEBUG __a => D#520
  # DEBUG D#519 => D#520
  # DEBUG D#517 => D#519
  # DEBUG D#518 => 0B
  # DEBUG __n => NULL
  # DEBUG this => D#517
  # DEBUG D.92160 => D#518
  # DEBUG D#516 => D#517
  # DEBUG D#510 => D#516
  # DEBUG this => D#510
  _232 = operator new (prephitmp_424);

  <bb 105>:
  # __new_finish_233 = PHI <0B(195), _232(104)>
  # __elems_before_574 = PHI <__elems_before_570(195), __elems_before_317(104)>
  # _572 = PHI <_488(195), _573(104)>
  # prephitmp_128 = PHI <0(195), prephitmp_424(104)>
  # DEBUG __new_start => NULL
  # DEBUG __new_finish => NULL
  # DEBUG D#961 => &this_9(D)->D.47428
  # DEBUG this => D#961
  _27 = (long unsigned int) _572;
  __first_28 = __new_finish_233 + _27;
  # DEBUG __first => __first_28
  # DEBUG __n => __n_7(D)
  # DEBUG __x => __x_29(D)
  # DEBUG D.84573 => D#955
  # DEBUG __first => __first_28
  # DEBUG __n => __n_7(D)
  # DEBUG __x => __x_29(D)
  # DEBUG __assignable => 1
  # DEBUG __first => __first_28
  # DEBUG __n => __n_7(D)
  # DEBUG __x => __x_29(D)
  # DEBUG __cur => __first_28
  # DEBUG __n => __n_7(D)

  <bb 106>:
  # __n_566 = PHI <__n_225(118), __n_7(D)(105)>
  # __first_568 = PHI <__first_226(118), __first_28(105)>
  # DEBUG __cur => __first_568
  # DEBUG __n => __n_566
  # DEBUG __r => __first_568
  # DEBUG __p => NULL
  # DEBUG __value => __x_29(D)
  # DEBUG D#20 => 48
  # DEBUG __p => NULL
  # DEBUG D.84140 => D#20
  if (__first_568 != 0B)
    goto <bb 108>;
  else
    goto <bb 107>;

  <bb 107>:
  goto <bb 117>;

  <bb 108>:
  # DEBUG this => NULL
  # DEBUG __x => __x_29(D)
  # DEBUG D#1363 => &MEM[(const struct map &)__x_29(D)]._M_t
  _224 = &__first_568->_M_t;
  # DEBUG this => _224
  # DEBUG __x => D#1363
  # DEBUG this => D#1363
  # DEBUG __a => NULL
  # DEBUG D#949 => &MEM[(const struct _Rb_tree &)D#1363]._M_impl._M_key_compare
  # DEBUG D#948 => &MEM[(struct _Rb_tree *)_224]._M_impl
  # DEBUG this => D#948
  # DEBUG __comp => D#949
  # DEBUG __a => NULL
  # DEBUG this => D#948
  # DEBUG __a => NULL
  # DEBUG this => D#948
  # DEBUG D.74137 => NULL
  MEM[(struct _Rb_tree_impl *)__first_568]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)__first_568]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)__first_568]._M_node_count = 0;
  # DEBUG this => D#948
  _17 = &MEM[(struct _Rb_tree_impl *)__first_568]._M_header;
  MEM[(struct _Rb_tree_impl *)__first_568]._M_header._M_left = _17;
  MEM[(struct _Rb_tree_impl *)__first_568]._M_header._M_right = _17;
  _246 = MEM[(struct _Rb_tree_node_base * *)__x_29(D) + 16B];
  # DEBUG D#95 => D#1363
  # DEBUG this => D#95
  if (_246 != 0B)
    goto <bb 109>;
  else
    goto <bb 107>;

  <bb 109>:
  # DEBUG this => _224
  # DEBUG this => _224
  # DEBUG D#90 => D#1363
  # DEBUG this => D#90
  # DEBUG this => _224
  # DEBUG __x => NULL
  # DEBUG __p => NULL
  # DEBUG this => &__an
  # DEBUG __t => _224
  __an._M_t = _224;
  __x_248 = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_copy<std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_Alloc_node> (_224, _246, _17, &__an);

  <bb 110>:
  __an ={v} {CLOBBER};
  MEM[(struct _Rb_tree_node_base * &)__first_568 + 16] = __x_248;
  # DEBUG this => _224
  # DEBUG this => _224
  # DEBUG __x => __x_248

  <bb 111>:
  # __x_249 = PHI <__x_248(110), __x_250(112)>
  # DEBUG __x => __x_249
  __x_250 = __x_249->_M_left;
  if (__x_250 == 0B)
    goto <bb 113>;
  else
    goto <bb 112>;

  <bb 112>:
  goto <bb 111>;

  <bb 113>:
  # __x_311 = PHI <__x_249(111)>
  MEM[(struct _Rb_tree_node_base * &)__first_568 + 24] = __x_311;
  # DEBUG this => _224
  # DEBUG this => _224
  # DEBUG __x => __x_248

  <bb 114>:
  # __x_251 = PHI <__x_248(113), __x_252(115)>
  # DEBUG __x => __x_251
  __x_252 = __x_251->_M_right;
  if (__x_252 == 0B)
    goto <bb 116>;
  else
    goto <bb 115>;

  <bb 115>:
  goto <bb 114>;

  <bb 116>:
  # __x_41 = PHI <__x_251(114)>
  MEM[(struct _Rb_tree_node_base * &)__first_568 + 32] = __x_41;
  _253 = MEM[(const struct _Rb_tree &)__x_29(D)]._M_impl._M_node_count;
  MEM[(struct _Rb_tree *)__first_568]._M_impl._M_node_count = _253;

  <bb 117>:
  __n_225 = __n_566 + 18446744073709551615;
  # DEBUG __n => __n_225
  __first_226 = __first_568 + 48;
  # DEBUG __cur => __first_226
  # DEBUG __cur => __first_226
  # DEBUG __n => __n_225
  if (__n_225 == 0)
    goto <bb 119>;
  else
    goto <bb 118>;

  <bb 118>:
  goto <bb 106>;

  <bb 119>:
  # DEBUG __new_finish => 0B
  # DEBUG D#962 => &this_9(D)->D.47428
  # DEBUG this => D#962
  # DEBUG this => &__position
  __first_32 = this_9(D)->D.47428._M_impl._M_start;
  # DEBUG __first => __first_32
  # DEBUG __last => D#1372
  # DEBUG __result => NULL
  # DEBUG __alloc => D#954
  # DEBUG D#953 => D#954
  # DEBUG D#950 => D#953
  # DEBUG __first => __first_32
  # DEBUG __last => D#1372
  # DEBUG __result => NULL
  # DEBUG D.84594 => D#950
  # DEBUG __first => __first_32
  # DEBUG __last => D#1372
  # DEBUG __result => NULL
  # DEBUG __assignable => 1
  # DEBUG __first => __first_32
  # DEBUG __last => D#1372
  # DEBUG __result => __new_finish_233
  # DEBUG __cur => __new_finish_233
  # DEBUG __first => __first_32
  if (__position_23 == __first_32)
    goto <bb 141>;
  else
    goto <bb 126>;

  # __first_481 = PHI <__first_568(109)>
<L28>:
  _227 = __builtin_eh_pointer (23);
  __cxa_begin_catch (_227);
  # DEBUG __first => __first_28
  # DEBUG __last => __first_481
  # DEBUG __first => __first_28
  # DEBUG __last => __first_481
  # DEBUG __first => __first_28
  if (__first_28 == __first_481)
    goto <bb 121>;
  else
    goto <bb 122>;

  <bb 121>:
  __cxa_rethrow ();

  <bb 122>:

  <bb 123>:
  # __first_477 = PHI <__first_28(122), __first_231(124)>
  # DEBUG __first => __first_477
  # DEBUG __r => __first_477
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _229 = &__first_477->_M_t;
  # DEBUG this => _229
  _230 = MEM[(struct _Rb_tree_node_base * *)__first_477 + 16B];
  # DEBUG D#41 => _229
  # DEBUG this => D#41
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (_229, _230);
  # DEBUG D#464 => &MEM[(struct _Rb_tree *)_229]._M_impl
  # DEBUG this => D#464
  # DEBUG this => D#464
  # DEBUG this => D#464
  MEM[(struct  &)__first_477] ={v} {CLOBBER};
  __first_231 = __first_477 + 48;
  # DEBUG __first => __first_231
  # DEBUG __first => __first_231
  if (__first_231 == __first_481)
    goto <bb 121>;
  else
    goto <bb 124>;

  <bb 124>:
  goto <bb 123>;

<L30>:
  __cxa_end_catch ();
  resx 22

  <bb 126>:

  <bb 127>:
  # __first_480 = PHI <__first_32(126), __first_258(140)>
  # __new_finish_158 = PHI <__new_finish_233(126), __new_finish_259(140)>
  # DEBUG __cur => __new_finish_158
  # DEBUG __first => __first_480
  # DEBUG __r => __new_finish_158
  # DEBUG __p => NULL
  # DEBUG __value => __first_480
  # DEBUG D#20 => 48
  # DEBUG __p => NULL
  # DEBUG D.84140 => D#20
  if (__new_finish_158 != 0B)
    goto <bb 129>;
  else
    goto <bb 128>;

  <bb 128>:
  goto <bb 138>;

  <bb 129>:
  # DEBUG this => NULL
  # DEBUG __x => __first_480
  # DEBUG D#1364 => &MEM[(const struct map &)__first_480]._M_t
  _257 = &__new_finish_158->_M_t;
  # DEBUG this => _257
  # DEBUG __x => D#1364
  # DEBUG this => D#1364
  # DEBUG __a => NULL
  # DEBUG D#949 => &MEM[(const struct _Rb_tree &)D#1364]._M_impl._M_key_compare
  # DEBUG D#948 => &MEM[(struct _Rb_tree *)_257]._M_impl
  # DEBUG this => D#948
  # DEBUG __comp => D#949
  # DEBUG __a => NULL
  # DEBUG this => D#948
  # DEBUG __a => NULL
  # DEBUG this => D#948
  # DEBUG D.74137 => NULL
  MEM[(struct _Rb_tree_impl *)__new_finish_158]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)__new_finish_158]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)__new_finish_158]._M_node_count = 0;
  # DEBUG this => D#948
  _115 = &MEM[(struct _Rb_tree_impl *)__new_finish_158]._M_header;
  MEM[(struct _Rb_tree_impl *)__new_finish_158]._M_header._M_left = _115;
  MEM[(struct _Rb_tree_impl *)__new_finish_158]._M_header._M_right = _115;
  _265 = MEM[(struct _Rb_tree_node_base * *)__first_480 + 16B];
  # DEBUG D#95 => D#1364
  # DEBUG this => D#95
  if (_265 != 0B)
    goto <bb 130>;
  else
    goto <bb 128>;

  <bb 130>:
  # DEBUG this => _257
  # DEBUG this => _257
  # DEBUG D#90 => D#1364
  # DEBUG this => D#90
  # DEBUG this => _257
  # DEBUG __x => NULL
  # DEBUG __p => NULL
  # DEBUG this => &__an
  # DEBUG __t => _257
  __an._M_t = _257;
  __x_267 = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_copy<std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_Alloc_node> (_257, _265, _115, &__an);

  <bb 131>:
  __an ={v} {CLOBBER};
  MEM[(struct _Rb_tree_node_base * &)__new_finish_158 + 16] = __x_267;
  # DEBUG this => _257
  # DEBUG this => _257
  # DEBUG __x => __x_267

  <bb 132>:
  # __x_268 = PHI <__x_267(131), __x_269(133)>
  # DEBUG __x => __x_268
  __x_269 = __x_268->_M_left;
  if (__x_269 == 0B)
    goto <bb 134>;
  else
    goto <bb 133>;

  <bb 133>:
  goto <bb 132>;

  <bb 134>:
  # __x_79 = PHI <__x_268(132)>
  MEM[(struct _Rb_tree_node_base * &)__new_finish_158 + 24] = __x_79;
  # DEBUG this => _257
  # DEBUG this => _257
  # DEBUG __x => __x_267

  <bb 135>:
  # __x_270 = PHI <__x_267(134), __x_271(136)>
  # DEBUG __x => __x_270
  __x_271 = __x_270->_M_right;
  if (__x_271 == 0B)
    goto <bb 137>;
  else
    goto <bb 136>;

  <bb 136>:
  goto <bb 135>;

  <bb 137>:
  # __x_111 = PHI <__x_270(135)>
  MEM[(struct _Rb_tree_node_base * &)__new_finish_158 + 32] = __x_111;
  _272 = MEM[(const struct _Rb_tree &)__first_480]._M_impl._M_node_count;
  MEM[(struct _Rb_tree *)__new_finish_158]._M_impl._M_node_count = _272;

  <bb 138>:
  __first_258 = __first_480 + 48;
  # DEBUG __first => __first_258
  __new_finish_259 = __new_finish_158 + 48;
  # DEBUG __cur => __new_finish_259
  # DEBUG __cur => __new_finish_259
  # DEBUG __first => __first_258
  if (__position_23 == __first_258)
    goto <bb 139>;
  else
    goto <bb 140>;

  <bb 139>:
  # __new_finish_109 = PHI <__new_finish_259(138)>
  goto <bb 141>;

  <bb 140>:
  goto <bb 127>;

  <bb 141>:
  # __new_finish_495 = PHI <__new_finish_109(139), __new_finish_233(119)>
  # DEBUG __new_finish => NULL
  _33 = __n_7(D) * 48;
  __new_finish_34 = __new_finish_495 + _33;
  # DEBUG __new_finish => __new_finish_34
  # DEBUG D#963 => &this_9(D)->D.47428
  # DEBUG this => D#963
  _36 = this_9(D)->D.47428._M_impl._M_finish;
  # DEBUG this => &__position
  # DEBUG __first => D#1372
  # DEBUG __last => _36
  # DEBUG __result => __new_finish_34
  # DEBUG __alloc => D#954
  # DEBUG D#953 => D#954
  # DEBUG D#950 => D#953
  # DEBUG __first => D#1372
  # DEBUG __last => _36
  # DEBUG __result => __new_finish_34
  # DEBUG D.84613 => D#950
  # DEBUG __first => D#1372
  # DEBUG __last => _36
  # DEBUG __result => __new_finish_34
  # DEBUG __assignable => 1
  # DEBUG __first => D#1372
  # DEBUG __last => _36
  # DEBUG __result => __new_finish_34
  # DEBUG __cur => __new_finish_34
  # DEBUG __first => D#1372
  if (__position_23 == _36)
    goto <bb 163>;
  else
    goto <bb 148>;

  # __new_finish_37 = PHI <__new_finish_158(130)>
<L31>:
  _260 = __builtin_eh_pointer (26);
  __cxa_begin_catch (_260);
  # DEBUG __first => __new_finish_233
  # DEBUG __last => __new_finish_37
  # DEBUG __first => __new_finish_233
  # DEBUG __last => __new_finish_37
  # DEBUG __first => __new_finish_233
  if (__new_finish_37 == __new_finish_233)
    goto <bb 143>;
  else
    goto <bb 144>;

  <bb 143>:
  __cxa_rethrow ();

  <bb 144>:

  <bb 145>:
  # __new_finish_528 = PHI <__new_finish_233(144), __new_finish_264(146)>
  # DEBUG __first => __new_finish_528
  # DEBUG __r => __new_finish_528
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _262 = &__new_finish_528->_M_t;
  # DEBUG this => _262
  _263 = MEM[(struct _Rb_tree_node_base * *)__new_finish_528 + 16B];
  # DEBUG D#41 => _262
  # DEBUG this => D#41
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (_262, _263);
  # DEBUG D#464 => &MEM[(struct _Rb_tree *)_262]._M_impl
  # DEBUG this => D#464
  # DEBUG this => D#464
  # DEBUG this => D#464
  MEM[(struct  &)__new_finish_528] ={v} {CLOBBER};
  __new_finish_264 = __new_finish_528 + 48;
  # DEBUG __first => __new_finish_264
  # DEBUG __first => __new_finish_264
  if (__new_finish_37 == __new_finish_264)
    goto <bb 143>;
  else
    goto <bb 146>;

  <bb 146>:
  goto <bb 145>;

<L33>:
  __cxa_end_catch ();
  resx 25

  <bb 148>:

  <bb 149>:
  # __position_529 = PHI <__position_23(148), __position_277(161)>
  # __new_finish_484 = PHI <__new_finish_34(148), __new_finish_278(161)>
  # DEBUG __cur => __new_finish_484
  # DEBUG __first => __position_529
  # DEBUG __r => __new_finish_484
  # DEBUG __p => NULL
  # DEBUG __value => __position_529
  # DEBUG D#20 => 48
  # DEBUG __p => NULL
  # DEBUG D.84140 => D#20
  if (__new_finish_484 != 0B)
    goto <bb 151>;
  else
    goto <bb 150>;

  <bb 150>:
  goto <bb 160>;

  <bb 151>:
  # DEBUG this => NULL
  # DEBUG __x => __position_529
  # DEBUG D#1365 => &MEM[(const struct map &)__position_529]._M_t
  _276 = &__new_finish_484->_M_t;
  # DEBUG this => _276
  # DEBUG __x => D#1365
  # DEBUG this => D#1365
  # DEBUG __a => NULL
  # DEBUG D#949 => &MEM[(const struct _Rb_tree &)D#1365]._M_impl._M_key_compare
  # DEBUG D#948 => &MEM[(struct _Rb_tree *)_276]._M_impl
  # DEBUG this => D#948
  # DEBUG __comp => D#949
  # DEBUG __a => NULL
  # DEBUG this => D#948
  # DEBUG __a => NULL
  # DEBUG this => D#948
  # DEBUG D.74137 => NULL
  MEM[(struct _Rb_tree_impl *)__new_finish_484]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)__new_finish_484]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)__new_finish_484]._M_node_count = 0;
  # DEBUG this => D#948
  _116 = &MEM[(struct _Rb_tree_impl *)__new_finish_484]._M_header;
  MEM[(struct _Rb_tree_impl *)__new_finish_484]._M_header._M_left = _116;
  MEM[(struct _Rb_tree_impl *)__new_finish_484]._M_header._M_right = _116;
  _284 = MEM[(struct _Rb_tree_node_base * *)__position_529 + 16B];
  # DEBUG D#95 => D#1365
  # DEBUG this => D#95
  if (_284 != 0B)
    goto <bb 152>;
  else
    goto <bb 150>;

  <bb 152>:
  # DEBUG this => _276
  # DEBUG this => _276
  # DEBUG D#90 => D#1365
  # DEBUG this => D#90
  # DEBUG this => _276
  # DEBUG __x => NULL
  # DEBUG __p => NULL
  # DEBUG this => &__an
  # DEBUG __t => _276
  __an._M_t = _276;
  __x_286 = std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_copy<std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_Alloc_node> (_276, _284, _116, &__an);

  <bb 153>:
  __an ={v} {CLOBBER};
  MEM[(struct _Rb_tree_node_base * &)__new_finish_484 + 16] = __x_286;
  # DEBUG this => _276
  # DEBUG this => _276
  # DEBUG __x => __x_286

  <bb 154>:
  # __x_287 = PHI <__x_286(153), __x_288(155)>
  # DEBUG __x => __x_287
  __x_288 = __x_287->_M_left;
  if (__x_288 == 0B)
    goto <bb 156>;
  else
    goto <bb 155>;

  <bb 155>:
  goto <bb 154>;

  <bb 156>:
  # __x_242 = PHI <__x_287(154)>
  MEM[(struct _Rb_tree_node_base * &)__new_finish_484 + 24] = __x_242;
  # DEBUG this => _276
  # DEBUG this => _276
  # DEBUG __x => __x_286

  <bb 157>:
  # __x_289 = PHI <__x_286(156), __x_290(158)>
  # DEBUG __x => __x_289
  __x_290 = __x_289->_M_right;
  if (__x_290 == 0B)
    goto <bb 159>;
  else
    goto <bb 158>;

  <bb 158>:
  goto <bb 157>;

  <bb 159>:
  # __x_103 = PHI <__x_289(157)>
  MEM[(struct _Rb_tree_node_base * &)__new_finish_484 + 32] = __x_103;
  _291 = MEM[(const struct _Rb_tree &)__position_529]._M_impl._M_node_count;
  MEM[(struct _Rb_tree *)__new_finish_484]._M_impl._M_node_count = _291;

  <bb 160>:
  __position_277 = __position_529 + 48;
  # DEBUG __first => __position_277
  __new_finish_278 = __new_finish_484 + 48;
  # DEBUG __cur => __new_finish_278
  # DEBUG __cur => __new_finish_278
  # DEBUG __first => __position_277
  if (_36 == __position_277)
    goto <bb 162>;
  else
    goto <bb 161>;

  <bb 161>:
  goto <bb 149>;

  <bb 162>:
  # __new_finish_303 = PHI <__new_finish_278(160)>
  pretmp_362 = this_9(D)->D.47428._M_impl._M_finish;

  <bb 163>:
  # __new_finish_534 = PHI <__new_finish_303(162), __new_finish_34(141)>
  # prephitmp_383 = PHI <pretmp_362(162), _36(141)>
  # DEBUG __new_finish => NULL
  # DEBUG D#964 => &this_9(D)->D.47428
  # DEBUG this => D#964
  # DEBUG D#1371 => this_9(D)->D.47428._M_impl._M_finish
  __first_39 = this_9(D)->D.47428._M_impl._M_start;
  # DEBUG __first => __first_39
  # DEBUG __last => D#1371
  # DEBUG __first => __first_39
  if (__first_39 == prephitmp_383)
    goto <bb 174>;
  else
    goto <bb 170>;

  # __new_finish_112 = PHI <__new_finish_484(152)>
<L34>:
  _279 = __builtin_eh_pointer (29);
  __cxa_begin_catch (_279);
  # DEBUG __first => __new_finish_34
  # DEBUG __last => __new_finish_112
  # DEBUG __first => __new_finish_34
  # DEBUG __last => __new_finish_112
  # DEBUG __first => __new_finish_34
  if (__new_finish_34 == __new_finish_112)
    goto <bb 165>;
  else
    goto <bb 166>;

  <bb 165>:
  __cxa_rethrow ();

  <bb 166>:

  <bb 167>:
  # __new_finish_533 = PHI <__new_finish_34(166), __new_finish_283(168)>
  # DEBUG __first => __new_finish_533
  # DEBUG __r => __new_finish_533
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _281 = &__new_finish_533->_M_t;
  # DEBUG this => _281
  _282 = MEM[(struct _Rb_tree_node_base * *)__new_finish_533 + 16B];
  # DEBUG D#41 => _281
  # DEBUG this => D#41
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (_281, _282);
  # DEBUG D#464 => &MEM[(struct _Rb_tree *)_281]._M_impl
  # DEBUG this => D#464
  # DEBUG this => D#464
  # DEBUG this => D#464
  MEM[(struct  &)__new_finish_533] ={v} {CLOBBER};
  __new_finish_283 = __new_finish_533 + 48;
  # DEBUG __first => __new_finish_283
  # DEBUG __first => __new_finish_283
  if (__new_finish_283 == __new_finish_112)
    goto <bb 165>;
  else
    goto <bb 168>;

  <bb 168>:
  goto <bb 167>;

<L36>:
  __cxa_end_catch ();
  resx 28

  <bb 170>:

  <bb 171>:
  # __first_555 = PHI <__first_39(170), __first_98(172)>
  # DEBUG __first => __first_555
  # DEBUG __r => __first_555
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _96 = &__first_555->_M_t;
  # DEBUG this => _96
  _97 = MEM[(struct _Rb_tree_node_base * *)__first_555 + 16B];
  # DEBUG D#41 => _96
  # DEBUG this => D#41
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (_96, _97);
  # DEBUG D#464 => &MEM[(struct _Rb_tree *)_96]._M_impl
  # DEBUG this => D#464
  # DEBUG this => D#464
  # DEBUG this => D#464
  MEM[(struct  &)__first_555] ={v} {CLOBBER};
  __first_98 = __first_555 + 48;
  # DEBUG __first => __first_98
  # DEBUG __first => __first_98
  if (__first_98 == prephitmp_383)
    goto <bb 173>;
  else
    goto <bb 172>;

  <bb 172>:
  goto <bb 171>;

  <bb 173>:
  pretmp_385 = this_9(D)->D.47428._M_impl._M_start;

  <bb 174>:
  # prephitmp_386 = PHI <pretmp_385(173), __first_39(163)>
  # DEBUG D#975 => this_9(D)->D.47428._M_impl._M_end_of_storage
  # DEBUG D#974 => (long int) D#975
  # DEBUG D#1370 => this_9(D)->D.47428._M_impl._M_start
  # DEBUG D#973 => (long int) D#1370
  # DEBUG D#972 => D#974 - D#973
  # DEBUG D#971 => D#972 /[ex] 48
  # DEBUG D#970 => &this_9(D)->D.47428
  # DEBUG D#196 => D#970
  # DEBUG D#197 => (long unsigned int) D#971
  # DEBUG __p => D#1370
  # DEBUG this => D#196
  # DEBUG __n => D#197
  # DEBUG D#195 => D#197
  # DEBUG D#194 => D#196
  if (prephitmp_386 != 0B)
    goto <bb 175>;
  else
    goto <bb 176>;

  <bb 175>:
  # DEBUG D#193 => &D#194->_M_impl
  # DEBUG D#191 => D#193
  # DEBUG D#192 => D#195
  # DEBUG __p => D#1370
  # DEBUG __a => D#191
  # DEBUG __n => D#192
  # DEBUG D#190 => D#192
  # DEBUG D#189 => D#191
  # DEBUG D#187 => D#189
  # DEBUG D#188 => D#190
  # DEBUG __p => D#1370
  # DEBUG this => D#187
  # DEBUG D.84636 => D#188
  operator delete (prephitmp_386);

  <bb 176>:
  this_9(D)->D.47428._M_impl._M_start = __new_finish_233;
  this_9(D)->D.47428._M_impl._M_finish = __new_finish_534;
  _45 = __new_finish_233 + prephitmp_128;
  this_9(D)->D.47428._M_impl._M_end_of_storage = _45;

  <bb 177>:
  return;

<L39>:

<L10>:
  # DEBUG this => &__x_copy
  # DEBUG this => &__x_copy._M_t
  _99 = MEM[(struct _Rb_tree_node_base * *)&__x_copy + 16B];
  # DEBUG D#41 => &__x_copy._M_t
  # DEBUG this => D#41
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (&__x_copy._M_t, _99);
  # DEBUG D#464 => &MEM[(struct _Rb_tree *)&__x_copy]._M_impl
  # DEBUG this => D#464
  # DEBUG this => D#464
  # DEBUG this => D#464
  resx 2

<L13>:
  # DEBUG __new_finish => __new_finish_34
  _47 = __builtin_eh_pointer (9);
  __cxa_begin_catch (_47);
  if (__new_finish_34 == 0B)
    goto <bb 183>;
  else
    goto <bb 181>;

  <bb 181>:
  # DEBUG __first => __new_finish_233
  if (__new_finish_34 == __new_finish_233)
    goto <bb 182>;
  else
    goto <bb 188>;

  <bb 182>:
  # DEBUG D#976 => &this_9(D)->D.47428
  # DEBUG D#196 => D#976
  # DEBUG __p => NULL
  # DEBUG this => D#196
  # DEBUG __n => D#197
  # DEBUG D#195 => D#197
  # DEBUG D#194 => D#196
  if (__new_finish_233 != 0B)
    goto <bb 191>;
  else
    goto <bb 192>;

  <bb 183>:

  <bb 184>:
  # DEBUG __new_finish => 0B
  # DEBUG D#968 => &this_9(D)->D.47428
  # DEBUG this => D#968
  _49 = __n_7(D) + __elems_before_574;
  _50 = _49 * 48;
  _51 = __new_finish_233 + _50;
  # DEBUG __first => __first_28
  # DEBUG __last => _51
  # DEBUG __first => __first_28
  if (__first_28 == _51)
    goto <bb 182>;
  else
    goto <bb 185>;

  <bb 185>:

  <bb 186>:
  # __first_554 = PHI <__first_28(185), __first_102(187)>
  # DEBUG __first => __first_554
  # DEBUG __r => __first_554
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _100 = &__first_554->_M_t;
  # DEBUG this => _100
  _101 = MEM[(struct _Rb_tree_node_base * *)__first_554 + 16B];
  # DEBUG D#41 => _100
  # DEBUG this => D#41
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (_100, _101);
  # DEBUG D#464 => &MEM[(struct _Rb_tree *)_100]._M_impl
  # DEBUG this => D#464
  # DEBUG this => D#464
  # DEBUG this => D#464
  MEM[(struct  &)__first_554] ={v} {CLOBBER};
  __first_102 = __first_554 + 48;
  # DEBUG __first => __first_102
  # DEBUG __first => __first_102
  if (_51 == __first_102)
    goto <bb 182>;
  else
    goto <bb 187>;

  <bb 187>:
  goto <bb 186>;

  <bb 188>:

  <bb 189>:
  # __new_finish_551 = PHI <__new_finish_233(188), __new_finish_106(190)>
  # DEBUG __first => __new_finish_551
  # DEBUG __r => __new_finish_551
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _104 = &__new_finish_551->_M_t;
  # DEBUG this => _104
  _105 = MEM[(struct _Rb_tree_node_base * *)__new_finish_551 + 16B];
  # DEBUG D#41 => _104
  # DEBUG this => D#41
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (_104, _105);
  # DEBUG D#464 => &MEM[(struct _Rb_tree *)_104]._M_impl
  # DEBUG this => D#464
  # DEBUG this => D#464
  # DEBUG this => D#464
  MEM[(struct  &)__new_finish_551] ={v} {CLOBBER};
  __new_finish_106 = __new_finish_551 + 48;
  # DEBUG __first => __new_finish_106
  # DEBUG __first => __new_finish_106
  if (__new_finish_34 == __new_finish_106)
    goto <bb 182>;
  else
    goto <bb 190>;

  <bb 190>:
  goto <bb 189>;

  <bb 191>:
  # DEBUG D#193 => &D#194->_M_impl
  # DEBUG D#191 => D#193
  # DEBUG D#192 => D#195
  # DEBUG __p => NULL
  # DEBUG __a => D#191
  # DEBUG __n => D#192
  # DEBUG D#190 => D#192
  # DEBUG D#189 => D#191
  # DEBUG D#187 => D#189
  # DEBUG D#188 => D#190
  # DEBUG __p => NULL
  # DEBUG this => D#187
  # DEBUG D.84699 => D#188
  operator delete (__new_finish_233);

  <bb 192>:
  __cxa_rethrow ();

<L18>:
  __cxa_end_catch ();
  resx 10

  <bb 194>:
  # DEBUG __len => NULL
  # DEBUG this => this_9(D)
  # DEBUG D#129 => &this_9(D)->D.47428._M_impl._M_start
  # DEBUG this => NULL
  # DEBUG __i => D#129
  # DEBUG __lhs => &__position
  # DEBUG __rhs => &D.62584
  # DEBUG this => &__position
  _496 = (long int) __position_23;
  # DEBUG this => &D.62584
  _497 = _496 - _236;
  _492 = _497 /[ex] 48;
  __elems_before_493 = (const size_type) _492;
  # DEBUG __elems_before => __elems_before_493
  # DEBUG D#977 => &this_9(D)->D.47428
  # DEBUG D#523 => D#977
  # DEBUG __n => NULL
  # DEBUG this => D#523
  # DEBUG D#522 => D#523
  goto <bb 104>;

  <bb 195>:
  # DEBUG __len => NULL
  # DEBUG this => this_9(D)
  # DEBUG D#129 => &this_9(D)->D.47428._M_impl._M_start
  # DEBUG this => NULL
  # DEBUG __i => D#129
  # DEBUG __lhs => &__position
  # DEBUG __rhs => &D.62584
  # DEBUG this => &__position
  _487 = (long int) __position_23;
  # DEBUG this => &D.62584
  _488 = _487 - _236;
  _489 = _488 /[ex] 48;
  __elems_before_570 = (const size_type) _489;
  # DEBUG __elems_before => __elems_before_570
  # DEBUG D#977 => &this_9(D)->D.47428
  # DEBUG D#523 => D#977
  # DEBUG __n => NULL
  # DEBUG this => D#523
  # DEBUG D#522 => D#523
  if (__len_244 != 0)
    goto <bb 103>;
  else
    goto <bb 105>;

  <bb 196>:
  _25 = (long unsigned int) _31;
  _299 = __old_finish_545 + _25;
  this_9(D)->D.47428._M_impl._M_finish = _299;
  # DEBUG this => &__position
  # DEBUG __first => D#1372
  # DEBUG __last => D#1369
  # DEBUG __value => &__x_copy
  # DEBUG __first => D#1372
  goto <bb 99>;

<L37>:
  # DEBUG __new_finish => 0B
  _190 = __builtin_eh_pointer (9);
  __cxa_begin_catch (_190);
  goto <bb 184>;

<L38>:
  # DEBUG __new_finish => __new_finish_233
  _296 = __builtin_eh_pointer (9);
  __cxa_begin_catch (_296);
  if (__new_finish_233 == 0B)
    goto <bb 183>;
  else
    goto <bb 182>;

}



;; Function void AnyNet::buildRoutingTable() (_ZN6AnyNet17buildRoutingTableEv, funcdef_no=2501, decl_uid=47439, cgraph_uid=623, symbol_order=625)

Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is not innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is innermost
loop is not parallel according to graphite
void AnyNet::buildRoutingTable() (struct AnyNet * const this)
{
  struct _Rb_tree_node * __x;
  struct basic_ostream & D.92486;
  struct iterator __position;
  struct map * __pos;
  int i;
  struct value_type D.58977;
  int _6;
  long unsigned int _7;
  struct vector * _8;
  int _11;
  struct map * _17;
  struct _Rb_tree_node_base * _19;
  struct _Rb_tree_node_base * pretmp_33;
  struct _Rb_tree_node_base * prephitmp_35;
  struct _Rb_tree_node_base * pretmp_37;
  struct map * const _38;
  struct map * const _39;
  long int _40;
  long int _41;
  long int _42;
  long int _43;
  size_type _44;
  long unsigned int _45;
  long unsigned int _46;
  struct _Rep_type * _49;
  struct _Rb_tree_node_base * prephitmp_58;
  struct _Rb_tree_node_base * _61;
  int _77;

  <bb 2>:
  # DEBUG __s => "========================== Routing table  =====================\n"
  # DEBUG __out => &cout
  # DEBUG __s => "========================== Routing table  =====================\n"
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "========================== Routing table  =====================\n", 64);
  # DEBUG this => &D.58977
  # DEBUG D#163 => &D.58977._M_t
  # DEBUG this => D#163
  # DEBUG D#162 => &MEM[(struct _Rb_tree *)D#163]._M_impl
  # DEBUG this => D#162
  # DEBUG this => D#162
  # DEBUG this => D#162
  MEM[(struct _Rb_tree_impl *)&D.58977]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.58977]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.58977]._M_node_count = 0;
  # DEBUG this => D#162
  MEM[(struct _Rb_tree_impl *)&D.58977]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.58977]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.58977]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.58977]._M_header;
  _6 = this_5(D)->D.47478._size;
  _7 = (long unsigned int) _6;
  # DEBUG D#1389 => &this_5(D)->routing_table
  # DEBUG this => D#1389
  # DEBUG __new_size => _7
  # DEBUG __x => &D.58977
  _38 = MEM[(struct map * *)this_5(D) + 464B];
  # DEBUG D#55 => D#1389
  _39 = MEM[(struct map * *)this_5(D) + 472B];
  # DEBUG D#55 => D#1389
  # DEBUG this => D#55
  # DEBUG this => D#55
  _40 = (long int) _39;
  _41 = (long int) _38;
  _42 = _40 - _41;
  _43 = _42 /[ex] 48;
  _44 = (size_type) _43;
  if (_7 > _44)
    goto <bb 3>;
  else
    goto <bb 5>;

  <bb 3>:
  # DEBUG D#55 => D#1389
  # DEBUG D#55 => D#1389
  # DEBUG this => D#55
  # DEBUG this => D#55
  _45 = _7 - _44;
  # DEBUG this => D#1389
  # DEBUG D#96 => &D#1389->D.47428._M_impl._M_finish
  # DEBUG this => NULL
  # DEBUG __i => D#96
  # DEBUG this => D#1389
  MEM[(struct __normal_iterator *)&__position] = _39;
  # DEBUG __n => _45
  # DEBUG __x => &D.58977
  _8 = &this_5(D)->routing_table;
  std::vector<std::map<int, int> >::_M_fill_insert (_8, __position, _45, &D.58977);

  <bb 4>:
  pretmp_33 = MEM[(struct _Rb_tree_node_base * *)&D.58977 + 16B];
  goto <bb 16>;

  <bb 5>:
  # DEBUG D#55 => D#1389
  # DEBUG D#55 => D#1389
  # DEBUG this => D#55
  # DEBUG this => D#55
  if (_7 < _44)
    goto <bb 6>;
  else
    goto <bb 16>;

  <bb 6>:
  _46 = _7 * 48;
  __pos_47 = _38 + _46;
  # DEBUG D#470 => D#1389
  # DEBUG __pos => __pos_47
  # DEBUG D#469 => D#470
  # DEBUG this => D#469
  # DEBUG D#468 => &D#469->D.47428
  # DEBUG this => D#468
  # DEBUG __first => __pos_47
  # DEBUG __last => _39
  # DEBUG __first => __pos_47
  if (_39 == __pos_47)
    goto <bb 15>;
  else
    goto <bb 7>;

  <bb 7>:

  <bb 8>:
  # __pos_79 = PHI <__pos_47(7), __pos_51(10)>
  # DEBUG __first => __pos_79
  # DEBUG __r => __pos_79
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _49 = &__pos_79->_M_t;
  # DEBUG this => _49
  __x_50 = MEM[(struct _Rb_tree_node_base * *)__pos_79 + 16B];
  # DEBUG D#41 => _49
  # DEBUG this => D#41
  # DEBUG this => _49
  # DEBUG __x => __x_50
  # DEBUG __x => __x_50
  if (__x_50 == 0B)
    goto <bb 9>;
  else
    goto <bb 11>;

  <bb 9>:
  # DEBUG D#464 => &MEM[(struct _Rb_tree *)_49]._M_impl
  # DEBUG this => D#464
  # DEBUG this => D#464
  # DEBUG this => D#464
  MEM[(struct  &)__pos_79] ={v} {CLOBBER};
  __pos_51 = __pos_79 + 48;
  # DEBUG __first => __pos_51
  # DEBUG __first => __pos_51
  if (_39 == __pos_51)
    goto <bb 14>;
  else
    goto <bb 10>;

  <bb 10>:
  goto <bb 8>;

  <bb 11>:

  <bb 12>:
  # __x_80 = PHI <__x_50(11), __x_62(13)>
  # DEBUG __x => __x_80
  _61 = MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B];
  # DEBUG D#63 => __x_80
  # DEBUG __x => D#63
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (_49, _61);
  __x_62 = MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B];
  # DEBUG D#64 => __x_80
  # DEBUG __x => D#64
  # DEBUG __y => NULL
  # DEBUG D#463 => _49
  # DEBUG __p => __x_80
  # DEBUG this => D#463
  # DEBUG D#462 => D#463
  # DEBUG D#461 => D#463
  # DEBUG D#460 => D#463
  # DEBUG D#458 => D#460
  # DEBUG D#459 => __x_80
  # DEBUG this => D#458
  # DEBUG __p => D#459
  # DEBUG D#457 => D#458
  # DEBUG D#456 => D#459
  # DEBUG D#455 => D#459
  # DEBUG this => D#455
  # DEBUG D#454 => &D#456->_M_value_field
  # DEBUG __r => D#454
  # DEBUG D#453 => D#457
  # DEBUG this => D#453
  # DEBUG D#452 => D#453
  # DEBUG this => D#452
  # DEBUG this => NULL
  # DEBUG D.76846 => NULL
  # DEBUG this => NULL
  # DEBUG D#165 => D#454
  # DEBUG this => D#164
  # DEBUG __p => D#165
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#461
  # DEBUG __p => __x_80
  # DEBUG this => D#462
  # DEBUG D#287 => 1
  # DEBUG __p => __x_80
  # DEBUG __a => D#286
  # DEBUG __n => D#287
  # DEBUG D#285 => D#287
  # DEBUG D#284 => D#286
  # DEBUG D#282 => D#284
  # DEBUG D#283 => D#285
  # DEBUG __p => __x_80
  # DEBUG this => D#282
  # DEBUG D.92507 => D#283
  operator delete (__x_80);
  # DEBUG __x => __x_62
  # DEBUG __x => __x_62
  if (__x_62 == 0B)
    goto <bb 9>;
  else
    goto <bb 13>;

  <bb 13>:
  goto <bb 12>;

  <bb 14>:
  pretmp_37 = MEM[(struct _Rb_tree_node_base * *)&D.58977 + 16B];

  <bb 15>:
  # prephitmp_58 = PHI <pretmp_37(14), 0B(6)>
  MEM[(struct map * *)this_5(D) + 472B] = __pos_47;

  <bb 16>:
  # prephitmp_35 = PHI <0B(5), pretmp_33(4), prephitmp_58(15)>
  # DEBUG this => &D.58977
  # DEBUG this => &D.58977._M_t
  # DEBUG D#41 => &D.58977._M_t
  # DEBUG this => D#41
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (&D.58977._M_t, prephitmp_35);
  # DEBUG D#464 => &MEM[(struct _Rb_tree *)&D.58977]._M_impl
  # DEBUG this => D#464
  # DEBUG this => D#464
  # DEBUG this => D#464
  D.58977 ={v} {CLOBBER};
  # DEBUG i => 0
  # DEBUG i => 0
  _77 = this_5(D)->D.47478._size;
  if (_77 <= 0)
    goto <bb 17>;
  else
    goto <bb 18>;

  <bb 17>:
  # DEBUG D#978 => &this_5(D)->routing_table
  _17 = MEM[(struct map * *)this_5(D) + 464B];
  # DEBUG D#37 => D#978
  # DEBUG __n => 0
  # DEBUG this => D#37
  global_routing_table = _17;
  return;

  <bb 18>:

  <bb 19>:
  # i_72 = PHI <0(18), i_13(20)>
  # DEBUG i => i_72
  AnyNet::route (this_5(D), i_72);
  i_13 = i_72 + 1;
  # DEBUG i => i_13
  # DEBUG i => i_13
  _11 = this_5(D)->D.47478._size;
  if (_11 <= i_13)
    goto <bb 17>;
  else
    goto <bb 20>;

  <bb 20>:
  goto <bb 19>;

<L3>:
  # DEBUG this => &D.58977
  # DEBUG this => &D.58977._M_t
  _19 = MEM[(struct _Rb_tree_node_base * *)&D.58977 + 16B];
  # DEBUG D#41 => &D.58977._M_t
  # DEBUG this => D#41
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (&D.58977._M_t, _19);
  # DEBUG D#464 => &MEM[(struct _Rb_tree *)&D.58977]._M_impl
  # DEBUG this => D#464
  # DEBUG this => D#464
  # DEBUG this => D#464
  D.58977 ={v} {CLOBBER};
  resx 1

}



;; Function virtual void AnyNet::_BuildNet(const Configuration&) (_ZN6AnyNet9_BuildNetERK13Configuration, funcdef_no=2498, decl_uid=47435, cgraph_uid=620, symbol_order=622)

Trying loop 3 as candidate
loop 3 is not innermost
loop is not parallel according to graphite
Trying loop 4 as candidate
loop 4 is not innermost
loop is not parallel according to graphite
Trying loop 9 as candidate
loop 9 is innermost
loop is not parallel according to graphite
Trying loop 7 as candidate
loop 7 is innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is not innermost
loop is not parallel according to graphite
Trying loop 5 as candidate
loop 5 is not innermost
loop is not parallel according to graphite
Trying loop 8 as candidate
loop 8 is innermost
loop is not parallel according to graphite
Trying loop 6 as candidate
loop 6 is innermost
loop is not parallel according to graphite
virtual void AnyNet::_BuildNet(const Configuration&) (struct AnyNet * const this, const struct Configuration & config)
{
  size_type __dnew;
  size_type __dnew;
  char_type D.93448;
  char __c;
  char_type D.93445;
  char __c;
  char_type D.93442;
  struct value_type D.93436;
  struct _Rb_tree_node * __y;
  struct iterator D.93435;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1566;
  struct mapped_type & D.93432;
  struct basic_ostream & D.93408;
  const struct string D.93404;
  const struct string D.93367;
  char_type D.93331;
  char __c;
  char_type D.93328;
  char __c;
  char_type D.93325;
  struct basic_ostream & D.93319;
  struct basic_ostream & D.93307;
  size_type __dnew;
  const struct string D.93236;
  size_type __dnew;
  const struct string D.93154;
  size_type __dnew;
  const struct string D.93072;
  size_type __dnew;
  const struct string D.92990;
  char_type D.92954;
  char __c;
  char_type D.92951;
  char __c;
  char_type D.92948;
  struct basic_ostream & D.92942;
  struct value_type D.92939;
  struct _Rb_tree_node * __y;
  struct iterator D.92938;
  struct const_iterator __pos;
  struct _Rb_tree_node_base * const __i$_M_node;
  struct _Rb_tree_node_base * SR.1566;
  struct mapped_type & D.92935;
  const ptrdiff_t _Num;
  struct TimedModule * * * D.92911;
  const size_type __old_num_nodes;
  const size_type __new_num_nodes;
  struct TimedModule * * * __new_nstart;
  size_type __new_map_size;
  const ptrdiff_t _Num;
  const ptrdiff_t _Num;
  size_type __nodes_to_add;
  size_type __dnew;
  size_type __dnew;
  struct __string_type D.92742;
  struct __string_type D.92741;
  char_type D.92589;
  char __c;
  char_type D.92586;
  char __c;
  char_type D.92583;
  struct basic_ostream & D.92577;
  struct basic_ostream & D.92547;
  struct basic_ostream & D.92534;
  struct _Rb_tree_node_base * const rriter$_M_node;
  struct _Rb_tree_node_base * const nniter$_M_node;
  struct _Rb_tree_node_base * const niter$_M_node;
  struct _Rb_tree_node * __y;
  struct _Rb_tree_node * __y;
  int other_node;
  int node;
  int link;
  struct ostringstream router_name;
  int node;
  int radix;
  int i;
  int channel_count;
  int * outport;
  struct TimedModule * const D.56822;
  struct __string_type D.56821;
  int pretmp_3;
  long unsigned int pretmp_5;
  int prephitmp_6;
  int pretmp_8;
  int _12;
  long unsigned int _13;
  long unsigned int _14;
  unsigned int _23;
  unsigned int _25;
  unsigned int _26;
  struct basic_ostream & _30;
  struct basic_ostream & _32;
  int (*__vtbl_ptr_type) () * _33;
  long unsigned int _36;
  struct Module * _37;
  struct Router * _40;
  struct _Rb_tree_node_base * _46;
  char * const _49;
  struct Router * & _50;
  int (*__vtbl_ptr_type) () * _54;
  long unsigned int _56;
  int * _57;
  int _58;
  int _60;
  struct Router * & _62;
  int _63;
  long unsigned int _64;
  int _65;
  struct basic_ostream & _68;
  struct basic_ostream & _70;
  struct basic_ostream & _72;
  int _73;
  long unsigned int _75;
  struct FlitChannel * _76;
  struct Channel * _82;
  int _84;
  struct FlitChannel * _87;
  int _90;
  char * const _92;
  struct Channel * _94;
  int pretmp_96;
  struct Router * _97;
  int (*__vtbl_ptr_type) () * _98;
  int (*__vtbl_ptr_type) () _99;
  struct Channel * * pretmp_101;
  struct Channel * _103;
  const int _104;
  struct FlitChannel * _105;
  struct Router * _108;
  int (*__vtbl_ptr_type) () * _109;
  int (*__vtbl_ptr_type) () _110;
  struct Channel * _114;
  struct FlitChannel * _116;
  char * const _120;
  const int _131;
  struct basic_ostream & _137;
  const size_type _139;
  const struct __ctype_type * _143;
  int _148;
  int _150;
  const size_type _152;
  int _153;
  int _154;
  struct TimedModule * * * prephitmp_155;
  struct basic_ostream & _157;
  struct basic_ostream & _159;
  struct basic_ostream & _161;
  struct basic_ostream & _163;
  int _164;
  long unsigned int _165;
  struct FlitChannel * _166;
  int prephitmp_167;
  int (*__vtbl_ptr_type) () * _168;
  struct Channel * _170;
  struct Module * _171;
  struct _Rb_tree_node_base * _172;
  struct Router * _173;
  int (*__vtbl_ptr_type) () * _174;
  int (*__vtbl_ptr_type) () _175;
  struct FlitChannel * _177;
  long unsigned int _180;
  struct Router * _181;
  int (*__vtbl_ptr_type) () * _182;
  int (*__vtbl_ptr_type) () _183;
  struct Channel * _184;
  struct FlitChannel * _186;
  char * const _190;
  int * pretmp_194;
  struct FlitChannel * * _195;
  struct FlitChannel * * _196;
  struct FlitChannel * * _197;
  struct FlitChannel * * _198;
  struct FlitChannel * * _199;
  struct FlitChannel * * _200;
  struct FlitChannel * * _201;
  struct Channel * * _202;
  struct Channel * * _203;
  struct Channel * * _204;
  struct Channel * * _205;
  struct Channel * * _206;
  struct Channel * * _208;
  struct Router * * _209;
  struct Router * * _210;
  struct Router * * _211;
  struct Router * * _212;
  struct Router * * _213;
  struct Router * * _214;
  struct map * _215;
  struct map * _216;
  struct map * _217;
  struct map * _218;
  long unsigned int _219;
  struct FlitChannel * & _220;
  struct Channel * & _222;
  struct FlitChannel * & _224;
  char * const _225;
  struct Channel * & _226;
  struct FlitChannel * & _227;
  struct Channel * & _229;
  struct Router * & _230;
  struct FlitChannel * & _231;
  struct _Rb_tree_node_base * _232;
  struct Channel * & _233;
  struct Router * & _234;
  struct _Rb_tree_node_base * _237;
  const int _241;
  const int _247;
  long unsigned int _252;
  struct FlitChannel * & _253;
  struct Channel * & _254;
  struct FlitChannel * & _255;
  long unsigned int _257;
  struct Router * & _258;
  struct FlitChannel * & _259;
  struct Channel * & _260;
  long unsigned int _261;
  struct Router * & _262;
  const struct __ctype_type * _270;
  const struct __ctype_type * _281;
  const struct __ctype_type * _289;
  const int pretmp_294;
  long unsigned int pretmp_295;
  int pretmp_302;
  int (*__vtbl_ptr_type) () * iftmp.53_307;
  long int _308;
  sizetype iftmp.54_309;
  struct basic_ios * _310;
  int (*__vtbl_ptr_type) () * iftmp.55_311;
  struct _Rb_tree_node_base * _314;
  long int _320;
  sizetype iftmp.60_321;
  struct basic_ios * _322;
  long int _323;
  sizetype _324;
  struct basic_ios * _325;
  struct basic_ostream & _328;
  char _330;
  char_type _333;
  sizetype _336;
  int (*__vtbl_ptr_type) () * _338;
  int (*__vtbl_ptr_type) () _339;
  void * PROF_343;
  char_type _345;
  char * const _348;
  char * const prephitmp_349;
  char * const pretmp_350;
  char_type * const _352;
  char_type * const _353;
  char_type * const _354;
  char * const _355;
  char_type * const _356;
  char * const _357;
  char * const _359;
  char * const _360;
  char * const _361;
  long int __last.69_362;
  long int __first.70_363;
  difference_type _364;
  long unsigned int __dnew.66_365;
  char * _366;
  long unsigned int __dnew.67_367;
  const char_type _369;
  char * _372;
  int pretmp_373;
  long int __last.69_374;
  long int __first.70_375;
  difference_type _376;
  long unsigned int __dnew.66_377;
  char * _378;
  long unsigned int __dnew.67_379;
  const char_type _381;
  char * _384;
  struct TimedModule * * _385;
  struct TimedModule * * _386;
  struct TimedModule * * _387;
  struct TimedModule * * _390;
  struct TimedModule * * _391;
  struct TimedModule * * _392;
  int pretmp_393;
  struct TimedModule * * * _394;
  struct TimedModule * * * _395;
  struct TimedModule * * _396;
  struct TimedModule * * _397;
  long unsigned int pretmp_398;
  long unsigned int _399;
  struct TimedModule * * * _400;
  long int _401;
  struct TimedModule * * * _402;
  long int _403;
  long int _404;
  long int _405;
  long unsigned int _406;
  long unsigned int _407;
  struct TimedModule * * * _410;
  long int _411;
  long int _412;
  long int _413;
  long int _414;
  long unsigned int _419;
  long unsigned int _421;
  long unsigned int _422;
  long unsigned int _423;
  size_type pretmp_425;
  struct TimedModule * * * _428;
  long int __last.81_429;
  long int _430;
  long unsigned int _432;
  long unsigned int _433;
  struct TimedModule * * * _435;
  long unsigned int _439;
  long unsigned int _441;
  struct TimedModule * * * _442;
  long unsigned int _443;
  long unsigned int _444;
  long unsigned int _445;
  struct TimedModule * * * _450;
  struct TimedModule * * * _451;
  struct TimedModule * * * _452;
  long int __last.81_453;
  long int __first.82_454;
  long int _455;
  long unsigned int _457;
  struct TimedModule * * * _458;
  struct TimedModule * * _460;
  struct TimedModule * * _461;
  sizetype _463;
  struct TimedModule * * * _464;
  struct TimedModule * * _465;
  struct TimedModule * * _466;
  long int __last.77_467;
  long int _469;
  long unsigned int _471;
  struct TimedModule * * * _473;
  const int _480;
  const int _486;
  struct _Rep_type * _489;
  long int _495;
  sizetype _496;
  struct basic_ios * _497;
  struct basic_ostream & _500;
  char _502;
  char_type _505;
  sizetype _508;
  int (*__vtbl_ptr_type) () * _510;
  int (*__vtbl_ptr_type) () _511;
  void * PROF_515;
  char_type _517;
  struct Module * _520;
  char * const _521;
  char * const _522;
  struct map * _531;
  char * _532;
  long unsigned int __dnew.67_533;
  long unsigned int __dnew.67_536;
  char * const _537;
  char * _538;
  struct Module * _539;
  char * const _540;
  char * const _541;
  char * _551;
  long unsigned int __dnew.67_552;
  long unsigned int __dnew.67_555;
  char * const _556;
  char * _557;
  struct Module * _558;
  char * const _559;
  char * const _560;
  unsigned int _567;
  int pretmp_569;
  char * _570;
  long unsigned int __dnew.67_571;
  long unsigned int __dnew.67_574;
  char * const _575;
  char * _576;
  struct Module * _577;
  char * const _578;
  char * const _579;
  int prephitmp_588;
  char * _589;
  long unsigned int __dnew.67_590;
  long unsigned int __dnew.67_593;
  char * const _594;
  char * _595;
  int (*__vtbl_ptr_type) () * iftmp.59_598;
  long int _599;
  sizetype iftmp.60_600;
  struct basic_ios * _601;
  int (*__vtbl_ptr_type) () * iftmp.61_602;
  struct Channel * pretmp_604;
  const int pretmp_605;
  int (*__vtbl_ptr_type) () * _615;
  long int _616;
  sizetype _617;
  struct basic_ios * _618;
  struct basic_ostream & _621;
  char _623;
  char_type _626;
  unsigned int _629;
  int (*__vtbl_ptr_type) () * _631;
  int (*__vtbl_ptr_type) () _632;
  void * PROF_636;
  char_type _638;
  struct Module * _641;
  char * const _642;
  char * const _643;
  char * const _644;
  char * const _645;
  long int _646;
  sizetype _647;
  struct basic_ios * _648;
  long unsigned int pretmp_649;
  struct basic_ostream & _651;
  int prephitmp_652;
  const int pretmp_654;
  const int _655;
  const int prephitmp_659;
  char * const pretmp_660;
  const int _661;
  char * const prephitmp_663;
  struct _Rep_type * _664;
  long unsigned int _668;
  bool _669;
  char _670;
  char_type _673;
  long unsigned int pretmp_675;
  int (*__vtbl_ptr_type) () * _678;
  int (*__vtbl_ptr_type) () _679;
  void * PROF_683;
  char_type _685;
  struct _Rb_tree_node_base * _694;
  char * _698;
  long unsigned int __dnew.67_699;
  long unsigned int __dnew.67_702;
  char * const _703;
  char * _704;
  char * _715;
  long unsigned int __dnew.67_716;
  long unsigned int __dnew.67_719;
  char * const _720;
  char * _721;
  bool _726;
  bool _729;
  struct TimedModule * * prephitmp_731;
  size_type pretmp_732;
  size_type prephitmp_736;
  struct Channel * * pretmp_747;
  struct map * _836;
  struct Channel * prephitmp_869;
  int pretmp_878;
  int prephitmp_902;
  int (*__vtbl_ptr_type) () * iftmp.55_993;
  const int pretmp_994;
  const int prephitmp_998;
  int pretmp_1000;
  int pretmp_1005;
  size_type prephitmp_1012;
  int (*__vtbl_ptr_type) () * iftmp.53_1023;
  struct TimedModule * * pretmp_1027;
  long unsigned int prephitmp_1031;
  sizetype _1051;
  int prephitmp_1061;

  <bb 2>:
  _12 = this_11(D)->D.47478._size;
  _13 = (long unsigned int) _12;
  _14 = _13 * 4;
  outport_16 = malloc (_14);
  # DEBUG outport => outport_16
  # DEBUG i => 0
  # DEBUG i => 0
  if (_12 <= 0)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  # DEBUG __s => "==========================Node to Router =====================\n"
  # DEBUG __out => &cout
  # DEBUG __s => "==========================Node to Router =====================\n"
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "==========================Node to Router =====================\n", 63);
  # DEBUG this => &niter
  # DEBUG niter$_M_node => 0B
  # DEBUG D#979 => &this_11(D)->router_list
  _215 = MEM[(struct map * *)this_11(D) + 440B];
  # DEBUG D#34 => D#979
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => NULL
  niter$_M_node_185 = MEM[(struct _Rb_tree_node_base * *)_215 + 24B];
  # DEBUG D#70 => D#71
  # DEBUG this => D#70
  # DEBUG this => NULL
  # DEBUG __x => niter$_M_node_185
  # DEBUG niter$_M_node => niter$_M_node_185
  # DEBUG niter$_M_node => niter$_M_node_185
  # DEBUG D#1012 => &this_11(D)->router_list
  # DEBUG D#34 => D#1012
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => NULL
  # DEBUG this => D#72
  _46 = &MEM[(struct _Rb_tree *)_215]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => _46
  # DEBUG this => &niter
  # DEBUG __x => &D.56767
  if (_46 != niter$_M_node_185)
    goto <bb 6>;
  else
    goto <bb 5>;

  <bb 4>:
  _629 = (unsigned int) _12;
  _567 = _629 + 4294967295;
  _508 = (sizetype) _567;
  _1051 = _508 + 1;
  _336 = _1051 * 4;
  __builtin_memset (outport_16, 0, _336);
  goto <bb 3>;

  <bb 5>:
  # DEBUG __s => "==========================Router to Router =====================\n"
  # DEBUG __out => &cout
  # DEBUG __s => "==========================Router to Router =====================\n"
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "==========================Router to Router =====================\n", 65);
  # DEBUG channel_count => 0
  # DEBUG D#1013 => &this_11(D)->router_list
  _217 = MEM[(struct map * *)this_11(D) + 440B];
  # DEBUG D#34 => D#1013
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => NULL
  niter$_M_node_122 = MEM[(struct _Rb_tree_node_base * *)_217 + 24B];
  # DEBUG D#70 => D#71
  # DEBUG this => D#70
  # DEBUG this => NULL
  # DEBUG __x => niter$_M_node_122
  # DEBUG niter$_M_node => niter$_M_node_122
  # DEBUG niter$_M_node => niter$_M_node_122
  # DEBUG channel_count => 0
  # DEBUG D#1036 => &this_11(D)->router_list
  # DEBUG D#34 => D#1036
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => NULL
  # DEBUG this => D#72
  _314 = &MEM[(struct _Rb_tree *)_217]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => _314
  # DEBUG this => &niter
  # DEBUG __x => &D.57874
  if (niter$_M_node_122 != _314)
    goto <bb 201>;
  else
    goto <bb 200>;

  <bb 6>:

  <bb 7>:
  # niter$_M_node_530 = PHI <niter$_M_node_185(6), niter$_M_node_236(199)>
  # _836 = PHI <_215(6), _216(199)>
  # DEBUG niter$_M_node => niter$_M_node_530
  # DEBUG D#1012 => &this_11(D)->router_list
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => NULL
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => _46
  # DEBUG this => &niter
  # DEBUG __x => &D.56767
  # DEBUG this => &niter
  # DEBUG this => niter$_M_node_530
  # DEBUG D#980 => &MEM[(struct _Rb_tree_node *)niter$_M_node_530]._M_value_field
  # DEBUG __r => D#980
  # DEBUG D#981 => &MEM[(struct pair *)niter$_M_node_530 + 32B].first
  # DEBUG D#982 => &this_11(D)->router_list
  # DEBUG D#34 => D#982
  # DEBUG __n => 1
  # DEBUG this => D#34
  # DEBUG this => NULL
  # DEBUG __x => D#981
  # DEBUG this => D#320
  # DEBUG __k => D#981
  # DEBUG this => D#320
  __y_134 = &MEM[(struct _Rb_tree *)_836 + 48B]._M_impl._M_header;
  __y_133 = MEM[(struct _Rb_tree_node_base * *)_836 + 64B];
  # DEBUG D#42 => D#320
  # DEBUG this => D#42
  # DEBUG D#310 => D#320
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => D#981
  # DEBUG __y => __y_134
  # DEBUG __x => __y_133
  if (__y_133 == 0B)
    goto <bb 9>;
  else
    goto <bb 8>;

  <bb 8>:
  pretmp_605 = MEM[(struct pair *)niter$_M_node_530 + 32B].first;
  goto <bb 12>;

  <bb 9>:
  pretmp_654 = MEM[(struct pair *)niter$_M_node_530 + 32B].first;
  goto <bb 18>;

  <bb 10>:
  # __y_614 = PHI <__y_115(14), __y_129(13)>
  # __y_513 = PHI <__y_272(14), __y_503(13)>
  # DEBUG __y => __y_513
  # DEBUG __x => __y_614
  if (__y_614 == 0B)
    goto <bb 15>;
  else
    goto <bb 11>;

  <bb 11>:

  <bb 12>:
  # __y_272 = PHI <__y_134(8), __y_513(11)>
  # __y_503 = PHI <__y_133(8), __y_614(11)>
  # DEBUG __y => __y_272
  # DEBUG __x => __y_503
  # DEBUG __x => __y_503
  # DEBUG __x => __y_503
  # DEBUG this => __y_503
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__y_503]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__y_503 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _131 = MEM[(const int &)__y_503 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => D#981
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_131 >= pretmp_605)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  # DEBUG __y => __y_503
  __y_129 = MEM[(struct _Rb_tree_node_base * *)__y_503 + 16B];
  # DEBUG D#66 => __y_503
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 10>;

  <bb 14>:
  __y_115 = MEM[(struct _Rb_tree_node_base * *)__y_503 + 24B];
  # DEBUG D#65 => __y_503
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 10>;

  <bb 15>:
  # __y_987 = PHI <__y_513(10)>
  # DEBUG this => NULL
  # DEBUG __x => __y_987
  # DEBUG __j$_M_node => __y_987
  # DEBUG this => D#320
  # DEBUG this => NULL
  # DEBUG __x => __y_134
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (__y_134 == __y_987)
    goto <bb 18>;
  else
    goto <bb 16>;

  <bb 16>:
  # DEBUG __x => __y_987
  # DEBUG __x => __y_987
  # DEBUG this => __y_987
  # DEBUG D#316 => &MEM[(const struct _Rb_tree_node *)__y_987]._M_value_field
  # DEBUG __r => D#316
  # DEBUG __x => D#316
  # DEBUG this => D#123
  # DEBUG D#317 => &MEM[(const struct pair &)__y_987 + 32].first
  # DEBUG D#319 => &MEM[(struct _Rb_tree *)D#320]._M_impl._M_key_compare
  # DEBUG D#52 => D#319
  # DEBUG D#53 => D#981
  _104 = MEM[(const int &)__y_987 + 32];
  # DEBUG D#54 => D#317
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_104 > pretmp_605)
    goto <bb 18>;
  else
    goto <bb 17>;

  <bb 17>:

  <bb 18>:
  # __y_102 = PHI <__y_134(15), __y_134(16), __y_987(17), __y_134(9)>
  # prephitmp_659 = PHI <pretmp_605(15), pretmp_605(16), pretmp_605(17), pretmp_654(9)>
  # DEBUG D#318 => {CLOBBER}
  # DEBUG __j$_M_node => D#318
  # DEBUG riter$_M_node => __y_102
  # DEBUG this => &niter
  # DEBUG this => niter$_M_node_530
  # DEBUG D#983 => &MEM[(struct _Rb_tree_node *)niter$_M_node_530]._M_value_field
  # DEBUG __r => D#983
  # DEBUG D#984 => &MEM[(struct pair *)niter$_M_node_530 + 32B].second
  # DEBUG this => D#984
  # DEBUG D#47 => &MEM[(const struct map *)D#984]._M_t
  _139 = MEM[(long unsigned int *)niter$_M_node_530 + 80B];
  # DEBUG D#46 => D#47
  # DEBUG this => D#46
  _23 = (unsigned int) _139;
  # DEBUG this => &riter
  # DEBUG this => __y_102
  # DEBUG D#985 => &__y_102->_M_value_field
  # DEBUG __r => D#985
  # DEBUG D#986 => &MEM[(struct pair *)__y_102 + 32B].second
  # DEBUG this => D#986
  # DEBUG D#47 => &MEM[(const struct map *)D#986]._M_t
  _152 = MEM[(long unsigned int *)__y_102 + 80B];
  # DEBUG D#46 => D#47
  # DEBUG this => D#46
  _25 = (unsigned int) _152;
  _26 = _23 + _25;
  radix_27 = (int) _26;
  # DEBUG radix => radix_27
  # DEBUG this => &niter
  # DEBUG this => niter$_M_node_530
  # DEBUG D#987 => &MEM[(struct _Rb_tree_node *)niter$_M_node_530]._M_value_field
  # DEBUG __r => D#987
  # DEBUG D#1405 => MEM[(struct pair *)niter$_M_node_530 + 32B].first
  # DEBUG node => D#1405
  # DEBUG __out => &cout
  # DEBUG __s => "router "
  # DEBUG __s => "router "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "router ", 7);
  _30 = std::basic_ostream<char>::operator<< (&cout, prephitmp_659);
  # DEBUG __out => _30
  # DEBUG __s => " radix "
  # DEBUG __s => " radix "
  std::__ostream_insert<char, std::char_traits<char> > (_30, " radix ", 7);
  _32 = std::basic_ostream<char>::operator<< (_30, radix_27);
  # DEBUG this => _32
  # DEBUG __pf => endl
  # DEBUG __os => _32
  _33 = _32->_vptr.basic_ostream;
  _323 = MEM[(long int *)_33 + -24B];
  _324 = (sizetype) _323;
  _325 = _32 + _324;
  # DEBUG this => _325
  # DEBUG __c => 10
  _270 = MEM[(const struct basic_ios *)_325]._M_ctype;
  # DEBUG __f => _270
  if (_270 == 0B)
    goto <bb 19>;
  else
    goto <bb 20>;

  <bb 19>:
  std::__throw_bad_cast ();

  <bb 20>:
  # DEBUG this => _270
  # DEBUG __c => 10
  _330 = MEM[(const struct ctype *)_270]._M_widen_ok;
  if (_330 != 0)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  _333 = MEM[(const struct ctype *)_270]._M_widen[10];
  pretmp_3 = (int) _333;
  goto <bb 24>;

  <bb 22>:
  # DEBUG this => _270
  # DEBUG __c => 10
  std::ctype<char>::_M_widen_init (_270);
  _338 = MEM[(const struct ctype *)_270].D.21685._vptr.facet;
  _339 = MEM[(int (*__vtbl_ptr_type) () *)_338 + 48B];
  PROF_343 = [obj_type_ref] OBJ_TYPE_REF(_339;(const struct ctype)_270->6);
  if (PROF_343 == do_widen)
    goto <bb 24>;
  else
    goto <bb 23>;

  <bb 23>:
  _345 = OBJ_TYPE_REF(_339;(const struct ctype)_270->6) (_270, 10);
  pretmp_8 = (int) _345;

  <bb 24>:
  # prephitmp_652 = PHI <pretmp_3(21), 10(22), pretmp_8(23)>
  _328 = std::basic_ostream<char>::put (_32, prephitmp_652);
  # DEBUG __os => _328
  std::basic_ostream<char>::flush (_328);
  # DEBUG this => &router_name
  # DEBUG __mode => 16
  # DEBUG D#159 => &router_name.D.50265
  # DEBUG this => D#159
  std::ios_base::ios_base (&MEM[(struct basic_ios *)&router_name + 112B].D.24721);
  MEM[(struct basic_ios *)&router_name + 112B].D.24721._vptr.ios_base = &MEM[(void *)&_ZTVSt9basic_iosIcSt11char_traitsIcEE + 16B];
  MEM[(struct basic_ios *)&router_name + 112B]._M_tie = 0B;
  MEM[(struct basic_ios *)&router_name + 112B]._M_fill = 0;
  MEM[(struct basic_ios *)&router_name + 112B]._M_fill_init = 0;
  MEM[(struct basic_ios *)&router_name + 112B]._M_streambuf = 0B;
  MEM[(struct basic_ios *)&router_name + 112B]._M_ctype = 0B;
  MEM[(struct basic_ios *)&router_name + 112B]._M_num_put = 0B;
  MEM[(struct basic_ios *)&router_name + 112B]._M_num_get = 0B;
  # DEBUG this => &router_name.D.50262
  # DEBUG __vtt_parm => &MEM[(void *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 8B]
  iftmp.53_307 = MEM[(const void * *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 8B];
  MEM[(struct basic_ostream *)&router_name]._vptr.basic_ostream = iftmp.53_307;
  _308 = MEM[(long int *)iftmp.53_307 + -24B];
  iftmp.54_309 = (sizetype) _308;
  _310 = &router_name.D.50262 + iftmp.54_309;
  iftmp.55_311 = MEM[(const void * *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 16B];
  _310->D.24721._vptr.ios_base = iftmp.55_311;
  std::basic_ios<char>::init (_310, 0B);

  <bb 25>:
  router_name.D.50262._vptr.basic_ostream = &MEM[(void *)&_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 24B];
  MEM[(struct basic_ios *)&router_name + 112B].D.24721._vptr.ios_base = &MEM[(void *)&_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 64B];
  # DEBUG __a => 16
  # DEBUG __b => 16
  # DEBUG D#157 => &router_name._M_stringbuf
  # DEBUG this => D#157
  # DEBUG __mode => NULL
  # DEBUG D#121 => &MEM[(struct basic_stringbuf *)D#157].D.50112
  # DEBUG this => D#121
  MEM[(struct basic_streambuf *)&router_name + 8B]._vptr.basic_streambuf = &MEM[(void *)&_ZTVSt15basic_streambufIcSt11char_traitsIcEE + 16B];
  MEM[(struct basic_streambuf *)&router_name + 8B]._M_in_beg = 0B;
  MEM[(struct basic_streambuf *)&router_name + 8B]._M_in_cur = 0B;
  MEM[(struct basic_streambuf *)&router_name + 8B]._M_in_end = 0B;
  MEM[(struct basic_streambuf *)&router_name + 8B]._M_out_beg = 0B;
  MEM[(struct basic_streambuf *)&router_name + 8B]._M_out_cur = 0B;
  MEM[(struct basic_streambuf *)&router_name + 8B]._M_out_end = 0B;
  std::locale::locale (&MEM[(struct basic_streambuf *)&router_name + 8B]._M_buf_locale);
  MEM[(struct basic_stringbuf *)&router_name + 8B].D.50112._vptr.basic_streambuf = &MEM[(void *)&_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE + 16B];
  MEM[(struct basic_stringbuf *)&router_name + 8B]._M_mode = 16;
  # DEBUG D#120 => &MEM[(struct basic_stringbuf *)D#157]._M_string
  # DEBUG this => D#120
  # DEBUG this => D#45
  # DEBUG D#44 => D#45
  # DEBUG this => D#44
  # DEBUG this => D#120
  # DEBUG D#119 => &MEM[(struct basic_string *)D#120]._M_dataplus
  # DEBUG this => D#119
  # DEBUG __dat => &MEM[(struct basic_string *)&router_name + 80B].D.15209._M_local_buf
  # DEBUG __a => D#118
  # DEBUG D#117 => D#118
  # DEBUG D#115 => D#119
  # DEBUG D#116 => D#117
  # DEBUG this => D#115
  # DEBUG __a => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG this => D#113
  # DEBUG D.73458 => D#114
  MEM[(struct _Alloc_hider *)&router_name + 80B]._M_p = &MEM[(struct basic_string *)&router_name + 80B].D.15209._M_local_buf;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#120
  # DEBUG __n => 0
  # DEBUG D#4 => D#120
  # DEBUG __length => 0
  # DEBUG this => D#4
  MEM[(size_type *)&router_name + 88B] = 0;
  # DEBUG D#1 => D#120
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(struct basic_string *)&router_name + 80B].D.15209._M_local_buf
  # DEBUG __c2 => D#23
  MEM[(char_type &)&router_name + 96] = 0;
  std::basic_ios<char>::init (&MEM[(void *)&router_name + 112B], &router_name._M_stringbuf.D.50112);
  goto <bb 33>;

  # iftmp.53_1023 = PHI <iftmp.53_307(25)>
  # iftmp.55_993 = PHI <iftmp.55_311(25)>
<L23>:
  # DEBUG this => &router_name._M_stringbuf
  MEM[(struct basic_stringbuf *)&router_name + 8B].D.50112._vptr.basic_streambuf = &MEM[(void *)&_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE + 16B];
  # DEBUG D#156 => &MEM[(struct basic_stringbuf *)&router_name + 8B]._M_string
  # DEBUG this => D#156
  # DEBUG this => D#156
  # DEBUG this => D#156
  _348 = MEM[(char * *)&router_name + 80B];
  # DEBUG D#1 => D#156
  # DEBUG this => D#1
  # DEBUG this => D#156
  if (&MEM[(const struct basic_string *)&router_name + 80B].D.15209._M_local_buf != _348)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  # DEBUG D#153 => MEM[(struct basic_string *)D#156].D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => D#156
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => D#156
  # DEBUG this => D#1
  # DEBUG this => D#156
  # DEBUG D#150 => &MEM[(struct basic_string *)D#156]._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _348
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _348
  # DEBUG this => D#144
  # DEBUG D.92599 => D#145
  operator delete (_348);

  <bb 28>:
  # DEBUG D#154 => &MEM[(struct basic_string *)D#156]._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  MEM[(struct  &)&router_name + 80] ={v} {CLOBBER};
  # DEBUG D#155 => &MEM[(struct basic_stringbuf *)&router_name + 8B].D.50112
  # DEBUG this => D#155
  MEM[(struct basic_streambuf *)&router_name + 8B]._vptr.basic_streambuf = &MEM[(void *)&_ZTVSt15basic_streambufIcSt11char_traitsIcEE + 16B];
  std::locale::~locale (&MEM[(struct basic_streambuf *)&router_name + 8B]._M_buf_locale);
  MEM[(struct  &)&router_name + 8] ={v} {CLOBBER};
  resx 23

<L24>:
  # DEBUG this => &router_name.D.50262
  # DEBUG __vtt_parm => &MEM[(void *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 8B]
  _320 = MEM[(long int *)iftmp.53_1023 + -24B];
  iftmp.60_321 = (sizetype) _320;
  _322 = &router_name.D.50262 + iftmp.60_321;
  _322->D.24721._vptr.ios_base = iftmp.55_993;
  MEM[(struct  &)&router_name] ={v} {CLOBBER};
  resx 22

<L36>:
  goto <bb 32> (<L25>);

<L35>:

<L25>:
  # DEBUG D#158 => &router_name.D.50265
  # DEBUG this => D#158
  MEM[(struct basic_ios *)&router_name + 112B].D.24721._vptr.ios_base = &MEM[(void *)&_ZTVSt9basic_iosIcSt11char_traitsIcEE + 16B];
  std::ios_base::~ios_base (&MEM[(struct basic_ios *)&router_name + 112B].D.24721);
  resx 21

  <bb 33>:
  # DEBUG __out => &router_name.D.50262
  # DEBUG __s => "router"
  # DEBUG __s => "router"
  std::__ostream_insert<char, std::char_traits<char> > (&router_name.D.50262, "router", 6);

  <bb 34>:
  # DEBUG __out => &router_name.D.50262
  # DEBUG __s => "_"
  # DEBUG __s => "_"
  std::__ostream_insert<char, std::char_traits<char> > (&router_name.D.50262, "_", 1);
  goto <bb 36>;

<L38>:
  goto <bb 260> (<L18>);

  <bb 36>:
  std::basic_ostream<char>::operator<< (&router_name.D.50262, prephitmp_659);
  goto <bb 38>;

<L39>:
  goto <bb 260> (<L18>);

  <bb 38>:
  _36 = (long unsigned int) prephitmp_659;
  # DEBUG D#988 => &this_11(D)->D.47478._routers
  _209 = MEM[(struct Router * * *)this_11(D) + 112B];
  # DEBUG D#33 => D#988
  # DEBUG __n => _36
  # DEBUG this => D#33
  _64 = _36 * 8;
  _62 = _209 + _64;
  # DEBUG this => &router_name
  # DEBUG this => &router_name._M_stringbuf
  # DEBUG this => &D.56821
  # DEBUG this => D#45
  # DEBUG D#44 => D#45
  # DEBUG this => D#44
  # DEBUG this => &D.56821
  # DEBUG D#119 => &D.56821._M_dataplus
  # DEBUG this => D#119
  # DEBUG __dat => &D.56821.D.15209._M_local_buf
  # DEBUG __a => D#118
  # DEBUG D#117 => D#118
  # DEBUG D#115 => D#119
  # DEBUG D#116 => D#117
  # DEBUG this => D#115
  # DEBUG __a => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG this => D#113
  # DEBUG D.73458 => D#114
  MEM[(struct _Alloc_hider *)&D.56821]._M_p = &D.56821.D.15209._M_local_buf;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => &D.56821
  # DEBUG __n => 0
  # DEBUG D#4 => &D.56821
  # DEBUG __length => 0
  # DEBUG this => D#4
  MEM[(size_type *)&D.56821 + 8B] = 0;
  # DEBUG D#1 => &D.56821
  # DEBUG this => D#1
  # DEBUG __c1 => &D.56821.D.15209._M_local_buf
  # DEBUG __c2 => D#23
  MEM[(char_type &)&D.56821 + 16] = 0;
  # DEBUG D#493 => &MEM[(const struct basic_stringbuf *)&router_name + 8B].D.50112
  _352 = MEM[(char_type * *)&router_name + 48B];
  # DEBUG D#5 => D#493
  # DEBUG this => D#5
  if (_352 != 0B)
    goto <bb 39>;
  else
    goto <bb 61>;

  <bb 39>:
  # DEBUG D#494 => &MEM[(const struct basic_stringbuf *)&router_name + 8B].D.50112
  # DEBUG D#5 => D#494
  # DEBUG this => D#5
  # DEBUG D#495 => &MEM[(const struct basic_stringbuf *)&router_name + 8B].D.50112
  _353 = MEM[(char_type * *)&router_name + 32B];
  # DEBUG D#6 => D#495
  # DEBUG this => D#6
  if (_352 > _353)
    goto <bb 40>;
  else
    goto <bb 50>;

  <bb 40>:
  # DEBUG this => D#45
  # DEBUG D#44 => D#45
  # DEBUG this => D#44
  # DEBUG D#498 => &MEM[(const struct basic_stringbuf *)&router_name + 8B].D.50112
  # DEBUG D#5 => D#498
  # DEBUG this => D#5
  # DEBUG D#499 => &MEM[(const struct basic_stringbuf *)&router_name + 8B].D.50112
  _354 = MEM[(char_type * *)&router_name + 40B];
  # DEBUG D#7 => D#499
  # DEBUG this => D#7
  # DEBUG this => &D.92742
  # DEBUG __beg => _354
  # DEBUG __end => _352
  # DEBUG __a => NULL
  # DEBUG this => &D.92742
  # DEBUG D#491 => &D.92742._M_dataplus
  # DEBUG this => D#491
  # DEBUG __dat => &D.92742.D.15209._M_local_buf
  # DEBUG __a => D#118
  # DEBUG D#117 => D#118
  # DEBUG D#115 => D#491
  # DEBUG D#116 => D#117
  # DEBUG this => D#115
  # DEBUG __a => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG this => D#113
  # DEBUG D.73458 => D#114
  MEM[(struct _Alloc_hider *)&D.92742]._M_p = &D.92742.D.15209._M_local_buf;
  # DEBUG this => &D.92742
  # DEBUG __beg => _354
  # DEBUG __end => _352
  # DEBUG this => &D.92742
  # DEBUG __beg => _354
  # DEBUG __end => _352
  # DEBUG this => &D.92742
  # DEBUG __beg => _354
  # DEBUG __end => _352
  # DEBUG __ptr => _354
  if (_354 == 0B)
    goto <bb 261>;
  else
    goto <bb 263>;

  <bb 41>:
  _366 = std::__cxx11::basic_string<char>::_M_create (&D.92742, &__dnew, 0);

  <bb 42>:
  # DEBUG D#9 => &D.92742
  # DEBUG __p => _366
  # DEBUG this => D#9
  MEM[(char * *)&D.92742] = _366;
  __dnew.67_367 = __dnew;
  # DEBUG D#10 => &D.92742
  # DEBUG __capacity => __dnew.67_367
  # DEBUG this => D#10
  MEM[(size_type *)&D.92742 + 16B] = __dnew.67_367;
  # DEBUG D#1 => &D.92742
  # DEBUG this => D#1
  # DEBUG __p => _366
  # DEBUG __k1 => _354
  # DEBUG __k2 => _352
  # DEBUG __d => _366
  # DEBUG __s => _354
  # DEBUG __n => __dnew.66_365
  goto <bb 45>;

  <bb 43>:
  # DEBUG D#1 => &D.92742
  # DEBUG this => D#1
  # DEBUG __p => &D.92742.D.15209._M_local_buf
  # DEBUG __k1 => _354
  # DEBUG __k2 => _352
  # DEBUG __d => &D.92742.D.15209._M_local_buf
  # DEBUG __s => _354
  # DEBUG __n => __dnew.66_365
  if (__dnew.66_365 == 1)
    goto <bb 44>;
  else
    goto <bb 45>;

  <bb 44>:
  _369 = MEM[(const char_type &)_354];
  # DEBUG D#23 => _354
  # DEBUG __c1 => &D.92742.D.15209._M_local_buf
  # DEBUG __c2 => D#23
  MEM[(char_type &)&D.92742 + 16] = _369;
  goto <bb 46>;

  <bb 45>:
  # _225 = PHI <&D.92742.D.15209._M_local_buf(43), _366(42)>
  # DEBUG D#1 => &D.92742
  # DEBUG this => D#1
  # DEBUG __p => _225
  # DEBUG __k1 => _354
  # DEBUG __k2 => _352
  # DEBUG __d => _225
  # DEBUG __s => _354
  # DEBUG __n => __dnew.66_365
  # DEBUG __s1 => _225
  # DEBUG __s2 => _354
  # DEBUG __n => __dnew.66_365
  __builtin_memcpy (_225, _354, __dnew.66_365);
  pretmp_425 = __dnew;
  pretmp_350 = MEM[(char * *)&D.92742];

  <bb 46>:
  # prephitmp_1012 = PHI <__dnew.66_365(44), pretmp_425(45)>
  # prephitmp_349 = PHI <&D.92742.D.15209._M_local_buf(44), pretmp_350(45)>
  # DEBUG D#1403 => __dnew
  # DEBUG this => &D.92742
  # DEBUG __n => D#1403
  # DEBUG D#4 => &D.92742
  # DEBUG __length => D#1403
  # DEBUG this => D#4
  MEM[(size_type *)&D.92742 + 8B] = prephitmp_1012;
  # DEBUG D#1 => &D.92742
  # DEBUG this => D#1
  _372 = prephitmp_349 + prephitmp_1012;
  # DEBUG __c1 => _372
  # DEBUG __c2 => D#23
  MEM[(char_type &)_372] = 0;
  __dnew ={v} {CLOBBER};
  # DEBUG this => &D.56821
  # DEBUG __str => &D.92742
  # DEBUG this => &D.56821
  # DEBUG __str => &D.92742
  std::__cxx11::basic_string<char>::_M_assign (&D.56821, &D.92742);

  <bb 47>:
  # DEBUG this => &D.92742
  # DEBUG this => &D.92742
  # DEBUG this => &D.92742
  _355 = MEM[(char * *)&D.92742];
  # DEBUG D#1 => &D.92742
  # DEBUG this => D#1
  # DEBUG this => &D.92742
  if (&D.92742.D.15209._M_local_buf != _355)
    goto <bb 48>;
  else
    goto <bb 49>;

  <bb 48>:
  # DEBUG D#153 => D.92742.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.92742
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.92742
  # DEBUG this => D#1
  # DEBUG this => &D.92742
  # DEBUG D#150 => &D.92742._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _355
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _355
  # DEBUG this => D#144
  # DEBUG D.92701 => D#145
  operator delete (_355);

  <bb 49>:
  # DEBUG D#154 => &D.92742._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.92742 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  goto <bb 76>;

  <bb 50>:
  # DEBUG this => D#45
  # DEBUG D#44 => D#45
  # DEBUG this => D#44
  # DEBUG D#496 => &MEM[(const struct basic_stringbuf *)&router_name + 8B].D.50112
  # DEBUG D#6 => D#496
  # DEBUG this => D#6
  # DEBUG D#497 => &MEM[(const struct basic_stringbuf *)&router_name + 8B].D.50112
  _356 = MEM[(char_type * *)&router_name + 40B];
  # DEBUG D#7 => D#497
  # DEBUG this => D#7
  # DEBUG this => &D.92741
  # DEBUG __beg => _356
  # DEBUG __end => _353
  # DEBUG __a => NULL
  # DEBUG this => &D.92741
  # DEBUG D#491 => &D.92741._M_dataplus
  # DEBUG this => D#491
  # DEBUG __dat => &D.92741.D.15209._M_local_buf
  # DEBUG __a => D#118
  # DEBUG D#117 => D#118
  # DEBUG D#115 => D#491
  # DEBUG D#116 => D#117
  # DEBUG this => D#115
  # DEBUG __a => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG this => D#113
  # DEBUG D.73458 => D#114
  MEM[(struct _Alloc_hider *)&D.92741]._M_p = &D.92741.D.15209._M_local_buf;
  # DEBUG this => &D.92741
  # DEBUG __beg => _356
  # DEBUG __end => _353
  # DEBUG this => &D.92741
  # DEBUG __beg => _356
  # DEBUG __end => _353
  # DEBUG this => &D.92741
  # DEBUG __beg => _356
  # DEBUG __end => _353
  # DEBUG __ptr => _356
  _669 = _353 != 0B;
  _726 = _356 == 0B;
  _729 = _669 & _726;
  if (_729 != 0)
    goto <bb 264>;
  else
    goto <bb 266>;

  <bb 51>:
  _378 = std::__cxx11::basic_string<char>::_M_create (&D.92741, &__dnew, 0);
  goto <bb 53>;

<L41>:
  goto <bb 72> (<L28>);

  <bb 53>:
  # DEBUG D#9 => &D.92741
  # DEBUG __p => _378
  # DEBUG this => D#9
  MEM[(char * *)&D.92741] = _378;
  __dnew.67_379 = __dnew;
  # DEBUG D#10 => &D.92741
  # DEBUG __capacity => __dnew.67_379
  # DEBUG this => D#10
  MEM[(size_type *)&D.92741 + 16B] = __dnew.67_379;
  # DEBUG D#1 => &D.92741
  # DEBUG this => D#1
  # DEBUG __p => _378
  # DEBUG __k1 => _356
  # DEBUG __k2 => _353
  # DEBUG __d => _378
  # DEBUG __s => _356
  # DEBUG __n => __dnew.66_377
  goto <bb 56>;

  <bb 54>:
  # DEBUG D#1 => &D.92741
  # DEBUG this => D#1
  # DEBUG __p => &D.92741.D.15209._M_local_buf
  # DEBUG __k1 => _356
  # DEBUG __k2 => _353
  # DEBUG __d => &D.92741.D.15209._M_local_buf
  # DEBUG __s => _356
  # DEBUG __n => __dnew.66_377
  if (__dnew.66_377 == 1)
    goto <bb 55>;
  else
    goto <bb 56>;

  <bb 55>:
  _381 = MEM[(const char_type &)_356];
  # DEBUG D#23 => _356
  # DEBUG __c1 => &D.92741.D.15209._M_local_buf
  # DEBUG __c2 => D#23
  MEM[(char_type &)&D.92741 + 16] = _381;
  goto <bb 57>;

  <bb 56>:
  # _92 = PHI <&D.92741.D.15209._M_local_buf(54), _378(53)>
  # DEBUG D#1 => &D.92741
  # DEBUG this => D#1
  # DEBUG __p => _92
  # DEBUG __k1 => _356
  # DEBUG __k2 => _353
  # DEBUG __d => _92
  # DEBUG __s => _356
  # DEBUG __n => __dnew.66_377
  # DEBUG __s1 => _92
  # DEBUG __s2 => _356
  # DEBUG __n => __dnew.66_377
  __builtin_memcpy (_92, _356, __dnew.66_377);
  pretmp_732 = __dnew;
  pretmp_660 = MEM[(char * *)&D.92741];

  <bb 57>:
  # prephitmp_736 = PHI <__dnew.66_377(55), pretmp_732(56)>
  # prephitmp_663 = PHI <&D.92741.D.15209._M_local_buf(55), pretmp_660(56)>
  # DEBUG D#1404 => __dnew
  # DEBUG this => &D.92741
  # DEBUG __n => D#1404
  # DEBUG D#4 => &D.92741
  # DEBUG __length => D#1404
  # DEBUG this => D#4
  MEM[(size_type *)&D.92741 + 8B] = prephitmp_736;
  # DEBUG D#1 => &D.92741
  # DEBUG this => D#1
  _384 = prephitmp_663 + prephitmp_736;
  # DEBUG __c1 => _384
  # DEBUG __c2 => D#23
  MEM[(char_type &)_384] = 0;
  __dnew ={v} {CLOBBER};
  # DEBUG this => &D.56821
  # DEBUG __str => &D.92741
  # DEBUG this => &D.56821
  # DEBUG __str => &D.92741
  std::__cxx11::basic_string<char>::_M_assign (&D.56821, &D.92741);

  <bb 58>:
  # DEBUG this => &D.92741
  # DEBUG this => &D.92741
  # DEBUG this => &D.92741
  _357 = MEM[(char * *)&D.92741];
  # DEBUG D#1 => &D.92741
  # DEBUG this => D#1
  # DEBUG this => &D.92741
  if (&D.92741.D.15209._M_local_buf != _357)
    goto <bb 59>;
  else
    goto <bb 60>;

  <bb 59>:
  # DEBUG D#153 => D.92741.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.92741
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.92741
  # DEBUG this => D#1
  # DEBUG this => &D.92741
  # DEBUG D#150 => &D.92741._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _357
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _357
  # DEBUG this => D#144
  # DEBUG D.92664 => D#145
  operator delete (_357);

  <bb 60>:
  # DEBUG D#154 => &D.92741._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.92741 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  goto <bb 76>;

  <bb 61>:
  # DEBUG this => &D.56821
  # DEBUG __str => &MEM[(const struct basic_stringbuf *)&router_name + 8B]._M_string
  # DEBUG this => &D.56821
  # DEBUG __str => &MEM[(const struct basic_stringbuf *)&router_name + 8B]._M_string
  std::__cxx11::basic_string<char>::_M_assign (&D.56821, &MEM[(const struct basic_stringbuf *)&router_name + 8B]._M_string);
  goto <bb 76>;

<L42>:
  goto <bb 72> (<L28>);

<L26>:
  # DEBUG this => &D.92742
  # DEBUG this => &D.92742
  # DEBUG this => &D.92742
  _359 = MEM[(char * *)&D.92742];
  # DEBUG D#1 => &D.92742
  # DEBUG this => D#1
  # DEBUG this => &D.92742
  if (&D.92742.D.15209._M_local_buf != _359)
    goto <bb 64>;
  else
    goto <bb 65>;

  <bb 64>:
  # DEBUG D#153 => D.92742.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.92742
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.92742
  # DEBUG this => D#1
  # DEBUG this => &D.92742
  # DEBUG D#150 => &D.92742._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _359
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _359
  # DEBUG this => D#144
  # DEBUG D.92645 => D#145
  operator delete (_359);

  <bb 65>:
  # DEBUG D#154 => &D.92742._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.92742 ={v} {CLOBBER};
  resx 27

<L43>:
  goto <bb 72> (<L28>);

<L27>:
  # DEBUG this => &D.92741
  # DEBUG this => &D.92741
  # DEBUG this => &D.92741
  _360 = MEM[(char * *)&D.92741];
  # DEBUG D#1 => &D.92741
  # DEBUG this => D#1
  # DEBUG this => &D.92741
  if (&D.92741.D.15209._M_local_buf != _360)
    goto <bb 68>;
  else
    goto <bb 69>;

  <bb 68>:
  # DEBUG D#153 => D.92741.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.92741
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.92741
  # DEBUG this => D#1
  # DEBUG this => &D.92741
  # DEBUG D#150 => &D.92741._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _360
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _360
  # DEBUG this => D#144
  # DEBUG D.92629 => D#145
  operator delete (_360);

  <bb 69>:
  # DEBUG D#154 => &D.92741._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.92741 ={v} {CLOBBER};
  resx 26

<L44>:
  goto <bb 72> (<L28>);

<L40>:

<L28>:
  # DEBUG this => &D.56821
  # DEBUG this => &D.56821
  # DEBUG this => &D.56821
  _361 = MEM[(char * *)&D.56821];
  # DEBUG D#1 => &D.56821
  # DEBUG this => D#1
  # DEBUG this => &D.56821
  if (&D.56821.D.15209._M_local_buf != _361)
    goto <bb 73>;
  else
    goto <bb 74>;

  <bb 73>:
  # DEBUG D#153 => D.56821.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.56821
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.56821
  # DEBUG this => D#1
  # DEBUG this => &D.56821
  # DEBUG D#150 => &D.56821._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _361
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _361
  # DEBUG this => D#144
  # DEBUG D.92618 => D#145
  operator delete (_361);

  <bb 74>:
  # DEBUG D#154 => &D.56821._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  resx 25

<L45>:
  goto <bb 260> (<L18>);

  <bb 76>:
  _37 = &this_11(D)->D.47478.D.43856.D.32618;
  _40 = Router::NewRouter (config_38(D), _37, &D.56821, prephitmp_659, radix_27, radix_27);

  <bb 77>:
  *_62 = _40;
  # DEBUG this => &D.56821
  # DEBUG this => &D.56821
  # DEBUG this => &D.56821
  _49 = MEM[(char * *)&D.56821];
  # DEBUG D#1 => &D.56821
  # DEBUG this => D#1
  # DEBUG this => &D.56821
  if (&D.56821.D.15209._M_local_buf != _49)
    goto <bb 78>;
  else
    goto <bb 79>;

  <bb 78>:
  # DEBUG D#153 => D.56821.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.56821
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.56821
  # DEBUG this => D#1
  # DEBUG this => &D.56821
  # DEBUG D#150 => &D.56821._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _49
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _49
  # DEBUG this => D#144
  # DEBUG D.84857 => D#145
  operator delete (_49);

  <bb 79>:
  # DEBUG D#154 => &D.56821._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.56821 ={v} {CLOBBER};
  # DEBUG D#989 => &this_11(D)->D.47478._routers
  _210 = MEM[(struct Router * * *)this_11(D) + 112B];
  # DEBUG D#33 => D#989
  # DEBUG __n => _36
  # DEBUG this => D#33
  _50 = _210 + _64;
  _44 = *_50;
  # DEBUG D#1399 => &this_11(D)->D.47478._timed_modules
  # DEBUG this => D#1399
  # DEBUG __x => &D.56822
  _385 = MEM[(struct deque *)this_11(D) + 280B].D.43742._M_impl._M_finish._M_cur;
  _386 = MEM[(struct deque *)this_11(D) + 280B].D.43742._M_impl._M_finish._M_last;
  _387 = _386 + 18446744073709551608;
  if (_385 != _387)
    goto <bb 80>;
  else
    goto <bb 83>;

  <bb 80>:
  # DEBUG D#585 => &D#1399->D.43742._M_impl
  # DEBUG D#81 => D#585
  # DEBUG __p => _385
  # DEBUG __arg => &D.56822
  # DEBUG __a => D#81
  # DEBUG D#80 => D#81
  # DEBUG D#79 => D#80
  # DEBUG __p => _385
  # DEBUG __val => &D.56822
  # DEBUG this => D#79
  # DEBUG D#20 => 8
  # DEBUG __p => _385
  # DEBUG D.73160 => D#20
  if (_385 != 0B)
    goto <bb 81>;
  else
    goto <bb 82>;

  <bb 81>:
  *_385 = _44;
  pretmp_1027 = MEM[(struct deque *)this_11(D) + 280B].D.43742._M_impl._M_finish._M_cur;

  <bb 82>:
  # prephitmp_731 = PHI <_385(80), pretmp_1027(81)>
  _390 = prephitmp_731 + 8;
  MEM[(struct deque *)this_11(D) + 280B].D.43742._M_impl._M_finish._M_cur = _390;
  goto <bb 107>;

  <bb 83>:
  # DEBUG this => D#1399
  # DEBUG __t => &D.56822
  # DEBUG this => D#1399
  # DEBUG __nodes_to_add => 1
  _399 = MEM[(struct deque *)this_11(D) + 280B].D.43742._M_impl._M_map_size;
  _400 = MEM[(struct deque *)this_11(D) + 280B].D.43742._M_impl._M_finish._M_node;
  _401 = (long int) _400;
  _402 = MEM[(struct deque *)this_11(D) + 280B].D.43742._M_impl._M_map;
  _403 = (long int) _402;
  _404 = _401 - _403;
  _405 = _404 /[ex] -8;
  _406 = (long unsigned int) _405;
  _407 = _399 + _406;
  if (_407 <= 1)
    goto <bb 84>;
  else
    goto <bb 102>;

  <bb 84>:
  # DEBUG this => D#1399
  # DEBUG __nodes_to_add => 1
  # DEBUG __nodes_to_add => 1
  # DEBUG __add_at_front => 0
  _410 = MEM[(struct deque *)this_11(D) + 280B].D.43742._M_impl._M_start._M_node;
  _411 = (long int) _410;
  _412 = _401 - _411;
  _413 = _412 /[ex] 8;
  _414 = _413 + 1;
  __old_num_nodes_415 = (const size_type) _414;
  # DEBUG __old_num_nodes => __old_num_nodes_415
  __new_num_nodes_417 = __old_num_nodes_415 + 1;
  # DEBUG __new_num_nodes => __new_num_nodes_417
  _419 = __new_num_nodes_417 * 2;
  if (_399 > _419)
    goto <bb 85>;
  else
    goto <bb 92>;

  <bb 85>:
  _421 = _399 - __new_num_nodes_417;
  _422 = _421 >> 1;
  _423 = _422 * 8;
  __new_nstart_427 = _402 + _423;
  # DEBUG __new_nstart => __new_nstart_427
  if (_410 > __new_nstart_427)
    goto <bb 86>;
  else
    goto <bb 89>;

  <bb 86>:
  _428 = _400 + 8;
  # DEBUG __first => _410
  # DEBUG __last => _428
  # DEBUG __result => __new_nstart_427
  # DEBUG __it => _428
  # DEBUG __it => _428
  # DEBUG __it => _410
  # DEBUG __it => _410
  # DEBUG __first => _410
  # DEBUG __last => _428
  # DEBUG __result => __new_nstart_427
  # DEBUG __it => __new_nstart_427
  # DEBUG __it => __new_nstart_427
  # DEBUG __it => _428
  # DEBUG __it => _428
  # DEBUG __it => _410
  # DEBUG __it => _410
  # DEBUG __first => NULL
  # DEBUG __last => NULL
  # DEBUG __result => NULL
  # DEBUG __simple => 1
  # DEBUG __first => NULL
  # DEBUG __last => NULL
  # DEBUG __result => NULL
  __last.81_429 = (long int) _428;
  _430 = __last.81_429 - _411;
  _Num_431 = _430 /[ex] 8;
  # DEBUG _Num => _Num_431
  if (_Num_431 != 0)
    goto <bb 88>;
  else
    goto <bb 87>;

  <bb 87>:
  pretmp_649 = __old_num_nodes_415 * 8;
  goto <bb 101>;

  <bb 88>:
  _432 = (long unsigned int) _430;
  __builtin_memmove (__new_nstart_427, _410, _432);
  pretmp_675 = __old_num_nodes_415 * 8;
  goto <bb 101>;

  <bb 89>:
  _433 = __old_num_nodes_415 * 8;
  # DEBUG D#1406 => __new_nstart_427 + _433
  _435 = _400 + 8;
  # DEBUG __first => _410
  # DEBUG __last => _435
  # DEBUG __result => D#1406
  # DEBUG __it => _435
  # DEBUG __it => _435
  # DEBUG __it => _410
  # DEBUG __it => _410
  # DEBUG __first => _410
  # DEBUG __last => _435
  # DEBUG __result => D#1406
  # DEBUG __it => D#1406
  # DEBUG __it => D#1406
  # DEBUG __it => _435
  # DEBUG __it => _435
  # DEBUG __it => _410
  # DEBUG __it => _410
  # DEBUG __first => NULL
  # DEBUG __last => NULL
  # DEBUG __result => NULL
  # DEBUG __simple => 1
  # DEBUG __first => NULL
  # DEBUG __last => NULL
  # DEBUG __result => NULL
  __last.77_467 = (long int) _435;
  _469 = __last.77_467 - _411;
  _Num_470 = _469 /[ex] 8;
  # DEBUG _Num => _Num_470
  if (_Num_470 != 0)
    goto <bb 90>;
  else
    goto <bb 91>;

  <bb 90>:
  _471 = (long unsigned int) _469;
  _668 = _433 - _471;
  _473 = __new_nstart_427 + _668;
  __builtin_memmove (_473, _410, _471);

  <bb 91>:
  goto <bb 101>;

  <bb 92>:
  # DEBUG D#1397 => &MEM[(struct deque *)this_11(D) + 280B].D.43742._M_impl._M_map_size
  # DEBUG __a => D#1397
  # DEBUG __b => &__nodes_to_add
  if (_399 == 0)
    goto <bb 270>;
  else
    goto <bb 93>;

  <bb 93>:
  _439 = _399 + _399;
  __new_map_size_440 = _439 + 2;
  # DEBUG __new_map_size => __new_map_size_440
  # DEBUG D#579 => &D#1399->D.43742
  # DEBUG D#576 => D#579
  # DEBUG __n => __new_map_size_440
  # DEBUG this => D#576
  # DEBUG D#575 => D#576
  # DEBUG D#564 => D#575
  # DEBUG this => D#564
  # DEBUG D#563 => D#564
  # DEBUG this => D#563
  # DEBUG this => NULL
  # DEBUG D.78248 => NULL
  # DEBUG this => NULL
  # DEBUG D#574 => &__map_alloc
  # DEBUG __n => __new_map_size_440
  # DEBUG __a => D#574
  # DEBUG D#573 => D#574
  # DEBUG D#571 => D#573
  # DEBUG D#572 => 0B
  # DEBUG __n => __new_map_size_440
  # DEBUG this => D#571
  # DEBUG D.92892 => D#572
  # DEBUG D#570 => D#571
  # DEBUG D#569 => D#570
  # DEBUG this => D#569
  if (__new_map_size_440 > 2305843009213693951)
    goto <bb 94>;
  else
    goto <bb 96>;

  <bb 94>:
  std::__throw_bad_alloc ();

<L46>:
  goto <bb 260> (<L18>);

  <bb 96>:
  # __new_map_size_436 = PHI <__new_map_size_440(93), __new_map_size_695(270)>
  # DEBUG __new_map_size => __new_map_size_436
  # DEBUG D#579 => &D#1399->D.43742
  # DEBUG D#576 => D#579
  # DEBUG __n => __new_map_size_436
  # DEBUG this => D#576
  # DEBUG D#575 => D#576
  # DEBUG D#564 => D#575
  # DEBUG this => D#564
  # DEBUG D#563 => D#564
  # DEBUG this => D#563
  # DEBUG this => NULL
  # DEBUG D.78248 => NULL
  # DEBUG this => NULL
  # DEBUG D#574 => &__map_alloc
  # DEBUG __n => __new_map_size_436
  # DEBUG __a => D#574
  # DEBUG D#573 => D#574
  # DEBUG D#571 => D#573
  # DEBUG D#572 => 0B
  # DEBUG __n => __new_map_size_436
  # DEBUG this => D#571
  # DEBUG D.92892 => D#572
  # DEBUG D#570 => D#571
  # DEBUG D#569 => D#570
  # DEBUG this => D#569
  _441 = __new_map_size_436 * 8;
  _442 = operator new (_441);
  goto <bb 98>;

<L47>:
  goto <bb 260> (<L18>);

  <bb 98>:
  # DEBUG this => &__map_alloc
  # DEBUG this => &__map_alloc
  # DEBUG __new_map => _442
  _443 = __new_map_size_436 - __new_num_nodes_417;
  _444 = _443 >> 1;
  _445 = _444 * 8;
  __new_nstart_449 = _442 + _445;
  # DEBUG __new_nstart => __new_nstart_449
  _450 = MEM[(struct deque *)this_11(D) + 280B].D.43742._M_impl._M_finish._M_node;
  _451 = _450 + 8;
  _452 = MEM[(struct deque *)this_11(D) + 280B].D.43742._M_impl._M_start._M_node;
  # DEBUG __first => _452
  # DEBUG __last => _451
  # DEBUG __result => __new_nstart_449
  # DEBUG __it => _451
  # DEBUG __it => _451
  # DEBUG __it => _452
  # DEBUG __it => _452
  # DEBUG __first => _452
  # DEBUG __last => _451
  # DEBUG __result => __new_nstart_449
  # DEBUG __it => __new_nstart_449
  # DEBUG __it => __new_nstart_449
  # DEBUG __it => _451
  # DEBUG __it => _451
  # DEBUG __it => _452
  # DEBUG __it => _452
  # DEBUG __first => NULL
  # DEBUG __last => NULL
  # DEBUG __result => NULL
  # DEBUG __simple => 1
  # DEBUG __first => NULL
  # DEBUG __last => NULL
  # DEBUG __result => NULL
  __last.81_453 = (long int) _451;
  __first.82_454 = (long int) _452;
  _455 = __last.81_453 - __first.82_454;
  _Num_456 = _455 /[ex] 8;
  # DEBUG _Num => _Num_456
  if (_Num_456 != 0)
    goto <bb 99>;
  else
    goto <bb 100>;

  <bb 99>:
  _457 = (long unsigned int) _455;
  __builtin_memmove (__new_nstart_449, _452, _457);

  <bb 100>:
  # DEBUG D#578 => D#1399->D.43742._M_impl._M_map_size
  _458 = MEM[(struct deque *)this_11(D) + 280B].D.43742._M_impl._M_map;
  # DEBUG D#577 => &D#1399->D.43742
  # DEBUG D#567 => D#577
  # DEBUG D#568 => D#578
  # DEBUG __p => _458
  # DEBUG this => D#567
  # DEBUG __n => D#568
  # DEBUG D#566 => D#568
  # DEBUG D#565 => D#567
  # DEBUG D#564 => D#565
  # DEBUG this => D#564
  # DEBUG D#563 => D#564
  # DEBUG this => D#563
  # DEBUG this => NULL
  # DEBUG D.78248 => NULL
  # DEBUG this => NULL
  # DEBUG D#507 => &__map_alloc
  # DEBUG D#508 => D#566
  # DEBUG __p => _458
  # DEBUG __a => D#507
  # DEBUG __n => D#508
  # DEBUG D#506 => D#508
  # DEBUG D#505 => D#507
  # DEBUG D#503 => D#505
  # DEBUG D#504 => D#506
  # DEBUG __p => _458
  # DEBUG this => D#503
  # DEBUG D.92882 => D#504
  operator delete (_458);
  # DEBUG this => &__map_alloc
  # DEBUG this => &__map_alloc
  MEM[(struct deque *)this_11(D) + 280B].D.43742._M_impl._M_map = _442;
  MEM[(struct deque *)this_11(D) + 280B].D.43742._M_impl._M_map_size = __new_map_size_436;
  pretmp_295 = __old_num_nodes_415 * 8;

  <bb 101>:
  # __new_nstart_459 = PHI <__new_nstart_427(88), __new_nstart_427(91), __new_nstart_449(100), __new_nstart_427(87)>
  # prephitmp_1031 = PHI <pretmp_675(88), _433(91), pretmp_295(100), pretmp_649(87)>
  # DEBUG __new_nstart => __new_nstart_459
  # DEBUG D#581 => &D#1399->D.43742._M_impl._M_start
  # DEBUG this => D#581
  # DEBUG __new_node => __new_nstart_459
  MEM[(struct _Deque_iterator *)this_11(D) + 296B]._M_node = __new_nstart_459;
  _460 = *__new_nstart_459;
  MEM[(struct _Deque_iterator *)this_11(D) + 296B]._M_first = _460;
  # DEBUG __size => 8
  _461 = _460 + 512;
  MEM[(struct _Deque_iterator *)this_11(D) + 296B]._M_last = _461;
  _463 = prephitmp_1031 + 18446744073709551608;
  _464 = __new_nstart_459 + _463;
  # DEBUG D#580 => &D#1399->D.43742._M_impl._M_finish
  # DEBUG this => D#580
  # DEBUG __new_node => _464
  MEM[(struct _Deque_iterator *)this_11(D) + 328B]._M_node = _464;
  _465 = *_464;
  MEM[(struct _Deque_iterator *)this_11(D) + 328B]._M_first = _465;
  # DEBUG __size => 8
  _466 = _465 + 512;
  MEM[(struct _Deque_iterator *)this_11(D) + 328B]._M_last = _466;

  <bb 102>:
  # prephitmp_155 = PHI <_464(101), _400(83)>
  # DEBUG D#584 => &D#1399->D.43742
  # DEBUG D#334 => D#584
  # DEBUG this => D#334
  # DEBUG D#333 => D#334
  # DEBUG __size => 8
  # DEBUG D#332 => &D#333->_M_impl
  # DEBUG D#331 => D#332
  # DEBUG __n => NULL
  # DEBUG __a => D#331
  # DEBUG D#330 => D#331
  # DEBUG D#328 => D#330
  # DEBUG D#329 => 0B
  # DEBUG __n => NULL
  # DEBUG this => D#328
  # DEBUG D.92819 => D#329
  # DEBUG D#327 => D#328
  # DEBUG D#326 => D#327
  # DEBUG this => D#326
  _391 = operator new (512);
  goto <bb 104>;

<L48>:
  goto <bb 260> (<L18>);

  <bb 104>:
  MEM[(struct TimedModule * * *)prephitmp_155 + 8B] = _391;
  _392 = MEM[(struct deque *)this_11(D) + 280B].D.43742._M_impl._M_finish._M_cur;
  # DEBUG D#583 => &D#1399->D.43742._M_impl
  # DEBUG D#79 => D#583
  # DEBUG __p => _392
  # DEBUG __val => &D.56822
  # DEBUG this => D#79
  # DEBUG D#20 => 8
  # DEBUG __p => _392
  # DEBUG D.73160 => D#20
  if (_392 != 0B)
    goto <bb 105>;
  else
    goto <bb 106>;

  <bb 105>:
  *_392 = _44;

  <bb 106>:
  _394 = MEM[(struct deque *)this_11(D) + 280B].D.43742._M_impl._M_finish._M_node;
  _395 = _394 + 8;
  # DEBUG D#582 => &D#1399->D.43742._M_impl._M_finish
  # DEBUG this => D#582
  # DEBUG __new_node => _395
  MEM[(struct _Deque_iterator *)this_11(D) + 328B]._M_node = _395;
  _396 = MEM[(struct TimedModule * * *)_394 + 8B];
  MEM[(struct _Deque_iterator *)this_11(D) + 328B]._M_first = _396;
  # DEBUG __size => 8
  _397 = _396 + 512;
  MEM[(struct _Deque_iterator *)this_11(D) + 328B]._M_last = _397;
  MEM[(struct deque *)this_11(D) + 280B].D.43742._M_impl._M_finish._M_cur = _396;

  <bb 107>:
  # DEBUG this => &nniter
  # DEBUG nniter$_M_node => 0B
  # DEBUG this => &niter
  # DEBUG this => niter$_M_node_530
  # DEBUG D#990 => &MEM[(struct _Rb_tree_node *)niter$_M_node_530]._M_value_field
  # DEBUG __r => D#990
  # DEBUG D#991 => &MEM[(struct pair *)niter$_M_node_530 + 32B].second
  # DEBUG this => D#991
  # DEBUG D#77 => &D#991->_M_t
  nniter$_M_node_42 = MEM[(struct _Rb_tree_node_base * *)niter$_M_node_530 + 64B];
  # DEBUG D#76 => D#77
  # DEBUG this => D#76
  # DEBUG this => NULL
  # DEBUG __x => nniter$_M_node_42
  # DEBUG nniter$_M_node => nniter$_M_node_42
  # DEBUG nniter$_M_node => nniter$_M_node_42
  # DEBUG this => &niter
  # DEBUG this => niter$_M_node_530
  # DEBUG D#1010 => &MEM[(struct _Rb_tree_node *)niter$_M_node_530]._M_value_field
  # DEBUG __r => D#1010
  # DEBUG D#1011 => &MEM[(struct pair *)niter$_M_node_530 + 32B].second
  # DEBUG this => D#1011
  # DEBUG D#78 => &D#1011->_M_t
  # DEBUG this => D#78
  _694 = &MEM[(struct _Rb_tree *)niter$_M_node_530 + 40B]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => _694
  # DEBUG this => &nniter
  # DEBUG __x => &D.56825
  if (nniter$_M_node_42 != _694)
    goto <bb 109>;
  else
    goto <bb 108>;

  <bb 108>:
  # DEBUG this => &router_name
  router_name.D.50262._vptr.basic_ostream = &MEM[(void *)&_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 24B];
  MEM[(struct basic_ios *)&router_name + 112B].D.24721._vptr.ios_base = &MEM[(void *)&_ZTVNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 64B];
  # DEBUG this => &router_name._M_stringbuf
  MEM[(struct basic_stringbuf *)&router_name + 8B].D.50112._vptr.basic_streambuf = &MEM[(void *)&_ZTVNSt7__cxx1115basic_stringbufIcSt11char_traitsIcESaIcEEE + 16B];
  # DEBUG D#156 => &MEM[(struct basic_stringbuf *)&router_name + 8B]._M_string
  # DEBUG this => D#156
  # DEBUG this => D#156
  # DEBUG this => D#156
  _120 = MEM[(char * *)&router_name + 80B];
  # DEBUG D#1 => D#156
  # DEBUG this => D#1
  # DEBUG this => D#156
  if (&MEM[(const struct basic_string *)&router_name + 80B].D.15209._M_local_buf != _120)
    goto <bb 197>;
  else
    goto <bb 198>;

  <bb 109>:
  _56 = _36 * 4;
  _57 = outport_16 + _56;

  <bb 110>:
  # nniter$_M_node_317 = PHI <nniter$_M_node_42(109), nniter$_M_node_235(196)>
  # DEBUG nniter$_M_node => nniter$_M_node_317
  # DEBUG this => &niter
  # DEBUG this => niter$_M_node_530
  # DEBUG D#1010 => &MEM[(struct _Rb_tree_node *)niter$_M_node_530]._M_value_field
  # DEBUG __r => D#1010
  # DEBUG D#1011 => &MEM[(struct pair *)niter$_M_node_530 + 32B].second
  # DEBUG this => D#1011
  # DEBUG D#78 => &D#1011->_M_t
  # DEBUG this => D#78
  # DEBUG this => NULL
  # DEBUG __x => _694
  # DEBUG this => &nniter
  # DEBUG __x => &D.56825
  # DEBUG this => &nniter
  # DEBUG this => nniter$_M_node_317
  # DEBUG D#992 => &MEM[(struct _Rb_tree_node *)nniter$_M_node_317]._M_value_field
  # DEBUG __r => D#992
  link_51 = MEM[(struct pair *)nniter$_M_node_317 + 32B].first;
  # DEBUG link => link_51
  # DEBUG this => &niter
  # DEBUG this => niter$_M_node_530
  # DEBUG D#993 => &MEM[(struct _Rb_tree_node *)niter$_M_node_530]._M_value_field
  # DEBUG __r => D#993
  # DEBUG D#1393 => &MEM[(struct pair *)niter$_M_node_530 + 32B].second
  # DEBUG this => D#1393
  # DEBUG __k => &link
  # DEBUG this => D#1393
  # DEBUG __x => &link
  # DEBUG D#396 => &D#1393->_M_t
  # DEBUG this => D#396
  # DEBUG __k => &link
  # DEBUG this => D#396
  __i$_M_node_478 = MEM[(struct _Rb_tree_node_base * *)niter$_M_node_530 + 56B];
  # DEBUG D#58 => D#396
  # DEBUG this => D#58
  # DEBUG D#395 => D#396
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &link
  # DEBUG __y => _694
  # DEBUG __x => __i$_M_node_478
  if (__i$_M_node_478 == 0B)
    goto <bb 267>;
  else
    goto <bb 113>;

  <bb 111>:
  # __i$_M_node_494 = PHI <__i$_M_node_482(115), __i$_M_node_483(116)>
  # __i$_M_node_493 = PHI <__i$_M_node_780(115), __i$_M_node_714(116)>
  # DEBUG __y => __i$_M_node_493
  # DEBUG __x => __i$_M_node_494
  if (__i$_M_node_494 == 0B)
    goto <bb 117>;
  else
    goto <bb 112>;

  <bb 112>:
  goto <bb 114>;

  <bb 113>:

  <bb 114>:
  # __i$_M_node_780 = PHI <__i$_M_node_478(113), __i$_M_node_494(112)>
  # __i$_M_node_714 = PHI <_694(113), __i$_M_node_493(112)>
  # DEBUG __y => __i$_M_node_714
  # DEBUG __x => __i$_M_node_780
  # DEBUG __x => __i$_M_node_780
  # DEBUG __x => __i$_M_node_780
  # DEBUG this => __i$_M_node_780
  # DEBUG D#391 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_780]._M_value_field
  # DEBUG __r => D#391
  # DEBUG __x => D#391
  # DEBUG this => D#133
  # DEBUG D#392 => &MEM[(const struct pair &)__i$_M_node_780 + 32].first
  # DEBUG D#393 => &D#394->_M_impl._M_key_compare
  # DEBUG D#52 => D#393
  _480 = MEM[(const int &)__i$_M_node_780 + 32];
  # DEBUG D#53 => D#392
  # DEBUG D#54 => &link
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (link_51 <= _480)
    goto <bb 115>;
  else
    goto <bb 116>;

  <bb 115>:
  # DEBUG __y => __i$_M_node_780
  __i$_M_node_482 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_780 + 16B];
  # DEBUG D#108 => __i$_M_node_780
  # DEBUG __x => D#108
  # DEBUG __x => NULL
  goto <bb 111>;

  <bb 116>:
  __i$_M_node_483 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_780 + 24B];
  # DEBUG D#107 => __i$_M_node_780
  # DEBUG __x => D#107
  # DEBUG __x => NULL
  goto <bb 111>;

  <bb 117>:
  # __i$_M_node_988 = PHI <__i$_M_node_493(111)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_988
  # DEBUG __i$_M_node => __i$_M_node_988
  # DEBUG this => D#1393
  # DEBUG D#78 => &D#1393->_M_t
  # DEBUG this => D#78
  # DEBUG this => NULL
  # DEBUG __x => _694
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (__i$_M_node_988 == _694)
    goto <bb 267>;
  else
    goto <bb 118>;

  <bb 118>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_988
  # DEBUG D#681 => &MEM[(struct _Rb_tree_node *)__i$_M_node_988]._M_value_field
  # DEBUG __r => D#681
  # DEBUG D#682 => &MEM[(struct pair &)__i$_M_node_988 + 32].first
  # DEBUG D#85 => D#1393
  # DEBUG this => D#85
  # DEBUG D#84 => D#85
  # DEBUG D#83 => &D#84->_M_t
  # DEBUG D#82 => D#83
  # DEBUG this => D#82
  # DEBUG D#53 => &link
  _486 = MEM[(const int &)__i$_M_node_988 + 32];
  # DEBUG D#54 => D#682
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (link_51 < _486)
    goto <bb 267>;
  else
    goto <bb 120>;

  <bb 119>:
  __i$_M_node_490 = MEM[(struct _Rb_tree_iterator *)&D.92938];
  # DEBUG __i$_M_node => __i$_M_node_490
  D.92939 ={v} {CLOBBER};

  <bb 120>:
  # __i$_M_node_491 = PHI <__i$_M_node_988(118), __i$_M_node_490(119)>
  # DEBUG __i$_M_node => __i$_M_node_491
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_491
  # DEBUG D#683 => &MEM[(struct _Rb_tree_node *)__i$_M_node_491]._M_value_field
  # DEBUG __r => D#683
  # DEBUG D#685 => {CLOBBER}
  # DEBUG __i$_M_node => D#685
  _58 = *_57;
  MEM[(struct mapped_type &)__i$_M_node_491 + 36].first = _58;
  _60 = _58 + 1;
  *_57 = _60;
  # DEBUG this => &nniter
  # DEBUG this => nniter$_M_node_317
  # DEBUG D#994 => &MEM[(struct _Rb_tree_node *)nniter$_M_node_317]._M_value_field
  # DEBUG __r => D#994
  _63 = MEM[(struct pair *)nniter$_M_node_317 + 32B].second.second;
  # DEBUG this => &nniter
  # DEBUG this => nniter$_M_node_317
  # DEBUG D#995 => &MEM[(struct _Rb_tree_node *)nniter$_M_node_317]._M_value_field
  # DEBUG __r => D#995
  _65 = MEM[(struct pair *)nniter$_M_node_317 + 32B].second.first;
  # DEBUG __out => &cout
  # DEBUG __s => "\t connected to node "
  # DEBUG __s => "\t connected to node "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "\t connected to node ", 20);
  goto <bb 122>;

<L49>:
  goto <bb 260> (<L18>);

  <bb 122>:
  _68 = std::basic_ostream<char>::operator<< (&cout, link_51);
  goto <bb 124>;

<L50>:
  goto <bb 260> (<L18>);

  <bb 124>:
  # DEBUG __out => _68
  # DEBUG __s => " at outport "
  # DEBUG __s => " at outport "
  std::__ostream_insert<char, std::char_traits<char> > (_68, " at outport ", 12);
  goto <bb 126>;

<L51>:
  goto <bb 260> (<L18>);

  <bb 126>:
  _70 = std::basic_ostream<char>::operator<< (_68, _65);
  goto <bb 128>;

<L52>:
  goto <bb 260> (<L18>);

  <bb 128>:
  # DEBUG __out => _70
  # DEBUG __s => " lat "
  # DEBUG __s => " lat "
  std::__ostream_insert<char, std::char_traits<char> > (_70, " lat ", 5);
  goto <bb 130>;

<L53>:
  goto <bb 260> (<L18>);

  <bb 130>:
  _72 = std::basic_ostream<char>::operator<< (_70, _63);
  goto <bb 132>;

<L54>:
  goto <bb 260> (<L18>);

  <bb 132>:
  # DEBUG this => _72
  # DEBUG __pf => endl
  # DEBUG __os => _72
  _54 = _72->_vptr.basic_ostream;
  _495 = MEM[(long int *)_54 + -24B];
  _496 = (sizetype) _495;
  _497 = _72 + _496;
  # DEBUG this => _497
  # DEBUG __c => 10
  _281 = MEM[(const struct basic_ios *)_497]._M_ctype;
  # DEBUG __f => _281
  if (_281 == 0B)
    goto <bb 133>;
  else
    goto <bb 135>;

  <bb 133>:
  std::__throw_bad_cast ();

<L55>:
  goto <bb 260> (<L18>);

  <bb 135>:
  # DEBUG this => _281
  # DEBUG __c => 10
  _502 = MEM[(const struct ctype *)_281]._M_widen_ok;
  if (_502 != 0)
    goto <bb 136>;
  else
    goto <bb 137>;

  <bb 136>:
  _505 = MEM[(const struct ctype *)_281]._M_widen[10];
  pretmp_302 = (int) _505;
  goto <bb 143>;

  <bb 137>:
  # DEBUG this => _281
  # DEBUG __c => 10
  std::ctype<char>::_M_widen_init (_281);
  goto <bb 139>;

<L56>:
  goto <bb 260> (<L18>);

  <bb 139>:
  _510 = MEM[(const struct ctype *)_281].D.21685._vptr.facet;
  _511 = MEM[(int (*__vtbl_ptr_type) () *)_510 + 48B];
  PROF_515 = [obj_type_ref] OBJ_TYPE_REF(_511;(const struct ctype)_281->6);
  if (PROF_515 == do_widen)
    goto <bb 143>;
  else
    goto <bb 140>;

  <bb 140>:
  _517 = OBJ_TYPE_REF(_511;(const struct ctype)_281->6) (_281, 10);
  goto <bb 142>;

<L57>:
  goto <bb 260> (<L18>);

  <bb 142>:
  pretmp_393 = (int) _517;

  <bb 143>:
  # prephitmp_1061 = PHI <pretmp_302(136), 10(139), pretmp_393(142)>
  _500 = std::basic_ostream<char>::put (_72, prephitmp_1061);
  goto <bb 145>;

<L58>:
  goto <bb 260> (<L18>);

  <bb 145>:
  # DEBUG __os => _500
  std::basic_ostream<char>::flush (_500);
  goto <bb 147>;

<L59>:
  goto <bb 260> (<L18>);

  <bb 147>:
  # DEBUG this => &nniter
  # DEBUG this => nniter$_M_node_317
  # DEBUG D#996 => &MEM[(struct _Rb_tree_node *)nniter$_M_node_317]._M_value_field
  # DEBUG __r => D#996
  _73 = MEM[(struct pair *)nniter$_M_node_317 + 32B].second.second;
  _75 = (long unsigned int) link_51;
  # DEBUG D#997 => &this_11(D)->D.47478._inject
  _195 = MEM[(struct FlitChannel * * *)this_11(D) + 136B];
  # DEBUG D#31 => D#997
  # DEBUG __n => _75
  # DEBUG this => D#31
  _219 = _75 * 8;
  _220 = _195 + _219;
  _76 = *_220;
  # DEBUG D#1396 => &_76->D.34745
  # DEBUG this => D#1396
  # DEBUG cycles => _73
  if (_73 <= 0)
    goto <bb 148>;
  else
    goto <bb 154>;

  <bb 148>:
  # DEBUG this => D#45
  # DEBUG D#44 => D#45
  # DEBUG this => D#44
  # DEBUG this => &D.92990
  # DEBUG __s => "Channel must have positive delay."
  # DEBUG __a => D#303
  # DEBUG D#302 => D#303
  # DEBUG this => &D.92990
  # DEBUG D#300 => &D.92990._M_dataplus
  # DEBUG D#118 => D#302
  # DEBUG this => D#300
  # DEBUG __dat => &D.92990.D.15209._M_local_buf
  # DEBUG __a => D#118
  # DEBUG D#117 => D#118
  # DEBUG D#115 => D#300
  # DEBUG D#116 => D#117
  # DEBUG this => D#115
  # DEBUG __a => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG this => D#113
  # DEBUG D.73458 => D#114
  MEM[(struct _Alloc_hider *)&D.92990]._M_p = &D.92990.D.15209._M_local_buf;
  # DEBUG __s => "Channel must have positive delay."
  # DEBUG this => &D.92990
  # DEBUG __beg => "Channel must have positive delay."
  # DEBUG __end => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG this => &D.92990
  # DEBUG __beg => "Channel must have positive delay."
  # DEBUG __end => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG this => &D.92990
  # DEBUG __beg => "Channel must have positive delay."
  # DEBUG __end => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG __ptr => "Channel must have positive delay."
  # DEBUG __first => "Channel must have positive delay."
  # DEBUG __last => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG D#487 => &__first
  # DEBUG D.77194 => D#487
  # DEBUG __first => "Channel must have positive delay."
  # DEBUG __last => &MEM[(void *)"Channel must have positive delay." + 33B]
  __dnew = 33;
  _532 = std::__cxx11::basic_string<char>::_M_create (&D.92990, &__dnew, 0);
  goto <bb 150>;

<L60>:
  goto <bb 260> (<L18>);

  <bb 150>:
  # DEBUG D#9 => &D.92990
  # DEBUG __p => _532
  # DEBUG this => D#9
  MEM[(char * *)&D.92990] = _532;
  __dnew.67_533 = __dnew;
  # DEBUG D#10 => &D.92990
  # DEBUG __capacity => __dnew.67_533
  # DEBUG this => D#10
  MEM[(size_type *)&D.92990 + 16B] = __dnew.67_533;
  # DEBUG D#1 => &D.92990
  # DEBUG this => D#1
  # DEBUG __p => _532
  # DEBUG __k1 => "Channel must have positive delay."
  # DEBUG __k2 => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG __d => _532
  # DEBUG __s => "Channel must have positive delay."
  # DEBUG __n => 33
  # DEBUG __s1 => _532
  # DEBUG __s2 => "Channel must have positive delay."
  # DEBUG __n => 33
  __builtin_memcpy (_532, "Channel must have positive delay.", 33);
  __dnew.67_536 = __dnew;
  # DEBUG this => &D.92990
  # DEBUG __n => __dnew.67_536
  # DEBUG D#4 => &D.92990
  # DEBUG __length => __dnew.67_536
  # DEBUG this => D#4
  MEM[(size_type *)&D.92990 + 8B] = __dnew.67_536;
  _537 = MEM[(char * *)&D.92990];
  # DEBUG D#1 => &D.92990
  # DEBUG this => D#1
  _538 = _537 + __dnew.67_536;
  # DEBUG __c1 => _538
  # DEBUG __c2 => D#23
  MEM[(char_type &)_538] = 0;
  __dnew ={v} {CLOBBER};
  _520 = &MEM[(struct Channel *)_76].D.34139.D.32618;
  Module::Error (_520, &D.92990);

  <bb 151>:
  # DEBUG this => &D.92990
  # DEBUG this => &D.92990
  # DEBUG this => &D.92990
  _521 = MEM[(char * *)&D.92990];
  # DEBUG D#1 => &D.92990
  # DEBUG this => D#1
  # DEBUG this => &D.92990
  if (&D.92990.D.15209._M_local_buf != _521)
    goto <bb 152>;
  else
    goto <bb 153>;

  <bb 152>:
  # DEBUG D#153 => D.92990.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.92990
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.92990
  # DEBUG this => D#1
  # DEBUG this => &D.92990
  # DEBUG D#150 => &D.92990._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _521
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _521
  # DEBUG this => D#144
  # DEBUG D.92981 => D#145
  operator delete (_521);

  <bb 153>:
  # DEBUG D#154 => &D.92990._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.92990 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  pretmp_878 = MEM[(struct pair *)nniter$_M_node_317 + 32B].second.second;

  <bb 154>:
  # prephitmp_902 = PHI <_73(147), pretmp_878(153)>
  MEM[(struct Channel *)_76]._delay = _73;
  # DEBUG this => &nniter
  # DEBUG this => nniter$_M_node_317
  # DEBUG D#998 => &MEM[(struct _Rb_tree_node *)nniter$_M_node_317]._M_value_field
  # DEBUG __r => D#998
  # DEBUG D#1402 => MEM[(struct pair *)nniter$_M_node_317 + 32B].second.second
  # DEBUG D#999 => &this_11(D)->D.47478._inject_cred
  _202 = MEM[(struct Channel * * *)this_11(D) + 160B];
  # DEBUG D#32 => D#999
  # DEBUG __n => _75
  # DEBUG this => D#32
  _222 = _202 + _219;
  _82 = *_222;
  # DEBUG this => _82
  # DEBUG cycles => D#1402
  if (prephitmp_902 <= 0)
    goto <bb 159>;
  else
    goto <bb 165>;

<L29>:
  # DEBUG this => &D.92990
  # DEBUG this => &D.92990
  # DEBUG this => &D.92990
  _522 = MEM[(char * *)&D.92990];
  # DEBUG D#1 => &D.92990
  # DEBUG this => D#1
  # DEBUG this => &D.92990
  if (&D.92990.D.15209._M_local_buf != _522)
    goto <bb 156>;
  else
    goto <bb 157>;

  <bb 156>:
  # DEBUG D#153 => D.92990.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.92990
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.92990
  # DEBUG this => D#1
  # DEBUG this => &D.92990
  # DEBUG D#150 => &D.92990._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _522
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _522
  # DEBUG this => D#144
  # DEBUG D.92966 => D#145
  operator delete (_522);

  <bb 157>:
  # DEBUG D#154 => &D.92990._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.92990 ={v} {CLOBBER};
  resx 28

<L61>:
  goto <bb 260> (<L18>);

  <bb 159>:
  # DEBUG this => D#45
  # DEBUG D#44 => D#45
  # DEBUG this => D#44
  # DEBUG this => &D.93072
  # DEBUG __s => "Channel must have positive delay."
  # DEBUG __a => D#303
  # DEBUG D#302 => D#303
  # DEBUG this => &D.93072
  # DEBUG D#300 => &D.93072._M_dataplus
  # DEBUG D#118 => D#302
  # DEBUG this => D#300
  # DEBUG __dat => &D.93072.D.15209._M_local_buf
  # DEBUG __a => D#118
  # DEBUG D#117 => D#118
  # DEBUG D#115 => D#300
  # DEBUG D#116 => D#117
  # DEBUG this => D#115
  # DEBUG __a => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG this => D#113
  # DEBUG D.73458 => D#114
  MEM[(struct _Alloc_hider *)&D.93072]._M_p = &D.93072.D.15209._M_local_buf;
  # DEBUG __s => "Channel must have positive delay."
  # DEBUG this => &D.93072
  # DEBUG __beg => "Channel must have positive delay."
  # DEBUG __end => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG this => &D.93072
  # DEBUG __beg => "Channel must have positive delay."
  # DEBUG __end => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG this => &D.93072
  # DEBUG __beg => "Channel must have positive delay."
  # DEBUG __end => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG __ptr => "Channel must have positive delay."
  # DEBUG __first => "Channel must have positive delay."
  # DEBUG __last => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG D#487 => &__first
  # DEBUG D.77194 => D#487
  # DEBUG __first => "Channel must have positive delay."
  # DEBUG __last => &MEM[(void *)"Channel must have positive delay." + 33B]
  __dnew = 33;
  _551 = std::__cxx11::basic_string<char>::_M_create (&D.93072, &__dnew, 0);
  goto <bb 161>;

<L62>:
  goto <bb 260> (<L18>);

  <bb 161>:
  # DEBUG D#9 => &D.93072
  # DEBUG __p => _551
  # DEBUG this => D#9
  MEM[(char * *)&D.93072] = _551;
  __dnew.67_552 = __dnew;
  # DEBUG D#10 => &D.93072
  # DEBUG __capacity => __dnew.67_552
  # DEBUG this => D#10
  MEM[(size_type *)&D.93072 + 16B] = __dnew.67_552;
  # DEBUG D#1 => &D.93072
  # DEBUG this => D#1
  # DEBUG __p => _551
  # DEBUG __k1 => "Channel must have positive delay."
  # DEBUG __k2 => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG __d => _551
  # DEBUG __s => "Channel must have positive delay."
  # DEBUG __n => 33
  # DEBUG __s1 => _551
  # DEBUG __s2 => "Channel must have positive delay."
  # DEBUG __n => 33
  __builtin_memcpy (_551, "Channel must have positive delay.", 33);
  __dnew.67_555 = __dnew;
  # DEBUG this => &D.93072
  # DEBUG __n => __dnew.67_555
  # DEBUG D#4 => &D.93072
  # DEBUG __length => __dnew.67_555
  # DEBUG this => D#4
  MEM[(size_type *)&D.93072 + 8B] = __dnew.67_555;
  _556 = MEM[(char * *)&D.93072];
  # DEBUG D#1 => &D.93072
  # DEBUG this => D#1
  _557 = _556 + __dnew.67_555;
  # DEBUG __c1 => _557
  # DEBUG __c2 => D#23
  MEM[(char_type &)_557] = 0;
  __dnew ={v} {CLOBBER};
  _539 = &_82->D.57864.D.32618;
  Module::Error (_539, &D.93072);

  <bb 162>:
  # DEBUG this => &D.93072
  # DEBUG this => &D.93072
  # DEBUG this => &D.93072
  _540 = MEM[(char * *)&D.93072];
  # DEBUG D#1 => &D.93072
  # DEBUG this => D#1
  # DEBUG this => &D.93072
  if (&D.93072.D.15209._M_local_buf != _540)
    goto <bb 163>;
  else
    goto <bb 164>;

  <bb 163>:
  # DEBUG D#153 => D.93072.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.93072
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.93072
  # DEBUG this => D#1
  # DEBUG this => &D.93072
  # DEBUG D#150 => &D.93072._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _540
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _540
  # DEBUG this => D#144
  # DEBUG D.93063 => D#145
  operator delete (_540);

  <bb 164>:
  # DEBUG D#154 => &D.93072._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.93072 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL

  <bb 165>:
  _82->_delay = prephitmp_902;
  # DEBUG this => &nniter
  # DEBUG this => nniter$_M_node_317
  # DEBUG D#1000 => &MEM[(struct _Rb_tree_node *)nniter$_M_node_317]._M_value_field
  # DEBUG __r => D#1000
  _84 = MEM[(struct pair *)nniter$_M_node_317 + 32B].second.second;
  # DEBUG D#1001 => &this_11(D)->D.47478._eject
  _196 = MEM[(struct FlitChannel * * *)this_11(D) + 184B];
  # DEBUG D#31 => D#1001
  # DEBUG __n => _75
  # DEBUG this => D#31
  _224 = _196 + _219;
  _87 = *_224;
  # DEBUG D#1395 => &_87->D.34745
  # DEBUG this => D#1395
  # DEBUG cycles => _84
  if (_84 <= 0)
    goto <bb 170>;
  else
    goto <bb 176>;

<L30>:
  # DEBUG this => &D.93072
  # DEBUG this => &D.93072
  # DEBUG this => &D.93072
  _541 = MEM[(char * *)&D.93072];
  # DEBUG D#1 => &D.93072
  # DEBUG this => D#1
  # DEBUG this => &D.93072
  if (&D.93072.D.15209._M_local_buf != _541)
    goto <bb 167>;
  else
    goto <bb 168>;

  <bb 167>:
  # DEBUG D#153 => D.93072.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.93072
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.93072
  # DEBUG this => D#1
  # DEBUG this => &D.93072
  # DEBUG D#150 => &D.93072._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _541
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _541
  # DEBUG this => D#144
  # DEBUG D.93048 => D#145
  operator delete (_541);

  <bb 168>:
  # DEBUG D#154 => &D.93072._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.93072 ={v} {CLOBBER};
  resx 29

<L63>:
  goto <bb 260> (<L18>);

  <bb 170>:
  # DEBUG this => D#45
  # DEBUG D#44 => D#45
  # DEBUG this => D#44
  # DEBUG this => &D.93154
  # DEBUG __s => "Channel must have positive delay."
  # DEBUG __a => D#303
  # DEBUG D#302 => D#303
  # DEBUG this => &D.93154
  # DEBUG D#300 => &D.93154._M_dataplus
  # DEBUG D#118 => D#302
  # DEBUG this => D#300
  # DEBUG __dat => &D.93154.D.15209._M_local_buf
  # DEBUG __a => D#118
  # DEBUG D#117 => D#118
  # DEBUG D#115 => D#300
  # DEBUG D#116 => D#117
  # DEBUG this => D#115
  # DEBUG __a => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG this => D#113
  # DEBUG D.73458 => D#114
  MEM[(struct _Alloc_hider *)&D.93154]._M_p = &D.93154.D.15209._M_local_buf;
  # DEBUG __s => "Channel must have positive delay."
  # DEBUG this => &D.93154
  # DEBUG __beg => "Channel must have positive delay."
  # DEBUG __end => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG this => &D.93154
  # DEBUG __beg => "Channel must have positive delay."
  # DEBUG __end => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG this => &D.93154
  # DEBUG __beg => "Channel must have positive delay."
  # DEBUG __end => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG __ptr => "Channel must have positive delay."
  # DEBUG __first => "Channel must have positive delay."
  # DEBUG __last => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG D#487 => &__first
  # DEBUG D.77194 => D#487
  # DEBUG __first => "Channel must have positive delay."
  # DEBUG __last => &MEM[(void *)"Channel must have positive delay." + 33B]
  __dnew = 33;
  _570 = std::__cxx11::basic_string<char>::_M_create (&D.93154, &__dnew, 0);
  goto <bb 172>;

<L64>:
  goto <bb 260> (<L18>);

  <bb 172>:
  # DEBUG D#9 => &D.93154
  # DEBUG __p => _570
  # DEBUG this => D#9
  MEM[(char * *)&D.93154] = _570;
  __dnew.67_571 = __dnew;
  # DEBUG D#10 => &D.93154
  # DEBUG __capacity => __dnew.67_571
  # DEBUG this => D#10
  MEM[(size_type *)&D.93154 + 16B] = __dnew.67_571;
  # DEBUG D#1 => &D.93154
  # DEBUG this => D#1
  # DEBUG __p => _570
  # DEBUG __k1 => "Channel must have positive delay."
  # DEBUG __k2 => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG __d => _570
  # DEBUG __s => "Channel must have positive delay."
  # DEBUG __n => 33
  # DEBUG __s1 => _570
  # DEBUG __s2 => "Channel must have positive delay."
  # DEBUG __n => 33
  __builtin_memcpy (_570, "Channel must have positive delay.", 33);
  __dnew.67_574 = __dnew;
  # DEBUG this => &D.93154
  # DEBUG __n => __dnew.67_574
  # DEBUG D#4 => &D.93154
  # DEBUG __length => __dnew.67_574
  # DEBUG this => D#4
  MEM[(size_type *)&D.93154 + 8B] = __dnew.67_574;
  _575 = MEM[(char * *)&D.93154];
  # DEBUG D#1 => &D.93154
  # DEBUG this => D#1
  _576 = _575 + __dnew.67_574;
  # DEBUG __c1 => _576
  # DEBUG __c2 => D#23
  MEM[(char_type &)_576] = 0;
  __dnew ={v} {CLOBBER};
  _558 = &MEM[(struct Channel *)_87].D.34139.D.32618;
  Module::Error (_558, &D.93154);

  <bb 173>:
  # DEBUG this => &D.93154
  # DEBUG this => &D.93154
  # DEBUG this => &D.93154
  _559 = MEM[(char * *)&D.93154];
  # DEBUG D#1 => &D.93154
  # DEBUG this => D#1
  # DEBUG this => &D.93154
  if (&D.93154.D.15209._M_local_buf != _559)
    goto <bb 174>;
  else
    goto <bb 175>;

  <bb 174>:
  # DEBUG D#153 => D.93154.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.93154
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.93154
  # DEBUG this => D#1
  # DEBUG this => &D.93154
  # DEBUG D#150 => &D.93154._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _559
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _559
  # DEBUG this => D#144
  # DEBUG D.93145 => D#145
  operator delete (_559);

  <bb 175>:
  # DEBUG D#154 => &D.93154._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.93154 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL

  <bb 176>:
  MEM[(struct Channel *)_87]._delay = _84;
  # DEBUG this => &nniter
  # DEBUG this => nniter$_M_node_317
  # DEBUG D#1002 => &MEM[(struct _Rb_tree_node *)nniter$_M_node_317]._M_value_field
  # DEBUG __r => D#1002
  _90 = MEM[(struct pair *)nniter$_M_node_317 + 32B].second.second;
  # DEBUG D#1003 => &this_11(D)->D.47478._eject_cred
  _203 = MEM[(struct Channel * * *)this_11(D) + 208B];
  # DEBUG D#32 => D#1003
  # DEBUG __n => _75
  # DEBUG this => D#32
  _226 = _203 + _219;
  _94 = *_226;
  # DEBUG this => _94
  # DEBUG cycles => _90
  if (_90 <= 0)
    goto <bb 181>;
  else
    goto <bb 187>;

<L31>:
  # DEBUG this => &D.93154
  # DEBUG this => &D.93154
  # DEBUG this => &D.93154
  _560 = MEM[(char * *)&D.93154];
  # DEBUG D#1 => &D.93154
  # DEBUG this => D#1
  # DEBUG this => &D.93154
  if (&D.93154.D.15209._M_local_buf != _560)
    goto <bb 178>;
  else
    goto <bb 179>;

  <bb 178>:
  # DEBUG D#153 => D.93154.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.93154
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.93154
  # DEBUG this => D#1
  # DEBUG this => &D.93154
  # DEBUG D#150 => &D.93154._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _560
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _560
  # DEBUG this => D#144
  # DEBUG D.93130 => D#145
  operator delete (_560);

  <bb 179>:
  # DEBUG D#154 => &D.93154._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.93154 ={v} {CLOBBER};
  resx 30

<L65>:
  goto <bb 260> (<L18>);

  <bb 181>:
  # DEBUG this => D#45
  # DEBUG D#44 => D#45
  # DEBUG this => D#44
  # DEBUG this => &D.93236
  # DEBUG __s => "Channel must have positive delay."
  # DEBUG __a => D#303
  # DEBUG D#302 => D#303
  # DEBUG this => &D.93236
  # DEBUG D#300 => &D.93236._M_dataplus
  # DEBUG D#118 => D#302
  # DEBUG this => D#300
  # DEBUG __dat => &D.93236.D.15209._M_local_buf
  # DEBUG __a => D#118
  # DEBUG D#117 => D#118
  # DEBUG D#115 => D#300
  # DEBUG D#116 => D#117
  # DEBUG this => D#115
  # DEBUG __a => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG this => D#113
  # DEBUG D.73458 => D#114
  MEM[(struct _Alloc_hider *)&D.93236]._M_p = &D.93236.D.15209._M_local_buf;
  # DEBUG __s => "Channel must have positive delay."
  # DEBUG this => &D.93236
  # DEBUG __beg => "Channel must have positive delay."
  # DEBUG __end => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG this => &D.93236
  # DEBUG __beg => "Channel must have positive delay."
  # DEBUG __end => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG this => &D.93236
  # DEBUG __beg => "Channel must have positive delay."
  # DEBUG __end => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG __ptr => "Channel must have positive delay."
  # DEBUG __first => "Channel must have positive delay."
  # DEBUG __last => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG D#487 => &__first
  # DEBUG D.77194 => D#487
  # DEBUG __first => "Channel must have positive delay."
  # DEBUG __last => &MEM[(void *)"Channel must have positive delay." + 33B]
  __dnew = 33;
  _589 = std::__cxx11::basic_string<char>::_M_create (&D.93236, &__dnew, 0);
  goto <bb 183>;

<L66>:
  goto <bb 260> (<L18>);

  <bb 183>:
  # DEBUG D#9 => &D.93236
  # DEBUG __p => _589
  # DEBUG this => D#9
  MEM[(char * *)&D.93236] = _589;
  __dnew.67_590 = __dnew;
  # DEBUG D#10 => &D.93236
  # DEBUG __capacity => __dnew.67_590
  # DEBUG this => D#10
  MEM[(size_type *)&D.93236 + 16B] = __dnew.67_590;
  # DEBUG D#1 => &D.93236
  # DEBUG this => D#1
  # DEBUG __p => _589
  # DEBUG __k1 => "Channel must have positive delay."
  # DEBUG __k2 => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG __d => _589
  # DEBUG __s => "Channel must have positive delay."
  # DEBUG __n => 33
  # DEBUG __s1 => _589
  # DEBUG __s2 => "Channel must have positive delay."
  # DEBUG __n => 33
  __builtin_memcpy (_589, "Channel must have positive delay.", 33);
  __dnew.67_593 = __dnew;
  # DEBUG this => &D.93236
  # DEBUG __n => __dnew.67_593
  # DEBUG D#4 => &D.93236
  # DEBUG __length => __dnew.67_593
  # DEBUG this => D#4
  MEM[(size_type *)&D.93236 + 8B] = __dnew.67_593;
  _594 = MEM[(char * *)&D.93236];
  # DEBUG D#1 => &D.93236
  # DEBUG this => D#1
  _595 = _594 + __dnew.67_593;
  # DEBUG __c1 => _595
  # DEBUG __c2 => D#23
  MEM[(char_type &)_595] = 0;
  __dnew ={v} {CLOBBER};
  _577 = &_94->D.57864.D.32618;
  Module::Error (_577, &D.93236);

  <bb 184>:
  # DEBUG this => &D.93236
  # DEBUG this => &D.93236
  # DEBUG this => &D.93236
  _578 = MEM[(char * *)&D.93236];
  # DEBUG D#1 => &D.93236
  # DEBUG this => D#1
  # DEBUG this => &D.93236
  if (&D.93236.D.15209._M_local_buf != _578)
    goto <bb 185>;
  else
    goto <bb 186>;

  <bb 185>:
  # DEBUG D#153 => D.93236.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.93236
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.93236
  # DEBUG this => D#1
  # DEBUG this => &D.93236
  # DEBUG D#150 => &D.93236._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _578
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _578
  # DEBUG this => D#144
  # DEBUG D.93227 => D#145
  operator delete (_578);

  <bb 186>:
  # DEBUG D#154 => &D.93236._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.93236 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL

  <bb 187>:
  _94->_delay = _90;
  # DEBUG D#1004 => &this_11(D)->D.47478._routers
  _211 = MEM[(struct Router * * *)this_11(D) + 112B];
  # DEBUG D#33 => D#1004
  # DEBUG __n => _36
  # DEBUG this => D#33
  _230 = _211 + _64;
  _97 = *_230;
  _98 = _97->D.42039.D.32618._vptr.Module;
  _99 = MEM[(int (*__vtbl_ptr_type) () *)_98 + 56B];
  # DEBUG D#1005 => &this_11(D)->D.47478._inject_cred
  _204 = MEM[(struct Channel * * *)this_11(D) + 160B];
  # DEBUG D#32 => D#1005
  # DEBUG __n => _75
  # DEBUG this => D#32
  _229 = _204 + _219;
  _103 = *_229;
  # DEBUG D#1006 => &this_11(D)->D.47478._inject
  _197 = MEM[(struct FlitChannel * * *)this_11(D) + 136B];
  # DEBUG D#31 => D#1006
  # DEBUG __n => _75
  # DEBUG this => D#31
  _227 = _197 + _219;
  _105 = *_227;
  OBJ_TYPE_REF(_99;(struct Router)_97->7) (_97, _105, _103);
  goto <bb 193>;

<L67>:
  goto <bb 260> (<L18>);

<L32>:
  # DEBUG this => &D.93236
  # DEBUG this => &D.93236
  # DEBUG this => &D.93236
  _579 = MEM[(char * *)&D.93236];
  # DEBUG D#1 => &D.93236
  # DEBUG this => D#1
  # DEBUG this => &D.93236
  if (&D.93236.D.15209._M_local_buf != _579)
    goto <bb 190>;
  else
    goto <bb 191>;

  <bb 190>:
  # DEBUG D#153 => D.93236.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.93236
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.93236
  # DEBUG this => D#1
  # DEBUG this => &D.93236
  # DEBUG D#150 => &D.93236._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _579
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _579
  # DEBUG this => D#144
  # DEBUG D.93212 => D#145
  operator delete (_579);

  <bb 191>:
  # DEBUG D#154 => &D.93236._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.93236 ={v} {CLOBBER};
  resx 31

<L68>:
  goto <bb 260> (<L18>);

  <bb 193>:
  # DEBUG D#1007 => &this_11(D)->D.47478._routers
  _212 = MEM[(struct Router * * *)this_11(D) + 112B];
  # DEBUG D#33 => D#1007
  # DEBUG __n => _36
  # DEBUG this => D#33
  _234 = _212 + _64;
  _108 = *_234;
  _109 = _108->D.42039.D.32618._vptr.Module;
  _110 = MEM[(int (*__vtbl_ptr_type) () *)_109 + 64B];
  # DEBUG D#1008 => &this_11(D)->D.47478._eject_cred
  _205 = MEM[(struct Channel * * *)this_11(D) + 208B];
  # DEBUG D#32 => D#1008
  # DEBUG __n => _75
  # DEBUG this => D#32
  _233 = _205 + _219;
  _114 = *_233;
  # DEBUG D#1009 => &this_11(D)->D.47478._eject
  _198 = MEM[(struct FlitChannel * * *)this_11(D) + 184B];
  # DEBUG D#31 => D#1009
  # DEBUG __n => _75
  # DEBUG this => D#31
  _231 = _198 + _219;
  _116 = *_231;
  OBJ_TYPE_REF(_110;(struct Router)_108->8) (_108, _116, _114);
  goto <bb 195>;

<L69>:
  goto <bb 260> (<L18>);

  <bb 195>:
  # DEBUG D#1390 => {CLOBBER}
  # DEBUG link => D#1390
  # DEBUG this => &nniter
  nniter$_M_node_235 = std::_Rb_tree_increment (nniter$_M_node_317);
  # DEBUG nniter$_M_node => nniter$_M_node_235
  # DEBUG nniter$_M_node => nniter$_M_node_235
  # DEBUG this => &niter
  # DEBUG this => niter$_M_node_530
  # DEBUG D#1010 => &MEM[(struct _Rb_tree_node *)niter$_M_node_530]._M_value_field
  # DEBUG __r => D#1010
  # DEBUG D#1011 => &MEM[(struct pair *)niter$_M_node_530 + 32B].second
  # DEBUG this => D#1011
  # DEBUG D#78 => &D#1011->_M_t
  # DEBUG this => D#78
  # DEBUG this => NULL
  # DEBUG __x => _694
  # DEBUG this => &nniter
  # DEBUG __x => &D.56825
  if (nniter$_M_node_235 != _694)
    goto <bb 196>;
  else
    goto <bb 108>;

  <bb 196>:
  goto <bb 110>;

  <bb 197>:
  # DEBUG D#153 => MEM[(struct basic_string *)D#156].D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => D#156
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => D#156
  # DEBUG this => D#1
  # DEBUG this => D#156
  # DEBUG D#150 => &MEM[(struct basic_string *)D#156]._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _120
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _120
  # DEBUG this => D#144
  # DEBUG D.93296 => D#145
  operator delete (_120);

  <bb 198>:
  # DEBUG D#154 => &MEM[(struct basic_string *)D#156]._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  MEM[(struct  &)&router_name + 80] ={v} {CLOBBER};
  # DEBUG D#155 => &MEM[(struct basic_stringbuf *)&router_name + 8B].D.50112
  # DEBUG this => D#155
  MEM[(struct basic_streambuf *)&router_name + 8B]._vptr.basic_streambuf = &MEM[(void *)&_ZTVSt15basic_streambufIcSt11char_traitsIcEE + 16B];
  std::locale::~locale (&MEM[(struct basic_streambuf *)&router_name + 8B]._M_buf_locale);
  MEM[(struct  &)&router_name + 8] ={v} {CLOBBER};
  # DEBUG this => &router_name.D.50262
  # DEBUG __vtt_parm => &MEM[(void *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 8B]
  iftmp.59_598 = MEM[(const void * *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 8B];
  _599 = MEM[(long int *)iftmp.59_598 + -24B];
  iftmp.60_600 = (sizetype) _599;
  _601 = &router_name.D.50262 + iftmp.60_600;
  iftmp.61_602 = MEM[(const void * *)&_ZTTNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEE + 16B];
  _601->D.24721._vptr.ios_base = iftmp.61_602;
  MEM[(struct  &)&router_name] ={v} {CLOBBER};
  # DEBUG D#160 => &router_name.D.50265
  # DEBUG this => D#160
  MEM[(struct basic_ios *)&router_name + 112B].D.24721._vptr.ios_base = &MEM[(void *)&_ZTVSt9basic_iosIcSt11char_traitsIcEE + 16B];
  std::ios_base::~ios_base (&MEM[(struct basic_ios *)&router_name + 112B].D.24721);
  # DEBUG D#1037 => {CLOBBER}
  # DEBUG riter$_M_node => D#1037
  router_name ={v} {CLOBBER};
  # DEBUG D#1038 => {CLOBBER}
  # DEBUG nniter$_M_node => D#1038
  # DEBUG this => &niter
  niter$_M_node_236 = std::_Rb_tree_increment (niter$_M_node_530);
  # DEBUG niter$_M_node => niter$_M_node_236
  # DEBUG niter$_M_node => niter$_M_node_236
  # DEBUG D#1012 => &this_11(D)->router_list
  _216 = MEM[(struct map * *)this_11(D) + 440B];
  # DEBUG D#34 => D#1012
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => NULL
  # DEBUG this => D#72
  _172 = &MEM[(struct _Rb_tree *)_216]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => _172
  # DEBUG this => &niter
  # DEBUG __x => &D.56767
  if (_172 != niter$_M_node_236)
    goto <bb 199>;
  else
    goto <bb 5>;

  <bb 199>:
  goto <bb 7>;

  <bb 200>:
  AnyNet::buildRoutingTable (this_11(D));
  # DEBUG D#1045 => {CLOBBER}
  # DEBUG niter$_M_node => D#1045
  return;

  <bb 201>:

  <bb 202>:
  # channel_count_501 = PHI <0(201), channel_count_528(254)>
  # niter$_M_node_316 = PHI <niter$_M_node_122(201), niter$_M_node_264(254)>
  # _531 = PHI <_217(201), _218(254)>
  # DEBUG niter$_M_node => niter$_M_node_316
  # DEBUG channel_count => channel_count_501
  # DEBUG D#1036 => &this_11(D)->router_list
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => NULL
  # DEBUG this => D#72
  # DEBUG this => NULL
  # DEBUG __x => _314
  # DEBUG this => &niter
  # DEBUG __x => &D.57874
  # DEBUG this => &niter
  # DEBUG this => niter$_M_node_316
  # DEBUG D#1014 => &MEM[(struct _Rb_tree_node *)niter$_M_node_316]._M_value_field
  # DEBUG __r => D#1014
  # DEBUG D#1015 => &MEM[(struct pair *)niter$_M_node_316 + 32B].first
  # DEBUG D#1016 => &this_11(D)->router_list
  # DEBUG D#34 => D#1016
  # DEBUG __n => 1
  # DEBUG this => D#34
  # DEBUG this => NULL
  # DEBUG __x => D#1015
  # DEBUG this => D#320
  # DEBUG __k => D#1015
  # DEBUG this => D#320
  __y_238 = &MEM[(struct _Rb_tree *)_531 + 48B]._M_impl._M_header;
  __y_239 = MEM[(struct _Rb_tree_node_base * *)_531 + 64B];
  # DEBUG D#42 => D#320
  # DEBUG this => D#42
  # DEBUG D#310 => D#320
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => D#1015
  # DEBUG __y => __y_238
  # DEBUG __x => __y_239
  if (__y_239 == 0B)
    goto <bb 204>;
  else
    goto <bb 203>;

  <bb 203>:
  pretmp_294 = MEM[(struct pair *)niter$_M_node_316 + 32B].first;
  goto <bb 207>;

  <bb 204>:
  pretmp_994 = MEM[(struct pair *)niter$_M_node_316 + 32B].first;
  goto <bb 213>;

  <bb 205>:
  # __y_710 = PHI <__y_244(209), __y_243(208)>
  # __y_341 = PHI <__y_388(209), __y_426(208)>
  # DEBUG __y => __y_341
  # DEBUG __x => __y_710
  if (__y_710 == 0B)
    goto <bb 210>;
  else
    goto <bb 206>;

  <bb 206>:

  <bb 207>:
  # __y_426 = PHI <__y_239(203), __y_710(206)>
  # __y_388 = PHI <__y_238(203), __y_341(206)>
  # DEBUG __y => __y_388
  # DEBUG __x => __y_426
  # DEBUG __x => __y_426
  # DEBUG __x => __y_426
  # DEBUG this => __y_426
  # DEBUG D#306 => &MEM[(const struct _Rb_tree_node *)__y_426]._M_value_field
  # DEBUG __r => D#306
  # DEBUG __x => D#306
  # DEBUG this => D#123
  # DEBUG D#307 => &MEM[(const struct pair &)__y_426 + 32].first
  # DEBUG D#308 => &D#309->_M_impl._M_key_compare
  # DEBUG D#52 => D#308
  _241 = MEM[(const int &)__y_426 + 32];
  # DEBUG D#53 => D#307
  # DEBUG D#54 => D#1015
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_241 >= pretmp_294)
    goto <bb 208>;
  else
    goto <bb 209>;

  <bb 208>:
  # DEBUG __y => __y_426
  __y_243 = MEM[(struct _Rb_tree_node_base * *)__y_426 + 16B];
  # DEBUG D#66 => __y_426
  # DEBUG __x => D#66
  # DEBUG __x => NULL
  goto <bb 205>;

  <bb 209>:
  __y_244 = MEM[(struct _Rb_tree_node_base * *)__y_426 + 24B];
  # DEBUG D#65 => __y_426
  # DEBUG __x => D#65
  # DEBUG __x => NULL
  goto <bb 205>;

  <bb 210>:
  # __y_992 = PHI <__y_341(205)>
  # DEBUG this => NULL
  # DEBUG __x => __y_992
  # DEBUG __j$_M_node => __y_992
  # DEBUG this => D#320
  # DEBUG this => NULL
  # DEBUG __x => __y_238
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (__y_238 == __y_992)
    goto <bb 213>;
  else
    goto <bb 211>;

  <bb 211>:
  # DEBUG __x => __y_992
  # DEBUG __x => __y_992
  # DEBUG this => __y_992
  # DEBUG D#316 => &MEM[(const struct _Rb_tree_node *)__y_992]._M_value_field
  # DEBUG __r => D#316
  # DEBUG __x => D#316
  # DEBUG this => D#123
  # DEBUG D#317 => &MEM[(const struct pair &)__y_992 + 32].first
  # DEBUG D#319 => &MEM[(struct _Rb_tree *)D#320]._M_impl._M_key_compare
  # DEBUG D#52 => D#319
  # DEBUG D#53 => D#1015
  _247 = MEM[(const int &)__y_992 + 32];
  # DEBUG D#54 => D#317
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (_247 > pretmp_294)
    goto <bb 213>;
  else
    goto <bb 212>;

  <bb 212>:

  <bb 213>:
  # __y_248 = PHI <__y_992(210), __y_238(211), __y_992(212), __y_238(204)>
  # prephitmp_998 = PHI <pretmp_294(210), pretmp_294(211), pretmp_294(212), pretmp_994(204)>
  # DEBUG D#318 => {CLOBBER}
  # DEBUG __j$_M_node => D#318
  # DEBUG riter$_M_node => __y_248
  # DEBUG this => &niter
  # DEBUG this => niter$_M_node_316
  # DEBUG D#1017 => &MEM[(struct _Rb_tree_node *)niter$_M_node_316]._M_value_field
  # DEBUG __r => D#1017
  # DEBUG D#1401 => MEM[(struct pair *)niter$_M_node_316 + 32B].first
  # DEBUG node => D#1401
  # DEBUG this => &rriter
  # DEBUG rriter$_M_node => 0B
  # DEBUG __out => &cout
  # DEBUG __s => "router "
  # DEBUG __s => "router "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "router ", 7);
  _137 = std::basic_ostream<char>::operator<< (&cout, prephitmp_998);
  # DEBUG this => _137
  # DEBUG __pf => endl
  # DEBUG __os => _137
  _615 = _137->_vptr.basic_ostream;
  _616 = MEM[(long int *)_615 + -24B];
  _617 = (sizetype) _616;
  _618 = _137 + _617;
  # DEBUG this => _618
  # DEBUG __c => 10
  _289 = MEM[(const struct basic_ios *)_618]._M_ctype;
  # DEBUG __f => _289
  if (_289 == 0B)
    goto <bb 19>;
  else
    goto <bb 214>;

  <bb 214>:
  # DEBUG this => _289
  # DEBUG __c => 10
  _623 = MEM[(const struct ctype *)_289]._M_widen_ok;
  if (_623 != 0)
    goto <bb 215>;
  else
    goto <bb 216>;

  <bb 215>:
  _626 = MEM[(const struct ctype *)_289]._M_widen[10];
  pretmp_1000 = (int) _626;
  goto <bb 218>;

  <bb 216>:
  # DEBUG this => _289
  # DEBUG __c => 10
  std::ctype<char>::_M_widen_init (_289);
  _631 = MEM[(const struct ctype *)_289].D.21685._vptr.facet;
  _632 = MEM[(int (*__vtbl_ptr_type) () *)_631 + 48B];
  PROF_636 = [obj_type_ref] OBJ_TYPE_REF(_632;(const struct ctype)_289->6);
  if (PROF_636 == do_widen)
    goto <bb 218>;
  else
    goto <bb 217>;

  <bb 217>:
  _638 = OBJ_TYPE_REF(_632;(const struct ctype)_289->6) (_289, 10);
  pretmp_1005 = (int) _638;

  <bb 218>:
  # prephitmp_6 = PHI <pretmp_1000(215), 10(216), pretmp_1005(217)>
  _621 = std::basic_ostream<char>::put (_137, prephitmp_6);
  # DEBUG __os => _621
  std::basic_ostream<char>::flush (_621);
  # DEBUG this => &riter
  # DEBUG this => __y_248
  # DEBUG D#1018 => &__y_248->_M_value_field
  # DEBUG __r => D#1018
  # DEBUG D#1019 => &MEM[(struct pair *)__y_248 + 32B].second
  # DEBUG this => D#1019
  # DEBUG D#77 => &D#1019->_M_t
  rriter$_M_node_138 = MEM[(struct _Rb_tree_node_base * *)__y_248 + 64B];
  # DEBUG D#76 => D#77
  # DEBUG this => D#76
  # DEBUG this => NULL
  # DEBUG __x => rriter$_M_node_138
  # DEBUG rriter$_M_node => rriter$_M_node_138
  # DEBUG rriter$_M_node => rriter$_M_node_138
  # DEBUG channel_count => channel_count_501
  # DEBUG this => &riter
  # DEBUG this => __y_248
  # DEBUG D#1034 => &__y_248->_M_value_field
  # DEBUG __r => D#1034
  # DEBUG D#1035 => &MEM[(struct pair *)__y_248 + 32B].second
  # DEBUG this => D#1035
  # DEBUG D#78 => &D#1035->_M_t
  # DEBUG this => D#78
  _232 = &MEM[(struct _Rb_tree *)__y_248 + 40B]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => _232
  # DEBUG this => &rriter
  # DEBUG __x => &D.57880
  if (rriter$_M_node_138 != _232)
    goto <bb 219>;
  else
    goto <bb 253>;

  <bb 219>:
  pretmp_398 = (long unsigned int) prephitmp_998;
  pretmp_5 = pretmp_398 * 4;
  pretmp_194 = outport_16 + pretmp_5;
  _257 = pretmp_398 * 8;

  <bb 220>:
  # channel_count_77 = PHI <channel_count_501(219), channel_count_188(249)>
  # rriter$_M_node_504 = PHI <rriter$_M_node_138(219), rriter$_M_node_263(249)>
  # DEBUG rriter$_M_node => rriter$_M_node_504
  # DEBUG channel_count => channel_count_77
  # DEBUG this => &riter
  # DEBUG this => __y_248
  # DEBUG D#1034 => &__y_248->_M_value_field
  # DEBUG __r => D#1034
  # DEBUG D#1035 => &MEM[(struct pair *)__y_248 + 32B].second
  # DEBUG this => D#1035
  # DEBUG D#78 => &D#1035->_M_t
  # DEBUG this => D#78
  # DEBUG this => NULL
  # DEBUG __x => _232
  # DEBUG this => &rriter
  # DEBUG __x => &D.57880
  # DEBUG this => &rriter
  # DEBUG this => rriter$_M_node_504
  # DEBUG D#1020 => &MEM[(struct _Rb_tree_node *)rriter$_M_node_504]._M_value_field
  # DEBUG __r => D#1020
  other_node_140 = MEM[(struct pair *)rriter$_M_node_504 + 32B].first;
  # DEBUG other_node => other_node_140
  # DEBUG link => channel_count_77
  # DEBUG this => &riter
  # DEBUG this => __y_248
  # DEBUG D#1021 => &__y_248->_M_value_field
  # DEBUG __r => D#1021
  # DEBUG D#1394 => &MEM[(struct pair *)__y_248 + 32B].second
  # DEBUG this => D#1394
  # DEBUG __k => &other_node
  # DEBUG this => D#1394
  # DEBUG __x => &other_node
  # DEBUG D#396 => &D#1394->_M_t
  # DEBUG this => D#396
  # DEBUG __k => &other_node
  # DEBUG this => D#396
  __i$_M_node_653 = MEM[(struct _Rb_tree_node_base * *)__y_248 + 56B];
  # DEBUG D#58 => D#396
  # DEBUG this => D#58
  # DEBUG D#395 => D#396
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &other_node
  # DEBUG __y => _232
  # DEBUG __x => __i$_M_node_653
  if (__i$_M_node_653 == 0B)
    goto <bb 269>;
  else
    goto <bb 223>;

  <bb 221>:
  # __i$_M_node_249 = PHI <__i$_M_node_657(225), __i$_M_node_658(226)>
  # __i$_M_node_250 = PHI <__i$_M_node_326(225), __i$_M_node_351(226)>
  # DEBUG __y => __i$_M_node_250
  # DEBUG __x => __i$_M_node_249
  if (__i$_M_node_249 == 0B)
    goto <bb 227>;
  else
    goto <bb 222>;

  <bb 222>:
  goto <bb 224>;

  <bb 223>:

  <bb 224>:
  # __i$_M_node_326 = PHI <__i$_M_node_653(223), __i$_M_node_249(222)>
  # __i$_M_node_351 = PHI <_232(223), __i$_M_node_250(222)>
  # DEBUG __y => __i$_M_node_351
  # DEBUG __x => __i$_M_node_326
  # DEBUG __x => __i$_M_node_326
  # DEBUG __x => __i$_M_node_326
  # DEBUG this => __i$_M_node_326
  # DEBUG D#391 => &MEM[(const struct _Rb_tree_node *)__i$_M_node_326]._M_value_field
  # DEBUG __r => D#391
  # DEBUG __x => D#391
  # DEBUG this => D#133
  # DEBUG D#392 => &MEM[(const struct pair &)__i$_M_node_326 + 32].first
  # DEBUG D#393 => &D#394->_M_impl._M_key_compare
  # DEBUG D#52 => D#393
  _655 = MEM[(const int &)__i$_M_node_326 + 32];
  # DEBUG D#53 => D#392
  # DEBUG D#54 => &other_node
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (other_node_140 <= _655)
    goto <bb 225>;
  else
    goto <bb 226>;

  <bb 225>:
  # DEBUG __y => __i$_M_node_326
  __i$_M_node_657 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_326 + 16B];
  # DEBUG D#108 => __i$_M_node_326
  # DEBUG __x => D#108
  # DEBUG __x => NULL
  goto <bb 221>;

  <bb 226>:
  __i$_M_node_658 = MEM[(struct _Rb_tree_node_base * *)__i$_M_node_326 + 24B];
  # DEBUG D#107 => __i$_M_node_326
  # DEBUG __x => D#107
  # DEBUG __x => NULL
  goto <bb 221>;

  <bb 227>:
  # __i$_M_node_1028 = PHI <__i$_M_node_250(221)>
  # DEBUG this => NULL
  # DEBUG __x => __i$_M_node_1028
  # DEBUG __i$_M_node => __i$_M_node_1028
  # DEBUG this => D#1394
  # DEBUG D#78 => &D#1394->_M_t
  # DEBUG this => D#78
  # DEBUG this => NULL
  # DEBUG __x => _232
  # DEBUG this => &__i
  # DEBUG __x => NULL
  if (_232 == __i$_M_node_1028)
    goto <bb 269>;
  else
    goto <bb 228>;

  <bb 228>:
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_1028
  # DEBUG D#681 => &MEM[(struct _Rb_tree_node *)__i$_M_node_1028]._M_value_field
  # DEBUG __r => D#681
  # DEBUG D#682 => &MEM[(struct pair &)__i$_M_node_1028 + 32].first
  # DEBUG D#85 => D#1394
  # DEBUG this => D#85
  # DEBUG D#84 => D#85
  # DEBUG D#83 => &D#84->_M_t
  # DEBUG D#82 => D#83
  # DEBUG this => D#82
  # DEBUG D#53 => &other_node
  _661 = MEM[(const int &)__i$_M_node_1028 + 32];
  # DEBUG D#54 => D#682
  # DEBUG this => D#52
  # DEBUG __x => D#53
  # DEBUG __y => D#54
  if (other_node_140 < _661)
    goto <bb 269>;
  else
    goto <bb 229>;

  <bb 229>:
  # __i$_M_node_666 = PHI <__i$_M_node_1028(228), __i$_M_node_665(269)>
  # DEBUG __i$_M_node => __i$_M_node_666
  # DEBUG this => &__i
  # DEBUG this => __i$_M_node_666
  # DEBUG D#683 => &MEM[(struct _Rb_tree_node *)__i$_M_node_666]._M_value_field
  # DEBUG __r => D#683
  # DEBUG D#685 => {CLOBBER}
  # DEBUG __i$_M_node => D#685
  _148 = *pretmp_194;
  MEM[(struct mapped_type &)__i$_M_node_666 + 36].first = _148;
  _150 = _148 + 1;
  *pretmp_194 = _150;
  # DEBUG this => &rriter
  # DEBUG this => rriter$_M_node_504
  # DEBUG D#1022 => &MEM[(struct _Rb_tree_node *)rriter$_M_node_504]._M_value_field
  # DEBUG __r => D#1022
  _153 = MEM[(struct pair *)rriter$_M_node_504 + 32B].second.second;
  # DEBUG this => &rriter
  # DEBUG this => rriter$_M_node_504
  # DEBUG D#1023 => &MEM[(struct _Rb_tree_node *)rriter$_M_node_504]._M_value_field
  # DEBUG __r => D#1023
  _154 = MEM[(struct pair *)rriter$_M_node_504 + 32B].second.first;
  # DEBUG __out => &cout
  # DEBUG __s => "\t connected to router "
  # DEBUG __s => "\t connected to router "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "\t connected to router ", 22);
  _157 = std::basic_ostream<char>::operator<< (&cout, other_node_140);
  # DEBUG __out => _157
  # DEBUG __s => " using link "
  # DEBUG __s => " using link "
  std::__ostream_insert<char, std::char_traits<char> > (_157, " using link ", 12);
  _159 = std::basic_ostream<char>::operator<< (_157, channel_count_77);
  # DEBUG __out => _159
  # DEBUG __s => " at outport "
  # DEBUG __s => " at outport "
  std::__ostream_insert<char, std::char_traits<char> > (_159, " at outport ", 12);
  _161 = std::basic_ostream<char>::operator<< (_159, _154);
  # DEBUG __out => _161
  # DEBUG __s => " lat "
  # DEBUG __s => " lat "
  std::__ostream_insert<char, std::char_traits<char> > (_161, " lat ", 5);
  _163 = std::basic_ostream<char>::operator<< (_161, _153);
  # DEBUG this => _163
  # DEBUG __pf => endl
  # DEBUG __os => _163
  _168 = _163->_vptr.basic_ostream;
  _646 = MEM[(long int *)_168 + -24B];
  _647 = (sizetype) _646;
  _648 = _163 + _647;
  # DEBUG this => _648
  # DEBUG __c => 10
  _143 = MEM[(const struct basic_ios *)_648]._M_ctype;
  # DEBUG __f => _143
  if (_143 == 0B)
    goto <bb 19>;
  else
    goto <bb 230>;

  <bb 230>:
  # DEBUG this => _143
  # DEBUG __c => 10
  _670 = MEM[(const struct ctype *)_143]._M_widen_ok;
  if (_670 != 0)
    goto <bb 231>;
  else
    goto <bb 232>;

  <bb 231>:
  _673 = MEM[(const struct ctype *)_143]._M_widen[10];
  pretmp_96 = (int) _673;
  goto <bb 234>;

  <bb 232>:
  # DEBUG this => _143
  # DEBUG __c => 10
  std::ctype<char>::_M_widen_init (_143);
  _678 = MEM[(const struct ctype *)_143].D.21685._vptr.facet;
  _679 = MEM[(int (*__vtbl_ptr_type) () *)_678 + 48B];
  PROF_683 = [obj_type_ref] OBJ_TYPE_REF(_679;(const struct ctype)_143->6);
  if (PROF_683 == do_widen)
    goto <bb 234>;
  else
    goto <bb 233>;

  <bb 233>:
  _685 = OBJ_TYPE_REF(_679;(const struct ctype)_143->6) (_143, 10);
  pretmp_569 = (int) _685;

  <bb 234>:
  # prephitmp_167 = PHI <pretmp_96(231), 10(232), pretmp_569(233)>
  _651 = std::basic_ostream<char>::put (_163, prephitmp_167);
  # DEBUG __os => _651
  std::basic_ostream<char>::flush (_651);
  # DEBUG this => &rriter
  # DEBUG this => rriter$_M_node_504
  # DEBUG D#1024 => &MEM[(struct _Rb_tree_node *)rriter$_M_node_504]._M_value_field
  # DEBUG __r => D#1024
  _164 = MEM[(struct pair *)rriter$_M_node_504 + 32B].second.second;
  _165 = (long unsigned int) channel_count_77;
  # DEBUG D#1025 => &this_11(D)->D.47478._chan
  _199 = MEM[(struct FlitChannel * * *)this_11(D) + 232B];
  # DEBUG D#31 => D#1025
  # DEBUG __n => _165
  # DEBUG this => D#31
  _252 = _165 * 8;
  _253 = _199 + _252;
  _166 = *_253;
  # DEBUG D#1398 => &_166->D.34745
  # DEBUG this => D#1398
  # DEBUG cycles => _164
  if (_164 <= 0)
    goto <bb 235>;
  else
    goto <bb 239>;

  <bb 235>:
  # DEBUG this => D#45
  # DEBUG D#44 => D#45
  # DEBUG this => D#44
  # DEBUG this => &D.93404
  # DEBUG __s => "Channel must have positive delay."
  # DEBUG __a => D#303
  # DEBUG D#302 => D#303
  # DEBUG this => &D.93404
  # DEBUG D#300 => &D.93404._M_dataplus
  # DEBUG D#118 => D#302
  # DEBUG this => D#300
  # DEBUG __dat => &D.93404.D.15209._M_local_buf
  # DEBUG __a => D#118
  # DEBUG D#117 => D#118
  # DEBUG D#115 => D#300
  # DEBUG D#116 => D#117
  # DEBUG this => D#115
  # DEBUG __a => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG this => D#113
  # DEBUG D.73458 => D#114
  MEM[(struct _Alloc_hider *)&D.93404]._M_p = &D.93404.D.15209._M_local_buf;
  # DEBUG __s => "Channel must have positive delay."
  # DEBUG this => &D.93404
  # DEBUG __beg => "Channel must have positive delay."
  # DEBUG __end => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG this => &D.93404
  # DEBUG __beg => "Channel must have positive delay."
  # DEBUG __end => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG this => &D.93404
  # DEBUG __beg => "Channel must have positive delay."
  # DEBUG __end => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG __ptr => "Channel must have positive delay."
  # DEBUG __first => "Channel must have positive delay."
  # DEBUG __last => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG D#487 => &__first
  # DEBUG D.77194 => D#487
  # DEBUG __first => "Channel must have positive delay."
  # DEBUG __last => &MEM[(void *)"Channel must have positive delay." + 33B]
  __dnew = 33;
  _698 = std::__cxx11::basic_string<char>::_M_create (&D.93404, &__dnew, 0);
  # DEBUG D#9 => &D.93404
  # DEBUG __p => _698
  # DEBUG this => D#9
  MEM[(char * *)&D.93404] = _698;
  __dnew.67_699 = __dnew;
  # DEBUG D#10 => &D.93404
  # DEBUG __capacity => __dnew.67_699
  # DEBUG this => D#10
  MEM[(size_type *)&D.93404 + 16B] = __dnew.67_699;
  # DEBUG D#1 => &D.93404
  # DEBUG this => D#1
  # DEBUG __p => _698
  # DEBUG __k1 => "Channel must have positive delay."
  # DEBUG __k2 => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG __d => _698
  # DEBUG __s => "Channel must have positive delay."
  # DEBUG __n => 33
  # DEBUG __s1 => _698
  # DEBUG __s2 => "Channel must have positive delay."
  # DEBUG __n => 33
  __builtin_memcpy (_698, "Channel must have positive delay.", 33);
  __dnew.67_702 = __dnew;
  # DEBUG this => &D.93404
  # DEBUG __n => __dnew.67_702
  # DEBUG D#4 => &D.93404
  # DEBUG __length => __dnew.67_702
  # DEBUG this => D#4
  MEM[(size_type *)&D.93404 + 8B] = __dnew.67_702;
  _703 = MEM[(char * *)&D.93404];
  # DEBUG D#1 => &D.93404
  # DEBUG this => D#1
  _704 = _703 + __dnew.67_702;
  # DEBUG __c1 => _704
  # DEBUG __c2 => D#23
  MEM[(char_type &)_704] = 0;
  __dnew ={v} {CLOBBER};
  _171 = &MEM[(struct Channel *)_166].D.34139.D.32618;
  Module::Error (_171, &D.93404);

  <bb 236>:
  # DEBUG this => &D.93404
  # DEBUG this => &D.93404
  # DEBUG this => &D.93404
  _644 = MEM[(char * *)&D.93404];
  # DEBUG D#1 => &D.93404
  # DEBUG this => D#1
  # DEBUG this => &D.93404
  if (&D.93404.D.15209._M_local_buf != _644)
    goto <bb 237>;
  else
    goto <bb 238>;

  <bb 237>:
  # DEBUG D#153 => D.93404.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.93404
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.93404
  # DEBUG this => D#1
  # DEBUG this => &D.93404
  # DEBUG D#150 => &D.93404._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _644
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _644
  # DEBUG this => D#144
  # DEBUG D.93395 => D#145
  operator delete (_644);

  <bb 238>:
  # DEBUG D#154 => &D.93404._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.93404 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  pretmp_373 = MEM[(struct pair *)rriter$_M_node_504 + 32B].second.second;

  <bb 239>:
  # prephitmp_588 = PHI <_164(234), pretmp_373(238)>
  MEM[(struct Channel *)_166]._delay = _164;
  # DEBUG this => &rriter
  # DEBUG this => rriter$_M_node_504
  # DEBUG D#1026 => &MEM[(struct _Rb_tree_node *)rriter$_M_node_504]._M_value_field
  # DEBUG __r => D#1026
  # DEBUG D#1400 => MEM[(struct pair *)rriter$_M_node_504 + 32B].second.second
  # DEBUG D#1027 => &this_11(D)->D.47478._chan_cred
  _206 = MEM[(struct Channel * * *)this_11(D) + 256B];
  # DEBUG D#32 => D#1027
  # DEBUG __n => _165
  # DEBUG this => D#32
  _254 = _206 + _252;
  _170 = *_254;
  # DEBUG this => _170
  # DEBUG cycles => D#1400
  if (prephitmp_588 <= 0)
    goto <bb 243>;
  else
    goto <bb 247>;

<L34>:
  # DEBUG this => &D.93404
  # DEBUG this => &D.93404
  # DEBUG this => &D.93404
  _645 = MEM[(char * *)&D.93404];
  # DEBUG D#1 => &D.93404
  # DEBUG this => D#1
  # DEBUG this => &D.93404
  if (&D.93404.D.15209._M_local_buf != _645)
    goto <bb 241>;
  else
    goto <bb 242>;

  <bb 241>:
  # DEBUG D#153 => D.93404.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.93404
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.93404
  # DEBUG this => D#1
  # DEBUG this => &D.93404
  # DEBUG D#150 => &D.93404._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _645
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _645
  # DEBUG this => D#144
  # DEBUG D.93380 => D#145
  operator delete (_645);

  <bb 242>:
  # DEBUG D#154 => &D.93404._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.93404 ={v} {CLOBBER};
  resx 33

  <bb 243>:
  # DEBUG this => D#45
  # DEBUG D#44 => D#45
  # DEBUG this => D#44
  # DEBUG this => &D.93367
  # DEBUG __s => "Channel must have positive delay."
  # DEBUG __a => D#303
  # DEBUG D#302 => D#303
  # DEBUG this => &D.93367
  # DEBUG D#300 => &D.93367._M_dataplus
  # DEBUG D#118 => D#302
  # DEBUG this => D#300
  # DEBUG __dat => &D.93367.D.15209._M_local_buf
  # DEBUG __a => D#118
  # DEBUG D#117 => D#118
  # DEBUG D#115 => D#300
  # DEBUG D#116 => D#117
  # DEBUG this => D#115
  # DEBUG __a => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG this => D#113
  # DEBUG D.73458 => D#114
  MEM[(struct _Alloc_hider *)&D.93367]._M_p = &D.93367.D.15209._M_local_buf;
  # DEBUG __s => "Channel must have positive delay."
  # DEBUG this => &D.93367
  # DEBUG __beg => "Channel must have positive delay."
  # DEBUG __end => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG this => &D.93367
  # DEBUG __beg => "Channel must have positive delay."
  # DEBUG __end => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG this => &D.93367
  # DEBUG __beg => "Channel must have positive delay."
  # DEBUG __end => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG __ptr => "Channel must have positive delay."
  # DEBUG __first => "Channel must have positive delay."
  # DEBUG __last => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG D#487 => &__first
  # DEBUG D.77194 => D#487
  # DEBUG __first => "Channel must have positive delay."
  # DEBUG __last => &MEM[(void *)"Channel must have positive delay." + 33B]
  __dnew = 33;
  _715 = std::__cxx11::basic_string<char>::_M_create (&D.93367, &__dnew, 0);
  # DEBUG D#9 => &D.93367
  # DEBUG __p => _715
  # DEBUG this => D#9
  MEM[(char * *)&D.93367] = _715;
  __dnew.67_716 = __dnew;
  # DEBUG D#10 => &D.93367
  # DEBUG __capacity => __dnew.67_716
  # DEBUG this => D#10
  MEM[(size_type *)&D.93367 + 16B] = __dnew.67_716;
  # DEBUG D#1 => &D.93367
  # DEBUG this => D#1
  # DEBUG __p => _715
  # DEBUG __k1 => "Channel must have positive delay."
  # DEBUG __k2 => &MEM[(void *)"Channel must have positive delay." + 33B]
  # DEBUG __d => _715
  # DEBUG __s => "Channel must have positive delay."
  # DEBUG __n => 33
  # DEBUG __s1 => _715
  # DEBUG __s2 => "Channel must have positive delay."
  # DEBUG __n => 33
  __builtin_memcpy (_715, "Channel must have positive delay.", 33);
  __dnew.67_719 = __dnew;
  # DEBUG this => &D.93367
  # DEBUG __n => __dnew.67_719
  # DEBUG D#4 => &D.93367
  # DEBUG __length => __dnew.67_719
  # DEBUG this => D#4
  MEM[(size_type *)&D.93367 + 8B] = __dnew.67_719;
  _720 = MEM[(char * *)&D.93367];
  # DEBUG D#1 => &D.93367
  # DEBUG this => D#1
  _721 = _720 + __dnew.67_719;
  # DEBUG __c1 => _721
  # DEBUG __c2 => D#23
  MEM[(char_type &)_721] = 0;
  __dnew ={v} {CLOBBER};
  _641 = &_170->D.57864.D.32618;
  Module::Error (_641, &D.93367);

  <bb 244>:
  # DEBUG this => &D.93367
  # DEBUG this => &D.93367
  # DEBUG this => &D.93367
  _642 = MEM[(char * *)&D.93367];
  # DEBUG D#1 => &D.93367
  # DEBUG this => D#1
  # DEBUG this => &D.93367
  if (&D.93367.D.15209._M_local_buf != _642)
    goto <bb 245>;
  else
    goto <bb 246>;

  <bb 245>:
  # DEBUG D#153 => D.93367.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.93367
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.93367
  # DEBUG this => D#1
  # DEBUG this => &D.93367
  # DEBUG D#150 => &D.93367._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _642
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _642
  # DEBUG this => D#144
  # DEBUG D.93358 => D#145
  operator delete (_642);

  <bb 246>:
  # DEBUG D#154 => &D.93367._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.93367 ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  pretmp_101 = MEM[(struct Channel * * *)this_11(D) + 256B];
  pretmp_747 = pretmp_101 + _252;
  pretmp_604 = *pretmp_747;

  <bb 247>:
  # prephitmp_869 = PHI <_170(239), pretmp_604(246)>
  _170->_delay = prephitmp_588;
  # DEBUG D#1028 => &this_11(D)->D.47478._routers
  _213 = MEM[(struct Router * * *)this_11(D) + 112B];
  # DEBUG D#33 => D#1028
  # DEBUG __n => (long unsigned int) D#1401
  # DEBUG this => D#33
  _258 = _213 + _257;
  _173 = *_258;
  _174 = _173->D.42039.D.32618._vptr.Module;
  _175 = MEM[(int (*__vtbl_ptr_type) () *)_174 + 64B];
  # DEBUG D#1029 => &this_11(D)->D.47478._chan_cred
  # DEBUG D#32 => D#1029
  # DEBUG __n => _165
  # DEBUG this => D#32
  # DEBUG D#1030 => &this_11(D)->D.47478._chan
  _200 = MEM[(struct FlitChannel * * *)this_11(D) + 232B];
  # DEBUG D#31 => D#1030
  # DEBUG __n => _165
  # DEBUG this => D#31
  _255 = _200 + _252;
  _177 = *_255;
  OBJ_TYPE_REF(_175;(struct Router)_173->8) (_173, _177, prephitmp_869);
  _180 = (long unsigned int) other_node_140;
  # DEBUG D#1031 => &this_11(D)->D.47478._routers
  _214 = MEM[(struct Router * * *)this_11(D) + 112B];
  # DEBUG D#33 => D#1031
  # DEBUG __n => _180
  # DEBUG this => D#33
  _261 = _180 * 8;
  _262 = _214 + _261;
  _181 = *_262;
  _182 = _181->D.42039.D.32618._vptr.Module;
  _183 = MEM[(int (*__vtbl_ptr_type) () *)_182 + 56B];
  # DEBUG D#1032 => &this_11(D)->D.47478._chan_cred
  _208 = MEM[(struct Channel * * *)this_11(D) + 256B];
  # DEBUG D#32 => D#1032
  # DEBUG __n => _165
  # DEBUG this => D#32
  _260 = _208 + _252;
  _184 = *_260;
  # DEBUG D#1033 => &this_11(D)->D.47478._chan
  _201 = MEM[(struct FlitChannel * * *)this_11(D) + 232B];
  # DEBUG D#31 => D#1033
  # DEBUG __n => _165
  # DEBUG this => D#31
  _259 = _201 + _252;
  _186 = *_259;
  OBJ_TYPE_REF(_183;(struct Router)_181->7) (_181, _186, _184);
  channel_count_188 = channel_count_77 + 1;
  # DEBUG channel_count => channel_count_188
  # DEBUG D#1392 => {CLOBBER}
  # DEBUG other_node => D#1392
  # DEBUG this => &rriter
  rriter$_M_node_263 = std::_Rb_tree_increment (rriter$_M_node_504);
  # DEBUG rriter$_M_node => rriter$_M_node_263
  # DEBUG rriter$_M_node => rriter$_M_node_263
  # DEBUG channel_count => channel_count_188
  # DEBUG this => &riter
  # DEBUG this => __y_248
  # DEBUG D#1034 => &__y_248->_M_value_field
  # DEBUG __r => D#1034
  # DEBUG D#1035 => &MEM[(struct pair *)__y_248 + 32B].second
  # DEBUG this => D#1035
  # DEBUG D#78 => &D#1035->_M_t
  # DEBUG this => D#78
  # DEBUG this => NULL
  # DEBUG __x => _232
  # DEBUG this => &rriter
  # DEBUG __x => &D.57880
  if (_232 != rriter$_M_node_263)
    goto <bb 249>;
  else
    goto <bb 248>;

  <bb 248>:
  # channel_count_1037 = PHI <channel_count_188(247)>
  goto <bb 253>;

  <bb 249>:
  goto <bb 220>;

<L33>:
  # DEBUG this => &D.93367
  # DEBUG this => &D.93367
  # DEBUG this => &D.93367
  _643 = MEM[(char * *)&D.93367];
  # DEBUG D#1 => &D.93367
  # DEBUG this => D#1
  # DEBUG this => &D.93367
  if (&D.93367.D.15209._M_local_buf != _643)
    goto <bb 251>;
  else
    goto <bb 252>;

  <bb 251>:
  # DEBUG D#153 => D.93367.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.93367
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.93367
  # DEBUG this => D#1
  # DEBUG this => &D.93367
  # DEBUG D#150 => &D.93367._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _643
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _643
  # DEBUG this => D#144
  # DEBUG D.93343 => D#145
  operator delete (_643);

  <bb 252>:
  # DEBUG D#154 => &D.93367._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.93367 ={v} {CLOBBER};
  resx 32

  <bb 253>:
  # channel_count_528 = PHI <channel_count_1037(248), channel_count_501(218)>
  # DEBUG D#1041 => {CLOBBER}
  # DEBUG riter$_M_node => D#1041
  # DEBUG D#1042 => {CLOBBER}
  # DEBUG rriter$_M_node => D#1042
  # DEBUG this => &niter
  niter$_M_node_264 = std::_Rb_tree_increment (niter$_M_node_316);
  # DEBUG niter$_M_node => niter$_M_node_264
  # DEBUG niter$_M_node => niter$_M_node_264
  # DEBUG channel_count => channel_count_528
  # DEBUG D#1036 => &this_11(D)->router_list
  _218 = MEM[(struct map * *)this_11(D) + 440B];
  # DEBUG D#34 => D#1036
  # DEBUG __n => 0
  # DEBUG this => D#34
  # DEBUG this => NULL
  # DEBUG this => D#72
  _237 = &MEM[(struct _Rb_tree *)_218]._M_impl._M_header;
  # DEBUG this => NULL
  # DEBUG __x => _237
  # DEBUG this => &niter
  # DEBUG __x => &D.57874
  if (_237 != niter$_M_node_264)
    goto <bb 254>;
  else
    goto <bb 200>;

  <bb 254>:
  goto <bb 202>;

<L15>:
  # DEBUG this => &D.56821
  # DEBUG this => &D.56821
  # DEBUG this => &D.56821
  _190 = MEM[(char * *)&D.56821];
  # DEBUG D#1 => &D.56821
  # DEBUG this => D#1
  # DEBUG this => &D.56821
  if (&D.56821.D.15209._M_local_buf != _190)
    goto <bb 256>;
  else
    goto <bb 257>;

  <bb 256>:
  # DEBUG D#153 => D.56821.D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => &D.56821
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => &D.56821
  # DEBUG this => D#1
  # DEBUG this => &D.56821
  # DEBUG D#150 => &D.56821._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _190
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _190
  # DEBUG this => D#144
  # DEBUG D.85110 => D#145
  operator delete (_190);

  <bb 257>:
  # DEBUG D#154 => &D.56821._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  D.56821 ={v} {CLOBBER};
  resx 5

<L70>:
  goto <bb 260> (<L18>);

<L37>:

<L18>:
  # DEBUG D#1391 => {CLOBBER}
  # DEBUG link => D#1391
  std::__cxx11::basic_ostringstream<char>::~basic_ostringstream (&router_name);
  resx 4

  <bb 261>:
  std::__throw_logic_error ("basic_string::_M_construct null not valid");

<L71>:
  goto <bb 72> (<L28>);

  <bb 263>:
  # DEBUG __first => _354
  # DEBUG __last => _352
  # DEBUG D#487 => &__first
  # DEBUG D.77194 => D#487
  # DEBUG __first => _354
  # DEBUG __last => _352
  __last.69_362 = (long int) _352;
  __first.70_363 = (long int) _354;
  _364 = __last.69_362 - __first.70_363;
  __dnew.66_365 = (long unsigned int) _364;
  __dnew = __dnew.66_365;
  if (__dnew.66_365 > 15)
    goto <bb 41>;
  else
    goto <bb 43>;

  <bb 264>:
  std::__throw_logic_error ("basic_string::_M_construct null not valid");

<L72>:
  goto <bb 72> (<L28>);

  <bb 266>:
  # DEBUG __first => _356
  # DEBUG __last => _353
  # DEBUG D#487 => &__first
  # DEBUG D.77194 => D#487
  # DEBUG __first => _356
  # DEBUG __last => _353
  __last.69_374 = (long int) _353;
  __first.70_375 = (long int) _356;
  _376 = __last.69_374 - __first.70_375;
  __dnew.66_377 = (long unsigned int) _376;
  __dnew = __dnew.66_377;
  if (__dnew.66_377 > 15)
    goto <bb 51>;
  else
    goto <bb 54>;

  <bb 267>:
  # __i$_M_node_132 = PHI <__i$_M_node_988(118), __i$_M_node_988(117), _694(110)>
  # DEBUG this => NULL
  # DEBUG this => &D.92939
  # DEBUG __a => &link
  # DEBUG __b => NULL
  D.92939.first = link_51;
  MEM[(struct pair *)&D.92939 + 4B] = 0;
  MEM[(struct pair *)&D.92939 + 8B] = 0;
  # DEBUG this => D#1393
  # DEBUG __position$_M_node => __i$_M_node_132
  # DEBUG __x => &D.92939
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _489 = &MEM[(struct map *)niter$_M_node_530 + 40B]._M_t;
  # DEBUG this => _489
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_132;
  # DEBUG __x => &D.92939
  # DEBUG this => &__an
  # DEBUG __t => _489
  # DEBUG __an$_M_t => _489
  # DEBUG D#680 => &__an
  D.92938 = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_ZNSt8_Rb_treeIiSt4pairIKiS0_IiiEESt10_Select1stIS3_ESt4lessIiESaIS3_EE17_M_insert_unique_INS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_ERKS3_RT_.isra.223.constprop (_489, __pos, &D.92939);
  goto <bb 119>;

<L73>:
  goto <bb 260> (<L18>);

  <bb 269>:
  # __i$_M_node_712 = PHI <__i$_M_node_1028(228), __i$_M_node_1028(227), _232(220)>
  # DEBUG this => NULL
  # DEBUG this => &D.93436
  # DEBUG __a => &other_node
  # DEBUG __b => NULL
  D.93436.first = other_node_140;
  MEM[(struct pair *)&D.93436 + 4B] = 0;
  MEM[(struct pair *)&D.93436 + 8B] = 0;
  # DEBUG this => D#1394
  # DEBUG __position$_M_node => __i$_M_node_712
  # DEBUG __x => &D.93436
  # DEBUG this => NULL
  # DEBUG __it => &__position
  _664 = &MEM[(struct map *)__y_248 + 40B]._M_t;
  # DEBUG this => _664
  MEM[(struct _Rb_tree_const_iterator *)&__pos] = __i$_M_node_712;
  # DEBUG __x => &D.93436
  # DEBUG this => &__an
  # DEBUG __t => _664
  # DEBUG __an$_M_t => _664
  # DEBUG D#680 => &__an
  D.93435 = std::_Rb_tree<int, std::pair<const int, std::pair<int, int> >, std::_Select1st<std::pair<const int, std::pair<int, int> > >, std::less<int>, std::allocator<std::pair<const int, std::pair<int, int> > > >::_ZNSt8_Rb_treeIiSt4pairIKiS0_IiiEESt10_Select1stIS3_ESt4lessIiESaIS3_EE17_M_insert_unique_INS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_ERKS3_RT_.isra.223.constprop (_664, __pos, &D.93436);
  __i$_M_node_665 = MEM[(struct _Rb_tree_iterator *)&D.93435];
  # DEBUG __i$_M_node => __i$_M_node_665
  D.93436 ={v} {CLOBBER};
  goto <bb 229>;

  <bb 270>:
  __new_map_size_695 = _399 + 3;
  # DEBUG __new_map_size => __new_map_size_695
  # DEBUG D#579 => &D#1399->D.43742
  # DEBUG D#576 => D#579
  # DEBUG __n => __new_map_size_695
  # DEBUG this => D#576
  # DEBUG D#575 => D#576
  # DEBUG D#564 => D#575
  # DEBUG this => D#564
  # DEBUG D#563 => D#564
  # DEBUG this => D#563
  # DEBUG this => NULL
  # DEBUG D.78248 => NULL
  # DEBUG this => NULL
  # DEBUG D#574 => &__map_alloc
  # DEBUG __n => __new_map_size_695
  # DEBUG __a => D#574
  # DEBUG D#573 => D#574
  # DEBUG D#571 => D#573
  # DEBUG D#572 => 0B
  # DEBUG __n => __new_map_size_695
  # DEBUG this => D#571
  # DEBUG D.92892 => D#572
  # DEBUG D#570 => D#571
  # DEBUG D#569 => D#570
  # DEBUG this => D#569
  goto <bb 96>;

}



;; Function AnyNet::AnyNet(const Configuration&, const string&) (_ZN6AnyNetC2ERK13ConfigurationRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, funcdef_no=2491, decl_uid=47465, cgraph_uid=613, symbol_order=615)

Trying loop 4 as candidate
loop 4 is not innermost
loop is not parallel according to graphite
Trying loop 5 as candidate
loop 5 is innermost
loop is not parallel according to graphite
AnyNet::AnyNet(const Configuration&, const string&) (struct AnyNet * const this, const struct Configuration & config, const struct string & name)
{
  struct _Rb_tree_node * __x;
  struct map * __first;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct iterator __position;
  struct map * __pos;
  struct value_type D.55223;
  struct Network * _3;
  char * _9;
  struct _Rb_tree_node_base * _10;
  struct _Rb_tree_node_base * _11;
  struct _Rb_tree_node_base * _12;
  struct vector * _13;
  struct _Rep_type * _19;
  char * const _24;
  struct _Rb_tree_node_base * _27;
  struct map * _97;
  struct _Rep_type * _100;
  struct _Rb_tree_node_base * _104;
  struct map * pretmp_132;
  struct map * prephitmp_133;

  <bb 2>:
  _3 = &this_2(D)->D.47478;
  Network::Network (_3, config_5(D), name_6(D));
  this_2(D)->D.47478.D.43856.D.32618._vptr.Module = &MEM[(void *)&_ZTV6AnyNet + 16B];
  # DEBUG D#1052 => &this_2(D)->file_name
  # DEBUG this => D#1052
  # DEBUG this => D#45
  # DEBUG D#44 => D#45
  # DEBUG this => D#44
  # DEBUG this => D#1052
  _9 = &MEM[(struct basic_string *)this_2(D) + 360B].D.15209._M_local_buf;
  # DEBUG D#119 => &MEM[(struct basic_string *)D#1052]._M_dataplus
  # DEBUG this => D#119
  # DEBUG __dat => _9
  # DEBUG __a => D#118
  # DEBUG D#117 => D#118
  # DEBUG D#115 => D#119
  # DEBUG D#116 => D#117
  # DEBUG this => D#115
  # DEBUG __a => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG this => D#113
  # DEBUG D.73458 => D#114
  MEM[(struct _Alloc_hider *)this_2(D) + 360B]._M_p = _9;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#1052
  # DEBUG __n => 0
  # DEBUG D#4 => D#1052
  # DEBUG __length => 0
  # DEBUG this => D#4
  MEM[(size_type *)this_2(D) + 368B] = 0;
  # DEBUG D#1 => D#1052
  # DEBUG this => D#1
  # DEBUG __c1 => _9
  # DEBUG __c2 => D#23
  MEM[(char_type &)this_2(D) + 376] = 0;
  # DEBUG D#1051 => &this_2(D)->node_list
  # DEBUG this => D#1051
  # DEBUG D#163 => &D#1051->_M_t
  # DEBUG this => D#163
  # DEBUG D#162 => &MEM[(struct _Rb_tree *)D#163]._M_impl
  # DEBUG this => D#162
  # DEBUG this => D#162
  # DEBUG this => D#162
  MEM[(struct _Rb_tree_impl *)this_2(D) + 392B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)this_2(D) + 392B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)this_2(D) + 392B]._M_node_count = 0;
  # DEBUG this => D#162
  _10 = &MEM[(struct _Rb_tree_impl *)this_2(D) + 392B]._M_header;
  MEM[(struct _Rb_tree_impl *)this_2(D) + 392B]._M_header._M_left = _10;
  MEM[(struct _Rb_tree_impl *)this_2(D) + 392B]._M_header._M_right = _10;
  # DEBUG D#1050 => &this_2(D)->router_list
  # DEBUG this => D#1050
  # DEBUG D#167 => &D#1050->D.46681
  # DEBUG this => D#167
  # DEBUG D#166 => &D#167->_M_impl
  # DEBUG this => D#166
  # DEBUG this => D#166
  # DEBUG this => D#166
  MEM[(struct _Vector_impl *)this_2(D) + 440B]._M_start = 0B;
  MEM[(struct _Vector_impl *)this_2(D) + 440B]._M_finish = 0B;
  MEM[(struct _Vector_impl *)this_2(D) + 440B]._M_end_of_storage = 0B;
  # DEBUG D#1049 => &this_2(D)->routing_table
  # DEBUG this => D#1049
  # DEBUG D#186 => &D#1049->D.47428
  # DEBUG this => D#186
  # DEBUG D#185 => &D#186->_M_impl
  # DEBUG this => D#185
  # DEBUG this => D#185
  # DEBUG this => D#185
  MEM[(struct _Vector_impl *)this_2(D) + 464B]._M_start = 0B;
  MEM[(struct _Vector_impl *)this_2(D) + 464B]._M_finish = 0B;
  MEM[(struct _Vector_impl *)this_2(D) + 464B]._M_end_of_storage = 0B;
  # DEBUG this => &D.55223
  # DEBUG D#205 => &D.55223._M_t
  # DEBUG this => D#205
  # DEBUG D#204 => &MEM[(struct _Rb_tree *)D#205]._M_impl
  # DEBUG this => D#204
  # DEBUG this => D#204
  # DEBUG this => D#204
  MEM[(struct _Rb_tree_impl *)&D.55223]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)&D.55223]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)&D.55223]._M_node_count = 0;
  # DEBUG this => D#204
  MEM[(struct _Rb_tree_impl *)&D.55223]._M_header._M_left = &MEM[(struct _Rb_tree_impl *)&D.55223]._M_header;
  MEM[(struct _Rb_tree_impl *)&D.55223]._M_header._M_right = &MEM[(struct _Rb_tree_impl *)&D.55223]._M_header;
  _13 = &this_2(D)->router_list;
  # DEBUG this => _13
  # DEBUG __new_size => 2
  # DEBUG __x => &D.55223
  # DEBUG D#43 => _13
  # DEBUG D#43 => _13
  # DEBUG this => D#43
  # DEBUG this => D#43
  # DEBUG D#43 => _13
  # DEBUG D#43 => _13
  # DEBUG this => D#43
  # DEBUG this => D#43
  # DEBUG this => _13
  # DEBUG D#69 => &_13->D.46681._M_impl._M_finish
  # DEBUG this => NULL
  # DEBUG __i => D#69
  # DEBUG this => _13
  MEM[(struct __normal_iterator *)&__position] = 0B;
  # DEBUG __n => 2
  # DEBUG __x => &D.55223
  std::vector<std::map<int, std::map<int, std::pair<int, int> > > >::_M_fill_insert (_13, __position, 2, &D.55223);

  <bb 3>:
  # DEBUG this => &D.55223
  # DEBUG this => &D.55223._M_t
  _11 = MEM[(struct _Rb_tree_node_base * *)&D.55223 + 16B];
  # DEBUG D#42 => &D.55223._M_t
  # DEBUG this => D#42
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_erase (&D.55223._M_t, _11);
  # DEBUG D#545 => &MEM[(struct _Rb_tree *)&D.55223]._M_impl
  # DEBUG this => D#545
  # DEBUG this => D#545
  # DEBUG this => D#545
  D.55223 ={v} {CLOBBER};
  AnyNet::_ComputeSize (this_2(D), config_5(D));

  <bb 4>:
  Network::_Alloc (_3);
  goto <bb 6>;

<L7>:
  goto <bb 12> (<L1>);

  <bb 6>:
  AnyNet::_BuildNet (this_2(D), config_5(D));
  goto <bb 8>;

<L8>:
  goto <bb 12> (<L1>);

  <bb 8>:
  return;

<L0>:
  # DEBUG this => &D.55223
  # DEBUG this => &D.55223._M_t
  _12 = MEM[(struct _Rb_tree_node_base * *)&D.55223 + 16B];
  # DEBUG D#42 => &D.55223._M_t
  # DEBUG this => D#42
  std::_Rb_tree<int, std::pair<const int, std::map<int, std::pair<int, int> > >, std::_Select1st<std::pair<const int, std::map<int, std::pair<int, int> > > >, std::less<int>, std::allocator<std::pair<const int, std::map<int, std::pair<int, int> > > > >::_M_erase (&D.55223._M_t, _12);
  # DEBUG D#545 => &MEM[(struct _Rb_tree *)&D.55223]._M_impl
  # DEBUG this => D#545
  # DEBUG this => D#545
  # DEBUG this => D#545
  D.55223 ={v} {CLOBBER};
  resx 6

<L9>:
  goto <bb 12> (<L1>);

<L6>:

<L1>:
  # DEBUG D#1416 => &this_2(D)->routing_table
  # DEBUG this => D#1416
  # DEBUG D#466 => &D#1416->D.47428
  # DEBUG this => D#466
  _97 = MEM[(struct vector *)this_2(D) + 464B].D.47428._M_impl._M_finish;
  __first_98 = MEM[(struct vector *)this_2(D) + 464B].D.47428._M_impl._M_start;
  # DEBUG __first => __first_98
  # DEBUG __last => _97
  # DEBUG __first => __first_98
  if (_97 == __first_98)
    goto <bb 21>;
  else
    goto <bb 13>;

  <bb 13>:

  <bb 14>:
  # __first_85 = PHI <__first_98(13), __first_102(16)>
  # DEBUG __first => __first_85
  # DEBUG __r => __first_85
  # DEBUG __pointer => NULL
  # DEBUG this => NULL
  _100 = &__first_85->_M_t;
  # DEBUG this => _100
  __x_101 = MEM[(struct _Rb_tree_node_base * *)__first_85 + 16B];
  # DEBUG D#41 => _100
  # DEBUG this => D#41
  # DEBUG this => _100
  # DEBUG __x => __x_101
  # DEBUG __x => __x_101
  if (__x_101 == 0B)
    goto <bb 15>;
  else
    goto <bb 17>;

  <bb 15>:
  # DEBUG D#464 => &MEM[(struct _Rb_tree *)_100]._M_impl
  # DEBUG this => D#464
  # DEBUG this => D#464
  # DEBUG this => D#464
  MEM[(struct  &)__first_85] ={v} {CLOBBER};
  __first_102 = __first_85 + 48;
  # DEBUG __first => __first_102
  # DEBUG __first => __first_102
  if (_97 == __first_102)
    goto <bb 20>;
  else
    goto <bb 16>;

  <bb 16>:
  goto <bb 14>;

  <bb 17>:

  <bb 18>:
  # __x_84 = PHI <__x_101(17), __x_105(19)>
  # DEBUG __x => __x_84
  _104 = MEM[(struct _Rb_tree_node_base * *)__x_84 + 24B];
  # DEBUG D#63 => __x_84
  # DEBUG __x => D#63
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (_100, _104);
  __x_105 = MEM[(struct _Rb_tree_node_base * *)__x_84 + 16B];
  # DEBUG D#64 => __x_84
  # DEBUG __x => D#64
  # DEBUG __y => NULL
  # DEBUG D#463 => _100
  # DEBUG __p => __x_84
  # DEBUG this => D#463
  # DEBUG D#462 => D#463
  # DEBUG D#461 => D#463
  # DEBUG D#460 => D#463
  # DEBUG D#458 => D#460
  # DEBUG D#459 => __x_84
  # DEBUG this => D#458
  # DEBUG __p => D#459
  # DEBUG D#457 => D#458
  # DEBUG D#456 => D#459
  # DEBUG D#455 => D#459
  # DEBUG this => D#455
  # DEBUG D#454 => &D#456->_M_value_field
  # DEBUG __r => D#454
  # DEBUG D#453 => D#457
  # DEBUG this => D#453
  # DEBUG D#452 => D#453
  # DEBUG this => D#452
  # DEBUG this => NULL
  # DEBUG D.76846 => NULL
  # DEBUG this => NULL
  # DEBUG D#165 => D#454
  # DEBUG this => D#164
  # DEBUG __p => D#165
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#461
  # DEBUG __p => __x_84
  # DEBUG this => D#462
  # DEBUG D#287 => 1
  # DEBUG __p => __x_84
  # DEBUG __a => D#286
  # DEBUG __n => D#287
  # DEBUG D#285 => D#287
  # DEBUG D#284 => D#286
  # DEBUG D#282 => D#284
  # DEBUG D#283 => D#285
  # DEBUG __p => __x_84
  # DEBUG this => D#282
  # DEBUG D.93759 => D#283
  operator delete (__x_84);
  # DEBUG __x => __x_105
  # DEBUG __x => __x_105
  if (__x_105 == 0B)
    goto <bb 15>;
  else
    goto <bb 19>;

  <bb 19>:
  goto <bb 18>;

  <bb 20>:
  pretmp_132 = MEM[(struct _Vector_base *)this_2(D) + 464B]._M_impl._M_start;

  <bb 21>:
  # prephitmp_133 = PHI <pretmp_132(20), __first_98(12)>
  # DEBUG D#467 => &D#1416->D.47428
  # DEBUG this => D#467
  # DEBUG D#203 => D#467->_M_impl._M_end_of_storage
  # DEBUG D#202 => (long int) D#203
  # DEBUG D#1417 => MEM[(struct _Vector_base *)this_2(D) + 464B]._M_impl._M_start
  # DEBUG D#201 => (long int) D#1417
  # DEBUG D#200 => D#202 - D#201
  # DEBUG D#199 => D#200 /[ex] 48
  # DEBUG D#196 => D#467
  # DEBUG D#197 => (long unsigned int) D#199
  # DEBUG __p => D#1417
  # DEBUG this => D#196
  # DEBUG __n => D#197
  # DEBUG D#195 => D#197
  # DEBUG D#194 => D#196
  if (prephitmp_133 != 0B)
    goto <bb 22>;
  else
    goto <bb 23>;

  <bb 22>:
  # DEBUG D#193 => &D#194->_M_impl
  # DEBUG D#191 => D#193
  # DEBUG D#192 => D#195
  # DEBUG __p => D#1417
  # DEBUG __a => D#191
  # DEBUG __n => D#192
  # DEBUG D#190 => D#192
  # DEBUG D#189 => D#191
  # DEBUG D#187 => D#189
  # DEBUG D#188 => D#190
  # DEBUG __p => D#1417
  # DEBUG this => D#187
  # DEBUG D.93743 => D#188
  operator delete (prephitmp_133);

  <bb 23>:
  # DEBUG D#198 => &D#467->_M_impl
  # DEBUG this => D#198
  # DEBUG this => D#198
  # DEBUG this => D#198
  MEM[(struct  &)this_2(D) + 464] ={v} {CLOBBER};
  resx 5

<L2>:
  std::vector<std::map<int, std::map<int, std::pair<int, int> > > >::~vector (_13);
  resx 4

<L3>:
  # DEBUG D#1048 => &this_2(D)->node_list
  # DEBUG this => D#1048
  _19 = &MEM[(struct map *)this_2(D) + 392B]._M_t;
  # DEBUG this => _19
  _27 = MEM[(struct _Rb_tree_node_base * *)this_2(D) + 408B];
  # DEBUG D#41 => _19
  # DEBUG this => D#41
  std::_Rb_tree<int, std::pair<const int, int>, std::_Select1st<std::pair<const int, int> >, std::less<int>, std::allocator<std::pair<const int, int> > >::_M_erase (_19, _27);
  # DEBUG D#464 => &MEM[(struct _Rb_tree *)_19]._M_impl
  # DEBUG this => D#464
  # DEBUG this => D#464
  # DEBUG this => D#464
  MEM[(struct  &)this_2(D) + 392] ={v} {CLOBBER};
  resx 3

<L4>:
  # DEBUG D#1047 => &this_2(D)->file_name
  # DEBUG this => D#1047
  # DEBUG this => D#1047
  # DEBUG this => D#1047
  _24 = MEM[(char * *)this_2(D) + 360B];
  # DEBUG D#1 => D#1047
  # DEBUG this => D#1
  # DEBUG this => D#1047
  if (_9 != _24)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  # DEBUG D#153 => MEM[(struct basic_string *)D#1047].D.15209._M_allocated_capacity
  # DEBUG D#152 => D#153
  # DEBUG this => D#1047
  # DEBUG __size => D#152
  # DEBUG D#151 => D#152
  # DEBUG D#1 => D#1047
  # DEBUG this => D#1
  # DEBUG this => D#1047
  # DEBUG D#150 => &MEM[(struct basic_string *)D#1047]._M_dataplus
  # DEBUG D#148 => D#150
  # DEBUG D#149 => D#151 + 1
  # DEBUG __p => _24
  # DEBUG __a => D#148
  # DEBUG __n => D#149
  # DEBUG D#147 => D#149
  # DEBUG D#146 => D#148
  # DEBUG D#144 => D#146
  # DEBUG D#145 => D#147
  # DEBUG __p => _24
  # DEBUG this => D#144
  # DEBUG D.85198 => D#145
  operator delete (_24);

  <bb 28>:
  # DEBUG D#154 => &MEM[(struct basic_string *)D#1047]._M_dataplus
  # DEBUG this => D#154
  # DEBUG this => D#154
  # DEBUG this => D#154
  MEM[(struct  &)this_2(D) + 360] ={v} {CLOBBER};
  resx 2

<L5>:
  Network::~Network (_3);
  resx 1

}


