
;; Function void Power_Module::calcBuffer(const BufferMonitor*) (_ZN12Power_Module10calcBufferEPK13BufferMonitor, funcdef_no=2000, decl_uid=45181, cgraph_uid=499, symbol_order=500)

Trying loop 1 as candidate
loop 1 is not innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is innermost
loop is not parallel according to graphite
void Power_Module::calcBuffer(const BufferMonitor*) (struct Power_Module * const this, const struct BufferMonitor * bm)
{
  bool this__inputWritePower_lsm.671;
  double this__inputWritePower_lsm.670;
  bool this__inputReadPower_lsm.669;
  double this__inputReadPower_lsm.668;
  bool this__inputLeakagePower_lsm.667;
  double this__inputLeakagePower_lsm.666;
  bool this__inputArea_lsm.665;
  double this__inputArea_lsm.664;
  int * reads$_M_impl$_M_start;
  double Ccell;
  double Cwl;
  double Warray;
  double x;
  double Cpredecode;
  double Cdecode;
  double Harray;
  double y;
  double Cprecharge;
  double Cwren;
  double Cbd;
  double Cwd;
  double D.69192;
  struct basic_ostream & D.69167;
  int * D.69163;
  int * D.69154;
  const ptrdiff_t _Num;
  const ptrdiff_t _Num;
  double Ccell;
  double Cbl;
  double Vswing;
  double Ccc;
  double Asram;
  double Pwr;
  double Prd;
  double Pwl;
  double aw;
  double ar;
  int j;
  int i;
  const struct vector writes;
  const struct vector reads;
  double Pleak;
  double depth;
  double _8;
  double _9;
  double _12;
  long unsigned int _17;
  int * const _19;
  double _22;
  double _25;
  int _29;
  long unsigned int _30;
  double _31;
  int _32;
  double _33;
  double _36;
  int _37;
  double _38;
  double _40;
  int * const pretmp_41;
  double _42;
  double _48;
  double _49;
  double _53;
  double _54;
  const int & _75;
  long unsigned int _76;
  const int & _77;
  int * const _127;
  int * const _128;
  long int _129;
  long int _130;
  long int _131;
  long int _132;
  size_type _133;
  int * const pretmp_134;
  const int & _135;
  int _136;
  long unsigned int _143;
  int * const _146;
  long int _147;
  long int _148;
  long int _149;
  long int _150;
  size_type _151;
  long unsigned int _161;
  long unsigned int _163;
  int * _164;
  long unsigned int _166;
  int * _167;
  int * iftmp.11_168;
  int * const prephitmp_169;
  long int pretmp_170;
  const int _176;
  int _226;
  long unsigned int _228;
  const int & _229;
  int _230;
  double _231;
  double _235;
  double _237;
  long int pretmp_243;
  long int pretmp_245;
  long int prephitmp_246;
  const ptrdiff_t pretmp_247;
  const ptrdiff_t prephitmp_248;
  int * const pretmp_249;
  int * const pretmp_251;
  int * const prephitmp_252;
  long int pretmp_253;
  long int pretmp_255;
  long int pretmp_257;
  long int prephitmp_258;
  const ptrdiff_t pretmp_259;
  const ptrdiff_t prephitmp_260;
  double pretmp_261;
  double pretmp_263;
  double pretmp_265;
  double prephitmp_266;
  double pretmp_267;
  double prephitmp_268;
  double pretmp_269;
  double pretmp_271;
  double pretmp_272;
  double pretmp_273;
  double pretmp_274;
  double pretmp_276;
  double pretmp_277;
  int pretmp_278;
  double pretmp_296;
  double prephitmp_297;
  double pretmp_298;
  double prephitmp_299;
  double pretmp_301;
  double pretmp_303;
  double pretmp_305;
  double pretmp_306;
  double pretmp_307;
  double pretmp_309;
  double pretmp_310;
  double pretmp_311;
  double pretmp_313;
  double pretmp_314;
  double pretmp_315;
  double pretmp_316;
  double pretmp_317;
  double pretmp_318;
  double pretmp_320;
  double pretmp_322;
  double pretmp_323;
  double pretmp_324;
  double pretmp_325;
  double pretmp_326;
  double pretmp_327;
  double pretmp_328;
  double pretmp_329;
  double pretmp_330;
  double pretmp_331;
  double pretmp_332;
  double pretmp_333;
  double pretmp_334;
  double pretmp_335;
  double pretmp_336;
  double pretmp_337;
  double pretmp_338;
  double pretmp_339;
  double pretmp_340;
  double pretmp_341;
  double pretmp_342;
  double pretmp_343;
  double pretmp_344;
  double pretmp_345;
  double pretmp_346;
  double pretmp_348;
  double pretmp_349;
  double pretmp_350;
  double pretmp_352;
  double pretmp_368;
  double pretmp_369;
  double pretmp_370;
  double pretmp_371;
  double pretmp_372;
  double pretmp_373;
  double pretmp_374;
  double pretmp_375;
  double pretmp_376;
  double pretmp_377;
  double pretmp_378;
  double pretmp_379;
  double pretmp_380;
  double pretmp_381;
  double pretmp_382;
  double pretmp_383;

  <bb 2>:
  _8 = this_7(D)->numVC;
  _9 = this_7(D)->depthVC;
  depth_10 = _8 * _9;
  # DEBUG depth => depth_10
  # DEBUG this => this_7(D)
  # DEBUG memoryDepth => depth_10
  _42 = this_7(D)->IoffSRAM;
  _40 = depth_10 * _42;
  _36 = this_7(D)->Vdd;
  _31 = _36 * _40;
  _12 = this_7(D)->channel_width;
  Pleak_13 = _12 * _31;
  # DEBUG Pleak => Pleak_13
  # DEBUG this => bm_14(D)
  # DEBUG D#473 => &bm_14(D)->_reads
  # DEBUG this => &reads
  # DEBUG __x => D#473
  # DEBUG D#407 => &D#473->D.35433
  # DEBUG this => D#407
  # DEBUG __a => NULL
  _19 = MEM[(int * *)bm_14(D) + 16B];
  # DEBUG D#27 => D#473
  _146 = MEM[(int * *)bm_14(D) + 24B];
  # DEBUG D#27 => D#473
  # DEBUG this => D#27
  # DEBUG this => D#27
  _147 = (long int) _146;
  _148 = (long int) _19;
  _149 = _147 - _148;
  _150 = _149 /[ex] 4;
  _151 = (size_type) _150;
  # DEBUG D#409 => &reads.D.35433
  # DEBUG this => D#409
  # DEBUG __n => NULL
  # DEBUG __a => NULL
  # DEBUG D#353 => &D#409->_M_impl
  # DEBUG this => D#353
  # DEBUG __a => NULL
  # DEBUG this => D#353
  # DEBUG __a => NULL
  # DEBUG this => D#353
  # DEBUG D.64054 => NULL
  # DEBUG this => D#409
  # DEBUG __n => NULL
  # DEBUG D#351 => D#409
  # DEBUG __n => _151
  # DEBUG this => D#351
  # DEBUG D#350 => D#351
  if (_151 != 0)
    goto <bb 3>;
  else
    goto <bb 6>;

  <bb 3>:
  # DEBUG D#349 => &D#350->_M_impl
  # DEBUG D#348 => D#349
  # DEBUG __n => _151
  # DEBUG __a => D#348
  # DEBUG D#347 => D#348
  # DEBUG D#345 => D#347
  # DEBUG D#346 => 0B
  # DEBUG __n => _151
  # DEBUG this => D#345
  # DEBUG D.69152 => D#346
  # DEBUG D#344 => D#345
  # DEBUG D#343 => D#344
  # DEBUG this => D#343
  if (_151 > 4611686018427387903)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  std::__throw_bad_alloc ();

  <bb 5>:
  _17 = (long unsigned int) _149;
  _164 = operator new (_17);
  pretmp_134 = MEM[(int * *)bm_14(D) + 24B];
  pretmp_41 = MEM[(int * *)bm_14(D) + 16B];
  pretmp_170 = (long int) pretmp_134;
  pretmp_243 = (long int) pretmp_41;
  pretmp_245 = pretmp_170 - pretmp_243;
  pretmp_247 = pretmp_245 /[ex] 4;

  <bb 6>:
  # reads$_M_impl$_M_start_165 = PHI <0B(2), _164(5)>
  # prephitmp_169 = PHI <_19(2), pretmp_41(5)>
  # prephitmp_246 = PHI <_149(2), pretmp_245(5)>
  # prephitmp_248 = PHI <_150(2), pretmp_247(5)>
  # DEBUG reads$_M_impl$_M_start => reads$_M_impl$_M_start_165
  # DEBUG D#408 => &reads.D.35433
  # DEBUG this => D#408
  # DEBUG D#540 => MEM[(int * *)bm_14(D) + 24B]
  # DEBUG D#37 => D#473
  # DEBUG this => D#37
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG D#539 => MEM[(int * *)bm_14(D) + 16B]
  # DEBUG D#38 => D#473
  # DEBUG this => D#38
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG __first => D#539
  # DEBUG __last => D#540
  # DEBUG __result => NULL
  # DEBUG D.69116 => D#406
  # DEBUG __first => D#539
  # DEBUG __last => D#540
  # DEBUG __result => NULL
  # DEBUG __assignable => 1
  # DEBUG __first => D#539
  # DEBUG __last => D#540
  # DEBUG __result => NULL
  # DEBUG __first => D#539
  # DEBUG __last => D#540
  # DEBUG __result => NULL
  # DEBUG __it => D#540
  # DEBUG __it$_M_current => D#540
  # DEBUG __it => D#539
  # DEBUG __it$_M_current => D#539
  # DEBUG __first => D#539
  # DEBUG __last => D#540
  # DEBUG __result => NULL
  # DEBUG __it => NULL
  # DEBUG __it => NULL
  # DEBUG __it => D#540
  # DEBUG __it => D#540
  # DEBUG this => NULL
  # DEBUG __it => D#539
  # DEBUG __it => D#539
  # DEBUG this => NULL
  # DEBUG __first => D#539
  # DEBUG __last => D#540
  # DEBUG __result => NULL
  # DEBUG __simple => 1
  # DEBUG __first => D#539
  # DEBUG __last => D#540
  # DEBUG __result => NULL
  # DEBUG D#538 => (long int) D#540
  # DEBUG D#537 => (long int) D#539
  # DEBUG D#536 => D#538 - D#537
  # DEBUG _Num => D#536 /[ex] 4
  if (prephitmp_248 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  _161 = (long unsigned int) prephitmp_246;
  __builtin_memmove (reads$_M_impl$_M_start_165, prephitmp_169, _161);

  <bb 8>:
  # DEBUG this => bm_14(D)
  # DEBUG D#474 => &bm_14(D)->_writes
  # DEBUG this => &writes
  # DEBUG __x => D#474
  # DEBUG D#407 => &D#474->D.35433
  # DEBUG this => D#407
  # DEBUG __a => NULL
  _127 = MEM[(int * *)bm_14(D) + 40B];
  # DEBUG D#27 => D#474
  _128 = MEM[(int * *)bm_14(D) + 48B];
  # DEBUG D#27 => D#474
  # DEBUG this => D#27
  # DEBUG this => D#27
  _129 = (long int) _128;
  _130 = (long int) _127;
  _131 = _129 - _130;
  _132 = _131 /[ex] 4;
  _133 = (size_type) _132;
  # DEBUG D#409 => &writes.D.35433
  # DEBUG this => D#409
  # DEBUG __n => NULL
  # DEBUG __a => NULL
  # DEBUG D#353 => &D#409->_M_impl
  # DEBUG this => D#353
  # DEBUG __a => NULL
  # DEBUG this => D#353
  # DEBUG __a => NULL
  # DEBUG this => D#353
  # DEBUG D.64054 => NULL
  # DEBUG this => D#409
  # DEBUG __n => NULL
  # DEBUG D#351 => D#409
  # DEBUG __n => _133
  # DEBUG this => D#351
  # DEBUG D#350 => D#351
  if (_133 != 0)
    goto <bb 9>;
  else
    goto <bb 14>;

  <bb 9>:
  # DEBUG D#349 => &D#350->_M_impl
  # DEBUG D#348 => D#349
  # DEBUG __n => _133
  # DEBUG __a => D#348
  # DEBUG D#347 => D#348
  # DEBUG D#345 => D#347
  # DEBUG D#346 => 0B
  # DEBUG __n => _133
  # DEBUG this => D#345
  # DEBUG D.69161 => D#346
  # DEBUG D#344 => D#345
  # DEBUG D#343 => D#344
  # DEBUG this => D#343
  if (_133 > 4611686018427387903)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  std::__throw_bad_alloc ();

  <bb 11>:
  _166 = (long unsigned int) _131;
  _167 = operator new (_166);
  goto <bb 13>;

<L13>:
  goto <bb 46> (<L10>);

  <bb 13>:
  pretmp_249 = MEM[(int * *)bm_14(D) + 48B];
  pretmp_251 = MEM[(int * *)bm_14(D) + 40B];
  pretmp_253 = (long int) pretmp_249;
  pretmp_255 = (long int) pretmp_251;
  pretmp_257 = pretmp_253 - pretmp_255;
  pretmp_259 = pretmp_257 /[ex] 4;

  <bb 14>:
  # iftmp.11_168 = PHI <0B(8), _167(13)>
  # prephitmp_252 = PHI <_127(8), pretmp_251(13)>
  # prephitmp_258 = PHI <_131(8), pretmp_257(13)>
  # prephitmp_260 = PHI <_132(8), pretmp_259(13)>
  # DEBUG D#408 => &writes.D.35433
  # DEBUG this => D#408
  # DEBUG D#535 => MEM[(int * *)bm_14(D) + 48B]
  # DEBUG D#37 => D#474
  # DEBUG this => D#37
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG D#534 => MEM[(int * *)bm_14(D) + 40B]
  # DEBUG D#38 => D#474
  # DEBUG this => D#38
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG __first => D#534
  # DEBUG __last => D#535
  # DEBUG __result => NULL
  # DEBUG D.69075 => D#406
  # DEBUG __first => D#534
  # DEBUG __last => D#535
  # DEBUG __result => NULL
  # DEBUG __assignable => 1
  # DEBUG __first => D#534
  # DEBUG __last => D#535
  # DEBUG __result => NULL
  # DEBUG __first => D#534
  # DEBUG __last => D#535
  # DEBUG __result => NULL
  # DEBUG __it => D#535
  # DEBUG __it$_M_current => D#535
  # DEBUG __it => D#534
  # DEBUG __it$_M_current => D#534
  # DEBUG __first => D#534
  # DEBUG __last => D#535
  # DEBUG __result => NULL
  # DEBUG __it => NULL
  # DEBUG __it => NULL
  # DEBUG __it => D#535
  # DEBUG __it => D#535
  # DEBUG this => NULL
  # DEBUG __it => D#534
  # DEBUG __it => D#534
  # DEBUG this => NULL
  # DEBUG __first => D#534
  # DEBUG __last => D#535
  # DEBUG __result => NULL
  # DEBUG __simple => 1
  # DEBUG __first => D#534
  # DEBUG __last => D#535
  # DEBUG __result => NULL
  # DEBUG D#533 => (long int) D#535
  # DEBUG D#532 => (long int) D#534
  # DEBUG D#531 => D#533 - D#532
  # DEBUG _Num => D#531 /[ex] 4
  if (prephitmp_260 != 0)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  _143 = (long unsigned int) prephitmp_258;
  __builtin_memmove (iftmp.11_168, prephitmp_252, _143);

  <bb 16>:
  # DEBUG i => 0
  _176 = MEM[(int *)bm_14(D) + 4B];
  # DEBUG D#12 => bm_14(D)
  # DEBUG this => D#12
  if (_176 > 0)
    goto <bb 18>;
  else
    goto <bb 17>;

  <bb 17>:
  # DEBUG this => &writes
  # DEBUG D#174 => &writes.D.35433
  # DEBUG this => D#174
  # DEBUG D#177 => writes.D.35433._M_impl._M_finish
  # DEBUG D#176 => writes.D.35433._M_impl._M_start
  # DEBUG D#74 => D#176
  # DEBUG D#75 => D#177
  # DEBUG __first => D#74
  # DEBUG __last => D#75
  # DEBUG D.64133 => D#76
  # DEBUG D#73 => D#75
  # DEBUG D#72 => D#74
  # DEBUG D#70 => D#72
  # DEBUG D#71 => D#73
  # DEBUG __first => D#70
  # DEBUG __last => D#71
  # DEBUG D#69 => D#71
  # DEBUG D#68 => D#70
  # DEBUG D#66 => D#68
  # DEBUG D#67 => D#69
  # DEBUG D.63522 => D#66
  # DEBUG D.63521 => D#67
  # DEBUG D#175 => &writes.D.35433
  # DEBUG this => D#175
  # DEBUG D#173 => D#175->_M_impl._M_end_of_storage
  # DEBUG D#172 => (long int) D#173
  # DEBUG D#171 => (long int) iftmp.11_168
  # DEBUG D#170 => D#172 - D#171
  # DEBUG D#169 => D#170 /[ex] 4
  # DEBUG D#166 => D#175
  # DEBUG D#167 => (long unsigned int) D#169
  # DEBUG __p => iftmp.11_168
  # DEBUG this => D#166
  # DEBUG __n => D#167
  # DEBUG D#165 => D#167
  # DEBUG D#164 => D#166
  if (iftmp.11_168 != 0B)
    goto <bb 37>;
  else
    goto <bb 38>;

  <bb 18>:
  pretmp_261 = this_7(D)->H_SRAM;
  pretmp_263 = this_7(D)->channel_width;
  pretmp_265 = this_7(D)->inputArea;
  pretmp_267 = this_7(D)->inputLeakagePower;
  pretmp_269 = this_7(D)->W_SRAM;
  pretmp_271 = depth_10 * pretmp_269;
  pretmp_272 = pretmp_261 * pretmp_263;
  pretmp_273 = pretmp_271 * pretmp_272;
  pretmp_274 = this_7(D)->MetalPitch;
  pretmp_276 = pretmp_274 * pretmp_274;
  pretmp_277 = pretmp_273 * pretmp_276;
  pretmp_278 = this_7(D)->classes;

  <bb 19>:
  # i_145 = PHI <0(18), i_60(22)>
  # prephitmp_266 = PHI <pretmp_265(18), _22(22)>
  # prephitmp_268 = PHI <pretmp_267(18), _25(22)>
  # DEBUG i => i_145
  # DEBUG D#12 => bm_14(D)
  # DEBUG this => D#12
  # DEBUG this => this_7(D)
  # DEBUG Words => depth_10
  # DEBUG D#530 => this_7(D)->channel_width
  # DEBUG D#529 => this_7(D)->H_SRAM
  # DEBUG D#528 => D#529 * D#530
  # DEBUG D#527 => this_7(D)->W_SRAM
  # DEBUG D#526 => depth_10 * D#527
  # DEBUG Asram => D#528 * D#526
  # DEBUG D#525 => this_7(D)->MetalPitch
  _22 = prephitmp_266 + pretmp_277;
  _25 = Pleak_13 + prephitmp_268;
  # DEBUG j => 0
  # DEBUG j => 0
  if (pretmp_278 <= 0)
    goto <bb 20>;
  else
    goto <bb 23>;

  <bb 20>:
  i_60 = i_145 + 1;
  # DEBUG i => i_60
  # DEBUG i => i_60
  # DEBUG D#12 => bm_14(D)
  # DEBUG this => D#12
  if (i_60 < _176)
    goto <bb 22>;
  else
    goto <bb 21>;

  <bb 21>:
  # this__inputLeakagePower_lsm.666_97 = PHI <_25(20)>
  # this__inputArea_lsm.664_27 = PHI <_22(20)>
  this_7(D)->inputArea = this__inputArea_lsm.664_27;
  this_7(D)->inputLeakagePower = this__inputLeakagePower_lsm.666_97;
  goto <bb 17>;

  <bb 22>:
  goto <bb 19>;

  <bb 23>:
  _226 = i_145 * pretmp_278;
  _163 = (long unsigned int) _226;
  # DEBUG D#19 => &reads
  # DEBUG __n => _163
  # DEBUG this => D#19
  _228 = _163 * 4;
  _229 = reads$_M_impl$_M_start_165 + _228;
  _230 = *_229;
  _231 = (double) _230;
  _235 = this_7(D)->totalTime;
  ar_236 = _231 / _235;
  # DEBUG ar => ar_236
  # DEBUG D#19 => &writes
  # DEBUG __n => _163
  # DEBUG this => D#19
  _135 = iftmp.11_168 + _228;
  _136 = *_135;
  _237 = (double) _136;
  aw_144 = _237 / _235;
  # DEBUG aw => aw_144
  if (ar_236 > 1.0e+0)
    goto <bb 24>;
  else
    goto <bb 26>;

  <bb 24>:
  # this__inputLeakagePower_lsm.666_90 = PHI <_25(23)>
  # this__inputArea_lsm.664_20 = PHI <_22(23)>
  this_7(D)->inputArea = this__inputArea_lsm.664_20;
  this_7(D)->inputLeakagePower = this__inputLeakagePower_lsm.666_90;

  <bb 25>:
  # DEBUG __s => "activity factor is greater than one, soemthing is stomping memory\n"
  # DEBUG __out => &cout
  # DEBUG __s => "activity factor is greater than one, soemthing is stomping memory\n"
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "activity factor is greater than one, soemthing is stomping memory\n", 66);
  goto <bb 33>;

  <bb 26>:
  if (aw_144 > 1.0e+0)
    goto <bb 27>;
  else
    goto <bb 34>;

  <bb 27>:
  # this__inputLeakagePower_lsm.666_89 = PHI <_25(26)>
  # this__inputArea_lsm.664_4 = PHI <_22(26)>
  this_7(D)->inputArea = this__inputArea_lsm.664_4;
  this_7(D)->inputLeakagePower = this__inputLeakagePower_lsm.666_89;
  goto <bb 25>;

  <bb 28>:
  _29 = j_56 + _226;
  _30 = (long unsigned int) _29;
  # DEBUG D#19 => &reads
  # DEBUG __n => _30
  # DEBUG this => D#19
  _76 = _30 * 4;
  _77 = reads$_M_impl$_M_start_165 + _76;
  _32 = *_77;
  _33 = (double) _32;
  ar_35 = _33 / _235;
  # DEBUG ar => ar_35
  # DEBUG D#19 => &writes
  # DEBUG __n => _30
  # DEBUG this => D#19
  _75 = iftmp.11_168 + _76;
  _37 = *_75;
  _38 = (double) _37;
  aw_39 = _38 / _235;
  # DEBUG aw => aw_39
  if (ar_35 > 1.0e+0)
    goto <bb 29>;
  else
    goto <bb 30>;

  <bb 29>:
  # this__inputWritePower_lsm.670_120 = PHI <_54(28)>
  # this__inputReadPower_lsm.668_112 = PHI <_49(28)>
  # this__inputLeakagePower_lsm.666_66 = PHI <_25(28)>
  # this__inputArea_lsm.664_3 = PHI <_22(28)>
  this_7(D)->inputArea = this__inputArea_lsm.664_3;
  this_7(D)->inputLeakagePower = this__inputLeakagePower_lsm.666_66;
  this_7(D)->inputReadPower = this__inputReadPower_lsm.668_112;
  this_7(D)->inputWritePower = this__inputWritePower_lsm.670_120;
  goto <bb 25>;

  <bb 30>:
  if (aw_39 > 1.0e+0)
    goto <bb 31>;
  else
    goto <bb 32>;

  <bb 31>:
  # this__inputWritePower_lsm.670_119 = PHI <_54(30)>
  # this__inputReadPower_lsm.668_111 = PHI <_49(30)>
  # this__inputLeakagePower_lsm.666_62 = PHI <_25(30)>
  # this__inputArea_lsm.664_2 = PHI <_22(30)>
  this_7(D)->inputArea = this__inputArea_lsm.664_2;
  this_7(D)->inputLeakagePower = this__inputLeakagePower_lsm.666_62;
  this_7(D)->inputReadPower = this__inputReadPower_lsm.668_111;
  this_7(D)->inputWritePower = this__inputWritePower_lsm.670_119;
  goto <bb 25>;

  <bb 32>:
  goto <bb 35>;

  <bb 33>:
  exit (-1);

  <bb 34>:
  pretmp_296 = this_7(D)->inputReadPower;
  pretmp_298 = this_7(D)->inputWritePower;
  pretmp_301 = this_7(D)->Cd_pwr;
  pretmp_303 = this_7(D)->LAMBDA;
  pretmp_305 = pretmp_303 * 4.0e+0;
  pretmp_306 = pretmp_305 * 2.0e+0;
  pretmp_307 = this_7(D)->Cg_pwr;
  pretmp_309 = pretmp_306 * pretmp_307;
  pretmp_310 = pretmp_274 * 6.0e+0;
  pretmp_311 = this_7(D)->Cw;
  pretmp_313 = pretmp_310 * pretmp_311;
  pretmp_314 = pretmp_309 + pretmp_313;
  pretmp_315 = pretmp_263 * pretmp_314;
  pretmp_316 = pretmp_274 * 8.0e+0;
  pretmp_317 = depth_10 + pretmp_316;
  pretmp_318 = this_7(D)->Co;
  pretmp_320 = this_7(D)->Ci;
  pretmp_322 = pretmp_318 / pretmp_320;
  pretmp_323 = pretmp_322 + 1.0e+0;
  pretmp_324 = pretmp_323 * 3.125e-1;
  pretmp_325 = pretmp_324 + 1.0e+0;
  pretmp_326 = pretmp_311 * pretmp_317;
  pretmp_327 = pretmp_320 * pretmp_326;
  pretmp_328 = pretmp_325 * pretmp_327;
  pretmp_329 = pretmp_315 * pretmp_325;
  pretmp_330 = pretmp_263 * 6.0e+0;
  pretmp_331 = pretmp_274 * pretmp_330;
  pretmp_332 = pretmp_323 * 1.25e+0;
  pretmp_333 = pretmp_311 * pretmp_331;
  pretmp_334 = pretmp_263 * 3.0e+0;
  pretmp_335 = pretmp_320 * pretmp_334;
  pretmp_336 = pretmp_333 + pretmp_335;
  pretmp_337 = pretmp_332 * pretmp_336;
  pretmp_338 = pretmp_263 * 2.0e+0;
  pretmp_339 = pretmp_320 * pretmp_338;
  pretmp_340 = pretmp_333 + pretmp_339;
  pretmp_341 = pretmp_332 * pretmp_340;
  pretmp_342 = pretmp_337 + pretmp_341;
  pretmp_343 = pretmp_328 * 2.0e+0;
  pretmp_344 = pretmp_329 + pretmp_343;
  pretmp_345 = pretmp_342 + pretmp_344;
  pretmp_346 = this_7(D)->Vdd;
  pretmp_348 = pretmp_345 * pretmp_346;
  pretmp_349 = pretmp_346 * pretmp_348;
  pretmp_350 = this_7(D)->fCLK;
  pretmp_352 = pretmp_349 * pretmp_350;
  pretmp_368 = pretmp_301 * pretmp_305;
  pretmp_369 = pretmp_311 * pretmp_316;
  pretmp_370 = pretmp_368 + pretmp_369;
  pretmp_371 = depth_10 * pretmp_370;
  pretmp_372 = pretmp_346 * pretmp_346;
  pretmp_373 = pretmp_371 * pretmp_372;
  pretmp_374 = pretmp_350 * pretmp_373;
  pretmp_375 = pretmp_263 * pretmp_374;
  pretmp_376 = pretmp_318 + pretmp_320;
  pretmp_377 = pretmp_376 * 2.0e+0;
  pretmp_378 = pretmp_377 * 5.0e-1;
  pretmp_379 = pretmp_372 * pretmp_378;
  pretmp_380 = pretmp_374 + pretmp_379;
  pretmp_381 = pretmp_263 * pretmp_380;
  pretmp_382 = pretmp_352 + pretmp_375;
  pretmp_383 = pretmp_352 + pretmp_381;

  <bb 35>:
  # j_239 = PHI <0(34), j_56(32)>
  # ar_68 = PHI <ar_236(34), ar_35(32)>
  # aw_67 = PHI <aw_144(34), aw_39(32)>
  # prephitmp_297 = PHI <pretmp_296(34), _49(32)>
  # prephitmp_299 = PHI <pretmp_298(34), _54(32)>
  # DEBUG j => j_239
  # DEBUG __n => _163
  # DEBUG this => D#19
  # DEBUG ar => ar_68
  # DEBUG D#19 => &writes
  # DEBUG __n => _163
  # DEBUG this => D#19
  # DEBUG aw => aw_67
  # DEBUG this => this_7(D)
  # DEBUG memoryWidth => D#530
  # DEBUG memoryDepth => depth_10
  # DEBUG D#524 => this_7(D)->LAMBDA
  # DEBUG D#523 => D#524 * 4.0e+0
  # DEBUG D#522 => D#523 * 2.0e+0
  # DEBUG D#521 => this_7(D)->Cg_pwr
  # DEBUG D#520 => D#522 * D#521
  # DEBUG D#519 => D#525 * 6.0e+0
  # DEBUG D#518 => this_7(D)->Cw
  # DEBUG D#517 => D#519 * D#518
  # DEBUG D#516 => D#520 + D#517
  # DEBUG Ccell => D#516
  # DEBUG D#515 => D#530 * D#516
  # DEBUG Cwl => D#515
  # DEBUG D#514 => D#525 * 8.0e+0
  # DEBUG D#513 => depth_10 + D#514
  # DEBUG Warray => D#513
  # DEBUG D#512 => this_7(D)->Co
  # DEBUG D#511 => this_7(D)->Ci
  # DEBUG D#510 => D#512 / D#511
  # DEBUG D#509 => D#510 + 1.0e+0
  # DEBUG D#508 => D#509 * 3.125e-1
  # DEBUG D#507 => D#508 + 1.0e+0
  # DEBUG x => D#507
  # DEBUG D#506 => D#518 * D#513
  # DEBUG D#505 => D#511 * D#506
  # DEBUG D#504 => D#507 * D#505
  # DEBUG Cpredecode => D#504
  # DEBUG D#503 => D#515 * D#507
  # DEBUG Cdecode => D#503
  # DEBUG D#502 => D#530 * 6.0e+0
  # DEBUG D#501 => D#525 * D#502
  # DEBUG Harray => D#501
  # DEBUG D#500 => D#509 * 1.25e+0
  # DEBUG y => D#500
  # DEBUG D#499 => D#518 * D#501
  # DEBUG D#498 => D#530 * 3.0e+0
  # DEBUG D#497 => D#511 * D#498
  # DEBUG D#496 => D#499 + D#497
  # DEBUG D#495 => D#500 * D#496
  # DEBUG Cprecharge => D#495
  # DEBUG D#494 => D#530 * 2.0e+0
  # DEBUG D#493 => D#511 * D#494
  # DEBUG D#492 => D#499 + D#493
  # DEBUG D#491 => D#500 * D#492
  # DEBUG Cwren => D#491
  # DEBUG Cbd => D#495 + D#491
  # DEBUG D#490 => D#504 * 2.0e+0
  # DEBUG Cwd => D#503 + D#490
  # DEBUG D#489 => this_7(D)->Vdd
  # DEBUG D#488 => this_7(D)->fCLK
  # DEBUG Pwl => NULL
  # DEBUG this => this_7(D)
  # DEBUG memoryDepth => depth_10
  # DEBUG D#487 => this_7(D)->Cd_pwr
  # DEBUG D#486 => D#487 * D#523
  # DEBUG D#485 => D#518 * D#514
  # DEBUG D#484 => D#486 + D#485
  # DEBUG Ccell => D#484
  # DEBUG D#483 => depth_10 * D#484
  # DEBUG Cbl => D#483
  # DEBUG Vswing => D#489
  # DEBUG D#482 => D#489 * D#489
  # DEBUG D#481 => D#483 * D#482
  # DEBUG D#480 => D#481 * D#488
  # DEBUG Prd => D#530 * D#480
  # DEBUG this => this_7(D)
  # DEBUG memoryDepth => depth_10
  # DEBUG Ccell => D#484
  # DEBUG Cbl => D#483
  # DEBUG D#479 => D#512 + D#511
  # DEBUG D#478 => D#479 * 2.0e+0
  # DEBUG Ccc => D#478
  # DEBUG D#477 => D#478 * 5.0e-1
  # DEBUG D#476 => D#477 * D#482
  # DEBUG D#475 => D#476 + D#480
  # DEBUG Pwr => D#530 * D#475
  _48 = ar_68 * pretmp_382;
  _49 = _48 + prephitmp_297;
  _53 = aw_67 * pretmp_383;
  _54 = _53 + prephitmp_299;
  j_56 = j_239 + 1;
  # DEBUG j => j_56
  # DEBUG j => j_56
  if (j_56 >= pretmp_278)
    goto <bb 36>;
  else
    goto <bb 28>;

  <bb 36>:
  # this__inputWritePower_lsm.670_118 = PHI <_54(35)>
  # this__inputReadPower_lsm.668_110 = PHI <_49(35)>
  this_7(D)->inputReadPower = this__inputReadPower_lsm.668_110;
  this_7(D)->inputWritePower = this__inputWritePower_lsm.670_118;
  goto <bb 20>;

  <bb 37>:
  # DEBUG D#163 => &D#164->_M_impl
  # DEBUG D#161 => D#163
  # DEBUG D#162 => D#165
  # DEBUG __p => iftmp.11_168
  # DEBUG __a => D#161
  # DEBUG __n => D#162
  # DEBUG D#160 => D#162
  # DEBUG D#159 => D#161
  # DEBUG D#157 => D#159
  # DEBUG D#158 => D#160
  # DEBUG __p => iftmp.11_168
  # DEBUG this => D#157
  # DEBUG D.67619 => D#158
  operator delete (iftmp.11_168);

  <bb 38>:
  # DEBUG D#168 => &D#175->_M_impl
  # DEBUG this => D#168
  # DEBUG this => D#168
  # DEBUG this => D#168
  MEM[(struct  &)&writes] ={v} {CLOBBER};
  # DEBUG this => &reads
  # DEBUG D#174 => &reads.D.35433
  # DEBUG this => D#174
  # DEBUG D#177 => reads.D.35433._M_impl._M_finish
  # DEBUG D#176 => reads.D.35433._M_impl._M_start
  # DEBUG D#74 => D#176
  # DEBUG D#75 => D#177
  # DEBUG __first => D#74
  # DEBUG __last => D#75
  # DEBUG D.64133 => D#76
  # DEBUG D#73 => D#75
  # DEBUG D#72 => D#74
  # DEBUG D#70 => D#72
  # DEBUG D#71 => D#73
  # DEBUG __first => D#70
  # DEBUG __last => D#71
  # DEBUG D#69 => D#71
  # DEBUG D#68 => D#70
  # DEBUG D#66 => D#68
  # DEBUG D#67 => D#69
  # DEBUG D.63522 => D#66
  # DEBUG D.63521 => D#67
  # DEBUG D#175 => &reads.D.35433
  # DEBUG this => D#175
  # DEBUG D#173 => D#175->_M_impl._M_end_of_storage
  # DEBUG D#172 => (long int) D#173
  # DEBUG D#171 => (long int) reads$_M_impl$_M_start_165
  # DEBUG D#170 => D#172 - D#171
  # DEBUG D#169 => D#170 /[ex] 4
  # DEBUG D#166 => D#175
  # DEBUG D#167 => (long unsigned int) D#169
  # DEBUG __p => reads$_M_impl$_M_start_165
  # DEBUG this => D#166
  # DEBUG __n => D#167
  # DEBUG D#165 => D#167
  # DEBUG D#164 => D#166
  if (reads$_M_impl$_M_start_165 != 0B)
    goto <bb 39>;
  else
    goto <bb 40>;

  <bb 39>:
  # DEBUG D#163 => &D#164->_M_impl
  # DEBUG D#161 => D#163
  # DEBUG D#162 => D#165
  # DEBUG __p => reads$_M_impl$_M_start_165
  # DEBUG __a => D#161
  # DEBUG __n => D#162
  # DEBUG D#160 => D#162
  # DEBUG D#159 => D#161
  # DEBUG D#157 => D#159
  # DEBUG D#158 => D#160
  # DEBUG __p => reads$_M_impl$_M_start_165
  # DEBUG this => D#157
  # DEBUG D.67604 => D#158
  operator delete (reads$_M_impl$_M_start_165);

  <bb 40>:
  # DEBUG D#168 => &D#175->_M_impl
  # DEBUG this => D#168
  # DEBUG this => D#168
  # DEBUG this => D#168
  reads ={v} {CLOBBER};
  writes ={v} {CLOBBER};
  return;

<L9>:
  # DEBUG this => &writes
  # DEBUG D#174 => &writes.D.35433
  # DEBUG this => D#174
  # DEBUG D#177 => writes.D.35433._M_impl._M_finish
  # DEBUG D#176 => writes.D.35433._M_impl._M_start
  # DEBUG D#74 => D#176
  # DEBUG D#75 => D#177
  # DEBUG __first => D#74
  # DEBUG __last => D#75
  # DEBUG D.64133 => D#76
  # DEBUG D#73 => D#75
  # DEBUG D#72 => D#74
  # DEBUG D#70 => D#72
  # DEBUG D#71 => D#73
  # DEBUG __first => D#70
  # DEBUG __last => D#71
  # DEBUG D#69 => D#71
  # DEBUG D#68 => D#70
  # DEBUG D#66 => D#68
  # DEBUG D#67 => D#69
  # DEBUG D.63522 => D#66
  # DEBUG D.63521 => D#67
  # DEBUG D#175 => &writes.D.35433
  # DEBUG this => D#175
  # DEBUG D#173 => D#175->_M_impl._M_end_of_storage
  # DEBUG D#172 => (long int) D#173
  # DEBUG D#171 => (long int) iftmp.11_168
  # DEBUG D#170 => D#172 - D#171
  # DEBUG D#169 => D#170 /[ex] 4
  # DEBUG D#166 => D#175
  # DEBUG D#167 => (long unsigned int) D#169
  # DEBUG __p => iftmp.11_168
  # DEBUG this => D#166
  # DEBUG __n => D#167
  # DEBUG D#165 => D#167
  # DEBUG D#164 => D#166
  if (iftmp.11_168 != 0B)
    goto <bb 42>;
  else
    goto <bb 43>;

  <bb 42>:
  # DEBUG D#163 => &D#164->_M_impl
  # DEBUG D#161 => D#163
  # DEBUG D#162 => D#165
  # DEBUG __p => iftmp.11_168
  # DEBUG __a => D#161
  # DEBUG __n => D#162
  # DEBUG D#160 => D#162
  # DEBUG D#159 => D#161
  # DEBUG D#157 => D#159
  # DEBUG D#158 => D#160
  # DEBUG __p => iftmp.11_168
  # DEBUG this => D#157
  # DEBUG D.67634 => D#158
  operator delete (iftmp.11_168);

  <bb 43>:
  # DEBUG D#168 => &D#175->_M_impl
  # DEBUG this => D#168
  # DEBUG this => D#168
  # DEBUG this => D#168
  MEM[(struct  &)&writes] ={v} {CLOBBER};
  resx 3

<L14>:
  goto <bb 46> (<L10>);

<L12>:

<L10>:
  # DEBUG this => &reads
  # DEBUG D#174 => &reads.D.35433
  # DEBUG this => D#174
  # DEBUG D#177 => reads.D.35433._M_impl._M_finish
  # DEBUG D#176 => reads.D.35433._M_impl._M_start
  # DEBUG D#74 => D#176
  # DEBUG D#75 => D#177
  # DEBUG __first => D#74
  # DEBUG __last => D#75
  # DEBUG D.64133 => D#76
  # DEBUG D#73 => D#75
  # DEBUG D#72 => D#74
  # DEBUG D#70 => D#72
  # DEBUG D#71 => D#73
  # DEBUG __first => D#70
  # DEBUG __last => D#71
  # DEBUG D#69 => D#71
  # DEBUG D#68 => D#70
  # DEBUG D#66 => D#68
  # DEBUG D#67 => D#69
  # DEBUG D.63522 => D#66
  # DEBUG D.63521 => D#67
  # DEBUG D#175 => &reads.D.35433
  # DEBUG this => D#175
  # DEBUG D#173 => D#175->_M_impl._M_end_of_storage
  # DEBUG D#172 => (long int) D#173
  # DEBUG D#171 => (long int) reads$_M_impl$_M_start_165
  # DEBUG D#170 => D#172 - D#171
  # DEBUG D#169 => D#170 /[ex] 4
  # DEBUG D#166 => D#175
  # DEBUG D#167 => (long unsigned int) D#169
  # DEBUG __p => reads$_M_impl$_M_start_165
  # DEBUG this => D#166
  # DEBUG __n => D#167
  # DEBUG D#165 => D#167
  # DEBUG D#164 => D#166
  if (reads$_M_impl$_M_start_165 != 0B)
    goto <bb 47>;
  else
    goto <bb 48>;

  <bb 47>:
  # DEBUG D#163 => &D#164->_M_impl
  # DEBUG D#161 => D#163
  # DEBUG D#162 => D#165
  # DEBUG __p => reads$_M_impl$_M_start_165
  # DEBUG __a => D#161
  # DEBUG __n => D#162
  # DEBUG D#160 => D#162
  # DEBUG D#159 => D#161
  # DEBUG D#157 => D#159
  # DEBUG D#158 => D#160
  # DEBUG __p => reads$_M_impl$_M_start_165
  # DEBUG this => D#157
  # DEBUG D.67649 => D#158
  operator delete (reads$_M_impl$_M_start_165);

  <bb 48>:
  # DEBUG D#168 => &D#175->_M_impl
  # DEBUG this => D#168
  # DEBUG this => D#168
  # DEBUG this => D#168
  resx 2

}



;; Function void Power_Module::calcSwitch(const SwitchMonitor*) (_ZN12Power_Module10calcSwitchEPK13SwitchMonitor, funcdef_no=2005, decl_uid=45197, cgraph_uid=504, symbol_order=505)

Trying loop 1 as candidate
loop 1 is not innermost
loop is not parallel according to graphite
Trying loop 10 as candidate
loop 10 is innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is not innermost
loop is not parallel according to graphite
Trying loop 8 as candidate
loop 8 is innermost
loop is not parallel according to graphite
Trying loop 7 as candidate
loop 7 is innermost
loop is not parallel according to graphite
Trying loop 9 as candidate
loop 9 is innermost
loop is not parallel according to graphite
Trying loop 5 as candidate
loop 5 is innermost
loop is not parallel according to graphite
void Power_Module::calcSwitch(const SwitchMonitor*) (struct Power_Module * const this, const struct SwitchMonitor * sm)
{
  bool Close_Phi.708_I_lsm.720;
  double Close_Phi.708_I_lsm.719;
  bool Close_Phi.709_I_lsm.718;
  double Close_Phi.709_I_lsm.717;
  bool phi_out_of_ssa.706_I_lsm.716;
  double phi_out_of_ssa.706_I_lsm.715;
  bool phi_out_of_ssa.707_I_lsm.714;
  double phi_out_of_ssa.707_I_lsm.713;
  signed long graphite_IV.712;
  double Cross_BB_scalar_dependence.711[1];
  double D.69438;
  double Cross_BB_scalar_dependence.710[1];
  double D.69436;
  double D.69435;
  double D.69434;
  double D.69433;
  double D.69432;
  double D.69431;
  double D.69430;
  double D.69429;
  double Close_Phi.709[1];
  double Close_Phi.708[1];
  double phi_out_of_ssa.707[1];
  double phi_out_of_ssa.706[1];
  bool this__switchPowerCtrl_lsm.705;
  double this__switchPowerCtrl_lsm.704;
  bool this__switchPower_lsm.703;
  double this__switchPower_lsm.702;
  bool this__outputCtrlPower_lsm.701;
  double this__outputCtrlPower_lsm.700;
  bool this__outputPower_lsm.699;
  double this__outputPower_lsm.698;
  int * activity$_M_impl$_M_start;
  double Cclk;
  double clockLength;
  double columns;
  double D.69406;
  double Wxbar;
  double Hxbar;
  double CwIn;
  double CwOut;
  double Cxi;
  double Cxo;
  double Cti;
  double Cto;
  double CinputDriver;
  double Cin;
  double Cout;
  double D.69399;
  double Wxbar;
  double Hxbar;
  double CwIn;
  double Cti;
  double Cctrl;
  double Cdrive;
  double D.69381;
  struct basic_ostream & D.69361;
  struct Router * * D.69357;
  int * D.69348;
  double Wxbar;
  double Hxbar;
  double CwIn;
  double CwOut;
  double Cxi;
  double Cti;
  double D.69339;
  const ptrdiff_t _Num;
  double * __first;
  size_type __n;
  double Cdin;
  double Cclk;
  double Cint;
  double Woutmod;
  double Cenable;
  double Adff;
  int k;
  double Px;
  double a;
  int k;
  int j;
  int k;
  int i;
  struct vector type_activity;
  const struct vector activity;
  const value_type D.56631;
  long int pretmp_1;
  double _2;
  double _3;
  double _4;
  int _5;
  long int prephitmp_6;
  double _7;
  double _8;
  double _9;
  const int & _10;
  int _14;
  double _15;
  int _16;
  double _17;
  double _20;
  double _21;
  double _25;
  double _26;
  double pretmp_28;
  double _29;
  const int pretmp_30;
  double _31;
  double _32;
  double _34;
  int * const prephitmp_35;
  double _36;
  double _37;
  int _38;
  int * const _40;
  double pretmp_42;
  double _43;
  double _44;
  double _47;
  double _50;
  sizetype _51;
  double _52;
  sizetype _53;
  unsigned int _54;
  unsigned int _55;
  int _56;
  long unsigned int _57;
  int _58;
  double _62;
  double _63;
  double _64;
  double _65;
  double _66;
  double _67;
  double _68;
  double _69;
  double _72;
  double _73;
  double _74;
  double _75;
  double _76;
  double pretmp_77;
  double _80;
  double _82;
  long unsigned int _84;
  double _85;
  double _86;
  double _87;
  signed long _91;
  double _94;
  double _95;
  double pretmp_96;
  double _97;
  double _98;
  double _101;
  double _106;
  signed long _107;
  long unsigned int _108;
  double pretmp_116;
  double pretmp_119;
  bool _120;
  double pretmp_121;
  sizetype _123;
  long unsigned int _124;
  double _125;
  int _126;
  long unsigned int _127;
  const int & _128;
  long unsigned int _129;
  double & _130;
  double pretmp_136;
  double prephitmp_160;
  double prephitmp_167;
  double _168;
  double _183;
  long unsigned int _184;
  double pretmp_187;
  double pretmp_188;
  double & _190;
  long unsigned int _191;
  int _193;
  double _197;
  double pretmp_198;
  int pretmp_199;
  double prephitmp_200;
  int * const _203;
  long int _204;
  long int _205;
  long int _206;
  long int _207;
  size_type _208;
  double _210;
  double _211;
  double prephitmp_217;
  long unsigned int _218;
  int _219;
  int _220;
  double _223;
  int _224;
  double _225;
  double _230;
  double _231;
  double _232;
  double _233;
  double _234;
  double _235;
  double _236;
  double _237;
  double _238;
  double _239;
  double _240;
  double _241;
  double _242;
  double _243;
  double _244;
  long unsigned int _245;
  int * _246;
  long unsigned int _248;
  struct Router * * _249;
  const int & _250;
  double pretmp_251;
  double pretmp_252;
  sizetype _256;
  int * const pretmp_258;
  long unsigned int _259;
  long int pretmp_264;
  int * const pretmp_265;
  double _266;
  const ptrdiff_t prephitmp_274;
  sizetype _275;
  double _279;
  double _284;
  double _285;
  double _286;
  long unsigned int _287;
  long unsigned int _288;
  double & _289;
  double _290;
  double _291;
  int _294;
  long unsigned int _295;
  long unsigned int _296;
  const int & _297;
  int _298;
  sizetype _301;
  sizetype _302;
  double * _303;
  double _304;
  double _305;
  double _308;
  double _309;
  double _312;
  double _313;
  double _314;
  double _320;
  double _321;
  double _322;
  double _326;
  double _327;
  double _332;
  double _333;
  double _334;
  double _335;
  double _336;
  double _339;
  double _340;
  double _341;
  double _342;
  double _343;
  double _344;
  double _345;
  double _346;
  double _347;
  double _348;
  double _349;
  double pretmp_351;
  double _352;
  double _353;
  double _354;
  double _355;
  double _356;
  long unsigned int _360;
  long int pretmp_361;
  int _362;
  int _364;
  long unsigned int _366;
  long unsigned int _367;
  const int & _371;
  int _372;
  const ptrdiff_t pretmp_375;
  double pretmp_376;
  double pretmp_377;
  double pretmp_379;
  double pretmp_380;
  double prephitmp_382;
  double _383;
  double prephitmp_384;
  double _389;
  double _390;
  double _391;
  double _392;
  double _393;
  double _395;
  double pretmp_396;
  double pretmp_397;
  double pretmp_398;
  double pretmp_399;
  double pretmp_400;
  double pretmp_402;
  double prephitmp_403;
  double pretmp_404;
  double prephitmp_405;
  double & _406;
  long unsigned int _407;
  long unsigned int _408;
  double pretmp_409;
  double pretmp_410;
  double pretmp_412;
  double pretmp_413;
  double pretmp_414;
  double pretmp_415;
  double pretmp_417;
  double pretmp_418;
  double pretmp_419;
  double pretmp_420;
  double pretmp_421;
  double pretmp_423;
  double pretmp_425;
  double pretmp_426;
  double pretmp_427;
  double pretmp_428;
  double pretmp_429;
  double pretmp_430;
  double pretmp_431;
  double pretmp_432;
  double pretmp_433;
  double pretmp_434;
  double pretmp_435;
  double pretmp_436;
  double pretmp_437;
  double pretmp_438;
  double pretmp_439;
  double pretmp_440;
  double pretmp_441;
  double pretmp_442;
  double pretmp_443;
  double pretmp_444;
  double pretmp_445;
  double pretmp_447;
  double pretmp_448;
  double pretmp_450;
  double _452;
  double _453;
  double pretmp_461;
  double pretmp_462;
  double pretmp_463;
  double pretmp_464;
  double pretmp_465;
  double pretmp_466;
  double pretmp_467;
  double pretmp_468;
  double pretmp_469;
  double pretmp_470;
  double pretmp_471;
  double pretmp_472;
  double pretmp_473;
  double pretmp_474;
  double pretmp_475;
  double pretmp_476;
  double pretmp_477;

  <bb 2>:
  # DEBUG this => sm_13(D)
  _14 = MEM[(const int &)sm_13(D) + 8];
  _15 = (double) _14;
  # DEBUG this => sm_13(D)
  _16 = MEM[(const int &)sm_13(D) + 4];
  _17 = (double) _16;
  # DEBUG this => this_18(D)
  # DEBUG Inputs => _17
  # DEBUG Outputs => _15
  _52 = this_18(D)->channel_width;
  _50 = _17 * _52;
  _47 = this_18(D)->CrossbarPitch;
  _43 = _47 * _50;
  _36 = _15 * _52;
  _34 = _36 * _47;
  _29 = _34 * _43;
  _20 = this_18(D)->switchArea;
  _21 = _20 + _29;
  this_18(D)->switchArea = _21;
  # DEBUG this => sm_13(D)
  # DEBUG this => this_18(D)
  # DEBUG Outputs => _15
  _101 = this_18(D)->W_DFQD1;
  _95 = _15 * _101;
  _85 = this_18(D)->H_DFQD1;
  Adff_78 = _85 * _95;
  # DEBUG Adff => Adff_78
  _76 = _52 * Adff_78;
  _69 = this_18(D)->MetalPitch;
  _66 = _69 * _76;
  _64 = _66 * _69;
  _25 = this_18(D)->outputArea;
  _26 = _25 + _64;
  this_18(D)->outputArea = _26;
  # DEBUG this => sm_13(D)
  # DEBUG this => sm_13(D)
  # DEBUG this => this_18(D)
  # DEBUG width => _52
  # DEBUG inputs => _17
  # DEBUG outputs => _15
  # DEBUG Wxbar => _34
  # DEBUG Hxbar => _43
  _225 = this_18(D)->Cw;
  CwIn_226 = _34 * _225;
  # DEBUG CwIn => CwIn_226
  CwOut_227 = _43 * _225;
  # DEBUG CwOut => CwOut_227
  Cxi_228 = CwOut_227 * 6.25e-2;
  # DEBUG Cxi => Cxi_228
  Cti_229 = CwIn_226 * 6.25e-2;
  # DEBUG Cti => Cti_229
  _230 = this_18(D)->IoffN;
  _231 = this_18(D)->IoffP;
  _232 = _231 * 2.0e+0;
  _233 = _230 + _232;
  _234 = _233 * 5.0e-1;
  _235 = _52 * _234;
  _236 = _15 * _17;
  _237 = Cxi_228 * _236;
  _238 = _17 * Cti_229;
  _239 = _237 + _238;
  _240 = _15 * Cti_229;
  _241 = _239 + _240;
  _242 = _235 * _241;
  _243 = this_18(D)->Ci;
  _244 = _242 / _243;
  _31 = this_18(D)->switchPowerLeak;
  _32 = _31 + _244;
  this_18(D)->switchPowerLeak = _32;
  # DEBUG this => sm_13(D)
  # DEBUG D#570 => &sm_13(D)->_event
  # DEBUG this => &activity
  # DEBUG __x => D#570
  # DEBUG D#407 => &D#570->D.35433
  # DEBUG this => D#407
  # DEBUG __a => NULL
  _40 = MEM[(int * *)sm_13(D) + 16B];
  # DEBUG D#27 => D#570
  _203 = MEM[(int * *)sm_13(D) + 24B];
  # DEBUG D#27 => D#570
  # DEBUG this => D#27
  # DEBUG this => D#27
  _204 = (long int) _203;
  _205 = (long int) _40;
  _206 = _204 - _205;
  _207 = _206 /[ex] 4;
  _208 = (size_type) _207;
  # DEBUG D#409 => &activity.D.35433
  # DEBUG this => D#409
  # DEBUG __n => NULL
  # DEBUG __a => NULL
  # DEBUG D#353 => &D#409->_M_impl
  # DEBUG this => D#353
  # DEBUG __a => NULL
  # DEBUG this => D#353
  # DEBUG __a => NULL
  # DEBUG this => D#353
  # DEBUG D.64054 => NULL
  # DEBUG this => D#409
  # DEBUG __n => NULL
  # DEBUG D#351 => D#409
  # DEBUG __n => _208
  # DEBUG this => D#351
  # DEBUG D#350 => D#351
  if (_208 != 0)
    goto <bb 3>;
  else
    goto <bb 6>;

  <bb 3>:
  # DEBUG D#349 => &D#350->_M_impl
  # DEBUG D#348 => D#349
  # DEBUG __n => _208
  # DEBUG __a => D#348
  # DEBUG D#347 => D#348
  # DEBUG D#345 => D#347
  # DEBUG D#346 => 0B
  # DEBUG __n => _208
  # DEBUG this => D#345
  # DEBUG D.69346 => D#346
  # DEBUG D#344 => D#345
  # DEBUG D#343 => D#344
  # DEBUG this => D#343
  if (_208 > 4611686018427387903)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  std::__throw_bad_alloc ();

  <bb 5>:
  _245 = (long unsigned int) _206;
  _246 = operator new (_245);
  pretmp_258 = MEM[(int * *)sm_13(D) + 24B];
  pretmp_265 = MEM[(int * *)sm_13(D) + 16B];
  pretmp_361 = (long int) pretmp_258;
  pretmp_264 = (long int) pretmp_265;
  pretmp_1 = pretmp_361 - pretmp_264;
  pretmp_375 = pretmp_1 /[ex] 4;

  <bb 6>:
  # activity$_M_impl$_M_start_247 = PHI <0B(2), _246(5)>
  # prephitmp_35 = PHI <_40(2), pretmp_265(5)>
  # prephitmp_6 = PHI <_206(2), pretmp_1(5)>
  # prephitmp_274 = PHI <_207(2), pretmp_375(5)>
  # DEBUG activity$_M_impl$_M_start => activity$_M_impl$_M_start_247
  # DEBUG D#408 => &activity.D.35433
  # DEBUG this => D#408
  # DEBUG D#629 => MEM[(int * *)sm_13(D) + 24B]
  # DEBUG D#37 => D#570
  # DEBUG this => D#37
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG D#628 => MEM[(int * *)sm_13(D) + 16B]
  # DEBUG D#38 => D#570
  # DEBUG this => D#38
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG __first => D#628
  # DEBUG __last => D#629
  # DEBUG __result => NULL
  # DEBUG D.69299 => D#406
  # DEBUG __first => D#628
  # DEBUG __last => D#629
  # DEBUG __result => NULL
  # DEBUG __assignable => 1
  # DEBUG __first => D#628
  # DEBUG __last => D#629
  # DEBUG __result => NULL
  # DEBUG __first => D#628
  # DEBUG __last => D#629
  # DEBUG __result => NULL
  # DEBUG __it => D#629
  # DEBUG __it$_M_current => D#629
  # DEBUG __it => D#628
  # DEBUG __it$_M_current => D#628
  # DEBUG __first => D#628
  # DEBUG __last => D#629
  # DEBUG __result => NULL
  # DEBUG __it => NULL
  # DEBUG __it => NULL
  # DEBUG __it => D#629
  # DEBUG __it => D#629
  # DEBUG this => NULL
  # DEBUG __it => D#628
  # DEBUG __it => D#628
  # DEBUG this => NULL
  # DEBUG __first => D#628
  # DEBUG __last => D#629
  # DEBUG __result => NULL
  # DEBUG __simple => 1
  # DEBUG __first => D#628
  # DEBUG __last => D#629
  # DEBUG __result => NULL
  # DEBUG D#627 => (long int) D#629
  # DEBUG D#626 => (long int) D#628
  # DEBUG D#625 => D#627 - D#626
  # DEBUG _Num => D#625 /[ex] 4
  if (prephitmp_274 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  _218 = (long unsigned int) prephitmp_6;
  __builtin_memmove (activity$_M_impl$_M_start_247, prephitmp_35, _218);

  <bb 8>:
  # DEBUG this => &D.56633
  # DEBUG this => &D.56633
  _38 = this_18(D)->classes;
  __n_39 = (size_type) _38;
  # DEBUG this => &type_activity
  # DEBUG __n => __n_39
  # DEBUG __value => &D.56631
  # DEBUG __a => &D.56633
  # DEBUG D#405 => &type_activity.D.56197
  # DEBUG this => D#405
  # DEBUG __n => __n_39
  # DEBUG __a => &D.56633
  # DEBUG D#364 => &D#405->_M_impl
  # DEBUG this => D#364
  # DEBUG __a => &D.56633
  # DEBUG this => D#364
  # DEBUG __a => &D.56633
  # DEBUG this => D#364
  # DEBUG D.64141 => &D.56633
  # DEBUG this => D#405
  # DEBUG __n => __n_39
  # DEBUG D#362 => D#405
  # DEBUG __n => __n_39
  # DEBUG this => D#388
  # DEBUG D#387 => D#388
  if (__n_39 != 0)
    goto <bb 9>;
  else
    goto <bb 14>;

  <bb 9>:
  # DEBUG D#386 => &D#387->_M_impl
  # DEBUG D#385 => D#386
  # DEBUG __n => __n_39
  # DEBUG __a => D#385
  # DEBUG D#384 => D#385
  # DEBUG D#382 => D#384
  # DEBUG D#383 => 0B
  # DEBUG __n => __n_39
  # DEBUG this => D#382
  # DEBUG D.69355 => D#383
  # DEBUG D#381 => D#382
  # DEBUG D#380 => D#381
  # DEBUG this => D#380
  if (__n_39 > 2305843009213693951)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  std::__throw_bad_alloc ();

  <bb 11>:
  _248 = __n_39 * 8;
  _249 = operator new (_248);
  goto <bb 13>;

<L23>:
  goto <bb 67> (<L20>);

  <bb 13>:
  # DEBUG D#403 => &type_activity
  # DEBUG D#403 => &type_activity
  # DEBUG D#404 => &D.56631
  # DEBUG __n => __n_39
  # DEBUG D#401 => D#403
  # DEBUG this => D#401
  # DEBUG this => D#403
  # DEBUG D#402 => D#404
  # DEBUG __value => D#402
  # DEBUG D#400 => &D#401->D.56197
  # DEBUG this => D#400
  # DEBUG D#398 => D#402
  # DEBUG __first => NULL
  # DEBUG __n => __n_39
  # DEBUG D#397 => D#398
  # DEBUG __x => D#397
  # DEBUG D.69269 => D#399
  # DEBUG D#396 => D#397
  # DEBUG __first => NULL
  # DEBUG __n => __n_39
  # DEBUG D#395 => D#396
  # DEBUG __x => D#395
  # DEBUG __assignable => 1
  # DEBUG D#394 => D#395
  # DEBUG __first => NULL
  # DEBUG __n => __n_39
  # DEBUG D#393 => D#394
  # DEBUG __x => D#393
  # DEBUG D#392 => D#393
  # DEBUG __first => NULL
  # DEBUG __n => __n_39
  # DEBUG D#391 => D#392
  # DEBUG __value => D#391
  # DEBUG __it => NULL
  # DEBUG __it => NULL
  # DEBUG D#365 => D#391
  # DEBUG __first => NULL
  # DEBUG __n => __n_39
  # DEBUG __value => D#365
  # DEBUG __tmp => 0.0
  # DEBUG __niter => __n_39
  # DEBUG __niter => __n_39
  # DEBUG __first => _249
  if (__n_39 == 0)
    goto <bb 14>;
  else
    goto <bb 16>;

  <bb 14>:
  # __first_255 = PHI <_249(16), _249(13), 0B(8)>
  # DEBUG i => 0
  # DEBUG this => sm_13(D)
  _224 = MEM[(const int &)sm_13(D) + 8];
  if (_224 > 0)
    goto <bb 17>;
  else
    goto <bb 15>;

  <bb 15>:
  # DEBUG this => &type_activity
  # DEBUG D#195 => &type_activity.D.56197
  # DEBUG this => D#195
  # DEBUG D#198 => type_activity.D.56197._M_impl._M_finish
  # DEBUG D#197 => type_activity.D.56197._M_impl._M_start
  # DEBUG D#85 => D#197
  # DEBUG D#86 => D#198
  # DEBUG __first => D#85
  # DEBUG __last => D#86
  # DEBUG D.64220 => D#87
  # DEBUG D#84 => D#86
  # DEBUG D#83 => D#85
  # DEBUG D#81 => D#83
  # DEBUG D#82 => D#84
  # DEBUG __first => D#81
  # DEBUG __last => D#82
  # DEBUG D#80 => D#82
  # DEBUG D#79 => D#81
  # DEBUG D#77 => D#79
  # DEBUG D#78 => D#80
  # DEBUG D.63554 => D#77
  # DEBUG D.63553 => D#78
  # DEBUG D#196 => &type_activity.D.56197
  # DEBUG this => D#196
  # DEBUG D#194 => D#196->_M_impl._M_end_of_storage
  # DEBUG D#193 => (long int) D#194
  # DEBUG D#192 => (long int) __first_255
  # DEBUG D#191 => D#193 - D#192
  # DEBUG D#190 => D#191 /[ex] 8
  # DEBUG D#187 => D#196
  # DEBUG D#188 => (long unsigned int) D#190
  # DEBUG __p => __first_255
  # DEBUG this => D#187
  # DEBUG __n => D#188
  # DEBUG D#186 => D#188
  # DEBUG D#185 => D#187
  if (__first_255 != 0B)
    goto <bb 58>;
  else
    goto <bb 59>;

  <bb 16>:
  _123 = (sizetype) _38;
  _275 = _123 * 8;
  __builtin_memset (_249, 0, _275);
  goto <bb 14>;

  <bb 17>:
  pretmp_199 = this_18(D)->classes;
  pretmp_30 = MEM[(const int &)sm_13(D) + 4];
  _55 = (unsigned int) pretmp_199;
  _54 = _55 + 4294967295;
  _53 = (sizetype) _54;
  _51 = _53 + 1;
  _256 = _51 * 8;
  _120 = pretmp_199 > 0;

  <bb 18>:
  # i_262 = PHI <0(17), i_114(51)>
  # DEBUG i => i_262
  # DEBUG this => sm_13(D)
  # DEBUG k => 0
  if (pretmp_199 <= 0)
    goto <bb 19>;
  else
    goto <bb 21>;

  <bb 19>:
  # DEBUG j => 0
  # DEBUG this => sm_13(D)
  # DEBUG D#624 => MEM[(const int &)sm_13(D) + 4]
  if (pretmp_30 > 0)
    goto <bb 22>;
  else
    goto <bb 20>;

  <bb 20>:
  _94 = this_18(D)->channel_width;
  # DEBUG this => this_18(D)
  # DEBUG M => 1.0e+0
  # DEBUG W => _94
  _333 = this_18(D)->H_DFQD1;
  _334 = this_18(D)->MetalPitch;
  _335 = _333 * _334;
  _336 = this_18(D)->ChannelPitch;
  columns_337 = _335 / _336;
  # DEBUG columns => columns_337
  clockLength_338 = _94 * _336;
  # DEBUG clockLength => clockLength_338
  _339 = this_18(D)->Co_delay;
  _340 = this_18(D)->Ci_delay;
  _341 = _339 / _340;
  _342 = _341 + 1.0e+0;
  _343 = _342 * 3.125e-1;
  _344 = _343 + 1.0e+0;
  _345 = this_18(D)->Cw;
  _346 = clockLength_338 * _345;
  _347 = columns_337 * _346;
  _348 = _94 * _340;
  _349 = _347 + _348;
  Cclk_350 = _344 * _349;
  # DEBUG Cclk => Cclk_350
  _352 = this_18(D)->Vdd;
  _353 = _352 * _352;
  _354 = Cclk_350 * _353;
  _355 = this_18(D)->fCLK;
  _356 = _354 * _355;
  _97 = this_18(D)->outputPowerClk;
  _98 = _97 + _356;
  this_18(D)->outputPowerClk = _98;
  # DEBUG k => 0
  # DEBUG k => 0
  if (pretmp_199 <= 0)
    goto <bb 50>;
  else
    goto <bb 52>;

  <bb 21>:
  __builtin_memset (__first_255, 0, _256);
  goto <bb 19>;

  <bb 22>:

  <bb 23>:
  # j_282 = PHI <0(22), j_93(25)>
  # DEBUG j => j_282
  # DEBUG this => sm_13(D)
  # DEBUG k => 0
  if (pretmp_199 <= 0)
    goto <bb 24>;
  else
    goto <bb 26>;

  <bb 24>:
  j_93 = j_282 + 1;
  # DEBUG j => j_93
  # DEBUG j => j_93
  # DEBUG this => sm_13(D)
  if (pretmp_30 > j_93)
    goto <bb 25>;
  else
    goto <bb 20>;

  <bb 25>:
  goto <bb 23>;

  <bb 26>:
  # DEBUG this => sm_13(D)
  _219 = _224 * j_282;
  _220 = _219 + i_262;
  _364 = pretmp_199 * _220;
  _366 = (long unsigned int) _364;
  # DEBUG D#19 => &activity
  # DEBUG __n => _366
  # DEBUG this => D#19
  _367 = _366 * 4;
  _371 = activity$_M_impl$_M_start_247 + _367;
  _372 = *_371;
  a_196 = (double) _372;
  # DEBUG a => a_196
  _197 = this_18(D)->totalTime;
  a_373 = a_196 / _197;
  # DEBUG a => a_373
  if (a_373 > 1.0e+0)
    goto <bb 27>;
  else
    goto <bb 32>;

  <bb 27>:
  # DEBUG __s => "Switcht activity factor is greater than 1!!!\n"
  # DEBUG __out => &cout
  # DEBUG __s => "Switcht activity factor is greater than 1!!!\n"
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "Switcht activity factor is greater than 1!!!\n", 45);
  goto <bb 31>;

  <bb 28>:
  # DEBUG this => sm_13(D)
  _56 = k_89 + _364;
  _57 = (long unsigned int) _56;
  # DEBUG D#19 => &activity
  # DEBUG __n => _57
  # DEBUG this => D#19
  _127 = _57 * 4;
  _128 = activity$_M_impl$_M_start_247 + _127;
  _58 = *_128;
  a_59 = (double) _58;
  # DEBUG a => a_59
  a_61 = a_59 / _197;
  # DEBUG a => a_61
  if (a_61 > 1.0e+0)
    goto <bb 29>;
  else
    goto <bb 30>;

  <bb 29>:
  # this__switchPowerCtrl_lsm.704_186 = PHI <_82(28), _389(40), _2(36), _286(45)>
  # this__switchPower_lsm.702_182 = PHI <_74(28), _391(40), _4(36), _284(45)>
  this_18(D)->switchPower = this__switchPower_lsm.702_182;
  this_18(D)->switchPowerCtrl = this__switchPowerCtrl_lsm.704_186;
  goto <bb 27>;

  <bb 30>:
  goto <bb 48>;

  <bb 31>:
  exit (-1);

  <bb 32>:
  pretmp_396 = (double) i_262;
  pretmp_397 = (double) j_282;
  pretmp_398 = (double) _224;
  pretmp_399 = (double) pretmp_30;
  pretmp_400 = this_18(D)->channel_width;
  pretmp_402 = this_18(D)->switchPower;
  pretmp_404 = this_18(D)->switchPowerCtrl;
  pretmp_409 = pretmp_398 * pretmp_400;
  pretmp_410 = this_18(D)->CrossbarPitch;
  pretmp_412 = pretmp_409 * pretmp_410;
  pretmp_413 = pretmp_399 * pretmp_400;
  pretmp_414 = pretmp_410 * pretmp_413;
  pretmp_415 = this_18(D)->Cw;
  pretmp_417 = pretmp_412 * pretmp_415;
  pretmp_418 = pretmp_414 * pretmp_415;
  pretmp_419 = pretmp_418 * 6.25e-2;
  pretmp_420 = pretmp_419 * 4.0e+0;
  pretmp_421 = this_18(D)->Co_delay;
  pretmp_423 = this_18(D)->Ci_delay;
  pretmp_425 = pretmp_421 / pretmp_423;
  pretmp_426 = pretmp_420 * pretmp_425;
  pretmp_427 = pretmp_417 * 6.25e-2;
  pretmp_428 = pretmp_427 * 4.0e+0;
  pretmp_429 = pretmp_425 * pretmp_428;
  pretmp_430 = pretmp_425 + 1.0e+0;
  pretmp_431 = pretmp_430 * 3.125e-1;
  pretmp_432 = pretmp_415 * 5.0e-1;
  pretmp_433 = pretmp_412 * pretmp_432;
  pretmp_434 = pretmp_427 + pretmp_433;
  pretmp_435 = pretmp_431 * pretmp_434;
  pretmp_436 = pretmp_417 + pretmp_435;
  pretmp_437 = pretmp_427 + pretmp_436;
  pretmp_438 = pretmp_398 * pretmp_419;
  pretmp_439 = pretmp_437 + pretmp_438;
  pretmp_440 = pretmp_398 * 5.0e-1;
  pretmp_441 = pretmp_418 + pretmp_429;
  pretmp_442 = pretmp_399 * pretmp_426;
  pretmp_443 = pretmp_441 + pretmp_442;
  pretmp_444 = pretmp_399 * 5.0e-1;
  pretmp_445 = this_18(D)->Vdd;
  pretmp_447 = pretmp_445 * pretmp_445;
  pretmp_448 = this_18(D)->fCLK;
  pretmp_450 = pretmp_447 * pretmp_448;
  pretmp_469 = pretmp_417 * 3.125e-1;
  pretmp_470 = pretmp_400 * pretmp_469;
  pretmp_471 = pretmp_412 + pretmp_414;
  pretmp_472 = pretmp_415 * pretmp_471;
  pretmp_473 = pretmp_470 + pretmp_472;
  pretmp_474 = pretmp_431 * pretmp_473;
  pretmp_475 = pretmp_473 + pretmp_474;
  pretmp_476 = pretmp_447 * pretmp_475;
  pretmp_477 = pretmp_448 * pretmp_476;
  if (pretmp_396 < pretmp_440)
    goto <bb 42>;
  else
    goto <bb 33>;

  <bb 33>:
  if (pretmp_397 < pretmp_444)
    goto <bb 38>;
  else
    goto <bb 34>;

  <bb 34>:
  _44 = pretmp_439 + pretmp_443;
  _37 = _44 * 5.0e-1;
  _9 = _37 * pretmp_450;

  <bb 35>:
  # k_172 = PHI <0(34), k_132(37)>
  # a_170 = PHI <a_373(34), a_213(37)>
  # prephitmp_167 = PHI <pretmp_402(34), _4(37)>
  # prephitmp_160 = PHI <pretmp_404(34), _2(37)>
  # DEBUG k => k_172
  # DEBUG this => sm_13(D)
  # DEBUG D#19 => &activity
  # DEBUG __n => _366
  # DEBUG this => D#19
  # DEBUG a => a_170
  # DEBUG this => sm_13(D)
  # DEBUG D#623 => (double) _224
  # DEBUG this => sm_13(D)
  # DEBUG D#622 => (double) D#624
  # DEBUG D#621 => this_18(D)->channel_width
  # DEBUG this => this_18(D)
  # DEBUG width => D#621
  # DEBUG inputs => D#622
  # DEBUG outputs => D#623
  # DEBUG from => (double) j_282
  # DEBUG to => (double) i_262
  # DEBUG D#620 => D#623 * D#621
  # DEBUG D#619 => this_18(D)->CrossbarPitch
  # DEBUG D#618 => D#620 * D#619
  # DEBUG Wxbar => D#618
  # DEBUG D#617 => D#622 * D#621
  # DEBUG D#616 => D#619 * D#617
  # DEBUG Hxbar => D#616
  # DEBUG D#615 => this_18(D)->Cw
  # DEBUG D#614 => D#618 * D#615
  # DEBUG CwIn => D#614
  # DEBUG D#613 => D#616 * D#615
  # DEBUG CwOut => D#613
  # DEBUG D#612 => D#613 * 6.25e-2
  # DEBUG Cxi => D#612
  # DEBUG D#611 => D#612 * 4.0e+0
  # DEBUG D#610 => this_18(D)->Co_delay
  # DEBUG D#609 => this_18(D)->Ci_delay
  # DEBUG D#608 => D#610 / D#609
  # DEBUG D#607 => D#611 * D#608
  # DEBUG Cxo => D#607
  # DEBUG D#606 => D#614 * 6.25e-2
  # DEBUG Cti => D#606
  # DEBUG D#605 => D#606 * 4.0e+0
  # DEBUG D#604 => D#608 * D#605
  # DEBUG Cto => D#604
  # DEBUG D#603 => D#608 + 1.0e+0
  # DEBUG D#602 => D#603 * 3.125e-1
  # DEBUG D#601 => D#615 * 5.0e-1
  # DEBUG D#600 => D#618 * D#601
  # DEBUG D#599 => D#606 + D#600
  # DEBUG D#598 => D#602 * D#599
  # DEBUG CinputDriver => D#598
  # DEBUG D#597 => D#614 + D#598
  # DEBUG D#596 => D#606 + D#597
  # DEBUG D#595 => D#623 * D#612
  # DEBUG Cin => D#596 + D#595
  # DEBUG Cin => pretmp_439
  # DEBUG D#594 => D#613 + D#604
  # DEBUG D#593 => D#622 * D#607
  # DEBUG Cout => D#594 + D#593
  # DEBUG Cout => pretmp_443
  # DEBUG Px => NULL
  _8 = a_170 * pretmp_400;
  _7 = _8 * _9;
  _4 = _7 + prephitmp_167;
  # DEBUG this => sm_13(D)
  # DEBUG this => sm_13(D)
  # DEBUG this => this_18(D)
  # DEBUG width => D#621
  # DEBUG inputs => D#622
  # DEBUG outputs => D#623
  # DEBUG Wxbar => D#618
  # DEBUG Hxbar => D#616
  # DEBUG CwIn => D#614
  # DEBUG D#592 => D#614 * 3.125e-1
  # DEBUG Cti => D#592
  # DEBUG D#591 => D#621 * D#592
  # DEBUG D#590 => D#618 + D#616
  # DEBUG D#589 => D#590 * D#615
  # DEBUG D#588 => D#591 + D#589
  # DEBUG Cctrl => D#588
  # DEBUG Cdrive => D#588 * D#602
  _3 = a_170 * pretmp_477;
  _2 = _3 + prephitmp_160;
  _408 = (long unsigned int) k_172;
  # DEBUG D#18 => &type_activity
  # DEBUG __n => _408
  # DEBUG this => D#18
  _407 = _408 * 8;
  _406 = __first_255 + _407;
  _211 = *_406;
  _168 = _211 + a_170;
  *_406 = _168;
  k_132 = k_172 + 1;
  # DEBUG k => k_132
  # DEBUG k => k_132
  if (k_132 >= pretmp_199)
    goto <bb 49>;
  else
    goto <bb 36>;

  <bb 36>:
  # DEBUG this => sm_13(D)
  _126 = k_132 + _364;
  _124 = (long unsigned int) _126;
  # DEBUG D#19 => &activity
  # DEBUG __n => _124
  # DEBUG this => D#19
  _108 = _124 * 4;
  _10 = activity$_M_impl$_M_start_247 + _108;
  _5 = *_10;
  a_212 = (double) _5;
  # DEBUG a => a_212
  a_213 = a_212 / _197;
  # DEBUG a => a_213
  if (a_213 > 1.0e+0)
    goto <bb 29>;
  else
    goto <bb 37>;

  <bb 37>:
  goto <bb 35>;

  <bb 38>:
  _453 = pretmp_418 * 5.0e-1;
  _106 = pretmp_426 * pretmp_444;
  _452 = _453 + _106;
  Cout_222 = pretmp_443 - _452;
  _279 = Cout_222 + pretmp_439;
  _266 = _279 * 5.0e-1;
  _395 = _266 * pretmp_450;

  <bb 39>:
  # k_263 = PHI <0(38), k_365(41)>
  # a_454 = PHI <a_373(38), a_177(41)>
  # prephitmp_384 = PHI <pretmp_402(38), _391(41)>
  # prephitmp_382 = PHI <pretmp_404(38), _389(41)>
  # DEBUG k => k_263
  # DEBUG this => sm_13(D)
  # DEBUG D#19 => &activity
  # DEBUG __n => _366
  # DEBUG this => D#19
  # DEBUG a => a_454
  # DEBUG this => sm_13(D)
  # DEBUG D#623 => (double) _224
  # DEBUG this => sm_13(D)
  # DEBUG D#622 => (double) D#624
  # DEBUG D#621 => this_18(D)->channel_width
  # DEBUG this => this_18(D)
  # DEBUG width => D#621
  # DEBUG inputs => D#622
  # DEBUG outputs => D#623
  # DEBUG from => (double) j_282
  # DEBUG to => (double) i_262
  # DEBUG D#620 => D#623 * D#621
  # DEBUG D#619 => this_18(D)->CrossbarPitch
  # DEBUG D#618 => D#620 * D#619
  # DEBUG Wxbar => D#618
  # DEBUG D#617 => D#622 * D#621
  # DEBUG D#616 => D#619 * D#617
  # DEBUG Hxbar => D#616
  # DEBUG D#615 => this_18(D)->Cw
  # DEBUG D#614 => D#618 * D#615
  # DEBUG CwIn => D#614
  # DEBUG D#613 => D#616 * D#615
  # DEBUG CwOut => D#613
  # DEBUG D#612 => D#613 * 6.25e-2
  # DEBUG Cxi => D#612
  # DEBUG D#611 => D#612 * 4.0e+0
  # DEBUG D#610 => this_18(D)->Co_delay
  # DEBUG D#609 => this_18(D)->Ci_delay
  # DEBUG D#608 => D#610 / D#609
  # DEBUG D#607 => D#611 * D#608
  # DEBUG Cxo => D#607
  # DEBUG D#606 => D#614 * 6.25e-2
  # DEBUG Cti => D#606
  # DEBUG D#605 => D#606 * 4.0e+0
  # DEBUG D#604 => D#608 * D#605
  # DEBUG Cto => D#604
  # DEBUG D#603 => D#608 + 1.0e+0
  # DEBUG D#602 => D#603 * 3.125e-1
  # DEBUG D#601 => D#615 * 5.0e-1
  # DEBUG D#600 => D#618 * D#601
  # DEBUG D#599 => D#606 + D#600
  # DEBUG D#598 => D#602 * D#599
  # DEBUG CinputDriver => D#598
  # DEBUG D#597 => D#614 + D#598
  # DEBUG D#596 => D#606 + D#597
  # DEBUG D#595 => D#623 * D#612
  # DEBUG Cin => D#596 + D#595
  # DEBUG Cin => pretmp_439
  # DEBUG D#594 => D#613 + D#604
  # DEBUG D#593 => D#622 * D#607
  # DEBUG Cout => D#594 + D#593
  # DEBUG D#633 => pretmp_443 - _452
  # DEBUG Cout => D#633
  # DEBUG Cout => D#633
  # DEBUG Px => NULL
  _393 = a_454 * pretmp_400;
  _392 = _393 * _395;
  _391 = _392 + prephitmp_384;
  # DEBUG this => sm_13(D)
  # DEBUG this => sm_13(D)
  # DEBUG this => this_18(D)
  # DEBUG width => D#621
  # DEBUG inputs => D#622
  # DEBUG outputs => D#623
  # DEBUG Wxbar => D#618
  # DEBUG Hxbar => D#616
  # DEBUG CwIn => D#614
  # DEBUG D#592 => D#614 * 3.125e-1
  # DEBUG Cti => D#592
  # DEBUG D#591 => D#621 * D#592
  # DEBUG D#590 => D#618 + D#616
  # DEBUG D#589 => D#590 * D#615
  # DEBUG D#588 => D#591 + D#589
  # DEBUG Cctrl => D#588
  # DEBUG Cdrive => D#588 * D#602
  _390 = a_454 * pretmp_477;
  _389 = _390 + prephitmp_382;
  _191 = (long unsigned int) k_263;
  # DEBUG D#18 => &type_activity
  # DEBUG __n => _191
  # DEBUG this => D#18
  _184 = _191 * 8;
  _190 = __first_255 + _184;
  _183 = *_190;
  _383 = _183 + a_454;
  *_190 = _383;
  k_365 = k_263 + 1;
  # DEBUG k => k_365
  # DEBUG k => k_365
  if (k_365 >= pretmp_199)
    goto <bb 49>;
  else
    goto <bb 40>;

  <bb 40>:
  # DEBUG this => sm_13(D)
  _362 = k_365 + _364;
  _360 = (long unsigned int) _362;
  # DEBUG D#19 => &activity
  # DEBUG __n => _360
  # DEBUG this => D#19
  _259 = _360 * 4;
  _250 = activity$_M_impl$_M_start_247 + _259;
  _193 = *_250;
  a_178 = (double) _193;
  # DEBUG a => a_178
  a_177 = a_178 / _197;
  # DEBUG a => a_177
  if (a_177 > 1.0e+0)
    goto <bb 29>;
  else
    goto <bb 41>;

  <bb 41>:
  goto <bb 39>;

  <bb 42>:
  if (pretmp_397 < pretmp_444)
    goto <bb 47>;
  else
    goto <bb 43>;

  <bb 43>:
  _223 = pretmp_417 * 5.0e-1;
  _125 = pretmp_419 * pretmp_440;
  _210 = _223 + _125;
  Cin_401 = pretmp_439 - _210;
  _62 = Cin_401 + pretmp_443;
  _63 = _62 * 5.0e-1;
  _65 = _63 * pretmp_450;

  <bb 44>:
  # k_214 = PHI <0(43), k_293(46)>
  # a_216 = PHI <a_373(43), a_300(46)>
  # prephitmp_217 = PHI <pretmp_402(43), _284(46)>
  # prephitmp_200 = PHI <pretmp_404(43), _286(46)>
  # DEBUG k => k_214
  # DEBUG this => sm_13(D)
  # DEBUG D#19 => &activity
  # DEBUG __n => _366
  # DEBUG this => D#19
  # DEBUG a => a_216
  # DEBUG this => sm_13(D)
  # DEBUG D#623 => (double) _224
  # DEBUG this => sm_13(D)
  # DEBUG D#622 => (double) D#624
  # DEBUG D#621 => this_18(D)->channel_width
  # DEBUG this => this_18(D)
  # DEBUG width => D#621
  # DEBUG inputs => D#622
  # DEBUG outputs => D#623
  # DEBUG from => (double) j_282
  # DEBUG to => (double) i_262
  # DEBUG D#620 => D#623 * D#621
  # DEBUG D#619 => this_18(D)->CrossbarPitch
  # DEBUG D#618 => D#620 * D#619
  # DEBUG Wxbar => D#618
  # DEBUG D#617 => D#622 * D#621
  # DEBUG D#616 => D#619 * D#617
  # DEBUG Hxbar => D#616
  # DEBUG D#615 => this_18(D)->Cw
  # DEBUG D#614 => D#618 * D#615
  # DEBUG CwIn => D#614
  # DEBUG D#613 => D#616 * D#615
  # DEBUG CwOut => D#613
  # DEBUG D#612 => D#613 * 6.25e-2
  # DEBUG Cxi => D#612
  # DEBUG D#611 => D#612 * 4.0e+0
  # DEBUG D#610 => this_18(D)->Co_delay
  # DEBUG D#609 => this_18(D)->Ci_delay
  # DEBUG D#608 => D#610 / D#609
  # DEBUG D#607 => D#611 * D#608
  # DEBUG Cxo => D#607
  # DEBUG D#606 => D#614 * 6.25e-2
  # DEBUG Cti => D#606
  # DEBUG D#605 => D#606 * 4.0e+0
  # DEBUG D#604 => D#608 * D#605
  # DEBUG Cto => D#604
  # DEBUG D#603 => D#608 + 1.0e+0
  # DEBUG D#602 => D#603 * 3.125e-1
  # DEBUG D#601 => D#615 * 5.0e-1
  # DEBUG D#600 => D#618 * D#601
  # DEBUG D#599 => D#606 + D#600
  # DEBUG D#598 => D#602 * D#599
  # DEBUG CinputDriver => D#598
  # DEBUG D#597 => D#614 + D#598
  # DEBUG D#596 => D#606 + D#597
  # DEBUG D#595 => D#623 * D#612
  # DEBUG Cin => D#596 + D#595
  # DEBUG D#632 => pretmp_439 - _210
  # DEBUG Cin => D#632
  # DEBUG Cin => D#632
  # DEBUG D#594 => D#613 + D#604
  # DEBUG D#593 => D#622 * D#607
  # DEBUG Cout => D#594 + D#593
  # DEBUG Cout => pretmp_443
  # DEBUG Px => NULL
  _67 = a_216 * pretmp_400;
  _68 = _67 * _65;
  _284 = _68 + prephitmp_217;
  # DEBUG this => sm_13(D)
  # DEBUG this => sm_13(D)
  # DEBUG this => this_18(D)
  # DEBUG width => D#621
  # DEBUG inputs => D#622
  # DEBUG outputs => D#623
  # DEBUG Wxbar => D#618
  # DEBUG Hxbar => D#616
  # DEBUG CwIn => D#614
  # DEBUG D#592 => D#614 * 3.125e-1
  # DEBUG Cti => D#592
  # DEBUG D#591 => D#621 * D#592
  # DEBUG D#590 => D#618 + D#616
  # DEBUG D#589 => D#590 * D#615
  # DEBUG D#588 => D#591 + D#589
  # DEBUG Cctrl => D#588
  # DEBUG Cdrive => D#588 * D#602
  _285 = a_216 * pretmp_477;
  _286 = _285 + prephitmp_200;
  _287 = (long unsigned int) k_214;
  # DEBUG D#18 => &type_activity
  # DEBUG __n => _287
  # DEBUG this => D#18
  _288 = _287 * 8;
  _289 = __first_255 + _288;
  _290 = *_289;
  _291 = _290 + a_216;
  *_289 = _291;
  k_293 = k_214 + 1;
  # DEBUG k => k_293
  # DEBUG k => k_293
  if (k_293 >= pretmp_199)
    goto <bb 49>;
  else
    goto <bb 45>;

  <bb 45>:
  # DEBUG this => sm_13(D)
  _294 = k_293 + _364;
  _295 = (long unsigned int) _294;
  # DEBUG D#19 => &activity
  # DEBUG __n => _295
  # DEBUG this => D#19
  _296 = _295 * 4;
  _297 = activity$_M_impl$_M_start_247 + _296;
  _298 = *_297;
  a_299 = (double) _298;
  # DEBUG a => a_299
  a_300 = a_299 / _197;
  # DEBUG a => a_300
  if (a_300 > 1.0e+0)
    goto <bb 29>;
  else
    goto <bb 46>;

  <bb 46>:
  goto <bb 44>;

  <bb 47>:
  _312 = pretmp_417 * 5.0e-1;
  _313 = pretmp_419 * pretmp_440;
  _314 = _312 + _313;
  Cin_315 = pretmp_439 - _314;
  _320 = pretmp_418 * 5.0e-1;
  _321 = pretmp_426 * pretmp_444;
  _322 = _320 + _321;
  Cout_323 = pretmp_443 - _322;
  _326 = Cin_315 + Cout_323;
  _327 = _326 * 5.0e-1;
  _332 = _327 * pretmp_450;

  <bb 48>:
  # k_359 = PHI <0(47), k_89(30)>
  # a_280 = PHI <a_373(47), a_61(30)>
  # prephitmp_403 = PHI <pretmp_402(47), _74(30)>
  # prephitmp_405 = PHI <pretmp_404(47), _82(30)>
  # DEBUG k => k_359
  # DEBUG this => sm_13(D)
  # DEBUG D#19 => &activity
  # DEBUG __n => _366
  # DEBUG this => D#19
  # DEBUG a => a_280
  # DEBUG this => sm_13(D)
  # DEBUG D#623 => (double) _224
  # DEBUG this => sm_13(D)
  # DEBUG D#622 => (double) D#624
  # DEBUG D#621 => this_18(D)->channel_width
  # DEBUG this => this_18(D)
  # DEBUG width => D#621
  # DEBUG inputs => D#622
  # DEBUG outputs => D#623
  # DEBUG from => (double) j_282
  # DEBUG to => (double) i_262
  # DEBUG D#620 => D#623 * D#621
  # DEBUG D#619 => this_18(D)->CrossbarPitch
  # DEBUG D#618 => D#620 * D#619
  # DEBUG Wxbar => D#618
  # DEBUG D#617 => D#622 * D#621
  # DEBUG D#616 => D#619 * D#617
  # DEBUG Hxbar => D#616
  # DEBUG D#615 => this_18(D)->Cw
  # DEBUG D#614 => D#618 * D#615
  # DEBUG CwIn => D#614
  # DEBUG D#613 => D#616 * D#615
  # DEBUG CwOut => D#613
  # DEBUG D#612 => D#613 * 6.25e-2
  # DEBUG Cxi => D#612
  # DEBUG D#611 => D#612 * 4.0e+0
  # DEBUG D#610 => this_18(D)->Co_delay
  # DEBUG D#609 => this_18(D)->Ci_delay
  # DEBUG D#608 => D#610 / D#609
  # DEBUG D#607 => D#611 * D#608
  # DEBUG Cxo => D#607
  # DEBUG D#606 => D#614 * 6.25e-2
  # DEBUG Cti => D#606
  # DEBUG D#605 => D#606 * 4.0e+0
  # DEBUG D#604 => D#608 * D#605
  # DEBUG Cto => D#604
  # DEBUG D#603 => D#608 + 1.0e+0
  # DEBUG D#602 => D#603 * 3.125e-1
  # DEBUG D#601 => D#615 * 5.0e-1
  # DEBUG D#600 => D#618 * D#601
  # DEBUG D#599 => D#606 + D#600
  # DEBUG D#598 => D#602 * D#599
  # DEBUG CinputDriver => D#598
  # DEBUG D#597 => D#614 + D#598
  # DEBUG D#596 => D#606 + D#597
  # DEBUG D#595 => D#623 * D#612
  # DEBUG Cin => D#596 + D#595
  # DEBUG D#630 => pretmp_439 - _314
  # DEBUG Cin => D#630
  # DEBUG Cin => D#630
  # DEBUG D#594 => D#613 + D#604
  # DEBUG D#593 => D#622 * D#607
  # DEBUG Cout => D#594 + D#593
  # DEBUG D#631 => pretmp_443 - _322
  # DEBUG Cout => D#631
  # DEBUG Cout => D#631
  # DEBUG Px => NULL
  _72 = a_280 * pretmp_400;
  _73 = _72 * _332;
  _74 = _73 + prephitmp_403;
  # DEBUG this => sm_13(D)
  # DEBUG this => sm_13(D)
  # DEBUG this => this_18(D)
  # DEBUG width => D#621
  # DEBUG inputs => D#622
  # DEBUG outputs => D#623
  # DEBUG Wxbar => D#618
  # DEBUG Hxbar => D#616
  # DEBUG CwIn => D#614
  # DEBUG D#592 => D#614 * 3.125e-1
  # DEBUG Cti => D#592
  # DEBUG D#591 => D#621 * D#592
  # DEBUG D#590 => D#618 + D#616
  # DEBUG D#589 => D#590 * D#615
  # DEBUG D#588 => D#591 + D#589
  # DEBUG Cctrl => D#588
  # DEBUG Cdrive => D#588 * D#602
  _80 = a_280 * pretmp_477;
  _82 = _80 + prephitmp_405;
  _84 = (long unsigned int) k_359;
  # DEBUG D#18 => &type_activity
  # DEBUG __n => _84
  # DEBUG this => D#18
  _129 = _84 * 8;
  _130 = __first_255 + _129;
  _86 = *_130;
  _87 = _86 + a_280;
  *_130 = _87;
  k_89 = k_359 + 1;
  # DEBUG k => k_89
  # DEBUG k => k_89
  if (k_89 >= pretmp_199)
    goto <bb 49>;
  else
    goto <bb 28>;

  <bb 49>:
  # this__switchPowerCtrl_lsm.704_185 = PHI <_82(48), _389(39), _2(35), _286(44)>
  # this__switchPower_lsm.702_179 = PHI <_74(48), _391(39), _4(35), _284(44)>
  this_18(D)->switchPower = this__switchPower_lsm.702_179;
  this_18(D)->switchPowerCtrl = this__switchPowerCtrl_lsm.704_185;
  goto <bb 24>;

  <bb 50>:
  i_114 = i_262 + 1;
  # DEBUG i => i_114
  # DEBUG i => i_114
  # DEBUG this => sm_13(D)
  if (i_114 < _224)
    goto <bb 51>;
  else
    goto <bb 15>;

  <bb 51>:
  goto <bb 18>;

  <bb 52>:
  pretmp_136 = this_18(D)->outputPower;
  pretmp_116 = this_18(D)->outputCtrlPower;
  pretmp_376 = this_18(D)->Ci;
  pretmp_377 = this_18(D)->Co;
  pretmp_351 = pretmp_376 + pretmp_377;
  pretmp_380 = pretmp_351 * 1.600000000000000088817841970012523233890533447265625e+0;
  pretmp_96 = pretmp_377 * 5.3333333333333332593184650249895639717578887939453125e-1;
  pretmp_119 = pretmp_96 * 2.0e+0;
  pretmp_198 = pretmp_119 + pretmp_380;
  pretmp_28 = this_18(D)->Cg_pwr;
  pretmp_77 = pretmp_28 * 5.3333333333333332593184650249895639717578887939453125e-1;
  pretmp_251 = pretmp_77 * 2.0e+0;
  pretmp_252 = pretmp_251 + pretmp_380;
  pretmp_379 = pretmp_198 * 5.0e-1;
  pretmp_121 = pretmp_252 + pretmp_379;
  pretmp_188 = _94 * pretmp_121;
  pretmp_187 = pretmp_188 * _353;
  pretmp_42 = pretmp_187 * _355;
  pretmp_461 = pretmp_377 / pretmp_376;
  pretmp_462 = pretmp_461 + 1.0e+0;
  pretmp_463 = pretmp_462 * 1.3125e+0;
  pretmp_464 = _94 * pretmp_376;
  pretmp_465 = _346 + pretmp_464;
  pretmp_466 = pretmp_463 * pretmp_465;
  pretmp_467 = _353 * pretmp_466;
  pretmp_468 = _355 * pretmp_467;
  phi_out_of_ssa.706[0] = pretmp_136;
  phi_out_of_ssa.707[0] = pretmp_116;
  if (_120 != 0)
    goto <bb 53>;
  else
    goto <bb 57>;

  <bb 53>:
  _107 = (signed long) pretmp_199;
  _91 = _107 + -1;
  phi_out_of_ssa.707_I_lsm.713_276 = phi_out_of_ssa.707[0];
  phi_out_of_ssa.706_I_lsm.715_164 = phi_out_of_ssa.706[0];

  <bb 54>:
  # graphite_IV.712_112 = PHI <0(53), graphite_IV.712_451(55)>
  # phi_out_of_ssa.707_I_lsm.713_311 = PHI <phi_out_of_ssa.707_I_lsm.713_276(53), _309(55)>
  # phi_out_of_ssa.706_I_lsm.715_131 = PHI <phi_out_of_ssa.706_I_lsm.715_164(53), _305(55)>
  # DEBUG k => NULL
  # DEBUG __n => NULL
  # DEBUG this => NULL
  _301 = (sizetype) graphite_IV.712_112;
  _302 = _301 * 8;
  _303 = __first_255 + _302;
  _75 = *_303;
  # DEBUG this => NULL
  # DEBUG M => NULL
  # DEBUG W => NULL
  # DEBUG alpha => NULL
  # DEBUG Cdin => NULL
  # DEBUG Cclk => NULL
  # DEBUG Cint => NULL
  _304 = pretmp_42 * _75;
  _305 = phi_out_of_ssa.706_I_lsm.715_131 + _304;
  # DEBUG __n => NULL
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG width => NULL
  # DEBUG Woutmod => NULL
  # DEBUG Cen => NULL
  # DEBUG Cenable => NULL
  _308 = _75 * pretmp_468;
  _309 = _308 + phi_out_of_ssa.707_I_lsm.713_311;
  # DEBUG k => NULL
  # DEBUG k => NULL
  graphite_IV.712_451 = graphite_IV.712_112 + 1;
  if (graphite_IV.712_112 < _91)
    goto <bb 55>;
  else
    goto <bb 56>;

  <bb 55>:
  goto <bb 54>;

  <bb 56>:
  # Close_Phi.709_I_lsm.717_330 = PHI <_305(54)>
  # Close_Phi.708_I_lsm.719_71 = PHI <_309(54)>
  Close_Phi.709[0] = Close_Phi.709_I_lsm.717_330;
  Close_Phi.708[0] = Close_Phi.708_I_lsm.719_71;

  <bb 57>:
  this__outputPower_lsm.698_318 = Close_Phi.709[0];
  Cross_BB_scalar_dependence.710[0] = this__outputPower_lsm.698_318;
  this__outputCtrlPower_lsm.700_328 = Close_Phi.708[0];
  Cross_BB_scalar_dependence.711[0] = this__outputCtrlPower_lsm.700_328;
  this__outputCtrlPower_lsm.700_424 = Cross_BB_scalar_dependence.711[0];
  this__outputPower_lsm.698_416 = Cross_BB_scalar_dependence.710[0];
  this_18(D)->outputPower = this__outputPower_lsm.698_416;
  this_18(D)->outputCtrlPower = this__outputCtrlPower_lsm.700_424;
  goto <bb 50>;

  <bb 58>:
  # DEBUG D#184 => &D#185->_M_impl
  # DEBUG D#182 => D#184
  # DEBUG D#183 => D#186
  # DEBUG __p => __first_255
  # DEBUG __a => D#182
  # DEBUG __n => D#183
  # DEBUG D#181 => D#183
  # DEBUG D#180 => D#182
  # DEBUG D#178 => D#180
  # DEBUG D#179 => D#181
  # DEBUG __p => __first_255
  # DEBUG this => D#178
  # DEBUG D.67751 => D#179
  operator delete (__first_255);

  <bb 59>:
  # DEBUG D#189 => &D#196->_M_impl
  # DEBUG this => D#189
  # DEBUG this => D#189
  # DEBUG this => D#189
  MEM[(struct  &)&type_activity] ={v} {CLOBBER};
  # DEBUG this => &activity
  # DEBUG D#174 => &activity.D.35433
  # DEBUG this => D#174
  # DEBUG D#177 => activity.D.35433._M_impl._M_finish
  # DEBUG D#176 => activity.D.35433._M_impl._M_start
  # DEBUG D#74 => D#176
  # DEBUG D#75 => D#177
  # DEBUG __first => D#74
  # DEBUG __last => D#75
  # DEBUG D.64133 => D#76
  # DEBUG D#73 => D#75
  # DEBUG D#72 => D#74
  # DEBUG D#70 => D#72
  # DEBUG D#71 => D#73
  # DEBUG __first => D#70
  # DEBUG __last => D#71
  # DEBUG D#69 => D#71
  # DEBUG D#68 => D#70
  # DEBUG D#66 => D#68
  # DEBUG D#67 => D#69
  # DEBUG D.63522 => D#66
  # DEBUG D.63521 => D#67
  # DEBUG D#175 => &activity.D.35433
  # DEBUG this => D#175
  # DEBUG D#173 => D#175->_M_impl._M_end_of_storage
  # DEBUG D#172 => (long int) D#173
  # DEBUG D#171 => (long int) activity$_M_impl$_M_start_247
  # DEBUG D#170 => D#172 - D#171
  # DEBUG D#169 => D#170 /[ex] 4
  # DEBUG D#166 => D#175
  # DEBUG D#167 => (long unsigned int) D#169
  # DEBUG __p => activity$_M_impl$_M_start_247
  # DEBUG this => D#166
  # DEBUG __n => D#167
  # DEBUG D#165 => D#167
  # DEBUG D#164 => D#166
  if (activity$_M_impl$_M_start_247 != 0B)
    goto <bb 60>;
  else
    goto <bb 61>;

  <bb 60>:
  # DEBUG D#163 => &D#164->_M_impl
  # DEBUG D#161 => D#163
  # DEBUG D#162 => D#165
  # DEBUG __p => activity$_M_impl$_M_start_247
  # DEBUG __a => D#161
  # DEBUG __n => D#162
  # DEBUG D#160 => D#162
  # DEBUG D#159 => D#161
  # DEBUG D#157 => D#159
  # DEBUG D#158 => D#160
  # DEBUG __p => activity$_M_impl$_M_start_247
  # DEBUG this => D#157
  # DEBUG D.67736 => D#158
  operator delete (activity$_M_impl$_M_start_247);

  <bb 61>:
  # DEBUG D#168 => &D#175->_M_impl
  # DEBUG this => D#168
  # DEBUG this => D#168
  # DEBUG this => D#168
  activity ={v} {CLOBBER};
  type_activity ={v} {CLOBBER};
  return;

<L19>:
  # DEBUG this => &type_activity
  # DEBUG D#195 => &type_activity.D.56197
  # DEBUG this => D#195
  # DEBUG D#198 => type_activity.D.56197._M_impl._M_finish
  # DEBUG D#197 => type_activity.D.56197._M_impl._M_start
  # DEBUG D#85 => D#197
  # DEBUG D#86 => D#198
  # DEBUG __first => D#85
  # DEBUG __last => D#86
  # DEBUG D.64220 => D#87
  # DEBUG D#84 => D#86
  # DEBUG D#83 => D#85
  # DEBUG D#81 => D#83
  # DEBUG D#82 => D#84
  # DEBUG __first => D#81
  # DEBUG __last => D#82
  # DEBUG D#80 => D#82
  # DEBUG D#79 => D#81
  # DEBUG D#77 => D#79
  # DEBUG D#78 => D#80
  # DEBUG D.63554 => D#77
  # DEBUG D.63553 => D#78
  # DEBUG D#196 => &type_activity.D.56197
  # DEBUG this => D#196
  # DEBUG D#194 => D#196->_M_impl._M_end_of_storage
  # DEBUG D#193 => (long int) D#194
  # DEBUG D#192 => (long int) __first_255
  # DEBUG D#191 => D#193 - D#192
  # DEBUG D#190 => D#191 /[ex] 8
  # DEBUG D#187 => D#196
  # DEBUG D#188 => (long unsigned int) D#190
  # DEBUG __p => __first_255
  # DEBUG this => D#187
  # DEBUG __n => D#188
  # DEBUG D#186 => D#188
  # DEBUG D#185 => D#187
  if (__first_255 != 0B)
    goto <bb 63>;
  else
    goto <bb 64>;

  <bb 63>:
  # DEBUG D#184 => &D#185->_M_impl
  # DEBUG D#182 => D#184
  # DEBUG D#183 => D#186
  # DEBUG __p => __first_255
  # DEBUG __a => D#182
  # DEBUG __n => D#183
  # DEBUG D#181 => D#183
  # DEBUG D#180 => D#182
  # DEBUG D#178 => D#180
  # DEBUG D#179 => D#181
  # DEBUG __p => __first_255
  # DEBUG this => D#178
  # DEBUG D.67768 => D#179
  operator delete (__first_255);

  <bb 64>:
  # DEBUG D#189 => &D#196->_M_impl
  # DEBUG this => D#189
  # DEBUG this => D#189
  # DEBUG this => D#189
  MEM[(struct  &)&type_activity] ={v} {CLOBBER};
  resx 9

<L24>:
  goto <bb 67> (<L20>);

<L22>:

<L20>:
  # DEBUG this => &activity
  # DEBUG D#174 => &activity.D.35433
  # DEBUG this => D#174
  # DEBUG D#177 => activity.D.35433._M_impl._M_finish
  # DEBUG D#176 => activity.D.35433._M_impl._M_start
  # DEBUG D#74 => D#176
  # DEBUG D#75 => D#177
  # DEBUG __first => D#74
  # DEBUG __last => D#75
  # DEBUG D.64133 => D#76
  # DEBUG D#73 => D#75
  # DEBUG D#72 => D#74
  # DEBUG D#70 => D#72
  # DEBUG D#71 => D#73
  # DEBUG __first => D#70
  # DEBUG __last => D#71
  # DEBUG D#69 => D#71
  # DEBUG D#68 => D#70
  # DEBUG D#66 => D#68
  # DEBUG D#67 => D#69
  # DEBUG D.63522 => D#66
  # DEBUG D.63521 => D#67
  # DEBUG D#175 => &activity.D.35433
  # DEBUG this => D#175
  # DEBUG D#173 => D#175->_M_impl._M_end_of_storage
  # DEBUG D#172 => (long int) D#173
  # DEBUG D#171 => (long int) activity$_M_impl$_M_start_247
  # DEBUG D#170 => D#172 - D#171
  # DEBUG D#169 => D#170 /[ex] 4
  # DEBUG D#166 => D#175
  # DEBUG D#167 => (long unsigned int) D#169
  # DEBUG __p => activity$_M_impl$_M_start_247
  # DEBUG this => D#166
  # DEBUG __n => D#167
  # DEBUG D#165 => D#167
  # DEBUG D#164 => D#166
  if (activity$_M_impl$_M_start_247 != 0B)
    goto <bb 68>;
  else
    goto <bb 69>;

  <bb 68>:
  # DEBUG D#163 => &D#164->_M_impl
  # DEBUG D#161 => D#163
  # DEBUG D#162 => D#165
  # DEBUG __p => activity$_M_impl$_M_start_247
  # DEBUG __a => D#161
  # DEBUG __n => D#162
  # DEBUG D#160 => D#162
  # DEBUG D#159 => D#161
  # DEBUG D#157 => D#159
  # DEBUG D#158 => D#160
  # DEBUG __p => activity$_M_impl$_M_start_247
  # DEBUG this => D#157
  # DEBUG D.67783 => D#158
  operator delete (activity$_M_impl$_M_start_247);

  <bb 69>:
  # DEBUG D#168 => &D#175->_M_impl
  # DEBUG this => D#168
  # DEBUG this => D#168
  # DEBUG this => D#168
  resx 2

}



;; Function void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = double; _Val = std::pair<const double, wire>; _KeyOfValue = std::_Select1st<std::pair<const double, wire> >; _Compare = std::less<double>; _Alloc = std::allocator<std::pair<const double, wire> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const double, wire> >*] (_ZNSt8_Rb_treeIdSt4pairIKd4wireESt10_Select1stIS3_ESt4lessIdESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E, funcdef_no=2170, decl_uid=44613, cgraph_uid=669, symbol_order=670)

Trying loop 1 as candidate
loop 1 is not innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is not innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is not innermost
loop is not parallel according to graphite
Trying loop 4 as candidate
loop 4 is not innermost
loop is not parallel according to graphite
Trying loop 5 as candidate
loop 5 is not innermost
loop is not parallel according to graphite
Trying loop 6 as candidate
loop 6 is not innermost
loop is not parallel according to graphite
Trying loop 7 as candidate
loop 7 is not innermost
loop is not parallel according to graphite
Trying loop 8 as candidate
loop 8 is not innermost
loop is not parallel according to graphite
Trying loop 9 as candidate
loop 9 is innermost
loop is not parallel according to graphite
void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = double; _Val = std::pair<const double, wire>; _KeyOfValue = std::_Select1st<std::pair<const double, wire> >; _Compare = std::less<double>; _Alloc = std::allocator<std::pair<const double, wire> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const double, wire> >*] (struct _Rb_tree * const this, struct _Rb_tree_node * __x)
{
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node_base * _39;

  <bb 2>:
  # DEBUG __x => __x_3(D)
  if (__x_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  return;

  <bb 4>:

  <bb 5>:
  # __x_68 = PHI <__x_3(D)(4), __x_9(38)>
  # DEBUG __x => __x_68
  __x_8 = MEM[(struct _Rb_tree_node_base * *)__x_68 + 24B];
  # DEBUG D#29 => __x_68
  # DEBUG __x => D#29
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_8
  # DEBUG __x => __x_8
  if (__x_8 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  __x_9 = MEM[(struct _Rb_tree_node_base * *)__x_68 + 16B];
  # DEBUG D#30 => __x_68
  # DEBUG __x => D#30
  # DEBUG __y => NULL
  # DEBUG D#305 => this_6(D)
  # DEBUG __p => __x_68
  # DEBUG this => D#305
  # DEBUG D#304 => D#305
  # DEBUG D#303 => D#305
  # DEBUG D#302 => D#305
  # DEBUG D#300 => D#302
  # DEBUG D#301 => __x_68
  # DEBUG this => D#300
  # DEBUG __p => D#301
  # DEBUG D#299 => D#300
  # DEBUG D#298 => D#301
  # DEBUG D#297 => D#301
  # DEBUG this => D#297
  # DEBUG D#296 => &D#298->_M_value_field
  # DEBUG __r => D#296
  # DEBUG D#295 => D#299
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG this => NULL
  # DEBUG D.64948 => NULL
  # DEBUG this => NULL
  # DEBUG D#149 => D#296
  # DEBUG this => D#148
  # DEBUG __p => D#149
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#303
  # DEBUG __p => __x_68
  # DEBUG this => D#304
  # DEBUG D#254 => 1
  # DEBUG __p => __x_68
  # DEBUG __a => D#253
  # DEBUG __n => D#254
  # DEBUG D#252 => D#254
  # DEBUG D#251 => D#253
  # DEBUG D#249 => D#251
  # DEBUG D#250 => D#252
  # DEBUG __p => __x_68
  # DEBUG this => D#249
  # DEBUG D.65010 => D#250
  operator delete (__x_68);
  # DEBUG __x => __x_9
  # DEBUG __x => __x_9
  if (__x_9 == 0B)
    goto <bb 3>;
  else
    goto <bb 38>;

  <bb 7>:

  <bb 8>:
  # __x_72 = PHI <__x_8(7), __x_13(37)>
  # DEBUG __x => __x_72
  __x_12 = MEM[(struct _Rb_tree_node_base * *)__x_72 + 24B];
  # DEBUG D#29 => __x_72
  # DEBUG __x => D#29
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_12
  # DEBUG __x => __x_12
  if (__x_12 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  __x_13 = MEM[(struct _Rb_tree_node_base * *)__x_72 + 16B];
  # DEBUG D#30 => __x_72
  # DEBUG __x => D#30
  # DEBUG __y => NULL
  # DEBUG D#305 => this_6(D)
  # DEBUG __p => __x_72
  # DEBUG this => D#305
  # DEBUG D#304 => D#305
  # DEBUG D#303 => D#305
  # DEBUG D#302 => D#305
  # DEBUG D#300 => D#302
  # DEBUG D#301 => __x_72
  # DEBUG this => D#300
  # DEBUG __p => D#301
  # DEBUG D#299 => D#300
  # DEBUG D#298 => D#301
  # DEBUG D#297 => D#301
  # DEBUG this => D#297
  # DEBUG D#296 => &D#298->_M_value_field
  # DEBUG __r => D#296
  # DEBUG D#295 => D#299
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG this => NULL
  # DEBUG D.64948 => NULL
  # DEBUG this => NULL
  # DEBUG D#149 => D#296
  # DEBUG this => D#148
  # DEBUG __p => D#149
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#303
  # DEBUG __p => __x_72
  # DEBUG this => D#304
  # DEBUG D#254 => 1
  # DEBUG __p => __x_72
  # DEBUG __a => D#253
  # DEBUG __n => D#254
  # DEBUG D#252 => D#254
  # DEBUG D#251 => D#253
  # DEBUG D#249 => D#251
  # DEBUG D#250 => D#252
  # DEBUG __p => __x_72
  # DEBUG this => D#249
  # DEBUG D.69570 => D#250
  operator delete (__x_72);
  # DEBUG __x => __x_13
  # DEBUG __x => __x_13
  if (__x_13 == 0B)
    goto <bb 6>;
  else
    goto <bb 37>;

  <bb 10>:

  <bb 11>:
  # __x_71 = PHI <__x_12(10), __x_16(36)>
  # DEBUG __x => __x_71
  __x_15 = MEM[(struct _Rb_tree_node_base * *)__x_71 + 24B];
  # DEBUG D#29 => __x_71
  # DEBUG __x => D#29
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_15
  # DEBUG __x => __x_15
  if (__x_15 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  __x_16 = MEM[(struct _Rb_tree_node_base * *)__x_71 + 16B];
  # DEBUG D#30 => __x_71
  # DEBUG __x => D#30
  # DEBUG __y => NULL
  # DEBUG D#305 => this_6(D)
  # DEBUG __p => __x_71
  # DEBUG this => D#305
  # DEBUG D#304 => D#305
  # DEBUG D#303 => D#305
  # DEBUG D#302 => D#305
  # DEBUG D#300 => D#302
  # DEBUG D#301 => __x_71
  # DEBUG this => D#300
  # DEBUG __p => D#301
  # DEBUG D#299 => D#300
  # DEBUG D#298 => D#301
  # DEBUG D#297 => D#301
  # DEBUG this => D#297
  # DEBUG D#296 => &D#298->_M_value_field
  # DEBUG __r => D#296
  # DEBUG D#295 => D#299
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG this => NULL
  # DEBUG D.64948 => NULL
  # DEBUG this => NULL
  # DEBUG D#149 => D#296
  # DEBUG this => D#148
  # DEBUG __p => D#149
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#303
  # DEBUG __p => __x_71
  # DEBUG this => D#304
  # DEBUG D#254 => 1
  # DEBUG __p => __x_71
  # DEBUG __a => D#253
  # DEBUG __n => D#254
  # DEBUG D#252 => D#254
  # DEBUG D#251 => D#253
  # DEBUG D#249 => D#251
  # DEBUG D#250 => D#252
  # DEBUG __p => __x_71
  # DEBUG this => D#249
  # DEBUG D.69583 => D#250
  operator delete (__x_71);
  # DEBUG __x => __x_16
  # DEBUG __x => __x_16
  if (__x_16 == 0B)
    goto <bb 9>;
  else
    goto <bb 36>;

  <bb 13>:

  <bb 14>:
  # __x_77 = PHI <__x_15(13), __x_20(35)>
  # DEBUG __x => __x_77
  __x_19 = MEM[(struct _Rb_tree_node_base * *)__x_77 + 24B];
  # DEBUG D#29 => __x_77
  # DEBUG __x => D#29
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_19
  # DEBUG __x => __x_19
  if (__x_19 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  __x_20 = MEM[(struct _Rb_tree_node_base * *)__x_77 + 16B];
  # DEBUG D#30 => __x_77
  # DEBUG __x => D#30
  # DEBUG __y => NULL
  # DEBUG D#305 => this_6(D)
  # DEBUG __p => __x_77
  # DEBUG this => D#305
  # DEBUG D#304 => D#305
  # DEBUG D#303 => D#305
  # DEBUG D#302 => D#305
  # DEBUG D#300 => D#302
  # DEBUG D#301 => __x_77
  # DEBUG this => D#300
  # DEBUG __p => D#301
  # DEBUG D#299 => D#300
  # DEBUG D#298 => D#301
  # DEBUG D#297 => D#301
  # DEBUG this => D#297
  # DEBUG D#296 => &D#298->_M_value_field
  # DEBUG __r => D#296
  # DEBUG D#295 => D#299
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG this => NULL
  # DEBUG D.64948 => NULL
  # DEBUG this => NULL
  # DEBUG D#149 => D#296
  # DEBUG this => D#148
  # DEBUG __p => D#149
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#303
  # DEBUG __p => __x_77
  # DEBUG this => D#304
  # DEBUG D#254 => 1
  # DEBUG __p => __x_77
  # DEBUG __a => D#253
  # DEBUG __n => D#254
  # DEBUG D#252 => D#254
  # DEBUG D#251 => D#253
  # DEBUG D#249 => D#251
  # DEBUG D#250 => D#252
  # DEBUG __p => __x_77
  # DEBUG this => D#249
  # DEBUG D.69596 => D#250
  operator delete (__x_77);
  # DEBUG __x => __x_20
  # DEBUG __x => __x_20
  if (__x_20 == 0B)
    goto <bb 12>;
  else
    goto <bb 35>;

  <bb 16>:

  <bb 17>:
  # __x_80 = PHI <__x_19(16), __x_24(34)>
  # DEBUG __x => __x_80
  __x_23 = MEM[(struct _Rb_tree_node_base * *)__x_80 + 24B];
  # DEBUG D#29 => __x_80
  # DEBUG __x => D#29
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_23
  # DEBUG __x => __x_23
  if (__x_23 == 0B)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  __x_24 = MEM[(struct _Rb_tree_node_base * *)__x_80 + 16B];
  # DEBUG D#30 => __x_80
  # DEBUG __x => D#30
  # DEBUG __y => NULL
  # DEBUG D#305 => this_6(D)
  # DEBUG __p => __x_80
  # DEBUG this => D#305
  # DEBUG D#304 => D#305
  # DEBUG D#303 => D#305
  # DEBUG D#302 => D#305
  # DEBUG D#300 => D#302
  # DEBUG D#301 => __x_80
  # DEBUG this => D#300
  # DEBUG __p => D#301
  # DEBUG D#299 => D#300
  # DEBUG D#298 => D#301
  # DEBUG D#297 => D#301
  # DEBUG this => D#297
  # DEBUG D#296 => &D#298->_M_value_field
  # DEBUG __r => D#296
  # DEBUG D#295 => D#299
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG this => NULL
  # DEBUG D.64948 => NULL
  # DEBUG this => NULL
  # DEBUG D#149 => D#296
  # DEBUG this => D#148
  # DEBUG __p => D#149
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#303
  # DEBUG __p => __x_80
  # DEBUG this => D#304
  # DEBUG D#254 => 1
  # DEBUG __p => __x_80
  # DEBUG __a => D#253
  # DEBUG __n => D#254
  # DEBUG D#252 => D#254
  # DEBUG D#251 => D#253
  # DEBUG D#249 => D#251
  # DEBUG D#250 => D#252
  # DEBUG __p => __x_80
  # DEBUG this => D#249
  # DEBUG D.69609 => D#250
  operator delete (__x_80);
  # DEBUG __x => __x_24
  # DEBUG __x => __x_24
  if (__x_24 == 0B)
    goto <bb 15>;
  else
    goto <bb 34>;

  <bb 19>:

  <bb 20>:
  # __x_83 = PHI <__x_23(19), __x_28(33)>
  # DEBUG __x => __x_83
  __x_27 = MEM[(struct _Rb_tree_node_base * *)__x_83 + 24B];
  # DEBUG D#29 => __x_83
  # DEBUG __x => D#29
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_27
  # DEBUG __x => __x_27
  if (__x_27 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  __x_28 = MEM[(struct _Rb_tree_node_base * *)__x_83 + 16B];
  # DEBUG D#30 => __x_83
  # DEBUG __x => D#30
  # DEBUG __y => NULL
  # DEBUG D#305 => this_6(D)
  # DEBUG __p => __x_83
  # DEBUG this => D#305
  # DEBUG D#304 => D#305
  # DEBUG D#303 => D#305
  # DEBUG D#302 => D#305
  # DEBUG D#300 => D#302
  # DEBUG D#301 => __x_83
  # DEBUG this => D#300
  # DEBUG __p => D#301
  # DEBUG D#299 => D#300
  # DEBUG D#298 => D#301
  # DEBUG D#297 => D#301
  # DEBUG this => D#297
  # DEBUG D#296 => &D#298->_M_value_field
  # DEBUG __r => D#296
  # DEBUG D#295 => D#299
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG this => NULL
  # DEBUG D.64948 => NULL
  # DEBUG this => NULL
  # DEBUG D#149 => D#296
  # DEBUG this => D#148
  # DEBUG __p => D#149
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#303
  # DEBUG __p => __x_83
  # DEBUG this => D#304
  # DEBUG D#254 => 1
  # DEBUG __p => __x_83
  # DEBUG __a => D#253
  # DEBUG __n => D#254
  # DEBUG D#252 => D#254
  # DEBUG D#251 => D#253
  # DEBUG D#249 => D#251
  # DEBUG D#250 => D#252
  # DEBUG __p => __x_83
  # DEBUG this => D#249
  # DEBUG D.69622 => D#250
  operator delete (__x_83);
  # DEBUG __x => __x_28
  # DEBUG __x => __x_28
  if (__x_28 == 0B)
    goto <bb 18>;
  else
    goto <bb 33>;

  <bb 22>:

  <bb 23>:
  # __x_86 = PHI <__x_27(22), __x_32(32)>
  # DEBUG __x => __x_86
  __x_31 = MEM[(struct _Rb_tree_node_base * *)__x_86 + 24B];
  # DEBUG D#29 => __x_86
  # DEBUG __x => D#29
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_31
  # DEBUG __x => __x_31
  if (__x_31 == 0B)
    goto <bb 24>;
  else
    goto <bb 25>;

  <bb 24>:
  __x_32 = MEM[(struct _Rb_tree_node_base * *)__x_86 + 16B];
  # DEBUG D#30 => __x_86
  # DEBUG __x => D#30
  # DEBUG __y => NULL
  # DEBUG D#305 => this_6(D)
  # DEBUG __p => __x_86
  # DEBUG this => D#305
  # DEBUG D#304 => D#305
  # DEBUG D#303 => D#305
  # DEBUG D#302 => D#305
  # DEBUG D#300 => D#302
  # DEBUG D#301 => __x_86
  # DEBUG this => D#300
  # DEBUG __p => D#301
  # DEBUG D#299 => D#300
  # DEBUG D#298 => D#301
  # DEBUG D#297 => D#301
  # DEBUG this => D#297
  # DEBUG D#296 => &D#298->_M_value_field
  # DEBUG __r => D#296
  # DEBUG D#295 => D#299
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG this => NULL
  # DEBUG D.64948 => NULL
  # DEBUG this => NULL
  # DEBUG D#149 => D#296
  # DEBUG this => D#148
  # DEBUG __p => D#149
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#303
  # DEBUG __p => __x_86
  # DEBUG this => D#304
  # DEBUG D#254 => 1
  # DEBUG __p => __x_86
  # DEBUG __a => D#253
  # DEBUG __n => D#254
  # DEBUG D#252 => D#254
  # DEBUG D#251 => D#253
  # DEBUG D#249 => D#251
  # DEBUG D#250 => D#252
  # DEBUG __p => __x_86
  # DEBUG this => D#249
  # DEBUG D.69635 => D#250
  operator delete (__x_86);
  # DEBUG __x => __x_32
  # DEBUG __x => __x_32
  if (__x_32 == 0B)
    goto <bb 21>;
  else
    goto <bb 32>;

  <bb 25>:

  <bb 26>:
  # __x_89 = PHI <__x_31(25), __x_36(31)>
  # DEBUG __x => __x_89
  __x_35 = MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B];
  # DEBUG D#29 => __x_89
  # DEBUG __x => D#29
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_35
  # DEBUG __x => __x_35
  if (__x_35 == 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  __x_36 = MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B];
  # DEBUG D#30 => __x_89
  # DEBUG __x => D#30
  # DEBUG __y => NULL
  # DEBUG D#305 => this_6(D)
  # DEBUG __p => __x_89
  # DEBUG this => D#305
  # DEBUG D#304 => D#305
  # DEBUG D#303 => D#305
  # DEBUG D#302 => D#305
  # DEBUG D#300 => D#302
  # DEBUG D#301 => __x_89
  # DEBUG this => D#300
  # DEBUG __p => D#301
  # DEBUG D#299 => D#300
  # DEBUG D#298 => D#301
  # DEBUG D#297 => D#301
  # DEBUG this => D#297
  # DEBUG D#296 => &D#298->_M_value_field
  # DEBUG __r => D#296
  # DEBUG D#295 => D#299
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG this => NULL
  # DEBUG D.64948 => NULL
  # DEBUG this => NULL
  # DEBUG D#149 => D#296
  # DEBUG this => D#148
  # DEBUG __p => D#149
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#303
  # DEBUG __p => __x_89
  # DEBUG this => D#304
  # DEBUG D#254 => 1
  # DEBUG __p => __x_89
  # DEBUG __a => D#253
  # DEBUG __n => D#254
  # DEBUG D#252 => D#254
  # DEBUG D#251 => D#253
  # DEBUG D#249 => D#251
  # DEBUG D#250 => D#252
  # DEBUG __p => __x_89
  # DEBUG this => D#249
  # DEBUG D.69648 => D#250
  operator delete (__x_89);
  # DEBUG __x => __x_36
  # DEBUG __x => __x_36
  if (__x_36 == 0B)
    goto <bb 24>;
  else
    goto <bb 31>;

  <bb 28>:

  <bb 29>:
  # __x_92 = PHI <__x_35(28), __x_40(30)>
  # DEBUG __x => __x_92
  _39 = MEM[(struct _Rb_tree_node_base * *)__x_92 + 24B];
  # DEBUG D#29 => __x_92
  # DEBUG __x => D#29
  std::_Rb_tree<double, std::pair<const double, wire>, std::_Select1st<std::pair<const double, wire> >, std::less<double>, std::allocator<std::pair<const double, wire> > >::_M_erase (this_6(D), _39);
  __x_40 = MEM[(struct _Rb_tree_node_base * *)__x_92 + 16B];
  # DEBUG D#30 => __x_92
  # DEBUG __x => D#30
  # DEBUG __y => NULL
  # DEBUG D#305 => this_6(D)
  # DEBUG __p => __x_92
  # DEBUG this => D#305
  # DEBUG D#304 => D#305
  # DEBUG D#303 => D#305
  # DEBUG D#302 => D#305
  # DEBUG D#300 => D#302
  # DEBUG D#301 => __x_92
  # DEBUG this => D#300
  # DEBUG __p => D#301
  # DEBUG D#299 => D#300
  # DEBUG D#298 => D#301
  # DEBUG D#297 => D#301
  # DEBUG this => D#297
  # DEBUG D#296 => &D#298->_M_value_field
  # DEBUG __r => D#296
  # DEBUG D#295 => D#299
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG this => NULL
  # DEBUG D.64948 => NULL
  # DEBUG this => NULL
  # DEBUG D#149 => D#296
  # DEBUG this => D#148
  # DEBUG __p => D#149
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#303
  # DEBUG __p => __x_92
  # DEBUG this => D#304
  # DEBUG D#254 => 1
  # DEBUG __p => __x_92
  # DEBUG __a => D#253
  # DEBUG __n => D#254
  # DEBUG D#252 => D#254
  # DEBUG D#251 => D#253
  # DEBUG D#249 => D#251
  # DEBUG D#250 => D#252
  # DEBUG __p => __x_92
  # DEBUG this => D#249
  # DEBUG D.69661 => D#250
  operator delete (__x_92);
  # DEBUG __x => __x_40
  # DEBUG __x => __x_40
  if (__x_40 == 0B)
    goto <bb 27>;
  else
    goto <bb 30>;

  <bb 30>:
  goto <bb 29>;

  <bb 31>:
  goto <bb 26>;

  <bb 32>:
  goto <bb 23>;

  <bb 33>:
  goto <bb 20>;

  <bb 34>:
  goto <bb 17>;

  <bb 35>:
  goto <bb 14>;

  <bb 36>:
  goto <bb 11>;

  <bb 37>:
  goto <bb 8>;

  <bb 38>:
  goto <bb 5>;

}



;; Function virtual Power_Module::~Power_Module() (_ZN12Power_ModuleD0Ev, funcdef_no=1993, decl_uid=45251, cgraph_uid=492, symbol_order=493)

Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
virtual Power_Module::~Power_Module() (struct Power_Module * const this)
{
  struct _Rb_tree_node * __x;
  struct _Rep_type * _5;
  char * const _7;
  const char * _8;
  struct _Rb_tree_node_base * _10;
  struct Module * * _13;
  char * const _14;
  const char * _15;
  char * const _16;
  const char * _17;

  <bb 2>:
  # DEBUG this => this_2(D)
  this_2(D)->D.45260._vptr.Module = &MEM[(void *)&_ZTV12Power_Module + 16B];
  # DEBUG D#308 => &this_2(D)->wire_map
  # DEBUG this => D#308
  _5 = &MEM[(struct map *)this_2(D) + 176B]._M_t;
  # DEBUG this => _5
  __x_6 = MEM[(struct _Rb_tree_node_base * *)this_2(D) + 192B];
  # DEBUG D#23 => _5
  # DEBUG this => D#23
  # DEBUG this => _5
  # DEBUG __x => __x_6
  # DEBUG __x => __x_6
  if (__x_6 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  # DEBUG D#306 => &MEM[(struct _Rb_tree *)_5]._M_impl
  # DEBUG this => D#306
  # DEBUG this => D#306
  # DEBUG this => D#306
  MEM[(struct  &)this_2(D) + 176] ={v} {CLOBBER};
  # DEBUG D#307 => &this_2(D)->output_file_name
  # DEBUG this => D#307
  # DEBUG this => D#307
  # DEBUG this => D#307
  _7 = MEM[(char * *)this_2(D) + 128B];
  # DEBUG D#1 => D#307
  # DEBUG this => D#1
  # DEBUG this => D#307
  _8 = &MEM[(const struct basic_string *)this_2(D) + 128B].D.13615._M_local_buf;
  if (_7 != _8)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 4>:

  <bb 5>:
  # __x_58 = PHI <__x_6(4), __x_11(6)>
  # DEBUG __x => __x_58
  _10 = MEM[(struct _Rb_tree_node_base * *)__x_58 + 24B];
  # DEBUG D#29 => __x_58
  # DEBUG __x => D#29
  std::_Rb_tree<double, std::pair<const double, wire>, std::_Select1st<std::pair<const double, wire> >, std::less<double>, std::allocator<std::pair<const double, wire> > >::_M_erase (_5, _10);
  __x_11 = MEM[(struct _Rb_tree_node_base * *)__x_58 + 16B];
  # DEBUG D#30 => __x_58
  # DEBUG __x => D#30
  # DEBUG __y => NULL
  # DEBUG D#305 => _5
  # DEBUG __p => __x_58
  # DEBUG this => D#305
  # DEBUG D#304 => D#305
  # DEBUG D#303 => D#305
  # DEBUG D#302 => D#305
  # DEBUG D#300 => D#302
  # DEBUG D#301 => __x_58
  # DEBUG this => D#300
  # DEBUG __p => D#301
  # DEBUG D#299 => D#300
  # DEBUG D#298 => D#301
  # DEBUG D#297 => D#301
  # DEBUG this => D#297
  # DEBUG D#296 => &D#298->_M_value_field
  # DEBUG __r => D#296
  # DEBUG D#295 => D#299
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG this => NULL
  # DEBUG D.64948 => NULL
  # DEBUG this => NULL
  # DEBUG D#149 => D#296
  # DEBUG this => D#148
  # DEBUG __p => D#149
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#303
  # DEBUG __p => __x_58
  # DEBUG this => D#304
  # DEBUG D#254 => 1
  # DEBUG __p => __x_58
  # DEBUG __a => D#253
  # DEBUG __n => D#254
  # DEBUG D#252 => D#254
  # DEBUG D#251 => D#253
  # DEBUG D#249 => D#251
  # DEBUG D#250 => D#252
  # DEBUG __p => __x_58
  # DEBUG this => D#249
  # DEBUG D.69698 => D#250
  operator delete (__x_58);
  # DEBUG __x => __x_11
  # DEBUG __x => __x_11
  if (__x_11 == 0B)
    goto <bb 3>;
  else
    goto <bb 6>;

  <bb 6>:
  goto <bb 5>;

  <bb 7>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#307].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#307
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#307
  # DEBUG this => D#1
  # DEBUG this => D#307
  # DEBUG D#117 => &MEM[(struct basic_string *)D#307]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _7
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _7
  # DEBUG this => D#111
  # DEBUG D.69680 => D#112
  operator delete (_7);

  <bb 8>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#307]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)this_2(D) + 128] ={v} {CLOBBER};
  # DEBUG D#663 => &this_2(D)->D.45260
  # DEBUG this => D#663
  MEM[(struct Module *)this_2(D)]._vptr.Module = &MEM[(void *)&_ZTV6Module + 16B];
  # DEBUG D#145 => &D#663->_children
  # DEBUG this => D#145
  # DEBUG D#139 => &D#145->D.28840
  # DEBUG this => D#139
  # DEBUG D#142 => D#145->D.28840._M_impl._M_finish
  # DEBUG D#141 => D#145->D.28840._M_impl._M_start
  # DEBUG D#56 => D#141
  # DEBUG D#57 => D#142
  # DEBUG __first => D#56
  # DEBUG __last => D#57
  # DEBUG D.63825 => D#58
  # DEBUG D#55 => D#57
  # DEBUG D#54 => D#56
  # DEBUG D#52 => D#54
  # DEBUG D#53 => D#55
  # DEBUG __first => D#52
  # DEBUG __last => D#53
  # DEBUG D#51 => D#53
  # DEBUG D#50 => D#52
  # DEBUG D#48 => D#50
  # DEBUG D#49 => D#51
  # DEBUG D.63445 => D#48
  # DEBUG D.63444 => D#49
  # DEBUG D#140 => &D#145->D.28840
  # DEBUG this => D#140
  # DEBUG D#138 => D#140->_M_impl._M_end_of_storage
  # DEBUG D#137 => (long int) D#138
  _13 = MEM[(struct _Vector_base *)this_2(D) + 72B]._M_impl._M_start;
  # DEBUG D#136 => (long int) _13
  # DEBUG D#135 => D#137 - D#136
  # DEBUG D#134 => D#135 /[ex] 8
  # DEBUG D#131 => D#140
  # DEBUG D#132 => (long unsigned int) D#134
  # DEBUG __p => _13
  # DEBUG this => D#131
  # DEBUG __n => D#132
  # DEBUG D#130 => D#132
  # DEBUG D#129 => D#131
  if (_13 != 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  # DEBUG D#128 => &D#129->_M_impl
  # DEBUG D#126 => D#128
  # DEBUG D#127 => D#130
  # DEBUG __p => _13
  # DEBUG __a => D#126
  # DEBUG __n => D#127
  # DEBUG D#125 => D#127
  # DEBUG D#124 => D#126
  # DEBUG D#122 => D#124
  # DEBUG D#123 => D#125
  # DEBUG __p => _13
  # DEBUG this => D#122
  # DEBUG D.69711 => D#123
  operator delete (_13);

  <bb 10>:
  # DEBUG D#133 => &D#140->_M_impl
  # DEBUG this => D#133
  # DEBUG this => D#133
  # DEBUG this => D#133
  MEM[(struct  &)this_2(D) + 72] ={v} {CLOBBER};
  # DEBUG D#144 => &D#663->_fullname
  # DEBUG this => D#144
  # DEBUG this => D#144
  # DEBUG this => D#144
  _14 = MEM[(char * *)this_2(D) + 40B];
  # DEBUG D#1 => D#144
  # DEBUG this => D#1
  # DEBUG this => D#144
  _15 = &MEM[(const struct basic_string *)this_2(D) + 40B].D.13615._M_local_buf;
  if (_14 != _15)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#144].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#144
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#144
  # DEBUG this => D#1
  # DEBUG this => D#144
  # DEBUG D#117 => &MEM[(struct basic_string *)D#144]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _14
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _14
  # DEBUG this => D#111
  # DEBUG D.69724 => D#112
  operator delete (_14);

  <bb 12>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#144]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)this_2(D) + 40] ={v} {CLOBBER};
  # DEBUG D#143 => &D#663->_name
  # DEBUG this => D#143
  # DEBUG this => D#143
  # DEBUG this => D#143
  _16 = MEM[(char * *)this_2(D) + 8B];
  # DEBUG D#1 => D#143
  # DEBUG this => D#1
  # DEBUG this => D#143
  _17 = &MEM[(const struct basic_string *)this_2(D) + 8B].D.13615._M_local_buf;
  if (_16 != _17)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#143].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#143
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#143
  # DEBUG this => D#1
  # DEBUG this => D#143
  # DEBUG D#117 => &MEM[(struct basic_string *)D#143]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _16
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _16
  # DEBUG this => D#111
  # DEBUG D.69739 => D#112
  operator delete (_16);

  <bb 14>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#143]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  operator delete (this_2(D));
  return;

}



;; Function Power_Module::~Power_Module() (_ZN12Power_ModuleD2Ev, funcdef_no=1991, decl_uid=45257, cgraph_uid=490, symbol_order=491)

Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
Power_Module::~Power_Module() (struct Power_Module * const this)
{
  struct _Rb_tree_node * __x;
  struct _Rep_type * _5;
  char * const _9;
  const char * _10;
  struct Module * * _12;
  struct _Rb_tree_node_base * _24;
  char * const _27;
  const char * _28;
  char * const _29;
  const char * _30;

  <bb 2>:
  this_2(D)->D.45260._vptr.Module = &MEM[(void *)&_ZTV12Power_Module + 16B];
  # DEBUG D#308 => &this_2(D)->wire_map
  # DEBUG this => D#308
  _5 = &MEM[(struct map *)this_2(D) + 176B]._M_t;
  # DEBUG this => _5
  __x_11 = MEM[(struct _Rb_tree_node_base * *)this_2(D) + 192B];
  # DEBUG D#23 => _5
  # DEBUG this => D#23
  # DEBUG this => _5
  # DEBUG __x => __x_11
  # DEBUG __x => __x_11
  if (__x_11 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  # DEBUG D#306 => &MEM[(struct _Rb_tree *)_5]._M_impl
  # DEBUG this => D#306
  # DEBUG this => D#306
  # DEBUG this => D#306
  MEM[(struct  &)this_2(D) + 176] ={v} {CLOBBER};
  # DEBUG D#307 => &this_2(D)->output_file_name
  # DEBUG this => D#307
  # DEBUG this => D#307
  # DEBUG this => D#307
  _9 = MEM[(char * *)this_2(D) + 128B];
  # DEBUG D#1 => D#307
  # DEBUG this => D#1
  # DEBUG this => D#307
  _10 = &MEM[(const struct basic_string *)this_2(D) + 128B].D.13615._M_local_buf;
  if (_9 != _10)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 4>:

  <bb 5>:
  # __x_57 = PHI <__x_11(4), __x_25(6)>
  # DEBUG __x => __x_57
  _24 = MEM[(struct _Rb_tree_node_base * *)__x_57 + 24B];
  # DEBUG D#29 => __x_57
  # DEBUG __x => D#29
  std::_Rb_tree<double, std::pair<const double, wire>, std::_Select1st<std::pair<const double, wire> >, std::less<double>, std::allocator<std::pair<const double, wire> > >::_M_erase (_5, _24);
  __x_25 = MEM[(struct _Rb_tree_node_base * *)__x_57 + 16B];
  # DEBUG D#30 => __x_57
  # DEBUG __x => D#30
  # DEBUG __y => NULL
  # DEBUG D#305 => _5
  # DEBUG __p => __x_57
  # DEBUG this => D#305
  # DEBUG D#304 => D#305
  # DEBUG D#303 => D#305
  # DEBUG D#302 => D#305
  # DEBUG D#300 => D#302
  # DEBUG D#301 => __x_57
  # DEBUG this => D#300
  # DEBUG __p => D#301
  # DEBUG D#299 => D#300
  # DEBUG D#298 => D#301
  # DEBUG D#297 => D#301
  # DEBUG this => D#297
  # DEBUG D#296 => &D#298->_M_value_field
  # DEBUG __r => D#296
  # DEBUG D#295 => D#299
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG this => NULL
  # DEBUG D.64948 => NULL
  # DEBUG this => NULL
  # DEBUG D#149 => D#296
  # DEBUG this => D#148
  # DEBUG __p => D#149
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#303
  # DEBUG __p => __x_57
  # DEBUG this => D#304
  # DEBUG D#254 => 1
  # DEBUG __p => __x_57
  # DEBUG __a => D#253
  # DEBUG __n => D#254
  # DEBUG D#252 => D#254
  # DEBUG D#251 => D#253
  # DEBUG D#249 => D#251
  # DEBUG D#250 => D#252
  # DEBUG __p => __x_57
  # DEBUG this => D#249
  # DEBUG D.69764 => D#250
  operator delete (__x_57);
  # DEBUG __x => __x_25
  # DEBUG __x => __x_25
  if (__x_25 == 0B)
    goto <bb 3>;
  else
    goto <bb 6>;

  <bb 6>:
  goto <bb 5>;

  <bb 7>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#307].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#307
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#307
  # DEBUG this => D#1
  # DEBUG this => D#307
  # DEBUG D#117 => &MEM[(struct basic_string *)D#307]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _9
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _9
  # DEBUG this => D#111
  # DEBUG D.65039 => D#112
  operator delete (_9);

  <bb 8>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#307]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)this_2(D) + 128] ={v} {CLOBBER};
  # DEBUG D#665 => &this_2(D)->D.45260
  # DEBUG this => D#665
  MEM[(struct Module *)this_2(D)]._vptr.Module = &MEM[(void *)&_ZTV6Module + 16B];
  # DEBUG D#145 => &D#665->_children
  # DEBUG this => D#145
  # DEBUG D#139 => &D#145->D.28840
  # DEBUG this => D#139
  # DEBUG D#142 => D#145->D.28840._M_impl._M_finish
  # DEBUG D#141 => D#145->D.28840._M_impl._M_start
  # DEBUG D#56 => D#141
  # DEBUG D#57 => D#142
  # DEBUG __first => D#56
  # DEBUG __last => D#57
  # DEBUG D.63825 => D#58
  # DEBUG D#55 => D#57
  # DEBUG D#54 => D#56
  # DEBUG D#52 => D#54
  # DEBUG D#53 => D#55
  # DEBUG __first => D#52
  # DEBUG __last => D#53
  # DEBUG D#51 => D#53
  # DEBUG D#50 => D#52
  # DEBUG D#48 => D#50
  # DEBUG D#49 => D#51
  # DEBUG D.63445 => D#48
  # DEBUG D.63444 => D#49
  # DEBUG D#140 => &D#145->D.28840
  # DEBUG this => D#140
  # DEBUG D#138 => D#140->_M_impl._M_end_of_storage
  # DEBUG D#137 => (long int) D#138
  _12 = MEM[(struct _Vector_base *)this_2(D) + 72B]._M_impl._M_start;
  # DEBUG D#136 => (long int) _12
  # DEBUG D#135 => D#137 - D#136
  # DEBUG D#134 => D#135 /[ex] 8
  # DEBUG D#131 => D#140
  # DEBUG D#132 => (long unsigned int) D#134
  # DEBUG __p => _12
  # DEBUG this => D#131
  # DEBUG __n => D#132
  # DEBUG D#130 => D#132
  # DEBUG D#129 => D#131
  if (_12 != 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  # DEBUG D#128 => &D#129->_M_impl
  # DEBUG D#126 => D#128
  # DEBUG D#127 => D#130
  # DEBUG __p => _12
  # DEBUG __a => D#126
  # DEBUG __n => D#127
  # DEBUG D#125 => D#127
  # DEBUG D#124 => D#126
  # DEBUG D#122 => D#124
  # DEBUG D#123 => D#125
  # DEBUG __p => _12
  # DEBUG this => D#122
  # DEBUG D.69777 => D#123
  operator delete (_12);

  <bb 10>:
  # DEBUG D#133 => &D#140->_M_impl
  # DEBUG this => D#133
  # DEBUG this => D#133
  # DEBUG this => D#133
  MEM[(struct  &)this_2(D) + 72] ={v} {CLOBBER};
  # DEBUG D#144 => &D#665->_fullname
  # DEBUG this => D#144
  # DEBUG this => D#144
  # DEBUG this => D#144
  _27 = MEM[(char * *)this_2(D) + 40B];
  # DEBUG D#1 => D#144
  # DEBUG this => D#1
  # DEBUG this => D#144
  _28 = &MEM[(const struct basic_string *)this_2(D) + 40B].D.13615._M_local_buf;
  if (_27 != _28)
    goto <bb 11>;
  else
    goto <bb 12>;

  <bb 11>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#144].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#144
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#144
  # DEBUG this => D#1
  # DEBUG this => D#144
  # DEBUG D#117 => &MEM[(struct basic_string *)D#144]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _27
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _27
  # DEBUG this => D#111
  # DEBUG D.69790 => D#112
  operator delete (_27);

  <bb 12>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#144]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)this_2(D) + 40] ={v} {CLOBBER};
  # DEBUG D#143 => &D#665->_name
  # DEBUG this => D#143
  # DEBUG this => D#143
  # DEBUG this => D#143
  _29 = MEM[(char * *)this_2(D) + 8B];
  # DEBUG D#1 => D#143
  # DEBUG this => D#1
  # DEBUG this => D#143
  _30 = &MEM[(const struct basic_string *)this_2(D) + 8B].D.13615._M_local_buf;
  if (_29 != _30)
    goto <bb 13>;
  else
    goto <bb 14>;

  <bb 13>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#143].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#143
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#143
  # DEBUG this => D#1
  # DEBUG this => D#143
  # DEBUG D#117 => &MEM[(struct basic_string *)D#143]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _29
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _29
  # DEBUG this => D#111
  # DEBUG D.69805 => D#112
  operator delete (_29);

  <bb 14>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#143]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)this_2(D)] ={v} {CLOBBER};
  return;

}



;; Function void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >*] (_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_S5_ESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E, funcdef_no=2179, decl_uid=36824, cgraph_uid=678, symbol_order=679)

Trying loop 1 as candidate
loop 1 is not innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is not innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is not innermost
loop is not parallel according to graphite
Trying loop 4 as candidate
loop 4 is not innermost
loop is not parallel according to graphite
Trying loop 5 as candidate
loop 5 is not innermost
loop is not parallel according to graphite
Trying loop 6 as candidate
loop 6 is not innermost
loop is not parallel according to graphite
Trying loop 7 as candidate
loop 7 is not innermost
loop is not parallel according to graphite
Trying loop 8 as candidate
loop 8 is not innermost
loop is not parallel according to graphite
Trying loop 9 as candidate
loop 9 is innermost
loop is not parallel according to graphite
void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >*] (struct _Rb_tree * const this, struct _Rb_tree_node * __x)
{
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  char * const _7;
  char * const _13;
  const char * _14;
  char * const _15;
  const char * _16;
  const char * _21;
  char * const _22;
  const char * _23;
  char * const _29;
  const char * _30;
  char * const _31;
  const char * _32;
  char * const _38;
  const char * _39;
  char * const _40;
  const char * _41;
  char * const _47;
  const char * _48;
  char * const _49;
  const char * _50;
  char * const _56;
  const char * _57;
  char * const _58;
  const char * _59;
  char * const _65;
  const char * _66;
  char * const _67;
  const char * _68;
  char * const _74;
  const char * _75;
  char * const _76;
  const char * _77;
  struct _Rb_tree_node_base * _79;
  char * const _83;
  const char * _84;
  char * const _85;
  const char * _86;

  <bb 2>:
  # DEBUG __x => __x_3(D)
  if (__x_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  return;

  <bb 4>:

  <bb 5>:
  # __x_225 = PHI <__x_3(D)(4), __x_10(74)>
  # DEBUG __x => __x_225
  __x_9 = MEM[(struct _Rb_tree_node_base * *)__x_225 + 24B];
  # DEBUG D#31 => __x_225
  # DEBUG __x => D#31
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_9
  # DEBUG __x => __x_9
  if (__x_9 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  __x_10 = MEM[(struct _Rb_tree_node_base * *)__x_225 + 16B];
  # DEBUG D#32 => __x_225
  # DEBUG __x => D#32
  # DEBUG __y => NULL
  # DEBUG D#315 => this_6(D)
  # DEBUG __p => __x_225
  # DEBUG this => D#315
  # DEBUG D#314 => D#315
  # DEBUG D#313 => D#315
  # DEBUG D#312 => D#313
  # DEBUG __p => __x_225
  # DEBUG this => D#312
  # DEBUG D#311 => D#312
  # DEBUG this => __x_225
  # DEBUG D#675 => &__x_225->_M_value_field
  # DEBUG __r => D#675
  # DEBUG D#310 => D#311
  # DEBUG this => D#310
  # DEBUG D#309 => D#310
  # DEBUG this => D#309
  # DEBUG this => NULL
  # DEBUG D.65057 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#675
  # DEBUG this => D#152
  # DEBUG this => D#675
  # DEBUG D#151 => &D#675->second
  # DEBUG this => D#151
  # DEBUG this => D#151
  # DEBUG this => D#151
  _13 = MEM[(char * *)__x_225 + 64B];
  # DEBUG D#1 => D#151
  # DEBUG this => D#1
  # DEBUG this => D#151
  _14 = &MEM[(const struct basic_string *)__x_225 + 64B].D.13615._M_local_buf;
  if (_13 != _14)
    goto <bb 70>;
  else
    goto <bb 71>;

  <bb 7>:

  <bb 8>:
  # __x_232 = PHI <__x_9(7), __x_18(69)>
  # DEBUG __x => __x_232
  __x_17 = MEM[(struct _Rb_tree_node_base * *)__x_232 + 24B];
  # DEBUG D#31 => __x_232
  # DEBUG __x => D#31
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_17
  # DEBUG __x => __x_17
  if (__x_17 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  __x_18 = MEM[(struct _Rb_tree_node_base * *)__x_232 + 16B];
  # DEBUG D#32 => __x_232
  # DEBUG __x => D#32
  # DEBUG __y => NULL
  # DEBUG D#315 => this_6(D)
  # DEBUG __p => __x_232
  # DEBUG this => D#315
  # DEBUG D#314 => D#315
  # DEBUG D#313 => D#315
  # DEBUG D#312 => D#313
  # DEBUG __p => __x_232
  # DEBUG this => D#312
  # DEBUG D#311 => D#312
  # DEBUG this => __x_232
  # DEBUG D#674 => &__x_232->_M_value_field
  # DEBUG __r => D#674
  # DEBUG D#310 => D#311
  # DEBUG this => D#310
  # DEBUG D#309 => D#310
  # DEBUG this => D#309
  # DEBUG this => NULL
  # DEBUG D.65057 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#674
  # DEBUG this => D#152
  # DEBUG this => D#674
  # DEBUG D#151 => &D#674->second
  # DEBUG this => D#151
  # DEBUG this => D#151
  # DEBUG this => D#151
  _7 = MEM[(char * *)__x_232 + 64B];
  # DEBUG D#1 => D#151
  # DEBUG this => D#1
  # DEBUG this => D#151
  _21 = &MEM[(const struct basic_string *)__x_232 + 64B].D.13615._M_local_buf;
  if (_7 != _21)
    goto <bb 65>;
  else
    goto <bb 66>;

  <bb 10>:

  <bb 11>:
  # __x_234 = PHI <__x_17(10), __x_26(64)>
  # DEBUG __x => __x_234
  __x_25 = MEM[(struct _Rb_tree_node_base * *)__x_234 + 24B];
  # DEBUG D#31 => __x_234
  # DEBUG __x => D#31
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_25
  # DEBUG __x => __x_25
  if (__x_25 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  __x_26 = MEM[(struct _Rb_tree_node_base * *)__x_234 + 16B];
  # DEBUG D#32 => __x_234
  # DEBUG __x => D#32
  # DEBUG __y => NULL
  # DEBUG D#315 => this_6(D)
  # DEBUG __p => __x_234
  # DEBUG this => D#315
  # DEBUG D#314 => D#315
  # DEBUG D#313 => D#315
  # DEBUG D#312 => D#313
  # DEBUG __p => __x_234
  # DEBUG this => D#312
  # DEBUG D#311 => D#312
  # DEBUG this => __x_234
  # DEBUG D#673 => &__x_234->_M_value_field
  # DEBUG __r => D#673
  # DEBUG D#310 => D#311
  # DEBUG this => D#310
  # DEBUG D#309 => D#310
  # DEBUG this => D#309
  # DEBUG this => NULL
  # DEBUG D.65057 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#673
  # DEBUG this => D#152
  # DEBUG this => D#673
  # DEBUG D#151 => &D#673->second
  # DEBUG this => D#151
  # DEBUG this => D#151
  # DEBUG this => D#151
  _29 = MEM[(char * *)__x_234 + 64B];
  # DEBUG D#1 => D#151
  # DEBUG this => D#1
  # DEBUG this => D#151
  _30 = &MEM[(const struct basic_string *)__x_234 + 64B].D.13615._M_local_buf;
  if (_29 != _30)
    goto <bb 60>;
  else
    goto <bb 61>;

  <bb 13>:

  <bb 14>:
  # __x_236 = PHI <__x_25(13), __x_35(59)>
  # DEBUG __x => __x_236
  __x_34 = MEM[(struct _Rb_tree_node_base * *)__x_236 + 24B];
  # DEBUG D#31 => __x_236
  # DEBUG __x => D#31
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_34
  # DEBUG __x => __x_34
  if (__x_34 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  __x_35 = MEM[(struct _Rb_tree_node_base * *)__x_236 + 16B];
  # DEBUG D#32 => __x_236
  # DEBUG __x => D#32
  # DEBUG __y => NULL
  # DEBUG D#315 => this_6(D)
  # DEBUG __p => __x_236
  # DEBUG this => D#315
  # DEBUG D#314 => D#315
  # DEBUG D#313 => D#315
  # DEBUG D#312 => D#313
  # DEBUG __p => __x_236
  # DEBUG this => D#312
  # DEBUG D#311 => D#312
  # DEBUG this => __x_236
  # DEBUG D#672 => &__x_236->_M_value_field
  # DEBUG __r => D#672
  # DEBUG D#310 => D#311
  # DEBUG this => D#310
  # DEBUG D#309 => D#310
  # DEBUG this => D#309
  # DEBUG this => NULL
  # DEBUG D.65057 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#672
  # DEBUG this => D#152
  # DEBUG this => D#672
  # DEBUG D#151 => &D#672->second
  # DEBUG this => D#151
  # DEBUG this => D#151
  # DEBUG this => D#151
  _38 = MEM[(char * *)__x_236 + 64B];
  # DEBUG D#1 => D#151
  # DEBUG this => D#1
  # DEBUG this => D#151
  _39 = &MEM[(const struct basic_string *)__x_236 + 64B].D.13615._M_local_buf;
  if (_38 != _39)
    goto <bb 55>;
  else
    goto <bb 56>;

  <bb 16>:

  <bb 17>:
  # __x_227 = PHI <__x_34(16), __x_44(54)>
  # DEBUG __x => __x_227
  __x_43 = MEM[(struct _Rb_tree_node_base * *)__x_227 + 24B];
  # DEBUG D#31 => __x_227
  # DEBUG __x => D#31
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_43
  # DEBUG __x => __x_43
  if (__x_43 == 0B)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  __x_44 = MEM[(struct _Rb_tree_node_base * *)__x_227 + 16B];
  # DEBUG D#32 => __x_227
  # DEBUG __x => D#32
  # DEBUG __y => NULL
  # DEBUG D#315 => this_6(D)
  # DEBUG __p => __x_227
  # DEBUG this => D#315
  # DEBUG D#314 => D#315
  # DEBUG D#313 => D#315
  # DEBUG D#312 => D#313
  # DEBUG __p => __x_227
  # DEBUG this => D#312
  # DEBUG D#311 => D#312
  # DEBUG this => __x_227
  # DEBUG D#671 => &__x_227->_M_value_field
  # DEBUG __r => D#671
  # DEBUG D#310 => D#311
  # DEBUG this => D#310
  # DEBUG D#309 => D#310
  # DEBUG this => D#309
  # DEBUG this => NULL
  # DEBUG D.65057 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#671
  # DEBUG this => D#152
  # DEBUG this => D#671
  # DEBUG D#151 => &D#671->second
  # DEBUG this => D#151
  # DEBUG this => D#151
  # DEBUG this => D#151
  _47 = MEM[(char * *)__x_227 + 64B];
  # DEBUG D#1 => D#151
  # DEBUG this => D#1
  # DEBUG this => D#151
  _48 = &MEM[(const struct basic_string *)__x_227 + 64B].D.13615._M_local_buf;
  if (_47 != _48)
    goto <bb 50>;
  else
    goto <bb 51>;

  <bb 19>:

  <bb 20>:
  # __x_218 = PHI <__x_43(19), __x_53(49)>
  # DEBUG __x => __x_218
  __x_52 = MEM[(struct _Rb_tree_node_base * *)__x_218 + 24B];
  # DEBUG D#31 => __x_218
  # DEBUG __x => D#31
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_52
  # DEBUG __x => __x_52
  if (__x_52 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  __x_53 = MEM[(struct _Rb_tree_node_base * *)__x_218 + 16B];
  # DEBUG D#32 => __x_218
  # DEBUG __x => D#32
  # DEBUG __y => NULL
  # DEBUG D#315 => this_6(D)
  # DEBUG __p => __x_218
  # DEBUG this => D#315
  # DEBUG D#314 => D#315
  # DEBUG D#313 => D#315
  # DEBUG D#312 => D#313
  # DEBUG __p => __x_218
  # DEBUG this => D#312
  # DEBUG D#311 => D#312
  # DEBUG this => __x_218
  # DEBUG D#670 => &__x_218->_M_value_field
  # DEBUG __r => D#670
  # DEBUG D#310 => D#311
  # DEBUG this => D#310
  # DEBUG D#309 => D#310
  # DEBUG this => D#309
  # DEBUG this => NULL
  # DEBUG D.65057 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#670
  # DEBUG this => D#152
  # DEBUG this => D#670
  # DEBUG D#151 => &D#670->second
  # DEBUG this => D#151
  # DEBUG this => D#151
  # DEBUG this => D#151
  _56 = MEM[(char * *)__x_218 + 64B];
  # DEBUG D#1 => D#151
  # DEBUG this => D#1
  # DEBUG this => D#151
  _57 = &MEM[(const struct basic_string *)__x_218 + 64B].D.13615._M_local_buf;
  if (_56 != _57)
    goto <bb 45>;
  else
    goto <bb 46>;

  <bb 22>:

  <bb 23>:
  # __x_239 = PHI <__x_52(22), __x_62(44)>
  # DEBUG __x => __x_239
  __x_61 = MEM[(struct _Rb_tree_node_base * *)__x_239 + 24B];
  # DEBUG D#31 => __x_239
  # DEBUG __x => D#31
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_61
  # DEBUG __x => __x_61
  if (__x_61 == 0B)
    goto <bb 24>;
  else
    goto <bb 25>;

  <bb 24>:
  __x_62 = MEM[(struct _Rb_tree_node_base * *)__x_239 + 16B];
  # DEBUG D#32 => __x_239
  # DEBUG __x => D#32
  # DEBUG __y => NULL
  # DEBUG D#315 => this_6(D)
  # DEBUG __p => __x_239
  # DEBUG this => D#315
  # DEBUG D#314 => D#315
  # DEBUG D#313 => D#315
  # DEBUG D#312 => D#313
  # DEBUG __p => __x_239
  # DEBUG this => D#312
  # DEBUG D#311 => D#312
  # DEBUG this => __x_239
  # DEBUG D#669 => &__x_239->_M_value_field
  # DEBUG __r => D#669
  # DEBUG D#310 => D#311
  # DEBUG this => D#310
  # DEBUG D#309 => D#310
  # DEBUG this => D#309
  # DEBUG this => NULL
  # DEBUG D.65057 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#669
  # DEBUG this => D#152
  # DEBUG this => D#669
  # DEBUG D#151 => &D#669->second
  # DEBUG this => D#151
  # DEBUG this => D#151
  # DEBUG this => D#151
  _65 = MEM[(char * *)__x_239 + 64B];
  # DEBUG D#1 => D#151
  # DEBUG this => D#1
  # DEBUG this => D#151
  _66 = &MEM[(const struct basic_string *)__x_239 + 64B].D.13615._M_local_buf;
  if (_65 != _66)
    goto <bb 40>;
  else
    goto <bb 41>;

  <bb 25>:

  <bb 26>:
  # __x_242 = PHI <__x_61(25), __x_71(39)>
  # DEBUG __x => __x_242
  __x_70 = MEM[(struct _Rb_tree_node_base * *)__x_242 + 24B];
  # DEBUG D#31 => __x_242
  # DEBUG __x => D#31
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_70
  # DEBUG __x => __x_70
  if (__x_70 == 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  __x_71 = MEM[(struct _Rb_tree_node_base * *)__x_242 + 16B];
  # DEBUG D#32 => __x_242
  # DEBUG __x => D#32
  # DEBUG __y => NULL
  # DEBUG D#315 => this_6(D)
  # DEBUG __p => __x_242
  # DEBUG this => D#315
  # DEBUG D#314 => D#315
  # DEBUG D#313 => D#315
  # DEBUG D#312 => D#313
  # DEBUG __p => __x_242
  # DEBUG this => D#312
  # DEBUG D#311 => D#312
  # DEBUG this => __x_242
  # DEBUG D#668 => &__x_242->_M_value_field
  # DEBUG __r => D#668
  # DEBUG D#310 => D#311
  # DEBUG this => D#310
  # DEBUG D#309 => D#310
  # DEBUG this => D#309
  # DEBUG this => NULL
  # DEBUG D.65057 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#668
  # DEBUG this => D#152
  # DEBUG this => D#668
  # DEBUG D#151 => &D#668->second
  # DEBUG this => D#151
  # DEBUG this => D#151
  # DEBUG this => D#151
  _74 = MEM[(char * *)__x_242 + 64B];
  # DEBUG D#1 => D#151
  # DEBUG this => D#1
  # DEBUG this => D#151
  _75 = &MEM[(const struct basic_string *)__x_242 + 64B].D.13615._M_local_buf;
  if (_74 != _75)
    goto <bb 35>;
  else
    goto <bb 36>;

  <bb 28>:

  <bb 29>:
  # __x_245 = PHI <__x_70(28), __x_80(34)>
  # DEBUG __x => __x_245
  _79 = MEM[(struct _Rb_tree_node_base * *)__x_245 + 24B];
  # DEBUG D#31 => __x_245
  # DEBUG __x => D#31
  std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > > >::_M_erase (this_6(D), _79);
  __x_80 = MEM[(struct _Rb_tree_node_base * *)__x_245 + 16B];
  # DEBUG D#32 => __x_245
  # DEBUG __x => D#32
  # DEBUG __y => NULL
  # DEBUG D#315 => this_6(D)
  # DEBUG __p => __x_245
  # DEBUG this => D#315
  # DEBUG D#314 => D#315
  # DEBUG D#313 => D#315
  # DEBUG D#312 => D#313
  # DEBUG __p => __x_245
  # DEBUG this => D#312
  # DEBUG D#311 => D#312
  # DEBUG this => __x_245
  # DEBUG D#667 => &__x_245->_M_value_field
  # DEBUG __r => D#667
  # DEBUG D#310 => D#311
  # DEBUG this => D#310
  # DEBUG D#309 => D#310
  # DEBUG this => D#309
  # DEBUG this => NULL
  # DEBUG D.65057 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#667
  # DEBUG this => D#152
  # DEBUG this => D#667
  # DEBUG D#151 => &D#667->second
  # DEBUG this => D#151
  # DEBUG this => D#151
  # DEBUG this => D#151
  _83 = MEM[(char * *)__x_245 + 64B];
  # DEBUG D#1 => D#151
  # DEBUG this => D#1
  # DEBUG this => D#151
  _84 = &MEM[(const struct basic_string *)__x_245 + 64B].D.13615._M_local_buf;
  if (_83 != _84)
    goto <bb 30>;
  else
    goto <bb 31>;

  <bb 30>:
  # DEBUG D#120 => D#151->D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#151
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#151
  # DEBUG this => D#1
  # DEBUG this => D#151
  # DEBUG D#117 => &D#151->_M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _83
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _83
  # DEBUG this => D#111
  # DEBUG D.70241 => D#112
  operator delete (_83);

  <bb 31>:
  # DEBUG D#121 => &D#151->_M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_245 + 64] ={v} {CLOBBER};
  # DEBUG D#150 => &D#667->first
  # DEBUG this => D#150
  # DEBUG this => D#150
  # DEBUG this => D#150
  _85 = MEM[(char * *)__x_245 + 32B];
  # DEBUG D#1 => D#150
  # DEBUG this => D#1
  # DEBUG this => D#150
  _86 = &MEM[(const struct basic_string *)__x_245 + 32B].D.13615._M_local_buf;
  if (_85 != _86)
    goto <bb 32>;
  else
    goto <bb 33>;

  <bb 32>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#150].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#150
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#150
  # DEBUG this => D#1
  # DEBUG this => D#150
  # DEBUG D#117 => &MEM[(struct basic_string *)D#150]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _85
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _85
  # DEBUG this => D#111
  # DEBUG D.70256 => D#112
  operator delete (_85);

  <bb 33>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#150]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_245 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#262 => D#314
  # DEBUG __p => __x_245
  # DEBUG this => D#262
  # DEBUG D#261 => D#262
  # DEBUG this => D#261
  # DEBUG D#260 => 1
  # DEBUG __p => __x_245
  # DEBUG __a => D#259
  # DEBUG __n => D#260
  # DEBUG D#258 => D#260
  # DEBUG D#257 => D#259
  # DEBUG D#255 => D#257
  # DEBUG D#256 => D#258
  # DEBUG __p => __x_245
  # DEBUG this => D#255
  # DEBUG D.70230 => D#256
  operator delete (__x_245);
  # DEBUG __x => __x_80
  # DEBUG __x => __x_80
  if (__x_80 == 0B)
    goto <bb 27>;
  else
    goto <bb 34>;

  <bb 34>:
  goto <bb 29>;

  <bb 35>:
  # DEBUG D#120 => D#151->D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#151
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#151
  # DEBUG this => D#1
  # DEBUG this => D#151
  # DEBUG D#117 => &D#151->_M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _74
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _74
  # DEBUG this => D#111
  # DEBUG D.70192 => D#112
  operator delete (_74);

  <bb 36>:
  # DEBUG D#121 => &D#151->_M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_242 + 64] ={v} {CLOBBER};
  # DEBUG D#150 => &D#668->first
  # DEBUG this => D#150
  # DEBUG this => D#150
  # DEBUG this => D#150
  _76 = MEM[(char * *)__x_242 + 32B];
  # DEBUG D#1 => D#150
  # DEBUG this => D#1
  # DEBUG this => D#150
  _77 = &MEM[(const struct basic_string *)__x_242 + 32B].D.13615._M_local_buf;
  if (_76 != _77)
    goto <bb 37>;
  else
    goto <bb 38>;

  <bb 37>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#150].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#150
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#150
  # DEBUG this => D#1
  # DEBUG this => D#150
  # DEBUG D#117 => &MEM[(struct basic_string *)D#150]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _76
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _76
  # DEBUG this => D#111
  # DEBUG D.70207 => D#112
  operator delete (_76);

  <bb 38>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#150]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_242 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#262 => D#314
  # DEBUG __p => __x_242
  # DEBUG this => D#262
  # DEBUG D#261 => D#262
  # DEBUG this => D#261
  # DEBUG D#260 => 1
  # DEBUG __p => __x_242
  # DEBUG __a => D#259
  # DEBUG __n => D#260
  # DEBUG D#258 => D#260
  # DEBUG D#257 => D#259
  # DEBUG D#255 => D#257
  # DEBUG D#256 => D#258
  # DEBUG __p => __x_242
  # DEBUG this => D#255
  # DEBUG D.70181 => D#256
  operator delete (__x_242);
  # DEBUG __x => __x_71
  # DEBUG __x => __x_71
  if (__x_71 == 0B)
    goto <bb 24>;
  else
    goto <bb 39>;

  <bb 39>:
  goto <bb 26>;

  <bb 40>:
  # DEBUG D#120 => D#151->D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#151
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#151
  # DEBUG this => D#1
  # DEBUG this => D#151
  # DEBUG D#117 => &D#151->_M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _65
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _65
  # DEBUG this => D#111
  # DEBUG D.70143 => D#112
  operator delete (_65);

  <bb 41>:
  # DEBUG D#121 => &D#151->_M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_239 + 64] ={v} {CLOBBER};
  # DEBUG D#150 => &D#669->first
  # DEBUG this => D#150
  # DEBUG this => D#150
  # DEBUG this => D#150
  _67 = MEM[(char * *)__x_239 + 32B];
  # DEBUG D#1 => D#150
  # DEBUG this => D#1
  # DEBUG this => D#150
  _68 = &MEM[(const struct basic_string *)__x_239 + 32B].D.13615._M_local_buf;
  if (_67 != _68)
    goto <bb 42>;
  else
    goto <bb 43>;

  <bb 42>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#150].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#150
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#150
  # DEBUG this => D#1
  # DEBUG this => D#150
  # DEBUG D#117 => &MEM[(struct basic_string *)D#150]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _67
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _67
  # DEBUG this => D#111
  # DEBUG D.70158 => D#112
  operator delete (_67);

  <bb 43>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#150]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_239 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#262 => D#314
  # DEBUG __p => __x_239
  # DEBUG this => D#262
  # DEBUG D#261 => D#262
  # DEBUG this => D#261
  # DEBUG D#260 => 1
  # DEBUG __p => __x_239
  # DEBUG __a => D#259
  # DEBUG __n => D#260
  # DEBUG D#258 => D#260
  # DEBUG D#257 => D#259
  # DEBUG D#255 => D#257
  # DEBUG D#256 => D#258
  # DEBUG __p => __x_239
  # DEBUG this => D#255
  # DEBUG D.70132 => D#256
  operator delete (__x_239);
  # DEBUG __x => __x_62
  # DEBUG __x => __x_62
  if (__x_62 == 0B)
    goto <bb 21>;
  else
    goto <bb 44>;

  <bb 44>:
  goto <bb 23>;

  <bb 45>:
  # DEBUG D#120 => D#151->D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#151
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#151
  # DEBUG this => D#1
  # DEBUG this => D#151
  # DEBUG D#117 => &D#151->_M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _56
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _56
  # DEBUG this => D#111
  # DEBUG D.70094 => D#112
  operator delete (_56);

  <bb 46>:
  # DEBUG D#121 => &D#151->_M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_218 + 64] ={v} {CLOBBER};
  # DEBUG D#150 => &D#670->first
  # DEBUG this => D#150
  # DEBUG this => D#150
  # DEBUG this => D#150
  _58 = MEM[(char * *)__x_218 + 32B];
  # DEBUG D#1 => D#150
  # DEBUG this => D#1
  # DEBUG this => D#150
  _59 = &MEM[(const struct basic_string *)__x_218 + 32B].D.13615._M_local_buf;
  if (_58 != _59)
    goto <bb 47>;
  else
    goto <bb 48>;

  <bb 47>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#150].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#150
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#150
  # DEBUG this => D#1
  # DEBUG this => D#150
  # DEBUG D#117 => &MEM[(struct basic_string *)D#150]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _58
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _58
  # DEBUG this => D#111
  # DEBUG D.70109 => D#112
  operator delete (_58);

  <bb 48>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#150]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_218 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#262 => D#314
  # DEBUG __p => __x_218
  # DEBUG this => D#262
  # DEBUG D#261 => D#262
  # DEBUG this => D#261
  # DEBUG D#260 => 1
  # DEBUG __p => __x_218
  # DEBUG __a => D#259
  # DEBUG __n => D#260
  # DEBUG D#258 => D#260
  # DEBUG D#257 => D#259
  # DEBUG D#255 => D#257
  # DEBUG D#256 => D#258
  # DEBUG __p => __x_218
  # DEBUG this => D#255
  # DEBUG D.70083 => D#256
  operator delete (__x_218);
  # DEBUG __x => __x_53
  # DEBUG __x => __x_53
  if (__x_53 == 0B)
    goto <bb 18>;
  else
    goto <bb 49>;

  <bb 49>:
  goto <bb 20>;

  <bb 50>:
  # DEBUG D#120 => D#151->D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#151
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#151
  # DEBUG this => D#1
  # DEBUG this => D#151
  # DEBUG D#117 => &D#151->_M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _47
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _47
  # DEBUG this => D#111
  # DEBUG D.70045 => D#112
  operator delete (_47);

  <bb 51>:
  # DEBUG D#121 => &D#151->_M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_227 + 64] ={v} {CLOBBER};
  # DEBUG D#150 => &D#671->first
  # DEBUG this => D#150
  # DEBUG this => D#150
  # DEBUG this => D#150
  _49 = MEM[(char * *)__x_227 + 32B];
  # DEBUG D#1 => D#150
  # DEBUG this => D#1
  # DEBUG this => D#150
  _50 = &MEM[(const struct basic_string *)__x_227 + 32B].D.13615._M_local_buf;
  if (_49 != _50)
    goto <bb 52>;
  else
    goto <bb 53>;

  <bb 52>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#150].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#150
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#150
  # DEBUG this => D#1
  # DEBUG this => D#150
  # DEBUG D#117 => &MEM[(struct basic_string *)D#150]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _49
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _49
  # DEBUG this => D#111
  # DEBUG D.70060 => D#112
  operator delete (_49);

  <bb 53>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#150]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_227 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#262 => D#314
  # DEBUG __p => __x_227
  # DEBUG this => D#262
  # DEBUG D#261 => D#262
  # DEBUG this => D#261
  # DEBUG D#260 => 1
  # DEBUG __p => __x_227
  # DEBUG __a => D#259
  # DEBUG __n => D#260
  # DEBUG D#258 => D#260
  # DEBUG D#257 => D#259
  # DEBUG D#255 => D#257
  # DEBUG D#256 => D#258
  # DEBUG __p => __x_227
  # DEBUG this => D#255
  # DEBUG D.70034 => D#256
  operator delete (__x_227);
  # DEBUG __x => __x_44
  # DEBUG __x => __x_44
  if (__x_44 == 0B)
    goto <bb 15>;
  else
    goto <bb 54>;

  <bb 54>:
  goto <bb 17>;

  <bb 55>:
  # DEBUG D#120 => D#151->D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#151
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#151
  # DEBUG this => D#1
  # DEBUG this => D#151
  # DEBUG D#117 => &D#151->_M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _38
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _38
  # DEBUG this => D#111
  # DEBUG D.69996 => D#112
  operator delete (_38);

  <bb 56>:
  # DEBUG D#121 => &D#151->_M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_236 + 64] ={v} {CLOBBER};
  # DEBUG D#150 => &D#672->first
  # DEBUG this => D#150
  # DEBUG this => D#150
  # DEBUG this => D#150
  _40 = MEM[(char * *)__x_236 + 32B];
  # DEBUG D#1 => D#150
  # DEBUG this => D#1
  # DEBUG this => D#150
  _41 = &MEM[(const struct basic_string *)__x_236 + 32B].D.13615._M_local_buf;
  if (_40 != _41)
    goto <bb 57>;
  else
    goto <bb 58>;

  <bb 57>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#150].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#150
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#150
  # DEBUG this => D#1
  # DEBUG this => D#150
  # DEBUG D#117 => &MEM[(struct basic_string *)D#150]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _40
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _40
  # DEBUG this => D#111
  # DEBUG D.70011 => D#112
  operator delete (_40);

  <bb 58>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#150]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_236 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#262 => D#314
  # DEBUG __p => __x_236
  # DEBUG this => D#262
  # DEBUG D#261 => D#262
  # DEBUG this => D#261
  # DEBUG D#260 => 1
  # DEBUG __p => __x_236
  # DEBUG __a => D#259
  # DEBUG __n => D#260
  # DEBUG D#258 => D#260
  # DEBUG D#257 => D#259
  # DEBUG D#255 => D#257
  # DEBUG D#256 => D#258
  # DEBUG __p => __x_236
  # DEBUG this => D#255
  # DEBUG D.69985 => D#256
  operator delete (__x_236);
  # DEBUG __x => __x_35
  # DEBUG __x => __x_35
  if (__x_35 == 0B)
    goto <bb 12>;
  else
    goto <bb 59>;

  <bb 59>:
  goto <bb 14>;

  <bb 60>:
  # DEBUG D#120 => D#151->D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#151
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#151
  # DEBUG this => D#1
  # DEBUG this => D#151
  # DEBUG D#117 => &D#151->_M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _29
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _29
  # DEBUG this => D#111
  # DEBUG D.69947 => D#112
  operator delete (_29);

  <bb 61>:
  # DEBUG D#121 => &D#151->_M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_234 + 64] ={v} {CLOBBER};
  # DEBUG D#150 => &D#673->first
  # DEBUG this => D#150
  # DEBUG this => D#150
  # DEBUG this => D#150
  _31 = MEM[(char * *)__x_234 + 32B];
  # DEBUG D#1 => D#150
  # DEBUG this => D#1
  # DEBUG this => D#150
  _32 = &MEM[(const struct basic_string *)__x_234 + 32B].D.13615._M_local_buf;
  if (_31 != _32)
    goto <bb 62>;
  else
    goto <bb 63>;

  <bb 62>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#150].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#150
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#150
  # DEBUG this => D#1
  # DEBUG this => D#150
  # DEBUG D#117 => &MEM[(struct basic_string *)D#150]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _31
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _31
  # DEBUG this => D#111
  # DEBUG D.69962 => D#112
  operator delete (_31);

  <bb 63>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#150]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_234 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#262 => D#314
  # DEBUG __p => __x_234
  # DEBUG this => D#262
  # DEBUG D#261 => D#262
  # DEBUG this => D#261
  # DEBUG D#260 => 1
  # DEBUG __p => __x_234
  # DEBUG __a => D#259
  # DEBUG __n => D#260
  # DEBUG D#258 => D#260
  # DEBUG D#257 => D#259
  # DEBUG D#255 => D#257
  # DEBUG D#256 => D#258
  # DEBUG __p => __x_234
  # DEBUG this => D#255
  # DEBUG D.69936 => D#256
  operator delete (__x_234);
  # DEBUG __x => __x_26
  # DEBUG __x => __x_26
  if (__x_26 == 0B)
    goto <bb 9>;
  else
    goto <bb 64>;

  <bb 64>:
  goto <bb 11>;

  <bb 65>:
  # DEBUG D#120 => D#151->D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#151
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#151
  # DEBUG this => D#1
  # DEBUG this => D#151
  # DEBUG D#117 => &D#151->_M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _7
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _7
  # DEBUG this => D#111
  # DEBUG D.69898 => D#112
  operator delete (_7);

  <bb 66>:
  # DEBUG D#121 => &D#151->_M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_232 + 64] ={v} {CLOBBER};
  # DEBUG D#150 => &D#674->first
  # DEBUG this => D#150
  # DEBUG this => D#150
  # DEBUG this => D#150
  _22 = MEM[(char * *)__x_232 + 32B];
  # DEBUG D#1 => D#150
  # DEBUG this => D#1
  # DEBUG this => D#150
  _23 = &MEM[(const struct basic_string *)__x_232 + 32B].D.13615._M_local_buf;
  if (_22 != _23)
    goto <bb 67>;
  else
    goto <bb 68>;

  <bb 67>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#150].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#150
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#150
  # DEBUG this => D#1
  # DEBUG this => D#150
  # DEBUG D#117 => &MEM[(struct basic_string *)D#150]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _22
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _22
  # DEBUG this => D#111
  # DEBUG D.69913 => D#112
  operator delete (_22);

  <bb 68>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#150]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_232 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#262 => D#314
  # DEBUG __p => __x_232
  # DEBUG this => D#262
  # DEBUG D#261 => D#262
  # DEBUG this => D#261
  # DEBUG D#260 => 1
  # DEBUG __p => __x_232
  # DEBUG __a => D#259
  # DEBUG __n => D#260
  # DEBUG D#258 => D#260
  # DEBUG D#257 => D#259
  # DEBUG D#255 => D#257
  # DEBUG D#256 => D#258
  # DEBUG __p => __x_232
  # DEBUG this => D#255
  # DEBUG D.69887 => D#256
  operator delete (__x_232);
  # DEBUG __x => __x_18
  # DEBUG __x => __x_18
  if (__x_18 == 0B)
    goto <bb 6>;
  else
    goto <bb 69>;

  <bb 69>:
  goto <bb 8>;

  <bb 70>:
  # DEBUG D#120 => D#151->D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#151
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#151
  # DEBUG this => D#1
  # DEBUG this => D#151
  # DEBUG D#117 => &D#151->_M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _13
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _13
  # DEBUG this => D#111
  # DEBUG D.69849 => D#112
  operator delete (_13);

  <bb 71>:
  # DEBUG D#121 => &D#151->_M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_225 + 64] ={v} {CLOBBER};
  # DEBUG D#150 => &D#675->first
  # DEBUG this => D#150
  # DEBUG this => D#150
  # DEBUG this => D#150
  _15 = MEM[(char * *)__x_225 + 32B];
  # DEBUG D#1 => D#150
  # DEBUG this => D#1
  # DEBUG this => D#150
  _16 = &MEM[(const struct basic_string *)__x_225 + 32B].D.13615._M_local_buf;
  if (_15 != _16)
    goto <bb 72>;
  else
    goto <bb 73>;

  <bb 72>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#150].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#150
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#150
  # DEBUG this => D#1
  # DEBUG this => D#150
  # DEBUG D#117 => &MEM[(struct basic_string *)D#150]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _15
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _15
  # DEBUG this => D#111
  # DEBUG D.69864 => D#112
  operator delete (_15);

  <bb 73>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#150]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_225 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#262 => D#314
  # DEBUG __p => __x_225
  # DEBUG this => D#262
  # DEBUG D#261 => D#262
  # DEBUG this => D#261
  # DEBUG D#260 => 1
  # DEBUG __p => __x_225
  # DEBUG __a => D#259
  # DEBUG __n => D#260
  # DEBUG D#258 => D#260
  # DEBUG D#257 => D#259
  # DEBUG D#255 => D#257
  # DEBUG D#256 => D#258
  # DEBUG __p => __x_225
  # DEBUG this => D#255
  # DEBUG D.65134 => D#256
  operator delete (__x_225);
  # DEBUG __x => __x_10
  # DEBUG __x => __x_10
  if (__x_10 == 0B)
    goto <bb 3>;
  else
    goto <bb 74>;

  <bb 74>:
  goto <bb 5>;

}



;; Function void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, int>; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, int> >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, int> >*] (_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_iESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E, funcdef_no=2184, decl_uid=37891, cgraph_uid=683, symbol_order=684)

Trying loop 1 as candidate
loop 1 is not innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is not innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is not innermost
loop is not parallel according to graphite
Trying loop 4 as candidate
loop 4 is not innermost
loop is not parallel according to graphite
Trying loop 5 as candidate
loop 5 is not innermost
loop is not parallel according to graphite
Trying loop 6 as candidate
loop 6 is not innermost
loop is not parallel according to graphite
Trying loop 7 as candidate
loop 7 is not innermost
loop is not parallel according to graphite
Trying loop 8 as candidate
loop 8 is not innermost
loop is not parallel according to graphite
Trying loop 9 as candidate
loop 9 is innermost
loop is not parallel according to graphite
void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, int>; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, int> >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, int> >*] (struct _Rb_tree * const this, struct _Rb_tree_node * __x)
{
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  char * const _7;
  char * const _11;
  const char * _12;
  const char * _16;
  char * const _21;
  const char * _22;
  char * const _27;
  const char * _28;
  char * const _33;
  const char * _34;
  char * const _39;
  const char * _40;
  char * const _45;
  const char * _46;
  char * const _51;
  const char * _52;
  struct _Rb_tree_node_base * _54;
  char * const _57;
  const char * _58;

  <bb 2>:
  # DEBUG __x => __x_3(D)
  if (__x_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  return;

  <bb 4>:

  <bb 5>:
  # __x_149 = PHI <__x_3(D)(4), __x_10(56)>
  # DEBUG __x => __x_149
  __x_9 = MEM[(struct _Rb_tree_node_base * *)__x_149 + 24B];
  # DEBUG D#33 => __x_149
  # DEBUG __x => D#33
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_9
  # DEBUG __x => __x_9
  if (__x_9 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  __x_10 = MEM[(struct _Rb_tree_node_base * *)__x_149 + 16B];
  # DEBUG D#34 => __x_149
  # DEBUG __x => D#34
  # DEBUG __y => NULL
  # DEBUG D#324 => this_6(D)
  # DEBUG __p => __x_149
  # DEBUG this => D#324
  # DEBUG D#323 => D#324
  # DEBUG D#322 => D#324
  # DEBUG D#321 => D#322
  # DEBUG __p => __x_149
  # DEBUG this => D#321
  # DEBUG D#320 => D#321
  # DEBUG this => __x_149
  # DEBUG D#319 => &__x_149->_M_value_field
  # DEBUG __r => D#319
  # DEBUG D#318 => D#320
  # DEBUG this => D#318
  # DEBUG D#317 => D#318
  # DEBUG this => D#317
  # DEBUG this => NULL
  # DEBUG D.65159 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#319
  # DEBUG this => D#154
  # DEBUG this => D#319
  # DEBUG D#153 => &D#319->first
  # DEBUG this => D#153
  # DEBUG this => D#153
  # DEBUG this => D#153
  _11 = MEM[(char * *)__x_149 + 32B];
  # DEBUG D#1 => D#153
  # DEBUG this => D#1
  # DEBUG this => D#153
  _12 = &MEM[(const struct basic_string *)__x_149 + 32B].D.13615._M_local_buf;
  if (_11 != _12)
    goto <bb 54>;
  else
    goto <bb 55>;

  <bb 7>:

  <bb 8>:
  # __x_152 = PHI <__x_9(7), __x_14(53)>
  # DEBUG __x => __x_152
  __x_13 = MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B];
  # DEBUG D#33 => __x_152
  # DEBUG __x => D#33
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_13
  # DEBUG __x => __x_13
  if (__x_13 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  __x_14 = MEM[(struct _Rb_tree_node_base * *)__x_152 + 16B];
  # DEBUG D#34 => __x_152
  # DEBUG __x => D#34
  # DEBUG __y => NULL
  # DEBUG D#324 => this_6(D)
  # DEBUG __p => __x_152
  # DEBUG this => D#324
  # DEBUG D#323 => D#324
  # DEBUG D#322 => D#324
  # DEBUG D#321 => D#322
  # DEBUG __p => __x_152
  # DEBUG this => D#321
  # DEBUG D#320 => D#321
  # DEBUG this => __x_152
  # DEBUG D#319 => &__x_152->_M_value_field
  # DEBUG __r => D#319
  # DEBUG D#318 => D#320
  # DEBUG this => D#318
  # DEBUG D#317 => D#318
  # DEBUG this => D#317
  # DEBUG this => NULL
  # DEBUG D.65159 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#319
  # DEBUG this => D#154
  # DEBUG this => D#319
  # DEBUG D#153 => &D#319->first
  # DEBUG this => D#153
  # DEBUG this => D#153
  # DEBUG this => D#153
  _7 = MEM[(char * *)__x_152 + 32B];
  # DEBUG D#1 => D#153
  # DEBUG this => D#1
  # DEBUG this => D#153
  _16 = &MEM[(const struct basic_string *)__x_152 + 32B].D.13615._M_local_buf;
  if (_7 != _16)
    goto <bb 51>;
  else
    goto <bb 52>;

  <bb 10>:

  <bb 11>:
  # __x_155 = PHI <__x_13(10), __x_19(50)>
  # DEBUG __x => __x_155
  __x_18 = MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B];
  # DEBUG D#33 => __x_155
  # DEBUG __x => D#33
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_18
  # DEBUG __x => __x_18
  if (__x_18 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  __x_19 = MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B];
  # DEBUG D#34 => __x_155
  # DEBUG __x => D#34
  # DEBUG __y => NULL
  # DEBUG D#324 => this_6(D)
  # DEBUG __p => __x_155
  # DEBUG this => D#324
  # DEBUG D#323 => D#324
  # DEBUG D#322 => D#324
  # DEBUG D#321 => D#322
  # DEBUG __p => __x_155
  # DEBUG this => D#321
  # DEBUG D#320 => D#321
  # DEBUG this => __x_155
  # DEBUG D#319 => &__x_155->_M_value_field
  # DEBUG __r => D#319
  # DEBUG D#318 => D#320
  # DEBUG this => D#318
  # DEBUG D#317 => D#318
  # DEBUG this => D#317
  # DEBUG this => NULL
  # DEBUG D.65159 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#319
  # DEBUG this => D#154
  # DEBUG this => D#319
  # DEBUG D#153 => &D#319->first
  # DEBUG this => D#153
  # DEBUG this => D#153
  # DEBUG this => D#153
  _21 = MEM[(char * *)__x_155 + 32B];
  # DEBUG D#1 => D#153
  # DEBUG this => D#1
  # DEBUG this => D#153
  _22 = &MEM[(const struct basic_string *)__x_155 + 32B].D.13615._M_local_buf;
  if (_21 != _22)
    goto <bb 48>;
  else
    goto <bb 49>;

  <bb 13>:

  <bb 14>:
  # __x_158 = PHI <__x_18(13), __x_25(47)>
  # DEBUG __x => __x_158
  __x_24 = MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B];
  # DEBUG D#33 => __x_158
  # DEBUG __x => D#33
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_24
  # DEBUG __x => __x_24
  if (__x_24 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  __x_25 = MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B];
  # DEBUG D#34 => __x_158
  # DEBUG __x => D#34
  # DEBUG __y => NULL
  # DEBUG D#324 => this_6(D)
  # DEBUG __p => __x_158
  # DEBUG this => D#324
  # DEBUG D#323 => D#324
  # DEBUG D#322 => D#324
  # DEBUG D#321 => D#322
  # DEBUG __p => __x_158
  # DEBUG this => D#321
  # DEBUG D#320 => D#321
  # DEBUG this => __x_158
  # DEBUG D#319 => &__x_158->_M_value_field
  # DEBUG __r => D#319
  # DEBUG D#318 => D#320
  # DEBUG this => D#318
  # DEBUG D#317 => D#318
  # DEBUG this => D#317
  # DEBUG this => NULL
  # DEBUG D.65159 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#319
  # DEBUG this => D#154
  # DEBUG this => D#319
  # DEBUG D#153 => &D#319->first
  # DEBUG this => D#153
  # DEBUG this => D#153
  # DEBUG this => D#153
  _27 = MEM[(char * *)__x_158 + 32B];
  # DEBUG D#1 => D#153
  # DEBUG this => D#1
  # DEBUG this => D#153
  _28 = &MEM[(const struct basic_string *)__x_158 + 32B].D.13615._M_local_buf;
  if (_27 != _28)
    goto <bb 45>;
  else
    goto <bb 46>;

  <bb 16>:

  <bb 17>:
  # __x_161 = PHI <__x_24(16), __x_31(44)>
  # DEBUG __x => __x_161
  __x_30 = MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B];
  # DEBUG D#33 => __x_161
  # DEBUG __x => D#33
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_30
  # DEBUG __x => __x_30
  if (__x_30 == 0B)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  __x_31 = MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B];
  # DEBUG D#34 => __x_161
  # DEBUG __x => D#34
  # DEBUG __y => NULL
  # DEBUG D#324 => this_6(D)
  # DEBUG __p => __x_161
  # DEBUG this => D#324
  # DEBUG D#323 => D#324
  # DEBUG D#322 => D#324
  # DEBUG D#321 => D#322
  # DEBUG __p => __x_161
  # DEBUG this => D#321
  # DEBUG D#320 => D#321
  # DEBUG this => __x_161
  # DEBUG D#319 => &__x_161->_M_value_field
  # DEBUG __r => D#319
  # DEBUG D#318 => D#320
  # DEBUG this => D#318
  # DEBUG D#317 => D#318
  # DEBUG this => D#317
  # DEBUG this => NULL
  # DEBUG D.65159 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#319
  # DEBUG this => D#154
  # DEBUG this => D#319
  # DEBUG D#153 => &D#319->first
  # DEBUG this => D#153
  # DEBUG this => D#153
  # DEBUG this => D#153
  _33 = MEM[(char * *)__x_161 + 32B];
  # DEBUG D#1 => D#153
  # DEBUG this => D#1
  # DEBUG this => D#153
  _34 = &MEM[(const struct basic_string *)__x_161 + 32B].D.13615._M_local_buf;
  if (_33 != _34)
    goto <bb 42>;
  else
    goto <bb 43>;

  <bb 19>:

  <bb 20>:
  # __x_164 = PHI <__x_30(19), __x_37(41)>
  # DEBUG __x => __x_164
  __x_36 = MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B];
  # DEBUG D#33 => __x_164
  # DEBUG __x => D#33
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_36
  # DEBUG __x => __x_36
  if (__x_36 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  __x_37 = MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B];
  # DEBUG D#34 => __x_164
  # DEBUG __x => D#34
  # DEBUG __y => NULL
  # DEBUG D#324 => this_6(D)
  # DEBUG __p => __x_164
  # DEBUG this => D#324
  # DEBUG D#323 => D#324
  # DEBUG D#322 => D#324
  # DEBUG D#321 => D#322
  # DEBUG __p => __x_164
  # DEBUG this => D#321
  # DEBUG D#320 => D#321
  # DEBUG this => __x_164
  # DEBUG D#319 => &__x_164->_M_value_field
  # DEBUG __r => D#319
  # DEBUG D#318 => D#320
  # DEBUG this => D#318
  # DEBUG D#317 => D#318
  # DEBUG this => D#317
  # DEBUG this => NULL
  # DEBUG D.65159 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#319
  # DEBUG this => D#154
  # DEBUG this => D#319
  # DEBUG D#153 => &D#319->first
  # DEBUG this => D#153
  # DEBUG this => D#153
  # DEBUG this => D#153
  _39 = MEM[(char * *)__x_164 + 32B];
  # DEBUG D#1 => D#153
  # DEBUG this => D#1
  # DEBUG this => D#153
  _40 = &MEM[(const struct basic_string *)__x_164 + 32B].D.13615._M_local_buf;
  if (_39 != _40)
    goto <bb 39>;
  else
    goto <bb 40>;

  <bb 22>:

  <bb 23>:
  # __x_167 = PHI <__x_36(22), __x_43(38)>
  # DEBUG __x => __x_167
  __x_42 = MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B];
  # DEBUG D#33 => __x_167
  # DEBUG __x => D#33
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_42
  # DEBUG __x => __x_42
  if (__x_42 == 0B)
    goto <bb 24>;
  else
    goto <bb 25>;

  <bb 24>:
  __x_43 = MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B];
  # DEBUG D#34 => __x_167
  # DEBUG __x => D#34
  # DEBUG __y => NULL
  # DEBUG D#324 => this_6(D)
  # DEBUG __p => __x_167
  # DEBUG this => D#324
  # DEBUG D#323 => D#324
  # DEBUG D#322 => D#324
  # DEBUG D#321 => D#322
  # DEBUG __p => __x_167
  # DEBUG this => D#321
  # DEBUG D#320 => D#321
  # DEBUG this => __x_167
  # DEBUG D#319 => &__x_167->_M_value_field
  # DEBUG __r => D#319
  # DEBUG D#318 => D#320
  # DEBUG this => D#318
  # DEBUG D#317 => D#318
  # DEBUG this => D#317
  # DEBUG this => NULL
  # DEBUG D.65159 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#319
  # DEBUG this => D#154
  # DEBUG this => D#319
  # DEBUG D#153 => &D#319->first
  # DEBUG this => D#153
  # DEBUG this => D#153
  # DEBUG this => D#153
  _45 = MEM[(char * *)__x_167 + 32B];
  # DEBUG D#1 => D#153
  # DEBUG this => D#1
  # DEBUG this => D#153
  _46 = &MEM[(const struct basic_string *)__x_167 + 32B].D.13615._M_local_buf;
  if (_45 != _46)
    goto <bb 36>;
  else
    goto <bb 37>;

  <bb 25>:

  <bb 26>:
  # __x_170 = PHI <__x_42(25), __x_49(35)>
  # DEBUG __x => __x_170
  __x_48 = MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B];
  # DEBUG D#33 => __x_170
  # DEBUG __x => D#33
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_48
  # DEBUG __x => __x_48
  if (__x_48 == 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  __x_49 = MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B];
  # DEBUG D#34 => __x_170
  # DEBUG __x => D#34
  # DEBUG __y => NULL
  # DEBUG D#324 => this_6(D)
  # DEBUG __p => __x_170
  # DEBUG this => D#324
  # DEBUG D#323 => D#324
  # DEBUG D#322 => D#324
  # DEBUG D#321 => D#322
  # DEBUG __p => __x_170
  # DEBUG this => D#321
  # DEBUG D#320 => D#321
  # DEBUG this => __x_170
  # DEBUG D#319 => &__x_170->_M_value_field
  # DEBUG __r => D#319
  # DEBUG D#318 => D#320
  # DEBUG this => D#318
  # DEBUG D#317 => D#318
  # DEBUG this => D#317
  # DEBUG this => NULL
  # DEBUG D.65159 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#319
  # DEBUG this => D#154
  # DEBUG this => D#319
  # DEBUG D#153 => &D#319->first
  # DEBUG this => D#153
  # DEBUG this => D#153
  # DEBUG this => D#153
  _51 = MEM[(char * *)__x_170 + 32B];
  # DEBUG D#1 => D#153
  # DEBUG this => D#1
  # DEBUG this => D#153
  _52 = &MEM[(const struct basic_string *)__x_170 + 32B].D.13615._M_local_buf;
  if (_51 != _52)
    goto <bb 33>;
  else
    goto <bb 34>;

  <bb 28>:

  <bb 29>:
  # __x_173 = PHI <__x_48(28), __x_55(32)>
  # DEBUG __x => __x_173
  _54 = MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B];
  # DEBUG D#33 => __x_173
  # DEBUG __x => D#33
  std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, int>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, int> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> > >::_M_erase (this_6(D), _54);
  __x_55 = MEM[(struct _Rb_tree_node_base * *)__x_173 + 16B];
  # DEBUG D#34 => __x_173
  # DEBUG __x => D#34
  # DEBUG __y => NULL
  # DEBUG D#324 => this_6(D)
  # DEBUG __p => __x_173
  # DEBUG this => D#324
  # DEBUG D#323 => D#324
  # DEBUG D#322 => D#324
  # DEBUG D#321 => D#322
  # DEBUG __p => __x_173
  # DEBUG this => D#321
  # DEBUG D#320 => D#321
  # DEBUG this => __x_173
  # DEBUG D#319 => &__x_173->_M_value_field
  # DEBUG __r => D#319
  # DEBUG D#318 => D#320
  # DEBUG this => D#318
  # DEBUG D#317 => D#318
  # DEBUG this => D#317
  # DEBUG this => NULL
  # DEBUG D.65159 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#319
  # DEBUG this => D#154
  # DEBUG this => D#319
  # DEBUG D#153 => &D#319->first
  # DEBUG this => D#153
  # DEBUG this => D#153
  # DEBUG this => D#153
  _57 = MEM[(char * *)__x_173 + 32B];
  # DEBUG D#1 => D#153
  # DEBUG this => D#1
  # DEBUG this => D#153
  _58 = &MEM[(const struct basic_string *)__x_173 + 32B].D.13615._M_local_buf;
  if (_57 != _58)
    goto <bb 30>;
  else
    goto <bb 31>;

  <bb 30>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#153].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#153
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#153
  # DEBUG this => D#1
  # DEBUG this => D#153
  # DEBUG D#117 => &MEM[(struct basic_string *)D#153]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _57
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _57
  # DEBUG this => D#111
  # DEBUG D.70553 => D#112
  operator delete (_57);

  <bb 31>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#153]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_173 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#270 => D#323
  # DEBUG __p => __x_173
  # DEBUG this => D#270
  # DEBUG D#269 => D#270
  # DEBUG this => D#269
  # DEBUG D#268 => 1
  # DEBUG __p => __x_173
  # DEBUG __a => D#267
  # DEBUG __n => D#268
  # DEBUG D#266 => D#268
  # DEBUG D#265 => D#267
  # DEBUG D#263 => D#265
  # DEBUG D#264 => D#266
  # DEBUG __p => __x_173
  # DEBUG this => D#263
  # DEBUG D.70566 => D#264
  operator delete (__x_173);
  # DEBUG __x => __x_55
  if (__x_55 == 0B)
    goto <bb 27>;
  else
    goto <bb 32>;

  <bb 32>:
  goto <bb 29>;

  <bb 33>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#153].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#153
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#153
  # DEBUG this => D#1
  # DEBUG this => D#153
  # DEBUG D#117 => &MEM[(struct basic_string *)D#153]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _51
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _51
  # DEBUG this => D#111
  # DEBUG D.70520 => D#112
  operator delete (_51);

  <bb 34>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#153]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_170 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#270 => D#323
  # DEBUG __p => __x_170
  # DEBUG this => D#270
  # DEBUG D#269 => D#270
  # DEBUG this => D#269
  # DEBUG D#268 => 1
  # DEBUG __p => __x_170
  # DEBUG __a => D#267
  # DEBUG __n => D#268
  # DEBUG D#266 => D#268
  # DEBUG D#265 => D#267
  # DEBUG D#263 => D#265
  # DEBUG D#264 => D#266
  # DEBUG __p => __x_170
  # DEBUG this => D#263
  # DEBUG D.70533 => D#264
  operator delete (__x_170);
  # DEBUG __x => __x_49
  if (__x_49 == 0B)
    goto <bb 24>;
  else
    goto <bb 35>;

  <bb 35>:
  goto <bb 26>;

  <bb 36>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#153].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#153
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#153
  # DEBUG this => D#1
  # DEBUG this => D#153
  # DEBUG D#117 => &MEM[(struct basic_string *)D#153]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _45
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _45
  # DEBUG this => D#111
  # DEBUG D.70487 => D#112
  operator delete (_45);

  <bb 37>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#153]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_167 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#270 => D#323
  # DEBUG __p => __x_167
  # DEBUG this => D#270
  # DEBUG D#269 => D#270
  # DEBUG this => D#269
  # DEBUG D#268 => 1
  # DEBUG __p => __x_167
  # DEBUG __a => D#267
  # DEBUG __n => D#268
  # DEBUG D#266 => D#268
  # DEBUG D#265 => D#267
  # DEBUG D#263 => D#265
  # DEBUG D#264 => D#266
  # DEBUG __p => __x_167
  # DEBUG this => D#263
  # DEBUG D.70500 => D#264
  operator delete (__x_167);
  # DEBUG __x => __x_43
  if (__x_43 == 0B)
    goto <bb 21>;
  else
    goto <bb 38>;

  <bb 38>:
  goto <bb 23>;

  <bb 39>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#153].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#153
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#153
  # DEBUG this => D#1
  # DEBUG this => D#153
  # DEBUG D#117 => &MEM[(struct basic_string *)D#153]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _39
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _39
  # DEBUG this => D#111
  # DEBUG D.70454 => D#112
  operator delete (_39);

  <bb 40>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#153]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_164 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#270 => D#323
  # DEBUG __p => __x_164
  # DEBUG this => D#270
  # DEBUG D#269 => D#270
  # DEBUG this => D#269
  # DEBUG D#268 => 1
  # DEBUG __p => __x_164
  # DEBUG __a => D#267
  # DEBUG __n => D#268
  # DEBUG D#266 => D#268
  # DEBUG D#265 => D#267
  # DEBUG D#263 => D#265
  # DEBUG D#264 => D#266
  # DEBUG __p => __x_164
  # DEBUG this => D#263
  # DEBUG D.70467 => D#264
  operator delete (__x_164);
  # DEBUG __x => __x_37
  if (__x_37 == 0B)
    goto <bb 18>;
  else
    goto <bb 41>;

  <bb 41>:
  goto <bb 20>;

  <bb 42>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#153].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#153
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#153
  # DEBUG this => D#1
  # DEBUG this => D#153
  # DEBUG D#117 => &MEM[(struct basic_string *)D#153]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _33
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _33
  # DEBUG this => D#111
  # DEBUG D.70421 => D#112
  operator delete (_33);

  <bb 43>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#153]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_161 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#270 => D#323
  # DEBUG __p => __x_161
  # DEBUG this => D#270
  # DEBUG D#269 => D#270
  # DEBUG this => D#269
  # DEBUG D#268 => 1
  # DEBUG __p => __x_161
  # DEBUG __a => D#267
  # DEBUG __n => D#268
  # DEBUG D#266 => D#268
  # DEBUG D#265 => D#267
  # DEBUG D#263 => D#265
  # DEBUG D#264 => D#266
  # DEBUG __p => __x_161
  # DEBUG this => D#263
  # DEBUG D.70434 => D#264
  operator delete (__x_161);
  # DEBUG __x => __x_31
  if (__x_31 == 0B)
    goto <bb 15>;
  else
    goto <bb 44>;

  <bb 44>:
  goto <bb 17>;

  <bb 45>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#153].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#153
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#153
  # DEBUG this => D#1
  # DEBUG this => D#153
  # DEBUG D#117 => &MEM[(struct basic_string *)D#153]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _27
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _27
  # DEBUG this => D#111
  # DEBUG D.70388 => D#112
  operator delete (_27);

  <bb 46>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#153]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_158 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#270 => D#323
  # DEBUG __p => __x_158
  # DEBUG this => D#270
  # DEBUG D#269 => D#270
  # DEBUG this => D#269
  # DEBUG D#268 => 1
  # DEBUG __p => __x_158
  # DEBUG __a => D#267
  # DEBUG __n => D#268
  # DEBUG D#266 => D#268
  # DEBUG D#265 => D#267
  # DEBUG D#263 => D#265
  # DEBUG D#264 => D#266
  # DEBUG __p => __x_158
  # DEBUG this => D#263
  # DEBUG D.70401 => D#264
  operator delete (__x_158);
  # DEBUG __x => __x_25
  if (__x_25 == 0B)
    goto <bb 12>;
  else
    goto <bb 47>;

  <bb 47>:
  goto <bb 14>;

  <bb 48>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#153].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#153
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#153
  # DEBUG this => D#1
  # DEBUG this => D#153
  # DEBUG D#117 => &MEM[(struct basic_string *)D#153]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _21
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _21
  # DEBUG this => D#111
  # DEBUG D.70355 => D#112
  operator delete (_21);

  <bb 49>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#153]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_155 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#270 => D#323
  # DEBUG __p => __x_155
  # DEBUG this => D#270
  # DEBUG D#269 => D#270
  # DEBUG this => D#269
  # DEBUG D#268 => 1
  # DEBUG __p => __x_155
  # DEBUG __a => D#267
  # DEBUG __n => D#268
  # DEBUG D#266 => D#268
  # DEBUG D#265 => D#267
  # DEBUG D#263 => D#265
  # DEBUG D#264 => D#266
  # DEBUG __p => __x_155
  # DEBUG this => D#263
  # DEBUG D.70368 => D#264
  operator delete (__x_155);
  # DEBUG __x => __x_19
  if (__x_19 == 0B)
    goto <bb 9>;
  else
    goto <bb 50>;

  <bb 50>:
  goto <bb 11>;

  <bb 51>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#153].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#153
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#153
  # DEBUG this => D#1
  # DEBUG this => D#153
  # DEBUG D#117 => &MEM[(struct basic_string *)D#153]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _7
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _7
  # DEBUG this => D#111
  # DEBUG D.70322 => D#112
  operator delete (_7);

  <bb 52>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#153]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_152 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#270 => D#323
  # DEBUG __p => __x_152
  # DEBUG this => D#270
  # DEBUG D#269 => D#270
  # DEBUG this => D#269
  # DEBUG D#268 => 1
  # DEBUG __p => __x_152
  # DEBUG __a => D#267
  # DEBUG __n => D#268
  # DEBUG D#266 => D#268
  # DEBUG D#265 => D#267
  # DEBUG D#263 => D#265
  # DEBUG D#264 => D#266
  # DEBUG __p => __x_152
  # DEBUG this => D#263
  # DEBUG D.70335 => D#264
  operator delete (__x_152);
  # DEBUG __x => __x_14
  if (__x_14 == 0B)
    goto <bb 6>;
  else
    goto <bb 53>;

  <bb 53>:
  goto <bb 8>;

  <bb 54>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#153].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#153
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#153
  # DEBUG this => D#1
  # DEBUG this => D#153
  # DEBUG D#117 => &MEM[(struct basic_string *)D#153]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _11
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _11
  # DEBUG this => D#111
  # DEBUG D.70289 => D#112
  operator delete (_11);

  <bb 55>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#153]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_149 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#270 => D#323
  # DEBUG __p => __x_149
  # DEBUG this => D#270
  # DEBUG D#269 => D#270
  # DEBUG this => D#269
  # DEBUG D#268 => 1
  # DEBUG __p => __x_149
  # DEBUG __a => D#267
  # DEBUG __n => D#268
  # DEBUG D#266 => D#268
  # DEBUG D#265 => D#267
  # DEBUG D#263 => D#265
  # DEBUG D#264 => D#266
  # DEBUG __p => __x_149
  # DEBUG this => D#263
  # DEBUG D.70302 => D#264
  operator delete (__x_149);
  # DEBUG __x => __x_10
  if (__x_10 == 0B)
    goto <bb 3>;
  else
    goto <bb 56>;

  <bb 56>:
  goto <bb 5>;

}



;; Function void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, double>; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, double> >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, double> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, double> >*] (_ZNSt8_Rb_treeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS5_dESt10_Select1stIS8_ESt4lessIS5_ESaIS8_EE8_M_eraseEPSt13_Rb_tree_nodeIS8_E, funcdef_no=2189, decl_uid=38958, cgraph_uid=688, symbol_order=689)

Trying loop 1 as candidate
loop 1 is not innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is not innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is not innermost
loop is not parallel according to graphite
Trying loop 4 as candidate
loop 4 is not innermost
loop is not parallel according to graphite
Trying loop 5 as candidate
loop 5 is not innermost
loop is not parallel according to graphite
Trying loop 6 as candidate
loop 6 is not innermost
loop is not parallel according to graphite
Trying loop 7 as candidate
loop 7 is not innermost
loop is not parallel according to graphite
Trying loop 8 as candidate
loop 8 is not innermost
loop is not parallel according to graphite
Trying loop 9 as candidate
loop 9 is innermost
loop is not parallel according to graphite
void std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_erase(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type) [with _Key = std::__cxx11::basic_string<char>; _Val = std::pair<const std::__cxx11::basic_string<char>, double>; _KeyOfValue = std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, double> >; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, double> >; std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_Link_type = std::_Rb_tree_node<std::pair<const std::__cxx11::basic_string<char>, double> >*] (struct _Rb_tree * const this, struct _Rb_tree_node * __x)
{
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  char * const _7;
  char * const _11;
  const char * _12;
  const char * _16;
  char * const _21;
  const char * _22;
  char * const _27;
  const char * _28;
  char * const _33;
  const char * _34;
  char * const _39;
  const char * _40;
  char * const _45;
  const char * _46;
  char * const _51;
  const char * _52;
  struct _Rb_tree_node_base * _54;
  char * const _57;
  const char * _58;

  <bb 2>:
  # DEBUG __x => __x_3(D)
  if (__x_3(D) == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  return;

  <bb 4>:

  <bb 5>:
  # __x_149 = PHI <__x_3(D)(4), __x_10(56)>
  # DEBUG __x => __x_149
  __x_9 = MEM[(struct _Rb_tree_node_base * *)__x_149 + 24B];
  # DEBUG D#35 => __x_149
  # DEBUG __x => D#35
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_9
  # DEBUG __x => __x_9
  if (__x_9 == 0B)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  __x_10 = MEM[(struct _Rb_tree_node_base * *)__x_149 + 16B];
  # DEBUG D#36 => __x_149
  # DEBUG __x => D#36
  # DEBUG __y => NULL
  # DEBUG D#333 => this_6(D)
  # DEBUG __p => __x_149
  # DEBUG this => D#333
  # DEBUG D#332 => D#333
  # DEBUG D#331 => D#333
  # DEBUG D#330 => D#331
  # DEBUG __p => __x_149
  # DEBUG this => D#330
  # DEBUG D#329 => D#330
  # DEBUG this => __x_149
  # DEBUG D#328 => &__x_149->_M_value_field
  # DEBUG __r => D#328
  # DEBUG D#327 => D#329
  # DEBUG this => D#327
  # DEBUG D#326 => D#327
  # DEBUG this => D#326
  # DEBUG this => NULL
  # DEBUG D.65308 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#328
  # DEBUG this => D#156
  # DEBUG this => D#328
  # DEBUG D#155 => &D#328->first
  # DEBUG this => D#155
  # DEBUG this => D#155
  # DEBUG this => D#155
  _11 = MEM[(char * *)__x_149 + 32B];
  # DEBUG D#1 => D#155
  # DEBUG this => D#1
  # DEBUG this => D#155
  _12 = &MEM[(const struct basic_string *)__x_149 + 32B].D.13615._M_local_buf;
  if (_11 != _12)
    goto <bb 54>;
  else
    goto <bb 55>;

  <bb 7>:

  <bb 8>:
  # __x_152 = PHI <__x_9(7), __x_14(53)>
  # DEBUG __x => __x_152
  __x_13 = MEM[(struct _Rb_tree_node_base * *)__x_152 + 24B];
  # DEBUG D#35 => __x_152
  # DEBUG __x => D#35
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_13
  # DEBUG __x => __x_13
  if (__x_13 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 9>:
  __x_14 = MEM[(struct _Rb_tree_node_base * *)__x_152 + 16B];
  # DEBUG D#36 => __x_152
  # DEBUG __x => D#36
  # DEBUG __y => NULL
  # DEBUG D#333 => this_6(D)
  # DEBUG __p => __x_152
  # DEBUG this => D#333
  # DEBUG D#332 => D#333
  # DEBUG D#331 => D#333
  # DEBUG D#330 => D#331
  # DEBUG __p => __x_152
  # DEBUG this => D#330
  # DEBUG D#329 => D#330
  # DEBUG this => __x_152
  # DEBUG D#328 => &__x_152->_M_value_field
  # DEBUG __r => D#328
  # DEBUG D#327 => D#329
  # DEBUG this => D#327
  # DEBUG D#326 => D#327
  # DEBUG this => D#326
  # DEBUG this => NULL
  # DEBUG D.65308 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#328
  # DEBUG this => D#156
  # DEBUG this => D#328
  # DEBUG D#155 => &D#328->first
  # DEBUG this => D#155
  # DEBUG this => D#155
  # DEBUG this => D#155
  _7 = MEM[(char * *)__x_152 + 32B];
  # DEBUG D#1 => D#155
  # DEBUG this => D#1
  # DEBUG this => D#155
  _16 = &MEM[(const struct basic_string *)__x_152 + 32B].D.13615._M_local_buf;
  if (_7 != _16)
    goto <bb 51>;
  else
    goto <bb 52>;

  <bb 10>:

  <bb 11>:
  # __x_155 = PHI <__x_13(10), __x_19(50)>
  # DEBUG __x => __x_155
  __x_18 = MEM[(struct _Rb_tree_node_base * *)__x_155 + 24B];
  # DEBUG D#35 => __x_155
  # DEBUG __x => D#35
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_18
  # DEBUG __x => __x_18
  if (__x_18 == 0B)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  __x_19 = MEM[(struct _Rb_tree_node_base * *)__x_155 + 16B];
  # DEBUG D#36 => __x_155
  # DEBUG __x => D#36
  # DEBUG __y => NULL
  # DEBUG D#333 => this_6(D)
  # DEBUG __p => __x_155
  # DEBUG this => D#333
  # DEBUG D#332 => D#333
  # DEBUG D#331 => D#333
  # DEBUG D#330 => D#331
  # DEBUG __p => __x_155
  # DEBUG this => D#330
  # DEBUG D#329 => D#330
  # DEBUG this => __x_155
  # DEBUG D#328 => &__x_155->_M_value_field
  # DEBUG __r => D#328
  # DEBUG D#327 => D#329
  # DEBUG this => D#327
  # DEBUG D#326 => D#327
  # DEBUG this => D#326
  # DEBUG this => NULL
  # DEBUG D.65308 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#328
  # DEBUG this => D#156
  # DEBUG this => D#328
  # DEBUG D#155 => &D#328->first
  # DEBUG this => D#155
  # DEBUG this => D#155
  # DEBUG this => D#155
  _21 = MEM[(char * *)__x_155 + 32B];
  # DEBUG D#1 => D#155
  # DEBUG this => D#1
  # DEBUG this => D#155
  _22 = &MEM[(const struct basic_string *)__x_155 + 32B].D.13615._M_local_buf;
  if (_21 != _22)
    goto <bb 48>;
  else
    goto <bb 49>;

  <bb 13>:

  <bb 14>:
  # __x_158 = PHI <__x_18(13), __x_25(47)>
  # DEBUG __x => __x_158
  __x_24 = MEM[(struct _Rb_tree_node_base * *)__x_158 + 24B];
  # DEBUG D#35 => __x_158
  # DEBUG __x => D#35
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_24
  # DEBUG __x => __x_24
  if (__x_24 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  __x_25 = MEM[(struct _Rb_tree_node_base * *)__x_158 + 16B];
  # DEBUG D#36 => __x_158
  # DEBUG __x => D#36
  # DEBUG __y => NULL
  # DEBUG D#333 => this_6(D)
  # DEBUG __p => __x_158
  # DEBUG this => D#333
  # DEBUG D#332 => D#333
  # DEBUG D#331 => D#333
  # DEBUG D#330 => D#331
  # DEBUG __p => __x_158
  # DEBUG this => D#330
  # DEBUG D#329 => D#330
  # DEBUG this => __x_158
  # DEBUG D#328 => &__x_158->_M_value_field
  # DEBUG __r => D#328
  # DEBUG D#327 => D#329
  # DEBUG this => D#327
  # DEBUG D#326 => D#327
  # DEBUG this => D#326
  # DEBUG this => NULL
  # DEBUG D.65308 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#328
  # DEBUG this => D#156
  # DEBUG this => D#328
  # DEBUG D#155 => &D#328->first
  # DEBUG this => D#155
  # DEBUG this => D#155
  # DEBUG this => D#155
  _27 = MEM[(char * *)__x_158 + 32B];
  # DEBUG D#1 => D#155
  # DEBUG this => D#1
  # DEBUG this => D#155
  _28 = &MEM[(const struct basic_string *)__x_158 + 32B].D.13615._M_local_buf;
  if (_27 != _28)
    goto <bb 45>;
  else
    goto <bb 46>;

  <bb 16>:

  <bb 17>:
  # __x_161 = PHI <__x_24(16), __x_31(44)>
  # DEBUG __x => __x_161
  __x_30 = MEM[(struct _Rb_tree_node_base * *)__x_161 + 24B];
  # DEBUG D#35 => __x_161
  # DEBUG __x => D#35
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_30
  # DEBUG __x => __x_30
  if (__x_30 == 0B)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  __x_31 = MEM[(struct _Rb_tree_node_base * *)__x_161 + 16B];
  # DEBUG D#36 => __x_161
  # DEBUG __x => D#36
  # DEBUG __y => NULL
  # DEBUG D#333 => this_6(D)
  # DEBUG __p => __x_161
  # DEBUG this => D#333
  # DEBUG D#332 => D#333
  # DEBUG D#331 => D#333
  # DEBUG D#330 => D#331
  # DEBUG __p => __x_161
  # DEBUG this => D#330
  # DEBUG D#329 => D#330
  # DEBUG this => __x_161
  # DEBUG D#328 => &__x_161->_M_value_field
  # DEBUG __r => D#328
  # DEBUG D#327 => D#329
  # DEBUG this => D#327
  # DEBUG D#326 => D#327
  # DEBUG this => D#326
  # DEBUG this => NULL
  # DEBUG D.65308 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#328
  # DEBUG this => D#156
  # DEBUG this => D#328
  # DEBUG D#155 => &D#328->first
  # DEBUG this => D#155
  # DEBUG this => D#155
  # DEBUG this => D#155
  _33 = MEM[(char * *)__x_161 + 32B];
  # DEBUG D#1 => D#155
  # DEBUG this => D#1
  # DEBUG this => D#155
  _34 = &MEM[(const struct basic_string *)__x_161 + 32B].D.13615._M_local_buf;
  if (_33 != _34)
    goto <bb 42>;
  else
    goto <bb 43>;

  <bb 19>:

  <bb 20>:
  # __x_164 = PHI <__x_30(19), __x_37(41)>
  # DEBUG __x => __x_164
  __x_36 = MEM[(struct _Rb_tree_node_base * *)__x_164 + 24B];
  # DEBUG D#35 => __x_164
  # DEBUG __x => D#35
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_36
  # DEBUG __x => __x_36
  if (__x_36 == 0B)
    goto <bb 21>;
  else
    goto <bb 22>;

  <bb 21>:
  __x_37 = MEM[(struct _Rb_tree_node_base * *)__x_164 + 16B];
  # DEBUG D#36 => __x_164
  # DEBUG __x => D#36
  # DEBUG __y => NULL
  # DEBUG D#333 => this_6(D)
  # DEBUG __p => __x_164
  # DEBUG this => D#333
  # DEBUG D#332 => D#333
  # DEBUG D#331 => D#333
  # DEBUG D#330 => D#331
  # DEBUG __p => __x_164
  # DEBUG this => D#330
  # DEBUG D#329 => D#330
  # DEBUG this => __x_164
  # DEBUG D#328 => &__x_164->_M_value_field
  # DEBUG __r => D#328
  # DEBUG D#327 => D#329
  # DEBUG this => D#327
  # DEBUG D#326 => D#327
  # DEBUG this => D#326
  # DEBUG this => NULL
  # DEBUG D.65308 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#328
  # DEBUG this => D#156
  # DEBUG this => D#328
  # DEBUG D#155 => &D#328->first
  # DEBUG this => D#155
  # DEBUG this => D#155
  # DEBUG this => D#155
  _39 = MEM[(char * *)__x_164 + 32B];
  # DEBUG D#1 => D#155
  # DEBUG this => D#1
  # DEBUG this => D#155
  _40 = &MEM[(const struct basic_string *)__x_164 + 32B].D.13615._M_local_buf;
  if (_39 != _40)
    goto <bb 39>;
  else
    goto <bb 40>;

  <bb 22>:

  <bb 23>:
  # __x_167 = PHI <__x_36(22), __x_43(38)>
  # DEBUG __x => __x_167
  __x_42 = MEM[(struct _Rb_tree_node_base * *)__x_167 + 24B];
  # DEBUG D#35 => __x_167
  # DEBUG __x => D#35
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_42
  # DEBUG __x => __x_42
  if (__x_42 == 0B)
    goto <bb 24>;
  else
    goto <bb 25>;

  <bb 24>:
  __x_43 = MEM[(struct _Rb_tree_node_base * *)__x_167 + 16B];
  # DEBUG D#36 => __x_167
  # DEBUG __x => D#36
  # DEBUG __y => NULL
  # DEBUG D#333 => this_6(D)
  # DEBUG __p => __x_167
  # DEBUG this => D#333
  # DEBUG D#332 => D#333
  # DEBUG D#331 => D#333
  # DEBUG D#330 => D#331
  # DEBUG __p => __x_167
  # DEBUG this => D#330
  # DEBUG D#329 => D#330
  # DEBUG this => __x_167
  # DEBUG D#328 => &__x_167->_M_value_field
  # DEBUG __r => D#328
  # DEBUG D#327 => D#329
  # DEBUG this => D#327
  # DEBUG D#326 => D#327
  # DEBUG this => D#326
  # DEBUG this => NULL
  # DEBUG D.65308 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#328
  # DEBUG this => D#156
  # DEBUG this => D#328
  # DEBUG D#155 => &D#328->first
  # DEBUG this => D#155
  # DEBUG this => D#155
  # DEBUG this => D#155
  _45 = MEM[(char * *)__x_167 + 32B];
  # DEBUG D#1 => D#155
  # DEBUG this => D#1
  # DEBUG this => D#155
  _46 = &MEM[(const struct basic_string *)__x_167 + 32B].D.13615._M_local_buf;
  if (_45 != _46)
    goto <bb 36>;
  else
    goto <bb 37>;

  <bb 25>:

  <bb 26>:
  # __x_170 = PHI <__x_42(25), __x_49(35)>
  # DEBUG __x => __x_170
  __x_48 = MEM[(struct _Rb_tree_node_base * *)__x_170 + 24B];
  # DEBUG D#35 => __x_170
  # DEBUG __x => D#35
  # DEBUG this => this_6(D)
  # DEBUG __x => __x_48
  # DEBUG __x => __x_48
  if (__x_48 == 0B)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  __x_49 = MEM[(struct _Rb_tree_node_base * *)__x_170 + 16B];
  # DEBUG D#36 => __x_170
  # DEBUG __x => D#36
  # DEBUG __y => NULL
  # DEBUG D#333 => this_6(D)
  # DEBUG __p => __x_170
  # DEBUG this => D#333
  # DEBUG D#332 => D#333
  # DEBUG D#331 => D#333
  # DEBUG D#330 => D#331
  # DEBUG __p => __x_170
  # DEBUG this => D#330
  # DEBUG D#329 => D#330
  # DEBUG this => __x_170
  # DEBUG D#328 => &__x_170->_M_value_field
  # DEBUG __r => D#328
  # DEBUG D#327 => D#329
  # DEBUG this => D#327
  # DEBUG D#326 => D#327
  # DEBUG this => D#326
  # DEBUG this => NULL
  # DEBUG D.65308 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#328
  # DEBUG this => D#156
  # DEBUG this => D#328
  # DEBUG D#155 => &D#328->first
  # DEBUG this => D#155
  # DEBUG this => D#155
  # DEBUG this => D#155
  _51 = MEM[(char * *)__x_170 + 32B];
  # DEBUG D#1 => D#155
  # DEBUG this => D#1
  # DEBUG this => D#155
  _52 = &MEM[(const struct basic_string *)__x_170 + 32B].D.13615._M_local_buf;
  if (_51 != _52)
    goto <bb 33>;
  else
    goto <bb 34>;

  <bb 28>:

  <bb 29>:
  # __x_173 = PHI <__x_48(28), __x_55(32)>
  # DEBUG __x => __x_173
  _54 = MEM[(struct _Rb_tree_node_base * *)__x_173 + 24B];
  # DEBUG D#35 => __x_173
  # DEBUG __x => D#35
  std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, double>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, double> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, double> > >::_M_erase (this_6(D), _54);
  __x_55 = MEM[(struct _Rb_tree_node_base * *)__x_173 + 16B];
  # DEBUG D#36 => __x_173
  # DEBUG __x => D#36
  # DEBUG __y => NULL
  # DEBUG D#333 => this_6(D)
  # DEBUG __p => __x_173
  # DEBUG this => D#333
  # DEBUG D#332 => D#333
  # DEBUG D#331 => D#333
  # DEBUG D#330 => D#331
  # DEBUG __p => __x_173
  # DEBUG this => D#330
  # DEBUG D#329 => D#330
  # DEBUG this => __x_173
  # DEBUG D#328 => &__x_173->_M_value_field
  # DEBUG __r => D#328
  # DEBUG D#327 => D#329
  # DEBUG this => D#327
  # DEBUG D#326 => D#327
  # DEBUG this => D#326
  # DEBUG this => NULL
  # DEBUG D.65308 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#328
  # DEBUG this => D#156
  # DEBUG this => D#328
  # DEBUG D#155 => &D#328->first
  # DEBUG this => D#155
  # DEBUG this => D#155
  # DEBUG this => D#155
  _57 = MEM[(char * *)__x_173 + 32B];
  # DEBUG D#1 => D#155
  # DEBUG this => D#1
  # DEBUG this => D#155
  _58 = &MEM[(const struct basic_string *)__x_173 + 32B].D.13615._M_local_buf;
  if (_57 != _58)
    goto <bb 30>;
  else
    goto <bb 31>;

  <bb 30>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#155].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#155
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#155
  # DEBUG this => D#1
  # DEBUG this => D#155
  # DEBUG D#117 => &MEM[(struct basic_string *)D#155]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _57
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _57
  # DEBUG this => D#111
  # DEBUG D.70858 => D#112
  operator delete (_57);

  <bb 31>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#155]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_173 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#278 => D#332
  # DEBUG __p => __x_173
  # DEBUG this => D#278
  # DEBUG D#277 => D#278
  # DEBUG this => D#277
  # DEBUG D#276 => 1
  # DEBUG __p => __x_173
  # DEBUG __a => D#275
  # DEBUG __n => D#276
  # DEBUG D#274 => D#276
  # DEBUG D#273 => D#275
  # DEBUG D#271 => D#273
  # DEBUG D#272 => D#274
  # DEBUG __p => __x_173
  # DEBUG this => D#271
  # DEBUG D.70871 => D#272
  operator delete (__x_173);
  # DEBUG __x => __x_55
  if (__x_55 == 0B)
    goto <bb 27>;
  else
    goto <bb 32>;

  <bb 32>:
  goto <bb 29>;

  <bb 33>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#155].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#155
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#155
  # DEBUG this => D#1
  # DEBUG this => D#155
  # DEBUG D#117 => &MEM[(struct basic_string *)D#155]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _51
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _51
  # DEBUG this => D#111
  # DEBUG D.70825 => D#112
  operator delete (_51);

  <bb 34>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#155]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_170 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#278 => D#332
  # DEBUG __p => __x_170
  # DEBUG this => D#278
  # DEBUG D#277 => D#278
  # DEBUG this => D#277
  # DEBUG D#276 => 1
  # DEBUG __p => __x_170
  # DEBUG __a => D#275
  # DEBUG __n => D#276
  # DEBUG D#274 => D#276
  # DEBUG D#273 => D#275
  # DEBUG D#271 => D#273
  # DEBUG D#272 => D#274
  # DEBUG __p => __x_170
  # DEBUG this => D#271
  # DEBUG D.70838 => D#272
  operator delete (__x_170);
  # DEBUG __x => __x_49
  if (__x_49 == 0B)
    goto <bb 24>;
  else
    goto <bb 35>;

  <bb 35>:
  goto <bb 26>;

  <bb 36>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#155].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#155
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#155
  # DEBUG this => D#1
  # DEBUG this => D#155
  # DEBUG D#117 => &MEM[(struct basic_string *)D#155]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _45
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _45
  # DEBUG this => D#111
  # DEBUG D.70792 => D#112
  operator delete (_45);

  <bb 37>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#155]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_167 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#278 => D#332
  # DEBUG __p => __x_167
  # DEBUG this => D#278
  # DEBUG D#277 => D#278
  # DEBUG this => D#277
  # DEBUG D#276 => 1
  # DEBUG __p => __x_167
  # DEBUG __a => D#275
  # DEBUG __n => D#276
  # DEBUG D#274 => D#276
  # DEBUG D#273 => D#275
  # DEBUG D#271 => D#273
  # DEBUG D#272 => D#274
  # DEBUG __p => __x_167
  # DEBUG this => D#271
  # DEBUG D.70805 => D#272
  operator delete (__x_167);
  # DEBUG __x => __x_43
  if (__x_43 == 0B)
    goto <bb 21>;
  else
    goto <bb 38>;

  <bb 38>:
  goto <bb 23>;

  <bb 39>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#155].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#155
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#155
  # DEBUG this => D#1
  # DEBUG this => D#155
  # DEBUG D#117 => &MEM[(struct basic_string *)D#155]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _39
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _39
  # DEBUG this => D#111
  # DEBUG D.70759 => D#112
  operator delete (_39);

  <bb 40>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#155]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_164 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#278 => D#332
  # DEBUG __p => __x_164
  # DEBUG this => D#278
  # DEBUG D#277 => D#278
  # DEBUG this => D#277
  # DEBUG D#276 => 1
  # DEBUG __p => __x_164
  # DEBUG __a => D#275
  # DEBUG __n => D#276
  # DEBUG D#274 => D#276
  # DEBUG D#273 => D#275
  # DEBUG D#271 => D#273
  # DEBUG D#272 => D#274
  # DEBUG __p => __x_164
  # DEBUG this => D#271
  # DEBUG D.70772 => D#272
  operator delete (__x_164);
  # DEBUG __x => __x_37
  if (__x_37 == 0B)
    goto <bb 18>;
  else
    goto <bb 41>;

  <bb 41>:
  goto <bb 20>;

  <bb 42>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#155].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#155
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#155
  # DEBUG this => D#1
  # DEBUG this => D#155
  # DEBUG D#117 => &MEM[(struct basic_string *)D#155]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _33
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _33
  # DEBUG this => D#111
  # DEBUG D.70726 => D#112
  operator delete (_33);

  <bb 43>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#155]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_161 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#278 => D#332
  # DEBUG __p => __x_161
  # DEBUG this => D#278
  # DEBUG D#277 => D#278
  # DEBUG this => D#277
  # DEBUG D#276 => 1
  # DEBUG __p => __x_161
  # DEBUG __a => D#275
  # DEBUG __n => D#276
  # DEBUG D#274 => D#276
  # DEBUG D#273 => D#275
  # DEBUG D#271 => D#273
  # DEBUG D#272 => D#274
  # DEBUG __p => __x_161
  # DEBUG this => D#271
  # DEBUG D.70739 => D#272
  operator delete (__x_161);
  # DEBUG __x => __x_31
  if (__x_31 == 0B)
    goto <bb 15>;
  else
    goto <bb 44>;

  <bb 44>:
  goto <bb 17>;

  <bb 45>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#155].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#155
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#155
  # DEBUG this => D#1
  # DEBUG this => D#155
  # DEBUG D#117 => &MEM[(struct basic_string *)D#155]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _27
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _27
  # DEBUG this => D#111
  # DEBUG D.70693 => D#112
  operator delete (_27);

  <bb 46>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#155]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_158 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#278 => D#332
  # DEBUG __p => __x_158
  # DEBUG this => D#278
  # DEBUG D#277 => D#278
  # DEBUG this => D#277
  # DEBUG D#276 => 1
  # DEBUG __p => __x_158
  # DEBUG __a => D#275
  # DEBUG __n => D#276
  # DEBUG D#274 => D#276
  # DEBUG D#273 => D#275
  # DEBUG D#271 => D#273
  # DEBUG D#272 => D#274
  # DEBUG __p => __x_158
  # DEBUG this => D#271
  # DEBUG D.70706 => D#272
  operator delete (__x_158);
  # DEBUG __x => __x_25
  if (__x_25 == 0B)
    goto <bb 12>;
  else
    goto <bb 47>;

  <bb 47>:
  goto <bb 14>;

  <bb 48>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#155].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#155
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#155
  # DEBUG this => D#1
  # DEBUG this => D#155
  # DEBUG D#117 => &MEM[(struct basic_string *)D#155]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _21
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _21
  # DEBUG this => D#111
  # DEBUG D.70660 => D#112
  operator delete (_21);

  <bb 49>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#155]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_155 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#278 => D#332
  # DEBUG __p => __x_155
  # DEBUG this => D#278
  # DEBUG D#277 => D#278
  # DEBUG this => D#277
  # DEBUG D#276 => 1
  # DEBUG __p => __x_155
  # DEBUG __a => D#275
  # DEBUG __n => D#276
  # DEBUG D#274 => D#276
  # DEBUG D#273 => D#275
  # DEBUG D#271 => D#273
  # DEBUG D#272 => D#274
  # DEBUG __p => __x_155
  # DEBUG this => D#271
  # DEBUG D.70673 => D#272
  operator delete (__x_155);
  # DEBUG __x => __x_19
  if (__x_19 == 0B)
    goto <bb 9>;
  else
    goto <bb 50>;

  <bb 50>:
  goto <bb 11>;

  <bb 51>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#155].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#155
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#155
  # DEBUG this => D#1
  # DEBUG this => D#155
  # DEBUG D#117 => &MEM[(struct basic_string *)D#155]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _7
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _7
  # DEBUG this => D#111
  # DEBUG D.70627 => D#112
  operator delete (_7);

  <bb 52>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#155]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_152 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#278 => D#332
  # DEBUG __p => __x_152
  # DEBUG this => D#278
  # DEBUG D#277 => D#278
  # DEBUG this => D#277
  # DEBUG D#276 => 1
  # DEBUG __p => __x_152
  # DEBUG __a => D#275
  # DEBUG __n => D#276
  # DEBUG D#274 => D#276
  # DEBUG D#273 => D#275
  # DEBUG D#271 => D#273
  # DEBUG D#272 => D#274
  # DEBUG __p => __x_152
  # DEBUG this => D#271
  # DEBUG D.70640 => D#272
  operator delete (__x_152);
  # DEBUG __x => __x_14
  if (__x_14 == 0B)
    goto <bb 6>;
  else
    goto <bb 53>;

  <bb 53>:
  goto <bb 8>;

  <bb 54>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#155].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#155
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#155
  # DEBUG this => D#1
  # DEBUG this => D#155
  # DEBUG D#117 => &MEM[(struct basic_string *)D#155]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _11
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _11
  # DEBUG this => D#111
  # DEBUG D.70594 => D#112
  operator delete (_11);

  <bb 55>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#155]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_149 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#278 => D#332
  # DEBUG __p => __x_149
  # DEBUG this => D#278
  # DEBUG D#277 => D#278
  # DEBUG this => D#277
  # DEBUG D#276 => 1
  # DEBUG __p => __x_149
  # DEBUG __a => D#275
  # DEBUG __n => D#276
  # DEBUG D#274 => D#276
  # DEBUG D#273 => D#275
  # DEBUG D#271 => D#273
  # DEBUG D#272 => D#274
  # DEBUG __p => __x_149
  # DEBUG this => D#271
  # DEBUG D.70607 => D#272
  operator delete (__x_149);
  # DEBUG __x => __x_10
  if (__x_10 == 0B)
    goto <bb 3>;
  else
    goto <bb 56>;

  <bb 56>:
  goto <bb 5>;

}



;; Function Configuration::~Configuration() (_ZN13ConfigurationD2Ev, funcdef_no=1984, decl_uid=55197, cgraph_uid=481, symbol_order=482)

Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is innermost
loop is not parallel according to graphite
Configuration::~Configuration() (struct Configuration * const this)
{
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rep_type * _4;
  struct _Rep_type * _5;
  struct _Rep_type * _6;
  char * const _8;
  const char * _9;
  char * const _13;
  struct _Rb_tree_node_base * _37;
  struct _Rb_tree_node_base * _41;
  struct _Rb_tree_node_base * _44;
  const char * _47;
  char * const _48;
  const char * _49;
  char * const _50;
  const char * _51;
  char * const _52;
  const char * _53;

  <bb 2>:
  # DEBUG D#338 => &this_1(D)->_float_map
  # DEBUG this => D#338
  _4 = &MEM[(struct map *)this_1(D) + 136B]._M_t;
  # DEBUG this => _4
  __x_12 = MEM[(struct _Rb_tree_node_base * *)this_1(D) + 152B];
  # DEBUG D#26 => _4
  # DEBUG this => D#26
  # DEBUG this => _4
  # DEBUG __x => __x_12
  # DEBUG __x => __x_12
  if (__x_12 == 0B)
    goto <bb 3>;
  else
    goto <bb 4>;

  <bb 3>:
  # DEBUG D#334 => &MEM[(struct _Rb_tree *)_4]._M_impl
  # DEBUG this => D#334
  # DEBUG this => D#334
  # DEBUG this => D#334
  MEM[(struct  &)this_1(D) + 136] ={v} {CLOBBER};
  # DEBUG D#337 => &this_1(D)->_int_map
  # DEBUG this => D#337
  _5 = &MEM[(struct map *)this_1(D) + 88B]._M_t;
  # DEBUG this => _5
  __x_11 = MEM[(struct _Rb_tree_node_base * *)this_1(D) + 104B];
  # DEBUG D#25 => _5
  # DEBUG this => D#25
  # DEBUG this => _5
  # DEBUG __x => __x_11
  # DEBUG __x => __x_11
  if (__x_11 == 0B)
    goto <bb 9>;
  else
    goto <bb 10>;

  <bb 4>:

  <bb 5>:
  # __x_91 = PHI <__x_12(4), __x_45(8)>
  # DEBUG __x => __x_91
  _44 = MEM[(struct _Rb_tree_node_base * *)__x_91 + 24B];
  # DEBUG D#35 => __x_91
  # DEBUG __x => D#35
  std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, double>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, double> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, double> > >::_M_erase (_4, _44);
  __x_45 = MEM[(struct _Rb_tree_node_base * *)__x_91 + 16B];
  # DEBUG D#36 => __x_91
  # DEBUG __x => D#36
  # DEBUG __y => NULL
  # DEBUG D#333 => _4
  # DEBUG __p => __x_91
  # DEBUG this => D#333
  # DEBUG D#332 => D#333
  # DEBUG D#331 => D#333
  # DEBUG D#330 => D#331
  # DEBUG __p => __x_91
  # DEBUG this => D#330
  # DEBUG D#329 => D#330
  # DEBUG this => __x_91
  # DEBUG D#328 => &__x_91->_M_value_field
  # DEBUG __r => D#328
  # DEBUG D#327 => D#329
  # DEBUG this => D#327
  # DEBUG D#326 => D#327
  # DEBUG this => D#326
  # DEBUG this => NULL
  # DEBUG D.65308 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#328
  # DEBUG this => D#156
  # DEBUG this => D#328
  # DEBUG D#155 => &D#328->first
  # DEBUG this => D#155
  # DEBUG this => D#155
  # DEBUG this => D#155
  _13 = MEM[(char * *)__x_91 + 32B];
  # DEBUG D#1 => D#155
  # DEBUG this => D#1
  # DEBUG this => D#155
  _47 = &MEM[(const struct basic_string *)__x_91 + 32B].D.13615._M_local_buf;
  if (_13 != _47)
    goto <bb 6>;
  else
    goto <bb 7>;

  <bb 6>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#155].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#155
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#155
  # DEBUG this => D#1
  # DEBUG this => D#155
  # DEBUG D#117 => &MEM[(struct basic_string *)D#155]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _13
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _13
  # DEBUG this => D#111
  # DEBUG D.70951 => D#112
  operator delete (_13);

  <bb 7>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#155]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_91 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#278 => D#332
  # DEBUG __p => __x_91
  # DEBUG this => D#278
  # DEBUG D#277 => D#278
  # DEBUG this => D#277
  # DEBUG D#276 => 1
  # DEBUG __p => __x_91
  # DEBUG __a => D#275
  # DEBUG __n => D#276
  # DEBUG D#274 => D#276
  # DEBUG D#273 => D#275
  # DEBUG D#271 => D#273
  # DEBUG D#272 => D#274
  # DEBUG __p => __x_91
  # DEBUG this => D#271
  # DEBUG D.70964 => D#272
  operator delete (__x_91);
  # DEBUG __x => __x_45
  if (__x_45 == 0B)
    goto <bb 3>;
  else
    goto <bb 8>;

  <bb 8>:
  goto <bb 5>;

  <bb 9>:
  # DEBUG D#325 => &MEM[(struct _Rb_tree *)_5]._M_impl
  # DEBUG this => D#325
  # DEBUG this => D#325
  # DEBUG this => D#325
  MEM[(struct  &)this_1(D) + 88] ={v} {CLOBBER};
  # DEBUG D#336 => &this_1(D)->_str_map
  # DEBUG this => D#336
  _6 = &MEM[(struct map *)this_1(D) + 40B]._M_t;
  # DEBUG this => _6
  __x_10 = MEM[(struct _Rb_tree_node_base * *)this_1(D) + 56B];
  # DEBUG D#24 => _6
  # DEBUG this => D#24
  # DEBUG this => _6
  # DEBUG __x => __x_10
  # DEBUG __x => __x_10
  if (__x_10 == 0B)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 10>:

  <bb 11>:
  # __x_89 = PHI <__x_11(10), __x_42(14)>
  # DEBUG __x => __x_89
  _41 = MEM[(struct _Rb_tree_node_base * *)__x_89 + 24B];
  # DEBUG D#33 => __x_89
  # DEBUG __x => D#33
  std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, int>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, int> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> > >::_M_erase (_5, _41);
  __x_42 = MEM[(struct _Rb_tree_node_base * *)__x_89 + 16B];
  # DEBUG D#34 => __x_89
  # DEBUG __x => D#34
  # DEBUG __y => NULL
  # DEBUG D#324 => _5
  # DEBUG __p => __x_89
  # DEBUG this => D#324
  # DEBUG D#323 => D#324
  # DEBUG D#322 => D#324
  # DEBUG D#321 => D#322
  # DEBUG __p => __x_89
  # DEBUG this => D#321
  # DEBUG D#320 => D#321
  # DEBUG this => __x_89
  # DEBUG D#319 => &__x_89->_M_value_field
  # DEBUG __r => D#319
  # DEBUG D#318 => D#320
  # DEBUG this => D#318
  # DEBUG D#317 => D#318
  # DEBUG this => D#317
  # DEBUG this => NULL
  # DEBUG D.65159 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#319
  # DEBUG this => D#154
  # DEBUG this => D#319
  # DEBUG D#153 => &D#319->first
  # DEBUG this => D#153
  # DEBUG this => D#153
  # DEBUG this => D#153
  _48 = MEM[(char * *)__x_89 + 32B];
  # DEBUG D#1 => D#153
  # DEBUG this => D#1
  # DEBUG this => D#153
  _49 = &MEM[(const struct basic_string *)__x_89 + 32B].D.13615._M_local_buf;
  if (_48 != _49)
    goto <bb 12>;
  else
    goto <bb 13>;

  <bb 12>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#153].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#153
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#153
  # DEBUG this => D#1
  # DEBUG this => D#153
  # DEBUG D#117 => &MEM[(struct basic_string *)D#153]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _48
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _48
  # DEBUG this => D#111
  # DEBUG D.70981 => D#112
  operator delete (_48);

  <bb 13>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#153]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_89 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#270 => D#323
  # DEBUG __p => __x_89
  # DEBUG this => D#270
  # DEBUG D#269 => D#270
  # DEBUG this => D#269
  # DEBUG D#268 => 1
  # DEBUG __p => __x_89
  # DEBUG __a => D#267
  # DEBUG __n => D#268
  # DEBUG D#266 => D#268
  # DEBUG D#265 => D#267
  # DEBUG D#263 => D#265
  # DEBUG D#264 => D#266
  # DEBUG __p => __x_89
  # DEBUG this => D#263
  # DEBUG D.70994 => D#264
  operator delete (__x_89);
  # DEBUG __x => __x_42
  if (__x_42 == 0B)
    goto <bb 9>;
  else
    goto <bb 14>;

  <bb 14>:
  goto <bb 11>;

  <bb 15>:
  # DEBUG D#316 => &MEM[(struct _Rb_tree *)_6]._M_impl
  # DEBUG this => D#316
  # DEBUG this => D#316
  # DEBUG this => D#316
  MEM[(struct  &)this_1(D) + 40] ={v} {CLOBBER};
  # DEBUG D#335 => &this_1(D)->_config_string
  # DEBUG this => D#335
  # DEBUG this => D#335
  # DEBUG this => D#335
  _8 = MEM[(char * *)this_1(D) + 8B];
  # DEBUG D#1 => D#335
  # DEBUG this => D#1
  # DEBUG this => D#335
  _9 = &MEM[(const struct basic_string *)this_1(D) + 8B].D.13615._M_local_buf;
  if (_8 != _9)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 16>:

  <bb 17>:
  # __x_90 = PHI <__x_10(16), __x_38(22)>
  # DEBUG __x => __x_90
  _37 = MEM[(struct _Rb_tree_node_base * *)__x_90 + 24B];
  # DEBUG D#31 => __x_90
  # DEBUG __x => D#31
  std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > > >::_M_erase (_6, _37);
  __x_38 = MEM[(struct _Rb_tree_node_base * *)__x_90 + 16B];
  # DEBUG D#32 => __x_90
  # DEBUG __x => D#32
  # DEBUG __y => NULL
  # DEBUG D#315 => _6
  # DEBUG __p => __x_90
  # DEBUG this => D#315
  # DEBUG D#314 => D#315
  # DEBUG D#313 => D#315
  # DEBUG D#312 => D#313
  # DEBUG __p => __x_90
  # DEBUG this => D#312
  # DEBUG D#311 => D#312
  # DEBUG this => __x_90
  # DEBUG D#676 => &__x_90->_M_value_field
  # DEBUG __r => D#676
  # DEBUG D#310 => D#311
  # DEBUG this => D#310
  # DEBUG D#309 => D#310
  # DEBUG this => D#309
  # DEBUG this => NULL
  # DEBUG D.65057 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#676
  # DEBUG this => D#152
  # DEBUG this => D#676
  # DEBUG D#151 => &D#676->second
  # DEBUG this => D#151
  # DEBUG this => D#151
  # DEBUG this => D#151
  _50 = MEM[(char * *)__x_90 + 64B];
  # DEBUG D#1 => D#151
  # DEBUG this => D#1
  # DEBUG this => D#151
  _51 = &MEM[(const struct basic_string *)__x_90 + 64B].D.13615._M_local_buf;
  if (_50 != _51)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  # DEBUG D#120 => D#151->D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#151
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#151
  # DEBUG this => D#1
  # DEBUG this => D#151
  # DEBUG D#117 => &D#151->_M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _50
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _50
  # DEBUG this => D#111
  # DEBUG D.71005 => D#112
  operator delete (_50);

  <bb 19>:
  # DEBUG D#121 => &D#151->_M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_90 + 64] ={v} {CLOBBER};
  # DEBUG D#150 => &D#676->first
  # DEBUG this => D#150
  # DEBUG this => D#150
  # DEBUG this => D#150
  _52 = MEM[(char * *)__x_90 + 32B];
  # DEBUG D#1 => D#150
  # DEBUG this => D#1
  # DEBUG this => D#150
  _53 = &MEM[(const struct basic_string *)__x_90 + 32B].D.13615._M_local_buf;
  if (_52 != _53)
    goto <bb 20>;
  else
    goto <bb 21>;

  <bb 20>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#150].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#150
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#150
  # DEBUG this => D#1
  # DEBUG this => D#150
  # DEBUG D#117 => &MEM[(struct basic_string *)D#150]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _52
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _52
  # DEBUG this => D#111
  # DEBUG D.71020 => D#112
  operator delete (_52);

  <bb 21>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#150]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_90 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#262 => D#314
  # DEBUG __p => __x_90
  # DEBUG this => D#262
  # DEBUG D#261 => D#262
  # DEBUG this => D#261
  # DEBUG D#260 => 1
  # DEBUG __p => __x_90
  # DEBUG __a => D#259
  # DEBUG __n => D#260
  # DEBUG D#258 => D#260
  # DEBUG D#257 => D#259
  # DEBUG D#255 => D#257
  # DEBUG D#256 => D#258
  # DEBUG __p => __x_90
  # DEBUG this => D#255
  # DEBUG D.70928 => D#256
  operator delete (__x_90);
  # DEBUG __x => __x_38
  # DEBUG __x => __x_38
  if (__x_38 == 0B)
    goto <bb 15>;
  else
    goto <bb 22>;

  <bb 22>:
  goto <bb 17>;

  <bb 23>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#335].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#335
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#335
  # DEBUG this => D#1
  # DEBUG this => D#335
  # DEBUG D#117 => &MEM[(struct basic_string *)D#335]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _8
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _8
  # DEBUG this => D#111
  # DEBUG D.65461 => D#112
  operator delete (_8);

  <bb 24>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#335]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)this_1(D)] ={v} {CLOBBER};
  return;

}



;; Function Power_Module::Power_Module(Network*, const Configuration&) (_ZN12Power_ModuleC2EP7NetworkRK13Configuration, funcdef_no=1988, decl_uid=45247, cgraph_uid=487, symbol_order=488)

Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is innermost
loop is not parallel according to graphite
Power_Module::Power_Module(Network*, const Configuration&) (struct Power_Module * const this, struct Network * n, const struct Configuration & config)
{
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  struct _Rb_tree_node * __x;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  size_type __dnew;
  struct PowerConfig pconfig;
  struct string pfile;
  const struct string D.55411;
  const struct string D.55409;
  const struct string D.55407;
  const struct string D.55405;
  const struct string D.55403;
  const struct string D.55401;
  const struct string D.55399;
  const struct string D.55397;
  const struct string D.55395;
  const struct string D.55393;
  const struct string D.55391;
  const struct string D.55389;
  const struct string D.55387;
  const struct string D.55385;
  const struct string D.55383;
  const struct string D.55381;
  const struct string D.55379;
  const struct string D.55377;
  const struct string D.55375;
  const struct string D.55373;
  const struct string D.55371;
  const struct string D.55369;
  const struct string D.55367;
  const struct string D.55365;
  const struct string D.55363;
  const struct string D.55361;
  const struct string D.55359;
  const struct string D.55357;
  const struct string D.55355;
  const struct string D.55353;
  struct string D.55352;
  const struct string D.55350;
  const struct string D.55345;
  struct Module * _9;
  char * const _12;
  char * _14;
  char * const _20;
  struct string * _28;
  char * const _30;
  char * const _32;
  int _36;
  char * const _39;
  int _43;
  double _44;
  char * const _47;
  int _51;
  double _52;
  char * const _55;
  int _59;
  double _60;
  char * const _63;
  int _67;
  double _68;
  char * const _71;
  double _75;
  char * const _78;
  double _82;
  char * const _85;
  double _89;
  char * const _92;
  double _93;
  double _94;
  double _96;
  double _97;
  double _102;
  char * const _105;
  double _109;
  char * const _112;
  double _116;
  char * const _119;
  double _123;
  char * const _126;
  double _130;
  char * const _133;
  double _137;
  char * const _140;
  double _144;
  char * const _147;
  double _151;
  char * const _154;
  double _158;
  char * const _161;
  double _165;
  char * const _168;
  double _172;
  char * const _175;
  double _179;
  char * const _182;
  double _183;
  double _184;
  double _185;
  double _186;
  double _188;
  double _189;
  double _191;
  double _192;
  double _194;
  double _195;
  double _200;
  char * const _203;
  double _204;
  double _205;
  double _206;
  double _207;
  double _208;
  double _209;
  double _210;
  double _211;
  double _212;
  double _213;
  double _215;
  double _217;
  int _222;
  double _223;
  char * const _226;
  int _230;
  double _231;
  char * const _234;
  int _237;
  double _238;
  char * const _241;
  struct _Rb_tree_node_base * _242;
  int _245;
  double _246;
  char * const _249;
  int _252;
  double _253;
  char * const _256;
  int _259;
  double _260;
  char * const _263;
  int _266;
  double _267;
  char * const _269;
  char * const _271;
  struct _Rb_tree_node_base * _272;
  int _275;
  double _276;
  char * const _278;
  char * const _280;
  double _281;
  double _282;
  char * const _289;
  char * const _291;
  char * const _293;
  char * const _295;
  char * const _297;
  char * const _299;
  char * const _301;
  char * const _303;
  char * const _305;
  char * const _307;
  char * const _309;
  char * const _311;
  char * const _313;
  char * const _315;
  char * const _317;
  char * const _319;
  char * const _321;
  char * const _323;
  char * const _325;
  char * const _327;
  char * const _329;
  char * const _331;
  char * const _333;
  char * const _335;
  char * const _337;
  char * const _339;
  char * const _341;
  char * const _343;
  char * const _344;
  char * const _347;
  char * const _348;
  struct _Rep_type * _349;
  char * const _351;
  char * const _354;
  char * const _358;
  double pretmp_598;
  double prephitmp_600;
  char * _808;
  long unsigned int __dnew.4_809;
  long unsigned int __dnew.4_812;
  char * const _813;
  char * _814;
  char * const _1285;
  struct _Rb_tree_node_base * _1287;
  struct _Rb_tree_node_base * _1292;
  struct _Rb_tree_node_base * _1296;
  char * const _1299;
  const char * _1300;
  char * const _1301;
  const char * _1302;
  char * const _1303;
  const char * _1304;
  char * const _1305;
  const char * _1306;
  struct Module * * _1307;
  char * const _1308;
  const char * _1309;
  char * const _1310;
  const char * _1311;

  <bb 2>:
  # DEBUG D#22 => &D.55346
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55346
  # DEBUG this => &D.55345
  # DEBUG __s => "power_module"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55345
  # DEBUG D#245 => &D.55345._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55345.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55345]._M_p = &D.55345.D.13615._M_local_buf;
  # DEBUG __s => "power_module"
  # DEBUG this => &D.55345
  # DEBUG __beg => "power_module"
  # DEBUG __end => &MEM[(void *)"power_module" + 12B]
  # DEBUG this => &D.55345
  # DEBUG __beg => "power_module"
  # DEBUG __end => &MEM[(void *)"power_module" + 12B]
  # DEBUG this => &D.55345
  # DEBUG __beg => "power_module"
  # DEBUG __end => &MEM[(void *)"power_module" + 12B]
  # DEBUG __ptr => "power_module"
  # DEBUG __first => "power_module"
  # DEBUG __last => &MEM[(void *)"power_module" + 12B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "power_module"
  # DEBUG __last => &MEM[(void *)"power_module" + 12B]
  # DEBUG __dnew => 12
  # DEBUG D#1 => &D.55345
  # DEBUG this => D#1
  # DEBUG __p => &D.55345.D.13615._M_local_buf
  # DEBUG __k1 => "power_module"
  # DEBUG __k2 => &MEM[(void *)"power_module" + 12B]
  # DEBUG __d => &D.55345.D.13615._M_local_buf
  # DEBUG __s => "power_module"
  # DEBUG __n => 12
  # DEBUG __s1 => &D.55345.D.13615._M_local_buf
  # DEBUG __s2 => "power_module"
  # DEBUG __n => 12
  __builtin_memcpy (&D.55345.D.13615._M_local_buf, "power_module", 12);
  # DEBUG this => &D.55345
  # DEBUG __n => 12
  # DEBUG D#2 => &D.55345
  # DEBUG __length => 12
  # DEBUG this => D#2
  MEM[(size_type *)&D.55345 + 8B] = 12;
  # DEBUG D#1 => &D.55345
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55345 + 28B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55345 + 28] = 0;
  # DEBUG D#681 => {CLOBBER}
  # DEBUG __dnew => D#681
  _9 = &this_8(D)->D.45260;
  Module::Module (_9, 0B, &D.55345);

  <bb 3>:
  # DEBUG this => &D.55345
  # DEBUG this => &D.55345
  # DEBUG this => &D.55345
  _12 = MEM[(char * *)&D.55345];
  # DEBUG D#1 => &D.55345
  # DEBUG this => D#1
  # DEBUG this => &D.55345
  if (&D.55345.D.13615._M_local_buf != _12)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  # DEBUG D#120 => D.55345.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55345
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55345
  # DEBUG this => D#1
  # DEBUG this => &D.55345
  # DEBUG D#117 => &D.55345._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _12
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _12
  # DEBUG this => D#111
  # DEBUG D.65514 => D#112
  operator delete (_12);

  <bb 5>:
  # DEBUG D#121 => &D.55345._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55345 ={v} {CLOBBER};
  # DEBUG this => &D.55346
  # DEBUG this => &D.55346
  this_8(D)->D.45260._vptr.Module = &MEM[(void *)&_ZTV12Power_Module + 16B];
  # DEBUG D#342 => &this_8(D)->output_file_name
  # DEBUG this => D#342
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG this => D#342
  _14 = &MEM[(struct basic_string *)this_8(D) + 128B].D.13615._M_local_buf;
  # DEBUG D#65 => &MEM[(struct basic_string *)D#342]._M_dataplus
  # DEBUG this => D#65
  # DEBUG __dat => _14
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#65
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)this_8(D) + 128B]._M_p = _14;
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG this => D#342
  # DEBUG __n => 0
  # DEBUG D#2 => D#342
  # DEBUG __length => 0
  # DEBUG this => D#2
  MEM[(size_type *)this_8(D) + 136B] = 0;
  # DEBUG D#1 => D#342
  # DEBUG this => D#1
  # DEBUG __c1 => _14
  # DEBUG __c2 => D#7
  MEM[(char_type &)this_8(D) + 144] = 0;
  # DEBUG D#341 => &this_8(D)->wire_map
  # DEBUG this => D#341
  # DEBUG D#147 => &D#341->_M_t
  # DEBUG this => D#147
  # DEBUG D#146 => &MEM[(struct _Rb_tree *)D#147]._M_impl
  # DEBUG this => D#146
  # DEBUG this => D#146
  # DEBUG this => D#146
  MEM[(struct _Rb_tree_impl *)this_8(D) + 176B]._M_header._M_color = 0;
  MEM[(struct _Rb_tree_impl *)this_8(D) + 176B]._M_header._M_parent = 0B;
  MEM[(struct _Rb_tree_impl *)this_8(D) + 176B]._M_node_count = 0;
  # DEBUG this => D#146
  _272 = &MEM[(struct _Rb_tree_impl *)this_8(D) + 176B]._M_header;
  MEM[(struct _Rb_tree_impl *)this_8(D) + 176B]._M_header._M_left = _272;
  MEM[(struct _Rb_tree_impl *)this_8(D) + 176B]._M_header._M_right = _272;
  # DEBUG D#22 => &D.55351
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55351
  # DEBUG this => &D.55350
  # DEBUG __s => "tech_file"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55350
  # DEBUG D#245 => &D.55350._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55350.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55350]._M_p = &D.55350.D.13615._M_local_buf;
  # DEBUG __s => "tech_file"
  # DEBUG this => &D.55350
  # DEBUG __beg => "tech_file"
  # DEBUG __end => &MEM[(void *)"tech_file" + 9B]
  # DEBUG this => &D.55350
  # DEBUG __beg => "tech_file"
  # DEBUG __end => &MEM[(void *)"tech_file" + 9B]
  # DEBUG this => &D.55350
  # DEBUG __beg => "tech_file"
  # DEBUG __end => &MEM[(void *)"tech_file" + 9B]
  # DEBUG __ptr => "tech_file"
  # DEBUG __first => "tech_file"
  # DEBUG __last => &MEM[(void *)"tech_file" + 9B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "tech_file"
  # DEBUG __last => &MEM[(void *)"tech_file" + 9B]
  # DEBUG __dnew => 9
  # DEBUG D#1 => &D.55350
  # DEBUG this => D#1
  # DEBUG __p => &D.55350.D.13615._M_local_buf
  # DEBUG __k1 => "tech_file"
  # DEBUG __k2 => &MEM[(void *)"tech_file" + 9B]
  # DEBUG __d => &D.55350.D.13615._M_local_buf
  # DEBUG __s => "tech_file"
  # DEBUG __n => 9
  # DEBUG __s1 => &D.55350.D.13615._M_local_buf
  # DEBUG __s2 => "tech_file"
  # DEBUG __n => 9
  __builtin_memcpy (&D.55350.D.13615._M_local_buf, "tech_file", 9);
  # DEBUG this => &D.55350
  # DEBUG __n => 9
  # DEBUG D#2 => &D.55350
  # DEBUG __length => 9
  # DEBUG this => D#2
  MEM[(size_type *)&D.55350 + 8B] = 9;
  # DEBUG D#1 => &D.55350
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55350 + 25B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55350 + 25] = 0;
  # DEBUG D#682 => {CLOBBER}
  # DEBUG __dnew => D#682
  pfile = Configuration::GetStr (config_17(D), &D.55350); [return slot optimization]

  <bb 6>:
  # DEBUG this => &D.55350
  # DEBUG this => &D.55350
  # DEBUG this => &D.55350
  _20 = MEM[(char * *)&D.55350];
  # DEBUG D#1 => &D.55350
  # DEBUG this => D#1
  # DEBUG this => &D.55350
  if (&D.55350.D.13615._M_local_buf != _20)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  # DEBUG D#120 => D.55350.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55350
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55350
  # DEBUG this => D#1
  # DEBUG this => &D.55350
  # DEBUG D#117 => &D.55350._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _20
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _20
  # DEBUG this => D#111
  # DEBUG D.65531 => D#112
  operator delete (_20);

  <bb 8>:
  # DEBUG D#121 => &D.55350._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55350 ={v} {CLOBBER};
  # DEBUG this => &D.55351
  # DEBUG this => &D.55351
  PowerConfig::PowerConfig (&pconfig);

  <bb 9>:
  Configuration::ParseFile (&pconfig.D.45344, &pfile);

  <bb 10>:
  this_8(D)->net = n_23(D);
  # DEBUG D#22 => &D.55354
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55354
  # DEBUG this => &D.55353
  # DEBUG __s => "power_output_file"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55353
  # DEBUG D#245 => &D.55353._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55353.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55353]._M_p = &D.55353.D.13615._M_local_buf;
  # DEBUG __s => "power_output_file"
  # DEBUG this => &D.55353
  # DEBUG __beg => "power_output_file"
  # DEBUG __end => &MEM[(void *)"power_output_file" + 17B]
  # DEBUG this => &D.55353
  # DEBUG __beg => "power_output_file"
  # DEBUG __end => &MEM[(void *)"power_output_file" + 17B]
  # DEBUG this => &D.55353
  # DEBUG __beg => "power_output_file"
  # DEBUG __end => &MEM[(void *)"power_output_file" + 17B]
  # DEBUG __ptr => "power_output_file"
  # DEBUG __first => "power_output_file"
  # DEBUG __last => &MEM[(void *)"power_output_file" + 17B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "power_output_file"
  # DEBUG __last => &MEM[(void *)"power_output_file" + 17B]
  __dnew = 17;
  _808 = std::__cxx11::basic_string<char>::_M_create (&D.55353, &__dnew, 0);
  goto <bb 12>;

<L74>:
  goto <bb 262> (<L66>);

  <bb 12>:
  # DEBUG D#4 => &D.55353
  # DEBUG __p => _808
  # DEBUG this => D#4
  MEM[(char * *)&D.55353] = _808;
  __dnew.4_809 = __dnew;
  # DEBUG D#5 => &D.55353
  # DEBUG __capacity => __dnew.4_809
  # DEBUG this => D#5
  MEM[(size_type *)&D.55353 + 16B] = __dnew.4_809;
  # DEBUG D#1 => &D.55353
  # DEBUG this => D#1
  # DEBUG __p => _808
  # DEBUG __k1 => "power_output_file"
  # DEBUG __k2 => &MEM[(void *)"power_output_file" + 17B]
  # DEBUG __d => _808
  # DEBUG __s => "power_output_file"
  # DEBUG __n => 17
  # DEBUG __s1 => _808
  # DEBUG __s2 => "power_output_file"
  # DEBUG __n => 17
  __builtin_memcpy (_808, "power_output_file", 17);
  __dnew.4_812 = __dnew;
  # DEBUG this => &D.55353
  # DEBUG __n => __dnew.4_812
  # DEBUG D#2 => &D.55353
  # DEBUG __length => __dnew.4_812
  # DEBUG this => D#2
  MEM[(size_type *)&D.55353 + 8B] = __dnew.4_812;
  _813 = MEM[(char * *)&D.55353];
  # DEBUG D#1 => &D.55353
  # DEBUG this => D#1
  _814 = _813 + __dnew.4_812;
  # DEBUG __c1 => _814
  # DEBUG __c2 => D#7
  MEM[(char_type &)_814] = 0;
  __dnew ={v} {CLOBBER};
  D.55352 = Configuration::GetStr (config_17(D), &D.55353); [return slot optimization]

  <bb 13>:
  _28 = &this_8(D)->output_file_name;
  # DEBUG this => _28
  # DEBUG __str => &D.55352
  # DEBUG this => _28
  # DEBUG __str => &D.55352
  std::__cxx11::basic_string<char>::_M_assign (_28, &D.55352);

  <bb 14>:
  # DEBUG this => &D.55352
  # DEBUG this => &D.55352
  # DEBUG this => &D.55352
  _30 = MEM[(char * *)&D.55352];
  # DEBUG D#1 => &D.55352
  # DEBUG this => D#1
  # DEBUG this => &D.55352
  if (&D.55352.D.13615._M_local_buf != _30)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  # DEBUG D#120 => D.55352.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55352
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55352
  # DEBUG this => D#1
  # DEBUG this => &D.55352
  # DEBUG D#117 => &D.55352._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _30
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _30
  # DEBUG this => D#111
  # DEBUG D.65570 => D#112
  operator delete (_30);

  <bb 16>:
  # DEBUG D#121 => &D.55352._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55352 ={v} {CLOBBER};
  # DEBUG this => &D.55353
  # DEBUG this => &D.55353
  # DEBUG this => &D.55353
  _32 = MEM[(char * *)&D.55353];
  # DEBUG D#1 => &D.55353
  # DEBUG this => D#1
  # DEBUG this => &D.55353
  if (&D.55353.D.13615._M_local_buf != _32)
    goto <bb 17>;
  else
    goto <bb 18>;

  <bb 17>:
  # DEBUG D#120 => D.55353.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55353
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55353
  # DEBUG this => D#1
  # DEBUG this => &D.55353
  # DEBUG D#117 => &D.55353._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _32
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _32
  # DEBUG this => D#111
  # DEBUG D.65555 => D#112
  operator delete (_32);

  <bb 18>:
  # DEBUG D#121 => &D.55353._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55353 ={v} {CLOBBER};
  # DEBUG this => &D.55354
  # DEBUG this => &D.55354
  # DEBUG D#22 => &D.55356
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55356
  # DEBUG this => &D.55355
  # DEBUG __s => "classes"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55355
  # DEBUG D#245 => &D.55355._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55355.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55355]._M_p = &D.55355.D.13615._M_local_buf;
  # DEBUG __s => "classes"
  # DEBUG this => &D.55355
  # DEBUG __beg => "classes"
  # DEBUG __end => &MEM[(void *)"classes" + 7B]
  # DEBUG this => &D.55355
  # DEBUG __beg => "classes"
  # DEBUG __end => &MEM[(void *)"classes" + 7B]
  # DEBUG this => &D.55355
  # DEBUG __beg => "classes"
  # DEBUG __end => &MEM[(void *)"classes" + 7B]
  # DEBUG __ptr => "classes"
  # DEBUG __first => "classes"
  # DEBUG __last => &MEM[(void *)"classes" + 7B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "classes"
  # DEBUG __last => &MEM[(void *)"classes" + 7B]
  # DEBUG __dnew => 7
  # DEBUG D#1 => &D.55355
  # DEBUG this => D#1
  # DEBUG __p => &D.55355.D.13615._M_local_buf
  # DEBUG __k1 => "classes"
  # DEBUG __k2 => &MEM[(void *)"classes" + 7B]
  # DEBUG __d => &D.55355.D.13615._M_local_buf
  # DEBUG __s => "classes"
  # DEBUG __n => 7
  # DEBUG __s1 => &D.55355.D.13615._M_local_buf
  # DEBUG __s2 => "classes"
  # DEBUG __n => 7
  __builtin_memcpy (&D.55355.D.13615._M_local_buf, "classes", 7);
  # DEBUG this => &D.55355
  # DEBUG __n => 7
  # DEBUG D#2 => &D.55355
  # DEBUG __length => 7
  # DEBUG this => D#2
  MEM[(size_type *)&D.55355 + 8B] = 7;
  # DEBUG D#1 => &D.55355
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55355 + 23B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55355 + 23] = 0;
  # DEBUG D#683 => {CLOBBER}
  # DEBUG __dnew => D#683
  _36 = Configuration::GetInt (config_17(D), &D.55355);

  <bb 19>:
  this_8(D)->classes = _36;
  # DEBUG this => &D.55355
  # DEBUG this => &D.55355
  # DEBUG this => &D.55355
  _39 = MEM[(char * *)&D.55355];
  # DEBUG D#1 => &D.55355
  # DEBUG this => D#1
  # DEBUG this => &D.55355
  if (&D.55355.D.13615._M_local_buf != _39)
    goto <bb 20>;
  else
    goto <bb 21>;

  <bb 20>:
  # DEBUG D#120 => D.55355.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55355
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55355
  # DEBUG this => D#1
  # DEBUG this => &D.55355
  # DEBUG D#117 => &D.55355._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _39
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _39
  # DEBUG this => D#111
  # DEBUG D.65588 => D#112
  operator delete (_39);

  <bb 21>:
  # DEBUG D#121 => &D.55355._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55355 ={v} {CLOBBER};
  # DEBUG this => &D.55356
  # DEBUG this => &D.55356
  # DEBUG D#22 => &D.55358
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55358
  # DEBUG this => &D.55357
  # DEBUG __s => "channel_width"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55357
  # DEBUG D#245 => &D.55357._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55357.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55357]._M_p = &D.55357.D.13615._M_local_buf;
  # DEBUG __s => "channel_width"
  # DEBUG this => &D.55357
  # DEBUG __beg => "channel_width"
  # DEBUG __end => &MEM[(void *)"channel_width" + 13B]
  # DEBUG this => &D.55357
  # DEBUG __beg => "channel_width"
  # DEBUG __end => &MEM[(void *)"channel_width" + 13B]
  # DEBUG this => &D.55357
  # DEBUG __beg => "channel_width"
  # DEBUG __end => &MEM[(void *)"channel_width" + 13B]
  # DEBUG __ptr => "channel_width"
  # DEBUG __first => "channel_width"
  # DEBUG __last => &MEM[(void *)"channel_width" + 13B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "channel_width"
  # DEBUG __last => &MEM[(void *)"channel_width" + 13B]
  # DEBUG __dnew => 13
  # DEBUG D#1 => &D.55357
  # DEBUG this => D#1
  # DEBUG __p => &D.55357.D.13615._M_local_buf
  # DEBUG __k1 => "channel_width"
  # DEBUG __k2 => &MEM[(void *)"channel_width" + 13B]
  # DEBUG __d => &D.55357.D.13615._M_local_buf
  # DEBUG __s => "channel_width"
  # DEBUG __n => 13
  # DEBUG __s1 => &D.55357.D.13615._M_local_buf
  # DEBUG __s2 => "channel_width"
  # DEBUG __n => 13
  __builtin_memcpy (&D.55357.D.13615._M_local_buf, "channel_width", 13);
  # DEBUG this => &D.55357
  # DEBUG __n => 13
  # DEBUG D#2 => &D.55357
  # DEBUG __length => 13
  # DEBUG this => D#2
  MEM[(size_type *)&D.55357 + 8B] = 13;
  # DEBUG D#1 => &D.55357
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55357 + 29B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55357 + 29] = 0;
  # DEBUG D#684 => {CLOBBER}
  # DEBUG __dnew => D#684
  _43 = Configuration::GetInt (config_17(D), &D.55357);

  <bb 22>:
  _44 = (double) _43;
  this_8(D)->channel_width = _44;
  # DEBUG this => &D.55357
  # DEBUG this => &D.55357
  # DEBUG this => &D.55357
  _47 = MEM[(char * *)&D.55357];
  # DEBUG D#1 => &D.55357
  # DEBUG this => D#1
  # DEBUG this => &D.55357
  if (&D.55357.D.13615._M_local_buf != _47)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 23>:
  # DEBUG D#120 => D.55357.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55357
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55357
  # DEBUG this => D#1
  # DEBUG this => &D.55357
  # DEBUG D#117 => &D.55357._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _47
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _47
  # DEBUG this => D#111
  # DEBUG D.65606 => D#112
  operator delete (_47);

  <bb 24>:
  # DEBUG D#121 => &D.55357._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55357 ={v} {CLOBBER};
  # DEBUG this => &D.55358
  # DEBUG this => &D.55358
  # DEBUG D#22 => &D.55360
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55360
  # DEBUG this => &D.55359
  # DEBUG __s => "channel_sweep"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55359
  # DEBUG D#245 => &D.55359._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55359.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55359]._M_p = &D.55359.D.13615._M_local_buf;
  # DEBUG __s => "channel_sweep"
  # DEBUG this => &D.55359
  # DEBUG __beg => "channel_sweep"
  # DEBUG __end => &MEM[(void *)"channel_sweep" + 13B]
  # DEBUG this => &D.55359
  # DEBUG __beg => "channel_sweep"
  # DEBUG __end => &MEM[(void *)"channel_sweep" + 13B]
  # DEBUG this => &D.55359
  # DEBUG __beg => "channel_sweep"
  # DEBUG __end => &MEM[(void *)"channel_sweep" + 13B]
  # DEBUG __ptr => "channel_sweep"
  # DEBUG __first => "channel_sweep"
  # DEBUG __last => &MEM[(void *)"channel_sweep" + 13B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "channel_sweep"
  # DEBUG __last => &MEM[(void *)"channel_sweep" + 13B]
  # DEBUG __dnew => 13
  # DEBUG D#1 => &D.55359
  # DEBUG this => D#1
  # DEBUG __p => &D.55359.D.13615._M_local_buf
  # DEBUG __k1 => "channel_sweep"
  # DEBUG __k2 => &MEM[(void *)"channel_sweep" + 13B]
  # DEBUG __d => &D.55359.D.13615._M_local_buf
  # DEBUG __s => "channel_sweep"
  # DEBUG __n => 13
  # DEBUG __s1 => &D.55359.D.13615._M_local_buf
  # DEBUG __s2 => "channel_sweep"
  # DEBUG __n => 13
  __builtin_memcpy (&D.55359.D.13615._M_local_buf, "channel_sweep", 13);
  # DEBUG this => &D.55359
  # DEBUG __n => 13
  # DEBUG D#2 => &D.55359
  # DEBUG __length => 13
  # DEBUG this => D#2
  MEM[(size_type *)&D.55359 + 8B] = 13;
  # DEBUG D#1 => &D.55359
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55359 + 29B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55359 + 29] = 0;
  # DEBUG D#685 => {CLOBBER}
  # DEBUG __dnew => D#685
  _51 = Configuration::GetInt (config_17(D), &D.55359);

  <bb 25>:
  _52 = (double) _51;
  this_8(D)->channel_sweep = _52;
  # DEBUG this => &D.55359
  # DEBUG this => &D.55359
  # DEBUG this => &D.55359
  _55 = MEM[(char * *)&D.55359];
  # DEBUG D#1 => &D.55359
  # DEBUG this => D#1
  # DEBUG this => &D.55359
  if (&D.55359.D.13615._M_local_buf != _55)
    goto <bb 26>;
  else
    goto <bb 27>;

  <bb 26>:
  # DEBUG D#120 => D.55359.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55359
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55359
  # DEBUG this => D#1
  # DEBUG this => &D.55359
  # DEBUG D#117 => &D.55359._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _55
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _55
  # DEBUG this => D#111
  # DEBUG D.65624 => D#112
  operator delete (_55);

  <bb 27>:
  # DEBUG D#121 => &D.55359._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55359 ={v} {CLOBBER};
  # DEBUG this => &D.55360
  # DEBUG this => &D.55360
  # DEBUG D#22 => &D.55362
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55362
  # DEBUG this => &D.55361
  # DEBUG __s => "num_vcs"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55361
  # DEBUG D#245 => &D.55361._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55361.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55361]._M_p = &D.55361.D.13615._M_local_buf;
  # DEBUG __s => "num_vcs"
  # DEBUG this => &D.55361
  # DEBUG __beg => "num_vcs"
  # DEBUG __end => &MEM[(void *)"num_vcs" + 7B]
  # DEBUG this => &D.55361
  # DEBUG __beg => "num_vcs"
  # DEBUG __end => &MEM[(void *)"num_vcs" + 7B]
  # DEBUG this => &D.55361
  # DEBUG __beg => "num_vcs"
  # DEBUG __end => &MEM[(void *)"num_vcs" + 7B]
  # DEBUG __ptr => "num_vcs"
  # DEBUG __first => "num_vcs"
  # DEBUG __last => &MEM[(void *)"num_vcs" + 7B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "num_vcs"
  # DEBUG __last => &MEM[(void *)"num_vcs" + 7B]
  # DEBUG __dnew => 7
  # DEBUG D#1 => &D.55361
  # DEBUG this => D#1
  # DEBUG __p => &D.55361.D.13615._M_local_buf
  # DEBUG __k1 => "num_vcs"
  # DEBUG __k2 => &MEM[(void *)"num_vcs" + 7B]
  # DEBUG __d => &D.55361.D.13615._M_local_buf
  # DEBUG __s => "num_vcs"
  # DEBUG __n => 7
  # DEBUG __s1 => &D.55361.D.13615._M_local_buf
  # DEBUG __s2 => "num_vcs"
  # DEBUG __n => 7
  __builtin_memcpy (&D.55361.D.13615._M_local_buf, "num_vcs", 7);
  # DEBUG this => &D.55361
  # DEBUG __n => 7
  # DEBUG D#2 => &D.55361
  # DEBUG __length => 7
  # DEBUG this => D#2
  MEM[(size_type *)&D.55361 + 8B] = 7;
  # DEBUG D#1 => &D.55361
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55361 + 23B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55361 + 23] = 0;
  # DEBUG D#686 => {CLOBBER}
  # DEBUG __dnew => D#686
  _59 = Configuration::GetInt (config_17(D), &D.55361);

  <bb 28>:
  _60 = (double) _59;
  this_8(D)->numVC = _60;
  # DEBUG this => &D.55361
  # DEBUG this => &D.55361
  # DEBUG this => &D.55361
  _63 = MEM[(char * *)&D.55361];
  # DEBUG D#1 => &D.55361
  # DEBUG this => D#1
  # DEBUG this => &D.55361
  if (&D.55361.D.13615._M_local_buf != _63)
    goto <bb 29>;
  else
    goto <bb 30>;

  <bb 29>:
  # DEBUG D#120 => D.55361.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55361
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55361
  # DEBUG this => D#1
  # DEBUG this => &D.55361
  # DEBUG D#117 => &D.55361._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _63
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _63
  # DEBUG this => D#111
  # DEBUG D.65642 => D#112
  operator delete (_63);

  <bb 30>:
  # DEBUG D#121 => &D.55361._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55361 ={v} {CLOBBER};
  # DEBUG this => &D.55362
  # DEBUG this => &D.55362
  # DEBUG D#22 => &D.55364
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55364
  # DEBUG this => &D.55363
  # DEBUG __s => "vc_buf_size"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55363
  # DEBUG D#245 => &D.55363._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55363.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55363]._M_p = &D.55363.D.13615._M_local_buf;
  # DEBUG __s => "vc_buf_size"
  # DEBUG this => &D.55363
  # DEBUG __beg => "vc_buf_size"
  # DEBUG __end => &MEM[(void *)"vc_buf_size" + 11B]
  # DEBUG this => &D.55363
  # DEBUG __beg => "vc_buf_size"
  # DEBUG __end => &MEM[(void *)"vc_buf_size" + 11B]
  # DEBUG this => &D.55363
  # DEBUG __beg => "vc_buf_size"
  # DEBUG __end => &MEM[(void *)"vc_buf_size" + 11B]
  # DEBUG __ptr => "vc_buf_size"
  # DEBUG __first => "vc_buf_size"
  # DEBUG __last => &MEM[(void *)"vc_buf_size" + 11B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "vc_buf_size"
  # DEBUG __last => &MEM[(void *)"vc_buf_size" + 11B]
  # DEBUG __dnew => 11
  # DEBUG D#1 => &D.55363
  # DEBUG this => D#1
  # DEBUG __p => &D.55363.D.13615._M_local_buf
  # DEBUG __k1 => "vc_buf_size"
  # DEBUG __k2 => &MEM[(void *)"vc_buf_size" + 11B]
  # DEBUG __d => &D.55363.D.13615._M_local_buf
  # DEBUG __s => "vc_buf_size"
  # DEBUG __n => 11
  # DEBUG __s1 => &D.55363.D.13615._M_local_buf
  # DEBUG __s2 => "vc_buf_size"
  # DEBUG __n => 11
  __builtin_memcpy (&D.55363.D.13615._M_local_buf, "vc_buf_size", 11);
  # DEBUG this => &D.55363
  # DEBUG __n => 11
  # DEBUG D#2 => &D.55363
  # DEBUG __length => 11
  # DEBUG this => D#2
  MEM[(size_type *)&D.55363 + 8B] = 11;
  # DEBUG D#1 => &D.55363
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55363 + 27B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55363 + 27] = 0;
  # DEBUG D#687 => {CLOBBER}
  # DEBUG __dnew => D#687
  _67 = Configuration::GetInt (config_17(D), &D.55363);

  <bb 31>:
  _68 = (double) _67;
  this_8(D)->depthVC = _68;
  # DEBUG this => &D.55363
  # DEBUG this => &D.55363
  # DEBUG this => &D.55363
  _71 = MEM[(char * *)&D.55363];
  # DEBUG D#1 => &D.55363
  # DEBUG this => D#1
  # DEBUG this => &D.55363
  if (&D.55363.D.13615._M_local_buf != _71)
    goto <bb 32>;
  else
    goto <bb 33>;

  <bb 32>:
  # DEBUG D#120 => D.55363.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55363
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55363
  # DEBUG this => D#1
  # DEBUG this => &D.55363
  # DEBUG D#117 => &D.55363._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _71
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _71
  # DEBUG this => D#111
  # DEBUG D.65660 => D#112
  operator delete (_71);

  <bb 33>:
  # DEBUG D#121 => &D.55363._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55363 ={v} {CLOBBER};
  # DEBUG this => &D.55364
  # DEBUG this => &D.55364
  # DEBUG D#22 => &D.55366
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55366
  # DEBUG this => &D.55365
  # DEBUG __s => "wire_length"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55365
  # DEBUG D#245 => &D.55365._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55365.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55365]._M_p = &D.55365.D.13615._M_local_buf;
  # DEBUG __s => "wire_length"
  # DEBUG this => &D.55365
  # DEBUG __beg => "wire_length"
  # DEBUG __end => &MEM[(void *)"wire_length" + 11B]
  # DEBUG this => &D.55365
  # DEBUG __beg => "wire_length"
  # DEBUG __end => &MEM[(void *)"wire_length" + 11B]
  # DEBUG this => &D.55365
  # DEBUG __beg => "wire_length"
  # DEBUG __end => &MEM[(void *)"wire_length" + 11B]
  # DEBUG __ptr => "wire_length"
  # DEBUG __first => "wire_length"
  # DEBUG __last => &MEM[(void *)"wire_length" + 11B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "wire_length"
  # DEBUG __last => &MEM[(void *)"wire_length" + 11B]
  # DEBUG __dnew => 11
  # DEBUG D#1 => &D.55365
  # DEBUG this => D#1
  # DEBUG __p => &D.55365.D.13615._M_local_buf
  # DEBUG __k1 => "wire_length"
  # DEBUG __k2 => &MEM[(void *)"wire_length" + 11B]
  # DEBUG __d => &D.55365.D.13615._M_local_buf
  # DEBUG __s => "wire_length"
  # DEBUG __n => 11
  # DEBUG __s1 => &D.55365.D.13615._M_local_buf
  # DEBUG __s2 => "wire_length"
  # DEBUG __n => 11
  __builtin_memcpy (&D.55365.D.13615._M_local_buf, "wire_length", 11);
  # DEBUG this => &D.55365
  # DEBUG __n => 11
  # DEBUG D#2 => &D.55365
  # DEBUG __length => 11
  # DEBUG this => D#2
  MEM[(size_type *)&D.55365 + 8B] = 11;
  # DEBUG D#1 => &D.55365
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55365 + 27B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55365 + 27] = 0;
  # DEBUG D#688 => {CLOBBER}
  # DEBUG __dnew => D#688
  _75 = Configuration::GetFloat (&pconfig.D.45344, &D.55365);

  <bb 34>:
  this_8(D)->wire_length = _75;
  # DEBUG this => &D.55365
  # DEBUG this => &D.55365
  # DEBUG this => &D.55365
  _78 = MEM[(char * *)&D.55365];
  # DEBUG D#1 => &D.55365
  # DEBUG this => D#1
  # DEBUG this => &D.55365
  if (&D.55365.D.13615._M_local_buf != _78)
    goto <bb 35>;
  else
    goto <bb 36>;

  <bb 35>:
  # DEBUG D#120 => D.55365.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55365
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55365
  # DEBUG this => D#1
  # DEBUG this => &D.55365
  # DEBUG D#117 => &D.55365._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _78
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _78
  # DEBUG this => D#111
  # DEBUG D.65678 => D#112
  operator delete (_78);

  <bb 36>:
  # DEBUG D#121 => &D.55365._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55365 ={v} {CLOBBER};
  # DEBUG this => &D.55366
  # DEBUG this => &D.55366
  # DEBUG D#22 => &D.55368
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55368
  # DEBUG this => &D.55367
  # DEBUG __s => "Cw_cpl"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55367
  # DEBUG D#245 => &D.55367._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55367.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55367]._M_p = &D.55367.D.13615._M_local_buf;
  # DEBUG __s => "Cw_cpl"
  # DEBUG this => &D.55367
  # DEBUG __beg => "Cw_cpl"
  # DEBUG __end => &MEM[(void *)"Cw_cpl" + 6B]
  # DEBUG this => &D.55367
  # DEBUG __beg => "Cw_cpl"
  # DEBUG __end => &MEM[(void *)"Cw_cpl" + 6B]
  # DEBUG this => &D.55367
  # DEBUG __beg => "Cw_cpl"
  # DEBUG __end => &MEM[(void *)"Cw_cpl" + 6B]
  # DEBUG __ptr => "Cw_cpl"
  # DEBUG __first => "Cw_cpl"
  # DEBUG __last => &MEM[(void *)"Cw_cpl" + 6B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "Cw_cpl"
  # DEBUG __last => &MEM[(void *)"Cw_cpl" + 6B]
  # DEBUG __dnew => 6
  # DEBUG D#1 => &D.55367
  # DEBUG this => D#1
  # DEBUG __p => &D.55367.D.13615._M_local_buf
  # DEBUG __k1 => "Cw_cpl"
  # DEBUG __k2 => &MEM[(void *)"Cw_cpl" + 6B]
  # DEBUG __d => &D.55367.D.13615._M_local_buf
  # DEBUG __s => "Cw_cpl"
  # DEBUG __n => 6
  # DEBUG __s1 => &D.55367.D.13615._M_local_buf
  # DEBUG __s2 => "Cw_cpl"
  # DEBUG __n => 6
  __builtin_memcpy (&D.55367.D.13615._M_local_buf, "Cw_cpl", 6);
  # DEBUG this => &D.55367
  # DEBUG __n => 6
  # DEBUG D#2 => &D.55367
  # DEBUG __length => 6
  # DEBUG this => D#2
  MEM[(size_type *)&D.55367 + 8B] = 6;
  # DEBUG D#1 => &D.55367
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55367 + 22B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55367 + 22] = 0;
  # DEBUG D#689 => {CLOBBER}
  # DEBUG __dnew => D#689
  _82 = Configuration::GetFloat (&pconfig.D.45344, &D.55367);

  <bb 37>:
  this_8(D)->Cw_cpl = _82;
  # DEBUG this => &D.55367
  # DEBUG this => &D.55367
  # DEBUG this => &D.55367
  _85 = MEM[(char * *)&D.55367];
  # DEBUG D#1 => &D.55367
  # DEBUG this => D#1
  # DEBUG this => &D.55367
  if (&D.55367.D.13615._M_local_buf != _85)
    goto <bb 38>;
  else
    goto <bb 39>;

  <bb 38>:
  # DEBUG D#120 => D.55367.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55367
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55367
  # DEBUG this => D#1
  # DEBUG this => &D.55367
  # DEBUG D#117 => &D.55367._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _85
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _85
  # DEBUG this => D#111
  # DEBUG D.65696 => D#112
  operator delete (_85);

  <bb 39>:
  # DEBUG D#121 => &D.55367._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55367 ={v} {CLOBBER};
  # DEBUG this => &D.55368
  # DEBUG this => &D.55368
  # DEBUG D#22 => &D.55370
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55370
  # DEBUG this => &D.55369
  # DEBUG __s => "Cw_gnd"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55369
  # DEBUG D#245 => &D.55369._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55369.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55369]._M_p = &D.55369.D.13615._M_local_buf;
  # DEBUG __s => "Cw_gnd"
  # DEBUG this => &D.55369
  # DEBUG __beg => "Cw_gnd"
  # DEBUG __end => &MEM[(void *)"Cw_gnd" + 6B]
  # DEBUG this => &D.55369
  # DEBUG __beg => "Cw_gnd"
  # DEBUG __end => &MEM[(void *)"Cw_gnd" + 6B]
  # DEBUG this => &D.55369
  # DEBUG __beg => "Cw_gnd"
  # DEBUG __end => &MEM[(void *)"Cw_gnd" + 6B]
  # DEBUG __ptr => "Cw_gnd"
  # DEBUG __first => "Cw_gnd"
  # DEBUG __last => &MEM[(void *)"Cw_gnd" + 6B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "Cw_gnd"
  # DEBUG __last => &MEM[(void *)"Cw_gnd" + 6B]
  # DEBUG __dnew => 6
  # DEBUG D#1 => &D.55369
  # DEBUG this => D#1
  # DEBUG __p => &D.55369.D.13615._M_local_buf
  # DEBUG __k1 => "Cw_gnd"
  # DEBUG __k2 => &MEM[(void *)"Cw_gnd" + 6B]
  # DEBUG __d => &D.55369.D.13615._M_local_buf
  # DEBUG __s => "Cw_gnd"
  # DEBUG __n => 6
  # DEBUG __s1 => &D.55369.D.13615._M_local_buf
  # DEBUG __s2 => "Cw_gnd"
  # DEBUG __n => 6
  __builtin_memcpy (&D.55369.D.13615._M_local_buf, "Cw_gnd", 6);
  # DEBUG this => &D.55369
  # DEBUG __n => 6
  # DEBUG D#2 => &D.55369
  # DEBUG __length => 6
  # DEBUG this => D#2
  MEM[(size_type *)&D.55369 + 8B] = 6;
  # DEBUG D#1 => &D.55369
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55369 + 22B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55369 + 22] = 0;
  # DEBUG D#690 => {CLOBBER}
  # DEBUG __dnew => D#690
  _89 = Configuration::GetFloat (&pconfig.D.45344, &D.55369);

  <bb 40>:
  this_8(D)->Cw_gnd = _89;
  # DEBUG this => &D.55369
  # DEBUG this => &D.55369
  # DEBUG this => &D.55369
  _92 = MEM[(char * *)&D.55369];
  # DEBUG D#1 => &D.55369
  # DEBUG this => D#1
  # DEBUG this => &D.55369
  if (&D.55369.D.13615._M_local_buf != _92)
    goto <bb 41>;
  else
    goto <bb 42>;

  <bb 41>:
  # DEBUG D#120 => D.55369.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55369
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55369
  # DEBUG this => D#1
  # DEBUG this => &D.55369
  # DEBUG D#117 => &D.55369._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _92
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _92
  # DEBUG this => D#111
  # DEBUG D.65714 => D#112
  operator delete (_92);
  pretmp_598 = this_8(D)->Cw_gnd;

  <bb 42>:
  # prephitmp_600 = PHI <_89(40), pretmp_598(41)>
  # DEBUG D#121 => &D.55369._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55369 ={v} {CLOBBER};
  # DEBUG this => &D.55370
  # DEBUG this => &D.55370
  _93 = this_8(D)->Cw_cpl;
  _94 = _93 * 2.0e+0;
  _96 = prephitmp_600 * 2.0e+0;
  _97 = _94 + _96;
  this_8(D)->Cw = _97;
  # DEBUG D#22 => &D.55372
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55372
  # DEBUG this => &D.55371
  # DEBUG __s => "Rw"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55371
  # DEBUG D#245 => &D.55371._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55371.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55371]._M_p = &D.55371.D.13615._M_local_buf;
  # DEBUG __s => "Rw"
  # DEBUG this => &D.55371
  # DEBUG __beg => "Rw"
  # DEBUG __end => &MEM[(void *)"Rw" + 2B]
  # DEBUG this => &D.55371
  # DEBUG __beg => "Rw"
  # DEBUG __end => &MEM[(void *)"Rw" + 2B]
  # DEBUG this => &D.55371
  # DEBUG __beg => "Rw"
  # DEBUG __end => &MEM[(void *)"Rw" + 2B]
  # DEBUG __ptr => "Rw"
  # DEBUG __first => "Rw"
  # DEBUG __last => &MEM[(void *)"Rw" + 2B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "Rw"
  # DEBUG __last => &MEM[(void *)"Rw" + 2B]
  # DEBUG __dnew => 2
  # DEBUG D#1 => &D.55371
  # DEBUG this => D#1
  # DEBUG __p => &D.55371.D.13615._M_local_buf
  # DEBUG __k1 => "Rw"
  # DEBUG __k2 => &MEM[(void *)"Rw" + 2B]
  # DEBUG __d => &D.55371.D.13615._M_local_buf
  # DEBUG __s => "Rw"
  # DEBUG __n => 2
  # DEBUG __s1 => &D.55371.D.13615._M_local_buf
  # DEBUG __s2 => "Rw"
  # DEBUG __n => 2
  __builtin_memcpy (&D.55371.D.13615._M_local_buf, "Rw", 2);
  # DEBUG this => &D.55371
  # DEBUG __n => 2
  # DEBUG D#2 => &D.55371
  # DEBUG __length => 2
  # DEBUG this => D#2
  MEM[(size_type *)&D.55371 + 8B] = 2;
  # DEBUG D#1 => &D.55371
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55371 + 18B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55371 + 18] = 0;
  # DEBUG D#691 => {CLOBBER}
  # DEBUG __dnew => D#691
  _102 = Configuration::GetFloat (&pconfig.D.45344, &D.55371);

  <bb 43>:
  this_8(D)->Rw = _102;
  # DEBUG this => &D.55371
  # DEBUG this => &D.55371
  # DEBUG this => &D.55371
  _105 = MEM[(char * *)&D.55371];
  # DEBUG D#1 => &D.55371
  # DEBUG this => D#1
  # DEBUG this => &D.55371
  if (&D.55371.D.13615._M_local_buf != _105)
    goto <bb 44>;
  else
    goto <bb 45>;

  <bb 44>:
  # DEBUG D#120 => D.55371.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55371
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55371
  # DEBUG this => D#1
  # DEBUG this => &D.55371
  # DEBUG D#117 => &D.55371._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _105
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _105
  # DEBUG this => D#111
  # DEBUG D.65732 => D#112
  operator delete (_105);

  <bb 45>:
  # DEBUG D#121 => &D.55371._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55371 ={v} {CLOBBER};
  # DEBUG this => &D.55372
  # DEBUG this => &D.55372
  # DEBUG D#22 => &D.55374
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55374
  # DEBUG this => &D.55373
  # DEBUG __s => "MetalPitch"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55373
  # DEBUG D#245 => &D.55373._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55373.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55373]._M_p = &D.55373.D.13615._M_local_buf;
  # DEBUG __s => "MetalPitch"
  # DEBUG this => &D.55373
  # DEBUG __beg => "MetalPitch"
  # DEBUG __end => &MEM[(void *)"MetalPitch" + 10B]
  # DEBUG this => &D.55373
  # DEBUG __beg => "MetalPitch"
  # DEBUG __end => &MEM[(void *)"MetalPitch" + 10B]
  # DEBUG this => &D.55373
  # DEBUG __beg => "MetalPitch"
  # DEBUG __end => &MEM[(void *)"MetalPitch" + 10B]
  # DEBUG __ptr => "MetalPitch"
  # DEBUG __first => "MetalPitch"
  # DEBUG __last => &MEM[(void *)"MetalPitch" + 10B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "MetalPitch"
  # DEBUG __last => &MEM[(void *)"MetalPitch" + 10B]
  # DEBUG __dnew => 10
  # DEBUG D#1 => &D.55373
  # DEBUG this => D#1
  # DEBUG __p => &D.55373.D.13615._M_local_buf
  # DEBUG __k1 => "MetalPitch"
  # DEBUG __k2 => &MEM[(void *)"MetalPitch" + 10B]
  # DEBUG __d => &D.55373.D.13615._M_local_buf
  # DEBUG __s => "MetalPitch"
  # DEBUG __n => 10
  # DEBUG __s1 => &D.55373.D.13615._M_local_buf
  # DEBUG __s2 => "MetalPitch"
  # DEBUG __n => 10
  __builtin_memcpy (&D.55373.D.13615._M_local_buf, "MetalPitch", 10);
  # DEBUG this => &D.55373
  # DEBUG __n => 10
  # DEBUG D#2 => &D.55373
  # DEBUG __length => 10
  # DEBUG this => D#2
  MEM[(size_type *)&D.55373 + 8B] = 10;
  # DEBUG D#1 => &D.55373
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55373 + 26B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55373 + 26] = 0;
  # DEBUG D#692 => {CLOBBER}
  # DEBUG __dnew => D#692
  _109 = Configuration::GetFloat (&pconfig.D.45344, &D.55373);

  <bb 46>:
  this_8(D)->MetalPitch = _109;
  # DEBUG this => &D.55373
  # DEBUG this => &D.55373
  # DEBUG this => &D.55373
  _112 = MEM[(char * *)&D.55373];
  # DEBUG D#1 => &D.55373
  # DEBUG this => D#1
  # DEBUG this => &D.55373
  if (&D.55373.D.13615._M_local_buf != _112)
    goto <bb 47>;
  else
    goto <bb 48>;

  <bb 47>:
  # DEBUG D#120 => D.55373.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55373
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55373
  # DEBUG this => D#1
  # DEBUG this => &D.55373
  # DEBUG D#117 => &D.55373._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _112
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _112
  # DEBUG this => D#111
  # DEBUG D.65750 => D#112
  operator delete (_112);

  <bb 48>:
  # DEBUG D#121 => &D.55373._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55373 ={v} {CLOBBER};
  # DEBUG this => &D.55374
  # DEBUG this => &D.55374
  # DEBUG D#22 => &D.55376
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55376
  # DEBUG this => &D.55375
  # DEBUG __s => "LAMBDA"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55375
  # DEBUG D#245 => &D.55375._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55375.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55375]._M_p = &D.55375.D.13615._M_local_buf;
  # DEBUG __s => "LAMBDA"
  # DEBUG this => &D.55375
  # DEBUG __beg => "LAMBDA"
  # DEBUG __end => &MEM[(void *)"LAMBDA" + 6B]
  # DEBUG this => &D.55375
  # DEBUG __beg => "LAMBDA"
  # DEBUG __end => &MEM[(void *)"LAMBDA" + 6B]
  # DEBUG this => &D.55375
  # DEBUG __beg => "LAMBDA"
  # DEBUG __end => &MEM[(void *)"LAMBDA" + 6B]
  # DEBUG __ptr => "LAMBDA"
  # DEBUG __first => "LAMBDA"
  # DEBUG __last => &MEM[(void *)"LAMBDA" + 6B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "LAMBDA"
  # DEBUG __last => &MEM[(void *)"LAMBDA" + 6B]
  # DEBUG __dnew => 6
  # DEBUG D#1 => &D.55375
  # DEBUG this => D#1
  # DEBUG __p => &D.55375.D.13615._M_local_buf
  # DEBUG __k1 => "LAMBDA"
  # DEBUG __k2 => &MEM[(void *)"LAMBDA" + 6B]
  # DEBUG __d => &D.55375.D.13615._M_local_buf
  # DEBUG __s => "LAMBDA"
  # DEBUG __n => 6
  # DEBUG __s1 => &D.55375.D.13615._M_local_buf
  # DEBUG __s2 => "LAMBDA"
  # DEBUG __n => 6
  __builtin_memcpy (&D.55375.D.13615._M_local_buf, "LAMBDA", 6);
  # DEBUG this => &D.55375
  # DEBUG __n => 6
  # DEBUG D#2 => &D.55375
  # DEBUG __length => 6
  # DEBUG this => D#2
  MEM[(size_type *)&D.55375 + 8B] = 6;
  # DEBUG D#1 => &D.55375
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55375 + 22B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55375 + 22] = 0;
  # DEBUG D#693 => {CLOBBER}
  # DEBUG __dnew => D#693
  _116 = Configuration::GetFloat (&pconfig.D.45344, &D.55375);

  <bb 49>:
  this_8(D)->LAMBDA = _116;
  # DEBUG this => &D.55375
  # DEBUG this => &D.55375
  # DEBUG this => &D.55375
  _119 = MEM[(char * *)&D.55375];
  # DEBUG D#1 => &D.55375
  # DEBUG this => D#1
  # DEBUG this => &D.55375
  if (&D.55375.D.13615._M_local_buf != _119)
    goto <bb 50>;
  else
    goto <bb 51>;

  <bb 50>:
  # DEBUG D#120 => D.55375.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55375
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55375
  # DEBUG this => D#1
  # DEBUG this => &D.55375
  # DEBUG D#117 => &D.55375._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _119
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _119
  # DEBUG this => D#111
  # DEBUG D.65768 => D#112
  operator delete (_119);

  <bb 51>:
  # DEBUG D#121 => &D.55375._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55375 ={v} {CLOBBER};
  # DEBUG this => &D.55376
  # DEBUG this => &D.55376
  # DEBUG D#22 => &D.55378
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55378
  # DEBUG this => &D.55377
  # DEBUG __s => "Cd"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55377
  # DEBUG D#245 => &D.55377._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55377.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55377]._M_p = &D.55377.D.13615._M_local_buf;
  # DEBUG __s => "Cd"
  # DEBUG this => &D.55377
  # DEBUG __beg => "Cd"
  # DEBUG __end => &MEM[(void *)"Cd" + 2B]
  # DEBUG this => &D.55377
  # DEBUG __beg => "Cd"
  # DEBUG __end => &MEM[(void *)"Cd" + 2B]
  # DEBUG this => &D.55377
  # DEBUG __beg => "Cd"
  # DEBUG __end => &MEM[(void *)"Cd" + 2B]
  # DEBUG __ptr => "Cd"
  # DEBUG __first => "Cd"
  # DEBUG __last => &MEM[(void *)"Cd" + 2B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "Cd"
  # DEBUG __last => &MEM[(void *)"Cd" + 2B]
  # DEBUG __dnew => 2
  # DEBUG D#1 => &D.55377
  # DEBUG this => D#1
  # DEBUG __p => &D.55377.D.13615._M_local_buf
  # DEBUG __k1 => "Cd"
  # DEBUG __k2 => &MEM[(void *)"Cd" + 2B]
  # DEBUG __d => &D.55377.D.13615._M_local_buf
  # DEBUG __s => "Cd"
  # DEBUG __n => 2
  # DEBUG __s1 => &D.55377.D.13615._M_local_buf
  # DEBUG __s2 => "Cd"
  # DEBUG __n => 2
  __builtin_memcpy (&D.55377.D.13615._M_local_buf, "Cd", 2);
  # DEBUG this => &D.55377
  # DEBUG __n => 2
  # DEBUG D#2 => &D.55377
  # DEBUG __length => 2
  # DEBUG this => D#2
  MEM[(size_type *)&D.55377 + 8B] = 2;
  # DEBUG D#1 => &D.55377
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55377 + 18B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55377 + 18] = 0;
  # DEBUG D#694 => {CLOBBER}
  # DEBUG __dnew => D#694
  _123 = Configuration::GetFloat (&pconfig.D.45344, &D.55377);

  <bb 52>:
  this_8(D)->Cd = _123;
  # DEBUG this => &D.55377
  # DEBUG this => &D.55377
  # DEBUG this => &D.55377
  _126 = MEM[(char * *)&D.55377];
  # DEBUG D#1 => &D.55377
  # DEBUG this => D#1
  # DEBUG this => &D.55377
  if (&D.55377.D.13615._M_local_buf != _126)
    goto <bb 53>;
  else
    goto <bb 54>;

  <bb 53>:
  # DEBUG D#120 => D.55377.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55377
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55377
  # DEBUG this => D#1
  # DEBUG this => &D.55377
  # DEBUG D#117 => &D.55377._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _126
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _126
  # DEBUG this => D#111
  # DEBUG D.65786 => D#112
  operator delete (_126);

  <bb 54>:
  # DEBUG D#121 => &D.55377._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55377 ={v} {CLOBBER};
  # DEBUG this => &D.55378
  # DEBUG this => &D.55378
  # DEBUG D#22 => &D.55380
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55380
  # DEBUG this => &D.55379
  # DEBUG __s => "Cg"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55379
  # DEBUG D#245 => &D.55379._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55379.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55379]._M_p = &D.55379.D.13615._M_local_buf;
  # DEBUG __s => "Cg"
  # DEBUG this => &D.55379
  # DEBUG __beg => "Cg"
  # DEBUG __end => &MEM[(void *)"Cg" + 2B]
  # DEBUG this => &D.55379
  # DEBUG __beg => "Cg"
  # DEBUG __end => &MEM[(void *)"Cg" + 2B]
  # DEBUG this => &D.55379
  # DEBUG __beg => "Cg"
  # DEBUG __end => &MEM[(void *)"Cg" + 2B]
  # DEBUG __ptr => "Cg"
  # DEBUG __first => "Cg"
  # DEBUG __last => &MEM[(void *)"Cg" + 2B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "Cg"
  # DEBUG __last => &MEM[(void *)"Cg" + 2B]
  # DEBUG __dnew => 2
  # DEBUG D#1 => &D.55379
  # DEBUG this => D#1
  # DEBUG __p => &D.55379.D.13615._M_local_buf
  # DEBUG __k1 => "Cg"
  # DEBUG __k2 => &MEM[(void *)"Cg" + 2B]
  # DEBUG __d => &D.55379.D.13615._M_local_buf
  # DEBUG __s => "Cg"
  # DEBUG __n => 2
  # DEBUG __s1 => &D.55379.D.13615._M_local_buf
  # DEBUG __s2 => "Cg"
  # DEBUG __n => 2
  __builtin_memcpy (&D.55379.D.13615._M_local_buf, "Cg", 2);
  # DEBUG this => &D.55379
  # DEBUG __n => 2
  # DEBUG D#2 => &D.55379
  # DEBUG __length => 2
  # DEBUG this => D#2
  MEM[(size_type *)&D.55379 + 8B] = 2;
  # DEBUG D#1 => &D.55379
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55379 + 18B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55379 + 18] = 0;
  # DEBUG D#695 => {CLOBBER}
  # DEBUG __dnew => D#695
  _130 = Configuration::GetFloat (&pconfig.D.45344, &D.55379);

  <bb 55>:
  this_8(D)->Cg = _130;
  # DEBUG this => &D.55379
  # DEBUG this => &D.55379
  # DEBUG this => &D.55379
  _133 = MEM[(char * *)&D.55379];
  # DEBUG D#1 => &D.55379
  # DEBUG this => D#1
  # DEBUG this => &D.55379
  if (&D.55379.D.13615._M_local_buf != _133)
    goto <bb 56>;
  else
    goto <bb 57>;

  <bb 56>:
  # DEBUG D#120 => D.55379.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55379
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55379
  # DEBUG this => D#1
  # DEBUG this => &D.55379
  # DEBUG D#117 => &D.55379._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _133
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _133
  # DEBUG this => D#111
  # DEBUG D.65804 => D#112
  operator delete (_133);

  <bb 57>:
  # DEBUG D#121 => &D.55379._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55379 ={v} {CLOBBER};
  # DEBUG this => &D.55380
  # DEBUG this => &D.55380
  # DEBUG D#22 => &D.55382
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55382
  # DEBUG this => &D.55381
  # DEBUG __s => "Cgdl"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55381
  # DEBUG D#245 => &D.55381._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55381.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55381]._M_p = &D.55381.D.13615._M_local_buf;
  # DEBUG __s => "Cgdl"
  # DEBUG this => &D.55381
  # DEBUG __beg => "Cgdl"
  # DEBUG __end => &MEM[(void *)"Cgdl" + 4B]
  # DEBUG this => &D.55381
  # DEBUG __beg => "Cgdl"
  # DEBUG __end => &MEM[(void *)"Cgdl" + 4B]
  # DEBUG this => &D.55381
  # DEBUG __beg => "Cgdl"
  # DEBUG __end => &MEM[(void *)"Cgdl" + 4B]
  # DEBUG __ptr => "Cgdl"
  # DEBUG __first => "Cgdl"
  # DEBUG __last => &MEM[(void *)"Cgdl" + 4B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "Cgdl"
  # DEBUG __last => &MEM[(void *)"Cgdl" + 4B]
  # DEBUG __dnew => 4
  # DEBUG D#1 => &D.55381
  # DEBUG this => D#1
  # DEBUG __p => &D.55381.D.13615._M_local_buf
  # DEBUG __k1 => "Cgdl"
  # DEBUG __k2 => &MEM[(void *)"Cgdl" + 4B]
  # DEBUG __d => &D.55381.D.13615._M_local_buf
  # DEBUG __s => "Cgdl"
  # DEBUG __n => 4
  # DEBUG __s1 => &D.55381.D.13615._M_local_buf
  # DEBUG __s2 => "Cgdl"
  # DEBUG __n => 4
  __builtin_memcpy (&D.55381.D.13615._M_local_buf, "Cgdl", 4);
  # DEBUG this => &D.55381
  # DEBUG __n => 4
  # DEBUG D#2 => &D.55381
  # DEBUG __length => 4
  # DEBUG this => D#2
  MEM[(size_type *)&D.55381 + 8B] = 4;
  # DEBUG D#1 => &D.55381
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55381 + 20B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55381 + 20] = 0;
  # DEBUG D#696 => {CLOBBER}
  # DEBUG __dnew => D#696
  _137 = Configuration::GetFloat (&pconfig.D.45344, &D.55381);

  <bb 58>:
  this_8(D)->Cgdl = _137;
  # DEBUG this => &D.55381
  # DEBUG this => &D.55381
  # DEBUG this => &D.55381
  _140 = MEM[(char * *)&D.55381];
  # DEBUG D#1 => &D.55381
  # DEBUG this => D#1
  # DEBUG this => &D.55381
  if (&D.55381.D.13615._M_local_buf != _140)
    goto <bb 59>;
  else
    goto <bb 60>;

  <bb 59>:
  # DEBUG D#120 => D.55381.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55381
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55381
  # DEBUG this => D#1
  # DEBUG this => &D.55381
  # DEBUG D#117 => &D.55381._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _140
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _140
  # DEBUG this => D#111
  # DEBUG D.65822 => D#112
  operator delete (_140);

  <bb 60>:
  # DEBUG D#121 => &D.55381._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55381 ={v} {CLOBBER};
  # DEBUG this => &D.55382
  # DEBUG this => &D.55382
  # DEBUG D#22 => &D.55384
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55384
  # DEBUG this => &D.55383
  # DEBUG __s => "Cd_pwr"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55383
  # DEBUG D#245 => &D.55383._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55383.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55383]._M_p = &D.55383.D.13615._M_local_buf;
  # DEBUG __s => "Cd_pwr"
  # DEBUG this => &D.55383
  # DEBUG __beg => "Cd_pwr"
  # DEBUG __end => &MEM[(void *)"Cd_pwr" + 6B]
  # DEBUG this => &D.55383
  # DEBUG __beg => "Cd_pwr"
  # DEBUG __end => &MEM[(void *)"Cd_pwr" + 6B]
  # DEBUG this => &D.55383
  # DEBUG __beg => "Cd_pwr"
  # DEBUG __end => &MEM[(void *)"Cd_pwr" + 6B]
  # DEBUG __ptr => "Cd_pwr"
  # DEBUG __first => "Cd_pwr"
  # DEBUG __last => &MEM[(void *)"Cd_pwr" + 6B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "Cd_pwr"
  # DEBUG __last => &MEM[(void *)"Cd_pwr" + 6B]
  # DEBUG __dnew => 6
  # DEBUG D#1 => &D.55383
  # DEBUG this => D#1
  # DEBUG __p => &D.55383.D.13615._M_local_buf
  # DEBUG __k1 => "Cd_pwr"
  # DEBUG __k2 => &MEM[(void *)"Cd_pwr" + 6B]
  # DEBUG __d => &D.55383.D.13615._M_local_buf
  # DEBUG __s => "Cd_pwr"
  # DEBUG __n => 6
  # DEBUG __s1 => &D.55383.D.13615._M_local_buf
  # DEBUG __s2 => "Cd_pwr"
  # DEBUG __n => 6
  __builtin_memcpy (&D.55383.D.13615._M_local_buf, "Cd_pwr", 6);
  # DEBUG this => &D.55383
  # DEBUG __n => 6
  # DEBUG D#2 => &D.55383
  # DEBUG __length => 6
  # DEBUG this => D#2
  MEM[(size_type *)&D.55383 + 8B] = 6;
  # DEBUG D#1 => &D.55383
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55383 + 22B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55383 + 22] = 0;
  # DEBUG D#697 => {CLOBBER}
  # DEBUG __dnew => D#697
  _144 = Configuration::GetFloat (&pconfig.D.45344, &D.55383);

  <bb 61>:
  this_8(D)->Cd_pwr = _144;
  # DEBUG this => &D.55383
  # DEBUG this => &D.55383
  # DEBUG this => &D.55383
  _147 = MEM[(char * *)&D.55383];
  # DEBUG D#1 => &D.55383
  # DEBUG this => D#1
  # DEBUG this => &D.55383
  if (&D.55383.D.13615._M_local_buf != _147)
    goto <bb 62>;
  else
    goto <bb 63>;

  <bb 62>:
  # DEBUG D#120 => D.55383.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55383
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55383
  # DEBUG this => D#1
  # DEBUG this => &D.55383
  # DEBUG D#117 => &D.55383._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _147
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _147
  # DEBUG this => D#111
  # DEBUG D.65840 => D#112
  operator delete (_147);

  <bb 63>:
  # DEBUG D#121 => &D.55383._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55383 ={v} {CLOBBER};
  # DEBUG this => &D.55384
  # DEBUG this => &D.55384
  # DEBUG D#22 => &D.55386
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55386
  # DEBUG this => &D.55385
  # DEBUG __s => "Cg_pwr"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55385
  # DEBUG D#245 => &D.55385._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55385.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55385]._M_p = &D.55385.D.13615._M_local_buf;
  # DEBUG __s => "Cg_pwr"
  # DEBUG this => &D.55385
  # DEBUG __beg => "Cg_pwr"
  # DEBUG __end => &MEM[(void *)"Cg_pwr" + 6B]
  # DEBUG this => &D.55385
  # DEBUG __beg => "Cg_pwr"
  # DEBUG __end => &MEM[(void *)"Cg_pwr" + 6B]
  # DEBUG this => &D.55385
  # DEBUG __beg => "Cg_pwr"
  # DEBUG __end => &MEM[(void *)"Cg_pwr" + 6B]
  # DEBUG __ptr => "Cg_pwr"
  # DEBUG __first => "Cg_pwr"
  # DEBUG __last => &MEM[(void *)"Cg_pwr" + 6B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "Cg_pwr"
  # DEBUG __last => &MEM[(void *)"Cg_pwr" + 6B]
  # DEBUG __dnew => 6
  # DEBUG D#1 => &D.55385
  # DEBUG this => D#1
  # DEBUG __p => &D.55385.D.13615._M_local_buf
  # DEBUG __k1 => "Cg_pwr"
  # DEBUG __k2 => &MEM[(void *)"Cg_pwr" + 6B]
  # DEBUG __d => &D.55385.D.13615._M_local_buf
  # DEBUG __s => "Cg_pwr"
  # DEBUG __n => 6
  # DEBUG __s1 => &D.55385.D.13615._M_local_buf
  # DEBUG __s2 => "Cg_pwr"
  # DEBUG __n => 6
  __builtin_memcpy (&D.55385.D.13615._M_local_buf, "Cg_pwr", 6);
  # DEBUG this => &D.55385
  # DEBUG __n => 6
  # DEBUG D#2 => &D.55385
  # DEBUG __length => 6
  # DEBUG this => D#2
  MEM[(size_type *)&D.55385 + 8B] = 6;
  # DEBUG D#1 => &D.55385
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55385 + 22B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55385 + 22] = 0;
  # DEBUG D#698 => {CLOBBER}
  # DEBUG __dnew => D#698
  _151 = Configuration::GetFloat (&pconfig.D.45344, &D.55385);

  <bb 64>:
  this_8(D)->Cg_pwr = _151;
  # DEBUG this => &D.55385
  # DEBUG this => &D.55385
  # DEBUG this => &D.55385
  _154 = MEM[(char * *)&D.55385];
  # DEBUG D#1 => &D.55385
  # DEBUG this => D#1
  # DEBUG this => &D.55385
  if (&D.55385.D.13615._M_local_buf != _154)
    goto <bb 65>;
  else
    goto <bb 66>;

  <bb 65>:
  # DEBUG D#120 => D.55385.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55385
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55385
  # DEBUG this => D#1
  # DEBUG this => &D.55385
  # DEBUG D#117 => &D.55385._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _154
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _154
  # DEBUG this => D#111
  # DEBUG D.65858 => D#112
  operator delete (_154);

  <bb 66>:
  # DEBUG D#121 => &D.55385._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55385 ={v} {CLOBBER};
  # DEBUG this => &D.55386
  # DEBUG this => &D.55386
  # DEBUG D#22 => &D.55388
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55388
  # DEBUG this => &D.55387
  # DEBUG __s => "IoffN"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55387
  # DEBUG D#245 => &D.55387._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55387.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55387]._M_p = &D.55387.D.13615._M_local_buf;
  # DEBUG __s => "IoffN"
  # DEBUG this => &D.55387
  # DEBUG __beg => "IoffN"
  # DEBUG __end => &MEM[(void *)"IoffN" + 5B]
  # DEBUG this => &D.55387
  # DEBUG __beg => "IoffN"
  # DEBUG __end => &MEM[(void *)"IoffN" + 5B]
  # DEBUG this => &D.55387
  # DEBUG __beg => "IoffN"
  # DEBUG __end => &MEM[(void *)"IoffN" + 5B]
  # DEBUG __ptr => "IoffN"
  # DEBUG __first => "IoffN"
  # DEBUG __last => &MEM[(void *)"IoffN" + 5B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "IoffN"
  # DEBUG __last => &MEM[(void *)"IoffN" + 5B]
  # DEBUG __dnew => 5
  # DEBUG D#1 => &D.55387
  # DEBUG this => D#1
  # DEBUG __p => &D.55387.D.13615._M_local_buf
  # DEBUG __k1 => "IoffN"
  # DEBUG __k2 => &MEM[(void *)"IoffN" + 5B]
  # DEBUG __d => &D.55387.D.13615._M_local_buf
  # DEBUG __s => "IoffN"
  # DEBUG __n => 5
  # DEBUG __s1 => &D.55387.D.13615._M_local_buf
  # DEBUG __s2 => "IoffN"
  # DEBUG __n => 5
  __builtin_memcpy (&D.55387.D.13615._M_local_buf, "IoffN", 5);
  # DEBUG this => &D.55387
  # DEBUG __n => 5
  # DEBUG D#2 => &D.55387
  # DEBUG __length => 5
  # DEBUG this => D#2
  MEM[(size_type *)&D.55387 + 8B] = 5;
  # DEBUG D#1 => &D.55387
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55387 + 21B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55387 + 21] = 0;
  # DEBUG D#699 => {CLOBBER}
  # DEBUG __dnew => D#699
  _158 = Configuration::GetFloat (&pconfig.D.45344, &D.55387);

  <bb 67>:
  this_8(D)->IoffN = _158;
  # DEBUG this => &D.55387
  # DEBUG this => &D.55387
  # DEBUG this => &D.55387
  _161 = MEM[(char * *)&D.55387];
  # DEBUG D#1 => &D.55387
  # DEBUG this => D#1
  # DEBUG this => &D.55387
  if (&D.55387.D.13615._M_local_buf != _161)
    goto <bb 68>;
  else
    goto <bb 69>;

  <bb 68>:
  # DEBUG D#120 => D.55387.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55387
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55387
  # DEBUG this => D#1
  # DEBUG this => &D.55387
  # DEBUG D#117 => &D.55387._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _161
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _161
  # DEBUG this => D#111
  # DEBUG D.65876 => D#112
  operator delete (_161);

  <bb 69>:
  # DEBUG D#121 => &D.55387._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55387 ={v} {CLOBBER};
  # DEBUG this => &D.55388
  # DEBUG this => &D.55388
  # DEBUG D#22 => &D.55390
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55390
  # DEBUG this => &D.55389
  # DEBUG __s => "IoffP"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55389
  # DEBUG D#245 => &D.55389._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55389.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55389]._M_p = &D.55389.D.13615._M_local_buf;
  # DEBUG __s => "IoffP"
  # DEBUG this => &D.55389
  # DEBUG __beg => "IoffP"
  # DEBUG __end => &MEM[(void *)"IoffP" + 5B]
  # DEBUG this => &D.55389
  # DEBUG __beg => "IoffP"
  # DEBUG __end => &MEM[(void *)"IoffP" + 5B]
  # DEBUG this => &D.55389
  # DEBUG __beg => "IoffP"
  # DEBUG __end => &MEM[(void *)"IoffP" + 5B]
  # DEBUG __ptr => "IoffP"
  # DEBUG __first => "IoffP"
  # DEBUG __last => &MEM[(void *)"IoffP" + 5B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "IoffP"
  # DEBUG __last => &MEM[(void *)"IoffP" + 5B]
  # DEBUG __dnew => 5
  # DEBUG D#1 => &D.55389
  # DEBUG this => D#1
  # DEBUG __p => &D.55389.D.13615._M_local_buf
  # DEBUG __k1 => "IoffP"
  # DEBUG __k2 => &MEM[(void *)"IoffP" + 5B]
  # DEBUG __d => &D.55389.D.13615._M_local_buf
  # DEBUG __s => "IoffP"
  # DEBUG __n => 5
  # DEBUG __s1 => &D.55389.D.13615._M_local_buf
  # DEBUG __s2 => "IoffP"
  # DEBUG __n => 5
  __builtin_memcpy (&D.55389.D.13615._M_local_buf, "IoffP", 5);
  # DEBUG this => &D.55389
  # DEBUG __n => 5
  # DEBUG D#2 => &D.55389
  # DEBUG __length => 5
  # DEBUG this => D#2
  MEM[(size_type *)&D.55389 + 8B] = 5;
  # DEBUG D#1 => &D.55389
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55389 + 21B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55389 + 21] = 0;
  # DEBUG D#700 => {CLOBBER}
  # DEBUG __dnew => D#700
  _165 = Configuration::GetFloat (&pconfig.D.45344, &D.55389);

  <bb 70>:
  this_8(D)->IoffP = _165;
  # DEBUG this => &D.55389
  # DEBUG this => &D.55389
  # DEBUG this => &D.55389
  _168 = MEM[(char * *)&D.55389];
  # DEBUG D#1 => &D.55389
  # DEBUG this => D#1
  # DEBUG this => &D.55389
  if (&D.55389.D.13615._M_local_buf != _168)
    goto <bb 71>;
  else
    goto <bb 72>;

  <bb 71>:
  # DEBUG D#120 => D.55389.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55389
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55389
  # DEBUG this => D#1
  # DEBUG this => &D.55389
  # DEBUG D#117 => &D.55389._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _168
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _168
  # DEBUG this => D#111
  # DEBUG D.65894 => D#112
  operator delete (_168);

  <bb 72>:
  # DEBUG D#121 => &D.55389._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55389 ={v} {CLOBBER};
  # DEBUG this => &D.55390
  # DEBUG this => &D.55390
  # DEBUG D#22 => &D.55392
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55392
  # DEBUG this => &D.55391
  # DEBUG __s => "IoffSRAM"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55391
  # DEBUG D#245 => &D.55391._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55391.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55391]._M_p = &D.55391.D.13615._M_local_buf;
  # DEBUG __s => "IoffSRAM"
  # DEBUG this => &D.55391
  # DEBUG __beg => "IoffSRAM"
  # DEBUG __end => &MEM[(void *)"IoffSRAM" + 8B]
  # DEBUG this => &D.55391
  # DEBUG __beg => "IoffSRAM"
  # DEBUG __end => &MEM[(void *)"IoffSRAM" + 8B]
  # DEBUG this => &D.55391
  # DEBUG __beg => "IoffSRAM"
  # DEBUG __end => &MEM[(void *)"IoffSRAM" + 8B]
  # DEBUG __ptr => "IoffSRAM"
  # DEBUG __first => "IoffSRAM"
  # DEBUG __last => &MEM[(void *)"IoffSRAM" + 8B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "IoffSRAM"
  # DEBUG __last => &MEM[(void *)"IoffSRAM" + 8B]
  # DEBUG __dnew => 8
  # DEBUG D#1 => &D.55391
  # DEBUG this => D#1
  # DEBUG __p => &D.55391.D.13615._M_local_buf
  # DEBUG __k1 => "IoffSRAM"
  # DEBUG __k2 => &MEM[(void *)"IoffSRAM" + 8B]
  # DEBUG __d => &D.55391.D.13615._M_local_buf
  # DEBUG __s => "IoffSRAM"
  # DEBUG __n => 8
  # DEBUG __s1 => &D.55391.D.13615._M_local_buf
  # DEBUG __s2 => "IoffSRAM"
  # DEBUG __n => 8
  __builtin_memcpy (&D.55391.D.13615._M_local_buf, "IoffSRAM", 8);
  # DEBUG this => &D.55391
  # DEBUG __n => 8
  # DEBUG D#2 => &D.55391
  # DEBUG __length => 8
  # DEBUG this => D#2
  MEM[(size_type *)&D.55391 + 8B] = 8;
  # DEBUG D#1 => &D.55391
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55391 + 24B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55391 + 24] = 0;
  # DEBUG D#701 => {CLOBBER}
  # DEBUG __dnew => D#701
  _172 = Configuration::GetFloat (&pconfig.D.45344, &D.55391);

  <bb 73>:
  this_8(D)->IoffSRAM = _172;
  # DEBUG this => &D.55391
  # DEBUG this => &D.55391
  # DEBUG this => &D.55391
  _175 = MEM[(char * *)&D.55391];
  # DEBUG D#1 => &D.55391
  # DEBUG this => D#1
  # DEBUG this => &D.55391
  if (&D.55391.D.13615._M_local_buf != _175)
    goto <bb 74>;
  else
    goto <bb 75>;

  <bb 74>:
  # DEBUG D#120 => D.55391.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55391
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55391
  # DEBUG this => D#1
  # DEBUG this => &D.55391
  # DEBUG D#117 => &D.55391._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _175
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _175
  # DEBUG this => D#111
  # DEBUG D.65912 => D#112
  operator delete (_175);

  <bb 75>:
  # DEBUG D#121 => &D.55391._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55391 ={v} {CLOBBER};
  # DEBUG this => &D.55392
  # DEBUG this => &D.55392
  # DEBUG D#22 => &D.55394
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55394
  # DEBUG this => &D.55393
  # DEBUG __s => "R"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55393
  # DEBUG D#245 => &D.55393._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55393.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55393]._M_p = &D.55393.D.13615._M_local_buf;
  # DEBUG __s => "R"
  # DEBUG this => &D.55393
  # DEBUG __beg => "R"
  # DEBUG __end => &MEM[(void *)"R" + 1B]
  # DEBUG this => &D.55393
  # DEBUG __beg => "R"
  # DEBUG __end => &MEM[(void *)"R" + 1B]
  # DEBUG this => &D.55393
  # DEBUG __beg => "R"
  # DEBUG __end => &MEM[(void *)"R" + 1B]
  # DEBUG __ptr => "R"
  # DEBUG __first => "R"
  # DEBUG __last => &MEM[(void *)"R" + 1B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "R"
  # DEBUG __last => &MEM[(void *)"R" + 1B]
  # DEBUG __dnew => 1
  # DEBUG D#1 => &D.55393
  # DEBUG this => D#1
  # DEBUG __p => &D.55393.D.13615._M_local_buf
  # DEBUG __k1 => "R"
  # DEBUG __k2 => &MEM[(void *)"R" + 1B]
  # DEBUG __d => &D.55393.D.13615._M_local_buf
  # DEBUG __s => "R"
  # DEBUG __n => 1
  # DEBUG D#7 => "R"
  # DEBUG __c1 => &D.55393.D.13615._M_local_buf
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55393 + 16] = 82;
  # DEBUG this => &D.55393
  # DEBUG __n => 1
  # DEBUG D#2 => &D.55393
  # DEBUG __length => 1
  # DEBUG this => D#2
  MEM[(size_type *)&D.55393 + 8B] = 1;
  # DEBUG D#1 => &D.55393
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55393 + 17B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55393 + 17] = 0;
  # DEBUG D#702 => {CLOBBER}
  # DEBUG __dnew => D#702
  _179 = Configuration::GetFloat (&pconfig.D.45344, &D.55393);

  <bb 76>:
  this_8(D)->R = _179;
  # DEBUG this => &D.55393
  # DEBUG this => &D.55393
  # DEBUG this => &D.55393
  _182 = MEM[(char * *)&D.55393];
  # DEBUG D#1 => &D.55393
  # DEBUG this => D#1
  # DEBUG this => &D.55393
  if (&D.55393.D.13615._M_local_buf != _182)
    goto <bb 77>;
  else
    goto <bb 78>;

  <bb 77>:
  # DEBUG D#120 => D.55393.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55393
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55393
  # DEBUG this => D#1
  # DEBUG this => &D.55393
  # DEBUG D#117 => &D.55393._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _182
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _182
  # DEBUG this => D#111
  # DEBUG D.65930 => D#112
  operator delete (_182);

  <bb 78>:
  # DEBUG D#121 => &D.55393._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55393 ={v} {CLOBBER};
  # DEBUG this => &D.55394
  # DEBUG this => &D.55394
  _183 = this_8(D)->Cg;
  _184 = this_8(D)->Cgdl;
  _185 = _183 + _184;
  _186 = _185 * 3.0e+0;
  this_8(D)->Ci_delay = _186;
  _188 = this_8(D)->Cd;
  _189 = _188 * 3.0e+0;
  this_8(D)->Co_delay = _189;
  _191 = this_8(D)->Cg_pwr;
  _192 = _191 * 3.0e+0;
  this_8(D)->Ci = _192;
  _194 = this_8(D)->Cd_pwr;
  _195 = _194 * 3.0e+0;
  this_8(D)->Co = _195;
  # DEBUG D#22 => &D.55396
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55396
  # DEBUG this => &D.55395
  # DEBUG __s => "Vdd"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55395
  # DEBUG D#245 => &D.55395._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55395.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55395]._M_p = &D.55395.D.13615._M_local_buf;
  # DEBUG __s => "Vdd"
  # DEBUG this => &D.55395
  # DEBUG __beg => "Vdd"
  # DEBUG __end => &MEM[(void *)"Vdd" + 3B]
  # DEBUG this => &D.55395
  # DEBUG __beg => "Vdd"
  # DEBUG __end => &MEM[(void *)"Vdd" + 3B]
  # DEBUG this => &D.55395
  # DEBUG __beg => "Vdd"
  # DEBUG __end => &MEM[(void *)"Vdd" + 3B]
  # DEBUG __ptr => "Vdd"
  # DEBUG __first => "Vdd"
  # DEBUG __last => &MEM[(void *)"Vdd" + 3B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "Vdd"
  # DEBUG __last => &MEM[(void *)"Vdd" + 3B]
  # DEBUG __dnew => 3
  # DEBUG D#1 => &D.55395
  # DEBUG this => D#1
  # DEBUG __p => &D.55395.D.13615._M_local_buf
  # DEBUG __k1 => "Vdd"
  # DEBUG __k2 => &MEM[(void *)"Vdd" + 3B]
  # DEBUG __d => &D.55395.D.13615._M_local_buf
  # DEBUG __s => "Vdd"
  # DEBUG __n => 3
  # DEBUG __s1 => &D.55395.D.13615._M_local_buf
  # DEBUG __s2 => "Vdd"
  # DEBUG __n => 3
  __builtin_memcpy (&D.55395.D.13615._M_local_buf, "Vdd", 3);
  # DEBUG this => &D.55395
  # DEBUG __n => 3
  # DEBUG D#2 => &D.55395
  # DEBUG __length => 3
  # DEBUG this => D#2
  MEM[(size_type *)&D.55395 + 8B] = 3;
  # DEBUG D#1 => &D.55395
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55395 + 19B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55395 + 19] = 0;
  # DEBUG D#703 => {CLOBBER}
  # DEBUG __dnew => D#703
  _200 = Configuration::GetFloat (&pconfig.D.45344, &D.55395);

  <bb 79>:
  this_8(D)->Vdd = _200;
  # DEBUG this => &D.55395
  # DEBUG this => &D.55395
  # DEBUG this => &D.55395
  _203 = MEM[(char * *)&D.55395];
  # DEBUG D#1 => &D.55395
  # DEBUG this => D#1
  # DEBUG this => &D.55395
  if (&D.55395.D.13615._M_local_buf != _203)
    goto <bb 80>;
  else
    goto <bb 81>;

  <bb 80>:
  # DEBUG D#120 => D.55395.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55395
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55395
  # DEBUG this => D#1
  # DEBUG this => &D.55395
  # DEBUG D#117 => &D.55395._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _203
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _203
  # DEBUG this => D#111
  # DEBUG D.65948 => D#112
  operator delete (_203);

  <bb 81>:
  # DEBUG D#121 => &D.55395._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55395 ={v} {CLOBBER};
  # DEBUG this => &D.55396
  # DEBUG this => &D.55396
  _204 = this_8(D)->R;
  _205 = this_8(D)->Cd;
  _206 = _205 * 3.0e+0;
  _207 = this_8(D)->Cg;
  _208 = _207 * 1.2e+1;
  _209 = _206 + _208;
  _210 = this_8(D)->Cgdl;
  _211 = _210 * 1.2e+1;
  _212 = _209 + _211;
  _213 = _204 * _212;
  this_8(D)->FO4 = _213;
  _215 = _213 * 2.0e+1;
  this_8(D)->tCLK = _215;
  _217 = 1.0e+0 / _215;
  this_8(D)->fCLK = _217;
  # DEBUG D#22 => &D.55398
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55398
  # DEBUG this => &D.55397
  # DEBUG __s => "H_INVD2"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55397
  # DEBUG D#245 => &D.55397._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55397.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55397]._M_p = &D.55397.D.13615._M_local_buf;
  # DEBUG __s => "H_INVD2"
  # DEBUG this => &D.55397
  # DEBUG __beg => "H_INVD2"
  # DEBUG __end => &MEM[(void *)"H_INVD2" + 7B]
  # DEBUG this => &D.55397
  # DEBUG __beg => "H_INVD2"
  # DEBUG __end => &MEM[(void *)"H_INVD2" + 7B]
  # DEBUG this => &D.55397
  # DEBUG __beg => "H_INVD2"
  # DEBUG __end => &MEM[(void *)"H_INVD2" + 7B]
  # DEBUG __ptr => "H_INVD2"
  # DEBUG __first => "H_INVD2"
  # DEBUG __last => &MEM[(void *)"H_INVD2" + 7B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "H_INVD2"
  # DEBUG __last => &MEM[(void *)"H_INVD2" + 7B]
  # DEBUG __dnew => 7
  # DEBUG D#1 => &D.55397
  # DEBUG this => D#1
  # DEBUG __p => &D.55397.D.13615._M_local_buf
  # DEBUG __k1 => "H_INVD2"
  # DEBUG __k2 => &MEM[(void *)"H_INVD2" + 7B]
  # DEBUG __d => &D.55397.D.13615._M_local_buf
  # DEBUG __s => "H_INVD2"
  # DEBUG __n => 7
  # DEBUG __s1 => &D.55397.D.13615._M_local_buf
  # DEBUG __s2 => "H_INVD2"
  # DEBUG __n => 7
  __builtin_memcpy (&D.55397.D.13615._M_local_buf, "H_INVD2", 7);
  # DEBUG this => &D.55397
  # DEBUG __n => 7
  # DEBUG D#2 => &D.55397
  # DEBUG __length => 7
  # DEBUG this => D#2
  MEM[(size_type *)&D.55397 + 8B] = 7;
  # DEBUG D#1 => &D.55397
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55397 + 23B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55397 + 23] = 0;
  # DEBUG D#704 => {CLOBBER}
  # DEBUG __dnew => D#704
  _222 = Configuration::GetInt (&pconfig.D.45344, &D.55397);

  <bb 82>:
  _223 = (double) _222;
  this_8(D)->H_INVD2 = _223;
  # DEBUG this => &D.55397
  # DEBUG this => &D.55397
  # DEBUG this => &D.55397
  _226 = MEM[(char * *)&D.55397];
  # DEBUG D#1 => &D.55397
  # DEBUG this => D#1
  # DEBUG this => &D.55397
  if (&D.55397.D.13615._M_local_buf != _226)
    goto <bb 83>;
  else
    goto <bb 84>;

  <bb 83>:
  # DEBUG D#120 => D.55397.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55397
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55397
  # DEBUG this => D#1
  # DEBUG this => &D.55397
  # DEBUG D#117 => &D.55397._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _226
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _226
  # DEBUG this => D#111
  # DEBUG D.65966 => D#112
  operator delete (_226);

  <bb 84>:
  # DEBUG D#121 => &D.55397._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55397 ={v} {CLOBBER};
  # DEBUG this => &D.55398
  # DEBUG this => &D.55398
  # DEBUG D#22 => &D.55400
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55400
  # DEBUG this => &D.55399
  # DEBUG __s => "W_INVD2"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55399
  # DEBUG D#245 => &D.55399._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55399.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55399]._M_p = &D.55399.D.13615._M_local_buf;
  # DEBUG __s => "W_INVD2"
  # DEBUG this => &D.55399
  # DEBUG __beg => "W_INVD2"
  # DEBUG __end => &MEM[(void *)"W_INVD2" + 7B]
  # DEBUG this => &D.55399
  # DEBUG __beg => "W_INVD2"
  # DEBUG __end => &MEM[(void *)"W_INVD2" + 7B]
  # DEBUG this => &D.55399
  # DEBUG __beg => "W_INVD2"
  # DEBUG __end => &MEM[(void *)"W_INVD2" + 7B]
  # DEBUG __ptr => "W_INVD2"
  # DEBUG __first => "W_INVD2"
  # DEBUG __last => &MEM[(void *)"W_INVD2" + 7B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "W_INVD2"
  # DEBUG __last => &MEM[(void *)"W_INVD2" + 7B]
  # DEBUG __dnew => 7
  # DEBUG D#1 => &D.55399
  # DEBUG this => D#1
  # DEBUG __p => &D.55399.D.13615._M_local_buf
  # DEBUG __k1 => "W_INVD2"
  # DEBUG __k2 => &MEM[(void *)"W_INVD2" + 7B]
  # DEBUG __d => &D.55399.D.13615._M_local_buf
  # DEBUG __s => "W_INVD2"
  # DEBUG __n => 7
  # DEBUG __s1 => &D.55399.D.13615._M_local_buf
  # DEBUG __s2 => "W_INVD2"
  # DEBUG __n => 7
  __builtin_memcpy (&D.55399.D.13615._M_local_buf, "W_INVD2", 7);
  # DEBUG this => &D.55399
  # DEBUG __n => 7
  # DEBUG D#2 => &D.55399
  # DEBUG __length => 7
  # DEBUG this => D#2
  MEM[(size_type *)&D.55399 + 8B] = 7;
  # DEBUG D#1 => &D.55399
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55399 + 23B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55399 + 23] = 0;
  # DEBUG D#705 => {CLOBBER}
  # DEBUG __dnew => D#705
  _230 = Configuration::GetInt (&pconfig.D.45344, &D.55399);

  <bb 85>:
  _231 = (double) _230;
  this_8(D)->W_INVD2 = _231;
  # DEBUG this => &D.55399
  # DEBUG this => &D.55399
  # DEBUG this => &D.55399
  _234 = MEM[(char * *)&D.55399];
  # DEBUG D#1 => &D.55399
  # DEBUG this => D#1
  # DEBUG this => &D.55399
  if (&D.55399.D.13615._M_local_buf != _234)
    goto <bb 86>;
  else
    goto <bb 87>;

  <bb 86>:
  # DEBUG D#120 => D.55399.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55399
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55399
  # DEBUG this => D#1
  # DEBUG this => &D.55399
  # DEBUG D#117 => &D.55399._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _234
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _234
  # DEBUG this => D#111
  # DEBUG D.65984 => D#112
  operator delete (_234);

  <bb 87>:
  # DEBUG D#121 => &D.55399._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55399 ={v} {CLOBBER};
  # DEBUG this => &D.55400
  # DEBUG this => &D.55400
  # DEBUG D#22 => &D.55402
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55402
  # DEBUG this => &D.55401
  # DEBUG __s => "H_DFQD1"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55401
  # DEBUG D#245 => &D.55401._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55401.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55401]._M_p = &D.55401.D.13615._M_local_buf;
  # DEBUG __s => "H_DFQD1"
  # DEBUG this => &D.55401
  # DEBUG __beg => "H_DFQD1"
  # DEBUG __end => &MEM[(void *)"H_DFQD1" + 7B]
  # DEBUG this => &D.55401
  # DEBUG __beg => "H_DFQD1"
  # DEBUG __end => &MEM[(void *)"H_DFQD1" + 7B]
  # DEBUG this => &D.55401
  # DEBUG __beg => "H_DFQD1"
  # DEBUG __end => &MEM[(void *)"H_DFQD1" + 7B]
  # DEBUG __ptr => "H_DFQD1"
  # DEBUG __first => "H_DFQD1"
  # DEBUG __last => &MEM[(void *)"H_DFQD1" + 7B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "H_DFQD1"
  # DEBUG __last => &MEM[(void *)"H_DFQD1" + 7B]
  # DEBUG __dnew => 7
  # DEBUG D#1 => &D.55401
  # DEBUG this => D#1
  # DEBUG __p => &D.55401.D.13615._M_local_buf
  # DEBUG __k1 => "H_DFQD1"
  # DEBUG __k2 => &MEM[(void *)"H_DFQD1" + 7B]
  # DEBUG __d => &D.55401.D.13615._M_local_buf
  # DEBUG __s => "H_DFQD1"
  # DEBUG __n => 7
  # DEBUG __s1 => &D.55401.D.13615._M_local_buf
  # DEBUG __s2 => "H_DFQD1"
  # DEBUG __n => 7
  __builtin_memcpy (&D.55401.D.13615._M_local_buf, "H_DFQD1", 7);
  # DEBUG this => &D.55401
  # DEBUG __n => 7
  # DEBUG D#2 => &D.55401
  # DEBUG __length => 7
  # DEBUG this => D#2
  MEM[(size_type *)&D.55401 + 8B] = 7;
  # DEBUG D#1 => &D.55401
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55401 + 23B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55401 + 23] = 0;
  # DEBUG D#706 => {CLOBBER}
  # DEBUG __dnew => D#706
  _237 = Configuration::GetInt (&pconfig.D.45344, &D.55401);

  <bb 88>:
  _238 = (double) _237;
  this_8(D)->H_DFQD1 = _238;
  # DEBUG this => &D.55401
  # DEBUG this => &D.55401
  # DEBUG this => &D.55401
  _241 = MEM[(char * *)&D.55401];
  # DEBUG D#1 => &D.55401
  # DEBUG this => D#1
  # DEBUG this => &D.55401
  if (&D.55401.D.13615._M_local_buf != _241)
    goto <bb 89>;
  else
    goto <bb 90>;

  <bb 89>:
  # DEBUG D#120 => D.55401.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55401
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55401
  # DEBUG this => D#1
  # DEBUG this => &D.55401
  # DEBUG D#117 => &D.55401._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _241
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _241
  # DEBUG this => D#111
  # DEBUG D.66002 => D#112
  operator delete (_241);

  <bb 90>:
  # DEBUG D#121 => &D.55401._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55401 ={v} {CLOBBER};
  # DEBUG this => &D.55402
  # DEBUG this => &D.55402
  # DEBUG D#22 => &D.55404
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55404
  # DEBUG this => &D.55403
  # DEBUG __s => "W_DFQD1"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55403
  # DEBUG D#245 => &D.55403._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55403.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55403]._M_p = &D.55403.D.13615._M_local_buf;
  # DEBUG __s => "W_DFQD1"
  # DEBUG this => &D.55403
  # DEBUG __beg => "W_DFQD1"
  # DEBUG __end => &MEM[(void *)"W_DFQD1" + 7B]
  # DEBUG this => &D.55403
  # DEBUG __beg => "W_DFQD1"
  # DEBUG __end => &MEM[(void *)"W_DFQD1" + 7B]
  # DEBUG this => &D.55403
  # DEBUG __beg => "W_DFQD1"
  # DEBUG __end => &MEM[(void *)"W_DFQD1" + 7B]
  # DEBUG __ptr => "W_DFQD1"
  # DEBUG __first => "W_DFQD1"
  # DEBUG __last => &MEM[(void *)"W_DFQD1" + 7B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "W_DFQD1"
  # DEBUG __last => &MEM[(void *)"W_DFQD1" + 7B]
  # DEBUG __dnew => 7
  # DEBUG D#1 => &D.55403
  # DEBUG this => D#1
  # DEBUG __p => &D.55403.D.13615._M_local_buf
  # DEBUG __k1 => "W_DFQD1"
  # DEBUG __k2 => &MEM[(void *)"W_DFQD1" + 7B]
  # DEBUG __d => &D.55403.D.13615._M_local_buf
  # DEBUG __s => "W_DFQD1"
  # DEBUG __n => 7
  # DEBUG __s1 => &D.55403.D.13615._M_local_buf
  # DEBUG __s2 => "W_DFQD1"
  # DEBUG __n => 7
  __builtin_memcpy (&D.55403.D.13615._M_local_buf, "W_DFQD1", 7);
  # DEBUG this => &D.55403
  # DEBUG __n => 7
  # DEBUG D#2 => &D.55403
  # DEBUG __length => 7
  # DEBUG this => D#2
  MEM[(size_type *)&D.55403 + 8B] = 7;
  # DEBUG D#1 => &D.55403
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55403 + 23B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55403 + 23] = 0;
  # DEBUG D#707 => {CLOBBER}
  # DEBUG __dnew => D#707
  _245 = Configuration::GetInt (&pconfig.D.45344, &D.55403);

  <bb 91>:
  _246 = (double) _245;
  this_8(D)->W_DFQD1 = _246;
  # DEBUG this => &D.55403
  # DEBUG this => &D.55403
  # DEBUG this => &D.55403
  _249 = MEM[(char * *)&D.55403];
  # DEBUG D#1 => &D.55403
  # DEBUG this => D#1
  # DEBUG this => &D.55403
  if (&D.55403.D.13615._M_local_buf != _249)
    goto <bb 92>;
  else
    goto <bb 93>;

  <bb 92>:
  # DEBUG D#120 => D.55403.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55403
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55403
  # DEBUG this => D#1
  # DEBUG this => &D.55403
  # DEBUG D#117 => &D.55403._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _249
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _249
  # DEBUG this => D#111
  # DEBUG D.66020 => D#112
  operator delete (_249);

  <bb 93>:
  # DEBUG D#121 => &D.55403._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55403 ={v} {CLOBBER};
  # DEBUG this => &D.55404
  # DEBUG this => &D.55404
  # DEBUG D#22 => &D.55406
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55406
  # DEBUG this => &D.55405
  # DEBUG __s => "H_ND2D1"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55405
  # DEBUG D#245 => &D.55405._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55405.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55405]._M_p = &D.55405.D.13615._M_local_buf;
  # DEBUG __s => "H_ND2D1"
  # DEBUG this => &D.55405
  # DEBUG __beg => "H_ND2D1"
  # DEBUG __end => &MEM[(void *)"H_ND2D1" + 7B]
  # DEBUG this => &D.55405
  # DEBUG __beg => "H_ND2D1"
  # DEBUG __end => &MEM[(void *)"H_ND2D1" + 7B]
  # DEBUG this => &D.55405
  # DEBUG __beg => "H_ND2D1"
  # DEBUG __end => &MEM[(void *)"H_ND2D1" + 7B]
  # DEBUG __ptr => "H_ND2D1"
  # DEBUG __first => "H_ND2D1"
  # DEBUG __last => &MEM[(void *)"H_ND2D1" + 7B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "H_ND2D1"
  # DEBUG __last => &MEM[(void *)"H_ND2D1" + 7B]
  # DEBUG __dnew => 7
  # DEBUG D#1 => &D.55405
  # DEBUG this => D#1
  # DEBUG __p => &D.55405.D.13615._M_local_buf
  # DEBUG __k1 => "H_ND2D1"
  # DEBUG __k2 => &MEM[(void *)"H_ND2D1" + 7B]
  # DEBUG __d => &D.55405.D.13615._M_local_buf
  # DEBUG __s => "H_ND2D1"
  # DEBUG __n => 7
  # DEBUG __s1 => &D.55405.D.13615._M_local_buf
  # DEBUG __s2 => "H_ND2D1"
  # DEBUG __n => 7
  __builtin_memcpy (&D.55405.D.13615._M_local_buf, "H_ND2D1", 7);
  # DEBUG this => &D.55405
  # DEBUG __n => 7
  # DEBUG D#2 => &D.55405
  # DEBUG __length => 7
  # DEBUG this => D#2
  MEM[(size_type *)&D.55405 + 8B] = 7;
  # DEBUG D#1 => &D.55405
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55405 + 23B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55405 + 23] = 0;
  # DEBUG D#708 => {CLOBBER}
  # DEBUG __dnew => D#708
  _252 = Configuration::GetInt (&pconfig.D.45344, &D.55405);

  <bb 94>:
  _253 = (double) _252;
  this_8(D)->H_ND2D1 = _253;
  # DEBUG this => &D.55405
  # DEBUG this => &D.55405
  # DEBUG this => &D.55405
  _256 = MEM[(char * *)&D.55405];
  # DEBUG D#1 => &D.55405
  # DEBUG this => D#1
  # DEBUG this => &D.55405
  if (&D.55405.D.13615._M_local_buf != _256)
    goto <bb 95>;
  else
    goto <bb 96>;

  <bb 95>:
  # DEBUG D#120 => D.55405.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55405
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55405
  # DEBUG this => D#1
  # DEBUG this => &D.55405
  # DEBUG D#117 => &D.55405._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _256
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _256
  # DEBUG this => D#111
  # DEBUG D.66038 => D#112
  operator delete (_256);

  <bb 96>:
  # DEBUG D#121 => &D.55405._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55405 ={v} {CLOBBER};
  # DEBUG this => &D.55406
  # DEBUG this => &D.55406
  # DEBUG D#22 => &D.55408
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55408
  # DEBUG this => &D.55407
  # DEBUG __s => "W_ND2D1"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55407
  # DEBUG D#245 => &D.55407._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55407.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55407]._M_p = &D.55407.D.13615._M_local_buf;
  # DEBUG __s => "W_ND2D1"
  # DEBUG this => &D.55407
  # DEBUG __beg => "W_ND2D1"
  # DEBUG __end => &MEM[(void *)"W_ND2D1" + 7B]
  # DEBUG this => &D.55407
  # DEBUG __beg => "W_ND2D1"
  # DEBUG __end => &MEM[(void *)"W_ND2D1" + 7B]
  # DEBUG this => &D.55407
  # DEBUG __beg => "W_ND2D1"
  # DEBUG __end => &MEM[(void *)"W_ND2D1" + 7B]
  # DEBUG __ptr => "W_ND2D1"
  # DEBUG __first => "W_ND2D1"
  # DEBUG __last => &MEM[(void *)"W_ND2D1" + 7B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "W_ND2D1"
  # DEBUG __last => &MEM[(void *)"W_ND2D1" + 7B]
  # DEBUG __dnew => 7
  # DEBUG D#1 => &D.55407
  # DEBUG this => D#1
  # DEBUG __p => &D.55407.D.13615._M_local_buf
  # DEBUG __k1 => "W_ND2D1"
  # DEBUG __k2 => &MEM[(void *)"W_ND2D1" + 7B]
  # DEBUG __d => &D.55407.D.13615._M_local_buf
  # DEBUG __s => "W_ND2D1"
  # DEBUG __n => 7
  # DEBUG __s1 => &D.55407.D.13615._M_local_buf
  # DEBUG __s2 => "W_ND2D1"
  # DEBUG __n => 7
  __builtin_memcpy (&D.55407.D.13615._M_local_buf, "W_ND2D1", 7);
  # DEBUG this => &D.55407
  # DEBUG __n => 7
  # DEBUG D#2 => &D.55407
  # DEBUG __length => 7
  # DEBUG this => D#2
  MEM[(size_type *)&D.55407 + 8B] = 7;
  # DEBUG D#1 => &D.55407
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55407 + 23B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55407 + 23] = 0;
  # DEBUG D#709 => {CLOBBER}
  # DEBUG __dnew => D#709
  _259 = Configuration::GetInt (&pconfig.D.45344, &D.55407);

  <bb 97>:
  _260 = (double) _259;
  this_8(D)->W_ND2D1 = _260;
  # DEBUG this => &D.55407
  # DEBUG this => &D.55407
  # DEBUG this => &D.55407
  _263 = MEM[(char * *)&D.55407];
  # DEBUG D#1 => &D.55407
  # DEBUG this => D#1
  # DEBUG this => &D.55407
  if (&D.55407.D.13615._M_local_buf != _263)
    goto <bb 98>;
  else
    goto <bb 99>;

  <bb 98>:
  # DEBUG D#120 => D.55407.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55407
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55407
  # DEBUG this => D#1
  # DEBUG this => &D.55407
  # DEBUG D#117 => &D.55407._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _263
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _263
  # DEBUG this => D#111
  # DEBUG D.66056 => D#112
  operator delete (_263);

  <bb 99>:
  # DEBUG D#121 => &D.55407._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55407 ={v} {CLOBBER};
  # DEBUG this => &D.55408
  # DEBUG this => &D.55408
  # DEBUG D#22 => &D.55410
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55410
  # DEBUG this => &D.55409
  # DEBUG __s => "H_SRAM"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55409
  # DEBUG D#245 => &D.55409._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55409.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55409]._M_p = &D.55409.D.13615._M_local_buf;
  # DEBUG __s => "H_SRAM"
  # DEBUG this => &D.55409
  # DEBUG __beg => "H_SRAM"
  # DEBUG __end => &MEM[(void *)"H_SRAM" + 6B]
  # DEBUG this => &D.55409
  # DEBUG __beg => "H_SRAM"
  # DEBUG __end => &MEM[(void *)"H_SRAM" + 6B]
  # DEBUG this => &D.55409
  # DEBUG __beg => "H_SRAM"
  # DEBUG __end => &MEM[(void *)"H_SRAM" + 6B]
  # DEBUG __ptr => "H_SRAM"
  # DEBUG __first => "H_SRAM"
  # DEBUG __last => &MEM[(void *)"H_SRAM" + 6B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "H_SRAM"
  # DEBUG __last => &MEM[(void *)"H_SRAM" + 6B]
  # DEBUG __dnew => 6
  # DEBUG D#1 => &D.55409
  # DEBUG this => D#1
  # DEBUG __p => &D.55409.D.13615._M_local_buf
  # DEBUG __k1 => "H_SRAM"
  # DEBUG __k2 => &MEM[(void *)"H_SRAM" + 6B]
  # DEBUG __d => &D.55409.D.13615._M_local_buf
  # DEBUG __s => "H_SRAM"
  # DEBUG __n => 6
  # DEBUG __s1 => &D.55409.D.13615._M_local_buf
  # DEBUG __s2 => "H_SRAM"
  # DEBUG __n => 6
  __builtin_memcpy (&D.55409.D.13615._M_local_buf, "H_SRAM", 6);
  # DEBUG this => &D.55409
  # DEBUG __n => 6
  # DEBUG D#2 => &D.55409
  # DEBUG __length => 6
  # DEBUG this => D#2
  MEM[(size_type *)&D.55409 + 8B] = 6;
  # DEBUG D#1 => &D.55409
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55409 + 22B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55409 + 22] = 0;
  # DEBUG D#710 => {CLOBBER}
  # DEBUG __dnew => D#710
  _266 = Configuration::GetInt (&pconfig.D.45344, &D.55409);

  <bb 100>:
  _267 = (double) _266;
  this_8(D)->H_SRAM = _267;
  # DEBUG this => &D.55409
  # DEBUG this => &D.55409
  # DEBUG this => &D.55409
  _271 = MEM[(char * *)&D.55409];
  # DEBUG D#1 => &D.55409
  # DEBUG this => D#1
  # DEBUG this => &D.55409
  if (&D.55409.D.13615._M_local_buf != _271)
    goto <bb 101>;
  else
    goto <bb 102>;

  <bb 101>:
  # DEBUG D#120 => D.55409.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55409
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55409
  # DEBUG this => D#1
  # DEBUG this => &D.55409
  # DEBUG D#117 => &D.55409._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _271
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _271
  # DEBUG this => D#111
  # DEBUG D.66074 => D#112
  operator delete (_271);

  <bb 102>:
  # DEBUG D#121 => &D.55409._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55409 ={v} {CLOBBER};
  # DEBUG this => &D.55410
  # DEBUG this => &D.55410
  # DEBUG D#22 => &D.55412
  # DEBUG this => D#22
  # DEBUG D#21 => D#22
  # DEBUG this => D#21
  # DEBUG D#248 => &D.55412
  # DEBUG this => &D.55411
  # DEBUG __s => "W_SRAM"
  # DEBUG __a => D#248
  # DEBUG D#247 => D#248
  # DEBUG this => &D.55411
  # DEBUG D#245 => &D.55411._M_dataplus
  # DEBUG D#64 => D#247
  # DEBUG this => D#245
  # DEBUG __dat => &D.55411.D.13615._M_local_buf
  # DEBUG __a => D#64
  # DEBUG D#63 => D#64
  # DEBUG D#61 => D#245
  # DEBUG D#62 => D#63
  # DEBUG this => D#61
  # DEBUG __a => D#62
  # DEBUG D#60 => D#62
  # DEBUG D#59 => D#61
  # DEBUG this => D#59
  # DEBUG D.63470 => D#60
  MEM[(struct _Alloc_hider *)&D.55411]._M_p = &D.55411.D.13615._M_local_buf;
  # DEBUG __s => "W_SRAM"
  # DEBUG this => &D.55411
  # DEBUG __beg => "W_SRAM"
  # DEBUG __end => &MEM[(void *)"W_SRAM" + 6B]
  # DEBUG this => &D.55411
  # DEBUG __beg => "W_SRAM"
  # DEBUG __end => &MEM[(void *)"W_SRAM" + 6B]
  # DEBUG this => &D.55411
  # DEBUG __beg => "W_SRAM"
  # DEBUG __end => &MEM[(void *)"W_SRAM" + 6B]
  # DEBUG __ptr => "W_SRAM"
  # DEBUG __first => "W_SRAM"
  # DEBUG __last => &MEM[(void *)"W_SRAM" + 6B]
  # DEBUG D#241 => &__first
  # DEBUG D.64417 => D#241
  # DEBUG __first => "W_SRAM"
  # DEBUG __last => &MEM[(void *)"W_SRAM" + 6B]
  # DEBUG __dnew => 6
  # DEBUG D#1 => &D.55411
  # DEBUG this => D#1
  # DEBUG __p => &D.55411.D.13615._M_local_buf
  # DEBUG __k1 => "W_SRAM"
  # DEBUG __k2 => &MEM[(void *)"W_SRAM" + 6B]
  # DEBUG __d => &D.55411.D.13615._M_local_buf
  # DEBUG __s => "W_SRAM"
  # DEBUG __n => 6
  # DEBUG __s1 => &D.55411.D.13615._M_local_buf
  # DEBUG __s2 => "W_SRAM"
  # DEBUG __n => 6
  __builtin_memcpy (&D.55411.D.13615._M_local_buf, "W_SRAM", 6);
  # DEBUG this => &D.55411
  # DEBUG __n => 6
  # DEBUG D#2 => &D.55411
  # DEBUG __length => 6
  # DEBUG this => D#2
  MEM[(size_type *)&D.55411 + 8B] = 6;
  # DEBUG D#1 => &D.55411
  # DEBUG this => D#1
  # DEBUG __c1 => &MEM[(void *)&D.55411 + 22B]
  # DEBUG __c2 => D#7
  MEM[(char_type &)&D.55411 + 22] = 0;
  # DEBUG D#711 => {CLOBBER}
  # DEBUG __dnew => D#711
  _275 = Configuration::GetInt (&pconfig.D.45344, &D.55411);

  <bb 103>:
  _276 = (double) _275;
  this_8(D)->W_SRAM = _276;
  # DEBUG this => &D.55411
  # DEBUG this => &D.55411
  # DEBUG this => &D.55411
  _280 = MEM[(char * *)&D.55411];
  # DEBUG D#1 => &D.55411
  # DEBUG this => D#1
  # DEBUG this => &D.55411
  if (&D.55411.D.13615._M_local_buf != _280)
    goto <bb 104>;
  else
    goto <bb 105>;

  <bb 104>:
  # DEBUG D#120 => D.55411.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55411
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55411
  # DEBUG this => D#1
  # DEBUG this => &D.55411
  # DEBUG D#117 => &D.55411._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _280
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _280
  # DEBUG this => D#111
  # DEBUG D.66107 => D#112
  operator delete (_280);

  <bb 105>:
  # DEBUG D#121 => &D.55411._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55411 ={v} {CLOBBER};
  # DEBUG this => &D.55412
  # DEBUG this => &D.55412
  _281 = this_8(D)->MetalPitch;
  _282 = _281 * 2.0e+0;
  this_8(D)->ChannelPitch = _282;
  this_8(D)->CrossbarPitch = _282;
  # DEBUG this => &pconfig
  # DEBUG this => &pconfig.D.45344
  # DEBUG D#338 => &MEM[(struct Configuration *)&pconfig]._float_map
  # DEBUG this => D#338
  # DEBUG this => &MEM[(struct map *)&pconfig + 136B]._M_t
  __x_1280 = MEM[(struct _Rb_tree_node_base * *)&pconfig + 152B];
  # DEBUG D#26 => &MEM[(struct map *)&pconfig + 136B]._M_t
  # DEBUG this => D#26
  # DEBUG this => &MEM[(struct map *)&pconfig + 136B]._M_t
  # DEBUG __x => __x_1280
  # DEBUG __x => __x_1280
  if (__x_1280 == 0B)
    goto <bb 106>;
  else
    goto <bb 107>;

  <bb 106>:
  # DEBUG D#334 => &MEM[(struct _Rb_tree *)&pconfig + 136B]._M_impl
  # DEBUG this => D#334
  # DEBUG this => D#334
  # DEBUG this => D#334
  MEM[(struct  &)&pconfig + 136] ={v} {CLOBBER};
  # DEBUG D#337 => &MEM[(struct Configuration *)&pconfig]._int_map
  # DEBUG this => D#337
  # DEBUG this => &MEM[(struct map *)&pconfig + 88B]._M_t
  __x_1282 = MEM[(struct _Rb_tree_node_base * *)&pconfig + 104B];
  # DEBUG D#25 => &MEM[(struct map *)&pconfig + 88B]._M_t
  # DEBUG this => D#25
  # DEBUG this => &MEM[(struct map *)&pconfig + 88B]._M_t
  # DEBUG __x => __x_1282
  # DEBUG __x => __x_1282
  if (__x_1282 == 0B)
    goto <bb 112>;
  else
    goto <bb 113>;

  <bb 107>:

  <bb 108>:
  # __x_884 = PHI <__x_1280(107), __x_1297(111)>
  # DEBUG __x => __x_884
  _1296 = MEM[(struct _Rb_tree_node_base * *)__x_884 + 24B];
  # DEBUG D#35 => __x_884
  # DEBUG __x => D#35
  std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, double>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, double> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, double> > >::_M_erase (&MEM[(struct map *)&pconfig + 136B]._M_t, _1296);
  __x_1297 = MEM[(struct _Rb_tree_node_base * *)__x_884 + 16B];
  # DEBUG D#36 => __x_884
  # DEBUG __x => D#36
  # DEBUG __y => NULL
  # DEBUG D#333 => &MEM[(struct map *)&pconfig + 136B]._M_t
  # DEBUG __p => __x_884
  # DEBUG this => D#333
  # DEBUG D#332 => D#333
  # DEBUG D#331 => D#333
  # DEBUG D#330 => D#331
  # DEBUG __p => __x_884
  # DEBUG this => D#330
  # DEBUG D#329 => D#330
  # DEBUG this => __x_884
  # DEBUG D#328 => &__x_884->_M_value_field
  # DEBUG __r => D#328
  # DEBUG D#327 => D#329
  # DEBUG this => D#327
  # DEBUG D#326 => D#327
  # DEBUG this => D#326
  # DEBUG this => NULL
  # DEBUG D.65308 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#328
  # DEBUG this => D#156
  # DEBUG this => D#328
  # DEBUG D#155 => &D#328->first
  # DEBUG this => D#155
  # DEBUG this => D#155
  # DEBUG this => D#155
  _1299 = MEM[(char * *)__x_884 + 32B];
  # DEBUG D#1 => D#155
  # DEBUG this => D#1
  # DEBUG this => D#155
  _1300 = &MEM[(const struct basic_string *)__x_884 + 32B].D.13615._M_local_buf;
  if (_1299 != _1300)
    goto <bb 109>;
  else
    goto <bb 110>;

  <bb 109>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#155].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#155
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#155
  # DEBUG this => D#1
  # DEBUG this => D#155
  # DEBUG D#117 => &MEM[(struct basic_string *)D#155]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _1299
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _1299
  # DEBUG this => D#111
  # DEBUG D.72545 => D#112
  operator delete (_1299);

  <bb 110>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#155]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_884 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#278 => D#332
  # DEBUG __p => __x_884
  # DEBUG this => D#278
  # DEBUG D#277 => D#278
  # DEBUG this => D#277
  # DEBUG D#276 => 1
  # DEBUG __p => __x_884
  # DEBUG __a => D#275
  # DEBUG __n => D#276
  # DEBUG D#274 => D#276
  # DEBUG D#273 => D#275
  # DEBUG D#271 => D#273
  # DEBUG D#272 => D#274
  # DEBUG __p => __x_884
  # DEBUG this => D#271
  # DEBUG D.72558 => D#272
  operator delete (__x_884);
  # DEBUG __x => __x_1297
  if (__x_1297 == 0B)
    goto <bb 106>;
  else
    goto <bb 111>;

  <bb 111>:
  goto <bb 108>;

  <bb 112>:
  # DEBUG D#325 => &MEM[(struct _Rb_tree *)&pconfig + 88B]._M_impl
  # DEBUG this => D#325
  # DEBUG this => D#325
  # DEBUG this => D#325
  MEM[(struct  &)&pconfig + 88] ={v} {CLOBBER};
  # DEBUG D#336 => &MEM[(struct Configuration *)&pconfig]._str_map
  # DEBUG this => D#336
  # DEBUG this => &MEM[(struct map *)&pconfig + 40B]._M_t
  __x_1284 = MEM[(struct _Rb_tree_node_base * *)&pconfig + 56B];
  # DEBUG D#24 => &MEM[(struct map *)&pconfig + 40B]._M_t
  # DEBUG this => D#24
  # DEBUG this => &MEM[(struct map *)&pconfig + 40B]._M_t
  # DEBUG __x => __x_1284
  # DEBUG __x => __x_1284
  if (__x_1284 == 0B)
    goto <bb 118>;
  else
    goto <bb 119>;

  <bb 113>:

  <bb 114>:
  # __x_869 = PHI <__x_1282(113), __x_1293(117)>
  # DEBUG __x => __x_869
  _1292 = MEM[(struct _Rb_tree_node_base * *)__x_869 + 24B];
  # DEBUG D#33 => __x_869
  # DEBUG __x => D#33
  std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, int>, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, int> >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> > >::_M_erase (&MEM[(struct map *)&pconfig + 88B]._M_t, _1292);
  __x_1293 = MEM[(struct _Rb_tree_node_base * *)__x_869 + 16B];
  # DEBUG D#34 => __x_869
  # DEBUG __x => D#34
  # DEBUG __y => NULL
  # DEBUG D#324 => &MEM[(struct map *)&pconfig + 88B]._M_t
  # DEBUG __p => __x_869
  # DEBUG this => D#324
  # DEBUG D#323 => D#324
  # DEBUG D#322 => D#324
  # DEBUG D#321 => D#322
  # DEBUG __p => __x_869
  # DEBUG this => D#321
  # DEBUG D#320 => D#321
  # DEBUG this => __x_869
  # DEBUG D#319 => &__x_869->_M_value_field
  # DEBUG __r => D#319
  # DEBUG D#318 => D#320
  # DEBUG this => D#318
  # DEBUG D#317 => D#318
  # DEBUG this => D#317
  # DEBUG this => NULL
  # DEBUG D.65159 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#319
  # DEBUG this => D#154
  # DEBUG this => D#319
  # DEBUG D#153 => &D#319->first
  # DEBUG this => D#153
  # DEBUG this => D#153
  # DEBUG this => D#153
  _1301 = MEM[(char * *)__x_869 + 32B];
  # DEBUG D#1 => D#153
  # DEBUG this => D#1
  # DEBUG this => D#153
  _1302 = &MEM[(const struct basic_string *)__x_869 + 32B].D.13615._M_local_buf;
  if (_1301 != _1302)
    goto <bb 115>;
  else
    goto <bb 116>;

  <bb 115>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#153].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#153
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#153
  # DEBUG this => D#1
  # DEBUG this => D#153
  # DEBUG D#117 => &MEM[(struct basic_string *)D#153]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _1301
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _1301
  # DEBUG this => D#111
  # DEBUG D.72575 => D#112
  operator delete (_1301);

  <bb 116>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#153]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_869 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#270 => D#323
  # DEBUG __p => __x_869
  # DEBUG this => D#270
  # DEBUG D#269 => D#270
  # DEBUG this => D#269
  # DEBUG D#268 => 1
  # DEBUG __p => __x_869
  # DEBUG __a => D#267
  # DEBUG __n => D#268
  # DEBUG D#266 => D#268
  # DEBUG D#265 => D#267
  # DEBUG D#263 => D#265
  # DEBUG D#264 => D#266
  # DEBUG __p => __x_869
  # DEBUG this => D#263
  # DEBUG D.72588 => D#264
  operator delete (__x_869);
  # DEBUG __x => __x_1293
  if (__x_1293 == 0B)
    goto <bb 112>;
  else
    goto <bb 117>;

  <bb 117>:
  goto <bb 114>;

  <bb 118>:
  # DEBUG D#316 => &MEM[(struct _Rb_tree *)&pconfig + 40B]._M_impl
  # DEBUG this => D#316
  # DEBUG this => D#316
  # DEBUG this => D#316
  MEM[(struct  &)&pconfig + 40] ={v} {CLOBBER};
  # DEBUG D#335 => &MEM[(struct Configuration *)&pconfig]._config_string
  # DEBUG this => D#335
  # DEBUG this => D#335
  # DEBUG this => D#335
  _1285 = MEM[(char * *)&pconfig + 8B];
  # DEBUG D#1 => D#335
  # DEBUG this => D#1
  # DEBUG this => D#335
  if (&MEM[(const struct basic_string *)&pconfig + 8B].D.13615._M_local_buf != _1285)
    goto <bb 126>;
  else
    goto <bb 127>;

  <bb 119>:

  <bb 120>:
  # __x_836 = PHI <__x_1284(119), __x_1288(125)>
  # DEBUG __x => __x_836
  _1287 = MEM[(struct _Rb_tree_node_base * *)__x_836 + 24B];
  # DEBUG D#31 => __x_836
  # DEBUG __x => D#31
  std::_Rb_tree<std::__cxx11::basic_string<char>, std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> >, std::_Select1st<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > >, std::less<std::__cxx11::basic_string<char> >, std::allocator<std::pair<const std::__cxx11::basic_string<char>, std::__cxx11::basic_string<char> > > >::_M_erase (&MEM[(struct map *)&pconfig + 40B]._M_t, _1287);
  __x_1288 = MEM[(struct _Rb_tree_node_base * *)__x_836 + 16B];
  # DEBUG D#32 => __x_836
  # DEBUG __x => D#32
  # DEBUG __y => NULL
  # DEBUG D#315 => &MEM[(struct map *)&pconfig + 40B]._M_t
  # DEBUG __p => __x_836
  # DEBUG this => D#315
  # DEBUG D#314 => D#315
  # DEBUG D#313 => D#315
  # DEBUG D#312 => D#313
  # DEBUG __p => __x_836
  # DEBUG this => D#312
  # DEBUG D#311 => D#312
  # DEBUG this => __x_836
  # DEBUG D#680 => &__x_836->_M_value_field
  # DEBUG __r => D#680
  # DEBUG D#310 => D#311
  # DEBUG this => D#310
  # DEBUG D#309 => D#310
  # DEBUG this => D#309
  # DEBUG this => NULL
  # DEBUG D.65057 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#680
  # DEBUG this => D#152
  # DEBUG this => D#680
  # DEBUG D#151 => &D#680->second
  # DEBUG this => D#151
  # DEBUG this => D#151
  # DEBUG this => D#151
  _1303 = MEM[(char * *)__x_836 + 64B];
  # DEBUG D#1 => D#151
  # DEBUG this => D#1
  # DEBUG this => D#151
  _1304 = &MEM[(const struct basic_string *)__x_836 + 64B].D.13615._M_local_buf;
  if (_1303 != _1304)
    goto <bb 121>;
  else
    goto <bb 122>;

  <bb 121>:
  # DEBUG D#120 => D#151->D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#151
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#151
  # DEBUG this => D#1
  # DEBUG this => D#151
  # DEBUG D#117 => &D#151->_M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _1303
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _1303
  # DEBUG this => D#111
  # DEBUG D.72599 => D#112
  operator delete (_1303);

  <bb 122>:
  # DEBUG D#121 => &D#151->_M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_836 + 64] ={v} {CLOBBER};
  # DEBUG D#150 => &D#680->first
  # DEBUG this => D#150
  # DEBUG this => D#150
  # DEBUG this => D#150
  _1305 = MEM[(char * *)__x_836 + 32B];
  # DEBUG D#1 => D#150
  # DEBUG this => D#1
  # DEBUG this => D#150
  _1306 = &MEM[(const struct basic_string *)__x_836 + 32B].D.13615._M_local_buf;
  if (_1305 != _1306)
    goto <bb 123>;
  else
    goto <bb 124>;

  <bb 123>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#150].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#150
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#150
  # DEBUG this => D#1
  # DEBUG this => D#150
  # DEBUG D#117 => &MEM[(struct basic_string *)D#150]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _1305
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _1305
  # DEBUG this => D#111
  # DEBUG D.72614 => D#112
  operator delete (_1305);

  <bb 124>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#150]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)__x_836 + 32] ={v} {CLOBBER};
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG D#262 => D#314
  # DEBUG __p => __x_836
  # DEBUG this => D#262
  # DEBUG D#261 => D#262
  # DEBUG this => D#261
  # DEBUG D#260 => 1
  # DEBUG __p => __x_836
  # DEBUG __a => D#259
  # DEBUG __n => D#260
  # DEBUG D#258 => D#260
  # DEBUG D#257 => D#259
  # DEBUG D#255 => D#257
  # DEBUG D#256 => D#258
  # DEBUG __p => __x_836
  # DEBUG this => D#255
  # DEBUG D.72522 => D#256
  operator delete (__x_836);
  # DEBUG __x => __x_1288
  # DEBUG __x => __x_1288
  if (__x_1288 == 0B)
    goto <bb 118>;
  else
    goto <bb 125>;

  <bb 125>:
  goto <bb 120>;

  <bb 126>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#335].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#335
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#335
  # DEBUG this => D#1
  # DEBUG this => D#335
  # DEBUG D#117 => &MEM[(struct basic_string *)D#335]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _1285
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _1285
  # DEBUG this => D#111
  # DEBUG D.72499 => D#112
  operator delete (_1285);

  <bb 127>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#335]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)&pconfig] ={v} {CLOBBER};
  # DEBUG this => &pfile
  # DEBUG this => &pfile
  # DEBUG this => &pfile
  _269 = MEM[(char * *)&pfile];
  # DEBUG D#1 => &pfile
  # DEBUG this => D#1
  # DEBUG this => &pfile
  if (&pfile.D.13615._M_local_buf != _269)
    goto <bb 128>;
  else
    goto <bb 129>;

  <bb 128>:
  # DEBUG D#120 => pfile.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &pfile
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &pfile
  # DEBUG this => D#1
  # DEBUG this => &pfile
  # DEBUG D#117 => &pfile._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _269
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _269
  # DEBUG this => D#111
  # DEBUG D.66089 => D#112
  operator delete (_269);

  <bb 129>:
  # DEBUG D#121 => &pfile._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  pfile ={v} {CLOBBER};
  pconfig ={v} {CLOBBER};
  return;

<L0>:
  # DEBUG this => &D.55345
  # DEBUG this => &D.55345
  # DEBUG this => &D.55345
  _278 = MEM[(char * *)&D.55345];
  # DEBUG D#1 => &D.55345
  # DEBUG this => D#1
  # DEBUG this => &D.55345
  if (&D.55345.D.13615._M_local_buf != _278)
    goto <bb 131>;
  else
    goto <bb 132>;

  <bb 131>:
  # DEBUG D#120 => D.55345.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55345
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55345
  # DEBUG this => D#1
  # DEBUG this => &D.55345
  # DEBUG D#117 => &D.55345._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _278
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _278
  # DEBUG this => D#111
  # DEBUG D.66122 => D#112
  operator delete (_278);

  <bb 132>:
  # DEBUG D#121 => &D.55345._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55345 ={v} {CLOBBER};
  resx 2

<L2>:
  # DEBUG this => &D.55350
  # DEBUG this => &D.55350
  # DEBUG this => &D.55350
  _358 = MEM[(char * *)&D.55350];
  # DEBUG D#1 => &D.55350
  # DEBUG this => D#1
  # DEBUG this => &D.55350
  if (&D.55350.D.13615._M_local_buf != _358)
    goto <bb 134>;
  else
    goto <bb 135>;

  <bb 134>:
  # DEBUG D#120 => D.55350.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55350
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55350
  # DEBUG this => D#1
  # DEBUG this => &D.55350
  # DEBUG D#117 => &D.55350._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _358
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _358
  # DEBUG this => D#111
  # DEBUG D.66139 => D#112
  operator delete (_358);

  <bb 135>:
  # DEBUG D#121 => &D.55350._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55350 ={v} {CLOBBER};
  resx 10

<L5>:
  # DEBUG this => &D.55352
  # DEBUG this => &D.55352
  # DEBUG this => &D.55352
  _351 = MEM[(char * *)&D.55352];
  # DEBUG D#1 => &D.55352
  # DEBUG this => D#1
  # DEBUG this => &D.55352
  if (&D.55352.D.13615._M_local_buf != _351)
    goto <bb 137>;
  else
    goto <bb 138>;

  <bb 137>:
  # DEBUG D#120 => D.55352.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55352
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55352
  # DEBUG this => D#1
  # DEBUG this => &D.55352
  # DEBUG D#117 => &D.55352._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _351
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _351
  # DEBUG this => D#111
  # DEBUG D.66156 => D#112
  operator delete (_351);

  <bb 138>:
  # DEBUG D#121 => &D.55352._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55352 ={v} {CLOBBER};
  resx 20

<L77>:
  goto <bb 141> (<L6>);

<L75>:

<L6>:
  # DEBUG this => &D.55353
  # DEBUG this => &D.55353
  # DEBUG this => &D.55353
  _344 = MEM[(char * *)&D.55353];
  # DEBUG D#1 => &D.55353
  # DEBUG this => D#1
  # DEBUG this => &D.55353
  if (&D.55353.D.13615._M_local_buf != _344)
    goto <bb 142>;
  else
    goto <bb 143>;

  <bb 142>:
  # DEBUG D#120 => D.55353.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55353
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55353
  # DEBUG this => D#1
  # DEBUG this => &D.55353
  # DEBUG D#117 => &D.55353._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _344
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _344
  # DEBUG this => D#111
  # DEBUG D.66171 => D#112
  operator delete (_344);

  <bb 143>:
  # DEBUG D#121 => &D.55353._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55353 ={v} {CLOBBER};
  resx 19

<L78>:
  goto <bb 262> (<L66>);

<L8>:
  # DEBUG this => &D.55355
  # DEBUG this => &D.55355
  # DEBUG this => &D.55355
  _347 = MEM[(char * *)&D.55355];
  # DEBUG D#1 => &D.55355
  # DEBUG this => D#1
  # DEBUG this => &D.55355
  if (&D.55355.D.13615._M_local_buf != _347)
    goto <bb 146>;
  else
    goto <bb 147>;

  <bb 146>:
  # DEBUG D#120 => D.55355.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55355
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55355
  # DEBUG this => D#1
  # DEBUG this => &D.55355
  # DEBUG D#117 => &D.55355._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _347
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _347
  # DEBUG this => D#111
  # DEBUG D.66188 => D#112
  operator delete (_347);

  <bb 147>:
  # DEBUG D#121 => &D.55355._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55355 ={v} {CLOBBER};
  resx 25

<L79>:
  goto <bb 262> (<L66>);

<L10>:
  # DEBUG this => &D.55357
  # DEBUG this => &D.55357
  # DEBUG this => &D.55357
  _343 = MEM[(char * *)&D.55357];
  # DEBUG D#1 => &D.55357
  # DEBUG this => D#1
  # DEBUG this => &D.55357
  if (&D.55357.D.13615._M_local_buf != _343)
    goto <bb 150>;
  else
    goto <bb 151>;

  <bb 150>:
  # DEBUG D#120 => D.55357.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55357
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55357
  # DEBUG this => D#1
  # DEBUG this => &D.55357
  # DEBUG D#117 => &D.55357._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _343
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _343
  # DEBUG this => D#111
  # DEBUG D.66205 => D#112
  operator delete (_343);

  <bb 151>:
  # DEBUG D#121 => &D.55357._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55357 ={v} {CLOBBER};
  resx 29

<L80>:
  goto <bb 262> (<L66>);

<L12>:
  # DEBUG this => &D.55359
  # DEBUG this => &D.55359
  # DEBUG this => &D.55359
  _341 = MEM[(char * *)&D.55359];
  # DEBUG D#1 => &D.55359
  # DEBUG this => D#1
  # DEBUG this => &D.55359
  if (&D.55359.D.13615._M_local_buf != _341)
    goto <bb 154>;
  else
    goto <bb 155>;

  <bb 154>:
  # DEBUG D#120 => D.55359.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55359
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55359
  # DEBUG this => D#1
  # DEBUG this => &D.55359
  # DEBUG D#117 => &D.55359._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _341
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _341
  # DEBUG this => D#111
  # DEBUG D.66222 => D#112
  operator delete (_341);

  <bb 155>:
  # DEBUG D#121 => &D.55359._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55359 ={v} {CLOBBER};
  resx 33

<L81>:
  goto <bb 262> (<L66>);

<L14>:
  # DEBUG this => &D.55361
  # DEBUG this => &D.55361
  # DEBUG this => &D.55361
  _339 = MEM[(char * *)&D.55361];
  # DEBUG D#1 => &D.55361
  # DEBUG this => D#1
  # DEBUG this => &D.55361
  if (&D.55361.D.13615._M_local_buf != _339)
    goto <bb 158>;
  else
    goto <bb 159>;

  <bb 158>:
  # DEBUG D#120 => D.55361.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55361
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55361
  # DEBUG this => D#1
  # DEBUG this => &D.55361
  # DEBUG D#117 => &D.55361._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _339
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _339
  # DEBUG this => D#111
  # DEBUG D.66239 => D#112
  operator delete (_339);

  <bb 159>:
  # DEBUG D#121 => &D.55361._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55361 ={v} {CLOBBER};
  resx 37

<L82>:
  goto <bb 262> (<L66>);

<L16>:
  # DEBUG this => &D.55363
  # DEBUG this => &D.55363
  # DEBUG this => &D.55363
  _337 = MEM[(char * *)&D.55363];
  # DEBUG D#1 => &D.55363
  # DEBUG this => D#1
  # DEBUG this => &D.55363
  if (&D.55363.D.13615._M_local_buf != _337)
    goto <bb 162>;
  else
    goto <bb 163>;

  <bb 162>:
  # DEBUG D#120 => D.55363.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55363
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55363
  # DEBUG this => D#1
  # DEBUG this => &D.55363
  # DEBUG D#117 => &D.55363._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _337
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _337
  # DEBUG this => D#111
  # DEBUG D.66256 => D#112
  operator delete (_337);

  <bb 163>:
  # DEBUG D#121 => &D.55363._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55363 ={v} {CLOBBER};
  resx 41

<L83>:
  goto <bb 262> (<L66>);

<L18>:
  # DEBUG this => &D.55365
  # DEBUG this => &D.55365
  # DEBUG this => &D.55365
  _335 = MEM[(char * *)&D.55365];
  # DEBUG D#1 => &D.55365
  # DEBUG this => D#1
  # DEBUG this => &D.55365
  if (&D.55365.D.13615._M_local_buf != _335)
    goto <bb 166>;
  else
    goto <bb 167>;

  <bb 166>:
  # DEBUG D#120 => D.55365.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55365
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55365
  # DEBUG this => D#1
  # DEBUG this => &D.55365
  # DEBUG D#117 => &D.55365._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _335
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _335
  # DEBUG this => D#111
  # DEBUG D.66273 => D#112
  operator delete (_335);

  <bb 167>:
  # DEBUG D#121 => &D.55365._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55365 ={v} {CLOBBER};
  resx 45

<L84>:
  goto <bb 262> (<L66>);

<L20>:
  # DEBUG this => &D.55367
  # DEBUG this => &D.55367
  # DEBUG this => &D.55367
  _333 = MEM[(char * *)&D.55367];
  # DEBUG D#1 => &D.55367
  # DEBUG this => D#1
  # DEBUG this => &D.55367
  if (&D.55367.D.13615._M_local_buf != _333)
    goto <bb 170>;
  else
    goto <bb 171>;

  <bb 170>:
  # DEBUG D#120 => D.55367.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55367
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55367
  # DEBUG this => D#1
  # DEBUG this => &D.55367
  # DEBUG D#117 => &D.55367._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _333
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _333
  # DEBUG this => D#111
  # DEBUG D.66290 => D#112
  operator delete (_333);

  <bb 171>:
  # DEBUG D#121 => &D.55367._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55367 ={v} {CLOBBER};
  resx 49

<L85>:
  goto <bb 262> (<L66>);

<L22>:
  # DEBUG this => &D.55369
  # DEBUG this => &D.55369
  # DEBUG this => &D.55369
  _331 = MEM[(char * *)&D.55369];
  # DEBUG D#1 => &D.55369
  # DEBUG this => D#1
  # DEBUG this => &D.55369
  if (&D.55369.D.13615._M_local_buf != _331)
    goto <bb 174>;
  else
    goto <bb 175>;

  <bb 174>:
  # DEBUG D#120 => D.55369.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55369
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55369
  # DEBUG this => D#1
  # DEBUG this => &D.55369
  # DEBUG D#117 => &D.55369._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _331
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _331
  # DEBUG this => D#111
  # DEBUG D.66307 => D#112
  operator delete (_331);

  <bb 175>:
  # DEBUG D#121 => &D.55369._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55369 ={v} {CLOBBER};
  resx 53

<L86>:
  goto <bb 262> (<L66>);

<L24>:
  # DEBUG this => &D.55371
  # DEBUG this => &D.55371
  # DEBUG this => &D.55371
  _329 = MEM[(char * *)&D.55371];
  # DEBUG D#1 => &D.55371
  # DEBUG this => D#1
  # DEBUG this => &D.55371
  if (&D.55371.D.13615._M_local_buf != _329)
    goto <bb 178>;
  else
    goto <bb 179>;

  <bb 178>:
  # DEBUG D#120 => D.55371.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55371
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55371
  # DEBUG this => D#1
  # DEBUG this => &D.55371
  # DEBUG D#117 => &D.55371._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _329
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _329
  # DEBUG this => D#111
  # DEBUG D.66324 => D#112
  operator delete (_329);

  <bb 179>:
  # DEBUG D#121 => &D.55371._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55371 ={v} {CLOBBER};
  resx 57

<L87>:
  goto <bb 262> (<L66>);

<L26>:
  # DEBUG this => &D.55373
  # DEBUG this => &D.55373
  # DEBUG this => &D.55373
  _327 = MEM[(char * *)&D.55373];
  # DEBUG D#1 => &D.55373
  # DEBUG this => D#1
  # DEBUG this => &D.55373
  if (&D.55373.D.13615._M_local_buf != _327)
    goto <bb 182>;
  else
    goto <bb 183>;

  <bb 182>:
  # DEBUG D#120 => D.55373.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55373
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55373
  # DEBUG this => D#1
  # DEBUG this => &D.55373
  # DEBUG D#117 => &D.55373._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _327
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _327
  # DEBUG this => D#111
  # DEBUG D.66341 => D#112
  operator delete (_327);

  <bb 183>:
  # DEBUG D#121 => &D.55373._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55373 ={v} {CLOBBER};
  resx 61

<L88>:
  goto <bb 262> (<L66>);

<L28>:
  # DEBUG this => &D.55375
  # DEBUG this => &D.55375
  # DEBUG this => &D.55375
  _325 = MEM[(char * *)&D.55375];
  # DEBUG D#1 => &D.55375
  # DEBUG this => D#1
  # DEBUG this => &D.55375
  if (&D.55375.D.13615._M_local_buf != _325)
    goto <bb 186>;
  else
    goto <bb 187>;

  <bb 186>:
  # DEBUG D#120 => D.55375.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55375
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55375
  # DEBUG this => D#1
  # DEBUG this => &D.55375
  # DEBUG D#117 => &D.55375._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _325
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _325
  # DEBUG this => D#111
  # DEBUG D.66358 => D#112
  operator delete (_325);

  <bb 187>:
  # DEBUG D#121 => &D.55375._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55375 ={v} {CLOBBER};
  resx 65

<L89>:
  goto <bb 262> (<L66>);

<L30>:
  # DEBUG this => &D.55377
  # DEBUG this => &D.55377
  # DEBUG this => &D.55377
  _323 = MEM[(char * *)&D.55377];
  # DEBUG D#1 => &D.55377
  # DEBUG this => D#1
  # DEBUG this => &D.55377
  if (&D.55377.D.13615._M_local_buf != _323)
    goto <bb 190>;
  else
    goto <bb 191>;

  <bb 190>:
  # DEBUG D#120 => D.55377.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55377
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55377
  # DEBUG this => D#1
  # DEBUG this => &D.55377
  # DEBUG D#117 => &D.55377._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _323
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _323
  # DEBUG this => D#111
  # DEBUG D.66375 => D#112
  operator delete (_323);

  <bb 191>:
  # DEBUG D#121 => &D.55377._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55377 ={v} {CLOBBER};
  resx 69

<L90>:
  goto <bb 262> (<L66>);

<L32>:
  # DEBUG this => &D.55379
  # DEBUG this => &D.55379
  # DEBUG this => &D.55379
  _321 = MEM[(char * *)&D.55379];
  # DEBUG D#1 => &D.55379
  # DEBUG this => D#1
  # DEBUG this => &D.55379
  if (&D.55379.D.13615._M_local_buf != _321)
    goto <bb 194>;
  else
    goto <bb 195>;

  <bb 194>:
  # DEBUG D#120 => D.55379.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55379
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55379
  # DEBUG this => D#1
  # DEBUG this => &D.55379
  # DEBUG D#117 => &D.55379._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _321
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _321
  # DEBUG this => D#111
  # DEBUG D.66392 => D#112
  operator delete (_321);

  <bb 195>:
  # DEBUG D#121 => &D.55379._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55379 ={v} {CLOBBER};
  resx 73

<L91>:
  goto <bb 262> (<L66>);

<L34>:
  # DEBUG this => &D.55381
  # DEBUG this => &D.55381
  # DEBUG this => &D.55381
  _319 = MEM[(char * *)&D.55381];
  # DEBUG D#1 => &D.55381
  # DEBUG this => D#1
  # DEBUG this => &D.55381
  if (&D.55381.D.13615._M_local_buf != _319)
    goto <bb 198>;
  else
    goto <bb 199>;

  <bb 198>:
  # DEBUG D#120 => D.55381.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55381
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55381
  # DEBUG this => D#1
  # DEBUG this => &D.55381
  # DEBUG D#117 => &D.55381._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _319
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _319
  # DEBUG this => D#111
  # DEBUG D.66409 => D#112
  operator delete (_319);

  <bb 199>:
  # DEBUG D#121 => &D.55381._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55381 ={v} {CLOBBER};
  resx 77

<L92>:
  goto <bb 262> (<L66>);

<L36>:
  # DEBUG this => &D.55383
  # DEBUG this => &D.55383
  # DEBUG this => &D.55383
  _317 = MEM[(char * *)&D.55383];
  # DEBUG D#1 => &D.55383
  # DEBUG this => D#1
  # DEBUG this => &D.55383
  if (&D.55383.D.13615._M_local_buf != _317)
    goto <bb 202>;
  else
    goto <bb 203>;

  <bb 202>:
  # DEBUG D#120 => D.55383.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55383
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55383
  # DEBUG this => D#1
  # DEBUG this => &D.55383
  # DEBUG D#117 => &D.55383._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _317
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _317
  # DEBUG this => D#111
  # DEBUG D.66426 => D#112
  operator delete (_317);

  <bb 203>:
  # DEBUG D#121 => &D.55383._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55383 ={v} {CLOBBER};
  resx 81

<L93>:
  goto <bb 262> (<L66>);

<L38>:
  # DEBUG this => &D.55385
  # DEBUG this => &D.55385
  # DEBUG this => &D.55385
  _315 = MEM[(char * *)&D.55385];
  # DEBUG D#1 => &D.55385
  # DEBUG this => D#1
  # DEBUG this => &D.55385
  if (&D.55385.D.13615._M_local_buf != _315)
    goto <bb 206>;
  else
    goto <bb 207>;

  <bb 206>:
  # DEBUG D#120 => D.55385.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55385
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55385
  # DEBUG this => D#1
  # DEBUG this => &D.55385
  # DEBUG D#117 => &D.55385._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _315
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _315
  # DEBUG this => D#111
  # DEBUG D.66443 => D#112
  operator delete (_315);

  <bb 207>:
  # DEBUG D#121 => &D.55385._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55385 ={v} {CLOBBER};
  resx 85

<L94>:
  goto <bb 262> (<L66>);

<L40>:
  # DEBUG this => &D.55387
  # DEBUG this => &D.55387
  # DEBUG this => &D.55387
  _313 = MEM[(char * *)&D.55387];
  # DEBUG D#1 => &D.55387
  # DEBUG this => D#1
  # DEBUG this => &D.55387
  if (&D.55387.D.13615._M_local_buf != _313)
    goto <bb 210>;
  else
    goto <bb 211>;

  <bb 210>:
  # DEBUG D#120 => D.55387.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55387
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55387
  # DEBUG this => D#1
  # DEBUG this => &D.55387
  # DEBUG D#117 => &D.55387._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _313
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _313
  # DEBUG this => D#111
  # DEBUG D.66460 => D#112
  operator delete (_313);

  <bb 211>:
  # DEBUG D#121 => &D.55387._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55387 ={v} {CLOBBER};
  resx 89

<L95>:
  goto <bb 262> (<L66>);

<L42>:
  # DEBUG this => &D.55389
  # DEBUG this => &D.55389
  # DEBUG this => &D.55389
  _311 = MEM[(char * *)&D.55389];
  # DEBUG D#1 => &D.55389
  # DEBUG this => D#1
  # DEBUG this => &D.55389
  if (&D.55389.D.13615._M_local_buf != _311)
    goto <bb 214>;
  else
    goto <bb 215>;

  <bb 214>:
  # DEBUG D#120 => D.55389.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55389
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55389
  # DEBUG this => D#1
  # DEBUG this => &D.55389
  # DEBUG D#117 => &D.55389._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _311
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _311
  # DEBUG this => D#111
  # DEBUG D.66477 => D#112
  operator delete (_311);

  <bb 215>:
  # DEBUG D#121 => &D.55389._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55389 ={v} {CLOBBER};
  resx 93

<L96>:
  goto <bb 262> (<L66>);

<L44>:
  # DEBUG this => &D.55391
  # DEBUG this => &D.55391
  # DEBUG this => &D.55391
  _309 = MEM[(char * *)&D.55391];
  # DEBUG D#1 => &D.55391
  # DEBUG this => D#1
  # DEBUG this => &D.55391
  if (&D.55391.D.13615._M_local_buf != _309)
    goto <bb 218>;
  else
    goto <bb 219>;

  <bb 218>:
  # DEBUG D#120 => D.55391.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55391
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55391
  # DEBUG this => D#1
  # DEBUG this => &D.55391
  # DEBUG D#117 => &D.55391._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _309
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _309
  # DEBUG this => D#111
  # DEBUG D.66494 => D#112
  operator delete (_309);

  <bb 219>:
  # DEBUG D#121 => &D.55391._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55391 ={v} {CLOBBER};
  resx 97

<L97>:
  goto <bb 262> (<L66>);

<L46>:
  # DEBUG this => &D.55393
  # DEBUG this => &D.55393
  # DEBUG this => &D.55393
  _307 = MEM[(char * *)&D.55393];
  # DEBUG D#1 => &D.55393
  # DEBUG this => D#1
  # DEBUG this => &D.55393
  if (&D.55393.D.13615._M_local_buf != _307)
    goto <bb 222>;
  else
    goto <bb 223>;

  <bb 222>:
  # DEBUG D#120 => D.55393.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55393
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55393
  # DEBUG this => D#1
  # DEBUG this => &D.55393
  # DEBUG D#117 => &D.55393._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _307
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _307
  # DEBUG this => D#111
  # DEBUG D.66511 => D#112
  operator delete (_307);

  <bb 223>:
  # DEBUG D#121 => &D.55393._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55393 ={v} {CLOBBER};
  resx 101

<L98>:
  goto <bb 262> (<L66>);

<L48>:
  # DEBUG this => &D.55395
  # DEBUG this => &D.55395
  # DEBUG this => &D.55395
  _305 = MEM[(char * *)&D.55395];
  # DEBUG D#1 => &D.55395
  # DEBUG this => D#1
  # DEBUG this => &D.55395
  if (&D.55395.D.13615._M_local_buf != _305)
    goto <bb 226>;
  else
    goto <bb 227>;

  <bb 226>:
  # DEBUG D#120 => D.55395.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55395
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55395
  # DEBUG this => D#1
  # DEBUG this => &D.55395
  # DEBUG D#117 => &D.55395._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _305
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _305
  # DEBUG this => D#111
  # DEBUG D.66528 => D#112
  operator delete (_305);

  <bb 227>:
  # DEBUG D#121 => &D.55395._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55395 ={v} {CLOBBER};
  resx 105

<L99>:
  goto <bb 262> (<L66>);

<L50>:
  # DEBUG this => &D.55397
  # DEBUG this => &D.55397
  # DEBUG this => &D.55397
  _303 = MEM[(char * *)&D.55397];
  # DEBUG D#1 => &D.55397
  # DEBUG this => D#1
  # DEBUG this => &D.55397
  if (&D.55397.D.13615._M_local_buf != _303)
    goto <bb 230>;
  else
    goto <bb 231>;

  <bb 230>:
  # DEBUG D#120 => D.55397.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55397
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55397
  # DEBUG this => D#1
  # DEBUG this => &D.55397
  # DEBUG D#117 => &D.55397._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _303
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _303
  # DEBUG this => D#111
  # DEBUG D.66545 => D#112
  operator delete (_303);

  <bb 231>:
  # DEBUG D#121 => &D.55397._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55397 ={v} {CLOBBER};
  resx 109

<L100>:
  goto <bb 262> (<L66>);

<L52>:
  # DEBUG this => &D.55399
  # DEBUG this => &D.55399
  # DEBUG this => &D.55399
  _301 = MEM[(char * *)&D.55399];
  # DEBUG D#1 => &D.55399
  # DEBUG this => D#1
  # DEBUG this => &D.55399
  if (&D.55399.D.13615._M_local_buf != _301)
    goto <bb 234>;
  else
    goto <bb 235>;

  <bb 234>:
  # DEBUG D#120 => D.55399.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55399
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55399
  # DEBUG this => D#1
  # DEBUG this => &D.55399
  # DEBUG D#117 => &D.55399._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _301
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _301
  # DEBUG this => D#111
  # DEBUG D.66562 => D#112
  operator delete (_301);

  <bb 235>:
  # DEBUG D#121 => &D.55399._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55399 ={v} {CLOBBER};
  resx 113

<L101>:
  goto <bb 262> (<L66>);

<L54>:
  # DEBUG this => &D.55401
  # DEBUG this => &D.55401
  # DEBUG this => &D.55401
  _299 = MEM[(char * *)&D.55401];
  # DEBUG D#1 => &D.55401
  # DEBUG this => D#1
  # DEBUG this => &D.55401
  if (&D.55401.D.13615._M_local_buf != _299)
    goto <bb 238>;
  else
    goto <bb 239>;

  <bb 238>:
  # DEBUG D#120 => D.55401.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55401
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55401
  # DEBUG this => D#1
  # DEBUG this => &D.55401
  # DEBUG D#117 => &D.55401._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _299
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _299
  # DEBUG this => D#111
  # DEBUG D.66579 => D#112
  operator delete (_299);

  <bb 239>:
  # DEBUG D#121 => &D.55401._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55401 ={v} {CLOBBER};
  resx 117

<L102>:
  goto <bb 262> (<L66>);

<L56>:
  # DEBUG this => &D.55403
  # DEBUG this => &D.55403
  # DEBUG this => &D.55403
  _297 = MEM[(char * *)&D.55403];
  # DEBUG D#1 => &D.55403
  # DEBUG this => D#1
  # DEBUG this => &D.55403
  if (&D.55403.D.13615._M_local_buf != _297)
    goto <bb 242>;
  else
    goto <bb 243>;

  <bb 242>:
  # DEBUG D#120 => D.55403.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55403
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55403
  # DEBUG this => D#1
  # DEBUG this => &D.55403
  # DEBUG D#117 => &D.55403._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _297
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _297
  # DEBUG this => D#111
  # DEBUG D.66596 => D#112
  operator delete (_297);

  <bb 243>:
  # DEBUG D#121 => &D.55403._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55403 ={v} {CLOBBER};
  resx 121

<L103>:
  goto <bb 262> (<L66>);

<L58>:
  # DEBUG this => &D.55405
  # DEBUG this => &D.55405
  # DEBUG this => &D.55405
  _295 = MEM[(char * *)&D.55405];
  # DEBUG D#1 => &D.55405
  # DEBUG this => D#1
  # DEBUG this => &D.55405
  if (&D.55405.D.13615._M_local_buf != _295)
    goto <bb 246>;
  else
    goto <bb 247>;

  <bb 246>:
  # DEBUG D#120 => D.55405.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55405
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55405
  # DEBUG this => D#1
  # DEBUG this => &D.55405
  # DEBUG D#117 => &D.55405._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _295
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _295
  # DEBUG this => D#111
  # DEBUG D.66613 => D#112
  operator delete (_295);

  <bb 247>:
  # DEBUG D#121 => &D.55405._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55405 ={v} {CLOBBER};
  resx 125

<L104>:
  goto <bb 262> (<L66>);

<L60>:
  # DEBUG this => &D.55407
  # DEBUG this => &D.55407
  # DEBUG this => &D.55407
  _293 = MEM[(char * *)&D.55407];
  # DEBUG D#1 => &D.55407
  # DEBUG this => D#1
  # DEBUG this => &D.55407
  if (&D.55407.D.13615._M_local_buf != _293)
    goto <bb 250>;
  else
    goto <bb 251>;

  <bb 250>:
  # DEBUG D#120 => D.55407.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55407
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55407
  # DEBUG this => D#1
  # DEBUG this => &D.55407
  # DEBUG D#117 => &D.55407._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _293
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _293
  # DEBUG this => D#111
  # DEBUG D.66630 => D#112
  operator delete (_293);

  <bb 251>:
  # DEBUG D#121 => &D.55407._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55407 ={v} {CLOBBER};
  resx 129

<L105>:
  goto <bb 262> (<L66>);

<L62>:
  # DEBUG this => &D.55409
  # DEBUG this => &D.55409
  # DEBUG this => &D.55409
  _291 = MEM[(char * *)&D.55409];
  # DEBUG D#1 => &D.55409
  # DEBUG this => D#1
  # DEBUG this => &D.55409
  if (&D.55409.D.13615._M_local_buf != _291)
    goto <bb 254>;
  else
    goto <bb 255>;

  <bb 254>:
  # DEBUG D#120 => D.55409.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55409
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55409
  # DEBUG this => D#1
  # DEBUG this => &D.55409
  # DEBUG D#117 => &D.55409._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _291
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _291
  # DEBUG this => D#111
  # DEBUG D.66647 => D#112
  operator delete (_291);

  <bb 255>:
  # DEBUG D#121 => &D.55409._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55409 ={v} {CLOBBER};
  resx 133

<L106>:
  goto <bb 262> (<L66>);

<L64>:
  # DEBUG this => &D.55411
  # DEBUG this => &D.55411
  # DEBUG this => &D.55411
  _289 = MEM[(char * *)&D.55411];
  # DEBUG D#1 => &D.55411
  # DEBUG this => D#1
  # DEBUG this => &D.55411
  if (&D.55411.D.13615._M_local_buf != _289)
    goto <bb 258>;
  else
    goto <bb 259>;

  <bb 258>:
  # DEBUG D#120 => D.55411.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &D.55411
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &D.55411
  # DEBUG this => D#1
  # DEBUG this => &D.55411
  # DEBUG D#117 => &D.55411._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _289
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _289
  # DEBUG this => D#111
  # DEBUG D.66664 => D#112
  operator delete (_289);

  <bb 259>:
  # DEBUG D#121 => &D.55411._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  D.55411 ={v} {CLOBBER};
  resx 137

<L107>:
  goto <bb 262> (<L66>);

<L73>:

<L66>:
  # DEBUG this => &pconfig
  Configuration::~Configuration (&pconfig.D.45344);
  MEM[(struct  &)&pconfig] ={v} {CLOBBER};
  resx 17

<L108>:
  goto <bb 265> (<L67>);

<L72>:

<L67>:
  # DEBUG this => &pfile
  # DEBUG this => &pfile
  # DEBUG this => &pfile
  _348 = MEM[(char * *)&pfile];
  # DEBUG D#1 => &pfile
  # DEBUG this => D#1
  # DEBUG this => &pfile
  if (&pfile.D.13615._M_local_buf != _348)
    goto <bb 266>;
  else
    goto <bb 267>;

  <bb 266>:
  # DEBUG D#120 => pfile.D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => &pfile
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => &pfile
  # DEBUG this => D#1
  # DEBUG this => &pfile
  # DEBUG D#117 => &pfile._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _348
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _348
  # DEBUG this => D#111
  # DEBUG D.66682 => D#112
  operator delete (_348);

  <bb 267>:
  # DEBUG D#121 => &pfile._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  resx 16

<L109>:
  goto <bb 270> (<L68>);

<L76>:

<L68>:
  pfile ={v} {CLOBBER};
  pconfig ={v} {CLOBBER};
  # DEBUG D#340 => &this_8(D)->wire_map
  # DEBUG this => D#340
  _349 = &MEM[(struct map *)this_8(D) + 176B]._M_t;
  # DEBUG this => _349
  _242 = MEM[(struct _Rb_tree_node_base * *)this_8(D) + 192B];
  # DEBUG D#23 => _349
  # DEBUG this => D#23
  std::_Rb_tree<double, std::pair<const double, wire>, std::_Select1st<std::pair<const double, wire> >, std::less<double>, std::allocator<std::pair<const double, wire> > >::_M_erase (_349, _242);
  # DEBUG D#306 => &MEM[(struct _Rb_tree *)_349]._M_impl
  # DEBUG this => D#306
  # DEBUG this => D#306
  # DEBUG this => D#306
  MEM[(struct  &)this_8(D) + 176] ={v} {CLOBBER};
  resx 7

<L70>:
  # DEBUG D#339 => &this_8(D)->output_file_name
  # DEBUG this => D#339
  # DEBUG this => D#339
  # DEBUG this => D#339
  _354 = MEM[(char * *)this_8(D) + 128B];
  # DEBUG D#1 => D#339
  # DEBUG this => D#1
  # DEBUG this => D#339
  if (_14 != _354)
    goto <bb 272>;
  else
    goto <bb 273>;

  <bb 272>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#339].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#339
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#339
  # DEBUG this => D#1
  # DEBUG this => D#339
  # DEBUG D#117 => &MEM[(struct basic_string *)D#339]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _354
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _354
  # DEBUG this => D#111
  # DEBUG D.66702 => D#112
  operator delete (_354);

  <bb 273>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#339]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)this_8(D) + 128] ={v} {CLOBBER};
  resx 6

<L71>:
  # DEBUG this => _9
  MEM[(struct Module *)this_8(D)]._vptr.Module = &MEM[(void *)&_ZTV6Module + 16B];
  # DEBUG D#145 => &_9->_children
  # DEBUG this => D#145
  # DEBUG D#139 => &D#145->D.28840
  # DEBUG this => D#139
  # DEBUG D#142 => D#145->D.28840._M_impl._M_finish
  # DEBUG D#141 => D#145->D.28840._M_impl._M_start
  # DEBUG D#56 => D#141
  # DEBUG D#57 => D#142
  # DEBUG __first => D#56
  # DEBUG __last => D#57
  # DEBUG D.63825 => D#58
  # DEBUG D#55 => D#57
  # DEBUG D#54 => D#56
  # DEBUG D#52 => D#54
  # DEBUG D#53 => D#55
  # DEBUG __first => D#52
  # DEBUG __last => D#53
  # DEBUG D#51 => D#53
  # DEBUG D#50 => D#52
  # DEBUG D#48 => D#50
  # DEBUG D#49 => D#51
  # DEBUG D.63445 => D#48
  # DEBUG D.63444 => D#49
  # DEBUG D#140 => &D#145->D.28840
  # DEBUG this => D#140
  # DEBUG D#138 => D#140->_M_impl._M_end_of_storage
  # DEBUG D#137 => (long int) D#138
  _1307 = MEM[(struct _Vector_base *)this_8(D) + 72B]._M_impl._M_start;
  # DEBUG D#136 => (long int) _1307
  # DEBUG D#135 => D#137 - D#136
  # DEBUG D#134 => D#135 /[ex] 8
  # DEBUG D#131 => D#140
  # DEBUG D#132 => (long unsigned int) D#134
  # DEBUG __p => _1307
  # DEBUG this => D#131
  # DEBUG __n => D#132
  # DEBUG D#130 => D#132
  # DEBUG D#129 => D#131
  if (_1307 != 0B)
    goto <bb 275>;
  else
    goto <bb 276>;

  <bb 275>:
  # DEBUG D#128 => &D#129->_M_impl
  # DEBUG D#126 => D#128
  # DEBUG D#127 => D#130
  # DEBUG __p => _1307
  # DEBUG __a => D#126
  # DEBUG __n => D#127
  # DEBUG D#125 => D#127
  # DEBUG D#124 => D#126
  # DEBUG D#122 => D#124
  # DEBUG D#123 => D#125
  # DEBUG __p => _1307
  # DEBUG this => D#122
  # DEBUG D.72632 => D#123
  operator delete (_1307);

  <bb 276>:
  # DEBUG D#133 => &D#140->_M_impl
  # DEBUG this => D#133
  # DEBUG this => D#133
  # DEBUG this => D#133
  MEM[(struct  &)this_8(D) + 72] ={v} {CLOBBER};
  # DEBUG D#144 => &_9->_fullname
  # DEBUG this => D#144
  # DEBUG this => D#144
  # DEBUG this => D#144
  _1308 = MEM[(char * *)this_8(D) + 40B];
  # DEBUG D#1 => D#144
  # DEBUG this => D#1
  # DEBUG this => D#144
  _1309 = &MEM[(const struct basic_string *)this_8(D) + 40B].D.13615._M_local_buf;
  if (_1308 != _1309)
    goto <bb 277>;
  else
    goto <bb 278>;

  <bb 277>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#144].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#144
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#144
  # DEBUG this => D#1
  # DEBUG this => D#144
  # DEBUG D#117 => &MEM[(struct basic_string *)D#144]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _1308
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _1308
  # DEBUG this => D#111
  # DEBUG D.72645 => D#112
  operator delete (_1308);

  <bb 278>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#144]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)this_8(D) + 40] ={v} {CLOBBER};
  # DEBUG D#143 => &_9->_name
  # DEBUG this => D#143
  # DEBUG this => D#143
  # DEBUG this => D#143
  _1310 = MEM[(char * *)this_8(D) + 8B];
  # DEBUG D#1 => D#143
  # DEBUG this => D#1
  # DEBUG this => D#143
  _1311 = &MEM[(const struct basic_string *)this_8(D) + 8B].D.13615._M_local_buf;
  if (_1310 != _1311)
    goto <bb 279>;
  else
    goto <bb 280>;

  <bb 279>:
  # DEBUG D#120 => MEM[(struct basic_string *)D#143].D.13615._M_allocated_capacity
  # DEBUG D#119 => D#120
  # DEBUG this => D#143
  # DEBUG __size => D#119
  # DEBUG D#118 => D#119
  # DEBUG D#1 => D#143
  # DEBUG this => D#1
  # DEBUG this => D#143
  # DEBUG D#117 => &MEM[(struct basic_string *)D#143]._M_dataplus
  # DEBUG D#115 => D#117
  # DEBUG D#116 => D#118 + 1
  # DEBUG __p => _1310
  # DEBUG __a => D#115
  # DEBUG __n => D#116
  # DEBUG D#114 => D#116
  # DEBUG D#113 => D#115
  # DEBUG D#111 => D#113
  # DEBUG D#112 => D#114
  # DEBUG __p => _1310
  # DEBUG this => D#111
  # DEBUG D.72660 => D#112
  operator delete (_1310);

  <bb 280>:
  # DEBUG D#121 => &MEM[(struct basic_string *)D#143]._M_dataplus
  # DEBUG this => D#121
  # DEBUG this => D#121
  # DEBUG this => D#121
  MEM[(struct  &)this_8(D)] ={v} {CLOBBER};
  resx 5

}



;; Function std::pair<std::_Rb_tree_iterator<_Val>, bool> std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_insert_unique(const _Val&) [with _Key = double; _Val = std::pair<const double, wire>; _KeyOfValue = std::_Select1st<std::pair<const double, wire> >; _Compare = std::less<double>; _Alloc = std::allocator<std::pair<const double, wire> >] (_ZNSt8_Rb_treeIdSt4pairIKd4wireESt10_Select1stIS3_ESt4lessIdESaIS3_EE16_M_insert_uniqueERKS3_, funcdef_no=2235, decl_uid=44679, cgraph_uid=734, symbol_order=735)

Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
std::pair<std::_Rb_tree_iterator<_Val>, bool> std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::_M_insert_unique(const _Val&) [with _Key = double; _Val = std::pair<const double, wire>; _KeyOfValue = std::_Select1st<std::pair<const double, wire> >; _Compare = std::less<double>; _Alloc = std::allocator<std::pair<const double, wire> >] (struct _Rb_tree * const this, const struct pair & __v)
{
  struct _Rb_tree_node_base * SR.804;
  struct _Rb_tree_node_base * SR.803;
  struct _Rb_tree_node_base * __res$8;
  struct _Rb_tree_node_base * __res;
  struct _Rb_tree_node * D.72780;
  bool __insert_left;
  struct iterator D.72763;
  struct pair D.72752;
  bool __comp;
  struct _Rb_tree_node_base * const __j$_M_node;
  struct _Rb_tree_node_base * SR.550;
  struct _Rb_tree_node_base * __res$second;
  struct _Rb_tree_node_base * __res$first;
  struct pair __res;
  struct iterator D.58376;
  struct pair D.61428;
  struct _Rb_tree_node * _8;
  const double pretmp_16;
  struct _Rb_tree_node_base * _19;
  int prephitmp_21;
  const double _23;
  struct _Rb_tree_node_base * _25;
  struct _Rb_tree_node_base * _26;
  const double pretmp_27;
  struct _Rb_tree_node_base * _28;
  struct _Rb_tree_node_base * const _34;
  const double _37;
  const double _38;
  long unsigned int _43;
  long unsigned int _44;
  const double prephitmp_48;
  const double _49;
  const double prephitmp_50;
  const double pretmp_52;
  int pretmp_72;

  <bb 2>:
  # DEBUG D#43 => &D.58319
  # DEBUG __x => __v_3(D)
  # DEBUG this => D#43
  # DEBUG D#714 => &__v_3(D)->first
  # DEBUG this => this_5(D)
  # DEBUG __k => D#714
  _19 = MEM[(struct _Rb_tree_node_base * *)this_5(D) + 16B];
  # DEBUG D#23 => this_5(D)
  # DEBUG this => D#23
  # DEBUG __x => NULL
  # DEBUG this => this_5(D)
  __j$_M_node_20 = &this_5(D)->_M_impl._M_header;
  # DEBUG __y => NULL
  # DEBUG __comp => 1
  # DEBUG __comp => 1
  # DEBUG __y => __j$_M_node_20
  # DEBUG __x => _19
  if (_19 == 0B)
    goto <bb 10>;
  else
    goto <bb 3>;

  <bb 3>:
  pretmp_52 = MEM[(const double &)__v_3(D)];
  goto <bb 6>;

  <bb 4>:
  # _34 = PHI <_25(7), _26(8)>
  # DEBUG __comp => D#716 < _23
  # DEBUG __y => __j$_M_node_61
  # DEBUG __x => _34
  if (_34 == 0B)
    goto <bb 9>;
  else
    goto <bb 5>;

  <bb 5>:

  <bb 6>:
  # __j$_M_node_61 = PHI <_19(3), _34(5)>
  # DEBUG __comp => 1
  # DEBUG __x => __j$_M_node_61
  # DEBUG __y => __j$_M_node_61
  # DEBUG __x => __j$_M_node_61
  # DEBUG __x => __j$_M_node_61
  # DEBUG this => __j$_M_node_61
  # DEBUG D#279 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_61]._M_value_field
  # DEBUG __r => D#279
  # DEBUG __x => D#279
  # DEBUG this => D#43
  # DEBUG D#289 => &MEM[(const struct pair &)__j$_M_node_61 + 32].first
  # DEBUG D#293 => &this_5(D)->_M_impl._M_key_compare
  # DEBUG D#39 => D#293
  # DEBUG D#716 => MEM[(const double &)__v_3(D)]
  # DEBUG D#40 => D#714
  _23 = MEM[(const double &)__j$_M_node_61 + 32];
  # DEBUG D#41 => D#289
  # DEBUG this => D#39
  # DEBUG __x => D#40
  # DEBUG __y => D#41
  # DEBUG __comp => NULL
  if (_23 > pretmp_52)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  _25 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_61 + 16B];
  # DEBUG D#30 => __j$_M_node_61
  # DEBUG __x => D#30
  goto <bb 4>;

  <bb 8>:
  _26 = MEM[(struct _Rb_tree_node_base * *)__j$_M_node_61 + 24B];
  # DEBUG D#29 => __j$_M_node_61
  # DEBUG __x => D#29
  goto <bb 4>;

  <bb 9>:
  # _49 = PHI <_23(4)>
  # __j$_M_node_24 = PHI <__j$_M_node_61(4)>

  <bb 19>:
  # DEBUG this => &__j
  # DEBUG __x => __j$_M_node_24
  # DEBUG __j$_M_node => __j$_M_node_24
  if (_49 > pretmp_52)
    goto <bb 10>;
  else
    goto <bb 12>;

  <bb 10>:
  # __j$_M_node_73 = PHI <__j$_M_node_24(19), __j$_M_node_20(2)>
  # DEBUG this => &__j
  # DEBUG __x => __j$_M_node_73
  # DEBUG __j$_M_node => __j$_M_node_73
  _28 = MEM[(struct _Rb_tree_node_base * *)this_5(D) + 24B];
  # DEBUG D#88 => this_5(D)
  # DEBUG this => D#88
  # DEBUG this => NULL
  # DEBUG __x => _28
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (_28 == __j$_M_node_73)
    goto <bb 13>;
  else
    goto <bb 11>;

  <bb 11>:
  # DEBUG this => &__j
  __j$_M_node_30 = std::_Rb_tree_decrement (__j$_M_node_73);
  # DEBUG __j$_M_node => __j$_M_node_30
  pretmp_16 = MEM[(const double &)__v_3(D)];
  pretmp_27 = MEM[(const double &)__j$_M_node_30 + 32];

  <bb 12>:
  # __j$_M_node_31 = PHI <__j$_M_node_24(19), __j$_M_node_30(11)>
  # __j$_M_node_62 = PHI <__j$_M_node_24(19), __j$_M_node_73(11)>
  # prephitmp_48 = PHI <pretmp_52(19), pretmp_16(11)>
  # prephitmp_50 = PHI <_49(19), pretmp_27(11)>
  # DEBUG __j$_M_node => __j$_M_node_31
  # DEBUG __x => __j$_M_node_31
  # DEBUG __x => __j$_M_node_31
  # DEBUG this => __j$_M_node_31
  # DEBUG D#284 => &MEM[(const struct _Rb_tree_node *)__j$_M_node_31]._M_value_field
  # DEBUG __r => D#284
  # DEBUG __x => D#284
  # DEBUG this => D#43
  # DEBUG D#290 => &MEM[(const struct pair &)__j$_M_node_31 + 32].first
  # DEBUG D#292 => &this_5(D)->_M_impl._M_key_compare
  # DEBUG D#39 => D#292
  # DEBUG D#40 => D#290
  # DEBUG D#41 => D#714
  # DEBUG this => D#39
  # DEBUG __x => D#40
  # DEBUG __y => D#41
  if (prephitmp_48 > prephitmp_50)
    goto <bb 13>;
  else
    goto <bb 17>;

  <bb 13>:
  # __res$second_53 = PHI <_28(10), __j$_M_node_62(12)>
  # DEBUG D#291 => {CLOBBER}
  # DEBUG __j$_M_node => D#291
  # DEBUG __res => 0B
  # DEBUG __res$8 => __res$second_53
  # DEBUG __res$first => 0B
  # DEBUG __res$second => __res$second_53
  if (__res$second_53 != 0B)
    goto <bb 14>;
  else
    goto <bb 17>;

  <bb 14>:
  # DEBUG this => &__an
  # DEBUG __t => this_5(D)
  # DEBUG __an$_M_t => this_5(D)
  # DEBUG D#427 => &__an
  # DEBUG this => this_5(D)
  # DEBUG __x => 0B
  # DEBUG __p => __res$second_53
  # DEBUG __v => __v_3(D)
  # DEBUG __node_gen => D#427
  # DEBUG D#426 => D#427
  # DEBUG this => this_5(D)
  if (__j$_M_node_20 == __res$second_53)
    goto <bb 16>;
  else
    goto <bb 15>;

  <bb 15>:
  # DEBUG __x => __res$second_53
  # DEBUG __x => __res$second_53
  # DEBUG this => __res$second_53
  # DEBUG D#284 => &MEM[(const struct _Rb_tree_node *)__res$second_53]._M_value_field
  # DEBUG __r => D#284
  # DEBUG __x => D#284
  # DEBUG this => D#43
  # DEBUG D#424 => &MEM[(const struct pair &)__res$second_53 + 32].first
  # DEBUG __x => __v_3(D)
  # DEBUG this => D#43
  # DEBUG D#425 => &this_5(D)->_M_impl._M_key_compare
  # DEBUG D#39 => D#425
  _37 = MEM[(const double &)__v_3(D)];
  _38 = MEM[(const double &)__res$second_53 + 32];
  # DEBUG D#41 => D#424
  # DEBUG this => D#39
  # DEBUG __x => D#40
  # DEBUG __y => D#41
  __insert_left_35 = _37 < _38;
  pretmp_72 = (int) __insert_left_35;

  <bb 16>:
  # prephitmp_21 = PHI <pretmp_72(15), 1(14)>
  # DEBUG __insert_left => NULL
  # DEBUG D#423 => D#426
  # DEBUG __arg => __v_3(D)
  # DEBUG this => D#423
  # DEBUG D#422 => D#423
  # DEBUG D#421 => D#422->_M_t
  # DEBUG D#420 => D#421
  # DEBUG __x => __v_3(D)
  # DEBUG this => D#420
  # DEBUG D#419 => D#420
  # DEBUG D#418 => D#420
  # DEBUG D#417 => D#418
  # DEBUG this => D#417
  # DEBUG D#416 => D#417
  # DEBUG this => D#416
  # DEBUG __n => 1
  # DEBUG __a => D#415
  # DEBUG D#414 => D#415
  # DEBUG D#412 => D#414
  # DEBUG D#413 => 0B
  # DEBUG __n => 1
  # DEBUG this => D#412
  # DEBUG D.72771 => D#413
  # DEBUG D#411 => D#412
  # DEBUG D#410 => D#411
  # DEBUG this => D#410
  _8 = operator new (72);
  # DEBUG __tmp => _8
  # DEBUG D#368 => D#419
  # DEBUG __node => _8
  # DEBUG __x => __v_3(D)
  # DEBUG this => D#368
  # DEBUG D#367 => D#368
  # DEBUG this => _8
  # DEBUG D#715 => &_8->_M_value_field
  # DEBUG __r => D#715
  # DEBUG D#295 => D#367
  # DEBUG this => D#295
  # DEBUG D#294 => D#295
  # DEBUG this => D#294
  # DEBUG this => NULL
  # DEBUG D.64948 => NULL
  # DEBUG this => NULL
  # DEBUG __p => D#715
  # DEBUG __val => __v_3(D)
  # DEBUG this => D#366
  # DEBUG D#6 => 40
  # DEBUG __p => D#715
  # DEBUG D.66858 => D#6
  MEM[(struct pair *)_8 + 32B] = *__v_3(D);
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG __z => NULL
  std::_Rb_tree_insert_and_rebalance (prephitmp_21, _8, __res$second_53, __j$_M_node_20);
  _43 = this_5(D)->_M_impl._M_node_count;
  _44 = _43 + 1;
  this_5(D)->_M_impl._M_node_count = _44;
  # DEBUG this => NULL
  # DEBUG __x => NULL
  # DEBUG this => &D.58378
  # DEBUG __a => &D.58376
  # DEBUG __b => &D.58377
  MEM[(struct pair *)&D.61428] = _8;
  MEM[(struct pair *)&D.61428 + 8B] = 1;
  D.58376 ={v} {CLOBBER};
  goto <bb 18>;

  <bb 17>:
  # __res$first_74 = PHI <0B(13), __j$_M_node_31(12)>

  <bb 21>:
  # DEBUG D#291 => {CLOBBER}
  # DEBUG __j$_M_node => D#291
  # DEBUG __res => __res$first_74
  # DEBUG __res$8 => NULL
  # DEBUG __res$first => __res$first_74
  # DEBUG __res$second => NULL
  # DEBUG this => &D.58379
  # DEBUG __x => __res$first_74
  # DEBUG this => &D.58381
  # DEBUG __a => &D.58379
  # DEBUG __b => &D.58380
  MEM[(struct pair *)&D.61428] = __res$first_74;
  MEM[(struct pair *)&D.61428 + 8B] = 0;

  <bb 18>:

  <bb 20>:
  # DEBUG D#430 => {CLOBBER}
  # DEBUG __res$first => D#430
  # DEBUG D#431 => {CLOBBER}
  # DEBUG __res$second => D#431
  return D.61428;

}



;; Function const wire& Power_Module::wireOptimize(double) (_ZN12Power_Module12wireOptimizeEd, funcdef_no=1995, decl_uid=45158, cgraph_uid=494, symbol_order=495)

Trying loop 1 as candidate
loop 1 is not innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is not innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is innermost
loop is not parallel according to graphite
Trying loop 4 as candidate
loop 4 is innermost
loop is not parallel according to graphite
const wire& Power_Module::wireOptimize(double) (struct Power_Module * const this, double L)
{
  char_type D.72808;
  char __c;
  char_type D.72805;
  char __c;
  char_type D.72802;
  struct basic_ostream & D.72796;
  struct _Rb_tree_node_base * SR.574;
  struct _Rb_tree_node_base * const iter$_M_node;
  struct pair D.68040;
  double Ca;
  double Pa;
  double Cdin;
  double Cclk;
  double Cint;
  struct _Rb_tree_node * __y;
  double power;
  double Tw;
  double k2;
  double k1;
  double k0;
  double l;
  double bestN;
  double bestM;
  double bestK;
  double bestMetric;
  const struct value_type D.56465;
  double _29;
  bool _44;
  double _48;
  double _49;
  double _50;
  double _51;
  double _55;
  double _58;
  double _59;
  double _60;
  double _62;
  struct __ostream_type & _68;
  struct __ostream_type & _69;
  struct __ostream_type & _70;
  struct __ostream_type & _71;
  struct _Rep_type * _72;
  unsigned int ivtmp_76;
  const struct wire & _81;
  const double _85;
  const double _90;
  bool _91;
  double _105;
  double _106;
  double _108;
  double _109;
  double _115;
  double _117;
  double _119;
  double _120;
  double _123;
  double _124;
  const struct __ctype_type * _136;
  int (*__vtbl_ptr_type) () * _141;
  long int _142;
  sizetype _143;
  struct basic_ios * _144;
  struct basic_ostream & _147;
  char _149;
  char_type _152;
  unsigned int ivtmp_155;
  int (*__vtbl_ptr_type) () * _157;
  int (*__vtbl_ptr_type) () _158;
  void * PROF_162;
  char_type _164;
  bool _170;
  unsigned int ivtmp_277;
  unsigned int ivtmp_278;
  double pretmp_290;
  double pretmp_292;
  double pretmp_294;
  double pretmp_296;
  double pretmp_297;
  double pretmp_298;
  double pretmp_300;
  double pretmp_302;
  double pretmp_303;
  double pretmp_304;
  double pretmp_306;
  double pretmp_308;
  double pretmp_310;
  double pretmp_311;
  double pretmp_312;
  double pretmp_314;
  double pretmp_316;
  double pretmp_317;
  double pretmp_319;
  double pretmp_323;
  double pretmp_324;
  double pretmp_325;
  double pretmp_326;
  double pretmp_327;
  double pretmp_344;
  unsigned int ivtmp_374;
  unsigned int ivtmp_375;
  int pretmp_376;
  int pretmp_377;
  int prephitmp_378;
  double pretmp_379;
  double pretmp_380;
  double pretmp_381;
  double pretmp_382;
  double pretmp_383;
  double pretmp_384;
  double pretmp_385;
  double pretmp_386;
  double pretmp_387;

  <bb 2>:
  # DEBUG D#432 => &this_24(D)->wire_map
  # DEBUG this => D#432
  # DEBUG __x => &L
  # DEBUG D#288 => &D#432->_M_t
  # DEBUG this => D#288
  # DEBUG __k => &L
  # DEBUG this => D#288
  iter$_M_node_26 = &MEM[(struct _Rb_tree *)this_24(D) + 176B]._M_impl._M_header;
  iter$_M_node_83 = MEM[(struct _Rb_tree_node_base * *)this_24(D) + 192B];
  # DEBUG D#23 => D#288
  # DEBUG this => D#23
  # DEBUG D#283 => D#288
  # DEBUG __x => NULL
  # DEBUG __y => NULL
  # DEBUG __k => &L
  # DEBUG __y => iter$_M_node_26
  # DEBUG __x => iter$_M_node_83
  if (iter$_M_node_83 == 0B)
    goto <bb 10>;
  else
    goto <bb 5>;

  <bb 3>:
  # iter$_M_node_92 = PHI <iter$_M_node_88(8), iter$_M_node_87(7)>
  # iter$_M_node_93 = PHI <iter$_M_node_208(8), iter$_M_node_207(7)>
  # DEBUG __y => iter$_M_node_93
  # DEBUG __x => iter$_M_node_92
  if (iter$_M_node_92 == 0B)
    goto <bb 9>;
  else
    goto <bb 4>;

  <bb 4>:
  goto <bb 6>;

  <bb 5>:

  <bb 6>:
  # iter$_M_node_207 = PHI <iter$_M_node_83(5), iter$_M_node_92(4)>
  # iter$_M_node_208 = PHI <iter$_M_node_26(5), iter$_M_node_93(4)>
  # DEBUG __y => iter$_M_node_208
  # DEBUG __x => iter$_M_node_207
  # DEBUG __x => iter$_M_node_207
  # DEBUG __x => iter$_M_node_207
  # DEBUG this => iter$_M_node_207
  # DEBUG D#279 => &MEM[(const struct _Rb_tree_node *)iter$_M_node_207]._M_value_field
  # DEBUG __r => D#279
  # DEBUG __x => D#279
  # DEBUG this => D#43
  # DEBUG D#280 => &MEM[(const struct pair &)iter$_M_node_207 + 32].first
  # DEBUG D#281 => &D#282->_M_impl._M_key_compare
  # DEBUG D#39 => D#281
  _85 = MEM[(const double &)iter$_M_node_207 + 32];
  # DEBUG D#40 => D#280
  # DEBUG D#41 => &L
  # DEBUG this => D#39
  # DEBUG __x => D#40
  # DEBUG __y => D#41
  if (_85 < L_140(D))
    goto <bb 8>;
  else
    goto <bb 7>;

  <bb 7>:
  # DEBUG __y => iter$_M_node_207
  iter$_M_node_87 = MEM[(struct _Rb_tree_node_base * *)iter$_M_node_207 + 16B];
  # DEBUG D#30 => iter$_M_node_207
  # DEBUG __x => D#30
  # DEBUG __x => NULL
  goto <bb 3>;

  <bb 8>:
  iter$_M_node_88 = MEM[(struct _Rb_tree_node_base * *)iter$_M_node_207 + 24B];
  # DEBUG D#29 => iter$_M_node_207
  # DEBUG __x => D#29
  # DEBUG __x => NULL
  goto <bb 3>;

  <bb 9>:
  # iter$_M_node_279 = PHI <iter$_M_node_93(3)>

  <bb 33>:
  # DEBUG this => NULL
  # DEBUG __x => iter$_M_node_279
  # DEBUG __j$_M_node => iter$_M_node_279
  # DEBUG this => D#288
  # DEBUG this => NULL
  # DEBUG __x => iter$_M_node_26
  # DEBUG this => &__j
  # DEBUG __x => NULL
  if (iter$_M_node_26 == iter$_M_node_279)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:

  <bb 37>:
  pretmp_290 = this_24(D)->R;
  pretmp_292 = this_24(D)->Co_delay;
  pretmp_294 = this_24(D)->Ci_delay;
  pretmp_296 = pretmp_292 + pretmp_294;
  pretmp_297 = pretmp_290 * pretmp_296;
  pretmp_298 = this_24(D)->Cw;
  pretmp_300 = this_24(D)->Rw;
  pretmp_302 = pretmp_300 * 5.0e-1;
  pretmp_303 = pretmp_298 * pretmp_302;
  pretmp_304 = this_24(D)->tCLK;
  pretmp_306 = pretmp_304 * 8.000000000000000444089209850062616169452667236328125e-1;
  pretmp_308 = this_24(D)->Cg_pwr;
  pretmp_310 = pretmp_308 * 5.3333333333333332593184650249895639717578887939453125e-1;
  pretmp_311 = pretmp_310 * 2.0e+0;
  pretmp_312 = this_24(D)->Ci;
  pretmp_314 = this_24(D)->Co;
  pretmp_316 = pretmp_312 + pretmp_314;
  pretmp_317 = this_24(D)->Vdd;
  pretmp_319 = this_24(D)->fCLK;
  pretmp_379 = pretmp_316 * 1.600000000000000088817841970012523233890533447265625e+0;
  pretmp_380 = pretmp_314 * 5.3333333333333332593184650249895639717578887939453125e-1;
  pretmp_381 = pretmp_380 * 2.0e+0;
  pretmp_382 = pretmp_379 + pretmp_381;
  pretmp_383 = pretmp_311 + pretmp_379;
  pretmp_384 = pretmp_382 * 1.000000000000000055511151231257827021181583404541015625e-1;
  pretmp_385 = pretmp_383 * 2.00000000000000011102230246251565404236316680908203125e-1;
  pretmp_386 = pretmp_384 + pretmp_385;
  pretmp_387 = pretmp_317 * pretmp_317;
  goto <bb 13>;

  <bb 11>:
  # DEBUG __x => iter$_M_node_279
  # DEBUG __x => iter$_M_node_279
  # DEBUG this => iter$_M_node_279
  # DEBUG D#284 => &MEM[(const struct _Rb_tree_node *)iter$_M_node_279]._M_value_field
  # DEBUG __r => D#284
  # DEBUG __x => D#284
  # DEBUG this => D#43
  # DEBUG D#285 => &MEM[(const struct pair &)iter$_M_node_279 + 32].first
  # DEBUG D#287 => &MEM[(struct _Rb_tree *)D#288]._M_impl._M_key_compare
  # DEBUG D#39 => D#287
  # DEBUG D#40 => &L
  _90 = MEM[(const double &)iter$_M_node_279 + 32];
  # DEBUG D#41 => D#285
  # DEBUG this => D#39
  # DEBUG __x => D#40
  # DEBUG __y => D#41
  if (_90 > L_140(D))
    goto <bb 10>;
  else
    goto <bb 29>;

  <bb 12>:

  <bb 13>:
  # bestMetric_56 = PHI <1.0e+8(37), bestMetric_289(12)>
  # bestK_41 = PHI <-1.0e+0(37), bestK_287(12)>
  # bestM_46 = PHI <-1.0e+0(37), bestM_284(12)>
  # bestN_171 = PHI <-1.0e+0(37), bestN_281(12)>
  # bestK_200 = PHI <1.0e+0(37), bestK_67(12)>
  # ivtmp_278 = PHI <91(37), ivtmp_277(12)>

  <bb 36>:
  # DEBUG K => bestK_200
  # DEBUG bestN => -1.0e+0
  # DEBUG bestM => -1.0e+0
  # DEBUG bestK => -1.0e+0
  # DEBUG bestMetric => 1.0e+8
  # DEBUG N => 1.0e+0
  # DEBUG bestN => bestN_171
  # DEBUG bestM => bestM_46
  # DEBUG bestK => bestK_41
  # DEBUG bestMetric => bestMetric_56
  # DEBUG K => bestK_200
  # DEBUG N => 1.0e+0
  # DEBUG bestN => bestN_171
  # DEBUG bestM => bestM_46
  # DEBUG bestK => bestK_41
  # DEBUG bestMetric => bestMetric_56
  pretmp_323 = pretmp_290 / bestK_200;
  pretmp_324 = pretmp_298 * pretmp_323;
  pretmp_325 = bestK_200 * pretmp_300;
  pretmp_326 = pretmp_294 * pretmp_325;
  pretmp_327 = pretmp_324 + pretmp_326;
  pretmp_344 = bestK_200 * pretmp_316;

  <bb 14>:
  # bestMetric_175 = PHI <bestMetric_56(36), bestMetric_373(20)>
  # bestK_86 = PHI <bestK_41(36), bestK_288(20)>
  # bestM_82 = PHI <bestM_46(36), bestM_285(20)>
  # bestN_150 = PHI <bestN_171(36), bestN_282(20)>
  # bestN_201 = PHI <1.0e+0(36), bestN_66(20)>
  # ivtmp_375 = PHI <39(36), ivtmp_374(20)>

  <bb 35>:
  # DEBUG N => bestN_201
  # DEBUG bestN => bestN_171
  # DEBUG bestM => bestM_46
  # DEBUG bestK => bestK_41
  # DEBUG bestMetric => bestMetric_56
  # DEBUG M => 1.0e+0
  # DEBUG bestN => bestN_150
  # DEBUG bestM => bestM_82
  # DEBUG bestK => bestK_86
  # DEBUG bestMetric => bestMetric_175
  # DEBUG N => bestN_201
  # DEBUG M => 1.0e+0
  # DEBUG bestN => bestN_150
  # DEBUG bestM => bestM_82
  # DEBUG bestK => bestK_86
  # DEBUG bestMetric => bestMetric_175

  <bb 15>:
  # bestMetric_180 = PHI <bestMetric_175(35), bestMetric_4(18)>
  # bestK_190 = PHI <bestK_86(35), bestK_8(18)>
  # bestM_194 = PHI <bestM_82(35), bestM_12(18)>
  # bestN_198 = PHI <bestN_150(35), bestN_16(18)>
  # bestM_202 = PHI <1.0e+0(35), bestM_65(18)>
  # ivtmp_155 = PHI <39(35), ivtmp_76(18)>
  # DEBUG M => bestM_202
  # DEBUG bestN => bestN_198
  # DEBUG bestM => bestM_194
  # DEBUG bestK => bestK_190
  # DEBUG bestMetric => bestMetric_180
  _29 = bestN_201 * bestM_202;
  l_30 = L_140(D) / _29;
  # DEBUG l => l_30
  # DEBUG D#740 => this_24(D)->R
  # DEBUG D#739 => this_24(D)->Co_delay
  # DEBUG D#738 => this_24(D)->Ci_delay
  # DEBUG D#737 => D#739 + D#738
  # DEBUG k0 => D#740 * D#737
  # DEBUG D#736 => D#740 / bestK_200
  # DEBUG D#735 => this_24(D)->Cw
  # DEBUG D#734 => D#736 * D#735
  # DEBUG D#733 => this_24(D)->Rw
  # DEBUG D#732 => D#733 * bestK_200
  # DEBUG D#731 => D#738 * D#732
  # DEBUG k1 => D#734 + D#731
  # DEBUG D#730 => D#733 * 5.0e-1
  # DEBUG k2 => D#735 * D#730
  _48 = l_30 * pretmp_327;
  _49 = _48 + pretmp_297;
  _50 = l_30 * l_30;
  _51 = _50 * pretmp_303;
  Tw_52 = _49 + _51;
  # DEBUG Tw => Tw_52
  # DEBUG alpha => 2.00000000000000011102230246251565404236316680908203125e-1
  # DEBUG this => this_24(D)
  # DEBUG L => L_140(D)
  # DEBUG K => bestK_200
  # DEBUG M => bestM_202
  # DEBUG N => bestN_201
  # DEBUG segments => _29
  # DEBUG D#729 => this_24(D)->Ci
  # DEBUG D#728 => this_24(D)->Co
  # DEBUG D#727 => D#729 + D#728
  _115 = l_30 * pretmp_298;
  Ca_116 = _115 + pretmp_344;
  # DEBUG Ca => Ca_116
  _117 = Ca_116 * 5.0e-1;
  _119 = _117 * pretmp_317;
  _120 = _119 * pretmp_317;
  Pa_122 = _120 * pretmp_319;
  # DEBUG Pa => Pa_122
  _123 = Pa_122 * bestM_202;
  _124 = _123 * bestN_201;
  _55 = _124 * 1.2800000000000000710542735760100185871124267578125e+1;
  # DEBUG this => this_24(D)
  # DEBUG M => bestM_202
  # DEBUG W => 6.4e+1
  # DEBUG alpha => 2.00000000000000011102230246251565404236316680908203125e-1
  # DEBUG D#726 => D#727 * 1.600000000000000088817841970012523233890533447265625e+0
  # DEBUG D#725 => D#728 * 5.3333333333333332593184650249895639717578887939453125e-1
  # DEBUG D#724 => D#725 * 2.0e+0
  # DEBUG D#723 => D#726 + D#724
  # DEBUG Cdin => D#723
  # DEBUG D#722 => this_24(D)->Cg_pwr
  # DEBUG D#721 => D#722 * 5.3333333333333332593184650249895639717578887939453125e-1
  # DEBUG D#720 => D#721 * 2.0e+0
  # DEBUG D#719 => D#726 + D#720
  # DEBUG Cclk => D#719
  # DEBUG D#718 => D#723 * 1.000000000000000055511151231257827021181583404541015625e-1
  # DEBUG D#717 => D#719 * 2.00000000000000011102230246251565404236316680908203125e-1
  # DEBUG Cint => D#718 + D#717
  _105 = bestM_202 * pretmp_386;
  _106 = _105 * 6.4e+1;
  _108 = _106 * pretmp_387;
  _109 = _108 * pretmp_319;
  power_57 = _55 + _109;
  # DEBUG power => power_57
  _58 = bestM_202 * bestM_202;
  _59 = _58 * bestM_202;
  _60 = _59 * bestM_202;
  bestMetric_61 = power_57 * _60;
  # DEBUG metric => bestMetric_61
  _62 = Tw_52 * bestN_201;
  _170 = bestMetric_61 < bestMetric_180;
  _91 = _62 < pretmp_306;
  _44 = _91 & _170;
  if (_44 != 0)
    goto <bb 16>;
  else
    goto <bb 17>;

  <bb 16>:

  <bb 17>:
  # bestMetric_4 = PHI <bestMetric_180(15), bestMetric_61(16)>
  # bestK_8 = PHI <bestK_190(15), bestK_200(16)>
  # bestM_12 = PHI <bestM_194(15), bestM_202(16)>
  # bestN_16 = PHI <bestN_198(15), bestN_201(16)>
  # DEBUG bestN => bestN_16
  # DEBUG bestM => bestM_12
  # DEBUG bestK => bestK_8
  # DEBUG bestMetric => bestMetric_4
  bestM_65 = bestM_202 + 1.0e+0;
  # DEBUG M => bestM_65
  # DEBUG M => bestM_65
  # DEBUG bestN => bestN_16
  # DEBUG bestM => bestM_12
  # DEBUG bestK => bestK_8
  # DEBUG bestMetric => bestMetric_4
  ivtmp_76 = ivtmp_155 - 1;
  if (ivtmp_76 != 0)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  goto <bb 15>;

  <bb 19>:
  # bestMetric_373 = PHI <bestMetric_4(17)>
  # bestK_288 = PHI <bestK_8(17)>
  # bestM_285 = PHI <bestM_12(17)>
  # bestN_282 = PHI <bestN_16(17)>

  <bb 32>:
  bestN_66 = bestN_201 + 1.0e+0;
  # DEBUG N => bestN_66
  # DEBUG N => bestN_66
  # DEBUG bestN => bestN_282
  # DEBUG bestM => bestM_285
  # DEBUG bestK => bestK_288
  # DEBUG bestMetric => bestMetric_373
  ivtmp_374 = ivtmp_375 - 1;
  if (ivtmp_374 != 0)
    goto <bb 20>;
  else
    goto <bb 21>;

  <bb 20>:
  goto <bb 14>;

  <bb 21>:
  # bestMetric_289 = PHI <bestMetric_373(32)>
  # bestK_287 = PHI <bestK_288(32)>
  # bestM_284 = PHI <bestM_285(32)>
  # bestN_281 = PHI <bestN_282(32)>

  <bb 31>:
  bestK_67 = bestK_200 + 1.000000000000000055511151231257827021181583404541015625e-1;
  # DEBUG K => bestK_67
  # DEBUG K => bestK_67
  # DEBUG bestN => bestN_281
  # DEBUG bestM => bestM_284
  # DEBUG bestK => bestK_287
  # DEBUG bestMetric => bestMetric_289
  ivtmp_277 = ivtmp_278 - 1;
  if (ivtmp_277 != 0)
    goto <bb 12>;
  else
    goto <bb 22>;

  <bb 22>:
  # bestK_286 = PHI <bestK_287(31)>
  # bestM_283 = PHI <bestM_284(31)>
  # bestN_280 = PHI <bestN_281(31)>

  <bb 30>:
  # DEBUG __out => &cout
  # DEBUG __s => "L = "
  # DEBUG __s => "L = "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "L = ", 4);
  # DEBUG this => &cout
  # DEBUG __f => L_140(D)
  _68 = std::basic_ostream<char>::_M_insert<double> (&cout, L_140(D));
  # DEBUG __out => _68
  # DEBUG __s => " K = "
  # DEBUG __s => " K = "
  std::__ostream_insert<char, std::char_traits<char> > (_68, " K = ", 5);
  # DEBUG this => _68
  # DEBUG __f => bestK_286
  _69 = std::basic_ostream<char>::_M_insert<double> (_68, bestK_286);
  # DEBUG __out => _69
  # DEBUG __s => " M = "
  # DEBUG __s => " M = "
  std::__ostream_insert<char, std::char_traits<char> > (_69, " M = ", 5);
  # DEBUG this => _69
  # DEBUG __f => bestM_283
  _70 = std::basic_ostream<char>::_M_insert<double> (_69, bestM_283);
  # DEBUG __out => _70
  # DEBUG __s => " N = "
  # DEBUG __s => " N = "
  std::__ostream_insert<char, std::char_traits<char> > (_70, " N = ", 5);
  # DEBUG this => _70
  # DEBUG __f => bestN_280
  _71 = std::basic_ostream<char>::_M_insert<double> (_70, bestN_280);
  # DEBUG this => _71
  # DEBUG __pf => endl
  # DEBUG __os => _71
  _141 = MEM[(struct basic_ostream *)_71]._vptr.basic_ostream;
  _142 = MEM[(long int *)_141 + -24B];
  _143 = (sizetype) _142;
  _144 = _71 + _143;
  # DEBUG this => _144
  # DEBUG __c => 10
  _136 = MEM[(const struct basic_ios *)_144]._M_ctype;
  # DEBUG __f => _136
  if (_136 == 0B)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 23>:
  std::__throw_bad_cast ();

  <bb 24>:
  # DEBUG this => _136
  # DEBUG __c => 10
  _149 = MEM[(const struct ctype *)_136]._M_widen_ok;
  if (_149 != 0)
    goto <bb 25>;
  else
    goto <bb 26>;

  <bb 25>:
  _152 = MEM[(const struct ctype *)_136]._M_widen[10];
  pretmp_376 = (int) _152;
  goto <bb 28>;

  <bb 26>:
  # DEBUG this => _136
  # DEBUG __c => 10
  std::ctype<char>::_M_widen_init (_136);
  _157 = MEM[(const struct ctype *)_136].D.22387._vptr.facet;
  _158 = MEM[(int (*__vtbl_ptr_type) () *)_157 + 48B];
  PROF_162 = [obj_type_ref] OBJ_TYPE_REF(_158;(const struct ctype)_136->6);
  if (PROF_162 == do_widen)
    goto <bb 28>;
  else
    goto <bb 27>;

  <bb 27>:
  _164 = OBJ_TYPE_REF(_158;(const struct ctype)_136->6) (_136, 10);
  pretmp_377 = (int) _164;

  <bb 28>:
  # prephitmp_378 = PHI <pretmp_376(25), 10(26), pretmp_377(27)>
  _147 = std::basic_ostream<char>::put (_71, prephitmp_378);
  # DEBUG __os => _147
  std::basic_ostream<char>::flush (_147);
  # DEBUG temp$L => L_140(D)
  # DEBUG temp$K => bestK_286
  # DEBUG temp$M => bestM_283
  # DEBUG temp$N => bestN_280
  # DEBUG __x => L_140(D)
  # DEBUG __y$L => L_140(D)
  # DEBUG __y$K => bestK_286
  # DEBUG __y$M => bestM_283
  # DEBUG __y$N => bestN_280
  # DEBUG this => &D.56446
  # DEBUG __a => &__x
  # DEBUG __b => &__y
  # DEBUG this => &D.56465
  # DEBUG __p => &D.56446
  D.56465.first = L_140(D);
  MEM[(struct pair *)&D.56465 + 8B] = L_140(D);
  MEM[(struct pair *)&D.56465 + 16B] = bestK_286;
  MEM[(struct pair *)&D.56465 + 24B] = bestM_283;
  MEM[(struct pair *)&D.56465 + 32B] = bestN_280;
  # DEBUG D#434 => &this_24(D)->wire_map
  # DEBUG this => D#434
  # DEBUG __x => &D.56465
  _72 = &MEM[(struct map *)this_24(D) + 176B]._M_t;
  D.68040 = std::_Rb_tree<double, std::pair<const double, wire>, std::_Select1st<std::pair<const double, wire> >, std::less<double>, std::allocator<std::pair<const double, wire> > >::_M_insert_unique (_72, &D.56465);
  iter$_M_node_139 = MEM[(struct pair *)&D.68040];
  # DEBUG iter$_M_node => iter$_M_node_139
  D.56465 ={v} {CLOBBER};
  # DEBUG D#436 => {CLOBBER}
  # DEBUG temp$L => D#436
  # DEBUG D#437 => {CLOBBER}
  # DEBUG temp$K => D#437
  # DEBUG D#438 => {CLOBBER}
  # DEBUG temp$M => D#438
  # DEBUG D#439 => {CLOBBER}
  # DEBUG temp$N => D#439

  <bb 29>:
  # iter$_M_node_79 = PHI <iter$_M_node_279(11), iter$_M_node_139(28)>

  <bb 34>:
  # DEBUG iter$_M_node => iter$_M_node_79
  # DEBUG this => &iter
  # DEBUG this => iter$_M_node_79
  # DEBUG D#435 => &MEM[(struct _Rb_tree_node *)iter$_M_node_79]._M_value_field
  # DEBUG __r => D#435
  _81 = &MEM[(struct pair *)iter$_M_node_79 + 32B].second;
  # DEBUG D#445 => {CLOBBER}
  # DEBUG iter$_M_node => D#445
  return _81;

}



;; Function void Power_Module::calcChannel(const FlitChannel*) (_ZN12Power_Module11calcChannelEPK11FlitChannel, funcdef_no=1994, decl_uid=45155, cgraph_uid=493, symbol_order=494)

Trying loop 5 as candidate
loop 5 is innermost
loop is not parallel according to graphite
Trying loop 4 as candidate
loop 4 is innermost
Analyzing # of iterations of loop 4
  exit condition [0, + , 1](no_overflow) < (signed long) prephitmp_336 + -1
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if prephitmp_336 <= 0
    # of iterations (unsigned long) ((signed long) prephitmp_336 + -1), bounded by 9223372036854775806
/usr/include/c++/5/bits/stl_tree.h:200:16: note: === vect_analyze_loop_form ===
split exit edge.
/usr/include/c++/5/bits/stl_tree.h:200:16: note: === get_loop_niters ===
Analyzing # of iterations of loop 4
  exit condition [0, + , 1](no_overflow) < (signed long) prephitmp_336 + -1
  bounds on difference of bases: -9223372036854775808 ... 9223372036854775806
Applying pattern match.pd:49, generic-match.c:4253
  result:
    zero if prephitmp_336 <= 0
    # of iterations (unsigned long) ((signed long) prephitmp_336 + -1), bounded by 9223372036854775806
Applying pattern match.pd:715, generic-match.c:1389
Applying pattern match.pd:49, generic-match.c:3223
/usr/include/c++/5/bits/stl_tree.h:200:16: note: Symbolic number of iterations is (unsigned long) prephitmp_336
parallelizing inner loop 20

loop at power/power_module.cpp:131: 
Updating SSA:
Registering new PHI nodes in block #41
Registering new PHI nodes in block #42
Registering new PHI nodes in block #20
Updating SSA information for statement _381 = (sizetype) graphite_IV.829_232;
Updating SSA information for statement _380 = _381 * 4;
Updating SSA information for statement _379 = iftmp.11_187 + _380;
Updating SSA information for statement _389 = MEM[(const int &)_379];
Updating SSA information for statement _378 = (double) _389;
Updating SSA information for statement _377 = _378 / pretmp_383;
Updating SSA information for statement _372 = (sizetype) graphite_IV.829_232;
Updating SSA information for statement _370 = _372 * 8;
Updating SSA information for statement _369 = __first_222 + _370;
Updating SSA information for statement *_369 = _377;
Updating SSA information for statement graphite_IV.829_230 = graphite_IV.829_232 + 1;
Updating SSA information for statement if (graphite_IV.829_232 < _57)
Registering new PHI nodes in block #21
Registering new PHI nodes in block #43
Registering new PHI nodes in block #39
Updating SSA information for statement _292 = (sizetype) graphite_IV.829_232;
Updating SSA information for statement _293 = _381 * 4;
Updating SSA information for statement _282 = iftmp.11_187 + _380;
Updating SSA information for statement _231 = MEM[(const int &)_379];
Updating SSA information for statement _355 = (double) _389;
Updating SSA information for statement _50 = _378 / pretmp_383;
Updating SSA information for statement _126 = (sizetype) graphite_IV.829_232;
Updating SSA information for statement _302 = _372 * 8;
Updating SSA information for statement _301 = __first_222 + _370;
Updating SSA information for statement *_369 = _377;
Updating SSA information for statement graphite_IV.829_53 = graphite_IV.829_232 + 1;
Updating SSA information for statement if (graphite_IV.829_232 < _57)
Registering new PHI nodes in block #40
Registering new PHI nodes in block #38

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_50 -> { _377 }
.MEM_52 -> { .MEM_374 }
graphite_IV.829_53 -> { graphite_IV.829_230 }
graphite_IV.829_118 -> { graphite_IV.829_232 }
.MEM_119 -> { .MEM_367 }
_126 -> { _372 }
_231 -> { _389 }
_282 -> { _379 }
_292 -> { _381 }
_293 -> { _380 }
_301 -> { _369 }
_302 -> { _370 }
_355 -> { _378 }
Incremental SSA update started at block: 41
Number of blocks in CFG: 44
Number of blocks to update: 7 ( 16%)
Affected blocks: 20 21 38 39 40 42 43


Applying pattern match.pd:114, generic-match.c:6953
Applying pattern match.pd:49, generic-match.c:3223

Updating SSA:
Registering new PHI nodes in block #41
Registering new PHI nodes in block #42
Registering new PHI nodes in block #20
Registering new PHI nodes in block #44
Updating SSA information for statement graphite_IV.829_232 = ivtmp_54;
Updating SSA information for statement _381 = (sizetype) graphite_IV.829_232;
Updating SSA information for statement _380 = _381 * 4;
Updating SSA information for statement _379 = iftmp.11_187 + _380;
Updating SSA information for statement _389 = MEM[(const int &)_379];
Updating SSA information for statement _378 = (double) _389;
Updating SSA information for statement _377 = _378 / pretmp_383;
Updating SSA information for statement _372 = (sizetype) graphite_IV.829_232;
Updating SSA information for statement _370 = _372 * 8;
Updating SSA information for statement _369 = __first_222 + _370;
Updating SSA information for statement *_369 = _377;
Updating SSA information for statement graphite_IV.829_230 = graphite_IV.829_232 + 1;
Registering new PHI nodes in block #21
Updating SSA information for statement ivtmp_56 = ivtmp_54 + 1;
Registering new PHI nodes in block #45
Updating SSA information for statement graphite_IV.829_124 = ivtmp_54;
Updating SSA information for statement _346 = (sizetype) graphite_IV.829_232;
Updating SSA information for statement _64 = _381 * 4;
Updating SSA information for statement _371 = iftmp.11_187 + _380;
Updating SSA information for statement _312 = MEM[(const int &)_379];
Updating SSA information for statement _314 = (double) _389;
Updating SSA information for statement _373 = _378 / pretmp_383;
Updating SSA information for statement _309 = (sizetype) graphite_IV.829_232;
Updating SSA information for statement _185 = _372 * 8;
Updating SSA information for statement _228 = __first_222 + _370;
Updating SSA information for statement *_369 = _377;
Updating SSA information for statement graphite_IV.829_90 = graphite_IV.829_232 + 1;
Registering new PHI nodes in block #43
Registering new PHI nodes in block #39
Registering new PHI nodes in block #40
Registering new PHI nodes in block #38

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

.MEM_33 -> { .MEM_374 }
_64 -> { _380 }
graphite_IV.829_90 -> { graphite_IV.829_230 }
.MEM_116 -> { .MEM_367 }
ivtmp_117 -> { ivtmp_54 }
graphite_IV.829_124 -> { graphite_IV.829_232 }
_185 -> { _370 }
_228 -> { _369 }
_309 -> { _372 }
_312 -> { _389 }
_314 -> { _378 }
_346 -> { _381 }
_371 -> { _379 }
_373 -> { _377 }
Incremental SSA update started at block: 41
Number of blocks in CFG: 46
Number of blocks to update: 5 ( 11%)
Affected blocks: 20 21 38 44 45



Updating SSA:
Registering new PHI nodes in block #0
Registering new PHI nodes in block #2
Updating SSA information for statement _77 = MEM[(int *)f_5(D) + 96B];
Updating SSA information for statement _11 = this_10(D)->wire_length;
Updating SSA information for statement _14 = Power_Module::wireOptimize (this_10(D), channelLength_12);
Updating SSA information for statement this_wire$8_6 = MEM[(const struct wire &)_14 + 8];
Updating SSA information for statement this_wire$16_15 = MEM[(const struct wire &)_14 + 16];
Updating SSA information for statement this_wire$24_16 = MEM[(const struct wire &)_14 + 24];
Updating SSA information for statement _58 = this_10(D)->W_DFQD1;
Updating SSA information for statement _44 = this_10(D)->H_DFQD1;
Updating SSA information for statement _34 = this_10(D)->W_INVD2;
Updating SSA information for statement _8 = this_10(D)->H_INVD2;
Updating SSA information for statement _82 = this_10(D)->channel_width;
Updating SSA information for statement _85 = this_10(D)->MetalPitch;
Updating SSA information for statement _19 = this_10(D)->channelArea;
Updating SSA information for statement this_10(D)->channelArea = _20;
Updating SSA information for statement _28 = MEM[(int * *)f_5(D) + 232B];
Updating SSA information for statement _168 = MEM[(int * *)f_5(D) + 240B];
Registering new PHI nodes in block #3
Registering new PHI nodes in block #5
Updating SSA information for statement _186 = operator new (_23);
Updating SSA information for statement pretmp_322 = MEM[(int * *)f_5(D) + 240B];
Updating SSA information for statement pretmp_324 = MEM[(int * *)f_5(D) + 232B];
Registering new PHI nodes in block #4
Updating SSA information for statement std::__throw_bad_alloc ();
Registering new PHI nodes in block #6
Registering new PHI nodes in block #7
Updating SSA information for statement __builtin_memmove (iftmp.11_187, prephitmp_325, _183);
Registering new PHI nodes in block #8
Updating SSA information for statement _26 = this_10(D)->classes;
Registering new PHI nodes in block #9
Registering new PHI nodes in block #11
Updating SSA information for statement _189 = operator new (_188);
Registering new PHI nodes in block #13
Registering new PHI nodes in block #17
Updating SSA information for statement __builtin_memset (_189, 0, _388);
Updating SSA information for statement pretmp_334 = this_10(D)->classes;
Registering new PHI nodes in block #14
Updating SSA information for statement pretmp_335 = this_10(D)->classes;
Registering new PHI nodes in block #12
Registering new PHI nodes in block #10
Updating SSA information for statement std::__throw_bad_alloc ();
Registering new PHI nodes in block #34
Registering new PHI nodes in block #35
Registering new PHI nodes in block #36
Updating SSA information for statement operator delete (iftmp.11_187);
Registering new PHI nodes in block #37
Registering new PHI nodes in block #15
Registering new PHI nodes in block #18
Updating SSA information for statement pretmp_383 = this_10(D)->totalTime;
Registering new PHI nodes in block #19
Registering new PHI nodes in block #41
Registering new PHI nodes in block #42
Updating SSA information for statement .paral_data_store.848.__first = __first_222;
Updating SSA information for statement .paral_data_store.848.iftmp.11 = iftmp.11_187;
Updating SSA information for statement .paral_data_store.848.pretmp = pretmp_383;
Updating SSA information for statement .paral_data_store.848.D.73004 = _125;
Registering new PHI nodes in block #46
Updating SSA information for statement __first.846_36 = .paral_data_load.849_37->__first;
Updating SSA information for statement iftmp.11_88 = .paral_data_load.849_37->iftmp.11;
Updating SSA information for statement pretmp_89 = .paral_data_load.849_37->pretmp;
Updating SSA information for statement _91 = .paral_data_load.849_37->D.73004;
Registering new PHI nodes in block #48
Registering new PHI nodes in block #20
Registering new PHI nodes in block #44
Updating SSA information for statement _389 = MEM[(const int &)_379];
Updating SSA information for statement *_369 = _377;
Registering new PHI nodes in block #21
Registering new PHI nodes in block #49
Registering new PHI nodes in block #47
Registering new PHI nodes in block #45
Updating SSA information for statement _312 = MEM[(const int &)_371];
Updating SSA information for statement *_228 = _373;
Registering new PHI nodes in block #43
Registering new PHI nodes in block #39
Updating SSA information for statement _231 = MEM[(const int &)_282];
Updating SSA information for statement *_301 = _50;
Registering new PHI nodes in block #40
Registering new PHI nodes in block #38
Registering new PHI nodes in block #22
Registering new PHI nodes in block #16
Updating SSA information for statement _92 = this_10(D)->Ci;
Updating SSA information for statement _93 = this_10(D)->Co;
Updating SSA information for statement _96 = this_10(D)->Cw;
Updating SSA information for statement _101 = this_10(D)->Vdd;
Updating SSA information for statement _104 = this_10(D)->fCLK;
Updating SSA information for statement _43 = this_10(D)->channel_width;
Updating SSA information for statement _191 = this_10(D)->H_DFQD1;
Updating SSA information for statement _192 = this_10(D)->MetalPitch;
Updating SSA information for statement _194 = this_10(D)->ChannelPitch;
Updating SSA information for statement _197 = this_10(D)->Co_delay;
Updating SSA information for statement _198 = this_10(D)->Ci_delay;
Updating SSA information for statement _46 = this_10(D)->channelClkPower;
Updating SSA information for statement this_10(D)->channelClkPower = _47;
Registering new PHI nodes in block #24
Updating SSA information for statement pretmp_352 = this_10(D)->channelWirePower;
Updating SSA information for statement pretmp_354 = this_10(D)->channelDFFPower;
Updating SSA information for statement pretmp_361 = this_10(D)->Cg_pwr;
Updating SSA information for statement phi_out_of_ssa.830[0] = pretmp_352;
Updating SSA information for statement phi_out_of_ssa.831[0] = pretmp_354;
Registering new PHI nodes in block #25
Updating SSA information for statement phi_out_of_ssa.831_I_lsm.837_166 = phi_out_of_ssa.831[0];
Updating SSA information for statement phi_out_of_ssa.830_I_lsm.839_184 = phi_out_of_ssa.830[0];
Registering new PHI nodes in block #26
Updating SSA information for statement _300 = *_297;
Registering new PHI nodes in block #27
Registering new PHI nodes in block #28
Updating SSA information for statement Close_Phi.833[0] = Close_Phi.833_I_lsm.841_123;
Updating SSA information for statement Close_Phi.832[0] = Close_Phi.832_I_lsm.843_310;
Registering new PHI nodes in block #29
Updating SSA information for statement this__channelWirePower_lsm.825_278 = Close_Phi.833[0];
Updating SSA information for statement Cross_BB_scalar_dependence.834[0] = this__channelWirePower_lsm.825_278;
Updating SSA information for statement this__channelDFFPower_lsm.827_276 = Close_Phi.832[0];
Updating SSA information for statement Cross_BB_scalar_dependence.835[0] = this__channelDFFPower_lsm.827_276;
Updating SSA information for statement this__channelDFFPower_lsm.827_311 = Cross_BB_scalar_dependence.835[0];
Updating SSA information for statement this__channelWirePower_lsm.825_313 = Cross_BB_scalar_dependence.834[0];
Updating SSA information for statement this_10(D)->channelWirePower = this__channelWirePower_lsm.825_313;
Updating SSA information for statement this_10(D)->channelDFFPower = this__channelDFFPower_lsm.827_311;
Registering new PHI nodes in block #23
Updating SSA information for statement _128 = this_10(D)->IoffN;
Updating SSA information for statement _129 = this_10(D)->IoffP;
Updating SSA information for statement _66 = this_10(D)->channelLeakPower;
Updating SSA information for statement this_10(D)->channelLeakPower = _67;
Registering new PHI nodes in block #30
Updating SSA information for statement operator delete (__first_222);
Registering new PHI nodes in block #31
Updating SSA information for statement MEM[(struct  &)&a] ={v} {CLOBBER};
Registering new PHI nodes in block #32
Updating SSA information for statement operator delete (iftmp.11_187);
Registering new PHI nodes in block #33
Updating SSA information for statement temp ={v} {CLOBBER};
Updating SSA information for statement a ={v} {CLOBBER};
Updating SSA information for statement return;

Symbols to be put in SSA form
{ D.62851 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 50
Number of blocks to update: 49 ( 98%)
Affected blocks: 0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49


void Power_Module::calcChannel(const FlitChannel*) (struct Power_Module * const this, const struct FlitChannel * f)
{
  struct  * .paral_data_load.849;
  struct  .paral_data_store.848;
  double * __first.846;
  signed long graphite_IV.845;
  bool Close_Phi.832_I_lsm.844;
  double Close_Phi.832_I_lsm.843;
  bool Close_Phi.833_I_lsm.842;
  double Close_Phi.833_I_lsm.841;
  bool phi_out_of_ssa.830_I_lsm.840;
  double phi_out_of_ssa.830_I_lsm.839;
  bool phi_out_of_ssa.831_I_lsm.838;
  double phi_out_of_ssa.831_I_lsm.837;
  signed long graphite_IV.836;
  double Cross_BB_scalar_dependence.835[1];
  double D.72987;
  double Cross_BB_scalar_dependence.834[1];
  double D.72985;
  double D.72984;
  double D.72983;
  double D.72982;
  double D.72981;
  double D.72980;
  double D.72979;
  double D.72978;
  double D.72977;
  double D.72976;
  double D.72975;
  double D.72974;
  double D.72973;
  double D.72972;
  double D.72971;
  double D.72970;
  double Close_Phi.833[1];
  double Close_Phi.832[1];
  double phi_out_of_ssa.831[1];
  double phi_out_of_ssa.830[1];
  signed long graphite_IV.829;
  double D.72964;
  double D.72963;
  int D.72962;
  bool this__channelDFFPower_lsm.828;
  double this__channelDFFPower_lsm.827;
  bool this__channelWirePower_lsm.826;
  double this__channelWirePower_lsm.825;
  double Cclk;
  double clockLength;
  double columns;
  double D.72949;
  struct Router * * D.72942;
  int * D.72933;
  const ptrdiff_t _Num;
  double * __first;
  size_type __n;
  const double this_wire$24;
  const double this_wire$16;
  const double this_wire$8;
  double Pl;
  double Cdin;
  double Cclk;
  double Cint;
  double Ca;
  double Pa;
  double Adff;
  double Ainv;
  int i;
  int i;
  struct vector a;
  const struct vector temp;
  double channelLength;
  const value_type D.56200;
  double _8;
  double _9;
  double _11;
  const struct wire & _14;
  double _18;
  double _19;
  double _20;
  double _22;
  long unsigned int _23;
  double _24;
  int _26;
  int * const _28;
  double _34;
  double _35;
  signed long ivtmp_41;
  double _43;
  double _44;
  double _46;
  double _47;
  double _50;
  double _51;
  signed long ivtmp_54;
  signed long ivtmp_56;
  signed long _57;
  double _58;
  signed long _62;
  signed long _63;
  sizetype _64;
  double _65;
  double _66;
  double _67;
  double _69;
  const int _77;
  double _82;
  double _83;
  double _84;
  double _85;
  double _86;
  double _87;
  int * iftmp.11_88;
  double pretmp_89;
  unsigned long _91;
  double _92;
  double _93;
  double _94;
  double _95;
  double _96;
  double _97;
  double _98;
  double _100;
  double _101;
  double _102;
  double _103;
  double _104;
  double _106;
  double _107;
  signed long ivtmp_117;
  unsigned long _125;
  sizetype _126;
  double _128;
  double _129;
  double _130;
  double _131;
  double _132;
  double _134;
  double _135;
  bool _167;
  int * const _168;
  long int _169;
  long int _170;
  long int _171;
  long int _172;
  size_type _173;
  long unsigned int _183;
  sizetype _185;
  int * _186;
  int * iftmp.11_187;
  long unsigned int _188;
  struct Router * * _189;
  double _191;
  double _192;
  double _193;
  double _194;
  double _197;
  double _198;
  double _199;
  double _200;
  double _201;
  double _202;
  double _204;
  double _205;
  double _206;
  double _207;
  double _209;
  double _211;
  double _212;
  double _214;
  double * _228;
  int _231;
  int * _282;
  double _283;
  double _284;
  double _285;
  double _286;
  double _287;
  double _289;
  double _290;
  double _291;
  sizetype _292;
  sizetype _293;
  double _294;
  double _295;
  double _296;
  double * _297;
  sizetype _298;
  sizetype _299;
  double _300;
  double * _301;
  sizetype _302;
  signed long _305;
  signed long _306;
  bool _307;
  sizetype _309;
  int _312;
  double _314;
  int * const pretmp_322;
  int * const pretmp_324;
  int * const prephitmp_325;
  long int pretmp_326;
  long int pretmp_328;
  long int pretmp_330;
  long int prephitmp_331;
  const ptrdiff_t pretmp_332;
  const ptrdiff_t prephitmp_333;
  int pretmp_334;
  int pretmp_335;
  int prephitmp_336;
  sizetype _346;
  signed long ivtmp_347;
  double pretmp_352;
  signed long _353;
  double pretmp_354;
  double _355;
  double pretmp_357;
  double pretmp_358;
  double pretmp_359;
  double pretmp_360;
  double pretmp_361;
  double pretmp_363;
  double pretmp_364;
  double pretmp_365;
  double * _369;
  sizetype _370;
  int * _371;
  sizetype _372;
  double _373;
  double _377;
  double _378;
  int * _379;
  sizetype _380;
  sizetype _381;
  double pretmp_383;
  sizetype _388;
  int _389;
  sizetype _390;

  <bb 2>:
  # DEBUG D#446 => &f_5(D)->D.35459
  _77 = MEM[(int *)f_5(D) + 96B];
  # DEBUG D#17 => D#446
  # DEBUG this => D#17
  _9 = (double) _77;
  _11 = this_10(D)->wire_length;
  channelLength_12 = _9 * _11;
  # DEBUG channelLength => channelLength_12
  _14 = Power_Module::wireOptimize (this_10(D), channelLength_12);
  this_wire$8_6 = MEM[(const struct wire &)_14 + 8];
  # DEBUG this_wire$8 => this_wire$8_6
  this_wire$16_15 = MEM[(const struct wire &)_14 + 16];
  # DEBUG this_wire$16 => this_wire$16_15
  this_wire$24_16 = MEM[(const struct wire &)_14 + 24];
  # DEBUG this_wire$24 => this_wire$24_16
  # DEBUG K => &this_wire.K
  # DEBUG N => &this_wire.N
  # DEBUG M => &this_wire.M
  # DEBUG this => this_10(D)
  # DEBUG K => this_wire$8_6
  # DEBUG N => this_wire$24_16
  # DEBUG M => this_wire$16_15
  _58 = this_10(D)->W_DFQD1;
  _51 = this_wire$16_15 * _58;
  _44 = this_10(D)->H_DFQD1;
  Adff_42 = _44 * _51;
  # DEBUG Adff => Adff_42
  _35 = this_wire$16_15 * this_wire$24_16;
  _34 = this_10(D)->W_INVD2;
  _24 = this_wire$8_6 * 3.0e+0;
  _22 = _24 + _34;
  _18 = _22 * _35;
  _8 = this_10(D)->H_INVD2;
  Ainv_81 = _8 * _18;
  # DEBUG Ainv => Ainv_81
  _82 = this_10(D)->channel_width;
  _83 = Adff_42 + Ainv_81;
  _84 = _82 * _83;
  _85 = this_10(D)->MetalPitch;
  _86 = _84 * _85;
  _87 = _85 * _86;
  _19 = this_10(D)->channelArea;
  _20 = _19 + _87;
  this_10(D)->channelArea = _20;
  # DEBUG this => f_5(D)
  # DEBUG D#742 => &f_5(D)->_active
  # DEBUG this => &temp
  # DEBUG __x => D#742
  # DEBUG D#407 => &D#742->D.35433
  # DEBUG this => D#407
  # DEBUG __a => NULL
  _28 = MEM[(int * *)f_5(D) + 232B];
  # DEBUG D#27 => D#742
  _168 = MEM[(int * *)f_5(D) + 240B];
  # DEBUG D#27 => D#742
  # DEBUG this => D#27
  # DEBUG this => D#27
  _169 = (long int) _168;
  _170 = (long int) _28;
  _171 = _169 - _170;
  _172 = _171 /[ex] 4;
  _173 = (size_type) _172;
  # DEBUG D#409 => &temp.D.35433
  # DEBUG this => D#409
  # DEBUG __n => NULL
  # DEBUG __a => NULL
  # DEBUG D#353 => &D#409->_M_impl
  # DEBUG this => D#353
  # DEBUG __a => NULL
  # DEBUG this => D#353
  # DEBUG __a => NULL
  # DEBUG this => D#353
  # DEBUG D.64054 => NULL
  # DEBUG this => D#409
  # DEBUG __n => NULL
  # DEBUG D#351 => D#409
  # DEBUG __n => _173
  # DEBUG this => D#351
  # DEBUG D#350 => D#351
  if (_173 != 0)
    goto <bb 3>;
  else
    goto <bb 6>;

  <bb 3>:
  # DEBUG D#349 => &D#350->_M_impl
  # DEBUG D#348 => D#349
  # DEBUG __n => _173
  # DEBUG __a => D#348
  # DEBUG D#347 => D#348
  # DEBUG D#345 => D#347
  # DEBUG D#346 => 0B
  # DEBUG __n => _173
  # DEBUG this => D#345
  # DEBUG D.72931 => D#346
  # DEBUG D#344 => D#345
  # DEBUG D#343 => D#344
  # DEBUG this => D#343
  if (_173 > 4611686018427387903)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  std::__throw_bad_alloc ();

  <bb 5>:
  _23 = (long unsigned int) _171;
  _186 = operator new (_23);
  pretmp_322 = MEM[(int * *)f_5(D) + 240B];
  pretmp_324 = MEM[(int * *)f_5(D) + 232B];
  pretmp_326 = (long int) pretmp_322;
  pretmp_328 = (long int) pretmp_324;
  pretmp_330 = pretmp_326 - pretmp_328;
  pretmp_332 = pretmp_330 /[ex] 4;

  <bb 6>:
  # iftmp.11_187 = PHI <0B(2), _186(5)>
  # prephitmp_325 = PHI <_28(2), pretmp_324(5)>
  # prephitmp_331 = PHI <_171(2), pretmp_330(5)>
  # prephitmp_333 = PHI <_172(2), pretmp_332(5)>
  # DEBUG D#408 => &temp.D.35433
  # DEBUG this => D#408
  # DEBUG D#753 => MEM[(int * *)f_5(D) + 240B]
  # DEBUG D#37 => D#742
  # DEBUG this => D#37
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG D#752 => MEM[(int * *)f_5(D) + 232B]
  # DEBUG D#38 => D#742
  # DEBUG this => D#38
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG __first => D#752
  # DEBUG __last => D#753
  # DEBUG __result => NULL
  # DEBUG D.72895 => D#406
  # DEBUG __first => D#752
  # DEBUG __last => D#753
  # DEBUG __result => NULL
  # DEBUG __assignable => 1
  # DEBUG __first => D#752
  # DEBUG __last => D#753
  # DEBUG __result => NULL
  # DEBUG __first => D#752
  # DEBUG __last => D#753
  # DEBUG __result => NULL
  # DEBUG __it => D#753
  # DEBUG __it$_M_current => D#753
  # DEBUG __it => D#752
  # DEBUG __it$_M_current => D#752
  # DEBUG __first => D#752
  # DEBUG __last => D#753
  # DEBUG __result => NULL
  # DEBUG __it => NULL
  # DEBUG __it => NULL
  # DEBUG __it => D#753
  # DEBUG __it => D#753
  # DEBUG this => NULL
  # DEBUG __it => D#752
  # DEBUG __it => D#752
  # DEBUG this => NULL
  # DEBUG __first => D#752
  # DEBUG __last => D#753
  # DEBUG __result => NULL
  # DEBUG __simple => 1
  # DEBUG __first => D#752
  # DEBUG __last => D#753
  # DEBUG __result => NULL
  # DEBUG D#751 => (long int) D#753
  # DEBUG D#750 => (long int) D#752
  # DEBUG D#749 => D#751 - D#750
  # DEBUG _Num => D#749 /[ex] 4
  if (prephitmp_333 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  _183 = (long unsigned int) prephitmp_331;
  __builtin_memmove (iftmp.11_187, prephitmp_325, _183);

  <bb 8>:
  # DEBUG this => &D.56202
  # DEBUG this => &D.56202
  _26 = this_10(D)->classes;
  __n_27 = (size_type) _26;
  # DEBUG this => &a
  # DEBUG __n => __n_27
  # DEBUG __value => &D.56200
  # DEBUG __a => &D.56202
  # DEBUG D#405 => &a.D.56197
  # DEBUG this => D#405
  # DEBUG __n => __n_27
  # DEBUG __a => &D.56202
  # DEBUG D#364 => &D#405->_M_impl
  # DEBUG this => D#364
  # DEBUG __a => &D.56202
  # DEBUG this => D#364
  # DEBUG __a => &D.56202
  # DEBUG this => D#364
  # DEBUG D.64141 => &D.56202
  # DEBUG this => D#405
  # DEBUG __n => __n_27
  # DEBUG D#362 => D#405
  # DEBUG __n => __n_27
  # DEBUG this => D#388
  # DEBUG D#387 => D#388
  if (__n_27 != 0)
    goto <bb 9>;
  else
    goto <bb 15>;

  <bb 9>:
  # DEBUG D#386 => &D#387->_M_impl
  # DEBUG D#385 => D#386
  # DEBUG __n => __n_27
  # DEBUG __a => D#385
  # DEBUG D#384 => D#385
  # DEBUG D#382 => D#384
  # DEBUG D#383 => 0B
  # DEBUG __n => __n_27
  # DEBUG this => D#382
  # DEBUG D.72940 => D#383
  # DEBUG D#381 => D#382
  # DEBUG D#380 => D#381
  # DEBUG this => D#380
  if (__n_27 > 2305843009213693951)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  std::__throw_bad_alloc ();

  <bb 11>:
  _188 = __n_27 * 8;
  _189 = operator new (_188);
  goto <bb 13>;

<L11>:
  goto <bb 35> (<L8>);

  <bb 13>:
  # DEBUG D#403 => &a
  # DEBUG D#403 => &a
  # DEBUG D#404 => &D.56200
  # DEBUG __n => __n_27
  # DEBUG D#401 => D#403
  # DEBUG this => D#401
  # DEBUG this => D#403
  # DEBUG D#402 => D#404
  # DEBUG __value => D#402
  # DEBUG D#400 => &D#401->D.56197
  # DEBUG this => D#400
  # DEBUG D#398 => D#402
  # DEBUG __first => NULL
  # DEBUG __n => __n_27
  # DEBUG D#397 => D#398
  # DEBUG __x => D#397
  # DEBUG D.72865 => D#399
  # DEBUG D#396 => D#397
  # DEBUG __first => NULL
  # DEBUG __n => __n_27
  # DEBUG D#395 => D#396
  # DEBUG __x => D#395
  # DEBUG __assignable => 1
  # DEBUG D#394 => D#395
  # DEBUG __first => NULL
  # DEBUG __n => __n_27
  # DEBUG D#393 => D#394
  # DEBUG __x => D#393
  # DEBUG D#392 => D#393
  # DEBUG __first => NULL
  # DEBUG __n => __n_27
  # DEBUG D#391 => D#392
  # DEBUG __value => D#391
  # DEBUG __it => NULL
  # DEBUG __it => NULL
  # DEBUG D#365 => D#391
  # DEBUG __first => NULL
  # DEBUG __n => __n_27
  # DEBUG __value => D#365
  # DEBUG __tmp => 0.0
  # DEBUG __niter => __n_27
  # DEBUG __niter => __n_27
  # DEBUG __first => _189
  if (__n_27 == 0)
    goto <bb 14>;
  else
    goto <bb 17>;

  <bb 14>:
  pretmp_335 = this_10(D)->classes;

  <bb 15>:
  # __first_222 = PHI <_189(17), _189(14), 0B(8)>
  # prephitmp_336 = PHI <pretmp_334(17), pretmp_335(14), _26(8)>
  # DEBUG i => 0
  if (prephitmp_336 <= 0)
    goto <bb 16>;
  else
    goto <bb 18>;

  <bb 16>:
  # DEBUG this => this_10(D)
  # DEBUG L => channelLength_12
  # DEBUG K => this_wire$8_6
  # DEBUG M => this_wire$16_15
  # DEBUG N => this_wire$24_16
  # DEBUG segments => _35
  _92 = this_10(D)->Ci;
  _93 = this_10(D)->Co;
  _94 = _92 + _93;
  _95 = this_wire$8_6 * _94;
  _96 = this_10(D)->Cw;
  _97 = channelLength_12 / _35;
  _98 = _96 * _97;
  Ca_99 = _95 + _98;
  # DEBUG Ca => Ca_99
  _100 = Ca_99 * 5.0e-1;
  _101 = this_10(D)->Vdd;
  _102 = _100 * _101;
  _103 = _101 * _102;
  _104 = this_10(D)->fCLK;
  Pa_105 = _103 * _104;
  # DEBUG Pa => Pa_105
  _106 = this_wire$16_15 * Pa_105;
  _107 = this_wire$24_16 * _106;
  # DEBUG bitPower => NULL
  _43 = this_10(D)->channel_width;
  # DEBUG this => this_10(D)
  # DEBUG M => this_wire$16_15
  # DEBUG W => _43
  _191 = this_10(D)->H_DFQD1;
  _192 = this_10(D)->MetalPitch;
  _193 = _191 * _192;
  _194 = this_10(D)->ChannelPitch;
  columns_195 = _193 / _194;
  # DEBUG columns => columns_195
  clockLength_196 = _43 * _194;
  # DEBUG clockLength => clockLength_196
  _197 = this_10(D)->Co_delay;
  _198 = this_10(D)->Ci_delay;
  _199 = _197 / _198;
  _200 = _199 + 1.0e+0;
  _201 = _200 * 3.125e-1;
  _202 = _201 + 1.0e+0;
  _204 = _96 * clockLength_196;
  _205 = columns_195 * _204;
  _206 = _43 * _198;
  _207 = _205 + _206;
  Cclk_208 = _202 * _207;
  # DEBUG Cclk => Cclk_208
  _209 = this_wire$16_15 * Cclk_208;
  _211 = _101 * _101;
  _212 = _209 * _211;
  _214 = _104 * _212;
  _46 = this_10(D)->channelClkPower;
  _47 = _46 + _214;
  this_10(D)->channelClkPower = _47;
  # DEBUG i => 0
  # DEBUG i => 0
  if (prephitmp_336 <= 0)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 17>:
  _390 = (sizetype) _26;
  _388 = _390 * 8;
  __builtin_memset (_189, 0, _388);
  pretmp_334 = this_10(D)->classes;
  goto <bb 15>;

  <bb 18>:
  pretmp_383 = this_10(D)->totalTime;
  _167 = prephitmp_336 > 0;
  if (_167 != 0)
    goto <bb 19>;
  else
    goto <bb 22>;

  <bb 19>:
  _63 = (signed long) prephitmp_336;
  _57 = _63 + -1;
  _62 = (signed long) prephitmp_336;
  _353 = _62 + -1;
  _125 = (unsigned long) _353;

  <bb 41>:
  if (_125 > 599)
    goto <bb 42>;
  else
    goto <bb 43>;

  <bb 42>:
  .paral_data_store.848.__first = __first_222;
  .paral_data_store.848.iftmp.11 = iftmp.11_187;
  .paral_data_store.848.pretmp = pretmp_383;
  .paral_data_store.848.D.73004 = _125;
  #pragma omp parallel num_threads(6) [child fn: void_Power_Module__calcChannel_const_FlitChannel__._loopfn.0 (.paral_data_store.848)]

  <bb 46>:
  .paral_data_param_39 = &.paral_data_store.848;
  .paral_data_load.849_37 = (struct  *) .paral_data_param_39;
  __first.846_36 = .paral_data_load.849_37->__first;
  iftmp.11_88 = .paral_data_load.849_37->iftmp.11;
  pretmp_89 = .paral_data_load.849_37->pretmp;
  _91 = .paral_data_load.849_37->D.73004;

  <bb 48>:
  #pragma omp for schedule(static)
  for (ivtmp_41 = 0; ivtmp_41 < _91; ivtmp_41 =  + 1)

  <bb 20>:
  # ivtmp_347 = PHI <ivtmp_41(48), ivtmp_56(21)>

  <bb 44>:
  # ivtmp_54 = PHI <ivtmp_347(20)>
  graphite_IV.845_232 = ivtmp_54;
  _381 = (sizetype) graphite_IV.845_232;
  _380 = _381 * 4;
  _379 = iftmp.11_88 + _380;
  _389 = MEM[(const int &)_379];
  _378 = (double) _389;
  _377 = _378 / pretmp_89;
  _372 = (sizetype) graphite_IV.845_232;
  _370 = _372 * 8;
  _369 = __first.846_36 + _370;
  *_369 = _377;
  graphite_IV.845_230 = graphite_IV.845_232 + 1;

  <bb 21>:
  #pragma omp continue (ivtmp_56, ivtmp_347)
  goto <bb 49>;

  <bb 43>:

  <bb 39>:
  # graphite_IV.829_118 = PHI <0(43), graphite_IV.829_53(40)>
  # DEBUG i => NULL
  # DEBUG __n => NULL
  # DEBUG this => NULL
  # DEBUG __n => NULL
  # DEBUG this => NULL
  _292 = (sizetype) graphite_IV.829_118;
  _293 = _292 * 4;
  _282 = iftmp.11_187 + _293;
  _231 = MEM[(const int &)_282];
  _355 = (double) _231;
  _50 = _355 / pretmp_383;
  _126 = (sizetype) graphite_IV.829_118;
  _302 = _126 * 8;
  _301 = __first_222 + _302;
  *_301 = _50;
  # DEBUG i => NULL
  # DEBUG i => NULL
  graphite_IV.829_53 = graphite_IV.829_118 + 1;
  if (graphite_IV.829_118 < _57)
    goto <bb 40>;
  else
    goto <bb 38>;

  <bb 40>:
  goto <bb 39>;

  <bb 49>:
  #pragma omp return(nowait)

  <bb 47>:
  #pragma omp return

  <bb 45>:
  ivtmp_117 = (signed long) _125;
  graphite_IV.829_124 = ivtmp_117;
  # DEBUG i => NULL
  # DEBUG __n => NULL
  # DEBUG this => NULL
  # DEBUG __n => NULL
  # DEBUG this => NULL
  _346 = (sizetype) graphite_IV.829_124;
  _64 = _346 * 4;
  _371 = iftmp.11_187 + _64;
  _312 = MEM[(const int &)_371];
  _314 = (double) _312;
  _373 = _314 / pretmp_383;
  _309 = (sizetype) graphite_IV.829_124;
  _185 = _309 * 8;
  _228 = __first_222 + _185;
  *_228 = _373;
  # DEBUG i => NULL
  # DEBUG i => NULL
  graphite_IV.829_90 = graphite_IV.829_124 + 1;

  <bb 38>:

  <bb 22>:
  goto <bb 16>;

  <bb 23>:
  # DEBUG this => this_10(D)
  # DEBUG K => this_wire$8_6
  # DEBUG M => this_wire$16_15
  # DEBUG N => this_wire$24_16
  _69 = this_wire$8_6 * 5.0e-1;
  _128 = this_10(D)->IoffN;
  _129 = this_10(D)->IoffP;
  _130 = _129 * 2.0e+0;
  _131 = _128 + _130;
  _132 = _69 * _131;
  Pl_133 = _101 * _132;
  # DEBUG Pl => Pl_133
  _134 = this_wire$16_15 * Pl_133;
  _135 = this_wire$24_16 * _134;
  _65 = _43 * _135;
  _66 = this_10(D)->channelLeakPower;
  _67 = _65 + _66;
  this_10(D)->channelLeakPower = _67;
  # DEBUG this => &a
  # DEBUG D#195 => &a.D.56197
  # DEBUG this => D#195
  # DEBUG D#198 => a.D.56197._M_impl._M_finish
  # DEBUG D#197 => a.D.56197._M_impl._M_start
  # DEBUG D#85 => D#197
  # DEBUG D#86 => D#198
  # DEBUG __first => D#85
  # DEBUG __last => D#86
  # DEBUG D.64220 => D#87
  # DEBUG D#84 => D#86
  # DEBUG D#83 => D#85
  # DEBUG D#81 => D#83
  # DEBUG D#82 => D#84
  # DEBUG __first => D#81
  # DEBUG __last => D#82
  # DEBUG D#80 => D#82
  # DEBUG D#79 => D#81
  # DEBUG D#77 => D#79
  # DEBUG D#78 => D#80
  # DEBUG D.63554 => D#77
  # DEBUG D.63553 => D#78
  # DEBUG D#196 => &a.D.56197
  # DEBUG this => D#196
  # DEBUG D#194 => D#196->_M_impl._M_end_of_storage
  # DEBUG D#193 => (long int) D#194
  # DEBUG D#192 => (long int) __first_222
  # DEBUG D#191 => D#193 - D#192
  # DEBUG D#190 => D#191 /[ex] 8
  # DEBUG D#187 => D#196
  # DEBUG D#188 => (long unsigned int) D#190
  # DEBUG __p => __first_222
  # DEBUG this => D#187
  # DEBUG __n => D#188
  # DEBUG D#186 => D#188
  # DEBUG D#185 => D#187
  if (__first_222 != 0B)
    goto <bb 30>;
  else
    goto <bb 31>;

  <bb 24>:
  pretmp_352 = this_10(D)->channelWirePower;
  pretmp_354 = this_10(D)->channelDFFPower;
  pretmp_357 = _94 * 1.600000000000000088817841970012523233890533447265625e+0;
  pretmp_358 = _93 * 5.3333333333333332593184650249895639717578887939453125e-1;
  pretmp_359 = pretmp_358 * 2.0e+0;
  pretmp_360 = pretmp_357 + pretmp_359;
  pretmp_361 = this_10(D)->Cg_pwr;
  pretmp_363 = pretmp_361 * 5.3333333333333332593184650249895639717578887939453125e-1;
  pretmp_364 = pretmp_363 * 2.0e+0;
  pretmp_365 = pretmp_357 + pretmp_364;
  phi_out_of_ssa.830[0] = pretmp_352;
  phi_out_of_ssa.831[0] = pretmp_354;
  _307 = prephitmp_336 > 0;
  if (_307 != 0)
    goto <bb 25>;
  else
    goto <bb 29>;

  <bb 25>:
  _306 = (signed long) prephitmp_336;
  _305 = _306 + -1;
  phi_out_of_ssa.831_I_lsm.837_166 = phi_out_of_ssa.831[0];
  phi_out_of_ssa.830_I_lsm.839_184 = phi_out_of_ssa.830[0];

  <bb 26>:
  # graphite_IV.836_304 = PHI <0(25), graphite_IV.836_303(27)>
  # phi_out_of_ssa.831_I_lsm.837_281 = PHI <phi_out_of_ssa.831_I_lsm.837_166(25), _283(27)>
  # phi_out_of_ssa.830_I_lsm.839_308 = PHI <phi_out_of_ssa.830_I_lsm.839_184(25), _294(27)>
  # DEBUG i => NULL
  # DEBUG __n => NULL
  # DEBUG this => NULL
  _299 = (sizetype) graphite_IV.836_304;
  _298 = _299 * 8;
  _297 = __first_222 + _298;
  _300 = *_297;
  _296 = _107 * _300;
  _295 = _43 * _296;
  _294 = _295 + phi_out_of_ssa.830_I_lsm.839_308;
  # DEBUG __n => NULL
  # DEBUG this => NULL
  # DEBUG this => NULL
  # DEBUG M => NULL
  # DEBUG W => NULL
  # DEBUG alpha => NULL
  # DEBUG Cdin => NULL
  # DEBUG Cclk => NULL
  _291 = _300 * 5.0e-1;
  _290 = _291 * pretmp_360;
  _289 = _300 * pretmp_365;
  Cint_288 = _289 + _290;
  # DEBUG Cint => NULL
  _287 = this_wire$16_15 * Cint_288;
  _286 = _43 * _287;
  _285 = _211 * _286;
  _284 = _104 * _285;
  _283 = phi_out_of_ssa.831_I_lsm.837_281 + _284;
  # DEBUG i => NULL
  # DEBUG i => NULL
  graphite_IV.836_303 = graphite_IV.836_304 + 1;
  if (graphite_IV.836_304 < _305)
    goto <bb 27>;
  else
    goto <bb 28>;

  <bb 27>:
  goto <bb 26>;

  <bb 28>:
  # Close_Phi.833_I_lsm.841_123 = PHI <_294(26)>
  # Close_Phi.832_I_lsm.843_310 = PHI <_283(26)>
  Close_Phi.833[0] = Close_Phi.833_I_lsm.841_123;
  Close_Phi.832[0] = Close_Phi.832_I_lsm.843_310;

  <bb 29>:
  this__channelWirePower_lsm.825_278 = Close_Phi.833[0];
  Cross_BB_scalar_dependence.834[0] = this__channelWirePower_lsm.825_278;
  this__channelDFFPower_lsm.827_276 = Close_Phi.832[0];
  Cross_BB_scalar_dependence.835[0] = this__channelDFFPower_lsm.827_276;
  this__channelDFFPower_lsm.827_311 = Cross_BB_scalar_dependence.835[0];
  this__channelWirePower_lsm.825_313 = Cross_BB_scalar_dependence.834[0];
  this_10(D)->channelWirePower = this__channelWirePower_lsm.825_313;
  this_10(D)->channelDFFPower = this__channelDFFPower_lsm.827_311;
  goto <bb 23>;

  <bb 30>:
  # DEBUG D#184 => &D#185->_M_impl
  # DEBUG D#182 => D#184
  # DEBUG D#183 => D#186
  # DEBUG __p => __first_222
  # DEBUG __a => D#182
  # DEBUG __n => D#183
  # DEBUG D#181 => D#183
  # DEBUG D#180 => D#182
  # DEBUG D#178 => D#180
  # DEBUG D#179 => D#181
  # DEBUG __p => __first_222
  # DEBUG this => D#178
  # DEBUG D.68148 => D#179
  operator delete (__first_222);

  <bb 31>:
  # DEBUG D#189 => &D#196->_M_impl
  # DEBUG this => D#189
  # DEBUG this => D#189
  # DEBUG this => D#189
  MEM[(struct  &)&a] ={v} {CLOBBER};
  # DEBUG this => &temp
  # DEBUG D#174 => &temp.D.35433
  # DEBUG this => D#174
  # DEBUG D#177 => temp.D.35433._M_impl._M_finish
  # DEBUG D#176 => temp.D.35433._M_impl._M_start
  # DEBUG D#74 => D#176
  # DEBUG D#75 => D#177
  # DEBUG __first => D#74
  # DEBUG __last => D#75
  # DEBUG D.64133 => D#76
  # DEBUG D#73 => D#75
  # DEBUG D#72 => D#74
  # DEBUG D#70 => D#72
  # DEBUG D#71 => D#73
  # DEBUG __first => D#70
  # DEBUG __last => D#71
  # DEBUG D#69 => D#71
  # DEBUG D#68 => D#70
  # DEBUG D#66 => D#68
  # DEBUG D#67 => D#69
  # DEBUG D.63522 => D#66
  # DEBUG D.63521 => D#67
  # DEBUG D#175 => &temp.D.35433
  # DEBUG this => D#175
  # DEBUG D#173 => D#175->_M_impl._M_end_of_storage
  # DEBUG D#172 => (long int) D#173
  # DEBUG D#171 => (long int) iftmp.11_187
  # DEBUG D#170 => D#172 - D#171
  # DEBUG D#169 => D#170 /[ex] 4
  # DEBUG D#166 => D#175
  # DEBUG D#167 => (long unsigned int) D#169
  # DEBUG __p => iftmp.11_187
  # DEBUG this => D#166
  # DEBUG __n => D#167
  # DEBUG D#165 => D#167
  # DEBUG D#164 => D#166
  if (iftmp.11_187 != 0B)
    goto <bb 32>;
  else
    goto <bb 33>;

  <bb 32>:
  # DEBUG D#163 => &D#164->_M_impl
  # DEBUG D#161 => D#163
  # DEBUG D#162 => D#165
  # DEBUG __p => iftmp.11_187
  # DEBUG __a => D#161
  # DEBUG __n => D#162
  # DEBUG D#160 => D#162
  # DEBUG D#159 => D#161
  # DEBUG D#157 => D#159
  # DEBUG D#158 => D#160
  # DEBUG __p => iftmp.11_187
  # DEBUG this => D#157
  # DEBUG D.68133 => D#158
  operator delete (iftmp.11_187);

  <bb 33>:
  # DEBUG D#168 => &D#175->_M_impl
  # DEBUG this => D#168
  # DEBUG this => D#168
  # DEBUG this => D#168
  # DEBUG D#447 => {CLOBBER}
  # DEBUG this_wire$8 => D#447
  # DEBUG D#448 => {CLOBBER}
  # DEBUG this_wire$16 => D#448
  # DEBUG D#449 => {CLOBBER}
  # DEBUG this_wire$24 => D#449
  temp ={v} {CLOBBER};
  a ={v} {CLOBBER};
  return;

<L10>:

<L8>:
  # DEBUG this => &temp
  # DEBUG D#174 => &temp.D.35433
  # DEBUG this => D#174
  # DEBUG D#177 => temp.D.35433._M_impl._M_finish
  # DEBUG D#176 => temp.D.35433._M_impl._M_start
  # DEBUG D#74 => D#176
  # DEBUG D#75 => D#177
  # DEBUG __first => D#74
  # DEBUG __last => D#75
  # DEBUG D.64133 => D#76
  # DEBUG D#73 => D#75
  # DEBUG D#72 => D#74
  # DEBUG D#70 => D#72
  # DEBUG D#71 => D#73
  # DEBUG __first => D#70
  # DEBUG __last => D#71
  # DEBUG D#69 => D#71
  # DEBUG D#68 => D#70
  # DEBUG D#66 => D#68
  # DEBUG D#67 => D#69
  # DEBUG D.63522 => D#66
  # DEBUG D.63521 => D#67
  # DEBUG D#175 => &temp.D.35433
  # DEBUG this => D#175
  # DEBUG D#173 => D#175->_M_impl._M_end_of_storage
  # DEBUG D#172 => (long int) D#173
  # DEBUG D#171 => (long int) iftmp.11_187
  # DEBUG D#170 => D#172 - D#171
  # DEBUG D#169 => D#170 /[ex] 4
  # DEBUG D#166 => D#175
  # DEBUG D#167 => (long unsigned int) D#169
  # DEBUG __p => iftmp.11_187
  # DEBUG this => D#166
  # DEBUG __n => D#167
  # DEBUG D#165 => D#167
  # DEBUG D#164 => D#166
  if (iftmp.11_187 != 0B)
    goto <bb 36>;
  else
    goto <bb 37>;

  <bb 36>:
  # DEBUG D#163 => &D#164->_M_impl
  # DEBUG D#161 => D#163
  # DEBUG D#162 => D#165
  # DEBUG __p => iftmp.11_187
  # DEBUG __a => D#161
  # DEBUG __n => D#162
  # DEBUG D#160 => D#162
  # DEBUG D#159 => D#161
  # DEBUG D#157 => D#159
  # DEBUG D#158 => D#160
  # DEBUG __p => iftmp.11_187
  # DEBUG this => D#157
  # DEBUG D.68171 => D#158
  operator delete (iftmp.11_187);

  <bb 37>:
  # DEBUG D#168 => &D#175->_M_impl
  # DEBUG this => D#168
  # DEBUG this => D#168
  # DEBUG this => D#168
  resx 2

}



;; Function void Power_Module::run() (_ZN12Power_Module3runEv, funcdef_no=2014, decl_uid=45241, cgraph_uid=513, symbol_order=514)

Trying loop 4 as candidate
loop 4 is innermost
loop is not parallel according to graphite
Trying loop 3 as candidate
loop 3 is innermost
loop is not parallel according to graphite
Trying loop 2 as candidate
loop 2 is innermost
loop is not parallel according to graphite
Trying loop 1 as candidate
loop 1 is innermost
loop is not parallel according to graphite
void Power_Module::run() (struct Power_Module * const this)
{
  struct FlitChannel * * chan$_M_impl$_M_start;
  struct FlitChannel * * eject$_M_impl$_M_start;
  struct FlitChannel * * inject$_M_impl$_M_start;
  struct basic_ostream & D.73449;
  char_type D.73445;
  char __c;
  char_type D.73442;
  char __c;
  char_type D.73439;
  struct basic_ostream & D.73433;
  struct basic_ostream & D.73430;
  struct basic_ostream & D.73426;
  struct basic_ostream & D.73422;
  struct basic_ostream & D.73418;
  struct basic_ostream & D.73405;
  struct basic_ostream & D.73392;
  struct basic_ostream & D.73379;
  struct basic_ostream & D.73366;
  struct basic_ostream & D.73362;
  struct basic_ostream & D.73358;
  struct basic_ostream & D.73354;
  struct basic_ostream & D.73350;
  struct basic_ostream & D.73346;
  struct basic_ostream & D.73342;
  struct basic_ostream & D.73338;
  struct basic_ostream & D.73334;
  struct basic_ostream & D.73330;
  struct basic_ostream & D.73326;
  struct basic_ostream & D.73322;
  struct basic_ostream & D.73318;
  struct basic_ostream & D.73314;
  struct basic_ostream & D.73310;
  struct basic_ostream & D.73306;
  struct basic_ostream & D.73302;
  struct basic_ostream & D.73289;
  struct basic_ostream & D.73276;
  struct Router * * D.73272;
  const ptrdiff_t _Num;
  struct Router * * D.73222;
  const ptrdiff_t _Num;
  struct Router * * D.73172;
  struct Router * * D.73163;
  const ptrdiff_t _Num;
  const ptrdiff_t _Num;
  struct IQRouter * temp;
  size_t i;
  int i;
  int i;
  int i;
  double totalarea;
  double totalpower;
  struct vector routers;
  struct vector chan;
  struct vector eject;
  struct vector inject;
  int _16;
  double _18;
  struct Network * _40;
  long unsigned int _41;
  long unsigned int _42;
  struct FlitChannel * * const _45;
  long unsigned int _47;
  struct Network * _48;
  struct FlitChannel * & _49;
  long unsigned int _50;
  long unsigned int _51;
  struct FlitChannel * _52;
  struct Network * _55;
  long unsigned int _57;
  struct FlitChannel * _58;
  struct Network * _61;
  struct FlitChannel * & _62;
  long unsigned int _63;
  long unsigned int _64;
  struct FlitChannel * _65;
  long unsigned int _69;
  struct Router * _71;
  double _78;
  double _79;
  double _80;
  double _81;
  double _82;
  double _83;
  double _84;
  double _85;
  double _86;
  double _87;
  double _88;
  double _89;
  double _90;
  double _91;
  double _92;
  double _93;
  double _94;
  double _95;
  double _96;
  double _97;
  double _98;
  double _99;
  double _100;
  double _101;
  double _103;
  double _104;
  double _105;
  double _106;
  double _107;
  double _108;
  double _112;
  struct __ostream_type & _113;
  double _115;
  struct __ostream_type & _116;
  double _118;
  struct __ostream_type & _119;
  double _121;
  struct __ostream_type & _122;
  double _124;
  struct __ostream_type & _125;
  double _127;
  struct __ostream_type & _128;
  double _130;
  struct __ostream_type & _131;
  double _133;
  struct __ostream_type & _134;
  double _136;
  struct __ostream_type & _137;
  double _139;
  struct __ostream_type & _140;
  double _142;
  struct __ostream_type & _143;
  double _145;
  struct __ostream_type & _146;
  double _148;
  struct __ostream_type & _149;
  double _151;
  struct __ostream_type & _152;
  double _154;
  struct __ostream_type & _155;
  struct __ostream_type & _157;
  const int _161;
  double _163;
  struct __ostream_type & _164;
  double _166;
  struct __ostream_type & _167;
  double _169;
  struct __ostream_type & _170;
  double _172;
  struct __ostream_type & _173;
  int (*__vtbl_ptr_type) () * _174;
  struct __ostream_type & _175;
  const int _190;
  const int _191;
  const int _192;
  struct SwitchMonitor * const _193;
  struct BufferMonitor * const _194;
  size_type _195;
  struct FlitChannel * & _200;
  long unsigned int _207;
  struct Router * & _208;
  const struct __ctype_type * _258;
  struct FlitChannel * * const _307;
  struct FlitChannel * * const _308;
  long int _309;
  long int _310;
  long int _311;
  long int _312;
  size_type _313;
  long unsigned int _323;
  struct FlitChannel * * const _326;
  long int _327;
  long int _328;
  long int _329;
  long int _330;
  size_type _331;
  long unsigned int _341;
  struct Router * * _344;
  long unsigned int _346;
  struct Router * * _347;
  struct FlitChannel * * const _349;
  struct FlitChannel * * const _350;
  long int _351;
  long int _352;
  long int _353;
  long int _354;
  size_type _355;
  long unsigned int _365;
  struct Router * * _368;
  struct Router * * const _370;
  struct Router * * const _371;
  long int _372;
  long int _373;
  long int _374;
  long int _375;
  size_type _376;
  long unsigned int _386;
  struct Router * * _389;
  struct Router * * iftmp.45_390;
  struct Network * _427;
  const int _449;
  long int _466;
  sizetype _467;
  struct basic_ios * _468;
  struct basic_ostream & _471;
  char _473;
  char_type _476;
  int (*__vtbl_ptr_type) () * _481;
  int (*__vtbl_ptr_type) () _482;
  void * PROF_486;
  char_type _488;
  struct Network * pretmp_611;
  struct Network * prephitmp_612;
  struct FlitChannel * * const pretmp_613;
  struct FlitChannel * * const pretmp_615;
  struct FlitChannel * * const prephitmp_616;
  long int pretmp_617;
  long int pretmp_619;
  long int pretmp_621;
  long int prephitmp_622;
  const ptrdiff_t pretmp_623;
  const ptrdiff_t prephitmp_624;
  struct Network * pretmp_631;
  struct Network * prephitmp_632;
  struct FlitChannel * * const pretmp_633;
  struct FlitChannel * * const pretmp_635;
  struct FlitChannel * * const prephitmp_636;
  long int pretmp_637;
  long int pretmp_639;
  long int pretmp_641;
  long int prephitmp_642;
  const ptrdiff_t pretmp_643;
  const ptrdiff_t prephitmp_644;
  struct FlitChannel * * const pretmp_651;
  struct FlitChannel * * const pretmp_653;
  struct FlitChannel * * const prephitmp_654;
  long int pretmp_655;
  long int pretmp_657;
  long int pretmp_659;
  long int prephitmp_660;
  const ptrdiff_t pretmp_661;
  const ptrdiff_t prephitmp_662;
  struct Network * pretmp_663;
  struct Network * prephitmp_664;
  struct Network * prephitmp_665;
  const int _699;
  struct Network * _700;
  struct Network * _701;
  struct Router * * const pretmp_702;
  struct Router * * const pretmp_704;
  struct Router * * const prephitmp_705;
  long int pretmp_706;
  long int pretmp_708;
  long int pretmp_710;
  long int prephitmp_711;
  const ptrdiff_t pretmp_712;
  const ptrdiff_t prephitmp_713;
  int pretmp_714;
  int pretmp_715;
  int prephitmp_716;
  struct Network * _718;

  <bb 2>:
  _16 = GetSimTime ();
  _18 = (double) _16;
  this_19(D)->totalTime = _18;
  this_19(D)->channelWirePower = 0.0;
  this_19(D)->channelClkPower = 0.0;
  this_19(D)->channelDFFPower = 0.0;
  this_19(D)->channelLeakPower = 0.0;
  this_19(D)->inputReadPower = 0.0;
  this_19(D)->inputWritePower = 0.0;
  this_19(D)->inputLeakagePower = 0.0;
  this_19(D)->switchPower = 0.0;
  this_19(D)->switchPowerCtrl = 0.0;
  this_19(D)->switchPowerLeak = 0.0;
  this_19(D)->outputPower = 0.0;
  this_19(D)->outputPowerClk = 0.0;
  this_19(D)->outputCtrlPower = 0.0;
  this_19(D)->channelArea = 0.0;
  this_19(D)->switchArea = 0.0;
  this_19(D)->inputArea = 0.0;
  this_19(D)->outputArea = 0.0;
  this_19(D)->maxInputPort = 0.0;
  this_19(D)->maxOutputPort = 0.0;
  _40 = this_19(D)->net;
  # DEBUG this => _40
  # DEBUG D#763 => &_40->_inject
  # DEBUG this => &inject
  # DEBUG __x => D#763
  # DEBUG D#454 => &MEM[(const struct vector *)D#763].D.40296
  # DEBUG this => D#454
  # DEBUG __a => NULL
  _45 = MEM[(struct FlitChannel * * *)_40 + 136B];
  # DEBUG D#28 => D#763
  _326 = MEM[(struct FlitChannel * * *)_40 + 144B];
  # DEBUG D#28 => D#763
  # DEBUG this => D#28
  # DEBUG this => D#28
  _327 = (long int) _326;
  _328 = (long int) _45;
  _329 = _327 - _328;
  _330 = _329 /[ex] 8;
  _331 = (size_type) _330;
  # DEBUG D#456 => &inject.D.40296
  # DEBUG this => D#456
  # DEBUG __n => NULL
  # DEBUG __a => NULL
  # DEBUG D#379 => &D#456->_M_impl
  # DEBUG this => D#379
  # DEBUG __a => NULL
  # DEBUG this => D#379
  # DEBUG __a => NULL
  # DEBUG this => D#379
  # DEBUG D.64228 => NULL
  # DEBUG this => D#456
  # DEBUG __n => NULL
  # DEBUG D#377 => D#456
  # DEBUG __n => _331
  # DEBUG this => D#388
  # DEBUG D#387 => D#388
  if (_331 != 0)
    goto <bb 3>;
  else
    goto <bb 6>;

  <bb 3>:
  # DEBUG D#386 => &D#387->_M_impl
  # DEBUG D#385 => D#386
  # DEBUG __n => _331
  # DEBUG __a => D#385
  # DEBUG D#384 => D#385
  # DEBUG D#382 => D#384
  # DEBUG D#383 => 0B
  # DEBUG __n => _331
  # DEBUG this => D#382
  # DEBUG D.73161 => D#383
  # DEBUG D#381 => D#382
  # DEBUG D#380 => D#381
  # DEBUG this => D#380
  if (_331 > 2305843009213693951)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  std::__throw_bad_alloc ();

  <bb 5>:
  _42 = (long unsigned int) _329;
  _344 = operator new (_42);
  pretmp_611 = this_19(D)->net;
  pretmp_613 = MEM[(struct FlitChannel * * *)_40 + 144B];
  pretmp_615 = MEM[(struct FlitChannel * * *)_40 + 136B];
  pretmp_617 = (long int) pretmp_613;
  pretmp_619 = (long int) pretmp_615;
  pretmp_621 = pretmp_617 - pretmp_619;
  pretmp_623 = pretmp_621 /[ex] 8;

  <bb 6>:
  # inject$_M_impl$_M_start_345 = PHI <0B(2), _344(5)>
  # prephitmp_612 = PHI <_40(2), pretmp_611(5)>
  # prephitmp_616 = PHI <_45(2), pretmp_615(5)>
  # prephitmp_622 = PHI <_329(2), pretmp_621(5)>
  # prephitmp_624 = PHI <_330(2), pretmp_623(5)>
  # DEBUG inject$_M_impl$_M_start => inject$_M_impl$_M_start_345
  # DEBUG D#455 => &inject.D.40296
  # DEBUG this => D#455
  # DEBUG D#791 => MEM[(struct FlitChannel * * *)_40 + 144B]
  # DEBUG D#44 => D#763
  # DEBUG this => D#44
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG D#790 => MEM[(struct FlitChannel * * *)_40 + 136B]
  # DEBUG D#45 => D#763
  # DEBUG this => D#45
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG __first => D#790
  # DEBUG __last => D#791
  # DEBUG __result => NULL
  # DEBUG D.73125 => D#453
  # DEBUG __first => D#790
  # DEBUG __last => D#791
  # DEBUG __result => NULL
  # DEBUG __assignable => 1
  # DEBUG __first => D#790
  # DEBUG __last => D#791
  # DEBUG __result => NULL
  # DEBUG __first => D#790
  # DEBUG __last => D#791
  # DEBUG __result => NULL
  # DEBUG __it => D#791
  # DEBUG __it$_M_current => D#791
  # DEBUG __it => D#790
  # DEBUG __it$_M_current => D#790
  # DEBUG __first => D#790
  # DEBUG __last => D#791
  # DEBUG __result => NULL
  # DEBUG __it => NULL
  # DEBUG __it => NULL
  # DEBUG __it => D#791
  # DEBUG __it => D#791
  # DEBUG this => NULL
  # DEBUG __it => D#790
  # DEBUG __it => D#790
  # DEBUG this => NULL
  # DEBUG __first => D#790
  # DEBUG __last => D#791
  # DEBUG __result => NULL
  # DEBUG __simple => 1
  # DEBUG __first => D#790
  # DEBUG __last => D#791
  # DEBUG __result => NULL
  # DEBUG D#789 => (long int) D#791
  # DEBUG D#788 => (long int) D#790
  # DEBUG D#787 => D#789 - D#788
  # DEBUG _Num => D#787 /[ex] 8
  if (prephitmp_624 != 0)
    goto <bb 7>;
  else
    goto <bb 8>;

  <bb 7>:
  _341 = (long unsigned int) prephitmp_622;
  __builtin_memmove (inject$_M_impl$_M_start_345, prephitmp_616, _341);

  <bb 8>:
  # DEBUG D#786 => this_19(D)->net
  # DEBUG this => D#786
  # DEBUG D#764 => &D#786->_eject
  # DEBUG this => &eject
  # DEBUG __x => D#764
  # DEBUG D#454 => &MEM[(const struct vector *)D#764].D.40296
  # DEBUG this => D#454
  # DEBUG __a => NULL
  _307 = MEM[(struct FlitChannel * * *)prephitmp_612 + 184B];
  # DEBUG D#28 => D#764
  _308 = MEM[(struct FlitChannel * * *)prephitmp_612 + 192B];
  # DEBUG D#28 => D#764
  # DEBUG this => D#28
  # DEBUG this => D#28
  _309 = (long int) _308;
  _310 = (long int) _307;
  _311 = _309 - _310;
  _312 = _311 /[ex] 8;
  _313 = (size_type) _312;
  # DEBUG D#456 => &eject.D.40296
  # DEBUG this => D#456
  # DEBUG __n => NULL
  # DEBUG __a => NULL
  # DEBUG D#379 => &D#456->_M_impl
  # DEBUG this => D#379
  # DEBUG __a => NULL
  # DEBUG this => D#379
  # DEBUG __a => NULL
  # DEBUG this => D#379
  # DEBUG D.64228 => NULL
  # DEBUG this => D#456
  # DEBUG __n => NULL
  # DEBUG D#377 => D#456
  # DEBUG __n => _313
  # DEBUG this => D#388
  # DEBUG D#387 => D#388
  if (_313 != 0)
    goto <bb 9>;
  else
    goto <bb 14>;

  <bb 9>:
  # DEBUG D#386 => &D#387->_M_impl
  # DEBUG D#385 => D#386
  # DEBUG __n => _313
  # DEBUG __a => D#385
  # DEBUG D#384 => D#385
  # DEBUG D#382 => D#384
  # DEBUG D#383 => 0B
  # DEBUG __n => _313
  # DEBUG this => D#382
  # DEBUG D.73170 => D#383
  # DEBUG D#381 => D#382
  # DEBUG D#380 => D#381
  # DEBUG this => D#380
  if (_313 > 2305843009213693951)
    goto <bb 10>;
  else
    goto <bb 11>;

  <bb 10>:
  std::__throw_bad_alloc ();

  <bb 11>:
  _346 = (long unsigned int) _311;
  _347 = operator new (_346);
  goto <bb 13>;

<L21>:
  goto <bb 238> (<L18>);

  <bb 13>:
  pretmp_631 = this_19(D)->net;
  pretmp_633 = MEM[(struct FlitChannel * * *)prephitmp_612 + 192B];
  pretmp_635 = MEM[(struct FlitChannel * * *)prephitmp_612 + 184B];
  pretmp_637 = (long int) pretmp_633;
  pretmp_639 = (long int) pretmp_635;
  pretmp_641 = pretmp_637 - pretmp_639;
  pretmp_643 = pretmp_641 /[ex] 8;

  <bb 14>:
  # eject$_M_impl$_M_start_348 = PHI <0B(8), _347(13)>
  # prephitmp_632 = PHI <prephitmp_612(8), pretmp_631(13)>
  # prephitmp_636 = PHI <_307(8), pretmp_635(13)>
  # prephitmp_642 = PHI <_311(8), pretmp_641(13)>
  # prephitmp_644 = PHI <_312(8), pretmp_643(13)>
  # DEBUG eject$_M_impl$_M_start => eject$_M_impl$_M_start_348
  # DEBUG D#455 => &eject.D.40296
  # DEBUG this => D#455
  # DEBUG D#785 => MEM[(struct FlitChannel * * *)D#786 + 192B]
  # DEBUG D#44 => D#764
  # DEBUG this => D#44
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG D#784 => MEM[(struct FlitChannel * * *)D#786 + 184B]
  # DEBUG D#45 => D#764
  # DEBUG this => D#45
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG __first => D#784
  # DEBUG __last => D#785
  # DEBUG __result => NULL
  # DEBUG D.73084 => D#453
  # DEBUG __first => D#784
  # DEBUG __last => D#785
  # DEBUG __result => NULL
  # DEBUG __assignable => 1
  # DEBUG __first => D#784
  # DEBUG __last => D#785
  # DEBUG __result => NULL
  # DEBUG __first => D#784
  # DEBUG __last => D#785
  # DEBUG __result => NULL
  # DEBUG __it => D#785
  # DEBUG __it$_M_current => D#785
  # DEBUG __it => D#784
  # DEBUG __it$_M_current => D#784
  # DEBUG __first => D#784
  # DEBUG __last => D#785
  # DEBUG __result => NULL
  # DEBUG __it => NULL
  # DEBUG __it => NULL
  # DEBUG __it => D#785
  # DEBUG __it => D#785
  # DEBUG this => NULL
  # DEBUG __it => D#784
  # DEBUG __it => D#784
  # DEBUG this => NULL
  # DEBUG __first => D#784
  # DEBUG __last => D#785
  # DEBUG __result => NULL
  # DEBUG __simple => 1
  # DEBUG __first => D#784
  # DEBUG __last => D#785
  # DEBUG __result => NULL
  # DEBUG D#783 => (long int) D#785
  # DEBUG D#782 => (long int) D#784
  # DEBUG D#781 => D#783 - D#782
  # DEBUG _Num => D#781 /[ex] 8
  if (prephitmp_644 != 0)
    goto <bb 15>;
  else
    goto <bb 16>;

  <bb 15>:
  _323 = (long unsigned int) prephitmp_642;
  __builtin_memmove (eject$_M_impl$_M_start_348, prephitmp_636, _323);

  <bb 16>:
  # DEBUG D#780 => this_19(D)->net
  # DEBUG this => D#780
  # DEBUG D#765 => &D#780->_chan
  # DEBUG this => &chan
  # DEBUG __x => D#765
  # DEBUG D#454 => &MEM[(const struct vector *)D#765].D.40296
  # DEBUG this => D#454
  # DEBUG __a => NULL
  _349 = MEM[(struct FlitChannel * * *)prephitmp_632 + 232B];
  # DEBUG D#28 => D#765
  _350 = MEM[(struct FlitChannel * * *)prephitmp_632 + 240B];
  # DEBUG D#28 => D#765
  # DEBUG this => D#28
  # DEBUG this => D#28
  _351 = (long int) _350;
  _352 = (long int) _349;
  _353 = _351 - _352;
  _354 = _353 /[ex] 8;
  _355 = (size_type) _354;
  # DEBUG D#456 => &chan.D.40296
  # DEBUG this => D#456
  # DEBUG __n => NULL
  # DEBUG __a => NULL
  # DEBUG D#379 => &D#456->_M_impl
  # DEBUG this => D#379
  # DEBUG __a => NULL
  # DEBUG this => D#379
  # DEBUG __a => NULL
  # DEBUG this => D#379
  # DEBUG D.64228 => NULL
  # DEBUG this => D#456
  # DEBUG __n => NULL
  # DEBUG D#377 => D#456
  # DEBUG __n => _355
  # DEBUG this => D#388
  # DEBUG D#387 => D#388
  if (_355 != 0)
    goto <bb 17>;
  else
    goto <bb 22>;

  <bb 17>:
  # DEBUG D#386 => &D#387->_M_impl
  # DEBUG D#385 => D#386
  # DEBUG __n => _355
  # DEBUG __a => D#385
  # DEBUG D#384 => D#385
  # DEBUG D#382 => D#384
  # DEBUG D#383 => 0B
  # DEBUG __n => _355
  # DEBUG this => D#382
  # DEBUG D.73220 => D#383
  # DEBUG D#381 => D#382
  # DEBUG D#380 => D#381
  # DEBUG this => D#380
  if (_355 > 2305843009213693951)
    goto <bb 18>;
  else
    goto <bb 19>;

  <bb 18>:
  std::__throw_bad_alloc ();

  <bb 19>:
  _47 = (long unsigned int) _353;
  _368 = operator new (_47);
  goto <bb 21>;

<L23>:
  goto <bb 233> (<L17>);

  <bb 21>:
  pretmp_651 = MEM[(struct FlitChannel * * *)prephitmp_632 + 240B];
  pretmp_653 = MEM[(struct FlitChannel * * *)prephitmp_632 + 232B];
  pretmp_655 = (long int) pretmp_651;
  pretmp_657 = (long int) pretmp_653;
  pretmp_659 = pretmp_655 - pretmp_657;
  pretmp_661 = pretmp_659 /[ex] 8;
  pretmp_663 = this_19(D)->net;

  <bb 22>:
  # chan$_M_impl$_M_start_369 = PHI <0B(16), _368(21)>
  # prephitmp_654 = PHI <_349(16), pretmp_653(21)>
  # prephitmp_660 = PHI <_353(16), pretmp_659(21)>
  # prephitmp_662 = PHI <_354(16), pretmp_661(21)>
  # prephitmp_664 = PHI <prephitmp_632(16), pretmp_663(21)>
  # DEBUG chan$_M_impl$_M_start => chan$_M_impl$_M_start_369
  # DEBUG D#455 => &chan.D.40296
  # DEBUG this => D#455
  # DEBUG D#779 => MEM[(struct FlitChannel * * *)D#780 + 240B]
  # DEBUG D#44 => D#765
  # DEBUG this => D#44
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG D#778 => MEM[(struct FlitChannel * * *)D#780 + 232B]
  # DEBUG D#45 => D#765
  # DEBUG this => D#45
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG __first => D#778
  # DEBUG __last => D#779
  # DEBUG __result => NULL
  # DEBUG D.73184 => D#453
  # DEBUG __first => D#778
  # DEBUG __last => D#779
  # DEBUG __result => NULL
  # DEBUG __assignable => 1
  # DEBUG __first => D#778
  # DEBUG __last => D#779
  # DEBUG __result => NULL
  # DEBUG __first => D#778
  # DEBUG __last => D#779
  # DEBUG __result => NULL
  # DEBUG __it => D#779
  # DEBUG __it$_M_current => D#779
  # DEBUG __it => D#778
  # DEBUG __it$_M_current => D#778
  # DEBUG __first => D#778
  # DEBUG __last => D#779
  # DEBUG __result => NULL
  # DEBUG __it => NULL
  # DEBUG __it => NULL
  # DEBUG __it => D#779
  # DEBUG __it => D#779
  # DEBUG this => NULL
  # DEBUG __it => D#778
  # DEBUG __it => D#778
  # DEBUG this => NULL
  # DEBUG __first => D#778
  # DEBUG __last => D#779
  # DEBUG __result => NULL
  # DEBUG __simple => 1
  # DEBUG __first => D#778
  # DEBUG __last => D#779
  # DEBUG __result => NULL
  # DEBUG D#777 => (long int) D#779
  # DEBUG D#776 => (long int) D#778
  # DEBUG D#775 => D#777 - D#776
  # DEBUG _Num => D#775 /[ex] 8
  if (prephitmp_662 != 0)
    goto <bb 23>;
  else
    goto <bb 24>;

  <bb 23>:
  _365 = (long unsigned int) prephitmp_660;
  __builtin_memmove (chan$_M_impl$_M_start_369, prephitmp_654, _365);

  <bb 24>:
  # DEBUG i => 0
  # DEBUG D#774 => this_19(D)->net
  _449 = MEM[(int *)prephitmp_664 + 100B];
  # DEBUG D#10 => D#774
  # DEBUG this => D#10
  if (_449 > 0)
    goto <bb 26>;
  else
    goto <bb 30>;

  <bb 25>:
  # _718 = PHI <_48(28)>
  # _699 = PHI <_190(28)>
  # DEBUG i => 0
  # DEBUG D#10 => _718
  # DEBUG this => D#10
  if (_699 > 0)
    goto <bb 31>;
  else
    goto <bb 30>;

  <bb 26>:

  <bb 27>:
  # i_450 = PHI <0(26), i_54(29)>
  # DEBUG i => i_450
  # DEBUG D#10 => D#774
  # DEBUG this => D#10
  _50 = (long unsigned int) i_450;
  # DEBUG D#15 => &inject
  # DEBUG __n => _50
  # DEBUG this => D#15
  _64 = _50 * 8;
  _62 = inject$_M_impl$_M_start_345 + _64;
  _52 = *_62;
  Power_Module::calcChannel (this_19(D), _52);

  <bb 28>:
  i_54 = i_450 + 1;
  # DEBUG i => i_54
  # DEBUG i => i_54
  _48 = this_19(D)->net;
  _190 = MEM[(int *)_48 + 100B];
  # DEBUG D#10 => _48
  # DEBUG this => D#10
  if (i_54 < _190)
    goto <bb 29>;
  else
    goto <bb 25>;

  <bb 29>:
  goto <bb 27>;

  <bb 30>:
  # prephitmp_665 = PHI <_701(35), _718(25), prephitmp_664(24)>
  # DEBUG i => 0
  # DEBUG D#773 => this_19(D)->net
  _161 = MEM[(int *)prephitmp_665 + 104B];
  # DEBUG D#11 => D#773
  # DEBUG this => D#11
  if (_161 > 0)
    goto <bb 37>;
  else
    goto <bb 43>;

  <bb 31>:

  <bb 32>:
  # i_438 = PHI <0(31), i_60(36)>
  # DEBUG i => i_438
  # DEBUG D#10 => _718
  # DEBUG this => D#10
  _57 = (long unsigned int) i_438;
  # DEBUG D#15 => &eject
  # DEBUG __n => _57
  # DEBUG this => D#15
  _51 = _57 * 8;
  _49 = eject$_M_impl$_M_start_348 + _51;
  _58 = *_49;
  Power_Module::calcChannel (this_19(D), _58);
  goto <bb 34>;

<L25>:
  goto <bb 228> (<L16>);

  <bb 34>:
  i_60 = i_438 + 1;
  # DEBUG i => i_60
  # DEBUG i => i_60
  _55 = this_19(D)->net;
  _191 = MEM[(int *)_55 + 100B];
  # DEBUG D#10 => _55
  # DEBUG this => D#10
  if (i_60 < _191)
    goto <bb 36>;
  else
    goto <bb 35>;

  <bb 35>:
  # _701 = PHI <_55(34)>
  goto <bb 30>;

  <bb 36>:
  goto <bb 32>;

  <bb 37>:

  <bb 38>:
  # i_315 = PHI <0(37), i_67(42)>
  # DEBUG i => i_315
  # DEBUG D#11 => D#773
  # DEBUG this => D#11
  _63 = (long unsigned int) i_315;
  # DEBUG D#15 => &chan
  # DEBUG __n => _63
  # DEBUG this => D#15
  _41 = _63 * 8;
  _200 = chan$_M_impl$_M_start_369 + _41;
  _65 = *_200;
  Power_Module::calcChannel (this_19(D), _65);
  goto <bb 40>;

<L26>:
  goto <bb 228> (<L16>);

  <bb 40>:
  i_67 = i_315 + 1;
  # DEBUG i => i_67
  # DEBUG i => i_67
  _61 = this_19(D)->net;
  _192 = MEM[(int *)_61 + 104B];
  # DEBUG D#11 => _61
  # DEBUG this => D#11
  if (i_67 < _192)
    goto <bb 42>;
  else
    goto <bb 41>;

  <bb 41>:
  # _700 = PHI <_61(40)>
  goto <bb 43>;

  <bb 42>:
  goto <bb 38>;

  <bb 43>:
  # _427 = PHI <_700(41), prephitmp_665(30)>
  # DEBUG this => _427
  # DEBUG D#766 => &_427->_routers
  # DEBUG this => &routers
  # DEBUG __x => D#766
  # DEBUG D#458 => &MEM[(const struct vector *)D#766].D.42816
  # DEBUG this => D#458
  # DEBUG __a => NULL
  _370 = MEM[(struct Router * * *)_427 + 112B];
  # DEBUG D#20 => D#766
  _371 = MEM[(struct Router * * *)_427 + 120B];
  # DEBUG D#20 => D#766
  # DEBUG this => D#20
  # DEBUG this => D#20
  _372 = (long int) _371;
  _373 = (long int) _370;
  _374 = _372 - _373;
  _375 = _374 /[ex] 8;
  _376 = (size_type) _375;
  # DEBUG D#460 => &routers.D.42816
  # DEBUG this => D#460
  # DEBUG __n => NULL
  # DEBUG __a => NULL
  # DEBUG D#390 => &D#460->_M_impl
  # DEBUG this => D#390
  # DEBUG __a => NULL
  # DEBUG this => D#390
  # DEBUG __a => NULL
  # DEBUG this => D#390
  # DEBUG D.64315 => NULL
  # DEBUG this => D#460
  # DEBUG __n => NULL
  # DEBUG D#388 => D#460
  # DEBUG __n => _376
  # DEBUG this => D#388
  # DEBUG D#387 => D#388
  if (_376 != 0)
    goto <bb 44>;
  else
    goto <bb 50>;

  <bb 44>:
  # DEBUG D#386 => &D#387->_M_impl
  # DEBUG D#385 => D#386
  # DEBUG __n => _376
  # DEBUG __a => D#385
  # DEBUG D#384 => D#385
  # DEBUG D#382 => D#384
  # DEBUG D#383 => 0B
  # DEBUG __n => _376
  # DEBUG this => D#382
  # DEBUG D.73270 => D#383
  # DEBUG D#381 => D#382
  # DEBUG D#380 => D#381
  # DEBUG this => D#380
  if (_376 > 2305843009213693951)
    goto <bb 45>;
  else
    goto <bb 47>;

  <bb 45>:
  std::__throw_bad_alloc ();

<L27>:
  goto <bb 228> (<L16>);

  <bb 47>:
  _69 = (long unsigned int) _374;
  _389 = operator new (_69);
  goto <bb 49>;

<L28>:
  goto <bb 228> (<L16>);

  <bb 49>:
  pretmp_702 = MEM[(struct Router * * *)_427 + 120B];
  pretmp_704 = MEM[(struct Router * * *)_427 + 112B];
  pretmp_706 = (long int) pretmp_702;
  pretmp_708 = (long int) pretmp_704;
  pretmp_710 = pretmp_706 - pretmp_708;
  pretmp_712 = pretmp_710 /[ex] 8;

  <bb 50>:
  # iftmp.45_390 = PHI <0B(43), _389(49)>
  # prephitmp_705 = PHI <_370(43), pretmp_704(49)>
  # prephitmp_711 = PHI <_374(43), pretmp_710(49)>
  # prephitmp_713 = PHI <_375(43), pretmp_712(49)>
  # DEBUG D#459 => &routers.D.42816
  # DEBUG this => D#459
  # DEBUG D#772 => MEM[(struct Router * * *)_427 + 120B]
  # DEBUG D#46 => D#766
  # DEBUG this => D#46
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG D#771 => MEM[(struct Router * * *)_427 + 112B]
  # DEBUG D#47 => D#766
  # DEBUG this => D#47
  # DEBUG this => NULL
  # DEBUG __i => NULL
  # DEBUG __first => D#771
  # DEBUG __last => D#772
  # DEBUG __result => NULL
  # DEBUG D.73234 => D#457
  # DEBUG __first => D#771
  # DEBUG __last => D#772
  # DEBUG __result => NULL
  # DEBUG __assignable => 1
  # DEBUG __first => D#771
  # DEBUG __last => D#772
  # DEBUG __result => NULL
  # DEBUG __first => D#771
  # DEBUG __last => D#772
  # DEBUG __result => NULL
  # DEBUG __it => D#772
  # DEBUG __it$_M_current => D#772
  # DEBUG __it => D#771
  # DEBUG __it$_M_current => D#771
  # DEBUG __first => D#771
  # DEBUG __last => D#772
  # DEBUG __result => NULL
  # DEBUG __it => NULL
  # DEBUG __it => NULL
  # DEBUG __it => D#772
  # DEBUG __it => D#772
  # DEBUG this => NULL
  # DEBUG __it => D#771
  # DEBUG __it => D#771
  # DEBUG this => NULL
  # DEBUG __first => D#771
  # DEBUG __last => D#772
  # DEBUG __result => NULL
  # DEBUG __simple => 1
  # DEBUG __first => D#771
  # DEBUG __last => D#772
  # DEBUG __result => NULL
  # DEBUG D#770 => (long int) D#772
  # DEBUG D#769 => (long int) D#771
  # DEBUG D#768 => D#770 - D#769
  # DEBUG _Num => D#768 /[ex] 8
  if (prephitmp_713 != 0)
    goto <bb 52>;
  else
    goto <bb 51>;

  <bb 51>:
  _78 = this_19(D)->channelWirePower;
  _79 = this_19(D)->channelClkPower;
  # DEBUG D#806 => _78 + _79
  _81 = this_19(D)->channelDFFPower;
  # DEBUG D#805 => D#806 + _81
  _83 = this_19(D)->channelLeakPower;
  # DEBUG D#804 => D#805 + _83
  _85 = this_19(D)->inputReadPower;
  # DEBUG D#803 => D#804 + _85
  _87 = this_19(D)->inputWritePower;
  # DEBUG D#802 => D#803 + _87
  _89 = this_19(D)->inputLeakagePower;
  # DEBUG D#801 => D#802 + _89
  _91 = this_19(D)->switchPower;
  # DEBUG D#800 => D#801 + _91
  _93 = this_19(D)->switchPowerCtrl;
  # DEBUG D#799 => D#800 + _93
  _95 = this_19(D)->switchPowerLeak;
  # DEBUG D#798 => D#799 + _95
  _97 = this_19(D)->outputPower;
  # DEBUG D#797 => D#798 + _97
  _99 = this_19(D)->outputPowerClk;
  # DEBUG D#796 => D#797 + _99
  _101 = this_19(D)->outputCtrlPower;
  # DEBUG D#795 => D#796 + _101
  # DEBUG totalpower => D#795
  _103 = this_19(D)->channelArea;
  _104 = this_19(D)->switchArea;
  # DEBUG D#794 => _103 + _104
  _106 = this_19(D)->inputArea;
  # DEBUG D#793 => D#794 + _106
  _108 = this_19(D)->outputArea;
  # DEBUG D#792 => D#793 + _108
  # DEBUG totalarea => D#792
  # DEBUG __s => "-----------------------------------------\n"
  # DEBUG __out => &cout
  # DEBUG __s => "-----------------------------------------\n"
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "-----------------------------------------\n", 42);
  goto <bb 62>;

  <bb 52>:
  _386 = (long unsigned int) prephitmp_711;
  __builtin_memmove (iftmp.45_390, prephitmp_705, _386);
  # DEBUG i => 0
  # DEBUG D#20 => &routers
  # DEBUG D#20 => &routers
  # DEBUG this => D#20
  # DEBUG this => D#20
  _195 = (size_type) prephitmp_713;
  if (_195 != 0)
    goto <bb 53>;
  else
    goto <bb 51>;

  <bb 53>:

  <bb 54>:
  # i_316 = PHI <0(53), i_77(60)>
  # DEBUG i => i_316
  # DEBUG D#20 => &routers
  # DEBUG this => D#20
  # DEBUG this => D#20
  # DEBUG D#16 => &routers
  # DEBUG __n => i_316
  # DEBUG this => D#16
  _207 = i_316 * 8;
  _208 = iftmp.45_390 + _207;
  _71 = *_208;
  if (_71 == 0B)
    goto <bb 56>;
  else
    goto <bb 55>;

  <bb 55>:
  temp_72 = __dynamic_cast (_71, &_ZTI6Router, &_ZTI8IQRouter, 0);

  <bb 56>:
  # temp_5 = PHI <0B(54), temp_72(55)>
  # DEBUG temp => temp_5
  _194 = MEM[(struct BufferMonitor * *)temp_5 + 1232B];
  # DEBUG D#14 => temp_5
  # DEBUG this => D#14
  # DEBUG bm => NULL
  Power_Module::calcBuffer (this_19(D), _194);

  <bb 57>:
  _193 = MEM[(struct SwitchMonitor * *)temp_5 + 1224B];
  # DEBUG D#13 => temp_5
  # DEBUG this => D#13
  # DEBUG sm => NULL
  Power_Module::calcSwitch (this_19(D), _193);
  goto <bb 59>;

<L30>:
  goto <bb 223> (<L15>);

  <bb 59>:
  i_77 = i_316 + 1;
  # DEBUG i => i_77
  # DEBUG i => i_77
  # DEBUG D#20 => &routers
  # DEBUG D#20 => &routers
  # DEBUG this => D#20
  # DEBUG this => D#20
  if (i_77 < _195)
    goto <bb 60>;
  else
    goto <bb 51>;

  <bb 60>:
  goto <bb 54>;

<L31>:
  goto <bb 223> (<L15>);

  <bb 62>:
  # DEBUG __s => "- OCN Power Summary\n"
  # DEBUG __out => &cout
  # DEBUG __s => "- OCN Power Summary\n"
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- OCN Power Summary\n", 20);
  goto <bb 64>;

<L32>:
  goto <bb 223> (<L15>);

  <bb 64>:
  _112 = this_19(D)->totalTime;
  # DEBUG __out => &cout
  # DEBUG __s => "- Completion Time:         "
  # DEBUG __s => "- Completion Time:         "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- Completion Time:         ", 27);
  goto <bb 66>;

<L33>:
  goto <bb 223> (<L15>);

  <bb 66>:
  # DEBUG this => &cout
  # DEBUG __f => _112
  _113 = std::basic_ostream<char>::_M_insert<double> (&cout, _112);
  goto <bb 68>;

<L34>:
  goto <bb 223> (<L15>);

  <bb 68>:
  # DEBUG __out => _113
  # DEBUG __s => "\n"
  # DEBUG __s => "\n"
  std::__ostream_insert<char, std::char_traits<char> > (_113, "\n", 1);
  goto <bb 70>;

<L35>:
  goto <bb 223> (<L15>);

  <bb 70>:
  _115 = this_19(D)->channel_width;
  # DEBUG __out => &cout
  # DEBUG __s => "- Flit Widths:            "
  # DEBUG __s => "- Flit Widths:            "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- Flit Widths:            ", 26);
  goto <bb 72>;

<L36>:
  goto <bb 223> (<L15>);

  <bb 72>:
  # DEBUG this => &cout
  # DEBUG __f => _115
  _116 = std::basic_ostream<char>::_M_insert<double> (&cout, _115);
  goto <bb 74>;

<L37>:
  goto <bb 223> (<L15>);

  <bb 74>:
  # DEBUG __out => _116
  # DEBUG __s => "\n"
  # DEBUG __s => "\n"
  std::__ostream_insert<char, std::char_traits<char> > (_116, "\n", 1);
  goto <bb 76>;

<L38>:
  goto <bb 223> (<L15>);

  <bb 76>:
  _118 = this_19(D)->channelWirePower;
  # DEBUG __out => &cout
  # DEBUG __s => "- Channel Wire Power:      "
  # DEBUG __s => "- Channel Wire Power:      "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- Channel Wire Power:      ", 27);
  goto <bb 78>;

<L39>:
  goto <bb 223> (<L15>);

  <bb 78>:
  # DEBUG this => &cout
  # DEBUG __f => _118
  _119 = std::basic_ostream<char>::_M_insert<double> (&cout, _118);
  goto <bb 80>;

<L40>:
  goto <bb 223> (<L15>);

  <bb 80>:
  # DEBUG __out => _119
  # DEBUG __s => "\n"
  # DEBUG __s => "\n"
  std::__ostream_insert<char, std::char_traits<char> > (_119, "\n", 1);
  goto <bb 82>;

<L41>:
  goto <bb 223> (<L15>);

  <bb 82>:
  _121 = this_19(D)->channelClkPower;
  # DEBUG __out => &cout
  # DEBUG __s => "- Channel Clock Power:     "
  # DEBUG __s => "- Channel Clock Power:     "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- Channel Clock Power:     ", 27);
  goto <bb 84>;

<L42>:
  goto <bb 223> (<L15>);

  <bb 84>:
  # DEBUG this => &cout
  # DEBUG __f => _121
  _122 = std::basic_ostream<char>::_M_insert<double> (&cout, _121);
  goto <bb 86>;

<L43>:
  goto <bb 223> (<L15>);

  <bb 86>:
  # DEBUG __out => _122
  # DEBUG __s => "\n"
  # DEBUG __s => "\n"
  std::__ostream_insert<char, std::char_traits<char> > (_122, "\n", 1);
  goto <bb 88>;

<L44>:
  goto <bb 223> (<L15>);

  <bb 88>:
  _124 = this_19(D)->channelDFFPower;
  # DEBUG __out => &cout
  # DEBUG __s => "- Channel Retiming Power:  "
  # DEBUG __s => "- Channel Retiming Power:  "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- Channel Retiming Power:  ", 27);
  goto <bb 90>;

<L45>:
  goto <bb 223> (<L15>);

  <bb 90>:
  # DEBUG this => &cout
  # DEBUG __f => _124
  _125 = std::basic_ostream<char>::_M_insert<double> (&cout, _124);
  goto <bb 92>;

<L46>:
  goto <bb 223> (<L15>);

  <bb 92>:
  # DEBUG __out => _125
  # DEBUG __s => "\n"
  # DEBUG __s => "\n"
  std::__ostream_insert<char, std::char_traits<char> > (_125, "\n", 1);
  goto <bb 94>;

<L47>:
  goto <bb 223> (<L15>);

  <bb 94>:
  _127 = this_19(D)->channelLeakPower;
  # DEBUG __out => &cout
  # DEBUG __s => "- Channel Leakage Power:   "
  # DEBUG __s => "- Channel Leakage Power:   "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- Channel Leakage Power:   ", 27);
  goto <bb 96>;

<L48>:
  goto <bb 223> (<L15>);

  <bb 96>:
  # DEBUG this => &cout
  # DEBUG __f => _127
  _128 = std::basic_ostream<char>::_M_insert<double> (&cout, _127);
  goto <bb 98>;

<L49>:
  goto <bb 223> (<L15>);

  <bb 98>:
  # DEBUG __out => _128
  # DEBUG __s => "\n"
  # DEBUG __s => "\n"
  std::__ostream_insert<char, std::char_traits<char> > (_128, "\n", 1);
  goto <bb 100>;

<L50>:
  goto <bb 223> (<L15>);

  <bb 100>:
  _130 = this_19(D)->inputReadPower;
  # DEBUG __out => &cout
  # DEBUG __s => "- Input Read Power:        "
  # DEBUG __s => "- Input Read Power:        "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- Input Read Power:        ", 27);
  goto <bb 102>;

<L51>:
  goto <bb 223> (<L15>);

  <bb 102>:
  # DEBUG this => &cout
  # DEBUG __f => _130
  _131 = std::basic_ostream<char>::_M_insert<double> (&cout, _130);
  goto <bb 104>;

<L52>:
  goto <bb 223> (<L15>);

  <bb 104>:
  # DEBUG __out => _131
  # DEBUG __s => "\n"
  # DEBUG __s => "\n"
  std::__ostream_insert<char, std::char_traits<char> > (_131, "\n", 1);
  goto <bb 106>;

<L53>:
  goto <bb 223> (<L15>);

  <bb 106>:
  _133 = this_19(D)->inputWritePower;
  # DEBUG __out => &cout
  # DEBUG __s => "- Input Write Power:       "
  # DEBUG __s => "- Input Write Power:       "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- Input Write Power:       ", 27);
  goto <bb 108>;

<L54>:
  goto <bb 223> (<L15>);

  <bb 108>:
  # DEBUG this => &cout
  # DEBUG __f => _133
  _134 = std::basic_ostream<char>::_M_insert<double> (&cout, _133);
  goto <bb 110>;

<L55>:
  goto <bb 223> (<L15>);

  <bb 110>:
  # DEBUG __out => _134
  # DEBUG __s => "\n"
  # DEBUG __s => "\n"
  std::__ostream_insert<char, std::char_traits<char> > (_134, "\n", 1);
  goto <bb 112>;

<L56>:
  goto <bb 223> (<L15>);

  <bb 112>:
  _136 = this_19(D)->inputLeakagePower;
  # DEBUG __out => &cout
  # DEBUG __s => "- Input Leakage Power:     "
  # DEBUG __s => "- Input Leakage Power:     "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- Input Leakage Power:     ", 27);
  goto <bb 114>;

<L57>:
  goto <bb 223> (<L15>);

  <bb 114>:
  # DEBUG this => &cout
  # DEBUG __f => _136
  _137 = std::basic_ostream<char>::_M_insert<double> (&cout, _136);
  goto <bb 116>;

<L58>:
  goto <bb 223> (<L15>);

  <bb 116>:
  # DEBUG __out => _137
  # DEBUG __s => "\n"
  # DEBUG __s => "\n"
  std::__ostream_insert<char, std::char_traits<char> > (_137, "\n", 1);
  goto <bb 118>;

<L59>:
  goto <bb 223> (<L15>);

  <bb 118>:
  _139 = this_19(D)->switchPower;
  # DEBUG __out => &cout
  # DEBUG __s => "- Switch Power:            "
  # DEBUG __s => "- Switch Power:            "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- Switch Power:            ", 27);
  goto <bb 120>;

<L60>:
  goto <bb 223> (<L15>);

  <bb 120>:
  # DEBUG this => &cout
  # DEBUG __f => _139
  _140 = std::basic_ostream<char>::_M_insert<double> (&cout, _139);
  goto <bb 122>;

<L61>:
  goto <bb 223> (<L15>);

  <bb 122>:
  # DEBUG __out => _140
  # DEBUG __s => "\n"
  # DEBUG __s => "\n"
  std::__ostream_insert<char, std::char_traits<char> > (_140, "\n", 1);
  goto <bb 124>;

<L62>:
  goto <bb 223> (<L15>);

  <bb 124>:
  _142 = this_19(D)->switchPowerCtrl;
  # DEBUG __out => &cout
  # DEBUG __s => "- Switch Control Power:    "
  # DEBUG __s => "- Switch Control Power:    "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- Switch Control Power:    ", 27);
  goto <bb 126>;

<L63>:
  goto <bb 223> (<L15>);

  <bb 126>:
  # DEBUG this => &cout
  # DEBUG __f => _142
  _143 = std::basic_ostream<char>::_M_insert<double> (&cout, _142);
  goto <bb 128>;

<L64>:
  goto <bb 223> (<L15>);

  <bb 128>:
  # DEBUG __out => _143
  # DEBUG __s => "\n"
  # DEBUG __s => "\n"
  std::__ostream_insert<char, std::char_traits<char> > (_143, "\n", 1);
  goto <bb 130>;

<L65>:
  goto <bb 223> (<L15>);

  <bb 130>:
  _145 = this_19(D)->switchPowerLeak;
  # DEBUG __out => &cout
  # DEBUG __s => "- Switch Leakage Power:    "
  # DEBUG __s => "- Switch Leakage Power:    "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- Switch Leakage Power:    ", 27);
  goto <bb 132>;

<L66>:
  goto <bb 223> (<L15>);

  <bb 132>:
  # DEBUG this => &cout
  # DEBUG __f => _145
  _146 = std::basic_ostream<char>::_M_insert<double> (&cout, _145);
  goto <bb 134>;

<L67>:
  goto <bb 223> (<L15>);

  <bb 134>:
  # DEBUG __out => _146
  # DEBUG __s => "\n"
  # DEBUG __s => "\n"
  std::__ostream_insert<char, std::char_traits<char> > (_146, "\n", 1);
  goto <bb 136>;

<L68>:
  goto <bb 223> (<L15>);

  <bb 136>:
  _148 = this_19(D)->outputPower;
  # DEBUG __out => &cout
  # DEBUG __s => "- Output DFF Power:        "
  # DEBUG __s => "- Output DFF Power:        "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- Output DFF Power:        ", 27);
  goto <bb 138>;

<L69>:
  goto <bb 223> (<L15>);

  <bb 138>:
  # DEBUG this => &cout
  # DEBUG __f => _148
  _149 = std::basic_ostream<char>::_M_insert<double> (&cout, _148);
  goto <bb 140>;

<L70>:
  goto <bb 223> (<L15>);

  <bb 140>:
  # DEBUG __out => _149
  # DEBUG __s => "\n"
  # DEBUG __s => "\n"
  std::__ostream_insert<char, std::char_traits<char> > (_149, "\n", 1);
  goto <bb 142>;

<L71>:
  goto <bb 223> (<L15>);

  <bb 142>:
  _151 = this_19(D)->outputPowerClk;
  # DEBUG __out => &cout
  # DEBUG __s => "- Output Clk Power:        "
  # DEBUG __s => "- Output Clk Power:        "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- Output Clk Power:        ", 27);
  goto <bb 144>;

<L72>:
  goto <bb 223> (<L15>);

  <bb 144>:
  # DEBUG this => &cout
  # DEBUG __f => _151
  _152 = std::basic_ostream<char>::_M_insert<double> (&cout, _151);
  goto <bb 146>;

<L73>:
  goto <bb 223> (<L15>);

  <bb 146>:
  # DEBUG __out => _152
  # DEBUG __s => "\n"
  # DEBUG __s => "\n"
  std::__ostream_insert<char, std::char_traits<char> > (_152, "\n", 1);
  goto <bb 148>;

<L74>:
  goto <bb 223> (<L15>);

  <bb 148>:
  _154 = this_19(D)->outputCtrlPower;
  # DEBUG __out => &cout
  # DEBUG __s => "- Output Control Power:    "
  # DEBUG __s => "- Output Control Power:    "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- Output Control Power:    ", 27);
  goto <bb 150>;

<L75>:
  goto <bb 223> (<L15>);

  <bb 150>:
  # DEBUG this => &cout
  # DEBUG __f => _154
  _155 = std::basic_ostream<char>::_M_insert<double> (&cout, _154);
  goto <bb 152>;

<L76>:
  goto <bb 223> (<L15>);

  <bb 152>:
  # DEBUG __out => _155
  # DEBUG __s => "\n"
  # DEBUG __s => "\n"
  std::__ostream_insert<char, std::char_traits<char> > (_155, "\n", 1);
  goto <bb 154>;

<L77>:
  goto <bb 223> (<L15>);

  <bb 154>:
  # DEBUG __out => &cout
  # DEBUG __s => "- Total Power:             "
  # DEBUG __s => "- Total Power:             "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- Total Power:             ", 27);
  goto <bb 156>;

<L78>:
  goto <bb 223> (<L15>);

  <bb 156>:
  # DEBUG this => &cout
  # DEBUG __f => D#795
  _80 = _78 + _79;
  _82 = _80 + _81;
  _84 = _82 + _83;
  _86 = _84 + _85;
  _88 = _86 + _87;
  _90 = _88 + _89;
  _92 = _90 + _91;
  _94 = _92 + _93;
  _96 = _94 + _95;
  _98 = _96 + _97;
  _100 = _98 + _99;
  totalpower_102 = _100 + _101;
  _157 = std::basic_ostream<char>::_M_insert<double> (&cout, totalpower_102);
  goto <bb 158>;

<L79>:
  goto <bb 223> (<L15>);

  <bb 158>:
  # DEBUG __out => _157
  # DEBUG __s => "\n"
  # DEBUG __s => "\n"
  std::__ostream_insert<char, std::char_traits<char> > (_157, "\n", 1);
  goto <bb 160>;

<L80>:
  goto <bb 223> (<L15>);

  <bb 160>:
  # DEBUG __s => "-----------------------------------------\n"
  # DEBUG __out => &cout
  # DEBUG __s => "-----------------------------------------\n"
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "-----------------------------------------\n", 42);
  goto <bb 162>;

<L81>:
  goto <bb 223> (<L15>);

  <bb 162>:
  # DEBUG __s => "\n"
  # DEBUG __out => &cout
  # DEBUG __s => "\n"
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "\n", 1);
  goto <bb 164>;

<L82>:
  goto <bb 223> (<L15>);

  <bb 164>:
  # DEBUG __s => "-----------------------------------------\n"
  # DEBUG __out => &cout
  # DEBUG __s => "-----------------------------------------\n"
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "-----------------------------------------\n", 42);
  goto <bb 166>;

<L83>:
  goto <bb 223> (<L15>);

  <bb 166>:
  # DEBUG __s => "- OCN Area Summary\n"
  # DEBUG __out => &cout
  # DEBUG __s => "- OCN Area Summary\n"
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- OCN Area Summary\n", 19);
  goto <bb 168>;

<L84>:
  goto <bb 223> (<L15>);

  <bb 168>:
  _163 = this_19(D)->channelArea;
  # DEBUG __out => &cout
  # DEBUG __s => "- Channel Area:  "
  # DEBUG __s => "- Channel Area:  "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- Channel Area:  ", 17);
  goto <bb 170>;

<L85>:
  goto <bb 223> (<L15>);

  <bb 170>:
  # DEBUG this => &cout
  # DEBUG __f => _163
  _164 = std::basic_ostream<char>::_M_insert<double> (&cout, _163);
  goto <bb 172>;

<L86>:
  goto <bb 223> (<L15>);

  <bb 172>:
  # DEBUG __out => _164
  # DEBUG __s => "\n"
  # DEBUG __s => "\n"
  std::__ostream_insert<char, std::char_traits<char> > (_164, "\n", 1);
  goto <bb 174>;

<L87>:
  goto <bb 223> (<L15>);

  <bb 174>:
  _166 = this_19(D)->switchArea;
  # DEBUG __out => &cout
  # DEBUG __s => "- Switch  Area:  "
  # DEBUG __s => "- Switch  Area:  "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- Switch  Area:  ", 17);
  goto <bb 176>;

<L88>:
  goto <bb 223> (<L15>);

  <bb 176>:
  # DEBUG this => &cout
  # DEBUG __f => _166
  _167 = std::basic_ostream<char>::_M_insert<double> (&cout, _166);
  goto <bb 178>;

<L89>:
  goto <bb 223> (<L15>);

  <bb 178>:
  # DEBUG __out => _167
  # DEBUG __s => "\n"
  # DEBUG __s => "\n"
  std::__ostream_insert<char, std::char_traits<char> > (_167, "\n", 1);
  goto <bb 180>;

<L90>:
  goto <bb 223> (<L15>);

  <bb 180>:
  _169 = this_19(D)->inputArea;
  # DEBUG __out => &cout
  # DEBUG __s => "- Input  Area:   "
  # DEBUG __s => "- Input  Area:   "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- Input  Area:   ", 17);
  goto <bb 182>;

<L91>:
  goto <bb 223> (<L15>);

  <bb 182>:
  # DEBUG this => &cout
  # DEBUG __f => _169
  _170 = std::basic_ostream<char>::_M_insert<double> (&cout, _169);
  goto <bb 184>;

<L92>:
  goto <bb 223> (<L15>);

  <bb 184>:
  # DEBUG __out => _170
  # DEBUG __s => "\n"
  # DEBUG __s => "\n"
  std::__ostream_insert<char, std::char_traits<char> > (_170, "\n", 1);
  goto <bb 186>;

<L93>:
  goto <bb 223> (<L15>);

  <bb 186>:
  _172 = this_19(D)->outputArea;
  # DEBUG __out => &cout
  # DEBUG __s => "- Output  Area:  "
  # DEBUG __s => "- Output  Area:  "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- Output  Area:  ", 17);
  goto <bb 188>;

<L94>:
  goto <bb 223> (<L15>);

  <bb 188>:
  # DEBUG this => &cout
  # DEBUG __f => _172
  _173 = std::basic_ostream<char>::_M_insert<double> (&cout, _172);
  goto <bb 190>;

<L95>:
  goto <bb 223> (<L15>);

  <bb 190>:
  # DEBUG __out => _173
  # DEBUG __s => "\n"
  # DEBUG __s => "\n"
  std::__ostream_insert<char, std::char_traits<char> > (_173, "\n", 1);
  goto <bb 192>;

<L96>:
  goto <bb 223> (<L15>);

  <bb 192>:
  # DEBUG __out => &cout
  # DEBUG __s => "- Total Area:    "
  # DEBUG __s => "- Total Area:    "
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "- Total Area:    ", 17);
  goto <bb 194>;

<L97>:
  goto <bb 223> (<L15>);

  <bb 194>:
  # DEBUG this => &cout
  # DEBUG __f => D#792
  _105 = _103 + _104;
  _107 = _105 + _106;
  totalarea_109 = _107 + _108;
  _175 = std::basic_ostream<char>::_M_insert<double> (&cout, totalarea_109);
  goto <bb 196>;

<L98>:
  goto <bb 223> (<L15>);

  <bb 196>:
  # DEBUG this => _175
  # DEBUG __pf => endl
  # DEBUG __os => _175
  _174 = MEM[(struct basic_ostream *)_175]._vptr.basic_ostream;
  _466 = MEM[(long int *)_174 + -24B];
  _467 = (sizetype) _466;
  _468 = _175 + _467;
  # DEBUG this => _468
  # DEBUG __c => 10
  _258 = MEM[(const struct basic_ios *)_468]._M_ctype;
  # DEBUG __f => _258
  if (_258 == 0B)
    goto <bb 197>;
  else
    goto <bb 199>;

  <bb 197>:
  std::__throw_bad_cast ();

<L99>:
  goto <bb 223> (<L15>);

  <bb 199>:
  # DEBUG this => _258
  # DEBUG __c => 10
  _473 = MEM[(const struct ctype *)_258]._M_widen_ok;
  if (_473 != 0)
    goto <bb 200>;
  else
    goto <bb 201>;

  <bb 200>:
  _476 = MEM[(const struct ctype *)_258]._M_widen[10];
  pretmp_714 = (int) _476;
  goto <bb 207>;

  <bb 201>:
  # DEBUG this => _258
  # DEBUG __c => 10
  std::ctype<char>::_M_widen_init (_258);
  goto <bb 203>;

<L100>:
  goto <bb 223> (<L15>);

  <bb 203>:
  _481 = MEM[(const struct ctype *)_258].D.22387._vptr.facet;
  _482 = MEM[(int (*__vtbl_ptr_type) () *)_481 + 48B];
  PROF_486 = [obj_type_ref] OBJ_TYPE_REF(_482;(const struct ctype)_258->6);
  if (PROF_486 == do_widen)
    goto <bb 207>;
  else
    goto <bb 204>;

  <bb 204>:
  _488 = OBJ_TYPE_REF(_482;(const struct ctype)_258->6) (_258, 10);
  goto <bb 206>;

<L101>:
  goto <bb 223> (<L15>);

  <bb 206>:
  pretmp_715 = (int) _488;

  <bb 207>:
  # prephitmp_716 = PHI <pretmp_714(200), 10(203), pretmp_715(206)>
  _471 = std::basic_ostream<char>::put (_175, prephitmp_716);
  goto <bb 209>;

<L102>:
  goto <bb 223> (<L15>);

  <bb 209>:
  # DEBUG __os => _471
  std::basic_ostream<char>::flush (_471);
  goto <bb 211>;

<L103>:
  goto <bb 223> (<L15>);

  <bb 211>:
  # DEBUG __s => "-----------------------------------------\n"
  # DEBUG __out => &cout
  # DEBUG __s => "-----------------------------------------\n"
  std::__ostream_insert<char, std::char_traits<char> > (&cout, "-----------------------------------------\n", 42);
  goto <bb 213>;

<L104>:
  goto <bb 223> (<L15>);

  <bb 213>:
  # DEBUG this => &routers
  # DEBUG D#237 => &routers.D.42816
  # DEBUG this => D#237
  # DEBUG D#240 => routers.D.42816._M_impl._M_finish
  # DEBUG D#239 => routers.D.42816._M_impl._M_start
  # DEBUG D#108 => D#239
  # DEBUG D#109 => D#240
  # DEBUG __first => D#108
  # DEBUG __last => D#109
  # DEBUG D.64394 => D#110
  # DEBUG D#107 => D#109
  # DEBUG D#106 => D#108
  # DEBUG D#104 => D#106
  # DEBUG D#105 => D#107
  # DEBUG __first => D#104
  # DEBUG __last => D#105
  # DEBUG D#103 => D#105
  # DEBUG D#102 => D#104
  # DEBUG D#100 => D#102
  # DEBUG D#101 => D#103
  # DEBUG D.63647 => D#100
  # DEBUG D.63646 => D#101
  # DEBUG D#238 => &routers.D.42816
  # DEBUG this => D#238
  # DEBUG D#236 => D#238->_M_impl._M_end_of_storage
  # DEBUG D#235 => (long int) D#236
  # DEBUG D#234 => (long int) iftmp.45_390
  # DEBUG D#233 => D#235 - D#234
  # DEBUG D#232 => D#233 /[ex] 8
  # DEBUG D#229 => D#238
  # DEBUG D#230 => (long unsigned int) D#232
  # DEBUG __p => iftmp.45_390
  # DEBUG this => D#229
  # DEBUG __n => D#230
  # DEBUG D#228 => D#230
  # DEBUG D#227 => D#229
  if (iftmp.45_390 != 0B)
    goto <bb 214>;
  else
    goto <bb 215>;

  <bb 214>:
  # DEBUG D#226 => &D#227->_M_impl
  # DEBUG D#224 => D#226
  # DEBUG D#225 => D#228
  # DEBUG __p => iftmp.45_390
  # DEBUG __a => D#224
  # DEBUG __n => D#225
  # DEBUG D#223 => D#225
  # DEBUG D#222 => D#224
  # DEBUG D#220 => D#222
  # DEBUG D#221 => D#223
  # DEBUG __p => iftmp.45_390
  # DEBUG this => D#220
  # DEBUG D.68941 => D#221
  operator delete (iftmp.45_390);

  <bb 215>:
  # DEBUG D#231 => &D#238->_M_impl
  # DEBUG this => D#231
  # DEBUG this => D#231
  # DEBUG this => D#231
  MEM[(struct  &)&routers] ={v} {CLOBBER};
  # DEBUG this => &chan
  # DEBUG D#216 => &chan.D.40296
  # DEBUG this => D#216
  # DEBUG D#219 => chan.D.40296._M_impl._M_finish
  # DEBUG D#218 => chan.D.40296._M_impl._M_start
  # DEBUG D#97 => D#218
  # DEBUG D#98 => D#219
  # DEBUG __first => D#97
  # DEBUG __last => D#98
  # DEBUG D.64307 => D#99
  # DEBUG D#96 => D#98
  # DEBUG D#95 => D#97
  # DEBUG D#93 => D#95
  # DEBUG D#94 => D#96
  # DEBUG __first => D#93
  # DEBUG __last => D#94
  # DEBUG D#92 => D#94
  # DEBUG D#91 => D#93
  # DEBUG D#89 => D#91
  # DEBUG D#90 => D#92
  # DEBUG D.63609 => D#89
  # DEBUG D.63608 => D#90
  # DEBUG D#217 => &chan.D.40296
  # DEBUG this => D#217
  # DEBUG D#215 => D#217->_M_impl._M_end_of_storage
  # DEBUG D#214 => (long int) D#215
  # DEBUG D#213 => (long int) chan$_M_impl$_M_start_369
  # DEBUG D#212 => D#214 - D#213
  # DEBUG D#211 => D#212 /[ex] 8
  # DEBUG D#208 => D#217
  # DEBUG D#209 => (long unsigned int) D#211
  # DEBUG __p => chan$_M_impl$_M_start_369
  # DEBUG this => D#208
  # DEBUG __n => D#209
  # DEBUG D#207 => D#209
  # DEBUG D#206 => D#208
  if (chan$_M_impl$_M_start_369 != 0B)
    goto <bb 216>;
  else
    goto <bb 217>;

  <bb 216>:
  # DEBUG D#205 => &D#206->_M_impl
  # DEBUG D#203 => D#205
  # DEBUG D#204 => D#207
  # DEBUG __p => chan$_M_impl$_M_start_369
  # DEBUG __a => D#203
  # DEBUG __n => D#204
  # DEBUG D#202 => D#204
  # DEBUG D#201 => D#203
  # DEBUG D#199 => D#201
  # DEBUG D#200 => D#202
  # DEBUG __p => chan$_M_impl$_M_start_369
  # DEBUG this => D#199
  # DEBUG D.68926 => D#200
  operator delete (chan$_M_impl$_M_start_369);

  <bb 217>:
  # DEBUG D#210 => &D#217->_M_impl
  # DEBUG this => D#210
  # DEBUG this => D#210
  # DEBUG this => D#210
  MEM[(struct  &)&chan] ={v} {CLOBBER};
  # DEBUG this => &eject
  # DEBUG D#216 => &eject.D.40296
  # DEBUG this => D#216
  # DEBUG D#219 => eject.D.40296._M_impl._M_finish
  # DEBUG D#218 => eject.D.40296._M_impl._M_start
  # DEBUG D#97 => D#218
  # DEBUG D#98 => D#219
  # DEBUG __first => D#97
  # DEBUG __last => D#98
  # DEBUG D.64307 => D#99
  # DEBUG D#96 => D#98
  # DEBUG D#95 => D#97
  # DEBUG D#93 => D#95
  # DEBUG D#94 => D#96
  # DEBUG __first => D#93
  # DEBUG __last => D#94
  # DEBUG D#92 => D#94
  # DEBUG D#91 => D#93
  # DEBUG D#89 => D#91
  # DEBUG D#90 => D#92
  # DEBUG D.63609 => D#89
  # DEBUG D.63608 => D#90
  # DEBUG D#217 => &eject.D.40296
  # DEBUG this => D#217
  # DEBUG D#215 => D#217->_M_impl._M_end_of_storage
  # DEBUG D#214 => (long int) D#215
  # DEBUG D#213 => (long int) eject$_M_impl$_M_start_348
  # DEBUG D#212 => D#214 - D#213
  # DEBUG D#211 => D#212 /[ex] 8
  # DEBUG D#208 => D#217
  # DEBUG D#209 => (long unsigned int) D#211
  # DEBUG __p => eject$_M_impl$_M_start_348
  # DEBUG this => D#208
  # DEBUG __n => D#209
  # DEBUG D#207 => D#209
  # DEBUG D#206 => D#208
  if (eject$_M_impl$_M_start_348 != 0B)
    goto <bb 218>;
  else
    goto <bb 219>;

  <bb 218>:
  # DEBUG D#205 => &D#206->_M_impl
  # DEBUG D#203 => D#205
  # DEBUG D#204 => D#207
  # DEBUG __p => eject$_M_impl$_M_start_348
  # DEBUG __a => D#203
  # DEBUG __n => D#204
  # DEBUG D#202 => D#204
  # DEBUG D#201 => D#203
  # DEBUG D#199 => D#201
  # DEBUG D#200 => D#202
  # DEBUG __p => eject$_M_impl$_M_start_348
  # DEBUG this => D#199
  # DEBUG D.68911 => D#200
  operator delete (eject$_M_impl$_M_start_348);

  <bb 219>:
  # DEBUG D#210 => &D#217->_M_impl
  # DEBUG this => D#210
  # DEBUG this => D#210
  # DEBUG this => D#210
  MEM[(struct  &)&eject] ={v} {CLOBBER};
  # DEBUG this => &inject
  # DEBUG D#216 => &inject.D.40296
  # DEBUG this => D#216
  # DEBUG D#219 => inject.D.40296._M_impl._M_finish
  # DEBUG D#218 => inject.D.40296._M_impl._M_start
  # DEBUG D#97 => D#218
  # DEBUG D#98 => D#219
  # DEBUG __first => D#97
  # DEBUG __last => D#98
  # DEBUG D.64307 => D#99
  # DEBUG D#96 => D#98
  # DEBUG D#95 => D#97
  # DEBUG D#93 => D#95
  # DEBUG D#94 => D#96
  # DEBUG __first => D#93
  # DEBUG __last => D#94
  # DEBUG D#92 => D#94
  # DEBUG D#91 => D#93
  # DEBUG D#89 => D#91
  # DEBUG D#90 => D#92
  # DEBUG D.63609 => D#89
  # DEBUG D.63608 => D#90
  # DEBUG D#217 => &inject.D.40296
  # DEBUG this => D#217
  # DEBUG D#215 => D#217->_M_impl._M_end_of_storage
  # DEBUG D#214 => (long int) D#215
  # DEBUG D#213 => (long int) inject$_M_impl$_M_start_345
  # DEBUG D#212 => D#214 - D#213
  # DEBUG D#211 => D#212 /[ex] 8
  # DEBUG D#208 => D#217
  # DEBUG D#209 => (long unsigned int) D#211
  # DEBUG __p => inject$_M_impl$_M_start_345
  # DEBUG this => D#208
  # DEBUG __n => D#209
  # DEBUG D#207 => D#209
  # DEBUG D#206 => D#208
  if (inject$_M_impl$_M_start_345 != 0B)
    goto <bb 220>;
  else
    goto <bb 221>;

  <bb 220>:
  # DEBUG D#205 => &D#206->_M_impl
  # DEBUG D#203 => D#205
  # DEBUG D#204 => D#207
  # DEBUG __p => inject$_M_impl$_M_start_345
  # DEBUG __a => D#203
  # DEBUG __n => D#204
  # DEBUG D#202 => D#204
  # DEBUG D#201 => D#203
  # DEBUG D#199 => D#201
  # DEBUG D#200 => D#202
  # DEBUG __p => inject$_M_impl$_M_start_345
  # DEBUG this => D#199
  # DEBUG D.68896 => D#200
  operator delete (inject$_M_impl$_M_start_345);

  <bb 221>:
  # DEBUG D#210 => &D#217->_M_impl
  # DEBUG this => D#210
  # DEBUG this => D#210
  # DEBUG this => D#210
  inject ={v} {CLOBBER};
  eject ={v} {CLOBBER};
  chan ={v} {CLOBBER};
  routers ={v} {CLOBBER};
  return;

<L29>:

<L15>:
  # DEBUG this => &routers
  # DEBUG D#237 => &routers.D.42816
  # DEBUG this => D#237
  # DEBUG D#240 => routers.D.42816._M_impl._M_finish
  # DEBUG D#239 => routers.D.42816._M_impl._M_start
  # DEBUG D#108 => D#239
  # DEBUG D#109 => D#240
  # DEBUG __first => D#108
  # DEBUG __last => D#109
  # DEBUG D.64394 => D#110
  # DEBUG D#107 => D#109
  # DEBUG D#106 => D#108
  # DEBUG D#104 => D#106
  # DEBUG D#105 => D#107
  # DEBUG __first => D#104
  # DEBUG __last => D#105
  # DEBUG D#103 => D#105
  # DEBUG D#102 => D#104
  # DEBUG D#100 => D#102
  # DEBUG D#101 => D#103
  # DEBUG D.63647 => D#100
  # DEBUG D.63646 => D#101
  # DEBUG D#238 => &routers.D.42816
  # DEBUG this => D#238
  # DEBUG D#236 => D#238->_M_impl._M_end_of_storage
  # DEBUG D#235 => (long int) D#236
  # DEBUG D#234 => (long int) iftmp.45_390
  # DEBUG D#233 => D#235 - D#234
  # DEBUG D#232 => D#233 /[ex] 8
  # DEBUG D#229 => D#238
  # DEBUG D#230 => (long unsigned int) D#232
  # DEBUG __p => iftmp.45_390
  # DEBUG this => D#229
  # DEBUG __n => D#230
  # DEBUG D#228 => D#230
  # DEBUG D#227 => D#229
  if (iftmp.45_390 != 0B)
    goto <bb 224>;
  else
    goto <bb 225>;

  <bb 224>:
  # DEBUG D#226 => &D#227->_M_impl
  # DEBUG D#224 => D#226
  # DEBUG D#225 => D#228
  # DEBUG __p => iftmp.45_390
  # DEBUG __a => D#224
  # DEBUG __n => D#225
  # DEBUG D#223 => D#225
  # DEBUG D#222 => D#224
  # DEBUG D#220 => D#222
  # DEBUG D#221 => D#223
  # DEBUG __p => iftmp.45_390
  # DEBUG this => D#220
  # DEBUG D.68956 => D#221
  operator delete (iftmp.45_390);

  <bb 225>:
  # DEBUG D#231 => &D#238->_M_impl
  # DEBUG this => D#231
  # DEBUG this => D#231
  # DEBUG this => D#231
  MEM[(struct  &)&routers] ={v} {CLOBBER};
  resx 5

<L105>:
  goto <bb 228> (<L16>);

<L24>:

<L16>:
  # DEBUG this => &chan
  # DEBUG D#216 => &chan.D.40296
  # DEBUG this => D#216
  # DEBUG D#219 => chan.D.40296._M_impl._M_finish
  # DEBUG D#218 => chan.D.40296._M_impl._M_start
  # DEBUG D#97 => D#218
  # DEBUG D#98 => D#219
  # DEBUG __first => D#97
  # DEBUG __last => D#98
  # DEBUG D.64307 => D#99
  # DEBUG D#96 => D#98
  # DEBUG D#95 => D#97
  # DEBUG D#93 => D#95
  # DEBUG D#94 => D#96
  # DEBUG __first => D#93
  # DEBUG __last => D#94
  # DEBUG D#92 => D#94
  # DEBUG D#91 => D#93
  # DEBUG D#89 => D#91
  # DEBUG D#90 => D#92
  # DEBUG D.63609 => D#89
  # DEBUG D.63608 => D#90
  # DEBUG D#217 => &chan.D.40296
  # DEBUG this => D#217
  # DEBUG D#215 => D#217->_M_impl._M_end_of_storage
  # DEBUG D#214 => (long int) D#215
  # DEBUG D#213 => (long int) chan$_M_impl$_M_start_369
  # DEBUG D#212 => D#214 - D#213
  # DEBUG D#211 => D#212 /[ex] 8
  # DEBUG D#208 => D#217
  # DEBUG D#209 => (long unsigned int) D#211
  # DEBUG __p => chan$_M_impl$_M_start_369
  # DEBUG this => D#208
  # DEBUG __n => D#209
  # DEBUG D#207 => D#209
  # DEBUG D#206 => D#208
  if (chan$_M_impl$_M_start_369 != 0B)
    goto <bb 229>;
  else
    goto <bb 230>;

  <bb 229>:
  # DEBUG D#205 => &D#206->_M_impl
  # DEBUG D#203 => D#205
  # DEBUG D#204 => D#207
  # DEBUG __p => chan$_M_impl$_M_start_369
  # DEBUG __a => D#203
  # DEBUG __n => D#204
  # DEBUG D#202 => D#204
  # DEBUG D#201 => D#203
  # DEBUG D#199 => D#201
  # DEBUG D#200 => D#202
  # DEBUG __p => chan$_M_impl$_M_start_369
  # DEBUG this => D#199
  # DEBUG D.68971 => D#200
  operator delete (chan$_M_impl$_M_start_369);

  <bb 230>:
  # DEBUG D#210 => &D#217->_M_impl
  # DEBUG this => D#210
  # DEBUG this => D#210
  # DEBUG this => D#210
  MEM[(struct  &)&chan] ={v} {CLOBBER};
  resx 4

<L106>:
  goto <bb 233> (<L17>);

<L22>:

<L17>:
  # DEBUG this => &eject
  # DEBUG D#216 => &eject.D.40296
  # DEBUG this => D#216
  # DEBUG D#219 => eject.D.40296._M_impl._M_finish
  # DEBUG D#218 => eject.D.40296._M_impl._M_start
  # DEBUG D#97 => D#218
  # DEBUG D#98 => D#219
  # DEBUG __first => D#97
  # DEBUG __last => D#98
  # DEBUG D.64307 => D#99
  # DEBUG D#96 => D#98
  # DEBUG D#95 => D#97
  # DEBUG D#93 => D#95
  # DEBUG D#94 => D#96
  # DEBUG __first => D#93
  # DEBUG __last => D#94
  # DEBUG D#92 => D#94
  # DEBUG D#91 => D#93
  # DEBUG D#89 => D#91
  # DEBUG D#90 => D#92
  # DEBUG D.63609 => D#89
  # DEBUG D.63608 => D#90
  # DEBUG D#217 => &eject.D.40296
  # DEBUG this => D#217
  # DEBUG D#215 => D#217->_M_impl._M_end_of_storage
  # DEBUG D#214 => (long int) D#215
  # DEBUG D#213 => (long int) eject$_M_impl$_M_start_348
  # DEBUG D#212 => D#214 - D#213
  # DEBUG D#211 => D#212 /[ex] 8
  # DEBUG D#208 => D#217
  # DEBUG D#209 => (long unsigned int) D#211
  # DEBUG __p => eject$_M_impl$_M_start_348
  # DEBUG this => D#208
  # DEBUG __n => D#209
  # DEBUG D#207 => D#209
  # DEBUG D#206 => D#208
  if (eject$_M_impl$_M_start_348 != 0B)
    goto <bb 234>;
  else
    goto <bb 235>;

  <bb 234>:
  # DEBUG D#205 => &D#206->_M_impl
  # DEBUG D#203 => D#205
  # DEBUG D#204 => D#207
  # DEBUG __p => eject$_M_impl$_M_start_348
  # DEBUG __a => D#203
  # DEBUG __n => D#204
  # DEBUG D#202 => D#204
  # DEBUG D#201 => D#203
  # DEBUG D#199 => D#201
  # DEBUG D#200 => D#202
  # DEBUG __p => eject$_M_impl$_M_start_348
  # DEBUG this => D#199
  # DEBUG D.68986 => D#200
  operator delete (eject$_M_impl$_M_start_348);

  <bb 235>:
  # DEBUG D#210 => &D#217->_M_impl
  # DEBUG this => D#210
  # DEBUG this => D#210
  # DEBUG this => D#210
  MEM[(struct  &)&eject] ={v} {CLOBBER};
  resx 3

<L107>:
  goto <bb 238> (<L18>);

<L20>:

<L18>:
  # DEBUG this => &inject
  # DEBUG D#216 => &inject.D.40296
  # DEBUG this => D#216
  # DEBUG D#219 => inject.D.40296._M_impl._M_finish
  # DEBUG D#218 => inject.D.40296._M_impl._M_start
  # DEBUG D#97 => D#218
  # DEBUG D#98 => D#219
  # DEBUG __first => D#97
  # DEBUG __last => D#98
  # DEBUG D.64307 => D#99
  # DEBUG D#96 => D#98
  # DEBUG D#95 => D#97
  # DEBUG D#93 => D#95
  # DEBUG D#94 => D#96
  # DEBUG __first => D#93
  # DEBUG __last => D#94
  # DEBUG D#92 => D#94
  # DEBUG D#91 => D#93
  # DEBUG D#89 => D#91
  # DEBUG D#90 => D#92
  # DEBUG D.63609 => D#89
  # DEBUG D.63608 => D#90
  # DEBUG D#217 => &inject.D.40296
  # DEBUG this => D#217
  # DEBUG D#215 => D#217->_M_impl._M_end_of_storage
  # DEBUG D#214 => (long int) D#215
  # DEBUG D#213 => (long int) inject$_M_impl$_M_start_345
  # DEBUG D#212 => D#214 - D#213
  # DEBUG D#211 => D#212 /[ex] 8
  # DEBUG D#208 => D#217
  # DEBUG D#209 => (long unsigned int) D#211
  # DEBUG __p => inject$_M_impl$_M_start_345
  # DEBUG this => D#208
  # DEBUG __n => D#209
  # DEBUG D#207 => D#209
  # DEBUG D#206 => D#208
  if (inject$_M_impl$_M_start_345 != 0B)
    goto <bb 239>;
  else
    goto <bb 240>;

  <bb 239>:
  # DEBUG D#205 => &D#206->_M_impl
  # DEBUG D#203 => D#205
  # DEBUG D#204 => D#207
  # DEBUG __p => inject$_M_impl$_M_start_345
  # DEBUG __a => D#203
  # DEBUG __n => D#204
  # DEBUG D#202 => D#204
  # DEBUG D#201 => D#203
  # DEBUG D#199 => D#201
  # DEBUG D#200 => D#202
  # DEBUG __p => inject$_M_impl$_M_start_345
  # DEBUG this => D#199
  # DEBUG D.69001 => D#200
  operator delete (inject$_M_impl$_M_start_345);

  <bb 240>:
  # DEBUG D#210 => &D#217->_M_impl
  # DEBUG this => D#210
  # DEBUG this => D#210
  # DEBUG this => D#210
  resx 2

}



;; Function <built-in> (void_Power_Module__calcChannel_const_FlitChannel__._loopfn.0, funcdef_no=2866, decl_uid=73007, cgraph_uid=947, symbol_order=2109)

<built-in> (void * .paral_data_param)
{
  signed long graphite_IV.845;
  signed long tt.851;
  signed long q.850;
  double * __first.846;
  struct  * .paral_data_load.849;
  int * iftmp.11_5;
  double pretmp_6;
  unsigned long _7;
  int _8;
  signed long _9;
  int _10;
  signed long _11;
  signed long _12;
  signed long _19;
  signed long _20;
  signed long _21;
  signed long ivtmp_23;
  signed long ivtmp_24;
  sizetype _27;
  sizetype _28;
  int * _29;
  int _30;
  double _31;
  double _32;
  sizetype _34;
  double * _35;

  <bb 2>:
  __first.846_4 = MEM[(struct  *).paral_data_param_1(D)].__first;
  iftmp.11_5 = MEM[(struct  *).paral_data_param_1(D)].iftmp.11;
  pretmp_6 = MEM[(struct  *).paral_data_param_1(D)].pretmp;
  _7 = MEM[(struct  *).paral_data_param_1(D)].D.73004;
  _8 = __builtin_omp_get_num_threads ();
  _9 = (signed long) _8;
  _10 = __builtin_omp_get_thread_num ();
  _11 = (signed long) _10;
  _12 = (signed long) _7;
  q.850_13 = _12 / _9;
  tt.851_14 = _12 % _9;
  if (_11 < tt.851_14)
    goto <bb 8>;
  else
    goto <bb 3>;

  <bb 3>:
  # q.850_15 = PHI <q.850_16(8), q.850_13(2)>
  # tt.851_17 = PHI <0(8), tt.851_14(2)>
  _19 = _11 * q.850_15;
  _20 = tt.851_17 + _19;
  _21 = q.850_15 + _20;
  if (_20 >= _21)
    goto <bb 4>;
  else
    goto <bb 5>;

  <bb 4>:
  return;

  <bb 5>:

  <bb 6>:
  # ivtmp_23 = PHI <_20(5), ivtmp_24(7)>
  _27 = (sizetype) ivtmp_23;
  _28 = _27 * 4;
  _29 = iftmp.11_5 + _28;
  _30 = MEM[(const int &)_29];
  _31 = (double) _30;
  _32 = _31 / pretmp_6;
  _34 = _27 * 8;
  _35 = __first.846_4 + _34;
  *_35 = _32;
  ivtmp_24 = ivtmp_23 + 1;
  if (_21 > ivtmp_24)
    goto <bb 7>;
  else
    goto <bb 4>;

  <bb 7>:
  goto <bb 6>;

  <bb 8>:
  q.850_16 = q.850_13 + 1;
  goto <bb 3>;

}


